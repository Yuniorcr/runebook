<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="31ab9ed47ac6872e6361cf76170e61fbc5a37449" translate="yes" xml:space="preserve">
          <source>Lookup looks up a user by username. If the user cannot be found, the returned error is of type UnknownUserError.</source>
          <target state="translated">Lookup は、ユーザ名でユーザを検索します。ユーザーが見つからない場合、返されるエラーは UnknownUserError 型です。</target>
        </trans-unit>
        <trans-unit id="2c6f1e000a822d2c47b6a21ebdd8f5f93b104795" translate="yes" xml:space="preserve">
          <source>Lookup maps an identifier to its keyword token or IDENT (if not a keyword).</source>
          <target state="translated">ルックアップは、識別子をそのキーワードトークンまたは IDENT (キーワードでない場合)にマップします。</target>
        </trans-unit>
        <trans-unit id="e9251196227d6115352b68461b921cf61a906b43" translate="yes" xml:space="preserve">
          <source>Lookup returns an unsorted list of at most n indices where the byte string s occurs in the indexed data. If n &amp;lt; 0, all occurrences are returned. The result is nil if s is empty, s is not found, or n == 0. Lookup time is O(log(N)*len(s) + len(result)) where N is the size of the indexed data.</source>
          <target state="translated">Lookupは、インデックス付けされたデータにバイト文字列sが出現する、最大n個のインデックスのソートされていないリストを返します。n &amp;lt;0の場合、すべてのオカレンスが返されます。sが空、sが見つからない、またはn == 0の場合、結果はnilです。ルックアップ時間はO（log（N）* len（s）+ len（result））です。ここで、Nはインデックス付きデータのサイズです。</target>
        </trans-unit>
        <trans-unit id="13380eb03660f02dbd5d025d2b74f6f24450d311" translate="yes" xml:space="preserve">
          <source>Lookup returns the Flag structure of the named command-line flag, returning nil if none exists.</source>
          <target state="translated">Lookupは、指定されたコマンドラインフラグのフラグ構造体を返し、存在しない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="7e5483b0c984c3a57ec759db6fb278e7b255ecf8" translate="yes" xml:space="preserve">
          <source>Lookup returns the Flag structure of the named flag, returning nil if none exists.</source>
          <target state="translated">ルックアップは、指定されたフラグのフラグ構造体を返し、存在しない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="5b0f26aebf1133c7a9f5776675b02659900d5a6f" translate="yes" xml:space="preserve">
          <source>Lookup returns the method with matching package and name, or nil if not found.</source>
          <target state="translated">Lookup は、パッケージと名前が一致するメソッドを返します。</target>
        </trans-unit>
        <trans-unit id="903dddeee2a83198e7d326397e76f54d9c716c8e" translate="yes" xml:space="preserve">
          <source>Lookup returns the object in scope s with the given name if such an object exists; otherwise the result is nil.</source>
          <target state="translated">Lookup は、指定された名前のオブジェクトがスコープ s に存在する場合には、そのオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="103697c251b3570afaab5577775dc041e648c7f1" translate="yes" xml:space="preserve">
          <source>Lookup returns the object with the given name if it is found in scope s, otherwise it returns nil. Outer scopes are ignored.</source>
          <target state="translated">Lookup は、指定した名前のオブジェクトがスコープ s で見つかった場合はそのオブジェクトを返し、そうでない場合は nil を返します。外側のスコープは無視されます。</target>
        </trans-unit>
        <trans-unit id="85596012a102f4cba55be912c69d163f2b6f529c" translate="yes" xml:space="preserve">
          <source>Lookup returns the profile with the given name, or nil if no such profile exists.</source>
          <target state="translated">検索は、指定された名前のプロファイルを返します。</target>
        </trans-unit>
        <trans-unit id="38285e372c5ecf7fee79e8f5475a7ad611b07ce7" translate="yes" xml:space="preserve">
          <source>Lookup returns the template with the given name that is associated with t, or nil if there is no such template.</source>
          <target state="translated">ルックアップは、tに関連付けられた指定された名前のテンプレートを返します。</target>
        </trans-unit>
        <trans-unit id="b619549e7b11c0494158ea2b89e4d841aca101b2" translate="yes" xml:space="preserve">
          <source>Lookup returns the template with the given name that is associated with t. It returns nil if there is no such template or the template has no definition.</source>
          <target state="translated">Lookupは、tに関連付けられた指定された名前のテンプレートを返します。</target>
        </trans-unit>
        <trans-unit id="c7a19da9ed723c89b3a482cb521b80e66fbdef7d" translate="yes" xml:space="preserve">
          <source>Lookup returns the value associated with key in the tag string. If the key is present in the tag the value (which may be empty) is returned. Otherwise the returned value will be the empty string. The ok return value reports whether the value was explicitly set in the tag string. If the tag does not have the conventional format, the value returned by Lookup is unspecified.</source>
          <target state="translated">ルックアップは、タグ文字列のキーに関連付けられた値を返します。タグ内にキーが存在する場合は、値(空の場合もあります)が返されます。そうでない場合は、空の文字列が返されます。ok戻り値は、値がタグ文字列に明示的に設定されているかどうかを報告します。タグが従来のフォーマットを持っていない場合、Lookupによって返される値は未指定です。</target>
        </trans-unit>
        <trans-unit id="b1ca47c6e14b4100767398ad08b18ceba8715515" translate="yes" xml:space="preserve">
          <source>Lookup searches for a symbol named symName in plugin p. A symbol is any exported variable or function. It reports an error if the symbol is not found. It is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">シンボルは、エクスポートされた変数や関数です。シンボルが見つからない場合はエラーを報告します。これは、複数のゴロチンによる同時使用には安全です。</target>
        </trans-unit>
        <trans-unit id="99f5d988af7e6ab773a1a6146dd567b1c079995f" translate="yes" xml:space="preserve">
          <source>LookupAddr performs a reverse lookup for the given address, returning a list of names mapping to that address.</source>
          <target state="translated">LookupAddr は、指定されたアドレスの逆引きを実行し、そのアドレスにマッピングされた名前のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c70e79ec87ca49562ea197d9f2381d9321d8fe1b" translate="yes" xml:space="preserve">
          <source>LookupCNAME returns the canonical name for the given host. Callers that do not care about the canonical name can call LookupHost or LookupIP directly; both take care of resolving the canonical name as part of the lookup.</source>
          <target state="translated">LookupCNAMEは指定したホストの正規名を返します。正規表現名を気にしない呼び出し元はLookupHostかLookupIPを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8f4cf5e540b2d7dc315df0e1c1d62f60bab0e907" translate="yes" xml:space="preserve">
          <source>LookupEnv</source>
          <target state="translated">LookupEnv</target>
        </trans-unit>
        <trans-unit id="1ae2ee5065be9305542647e69dc65b9fd29b64fe" translate="yes" xml:space="preserve">
          <source>LookupEnv retrieves the value of the environment variable named by the key. If the variable is present in the environment the value (which may be empty) is returned and the boolean is true. Otherwise the returned value will be empty and the boolean will be false.</source>
          <target state="translated">LookupEnvは、キーで指定された環境変数の値を取得します。その変数が環境に存在する場合は、値(空かもしれません)が返され、ブール値は真です。そうでなければ、返された値は空で、ブーリアンはFalseになります。</target>
        </trans-unit>
        <trans-unit id="450e346d69b1c045fb4f52550736ebb0d1d8a4f8" translate="yes" xml:space="preserve">
          <source>LookupFieldOrMethod looks up a field or method with given package and name in T and returns the corresponding *Var or *Func, an index sequence, and a bool indicating if there were any pointer indirections on the path to the field or method. If addressable is set, T is the type of an addressable variable (only matters for method lookups).</source>
          <target state="translated">LookupFieldOrMethod は、与えられたパッケージと名前を持つフィールドまたはメソッドを T で検索し、対応する *Var または *Func、インデックス・シーケンス、フィールドまたはメソッドへのパス上にポインタ間接があったかどうかを示す bool を返します。addressableが設定されている場合、Tはアドレス指定可能な変数の型です(メソッドのルックアップの場合のみ重要です)。</target>
        </trans-unit>
        <trans-unit id="9411c991fe6ec6318c1ddadaf5239d4c8ddf419e" translate="yes" xml:space="preserve">
          <source>LookupFunc returns the text, data, or bss symbol with the given name, or nil if no such symbol is found.</source>
          <target state="translated">LookupFunc は、指定された名前のテキスト、データ、または bss シンボルを返し、そのようなシンボルが見つからない場合は nil を返す。</target>
        </trans-unit>
        <trans-unit id="b92e9ccf5cc37f1e202dab80af7fdd5adb2d4fdf" translate="yes" xml:space="preserve">
          <source>LookupGroup looks up a group by name. If the group cannot be found, the returned error is of type UnknownGroupError.</source>
          <target state="translated">LookupGroupは名前でグループを検索します。グループが見つからない場合、返されるエラーは UnknownGroupError 型です。</target>
        </trans-unit>
        <trans-unit id="864ecbbe82138c5e60336462e2e26b9cc0321aa1" translate="yes" xml:space="preserve">
          <source>LookupGroupId looks up a group by groupid. If the group cannot be found, the returned error is of type UnknownGroupIdError.</source>
          <target state="translated">LookupGroupIdはgroupidでグループを検索します。グループが見つからない場合、返されるエラーは UnknownGroupIdError 型です。</target>
        </trans-unit>
        <trans-unit id="b9002491d44dda33fcc5ee2b368b90bad48de6db" translate="yes" xml:space="preserve">
          <source>LookupHost looks up the given host using the local resolver. It returns a slice of that host's addresses.</source>
          <target state="translated">LookupHost はローカルリゾルバを使用して指定されたホストを検索します。そのホストのアドレスのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="755f9feba02c89c681a556fd82001ef270f65acd" translate="yes" xml:space="preserve">
          <source>LookupIP looks up host for the given network using the local resolver. It returns a slice of that host's IP addresses of the type specified by network. network must be one of &quot;ip&quot;, &quot;ip4&quot; or &quot;ip6&quot;.</source>
          <target state="translated">LookupIPはローカルリゾルバを使用して、指定されたネットワークのホストを検索します。networkは &quot;ip&quot;、&quot;ip4&quot;、&quot;ip6 &quot;のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e9702748a7f19b9de210233c47deec534e3b2cf2" translate="yes" xml:space="preserve">
          <source>LookupIP looks up host using the local resolver. It returns a slice of that host's IPv4 and IPv6 addresses.</source>
          <target state="translated">LookupIPはローカルリゾルバを使用してホストを検索します。これは、そのホストのIPv4およびIPv6アドレスのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="f974c6e0590936cd53144b751f0c8c53e1e56f97" translate="yes" xml:space="preserve">
          <source>LookupIPAddr looks up host using the local resolver. It returns a slice of that host's IPv4 and IPv6 addresses.</source>
          <target state="translated">LookupIPAddrは、ローカルリゾルバを使用してホストを検索します。これは、そのホストのIPv4およびIPv6アドレスのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="39cfba6c5476e7337eb21e14ebf7cf0d6e5bedc2" translate="yes" xml:space="preserve">
          <source>LookupId looks up a user by userid. If the user cannot be found, the returned error is of type UnknownUserIdError.</source>
          <target state="translated">LookupIdは、useridでユーザーを検索します。ユーザーが見つからなかった場合、返されるエラーは UnknownUserIdError 型です。</target>
        </trans-unit>
        <trans-unit id="fa6df437374a8db7470645bbe9d4e27c81caaaeb" translate="yes" xml:space="preserve">
          <source>LookupMX returns the DNS MX records for the given domain name sorted by preference.</source>
          <target state="translated">LookupMXは、指定されたドメイン名のDNS MXレコードを優先順位でソートして返します。</target>
        </trans-unit>
        <trans-unit id="eb321dee8209258e986d88d75de6022a02c641f4" translate="yes" xml:space="preserve">
          <source>LookupNS returns the DNS NS records for the given domain name.</source>
          <target state="translated">LookupNSは、指定されたドメイン名のDNS NSレコードを返します。</target>
        </trans-unit>
        <trans-unit id="74ae49fce9af1a0aa1c34cc08bb2eaff3e2f9136" translate="yes" xml:space="preserve">
          <source>LookupParent follows the parent chain of scopes starting with s until it finds a scope where Lookup(name) returns a non-nil object, and then returns that scope and object. If a valid position pos is provided, only objects that were declared at or before pos are considered. If no such scope and object exists, the result is (nil, nil).</source>
          <target state="translated">LookupParent は、s で始まるスコープの親の連鎖をたどり、Lookup(name)が非 null のオブジェクトを返すスコープを見つけるまで、そのスコープとオブジェクトを返します。有効な位置 pos が提供されている場合は、pos 以前に宣言されたオブジェクトのみが考慮されます。そのようなスコープとオブジェクトが存在しない場合は、結果は (nil,nil)となります。</target>
        </trans-unit>
        <trans-unit id="0730b69dbfb75d19ecc78b2277aae489ac068a4f" translate="yes" xml:space="preserve">
          <source>LookupPort looks up the port for the given network and service.</source>
          <target state="translated">LookupPort は、指定されたネットワークとサービスのポートを検索します。</target>
        </trans-unit>
        <trans-unit id="f0a5a2c68645491f7f14b8ebf958dd03393284be" translate="yes" xml:space="preserve">
          <source>LookupSRV constructs the DNS name to look up following RFC 2782. That is, it looks up _service._proto.name. To accommodate services publishing SRV records under non-standard names, if both service and proto are empty strings, LookupSRV looks up name directly.</source>
          <target state="translated">LookupSRVはRFC2782に従って検索するDNS名を構築します。つまり、_service._proto.name を検索します。非標準名でSRVレコードを公開しているサービスに対応するため、 serviceとprotoの両方が空文字列の場合、LookupSRVは直接名前を検索します。</target>
        </trans-unit>
        <trans-unit id="6b37c6078d739a1c536ea751e03fbdc7bcfb4fd9" translate="yes" xml:space="preserve">
          <source>LookupSRV tries to resolve an SRV query of the given service, protocol, and domain name. The proto is &quot;tcp&quot; or &quot;udp&quot;. The returned records are sorted by priority and randomized by weight within a priority.</source>
          <target state="translated">LookupSRVは、指定されたサービス、プロトコル、ドメイン名のSRVクエリを解決しようとします。プロトコルは &quot;tcp &quot;または &quot;udp &quot;です。返されたレコードは優先度でソートされ、優先度の範囲内で重みでランダム化されます。</target>
        </trans-unit>
        <trans-unit id="53adeca568bb0a57f84e1f9d5ebd3b79ee2295f0" translate="yes" xml:space="preserve">
          <source>LookupSym returns the text, data, or bss symbol with the given name, or nil if no such symbol is found.</source>
          <target state="translated">LookupSym は、指定された名前のテキスト、データ、または bss シンボルを返します。</target>
        </trans-unit>
        <trans-unit id="e3ed61b0b0e3039a19a182ecd64a64ecece699f9" translate="yes" xml:space="preserve">
          <source>LookupTXT returns the DNS TXT records for the given domain name.</source>
          <target state="translated">LookupTXTは、指定されたドメイン名のDNS TXTレコードを返します。</target>
        </trans-unit>
        <trans-unit id="be0fd93650565eb4e261e38483006a0a6e96ae35" translate="yes" xml:space="preserve">
          <source>Lsh sets z = x &amp;lt;&amp;lt; n and returns z.</source>
          <target state="translated">Lshはz = x &amp;lt;&amp;lt; nを設定し、zを返します。</target>
        </trans-unit>
        <trans-unit id="8432c7185b33f226f3a96e2aaaeb0017fbd79a53" translate="yes" xml:space="preserve">
          <source>Lstat returns a FileInfo describing the named file. If the file is a symbolic link, the returned FileInfo describes the symbolic link. Lstat makes no attempt to follow the link. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Lstatは、指定されたファイルを記述したFileInfoを返します。ファイルがシンボリックリンクである場合、返されるFileInfoはシンボリックリンクを記述します。Lstatはリンクを辿ろうとはしません。エラーが発生した場合は、*PathError型となります。</target>
        </trans-unit>
        <trans-unit id="653b7ad5571eb02f2761c383b0762a05ad1e21e9" translate="yes" xml:space="preserve">
          <source>M is a type passed to a TestMain function to run the actual tests.</source>
          <target state="translated">Mは実際のテストを実行するTestMain関数に渡される型です。</target>
        </trans-unit>
        <trans-unit id="6c4afe9957321d9f90932c8eebed2802a4ac1436" translate="yes" xml:space="preserve">
          <source>MD5 is cryptographically broken and should not be used for secure applications.</source>
          <target state="translated">MD5は暗号化されていないので、安全なアプリケーションには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="2c0f2626fcfbcf6f5cc06f45f9a06123950573c9" translate="yes" xml:space="preserve">
          <source>Machine is found in Header.Machine.</source>
          <target state="translated">MachineはHeader.Machineにあります。</target>
        </trans-unit>
        <trans-unit id="abd1aeb6203ae00a3b2e20d1890fa31ee8357446" translate="yes" xml:space="preserve">
          <source>Magic number for the elf trampoline, chosen wisely to be an immediate value.</source>
          <target state="translated">即値で賢く選んだエルフトランポリンの魔法数。</target>
        </trans-unit>
        <trans-unit id="d30cb76631db62a976ef3584c436e5f44c54006c" translate="yes" xml:space="preserve">
          <source>Mail issues a MAIL command to the server using the provided email address. If the server supports the 8BITMIME extension, Mail adds the BODY=8BITMIME parameter. This initiates a mail transaction and is followed by one or more Rcpt calls.</source>
          <target state="translated">Mailは、指定されたメールアドレスを使用してサーバにMAILコマンドを発行します。サーバが8BITMIME拡張をサポートしている場合、MailはBODY=8BITMIMEパラメータを追加します。これによりメールトランザクションが開始され、1つ以上のRcptコールが続きます。</target>
        </trans-unit>
        <trans-unit id="62bce9422ff2d14f69ab80a154510232fc8a9afd" translate="yes" xml:space="preserve">
          <source>Main</source>
          <target state="translated">Main</target>
        </trans-unit>
        <trans-unit id="0784ed59d6aa6164d650ee5788e4f48c9ab53ccb" translate="yes" xml:space="preserve">
          <source>Main is an internal function, part of the implementation of the &quot;go test&quot; command. It was exported because it is cross-package and predates &quot;internal&quot; packages. It is no longer used by &quot;go test&quot; but preserved, as much as possible, for other systems that simulate &quot;go test&quot; using Main, but Main sometimes cannot be updated as new functionality is added to the testing package. Systems simulating &quot;go test&quot; should be updated to use MainStart.</source>
          <target state="translated">Main は内部関数で、&quot;go test&quot; コマンドの実装の一部です。これはクロスパッケージであり、&quot;内部 &quot;パッケージよりも前のものであるため、エクスポートされました。これは、もはや &quot;go test &quot;では使用されませんが、Mainを使用して &quot;go test &quot;をシミュレートする他のシステムのために、可能な限り保存されていますが、新しい機能がテストパッケージに追加されると、Mainを更新できないことがあります。go test」をシミュレートするシステムは、MainStartを使用するように更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4948070b9137e3c4295247505827d161a1430c0" translate="yes" xml:space="preserve">
          <source>MainStart is meant for use by tests generated by 'go test'. It is not meant to be called directly and is not subject to the Go 1 compatibility document. It may change signature from release to release.</source>
          <target state="translated">MainStartは、'go test'によって生成されたテストで使用するためのものです。直接呼び出されることは意図されておらず、Go 1互換性ドキュメントの対象にはなりません。リリースごとに署名が変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="76f0e763aa0460d3ebdb6819d8a8618bd610502c" translate="yes" xml:space="preserve">
          <source>Make returns the Value for x.</source>
          <target state="translated">Make は x の値を返します。</target>
        </trans-unit>
        <trans-unit id="d212d37a7f555035543edd9847aa0f8944d00dd6" translate="yes" xml:space="preserve">
          <source>MakeBool returns the Bool value for b.</source>
          <target state="translated">MakeBoolはbのBool値を返します。</target>
        </trans-unit>
        <trans-unit id="1bde4b612786d9c5dc71f0124e7f5aff783bd040" translate="yes" xml:space="preserve">
          <source>MakeChan creates a new channel with the specified type and buffer size.</source>
          <target state="translated">MakeChan は、指定されたタイプとバッファサイズで新しいチャンネルを作成します。</target>
        </trans-unit>
        <trans-unit id="8499a9ac9172e4fd5f8c155f860005e583c8290f" translate="yes" xml:space="preserve">
          <source>MakeFloat64 returns the Float value for x. If x is not finite, the result is an Unknown.</source>
          <target state="translated">MakeFloat64 は x の Float 値を返します。 x が有限でない場合、結果は Unknown となります。</target>
        </trans-unit>
        <trans-unit id="080b5a4b73c758656574c66abecfca2800793e12" translate="yes" xml:space="preserve">
          <source>MakeFromBytes returns the Int value given the bytes of its little-endian binary representation. An empty byte slice argument represents 0.</source>
          <target state="translated">MakeFromBytes は、リトルエンディアンのバイナリ表現のバイトを指定して Int 値を返します。空のバイトスライス引数は 0 を表します。</target>
        </trans-unit>
        <trans-unit id="04110b4029f3d51d7f1b1e32dfd59973aae981d8" translate="yes" xml:space="preserve">
          <source>MakeFromLiteral returns the corresponding integer, floating-point, imaginary, character, or string value for a Go literal string. The tok value must be one of token.INT, token.FLOAT, token.IMAG, token.CHAR, or token.STRING. The final argument must be zero. If the literal string syntax is invalid, the result is an Unknown.</source>
          <target state="translated">MakeFromLiteral は、Go リテラル文字列に対応する整数、浮動小数点、虚数、文字、または文字列の値を返します。token.INT、token.FLOAT、token.IMAG、token.CHAR、またはtoken.STRINGのいずれかの値を指定する必要があります。最後の引数はゼロでなければなりません。リテラル文字列の構文が無効な場合、結果はUnknownとなります。</target>
        </trans-unit>
        <trans-unit id="07a7a52634a41aa9116fcfbf959be30745aab340" translate="yes" xml:space="preserve">
          <source>MakeFunc</source>
          <target state="translated">MakeFunc</target>
        </trans-unit>
        <trans-unit id="643c1268f2628745bb74a74c0b6210fc3a37b52e" translate="yes" xml:space="preserve">
          <source>MakeFunc returns a new function of the given Type that wraps the function fn. When called, that new function does the following:</source>
          <target state="translated">MakeFuncは、関数fnをラップした、指定されたTypeの新しい関数を返します。呼び出されると、その新しい関数は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e91507405a52b25c3084428772c7fd9dd85d29bc" translate="yes" xml:space="preserve">
          <source>MakeImag returns the Complex value x*i; x must be Int, Float, or Unknown. If x is Unknown, the result is Unknown.</source>
          <target state="translated">MakeImag は複素数値 x*i を返します。xがUnknownの場合、結果はUnknownとなります。</target>
        </trans-unit>
        <trans-unit id="da6ba30b4b9d9da1cda2bb8d92f1cb545785138a" translate="yes" xml:space="preserve">
          <source>MakeInt64 returns the Int value for x.</source>
          <target state="translated">MakeInt64 は x の Int 値を返します。</target>
        </trans-unit>
        <trans-unit id="f32c29a01762bfefeedc6eb9373c057117a43683" translate="yes" xml:space="preserve">
          <source>MakeMap creates a new map with the specified type.</source>
          <target state="translated">MakeMap は、指定されたタイプの新しいマップを作成します。</target>
        </trans-unit>
        <trans-unit id="f52a4bb4c4b8bb40c53081e9faafbd87a3b197bc" translate="yes" xml:space="preserve">
          <source>MakeMapWithSize creates a new map with the specified type and initial space for approximately n elements.</source>
          <target state="translated">MakeMapWithSize は、指定された型と、約 n 個の要素の初期空間を持つ新しいマップを作成します。</target>
        </trans-unit>
        <trans-unit id="55769617e91451b5769c2caeaf264e53ded13fa6" translate="yes" xml:space="preserve">
          <source>MakeSlice creates a new zero-initialized slice value for the specified slice type, length, and capacity.</source>
          <target state="translated">MakeSlice は、指定されたスライス タイプ、長さ、および容量に対して、初期化されていない新しいスライス値を作成します。</target>
        </trans-unit>
        <trans-unit id="fbaf52cf63ee748130cb04d59e9e62d4763220eb" translate="yes" xml:space="preserve">
          <source>MakeString returns the String value for s.</source>
          <target state="translated">MakeString は、s の String 値を返します。</target>
        </trans-unit>
        <trans-unit id="5e3fa6d0673feb64d51f64ca41937f6da75eff62" translate="yes" xml:space="preserve">
          <source>MakeTable</source>
          <target state="translated">MakeTable</target>
        </trans-unit>
        <trans-unit id="785bab6ccfcc81c98865184a96f5abfea960b9ee" translate="yes" xml:space="preserve">
          <source>MakeTable returns a Table constructed from the specified polynomial. The contents of this Table must not be modified.</source>
          <target state="translated">MakeTableは、指定された多項式から構築されたテーブルを返します。このテーブルの内容は変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="9a7cf77039092ac36f999962d307dd473ba79848" translate="yes" xml:space="preserve">
          <source>MakeUint64 returns the Int value for x.</source>
          <target state="translated">MakeUint64 は x の Int 値を返します。</target>
        </trans-unit>
        <trans-unit id="e3694e34668330687dd83b2555828d28784d9456" translate="yes" xml:space="preserve">
          <source>MakeUnknown returns the Unknown value.</source>
          <target state="translated">MakeUnknown は Unknown の値を返します。</target>
        </trans-unit>
        <trans-unit id="fc2df9e4256f3cab4d6220a72b883983cc586bc1" translate="yes" xml:space="preserve">
          <source>MantExp breaks x into its mantissa and exponent components and returns the exponent. If a non-nil mant argument is provided its value is set to the mantissa of x, with the same precision and rounding mode as x. The components satisfy x == mant &amp;times; 2**exp, with 0.5 &amp;lt;= |mant| &amp;lt; 1.0. Calling MantExp with a nil argument is an efficient way to get the exponent of the receiver.</source>
          <target state="translated">MantExpはxを仮数と指数コンポーネントに分解し、指数を返します。 nil以外の引数を指定すると、その値はxの仮数に設定され、xと同じ精度と丸めモードになります。コンポーネントはx == mant&amp;times;2 ** expを満たし、0.5 &amp;lt;= | mant | &amp;lt;1.0。 nil引数を指定してMantExpを呼び出すことは、レシーバーの指数を取得する効率的な方法です。</target>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="053e42c081459c8a8812cfba3b82d0d77adea8da" translate="yes" xml:space="preserve">
          <source>Map is a string-to-Var map variable that satisfies the Var interface.</source>
          <target state="translated">MapはVarインターフェースを満たす文字列対Varマップ変数です。</target>
        </trans-unit>
        <trans-unit id="f35fa30552bf86b6a97457f5a529f46b1ec4ac90" translate="yes" xml:space="preserve">
          <source>Map is like a Go map[interface{}]interface{} but is safe for concurrent use by multiple goroutines without additional locking or coordination. Loads, stores, and deletes run in amortized constant time.</source>
          <target state="translated">MapはGo map[interface{}]interface{}のようなものですが、追加のロックや調整を必要とせず、複数のgoroutineによる同時使用にも安全です。ロード、ストア、削除は償却された一定時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="a55357ddaf2509ac1bf72db741f5c0cb32477d6c" translate="yes" xml:space="preserve">
          <source>Map returns a copy of the byte slice s with all its characters modified according to the mapping function. If mapping returns a negative value, the character is dropped from the byte slice with no replacement. The characters in s and the output are interpreted as UTF-8-encoded code points.</source>
          <target state="translated">Map は、すべての文字がマッピング関数に従って変更されたバイトスライス s のコピーを返します。マッピングが負の値を返す場合、その文字は置換されずにバイトスライスから削除されます。s の文字と出力は、UTF-8 でエンコードされたコードポイントとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="0c9f196c46a54d96a050fd1d4b324297d8b6bbfd" translate="yes" xml:space="preserve">
          <source>Map returns a copy of the string s with all its characters modified according to the mapping function. If mapping returns a negative value, the character is dropped from the string with no replacement.</source>
          <target state="translated">Map は、文字列 s のコピーを返し、そのすべての文字がマッピング関数に従って変更されます。マッピングが負の値を返した場合、その文字は置換されずに文字列から削除されます。</target>
        </trans-unit>
        <trans-unit id="4153ac6503fd2f26b78b101383b87a23ab8757a1" translate="yes" xml:space="preserve">
          <source>Map values are deeply equal when all of the following are true: they are both nil or both non-nil, they have the same length, and either they are the same map object or their corresponding keys (matched using Go equality) map to deeply equal values.</source>
          <target state="translated">マップ値は、次のすべてが真である場合に深く等しくなります。両方とも nil または両方とも non-nil であること、同じ長さであること、同じマップオブジェクトであること、または対応するキー (Go equality を使用してマッチされた)が深く等しくなるようにマップされていること。</target>
        </trans-unit>
        <trans-unit id="ff4de2d02636ff0b35d7ac62c39c77c38ada9f83" translate="yes" xml:space="preserve">
          <source>Map values encode as JSON objects. The map's key type must either be a string, an integer type, or implement encoding.TextMarshaler. The map keys are sorted and used as JSON object keys by applying the following rules, subject to the UTF-8 coercion described for string values above:</source>
          <target state="translated">マップ値は JSON オブジェクトとしてエンコードされます。マップのキー型は、文字列、整数型、または encoding.TextMarshaler を実装する必要があります。マップのキーは、上記の文字列値について説明した UTF-8 強制を条件に、以下のルールを適用して並べ替えられ、JSON オブジェクトのキーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="b746be79a80992b182da84fae71887f2ec6be3ae" translate="yes" xml:space="preserve">
          <source>MapIndex returns the value associated with key in the map v. It panics if v's Kind is not Map. It returns the zero Value if key is not found in the map or if v represents a nil map. As in Go, the key's value must be assignable to the map's key type.</source>
          <target state="translated">MapIndex は、マップ v のキーに関連付けられた値を返します。マップ内にキーが見つからない場合、または v がゼロのマップを表す場合は、ゼロの値を返します。Go の場合と同様に、キーの値はマップのキー タイプに代入可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="8a8f96c2a60281e18fdf86af937035c625b23750" translate="yes" xml:space="preserve">
          <source>MapKeys returns a slice containing all the keys present in the map, in unspecified order. It panics if v's Kind is not Map. It returns an empty slice if v represents a nil map.</source>
          <target state="translated">MapKeys は、マップに存在するすべてのキーを含むスライスを、不特定の順序で返します。v のカインドが Map でない場合はパニックになります。v が nil マップを表す場合は空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="393371509edfbb2648f262a9e6f9034fb677acf3" translate="yes" xml:space="preserve">
          <source>MapOf returns the map type with the given key and element types. For example, if k represents int and e represents string, MapOf(k, e) represents map[int]string.</source>
          <target state="translated">MapOf は、与えられたキーと要素の型を持つマップ型を返します。例えば、kがint、eが文字列を表す場合、MapOf(k,e)はmap[int]stringを表します。</target>
        </trans-unit>
        <trans-unit id="d868be238acb64c17c8f70f0fad5dbca2528fe1a" translate="yes" xml:space="preserve">
          <source>MapRange returns a range iterator for a map. It panics if v's Kind is not Map.</source>
          <target state="translated">MapRangeは、マップの範囲イテレータを返します。vのKindがMapでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="61f910b08995efdd96acb55eeb3536149a9ef35f" translate="yes" xml:space="preserve">
          <source>Mapping between XML elements and data structures is inherently flawed: an XML element is an order-dependent collection of anonymous values, while a data structure is an order-independent collection of named values. See package json for a textual representation more suitable to data structures.</source>
          <target state="translated">XML要素とデータ構造の間のマッピングは本質的に欠陥があります:XML要素は順序に依存した無名の値の集合ですが、データ構造は順序に依存しない名前付きの値の集合です。データ構造により適したテキスト表現については json パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b32ea0b0909e5260b55a58bd4f84f53b5d1ee01" translate="yes" xml:space="preserve">
          <source>Maps are sent as an unsigned count followed by that many key, element pairs. Empty but non-nil maps are sent, so if the receiver has not allocated one already, one will always be allocated on receipt unless the transmitted map is nil and not at the top level.</source>
          <target state="translated">マップは、その数だけのキーと要素のペアに続く符号なしのカウントとして送信されます。空ではあるが非 nil のマップが送信されるので、受信者がまだマップを割り当てていない場合は、送信されたマップが nil でトップレベルでない限り、受信時に常に 1 つが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="ea8cf739cc820968d208878224615030de7ce782" translate="yes" xml:space="preserve">
          <source>MarkComplete marks a package as complete.</source>
          <target state="translated">MarkComplete は、パッケージを完全なものとしてマークします。</target>
        </trans-unit>
        <trans-unit id="9cdfbcba7d735bd862886d7bc92cdad6e808e063" translate="yes" xml:space="preserve">
          <source>Marshal</source>
          <target state="translated">Marshal</target>
        </trans-unit>
        <trans-unit id="eb880bd9042393d95106d6336ca91dc7587c2469" translate="yes" xml:space="preserve">
          <source>Marshal converts a point into the uncompressed form specified in section 4.3.6 of ANSI X9.62.</source>
          <target state="translated">マーシャルは、ポイントをANSI X9.62の4.3.6節で規定されている非圧縮形式に変換します。</target>
        </trans-unit>
        <trans-unit id="9a568ce91bc9dd658d20c975742fe8852b970117" translate="yes" xml:space="preserve">
          <source>Marshal converts a point on the curve into the uncompressed form specified in section 4.3.6 of ANSI X9.62.</source>
          <target state="translated">マーシャルは、曲線上の点を ANSI X9.62 の 4.3.6 節で指定された非圧縮形式に変換します。</target>
        </trans-unit>
        <trans-unit id="9dcb1e980e770758d048cdbf31965108d4392cbe" translate="yes" xml:space="preserve">
          <source>Marshal handles an array or slice by marshaling each of the elements. Marshal handles a pointer by marshaling the value it points at or, if the pointer is nil, by writing nothing. Marshal handles an interface value by marshaling the value it contains or, if the interface value is nil, by writing nothing. Marshal handles all other data by writing one or more XML elements containing the data.</source>
          <target state="translated">マーシャルは、各要素をマーシャル化することで配列やスライスを処理します。マーシャルは、ポインタが指す値をマーシャル化するか、ポインタが nil の場合は何も書き込まないことでポインタを扱います。マーシャルは、それが含む値をマーシャル化することでインターフェイス値を処理します。マーシャルは、データを含む 1 つ以上の XML 要素を書き込むことで、他のすべてのデータを処理します。</target>
        </trans-unit>
        <trans-unit id="62270c3791161d9e12b821a2dd5a09da76b7d939" translate="yes" xml:space="preserve">
          <source>Marshal returns the ASN.1 encoding of val.</source>
          <target state="translated">マーシャルは val の ASN.1 エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="d0688338eb6d31b2244e733d8a38556baae70f6c" translate="yes" xml:space="preserve">
          <source>Marshal returns the JSON encoding of v.</source>
          <target state="translated">Marshal は v.の JSON エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="fd91d49c812b62dbf02b368713f03ffdd50b3ad6" translate="yes" xml:space="preserve">
          <source>Marshal returns the XML encoding of v.</source>
          <target state="translated">Marshal は v の XML エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="0de0f4cea1e586ddc2b14ecaaa41c4020891c164" translate="yes" xml:space="preserve">
          <source>Marshal traverses the value v recursively. If an encountered value implements the Marshaler interface and is not a nil pointer, Marshal calls its MarshalJSON method to produce JSON. If no MarshalJSON method is present but the value implements encoding.TextMarshaler instead, Marshal calls its MarshalText method and encodes the result as a JSON string. The nil pointer exception is not strictly necessary but mimics a similar, necessary exception in the behavior of UnmarshalJSON.</source>
          <target state="translated">Marshal は値 v を再帰的に巡回します。遭遇した値が Marshaler インターフェースを実装しており、nil ポインタでない場合、Marshal はその MarshalJSON メソッドを呼び出して JSON を生成します。MarshalJSON メソッドが存在せず、値が encoding.TextMarshaler を実装している場合、Marshal は MarshalText メソッドを呼び出し、結果を JSON 文字列としてエンコードします。ニルポインタ例外は厳密には必要ではありませんが、UnmarshalJSONの動作にある同様の必要な例外を模倣しています。</target>
        </trans-unit>
        <trans-unit id="fafaa1ebf620f3798cc6a8c58b669a7ea73fa6b9" translate="yes" xml:space="preserve">
          <source>Marshal will return an error if asked to marshal a channel, function, or map.</source>
          <target state="translated">チャネル、関数、またはマップのマーシャルを要求された場合、マーシャルはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="db453e34c5fbd8220b129af743f7150483dd7932" translate="yes" xml:space="preserve">
          <source>MarshalBinary encodes the receiver into a binary form and returns the result.</source>
          <target state="translated">MarshalBinary は、受信機をバイナリ形式にエンコードして結果を返します。</target>
        </trans-unit>
        <trans-unit id="0bedf8f876a84577084ab2b16cacfd3254f063b2" translate="yes" xml:space="preserve">
          <source>MarshalBinary implements the encoding.BinaryMarshaler interface.</source>
          <target state="translated">MarshalBinary は encoding.BinaryMarshaler インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="b0dd910cac1cbbac9d43ce35c5c8bd02d8b6dc15" translate="yes" xml:space="preserve">
          <source>MarshalCompressed converts a point on the curve into the compressed form specified in section 4.3.6 of ANSI X9.62.</source>
          <target state="translated">MarshalCompressed は、曲線上の点を ANSI X9.62 の 4.3.6 節で指定された圧縮形式に変換します。</target>
        </trans-unit>
        <trans-unit id="ee53c721c287cd02dbf9f92c9f5e2a991f1f615d" translate="yes" xml:space="preserve">
          <source>MarshalECPrivateKey converts an EC private key to SEC 1, ASN.1 DER form.</source>
          <target state="translated">MarshalECPrivateKeyは、EC秘密鍵をSEC 1、ASN.1 DER形式に変換します。</target>
        </trans-unit>
        <trans-unit id="f9e73b7909d7a048a7d6c9e44a0504b100446e17" translate="yes" xml:space="preserve">
          <source>MarshalIndent</source>
          <target state="translated">MarshalIndent</target>
        </trans-unit>
        <trans-unit id="42cea4e6f776e84fbd92d4a9f5ef1c3b218c54ea" translate="yes" xml:space="preserve">
          <source>MarshalIndent is like Marshal but applies Indent to format the output. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting.</source>
          <target state="translated">MarshalIndent は Marshal と似ていますが、出力のフォーマットに Indent を適用します。出力の各JSON要素は、プレフィックスで始まる新しい行から始まり、インデントの入れ子に応じて1つ以上のインデントのコピーが続きます。</target>
        </trans-unit>
        <trans-unit id="b93c5c2e6a3ce1b1ffab83edfd3027b2f5a958ee" translate="yes" xml:space="preserve">
          <source>MarshalIndent works like Marshal, but each XML element begins on a new indented line that starts with prefix and is followed by one or more copies of indent according to the nesting depth.</source>
          <target state="translated">MarshalIndentはMarshalと同じように動作しますが、各XML要素は接頭辞で始まる新しいインデント行から始まり、入れ子の深さに応じて1つ以上のインデントのコピーが続きます。</target>
        </trans-unit>
        <trans-unit id="1fe8186b542a0c93fd906dfbf1d378366d66b83e" translate="yes" xml:space="preserve">
          <source>MarshalJSON implements the json.Marshaler interface.</source>
          <target state="translated">MarshalJSONはjson.Marshalerインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="34cafb57f3bf4f148de8715aea906ddd24ca5b67" translate="yes" xml:space="preserve">
          <source>MarshalJSON implements the json.Marshaler interface. The time is a quoted string in RFC 3339 format, with sub-second precision added if present.</source>
          <target state="translated">MarshalJSON は json.Marshaler インターフェースを実装しています。時刻はRFC3339形式の引用符付き文字列で、サブ秒の精度があれば追加されます。</target>
        </trans-unit>
        <trans-unit id="79739908efedb1d030bbc1bed7fc419173d502bc" translate="yes" xml:space="preserve">
          <source>MarshalJSON returns m as the JSON encoding of m.</source>
          <target state="translated">MarshalJSONは、mのJSONエンコーディングとしてmを返します。</target>
        </trans-unit>
        <trans-unit id="dc6df497a7bc177e42838cf4d34e8a9fff8f37f9" translate="yes" xml:space="preserve">
          <source>MarshalPKCS1PrivateKey converts an RSA private key to PKCS #1, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS1PrivateKey は RSA 秘密鍵を PKCS #1、ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="49c4c53b126d5e728f2103ee05aeb8456df06352" translate="yes" xml:space="preserve">
          <source>MarshalPKCS1PrivateKey converts an RSA private key to PKCS#1, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS1PrivateKey は RSA 秘密鍵を PKCS#1,ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="679ae9ec5a41bfe29c2cb0674503ed9d5f0c3931" translate="yes" xml:space="preserve">
          <source>MarshalPKCS1PublicKey converts an RSA public key to PKCS #1, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS1PublicKey は RSA 公開鍵を PKCS #1,ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="6dbb4afc98d66ecc773730ab53b2d3d25670dae3" translate="yes" xml:space="preserve">
          <source>MarshalPKCS1PublicKey converts an RSA public key to PKCS#1, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS1PublicKey は RSA 公開鍵を PKCS#1,ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="45354407cae2db32eaa7718849355ec2165c982c" translate="yes" xml:space="preserve">
          <source>MarshalPKCS8PrivateKey converts a private key to PKCS #8, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS8PrivateKey は秘密鍵を PKCS #8,ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="de5c14e75241b3422cb105f3219299fa62dfe8b0" translate="yes" xml:space="preserve">
          <source>MarshalPKCS8PrivateKey converts an RSA private key to PKCS#8, ASN.1 DER form.</source>
          <target state="translated">MarshalPKCS8PrivateKey は RSA 秘密鍵を PKCS#8、ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="7c79ebdd42b60d7be91053c9a1161ea6d5ebbab9" translate="yes" xml:space="preserve">
          <source>MarshalPKIXPublicKey converts a public key to PKIX, ASN.1 DER form.</source>
          <target state="translated">MarshalPKIXPublicKey は公開鍵を PKIX、ASN.1 DER 形式に変換します。</target>
        </trans-unit>
        <trans-unit id="f11f550d1b6c7d3b4aec2299c3db3d8ce95b07ef" translate="yes" xml:space="preserve">
          <source>MarshalPKIXPublicKey converts a public key to PKIX, ASN.1 DER form. The encoded public key is a SubjectPublicKeyInfo structure (see RFC 5280, Section 4.1).</source>
          <target state="translated">MarshalPKIXPublicKey は、公開鍵を PKIX、ASN.1 DER 形式に変換します。エンコードされた公開鍵は、SubjectPublicKeyInfo構造体である(RFC 5280、セクション4.1参照)。</target>
        </trans-unit>
        <trans-unit id="def0005fff87679bf808d28ec17c1164d884c779" translate="yes" xml:space="preserve">
          <source>MarshalText encodes the receiver into UTF-8-encoded text and returns the result.</source>
          <target state="translated">MarshalText は、受信機を UTF-8 でエンコードされたテキストにエンコードし、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="0e6ec969b789b52d1c5120ea85c9ad182259f168" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="e9f45c26a4b805caf1ff0c7f133453fe1405ea6f" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface. Only the Float value is marshaled (in full precision), other attributes such as precision or accuracy are ignored.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。Float 値のみが (完全な精度で)マーシャリングされ、精度や精度などの他の属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="1fbe6f2d906b1d5948fbd9851ef463bba4786bcb" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface. The encoding is the same as returned by String, with one exception: When len(ip) is zero, it returns an empty slice.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。エンコーディングは String が返すものと同じですが、1つの例外があります。len(ip)がゼロの場合、空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="83f43718a3654277944df9768c5af959f91ebe45" translate="yes" xml:space="preserve">
          <source>MarshalText implements the encoding.TextMarshaler interface. The time is formatted in RFC 3339 format, with sub-second precision added if present.</source>
          <target state="translated">MarshalText は encoding.TextMarshaler インターフェースを実装しています。時刻は RFC 3339 フォーマットでフォーマットされており、もしあればサブセコンドの精度が追加されます。</target>
        </trans-unit>
        <trans-unit id="14fcaccd265e76bda57404dd966d33311a65ffc3" translate="yes" xml:space="preserve">
          <source>MarshalWithParams allows field parameters to be specified for the top-level element. The form of the params is the same as the field tags.</source>
          <target state="translated">MarshalWithParamsでは、トップレベル要素にフィールドパラメータを指定することができます。パラメータの形式はフィールドタグと同じです。</target>
        </trans-unit>
        <trans-unit id="34052c5ea18ea7495e24eea4a4d137cecba4872c" translate="yes" xml:space="preserve">
          <source>MarshalXML encodes the receiver as zero or more XML elements. By convention, arrays or slices are typically encoded as a sequence of elements, one per entry. Using start as the element tag is not required, but doing so will enable Unmarshal to match the XML elements to the correct struct field. One common implementation strategy is to construct a separate value with a layout corresponding to the desired XML and then to encode it using e.EncodeElement. Another common strategy is to use repeated calls to e.EncodeToken to generate the XML output one token at a time. The sequence of encoded tokens must make up zero or more valid XML elements.</source>
          <target state="translated">MarshalXML は、受信機を 0 個以上の XML 要素としてエンコードします。慣例では、配列やスライスは通常、1 エントリあたり 1 つの要素のシーケンスとしてエンコードされます。要素タグとして start を使用することは必須ではありませんが、そうすることで Unmarshal は XML 要素を正しい構造体フィールドにマッチさせることができます。一般的な実装方法の一つは、目的のXMLに対応するレイアウトを持つ別の値を構築し、それをe.EncodeElementを使用してエンコードすることです。もう一つの一般的な実装方法は、e.EncodeTokenの繰り返し呼び出しを使用して、XML出力を一度に一つのトークンずつ生成することです。エンコードされたトークンのシーケンスは、0個以上の有効なXML要素を構成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="41210996386655a5e9f720c4f9e735ef866f35cb" translate="yes" xml:space="preserve">
          <source>MarshalXMLAttr returns an XML attribute with the encoded value of the receiver. Using name as the attribute name is not required, but doing so will enable Unmarshal to match the attribute to the correct struct field. If MarshalXMLAttr returns the zero attribute Attr{}, no attribute will be generated in the output. MarshalXMLAttr is used only for struct fields with the &quot;attr&quot; option in the field tag.</source>
          <target state="translated">MarshalXMLAttr は、受信機のエンコードされた値を持つ XML 属性を返します。属性名として name を使用することは必須ではありませんが、そうすることで Unmarshal がその属性を正しい構造体フィールドにマッチさせることが可能になります。MarshalXMLAttr がゼロ属性 Attr{}を返す場合、出力には属性は生成されません。MarshalXMLAttr は、フィールドタグに &quot;attr&quot; オプションを持つ構造体フィールドにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="18fd048394e569d8195a81313b9e64f2eba7ee35" translate="yes" xml:space="preserve">
          <source>Marshaler is the interface implemented by objects that can marshal themselves into valid XML elements.</source>
          <target state="translated">マーシャラーは、自分自身を有効なXML要素にマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="47a2664e5f80a08312afe3946a74993c99143c6d" translate="yes" xml:space="preserve">
          <source>Marshaler is the interface implemented by types that can marshal themselves into valid JSON.</source>
          <target state="translated">マーシャラーは、自分自身を有効なJSONにマーシャリングすることができる型によって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="4a00ca7b38dd0506417989c16c2542f21f4d7c58" translate="yes" xml:space="preserve">
          <source>MarshalerAttr is the interface implemented by objects that can marshal themselves into valid XML attributes.</source>
          <target state="translated">MarshalerAttrは、自分自身を有効なXML属性にマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="5c61140e5006502f101ce6ee77324538231946bb" translate="yes" xml:space="preserve">
          <source>Mask returns the result of masking the IP address ip with mask.</source>
          <target state="translated">Maskは、IPアドレスのipをmaskでマスクした結果を返します。</target>
        </trans-unit>
        <trans-unit id="0335207f5e840d81afa158c6c2bb6e3fa02653b4" translate="yes" xml:space="preserve">
          <source>Match</source>
          <target state="translated">Match</target>
        </trans-unit>
        <trans-unit id="b841b8491dab0dabb8feb21367e059b0624fa3bb" translate="yes" xml:space="preserve">
          <source>Match reports whether name matches the shell file name pattern. The pattern syntax is:</source>
          <target state="translated">Match は、名前がシェルファイル名のパターンと一致するかどうかを報告します。パターンの構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="65238f3fd69244258d0fe7834a55d41fd9fdb4b5" translate="yes" xml:space="preserve">
          <source>Match reports whether name matches the shell pattern. The pattern syntax is:</source>
          <target state="translated">Match は、名前がシェルパターンと一致するかどうかを報告します。パターンの構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5f5677ee8a35a029aa3e90c1d56b65878192d3b4" translate="yes" xml:space="preserve">
          <source>Match reports whether the byte slice b contains any match of the regular expression pattern. More complicated queries need to use Compile and the full Regexp interface.</source>
          <target state="translated">Matchは、バイトスライスbに正規表現パターンのマッチが含まれているかどうかをレポートします。より複雑なクエリは、コンパイルと完全な Regexp インターフェイスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="269393d413e09f2ec5ba2e6fbdd662834a23a90b" translate="yes" xml:space="preserve">
          <source>Match reports whether the byte slice b contains any match of the regular expression re.</source>
          <target state="translated">Match は、バイトスライス b に正規表現 re のマッチが含まれているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="188538220b1d59de0ef20f48b5e9a854e7a08bec" translate="yes" xml:space="preserve">
          <source>Match requires pattern to match all of name, not just a substring. The only possible returned error is ErrBadPattern, when pattern is malformed.</source>
          <target state="translated">Matchは、部分文字列だけでなく、名前のすべてにマッチするようにパターンを要求します。返される可能性のあるエラーは、パターンが不正な場合にErrBadPatternのみです。</target>
        </trans-unit>
        <trans-unit id="fb78f24b3584ab26ff8d868ae02c24bc3e7a84f8" translate="yes" xml:space="preserve">
          <source>MatchEmptyWidth reports whether the instruction matches an empty string between the runes before and after. It should only be called when i.Op == InstEmptyWidth.</source>
          <target state="translated">MatchEmptyWidthは、命令が前後のルーンの間の空の文字列にマッチするかどうかを報告します。これは、i.Op ==InstEmptyWidthの時にのみ呼び出されるべきです。</target>
        </trans-unit>
        <trans-unit id="766801810391656eb72b30e1a620adc09dc91643" translate="yes" xml:space="preserve">
          <source>MatchFile considers the name of the file and may use ctxt.OpenFile to read some or all of the file's content.</source>
          <target state="translated">MatchFileはファイル名を考慮し、ctxt.OpenFileを使用してファイルの内容の一部または全部を読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="32f23226c3beda09b3f84dfe037d9c9ada013d83" translate="yes" xml:space="preserve">
          <source>MatchFile reports whether the file with the given name in the given directory matches the context and would be included in a Package created by ImportDir of that directory.</source>
          <target state="translated">MatchFileは、指定されたディレクトリ内の指定された名前のファイルがコンテキストにマッチし、そのディレクトリのImportDirによって作成されたパッケージに含まれるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="230e93d3f899e27c4d81d89f3ff53b1eca08bb37" translate="yes" xml:space="preserve">
          <source>MatchReader reports whether the text returned by the RuneReader contains any match of the regular expression pattern. More complicated queries need to use Compile and the full Regexp interface.</source>
          <target state="translated">MatchReader は、RuneReader によって返されたテキストに正規表現パターンと一致するものが含まれているかどうかを報告します。より複雑なクエリは、コンパイルと完全な Regexp インターフェイスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="25c8a8e56012833544924619010cf5721432e9ab" translate="yes" xml:space="preserve">
          <source>MatchReader reports whether the text returned by the RuneReader contains any match of the regular expression re.</source>
          <target state="translated">MatchReader は、RuneReader が返すテキストに正規表現 re のマッチが含まれているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="da28fa625630bc6b02e3ddab6dad208f72cd40bb" translate="yes" xml:space="preserve">
          <source>MatchRune reports whether the instruction matches (and consumes) r. It should only be called when i.Op == InstRune.</source>
          <target state="translated">MatchRune は、命令が r にマッチしているかどうかを報告します (および消費しているかどうかを報告します)。</target>
        </trans-unit>
        <trans-unit id="c488501e6169e99f4e3f5cf4b601fce5b1d18d9c" translate="yes" xml:space="preserve">
          <source>MatchRunePos checks whether the instruction matches (and consumes) r. If so, MatchRunePos returns the index of the matching rune pair (or, when len(i.Rune) == 1, rune singleton). If not, MatchRunePos returns -1. MatchRunePos should only be called when i.Op == InstRune.</source>
          <target state="translated">MatchRunePos は、命令が r にマッチしている (および消費している)かどうかをチェックします。マッチしている場合は、マッチしているルーンペアのインデックスを返します (または len(i.Rune)==1 の場合はルーンシングルトン)。そうでない場合、MatchRunePos は -1 を返します。MatchRunePosは、i.Op ==InstRuneの場合にのみ呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c78293f6444063ae02b61b422c861a74ea5c0992" translate="yes" xml:space="preserve">
          <source>MatchString</source>
          <target state="translated">MatchString</target>
        </trans-unit>
        <trans-unit id="16440a205b6632a6f9ce394e96f4e30da62834e6" translate="yes" xml:space="preserve">
          <source>MatchString reports whether the string s contains any match of the regular expression pattern. More complicated queries need to use Compile and the full Regexp interface.</source>
          <target state="translated">MatchString は、文字列 s が正規表現パターンにマッチするものを含むかどうかをレポートします。より複雑なクエリは、Compile と完全な Regexp インターフェイスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b53f246428ae463a3e54d71ff6883543bf5e6b2" translate="yes" xml:space="preserve">
          <source>MatchString reports whether the string s contains any match of the regular expression re.</source>
          <target state="translated">MatchString は、文字列 s が正規表現 re にマッチするものを含むかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="386301aac4b9205f957c7e2aded15dd3a3170a4d" translate="yes" xml:space="preserve">
          <source>Mathematical constants.</source>
          <target state="translated">数学的な定数。</target>
        </trans-unit>
        <trans-unit id="e9339d8c2f10a09643bf33b4b293ddbf19fb634d" translate="yes" xml:space="preserve">
          <source>Mathematical interval notation such as [0, n) is used throughout the documentation for this package.</source>
          <target state="translated">このパッケージのドキュメントでは、[0,n]のような数学的な区間表記が使用されています。</target>
        </trans-unit>
        <trans-unit id="b64028b7ef9651f5e0c9bf08d57c40c964fb143d" translate="yes" xml:space="preserve">
          <source>Max returns the larger of x or y.</source>
          <target state="translated">Maxは、xとyのどちらか大きい方を返します。</target>
        </trans-unit>
        <trans-unit id="6c955f951ae2dab8e6f5e54e3a98c7139c879b48" translate="yes" xml:space="preserve">
          <source>MaxBase is the largest number base accepted for string conversions.</source>
          <target state="translated">MaxBaseは、文字列変換に受け入れられる最大の数値ベースです。</target>
        </trans-unit>
        <trans-unit id="d9d067026e10599a63c5386be336904174743560" translate="yes" xml:space="preserve">
          <source>MaxBytesReader is similar to io.LimitReader but is intended for limiting the size of incoming request bodies. In contrast to io.LimitReader, MaxBytesReader's result is a ReadCloser, returns a non-EOF error for a Read beyond the limit, and closes the underlying reader when its Close method is called.</source>
          <target state="translated">MaxBytesReader は io.LimitReader に似ていますが、受信するリクエストボディのサイズを制限することを目的としています。io.LimitReader とは対照的に、MaxBytesReader の結果は ReadCloser であり、制限を超えて読み込まれた場合は非EOF エラーを返し、Close メソッドが呼ばれた場合には基礎となるリーダーを閉じます。</target>
        </trans-unit>
        <trans-unit id="739ec125397a0373ef46f377effdf6be903c6fd8" translate="yes" xml:space="preserve">
          <source>MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources.</source>
          <target state="translated">MaxBytesReader は、クライアントが誤ってまたは悪意を持って大規模なリクエストを送信し、サーバー リソースを無駄にすることを防ぎます。</target>
        </trans-unit>
        <trans-unit id="61be69d33fec3be907f4ea6e04af100d85f7675e" translate="yes" xml:space="preserve">
          <source>MaxCap walks the regexp to find the maximum capture index.</source>
          <target state="translated">MaxCapは、最大のキャプチャインデックスを見つけるために正規表現を歩きます。</target>
        </trans-unit>
        <trans-unit id="df7b72cdcf2650790c955b9e993a0a0c2fbe25b4" translate="yes" xml:space="preserve">
          <source>MaxEncodedLen returns the maximum length of an encoding of n source bytes.</source>
          <target state="translated">MaxEncodedLen は、n 個のソースバイトのエンコーディングの最大長を返します。</target>
        </trans-unit>
        <trans-unit id="89c65689a7af2cc891fbeafce261f8df625c4303" translate="yes" xml:space="preserve">
          <source>MaxVarintLenN is the maximum length of a varint-encoded N-bit integer.</source>
          <target state="translated">MaxVarintLenN は、バリントエンコードされた N ビット整数の最大長です。</target>
        </trans-unit>
        <trans-unit id="1157d0585a10f5f650da7952c06f96ac83134419" translate="yes" xml:space="preserve">
          <source>MemProfile returns a profile of memory allocated and freed per allocation site.</source>
          <target state="translated">MemProfileは、割り当てサイトごとに割り当てられたメモリと解放されたメモリのプロファイルを返します。</target>
        </trans-unit>
        <trans-unit id="d8d6b923c77de71210013c81589eaf2c4fe10654" translate="yes" xml:space="preserve">
          <source>MemProfile returns n, the number of records in the current memory profile. If len(p) &amp;gt;= n, MemProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, MemProfile does not change p and returns n, false.</source>
          <target state="translated">MemProfileは、現在のメモリプロファイルのレコード数であるnを返します。len（p）&amp;gt; = nの場合、MemProfileはプロファイルをpにコピーし、n、trueを返します。len（p）&amp;lt;nの場合、MemProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="c013eb0f98db13dab8418c5c8a82f2ae00733c42" translate="yes" xml:space="preserve">
          <source>MemProfileRate controls the fraction of memory allocations that are recorded and reported in the memory profile. The profiler aims to sample an average of one allocation per MemProfileRate bytes allocated.</source>
          <target state="translated">MemProfileRate は、メモリプロファイルに記録され、報告されるメモリ割り当ての割合を制御します。プロファイラは、割り当てられたMemProfileRateバイトごとに平均して1つの割り当てをサンプリングすることを目指しています。</target>
        </trans-unit>
        <trans-unit id="e7ca02f761fad2cef95bf22ec3a49a7a10d4d7ec" translate="yes" xml:space="preserve">
          <source>MemString returns r.AllocedBytesPerOp and r.AllocsPerOp in the same format as 'go test'.</source>
          <target state="translated">MemStringは、'go test'と同じ形式でr.AllocedBytesPerOpとr.AllocsPerOpを返します。</target>
        </trans-unit>
        <trans-unit id="5885c324e2b06a6d3881d7dca39a2a9515c8b84e" translate="yes" xml:space="preserve">
          <source>MergeLine merges a line with the following line. It is akin to replacing the newline character at the end of the line with a space (to not change the remaining offsets). To obtain the line number, consult e.g. Position.Line. MergeLine will panic if given an invalid line number.</source>
          <target state="translated">MergeLine は、行を次の行にマージします。これは、行末の改行文字をスペースに置き換えるのと似ています(残りのオフセットを変更しないため)。行番号を取得するには、例えば Position.Line を参照してください。MergeLine は無効な行番号が与えられるとパニックになります。</target>
        </trans-unit>
        <trans-unit id="c56ee5f274246d4907a3f8792aa47b70201e2839" translate="yes" xml:space="preserve">
          <source>MergePackageFiles creates a file AST by merging the ASTs of the files belonging to a package. The mode flags control merging behavior.</source>
          <target state="translated">MergePackageFilesは、パッケージに属するファイルのASTをマージしてファイルASTを生成します。モードフラグはマージの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="7f6f0438a1b28dd75bfa1675a817c685d6ecf309" translate="yes" xml:space="preserve">
          <source>Method represents a single method.</source>
          <target state="translated">メソッドは1つのメソッドを表しています。</target>
        </trans-unit>
        <trans-unit id="d5cc6ded0a12c1ea7e555fe80a4dd907a9326b65" translate="yes" xml:space="preserve">
          <source>Method returns a function value corresponding to v's i'th method. The arguments to a Call on the returned function should not include a receiver; the returned function will always use v as the receiver. Method panics if i is out of range or if v is a nil interface value.</source>
          <target state="translated">メソッドは、v の i 番目のメソッドに対応する関数値を返します。返された関数の Call への引数にはレシーバーを含めてはいけません。メソッドは、i が範囲外の場合、または v が nil のインターフェイス値の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="8580bc7cf729ccd2e220561b0a2aa0093af75313" translate="yes" xml:space="preserve">
          <source>Method returns the i'th method of interface t for 0 &amp;lt;= i &amp;lt; t.NumMethods(). The methods are ordered by their unique Id.</source>
          <target state="translated">メソッドは、0 &amp;lt;= i &amp;lt;t.NumMethods（）の場合、インターフェースtのi番目のメソッドを返します。メソッドは、固有のIDで並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="e73d31c50554a72b3457fac0045f98cc3b8b72de" translate="yes" xml:space="preserve">
          <source>Method returns the i'th method of interface t for 0 &amp;lt;= i &amp;lt; t.NumMethods(). The methods are ordered by their unique Id. The interface must have been completed.</source>
          <target state="translated">Method returns the i'th method of interface t for 0 &amp;lt;= i &amp;lt; t.NumMethods(). The methods are ordered by their unique Id. The interface must have been completed.</target>
        </trans-unit>
        <trans-unit id="0d5919064169d4fa2dfa670c5cd1d31fe4f5ec77" translate="yes" xml:space="preserve">
          <source>Method returns the i'th method of named type t for 0 &amp;lt;= i &amp;lt; t.NumMethods().</source>
          <target state="translated">メソッドは、名前付きタイプtのi番目のメソッドを0 &amp;lt;= i &amp;lt;t.NumMethods（）に対して返します。</target>
        </trans-unit>
        <trans-unit id="7b406879ef1e276f5ac32d320c19bb15ff9ced44" translate="yes" xml:space="preserve">
          <source>MethodByName returns a function value corresponding to the method of v with the given name. The arguments to a Call on the returned function should not include a receiver; the returned function will always use v as the receiver. It returns the zero Value if no method was found.</source>
          <target state="translated">MethodByName は、指定された名前の v のメソッドに対応する関数値を返します。返された関数のCallへの引数にはレシーバーを含めてはいけません。メソッドが見つからなかった場合は、ゼロ値を返します。</target>
        </trans-unit>
        <trans-unit id="1995bb7d8a495c29ba7a59b0b373d66ee1f82142" translate="yes" xml:space="preserve">
          <source>MethodSet</source>
          <target state="translated">MethodSet</target>
        </trans-unit>
        <trans-unit id="c5e9a1bdc9129c6b25b91c69272ee11aa65ae4ac" translate="yes" xml:space="preserve">
          <source>Methods of this form typically return the incoming receiver as well, to enable simple call chaining.</source>
          <target state="translated">この形式のメソッドは、通常、単純なコールチェーニングを可能にするために、着信レシーバも返す。</target>
        </trans-unit>
        <trans-unit id="68e37169f0406f89039a63dc143d5a05fc9b5510" translate="yes" xml:space="preserve">
          <source>Methods which don't require a result value to be passed in (for instance, Int.Sign), simply return the result. In this case, the receiver is typically the first operand, named x:</source>
          <target state="translated">結果の値を渡す必要のないメソッド(例えば、Int.Sign)は、単に結果を返します。この場合、レシーバは通常、xという名前の最初のオペランドになります。</target>
        </trans-unit>
        <trans-unit id="594fd92ee6be7b72c6f8d9451d2a9f9e3bae51ed" translate="yes" xml:space="preserve">
          <source>Microseconds returns the duration as an integer microsecond count.</source>
          <target state="translated">Microseconds は、持続時間を整数のマイクロ秒数で返します。</target>
        </trans-unit>
        <trans-unit id="c825c82257bdcbc1a135579145266c6ee484713a" translate="yes" xml:space="preserve">
          <source>Milliseconds returns the duration as an integer millisecond count.</source>
          <target state="translated">Millisecondsは、持続時間を整数のミリ秒数で返します。</target>
        </trans-unit>
        <trans-unit id="d4a6fe67a8f15c1c894bf05225db6c07db7dc926" translate="yes" xml:space="preserve">
          <source>Min returns the smaller of x or y.</source>
          <target state="translated">Minは、xまたはyのどちらか小さい方を返します。</target>
        </trans-unit>
        <trans-unit id="dacfaba796bce8b807113e726ae0618041c980f0" translate="yes" xml:space="preserve">
          <source>MinPrec returns the minimum precision required to represent x exactly (i.e., the smallest prec before x.SetPrec(prec) would start rounding x). The result is 0 for |x| == 0 and |x| == Inf.</source>
          <target state="translated">MinPrecは、xを正確に表現するのに必要な最小精度(すなわち、x.SetPrec(prec)がxを丸め始める前の最小prec)を返します。x| ==0 と |x| ==Inf の場合、結果は 0 になります。</target>
        </trans-unit>
        <trans-unit id="b959e8418a57efc341ef2ea80360e0eee71f265e" translate="yes" xml:space="preserve">
          <source>MinRead is the minimum slice size passed to a Read call by Buffer.ReadFrom. As long as the Buffer has at least MinRead bytes beyond what is required to hold the contents of r, ReadFrom will not grow the underlying buffer.</source>
          <target state="translated">MinReadは、Buffer.ReadFromによってReadコールに渡される最小スライスサイズです。Bufferに、rの内容を保持するために必要なバイト数以上のMinReadバイトがある限り、ReadFromはその下のバッファを成長させません。</target>
        </trans-unit>
        <trans-unit id="ba682b9edf600874d186945b125535bdb2fd2d00" translate="yes" xml:space="preserve">
          <source>Minute returns the minute offset within the hour specified by t, in the range [0, 59].</source>
          <target state="translated">Minuteは、tで指定した時間内の分のオフセットを、[0,59]の範囲で返します。</target>
        </trans-unit>
        <trans-unit id="f75dd7f0b206dbae82a8f8f0b7023bff54f3a266" translate="yes" xml:space="preserve">
          <source>Minutes returns the duration as a floating point number of minutes.</source>
          <target state="translated">Minutesは、浮動小数点数である分として期間を返します。</target>
        </trans-unit>
        <trans-unit id="eb3dbdbaa825e8d8a44607bf8d9e0b1911e69e12" translate="yes" xml:space="preserve">
          <source>MissingMethod returns (nil, false) if V implements T, otherwise it returns a missing method required by T and whether it is missing or just has the wrong type.</source>
          <target state="translated">MissingMethodは、VがTを実装している場合は(nil,false)を返し、そうでない場合は、Tで必要とされるメソッドが見つからないか、型が間違っているだけなのかを返します。</target>
        </trans-unit>
        <trans-unit id="37de4657eb0dc5b3413cb095b60f3d8129f6593f" translate="yes" xml:space="preserve">
          <source>Mkdir creates a new directory with the specified name and permission bits (before umask). If there is an error, it will be of type *PathError.</source>
          <target state="translated">Mkdirは、指定された名前とパーミッションビット(umaskの前)で新しいディレクトリを作成します。エラーが発生した場合は、*PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="677ef1c770313b12ac646270f84a792125bb5633" translate="yes" xml:space="preserve">
          <source>MkdirAll creates a directory named path, along with any necessary parents, and returns nil, or else returns an error. The permission bits perm (before umask) are used for all directories that MkdirAll creates. If path is already a directory, MkdirAll does nothing and returns nil.</source>
          <target state="translated">MkdirAll は path という名前のディレクトリを必要な親とともに作成し、nil を返すか、エラーを返します。パーミッションビット perm (umask の前)は、MkdirAll が作成するすべてのディレクトリに使用されます。path が既にディレクトリである場合、MkdirAll は何もせず nil を返します。</target>
        </trans-unit>
        <trans-unit id="f388dbfb78ec3e8821ae0844a947cecd488dd5ff" translate="yes" xml:space="preserve">
          <source>Mod</source>
          <target state="translated">Mod</target>
        </trans-unit>
        <trans-unit id="373154d6ec87032b198bd3426fdb98b629297d1b" translate="yes" xml:space="preserve">
          <source>Mod returns the floating-point remainder of x/y. The magnitude of the result is less than y and its sign agrees with that of x.</source>
          <target state="translated">Mod は x/y の浮動小数点の余剰を返します。結果の大きさは y より小さく、その符号は x のそれと一致します。</target>
        </trans-unit>
        <trans-unit id="f2b25579075ef3b96af2a2e04dfbe27a4023e7c3" translate="yes" xml:space="preserve">
          <source>Mod returns the point q in r such that p.X-q.X is a multiple of r's width and p.Y-q.Y is a multiple of r's height.</source>
          <target state="translated">Modは、p.X-q.Xがrの幅の倍数、p.Y-q.Yがrの高さの倍数となるようなrの点qを返します。</target>
        </trans-unit>
        <trans-unit id="5301dec2851eeeadb9f8edd3bcc14178a7cc1eac" translate="yes" xml:space="preserve">
          <source>Mod sets z to the modulus x%y for y != 0 and returns z. If y == 0, a division-by-zero run-time panic occurs. Mod implements Euclidean modulus (unlike Go); see DivMod for more details.</source>
          <target state="translated">y !=0 の場合、mod は z をモジュラス x%y に設定して z を返します。Mod はユークリッド係数を実装しています(Go とは異なります)。</target>
        </trans-unit>
        <trans-unit id="6d74b87ee55add7bade81d22a2a4510010f96ac8" translate="yes" xml:space="preserve">
          <source>ModInverse sets z to the multiplicative inverse of g in the ring ℤ/nℤ and returns z. If g and n are not relatively prime, g has no multiplicative inverse in the ring ℤ/nℤ. In this case, z is unchanged and the return value is nil.</source>
          <target state="translated">ModInverseは、zを環状のℤ/nℤにおけるgの乗算逆数に設定してzを返します。 gとnが相対素数でない場合、gは環状のℤ/nℤにおいて乗算逆数を持ちません。この場合、zは変化せず、戻り値はnilです。</target>
        </trans-unit>
        <trans-unit id="7a4fd0d385cd06f73e61243a029e76aa018a4f23" translate="yes" xml:space="preserve">
          <source>ModSqrt sets z to a square root of x mod p if such a square root exists, and returns z. The modulus p must be an odd prime. If x is not a square mod p, ModSqrt leaves z unchanged and returns nil. This function panics if p is not an odd integer.</source>
          <target state="translated">ModSqrtは、そのような平方根が存在する場合、zをxの平方根mod pに設定し、zを返します。x が p の平方根でない場合、ModSqrt は z を変更せずに nil を返します。この関数は、p が奇数整数でない場合にパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="aac634faa69d653814bcee88f0a5dfc61028be1b" translate="yes" xml:space="preserve">
          <source>ModTime returns the modification time in UTC using the legacy ModifiedDate and ModifiedTime fields.</source>
          <target state="translated">ModTime は、従来の ModifiedDate フィールドと ModifiedTime フィールドを使用して UTC での変更時刻を返します。</target>
        </trans-unit>
        <trans-unit id="aa00a628811be04815f4dd62095833b576cd8722" translate="yes" xml:space="preserve">
          <source>Mode returns the permission and mode bits for the FileHeader.</source>
          <target state="translated">Mode は、FileHeader のパーミッションとモードビットを返します。</target>
        </trans-unit>
        <trans-unit id="28a0f960b89726a468e14a8ebdf922a21170bc22" translate="yes" xml:space="preserve">
          <source>Mode returns the rounding mode of x.</source>
          <target state="translated">Mode は x の丸めモードを返します。</target>
        </trans-unit>
        <trans-unit id="6298c555b80608e54cb786bb4e651a115a6841d0" translate="yes" xml:space="preserve">
          <source>Mode values control the operation of New and NewFromFiles.</source>
          <target state="translated">モード値は、New および NewFromFiles の動作を制御します。</target>
        </trans-unit>
        <trans-unit id="8b4ea19087de0202d8e6a728b310de2dbb997d4d" translate="yes" xml:space="preserve">
          <source>Mode values control the operation of New.</source>
          <target state="translated">モード値は、Newの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="ee5a2d9bea8822761c2af443e30dd8b140094e31" translate="yes" xml:space="preserve">
          <source>Model can convert any Color to one from its own color model. The conversion may be lossy.</source>
          <target state="translated">モデルは、任意のカラーを独自のカラーモデルからのカラーに変換することができます。変換にはロスが発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="0b1b5b05fec2cd6d8e78c93f5a64f37706828f50" translate="yes" xml:space="preserve">
          <source>ModelFunc returns a Model that invokes f to implement the conversion.</source>
          <target state="translated">ModelFuncは,変換を実装するためにfを呼び出すModelを返します。</target>
        </trans-unit>
        <trans-unit id="5361e7791528a917952293ec5274927cfb3ce5f8" translate="yes" xml:space="preserve">
          <source>Models for the standard color types.</source>
          <target state="translated">スタンダードカラータイプのモデルです。</target>
        </trans-unit>
        <trans-unit id="4ab1036aa9ff79a5be9e4d8141cfacd5fbaebbcc" translate="yes" xml:space="preserve">
          <source>Modf</source>
          <target state="translated">Modf</target>
        </trans-unit>
        <trans-unit id="e56d540b050862c318d1aab05d9e382cf0a4c4af" translate="yes" xml:space="preserve">
          <source>Modf returns integer and fractional floating-point numbers that sum to f. Both values have the same sign as f.</source>
          <target state="translated">Modfは、合計がfになる整数と小数の浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="c8fdb64fd7614b420c244d4e876ef3defb57abcc" translate="yes" xml:space="preserve">
          <source>Modular exponentation of inputs of a particular size is not a cryptographically constant-time operation.</source>
          <target state="translated">特定のサイズの入力のモジュール式指数化は、暗号的に一定の時間操作ではありません。</target>
        </trans-unit>
        <trans-unit id="69af563fc3d8f6971f904cbb0080c2ef55ec0b2c" translate="yes" xml:space="preserve">
          <source>Modular exponentiation of inputs of a particular size is not a cryptographically constant-time operation.</source>
          <target state="translated">特定のサイズの入力のモジュール式指数化は、暗号的に一定の時間操作ではありません。</target>
        </trans-unit>
        <trans-unit id="2dd5487e8328e8658b359aa63c39e650ee5e1172" translate="yes" xml:space="preserve">
          <source>Module represents a module.</source>
          <target state="translated">モジュールはモジュールを表します。</target>
        </trans-unit>
        <trans-unit id="b1156729972d424016ec9426afb303f681b9f79f" translate="yes" xml:space="preserve">
          <source>Monotonic Clocks</source>
          <target state="translated">単調時計</target>
        </trans-unit>
        <trans-unit id="082bc378cd60e17a38d99898b21955299c5b60c8" translate="yes" xml:space="preserve">
          <source>Month</source>
          <target state="translated">Month</target>
        </trans-unit>
        <trans-unit id="66f2529dffac9fbc9ec633022a5f8b0bedc8c37f" translate="yes" xml:space="preserve">
          <source>Month returns the month of the year specified by t.</source>
          <target state="translated">Monthは、tで指定した年の月を返します。</target>
        </trans-unit>
        <trans-unit id="668403e4d2bd4eddcb9aed021f2a174eb200dc88" translate="yes" xml:space="preserve">
          <source>More control over the server's behavior is available by creating a custom Server:</source>
          <target state="translated">カスタムサーバーを作成することで、サーバーの動作をより制御することができます。</target>
        </trans-unit>
        <trans-unit id="85e92ae26cba75c5b6d8d17d26d228885ce889bf" translate="yes" xml:space="preserve">
          <source>More intricate examples appear below.</source>
          <target state="translated">より複雑な例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="544eaf68f34e5f73c2388e2ae8096fe2204e2585" translate="yes" xml:space="preserve">
          <source>More reports whether there is another element in the current array or object being parsed.</source>
          <target state="translated">現在の配列や解析中のオブジェクトに別の要素があるかどうかをさらに報告します。</target>
        </trans-unit>
        <trans-unit id="90d58f1e96850d37632fc55c5c016f2a97fe1679" translate="yes" xml:space="preserve">
          <source>Most applications should not use the cipher suites in this list, and should only use those returned by CipherSuites.</source>
          <target state="translated">ほとんどのアプリケーションはこのリストにある暗号化スイートを使うべきではなく、CipherSuites が返す暗号化スイートのみを使うべきです。</target>
        </trans-unit>
        <trans-unit id="0f3ee8adfe02375a24e073f00bd7e8a1f885bbc4" translate="yes" xml:space="preserve">
          <source>Most callers should instead use Open, which transparently decompresses data and verifies checksums.</source>
          <target state="translated">ほとんどの呼び出し元は、透過的にデータを解凍してチェックサムを検証する Open を使うべきです。</target>
        </trans-unit>
        <trans-unit id="204dcf13599d817427dd2073f0e35f29dec05bc1" translate="yes" xml:space="preserve">
          <source>Most clients should use the runtime/pprof package instead of calling GoroutineProfile directly.</source>
          <target state="translated">ほとんどのクライアントは、GoroutineProfileを直接呼び出すのではなく、runtime/pprofパッケージを使うべきです。</target>
        </trans-unit>
        <trans-unit id="2d4c0e8a354401dd8233b4356c1a0bfb3bef2533" translate="yes" xml:space="preserve">
          <source>Most clients should use the runtime/pprof package instead of calling MutexProfile directly.</source>
          <target state="translated">ほとんどのクライアントは、MutexProfileを直接呼び出すのではなく、runtime/pprofパッケージを使うべきです。</target>
        </trans-unit>
        <trans-unit id="fd55cd96fc64e1ee33e5ec28f8d3ef1539755bd8" translate="yes" xml:space="preserve">
          <source>Most clients should use the runtime/pprof package instead of calling ThreadCreateProfile directly.</source>
          <target state="translated">ほとんどのクライアントでは、ThreadCreateProfile を直接呼び出すのではなく、 runtime/pprof パッケージを使うべきです。</target>
        </trans-unit>
        <trans-unit id="646d3b37e5e676f43944b0bc1ef49ce31304c768" translate="yes" xml:space="preserve">
          <source>Most clients should use the runtime/pprof package or the testing package's -test.blockprofile flag instead of calling BlockProfile directly.</source>
          <target state="translated">ほとんどのクライアントは、BlockProfile を直接呼び出すのではなく、 runtime/pprof パッケージか testing パッケージの -test.blockprofile フラグを使うべきです。</target>
        </trans-unit>
        <trans-unit id="fb5152386c9af905d8957add4efa5a79dbea3046" translate="yes" xml:space="preserve">
          <source>Most clients should use the runtime/pprof package or the testing package's -test.cpuprofile flag instead of calling SetCPUProfileRate directly.</source>
          <target state="translated">ほとんどのクライアントは、SetCPUProfileRate を直接呼び出すのではなく、 runtime/pprof パッケージや testing パッケージの -test.cpuprofile フラグを使うべきです。</target>
        </trans-unit>
        <trans-unit id="cc35c049e953a9f16068abcc035a22ebd5b44d39" translate="yes" xml:space="preserve">
          <source>Most clients should use the runtime/pprof package or the testing package's -test.memprofile flag instead of calling MemProfile directly.</source>
          <target state="translated">ほとんどのクライアントは、MemProfile を直接呼び出す代わりに runtime/pprof パッケージか testing パッケージの -test.memprofile フラグを使うべきです。</target>
        </trans-unit>
        <trans-unit id="4ec46c99b7f54aae4ce499a3028a52ae6552a566" translate="yes" xml:space="preserve">
          <source>Most code should use package sql.</source>
          <target state="translated">ほとんどのコードはsqlパッケージを使うべきです。</target>
        </trans-unit>
        <trans-unit id="19ad74392792ed9739e1d28d7638006df3165986" translate="yes" xml:space="preserve">
          <source>Most users will open a database via a driver-specific connection helper function that returns a *DB. No database drivers are included in the Go standard library. See &lt;a href=&quot;https://golang.org/s/sqldrivers&quot;&gt;https://golang.org/s/sqldrivers&lt;/a&gt; for a list of third-party drivers.</source>
          <target state="translated">ほとんどのユーザーは、* DBを返すドライバー固有の接続ヘルパー関数を介してデータベースを開きます。Go標準ライブラリにはデータベースドライバーは含まれていません。サードパーティのドライバーのリストについては、&lt;a href=&quot;https://golang.org/s/sqldrivers&quot;&gt;https：//golang.org/s/sqldrivers&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f91f314aaefda0dd307d2029c302761e8e26460" translate="yes" xml:space="preserve">
          <source>Most uses of this package need not call Handshake explicitly: the first Read or Write will call it automatically.</source>
          <target state="translated">このパッケージのほとんどの用途では、ハンドシェイクを明示的に呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="99ed633024d8dc0b448fbe281ca6b8177fe27c56" translate="yes" xml:space="preserve">
          <source>Move moves n % r.Len() elements backward (n &amp;lt; 0) or forward (n &amp;gt;= 0) in the ring and returns that ring element. r must not be empty.</source>
          <target state="translated">Moveは、リング内でn％r.Len（）要素を後方（n &amp;lt;0）または前方（n&amp;gt; = 0）に移動し、そのリング要素を返します。rは空であってはなりません。</target>
        </trans-unit>
        <trans-unit id="9b69d844fd11e170cd47ef8ff2a97178038b339b" translate="yes" xml:space="preserve">
          <source>MoveAfter moves element e to its new position after mark. If e or mark is not an element of l, or e == mark, the list is not modified. The element and mark must not be nil.</source>
          <target state="translated">MoveAfter は、要素 e を mark の後の新しい位置に移動します。e または mark が l の要素でない場合、または e ==mark の場合、リストは変更されません。要素とマークはnilであってはなりません。</target>
        </trans-unit>
        <trans-unit id="33d96c6050800194a8407c20b5ca64f6846c7299" translate="yes" xml:space="preserve">
          <source>MoveBefore moves element e to its new position before mark. If e or mark is not an element of l, or e == mark, the list is not modified. The element and mark must not be nil.</source>
          <target state="translated">MoveBefore は、要素 e を mark の前の新しい位置に移動します。e または mark が l の要素でない場合、または e ==mark の場合、リストは変更されません。要素とマークはnilであってはなりません。</target>
        </trans-unit>
        <trans-unit id="48e25efa9d98fcd9ecb09e7fe7ed87eb426e273a" translate="yes" xml:space="preserve">
          <source>MoveToBack moves element e to the back of list l. If e is not an element of l, the list is not modified. The element must not be nil.</source>
          <target state="translated">e が l の要素でない場合、リストは変更されません。要素は nil であってはなりません。</target>
        </trans-unit>
        <trans-unit id="6f362d110c32c4c4500cf8d4c490f31132fbb839" translate="yes" xml:space="preserve">
          <source>MoveToFront moves element e to the front of list l. If e is not an element of l, the list is not modified. The element must not be nil.</source>
          <target state="translated">e が l の要素でない場合、リストは変更されません。要素は nil であってはなりません。</target>
        </trans-unit>
        <trans-unit id="90114025b275cbc4bcd8b562c1a58b937341fdfb" translate="yes" xml:space="preserve">
          <source>Mul returns the full-width product of x and y: (hi, lo) = x * y with the product bits' upper half returned in hi and the lower half returned in lo.</source>
          <target state="translated">Mul は x と y の全角積を返します。(hi,lo)=x*y となり、積ビットの上半分がhiで、下半分がloで返されます。</target>
        </trans-unit>
        <trans-unit id="26a6e266f6cfb3f2f503215e9850aa02f8f9da06" translate="yes" xml:space="preserve">
          <source>Mul returns the vector p*k.</source>
          <target state="translated">Mulは、ベクトルp*kを返します。</target>
        </trans-unit>
        <trans-unit id="da7ddc591d70c1b455e617b48abf92f18b455b2b" translate="yes" xml:space="preserve">
          <source>Mul sets z to the product x*y and returns z.</source>
          <target state="translated">Mul は z を積 x*y にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="77d0b9f0608c4902ed59d2c704e92843cbc28318" translate="yes" xml:space="preserve">
          <source>Mul sets z to the rounded product x*y and returns z. Precision, rounding, and accuracy reporting are as for Add. Mul panics with ErrNaN if one operand is zero and the other operand an infinity. The value of z is undefined in that case.</source>
          <target state="translated">Mulは、zを丸められた積x*yに設定し、zを返します。精度、丸め、精度の報告はAddの場合と同様です。一方のオペランドがゼロで他方のオペランドが無限大の場合、MulはErrNaNでパニックを起こします。この場合、zの値は未定義です。</target>
        </trans-unit>
        <trans-unit id="b861b19bddbd0bc8bab01f2fb9899e8f0de45d9e" translate="yes" xml:space="preserve">
          <source>Mul32 returns the 64-bit product of x and y: (hi, lo) = x * y with the product bits' upper half returned in hi and the lower half returned in lo.</source>
          <target state="translated">Mul32 は x と y の 64 ビット積を返します。(hi,lo)=x*y となり、積ビットの上半分がhiで、下半分がloで返されます。</target>
        </trans-unit>
        <trans-unit id="a25ed66383b36d2221150102c89edba8efbb0c02" translate="yes" xml:space="preserve">
          <source>Mul64 returns the 128-bit product of x and y: (hi, lo) = x * y with the product bits' upper half returned in hi and the lower half returned in lo.</source>
          <target state="translated">Mul64 は x と y の 128 ビットの積を返します。(hi,lo)=x*y となり、積ビットの上半分がhiで、下半分がloで返されます。</target>
        </trans-unit>
        <trans-unit id="9b4ec4f00f8b7fc0f34cde307521a1856a53aa0b" translate="yes" xml:space="preserve">
          <source>MulRange sets z to the product of all integers in the range [a, b] inclusively and returns z. If a &amp;gt; b (empty range), the result is 1.</source>
          <target state="translated">MulRangeは、範囲[a、b]内のすべての整数の積にzを設定し、zを返します。a&amp;gt; b（空の範囲）の場合、結果は1です。</target>
        </trans-unit>
        <trans-unit id="9eaaace92dc7df7151a8f45536ad19d09279e182" translate="yes" xml:space="preserve">
          <source>MultiReader</source>
          <target state="translated">MultiReader</target>
        </trans-unit>
        <trans-unit id="5d860fccf2fdf207ce3f3ccf216ed942057c9707" translate="yes" xml:space="preserve">
          <source>MultiReader returns a Reader that's the logical concatenation of the provided input readers. They're read sequentially. Once all inputs have returned EOF, Read will return EOF. If any of the readers return a non-nil, non-EOF error, Read will return that error.</source>
          <target state="translated">MultiReader は、提供された入力リーダーを論理的に連結したリーダーを返します。それらは順次読み込まれます。すべての入力がEOFを返すと、ReadはEOFを返します。いずれかのリーダーが非ゼロでEOFではないエラーを返した場合、Readはそのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="4faad6c802b39e83086bf59c7e2903092d5a691b" translate="yes" xml:space="preserve">
          <source>MultiWriter</source>
          <target state="translated">MultiWriter</target>
        </trans-unit>
        <trans-unit id="0e1b7f58a5f86256f9545cb408ae583680594854" translate="yes" xml:space="preserve">
          <source>MultiWriter creates a writer that duplicates its writes to all the provided writers, similar to the Unix tee(1) command.</source>
          <target state="translated">MultiWriter は、Unix の tee(1)コマンドと同様に、提供されたすべてのライタへの書き込みを複製するライタを作成します。</target>
        </trans-unit>
        <trans-unit id="3688e77a9282752c7dda127e113710f59d4dafc0" translate="yes" xml:space="preserve">
          <source>MulticastAddrs returns a list of multicast, joined group addresses for a specific interface.</source>
          <target state="translated">MulticastAddrs は、特定のインターフェイスのマルチキャスト、結合されたグループアドレスのリストを返します。</target>
        </trans-unit>
        <trans-unit id="b9bb2b61e03ad9524ce2fff2bf8e39b44ea3373a" translate="yes" xml:space="preserve">
          <source>MultipartReader returns a MIME multipart reader if this is a multipart/form-data or a multipart/mixed POST request, else returns nil and an error. Use this function instead of ParseMultipartForm to process the request body as a stream.</source>
          <target state="translated">MultipartReader は、これが multipart/form-data または multipart/mixed POST リクエストである場合は MIME マルチパートリーダを返し、そうでない場合は nil とエラーを返します。リクエストボディをストリームとして処理するには、ParseMultipartForm の代わりにこの関数を使用します。</target>
        </trans-unit>
        <trans-unit id="a782cf6ce52ba3c0409a2a494107b5e5d1c07de1" translate="yes" xml:space="preserve">
          <source>Multiple example functions for a package/type/function/method may be provided by appending a distinct suffix to the name. The suffix must start with a lower-case letter.</source>
          <target state="translated">パッケージ/タイプ/関数/メソッドの複数の例の関数は、名前に異なる接尾辞をつけることで提供することができます。接尾辞は小文字で始めなければなりません。</target>
        </trans-unit>
        <trans-unit id="97b40210f32960166bd52edfda4ec341de71235b" translate="yes" xml:space="preserve">
          <source>Multiple goroutines may invoke methods on a Conn simultaneously.</source>
          <target state="translated">複数のゴロチンが同時にConn上でメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6556b625ec1c61ad052df5128208f619bcfcc88f" translate="yes" xml:space="preserve">
          <source>Multiple goroutines may invoke methods on a Listener simultaneously.</source>
          <target state="translated">複数のゴロチンが同時にリスナーのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d58239811314fdc4f9e0084cf7b627a6e3f8ff5f" translate="yes" xml:space="preserve">
          <source>Multiple goroutines may invoke methods on a PacketConn simultaneously.</source>
          <target state="translated">複数の goroutine が同時に PacketConn のメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e78e9f2f9df049dd02923df34377c4f53cba9951" translate="yes" xml:space="preserve">
          <source>Multiple invocations of this function will return the same value, so it can be used for equality checks and switch statements.</source>
          <target state="translated">この関数の複数回の呼び出しは同じ値を返すので、平等性のチェックやスイッチ文に使用することができます。</target>
        </trans-unit>
        <trans-unit id="df2c141b4f12a4ff075a8eeb676ff9cf5032e4dc" translate="yes" xml:space="preserve">
          <source>MultiplePackageError describes a directory containing multiple buildable Go source files for multiple packages.</source>
          <target state="translated">MultiplePackageError は、複数のパッケージに対して複数のビルド可能な Go ソース ファイルを含むディレクトリを記述します。</target>
        </trans-unit>
        <trans-unit id="79a3dc65878a83d5c3f20c9bd1c6028718af5b1b" translate="yes" xml:space="preserve">
          <source>Multistream controls whether the reader supports multistream files.</source>
          <target state="translated">Multistream は、リーダーがマルチストリームファイルをサポートしているかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="5d72b823f6e2f60a18b59bcf20086228b774dfee" translate="yes" xml:space="preserve">
          <source>Must is a helper that wraps a call to a function returning (*Template, error) and panics if the error is non-nil. It is intended for use in variable initializations such as</source>
          <target state="translated">Mustは、(*Template,error)を返す関数の呼び出しをラップし、エラーが非nilの場合にパニックを起こすヘルパーです。のような変数の初期化での使用を意図しています。</target>
        </trans-unit>
        <trans-unit id="a51f1ed56a509883e121438647786188d9af7d2f" translate="yes" xml:space="preserve">
          <source>MustCompile is like Compile but panics if the expression cannot be parsed. It simplifies safe initialization of global variables holding compiled regular expressions.</source>
          <target state="translated">MustCompileはCompileと似ていますが、式が解析できない場合にパニックを起こします。コンパイルされた正規表現を保持するグローバル変数の安全な初期化を簡素化します。</target>
        </trans-unit>
        <trans-unit id="9116a0a3a6e98be619745d64aa7d73bda9c8d13e" translate="yes" xml:space="preserve">
          <source>MustCompilePOSIX is like CompilePOSIX but panics if the expression cannot be parsed. It simplifies safe initialization of global variables holding compiled regular expressions.</source>
          <target state="translated">MustCompilePOSIXはCompilePOSIXと似ていますが、式が解析できない場合にパニックを起こします。コンパイルされた正規表現を保持するグローバル変数の安全な初期化を簡素化します。</target>
        </trans-unit>
        <trans-unit id="3784bc24f8a3c7e8d169e2b4535e09805ebe5ca0" translate="yes" xml:space="preserve">
          <source>MutexProfile returns n, the number of records in the current mutex profile. If len(p) &amp;gt;= n, MutexProfile copies the profile into p and returns n, true. Otherwise, MutexProfile does not change p, and returns n, false.</source>
          <target state="translated">MutexProfileは、現在のミューテックスプロファイル内のレコード数であるnを返します。len（p）&amp;gt; = nの場合、MutexProfileはプロファイルをpにコピーし、n、trueを返します。それ以外の場合、MutexProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="5d847ec5889f3982ffb9b7ffa72ed90e47750577" translate="yes" xml:space="preserve">
          <source>NArg is the number of arguments remaining after flags have been processed.</source>
          <target state="translated">NArgはフラグが処理された後に残っている引数の数です。</target>
        </trans-unit>
        <trans-unit id="2f24c1c2739257b059d4d3dc9321f1cdf1115063" translate="yes" xml:space="preserve">
          <source>NFlag returns the number of command-line flags that have been set.</source>
          <target state="translated">NFlag は、設定されているコマンドラインフラグの数を返します。</target>
        </trans-unit>
        <trans-unit id="810e97bcf54f7c38d780b8018b94bedc96063ac9" translate="yes" xml:space="preserve">
          <source>NFlag returns the number of flags that have been set.</source>
          <target state="translated">NFlag は、設定されているフラグの数を返します。</target>
        </trans-unit>
        <trans-unit id="c725fb1ef92b939b16dd002af225b2de23e38031" translate="yes" xml:space="preserve">
          <source>NRGBA is an in-memory image whose At method returns color.NRGBA values.</source>
          <target state="translated">NRGBAは、Atメソッドがcolor.NRGBAの値を返すインメモリ画像です。</target>
        </trans-unit>
        <trans-unit id="d8bb0d248591faba7b18624bf05d5a4e94d4a0a2" translate="yes" xml:space="preserve">
          <source>NRGBA represents a non-alpha-premultiplied 32-bit color.</source>
          <target state="translated">NRGBAは、非α偏移32ビットカラーを表しています。</target>
        </trans-unit>
        <trans-unit id="5b8e9eaa83b4e60710ae3746671221d4b97e37ff" translate="yes" xml:space="preserve">
          <source>NRGBA64 is an in-memory image whose At method returns color.NRGBA64 values.</source>
          <target state="translated">NRGBA64は、Atメソッドがcolor.NRGBA64の値を返すインメモリ画像です。</target>
        </trans-unit>
        <trans-unit id="0c537b2ac3425dc17a66dbbf5b63bd3a7a48fb29" translate="yes" xml:space="preserve">
          <source>NRGBA64 represents a non-alpha-premultiplied 64-bit color, having 16 bits for each of red, green, blue and alpha.</source>
          <target state="translated">NRGBA64は、赤、緑、青、アルファの各16ビットを持つ非アルファ増倍64ビットの色を表します。</target>
        </trans-unit>
        <trans-unit id="2cacdaed348d8c69a0481b79dcd2e483e182ae7b" translate="yes" xml:space="preserve">
          <source>NType values; used in core files.</source>
          <target state="translated">コアファイルで使用されるNTypeの値。</target>
        </trans-unit>
        <trans-unit id="dfe809819a7c3bc6a6cb826d8f87edea50d7df8a" translate="yes" xml:space="preserve">
          <source>NYCbCrA is an in-memory image of non-alpha-premultiplied Y'CbCr-with-alpha colors. A and AStride are analogous to the Y and YStride fields of the embedded YCbCr.</source>
          <target state="translated">NYCbCrAは、非アルファプレマルチプル化されたY'CbCr-α色のインメモリイメージである。AおよびAStrideは、埋め込まれたYCbCrのYおよびYStrideフィールドに類似している。</target>
        </trans-unit>
        <trans-unit id="381ced7e52d37e0dab6bd72178c010245712478e" translate="yes" xml:space="preserve">
          <source>NYCbCrA represents a non-alpha-premultiplied Y'CbCr-with-alpha color, having 8 bits each for one luma, two chroma and one alpha component.</source>
          <target state="translated">NYCbCrAは、1つのルーマ、2つのクロマ、1つのアルファ成分にそれぞれ8ビットのビットを持つ、アルファプレマルチプルされていないY'CbCr-アルファ付きカラーを表しています。</target>
        </trans-unit>
        <trans-unit id="3ddf7ce6d18dffcfd157667c9d84e86a1c6b7d4e" translate="yes" xml:space="preserve">
          <source>NYCbCrAModel is the Model for non-alpha-premultiplied Y'CbCr-with-alpha colors.</source>
          <target state="translated">NYCbCrAModelは、Y'CbCr-with-alphaカラーの非α増倍モデルです。</target>
        </trans-unit>
        <trans-unit id="57d5b53b7b3ad276283b2d42d51634e430be6df3" translate="yes" xml:space="preserve">
          <source>NaN returns a complex &amp;ldquo;not-a-number&amp;rdquo; value.</source>
          <target state="translated">NaNは、複雑な「非数」値を返します。</target>
        </trans-unit>
        <trans-unit id="01647cea0fd9639449467ddb347270a0682c015d" translate="yes" xml:space="preserve">
          <source>NaN returns an IEEE 754 &amp;ldquo;not-a-number&amp;rdquo; value.</source>
          <target state="translated">NaNは、IEEE 754「not-a-number」の値を返します。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="458abd2d58ca4f6a99a8329ebea64a0b18022e43" translate="yes" xml:space="preserve">
          <source>Name Resolution</source>
          <target state="translated">名前の解決</target>
        </trans-unit>
        <trans-unit id="ea688af26f8e22c900a79fc16d82ceab4193e65a" translate="yes" xml:space="preserve">
          <source>Name constraint validation follows the rules from RFC 5280, with the addition that DNS name constraints may use the leading period format defined for emails and URIs. When a constraint has a leading period it indicates that at least one additional label must be prepended to the constrained name to be considered valid.</source>
          <target state="translated">名前制約の検証は、RFC 5280のルールに従いますが、DNS名前制約は、電子メールおよびURIで定義された先行期間形式を使用することができます。制約にリーディングピリオドがある場合、有効とみなされるためには、少なくとも1つの追加ラベルを制約された名前の前に追加する必要があることを示しています。</target>
        </trans-unit>
        <trans-unit id="99409b3041e22d0d0c5a802c5fd9d08e77da5379" translate="yes" xml:space="preserve">
          <source>Name constraints in the intermediates will be applied to all names claimed in the chain, not just opts.DNSName. Thus it is invalid for a leaf to claim example.com if an intermediate doesn't permit it, even if example.com is not the name being validated. Note that DirectoryName constraints are not supported.</source>
          <target state="translated">中間体の名前制約は、opts.DNSNameだけでなく、チェーン内で主張されたすべての名前に適用されます。したがって、たとえexample.comが検証対象の名前ではなくても、中間体が許可していない場合、リーフがexample.comを主張することは無効です。DirectoryName制約はサポートされていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e4faca25c7d92ae57c0deecd43f083feb7d672a5" translate="yes" xml:space="preserve">
          <source>Name represents an X.509 distinguished name. This only includes the common elements of a DN. Note that Name is only an approximation of the X.509 structure. If an accurate representation is needed, asn1.Unmarshal the raw subject or issuer as an RDNSequence.</source>
          <target state="translated">Name は X.509 の識別名を表します。これには DN の共通要素のみが含まれます。NameはX.509構造の近似値に過ぎないことに注意してください。正確な表現が必要な場合は、 asn1.生のサブジェクトまたは発行者をRDNSequenceとしてアンマーシャル化する。</target>
        </trans-unit>
        <trans-unit id="0fba782366c931b096922fa065c94888533271bf" translate="yes" xml:space="preserve">
          <source>Name represents an X.509 distinguished name. This only includes the common elements of a DN. When parsing, all elements are stored in Names and non-standard elements can be extracted from there. When marshaling, elements in ExtraNames are appended and override other values with the same OID.</source>
          <target state="translated">Name は X.509 の識別名を表します。これにはDNの共通要素のみが含まれます。解析時には、すべての要素がNamesに格納され、そこから非標準要素を抽出することができます。マージャリング時には、ExtraNames の要素が追加され、同じ OID を持つ他の値を上書きします。</target>
        </trans-unit>
        <trans-unit id="e3f01020dd86fefd968bc57f34e6cf3dc39dbcdc" translate="yes" xml:space="preserve">
          <source>Name resolution maps each identifier (ast.Ident) in the program to the language object (Object) it denotes. Use Info.{Defs,Uses,Implicits} for the results of name resolution.</source>
          <target state="translated">名前解決は、プログラム内の各識別子 (ast.Ident)を、それが表す言語オブジェクト (Object)にマッピングします。名前解決の結果は Info.{Defs,Uses,Implicits}を使用してください。</target>
        </trans-unit>
        <trans-unit id="dff2bc150a13aad1afbb3a0e77b91c6f29404d25" translate="yes" xml:space="preserve">
          <source>Name returns the file name of file f as registered with AddFile.</source>
          <target state="translated">Nameは、AddFileで登録したファイルfのファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="dbf0685fdc3e1fc7383fb6378b40c72d45ba31cf" translate="yes" xml:space="preserve">
          <source>Name returns the name of basic type b.</source>
          <target state="translated">Nameは、基本型Bの名前を返します。</target>
        </trans-unit>
        <trans-unit id="8fcb1133e9348f92420cdfc4678a083c2132530b" translate="yes" xml:space="preserve">
          <source>Name returns the name of the file as presented to Open.</source>
          <target state="translated">Name は、Open に提示されたファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="ddf8f3d9e671d5c8526b346806d1b0aee8900f60" translate="yes" xml:space="preserve">
          <source>Name returns the name of the flag set.</source>
          <target state="translated">Name は、フラグセットの名前を返します。</target>
        </trans-unit>
        <trans-unit id="2302d490bb5c27edeb93f2429b3dd3925a94667d" translate="yes" xml:space="preserve">
          <source>Name returns the name of the function.</source>
          <target state="translated">Nameは、関数の名前を返します。</target>
        </trans-unit>
        <trans-unit id="1e85527ce244650d2eef45c942c6fb4c49d00958" translate="yes" xml:space="preserve">
          <source>Name returns the name of the running test or benchmark.</source>
          <target state="translated">Name は、実行中のテストまたはベンチマークの名前を返します。</target>
        </trans-unit>
        <trans-unit id="ae31bd0a4e13087d9881916ed12efd37cc202962" translate="yes" xml:space="preserve">
          <source>Name returns the name of the template.</source>
          <target state="translated">Nameはテンプレートの名前を返します。</target>
        </trans-unit>
        <trans-unit id="9d0afdb2756b72089c5803a1fea5a6f6af89abf2" translate="yes" xml:space="preserve">
          <source>Name returns the name or alias of the column.</source>
          <target state="translated">Name は、カラムの名前またはエイリアスを返します。</target>
        </trans-unit>
        <trans-unit id="6fdae4adddc5e0ab59190994aa36753a8da75cde" translate="yes" xml:space="preserve">
          <source>Name returns the object's (package-local, unqualified) name.</source>
          <target state="translated">Name は、オブジェクトの (パッケージ-ローカルで、修飾されていない)名前を返します。</target>
        </trans-unit>
        <trans-unit id="715e38c6f54ac0414267875866ec7639f2185b6c" translate="yes" xml:space="preserve">
          <source>Name returns the package name.</source>
          <target state="translated">Name はパッケージ名を返します。</target>
        </trans-unit>
        <trans-unit id="f2f1501e711468701351739094e89f2faaa9754b" translate="yes" xml:space="preserve">
          <source>Name returns this profile's name, which can be passed to Lookup to reobtain the profile.</source>
          <target state="translated">Nameは、このプロファイルの名前を返します。この名前は、プロファイルを再取得するためにLookupに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="07ef5638500e255787c53cfed76765c95ef368f8" translate="yes" xml:space="preserve">
          <source>Named character classes as character class elements:</source>
          <target state="translated">文字クラス要素として指定された文字クラス。</target>
        </trans-unit>
        <trans-unit id="5214e3c70b9463e72846eff24f10e0e17205139c" translate="yes" xml:space="preserve">
          <source>Named provides a more concise way to create NamedArg values.</source>
          <target state="translated">Named は、NamedArg の値をより簡潔に作成する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="9f9c1c1ca0e676e9e2072afd4d97cad1c4edafd2" translate="yes" xml:space="preserve">
          <source>NamedValue holds both the value name and value.</source>
          <target state="translated">NamedValueは、値の名前と値の両方を保持します。</target>
        </trans-unit>
        <trans-unit id="c99f38d2678a853989d8a832348bdca952de6c49" translate="yes" xml:space="preserve">
          <source>NamedValueChecker may be optionally implemented by Conn or Stmt. It provides the driver more control to handle Go and database types beyond the default Values types allowed.</source>
          <target state="translated">NamedValueCheckerは、ConnまたはStmtによってオプションで実装することができます。これは、ドライバが許可されているデフォルトの値の型を超えて、囲碁やデータベースの型を扱うためのより多くの制御を提供します。</target>
        </trans-unit>
        <trans-unit id="4abb0014fb99c3ea27630821804136f4a291ddd2" translate="yes" xml:space="preserve">
          <source>Names returns the scope's element names in sorted order.</source>
          <target state="translated">Names は、スコープの要素名を並べ替えて返します。</target>
        </trans-unit>
        <trans-unit id="3bc9b96acdd25f0e29a5d98a8eb3024f16d84408" translate="yes" xml:space="preserve">
          <source>Namespaced and data- attributes</source>
          <target state="translated">名前空間とデータ属性</target>
        </trans-unit>
        <trans-unit id="68be7148b1d69811d870e9714f9a627c5b3b1099" translate="yes" xml:space="preserve">
          <source>Naming a file dns_windows.go will cause it to be included only when building the package for Windows; similarly, math_386.s will be included only when building the package for 32-bit x86.</source>
          <target state="translated">同様に、math_386.s は 32 ビット x86 用のパッケージをビルドする場合にのみインクルードされます。</target>
        </trans-unit>
        <trans-unit id="cabaa7d294786796f928e96fc93a4f221988121e" translate="yes" xml:space="preserve">
          <source>Nano returns ts as the number of nanoseconds elapsed since the Unix epoch.</source>
          <target state="translated">Nanoは、Unixのエポックからの経過時間をナノ秒としてtsを返します。</target>
        </trans-unit>
        <trans-unit id="7cc13f72d19e3af8ee9e16f480775aaded9f3087" translate="yes" xml:space="preserve">
          <source>Nano returns tv as the number of nanoseconds elapsed since the Unix epoch.</source>
          <target state="translated">Nano は、Unix のエポックからの経過したナノ秒数として tv を返します。</target>
        </trans-unit>
        <trans-unit id="0e6c24671bd350d239a637f4eb004b1ac035f0f6" translate="yes" xml:space="preserve">
          <source>Nanosecond returns the nanosecond offset within the second specified by t, in the range [0, 999999999].</source>
          <target state="translated">Nanosecondは、tで指定した秒内のナノ秒オフセットを[0,999999999]の範囲で返します。</target>
        </trans-unit>
        <trans-unit id="9254412c6c417a32ffd67afde8a4d3f64458a58f" translate="yes" xml:space="preserve">
          <source>Nanoseconds returns the duration as an integer nanosecond count.</source>
          <target state="translated">Nanoseconds は、持続時間を整数のナノ秒数で返します。</target>
        </trans-unit>
        <trans-unit id="ba032ae40abdc5925e0860a082adf4aba20cf4c6" translate="yes" xml:space="preserve">
          <source>Neg sets z to -x and returns z.</source>
          <target state="translated">Neg は z を -x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="381b641c01f8a09410b41524ec6b9c342099d866" translate="yes" xml:space="preserve">
          <source>Neg sets z to the (possibly rounded) value of x with its sign negated, and returns z.</source>
          <target state="translated">Negは、符号を否定してzを(丸められた可能性のある)xの値に設定し、zを返します。</target>
        </trans-unit>
        <trans-unit id="8646ff662d17d59189bbe1c09e1b45ec2fcbe881" translate="yes" xml:space="preserve">
          <source>Nested template definitions</source>
          <target state="translated">入れ子になったテンプレートの定義</target>
        </trans-unit>
        <trans-unit id="d8c5cfb403999ea3c1717d789cd51587c786bc53" translate="yes" xml:space="preserve">
          <source>NetlinkMessage represents a netlink message.</source>
          <target state="translated">NetlinkMessage は、ネットリンクメッセージを表します。</target>
        </trans-unit>
        <trans-unit id="9c4870d25f2151dc7bae14a92d6848398da82d87" translate="yes" xml:space="preserve">
          <source>NetlinkRIB returns routing information base, as known as RIB, which consists of network facility information, states and parameters.</source>
          <target state="translated">NetlinkRIB は、ネットワークファシリティ情報、状態、パラメータから構成される RIB として知られるルーティング情報ベースを返します。</target>
        </trans-unit>
        <trans-unit id="602233e97016bb5f79aa0bd9f5a926d8f7889c93" translate="yes" xml:space="preserve">
          <source>NetlinkRouteAttr represents a netlink route attribute.</source>
          <target state="translated">NetlinkRouteAttr は、ネットリンクルート属性を表す。</target>
        </trans-unit>
        <trans-unit id="44279944636fb5149ee9e75b524255aa96e79a4e" translate="yes" xml:space="preserve">
          <source>NetlinkRouteRequest represents a request message to receive routing and link states from the kernel.</source>
          <target state="translated">NetlinkRouteRequest は、カーネルからルーティングとリンクの状態を受け取るためのリクエストメッセージを表します。</target>
        </trans-unit>
        <trans-unit id="884a4650baee52e272bb3c5efceff09f71b0dc8c" translate="yes" xml:space="preserve">
          <source>Network returns the address's network name, &quot;ip&quot;.</source>
          <target state="translated">Network は、アドレスのネットワーク名 &quot;ip&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="872aebe8ec9741bc61a3685b3731dbde3529008c" translate="yes" xml:space="preserve">
          <source>Network returns the address's network name, &quot;ip+net&quot;.</source>
          <target state="translated">Networkはアドレスのネットワーク名 &quot;ip+net &quot;を返します。</target>
        </trans-unit>
        <trans-unit id="fa465c71127a452dc67c99401e7bc2d64148685d" translate="yes" xml:space="preserve">
          <source>Network returns the address's network name, &quot;tcp&quot;.</source>
          <target state="translated">Networkはアドレスのネットワーク名 &quot;tcp &quot;を返します。</target>
        </trans-unit>
        <trans-unit id="985257f66305f39d2139512f1ac004ba3741bdd6" translate="yes" xml:space="preserve">
          <source>Network returns the address's network name, &quot;udp&quot;.</source>
          <target state="translated">Network は、アドレスのネットワーク名 &quot;udp&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="85eeab19d1e5738f817203c5a4d550375f022dc2" translate="yes" xml:space="preserve">
          <source>Network returns the address's network name, &quot;unix&quot;, &quot;unixgram&quot; or &quot;unixpacket&quot;.</source>
          <target state="translated">Networkは、アドレスのネットワーク名である &quot;unix&quot;、&quot;unixgram&quot;、または &quot;unixpacket &quot;を返します。</target>
        </trans-unit>
        <trans-unit id="6403f2b7eb2aaafe6de34cbf2a029b01afebc512" translate="yes" xml:space="preserve">
          <source>New</source>
          <target state="translated">New</target>
        </trans-unit>
        <trans-unit id="73e705a3151bc08fd1addfd7992ec83ec85bc2d3" translate="yes" xml:space="preserve">
          <source>New (Errorf)</source>
          <target state="translated">新規(エラーフ</target>
        </trans-unit>
        <trans-unit id="ce9f1f28f9b789d29a4ccd4ff058458cc3933476" translate="yes" xml:space="preserve">
          <source>New (File)</source>
          <target state="translated">新規(ファイル)</target>
        </trans-unit>
        <trans-unit id="13a673772e81bed6fd77076f80c7ff1f6ee89e61" translate="yes" xml:space="preserve">
          <source>New allocates a new HTML template associated with the given one and with the same delimiters. The association, which is transitive, allows one template to invoke another with a {{template}} action.</source>
          <target state="translated">New は、与えられたテンプレートに関連付けられた新しい HTML テンプレートを、同じ区切り文字で割り当てます。この関連付けは遷移的なもので、あるテンプレートが{{template}}アクションで別のテンプレートを呼び出すことを可能にします。</target>
        </trans-unit>
        <trans-unit id="1c98d75d213247ac29168d2da24b2789a4dbb7a8" translate="yes" xml:space="preserve">
          <source>New allocates a new HTML template with the given name.</source>
          <target state="translated">Newは、与えられた名前の新しいHTMLテンプレートを割り当てます。</target>
        </trans-unit>
        <trans-unit id="34bc55c1fb0c505ee8f76b87c91bd2fc06fc027b" translate="yes" xml:space="preserve">
          <source>New allocates a new parse tree with the given name.</source>
          <target state="translated">New は、指定された名前の新しい構文木を割り当てます。</target>
        </trans-unit>
        <trans-unit id="685d42b22fd5f12d0d18a35ac55a1b6c69615a8a" translate="yes" xml:space="preserve">
          <source>New allocates a new, undefined template associated with the given one and with the same delimiters. The association, which is transitive, allows one template to invoke another with a {{template}} action.</source>
          <target state="translated">この機能を使用することで、この機能を使用している間は、この機能を使用していない場合でも、この機能を使用することができます。この関連付けは遷移的で、あるテンプレートが{{template}}アクションで別のテンプレートを呼び出すことを可能にします。</target>
        </trans-unit>
        <trans-unit id="1bfbe44c21200e9acb8918513405e990a5ad64ec" translate="yes" xml:space="preserve">
          <source>New allocates a new, undefined template with the given name.</source>
          <target state="translated">New は、指定された名前の新しい未定義のテンプレートを割り当てます。</target>
        </trans-unit>
        <trans-unit id="d58e7e7be4ff87f86b4026a755b5a08e8395893d" translate="yes" xml:space="preserve">
          <source>New changes in the system cert pool might not be reflected in subsequent calls.</source>
          <target state="translated">システムの証明書プールの新しい変更は、その後の呼び出しに反映されない場合があります。</target>
        </trans-unit>
        <trans-unit id="e8732c118b0cc7bc660fa4e5273983e4bed17a5c" translate="yes" xml:space="preserve">
          <source>New computes the package documentation for the given package AST. New takes ownership of the AST pkg and may edit or overwrite it.</source>
          <target state="translated">Newは、与えられたパッケージASTのドキュメントを計算します。NewはAST pkgの所有権を持ち、それを編集したり上書きしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="bc0e34f3cf5ad3fd313178553550b414b18c18ba" translate="yes" xml:space="preserve">
          <source>New computes the package documentation for the given package AST. New takes ownership of the AST pkg and may edit or overwrite it. To have the Examples fields populated, use NewFromFiles and include the package's _test.go files.</source>
          <target state="translated">Newは、与えられたパッケージASTのドキュメントを計算します。NewはAST pkgの所有権を持ち、それを編集したり上書きしたりすることができます。ExamplesフィールドにはNewFromFilesを使用し、パッケージの_test.goファイルをインクルードします。</target>
        </trans-unit>
        <trans-unit id="42a02872376b9cd15170d6472cf48d2f256d4269" translate="yes" xml:space="preserve">
          <source>New creates a new Index for data. Index creation time is O(N) for N = len(data).</source>
          <target state="translated">Newはデータに対して新しいインデックスを作成します。インデックスの作成時間は、N=len(data)に対してO(N)です。</target>
        </trans-unit>
        <trans-unit id="848e8a805c0a023e8c5b587ab5386886eded5422" translate="yes" xml:space="preserve">
          <source>New creates a new Logger. The out variable sets the destination to which log data will be written. The prefix appears at the beginning of each generated log line, or after the log header if the Lmsgprefix flag is provided. The flag argument defines the logging properties.</source>
          <target state="translated">New は新しいロガーを作成します。out変数は、ログデータを書き込む先を設定します。接頭辞は、生成された各ログ行の先頭、または Lmsgprefix フラグが提供されている場合はログヘッダの後に表示されます。flag 引数は、ロギング プロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="1938bcca0d3c4801a22481ce59e7278f4b6da953" translate="yes" xml:space="preserve">
          <source>New creates a new Logger. The out variable sets the destination to which log data will be written. The prefix appears at the beginning of each generated log line. The flag argument defines the logging properties.</source>
          <target state="translated">New は新しいロガーを作成します。out変数は、ログデータを書き込む先を設定します。この接頭辞は、生成された各ログ行の先頭に表示されます。flag 引数は、ロギングのプロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="9a296c49d13ddf053bb1930fb55493ded12e0b12" translate="yes" xml:space="preserve">
          <source>New creates a new hash.Hash32 computing the CRC-32 checksum using the polynomial represented by the Table. Its Sum method will lay the value out in big-endian byte order. The returned Hash32 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">Newは、Tableで表される多項式を使用してCRC-32チェックサムを計算する新しいHash.Hash32を作成します。Sum メソッドは、ビッグエンディアンのバイト順に値を並べます。返されたHash32は、ハッシュの内部状態をマーシャリングしたりアンマーシャリングしたりするために、encoding.BinaryMarshalerとencoding.BinaryUnmarshalerも実装しています。</target>
        </trans-unit>
        <trans-unit id="f96eb28144daf2fb90bf412860be6e76ca52cf10" translate="yes" xml:space="preserve">
          <source>New creates a new hash.Hash64 computing the CRC-64 checksum using the polynomial represented by the Table. Its Sum method will lay the value out in big-endian byte order. The returned Hash64 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">Newは、Tableで表される多項式を使用してCRC-64チェックサムを計算する新しいハッシュを作成します。Sum メソッドは、ビッグエンディアンのバイト順に値を並べます。返されたHash64は、ハッシュの内部状態をマーシャリングしたりアンマーシャリングしたりするために、encoding.BinaryMarshalerとencoding.BinaryUnmarshalerも実装しています。</target>
        </trans-unit>
        <trans-unit id="44ec7b7b536da273869e89c5cb90df2959fd9688" translate="yes" xml:space="preserve">
          <source>New creates a ring of n elements.</source>
          <target state="translated">Newはn個の要素のリングを作成します。</target>
        </trans-unit>
        <trans-unit id="e7fd8b4c480fbc496999332eaae2de8518c1f830" translate="yes" xml:space="preserve">
          <source>New establishes a new connection to the system log daemon. Each write to the returned writer sends a log message with the given priority (a combination of the syslog facility and severity) and prefix tag. If tag is empty, the os.Args[0] is used.</source>
          <target state="translated">New は、システムログデーモンへの新しい接続を確立します。返されたライターへの各書き込みは、与えられた優先度(syslog 機能と深刻度の組み合わせ)とプレフィックスタグを持つログメッセージを送信します。tag が空の場合は os.Args[0]が使用されます。</target>
        </trans-unit>
        <trans-unit id="2c433bff47e0e23c62ed805b07cbec0f2f0b6f46" translate="yes" xml:space="preserve">
          <source>New returns a Value representing a pointer to a new zero value for the specified type. That is, the returned Value's Type is PtrTo(typ).</source>
          <target state="translated">New は、指定された型の新しいゼロ値へのポインタを表す Value を返します。つまり、返されるValueのTypeはPtrTo(typ)です。</target>
        </trans-unit>
        <trans-unit id="0c3bbfe7ec852d2a1508f7c286818c11369b8298" translate="yes" xml:space="preserve">
          <source>New returns a new Data object initialized from the given parameters. Rather than calling this function directly, clients should typically use the DWARF method of the File type of the appropriate package debug/elf, debug/macho, or debug/pe.</source>
          <target state="translated">New は、与えられたパラメータから初期化された新しい Data オブジェクトを返します。この関数を直接呼び出すのではなく、クライアントは通常、適切なパッケージ debug/elf、debug/macho、debug/pe の File 型の DWARF メソッドを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="34063232a48f53eca99c828d036ef36cf5de37bb" translate="yes" xml:space="preserve">
          <source>New returns a new HMAC hash using the given hash.Hash type and key. Note that unlike other hash implementations in the standard library, the returned Hash does not implement encoding.BinaryMarshaler or encoding.BinaryUnmarshaler.</source>
          <target state="translated">Newは、与えられたhash.Hash型とキーを用いて新しいHMACハッシュを返します。標準ライブラリの他のハッシュ実装とは異なり、返される Hash は encoding.BinaryMarshaler や encoding.BinaryUnmarshaler を実装していないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="dae1d45948f3340a826a534080ea715da59576dc" translate="yes" xml:space="preserve">
          <source>New returns a new Rand that uses random values from src to generate other random values.</source>
          <target state="translated">New は,src からのランダムな値を用いて他のランダムな値を生成する新しいランドを返します.</target>
        </trans-unit>
        <trans-unit id="99c2c428e0dc030c03d2e8b41267ed3ddbe36dfb" translate="yes" xml:space="preserve">
          <source>New returns a new cookie jar. A nil *Options is equivalent to a zero Options.</source>
          <target state="translated">New は新しいクッキー・ジャーを返します。nil *Optionsは0のOptionsと同じです。</target>
        </trans-unit>
        <trans-unit id="1f821272946e1801b5f1d4a05a86314806248536" translate="yes" xml:space="preserve">
          <source>New returns a new hash.Hash calculating the given hash function. New panics if the hash function is not linked into the binary.</source>
          <target state="translated">Newは、与えられたハッシュ関数を計算した新しいhash.Hashを返します。ハッシュ関数がバイナリにリンクされていない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="1098b04617924fcea48eac93732552bb3d10a9b9" translate="yes" xml:space="preserve">
          <source>New returns a new hash.Hash computing the MD5 checksum. The Hash also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">New は MD5 チェックサムを計算する新しい hash.Hash を返します。また、ハッシュの内部状態をマーシャリングしたりアンマーシャリングしたりするために encoding.BinaryMarshaler と encoding.BinaryUnmarshaler を実装しています。</target>
        </trans-unit>
        <trans-unit id="f0a16128a32aa274883c639054d37ccdc6937e39" translate="yes" xml:space="preserve">
          <source>New returns a new hash.Hash computing the SHA-512 checksum.</source>
          <target state="translated">Newは、SHA-512チェックサムを計算する新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="cf1f289ea19766f37df0d90899ff5c24c8ae2c4a" translate="yes" xml:space="preserve">
          <source>New returns a new hash.Hash computing the SHA1 checksum. The Hash also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">New は SHA1 チェックサムを計算する新しい hash.Hash を返します。また、ハッシュの内部状態をマーシャリングしたりアンマーシャリングしたりするために encoding.BinaryMarshaler と encoding.BinaryUnmarshaler を実装しています。</target>
        </trans-unit>
        <trans-unit id="4fd916c9b4b6d94508616e145a5d3f06d397cd5d" translate="yes" xml:space="preserve">
          <source>New returns a new hash.Hash computing the SHA256 checksum. The Hash also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">New は SHA256 チェックサムを計算する新しい hash.Hash を返します。また、ハッシュの内部状態をマーシャリング、アンマーシャリングするために encoding.BinaryMarshaler と encoding.BinaryUnmarshaler を実装しています。</target>
        </trans-unit>
        <trans-unit id="f8209c7edf904061031f392b03dfd5924df101b5" translate="yes" xml:space="preserve">
          <source>New returns a new hash.Hash32 computing the Adler-32 checksum. Its Sum method will lay the value out in big-endian byte order. The returned Hash32 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">Newは、Adler-32チェックサムを計算する新しいHash.Hash32を返します。Sumメソッドはビッグエンディアンバイト順に値を並べます。返されるHash32は、ハッシュの内部状態をマーシャリングしたりアンマーシャリングしたりするために、encoding.BinaryMarshalerとencoding.BinaryUnmarshalerも実装しています。</target>
        </trans-unit>
        <trans-unit id="e84f60f6e65d95fd4ece96b0004a9de85df6b343" translate="yes" xml:space="preserve">
          <source>New returns an error that formats as the given text. Each call to New returns a distinct error value even if the text is identical.</source>
          <target state="translated">New は、与えられたテキストとしてフォーマットされたエラーを返します。New を呼び出すたびに、たとえテキストが同一であっても異なるエラー値を返します。</target>
        </trans-unit>
        <trans-unit id="2d8951b361a0209c54ff9386028d34a39773602f" translate="yes" xml:space="preserve">
          <source>New returns an initialized list.</source>
          <target state="translated">New は初期化されたリストを返します。</target>
        </trans-unit>
        <trans-unit id="5801fe069c8fe2aaa55fda0624f44928b4775b87" translate="yes" xml:space="preserve">
          <source>New uses JavaScript's &quot;new&quot; operator with value v as constructor and the given arguments. It panics if v is not a JavaScript function. The arguments get mapped to JavaScript values according to the ValueOf function.</source>
          <target state="translated">Newは、コンストラクタとして値vを指定し、与えられた引数でJavaScriptの &quot;new &quot;演算子を使用します。v が JavaScript の関数でない場合はパニックになります。引数は ValueOf 関数に従って JavaScript の値にマップされます。</target>
        </trans-unit>
        <trans-unit id="de47e55b8079b059389f17b105e9ffd1afb3a3e3" translate="yes" xml:space="preserve">
          <source>New128 returns a new 128-bit FNV-1 hash.Hash. Its Sum method will lay the value out in big-endian byte order.</source>
          <target state="translated">New128 は、新しい 128 ビットの FNV-1 hash.Hash を返します。Sumメソッドは、ビッグエンディアンのバイト順に値を並べます。</target>
        </trans-unit>
        <trans-unit id="a8005a100f6b39010fda63d549052f17d08741bd" translate="yes" xml:space="preserve">
          <source>New128a returns a new 128-bit FNV-1a hash.Hash. Its Sum method will lay the value out in big-endian byte order.</source>
          <target state="translated">New128a は、新しい 128 ビットの FNV-1a hash.Hash を返します。Sumメソッドは、ビッグエンディアンのバイト順に値を並べます。</target>
        </trans-unit>
        <trans-unit id="0ce753ca8c15a0a1b2e753ae81ad1104c1644498" translate="yes" xml:space="preserve">
          <source>New224 returns a new hash.Hash computing the SHA224 checksum.</source>
          <target state="translated">New224は、SHA224チェックサムを計算する新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="ccc0f5023730b0e5ae85216a310b3047f4aa8ea2" translate="yes" xml:space="preserve">
          <source>New32 returns a new 32-bit FNV-1 hash.Hash. Its Sum method will lay the value out in big-endian byte order.</source>
          <target state="translated">New32 は、新しい 32 ビットの FNV-1 hash.Hash を返します。Sumメソッドは、ビッグエンディアンのバイト順に値を並べます。</target>
        </trans-unit>
        <trans-unit id="d56753001efd2485e723a8e5a73fff58d273b67c" translate="yes" xml:space="preserve">
          <source>New32a returns a new 32-bit FNV-1a hash.Hash. Its Sum method will lay the value out in big-endian byte order.</source>
          <target state="translated">New32a は、新しい 32 ビットの FNV-1a hash.Hash を返します。Sumメソッドは、ビッグエンディアンのバイト順に値を並べます。</target>
        </trans-unit>
        <trans-unit id="7d5d99bcf25b2336b4de3cdadf8a35eaf7a0c199" translate="yes" xml:space="preserve">
          <source>New384 returns a new hash.Hash computing the SHA-384 checksum.</source>
          <target state="translated">New384 は、SHA-384 のチェックサムを計算する新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="4b7f283752df73a2e87a9802891e3f0dd0c8d4d7" translate="yes" xml:space="preserve">
          <source>New512_224 returns a new hash.Hash computing the SHA-512/224 checksum.</source>
          <target state="translated">New512_224は、SHA-512/224チェックサムを計算する新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="825abc60343f43e649b2364900655dff3568736f" translate="yes" xml:space="preserve">
          <source>New512_256 returns a new hash.Hash computing the SHA-512/256 checksum.</source>
          <target state="translated">New512_256は、SHA-512/256チェックサムを計算する新しいハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="d87077707d6ea0d456a51c30f664d7873c8bd355" translate="yes" xml:space="preserve">
          <source>New64 returns a new 64-bit FNV-1 hash.Hash. Its Sum method will lay the value out in big-endian byte order.</source>
          <target state="translated">New64 は、新しい 64 ビットの FNV-1 hash.Hash を返します。Sumメソッドは、ビッグエンディアンのバイト順に値を並べます。</target>
        </trans-unit>
        <trans-unit id="46dd6ddaccb45d3f0be1865973ec33eaa9f63cd3" translate="yes" xml:space="preserve">
          <source>New64a returns a new 64-bit FNV-1a hash.Hash. Its Sum method will lay the value out in big-endian byte order.</source>
          <target state="translated">New64a は、新しい 64 ビットの FNV-1a hash.Hash を返します。Sumメソッドは、ビッグエンディアンのバイト順に値を並べます。</target>
        </trans-unit>
        <trans-unit id="7b22f1177470c7c4e87fe25b4cd79c1fd84c6501" translate="yes" xml:space="preserve">
          <source>NewAlpha returns a new Alpha image with the given bounds.</source>
          <target state="translated">NewAlphaは、指定された境界線を持つ新しいアルファ画像を返します。</target>
        </trans-unit>
        <trans-unit id="add0bb0be61493133a58e39dd7700e6c9889401b" translate="yes" xml:space="preserve">
          <source>NewAlpha16 returns a new Alpha16 image with the given bounds.</source>
          <target state="translated">NewAlpha16は,指定された境界を持つ新しいAlpha16画像を返します.</target>
        </trans-unit>
        <trans-unit id="4c61d8963b5a530bd472131f346eba16878a4408" translate="yes" xml:space="preserve">
          <source>NewArray returns a new array type for the given element type and length. A negative length indicates an unknown length.</source>
          <target state="translated">NewArrayは、与えられた要素の型と長さに対して新しい配列の型を返します。負の長さは未知の長さを示します。</target>
        </trans-unit>
        <trans-unit id="638c31aba3c5c6f8398df36fb530211241e94c4c" translate="yes" xml:space="preserve">
          <source>NewAt returns a Value representing a pointer to a value of the specified type, using p as that pointer.</source>
          <target state="translated">NewAt は、指定された型の値へのポインタを表す値を返します。</target>
        </trans-unit>
        <trans-unit id="72dec367b963904f8628c7bf12ee4335879a75b8" translate="yes" xml:space="preserve">
          <source>NewBuffer creates and initializes a new Buffer using buf as its initial contents. The new Buffer takes ownership of buf, and the caller should not use buf after this call. NewBuffer is intended to prepare a Buffer to read existing data. It can also be used to set the initial size of the internal buffer for writing. To do that, buf should have the desired capacity but a length of zero.</source>
          <target state="translated">NewBufferは、bufを初期コンテンツとして使用して新しいBufferを作成し、初期化します。新しいBufferはbufの所有権を引き継ぎ、呼び出し元はこの呼び出しの後にbufを使用してはいけません。NewBufferは、既存のデータを読み込むためのBufferを準備することを目的としています。また、書き込み用の内部バッファの初期サイズを設定するためにも使用できます。そのためには、bufは所望の容量を持っていなければなりませんが、長さはゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ed5f25f81fed45774081165b1641415b15da1746" translate="yes" xml:space="preserve">
          <source>NewBufferString creates and initializes a new Buffer using string s as its initial contents. It is intended to prepare a buffer to read an existing string.</source>
          <target state="translated">NewBufferStringは、文字列sを初期内容とした新しいBufferを作成し、初期化します。これは、既存の文字列を読み込むためのバッファを準備することを目的としています。</target>
        </trans-unit>
        <trans-unit id="22844417cd1bd7e56381df290ad9aba37327ed60" translate="yes" xml:space="preserve">
          <source>NewCBCDecrypter</source>
          <target state="translated">NewCBCDecrypter</target>
        </trans-unit>
        <trans-unit id="ca52eb6c91f944ba65ea2ffb0b84fcc2a10abe90" translate="yes" xml:space="preserve">
          <source>NewCBCDecrypter returns a BlockMode which decrypts in cipher block chaining mode, using the given Block. The length of iv must be the same as the Block's block size and must match the iv used to encrypt the data.</source>
          <target state="translated">NewCBCDecrypter は、与えられたブロックを用いて暗号ブロックチェーニングモードで復号する BlockMode を返します。iv の長さは、ブロックのブロックサイズと同じでなければならず、データの暗号化に使用された iv と一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="255e7115ae5f4d3fbd66659d8c19d19341701776" translate="yes" xml:space="preserve">
          <source>NewCBCEncrypter</source>
          <target state="translated">NewCBCEncrypter</target>
        </trans-unit>
        <trans-unit id="fa88ee5beeb923f46e28b0b6307e4efcac6244ff" translate="yes" xml:space="preserve">
          <source>NewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining mode, using the given Block. The length of iv must be the same as the Block's block size.</source>
          <target state="translated">NewCBCBCEncrypter は、与えられた Block を用いて暗号ブロックチェーニングモードで暗号化する BlockMode を返します。iv の長さは、ブロックのブロックサイズと同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="38ff31a554e5558a01b8168178cf0796b7209a44" translate="yes" xml:space="preserve">
          <source>NewCFBDecrypter</source>
          <target state="translated">NewCFBDecrypter</target>
        </trans-unit>
        <trans-unit id="2d168991a51faf9df3fede3ceed6622acdae5d65" translate="yes" xml:space="preserve">
          <source>NewCFBDecrypter returns a Stream which decrypts with cipher feedback mode, using the given Block. The iv must be the same length as the Block's block size.</source>
          <target state="translated">NewCFBDecrypterは、与えられたブロックを用いて暗号フィードバックモードで復号するStreamを返します。iv はブロックのブロックサイズと同じ長さでなければなりません。</target>
        </trans-unit>
        <trans-unit id="08b4648ba8de6f7a55002e90d7740de77aaee124" translate="yes" xml:space="preserve">
          <source>NewCFBEncrypter</source>
          <target state="translated">NewCFBEncrypter</target>
        </trans-unit>
        <trans-unit id="46ae2754dd56eaa723f258dcc13d30b6a837033a" translate="yes" xml:space="preserve">
          <source>NewCFBEncrypter returns a Stream which encrypts with cipher feedback mode, using the given Block. The iv must be the same length as the Block's block size.</source>
          <target state="translated">NewCFBEncrypterは、与えられたブロックを用いて、暗号化フィードバックモードで暗号化するStreamを返します。iv はブロックのブロックサイズと同じ長さでなければなりません。</target>
        </trans-unit>
        <trans-unit id="253cccaa3711561810055bfc51a9b95d2ac7b353" translate="yes" xml:space="preserve">
          <source>NewCMYK returns a new CMYK image with the given bounds.</source>
          <target state="translated">NewCMYKは、指定された境界線を持つ新しいCMYK画像を返します。</target>
        </trans-unit>
        <trans-unit id="f23a2508c9195bfe11e43b2f877a2121ff4896e8" translate="yes" xml:space="preserve">
          <source>NewCTR</source>
          <target state="translated">NewCTR</target>
        </trans-unit>
        <trans-unit id="48cf25f578fd7e4d9bde53a1056264acc0f6565d" translate="yes" xml:space="preserve">
          <source>NewCTR returns a Stream which encrypts/decrypts using the given Block in counter mode. The length of iv must be the same as the Block's block size.</source>
          <target state="translated">NewCTR は、 与えられたブ ロ ッ ク を用いて暗号化 ・ 復号化を行 う ス ト リ ーム を、 カ ウ ン タ ーモー ド で返 し ます。iv の長さは、ブロックのブロックサイズと同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="78b43a9ea76afd66f0e904c5af7000251dc2615e" translate="yes" xml:space="preserve">
          <source>NewCertPool returns a new, empty CertPool.</source>
          <target state="translated">NewCertPool は、新しい空の CertPool を返します。</target>
        </trans-unit>
        <trans-unit id="24df68fca6c4873d326ba2cccc1b01b5610f3e8e" translate="yes" xml:space="preserve">
          <source>NewChan returns a new channel type for the given direction and element type.</source>
          <target state="translated">NewChanは、指定された方向と要素タイプに対して新しいチャンネルタイプを返します。</target>
        </trans-unit>
        <trans-unit id="62fa4bf0653f8c5396d1118a3de960d9396357d1" translate="yes" xml:space="preserve">
          <source>NewChecker returns a new Checker instance for a given package. Package files may be added incrementally via checker.Files.</source>
          <target state="translated">NewChecker は、指定したパッケージの新しい Checker インスタンスを返します。パッケージファイルは、checker.Files.</target>
        </trans-unit>
        <trans-unit id="2380ca2f8a09151f6aa44494bd0336745a8e73ba" translate="yes" xml:space="preserve">
          <source>NewChunkedReader is not needed by normal applications. The http package automatically decodes chunking when reading response bodies.</source>
          <target state="translated">NewChunkedReader は通常のアプリケーションでは必要ありません。http パッケージはレスポンスボディを読み込む際に自動的にチャンキングをデコードします。</target>
        </trans-unit>
        <trans-unit id="f0cf338b02e3e48fa365cda270fb9dee555b3d17" translate="yes" xml:space="preserve">
          <source>NewChunkedReader returns a new chunkedReader that translates the data read from r out of HTTP &quot;chunked&quot; format before returning it. The chunkedReader returns io.EOF when the final 0-length chunk is read.</source>
          <target state="translated">NewChunkedReader は、r から読み込んだデータを HTTP の &quot;chunked&quot; 形式から変換してから返す新しい chunkedReader を返します。chunkedReaderは、最後の0長のチャンクが読み込まれるとio.EOFを返します。</target>
        </trans-unit>
        <trans-unit id="349a471f1f7196f4cd28f8d83c309c02f591534f" translate="yes" xml:space="preserve">
          <source>NewChunkedWriter is not needed by normal applications. The http package adds chunking automatically if handlers don't set a Content-Length header. Using NewChunkedWriter inside a handler would result in double chunking or chunking with a Content-Length length, both of which are wrong.</source>
          <target state="translated">NewChunkedWriter は通常のアプリケーションでは必要ありません。ハンドラが Content-Length ヘッダを設定していない場合、 http パッケージは自動的にチャンキングを追加します。ハンドラの中で NewChunkedWriter を使うと、ダブルチャンキングや Content-Length の長さでチャンキングすることになりますが、どちらも間違っています。</target>
        </trans-unit>
        <trans-unit id="b746b9ef76b22845d6f63dc9d95e97e36a08dd5c" translate="yes" xml:space="preserve">
          <source>NewChunkedWriter is not needed by normal applications. The http package adds chunking automatically if handlers don't set a Content-Length header. Using newChunkedWriter inside a handler would result in double chunking or chunking with a Content-Length length, both of which are wrong.</source>
          <target state="translated">NewChunkedWriter は通常のアプリケーションでは必要ありません。ハンドラが Content-Length ヘッダを設定していない場合、 http パッケージは自動的にチャンキングを追加します。ハンドラの中で newChunkedWriter を使うと、ダブルチャンキングや Content-Length の長さでチャンキングすることになりますが、どちらも間違っています。</target>
        </trans-unit>
        <trans-unit id="bbde3c49be540aed6f3b9a07213ce9f0f0985a47" translate="yes" xml:space="preserve">
          <source>NewChunkedWriter returns a new chunkedWriter that translates writes into HTTP &quot;chunked&quot; format before writing them to w. Closing the returned chunkedWriter sends the final 0-length chunk that marks the end of the stream but does not send the final CRLF that appears after trailers; trailers and the last CRLF must be written separately.</source>
          <target state="translated">NewChunkedWriter は、書き込みを w に書き込む前に HTTP の &quot;chunked&quot; 形式に変換する新しい chunkedWriter を返します。返された chunkedWriter を閉じると、ストリームの終わりを示す最後の 0 長のチャンクが送信されますが、トレーラの後に表示される最後の CRLF は送信されません。</target>
        </trans-unit>
        <trans-unit id="0f92d63907abdded9ec398f437e0cf965d51343f" translate="yes" xml:space="preserve">
          <source>NewCipher creates and returns a new Cipher. The key argument should be the RC4 key, at least 1 byte and at most 256 bytes.</source>
          <target state="translated">NewCipher は新しい Cipher を作成して返します。key 引数には RC4 キー、最低 1 バイト、最大 256 バイトを指定します。</target>
        </trans-unit>
        <trans-unit id="8328cb0f867c2e756f382b0ca63e4950d8850883" translate="yes" xml:space="preserve">
          <source>NewCipher creates and returns a new cipher.Block.</source>
          <target state="translated">NewCipher は新しい cipher.Block を作成して返します。</target>
        </trans-unit>
        <trans-unit id="6b22b2787fd6b2ed8659da500429f9fa3fe86072" translate="yes" xml:space="preserve">
          <source>NewCipher creates and returns a new cipher.Block. The key argument should be the AES key, either 16, 24, or 32 bytes to select AES-128, AES-192, or AES-256.</source>
          <target state="translated">NewCipher は新しい cipher.Block を作成して返します。key 引数には AES 鍵を指定し、16、24、32 バイトのいずれかで AES-128、AES-192、AES-256 を選択します。</target>
        </trans-unit>
        <trans-unit id="b860dfa2340445fd2cf308e5a3748fea60faee9b" translate="yes" xml:space="preserve">
          <source>NewClient returns a new Client to handle requests to the set of services at the other end of the connection. It adds a buffer to the write side of the connection so the header and payload are sent as a unit.</source>
          <target state="translated">NewClient は、接続のもう一方の端にある一連のサービスへのリクエストを処理するための新しいクライアントを返します。接続の書き込み側にバッファを追加し、ヘッダとペイロードを単位として送信します。</target>
        </trans-unit>
        <trans-unit id="b078c0d5ff1e636af20c5c0ed8dd22f85b7f4282" translate="yes" xml:space="preserve">
          <source>NewClient returns a new Client using an existing connection and host as a server name to be used when authenticating.</source>
          <target state="translated">NewClient は、認証時に使用するサーバ名として既存の接続とホストを使用した新しいクライアントを返します。</target>
        </trans-unit>
        <trans-unit id="f8fb1181ae8a229864a05cfebb15c90112fff65c" translate="yes" xml:space="preserve">
          <source>NewClient returns a new rpc.Client to handle requests to the set of services at the other end of the connection.</source>
          <target state="translated">NewClient は、接続のもう一方の端にある一連のサービスへのリクエストを処理するために、新しい rpc.Client を返します。</target>
        </trans-unit>
        <trans-unit id="856bbb45168cae23811fbc886f1b4d3be27846fe" translate="yes" xml:space="preserve">
          <source>NewClientCodec returns a new rpc.ClientCodec using JSON-RPC on conn.</source>
          <target state="translated">NewClientCodecは、conn上でJSON-RPCを使用して新しいrpc.ClientCodecを返します。</target>
        </trans-unit>
        <trans-unit id="b7383a602fa795d357297b4de95d8575b00a78ab" translate="yes" xml:space="preserve">
          <source>NewClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="translated">NewClientConnは、Goの初期のHTTP実装の成果物です。これは低レベルで古く、Goの現在のHTTPスタックでは使われていません。Go 1の前に削除しておくべきでした。</target>
        </trans-unit>
        <trans-unit id="4aa403c83da74918792480724a9f264584f0a604" translate="yes" xml:space="preserve">
          <source>NewClientWithCodec is like NewClient but uses the specified codec to encode requests and decode responses.</source>
          <target state="translated">NewClientWithCodecはNewClientと似ていますが、指定されたコーデックを使用してリクエストをエンコードし、レスポンスをデコードします。</target>
        </trans-unit>
        <trans-unit id="413a5b89d02aeac4a6363a735de94f49289195bd" translate="yes" xml:space="preserve">
          <source>NewCommentMap creates a new comment map by associating comment groups of the comments list with the nodes of the AST specified by node.</source>
          <target state="translated">NewCommentMapは,コメントリストのコメントグループとノードで指定されたASTのノードを関連付けて,新しいコメントマップを作成します.</target>
        </trans-unit>
        <trans-unit id="9378822df6d0b7340f61509bcb85e6fd00318896" translate="yes" xml:space="preserve">
          <source>NewCommentMap tries to associate a comment group to the &quot;largest&quot; node possible: For instance, if the comment is a line comment trailing an assignment, the comment is associated with the entire assignment rather than just the last operand in the assignment.</source>
          <target state="translated">NewCommentMapはコメントグループを可能な限り &quot;最大 &quot;のノードに関連付けようとします。例えば、コメントが代入の後にある行のコメントである場合、コメントは代入の最後のオペランドだけではなく、代入全体に関連付けられます。</target>
        </trans-unit>
        <trans-unit id="4fd7049b9f856641359b9b5ca0cbb7b1cd2c0fac" translate="yes" xml:space="preserve">
          <source>NewCond returns a new Cond with Locker l.</source>
          <target state="translated">NewCond は Locker l で新しい Cond を返します。</target>
        </trans-unit>
        <trans-unit id="eee961cdebdc3886242b174d6b32a3a25041270b" translate="yes" xml:space="preserve">
          <source>NewConn returns a new Conn using conn for I/O.</source>
          <target state="translated">NewConnは、I/Oにconnを使用した新しいConnを返します。</target>
        </trans-unit>
        <trans-unit id="f81c5ab59d9f6c3c64039d6d5945f0e9cc54b88d" translate="yes" xml:space="preserve">
          <source>NewConst returns a new constant with value val. The remaining arguments set the attributes found with all Objects.</source>
          <target state="translated">NewConst は値 val を持つ新しい定数を返します。残りの引数は、すべてのオブジェクトで見つかった属性を設定します。</target>
        </trans-unit>
        <trans-unit id="bdc96fab96f7e5d7b8628b8398bba38bf6580815" translate="yes" xml:space="preserve">
          <source>NewDecoder constructs a new ascii85 stream decoder.</source>
          <target state="translated">NewDecoder は、新しい ascii85 ストリームデコーダを構築します。</target>
        </trans-unit>
        <trans-unit id="369f6e69c20c8e4d13528053c51cd1d3a61e68de" translate="yes" xml:space="preserve">
          <source>NewDecoder constructs a new base32 stream decoder.</source>
          <target state="translated">NewDecoder は、新しい base32 ストリームデコーダを構築します。</target>
        </trans-unit>
        <trans-unit id="d864a240d883e7dc24b71e88a8d5c0c1948d801c" translate="yes" xml:space="preserve">
          <source>NewDecoder constructs a new base64 stream decoder.</source>
          <target state="translated">NewDecoder は、新しい base64 ストリームデコーダを構築します。</target>
        </trans-unit>
        <trans-unit id="060a7de61a5514feea18b0489167470b12d0112a" translate="yes" xml:space="preserve">
          <source>NewDecoder creates a new XML parser reading from r. If r does not implement io.ByteReader, NewDecoder will do its own buffering.</source>
          <target state="translated">r が io.ByteReader を実装していない場合、NewDecoder は独自のバッファリングを行います。</target>
        </trans-unit>
        <trans-unit id="89572a28c9f62f14398327362d699001d2142b0d" translate="yes" xml:space="preserve">
          <source>NewDecoder returns a new decoder that reads from r.</source>
          <target state="translated">NewDecoderは、rから読み込む新しいデコーダを返します。</target>
        </trans-unit>
        <trans-unit id="96af6984e1ed3c2ee798e01c4c02872b06029e89" translate="yes" xml:space="preserve">
          <source>NewDecoder returns a new decoder that reads from the io.Reader. If r does not also implement io.ByteReader, it will be wrapped in a bufio.Reader.</source>
          <target state="translated">NewDecoderは、io.Readerから読み込む新しいデコーダを返します。rがio.ByteReaderも実装していない場合は、bufio.Readerでラップされます。</target>
        </trans-unit>
        <trans-unit id="56f76b42c4fa44e21b83722e16f9a4c656264781" translate="yes" xml:space="preserve">
          <source>NewDecoder returns an io.Reader that decodes hexadecimal characters from r. NewDecoder expects that r contain only an even number of hexadecimal characters.</source>
          <target state="translated">NewDecoder は r から 16 進数文字をデコードする io.Reader を返します。</target>
        </trans-unit>
        <trans-unit id="815c279b763f19acec3e56299892af2ccb9c6e0b" translate="yes" xml:space="preserve">
          <source>NewDecoder wraps an io.Reader interface around Decode.</source>
          <target state="translated">NewDecoderは、io.ReaderインターフェイスをDecodeの周りにラップします。</target>
        </trans-unit>
        <trans-unit id="415b5e5928dc67ca5917ce4d88ceda8c89e1b092" translate="yes" xml:space="preserve">
          <source>NewEncoder</source>
          <target state="translated">NewEncoder</target>
        </trans-unit>
        <trans-unit id="018ed3a7983059a17dab1b137a9844370d5a2b74" translate="yes" xml:space="preserve">
          <source>NewEncoder returns a new ascii85 stream encoder. Data written to the returned writer will be encoded and then written to w. Ascii85 encodings operate in 32-bit blocks; when finished writing, the caller must Close the returned encoder to flush any trailing partial block.</source>
          <target state="translated">NewEncoder は新しい ascii85 ストリームエンコーダを返します。返されたライタに書き込まれたデータはエンコードされてから w に書き込まれます。 Ascii85 エンコーダーは 32 ビットブロックで動作します。</target>
        </trans-unit>
        <trans-unit id="dd7f4a301864c468eb1cb40a57cdfbd02a050c05" translate="yes" xml:space="preserve">
          <source>NewEncoder returns a new base32 stream encoder. Data written to the returned writer will be encoded using enc and then written to w. Base32 encodings operate in 5-byte blocks; when finished writing, the caller must Close the returned encoder to flush any partially written blocks.</source>
          <target state="translated">NewEncoder は、新しい base32 ストリームエンコーダを返します。返されたライタに書き込まれたデータは enc を使用してエンコードされ、その後 w に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="44ee1dd433d92306638dd13e3127df94408d4089" translate="yes" xml:space="preserve">
          <source>NewEncoder returns a new base64 stream encoder. Data written to the returned writer will be encoded using enc and then written to w. Base64 encodings operate in 4-byte blocks; when finished writing, the caller must Close the returned encoder to flush any partially written blocks.</source>
          <target state="translated">NewEncoder は新しい base64 ストリームエンコーダを返します。返されたライタに書き込まれたデータは enc を使用してエンコードされ、その後 w に書き込まれます。 Base64 エンコーディングは 4 バイトブロックで動作します。</target>
        </trans-unit>
        <trans-unit id="d754a23d4130a807a013e53a62e7006beaa7e442" translate="yes" xml:space="preserve">
          <source>NewEncoder returns a new encoder that will transmit on the io.Writer.</source>
          <target state="translated">NewEncoder は、io.Writer.Compact で送信する新しいエンコーダを返します。</target>
        </trans-unit>
        <trans-unit id="d092172077c4670e0835be93cc4b418229db1d7a" translate="yes" xml:space="preserve">
          <source>NewEncoder returns a new encoder that writes to w.</source>
          <target state="translated">NewEncoder は w に書き込む新しいエンコーダを返します。</target>
        </trans-unit>
        <trans-unit id="6bc807b2bebb618f92c16dd28d4ba73b4801ef86" translate="yes" xml:space="preserve">
          <source>NewEncoder returns an io.Writer that writes lowercase hexadecimal characters to w.</source>
          <target state="translated">NewEncoderは、小文字の16進数文字をwに書き込むio.Writerを返します。</target>
        </trans-unit>
        <trans-unit id="ec3215d4f7a860c50c96d8ebe05c612fbb607223" translate="yes" xml:space="preserve">
          <source>NewEncoding returns a new Encoding defined by the given alphabet, which must be a 32-byte string.</source>
          <target state="translated">NewEncoding は、与えられたアルファベットによって定義された新しい Encoding を返します。</target>
        </trans-unit>
        <trans-unit id="a225db48b3273b7eabd0d6e7950dc3ffe5785055" translate="yes" xml:space="preserve">
          <source>NewEncoding returns a new padded Encoding defined by the given alphabet, which must be a 64-byte string that does not contain the padding character or CR / LF ('\r', '\n'). The resulting Encoding uses the default padding character ('='), which may be changed or disabled via WithPadding.</source>
          <target state="translated">NewEncodingは、与えられたアルファベットによって定義された新しいパディングされたEncodingを返します。これは、パディング文字またはCR/LF ('\r','\n')を含まない64バイトの文字列でなければなりません。結果として得られるEncodingは、デフォルトのパディング文字('=')を使用しますが、これはWithPaddingによって変更または無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="e3eb6effd2379105d96f5ae281be769ac968f9b4" translate="yes" xml:space="preserve">
          <source>NewFatFile creates a new FatFile for accessing all the Mach-O images in a universal binary. The Mach-O binary is expected to start at position 0 in the ReaderAt.</source>
          <target state="translated">NewFatFileは、普遍的なバイナリですべてのMach-O画像にアクセスするための新しいFatFileを作成します。Mach-OバイナリはReaderAtの位置0から始まると予想されます。</target>
        </trans-unit>
        <trans-unit id="d86df188426dbb1a1da9539d4f76b961b9e5801b" translate="yes" xml:space="preserve">
          <source>NewField returns a new variable representing a struct field. For embedded fields, the name is the unqualified type name / under which the field is accessible.</source>
          <target state="translated">NewField は、構造体フィールドを表す新しい変数を返します。埋め込まれたフィールドの場合、名前はそのフィールドがアクセス可能な非限定型の名前です。</target>
        </trans-unit>
        <trans-unit id="fa49724aa2bb7b06a7e49b7b14c21627f72f66fe" translate="yes" xml:space="preserve">
          <source>NewFile creates a new File for accessing a Mach-O binary in an underlying reader. The Mach-O binary is expected to start at position 0 in the ReaderAt.</source>
          <target state="translated">NewFile は、基礎となるリーダ内の Mach-O バイナリにアクセスするための新しい File を作成します。Mach-O バイナリは ReaderAt の位置 0 から始まると予想されます。</target>
        </trans-unit>
        <trans-unit id="c4cb0bcb5da3b7cb9c222f07d952f1deb79331f9" translate="yes" xml:space="preserve">
          <source>NewFile creates a new File for accessing a PE binary in an underlying reader.</source>
          <target state="translated">NewFile は、基礎となるリーダーで PE バイナリにアクセスするための新しいファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="fb3c69eb6155088ad1b0a5da31e3f5031165ea55" translate="yes" xml:space="preserve">
          <source>NewFile creates a new File for accessing a Plan 9 binary in an underlying reader. The Plan 9 binary is expected to start at position 0 in the ReaderAt.</source>
          <target state="translated">NewFile は、基礎となるリーダーの Plan 9 バイナリにアクセスするための新しいファイルを作成します。Plan 9 バイナリは、ReaderAt の位置 0 から始まると予想されます。</target>
        </trans-unit>
        <trans-unit id="02c382510f60f7ac0e7f9dd332c2062d9f122bae" translate="yes" xml:space="preserve">
          <source>NewFile creates a new File for accessing an ELF binary in an underlying reader. The ELF binary is expected to start at position 0 in the ReaderAt.</source>
          <target state="translated">NewFileは、基礎となるリーダーのELFバイナリにアクセスするための新しいファイルを作成します。ELF バイナリは ReaderAt の位置 0 から始まると予想されます。</target>
        </trans-unit>
        <trans-unit id="dd7d78c4172dcb2fe6cfcff9bb7e67f44f614ee3" translate="yes" xml:space="preserve">
          <source>NewFile returns a new File with the given file descriptor and name. The returned value will be nil if fd is not a valid file descriptor. On Unix systems, if the file descriptor is in non-blocking mode, NewFile will attempt to return a pollable File (one for which the SetDeadline methods work).</source>
          <target state="translated">NewFile は、指定されたファイル記述子と名前を持つ新しいファイルを返します。fd が有効なファイル記述子でない場合、返される値は nil になります。Unixシステムでは,ファイル記述子がノンブロッキングモードの場合,NewFileはポーリング可能なファイル(SetDeadlineメソッドが機能するもの)を返そうとします.</target>
        </trans-unit>
        <trans-unit id="146b2f1f1201d86650233642cb2b7d8638ac3e22" translate="yes" xml:space="preserve">
          <source>NewFileSet creates a new file set.</source>
          <target state="translated">NewFileSetは、新しいファイルセットを作成します。</target>
        </trans-unit>
        <trans-unit id="39ae9e749e1c008bbfaf63f08fa2bb4e930b56b2" translate="yes" xml:space="preserve">
          <source>NewFileTransport returns a new RoundTripper, serving the provided FileSystem. The returned RoundTripper ignores the URL host in its incoming requests, as well as most other properties of the request.</source>
          <target state="translated">NewFileTransport は、提供された FileSystem にサービスを提供する新しい RoundTripper を返します。返される RoundTripper は、リクエストの他のほとんどのプロパティと同様に、受信リクエストの URL ホストを無視します。</target>
        </trans-unit>
        <trans-unit id="f495b9657d10d27f36446d430fd6f4942c405b7b" translate="yes" xml:space="preserve">
          <source>NewFlagSet returns a new, empty flag set with the specified name and error handling property. If the name is not empty, it will be printed in the default usage message and in error messages.</source>
          <target state="translated">NewFlagSet は、指定された名前とエラー処理プロパティを持つ新しい空のフラグセットを返します。名前が空でない場合は、デフォルトの使用法メッセージとエラーメッセージに表示されます。</target>
        </trans-unit>
        <trans-unit id="6c1be2205981424ac6113bbac1c50ddc8e645067" translate="yes" xml:space="preserve">
          <source>NewFloat allocates and returns a new Float set to x, with precision 53 and rounding mode ToNearestEven. NewFloat panics with ErrNaN if x is a NaN.</source>
          <target state="translated">NewFloat は、精度 53、丸めモード ToNearestEven で x にセットされた新しい Float を確保して返します。NewFloatは、xがNaNの場合はErrNaNでパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="2c91158e9955fcc78b6177862dde11c92e0a8e89" translate="yes" xml:space="preserve">
          <source>NewFromFiles</source>
          <target state="translated">NewFromFiles</target>
        </trans-unit>
        <trans-unit id="d5aa413c2ae053b79a6371a10ccf3bd1d17cfac2" translate="yes" xml:space="preserve">
          <source>NewFromFiles computes documentation for a package.</source>
          <target state="translated">NewFromFilesは、パッケージのドキュメントを計算します。</target>
        </trans-unit>
        <trans-unit id="4a2d01ef38cc1f681b00bbd8645c1b2f1cdf0884" translate="yes" xml:space="preserve">
          <source>NewFromFiles takes ownership of the AST files and may edit them, unless the PreserveAST Mode bit is on.</source>
          <target state="translated">NewFromFilesは、PreserveASTモードビットがオンになっていない限り、ASTファイルの所有権を取得し、ASTファイルを編集することができます。</target>
        </trans-unit>
        <trans-unit id="62cad2834cd366b48375257d77d59b7e9a0915c1" translate="yes" xml:space="preserve">
          <source>NewFunc returns a new function with the given signature, representing the function's type.</source>
          <target state="translated">NewFuncは、関数の型を表すシグネチャを指定して新しい関数を返します。</target>
        </trans-unit>
        <trans-unit id="1ab1fbb5a4b914ad66a4cae1cb655fa076b9ba96" translate="yes" xml:space="preserve">
          <source>NewGCM (Decrypt)</source>
          <target state="translated">NewGCM (復号化)</target>
        </trans-unit>
        <trans-unit id="88779115714f813ff34a3c2fff6aef4d291f21ae" translate="yes" xml:space="preserve">
          <source>NewGCM (Encrypt)</source>
          <target state="translated">NewGCM (暗号化)</target>
        </trans-unit>
        <trans-unit id="d8e7f4fd8eb6323a1d235af8804d7f84b6c49124" translate="yes" xml:space="preserve">
          <source>NewGCM returns the given 128-bit, block cipher wrapped in Galois Counter Mode with the standard nonce length.</source>
          <target state="translated">NewGCM は、与えられた 128 ビットのブロック暗号を標準 nonce 長のガロアカウンターモードでラップしたものを返します。</target>
        </trans-unit>
        <trans-unit id="1973de63c4df3596c58655e33db1f26efd7af742" translate="yes" xml:space="preserve">
          <source>NewGCMWithNonceSize returns the given 128-bit, block cipher wrapped in Galois Counter Mode, which accepts nonces of the given length.</source>
          <target state="translated">NewGCMWithNonceSize は、与えられた長さの nonce を受け入れるガロアカウンターモードでラップされた 128 ビットのブロック暗号を返します。</target>
        </trans-unit>
        <trans-unit id="23bb3140d85ffc465c1c9d547b9527a6165fd0c6" translate="yes" xml:space="preserve">
          <source>NewGCMWithNonceSize returns the given 128-bit, block cipher wrapped in Galois Counter Mode, which accepts nonces of the given length. The length must not be zero.</source>
          <target state="translated">NewGCMWithNonceSize は、与えられた 128 ビット、ガロアカウンターモードでラップされたブロック暗号を返します。長さは 0 であってはなりません。</target>
        </trans-unit>
        <trans-unit id="c89798890939059366d5fe1d2975869f4976a143" translate="yes" xml:space="preserve">
          <source>NewGCMWithTagSize returns the given 128-bit, block cipher wrapped in Galois Counter Mode, which generates tags with the given length.</source>
          <target state="translated">NewGCMWithTagSize は、与えられた長さのタグを生成するガロアカウンターモードでラップされた 128 ビットのブロック暗号を返します。</target>
        </trans-unit>
        <trans-unit id="454b2fc86978be3ab7ad864f00d10ff49dc84b08" translate="yes" xml:space="preserve">
          <source>NewGray returns a new Gray image with the given bounds.</source>
          <target state="translated">NewGray は、指定された境界線を持つ新しいグレー画像を返します。</target>
        </trans-unit>
        <trans-unit id="3f20d3a865eb95651d9773b55020e283c7cda789" translate="yes" xml:space="preserve">
          <source>NewGray16 returns a new Gray16 image with the given bounds.</source>
          <target state="translated">NewGray16 は、指定された境界線を持つ新しい Gray16 画像を返します。</target>
        </trans-unit>
        <trans-unit id="7063568571cff8011c550348a1d249dbcd1b3164" translate="yes" xml:space="preserve">
          <source>NewIEEE creates a new hash.Hash32 computing the CRC-32 checksum using the IEEE polynomial. Its Sum method will lay the value out in big-endian byte order. The returned Hash32 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="translated">NewIEEEは、IEEE多項式を用いてCRC-32チェックサムを計算し、新しいHash.Hash32を作成します。Sumメソッドは、値をビッグエンディアンバイト順に並べます。返されたHash32は、ハッシュの内部状態をマーシャリングしたりアンマーシャリングしたりするために、encoding.BinaryMarshalerとencoding.BinaryUnmarshalerも実装しています。</target>
        </trans-unit>
        <trans-unit id="4d0116b71b732a25476a4fce3bfdd9a186665b0a" translate="yes" xml:space="preserve">
          <source>NewIdent creates a new Ident without position. Useful for ASTs generated by code other than the Go parser.</source>
          <target state="translated">NewIdentは、位置を指定しない新しいIdentを作成します。Goパーサ以外のコードで生成されたASTに便利です。</target>
        </trans-unit>
        <trans-unit id="a1da620d7851b36eddceb2d1155bd10520ef1e3d" translate="yes" xml:space="preserve">
          <source>NewIdentifier returns a new IdentifierNode with the given identifier name.</source>
          <target state="translated">NewIdentifierは、指定された識別子名を持つ新しいIdentifierNodeを返します。</target>
        </trans-unit>
        <trans-unit id="525b5936156155224309c259d63dc7a201bbb3b9" translate="yes" xml:space="preserve">
          <source>NewInt allocates and returns a new Int set to x.</source>
          <target state="translated">NewInt は、x にセットされた新しい Int を割り当てて返します。</target>
        </trans-unit>
        <trans-unit id="ce33b2838258d1a7fb77fc3c2496c70b71309e0c" translate="yes" xml:space="preserve">
          <source>NewInterface returns a new (incomplete) interface for the given methods and embedded types. Each embedded type must have an underlying type of interface type. NewInterface takes ownership of the provided methods and may modify their types by setting missing receivers. To compute the method set of the interface, Complete must be called.</source>
          <target state="translated">NewInterfaceは、与えられたメソッドと埋め込み型の新しい(不完全な)インターフェースを返します。それぞれの埋め込み型は、基礎となるインターフェイス型の型を持っていなければなりません。NewInterfaceは、提供されたメソッドの所有権を引き継ぎ、欠落している受信機を設定することで、その型を変更することができます。インターフェースのメソッドセットを計算するためには、Completeを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c1879314ab1ca85d9a540a3d842506cb8e3d5935" translate="yes" xml:space="preserve">
          <source>NewInterfaceType returns a new (incomplete) interface for the given methods and embedded types. Each embedded type must have an underlying type of interface type (this property is not verified for defined types, which may be in the process of being set up and which don't have a valid underlying type yet). NewInterfaceType takes ownership of the provided methods and may modify their types by setting missing receivers. To compute the method set of the interface, Complete must be called.</source>
          <target state="translated">NewInterfaceTypeは、与えられたメソッドと埋め込み型の新しい(不完全な)インターフェースを返します。それぞれの埋め込み型は、インタフェース型の基礎となる型を持っていなければなりません(このプロパティは、定義された型については検証されません。)NewInterfaceType は、提供されたメソッドの所有権を取得し、欠落している受信機を設定することでその型を変更することができます。インターフェースのメソッドセットを計算するには、Complete を呼ばなければなりません。</target>
        </trans-unit>
        <trans-unit id="412fcf56e8322a2530a374f7516c3ab81d822a6e" translate="yes" xml:space="preserve">
          <source>NewKeyFromSeed calculates a private key from a seed. It will panic if len(seed) is not SeedSize. This function is provided for interoperability with RFC 8032. RFC 8032's private keys correspond to seeds in this package.</source>
          <target state="translated">NewKeyFromSeedは、シードから秘密鍵を計算します。len(seed)がSeedSizeでない場合はパニックになります。この関数は RFC 8032 との相互運用性のために提供されています。RFC 8032 の秘密鍵は、本パッケージのシードに対応しています。</target>
        </trans-unit>
        <trans-unit id="7f204c9bcbc69e7346a4be4a91e71094cadba874" translate="yes" xml:space="preserve">
          <source>NewLRUClientSessionCache returns a ClientSessionCache with the given capacity that uses an LRU strategy. If capacity is &amp;lt; 1, a default capacity is used instead.</source>
          <target state="translated">NewLRUClientSessionCacheは、LRU戦略を使用する指定された容量のClientSessionCacheを返します。容量が1未満の場合、代わりにデフォルトの容量が使用されます。</target>
        </trans-unit>
        <trans-unit id="e85de83deae1f6ea413617fafa918347032b364d" translate="yes" xml:space="preserve">
          <source>NewLabel returns a new label.</source>
          <target state="translated">NewLabel は新しいラベルを返します。</target>
        </trans-unit>
        <trans-unit id="c00322f2990498c11eaea48009e4263db8d2b147" translate="yes" xml:space="preserve">
          <source>NewLineTable returns a new PC/line table corresponding to the encoded data. Text must be the start address of the corresponding text segment.</source>
          <target state="translated">NewLineTable は、エンコードされたデータに対応する新しい PC/行テーブルを返します。テキストは、対応するテキストセグメントの開始アドレスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ee273ce2cc40669abe88f8cbd5b969c8b99cc1d8" translate="yes" xml:space="preserve">
          <source>NewListener creates a Listener which accepts connections from an inner Listener and wraps each connection with Server. The configuration config must be non-nil and must include at least one certificate or else set GetCertificate.</source>
          <target state="translated">NewListener は、内部リスナーからの接続を受け入れ、各接続を Server でラップするリスナーを作成します。構成構成は非nilである必要があり、少なくとも1つの証明書を含む必要があり、そうでなければGetCertificateを設定します。</target>
        </trans-unit>
        <trans-unit id="b8ae0fc1fd1b3795d43931c769132b8b76d67124" translate="yes" xml:space="preserve">
          <source>NewLogger creates a log.Logger whose output is written to the system log service with the specified priority, a combination of the syslog facility and severity. The logFlag argument is the flag set passed through to log.New to create the Logger.</source>
          <target state="translated">NewLoggerはlog.Loggerを作成し、その出力は指定された優先度、つまりsyslog機能と深刻度の組み合わせでシステムログサービスに書き込まれます。logFlag 引数は、log.New に渡されたフラグのセットで、ロガーを作成します。</target>
        </trans-unit>
        <trans-unit id="c2cf8bf27d6896fb60a3c00c2f29046150140e53" translate="yes" xml:space="preserve">
          <source>NewMap returns a new map for the given key and element types.</source>
          <target state="translated">NewMap は、指定されたキーと要素の型に対して新しいマップを返します。</target>
        </trans-unit>
        <trans-unit id="02aaaae9f75a28f52b63beb3faa08f1c64a67962" translate="yes" xml:space="preserve">
          <source>NewMethodSet returns the method set for the given type T. It always returns a non-nil method set, even if it is empty.</source>
          <target state="translated">NewMethodSetは、指定された型Tのメソッド・セットを返します。空であっても、常に非nilのメソッドセットを返します。</target>
        </trans-unit>
        <trans-unit id="8a80c96af1db7665cca4280156494ace76054fb6" translate="yes" xml:space="preserve">
          <source>NewNRGBA returns a new NRGBA image with the given bounds.</source>
          <target state="translated">NewNRGBAは、指定された境界を持つ新しいNRGBA画像を返します。</target>
        </trans-unit>
        <trans-unit id="91846ee562c7c231bc0d057ad08777b2cf971613" translate="yes" xml:space="preserve">
          <source>NewNRGBA64 returns a new NRGBA64 image with the given bounds.</source>
          <target state="translated">NewNRGBA64は、指定された境界を持つ新しいNRGBA64画像を返します。</target>
        </trans-unit>
        <trans-unit id="808f42c5f206bd7e6ba827599de3fbf867803134" translate="yes" xml:space="preserve">
          <source>NewNYCbCrA returns a new NYCbCrA image with the given bounds and subsample ratio.</source>
          <target state="translated">NewNYCbCrA は、与えられた境界とサブサンプル比を持つ新しい NYCbCrA 画像を返します。</target>
        </trans-unit>
        <trans-unit id="1fd8ffb265de65f1861cce1196f85b25e1d6856a" translate="yes" xml:space="preserve">
          <source>NewNamed returns a new named type for the given type name, underlying type, and associated methods. If the given type name obj doesn't have a type yet, its type is set to the returned named type. The underlying type must not be a *Named.</source>
          <target state="translated">NewNamed は、指定された型名、基礎となる型、および関連付けられたメソッドの新しい名前付き型を返します。与えられた型名 obj がまだ型を持っていない場合、その型は返された名前付き型に設定されます。基礎となる型は *Named であってはなりません。</target>
        </trans-unit>
        <trans-unit id="e782c15bb55a8ae8ebce9f874df5b1a0c46216d1" translate="yes" xml:space="preserve">
          <source>NewOFB</source>
          <target state="translated">NewOFB</target>
        </trans-unit>
        <trans-unit id="b57f2ce3c1f5586132093d982185af2e0ee68f6c" translate="yes" xml:space="preserve">
          <source>NewOFB returns a Stream that encrypts or decrypts using the block cipher b in output feedback mode. The initialization vector iv's length must be equal to b's block size.</source>
          <target state="translated">NewOFBは、出力フィードバックモードでブロック暗号bを使用して暗号化または復号化するStreamを返します。初期化ベクトル iv の長さは b のブロックサイズに等しくなければなりません。</target>
        </trans-unit>
        <trans-unit id="8ec79b70c4182bbf15d13c7ed9c2f93fc95d113e" translate="yes" xml:space="preserve">
          <source>NewObj creates a new object of a given kind and name.</source>
          <target state="translated">NewObjは、指定された種類と名前の新しいオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="36552f14153f539c86094444ec1ce5a1a1e5bd03" translate="yes" xml:space="preserve">
          <source>NewPackage creates a new Package node from a set of File nodes. It resolves unresolved identifiers across files and updates each file's Unresolved list accordingly. If a non-nil importer and universe scope are provided, they are used to resolve identifiers not declared in any of the package files. Any remaining unresolved identifiers are reported as undeclared. If the files belong to different packages, one package name is selected and files with different package names are reported and then ignored. The result is a package node and a scanner.ErrorList if there were errors.</source>
          <target state="translated">NewPackage は、一連の File ノードから新しい Package ノードを作成します。ファイル間で未解決の識別子を解決し、それに応じて各ファイルの未解決リストを更新します。非 null ではないインポーターとユニバースコープが指定されている場合は、 パッケージファイルで宣言されていない識別子を解決するために使用されます。未解決の識別子が残っている場合は、宣言されていないものとして報告されます。ファイルが異なるパッケージに属している場合は、一つのパッケージ名が選択され、 異なるパッケージ名のファイルが報告され、無視されます。結果は、パッケージノードと、エラーがあった場合は scanner.ErrorList となります。</target>
        </trans-unit>
        <trans-unit id="8b93023f444decd83a57effbd1356f40d43944cd" translate="yes" xml:space="preserve">
          <source>NewPackage returns a new Package for the given package path and name. The package is not complete and contains no explicit imports.</source>
          <target state="translated">NewPackage は、指定されたパッケージのパスと名前に対して新しいパッケージを返します。このパッケージは完全なものではなく、明示的なインポートも含まれていません。</target>
        </trans-unit>
        <trans-unit id="7604882861f8171ac92bb5a0ff3402c04452837d" translate="yes" xml:space="preserve">
          <source>NewPaletted returns a new Paletted image with the given width, height and palette.</source>
          <target state="translated">NewPalettedは、指定された幅、高さ、パレットを持つ新しいPaletted画像を返します。</target>
        </trans-unit>
        <trans-unit id="8157edaefd4d8244aead4c748c2239a1e9cdf406" translate="yes" xml:space="preserve">
          <source>NewParam returns a new variable representing a function parameter.</source>
          <target state="translated">NewParamは、関数のパラメータを表す新しい変数を返します。</target>
        </trans-unit>
        <trans-unit id="760c953eeca5555c276ff2137d11f1ac464a3878" translate="yes" xml:space="preserve">
          <source>NewPkgName returns a new PkgName object representing an imported package. The remaining arguments set the attributes found with all Objects.</source>
          <target state="translated">NewPkgName は、インポートされたパッケージを表す新しい PkgName オブジェクトを返します。残りの引数は、すべてのオブジェクトで見られる属性を設定します。</target>
        </trans-unit>
        <trans-unit id="7267fd8d7fb296d4d49d2c7f2fba8f9caa6a9909" translate="yes" xml:space="preserve">
          <source>NewPointer returns a new pointer type for the given element (base) type.</source>
          <target state="translated">NewPointerは、与えられた要素(ベース)の型に対して新しいポインタの型を返します。</target>
        </trans-unit>
        <trans-unit id="ad8326fa0e1c2920bea4e6fdd7be9537d18c5951" translate="yes" xml:space="preserve">
          <source>NewProfile creates a new profile with the given name. If a profile with that name already exists, NewProfile panics. The convention is to use a 'import/path.' prefix to create separate name spaces for each package. For compatibility with various tools that read pprof data, profile names should not contain spaces.</source>
          <target state="translated">NewProfile は、指定された名前の新しいプロファイルを作成します。その名前のプロファイルがすでに存在する場合、NewProfile はパニックに陥ります。接頭辞 'import/path.' を使用して、パッケージごとに別々の名前のスペースを作成するのが慣例です。pprof データを読み込む様々なツールとの互換性のために、プロファイル名にはスペースを含めてはいけません。</target>
        </trans-unit>
        <trans-unit id="7dee9fd54a2c7c0d2e2445231875724a5129fb2a" translate="yes" xml:space="preserve">
          <source>NewProxyClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="translated">NewProxyClientConn は、Go の初期の HTTP 実装の成果物です。これは低レベルで古く、Goの現在のHTTPスタックでは使われていません。Go 1 の前に削除しておくべきでした。</target>
        </trans-unit>
        <trans-unit id="7013b5c7630f0f9aff6a55861942f65a617ff634" translate="yes" xml:space="preserve">
          <source>NewRGBA returns a new RGBA image with the given bounds.</source>
          <target state="translated">NewRGBAは、指定された境界線を持つ新しいRGBA画像を返します。</target>
        </trans-unit>
        <trans-unit id="06634c84293e78aa59af4c55605513918ba019e7" translate="yes" xml:space="preserve">
          <source>NewRGBA64 returns a new RGBA64 image with the given bounds.</source>
          <target state="translated">NewRGBA64は、指定された境界線を持つ新しいRGBA64画像を返します。</target>
        </trans-unit>
        <trans-unit id="00d97e53207565a29c223d381563f8ace2580585" translate="yes" xml:space="preserve">
          <source>NewRat creates a new Rat with numerator a and denominator b.</source>
          <target state="translated">NewRatは分子aと分母bの新しいRatを作成します。</target>
        </trans-unit>
        <trans-unit id="8b51e66ddf0c0bc242e2972b3ed47f8e19aa8aff" translate="yes" xml:space="preserve">
          <source>NewReadLogger returns a reader that behaves like r except that it logs (using log.Printf) each read to standard error, printing the prefix and the hexadecimal data read.</source>
          <target state="translated">NewReadLogger は r のような動作をするリーダを返しますが、読み込みごとに (log.Printf を使用して)標準エラーにログを取り、接頭辞と 16 進数のデータを表示します。</target>
        </trans-unit>
        <trans-unit id="4ddd20c3c7ab3b134b41334b4749254502eec73c" translate="yes" xml:space="preserve">
          <source>NewReadWriter allocates a new ReadWriter that dispatches to r and w.</source>
          <target state="translated">NewReadWriterは、rとwにディスパッチする新しいReadWriterを割り当てます。</target>
        </trans-unit>
        <trans-unit id="abdd552b8a6a378c711658cbda39673b4658c843" translate="yes" xml:space="preserve">
          <source>NewReader</source>
          <target state="translated">NewReader</target>
        </trans-unit>
        <trans-unit id="656b7888dc8300d6258cc09514612ef897a06356" translate="yes" xml:space="preserve">
          <source>NewReader creates a new ReadCloser. Reads from the returned ReadCloser read and decompress data from r. If r does not implement io.ByteReader, the decompressor may read more data than necessary from r. It is the caller's responsibility to call Close on the ReadCloser when done.</source>
          <target state="translated">NewReader は新しい ReadCloser を作成します。r が io.ByteReader を実装していない場合、デコンプレッサは r から必要以上に多くのデータを読み取る可能性があります。</target>
        </trans-unit>
        <trans-unit id="03de0f94de657abcdcd727d93d1385934f4b4c2a" translate="yes" xml:space="preserve">
          <source>NewReader creates a new Reader reading from r.</source>
          <target state="translated">NewReaderは、rから読み込んだ新しいReaderを作成します。</target>
        </trans-unit>
        <trans-unit id="9310cd05d389a1e08ddfb9e4317d864d066d18ff" translate="yes" xml:space="preserve">
          <source>NewReader creates a new Reader reading the given reader. If r does not also implement io.ByteReader, the decompressor may read more data than necessary from r.</source>
          <target state="translated">NewReader は、指定されたリーダーを読む新しいリーダーを作成します。rがio.ByteReaderも実装していない場合、デコンプレッサは必要以上に多くのデータをrから読み込む可能性があります。</target>
        </trans-unit>
        <trans-unit id="1afded549345ec0238483e2ba55aa75ed2ded5bd" translate="yes" xml:space="preserve">
          <source>NewReader creates a new io.ReadCloser. Reads from the returned io.ReadCloser read and decompress data from r. If r does not also implement io.ByteReader, the decompressor may read more data than necessary from r. It is the caller's responsibility to call Close on the ReadCloser when finished reading. The number of bits to use for literal codes, litWidth, must be in the range [2,8] and is typically 8. It must equal the litWidth used during compression.</source>
          <target state="translated">NewReader は新しい io.ReadCloser を作成します。返されたio.ReadCloserから読み込んで、rからのデータを展開します。rがio.ByteReaderも実装していない場合、展開器はrから必要以上のデータを読み込んでしまう可能性があります。リテラルコードに使用するビット数であるlitWidthは、[2,8]の範囲内でなければならず、通常は8です。 これは、圧縮時に使用されるlitWidthと等しくなければなりません。</target>
        </trans-unit>
        <trans-unit id="104785202390e0ba0e171f6e70831714a74466f6" translate="yes" xml:space="preserve">
          <source>NewReader creates a new multipart Reader reading from r using the given MIME boundary.</source>
          <target state="translated">NewReader は、指定された MIME バウンダリを使用して r から読み取る新しいマルチパート リーダーを作成します。</target>
        </trans-unit>
        <trans-unit id="c18de38552330a3ffd438fa2e288016ca23d0e4e" translate="yes" xml:space="preserve">
          <source>NewReader returns a new ReadCloser that can be used to read the uncompressed version of r. If r does not also implement io.ByteReader, the decompressor may read more data than necessary from r. It is the caller's responsibility to call Close on the ReadCloser when finished reading.</source>
          <target state="translated">NewReader は、非圧縮バージョンの r の読み込みに使用できる新しい ReadCloser を返します。 r が io.ByteReader も実装していない場合、デコンプレッサは必要以上に多くのデータを r から読み込む可能性があります。</target>
        </trans-unit>
        <trans-unit id="36241ff4da2c1821f96dba25272112a2ddbe76ee" translate="yes" xml:space="preserve">
          <source>NewReader returns a new Reader reading from b.</source>
          <target state="translated">NewReader は、b から読み込んだ新しい Reader を返します。</target>
        </trans-unit>
        <trans-unit id="9e007e6c23a0a667f419ff954033af0ca806b580" translate="yes" xml:space="preserve">
          <source>NewReader returns a new Reader reading from r, which is assumed to have the given size in bytes.</source>
          <target state="translated">NewReader は、指定されたサイズをバイト単位で持つと仮定して r から読み込んだ新しい Reader を返します。</target>
        </trans-unit>
        <trans-unit id="0a237744e6cd622e08bcaadcb57e9896c2c1bd36" translate="yes" xml:space="preserve">
          <source>NewReader returns a new Reader reading from r.</source>
          <target state="translated">NewReaderは、rから読み込んだ新しいReaderを返します。</target>
        </trans-unit>
        <trans-unit id="8809e71360f0f480fd09d2bb6c73d758eb20bf24" translate="yes" xml:space="preserve">
          <source>NewReader returns a new Reader reading from s. It is similar to bytes.NewBufferString but more efficient and read-only.</source>
          <target state="translated">これは bytes.NewBufferString に似ていますが、より効率的で読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="4b591a6aa8b2fa42d203301d41858890dc4a8ba3" translate="yes" xml:space="preserve">
          <source>NewReader returns a new Reader that reads from r.</source>
          <target state="translated">NewReaderは、rから読み込む新しいReaderを返します。</target>
        </trans-unit>
        <trans-unit id="c08939cbf0fe51e296c0a2ccf3a3311832697807" translate="yes" xml:space="preserve">
          <source>NewReader returns a new Reader whose buffer has the default size.</source>
          <target state="translated">NewReaderは、デフォルトのサイズのバッファを持つ新しいReaderを返します。</target>
        </trans-unit>
        <trans-unit id="ab008cb6047aabfffe29520f5a1d9f6947d1bb37" translate="yes" xml:space="preserve">
          <source>NewReader returns a quoted-printable reader, decoding from r.</source>
          <target state="translated">NewReaderは、rからデコードして、引用符で印刷可能なリーダーを返します。</target>
        </trans-unit>
        <trans-unit id="15423ba5dc90eb7ca320aa86b1e4769688d373ee" translate="yes" xml:space="preserve">
          <source>NewReader returns an io.Reader which decompresses bzip2 data from r. If r does not also implement io.ByteReader, the decompressor may read more data than necessary from r.</source>
          <target state="translated">r が io.ByteReader も実装していない場合、デコンプレッサーは必要以上に多くのデータを r から読み込む可能性がある。</target>
        </trans-unit>
        <trans-unit id="ceca3110c418c227d4c22c9ca1803e30b1fbc6a9" translate="yes" xml:space="preserve">
          <source>NewReaderDict is like NewReader but initializes the reader with a preset dictionary. The returned Reader behaves as if the uncompressed data stream started with the given dictionary, which has already been read. NewReaderDict is typically used to read data compressed by NewWriterDict.</source>
          <target state="translated">NewReaderDictはNewReaderと似ていますが、あらかじめ設定された辞書でリーダーを初期化します。返されたReaderは、非圧縮データストリームが与えられた辞書で開始したかのように振る舞い、すでに読み込まれています。NewReaderDictは、通常、NewWriterDictによって圧縮されたデータを読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="15dcb5ef9b327e52dad13c8a81c8c78369449efa" translate="yes" xml:space="preserve">
          <source>NewReaderDict is like NewReader but uses a preset dictionary. NewReaderDict ignores the dictionary if the compressed data does not refer to it. If the compressed data refers to a different dictionary, NewReaderDict returns ErrDictionary.</source>
          <target state="translated">NewReaderDict は NewReader と似ていますが、あらかじめ設定された辞書を使用します。NewReaderDict は、圧縮データが辞書を参照していない場合、その辞書を無視します。圧縮されたデータが別の辞書を参照している場合、NewReaderDict は ErrDictionary を返します。</target>
        </trans-unit>
        <trans-unit id="62226d4a3a7ef180876e33ca9f9e3e5dd9d4d275" translate="yes" xml:space="preserve">
          <source>NewReaderSize returns a new Reader whose buffer has at least the specified size. If the argument io.Reader is already a Reader with large enough size, it returns the underlying Reader.</source>
          <target state="translated">NewReaderSize は、指定されたサイズ以上のバッファを持つ新しい Reader を返します。引数の io.Reader が既に十分な大きさの Reader である場合は、その下の Reader を返します。</target>
        </trans-unit>
        <trans-unit id="9a90b37d52d4387ba6d3b8a70e9b4fe0675a973d" translate="yes" xml:space="preserve">
          <source>NewRecorder returns an initialized ResponseRecorder.</source>
          <target state="translated">NewRecorder は、初期化された ResponseRecorder を返します。</target>
        </trans-unit>
        <trans-unit id="cc38b91034f7148cfc66856688fcf7b15792b799" translate="yes" xml:space="preserve">
          <source>NewReplacer</source>
          <target state="translated">NewReplacer</target>
        </trans-unit>
        <trans-unit id="98fb98214a91e4f9ae6ab220237b228d86508a63" translate="yes" xml:space="preserve">
          <source>NewReplacer panics if given an odd number of arguments.</source>
          <target state="translated">NewReplacer は奇数の引数を与えられるとパニックになります。</target>
        </trans-unit>
        <trans-unit id="2061a29533176cb14bbeea4aaacbdde390807809" translate="yes" xml:space="preserve">
          <source>NewReplacer returns a new Replacer from a list of old, new string pairs. Replacements are performed in the order they appear in the target string, without overlapping matches. The old string comparisons are done in argument order.</source>
          <target state="translated">NewReplacer は、古い文字列と新しい文字列のペアのリストから新しいリプレッサーを返します。置換は、マッチが重ならないように、ターゲット文字列に現れた順に実行されます。古い文字列の比較は、引数の順番で行われます。</target>
        </trans-unit>
        <trans-unit id="06ae50f5cf1308acbe8676644fb3a80e68b35dfc" translate="yes" xml:space="preserve">
          <source>NewRequest panics on error for ease of use in testing, where a panic is acceptable.</source>
          <target state="translated">NewRequestでは、テストで使いやすいようにエラー時にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="dbad5b531961f7dd8c542979ba9a9f6fb56fe9e3" translate="yes" xml:space="preserve">
          <source>NewRequest returns a new incoming server Request, suitable for passing to an http.Handler for testing.</source>
          <target state="translated">NewRequest は、テストのために http.Handler に渡すのに適した新しい受信サーバリクエストを返します。</target>
        </trans-unit>
        <trans-unit id="5c6d605363051e92ce514815fc8e9cdd4cb00b63" translate="yes" xml:space="preserve">
          <source>NewRequest wraps NewRequestWithContext using the background context.</source>
          <target state="translated">NewRequestは背景コンテキストを使ってNewRequestWithContextをラップします。</target>
        </trans-unit>
        <trans-unit id="9035fed12b576aa1b44e2c5e5447b9c7c51d7382" translate="yes" xml:space="preserve">
          <source>NewRequestWithContext returns a Request suitable for use with Client.Do or Transport.RoundTrip. To create a request for use with testing a Server Handler, either use the NewRequest function in the net/http/httptest package, use ReadRequest, or manually update the Request fields. For an outgoing client request, the context controls the entire lifetime of a request and its response: obtaining a connection, sending the request, and reading the response headers and body. See the Request type's documentation for the difference between inbound and outbound request fields.</source>
          <target state="translated">NewRequestWithContextは、Client.DoやTransport.RoundTripで使用するのに適したリクエストを返します。サーバーハンドラをテストするために使用するリクエストを作成するには、 net/http/httptest パッケージの NewRequest 関数を使用するか、ReadRequest を使用するか、Request フィールドを手動で更新します。送信クライアントのリクエストに対しては、コンテキストはリクエストとそのレスポンスの全ライフサイクルを制御します:接続の取得、リクエストの送信、レスポンスヘッダと本文の読み込み。インバウンドとアウトバウンドのリクエストフィールドの違いについては、リクエストタイプのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c9af43cdfcafd0e3590f3e143e4db860b3e1b49" translate="yes" xml:space="preserve">
          <source>NewRequestWithContext returns a new Request given a method, URL, and optional body.</source>
          <target state="translated">NewRequestWithContextは、メソッド、URL、オプションのボディを指定して新しいRequestを返します。</target>
        </trans-unit>
        <trans-unit id="6032a09b3acaf432867b7a2e2a1165faa7e1e7a1" translate="yes" xml:space="preserve">
          <source>NewScanner returns a new Scanner to read from r. The split function defaults to ScanLines.</source>
          <target state="translated">NewScanner は、r から読み込む新しい Scanner を返します。</target>
        </trans-unit>
        <trans-unit id="95df7c8275be1758c09804f6f255a61f60fde088" translate="yes" xml:space="preserve">
          <source>NewScope creates a new scope nested in the outer scope.</source>
          <target state="translated">NewScope は、外部スコープにネストした新しいスコープを作成します。</target>
        </trans-unit>
        <trans-unit id="80fe301e9f5c51453bef4cd9884ae93f5be56853" translate="yes" xml:space="preserve">
          <source>NewScope returns a new, empty scope contained in the given parent scope, if any. The comment is for debugging only.</source>
          <target state="translated">NewScope は、与えられた親スコープがあれば、その親スコープに含まれる新しい空のスコープを返します。コメントはデバッグ専用です。</target>
        </trans-unit>
        <trans-unit id="11c7ae4097aa2447e01ff30db2236f8b8bdd3d07" translate="yes" xml:space="preserve">
          <source>NewSectionReader returns a SectionReader that reads from r starting at offset off and stops with EOF after n bytes.</source>
          <target state="translated">NewSectionReader は、オフセットオフで開始する r から読み込み、n バイト後に EOF で停止する SectionReader を返します。</target>
        </trans-unit>
        <trans-unit id="92cc00b8df6d155a718390d6b132a73074091695" translate="yes" xml:space="preserve">
          <source>NewServeMux allocates and returns a new ServeMux.</source>
          <target state="translated">NewServeMuxは新しいServeMuxを割り当てて返します。</target>
        </trans-unit>
        <trans-unit id="f4c25e90df416fbb8a0117d35fe5407fe24aa713" translate="yes" xml:space="preserve">
          <source>NewServer returns a new Server.</source>
          <target state="translated">NewServerは新しいServerを返します。</target>
        </trans-unit>
        <trans-unit id="babde56071601a12e116397bafca814c40fa7cd4" translate="yes" xml:space="preserve">
          <source>NewServer starts and returns a new Server. The caller should call Close when finished, to shut it down.</source>
          <target state="translated">NewServerが起動し、新しいServerを返します。呼び出し元は、終了したらCloseをコールしてシャットダウンしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c2a60c8cf74ea37683e9a87d1c42a435ef059ce9" translate="yes" xml:space="preserve">
          <source>NewServerCodec returns a new rpc.ServerCodec using JSON-RPC on conn.</source>
          <target state="translated">NewServerCodecは、conn上でJSON-RPCを使用して新しいrpc.ServerCodecを返します。</target>
        </trans-unit>
        <trans-unit id="8ce930cf303061e4c3d16d518dfb921dd3f19755" translate="yes" xml:space="preserve">
          <source>NewServerConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="translated">NewServerConn は、Go の初期の HTTP 実装の成果物です。これは低レベルで古く、Goの現在のHTTPスタックでは使われていません。Go 1 の前に削除しておくべきでした。</target>
        </trans-unit>
        <trans-unit id="af189f332f7b93936d5df009ddc216614f2c215d" translate="yes" xml:space="preserve">
          <source>NewSignature returns a new function type for the given receiver, parameters, and results, either of which may be nil. If variadic is set, the function is variadic, it must have at least one parameter, and the last parameter must be of unnamed slice type.</source>
          <target state="translated">NewSignature は、与えられたレシーバ、パラメータ、および結果のいずれかが nil である場合に、新しい関数型を返します。variadic が設定されている場合、関数は variadic であり、少なくとも 1 つのパラメータを持っていなければならず、最後のパラメータは無名のスライス型でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f456531de00193a99678056eea0c8fcdbfa6dfa5" translate="yes" xml:space="preserve">
          <source>NewSingleHostReverseProxy returns a new ReverseProxy that routes URLs to the scheme, host, and base path provided in target. If the target's path is &quot;/base&quot; and the incoming request was for &quot;/dir&quot;, the target request will be for /base/dir. NewSingleHostReverseProxy does not rewrite the Host header. To rewrite Host headers, use ReverseProxy directly with a custom Director policy.</source>
          <target state="translated">NewSingleHostReverseProxy は、target で指定したスキーム、ホスト、およびベースパスに URL をルーティングする新しい ReverseProxy を返します。ターゲットのパスが &quot;/base&quot; で、着信リクエストが &quot;/dir&quot; の場合、ターゲットのリクエストは /base/dir になります。NewSingleHostReverseProxyはホストヘッダを書き換えません。Hostヘッダを書き換えるには、カスタムDirectorポリシーでReverseProxyを直接使用します。</target>
        </trans-unit>
        <trans-unit id="881af40d9181550600eb2130180e0aa0b7ef4fc9" translate="yes" xml:space="preserve">
          <source>NewSlice returns a new slice type for the given element type.</source>
          <target state="translated">NewSliceは、指定された要素タイプの新しいスライスタイプを返します。</target>
        </trans-unit>
        <trans-unit id="e721e99b1b2d7da11daa968d62a8bde773167ca1" translate="yes" xml:space="preserve">
          <source>NewSource returns a new pseudo-random Source seeded with the given value. Unlike the default Source used by top-level functions, this source is not safe for concurrent use by multiple goroutines.</source>
          <target state="translated">NewSource は、指定された値でシードされた新しい擬似ランダムソースを返します。トップレベル関数で使用されるデフォルトのソースとは異なり、このソースは複数のゴロチンが同時に使用しても安全ではありません。</target>
        </trans-unit>
        <trans-unit id="2632cf950aa513ee1017bf4dcbadbfbcd59a77fb" translate="yes" xml:space="preserve">
          <source>NewStruct returns a new struct with the given fields and corresponding field tags. If a field with index i has a tag, tags[i] must be that tag, but len(tags) may be only as long as required to hold the tag with the largest index i. Consequently, if no field has a tag, tags may be nil.</source>
          <target state="translated">NewStructは、与えられたフィールドとそれに対応するフィールドタグを持つ新しい構造体を返します。インデックスiを持つフィールドにタグがある場合、tags[i]はそのタグでなければなりませんが、len(tags)は最大のインデックスiを持つタグを保持するために必要な長さだけの長さになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="103ea95c3f50f8126d8830a74f99ac0e3f79bcc5" translate="yes" xml:space="preserve">
          <source>NewSyscallError returns, as an error, a new SyscallError with the given system call name and error details. As a convenience, if err is nil, NewSyscallError returns nil.</source>
          <target state="translated">NewSyscallError は、エラーとして、指定されたシステムコール名とエラーの詳細を持つ新しい SyscallError を返します。便宜上、 err が nil の場合、NewSyscallError は nil を返します。</target>
        </trans-unit>
        <trans-unit id="15af8e116827b7526d8d125b743d53ce97e9ccf0" translate="yes" xml:space="preserve">
          <source>NewTLSServer</source>
          <target state="translated">NewTLSServer</target>
        </trans-unit>
        <trans-unit id="ee9c0929ee87d66c85d071ce6743847eebd27e1d" translate="yes" xml:space="preserve">
          <source>NewTLSServer starts and returns a new Server using TLS. The caller should call Close when finished, to shut it down.</source>
          <target state="translated">NewTLSServer は、TLS を使用して新しい Server を起動して返します。呼び出し元は、終了したらCloseをコールしてシャットダウンしなければなりません。</target>
        </trans-unit>
        <trans-unit id="00d18b3ba661f69ed9cfe9015dd706b999fa00de" translate="yes" xml:space="preserve">
          <source>NewTable decodes the Go symbol table (the &quot;.gosymtab&quot; section in ELF), returning an in-memory representation. Starting with Go 1.3, the Go symbol table no longer includes symbol data.</source>
          <target state="translated">NewTable は、囲碁シンボルテーブル (ELF の &quot;.gosymtab&quot; セクション)をデコードして、インメモリ表現を返します。Go 1.3以降、Goシンボルテーブルにはシンボルデータが含まれなくなりました。</target>
        </trans-unit>
        <trans-unit id="6c3faf897ce3b4d9467485319643370fa9199652" translate="yes" xml:space="preserve">
          <source>NewTask creates a task instance with the type taskType and returns it along with a Context that carries the task. If the input context contains a task, the new task is its subtask.</source>
          <target state="translated">NewTask は taskType 型のタスクインスタンスを作成し、タスクを運ぶコンテキストと共にそれを返します。入力コンテキストにタスクが含まれている場合、新しいタスクはそのサブタスクとなります。</target>
        </trans-unit>
        <trans-unit id="b8fb5e998a5bfa39f457a0e00d00ff8fbdd42ef8" translate="yes" xml:space="preserve">
          <source>NewTicker</source>
          <target state="translated">NewTicker</target>
        </trans-unit>
        <trans-unit id="b035640e964a55296a2efb5506fa864ce9c9bfff" translate="yes" xml:space="preserve">
          <source>NewTicker returns a new Ticker containing a channel that will send the time with a period specified by the duration argument. It adjusts the intervals or drops ticks to make up for slow receivers. The duration d must be greater than zero; if not, NewTicker will panic. Stop the ticker to release associated resources.</source>
          <target state="translated">NewTickerは、引数durationで指定した周期で時刻を送信するチャンネルを含む新しいTickerを返します。遅い受信者のために間隔を調整したり、目盛りを下げたりします。duration d はゼロよりも大きくなければなりません。ティッカーを停止して、関連するリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="bf6547887c37f917a009906b59fe98e227a67450" translate="yes" xml:space="preserve">
          <source>NewTimer creates a new Timer that will send the current time on its channel after at least duration d.</source>
          <target state="translated">NewTimer は、そのチャンネルに現在の時刻を送信する新しいタイマーを作成します。</target>
        </trans-unit>
        <trans-unit id="09aa7464c6b6cfad4c77e4bd499188c3746a2702" translate="yes" xml:space="preserve">
          <source>NewTokenDecoder creates a new XML parser using an underlying token stream.</source>
          <target state="translated">NewTokenDecoder は、基礎となるトークンストリームを使用して新しい XML パーサーを作成します。</target>
        </trans-unit>
        <trans-unit id="4a23d472e6b06cb6e963edf429927add90a46a91" translate="yes" xml:space="preserve">
          <source>NewTripleDESCipher</source>
          <target state="translated">NewTripleDESCipher</target>
        </trans-unit>
        <trans-unit id="84af04213903c43ab9d1e733d66e68af85c238b7" translate="yes" xml:space="preserve">
          <source>NewTripleDESCipher creates and returns a new cipher.Block.</source>
          <target state="translated">NewTripleDESCipher は、新しい cipher.Block を作成して返します。</target>
        </trans-unit>
        <trans-unit id="f40b69134a3f0736deea2eaa2750678b0c5b55ae" translate="yes" xml:space="preserve">
          <source>NewTuple returns a new tuple for the given variables.</source>
          <target state="translated">NewTupleは、与えられた変数の新しいタプルを返します。</target>
        </trans-unit>
        <trans-unit id="c765721cc8a5281c315a4053b16ddc74c0799a82" translate="yes" xml:space="preserve">
          <source>NewTypeName returns a new type name denoting the given typ. The remaining arguments set the attributes found with all Objects.</source>
          <target state="translated">NewTypeName は、指定された型を表す新しい型名を返します。残りの引数は、すべてのオブジェクトで見られる属性を設定します。</target>
        </trans-unit>
        <trans-unit id="389032a37584685bd3442905ff3d707a5dc68c23" translate="yes" xml:space="preserve">
          <source>NewUniform returns a new Uniform image of the given color.</source>
          <target state="translated">NewUniform は、指定した色の新しいユニフォーム画像を返します。</target>
        </trans-unit>
        <trans-unit id="fc82f99da3f381417b3f2ddf213f8678bc887a05" translate="yes" xml:space="preserve">
          <source>NewUnstartedServer returns a new Server but doesn't start it.</source>
          <target state="translated">NewUnstartedServerは新しいサーバーを返しますが、起動しません。</target>
        </trans-unit>
        <trans-unit id="077e4a879a7f7aeb3402f9e60fcfed25d2f462f1" translate="yes" xml:space="preserve">
          <source>NewVar returns a new variable. The arguments set the attributes found with all Objects.</source>
          <target state="translated">NewVar は新しい変数を返します。引数には、すべてのオブジェクトで見つかった属性が設定されます。</target>
        </trans-unit>
        <trans-unit id="931cae5ffd260d5017ab39bc76af1f4af39d3c45" translate="yes" xml:space="preserve">
          <source>NewWriteLogger returns a writer that behaves like w except that it logs (using log.Printf) each write to standard error, printing the prefix and the hexadecimal data written.</source>
          <target state="translated">NewWriteLogger は w のように動作するライタを返しますが、書き込みごとに標準エラーにログを記録し (log.Printf を使用して)、接頭辞と書き込まれた 16 進数のデータを表示します。</target>
        </trans-unit>
        <trans-unit id="32dc084c221b7ac68250900d07e80ef98477176c" translate="yes" xml:space="preserve">
          <source>NewWriter</source>
          <target state="translated">NewWriter</target>
        </trans-unit>
        <trans-unit id="db406b8d211203f1503f7b49dc65e93e6c1d2ac9" translate="yes" xml:space="preserve">
          <source>NewWriter allocates and initializes a new tabwriter.Writer. The parameters are the same as for the Init function.</source>
          <target state="translated">NewWriter は新しい tabwriter.Writer を割り当てて初期化します。パラメータは Init 関数と同じです。</target>
        </trans-unit>
        <trans-unit id="eb99a0a4fd37c15275e7565ffb0b13403d80a96e" translate="yes" xml:space="preserve">
          <source>NewWriter creates a new Writer writing to w.</source>
          <target state="translated">NewWriterは、Wに書き込む新しいWriterを作成します。</target>
        </trans-unit>
        <trans-unit id="3c66bbe4244d139551b9b86abb1f943bea6cca3c" translate="yes" xml:space="preserve">
          <source>NewWriter creates a new Writer. Writes to the returned Writer are compressed and written to w.</source>
          <target state="translated">NewWriterは新しいWriterを作成します。返されたWriterへの書き込みは圧縮されてwに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="6d237dd5c37ca4fbda972f04e6f597bc8e44916c" translate="yes" xml:space="preserve">
          <source>NewWriter creates a new io.WriteCloser. Writes to the returned io.WriteCloser are compressed and written to w. It is the caller's responsibility to call Close on the WriteCloser when finished writing. The number of bits to use for literal codes, litWidth, must be in the range [2,8] and is typically 8. Input bytes must be less than 1&amp;lt;&amp;lt;litWidth.</source>
          <target state="translated">NewWriterは新しいio.WriteCloserを作成します。返されたio.WriteCloserへの書き込みは圧縮され、wに書き込まれます。書き込みが終了したら、WriteCloserでCloseを呼び出すのは呼び出し側の責任です。リテラルコードに使用するビット数litWidthは、[2,8]の範囲内である必要があり、通常は8です。入力バイトは1 &amp;lt;&amp;lt; litWidth未満でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5d8c71239de18e81bb2408f6be3d174f8b53cc5b" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new Writer compressing data at the given level. Following zlib, levels range from 1 (BestSpeed) to 9 (BestCompression); higher levels typically run slower but compress more. Level 0 (NoCompression) does not attempt any compression; it only adds the necessary DEFLATE framing. Level -1 (DefaultCompression) uses the default compression level. Level -2 (HuffmanOnly) will use Huffman compression only, giving a very fast compression for all types of input, but sacrificing considerable compression efficiency.</source>
          <target state="translated">NewWriterは、指定されたレベルでデータを圧縮する新しいWriterを返します。zlib に従って、レベルは 1 (BestSpeed)から 9 (BestCompression)までの範囲になります。レベル 0 (NoCompression)は圧縮を試みず、必要な DEFLATE フレーミングのみを追加します。レベル -1 (DefaultCompression)は、デフォルトの圧縮レベルを使用します。レベル -2 (HuffmanOnly)はハフマン圧縮のみを使用し、すべてのタイプの入力に対して非常に高速な圧縮を行いますが、かなりの圧縮効率を犠牲にします。</target>
        </trans-unit>
        <trans-unit id="77a9ef9463dc28c378543b4ca1ab833768dcb916" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new Writer that writes to w.</source>
          <target state="translated">NewWriterは、wに書き込む新しいWriterを返します。</target>
        </trans-unit>
        <trans-unit id="6ed1faccc6afb2894578d5ce15a1b66df2ed7562" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new Writer whose buffer has the default size.</source>
          <target state="translated">NewWriterは、デフォルトのサイズのバッファを持つ新しいWriterを返します。</target>
        </trans-unit>
        <trans-unit id="28df5b8c07e84a79a10bcd4ad1689f3c9f232d1d" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new Writer writing a zip file to w.</source>
          <target state="translated">NewWriterは、zipファイルをwに書き込んだ新しいWriterを返します。</target>
        </trans-unit>
        <trans-unit id="15d873b5f31a0567bb2f33a96b73193d43330bbf" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new Writer writing to w.</source>
          <target state="translated">NewWriterは、新しいWriterの書き込みをwに返します。</target>
        </trans-unit>
        <trans-unit id="8553cec920a1bbc2b884d29ae54a45cdb28b9a7f" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new Writer. Writes to the returned writer are compressed and written to w.</source>
          <target state="translated">NewWriterは新しいWriterを返します。返されたライターへの書き込みは圧縮されてwに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="41a8b4d0cc45c1f4744d9ed11afc5cc850ba9075" translate="yes" xml:space="preserve">
          <source>NewWriter returns a new multipart Writer with a random boundary, writing to w.</source>
          <target state="translated">NewWriterは、ランダムな境界を持つ新しいマルチパートライターを返します。</target>
        </trans-unit>
        <trans-unit id="ba4df4f4844996231636be43db04ad5d9a575122" translate="yes" xml:space="preserve">
          <source>NewWriterDict is like NewWriter but initializes the new Writer with a preset dictionary. The returned Writer behaves as if the dictionary had been written to it without producing any compressed output. The compressed data written to w can only be decompressed by a Reader initialized with the same dictionary.</source>
          <target state="translated">NewWriterDictはNewWriterと似ていますが、新しいWriterをプリセットの辞書で初期化します。返されたWriterは、圧縮された出力を生成することなく、あたかも辞書が書き込まれたかのように振る舞います。wに書き込まれた圧縮データは、同じ辞書で初期化されたReaderでしか解凍できません。</target>
        </trans-unit>
        <trans-unit id="d66b95134ebabf02390f85e665bafa07e307f028" translate="yes" xml:space="preserve">
          <source>NewWriterLevel is like NewWriter but specifies the compression level instead of assuming DefaultCompression.</source>
          <target state="translated">NewWriterLevelはNewWriterと似ていますが、DefaultCompressionを前提とするのではなく、圧縮レベルを指定します。</target>
        </trans-unit>
        <trans-unit id="2244762bcd986f7cb2bc9adec833aa8f04c34752" translate="yes" xml:space="preserve">
          <source>NewWriterLevelDict is like NewWriterLevel but specifies a dictionary to compress with.</source>
          <target state="translated">NewWriterLevelDictはNewWriterLevelと似ていますが、圧縮する辞書を指定します。</target>
        </trans-unit>
        <trans-unit id="fba4df7d4f867ec10b6be90ace669ea6f21a1c64" translate="yes" xml:space="preserve">
          <source>NewWriterSize returns a new Writer whose buffer has at least the specified size. If the argument io.Writer is already a Writer with large enough size, it returns the underlying Writer.</source>
          <target state="translated">NewWriterSize は、指定されたサイズ以上のバッファを持つ新しいライターを返します。引数の io.Writer が既に十分なサイズを持つライターである場合は、その下にあるライターを返します。</target>
        </trans-unit>
        <trans-unit id="6a8e1967a776dd6bc255e00e323e531b785051db" translate="yes" xml:space="preserve">
          <source>NewYCbCr returns a new YCbCr image with the given bounds and subsample ratio.</source>
          <target state="translated">NewYCbCr は、指定された境界とサブサンプル比を持つ新しい YCbCr 画像を返します。</target>
        </trans-unit>
        <trans-unit id="24448d424137595a3746992f824b6edb3b30eda0" translate="yes" xml:space="preserve">
          <source>NewZipf returns a Zipf variate generator. The generator generates values k &amp;isin; [0, imax] such that P(k) is proportional to (v + k) ** (-s). Requirements: s &amp;gt; 1 and v &amp;gt;= 1.</source>
          <target state="translated">NewZipfは、Zipf変量ジェネレーターを返します。ジェネレーターは、P（k）が（v + k）**（-s）に比例するような値k&amp;isin;[0、imax]を生成します。要件：s&amp;gt; 1およびv&amp;gt; = 1。</target>
        </trans-unit>
        <trans-unit id="7ce32fccbc1a59952ff2a17d5ecf204917f2f0f8" translate="yes" xml:space="preserve">
          <source>Newlines and commas may be included in a quoted-field</source>
          <target state="translated">引用符で囲まれたフィールドには、改行とカンマが含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="680ad9f662c74a9364f8a6a8275f58c7b8082fcd" translate="yes" xml:space="preserve">
          <source>Next advances the map iterator and reports whether there is another entry. It returns false when the iterator is exhausted; subsequent calls to Key, Value, or Next will panic.</source>
          <target state="translated">Next は、マップのイテレータを進め、別のエントリがあるかどうかを報告します。これは、イテレータを使い切ったときに false を返します。</target>
        </trans-unit>
        <trans-unit id="a3886733d4cb9e8e0a30e9e159418bfd55e791d5" translate="yes" xml:space="preserve">
          <source>Next advances to the next entry in the tar archive. The Header.Size determines how many bytes can be read for the next file. Any remaining data in the current file is automatically discarded.</source>
          <target state="translated">Next は tar アーカイブの次のエントリに進みます。Header.Size は、次のファイルに何バイト読み込めるかを決定します。現在のファイルに残っているデータは自動的に破棄されます。</target>
        </trans-unit>
        <trans-unit id="4901308d5dc25a2990110e9739d7a18a2e5ad01b" translate="yes" xml:space="preserve">
          <source>Next prepares the next result row for reading with the Scan method. It returns true on success, or false if there is no next result row or an error happened while preparing it. Err should be consulted to distinguish between the two cases.</source>
          <target state="translated">Nextは、Scanメソッドで読み込むための次の結果行を準備します。成功した場合は真を返し、次の結果行がない場合や準備中にエラーが発生した場合は偽を返します。この2つのケースを区別するためにErrを参照してください。</target>
        </trans-unit>
        <trans-unit id="4b13fef4541a1e8d67cdfed20bd2375d09afaf54" translate="yes" xml:space="preserve">
          <source>Next reads and returns the next Unicode character. It returns EOF at the end of the source. It reports a read error by calling s.Error, if not nil; otherwise it prints an error message to os.Stderr. Next does not update the Scanner's Position field; use Pos() to get the current position.</source>
          <target state="translated">Next は、次の Unicode 文字を読み込んで返します。ソースの最後にEOFを返します。nil でない場合は s.Error を呼び出して読み取りエラーを報告し、そうでない場合は os.Stderr にエラー メッセージを表示します。Next は、スキャナの位置フィールドを更新しません。</target>
        </trans-unit>
        <trans-unit id="f9300d09b7df4ad5d5720f19adfdc038ac61f1df" translate="yes" xml:space="preserve">
          <source>Next reads the next entry from the encoded entry stream. It returns nil, nil when it reaches the end of the section. It returns an error if the current offset is invalid or the data at the offset cannot be decoded as a valid Entry.</source>
          <target state="translated">Nextは、エンコードされたエントリストリームから次のエントリを読み込みます。セクションの最後に到達すると、nil、nilを返します。現在のオフセットが無効な場合や、オフセットのデータが有効なエントリとしてデコードできない場合はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="5e6ab5cae4a8ae2aa846c67f99d971fa518e2e06" translate="yes" xml:space="preserve">
          <source>Next reports whether there are more iterations to execute.</source>
          <target state="translated">Next は、実行するイテレーションがさらにあるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="93f915543eeb533b1a50713e83a0f24c2c27db55" translate="yes" xml:space="preserve">
          <source>Next returns a slice containing the next n bytes from the buffer, advancing the buffer as if the bytes had been returned by Read. If there are fewer than n bytes in the buffer, Next returns the entire buffer. The slice is only valid until the next call to a read or write method.</source>
          <target state="translated">Next は、バッファの次の n バイトを含むスライスを返し、そのバイトが Read によって返されたかのようにバッファを進めます。バッファ内のバイト数が n バイトより少ない場合、Next はバッファ全体を返します。このスライスは、次に読み書きメソッドを呼び出すまで有効です。</target>
        </trans-unit>
        <trans-unit id="c448db08820ee5a2da21a99a2f7ee9ecfecee2a6" translate="yes" xml:space="preserve">
          <source>Next returns frame information for the next caller. If more is false, there are no more callers (the Frame value is valid).</source>
          <target state="translated">Next は、次の呼び出し元のフレーム情報を返します。moreがfalseの場合、それ以上の呼び出し元はありません(Frameの値は有効です)。</target>
        </trans-unit>
        <trans-unit id="330b3e94c1faae753e446839e4e00b09aaa021f5" translate="yes" xml:space="preserve">
          <source>Next returns the next id for a request/response pair.</source>
          <target state="translated">Next はリクエスト/レスポンスのペアの次の ID を返します。</target>
        </trans-unit>
        <trans-unit id="31070c09d9898d8d82df0861c7359cedd6d1bee8" translate="yes" xml:space="preserve">
          <source>Next returns the next list element or nil.</source>
          <target state="translated">Nextは、次のリスト要素またはnilを返します。</target>
        </trans-unit>
        <trans-unit id="835c3bdc06b3af77ee23ce1cd0bc1f932319b6e0" translate="yes" xml:space="preserve">
          <source>Next returns the next ring element. r must not be empty.</source>
          <target state="translated">次は次のリング要素を返します。</target>
        </trans-unit>
        <trans-unit id="3515095d5db1d9b6b3020f18bccf17c7141a06e9" translate="yes" xml:space="preserve">
          <source>Next sets *entry to the next row in this line table and moves to the next row. If there are no more entries and the line table is properly terminated, it returns io.EOF.</source>
          <target state="translated">Nextは、この行テーブルの次の行に*entryをセットし、次の行に移動します。これ以上のエントリがなく、行テーブルが適切に終了した場合は、io.EOFを返します。</target>
        </trans-unit>
        <trans-unit id="59243d78d75adcc23308fcf3c7522b53b0e48d6d" translate="yes" xml:space="preserve">
          <source>NextPart returns the next part in the multipart or an error. When there are no more parts, the error io.EOF is returned.</source>
          <target state="translated">NextPartは、マルチパートの次のパートを返すか、エラーを返します。これ以上のパーツがない場合は、io.EOFというエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="0b0a0e6bb9ba56ca1889244a65d5fa48810d737e" translate="yes" xml:space="preserve">
          <source>NextRawPart returns the next part in the multipart or an error. When there are no more parts, the error io.EOF is returned.</source>
          <target state="translated">NextRawPartは、マルチパートの次のパートを返すか、エラーを返します。これ以上のパーツがない場合は、io.EOFというエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="7fe82d0a11eaa23908a02323edde641d4f84c09e" translate="yes" xml:space="preserve">
          <source>NextResultSet prepares the next result set for reading. It reports whether there is further result sets, or false if there is no further result set or if there is an error advancing to it. The Err method should be consulted to distinguish between the two cases.</source>
          <target state="translated">NextResultSet は、次の結果セットを読み込むための準備をします。次の結果セットがあるかどうかを報告し、次の結果セットがない場合や、結果セットに進む際にエラーが発生した場合は false を報告します。この 2 つのケースを区別するために、Err メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="98468e4766dcce0e39d3ad725e6449c114807ef7" translate="yes" xml:space="preserve">
          <source>Nextafter returns the next representable float64 value after x towards y.</source>
          <target state="translated">Nextafterは、xの次の表現可能なfloat64値をyに向かって返します。</target>
        </trans-unit>
        <trans-unit id="75d1da7ce66cd551626a0d105347dbf7bbebadb0" translate="yes" xml:space="preserve">
          <source>Nextafter32 returns the next representable float32 value after x towards y.</source>
          <target state="translated">Nextafter32は、xの次の表現可能なfloat32の値をyに向かって返します。</target>
        </trans-unit>
        <trans-unit id="f22ed1e707c4376c926b166081941a42b8018a27" translate="yes" xml:space="preserve">
          <source>Nil represents the predeclared value nil.</source>
          <target state="translated">Nil は、事前に宣言された値 nil を表します。</target>
        </trans-unit>
        <trans-unit id="7b09d67cac8107c868d3a3b7af77e77ea7720296" translate="yes" xml:space="preserve">
          <source>NilNode holds the special identifier 'nil' representing an untyped nil constant.</source>
          <target state="translated">NilNode は、型なしの nil 定数を表す特別な識別子 'nil' を保持します。</target>
        </trans-unit>
        <trans-unit id="b524d9a99adffa02a516e6aa0d4d13aac2897fdc" translate="yes" xml:space="preserve">
          <source>NoBody is an io.ReadCloser with no bytes. Read always returns EOF and Close always returns nil. It can be used in an outgoing client request to explicitly signal that a request has zero bytes. An alternative, however, is to simply set Request.Body to nil.</source>
          <target state="translated">NoBodyはバイトなしのio.ReadCloserです。Readは常にEOFを返し、Closeは常にnilを返します。これは、リクエストがゼロバイトであることを明示的に通知するために、送信クライアントのリクエストで使用することができます。しかし、Request.Bodyを単にnilに設定するという方法もあります。</target>
        </trans-unit>
        <trans-unit id="52ef1a3746a958c4a53a19c9d87395684668883e" translate="yes" xml:space="preserve">
          <source>NoGoError is the error used by Import to describe a directory containing no buildable Go source files. (It may still contain test files, files hidden by build tags, and so on.)</source>
          <target state="translated">NoGoErrorは、ビルド可能なGoソースファイルが含まれていないディレクトリを記述するためにImportで使用されるエラーです。(テストファイルやビルドタグで隠されたファイルなどが含まれている可能性があります)。</target>
        </trans-unit>
        <trans-unit id="260f7a8cd4f6938b3cc185a619847cb83d670219" translate="yes" xml:space="preserve">
          <source>Node</source>
          <target state="translated">Node</target>
        </trans-unit>
        <trans-unit id="14b0e62d6fc1422eb757516da0b18c46890cfc16" translate="yes" xml:space="preserve">
          <source>Node formats node in canonical gofmt style and writes the result to dst.</source>
          <target state="translated">ノードは、ノードを正規の gofmt スタイルでフォーマットし、その結果を dst に書き込みます。</target>
        </trans-unit>
        <trans-unit id="da15215d50f0207cc3f3bf867716d8b653cbbf4d" translate="yes" xml:space="preserve">
          <source>NodeType identifies the type of a parse tree node.</source>
          <target state="translated">NodeType は、パース・ツリー・ノードのタイプを識別します。</target>
        </trans-unit>
        <trans-unit id="b2c069378b3bfe6ff1e505ef1691402f0b8b4e2b" translate="yes" xml:space="preserve">
          <source>Non-Go programs that call Go code</source>
          <target state="translated">囲碁コードを呼び出す非囲碁プログラム</target>
        </trans-unit>
        <trans-unit id="902b501103969363a75f55b1d4ea5e8e3aaa9ff5" translate="yes" xml:space="preserve">
          <source>Non-string values can be used in JavaScript contexts. If {{.}} is</source>
          <target state="translated">文字列以外の値は、JavaScript のコンテキストで使用できます。もし{{{.}}が</target>
        </trans-unit>
        <trans-unit id="3d2c97b640a04b4cfaa42b436b4f88eedd1e3354" translate="yes" xml:space="preserve">
          <source>Noop sends the NOOP command to the server. It does nothing but check that the connection to the server is okay.</source>
          <target state="translated">NoopはサーバにNOOPコマンドを送信します。これは何もしませんが、サーバへの接続が正常であることを確認します。</target>
        </trans-unit>
        <trans-unit id="85cca9a9c13590980a1e26da797767deb94d87fd" translate="yes" xml:space="preserve">
          <source>NopCloser returns a ReadCloser with a no-op Close method wrapping the provided Reader r.</source>
          <target state="translated">NopCloserは、提供されたReader rをラップするNo-opのCloseメソッドを持つReadCloserを返します。</target>
        </trans-unit>
        <trans-unit id="7bc360841341e5ff79e2d9db0ccaba1681a641e9" translate="yes" xml:space="preserve">
          <source>NormFloat64 returns a normally distributed float64 in the range -math.MaxFloat64 through +math.MaxFloat64 inclusive, with standard normal distribution (mean = 0, stddev = 1). To produce a different normal distribution, callers can adjust the output using:</source>
          <target state="translated">NormFloat64 は、-math.MaxFloat64 から +math.MaxFloat64 までの範囲の正規分布の float64 を、標準正規分布 (mean=0,stddev=1)で返します。異なる正規分布を生成するために、呼び出し元は出力を調整することができます。</target>
        </trans-unit>
        <trans-unit id="584a03e17a58b140265f4319a3b8d37d0b326573" translate="yes" xml:space="preserve">
          <source>NormFloat64 returns a normally distributed float64 in the range [-math.MaxFloat64, +math.MaxFloat64] with standard normal distribution (mean = 0, stddev = 1) from the default Source. To produce a different normal distribution, callers can adjust the output using:</source>
          <target state="translated">NormFloat64 は、デフォルトのソースから標準正規分布 (mean=0,stddev=1)の [-math.MaxFloat64,+math.MaxFloat64]の範囲で正規分布した float64 を返します。異なる正規分布を生成するには、呼び出し元は、以下のようにして出力を調整することができます。</target>
        </trans-unit>
        <trans-unit id="16ef8f27fb77f3e3923ae623df4ac9f719342330" translate="yes" xml:space="preserve">
          <source>Not all drivers and databases support OUTPUT value parameters.</source>
          <target state="translated">すべてのドライバとデータベースが OUTPUT 値のパラメータをサポートしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="28197ebc86a75fec0d20747340a0a7790f4e6e65" translate="yes" xml:space="preserve">
          <source>Not all methods apply to all kinds of types. Restrictions, if any, are noted in the documentation for each method. Use the Kind method to find out the kind of type before calling kind-specific methods. Calling a method inappropriate to the kind of type causes a run-time panic.</source>
          <target state="translated">すべてのメソッドがすべての種類のタイプに適用されるわけではありません。制限事項がある場合は、各メソッドのドキュメントに記載されています。種類固有のメソッドを呼び出す前に、Kindメソッドを使用して種類を調べてください。タイプの種類に合わないメソッドを呼び出すと、実行時にパニックになります。</target>
        </trans-unit>
        <trans-unit id="aebe464c9e025a8d065addc9b1418e295beb91ab" translate="yes" xml:space="preserve">
          <source>Not all methods apply to all kinds of values. Restrictions, if any, are noted in the documentation for each method. Use the Kind method to find out the kind of value before calling kind-specific methods. Calling a method inappropriate to the kind of type causes a run time panic.</source>
          <target state="translated">すべてのメソッドがすべての種類の値に適用されるわけではありません。制限事項がある場合は、各メソッドのドキュメントに記載されています。種類固有のメソッドを呼び出す前に、Kindメソッドを使用して値の種類を調べてください。種類に不適切なメソッドを呼び出すと、実行時にパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="0ad6482316efeb0367fac0cef294df9931657e21" translate="yes" xml:space="preserve">
          <source>Not sets z = ^x and returns z.</source>
          <target state="translated">Not は z=^x をセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="7742382b9eb1d24a7003bcf20989045729354b55" translate="yes" xml:space="preserve">
          <source>NotFound replies to the request with an HTTP 404 not found error.</source>
          <target state="translated">NotFound は HTTP 404 not found エラーで要求に応答します。</target>
        </trans-unit>
        <trans-unit id="d73243f8dff55155dc23697de39081a99659e339" translate="yes" xml:space="preserve">
          <source>NotFoundHandler</source>
          <target state="translated">NotFoundHandler</target>
        </trans-unit>
        <trans-unit id="4cb94eae88a4f55a499c64d3eb533d60d5f636a3" translate="yes" xml:space="preserve">
          <source>NotFoundHandler returns a simple request handler that replies to each request with a &amp;ldquo;404 page not found&amp;rdquo; reply.</source>
          <target state="translated">NotFoundHandlerは、「404ページが見つかりません」という応答で各要求に応答する単純な要求ハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="fa1f72946015817c3defa6f9ca3e62b13a4cbe23" translate="yes" xml:space="preserve">
          <source>NotNilFilter returns true for field values that are not nil; it returns false otherwise.</source>
          <target state="translated">NotNilFilter は、フィールドの値が nil でない場合は true を返し、そうでない場合は false を返します。</target>
        </trans-unit>
        <trans-unit id="48697afd9134ab8c796d4134241a98bd8c0e1e0e" translate="yes" xml:space="preserve">
          <source>NotNull is a type that implements ValueConverter by disallowing nil values but otherwise delegating to another ValueConverter.</source>
          <target state="translated">NotNullは、nil値を無効にして別のValueConverterに委譲することでValueConverterを実装した型です。</target>
        </trans-unit>
        <trans-unit id="ea5ffd3d5d924f61e0aab5c8328c4565de280e8f" translate="yes" xml:space="preserve">
          <source>Notational convention: Incoming method parameters (including the receiver) are named consistently in the API to clarify their use. Incoming operands are usually named x, y, a, b, and so on, but never z. A parameter specifying the result is named z (typically the receiver).</source>
          <target state="translated">表記規則。着信メソッドのパラメータ (レシーバを含む)は、その使用法を明確にするために、API では一貫して名前が付けられています。結果を指定するパラメータには、z(通常はレシーバ)という名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="08dfc0b4556c0a1e642330802e9a9fdabdeafde7" translate="yes" xml:space="preserve">
          <source>Note that *os.File implements the io.ReadSeeker interface.</source>
          <target state="translated">なお、*os.Fileはio.ReadSeekerインターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="c7438b24f5f10d8ed5111e3a3eeea38cdce805d1" translate="yes" xml:space="preserve">
          <source>Note that DWARF line tables only permit sequential, forward scans. Hence, in the worst case, this takes time linear in the size of the line table. If the caller wishes to do repeated fast PC lookups, it should build an appropriate index of the line table.</source>
          <target state="translated">DWARFのラインテーブルは、順方向のスキャンしか許可されていないことに注意してください。したがって、最悪の場合、これはラインテーブルのサイズに比例した時間がかかる。呼び出し元が繰り返し高速なPCルックアップを行いたい場合は、ラインテーブルの適切なインデックスを構築しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1708406405db2b0b3521a819d371938a3ec0fc07" translate="yes" xml:space="preserve">
          <source>Note that Dir could expose sensitive files and directories. Dir will follow symlinks pointing out of the directory tree, which can be especially dangerous if serving from a directory in which users are able to create arbitrary symlinks. Dir will also allow access to files and directories starting with a period, which could expose sensitive directories like .git or sensitive files like .htpasswd. To exclude files with a leading period, remove the files/directories from the server or create a custom FileSystem implementation.</source>
          <target state="translated">Dir は機密ファイルやディレクトリを公開する可能性があることに注意してください。Dir はディレクトリツリーの外側を指すシンボリックリンクに従いますが、ユーザが任意のシンボリックリンクを作成できるディレクトリからサービスを提供している場合は特に危険です。Dir はまた、ピリオドで始まるファイルやディレクトリへのアクセスを許可します。これは .git のような機密ディレクトリや .htpasswd のような機密ファイルを公開する可能性があります。先頭にピリオドがあるファイルを除外するには、そのファイルやディレクトリをサーバーから削除するか、カスタムの FileSystem 実装を作成してください。</target>
        </trans-unit>
        <trans-unit id="d08c2aea787a35db90158742ee5e75a3c73282a4" translate="yes" xml:space="preserve">
          <source>Note that Dir will allow access to files and directories starting with a period, which could expose sensitive directories like a .git directory or sensitive files like .htpasswd. To exclude files with a leading period, remove the files/directories from the server or create a custom FileSystem implementation.</source>
          <target state="translated">Dir はピリオドで始まるファイルやディレクトリへのアクセスを許可するので、.git ディレクトリや .htpasswd のような機密性の高いファイルを公開してしまう可能性があることに注意しましょう。先頭にピリオドがあるファイルを除外するには、そのファイルやディレクトリをサーバーから削除するか、FileSystem のカスタム実装を作成します。</target>
        </trans-unit>
        <trans-unit id="74976bc5278e7780a62cf9ceb79267a86a939300" translate="yes" xml:space="preserve">
          <source>Note that FIPS 186-3 section 4.6 specifies that the hash should be truncated to the byte-length of the subgroup. This function does not perform that truncation itself.</source>
          <target state="translated">FIPS 186-3の4.6節では、ハッシュはサブグループのバイト長に切り捨てられるべきであると規定されていることに注意してください。この関数はその切り捨て自体は行いません。</target>
        </trans-unit>
        <trans-unit id="bbf97d3b36e492a77bf717cf84e9406daab3263a" translate="yes" xml:space="preserve">
          <source>Note that Init may call err if there is an error in the first character of the file.</source>
          <target state="translated">ファイルの最初の文字にエラーがある場合、Init は err を呼び出すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7a0c39680eb9df4d26108a728fd58d66d7905a72" translate="yes" xml:space="preserve">
          <source>Note that LineContinuations are not allowed. JSStr(&quot;foo\\nbar&quot;) is fine, but JSStr(&quot;foo\\\nbar&quot;) is not.</source>
          <target state="translated">なお、LineContinuations は使えません。JSStr(&quot;foo\\nbar&quot;)は大丈夫だけど、JSStr(&quot;foo\\\nbar&quot;)はダメ。</target>
        </trans-unit>
        <trans-unit id="b706c905f9e49dd39547ae798a12e332969a754b" translate="yes" xml:space="preserve">
          <source>Note that Push and Pop in this interface are for package heap's implementation to call. To add and remove things from the heap, use heap.Push and heap.Pop.</source>
          <target state="translated">このインターフェイスのPushとPopは、パッケージheapの実装が呼び出すためのものであることに注意してください。ヒープから物を追加したり削除したりするには、heap.Pushとheap.Popを使います。</target>
        </trans-unit>
        <trans-unit id="57724cba67b0754543683d705a43db50bcf5c63d" translate="yes" xml:space="preserve">
          <source>Note that both conversions must appear in the same expression, with only the intervening arithmetic between them:</source>
          <target state="translated">両方の変換は,それらの間に介在する算術だけで,同じ式の中に現れなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="00d2f4b507ea636132af470ff7c66414d9db9755" translate="yes" xml:space="preserve">
          <source>Note that calls with a positive delta that occur when the counter is zero must happen before a Wait. Calls with a negative delta, or calls with a positive delta that start when the counter is greater than zero, may happen at any time. Typically this means the calls to Add should execute before the statement creating the goroutine or other event to be waited for. If a WaitGroup is reused to wait for several independent sets of events, new Add calls must happen after all previous Wait calls have returned. See the WaitGroup example.</source>
          <target state="translated">カウンタがゼロのときに発生する正のデルタを持つ呼は、Waitの前に発生しなければならないことに注意してください。負のデルタを持つ呼び出し、またはカウンタがゼロよりも大きいときに開始する正のデルタを持つ呼び出しは、いつでも発生する可能性があります。一般的に、これはAddへの呼び出しがGoroutineや他のイベントの待ち時間を作成するステートメントの前に実行されるべきであることを意味します。WaitGroupがいくつかの独立したイベントを待つために再利用されている場合、新しいAddの呼び出しは、すべての前のWait呼び出しが戻った後に実行されなければなりません。WaitGroupの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="5455acc6a0156c4dfa920acddbd7ebf8cf932467" translate="yes" xml:space="preserve">
          <source>Note that even for ResponseWriters that support Flush, if the client is connected through an HTTP proxy, the buffered data may not reach the client until the response completes.</source>
          <target state="translated">Flush をサポートする ResponseWriters の場合でも、クライアントが HTTP プロキシを介して接続されている場合、バッファリングされたデータは応答が完了するまでクライアントに届かない可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5c3bd0ea640e306f27d50ba34f2f7b783e999786" translate="yes" xml:space="preserve">
          <source>Note that formatting of Go source code changes over time, so tools relying on consistent formatting should execute a specific version of the gofmt binary instead of using this package. That way, the formatting will be stable, and the tools won't need to be recompiled each time gofmt changes.</source>
          <target state="translated">Go ソースコードのフォーマットは時間の経過とともに変化するので、一貫したフォーマットに依存するツールは、このパッケージを使用するのではなく、特定のバージョンの gofmt バイナリを実行する必要があることに注意してください。そうすれば、フォーマットが安定し、gofmt が変更されるたびにツールを再コンパイルする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="e22ab49cba234a39b62136e423150811ceaf9eb2" translate="yes" xml:space="preserve">
          <source>Note that if len(b) == 0 and len(oob) &amp;gt; 0, this function will still read (and discard) 1 byte from the connection.</source>
          <target state="translated">len（b）== 0かつlen（oob）&amp;gt; 0の場合、この関数は接続から1バイトを読み取り（そして破棄し）ます。</target>
        </trans-unit>
        <trans-unit id="1c2f06f3a5255f8d8b8129f0755c03b6610969a5" translate="yes" xml:space="preserve">
          <source>Note that if len(b) == 0 and len(oob) &amp;gt; 0, this function will still write 1 byte to the connection.</source>
          <target state="translated">len（b）== 0かつlen（oob）&amp;gt; 0の場合、この関数は接続に1バイトを書き込むことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6530be365312a7c4f8e32cd5888520ad9f3f1f1d" translate="yes" xml:space="preserve">
          <source>Note that if the session key is too small then it may be possible for an attacker to brute-force it. If they can do that then they can learn whether a random value was used (because it'll be different for the same ciphertext) and thus whether the padding was correct. This defeats the point of this function. Using at least a 16-byte key will protect against this attack.</source>
          <target state="translated">セッションキーが小さすぎる場合、攻撃者がそれをブルートフォースする可能性があることに注意してください。もしそれができれば、ランダムな値が使われていたかどうかを知ることができます (同じ暗号文でも異なる値になるので)。これではこの関数の意味がなくなってしまいます。少なくとも 16 バイトの鍵を使うことで、この攻撃を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="344ecaa4cf851728d938597c41196d419ce8996a" translate="yes" xml:space="preserve">
          <source>Note that in this documentation, referring to an IP address as an IPv4 address or an IPv6 address is a semantic property of the address, not just the length of the byte slice: a 16-byte slice can still be an IPv4 address.</source>
          <target state="translated">このドキュメントでは、IPアドレスをIPv4アドレスまたはIPv6アドレスとして参照することは、バイトスライスの長さだけではなく、アドレスの意味的なプロパティであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a249db9e2c9671edb18dbf9a7216586dc071e0a3" translate="yes" xml:space="preserve">
          <source>Note that it is not possible to use Reset's return value correctly, as there is a race condition between draining the channel and the new timer expiring. Reset should always be invoked on stopped or expired channels, as described above. The return value exists to preserve compatibility with existing programs.</source>
          <target state="translated">チャンネルを排出してから新しいタイマーが期限切れになるまでの間に競合状態が発生するため、Reset の戻り値を正しく使用することはできないことに注意してください。リセットは、上記で説明したように、停止しているチャンネルや期限切れのチャンネルでは常に呼び出されるべきです。この戻り値は、既存のプログラムとの互換性を保つために存在します。</target>
        </trans-unit>
        <trans-unit id="9e389ad8751ed58f2ca67fb14ba2bd798ed9096f" translate="yes" xml:space="preserve">
          <source>Note that multiple subexpressions can be written using the same name, as in (?P&amp;lt;bob&amp;gt;a+)(?P&amp;lt;bob&amp;gt;b+), which declares two subexpressions named &quot;bob&quot;. In this case, SubexpIndex returns the index of the leftmost such subexpression in the regular expression.</source>
          <target state="translated">Note that multiple subexpressions can be written using the same name, as in (?P&amp;lt;bob&amp;gt;a+)(?P&amp;lt;bob&amp;gt;b+), which declares two subexpressions named &quot;bob&quot;. In this case, SubexpIndex returns the index of the leftmost such subexpression in the regular expression.</target>
        </trans-unit>
        <trans-unit id="47adc6d6003c04964db156378f371c69c6920eb2" translate="yes" xml:space="preserve">
          <source>Note that obj.Parent() may be different from the returned scope if the object was inserted into the scope and already had a parent at that time (see Insert). This can only happen for dot-imported objects whose scope is the scope of the package that exported them.</source>
          <target state="translated">オブジェクトがスコープに挿入され、その時点ですでに親が存在していた場合は、obj.Parent()が返されたスコープとは異なる可能性があることに注意してください (「挿入」を参照してください)。これは、ドットインポートされたオブジェクトのスコープが、それらをエクスポートしたパッケージのスコープである場合にのみ起こります。</target>
        </trans-unit>
        <trans-unit id="cbcbc6dbbe1cd946285db0917941f30791e5e34b" translate="yes" xml:space="preserve">
          <source>Note that obj.Parent() may be different from the returned scope if the object was inserted into the scope and already had a parent at that time (see Insert, below). This can only happen for dot-imported objects whose scope is the scope of the package that exported them.</source>
          <target state="translated">オブジェクトがスコープに挿入され、その時点ですでに親を持っていた場合は、obj.Parent()が返されたスコープと異なる可能性があることに注意してください (後述の「挿入」を参照してください)。これは、ドットインポートされたオブジェクトのスコープが、それらをエクスポートしたパッケージのスコープである場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="295b47a82aa942008478736d689df68628de7e25" translate="yes" xml:space="preserve">
          <source>Note that since a pattern ending in a slash names a rooted subtree, the pattern &quot;/&quot; matches all paths not matched by other registered patterns, not just the URL with Path == &quot;/&quot;.</source>
          <target state="translated">スラッシュで終わるパターンは、ルートされたサブツリーに名前を付けるので、パターン &quot;/&quot; は、Path ==&quot;/&quot; の URL だけでなく、他の登録されたパターンにマッチしないすべてのパスにマッチすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5f4e1f66b103f275a7a85fe240ec0793b18c4588" translate="yes" xml:space="preserve">
          <source>Note that the 'x' form is the one used by most other languages and libraries.</source>
          <target state="translated">x' 形式は他のほとんどの言語やライブラリで使用されている形式であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="62af18353b85ece5ad43a8e2791ac7b4ef16a2b9" translate="yes" xml:space="preserve">
          <source>Note that the Go == operator compares not just the time instant but also the Location and the monotonic clock reading. See the documentation for the Time type for a discussion of equality testing for Time values.</source>
          <target state="translated">Go ==演算子は、時刻の瞬間だけでなく、Location と単調時計の読みも比較することに注意してください。Time型の値の等質性テストについては、Time型のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9bc5465e665f7d6206122a236966d74814c47dbc" translate="yes" xml:space="preserve">
          <source>Note that the Go == operator compares not just the time instant but also the Location and the monotonic clock reading. Therefore, Time values should not be used as map or database keys without first guaranteeing that the identical Location has been set for all values, which can be achieved through use of the UTC or Local method, and that the monotonic clock reading has been stripped by setting t = t.Round(0). In general, prefer t.Equal(u) to t == u, since t.Equal uses the most accurate comparison available and correctly handles the case when only one of its arguments has a monotonic clock reading.</source>
          <target state="translated">Go ==演算子は、時刻の瞬間だけでなく、Location と単調時計読み取り値も比較することに注意してください。したがって、すべての値に同一の Location が設定されていること(UTC または Local メソッドを使用することで実現できます)、および t=t.Round(0)を設定することでモノトニック・クロックの読みが取り除かれていることを最初に保証しない限り、Time 値をマップまたはデータベース・キーとして使用すべきではありません。一般的には、t.Equal(u)を t ==u よりも t.Equal(u)の方が良いでしょう。なぜなら、t.Equal は最も正確な比較を使用し、その引数の片方だけが単調なクロック読みを持っている場合を正しく処理できるからです。</target>
        </trans-unit>
        <trans-unit id="f47d1736b65573bc0db0e46ddb437d8586c42dc1" translate="yes" xml:space="preserve">
          <source>Note that the Go runtime writes to standard error for panics and crashes; closing Stderr may cause those messages to go elsewhere, perhaps to a file opened later.</source>
          <target state="translated">Goランタイムはパニックやクラッシュのために標準エラーに書き込むことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7b94d521ccf655c50db2b1ef784ea75e16313781" translate="yes" xml:space="preserve">
          <source>Note that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use RawPath, an optional field which only gets set if the default encoding is different from Path.</source>
          <target state="translated">Pathフィールドはデコードされた形で格納されていることに注意してください。/47%6f%2f は /Go/になります。その結果、Path のどのスラッシュが生の URL のスラッシュで、どのスラッシュが %2f であるかを見分けることができなくなります。この区別が重要になることはほとんどありませんが、重要な場合には、コードは RawPath を使用しなければなりません。これはオプションのフィールドで、デフォルトのエンコーディングが Path と異なる場合にのみ設定されます。</target>
        </trans-unit>
        <trans-unit id="2571b053e2312e837e4fa30b8af829d887a497ae" translate="yes" xml:space="preserve">
          <source>Note that the RFC822, RFC850, and RFC1123 formats should be applied only to local times. Applying them to UTC times will use &quot;UTC&quot; as the time zone abbreviation, while strictly speaking those RFCs require the use of &quot;GMT&quot; in that case. In general RFC1123Z should be used instead of RFC1123 for servers that insist on that format, and RFC3339 should be preferred for new protocols. RFC3339, RFC822, RFC822Z, RFC1123, and RFC1123Z are useful for formatting; when used with time.Parse they do not accept all the time formats permitted by the RFCs and they do accept time formats not formally defined. The RFC3339Nano format removes trailing zeros from the seconds field and thus may not sort correctly once formatted.</source>
          <target state="translated">RFC822、RFC850、RFC1123 のフォーマットは、ローカルタイムにのみ適用されるべきであることに注意してください。UTC 時間に適用すると、タイムゾーンの省略形として &quot;UTC&quot; が使用されますが、厳密に言えば、これらの RFC では &quot;GMT&quot; を使用する必要があります。一般的には、この形式にこだわるサーバにはRFC1123の代わりにRFC1123Zを使うべきであり、新しいプロトコルにはRFC3339を使うべきです。RFC3339、RFC822、RFC822Z、RFC1123、RFC1123Zはフォーマットに便利ですが、time.Parseと一緒に使うと、RFCで許可されているすべての時間フォーマットを受け入れるわけではなく、正式に定義されていない時間フォーマットも受け入れます。RFC3339Nanoフォーマットは、秒フィールドから末尾のゼロを削除するため、一度フォーマットされると正しくソートされない場合があります。</target>
        </trans-unit>
        <trans-unit id="6fb073049f21533864d69200a5feb9b782ae4382" translate="yes" xml:space="preserve">
          <source>Note that the RFC822, RFC850, and RFC1123 formats should be applied only to local times. Applying them to UTC times will use &quot;UTC&quot; as the time zone abbreviation, while strictly speaking those RFCs require the use of &quot;GMT&quot; in that case. In general RFC1123Z should be used instead of RFC1123 for servers that insist on that format, and RFC3339 should be preferred for new protocols. RFC3339, RFC822, RFC822Z, RFC1123, and RFC1123Z are useful for formatting; when used with time.Parse they do not accept all the time formats permitted by the RFCs. The RFC3339Nano format removes trailing zeros from the seconds field and thus may not sort correctly once formatted.</source>
          <target state="translated">RFC822、RFC850、RFC1123 のフォーマットは、ローカルタイムにのみ適用されるべきであることに注意してください。UTC 時間に適用すると、タイムゾーンの省略形として &quot;UTC&quot; が使用されますが、厳密に言えば、これらの RFC では &quot;GMT&quot; を使用する必要があります。一般的には、この形式にこだわるサーバにはRFC1123の代わりにRFC1123Zを使うべきであり、新しいプロトコルにはRFC3339を使うべきです。RFC3339、RFC822、RFC822Z、RFC1123、RFC1123Zはフォーマットに便利ですが、time.Parseと一緒に使うと、RFCで許可されているすべての時間フォーマットを受け入れるわけではありません。RFC3339Nanoフォーマットは、秒フィールドから末尾のゼロを削除するため、一度フォーマットされると正しくソートされない場合があります。</target>
        </trans-unit>
        <trans-unit id="bf45110f19f93211e34437dda6c947478fbddd92" translate="yes" xml:space="preserve">
          <source>Note that the examples in this package assume a Unix system. They may not run on Windows, and they do not run in the Go Playground used by golang.org and godoc.org.</source>
          <target state="translated">本パッケージの例は、Unix システムを前提としていることに注意してください。Windows上では動作しないかもしれませんし、 golang.org や godoc.org が使用している Go Playground 上では動作しません。</target>
        </trans-unit>
        <trans-unit id="b0a81d3e2cb77a7a98d611a9a24358352c170df1" translate="yes" xml:space="preserve">
          <source>Note that the input is still malleable, as new line characters (CR and LF) are still ignored.</source>
          <target state="translated">改行文字(CRとLF)はまだ無視されるので、入力はまだ可鍛性であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="532559dd628d5f97489f0222823fd716d088b914" translate="yes" xml:space="preserve">
          <source>Note that the point at infinity (0, 0) is not considered on the curve, and although it can be returned by Add, Double, ScalarMult, or ScalarBaseMult, it can't be marshaled or unmarshaled, and IsOnCurve will return false for it.</source>
          <target state="translated">また、Add,Double,ScalarMult,ScalarBaseMult で返すことができますが、マーシャリングもアンマーシャリングもできず、IsOnCurve は false を返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cabbff14cb2952c80edb181213c130b459a02692" translate="yes" xml:space="preserve">
          <source>Note that the pointer must point into an allocated object, so it may not be nil.</source>
          <target state="translated">ポインタは確保されたオブジェクトを指す必要があるので、nilではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ee73d643f6fa22eddd036e602800c4d837e9ec70" translate="yes" xml:space="preserve">
          <source>Note that using CGI means starting a new process to handle each request, which is typically less efficient than using a long-running server. This package is intended primarily for compatibility with existing systems.</source>
          <target state="translated">CGI を使うということは、各リクエストを処理するために 新しいプロセスを開始することを意味しますが、これは通常、長時間稼働するサーバを 使うよりも効率が悪いということに注意してください。本パッケージは、主に既存のシステムとの互換性を目的としています。</target>
        </trans-unit>
        <trans-unit id="e229bb3e45eb0475b8c930c1335cc5ff4dab911b" translate="yes" xml:space="preserve">
          <source>Note that whether this function returns an error or not discloses secret information. If an attacker can cause this function to run repeatedly and learn whether each instance returned an error then they can decrypt and forge signatures as if they had the private key. See DecryptPKCS1v15SessionKey for a way of solving this problem.</source>
          <target state="translated">この関数がエラーを返すかどうかは秘密情報を開示することに注意してください。攻撃者がこの関数を繰り返し実行し、各インスタンスがエラーを返したかどうかを知ることができれば、あたかも秘密鍵を持っているかのように復号化して署名を偽造することができます。この問題を解決する方法については DecryptPKCS1v15SessionKey を参照してください。</target>
        </trans-unit>
        <trans-unit id="916171d84342fed453d228a3166add2d096261bc" translate="yes" xml:space="preserve">
          <source>Note: Eval and CheckExpr should not be used instead of running Check to compute types and values, but in addition to Check, as these functions ignore the context in which an expression is used (e.g., an assignment). Thus, top-level untyped constants will return an untyped type rather then the respective context-specific type.</source>
          <target state="translated">注意:EvalとCheckExprは、型と値を計算するためにCheckを実行する代わりに、Checkに加えて使用すべきではありません。したがって、トップレベルの型なし定数は、それぞれのコンテキスト固有の型ではなく型なし型を返します。</target>
        </trans-unit>
        <trans-unit id="bd05f6d0d39a629d554e37dad544b0971bdc2e22" translate="yes" xml:space="preserve">
          <source>Note: Fscan etc. can read one character (rune) past the input they return, which means that a loop calling a scan routine may skip some of the input. This is usually a problem only when there is no space between input values. If the reader provided to Fscan implements ReadRune, that method will be used to read characters. If the reader also implements UnreadRune, that method will be used to save the character and successive calls will not lose data. To attach ReadRune and UnreadRune methods to a reader without that capability, use bufio.NewReader.</source>
          <target state="translated">注意:Fscan などは、返された入力から 1 文字 (ルーン)を読み取ることができますが、これはスキャンルーチンを呼び出すループが入力の一部をスキップする可能性があることを意味します。これは通常、入力値の間にスペースがない場合にのみ問題となります。Fscan に提供されるリーダが ReadRune を実装している場合は、そのメソッドが文字の読み込みに使用されます。また、リーダが UnreadRune を実装している場合は、そのメソッドを使って文字を保存し、連続して呼び出してもデータが失われることはありません。ReadRune と UnreadRune メソッドを実装していないリーダーにアタッチするには、bufio.NewReader.</target>
        </trans-unit>
        <trans-unit id="2262c6082b97775886bda26c19137facc9855b36" translate="yes" xml:space="preserve">
          <source>Note: Since gobs can be stored permanently, it is good design to guarantee the encoding used by a GobEncoder is stable as the software evolves. For instance, it might make sense for GobEncode to include a version number in the encoding.</source>
          <target state="translated">注意:gob は永久に保存することができるので、GobEncoder が使用するエンコーディングがソフトウェアの進化に合わせて安定していることを保証するのは良い設計です。例えば、GobEncode のエンコーディングにバージョン番号を含めることは意味があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a1a8b94ea000b0ee13d1c73b1460cd401f581d14" translate="yes" xml:space="preserve">
          <source>Note: The maximum number of concurrent operations on a File may be limited by the OS or the system. The number should be high, but exceeding it may degrade performance or cause other issues.</source>
          <target state="translated">注:ファイルの同時操作の最大数は、OSやシステムによって制限されている場合があります。数は高いはずですが、それを超えるとパフォーマンスが低下したり、他の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e78b4237e62fef8d0e64dd07f8141dd5b9dd8dd5" translate="yes" xml:space="preserve">
          <source>Note: this method does not generate an RFC 5280 conformant X.509 v2 CRL. To generate a standards compliant CRL, use CreateRevocationList instead.</source>
          <target state="translated">注意:このメソッドは、RFC 5280 準拠の X.509 v2 CRL を生成しません。標準準拠の CRL を生成するには、代わりに CreateRevocationList を使用します。</target>
        </trans-unit>
        <trans-unit id="e27a7e32b7a1bd280289613fd2ddd6c441487040" translate="yes" xml:space="preserve">
          <source>Notice logs a message with severity LOG_NOTICE, ignoring the severity passed to New.</source>
          <target state="translated">Notice は、New に渡された深刻度を無視して、深刻度 LOG_NOTICE でメッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="6c03ee54ad3a51fc92a1d69943e99667847705b6" translate="yes" xml:space="preserve">
          <source>Notify</source>
          <target state="translated">Notify</target>
        </trans-unit>
        <trans-unit id="f32ad9d0db01cf6742ecb4a7f760ed9166d4e428" translate="yes" xml:space="preserve">
          <source>Notify (AllSignals)</source>
          <target state="translated">通知(AllSignals)</target>
        </trans-unit>
        <trans-unit id="ec0a8c1ae8d23b04c5ac40659f605bd7d0769148" translate="yes" xml:space="preserve">
          <source>Notify causes package signal to relay incoming signals to c. If no signals are provided, all incoming signals will be relayed to c. Otherwise, just the provided signals will.</source>
          <target state="translated">信号が提供されていない場合は、すべての受信信号が c に中継されます。</target>
        </trans-unit>
        <trans-unit id="1dd2e9632e1d54f09b183732b58f92622a16dfc8" translate="yes" xml:space="preserve">
          <source>Notify disables the default behavior for a given set of asynchronous signals and instead delivers them over one or more registered channels. Specifically, it applies to the signals SIGHUP, SIGINT, SIGQUIT, SIGABRT, and SIGTERM. It also applies to the job control signals SIGTSTP, SIGTTIN, and SIGTTOU, in which case the system default behavior does not occur. It also applies to some signals that otherwise cause no action: SIGUSR1, SIGUSR2, SIGPIPE, SIGALRM, SIGCHLD, SIGCONT, SIGURG, SIGXCPU, SIGXFSZ, SIGVTALRM, SIGWINCH, SIGIO, SIGPWR, SIGSYS, SIGINFO, SIGTHR, SIGWAITING, SIGLWP, SIGFREEZE, SIGTHAW, SIGLOST, SIGXRES, SIGJVM1, SIGJVM2, and any real time signals used on the system. Note that not all of these signals are available on all systems.</source>
          <target state="translated">Notifyは特定の非同期信号のデフォルトの動作を無効にし、代わりに1つ以上の登録されたチャンネルで信号を配信します。具体的には、シグナルSIGHUP、SIGINT、SIGQUIT、SIGABRT、SIGTERMに適用されます。また、ジョブ制御信号SIGTSTP、SIGTTIN、SIGTTOUにも適用されます。また、そうでなければ何も動作しないいくつかの信号にも適用されます。SIGUSR1、SIGUSR2、SIGPIPE、SIGALRM、SIGCHLD、SIGCONT、SIGURG、SIGXCPU、SIGXFSZ、SIGVTALRM、SIGWINCH、SIGIO、SIGPWR、SIGSYS、SIGINFO、SIGTHR、SIGWAITING、SIGLWP、SIGFREEZE、SIGTHAW、SIGLOST、SIGXRES、SIGJVM1、SIGJVM2、そしてシステム上で使用されている全てのリアルタイムシグナルです。これらのシグナルのすべてがすべてのシステムで利用できるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a03da0ac3a6fe09e0b74b0584dcf52f14832da35" translate="yes" xml:space="preserve">
          <source>Now returns the current local time.</source>
          <target state="translated">現在の現地時間を返します。</target>
        </trans-unit>
        <trans-unit id="12f30fd28d8fbc7bdfb188f1073bae8ad0c81a0a" translate="yes" xml:space="preserve">
          <source>NsPerOp returns the &quot;ns/op&quot; metric.</source>
          <target state="translated">NsPerOpは、&quot;ns/op &quot;メトリックを返す。</target>
        </trans-unit>
        <trans-unit id="e3f04b0789ea5fe434b5bac945daef8d6c790ae0" translate="yes" xml:space="preserve">
          <source>NsecToTimespec takes a number of nanoseconds since the Unix epoch and returns the corresponding Timespec value.</source>
          <target state="translated">NsecToTimespecは、Unixのエポックからのナノ秒数を取り、対応するTimespecの値を返します。</target>
        </trans-unit>
        <trans-unit id="ba97613a512663d90a9d8bf323b048ee6483da36" translate="yes" xml:space="preserve">
          <source>NsecToTimeval takes a number of nanoseconds since the Unix epoch and returns the corresponding Timeval value.</source>
          <target state="translated">NsecToTimevalはUnixエポックからのナノ秒数を取得し、対応するTimeval値を返します。</target>
        </trans-unit>
        <trans-unit id="50a5fe209ccfd051610f95a63741ad7f7b729cb1" translate="yes" xml:space="preserve">
          <source>Null is a type that implements ValueConverter by allowing nil values but otherwise delegating to another ValueConverter.</source>
          <target state="translated">Nullは、nil値を許可し、それ以外の場合は別のValueConverterに委譲することでValueConverterを実装する型です。</target>
        </trans-unit>
        <trans-unit id="98cd8ff39a93a75c21d65e0a235ee463a7bbb829" translate="yes" xml:space="preserve">
          <source>Null returns the JavaScript value &quot;null&quot;.</source>
          <target state="translated">NullはJavaScriptの値 &quot;null &quot;を返します。</target>
        </trans-unit>
        <trans-unit id="6f8b0f41b489cc3f5ce2776f939ca31dc0509085" translate="yes" xml:space="preserve">
          <source>NullBool represents a bool that may be null. NullBool implements the Scanner interface so it can be used as a scan destination, similar to NullString.</source>
          <target state="translated">NullBool は、Null になる可能性のある bool を表します。NullBool は Scanner インターフェースを実装しているので、NullString と同様にスキャン先として使用することができます。</target>
        </trans-unit>
        <trans-unit id="6792a3139e23717e375cad9a592c4bd259439184" translate="yes" xml:space="preserve">
          <source>NullBytes contains bytes representing the DER-encoded ASN.1 NULL type.</source>
          <target state="translated">NullBytesは、DERでエンコードされたASN.1のNULL型を表すバイトを含む。</target>
        </trans-unit>
        <trans-unit id="5f6d3dcfb1e3aa678952637bbe19fdc90b78b127" translate="yes" xml:space="preserve">
          <source>NullFloat64 represents a float64 that may be null. NullFloat64 implements the Scanner interface so it can be used as a scan destination, similar to NullString.</source>
          <target state="translated">NullFloat64 は、Null になる可能性のある float64 を表します。NullFloat64 は、NullString と同様にスキャン先として使用できるように Scanner インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="9e472847699046a5829bc4e4e7c408ab93169a01" translate="yes" xml:space="preserve">
          <source>NullInt32 represents an int32 that may be null. NullInt32 implements the Scanner interface so it can be used as a scan destination, similar to NullString.</source>
          <target state="translated">NullInt32 は、Null になる可能性のある int32 を表します。NullInt32 は、NullString と同様にスキャン先として使用できるように Scanner インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="9129057ccbbeafcc9b65fe6615ea2dfe0d92de58" translate="yes" xml:space="preserve">
          <source>NullInt64 represents an int64 that may be null. NullInt64 implements the Scanner interface so it can be used as a scan destination, similar to NullString.</source>
          <target state="translated">NullInt64 は、Null になる可能性のある int64 を表します。NullInt64 は、NullString と同様にスキャン先として使用できるように Scanner インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="d0dce04dd9159fa0b0caa17ec78453211e1469bd" translate="yes" xml:space="preserve">
          <source>NullRawValue is a RawValue with its Tag set to the ASN.1 NULL type tag (5).</source>
          <target state="translated">NullRawValueは、そのTagがASN.1 NULL型タグ(5)に設定されたRawValueです。</target>
        </trans-unit>
        <trans-unit id="74f3d9e74fdee0a23974ea8f9c10c75b52420438" translate="yes" xml:space="preserve">
          <source>NullString represents a string that may be null. NullString implements the Scanner interface so it can be used as a scan destination:</source>
          <target state="translated">NullString は、Null になる可能性のある文字列を表します。NullString は、スキャン先として使用できるように Scanner インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="764711d7b7a7e05fa628aa8a88164882909b5ea1" translate="yes" xml:space="preserve">
          <source>NullTime represents a time.Time that may be null. NullTime implements the Scanner interface so it can be used as a scan destination, similar to NullString.</source>
          <target state="translated">NullTime は、null である可能性のある time.Time を表します。NullTime は、NullString と同様にスキャン先として使用できるように Scanner インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="f04c9d785121ddad7627d64968a461809b36b14b" translate="yes" xml:space="preserve">
          <source>Nullable reports whether the column may be null. If a driver does not support this property ok will be false.</source>
          <target state="translated">Nullable は、列が NULL である可能性があるかどうかを報告します。ドライバがこのプロパティをサポートしていない場合、okはfalseになります。</target>
        </trans-unit>
        <trans-unit id="b616503fdba110413e1c79f07f22ca93729b1af0" translate="yes" xml:space="preserve">
          <source>Num returns the numerator of x; it may be &amp;lt;= 0. The result is a reference to x's numerator; it may change if a new value is assigned to x, and vice versa. The sign of the numerator corresponds to the sign of x.</source>
          <target state="translated">Numはxの分子を返します。0以下の場合があります。結果はxの分子への参照です。新しい値がxに割り当てられた場合、またはその逆の場合、変更される可能性があります。分子の符号はxの符号に対応します。</target>
        </trans-unit>
        <trans-unit id="49dfb6250d5c5b7065edd1796c9ba60b2981b754" translate="yes" xml:space="preserve">
          <source>Num returns the numerator of x; x must be Int, Float, or Unknown. If x is Unknown, or if it is too large or small to represent as a fraction, the result is Unknown. Otherwise the result is an Int with the same sign as x.</source>
          <target state="translated">Numはxの分子を返します。xはInt、Float、またはUnknownでなければなりません。x が不明の場合、またはそれが大きすぎたり小さすぎたりして分数として表現できない場合、結果は不明となります。それ以外の場合、結果は x と同じ符号の Int となります。</target>
        </trans-unit>
        <trans-unit id="07e8e8142272a14853fc3d4225faf1955a80ec0e" translate="yes" xml:space="preserve">
          <source>NumCPU returns the number of logical CPUs usable by the current process.</source>
          <target state="translated">NumCPUは、現在のプロセスで使用可能な論理CPUの数を返します。</target>
        </trans-unit>
        <trans-unit id="3bdcf0e9793febfba96be526d3f799da8d6c4599" translate="yes" xml:space="preserve">
          <source>NumCgoCall returns the number of cgo calls made by the current process.</source>
          <target state="translated">NumCgoCallは、現在のプロセスが行ったcgoコールの数を返します。</target>
        </trans-unit>
        <trans-unit id="99d769aca95925934bfe7234523a8e266cfa3e86" translate="yes" xml:space="preserve">
          <source>NumChildren returns the number of scopes nested in s.</source>
          <target state="translated">NumChildren は、s で入れ子になっているスコープの数を返します。</target>
        </trans-unit>
        <trans-unit id="7f8d5fa9c98c840bdcabc50036c605aaa61914fa" translate="yes" xml:space="preserve">
          <source>NumEmbeddeds returns the number of embedded types in interface t.</source>
          <target state="translated">NumEmbeddedsは、インターフェースtの埋め込み型の数を返します。</target>
        </trans-unit>
        <trans-unit id="48274f29256d93bd977745ada6c383a46661d04c" translate="yes" xml:space="preserve">
          <source>NumError</source>
          <target state="translated">NumError</target>
        </trans-unit>
        <trans-unit id="085f257e02817fe0403777855cdf9b9d714c7182" translate="yes" xml:space="preserve">
          <source>NumExplicitMethods returns the number of explicitly declared methods of interface t.</source>
          <target state="translated">NumExplicitMethodsは、インターフェースtの明示的に宣言されたメソッドの数を返します。</target>
        </trans-unit>
        <trans-unit id="dc69c4938a12562dfc9db7decbe294fadc96a88a" translate="yes" xml:space="preserve">
          <source>NumField returns the number of fields in the struct v. It panics if v's Kind is not Struct.</source>
          <target state="translated">NumField は構造体 v のフィールドの数を返します。</target>
        </trans-unit>
        <trans-unit id="37d55c8516ca892bb76b586c5b36e164d3bfee83" translate="yes" xml:space="preserve">
          <source>NumFields returns the number of fields in the struct (including blank and embedded fields).</source>
          <target state="translated">NumFieldsは、構造体内のフィールドの数を返します(空白のフィールドおよび埋め込みフィールドを含む)。</target>
        </trans-unit>
        <trans-unit id="67aa508431878c89dfc1facabaf28776d55930aa" translate="yes" xml:space="preserve">
          <source>NumFields returns the number of parameters or struct fields represented by a FieldList.</source>
          <target state="translated">NumFieldsは、FieldListで表されるパラメータまたは構造体フィールドの数を返します。</target>
        </trans-unit>
        <trans-unit id="64877a16861b7f92b7b931c3dd32e6bffe105163" translate="yes" xml:space="preserve">
          <source>NumGoroutine returns the number of goroutines that currently exist.</source>
          <target state="translated">NumGoroutineは、現在存在するゴロチンの数を返します。</target>
        </trans-unit>
        <trans-unit id="20f482d6f3d78d176b8cba126c2420b8ebb6a1e9" translate="yes" xml:space="preserve">
          <source>NumMethod returns the number of exported methods in the value's method set.</source>
          <target state="translated">NumMethodは、値のメソッドセットに含まれるエクスポートされたメソッドの数を返します。</target>
        </trans-unit>
        <trans-unit id="e16da0849c5c39aaf5008c6fb5c0acd6258e7143" translate="yes" xml:space="preserve">
          <source>NumMethods returns the number of explicit methods whose receiver is named type t.</source>
          <target state="translated">NumMethodsは、受信機の名前がt型である明示的なメソッドの数を返します。</target>
        </trans-unit>
        <trans-unit id="efca93e8ccf5085b691b876b60dbb50f530aac0f" translate="yes" xml:space="preserve">
          <source>NumMethods returns the total number of methods of interface t.</source>
          <target state="translated">NumMethodsは、インターフェースtのメソッドの総数を返します。</target>
        </trans-unit>
        <trans-unit id="a0673e2061679abd4029b9bc04ce1dc9f32ef5a9" translate="yes" xml:space="preserve">
          <source>NumMethods returns the total number of methods of interface t. The interface must have been completed.</source>
          <target state="translated">NumMethods は、インターフェース t のメソッドの総数を返します。</target>
        </trans-unit>
        <trans-unit id="f56f8cd32be5e8eed5e5b31f9ccdc038bef949c9" translate="yes" xml:space="preserve">
          <source>NumSubexp returns the number of parenthesized subexpressions in this Regexp.</source>
          <target state="translated">NumSubexpは、このRegexp内の括弧付きの副式の数を返します。</target>
        </trans-unit>
        <trans-unit id="8bd18a7cf0e1d4bc6bca5d9c1e222116af743cd5" translate="yes" xml:space="preserve">
          <source>NumberNode holds a number: signed or unsigned integer, float, or complex. The value is parsed and stored under all the types that can represent the value. This simulates in a small amount of code the behavior of Go's ideal constants.</source>
          <target state="translated">NumberNode は、符号付きまたは符号なしの整数、float、複素数のいずれかの数値を保持します。値は解析され、値を表すことができるすべての型の下に格納されます。これにより、少量のコードでGoの理想定数の動作をシミュレートします。</target>
        </trans-unit>
        <trans-unit id="aebc8ea3b91ff7b79f4c3ee912e30d014d9c0e7c" translate="yes" xml:space="preserve">
          <source>Numbers are translated by reading and writing fixed-size values. A fixed-size value is either a fixed-size arithmetic type (bool, int8, uint8, int16, float32, complex64, ...) or an array or struct containing only fixed-size values.</source>
          <target state="translated">数値は、固定サイズの値を読み書きすることで変換されます。固定サイズの値は、固定サイズの算術型(bool,int8,uint8,int16,float32,complex64,...)か、固定サイズの値だけを含む配列や構造体のいずれかです。</target>
        </trans-unit>
        <trans-unit id="514d0c82a993264caef98a3606fa7dc9d584da1d" translate="yes" xml:space="preserve">
          <source>Numbers fundamental to the encoding.</source>
          <target state="translated">エンコーディングの基本となる数字。</target>
        </trans-unit>
        <trans-unit id="f72c4497b8297399ea538316ed693eb0b0f69dbb" translate="yes" xml:space="preserve">
          <source>Numeric Conversions</source>
          <target state="translated">数値変換</target>
        </trans-unit>
        <trans-unit id="294de652150e65884a04c4fc22af8edbb1682a0b" translate="yes" xml:space="preserve">
          <source>Numeric time zone offsets format as follows:</source>
          <target state="translated">タイムゾーンオフセットの書式は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="42abdd30b855d13cdf926751fede5f671a054974" translate="yes" xml:space="preserve">
          <source>OAEP is parameterised by a hash function that is used as a random oracle. Encryption and decryption of a given message must use the same hash function and sha256.New() is a reasonable choice.</source>
          <target state="translated">OAEP は、ランダムオラクルとして使用されるハッシュ関数によってパラメータ化されています。与えられたメッセージの暗号化と復号化は同じハッシュ関数を使わなければならず、 sha256.New()は合理的な選択です。</target>
        </trans-unit>
        <trans-unit id="7c5f4d9d83e4f742a8c6f7a878b2a58947298d00" translate="yes" xml:space="preserve">
          <source>OAEPOptions is an interface for passing options to OAEP decryption using the crypto.Decrypter interface.</source>
          <target state="translated">OAEPOptions は、crypto.Decrypter インターフェイスを使用して OAEP 復号化にオプションを渡すためのインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="ad8427a11879cfd2d8db1b9e8e8f59a37957814e" translate="yes" xml:space="preserve">
          <source>OCSPResponse returns the stapled OCSP response from the TLS server, if any. (Only valid for client connections.)</source>
          <target state="translated">OCSPResponse は、TLS サーバからのステープルされた OCSP レスポンスを返します。(クライアント接続でのみ有効)。</target>
        </trans-unit>
        <trans-unit id="e8520e97ccf3aeee86e1f8ac2f743514a534e58a" translate="yes" xml:space="preserve">
          <source>OSABI is found in Header.Ident[EI_OSABI] and Header.OSABI.</source>
          <target state="translated">OSABIは、Header.Ident[EI_OSABI]とHeader.OSABIにあります。</target>
        </trans-unit>
        <trans-unit id="68fe95dd58ed02ddd93208f0b1d291299be0c119" translate="yes" xml:space="preserve">
          <source>Obj returns the object denoted by x.f; a *Var for a field selection, and a *Func in all other cases.</source>
          <target state="translated">Objはx.fで表されるオブジェクトを返します。フィールド選択の場合は*Var、それ以外の場合は*Funcです。</target>
        </trans-unit>
        <trans-unit id="9eb16182993cc59927b4da07ba021ca619da9eaa" translate="yes" xml:space="preserve">
          <source>Obj returns the type name for the named type t.</source>
          <target state="translated">Objは、名前付き型tの型名を返します。</target>
        </trans-unit>
        <trans-unit id="ea5997c7d13deb46517727f9e2dc50eb58fb0ac9" translate="yes" xml:space="preserve">
          <source>ObjKind describes what an object represents.</source>
          <target state="translated">ObjKindは、オブジェクトが何を表すかを記述します。</target>
        </trans-unit>
        <trans-unit id="148bd125b03ec79b1e809f1705cff50161dd08f8" translate="yes" xml:space="preserve">
          <source>ObjectOf returns the object denoted by the specified id, or nil if not found.</source>
          <target state="translated">ObjectOf は、指定された id で表されるオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="696fabf5d47e7927b31c4529cb32de76645f9e45" translate="yes" xml:space="preserve">
          <source>ObjectString returns the string form of obj. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">ObjectString は obj の文字列形式を返します。Qualifierは、パッケージレベルのオブジェクトの印刷を制御します。</target>
        </trans-unit>
        <trans-unit id="2a0a0f32e63d21edc60ea1562ca9a173b5386b67" translate="yes" xml:space="preserve">
          <source>Of the asynchronous signals, the SIGHUP signal is sent when a program loses its controlling terminal. The SIGINT signal is sent when the user at the controlling terminal presses the interrupt character, which by default is ^C (Control-C). The SIGQUIT signal is sent when the user at the controlling terminal presses the quit character, which by default is ^\ (Control-Backslash). In general you can cause a program to simply exit by pressing ^C, and you can cause it to exit with a stack dump by pressing ^\.</source>
          <target state="translated">非同期信号のうち、SIGHUP 信号はプログラムが制御端末を失った時に送信されます。SIGINT 信号は、制御端末のユーザが割り込み文字を押した時に送信されます(デフォルトは ^C (Control-C))。SIGQUIT信号は、制御端末のユーザが終了文字を押すと送られます。一般的には、^Cを押すことでプログラムを単に終了させることができ、^を押すことでスタックダンプで終了させることができます。</target>
        </trans-unit>
        <trans-unit id="65a759f4644d298e31d53fd1d1620c7a2eccb79e" translate="yes" xml:space="preserve">
          <source>Offset returns the offset for the given file position p; p must be a valid Pos value in that file. f.Offset(f.Pos(offset)) == offset.</source>
          <target state="translated">Offsetは、指定されたファイル位置pに対するオフセットを返します。</target>
        </trans-unit>
        <trans-unit id="e668fecf796eebcf71860aea79f4acfd32998a26" translate="yes" xml:space="preserve">
          <source>Offsetof returns the offset within the struct of the field represented by x, which must be of the form structValue.field. In other words, it returns the number of bytes between the start of the struct and the start of the field. The return value of Offsetof is a Go constant.</source>
          <target state="translated">Offsetof は、x で表されるフィールドの構造体内のオフセットを返します。言い換えれば、構造体の先頭からフィールドの先頭までのバイト数を返します。Offsetofの戻り値はGo定数です。</target>
        </trans-unit>
        <trans-unit id="0ac54daba3530c56c22c7ab5fd0f77563ce7acd3" translate="yes" xml:space="preserve">
          <source>Often, ascii85-encoded data is wrapped in &amp;lt;~ and ~&amp;gt; symbols. Encode does not add these.</source>
          <target state="translated">多くの場合、ascii85でエンコードされたデータは、&amp;lt;〜および〜&amp;gt;記号で囲まれています。Encodeはこれらを追加しません。</target>
        </trans-unit>
        <trans-unit id="23cc25224e88c84b965606d1525d366853ed4824" translate="yes" xml:space="preserve">
          <source>On AIX, DragonFly BSD, NetBSD, OpenBSD, Plan 9 and Solaris, the MulticastAddrs method of Interface is not implemented.</source>
          <target state="translated">AIX,DragonFly BSD,NetBSD,OpenBSD,Plan 9,Solaris では、Interface の MulticastAddrs メソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="a1d045aa427adecabc2fe461f86a4e36227e3495" translate="yes" xml:space="preserve">
          <source>On ARM, x86-32, and 32-bit MIPS, it is the caller's responsibility to arrange for 64-bit alignment of 64-bit words accessed atomically. The first word in a variable or in an allocated struct, array, or slice can be relied upon to be 64-bit aligned.</source>
          <target state="translated">ARM、x86-32、および32ビットMIPSでは、アトミックにアクセスされる64ビットワードの64ビットアラインメントを手配するのは呼び出し元の責任です。変数内、または割り当てられた構造体、配列、またはスライス内の最初のワードは、64 ビット・アラインメントされているかどうかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="78d4a89f2d2e09c9cf23ea8b902790da4d5ff91d" translate="yes" xml:space="preserve">
          <source>On DragonFly BSD and OpenBSD, listening on the &quot;tcp&quot; and &quot;udp&quot; networks does not listen for both IPv4 and IPv6 connections. This is due to the fact that IPv4 traffic will not be routed to an IPv6 socket - two separate sockets are required if both address families are to be supported. See inet6(4) for details.</source>
          <target state="translated">DragonFly BSD および OpenBSD では、&quot;tcp&quot; および &quot;udp&quot; ネットワークでの listen は、IPv4 と IPv6 の両方の接続を listen しません。これは、IPv4 トラフィックが IPv6 ソケットにルーティングされないという事実に起因しています。詳細は inet6(4)を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc2494255e41ee3a52e5ab617366af15ab263764" translate="yes" xml:space="preserve">
          <source>On JS and NaCl, methods and functions related to Interface are not implemented.</source>
          <target state="translated">JSやNaClでは、Interfaceに関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="192f11c9370338b47035100e9f2d82d3defced91" translate="yes" xml:space="preserve">
          <source>On JS and Plan 9, methods and functions related to IPConn are not implemented.</source>
          <target state="translated">JS および Plan 9 では、IPConn に関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="99ce1e2fb44b89c9c5878b1c6736f5b7ccf5c3c1" translate="yes" xml:space="preserve">
          <source>On JS and Plan 9, methods and functions related to UnixConn and UnixListener are not implemented.</source>
          <target state="translated">JSやPlan9では、UnixConnやUnixListenerに関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="44ade6d9d0e9dc1e5841a92c33c3f4dc6e0db317" translate="yes" xml:space="preserve">
          <source>On JS and Plan 9, the Control, Read and Write methods of syscall.RawConn are not implemented.</source>
          <target state="translated">JSとPlan9では、syscall.RawConnのControl,Read,Writeメソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="523f976c2cabf45b1020d7ffffaa352ae10a88bf" translate="yes" xml:space="preserve">
          <source>On JS and Windows, the File method of TCPConn and TCPListener is not implemented.</source>
          <target state="translated">JSやWindowsでは、TCPConnやTCPListenerのFileメソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="1d4b947349b83f8062406fe052b018a151c0a171" translate="yes" xml:space="preserve">
          <source>On JS and Windows, the FileConn, FileListener and FilePacketConn functions are not implemented.</source>
          <target state="translated">JSやWindowsでは、FileConn、FileListener、FilePacketConn関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="a22fcd32dddc8742d71eeb00fd66a97a307dec2b" translate="yes" xml:space="preserve">
          <source>On JS, NaCl and Plan 9, methods and functions related to IPConn are not implemented.</source>
          <target state="translated">JS、NaCl、Plan9では、IPConnに関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="c330a67c6571f090abbe696684e69b144f23ffce" translate="yes" xml:space="preserve">
          <source>On JS, NaCl and Plan 9, methods and functions related to UnixConn and UnixListener are not implemented.</source>
          <target state="translated">JS、NaCl、Plan9では、UnixConn、UnixListenerに関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="187bea53a3943264ca3ab448938a9eb5588890ad" translate="yes" xml:space="preserve">
          <source>On JS, NaCl and Plan 9, the Control, Read and Write methods of syscall.RawConn are not implemented.</source>
          <target state="translated">JS,NaCl,Plan 9 では、syscall.RawConn の Control,Read,Write メソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="8af01a3a36621e313c89de20d229f16557b6c642" translate="yes" xml:space="preserve">
          <source>On JS, NaCl and Windows, the File method of TCPConn and TCPListener is not implemented.</source>
          <target state="translated">JS、NaCl、Windowsでは、TCPConn、TCPListenerのFileメソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="c3a3c87314e5ae7220ae61af7b9a4aaad742b9fa" translate="yes" xml:space="preserve">
          <source>On JS, NaCl and Windows, the FileConn, FileListener and FilePacketConn functions are not implemented.</source>
          <target state="translated">JS、NaCl、Windowsでは、FileConn、FileListener、FilePacketConn関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="013710184aedbc65d0484c3d6e19b6b05cf4d0a4" translate="yes" xml:space="preserve">
          <source>On JS, methods and functions related to Interface are not implemented.</source>
          <target state="translated">JSでは、Interfaceに関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="50eadbc0d323969884ecf9cc0009e49c34ea969b" translate="yes" xml:space="preserve">
          <source>On JS, methods and functions related to UDPConn are not implemented.</source>
          <target state="translated">JS上では、UDPConnに関連するメソッドや関数は実装されていません。</target>
        </trans-unit>
        <trans-unit id="a1c684d38068da43548a6ff99a071652823f3627" translate="yes" xml:space="preserve">
          <source>On Linux and FreeBSD, Reader uses getrandom(2) if available, /dev/urandom otherwise. On OpenBSD, Reader uses getentropy(2). On other Unix-like systems, Reader reads from /dev/urandom. On Windows systems, Reader uses the CryptGenRandom API. On Wasm, Reader uses the Web Crypto API.</source>
          <target state="translated">Linux と FreeBSD では、Reader は getrandom(2)があれば使用し、それ以外の場合は /dev/urandom を使用します。OpenBSD では、Reader は getentropy(2)を使用します。その他の Unix 系システムでは、/dev/urandom から読み込みます。Windows システムでは、Reader は CryptGenRandom API を使用します。Wasm では、Web Crypto API を使用しています。</target>
        </trans-unit>
        <trans-unit id="c8ff5cc97c5ee66d154a1695c234ed4080927ad5" translate="yes" xml:space="preserve">
          <source>On NaCl and Plan 9, the ReadMsgUDP and WriteMsgUDP methods of UDPConn are not implemented.</source>
          <target state="translated">NaClおよびPlan9では、UDPConnのReadMsgUDPおよびWriteMsgUDPメソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="87e667c5ede44ae5764673fc28b292659a0f5bd8" translate="yes" xml:space="preserve">
          <source>On NaCl, the ListenMulticastUDP function is not implemented.</source>
          <target state="translated">NaClではListenMulticastUDP機能は実装されていません。</target>
        </trans-unit>
        <trans-unit id="a330e696a92e2d53090bac7c262b179695141719" translate="yes" xml:space="preserve">
          <source>On POSIX systems Gid contains a decimal number representing the group ID.</source>
          <target state="translated">POSIX システムでは、Gid にはグループ ID を表す 10 進数が含まれます。</target>
        </trans-unit>
        <trans-unit id="2703d3b45f73f82bdf72e3fead14e53678acde02" translate="yes" xml:space="preserve">
          <source>On Plan 9, signals have type syscall.Note, which is a string. Calling Notify with a syscall.Note will cause that value to be sent on the channel when that string is posted as a note.</source>
          <target state="translated">プラン9では、シグナルは文字列であるsyscall.Noteというタイプを持っています。syscall.NoteでNotifyを呼び出すと、その文字列がノートとして投稿されたときに、その値がチャネル上に送信されます。</target>
        </trans-unit>
        <trans-unit id="3750cfdfc10eef27e8dec499f3310e013386e383" translate="yes" xml:space="preserve">
          <source>On Plan 9, the ReadMsgUDP and WriteMsgUDP methods of UDPConn are not implemented.</source>
          <target state="translated">プラン9では、UDPConn の ReadMsgUDP メソッドと WriteMsgUDP メソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="4b29c33c1c929a09e8c06f8cea419c82c9628ed0" translate="yes" xml:space="preserve">
          <source>On Plan 9, the mode's permission bits, ModeAppend, ModeExclusive, and ModeTemporary are used.</source>
          <target state="translated">プラン9では、モードの許可ビットであるModeAppend、ModeExclusive、ModeTemporaryを使用する。</target>
        </trans-unit>
        <trans-unit id="f8763fb392ab0ac0ea38c3b25946a7a1236134b7" translate="yes" xml:space="preserve">
          <source>On Plan 9, the resolver always accesses /net/cs and /net/dns.</source>
          <target state="translated">プラン9では、リゾルバは常に/net/csと/net/dnsにアクセスします。</target>
        </trans-unit>
        <trans-unit id="a1fe82f792d7b21f9ebd6296c1d86e735f0892e1" translate="yes" xml:space="preserve">
          <source>On Solaris, it returns one of the logical network interfaces sharing the logical data link; for more precision use InterfaceByName.</source>
          <target state="translated">Solaris では、論理データリンクを共有する論理ネットワークインタフェースの 1 つを返します。</target>
        </trans-unit>
        <trans-unit id="d85518513a854a5111d381e48be350b2e36728b6" translate="yes" xml:space="preserve">
          <source>On UNIX systems the environment variables SSL_CERT_FILE and SSL_CERT_DIR can be used to override the system default locations for the SSL certificate file and SSL certificate files directory, respectively.</source>
          <target state="translated">UNIX システムでは、環境変数 SSL_CERT_FILE と SSL_CERT_DIR を使って、それぞれ SSL 証明書ファイルと SSL 証明書ファイルのディレクトリのデフォルトの場所を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="3ae424a5db2afedd39c9f3dac84609afa2ca2005" translate="yes" xml:space="preserve">
          <source>On Unix systems other than macOS the environment variables SSL_CERT_FILE and SSL_CERT_DIR can be used to override the system default locations for the SSL certificate file and SSL certificate files directory, respectively. The latter can be a colon-separated list.</source>
          <target state="translated">macOS以外のUnixシステムでは、環境変数SSL_CERT_FILEとSSL_CERT_DIRを使って、それぞれSSL証明書ファイルとSSL証明書ファイルのディレクトリのシステムのデフォルトの場所を上書きすることができます。後者はコロンで区切られたリストにすることができます。</target>
        </trans-unit>
        <trans-unit id="88f58a825e10f84944f638859f6290d9816daa64" translate="yes" xml:space="preserve">
          <source>On Unix systems, FindProcess always succeeds and returns a Process for the given pid, regardless of whether the process exists.</source>
          <target state="translated">Unixシステムでは、プロセスが存在するかどうかに関わらず、 FindProcessは常に成功し、指定されたpidのプロセスを返します。</target>
        </trans-unit>
        <trans-unit id="98e3b9345fcee9a653cd9ea250ff090f5fd5a0bd" translate="yes" xml:space="preserve">
          <source>On Unix systems, it returns $TMPDIR if non-empty, else /tmp. On Windows, it uses GetTempPath, returning the first non-empty value from %TMP%, %TEMP%, %USERPROFILE%, or the Windows directory. On Plan 9, it returns /tmp.</source>
          <target state="translated">Unix システムでは、空でなければ $TMPDIR を返し、そうでなければ /tmp を返します。Windows では、GetTempPath を使用して、%TMP%、%TEMP%、%USERPROFILE%、または Windows ディレクトリから最初の空でない値を返します。プラン 9 では、/tmp を返します。</target>
        </trans-unit>
        <trans-unit id="d3d0aebf8d4f43a79a7a617076bea555037789dd" translate="yes" xml:space="preserve">
          <source>On Unix systems, it returns $XDG_CACHE_HOME as specified by &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&lt;/a&gt; if non-empty, else $HOME/.cache. On Darwin, it returns $HOME/Library/Caches. On Windows, it returns %LocalAppData%. On Plan 9, it returns $home/lib/cache.</source>
          <target state="translated">On Unix systems, it returns $XDG_CACHE_HOME as specified by &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&lt;/a&gt; if non-empty, else $HOME/.cache. On Darwin, it returns $HOME/Library/Caches. On Windows, it returns %LocalAppData%. On Plan 9, it returns $home/lib/cache.</target>
        </trans-unit>
        <trans-unit id="a069a183e2963c2a249b77ad664c6a016ed84b52" translate="yes" xml:space="preserve">
          <source>On Unix systems, it returns $XDG_CACHE_HOME as specified by &lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&lt;/a&gt; if non-empty, else $HOME/.cache. On Darwin, it returns $HOME/Library/Caches. On Windows, it returns %LocalAppData%. On Plan 9, it returns $home/lib/cache.</source>
          <target state="translated">Unixシステムでは、&lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https：&lt;/a&gt; //standards.freedesktop.org/basedir-spec/basedir-spec-latest.html 空でない場合は$ HOME / .cacheで指定された$ XDG_CACHE_HOMEを返します。ダーウィンでは、$ HOME / Library / Cachesを返します。Windowsでは、％LocalAppData％を返します。Plan 9では、$ home / lib / cacheを返します。</target>
        </trans-unit>
        <trans-unit id="c4f447ec06dd9cfc46159127ffa2dcc14e35ae88" translate="yes" xml:space="preserve">
          <source>On Unix systems, it returns $XDG_CONFIG_HOME as specified by &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&lt;/a&gt; if non-empty, else $HOME/.config. On Darwin, it returns $HOME/Library/Application Support. On Windows, it returns %AppData%. On Plan 9, it returns $home/lib.</source>
          <target state="translated">On Unix systems, it returns $XDG_CONFIG_HOME as specified by &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&lt;/a&gt; if non-empty, else $HOME/.config. On Darwin, it returns $HOME/Library/Application Support. On Windows, it returns %AppData%. On Plan 9, it returns $home/lib.</target>
        </trans-unit>
        <trans-unit id="1807151e52b0b2b36b5236bbf2d0ef14a9ec1abc" translate="yes" xml:space="preserve">
          <source>On Unix systems, it returns $XDG_CONFIG_HOME as specified by &lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&lt;/a&gt; if non-empty, else $HOME/.config. On Darwin, it returns $HOME/Library/Application Support. On Windows, it returns %AppData%. On Plan 9, it returns $home/lib.</source>
          <target state="translated">Unixシステムでは、&lt;a href=&quot;https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;https：&lt;/a&gt; //standards.freedesktop.org/basedir-spec/basedir-spec-latest.html 空でない場合は$ HOME / .configで指定された$ XDG_CONFIG_HOMEを返します。ダーウィンでは、$ HOME / Library / Application Supportを返します。Windowsでは、％AppData％を返します。Plan 9では、$ home / libを返します。</target>
        </trans-unit>
        <trans-unit id="2893f193d590bc3c2b7840d64034a29f26c7240a" translate="yes" xml:space="preserve">
          <source>On Unix systems, the resolver has two options for resolving names. It can use a pure Go resolver that sends DNS requests directly to the servers listed in /etc/resolv.conf, or it can use a cgo-based resolver that calls C library routines such as getaddrinfo and getnameinfo.</source>
          <target state="translated">Unix システムでは、リゾルバには名前を解決するための 2 つのオプションがあります。etc/resolv.conf に記載されているサーバに DNS リクエストを直接送信する純粋な Go リゾルバを使用するか、getaddrinfo や getnameinfo などの C ライブラリルーチンを呼び出す cgo ベースのリゾルバを使用することができます。</target>
        </trans-unit>
        <trans-unit id="3c7408069288e442b0e9334096b1f9423749a2cb" translate="yes" xml:space="preserve">
          <source>On Unix, including macOS, it returns the $HOME environment variable. On Windows, it returns %USERPROFILE%. On Plan 9, it returns the $home environment variable.</source>
          <target state="translated">macOS を含む Unix では、環境変数 $HOME を返します。Windows では、%USERPROFILE% を返します。プラン 9 では、$HOME 環境変数を返します。</target>
        </trans-unit>
        <trans-unit id="5c4d1d5958d138a86f133f67425aa5377e82d717" translate="yes" xml:space="preserve">
          <source>On Unix, the mode's permission bits, ModeSetuid, ModeSetgid, and ModeSticky are used.</source>
          <target state="translated">Unixでは、モードのパーミッションビットであるModeSetuid、ModeSetgid、ModeStickyが使用されます。</target>
        </trans-unit>
        <trans-unit id="b3748b447fc18cd33fa72cfd10ff7a8e4c810a41" translate="yes" xml:space="preserve">
          <source>On Unix-like systems, StartCPUProfile does not work by default for Go code built with -buildmode=c-archive or -buildmode=c-shared. StartCPUProfile relies on the SIGPROF signal, but that signal will be delivered to the main program's SIGPROF signal handler (if any) not to the one used by Go. To make it work, call os/signal.Notify for syscall.SIGPROF, but note that doing so may break any profiling being done by the main program.</source>
          <target state="translated">Unix ライクなシステムでは、-buildmode=c-archive または -buildmode=c-shared でビルドされた Go コードでは、StartCPUProfile はデフォルトでは動作しません。StartCPUProfile は SIGPROF シグナルに依存していますが、そのシグナルはメインプログラムの SIGPROF シグナルハンドラ(もしあれば)に送られ、Go が使用するシグナルハンドラには送られません。これを動作させるには、syscall.SIGPROF のために os/signal.Notify を呼び出しますが、そうすることでメインプログラムで行われているプロファイリングが壊れる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="38c48a0935e355c448766738061267dd6c7374a5" translate="yes" xml:space="preserve">
          <source>On Windows a ^C (Control-C) or ^BREAK (Control-Break) normally cause the program to exit. If Notify is called for os.Interrupt, ^C or ^BREAK will cause os.Interrupt to be sent on the channel, and the program will not exit. If Reset is called, or Stop is called on all channels passed to Notify, then the default behavior will be restored.</source>
          <target state="translated">Windows では、^C (Control-C)または ^BREAK (Control-Break)は通常プログラムを終了させます。もし os.Interrupt に対して Notify が呼び出された場合、 ^C または ^BREAK は os.Interrupt をチャンネルに送信し、プログラムは終了しません。Reset が呼ばれた場合、または Notify に渡された全てのチャンネルで Stop が呼ばれた場合、デフォルトの動作に戻ります。</target>
        </trans-unit>
        <trans-unit id="84cb9183f88acab7f0a3e8615676023c95cfe1f4" translate="yes" xml:space="preserve">
          <source>On Windows or Plan 9, Chown always returns the syscall.EWINDOWS or EPLAN9 error, wrapped in *PathError.</source>
          <target state="translated">Windows または Plan 9 では、Chown は常に *PathError に包まれた syscall.EWINDOWS または EPLAN9 エラーを返します。</target>
        </trans-unit>
        <trans-unit id="f5c6a1e271d70b402bf7e630854ac58bbcf34f9f" translate="yes" xml:space="preserve">
          <source>On Windows, MIME types are extracted from the registry.</source>
          <target state="translated">Windows では、MIME タイプはレジストリから抽出されます。</target>
        </trans-unit>
        <trans-unit id="5350be8357b453f05f4ce5a07cf3bf1dba9318a4" translate="yes" xml:space="preserve">
          <source>On Windows, escaping is disabled. Instead, '\\' is treated as path separator.</source>
          <target state="translated">Windowsでは、エスケープは無効になっている。その代わり、「\」はパスセパレータとして扱われる。</target>
        </trans-unit>
        <trans-unit id="a41bed9c4201556ec574f1ac26f677457e930cdc" translate="yes" xml:space="preserve">
          <source>On Windows, it always returns the syscall.EWINDOWS error, wrapped in *PathError.</source>
          <target state="translated">Windows では、常に *PathError に包まれた syscall.EWINDOWS エラーを返します。</target>
        </trans-unit>
        <trans-unit id="6f31a978cb1a7e83893ce791c5aa32ff7ac495fa" translate="yes" xml:space="preserve">
          <source>On Windows, it returns -1.</source>
          <target state="translated">Windows の場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="6a02f4fe5f583e59f31f6cbc5e10b9216b10a0af" translate="yes" xml:space="preserve">
          <source>On Windows, it returns syscall.EWINDOWS. See the os/user package for a possible alternative.</source>
          <target state="translated">Windows では syscall.EWINDOWS を返します。代替案は os/user パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3a0f41f0df73942f4fecfe70a64ca015408110" translate="yes" xml:space="preserve">
          <source>On Windows, methods and functions related to UnixConn and UnixListener don't work for &quot;unixgram&quot; and &quot;unixpacket&quot;.</source>
          <target state="translated">Windowsでは、UnixConnやUnixListenerに関連するメソッドや関数が、&quot;unixgram &quot;や &quot;unixpacket &quot;では動作しません。</target>
        </trans-unit>
        <trans-unit id="bd2981a73df24a936314bf6d1873afd69dc8adde" translate="yes" xml:space="preserve">
          <source>On Windows, only the 0200 bit (owner writable) of mode is used; it controls whether the file's read-only attribute is set or cleared. The other bits are currently unused. For compatibility with Go 1.12 and earlier, use a non-zero mode. Use mode 0400 for a read-only file and 0600 for a readable+writable file.</source>
          <target state="translated">Windowsでは、modeの0200ビット(所有者が書き込み可能)のみが使用されます。他のビットは現在使用されていません。Go 1.12 以前との互換性のためには、0 以外のモードを使用してください。読み取り専用のファイルにはモード 0400 を、読み取り可能+書き込み可能なファイルには 0600 を使用します。</target>
        </trans-unit>
        <trans-unit id="2612d030cdd95b20b0743477158be3874169bfe3" translate="yes" xml:space="preserve">
          <source>On Windows, processes receive the whole command line as a single string and do their own parsing. Command combines and quotes Args into a command line string with an algorithm compatible with applications using CommandLineToArgvW (which is the most common way). Notable exceptions are msiexec.exe and cmd.exe (and thus, all batch files), which have a different unquoting algorithm. In these or other similar cases, you can do the quoting yourself and provide the full command line in SysProcAttr.CmdLine, leaving Args empty.</source>
          <target state="translated">Windows では、プロセスはコマンドライン全体を単一の文字列として受け取り、独自の解析を行います。Command は、CommandLineToArgvW (最も一般的な方法)を使用するアプリケーションと互換性のあるアルゴリズムを使用して、Args をコマンドライン文字列に結合し、引用符で囲みます。特筆すべき例外は msiexec.exe と cmd.exe (つまりすべてのバッチファイル)で、これらのファイルでは異なるクォート解除アルゴリズムを使用しています。これらのケースやその他の同様のケースでは、自分でクォートを行い、Args を空にして SysProcAttr.CmdLine で完全なコマンドラインを提供することができます。</target>
        </trans-unit>
        <trans-unit id="0058230d55ce789eb5612e2b93e4da6eea793a83" translate="yes" xml:space="preserve">
          <source>On Windows, the File method of IPConn is not implemented.</source>
          <target state="translated">Windowsでは、IPConnのFileメソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="d755b555a5935f43a3d90e65b76056dcf10027ed" translate="yes" xml:space="preserve">
          <source>On Windows, the File method of UDPConn is not implemented.</source>
          <target state="translated">Windows では、UDPConn の File メソッドは実装されていません。</target>
        </trans-unit>
        <trans-unit id="f31f810d1a4482b639a8bee446be568ce053ee4a" translate="yes" xml:space="preserve">
          <source>On Windows, the Write method of syscall.RawConn does not integrate with the runtime's network poller. It cannot wait for the connection to become writeable, and does not respect deadlines. If the user-provided callback returns false, the Write method will fail immediately.</source>
          <target state="translated">Windowsでは、syscall.RawConnのWriteメソッドはランタイムのネットワークポーラーと統合されていません。接続が書き込み可能になるのを待つことができず、期限を尊重しません。ユーザが提供するコールバックが false を返すと、Write メソッドは直ちに失敗します。</target>
        </trans-unit>
        <trans-unit id="8b8fbd99e87c243a50d7f3fe8f96df26bcf452aa" translate="yes" xml:space="preserve">
          <source>On Windows, the resolver always uses C library functions, such as GetAddrInfo and DnsQuery.</source>
          <target state="translated">Windows では、リゾルバは常に GetAddrInfo や DnsQuery などの C ライブラリ関数を使用します。</target>
        </trans-unit>
        <trans-unit id="bf70d5852ec76636f3807a9db0f77a9465a35084" translate="yes" xml:space="preserve">
          <source>On all platforms, the traceback function is invoked when a call from Go to C to Go requests a stack trace. On linux/amd64, linux/ppc64le, and freebsd/amd64, the traceback function is also invoked when a signal is received by a thread that is executing a cgo call. The traceback function should not make assumptions about when it is called, as future versions of Go may make additional calls.</source>
          <target state="translated">すべてのプラットフォームにおいて、トレースバック関数は、Go から C to Go への呼び出しがスタックトレースを要求したときに呼び出されます。linux/amd64、linux/ppc64le、freebsd/amd64 では、cgo 呼び出しを実行しているスレッドがシグナルを受信したときにも traceback 関数が呼び出されます。将来のバージョンの Go は追加の呼び出しを行うかもしれないので、トレースバック関数はいつ呼び出されたかを仮定してはいけません。</target>
        </trans-unit>
        <trans-unit id="d6c40e8d8a1cb9c0f6c9d4c03dcd550161059582" translate="yes" xml:space="preserve">
          <source>On certain machines, for certain types of connections, this is optimized into an OS-specific batch write operation (such as &quot;writev&quot;).</source>
          <target state="translated">特定のマシンでは、特定のタイプの接続に対して、これはOS固有のバッチ書き込み操作(「writev」など)に最適化されます。</target>
        </trans-unit>
        <trans-unit id="c77b73816658f653733e14c2986094f012e8e513" translate="yes" xml:space="preserve">
          <source>On error, any Response can be ignored. A non-nil Response with a non-nil error only occurs when CheckRedirect fails, and even then the returned Response.Body is already closed.</source>
          <target state="translated">エラー時には、任意のレスポンスを無視することができます。非nilエラーのResponseは、CheckRedirectが失敗した場合にのみ発生し、その場合でも返されたResponse.Bodyはすでに閉じられています。</target>
        </trans-unit>
        <trans-unit id="13e02db1965a04d36b6a5db4b5d676787f23298f" translate="yes" xml:space="preserve">
          <source>On every POSIX platform, reads from the &quot;ip4&quot; network using the ReadFrom or ReadFromIP method might not return a complete IPv4 packet, including its header, even if there is space available. This can occur even in cases where Read or ReadMsgIP could return a complete packet. For this reason, it is recommended that you do not use these methods if it is important to receive a full packet.</source>
          <target state="translated">すべてのPOSIXプラットフォームで、ReadFromまたはReadFromIPメソッドを使用した「ip4」ネットワークからの読み取りは、空き容量があっても、ヘッダを含む完全なIPv4パケットを返さない場合がある。これは、ReadFromまたはReadMsgIPが完全なパケットを返すことができた場合でも発生する可能性があります。このため、完全なパケットを受信することが重要な場合は、これらのメソッドを使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3c23c9c1e399b461c8c28a7144948fd27bdb61bb" translate="yes" xml:space="preserve">
          <source>On many Linux systems, /etc/ssl/cert.pem will contain the system wide set of root CAs in a format suitable for this function.</source>
          <target state="translated">多くのLinuxシステムでは、/etc/ssl/cert.pemはシステム全体のルートCAのセットをこの関数に適した形式で格納します。</target>
        </trans-unit>
        <trans-unit id="ca1a155daae24035a913fb63720c32b8136a4b91" translate="yes" xml:space="preserve">
          <source>On non-Linux ARM, the 64-bit functions use instructions unavailable before the ARMv6k core.</source>
          <target state="translated">非Linux ARMでは、64ビット関数はARMv6kコアの前に使用できない命令を使用します。</target>
        </trans-unit>
        <trans-unit id="1357e885cae46582ed3a6ff4521cb427fb02bd90" translate="yes" xml:space="preserve">
          <source>On some systems the monotonic clock will stop if the computer goes to sleep. On such a system, t.Sub(u) may not accurately reflect the actual time that passed between t and u.</source>
          <target state="translated">システムによっては、コンピュータがスリープ状態になると単調時計が停止します。そのようなシステムでは、t.Sub(u)は t と u の間を通過した実際の時間を正確に反映していない場合があります。</target>
        </trans-unit>
        <trans-unit id="66c05351e7478785f8f137c02ebcef5c050b614d" translate="yes" xml:space="preserve">
          <source>On the other hand, a free list maintained as part of a short-lived object is not a suitable use for a Pool, since the overhead does not amortize well in that scenario. It is more efficient to have such objects implement their own free list.</source>
          <target state="translated">一方、短命のオブジェクトの一部として維持されているフリーリストは、そのシナリオではオーバーヘッドがうまく償却されないため、プールには適していません。そのようなオブジェクトに独自のフリーリストを実装させる方が効率的です。</target>
        </trans-unit>
        <trans-unit id="389950f4460ec73a72ec78dde5ba3b73d32c35ab" translate="yes" xml:space="preserve">
          <source>On x86-32, the 64-bit functions use instructions unavailable before the Pentium MMX.</source>
          <target state="translated">x86-32では、64ビットの関数はPentium MMX以前では利用できなかった命令を利用しています。</target>
        </trans-unit>
        <trans-unit id="d9c768782ea8653d485fb3b7f5aba21cb2ca7bf3" translate="yes" xml:space="preserve">
          <source>Once</source>
          <target state="translated">Once</target>
        </trans-unit>
        <trans-unit id="d104fb961a8c78122b2f62dee3ef43757b182f86" translate="yes" xml:space="preserve">
          <source>Once Shutdown has been called on a server, it may not be reused; future calls to methods such as Serve will return ErrServerClosed.</source>
          <target state="translated">一度サーバ上でShutdownが呼び出されると、それを再利用することはできません;Serveのようなメソッドの呼び出しはErrServerClosedを返します。</target>
        </trans-unit>
        <trans-unit id="843e914dc9185fa382b5f053202ed67b742aeba3" translate="yes" xml:space="preserve">
          <source>Once f returns and err is nil, the Conn will continue to be usable until Conn.Close is called.</source>
          <target state="translated">f が戻り err が nil になると、Conn.Close が呼び出されるまで Conn は使用可能な状態が続きます。</target>
        </trans-unit>
        <trans-unit id="0c1d5279ebafd6b3423844bd2276728e8cc52fbd" translate="yes" xml:space="preserve">
          <source>Once is an object that will perform exactly one action.</source>
          <target state="translated">Onceは、1つのアクションを正確に実行するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="7227e9a075a44764452a578989f4cc83bbee577f" translate="yes" xml:space="preserve">
          <source>Once parsed, a template may be executed safely in parallel, although if parallel executions share a Writer the output may be interleaved.</source>
          <target state="translated">一度解析されると、テンプレートは安全に並列に実行できますが、並列実行がライタを共有している場合は、出力がインターリーブされることがあります。</target>
        </trans-unit>
        <trans-unit id="0281f78c03be67c1f2a3acafcdaa61c0cdc49c86" translate="yes" xml:space="preserve">
          <source>One or two minus signs may be used; they are equivalent. The last form is not permitted for boolean flags because the meaning of the command</source>
          <target state="translated">1つまたは2つのマイナス記号を使用することができます。最後の形式はブール値フラグには許可されていません。</target>
        </trans-unit>
        <trans-unit id="69577389d4c08755d52755f4e17faf59267dd621" translate="yes" xml:space="preserve">
          <source>OneByteReader returns a Reader that implements each non-empty Read by reading one byte from r.</source>
          <target state="translated">OneByteReaderは、空ではない各Readを実装したReaderを返します。</target>
        </trans-unit>
        <trans-unit id="99aaec6fa8f2d0bdb9045bd117dd6c71497e9a74" translate="yes" xml:space="preserve">
          <source>OnesCount</source>
          <target state="translated">OnesCount</target>
        </trans-unit>
        <trans-unit id="433a6ff8b314e9c198548ae00ba6fcecd1eee098" translate="yes" xml:space="preserve">
          <source>OnesCount returns the number of one bits (&quot;population count&quot;) in x.</source>
          <target state="translated">OnesCountは、xの1ビット数(「人口数」)を返します。</target>
        </trans-unit>
        <trans-unit id="c380e0ef7643051dda1d040515dc580f28605550" translate="yes" xml:space="preserve">
          <source>OnesCount16</source>
          <target state="translated">OnesCount16</target>
        </trans-unit>
        <trans-unit id="0999fcac9097d75e1573b11d0ffd816e52cf5855" translate="yes" xml:space="preserve">
          <source>OnesCount16 returns the number of one bits (&quot;population count&quot;) in x.</source>
          <target state="translated">OnesCount16は、xの1ビット数(「人口カウント」)を返します。</target>
        </trans-unit>
        <trans-unit id="11a58244491d18b07e203d19e0549197d7478647" translate="yes" xml:space="preserve">
          <source>OnesCount32</source>
          <target state="translated">OnesCount32</target>
        </trans-unit>
        <trans-unit id="5f0db4433d3c95e463c6c2a1eadf16ccd1d19ea6" translate="yes" xml:space="preserve">
          <source>OnesCount32 returns the number of one bits (&quot;population count&quot;) in x.</source>
          <target state="translated">OnesCount32は、xの1ビット数(「人口カウント」)を返します。</target>
        </trans-unit>
        <trans-unit id="f8bf5b0787d28b51c08417f12183c3a8050bbddf" translate="yes" xml:space="preserve">
          <source>OnesCount64</source>
          <target state="translated">OnesCount64</target>
        </trans-unit>
        <trans-unit id="f4aecef923e1b31d46e0ebe7b85940e72b4c07f4" translate="yes" xml:space="preserve">
          <source>OnesCount64 returns the number of one bits (&quot;population count&quot;) in x.</source>
          <target state="translated">OnesCount64は、xの1ビット(「人口カウント」)の数を返します。</target>
        </trans-unit>
        <trans-unit id="d82a2ce39ad5e48e37815f9f28a1215fe50fea08" translate="yes" xml:space="preserve">
          <source>OnesCount8</source>
          <target state="translated">OnesCount8</target>
        </trans-unit>
        <trans-unit id="cb4e53f8fd7e82903aefdeda2e2114c5812e0d65" translate="yes" xml:space="preserve">
          <source>OnesCount8 returns the number of one bits (&quot;population count&quot;) in x.</source>
          <target state="translated">OnesCount8 は、x の 1 ビット(「人口カウント」)の数を返します。</target>
        </trans-unit>
        <trans-unit id="e2a07178400736bcb7be81ae2feca4dcd008d7f5" translate="yes" xml:space="preserve">
          <source>Only methods that satisfy these criteria will be made available for remote access; other methods will be ignored:</source>
          <target state="translated">これらの基準を満たすメソッドのみがリモートアクセスで利用可能になり、それ以外のメソッドは無視されます。</target>
        </trans-unit>
        <trans-unit id="f19caf46e787ec1b99d851f024d8d32d31c130ae" translate="yes" xml:space="preserve">
          <source>Only one call to Dial is necessary. On write failures, the syslog client will attempt to reconnect to the server and write again.</source>
          <target state="translated">Dialへの呼び出しは1回だけ必要です。書き込みに失敗した場合、syslogクライアントはサーバに再接続して再度書き込みを試みます。</target>
        </trans-unit>
        <trans-unit id="0bb2640773cf0b724d4c0f4b422833704c7b1dde" translate="yes" xml:space="preserve">
          <source>Only some kinds of files support setting a deadline. Calls to SetDeadline for files that do not support deadlines will return ErrNoDeadline. On most systems ordinary files do not support deadlines, but pipes do.</source>
          <target state="translated">締め切りの設定をサポートしているのは、いくつかの種類のファイルだけです。締め切りをサポートしていないファイルの SetDeadline への呼び出しは、ErrNoDeadline を返します。ほとんどのシステムでは、通常のファイルは期限をサポートしていませんが、パイプはサポートしています。</target>
        </trans-unit>
        <trans-unit id="1f2bc4d6c6973cdf7add1d2aa0d072a9bc333db3" translate="yes" xml:space="preserve">
          <source>Only use this function if you require compatibility with an existing cryptosystem that uses non-standard nonce lengths. All other users should use NewGCM, which is faster and more resistant to misuse.</source>
          <target state="translated">この関数は、非標準の非暗号長を使用する既存の暗号システムとの互換性が必要な場合にのみ使用してください。それ以外のすべてのユーザは、より高速で悪用されにくいNewGCMを使用してください。</target>
        </trans-unit>
        <trans-unit id="15128cc4fc0390673cf1d5ff25c809ffa9a2a0a9" translate="yes" xml:space="preserve">
          <source>Only use this function if you require compatibility with an existing cryptosystem that uses non-standard tag lengths. All other users should use NewGCM, which is more resistant to misuse.</source>
          <target state="translated">非標準のタグ長を使用する既存の暗号システムとの互換性が必要な場合にのみ、この関数を使用してください。それ以外のすべてのユーザは、悪用されにくい NewGCM を使用してください。</target>
        </trans-unit>
        <trans-unit id="1b727317ee1d6f8ec7fdb2282449eaeba440af19" translate="yes" xml:space="preserve">
          <source>Op is a Porter-Duff compositing operator.</source>
          <target state="translated">Opはポーターダフの合成演算子です。</target>
        </trans-unit>
        <trans-unit id="5af1dc92a9e2658f3244c1615c860d1105099061" translate="yes" xml:space="preserve">
          <source>OpError is the error type usually returned by functions in the net package. It describes the operation, network type, and address of an error.</source>
          <target state="translated">OpError は、通常 net パッケージ内の関数によって返されるエラータイプです。これは、操作、ネットワークタイプ、エラーのアドレスを記述します。</target>
        </trans-unit>
        <trans-unit id="18f672481765f9d884600846dfaa4fd9da765b39" translate="yes" xml:space="preserve">
          <source>Opaque scans the entire image and reports whether it is fully opaque.</source>
          <target state="translated">不透明は画像全体をスキャンし、完全に不透明かどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="b7443a4b74ca4cfa1bcd5bba9250ca69f1869f28" translate="yes" xml:space="preserve">
          <source>Open implements FileSystem using os.Open, opening files for reading rooted and relative to the directory d.</source>
          <target state="translated">Open は os.Open を使って FileSystem を実装しています。</target>
        </trans-unit>
        <trans-unit id="6171c49e2bc16b1abb139c13c4d94d148a1c46f3" translate="yes" xml:space="preserve">
          <source>Open may just validate its arguments without creating a connection to the database. To verify that the data source name is valid, call Ping.</source>
          <target state="translated">Open はデータベースへの接続を作成せずに、その引数を検証するだけかもしれません。データソース名が有効であることを確認するには、Pingを呼び出します。</target>
        </trans-unit>
        <trans-unit id="5020abe2d6e35be83ee66706a97f7b42a3cce7b0" translate="yes" xml:space="preserve">
          <source>Open opens a Go plugin. If a path has already been opened, then the existing *Plugin is returned. It is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">Openは、囲碁プラグインを開きます。すでにパスが開かれている場合は、既存の *Plugin が返されます。複数のゴローチンが同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="66a147f16950427bc220b36b7335c4430f2e435a" translate="yes" xml:space="preserve">
          <source>Open opens a database specified by its database driver name and a driver-specific data source name, usually consisting of at least a database name and connection information.</source>
          <target state="translated">Openは、データベースドライバ名とドライバ固有のデータソース名で指定されたデータベースを開き、通常は少なくともデータベース名と接続情報で構成されます。</target>
        </trans-unit>
        <trans-unit id="37d7b9b7fb804765c0c890c3a9927f5e792e10c2" translate="yes" xml:space="preserve">
          <source>Open opens and returns the FileHeader's associated File.</source>
          <target state="translated">Open は、FileHeader に関連付けられた File を開いて返します。</target>
        </trans-unit>
        <trans-unit id="9f531c4cd3491cbb25cd300045e949a3c6a2f783" translate="yes" xml:space="preserve">
          <source>Open opens the named file for reading. If successful, methods on the returned file can be used for reading; the associated file descriptor has mode O_RDONLY. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Open は、名前のついたファイルを読み込み用に開きます。成功した場合、返されたファイルのメソッドを読み込みに使用することができます。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="371cc608c2ba1c0990eaf9fb6894bbf2a52158f7" translate="yes" xml:space="preserve">
          <source>Open opens the named file using os.Open and prepares it for use as a Mach-O binary.</source>
          <target state="translated">Open は os.Open を使って名前のついたファイルを開き、Mach-O バイナリとして使用できるように準備します。</target>
        </trans-unit>
        <trans-unit id="7d04ca361fd4f73d2b0f9d528191bbbad4f3caa9" translate="yes" xml:space="preserve">
          <source>Open opens the named file using os.Open and prepares it for use as a PE binary.</source>
          <target state="translated">Open は os.Open を使って名前のついたファイルを開き、PE バイナリとして使用できるように準備します。</target>
        </trans-unit>
        <trans-unit id="401e69358b39b00234c49cca571dfb25656931d2" translate="yes" xml:space="preserve">
          <source>Open opens the named file using os.Open and prepares it for use as a Plan 9 a.out binary.</source>
          <target state="translated">Open は os.Open を使用して名前付きファイルを開き、Plan 9 a.out バイナリとして使用できるように準備します。</target>
        </trans-unit>
        <trans-unit id="9b1194bbc276659f78fdca3adfdc9b10d19c8660" translate="yes" xml:space="preserve">
          <source>Open opens the named file using os.Open and prepares it for use as an ELF binary.</source>
          <target state="translated">Open は os.Open を使って名前のついたファイルを開き、ELF バイナリとして使用できるように準備します。</target>
        </trans-unit>
        <trans-unit id="f50055a1ded1f305ba4233bb037ec0d820624aa9" translate="yes" xml:space="preserve">
          <source>Open returns a ReadCloser that provides access to the File's contents. Multiple files may be read concurrently.</source>
          <target state="translated">Open は、ファイルの内容へのアクセスを提供する ReadCloser を返します。複数のファイルを同時に読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="dc15ea0e79b5a5fd3585bbb7eb793bc7927e0c43" translate="yes" xml:space="preserve">
          <source>Open returns a new ReadSeeker reading the ELF program body.</source>
          <target state="translated">Openは、ELFプログラム本体を読み込んだ新しいReadSeekerを返します。</target>
        </trans-unit>
        <trans-unit id="cb2948f8796f4e20787b4c3d93aa97d5e5dd5298" translate="yes" xml:space="preserve">
          <source>Open returns a new ReadSeeker reading the ELF section. Even if the section is stored compressed in the ELF file, the ReadSeeker reads uncompressed data.</source>
          <target state="translated">Openは、ELFセクションを読み込んだ新しいReadSeekerを返します。セクションがELFファイルに圧縮されて保存されている場合でも、ReadSeekerは圧縮されていないデータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="21b5b726e4f4ade0871cc002a3334fa728428adc" translate="yes" xml:space="preserve">
          <source>Open returns a new ReadSeeker reading the Mach-O section.</source>
          <target state="translated">Openは、マッハオーセクションを読んでいる新しいReadSeekerを返します。</target>
        </trans-unit>
        <trans-unit id="b61efb693d7cf70cb90d5aedf0d5a372c5aa6512" translate="yes" xml:space="preserve">
          <source>Open returns a new ReadSeeker reading the PE section s.</source>
          <target state="translated">Open は、PE セクション s を読み込んだ新しい ReadSeeker を返します。</target>
        </trans-unit>
        <trans-unit id="84fc1af6d68e3cc755958db236fc07677794c372" translate="yes" xml:space="preserve">
          <source>Open returns a new ReadSeeker reading the Plan 9 a.out section.</source>
          <target state="translated">Open は、Plan 9 a.out セクションを読み込んだ新しい ReadSeeker を返します。</target>
        </trans-unit>
        <trans-unit id="387b57706c30c22b6f03a484c6bd4b511d83f9ce" translate="yes" xml:space="preserve">
          <source>Open returns a new ReadSeeker reading the segment.</source>
          <target state="translated">Openは、セグメントを読んでいる新しいReadSeekerを返します。</target>
        </trans-unit>
        <trans-unit id="1007daa5b98f8257c13edf3ea065301dd1ebaf2b" translate="yes" xml:space="preserve">
          <source>OpenDB may just validate its arguments without creating a connection to the database. To verify that the data source name is valid, call Ping.</source>
          <target state="translated">OpenDBは、データベースへの接続を作成せずに引数を検証するだけの場合があります。データソース名が有効であることを確認するには、Pingを呼び出します。</target>
        </trans-unit>
        <trans-unit id="25e1b5a42de4942dfe6b4bfced8324ba7ad01162" translate="yes" xml:space="preserve">
          <source>OpenDB opens a database using a Connector, allowing drivers to bypass a string based data source name.</source>
          <target state="translated">OpenDB は Connector を使用してデータベースを開き、ドライバが文字列ベースのデータソース名をバイパスできるようにします。</target>
        </trans-unit>
        <trans-unit id="02205221603211c0f70a26822c2a5ea1275e3176" translate="yes" xml:space="preserve">
          <source>OpenFat opens the named file using os.Open and prepares it for use as a Mach-O universal binary.</source>
          <target state="translated">OpenFat は os.Open を使って名前のついたファイルを開き、マッハオーのユニバーサルバイナリとして使用できるように準備します。</target>
        </trans-unit>
        <trans-unit id="f89511e6449f4d72c17e5b2730171b3d593b5ed7" translate="yes" xml:space="preserve">
          <source>OpenFile</source>
          <target state="translated">OpenFile</target>
        </trans-unit>
        <trans-unit id="0c82063df1128e3daff7e360a09afecb32d7114a" translate="yes" xml:space="preserve">
          <source>OpenFile (Append)</source>
          <target state="translated">OpenFile (Append)</target>
        </trans-unit>
        <trans-unit id="4fc4a091591f11a5786d39de5a16c7ed7ce1eeab" translate="yes" xml:space="preserve">
          <source>OpenFile is the generalized open call; most users will use Open or Create instead. It opens the named file with specified flag (O_RDONLY etc.). If the file does not exist, and the O_CREATE flag is passed, it is created with mode perm (before umask). If successful, methods on the returned File can be used for I/O. If there is an error, it will be of type *PathError.</source>
          <target state="translated">OpenFile は一般化されたオープンコールです。これは、指定されたフラグ(O_RDONLYなど)で名前のついたファイルを開きます。ファイルが存在せず、O_CREATE フラグが渡された場合、それはモード perm (umask の前)で作成されます。成功した場合、返されたFile上のメソッドは、I/Oのために使用することができます。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="154227f07677e156add449cf112307bf838866a9" translate="yes" xml:space="preserve">
          <source>OpenReader will open the Zip file specified by name and return a ReadCloser.</source>
          <target state="translated">OpenReaderは名前で指定したZipファイルを開き、ReadCloserを返します。</target>
        </trans-unit>
        <trans-unit id="6cbb449ad00bd956208ebf3bc7a9b2a9d9466e94" translate="yes" xml:space="preserve">
          <source>Operating systems provide both a &amp;ldquo;wall clock,&amp;rdquo; which is subject to changes for clock synchronization, and a &amp;ldquo;monotonic clock,&amp;rdquo; which is not. The general rule is that the wall clock is for telling time and the monotonic clock is for measuring time. Rather than split the API, in this package the Time returned by time.Now contains both a wall clock reading and a monotonic clock reading; later time-telling operations use the wall clock reading, but later time-measuring operations, specifically comparisons and subtractions, use the monotonic clock reading.</source>
          <target state="translated">オペレーティングシステムは、クロック同期の変更の影響を受ける「ウォールクロック」と、そうでない「単調クロック」の両方を提供します。原則として、壁掛け時計は時間を伝えるためのものであり、単調時計は時間を測定するためのものです。このパッケージでは、APIを分割するのではなく、time.Nowによって返されるTimeに、壁時計の読み取りと単調な時計の読み取りの両方が含まれています。後の時間測定操作は壁時計の読み取りを使用しますが、後の時間測定操作、特に比較と減算は、単調な時計の読み取りを使用します。</target>
        </trans-unit>
        <trans-unit id="f30cabbd8e785b594ba56b3801fd9d4f1260078a" translate="yes" xml:space="preserve">
          <source>Operations always take pointer arguments (*Float) rather than Float values, and each unique Float value requires its own unique *Float pointer. To &quot;copy&quot; a Float value, an existing (or newly allocated) Float must be set to a new value using the Float.Set method; shallow copies of Floats are not supported and may lead to errors.</source>
          <target state="translated">操作はつねに Float 値ではな く ポ イ ン タ ー引数 (*Float)を取 り 、 それぞれの固有の Float 値には固有の *Float ポ イ ン タ ーが必要です。Float 値を「コピー」するには、既存の(あるいは新たに割り当てられた)Float を Float.Set メソッドを使用して新しい値に設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b1165d6e4bac8282c929350a1919aee2062c5958" translate="yes" xml:space="preserve">
          <source>Operations always take pointer arguments (*Int) rather than Int values, and each unique Int value requires its own unique *Int pointer. To &quot;copy&quot; an Int value, an existing (or newly allocated) Int must be set to a new value using the Int.Set method; shallow copies of Ints are not supported and may lead to errors.</source>
          <target state="translated">操作は常に Int 値ではなくポインタ引数 (*Int)を取り、それぞれのユニークな Int 値はそれ自身のユニークな *Int ポインタを必要とします。Int値を「コピー」するには、既存の(または新しく割り当てられた)IntをInt.Setメソッドを使用して新しい値に設定しなければなりません;Intの浅いコピーはサポートされておらず、エラーになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="be2237e984f46419a4f93c71fc7a1e90b45fca20" translate="yes" xml:space="preserve">
          <source>Operations always take pointer arguments (*Rat) rather than Rat values, and each unique Rat value requires its own unique *Rat pointer. To &quot;copy&quot; a Rat value, an existing (or newly allocated) Rat must be set to a new value using the Rat.Set method; shallow copies of Rats are not supported and may lead to errors.</source>
          <target state="translated">操作は常にRat値ではなくポインタ引数(*Rat)を取り、それぞれのユニークなRat値はそれ自身のユニークな*Ratポインタを必要とします。Rat値を「コピー」するには、既存の(または新たに割り当てられた)RatをRat.Setメソッドを使用して新しい値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ff98727eb74457bb348de0295d7fc660d04eb4a" translate="yes" xml:space="preserve">
          <source>Operations to set or modify these public variables are atomic.</source>
          <target state="translated">これらのパブリック変数を設定または変更する操作は、アトミックです。</target>
        </trans-unit>
        <trans-unit id="a344aa2f0644d620585ef6109d1a2e6c58d16a89" translate="yes" xml:space="preserve">
          <source>Option sets options for the template. Options are described by strings, either a simple string or &quot;key=value&quot;. There can be at most one equals sign in an option string. If the option string is unrecognized or otherwise invalid, Option panics.</source>
          <target state="translated">Optionはテンプレートのオプションを設定します。オプションは文字列で記述され、単純な文字列か &quot;key=value &quot;のいずれかになります。オプション文字列には、最大1つの等号をつけることができます。オプション文字列が認識されない場合や無効な場合は、Optionはパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="cce1a4813966599e90a08f133505dd0509cbda9c" translate="yes" xml:space="preserve">
          <source>OptionalHeader64.DllCharacteristics and OptionalHeader32.DllCharacteristics values. These can be combined together.</source>
          <target state="translated">OptionalHeader64.DllCharacteristics と OptionalHeader32.DllCharacteristics の値。これらを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="4bc236bd251ed2cc9db099c813ca0960052738d0" translate="yes" xml:space="preserve">
          <source>OptionalHeader64.Subsystem and OptionalHeader32.Subsystem values.</source>
          <target state="translated">OptionalHeader64.Subsystem および OptionalHeader32.Subsystem の値。</target>
        </trans-unit>
        <trans-unit id="b6fd04b8e4249d97e36c417ecf8d4f601359dc00" translate="yes" xml:space="preserve">
          <source>Optionally, a single extra argument of type Mode can be provided to control low-level aspects of the documentation extraction behavior.</source>
          <target state="translated">オプションで、文書抽出動作の低レベルの側面を制御するために、Mode型の単一の追加引数を提供することができます。</target>
        </trans-unit>
        <trans-unit id="22bdd06043dd23aedf196f8c5aa67a749424f26f" translate="yes" xml:space="preserve">
          <source>Options are the encoding parameters.</source>
          <target state="translated">オプションはエンコーディングのパラメータです。</target>
        </trans-unit>
        <trans-unit id="2ae1ba4c5551ccfa17f3cc4234e6c983b6c4a751" translate="yes" xml:space="preserve">
          <source>Options are the encoding parameters. Quality ranges from 1 to 100 inclusive, higher is better.</source>
          <target state="translated">オプションはエンコーディングパラメータです。品質は1から100までの範囲で、高いほど良いです。</target>
        </trans-unit>
        <trans-unit id="3574245ef01db27c04b70bab947169f3717705e6" translate="yes" xml:space="preserve">
          <source>Options are the options for creating a new Jar.</source>
          <target state="translated">オプションは、新しい Jar を作成する際のオプションです。</target>
        </trans-unit>
        <trans-unit id="adec537139c73f02b553920372adc3c02c28272e" translate="yes" xml:space="preserve">
          <source>Or sets z = x | y and returns z.</source>
          <target state="translated">または、z=x | y をセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="1b4b94d1371289b3526620aa944ef691c23c5e97" translate="yes" xml:space="preserve">
          <source>Or to collect a 5-second execution trace:</source>
          <target state="translated">または5秒の実行トレースを収集するために。</target>
        </trans-unit>
        <trans-unit id="50c67b4d826544d33e4676d47eb11f1c27fb8432" translate="yes" xml:space="preserve">
          <source>Or to look at a 30-second CPU profile:</source>
          <target state="translated">30秒のCPUプロファイルを見るとか。</target>
        </trans-unit>
        <trans-unit id="b615664e9607d56a174a9eae8d3c5a2c6e80bd6a" translate="yes" xml:space="preserve">
          <source>Or to look at the goroutine blocking profile, after calling runtime.SetBlockProfileRate in your program:</source>
          <target state="translated">あるいは、プログラムでruntime.SetBlockProfileRateを呼び出した後に、goroutineのブロッキングプロファイルを見ることもできます。</target>
        </trans-unit>
        <trans-unit id="9e825dc80cfaf2eaa80db6ce23de3b3fc8a8346c" translate="yes" xml:space="preserve">
          <source>Or to look at the holders of contended mutexes, after calling runtime.SetMutexProfileFraction in your program:</source>
          <target state="translated">あるいは、プログラムでruntime.SetMutexProfileFractionを呼び出した後に、競合するミューテックスのホルダーを見ることもできます。</target>
        </trans-unit>
        <trans-unit id="8ab86bd1259ac4f40dd163dea09a395538c7b9f8" translate="yes" xml:space="preserve">
          <source>Or you can create custom flags that satisfy the Value interface (with pointer receivers) and couple them to flag parsing by</source>
          <target state="translated">あるいは、(ポインタレシーバを使用した)Value インターフェースを満たすカスタムフラグを作成し、それを</target>
        </trans-unit>
        <trans-unit id="9e10a8547b0d36316e030b08eda98a7d2a3b8233" translate="yes" xml:space="preserve">
          <source>Order specifies the bit ordering in an LZW data stream.</source>
          <target state="translated">Orderは、LZWデータストリームのビット順序を指定します。</target>
        </trans-unit>
        <trans-unit id="5cbea92714ef396bc3e8932074a0396b90c6e75c" translate="yes" xml:space="preserve">
          <source>Other ASN.1 types are not supported; if it encounters them, Unmarshal returns a parse error.</source>
          <target state="translated">他の ASN.1 タイプはサポートされていません。それらに遭遇した場合、Unmarshal はパースエラーを返します。</target>
        </trans-unit>
        <trans-unit id="7ba1580fd9fc904fa02322480bcec7e07c54f2cc" translate="yes" xml:space="preserve">
          <source>Other definitions of spacing characters are set by category Z and property Pattern_White_Space.</source>
          <target state="translated">その他の間隔文字の定義は、カテゴリZとプロパティPattern_White_Spaceで設定されています。</target>
        </trans-unit>
        <trans-unit id="b7a56a76d64dcdb6eb16b696315251945b43a236" translate="yes" xml:space="preserve">
          <source>Other flags:</source>
          <target state="translated">他の旗だ</target>
        </trans-unit>
        <trans-unit id="bd1405bb0e6eee6e420fe2dfb40f43a986aa8880" translate="yes" xml:space="preserve">
          <source>Other idioms, such as time.Since(start), time.Until(deadline), and time.Now().Before(deadline), are similarly robust against wall clock resets.</source>
          <target state="translated">time.Since(start)、time.Until(deadline)、time.Now().Before(deadline)などの他のイディオムも同様に壁時計のリセットに強いです。</target>
        </trans-unit>
        <trans-unit id="aa4d97b3571d62fa73ceb918bc9a47b9937e01e1" translate="yes" xml:space="preserve">
          <source>Other packages</source>
          <target state="translated">その他のパッケージ</target>
        </trans-unit>
        <trans-unit id="e7cf6fa65416b27793d90a051b00b5c18e902844" translate="yes" xml:space="preserve">
          <source>Other values - numbers, bools, strings, and channels - are deeply equal if they are equal using Go's == operator.</source>
          <target state="translated">その他の値-数値、bools、文字列、チャンネル-は、Go の ==演算子を使用して等しい場合、深く等しくなります。</target>
        </trans-unit>
        <trans-unit id="68cac93271438e6498e5c369aaaa0b2b44f4aa36" translate="yes" xml:space="preserve">
          <source>Otherwise Context will be a value previously returned by a call to the context function. The traceback function should gather a stack trace from that saved point in the program execution. The traceback function may be called from an execution thread other than the one that recorded the context, but only when the context is known to be valid and unchanging. The traceback function may also be called deeper in the call stack on the same thread that recorded the context. The traceback function may be called multiple times with the same Context value; it will usually be appropriate to cache the result, if possible, the first time this is called for a specific context value.</source>
          <target state="translated">そうでない場合は、コンテキスト関数の呼び出しによって以前に返された値がコンテキストとなります。トレースバック関数は、プログラム実行中に保存されたポイントからスタックトレースを収集します。トレースバック関数は、コンテキストを記録した実行スレッドとは別の実行スレッドから呼び出すことができますが、 コンテキストが有効で変更されていないことがわかっている場合に限ります。また、トレースバック関数は、コンテキストを記録したのと同じスレッドから、コールスタックのより深いところから呼び出されることもあります。トレースバック関数は、同じコンテキスト値で複数回呼び出される可能性があります。</target>
        </trans-unit>
        <trans-unit id="440873215b88a6b8697d85d1d64d02df4a4da93f" translate="yes" xml:space="preserve">
          <source>Otherwise, Marshal uses the following type-dependent default encodings:</source>
          <target state="translated">それ以外の場合、Marshal は以下の型に依存するデフォルトのエンコーディングを使用します。</target>
        </trans-unit>
        <trans-unit id="23286c7a365f916cfdea50d5123a3b0bcae1d4f3" translate="yes" xml:space="preserve">
          <source>Otherwise, the Scanner advances the input. If the token is not nil, the Scanner returns it to the user. If the token is nil, the Scanner reads more data and continues scanning; if there is no more data--if atEOF was true--the Scanner returns. If the data does not yet hold a complete token, for instance if it has no newline while scanning lines, a SplitFunc can return (0, nil, nil) to signal the Scanner to read more data into the slice and try again with a longer slice starting at the same point in the input.</source>
          <target state="translated">それ以外の場合、スキャナは入力を進めます。トークンが nil でない場合、スキャナはトークンをユーザに返します。トークンが nil の場合、スキャナはさらにデータを読み込んでスキャンを続行します。データがまだ完全なトークンを保持していない場合 (例えば、行のスキャン中に改行がない場合)、SplitFunc は (0,nil,nil)を返して、スキャナがスライスにさらにデータを読み込んで、入力の同じポイントから始まるより長いスライスで再試行するように合図します。</target>
        </trans-unit>
        <trans-unit id="c58abb3a56ad02906deb5ed411e41c1942d916f5" translate="yes" xml:space="preserve">
          <source>Otherwise, the name is taken to be a location name corresponding to a file in the IANA Time Zone database, such as &quot;America/New_York&quot;.</source>
          <target state="translated">それ以外の場合は、&quot;America/New_York &quot;のようなIANAタイムゾーンデータベース内のファイルに対応する場所の名前として扱われます。</target>
        </trans-unit>
        <trans-unit id="074d0906fc55c8d6c513fa44707b8b377c627c79" translate="yes" xml:space="preserve">
          <source>Out may be used to retrieve OUTPUT value parameters from stored procedures.</source>
          <target state="translated">Out は、ストアドプロシージャから OUTPUT 値のパラメータを取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="62f29f77d6256848fed5f348aeadebd7d0572e5e" translate="yes" xml:space="preserve">
          <source>Output returns the destination for usage and error messages. os.Stderr is returned if output was not set or was set to nil.</source>
          <target state="translated">出力は、使用状況やエラーメッセージの出力先を返します。</target>
        </trans-unit>
        <trans-unit id="e449133aa4e97be80abdfc0c46f50787b1e6cc66" translate="yes" xml:space="preserve">
          <source>Output runs the command and returns its standard output. Any returned error will usually be of type *ExitError. If c.Stderr was nil, Output populates ExitError.Stderr.</source>
          <target state="translated">Output はコマンドを実行し、その標準出力を返します。返されるエラーは通常 *ExitError 型です。c.Stderr が nil の場合、Output は ExitError.Stderr を生成します。</target>
        </trans-unit>
        <trans-unit id="7ecc8307c727787c0796f59aebc9997243dec020" translate="yes" xml:space="preserve">
          <source>Output writes the output for a logging event. The string s contains the text to print after the prefix specified by the flags of the Logger. A newline is appended if the last character of s is not already a newline. Calldepth is the count of the number of frames to skip when computing the file name and line number if Llongfile or Lshortfile is set; a value of 1 will print the details for the caller of Output.</source>
          <target state="translated">Output は、ロギングイベントの出力を書き込みます。文字列 s には、ロガーのフラグで指定された接頭辞の後に印刷するテキストが含まれます。s の最後の文字がまだ改行されていない場合は、改行が追加されます。Calldepthは、LlongfileまたはLshortfileが設定されている場合、ファイル名と行番号を計算する際にスキップするフレーム数のカウントです。</target>
        </trans-unit>
        <trans-unit id="c217d8994a3f1426d43eb0166f8c3a35d6d34515" translate="yes" xml:space="preserve">
          <source>Output writes the output for a logging event. The string s contains the text to print after the prefix specified by the flags of the Logger. A newline is appended if the last character of s is not already a newline. Calldepth is used to recover the PC and is provided for generality, although at the moment on all pre-defined paths it will be 2.</source>
          <target state="translated">Output は、ロギングイベントの出力を書き込みます。文字列 s には、ロガーのフラグで指定された接頭辞の後に印刷するテキストが含まれます。s の最後の文字がまだ改行されていない場合は改行が追加されます。CalldepthはPCを回復するために使用され、汎用性のために提供されていますが、現時点ではすべての事前定義されたパスでは2になります。</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="4fa36fa9b33d97810f39e28fc36e995589f3d560" translate="yes" xml:space="preserve">
          <source>Output: &quot;ZgotmplZ&quot; Example:</source>
          <target state="translated">出力します。&quot;ZgotmplZ&quot; 例</target>
        </trans-unit>
        <trans-unit id="75e718b4932f1994826e9ab2559b67ffd1e17df7" translate="yes" xml:space="preserve">
          <source>Outside of those two special cases, ServeFile does not use r.URL.Path for selecting the file or directory to serve; only the file or directory provided in the name argument is used.</source>
          <target state="translated">これら2つの特別なケース以外では、ServeFileはサービスを提供するファイルまたはディレクトリを選択するためにr.URL.Pathを使用しません;name引数で指定されたファイルまたはディレクトリのみが使用されます。</target>
        </trans-unit>
        <trans-unit id="c3a7fdb472ac14ee470a8708bdbde30a747ecc04" translate="yes" xml:space="preserve">
          <source>OverflowComplex reports whether the complex128 x cannot be represented by v's type. It panics if v's Kind is not Complex64 or Complex128.</source>
          <target state="translated">OverflowComplex は complex128 の x が v の型で表現できないかどうかを報告します。vの型がComplex64またはComplex128でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="b0ed609ef26db1230ec310f05f6a41e74b4a279d" translate="yes" xml:space="preserve">
          <source>OverflowFloat reports whether the float64 x cannot be represented by v's type. It panics if v's Kind is not Float32 or Float64.</source>
          <target state="translated">OverflowFloat は、float64 の x が v の型で表現できないかどうかを報告します。v の型が Float32 または Float64 でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="7200bfe476f81acadc4a0ccf748e1684d1005b1a" translate="yes" xml:space="preserve">
          <source>OverflowInt reports whether the int64 x cannot be represented by v's type. It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64.</source>
          <target state="translated">OverflowInt は、int64 の x が v の型で表現できないかどうかを報告します。v の型が Int、Int8、Int16、Int32、または Int64 でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="2b4b5d40028c4ba9e1027f58dcb6f18125d975d5" translate="yes" xml:space="preserve">
          <source>OverflowUint reports whether the uint64 x cannot be represented by v's type. It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.</source>
          <target state="translated">OverflowUint は、uint64 の x が v の型で表現できないかどうかを報告します。v の型が Uint,Uintptr,Uint8,Uint16,Uint32,Uint64 でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="2f7f8328b596e3ddecd6faa4ad494433682975d9" translate="yes" xml:space="preserve">
          <source>Overlaps reports whether r and s have a non-empty intersection.</source>
          <target state="translated">オーバーラップは、rとsの交点が空でないかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="540bc829190ced5e9ba3735dc9ac84a0059b79f4" translate="yes" xml:space="preserve">
          <source>P224 returns a Curve which implements P-224 (see FIPS 186-3, section D.2.2).</source>
          <target state="translated">P224は、P-224を実装したCurveを返す(FIPS 186-3、セクションD.2.2.2参照)。</target>
        </trans-unit>
        <trans-unit id="7a02481719ad494cd5efe50d160cc7726bf135c0" translate="yes" xml:space="preserve">
          <source>P256 returns a Curve which implements NIST P-256 (FIPS 186-3, section D.2.3), also known as secp256r1 or prime256v1. The CurveParams.Name of this Curve is &quot;P-256&quot;.</source>
          <target state="translated">P256はNIST P-256 (FIPS 186-3,section D.2.3)を実装したCurveを返します。 このCurveのCurveParams.Nameは &quot;P-256 &quot;です。</target>
        </trans-unit>
        <trans-unit id="f9ccdfec57f69f0c0af7d347e1e194be5e3da78a" translate="yes" xml:space="preserve">
          <source>P256 returns a Curve which implements P-256 (see FIPS 186-3, section D.2.3)</source>
          <target state="translated">P256は、P-256を実装した曲線を返す(FIPS 186-3、セクションD.2.3参照)。</target>
        </trans-unit>
        <trans-unit id="315a8a8dcda4a2d0941fe0f30068b28ba243beb9" translate="yes" xml:space="preserve">
          <source>P384 returns a Curve which implements NIST P-384 (FIPS 186-3, section D.2.4), also known as secp384r1. The CurveParams.Name of this Curve is &quot;P-384&quot;.</source>
          <target state="translated">P384は、secp384r1としても知られるNIST P-384 (FIPS 186-3,section D.2.4)を実装したCurveを返します。このカーブのCurveParams.Nameは &quot;P-384 &quot;です。</target>
        </trans-unit>
        <trans-unit id="0d2178f68bbde9fa3217033c113d8df97da47a28" translate="yes" xml:space="preserve">
          <source>P384 returns a Curve which implements P-384 (see FIPS 186-3, section D.2.4)</source>
          <target state="translated">P384 は、P-384 を実装したカーブを返す(FIPS 186-3、セクション D.2.4 参照)。</target>
        </trans-unit>
        <trans-unit id="4cca307fc3187b85217d38451ccf6632766474b3" translate="yes" xml:space="preserve">
          <source>P521 returns a Curve which implements NIST P-521 (FIPS 186-3, section D.2.5), also known as secp521r1. The CurveParams.Name of this Curve is &quot;P-521&quot;.</source>
          <target state="translated">P521は、secp521r1としても知られるNIST P-521(FIPS 186-3,section D.2.5)を実装したCurveを返します。このカーブのCurveParams.Nameは &quot;P-521 &quot;です。</target>
        </trans-unit>
        <trans-unit id="c9a508dd7c665008acf0e38e607e3196bfcd6cf9" translate="yes" xml:space="preserve">
          <source>P521 returns a Curve which implements P-521 (see FIPS 186-3, section D.2.5)</source>
          <target state="translated">P521は、P-521を実装したCurveを返す(FIPS 186-3、セクションD.2.5参照)。</target>
        </trans-unit>
        <trans-unit id="39161099723c9e406b69587afd22627144ad7720" translate="yes" xml:space="preserve">
          <source>PCToFunc returns the function containing the program counter pc, or nil if there is no such function.</source>
          <target state="translated">PCToFuncは、プログラムカウンタpcを含む関数を返します。</target>
        </trans-unit>
        <trans-unit id="aabe0db5b758e9cbc954a1f7a208c14d080cb6c6" translate="yes" xml:space="preserve">
          <source>PCToLine looks up line number information for a program counter. If there is no information, it returns fn == nil.</source>
          <target state="translated">PCToLineは、プログラムカウンタの行番号情報を調べます。情報がない場合は fn ==nil を返します。</target>
        </trans-unit>
        <trans-unit id="841d78ecc2d24b8758f6afc447a9a64df99960bb" translate="yes" xml:space="preserve">
          <source>PCToLine returns the line number for the given program counter.</source>
          <target state="translated">PCToLine は、指定されたプログラムカウンタの行番号を返します。</target>
        </trans-unit>
        <trans-unit id="9f22bb4f4b5879dcdd3ed13d36e5eadeb879d5ee" translate="yes" xml:space="preserve">
          <source>PKCS1v15DecrypterOpts is for passing options to PKCS #1 v1.5 decryption using the crypto.Decrypter interface.</source>
          <target state="translated">PKCS1v15DecrypterOptsは、crypto.Decrypterインターフェイスを使用してPKCS #1 v1.5の復号化にオプションを渡すためのものです。</target>
        </trans-unit>
        <trans-unit id="d8139323c6d19479f54e5ea9ba69d4546948a8d4" translate="yes" xml:space="preserve">
          <source>PKCS1v15DecrypterOpts is for passing options to PKCS#1 v1.5 decryption using the crypto.Decrypter interface.</source>
          <target state="translated">PKCS1v15DecrypterOptsは、crypto.Decrypterインターフェイスを使用してPKCS#1 v1.5の復号化にオプションを渡すためのものです。</target>
        </trans-unit>
        <trans-unit id="3010ccb1954efdb7b7065a86234a1d7d460fba48" translate="yes" xml:space="preserve">
          <source>PSSOptions contains options for creating and verifying PSS signatures.</source>
          <target state="translated">PSSOptionsには、PSS署名の作成と検証のためのオプションが含まれています。</target>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes" xml:space="preserve">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="6de038894baa09edba875dcb5414f5284bdf18fd" translate="yes" xml:space="preserve">
          <source>Package (Autoescaping)</source>
          <target state="translated">パッケージ(オートエスケーピング</target>
        </trans-unit>
        <trans-unit id="efd760e5022b210b4ab3b28e3b7050f4cfe5597a" translate="yes" xml:space="preserve">
          <source>Package (Basic)</source>
          <target state="translated">パッケージ(ベーシック</target>
        </trans-unit>
        <trans-unit id="2f75473a87f737dac84d4da0d9f9f7e3db9e0c4a" translate="yes" xml:space="preserve">
          <source>Package (BinaryMarshaler)</source>
          <target state="translated">パッケージ (BinaryMarshaler)</target>
        </trans-unit>
        <trans-unit id="521cf6815d29f653ce707f251cb067182d8071f5" translate="yes" xml:space="preserve">
          <source>Package (ComplexNumbers)</source>
          <target state="translated">パッケージ (ComplexNumbers)</target>
        </trans-unit>
        <trans-unit id="f1ea6c4ac2e70daab523cce5ae048f3dea0d83bb" translate="yes" xml:space="preserve">
          <source>Package (CustomMarshalJSON)</source>
          <target state="translated">パッケージ (CustomMarshalJSON)</target>
        </trans-unit>
        <trans-unit id="53c1354bffac6774daf658fbd5e85b47d709a40a" translate="yes" xml:space="preserve">
          <source>Package (CustomMarshalXML)</source>
          <target state="translated">パッケージ (CustomMarshalXML)</target>
        </trans-unit>
        <trans-unit id="bf806559bf4e10f3c8039c45350fd1cd892af724" translate="yes" xml:space="preserve">
          <source>Package (DecodeConfig)</source>
          <target state="translated">パッケージ (DecodeConfig)</target>
        </trans-unit>
        <trans-unit id="5c13dd8a74667052e5635f9f7455a54e1f9be1f3" translate="yes" xml:space="preserve">
          <source>Package (Dictionary)</source>
          <target state="translated">パッケージ (辞書)</target>
        </trans-unit>
        <trans-unit id="fcafbcc962aec3c3d83b146b18f61ef5463aef43" translate="yes" xml:space="preserve">
          <source>Package (EConvergents)</source>
          <target state="translated">パッケージ (EConvergents)</target>
        </trans-unit>
        <trans-unit id="71630f752f5d0a16ab8b1a3c38461b76d37e5fed" translate="yes" xml:space="preserve">
          <source>Package (Elastic)</source>
          <target state="translated">パッケージ(伸縮性)</target>
        </trans-unit>
        <trans-unit id="3dc381377e54ebe3f92f7916ec8fdf96578a8e4b" translate="yes" xml:space="preserve">
          <source>Package (EncodeDecode)</source>
          <target state="translated">パッケージ (EncodeDecode)</target>
        </trans-unit>
        <trans-unit id="252573860775d14759f48467c37c1fc311083728" translate="yes" xml:space="preserve">
          <source>Package (Escape)</source>
          <target state="translated">パッケージ(エスケープ</target>
        </trans-unit>
        <trans-unit id="25f707cfdaffe7b9a529ff95591583c8c03bc6af" translate="yes" xml:space="preserve">
          <source>Package (Fibonacci)</source>
          <target state="translated">パッケージ (フィボナッチ)</target>
        </trans-unit>
        <trans-unit id="338a17f2623ba97dc73fc6452b147c9a5a0e8298" translate="yes" xml:space="preserve">
          <source>Package (Formats)</source>
          <target state="translated">パッケージ(フォーマット</target>
        </trans-unit>
        <trans-unit id="426c20e3d54491dcaa33e4dd0bebe004b79c0135" translate="yes" xml:space="preserve">
          <source>Package (IntHeap)</source>
          <target state="translated">パッケージ (IntHeap)</target>
        </trans-unit>
        <trans-unit id="0c999d293b130996c88c6f0ebf97cfecc7e78201" translate="yes" xml:space="preserve">
          <source>Package (Interface)</source>
          <target state="translated">パッケージ(インターフェース)</target>
        </trans-unit>
        <trans-unit id="dd11444f3f52c88a7e33585300bd5ea9526ef9c4" translate="yes" xml:space="preserve">
          <source>Package (Is)</source>
          <target state="translated">パッケージ (Is)</target>
        </trans-unit>
        <trans-unit id="24d024864b73227ebe67578e60455dbd5c73297f" translate="yes" xml:space="preserve">
          <source>Package (IsIdentRune)</source>
          <target state="translated">パッケージ (IsIdentRune)</target>
        </trans-unit>
        <trans-unit id="748caafd5bbe2c55ebabfb05417c48bc6922ffcf" translate="yes" xml:space="preserve">
          <source>Package (Minimal)</source>
          <target state="translated">パッケージ(最小)</target>
        </trans-unit>
        <trans-unit id="4c4a86eeb8002b47d70510d7c23e7eb0eeebd8db" translate="yes" xml:space="preserve">
          <source>Package (Mode)</source>
          <target state="translated">パッケージ(モード)</target>
        </trans-unit>
        <trans-unit id="be479fe7812a33e53549975551961ada92e137a5" translate="yes" xml:space="preserve">
          <source>Package (OpenDBCLI)</source>
          <target state="translated">パッケージ (OpenDBCLI)</target>
        </trans-unit>
        <trans-unit id="afacd609e03942d0e0a9efefefa3cc27d29c774c" translate="yes" xml:space="preserve">
          <source>Package (OpenDBService)</source>
          <target state="translated">パッケージ (OpenDBService)</target>
        </trans-unit>
        <trans-unit id="867dd5ed3ca2062c464faebd1a831d2ea55231a1" translate="yes" xml:space="preserve">
          <source>Package (Printers)</source>
          <target state="translated">パッケージ(プリンター</target>
        </trans-unit>
        <trans-unit id="944f7ea8e45283f6aee9c663f196d84201347430" translate="yes" xml:space="preserve">
          <source>Package (PriorityQueue)</source>
          <target state="translated">パッケージ (PriorityQueue)</target>
        </trans-unit>
        <trans-unit id="e76c0b4be64237d4de2b6bc5f73a9204c1c70fde" translate="yes" xml:space="preserve">
          <source>Package (Rand)</source>
          <target state="translated">パッケージ(ランド</target>
        </trans-unit>
        <trans-unit id="a8e65e58fc97f49428772dd3c9910ec49b3603a7" translate="yes" xml:space="preserve">
          <source>Package (Reset)</source>
          <target state="translated">パッケージ(リセット)</target>
        </trans-unit>
        <trans-unit id="0676e5f7c44f1428abe1688347a4a67985619798" translate="yes" xml:space="preserve">
          <source>Package (RetrievePositionInfo)</source>
          <target state="translated">パッケージ (RetrievePositionInfo)</target>
        </trans-unit>
        <trans-unit id="3918e789c00aa71d83a0d25f288c82afb2e9dc19" translate="yes" xml:space="preserve">
          <source>Package (SortKeys)</source>
          <target state="translated">パッケージ (SortKeys)</target>
        </trans-unit>
        <trans-unit id="fc31bf6d702c41d4e65fa2c8464a648d0253335d" translate="yes" xml:space="preserve">
          <source>Package (SortMultiKeys)</source>
          <target state="translated">パッケージ (SortMultiKeys)</target>
        </trans-unit>
        <trans-unit id="be587b9c8d7d28588b076a30e4390f166b763389" translate="yes" xml:space="preserve">
          <source>Package (SortWrapper)</source>
          <target state="translated">パッケージ (SortWrapper)</target>
        </trans-unit>
        <trans-unit id="039d4d77bcfce9ea65f0437ee2733cacb35d30d2" translate="yes" xml:space="preserve">
          <source>Package (Sqrt2)</source>
          <target state="translated">パッケージ (Sqrt2)</target>
        </trans-unit>
        <trans-unit id="978d6874fbbc2bbed5f65358c7eadec1499de368" translate="yes" xml:space="preserve">
          <source>Package (Synchronization)</source>
          <target state="translated">パッケージ(同期</target>
        </trans-unit>
        <trans-unit id="d74eef6782bc61ea34233345eec7439ddb2209f0" translate="yes" xml:space="preserve">
          <source>Package (TextMarshalJSON)</source>
          <target state="translated">パッケージ (TextMarshalJSON)</target>
        </trans-unit>
        <trans-unit id="00ea20ac0a3062f6e781d5f03ac4f931f7e664e0" translate="yes" xml:space="preserve">
          <source>Package (TextMarshalXML)</source>
          <target state="translated">パッケージ (TextMarshalXML)</target>
        </trans-unit>
        <trans-unit id="9d3479f34953d267211484567770a976cf5f7423" translate="yes" xml:space="preserve">
          <source>Package (TrailingTab)</source>
          <target state="translated">パッケージ (TrailingTab)</target>
        </trans-unit>
        <trans-unit id="db41f4bcaa84e2ad0f8ea9b730005966564c99d0" translate="yes" xml:space="preserve">
          <source>Package (Whitespace)</source>
          <target state="translated">パッケージ (ホワイトスペース)</target>
        </trans-unit>
        <trans-unit id="3fb9a413fc3704254de1eb68fffddbb472a23f33" translate="yes" xml:space="preserve">
          <source>Package (WriterReader)</source>
          <target state="translated">パッケージ (WriterReader)</target>
        </trans-unit>
        <trans-unit id="92c0af89beed6181e00c988e8e650e8fbbda5fcb" translate="yes" xml:space="preserve">
          <source>Package adler32</source>
          <target state="translated">パッケージ adler32</target>
        </trans-unit>
        <trans-unit id="d6bd7681a9453e693c6a651037643ef4b5bef6e4" translate="yes" xml:space="preserve">
          <source>Package adler32 implements the Adler-32 checksum.</source>
          <target state="translated">adler32パッケージはAdler-32チェックサムを実装しています。</target>
        </trans-unit>
        <trans-unit id="e90a3804ce06c2050a2cae1b40859d0d4b3dc725" translate="yes" xml:space="preserve">
          <source>Package aes</source>
          <target state="translated">パッケージ</target>
        </trans-unit>
        <trans-unit id="d496233c286ca50cea980f949b6ce9d0a2fbee51" translate="yes" xml:space="preserve">
          <source>Package aes implements AES encryption (formerly Rijndael), as defined in U.S. Federal Information Processing Standards Publication 197.</source>
          <target state="translated">aes パッケージは、米国連邦情報処理基準出版物 197 で定義されている AES 暗号化 (以前の Rijndael)を実装しています。</target>
        </trans-unit>
        <trans-unit id="0d926b729b85354785bc0db2b7d8a423a023029c" translate="yes" xml:space="preserve">
          <source>Package ascii85</source>
          <target state="translated">パッケージ ascii85</target>
        </trans-unit>
        <trans-unit id="e3765c8a35f98ca3f4cb583e00d1c90614882045" translate="yes" xml:space="preserve">
          <source>Package ascii85 implements the ascii85 data encoding as used in the btoa tool and Adobe's PostScript and PDF document formats.</source>
          <target state="translated">パッケージ ascii85 は、btoa ツールや Adobe の PostScript や PDF 文書フォーマットで使用されている ascii85 データエンコーディングを実装しています。</target>
        </trans-unit>
        <trans-unit id="180c9a93d5ae7703f2646b742a79d37379696e26" translate="yes" xml:space="preserve">
          <source>Package asn1</source>
          <target state="translated">パッケージ asn1</target>
        </trans-unit>
        <trans-unit id="cb9e56c303fa3f867a92e5ec0e898886f01abb4e" translate="yes" xml:space="preserve">
          <source>Package asn1 implements parsing of DER-encoded ASN.1 data structures, as defined in ITU-T Rec X.690.</source>
          <target state="translated">パッケージ asn1 は、ITU-T Rec X.690 で定義されているように、DER エンコードされた ASN.1 データ構造の解析を実装しています。</target>
        </trans-unit>
        <trans-unit id="c08d789dfd150c497744e5eae59ce25bf42b161c" translate="yes" xml:space="preserve">
          <source>Package ast</source>
          <target state="translated">パッケージ</target>
        </trans-unit>
        <trans-unit id="93ce17c079d14adf086a4a91c618dc024db4dcea" translate="yes" xml:space="preserve">
          <source>Package ast declares the types used to represent syntax trees for Go packages.</source>
          <target state="translated">Package astは、Goパッケージの構文木を表現するために使用される型を宣言します。</target>
        </trans-unit>
        <trans-unit id="abc4155f0dfe705449b74dd36086fa20264918b2" translate="yes" xml:space="preserve">
          <source>Package atomic</source>
          <target state="translated">パッケージ atomic</target>
        </trans-unit>
        <trans-unit id="6ccbd2fd52492c5f3e2a1a498498664cb5ffa588" translate="yes" xml:space="preserve">
          <source>Package atomic provides low-level atomic memory primitives useful for implementing synchronization algorithms.</source>
          <target state="translated">atomicパッケージは、同期化アルゴリズムの実装に有用な低レベルのアトミックメモリプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="4ae1e53a5fe2ac3a3b380e5791057e84bdf2fcee" translate="yes" xml:space="preserve">
          <source>Package base32</source>
          <target state="translated">パッケージ base32</target>
        </trans-unit>
        <trans-unit id="3b12a0015b14e3cc130f8b62c8c17d7c8624a97a" translate="yes" xml:space="preserve">
          <source>Package base32 implements base32 encoding as specified by RFC 4648.</source>
          <target state="translated">パッケージ base32 は RFC 4648 で規定されている base32 エンコーディングを実装しています。</target>
        </trans-unit>
        <trans-unit id="38a49427af734eb5994d226888d46a2e48a7e089" translate="yes" xml:space="preserve">
          <source>Package base64</source>
          <target state="translated">パッケージ base64</target>
        </trans-unit>
        <trans-unit id="2daca13cb62da6b7b33a641f5439803312f106f9" translate="yes" xml:space="preserve">
          <source>Package base64 implements base64 encoding as specified by RFC 4648.</source>
          <target state="translated">パッケージ base64 は RFC 4648 で規定されている base64 エンコーディングを実装しています。</target>
        </trans-unit>
        <trans-unit id="03b1336c942a57d9960d475b8b394ed19dde9d0c" translate="yes" xml:space="preserve">
          <source>Package big</source>
          <target state="translated">大きなパッケージ</target>
        </trans-unit>
        <trans-unit id="b4e5fa3ccf50e02964b74ff445efc105e444e505" translate="yes" xml:space="preserve">
          <source>Package big implements arbitrary-precision arithmetic (big numbers).</source>
          <target state="translated">bigパッケージは、任意精度の算術(ビッグナンバー)を実装しています。</target>
        </trans-unit>
        <trans-unit id="4e4c386fba82f93790e8829cc10da0258293e392" translate="yes" xml:space="preserve">
          <source>Package big implements arbitrary-precision arithmetic (big numbers). The following numeric types are supported:</source>
          <target state="translated">big パッケージは任意精度の演算 (ビッグナンバー)を実装しています。以下の数値型がサポートされています。</target>
        </trans-unit>
        <trans-unit id="c20a791c17d35561b3248e9f4e27c1fc641c805c" translate="yes" xml:space="preserve">
          <source>Package binary</source>
          <target state="translated">パッケージバイナリ</target>
        </trans-unit>
        <trans-unit id="a02abb66bca85bad533ac6ecbbd5730f265b40da" translate="yes" xml:space="preserve">
          <source>Package binary implements simple translation between numbers and byte sequences and encoding and decoding of varints.</source>
          <target state="translated">パッケージ binary は、数値とバイト列の間の単純な変換、および varints のエンコーディングとデコーディングを実装しています。</target>
        </trans-unit>
        <trans-unit id="b4585c8f5f16a7a3bbd64f720869325930c04b14" translate="yes" xml:space="preserve">
          <source>Package bits</source>
          <target state="translated">パッケージビット</target>
        </trans-unit>
        <trans-unit id="f121f6160680c1e9d47eb4f125af85e968cef0c7" translate="yes" xml:space="preserve">
          <source>Package bits implements bit counting and manipulation functions for the predeclared unsigned integer types.</source>
          <target state="translated">bitsパッケージは、事前に宣言された符号なし整数型のビットカウントおよび操作関数を実装しています。</target>
        </trans-unit>
        <trans-unit id="83caad2c4e72c3c320f775fbd8a1a35e735677a9" translate="yes" xml:space="preserve">
          <source>Package bufio</source>
          <target state="translated">パッケージ bufio</target>
        </trans-unit>
        <trans-unit id="880f9f9e86187c3ab9594c87162508890d92b1e0" translate="yes" xml:space="preserve">
          <source>Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer object, creating another object (Reader or Writer) that also implements the interface but provides buffering and some help for textual I/O.</source>
          <target state="translated">bufioパッケージはバッファ付きI/Oを実装しています。これは io.Reader または io.Writer オブジェクトをラップし、別のオブジェクト (Reader または Writer)を作成します。</target>
        </trans-unit>
        <trans-unit id="8f54827014010e49f148fc60f5174298cb86d1a9" translate="yes" xml:space="preserve">
          <source>Package build</source>
          <target state="translated">パッケージビルド</target>
        </trans-unit>
        <trans-unit id="044aa6ad5cb13105de3d1dfe1e14ba517afc7dc8" translate="yes" xml:space="preserve">
          <source>Package build gathers information about Go packages.</source>
          <target state="translated">パッケージビルドは、Goパッケージに関する情報を収集します。</target>
        </trans-unit>
        <trans-unit id="47ff1a6f77a6fab0a4ec0e7b02acecd8b23bea55" translate="yes" xml:space="preserve">
          <source>Package builtin</source>
          <target state="translated">パッケージ内蔵</target>
        </trans-unit>
        <trans-unit id="bc6082d4c1ffc50e8646c383c442de7a0853f3b7" translate="yes" xml:space="preserve">
          <source>Package builtin provides documentation for Go's predeclared identifiers. The items documented here are not actually in package builtin but their descriptions here allow godoc to present documentation for the language's special identifiers.</source>
          <target state="translated">builtin パッケージは Go の事前宣言された識別子のドキュメントを提供します。ここで説明されている項目は実際には builtin パッケージには含まれていませんが、 ここで説明されていることで、godoc が言語の特別な識別子のドキュメントを提供することができます。</target>
        </trans-unit>
        <trans-unit id="f18adabe10f881275c2b2d516cabb008577c2f65" translate="yes" xml:space="preserve">
          <source>Package bytes</source>
          <target state="translated">パッケージのバイト数</target>
        </trans-unit>
        <trans-unit id="48c486630207fb1f7940fbb120ac097a31665a2b" translate="yes" xml:space="preserve">
          <source>Package bytes implements functions for the manipulation of byte slices. It is analogous to the facilities of the strings package.</source>
          <target state="translated">bytes パッケージは、バイトスライスを操作するための機能を実装しています。文字列パッケージの機能に似ています。</target>
        </trans-unit>
        <trans-unit id="406c2304145d14ae40562458c269fc1090a1b790" translate="yes" xml:space="preserve">
          <source>Package bzip2</source>
          <target state="translated">bzip2 パッケージ</target>
        </trans-unit>
        <trans-unit id="8eb7c863e2530f3f68b4ee1a3003e658910e2132" translate="yes" xml:space="preserve">
          <source>Package bzip2 implements bzip2 decompression.</source>
          <target state="translated">bzip2 パッケージは bzip2 解凍を実装しています。</target>
        </trans-unit>
        <trans-unit id="872b31b797dd9ef4b907e19e6db917bdf3d1c013" translate="yes" xml:space="preserve">
          <source>Package cgi</source>
          <target state="translated">パッケージ cgi</target>
        </trans-unit>
        <trans-unit id="25ac46feb1a43e83003062fe9e6ccdab9ea2b191" translate="yes" xml:space="preserve">
          <source>Package cgi implements CGI (Common Gateway Interface) as specified in RFC 3875.</source>
          <target state="translated">cgi パッケージは RFC 3875 で規定されている CGI (Common Gateway Interface)を実装しています。</target>
        </trans-unit>
        <trans-unit id="25e89bccb479aa882a9bfc5409a3323ae38e9e25" translate="yes" xml:space="preserve">
          <source>Package cgo</source>
          <target state="translated">パッケージ cgo</target>
        </trans-unit>
        <trans-unit id="0e3e2e5c14219e52219e14faf9778f4b602d6c0d" translate="yes" xml:space="preserve">
          <source>Package cgo contains runtime support for code generated by the cgo tool.</source>
          <target state="translated">cgo パッケージには、cgo ツールで生成されたコードのランタイムサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="6e62ea60a0dd1e82f411152a3d6419b7bf76fb06" translate="yes" xml:space="preserve">
          <source>Package cgo contains runtime support for code generated by the cgo tool. See the documentation for the cgo command for details on using cgo.</source>
          <target state="translated">cgo パッケージには、cgo ツールによって生成されたコードのランタイムサポートが含まれています。cgo の使用方法の詳細については、cgo コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="012f0d22cbfff5b4121f59681774b6bcdc6c8bf7" translate="yes" xml:space="preserve">
          <source>Package cipher</source>
          <target state="translated">パッケージ暗号</target>
        </trans-unit>
        <trans-unit id="30f3e7b90bc36d4a04ee0c6ee4fede5b412b7a90" translate="yes" xml:space="preserve">
          <source>Package cipher implements standard block cipher modes that can be wrapped around low-level block cipher implementations.</source>
          <target state="translated">パッケージ暗号は、低レベルのブロック暗号実装にラップすることができる標準的なブロック暗号モードを実装しています。</target>
        </trans-unit>
        <trans-unit id="991a9a7de6b61fdec46bfd3e8877fa7f538b6fb2" translate="yes" xml:space="preserve">
          <source>Package cipher implements standard block cipher modes that can be wrapped around low-level block cipher implementations. See &lt;a href=&quot;https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html&quot;&gt;https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html&lt;/a&gt; and NIST Special Publication 800-38A.</source>
          <target state="translated">パッケージ暗号は、低レベルのブロック暗号実装をラップできる標準のブロック暗号モードを実装しています。&lt;a href=&quot;https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html&quot;&gt;https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html&lt;/a&gt;およびNIST Special Publication 800-38Aを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b6816262bb29ee185f0f48249d8bc3daaf55582" translate="yes" xml:space="preserve">
          <source>Package cmplx</source>
          <target state="translated">cmplx パッケージ</target>
        </trans-unit>
        <trans-unit id="baf57dd7a6b5ac4706888aba9eb1258cba96f27c" translate="yes" xml:space="preserve">
          <source>Package cmplx provides basic constants and mathematical functions for complex numbers.</source>
          <target state="translated">cmplxパッケージは,複素数のための基本的な定数と数学関数を提供します.</target>
        </trans-unit>
        <trans-unit id="cec1c5cc750dac259d8c1d78dff5abb6d6052171" translate="yes" xml:space="preserve">
          <source>Package cmplx provides basic constants and mathematical functions for complex numbers. Special case handling conforms to the C99 standard Annex G IEC 60559-compatible complex arithmetic.</source>
          <target state="translated">cmplxパッケージは,複素数の基本定数と数学関数を提供します.特殊なケースの処理は、C99標準付属書G IEC 60559互換の複素数演算に準拠しています。</target>
        </trans-unit>
        <trans-unit id="37d8c891f48030e536dd7b758ded3702c02139dc" translate="yes" xml:space="preserve">
          <source>Package color</source>
          <target state="translated">パッケージ色</target>
        </trans-unit>
        <trans-unit id="0c0c35fbc62909ad60418ab34664b2ed01195fb4" translate="yes" xml:space="preserve">
          <source>Package color implements a basic color library.</source>
          <target state="translated">パッケージカラーは基本的なカラーライブラリを実装しています。</target>
        </trans-unit>
        <trans-unit id="1bcb3d15e235264a42cb3594781e34e58e7e4025" translate="yes" xml:space="preserve">
          <source>Package constant</source>
          <target state="translated">定数パッケージ</target>
        </trans-unit>
        <trans-unit id="cc9ee19fe4a55fca4b94e371e7f50f3a89a325d9" translate="yes" xml:space="preserve">
          <source>Package constant implements Values representing untyped Go constants and their corresponding operations.</source>
          <target state="translated">パッケージ定数は、型付けされていない囲碁定数とそれに対応する操作を表す値を実装しています。</target>
        </trans-unit>
        <trans-unit id="f37b57ba6586f71a43fafcb43910fbb2fb02fc3b" translate="yes" xml:space="preserve">
          <source>Package context</source>
          <target state="translated">パッケージコンテキスト</target>
        </trans-unit>
        <trans-unit id="d3934777ec3c952a9b50c31b8ba59b107a7a5d55" translate="yes" xml:space="preserve">
          <source>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</source>
          <target state="translated">パッケージのコンテキストはコンテキストタイプを定義し、API の境界やプロセス間で期限やキャンセルシグナル、その他のリクエストスコープされた値を運びます。</target>
        </trans-unit>
        <trans-unit id="2959c61a1310320ade48360831ded95782ef16b3" translate="yes" xml:space="preserve">
          <source>Package cookiejar</source>
          <target state="translated">パッケージ cookiejar</target>
        </trans-unit>
        <trans-unit id="8c90ea9e027ef93e3a9e5e3949e57755bbbd286c" translate="yes" xml:space="preserve">
          <source>Package cookiejar implements an in-memory RFC 6265-compliant http.CookieJar.</source>
          <target state="translated">cookiejar パッケージは、インメモリ RFC 6265 準拠の http.CookieJar を実装しています。</target>
        </trans-unit>
        <trans-unit id="9b8215374e5e8361fe90b06ebf351541009e3e3e" translate="yes" xml:space="preserve">
          <source>Package crc32</source>
          <target state="translated">パッケージ crc32</target>
        </trans-unit>
        <trans-unit id="b3a9ccd429f36d4cdadd48a9085d7744e115a2de" translate="yes" xml:space="preserve">
          <source>Package crc32 implements the 32-bit cyclic redundancy check, or CRC-32, checksum.</source>
          <target state="translated">crc32パッケージは、32ビットの巡回冗長性チェック(CRC-32チェックサム)を実装しています。</target>
        </trans-unit>
        <trans-unit id="e7dea81d74d4673657a098152e4028683fa05c21" translate="yes" xml:space="preserve">
          <source>Package crc32 implements the 32-bit cyclic redundancy check, or CRC-32, checksum. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&lt;/a&gt; for information.</source>
          <target state="translated">パッケージcrc32は、32ビット巡回冗長検査、またはCRC-32チェックサムを実装します。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;https：//en.wikipedia.org/wiki/Cyclic_redundancy_check&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd8911118f577811f18d0e59d8eb3416d753ee3d" translate="yes" xml:space="preserve">
          <source>Package crc64</source>
          <target state="translated">パッケージ crc64</target>
        </trans-unit>
        <trans-unit id="3f711a93350858163dc7138684052f433c0da645" translate="yes" xml:space="preserve">
          <source>Package crc64 implements the 64-bit cyclic redundancy check, or CRC-64, checksum.</source>
          <target state="translated">crc64 パッケージは、64 ビットの周期的冗長性チェック (CRC-64)を実装しています。</target>
        </trans-unit>
        <trans-unit id="ddff3dc011b09fe55bbaec41ef9b74c6f1146846" translate="yes" xml:space="preserve">
          <source>Package crc64 implements the 64-bit cyclic redundancy check, or CRC-64, checksum. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&lt;/a&gt; for information.</source>
          <target state="translated">パッケージcrc64は、64ビット巡回冗長検査、またはCRC-64チェックサムを実装します。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclic_redundancy_check&quot;&gt;https：//en.wikipedia.org/wiki/Cyclic_redundancy_check&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f6d2ede86f313691ef17454cdcdea04be0dbbb5" translate="yes" xml:space="preserve">
          <source>Package crypto</source>
          <target state="translated">パッケージの暗号化</target>
        </trans-unit>
        <trans-unit id="50dd6822d044a230766309da5791bbd273ba8e97" translate="yes" xml:space="preserve">
          <source>Package crypto collects common cryptographic constants.</source>
          <target state="translated">crypto パッケージは、共通の暗号定数を収集します。</target>
        </trans-unit>
        <trans-unit id="6ce5f5b5df462bd32a5711f5f5fa215ca1b166ed" translate="yes" xml:space="preserve">
          <source>Package csv</source>
          <target state="translated">パッケージ csv</target>
        </trans-unit>
        <trans-unit id="40dd7303701bdcc70dc0c5df42eb5d6ee214e250" translate="yes" xml:space="preserve">
          <source>Package csv reads and writes comma-separated values (CSV) files.</source>
          <target state="translated">csvパッケージは、カンマ区切り値(CSV)ファイルを読み書きします。</target>
        </trans-unit>
        <trans-unit id="d150a0359eb47f620b34dee9c311dced79bcede8" translate="yes" xml:space="preserve">
          <source>Package csv reads and writes comma-separated values (CSV) files. There are many kinds of CSV files; this package supports the format described in RFC 4180.</source>
          <target state="translated">csv パッケージはカンマ区切り値(CSV)ファイルを読み書きします。CSVファイルには多くの種類があり、本パッケージはRFC 4180に記載されている形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c161780a1f5eed6cb5eacae516343d9cf53f40a2" translate="yes" xml:space="preserve">
          <source>Package debug</source>
          <target state="translated">パッケージデバッグ</target>
        </trans-unit>
        <trans-unit id="e18c0cfe3c81fb4f011a9c8574f9e5713e35fc2f" translate="yes" xml:space="preserve">
          <source>Package debug contains facilities for programs to debug themselves while they are running.</source>
          <target state="translated">パッケージデバッグには、実行中のプログラムをデバッグするための機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="923e094a4a23dcbdaf9a79a349be666ee4da178a" translate="yes" xml:space="preserve">
          <source>Package des</source>
          <target state="translated">のパッケージ</target>
        </trans-unit>
        <trans-unit id="f4273b555bae00c756bb38c4bdb36871d156fde9" translate="yes" xml:space="preserve">
          <source>Package des implements the Data Encryption Standard (DES) and the Triple Data Encryption Algorithm (TDEA) as defined in U.S. Federal Information Processing Standards Publication 46-3.</source>
          <target state="translated">パッケージdesはデータ暗号化標準(DES)とトリプルデータ暗号化アルゴリズム(TDEA)を実装しており、米国連邦情報処理標準出版物46-3で定義されています。</target>
        </trans-unit>
        <trans-unit id="6bf60b0613abca5907226299b84a4808f25c054a" translate="yes" xml:space="preserve">
          <source>Package doc</source>
          <target state="translated">パッケージdoc</target>
        </trans-unit>
        <trans-unit id="994d342a4898c4785e34e9db0e04a8dc47ee5ddc" translate="yes" xml:space="preserve">
          <source>Package doc extracts source code documentation from a Go AST.</source>
          <target state="translated">パッケージdocは、Go ASTからソースコードのドキュメントを抽出します。</target>
        </trans-unit>
        <trans-unit id="5069be6dcffa96eefcc7e1232c85b45e87fe235f" translate="yes" xml:space="preserve">
          <source>Package draw</source>
          <target state="translated">パッケージドロー</target>
        </trans-unit>
        <trans-unit id="969fe7ec8173399610653b077ab51865992b53af" translate="yes" xml:space="preserve">
          <source>Package draw provides image composition functions.</source>
          <target state="translated">パッケージdrawは画像合成機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="b15191fdde73d73923a18606c1904389361bc1f7" translate="yes" xml:space="preserve">
          <source>Package driver</source>
          <target state="translated">パッケージドライバー</target>
        </trans-unit>
        <trans-unit id="5c56f884cb2d5a4829273b5f372f47a0c56fc3c2" translate="yes" xml:space="preserve">
          <source>Package driver defines interfaces to be implemented by database drivers as used by package sql.</source>
          <target state="translated">パッケージドライバは、パッケージSQLで使用されるデータベースドライバが実装するインターフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="75bfd93d536faf5b82f79c9e4a6af54202df462f" translate="yes" xml:space="preserve">
          <source>Package dsa</source>
          <target state="translated">パッケージ dsa</target>
        </trans-unit>
        <trans-unit id="1e5b1f9060cf17d69c4113c4252756af952bfee1" translate="yes" xml:space="preserve">
          <source>Package dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3.</source>
          <target state="translated">パッケージ dsa は、FIPS 186-3 で定義されているデジタル署名アルゴリズムを実装しています。</target>
        </trans-unit>
        <trans-unit id="bba8e43639aa6507cfdd4c58cc34c9fb8b2cf7ed" translate="yes" xml:space="preserve">
          <source>Package dwarf</source>
          <target state="translated">パッケージドワーフ</target>
        </trans-unit>
        <trans-unit id="14e7ceae4640d2c62b637a66be95977203616d50" translate="yes" xml:space="preserve">
          <source>Package dwarf provides access to DWARF debugging information loaded from executable files, as defined in the DWARF 2.0 Standard at &lt;a href=&quot;http://dwarfstd.org/doc/dwarf-2.0.0.pdf&quot;&gt;http://dwarfstd.org/doc/dwarf-2.0.0.pdf&lt;/a&gt;</source>
          <target state="translated">パッケージdwarfは、&lt;a href=&quot;http://dwarfstd.org/doc/dwarf-2.0.0.pdf&quot;&gt;http：&lt;/a&gt; //dwarfstd.org/doc/dwarf-2.0.0.pdfのDWARF 2.0標準で定義されているように、実行可能ファイルからロードされたDWARFデバッグ情報へのアクセスを提供します</target>
        </trans-unit>
        <trans-unit id="ccd56c1dfed1c041a4d12453cec3b05cda768eb7" translate="yes" xml:space="preserve">
          <source>Package ecdsa</source>
          <target state="translated">パッケージ ecdsa</target>
        </trans-unit>
        <trans-unit id="352bd4aa5e4bbbc282580a9c214c315f78762a78" translate="yes" xml:space="preserve">
          <source>Package ecdsa implements the Elliptic Curve Digital Signature Algorithm, as defined in FIPS 186-3.</source>
          <target state="translated">パッケージ ecdsa は、FIPS 186-3 で定義されている楕円曲線デジタル署名アルゴリズムを実装しています。</target>
        </trans-unit>
        <trans-unit id="22f041b9e4b005e5e63601ee047c6784ff58304a" translate="yes" xml:space="preserve">
          <source>Package ed25519</source>
          <target state="translated">パッケージ ed25519</target>
        </trans-unit>
        <trans-unit id="fb8453c2683c8a0379237947977a4025115b54f4" translate="yes" xml:space="preserve">
          <source>Package ed25519 implements the Ed25519 signature algorithm.</source>
          <target state="translated">パッケージ ed25519 は Ed25519 署名アルゴリズムを実装しています。</target>
        </trans-unit>
        <trans-unit id="59626533c02e37a4826df5b84fcfc9afa7203b79" translate="yes" xml:space="preserve">
          <source>Package ed25519 implements the Ed25519 signature algorithm. See &lt;a href=&quot;https://ed25519.cr.yp.to/&quot;&gt;https://ed25519.cr.yp.to/&lt;/a&gt;.</source>
          <target state="translated">パッケージed25519は、Ed25519署名アルゴリズムを実装しています。&lt;a href=&quot;https://ed25519.cr.yp.to/&quot;&gt;https://ed25519.cr.yp.to/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="22876ea6aba1d18293913d0db2521ad8767018c8" translate="yes" xml:space="preserve">
          <source>Package elf</source>
          <target state="translated">パッケージエルフ</target>
        </trans-unit>
        <trans-unit id="e380ec79714ca14aed830146e07f72516490e0b8" translate="yes" xml:space="preserve">
          <source>Package elf implements access to ELF object files.</source>
          <target state="translated">パッケージelfはELFオブジェクトファイルへのアクセスを実装しています。</target>
        </trans-unit>
        <trans-unit id="c011316b96f999a9e3cf849a36b3fc15797d8e99" translate="yes" xml:space="preserve">
          <source>Package elliptic</source>
          <target state="translated">楕円パッケージ</target>
        </trans-unit>
        <trans-unit id="3bab3655adc3a192a092b071bc83e45652e1d476" translate="yes" xml:space="preserve">
          <source>Package elliptic implements several standard elliptic curves over prime fields.</source>
          <target state="translated">パッケージellipticは素数場上のいくつかの標準的な楕円曲線を実装しています。</target>
        </trans-unit>
        <trans-unit id="e1b2d294cf9a0cfac69d667bd45e68644ccbf3c6" translate="yes" xml:space="preserve">
          <source>Package encoding</source>
          <target state="translated">パッケージのエンコーディング</target>
        </trans-unit>
        <trans-unit id="ed189180f83e61e5ab517f381324404e9d31f4c0" translate="yes" xml:space="preserve">
          <source>Package encoding defines interfaces shared by other packages that convert data to and from byte-level and textual representations. Packages that check for these interfaces include encoding/gob, encoding/json, and encoding/xml. As a result, implementing an interface once can make a type useful in multiple encodings. Standard types that implement these interfaces include time.Time and net.IP. The interfaces come in pairs that produce and consume encoded data.</source>
          <target state="translated">パッケージのエンコーディングは、データをバイトレベルやテキスト表現に変換する他のパッケージが共有するインターフェイスを定義します。これらのインターフェイスをチェックするパッケージには、 encoding/gob,encoding/json,encoding/xml があります。その結果、あるインターフェイスを一度実装することで、複数のエンコーディングで有用な型にすることができます。これらのインタフェースを実装する標準型には、time.Time や net.IP があります。これらのインタフェースは、エンコードされたデータを生成したり消費したりするペアになっています。</target>
        </trans-unit>
        <trans-unit id="6ee23de7e1e5b835e55c54376bdadcfebe218831" translate="yes" xml:space="preserve">
          <source>Package errors</source>
          <target state="translated">パッケージエラー</target>
        </trans-unit>
        <trans-unit id="4a3bda8668f0f7be8e4653eb9de5b1df5a4b72ae" translate="yes" xml:space="preserve">
          <source>Package errors implements functions to manipulate errors.</source>
          <target state="translated">パッケージエラーは、エラーを操作するための関数を実装しています。</target>
        </trans-unit>
        <trans-unit id="7627f68608d0501d49a4083a780c7eb361e07f6d" translate="yes" xml:space="preserve">
          <source>Package exec</source>
          <target state="translated">パッケージ実行</target>
        </trans-unit>
        <trans-unit id="ee030f10ad063000193fa361b43cfffc1bcc3c8c" translate="yes" xml:space="preserve">
          <source>Package exec runs external commands.</source>
          <target state="translated">パッケージ実行は外部コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="7b3a0dfc0fae8cd217bc6e25080e713ad98645d6" translate="yes" xml:space="preserve">
          <source>Package exec runs external commands. It wraps os.StartProcess to make it easier to remap stdin and stdout, connect I/O with pipes, and do other adjustments.</source>
          <target state="translated">パッケージexecは外部コマンドを実行します。os.StartProcessをラップして、標準入力や標準出力をリマップしたり、I/Oをパイプで接続したり、その他の調整をしやすくしています。</target>
        </trans-unit>
        <trans-unit id="56d612eb4d8eb6cceb1e7052a93aac6c0e863c13" translate="yes" xml:space="preserve">
          <source>Package expvar</source>
          <target state="translated">パッケージ expvar</target>
        </trans-unit>
        <trans-unit id="8556b9ff068352b9cd4f96c39543b774957282c2" translate="yes" xml:space="preserve">
          <source>Package expvar provides a standardized interface to public variables, such as operation counters in servers. It exposes these variables via HTTP at /debug/vars in JSON format.</source>
          <target state="translated">expvar パッケージは、サーバの動作カウンタなどの公開変数への標準化されたインターフェイスを提供します。expvar はこれらの変数を HTTP 経由で /debug/vars に JSON 形式で公開します。</target>
        </trans-unit>
        <trans-unit id="7753afb6ef13a60250c22070f9d8cb74aca0cdd9" translate="yes" xml:space="preserve">
          <source>Package fcgi</source>
          <target state="translated">パッケージ fcgi</target>
        </trans-unit>
        <trans-unit id="2130ff15a15a985590dbae853cbc6bd5f16bc412" translate="yes" xml:space="preserve">
          <source>Package fcgi implements the FastCGI protocol.</source>
          <target state="translated">fcgi パッケージは FastCGI プロトコルを実装しています。</target>
        </trans-unit>
        <trans-unit id="2f468670b5944c845b0cba8a76b0cc4bc25c4814" translate="yes" xml:space="preserve">
          <source>Package filepath</source>
          <target state="translated">ファイルパスをパッケージ化</target>
        </trans-unit>
        <trans-unit id="aad84fa78fc1a5621f1a8d48a9f041dd752165f9" translate="yes" xml:space="preserve">
          <source>Package filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths.</source>
          <target state="translated">filepath パッケージは、ターゲットのオペレーティングシステムで定義されたファイルパスと互換性のある方法でファイル名のパスを操作するためのユーティリティルーチンを実装しています。</target>
        </trans-unit>
        <trans-unit id="20c64fec5374a451273360446201779aff8c1424" translate="yes" xml:space="preserve">
          <source>Package files</source>
          <target state="translated">パッケージファイル</target>
        </trans-unit>
        <trans-unit id="e5471378272dfaa2efadcd1f53861518b9f099f7" translate="yes" xml:space="preserve">
          <source>Package flag</source>
          <target state="translated">パッケージフラグ</target>
        </trans-unit>
        <trans-unit id="e7d9cd955d937c95fcd6a1739c4bfae5a8cbabd2" translate="yes" xml:space="preserve">
          <source>Package flag implements command-line flag parsing.</source>
          <target state="translated">パッケージフラグはコマンドラインフラグの解析を実装しています。</target>
        </trans-unit>
        <trans-unit id="a337ebb67872d5c06c8e204854b5aa24937ec53e" translate="yes" xml:space="preserve">
          <source>Package flate</source>
          <target state="translated">パッケージフラテ</target>
        </trans-unit>
        <trans-unit id="cd21214e87a49e1d6a376d93be54459975506452" translate="yes" xml:space="preserve">
          <source>Package flate implements the DEFLATE compressed data format, described in RFC 1951. The gzip and zlib packages implement access to DEFLATE-based file formats.</source>
          <target state="translated">flate パッケージは RFC 1951 で記述されている DEFLATE 圧縮データフォーマットを実装しています。gzip と zlib パッケージは DEFLATE ベースのファイルフォーマットへのアクセスを実装しています。</target>
        </trans-unit>
        <trans-unit id="803b763e8c63b8639017426b9ddb6efdb2934c44" translate="yes" xml:space="preserve">
          <source>Package fmt</source>
          <target state="translated">パッケージ fmt</target>
        </trans-unit>
        <trans-unit id="d4c2ac9d05c1a7be572af9a00f7d2ee2c86ace0b" translate="yes" xml:space="preserve">
          <source>Package fmt implements formatted I/O with functions analogous to C's printf and scanf. The format 'verbs' are derived from C's but are simpler.</source>
          <target state="translated">fmtパッケージは、C言語のprintfとscanfに類似した関数でフォーマットされたI/Oを実装しています。フォーマットの'動詞'はC言語から派生したものですが、よりシンプルになっています。</target>
        </trans-unit>
        <trans-unit id="d7f1bbda6df0adc48225339cb988bf008c879f32" translate="yes" xml:space="preserve">
          <source>Package fnv</source>
          <target state="translated">パッケージ fnv</target>
        </trans-unit>
        <trans-unit id="1ed450736ae5a7fac5851c4ce48e5c295154cd82" translate="yes" xml:space="preserve">
          <source>Package fnv implements FNV-1 and FNV-1a, non-cryptographic hash functions created by Glenn Fowler, Landon Curt Noll, and Phong Vo.</source>
          <target state="translated">fnv パッケージは Glenn Fowler、Landon Curt Noll、Phong Vo によって作成された非暗号化ハッシュ関数 FNV-1 と FNV-1a を実装しています。</target>
        </trans-unit>
        <trans-unit id="3bfeda77f81e7eb63d4ceaa90d61b0d8cdf6c313" translate="yes" xml:space="preserve">
          <source>Package fnv implements FNV-1 and FNV-1a, non-cryptographic hash functions created by Glenn Fowler, Landon Curt Noll, and Phong Vo. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function&quot;&gt;https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function&lt;/a&gt;.</source>
          <target state="translated">パッケージfnvは、FNV-1およびFNV-1a、Glenn Fowler、Landon Curt Noll、およびPhong Voによって作成された非暗号化ハッシュ関数を実装しています。&lt;a href=&quot;https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function&quot;&gt;https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_functionを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6e1e99b0cea0f06b1bed3052795d0456203e66ac" translate="yes" xml:space="preserve">
          <source>Package format</source>
          <target state="translated">パッケージ形式</target>
        </trans-unit>
        <trans-unit id="44b5a52572ad981c0279cfa1b8249c656292c37c" translate="yes" xml:space="preserve">
          <source>Package format implements standard formatting of Go source.</source>
          <target state="translated">パッケージフォーマットは、Goソースの標準フォーマットを実装しています。</target>
        </trans-unit>
        <trans-unit id="b91f9f521a74becec1958e73da770098048f55a7" translate="yes" xml:space="preserve">
          <source>Package gif</source>
          <target state="translated">パッケージGIF</target>
        </trans-unit>
        <trans-unit id="10af1984ddf2d910dc561741c129eaf2fb3d93fc" translate="yes" xml:space="preserve">
          <source>Package gif implements a GIF image decoder and encoder.</source>
          <target state="translated">gif パッケージは GIF 画像のデコーダとエンコーダを実装しています。</target>
        </trans-unit>
        <trans-unit id="e3be21e16b230bb3bdb8bf1710ba144ad69deeeb" translate="yes" xml:space="preserve">
          <source>Package gob</source>
          <target state="translated">パッケージゴブ</target>
        </trans-unit>
        <trans-unit id="a418c33843d2c062092d6d7c6a4b5816c45727d5" translate="yes" xml:space="preserve">
          <source>Package gob manages streams of gobs - binary values exchanged between an Encoder (transmitter) and a Decoder (receiver).</source>
          <target state="translated">gob パッケージは、エンコーダー(送信機)とデコーダー(受信機)の間で交換されるバイナリ値である gob のストリームを管理します。</target>
        </trans-unit>
        <trans-unit id="44cd01d964bb483f352db2a1b5d4abe8f1b01e5e" translate="yes" xml:space="preserve">
          <source>Package gob manages streams of gobs - binary values exchanged between an Encoder (transmitter) and a Decoder (receiver). A typical use is transporting arguments and results of remote procedure calls (RPCs) such as those provided by package &quot;net/rpc&quot;.</source>
          <target state="translated">gob パッケージは gob のストリーム、つまりエンコーダー (送信機)とデコーダー (受信機)の間で交換されるバイナリ値を管理します。典型的な用途は、&quot;net/rpc&quot; パッケージで提供されているようなリモートプロシージャコール (RPC)の引数や結果を転送することです。</target>
        </trans-unit>
        <trans-unit id="00c000f3850e24bf28c662891a897dac5381ac6c" translate="yes" xml:space="preserve">
          <source>Package gosym</source>
          <target state="translated">パッケージゴジム</target>
        </trans-unit>
        <trans-unit id="2e38d0f781b2d46a7d764ec5db29147877b83b80" translate="yes" xml:space="preserve">
          <source>Package gosym implements access to the Go symbol and line number tables embedded in Go binaries generated by the gc compilers.</source>
          <target state="translated">gosym パッケージは、gc コンパイラによって生成された Go バイナリに埋め込まれた Go シンボルと行番号テーブルへのアクセスを実装しています。</target>
        </trans-unit>
        <trans-unit id="7a918ba298748f37d152f5cb60e30e14a28d12c9" translate="yes" xml:space="preserve">
          <source>Package gzip</source>
          <target state="translated">gzipパッケージ</target>
        </trans-unit>
        <trans-unit id="29dec348206cd4001b61a9c9f0a5d0e43fd7f769" translate="yes" xml:space="preserve">
          <source>Package gzip implements reading and writing of gzip format compressed files, as specified in RFC 1952.</source>
          <target state="translated">gzip パッケージは、RFC 1952 で規定されている gzip 形式の圧縮ファイルの読み書きを実装しています。</target>
        </trans-unit>
        <trans-unit id="14ea7753f344ada7c0aa1963e2baed63cdc13331" translate="yes" xml:space="preserve">
          <source>Package hash</source>
          <target state="translated">パッケージハッシュ</target>
        </trans-unit>
        <trans-unit id="a85d6200368ac18f684b218608b5fa8afb33d33f" translate="yes" xml:space="preserve">
          <source>Package hash provides interfaces for hash functions.</source>
          <target state="translated">パッケージ hash はハッシュ関数のためのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="3a59626485ffbd81c7d5e90634cb6e93e7c34e5b" translate="yes" xml:space="preserve">
          <source>Package heap</source>
          <target state="translated">パッケージヒープ</target>
        </trans-unit>
        <trans-unit id="e93c407a24d497fcea18deaab136750e41bee04c" translate="yes" xml:space="preserve">
          <source>Package heap provides heap operations for any type that implements heap.Interface. A heap is a tree with the property that each node is the minimum-valued node in its subtree.</source>
          <target state="translated">パッケージ heap は、heap.Interface を実装した任意のタイプのヒープ操作を提供します。ヒープは、各ノードがそのサブツリーの最小値ノードであるというプロパティを持つツリーです。</target>
        </trans-unit>
        <trans-unit id="7b0d8dd93b6da00a5a3853f6a8971b11d3be119a" translate="yes" xml:space="preserve">
          <source>Package hex</source>
          <target state="translated">パッケージ六角</target>
        </trans-unit>
        <trans-unit id="7413aef6d1364ce17833992530bdefe998ac3dba" translate="yes" xml:space="preserve">
          <source>Package hex implements hexadecimal encoding and decoding.</source>
          <target state="translated">hexパッケージは16進数のエンコーディングとデコーディングを実装しています。</target>
        </trans-unit>
        <trans-unit id="1ae2b94353abc10afddd7e75ff8292b5ec664627" translate="yes" xml:space="preserve">
          <source>Package hmac</source>
          <target state="translated">パッケージ hmac</target>
        </trans-unit>
        <trans-unit id="5862414bf4e6f484aa549d995a6f4852a7f9b0df" translate="yes" xml:space="preserve">
          <source>Package hmac implements the Keyed-Hash Message Authentication Code (HMAC) as defined in U.S. Federal Information Processing Standards Publication 198.</source>
          <target state="translated">パッケージ hmac は、米国連邦情報処理基準出版物 198 で定義されている鍵付きハッシュメッセージ認証コード (HMAC)を実装しています。</target>
        </trans-unit>
        <trans-unit id="993a4c7f2aa0bc17bb821bd77a5cdca08736959a" translate="yes" xml:space="preserve">
          <source>Package hmac implements the Keyed-Hash Message Authentication Code (HMAC) as defined in U.S. Federal Information Processing Standards Publication 198. An HMAC is a cryptographic hash that uses a key to sign a message. The receiver verifies the hash by recomputing it using the same key.</source>
          <target state="translated">パッケージ hmac は、米国連邦情報処理基準出版物 198 で定義されている鍵付きハッシュメッセージ認証コード (HMAC)を実装しています。HMACは、メッセージに署名するために鍵を使用する暗号化ハッシュです。受信者は、同じ鍵を使用してハッシュを再計算することでハッシュを検証します。</target>
        </trans-unit>
        <trans-unit id="fb848edc1bb28a05f8c5d03e75ae2933d6b8c193" translate="yes" xml:space="preserve">
          <source>Package html</source>
          <target state="translated">パッケージ html</target>
        </trans-unit>
        <trans-unit id="ee6e4064cc07f14cce23003d26486bcbe481c4c8" translate="yes" xml:space="preserve">
          <source>Package html provides functions for escaping and unescaping HTML text.</source>
          <target state="translated">htmlパッケージは、HTMLテキストのエスケープやアンエスケープを行うための関数を提供しています。</target>
        </trans-unit>
        <trans-unit id="93aded6e94d278e605519fd733984fb105ebc8cb" translate="yes" xml:space="preserve">
          <source>Package http</source>
          <target state="translated">パッケージ http</target>
        </trans-unit>
        <trans-unit id="565f53df2ba05962d275cc2ddb64a0ff5b302111" translate="yes" xml:space="preserve">
          <source>Package http provides HTTP client and server implementations.</source>
          <target state="translated">http パッケージは HTTP クライアントとサーバの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="60c2fddc445e71feb989d0582a02f4947d2d457d" translate="yes" xml:space="preserve">
          <source>Package httptest</source>
          <target state="translated">httptestパッケージ</target>
        </trans-unit>
        <trans-unit id="aa8780d1e29dd261a3c2246607eef7a72b8bbb1d" translate="yes" xml:space="preserve">
          <source>Package httptest provides utilities for HTTP testing.</source>
          <target state="translated">httptest パッケージは HTTP テスト用のユーティリティを提供します。</target>
        </trans-unit>
        <trans-unit id="0f537d98dbab242ca895592a50db6e67fd272c97" translate="yes" xml:space="preserve">
          <source>Package httptrace</source>
          <target state="translated">httptrace パッケージ</target>
        </trans-unit>
        <trans-unit id="813e220dd05ef49b41ec90a3fc88de9ec143f032" translate="yes" xml:space="preserve">
          <source>Package httptrace provides mechanisms to trace the events within HTTP client requests.</source>
          <target state="translated">httptrace パッケージは HTTP クライアントリクエスト内のイベントをトレースする仕組みを提供します。</target>
        </trans-unit>
        <trans-unit id="9613bdf01a4050ee78eaddb84e11fc64ec270990" translate="yes" xml:space="preserve">
          <source>Package httputil</source>
          <target state="translated">パッケージ httputil</target>
        </trans-unit>
        <trans-unit id="76d80a4fa32f388098c8efd95fe330b71ff09bd9" translate="yes" xml:space="preserve">
          <source>Package httputil provides HTTP utility functions, complementing the more common ones in the net/http package.</source>
          <target state="translated">httputil パッケージは HTTP ユーティリティ関数を提供し、 net/http パッケージのより一般的な関数を補完します。</target>
        </trans-unit>
        <trans-unit id="421a469bd8c6ddf7b1af341ec45254a3934f90ed" translate="yes" xml:space="preserve">
          <source>Package image</source>
          <target state="translated">パッケージイメージ</target>
        </trans-unit>
        <trans-unit id="4aa8ef8dbcca06a643631802f3d7a141211d42b0" translate="yes" xml:space="preserve">
          <source>Package image implements a basic 2-D image library.</source>
          <target state="translated">パッケージ画像は基本的な2次元画像ライブラリを実装しています。</target>
        </trans-unit>
        <trans-unit id="2dc8e28a838b11d0551b3a0d88ebb2a4408dab5b" translate="yes" xml:space="preserve">
          <source>Package importer</source>
          <target state="translated">パッケージインポーター</target>
        </trans-unit>
        <trans-unit id="420252f85bc81d5c6c24a04bcbd00100b4357969" translate="yes" xml:space="preserve">
          <source>Package importer provides access to export data importers.</source>
          <target state="translated">パッケージインポーターは、エクスポートデータのインポーターへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="93b91053c7ffebf57a4a0530d2af3609eb527706" translate="yes" xml:space="preserve">
          <source>Package internal</source>
          <target state="translated">内部パッケージ</target>
        </trans-unit>
        <trans-unit id="ae4bbcb538c3d4b00aa18c51e1cf94d759fc3060" translate="yes" xml:space="preserve">
          <source>Package internal contains HTTP internals shared by net/http and net/http/httputil.</source>
          <target state="translated">内部パッケージには、net/http と net/http/httputil が共有する HTTP 内部情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="e9636058f09cfb43189cb98a195789b7f0f244da" translate="yes" xml:space="preserve">
          <source>Package io</source>
          <target state="translated">パッケージ io</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
