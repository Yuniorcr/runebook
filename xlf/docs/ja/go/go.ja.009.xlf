<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="232f8c7f5eea097cc9451d2d90b51db6b069254d" translate="yes" xml:space="preserve">
          <source>The zero Map is empty and ready for use. A Map must not be copied after first use.</source>
          <target state="translated">ゼロ マップは空で、使用する準備ができています。最初に使用した後は、マップをコピーしてはいけません。</target>
        </trans-unit>
        <trans-unit id="ba5155e1e3916eee99a712d5244dcde8e9982094" translate="yes" xml:space="preserve">
          <source>The zero Value represents no value. Its IsValid method returns false, its Kind method returns Invalid, its String method returns &quot;&amp;lt;invalid Value&amp;gt;&quot;, and all other methods panic. Most functions and methods never return an invalid value. If one does, its documentation states the conditions explicitly.</source>
          <target state="translated">ゼロの値は値がないことを表します。 IsValidメソッドはfalseを返し、KindメソッドはInvalidを返し、Stringメソッドは &quot;&amp;lt;invalid Value&amp;gt;&quot;を返し、他のすべてのメソッドはパニックになります。ほとんどの関数とメソッドが無効な値を返すことはありません。ある場合は、そのドキュメントに条件が明示的に記載されています。</target>
        </trans-unit>
        <trans-unit id="384c750c13afaffcbd5ebf58e8afec2b8768e946" translate="yes" xml:space="preserve">
          <source>The zero value for Pos is NoPos; there is no file and line information associated with it, and NoPos.IsValid() is false. NoPos is always smaller than any other Pos value. The corresponding Position value for NoPos is the zero value for Position.</source>
          <target state="translated">Pos のゼロ値は NoPos であり、これにはファイルや行の情報が関連付けられておらず、NoPos.IsValid()は false です。NoPosは、他のどのPos値よりも常に小さくなります。NoPosに対応するPositionの値は、Positionのゼロ値です。</target>
        </trans-unit>
        <trans-unit id="3f5973e68195ed6a7dd12c4c7dc485f8bde0523d" translate="yes" xml:space="preserve">
          <source>The zero value for an Int, Rat, or Float correspond to 0. Thus, new values can be declared in the usual ways and denote 0 without further initialization:</source>
          <target state="translated">Int,Rat,Float のゼロ値は 0 に対応します。 このように、新しい値は通常の方法で宣言することができ、さらに初期化を行わなくても 0 を表すことができます。</target>
        </trans-unit>
        <trans-unit id="5d5aa4f538fd1571e15874ad0969ae7c0fda3040" translate="yes" xml:space="preserve">
          <source>The zero value for each field is equivalent to dialing without that option. Dialing with the zero value of Dialer is therefore equivalent to just calling the Dial function.</source>
          <target state="translated">各フィールドのゼロ値は、そのオプションなしでダイヤルすることと同等です。したがって、Dialer のゼロ値を使用してダイヤルすることは、単にダイヤル関数を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="beb5a289f20083f1018df67115c647d61b968230" translate="yes" xml:space="preserve">
          <source>The zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC. As this time is unlikely to come up in practice, the IsZero method gives a simple way of detecting a time that has not been initialized explicitly.</source>
          <target state="translated">Time型のゼロ値は、1年1月1日、00:00:00.000000000 UTCです。この時刻が実際に出てくることはほとんどないので、IsZeroメソッドは、明示的に初期化されていない時刻を検出する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="4752552a303f0f1e8a6bd4b3555705dcb31c63a8" translate="yes" xml:space="preserve">
          <source>Then it can make a remote call:</source>
          <target state="translated">そうすると、リモート通話ができるようになります。</target>
        </trans-unit>
        <trans-unit id="c5d500f53dcbe43654b22f15924d609c47bcfc3c" translate="yes" xml:space="preserve">
          <source>Then use the pprof tool to look at the heap profile:</source>
          <target state="translated">次に、pprofツールを使ってヒーププロファイルを見ます。</target>
        </trans-unit>
        <trans-unit id="d249cadab1a19289ed9fd8f524a7048ff9efb13f" translate="yes" xml:space="preserve">
          <source>There are 16 methods of Regexp that match a regular expression and identify the matched text. Their names are matched by this regular expression:</source>
          <target state="translated">正規表現にマッチし、マッチしたテキストを識別する Regexp には 16 のメソッドがあります。これらの名前はこの正規表現にマッチします。</target>
        </trans-unit>
        <trans-unit id="089af1af9f031a6d4cb36f253f88e22a554b4d75" translate="yes" xml:space="preserve">
          <source>There are many commands available from the pprof command line. Commonly used commands include &quot;top&quot;, which prints a summary of the top program hot-spots, and &quot;web&quot;, which opens an interactive graph of hot-spots and their call graphs. Use &quot;help&quot; for information on all pprof commands.</source>
          <target state="translated">pprof コマンドラインからは多くのコマンドが利用できます。一般的に使用されるコマンドには、トップ・プログラムのホットスポットの要約を表示する &quot;top &quot;や、ホットスポットとその呼び出しグラフのインタラクティブなグラフを開く &quot;web &quot;などがあります。すべての pprof コマンドに関する情報は、&quot;help&quot; を使用してください。</target>
        </trans-unit>
        <trans-unit id="6fa5b171535b7941feffabcf1c5f915fe3f02940" translate="yes" xml:space="preserve">
          <source>There are no build tags for beta or minor releases.</source>
          <target state="translated">ベータ版やマイナーリリースのビルドタグはありません。</target>
        </trans-unit>
        <trans-unit id="f4ebe0322e94e23eec9f295ca340080dec64dffd" translate="yes" xml:space="preserve">
          <source>There are three types of user annotations: log messages, regions, and tasks.</source>
          <target state="translated">ユーザーアノテーションには、ログメッセージ、リージョン、タスクの3つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="311b843be371a8c7fc9f6f81df2189e5f92e44e5" translate="yes" xml:space="preserve">
          <source>There is also a set of binary comparison operators defined as functions:</source>
          <target state="translated">また、関数として定義された二値比較演算子の集合もあります。</target>
        </trans-unit>
        <trans-unit id="5f5077a9bb275171893d0be52e74cbffe4b19888" translate="yes" xml:space="preserve">
          <source>There is also a standard HTTP interface to profiling data. Adding the following line will install handlers under the /debug/pprof/ URL to download live profiles:</source>
          <target state="translated">プロファイリングデータへの標準的なHTTPインターフェースもあります。以下の行を追加すると、/debug/pprof/URLの下にハンドラーがインストールされ、ライブプロファイルをダウンロードすることができます。</target>
        </trans-unit>
        <trans-unit id="f5962f465f0b5c003c4585058fcce10ec6a63c36" translate="yes" xml:space="preserve">
          <source>There is also a standard HTTP interface to trace data. Adding the following line will install a handler under the /debug/pprof/trace URL to download a live trace:</source>
          <target state="translated">トレースデータへの標準的な HTTP インターフェイスもあります。以下の行を追加すると、/debug/pprof/trace URL の下にライブトレースをダウンロードするためのハンドラがインストールされます。</target>
        </trans-unit>
        <trans-unit id="669c09ef6ba443f4e07a76e5e520b09339b0d7ba" translate="yes" xml:space="preserve">
          <source>There is also a subset of the methods that can be applied to text read from a RuneReader:</source>
          <target state="translated">また、RuneReader から読み込んだテキストに適用できるメソッドのサブセットもあります。</target>
        </trans-unit>
        <trans-unit id="e5e187581cfc7675624afa1252d945d3159b9872" translate="yes" xml:space="preserve">
          <source>There is no mechanism for full case folding, that is, for characters that involve multiple runes in the input or output.</source>
          <target state="translated">入力や出力に複数のルーンを含む文字については、フルケース折り返しの仕組みはありません。</target>
        </trans-unit>
        <trans-unit id="4e416754d4e74f38af1b48194c67cf3710f22527" translate="yes" xml:space="preserve">
          <source>These are predefined layouts for use in Time.Format and time.Parse. The reference time used in the layouts is the specific time:</source>
          <target state="translated">これらは、Time.Formatとtime.Parseで使用するための定義済みレイアウトです。レイアウトで使用される参照時間は、特定の時間です。</target>
        </trans-unit>
        <trans-unit id="622b937b45492ef40cc6c554bb302fd36d24a9dd" translate="yes" xml:space="preserve">
          <source>These are the errors that can be returned in ParseError.Err.</source>
          <target state="translated">これらは、ParseError.Err.Err.で返されるエラーです。</target>
        </trans-unit>
        <trans-unit id="df2271a2f22e4450d78c23577801038a703976de" translate="yes" xml:space="preserve">
          <source>These assume decimal and the Go int type.</source>
          <target state="translated">これらは10進数とGo int型を前提としています。</target>
        </trans-unit>
        <trans-unit id="e44cf0ddaa746164e3256589314495380a8d22a3" translate="yes" xml:space="preserve">
          <source>These constants are copied from the flate package, so that code that imports &quot;compress/gzip&quot; does not also have to import &quot;compress/flate&quot;.</source>
          <target state="translated">これらの定数は flate パッケージからコピーされているので、&quot;compress/gzip&quot; をインポートするコードは &quot;compress/flate&quot; もインポートする必要がありません。</target>
        </trans-unit>
        <trans-unit id="9b53ffb7fd51347180d120a25b5986ecdfdf8a40" translate="yes" xml:space="preserve">
          <source>These constants are copied from the flate package, so that code that imports &quot;compress/zlib&quot; does not also have to import &quot;compress/flate&quot;.</source>
          <target state="translated">これらの定数は flate パッケージからコピーされているので、&quot;compress/zlib&quot; をインポートするコードは &quot;compress/flate&quot; もインポートする必要がありません。</target>
        </trans-unit>
        <trans-unit id="a6caaf07cd62c3bce0c1d44802c32e939959f7c6" translate="yes" xml:space="preserve">
          <source>These constants cause FlagSet.Parse to behave as described if the parse fails.</source>
          <target state="translated">これらの定数は、Parseに失敗した場合に、FlagSet.Parseを説明した通りに動作させます。</target>
        </trans-unit>
        <trans-unit id="c3e135e518f3071cd6e6de5ee8eb8509897ca8e4" translate="yes" xml:space="preserve">
          <source>These constants define supported rounding modes.</source>
          <target state="translated">これらの定数は、サポートされている丸めモードを定義します。</target>
        </trans-unit>
        <trans-unit id="e9b81d06567b4f6ea4a134b77b7d8d68b11092d0" translate="yes" xml:space="preserve">
          <source>These examples demonstrate the basics of printing using a format string. Printf, Sprintf, and Fprintf all take a format string that specifies how to format the subsequent arguments. For example, %d (we call that a 'verb') says to print the corresponding argument, which must be an integer (or something containing an integer, such as a slice of ints) in decimal. The verb %v ('v' for 'value') always formats the argument in its default form, just how Print or Println would show it. The special verb %T ('T' for 'Type') prints the type of the argument rather than its value. The examples are not exhaustive; see the package comment for all the details.</source>
          <target state="translated">これらの例は、フォーマット文字列を使った印刷の基本を示しています。Printf、Sprintf、および Fprintf はすべて、後続の引数をどのようにフォーマットするかを指定する書式文字列を取ります。例えば、%d (これを '動詞' と呼びます)は、対応する引数を 10 進数で整数 (または整数を含むもの、例えば ints のスライスなど)にして印刷するように言っています。動詞 %v ('value' の'v'は'value'を意味します)は、常に引数を既定の形式でフォーマットしますが、これは Print または Println が表示する方法と同じです。特殊な動詞 %T ('T' for 'Type')は、値ではなく引数の型を表示します。この例はすべてを網羅しているわけではありません。詳細についてはパッケージのコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b31c3c54ac0eb3ff04d00595a12fb566e8fcf7e" translate="yes" xml:space="preserve">
          <source>These flags define which text to prefix to each log entry generated by the Logger. Bits are or'ed together to control what's printed. There is no control over the order they appear (the order listed here) or the format they present (as described in the comments). The prefix is followed by a colon only when Llongfile or Lshortfile is specified. For example, flags Ldate | Ltime (or LstdFlags) produce,</source>
          <target state="translated">これらのフラグは、ロガーによって生成された各ログ エントリに接頭辞を付けるテキストを定義します。ビットは、印刷されるものを制御するために、一緒にまたは編集されます。表示される順序 (ここに記載されている順序)や表示形式 (コメントで説明されている)は制御できません。Llongfile または Lshortfile が指定されている場合のみ、接頭辞の後にコロンが続きます。例えば、フラグ Ldate | Ltime (または LstdFlags)は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="eab8374633319fa49ea516b7b757172cc6a3ee35" translate="yes" xml:space="preserve">
          <source>These flags define which text to prefix to each log entry generated by the Logger. Bits are or'ed together to control what's printed. With the exception of the Lmsgprefix flag, there is no control over the order they appear (the order listed here) or the format they present (as described in the comments). The prefix is followed by a colon only when Llongfile or Lshortfile is specified. For example, flags Ldate | Ltime (or LstdFlags) produce,</source>
          <target state="translated">これらのフラグは、ロガーによって生成された各ログ エントリに接頭辞を付けるテキストを定義します。ビットは、印刷されるものを制御するために一緒にまたは編集されます。Lmsgprefix フラグを除いて、これらのフラグが表示される順番(ここに記載されている順番)や、表示されるフォーマット(コメントで説明されている)を制御することはできません。Llongfile または Lshortfile が指定されている場合のみ、接頭辞の後にコロンが続きます。例えば、フラグ Ldate | Ltime (または LstdFlags)は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fc9914d5780e96c178ba8969a057705144577da8" translate="yes" xml:space="preserve">
          <source>These functions are also compatible with the &amp;ldquo;Ed25519&amp;rdquo; function defined in RFC 8032. However, unlike RFC 8032's formulation, this package's private key representation includes a public key suffix to make multiple signing operations with the same key more efficient. This package refers to the RFC 8032 private key as the &amp;ldquo;seed&amp;rdquo;.</source>
          <target state="translated">これらの関数は、RFC 8032で定義された「Ed25519」関数とも互換性があります。ただし、RFC 8032の公式とは異なり、このパッケージの秘密鍵表現には、同じ鍵での複数の署名操作をより効率的にする公開鍵のサフィックスが含まれています。このパッケージでは、RFC 8032秘密鍵を「シード」と呼びます。</target>
        </trans-unit>
        <trans-unit id="2034a99a91b57c3247261a1a8004621e6e0c4e1f" translate="yes" xml:space="preserve">
          <source>These functions require great care to be used correctly. Except for special, low-level applications, synchronization is better done with channels or the facilities of the sync package. Share memory by communicating; don't communicate by sharing memory.</source>
          <target state="translated">これらの機能を正しく使うには細心の注意が必要です。特別な低レベルのアプリケーションを除いて、同期はチャンネルや同期パッケージの機能を使って行う方が良いでしょう。通信してメモリを共有する;メモリを共有して通信しない。</target>
        </trans-unit>
        <trans-unit id="54aa9a67852a83f3350017dd1b9500c555360772" translate="yes" xml:space="preserve">
          <source>These packages are part of the Go Project but outside the main Go tree. They are developed under looser &lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;compatibility requirements&lt;/a&gt; than the Go core. Install them with &quot;&lt;a href=&quot;https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies&quot;&gt;go get&lt;/a&gt;&quot;.</source>
          <target state="translated">これらのパッケージはGoプロジェクトの一部ですが、メインのGoツリーの外にあります。これらは、Goコアよりも緩い&lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;互換性要件の&lt;/a&gt;下で開発されています。「&lt;a href=&quot;https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies&quot;&gt;go get&lt;/a&gt;」でインストールしてください。</target>
        </trans-unit>
        <trans-unit id="07168c583c59c9cae9d4bb3facc94a52fb2a21e9" translate="yes" xml:space="preserve">
          <source>These predefined profiles maintain themselves and panic on an explicit Add or Remove method call.</source>
          <target state="translated">これらの定義済みプロファイルは、明示的な追加または削除メソッド呼び出しで自身を維持し、パニックを起こします。</target>
        </trans-unit>
        <trans-unit id="8dc4875980e26530686b9e8a46a4183aeaf7943d" translate="yes" xml:space="preserve">
          <source>These services can help you find Open Source packages provided by the community.</source>
          <target state="translated">これらのサービスは、コミュニティが提供するオープンソースパッケージを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="6ba17173fd7e73d9151d0d7cdef890f5dd3a0a3f" translate="yes" xml:space="preserve">
          <source>These three formatting routines call the Qualifier for each package-level object O, and if the Qualifier returns a non-empty string p, the object is printed in the form p.O. If it returns an empty string, only the object name O is printed.</source>
          <target state="translated">これら 3 つの書式設定ルーチンは、各パッケージレベルのオブジェクト O に対して Qualifier を呼び出し、Qualifier が空でない文字列 p を返すと、オブジェクトは p.O の形式で印刷されます。</target>
        </trans-unit>
        <trans-unit id="2207cae6c61d669eed106af825a6dce66aef87d1" translate="yes" xml:space="preserve">
          <source>These variables have type *RangeTable.</source>
          <target state="translated">これらの変数の型は *RangeTable です。</target>
        </trans-unit>
        <trans-unit id="610a8603a5a8aeac74a533f57b0c5eb7122b7d43" translate="yes" xml:space="preserve">
          <source>This cannot be done concurrent to other receives from the Timer's channel or other calls to the Timer's Stop method.</source>
          <target state="translated">タイマーのチャンネルからの他の受信や、タイマーのStopメソッドの呼び出しと同時に行うことはできません。</target>
        </trans-unit>
        <trans-unit id="1166cbd43d7ca0f544abde3cc256ae8afc9cd0b1" translate="yes" xml:space="preserve">
          <source>This cannot be done concurrent to other receives from the Timer's channel.</source>
          <target state="translated">タイマーのチャンネルからの他の受信と並行して行うことはできません。</target>
        </trans-unit>
        <trans-unit id="b00ff4b1fd4c120a5db60ce99d175dd291630987" translate="yes" xml:space="preserve">
          <source>This declares an integer flag, -flagname, stored in the pointer ip, with type *int.</source>
          <target state="translated">これは、ポインタ ip に格納されている整数フラグ -flagname を宣言します。</target>
        </trans-unit>
        <trans-unit id="f1681bf43fc257c44b551cfb0077dc2be75b4283" translate="yes" xml:space="preserve">
          <source>This declares an integer flag, -n, stored in the pointer nFlag, with type *int:</source>
          <target state="translated">これは、ポインタ nFlag に格納されている整数フラグ -n を宣言します。</target>
        </trans-unit>
        <trans-unit id="631f1841cf17bb7db8a22b0767e5099ebe5b8b09" translate="yes" xml:space="preserve">
          <source>This defines two templates, T1 and T2, and a third T3 that invokes the other two when it is executed. Finally it invokes T3. If executed this template will produce the text</source>
          <target state="translated">これは2つのテンプレートT1とT2を定義し、実行時に他の2つを呼び出す第3のT3を定義します。最後にT3を呼び出します。このテンプレートが実行されると</target>
        </trans-unit>
        <trans-unit id="07be652fe77b2bc1e633b76695cc662deba999dd" translate="yes" xml:space="preserve">
          <source>This example creates a PriorityQueue with some items, adds and manipulates an item, and then removes the items in priority order.</source>
          <target state="translated">この例では、いくつかのアイテムを含むPriorityQueueを作成し、アイテムを追加して操作し、優先順位の高い順にアイテムを削除します。</target>
        </trans-unit>
        <trans-unit id="11e8e47e8373159f24438e9584e5f85d6b5441f2" translate="yes" xml:space="preserve">
          <source>This example demonstrates a custom function to process template text. It installs the strings.Title function and uses it to Make Title Text Look Good In Our Template's Output.</source>
          <target state="translated">この例では、テンプレートのテキストを処理するためのカスタム関数を示しています。strings.Title関数をインストールし、これを使用して、テンプレートの出力でタイトルテキストを見栄えよくするようにしています。</target>
        </trans-unit>
        <trans-unit id="dfa54d108334a66ba7ab5757d71b4364db5ae271" translate="yes" xml:space="preserve">
          <source>This example demonstrates how a value can be passed to the context and also how to retrieve it if it exists.</source>
          <target state="translated">この例では、コンテキストに値を渡す方法と、値が存在する場合にそれを取得する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="cbed8edb3aa3c802bdc2c523c3a0a851457324e3" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to inspect the AST of a Go program.</source>
          <target state="translated">この例では、囲碁プログラムのASTを検査する方法を示します。</target>
        </trans-unit>
        <trans-unit id="165d3019bf668cef6d1995c8165503ac097763bd" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use big.Int to compute the smallest Fibonacci number with 100 decimal digits and to test whether it is prime.</source>
          <target state="translated">この例では、big.Intを使用して10進数100桁の最小フィボナッチ数を計算し、それが素数であるかどうかをテストする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0059484fefd6cd0e894a9be3837a0c3c538eda17" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use big.Rat to compute the first 15 terms in the sequence of rational convergents for the constant e (base of natural logarithm).</source>
          <target state="translated">この例は、定数e(自然対数の基底)の有理収束子の列の最初の15項を計算するためにbig.Ratを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b29080504869eb07c938bd169b02dbf661e6a627" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to use one group of driver templates with distinct sets of helper templates.</source>
          <target state="translated">この例では、1 つのドライバーテンプレートのグループを、異なるヘルパーテンプレートのセットで使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ba0650f40679135f634bca363681740adeafe34a" translate="yes" xml:space="preserve">
          <source>This example demonstrates one way to share some templates and use them in different contexts. In this variant we add multiple driver templates by hand to an existing bundle of templates.</source>
          <target state="translated">この例では、いくつかのテンプレートを共有し、異なるコンテキストで使用する方法を示します。この例では、既存のテンプレートバンドルに複数のドライバテンプレートを手で追加しています。</target>
        </trans-unit>
        <trans-unit id="0ba078883e861f3b147ecf053f6c06d8a3174cd3" translate="yes" xml:space="preserve">
          <source>This example demonstrates searching a list sorted in ascending order.</source>
          <target state="translated">この例では、昇順にソートされたリストを検索しています。</target>
        </trans-unit>
        <trans-unit id="7888c65ff5bdcbe2c823d7d7283ee2975bf6366b" translate="yes" xml:space="preserve">
          <source>This example demonstrates searching a list sorted in descending order. The approach is the same as searching a list in ascending order, but with the condition inverted.</source>
          <target state="translated">この例では、降順にソートされたリストを検索しています。アプローチは昇順のリストを検索するのと同じですが、条件を反転させています。</target>
        </trans-unit>
        <trans-unit id="2db6a343e7f8129baf91fac5d3ebedf3e8666279" translate="yes" xml:space="preserve">
          <source>This example demonstrates the use of a cancelable context to prevent a goroutine leak. By the end of the example function, the goroutine started by gen will return without leaking.</source>
          <target state="translated">この例では、ゴルーチンのリークを防ぐためにキャンセル可能なコンテキストを使用していることを示しています。この例の関数が終わるまでに、gen によって開始された goroutine はリークせずに戻ってきます。</target>
        </trans-unit>
        <trans-unit id="f5ede30ffc3c68340a6fb2445f68975fd1d677b3" translate="yes" xml:space="preserve">
          <source>This example demonstrates unmarshaling an XML excerpt into a value with some preset fields. Note that the Phone field isn't modified and that the XML &amp;lt;Company&amp;gt; element is ignored. Also, the Groups field is assigned considering the element path provided in its tag.</source>
          <target state="translated">この例では、XMLの抜粋を、いくつかの事前設定されたフィールドを持つ値にアンマーシャルします。Phoneフィールドは変更されず、XML &amp;lt;Company&amp;gt;要素は無視されることに注意してください。また、[グループ]フィールドは、タグで提供されている要素パスを考慮して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="363362d5c2e9f91c6b9857ffd69fe714bafa9ced" translate="yes" xml:space="preserve">
          <source>This example fetches several URLs concurrently, using a WaitGroup to block until all the fetches are complete.</source>
          <target state="translated">この例では、複数の URL を同時にフェッチし、すべてのフェッチが完了するまで WaitGroup を使用してブロックします。</target>
        </trans-unit>
        <trans-unit id="06701ebad78061b44ebf3ff359db4a889929ed4c" translate="yes" xml:space="preserve">
          <source>This example illustrates how to remove a variable declaration in a Go program while maintaining correct comment association using an ast.CommentMap.</source>
          <target state="translated">この例では、 ast.CommentMap を使用して正しいコメント関連付けを維持しながら、Go プログラムの変数宣言を削除する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="5b8dbce47ef4472e55b03e0ab77f57e1bbd03498" translate="yes" xml:space="preserve">
          <source>This example illustrates how to use NewFromFiles to compute package documentation with examples.</source>
          <target state="translated">この例では、NewFromFiles を使用してパッケージのドキュメントを計算する方法を例を挙げて説明します。</target>
        </trans-unit>
        <trans-unit id="a88fa5b5d7ed0c65b753c3fe2d8b6cdc87e0d250" translate="yes" xml:space="preserve">
          <source>This example inserts several ints into an IntHeap, checks the minimum, and removes them in order of priority.</source>
          <target state="translated">この例では、複数のイントを IntHeap に挿入し、最小値をチェックし、優先度の高い順に削除します。</target>
        </trans-unit>
        <trans-unit id="e36be68d73234a9e2fb853054688b98fefd0444d" translate="yes" xml:space="preserve">
          <source>This example passes a context with a timeout to tell a blocking function that it should abandon its work after the timeout elapses.</source>
          <target state="translated">この例では、タイムアウトのあるコンテキストを渡して、タイムアウトが経過した後に作業を放棄するようにブロッキング関数に伝えています。</target>
        </trans-unit>
        <trans-unit id="eac2b4a123d3756695f2f19424362998d49962a1" translate="yes" xml:space="preserve">
          <source>This example passes a context with an arbitrary deadline to tell a blocking function that it should abandon its work as soon as it gets to it.</source>
          <target state="translated">この例では、任意の期限を指定したコンテキストを渡して、ブロッキング関数に到達したらすぐに作業を放棄するように指示しています。</target>
        </trans-unit>
        <trans-unit id="df7ace59807aa52b6b44602449d158b9635a420e" translate="yes" xml:space="preserve">
          <source>This example reads 10 cryptographically secure pseudorandom numbers from rand.Reader and writes them to a byte slice.</source>
          <target state="translated">この例では、暗号的に安全な10個の疑似乱数をrand.Readerから読み込み、バイトスライスに書き込みます。</target>
        </trans-unit>
        <trans-unit id="d0f63cae6959df0e63ff45ed07152e8d354e9432" translate="yes" xml:space="preserve">
          <source>This example shows how csv.Reader can be configured to handle other types of CSV files.</source>
          <target state="translated">この例では、csv.Readerが他のタイプのCSVファイルを扱うように設定できることを示しています。</target>
        </trans-unit>
        <trans-unit id="1cca172f7759e3ba0050255d1746af87f660b76a" translate="yes" xml:space="preserve">
          <source>This example shows how to encode an interface value. The key distinction from regular types is to register the concrete type that implements the interface.</source>
          <target state="translated">この例では、インターフェースの値をエンコードする方法を示しています。通常の型との違いは、インターフェイスを実装した具象型を登録することです。</target>
        </trans-unit>
        <trans-unit id="a3357a230dfc48b693b3b94d9c6611698fcf1171" translate="yes" xml:space="preserve">
          <source>This example shows how to use big.Float to compute the square root of 2 with a precision of 200 bits, and how to print the result as a decimal number.</source>
          <target state="translated">この例では、big.Floatを使用して200ビットの精度で2の平方根を計算し、その結果を10進数として表示する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="efe429413e771069e2a76db974f921ef42dbdd60" translate="yes" xml:space="preserve">
          <source>This example shows the basic usage of the package: Create an encoder, transmit some values, receive them with a decoder.</source>
          <target state="translated">この例は、パッケージの基本的な使い方を示しています。エンコーダを作成し、値を送信し、デコーダで受信します。</target>
        </trans-unit>
        <trans-unit id="4e20892924831ca17c2f745e5365e20b64d74b0e" translate="yes" xml:space="preserve">
          <source>This example shows the use of each of the methods on a *Rand. The use of the global functions is the same, without the receiver.</source>
          <target state="translated">この例では、*Rand上での各メソッドの使用を示しています。グローバル関数の使用方法は、レシーバがなくても同じです。</target>
        </trans-unit>
        <trans-unit id="9dae51dea551843f94a869c5f0aec8bf68e765cc" translate="yes" xml:space="preserve">
          <source>This example shows what an AST looks like when printed for debugging.</source>
          <target state="translated">この例では、デバッグ用にASTを印刷したときにどのように見えるかを示しています。</target>
        </trans-unit>
        <trans-unit id="3d4d87b6b74c64cd8a077a3429d1b650786c492b" translate="yes" xml:space="preserve">
          <source>This example transmits a value that implements the custom encoding and decoding methods.</source>
          <target state="translated">この例では、カスタム・エンコーディングおよびデコーディング・メソッドを実装した値を送信します。</target>
        </trans-unit>
        <trans-unit id="5ad4aea6278dc849132cadb70003c4716078bb1f" translate="yes" xml:space="preserve">
          <source>This example uses RawMessage to delay parsing part of a JSON message.</source>
          <target state="translated">この例では、RawMessage を使用して JSON メッセージの一部の解析を遅延させています。</target>
        </trans-unit>
        <trans-unit id="f3c7cd2790bc702e1c4e8248c880538aa9480232" translate="yes" xml:space="preserve">
          <source>This example uses RawMessage to use a precomputed JSON during marshal.</source>
          <target state="translated">この例では、RawMessageを使用して、marshal時に事前に計算されたJSONを使用しています。</target>
        </trans-unit>
        <trans-unit id="0980067335654187fe3f7c133925d1affa51d747" translate="yes" xml:space="preserve">
          <source>This example uses a Decoder to decode a stream of distinct JSON values.</source>
          <target state="translated">この例では、デコーダを使用して、異なる JSON 値のストリームをデコードします。</target>
        </trans-unit>
        <trans-unit id="03fbac2b83cd3991555ff62920bdc91549cc27eb" translate="yes" xml:space="preserve">
          <source>This example uses a Decoder to decode a streaming array of JSON objects.</source>
          <target state="translated">この例では、デコーダを使用して、JSON オブジェクトのストリーミング配列をデコードしています。</target>
        </trans-unit>
        <trans-unit id="f5365f6fa06883e90b95f7b5b17bc92e07aa1a04" translate="yes" xml:space="preserve">
          <source>This function is deterministic. Thus, if the set of possible messages is small, an attacker may be able to build a map from messages to signatures and identify the signed messages. As ever, signatures provide authenticity, not confidentiality.</source>
          <target state="translated">この関数は決定論的である。したがって、可能なメッセージのセットが小さい場合、攻撃者はメッセージから署名へのマップを構築し、署名されたメッセージを識別することができるかもしれません。これまでと同様に、署名は真正性を提供するものであり、機密性を提供するものではありません。</target>
        </trans-unit>
        <trans-unit id="2d0f1a75b2c9ccfa817de559e09c94b8dbca3151" translate="yes" xml:space="preserve">
          <source>This function will call x509.ParseCertificate unless c.Leaf is set, which can incur a significant performance cost.</source>
          <target state="translated">この関数は、c.Leafが設定されていない限り、x509.ParseCertificateを呼び出します。</target>
        </trans-unit>
        <trans-unit id="21dc4eae53c9012a7d2a049dd7f00db6a6938f5b" translate="yes" xml:space="preserve">
          <source>This function's execution time does not depend on the inputs.</source>
          <target state="translated">この関数の実行時間は入力に依存しません。</target>
        </trans-unit>
        <trans-unit id="87202fef0c6c5ae187b02620dfd26b630d0392d4" translate="yes" xml:space="preserve">
          <source>This functionality should only be used with legacy web sites. RFC 2396 warns that interpreting Userinfo this way &amp;ldquo;is NOT RECOMMENDED, because the passing of authentication information in clear text (such as URI) has proven to be a security risk in almost every case where it has been used.&amp;rdquo;</source>
          <target state="translated">この機能は、レガシーWebサイトでのみ使用する必要があります。RFC 2396は、Userinfoをこのように解釈することを警告します。「認証情報をクリアテキスト（URIなど）で渡すことは、使用されているほとんどすべてのケースでセキュリティリスクであることが判明しているためです。」</target>
        </trans-unit>
        <trans-unit id="898688304c78e7f2468d53e47407efc6f38af32f" translate="yes" xml:space="preserve">
          <source>This implementation derives the nonce from an AES-CTR CSPRNG keyed by ChopMD(256, SHA2-512(priv.D || entropy || hash)). The CSPRNG key is IRO by a result of Coron; the AES-CTR stream is IRO under standard assumptions.</source>
          <target state="translated">この実装では、ChopMD(256,SHA2-512(priv.D || entropy || hash))で鍵を設定した AES-CTR CSPRNG から nonce を導出する。CSPRNG 鍵は Coron の結果により IRO であり、AES-CTR ストリームは標準的な仮定の下で IRO である。</target>
        </trans-unit>
        <trans-unit id="689c9dd99bb5162e68a9aedd41062dfeb2de0804" translate="yes" xml:space="preserve">
          <source>This implementation derives the nonce from an AES-CTR CSPRNG keyed by:</source>
          <target state="translated">この実装では、Nonce は AES-CTR CSPRNG でキーを設定したものから導出されます。</target>
        </trans-unit>
        <trans-unit id="d67c9b0649198706841943ee7eba2049c49bcdb3" translate="yes" xml:space="preserve">
          <source>This is handled as if &quot;my:data-href&quot; was just &quot;data-href&quot; and not &quot;href&quot; as it would be if the &quot;data-&quot; prefix were to be ignored too. Thus at parse time this becomes just</source>
          <target state="translated">これは、&quot;my:data-href &quot;が &quot;href &quot;ではなく &quot;data-href &quot;であるかのように処理され、&quot;data-&quot;接頭辞が無視された場合のようになります。したがって、パース時には、これはただの</target>
        </trans-unit>
        <trans-unit id="d2d5c7329f986ca3d31bfdba2057014f5f44ad7d" translate="yes" xml:space="preserve">
          <source>This is only needed to install the handler in a non-standard location.</source>
          <target state="translated">これは、ハンドラを標準以外の場所に設置する場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="4726b7b6e93eb25607ca12b6c92e41d048948273" translate="yes" xml:space="preserve">
          <source>This is unnecessary as the next call to WriteHeader or Close will implicitly flush out the file's padding.</source>
          <target state="translated">次のWriteHeaderやCloseの呼び出しは、暗黙のうちにファイルのパディングをフラッシュアウトしてしまうので、これは不要です。</target>
        </trans-unit>
        <trans-unit id="8eba79d25cd0ac07c169a84af16002b1daff283c" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;EC PRIVATE KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「EC PRIVATE KEY」タイプのPEMブロックでエンコードされている。</target>
        </trans-unit>
        <trans-unit id="eb1b3ed68f800415903edd6e38e6c00b58c4b66a" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;EC PRIVATE KEY&quot;. For a more flexible key format which is not EC specific, use MarshalPKCS8PrivateKey.</source>
          <target state="translated">この種の鍵は一般的に「EC PRIVATE KEY」タイプのPEMブロックでエンコードされています。EC に特化したものではない、より柔軟な鍵フォーマットには、MarshalPKCS8PrivateKey を使用してください。</target>
        </trans-unit>
        <trans-unit id="56bef0ed59f36389d7550a0e4c48802187b81f7d" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;EC PUBLIC KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「EC PUBLIC KEY」タイプのPEMブロックでエンコードされている。</target>
        </trans-unit>
        <trans-unit id="dfe352de6a0131091f458f18e937a358eab3152e" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;PRIVATE KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「PRIVATE KEY」タイプのPEMブロックでエンコードされている。</target>
        </trans-unit>
        <trans-unit id="42db7a056c64d4d64e474ea59fd1650377d9bc54" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;PUBLIC KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「PUBLIC KEY」タイプのPEMブロックでエンコードされています。</target>
        </trans-unit>
        <trans-unit id="64ab07dfb34f7d2feff364506aca7067a4453b39" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;RSA PRIVATE KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「RSA PRIVATE KEY」タイプのPEMブロックでエンコードされています。</target>
        </trans-unit>
        <trans-unit id="98a803d28f3224bf7891d32a0db324db326e4afd" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;RSA PRIVATE KEY&quot;. For a more flexible key format which is not RSA specific, use MarshalPKCS8PrivateKey.</source>
          <target state="translated">この種の鍵は一般的に「RSA PRIVATE KEY」タイプの PEM ブロックでエンコードされています。RSA 固有ではない、より柔軟な鍵フォーマットには、MarshalPKCS8PrivateKey を使用してください。</target>
        </trans-unit>
        <trans-unit id="5d8222cc13301829f5dbdc649eec16abab7d33d6" translate="yes" xml:space="preserve">
          <source>This kind of key is commonly encoded in PEM blocks of type &quot;RSA PUBLIC KEY&quot;.</source>
          <target state="translated">この種の鍵は、一般的に「RSA PUBLIC KEY」タイプのPEMブロックでエンコードされています。</target>
        </trans-unit>
        <trans-unit id="67c7b63689264a63777784c1588c7be8f2ebeb83" translate="yes" xml:space="preserve">
          <source>This means that, by default, command line programs will behave like typical Unix command line programs, while other programs will not crash with SIGPIPE when writing to a closed network connection.</source>
          <target state="translated">これは、デフォルトでは、コマンドラインプログラムは典型的なUnixコマンドラインプログラムのように動作し、他のプログラムは閉じたネットワーク接続に書き込みをしてもSIGPIPEでクラッシュしないことを意味します。</target>
        </trans-unit>
        <trans-unit id="53c41745078961e0cbeedf1ad29b01ea99fe7434" translate="yes" xml:space="preserve">
          <source>This mechanism can be used to cancel long operations on the server if the client has disconnected before the response is ready.</source>
          <target state="translated">このメカニズムは、応答の準備が整う前にクライアントが切断した場合に、サーバ上での長時間の操作をキャンセルするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d3191056acdbdc6fd1ca936f76914f75eb4f8098" translate="yes" xml:space="preserve">
          <source>This mechanism is intended only for trailers that are not known prior to the headers being written. If the set of trailers is fixed or known before the header is written, the normal Go trailers mechanism is preferred:</source>
          <target state="translated">このメカニズムは、ヘッダが書き込まれる前に知られていないトレーラのみを対象としています。トレーラーのセットが固定されているか、ヘッダが書き込まれる前に知られている場合は、通常の Go トレーラーのメカニズムが好ましい。</target>
        </trans-unit>
        <trans-unit id="34dfd520d192c4e8193a79a528c0369751354149" translate="yes" xml:space="preserve">
          <source>This method consults the following fields of the response r:</source>
          <target state="translated">このメソッドは、レスポンス r の以下のフィールドを参照します。</target>
        </trans-unit>
        <trans-unit id="6857cb2d00e6efa4c19dc849fe5f85bb657fb149" translate="yes" xml:space="preserve">
          <source>This method implements crypto.Signer, which is an interface to support keys where the private part is kept in, for example, a hardware module. Common uses should use the Sign function in this package directly.</source>
          <target state="translated">このメソッドは、プライベート部分がハードウェアモジュールなどに保持される鍵をサポートするインターフェイスである crypto.Signer を実装している。一般的には、このパッケージの Sign 関数を直接使用してください。</target>
        </trans-unit>
        <trans-unit id="dca73678d958fc56a6644aad153e6b5ae346adb8" translate="yes" xml:space="preserve">
          <source>This method implements crypto.Signer, which is an interface to support keys where the private part is kept in, for example, a hardware module. Common uses should use the Sign* functions in this package directly.</source>
          <target state="translated">このメソッドは、プライベート部分がハードウェアモジュールなどに保持される鍵をサポートするインターフェイスである crypto.Signerを実装している。一般的には、このパッケージの Sign*関数を直接使用してください。</target>
        </trans-unit>
        <trans-unit id="6162e9fff452fe7b81839fc43d5a9b956682d1db" translate="yes" xml:space="preserve">
          <source>This package assumes that template authors are trusted, that Execute's data parameter is not, and seeks to preserve the properties below in the face of untrusted data:</source>
          <target state="translated">本パッケージは、テンプレート作成者が信頼されていること、Execute のデータ・パラメータが信頼されていないことを前提としており、信頼されていないデータに直面しても以下のプロパティを保持しようとしています。</target>
        </trans-unit>
        <trans-unit id="646741784bedcfbc50f393efbc21b4c2b803f33a" translate="yes" xml:space="preserve">
          <source>This package does not guarantee bit-identical results across architectures.</source>
          <target state="translated">本パッケージは、アーキテクチャ間でのビット同一性の結果を保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="25b183f3fa47240bd162a6084ce81041d00db47f" translate="yes" xml:space="preserve">
          <source>This package does not support disk spanning.</source>
          <target state="translated">本パッケージはディスクスパニングをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="917226455af3a3e84812552f61aaf5f000d19a66" translate="yes" xml:space="preserve">
          <source>This package favors simplicity over efficiency. Clients that require high-performance serialization, especially for large data structures, should look at more advanced solutions such as the encoding/gob package or protocol buffers.</source>
          <target state="translated">このパッケージは効率よりもシンプルさを重視しています。特に大きなデータ構造のために高性能なシリアライズを必要とするクライアントは、encoding/gob パッケージやプロトコルバッファのようなより高度なソリューションを探すべきです。</target>
        </trans-unit>
        <trans-unit id="91400ec0be490a039f54a2e8ea4991f07061b72f" translate="yes" xml:space="preserve">
          <source>This package is EXPERIMENTAL. Its current scope is only to allow tests to run, but not yet to provide a comprehensive API for users. It is exempt from the Go compatibility promise.</source>
          <target state="translated">本パッケージは EXPERIMENTAL です。現在の範囲はテストを実行できるようにするだけで、ユーザーに包括的な API を提供することはできません。Go 互換性の約束からは除外されています。</target>
        </trans-unit>
        <trans-unit id="f172ad46509f2996426e887fe6f7f5b737ccb0ba" translate="yes" xml:space="preserve">
          <source>This package is not implemented on NaCl (Native Client).</source>
          <target state="translated">本パッケージは NaCl (Native Client)には実装されていません。</target>
        </trans-unit>
        <trans-unit id="70b7c3d76332df2a567dd4571a1dd43d36bb3d95" translate="yes" xml:space="preserve">
          <source>This package is not implemented on Plan 9.</source>
          <target state="translated">このパッケージはプラン9には実装されていません。</target>
        </trans-unit>
        <trans-unit id="089323f3519ab53b437d7cbe9878efc86f18d94a" translate="yes" xml:space="preserve">
          <source>This package is not implemented on Windows. As the syslog package is frozen, Windows users are encouraged to use a package outside of the standard library. For background, see &lt;a href=&quot;https://golang.org/issue/1108&quot;&gt;https://golang.org/issue/1108&lt;/a&gt;.</source>
          <target state="translated">このパッケージはWindowsでは実装されていません。syslogパッケージがフリーズしているため、Windowsユーザーは標準ライブラリ以外のパッケージを使用することをお勧めします。背景については、&lt;a href=&quot;https://golang.org/issue/1108&quot;&gt;https：//golang.org/issue/1108を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4c28db944fb8406ea70640148283b4f2b07cfe75" translate="yes" xml:space="preserve">
          <source>This package understands HTML, CSS, JavaScript, and URIs. It adds sanitizing functions to each simple action pipeline, so given the excerpt</source>
          <target state="translated">本パッケージは HTML,CSS,JavaScript,URI を理解します。各単純なアクションパイプラインにサニタイズ関数を追加します。</target>
        </trans-unit>
        <trans-unit id="63f9c654258649e0fec61304d0149ff6b7e1fac2" translate="yes" xml:space="preserve">
          <source>This package wraps package text/template so you can share its template API to parse and execute HTML templates safely.</source>
          <target state="translated">本パッケージは、HTML テンプレートを安全に解析・実行するためのテンプレート API を共有できるように、パッケージの text/template をラップします。</target>
        </trans-unit>
        <trans-unit id="12b81feb5020b97e164b3bd1ab6605720164a33f" translate="yes" xml:space="preserve">
          <source>This palette was used in the Plan 9 Operating System, described at &lt;a href=&quot;https://9p.io/magic/man2html/6/color&quot;&gt;https://9p.io/magic/man2html/6/color&lt;/a&gt;</source>
          <target state="translated">このパレットは、&lt;a href=&quot;https://9p.io/magic/man2html/6/color&quot;&gt;https：//9p.io/magic/man2html/6/color&lt;/a&gt;で説明されているPlan 9オペレーティングシステムで使用されていました。</target>
        </trans-unit>
        <trans-unit id="53f264e60d97dda7c8e598fd892c840f64c77bcb" translate="yes" xml:space="preserve">
          <source>This returns a Writer to which the file contents should be written. The file's contents must be written to the io.Writer before the next call to Create, CreateHeader, or Close.</source>
          <target state="translated">これは、ファイルの内容を書き込むべきライターを返します。ファイルの内容は、次にCreate、CreateHeader、またはCloseを呼び出す前に、io.Writerに書き込まなければなりません。</target>
        </trans-unit>
        <trans-unit id="3636f2d8cb7dce3b52ad380d63ea631656bb70da" translate="yes" xml:space="preserve">
          <source>This runtime/trace package provides APIs to add equivalent tracing support to a standalone program. See the Example that demonstrates how to use this API to enable tracing.</source>
          <target state="translated">このランタイム/トレースパッケージは、スタンドアロンプログラムに同等のトレースサポートを追加するためのAPIを提供します。この API を使用してトレースを有効にする方法を示す例を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb3d7236d288f19d5e07330ec9b641abb7a1c736" translate="yes" xml:space="preserve">
          <source>This section documents the encoding, details that are not important for most users. Details are presented bottom-up.</source>
          <target state="translated">このセクションでは、ほとんどのユーザーにとって重要ではないエンコーディングの詳細を文書化しています。詳細はボトムアップで表示されます。</target>
        </trans-unit>
        <trans-unit id="8d97dde3cffa35e96f0901463ccd21bc2b7e33d2" translate="yes" xml:space="preserve">
          <source>This set may grow. Note that regular expression matches may need to examine text beyond the text returned by a match, so the methods that match text from a RuneReader may read arbitrarily far into the input before returning.</source>
          <target state="translated">このセットは増える可能性があります。正規表現のマッチは、マッチによって返されるテキスト以外のテキストを調べる必要がある場合があるため、RuneReader からテキストにマッチするメソッドは、返す前に入力を任意に遠くまで読み込んでしまうことに注意してください。</target>
        </trans-unit>
        <trans-unit id="13155ea54999e3f67a0c6d8a556ef2fb922860ce" translate="yes" xml:space="preserve">
          <source>This should not be done concurrent to other receives from the Timer's channel.</source>
          <target state="translated">タイマーのチャンネルからの他の受信と並行して行ってはいけません。</target>
        </trans-unit>
        <trans-unit id="0da770375be11542fa319ca413fcc3ece2b576a4" translate="yes" xml:space="preserve">
          <source>This type should be considered identical to sql.IsolationLevel along with any values defined on it.</source>
          <target state="translated">この型はsql.IsolationLevelと定義されている値と同じと考えてください。</target>
        </trans-unit>
        <trans-unit id="5cefc7416c362c1afcf6c674cc1720ba6d02139f" translate="yes" xml:space="preserve">
          <source>This type should be considered identical to sql.TxOptions.</source>
          <target state="translated">この型はsql.TxOptionsと同じと考えてください。</target>
        </trans-unit>
        <trans-unit id="23bb56893bd9c167f4933bba0f06ea209969209a" translate="yes" xml:space="preserve">
          <source>ThreadCreateProfile returns n, the number of records in the thread creation profile. If len(p) &amp;gt;= n, ThreadCreateProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, ThreadCreateProfile does not change p and returns n, false.</source>
          <target state="translated">ThreadCreateProfileは、スレッド作成プロファイルのレコード数であるnを返します。len（p）&amp;gt; = nの場合、ThreadCreateProfileはプロファイルをpにコピーし、n、trueを返します。len（p）&amp;lt;nの場合、ThreadCreateProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="aeddfe22a01fc0ff5fb0fe691b08db0b2e2a26c7" translate="yes" xml:space="preserve">
          <source>Tick</source>
          <target state="translated">Tick</target>
        </trans-unit>
        <trans-unit id="26c9fc157a3f52de1aca92922ccb9a288e5fa386" translate="yes" xml:space="preserve">
          <source>Tick is a convenience wrapper for NewTicker providing access to the ticking channel only. While Tick is useful for clients that have no need to shut down the Ticker, be aware that without a way to shut it down the underlying Ticker cannot be recovered by the garbage collector; it &quot;leaks&quot;. Unlike NewTicker, Tick will return nil if d &amp;lt;= 0.</source>
          <target state="translated">Tickは、Tickingチャネルへのアクセスのみを提供するNewTickerの便利なラッパーです。TickはTickerをシャットダウンする必要がないクライアントに役立ちますが、Tickerをシャットダウンする方法がないと、基礎となるTickerをガベージコレクターで回復できないことに注意してください。それは「リーク」します。NewTickerとは異なり、T &amp;lt;= 0の場合、Tickはnilを返します。</target>
        </trans-unit>
        <trans-unit id="464b9c4863cbad4e03c3166e6a41a020f20219b8" translate="yes" xml:space="preserve">
          <source>Time instants can be compared using the Before, After, and Equal methods. The Sub method subtracts two instants, producing a Duration. The Add method adds a Time and a Duration, producing a Time.</source>
          <target state="translated">インスタントの時間は、Before、After、Equalメソッドを使用して比較することができます。Subメソッドは、2つのインスタンツを減算し、デュレーションを生成します。Addメソッドは、TimeとDurationを追加してTimeを生成します。</target>
        </trans-unit>
        <trans-unit id="7e0d5fdb48c2796b9cc511f84f1969b59a9bd1cf" translate="yes" xml:space="preserve">
          <source>Time.Add</source>
          <target state="translated">Time.Add</target>
        </trans-unit>
        <trans-unit id="5c2e779ba4c8677013ab3eb4de9c1e6bf9c9924b" translate="yes" xml:space="preserve">
          <source>Time.AddDate</source>
          <target state="translated">Time.AddDate</target>
        </trans-unit>
        <trans-unit id="730b4aa03b8316a2a6c19e05b72ec5d4eb05e78c" translate="yes" xml:space="preserve">
          <source>Time.After</source>
          <target state="translated">Time.After</target>
        </trans-unit>
        <trans-unit id="d5e86b615c46a18260de62e172d7e06cc20f7083" translate="yes" xml:space="preserve">
          <source>Time.AppendFormat</source>
          <target state="translated">Time.AppendFormat</target>
        </trans-unit>
        <trans-unit id="88be4309d5e0539eff6218d7e8c02ecf0c7b2e65" translate="yes" xml:space="preserve">
          <source>Time.Before</source>
          <target state="translated">Time.Before</target>
        </trans-unit>
        <trans-unit id="480d1c53462d365532b2348e82a3f0dcb963c99e" translate="yes" xml:space="preserve">
          <source>Time.Date</source>
          <target state="translated">Time.Date</target>
        </trans-unit>
        <trans-unit id="ae2638b80e7bdac6e6725adc567cf7badedc6abe" translate="yes" xml:space="preserve">
          <source>Time.Day</source>
          <target state="translated">Time.Day</target>
        </trans-unit>
        <trans-unit id="d4766b7b3328342b5ba1a667334b95afb4c840fd" translate="yes" xml:space="preserve">
          <source>Time.Equal</source>
          <target state="translated">Time.Equal</target>
        </trans-unit>
        <trans-unit id="092fc9098aafde18e6cec288675831ee7d77f8a8" translate="yes" xml:space="preserve">
          <source>Time.Format</source>
          <target state="translated">Time.Format</target>
        </trans-unit>
        <trans-unit id="dd61b8e28117a6a8c31fd714a3696b1193538443" translate="yes" xml:space="preserve">
          <source>Time.Format (Pad)</source>
          <target state="translated">時間フォーマット(パッド</target>
        </trans-unit>
        <trans-unit id="3768befc26b5bc40a2c6b38ecc6f26a0656a5d40" translate="yes" xml:space="preserve">
          <source>Time.Round</source>
          <target state="translated">Time.Round</target>
        </trans-unit>
        <trans-unit id="5b138a17083c1c36c8bab2fd64e7493a32a70b68" translate="yes" xml:space="preserve">
          <source>Time.String</source>
          <target state="translated">Time.String</target>
        </trans-unit>
        <trans-unit id="e126e45961c85339227ad3c92517287507ec5152" translate="yes" xml:space="preserve">
          <source>Time.Sub</source>
          <target state="translated">Time.Sub</target>
        </trans-unit>
        <trans-unit id="d3f1777c34673ecabb71603383f8d1fd8d6be9c4" translate="yes" xml:space="preserve">
          <source>Time.Truncate</source>
          <target state="translated">Time.Truncate</target>
        </trans-unit>
        <trans-unit id="c4ee117595e7091017dcf807233ec5e3324552ac" translate="yes" xml:space="preserve">
          <source>Time.Unix</source>
          <target state="translated">Time.Unix</target>
        </trans-unit>
        <trans-unit id="f8fc7e6bb582b1829de5a848ff872dea68eff61d" translate="yes" xml:space="preserve">
          <source>TimeFormat is the time format to use when generating times in HTTP headers. It is like time.RFC1123 but hard-codes GMT as the time zone. The time being formatted must be in UTC for Format to generate the correct format.</source>
          <target state="translated">TimeFormat は HTTP ヘッダで時刻を生成する際に使用する時刻フォーマットです。time.RFC1123 と似ていますが、タイムゾーンとして GMT をハードコードしています。正しいフォーマットを生成するためには、フォーマットされる時間は UTC でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9827d1afd02311b970b1c9ab5d2482ee7f917a5d" translate="yes" xml:space="preserve">
          <source>Timeout reports whether the DNS lookup is known to have timed out. This is not always known; a DNS lookup may fail due to a timeout and return a DNSError for which Timeout returns false.</source>
          <target state="translated">Timeoutは、DNS検索がタイムアウトしたことがわかっているかどうかを報告する。これは常に知られているわけではありません。 DNS検索はタイムアウトにより失敗し、Timeoutがfalseを返すDNSErrorを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="927810e8434679578bc9bf07a4312dbfd80340d4" translate="yes" xml:space="preserve">
          <source>Timeout reports whether this error represents a timeout.</source>
          <target state="translated">Timeout は、このエラーがタイムアウトを表しているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="e7860bff1be7d01a8121a71b30616b2279f825c3" translate="yes" xml:space="preserve">
          <source>TimeoutHandler returns a Handler that runs h with the given time limit.</source>
          <target state="translated">TimeoutHandler は、指定された制限時間内に h を実行するハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="41f375b226e7f8e10a9acde2441f73751822f0d4" translate="yes" xml:space="preserve">
          <source>TimeoutHandler supports the Flusher and Pusher interfaces but does not support the Hijacker interface.</source>
          <target state="translated">TimeoutHandlerはFlusherとPusherインターフェースをサポートしていますが、Hijackerインターフェースはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="229f8a47d6424d21cc11a27228c5b3dd3021912d" translate="yes" xml:space="preserve">
          <source>TimeoutHandler supports the Pusher interface but does not support the Hijacker or Flusher interfaces.</source>
          <target state="translated">TimeoutHandlerはPusherインターフェースをサポートしていますが、HijackerやFlusherインターフェースはサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b94b20b16ca4b5f916aaa1eb8d24553f8d4b92c2" translate="yes" xml:space="preserve">
          <source>TimeoutReader returns ErrTimeout on the second read with no data. Subsequent calls to read succeed.</source>
          <target state="translated">TimeoutReader は、データがない 2 回目の読み取りで ErrTimeout を返します。それ以降の読み込みの呼び出しは成功します。</target>
        </trans-unit>
        <trans-unit id="8bdae2bbf616fbfd5c5eefd29c8a537bd886144c" translate="yes" xml:space="preserve">
          <source>TimespecToNsec converts a Timespec value into a number of nanoseconds since the Unix epoch.</source>
          <target state="translated">TimespecToNsecは、Timespecの値をUnixのエポック以降のナノ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="71641b558817e2a09b865dac9868550ced5db039" translate="yes" xml:space="preserve">
          <source>TimevalToNsec converts a Timeval value into a number of nanoseconds since the Unix epoch.</source>
          <target state="translated">TimevalToNsecは、Timeval値をUnixのエポック以降のナノ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="768e0c1c69573fb588f61f1308a015c11468e05f" translate="yes" xml:space="preserve">
          <source>Title</source>
          <target state="translated">Title</target>
        </trans-unit>
        <trans-unit id="ee048df59e1fe3a78061c7c9271c635869379b9b" translate="yes" xml:space="preserve">
          <source>Title returns a copy of the string s with all Unicode letters that begin words mapped to their Unicode title case.</source>
          <target state="translated">Title は、単語の先頭にあるすべての Unicode 文字を、その Unicode タイトルケースにマップした文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="173f12648645a6edd8fcbab7c7ed0369c007806c" translate="yes" xml:space="preserve">
          <source>Title treats s as UTF-8-encoded bytes and returns a copy with all Unicode letters that begin words mapped to their title case.</source>
          <target state="translated">TitleはsをUTF-8でエンコードされたバイトとして扱い、単語の先頭にあるすべてのUnicode文字をタイトルケースにマッピングしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="ae79ea1e9c6391a9ed83a2e18a031b835feec0c9" translate="yes" xml:space="preserve">
          <source>To</source>
          <target state="translated">To</target>
        </trans-unit>
        <trans-unit id="616d61f65a9f91c650c28db92d9cb8984a1f52bd" translate="yes" xml:space="preserve">
          <source>To add equivalent profiling support to a standalone program, add code like the following to your main function:</source>
          <target state="translated">スタンドアロン・プログラムに同等のプロファイリング・サポートを追加するには、メイン関数に以下のようなコードを追加します。</target>
        </trans-unit>
        <trans-unit id="f6f5822190a6e77b3f6e2423fce4abac430f1e8d" translate="yes" xml:space="preserve">
          <source>To avoid denial of service attacks, the provided bufio.Reader should be reading from an io.LimitReader or similar Reader to bound the size of responses.</source>
          <target state="translated">サービス拒否攻撃を避けるために、提供される bufio.Reader は、応答のサイズを制限するために、io.LimitReader または同様の Reader から読み取る必要があります。</target>
        </trans-unit>
        <trans-unit id="87386ad5a06e96430212748899697cda9d7a3724" translate="yes" xml:space="preserve">
          <source>To avoid recursion in cases such as</source>
          <target state="translated">のような場合の再帰を避けるために</target>
        </trans-unit>
        <trans-unit id="a87f0fb7c131221874ae3b0c17104f44ee1c34bc" translate="yes" xml:space="preserve">
          <source>To be backwards compatible the FileHeader has both 32 and 64 bit Size fields. The 64 bit fields will always contain the correct value and for normal archives both fields will be the same. For files requiring the ZIP64 format the 32 bit fields will be 0xffffffff and the 64 bit fields must be used instead.</source>
          <target state="translated">後方互換性を持たせるために、FileHeader は 32 ビットと 64 ビットの両方のサイズフィールドを持っています。64 ビットフィールドには常に正しい値が含まれ、通常のアーカイブでは両方のフィールドは同じになります。ZIP64 フォーマットを必要とするファイルでは、32 ビットのフィールドは 0xffffffffff になり、代わりに 64 ビットのフィールドを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="f0c9c2ba0d3b42114f628f0336b7d63f8138a666" translate="yes" xml:space="preserve">
          <source>To build a file only when using cgo, and only on Linux and OS X:</source>
          <target state="translated">cgoを使用しているときだけ、LinuxとOS Xでのみファイルをビルドすること。</target>
        </trans-unit>
        <trans-unit id="b59fa373960766ba2850aeb1bfd6ebb3acccc2d0" translate="yes" xml:space="preserve">
          <source>To build strings more efficiently, see the strings.Builder type.</source>
          <target state="translated">より効率的に文字列を構築するには、string.Builderの型を参照してください。</target>
        </trans-unit>
        <trans-unit id="65822ab438826bd3303521dc362fbdb7385f9c68" translate="yes" xml:space="preserve">
          <source>To change the destination for flag messages, call CommandLine.SetOutput.</source>
          <target state="translated">フラグ・メッセージの送信先を変更するには、CommandLine.SetOutput を呼び出します。</target>
        </trans-unit>
        <trans-unit id="697c0150c9b1eec40f18c8aa7919a2878d3bf00a" translate="yes" xml:space="preserve">
          <source>To compare two Values, compare the results of the Interface method. Using == on two Values does not compare the underlying values they represent.</source>
          <target state="translated">2つの値を比較するには、Interfaceメソッドの結果を比較します。2つの値に==を使用しても、それらが表現している基本的な値は比較されません。</target>
        </trans-unit>
        <trans-unit id="26bcf90200ee4c383ef61356b62c1cde915663a4" translate="yes" xml:space="preserve">
          <source>To complete the example above, the following code tries to find the value x in an integer slice data sorted in ascending order:</source>
          <target state="translated">上記の例を完成させるために、以下のコードは、昇順にソートされた整数スライスデータの中から値xを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="48862e3dd334f932c3f29aca76cb78295d40632d" translate="yes" xml:space="preserve">
          <source>To compute the number of allocations, the function will first be run once as a warm-up. The average number of allocations over the specified number of runs will then be measured and returned.</source>
          <target state="translated">割り当て数を計算するために、この関数はまずウォームアップとして1回実行されます。その後、指定された実行回数にわたる割り当て数の平均値が測定され、返されます。</target>
        </trans-unit>
        <trans-unit id="a1b4d9690ab97f466c6d326d8c742f5be1f15108" translate="yes" xml:space="preserve">
          <source>To convert an integer number of units to a Duration, multiply:</source>
          <target state="translated">整数の単位をデュレーションに変換するには、乗算します。</target>
        </trans-unit>
        <trans-unit id="c70ea98cf5f708e17c34d681b2e9583414cbfaae" translate="yes" xml:space="preserve">
          <source>To count the number of units in a Duration, divide:</source>
          <target state="translated">デュレーションの単位数を数えるには、割り算します。</target>
        </trans-unit>
        <trans-unit id="a8a481566ee5c9f4011b251f076b7cff25d2b336" translate="yes" xml:space="preserve">
          <source>To create a new request with a context, use NewRequestWithContext. To change the context of a request (such as an incoming) you then also want to modify to send back out, use Request.Clone. Between those two uses, it's rare to need WithContext.</source>
          <target state="translated">コンテキストを持つ新しいリクエストを作成するには、NewRequestWithContextを使用します。リクエストのコンテキスト (着信など)を変更して、それを修正して送り返したい場合は Request.Clone を使います。この2つの用途の間では、WithContextを必要とすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="df17ef73a333723433e10a65752b7d97c8d742ec" translate="yes" xml:space="preserve">
          <source>To create a new request with a context, use NewRequestWithContext. To change the context of a request, such as an incoming request you want to modify before sending back out, use Request.Clone. Between those two uses, it's rare to need WithContext.</source>
          <target state="translated">コンテキストを持つ新しいリクエストを作成するには、NewRequestWithContext を使用します。リクエストのコンテキストを変更するには、リクエストを送信する前に変更したい受信リクエストなど、 Request.Clone を使用します。この2つの用途の間では、WithContextを必要とすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="d1ce4e028f3adf6fe5e3e3ea8b7a3ce1d7c4cce0" translate="yes" xml:space="preserve">
          <source>To create the Pos value for a specific source offset (measured in bytes), first add the respective file to the current file set using FileSet.AddFile and then call File.Pos(offset) for that file. Given a Pos value p for a specific file set fset, the corresponding Position value is obtained by calling fset.Position(p).</source>
          <target state="translated">特定のソース・オフセット(バイト単位で測定)のPos値を作成するには、まず、FileSet.AddFileを使用してそれぞれのファイルを現在のファイル・セットに追加してから、そのファイルのFile.Pos(offset)を呼び出します。特定のファイルセット fset の Pos 値 p が与えられると、対応する Position 値は fset.Position(p)を呼び出すことで得られます。</target>
        </trans-unit>
        <trans-unit id="ffa6362a850b5571ec14ab520e75aaa3f0b772a0" translate="yes" xml:space="preserve">
          <source>To define a type, the encoder chooses an unused, positive type id and sends the pair (-type id, encoded-type) where encoded-type is the gob encoding of a wireType description, constructed from these types:</source>
          <target state="translated">タイプを定義するために、エンコーダは未使用の正のタイプidを選択し、ペア(-type id,encoded-type)を送信します。</target>
        </trans-unit>
        <trans-unit id="da43583df08c2ff7e4692ba80d3b2cf801b80a61" translate="yes" xml:space="preserve">
          <source>To define your own format, write down what the reference time would look like formatted your way; see the values of constants like ANSIC, StampMicro or Kitchen for examples. The model is to demonstrate what the reference time looks like so that the Format and Parse methods can apply the same transformation to a general time value.</source>
          <target state="translated">独自のフォーマットを定義するには、参照時間がどのように見えるかを書き留めておきます。このモデルは、FormatメソッドとParseメソッドが一般的な時間値に同じ変換を適用できるように、参照時間がどのように見えるかを示すものです。</target>
        </trans-unit>
        <trans-unit id="79806cf1eaac70011a5e985d3751306c16fa37ee" translate="yes" xml:space="preserve">
          <source>To distinguish build constraints from package documentation, a series of build constraints must be followed by a blank line.</source>
          <target state="translated">ビルド制約をパッケージドキュメントと区別するためには、一連のビルド制約の後に空白行を入れなければなりません。</target>
        </trans-unit>
        <trans-unit id="a50607887789cbea54ccb0db0c455e312a84417e" translate="yes" xml:space="preserve">
          <source>To ensure the channel is empty after a call to Stop, check the return value and drain the channel. For example, assuming the program has not received from t.C already:</source>
          <target state="translated">Stopを呼び出した後にチャネルが空になっていることを確認するには、戻り値を確認してチャネルをドレインします。例えば、プログラムが既にt.Cから受信していないと仮定します。</target>
        </trans-unit>
        <trans-unit id="dc7659d0594b1222a7c79baf65726fd2fc8fc92f" translate="yes" xml:space="preserve">
          <source>To escape a text segment, bracket it with Escape characters. For instance, the tab in this string &quot;Ignore this tab: \xff\t\xff&quot; does not terminate a cell and constitutes a single character of width one for formatting purposes.</source>
          <target state="translated">テキストセグメントをエスケープするには、エスケープ文字で括弧を付けます。例えば、この文字列のタブは、&quot;Ignore this tab.&quot;Ignore this tab:Ignore this tab:\\t\xff&quot; は、セルを終了させず、書式設定のための幅1の1文字を構成しています。</target>
        </trans-unit>
        <trans-unit id="a3866d2c65d6d17db1dce0e7ab464336a1186960" translate="yes" xml:space="preserve">
          <source>To force integer division of Int operands, use op == token.QUO_ASSIGN instead of token.QUO; the result is guaranteed to be Int in this case. Division by zero leads to a run-time panic.</source>
          <target state="translated">Intオペランドを整数で分割するには、token.QUOの代わりにop ==token.QUO_ASSIGNを使用します。この場合、結果はIntであることが保証されます。</target>
        </trans-unit>
        <trans-unit id="93f96dd1110bc83e45c261305087ab59ccdab5c6" translate="yes" xml:space="preserve">
          <source>To generate HTML output, see package html/template, which has the same interface as this package but automatically secures HTML output against certain attacks.</source>
          <target state="translated">HTML 出力を生成するには、パッケージ html/template を参照してください。このパッケージは、このパッケージと同じインターフェイスを持っていますが、特定の攻撃に対して HTML 出力を自動的に保護します。</target>
        </trans-unit>
        <trans-unit id="0f37e1016d8b746740d606c5f03bd61a370f62be" translate="yes" xml:space="preserve">
          <source>To generate a client HTTP request instead of a server request, see the NewRequest function in the net/http package.</source>
          <target state="translated">サーバリクエストの代わりにクライアントHTTPリクエストを生成するには、 net/httpパッケージのNewRequest関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="06a96f64d7d0f413489f0372ff0c9c5459591c5b" translate="yes" xml:space="preserve">
          <source>To include every allocated block in the profile, set MemProfileRate to 1. To turn off profiling entirely, set MemProfileRate to 0.</source>
          <target state="translated">割り当てられたすべてのブロックをプロファイルに含めるには、MemProfileRate を 1 に設定します。 プロファイルを完全にオフにするには、MemProfileRate を 0 に設定します。</target>
        </trans-unit>
        <trans-unit id="1cf82e7adf1a06dc5b4204dd8949c669c22a6ce1" translate="yes" xml:space="preserve">
          <source>To include every blocking event in the profile, pass rate = 1. To turn off profiling entirely, pass rate &amp;lt;= 0.</source>
          <target state="translated">すべてのブロッキングイベントをプロファイルに含めるには、合格率= 1です。プロファイリングを完全にオフにするには、合格率&amp;lt;= 0です。</target>
        </trans-unit>
        <trans-unit id="5634feb2ac7b66d9d403fa3ba44d3dd35de4aafa" translate="yes" xml:space="preserve">
          <source>To insert a literal $ in the output, use $$ in the template.</source>
          <target state="translated">出力にリテラル$を挿入するには、テンプレートで$$を使用します。</target>
        </trans-unit>
        <trans-unit id="fc7c25c25b23cfac629203b1f680a734ada8bcd7" translate="yes" xml:space="preserve">
          <source>To iterate over a list (where l is a *List):</source>
          <target state="translated">リストを反復処理します (ここで l は *List)。</target>
        </trans-unit>
        <trans-unit id="04464b93c140cce60515e90ab741d559641a3b86" translate="yes" xml:space="preserve">
          <source>To keep a file from being considered for the build:</source>
          <target state="translated">ビルドのためにファイルが考慮されないようにする。</target>
        </trans-unit>
        <trans-unit id="b8dd565d2e14c4949f658d07fd948bd6982afd99" translate="yes" xml:space="preserve">
          <source>To make a request with custom headers, use NewRequest and Client.Do.</source>
          <target state="translated">カスタムヘッダーでリクエストを作成するには、NewRequest と Client.Do を使用します。</target>
        </trans-unit>
        <trans-unit id="5032a2d57ff9e66d730ea600879b156b0a5e02a1" translate="yes" xml:space="preserve">
          <source>To make a request with custom headers, use NewRequest and DefaultClient.Do.</source>
          <target state="translated">カスタムヘッダーでリクエストを作成するには、NewRequestとDefaultClient.Doを使用します。</target>
        </trans-unit>
        <trans-unit id="706ee8ff1d514d4082de19c46038d881341df0b9" translate="yes" xml:space="preserve">
          <source>To maps the rune to the specified case: UpperCase, LowerCase, or TitleCase.</source>
          <target state="translated">ルーンを指定したケースにマップする。UpperCase,LowerCase,TitleCaseのいずれかを指定します。</target>
        </trans-unit>
        <trans-unit id="13858e1fce15a0a8116d4d08d0813cfa32d04dd1" translate="yes" xml:space="preserve">
          <source>To prevent IP spoofing, be sure to delete any pre-existing X-Forwarded-For header coming from the client or an untrusted proxy.</source>
          <target state="translated">IPスプーフィングを防ぐために、クライアントまたは信頼されていないプロキシから来る既存のX-Forwarded-Forヘッダを必ず削除してください。</target>
        </trans-unit>
        <trans-unit id="16db8fa630b8ed6e5e098c9ecc986852e23449ff" translate="yes" xml:space="preserve">
          <source>To prevent duplicate operations, ErrBadConn should NOT be returned if there's a possibility that the database server might have performed the operation. Even if the server sends back an error, you shouldn't return ErrBadConn.</source>
          <target state="translated">重複操作を防ぐために、データベースサーバが操作を行った可能性がある場合はErrBadConnを返すべきではありません。サーバがエラーを返してきた場合でも、ErrBadConnを返すべきではありません。</target>
        </trans-unit>
        <trans-unit id="367a95ef6b89677c6010e99bfe83911bb6aa0ff5" translate="yes" xml:space="preserve">
          <source>To remove a prefix, use TrimPrefix instead.</source>
          <target state="translated">プレフィックスを削除するには、代わりにTrimPrefixを使用します。</target>
        </trans-unit>
        <trans-unit id="651b4bc851ab5004fd129e9e0ff7675d7d666cef" translate="yes" xml:space="preserve">
          <source>To remove a suffix, use TrimSuffix instead.</source>
          <target state="translated">サフィックスを削除するには、代わりにTrimSuffixを使用します。</target>
        </trans-unit>
        <trans-unit id="c83bbc4183fb8f4e0540869ebe8099226ccd8816" translate="yes" xml:space="preserve">
          <source>To set custom headers, use NewRequest and Client.Do.</source>
          <target state="translated">カスタムヘッダーを設定するには、NewRequest と Client.Do を使用します。</target>
        </trans-unit>
        <trans-unit id="71135b9f4481c76b2f670b0d39a1f656b3961a0f" translate="yes" xml:space="preserve">
          <source>To set custom headers, use NewRequest and DefaultClient.Do.</source>
          <target state="translated">カスタムヘッダを設定するには、NewRequestとDefaultClient.Doを使用します。</target>
        </trans-unit>
        <trans-unit id="db9b30900d9da4419f81d83d998e553e2dab25bb" translate="yes" xml:space="preserve">
          <source>To support custom data types, implement NamedValueChecker. NamedValueChecker also allows queries to accept per-query options as a parameter by returning ErrRemoveArgument from CheckNamedValue.</source>
          <target state="translated">カスタムデータ型をサポートするには、NamedValueCheckerを実装します。また、NamedValueCheckerは、CheckNamedValueからErrRemoveArgumentを返すことで、クエリがクエリごとのオプションをパラメータとして受け付けることを可能にします。</target>
        </trans-unit>
        <trans-unit id="75e0a568234c8cc832fa169bfc3c25d385870808" translate="yes" xml:space="preserve">
          <source>To translate these PCs into symbolic information such as function names and line numbers, use CallersFrames. CallersFrames accounts for inlined functions and adjusts the return program counters into call program counters. Iterating over the returned slice of PCs directly is discouraged, as is using FuncForPC on any of the returned PCs, since these cannot account for inlining or return program counter adjustment.</source>
          <target state="translated">これらのPCを関数名や行番号などの記号情報に変換するには、CallersFramesを使用します。CallersFrames はインライン関数を考慮し、戻り値のプログラム・カウンタを呼び出しプログラム・カウンタに調整します。返された PC のスライスを直接繰り返し処理することはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="83002d8cdc0fe4d874cff59ee6e149e3669f91df" translate="yes" xml:space="preserve">
          <source>To translate these PCs into symbolic information such as function names and line numbers, use CallersFrames. CallersFrames accounts for inlined functions and adjusts the return program counters into call program counters. Iterating over the returned slice of PCs directly is discouraged, as is using FuncForPC on any of the returned PCs, since these cannot account for inlining or return program counter adjustment. go:noinline</source>
          <target state="translated">これらのPCを関数名や行番号などの記号情報に変換するには、CallersFramesを使用します。CallersFrames はインライン関数を考慮し、戻り値のプログラム・カウンタを呼び出しプログラム・カウンタに調整します。返された PC のスライスを直接繰り返し処理することはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="3b553336a2ed0371927e0210cc490999d6f454c6" translate="yes" xml:space="preserve">
          <source>To turn off profiling entirely, pass rate 0. To just read the current rate, pass rate &amp;lt; 0. (For n&amp;gt;1 the details of sampling may change.)</source>
          <target state="translated">プロファイリングを完全にオフにするには、レート0を渡します。現在のレートを読み取るには、レート&amp;lt;0を渡します（n&amp;gt; 1の場合、サンプリングの詳細は変わる場合があります）。</target>
        </trans-unit>
        <trans-unit id="ec0c40fcb609291204c17f8d3e9e4a0cf0fb716d" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into a pointer, Unmarshal first handles the case of the JSON being the JSON literal null. In that case, Unmarshal sets the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into the value pointed at by the pointer. If the pointer is nil, Unmarshal allocates a new value for it to point to.</source>
          <target state="translated">JSON をポインタにアンマーシャルするには、まず Unmarshal は JSON が JSON リテラル null の場合を処理します。この場合、Unmarshal はポインタを nil に設定します。そうでなければ、Unmarshal は JSON をポインタが指す値にアンマーシャルします。ポインタが nil の場合、Unmarshal はポインタが指す値に新しい値を割り当てます。</target>
        </trans-unit>
        <trans-unit id="9ec7dbd6621b41728144a0cd3fc2c36f64948e68" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into a struct, Unmarshal matches incoming object keys to the keys used by Marshal (either the struct field name or its tag), preferring an exact match but also accepting a case-insensitive match. By default, object keys which don't have a corresponding struct field are ignored (see Decoder.DisallowUnknownFields for an alternative).</source>
          <target state="translated">JSON を構造体にアンマーシャリングする場合、Unmarshal は受信したオブジェクトキーを Marshal が使用するキー (構造体フィールド名またはそのタグ)にマッチさせます。デフォルトでは、対応する構造体フィールドを持たないオブジェクトキーは無視されます (代替手段として Decoder.DisallowUnknownFields を参照してください)。</target>
        </trans-unit>
        <trans-unit id="a6bdbb20d4135a3bc4596a68aa8c2c34912d504d" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into a value implementing the Unmarshaler interface, Unmarshal calls that value's UnmarshalJSON method, including when the input is a JSON null. Otherwise, if the value implements encoding.TextUnmarshaler and the input is a JSON quoted string, Unmarshal calls that value's UnmarshalText method with the unquoted form of the string.</source>
          <target state="translated">JSON を Unmarshaler インターフェースを実装した値にアンマーシャルするには、Unmarshal はその値の UnmarshalJSON メソッドを呼び出します。そうでない場合、値が encoding.TextUnmarshaler を実装していて、入力が引用符で囲まれた JSON 文字列の場合、Unmarshal はその値の UnmarshalText メソッドを引用符で囲まれていない形式の文字列で呼び出します。</target>
        </trans-unit>
        <trans-unit id="c66b5ce0cf55557d8e9fd777ec15355bade4e117" translate="yes" xml:space="preserve">
          <source>To unmarshal JSON into an interface value, Unmarshal stores one of these in the interface value:</source>
          <target state="translated">JSONをインターフェイス値にアンマーシャルするには、アンマーシャルはインターフェイス値にこれらのうちの1つを格納します。</target>
        </trans-unit>
        <trans-unit id="94c1b420cdca6fe4940f209d9a41f19875bfb4e7" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON array into a Go array, Unmarshal decodes JSON array elements into corresponding Go array elements. If the Go array is smaller than the JSON array, the additional JSON array elements are discarded. If the JSON array is smaller than the Go array, the additional Go array elements are set to zero values.</source>
          <target state="translated">JSON 配列を Go 配列に復元するには、Unmarshal は JSON 配列の要素を対応する Go 配列の要素にデコードします。Go 配列が JSON 配列よりも小さい場合、追加の JSON 配列要素は破棄されます。JSON 配列が Go 配列よりも小さい場合、追加の Go 配列要素はゼロ値に設定されます。</target>
        </trans-unit>
        <trans-unit id="ed4bdd964a47161b70a00bdaa7dc00eb114dff57" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON array into a slice, Unmarshal resets the slice length to zero and then appends each element to the slice. As a special case, to unmarshal an empty JSON array into a slice, Unmarshal replaces the slice with a new empty slice.</source>
          <target state="translated">JSON 配列をスライスにアンマーシャルするには、Unmarshal はスライスの長さをゼロにリセットしてから、各要素をスライスに追加します。特殊なケースとして、空の JSON 配列をスライスにアンマーシャルするには、Unmarshal はスライスを新しい空のスライスに置き換えます。</target>
        </trans-unit>
        <trans-unit id="007b32960f68d5d51b318bb76ca9ea0286f4126d" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON object into a map, Unmarshal first establishes a map to use. If the map is nil, Unmarshal allocates a new map. Otherwise Unmarshal reuses the existing map, keeping existing entries. Unmarshal then stores key-value pairs from the JSON object into the map. The map's key type must either be a string, an integer, or implement encoding.TextUnmarshaler.</source>
          <target state="translated">JSON オブジェクトをマップに復元するには、Unmarshal は最初に使用するマップを確立します。マップが nil の場合、Unmarshal は新しいマップを割り当てます。そうでない場合、Unmarshal は既存のマップを再利用し、既存のエントリを保持します。次に、Unmarshal は、JSON オブジェクトからマップにキーと値のペアを格納します。マップのキー型は、文字列、整数、または encoding.TextUnmarshaler を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d6fc53f4b0d33aa877b6d747d45b96f410c47fc" translate="yes" xml:space="preserve">
          <source>To unmarshal a JSON object into a map, Unmarshal first establishes a map to use. If the map is nil, Unmarshal allocates a new map. Otherwise Unmarshal reuses the existing map, keeping existing entries. Unmarshal then stores key-value pairs from the JSON object into the map. The map's key type must either be any string type, an integer, implement json.Unmarshaler, or implement encoding.TextUnmarshaler.</source>
          <target state="translated">JSON オブジェクトをマップに復元するには、Unmarshal は最初に使用するマップを確立します。マップが nil の場合、Unmarshal は新しいマップを割り当てます。そうでない場合、Unmarshal は既存のマップを再利用し、既存のエントリを保持します。次に、Unmarshal は、JSON オブジェクトからマップにキーと値のペアを格納します。マップのキー型は、任意の文字列型、整数、json.Unmarshaler を実装するか、または encoding.TextUnmarshaler を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="b87bf4d25ca4624c96c72d4062afc898f384fa73" translate="yes" xml:space="preserve">
          <source>To use a Pipeline p to manage multiple clients on a connection, each client should run:</source>
          <target state="translated">パイプラインpを使用して接続上の複数のクライアントを管理するには、各クライアントが実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="f6369ce890fdc06aa42e060bacdc465b9893f8d9" translate="yes" xml:space="preserve">
          <source>To use a fixed length slice, or a preallocated one, use FillBytes.</source>
          <target state="translated">固定長のスライスまたは事前に割り当てられたスライスを使用するには、FillBytesを使用します。</target>
        </trans-unit>
        <trans-unit id="800eefdd201759f89cf9257524a524d86be67a56" translate="yes" xml:space="preserve">
          <source>To use an existing prepared statement on this transaction, see Tx.Stmt.</source>
          <target state="translated">このトランザクションで既存の準備されたステートメントを使用するには、Tx.Stmt.</target>
        </trans-unit>
        <trans-unit id="0c3bf1a32c9b769f727db4118e0b83ca4bb4efa4" translate="yes" xml:space="preserve">
          <source>To use gobs, create an Encoder and present it with a series of data items as values or addresses that can be dereferenced to values. The Encoder makes sure all type information is sent before it is needed. At the receive side, a Decoder retrieves values from the encoded stream and unpacks them into local variables.</source>
          <target state="translated">gobを使用するには、エンコーダを作成して、一連のデータ項目を値または値に参照できるアドレスとして提示します。エンコーダーは、すべての型情報が必要になる前に送信されることを確認します。受信側では、デコーダがエンコードされたストリームから値を取得し、ローカル変数に展開します。</target>
        </trans-unit>
        <trans-unit id="8212c55a0bf9e12d2e296b39237ee5f72cae9d11" translate="yes" xml:space="preserve">
          <source>To use pprof, link this package into your program:</source>
          <target state="translated">pprof を使用するには、このパッケージをプログラムにリンクします。</target>
        </trans-unit>
        <trans-unit id="5c29e8288fd1ed9e073fe203fb55fbea12d062de" translate="yes" xml:space="preserve">
          <source>To use the operating system's file system implementation, use http.Dir:</source>
          <target state="translated">オペレーティングシステムのファイルシステムの実装を使用するには、http.Dirを使用します。</target>
        </trans-unit>
        <trans-unit id="467272919dc8f37262b26b52d65afd618589f7ff" translate="yes" xml:space="preserve">
          <source>To view all available profiles, open &lt;a href=&quot;http://localhost:6060/debug/pprof/&quot;&gt;http://localhost:6060/debug/pprof/&lt;/a&gt; in your browser.</source>
          <target state="translated">使用可能なすべてのプロファイルを表示するには、ブラウザーで&lt;a href=&quot;http://localhost:6060/debug/pprof/&quot;&gt;http：// localhost：6060 / debug / pprof /&lt;/a&gt;を開きます。</target>
        </trans-unit>
        <trans-unit id="4193fe2d5f7ce0c7cb324cbe3968e7d5bd540d92" translate="yes" xml:space="preserve">
          <source>To write a new test suite, create a file whose name ends _test.go that contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the &quot;go test&quot; command is run. For more detail, run &quot;go help test&quot; and &quot;go help testflag&quot;.</source>
          <target state="translated">新しいテストスイートを作成するには、ここで説明されているような TestXxx 関数を含む _test.go という名前のファイルを作成します。このファイルは、テストされるものと同じパッケージに入れてください。このファイルは通常のパッケージビルドからは除外されますが、&quot;go test &quot;コマンドを実行すると含まれます。詳細については、&quot;go help test &quot;と &quot;go help testflag &quot;を実行してください。</target>
        </trans-unit>
        <trans-unit id="f1229c7d06cb687b015bf9729398a1b9b76a455a" translate="yes" xml:space="preserve">
          <source>To write a new test suite, create a file whose name ends _test.go that contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the &amp;ldquo;go test&amp;rdquo; command is run. For more detail, run &amp;ldquo;go help test&amp;rdquo; and &amp;ldquo;go help testflag&amp;rdquo;.</source>
          <target state="translated">新しいテストスイートを作成するには、ここで説明するTestXxx関数を含む、名前が_test.goで終わるファイルを作成します。テストするパッケージと同じパッケージにファイルを置きます。ファイルは通常のパッケージビルドから除外されますが、「go test」コマンドを実行すると含まれます。詳細については、「go help test」と「go help testflag」を実行してください。</target>
        </trans-unit>
        <trans-unit id="2392dbedc5657df0a5a8c5b158593f759c811858" translate="yes" xml:space="preserve">
          <source>To16 converts the IP address ip to a 16-byte representation. If ip is not an IP address (it is the wrong length), To16 returns nil.</source>
          <target state="translated">To16 は IP アドレス ip を 16 バイト表現に変換します。ipがIPアドレスではない場合(長さが間違っている場合)、To16はnilを返します。</target>
        </trans-unit>
        <trans-unit id="4294dda7ebb07f9702b0ce5cc1cb8bbf6e004822" translate="yes" xml:space="preserve">
          <source>To4 converts the IPv4 address ip to a 4-byte representation. If ip is not an IPv4 address, To4 returns nil.</source>
          <target state="translated">To4は、IPv4アドレスのipを4バイト表現に変換する。ipがIPv4アドレスでない場合、To4はnilを返す。</target>
        </trans-unit>
        <trans-unit id="7deadbf704990f79d3e4df9686f8846e15431131" translate="yes" xml:space="preserve">
          <source>ToComplex converts x to a Complex value if x is representable as a Complex. Otherwise it returns an Unknown.</source>
          <target state="translated">ToComplexは、xが複素数として表現可能な場合、xを複素数値に変換します。それ以外の場合は不明を返します。</target>
        </trans-unit>
        <trans-unit id="95e3b1fabb27004c6322f401e410b77c8beecafb" translate="yes" xml:space="preserve">
          <source>ToFloat converts x to a Float value if x is representable as a Float. Otherwise it returns an Unknown.</source>
          <target state="translated">ToFloatは、xがFloatとして表現可能な場合、xをFloatに変換します。それ以外の場合は不明を返します。</target>
        </trans-unit>
        <trans-unit id="f5e30e0ab3c38971ff0a23a0823ee7ab2da27587" translate="yes" xml:space="preserve">
          <source>ToHTML converts comment text to formatted HTML. The comment was prepared by DocReader, so it is known not to have leading, trailing blank lines nor to have trailing spaces at the end of lines. The comment markers have already been removed.</source>
          <target state="translated">ToHTML は、コメントのテキストをフォーマットされた HTML に変換します。コメントはDocReaderで作成されたものなので、先頭に空白行がないことや、行末に空白がないことがわかっています。コメントマーカーはすでに削除されています。</target>
        </trans-unit>
        <trans-unit id="2f4af6e587a0b093dcea21d741f457946dac2539" translate="yes" xml:space="preserve">
          <source>ToInt converts x to an Int value if x is representable as an Int. Otherwise it returns an Unknown.</source>
          <target state="translated">ToIntは、xがIntとして表現可能な場合、xをInt値に変換します。それ以外の場合は不明を返します。</target>
        </trans-unit>
        <trans-unit id="2458b21542ecbc0f90f413b7ee46521686d711b0" translate="yes" xml:space="preserve">
          <source>ToLower</source>
          <target state="translated">ToLower</target>
        </trans-unit>
        <trans-unit id="6fec192e916332e15759b9ef1699226d11bdd209" translate="yes" xml:space="preserve">
          <source>ToLower maps the rune to lower case giving priority to the special mapping.</source>
          <target state="translated">ToLowerは特別なマッピングを優先してルーンを小文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="0d0c9cd1331838718de8a67a4fe3f8edaf0bf598" translate="yes" xml:space="preserve">
          <source>ToLower maps the rune to lower case.</source>
          <target state="translated">ToLowerはルーンを小文字にマップします。</target>
        </trans-unit>
        <trans-unit id="0ad2eff81c68ba7feeec4169aa737e669765ecb3" translate="yes" xml:space="preserve">
          <source>ToLower returns a copy of the byte slice s with all Unicode letters mapped to their lower case.</source>
          <target state="translated">ToLower は、すべての Unicode 文字が小文字にマップされたバイトスライス s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="9ce8fb31583c9a3f9db4dda94a7dc14fcb01df77" translate="yes" xml:space="preserve">
          <source>ToLower returns s with all Unicode letters mapped to their lower case.</source>
          <target state="translated">ToLower は、すべての Unicode 文字が小文字にマップされた s を返します。</target>
        </trans-unit>
        <trans-unit id="7c6c5994143b17fa29690098b9cf21d8ab0c9626" translate="yes" xml:space="preserve">
          <source>ToLowerSpecial</source>
          <target state="translated">ToLowerSpecial</target>
        </trans-unit>
        <trans-unit id="a0c9710a46fb772958369a0897c7471714aeeeb8" translate="yes" xml:space="preserve">
          <source>ToLowerSpecial returns a copy of the string s with all Unicode letters mapped to their lower case using the case mapping specified by c.</source>
          <target state="translated">ToLowerSpecial は、c で指定した大文字小文字のマッピングを使用して、すべての Unicode 文字を小文字にマッピングした文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="cb046f134facad4d83f3df18153937dc0992ea81" translate="yes" xml:space="preserve">
          <source>ToLowerSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their lower case, giving priority to the special casing rules.</source>
          <target state="translated">ToLowerSpecialは、sをUTF-8でエンコードされたバイトとして扱い、特殊なケーシングルールを優先して、すべてのUnicode文字を小文字にマップしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="494e4ed4c22e6b9204664a8671089fb351d285ee" translate="yes" xml:space="preserve">
          <source>ToRDNSequence converts n into a single RDNSequence. The following attributes are encoded as multi-value RDNs:</source>
          <target state="translated">ToRDNSequenceは、nを単一のRDNSequenceに変換します。以下の属性は、多値RDNとしてエンコードされる。</target>
        </trans-unit>
        <trans-unit id="2915308ca78a335773afea42473f5f868e85f100" translate="yes" xml:space="preserve">
          <source>ToSlash returns the result of replacing each separator character in path with a slash ('/') character. Multiple separators are replaced by multiple slashes.</source>
          <target state="translated">ToSlash は、パス内の各セパレータ文字をスラッシュ ('/')文字に置き換えた結果を返します。複数のセパレータは複数のスラッシュに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="ce9610dd835f1269c70383a5f4c28b5a0b063015" translate="yes" xml:space="preserve">
          <source>ToText prepares comment text for presentation in textual output. It wraps paragraphs of text to width or fewer Unicode code points and then prefixes each line with the indent. In preformatted sections (such as program text), it prefixes each non-blank line with preIndent.</source>
          <target state="translated">ToText は、テキスト出力で表示するためのコメントテキストを準備します。それは、テキストの段落を幅以下の Unicode コードポイントに折り返し、各行の先頭にインデントを付けます。予めフォーマットされたセクション(プログラムテキストなど)では、空白ではない各行の先頭に preIndent を付けます。</target>
        </trans-unit>
        <trans-unit id="687882b6dd58f630b4dc72d2b748bc2e5e517506" translate="yes" xml:space="preserve">
          <source>ToTitle</source>
          <target state="translated">ToTitle</target>
        </trans-unit>
        <trans-unit id="16626ca02836f3e96b71ac083f67d856672bee6a" translate="yes" xml:space="preserve">
          <source>ToTitle maps the rune to title case giving priority to the special mapping.</source>
          <target state="translated">ToTitleは特別なマッピングを優先してルーンをタイトルケースにマッピングします。</target>
        </trans-unit>
        <trans-unit id="82652cb33ebff96d0745bbb70b7b14b2b4f648b7" translate="yes" xml:space="preserve">
          <source>ToTitle maps the rune to title case.</source>
          <target state="translated">ToTitleはルーンをタイトルケースにマッピングします。</target>
        </trans-unit>
        <trans-unit id="b6339ce57388ab9579ed7dea7397386892cd79b3" translate="yes" xml:space="preserve">
          <source>ToTitle returns a copy of the string s with all Unicode letters mapped to their Unicode title case.</source>
          <target state="translated">ToTitleは、文字列sのコピーを、すべてのUnicode文字がそのUnicodeタイトルケースにマップされた状態で返します。</target>
        </trans-unit>
        <trans-unit id="7c8bdbfdcd905744bd6bd92b5f2c2fe7b0b2a605" translate="yes" xml:space="preserve">
          <source>ToTitle treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their title case.</source>
          <target state="translated">ToTitleはsをUTF-8でエンコードされたバイトとして扱い、すべてのUnicode文字をタイトルケースにマッピングしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="a7e031c3da9f939af57fa1eda658027190b07385" translate="yes" xml:space="preserve">
          <source>ToTitleSpecial</source>
          <target state="translated">ToTitleSpecial</target>
        </trans-unit>
        <trans-unit id="6c2252d5e081e10993ad66199a6ce0f9c88000da" translate="yes" xml:space="preserve">
          <source>ToTitleSpecial returns a copy of the string s with all Unicode letters mapped to their Unicode title case, giving priority to the special casing rules.</source>
          <target state="translated">ToTitleSpecial は、すべての Unicode 文字がその Unicode タイトルケースにマップされた文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="03ad764cc2cf6e71773b140dd2607d85f903d19e" translate="yes" xml:space="preserve">
          <source>ToTitleSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their title case, giving priority to the special casing rules.</source>
          <target state="translated">ToTitleSpecial は s を UTF-8 エンコードされたバイトとして扱い、特殊なケーシングルールを優先して、すべての Unicode 文字をタイトルケースにマップしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="0c72db5394ee29e5b12a191ab1a0f08579c43c0b" translate="yes" xml:space="preserve">
          <source>ToUpper</source>
          <target state="translated">ToUpper</target>
        </trans-unit>
        <trans-unit id="8830c3933f2751182fd45204e5ac41041c190ab0" translate="yes" xml:space="preserve">
          <source>ToUpper maps the rune to upper case giving priority to the special mapping.</source>
          <target state="translated">ToUpperは、特別なマッピングを優先してルーンを大文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="9762b6a1a0f8f68d12efc0853373d81b1198caf9" translate="yes" xml:space="preserve">
          <source>ToUpper maps the rune to upper case.</source>
          <target state="translated">ToUpperはルーンを大文字にマッピングします。</target>
        </trans-unit>
        <trans-unit id="587e23bede12f256b7a2b187d202dc77575c043c" translate="yes" xml:space="preserve">
          <source>ToUpper returns a copy of the byte slice s with all Unicode letters mapped to their upper case.</source>
          <target state="translated">ToUpper は、すべての Unicode 文字が大文字にマップされたバイトスライス s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="1567cbaa93e2803c0387b5e052b94febf77b0dce" translate="yes" xml:space="preserve">
          <source>ToUpper returns s with all Unicode letters mapped to their upper case.</source>
          <target state="translated">ToUpper は、すべての Unicode 文字が大文字にマップされた s を返します。</target>
        </trans-unit>
        <trans-unit id="e8e18cf71c085c852139f777c3a777629eaba1d4" translate="yes" xml:space="preserve">
          <source>ToUpperSpecial</source>
          <target state="translated">ToUpperSpecial</target>
        </trans-unit>
        <trans-unit id="ca298ca7f1f797ffc04335283b821c4509371407" translate="yes" xml:space="preserve">
          <source>ToUpperSpecial returns a copy of the string s with all Unicode letters mapped to their upper case using the case mapping specified by c.</source>
          <target state="translated">ToUpperSpecial は、c で指定した大文字と小文字のマッピングを使用して、すべての Unicode 文字を大文字にマッピングした文字列 s のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="e092426a213e149b750e5c739fd48245f35d6f1d" translate="yes" xml:space="preserve">
          <source>ToUpperSpecial treats s as UTF-8-encoded bytes and returns a copy with all the Unicode letters mapped to their upper case, giving priority to the special casing rules.</source>
          <target state="translated">ToUpperSpecial は s を UTF-8 でエンコードされたバイトとして扱い、特殊なケーシングルールを優先して、すべての Unicode 文字を大文字にマップしたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="2918f3c11590ab69ac359dd26f3078e378d4433f" translate="yes" xml:space="preserve">
          <source>ToValidUTF8 returns a copy of the string s with each run of invalid UTF-8 byte sequences replaced by the replacement string, which may be empty.</source>
          <target state="translated">ToValidUTF8は、無効なUTF-8バイト列の各実行が置換文字列で置き換えられた文字列sのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="8ddb5599f330dcf8a14e657f65440d11567b1275" translate="yes" xml:space="preserve">
          <source>ToValidUTF8 treats s as UTF-8-encoded bytes and returns a copy with each run of bytes representing invalid UTF-8 replaced with the bytes in replacement, which may be empty.</source>
          <target state="translated">ToValidUTF8は、sをUTF-8でエンコードされたバイトとして扱い、無効なUTF-8を表すバイトの各実行が置換バイトで置き換えられたコピーを返します。</target>
        </trans-unit>
        <trans-unit id="0e6e43d719b59d2f4b6d64b0d7506414e902ac66" translate="yes" xml:space="preserve">
          <source>Token expands self-closing elements such as &amp;lt;br/&amp;gt; into separate start and end elements returned by successive calls.</source>
          <target state="translated">トークンは、&amp;lt;br/&amp;gt;などの自己終了要素を、連続した呼び出しによって返される個別の開始要素と終了要素に展開します。</target>
        </trans-unit>
        <trans-unit id="76c580b187cf47d391aca0669ed50d6bdc842bd1" translate="yes" xml:space="preserve">
          <source>Token guarantees that the StartElement and EndElement tokens it returns are properly nested and matched: if Token encounters an unexpected end element or EOF before all expected end elements, it will return an error.</source>
          <target state="translated">Tokenは、それが返すStartElementとEndElementトークンが適切に入れ子になって一致していることを保証します。</target>
        </trans-unit>
        <trans-unit id="20226a10555b22d829b042743665e60ca5ccfcef" translate="yes" xml:space="preserve">
          <source>Token guarantees that the delimiters [ ] { } it returns are properly nested and matched: if Token encounters an unexpected delimiter in the input, it will return an error.</source>
          <target state="translated">Token は、それが返すデリミタ[]{}が適切にネストされ、マッチしていることを保証します。</target>
        </trans-unit>
        <trans-unit id="d280a9431f5d23758a555c6128dd19caf82e90f5" translate="yes" xml:space="preserve">
          <source>Token implements XML name spaces as described by &lt;a href=&quot;https://www.w3.org/TR/REC-xml-names/&quot;&gt;https://www.w3.org/TR/REC-xml-names/&lt;/a&gt;. Each of the Name structures contained in the Token has the Space set to the URL identifying its name space when known. If Token encounters an unrecognized name space prefix, it uses the prefix as the Space rather than report an error.</source>
          <target state="translated">トークンは、&lt;a href=&quot;https://www.w3.org/TR/REC-xml-names/&quot;&gt;https：//www.w3.org/TR/REC-xml-names/で&lt;/a&gt;説明されているようにXML名前空間を実装します。トークンに含まれる各名前構造には、既知の場合にその名前空間を識別するURLに設定されたスペースがあります。トークンは、認識されない名前空間プレフィックスを検出した場合、エラーを報告するのではなく、プレフィックスをスペースとして使用します。</target>
        </trans-unit>
        <trans-unit id="3daac00da8a20a3986aa0fc3ba367725df5511ad" translate="yes" xml:space="preserve">
          <source>Token is the set of lexical tokens of the Go programming language.</source>
          <target state="translated">トークンは、Goプログラミング言語の語彙トークンの集合です。</target>
        </trans-unit>
        <trans-unit id="347b518b7ad14bbb5cbe2525a0e1cce83a18759e" translate="yes" xml:space="preserve">
          <source>Token returns the next JSON token in the input stream. At the end of the input stream, Token returns nil, io.EOF.</source>
          <target state="translated">Tokenは入力ストリームの次のJSONトークンを返します。入力ストリームの最後には、Tokenはnil、io.EOFを返します。</target>
        </trans-unit>
        <trans-unit id="fb460c5b7cbda3e107ef11644b412428d80a074a" translate="yes" xml:space="preserve">
          <source>Token returns the next XML token in the input stream. At the end of the input stream, Token returns nil, io.EOF.</source>
          <target state="translated">Tokenは入力ストリームの次のXMLトークンを返します。入力ストリームの最後には、Tokenはnil、io.EOFを返します。</target>
        </trans-unit>
        <trans-unit id="1f5c5f661288844b6f2ecd574998016319ee9039" translate="yes" xml:space="preserve">
          <source>TokenString returns a printable string for a token or Unicode character.</source>
          <target state="translated">TokenString は、トークンまたは Unicode 文字の印刷可能な文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1a94c716310bd537564c947b302962f8f4ba3d71" translate="yes" xml:space="preserve">
          <source>TokenText returns the string corresponding to the most recently scanned token. Valid after calling Scan and in calls of Scanner.Error.</source>
          <target state="translated">TokenText は、最近スキャンされたトークンに対応する文字列を返します。Scan を呼び出した後、および Scanner.Error.</target>
        </trans-unit>
        <trans-unit id="a7a728d87ab600f19a872de7d10dd426fc51a410" translate="yes" xml:space="preserve">
          <source>ToolDir is the directory containing build tools.</source>
          <target state="translated">ToolDirはビルドツールが入っているディレクトリです。</target>
        </trans-unit>
        <trans-unit id="84f632ebde53766b4762c1e662046a0bdb1f9bee" translate="yes" xml:space="preserve">
          <source>Trace responds with the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified. The package initialization registers it as /debug/pprof/trace.</source>
          <target state="translated">トレースは、バイナリ形式の実行トレースで応答します。トレースは秒単位で指定された時間だけ持続します。パッケージの初期化では /debug/pprof/trace として登録されます。</target>
        </trans-unit>
        <trans-unit id="37fcf61c233a1ae946b84a69b2de57281c31900c" translate="yes" xml:space="preserve">
          <source>Tracing runtime activities</source>
          <target state="translated">ランタイムアクティビティのトレース</target>
        </trans-unit>
        <trans-unit id="bf930f74e883c038922957814259a08b1e5e21b8" translate="yes" xml:space="preserve">
          <source>TrailerPrefix is a magic prefix for ResponseWriter.Header map keys that, if present, signals that the map entry is actually for the response trailers, and not the response headers. The prefix is stripped after the ServeHTTP call finishes and the values are sent in the trailers.</source>
          <target state="translated">TrailerPrefix は、ResponseWriter.Header マップ・キーの魔法の接頭辞で、これが存在する場合は、マップ・エントリが実際にはレスポンス・トレーラのためのものであり、 レスポンス・ヘッダのためのものではないことを示します。このプレフィックスは、ServeHTTP 呼び出しが終了し、値がトレーラで送信された後に取り除かれます。</target>
        </trans-unit>
        <trans-unit id="d08af63de6fd07c70bf3724749899391ccd80f36" translate="yes" xml:space="preserve">
          <source>TrailingZeroBits returns the number of consecutive least significant zero bits of |x|.</source>
          <target state="translated">TrailingZeroBitsは、|x|の連続した最下位ゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="173da913d8c53620762557efaa7f685234fe0888" translate="yes" xml:space="preserve">
          <source>TrailingZeros returns the number of trailing zero bits in x; the result is UintSize for x == 0.</source>
          <target state="translated">TrailingZerosは、xの末尾にあるゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="3880be13b458ed7d8fd6226152f09a84df60affe" translate="yes" xml:space="preserve">
          <source>TrailingZeros16</source>
          <target state="translated">TrailingZeros16</target>
        </trans-unit>
        <trans-unit id="ac0e8b17c92ec54246a916c7c60a5898e47d2440" translate="yes" xml:space="preserve">
          <source>TrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0.</source>
          <target state="translated">TrailingZeros16 は、x の末尾にあるゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="9ccb48d1009c49f2458e70054ffb06de2c2e52b1" translate="yes" xml:space="preserve">
          <source>TrailingZeros32</source>
          <target state="translated">TrailingZeros32</target>
        </trans-unit>
        <trans-unit id="ef12b2bd72258ab1ea24487faaf1b36b6624d53b" translate="yes" xml:space="preserve">
          <source>TrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0.</source>
          <target state="translated">TrailingZeros32 は、x の末尾のゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="8645dda5fc4ccfbadfe816f019759dd903a6b384" translate="yes" xml:space="preserve">
          <source>TrailingZeros64</source>
          <target state="translated">TrailingZeros64</target>
        </trans-unit>
        <trans-unit id="9c1806ac56295eeda1305a5c016e361813241700" translate="yes" xml:space="preserve">
          <source>TrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0.</source>
          <target state="translated">TrailingZeros64 は、x の末尾のゼロビット数を返します。</target>
        </trans-unit>
        <trans-unit id="56b19e298a41e007826d31fb347a4fad087efb44" translate="yes" xml:space="preserve">
          <source>TrailingZeros8</source>
          <target state="translated">TrailingZeros8</target>
        </trans-unit>
        <trans-unit id="a51f3a70d56ba40f5381588670a32ee940f76014" translate="yes" xml:space="preserve">
          <source>TrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0.</source>
          <target state="translated">TrailingZeros8 は、x の末尾にあるゼロビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="c46e526f87b0902843d5c82001fbd44e74d2f2d7" translate="yes" xml:space="preserve">
          <source>Transport is an implementation of RoundTripper that supports HTTP, HTTPS, and HTTP proxies (for either HTTP or HTTPS with CONNECT).</source>
          <target state="translated">トランスポートは、HTTP、HTTPS、HTTPプロキシ(CONNECTでHTTPまたはHTTPSのいずれかに対応)をサポートするRoundTripperの実装です。</target>
        </trans-unit>
        <trans-unit id="28030ddb48df392e29b838aa75a73353cb5390cf" translate="yes" xml:space="preserve">
          <source>Transport only retries a request upon encountering a network error if the request is idempotent and either has no body or has its Request.GetBody defined. HTTP requests are considered idempotent if they have HTTP methods GET, HEAD, OPTIONS, or TRACE; or if their Header map contains an &quot;Idempotency-Key&quot; or &quot;X-Idempotency-Key&quot; entry. If the idempotency key value is a zero-length slice, the request is treated as idempotent but the header is not sent on the wire.</source>
          <target state="translated">トランスポートは、リクエストがidempotentで、ボディを持たないかRequest.GetBodyが定義されている場合にのみ、ネットワークエラーに遭遇したリクエストを再試行します。HTTPリクエストがHTTPメソッドGET、HEAD、OPTIONS、またはTRACEを持っている場合、またはそのヘッダーマップに「Idempotency-Key」または「X-Idempotency-Key」エントリが含まれている場合、HTTPリクエストはidempotentであるとみなされます。idempotency-Key の値がゼロ長のスライスである場合、リクエストは idempotent として扱われますが、ヘッダはワイヤ上では送信されません。</target>
        </trans-unit>
        <trans-unit id="3a7dd5c9993ccdafc8353b9b9fef9d118c35957f" translate="yes" xml:space="preserve">
          <source>Transport only retries a request upon encountering a network error if the request is idempotent and either has no body or has its Request.GetBody defined. HTTP requests are considered idempotent if they have HTTP methods GET, HEAD, OPTIONS, or TRACE; or if their Header map contains an &quot;Idempotency-Key&quot; or &quot;X-Idempotency-Key&quot; entry. If the idempotency key value is an zero-length slice, the request is treated as idempotent but the header is not sent on the wire.</source>
          <target state="translated">トランスポートは、リクエストがidempotentで、ボディを持たないかRequest.GetBodyが定義されている場合にのみ、ネットワークエラーに遭遇したリクエストを再試行します。HTTPリクエストがHTTPメソッドGET、HEAD、OPTIONS、またはTRACEを持っている場合、またはそのヘッダーマップに「Idempotency-Key」または「X-Idempotency-Key」エントリが含まれている場合、HTTPリクエストはidempotentであるとみなされます。idempotency-Key の値がゼロ長のスライスである場合、リクエストは idempotent として扱われますが、ヘッダはワイヤ上では送信されません。</target>
        </trans-unit>
        <trans-unit id="a83654a5778fc158c90c291f8461263d34090fc9" translate="yes" xml:space="preserve">
          <source>Transport uses HTTP/1.1 for HTTP URLs and either HTTP/1.1 or HTTP/2 for HTTPS URLs, depending on whether the server supports HTTP/2, and how the Transport is configured. The DefaultTransport supports HTTP/2. To explicitly enable HTTP/2 on a transport, use golang.org/x/net/http2 and call ConfigureTransport. See the package docs for more about HTTP/2.</source>
          <target state="translated">トランスポートは、HTTP URL には HTTP/1.1 を使用し、HTTPS URL には HTTP/1.1 または HTTP/2 を使用します。DefaultTransport は HTTP/2 をサポートしています。トランスポートで HTTP/2 を明示的に有効にするには、golang.org/x/net/http2 を使用して ConfigureTransport を呼び出します。HTTP/2 の詳細については、パッケージのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5cba3ebebe9967d6b406fbd61cc05ffea9ddcf56" translate="yes" xml:space="preserve">
          <source>Transports should be reused instead of created as needed. Transports are safe for concurrent use by multiple goroutines.</source>
          <target state="translated">トランスポートは必要に応じて作成されるのではなく、再利用されるべきです。トランスポートは、複数のゴローチンが同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="cf5547182a53dd7a581affea62258ee59e262b85" translate="yes" xml:space="preserve">
          <source>Tree is the representation of a single parsed template.</source>
          <target state="translated">ツリーは、1つの解析されたテンプレートの表現です。</target>
        </trans-unit>
        <trans-unit id="0266abd25371ad4670b041dda4dc487ed199d641" translate="yes" xml:space="preserve">
          <source>Trim</source>
          <target state="translated">Trim</target>
        </trans-unit>
        <trans-unit id="abb910d5bd0bd319cf1d5ef7ad6a5112dc6c0823" translate="yes" xml:space="preserve">
          <source>Trim returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed.</source>
          <target state="translated">Trim は、文字列 s のスライスを返し、citset に含まれるすべての先頭と末尾の Unicode コードポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="4f07669cc579ec14df811b3ca5fc72fde4f78f58" translate="yes" xml:space="preserve">
          <source>Trim returns a subslice of s by slicing off all leading and trailing UTF-8-encoded code points contained in cutset.</source>
          <target state="translated">Trimは、カットセットに含まれるすべての先頭と末尾のUTF-8エンコードされたコードポイントをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="ba1962dfeb4e006658709dd72ff841213f7d1db0" translate="yes" xml:space="preserve">
          <source>TrimBytes returns b without leading and trailing ASCII space.</source>
          <target state="translated">TrimBytes は、先頭と末尾に ASCII スペースを入れずに b を返します。</target>
        </trans-unit>
        <trans-unit id="a48987784fdcef3e797c48099ede26a7260db2de" translate="yes" xml:space="preserve">
          <source>TrimFunc</source>
          <target state="translated">TrimFunc</target>
        </trans-unit>
        <trans-unit id="03343404f4f9dd2a23fda87bf2a4805f3806059d" translate="yes" xml:space="preserve">
          <source>TrimFunc returns a slice of the string s with all leading and trailing Unicode code points c satisfying f(c) removed.</source>
          <target state="translated">TrimFunc は、f(c)を満たすすべての先頭と末尾の Unicode コード点 c を削除した文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="625b4a484772db3f9992725f710f3d189c47d0db" translate="yes" xml:space="preserve">
          <source>TrimFunc returns a subslice of s by slicing off all leading and trailing UTF-8-encoded code points c that satisfy f(c).</source>
          <target state="translated">TrimFuncは、f(c)を満たすUTF-8エンコードされたコード点cのうち、先頭と末尾のすべてのコード点をスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="b796ff265d1cc90c9b78c76a3f12dd8cbff027a6" translate="yes" xml:space="preserve">
          <source>TrimLeft</source>
          <target state="translated">TrimLeft</target>
        </trans-unit>
        <trans-unit id="3406f99b35b8781b2e30c5d4f1fb92b18ccfb0a0" translate="yes" xml:space="preserve">
          <source>TrimLeft returns a slice of the string s with all leading Unicode code points contained in cutset removed.</source>
          <target state="translated">TrimLeft は、文字列 s のスライスを返し、カットセットに含まれるすべての先頭の Unicode コードポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="b52b880dc01fa22cd46ff385a39b5609f426247b" translate="yes" xml:space="preserve">
          <source>TrimLeft returns a subslice of s by slicing off all leading UTF-8-encoded code points contained in cutset.</source>
          <target state="translated">TrimLeftは、カットセットに含まれるすべての先頭のUTF-8エンコードされたコードポイントをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="0dda8e3188c1b3df6f3a5c77e5010dd280c96425" translate="yes" xml:space="preserve">
          <source>TrimLeftFunc</source>
          <target state="translated">TrimLeftFunc</target>
        </trans-unit>
        <trans-unit id="2a771ac81b0579d70a2a4390b741d5fed266d711" translate="yes" xml:space="preserve">
          <source>TrimLeftFunc returns a slice of the string s with all leading Unicode code points c satisfying f(c) removed.</source>
          <target state="translated">TrimLeftFunc は、f(c)を満たすすべての先頭の Unicode コード点 c を削除した文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="49c15e330f226f8800b406f97802237df2f3f947" translate="yes" xml:space="preserve">
          <source>TrimLeftFunc treats s as UTF-8-encoded bytes and returns a subslice of s by slicing off all leading UTF-8-encoded code points c that satisfy f(c).</source>
          <target state="translated">TrimLeftFuncは、sをUTF-8エンコードされたバイトとして扱い、f(c)を満たす先頭のUTF-8エンコードされたコード点cをすべて切り取って、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="f6781400f56acf5b8bc035e02b3cdac08b09ae64" translate="yes" xml:space="preserve">
          <source>TrimPrefix</source>
          <target state="translated">TrimPrefix</target>
        </trans-unit>
        <trans-unit id="0cdb8742fe0e8f96e729ab0932195bcd75f8a8b2" translate="yes" xml:space="preserve">
          <source>TrimPrefix returns s without the provided leading prefix string. If s doesn't start with prefix, s is returned unchanged.</source>
          <target state="translated">TrimPrefixは、指定された先頭の接頭辞文字列を除いたsを返します。s が接頭辞で始まらない場合、s は変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="3a3dc250671844d052f305fc24e91daa5dfaf78b" translate="yes" xml:space="preserve">
          <source>TrimRight</source>
          <target state="translated">TrimRight</target>
        </trans-unit>
        <trans-unit id="f36ec5b5c4656d60b56116c5bdb688d629f84c86" translate="yes" xml:space="preserve">
          <source>TrimRight returns a slice of the string s, with all trailing Unicode code points contained in cutset removed.</source>
          <target state="translated">TrimRight は、文字列 s のスライスを返し、カットセットに含まれる末尾の Unicode コードポイントをすべて削除します。</target>
        </trans-unit>
        <trans-unit id="3ca08db3862d11ac280fa859c98a5062cca7758f" translate="yes" xml:space="preserve">
          <source>TrimRight returns a subslice of s by slicing off all trailing UTF-8-encoded code points that are contained in cutset.</source>
          <target state="translated">TrimRightは、カットセットに含まれるすべての末尾のUTF-8エンコードされたコードポイントをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="2face4904f1360f377438b017515ff3c2359f581" translate="yes" xml:space="preserve">
          <source>TrimRightFunc</source>
          <target state="translated">TrimRightFunc</target>
        </trans-unit>
        <trans-unit id="91f9e348fa7e18e840cf0ac3e8dc3a6295b78762" translate="yes" xml:space="preserve">
          <source>TrimRightFunc returns a slice of the string s with all trailing Unicode code points c satisfying f(c) removed.</source>
          <target state="translated">TrimRightFunc は、f(c)を満たす末尾の Unicode コード点 c をすべて削除した文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="af58ad241c06498d7e5d96dabf6a334e19cb450d" translate="yes" xml:space="preserve">
          <source>TrimRightFunc returns a subslice of s by slicing off all trailing UTF-8-encoded code points c that satisfy f(c).</source>
          <target state="translated">TrimRightFuncは、f(c)を満たすすべての末尾のUTF-8エンコードされたコード点cをスライスして、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="3b9759ef917cd034e3fff66af6781ac1144ddf76" translate="yes" xml:space="preserve">
          <source>TrimSpace</source>
          <target state="translated">TrimSpace</target>
        </trans-unit>
        <trans-unit id="fb7131e90264c0cc3ce43bd31575b4282b5313c8" translate="yes" xml:space="preserve">
          <source>TrimSpace returns a slice of the string s, with all leading and trailing white space removed, as defined by Unicode.</source>
          <target state="translated">TrimSpace は、Unicode で定義されているように、先頭と末尾の空白をすべて取り除き、文字列 s のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="a187e5cf0dba2afc1b0487c662e640873854f7ec" translate="yes" xml:space="preserve">
          <source>TrimSpace returns a subslice of s by slicing off all leading and trailing white space, as defined by Unicode.</source>
          <target state="translated">TrimSpaceは、Unicodeで定義されているように、先頭と末尾のホワイトスペースをすべて切り取って、sのサブスライスを返します。</target>
        </trans-unit>
        <trans-unit id="b11fe2b91f56619862961192ca92d40d14d67c9d" translate="yes" xml:space="preserve">
          <source>TrimString returns s without leading and trailing ASCII space.</source>
          <target state="translated">TrimStringは、先頭と末尾にASCIIスペースを入れずにsを返します。</target>
        </trans-unit>
        <trans-unit id="31564f1b1fc10c6dcf98b0ba8f0d174cf833e697" translate="yes" xml:space="preserve">
          <source>TrimSuffix</source>
          <target state="translated">TrimSuffix</target>
        </trans-unit>
        <trans-unit id="92a8263afbc0fa4c5341e4098b039907219bbb45" translate="yes" xml:space="preserve">
          <source>TrimSuffix returns s without the provided trailing suffix string. If s doesn't end with suffix, s is returned unchanged.</source>
          <target state="translated">TrimSuffix は、指定された末尾のサフィックス文字列を除いた s を返します。s がサフィックスで終わっていない場合、s は変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="0b8272d0bb8c9199c72411e406f2643a93b7ccca" translate="yes" xml:space="preserve">
          <source>Trunc</source>
          <target state="translated">Trunc</target>
        </trans-unit>
        <trans-unit id="4ac265259166695b742658a267b27c17c43d2d87" translate="yes" xml:space="preserve">
          <source>Trunc returns the integer value of x.</source>
          <target state="translated">Truncはxの整数値を返します。</target>
        </trans-unit>
        <trans-unit id="a6f2f1d850d6a1bef2ab8b526d322b73779287f1" translate="yes" xml:space="preserve">
          <source>Truncate changes the size of the file. It does not change the I/O offset. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Truncateはファイルのサイズを変更します。I/Oオフセットは変更されません。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="062334176014417d736c93d4f00898bc3b617151" translate="yes" xml:space="preserve">
          <source>Truncate changes the size of the named file. If the file is a symbolic link, it changes the size of the link's target. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Truncate は、指定されたファイルのサイズを変更します。ファイルがシンボリックリンクの場合、リンク先のサイズを変更します。エラーが発生した場合は、*PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="e8c4ef35e7ba4d40ba29121e1bd589ff3e80bcb3" translate="yes" xml:space="preserve">
          <source>Truncate discards all but the first n unread bytes from the buffer but continues to use the same allocated storage. It panics if n is negative or greater than the length of the buffer.</source>
          <target state="translated">Truncate は、バッファから最初の n バイトを除くすべての未読バイトを破棄しますが、同じ割り当てられたストレージを使用し続けます。n が負の値、またはバッファの長さよりも大きい場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="32beb0b08a1549453f279d1334d844a2afaea49a" translate="yes" xml:space="preserve">
          <source>Truncate operates on the time as an absolute duration since the zero time; it does not operate on the presentation form of the time. Thus, Truncate(Hour) may return a time with a non-zero minute, depending on the time's Location.</source>
          <target state="translated">Truncateは、ゼロ時刻からの絶対的な時間としての時刻を操作します。したがって、Truncate(Hour)は、時刻のLocationに応じて、0ではない分を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="71998d5a06a6fc24a70aad616e3e9f7ea3e57939" translate="yes" xml:space="preserve">
          <source>Truncate returns the result of rounding d toward zero to a multiple of m. If m &amp;lt;= 0, Truncate returns d unchanged.</source>
          <target state="translated">Truncateは、dをゼロに向かってmの倍数に丸めた結果を返します。m &amp;lt;= 0の場合、Truncateはdを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="498fecdf2960f4ea8c81a3634a3c6208f18d44bd" translate="yes" xml:space="preserve">
          <source>Truncate returns the result of rounding t down to a multiple of d (since the zero time). If d &amp;lt;= 0, Truncate returns t stripped of any monotonic clock reading but otherwise unchanged.</source>
          <target state="translated">Truncateは、tをdの倍数に切り捨てた結果を返します（ゼロ時間以降）。d &amp;lt;= 0の場合、Truncateはtを取り除き、単調なクロックの読み取り値を取り除きますが、それ以外は変更しません。</target>
        </trans-unit>
        <trans-unit id="7a922bb8e2913cab6dcad5ba9140345fb42fa502" translate="yes" xml:space="preserve">
          <source>TruncateWriter returns a Writer that writes to w but stops silently after n bytes.</source>
          <target state="translated">TruncateWriterは、wに書き込んだ後、nバイト後に無言で停止するWriterを返します。</target>
        </trans-unit>
        <trans-unit id="66617c3163f43664fa6ddb9c95a7d88a932b782b" translate="yes" xml:space="preserve">
          <source>Truthy returns the JavaScript &quot;truthiness&quot; of the value v. In JavaScript, false, 0, &quot;&quot;, null, undefined, and NaN are &quot;falsy&quot;, and everything else is &quot;truthy&quot;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&lt;/a&gt;.</source>
          <target state="translated">Truthyは、値vのJavaScriptの「真実性」を返します。JavaScriptでは、false、0、「」、null、未定義、およびNaNは「偽」で、その他はすべて「真実」です。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;https://developer.mozilla.org/en-US/docs/Glossary/Truthyを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c26728b3acc2b9a34150900b5536db30082f4043" translate="yes" xml:space="preserve">
          <source>TryRecv attempts to receive a value from the channel v but will not block. It panics if v's Kind is not Chan. If the receive delivers a value, x is the transferred value and ok is true. If the receive cannot finish without blocking, x is the zero Value and ok is false. If the channel is closed, x is the zero value for the channel's element type and ok is false.</source>
          <target state="translated">TryRecv はチャンネル v から値を受信しようとしますが、ブロックされません。v の Kind が Chan でない場合はパニックになります。受信した値が配送された場合、x は転送された値であり、ok は真です。受信がブロックされずに終了できない場合、x はゼロ値であり、ok は false である。チャンネルが閉じられている場合、x はチャンネルの要素タイプのゼロ値であり、ok は false です。</target>
        </trans-unit>
        <trans-unit id="febc1b0170a31256a4ba31c38646abd1c14c7afb" translate="yes" xml:space="preserve">
          <source>TrySend attempts to send x on the channel v but will not block. It panics if v's Kind is not Chan. It reports whether the value was sent. As in Go, x's value must be assignable to the channel's element type.</source>
          <target state="translated">TrySend はチャンネル v で x を送ろうとしますが、ブロックされません。vのKindがChanでない場合はパニックになります。値が送信されたかどうかを報告します。Go の場合と同様に、x の値はチャンネルの要素型に代入可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7fd5a63a31a17c2aa8f2b5b0d5183f5173b04681" translate="yes" xml:space="preserve">
          <source>Two keys are only considered to have the same value if they have the same Curve value. Note that for example elliptic.P256() and elliptic.P256().Params() are different values, as the latter is a generic not constant time implementation.</source>
          <target state="translated">2 つのキーが同じ値を持つとみなされるのは、Curve の値が同じである場合のみです。後者は一定時間ではない一般的な実装なので、例えば elliptic.P256()とelliptic.P256().Params()は異なる値であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ad904f452afce8318d85fd92e9c6e068ca4fed6e" translate="yes" xml:space="preserve">
          <source>Two sets of interfaces are included in this package. When a more abstract interface isn't necessary, there are functions for encrypting/decrypting with v1.5/OAEP and signing/verifying with v1.5/PSS. If one needs to abstract over the public key primitive, the PrivateKey type implements the Decrypter and Signer interfaces from the crypto package.</source>
          <target state="translated">本パッケージには、2 種類のインタフェースが含まれています。より抽象的なインタフェースが不要な場合は、v1.5/OAEP での暗号化/復号化と v1.5/PSS での署名/検証のための関数がある。公開鍵プリミティブを抽象化する必要がある場合、PrivateKey 型は crypto パッケージの Decrypter および Signer インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="042f2d498c44806f60201f1f05491910d5c73fe8" translate="yes" xml:space="preserve">
          <source>Two sets of interfaces are included in this package. When a more abstract interface isn't necessary, there are functions for encrypting/decrypting with v1.5/OAEP and signing/verifying with v1.5/PSS. If one needs to abstract over the public-key primitive, the PrivateKey struct implements the Decrypter and Signer interfaces from the crypto package.</source>
          <target state="translated">本パッケージには、2 種類のインタフェースが含まれています。より抽象的なインタフェースが不要な場合は、v1.5/OAEP での暗号化/復号化、および v1.5/PSS での署名/検証のための関数があります。公開鍵プリミティブを抽象化する必要がある場合は、PrivateKey 構造体が crypto パッケージの Decrypter および Signer インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="021677bbd9ee4b61e5a1312cf21d452a27661c48" translate="yes" xml:space="preserve">
          <source>Tx is a transaction.</source>
          <target state="translated">Txはトランザクションです。</target>
        </trans-unit>
        <trans-unit id="02cdcf0d841ea4d5e8abf2653c842d138120149a" translate="yes" xml:space="preserve">
          <source>Tx is an in-progress database transaction.</source>
          <target state="translated">Txは進行中のデータベーストランザクションです。</target>
        </trans-unit>
        <trans-unit id="41b6053676814b4fe97b2c9be9a306ee614bfa3d" translate="yes" xml:space="preserve">
          <source>Tx.ExecContext</source>
          <target state="translated">Tx.ExecContext</target>
        </trans-unit>
        <trans-unit id="2825856698e10e430365413d889b83a20654a02a" translate="yes" xml:space="preserve">
          <source>Tx.Prepare</source>
          <target state="translated">Tx.Prepare</target>
        </trans-unit>
        <trans-unit id="ef76ba4edb63dbd2cd7bf54f9037e276e1229e5a" translate="yes" xml:space="preserve">
          <source>Tx.Rollback</source>
          <target state="translated">Tx.Rollback</target>
        </trans-unit>
        <trans-unit id="a83fe983647bcf7e1590d7bef39b1b437680667a" translate="yes" xml:space="preserve">
          <source>TxOptions holds the transaction options to be used in DB.BeginTx.</source>
          <target state="translated">TxOptionsは、DB.BeginTxで使用するトランザクションオプションを保持します。</target>
        </trans-unit>
        <trans-unit id="46eaf072cf758f74571ec8685b65883630652645" translate="yes" xml:space="preserve">
          <source>TxOptions holds the transaction options.</source>
          <target state="translated">TxOptionsは、トランザクションオプションを保持します。</target>
        </trans-unit>
        <trans-unit id="68e7b01d33d203d9281e2f2dd8f3398104376276" translate="yes" xml:space="preserve">
          <source>Typ contains the predeclared *Basic types indexed by their corresponding BasicKind.</source>
          <target state="translated">Typは,対応するBasicKindによってインデックス化された宣言済みの*Basic型を含みます.</target>
        </trans-unit>
        <trans-unit id="64f24b17ea9baa36a77dc3d1afdc32b1a420fb9e" translate="yes" xml:space="preserve">
          <source>Type flags for Header.Typeflag.</source>
          <target state="translated">Header.Typeflagの型フラグです。</target>
        </trans-unit>
        <trans-unit id="04ccb52737e3e40430c97b234b8f24e390173f8b" translate="yes" xml:space="preserve">
          <source>Type inference computes the type (Type) of every expression (ast.Expr) and checks for compliance with the language specification. Use Info.Types[expr].Type for the results of type inference.</source>
          <target state="translated">型推論は、すべての式(ast.Expr)の型(Type)を計算し、言語仕様に準拠しているかどうかをチェックします。型推論の結果は、Info.Types[expr].Typeを使用します。</target>
        </trans-unit>
        <trans-unit id="8035b14525c84dd4e5349419c0ff657e153c1c32" translate="yes" xml:space="preserve">
          <source>Type is found in Header.Type.</source>
          <target state="translated">TypeはHeader.Typeにあります。</target>
        </trans-unit>
        <trans-unit id="ec7bc4958b2c43e87f98f2ef7e1adb5d065d5c5e" translate="yes" xml:space="preserve">
          <source>Type is here for the purposes of documentation only. It is a stand-in for any Go type, but represents the same type for any given function invocation.</source>
          <target state="translated">型は、ここでは文書化のみを目的としています。これは、任意の Go 型の代用となりますが、任意の関数の呼び出しに対して同じ型を表します。</target>
        </trans-unit>
        <trans-unit id="233ac19906546712346f536e7ee3880b82162310" translate="yes" xml:space="preserve">
          <source>Type is the documentation for a type declaration.</source>
          <target state="translated">Typeは、型宣言のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="d3c0b263d515209e36ac606a05719bce899addba" translate="yes" xml:space="preserve">
          <source>Type is the representation of a Go type.</source>
          <target state="translated">型は囲碁の型を表現したものです。</target>
        </trans-unit>
        <trans-unit id="c3bca7d619ddc3b0ec61fb8f295216cb63f22eb4" translate="yes" xml:space="preserve">
          <source>Type reads the type at off in the DWARF &amp;ldquo;info&amp;rdquo; section.</source>
          <target state="translated">タイプは、DWARFの「情報」セクションでオフのタイプを読み取ります。</target>
        </trans-unit>
        <trans-unit id="1fce0b09390d2c3838db788c0cf76f63a5bf80a9" translate="yes" xml:space="preserve">
          <source>Type represents the JavaScript type of a Value.</source>
          <target state="translated">TypeはValueのJavaScriptの型を表します。</target>
        </trans-unit>
        <trans-unit id="e06c5701673348f2eed499aa753a2ba395d1a12d" translate="yes" xml:space="preserve">
          <source>Type returns itself and provides an easy default implementation for embedding in a Node. Embedded in all non-trivial Nodes.</source>
          <target state="translated">型はそれ自身を返し、ノードに埋め込むための簡単なデフォルト実装を提供します。すべての非自明なノードに埋め込まれています。</target>
        </trans-unit>
        <trans-unit id="4726645469f41dd7bcb1d47132c78e582530c7e1" translate="yes" xml:space="preserve">
          <source>Type returns the JavaScript type of the value v. It is similar to JavaScript's typeof operator, except that it returns TypeNull instead of TypeObject for null.</source>
          <target state="translated">Typeは値vのJavaScriptの型を返します。これはJavaScriptのtypeof演算子と似ていますが、nullの場合はTypeObjectではなくTypeNullを返すことを除いては似ています。</target>
        </trans-unit>
        <trans-unit id="2fa9db8cb436bbb192eec5d03d6240277e6eeffd" translate="yes" xml:space="preserve">
          <source>Type returns the object's type.</source>
          <target state="translated">Typeは、オブジェクトの型を返します。</target>
        </trans-unit>
        <trans-unit id="d1407fc8c8322906d1372dd8a45dc51e6205559f" translate="yes" xml:space="preserve">
          <source>Type returns the type of x.f, which may be different from the type of f. See Selection for more information.</source>
          <target state="translated">Typeはx.fの型を返しますが、これはfの型とは異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="372fc3db84eb7f93272dcba175262aaab1565f30" translate="yes" xml:space="preserve">
          <source>Type returns v's type.</source>
          <target state="translated">Typeはvの型を返します。</target>
        </trans-unit>
        <trans-unit id="55dbc1b43ee6cb3b1548172b193bc2a7d3e5eca5" translate="yes" xml:space="preserve">
          <source>Type values are comparable, such as with the == operator, so they can be used as map keys. Two Type values are equal if they represent identical types.</source>
          <target state="translated">型の値は==演算子のように比較可能なので、マップキーとして使用することができます。2 つの型の値は、同じ型を表す場合は等しくなります。</target>
        </trans-unit>
        <trans-unit id="7bdac7349f75285c99f4a03ea2e2de6365f45c2a" translate="yes" xml:space="preserve">
          <source>Type-checking consists of several interdependent phases:</source>
          <target state="translated">タイプチェックは、いくつかの相互依存的な段階から構成されています。</target>
        </trans-unit>
        <trans-unit id="26984be5e6e3b06475f717ab4d76ce6f4ff88c54" translate="yes" xml:space="preserve">
          <source>Type1 is here for the purposes of documentation only. It is a stand-in for any Go type, but represents the same type for any given function invocation.</source>
          <target state="translated">Type1 は、ここでは文書化のみを目的としています。これは任意の Go 型の代用ですが、任意の関数の呼び出しに対して同じ型を表します。</target>
        </trans-unit>
        <trans-unit id="7ace60c9c3dbd05ce39ba29e759c6ad4a52088eb" translate="yes" xml:space="preserve">
          <source>TypeAndValue reports the type and value (for constants) of the corresponding expression.</source>
          <target state="translated">TypeAndValueは、対応する式の型と値(定数の場合)をレポートします。</target>
        </trans-unit>
        <trans-unit id="2bc75a2b4beae4c84f906bb525769e97f38f0823" translate="yes" xml:space="preserve">
          <source>TypeByExtension returns the MIME type associated with the file extension ext. The extension ext should begin with a leading dot, as in &quot;.html&quot;. When ext has no associated type, TypeByExtension returns &quot;&quot;.</source>
          <target state="translated">TypeByExtension は、ファイルの拡張子 ext に関連付けられた MIME タイプを返します。 拡張子 ext は、&quot;.html&quot; のように先頭のドットで始まる必要があります。ext が関連付けられたタイプを持たない場合、TypeByExtension は &quot;&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="263318bcaf840ab395175e373b1ab05080a86fda" translate="yes" xml:space="preserve">
          <source>TypeOf</source>
          <target state="translated">TypeOf</target>
        </trans-unit>
        <trans-unit id="94969a4aec167529cd20467de358b3733a4d1890" translate="yes" xml:space="preserve">
          <source>TypeOf returns the reflection Type that represents the dynamic type of i. If i is a nil interface value, TypeOf returns nil.</source>
          <target state="translated">TypeOfは、iの動的型を表す反射型を返します。</target>
        </trans-unit>
        <trans-unit id="610b14205855f95702d99da6e19e5297b1301163" translate="yes" xml:space="preserve">
          <source>TypeOf returns the type of expression e, or nil if not found. Precondition: the Types, Uses and Defs maps are populated.</source>
          <target state="translated">TypeOf は式 e の型を返します。前提条件:Types、Uses、Defsのマップが作成されていること。</target>
        </trans-unit>
        <trans-unit id="af91dac9977c975dbcb45d1e0c495727ba389f89" translate="yes" xml:space="preserve">
          <source>TypeString returns the string representation of typ. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">TypeString は typ の文字列表現を返します。Qualifierは、パッケージレベルのオブジェクトの印刷を制御します。</target>
        </trans-unit>
        <trans-unit id="70c0f61c1717bc58a510efe98bd7a3251bcbbcc7" translate="yes" xml:space="preserve">
          <source>Typed Strings</source>
          <target state="translated">タイプされた文字列</target>
        </trans-unit>
        <trans-unit id="802976d08e8f16b7d83d8d12b5129fe9e25c37e3" translate="yes" xml:space="preserve">
          <source>Types HTML, JS, URL, and others from content.go can carry safe content that is exempted from escaping.</source>
          <target state="translated">content.goのHTML、JS、URLなどの種類は、エスケープが免除された安全なコンテンツを運ぶことができます。</target>
        </trans-unit>
        <trans-unit id="cea554202fc0c5ff6482d3e61417b6640fc17af4" translate="yes" xml:space="preserve">
          <source>Types and Values</source>
          <target state="translated">タイプと価値観</target>
        </trans-unit>
        <trans-unit id="4a237767760223207248b2b72e8a0eb1c03dbe30" translate="yes" xml:space="preserve">
          <source>Types implementing Valuer interface are able to convert themselves to a driver Value.</source>
          <target state="translated">Valuer インターフェースを実装した型は、それ自身をドライバの Value に変換することができます。</target>
        </trans-unit>
        <trans-unit id="738f4e11bb80f11f67d45a4481cf366179186823" translate="yes" xml:space="preserve">
          <source>Types of signals</source>
          <target state="translated">信号の種類</target>
        </trans-unit>
        <trans-unit id="b842957498ea8405dcbf49648de63b65b478d2cb" translate="yes" xml:space="preserve">
          <source>UDPAddr represents the address of a UDP end point.</source>
          <target state="translated">UDPAddrはUDPエンドポイントのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="b3b4fc6834e1c9d716c787f9ac0d161736c5f604" translate="yes" xml:space="preserve">
          <source>UDPConn is the implementation of the Conn and PacketConn interfaces for UDP network connections.</source>
          <target state="translated">UDPConnはUDPネットワーク接続用のConnおよびPacketConnインターフェースの実装です。</target>
        </trans-unit>
        <trans-unit id="b499255e82796e4d28d962954395ad3d893bac9c" translate="yes" xml:space="preserve">
          <source>UDPConn.WriteTo</source>
          <target state="translated">UDPConn.WriteTo</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="2113a36dc330dedde4db70e90a71dcb67bd4a9a2" translate="yes" xml:space="preserve">
          <source>URL (Roundtrip)</source>
          <target state="translated">URL(往復</target>
        </trans-unit>
        <trans-unit id="a727ea70072d81d7b63c816962c8a756b508329a" translate="yes" xml:space="preserve">
          <source>URL encapsulates a known safe URL or URL substring (see RFC 3986). A URL like `javascript:checkThatFormNotEditedBeforeLeavingPage()` from a trusted source should go in the page, but by default dynamic `javascript:` URLs are filtered out since they are a frequently exploited injection vector.</source>
          <target state="translated">URLは既知の安全なURLかURLの部分文字列をカプセル化します(RFC 3986参照)。信頼できるソースからの `javascript:checkThatFormNotEditedBeforeLeavingPage()` のようなURLはページに入るべきですが、デフォルトでは動的な `javascript:` のURLは悪用されることが多いのでフィルタリングされています。</target>
        </trans-unit>
        <trans-unit id="9f6702283d55dba63f2c15c6981885271e829853" translate="yes" xml:space="preserve">
          <source>URL's String method uses the EscapedPath method to obtain the path. See the EscapedPath method for more details.</source>
          <target state="translated">URLのStringメソッドは、EscapedPathメソッドを使用してパスを取得します。詳細は EscapedPath メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="a7ffebe53d073d64da891027cdca3ef31de6ee7a" translate="yes" xml:space="preserve">
          <source>URL.EscapedFragment</source>
          <target state="translated">URL.EscapedFragment</target>
        </trans-unit>
        <trans-unit id="fb15045a2812519f4e1083e5cb90b2d16bf5e0e2" translate="yes" xml:space="preserve">
          <source>URL.EscapedPath</source>
          <target state="translated">URL.EscapedPath</target>
        </trans-unit>
        <trans-unit id="4966fe66780da2ec3d10c8599e72fff7ab08a49a" translate="yes" xml:space="preserve">
          <source>URL.Hostname</source>
          <target state="translated">URL.Hostname</target>
        </trans-unit>
        <trans-unit id="93c3fa248c55505922464e5ed8d1899f54880821" translate="yes" xml:space="preserve">
          <source>URL.IsAbs</source>
          <target state="translated">URL.IsAbs</target>
        </trans-unit>
        <trans-unit id="c5ff099f399baf8e187d09b758e991f007d9fdbb" translate="yes" xml:space="preserve">
          <source>URL.MarshalBinary</source>
          <target state="translated">URL.MarshalBinary</target>
        </trans-unit>
        <trans-unit id="1f5b4a1bd876c3d2e848fa8ad0b5bcdecf59f3eb" translate="yes" xml:space="preserve">
          <source>URL.Parse</source>
          <target state="translated">URL.Parse</target>
        </trans-unit>
        <trans-unit id="df308e5c8e7a40f3e06e1c8f29546df6edd0815c" translate="yes" xml:space="preserve">
          <source>URL.Port</source>
          <target state="translated">URL.Port</target>
        </trans-unit>
        <trans-unit id="1f4af3bd8a928ef1166e58b54f440e84607bbe48" translate="yes" xml:space="preserve">
          <source>URL.Query</source>
          <target state="translated">URL.Query</target>
        </trans-unit>
        <trans-unit id="f2cbc812759bc0bcb35214d0c86a7a333cdc5ac4" translate="yes" xml:space="preserve">
          <source>URL.Redacted</source>
          <target state="translated">URL.Redacted</target>
        </trans-unit>
        <trans-unit id="2f6fe106a87daa55540bf1b3e2faa597e4637d72" translate="yes" xml:space="preserve">
          <source>URL.RequestURI</source>
          <target state="translated">URL.RequestURI</target>
        </trans-unit>
        <trans-unit id="5ef9cfae68b8e79167af493274ea7b99357dad6d" translate="yes" xml:space="preserve">
          <source>URL.ResolveReference</source>
          <target state="translated">URL.ResolveReference</target>
        </trans-unit>
        <trans-unit id="aae15178969446ff357ff699287cc769e108c1ee" translate="yes" xml:space="preserve">
          <source>URL.String</source>
          <target state="translated">URL.String</target>
        </trans-unit>
        <trans-unit id="ce84e8c5399c507871045bd05a22f805d2c4f2bd" translate="yes" xml:space="preserve">
          <source>URL.UnmarshalBinary</source>
          <target state="translated">URL.UnmarshalBinary</target>
        </trans-unit>
        <trans-unit id="ac64d1ff5ad8c8e979a983967383931627c1db93" translate="yes" xml:space="preserve">
          <source>URLEncoding is the alternate base64 encoding defined in RFC 4648. It is typically used in URLs and file names.</source>
          <target state="translated">URLEncoding は RFC 4648 で定義されている代替の base64 エンコーディングです。通常は URL やファイル名で使用されます。</target>
        </trans-unit>
        <trans-unit id="c9df7bde57a8aa1d95e4f472d843c333da35563f" translate="yes" xml:space="preserve">
          <source>URLQueryEscaper returns the escaped value of the textual representation of its arguments in a form suitable for embedding in a URL query.</source>
          <target state="translated">URLQueryEscaperは、URLクエリに埋め込むのに適した形式で、引数のテキスト表現のエスケープされた値を返します。</target>
        </trans-unit>
        <trans-unit id="f75c8002cbe8f09b52b12100920f39a5c64e72ab" translate="yes" xml:space="preserve">
          <source>URLs in the comment text are converted into links; if the URL also appears in the words map, the link is taken from the map (if the corresponding map value is the empty string, the URL is not converted into a link).</source>
          <target state="translated">コメントテキスト内のURLはリンクに変換されます。URLがワードマップにも現れる場合、リンクはマップから取得されます(対応するマップ値が空文字列の場合、URLはリンクに変換されません)。</target>
        </trans-unit>
        <trans-unit id="66e91d3bfc1c62180f622950dd4b88caee7fb5f3" translate="yes" xml:space="preserve">
          <source>URLs that do not start with a slash after the scheme are interpreted as:</source>
          <target state="translated">スキームの後にスラッシュで始まらないURLは解釈されます。</target>
        </trans-unit>
        <trans-unit id="0809917b6f7b4556e78a9d2c239213f16de1592f" translate="yes" xml:space="preserve">
          <source>UTC represents Universal Coordinated Time (UTC).</source>
          <target state="translated">UTCは協定世界時(UTC)を表します。</target>
        </trans-unit>
        <trans-unit id="2910e9336b266393bd7b3bb04c8ff09ab1ad423c" translate="yes" xml:space="preserve">
          <source>UTC returns t with the location set to UTC.</source>
          <target state="translated">UTC は、位置を UTC に設定して t を返します。</target>
        </trans-unit>
        <trans-unit id="bd4707cd474a6d0f83da094caeed9e471bb79e5c" translate="yes" xml:space="preserve">
          <source>Uint defines a uint flag with specified name, default value, and usage string. The return value is the address of a uint variable that stores the value of the flag.</source>
          <target state="translated">Uintは、指定された名前、デフォルト値、使用文字列を持つuintフラグを定義します。戻り値は、フラグの値を格納するuint変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="c10a1c74871016b345bc36d5bdb30897f19968dc" translate="yes" xml:space="preserve">
          <source>Uint returns v's underlying value, as a uint64. It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.</source>
          <target state="translated">Uint は、v の基本的な値を uint64 で返します。v の Kind が Uint,Uintptr,Uint8,Uint16,Uint32,Uint64 でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="8c727e75a1c262fee3ed280d320bad7f8659ca56" translate="yes" xml:space="preserve">
          <source>Uint32 returns a pseudo-random 32-bit value as a uint32 from the default Source.</source>
          <target state="translated">Uint32は、デフォルトのSourceから疑似ランダムな32ビット値をuint32として返します。</target>
        </trans-unit>
        <trans-unit id="e19c9ecfe9082dbf421a298c1c766023a8f7f823" translate="yes" xml:space="preserve">
          <source>Uint32 returns a pseudo-random 32-bit value as a uint32.</source>
          <target state="translated">Uint32は、擬似乱数の32ビット値をuint32として返します。</target>
        </trans-unit>
        <trans-unit id="030a2cb864d68ff2aba5fa883929c569cc36b65c" translate="yes" xml:space="preserve">
          <source>Uint64 defines a uint64 flag with specified name, default value, and usage string. The return value is the address of a uint64 variable that stores the value of the flag.</source>
          <target state="translated">Uint64は、指定された名前、デフォルト値、使用文字列を持つuint64フラグを定義します。戻り値は、フラグの値を格納するuint64変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="6d3dffebe2bfc2c33c20643972b94062f6925708" translate="yes" xml:space="preserve">
          <source>Uint64 returns a pseudo-random 64-bit value as a uint64 from the default Source.</source>
          <target state="translated">Uint64は、デフォルトのSourceから擬似ランダムな64ビット値をuint64として返します。</target>
        </trans-unit>
        <trans-unit id="4324e0d2d9e747146788fb1da362fb5053ac15fe" translate="yes" xml:space="preserve">
          <source>Uint64 returns a pseudo-random 64-bit value as a uint64.</source>
          <target state="translated">Uint64は、疑似ランダムな64ビット値をuint64として返します。</target>
        </trans-unit>
        <trans-unit id="8f4f108ba23391540c5f57a2d283a1654c92a932" translate="yes" xml:space="preserve">
          <source>Uint64 returns a value drawn from the Zipf distribution described by the Zipf object.</source>
          <target state="translated">Uint64は、Zipfオブジェクトによって記述されたZipf分布から引き出された値を返します。</target>
        </trans-unit>
        <trans-unit id="0e960db65d7bc2609ac63eaaddb18d0ce30fd34e" translate="yes" xml:space="preserve">
          <source>Uint64 returns the uint64 representation of x. If x cannot be represented in a uint64, the result is undefined.</source>
          <target state="translated">Uint64は、xのuint64表現を返します。xがuint64で表現できない場合、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="4059a3fbb04daacbe98a3ac34acbb5b4f0511d79" translate="yes" xml:space="preserve">
          <source>Uint64 returns the unsigned integer resulting from truncating x towards zero. If 0 &amp;lt;= x &amp;lt;= math.MaxUint64, the result is Exact if x is an integer and Below otherwise. The result is (0, Above) for x &amp;lt; 0, and (math.MaxUint64, Below) for x &amp;gt; math.MaxUint64.</source>
          <target state="translated">Uint64は、xをゼロに切り捨てた結果の符号なし整数を返します。0 &amp;lt;= x &amp;lt;= math.MaxUint64の場合、結果は、xが整数の場合はExact、それ以外の場合はBelowです。結果は、x &amp;lt;0の場合は（0、上）、x&amp;gt; math.MaxUint64の場合は（math.MaxUint64、下）です。</target>
        </trans-unit>
        <trans-unit id="eee8610c675fa51e59aceef9ba15ad48fc3f7656" translate="yes" xml:space="preserve">
          <source>Uint64Val returns the Go uint64 value of x and whether the result is exact; x must be an Int or an Unknown. If the result is not exact, its value is undefined. If x is Unknown, the result is (0, false).</source>
          <target state="translated">Uint64Val は、x の Go uint64 値と、その結果が正確かどうかを返します。結果が正確でない場合、その値は未定義です。xがUnknownの場合、結果は(0,false)となります。</target>
        </trans-unit>
        <trans-unit id="f8a9446572ec072b0dca42654febb328f4183bda" translate="yes" xml:space="preserve">
          <source>Uint64Var defines a uint64 flag with specified name, default value, and usage string. The argument p points to a uint64 variable in which to store the value of the flag.</source>
          <target state="translated">Uint64Varは、指定された名前、デフォルト値、使用文字列を持つuint64フラグを定義します。引数pは、フラグの値を格納するuint64変数を指します。</target>
        </trans-unit>
        <trans-unit id="496dd0effb0126ef9e845598a59198590bcd043e" translate="yes" xml:space="preserve">
          <source>UintSize is the size of a uint in bits.</source>
          <target state="translated">UintSizeは、ビット単位のuintのサイズです。</target>
        </trans-unit>
        <trans-unit id="dbe3f8f6ae38a6c86be38b30cc7b136b0e0c8b33" translate="yes" xml:space="preserve">
          <source>UintVar defines a uint flag with specified name, default value, and usage string. The argument p points to a uint variable in which to store the value of the flag.</source>
          <target state="translated">UintVarは、指定された名前、デフォルト値、使用文字列を持つuintフラグを定義します。引数pは、フラグの値を格納するためのuint変数を指します。</target>
        </trans-unit>
        <trans-unit id="70e0b7ef4850aca01e0f7f10e5400e6c9147df8c" translate="yes" xml:space="preserve">
          <source>UnaryOp</source>
          <target state="translated">UnaryOp</target>
        </trans-unit>
        <trans-unit id="07e07a445fa30cc6121d05f031b487faccb7d573" translate="yes" xml:space="preserve">
          <source>UnaryOp returns the result of the unary expression op y. The operation must be defined for the operand. If prec &amp;gt; 0 it specifies the ^ (xor) result size in bits. If y is Unknown, the result is Unknown.</source>
          <target state="translated">UnaryOpは、単項式op yの結果を返します。演算はオペランドに対して定義する必要があります。prec&amp;gt; 0の場合、^（xor）結果サイズをビット単位で指定します。yが不明の場合、結果は不明になります。</target>
        </trans-unit>
        <trans-unit id="65ac12608f350c5da84519394457136c59d339ec" translate="yes" xml:space="preserve">
          <source>Undefined returns the JavaScript value &quot;undefined&quot;.</source>
          <target state="translated">Undefined は JavaScript の値 &quot;undefined&quot; を返します。</target>
        </trans-unit>
        <trans-unit id="9933a40ae911d6dfb846e287c51e34fc4040de25" translate="yes" xml:space="preserve">
          <source>UnescapeString</source>
          <target state="translated">UnescapeString</target>
        </trans-unit>
        <trans-unit id="d8d400b63495a426dfadc8a4f1e5fdcfa4a8e536" translate="yes" xml:space="preserve">
          <source>UnescapeString unescapes entities like &quot;&amp;amp;lt;&quot; to become &quot;&amp;lt;&quot;. It unescapes a larger range of entities than EscapeString escapes. For example, &quot;&amp;amp;aacute;&quot; unescapes to &quot;&amp;aacute;&quot;, as does &quot;&amp;amp;#225;&quot; and &quot;&amp;amp;#xE1;&quot;. UnescapeString(EscapeString(s)) == s always holds, but the converse isn't always true.</source>
          <target state="translated">UnescapeStringは、「＆lt;」のようなエンティティのエスケープを解除します 「&amp;lt;」になる。EscapeStringがエスケープするよりも広い範囲のエンティティをエスケープ解除します。たとえば、「＆aacute;」「&amp;aacute;」にエスケープせず、「＆＃225;」および「＆＃xE1;」。UnescapeString（EscapeString（s））== sは常に成り立ちますが、その逆は常に正しいとは限りません。</target>
        </trans-unit>
        <trans-unit id="c698e3c309a2ed8c52f6f41c34c41e2935c68bed" translate="yes" xml:space="preserve">
          <source>Uniform is an infinite-sized Image of uniform color. It implements the color.Color, color.Model, and Image interfaces.</source>
          <target state="translated">Uniformは、均一な色の無限サイズのイメージです。color.Color,color.Model,Image インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="c9b92cda61a2bd5ee7e67c31c67ae298972c3694" translate="yes" xml:space="preserve">
          <source>Union returns the smallest rectangle that contains both r and s.</source>
          <target state="translated">Unionは、rとsの両方を含む最小の矩形を返します。</target>
        </trans-unit>
        <trans-unit id="c30c209545f6cf55ee27d591debf698152bcbfd9" translate="yes" xml:space="preserve">
          <source>Unix returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC. The result does not depend on the location associated with t.</source>
          <target state="translated">Unixは、1970年1月1日(UTC)からの経過秒数であるtをUnixの時間として返します。結果は t に関連付けられた位置には依存しません。</target>
        </trans-unit>
        <trans-unit id="0739141adf792995ead54a41a03b2314aaccc261" translate="yes" xml:space="preserve">
          <source>Unix returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC. The result does not depend on the location associated with t. Unix-like operating systems often record time as a 32-bit count of seconds, but since the method here returns a 64-bit value it is valid for billions of years into the past or future.</source>
          <target state="translated">Unixは、1970年1月1日(UTC)からの経過秒数であるtをUnixの時間として返します。Unixのようなオペレーティングシステムでは、時間を32ビットの秒数として記録することがよくありますが、ここでは64ビットの値を返すので、過去や未来の何十億年もの間有効です。</target>
        </trans-unit>
        <trans-unit id="8c849502e5926e7f6de51dcd5dae32180a6c8fc5" translate="yes" xml:space="preserve">
          <source>Unix returns the local Time corresponding to the given Unix time, sec seconds and nsec nanoseconds since January 1, 1970 UTC. It is valid to pass nsec outside the range [0, 999999999]. Not all sec values have a corresponding time value. One such value is 1&amp;lt;&amp;lt;63-1 (the largest int64 value).</source>
          <target state="translated">Unixは、1970年1月1日のUTCから、指定されたUnix時間、秒、ナノ秒に対応するローカル時間を返します。 [0、999999999]の範囲外のnsecを渡すことは有効です。すべての秒の値に対応する時間の値があるわけではありません。そのような値の1つは、1 &amp;lt;&amp;lt; 63-1（int64の最大値）です。</target>
        </trans-unit>
        <trans-unit id="7f49edfe928a8998235ec038d3202681fe6091b3" translate="yes" xml:space="preserve">
          <source>Unix returns ts as the number of seconds and nanoseconds elapsed since the Unix epoch.</source>
          <target state="translated">Unix は、Unix のエポックからの経過秒数とナノ秒を ts として返します。</target>
        </trans-unit>
        <trans-unit id="36e051fac71bd9f38c8bee21a4fbf639eb952b84" translate="yes" xml:space="preserve">
          <source>Unix returns tv as the number of seconds and nanoseconds elapsed since the Unix epoch.</source>
          <target state="translated">UnixはtvをUnixのエポックからの経過秒数とナノ秒数として返します。</target>
        </trans-unit>
        <trans-unit id="4d2a03437e4146025835f0a7a6ccd0e75af8c754" translate="yes" xml:space="preserve">
          <source>UnixAddr represents the address of a Unix domain socket end point.</source>
          <target state="translated">UnixAddrは、Unixドメインソケットのエンドポイントのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="04cdae900c7738c2f31e4e0db5e46a21f1971317" translate="yes" xml:space="preserve">
          <source>UnixConn is an implementation of the Conn interface for connections to Unix domain sockets.</source>
          <target state="translated">UnixConn は、Unix ドメインソケットへの接続のための Conn インターフェイスの実装です。</target>
        </trans-unit>
        <trans-unit id="fd1ae11b5100fed8de8a53db38bf7aed0bddf628" translate="yes" xml:space="preserve">
          <source>UnixCredentials encodes credentials into a socket control message for sending to another process. This can be used for authentication.</source>
          <target state="translated">UnixCredentials は、他のプロセスに送信するためのソケット制御メッセージにクレデンシャルをエンコードします。これは認証に使用できます。</target>
        </trans-unit>
        <trans-unit id="aea7fd85f724d84dccda1e26d2c29b04dd2edf2d" translate="yes" xml:space="preserve">
          <source>UnixListener is a Unix domain socket listener. Clients should typically use variables of type Listener instead of assuming Unix domain sockets.</source>
          <target state="translated">UnixListener は Unix ドメインソケットリスナーです。クライアントは通常、Unix ドメインソケットを想定する代わりに Listener 型の変数を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="2a27b45fc326b4542c26186dc68da8cc5a7e5d10" translate="yes" xml:space="preserve">
          <source>UnixNano returns t as a Unix time, the number of nanoseconds elapsed since January 1, 1970 UTC. The result is undefined if the Unix time in nanoseconds cannot be represented by an int64 (a date before the year 1678 or after 2262). Note that this means the result of calling UnixNano on the zero Time is undefined. The result does not depend on the location associated with t.</source>
          <target state="translated">UnixNanoは、1970年1月1日(UTC)からの経過したナノ秒数であるtをUnix時間として返します。ナノ秒単位のUnix時間をint64で表現できない場合(1678年以前の日付や2262年以降の日付)は、結果は未定義です。これは、ゼロタイムでUnixNanoを呼び出した結果が未定義であることを意味することに注意してください。結果は t に関連付けられた位置には依存しません。</target>
        </trans-unit>
        <trans-unit id="b17a6e6eff6f04c581ee8cd1e56b3e493458a9f8" translate="yes" xml:space="preserve">
          <source>UnixRights encodes a set of open file descriptors into a socket control message for sending to another process.</source>
          <target state="translated">UnixRights は、オープンファイルディスクリプタのセットをソケット制御メッセージにエンコードして、他のプロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="dbe53cfcde936dfcaf7c8175938f51e315034103" translate="yes" xml:space="preserve">
          <source>UnknownAuthorityError results when the certificate issuer is unknown</source>
          <target state="translated">証明書の発行者が不明な場合、UnknownAuthorityError が発生します。</target>
        </trans-unit>
        <trans-unit id="81414e166f7a74fc8a4df3127afc6add584dadf1" translate="yes" xml:space="preserve">
          <source>UnknownFileError represents a failure to find the specific file in the symbol table.</source>
          <target state="translated">UnknownFileError は、シンボルテーブルで特定のファイルが見つからなかったことを表します。</target>
        </trans-unit>
        <trans-unit id="71d6e61364d65cc6b10f85900b022e3a712387e7" translate="yes" xml:space="preserve">
          <source>UnknownGroupError is returned by LookupGroup when a group cannot be found.</source>
          <target state="translated">グループが見つからない場合、LookupGroupによってUnknownGroupErrorが返されます。</target>
        </trans-unit>
        <trans-unit id="8395a289704405eac7a12dd0a91f81ec7b638b6b" translate="yes" xml:space="preserve">
          <source>UnknownGroupIdError is returned by LookupGroupId when a group cannot be found.</source>
          <target state="translated">グループが見つからない場合、LookupGroupIdによってUnknownGroupIdErrorが返されます。</target>
        </trans-unit>
        <trans-unit id="ea06d94bc0ee6404fba69dbd6d9433ca16ab32bf" translate="yes" xml:space="preserve">
          <source>UnknownLineError represents a failure to map a line to a program counter, either because the line is beyond the bounds of the file or because there is no code on the given line.</source>
          <target state="translated">UnknownLineError は、その行がファイルの範囲を超えているか、または指定された行にコードがないために、行をプログラム・カウンタにマップできなかったことを表します。</target>
        </trans-unit>
        <trans-unit id="161a93107711086546bec71b893d5cad7e7be15e" translate="yes" xml:space="preserve">
          <source>UnknownUserError is returned by Lookup when a user cannot be found.</source>
          <target state="translated">ユーザーが見つからない場合は、LookupによってUnknownUserErrorが返されます。</target>
        </trans-unit>
        <trans-unit id="6017e893f322aa54de196845bc71d4f23b1edfcb" translate="yes" xml:space="preserve">
          <source>UnknownUserIdError is returned by LookupId when a user cannot be found.</source>
          <target state="translated">ユーザが見つからない場合は、LookupIdによってUnknownUserIdErrorが返されます。</target>
        </trans-unit>
        <trans-unit id="47025f2669ef0e585c9e4472fd182fc3f82a586e" translate="yes" xml:space="preserve">
          <source>Unless an explicit codec is set up, package encoding/gob is used to transport the data.</source>
          <target state="translated">明示的なコーデックが設定されていない限り、データの転送にはパッケージエンコーディング/gobが使用されます。</target>
        </trans-unit>
        <trans-unit id="e7e8c7e799f9b4c265f8eb16ca2467638931db85" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, these are defined in RFC 7231 section 4.3.</source>
          <target state="translated">特に断りのない限り、これらはRFC 7231のセクション4.3で定義されています。</target>
        </trans-unit>
        <trans-unit id="ad0d769d8f434903817312e6a1ab62dd81dfa28b" translate="yes" xml:space="preserve">
          <source>Unless specified otherwise, all operations (including setters) that specify a *Float variable for the result (usually via the receiver with the exception of MantExp), round the numeric result according to the precision and rounding mode of the result variable.</source>
          <target state="translated">特に指定がない限り、結果に*Float変数を指定するすべての操作(セッターを含む)は(通常は受信機を介して、MantExpを除いて)、結果変数の精度と丸めモードに応じて数値結果を丸めます。</target>
        </trans-unit>
        <trans-unit id="a99463bcf73aeb4ac48f9dbe6e1c4e0ad970639e" translate="yes" xml:space="preserve">
          <source>Unlike NextPart, it does not have special handling for &quot;Content-Transfer-Encoding: quoted-printable&quot;.</source>
          <target state="translated">NextPartとは異なり、「Content-Transfer-Encoding:quoted-printable」の特別な扱いはありません。</target>
        </trans-unit>
        <trans-unit id="ce1ab5c402bafab7c2f436e8311567b966b147df" translate="yes" xml:space="preserve">
          <source>Unlike in C, it is not valid to advance a pointer just beyond the end of its original allocation:</source>
          <target state="translated">C言語とは異なり、元のアロケーションの終わりを超えたところでポインタを進めることはできません。</target>
        </trans-unit>
        <trans-unit id="522a3a646a834223c2e98bb2c21ff8e76c01dd11" translate="yes" xml:space="preserve">
          <source>Unlike runtime.Callers, the PC values returned should, when passed to the symbolizer function, return the file/line of the call instruction. No additional subtraction is required or appropriate.</source>
          <target state="translated">runtime.Callersとは異なり、返されるPC値は、シンボライザー関数に渡された場合、呼び出し命令のファイル/行を返すべきである。追加の減算は必要ありませんし、適切ではありません。</target>
        </trans-unit>
        <trans-unit id="406ad3e57d6ca887a28b68d7deb07d96e9cd7dc1" translate="yes" xml:space="preserve">
          <source>Unlike the &quot;system&quot; library call from C and other languages, the os/exec package intentionally does not invoke the system shell and does not expand any glob patterns or handle other expansions, pipelines, or redirections typically done by shells. The package behaves more like C's &quot;exec&quot; family of functions. To expand glob patterns, either call the shell directly, taking care to escape any dangerous input, or use the path/filepath package's Glob function. To expand environment variables, use package os's ExpandEnv.</source>
          <target state="translated">C 言語や他の言語の &quot;system&quot; ライブラリ呼び出しとは異なり、os/exec パッケージは意図的にシステムシェルを呼び出さず、グロブパターンを展開したり、シェルが一般的に行う他の展開、パイプライン、リダイレクトを処理したりしません。このパッケージは、C の &quot;exec&quot; ファミリーの関数のように振る舞います。グロブパターンを展開するには、危険な入力をエスケープするように注意してシェルを直接呼び出すか、path/filepath パッケージの Glob 関数を使用してください。環境変数を展開するには、パッケージ os の ExpandEnv.</target>
        </trans-unit>
        <trans-unit id="abe91b52586dc5bbb2e6b3566c5e2c39387cbbd6" translate="yes" xml:space="preserve">
          <source>Unlink removes n % r.Len() elements from the ring r, starting at r.Next(). If n % r.Len() == 0, r remains unchanged. The result is the removed subring. r must not be empty.</source>
          <target state="translated">アンリンクは、r.Next()から始まるリング r から n % r.Len()要素を削除します。n % r.Len()==0 の場合、r は変更されません。r は空であってはなりません。</target>
        </trans-unit>
        <trans-unit id="f1750196ed6e86ab6e565436971490e6b17346e5" translate="yes" xml:space="preserve">
          <source>Unlock unlocks m. It is a run-time error if m is not locked on entry to Unlock.</source>
          <target state="translated">Unlockに入った時にmがロックされていないとランタイムエラーになります。</target>
        </trans-unit>
        <trans-unit id="1031b448939f378b7eec7282357fd0c8f02e0dd3" translate="yes" xml:space="preserve">
          <source>Unlock unlocks rw for writing. It is a run-time error if rw is not locked for writing on entry to Unlock.</source>
          <target state="translated">Unlock は rw の書き込みロックを解除します。Unlockに入った時に書き込み用にrwがロックされていないとランタイムエラーになります。</target>
        </trans-unit>
        <trans-unit id="2769f111e84de5efeaaffb059d166476e34adffc" translate="yes" xml:space="preserve">
          <source>UnlockOSThread undoes an earlier call to LockOSThread. If this drops the number of active LockOSThread calls on the calling goroutine to zero, it unwires the calling goroutine from its fixed operating system thread. If there are no active LockOSThread calls, this is a no-op.</source>
          <target state="translated">UnlockOSThread は、以前の LockOSThread への呼び出しを取り消します。呼び出し元のゴローチンでのアクティブな LockOSThread 呼び出しの数がゼロになると、呼び出し元のゴローチンの固定オペレーテ ィング・システム・スレッドからのワイヤリングが解除されます。アクティブな LockOSThread 呼び出しがない場合は、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="c0c55cc87781bbcbbe014b61cd39f339918efe82" translate="yes" xml:space="preserve">
          <source>Unmarshal</source>
          <target state="translated">Unmarshal</target>
        </trans-unit>
        <trans-unit id="b902b427877022323b14bf2942e7b4318af381ef" translate="yes" xml:space="preserve">
          <source>Unmarshal converts a point, serialized by Marshal, into an x, y pair. It is an error if the point is not in uncompressed form or is not on the curve. On error, x = nil.</source>
          <target state="translated">Unmarshal は、Marshal によって直列化された点を x,y のペアに変換します。点が圧縮されていないか、曲線上にない場合はエラーとなります。エラーの場合、x=nilとなります。</target>
        </trans-unit>
        <trans-unit id="05d9d3d65b2b20105c2330ab2953dfbf47f42b20" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element or attribute value to a bool by setting it to the boolean value represented by the string. Whitespace is trimmed and ignored.</source>
          <target state="translated">Unmarshalは、XML要素または属性値を、文字列で表されるブーリアン値に設定することで、boolにマップします。空白はトリムされ無視されます。</target>
        </trans-unit>
        <trans-unit id="a20ffd00f170a26037fda94503e504e8f14a2140" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element or attribute value to a slice by extending the length of the slice and mapping the element or attribute to the newly created value.</source>
          <target state="translated">Unmarshal は、スライスの長さを拡張し、その要素または属性を新たに作成された値にマッピングすることで、XML 要素または属性の値をスライスにマッピングします。</target>
        </trans-unit>
        <trans-unit id="f49e594c7cd50f427b1321468c3f00b6805b3bc7" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element or attribute value to an integer or floating-point field by setting the field to the result of interpreting the string value in decimal. There is no check for overflow. Whitespace is trimmed and ignored.</source>
          <target state="translated">Unmarshalは、文字列の値を10進数で解釈した結果をフィールドに設定することで、XML要素または属性値を整数または浮動小数点フィールドにマッピングします。オーバーフローのチェックはありません。空白はトリミングされ無視されます。</target>
        </trans-unit>
        <trans-unit id="e3d47c5ca4b3a002e5a1a94281405e13a887e601" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a Name by recording the element name.</source>
          <target state="translated">Unmarshalは、XML要素を要素名を記録することで名前にマッピングします。</target>
        </trans-unit>
        <trans-unit id="96b027c2d930b698a1ed10b0bb721de215ae272f" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a pointer by setting the pointer to a freshly allocated value and then mapping the element to that value.</source>
          <target state="translated">Unmarshal は、新たに割り当てられた値へのポインタを設定し、その値に要素をマッピングすることで XML 要素をポインタにマッピングします。</target>
        </trans-unit>
        <trans-unit id="6674f1401888e867e969567800411704118b6e15" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a string or []byte by saving the concatenation of that element's character data in the string or []byte. The saved []byte is never nil.</source>
          <target state="translated">UnmarshalはXML要素を文字列または[]バイトにマップし、その要素の文字データを連結したものを文字列または[]バイトに保存します。保存された[]バイトは決してnilではありません。</target>
        </trans-unit>
        <trans-unit id="a09403355ff68d791492810d3a6fdc52e5bc5f23" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a struct using the following rules. In the rules, the tag of a field refers to the value associated with the key 'xml' in the struct field's tag (see the example above).</source>
          <target state="translated">Unmarshal は、以下のルールを使用して XML 要素を struct にマッピングします。ルールでは、フィールドのタグは、構造体フィールドのタグ内のキー「xml」に関連付けられた値を参照します(上の例を参照)。</target>
        </trans-unit>
        <trans-unit id="252b3357e8880736b5df5514f3757c07707118ae" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an attribute value to a string or []byte by saving the value in the string or slice.</source>
          <target state="translated">アンマーシャルは、文字列またはスライスに値を保存することで、属性値を文字列または[]バイトにマッピングします。</target>
        </trans-unit>
        <trans-unit id="bb18922b79397b807a3d5909559848bfe9436488" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an attribute value to an Attr by saving the attribute, including its name, in the Attr.</source>
          <target state="translated">Unmarshal は、属性の名前を含む属性を Attr に保存することで、属性値を Attr にマッピングします。</target>
        </trans-unit>
        <trans-unit id="daa56a09ffbf4f0b35b7c340fa9c8ae81aa1dac5" translate="yes" xml:space="preserve">
          <source>Unmarshal parses the DER-encoded ASN.1 data structure b and uses the reflect package to fill in an arbitrary value pointed at by val. Because Unmarshal uses the reflect package, the structs being written to must use upper case field names.</source>
          <target state="translated">Unmarshal は、DER エンコードされた ASN.1 データ構造体 b を解析し、reflect パッケージを使用して val で指定された任意の値を埋めます。Unmarshal は reflect パッケージを使用するため、書き込まれる構造体には大文字のフィールド名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a9e198e98aaf9144ec031242893dd0ad5675a2b" translate="yes" xml:space="preserve">
          <source>Unmarshal parses the JSON-encoded data and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.</source>
          <target state="translated">Unmarshal は JSON エンコードされたデータを解析し、その結果を v が指す値に格納します。 v が nil であるかポインタでない場合、Unmarshal は InvalidUnmarshalError を返します。</target>
        </trans-unit>
        <trans-unit id="ed1d87c314d03ac8a80eec05352fd3a2e828f6fd" translate="yes" xml:space="preserve">
          <source>Unmarshal parses the XML-encoded data and stores the result in the value pointed to by v, which must be an arbitrary struct, slice, or string. Well-formed data that does not fit into v is discarded.</source>
          <target state="translated">Unmarshal は XML エンコードされたデータを解析し、その結果を v で指定された値に格納します。v に適合しない整形されたデータは破棄されます。</target>
        </trans-unit>
        <trans-unit id="40f5f3bf6806f78bc75f412c5c5def4697b027f5" translate="yes" xml:space="preserve">
          <source>Unmarshal uses the inverse of the encodings that Marshal uses, allocating maps, slices, and pointers as necessary, with the following additional rules:</source>
          <target state="translated">Unmarshal は、Marshal が使用するエンコーディングの逆を使用し、必要に応じてマップ、スライス、ポインタを割り当てますが、以下の追加ルールがあります。</target>
        </trans-unit>
        <trans-unit id="8a48a17f3248cfe923e11a8bf58b4b7fb9c77d34" translate="yes" xml:space="preserve">
          <source>UnmarshalBinary implements the encoding.BinaryUnmarshaler interface.</source>
          <target state="translated">UnmarshalBinary は encoding.BinaryUnmarshaler インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="3e8a767165b3da81fab334a0479c29a17b19b26e" translate="yes" xml:space="preserve">
          <source>UnmarshalBinary must be able to decode the form generated by MarshalBinary. UnmarshalBinary must copy the data if it wishes to retain the data after returning.</source>
          <target state="translated">UnmarshalBinary は、MarshalBinary が生成したフォームをデコードできなければなりません。返却後にデータを保持したい場合は、UnmarshalBinary はデータをコピーしなければなりません。</target>
        </trans-unit>
        <trans-unit id="c0f8f106115bed98d4438b712b344fc8e65ac7a2" translate="yes" xml:space="preserve">
          <source>UnmarshalCompressed converts a point, serialized by MarshalCompressed, into an x, y pair. It is an error if the point is not in compressed form or is not on the curve. On error, x = nil.</source>
          <target state="translated">UnmarshalCompressed は、MarshalCompressed によってシリアライズされた点を x,y のペアに変換します。点が圧縮されていないか、曲線上にない場合はエラーとなります。エラーの場合、x=nilとなります。</target>
        </trans-unit>
        <trans-unit id="a1f2034d1f5318f262d82d2c3d3d1a1f573ff376" translate="yes" xml:space="preserve">
          <source>UnmarshalJSON implements the json.Unmarshaler interface.</source>
          <target state="translated">UnmarshalJSONはjson.Unmarshalerインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="ac481b848955fbdb07ec4ed8b1f2094acec90508" translate="yes" xml:space="preserve">
          <source>UnmarshalJSON implements the json.Unmarshaler interface. The time is expected to be a quoted string in RFC 3339 format.</source>
          <target state="translated">UnmarshalJSONはjson.Unmarshalerインターフェースを実装しています。時刻はRFC3339形式の引用符付き文字列であることが期待されます。</target>
        </trans-unit>
        <trans-unit id="501d2e87e0671202c95a53d1a0ea534ac74ed463" translate="yes" xml:space="preserve">
          <source>UnmarshalJSON sets *m to a copy of data.</source>
          <target state="translated">UnmarshalJSONは、*mをデータのコピーに設定します。</target>
        </trans-unit>
        <trans-unit id="766c1d65184cba1147b7a3545fa3391dee2740d7" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface.</source>
          <target state="translated">UnmarshalText は encoding.TextUnmarshaler インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="85ec5d5725d7fc8b15d01b424436803971c310f0" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface. The IP address is expected in a form accepted by ParseIP.</source>
          <target state="translated">UnmarshalText は encoding.TextUnmarshaler インターフェースを実装しています。IP アドレスは ParseIP で受け入れられる形で期待されます。</target>
        </trans-unit>
        <trans-unit id="131593f7a0c50a040c83c26b3def1697240de177" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface. The result is rounded per the precision and rounding mode of z. If z's precision is 0, it is changed to 64 before rounding takes effect.</source>
          <target state="translated">UnmarshalText は encoding.TextUnmarshaler インターフェースを実装しています。結果は、z の精度と丸めモードに従って丸められます。</target>
        </trans-unit>
        <trans-unit id="7b15f389f52fa3ed23e4bbf98f836b42c06e5eba" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface. The time is expected to be in RFC 3339 format.</source>
          <target state="translated">UnmarshalText は encoding.TextUnmarshaler インターフェースを実装しています。時間はRFC3339形式であることが予想されます。</target>
        </trans-unit>
        <trans-unit id="6b7f1ab4fc569112930c20562985da8185544c87" translate="yes" xml:space="preserve">
          <source>UnmarshalText must be able to decode the form generated by MarshalText. UnmarshalText must copy the text if it wishes to retain the text after returning.</source>
          <target state="translated">UnmarshalText は、MarshalText によって生成されたフォームをデコードできなければなりません。UnmarshalText は、戻ってきた後にテキストを保持したい場合には、テキストをコピーしなければなりません。</target>
        </trans-unit>
        <trans-unit id="bd65d49d42bce927940aedf915c377e4dd09e40d" translate="yes" xml:space="preserve">
          <source>UnmarshalWithParams allows field parameters to be specified for the top-level element. The form of the params is the same as the field tags.</source>
          <target state="translated">UnmarshalWithParamsでは、トップレベル要素にフィールドパラメータを指定することができます。パラメータの形式はフィールドタグと同じです。</target>
        </trans-unit>
        <trans-unit id="b3bf6c68384d3fb37cb6c7555cff99e7fce3bb41" translate="yes" xml:space="preserve">
          <source>UnmarshalXML decodes a single XML element beginning with the given start element. If it returns an error, the outer call to Unmarshal stops and returns that error. UnmarshalXML must consume exactly one XML element. One common implementation strategy is to unmarshal into a separate value with a layout matching the expected XML using d.DecodeElement, and then to copy the data from that value into the receiver. Another common strategy is to use d.Token to process the XML object one token at a time. UnmarshalXML may not use d.RawToken.</source>
          <target state="translated">UnmarshalXML は、指定された start 要素で始まる単一の XML 要素をデコードします。エラーを返した場合は、Unmarshal の外部呼び出しを停止し、そのエラーを返します。UnmarshalXMLは、正確に1つのXML要素を消費しなければなりません。一般的な実装方法の一つは、d.DecodeElement を使用して、期待される XML にマッチするレイアウトを持つ別の値にアンマーシャルし、その値からレシーバにデータをコピーすることです。もうひとつの一般的な実装方法は、d.Token を使用して XML オブジェクトをトークンごとに処理することです。UnmarshalXML は d.RawToken を使用しないことがあります。</target>
        </trans-unit>
        <trans-unit id="acecbda4c97cb520576b3b10bc8d83fa35017c1a" translate="yes" xml:space="preserve">
          <source>UnmarshalXMLAttr decodes a single XML attribute. If it returns an error, the outer call to Unmarshal stops and returns that error. UnmarshalXMLAttr is used only for struct fields with the &quot;attr&quot; option in the field tag.</source>
          <target state="translated">UnmarshalXMLAttrは、単一のXML属性をデコードします。エラーが返された場合、Unmarshal の外部呼び出しは停止し、そのエラーを返します。UnmarshalXMLAttr は、フィールド タグに &quot;attr&quot; オプションがある構造体フィールドにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="74aa3bc85e3cd4c389b5c2ee32e0f9e728ff011a" translate="yes" xml:space="preserve">
          <source>Unmarshaler is the interface implemented by objects that can unmarshal an XML element description of themselves.</source>
          <target state="translated">Unmarshalerは、自分自身のXML要素の記述をアンマーシャリングすることができるオブジェクトによって実装されるインターフェースです。</target>
        </trans-unit>
        <trans-unit id="da8c67afda9119d4c5ae65e92c29582ea2cf5d56" translate="yes" xml:space="preserve">
          <source>Unmarshaler is the interface implemented by types that can unmarshal a JSON description of themselves. The input can be assumed to be a valid encoding of a JSON value. UnmarshalJSON must copy the JSON data if it wishes to retain the data after returning.</source>
          <target state="translated">Unmarshalerは、自身のJSON記述をアンマーシャリングできる型が実装するインターフェースです。入力はJSON値の有効なエンコーディングであると仮定することができます。UnmarshalJSONは、リターン後にデータを保持したい場合、JSONデータをコピーしなければなりません。</target>
        </trans-unit>
        <trans-unit id="53e6478e1491aec13688a3a1ab544532e2362899" translate="yes" xml:space="preserve">
          <source>UnmarshalerAttr is the interface implemented by objects that can unmarshal an XML attribute description of themselves.</source>
          <target state="translated">UnmarshalerAttrは、自身のXML属性記述をアンマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="3db9a5e29909b34e2551d8477bb97dce0e5cc013" translate="yes" xml:space="preserve">
          <source>Unquote</source>
          <target state="translated">Unquote</target>
        </trans-unit>
        <trans-unit id="d3b6eaa5a8adda6c17843b82fa332f2940b5c172" translate="yes" xml:space="preserve">
          <source>Unquote and UnquoteChar unquote Go string and rune literals.</source>
          <target state="translated">UnquoteとUnquoteChar unquote囲碁文字列とルーンリテラル。</target>
        </trans-unit>
        <trans-unit id="eb183728a78695573a325619f75443a862dbd0b9" translate="yes" xml:space="preserve">
          <source>Unquote interprets s as a single-quoted, double-quoted, or backquoted Go string literal, returning the string value that s quotes. (If s is single-quoted, it would be a Go character literal; Unquote returns the corresponding one-character string.)</source>
          <target state="translated">Unquote は、s をシングルクォート、ダブルクォート、またはバッククォートされた囲碁文字列リテラルとして解釈し、s が引用符で囲まれた文字列の値を返します。(s が単一引用符で囲まれている場合は、囲碁文字リテラルとなり、Unquote は対応する 1 文字の文字列を返します)。</target>
        </trans-unit>
        <trans-unit id="944cb633773df2e1ec790dd961a8146fba14fec2" translate="yes" xml:space="preserve">
          <source>UnquoteChar</source>
          <target state="translated">UnquoteChar</target>
        </trans-unit>
        <trans-unit id="29375f10dc5a5623870f8be238ab4c2e02bc8067" translate="yes" xml:space="preserve">
          <source>UnquoteChar decodes the first character or byte in the escaped string or character literal represented by the string s. It returns four values:</source>
          <target state="translated">UnquoteCharは、エスケープされた文字列または文字列sで表される文字リテラルの最初の文字またはバイトをデコードします。</target>
        </trans-unit>
        <trans-unit id="b53dd6b78670edea47b93cdb0a942d08f61ad422" translate="yes" xml:space="preserve">
          <source>UnquoteUsage extracts a back-quoted name from the usage string for a flag and returns it and the un-quoted usage. Given &quot;a `name` to show&quot; it returns (&quot;name&quot;, &quot;a name to show&quot;). If there are no back quotes, the name is an educated guess of the type of the flag's value, or the empty string if the flag is boolean.</source>
          <target state="translated">UnquoteUsageは、フラグの使用法文字列から引用符で囲まれた名前を抽出し、それと引用符で囲まれていない使用法を返します。a `name` to show &quot;が与えられると、それは(&quot;name&quot;,&quot;a name to show&quot;)を返します。バッククォーテーションがない場合、名前はフラグの値の型を推測したもので、フラグがブール値の場合は空文字列となります。</target>
        </trans-unit>
        <trans-unit id="31604e0bbb76d839a9e20bc3ad471c203d67835a" translate="yes" xml:space="preserve">
          <source>UnreadByte causes the next call to ReadByte to return the same byte as the previous call to ReadByte. It may be an error to call UnreadByte twice without an intervening call to ReadByte.</source>
          <target state="translated">UnreadByte は、次に ReadByte を呼び出すと、前回の ReadByte 呼び出しと同じバイトを返します。ReadByteの呼び出しを介さずにUnreadByteを2回呼び出すとエラーになる場合があります。</target>
        </trans-unit>
        <trans-unit id="f50817f3bd6d2c35e72fde2b0a932fd55a8206aa" translate="yes" xml:space="preserve">
          <source>UnreadByte complements ReadByte in implementing the io.ByteScanner interface.</source>
          <target state="translated">UnreadByte は、io.ByteScanner インターフェースの実装において ReadByte を補完します。</target>
        </trans-unit>
        <trans-unit id="77c7dde06491fe4b9339041eb3796382445874b6" translate="yes" xml:space="preserve">
          <source>UnreadByte returns an error if the most recent method called on the Reader was not a read operation. Notably, Peek is not considered a read operation.</source>
          <target state="translated">UnreadByte は、Reader で呼び出された直近のメソッドが読み取り操作ではなかった場合にエラーを返します。特に、Peek は読み込み操作とはみなされません。</target>
        </trans-unit>
        <trans-unit id="85bb36da753f37d1b461fc793f6153ef59c80214" translate="yes" xml:space="preserve">
          <source>UnreadByte unreads the last byte returned by the most recent successful read operation that read at least one byte. If a write has happened since the last read, if the last read returned an error, or if the read read zero bytes, UnreadByte returns an error.</source>
          <target state="translated">UnreadByte は、少なくとも 1 バイト以上の読み取りに成功した直近の読み取り操作によって返された最後のバイトの読み取りを解除します。最後の読み取りから書き込みが発生した場合、最後の読み取りがエラーを返した場合、または読み取りがゼロバイトだった場合、UnreadByte はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="965a6610c5d757c591de2c22877d96263eb8aa9d" translate="yes" xml:space="preserve">
          <source>UnreadByte unreads the last byte. Only the most recently read byte can be unread.</source>
          <target state="translated">UnreadByte は最後のバイトの読み込みを解除します。最近読んだバイトだけを未読にすることができます。</target>
        </trans-unit>
        <trans-unit id="4b29ee18a300641e642a50770d2b768bae903a75" translate="yes" xml:space="preserve">
          <source>UnreadRune causes the next call to ReadRune to return the same rune as the previous call to ReadRune. It may be an error to call UnreadRune twice without an intervening call to ReadRune.</source>
          <target state="translated">UnreadRuneを呼び出すと、次にReadRuneを呼び出すと、前回のReadRuneの呼び出しと同じルーンが返されます。ReadRuneの呼び出しを介さずにUnreadRuneを2回呼び出すとエラーになる場合があります。</target>
        </trans-unit>
        <trans-unit id="53822d24e97f8bde421daa61dcb508cacfde9d9a" translate="yes" xml:space="preserve">
          <source>UnreadRune complements ReadRune in implementing the io.RuneScanner interface.</source>
          <target state="translated">UnreadRuneは、io.RuneScannerインターフェイスの実装においてReadRuneを補完します。</target>
        </trans-unit>
        <trans-unit id="a4e42f86f3f39d57a5422eae590b939a777bcf43" translate="yes" xml:space="preserve">
          <source>UnreadRune unreads the last rune returned by ReadRune. If the most recent read or write operation on the buffer was not a successful ReadRune, UnreadRune returns an error. (In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.)</source>
          <target state="translated">UnreadRune は、ReadRune が返した最後のルーンの読み込みを解除します。バッファに対する直近の読み書き操作がReadRuneに成功しなかった場合、UnreadRuneはエラーを返します。(この点では、任意の読み取り操作から最後のバイトを読み取る UnreadByte よりも厳密です)。</target>
        </trans-unit>
        <trans-unit id="19847ace49c568ee229c8734fba08cf124cc864f" translate="yes" xml:space="preserve">
          <source>UnreadRune unreads the last rune. If the most recent method called on the Reader was not a ReadRune, UnreadRune returns an error. (In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.)</source>
          <target state="translated">UnreadRuneは、最後に呼び出されたルーンの読み込みを解除します。Reader で呼び出された直近のメソッドが ReadRune でなかった場合、UnreadRune はエラーを返します。(この点では、UnreadByteよりも厳密です。UnreadByteは任意の読み取り操作から最後のバイトの読み取りを解除します)。</target>
        </trans-unit>
        <trans-unit id="50c3f847c58ba55e1737c9ae778e9a6278576b57" translate="yes" xml:space="preserve">
          <source>UnsafeAddr returns a pointer to v's data. It is for advanced clients that also import the &quot;unsafe&quot; package. It panics if v is not addressable.</source>
          <target state="translated">UnsafeAddrは、vのデータへのポインタを返します。これは、&quot;unsafe&quot; パッケージもインポートする高度なクライアントのためのものです。v がアドレス指定可能でない場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="504ce26fbf37c2ede64fba6d4661638e260a1239" translate="yes" xml:space="preserve">
          <source>Unsetenv</source>
          <target state="translated">Unsetenv</target>
        </trans-unit>
        <trans-unit id="182ea105f6e57aa2c2130dff922916a82bfc3855" translate="yes" xml:space="preserve">
          <source>Unsetenv unsets a single environment variable.</source>
          <target state="translated">Unsetenvは、単一の環境変数の設定を解除します。</target>
        </trans-unit>
        <trans-unit id="5d092e34b5869cce62568374e8b69ed2285d4b5a" translate="yes" xml:space="preserve">
          <source>UnsupportedTypeError is returned when Marshal encounters a type that cannot be converted into XML.</source>
          <target state="translated">UnsupportedTypeError は、Marshal が XML に変換できない型に遭遇した場合に返されます。</target>
        </trans-unit>
        <trans-unit id="e92f4283009858bf9a4050cedd8fe684e6e6d055" translate="yes" xml:space="preserve">
          <source>Until returns the duration until t. It is shorthand for t.Sub(time.Now()).</source>
          <target state="translated">Until は t までの期間を返します。</target>
        </trans-unit>
        <trans-unit id="90df4c2aff351c99774ec32df813be4f64cfabcd" translate="yes" xml:space="preserve">
          <source>Unwrap returns the result of calling the Unwrap method on err, if err's type contains an Unwrap method returning error. Otherwise, Unwrap returns nil.</source>
          <target state="translated">Unwrapは、 errの型にエラーを返すUnwrapメソッドが含まれている場合、 errに対してUnwrapメソッドを呼び出した結果を返します。そうでなければ、Unwrapはnilを返します。</target>
        </trans-unit>
        <trans-unit id="0674f5735125e15a98a0dd1cdad0bd08b0642deb" translate="yes" xml:space="preserve">
          <source>Unwrap returns the underlying error.</source>
          <target state="translated">Unwrap は、基礎となるエラーを返します。</target>
        </trans-unit>
        <trans-unit id="2facf8e427018a05d97ad6fa738413f526dc52de" translate="yes" xml:space="preserve">
          <source>Unwrap unpacks wrapped errors. If its argument's type has an Unwrap method, it calls the method once. Otherwise, it returns nil.</source>
          <target state="translated">Unwrapは、ラップされたエラーをアンパックします。引数の型にUnwrapメソッドがある場合、そのメソッドを一度だけ呼び出します。それ以外の場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="2a313ddb07d29b1265d5875102d8b2f23477d34a" translate="yes" xml:space="preserve">
          <source>Update replaces an old node in the comment map with the new node and returns the new node. Comments that were associated with the old node are associated with the new node.</source>
          <target state="translated">更新は、コメント マップ内の古いノードを新しいノードに置き換え、新しいノードを返します。古いノードに関連付けられていたコメントは新しいノードに関連付けられます。</target>
        </trans-unit>
        <trans-unit id="edb9e0c28d17431f4e5d015de98ef6d3ddc2e66d" translate="yes" xml:space="preserve">
          <source>Update returns the result of adding the bytes in p to the crc.</source>
          <target state="translated">Update は、p のバイトを crc に追加した結果を返します。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="cec856deaea9fb4090c73c99e87c26b997d6e715" translate="yes" xml:space="preserve">
          <source>Usage prints a usage message documenting all defined command-line flags to CommandLine's output, which by default is os.Stderr. It is called when an error occurs while parsing flags. The function is a variable that may be changed to point to a custom function. By default it prints a simple header and calls PrintDefaults; for details about the format of the output and how to control it, see the documentation for PrintDefaults. Custom usage functions may choose to exit the program; by default exiting happens anyway as the command line's error handling strategy is set to ExitOnError.</source>
          <target state="translated">Usage は、定義されているすべてのコマンドラインフラグを文書化した使用法メッセージを CommandLine の出力に出力します (デフォルトは os.Stderr)。フラグの解析中にエラーが発生した場合に呼び出されます。この関数は変数で、カスタム関数を指すように変更することができます。デフォルトでは、単純なヘッダを出力し、PrintDefaults を呼び出します。出力のフォーマットや制御方法についての詳細は、PrintDefaults のドキュメントを参照してください。デフォルトでは、コマンドラインのエラー処理ストラテジーが ExitOnError に設定されているため、いずれにせよ終了します。</target>
        </trans-unit>
        <trans-unit id="08b2986bb9311484289ed77e8cb011bc1a1a4415" translate="yes" xml:space="preserve">
          <source>Use GoTokens to configure the Scanner such that it accepts all Go literal tokens including Go identifiers. Comments will be skipped.</source>
          <target state="translated">GoTokens を使用して、Go 識別子を含むすべての Go リテラル トークンを受け付けるようにスキャナを設定します。コメントはスキップされます。</target>
        </trans-unit>
        <trans-unit id="e7059998d0ef4d38492eb586594b1a7f2fda5597" translate="yes" xml:space="preserve">
          <source>Use a Scanner to implement a simple word-count utility by scanning the input as a sequence of space-delimited tokens.</source>
          <target state="translated">スキャナを使用して、スペースで区切られたトークンのシーケンスとして入力をスキャンして、単純な単語カウント ユーティリティを実装します。</target>
        </trans-unit>
        <trans-unit id="c7ed138fa83b46f7078f3eba45cc612903e73703" translate="yes" xml:space="preserve">
          <source>Use a Scanner with a custom split function (built by wrapping ScanWords) to validate 32-bit decimal input.</source>
          <target state="translated">スキャナにカスタムスプリット機能(ScanWordsをラップして構築したもの)を使用して、32ビット10進数入力を検証します。</target>
        </trans-unit>
        <trans-unit id="a131c39c2cc3965eeb7903a72d441b0e6edc8b39" translate="yes" xml:space="preserve">
          <source>Use a Scanner with a custom split function to parse a comma-separated list with an empty final value.</source>
          <target state="translated">カスタムのスプリット関数を持つスキャナを使用して、カンマで区切られたリストを空の最終値で解析します。</target>
        </trans-unit>
        <trans-unit id="3fe5cc9def42296a11d7d9a0af9fc8ea7342706f" translate="yes" xml:space="preserve">
          <source>Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.</source>
          <target state="translated">コンテキスト値は、プロセスや API を通過するリクエスト・スコープされたデータにのみ使用し、関数にオプションのパラメータを渡すためには使用しません。</target>
        </trans-unit>
        <trans-unit id="b7726ad2d6a51eae4064f8abdd4f91a30451b9da" translate="yes" xml:space="preserve">
          <source>Use of this type presents a security risk: the encapsulated content should come from a trusted source, as it will be included verbatim in the template output.</source>
          <target state="translated">このタイプを使用すると、セキュリティ上のリスクがあります。カプセル化されたコンテンツは、テンプレート出力にそのまま含まれるため、信頼できるソースから来ている必要があります。</target>
        </trans-unit>
        <trans-unit id="34a9c66123dc40ac60f0472d60867161abcd1901" translate="yes" xml:space="preserve">
          <source>UseNumber causes the Decoder to unmarshal a number into an interface{} as a Number instead of as a float64.</source>
          <target state="translated">UseNumber は、デコーダが float64 ではなく Number としてインターフェイス{}に数値をアンマーシャ ル化します。</target>
        </trans-unit>
        <trans-unit id="b20930a62f52b49ee0781be625003d945b67da4b" translate="yes" xml:space="preserve">
          <source>User annotation</source>
          <target state="translated">ユーザー注釈</target>
        </trans-unit>
        <trans-unit id="fc3da515c7dc35d47639ea550f79310b8bc9a78e" translate="yes" xml:space="preserve">
          <source>User represents a user account.</source>
          <target state="translated">ユーザーはユーザーアカウントを表します。</target>
        </trans-unit>
        <trans-unit id="d2b201b196f2c09ea10aa903c6f2d9d3642adbdc" translate="yes" xml:space="preserve">
          <source>User returns a Userinfo containing the provided username and no password set.</source>
          <target state="translated">User は、提供されたユーザ名とパスワードが設定されていない Userinfo を返します。</target>
        </trans-unit>
        <trans-unit id="68b7ed6f3fe5a5fff91e1492620a3db521e39f64" translate="yes" xml:space="preserve">
          <source>UserAgent returns the client's User-Agent, if sent in the request.</source>
          <target state="translated">UserAgentは、リクエストで送信された場合、クライアントのUser-Agentを返します。</target>
        </trans-unit>
        <trans-unit id="4ea06ed977eda51c2aa11c6b438af4cabec784b4" translate="yes" xml:space="preserve">
          <source>UserCacheDir returns the default root directory to use for user-specific cached data. Users should create their own application-specific subdirectory within this one and use that.</source>
          <target state="translated">UserCacheDir は、ユーザ固有のキャッシュデータに使用するデフォルトのルートディレクトリを返します。ユーザはこの中に独自のアプリケーション固有のサブディレクトリを作成し、それを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a2ed520c964d93e9ec6ba0898145eda2b4839b40" translate="yes" xml:space="preserve">
          <source>UserConfigDir returns the default root directory to use for user-specific configuration data. Users should create their own application-specific subdirectory within this one and use that.</source>
          <target state="translated">UserConfigDir は、ユーザ固有の設定データに使用するデフォルトのルートディレクトリを返します。ユーザはこの中に独自のアプリケーション固有のサブディレクトリを作成し、それを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="28c75db53e54c3bd7c5a9e9bf84aa07645cd4dd7" translate="yes" xml:space="preserve">
          <source>UserHomeDir returns the current user's home directory.</source>
          <target state="translated">UserHomeDir は、現在のユーザーのホームディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="e4af3b1e17fb9be937bdb3790d770684874f4388" translate="yes" xml:space="preserve">
          <source>UserPassword returns a Userinfo containing the provided username and password.</source>
          <target state="translated">UserPassword は、提供されたユーザー名とパスワードを含む Userinfo を返します。</target>
        </trans-unit>
        <trans-unit id="02f3110477b79296b9a835ccdda4c40254dba20b" translate="yes" xml:space="preserve">
          <source>UserTime returns the user CPU time of the exited process and its children.</source>
          <target state="translated">UserTimeは、終了したプロセスとその子プロセスのユーザCPU時間を返します。</target>
        </trans-unit>
        <trans-unit id="596b2947d671a1bd54b3952e3987a478fe9edb86" translate="yes" xml:space="preserve">
          <source>Username returns the username.</source>
          <target state="translated">ユーザー名を返します。</target>
        </trans-unit>
        <trans-unit id="dc8f2880e32de7bce1932889e7d7d51c71d3c62a" translate="yes" xml:space="preserve">
          <source>Using GOOS=android matches build tags and files as for GOOS=linux in addition to android tags and files.</source>
          <target state="translated">GOOS=androidを使用すると、androidのタグとファイルに加えて、GOOS=linuxと同様にビルドタグとファイルが一致するようになります。</target>
        </trans-unit>
        <trans-unit id="9ef58be31d291026b75b8271910eb178dd6cbe45" translate="yes" xml:space="preserve">
          <source>Using GOOS=illumos matches build tags and files as for GOOS=solaris in addition to illumos tags and files.</source>
          <target state="translated">GOOS=illumosを使用すると、illumosのタグとファイルに加えて、GOOS=solarisと同様にビルドタグとファイルをマッチさせることができます。</target>
        </trans-unit>
        <trans-unit id="c3fe6f0d858556f91b252b308d506eedd3cb2ddd" translate="yes" xml:space="preserve">
          <source>Using JS to include valid but untrusted JSON is not safe. A safe alternative is to parse the JSON with json.Unmarshal and then pass the resultant object into the template, where it will be converted to sanitized JSON when presented in a JavaScript context.</source>
          <target state="translated">有効だが信頼されていないJSONを含むためにJSを使うのは安全ではありません。安全な代替手段は、json.UnmarshalでJSONを解析して、結果のオブジェクトをテンプレートに渡し、JavaScriptのコンテキストで表示されたときにサニタイズされたJSONに変換することです。</target>
        </trans-unit>
        <trans-unit id="9d9125a7eed89278993fd187aca47dc4a1d76ad9" translate="yes" xml:space="preserve">
          <source>Using a nil Qualifier is equivalent to using (*Package).Path: the object is qualified by the import path, e.g., &quot;encoding/json.Marshal&quot;.</source>
          <target state="translated">nil修飾子を使用することは、(*Package).Pathを使用することと同等です:オブジェクトはインポートパス、例えば &quot;encoding/json.Marshal &quot;によって修飾されます。</target>
        </trans-unit>
        <trans-unit id="2513c3904b3d8adc521d8c82ea1568602dc6d76b" translate="yes" xml:space="preserve">
          <source>Uvarint</source>
          <target state="translated">Uvarint</target>
        </trans-unit>
        <trans-unit id="cd0cf1cee138a1f47260e7774925bd884f2375a8" translate="yes" xml:space="preserve">
          <source>Uvarint decodes a uint64 from buf and returns that value and the number of bytes read (&amp;gt; 0). If an error occurred, the value is 0 and the number of bytes n is &amp;lt;= 0 meaning:</source>
          <target state="translated">Uvarintはbufからuint64をデコードし、その値と読み取られたバイト数（&amp;gt; 0）を返します。エラーが発生した場合、値は0であり、バイト数nは0以下です：</target>
        </trans-unit>
        <trans-unit id="66771bf9a86898929e11d8280264a532271f941a" translate="yes" xml:space="preserve">
          <source>Val</source>
          <target state="translated">Val</target>
        </trans-unit>
        <trans-unit id="2bc81c70eb02eae4099191aef1e57849a8e8f03d" translate="yes" xml:space="preserve">
          <source>Val returns the constant's value.</source>
          <target state="translated">Valは定数の値を返します。</target>
        </trans-unit>
        <trans-unit id="b0f7ad9f186c50db1236f5511239fa9e5948970e" translate="yes" xml:space="preserve">
          <source>Val returns the underlying value for a given constant. Since it returns an interface, it is up to the caller to type assert the result to the expected type. The possible dynamic return types are:</source>
          <target state="translated">Val は、与えられた定数の基礎となる値を返します。これはインターフェイスを返すので、結果を期待される型に型アサートするかどうかは呼び出し元に委ねられています。可能な動的な戻り値の型は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2559cc6528d308a907426a71ef2ddf45113dcc96" translate="yes" xml:space="preserve">
          <source>Val returns the value associated with attribute Attr in Entry, or nil if there is no such attribute.</source>
          <target state="translated">ValはEntryのAttr属性に関連付けられた値を返し、そのような属性がない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="a4aefa35c3b5ad26cd56f18c500001b89f66a9ce" translate="yes" xml:space="preserve">
          <source>Valid</source>
          <target state="translated">Valid</target>
        </trans-unit>
        <trans-unit id="46c122fc5457cc399b8b858419e492a06b376755" translate="yes" xml:space="preserve">
          <source>Valid reports whether data is a valid JSON encoding.</source>
          <target state="translated">Validは、データが有効なJSONエンコーディングであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="806cc965cf7a7b71a612856c03f868243e886f5c" translate="yes" xml:space="preserve">
          <source>Valid reports whether p consists entirely of valid UTF-8-encoded runes.</source>
          <target state="translated">Validは、pが有効なUTF-8でエンコードされたルーンのみで構成されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="2c3cda690d8c1884d7b10ef8e13e38f05dfb3167" translate="yes" xml:space="preserve">
          <source>ValidRune</source>
          <target state="translated">ValidRune</target>
        </trans-unit>
        <trans-unit id="3e8899c82439ff69d29e69515b50bcac879155d8" translate="yes" xml:space="preserve">
          <source>ValidRune reports whether r can be legally encoded as UTF-8. Code points that are out of range or a surrogate half are illegal.</source>
          <target state="translated">ValidRuneは、rがUTF-8として合法的にエンコードできるかどうかをレポートします。範囲外のコードポイントやサロゲートハーフは不正です。</target>
        </trans-unit>
        <trans-unit id="a9473e977cedeea3732bd1f0e634158b2fc8bc9c" translate="yes" xml:space="preserve">
          <source>ValidString</source>
          <target state="translated">ValidString</target>
        </trans-unit>
        <trans-unit id="1965e2764de3dba462118d2aa14e90df90d22255" translate="yes" xml:space="preserve">
          <source>ValidString reports whether s consists entirely of valid UTF-8-encoded runes.</source>
          <target state="translated">ValidStringは、sが有効なUTF-8エンコードされたルーンのみで構成されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="c0a9babdac4db73aebddcf7c19ed25ebb45d7a5b" translate="yes" xml:space="preserve">
          <source>Validate performs basic sanity checks on the key. It returns nil if the key is valid, or else an error describing a problem.</source>
          <target state="translated">Validate は、鍵の基本的なサニティチェックを行います。鍵が有効な場合はnilを返し、そうでない場合は問題を表すエラーを返します。</target>
        </trans-unit>
        <trans-unit id="884a21f08ecc170ab0e83923a5cddfcafa2f19e8" translate="yes" xml:space="preserve">
          <source>Validator may be implemented by Conn to allow drivers to signal if a connection is valid or if it should be discarded.</source>
          <target state="translated">Validator は Conn によって実装され、接続が有効かどうか、または破棄すべきかどうかをドライバに知らせることができます。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="f3016ae4e1764c831e22db266c9f3792b104f577" translate="yes" xml:space="preserve">
          <source>Value (Config)</source>
          <target state="translated">値(設定)</target>
        </trans-unit>
        <trans-unit id="3b939f106840debe33fe7912aa5a94c4386c469d" translate="yes" xml:space="preserve">
          <source>Value (ReadMostly)</source>
          <target state="translated">値 (ReadMostly)</target>
        </trans-unit>
        <trans-unit id="2a2d06d73feadc3e81a5b950d3c3a1578785b1f4" translate="yes" xml:space="preserve">
          <source>Value implements the driver Valuer interface.</source>
          <target state="translated">Value は、ドライバの Valuer インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="dd218fab688fcead8af77b81093aadd12637b021" translate="yes" xml:space="preserve">
          <source>Value is a value that drivers must be able to handle. It is either nil, a type handled by a database driver's NamedValueChecker interface, or an instance of one of these types:</source>
          <target state="translated">Valueは、ドライバが扱えるようにしなければならない値です。nil、データベースドライバのNamedValueCheckerインターフェイスで処理される型、またはこれらの型のインスタンスのいずれかです。</target>
        </trans-unit>
        <trans-unit id="9752a7f3e66998d9403b579aaf11f5b93a26f7c0" translate="yes" xml:space="preserve">
          <source>Value is the documentation for a (possibly grouped) var or const declaration.</source>
          <target state="translated">値は、(グループ化されている可能性のある)var または const 宣言のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="fc8bc38b52edf0162032e19caad204a132e1edc6" translate="yes" xml:space="preserve">
          <source>Value is the interface to the dynamic value stored in a flag. (The default value is represented as a string.)</source>
          <target state="translated">Value は、フラグに格納されている動的な値へのインターフェイスです。(デフォルト値は文字列で表されます)。</target>
        </trans-unit>
        <trans-unit id="2c289f13fb553c52397f1f031c283edf2f75ba5d" translate="yes" xml:space="preserve">
          <source>Value is the reflection interface to a Go value.</source>
          <target state="translated">Valueは、Go値への反射インターフェースです。</target>
        </trans-unit>
        <trans-unit id="f874cfa2eae8a5288d6bb67626a8a5b202b1f1d3" translate="yes" xml:space="preserve">
          <source>Value represents a JavaScript value. The zero value is the JavaScript value &quot;undefined&quot;.</source>
          <target state="translated">ValueはJavaScriptの値を表します。ゼロ値はJavaScriptの値「undefined」を表します。</target>
        </trans-unit>
        <trans-unit id="12bd1222cbe13b8343d523bcfbb727dc870d622e" translate="yes" xml:space="preserve">
          <source>Value represents a JavaScript value. The zero value is the JavaScript value &quot;undefined&quot;. Values can be checked for equality with the Equal method.</source>
          <target state="translated">ValueはJavaScriptの値を表します。ゼロの値はJavaScriptの値「undefined」です。値が等しいかどうかは、Equalメソッドでチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="bea9dc918e0d02a53c6ed34890033d051d6e5b45" translate="yes" xml:space="preserve">
          <source>Value returns an arbitrary value of the given type. If the type implements the Generator interface, that will be used. Note: To create arbitrary values for structs, all the fields must be exported.</source>
          <target state="translated">Value は、指定された型の任意の値を返します。型が Generator インタフェースを実装している場合は、それが使用されます。注:構造体の任意の値を作成するには、すべてのフィールドをエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="010d442068b6dc0c175fb3be2478e451331b7772" translate="yes" xml:space="preserve">
          <source>Value returns the value of the iterator's current map entry.</source>
          <target state="translated">値は、イテレータの現在のマップエントリの値を返します。</target>
        </trans-unit>
        <trans-unit id="4814e1e8c0abd0c5b67abd9fa764cdfa19868250" translate="yes" xml:space="preserve">
          <source>ValueConverter is the interface providing the ConvertValue method.</source>
          <target state="translated">ValueConverterは、ConvertValueメソッドを提供するインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="4ee806fbc08f89d25017504477016f81d87178b9" translate="yes" xml:space="preserve">
          <source>ValueOf returns a new Value initialized to the concrete value stored in the interface i. ValueOf(nil) returns the zero Value.</source>
          <target state="translated">ValueOf は、インタフェース i に格納されている具体的な値に初期化された新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="73fa7582a50fd6ffa7153d229b6170f753731b5a" translate="yes" xml:space="preserve">
          <source>ValueOf returns x as a JavaScript value:</source>
          <target state="translated">ValueOfは、JavaScriptの値としてxを返します。</target>
        </trans-unit>
        <trans-unit id="f18975e8d6052ff98ae55792b39100c67475c7da" translate="yes" xml:space="preserve">
          <source>Valuer is the interface providing the Value method.</source>
          <target state="translated">Valuerは、Valueメソッドを提供するインターフェースです。</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="4c4b32df8b9b0ab6cff257dc64ed3eb643572b49" translate="yes" xml:space="preserve">
          <source>Values containing the types defined in this package should not be copied.</source>
          <target state="translated">このパッケージで定義されている型を含む値はコピーしてはいけません。</target>
        </trans-unit>
        <trans-unit id="db0f016ee293f8c7fb961ef81d6b041a8271fcde" translate="yes" xml:space="preserve">
          <source>Values maps a string key to a list of values. It is typically used for query parameters and form values. Unlike in the http.Header map, the keys in a Values map are case-sensitive.</source>
          <target state="translated">Values は、文字列キーを値のリストにマップします。これは通常、クエリパラメータやフォームの値に使用されます。http.Header マップとは異なり、 Values マップのキーは大文字小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="ed9ae6e1ddce7aa950c188cea7070152cbaaef3a" translate="yes" xml:space="preserve">
          <source>Values of IMAGE_FILE_HEADER.Characteristics. These can be combined together.</source>
          <target state="translated">IMAGE_FILE_HEADER.Featuresの値です。これらを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="e1b6d5f206af70bb39bd5fc526ef574743992a54" translate="yes" xml:space="preserve">
          <source>Values of the Image interface are created either by calling functions such as NewRGBA and NewPaletted, or by calling Decode on an io.Reader containing image data in a format such as GIF, JPEG or PNG. Decoding any particular image format requires the prior registration of a decoder function. Registration is typically automatic as a side effect of initializing that format's package so that, to decode a PNG image, it suffices to have</source>
          <target state="translated">画像インタフェースの値は、NewRGBAやNewPalettedなどの関数を呼び出すか、GIF、JPEG、PNGなどの形式の画像データを含むio.Reader上でDecodeを呼び出すことで作成されます。特定の画像フォーマットをデコードするには、デコーダ関数の事前登録が必要です。登録は通常、そのフォーマットのパッケージを初期化することで自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="b65743fb1655a6d5656fe5188b8219e485d45a6c" translate="yes" xml:space="preserve">
          <source>Values returns all values associated with the given key. It is case insensitive; CanonicalMIMEHeaderKey is used to canonicalize the provided key. To use non-canonical keys, access the map directly. The returned slice is not a copy.</source>
          <target state="translated">Valuesは、指定されたキーに関連付けられたすべての値を返します。大文字小文字を区別しません。CanonicalMIMEHeaderKey は、指定されたキーを正規化するために使用されます。非正規キーを使用するには、マップに直接アクセスします。返されるスライスはコピーではありません。</target>
        </trans-unit>
        <trans-unit id="d0f032ed754eb781ca5f1ab9c0d5896202022c92" translate="yes" xml:space="preserve">
          <source>Values returns all values associated with the given key. It is case insensitive; textproto.CanonicalMIMEHeaderKey is used to canonicalize the provided key. To use non-canonical keys, access the map directly. The returned slice is not a copy.</source>
          <target state="translated">Values は、指定されたキーに関連付けられた全ての値を返します。大文字小文字を区別しません。textproto.CanonicalMIMEHeaderKeyは、指定されたキーを正規化するために使用されます。非正規キーを使用するには、マップに直接アクセスします。返されるスライスはコピーではありません。</target>
        </trans-unit>
        <trans-unit id="556542fae1b8220ad354f73db7960fdf03643304" translate="yes" xml:space="preserve">
          <source>Values that are shared by both R_PPC and R_PPC64 are prefixed with R_POWERPC_ in the ELF standard. For the R_PPC type, the relevant shared relocations have been renamed with the prefix R_PPC_. The original name follows the value in a comment.</source>
          <target state="translated">R_PPCとR_PPC64の両方で共有される値は、ELF標準ではR_POWERPC_がプレフィックスとなっています。R_PPC型では、関連する共有再配置は接頭辞R_PPC_で名前が変更されています。元の名前は、コメントの値の後に続く。</target>
        </trans-unit>
        <trans-unit id="35513df4822daf6991ea9831d940cbcb44ab9510" translate="yes" xml:space="preserve">
          <source>Values that are shared by both R_PPC and R_PPC64 are prefixed with R_POWERPC_ in the ELF standard. For the R_PPC64 type, the relevant shared relocations have been renamed with the prefix R_PPC64_. The original name follows the value in a comment.</source>
          <target state="translated">R_PPCとR_PPC64の両方で共有される値は、ELF標準ではR_POWERPC_がプレフィックスとなっています。R_PPC64型では、関連する共有再配置は接頭辞R_PPC64_で名前が変更されています。元の名前は、コメントの値の後に続きます。</target>
        </trans-unit>
        <trans-unit id="5491dd2526a7b6a12fe2eb7a45fdc97e08387c1a" translate="yes" xml:space="preserve">
          <source>Var defines a flag with the specified name and usage string. The type and value of the flag are represented by the first argument, of type Value, which typically holds a user-defined implementation of Value. For instance, the caller could create a flag that turns a comma-separated string into a slice of strings by giving the slice the methods of Value; in particular, Set would decompose the comma-separated string into the slice.</source>
          <target state="translated">Varは、指定された名前と使用文字列を持つフラグを定義します。フラグの型と値は、Value型の第一引数で表されます。例えば、呼び出し元は、カンマで区切られた文字列をスライスに変換するフラグを作成し、スライスに Value のメソッドを与えることができます。</target>
        </trans-unit>
        <trans-unit id="ce2b2698fd744904596b638fadb24e9ac560ff55" translate="yes" xml:space="preserve">
          <source>Var is an abstract type for all exported variables.</source>
          <target state="translated">Varは、エクスポートされたすべての変数の抽象型です。</target>
        </trans-unit>
        <trans-unit id="2fe39193f9c048f94aabb561a65b8ad4ebd4664a" translate="yes" xml:space="preserve">
          <source>VariableNode holds a list of variable names, possibly with chained field accesses. The dollar sign is part of the (first) name.</source>
          <target state="translated">VariableNode は変数名のリストを保持します。ドル記号は (最初の)名前の一部です。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="f9c863db27e83db40f4468fc4bc690e601042fdf" translate="yes" xml:space="preserve">
          <source>Variables previously declared can also be assigned, using the syntax</source>
          <target state="translated">以前に宣言した変数を代入することもできます。</target>
        </trans-unit>
        <trans-unit id="ca11a0cc5def9c210a74faf8ede1798e07fe2571" translate="yes" xml:space="preserve">
          <source>Variadic reports whether the signature s is variadic.</source>
          <target state="translated">Variadic は、シグネチャ s が variadic であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="41d79747265706c0afa494f13a1d7304f4478119" translate="yes" xml:space="preserve">
          <source>Varint</source>
          <target state="translated">Varint</target>
        </trans-unit>
        <trans-unit id="f5ebfb0ae8769b5ca2188331b009d7eba5a85341" translate="yes" xml:space="preserve">
          <source>Varint decodes an int64 from buf and returns that value and the number of bytes read (&amp;gt; 0). If an error occurred, the value is 0 and the number of bytes n is &amp;lt;= 0 with the following meaning:</source>
          <target state="translated">Varintはbufからint64をデコードし、その値と読み取られたバイト数（&amp;gt; 0）を返します。エラーが発生した場合、値は0で、バイト数nは&amp;lt;= 0で、次の意味があります。</target>
        </trans-unit>
        <trans-unit id="d24fa62b1d834d7cd3cd0e8882051f85d094eda3" translate="yes" xml:space="preserve">
          <source>Various errors contained in OpError.</source>
          <target state="translated">OpErrorに含まれる様々なエラー。</target>
        </trans-unit>
        <trans-unit id="1a2978dcc531a211271eca6e53e9367381806a65" translate="yes" xml:space="preserve">
          <source>Various implementations of ValueConverter are provided by the driver package to provide consistent implementations of conversions between drivers. The ValueConverters have several uses:</source>
          <target state="translated">ValueConverter の様々な実装は、ドライバ間の変換の一貫した実装を提供するために、ドライバパッケージによって提供されます。ValueConverterにはいくつかの用途があります。</target>
        </trans-unit>
        <trans-unit id="677405d5dfca724a737bda64c6dc1ddb03f2bb84" translate="yes" xml:space="preserve">
          <source>Various isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned.</source>
          <target state="translated">ドライバーがBeginTxでサポートする様々なアイソレーションレベル。ドライバが特定の分離レベルをサポートしていない場合、エラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="cc21bbee9a9b0425c95545ecf2f53bc29369d55b" translate="yes" xml:space="preserve">
          <source>Various methods support conversions between strings and corresponding numeric values, and vice versa: *Int, *Rat, and *Float values implement the Stringer interface for a (default) string representation of the value, but also provide SetString methods to initialize a value from a string in a variety of supported formats (see the respective SetString documentation).</source>
          <target state="translated">さまざまなメソッドが、文字列と対応する数値間の変換をサポートしています。*Int、*Rat、および*Float値は、値の(デフォルトの)文字列表現のためのStringerインタフェースを実装していますが、サポートされているさまざまな形式で文字列から値を初期化するためのSetStringメソッドも提供しています(それぞれのSetStringドキュメントを参照してください)。</target>
        </trans-unit>
        <trans-unit id="fe5502979be4e45317e06e3f4bc8dea3c27b9d68" translate="yes" xml:space="preserve">
          <source>Verbose reports whether the -test.v flag is set.</source>
          <target state="translated">Verbose は、-test.v フラグが設定されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="155a05e64e4d5e6d0dbf5afad455ef4b2c7d215e" translate="yes" xml:space="preserve">
          <source>Verify attempts to verify c by building one or more chains from c to a certificate in opts.Roots, using certificates in opts.Intermediates if needed. If successful, it returns one or more chains where the first element of the chain is c and the last element is from opts.Roots.</source>
          <target state="translated">必要に応じて opts.Intermediates の証明書を使用して、c から opts.Roots の証明書への 1 つ以上のチェーンを構築し、c の検証を試みます。成功した場合、最初の要素がcで最後の要素がopts.Rootsのものである1つ以上のチェーンを返します。</target>
        </trans-unit>
        <trans-unit id="8f646662ac01cb1ef7a3f3dbe169c861f558bcfa" translate="yes" xml:space="preserve">
          <source>Verify checks the validity of an email address on the server. If Verify returns nil, the address is valid. A non-nil return does not necessarily indicate an invalid address. Many servers will not verify addresses for security reasons.</source>
          <target state="translated">Verify は、サーバ上のメールアドレスの有効性をチェックします。Verify が nil を返した場合、そのアドレスは有効です。nil 以外の値が返ってきたからといって、必ずしも無効なアドレスであるとは限りません。多くのサーバは、セキュリティ上の理由からアドレスの検証を行いません。</target>
        </trans-unit>
        <trans-unit id="5f78fb77229812b310f6d30ba2f8eeb1a758e0db" translate="yes" xml:space="preserve">
          <source>Verify reports whether sig is a valid signature of message by publicKey. It will panic if len(publicKey) is not PublicKeySize.</source>
          <target state="translated">Verify は、sig が publicKey によるメッセージの有効な署名であるかどうかを報告します。len(publicKey)がPublicKeySizeでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="afa19e9e5042f2e1366a51a651d0d42c62c9a9dc" translate="yes" xml:space="preserve">
          <source>Verify verifies the signature in r, s of hash using the public key, pub. It reports whether the signature is valid.</source>
          <target state="translated">Verify は公開鍵 pub を用いてハッシュの r,s の署名を検証します。署名が有効かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="29e311050b6e4da19e97375079ff2944ac6c7fb5" translate="yes" xml:space="preserve">
          <source>Verify verifies the signature in r, s of hash using the public key, pub. Its return value records whether the signature is valid.</source>
          <target state="translated">Verify は公開鍵 pub を用いてハッシュの r,s の署名を検証します。戻り値は署名が有効かどうかを記録します。</target>
        </trans-unit>
        <trans-unit id="145232aacf42696b4e278956de6bab24512004cd" translate="yes" xml:space="preserve">
          <source>VerifyASN1 verifies the ASN.1 encoded signature, sig, of hash using the public key, pub. Its return value records whether the signature is valid.</source>
          <target state="translated">VerifyASN1は公開鍵pubを用いてハッシュのASN.1符号化された署名sigを検証します。戻り値は署名が有効かどうかを記録します。</target>
        </trans-unit>
        <trans-unit id="c77ce67480dc146ec9f71541bb8eac40755f84ee" translate="yes" xml:space="preserve">
          <source>VerifyHostname checks that the peer certificate chain is valid for connecting to host. If so, it returns nil; if not, it returns an error describing the problem.</source>
          <target state="translated">VerifyHostname は、ピア証明書チェーンがホストに接続するために有効であるかどうかをチェックします。有効であれば nil を返し、無効であれば問題を説明するエラーを返します。</target>
        </trans-unit>
        <trans-unit id="4d87443c0e8c5a2665736c35fe304b37073dc32e" translate="yes" xml:space="preserve">
          <source>VerifyHostname returns nil if c is a valid certificate for the named host. Otherwise it returns an error describing the mismatch.</source>
          <target state="translated">VerifyHostnameは、cが指定されたホストの有効な証明書であればnilを返します。そうでなければ、不一致を表すエラーを返します。</target>
        </trans-unit>
        <trans-unit id="f86ef4530b45b573b44981bfecb27623cddb836c" translate="yes" xml:space="preserve">
          <source>VerifyOptions contains parameters for Certificate.Verify.</source>
          <target state="translated">VerifyOptions には、Certificate.Verify のパラメータが含まれています。</target>
        </trans-unit>
        <trans-unit id="3cca137a6af7f592d32076ad3b96f2dd532d13e4" translate="yes" xml:space="preserve">
          <source>VerifyOptions contains parameters for Certificate.Verify. It's a structure because other PKIX verification APIs have ended up needing many options.</source>
          <target state="translated">VerifyOptions には、Certificate.Verify のパラメータが含まれています。これは、他の PKIX 検証 API が多くのオプションを必要としていたための構造です。</target>
        </trans-unit>
        <trans-unit id="904631d00687a7288866da49169708056e59b147" translate="yes" xml:space="preserve">
          <source>VerifyPKCS1v15</source>
          <target state="translated">VerifyPKCS1v15</target>
        </trans-unit>
        <trans-unit id="03648c01c4f8ec482385a7d7d5a6f43278916d7d" translate="yes" xml:space="preserve">
          <source>VerifyPKCS1v15 verifies an RSA PKCS #1 v1.5 signature. hashed is the result of hashing the input message using the given hash function and sig is the signature. A valid signature is indicated by returning a nil error. If hash is zero then hashed is used directly. This isn't advisable except for interoperability.</source>
          <target state="translated">VerifyPKCS1v15はRSA PKCS #1 v1.5署名を検証します。 hashedは与えられたハッシュ関数を使用して入力メッセージをハッシュした結果であり、sigは署名です。有効な署名はnilエラーを返すことで示されます。hashが0の場合は、hashedが直接使用されます。これは相互運用性を考慮した場合を除き、お勧めできません。</target>
        </trans-unit>
        <trans-unit id="7fac2ac8cef2b4f2fce0053008362560cd0a7f6f" translate="yes" xml:space="preserve">
          <source>VerifyPKCS1v15 verifies an RSA PKCS#1 v1.5 signature. hashed is the result of hashing the input message using the given hash function and sig is the signature. A valid signature is indicated by returning a nil error. If hash is zero then hashed is used directly. This isn't advisable except for interoperability.</source>
          <target state="translated">VerifyPKCS1v15はRSA PKCS#1 v1.5の署名を検証します。 hashedは与えられたハッシュ関数を使用して入力メッセージをハッシュした結果であり、sigは署名です。有効な署名はnilエラーを返すことで示されます。hashが0の場合は、hashedが直接使用されます。これは相互運用性を考慮した場合を除き、お勧めできません。</target>
        </trans-unit>
        <trans-unit id="22849df5c99a08214a361cc786e111d1f4ddafec" translate="yes" xml:space="preserve">
          <source>VerifyPSS verifies a PSS signature.</source>
          <target state="translated">VerifyPSSはPSS署名を検証します。</target>
        </trans-unit>
        <trans-unit id="a12022e4f1f957db46b6ad31ae0c6d8b5b335f06" translate="yes" xml:space="preserve">
          <source>VerifyPSS verifies a PSS signature. hashed is the result of hashing the input message using the given hash function and sig is the signature. A valid signature is indicated by returning a nil error. The opts argument may be nil, in which case sensible defaults are used.</source>
          <target state="translated">VerifyPSSはPSS署名を検証します。 hashedは与えられたハッシュ関数を使用して入力メッセージをハッシュした結果であり、sigは署名です。有効な署名はnilエラーを返すことで示されます。opts 引数には nil を指定することができ、その場合は適切なデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="fc50bdb16e95dd81d5ab93336a4873d743e71e10" translate="yes" xml:space="preserve">
          <source>Version is found in Header.Ident[EI_VERSION] and Header.Version.</source>
          <target state="translated">バージョンは、Header.Ident[EI_VERSION]とHeader.Versionにあります。</target>
        </trans-unit>
        <trans-unit id="4d5c372788d86ffb1bb307fe18c33d0d35dfaf32" translate="yes" xml:space="preserve">
          <source>Version is the Unicode edition from which the tables are derived.</source>
          <target state="translated">バージョンは、表が派生したUnicode版です。</target>
        </trans-unit>
        <trans-unit id="50de89df378f68937423c4c0b0df29cc9d671898" translate="yes" xml:space="preserve">
          <source>Version returns the Go tree's version string. It is either the commit hash and date at the time of the build or, when possible, a release tag like &quot;go1.3&quot;.</source>
          <target state="translated">Version は、囲碁ツリーのバージョン文字列を返します。これは、ビルド時のコミットハッシュと日付、または可能であれば &quot;go1.3&quot; のようなリリースタグのいずれかです。</target>
        </trans-unit>
        <trans-unit id="a9f8b9e002c84b093e85fe6340e9e2446c0f01f6" translate="yes" xml:space="preserve">
          <source>Very large values overflow to -1 or +Inf.</source>
          <target state="translated">非常に大きな値は-1または+Infにオーバーフローします。</target>
        </trans-unit>
        <trans-unit id="62ec9d14e878063c7140d04d700991af277e0332" translate="yes" xml:space="preserve">
          <source>Very large values overflow to 0 or +Inf. Very small values underflow to 1.</source>
          <target state="translated">非常に大きな値は 0 または +Inf にオーバーフローします。非常に小さな値は1にアンダーフローします。</target>
        </trans-unit>
        <trans-unit id="548f7438120baf452d57249c7ed1e4259eddd666" translate="yes" xml:space="preserve">
          <source>Visit visits the command-line flags in lexicographical order, calling fn for each. It visits only those flags that have been set.</source>
          <target state="translated">Visit は、コマンドラインのフラグを辞書順に表示し、それぞれのフラグに対して fn を呼び出します。設定されているフラグのみを訪問します。</target>
        </trans-unit>
        <trans-unit id="3d71d97888658f2741fa47ca0e6dafd3ee5bd8d5" translate="yes" xml:space="preserve">
          <source>Visit visits the flags in lexicographical order, calling fn for each. It visits only those flags that have been set.</source>
          <target state="translated">Visitは,各フラグに対してfnを呼び出して,辞書順にフラグを訪問します.設定されているフラグのみを訪問します。</target>
        </trans-unit>
        <trans-unit id="fe139ba7798500e37c921c3f2eca473d92def875" translate="yes" xml:space="preserve">
          <source>VisitAll visits the command-line flags in lexicographical order, calling fn for each. It visits all flags, even those not set.</source>
          <target state="translated">VisitAll は、コマンドラインのフラグを辞書順に巡回し、それぞれのフラグに対して fn を呼び出します。設定されていないフラグも含めて、すべてのフラグを参照します。</target>
        </trans-unit>
        <trans-unit id="91926cb218ad9a9f08c7f40210f9b3b594b76515" translate="yes" xml:space="preserve">
          <source>VisitAll visits the flags in lexicographical order, calling fn for each. It visits all flags, even those not set.</source>
          <target state="translated">VisitAll は,各フラグに対して fn を呼び出して,辞書順にフラグを訪問します.設定されていないフラグも含めて,すべてのフラグを訪れます.</target>
        </trans-unit>
        <trans-unit id="82b27aedf84d8e8a368898854887f1a9db2938b6" translate="yes" xml:space="preserve">
          <source>VolumeName returns leading volume name. Given &quot;C:\foo\bar&quot; it returns &quot;C:&quot; on Windows. Given &quot;\\host\share\foo&quot; it returns &quot;\\host\share&quot;. On other platforms it returns &quot;&quot;.</source>
          <target state="translated">VolumeName は、先頭のボリューム名を返します。 Given &quot;Given &quot;\\hostshare&quot; it returns &quot;\hostshare&quot; を返します。他のプラットフォームでは &quot;&quot;.</target>
        </trans-unit>
        <trans-unit id="116af4a220931a113874c3a9a8fb8b67e737c229" translate="yes" xml:space="preserve">
          <source>WARNING: this function doesn't do any revocation checking.</source>
          <target state="translated">警告:この関数は失効チェックを行いません。</target>
        </trans-unit>
        <trans-unit id="ac3ed0238ed01e1e125ce49b809e2689db256bfa" translate="yes" xml:space="preserve">
          <source>WARNING: use of this function to encrypt plaintexts other than session keys is dangerous. Use RSA OAEP in new protocols.</source>
          <target state="translated">警告:この関数を使用してセッション鍵以外の平文を暗号化することは危険です。新しいプロトコルではRSA OAEPを使用してください。</target>
        </trans-unit>
        <trans-unit id="d791440e471e57ef06317ea366a55351a6722e8d" translate="yes" xml:space="preserve">
          <source>Wait atomically unlocks c.L and suspends execution of the calling goroutine. After later resuming execution, Wait locks c.L before returning. Unlike in other systems, Wait cannot return unless awoken by Broadcast or Signal.</source>
          <target state="translated">Waitは原子的にc.Lのロックを解除し、呼び出したgoroutineの実行を中断します。後に実行を再開した後、Waitは戻る前にc.Lをロックします。他のシステムとは異なり、BroadcastやSignalによって起こされない限り、Waitは戻ることができません。</target>
        </trans-unit>
        <trans-unit id="c1e4ec07809f552042a2744ebd76a1ff9cdfd927" translate="yes" xml:space="preserve">
          <source>Wait blocks until the WaitGroup counter is zero.</source>
          <target state="translated">WaitGroupカウンタが0になるまでブロックを待ちます。</target>
        </trans-unit>
        <trans-unit id="a2b93a450c159447eb449f1d44b9509d23d1eff8" translate="yes" xml:space="preserve">
          <source>Wait releases any resources associated with the Cmd.</source>
          <target state="translated">Wait は Cmd に関連付けられたリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="cecb6db143b18629c77edfdcfa6e40a828bd3ecd" translate="yes" xml:space="preserve">
          <source>Wait waits for the Process to exit, and then returns a ProcessState describing its status and an error, if any. Wait releases any resources associated with the Process. On most operating systems, the Process must be a child of the current process or an error will be returned.</source>
          <target state="translated">待機は、プロセスが終了するのを待ち、プロセスの状態とエラーが発生した場合は、その状態を記述したProcessStateを返します。待機中は、プロセスに関連付けられたリソースを解放します。ほとんどのオペレーティングシステムでは、プロセスは現在のプロセスの子プロセスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ef4d163f70a5558cd92581c6468ca54f951f10cb" translate="yes" xml:space="preserve">
          <source>Wait waits for the command to exit and waits for any copying to stdin or copying from stdout or stderr to complete.</source>
          <target state="translated">Wait はコマンドが終了するのを待ち、標準入力へのコピーや標準出力や標準エラーからのコピーが完了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="aea382006d640fdfa58d59c1e0ad39798008158f" translate="yes" xml:space="preserve">
          <source>Wait will close the pipe after seeing the command exit, so most callers need not close the pipe themselves. It is thus incorrect to call Wait before all reads from the pipe have completed. For the same reason, it is incorrect to call Run when using StdoutPipe. See the example for idiomatic usage.</source>
          <target state="translated">Wait はコマンドの終了を見た後にパイプを閉じるので、ほとんどの呼び出し側は自分でパイプを閉じる必要はありません。したがって、パイプからの読み込みがすべて完了する前に Wait を呼び出すのは正しくありません。同様の理由で、StdoutPipe を使用しているときに Run を呼び出すのは正しくありません。慣用的な使用法については例を参照してください。</target>
        </trans-unit>
        <trans-unit id="4d3243a3ead84d3a842320a1e7a6c5fbcf29075e" translate="yes" xml:space="preserve">
          <source>Wait will close the pipe after seeing the command exit, so most callers need not close the pipe themselves. It is thus incorrect to call Wait before all reads from the pipe have completed. For the same reason, it is incorrect to use Run when using StderrPipe. See the StdoutPipe example for idiomatic usage.</source>
          <target state="translated">Wait はコマンドの終了を見た後にパイプを閉じるので、ほとんどの呼び出し側は自分でパイプを閉じる必要はありません。したがって、パイプからの読み込みがすべて完了する前に Wait を呼び出すのは正しくありません。同じ理由で、StderrPipe を使用しているときに Run を使用するのは正しくありません。慣用的な使用法については StdoutPipe の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="e61dcf7176445918332c5c75e515641021cd367b" translate="yes" xml:space="preserve">
          <source>Wait will close the pipe after seeing the command exit, so most callers need not close the pipe themselves; however, an implication is that it is incorrect to call Wait before all reads from the pipe have completed. For the same reason, it is incorrect to call Run when using StdoutPipe. See the example for idiomatic usage.</source>
          <target state="translated">Wait はコマンドが終了した後にパイプを閉じるので、ほとんどの呼び出し元は自分でパイプを閉じる必要はありませんが、パイプからの読み込みがすべて完了する前に Wait を呼び出すのは正しくないという意味合いがあります。同様の理由で、StdoutPipe を使用しているときに Run を呼び出すのは正しくありません。慣用的な使用法については、例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6e2d628a299984437542474f102b1e387913aa4f" translate="yes" xml:space="preserve">
          <source>Wait will close the pipe after seeing the command exit, so most callers need not close the pipe themselves; however, an implication is that it is incorrect to call Wait before all reads from the pipe have completed. For the same reason, it is incorrect to use Run when using StderrPipe. See the StdoutPipe example for idiomatic usage.</source>
          <target state="translated">Wait はコマンドの終了を見た後にパイプを閉じるので、ほとんどの呼び出し元は自分でパイプを閉じる必要はありませんが、パイプからの読み込みがすべて完了する前に Wait を呼び出すのは正しくないという意味合いがあります。同じ理由で、StderrPipe を使用しているときに Run を使用するのは正しくありません。イディオムな使い方は StdoutPipe の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="66edd56a29d8f65f00197517346652171bdf474e" translate="yes" xml:space="preserve">
          <source>WaitGroup</source>
          <target state="translated">WaitGroup</target>
        </trans-unit>
        <trans-unit id="e0c705d18e3fae4506d7273bda6435690cdbde08" translate="yes" xml:space="preserve">
          <source>Walk</source>
          <target state="translated">Walk</target>
        </trans-unit>
        <trans-unit id="9272862a0570cd3c8a576242d0e65b3cfcf9dde3" translate="yes" xml:space="preserve">
          <source>Walk traverses an AST in depth-first order: It starts by calling v.Visit(node); node must not be nil. If the visitor w returned by v.Visit(node) is not nil, Walk is invoked recursively with visitor w for each of the non-nil children of node, followed by a call of w.Visit(nil).</source>
          <target state="translated">WalkはASTを深さ優先で巡回します。ノードはnilであってはなりません.v.Visit(node)が返す訪問者wがnilでない場合,walkはnodeの非nilの子のそれぞれについて訪問者wを用いて再帰的に呼び出され,その後にw.Visit(nil)が呼び出されます.</target>
        </trans-unit>
        <trans-unit id="844997b7d380cfffe958c2b4b63e117129683358" translate="yes" xml:space="preserve">
          <source>Walk walks the file tree rooted at root, calling walkFn for each file or directory in the tree, including root. All errors that arise visiting files and directories are filtered by walkFn. The files are walked in lexical order, which makes the output deterministic but means that for very large directories Walk can be inefficient. Walk does not follow symbolic links.</source>
          <target state="translated">walk はルートを含むツリー内の各ファイルやディレクトリに対して walkFn を呼び出して、ルートを基点とするファイルツリーを歩きます。ファイルやディレクトリを訪れた際に発生するすべてのエラーはwalkFnによってフィルタリングされます。ファイルは辞書順にウォークされ、出力は決定論的になりますが、非常に大きなディレクトリの場合、Walkは非効率的になる可能性があります。walkはシンボリックリンクには従いません。</target>
        </trans-unit>
        <trans-unit id="ea8fd18744a5b8a94a61df0e6be7f9d622440bee" translate="yes" xml:space="preserve">
          <source>WalkFunc is the type of the function called for each file or directory visited by Walk. The path argument contains the argument to Walk as a prefix; that is, if Walk is called with &quot;dir&quot;, which is a directory containing the file &quot;a&quot;, the walk function will be called with argument &quot;dir/a&quot;. The info argument is the os.FileInfo for the named path.</source>
          <target state="translated">WalkFuncは、Walkが訪問するファイルやディレクトリごとに呼び出される関数の型です。path 引数には、Walkへの引数を接頭辞として含みます。つまり、ファイル &quot;a &quot;を含むディレクトリである &quot;dir &quot;でWalkが呼び出された場合、引数 &quot;dir/a &quot;でWalk関数が呼び出されることになります。info 引数には、指定されたパスの os.FileInfo を指定します。</target>
        </trans-unit>
        <trans-unit id="2918ed6d5c509e3ed1b93a9bceda4782bc8dd955" translate="yes" xml:space="preserve">
          <source>Warning logs a message with severity LOG_WARNING, ignoring the severity passed to New.</source>
          <target state="translated">Warning は、New に渡された深刻度を無視して、深刻度 LOG_WARNING でメッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="6dda0897da5609f90207d91adc268a59c4a1ed0a" translate="yes" xml:space="preserve">
          <source>We define codes for each error that manifests while escaping templates, but escaped templates may also fail at runtime.</source>
          <target state="translated">テンプレートのエスケープ中に顕在化する各エラーに対してコードを定義していますが、エスケープされたテンプレートは実行時に失敗することもあります。</target>
        </trans-unit>
        <trans-unit id="4c1d860c4500491f651fd6c28babc0fc5252a9c1" translate="yes" xml:space="preserve">
          <source>WebSafe is a 216-color palette that was popularized by early versions of Netscape Navigator. It is also known as the Netscape Color Cube.</source>
          <target state="translated">WebSafeは、Netscape Navigatorの初期バージョンで普及した216色のパレットです。Netscape Color Cubeとしても知られています。</target>
        </trans-unit>
        <trans-unit id="9b612a9be3daa519fe810c831ee09c50cb694cd9" translate="yes" xml:space="preserve">
          <source>Weekday returns the day of the week specified by t.</source>
          <target state="translated">Weekdayは、tで指定した曜日を返します。</target>
        </trans-unit>
        <trans-unit id="f665bbd01fb3804e446b49c63f8771aa2a58f0dc" translate="yes" xml:space="preserve">
          <source>Well-known IPv4 addresses</source>
          <target state="translated">よく知られたIPv4アドレス</target>
        </trans-unit>
        <trans-unit id="d1c37cf7857b91d487793e2b066aa7768c44b584" translate="yes" xml:space="preserve">
          <source>Well-known IPv6 addresses</source>
          <target state="translated">よく知られたIPv6アドレス</target>
        </trans-unit>
        <trans-unit id="423b2ce203c11b513c12b2cf5a302bece806d9e9" translate="yes" xml:space="preserve">
          <source>When Go code is built with options like -buildmode=c-shared, it will be run as part of an existing non-Go program. The non-Go code may have already installed signal handlers when the Go code starts (that may also happen in unusual cases when using cgo or SWIG; in that case, the discussion here applies). For -buildmode=c-archive the Go runtime will initialize signals at global constructor time. For -buildmode=c-shared the Go runtime will initialize signals when the shared library is loaded.</source>
          <target state="translated">buildmode=c-sharedのようなオプションでGoコードをビルドすると、既存の非Goプログラムの一部として実行されます。Go以外のコードは、Goコードの起動時にすでにシグナルハンドラをインストールしている可能性があります(cgoやSWIGを使用している場合には、通常とは異なるケースが発生する可能性があります。その場合は、ここでの説明が適用されます)。buildmode=c-archiveの場合、Goランタイムはグローバルコンストラクタ時にシグナルを初期化します。buildmode=c-sharedの場合、Goランタイムは共有ライブラリがロードされたときにシグナルを初期化します。</target>
        </trans-unit>
        <trans-unit id="157b3f39795f3c1bb26d85adf87f02f3367ef226" translate="yes" xml:space="preserve">
          <source>When Read encounters an error or end-of-file condition after successfully reading n &amp;gt; 0 bytes, it returns the number of bytes read. It may return the (non-nil) error from the same call or return the error (and n == 0) from a subsequent call. An instance of this general case is that a Reader returning a non-zero number of bytes at the end of the input stream may return either err == EOF or err == nil. The next Read should return 0, EOF.</source>
          <target state="translated">n&amp;gt; 0バイトを正常に読み取った後、Readがエラーまたはファイルの終わり条件を検出すると、読み取ったバイト数を返します。同じ呼び出しから（非nil）エラーを返すか、後続の呼び出しからエラー（およびn == 0）を返します。この一般的なケースの例は、入力ストリームの最後にゼロ以外のバイト数を返すリーダーがerr == EOFまたはerr == nilを返す場合があることです。次の読み取りは0、EOFを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="d6278f9f812d1e00a798b88f0d43a4c07f1b736e" translate="yes" xml:space="preserve">
          <source>When ReadAt returns n &amp;lt; len(p), it returns a non-nil error explaining why more bytes were not returned. In this respect, ReadAt is stricter than Read.</source>
          <target state="translated">ReadAtがn &amp;lt;len（p）を返す場合、それ以上のバイトが返されなかった理由を説明する非nilエラーを返します。この点で、ReadAtはReadよりも厳密です。</target>
        </trans-unit>
        <trans-unit id="e42e8857e0f2dbf41e5d11d0b713339895c2d306" translate="yes" xml:space="preserve">
          <source>When Shutdown is called, Serve, ListenAndServe, and ListenAndServeTLS immediately return ErrServerClosed. Make sure the program doesn't exit and waits instead for Shutdown to return.</source>
          <target state="translated">Shutdown が呼び出されると、Serve、ListenAndServe、および ListenAndServeTLS は直ちに ErrServerClosed を返します。プログラムが終了せず、代わりに Shutdown が戻るのを待っていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="a1346033e8cd0c36ddc0423c4dcbbce227d0c225" translate="yes" xml:space="preserve">
          <source>When TestMain is called, flag.Parse has not been run. If TestMain depends on command-line flags, including those of the testing package, it should call flag.Parse explicitly. Command line flags are always parsed by the time test or benchmark functions run.</source>
          <target state="translated">TestMain が呼ばれた場合、flag.Parse は実行されていません。TestMain がテストパッケージのフラグを含むコマンドラインフラグに依存している場合は、明示的に flag.Parse を呼び出す必要があります。コマンドラインフラグは常にテストやベンチマーク関数が実行されるまでに解析されます。</target>
        </trans-unit>
        <trans-unit id="52cedf2625524a5c08d35a591f2ee66394bc79d6" translate="yes" xml:space="preserve">
          <source>When Token encounters an error or end-of-file condition after successfully reading a token, it returns the token. It may return the (non-nil) error from the same call or return the error (and a nil token) from a subsequent call. An instance of this general case is that a TokenReader returning a non-nil token at the end of the token stream may return either io.EOF or a nil error. The next Read should return nil, io.EOF.</source>
          <target state="translated">トークンの読み込みに成功した後にエラーやファイル終了条件に遭遇した場合、トークンを返します。トークンは、同じ呼び出しで発生した (non-nil)エラーを返したり、後続の呼び出しで発生したエラー (および nil トークン)を返したりすることがあります。この一般的なケースの例としては、トークンストリームの最後に非nilトークンを返すTokenReaderがio.EOFかnilエラーを返す場合があります。次のReadはnil、io.EOFを返すはずです。</target>
        </trans-unit>
        <trans-unit id="3250a941e5738a81aa69e5097500ef947e64f456" translate="yes" xml:space="preserve">
          <source>When a Go program writes to a broken pipe, the kernel will raise a SIGPIPE signal.</source>
          <target state="translated">Go プログラムが壊れたパイプに書き込むと、カーネルは SIGPIPE シグナルを発生させます。</target>
        </trans-unit>
        <trans-unit id="ed858d1cf0b08d8b30624984289eaf84deee9351" translate="yes" xml:space="preserve">
          <source>When a data value is not plain text, you can make sure it is not over-escaped by marking it with its type.</source>
          <target state="translated">データ値がプレーンテキストではない場合は、その型をマークすることでオーバーエスケープされていないことを確認することができます。</target>
        </trans-unit>
        <trans-unit id="dcc36ea4f1110a5d9628600e555148a98813c271" translate="yes" xml:space="preserve">
          <source>When a plugin is first opened, the init functions of all packages not already part of the program are called. The main function is not run. A plugin is only initialized once, and cannot be closed.</source>
          <target state="translated">プラグインが最初に開かれると、プログラムの一部ではないすべてのパッケージの init 関数が呼び出されます。メイン関数は実行されません。プラグインは一度だけ初期化され、閉じることはできません。</target>
        </trans-unit>
        <trans-unit id="34098c7334f20e516928585d3dd596a221004580" translate="yes" xml:space="preserve">
          <source>When adding a new file, a file base must be provided. That can be any integer value that is past the end of any interval of any file already in the file set. For convenience, FileSet.Base provides such a value, which is simply the end of the Pos interval of the most recently added file, plus one. Unless there is a need to extend an interval later, using the FileSet.Base should be used as argument for FileSet.AddFile.</source>
          <target state="translated">新しいファイルを追加する際には、ファイルベースを提供しなければなりません。これは、既にファイルセットに含まれているファイルの任意の間隔の終わりを過ぎた任意の整数値にすることができます。便宜上、FileSet.Baseは、最近追加したファイルのPos間隔の終わりに1を加えた値を提供します。後で間隔を延長する必要がない限り、FileSet.AddFileの引数としてFileSet.Baseを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="82668902c85167e64c6f0f47b4424c5d8da33aca" translate="yes" xml:space="preserve">
          <source>When calling SetCgoTraceback, the version argument is the version number of the structs that the functions expect to receive. Currently this must be zero.</source>
          <target state="translated">SetCgoTraceback を呼び出すとき、version 引数には、関数が受け取ることを期待する構造体のバージョン番号を指定します。現在のところ、これはゼロでなければなりません。</target>
        </trans-unit>
        <trans-unit id="bb4ae77735024f9be2c837577d3897cb72653910" translate="yes" xml:space="preserve">
          <source>When cgo is available, cgo-based (libc-backed) code is used by default. This can be overridden by using osusergo build tag, which enforces the pure Go implementation.</source>
          <target state="translated">cgo が利用可能な場合、デフォルトでは cgo ベースの (libc-backed の)コードが使用されます。これは、純粋な Go の実装を強制する osusergo ビルドタグを使用することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="752b47af0ec8b502ec7dd916b2f8679be6d9d28e" translate="yes" xml:space="preserve">
          <source>When err is nil, resp always contains a non-nil resp.Body. Caller should close resp.Body when done reading from it.</source>
          <target state="translated">errがnilの場合、 respは常に非nilの resp.Bodyを含んでいます。呼び出し元は resp.Body からの読み込みが終わったら resp.Body を閉じるべきです。</target>
        </trans-unit>
        <trans-unit id="01d9fbd4a2ba2cf83a0b45d054350614384bbdc9" translate="yes" xml:space="preserve">
          <source>When execution begins, $ is set to the data argument passed to Execute, that is, to the starting value of dot.</source>
          <target state="translated">実行開始時、$はExecuteに渡されたデータ引数、つまりdotの開始値に設定されます。</target>
        </trans-unit>
        <trans-unit id="8919d4f071112552ffa9917647b1e1053256e035" translate="yes" xml:space="preserve">
          <source>When following redirects, the Client will forward all headers set on the initial Request except:</source>
          <target state="translated">リダイレクトに続く場合、クライアントは最初のリクエストで設定したヘッダー以外のすべてのヘッダーを 転送します。</target>
        </trans-unit>
        <trans-unit id="9524b6877cae25b318411b88de97b53bfbb0506c" translate="yes" xml:space="preserve">
          <source>When matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses the one that a backtracking search would have found first. This so-called leftmost-first matching is the same semantics that Perl, Python, and other implementations use, although this package implements it without the expense of backtracking. For POSIX leftmost-longest matching, see CompilePOSIX.</source>
          <target state="translated">テキストに対してマッチングを行う場合、regexp は入力の中で可能な限り早く開始するマッチ (左端)を返し、その中からバックトラック検索で最初に見つかったであろうマッチを選択します。このいわゆる左端から先のマッチングは、PerlやPythonなどの実装で使われているのと同じセマンティクスですが、本パッケージではバックトラッキングの費用をかけずに実装しています。POSIX の leftmost-longest マッチングについては、CompilePOSIX を参照してください。</target>
        </trans-unit>
        <trans-unit id="c6e22a9991087594c0b8cf7617afd5eef2db8623" translate="yes" xml:space="preserve">
          <source>When parsing a template, another template may be defined and associated with the template being parsed. Template definitions must appear at the top level of the template, much like global variables in a Go program.</source>
          <target state="translated">テンプレートを解析する際に、別のテンプレートを定義して解析対象のテンプレートに関連付けることができます。テンプレートの定義は、Goプログラムのグローバル変数のように、テンプレートのトップレベルに表示されなければなりません。</target>
        </trans-unit>
        <trans-unit id="017afe59414197ba093e7c01bd629debe47b73b4" translate="yes" xml:space="preserve">
          <source>When parsing a time with a zone abbreviation like MST, if the zone abbreviation has a defined offset in the current location, then that offset is used. The zone abbreviation &quot;UTC&quot; is recognized as UTC regardless of location. If the zone abbreviation is unknown, Parse records the time as being in a fabricated location with the given zone abbreviation and a zero offset. This choice means that such a time can be parsed and reformatted with the same layout losslessly, but the exact instant used in the representation will differ by the actual zone offset. To avoid such problems, prefer time layouts that use a numeric zone offset, or use ParseInLocation.</source>
          <target state="translated">MSTのようなゾーンの略語で時刻を解析する場合、ゾーンの略語が現在地で定義されたオフセットを持っている場合、そのオフセットが使用される。ゾーンの略語 &quot;UTC &quot;は、場所に関係なくUTCとして認識されます。ゾーンの略語が不明な場合、Parseは、指定されたゾーンの略語とゼロオフセットを使用して作成された場所にある時刻を記録する。この選択は、そのような時刻を解析し、同じレイアウトでロスなく再フォーマットできることを意味しますが、表現に使用される正確な瞬間は実際のゾーンオフセットによって異なることになります。このような問題を避けるためには、数値のゾーンオフセットを使用する時刻レイアウトを好むか、ParseInLocationを使用してください。</target>
        </trans-unit>
        <trans-unit id="6cdce46cbdd242d854181ed07c3441caefe581b7" translate="yes" xml:space="preserve">
          <source>When parsing a time with a zone offset like -0700, if the offset corresponds to a time zone used by the current location (Local), then Parse uses that location and zone in the returned time. Otherwise it records the time as being in a fabricated location with time fixed at the given zone offset.</source>
          <target state="translated">0700のようなゾーンオフセットを持つ時刻を解析する場合、オフセットが現在の場所(Local)で使用されているタイムゾーンに対応している場合、Parseは返された時刻にその場所とゾーンを使用します。それ以外の場合は、指定されたゾーンオフセットで固定された時刻を持つ、捏造された場所にある時刻として記録されます。</target>
        </trans-unit>
        <trans-unit id="67cd941accf04bdb338f577638abdd5419252ad9" translate="yes" xml:space="preserve">
          <source>When parsing multiple files with the same name in different directories, the last one mentioned will be the one that results.</source>
          <target state="translated">異なるディレクトリにある同名の複数のファイルを解析する場合、最後に指定されたものが結果となります。</target>
        </trans-unit>
        <trans-unit id="ddcdf8b97f4b2868ce974b91b64fece54bf4c923" translate="yes" xml:space="preserve">
          <source>When parsing multiple files with the same name in different directories, the last one mentioned will be the one that results. For instance, ParseFiles(&quot;a/foo&quot;, &quot;b/foo&quot;) stores &quot;b/foo&quot; as the template named &quot;foo&quot;, while &quot;a/foo&quot; is unavailable.</source>
          <target state="translated">異なるディレクトリにある同じ名前の複数のファイルを解析する場合、最後に指定されたものが結果に反映されます。例えば、ParseFiles(&quot;a/foo&quot;,&quot;b/foo&quot;)は &quot;b/foo&quot; を &quot;foo&quot; という名前のテンプレートとして保存しますが、&quot;a/foo&quot; は利用できません。</target>
        </trans-unit>
        <trans-unit id="34e29899665d5e8ad85e485fb7f40717928c9cd2" translate="yes" xml:space="preserve">
          <source>When printing a struct, fmt cannot and therefore does not invoke formatting methods such as Error or String on unexported fields.</source>
          <target state="translated">構造体を印刷する際に、fmtはエラーや文字列などの書式設定メソッドを、エクスポートされていないフィールドに対して呼び出すことができません。</target>
        </trans-unit>
        <trans-unit id="328b930d804aecf09f06d9e00e3215a83c9fe31a" translate="yes" xml:space="preserve">
          <source>When running a large set of sequential test cases, checking Coverage after each one can be useful for identifying which test cases exercise new code paths. It is not a replacement for the reports generated by 'go test -cover' and 'go tool cover'.</source>
          <target state="translated">大規模な連続したテストケースのセットを実行している場合、それぞれのテストケースの後にカバレッジをチェックすることは、どのテストケースが新しいコードパスを実行しているかを特定するのに役立ちます。これは 'go test -cover' や 'go tool cover' で生成されるレポートの代替ではありません。</target>
        </trans-unit>
        <trans-unit id="909e63ef88f23df70a053ead84b3a43d68a17641" translate="yes" xml:space="preserve">
          <source>When template execution invokes a function with an argument list, that list must be assignable to the function's parameter types. Functions meant to apply to arguments of arbitrary type can use parameters of type interface{} or of type reflect.Value. Similarly, functions meant to return a result of arbitrary type can return interface{} or reflect.Value.</source>
          <target state="translated">テンプレートを実行して引数リストを持つ関数を呼び出す場合、そのリストは関数のパラメータ型に代入可能でなければなりません。任意の型の引数に適用する関数では、interface{}型または reflect.Value 型のパラメータを使用できます。同様に、任意の型の結果を返す関数は、interface{}または reflect.Value を返すことができます。</target>
        </trans-unit>
        <trans-unit id="05dd6446129205c413b187abb37a98c5e685666d" translate="yes" xml:space="preserve">
          <source>When unmarshaling quoted strings, invalid UTF-8 or invalid UTF-16 surrogate pairs are not treated as an error. Instead, they are replaced by the Unicode replacement character U+FFFD.</source>
          <target state="translated">引用符で囲まれた文字列をアンマーシャリングする際に、無効な UTF-8 または無効な UTF-16 サロゲートペアはエラーとしては扱われません。代わりに、それらは Unicode 置換文字 U+FFFD で置き換えられます。</target>
        </trans-unit>
        <trans-unit id="33fa3fdb7bbbbb81e834f8787f2ce9d1e3b0b605" translate="yes" xml:space="preserve">
          <source>When using TCP, and the host in the address parameter resolves to multiple network addresses, any dial timeout (from d.Timeout or ctx) is spread over each consecutive dial, such that each is given an appropriate fraction of the time to connect. For example, if a host has 4 IP addresses and the timeout is 1 minute, the connect to each single address will be given 15 seconds to complete before trying the next one.</source>
          <target state="translated">TCP を使用していて、address パラメータのホストが複数のネットワークアドレスに解決する場合、ダイヤルのタイムアウト (d.Timeout または ctx から)は、接続に必要な時間の適切な割合が与えられるように、各連続したダイヤルに分散されます。例えば、ホストが4つのIPアドレスを持ち、タイムアウトが1分である場合、各単一アドレスへの接続は、次のアドレスを試す前に15秒で完了するように与えられます。</target>
        </trans-unit>
        <trans-unit id="81ad3fb58a9738071410987f567b6f63ba760aad" translate="yes" xml:space="preserve">
          <source>When using the host C library resolver, at most one result will be returned. To bypass the host resolver, use a custom Resolver.</source>
          <target state="translated">ホストCライブラリのリゾルバを使用すると、最大で1つの結果が返されます。ホストリゾルバをバイパスするには、カスタムリゾルバを使用します。</target>
        </trans-unit>
        <trans-unit id="b6af75ad725ff03ac3899006f586c6815dee0ab6" translate="yes" xml:space="preserve">
          <source>Whether and how a comment is associated with a node depends on the interpretation of the syntax tree by the manipulating program: Except for Doc and Comment comments directly associated with nodes, the remaining comments are &quot;free-floating&quot; (see also issues #18593, #20744).</source>
          <target state="translated">コメントがノードにどのように関連付けられるかは、操作するプログラムが構文ツリーをどのように解釈するかに依存します。ノードに直接関連付けられたDocコメントとコメントを除いて、残りのコメントは「自由に浮遊する」ものです(#18593,#20744も参照してください)。</target>
        </trans-unit>
        <trans-unit id="1761aeba17f1966adf699cab82838ede9543b2ce" translate="yes" xml:space="preserve">
          <source>While it would be correct for the context function to record a complete a stack trace whenever it is called, and simply copy that out in the traceback function, in a typical program the context function will be called many times without ever recording a traceback for that context. Recording a complete stack trace in a call to the context function is likely to be inefficient.</source>
          <target state="translated">コンテキスト関数が呼び出されるたびに完全なスタックトレースを記録し、それを単にトレースバック関数にコピーするのが正しいのですが、典型的なプログラムでは、コンテキスト関数はそのコンテキストのトレースバックを記録することなく何度も呼び出されることになります。コンテキスト関数の呼び出し時に完全なスタックトレースを記録するのは非効率的です。</target>
        </trans-unit>
        <trans-unit id="97ac8575a01bb9731d0aacbb0c00a32106d3caac" translate="yes" xml:space="preserve">
          <source>While the FileSystem.Open method takes '/'-separated paths, a Dir's string value is a filename on the native file system, not a URL, so it is separated by filepath.Separator, which isn't necessarily '/'.</source>
          <target state="translated">FileSystem.Openメソッドは'/'で区切られたパスを取りますが、Dirの文字列の値はURLではなくネイティブファイルシステム上のファイル名なので、filepath.Separatorで区切られます。</target>
        </trans-unit>
        <trans-unit id="7d448d6e99b8642847a099da6f3145e12a69b2bf" translate="yes" xml:space="preserve">
          <source>White space is considered part of a field.</source>
          <target state="translated">ホワイトスペースはフィールドの一部と考えられています。</target>
        </trans-unit>
        <trans-unit id="3462ed046f134fdadd9007f0e6ba397654359adc" translate="yes" xml:space="preserve">
          <source>Width and precision are measured in units of Unicode code points, that is, runes. (This differs from C's printf where the units are always measured in bytes.) Either or both of the flags may be replaced with the character '*', causing their values to be obtained from the next operand (preceding the one to format), which must be of type int.</source>
          <target state="translated">幅と精度は、Unicodeのコードポイント、つまりルーンの単位で測定されます(これは、C言語のprintfとは異なり、常にバイト単位で測定されます)。(これは,C言語のprintfが常にバイト単位で測定するのとは異なります。)フラグのどちらかまたは両方を文字'*'に置き換えることができ,その値は次のオペランド(フォーマットするオペランドの前のオペランド)から取得されます。</target>
        </trans-unit>
        <trans-unit id="285e52d2a4d90abe10ddf2c19e952396f894982a" translate="yes" xml:space="preserve">
          <source>Width is interpreted in the input text but there is no syntax for scanning with a precision (no %5.2f, just %5f). If width is provided, it applies after leading spaces are trimmed and specifies the maximum number of runes to read to satisfy the verb. For example,</source>
          <target state="translated">幅は入力テキストで解釈されますが、精度でスキャンするための構文はありません(%5.2fはなく、%5fだけです)。widthが指定されている場合は、先頭のスペースがトリミングされた後に適用され、動詞を満たすために読み込むルーンの最大数を指定します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="798e2836ace5e24780c7dc5d76140278c0905170" translate="yes" xml:space="preserve">
          <source>Width is specified by an optional decimal number immediately preceding the verb. If absent, the width is whatever is necessary to represent the value. Precision is specified after the (optional) width by a period followed by a decimal number. If no period is present, a default precision is used. A period with no following number specifies a precision of zero. Examples:</source>
          <target state="translated">幅は、動詞の直前にオプションの10進数で指定します。省略した場合は、値を表現するのに必要な幅を指定します。精度は、(オプションの)width の後にピリオドと 10 進数で指定します。ピリオドがない場合は、デフォルトの精度が使用されます。ピリオドの後に10進数がない場合、精度は0を指定します。例を示します。</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="90527ca0c17e71be4b659b364a4632417bd48fd0" translate="yes" xml:space="preserve">
          <source>With HTTP Basic Authentication the provided username and password are not encrypted.</source>
          <target state="translated">HTTP基本認証では、提供されたユーザー名とパスワードは暗号化されません。</target>
        </trans-unit>
        <trans-unit id="9c7242429a52b5edef337779ea090fbcc2bb6019" translate="yes" xml:space="preserve">
          <source>With the exceptions of comments, which are skipped if SkipComments is set, unrecognized tokens are not ignored. Instead, the scanner simply returns the respective individual characters (or possibly sub-tokens). For instance, if the mode is ScanIdents (not ScanStrings), the string &quot;foo&quot; is scanned as the token sequence '&quot;' Ident '&quot;'.</source>
          <target state="translated">SkipComments が設定されている場合にスキップされるコメントを除いて、認識されていないトークンは無視されません。その代わりに、スキャナは単に個々の文字(あるいはサブトークンの可能性もある)を返します。例えば、モードが ScanIdents (ScanStrings ではありません)の場合、文字列 &quot;foo&quot; はトークンシーケンス '&quot;' としてスキャンされます。Indent'&quot;である。</target>
        </trans-unit>
        <trans-unit id="cfa2b7a12432ca7dde89800a43beb434b01e3ea5" translate="yes" xml:space="preserve">
          <source>WithCancel</source>
          <target state="translated">WithCancel</target>
        </trans-unit>
        <trans-unit id="10592d7ad2855a7180469ae213405203a2d50e89" translate="yes" xml:space="preserve">
          <source>WithCancel returns a copy of parent with a new Done channel. The returned context's Done channel is closed when the returned cancel function is called or when the parent context's Done channel is closed, whichever happens first.</source>
          <target state="translated">WithCancel は、新しい Done チャンネルを持つ親のコピーを返します。返されたコンテキストの Done チャンネルは、返された cancel 関数がコールされたとき、あるいは親コンテキストの Done チャンネルがクローズされたときのいずれか早いほうでクローズされます。</target>
        </trans-unit>
        <trans-unit id="2261f632aeaf0a3059b969971069ca975c9ce32e" translate="yes" xml:space="preserve">
          <source>WithClientTrace returns a new context based on the provided parent ctx. HTTP client requests made with the returned context will use the provided trace hooks, in addition to any previous hooks registered with ctx. Any hooks defined in the provided trace will be called first.</source>
          <target state="translated">WithClientTrace は、提供された親 ctx に基づいた新しいコンテキストを返します。返されたコンテキストを使用して行われる HTTP クライアントリクエストは、 ctx で登録された以前のフックに加えて、提供されたトレースフックを使用します。提供されたトレースで定義されたフックが最初に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f1cd36566b14c3bbf36e47b0c1cd6c5053972eb6" translate="yes" xml:space="preserve">
          <source>WithContext returns a shallow copy of r with its context changed to ctx. The provided ctx must be non-nil.</source>
          <target state="translated">WithContextは、コンテキストがctxに変更されたrの浅いコピーを返します。提供される ctx は非 null でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c81570667b5d5149acbef6b90b5b11ce74038f5e" translate="yes" xml:space="preserve">
          <source>WithDeadline</source>
          <target state="translated">WithDeadline</target>
        </trans-unit>
        <trans-unit id="4330da7d2b110737e8fe5953a232fb49e41e1165" translate="yes" xml:space="preserve">
          <source>WithDeadline returns a copy of the parent context with the deadline adjusted to be no later than d. If the parent's deadline is already earlier than d, WithDeadline(parent, d) is semantically equivalent to parent. The returned context's Done channel is closed when the deadline expires, when the returned cancel function is called, or when the parent context's Done channel is closed, whichever happens first.</source>
          <target state="translated">親コンテキストのデッドラインがすでに d よりも早くなっている場合は、WithDeadline(parent,d)は意味的に parent と同等です。返されたコンテキストの Done チャンネルは、デッドラインの期限が切れたとき、 返された cancel 関数が呼び出されたとき、または親コンテキストの Done チャンネルが閉じられたときのいずれか早いほうで閉じられます。</target>
        </trans-unit>
        <trans-unit id="7a280665a50cba23581e10e39947347ff060fae9" translate="yes" xml:space="preserve">
          <source>WithLabels returns a new context.Context with the given labels added. A label overwrites a prior label with the same key.</source>
          <target state="translated">WithLabels は、与えられたラベルを追加した新しい context.Context を返します。ラベルは、同じキーを持つ前のラベルを上書きします。</target>
        </trans-unit>
        <trans-unit id="236c68ad351c473bc67a76a1e7d06f3261fc4a99" translate="yes" xml:space="preserve">
          <source>WithNode represents a {{with}} action and its commands.</source>
          <target state="translated">WithNodeは{{with}}アクションとそのコマンドを表します。</target>
        </trans-unit>
        <trans-unit id="85e6eeaf95e5aa7f5b566d2c8422da42f9a49e6b" translate="yes" xml:space="preserve">
          <source>WithPadding creates a new encoding identical to enc except with a specified padding character, or NoPadding to disable padding. The padding character must not be '\r' or '\n', must not be contained in the encoding's alphabet and must be a rune equal or below '\xff'.</source>
          <target state="translated">WithPadding は、指定されたパディング文字を除いて enc と同じ新しいエンコーディングを作成します。パディング文字は '\r' や '\n' であってはならず、 エンコーディングのアルファベットに含まれていてはならず、また、 '\xff' 以下のルーンでなければなりません。</target>
        </trans-unit>
        <trans-unit id="5778ff939e404ecb571d1f18f70396417807a915" translate="yes" xml:space="preserve">
          <source>WithRegion starts a region associated with its calling goroutine, runs fn, and then ends the region. If the context carries a task, the region is associated with the task. Otherwise, the region is attached to the background task.</source>
          <target state="translated">WithRegion は、その呼び出し元の goroutine に関連付けられた領域を開始し、fn を実行してから領域を終了します。コンテキストにタスクが含まれている場合、リージョンはそのタスクに関連付けられます。そうでない場合は、リージョンはバックグラウンドタスクに関連付けられます。</target>
        </trans-unit>
        <trans-unit id="62be5942fce8ef05c30b8e260f8696b13a223891" translate="yes" xml:space="preserve">
          <source>WithTimeout</source>
          <target state="translated">WithTimeout</target>
        </trans-unit>
        <trans-unit id="a33c8495b67fd90d2c81864d1a61ba4ce0d40352" translate="yes" xml:space="preserve">
          <source>WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).</source>
          <target state="translated">WithTimeoutはWithDeadline(parent,time.Now().Add(timeout))を返します。</target>
        </trans-unit>
        <trans-unit id="279940ad9c32263d7660d6c51743f4751457b645" translate="yes" xml:space="preserve">
          <source>WithValue</source>
          <target state="translated">WithValue</target>
        </trans-unit>
        <trans-unit id="2898c9db2caddba545b8a166da25b81ca353383a" translate="yes" xml:space="preserve">
          <source>WithValue returns a copy of parent in which the value associated with key is val.</source>
          <target state="translated">WithValue は、キーに関連付けられた値が val である親のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="dfe12e37662d514bcaf6fcc843d9df3dde82c783" translate="yes" xml:space="preserve">
          <source>Within a quoted-field a quote character followed by a second quote character is considered a single quote.</source>
          <target state="translated">引用符で囲まれたフィールド内では、引用符文字の後に2番目の引用符文字が続くと、1つの引用符とみなされます。</target>
        </trans-unit>
        <trans-unit id="901066df97460a79742d81059c2788736730f5c0" translate="yes" xml:space="preserve">
          <source>Within the format string, an underscore _ represents a space that may be replaced by a digit if the following number (a day) has two digits; for compatibility with fixed-width Unix time formats.</source>
          <target state="translated">フォーマット文字列の中で、アンダースコア_はスペースを表し、次の数字 (a day)が 2 桁の場合は数字に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="1c2c5d43029917c507b88694188d3a95ec1f427e" translate="yes" xml:space="preserve">
          <source>Within these functions, use the Error, Fail or related methods to signal failure.</source>
          <target state="translated">これらの機能の中で、エラー、フェイル、または関連するメソッドを使用して、失敗を知らせることができます。</target>
        </trans-unit>
        <trans-unit id="4fb5cfd12779f801d815c760deefde65ff5bc667" translate="yes" xml:space="preserve">
          <source>Without the KeepAlive call, the finalizer could run at the start of syscall.Read, closing the file descriptor before syscall.Read makes the actual system call.</source>
          <target state="translated">KeepAliveコールがなければ、ファイナライザはsyscall.Readの開始時に実行され、syscall.Readが実際のシステムコールを行う前にファイルディスクリプタを閉じます。</target>
        </trans-unit>
        <trans-unit id="428a7b20bf173784e9461082a1c6c2949a2b1583" translate="yes" xml:space="preserve">
          <source>WordDecoder.Decode</source>
          <target state="translated">WordDecoder.Decode</target>
        </trans-unit>
        <trans-unit id="122969737c394ec9bcddf4fffdb9da8fe8488ec1" translate="yes" xml:space="preserve">
          <source>WordDecoder.DecodeHeader</source>
          <target state="translated">WordDecoder.DecodeHeader</target>
        </trans-unit>
        <trans-unit id="ca26286ada26b2f279a44ca503bd79bc511af845" translate="yes" xml:space="preserve">
          <source>WordEncoder.Encode</source>
          <target state="translated">WordEncoder.Encode</target>
        </trans-unit>
        <trans-unit id="9edf039575eecbdc47593f3a3127b9885c19c419" translate="yes" xml:space="preserve">
          <source>Wrapper is implemented by types that are backed by a JavaScript value.</source>
          <target state="translated">Wrapperは、JavaScriptの値に裏打ちされた型によって実装されています。</target>
        </trans-unit>
        <trans-unit id="4a48932789d199bbed709777e2d743ca2bafdc6c" translate="yes" xml:space="preserve">
          <source>Write</source>
          <target state="translated">Write</target>
        </trans-unit>
        <trans-unit id="44c42e5743dc2d87774645171aeb25d381fb4f87" translate="yes" xml:space="preserve">
          <source>Write (Multi)</source>
          <target state="translated">書き込み(マルチ)</target>
        </trans-unit>
        <trans-unit id="5eb828845650151ac0990caac081e2cd286fb917" translate="yes" xml:space="preserve">
          <source>Write appends the contents of p to b's buffer. Write always returns len(p), nil.</source>
          <target state="translated">Write は p の内容を b のバッファに追加します。Write は常に len(p)、nil を返します。</target>
        </trans-unit>
        <trans-unit id="b973088870c119f57839cb1ba17bfc298f02ce66" translate="yes" xml:space="preserve">
          <source>Write appends the contents of p to the buffer, growing the buffer as needed. The return value n is the length of p; err is always nil. If the buffer becomes too large, Write will panic with ErrTooLarge.</source>
          <target state="translated">Write は p の内容をバッファに追加し、必要に応じてバッファを拡張します。戻り値 n は p の長さで、 err は常に nil です。バッファが大きくなりすぎると、Write は ErrTooLarge でパニックになります。</target>
        </trans-unit>
        <trans-unit id="60ad0a48218711b95918ac117d9d0d440fb89fc0" translate="yes" xml:space="preserve">
          <source>Write calls encode to serialize the file set s.</source>
          <target state="translated">ファイルセットsをシリアライズするためにエンコードを呼び出します。</target>
        </trans-unit>
        <trans-unit id="4d381bda5cffa89f8c78e5e9e48f6d22b0c0fe8a" translate="yes" xml:space="preserve">
          <source>Write encodes p using quoted-printable encoding and writes it to the underlying io.Writer. It limits line length to 76 characters. The encoded bytes are not necessarily flushed until the Writer is closed.</source>
          <target state="translated">Write は、引用符で印刷可能なエンコーディングを使用して p をエンコードし、それを基にした io.Writer に書き込みます。行の長さは76文字に制限されています。エンコードされたバイトは、Writerが閉じられるまで必ずしもフラッシュされるわけではありません。</target>
        </trans-unit>
        <trans-unit id="abed405f7389701bb0c85514b2f8df63eaba5491" translate="yes" xml:space="preserve">
          <source>Write implements http.ResponseWriter. The data in buf is written to rw.Body, if not nil.</source>
          <target state="translated">Write は http.ResponseWriter を実装しています。nilでなければ、bufのデータをrw.Bodyに書き込みます。</target>
        </trans-unit>
        <trans-unit id="0dd6308ff3bf6bfd3bf539e49da279261acb0c3a" translate="yes" xml:space="preserve">
          <source>Write implements the Conn Write method.</source>
          <target state="translated">Write は Conn Write メソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="40ae3050f43a58bc383d76e5c6844f88fe681399" translate="yes" xml:space="preserve">
          <source>Write implements the standard Write interface: it writes data to the pipe, blocking until one or more readers have consumed all the data or the read end is closed. If the read end is closed with an error, that err is returned as err; otherwise err is ErrClosedPipe.</source>
          <target state="translated">Write は、標準的な Write インターフェースを実装しています。読み取り側がエラーで閉じられた場合は、その err が err として返されます。</target>
        </trans-unit>
        <trans-unit id="9b4e831d3734f201df9676e633bc0a291038b26a" translate="yes" xml:space="preserve">
          <source>Write sends a log message to the syslog daemon.</source>
          <target state="translated">Write は syslog デーモンにログメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="fcbd0cbe7dbf34b528b9d5e4c3ddbc95f5c5bc1c" translate="yes" xml:space="preserve">
          <source>Write writes a compressed form of p to the underlying io.Writer. The compressed bytes are not necessarily flushed until the Writer is closed or explicitly flushed.</source>
          <target state="translated">Write は、圧縮された形式の p を基底の io.Writer に書き込みます。圧縮されたバイトは、Writerがクローズされるか明示的にフラッシュされるまで、必ずしもフラッシュされるわけではありません。</target>
        </trans-unit>
        <trans-unit id="df6d5ec5f9e15cdd83d68aca607ef7b43da4dca2" translate="yes" xml:space="preserve">
          <source>Write writes a compressed form of p to the underlying io.Writer. The compressed bytes are not necessarily flushed until the Writer is closed.</source>
          <target state="translated">Write は、圧縮された形式の p を基底の io.Writer に書き込みます。圧縮されたバイトは、Writerが閉じられるまで必ずしもフラッシュされるわけではありません。</target>
        </trans-unit>
        <trans-unit id="f5afb6da9a73d93fa35e1f17efdeec955deb05f0" translate="yes" xml:space="preserve">
          <source>Write writes a header in wire format.</source>
          <target state="translated">Writeはヘッダーをワイヤー形式で書き込みます。</target>
        </trans-unit>
        <trans-unit id="1dd8b6e982bed7434f946dd63ac00a5595f87b17" translate="yes" xml:space="preserve">
          <source>Write writes a request. An ErrPersistEOF error is returned if the connection has been closed in an HTTP keep-alive sense. If req.Close equals true, the keep-alive connection is logically closed after this request and the opposing server is informed. An ErrUnexpectedEOF indicates the remote closed the underlying TCP connection, which is usually considered as graceful close.</source>
          <target state="translated">Write はリクエストを書き込みます。HTTP キープアライブの意味で接続が閉じられている場合、ErrPersistEOF エラーが返されます。req.Close が true の場合、キープアライブ接続はこのリクエストの後に論理的に閉じられ、相手サーバに通知されます。ErrUnexpectedEOF は、リモートが基礎となる TCP 接続を閉じたことを示します。</target>
        </trans-unit>
        <trans-unit id="c84078d3fc4fa89a2b25f7737991bb090acc5be4" translate="yes" xml:space="preserve">
          <source>Write writes a single CSV record to w along with any necessary quoting. A record is a slice of strings with each string being one field. Writes are buffered, so Flush must eventually be called to ensure that the record is written to the underlying io.Writer.</source>
          <target state="translated">Writeは、必要な引用符を付けて単一のCSVレコードをwに書き込みます。レコードは文字列のスライスで、各文字列は1つのフィールドです。書き込みはバッファリングされるので、最終的にはFlushを呼び出して、レコードを確実に基礎となるio.Writerに書き込むようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="1b1f8c7998d40b420b2a6a020d42520c0cfdb552" translate="yes" xml:space="preserve">
          <source>Write writes an HTTP/1.1 request, which is the header and body, in wire format. This method consults the following fields of the request:</source>
          <target state="translated">Write は、ヘッダとボディである HTTP/1.1 リクエストをワイヤ形式で書き込みます。このメソッドは、リクエストの以下のフィールドを参照します。</target>
        </trans-unit>
        <trans-unit id="0668c9219aeba7077b51b78a1b8f39636f232281" translate="yes" xml:space="preserve">
          <source>Write writes buf to the writer b. The only errors returned are ones encountered while writing to the underlying output stream.</source>
          <target state="translated">buf をライタ b に書き込みます。返されるエラーは、基礎となる出力ストリームへの書き込み中に発生したエラーのみです。</target>
        </trans-unit>
        <trans-unit id="82a04e0fc25183cb5f9b91509c74fe012f744729" translate="yes" xml:space="preserve">
          <source>Write writes data to the connection.</source>
          <target state="translated">書き込みは、接続にデータを書き込みます。</target>
        </trans-unit>
        <trans-unit id="ec334dcff7799f1d647716dee3ecbc314693f181" translate="yes" xml:space="preserve">
          <source>Write writes data to w, which will eventually write the compressed form of data to its underlying writer.</source>
          <target state="translated">Write は w にデータを書き込み、最終的には圧縮された形式のデータをその下にあるライタに書き込むことになります。</target>
        </trans-unit>
        <trans-unit id="b3b5ffbd7094344c5c64fdfaaee4e1ac8b0d0d73" translate="yes" xml:space="preserve">
          <source>Write writes len(b) bytes to the File. It returns the number of bytes written and an error, if any. Write returns a non-nil error when n != len(b).</source>
          <target state="translated">Write は、ファイルに len(b)バイトを書き込みます。書き込まれたバイト数とエラーがある場合はエラーを返します。Write は、n !=len(b)の場合は、n 以外のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="bc6f468fb42c60c9aa3d3403f67792ca68e56337" translate="yes" xml:space="preserve">
          <source>Write writes len(p) bytes from p to the underlying data stream. It returns the number of bytes written from p (0 &amp;lt;= n &amp;lt;= len(p)) and any error encountered that caused the write to stop early. Write must return a non-nil error if it returns n &amp;lt; len(p). Write must not modify the slice data, even temporarily.</source>
          <target state="translated">Writeは、len（p）バイトをpから基礎となるデータストリームに書き込みます。これは、pから書き込まれたバイト数（0 &amp;lt;= n &amp;lt;= len（p））と、書き込みを早期に停止させる原因となったエラーを返します。n &amp;lt;len（p）を返す場合、書き込みは非nilエラーを返す必要があります。一時的にであっても、書き込みはスライスデータを変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="8d63636955bd89c2cf8a7af170c604cdce197b80" translate="yes" xml:space="preserve">
          <source>Write writes r to w in the HTTP/1.x server response format, including the status line, headers, body, and optional trailer.</source>
          <target state="translated">HTTP/1.xサーバのレスポンスフォーマットで、ステータスライン、ヘッダ、ボディ、オプションのトレイラーを含む、wへの書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="540dcdd5a6a217068d019b75b00fcd61e7a04d31" translate="yes" xml:space="preserve">
          <source>Write writes resp in response to req. To close the connection gracefully, set the Response.Close field to true. Write should be considered operational until it returns an error, regardless of any errors returned on the Read side.</source>
          <target state="translated">req に応答して resp を書き込みます。優雅に接続を閉じるには、Response.Closeフィールドをtrueに設定します。Writeは、Read側で返されたエラーに関係なく、エラーを返すまでは動作しているとみなされるべきです。</target>
        </trans-unit>
        <trans-unit id="67e15dd48b8a4dfa3a0d9587fc9c9c38dda0a150" translate="yes" xml:space="preserve">
          <source>Write writes the binary representation of data into w. Data must be a fixed-size value or a slice of fixed-size values, or a pointer to such data. Boolean values encode as one byte: 1 for true, and 0 for false. Bytes written to w are encoded using the specified byte order and read from successive fields of the data. When writing structs, zero values are written for fields with blank (_) field names.</source>
          <target state="translated">データは、固定サイズの値、または固定サイズの値のスライス、またはそのようなデータへのポインタでなければなりません。ブール値は1バイトとしてエンコードされます:1は真、0は偽です。wに書き込まれたバイトは、指定されたバイト順でエンコードされ、データの連続するフィールドから読み出されます。構造体を書き込む場合、空白(_)のフィールド名を持つフィールドにはゼロ値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="1aedca15daa2824cc7a6db34a6e59e022ccdde6b" translate="yes" xml:space="preserve">
          <source>Write writes the contents of p into the buffer. It returns the number of bytes written. If nn &amp;lt; len(p), it also returns an error explaining why the write is short.</source>
          <target state="translated">Writeは、pの内容をバッファに書き込みます。書き込まれたバイト数を返します。nn &amp;lt;len（p）の場合、書き込みが短い理由を説明するエラーも返します。</target>
        </trans-unit>
        <trans-unit id="979c6b0be612eaeecc0a5795d58b592f39b6a7cc" translate="yes" xml:space="preserve">
          <source>Write writes the index x to w.</source>
          <target state="translated">Write はインデックス x を w に書き込みます。</target>
        </trans-unit>
        <trans-unit id="4bb1c277541d19952bb3d44e887bd82c7760bdb9" translate="yes" xml:space="preserve">
          <source>Write writes to the current file in the tar archive. Write returns the error ErrWriteTooLong if more than Header.Size bytes are written after WriteHeader.</source>
          <target state="translated">Write は tar アーカイブ内の現在のファイルに書き込みを行います。WriteHeader の後に Header.Size バイト以上が書き込まれた場合、ErrWriteTooLong というエラーを返します。</target>
        </trans-unit>
        <trans-unit id="0224fd253898a9aef4ac0177d7201684f5813e08" translate="yes" xml:space="preserve">
          <source>WriteAll writes multiple CSV records to w using Write and then calls Flush, returning any error from the Flush.</source>
          <target state="translated">WriteAllはWriteを使って複数のCSVレコードをwに書き込んだ後、Flushを呼び出し、Flushからエラーがあればそれを返します。</target>
        </trans-unit>
        <trans-unit id="577d19fec1f13e0c1b297c086a7a9e7aaffc9552" translate="yes" xml:space="preserve">
          <source>WriteAt writes len(b) bytes to the File starting at byte offset off. It returns the number of bytes written and an error, if any. WriteAt returns a non-nil error when n != len(b).</source>
          <target state="translated">WriteAt は、バイトオフセットオフから始まる len(b)バイトをファイルに書き込みます。WriteAt は、書き込まれたバイト数と、エラーがある場合はエラーを返す。WriteAt は、n !=len(b)の場合、非ゼロエラーを返す。</target>
        </trans-unit>
        <trans-unit id="913c43952e7ba95faf4dd01c5c3386903926e88f" translate="yes" xml:space="preserve">
          <source>WriteAt writes len(p) bytes from p to the underlying data stream at offset off. It returns the number of bytes written from p (0 &amp;lt;= n &amp;lt;= len(p)) and any error encountered that caused the write to stop early. WriteAt must return a non-nil error if it returns n &amp;lt; len(p).</source>
          <target state="translated">WriteAtはlen（p）バイトをpからオフセットオフの基になるデータストリームに書き込みます。これは、pから書き込まれたバイト数（0 &amp;lt;= n &amp;lt;= len（p））と、書き込みを早期に停止させる原因となったエラーを返します。WriteAtは、n &amp;lt;len（p）を返す場合、nil以外のエラーを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="299aad410b1c59608b367a7d4cb870a456df8096" translate="yes" xml:space="preserve">
          <source>WriteByte appends the byte c to b's buffer. The returned error is always nil.</source>
          <target state="translated">WriteByte は、バイト c を b のバッファに追加します。返されるエラーは常にnilです。</target>
        </trans-unit>
        <trans-unit id="f1124aa2cccac4bc8c094488b7bc39b62c0cdd5a" translate="yes" xml:space="preserve">
          <source>WriteByte appends the byte c to the buffer, growing the buffer as needed. The returned error is always nil, but is included to match bufio.Writer's WriteByte. If the buffer becomes too large, WriteByte will panic with ErrTooLarge.</source>
          <target state="translated">WriteByteは、必要に応じてバッファを成長させながら、バッファにバイトcを追加します。返されるエラーは常にnilですが、bufio.WriterのWriteByteと一致するように含まれています。バッファが大きくなりすぎると、WriteByteはErrTooLargeでパニックになります。</target>
        </trans-unit>
        <trans-unit id="709e9a78ca951be47b51eaa8c43161a4a68b13de" translate="yes" xml:space="preserve">
          <source>WriteByte writes a single byte.</source>
          <target state="translated">WriteByteは1バイトの書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="b0fa0c9c90b10c53cd3030a178df8c5bc4b748e3" translate="yes" xml:space="preserve">
          <source>WriteCloser is the interface that groups the basic Write and Close methods.</source>
          <target state="translated">WriteCloserは、基本的なWriteメソッドとCloseメソッドをグループ化したインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="a5b4dc8d0bfd74b6d0a363e79ed44899e4d10a7a" translate="yes" xml:space="preserve">
          <source>WriteExpr writes the (possibly shortened) string representation for x to buf. Shortened representations are suitable for user interfaces but may not necessarily follow Go syntax.</source>
          <target state="translated">WriteExpr は、(短縮された可能性のある)x の文字列表現を buf に書き込みます。短縮された表現はユーザインタフェースに適していますが、必ずしも Go 構文に従っているとは限りません。</target>
        </trans-unit>
        <trans-unit id="a2fc53b6ae37f84446440bfa3e46d55b1daae44f" translate="yes" xml:space="preserve">
          <source>WriteField calls CreateFormField and then writes the given value.</source>
          <target state="translated">WriteFieldはCreateFormFieldを呼び出し、与えられた値を書き込みます。</target>
        </trans-unit>
        <trans-unit id="94dee2fafe1d10d5ce6db659eb0c0fcb3d5842be" translate="yes" xml:space="preserve">
          <source>WriteFile</source>
          <target state="translated">WriteFile</target>
        </trans-unit>
        <trans-unit id="f1a08dac7451fee22a938f078c0cf3128fd334ab" translate="yes" xml:space="preserve">
          <source>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm (before umask); otherwise WriteFile truncates it before writing, without changing permissions.</source>
          <target state="translated">WriteFileはファイル名で指定されたファイルにデータを書き込みます。ファイルが存在しない場合、WriteFile はパーミッション perm (umask の前)でファイルを作成し、そうでない場合は WriteFile はパーミッションを変更せずに書き込む前にファイルを切り詰めます。</target>
        </trans-unit>
        <trans-unit id="ef73f34a1517d5e481c55ca7ffbc2a25494b2019" translate="yes" xml:space="preserve">
          <source>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</source>
          <target state="translated">WriteFileは、filenameという名前のファイルにデータを書き込みます。ファイルが存在しない場合、WriteFileはパーミッションパーマでファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="966a2c28275a12b7d85d4ef9e4fb4bdd7daf03b9" translate="yes" xml:space="preserve">
          <source>WriteHeader implements http.ResponseWriter.</source>
          <target state="translated">WriteHeader は http.ResponseWriter を実装しています。</target>
        </trans-unit>
        <trans-unit id="5278a175f457ff599653e584e10d0da21d75e04a" translate="yes" xml:space="preserve">
          <source>WriteHeader writes hdr and prepares to accept the file's contents. The Header.Size determines how many bytes can be written for the next file. If the current file is not fully written, then this returns an error. This implicitly flushes any padding necessary before writing the header.</source>
          <target state="translated">WriteHeaderはhdrを書き込み、ファイルの内容を受け入れる準備をします。Header.Sizeは、次のファイルのために何バイトまで書き込めるかを決定します。現在のファイルが完全に書き込まれていない場合は、エラーを返します。これは、ヘッダを書き込む前に必要なパディングを暗黙のうちにフラッシュします。</target>
        </trans-unit>
        <trans-unit id="3ca8ba0518cad3338405c38e79e75e9c13b24b43" translate="yes" xml:space="preserve">
          <source>WriteHeapDump suspends the execution of all goroutines until the heap dump is completely written. Thus, the file descriptor must not be connected to a pipe or socket whose other end is in the same Go process; instead, use a temporary file or network socket.</source>
          <target state="translated">WriteHeapDump は、ヒープダンプが完全に書き込まれるまで、すべての goroutine の実行を中断します。そのため、ファイルディスクリプタは、他の端が同じGoプロセス内にあるパイプやソケットに接続してはいけません。</target>
        </trans-unit>
        <trans-unit id="6a06afdd85eafc1200fe0ffc3dbde0309767d7ac" translate="yes" xml:space="preserve">
          <source>WriteHeapDump writes a description of the heap and the objects in it to the given file descriptor.</source>
          <target state="translated">WriteHeapDumpは、ヒープとその中のオブジェクトの記述を指定されたファイルディスクリプタに書き込みます。</target>
        </trans-unit>
        <trans-unit id="e3abbd24fb479c9ecfc16a57b4a2dfe1f2c03f20" translate="yes" xml:space="preserve">
          <source>WriteHeapProfile is shorthand for Lookup(&quot;heap&quot;).WriteTo(w, 0). It is preserved for backwards compatibility.</source>
          <target state="translated">WriteHeapProfileはLookup(&quot;heap&quot;).WriteTo(w,0)の略語です。これは下位互換性のために保存されています。</target>
        </trans-unit>
        <trans-unit id="60029a6d43efd94d3594516e2528881eb15af008" translate="yes" xml:space="preserve">
          <source>WriteMsgIP writes a message to addr via c, copying the payload from b and the associated out-of-band data from oob. It returns the number of payload and out-of-band bytes written.</source>
          <target state="translated">WriteMsgIP は、b からのペイロードと oob からの帯域外データをコピーして、c 経由で addr にメッセージを書き込みます。これは、書き込まれたペイロードと帯域外データのバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="97f4683eac3d5fc32a65061e292f2190af0bf38c" translate="yes" xml:space="preserve">
          <source>WriteMsgUDP writes a message to addr via c if c isn't connected, or to c's remote address if c is connected (in which case addr must be nil). The payload is copied from b and the associated out-of-band data is copied from oob. It returns the number of payload and out-of-band bytes written.</source>
          <target state="translated">WriteMsgUDPは、cが接続されていない場合はc経由でaddrに、接続されている場合はcのリモートアドレスにメッセージを書き込みます(この場合、addrはnilでなければなりません)。ペイロードは b からコピーされ、関連する帯域外データは oob からコピーされる。書き込まれたペイロードと帯域外データのバイト数を返す。</target>
        </trans-unit>
        <trans-unit id="8193c21ac5c2ea950e2bde14d77250380df04e5a" translate="yes" xml:space="preserve">
          <source>WriteMsgUnix writes a message to addr via c, copying the payload from b and the associated out-of-band data from oob. It returns the number of payload and out-of-band bytes written.</source>
          <target state="translated">WriteMsgUnix は、b からのペイロードと oob からの帯域外データをコピーして、c 経由で addr にメッセージを書き込みます。これは、書き込まれたペイロードと帯域外データのバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="05a4cbe90da51b5a60d7ce652f38c76395d34c38" translate="yes" xml:space="preserve">
          <source>WriteProxy is like Write but writes the request in the form expected by an HTTP proxy. In particular, WriteProxy writes the initial Request-URI line of the request with an absolute URI, per section 5.3 of RFC 7230, including the scheme and host. In either case, WriteProxy also writes a Host header, using either r.Host or r.URL.Host.</source>
          <target state="translated">WriteProxyはWriteと似ているが、HTTPプロキシが期待する形式で リクエストを書き込む。特に、WriteProxyはリクエストの最初のRequest-URI行を、RFC 7230のセクション5.3に従って、スキームとホストを含む絶対URIで書きます。いずれの場合も、WriteProxyは、r.Hostまたはr.URL.Hostを使用してHostヘッダも書く。</target>
        </trans-unit>
        <trans-unit id="c69fd535ec2a61d9f0cd55c49694d03e060751bc" translate="yes" xml:space="preserve">
          <source>WriteRune appends the UTF-8 encoding of Unicode code point r to b's buffer. It returns the length of r and a nil error.</source>
          <target state="translated">WriteRuneは、UnicodeコードポイントrのUTF-8エンコーディングをbのバッファに追加します。r の長さと nil エラーを返します。</target>
        </trans-unit>
        <trans-unit id="50419d360e1454c08d1e726980bb9af5c883fdf2" translate="yes" xml:space="preserve">
          <source>WriteRune appends the UTF-8 encoding of Unicode code point r to the buffer, returning its length and an error, which is always nil but is included to match bufio.Writer's WriteRune. The buffer is grown as needed; if it becomes too large, WriteRune will panic with ErrTooLarge.</source>
          <target state="translated">WriteRuneは、UnicodeコードポイントrのUTF-8エンコーディングをバッファに追加し、その長さとエラーを返します。バッファは必要に応じて拡張され、大きすぎるとWriteRuneはErrTooLargeでパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="8539205ffda07e4fc93063bbff49ea5a24bdfb57" translate="yes" xml:space="preserve">
          <source>WriteRune writes a single Unicode code point, returning the number of bytes written and any error.</source>
          <target state="translated">WriteRune は、単一の Unicode コードポイントを書き込み、書き込まれたバイト数とエラーを返します。</target>
        </trans-unit>
        <trans-unit id="c4cdb9aa52cc1444def4915c41a6238a5b9dce01" translate="yes" xml:space="preserve">
          <source>WriteSeeker is the interface that groups the basic Write and Seek methods.</source>
          <target state="translated">WriteSeekerは、基本的なWriteメソッドとSeekメソッドをグループ化したインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="4c4e530f7fc3720d0a0b9dd1699773a51975bcd0" translate="yes" xml:space="preserve">
          <source>WriteSignature writes the representation of the signature sig to buf, without a leading &quot;func&quot; keyword. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">WriteSignatureは、署名sigの表現を、先頭の &quot;func &quot;キーワードなしでbufに書き込みます。Qualifierは、パッケージレベルのオブジェクトの印刷を制御します。</target>
        </trans-unit>
        <trans-unit id="2fafa28d75b28a484b0d11704a5f73dc2a397a9b" translate="yes" xml:space="preserve">
          <source>WriteString</source>
          <target state="translated">WriteString</target>
        </trans-unit>
        <trans-unit id="dcea71a3d2530b8c16e73859a42e5c1339cc7b3a" translate="yes" xml:space="preserve">
          <source>WriteString appends the contents of s to b's buffer. It returns the length of s and a nil error.</source>
          <target state="translated">WriteString は s の内容を b のバッファに追加します。s の長さと nil エラーを返します。</target>
        </trans-unit>
        <trans-unit id="f0863225004b8002965c5f1f30cabf45ec0ce003" translate="yes" xml:space="preserve">
          <source>WriteString appends the contents of s to the buffer, growing the buffer as needed. The return value n is the length of s; err is always nil. If the buffer becomes too large, WriteString will panic with ErrTooLarge.</source>
          <target state="translated">WriteString は、必要に応じてバッファを拡張しながら s の内容をバッファに追加します。戻り値 n は s の長さで、 err は常に nil です。バッファが大きくなりすぎると、WriteString は ErrTooLarge でパニックになります。</target>
        </trans-unit>
        <trans-unit id="5906492d4ad1f77da2e42a5903d5b14910e74bdc" translate="yes" xml:space="preserve">
          <source>WriteString implements io.StringWriter. The data in str is written to rw.Body, if not nil.</source>
          <target state="translated">WriteStringは、io.StringWriterを実装しています。strのデータは、nilでない場合はrw.Bodyに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="2881565b760b26a4f8a2f57e00f09267df1fc3c7" translate="yes" xml:space="preserve">
          <source>WriteString is like Write, but writes the contents of string s rather than a slice of bytes.</source>
          <target state="translated">WriteStringはWriteと似ていますが、バイトのスライスではなく文字列sの内容を書きます。</target>
        </trans-unit>
        <trans-unit id="5e86374df4dcf5990aedc6d23a06ec17779ecb41" translate="yes" xml:space="preserve">
          <source>WriteString writes a string. It returns the number of bytes written. If the count is less than len(s), it also returns an error explaining why the write is short.</source>
          <target state="translated">WriteString は文字列を書き込みます。書き込まれたバイト数を返します。カウントが len(s)より小さい場合は、書き込みが短い理由を説明するエラーも返します。</target>
        </trans-unit>
        <trans-unit id="b06770a08018ebad1f55b3701993d6f12040309c" translate="yes" xml:space="preserve">
          <source>WriteString writes s to w with all replacements performed.</source>
          <target state="translated">WriteString は、すべての置換が行われた状態で s を w に書き込みます。</target>
        </trans-unit>
        <trans-unit id="269915f1206072ee8dbb37610e3b9dfdc6260f9a" translate="yes" xml:space="preserve">
          <source>WriteString writes the contents of the string s to w, which accepts a slice of bytes. If w implements StringWriter, its WriteString method is invoked directly. Otherwise, w.Write is called exactly once.</source>
          <target state="translated">WriteString は文字列 s の内容を w に書き込みます。w が StringWriter を実装している場合は、その WriteString メソッドが直接呼び出されます。そうでない場合は、w.Write が一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="14e283952e32e7284849c90772991995a0d08383" translate="yes" xml:space="preserve">
          <source>WriteSubset writes a header in wire format. If exclude is not nil, keys where exclude[key] == true are not written.</source>
          <target state="translated">WriteSubsetは、ヘッダをワイヤ形式で書き込みます。excludeがnilでない場合、 exclude[key]==trueのキーは書き込まれません。</target>
        </trans-unit>
        <trans-unit id="d674cf2f9ed846b78f239ed6b5be115ab29ab2d6" translate="yes" xml:space="preserve">
          <source>WriteSubset writes a header in wire format. If exclude is not nil, keys where exclude[key] == true are not written. Keys are not canonicalized before checking the exclude map.</source>
          <target state="translated">WriteSubsetは、ヘッダをワイヤ形式で書き込みます。excludeがnilでない場合、 exclude[key]==trueのキーは書き込まれません。exclude マップをチェックする前に、キーは正規化されません。</target>
        </trans-unit>
        <trans-unit id="049d63dec358580d0ec0653e5b3c153d3b077135" translate="yes" xml:space="preserve">
          <source>WriteTo implements io.WriterTo. This may make multiple calls to the Read method of the underlying Reader. If the underlying reader supports the WriteTo method, this calls the underlying WriteTo without buffering.</source>
          <target state="translated">WriteToは、io.WriterToを実装しています。これは、基礎となるReaderのReadメソッドを複数回呼び出すことができます。基盤となるリーダーが WriteTo メソッドをサポートしている場合、バッファリングなしで基盤となる WriteTo を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8139263f4318d7564d44a96fc8dbff5e63bb96fd" translate="yes" xml:space="preserve">
          <source>WriteTo implements the PacketConn WriteTo method.</source>
          <target state="translated">WriteTo は PacketConn の WriteTo メソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="1dd6cb0fb603b3372044d7453914baf64dbeabc3" translate="yes" xml:space="preserve">
          <source>WriteTo implements the io.WriterTo interface.</source>
          <target state="translated">WriteTo は io.WriterTo インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="8c7bb5378a7a840f064c83d707986b7492eb31e2" translate="yes" xml:space="preserve">
          <source>WriteTo writes a pprof-formatted snapshot of the profile to w. If a write to w returns an error, WriteTo returns that error. Otherwise, WriteTo returns nil.</source>
          <target state="translated">WriteTo は、プロファイルの pprof 形式のスナップショットを w に書き込みます。そうでなければ、WriteTo は nil を返します。</target>
        </trans-unit>
        <trans-unit id="489e07f5de5485be9543961aadd05292560f9aca" translate="yes" xml:space="preserve">
          <source>WriteTo writes a string representation of the scope to w, with the scope elements sorted by name. The level of indentation is controlled by n &amp;gt;= 0, with n == 0 for no indentation. If recurse is set, it also writes nested (children) scopes.</source>
          <target state="translated">WriteToは、スコープの文字列表現をwに書き込みます。スコープ要素は名前でソートされています。インデントのレベルはn&amp;gt; = 0で制御され、n == 0はインデントなしを意味します。 recurseが設定されている場合、ネストされた（子）スコープも書き込みます。</target>
        </trans-unit>
        <trans-unit id="d1e7dcb553ab192fce6fd288394665a1afcd3f5c" translate="yes" xml:space="preserve">
          <source>WriteTo writes data to w until the buffer is drained or an error occurs. The return value n is the number of bytes written; it always fits into an int, but it is int64 to match the io.WriterTo interface. Any error encountered during the write is also returned.</source>
          <target state="translated">WriteTo は、バッファが空になるかエラーが発生するまでデータを w に書き込みます。返り値 n は書き込まれたバイト数です。これは常に int に収まりますが、io.WriterTo インターフェースに合わせて int64 になっています。書き込み中に発生したエラーもすべて返されます。</target>
        </trans-unit>
        <trans-unit id="675b06c215e20183689acb9dd6a02dde0ececcfe" translate="yes" xml:space="preserve">
          <source>WriteTo writes data to w until there's no more data to write or when an error occurs. The return value n is the number of bytes written. Any error encountered during the write is also returned.</source>
          <target state="translated">WriteTo は、書き込むデータがなくなるか、エラーが発生するまで w にデータを書き込みます。返り値 n は書き込まれたバイト数です。書き込み中にエラーが発生した場合も返されます。</target>
        </trans-unit>
        <trans-unit id="16524feb66448f891798c4e2c2b003dede383877" translate="yes" xml:space="preserve">
          <source>WriteToIP acts like WriteTo but takes an IPAddr.</source>
          <target state="translated">WriteToIPはWriteToと同じように動作しますが、IPAddrを取ります。</target>
        </trans-unit>
        <trans-unit id="5439ba90be07d98d78a0acbb16e701c88430c920" translate="yes" xml:space="preserve">
          <source>WriteToUDP acts like WriteTo but takes a UDPAddr.</source>
          <target state="translated">WriteToUDPはWriteToと同じように動作しますが、UDPAddrを取ります。</target>
        </trans-unit>
        <trans-unit id="70bfc7011539dc3fcd8cb976e79375745c81efb6" translate="yes" xml:space="preserve">
          <source>WriteToUnix acts like WriteTo but takes a UnixAddr.</source>
          <target state="translated">WriteToUnixはWriteToと同じように動作しますが、UnixAddrを取ります。</target>
        </trans-unit>
        <trans-unit id="bf93ade9d0116866c9989c0d6db8fe0a1790197b" translate="yes" xml:space="preserve">
          <source>WriteType writes the string representation of typ to buf. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">WriteTypeは,typの文字列表現をbufに書き込みます.Qualifierはパッケージレベルのオブジェクトの印刷を制御します。</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Writer</target>
        </trans-unit>
        <trans-unit id="27739d4166f1a372ecad9e26dae552acbbf96378" translate="yes" xml:space="preserve">
          <source>Writer implements a zip file writer.</source>
          <target state="translated">Writer は zip ファイルライターを実装しています。</target>
        </trans-unit>
        <trans-unit id="0a56b3c1ebc71cca6811d5ea42cfcd61b9d39529" translate="yes" xml:space="preserve">
          <source>Writer implements buffering for an io.Writer object. If an error occurs writing to a Writer, no more data will be accepted and all subsequent writes, and Flush, will return the error. After all data has been written, the client should call the Flush method to guarantee all data has been forwarded to the underlying io.Writer.</source>
          <target state="translated">Writerは、io.Writerオブジェクトのバッファリングを実装しています。Writerへの書き込みでエラーが発生した場合、それ以上のデータは受け付けられず、それ以降のすべての書き込みとFlushはエラーを返します。すべてのデータが書き込まれた後、クライアントはFlushメソッドを呼び出して、すべてのデータが基礎となるio.Writerに転送されたことを保証しなければなりません。</target>
        </trans-unit>
        <trans-unit id="ef9d03832983cf4b271bb5441f954111b4dc0e1e" translate="yes" xml:space="preserve">
          <source>Writer is the interface that wraps the basic Write method.</source>
          <target state="translated">Writerは、基本的なWriteメソッドをラップするインターフェースです。</target>
        </trans-unit>
        <trans-unit id="427cfe70a00ca8d321faf6329909145b93655f1d" translate="yes" xml:space="preserve">
          <source>Writer provides sequential writing of a tar archive. Write.WriteHeader begins a new file with the provided Header, and then Writer can be treated as an io.Writer to supply that file's data.</source>
          <target state="translated">Writerは、tarアーカイブの逐次書き込みを提供します。Write.WriteHeaderは、提供されたHeaderで新しいファイルを開始し、その後、そのファイルのデータを供給するために、Writerをio.Writerとして扱うことができます。</target>
        </trans-unit>
        <trans-unit id="7acd853acb07fa87c4b8bfe4031a755b61ba3bf3" translate="yes" xml:space="preserve">
          <source>Writer returns the output destination for the logger.</source>
          <target state="translated">ライターは、ロガーの出力先を返します。</target>
        </trans-unit>
        <trans-unit id="3d5fe142bef0cbbd3b816be820156528e0933482" translate="yes" xml:space="preserve">
          <source>Writer returns the output destination for the standard logger.</source>
          <target state="translated">ライターは、標準ロガーの出力先を返します。</target>
        </trans-unit>
        <trans-unit id="cc5f6bbc6d4441180bb267f283d2d032dc1c0a51" translate="yes" xml:space="preserve">
          <source>Writer, to write dot-encoded text blocks.</source>
          <target state="translated">ライター、ドットエンコードされたテキストブロックを書くために。</target>
        </trans-unit>
        <trans-unit id="18f7957bfe6eb1c4e6c6911f16343b2aefa987f8" translate="yes" xml:space="preserve">
          <source>Writer.Init</source>
          <target state="translated">Writer.Init</target>
        </trans-unit>
        <trans-unit id="c077ca30988f9da9fa06bdada12777468be255fd" translate="yes" xml:space="preserve">
          <source>Writer.RegisterCompressor</source>
          <target state="translated">Writer.RegisterCompressor</target>
        </trans-unit>
        <trans-unit id="52b3549fe3dc7eeb9e682e0957e12c6a11a932c4" translate="yes" xml:space="preserve">
          <source>Writer.WriteAll</source>
          <target state="translated">Writer.WriteAll</target>
        </trans-unit>
        <trans-unit id="aeee2e0685aa932cc2aaeffa26f77224718c1152" translate="yes" xml:space="preserve">
          <source>WriterAt is the interface that wraps the basic WriteAt method.</source>
          <target state="translated">WriterAtは、基本的なWriteAtメソッドをラップするインターフェースです。</target>
        </trans-unit>
        <trans-unit id="8ab71dde8a6f8d04cee549ea8541c77aaebdcab8" translate="yes" xml:space="preserve">
          <source>WriterTo is the interface that wraps the WriteTo method.</source>
          <target state="translated">WriterToは、WriteToメソッドをラップするインターフェースです。</target>
        </trans-unit>
        <trans-unit id="1b39f0e4afe7201d767e5fbbce52d4c2e5b87a3a" translate="yes" xml:space="preserve">
          <source>WroteRequestInfo contains information provided to the WroteRequest hook.</source>
          <target state="translated">WroteRequestInfoには、WroteRequestフックに提供される情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="127aef9b4a6638a4da9d60eee45faca81817967a" translate="yes" xml:space="preserve">
          <source>X509KeyPair</source>
          <target state="translated">X509KeyPair</target>
        </trans-unit>
        <trans-unit id="512f6338fce5f83658ade589125789680e0a180a" translate="yes" xml:space="preserve">
          <source>X509KeyPair (HttpServer)</source>
          <target state="translated">X509KeyPair (HttpServer)</target>
        </trans-unit>
        <trans-unit id="eb6cfabefa86cc7130f0ceaa6c99558292a8fb32" translate="yes" xml:space="preserve">
          <source>X509KeyPair parses a public/private key pair from a pair of PEM encoded data. On successful return, Certificate.Leaf will be nil because the parsed form of the certificate is not retained.</source>
          <target state="translated">X509KeyPair は、PEM エンコードされたデータのペアから公開鍵/秘密鍵のペアを解析します。返却に成功すると、解析された証明書の形式は保持されないため、Certificate.Leaf は nil になります。</target>
        </trans-unit>
        <trans-unit id="db992a4f131e511a8d9ce5936d82355a68509183" translate="yes" xml:space="preserve">
          <source>XORKeyStream sets dst to the result of XORing src with the key stream. Dst and src must overlap entirely or not at all.</source>
          <target state="translated">XORKeyStream は,src をキーストリームで XOR した結果を dst に設定します.Dst と src は完全に重なっているか、全く重なっていないかのどちらかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="63c6c5be8d1c945e475df745ac44a459209b8818" translate="yes" xml:space="preserve">
          <source>Xor sets z = x ^ y and returns z.</source>
          <target state="translated">Xor は z=x ^ y をセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="b579a9d9b11366f490071fb238c298157a4151d9" translate="yes" xml:space="preserve">
          <source>Y0 returns the order-zero Bessel function of the second kind.</source>
          <target state="translated">Y0は2種類目の次数ゼロのベッセル関数を返します。</target>
        </trans-unit>
        <trans-unit id="e0b0a19d715ece09aeb410f412b0c7d445934330" translate="yes" xml:space="preserve">
          <source>Y1 returns the order-one Bessel function of the second kind.</source>
          <target state="translated">Y1は2種類目の次数1のベッセル関数を返します。</target>
        </trans-unit>
        <trans-unit id="993c29f2dccf3899bcb16c0c3c3e58cbb4ff26a3" translate="yes" xml:space="preserve">
          <source>YCbCr is an in-memory image of Y'CbCr colors. There is one Y sample per pixel, but each Cb and Cr sample can span one or more pixels. YStride is the Y slice index delta between vertically adjacent pixels. CStride is the Cb and Cr slice index delta between vertically adjacent pixels that map to separate chroma samples. It is not an absolute requirement, but YStride and len(Y) are typically multiples of 8, and:</source>
          <target state="translated">YCbCrは、Y'CbCr色のインメモリ画像です。1ピクセルあたり1つのYサンプルがありますが、各CbとCrサンプルは1つ以上のピクセルにまたがることができます。YStrideは垂直に隣接するピクセル間のYスライスインデックスデルタです。CStrideは、垂直方向に隣接するピクセル間のCbとCrのスライスインデックスのデルタで、別々のクロマサンプルにマッピングされます。これは絶対条件ではありませんが、YStrideとlen(Y)は通常8の倍数です。</target>
        </trans-unit>
        <trans-unit id="04b6d1d571fb2541a796ccff17941677d6e94116" translate="yes" xml:space="preserve">
          <source>YCbCr represents a fully opaque 24-bit Y'CbCr color, having 8 bits each for one luma and two chroma components.</source>
          <target state="translated">YCbCrは完全に不透明な24ビットのY'CbCrカラーを表し、1つのルーマと2つのクロマ成分にそれぞれ8ビットのビットを持っています。</target>
        </trans-unit>
        <trans-unit id="569302883a982b6ecca1dff87d53f57a317c9e3e" translate="yes" xml:space="preserve">
          <source>YCbCrModel is the Model for Y'CbCr colors.</source>
          <target state="translated">YCbCrModelは、Y'CbCrカラーのモデルです。</target>
        </trans-unit>
        <trans-unit id="c3eb9b9a99d34d53e98e4c42a8f496bcc27b2dd4" translate="yes" xml:space="preserve">
          <source>YCbCrSubsampleRatio is the chroma subsample ratio used in a YCbCr image.</source>
          <target state="translated">YCbCrSubsampleRatio は、YCbCr 画像で使用されるクロマサブサンプル比です。</target>
        </trans-unit>
        <trans-unit id="7c2a18a269291c4a568eeda22c7b8012ba05d3cc" translate="yes" xml:space="preserve">
          <source>YCbCrToRGB converts a Y'CbCr triple to an RGB triple.</source>
          <target state="translated">YCbCrToRGB は、Y'CbCr トリプルを RGB トリプルに変換します。</target>
        </trans-unit>
        <trans-unit id="2cc85e17988c35ca87fe9396bebb3408abc4139c" translate="yes" xml:space="preserve">
          <source>YOffset returns the index of the first element of Y that corresponds to the pixel at (x, y).</source>
          <target state="translated">YOffset は,(x,y)のピクセルに対応する Y の最初の要素のインデックスを返します.</target>
        </trans-unit>
        <trans-unit id="0ae67455f11e2f617f0f533036db82246ea0f1ba" translate="yes" xml:space="preserve">
          <source>Year returns the year in which t occurs.</source>
          <target state="translated">Yearは、tが発生した年を返します。</target>
        </trans-unit>
        <trans-unit id="a0e093613a2a058d01beb5d9e83df474d4a7948e" translate="yes" xml:space="preserve">
          <source>YearDay returns the day of the year specified by t, in the range [1,365] for non-leap years, and [1,366] in leap years.</source>
          <target state="translated">YearDayは、tで指定した年の日を、うるう年でない場合は[1,365]、うるう年である場合は[1,366]の範囲で返します。</target>
        </trans-unit>
        <trans-unit id="fbc86f73dd0143c109fc555dff3f9f4721e59b11" translate="yes" xml:space="preserve">
          <source>Yn returns the order-n Bessel function of the second kind.</source>
          <target state="translated">Ynは2種類目の次数nのベッセル関数を返します。</target>
        </trans-unit>
        <trans-unit id="1e7f3945f480c58bbf5b45878f32cae6f3cbe3e1" translate="yes" xml:space="preserve">
          <source>ZP is the zero Point.</source>
          <target state="translated">ZPはゼロポイントです。</target>
        </trans-unit>
        <trans-unit id="4bedd2eb81ef394e3788fa98b69d1ca4f77655ed" translate="yes" xml:space="preserve">
          <source>ZR is the zero Rectangle.</source>
          <target state="translated">ZRはゼロレクタングルです。</target>
        </trans-unit>
        <trans-unit id="1c6d3d57e5f186ce1aa4706dba2af53b9ebdfe54" translate="yes" xml:space="preserve">
          <source>Zero returns a Value representing the zero value for the specified type. The result is different from the zero value of the Value struct, which represents no value at all. For example, Zero(TypeOf(42)) returns a Value with Kind Int and value 0. The returned value is neither addressable nor settable.</source>
          <target state="translated">Zeroは、指定された型のゼロ値を表すValueを返します。この結果は、全く値を表さない Value 構造体のゼロ値とは異なります。例えば、Zero(TypeOf(42))は、Kind Intと値0を持つValueを返します。返された値は、アドレス指定可能でも設定可能でもありません。</target>
        </trans-unit>
        <trans-unit id="5ec7a8085e409e2fdcc504c5c24961579ad364d7" translate="yes" xml:space="preserve">
          <source>Zone computes the time zone in effect at time t, returning the abbreviated name of the zone (such as &quot;CET&quot;) and its offset in seconds east of UTC.</source>
          <target state="translated">Zoneは、時刻tで有効なタイムゾーンを計算し、ゾーンの略称(例えば &quot;CET &quot;など)と、UTCの東の秒単位でのオフセットを返します。</target>
        </trans-unit>
        <trans-unit id="d95a582393c950008420678e089bcb6fb6005a66" translate="yes" xml:space="preserve">
          <source>[1] US patent 4405829 (1972, expired) [2] &lt;a href=&quot;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&quot;&gt;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&lt;/a&gt;</source>
          <target state="translated">[1]米国特許4405829（1972、期限切れ）[2] &lt;a href=&quot;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&quot;&gt;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9ce7a3611a7e8082ceef88c829a5b4bd38a883b" translate="yes" xml:space="preserve">
          <source>a and b may be positive, zero or negative. (Before Go 1.14 both had to be &amp;gt; 0.) Regardless of the signs of a and b, z is always &amp;gt;= 0.</source>
          <target state="translated">aとbは、正、ゼロ、または負の場合があります。（Go 1.14より前は、両方とも&amp;gt; 0である必要がありました。）aとbの符号に関係なく、zは常に&amp;gt; = 0です。</target>
        </trans-unit>
        <trans-unit id="c868a399ecee19d2ae9d23c5ac270d4627ec37c2" translate="yes" xml:space="preserve">
          <source>adler32</source>
          <target state="translated">adler32</target>
        </trans-unit>
        <trans-unit id="3bc4dea27b862dd8aa4e815187d2cdd3be2a75c7" translate="yes" xml:space="preserve">
          <source>adler32.Checksum()</source>
          <target state="translated">adler32.Checksum()</target>
        </trans-unit>
        <trans-unit id="fdae41220d5cd5d881fd4909d397ab172b7b713d" translate="yes" xml:space="preserve">
          <source>adler32.New()</source>
          <target state="translated">adler32.New()</target>
        </trans-unit>
        <trans-unit id="b9e516580969fb81fe1efdac7be863ede058820d" translate="yes" xml:space="preserve">
          <source>adler32.go</source>
          <target state="translated">adler32.go</target>
        </trans-unit>
        <trans-unit id="9b214a0fbc91794f9b2f7c03b2ffdadc705bb106" translate="yes" xml:space="preserve">
          <source>aes</source>
          <target state="translated">aes</target>
        </trans-unit>
        <trans-unit id="4a6e483e4c655c235bfae76e4cff3a9491b844fe" translate="yes" xml:space="preserve">
          <source>aes.KeySizeError</source>
          <target state="translated">aes.KeySizeError</target>
        </trans-unit>
        <trans-unit id="eaae49997213c0be97b3d20ac0b21bf6b5ea2211" translate="yes" xml:space="preserve">
          <source>aes.KeySizeError.Error()</source>
          <target state="translated">aes.KeySizeError.Error()</target>
        </trans-unit>
        <trans-unit id="39b985982e7b3543046a3bf2ac7d7a7b8ce71274" translate="yes" xml:space="preserve">
          <source>aes.NewCipher()</source>
          <target state="translated">aes.NewCipher()</target>
        </trans-unit>
        <trans-unit id="0fb27eee12ade1a38a95e36453c1e554b462484b" translate="yes" xml:space="preserve">
          <source>and to read that data back:</source>
          <target state="translated">と、そのデータを読み返すことができます。</target>
        </trans-unit>
        <trans-unit id="ebfb55f4432b592119a10592e4f26272cc72359e" translate="yes" xml:space="preserve">
          <source>archive</source>
          <target state="translated">archive</target>
        </trans-unit>
        <trans-unit id="599b006359811c99dc41f2f30a3e4da1a269aab7" translate="yes" xml:space="preserve">
          <source>archive/tar</source>
          <target state="translated">archive/tar</target>
        </trans-unit>
        <trans-unit id="36627ccd71d39d88b5319bafd6f742e95ad7efbb" translate="yes" xml:space="preserve">
          <source>archive/zip</source>
          <target state="translated">archive/zip</target>
        </trans-unit>
        <trans-unit id="5711ec9a54403a9271f1ec98d0532f337d096f48" translate="yes" xml:space="preserve">
          <source>are considered benchmarks, and are executed by the &quot;go test&quot; command when its -bench flag is provided. Benchmarks are run sequentially.</source>
          <target state="translated">はベンチマークとみなされ、-bench フラグが指定された場合に &quot;go test&quot; コマンドによって実行されます。ベンチマークは順次実行されます。</target>
        </trans-unit>
        <trans-unit id="2f4d46fbed13b2d5ff12c543a95ead3c2d7d0b4e" translate="yes" xml:space="preserve">
          <source>ascii85</source>
          <target state="translated">ascii85</target>
        </trans-unit>
        <trans-unit id="c709c878860d1c843277aa3c7fafe85ebe2fdbbf" translate="yes" xml:space="preserve">
          <source>ascii85.CorruptInputError</source>
          <target state="translated">ascii85.CorruptInputError</target>
        </trans-unit>
        <trans-unit id="58459a79830f2fbd0ecae6834d288cc61d744b76" translate="yes" xml:space="preserve">
          <source>ascii85.CorruptInputError.Error()</source>
          <target state="translated">ascii85.CorruptInputError.Error()</target>
        </trans-unit>
        <trans-unit id="59d4f41c4d68ec4771eaba0f7e123bfcd8825ea8" translate="yes" xml:space="preserve">
          <source>ascii85.Decode()</source>
          <target state="translated">ascii85.Decode()</target>
        </trans-unit>
        <trans-unit id="8d4003545eb5e35693ca34599af4f472b3ea1e75" translate="yes" xml:space="preserve">
          <source>ascii85.Encode()</source>
          <target state="translated">ascii85.Encode()</target>
        </trans-unit>
        <trans-unit id="bf3560ccbab3bd109332df53c1a3532db455ea63" translate="yes" xml:space="preserve">
          <source>ascii85.MaxEncodedLen()</source>
          <target state="translated">ascii85.MaxEncodedLen()</target>
        </trans-unit>
        <trans-unit id="70cbc7b778e1d7ce35bd8d42cc75b6c69fc1ac8a" translate="yes" xml:space="preserve">
          <source>ascii85.NewDecoder()</source>
          <target state="translated">ascii85.NewDecoder()</target>
        </trans-unit>
        <trans-unit id="5a619b434aa961150c63a00555d9caa30389e0a7" translate="yes" xml:space="preserve">
          <source>ascii85.NewEncoder()</source>
          <target state="translated">ascii85.NewEncoder()</target>
        </trans-unit>
        <trans-unit id="5d4c0e749c8b30f76f313c377c2c53071120924c" translate="yes" xml:space="preserve">
          <source>ascii85.go</source>
          <target state="translated">ascii85.go</target>
        </trans-unit>
        <trans-unit id="9edf4240018976bf964cf31c1a24d34fde8d517d" translate="yes" xml:space="preserve">
          <source>asn1</source>
          <target state="translated">asn1</target>
        </trans-unit>
        <trans-unit id="3b25fcd0e7aac867ba1b902a9bad74c32fd06f7a" translate="yes" xml:space="preserve">
          <source>asn1.BitString</source>
          <target state="translated">asn1.BitString</target>
        </trans-unit>
        <trans-unit id="b6f72489fb5ca7587375a5bdd653f7f1df476dc4" translate="yes" xml:space="preserve">
          <source>asn1.BitString.At()</source>
          <target state="translated">asn1.BitString.At()</target>
        </trans-unit>
        <trans-unit id="4c41e6f4e9eb61025667c2d062c9558e1f1e6497" translate="yes" xml:space="preserve">
          <source>asn1.BitString.RightAlign()</source>
          <target state="translated">asn1.BitString.RightAlign()</target>
        </trans-unit>
        <trans-unit id="8cdba2268b9ac8546eddd752887146141a709a59" translate="yes" xml:space="preserve">
          <source>asn1.Enumerated</source>
          <target state="translated">asn1.Enumerated</target>
        </trans-unit>
        <trans-unit id="0bda2d2df59ae7e05b1eec034907a553d7c7a42b" translate="yes" xml:space="preserve">
          <source>asn1.Flag</source>
          <target state="translated">asn1.Flag</target>
        </trans-unit>
        <trans-unit id="b6fd1eca6f1af508581a7ec1afa96ca5c77fdcef" translate="yes" xml:space="preserve">
          <source>asn1.Marshal()</source>
          <target state="translated">asn1.Marshal()</target>
        </trans-unit>
        <trans-unit id="1dd69ab12f931e65b184412035dbdf691ef75671" translate="yes" xml:space="preserve">
          <source>asn1.MarshalWithParams()</source>
          <target state="translated">asn1.MarshalWithParams()</target>
        </trans-unit>
        <trans-unit id="967f6161afbc84e65192ed4145c8fb2886ef1b34" translate="yes" xml:space="preserve">
          <source>asn1.ObjectIdentifier</source>
          <target state="translated">asn1.ObjectIdentifier</target>
        </trans-unit>
        <trans-unit id="eb5273c3d4afff6a018248c1d3b92ecf13f1b251" translate="yes" xml:space="preserve">
          <source>asn1.ObjectIdentifier.Equal()</source>
          <target state="translated">asn1.ObjectIdentifier.Equal()</target>
        </trans-unit>
        <trans-unit id="9104208a312cff3364923b64231855dcb6182420" translate="yes" xml:space="preserve">
          <source>asn1.ObjectIdentifier.String()</source>
          <target state="translated">asn1.ObjectIdentifier.String()</target>
        </trans-unit>
        <trans-unit id="fa1326ed75bd447347a012e931b2cb50f6277993" translate="yes" xml:space="preserve">
          <source>asn1.RawContent</source>
          <target state="translated">asn1.RawContent</target>
        </trans-unit>
        <trans-unit id="11afa151ffea7be0e51569d7278af02c01d14648" translate="yes" xml:space="preserve">
          <source>asn1.RawValue</source>
          <target state="translated">asn1.RawValue</target>
        </trans-unit>
        <trans-unit id="c7e196c13ac871177aa305816ccdd2f214844f1f" translate="yes" xml:space="preserve">
          <source>asn1.StructuralError</source>
          <target state="translated">asn1.StructuralError</target>
        </trans-unit>
        <trans-unit id="ede541b4e84339ed235682099c483b8d0ea9d195" translate="yes" xml:space="preserve">
          <source>asn1.StructuralError.Error()</source>
          <target state="translated">asn1.StructuralError.Error()</target>
        </trans-unit>
        <trans-unit id="6f92f6f304a340128dbbc8d8d5d1d24bb934dd1c" translate="yes" xml:space="preserve">
          <source>asn1.SyntaxError</source>
          <target state="translated">asn1.SyntaxError</target>
        </trans-unit>
        <trans-unit id="2cc0c7c5b17f8fbf4c99fe144d21fdcb86a4e4d5" translate="yes" xml:space="preserve">
          <source>asn1.SyntaxError.Error()</source>
          <target state="translated">asn1.SyntaxError.Error()</target>
        </trans-unit>
        <trans-unit id="b4620fdf4cc070561d9028cca9eebe3527fab3bb" translate="yes" xml:space="preserve">
          <source>asn1.Unmarshal()</source>
          <target state="translated">asn1.Unmarshal()</target>
        </trans-unit>
        <trans-unit id="db2421d96b2365ce2873e4bdc3dd1b1884fb7a9e" translate="yes" xml:space="preserve">
          <source>asn1.UnmarshalWithParams()</source>
          <target state="translated">asn1.UnmarshalWithParams()</target>
        </trans-unit>
        <trans-unit id="c24c0248770ae98831f8a654310d4c2e07514c61" translate="yes" xml:space="preserve">
          <source>ast</source>
          <target state="translated">ast</target>
        </trans-unit>
        <trans-unit id="befa22645af2b2c57ff1d061bee4609e465ce151" translate="yes" xml:space="preserve">
          <source>ast.ArrayType</source>
          <target state="translated">ast.ArrayType</target>
        </trans-unit>
        <trans-unit id="3aaa1f08029690a9ad3162fe7f0aeb4221534ddc" translate="yes" xml:space="preserve">
          <source>ast.ArrayType.End()</source>
          <target state="translated">ast.ArrayType.End()</target>
        </trans-unit>
        <trans-unit id="7400ff1c7cb92a2976bfa3daf41ae2f354273958" translate="yes" xml:space="preserve">
          <source>ast.ArrayType.Pos()</source>
          <target state="translated">ast.ArrayType.Pos()</target>
        </trans-unit>
        <trans-unit id="8f7ff0499c577334d405d39760346407f6352d95" translate="yes" xml:space="preserve">
          <source>ast.AssignStmt</source>
          <target state="translated">ast.AssignStmt</target>
        </trans-unit>
        <trans-unit id="a4eadbf257f6ac901889cf9a6bb1024e24a65284" translate="yes" xml:space="preserve">
          <source>ast.AssignStmt.End()</source>
          <target state="translated">ast.AssignStmt.End()</target>
        </trans-unit>
        <trans-unit id="2d16762ab296b2e910461becfd95d333facceb3a" translate="yes" xml:space="preserve">
          <source>ast.AssignStmt.Pos()</source>
          <target state="translated">ast.AssignStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="ea70196c82482d305608466884903c9a043e9178" translate="yes" xml:space="preserve">
          <source>ast.BadDecl</source>
          <target state="translated">ast.BadDecl</target>
        </trans-unit>
        <trans-unit id="8b1817d76ef00b508173afe2cfbf9777b5fb2077" translate="yes" xml:space="preserve">
          <source>ast.BadDecl.End()</source>
          <target state="translated">ast.BadDecl.End()</target>
        </trans-unit>
        <trans-unit id="4deb107b4c3af556a6324d9162f029f4f4e1ab9d" translate="yes" xml:space="preserve">
          <source>ast.BadDecl.Pos()</source>
          <target state="translated">ast.BadDecl.Pos()</target>
        </trans-unit>
        <trans-unit id="fd50cb7d9bdbcdf5cbc147580c9a8b40d97b0d06" translate="yes" xml:space="preserve">
          <source>ast.BadExpr</source>
          <target state="translated">ast.BadExpr</target>
        </trans-unit>
        <trans-unit id="d2fa322f959652eda770c38075241e33463480a5" translate="yes" xml:space="preserve">
          <source>ast.BadExpr.End()</source>
          <target state="translated">ast.BadExpr.End()</target>
        </trans-unit>
        <trans-unit id="9b83d6d18f65ed71ddfbc157d967fa64ca7fe3cc" translate="yes" xml:space="preserve">
          <source>ast.BadExpr.Pos()</source>
          <target state="translated">ast.BadExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="aa7a3ebb9ae1f1a5f3082d8520b04a78ac2064d7" translate="yes" xml:space="preserve">
          <source>ast.BadStmt</source>
          <target state="translated">ast.BadStmt</target>
        </trans-unit>
        <trans-unit id="7985d77e4e120c475b0777e4460cfbd66c182a3f" translate="yes" xml:space="preserve">
          <source>ast.BadStmt.End()</source>
          <target state="translated">ast.BadStmt.End()</target>
        </trans-unit>
        <trans-unit id="611c00a04c5ad6fc35d6b2b0553c31ad6c2c9afd" translate="yes" xml:space="preserve">
          <source>ast.BadStmt.Pos()</source>
          <target state="translated">ast.BadStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="a332f7650fd36f4dd02d99d3b8ec6e1a8507c809" translate="yes" xml:space="preserve">
          <source>ast.BasicLit</source>
          <target state="translated">ast.BasicLit</target>
        </trans-unit>
        <trans-unit id="a98f149f6185847f9599a498ffe20bdbe234ca79" translate="yes" xml:space="preserve">
          <source>ast.BasicLit.End()</source>
          <target state="translated">ast.BasicLit.End()</target>
        </trans-unit>
        <trans-unit id="0e3e9e0fe19152d6958f147d0962725dbce04684" translate="yes" xml:space="preserve">
          <source>ast.BasicLit.Pos()</source>
          <target state="translated">ast.BasicLit.Pos()</target>
        </trans-unit>
        <trans-unit id="9ec47fda282a56476d3ee59b3f89d74ad43722db" translate="yes" xml:space="preserve">
          <source>ast.BinaryExpr</source>
          <target state="translated">ast.BinaryExpr</target>
        </trans-unit>
        <trans-unit id="d9ca2bfa7b901986b5e133efaf148e7bfa73fda0" translate="yes" xml:space="preserve">
          <source>ast.BinaryExpr.End()</source>
          <target state="translated">ast.BinaryExpr.End()</target>
        </trans-unit>
        <trans-unit id="b540b3db7c164e96ddb28ee245b6fef0191d37eb" translate="yes" xml:space="preserve">
          <source>ast.BinaryExpr.Pos()</source>
          <target state="translated">ast.BinaryExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="53ad55929540909d0e0c0c6d1a14db54405be438" translate="yes" xml:space="preserve">
          <source>ast.BlockStmt</source>
          <target state="translated">ast.BlockStmt</target>
        </trans-unit>
        <trans-unit id="2a8369a80640f3347a935c1c0c735ec709358dd1" translate="yes" xml:space="preserve">
          <source>ast.BlockStmt.End()</source>
          <target state="translated">ast.BlockStmt.End()</target>
        </trans-unit>
        <trans-unit id="851c7137cbb678223bbeb3430399d5059b29e277" translate="yes" xml:space="preserve">
          <source>ast.BlockStmt.Pos()</source>
          <target state="translated">ast.BlockStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="53d494d40d484db0e354b674a369eaa485186d69" translate="yes" xml:space="preserve">
          <source>ast.BranchStmt</source>
          <target state="translated">ast.BranchStmt</target>
        </trans-unit>
        <trans-unit id="006cb666be74c0e0ee36d0e1ed3b722a9839add9" translate="yes" xml:space="preserve">
          <source>ast.BranchStmt.End()</source>
          <target state="translated">ast.BranchStmt.End()</target>
        </trans-unit>
        <trans-unit id="e624885b40ec9930e0e4fd5546fea07c4309f64a" translate="yes" xml:space="preserve">
          <source>ast.BranchStmt.Pos()</source>
          <target state="translated">ast.BranchStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="d6ff240d9cd77565e3fdf528d15c0d3e77aae78a" translate="yes" xml:space="preserve">
          <source>ast.CallExpr</source>
          <target state="translated">ast.CallExpr</target>
        </trans-unit>
        <trans-unit id="8a4191ffec5d62d08911cd982b546ba76a9e5277" translate="yes" xml:space="preserve">
          <source>ast.CallExpr.End()</source>
          <target state="translated">ast.CallExpr.End()</target>
        </trans-unit>
        <trans-unit id="34bacfb498513ccfab3294638b6955e96b607eff" translate="yes" xml:space="preserve">
          <source>ast.CallExpr.Pos()</source>
          <target state="translated">ast.CallExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="908cabf810e388d4f96ee3b484f6fcc63f3a633e" translate="yes" xml:space="preserve">
          <source>ast.CaseClause</source>
          <target state="translated">ast.CaseClause</target>
        </trans-unit>
        <trans-unit id="9bf625cb99111aa416d920ee5d6aa42ad53c2a20" translate="yes" xml:space="preserve">
          <source>ast.CaseClause.End()</source>
          <target state="translated">ast.CaseClause.End()</target>
        </trans-unit>
        <trans-unit id="5a4f8b1a228bb80bdb4bf93e1ba2e0372f5f4436" translate="yes" xml:space="preserve">
          <source>ast.CaseClause.Pos()</source>
          <target state="translated">ast.CaseClause.Pos()</target>
        </trans-unit>
        <trans-unit id="df184106f71e2042d31c9c581eea0f2a15d7e71a" translate="yes" xml:space="preserve">
          <source>ast.ChanDir</source>
          <target state="translated">ast.ChanDir</target>
        </trans-unit>
        <trans-unit id="d9894c3ef3fe79412fc727115570d01ffbfbe371" translate="yes" xml:space="preserve">
          <source>ast.ChanType</source>
          <target state="translated">ast.ChanType</target>
        </trans-unit>
        <trans-unit id="a2d3c384b591665fddb01c653b8cba6f42964707" translate="yes" xml:space="preserve">
          <source>ast.ChanType.End()</source>
          <target state="translated">ast.ChanType.End()</target>
        </trans-unit>
        <trans-unit id="b0d99e4fe9e408caf8079a70db85f1516d3ca640" translate="yes" xml:space="preserve">
          <source>ast.ChanType.Pos()</source>
          <target state="translated">ast.ChanType.Pos()</target>
        </trans-unit>
        <trans-unit id="afe2fe744c7228a28664b3f99a19fbe01eaab7ae" translate="yes" xml:space="preserve">
          <source>ast.CommClause</source>
          <target state="translated">ast.CommClause</target>
        </trans-unit>
        <trans-unit id="748b6c2557f1f18e86e976cbd1e96523b3b6d20f" translate="yes" xml:space="preserve">
          <source>ast.CommClause.End()</source>
          <target state="translated">ast.CommClause.End()</target>
        </trans-unit>
        <trans-unit id="76469ceeb1ed92aaa0251ce9a2f5a4d18c58e648" translate="yes" xml:space="preserve">
          <source>ast.CommClause.Pos()</source>
          <target state="translated">ast.CommClause.Pos()</target>
        </trans-unit>
        <trans-unit id="eb410c5b03c33912d6440a324168677d85ea4084" translate="yes" xml:space="preserve">
          <source>ast.Comment</source>
          <target state="translated">ast.Comment</target>
        </trans-unit>
        <trans-unit id="2f74f8850964cdea428b72cbb0bd8306188b40cc" translate="yes" xml:space="preserve">
          <source>ast.Comment.End()</source>
          <target state="translated">ast.Comment.End()</target>
        </trans-unit>
        <trans-unit id="8da5aaee99b97985300a17a57207881036cfc8a5" translate="yes" xml:space="preserve">
          <source>ast.Comment.Pos()</source>
          <target state="translated">ast.Comment.Pos()</target>
        </trans-unit>
        <trans-unit id="d482672bd74456c8614c239b9de80f42d9daf6ac" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup</source>
          <target state="translated">ast.CommentGroup</target>
        </trans-unit>
        <trans-unit id="291fb0d01c213b675214864708e38aac78c965df" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup.End()</source>
          <target state="translated">ast.CommentGroup.End()</target>
        </trans-unit>
        <trans-unit id="7ec5ba7e20d2f8b73cfdda6dd5a5bafef1a471ad" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup.Pos()</source>
          <target state="translated">ast.CommentGroup.Pos()</target>
        </trans-unit>
        <trans-unit id="db0b452520c4081b875986a5b08603bfa7cf27db" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup.Text()</source>
          <target state="translated">ast.CommentGroup.Text()</target>
        </trans-unit>
        <trans-unit id="49b8300f7bfddf0b6f0c42c6dedb29841231a049" translate="yes" xml:space="preserve">
          <source>ast.CommentMap</source>
          <target state="translated">ast.CommentMap</target>
        </trans-unit>
        <trans-unit id="138e15e3c47ac21027b750aa86d1b4d8df53eec7" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.Comments()</source>
          <target state="translated">ast.CommentMap.Comments()</target>
        </trans-unit>
        <trans-unit id="2a275924c14d2d5bda8b6efa1638b2ec1b5a618b" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.Filter()</source>
          <target state="translated">ast.CommentMap.Filter()</target>
        </trans-unit>
        <trans-unit id="df6eab6e6f03363da7369f68bcb68c05efd35841" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.String()</source>
          <target state="translated">ast.CommentMap.String()</target>
        </trans-unit>
        <trans-unit id="0f2fc4844e739382be4a668668f79c30a8928df8" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.Update()</source>
          <target state="translated">ast.CommentMap.Update()</target>
        </trans-unit>
        <trans-unit id="3a34308cd756c0e7977abc07b327473d4c5e13c9" translate="yes" xml:space="preserve">
          <source>ast.CompositeLit</source>
          <target state="translated">ast.CompositeLit</target>
        </trans-unit>
        <trans-unit id="9bb0da22db2db807a80446404d4b271a65e7aab7" translate="yes" xml:space="preserve">
          <source>ast.CompositeLit.End()</source>
          <target state="translated">ast.CompositeLit.End()</target>
        </trans-unit>
        <trans-unit id="a52feba5850623b44256bed6165f0d82ada4137b" translate="yes" xml:space="preserve">
          <source>ast.CompositeLit.Pos()</source>
          <target state="translated">ast.CompositeLit.Pos()</target>
        </trans-unit>
        <trans-unit id="9b37ee9927929c783d31dbe64e672109b3492683" translate="yes" xml:space="preserve">
          <source>ast.Decl</source>
          <target state="translated">ast.Decl</target>
        </trans-unit>
        <trans-unit id="98b759c2b999b973be88a5d07cfbab3927683195" translate="yes" xml:space="preserve">
          <source>ast.DeclStmt</source>
          <target state="translated">ast.DeclStmt</target>
        </trans-unit>
        <trans-unit id="d9c77d027698da2fc0d108e953b1083d16e69416" translate="yes" xml:space="preserve">
          <source>ast.DeclStmt.End()</source>
          <target state="translated">ast.DeclStmt.End()</target>
        </trans-unit>
        <trans-unit id="78a21564f0f1d72a43aaeb48f47154c52db3176a" translate="yes" xml:space="preserve">
          <source>ast.DeclStmt.Pos()</source>
          <target state="translated">ast.DeclStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="a88c75402a7cf7a0dc33b87900e61ca2f2cb224d" translate="yes" xml:space="preserve">
          <source>ast.DeferStmt</source>
          <target state="translated">ast.DeferStmt</target>
        </trans-unit>
        <trans-unit id="56a6d8b85ed2f1106d5011cc30be75871a6f333e" translate="yes" xml:space="preserve">
          <source>ast.DeferStmt.End()</source>
          <target state="translated">ast.DeferStmt.End()</target>
        </trans-unit>
        <trans-unit id="00435a1620cdf12444d2655e5741d7351bc9d952" translate="yes" xml:space="preserve">
          <source>ast.DeferStmt.Pos()</source>
          <target state="translated">ast.DeferStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="d85c5eae8637be960ca473b6d19e86f92dadc2b1" translate="yes" xml:space="preserve">
          <source>ast.Ellipsis</source>
          <target state="translated">ast.Ellipsis</target>
        </trans-unit>
        <trans-unit id="6e8302a49c68476d2a9804dff9dc78d3fa9453ff" translate="yes" xml:space="preserve">
          <source>ast.Ellipsis.End()</source>
          <target state="translated">ast.Ellipsis.End()</target>
        </trans-unit>
        <trans-unit id="aa13456258be7dfca118f86ab0d7cd8681f91663" translate="yes" xml:space="preserve">
          <source>ast.Ellipsis.Pos()</source>
          <target state="translated">ast.Ellipsis.Pos()</target>
        </trans-unit>
        <trans-unit id="83ec929cb12fbac363e83149d20e153666193591" translate="yes" xml:space="preserve">
          <source>ast.EmptyStmt</source>
          <target state="translated">ast.EmptyStmt</target>
        </trans-unit>
        <trans-unit id="1dcc01433f78cd9d1b21499a51d59136b3e66135" translate="yes" xml:space="preserve">
          <source>ast.EmptyStmt.End()</source>
          <target state="translated">ast.EmptyStmt.End()</target>
        </trans-unit>
        <trans-unit id="d15ee08589510f58fcd6aeeadb8b06acc40aae8f" translate="yes" xml:space="preserve">
          <source>ast.EmptyStmt.Pos()</source>
          <target state="translated">ast.EmptyStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="429b94c0e48e600788d6c40b157d869b51271dfd" translate="yes" xml:space="preserve">
          <source>ast.Expr</source>
          <target state="translated">ast.Expr</target>
        </trans-unit>
        <trans-unit id="ddb6850692bf98131494cb5b4ea6a8c1a5257388" translate="yes" xml:space="preserve">
          <source>ast.ExprStmt</source>
          <target state="translated">ast.ExprStmt</target>
        </trans-unit>
        <trans-unit id="fd6a374b8d32132e7eb765f925013baf3fb247f0" translate="yes" xml:space="preserve">
          <source>ast.ExprStmt.End()</source>
          <target state="translated">ast.ExprStmt.End()</target>
        </trans-unit>
        <trans-unit id="3bbdc36acdb6e801295d7762e2d71d186f8ec5dc" translate="yes" xml:space="preserve">
          <source>ast.ExprStmt.Pos()</source>
          <target state="translated">ast.ExprStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="fe35306cfa6c33d1e08c38078ed6418b57cc5c44" translate="yes" xml:space="preserve">
          <source>ast.Field</source>
          <target state="translated">ast.Field</target>
        </trans-unit>
        <trans-unit id="b8ce598b99eab4821c1f05610e4e7c5da11843e3" translate="yes" xml:space="preserve">
          <source>ast.Field.End()</source>
          <target state="translated">ast.Field.End()</target>
        </trans-unit>
        <trans-unit id="31f3f6875ba87eb89fd1c8f4ff6e5652a7d06d46" translate="yes" xml:space="preserve">
          <source>ast.Field.Pos()</source>
          <target state="translated">ast.Field.Pos()</target>
        </trans-unit>
        <trans-unit id="35a61eacd2d4a8d7a2086110a29c7cae70367172" translate="yes" xml:space="preserve">
          <source>ast.FieldFilter</source>
          <target state="translated">ast.FieldFilter</target>
        </trans-unit>
        <trans-unit id="a5cbb8ee53c7545ba520cd4ef0b543279f93ac51" translate="yes" xml:space="preserve">
          <source>ast.FieldList</source>
          <target state="translated">ast.FieldList</target>
        </trans-unit>
        <trans-unit id="079acca70ea605f868cb5458fcd3113961f82bf9" translate="yes" xml:space="preserve">
          <source>ast.FieldList.End()</source>
          <target state="translated">ast.FieldList.End()</target>
        </trans-unit>
        <trans-unit id="0959206159b04b0f7ba0463fe7822ba39164edbe" translate="yes" xml:space="preserve">
          <source>ast.FieldList.NumFields()</source>
          <target state="translated">ast.FieldList.NumFields()</target>
        </trans-unit>
        <trans-unit id="54e713cf18d22bb14498eefdbee876cd84643301" translate="yes" xml:space="preserve">
          <source>ast.FieldList.Pos()</source>
          <target state="translated">ast.FieldList.Pos()</target>
        </trans-unit>
        <trans-unit id="824559735927a3878ee55aa114ff909a4a761fd5" translate="yes" xml:space="preserve">
          <source>ast.File</source>
          <target state="translated">ast.File</target>
        </trans-unit>
        <trans-unit id="9c13ff5d91937bd63b024c5111fe98c16f08d0e1" translate="yes" xml:space="preserve">
          <source>ast.File.End()</source>
          <target state="translated">ast.File.End()</target>
        </trans-unit>
        <trans-unit id="908fdb94b0f7d7928c2e598e507365591a215184" translate="yes" xml:space="preserve">
          <source>ast.File.Pos()</source>
          <target state="translated">ast.File.Pos()</target>
        </trans-unit>
        <trans-unit id="6fc04c6e8365c1e2a348b8d85aea6af30f73a3e7" translate="yes" xml:space="preserve">
          <source>ast.FileExports()</source>
          <target state="translated">ast.FileExports()</target>
        </trans-unit>
        <trans-unit id="515afaadbe65dbb56510d1001b0cea4fb212985a" translate="yes" xml:space="preserve">
          <source>ast.Filter</source>
          <target state="translated">ast.Filter</target>
        </trans-unit>
        <trans-unit id="725c1315b64f2159e1d535cc17c67990c3eb9407" translate="yes" xml:space="preserve">
          <source>ast.FilterDecl()</source>
          <target state="translated">ast.FilterDecl()</target>
        </trans-unit>
        <trans-unit id="9b23fe99e5e78579edea9b2685c0beef40fc5bdf" translate="yes" xml:space="preserve">
          <source>ast.FilterFile()</source>
          <target state="translated">ast.FilterFile()</target>
        </trans-unit>
        <trans-unit id="d0077c13020f893bea04504e4f7edbf31c696173" translate="yes" xml:space="preserve">
          <source>ast.FilterPackage()</source>
          <target state="translated">ast.FilterPackage()</target>
        </trans-unit>
        <trans-unit id="010df2eadbc0b289bbb3ed3dfe1f015c9eaf7589" translate="yes" xml:space="preserve">
          <source>ast.ForStmt</source>
          <target state="translated">ast.ForStmt</target>
        </trans-unit>
        <trans-unit id="7bec230190c220ed154122611c547a4ee061a0d9" translate="yes" xml:space="preserve">
          <source>ast.ForStmt.End()</source>
          <target state="translated">ast.ForStmt.End()</target>
        </trans-unit>
        <trans-unit id="ce1b26151d92491e06fabf1a68f974b70dd064b2" translate="yes" xml:space="preserve">
          <source>ast.ForStmt.Pos()</source>
          <target state="translated">ast.ForStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="9e23cc076f7fa7c25511d66eeb511d7de3fa35f8" translate="yes" xml:space="preserve">
          <source>ast.Fprint()</source>
          <target state="translated">ast.Fprint()</target>
        </trans-unit>
        <trans-unit id="bff7cf7e949bd5b1d09817c599f73bf69122daad" translate="yes" xml:space="preserve">
          <source>ast.FuncDecl</source>
          <target state="translated">ast.FuncDecl</target>
        </trans-unit>
        <trans-unit id="62fa27f1159e359248a085d818004bac79095e10" translate="yes" xml:space="preserve">
          <source>ast.FuncDecl.End()</source>
          <target state="translated">ast.FuncDecl.End()</target>
        </trans-unit>
        <trans-unit id="ca288db889162827b386d6cf407850d0256d0306" translate="yes" xml:space="preserve">
          <source>ast.FuncDecl.Pos()</source>
          <target state="translated">ast.FuncDecl.Pos()</target>
        </trans-unit>
        <trans-unit id="eaa722591c8d3bb5ec7c07884ae4d044acd81acd" translate="yes" xml:space="preserve">
          <source>ast.FuncLit</source>
          <target state="translated">ast.FuncLit</target>
        </trans-unit>
        <trans-unit id="76e1942fbc8f515400fb974985257f1f150278b2" translate="yes" xml:space="preserve">
          <source>ast.FuncLit.End()</source>
          <target state="translated">ast.FuncLit.End()</target>
        </trans-unit>
        <trans-unit id="cf7a4f37978363b411c184f235404cf42419323e" translate="yes" xml:space="preserve">
          <source>ast.FuncLit.Pos()</source>
          <target state="translated">ast.FuncLit.Pos()</target>
        </trans-unit>
        <trans-unit id="77ef0acfcbf1e91989489e4b465f7749a502cee2" translate="yes" xml:space="preserve">
          <source>ast.FuncType</source>
          <target state="translated">ast.FuncType</target>
        </trans-unit>
        <trans-unit id="8bef62cd074cbb9b8bb549f7f37fdd4c9556cec9" translate="yes" xml:space="preserve">
          <source>ast.FuncType.End()</source>
          <target state="translated">ast.FuncType.End()</target>
        </trans-unit>
        <trans-unit id="4f06513dc949b59ca3fe6fb82cf436d570af99bc" translate="yes" xml:space="preserve">
          <source>ast.FuncType.Pos()</source>
          <target state="translated">ast.FuncType.Pos()</target>
        </trans-unit>
        <trans-unit id="49e3462052836776f7475e211320d9c2f0839757" translate="yes" xml:space="preserve">
          <source>ast.GenDecl</source>
          <target state="translated">ast.GenDecl</target>
        </trans-unit>
        <trans-unit id="df8f73ecfd0e7618f102077a8d04eadb08d8aae2" translate="yes" xml:space="preserve">
          <source>ast.GenDecl.End()</source>
          <target state="translated">ast.GenDecl.End()</target>
        </trans-unit>
        <trans-unit id="ec91647151e8a76006d16cb06b8e4e4fa790d995" translate="yes" xml:space="preserve">
          <source>ast.GenDecl.Pos()</source>
          <target state="translated">ast.GenDecl.Pos()</target>
        </trans-unit>
        <trans-unit id="7c40561ab6c64f38a088066a7a0d84b95a7ca19b" translate="yes" xml:space="preserve">
          <source>ast.GoStmt</source>
          <target state="translated">ast.GoStmt</target>
        </trans-unit>
        <trans-unit id="c367671365811674fb44775dd6b4f6d17871b617" translate="yes" xml:space="preserve">
          <source>ast.GoStmt.End()</source>
          <target state="translated">ast.GoStmt.End()</target>
        </trans-unit>
        <trans-unit id="75c800281efd0cbeb0f676a13fbb76dc6b040afc" translate="yes" xml:space="preserve">
          <source>ast.GoStmt.Pos()</source>
          <target state="translated">ast.GoStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="b593a228205ecc5da27ea376c37c8b0feb887b3c" translate="yes" xml:space="preserve">
          <source>ast.Ident</source>
          <target state="translated">ast.Ident</target>
        </trans-unit>
        <trans-unit id="90b434e4582522ff9fdc5e749f4a807e629845d4" translate="yes" xml:space="preserve">
          <source>ast.Ident.End()</source>
          <target state="translated">ast.Ident.End()</target>
        </trans-unit>
        <trans-unit id="330869bf46f759ab5b34542ae5e64e2a8e6d7acb" translate="yes" xml:space="preserve">
          <source>ast.Ident.IsExported()</source>
          <target state="translated">ast.Ident.IsExported()</target>
        </trans-unit>
        <trans-unit id="5880d5cb49703e46da66c8a8df06d571ca83c5a1" translate="yes" xml:space="preserve">
          <source>ast.Ident.Pos()</source>
          <target state="translated">ast.Ident.Pos()</target>
        </trans-unit>
        <trans-unit id="379a5baec0aec6967ea9fdc9a921d6518c56bfab" translate="yes" xml:space="preserve">
          <source>ast.Ident.String()</source>
          <target state="translated">ast.Ident.String()</target>
        </trans-unit>
        <trans-unit id="e8b32504ea1616bed57b72a615485e6c5bcf3eb4" translate="yes" xml:space="preserve">
          <source>ast.IfStmt</source>
          <target state="translated">ast.IfStmt</target>
        </trans-unit>
        <trans-unit id="178670415eb055924ac40df950534ad2e2cfb177" translate="yes" xml:space="preserve">
          <source>ast.IfStmt.End()</source>
          <target state="translated">ast.IfStmt.End()</target>
        </trans-unit>
        <trans-unit id="3168e394231032c60de9860d2f24dcdcf6b63f8e" translate="yes" xml:space="preserve">
          <source>ast.IfStmt.Pos()</source>
          <target state="translated">ast.IfStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="bfcf544bdc28ccecfe31d3153402dfc7ba3c84e8" translate="yes" xml:space="preserve">
          <source>ast.ImportSpec</source>
          <target state="translated">ast.ImportSpec</target>
        </trans-unit>
        <trans-unit id="6520064d174144509bdcbce66766ec930bfa8221" translate="yes" xml:space="preserve">
          <source>ast.ImportSpec.End()</source>
          <target state="translated">ast.ImportSpec.End()</target>
        </trans-unit>
        <trans-unit id="1685b88851dbb057469baaa190bd21d978cbe0bc" translate="yes" xml:space="preserve">
          <source>ast.ImportSpec.Pos()</source>
          <target state="translated">ast.ImportSpec.Pos()</target>
        </trans-unit>
        <trans-unit id="9550a9427b344b71e40dd82d19c601c869a4d9cf" translate="yes" xml:space="preserve">
          <source>ast.Importer</source>
          <target state="translated">ast.Importer</target>
        </trans-unit>
        <trans-unit id="e2409ba06fc76d3584c545f92f449b798355f6f0" translate="yes" xml:space="preserve">
          <source>ast.IncDecStmt</source>
          <target state="translated">ast.IncDecStmt</target>
        </trans-unit>
        <trans-unit id="c525b2e381256702c099bdbe34dc9ce4f6ac65c9" translate="yes" xml:space="preserve">
          <source>ast.IncDecStmt.End()</source>
          <target state="translated">ast.IncDecStmt.End()</target>
        </trans-unit>
        <trans-unit id="035fb511709238ab8b28e76ac438ffe702de2d43" translate="yes" xml:space="preserve">
          <source>ast.IncDecStmt.Pos()</source>
          <target state="translated">ast.IncDecStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="b0307e9b16d106daf0b035e58376cabbc9e6926c" translate="yes" xml:space="preserve">
          <source>ast.IndexExpr</source>
          <target state="translated">ast.IndexExpr</target>
        </trans-unit>
        <trans-unit id="ba7fa4f2659716219910cf4d2905f1a1b287fc30" translate="yes" xml:space="preserve">
          <source>ast.IndexExpr.End()</source>
          <target state="translated">ast.IndexExpr.End()</target>
        </trans-unit>
        <trans-unit id="2bd354950c6821edaad7739a8fcba724b547e4fa" translate="yes" xml:space="preserve">
          <source>ast.IndexExpr.Pos()</source>
          <target state="translated">ast.IndexExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="369af34cd5ed40ef9cb2e2c7caefd90a2a428e6c" translate="yes" xml:space="preserve">
          <source>ast.Inspect()</source>
          <target state="translated">ast.Inspect()</target>
        </trans-unit>
        <trans-unit id="25ee0d24e4bdefca08baba42c5b499bef2631939" translate="yes" xml:space="preserve">
          <source>ast.InterfaceType</source>
          <target state="translated">ast.InterfaceType</target>
        </trans-unit>
        <trans-unit id="e7f5beaab84d5a400eb7088597b485d9c2b81693" translate="yes" xml:space="preserve">
          <source>ast.InterfaceType.End()</source>
          <target state="translated">ast.InterfaceType.End()</target>
        </trans-unit>
        <trans-unit id="9d487418673ccb980bc30730b740aa18ffd002e0" translate="yes" xml:space="preserve">
          <source>ast.InterfaceType.Pos()</source>
          <target state="translated">ast.InterfaceType.Pos()</target>
        </trans-unit>
        <trans-unit id="faf203ccf1d8661b112ef0afb394d238113f79de" translate="yes" xml:space="preserve">
          <source>ast.IsExported()</source>
          <target state="translated">ast.IsExported()</target>
        </trans-unit>
        <trans-unit id="f6e29963cd47848646766055861fb753020b2381" translate="yes" xml:space="preserve">
          <source>ast.KeyValueExpr</source>
          <target state="translated">ast.KeyValueExpr</target>
        </trans-unit>
        <trans-unit id="676038a7674ff4180b98b9c95d7f00e44e5ff675" translate="yes" xml:space="preserve">
          <source>ast.KeyValueExpr.End()</source>
          <target state="translated">ast.KeyValueExpr.End()</target>
        </trans-unit>
        <trans-unit id="a7f2488b03dc9603b5fb5ade012894c27963a348" translate="yes" xml:space="preserve">
          <source>ast.KeyValueExpr.Pos()</source>
          <target state="translated">ast.KeyValueExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="d578e8b479cd8e3a67f7d13b952dbdca8d433665" translate="yes" xml:space="preserve">
          <source>ast.LabeledStmt</source>
          <target state="translated">ast.LabeledStmt</target>
        </trans-unit>
        <trans-unit id="f9fd73232548487ac9de1e96e0d63c270ef3ed95" translate="yes" xml:space="preserve">
          <source>ast.LabeledStmt.End()</source>
          <target state="translated">ast.LabeledStmt.End()</target>
        </trans-unit>
        <trans-unit id="b995ca7a0e7388a2d44edaed5a861f6522bc498f" translate="yes" xml:space="preserve">
          <source>ast.LabeledStmt.Pos()</source>
          <target state="translated">ast.LabeledStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="df9495e93abd4f028fe83b85ec5d23acf6607070" translate="yes" xml:space="preserve">
          <source>ast.MapType</source>
          <target state="translated">ast.MapType</target>
        </trans-unit>
        <trans-unit id="7dcd2d302ff7af724275f98b21395263c7226284" translate="yes" xml:space="preserve">
          <source>ast.MapType.End()</source>
          <target state="translated">ast.MapType.End()</target>
        </trans-unit>
        <trans-unit id="b276b6e6eb9e5e3cc5b5890b552ee1d81c6c3143" translate="yes" xml:space="preserve">
          <source>ast.MapType.Pos()</source>
          <target state="translated">ast.MapType.Pos()</target>
        </trans-unit>
        <trans-unit id="ed54ab4ffb1b7117db7ec8c11c2036e13aa354f4" translate="yes" xml:space="preserve">
          <source>ast.MergeMode</source>
          <target state="translated">ast.MergeMode</target>
        </trans-unit>
        <trans-unit id="8a4a1c271018958b6131692bf9772b17140ab60d" translate="yes" xml:space="preserve">
          <source>ast.MergePackageFiles()</source>
          <target state="translated">ast.MergePackageFiles()</target>
        </trans-unit>
        <trans-unit id="d69af0e77986430aeba3a0af081860fe115b6cb4" translate="yes" xml:space="preserve">
          <source>ast.NewCommentMap()</source>
          <target state="translated">ast.NewCommentMap()</target>
        </trans-unit>
        <trans-unit id="5129de288f81e4c27120a9f4a90516ac8d4b5f34" translate="yes" xml:space="preserve">
          <source>ast.NewIdent()</source>
          <target state="translated">ast.NewIdent()</target>
        </trans-unit>
        <trans-unit id="c06ec5f816ad3b7780a18100eac31a6eaf527921" translate="yes" xml:space="preserve">
          <source>ast.NewObj()</source>
          <target state="translated">ast.NewObj()</target>
        </trans-unit>
        <trans-unit id="2b4163acf274523447a3956d93acc0e5781621e5" translate="yes" xml:space="preserve">
          <source>ast.NewPackage()</source>
          <target state="translated">ast.NewPackage()</target>
        </trans-unit>
        <trans-unit id="3b2efbff7f108d5a3dd7383a2f0e3a22b96a0b95" translate="yes" xml:space="preserve">
          <source>ast.NewScope()</source>
          <target state="translated">ast.NewScope()</target>
        </trans-unit>
        <trans-unit id="0adb216e4d94a3ee5529c0e5a9c370f04452e1a6" translate="yes" xml:space="preserve">
          <source>ast.Node</source>
          <target state="translated">ast.Node</target>
        </trans-unit>
        <trans-unit id="623b088bf971f65916f212c72e905cba2b1e8069" translate="yes" xml:space="preserve">
          <source>ast.NotNilFilter()</source>
          <target state="translated">ast.NotNilFilter()</target>
        </trans-unit>
        <trans-unit id="c8b5e6f4a48dae1e13b59cf334752c12dc83b6cf" translate="yes" xml:space="preserve">
          <source>ast.ObjKind</source>
          <target state="translated">ast.ObjKind</target>
        </trans-unit>
        <trans-unit id="f5c5c8806d07aa2e15518741ee67e202bf7dc08f" translate="yes" xml:space="preserve">
          <source>ast.ObjKind.String()</source>
          <target state="translated">ast.ObjKind.String()</target>
        </trans-unit>
        <trans-unit id="bae83b15a576524838f52dbcd6b8b9af033fbbc3" translate="yes" xml:space="preserve">
          <source>ast.Object</source>
          <target state="translated">ast.Object</target>
        </trans-unit>
        <trans-unit id="f9e118af1e4c93586afaf493c284454a19e8b2c2" translate="yes" xml:space="preserve">
          <source>ast.Object.Pos()</source>
          <target state="translated">ast.Object.Pos()</target>
        </trans-unit>
        <trans-unit id="567486dd6cb64bbe9c3106e27aeb037e6d45db3a" translate="yes" xml:space="preserve">
          <source>ast.Package</source>
          <target state="translated">ast.Package</target>
        </trans-unit>
        <trans-unit id="6e7c36460bfe0ea5135ce8fd31205777d5d60c12" translate="yes" xml:space="preserve">
          <source>ast.Package.End()</source>
          <target state="translated">ast.Package.End()</target>
        </trans-unit>
        <trans-unit id="ee7f2c2f5781253733dea51da1d4e081a9748e4c" translate="yes" xml:space="preserve">
          <source>ast.Package.Pos()</source>
          <target state="translated">ast.Package.Pos()</target>
        </trans-unit>
        <trans-unit id="9de5513df1193074b34ab02d7da8cb4e741796b1" translate="yes" xml:space="preserve">
          <source>ast.PackageExports()</source>
          <target state="translated">ast.PackageExports()</target>
        </trans-unit>
        <trans-unit id="139f231cb638880028d85320734757527c82ac60" translate="yes" xml:space="preserve">
          <source>ast.ParenExpr</source>
          <target state="translated">ast.ParenExpr</target>
        </trans-unit>
        <trans-unit id="d126b416ff09631be4e4c4f6c8d43bf9f7f3839b" translate="yes" xml:space="preserve">
          <source>ast.ParenExpr.End()</source>
          <target state="translated">ast.ParenExpr.End()</target>
        </trans-unit>
        <trans-unit id="04e88d4d23aafe693674ecc9cfe48d7a6c2cd129" translate="yes" xml:space="preserve">
          <source>ast.ParenExpr.Pos()</source>
          <target state="translated">ast.ParenExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="fed56f5a529bbbdad3be7095347db89f91335f9e" translate="yes" xml:space="preserve">
          <source>ast.Print()</source>
          <target state="translated">ast.Print()</target>
        </trans-unit>
        <trans-unit id="ca1f91b57c98735d5e2724adaa27b0d01a506579" translate="yes" xml:space="preserve">
          <source>ast.RangeStmt</source>
          <target state="translated">ast.RangeStmt</target>
        </trans-unit>
        <trans-unit id="2b3df827347af65c5220ad0699cabf973a66c936" translate="yes" xml:space="preserve">
          <source>ast.RangeStmt.End()</source>
          <target state="translated">ast.RangeStmt.End()</target>
        </trans-unit>
        <trans-unit id="405f7515494c4809d791b345db37d8cd690219d6" translate="yes" xml:space="preserve">
          <source>ast.RangeStmt.Pos()</source>
          <target state="translated">ast.RangeStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="5fc9b43eecceb9d8865e778bc56693be1bd04af5" translate="yes" xml:space="preserve">
          <source>ast.ReturnStmt</source>
          <target state="translated">ast.ReturnStmt</target>
        </trans-unit>
        <trans-unit id="3acfc24d47f39c0c780bdb543aee8a14e2f6b398" translate="yes" xml:space="preserve">
          <source>ast.ReturnStmt.End()</source>
          <target state="translated">ast.ReturnStmt.End()</target>
        </trans-unit>
        <trans-unit id="b25c08db40485d577c3cf52a7df5652307cfd082" translate="yes" xml:space="preserve">
          <source>ast.ReturnStmt.Pos()</source>
          <target state="translated">ast.ReturnStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="3c4f3fcf698e11ad4ef0d1d860bc42d79c1d6335" translate="yes" xml:space="preserve">
          <source>ast.Scope</source>
          <target state="translated">ast.Scope</target>
        </trans-unit>
        <trans-unit id="a7f2353ab10d058df49025107d7f80776e4b06c2" translate="yes" xml:space="preserve">
          <source>ast.Scope.Insert()</source>
          <target state="translated">ast.Scope.Insert()</target>
        </trans-unit>
        <trans-unit id="f14b79f9fc6e1ae02e48c6c9b700065f052bd6ff" translate="yes" xml:space="preserve">
          <source>ast.Scope.Lookup()</source>
          <target state="translated">ast.Scope.Lookup()</target>
        </trans-unit>
        <trans-unit id="5b95cd8378b36dac9f7e271f67bf4ced58ac82b6" translate="yes" xml:space="preserve">
          <source>ast.Scope.String()</source>
          <target state="translated">ast.Scope.String()</target>
        </trans-unit>
        <trans-unit id="6ffc6174e0346c5eb0bd447799e285ceb2b67a7a" translate="yes" xml:space="preserve">
          <source>ast.SelectStmt</source>
          <target state="translated">ast.SelectStmt</target>
        </trans-unit>
        <trans-unit id="94ada0a282cd66c315cedca378236abe2b55e42b" translate="yes" xml:space="preserve">
          <source>ast.SelectStmt.End()</source>
          <target state="translated">ast.SelectStmt.End()</target>
        </trans-unit>
        <trans-unit id="60ab7074daf140138b422f554ad2e121cb70a88e" translate="yes" xml:space="preserve">
          <source>ast.SelectStmt.Pos()</source>
          <target state="translated">ast.SelectStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="9fd58c075f3747285b6e7d6b057656caea4dfb15" translate="yes" xml:space="preserve">
          <source>ast.SelectorExpr</source>
          <target state="translated">ast.SelectorExpr</target>
        </trans-unit>
        <trans-unit id="aab656a4e3befeb695f9c09da789411215f9e81c" translate="yes" xml:space="preserve">
          <source>ast.SelectorExpr.End()</source>
          <target state="translated">ast.SelectorExpr.End()</target>
        </trans-unit>
        <trans-unit id="e24ee60e56bdb1d72f60635d1abb6a7fe6b3489c" translate="yes" xml:space="preserve">
          <source>ast.SelectorExpr.Pos()</source>
          <target state="translated">ast.SelectorExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="e09be7cece8df7fea15336136ca6cd2b20b01ea0" translate="yes" xml:space="preserve">
          <source>ast.SendStmt</source>
          <target state="translated">ast.SendStmt</target>
        </trans-unit>
        <trans-unit id="8d8cfca6d27eb8024cf957aa9aab02ceb80f2a96" translate="yes" xml:space="preserve">
          <source>ast.SendStmt.End()</source>
          <target state="translated">ast.SendStmt.End()</target>
        </trans-unit>
        <trans-unit id="3cd30925ad3333b551bee09d78fdd41c6a5ce183" translate="yes" xml:space="preserve">
          <source>ast.SendStmt.Pos()</source>
          <target state="translated">ast.SendStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="939932c50298b92117488c46251f13b11e7b47b9" translate="yes" xml:space="preserve">
          <source>ast.SliceExpr</source>
          <target state="translated">ast.SliceExpr</target>
        </trans-unit>
        <trans-unit id="f849fa118f03aa5fc3b7c517d60e19956c2dc69a" translate="yes" xml:space="preserve">
          <source>ast.SliceExpr.End()</source>
          <target state="translated">ast.SliceExpr.End()</target>
        </trans-unit>
        <trans-unit id="66822f43b70f862fe3d114dea48400685c5ea7be" translate="yes" xml:space="preserve">
          <source>ast.SliceExpr.Pos()</source>
          <target state="translated">ast.SliceExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="4c2d369f7096af0d255334de26cf26af744bd73e" translate="yes" xml:space="preserve">
          <source>ast.SortImports()</source>
          <target state="translated">ast.SortImports()</target>
        </trans-unit>
        <trans-unit id="b05c11f1a97da11082ad9d609677eabadfeb85a6" translate="yes" xml:space="preserve">
          <source>ast.Spec</source>
          <target state="translated">ast.Spec</target>
        </trans-unit>
        <trans-unit id="647bd402923d8756230898c1ba5e288311b035c1" translate="yes" xml:space="preserve">
          <source>ast.StarExpr</source>
          <target state="translated">ast.StarExpr</target>
        </trans-unit>
        <trans-unit id="1964d6b8d522047a124104e27818c8e2359c3692" translate="yes" xml:space="preserve">
          <source>ast.StarExpr.End()</source>
          <target state="translated">ast.StarExpr.End()</target>
        </trans-unit>
        <trans-unit id="50986ca8f36ea9c3fa33e8b919d7f85757eac03f" translate="yes" xml:space="preserve">
          <source>ast.StarExpr.Pos()</source>
          <target state="translated">ast.StarExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="86f0f7a23d86131b9800aa9a989271077f20efab" translate="yes" xml:space="preserve">
          <source>ast.Stmt</source>
          <target state="translated">ast.Stmt</target>
        </trans-unit>
        <trans-unit id="b0dd6f652568d7067080d2ca2b56d2c88a8de03e" translate="yes" xml:space="preserve">
          <source>ast.StructType</source>
          <target state="translated">ast.StructType</target>
        </trans-unit>
        <trans-unit id="1e930ddc8c4a5774d8053572f446cfe1f98baf5e" translate="yes" xml:space="preserve">
          <source>ast.StructType.End()</source>
          <target state="translated">ast.StructType.End()</target>
        </trans-unit>
        <trans-unit id="974d34f27a1b29932a04081b3b62b729e35d50ad" translate="yes" xml:space="preserve">
          <source>ast.StructType.Pos()</source>
          <target state="translated">ast.StructType.Pos()</target>
        </trans-unit>
        <trans-unit id="3bfefae46bec9a84aa0dcdec1fdb96fe9e8dc5e9" translate="yes" xml:space="preserve">
          <source>ast.SwitchStmt</source>
          <target state="translated">ast.SwitchStmt</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
