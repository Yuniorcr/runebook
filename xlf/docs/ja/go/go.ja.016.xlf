<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="00e536d9678689f1998347d86a28019761f74bb5" translate="yes" xml:space="preserve">
          <source>func (s *ReturnStmt) Pos() token.Pos</source>
          <target state="translated">func (s *ReturnStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="ff2faba5afd792190c5b97c69d2aa4a5ff511741" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Buffer(buf []byte, max int)</source>
          <target state="translated">func (s *Scanner)Buffer(buf []byte,max int)</target>
        </trans-unit>
        <trans-unit id="4256c716320bdddb6b3094c4cbc800757215c086" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Bytes() []byte</source>
          <target state="translated">func (s *Scanner)Bytes()[]バイト</target>
        </trans-unit>
        <trans-unit id="3d087dfe09d4c778f198041085394ca953e7ed6b" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Err() error</source>
          <target state="translated">func (s *Scanner)Err()エラー</target>
        </trans-unit>
        <trans-unit id="e2443b9e786fe191e95d7a44f0f7dbf60f00d1c3" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Init(file *token.File, src []byte, err ErrorHandler, mode Mode)</source>
          <target state="translated">func (s *Scanner)Init(file *token.File,src []byte,err ErrorHandler,mode Mode)</target>
        </trans-unit>
        <trans-unit id="2e3448f25f61eee4f32d85e6e2108a92468a6b49" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Init(src io.Reader) *Scanner</source>
          <target state="translated">func (s *Scanner)Init(src io.Reader)*Scanner</target>
        </trans-unit>
        <trans-unit id="fb1fa2826ccfe50c306f7cbf00344fb7dae04cfa" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Next() rune</source>
          <target state="translated">func (s *Scanner)Next()ルーン</target>
        </trans-unit>
        <trans-unit id="a765ebfb39ea57154e82e6905539bce4930a9f6b" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Peek() rune</source>
          <target state="translated">func (s *Scanner)Peek()ルーン</target>
        </trans-unit>
        <trans-unit id="7851d3a8f1e45f461f784fad018ee19ee2d34928" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Pos() (pos Position)</source>
          <target state="translated">func (s *Scanner)Pos()(pos Position)</target>
        </trans-unit>
        <trans-unit id="93bef72e1fc15d872ffce967db4d091da170348c" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Scan() (pos token.Pos, tok token.Token, lit string)</source>
          <target state="translated">func (s *Scanner)Scan()(pos token.Pos,tok token.Token,lit string)</target>
        </trans-unit>
        <trans-unit id="598d997c987e0d97e07d06ff3dbb70c6f58f854d" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Scan() bool</source>
          <target state="translated">func(s *Scanner)Scan()bool</target>
        </trans-unit>
        <trans-unit id="d25f3c21a2b8bb12eee8ecfb12298683fa39130b" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Scan() rune</source>
          <target state="translated">func(s *Scanner)Scan()rune</target>
        </trans-unit>
        <trans-unit id="29c59815f3c0973f8a359580f07d76661220cb1a" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Split(split SplitFunc)</source>
          <target state="translated">func(s *Scanner)Split(split SplitFunc)</target>
        </trans-unit>
        <trans-unit id="8548269e1304850f105b0856cfd731482d001fe7" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) Text() string</source>
          <target state="translated">func (s *Scanner)Text()文字列</target>
        </trans-unit>
        <trans-unit id="9128245d17f083ff722f5dd2eb01c8d679e1cd03" translate="yes" xml:space="preserve">
          <source>func (s *Scanner) TokenText() string</source>
          <target state="translated">func (s *Scanner)TokenText()文字列</target>
        </trans-unit>
        <trans-unit id="9ba6d515802aacad7c4d9c17859c8c1ec76cf7a6" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Child(i int) *Scope</source>
          <target state="translated">func (s *Scope)Child(i int)*Scope</target>
        </trans-unit>
        <trans-unit id="8c535300d781da030d96c14e4f45a3f9eb0f597d" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Contains(pos token.Pos) bool</source>
          <target state="translated">func (s *Scope)Contains(pos token.Pos)bool</target>
        </trans-unit>
        <trans-unit id="107e87909c02fef70c1d0835d79ae922f5e88fb5" translate="yes" xml:space="preserve">
          <source>func (s *Scope) End() token.Pos</source>
          <target state="translated">func(s *Scope)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="118dd6b9ae5534d89064837326e6a6352007c61a" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Innermost(pos token.Pos) *Scope</source>
          <target state="translated">func(s *Scope)Innermost(pos token.Pos)*Scope</target>
        </trans-unit>
        <trans-unit id="f3ee6aaca3abd1a8b94a4ff80a05d15ac8a45268" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Insert(obj *Object) (alt *Object)</source>
          <target state="translated">func (s *Scope)Insert(obj *Object)(alt *Object)</target>
        </trans-unit>
        <trans-unit id="e2ca27dee9588f9063a7ede8db1fbce2b2816043" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Insert(obj Object) Object</source>
          <target state="translated">func (s *Scope)Insert(obj Object)オブジェクト</target>
        </trans-unit>
        <trans-unit id="c138642de63ef7a2fe258f3401e8875c3a62ba1a" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Len() int</source>
          <target state="translated">func (s *Scope)Len()int</target>
        </trans-unit>
        <trans-unit id="adc8bd3f90e0a15c5f4531fd9dc841ef3535b40f" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Lookup(name string) *Object</source>
          <target state="translated">func (s *Scope)Lookup(name string)*Object</target>
        </trans-unit>
        <trans-unit id="ff35977b05859cb4d257f66091ae013767da2d4e" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Lookup(name string) Object</source>
          <target state="translated">func (s *Scope)Lookup(name string)オブジェクト</target>
        </trans-unit>
        <trans-unit id="5cb45982523d1a1a93fd6552c7b6ca7925263b2f" translate="yes" xml:space="preserve">
          <source>func (s *Scope) LookupParent(name string, pos token.Pos) (*Scope, Object)</source>
          <target state="translated">func (s *Scope)LookupParent(name string,pos token.Pos)(*Scope,Object)</target>
        </trans-unit>
        <trans-unit id="e4431c2cd8ca9fc783f4cf94bc05d6238ff43bad" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Names() []string</source>
          <target state="translated">func (s *Scope)Names()[]文字列</target>
        </trans-unit>
        <trans-unit id="c3cf7007c9aae58ca10e6e04fd4dad0ecc025b9b" translate="yes" xml:space="preserve">
          <source>func (s *Scope) NumChildren() int</source>
          <target state="translated">func (s *Scope)NumChildren()int</target>
        </trans-unit>
        <trans-unit id="a745360a580340e756684d944ac0d61d5ce609d3" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Parent() *Scope</source>
          <target state="translated">func (s *Scope)Parent()*Scope</target>
        </trans-unit>
        <trans-unit id="db4f05c139c0b08d5b2f11c8e244634c353d2320" translate="yes" xml:space="preserve">
          <source>func (s *Scope) Pos() token.Pos</source>
          <target state="translated">func(s *Scope)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="5a157b682f800fa4d38b5835a6cf6cb0a257d813" translate="yes" xml:space="preserve">
          <source>func (s *Scope) String() string</source>
          <target state="translated">func(s *Scope)String()文字列</target>
        </trans-unit>
        <trans-unit id="ee881595f1794ffbbe778b2225f10fc831cee634" translate="yes" xml:space="preserve">
          <source>func (s *Scope) WriteTo(w io.Writer, n int, recurse bool)</source>
          <target state="translated">func (s *Scope)WriteTo(w io.Writer,n int,recurse bool)</target>
        </trans-unit>
        <trans-unit id="cb4fdd5fc9dbc4aaba8239beba24d730bf0dcbd9" translate="yes" xml:space="preserve">
          <source>func (s *Section) Data() ([]byte, error)</source>
          <target state="translated">func (s *Section)Data()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="b70e3137c32056c37b6a2a298cec0691d5c5e7cc" translate="yes" xml:space="preserve">
          <source>func (s *Section) Open() io.ReadSeeker</source>
          <target state="translated">func (s *Section)Open()io.ReadSeeker</target>
        </trans-unit>
        <trans-unit id="b4a271597ed917ebca113c7dc50b452d9b02f7d9" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (s *SectionReader)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="1b3e31dbbc3c1e27ac5c4c63087d163bb0518c4e" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) ReadAt(p []byte, off int64) (n int, err error)</source>
          <target state="translated">func (s *SectionReader)ReadAt(p []byte,off int64)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="807a8e2e7b46405d059cf7cd0790cc875729ad47" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) Seek(offset int64, whence int) (int64, error)</source>
          <target state="translated">func (s *SectionReader)Seek(offset int64,whence int)(int64,error)</target>
        </trans-unit>
        <trans-unit id="8a7f9a9c7634e38dfd28b85d187c3235e9b64a94" translate="yes" xml:space="preserve">
          <source>func (s *SectionReader) Size() int64</source>
          <target state="translated">func (s *SectionReader)Size()int64</target>
        </trans-unit>
        <trans-unit id="3c04d5edb15164f244381bac1955e55b4438f5f4" translate="yes" xml:space="preserve">
          <source>func (s *Segment) Data() ([]byte, error)</source>
          <target state="translated">func (s *Segment)Data()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="965eb2d2c979b8ffb8dc11b0841fb3710ddaa07f" translate="yes" xml:space="preserve">
          <source>func (s *Segment) Open() io.ReadSeeker</source>
          <target state="translated">func (s *Segment)Open()io.ReadSeeker</target>
        </trans-unit>
        <trans-unit id="661b19cf89597084f105be51ae663556987f6835" translate="yes" xml:space="preserve">
          <source>func (s *SelectStmt) End() token.Pos</source>
          <target state="translated">func(s *SelectStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="8ba79958bd6517f41de6c9358eed831007fb2112" translate="yes" xml:space="preserve">
          <source>func (s *SelectStmt) Pos() token.Pos</source>
          <target state="translated">func (s *SelectStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="910dd7a786cf2fa35c19c45bd5c8a83488a4924a" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Index() []int</source>
          <target state="translated">func (s *Selection)Index()[]int</target>
        </trans-unit>
        <trans-unit id="6b1dda8934ee23cd2df90587ade86aa27193b3b5" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Indirect() bool</source>
          <target state="translated">func (s *Selection)Indirect()bool</target>
        </trans-unit>
        <trans-unit id="490f37e7cba798441ebadcbae5207158c8c20d4f" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Kind() SelectionKind</source>
          <target state="translated">func (s *Selection)Kind()SelectionKind</target>
        </trans-unit>
        <trans-unit id="1bbd374381c27271852dd346b2a6bf9c2f3b0c5c" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Obj() Object</source>
          <target state="translated">func (s *Selection)Obj()オブジェクト</target>
        </trans-unit>
        <trans-unit id="3626854d83fe78317cbec865c5e413fc015628e6" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Recv() Type</source>
          <target state="translated">func (s *Selection)Recv()型</target>
        </trans-unit>
        <trans-unit id="8061a5ae66d6debe715acb86da1973295f06497c" translate="yes" xml:space="preserve">
          <source>func (s *Selection) String() string</source>
          <target state="translated">func (s *Selection)String()文字列</target>
        </trans-unit>
        <trans-unit id="944aeed7f2a50d933985007b46874c0b3c2ba8d3" translate="yes" xml:space="preserve">
          <source>func (s *Selection) Type() Type</source>
          <target state="translated">func (s *Selection)Type()型</target>
        </trans-unit>
        <trans-unit id="759ef3f725f8b995cde5170f0ea0f59fd14cb106" translate="yes" xml:space="preserve">
          <source>func (s *SendStmt) End() token.Pos</source>
          <target state="translated">func(s *SendStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="fa5970ea53a067202f26a48c83539f997a109707" translate="yes" xml:space="preserve">
          <source>func (s *SendStmt) Pos() token.Pos</source>
          <target state="translated">func(s *SendStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="5bf51776c03f6bea259526c8b4299291328e249e" translate="yes" xml:space="preserve">
          <source>func (s *Server) Certificate() *x509.Certificate</source>
          <target state="translated">func (s *Server)Certificate()*x509.Certificate</target>
        </trans-unit>
        <trans-unit id="a05f4f9ce5d39dd996584a9c1940680dfb1de1e1" translate="yes" xml:space="preserve">
          <source>func (s *Server) Client() *http.Client</source>
          <target state="translated">func (s *Server)Client()*http.Client</target>
        </trans-unit>
        <trans-unit id="9516775a9e932669782e793a89400e2582ab33ea" translate="yes" xml:space="preserve">
          <source>func (s *Server) Close()</source>
          <target state="translated">func (s *Server)Close()</target>
        </trans-unit>
        <trans-unit id="80cc42f4ec36f60aed747d6547fc91d388236c0d" translate="yes" xml:space="preserve">
          <source>func (s *Server) CloseClientConnections()</source>
          <target state="translated">func (s *Server)CloseClientConnections()</target>
        </trans-unit>
        <trans-unit id="af7d09e22f6e3603b70bf7806dc26fa58bb42f11" translate="yes" xml:space="preserve">
          <source>func (s *Server) Start()</source>
          <target state="translated">func (s *Server)Start()</target>
        </trans-unit>
        <trans-unit id="170161aeb278530d9e180f39433b84445299b9ea" translate="yes" xml:space="preserve">
          <source>func (s *Server) StartTLS()</source>
          <target state="translated">func (s *Server)StartTLS()</target>
        </trans-unit>
        <trans-unit id="43bc2b876f254a590aa020efa283c34313a49629" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Params() *Tuple</source>
          <target state="translated">func (s *Signature)Params()*Tuple</target>
        </trans-unit>
        <trans-unit id="8e00cde63a54ef9e4575a698ff4550e6ba8964b2" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Recv() *Var</source>
          <target state="translated">func (s *Signature)Recv()*Var</target>
        </trans-unit>
        <trans-unit id="a2b7a8e1b465cc1a663e827290141b88c06af0ad" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Results() *Tuple</source>
          <target state="translated">func (s *Signature)結果()*Tuple</target>
        </trans-unit>
        <trans-unit id="0fd2b2c812f4e8f20311a6cb0ec1aa2c98c8ddde" translate="yes" xml:space="preserve">
          <source>func (s *Signature) String() string</source>
          <target state="translated">func (s *Signature)String()文字列</target>
        </trans-unit>
        <trans-unit id="8af6e5d46a272ff1ae1e20b5f251bc908b1b5896" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Underlying() Type</source>
          <target state="translated">func (s *Signature)Underlying()型</target>
        </trans-unit>
        <trans-unit id="68afa0c1d57f7b3b5c9d0e3ee0704b16ba22e7b0" translate="yes" xml:space="preserve">
          <source>func (s *Signature) Variadic() bool</source>
          <target state="translated">func (s *Signature)Variadic()bool</target>
        </trans-unit>
        <trans-unit id="dcbba31cd2ce6fcdcac714da569cc051c8ff834f" translate="yes" xml:space="preserve">
          <source>func (s *Slice) Elem() Type</source>
          <target state="translated">func (s *Slice)Elem()型</target>
        </trans-unit>
        <trans-unit id="d9f7e58f3f32ac76cf501e00b2be5696bc3c2641" translate="yes" xml:space="preserve">
          <source>func (s *Slice) String() string</source>
          <target state="translated">func (s *Slice)String()文字列</target>
        </trans-unit>
        <trans-unit id="0295e19a6617d567001144344a63086f87c221fa" translate="yes" xml:space="preserve">
          <source>func (s *Slice) Underlying() Type</source>
          <target state="translated">func (s *Slice)Underlying()型</target>
        </trans-unit>
        <trans-unit id="34e4885284d68b2a7b5679328396900098b864b3" translate="yes" xml:space="preserve">
          <source>func (s *StdSizes) Alignof(T Type) int64</source>
          <target state="translated">func (s *StdSizes)Alignof(T Type)int64</target>
        </trans-unit>
        <trans-unit id="85d58e53f6e6894ca499e45aa60db4655db2d49e" translate="yes" xml:space="preserve">
          <source>func (s *StdSizes) Offsetsof(fields []*Var) []int64</source>
          <target state="translated">func (s *StdSizes)Offsetsof(fields []*Var)[]int64</target>
        </trans-unit>
        <trans-unit id="2f3b1413f3df2723e162d8fc42e5066d3992791d" translate="yes" xml:space="preserve">
          <source>func (s *StdSizes) Sizeof(T Type) int64</source>
          <target state="translated">func (s *StdSizes)Sizeof(T Type)int64</target>
        </trans-unit>
        <trans-unit id="e54932cd6271704587c4089032e5044cdc19beef" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) Close() error</source>
          <target state="translated">func (s *Stmt)Close()エラー</target>
        </trans-unit>
        <trans-unit id="2c05bb44e01eb6eb12ae68429f8e6d7244bf7891" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) Exec(args ...interface{}) (Result, error)</source>
          <target state="translated">func (s *Stmt)Exec(args ...interface{})(Result,error)</target>
        </trans-unit>
        <trans-unit id="a9fd8d66324c8c6c361be744bd10fb47a3864ac4" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) ExecContext(ctx context.Context, args ...interface{}) (Result, error)</source>
          <target state="translated">func (s *Stmt)ExecContext(ctx context.Context,args ...interface{})(Result,error)</target>
        </trans-unit>
        <trans-unit id="5c3b111cb60a1d73938339ce5cac9ade229ff849" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) Query(args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (s *Stmt)Query(args ...interface{})(*Rows,error)</target>
        </trans-unit>
        <trans-unit id="3494204ba02128815155e92f970df2ad4b6390f9" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) QueryContext(ctx context.Context, args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (s *Stmt)QueryContext(ctx context.Context,args ...interface{})(*Rows,error)</target>
        </trans-unit>
        <trans-unit id="f83bdb1d8928dd77ae10774b4345dc5e9ca84fd2" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) QueryRow(args ...interface{}) *Row</source>
          <target state="translated">func (s *Stmt)QueryRow(args ...interface{})*Row</target>
        </trans-unit>
        <trans-unit id="3f65a79977b0eef4d322147cdd2c417bb803071f" translate="yes" xml:space="preserve">
          <source>func (s *Stmt) QueryRowContext(ctx context.Context, args ...interface{}) *Row</source>
          <target state="translated">func (s *Stmt)QueryRowContext(ctx context.Context,args ...interface{})*Row</target>
        </trans-unit>
        <trans-unit id="13a4c368d4c72891f3f2d38409dbc4b9865fd99b" translate="yes" xml:space="preserve">
          <source>func (s *StringNode) Copy() Node</source>
          <target state="translated">func (s *StringNode)Copy()ノード</target>
        </trans-unit>
        <trans-unit id="d8bc13a4c046c98ca7bbf03eda13ff6c06250382" translate="yes" xml:space="preserve">
          <source>func (s *StringNode) String() string</source>
          <target state="translated">func (s *StringNode)String()文字列</target>
        </trans-unit>
        <trans-unit id="a3cca7d11b6418398a21aa9dc7287e44a8c209ef" translate="yes" xml:space="preserve">
          <source>func (s *Struct) Field(i int) *Var</source>
          <target state="translated">func (s *Struct)フィールド(i int)*Var</target>
        </trans-unit>
        <trans-unit id="a037b538147beb845fbb434bfee694b050fa4d2f" translate="yes" xml:space="preserve">
          <source>func (s *Struct) NumFields() int</source>
          <target state="translated">func (s *Struct)NumFields()int</target>
        </trans-unit>
        <trans-unit id="d28e6d1772fcc1078eac75701497599da61230ed" translate="yes" xml:space="preserve">
          <source>func (s *Struct) String() string</source>
          <target state="translated">func (s *Struct)String()文字列</target>
        </trans-unit>
        <trans-unit id="ab967e308e61394e52a83f14064d9790117e170d" translate="yes" xml:space="preserve">
          <source>func (s *Struct) Tag(i int) string</source>
          <target state="translated">func (s *Struct)タグ(i int)文字列</target>
        </trans-unit>
        <trans-unit id="8bb28afd824db1fb1df02dd33221a83cbebf1c37" translate="yes" xml:space="preserve">
          <source>func (s *Struct) Underlying() Type</source>
          <target state="translated">func (s *Struct)Underlying()型</target>
        </trans-unit>
        <trans-unit id="f35724e4cc13fbe70e8e5a21f993a6bad7690ea9" translate="yes" xml:space="preserve">
          <source>func (s *SwitchStmt) End() token.Pos</source>
          <target state="translated">func (s *SwitchStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="02a5eb6fcfce8a3e19809c28417de02ad8b1eafd" translate="yes" xml:space="preserve">
          <source>func (s *SwitchStmt) Pos() token.Pos</source>
          <target state="translated">func (s *SwitchStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="1cba841131d67c353702df5b1782a4b6c967b4f5" translate="yes" xml:space="preserve">
          <source>func (s *Sym) BaseName() string</source>
          <target state="translated">func (s *Sym)BaseName()文字列</target>
        </trans-unit>
        <trans-unit id="c92ced76b16eb22b13b5d2db1bab3d5c76ebe666" translate="yes" xml:space="preserve">
          <source>func (s *Sym) PackageName() string</source>
          <target state="translated">func (s *Sym)PackageName()文字列</target>
        </trans-unit>
        <trans-unit id="fb14e41bfb5cf1b5c630b32f8bd2bf3280c9cb39" translate="yes" xml:space="preserve">
          <source>func (s *Sym) ReceiverName() string</source>
          <target state="translated">func (s *Sym)ReceiverName()文字列</target>
        </trans-unit>
        <trans-unit id="e2f438a0441249ef8979719acbd72cfd283c0d66" translate="yes" xml:space="preserve">
          <source>func (s *Sym) Static() bool</source>
          <target state="translated">func (s *Sym)Static()bool</target>
        </trans-unit>
        <trans-unit id="597b42e1457954523045b5b8ef9ca8d45314f2a7" translate="yes" xml:space="preserve">
          <source>func (s *TypeSpec) End() token.Pos</source>
          <target state="translated">func(s *TypeSpec)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="40d09f876359b79b33efb84b260dbece9ed1ed7a" translate="yes" xml:space="preserve">
          <source>func (s *TypeSpec) Pos() token.Pos</source>
          <target state="translated">func(s *TypeSpec)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e063a31e50df833dab5a5b25dd57b7d91c5d2536" translate="yes" xml:space="preserve">
          <source>func (s *TypeSwitchStmt) End() token.Pos</source>
          <target state="translated">func (s *TypeSwitchStmt)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="4da63dff666f390585a19cfb801525ef2568f323" translate="yes" xml:space="preserve">
          <source>func (s *TypeSwitchStmt) Pos() token.Pos</source>
          <target state="translated">func (s *TypeSwitchStmt)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="808395ad08fdf5dfe57bc270f96eb73b949f3eeb" translate="yes" xml:space="preserve">
          <source>func (s *ValueSpec) End() token.Pos</source>
          <target state="translated">func(s *ValueSpec)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="dd74c4545d95eb1da560a6347f086411a7195e3f" translate="yes" xml:space="preserve">
          <source>func (s *ValueSpec) Pos() token.Pos</source>
          <target state="translated">func (s *ValueSpec)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="a7159bcc05d90cdf7499a32cf28acde88c3240f0" translate="yes" xml:space="preserve">
          <source>func (s SetupError) Error() string</source>
          <target state="translated">func (s SetupError)エラー()文字列</target>
        </trans-unit>
        <trans-unit id="5e61ffc8bd19f1e8b08b39faeacb31be03d8ab4b" translate="yes" xml:space="preserve">
          <source>func (s Signal) Signal()</source>
          <target state="translated">ファンク</target>
        </trans-unit>
        <trans-unit id="e6555da15f990002cf4cbd10966b62bcfe25479c" translate="yes" xml:space="preserve">
          <source>func (s Signal) String() string</source>
          <target state="translated">func (s Signal)String()文字列</target>
        </trans-unit>
        <trans-unit id="56032feff25be457ab204550cf4aedf786706bdf" translate="yes" xml:space="preserve">
          <source>func (s StructuralError) Error() string</source>
          <target state="translated">ファンク(s StructuralError)エラー()文字列</target>
        </trans-unit>
        <trans-unit id="631d2ac76f45dc9965f2f82a72cf77b37e0b8c82" translate="yes" xml:space="preserve">
          <source>func (s YCbCrSubsampleRatio) String() string</source>
          <target state="translated">func (s YCbCrSubsampleRatio)String()文字列</target>
        </trans-unit>
        <trans-unit id="a577e0e8eb4eff828c33a431ee9599ed7374be55" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Close() error</source>
          <target state="translated">func (sc *ServerConn)Close()エラー</target>
        </trans-unit>
        <trans-unit id="e006de99bae35844da7dbeb3edd76b6c6f5524f8" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader)</source>
          <target state="translated">func (sc *ServerConn)Hijack()(net.Conn,*bufio.Reader)</target>
        </trans-unit>
        <trans-unit id="e6253ead05e3ce1a136a1789eb6915766c5815ef" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Pending() int</source>
          <target state="translated">func (sc *ServerConn)Pending()int</target>
        </trans-unit>
        <trans-unit id="c6ab5ce3274873d3442a8a0a57dea300f5683c56" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Read() (*http.Request, error)</source>
          <target state="translated">func (sc *ServerConn)Read()(*http.Request,error)</target>
        </trans-unit>
        <trans-unit id="ff253cb3bae0e2699c9e33ba3b5af2360155d16e" translate="yes" xml:space="preserve">
          <source>func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error</source>
          <target state="translated">func (sc *ServerConn)Write(req *http.Request,resp *http.Response)エラー</target>
        </trans-unit>
        <trans-unit id="dea7a1b9dacfbd89dafa9ee0f60b9df059ca0156" translate="yes" xml:space="preserve">
          <source>func (se SystemRootsError) Error() string</source>
          <target state="translated">func (se SystemRootsError)エラー()文字列</target>
        </trans-unit>
        <trans-unit id="6e7470d29c644dbd010579fc443ecd1dd7fa0d45" translate="yes" xml:space="preserve">
          <source>func (server *Server) Accept(lis net.Listener)</source>
          <target state="translated">func (server *Server)Accept(lis net.Listener)</target>
        </trans-unit>
        <trans-unit id="ca9fc6cf5c8fe3b40d4871e6592dc0d851b31c7a" translate="yes" xml:space="preserve">
          <source>func (server *Server) HandleHTTP(rpcPath, debugPath string)</source>
          <target state="translated">func (server *Server)HandleHTTP(rpcPath,debugPath string)</target>
        </trans-unit>
        <trans-unit id="ca30d0d7f3baf1f08ce0bad647e09dc7ad29ad32" translate="yes" xml:space="preserve">
          <source>func (server *Server) Register(rcvr interface{}) error</source>
          <target state="translated">func (server *Server)Register(rcvr interface{})エラー</target>
        </trans-unit>
        <trans-unit id="20d9ac34d3b4591356d88c213e4df740680c3d97" translate="yes" xml:space="preserve">
          <source>func (server *Server) RegisterName(name string, rcvr interface{}) error</source>
          <target state="translated">func (server *Server)RegisterName(name string,rcvr interface{})エラー</target>
        </trans-unit>
        <trans-unit id="e513a5585cf550da9baa6c848eebd27996ffa770" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeCodec(codec ServerCodec)</source>
          <target state="translated">func (server *Server)ServeCodec(codec ServerCodec)</target>
        </trans-unit>
        <trans-unit id="8ab0ce7cc1bd87f96dbf38daac1a29378903f1b3" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeConn(conn io.ReadWriteCloser)</source>
          <target state="translated">func (server *Server)ServeConn(conn io.ReadWriteCloser)</target>
        </trans-unit>
        <trans-unit id="77e5b018b10e5cfa8dc6170a3872eb0417558e49" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeHTTP(w http.ResponseWriter, req *http.Request)</source>
          <target state="translated">func (server *Server)ServeHTTP(w http.ResponseWriter,req *http.Request)</target>
        </trans-unit>
        <trans-unit id="65ba96e0404e164c5268ca0e30881ae561ea6a42" translate="yes" xml:space="preserve">
          <source>func (server *Server) ServeRequest(codec ServerCodec) error</source>
          <target state="translated">func (server *Server)ServeRequest(codec ServerCodec)エラー</target>
        </trans-unit>
        <trans-unit id="b8dca19bd5c08e24f6ad0bcc6fd8ccdf39c4c74b" translate="yes" xml:space="preserve">
          <source>func (special SpecialCase) ToLower(r rune) rune</source>
          <target state="translated">ファンク (特殊ケース)ToLower(r rune)ルーン</target>
        </trans-unit>
        <trans-unit id="462e8521451e06f4f8cc70bd0b03a4b80c22e564" translate="yes" xml:space="preserve">
          <source>func (special SpecialCase) ToTitle(r rune) rune</source>
          <target state="translated">ファンク(特殊ケース)ToTitle(r rune)rune</target>
        </trans-unit>
        <trans-unit id="bdd811e69e7ff6f82ee05658125f459d424a959a" translate="yes" xml:space="preserve">
          <source>func (special SpecialCase) ToUpper(r rune) rune</source>
          <target state="translated">ファンク (特殊ケース)ToUpper(r rune)ルーン</target>
        </trans-unit>
        <trans-unit id="4e77322643219862c25b1d04e6198af8e75bca74" translate="yes" xml:space="preserve">
          <source>func (srv *Server) Close() error</source>
          <target state="translated">func (srv *Server)Close()エラー</target>
        </trans-unit>
        <trans-unit id="ff755ef4ecfa09a11125a24e2900fd3fddd45a7d" translate="yes" xml:space="preserve">
          <source>func (srv *Server) ListenAndServe() error</source>
          <target state="translated">func (srv *Server)ListenAndServe()エラー</target>
        </trans-unit>
        <trans-unit id="73bd16efdb7ebf42da1ae44ad4da77e49c81221e" translate="yes" xml:space="preserve">
          <source>func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error</source>
          <target state="translated">func (srv *Server)ListenAndServeTLS(certFile,keyFile string)エラー</target>
        </trans-unit>
        <trans-unit id="be9111f9c466babd1657f2b875e044adc560db70" translate="yes" xml:space="preserve">
          <source>func (srv *Server) RegisterOnShutdown(f func())</source>
          <target state="translated">func (srv *Server)RegisterOnShutdown(f func()</target>
        </trans-unit>
        <trans-unit id="8ff5238d109105f91b11c87960b988ae4883978b" translate="yes" xml:space="preserve">
          <source>func (srv *Server) Serve(l net.Listener) error</source>
          <target state="translated">func (srv *server)Serve(l net.Listener)エラー</target>
        </trans-unit>
        <trans-unit id="9536f3703ec3db75aeda652b5c5feea068fd0623" translate="yes" xml:space="preserve">
          <source>func (srv *Server) ServeTLS(l net.Listener, certFile, keyFile string) error</source>
          <target state="translated">func (srv *Server)ServeTLS(l net.Listener,certFile,keyFile string)エラー</target>
        </trans-unit>
        <trans-unit id="e538f45ad9f7bab17a704f3646d2db9795ed706a" translate="yes" xml:space="preserve">
          <source>func (srv *Server) SetKeepAlivesEnabled(v bool)</source>
          <target state="translated">func (srv *Server)SetKeepAlivesEnabled(v bool)</target>
        </trans-unit>
        <trans-unit id="0964428e9f7c66ec5b0f3be7845d5485de8bd907" translate="yes" xml:space="preserve">
          <source>func (srv *Server) Shutdown(ctx context.Context) error</source>
          <target state="translated">func (srv *Server)Shutdown(ctx context.Context)エラー</target>
        </trans-unit>
        <trans-unit id="b20c2bc2515e7e98ee6466641a6f1155ba5d1274" translate="yes" xml:space="preserve">
          <source>func (st StringTable) String(start uint32) (string, error)</source>
          <target state="translated">func (st StringTable)String(start uint32)(string,error)</target>
        </trans-unit>
        <trans-unit id="99be80b6a27090a34eb584801e1a499c867e9def" translate="yes" xml:space="preserve">
          <source>func (sym *COFFSymbol) FullName(st StringTable) (string, error)</source>
          <target state="translated">func (symfony *COFFSymbol)FullName(st StringTable)(string,error)</target>
        </trans-unit>
        <trans-unit id="d868189ffd28b0013d827013416816fd0729cfc6" translate="yes" xml:space="preserve">
          <source>func (t *ArrayType) Size() int64</source>
          <target state="translated">func (t *ArrayType)Size()int64</target>
        </trans-unit>
        <trans-unit id="588f3270d3a2fdaf5fab8527606f0c08f6d7bf28" translate="yes" xml:space="preserve">
          <source>func (t *ArrayType) String() string</source>
          <target state="translated">func (t *ArrayType)String()文字列</target>
        </trans-unit>
        <trans-unit id="89b22d1e1bd4f7564978400f31fa994545a395f2" translate="yes" xml:space="preserve">
          <source>func (t *BasicType) String() string</source>
          <target state="translated">func (t *BasicType)String()文字列</target>
        </trans-unit>
        <trans-unit id="b9f8b79e3a88d1ae7b58968262c186b541c929df" translate="yes" xml:space="preserve">
          <source>func (t *DotDotDotType) String() string</source>
          <target state="translated">func (t *DotDotDotType)String()文字列</target>
        </trans-unit>
        <trans-unit id="3bfeb4785c39cd9cb7845d97d78d586a3f634c14" translate="yes" xml:space="preserve">
          <source>func (t *EnumType) String() string</source>
          <target state="translated">func (t *EnumType)String()文字列</target>
        </trans-unit>
        <trans-unit id="162df4bfd9eca4a66c886787ba24c8ff7466521c" translate="yes" xml:space="preserve">
          <source>func (t *FuncType) String() string</source>
          <target state="translated">func (t *FuncType)String()文字列</target>
        </trans-unit>
        <trans-unit id="4a0e0be389703b47f46fdb0f7738f46549e157de" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Complete() *Interface</source>
          <target state="translated">func (t *Interface)Complete()*Interface</target>
        </trans-unit>
        <trans-unit id="48abb8c0ce802bc8764c60ff7c3abf64ce99d566" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Embedded(i int) *Named</source>
          <target state="translated">func (t *Interface)Embedded(i int)*Named</target>
        </trans-unit>
        <trans-unit id="c2a7849e4655658c8e8b2214cccdf3063e03a74c" translate="yes" xml:space="preserve">
          <source>func (t *Interface) EmbeddedType(i int) Type</source>
          <target state="translated">func (t *Interface)EmbeddedType(i int)型</target>
        </trans-unit>
        <trans-unit id="d4554c1599675f0948469b62678e33f2f3bb1c85" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Empty() bool</source>
          <target state="translated">func (t *Interface)Empty()bool</target>
        </trans-unit>
        <trans-unit id="86075a9dbbda5dea692bfc4e4ccb10acb3e1c187" translate="yes" xml:space="preserve">
          <source>func (t *Interface) ExplicitMethod(i int) *Func</source>
          <target state="translated">func (t *Interface)ExplicitMethod(i int)*Func</target>
        </trans-unit>
        <trans-unit id="c2d3580891c4db76d57b1c4fa35b4cc19d326f6f" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Method(i int) *Func</source>
          <target state="translated">func (t *Interface)メソッド(i int)*Func</target>
        </trans-unit>
        <trans-unit id="c814b7b3a6c6d70dc6d09ca87ffd36163cbb6b48" translate="yes" xml:space="preserve">
          <source>func (t *Interface) NumEmbeddeds() int</source>
          <target state="translated">func (t *Interface)NumEmbeddeds()int</target>
        </trans-unit>
        <trans-unit id="f93102abe766284167e02c4e329cfe0ea1ebc5e8" translate="yes" xml:space="preserve">
          <source>func (t *Interface) NumExplicitMethods() int</source>
          <target state="translated">func (t *Interface)NumExplicitMethods()int</target>
        </trans-unit>
        <trans-unit id="62f9ddfbb0adc7af4b39d3dfedb1a1b46796369e" translate="yes" xml:space="preserve">
          <source>func (t *Interface) NumMethods() int</source>
          <target state="translated">func (t *Interface)NumMethods()int</target>
        </trans-unit>
        <trans-unit id="198fdf0c8025d95f6088769feec89f1b6c762b53" translate="yes" xml:space="preserve">
          <source>func (t *Interface) String() string</source>
          <target state="translated">func (t *Interface)String()文字列</target>
        </trans-unit>
        <trans-unit id="8d429124ccc4f57e4f640071d78277ce2077dd23" translate="yes" xml:space="preserve">
          <source>func (t *Interface) Underlying() Type</source>
          <target state="translated">func (t *Interface)Underlying()型</target>
        </trans-unit>
        <trans-unit id="2f61a7f9c240996fd922e6fefaaaf3f2c50a540d" translate="yes" xml:space="preserve">
          <source>func (t *LineTable) LineToPC(line int, maxpc uint64) uint64</source>
          <target state="translated">func (t *LineTable)LineToPC(line int,maxpc uint64)uint64</target>
        </trans-unit>
        <trans-unit id="2c71b0d795a98cf074490237680bbd1693f0e039" translate="yes" xml:space="preserve">
          <source>func (t *LineTable) PCToLine(pc uint64) int</source>
          <target state="translated">func (t *LineTable)PCToLine(pc uint64)int</target>
        </trans-unit>
        <trans-unit id="ea7446c880169dcbb10bb31ef690249774db209e" translate="yes" xml:space="preserve">
          <source>func (t *Named) AddMethod(m *Func)</source>
          <target state="translated">func (t *Named)AddMethod(m *Func)</target>
        </trans-unit>
        <trans-unit id="a095bf463744d8c0ab529750938612230f17fbc6" translate="yes" xml:space="preserve">
          <source>func (t *Named) Method(i int) *Func</source>
          <target state="translated">func (t *Named)Method(i int)*Func</target>
        </trans-unit>
        <trans-unit id="907ef93c76d034b8801b0f37ce5f96c62be537a9" translate="yes" xml:space="preserve">
          <source>func (t *Named) NumMethods() int</source>
          <target state="translated">func (t *Named)NumMethods()int</target>
        </trans-unit>
        <trans-unit id="b7faa9dbc198511ba35f260d3c7a4e3608a7afe0" translate="yes" xml:space="preserve">
          <source>func (t *Named) Obj() *TypeName</source>
          <target state="translated">func (t *Named)Obj()*TypeName</target>
        </trans-unit>
        <trans-unit id="8090f799b15a1bc6c046f87f70b5895bb761dfc7" translate="yes" xml:space="preserve">
          <source>func (t *Named) SetUnderlying(underlying Type)</source>
          <target state="translated">func (t *Named)SetUnderlying(基礎となる型)</target>
        </trans-unit>
        <trans-unit id="d45a218d603ddabdb6bc23f0b8b8ee1ebb93e3da" translate="yes" xml:space="preserve">
          <source>func (t *Named) String() string</source>
          <target state="translated">func (t *Named)String()文字列</target>
        </trans-unit>
        <trans-unit id="74208b79dc60a6d4e81173a507ec6f83bd5285d5" translate="yes" xml:space="preserve">
          <source>func (t *Named) Underlying() Type</source>
          <target state="translated">func (t *Named)Underlying()型</target>
        </trans-unit>
        <trans-unit id="8d49fae6da9b60262526e701c3497ec33acb2bfa" translate="yes" xml:space="preserve">
          <source>func (t *PtrType) String() string</source>
          <target state="translated">func (t *PtrType)String()文字列</target>
        </trans-unit>
        <trans-unit id="31f4994e4fbcaca55d69da27bfcc772a7cd38285" translate="yes" xml:space="preserve">
          <source>func (t *QualType) Size() int64</source>
          <target state="translated">func (t *QualType)Size()int64</target>
        </trans-unit>
        <trans-unit id="fa90dd44b87029aca7de9ec3c53f708ce9db55ba" translate="yes" xml:space="preserve">
          <source>func (t *QualType) String() string</source>
          <target state="translated">func (t *QualType)String()文字列</target>
        </trans-unit>
        <trans-unit id="2f0e6cfed4384f63ff5c16d5ce59bfd1f5403417" translate="yes" xml:space="preserve">
          <source>func (t *StructType) Defn() string</source>
          <target state="translated">func (t *StructType)Defn()文字列</target>
        </trans-unit>
        <trans-unit id="5e814f2450498a05b060a9523cebf755a865fb2c" translate="yes" xml:space="preserve">
          <source>func (t *StructType) String() string</source>
          <target state="translated">func (t *StructType)String()文字列</target>
        </trans-unit>
        <trans-unit id="e81a23050da9d0fce144c5d7821d27c5044fce85" translate="yes" xml:space="preserve">
          <source>func (t *T) Deadline() (deadline time.Time, ok bool)</source>
          <target state="translated">func (t *T)Deadline()(deadline time.Time,ok bool)</target>
        </trans-unit>
        <trans-unit id="158192c8c44ab9f83f039fca1b0ec5b22ae01a58" translate="yes" xml:space="preserve">
          <source>func (t *T) Parallel()</source>
          <target state="translated">func (t *T)Parallel()</target>
        </trans-unit>
        <trans-unit id="2b7c566210ec76b1157f6673df0f86ee2cc0ed85" translate="yes" xml:space="preserve">
          <source>func (t *T) Run(name string, f func(t *T)) bool</source>
          <target state="translated">func (t *T)Run(name string,f func(t *T)bool)</target>
        </trans-unit>
        <trans-unit id="fb9b822352a2ba0d8c55c7fd1b91e908bb14e88c" translate="yes" xml:space="preserve">
          <source>func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)</source>
          <target state="translated">func (t *Table)LineToPC(ファイル文字列,行 int)(pc uint64,fn *Func,err error)</target>
        </trans-unit>
        <trans-unit id="d433aef259acb4c14b3d0a1961a493cf0feed292" translate="yes" xml:space="preserve">
          <source>func (t *Table) LookupFunc(name string) *Func</source>
          <target state="translated">func (t *Table)LookupFunc(名前文字列)*Func</target>
        </trans-unit>
        <trans-unit id="b0a65b6d9e80ac9193a48987cf25c490ef9a4889" translate="yes" xml:space="preserve">
          <source>func (t *Table) LookupSym(name string) *Sym</source>
          <target state="translated">func (t *Table)LookupSym(名前文字列)*Sym</target>
        </trans-unit>
        <trans-unit id="f334e746190d803edc4e3cfdf7188180b5ffcd2b" translate="yes" xml:space="preserve">
          <source>func (t *Table) PCToFunc(pc uint64) *Func</source>
          <target state="translated">func (t *Table)PCToFunc(pc uint64)*Func</target>
        </trans-unit>
        <trans-unit id="b1abb74abd7fd7ee8c7155d1f27fadcdde2764dd" translate="yes" xml:space="preserve">
          <source>func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)</source>
          <target state="translated">func (t *Table)PCToLine(pc uint64)(ファイル文字列,行 int,fn *Func)</target>
        </trans-unit>
        <trans-unit id="cd7150522c2d26bb4af01f5bf2b7ed7c51870570" translate="yes" xml:space="preserve">
          <source>func (t *Table) SymByAddr(addr uint64) *Sym</source>
          <target state="translated">func (t *Table)SymByAddr(addr uint64)*Sym</target>
        </trans-unit>
        <trans-unit id="849a51a798662bcde61f0275cf0e5a455bf3b915" translate="yes" xml:space="preserve">
          <source>func (t *Task) End()</source>
          <target state="translated">func (t *Task)End()</target>
        </trans-unit>
        <trans-unit id="20bf574c7c3b4f63311f23a1e50ea0c5dc2366e0" translate="yes" xml:space="preserve">
          <source>func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error)</source>
          <target state="translated">func (t *Template)AddParseTree(name string,tree *parse.Tree)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="3fdf733eed69eb776a07621956cfd1c26bcbbee8" translate="yes" xml:space="preserve">
          <source>func (t *Template) Clone() (*Template, error)</source>
          <target state="translated">func (t *Template)Clone()(*Template,error)</target>
        </trans-unit>
        <trans-unit id="2bf21f1a81c6d21576534f60a5baecfcb382443e" translate="yes" xml:space="preserve">
          <source>func (t *Template) DefinedTemplates() string</source>
          <target state="translated">func (t *Template)DefinedTemplates()文字列</target>
        </trans-unit>
        <trans-unit id="4019ec0864c5287ec8c4fc7e119908439c252535" translate="yes" xml:space="preserve">
          <source>func (t *Template) Delims(left, right string) *Template</source>
          <target state="translated">func (t *Template)Delims(left,right string)*Template</target>
        </trans-unit>
        <trans-unit id="5a1af3394b7cb1844cfc3098a57fd3258b688cbc" translate="yes" xml:space="preserve">
          <source>func (t *Template) Execute(wr io.Writer, data interface{}) error</source>
          <target state="translated">func (t *Template)Execute(wr io.Writer,data interface{})エラー</target>
        </trans-unit>
        <trans-unit id="7841659b2f55272366f7de8f18a602023c73949b" translate="yes" xml:space="preserve">
          <source>func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error</source>
          <target state="translated">func (t *Template)ExecuteTemplate(wr io.Writer,name string,data interface{})error</target>
        </trans-unit>
        <trans-unit id="2e8de92c57e50c189e96606813750e8de8bb9a8d" translate="yes" xml:space="preserve">
          <source>func (t *Template) Funcs(funcMap FuncMap) *Template</source>
          <target state="translated">func (t *Template)Funcs(funcMap FuncMap)*Template</target>
        </trans-unit>
        <trans-unit id="6816c689b05cb57189287c4dc47a994bcd49662c" translate="yes" xml:space="preserve">
          <source>func (t *Template) Lookup(name string) *Template</source>
          <target state="translated">func (t *Template)Lookup(name string)*Template</target>
        </trans-unit>
        <trans-unit id="405925c0e081357fe4575316209c86b9630f7cd8" translate="yes" xml:space="preserve">
          <source>func (t *Template) Name() string</source>
          <target state="translated">func (t *Template)Name()文字列</target>
        </trans-unit>
        <trans-unit id="61fc9e761bffa3771a1cb02cbbdf1e65e1c9b45c" translate="yes" xml:space="preserve">
          <source>func (t *Template) New(name string) *Template</source>
          <target state="translated">func (t *Template)New(name string)*Template</target>
        </trans-unit>
        <trans-unit id="aca9dc486ebd40de3f30c9a449be4fb7a2ee9466" translate="yes" xml:space="preserve">
          <source>func (t *Template) Option(opt ...string) *Template</source>
          <target state="translated">func (t *Template)Option(opt ...string)*Template</target>
        </trans-unit>
        <trans-unit id="c1aceb5e4dee382d9e7470da4d5363183734c0f1" translate="yes" xml:space="preserve">
          <source>func (t *Template) Parse(text string) (*Template, error)</source>
          <target state="translated">func (t *Template)Parse(text string)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="33b4cccae2faa823cf5c28be109b16226b1ba53b" translate="yes" xml:space="preserve">
          <source>func (t *Template) ParseFiles(filenames ...string) (*Template, error)</source>
          <target state="translated">func (t *Template)ParseFiles(filenames ...string)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="12e87565572df38dd73da59d7f6a06ae089bb5c4" translate="yes" xml:space="preserve">
          <source>func (t *Template) ParseGlob(pattern string) (*Template, error)</source>
          <target state="translated">func (t *Template)ParseGlob(pattern string)(*Template,error)</target>
        </trans-unit>
        <trans-unit id="5c62c1462b9bdced62ae1429ff3a09d9bc764743" translate="yes" xml:space="preserve">
          <source>func (t *Template) Templates() []*Template</source>
          <target state="translated">func (t *Template)Templates()[]*Template</target>
        </trans-unit>
        <trans-unit id="bfc1838aa8bd4105c914299bc0d9696531731926" translate="yes" xml:space="preserve">
          <source>func (t *TemplateNode) Copy() Node</source>
          <target state="translated">func (t *TemplateNode)Copy()ノード</target>
        </trans-unit>
        <trans-unit id="710a7844cdb3d03488e145c3091e22ebf4429a40" translate="yes" xml:space="preserve">
          <source>func (t *TemplateNode) String() string</source>
          <target state="translated">func (t *TemplateNode)String()文字列</target>
        </trans-unit>
        <trans-unit id="3898720d38adf322464d0913bc3d49ed4ef2a016" translate="yes" xml:space="preserve">
          <source>func (t *TextNode) Copy() Node</source>
          <target state="translated">func (t *TextNode)Copy()ノード</target>
        </trans-unit>
        <trans-unit id="a6c704532b33afd60cd3f5937296962e4fe6dbec" translate="yes" xml:space="preserve">
          <source>func (t *TextNode) String() string</source>
          <target state="translated">func (t *TextNode)String()文字列</target>
        </trans-unit>
        <trans-unit id="8d26d902072b9fa6d48fb50b4008cf6867f96fe3" translate="yes" xml:space="preserve">
          <source>func (t *Ticker) Reset(d Duration)</source>
          <target state="translated">func (t *ticker)Reset(d Duration)</target>
        </trans-unit>
        <trans-unit id="6369fde3e6c348c2ffc7a5f1bae508679ce4ac23" translate="yes" xml:space="preserve">
          <source>func (t *Ticker) Stop()</source>
          <target state="translated">func (t *ticker)Stop()</target>
        </trans-unit>
        <trans-unit id="2309d8d9e3842f10e9e0d716521ccb7b98536a35" translate="yes" xml:space="preserve">
          <source>func (t *Time) GobDecode(data []byte) error</source>
          <target state="translated">func (t *Time)GobDecode(data []byte)エラー</target>
        </trans-unit>
        <trans-unit id="8e700d4d2a917eb3bed17dda6daee8f6c1ca202f" translate="yes" xml:space="preserve">
          <source>func (t *Time) UnmarshalBinary(data []byte) error</source>
          <target state="translated">func (t *Time)UnmarshalBinary(data []byte)エラー</target>
        </trans-unit>
        <trans-unit id="80a0bd3c3d068c8dcf7d0ac6d13c84c3d2a60af1" translate="yes" xml:space="preserve">
          <source>func (t *Time) UnmarshalJSON(data []byte) error</source>
          <target state="translated">func (t *Time)UnmarshalJSON(date []byte)エラー</target>
        </trans-unit>
        <trans-unit id="3225cc0cf7f5c717e01d304c9267df220704bb74" translate="yes" xml:space="preserve">
          <source>func (t *Time) UnmarshalText(data []byte) error</source>
          <target state="translated">func (t *Time)UnmarshalText(date []byte)エラー</target>
        </trans-unit>
        <trans-unit id="d92def2b49cc730969b379ec4a04a91e4ddbb606" translate="yes" xml:space="preserve">
          <source>func (t *Timer) Reset(d Duration) bool</source>
          <target state="translated">func (t *Timer)Reset(d Duration)bool</target>
        </trans-unit>
        <trans-unit id="d5d5df877d49edcce9fa14708d4bf94d53c84215" translate="yes" xml:space="preserve">
          <source>func (t *Timer) Stop() bool</source>
          <target state="translated">func (t *Timer)Stop()bool</target>
        </trans-unit>
        <trans-unit id="5a18e31f6c4f78fd2d4930f17b674a261ec7dd0a" translate="yes" xml:space="preserve">
          <source>func (t *Transport) CancelRequest(req *Request)</source>
          <target state="translated">func (t *Transport)CancelRequest(req *Request)</target>
        </trans-unit>
        <trans-unit id="c01f45482fca3d26d05e43942697d5512ffda5c4" translate="yes" xml:space="preserve">
          <source>func (t *Transport) Clone() *Transport</source>
          <target state="translated">func (t *Transport)Clone()*Transport</target>
        </trans-unit>
        <trans-unit id="ad49984004efb93c8c4c6d47985c7e6d84b0be45" translate="yes" xml:space="preserve">
          <source>func (t *Transport) CloseIdleConnections()</source>
          <target state="translated">func (t *Transport)CloseIdleConnections()</target>
        </trans-unit>
        <trans-unit id="3e64a56ca08621fc0bab3ab766ed7ce318ecddc0" translate="yes" xml:space="preserve">
          <source>func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)</source>
          <target state="translated">func (t *Transport)RegisterProtocol(scheme string,rt RoundTripper)</target>
        </trans-unit>
        <trans-unit id="bd86ad9a37004baa845a1ec182558f7cf79ca0b8" translate="yes" xml:space="preserve">
          <source>func (t *Transport) RoundTrip(req *Request) (*Response, error)</source>
          <target state="translated">func (t *Transport)RoundTrip(req *Request)(*Response,error)</target>
        </trans-unit>
        <trans-unit id="b0eb25171c11c96709170df24fe7dcbf337c68c8" translate="yes" xml:space="preserve">
          <source>func (t *Tree) Copy() *Tree</source>
          <target state="translated">func (t *Tree)Copy()*Tree</target>
        </trans-unit>
        <trans-unit id="8d2fdb585c0b4fde9089d6b35433dc961207527e" translate="yes" xml:space="preserve">
          <source>func (t *Tree) ErrorContext(n Node) (location, context string)</source>
          <target state="translated">func (t *Tree)ErrorContext(n Node)(location,context string)</target>
        </trans-unit>
        <trans-unit id="97ab41d02ff3e7f18423f2bab4cbafcda97cef75" translate="yes" xml:space="preserve">
          <source>func (t *Tree) Parse(text, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)</source>
          <target state="translated">func (t *Tree)Parse(text,leftDelim,rightDelim string,treeSet map[string]*Tree,funcs ...map[string]interface{})(tree *Tree,err error)</target>
        </trans-unit>
        <trans-unit id="fdc17ccb8e85f6bd39a6ee8ddc3caaa3865ec66a" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) At(i int) *Var</source>
          <target state="translated">func (t *Tuple)At(i int)*Var</target>
        </trans-unit>
        <trans-unit id="6e66d771cfda37241e14863c3cd5ec5588c8d090" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) Len() int</source>
          <target state="translated">func (t *Tuple)Len()int</target>
        </trans-unit>
        <trans-unit id="80009402a036f581cd5d2689b02f41f4fdba5312" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) String() string</source>
          <target state="translated">func (t *Tuple)String()文字列</target>
        </trans-unit>
        <trans-unit id="445ad55cee305f0eb8f5ab176f259af3ac72b547" translate="yes" xml:space="preserve">
          <source>func (t *Tuple) Underlying() Type</source>
          <target state="translated">func (t *Tuple)Underlying()型</target>
        </trans-unit>
        <trans-unit id="969cf424b1b3a352ddc16fabaf833429922a3b97" translate="yes" xml:space="preserve">
          <source>func (t *TypedefType) Size() int64</source>
          <target state="translated">func (t *TypedefType)Size()int64</target>
        </trans-unit>
        <trans-unit id="b1717c3ba22aa746b258415cf74f7e9072f46439" translate="yes" xml:space="preserve">
          <source>func (t *TypedefType) String() string</source>
          <target state="translated">func (t *TypedefType)String()文字列</target>
        </trans-unit>
        <trans-unit id="4e02690778ec74bec3215ab088ff3b7ad78da328" translate="yes" xml:space="preserve">
          <source>func (t *UnsupportedType) String() string</source>
          <target state="translated">func (t *UnsupportedType)String()文字列</target>
        </trans-unit>
        <trans-unit id="46b9a2e81608f6108ba07e90ae7d68c7da227d4e" translate="yes" xml:space="preserve">
          <source>func (t *VoidType) String() string</source>
          <target state="translated">func (t *VoidType)String()文字列</target>
        </trans-unit>
        <trans-unit id="dba0ea4252cb6506f0c7c25112d8ec933b30f30e" translate="yes" xml:space="preserve">
          <source>func (t NodeType) Type() NodeType</source>
          <target state="translated">func (t NodeType)Type()NodeType</target>
        </trans-unit>
        <trans-unit id="50fb753745c791ed8ea8964b48f945915cb862da" translate="yes" xml:space="preserve">
          <source>func (t Tag) GoString() string</source>
          <target state="translated">func(t Tag)GoString()文字列</target>
        </trans-unit>
        <trans-unit id="727d5c06aabe2ea2f1dca02a68080f6723fc2e80" translate="yes" xml:space="preserve">
          <source>func (t Time) Add(d Duration) Time</source>
          <target state="translated">func (t Time)Add(d Duration)Time</target>
        </trans-unit>
        <trans-unit id="dc39761855948a0e5520b6b6613e59b2ccbcf4a5" translate="yes" xml:space="preserve">
          <source>func (t Time) AddDate(years int, months int, days int) Time</source>
          <target state="translated">func (t Time)AddDate(year int,months int,days int)Time</target>
        </trans-unit>
        <trans-unit id="4741193453a3bb53ae559d8f9f5c85e7cabe2f9e" translate="yes" xml:space="preserve">
          <source>func (t Time) After(u Time) bool</source>
          <target state="translated">func (t Time)After(u Time)bool</target>
        </trans-unit>
        <trans-unit id="0c2f9d178d4abeab963e138784b7888546ea8a91" translate="yes" xml:space="preserve">
          <source>func (t Time) AppendFormat(b []byte, layout string) []byte</source>
          <target state="translated">func (t Time)AppendFormat(b []byte,layout string)[]byte</target>
        </trans-unit>
        <trans-unit id="18525a81a894115e2fc9c1bf43f8f7ac937328b2" translate="yes" xml:space="preserve">
          <source>func (t Time) Before(u Time) bool</source>
          <target state="translated">func (t Time)Before(u Time)bool</target>
        </trans-unit>
        <trans-unit id="803e0956fadb0efad2e81c81da6f43d9b5c486a2" translate="yes" xml:space="preserve">
          <source>func (t Time) Clock() (hour, min, sec int)</source>
          <target state="translated">func (t Time)Clock()(時、分、秒 int)</target>
        </trans-unit>
        <trans-unit id="67477f7804ad9df182c7ab89e7164856e03f6aac" translate="yes" xml:space="preserve">
          <source>func (t Time) Date() (year int, month Month, day int)</source>
          <target state="translated">func (t Time)Date()(年 int,月 月,日 int)</target>
        </trans-unit>
        <trans-unit id="7a0d04b569447d54db1316d8fd0ed6d5115f1e07" translate="yes" xml:space="preserve">
          <source>func (t Time) Day() int</source>
          <target state="translated">func (t Time)Day()int</target>
        </trans-unit>
        <trans-unit id="e9052ac84eaeb555ce6b129f4f392fff3b84b48e" translate="yes" xml:space="preserve">
          <source>func (t Time) Equal(u Time) bool</source>
          <target state="translated">func (t Time)Equal(u Time)bool</target>
        </trans-unit>
        <trans-unit id="03492123fa6a8129fc5aeb3433179b72d6980763" translate="yes" xml:space="preserve">
          <source>func (t Time) Format(layout string) string</source>
          <target state="translated">func (t Time)フォーマット(レイアウト文字列)文字列</target>
        </trans-unit>
        <trans-unit id="1f400f8b1c21c6c862c270c6666dd07ca89c5d68" translate="yes" xml:space="preserve">
          <source>func (t Time) GobEncode() ([]byte, error)</source>
          <target state="translated">func (t Time)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="77f1660eb7e6d526b05c5f5b11881174cdc12da6" translate="yes" xml:space="preserve">
          <source>func (t Time) Hour() int</source>
          <target state="translated">func (t Time)Hour()int</target>
        </trans-unit>
        <trans-unit id="dae83dbdf6d2063448b8813a1fc5b2af2100d540" translate="yes" xml:space="preserve">
          <source>func (t Time) ISOWeek() (year, week int)</source>
          <target state="translated">func (t Time)ISOWeek()(年,週 int)</target>
        </trans-unit>
        <trans-unit id="389c8d7d8c382c1eac62fd91da1f633888b47202" translate="yes" xml:space="preserve">
          <source>func (t Time) In(loc *Location) Time</source>
          <target state="translated">func (t Time)In(loc *Location)Time</target>
        </trans-unit>
        <trans-unit id="3357ec837bc55602d9667030a7b530562046d16a" translate="yes" xml:space="preserve">
          <source>func (t Time) IsZero() bool</source>
          <target state="translated">func (t Time)IsZero()bool</target>
        </trans-unit>
        <trans-unit id="61b17288bbc7ec5cce2d7f58360f5b5a81a2471d" translate="yes" xml:space="preserve">
          <source>func (t Time) Local() Time</source>
          <target state="translated">func (t Time)Local()Time</target>
        </trans-unit>
        <trans-unit id="043784a589712e57931c992c16088aa01a11d0df" translate="yes" xml:space="preserve">
          <source>func (t Time) Location() *Location</source>
          <target state="translated">func (t Time)Location()*Location</target>
        </trans-unit>
        <trans-unit id="25deed7ee986c82e1e3a384ef13e7cfaf444df0c" translate="yes" xml:space="preserve">
          <source>func (t Time) MarshalBinary() ([]byte, error)</source>
          <target state="translated">func (t Time)MarshalBinary()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="51c36158757d5189e3d57e1737b7bab9cf8fd062" translate="yes" xml:space="preserve">
          <source>func (t Time) MarshalJSON() ([]byte, error)</source>
          <target state="translated">func (t Time)MarshalJSON()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="205d604d15f2e43ee90b65ef2c4e410a1d5d548d" translate="yes" xml:space="preserve">
          <source>func (t Time) MarshalText() ([]byte, error)</source>
          <target state="translated">func (t Time)MarshalText()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="1bec201d208f7a81d2c9eca0bd10ecee1561dd5a" translate="yes" xml:space="preserve">
          <source>func (t Time) Minute() int</source>
          <target state="translated">func (t Time)Minute()int</target>
        </trans-unit>
        <trans-unit id="ec928e57ce2606179a383c0a2c8c94e75bc6c58c" translate="yes" xml:space="preserve">
          <source>func (t Time) Month() Month</source>
          <target state="translated">func (t Time)Month()月</target>
        </trans-unit>
        <trans-unit id="2d7b3f7a2de5945789233405ae5e589aee0c9edb" translate="yes" xml:space="preserve">
          <source>func (t Time) Nanosecond() int</source>
          <target state="translated">func (t Time)Nanosecond()int</target>
        </trans-unit>
        <trans-unit id="5a3ec82ac10bdbdbb9db7272a438e1274017dab8" translate="yes" xml:space="preserve">
          <source>func (t Time) Round(d Duration) Time</source>
          <target state="translated">func (t Time)ラウンド(d Duration)時間</target>
        </trans-unit>
        <trans-unit id="67a51ee8970f6a4e02a11383361cd8d208fd9d2f" translate="yes" xml:space="preserve">
          <source>func (t Time) Second() int</source>
          <target state="translated">func (t Time)Second()int</target>
        </trans-unit>
        <trans-unit id="26f9734237be2fe2fcab2c951c59f781114b2dc1" translate="yes" xml:space="preserve">
          <source>func (t Time) String() string</source>
          <target state="translated">func (t Time)String()文字列</target>
        </trans-unit>
        <trans-unit id="1e9602af95a650c06304a4b93a27a84d0a0caada" translate="yes" xml:space="preserve">
          <source>func (t Time) Sub(u Time) Duration</source>
          <target state="translated">func (t Time)Sub(u Time)Duration</target>
        </trans-unit>
        <trans-unit id="0fc4e9f39109d9d8d4d97f33b64d14349b0496ab" translate="yes" xml:space="preserve">
          <source>func (t Time) Truncate(d Duration) Time</source>
          <target state="translated">func (t Time)Truncate(d Duration)Time</target>
        </trans-unit>
        <trans-unit id="5e4259b4b0205ce683b90af927ddf0ad2cc8020b" translate="yes" xml:space="preserve">
          <source>func (t Time) UTC() Time</source>
          <target state="translated">func (t Time)UTC()時刻</target>
        </trans-unit>
        <trans-unit id="878fafcd077275daa8235a988622339ebc3feb34" translate="yes" xml:space="preserve">
          <source>func (t Time) Unix() int64</source>
          <target state="translated">func (t Time)Unix()int64</target>
        </trans-unit>
        <trans-unit id="76905c0de004bcfacf07ec0bd01c45d9fc43e18e" translate="yes" xml:space="preserve">
          <source>func (t Time) UnixNano() int64</source>
          <target state="translated">func (t Time)UnixNano()int64</target>
        </trans-unit>
        <trans-unit id="d023681cb4d9a9cb47dffb11caef10183995f310" translate="yes" xml:space="preserve">
          <source>func (t Time) Weekday() Weekday</source>
          <target state="translated">func (t Time)Weekday()Weekday</target>
        </trans-unit>
        <trans-unit id="5a3ae54cb566a30d555cd003b35b43930b9896d7" translate="yes" xml:space="preserve">
          <source>func (t Time) Year() int</source>
          <target state="translated">func (t Time)年()int</target>
        </trans-unit>
        <trans-unit id="81c1ae9dcb5d8341eeaea17371432a3800eeeffe" translate="yes" xml:space="preserve">
          <source>func (t Time) YearDay() int</source>
          <target state="translated">func (t Time)YearDay()int</target>
        </trans-unit>
        <trans-unit id="92edc66de086c161f845845caa701764753f9f51" translate="yes" xml:space="preserve">
          <source>func (t Time) Zone() (name string, offset int)</source>
          <target state="translated">func (t Time)Zone()(name string,offset int)</target>
        </trans-unit>
        <trans-unit id="26acd4074f802225b9913f76f812c0866a62d8d3" translate="yes" xml:space="preserve">
          <source>func (t Type) GoString() string</source>
          <target state="translated">func(t Type)GoString()文字列</target>
        </trans-unit>
        <trans-unit id="9d3fedf46ffe54f574f897429c47e23f01181739" translate="yes" xml:space="preserve">
          <source>func (t Type) String() string</source>
          <target state="translated">func(t Type)String()文字列</target>
        </trans-unit>
        <trans-unit id="4cd63a94e252ccd9734bbc8e6c385182829e3089" translate="yes" xml:space="preserve">
          <source>func (tag StructTag) Get(key string) string</source>
          <target state="translated">func (tag StructTag)Get(key string)文字列</target>
        </trans-unit>
        <trans-unit id="7561cfae729cef2fd92e66e9217c739550b820f8" translate="yes" xml:space="preserve">
          <source>func (tag StructTag) Lookup(key string) (value string, ok bool)</source>
          <target state="translated">func (tag StructTag)Lookup(key string)(value string,ok bool)</target>
        </trans-unit>
        <trans-unit id="f8414bce98f3ba1980e3015e2b2c70ab6180122e" translate="yes" xml:space="preserve">
          <source>func (tok Token) IsKeyword() bool</source>
          <target state="translated">func (tok Token)IsKeyword()bool</target>
        </trans-unit>
        <trans-unit id="d67676ff93587e9b436423ca38814b09dfbc620c" translate="yes" xml:space="preserve">
          <source>func (tok Token) IsLiteral() bool</source>
          <target state="translated">func (tok Token)IsLiteral()bool</target>
        </trans-unit>
        <trans-unit id="07afd41cae302913a8f2bbb8cb3858c92ba5fffb" translate="yes" xml:space="preserve">
          <source>func (tok Token) IsOperator() bool</source>
          <target state="translated">func (tok Token)IsOperator()bool</target>
        </trans-unit>
        <trans-unit id="631a161e4e34b1e2e1159928d06ce894c6fe0267" translate="yes" xml:space="preserve">
          <source>func (tok Token) String() string</source>
          <target state="translated">func(tok Token)String()文字列</target>
        </trans-unit>
        <trans-unit id="d0675bae8c6b4463c6d0051fb94ca8e830a74484" translate="yes" xml:space="preserve">
          <source>func (tr *Reader) Next() (*Header, error)</source>
          <target state="translated">func (tr *Reader)Next()(*Header,error)</target>
        </trans-unit>
        <trans-unit id="4c51550476d9f379c7715de2b974da5c86b7f7b7" translate="yes" xml:space="preserve">
          <source>func (tr *Reader) Read(b []byte) (int, error)</source>
          <target state="translated">func (tr *Reader)Read(b []バイト)(int,error)</target>
        </trans-unit>
        <trans-unit id="d55337e94931bd76c3cca126badb68d688ea30f8" translate="yes" xml:space="preserve">
          <source>func (ts *Timespec) Nano() int64</source>
          <target state="translated">func (ts *Timespec)Nano()int64</target>
        </trans-unit>
        <trans-unit id="ef64d5a637e060230a93366edcb51bea3358722c" translate="yes" xml:space="preserve">
          <source>func (ts *Timespec) Unix() (sec int64, nsec int64)</source>
          <target state="translated">func (ts *Timespec)Unix()(sec int64,nsec int64)</target>
        </trans-unit>
        <trans-unit id="2ae78f58dacea8cfa4b7896e8e65c754ff54b902" translate="yes" xml:space="preserve">
          <source>func (tv *Timeval) Nano() int64</source>
          <target state="translated">func (tv *Timeval)Nano()int64</target>
        </trans-unit>
        <trans-unit id="9202da9cacd2117778efd985b4e890251d168206" translate="yes" xml:space="preserve">
          <source>func (tv *Timeval) Unix() (sec int64, nsec int64)</source>
          <target state="translated">func (tv *Timeval)Unix()(sec int64,nsec int64)</target>
        </trans-unit>
        <trans-unit id="ead71707a1449949110de81f770498525d62ae65" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) Addressable() bool</source>
          <target state="translated">func (tv TypeAndValue)Addressable()bool</target>
        </trans-unit>
        <trans-unit id="afa60026b4989f75e5d04b2c7cc5929589bf65b1" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) Assignable() bool</source>
          <target state="translated">func (tv TypeAndValue)Assignable()bool</target>
        </trans-unit>
        <trans-unit id="6510635c07307e367bade0266f8449accf266be5" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) HasOk() bool</source>
          <target state="translated">func (tv TypeAndValue)HasOk()bool</target>
        </trans-unit>
        <trans-unit id="c701f272c243e4e69b1c6e204f118dfbedbfa517" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsBuiltin() bool</source>
          <target state="translated">func (tv TypeAndValue)IsBuiltin()bool</target>
        </trans-unit>
        <trans-unit id="9a439bcf5544841863131e3f3d7e45bc621b92a2" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsNil() bool</source>
          <target state="translated">func (tv TypeAndValue)IsNil()bool</target>
        </trans-unit>
        <trans-unit id="8b5ac2a9b6f31dbf7f6decabd619f5dc299e4595" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsType() bool</source>
          <target state="translated">func (tv TypeAndValue)IsType()bool</target>
        </trans-unit>
        <trans-unit id="a78bebd3b60ce10ac041c9c8c821a89925ce6733" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsValue() bool</source>
          <target state="translated">func (tv TypeAndValue)IsValue()bool</target>
        </trans-unit>
        <trans-unit id="5b16b64e3fcc581f3f5979c8a25f41df646c64c3" translate="yes" xml:space="preserve">
          <source>func (tv TypeAndValue) IsVoid() bool</source>
          <target state="translated">func (tv TypeAndValue)IsVoid()bool</target>
        </trans-unit>
        <trans-unit id="0eca6aba9052c3682b1974f7fa16d188fa43451c" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) Close() error</source>
          <target state="translated">func (tw *Writer)Close()エラー</target>
        </trans-unit>
        <trans-unit id="563a676603b30f05685def2eab48c3c1a4482506" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) Flush() error</source>
          <target state="translated">func (tw *Writer)Flush()エラー</target>
        </trans-unit>
        <trans-unit id="152ac99bd18c5c3651a78f2b0b10081fee98c234" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) Write(b []byte) (int, error)</source>
          <target state="translated">func (tw *Writer)Write(b []バイト)(int,error)</target>
        </trans-unit>
        <trans-unit id="1e3493870266de64e182409a70ab2c4890fd4dca" translate="yes" xml:space="preserve">
          <source>func (tw *Writer) WriteHeader(hdr *Header) error</source>
          <target state="translated">func (tw *Writer)WriteHeader(hdr *Header)エラー</target>
        </trans-unit>
        <trans-unit id="5f4a95f65116d1c4ca7da7f38854e00cfd209517" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Commit() error</source>
          <target state="translated">func (tx *Tx)コミット()エラー</target>
        </trans-unit>
        <trans-unit id="47a2c6c9a3dfd8a578a2498cef174264bf9c35ac" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Exec(query string, args ...interface{}) (Result, error)</source>
          <target state="translated">func (tx *Tx)Exec(query string,args ...interface{})(Result,error)</target>
        </trans-unit>
        <trans-unit id="a4c61814b521e15167abccccec2e4b9696c5a1b7" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)</source>
          <target state="translated">func (tx *Tx)ExecContext(ctx context.Context,query string,args ...interface{})(Result,error)</target>
        </trans-unit>
        <trans-unit id="4bb7737c1c90cb2c32b6e272c0d7d69a582764fe" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Prepare(query string) (*Stmt, error)</source>
          <target state="translated">func (tx *Tx)Prepare(クエリ文字列)(*Stmt,error)</target>
        </trans-unit>
        <trans-unit id="2137fcbdc2932441da64ea5d443cc4ae1454a01e" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) PrepareContext(ctx context.Context, query string) (*Stmt, error)</source>
          <target state="translated">func (tx *Tx)PrepareContext(ctx context.Context,query string)(*Stmt,error)</target>
        </trans-unit>
        <trans-unit id="b2a23479b2f6aa527b10fb2449663f80eee016f3" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Query(query string, args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (tx *Tx)Query(query string,args ...interface{})(*Rows,error)</target>
        </trans-unit>
        <trans-unit id="1cd0c65cfbe2b64ce3b75102ba23f1bbc40f259c" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)</source>
          <target state="translated">func (tx *Tx)QueryContext(ctx context.Context,クエリ文字列,args ...interface{})(*Rows,error)</target>
        </trans-unit>
        <trans-unit id="97d6164a62784ba574ec93386b56907682427479" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) QueryRow(query string, args ...interface{}) *Row</source>
          <target state="translated">func (tx *Tx)QueryRow(query string,args ...interface{})*Row</target>
        </trans-unit>
        <trans-unit id="791ddec2c8041bfd293b4da3c14a6344b967a8ec" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row</source>
          <target state="translated">func (tx *Tx)QueryRowContext(ctx context.Context,query string,args ...interface{})*Row</target>
        </trans-unit>
        <trans-unit id="9b791b7501aca92f681ddd1b414717d11a04be21" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Rollback() error</source>
          <target state="translated">func (tx *Tx)Rollback()エラー</target>
        </trans-unit>
        <trans-unit id="1523658ad4bd5aff17ca43f46bb9e81a75be23c9" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) Stmt(stmt *Stmt) *Stmt</source>
          <target state="translated">func (tx *Tx)Stmt(stmt *Stmt)*Stmt</target>
        </trans-unit>
        <trans-unit id="abd9b47de8f3e4f93cb079acbbe43ef1efe04501" translate="yes" xml:space="preserve">
          <source>func (tx *Tx) StmtContext(ctx context.Context, stmt *Stmt) *Stmt</source>
          <target state="translated">func (tx *Tx)StmtContext(ctx context.Context,stmt *Stmt)*Stmt</target>
        </trans-unit>
        <trans-unit id="c01743c1fc70320fbd6ead1a8fc5b553d052dcb4" translate="yes" xml:space="preserve">
          <source>func (u *URL) EscapedFragment() string</source>
          <target state="translated">func (u *URL)EscapedFragment()文字列</target>
        </trans-unit>
        <trans-unit id="e20446b84a8e8a7430992f9f03f977b7280c66d6" translate="yes" xml:space="preserve">
          <source>func (u *URL) EscapedPath() string</source>
          <target state="translated">func (u *URL)EscapedPath()文字列</target>
        </trans-unit>
        <trans-unit id="9dcff3a8dd5657d9471c36f75a6d0532afaf27cf" translate="yes" xml:space="preserve">
          <source>func (u *URL) Hostname() string</source>
          <target state="translated">func (u *URL)ホスト名()文字列</target>
        </trans-unit>
        <trans-unit id="666aa439dca2b8a6711c8103cee3b023ac200916" translate="yes" xml:space="preserve">
          <source>func (u *URL) IsAbs() bool</source>
          <target state="translated">func (u *URL)IsAbs()bool</target>
        </trans-unit>
        <trans-unit id="04582f10192967613dd09592235336b8422be6e2" translate="yes" xml:space="preserve">
          <source>func (u *URL) MarshalBinary() (text []byte, err error)</source>
          <target state="translated">func (u *URL)MarshalBinary()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="048e75663815d29540fdfe51b30aa4dc1a7638da" translate="yes" xml:space="preserve">
          <source>func (u *URL) Parse(ref string) (*URL, error)</source>
          <target state="translated">func (u *URL)Parse(ref string)(*URL,error)</target>
        </trans-unit>
        <trans-unit id="04978467793a498bf9362145ee114a623b7fa220" translate="yes" xml:space="preserve">
          <source>func (u *URL) Port() string</source>
          <target state="translated">func (u *URL)Port()文字列</target>
        </trans-unit>
        <trans-unit id="6b29c07ebc80860fe248d8dfcd89ec26300c8683" translate="yes" xml:space="preserve">
          <source>func (u *URL) Query() Values</source>
          <target state="translated">func (u *URL)クエリ()値</target>
        </trans-unit>
        <trans-unit id="58fc0f442959b54cb9165860d4dbf3e29dba5596" translate="yes" xml:space="preserve">
          <source>func (u *URL) Redacted() string</source>
          <target state="translated">func (u *URL)Redacted()文字列</target>
        </trans-unit>
        <trans-unit id="64eb00791b9a336b43e17193803663544643783c" translate="yes" xml:space="preserve">
          <source>func (u *URL) RequestURI() string</source>
          <target state="translated">func (u *URL)RequestURI()文字列</target>
        </trans-unit>
        <trans-unit id="71237fcf66248c3fb5440c50d584df44a3cad0ec" translate="yes" xml:space="preserve">
          <source>func (u *URL) ResolveReference(ref *URL) *URL</source>
          <target state="translated">func (u *URL)ResolveReference(ref *URL)*URL</target>
        </trans-unit>
        <trans-unit id="ae21a45cc046997821dfffe06f7207eed8939eb7" translate="yes" xml:space="preserve">
          <source>func (u *URL) String() string</source>
          <target state="translated">func(u *URL)String()文字列</target>
        </trans-unit>
        <trans-unit id="a2d9175932d374802bf95c0bb113e8b1396a37f8" translate="yes" xml:space="preserve">
          <source>func (u *URL) UnmarshalBinary(text []byte) error</source>
          <target state="translated">func (u *URL)UnmarshalBinary(text []byte)エラー</target>
        </trans-unit>
        <trans-unit id="8e82bce1bdfb5b3be7c5b59d6061e9ff275ea435" translate="yes" xml:space="preserve">
          <source>func (u *User) GroupIds() ([]string, error)</source>
          <target state="translated">func (u *User)GroupIds()([]string,error)</target>
        </trans-unit>
        <trans-unit id="f0ccb9a53d75eaee53e6b5f15ee4fe556874264c" translate="yes" xml:space="preserve">
          <source>func (u *Userinfo) Password() (string, bool)</source>
          <target state="translated">func (u *Userinfo)Password()(string,bool)</target>
        </trans-unit>
        <trans-unit id="0cbd71899e37dba1c781c948c3126fcf7deb61ae" translate="yes" xml:space="preserve">
          <source>func (u *Userinfo) String() string</source>
          <target state="translated">func (u *Userinfo)String()文字列</target>
        </trans-unit>
        <trans-unit id="dfcbb7f5e5653be1771606d1cc6c98367a4716b4" translate="yes" xml:space="preserve">
          <source>func (u *Userinfo) Username() string</source>
          <target state="translated">func (u *Userinfo)ユーザー名()文字列</target>
        </trans-unit>
        <trans-unit id="9e474abefb0933d6026b02a5c17d64d36e5b3bed" translate="yes" xml:space="preserve">
          <source>func (v *Buffers) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (v *Buffers)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="d4adc79152df25dc0b8cbb855469c623b67c566e" translate="yes" xml:space="preserve">
          <source>func (v *Buffers) WriteTo(w io.Writer) (n int64, err error)</source>
          <target state="translated">func (v *Buffers)WriteTo(w io.Writer)(n int64,err error)</target>
        </trans-unit>
        <trans-unit id="88d624b7d4ab0e96f40831112224a73551820efd" translate="yes" xml:space="preserve">
          <source>func (v *Float) Add(delta float64)</source>
          <target state="translated">func (v *Float)Add(delta float64)</target>
        </trans-unit>
        <trans-unit id="0097b6c2424301bc1222bc6f2311ef14b0ddca88" translate="yes" xml:space="preserve">
          <source>func (v *Float) Set(value float64)</source>
          <target state="translated">func (v *Float)Set(値 float64)</target>
        </trans-unit>
        <trans-unit id="027000918b8b5bdfe5947cd16ccdfbb9a7dde036" translate="yes" xml:space="preserve">
          <source>func (v *Float) String() string</source>
          <target state="translated">func (v *Float)String()文字列</target>
        </trans-unit>
        <trans-unit id="0af653084b07e1013c0a8859e6070245b601eed1" translate="yes" xml:space="preserve">
          <source>func (v *Float) Value() float64</source>
          <target state="translated">func (v *Float)Value()float64</target>
        </trans-unit>
        <trans-unit id="a77e28847a27e54aa269b5193ec104dcabb165ca" translate="yes" xml:space="preserve">
          <source>func (v *Int) Add(delta int64)</source>
          <target state="translated">func (v *Int)Add(delta int64)</target>
        </trans-unit>
        <trans-unit id="3ce1389d9c643ae8041d6ee9bd77209a6ea36015" translate="yes" xml:space="preserve">
          <source>func (v *Int) Set(value int64)</source>
          <target state="translated">func (v *Int)Set(値 int64)</target>
        </trans-unit>
        <trans-unit id="c2074ccdc276e0da69dacf0f393a59a2a98d54c0" translate="yes" xml:space="preserve">
          <source>func (v *Int) String() string</source>
          <target state="translated">func (v *Int)String()文字列</target>
        </trans-unit>
        <trans-unit id="1bd1d7ec9acab9fda9f11ef41182dd03aee3ed35" translate="yes" xml:space="preserve">
          <source>func (v *Int) Value() int64</source>
          <target state="translated">func (v *Int)Value()int64</target>
        </trans-unit>
        <trans-unit id="f7cf01177b6262c5bcf5acdbd0c4d34438e63b5b" translate="yes" xml:space="preserve">
          <source>func (v *Map) Add(key string, delta int64)</source>
          <target state="translated">func (v *Map)Add(key string,delta int64)</target>
        </trans-unit>
        <trans-unit id="7c56bc5c4fec8022b4527c9146395592b029aecc" translate="yes" xml:space="preserve">
          <source>func (v *Map) AddFloat(key string, delta float64)</source>
          <target state="translated">func (v *Map)AddFloat(key string,delta float64)</target>
        </trans-unit>
        <trans-unit id="8496fe68289c16d6c1351f94e20e089f61c07643" translate="yes" xml:space="preserve">
          <source>func (v *Map) Delete(key string)</source>
          <target state="translated">func (v *Map)Delete(キー文字列)</target>
        </trans-unit>
        <trans-unit id="cce119b83f1e5cb16f38afc202d0c24031803b9f" translate="yes" xml:space="preserve">
          <source>func (v *Map) Do(f func(KeyValue))</source>
          <target state="translated">func (v *Map)Do(f func(KeyValue))</target>
        </trans-unit>
        <trans-unit id="91a3247baf384f441a4e342f873944074d0fd3fe" translate="yes" xml:space="preserve">
          <source>func (v *Map) Get(key string) Var</source>
          <target state="translated">func (v *Map)Get(キー文字列)Var</target>
        </trans-unit>
        <trans-unit id="f8bfaa014a18ca1ec7383e37f4ac2cf9fa0cdb74" translate="yes" xml:space="preserve">
          <source>func (v *Map) Init() *Map</source>
          <target state="translated">func (v *Map)Init()*Map</target>
        </trans-unit>
        <trans-unit id="b802e850263274d541c1d5cf78d5e19e0e619be4" translate="yes" xml:space="preserve">
          <source>func (v *Map) Set(key string, av Var)</source>
          <target state="translated">func (v *Map)Set(キー文字列,av Var)</target>
        </trans-unit>
        <trans-unit id="63824761420b0e226b96fe040ae774429b45ccf7" translate="yes" xml:space="preserve">
          <source>func (v *Map) String() string</source>
          <target state="translated">func(v *Folder)String()文字列</target>
        </trans-unit>
        <trans-unit id="d194acb5a6ef93f7a2ebbf6da7793bac688a2c57" translate="yes" xml:space="preserve">
          <source>func (v *String) Set(value string)</source>
          <target state="translated">func (v *String)Set(値の文字列)</target>
        </trans-unit>
        <trans-unit id="7fba5507d5e4600abbef167af9a27fb71702b78a" translate="yes" xml:space="preserve">
          <source>func (v *String) String() string</source>
          <target state="translated">func (v *String)String()文字列</target>
        </trans-unit>
        <trans-unit id="ed6ab84088838272d9eed18745c582cf432580e3" translate="yes" xml:space="preserve">
          <source>func (v *String) Value() string</source>
          <target state="translated">func (v *String)Value()文字列</target>
        </trans-unit>
        <trans-unit id="dd4017762c93ed253a8e0f825fa33997c9fcd2ed" translate="yes" xml:space="preserve">
          <source>func (v *Value) Load() (x interface{})</source>
          <target state="translated">func (v *Value)Load()(x interface{})</target>
        </trans-unit>
        <trans-unit id="d38b48cfad546a51a9f7a1b478a85e36a786eb59" translate="yes" xml:space="preserve">
          <source>func (v *Value) Store(x interface{})</source>
          <target state="translated">func (v *Value)Store(x interface{})</target>
        </trans-unit>
        <trans-unit id="c79b6b05b89aeeaacac0b6b63bc8c62dda509657" translate="yes" xml:space="preserve">
          <source>func (v *VariableNode) Copy() Node</source>
          <target state="translated">func (v *VariableNode)Copy()ノード</target>
        </trans-unit>
        <trans-unit id="2f71fc57b55889acf3a034ea97c10e7e94614465" translate="yes" xml:space="preserve">
          <source>func (v *VariableNode) String() string</source>
          <target state="translated">func (v *VariableNode)String()文字列</target>
        </trans-unit>
        <trans-unit id="c70f8032d6320f61f97b88f0e3c8dd5233783a17" translate="yes" xml:space="preserve">
          <source>func (v RowsAffected) RowsAffected() (int64, error)</source>
          <target state="translated">func (v RowsAffected)RowsAffected()(int64,error)</target>
        </trans-unit>
        <trans-unit id="7e8aaa3a5c18bd49cf231e5a49e54a04f7167e15" translate="yes" xml:space="preserve">
          <source>func (v Value) Addr() Value</source>
          <target state="translated">func (v Value)Addr()Value</target>
        </trans-unit>
        <trans-unit id="9759d63287542196bf901c262a17044406a5a700" translate="yes" xml:space="preserve">
          <source>func (v Value) Bool() bool</source>
          <target state="translated">func (v Value)Bool()bool</target>
        </trans-unit>
        <trans-unit id="bb087cf581ce4a55066bd6eb4878658d4e209827" translate="yes" xml:space="preserve">
          <source>func (v Value) Bytes() []byte</source>
          <target state="translated">func (v Value)Bytes()[]バイト</target>
        </trans-unit>
        <trans-unit id="d6aba512c9c6a1da015161b8a9bd154b489a6f67" translate="yes" xml:space="preserve">
          <source>func (v Value) Call(in []Value) []Value</source>
          <target state="translated">func (v Value)コール(in []Value)[]Value</target>
        </trans-unit>
        <trans-unit id="503ede3e29f36d1423f83735a1cbb2b43421cb1a" translate="yes" xml:space="preserve">
          <source>func (v Value) Call(m string, args ...interface{}) Value</source>
          <target state="translated">func (v Value)Call(m string,args ...interface{})Value</target>
        </trans-unit>
        <trans-unit id="70768cef2494d5975eed85f54df37b42eefacc5a" translate="yes" xml:space="preserve">
          <source>func (v Value) CallSlice(in []Value) []Value</source>
          <target state="translated">func (v Value)CallSlice(in []Value)[]Value</target>
        </trans-unit>
        <trans-unit id="181e151a35e2d30de88ddd09f765e81df68cde8c" translate="yes" xml:space="preserve">
          <source>func (v Value) CanAddr() bool</source>
          <target state="translated">func (v Value)CanAddr()bool</target>
        </trans-unit>
        <trans-unit id="f23d2c45fda3d00986e7b6d2886ea0f6756786f3" translate="yes" xml:space="preserve">
          <source>func (v Value) CanInterface() bool</source>
          <target state="translated">func (v Value)CanInterface()bool</target>
        </trans-unit>
        <trans-unit id="943729a1e410d3e82d8589b79ccfd6690ebe6952" translate="yes" xml:space="preserve">
          <source>func (v Value) CanSet() bool</source>
          <target state="translated">func (v Value)CanSet()bool</target>
        </trans-unit>
        <trans-unit id="68a6d82e9f647bd81afebe7648096d69eaadbe2d" translate="yes" xml:space="preserve">
          <source>func (v Value) Cap() int</source>
          <target state="translated">func (v Value)Cap()int</target>
        </trans-unit>
        <trans-unit id="9471114de05b7abd925a2ffe89bfce9a009bc10c" translate="yes" xml:space="preserve">
          <source>func (v Value) Close()</source>
          <target state="translated">func (v Value)閉じる()</target>
        </trans-unit>
        <trans-unit id="a036cbddce5cae1f783139500ff73d3936931b4c" translate="yes" xml:space="preserve">
          <source>func (v Value) Complex() complex128</source>
          <target state="translated">func (v Value)複素数()complex128</target>
        </trans-unit>
        <trans-unit id="d6614bd7c929e7c644a4c2620af1b877c2673835" translate="yes" xml:space="preserve">
          <source>func (v Value) Convert(t Type) Value</source>
          <target state="translated">func (v Value)Convert(t Type)Value</target>
        </trans-unit>
        <trans-unit id="44f2dc3c6ce98de9f1594bed7705c446b037fff4" translate="yes" xml:space="preserve">
          <source>func (v Value) Delete(p string)</source>
          <target state="translated">func (v Value)Delete(p string)</target>
        </trans-unit>
        <trans-unit id="8717b0e3d7efafe42f85c5db1bb04757df0437a6" translate="yes" xml:space="preserve">
          <source>func (v Value) Elem() Value</source>
          <target state="translated">func (v Value)エレム()値</target>
        </trans-unit>
        <trans-unit id="a1a2872951eeaad04cc1abd9295c553c60c5ef73" translate="yes" xml:space="preserve">
          <source>func (v Value) Equal(w Value) bool</source>
          <target state="translated">func (v Value)Equal(w Value)bool</target>
        </trans-unit>
        <trans-unit id="5a29eb802ede9f47586096a67dc6f5293f698b56" translate="yes" xml:space="preserve">
          <source>func (v Value) Field(i int) Value</source>
          <target state="translated">func (v Value)Field(i int)Value</target>
        </trans-unit>
        <trans-unit id="51792bc1c076c9a6e5c1faa33a9b6f7cb1548968" translate="yes" xml:space="preserve">
          <source>func (v Value) FieldByIndex(index []int) Value</source>
          <target state="translated">func (v Value)FieldByIndex(index []int)Value</target>
        </trans-unit>
        <trans-unit id="19fcbbd1ecdf41313f6970579175a129dc02f0b9" translate="yes" xml:space="preserve">
          <source>func (v Value) FieldByName(name string) Value</source>
          <target state="translated">func (v Value)FieldByName(name string)Value</target>
        </trans-unit>
        <trans-unit id="45f93af87099883755568bbe3e76dd4d7c9eff7c" translate="yes" xml:space="preserve">
          <source>func (v Value) FieldByNameFunc(match func(string) bool) Value</source>
          <target state="translated">func (v Value)FieldByNameFunc(match func(string)bool)Value</target>
        </trans-unit>
        <trans-unit id="e678644484b68e5ba53531f9a3265364240c00b7" translate="yes" xml:space="preserve">
          <source>func (v Value) Float() float64</source>
          <target state="translated">func (v Value)Float()float64</target>
        </trans-unit>
        <trans-unit id="0d6fe1ed9ca7b8bf990a0a9e5f244fdbbf7aed5e" translate="yes" xml:space="preserve">
          <source>func (v Value) Get(p string) Value</source>
          <target state="translated">func (v Value)Get(p string)Value</target>
        </trans-unit>
        <trans-unit id="9add5e937708db1bfca43a46d373435365e5e253" translate="yes" xml:space="preserve">
          <source>func (v Value) Index(i int) Value</source>
          <target state="translated">func (v Value)Index(i int)Value</target>
        </trans-unit>
        <trans-unit id="dd7a7c080db56e4b2f87d0fdeddf0e41f070757a" translate="yes" xml:space="preserve">
          <source>func (v Value) InstanceOf(t Value) bool</source>
          <target state="translated">func (v Value)InstanceOf(t Value)bool</target>
        </trans-unit>
        <trans-unit id="f9de2f5047c1b347f1d76afd7c47e730914e7ffa" translate="yes" xml:space="preserve">
          <source>func (v Value) Int() int</source>
          <target state="translated">func (v Value)Int()int</target>
        </trans-unit>
        <trans-unit id="a2220433010967dc62986634ef69c54798fdbc8d" translate="yes" xml:space="preserve">
          <source>func (v Value) Int() int64</source>
          <target state="translated">func (v Value)Int()int64</target>
        </trans-unit>
        <trans-unit id="97e1a9c0519b45e161a28781d13f3f26c288d5ff" translate="yes" xml:space="preserve">
          <source>func (v Value) Interface() (i interface{})</source>
          <target state="translated">func (v Value)Interface()(i interface{})</target>
        </trans-unit>
        <trans-unit id="c784b905446a00797f72f12648e674ebad5fce26" translate="yes" xml:space="preserve">
          <source>func (v Value) InterfaceData() [2]uintptr</source>
          <target state="translated">func (v Value)InterfaceData()[2]uintptr</target>
        </trans-unit>
        <trans-unit id="2347afd2b8e956cf6ce74c52600cc0bdbe7817a9" translate="yes" xml:space="preserve">
          <source>func (v Value) Invoke(args ...interface{}) Value</source>
          <target state="translated">func (v Value)Invoke(args ...interface{})Value</target>
        </trans-unit>
        <trans-unit id="339e920226aee7a040d2879c1254df44d82d3352" translate="yes" xml:space="preserve">
          <source>func (v Value) IsNaN() bool</source>
          <target state="translated">func (v Value)IsNaN()bool</target>
        </trans-unit>
        <trans-unit id="1b5dd7ebc3d162ed1a3c79889045dd558870024d" translate="yes" xml:space="preserve">
          <source>func (v Value) IsNil() bool</source>
          <target state="translated">func (v Value)IsNil()bool</target>
        </trans-unit>
        <trans-unit id="b72a6dce763c76e21ad099bb0f2bb13cfaf8b497" translate="yes" xml:space="preserve">
          <source>func (v Value) IsNull() bool</source>
          <target state="translated">func (v Value)IsNull()bool</target>
        </trans-unit>
        <trans-unit id="941534129861d695cc23b1c55ae1ed5ee1df92c4" translate="yes" xml:space="preserve">
          <source>func (v Value) IsUndefined() bool</source>
          <target state="translated">func (v Value)IsUndefined()bool</target>
        </trans-unit>
        <trans-unit id="4baee19dd0755cb6664832b395b9d67bec320d3c" translate="yes" xml:space="preserve">
          <source>func (v Value) IsValid() bool</source>
          <target state="translated">func (v Value)IsValid()bool</target>
        </trans-unit>
        <trans-unit id="a1e9e4483f3e70b414795d9ced21803a9cfbd98e" translate="yes" xml:space="preserve">
          <source>func (v Value) IsZero() bool</source>
          <target state="translated">func (v Value)IsZero()bool</target>
        </trans-unit>
        <trans-unit id="b25125e0991de263cde977cfa5258cbf3eab448d" translate="yes" xml:space="preserve">
          <source>func (v Value) JSValue() Value</source>
          <target state="translated">func (v Value)JSValue()値</target>
        </trans-unit>
        <trans-unit id="676ec3854939ce619754e66087c7a9a3ad43998a" translate="yes" xml:space="preserve">
          <source>func (v Value) Kind() Kind</source>
          <target state="translated">func (v Value)Kind()Kind</target>
        </trans-unit>
        <trans-unit id="6c2dd08ff68d696ed8cf717a239b8a84381966fe" translate="yes" xml:space="preserve">
          <source>func (v Value) Len() int</source>
          <target state="translated">func (v Value)Len()int</target>
        </trans-unit>
        <trans-unit id="8c0c54d5a6cbe5bd2795fb23a67dd038686bf5b7" translate="yes" xml:space="preserve">
          <source>func (v Value) Length() int</source>
          <target state="translated">func (v Value)長さ()int</target>
        </trans-unit>
        <trans-unit id="f7843dbcb4c62225092e0fa2e139bf37e5c7030a" translate="yes" xml:space="preserve">
          <source>func (v Value) MapIndex(key Value) Value</source>
          <target state="translated">func (v Value)MapIndex(key Value)Value</target>
        </trans-unit>
        <trans-unit id="63d9fb5d8bd6cdacb36a114d2548176fc9fb2cb6" translate="yes" xml:space="preserve">
          <source>func (v Value) MapKeys() []Value</source>
          <target state="translated">func (v Value)MapKeys()[]Value</target>
        </trans-unit>
        <trans-unit id="bd86cfd93ba87ac926e9ca781232edf47f101fca" translate="yes" xml:space="preserve">
          <source>func (v Value) MapRange() *MapIter</source>
          <target state="translated">func (v Value)MapRange()*MapIter</target>
        </trans-unit>
        <trans-unit id="e0b871e9d660feeea31bac5d7b9b1e8946b34f6c" translate="yes" xml:space="preserve">
          <source>func (v Value) Method(i int) Value</source>
          <target state="translated">func (v Value)Method(i int)Value</target>
        </trans-unit>
        <trans-unit id="b2e74bab4a2177ec05ed511e1314d39fce74aac8" translate="yes" xml:space="preserve">
          <source>func (v Value) MethodByName(name string) Value</source>
          <target state="translated">func (v Value)MethodByName(name string)Value</target>
        </trans-unit>
        <trans-unit id="b06da4eb4fc1a7fcc17b5d89b3c8fd876f641b1b" translate="yes" xml:space="preserve">
          <source>func (v Value) New(args ...interface{}) Value</source>
          <target state="translated">func (v Value)New(args ...interface{})Value</target>
        </trans-unit>
        <trans-unit id="bbe75b5db51027789f8d565a8b503377e5b0f315" translate="yes" xml:space="preserve">
          <source>func (v Value) NumField() int</source>
          <target state="translated">func (v Value)NumField()int</target>
        </trans-unit>
        <trans-unit id="97f187306a86c0ef0295bb50b7e55991fa7d1a90" translate="yes" xml:space="preserve">
          <source>func (v Value) NumMethod() int</source>
          <target state="translated">func (v Value)NumMethod()int</target>
        </trans-unit>
        <trans-unit id="57630513bd5427a316a63eb5a3d5cdbaba07c255" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowComplex(x complex128) bool</source>
          <target state="translated">func (v Value)OverflowComplex(x complex128)bool</target>
        </trans-unit>
        <trans-unit id="a73a5a6493d03c1e66b8cc7066abb2c50481bccd" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowFloat(x float64) bool</source>
          <target state="translated">func (v Value)OverflowFloat(x float64)bool</target>
        </trans-unit>
        <trans-unit id="d2d6b31e50677d3c57a5cda65d8265d92a0716c1" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowInt(x int64) bool</source>
          <target state="translated">func (v Value)OverflowInt(x int64)bool</target>
        </trans-unit>
        <trans-unit id="213dd8ff7658773719d09d167d5d4d966a567e87" translate="yes" xml:space="preserve">
          <source>func (v Value) OverflowUint(x uint64) bool</source>
          <target state="translated">func (v Value)OverflowUint(x uint64)bool</target>
        </trans-unit>
        <trans-unit id="5416bdfb57dc5048b75ac13b5fbb661d547ad2fc" translate="yes" xml:space="preserve">
          <source>func (v Value) Pointer() uintptr</source>
          <target state="translated">func (v Value)Pointer()uintptr</target>
        </trans-unit>
        <trans-unit id="d82fc2be3c71dde17ed8a3b9dba7984c97f1d71f" translate="yes" xml:space="preserve">
          <source>func (v Value) Recv() (x Value, ok bool)</source>
          <target state="translated">func (v Value)Recv()(x Value,ok bool)</target>
        </trans-unit>
        <trans-unit id="3ed97e7d6a37c6ee3e8b62ff6df8a044980e82b9" translate="yes" xml:space="preserve">
          <source>func (v Value) Send(x Value)</source>
          <target state="translated">func (v Value)Send(x Value)</target>
        </trans-unit>
        <trans-unit id="f67c2bba1d5b468d5115abb1c8ca70fdcb6b2685" translate="yes" xml:space="preserve">
          <source>func (v Value) Set(p string, x interface{})</source>
          <target state="translated">func (v Value)Set(p string,x interface{})</target>
        </trans-unit>
        <trans-unit id="5a7cf7534246aa8ad6e64760549feb8eb78833bb" translate="yes" xml:space="preserve">
          <source>func (v Value) Set(x Value)</source>
          <target state="translated">func (v Value)Set(x Value)</target>
        </trans-unit>
        <trans-unit id="ea29c5ecb6c699d011143d75b7f8fa708d700dfc" translate="yes" xml:space="preserve">
          <source>func (v Value) SetBool(x bool)</source>
          <target state="translated">func (v Value)SetBool(x bool)</target>
        </trans-unit>
        <trans-unit id="8a3b8d3758778b8dd0587d3d82867bcb5da3ee29" translate="yes" xml:space="preserve">
          <source>func (v Value) SetBytes(x []byte)</source>
          <target state="translated">func (v Value)SetBytes(x []バイト)</target>
        </trans-unit>
        <trans-unit id="55bf9ce0d9b8640c02b959ae73ffcd795303501f" translate="yes" xml:space="preserve">
          <source>func (v Value) SetCap(n int)</source>
          <target state="translated">func (v Value)SetCap(n int)</target>
        </trans-unit>
        <trans-unit id="829e3c7bf1c52444794d1970975524fca2b33273" translate="yes" xml:space="preserve">
          <source>func (v Value) SetComplex(x complex128)</source>
          <target state="translated">func (v Value)SetComplex(x complex128)</target>
        </trans-unit>
        <trans-unit id="171dbcc27f675bc3c459200d5302c25a1d4cafc5" translate="yes" xml:space="preserve">
          <source>func (v Value) SetFloat(x float64)</source>
          <target state="translated">func (v Value)SetFloat(x float64)</target>
        </trans-unit>
        <trans-unit id="6b8ebf3c1c16c0dc6e5e810e8d85d51569ac5176" translate="yes" xml:space="preserve">
          <source>func (v Value) SetIndex(i int, x interface{})</source>
          <target state="translated">func (v Value)SetIndex(i int,x interface{})</target>
        </trans-unit>
        <trans-unit id="fd3f9947591cca39ffc5591d24d05a96a6a127b1" translate="yes" xml:space="preserve">
          <source>func (v Value) SetInt(x int64)</source>
          <target state="translated">func (v Value)SetInt(x int64)</target>
        </trans-unit>
        <trans-unit id="d476607a0355f57515d39257ee310969b882ca18" translate="yes" xml:space="preserve">
          <source>func (v Value) SetLen(n int)</source>
          <target state="translated">func (v Value)SetLen(n int)</target>
        </trans-unit>
        <trans-unit id="b8c7580e7af3f3080ac76660a3cc30567834894f" translate="yes" xml:space="preserve">
          <source>func (v Value) SetMapIndex(key, elem Value)</source>
          <target state="translated">func (v Value)SetMapIndex(key,elem Value)</target>
        </trans-unit>
        <trans-unit id="97c873b62ff3d9891d74c65f8ef0d9f68366b473" translate="yes" xml:space="preserve">
          <source>func (v Value) SetPointer(x unsafe.Pointer)</source>
          <target state="translated">func (v Value)SetPointer(x unsafe.Pointer)</target>
        </trans-unit>
        <trans-unit id="1ae932182c793f27db327142926d6916fa7b0812" translate="yes" xml:space="preserve">
          <source>func (v Value) SetString(x string)</source>
          <target state="translated">func (v Value)SetString(x string)</target>
        </trans-unit>
        <trans-unit id="f05f8b67f9c13c774c9af96a73fbc47dc71b3cb0" translate="yes" xml:space="preserve">
          <source>func (v Value) SetUint(x uint64)</source>
          <target state="translated">func (v Value)SetUint(x uint64)</target>
        </trans-unit>
        <trans-unit id="408cf94c769bc7791bf1dd04d5c21bfd859c72f1" translate="yes" xml:space="preserve">
          <source>func (v Value) Slice(i, j int) Value</source>
          <target state="translated">func (v Value)Slice(i,j int)Value</target>
        </trans-unit>
        <trans-unit id="07f630072031564b7db8b8e3c0f2466bb2e2d5d1" translate="yes" xml:space="preserve">
          <source>func (v Value) Slice3(i, j, k int) Value</source>
          <target state="translated">func (v Value)Slice3(i,j,k int)Value</target>
        </trans-unit>
        <trans-unit id="35540232505331e874be4367e851883c5a1ea799" translate="yes" xml:space="preserve">
          <source>func (v Value) String() string</source>
          <target state="translated">func (v Value)String()文字列</target>
        </trans-unit>
        <trans-unit id="0525363c7d267d711c96111925d9a15aa7b6fc6d" translate="yes" xml:space="preserve">
          <source>func (v Value) Truthy() bool</source>
          <target state="translated">func (v Value)Truthy()bool</target>
        </trans-unit>
        <trans-unit id="6ed44a82ae86e9a6ac66c174ace4e3772905e95b" translate="yes" xml:space="preserve">
          <source>func (v Value) TryRecv() (x Value, ok bool)</source>
          <target state="translated">func (v Value)TryRecv()(x Value,ok bool)</target>
        </trans-unit>
        <trans-unit id="a8294dd756445b490726f56d8ef4440cc3cd8837" translate="yes" xml:space="preserve">
          <source>func (v Value) TrySend(x Value) bool</source>
          <target state="translated">func (v Value)TrySend(x Value)bool</target>
        </trans-unit>
        <trans-unit id="7bf2003d166e35c344154e6a38e46f3b7839f08a" translate="yes" xml:space="preserve">
          <source>func (v Value) Type() Type</source>
          <target state="translated">func (v Value)Type()型</target>
        </trans-unit>
        <trans-unit id="c1df5e047e656372bfad52bd94769a00553c8d54" translate="yes" xml:space="preserve">
          <source>func (v Value) Uint() uint64</source>
          <target state="translated">func (v Value)Uint()uint64</target>
        </trans-unit>
        <trans-unit id="21bbe36a83686715d785ca99cde27a26d14d19bd" translate="yes" xml:space="preserve">
          <source>func (v Value) UnsafeAddr() uintptr</source>
          <target state="translated">func (v Value)UnsafeAddr()uintptr</target>
        </trans-unit>
        <trans-unit id="18223c4e3c12e68ce780892e44e4b4f6c062ba49" translate="yes" xml:space="preserve">
          <source>func (v Values) Add(key, value string)</source>
          <target state="translated">func (v Values)Add(key,value string)</target>
        </trans-unit>
        <trans-unit id="e25a7a9572e28f1e4777e3e867748f86e36a75d6" translate="yes" xml:space="preserve">
          <source>func (v Values) Del(key string)</source>
          <target state="translated">func (v Values)Del(キー文字列)</target>
        </trans-unit>
        <trans-unit id="6caa569bdc38f22de308366fc78f01138afa2e80" translate="yes" xml:space="preserve">
          <source>func (v Values) Encode() string</source>
          <target state="translated">func (v Values)Encode()文字列</target>
        </trans-unit>
        <trans-unit id="41acf3a2b9305d5a25ccf55e41fb6298e509e566" translate="yes" xml:space="preserve">
          <source>func (v Values) Get(key string) string</source>
          <target state="translated">func (v Values)Get(key string)文字列</target>
        </trans-unit>
        <trans-unit id="74ee419041a7ddd8314707de088e882dbe6c937e" translate="yes" xml:space="preserve">
          <source>func (v Values) Set(key, value string)</source>
          <target state="translated">func (v Values)Set(key,value string)</target>
        </trans-unit>
        <trans-unit id="d06c9969b5ed64da16f0679edcfd680ce8fee6df" translate="yes" xml:space="preserve">
          <source>func (w *PipeWriter) Close() error</source>
          <target state="translated">func (w *PipeWriter)Close()エラー</target>
        </trans-unit>
        <trans-unit id="d0566da4c7ca863a3f2d0e722dddc4a4621ac7f6" translate="yes" xml:space="preserve">
          <source>func (w *PipeWriter) CloseWithError(err error) error</source>
          <target state="translated">func (w *PipeWriter)CloseWithError(err error)エラー</target>
        </trans-unit>
        <trans-unit id="473c8fb548c759637500c38673b76abcfab178dd" translate="yes" xml:space="preserve">
          <source>func (w *PipeWriter) Write(data []byte) (n int, err error)</source>
          <target state="translated">func (w *PipeWriter)Write(data []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="55da53a3dda165f1b42c464391d249154644ceaf" translate="yes" xml:space="preserve">
          <source>func (w *WithNode) Copy() Node</source>
          <target state="translated">func (w *WithNode)Copy()ノード</target>
        </trans-unit>
        <trans-unit id="76e03ef997e4a1af4d8bb28a7df56f58fb52bd76" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Alert(m string) error</source>
          <target state="translated">func (w *Writer)Alert(m string)エラー</target>
        </trans-unit>
        <trans-unit id="34c933229d8d10cdb0f933848ef7bc3a39952861" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Boundary() string</source>
          <target state="translated">func (w *Writer)Boundary()文字列</target>
        </trans-unit>
        <trans-unit id="eb7149d0a2dc232cdf03e6178cbaba32d126dcf3" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Close() error</source>
          <target state="translated">func (w *Writer)Close()エラー</target>
        </trans-unit>
        <trans-unit id="38f8058cd7317f8b3985c0d57b49d29f31765465" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Create(name string) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)Create(name string)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="67f6074f6194b0a0b64b2fd54c2f6fb7b5eeb7d9" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreateFormField(fieldname string) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreateFormField(fieldname string)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="146c4424abe74541e5ae8533e1025fb029d08151" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreateFormFile(fieldname,filename string)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="081c5837dcd2cf27313a7a6f3696952286171969" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreateHeader(fh *FileHeader)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="321c8731a4c6de676a2b807806f967af372c6b11" translate="yes" xml:space="preserve">
          <source>func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)</source>
          <target state="translated">func (w *Writer)CreatePart(header textproto.MIMEHeader)(io.Writer,error)</target>
        </trans-unit>
        <trans-unit id="a4dc6b425b6adbae77d7bb32cbb457bb9667cc25" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Crit(m string) error</source>
          <target state="translated">func (w *Writer)Crit(m string)エラー</target>
        </trans-unit>
        <trans-unit id="e3b19671db39977031ae55aa3b7c91a61665c542" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Debug(m string) error</source>
          <target state="translated">func (w *Writer)Debug(m string)エラー</target>
        </trans-unit>
        <trans-unit id="3ead87d3ac79b5b9f8dc2bf135a0a07032c3bc72" translate="yes" xml:space="preserve">
          <source>func (w *Writer) DotWriter() io.WriteCloser</source>
          <target state="translated">func (w *Writer)DotWriter()io.WriteCloser</target>
        </trans-unit>
        <trans-unit id="ba156927e6960d63c6540fba9e2b1073d1cf00ac" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Emerg(m string) error</source>
          <target state="translated">func (w *Writer)Emerg(m string)エラー</target>
        </trans-unit>
        <trans-unit id="a3ad8b9ff29191b4dac78680cfec0806b9a3de72" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Err(m string) error</source>
          <target state="translated">func (w *Writer)Err(m string)エラー</target>
        </trans-unit>
        <trans-unit id="22458b5acdb87081ec478536c9ad71343c17f378" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Error() error</source>
          <target state="translated">func (w *Writer)Error()エラー</target>
        </trans-unit>
        <trans-unit id="ef70c5ebdadc10a87871575aa07e27bcfd7a3424" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Flush()</source>
          <target state="translated">func (w *Writer)Flush()</target>
        </trans-unit>
        <trans-unit id="77396a8bd3f188a7c833c6733a06835f408f94ea" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Flush() error</source>
          <target state="translated">func (w *Writer)Flush()エラー</target>
        </trans-unit>
        <trans-unit id="105681ac5861cfeff86f400dd04e80ce45ea96c9" translate="yes" xml:space="preserve">
          <source>func (w *Writer) FormDataContentType() string</source>
          <target state="translated">func (w *Writer)FormDataContentType()文字列</target>
        </trans-unit>
        <trans-unit id="b0b8fedc90234aa751239408249af57c33505942" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Info(m string) error</source>
          <target state="translated">func (w *Writer)Info(m string)エラー</target>
        </trans-unit>
        <trans-unit id="f1921730731863cb647cf4878abd6b5ceed876d1" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Notice(m string) error</source>
          <target state="translated">func (w *Writer)通知(m 文字列)エラー</target>
        </trans-unit>
        <trans-unit id="d3a83e7e7d973c953d475527d35afde0e30b258a" translate="yes" xml:space="preserve">
          <source>func (w *Writer) PrintfLine(format string, args ...interface{}) error</source>
          <target state="translated">func (w *Writer)PrintfLine(フォーマット文字列,args ...interface{})エラー</target>
        </trans-unit>
        <trans-unit id="d85203b006755cb184da8f3e8c5b6debf1835074" translate="yes" xml:space="preserve">
          <source>func (w *Writer) RegisterCompressor(method uint16, comp Compressor)</source>
          <target state="translated">func (w *Writer)RegisterCompressor(メソッド uint16,comp Compressor)</target>
        </trans-unit>
        <trans-unit id="dcf1ffe84e7fcb52954869e6c14609e2d6c4398b" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Reset(dst io.Writer)</source>
          <target state="translated">func (w *Writer)Reset(dst io.Writer)</target>
        </trans-unit>
        <trans-unit id="7c8cf8e335b1ae2a2b6fc49a071f93416250c8af" translate="yes" xml:space="preserve">
          <source>func (w *Writer) SetBoundary(boundary string) error</source>
          <target state="translated">func (w *Writer)SetBoundary(境界文字列)エラー</target>
        </trans-unit>
        <trans-unit id="40b851abe813846d34b0002877e72231e31a1ba3" translate="yes" xml:space="preserve">
          <source>func (w *Writer) SetComment(comment string) error</source>
          <target state="translated">func (w *Writer)SetComment(コメント文字列)エラー</target>
        </trans-unit>
        <trans-unit id="ce05274883fec7339b25a4d4e99ef0bdda58fde3" translate="yes" xml:space="preserve">
          <source>func (w *Writer) SetOffset(n int64)</source>
          <target state="translated">func (w *Writer)SetOffset(n int64)</target>
        </trans-unit>
        <trans-unit id="c522b70cf9f4b27ed88bf87b376fd79765117cbc" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Warning(m string) error</source>
          <target state="translated">func (w *Writer)Warning(m string)エラー</target>
        </trans-unit>
        <trans-unit id="97b5a59d80ab352effc917e8c65bfb7c750ede5b" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(b []byte) (int, error)</source>
          <target state="translated">func (w *Writer)Write(b []バイト)(int,error)</target>
        </trans-unit>
        <trans-unit id="d6600dffe203ea741b7c192dcf57c959fc225d41" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(data []byte) (n int, err error)</source>
          <target state="translated">func (w *Writer)Write(data []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="130be4678ca7fbcf21a45b64661ea7994b7869fc" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(p []byte) (n int, err error)</source>
          <target state="translated">func (w *Writer)Write(p []バイト)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="09334e7a71bfebc17067c6e7aa9d8b6c954b5bf0" translate="yes" xml:space="preserve">
          <source>func (w *Writer) Write(record []string) error</source>
          <target state="translated">func (w *Writer)Write(レコード []文字列)エラー</target>
        </trans-unit>
        <trans-unit id="3ce668894f072bd6b75021db11c3025905d2709d" translate="yes" xml:space="preserve">
          <source>func (w *Writer) WriteAll(records [][]string) error</source>
          <target state="translated">func (w *Writer)WriteAll(records [][]string)エラー</target>
        </trans-unit>
        <trans-unit id="69d7261459b530fee5ded74dca6f71896530b836" translate="yes" xml:space="preserve">
          <source>func (w *Writer) WriteField(fieldname, value string) error</source>
          <target state="translated">func (w *Writer)WriteField(fieldname,value string)エラー</target>
        </trans-unit>
        <trans-unit id="456971cd6bde718c8af4b14ad659fb9bf9f3d15d" translate="yes" xml:space="preserve">
          <source>func (w StreamWriter) Close() error</source>
          <target state="translated">func (w StreamWriter)Close()エラー</target>
        </trans-unit>
        <trans-unit id="6516139b9096e974c878983b7748b78c9bf8394c" translate="yes" xml:space="preserve">
          <source>func (w StreamWriter) Write(src []byte) (n int, err error)</source>
          <target state="translated">func (w StreamWriter)Write(src []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="bb1d1d6c0517fef020ef1c6494f4a8f34918fb93" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Continued() bool</source>
          <target state="translated">func (w WaitStatus)Continued()bool</target>
        </trans-unit>
        <trans-unit id="73cb542965654ca9040a32f8472530bc69156831" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) CoreDump() bool</source>
          <target state="translated">func (w WaitStatus)CoreDump()bool</target>
        </trans-unit>
        <trans-unit id="c4432c27315feeb5e40a9e14f03018465a15e029" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) ExitStatus() int</source>
          <target state="translated">func (w WaitStatus)ExitStatus()int</target>
        </trans-unit>
        <trans-unit id="ce78807f26bb40f0bc1998aebc75ed47e0b65e87" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Exited() bool</source>
          <target state="translated">func (w WaitStatus)Exited()bool</target>
        </trans-unit>
        <trans-unit id="6f93bb2ff7a28ee6cc8344ba911ef00b025682c1" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Signal() Signal</source>
          <target state="translated">ファンク(w WaitStatus)シグナル()シグナル</target>
        </trans-unit>
        <trans-unit id="c0515bc5fecb076300c60ecfd0bc774211b26ebe" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Signaled() bool</source>
          <target state="translated">func (w WaitStatus)Signaled()bool</target>
        </trans-unit>
        <trans-unit id="2c277fc345a2c0e38495ec814c104ee6013f28f7" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) StopSignal() Signal</source>
          <target state="translated">func (w WaitStatus)StopSignal()Signal</target>
        </trans-unit>
        <trans-unit id="da3057ed50ab70ee185684944815ea70e3a912f9" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) Stopped() bool</source>
          <target state="translated">func (w WaitStatus)Stopped()bool</target>
        </trans-unit>
        <trans-unit id="929a70386bd17c6c6417dcdc3b342d013b16c5b7" translate="yes" xml:space="preserve">
          <source>func (w WaitStatus) TrapCause() int</source>
          <target state="translated">func (w WaitStatus)TrapCause()int</target>
        </trans-unit>
        <trans-unit id="3ec52adde766ddc29d8c38c36a39e39ec1f9540e" translate="yes" xml:space="preserve">
          <source>func (wg *WaitGroup) Add(delta int)</source>
          <target state="translated">func (wg *WaitGroup)Add(delta int)</target>
        </trans-unit>
        <trans-unit id="5ab137c4dde1c8e46e560e89f854103a4ae50137" translate="yes" xml:space="preserve">
          <source>func (wg *WaitGroup) Done()</source>
          <target state="translated">func (wg *WaitGroup)Done()</target>
        </trans-unit>
        <trans-unit id="a6661841b565e69979150c68fc72422bb9f89d71" translate="yes" xml:space="preserve">
          <source>func (wg *WaitGroup) Wait()</source>
          <target state="translated">func (wg *WaitGroup)Wait()</target>
        </trans-unit>
        <trans-unit id="520c8c1f4a9b9a5f63fde0faf17468afb6290ad7" translate="yes" xml:space="preserve">
          <source>func (x *ArrayType) End() token.Pos</source>
          <target state="translated">func (x *ArrayType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="aa13891a574c2124d95307c1e7db02075e847f17" translate="yes" xml:space="preserve">
          <source>func (x *ArrayType) Pos() token.Pos</source>
          <target state="translated">func (x *ArrayType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="48fc516812be4c2d4fa87966c8bc8114e7a5257c" translate="yes" xml:space="preserve">
          <source>func (x *BadExpr) End() token.Pos</source>
          <target state="translated">func (x *BadExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="d2e5dad44792b4cf5fe0cded8abfa95815b3f6ed" translate="yes" xml:space="preserve">
          <source>func (x *BadExpr) Pos() token.Pos</source>
          <target state="translated">func (x *BadExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e90722f7c78f22b2b0adc1a355dce1b4bbd8a5cd" translate="yes" xml:space="preserve">
          <source>func (x *BasicLit) End() token.Pos</source>
          <target state="translated">func (x *BasicLit)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="0d365818e996021e039805be1fed8848751f302d" translate="yes" xml:space="preserve">
          <source>func (x *BasicLit) Pos() token.Pos</source>
          <target state="translated">func(x *BasicLit)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="7d207926b2cb17cfd9c9c1099bd82178a7756f45" translate="yes" xml:space="preserve">
          <source>func (x *BinaryExpr) End() token.Pos</source>
          <target state="translated">func (x *BinaryExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="a4af25ecbe1eafc943d3af2964970ef343e0d0c8" translate="yes" xml:space="preserve">
          <source>func (x *BinaryExpr) Pos() token.Pos</source>
          <target state="translated">func (x *BinaryExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="c03235f63052c9fdbc1b7b4a14392b0631fb5b81" translate="yes" xml:space="preserve">
          <source>func (x *CallExpr) End() token.Pos</source>
          <target state="translated">func (x *CallExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="1ea4708815bf2a15233759eb33928f4abaf8097d" translate="yes" xml:space="preserve">
          <source>func (x *CallExpr) Pos() token.Pos</source>
          <target state="translated">func (x *CallExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="636985ea339cd66554b95e35843c8a2dbe074d2b" translate="yes" xml:space="preserve">
          <source>func (x *ChanType) End() token.Pos</source>
          <target state="translated">func(x *ChanType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="7b7db46e153a92d89e889a1fe6b7868cbf46511f" translate="yes" xml:space="preserve">
          <source>func (x *ChanType) Pos() token.Pos</source>
          <target state="translated">func(x *ChanType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="826d7b1e5e267668d104407c21c45b95158d27fd" translate="yes" xml:space="preserve">
          <source>func (x *CompositeLit) End() token.Pos</source>
          <target state="translated">func (x *CompositeLit)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="5d9eb8eed1bc46e4783e5efd61bb021103004fa5" translate="yes" xml:space="preserve">
          <source>func (x *CompositeLit) Pos() token.Pos</source>
          <target state="translated">func (x *CompositeLit)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="8cbcdf9d00e8f94c3a6a168a331f92215f63feec" translate="yes" xml:space="preserve">
          <source>func (x *Ellipsis) End() token.Pos</source>
          <target state="translated">func (x *Ellipsis)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="c7f3d53648dcded174609619020707759634fd7c" translate="yes" xml:space="preserve">
          <source>func (x *Ellipsis) Pos() token.Pos</source>
          <target state="translated">func (x *Ellipsis)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="84f2625a5158fc1b0b20c208cc793ea40e74aa7a" translate="yes" xml:space="preserve">
          <source>func (x *Float) Acc() Accuracy</source>
          <target state="translated">func (x *Float)Acc()Accuracy</target>
        </trans-unit>
        <trans-unit id="993ebbd7d4ea00264299fc89d2d81273c633eb1a" translate="yes" xml:space="preserve">
          <source>func (x *Float) Append(buf []byte, fmt byte, prec int) []byte</source>
          <target state="translated">func (x *Float)Append(buf []byte,fmt byte,prec int)[]byte</target>
        </trans-unit>
        <trans-unit id="1c5a5068a0e0960a603df5d79ad97b62c380ceed" translate="yes" xml:space="preserve">
          <source>func (x *Float) Cmp(y *Float) int</source>
          <target state="translated">func (x *Float)Cmp(y *Float)int</target>
        </trans-unit>
        <trans-unit id="55cdfd6b7dc1f01131ccfe73190d3797f48c96ca" translate="yes" xml:space="preserve">
          <source>func (x *Float) Float32() (float32, Accuracy)</source>
          <target state="translated">func (x *Float)Float32()(float32,Accuracy)</target>
        </trans-unit>
        <trans-unit id="8d57c59db4aecf636dcd1088a625ea0a422c45df" translate="yes" xml:space="preserve">
          <source>func (x *Float) Float64() (float64, Accuracy)</source>
          <target state="translated">func (x *Float)Float64()(float64,Accuracy)</target>
        </trans-unit>
        <trans-unit id="a03face5c1575a9fd3c4eb8ea2a8b4b2e55f8f30" translate="yes" xml:space="preserve">
          <source>func (x *Float) Format(s fmt.State, format rune)</source>
          <target state="translated">func (x *Float)フォーマット(s fmt.State,format rune)</target>
        </trans-unit>
        <trans-unit id="15372f07b8153105d13c7ee0ddfedbf7e04fb8ec" translate="yes" xml:space="preserve">
          <source>func (x *Float) GobEncode() ([]byte, error)</source>
          <target state="translated">func (x *Float)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="09c9286f36e2af1bd95e4257579e3312584a1b50" translate="yes" xml:space="preserve">
          <source>func (x *Float) Int(z *Int) (*Int, Accuracy)</source>
          <target state="translated">func (x *Float)Int(z *Int)(*Int,Accuracy)</target>
        </trans-unit>
        <trans-unit id="8078c5a78875a608db386230a829243c9c7b03c9" translate="yes" xml:space="preserve">
          <source>func (x *Float) Int64() (int64, Accuracy)</source>
          <target state="translated">func (x *Float)Int64()(int64,Accuracy)</target>
        </trans-unit>
        <trans-unit id="a092d7bfdc14c6aaae246f8e55ed02c8ccae2e5a" translate="yes" xml:space="preserve">
          <source>func (x *Float) IsInf() bool</source>
          <target state="translated">func (x *Float)IsInf()bool</target>
        </trans-unit>
        <trans-unit id="858c392e89c87cc536ab6f9277fbc22c3e67b6ae" translate="yes" xml:space="preserve">
          <source>func (x *Float) IsInt() bool</source>
          <target state="translated">func (x *Float)IsInt()bool</target>
        </trans-unit>
        <trans-unit id="e4ef752cb486698833b944af0d5cb8d7ab00e2a7" translate="yes" xml:space="preserve">
          <source>func (x *Float) MantExp(mant *Float) (exp int)</source>
          <target state="translated">func (x *Float)MantExp(mant *Float)(exp int)</target>
        </trans-unit>
        <trans-unit id="3a9469a59d34125b21cce710d659d62a09f20828" translate="yes" xml:space="preserve">
          <source>func (x *Float) MarshalText() (text []byte, err error)</source>
          <target state="translated">func (x *Float)MarshalText()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="a017a4379ba0b4ada76d59e9672a7e48deb27223" translate="yes" xml:space="preserve">
          <source>func (x *Float) MinPrec() uint</source>
          <target state="translated">func (x *Float)MinPrec()uint</target>
        </trans-unit>
        <trans-unit id="0fa476fc9ec6185a661af47c3f34aa1348e813e9" translate="yes" xml:space="preserve">
          <source>func (x *Float) Mode() RoundingMode</source>
          <target state="translated">func (x *Float)Mode()丸めモード</target>
        </trans-unit>
        <trans-unit id="08ea3bed05d54db4590845f0732186242d6fbd24" translate="yes" xml:space="preserve">
          <source>func (x *Float) Prec() uint</source>
          <target state="translated">func (x *Float)Prec()uint</target>
        </trans-unit>
        <trans-unit id="61f3da50374f08e24275c553fc0f0f82b462c5da" translate="yes" xml:space="preserve">
          <source>func (x *Float) Rat(z *Rat) (*Rat, Accuracy)</source>
          <target state="translated">func (x *Float)Rat(z *Rat)(*Rat,Accuracy)</target>
        </trans-unit>
        <trans-unit id="0eba0dcad0f8fed039016494b53778ef70e23122" translate="yes" xml:space="preserve">
          <source>func (x *Float) Sign() int</source>
          <target state="translated">func (x *Float)Sign()int</target>
        </trans-unit>
        <trans-unit id="ac6bb31ca45acd3af367a30e0876e686dbc35c55" translate="yes" xml:space="preserve">
          <source>func (x *Float) Signbit() bool</source>
          <target state="translated">func (x *Float)Signbit()bool</target>
        </trans-unit>
        <trans-unit id="79e914bffef43931f0c5c493b2e65262ab74fbdf" translate="yes" xml:space="preserve">
          <source>func (x *Float) String() string</source>
          <target state="translated">func (x *Float)String()文字列</target>
        </trans-unit>
        <trans-unit id="ca6fe0c1e6d3da386eb9af0f01a8053f61726e25" translate="yes" xml:space="preserve">
          <source>func (x *Float) Text(format byte, prec int) string</source>
          <target state="translated">func (x *Float)Text(format byte,prec int)文字列</target>
        </trans-unit>
        <trans-unit id="00f7c195c9184187afd61e13f58d74f2423f237a" translate="yes" xml:space="preserve">
          <source>func (x *Float) Uint64() (uint64, Accuracy)</source>
          <target state="translated">func (x *Float)Uint64()(uint64,Accuracy)</target>
        </trans-unit>
        <trans-unit id="abc2d9ae2fec98e9c1d32c34b88a8b4feba4a9e1" translate="yes" xml:space="preserve">
          <source>func (x *FuncLit) End() token.Pos</source>
          <target state="translated">func(x *FuncLit)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="1d546abf823d1db83e7850db3eb2aef55f7b1cdc" translate="yes" xml:space="preserve">
          <source>func (x *FuncLit) Pos() token.Pos</source>
          <target state="translated">func(x *FuncLit)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="f8469d401f2e3b0de7eeb608a32c83bae56c8d32" translate="yes" xml:space="preserve">
          <source>func (x *FuncType) End() token.Pos</source>
          <target state="translated">func (x *FuncType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="b257d64c578dbfb32ae2f6d4d5f1f84fb3be657d" translate="yes" xml:space="preserve">
          <source>func (x *FuncType) Pos() token.Pos</source>
          <target state="translated">func(x *FuncType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="387f57c6ee37d1ce79aa655a140a8dffc8951abd" translate="yes" xml:space="preserve">
          <source>func (x *Ident) End() token.Pos</source>
          <target state="translated">func (x *Ident)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="735db4e0255c0f19107ad23fb35b5114c5333ad1" translate="yes" xml:space="preserve">
          <source>func (x *Ident) Pos() token.Pos</source>
          <target state="translated">func (x *Ident)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e6de3d07d919fcba4d53d4a722c770d7b92fafb3" translate="yes" xml:space="preserve">
          <source>func (x *Index) Bytes() []byte</source>
          <target state="translated">func (x *Index)Bytes()[]バイト</target>
        </trans-unit>
        <trans-unit id="017e4bebae335051bbcaff1f2315b0aee4ec639b" translate="yes" xml:space="preserve">
          <source>func (x *Index) FindAllIndex(r *regexp.Regexp, n int) (result [][]int)</source>
          <target state="translated">func (x *Index)FindAllIndex(r *regexp.Regexp,n int)(result [][]int)</target>
        </trans-unit>
        <trans-unit id="f674499f82562927f37772e499e79a0e387f9cf2" translate="yes" xml:space="preserve">
          <source>func (x *Index) Lookup(s []byte, n int) (result []int)</source>
          <target state="translated">func (x *Index)Lookup(s []byte,n int)(result []int)</target>
        </trans-unit>
        <trans-unit id="5220497e6f1a310c03f566390f97e76532f26707" translate="yes" xml:space="preserve">
          <source>func (x *Index) Read(r io.Reader) error</source>
          <target state="translated">func (x *Index)Read(r io.Reader)エラー</target>
        </trans-unit>
        <trans-unit id="b13a5deea6ef2033740791f25ebc32448a6c4793" translate="yes" xml:space="preserve">
          <source>func (x *Index) Write(w io.Writer) error</source>
          <target state="translated">func (x *Index)Write(w io.Writer)エラー</target>
        </trans-unit>
        <trans-unit id="fdb8dc781574a635b05e2bf8efd5b0c25159847b" translate="yes" xml:space="preserve">
          <source>func (x *IndexExpr) End() token.Pos</source>
          <target state="translated">func (x *IndexExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="2bcfae1a88feb3f1beec9fa47c1c958b4f028e4d" translate="yes" xml:space="preserve">
          <source>func (x *IndexExpr) Pos() token.Pos</source>
          <target state="translated">func (x *IndexExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="2e1d4992aa73ced67efc0bbcdd8cde131281a7dc" translate="yes" xml:space="preserve">
          <source>func (x *Int) Append(buf []byte, base int) []byte</source>
          <target state="translated">func (x *Int)Append(buf []byte,base int)[]byte</target>
        </trans-unit>
        <trans-unit id="1a76815ffa12d652ee7783aa2a5e45f3ed53de29" translate="yes" xml:space="preserve">
          <source>func (x *Int) Bit(i int) uint</source>
          <target state="translated">func (x *Int)Bit(i int)uint</target>
        </trans-unit>
        <trans-unit id="4c37f1eec8f65563902951d1dcbf4828acdb39ee" translate="yes" xml:space="preserve">
          <source>func (x *Int) BitLen() int</source>
          <target state="translated">func (x *Int)BitLen()int</target>
        </trans-unit>
        <trans-unit id="721baff73e9796634b5bf3bd7bf94ccb004e6c5e" translate="yes" xml:space="preserve">
          <source>func (x *Int) Bits() []Word</source>
          <target state="translated">func (x *Int)Bits()[]Word</target>
        </trans-unit>
        <trans-unit id="94d28b6e796fc4dcf68c894c9d28f9fd3402c3bb" translate="yes" xml:space="preserve">
          <source>func (x *Int) Bytes() []byte</source>
          <target state="translated">func (x *Int)Bytes()[]バイト</target>
        </trans-unit>
        <trans-unit id="ddda283261ef1a946bdf11deaece1b827bdf28b6" translate="yes" xml:space="preserve">
          <source>func (x *Int) Cmp(y *Int) (r int)</source>
          <target state="translated">func (x *Int)Cmp(y *Int)(r int)</target>
        </trans-unit>
        <trans-unit id="d9f9fcfa4fede0bc9cdf9ab1456bb0b93c4ff0c5" translate="yes" xml:space="preserve">
          <source>func (x *Int) CmpAbs(y *Int) int</source>
          <target state="translated">func (x *Int)CmpAbs(y *Int)int</target>
        </trans-unit>
        <trans-unit id="82e8c7bc93edf3c684a0e72946eb560494eb225f" translate="yes" xml:space="preserve">
          <source>func (x *Int) FillBytes(buf []byte) []byte</source>
          <target state="translated">func (x *Int)FillBytes(buf []バイト)[]バイト</target>
        </trans-unit>
        <trans-unit id="e10121ef4117019eaf6d7fadf2f3918122be46f1" translate="yes" xml:space="preserve">
          <source>func (x *Int) Format(s fmt.State, ch rune)</source>
          <target state="translated">func (x *Int)フォーマット(s fmt.State,ch rune)</target>
        </trans-unit>
        <trans-unit id="ae9f4da78e622b24babaad83fcb864bd1a2a4fb1" translate="yes" xml:space="preserve">
          <source>func (x *Int) GobEncode() ([]byte, error)</source>
          <target state="translated">func (x *Int)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="2d08ab2e4297b6abfd7a5f31002bfdcb0cbea403" translate="yes" xml:space="preserve">
          <source>func (x *Int) Int64() int64</source>
          <target state="translated">func (x *Int)Int64()int64</target>
        </trans-unit>
        <trans-unit id="eca3291c138c403ad693a96a9c2752264b51d1ad" translate="yes" xml:space="preserve">
          <source>func (x *Int) IsInt64() bool</source>
          <target state="translated">func (x *Int)IsInt64()bool</target>
        </trans-unit>
        <trans-unit id="5dab2f4ba4c38e285d4fdfa0f5c3f8314ef80975" translate="yes" xml:space="preserve">
          <source>func (x *Int) IsUint64() bool</source>
          <target state="translated">func (x *Int)IsUint64()bool</target>
        </trans-unit>
        <trans-unit id="e362f62e57b41f5b994fb5eeb7d7fd0092e94f7a" translate="yes" xml:space="preserve">
          <source>func (x *Int) MarshalJSON() ([]byte, error)</source>
          <target state="translated">func (x *Int)MarshalJSON()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="5a13ff5d3d432520cd1e05b38d68298fb50cdbb3" translate="yes" xml:space="preserve">
          <source>func (x *Int) MarshalText() (text []byte, err error)</source>
          <target state="translated">func (x *Int)MarshalText()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="a4b7329694fd329899f112de38b7d6f164f5abde" translate="yes" xml:space="preserve">
          <source>func (x *Int) ProbablyPrime(n int) bool</source>
          <target state="translated">func (x *Int)ProbablyPrime(n int)bool</target>
        </trans-unit>
        <trans-unit id="5dd69a88723cf0992c7c43d55ca1384aca277141" translate="yes" xml:space="preserve">
          <source>func (x *Int) Sign() int</source>
          <target state="translated">func (x *Int)Sign()int</target>
        </trans-unit>
        <trans-unit id="674ddf3868eaba2a7f7cad23fcbc291fc2de9abe" translate="yes" xml:space="preserve">
          <source>func (x *Int) String() string</source>
          <target state="translated">func (x *Int)String()文字列</target>
        </trans-unit>
        <trans-unit id="5f165189cd6cc073dc2bdb6897a1fb6be4379f08" translate="yes" xml:space="preserve">
          <source>func (x *Int) Text(base int) string</source>
          <target state="translated">func (x *Int)テキスト(ベース int)文字列</target>
        </trans-unit>
        <trans-unit id="058f80b47981b4d9b85103233103d4b768326dfe" translate="yes" xml:space="preserve">
          <source>func (x *Int) TrailingZeroBits() uint</source>
          <target state="translated">func (x *Int)TrailingZeroBits()uint</target>
        </trans-unit>
        <trans-unit id="c53fee04bfbeb7a46be8aa5bc7f9732c7e78afc9" translate="yes" xml:space="preserve">
          <source>func (x *Int) Uint64() uint64</source>
          <target state="translated">func (x *Int)Uint64()uint64</target>
        </trans-unit>
        <trans-unit id="9274efe403ff65fcab258c4c971009997860d7a0" translate="yes" xml:space="preserve">
          <source>func (x *InterfaceType) End() token.Pos</source>
          <target state="translated">func (x *InterfaceType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e31e285172489e41779eb5dc3d3799e0464aadea" translate="yes" xml:space="preserve">
          <source>func (x *InterfaceType) Pos() token.Pos</source>
          <target state="translated">func (x *InterfaceType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="b9f551c9ad971a6fb3cd7f56243fbfe18fe249b3" translate="yes" xml:space="preserve">
          <source>func (x *KeyValueExpr) End() token.Pos</source>
          <target state="translated">func (x *KeyValueExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="ebca08af0f00537dbced2b4f3ac513761625a64e" translate="yes" xml:space="preserve">
          <source>func (x *KeyValueExpr) Pos() token.Pos</source>
          <target state="translated">func (x *KeyValueExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="9a3e97370402d9779b53ecbc93978fc2940d7963" translate="yes" xml:space="preserve">
          <source>func (x *MapType) End() token.Pos</source>
          <target state="translated">func(x *MapType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="eaa3798c4bcbc99d61d28b6577ef0ced68a8a1bf" translate="yes" xml:space="preserve">
          <source>func (x *MapType) Pos() token.Pos</source>
          <target state="translated">func(x *MapType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="bb7b3fb9eae9c240c3b0d6e167d0235fbdfca42a" translate="yes" xml:space="preserve">
          <source>func (x *ParenExpr) End() token.Pos</source>
          <target state="translated">func (x *ParenExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="31698d8d7c622d41e5a767c851950361b315db1b" translate="yes" xml:space="preserve">
          <source>func (x *ParenExpr) Pos() token.Pos</source>
          <target state="translated">func (x *ParenExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="53dbc2925d8dee1477abc26b11c485ee7d53172f" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Cmp(y *Rat) int</source>
          <target state="translated">func(x *Rat)Cmp(y *Rat)int</target>
        </trans-unit>
        <trans-unit id="34020081133317232e105e0ca22032046844b930" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Denom() *Int</source>
          <target state="translated">func (x *Rat)Denom()*Int</target>
        </trans-unit>
        <trans-unit id="909c902fc81b59825298c88b59ba006dc72ddf7f" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Float32() (f float32, exact bool)</source>
          <target state="translated">func (x *Rat)Float32()(f float32,正確な bool)</target>
        </trans-unit>
        <trans-unit id="4d883541e6024e3cd9c821e874c73801e330e6ca" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Float64() (f float64, exact bool)</source>
          <target state="translated">func (x *Rat)Float64()(f float64,正確な bool)</target>
        </trans-unit>
        <trans-unit id="d6503a691278e8221c6595b2c2ad6d7b410db184" translate="yes" xml:space="preserve">
          <source>func (x *Rat) FloatString(prec int) string</source>
          <target state="translated">func (x *Rat)FloatString(prec int)文字列</target>
        </trans-unit>
        <trans-unit id="617ed31b000d864bbff1b52749bb62e888779c4d" translate="yes" xml:space="preserve">
          <source>func (x *Rat) GobEncode() ([]byte, error)</source>
          <target state="translated">func (x *Rat)GobEncode()([]byte,error)</target>
        </trans-unit>
        <trans-unit id="619fe0f48675a3c9274c9ad900bd1b6d8c0c7d0d" translate="yes" xml:space="preserve">
          <source>func (x *Rat) IsInt() bool</source>
          <target state="translated">func (x *Rat)IsInt()bool</target>
        </trans-unit>
        <trans-unit id="8bcae6a33d265e64bbcf59d7354319ab20383a8b" translate="yes" xml:space="preserve">
          <source>func (x *Rat) MarshalText() (text []byte, err error)</source>
          <target state="translated">func (x *Rat)MarshalText()(text []byte,err error)</target>
        </trans-unit>
        <trans-unit id="ba5c2e502bf97d67c8bf0550186f6c4477bffd9d" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Num() *Int</source>
          <target state="translated">func (x *Rat)Num()*Int</target>
        </trans-unit>
        <trans-unit id="473ed73505fb61d9544497589e4f55f999d4c82c" translate="yes" xml:space="preserve">
          <source>func (x *Rat) RatString() string</source>
          <target state="translated">func (x *Rat)RatString()文字列</target>
        </trans-unit>
        <trans-unit id="2eff13a9d9b960cbfe8e0547210343c7cc0fcf43" translate="yes" xml:space="preserve">
          <source>func (x *Rat) Sign() int</source>
          <target state="translated">func (x *Rat)Sign()int</target>
        </trans-unit>
        <trans-unit id="f4304c3b419ee75f50a2d26714e48af3144e0bf1" translate="yes" xml:space="preserve">
          <source>func (x *Rat) String() string</source>
          <target state="translated">func (x *Rat)String()文字列</target>
        </trans-unit>
        <trans-unit id="40d5cc588cbe5478104bb6c880bdc8932fd4751f" translate="yes" xml:space="preserve">
          <source>func (x *Regexp) Equal(y *Regexp) bool</source>
          <target state="translated">func (x *Regexp)Equal(y *Regexp)bool</target>
        </trans-unit>
        <trans-unit id="193b17db03f65d08a53fa5e538959e1d1a3bd082" translate="yes" xml:space="preserve">
          <source>func (x *SelectorExpr) End() token.Pos</source>
          <target state="translated">func (x *SelectorExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="f4c81b6a4df1ab6bd630b9c013e3e3fdbc8625c5" translate="yes" xml:space="preserve">
          <source>func (x *SelectorExpr) Pos() token.Pos</source>
          <target state="translated">func (x *SelectorExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="7aa400dad8ef6b7c80464bdf8764952bcde6ca35" translate="yes" xml:space="preserve">
          <source>func (x *SliceExpr) End() token.Pos</source>
          <target state="translated">func (x *SliceExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="8eee18bdf8f79d62781cd00e3fda2ccaf36ccf75" translate="yes" xml:space="preserve">
          <source>func (x *SliceExpr) Pos() token.Pos</source>
          <target state="translated">func (x *SliceExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="e2807fc084648c0ed910aee7441ee6037d814a45" translate="yes" xml:space="preserve">
          <source>func (x *StarExpr) End() token.Pos</source>
          <target state="translated">func (x *StarExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="e0013ce5a1937caefa6e00fee046f63128de960e" translate="yes" xml:space="preserve">
          <source>func (x *StarExpr) Pos() token.Pos</source>
          <target state="translated">func (x *StarExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="84ee3f37a366ed9ad79df74b1927c530c4b64e7d" translate="yes" xml:space="preserve">
          <source>func (x *StructType) End() token.Pos</source>
          <target state="translated">func (x *StructType)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="7f096110f8092d8996bbda58d6dd6c2fed44991f" translate="yes" xml:space="preserve">
          <source>func (x *StructType) Pos() token.Pos</source>
          <target state="translated">func (x *StructType)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="9774898ad3142ed7d4c72dfb87bac7c7bdf051d6" translate="yes" xml:space="preserve">
          <source>func (x *TypeAssertExpr) End() token.Pos</source>
          <target state="translated">func (x *TypeAssertExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="040d5c2955bd18e4a3892c2795ee0ea2a2d69957" translate="yes" xml:space="preserve">
          <source>func (x *TypeAssertExpr) Pos() token.Pos</source>
          <target state="translated">func (x *TypeAssertExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="10d15f2e0419f9cf027c73c951187953b3e899fe" translate="yes" xml:space="preserve">
          <source>func (x *UnaryExpr) End() token.Pos</source>
          <target state="translated">func (x *UnaryExpr)End()token.Pos</target>
        </trans-unit>
        <trans-unit id="52d6bb64a65036c4095766b727a107d5a86194cc" translate="yes" xml:space="preserve">
          <source>func (x *UnaryExpr) Pos() token.Pos</source>
          <target state="translated">func (x *UnaryExpr)Pos()token.Pos</target>
        </trans-unit>
        <trans-unit id="15536609e987857dd8f06c91a52be8d8eb1a9b5f" translate="yes" xml:space="preserve">
          <source>func (z *Float) Abs(x *Float) *Float</source>
          <target state="translated">func (z *Float)Abs(x *Float)*Float</target>
        </trans-unit>
        <trans-unit id="34f9bb80b4be7cc6ab77d522e2759d47ed11745f" translate="yes" xml:space="preserve">
          <source>func (z *Float) Add(x, y *Float) *Float</source>
          <target state="translated">func (z *Float)Add(x,y *Float)*Float</target>
        </trans-unit>
        <trans-unit id="0416d1f703e6010e4f1a3555936f40ec63be2aaf" translate="yes" xml:space="preserve">
          <source>func (z *Float) Copy(x *Float) *Float</source>
          <target state="translated">func (z *Float)Copy(x *Float)*Float</target>
        </trans-unit>
        <trans-unit id="2e7822ec0a10c665103f130401810862f3685764" translate="yes" xml:space="preserve">
          <source>func (z *Float) GobDecode(buf []byte) error</source>
          <target state="translated">func (z *Float)GobDecode(buf []byte)エラー</target>
        </trans-unit>
        <trans-unit id="b563afff0b56572d5cd8b3db32de7ee35b76136b" translate="yes" xml:space="preserve">
          <source>func (z *Float) Mul(x, y *Float) *Float</source>
          <target state="translated">func (z *Float)Mul(x,y *Float)*Float</target>
        </trans-unit>
        <trans-unit id="5515545029d30c8aef6996fd17c5a509d843f248" translate="yes" xml:space="preserve">
          <source>func (z *Float) Neg(x *Float) *Float</source>
          <target state="translated">ポンド</target>
        </trans-unit>
        <trans-unit id="5f289eefda109edb4058957884ae4caea7f19f7d" translate="yes" xml:space="preserve">
          <source>func (z *Float) Parse(s string, base int) (f *Float, b int, err error)</source>
          <target state="translated">func (z *Float)Parse(s string,base int)(f *Float,b int,err error)</target>
        </trans-unit>
        <trans-unit id="d1699fa105a72b4eb8583f486bba17e6cae0d633" translate="yes" xml:space="preserve">
          <source>func (z *Float) Quo(x, y *Float) *Float</source>
          <target state="translated">func (z *Float)Quo(x,y *Float)*Float</target>
        </trans-unit>
        <trans-unit id="b1d8a75a342fce091827353f467e8a56010c9297" translate="yes" xml:space="preserve">
          <source>func (z *Float) Scan(s fmt.ScanState, ch rune) error</source>
          <target state="translated">func (z *Float)Scan(s fmt.ScanState,ch rune)エラー</target>
        </trans-unit>
        <trans-unit id="74fb2cf12de44957c6a1abdcddc22e846bd97710" translate="yes" xml:space="preserve">
          <source>func (z *Float) Set(x *Float) *Float</source>
          <target state="translated">func (z *Float)Set(x *Float)*Float</target>
        </trans-unit>
        <trans-unit id="f252d6c1945441caec82a9beae9cb1fbe3fe4e23" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetFloat64(x float64) *Float</source>
          <target state="translated">func (z *Float)SetFloat64(x float64)*Float</target>
        </trans-unit>
        <trans-unit id="bc9b73f6c697fcc278ba97cd209a4cb5a0478e48" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetInf(signbit bool) *Float</source>
          <target state="translated">func (z *Float)SetInf(signbit bool)*Float</target>
        </trans-unit>
        <trans-unit id="2509b98d03e9fb132e3198bf03a95c6e88583ba9" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetInt(x *Int) *Float</source>
          <target state="translated">func (z *Float)SetInt(x *Int)*Float</target>
        </trans-unit>
        <trans-unit id="275e6c7587895e932425c6a8902f34b58f459e21" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetInt64(x int64) *Float</source>
          <target state="translated">func (z *Float)SetInt64(x int64)*Float</target>
        </trans-unit>
        <trans-unit id="41308f47cd39aa83acb220022556c45b17bcff4c" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetMantExp(mant *Float, exp int) *Float</source>
          <target state="translated">func (z *Float)SetMantExp(mant *Float,exp int)*Float</target>
        </trans-unit>
        <trans-unit id="5290dc8fb0ec1c22c1d861740264bd88fc728cf0" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetMode(mode RoundingMode) *Float</source>
          <target state="translated">func (z *Float)SetMode(mode RoundingMode)*Float</target>
        </trans-unit>
        <trans-unit id="69523d3022a9bc9a6560137e734a0c624ae94c9f" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetPrec(prec uint) *Float</source>
          <target state="translated">func (z *Float)SetPrec(prec uint)*Float</target>
        </trans-unit>
        <trans-unit id="7c70c5590022eaad939b757d3de818725447fd79" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetRat(x *Rat) *Float</source>
          <target state="translated">func(z *Float)SetRat(x *Rat)*Float</target>
        </trans-unit>
        <trans-unit id="fbf182e14f8dc21d3f141ee5c755febdc32a4fde" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetString(s string) (*Float, bool)</source>
          <target state="translated">func (z *Float)SetString(s string)(*Float,bool)</target>
        </trans-unit>
        <trans-unit id="cd43a536b4adeaacc77b25bdeea348356ea977f8" translate="yes" xml:space="preserve">
          <source>func (z *Float) SetUint64(x uint64) *Float</source>
          <target state="translated">func (z *Float)SetUint64(x uint64)*Float</target>
        </trans-unit>
        <trans-unit id="e3dd4d8ad1c448aa8bd7d12dfae8f345c8283ffb" translate="yes" xml:space="preserve">
          <source>func (z *Float) Sqrt(x *Float) *Float</source>
          <target state="translated">Sqrt(x *Float)*Float</target>
        </trans-unit>
        <trans-unit id="99c6f606609cec1f6d908959047da494d07b3730" translate="yes" xml:space="preserve">
          <source>func (z *Float) Sub(x, y *Float) *Float</source>
          <target state="translated">ポンド(※フロート付き)Sub(x,y *Float)*Float</target>
        </trans-unit>
        <trans-unit id="6d5b9cd93e89c216e20e6d1d6968659d994e2822" translate="yes" xml:space="preserve">
          <source>func (z *Float) UnmarshalText(text []byte) error</source>
          <target state="translated">func (z *Float)UnmarshalText(text []byte)エラー</target>
        </trans-unit>
        <trans-unit id="b7f4dd34363a4de00ee5777a3d9f332c45f3ef9e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Abs(x *Int) *Int</source>
          <target state="translated">func (z *Int)Abs(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="937a67c42fde96e462bdb7ac163eee667434200e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Add(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Add(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="b68480a56e2b8ccab93e2ff224f88556741388c7" translate="yes" xml:space="preserve">
          <source>func (z *Int) And(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)And(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="8c82def95c8a3a5861e2df6cf159b84528568f90" translate="yes" xml:space="preserve">
          <source>func (z *Int) AndNot(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)AndNot(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="cb44cfee1e138dcc7e42b9c20f2e32debf03cfa1" translate="yes" xml:space="preserve">
          <source>func (z *Int) Binomial(n, k int64) *Int</source>
          <target state="translated">func (z *Int)二項式(n,k int64)*Int</target>
        </trans-unit>
        <trans-unit id="bfb4b3d7f074228305440ad278c460cbb122c027" translate="yes" xml:space="preserve">
          <source>func (z *Int) Div(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Div(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="22a4f77b297dc1ce841aaec2d125579fbe368afa" translate="yes" xml:space="preserve">
          <source>func (z *Int) DivMod(x, y, m *Int) (*Int, *Int)</source>
          <target state="translated">func (z *Int)DivMod(x,y,m *Int)(*Int,*Int)</target>
        </trans-unit>
        <trans-unit id="4cdc35b2e4c13a17638787b83e4997dd29da59e3" translate="yes" xml:space="preserve">
          <source>func (z *Int) Exp(x, y, m *Int) *Int</source>
          <target state="translated">func (z *Int)Exp(x,y,m *Int)*Int</target>
        </trans-unit>
        <trans-unit id="bc40d4fbcf50d33af42ec0fc5858f2fc61f6b997" translate="yes" xml:space="preserve">
          <source>func (z *Int) GCD(x, y, a, b *Int) *Int</source>
          <target state="translated">func (z *Int)GCD(x,y,a,b *Int)*Int</target>
        </trans-unit>
        <trans-unit id="3d8adcf2879817a12021e3d1af44153e97d7cd40" translate="yes" xml:space="preserve">
          <source>func (z *Int) GobDecode(buf []byte) error</source>
          <target state="translated">func (z *Int)GobDecode(buf []バイト)エラー</target>
        </trans-unit>
        <trans-unit id="709d012d236bec2844ea298aa809477a1543cc5d" translate="yes" xml:space="preserve">
          <source>func (z *Int) Lsh(x *Int, n uint) *Int</source>
          <target state="translated">func (z *Int)Lsh(x *Int,n uint)*Int</target>
        </trans-unit>
        <trans-unit id="6a1ceabdff186aa34137d8c6dab2dca76b4f2dfb" translate="yes" xml:space="preserve">
          <source>func (z *Int) Mod(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Mod(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="0585ea5122291517bc8f4a067f808a4284417e0d" translate="yes" xml:space="preserve">
          <source>func (z *Int) ModInverse(g, n *Int) *Int</source>
          <target state="translated">func (z *Int)ModInverse(g,n *Int)*Int</target>
        </trans-unit>
        <trans-unit id="ac5fc73129aff51f90089d1778813c75a1111f82" translate="yes" xml:space="preserve">
          <source>func (z *Int) ModSqrt(x, p *Int) *Int</source>
          <target state="translated">func (z *Int)ModSqrt(x,p *Int)*Int</target>
        </trans-unit>
        <trans-unit id="7009f7610af615adae29a818a1f29e5d4154a659" translate="yes" xml:space="preserve">
          <source>func (z *Int) Mul(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Mul(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="9adce673ae56835343ace70e71e606bf6fadcd1a" translate="yes" xml:space="preserve">
          <source>func (z *Int) MulRange(a, b int64) *Int</source>
          <target state="translated">func (z *Int)MulRange(a,b int64)*Int</target>
        </trans-unit>
        <trans-unit id="cec3b4215567e50a6cca0b7ddaad665595f9603e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Neg(x *Int) *Int</source>
          <target state="translated">func (z *Int)Neg(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="1cf3bda5460b4ebd0d66a2f61a67360db6d50d7d" translate="yes" xml:space="preserve">
          <source>func (z *Int) Not(x *Int) *Int</source>
          <target state="translated">func (z *Int)Not(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="c7c6f819cb7b71fb43a32d23a6df05b176a79814" translate="yes" xml:space="preserve">
          <source>func (z *Int) Or(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Or(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="bff95fc9d5dc56c5c3501b02aac5077a798a4b98" translate="yes" xml:space="preserve">
          <source>func (z *Int) Quo(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Quo(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="ba9baac99c3c85fa34dbc327cd563c15be5f5003" translate="yes" xml:space="preserve">
          <source>func (z *Int) QuoRem(x, y, r *Int) (*Int, *Int)</source>
          <target state="translated">func (z *Int)QuoRem(x,y,r *Int)(*Int,*Int)</target>
        </trans-unit>
        <trans-unit id="e62f62fe79ac2178d9e73296f6f762d994c37da9" translate="yes" xml:space="preserve">
          <source>func (z *Int) Rand(rnd *rand.Rand, n *Int) *Int</source>
          <target state="translated">func(z *Int)Rand(rnd *rand.Rand,n *Int)*Int</target>
        </trans-unit>
        <trans-unit id="74bf64240b66920a86c249215a13b52c162bab45" translate="yes" xml:space="preserve">
          <source>func (z *Int) Rem(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Brake(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="184551a48b52da89049de6ef721a95d01ccf31d3" translate="yes" xml:space="preserve">
          <source>func (z *Int) Rsh(x *Int, n uint) *Int</source>
          <target state="translated">func(z *Int)Rsh(x *Int,n uint)*Int</target>
        </trans-unit>
        <trans-unit id="3022f13db80e06640e7a5f582485a4115a8cab75" translate="yes" xml:space="preserve">
          <source>func (z *Int) Scan(s fmt.ScanState, ch rune) error</source>
          <target state="translated">func (z *Int)Scan(s fmt.ScanState,ch rune)エラー</target>
        </trans-unit>
        <trans-unit id="5031f87b0417de292de71e249d76a4bc3cbac2c2" translate="yes" xml:space="preserve">
          <source>func (z *Int) Set(x *Int) *Int</source>
          <target state="translated">func (z *Int)Set(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="fb2ae61d366c4f2257568622ba82ac7fc8f44e19" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetBit(x *Int, i int, b uint) *Int</source>
          <target state="translated">func (z *Int)SetBit(x *Int,i int,b uint)*Int</target>
        </trans-unit>
        <trans-unit id="d022dfc754d9313d5a3c32cb281deeaf8afc28c2" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetBits(abs []Word) *Int</source>
          <target state="translated">func (z *Int)SetBits(abs []Word)*Int</target>
        </trans-unit>
        <trans-unit id="7b4d5f31ca55f157ef7fa499955cc1c292b8e847" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetBytes(buf []byte) *Int</source>
          <target state="translated">func (z *Int)SetBytes(buf []バイト)*Int</target>
        </trans-unit>
        <trans-unit id="b21462ef9ab6c707da8b211f79e5225cdb9d846b" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetInt64(x int64) *Int</source>
          <target state="translated">func (z *Int)SetInt64(x int64)*Int</target>
        </trans-unit>
        <trans-unit id="ee074b7ff98a9480af64a49a7236e53b5452c8b8" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetString(s string, base int) (*Int, bool)</source>
          <target state="translated">func (z *Int)SetString(s string,base int)(*Int,bool)</target>
        </trans-unit>
        <trans-unit id="7b3224cedc574fe69e416ac575ae8cd73b969841" translate="yes" xml:space="preserve">
          <source>func (z *Int) SetUint64(x uint64) *Int</source>
          <target state="translated">func (z *Int)SetUint64(x uint64)*Int</target>
        </trans-unit>
        <trans-unit id="041105ab187d079fa6650d1bdbdac7ab33a776bc" translate="yes" xml:space="preserve">
          <source>func (z *Int) Sqrt(x *Int) *Int</source>
          <target state="translated">func (z *Int)Sqrt(x *Int)*Int</target>
        </trans-unit>
        <trans-unit id="f7bc9f40348e083f0b57470753d99443b800522e" translate="yes" xml:space="preserve">
          <source>func (z *Int) Sub(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Sub(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="d4a02ff4cb42fba7c526f7993de9c98b2872c943" translate="yes" xml:space="preserve">
          <source>func (z *Int) UnmarshalJSON(text []byte) error</source>
          <target state="translated">func (z *Int)UnmarshalJSON(text []byte)エラー</target>
        </trans-unit>
        <trans-unit id="c85721729dcb9b865b5caf58f07befa140c9b5b9" translate="yes" xml:space="preserve">
          <source>func (z *Int) UnmarshalText(text []byte) error</source>
          <target state="translated">func (z *Int)UnmarshalText(text []byte)エラー</target>
        </trans-unit>
        <trans-unit id="a5727f3feb2f3cb091b03de158a4a0cd103734bb" translate="yes" xml:space="preserve">
          <source>func (z *Int) Xor(x, y *Int) *Int</source>
          <target state="translated">func (z *Int)Xor(x,y *Int)*Int</target>
        </trans-unit>
        <trans-unit id="09393f8a17c0965ebfeb55b782caa56758943b36" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Abs(x *Rat) *Rat</source>
          <target state="translated">func (z *Council)Abs(x *Council)*Council</target>
        </trans-unit>
        <trans-unit id="a113c04d482f6877f1dd37dee147427f38659431" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Add(x, y *Rat) *Rat</source>
          <target state="translated">func (z *Council)Add(x,y *Council)*Council</target>
        </trans-unit>
        <trans-unit id="eb622b18cea126defa98d9f492b5c9f151ae44d1" translate="yes" xml:space="preserve">
          <source>func (z *Rat) GobDecode(buf []byte) error</source>
          <target state="translated">func (z *Rat)GobDecode(buf []バイト)エラー</target>
        </trans-unit>
        <trans-unit id="3b6e753072ce576ba18d284f80a0e272d3ce7518" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Inv(x *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Inv(x *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="37dd6d2dfb3f53ce562a8b8e338c1d366cfaffa3" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Mul(x, y *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Mul(x,y *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="1e4f3c22eadf423b1f23f8a47a471adfa62a01c7" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Neg(x *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Neg(x *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="8e9ab4505d5aa3844d54ff3a7309cff75fe96aa8" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Quo(x, y *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Quo(x,y *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="950153ead6bc9176ac7976a048dd1cc33b0fe28b" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Scan(s fmt.ScanState, ch rune) error</source>
          <target state="translated">func (z *Rat)Scan(s fmt.ScanState,ch rune)エラー</target>
        </trans-unit>
        <trans-unit id="27fd216b65e19e124beeed91827c29c1ca277b6e" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Set(x *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Set(x *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="aa0d8ca2297981c0ca9f1a93b53d47da918c07db" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetFloat64(f float64) *Rat</source>
          <target state="translated">func (z *Rat)SetFloat64(f float64)*Rat</target>
        </trans-unit>
        <trans-unit id="08107283ef98f775675be66b17d66c571116ef4d" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetFrac(a, b *Int) *Rat</source>
          <target state="translated">func (z *Rat)SetFrac(a,b *Int)*Rat</target>
        </trans-unit>
        <trans-unit id="4d8c8011e54eaf8409235fe660588f438d0250c6" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetFrac64(a, b int64) *Rat</source>
          <target state="translated">func (z *Rat)SetFrac64(a,b int64)*Rat</target>
        </trans-unit>
        <trans-unit id="d1c9e9a6457bab450e8e675939596ccb8ce797b0" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetInt(x *Int) *Rat</source>
          <target state="translated">func (z *Rat)SetInt(x *Int)*Rat</target>
        </trans-unit>
        <trans-unit id="46a509309a6841086c55d0e0aeef97cb75be789e" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetInt64(x int64) *Rat</source>
          <target state="translated">func (z *Rat)SetInt64(x int64)*Rat</target>
        </trans-unit>
        <trans-unit id="b88a84921ba51d656505414610e10d2b2c79bb25" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetString(s string) (*Rat, bool)</source>
          <target state="translated">func(z *Rat)SetString(s string)(*Rat,bool)</target>
        </trans-unit>
        <trans-unit id="84190c64f3f95dd1293522165bd7ac05d7b74357" translate="yes" xml:space="preserve">
          <source>func (z *Rat) SetUint64(x uint64) *Rat</source>
          <target state="translated">func(z *Rat)SetUint64(x uint64)*Rat</target>
        </trans-unit>
        <trans-unit id="50a3f93aad9622af96ee45e1927a70432721a100" translate="yes" xml:space="preserve">
          <source>func (z *Rat) Sub(x, y *Rat) *Rat</source>
          <target state="translated">func (z *Rat)Sub(x,y *Rat)*Rat</target>
        </trans-unit>
        <trans-unit id="3bced2b1297171f9864234beb83740464dded9df" translate="yes" xml:space="preserve">
          <source>func (z *Rat) UnmarshalText(text []byte) error</source>
          <target state="translated">func (z*Council)UnmarshalText(text []byte)エラー</target>
        </trans-unit>
        <trans-unit id="a8bb510bb86800cce3c3ef04cb9c23779b8c61c2" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Close() error</source>
          <target state="translated">func (z *Reader)Close()エラー</target>
        </trans-unit>
        <trans-unit id="22da93c6f774e951145bb8d17f0915f7b7da753b" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Multistream(ok bool)</source>
          <target state="translated">func(z *Reader)マルチストリーム(ok bool)</target>
        </trans-unit>
        <trans-unit id="65245cd106a2b547c3caf057f289233d7a372412" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Read(p []byte) (n int, err error)</source>
          <target state="translated">func (z *Reader)Read(p []byte)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="66c76ea4d1043028bf64b53b2d671374d8bb9e2b" translate="yes" xml:space="preserve">
          <source>func (z *Reader) RegisterDecompressor(method uint16, dcomp Decompressor)</source>
          <target state="translated">func (z *Reader)RegisterDecompressor(メソッド uint16,dcomp Decompressor)</target>
        </trans-unit>
        <trans-unit id="8f6e282492b55afdd4ae2afb86e6045ffea50dc6" translate="yes" xml:space="preserve">
          <source>func (z *Reader) Reset(r io.Reader) error</source>
          <target state="translated">func (z *Reader)Reset(r io.Reader)エラー</target>
        </trans-unit>
        <trans-unit id="cf320bb857878d25df2c106cef8d521b2ffd8f48" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Close() error</source>
          <target state="translated">func (z *Writer)Close()エラー</target>
        </trans-unit>
        <trans-unit id="7bedc26756f7815aa9055b99620c08f009ac5bcc" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Flush() error</source>
          <target state="translated">func (z *Writer)Flush()エラー</target>
        </trans-unit>
        <trans-unit id="d9e67bb7273ce8a03539763422bc56abcb585db6" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Reset(w io.Writer)</source>
          <target state="translated">func (z *Writer)Reset(w io.Writer)</target>
        </trans-unit>
        <trans-unit id="1f83e0756ad2eb250d2a998d4bd26f86d25b667d" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Write(p []byte) (int, error)</source>
          <target state="translated">func (z *Writer)Write(p []バイト)(int,error)</target>
        </trans-unit>
        <trans-unit id="19dd1c7bfae57a6e039723cfe880a5354a274476" translate="yes" xml:space="preserve">
          <source>func (z *Writer) Write(p []byte) (n int, err error)</source>
          <target state="translated">func (z *Writer)Write(p []バイト)(n int,err error)</target>
        </trans-unit>
        <trans-unit id="fe732c6fb307507a83c1ff1e03012486608be4b7" translate="yes" xml:space="preserve">
          <source>func (z *Zipf) Uint64() uint64</source>
          <target state="translated">func (z *Zipf)Uint64()uint64</target>
        </trans-unit>
        <trans-unit id="b6c9906722dba49a61fc4ee9caf16a3d235ddd0f" translate="yes" xml:space="preserve">
          <source>func Abs(path string) (string, error)</source>
          <target state="translated">func Abs(パス文字列)(文字列,エラー)</target>
        </trans-unit>
        <trans-unit id="d57e2ade35e095d5f2ff959956b2f8adb79151e6" translate="yes" xml:space="preserve">
          <source>func Abs(x complex128) float64</source>
          <target state="translated">ファンク Abs(x complex128)float64</target>
        </trans-unit>
        <trans-unit id="52d1bdb6e11924036a92efddbc648f711027b16e" translate="yes" xml:space="preserve">
          <source>func Abs(x float64) float64</source>
          <target state="translated">ファンク Abs(x float64)float64</target>
        </trans-unit>
        <trans-unit id="c2cbcdae05ab7d21e6913daf0a4f96c67b6183b4" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/math/abs.go?s=278:305#L2&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/math/abs.go?s=278:305#L2&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="432b746b2dcc185064865caf56211508adbeb4e9" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=349:379#L2&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=349:379#L2&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bda15462d940a777850823d81347185e0c3e7405" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=452:482#L3&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/math/cmplx/abs.go?s=452:482#L3&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a6665be1c1c1675439f5cc35cc47f4d756671a3" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=6920:6957#L230&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=6920:6957#L230&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6266af2cbf286d69d1892314caa25e025b6c171d" translate="yes" xml:space="preserve">
          <source>func Abs&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=7016:7053#L232&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Abs &lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=7016:7053#L232&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ab62a22ec80f4da856758b380ac6aa8b8aeea4e" translate="yes" xml:space="preserve">
          <source>func Accept(fd int) (nfd int, sa Sockaddr, err error)</source>
          <target state="translated">func Accept(fd int)(nfd int,sa Sockaddr,err error)</target>
        </trans-unit>
        <trans-unit id="fbcdf143355f3edecc48a04a893eb49048e9b38c" translate="yes" xml:space="preserve">
          <source>func Accept(lis net.Listener)</source>
          <target state="translated">func Accept(lis net.Listener)</target>
        </trans-unit>
        <trans-unit id="5006d18e9a738741bb45162c398e99f511551c21" translate="yes" xml:space="preserve">
          <source>func Accept4(fd int, flags int) (nfd int, sa Sockaddr, err error)</source>
          <target state="translated">func Accept4(fd int,flags int)(nfd int,sa Sockaddr,err error)</target>
        </trans-unit>
        <trans-unit id="2febc8fde2928ea6433cfea1afd8d2d26af82a44" translate="yes" xml:space="preserve">
          <source>func Accept4&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13029:13094#L528&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Accept4 &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13029:13094#L528&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be6bb92b53fb8c5a06fbc6fbe7c5f8ac0b17019b" translate="yes" xml:space="preserve">
          <source>func Accept4&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13038:13103#L534&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Accept4 &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=13038:13103#L534&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="05d8629a4912de30d2414f81c541982060075fe6" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/net/rpc/server.go?s=20693:20722#L675&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Accept &lt;a href=&quot;https://golang.org/src/net/rpc/server.go?s=20693:20722#L675&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a86f4c31363017d07faf207592a2e7c8d9559ad0" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12762:12815#L513&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Accept &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12762:12815#L513&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d61aab5e4ab2b536e9d14447b425e170abff91b0" translate="yes" xml:space="preserve">
          <source>func Accept&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12771:12824#L519&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Accept &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=12771:12824#L519&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46bba7a034580dc30e97597982b25a6d9c694eba" translate="yes" xml:space="preserve">
          <source>func Access(path string, mode uint32) (err error)</source>
          <target state="translated">func Access(path string,mode uint32)(err error)</target>
        </trans-unit>
        <trans-unit id="e6e47553f32d31728c271f17e9ea2bb554f92eba" translate="yes" xml:space="preserve">
          <source>func Access&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=554:603#L12&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Access &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=554:603#L12&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c7e93cf3bfa274453bb40a2f1ef5dc7f28b4c1df" translate="yes" xml:space="preserve">
          <source>func Acct(path string) (err error)</source>
          <target state="translated">func Acct(パス文字列)(err error)</target>
        </trans-unit>
        <trans-unit id="d384ec5d65dd3ddae4d375ebc67243bde9824096" translate="yes" xml:space="preserve">
          <source>func Acct&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=5698:5732#L218&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acct &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=5698:5732#L218&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c787860ee20f1702c8df283ea113a3c6c375e8a4" translate="yes" xml:space="preserve">
          <source>func Acct&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6350:6384#L243&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acct &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6350:6384#L243&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6f8d4c38abbf0c9be70f5b2c1dae7e1d62605d11" translate="yes" xml:space="preserve">
          <source>func Acos(x complex128) complex128</source>
          <target state="translated">func Acos(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="c5882f9f50153aebb22256a6f951078cc015350e" translate="yes" xml:space="preserve">
          <source>func Acos(x float64) float64</source>
          <target state="translated">ファンク Acos(x float64)float64</target>
        </trans-unit>
        <trans-unit id="e1f674841881a253cf2169170a6abea5988cb4e3" translate="yes" xml:space="preserve">
          <source>func Acos&lt;a href=&quot;https://golang.org/src/math/asin.go?s=897:925#L41&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acos &lt;a href=&quot;https://golang.org/src/math/asin.go?s=897:925#L41&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="02cda7d2b0d57c2389ac11ef1204fef0560cfa06" translate="yes" xml:space="preserve">
          <source>func Acos&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2730:2764#L77&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acos &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2730:2764#L77&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7da708411565b2f35df2836b13ef53412f456c26" translate="yes" xml:space="preserve">
          <source>func Acos&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3839:3873#L123&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcAcos&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3839:3873#L123&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b55e66944700f1bf8d032e9951ac7f0773618aa3" translate="yes" xml:space="preserve">
          <source>func Acosh(x complex128) complex128</source>
          <target state="translated">ファンク Acosh(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="eec81c94daf00581aa90bb0c6398222646f0ad9a" translate="yes" xml:space="preserve">
          <source>func Acosh(x float64) float64</source>
          <target state="translated">ファンク Acosh(x float64)float64</target>
        </trans-unit>
        <trans-unit id="e80ae0295882452d6b557cb63e8f31c175805f52" translate="yes" xml:space="preserve">
          <source>func Acosh&lt;a href=&quot;https://golang.org/src/math/acosh.go?s=1294:1323#L32&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acosh &lt;a href=&quot;https://golang.org/src/math/acosh.go?s=1294:1323#L32&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a37329b9a70a2e7fb6e8f6c29ea57e0e35c18029" translate="yes" xml:space="preserve">
          <source>func Acosh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2882:2917#L83&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acosh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2882:2917#L83&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8a7ad2519ee891a9d4ff552bc1ab4a7ee0a1ebcb" translate="yes" xml:space="preserve">
          <source>func Acosh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3991:4026#L129&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Acosh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3991:4026#L129&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bfe844372c103008da6b90f55329521ffc8ddaef" translate="yes" xml:space="preserve">
          <source>func Add(x, y, carry uint) (sum, carryOut uint)</source>
          <target state="translated">func Add(x,y,carry uint)(sum,carryOut uint)</target>
        </trans-unit>
        <trans-unit id="2fbdc857276126ed90319beedf0d5aa34f69848f" translate="yes" xml:space="preserve">
          <source>func Add32(x, y, carry uint32) (sum, carryOut uint32)</source>
          <target state="translated">func Add32(x,y,carry uint32)(sum,carryOut uint32)</target>
        </trans-unit>
        <trans-unit id="0014b9175d4f83020af94387772dd2b0aba39a42" translate="yes" xml:space="preserve">
          <source>func Add32&lt;a href=&quot;https://golang.org/src/math/bits/bits.go?s=11093:11146#L358&quot;&gt;Source&lt;/a&gt;1.12</source>
          <target state="translated">func Add32 &lt;a href=&quot;https://golang.org/src/math/bits/bits.go?s=11093:11146#L358&quot;&gt;Source&lt;/a&gt; 1.12</target>
        </trans-unit>
        <trans-unit id="911a04917208b74024a9433ea533bd546a10d527" translate="yes" xml:space="preserve">
          <source>func Add64(x, y, carry uint64) (sum, carryOut uint64)</source>
          <target state="translated">func Add64(x,y,carry uint64)(sum,carryOut uint64)</target>
        </trans-unit>
        <trans-unit id="2e902f019d2fb06ea63b8497cc01c818d598d549" translate="yes" xml:space="preserve">
          <source>func Add64&lt;a href=&quot;https://golang.org/src/math/bits/bits.go?s=11528:11581#L370&quot;&gt;Source&lt;/a&gt;1.12</source>
          <target state="translated">func Add64 &lt;a href=&quot;https://golang.org/src/math/bits/bits.go?s=11528:11581#L370&quot;&gt;Source&lt;/a&gt; 1.12</target>
        </trans-unit>
        <trans-unit id="bf8f88317b77293e56e97ecf7f0b896cd819f044" translate="yes" xml:space="preserve">
          <source>func Add&lt;a href=&quot;https://golang.org/src/math/bits/bits.go?s=10577:10624#L344&quot;&gt;Source&lt;/a&gt;1.12</source>
          <target state="translated">func Add &lt;a href=&quot;https://golang.org/src/math/bits/bits.go?s=10577:10624#L344&quot;&gt;Source&lt;/a&gt; 1.12</target>
        </trans-unit>
        <trans-unit id="633ccdb102161c629ce19dee1d61dad1ed4f9077" translate="yes" xml:space="preserve">
          <source>func AddExtensionType(ext, typ string) error</source>
          <target state="translated">func AddExtensionType(ext,typ string)エラー</target>
        </trans-unit>
        <trans-unit id="86bfaf3d1b39adb5b02031d8d21e9b5a76576c02" translate="yes" xml:space="preserve">
          <source>func AddExtensionType&lt;a href=&quot;https://golang.org/src/mime/type.go?s=4207:4251#L150&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AddExtensionType &lt;a href=&quot;https://golang.org/src/mime/type.go?s=4207:4251#L150&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4f20adc96ed0621ab57d17d89b8f6d67391bc9fb" translate="yes" xml:space="preserve">
          <source>func AddExtensionType&lt;a href=&quot;https://golang.org/src/mime/type.go?s=4302:4346#L154&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcAddExtensionType&lt;a href=&quot;https://golang.org/src/mime/type.go?s=4302:4346#L154&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e8c25d8b5c20ad69c83589ee4da13b6c614af2a" translate="yes" xml:space="preserve">
          <source>func AddInt32(addr *int32, delta int32) (new int32)</source>
          <target state="translated">func AddInt32(addr *int32,delta int32)(new int32)</target>
        </trans-unit>
        <trans-unit id="21d60212ce5c23e667f5aa6c60178cbcf3b69bba" translate="yes" xml:space="preserve">
          <source>func AddInt32&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3572:3623#L83&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AddInt32 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3572:3623#L83&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90f65303eefcb792a343f2f0babdb519e01a86c7" translate="yes" xml:space="preserve">
          <source>func AddInt64(addr *int64, delta int64) (new int64)</source>
          <target state="translated">func AddInt64(addr *int64,delta int64)(new int64)</target>
        </trans-unit>
        <trans-unit id="8e21670c4f2711c30fcb06a32ef22d29e526965c" translate="yes" xml:space="preserve">
          <source>func AddInt64&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3977:4028#L91&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AddInt64 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3977:4028#L91&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="19d979e7c249de077efb28ffa3128d0535b6219c" translate="yes" xml:space="preserve">
          <source>func AddUint32(addr *uint32, delta uint32) (new uint32)</source>
          <target state="translated">func AddUint32(addr *uint32,delta uint32)(new uint32)</target>
        </trans-unit>
        <trans-unit id="fbe86282fc0b2585b7750275c508f191d66c6a30" translate="yes" xml:space="preserve">
          <source>func AddUint32&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3850:3905#L88&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AddUint32 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3850:3905#L88&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bf1fdcc2dee801b63b8a66d7366f4d4b76640ab5" translate="yes" xml:space="preserve">
          <source>func AddUint64(addr *uint64, delta uint64) (new uint64)</source>
          <target state="translated">func AddUint64(addr *uint64,delta uint64)(new uint64)</target>
        </trans-unit>
        <trans-unit id="680b19ab27720695bebf8ee8706659724669ccae" translate="yes" xml:space="preserve">
          <source>func AddUint64&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=4255:4310#L96&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AddUint64 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=4255:4310#L96&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b723f5579913f111dc9f10d477edeb8537261ab5" translate="yes" xml:space="preserve">
          <source>func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)</source>
          <target state="translated">func AddUintptr(addr *uintptr,delta uintptr)(new uintptr)</target>
        </trans-unit>
        <trans-unit id="96004b9625bf032aa78e676cc1219ee263009f4b" translate="yes" xml:space="preserve">
          <source>func AddUintptr&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=4384:4443#L99&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AddUintptr &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=4384:4443#L99&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df97998d770b657c2eaec3f56875ca7181405339" translate="yes" xml:space="preserve">
          <source>func Adjtimex(buf *Timex) (state int, err error)</source>
          <target state="translated">func Adjtimex(buf *Timex)(ステート int,err error)</target>
        </trans-unit>
        <trans-unit id="83f2fb9590cd17343934a303bf6e81efe109fdc6" translate="yes" xml:space="preserve">
          <source>func Adjtimex&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=5997:6045#L233&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcAdjtimex&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=5997:6045#L233&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f0c90ac23cdbe3bad36adb99ada8fb265b016315" translate="yes" xml:space="preserve">
          <source>func Adjtimex&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6649:6697#L258&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Adjtimex &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6649:6697#L258&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de9f9348c691e529f81f7a48af4d0b6e1946598c" translate="yes" xml:space="preserve">
          <source>func After(d Duration) &amp;lt;-chan Time</source>
          <target state="translated">func After（d Duration）&amp;lt;-chan Time</target>
        </trans-unit>
        <trans-unit id="6899bf8deb100c80e40fdbdec0063916ee03573a" translate="yes" xml:space="preserve">
          <source>func After&lt;a href=&quot;https://golang.org/src/time/sleep.go?s=4637:4671#L138&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/time/sleep.go?s=4637:4671#L138&quot;&gt;ソース&lt;/a&gt;後のfunc</target>
        </trans-unit>
        <trans-unit id="2f251784ae405d088f3c18cabcac960ce63e20f0" translate="yes" xml:space="preserve">
          <source>func After&lt;a href=&quot;https://golang.org/src/time/sleep.go?s=4827:4861#L137&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func After &lt;a href=&quot;https://golang.org/src/time/sleep.go?s=4827:4861#L137&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1c7bae87715fa39bcf7af5bed472c3923a2f9cde" translate="yes" xml:space="preserve">
          <source>func AfterFunc(d Duration, f func()) *Timer</source>
          <target state="translated">func AfterFunc(d Duration,f func()*タイマー</target>
        </trans-unit>
        <trans-unit id="affe9938313ccac0041d9b38c9d232c9ef492090" translate="yes" xml:space="preserve">
          <source>func AfterFunc&lt;a href=&quot;https://golang.org/src/time/sleep.go?s=4868:4911#L145&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AfterFunc &lt;a href=&quot;https://golang.org/src/time/sleep.go?s=4868:4911#L145&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d2c4fceb4133c41e53c7cb14bdb84c89569b4422" translate="yes" xml:space="preserve">
          <source>func AfterFunc&lt;a href=&quot;https://golang.org/src/time/sleep.go?s=5058:5101#L144&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcAfterFunc&lt;a href=&quot;https://golang.org/src/time/sleep.go?s=5058:5101#L144&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7f29a4299ef9b2de13ed9321b73d6551dd243e90" translate="yes" xml:space="preserve">
          <source>func Alignof(x ArbitraryType) uintptr</source>
          <target state="translated">func Alignof(x ArbitraryType)uintptr</target>
        </trans-unit>
        <trans-unit id="9baa9a8e149c2a7a4b1a3682bb10a20872fddf0d" translate="yes" xml:space="preserve">
          <source>func Alignof&lt;a href=&quot;https://golang.org/src/unsafe/unsafe.go?s=9177:9214#L195&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Alignof &lt;a href=&quot;https://golang.org/src/unsafe/unsafe.go?s=9177:9214#L195&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a887e33ccb87ec4a22913eec97645d9f110cdd1" translate="yes" xml:space="preserve">
          <source>func AllocsPerRun(runs int, f func()) (avg float64)</source>
          <target state="translated">func AllocsPerRun(run int,f func()(avg float64)</target>
        </trans-unit>
        <trans-unit id="1158d1b3978e982bea2ad6010df0ee28373bdeb6" translate="yes" xml:space="preserve">
          <source>func AllocsPerRun&lt;a href=&quot;https://golang.org/src/testing/allocs.go?s=669:720#L10&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">func AllocsPerRun &lt;a href=&quot;https://golang.org/src/testing/allocs.go?s=669:720#L10&quot;&gt;Source&lt;/a&gt; 1.1</target>
        </trans-unit>
        <trans-unit id="43ac96fee08c0ffb9cb653202a008567f737f700" translate="yes" xml:space="preserve">
          <source>func Append(s Value, x ...Value) Value</source>
          <target state="translated">func Append(s Value,x ...Value)Value</target>
        </trans-unit>
        <trans-unit id="2f6ef5bc22ed2d9400a5b82c502c7dee5b2ae34f" translate="yes" xml:space="preserve">
          <source>func Append&lt;a href=&quot;https://golang.org/src/reflect/value.go?s=60336:60374#L2014&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Append &lt;a href=&quot;https://golang.org/src/reflect/value.go?s=60336:60374#L2014&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1abce7ac44be50832f2ba000a4d4161f8c9e0080" translate="yes" xml:space="preserve">
          <source>func Append&lt;a href=&quot;https://golang.org/src/reflect/value.go?s=61262:61300#L2033&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func追加&lt;a href=&quot;https://golang.org/src/reflect/value.go?s=61262:61300#L2033&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="748af62b70dc8ffdfbdeda0569bb1ace0da038ac" translate="yes" xml:space="preserve">
          <source>func AppendBool(dst []byte, b bool) []byte</source>
          <target state="translated">func AppendBool(dst []byte,b bool)[]byte</target>
        </trans-unit>
        <trans-unit id="b55b6decfe4d44a080f3dc60bff97e7f09796093" translate="yes" xml:space="preserve">
          <source>func AppendBool&lt;a href=&quot;https://golang.org/src/strconv/atob.go?s=852:894#L20&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendBool &lt;a href=&quot;https://golang.org/src/strconv/atob.go?s=852:894#L20&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="152213c03a365ff6253d6f08fe7dc4e4889b3900" translate="yes" xml:space="preserve">
          <source>func AppendFloat(dst []byte, f float64, fmt byte, prec, bitSize int) []byte</source>
          <target state="translated">func AppendFloat(dst []byte,f float64,fmt byte,prec,bitSize int)[]byte</target>
        </trans-unit>
        <trans-unit id="c0bc2c0c1a442c78ced53e59a7eebc04ef14d867" translate="yes" xml:space="preserve">
          <source>func AppendFloat&lt;a href=&quot;https://golang.org/src/strconv/ftoa.go?s=1994:2069#L43&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendFloat &lt;a href=&quot;https://golang.org/src/strconv/ftoa.go?s=1994:2069#L43&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7bb6c27342446e8e9ac190eca1d6e683e96f5380" translate="yes" xml:space="preserve">
          <source>func AppendInt(dst []byte, i int64, base int) []byte</source>
          <target state="translated">func AppendInt(dst []byte,i int64,base int)[]byte</target>
        </trans-unit>
        <trans-unit id="8cc93b7b38fe540e56a2e75c7d1c1debb7701810" translate="yes" xml:space="preserve">
          <source>func AppendInt&lt;a href=&quot;https://golang.org/src/strconv/itoa.go?s=1214:1266#L30&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendInt &lt;a href=&quot;https://golang.org/src/strconv/itoa.go?s=1214:1266#L30&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="81069c3c8d9850a836e22c1bddadb28fb46a0e6e" translate="yes" xml:space="preserve">
          <source>func AppendQuote(dst []byte, s string) []byte</source>
          <target state="translated">func AppendQuote(dst []byte,s string)[]byte</target>
        </trans-unit>
        <trans-unit id="91193640e2b1b55c29ca7d948c75f030f3f5df98" translate="yes" xml:space="preserve">
          <source>func AppendQuote&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=3473:3518#L120&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendQuote &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=3473:3518#L120&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c2309d9719c96ec7bc4c91ab5d0f3891d52a3645" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRune(dst []byte, r rune) []byte</source>
          <target state="translated">func AppendQuoteRune(dst []byte,r rune)[]byte</target>
        </trans-unit>
        <trans-unit id="02bedbc04f2267f49c10d46d1aa7e8c8281e95ea" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRune&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5187:5234#L159&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendQuoteRune &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5187:5234#L159&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8a67df540125dbb421592bc9ed6812b0524d1807" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRune&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5213:5260#L160&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendQuoteRune &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5213:5260#L160&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="61792ba4f0e875a682bf68f34f3b3fd0b5536ead" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRuneToASCII(dst []byte, r rune) []byte</source>
          <target state="translated">func AppendQuoteRuneToASCII(dst []byte,r rune)[]byte</target>
        </trans-unit>
        <trans-unit id="c8772cb8848f5d46883c8cf0bd52f25a913f0f86" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRuneToASCII&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5796:5850#L173&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendQuoteRuneToASCII &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5796:5850#L173&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9bfe56accfcf26501765a18289a5081c6d063897" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRuneToASCII&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5822:5876#L174&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcAppendQuoteRuneToASCII&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=5822:5876#L174&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2b9c839bedb18759a8608e9b5740cc317c08528f" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRuneToGraphic(dst []byte, r rune) []byte</source>
          <target state="translated">func AppendQuoteRuneToGraphic(dst []byte,r rune)[]byte</target>
        </trans-unit>
        <trans-unit id="3a0f21d03fb9151a03e7da4b1accde6ab253db30" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRuneToGraphic&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6421:6477#L187&quot;&gt;Source&lt;/a&gt;1.6</source>
          <target state="translated">func AppendQuoteRuneToGraphic &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6421:6477#L187&quot;&gt;Source&lt;/a&gt; 1.6</target>
        </trans-unit>
        <trans-unit id="80101e8f91e4c9ee7a42760392d92eca8fcf52be" translate="yes" xml:space="preserve">
          <source>func AppendQuoteRuneToGraphic&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6447:6503#L188&quot;&gt;Source&lt;/a&gt;1.6</source>
          <target state="translated">func AppendQuoteRuneToGraphic &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6447:6503#L188&quot;&gt;Source&lt;/a&gt; 1.6</target>
        </trans-unit>
        <trans-unit id="a6d942cd6b8ed73d9dfac329c5007037760123ab" translate="yes" xml:space="preserve">
          <source>func AppendQuoteToASCII(dst []byte, s string) []byte</source>
          <target state="translated">func AppendQuoteToASCII(dst []byte,s string)[]byte</target>
        </trans-unit>
        <trans-unit id="8dae5dad1441c67033ad437b4942d85f0b007bc6" translate="yes" xml:space="preserve">
          <source>func AppendQuoteToASCII&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=4033:4085#L133&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendQuoteToASCII &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=4033:4085#L133&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7da66b63c662bca82a489d256815b089ff5553c9" translate="yes" xml:space="preserve">
          <source>func AppendQuoteToGraphic(dst []byte, s string) []byte</source>
          <target state="translated">func AppendQuoteToGraphic(dst []byte,s string)[]byte</target>
        </trans-unit>
        <trans-unit id="50cbbe9385d14533c251d32bceb6b758bde495bb" translate="yes" xml:space="preserve">
          <source>func AppendQuoteToGraphic&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=4609:4663#L146&quot;&gt;Source&lt;/a&gt;1.6</source>
          <target state="translated">func AppendQuoteToGraphic &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=4609:4663#L146&quot;&gt;Source&lt;/a&gt; 1.6</target>
        </trans-unit>
        <trans-unit id="daab42161828db81f4eba707078fbceb0ab85388" translate="yes" xml:space="preserve">
          <source>func AppendQuoteToGraphic&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=4635:4689#L147&quot;&gt;Source&lt;/a&gt;1.6</source>
          <target state="translated">func AppendQuoteToGraphic &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=4635:4689#L147&quot;&gt;Source&lt;/a&gt; 1.6</target>
        </trans-unit>
        <trans-unit id="13c910dafec7164bf69004f135ffaa220dab6aea" translate="yes" xml:space="preserve">
          <source>func AppendSlice(s, t Value) Value</source>
          <target state="translated">func AppendSlice(s,t Value)Value</target>
        </trans-unit>
        <trans-unit id="ac6ec757fd77ac046d0530e3aa90dd57aac48c32" translate="yes" xml:space="preserve">
          <source>func AppendSlice&lt;a href=&quot;https://golang.org/src/reflect/value.go?s=60643:60677#L2025&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendSlice &lt;a href=&quot;https://golang.org/src/reflect/value.go?s=60643:60677#L2025&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0819c3120e4272419c45c7cf95535f093ccd0ba7" translate="yes" xml:space="preserve">
          <source>func AppendSlice&lt;a href=&quot;https://golang.org/src/reflect/value.go?s=61569:61603#L2044&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendSlice &lt;a href=&quot;https://golang.org/src/reflect/value.go?s=61569:61603#L2044&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="601102a8bb6049d133bc01102f069b3792517aac" translate="yes" xml:space="preserve">
          <source>func AppendUint(dst []byte, i uint64, base int) []byte</source>
          <target state="translated">func AppendUint(dst []byte,i uint64,base int)[]byte</target>
        </trans-unit>
        <trans-unit id="c4f12360fe2147ffe0ec9323c669bea213bdd065" translate="yes" xml:space="preserve">
          <source>func AppendUint&lt;a href=&quot;https://golang.org/src/strconv/itoa.go?s=1574:1628#L40&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AppendUint &lt;a href=&quot;https://golang.org/src/strconv/itoa.go?s=1574:1628#L40&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78487028e283262e22e39f24ff8a45aaa7207af9" translate="yes" xml:space="preserve">
          <source>func ArchChar(goarch string) (string, error)</source>
          <target state="translated">func ArchChar(goarch string)(string,error)</target>
        </trans-unit>
        <trans-unit id="3b08daf4f94f942991293ddc469b7dc15c412b48" translate="yes" xml:space="preserve">
          <source>func ArchChar&lt;a href=&quot;https://golang.org/src/go/build/build.go?s=53421:53465#L1764&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ArchChar &lt;a href=&quot;https://golang.org/src/go/build/build.go?s=53421:53465#L1764&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="54555a35388fd82dd7fa8fbe42cc11cbae16eb10" translate="yes" xml:space="preserve">
          <source>func ArchChar&lt;a href=&quot;https://golang.org/src/go/build/build.go?s=55132:55176#L1828&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ArchChar &lt;a href=&quot;https://golang.org/src/go/build/build.go?s=55132:55176#L1828&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ae936da5cd366c40d238a0f3969ecf534a2de3e" translate="yes" xml:space="preserve">
          <source>func Arg(i int) string</source>
          <target state="translated">ファンク Arg(i int)文字列</target>
        </trans-unit>
        <trans-unit id="850313b9c33a25d888c712eb17ccc7f1b6a05050" translate="yes" xml:space="preserve">
          <source>func Arg&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=17616:17638#L592&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Arg &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=17616:17638#L592&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c732b05c4a3e68c1ea69d6629a2b87e8f518196b" translate="yes" xml:space="preserve">
          <source>func Arg&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=17763:17785#L595&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Arg &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=17763:17785#L595&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2093afd07277a9d5f3057695948991e126fb151" translate="yes" xml:space="preserve">
          <source>func Args() []string</source>
          <target state="translated">func Args()[]文字列</target>
        </trans-unit>
        <trans-unit id="74b6cec77bf86d4d6c852fda63660f240b853d31" translate="yes" xml:space="preserve">
          <source>func Args&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18076:18096#L606&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Args &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18076:18096#L606&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="022f40524192b59d096191cac702df7ba0dd48b7" translate="yes" xml:space="preserve">
          <source>func Args&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18223:18243#L609&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Args &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18223:18243#L609&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5c881468e947ff9c55b0324b3addb0f252c78691" translate="yes" xml:space="preserve">
          <source>func ArrayOf(count int, elem Type) Type</source>
          <target state="translated">func ArrayOf(count int,elem Type)型</target>
        </trans-unit>
        <trans-unit id="ba82591fe2e41349ef736f835d57ba760340d6bf" translate="yes" xml:space="preserve">
          <source>func ArrayOf&lt;a href=&quot;https://golang.org/src/reflect/type.go?s=78277:78316#L2801&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func ArrayOf &lt;a href=&quot;https://golang.org/src/reflect/type.go?s=78277:78316#L2801&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="106c58248f3a8b323ae2e9067b84cb13ceec4c23" translate="yes" xml:space="preserve">
          <source>func ArrayOf&lt;a href=&quot;https://golang.org/src/reflect/type.go?s=78939:78978#L2812&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func ArrayOf &lt;a href=&quot;https://golang.org/src/reflect/type.go?s=78939:78978#L2812&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="767993d090eb5e754232ecec0b55dc8bfc627caa" translate="yes" xml:space="preserve">
          <source>func As(err error, target interface{}) bool</source>
          <target state="translated">func As(err error,target interface{})bool</target>
        </trans-unit>
        <trans-unit id="c9d935a2dc1da53145fc944e6445a7aba9e95046" translate="yes" xml:space="preserve">
          <source>func As&lt;a href=&quot;https://golang.org/src/errors/wrap.go?s=2058:2101#L56&quot;&gt;Source&lt;/a&gt;1.13</source>
          <target state="translated">func As &lt;a href=&quot;https://golang.org/src/errors/wrap.go?s=2058:2101#L56&quot;&gt;Source&lt;/a&gt; 1.13</target>
        </trans-unit>
        <trans-unit id="3a92a22a459e13351e14e0b999218ce7e8edee05" translate="yes" xml:space="preserve">
          <source>func As&lt;a href=&quot;https://golang.org/src/errors/wrap.go?s=2494:2537#L67&quot;&gt;Source&lt;/a&gt;1.13</source>
          <target state="translated">&lt;a href=&quot;https://golang.org/src/errors/wrap.go?s=2494:2537#L67&quot;&gt;ソース&lt;/a&gt;としてのfunc1.13</target>
        </trans-unit>
        <trans-unit id="1f2461a134179b53af3ee6adbd18866957d327db" translate="yes" xml:space="preserve">
          <source>func Asin(x complex128) complex128</source>
          <target state="translated">func Asin(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="668cdf6a17176067435600d80d0dc717605c8c35" translate="yes" xml:space="preserve">
          <source>func Asin(x float64) float64</source>
          <target state="translated">func Asin(x float64)float64</target>
        </trans-unit>
        <trans-unit id="0663929ede6998b12b0464183b5e799325909ba8" translate="yes" xml:space="preserve">
          <source>func Asin&lt;a href=&quot;https://golang.org/src/math/asin.go?s=434:462#L9&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Asin &lt;a href=&quot;https://golang.org/src/math/asin.go?s=434:462#L9&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c7cc0f38ad8bd2eb69fa3cfcc246c03977d1ce5e" translate="yes" xml:space="preserve">
          <source>func Asin&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=1687:1721#L41&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Asin &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=1687:1721#L41&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ea315f99c751eeadaf582ce432fbb6c7ee8b5223" translate="yes" xml:space="preserve">
          <source>func Asinh(x complex128) complex128</source>
          <target state="translated">func Asinh(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="a8b9b2fe642fcfea34d9bbade7cee0d080a7b509" translate="yes" xml:space="preserve">
          <source>func Asinh(x float64) float64</source>
          <target state="translated">func Asinh(x float64)float64</target>
        </trans-unit>
        <trans-unit id="997862aaabbd2d62cd6b55344f0591b033cd5365" translate="yes" xml:space="preserve">
          <source>func Asinh&lt;a href=&quot;https://golang.org/src/math/asinh.go?s=1228:1257#L29&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Asinh &lt;a href=&quot;https://golang.org/src/math/asinh.go?s=1228:1257#L29&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7a9a3d3d9c89b2f9240e63fa8cd94a499b7ce525" translate="yes" xml:space="preserve">
          <source>func Asinh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2101:2136#L54&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Asinh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2101:2136#L54&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9616f1e37e7f110e8553d768b9e70462be5698bd" translate="yes" xml:space="preserve">
          <source>func Asinh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2670:2705#L77&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Asinh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=2670:2705#L77&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="38c33203a42e263796ceb0654fe4c54b7a9eed54" translate="yes" xml:space="preserve">
          <source>func AssertableTo(V *Interface, T Type) bool</source>
          <target state="translated">func AssertableTo(V *Interface,T Type)bool</target>
        </trans-unit>
        <trans-unit id="7f67abf05a87afa94570ebbacda2545abfa28bde" translate="yes" xml:space="preserve">
          <source>func AssertableTo&lt;a href=&quot;https://golang.org/src/go/types/api.go?s=12911:12955#L345&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func AssertableTo &lt;a href=&quot;https://golang.org/src/go/types/api.go?s=12911:12955#L345&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="694cd8ac5f88191d09cf68578b63cb425a8d565e" translate="yes" xml:space="preserve">
          <source>func AssertableTo&lt;a href=&quot;https://golang.org/src/go/types/api.go?s=13219:13263#L355&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func AssertableTo &lt;a href=&quot;https://golang.org/src/go/types/api.go?s=13219:13263#L355&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="a0ca5cca9e96d6f28e3fab25fea763d060282e70" translate="yes" xml:space="preserve">
          <source>func AssignableTo(V, T Type) bool</source>
          <target state="translated">func AssignableTo(V,T Type)bool</target>
        </trans-unit>
        <trans-unit id="3015343b77e830f2096e90ba7c32f277e10f5c2d" translate="yes" xml:space="preserve">
          <source>func AssignableTo&lt;a href=&quot;https://golang.org/src/go/types/api.go?s=13111:13144#L351&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func AssignableTo &lt;a href=&quot;https://golang.org/src/go/types/api.go?s=13111:13144#L351&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="e4f69ef84d366c8219b852732ac1556c7c16cc82" translate="yes" xml:space="preserve">
          <source>func AssignableTo&lt;a href=&quot;https://golang.org/src/go/types/api.go?s=13419:13452#L361&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func AssignableTo &lt;a href=&quot;https://golang.org/src/go/types/api.go?s=13419:13452#L361&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="ff8a8149651d7b6dcdb38264be75aa1742f5b62a" translate="yes" xml:space="preserve">
          <source>func Atan(x complex128) complex128</source>
          <target state="translated">func Atan(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="c3e5d2b5c07b430f2e148191ef861774093dfcf9" translate="yes" xml:space="preserve">
          <source>func Atan(x float64) float64</source>
          <target state="translated">ファンク Atan(x float64)float64</target>
        </trans-unit>
        <trans-unit id="eea184a0030564f4ded20bcd48134695976dbd9e" translate="yes" xml:space="preserve">
          <source>func Atan2(y, x float64) float64</source>
          <target state="translated">func Atan2(y,x float64)float64</target>
        </trans-unit>
        <trans-unit id="502f604cb3e1bd1e36a5edf7ecf1b87821b99405" translate="yes" xml:space="preserve">
          <source>func Atan2&lt;a href=&quot;https://golang.org/src/math/atan2.go?s=770:802#L19&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atan2 &lt;a href=&quot;https://golang.org/src/math/atan2.go?s=770:802#L19&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d6dbebf5030f3453e8e1de157b47bc29d9e67a79" translate="yes" xml:space="preserve">
          <source>func Atan&lt;a href=&quot;https://golang.org/src/math/atan.go?s=2901:2929#L85&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atan &lt;a href=&quot;https://golang.org/src/math/atan.go?s=2901:2929#L85&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2c585a29008b1fe280ac9493e8e4504496e53662" translate="yes" xml:space="preserve">
          <source>func Atan&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3945:3979#L125&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atan &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=3945:3979#L125&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f373820d7d3d43dd592c33360113c4295192705" translate="yes" xml:space="preserve">
          <source>func Atan&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=5125:5159#L174&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atan &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=5125:5159#L174&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="65008a8d35c246e2d49ec27f48624dcef19c3dca" translate="yes" xml:space="preserve">
          <source>func Atanh(x complex128) complex128</source>
          <target state="translated">func Atanh(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="ddf1d3930d31186b5ccc22f68b3eef72038978f5" translate="yes" xml:space="preserve">
          <source>func Atanh(x float64) float64</source>
          <target state="translated">func Atanh(x float64)float64</target>
        </trans-unit>
        <trans-unit id="7ca0fa549dc01a006d4a8807f0a8a2908c7da94d" translate="yes" xml:space="preserve">
          <source>func Atanh&lt;a href=&quot;https://golang.org/src/math/atanh.go?s=1450:1479#L37&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atanh &lt;a href=&quot;https://golang.org/src/math/atanh.go?s=1450:1479#L37&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eae2386f34d0a3a0a876f27d179beebdc6a4a6cd" translate="yes" xml:space="preserve">
          <source>func Atanh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=4320:4355#L145&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atanh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=4320:4355#L145&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f809f4d695fefd9a4a00cd61389d417623e3217d" translate="yes" xml:space="preserve">
          <source>func Atanh&lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=5913:5948#L207&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atanh &lt;a href=&quot;https://golang.org/src/math/cmplx/asin.go?s=5913:5948#L207&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac605ffec8e15ab32ffee22d6c180b05a1ba0726" translate="yes" xml:space="preserve">
          <source>func Atoi(s string) (int, error)</source>
          <target state="translated">func Atoi(s string)(int,error)</target>
        </trans-unit>
        <trans-unit id="f3b6a178ab9541b94737234c6b51faa069b6eaec" translate="yes" xml:space="preserve">
          <source>func Atoi&lt;a href=&quot;https://golang.org/src/strconv/atoi.go?s=5576:5608#L208&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atoi &lt;a href=&quot;https://golang.org/src/strconv/atoi.go?s=5576:5608#L208&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f7e1d5443720e87fa602c627c8416a5c1e3bf2a" translate="yes" xml:space="preserve">
          <source>func Atoi&lt;a href=&quot;https://golang.org/src/strconv/atoi.go?s=5658:5690#L214&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Atoi &lt;a href=&quot;https://golang.org/src/strconv/atoi.go?s=5658:5690#L214&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="98891e2bb1acc93858487307b0afb8ae1decc110" translate="yes" xml:space="preserve">
          <source>func AttachLsf(fd int, i []SockFilter) error</source>
          <target state="translated">func AttachLsf(fd int,i []SockFilter)エラー</target>
        </trans-unit>
        <trans-unit id="e389e9387c22ceb4f346a7bfb5c4f77a870ee0fd" translate="yes" xml:space="preserve">
          <source>func AttachLsf&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go?s=1655:1699#L63&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func AttachLsf &lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go?s=1655:1699#L63&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f09febebea322c64f8a0764199396e61db2f2580" translate="yes" xml:space="preserve">
          <source>func AttachLsf&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go?s=1741:1785#L65&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcAttachLsf&lt;a href=&quot;https://golang.org/src/syscall/lsf_linux.go?s=1741:1785#L65&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a491bf895a668df791568d23bb9d245bd938a919" translate="yes" xml:space="preserve">
          <source>func Background() Context</source>
          <target state="translated">func Background()コンテキスト</target>
        </trans-unit>
        <trans-unit id="40518cc2cf30f6a1678a75df9da0b40929941dc6" translate="yes" xml:space="preserve">
          <source>func Background&lt;a href=&quot;https://golang.org/src/context/context.go?s=7311:7336#L195&quot;&gt;Source&lt;/a&gt;1.7</source>
          <target state="translated">func Background &lt;a href=&quot;https://golang.org/src/context/context.go?s=7311:7336#L195&quot;&gt;Source&lt;/a&gt; 1.7</target>
        </trans-unit>
        <trans-unit id="2a4e3677e32eedc3b271a164b3e6b6315c918686" translate="yes" xml:space="preserve">
          <source>func Background&lt;a href=&quot;https://golang.org/src/context/context.go?s=7426:7451#L198&quot;&gt;Source&lt;/a&gt;1.7</source>
          <target state="translated">funcバックグラウンド&lt;a href=&quot;https://golang.org/src/context/context.go?s=7426:7451#L198&quot;&gt;ソース&lt;/a&gt;1.7</target>
        </trans-unit>
        <trans-unit id="d99bf3db814488a3d4498bb1c6b7ec26b53555c6" translate="yes" xml:space="preserve">
          <source>func Base(path string) string</source>
          <target state="translated">func Base(パス文字列)文字列</target>
        </trans-unit>
        <trans-unit id="fc4bc6dad67df8169be40dffafd69089e791055d" translate="yes" xml:space="preserve">
          <source>func Base&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=12939:12968#L422&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Base &lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=12939:12968#L422&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="79bea34a972aa14855ddda341577bd37792fe97a" translate="yes" xml:space="preserve">
          <source>func Base&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=13035:13064#L424&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcベース&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=13035:13064#L424&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="953127e7ff3f13cb91167eda15d63aebc9994098" translate="yes" xml:space="preserve">
          <source>func Base&lt;a href=&quot;https://golang.org/src/path/path.go?s=4737:4766#L171&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Base &lt;a href=&quot;https://golang.org/src/path/path.go?s=4737:4766#L171&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db875b51046d76220674d2cd3bc8854916457a96" translate="yes" xml:space="preserve">
          <source>func Base&lt;a href=&quot;https://golang.org/src/path/path.go?s=4815:4844#L173&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcベース&lt;a href=&quot;https://golang.org/src/path/path.go?s=4815:4844#L173&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b59303524334425fda56f89ea5a4e46bc28b018c" translate="yes" xml:space="preserve">
          <source>func Benchmark(f func(b *B)) BenchmarkResult</source>
          <target state="translated">func Benchmark(f func(b *B))BenchmarkResult</target>
        </trans-unit>
        <trans-unit id="387567b6612609c1d9f6866f43b13c66438382fe" translate="yes" xml:space="preserve">
          <source>func Benchmark&lt;a href=&quot;https://golang.org/src/testing/benchmark.go?s=21994:22038#L758&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Benchmark &lt;a href=&quot;https://golang.org/src/testing/benchmark.go?s=21994:22038#L758&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99d8df595145a88349ebf2f9c60e54061c425df3" translate="yes" xml:space="preserve">
          <source>func Benchmark&lt;a href=&quot;https://golang.org/src/testing/benchmark.go?s=22623:22667#L784&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcベンチマーク&lt;a href=&quot;https://golang.org/src/testing/benchmark.go?s=22623:22667#L784&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3992f31aa56be6aad0c417eb404cf8b47da69405" translate="yes" xml:space="preserve">
          <source>func BinaryOp(x_ Value, op token.Token, y_ Value) Value</source>
          <target state="translated">func BinaryOp(x_Value,op token.Token,y_Value)Value</target>
        </trans-unit>
        <trans-unit id="ea4dc7b2831c36a1ce0bb23c062b4bd01c920e09" translate="yes" xml:space="preserve">
          <source>func BinaryOp&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=27048:27103#L1064&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">funcBinaryOp&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=27048:27103#L1064&quot;&gt;ソース&lt;/a&gt;1.5</target>
        </trans-unit>
        <trans-unit id="4c6cf1f9a121693b05394191db45f04fc48b8f9e" translate="yes" xml:space="preserve">
          <source>func BinaryOp&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=27815:27870#L1095&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func BinaryOp &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=27815:27870#L1095&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="9100698a03a5a36ed5dbaed15e06d3d9dba3a844" translate="yes" xml:space="preserve">
          <source>func Bind(fd int, sa Sockaddr) (err error)</source>
          <target state="translated">func Bind(fd int,sa Sockaddr)(err error)</target>
        </trans-unit>
        <trans-unit id="a9f88c561fe17f0b4481fbd1a9d58de1c99ef014" translate="yes" xml:space="preserve">
          <source>func Bind&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5059:5101#L228&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Bind &lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5059:5101#L228&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da03de057caec5de1912519c892896bd5e283c75" translate="yes" xml:space="preserve">
          <source>func Bind&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5410:5452#L239&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcバインド&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5410:5452#L239&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ac076622dea3606ddc54929b73e6b1cab432dd9" translate="yes" xml:space="preserve">
          <source>func BindToDevice(fd int, device string) (err error)</source>
          <target state="translated">func BindToDevice(fd int,device string)(err error)</target>
        </trans-unit>
        <trans-unit id="cb1fd1316a1d1db60620150c45649c3ef1be5f2c" translate="yes" xml:space="preserve">
          <source>func BindToDevice&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=17241:17293#L700&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func BindToDevice &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=17241:17293#L700&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4ef5c8749a029de69a47dec54aa42f6af165cdf1" translate="yes" xml:space="preserve">
          <source>func BindToDevice&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=17250:17302#L706&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcBindToDevice&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=17250:17302#L706&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56d64f101b930514e714ea7c47d22bf581d521d9" translate="yes" xml:space="preserve">
          <source>func BitLen(x Value) int</source>
          <target state="translated">ファンク BitLen(x Value)int</target>
        </trans-unit>
        <trans-unit id="8d94258b012502aea025ef90d980bad8e2892de7" translate="yes" xml:space="preserve">
          <source>func BitLen&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=16346:16370#L589&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func BitLen &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=16346:16370#L589&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="82487a59380eec43968f09db4d2f05458fc636a4" translate="yes" xml:space="preserve">
          <source>func BitLen&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=17113:17137#L620&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func BitLen &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=17113:17137#L620&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="bdd1cc7a0b26d88eea5fef0073d187e9dafed90d" translate="yes" xml:space="preserve">
          <source>func BlockProfile(p []BlockProfileRecord) (n int, ok bool)</source>
          <target state="translated">func BlockProfile(p []BlockProfileRecord)(n int,ok bool)</target>
        </trans-unit>
        <trans-unit id="9313a042523b87e40b0ad894050e84e7a869d062" translate="yes" xml:space="preserve">
          <source>func BlockProfile&lt;a href=&quot;https://golang.org/src/runtime/mprof.go?s=19026:19084#L624&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">func BlockProfile &lt;a href=&quot;https://golang.org/src/runtime/mprof.go?s=19026:19084#L624&quot;&gt;Source&lt;/a&gt; 1.1</target>
        </trans-unit>
        <trans-unit id="4e6e2017d7da4045029b470593a10270e7ee97bc" translate="yes" xml:space="preserve">
          <source>func Bool(name string, value bool, usage string) *bool</source>
          <target state="translated">func Bool(name string,value bool,usage string)*bool</target>
        </trans-unit>
        <trans-unit id="03956d4423ec5924da353e7c141752aa2b72d404" translate="yes" xml:space="preserve">
          <source>func Bool&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=19184:19238#L630&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Bool &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=19184:19238#L630&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad3edd95228bc50f851861ae63a0d8c7674a95ac" translate="yes" xml:space="preserve">
          <source>func Bool&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=19331:19385#L633&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Bool &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=19331:19385#L633&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6e83657675464c4cf4ad6d641a828d0067f29dae" translate="yes" xml:space="preserve">
          <source>func BoolVal(x Value) bool</source>
          <target state="translated">func BoolVal(x Value)bool</target>
        </trans-unit>
        <trans-unit id="8757e0135c85f11319ff2e371aaf97f898b64976" translate="yes" xml:space="preserve">
          <source>func BoolVal&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=12070:12096#L422&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func BoolVal &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=12070:12096#L422&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="3a963405a462be4c33d838bd25de4cd63cd89af2" translate="yes" xml:space="preserve">
          <source>func BoolVal&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=12837:12863#L453&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func BoolVal &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=12837:12863#L453&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="a969ced991ecd1b4cd5dd3b998c834a76e822e59" translate="yes" xml:space="preserve">
          <source>func BoolVar(p *bool, name string, value bool, usage string)</source>
          <target state="translated">func BoolVar(p *bool,name string,value bool,usage string)</target>
        </trans-unit>
        <trans-unit id="c287caf468e498a6b5717ec780e06af8f82a9f9e" translate="yes" xml:space="preserve">
          <source>func BoolVar&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18589:18649#L616&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func BoolVar &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18589:18649#L616&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="686b05a7cf86aa39bba93c0a4798020f8b3b272f" translate="yes" xml:space="preserve">
          <source>func BoolVar&lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18736:18796#L619&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func BoolVar &lt;a href=&quot;https://golang.org/src/flag/flag.go?s=18736:18796#L619&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="416575e652176a6d0704611c00853ffc45a0b6d1" translate="yes" xml:space="preserve">
          <source>func Breakpoint()</source>
          <target state="translated">ファンクブレークポイント()</target>
        </trans-unit>
        <trans-unit id="bf913d974ba5c73742c90f4634f9ed57c5cb232b" translate="yes" xml:space="preserve">
          <source>func Breakpoint&lt;a href=&quot;https://golang.org/src/runtime/proc.go?s=108365:108382#L3791&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcブレークポイント&lt;a href=&quot;https://golang.org/src/runtime/proc.go?s=108365:108382#L3791&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e2bca4c0e5cb936d14e6d3232fc3e6747a2378e" translate="yes" xml:space="preserve">
          <source>func Breakpoint&lt;a href=&quot;https://golang.org/src/runtime/proc.go?s=99618:99635#L3489&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Breakpoint &lt;a href=&quot;https://golang.org/src/runtime/proc.go?s=99618:99635#L3489&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f705178e5757a4c2021584c90f03fd4f8bf972f" translate="yes" xml:space="preserve">
          <source>func Bswap32(x uint32) uint32</source>
          <target state="translated">func Bswap32(x uint32)uint32</target>
        </trans-unit>
        <trans-unit id="6764bd39f23d704d65d871cdf7089bcda778802d" translate="yes" xml:space="preserve">
          <source>func Bswap32&lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=2292:2321#L71&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcBswap32&lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=2292:2321#L71&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fccda6e806afb408b7cd7a8fa7fcb86de80dc6c6" translate="yes" xml:space="preserve">
          <source>func Bswap32&lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=3674:3703#L87&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Bswap32 &lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=3674:3703#L87&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="523526bfa0e8e09e9593f3986cff570ce352d3a7" translate="yes" xml:space="preserve">
          <source>func Bswap64(x uint64) uint64</source>
          <target state="translated">func Bswap64(x uint64)uint64</target>
        </trans-unit>
        <trans-unit id="725c3974be9fb0faed4f7177ec1c1bb4bb5f6ec6" translate="yes" xml:space="preserve">
          <source>func Bswap64&lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=1910:1939#L53&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcBswap64&lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=1910:1939#L53&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cf5272b7bf37cbf073891f7e1a5e514d50dfbdf" translate="yes" xml:space="preserve">
          <source>func Bswap64&lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=3292:3321#L69&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Bswap64 &lt;a href=&quot;https://golang.org/src/runtime/internal/sys/intrinsics.go?s=3292:3321#L69&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7bb4afb9037e298aee341580d736ff299190fc17" translate="yes" xml:space="preserve">
          <source>func BytePtrFromString(s string) (*byte, error)</source>
          <target state="translated">func BytePtrFromString(s string)(*byte,error)</target>
        </trans-unit>
        <trans-unit id="e37dd7252c7a558920cfc8e7a5e74b1297e577a0" translate="yes" xml:space="preserve">
          <source>func BytePtrFromString&lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2741:2788#L58&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">func BytePtrFromString &lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2741:2788#L58&quot;&gt;Source&lt;/a&gt; 1.1</target>
        </trans-unit>
        <trans-unit id="cdd4ee30a22a579e33fa75b05819af4e607e52f9" translate="yes" xml:space="preserve">
          <source>func BytePtrFromString&lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2758:2805#L58&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">funcBytePtrFromString&lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2758:2805#L58&quot;&gt;ソース&lt;/a&gt;1.1</target>
        </trans-unit>
        <trans-unit id="cee30cf46ef11ac1b9eef14bbb6c940dc09ba5ba" translate="yes" xml:space="preserve">
          <source>func ByteSliceFromString(s string) ([]byte, error)</source>
          <target state="translated">func ByteSliceFromString(s string)([]byte,error)</target>
        </trans-unit>
        <trans-unit id="29fa8947d2a3a69b3a892d3ec1e7e392b60a417b" translate="yes" xml:space="preserve">
          <source>func ByteSliceFromString&lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2105:2155#L37&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">func ByteSliceFromString &lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2105:2155#L37&quot;&gt;Source&lt;/a&gt; 1.1</target>
        </trans-unit>
        <trans-unit id="b30b8f6840de838c03bb974c37c519ee0bf54a08" translate="yes" xml:space="preserve">
          <source>func ByteSliceFromString&lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2122:2172#L37&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">funcByteSliceFromString&lt;a href=&quot;https://golang.org/src/syscall/syscall.go?s=2122:2172#L37&quot;&gt;ソース&lt;/a&gt;1.1</target>
        </trans-unit>
        <trans-unit id="19cffbaaa5a2121c8c9364e19baebdbe3165e9e3" translate="yes" xml:space="preserve">
          <source>func Bytes(x Value) []byte</source>
          <target state="translated">func Bytes(x Value)[]バイト</target>
        </trans-unit>
        <trans-unit id="30a1e5eab2127b76e24730a5f4a020b908a901af" translate="yes" xml:space="preserve">
          <source>func Bytes&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=17610:17636#L642&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">funcバイト&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=17610:17636#L642&quot;&gt;ソース&lt;/a&gt;1.5</target>
        </trans-unit>
        <trans-unit id="fb3c10c0e2d6dc9ac887d91d6eccc986c6ccaf2b" translate="yes" xml:space="preserve">
          <source>func Bytes&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=18377:18403#L673&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func Bytes &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=18377:18403#L673&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="758c5d08c247d8a66c7f06310f09ecc620e02541" translate="yes" xml:space="preserve">
          <source>func CIDRMask(ones, bits int) IPMask</source>
          <target state="translated">func CIDRMask(ones,bits int)IPMask</target>
        </trans-unit>
        <trans-unit id="73ae42d3996f97e43b379bbbb7e5c457c50fc0b8" translate="yes" xml:space="preserve">
          <source>func CIDRMask&lt;a href=&quot;https://golang.org/src/net/ip.go?s=1801:1837#L61&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CIDRMask &lt;a href=&quot;https://golang.org/src/net/ip.go?s=1801:1837#L61&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="47df2c5dedfeccfcb8271cbe372c298cee14577d" translate="yes" xml:space="preserve">
          <source>func CIDRMask&lt;a href=&quot;https://golang.org/src/net/ip.go?s=1926:1962#L64&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcCIDRMask&lt;a href=&quot;https://golang.org/src/net/ip.go?s=1926:1962#L64&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="215948cfb5e96fbcc7295a8abafa8a9f24619c39" translate="yes" xml:space="preserve">
          <source>func CMYKToRGB(c, m, y, k uint8) (uint8, uint8, uint8)</source>
          <target state="translated">func CMYKToRGB(c,m,y,k uint8)(uint8,uint8,uint8)</target>
        </trans-unit>
        <trans-unit id="003f098dd07812babdab4803c4b3aa7f40d7852e" translate="yes" xml:space="preserve">
          <source>func CMYKToRGB&lt;a href=&quot;https://golang.org/src/image/color/ycbcr.go?s=9901:9955#L326&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func CMYKToRGB &lt;a href=&quot;https://golang.org/src/image/color/ycbcr.go?s=9901:9955#L326&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="e08871a7b9c3f123a9b6a05c954e996ed33ed0d8" translate="yes" xml:space="preserve">
          <source>func CPUProfile() []byte</source>
          <target state="translated">func CPUProfile()[]バイト</target>
        </trans-unit>
        <trans-unit id="f1adb2e66028fb5bfdcf497acb37b6d299a33867" translate="yes" xml:space="preserve">
          <source>func CPUProfile&lt;a href=&quot;https://golang.org/src/runtime/cpuprof.go?s=5826:5850#L178&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CPUProfile &lt;a href=&quot;https://golang.org/src/runtime/cpuprof.go?s=5826:5850#L178&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75f4cce60ba74e25eabfc25717e740f7953d7ca4" translate="yes" xml:space="preserve">
          <source>func CRAMMD5Auth(username, secret string) Auth</source>
          <target state="translated">func CRAMMD5Auth(username,secret string)認証</target>
        </trans-unit>
        <trans-unit id="de1119570a9b4ec10a57abbd53b03c505155421c" translate="yes" xml:space="preserve">
          <source>func CRAMMD5Auth&lt;a href=&quot;https://golang.org/src/net/smtp/auth.go?s=3375:3421#L84&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CRAMMD5Auth &lt;a href=&quot;https://golang.org/src/net/smtp/auth.go?s=3375:3421#L84&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4202248140dd3136d29fbb00101d27b0dca3f7db" translate="yes" xml:space="preserve">
          <source>func Caller(skip int) (pc uintptr, file string, line int, ok bool)</source>
          <target state="translated">func Caller(skip int)(pc uintptr,ファイル文字列,行 int,ok bool)</target>
        </trans-unit>
        <trans-unit id="aaa9dddb43d40408f68ff87ac42372dc8f965f84" translate="yes" xml:space="preserve">
          <source>func Caller&lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=9344:9410#L170&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Caller &lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=9344:9410#L170&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5816e5b125aa6c30f8e9a07838ae665e685481f4" translate="yes" xml:space="preserve">
          <source>func Caller&lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=9765:9831#L176&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func発信者&lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=9765:9831#L176&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9a8bbefb450d9b42dff5cccda3ab36d0be47dd39" translate="yes" xml:space="preserve">
          <source>func Callers(skip int, pc []uintptr) int</source>
          <target state="translated">func Callers(skip int,pc []uintptr)int</target>
        </trans-unit>
        <trans-unit id="1e7461ce61415c7b7a2142b003f9a388756b9952" translate="yes" xml:space="preserve">
          <source>func Callers&lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=10396:10436#L194&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Callers &lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=10396:10436#L194&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87ded6200c51766d230d51284192816af3647fd4" translate="yes" xml:space="preserve">
          <source>func Callers&lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=10803:10843#L199&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func発信者&lt;a href=&quot;https://golang.org/src/runtime/extern.go?s=10803:10843#L199&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87fd7a641bcf42feffb0ce7568257fecf4004df3" translate="yes" xml:space="preserve">
          <source>func CallersFrames(callers []uintptr) *Frames</source>
          <target state="translated">func CallersFrames(callers []uintptr)*Frames</target>
        </trans-unit>
        <trans-unit id="66fdf358da77ae6f8c8055ec9990fcb44f946c87" translate="yes" xml:space="preserve">
          <source>func CallersFrames&lt;a href=&quot;https://golang.org/src/runtime/symtab.go?s=2110:2155#L55&quot;&gt;Source&lt;/a&gt;1.7</source>
          <target state="translated">func CallersFrames &lt;a href=&quot;https://golang.org/src/runtime/symtab.go?s=2110:2155#L55&quot;&gt;ソース&lt;/a&gt; 1.7</target>
        </trans-unit>
        <trans-unit id="eb05de85f6ce7e603541691e9d20a2909abb8145" translate="yes" xml:space="preserve">
          <source>func CanBackquote(s string) bool</source>
          <target state="translated">func CanBackquote(s string)bool</target>
        </trans-unit>
        <trans-unit id="b8e736fdb944a036d0a42978002cac7a06c9347b" translate="yes" xml:space="preserve">
          <source>func CanBackquote&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6697:6729#L194&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CanBackquote &lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6697:6729#L194&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8701e1e03d78ee99dbcfac490289d8144584c0f9" translate="yes" xml:space="preserve">
          <source>func CanBackquote&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6723:6755#L195&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcCanBackquote&lt;a href=&quot;https://golang.org/src/strconv/quote.go?s=6723:6755#L195&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2849354b7c5e498170d829670e1ec2857267f2b8" translate="yes" xml:space="preserve">
          <source>func CanonicalHeaderKey(s string) string</source>
          <target state="translated">func CanonicalHeaderKey(s string)string</target>
        </trans-unit>
        <trans-unit id="cc61d88b087ee9a5d81a364fa827beb52814b536" translate="yes" xml:space="preserve">
          <source>func CanonicalHeaderKey&lt;a href=&quot;https://golang.org/src/net/http/header.go?s=5905:5945#L204&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CanonicalHeaderKey &lt;a href=&quot;https://golang.org/src/net/http/header.go?s=5905:5945#L204&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74b6d49e21051dd768d5abe9bd4f130c9d816533" translate="yes" xml:space="preserve">
          <source>func CanonicalHeaderKey&lt;a href=&quot;https://golang.org/src/net/http/header.go?s=6276:6316#L213&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CanonicalHeaderKey &lt;a href=&quot;https://golang.org/src/net/http/header.go?s=6276:6316#L213&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ec9c4645324f6d9562da52c60cb6864f29148d54" translate="yes" xml:space="preserve">
          <source>func CanonicalMIMEHeaderKey(s string) string</source>
          <target state="translated">func CanonicalMIMEHeaderKey(s string)文字列</target>
        </trans-unit>
        <trans-unit id="e4adea2b5cd49e57d396aff6a31606b17a014c74" translate="yes" xml:space="preserve">
          <source>func CanonicalMIMEHeaderKey&lt;a href=&quot;https://golang.org/src/net/textproto/reader.go?s=15120:15164#L559&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CanonicalMIMEHeaderKey &lt;a href=&quot;https://golang.org/src/net/textproto/reader.go?s=15120:15164#L559&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74eb85111b14e309beb725e4d21083cc80ea0e95" translate="yes" xml:space="preserve">
          <source>func CanonicalMIMEHeaderKey&lt;a href=&quot;https://golang.org/src/net/textproto/reader.go?s=16088:16132#L586&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CanonicalMIMEHeaderKey &lt;a href=&quot;https://golang.org/src/net/textproto/reader.go?s=16088:16132#L586&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bc0fcaeca3ee52c8a5debd5cb1eb53cf8de47cd" translate="yes" xml:space="preserve">
          <source>func Cbrt(x float64) float64</source>
          <target state="translated">func Cbrt(x float64)float64</target>
        </trans-unit>
        <trans-unit id="67af753b715adb4bcfb7f0866c10830c0a33229f" translate="yes" xml:space="preserve">
          <source>func Cbrt&lt;a href=&quot;https://golang.org/src/math/cbrt.go?s=807:835#L15&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Cbrt &lt;a href=&quot;https://golang.org/src/math/cbrt.go?s=807:835#L15&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="17955c18008ff75ed7325ec77620ad8b8dccec13" translate="yes" xml:space="preserve">
          <source>func Ceil(x float64) float64</source>
          <target state="translated">func Ceil(x float64)float64</target>
        </trans-unit>
        <trans-unit id="9ee293db2ca4f12b85740f35b6c6fa6f3937f822" translate="yes" xml:space="preserve">
          <source>func Ceil&lt;a href=&quot;https://golang.org/src/math/floor.go?s=720:748#L26&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Ceil &lt;a href=&quot;https://golang.org/src/math/floor.go?s=720:748#L26&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="13de37099bc1678ed097370fa069258e414c2ccb" translate="yes" xml:space="preserve">
          <source>func ChanOf(dir ChanDir, t Type) Type</source>
          <target state="translated">func ChanOf(dir ChanDir,t Type)型</target>
        </trans-unit>
        <trans-unit id="59b64c1dd2ea7029f3508d33fdbb1b6a077a8692" translate="yes" xml:space="preserve">
          <source>func ChanOf&lt;a href=&quot;https://golang.org/src/reflect/type.go?s=49752:49789#L1766&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">func ChanOf &lt;a href=&quot;https://golang.org/src/reflect/type.go?s=49752:49789#L1766&quot;&gt;Source&lt;/a&gt; 1.1</target>
        </trans-unit>
        <trans-unit id="0880f8e3a8b9eefe4cdb580f58448d78335d7905" translate="yes" xml:space="preserve">
          <source>func ChanOf&lt;a href=&quot;https://golang.org/src/reflect/type.go?s=50204:50241#L1767&quot;&gt;Source&lt;/a&gt;1.1</source>
          <target state="translated">func ChanOf &lt;a href=&quot;https://golang.org/src/reflect/type.go?s=50204:50241#L1767&quot;&gt;Source&lt;/a&gt; 1.1</target>
        </trans-unit>
        <trans-unit id="1dd8f641977340db705de868b7dc4de101772803" translate="yes" xml:space="preserve">
          <source>func Chdir(dir string) error</source>
          <target state="translated">func Chdir(dir string)エラー</target>
        </trans-unit>
        <trans-unit id="6e5fb4ea2b9a2b7e24955c4c975c4ae269655adc" translate="yes" xml:space="preserve">
          <source>func Chdir(path string) (err error)</source>
          <target state="translated">func Chdir(パス文字列)(err error)</target>
        </trans-unit>
        <trans-unit id="48c316ea453dafc77aaf2fbc5b3b9310e4702be9" translate="yes" xml:space="preserve">
          <source>func Chdir&lt;a href=&quot;https://golang.org/src/os/file.go?s=7660:7688#L251&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chdir &lt;a href=&quot;https://golang.org/src/os/file.go?s=7660:7688#L251&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="df3b18defba29e8ac3e1249bce271c0aa65597ec" translate="yes" xml:space="preserve">
          <source>func Chdir&lt;a href=&quot;https://golang.org/src/os/file.go?s=8392:8420#L278&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcChdir&lt;a href=&quot;https://golang.org/src/os/file.go?s=8392:8420#L278&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="054a42bf2aae7760db23be0991636f15995756e3" translate="yes" xml:space="preserve">
          <source>func Chdir&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6252:6287#L244&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcChdir&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6252:6287#L244&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2717a63489af151a989da28ef06b8affe1a1e0dd" translate="yes" xml:space="preserve">
          <source>func Chdir&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6904:6939#L269&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chdir &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6904:6939#L269&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e4be63e3f8f6807a7114862df0e184ecc2d9c81" translate="yes" xml:space="preserve">
          <source>func Check(f interface{}, config *Config) error</source>
          <target state="translated">func Check(f interface{},config *Config)error</target>
        </trans-unit>
        <trans-unit id="54f0e6cf41893c3d1820a7649bfab8f2fa13aaf2" translate="yes" xml:space="preserve">
          <source>func Check&lt;a href=&quot;https://golang.org/src/testing/quick/quick.go?s=7499:7546#L253&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Check &lt;a href=&quot;https://golang.org/src/testing/quick/quick.go?s=7499:7546#L253&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9e43cf5f05c28f563271045094b9bbd5b85c86d4" translate="yes" xml:space="preserve">
          <source>func CheckEqual(f, g interface{}, config *Config) error</source>
          <target state="translated">func CheckEqual(f,g interface{},config *Config)error</target>
        </trans-unit>
        <trans-unit id="1a71b2b6a4bcf2e8505366347cb02a9aa5d81cea" translate="yes" xml:space="preserve">
          <source>func CheckEqual&lt;a href=&quot;https://golang.org/src/testing/quick/quick.go?s=8512:8567#L292&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CheckEqual &lt;a href=&quot;https://golang.org/src/testing/quick/quick.go?s=8512:8567#L292&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bcd51ad57639c337a593aac9add09ca2c79058da" translate="yes" xml:space="preserve">
          <source>func CheckExpr(fset *token.FileSet, pkg *Package, pos token.Pos, expr ast.Expr, info *Info) (err error)</source>
          <target state="translated">func CheckExpr(fset *token.FileSet,pkg *Package,pos token.Pos,expr ast.Expr,info *Info)(err error)</target>
        </trans-unit>
        <trans-unit id="d518a5852741db43706c5d44c92ce3f9ad17b288" translate="yes" xml:space="preserve">
          <source>func CheckExpr&lt;a href=&quot;https://golang.org/src/go/types/eval.go?s=1880:1983#L46&quot;&gt;Source&lt;/a&gt;1.13</source>
          <target state="translated">func CheckExpr &lt;a href=&quot;https://golang.org/src/go/types/eval.go?s=1880:1983#L46&quot;&gt;Source&lt;/a&gt; 1.13</target>
        </trans-unit>
        <trans-unit id="24ccd9b5033eb4f9342526503e0214e737505783" translate="yes" xml:space="preserve">
          <source>func Checksum(data []byte) uint32</source>
          <target state="translated">func Checksum(data []byte)uint32</target>
        </trans-unit>
        <trans-unit id="b096369b9ba209e4f271f8acec6edc6ac2818512" translate="yes" xml:space="preserve">
          <source>func Checksum(data []byte, tab *Table) uint32</source>
          <target state="translated">func Checksum(data []byte,tab *Table)uint32</target>
        </trans-unit>
        <trans-unit id="4a1ca1dd283955ee67769e3159ed5294fef4fe45" translate="yes" xml:space="preserve">
          <source>func Checksum(data []byte, tab *Table) uint64</source>
          <target state="translated">func Checksum(data []byte,tab *Table)uint64</target>
        </trans-unit>
        <trans-unit id="7096efa58421c91e54a491c7cfe767148f918108" translate="yes" xml:space="preserve">
          <source>func Checksum&lt;a href=&quot;https://golang.org/src/hash/adler32/adler32.go?s=3187:3220#L124&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcチェックサム&lt;a href=&quot;https://golang.org/src/hash/adler32/adler32.go?s=3187:3220#L124&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a7e256dfa29db15d7a7a939a207a535041a1a265" translate="yes" xml:space="preserve">
          <source>func Checksum&lt;a href=&quot;https://golang.org/src/hash/crc32/crc32.go?s=7383:7428#L237&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcチェックサム&lt;a href=&quot;https://golang.org/src/hash/crc32/crc32.go?s=7383:7428#L237&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="51b910cdde87c5850ce98995984a3e1e4cf5b141" translate="yes" xml:space="preserve">
          <source>func Checksum&lt;a href=&quot;https://golang.org/src/hash/crc64/crc64.go?s=5400:5445#L202&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcチェックサム&lt;a href=&quot;https://golang.org/src/hash/crc64/crc64.go?s=5400:5445#L202&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="14541058c86e6d3d604dfbd8a51b91a625cd6634" translate="yes" xml:space="preserve">
          <source>func ChecksumIEEE(data []byte) uint32</source>
          <target state="translated">func ChecksumIEEE(data []byte)uint32</target>
        </trans-unit>
        <trans-unit id="b07952253c7d2defef78b1b61c8c1e348e28215c" translate="yes" xml:space="preserve">
          <source>func ChecksumIEEE&lt;a href=&quot;https://golang.org/src/hash/crc32/crc32.go?s=7544:7581#L241&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ChecksumIEEE &lt;a href=&quot;https://golang.org/src/hash/crc32/crc32.go?s=7544:7581#L241&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f3f8898240799dd993d92ee4261160b65f04bb02" translate="yes" xml:space="preserve">
          <source>func Chmod(name string, mode FileMode) error</source>
          <target state="translated">func Chmod(name string,mode FileMode)エラー</target>
        </trans-unit>
        <trans-unit id="63e43306f889f05dc1178646c6ee2b5de08f4e24" translate="yes" xml:space="preserve">
          <source>func Chmod(path string, mode uint32) (err error)</source>
          <target state="translated">func Chmod(path string,mode uint32)(err error)</target>
        </trans-unit>
        <trans-unit id="cdd625d98e6fc2b9ff885eda682102dbd27b141d" translate="yes" xml:space="preserve">
          <source>func Chmod&lt;a href=&quot;https://golang.org/src/os/file.go?s=15028:15072#L495&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chmod &lt;a href=&quot;https://golang.org/src/os/file.go?s=15028:15072#L495&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37ca5f16fcd3b4f9ed513431aa137abdf4e8ee14" translate="yes" xml:space="preserve">
          <source>func Chmod&lt;a href=&quot;https://golang.org/src/os/file.go?s=15711:15755#L520&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chmod &lt;a href=&quot;https://golang.org/src/os/file.go?s=15711:15755#L520&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f04628cace5e37346f2318dca50cb7cfee751f5c" translate="yes" xml:space="preserve">
          <source>func Chmod&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=653:701#L16&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chmod &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=653:701#L16&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0d745c3339c76cc85d919ca20945ec5219734f71" translate="yes" xml:space="preserve">
          <source>func Chown(name string, uid, gid int) error</source>
          <target state="translated">func Chown(name string,uid,gid int)エラー</target>
        </trans-unit>
        <trans-unit id="9e8821e253ce52919a9b0fd1cdbc226f08976ea0" translate="yes" xml:space="preserve">
          <source>func Chown(path string, uid int, gid int) (err error)</source>
          <target state="translated">func Chown(path string,uid int,gid int)(err error)</target>
        </trans-unit>
        <trans-unit id="306eaa6285616bd288413d578d9b34baa1ba40ff" translate="yes" xml:space="preserve">
          <source>func Chown&lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=1525:1568#L48&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chown &lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=1525:1568#L48&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f06426dc81ec2f5fdf68449b5a1aa9ea6c5bbce0" translate="yes" xml:space="preserve">
          <source>func Chown&lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=2906:2949#L93&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chown &lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=2906:2949#L93&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="be19c017086bbe2dcf62f08c224e102074a7ffd5" translate="yes" xml:space="preserve">
          <source>func Chown&lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=750:803#L20&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chown &lt;a href=&quot;https://golang.org/src/syscall/syscall_linux.go?s=750:803#L20&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="54fbab0b1d5335b73e0ebca925ee1fbe1abdcb88" translate="yes" xml:space="preserve">
          <source>func Chroot(path string) (err error)</source>
          <target state="translated">func Chroot(パス文字列)(err error)</target>
        </trans-unit>
        <trans-unit id="d254a9c77cd0f0dd015aede8d211e2a1bd3a73d4" translate="yes" xml:space="preserve">
          <source>func Chroot&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6553:6589#L259&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chroot &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6553:6589#L259&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c73c2ed298aa6dac5c2c2e617bbc428d90c12fe9" translate="yes" xml:space="preserve">
          <source>func Chroot&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=7205:7241#L284&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chroot &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=7205:7241#L284&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="efb8f839259990527a18b636dd1a6b76ac69e372" translate="yes" xml:space="preserve">
          <source>func Chtimes(name string, atime time.Time, mtime time.Time) error</source>
          <target state="translated">func Chtimes(name string,atime time.Time,mtime time.Time)error</target>
        </trans-unit>
        <trans-unit id="3def694d910bddb28a767ed51aa13118e76baa06" translate="yes" xml:space="preserve">
          <source>func Chtimes&lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=3495:3560#L115&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chtimes &lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=3495:3560#L115&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d18f931de4b2cde0bca912025092e55b3af684d" translate="yes" xml:space="preserve">
          <source>func Chtimes&lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=4876:4941#L160&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Chtimes &lt;a href=&quot;https://golang.org/src/os/file_posix.go?s=4876:4941#L160&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef92d1472d0d5f8bbefde2a8da12ba4707a6724f" translate="yes" xml:space="preserve">
          <source>func CipherSuiteName(id uint16) string</source>
          <target state="translated">func CipherSuiteName(id uint16)文字列</target>
        </trans-unit>
        <trans-unit id="128ac40f297f5d556f8176587d2e4940cbd2685e" translate="yes" xml:space="preserve">
          <source>func CipherSuiteName&lt;a href=&quot;https://golang.org/src/crypto/tls/cipher_suites.go?s=4642:4680#L87&quot;&gt;Source&lt;/a&gt;1.14</source>
          <target state="translated">funcCipherSuiteName&lt;a href=&quot;https://golang.org/src/crypto/tls/cipher_suites.go?s=4642:4680#L87&quot;&gt;ソース&lt;/a&gt;1.14</target>
        </trans-unit>
        <trans-unit id="63430f0a8d005735c4485355552a82d675395ab0" translate="yes" xml:space="preserve">
          <source>func CipherSuites() []*CipherSuite</source>
          <target state="translated">func CipherSuites()[]*CipherSuite</target>
        </trans-unit>
        <trans-unit id="403fe95399f93fc5005f818fa3ebbbb7147f15e7" translate="yes" xml:space="preserve">
          <source>func CipherSuites&lt;a href=&quot;https://golang.org/src/crypto/tls/cipher_suites.go?s=1340:1374#L40&quot;&gt;Source&lt;/a&gt;1.14</source>
          <target state="translated">funcCipherSuites&lt;a href=&quot;https://golang.org/src/crypto/tls/cipher_suites.go?s=1340:1374#L40&quot;&gt;ソース&lt;/a&gt;1.14</target>
        </trans-unit>
        <trans-unit id="68636e61c96ce8f1d97d1ede2070a488eed41d1d" translate="yes" xml:space="preserve">
          <source>func Clean(path string) string</source>
          <target state="translated">func Clean(path string)文字列</target>
        </trans-unit>
        <trans-unit id="bdfa9ce3d105425c71780278055f083428245e78" translate="yes" xml:space="preserve">
          <source>func Clean&lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=2501:2531#L78&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Clean &lt;a href=&quot;https://golang.org/src/path/filepath/path.go?s=2501:2531#L78&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7bb5056b34bf61bc54b6690348afe4c8e02917ba" translate="yes" xml:space="preserve">
          <source>func Clean&lt;a href=&quot;https://golang.org/src/path/path.go?s=2075:2105#L64&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Clean &lt;a href=&quot;https://golang.org/src/path/path.go?s=2075:2105#L64&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="253d5facd7af5facc1f00bdb38e7ee65c2be67ff" translate="yes" xml:space="preserve">
          <source>func Clearenv()</source>
          <target state="translated">ファンククリアenv()</target>
        </trans-unit>
        <trans-unit id="c9ec01f1c11742d9e2a5f74e25caa19b546a5e23" translate="yes" xml:space="preserve">
          <source>func Clearenv&lt;a href=&quot;https://golang.org/src/os/env.go?s=3747:3762#L123&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Clearenv &lt;a href=&quot;https://golang.org/src/os/env.go?s=3747:3762#L123&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="41dda7e6361471e32f0f6f56f95d9b4aa7f39ca4" translate="yes" xml:space="preserve">
          <source>func Clearenv&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go?s=2427:2442#L115&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Clearenv &lt;a href=&quot;https://golang.org/src/syscall/env_unix.go?s=2427:2442#L115&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="75b0af5fe4a62a6d08a1e9d05e57e42ccec68b1f" translate="yes" xml:space="preserve">
          <source>func Clearenv&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go?s=2539:2554#L121&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcClearenv&lt;a href=&quot;https://golang.org/src/syscall/env_unix.go?s=2539:2554#L121&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94cdc011cdc4910570ddb7fc1daa66090390afc8" translate="yes" xml:space="preserve">
          <source>func Client(conn net.Conn, config *Config) *Conn</source>
          <target state="translated">func Client(conn net.Conn,config *Config)*Conn</target>
        </trans-unit>
        <trans-unit id="97c2ef544a6210025afd493ddeebc21200978544" translate="yes" xml:space="preserve">
          <source>func Client&lt;a href=&quot;https://golang.org/src/crypto/tls/tls.go?s=1291:1339#L38&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcクライアント&lt;a href=&quot;https://golang.org/src/crypto/tls/tls.go?s=1291:1339#L38&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7540fdadf819a16e6e3f9eee277cc23824f6e3a9" translate="yes" xml:space="preserve">
          <source>func Client&lt;a href=&quot;https://golang.org/src/crypto/tls/tls.go?s=1413:1461#L36&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Client &lt;a href=&quot;https://golang.org/src/crypto/tls/tls.go?s=1413:1461#L36&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3556b5cfe17dd83086d9c4ad6772cf8fd7241df" translate="yes" xml:space="preserve">
          <source>func Close(fd int) (err error)</source>
          <target state="translated">func Close(fd int)(err error)</target>
        </trans-unit>
        <trans-unit id="c7ad70288f7eeb2aefee1914c7ae7e4364b72876" translate="yes" xml:space="preserve">
          <source>func Close&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6856:6886#L274&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcクローズ&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=6856:6886#L274&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="517bae679413277c4ac19d9cd913cf0ac2064da0" translate="yes" xml:space="preserve">
          <source>func Close&lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=7508:7538#L299&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Close &lt;a href=&quot;https://golang.org/src/syscall/zsyscall_linux_amd64.go?s=7508:7538#L299&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="33610c1f39018c0a1b7310d7dd95a24d0b445bdc" translate="yes" xml:space="preserve">
          <source>func CloseOnExec(fd int)</source>
          <target state="translated">ファンク CloseOnExec(fd int)</target>
        </trans-unit>
        <trans-unit id="6568178e9a5cdde9c7fcf5bdb28d719971b96a6b" translate="yes" xml:space="preserve">
          <source>func CloseOnExec&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go?s=3661:3685#L93&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CloseOnExec &lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go?s=3661:3685#L93&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a07f93e0845a066aa7bb1c494696bbe4ed30f70f" translate="yes" xml:space="preserve">
          <source>func CloseOnExec&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go?s=3681:3705#L94&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcCloseOnExec&lt;a href=&quot;https://golang.org/src/syscall/exec_unix.go?s=3681:3705#L94&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="964f5106d7ea9f6c6df4e01c32ab09a0f4a5aecd" translate="yes" xml:space="preserve">
          <source>func Cmdline(w http.ResponseWriter, r *http.Request)</source>
          <target state="translated">func Cmdline(w http.ResponseWriter,r *http.Request)</target>
        </trans-unit>
        <trans-unit id="c6b4f4cbf0693da9402afac30c40571db2814c3a" translate="yes" xml:space="preserve">
          <source>func Cmdline&lt;a href=&quot;https://golang.org/src/net/http/pprof/pprof.go?s=2316:2368#L73&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Cmdline &lt;a href=&quot;https://golang.org/src/net/http/pprof/pprof.go?s=2316:2368#L73&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9252f0402e48f184ac7e130db09682818eaedba" translate="yes" xml:space="preserve">
          <source>func Cmdline&lt;a href=&quot;https://golang.org/src/net/http/pprof/pprof.go?s=2598:2650#L80&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Cmdline &lt;a href=&quot;https://golang.org/src/net/http/pprof/pprof.go?s=2598:2650#L80&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="81fa735e960acd4ea8c4a1438bf1dcc5b9c8bb89" translate="yes" xml:space="preserve">
          <source>func CmsgLen(datalen int) int</source>
          <target state="translated">func CmsgLen(data int)int</target>
        </trans-unit>
        <trans-unit id="834c35bef8d5114277845bfeea47c5aba7837bd4" translate="yes" xml:space="preserve">
          <source>func CmsgLen&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=1056:1085#L33&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CmsgLen &lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=1056:1085#L33&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="68878bfc1e245c4cec2e8b9b7848498b31da12c0" translate="yes" xml:space="preserve">
          <source>func CmsgLen&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=425:454#L7&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcCmsgLen&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=425:454#L7&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dd3dd64aaf9e924b84732bd1b34e3557345722ad" translate="yes" xml:space="preserve">
          <source>func CmsgSpace(datalen int) int</source>
          <target state="translated">func CmsgSpace(data int)int</target>
        </trans-unit>
        <trans-unit id="1fa525df90e7a6523733a3d858d1cb36e0ef9d07" translate="yes" xml:space="preserve">
          <source>func CmsgSpace&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=1250:1281#L39&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CmsgSpace &lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=1250:1281#L39&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a33c0823b2c45279689539918c0fec88653f016c" translate="yes" xml:space="preserve">
          <source>func CmsgSpace&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=619:650#L13&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcCmsgSpace&lt;a href=&quot;https://golang.org/src/syscall/sockcmsg_unix.go?s=619:650#L13&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="065dc5020f76d03198864682d18eac56db367ed1" translate="yes" xml:space="preserve">
          <source>func Command(name string, arg ...string) *Cmd</source>
          <target state="translated">func Command(name string,arg ...string)*Cmd</target>
        </trans-unit>
        <trans-unit id="f96db2f55f0c9abb0a90a11384a3c73c2bc352af" translate="yes" xml:space="preserve">
          <source>func Command&lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6250:6295#L158&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcコマンド&lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6250:6295#L158&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed7106d167c4177e577b9406de909f5d8030fbaf" translate="yes" xml:space="preserve">
          <source>func Command&lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6278:6323#L159&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcコマンド&lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6278:6323#L159&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6872677c9216fd51226fe704d0b2a9b20489bfab" translate="yes" xml:space="preserve">
          <source>func CommandContext(ctx context.Context, name string, arg ...string) *Cmd</source>
          <target state="translated">func CommandContext(ctx context.Context,name string,arg ...string)*Cmd</target>
        </trans-unit>
        <trans-unit id="97d6db51f63a44d0464b4ceb254da9a9883b2c22" translate="yes" xml:space="preserve">
          <source>func CommandContext&lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6740:6813#L178&quot;&gt;Source&lt;/a&gt;1.7</source>
          <target state="translated">func CommandContext &lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6740:6813#L178&quot;&gt;Source&lt;/a&gt; 1.7</target>
        </trans-unit>
        <trans-unit id="a0f52b3d64e4a41bc18805c89226103bed63a783" translate="yes" xml:space="preserve">
          <source>func CommandContext&lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6768:6841#L179&quot;&gt;Source&lt;/a&gt;1.7</source>
          <target state="translated">func CommandContext &lt;a href=&quot;https://golang.org/src/os/exec/exec.go?s=6768:6841#L179&quot;&gt;Source&lt;/a&gt; 1.7</target>
        </trans-unit>
        <trans-unit id="f06ab8d83764f6569f8b8f7eb5bd1eed22005538" translate="yes" xml:space="preserve">
          <source>func Compact(dst *bytes.Buffer, src []byte) error</source>
          <target state="translated">func Compact(dst *bytes.Buffer,src []byte)エラー</target>
        </trans-unit>
        <trans-unit id="fd4dd438ba454cd53205350fbf14ac55d26a9b98" translate="yes" xml:space="preserve">
          <source>func Compact&lt;a href=&quot;https://golang.org/src/encoding/json/indent.go?s=284:333#L1&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Compact &lt;a href=&quot;https://golang.org/src/encoding/json/indent.go?s=284:333#L1&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39d95d10da357e1fea83af04c3cd7a0c36f62312" translate="yes" xml:space="preserve">
          <source>func Compact&lt;a href=&quot;https://golang.org/src/encoding/json/indent.go?s=289:338#L3&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcコンパクト&lt;a href=&quot;https://golang.org/src/encoding/json/indent.go?s=289:338#L3&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1517391ba36ce9cdc2db01a7013f30a8825bd045" translate="yes" xml:space="preserve">
          <source>func Comparable(T Type) bool</source>
          <target state="translated">func Comparable(T Type)bool</target>
        </trans-unit>
        <trans-unit id="ceca114514cfe5b9ee5ed1cfe5cd7b9806f3a88b" translate="yes" xml:space="preserve">
          <source>func Comparable&lt;a href=&quot;https://golang.org/src/go/types/predicates.go?s=1744:1772#L71&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func Comparable &lt;a href=&quot;https://golang.org/src/go/types/predicates.go?s=1744:1772#L71&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="dccebc1bfe3f8493fb90947ea0cf1c474ed0a2d2" translate="yes" xml:space="preserve">
          <source>func Compare(a, b []byte) int</source>
          <target state="translated">func Compare(a,b []byte)int</target>
        </trans-unit>
        <trans-unit id="fe4e06cc7bdccec04e25dedcf7a8e818ec519858" translate="yes" xml:space="preserve">
          <source>func Compare(a, b string) int</source>
          <target state="translated">func Compare(a,b string)int</target>
        </trans-unit>
        <trans-unit id="141e1bd52843af7c3e562dc2f7fb7395ae197bdd" translate="yes" xml:space="preserve">
          <source>func Compare(x_ Value, op token.Token, y_ Value) bool</source>
          <target state="translated">func Compare(x_Value,op token.Token,y_Value)bool</target>
        </trans-unit>
        <trans-unit id="d0885e5a63b2b4986270437873bb32128d14f643" translate="yes" xml:space="preserve">
          <source>func Compare&lt;a href=&quot;https://golang.org/src/bytes/bytes.go?s=833:862#L16&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func &lt;a href=&quot;https://golang.org/src/bytes/bytes.go?s=833:862#L16&quot;&gt;ソースの&lt;/a&gt;比較</target>
        </trans-unit>
        <trans-unit id="fc06f7eb59d1316ac94d9c09cb62b79ad4bfc9d7" translate="yes" xml:space="preserve">
          <source>func Compare&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=31562:31615#L1300&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func Compare &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=31562:31615#L1300&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="422743732720fb34d5a5781b8f74f9d5a8077024" translate="yes" xml:space="preserve">
          <source>func Compare&lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=32329:32382#L1331&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func Compare &lt;a href=&quot;https://golang.org/src/go/constant/value.go?s=32329:32382#L1331&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="70f428ebba00e5201b3a4daf2caf8013fd472b9c" translate="yes" xml:space="preserve">
          <source>func Compare&lt;a href=&quot;https://golang.org/src/strings/compare.go?s=490:519#L3&quot;&gt;Source&lt;/a&gt;1.5</source>
          <target state="translated">func Compare &lt;a href=&quot;https://golang.org/src/strings/compare.go?s=490:519#L3&quot;&gt;Source&lt;/a&gt; 1.5</target>
        </trans-unit>
        <trans-unit id="12a1b8ac246c1a1fad10a6bab3eb44d4e45ed37b" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)</source>
          <target state="translated">func CompareAndSwapInt32(addr *int32,old,new int32)(swapped bool)</target>
        </trans-unit>
        <trans-unit id="e9efc20ca50f2200995ac0eeee8d121bd1e379e5" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapInt32&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=2620:2688#L65&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompareAndSwapInt32 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=2620:2688#L65&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2fe7df7788314e4446883ef5a96e88d5582d2f6d" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)</source>
          <target state="translated">func CompareAndSwapInt64(addr *int64,old,new int64)(swapped bool)</target>
        </trans-unit>
        <trans-unit id="2d588f374505de54da84d13d3e0b1be414ffc0f0" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapInt64&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=2773:2841#L68&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompareAndSwapInt64 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=2773:2841#L68&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4f6ca96f42c291b995dd1fef12739b4285fe7934" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)</source>
          <target state="translated">func CompareAndSwapPointer(addr *unsafe.Pointer,old,new unsafe.Pointer)(swapped bool)</target>
        </trans-unit>
        <trans-unit id="4c82630cb70052b5594ae5dd0b4d01f60b05a76d" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapPointer&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3412:3500#L80&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompareAndSwapPointer &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3412:3500#L80&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a258897e86bff215192486ab3fa2921208818eb" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)</source>
          <target state="translated">func CompareAndSwapUint32(addr *uint32,old,new uint32)(swapped bool)</target>
        </trans-unit>
        <trans-unit id="8d09089a51ff764792acdc7039a213ed72913756" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapUint32&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=2927:2998#L71&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompareAndSwapUint32 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=2927:2998#L71&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1cc6c61aceafc30cadfb0ead2fd5877dae1839b6" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)</source>
          <target state="translated">func CompareAndSwapUint64(addr *uint64,old,new uint64)(swapped bool)</target>
        </trans-unit>
        <trans-unit id="1bafb828800e10920c1a91d94c5b446c4d4e54a4" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapUint64&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3084:3155#L74&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompareAndSwapUint64 &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3084:3155#L74&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a6a03900df980f99b3a6793843f8a0ab9ad956bd" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)</source>
          <target state="translated">func CompareAndSwapUintptr(addr *uintptr,old,new uintptr)(swapped bool)</target>
        </trans-unit>
        <trans-unit id="75c69f8204d9d36fd4db9f392933b2d92e2ef99b" translate="yes" xml:space="preserve">
          <source>func CompareAndSwapUintptr&lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3243:3317#L77&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompareAndSwapUintptr &lt;a href=&quot;https://golang.org/src/sync/atomic/doc.go?s=3243:3317#L77&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d2f49a2fbd3830a068a56db85c5cffb10ce42f5a" translate="yes" xml:space="preserve">
          <source>func Compile(expr string) (*Regexp, error)</source>
          <target state="translated">func Compile(expr string)(*Regexp,error)</target>
        </trans-unit>
        <trans-unit id="2b364ed25f216180200241ed8e305f7adbe61523" translate="yes" xml:space="preserve">
          <source>func Compile(re *Regexp) (*Prog, error)</source>
          <target state="translated">func Compile(re *Regexp)(*Prog,error)</target>
        </trans-unit>
        <trans-unit id="ba448b1aa38e40000ed575c4dbf86ca352b46afb" translate="yes" xml:space="preserve">
          <source>func Compile&lt;a href=&quot;https://golang.org/src/regexp/regexp.go?s=5651:5693#L122&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcコンパイル&lt;a href=&quot;https://golang.org/src/regexp/regexp.go?s=5651:5693#L122&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="47b61263d77b11f981bb3bc007855b1940fbd6c3" translate="yes" xml:space="preserve">
          <source>func Compile&lt;a href=&quot;https://golang.org/src/regexp/syntax/compile.go?s=1784:1823#L60&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcコンパイル&lt;a href=&quot;https://golang.org/src/regexp/syntax/compile.go?s=1784:1823#L60&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ad2eec855e0a8ebf7df0fd4ddc6722f6240029d" translate="yes" xml:space="preserve">
          <source>func Compile&lt;a href=&quot;https://golang.org/src/regexp/syntax/compile.go?s=1853:1892#L70&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">funcコンパイル&lt;a href=&quot;https://golang.org/src/regexp/syntax/compile.go?s=1853:1892#L70&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="05cfb89bdaa2c3dbf88b45f0f53de03bddf2403f" translate="yes" xml:space="preserve">
          <source>func CompilePOSIX(expr string) (*Regexp, error)</source>
          <target state="translated">func CompilePOSIX(expr string)(*Regexp,error)</target>
        </trans-unit>
        <trans-unit id="a6cde9481dd1113a81f843d0898290cf60c55202" translate="yes" xml:space="preserve">
          <source>func CompilePOSIX&lt;a href=&quot;https://golang.org/src/regexp/regexp.go?s=6813:6860#L145&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func CompilePOSIX &lt;a href=&quot;https://golang.org/src/regexp/regexp.go?s=6813:6860#L145&quot;&gt;ソース&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59d43d21420daf08e2c6664e7c32d2dd49f9b5e3" translate="yes" xml:space="preserve">
          <source>func Conj(x complex128) complex128</source>
          <target state="translated">func Conj(x complex128)complex128</target>
        </trans-unit>
        <trans-unit id="eb9e26b383cf1b01a0e81f1353f0e07623031c88" translate="yes" xml:space="preserve">
          <source>func Conj&lt;a href=&quot;https://golang.org/src/math/cmplx/conj.go?s=219:253#L1&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Conj &lt;a href=&quot;https://golang.org/src/math/cmplx/conj.go?s=219:253#L1&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bd73fc5c384fde89622aa2551c11c5d9cad228c7" translate="yes" xml:space="preserve">
          <source>func Connect(fd int, sa Sockaddr) (err error)</source>
          <target state="translated">func Connect(fd int,sa Sockaddr)(err error)</target>
        </trans-unit>
        <trans-unit id="c762ef119d97ee28a8507ec9651cf239622153b1" translate="yes" xml:space="preserve">
          <source>func Connect&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5195:5240#L236&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Connect &lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5195:5240#L236&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8525f7a7d77102d16c097d60d2bc9310ec6df369" translate="yes" xml:space="preserve">
          <source>func Connect&lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5546:5591#L247&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func Connect &lt;a href=&quot;https://golang.org/src/syscall/syscall_unix.go?s=5546:5591#L247&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef3e21b849257f7b355739490ea16cc6b67ed840" translate="yes" xml:space="preserve">
          <source>func ConstantTimeByteEq(x, y uint8) int</source>
          <target state="translated">func ConstantTimeByteEq(x,y uint8)int</target>
        </trans-unit>
        <trans-unit id="441e45754d846797e6884282337cb1fc92df107b" translate="yes" xml:space="preserve">
          <source>func ConstantTimeByteEq&lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=937:976#L21&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ConstantTimeByteEq &lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=937:976#L21&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1baf1aaceb42db9b4d393d5b7cc7458ae000c2d" translate="yes" xml:space="preserve">
          <source>func ConstantTimeCompare(x, y []byte) int</source>
          <target state="translated">func ConstantTimeCompare(x,y []バイト)int</target>
        </trans-unit>
        <trans-unit id="e7c6e52d2673003e3717f115c693e306a07183c1" translate="yes" xml:space="preserve">
          <source>func ConstantTimeCompare&lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=505:546#L2&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ConstantTimeCompare &lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=505:546#L2&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7f8535aaca3a070ba6fb1079a91019faa0b7a5dc" translate="yes" xml:space="preserve">
          <source>func ConstantTimeCopy(v int, x, y []byte)</source>
          <target state="translated">ファンク ConstantTimeCopy(v int,x,y []byte)</target>
        </trans-unit>
        <trans-unit id="eca87a7977911fb2f371d8cb4bc0ddf87fa4871e" translate="yes" xml:space="preserve">
          <source>func ConstantTimeCopy&lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=1341:1382#L33&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ConstantTimeCopy &lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=1341:1382#L33&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9c13c237ded08b3db4f420ee001b759589623bae" translate="yes" xml:space="preserve">
          <source>func ConstantTimeEq(x, y int32) int</source>
          <target state="translated">func ConstantTimeEq(x,y int32)int</target>
        </trans-unit>
        <trans-unit id="bfb11b83d131c2c6e4dbb7247a8eca658f20d22c" translate="yes" xml:space="preserve">
          <source>func ConstantTimeEq&lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=1074:1109#L26&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ConstantTimeEq &lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=1074:1109#L26&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db5d2baee68b885edfc0a6330486133f23662222" translate="yes" xml:space="preserve">
          <source>func ConstantTimeLessOrEq(x, y int) int</source>
          <target state="translated">ファンク ConstantTimeLessOrEq(x,y int)int</target>
        </trans-unit>
        <trans-unit id="a3f66afd5a7fcdbcd52762c1c8e3172a426a79a6" translate="yes" xml:space="preserve">
          <source>func ConstantTimeLessOrEq&lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=1707:1746#L47&quot;&gt;Source&lt;/a&gt;1.2</source>
          <target state="translated">func ConstantTimeLessOrEq &lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=1707:1746#L47&quot;&gt;Source&lt;/a&gt; 1.2</target>
        </trans-unit>
        <trans-unit id="ba83e313757a60fef5a687fb99ee6d68927eebf7" translate="yes" xml:space="preserve">
          <source>func ConstantTimeSelect(v, x, y int) int</source>
          <target state="translated">func ConstantTimeSelect(v,x,y int)int</target>
        </trans-unit>
        <trans-unit id="e7d9e672d99a2afdc3345f6a0778b1796128138e" translate="yes" xml:space="preserve">
          <source>func ConstantTimeSelect&lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=806:846#L18&quot;&gt;Source&lt;/a&gt;</source>
          <target state="translated">func ConstantTimeSelect &lt;a href=&quot;https://golang.org/src/crypto/subtle/constant_time.go?s=806:846#L18&quot;&gt;Source&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="942ef65e1608f1801d47a0f8dc0d178bf369edeb" translate="yes" xml:space="preserve">
          <source>func Contains(b, subslice []byte) bool</source>
          <target state="translated">func Contains(b,subslice []byte)bool</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
