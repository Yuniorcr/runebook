<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="b05ffc1d15462ca6f99d23dad5504fcb24e01652" translate="yes" xml:space="preserve">
          <source>Filenames containing a certificate and matching private key for the server must be provided if neither the Server's TLSConfig.Certificates nor TLSConfig.GetCertificate are populated. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate.</source>
          <target state="translated">サーバの TLSConfig.Certificates または TLSConfig.GetCertificate が指定されていない場合、サーバの証明書と一致する秘密鍵を含むファイル名を指定する必要があります。証明書が証明機関によって署名されている場合、certFile は、サーバの証明書、仲介者、および CA の証明書を連結したものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="73595851a6091a7492042c8776979e91c6d3c91f" translate="yes" xml:space="preserve">
          <source>Files checks the provided files as part of the checker's package.</source>
          <target state="translated">Files は、チェッカーのパッケージの一部として提供されたファイルをチェックします。</target>
        </trans-unit>
        <trans-unit id="f2677f06472fc0feb492ada82a2c4649c4e1df36" translate="yes" xml:space="preserve">
          <source>Files containing a certificate and matching private key for the server must be provided if neither the Server's TLSConfig.Certificates nor TLSConfig.GetCertificate are populated. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate.</source>
          <target state="translated">サーバの TLSConfig.Certificates または TLSConfig.GetCertificate が指定されていない場合は、サーバの証明書と一致する秘密鍵を含むファイルを提供する必要があります。証明書が証明機関によって署名されている場合、certFile は、サーバの証明書、仲介者、および CA の証明書を連結したものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="5e509fe0addedea68b64c5b0175672be70d59e89" translate="yes" xml:space="preserve">
          <source>Files returns the file name table of this compilation unit as of the current position in the line table. The file name table may be referenced from attributes in this compilation unit such as AttrDeclFile.</source>
          <target state="translated">Files は、ラインテーブルの現在位置におけるこのコンパイルユニットのファイル名テーブルを返します。ファイル名テーブルは、AttrDeclFileのようなこのコンパイルユニットの属性から参照されることがあります。</target>
        </trans-unit>
        <trans-unit id="32b9b62ab260f2308e9b093a7911d09a04032958" translate="yes" xml:space="preserve">
          <source>FillBytes sets buf to the absolute value of x, storing it as a zero-extended big-endian byte slice, and returns buf.</source>
          <target state="translated">FillBytes は buf を x の絶対値に設定し、それをゼロ拡張ビッグエンディアンバイトスライスとして格納し、buf を返します。</target>
        </trans-unit>
        <trans-unit id="916600c69a73c67f62481a2e3b48aac8b70b5d49" translate="yes" xml:space="preserve">
          <source>FillFromRDNSequence populates n from the provided RDNSequence. Multi-entry RDNs are flattened, all entries are added to the relevant n fields, and the grouping is not preserved.</source>
          <target state="translated">FillFromRDNSequence は、提供された RDNSequence から n を入力します。複数エントリの RDN は平坦化され、すべてのエントリが関連する n フィールドに追加され、グループ化は保存されません。</target>
        </trans-unit>
        <trans-unit id="9c30ef34cd44738f2300a9d1c8d2644305bfe659" translate="yes" xml:space="preserve">
          <source>Filter eliminates documentation for names that don't pass through the filter f. TODO(gri): Recognize &quot;Type.Method&quot; as a name.</source>
          <target state="translated">フィルタを通過しない名前のドキュメントを削除する f.TODO(gri)&quot;Type.Method &quot;を名前として認識する。</target>
        </trans-unit>
        <trans-unit id="8fe9542ddb9636eaf7f6d18a2a5c93cd3e032943" translate="yes" xml:space="preserve">
          <source>Filter returns a new comment map consisting of only those entries of cmap for which a corresponding node exists in the AST specified by node.</source>
          <target state="translated">Filterは,nodeで指定されたASTに対応するノードが存在するcmapのエントリのみからなる新しいコメントマップを返します.</target>
        </trans-unit>
        <trans-unit id="99334f5ff24d09e0e43146c7ab17eed8e9e83ed8" translate="yes" xml:space="preserve">
          <source>FilterDecl reports whether there are any declared names left after filtering.</source>
          <target state="translated">FilterDecl は、フィルタリング後に宣言された名前が残っているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="a98ad9f1ce33b85f6650faa2d18060284cd00443" translate="yes" xml:space="preserve">
          <source>FilterDecl trims the AST for a Go declaration in place by removing all names (including struct field and interface method names, but not from parameter lists) that don't pass through the filter f.</source>
          <target state="translated">FilterDeclは、フィルタfを通過しないすべての名前(構造体フィールド名やインターフェースメソッド名を含むが、パラメータリストには含まれない)を削除することで、囲碁宣言のASTを所定の位置にトリミングします。</target>
        </trans-unit>
        <trans-unit id="c1ed367ffc6ba55dd5b60bff81664a2c439a8484" translate="yes" xml:space="preserve">
          <source>FilterFile reports whether there are any top-level declarations left after filtering.</source>
          <target state="translated">FilterFile は、フィルタリング後にトップレベル宣言が残っているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="7a9fa766ec80d5d59f245ed962a927a61c070075" translate="yes" xml:space="preserve">
          <source>FilterFile trims the AST for a Go file in place by removing all names from top-level declarations (including struct field and interface method names, but not from parameter lists) that don't pass through the filter f. If the declaration is empty afterwards, the declaration is removed from the AST. Import declarations are always removed. The File.Comments list is not changed.</source>
          <target state="translated">FilterFileは、フィルタfを通過しないトップレベルの宣言(構造体フィールド名とインタフェースメソッド名を含むが、パラメータリストには含まれない)から、フィルタfを通過しないすべての名前を削除することで、GoファイルのASTを所定の位置にトリミングします。インポート宣言は常に削除されます。File.Commentsリストは変更されません。</target>
        </trans-unit>
        <trans-unit id="616d0d4a74fcef85e72d4edac004eabd14b32293" translate="yes" xml:space="preserve">
          <source>FilterPackage reports whether there are any top-level declarations left after filtering.</source>
          <target state="translated">FilterPackageは、フィルタリング後にトップレベル宣言が残っているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="cc812cc8b170b6479d3dcdf5fdfae2947c9e732a" translate="yes" xml:space="preserve">
          <source>FilterPackage trims the AST for a Go package in place by removing all names from top-level declarations (including struct field and interface method names, but not from parameter lists) that don't pass through the filter f. If the declaration is empty afterwards, the declaration is removed from the AST. The pkg.Files list is not changed, so that file names and top-level package comments don't get lost.</source>
          <target state="translated">FilterPackageは、フィルタfを通過しないトップレベルの宣言(構造体フィールド名やインターフェースメソッド名を含むが、パラメータリストからは除外)から、フィルタfを通過しないすべての名前を削除することで、GoパッケージのASTをその場でトリミングします。pkg.Filesリストは変更されないので、ファイル名やトップレベルのパッケージコメントが失われることはありません。</target>
        </trans-unit>
        <trans-unit id="64167db3c8ee867d45eebbc9c53b064e2bb836d4" translate="yes" xml:space="preserve">
          <source>Finalizers are run in dependency order: if A points at B, both have finalizers, and they are otherwise unreachable, only the finalizer for A runs; once A is freed, the finalizer for B can run. If a cyclic structure includes a block with a finalizer, that cycle is not guaranteed to be garbage collected and the finalizer is not guaranteed to run, because there is no ordering that respects the dependencies.</source>
          <target state="translated">ファイナライザは依存関係順に実行されます。AがBを指していて、両方にファイナライザがあり、それ以外の場合は到達できない場合、A用のファイナライザのみが実行されます。Aが解放されると、B用のファイナライザが実行され、Aが解放されると、B用のファイナライザが実行されます。</target>
        </trans-unit>
        <trans-unit id="04c286b7e901d165a790bb4d85625ee624e6c5de" translate="yes" xml:space="preserve">
          <source>Finally, *Int, *Rat, and *Float satisfy the fmt package's Scanner interface for scanning and (except for *Rat) the Formatter interface for formatted printing.</source>
          <target state="translated">最後に、*Int,*Rat,*Floatは、スキャンのためのfmtパッケージのスキャナインタフェースと、(*Ratを除いて)フォーマットされた印刷のためのフォーマッタインタフェースを満たしています。</target>
        </trans-unit>
        <trans-unit id="26ec87dd2b9f83faa210cf241d5b474c8a62da6b" translate="yes" xml:space="preserve">
          <source>Finally, any occurrences of slash are replaced by Separator.</source>
          <target state="translated">最後に、スラッシュの出現はすべて Separator で置き換えられます。</target>
        </trans-unit>
        <trans-unit id="2e283acb4f254ad8296a8a754d3d7b44acc43a52" translate="yes" xml:space="preserve">
          <source>Finally, each message created by a call to Encode is preceded by an encoded unsigned integer count of the number of bytes remaining in the message. After the initial type name, interface values are wrapped the same way; in effect, the interface value acts like a recursive invocation of Encode.</source>
          <target state="translated">最後に、Encode の呼び出しによって作成された各メッセージの前には、メッセージ内の残りバイト数の符号化された符号なし整数のカウントが付けられます。最初の型名の後に、インターフェース値も同じようにラップされています。</target>
        </trans-unit>
        <trans-unit id="26fb85ce34e42f69c76353a6f2b051f404c7f2c9" translate="yes" xml:space="preserve">
          <source>Find returns a slice holding the text of the leftmost match in b of the regular expression. A return value of nil indicates no match.</source>
          <target state="translated">Findは、正規表現のbで左端にマッチしたテキストを保持するスライスを返します。戻り値がnilの場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="3939b43a8656fedf8c713b119be8032947dc3ecd" translate="yes" xml:space="preserve">
          <source>FindAll is the 'All' version of Find; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAll は Find の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、連続してマッチした式のスライスを返します。返り値が nil の場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="36cb8b2ff6a76516bc1c892450ee61ae3139b098" translate="yes" xml:space="preserve">
          <source>FindAllIndex is the 'All' version of FindIndex; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllIndex は FindIndex の 'All' バージョンで、パッケージのコメントにある 'All' の説明で定義されているように、式の連続するすべてのマッチのスライスを返します。nil の戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="f5f37301641ba46ce0b020d50232dcdae9f0dad0" translate="yes" xml:space="preserve">
          <source>FindAllIndex returns a sorted list of non-overlapping matches of the regular expression r, where a match is a pair of indices specifying the matched slice of x.Bytes(). If n &amp;lt; 0, all matches are returned in successive order. Otherwise, at most n matches are returned and they may not be successive. The result is nil if there are no matches, or if n == 0.</source>
          <target state="translated">FindAllIndexは、正規表現rの重複しない一致のソートされたリストを返します。一致は、x.Bytes（）の一致したスライスを指定するインデックスのペアです。 n &amp;lt;0の場合、すべての一致が連続した順序で返されます。それ以外の場合、最大でn個の一致が返され、それらは連続しない場合があります。一致がない場合、またはn == 0の場合、結果はnilです。</target>
        </trans-unit>
        <trans-unit id="9de88adfecc3f20e0c2ffdbb0f036f7a79d80f3b" translate="yes" xml:space="preserve">
          <source>FindAllString is the 'All' version of FindString; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllString は FindString の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、式の連続するすべてのマッチをスライスして返します。返り値が nil の場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="50f5df0a72b99ef5ef4ba48205043bd703872dd1" translate="yes" xml:space="preserve">
          <source>FindAllStringIndex is the 'All' version of FindStringIndex; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllStringIndex は FindStringIndex の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、式の連続するすべてのマッチのスライスを返します。nil の戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="fd030004e8ba710e67858c9136cb59800b720d8e" translate="yes" xml:space="preserve">
          <source>FindAllStringSubmatch is the 'All' version of FindStringSubmatch; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllStringSubmatch は FindStringSubmatch の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、式の連続するすべてのマッチのスライスを返します。返り値が nil の場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="866672036e7565c5590c34ec3cdc6d2f77a921c5" translate="yes" xml:space="preserve">
          <source>FindAllStringSubmatchIndex is the 'All' version of FindStringSubmatchIndex; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllStringSubmatchIndex は、FindStringSubmatchIndex の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、式の連続するすべてのマッチのスライスを返します。返り値が nil の場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="3be6622b78b7a355447dee918503ed5111144cd3" translate="yes" xml:space="preserve">
          <source>FindAllSubmatch is the 'All' version of FindSubmatch; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllSubmatch は FindSubmatch の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、 式の連続するすべてのマッチのスライスを返します。返り値が nil の場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="c52ee6c792ee96296da432c07ce6bac841f99f98" translate="yes" xml:space="preserve">
          <source>FindAllSubmatchIndex is the 'All' version of FindSubmatchIndex; it returns a slice of all successive matches of the expression, as defined by the 'All' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindAllSubmatchIndex は FindSubmatchIndex の 'All' バージョンです。パッケージのコメントにある 'All' の説明で定義されているように、式の連続するすべてのマッチのスライスを返します。nil の戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="42e5b0dfb84ada5e535dcd7bb2807e917d046ce8" translate="yes" xml:space="preserve">
          <source>FindIndex returns a two-element slice of integers defining the location of the leftmost match in b of the regular expression. The match itself is at b[loc[0]:loc[1]]. A return value of nil indicates no match.</source>
          <target state="translated">FindIndexは、正規表現のbにおける左端のマッチの位置を定義する2要素の整数スライスを返します。一致する位置は b[loc[0]:loc[1]]です。戻り値がnilの場合は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="5e8a7de41165a099a274921bab815b24b2852407" translate="yes" xml:space="preserve">
          <source>FindProcess looks for a running process by its pid.</source>
          <target state="translated">FindProcess は、実行中のプロセスを pid で検索します。</target>
        </trans-unit>
        <trans-unit id="4911a1ccdd694282d198f0794f5539db98ac7df1" translate="yes" xml:space="preserve">
          <source>FindReaderIndex returns a two-element slice of integers defining the location of the leftmost match of the regular expression in text read from the RuneReader. The match text was found in the input stream at byte offset loc[0] through loc[1]-1. A return value of nil indicates no match.</source>
          <target state="translated">FindReaderIndex は、RuneReader から読み込んだテキストの正規表現の左端に一致する位置を定義する 2 要素の整数スライスを返します。一致するテキストは、バイト オフセット loc[0]から loc[1]-1 までの入力ストリームで見つかりました。戻り値が nil の場合、一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="1d35aea7e01a3055400cfb5abc273aa2a48d9a9f" translate="yes" xml:space="preserve">
          <source>FindReaderSubmatchIndex returns a slice holding the index pairs identifying the leftmost match of the regular expression of text read by the RuneReader, and the matches, if any, of its subexpressions, as defined by the 'Submatch' and 'Index' descriptions in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindReaderSubmatchIndex は、RuneReader で読み込んだテキストの正規表現の左端に一致するものと、パッケージのコメントにある「サブマッチ」と「インデックス」の説明で定義されているサブ表現に一致するものがある場合は、そのサブ表現を識別するインデックスのペアを保持するスライスを返します。nil の戻り値は、一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="e9a327cf77fbaf9bbe1a604d4bcf583f4d07fb1a" translate="yes" xml:space="preserve">
          <source>FindString returns a string holding the text of the leftmost match in s of the regular expression. If there is no match, the return value is an empty string, but it will also be empty if the regular expression successfully matches an empty string. Use FindStringIndex or FindStringSubmatch if it is necessary to distinguish these cases.</source>
          <target state="translated">FindStringは、正規表現のsで左端にマッチしたテキストを保持する文字列を返します。一致するものがない場合、戻り値は空の文字列ですが、正規表現が空の文字列と正常に一致した場合も空になります。これらのケースを区別する必要がある場合は、FindStringIndex または FindStringSubmatch を使用します。</target>
        </trans-unit>
        <trans-unit id="531bff01dd38db5d072dffaff07b7a369f4e48aa" translate="yes" xml:space="preserve">
          <source>FindStringIndex returns a two-element slice of integers defining the location of the leftmost match in s of the regular expression. The match itself is at s[loc[0]:loc[1]]. A return value of nil indicates no match.</source>
          <target state="translated">FindStringIndexは、正規表現のsにおける左端のマッチの位置を定義する2要素の整数スライスを返します。一致した場所自体は s[loc[0]:loc[1]]にあります。戻り値が nil の場合は、一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="a789ded76b89d56fcfc993f95abd7a8461164bf2" translate="yes" xml:space="preserve">
          <source>FindStringSubmatch returns a slice of strings holding the text of the leftmost match of the regular expression in s and the matches, if any, of its subexpressions, as defined by the 'Submatch' description in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindStringSubmatch は、パッケージのコメントにある 'Submatch' の説明で定義されているように、 s の正規表現の左端にマッチしたテキストと、その副表現にマッチしたものがあればそのテキストを保持する文字列のスライスを返します。nil の戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="716a3ff38a9d712fef426438e6f03f83ab81e7b5" translate="yes" xml:space="preserve">
          <source>FindStringSubmatchIndex returns a slice holding the index pairs identifying the leftmost match of the regular expression in s and the matches, if any, of its subexpressions, as defined by the 'Submatch' and 'Index' descriptions in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindStringSubmatchIndex は、パッケージのコメントにある 'Submatch' および 'Index' の説明で定義されているように、 s の正規表現の左端にマッチしている正規表現と、その副表現にマッチするものがあればそれを示すインデックスペアを保持するスライスを返します。nilの戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="ffa69da36fb7ee45dba39b18243a0f710f826bb2" translate="yes" xml:space="preserve">
          <source>FindSubmatch returns a slice of slices holding the text of the leftmost match of the regular expression in b and the matches, if any, of its subexpressions, as defined by the 'Submatch' descriptions in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindSubmatchは、パッケージのコメントにある'Submatch'の説明で定義されているように、bの正規表現の左端にマッチしたテキストと、その副表現にマッチしたものがある場合はそのテキストを保持するスライスを返します。nilの戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="7965df00e3cbe474d92d31bb0bd5221f067573f7" translate="yes" xml:space="preserve">
          <source>FindSubmatchIndex returns a slice holding the index pairs identifying the leftmost match of the regular expression in b and the matches, if any, of its subexpressions, as defined by the 'Submatch' and 'Index' descriptions in the package comment. A return value of nil indicates no match.</source>
          <target state="translated">FindSubmatchIndex は、パッケージコメントの 'Submatch' および 'Index' の説明で定義されているように、b の正規表現の左端にマッチしている正規表現と、その副表現にマッチしているものがあればそれを示すインデックスペアを保持するスライスを返します。nilの戻り値は一致しないことを示します。</target>
        </trans-unit>
        <trans-unit id="156ee4c1a5140190bfb3141b9e1f8498489f2c44" translate="yes" xml:space="preserve">
          <source>First, if an os.Lstat on the root directory or any directory or file in the tree fails, Walk calls the function with path set to that directory or file's path, info set to nil, and err set to the error from os.Lstat.</source>
          <target state="translated">まず、ルートディレクトリやツリー内のディレクトリやファイルに対するos.Lstatが失敗した場合、Walkはpathにそのディレクトリやファイルのパスを、infoにnilを、errにos.Lstatのエラーをセットしてこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6469fd45880f3c8255beb2244dc0bd626a3c8ad4" translate="yes" xml:space="preserve">
          <source>First, if the initial fs.Stat on the root directory fails, WalkDir calls the function with path set to root, d set to nil, and err set to the error from fs.Stat.</source>
          <target state="translated">まず、ルートディレクトリの最初の fs.Stat が失敗した場合、WalkDir は path に root、d に nil、err に fs.Stat のエラーを設定して、この関数を呼び出す。</target>
        </trans-unit>
        <trans-unit id="316c8fcfd0429ed17b8857dd6ccdd403f5640491" translate="yes" xml:space="preserve">
          <source>Fix re-establishes the heap ordering after the element at index i has changed its value. Changing the value of the element at index i and then calling Fix is equivalent to, but less expensive than, calling Remove(h, i) followed by a Push of the new value. The complexity is O(log n) where n = h.Len().</source>
          <target state="translated">Fix は、インデックス i の要素の値が変更された後にヒープの順序を再確立します。インデックス i の要素の値を変更してから Fix を呼び出すことは、Remove(h,i)を呼び出した後に新しい値を Push するのと同じですが、それよりもコストがかかりません。複雑さはO(log n)で、n=h.Len()です。</target>
        </trans-unit>
        <trans-unit id="3d7cfcda1db5ca5e3bcb0a9677bf0dd4d80ac6e4" translate="yes" xml:space="preserve">
          <source>FixedZone</source>
          <target state="translated">FixedZone</target>
        </trans-unit>
        <trans-unit id="d8dd9f2c3ea7d8b26856edf904ee0771c7d5fc47" translate="yes" xml:space="preserve">
          <source>FixedZone returns a Location that always uses the given zone name and offset (seconds east of UTC).</source>
          <target state="translated">FixedZoneは、指定されたゾーン名とオフセット(UTCの東の秒数)を常に使用する位置を返します。</target>
        </trans-unit>
        <trans-unit id="08425e752eb21d741faf32b7c85e71d44fa0561c" translate="yes" xml:space="preserve">
          <source>Flag names must be unique within a FlagSet. An attempt to define a flag whose name is already in use will cause a panic.</source>
          <target state="translated">フラグ名はフラグセット内で一意でなければなりません。名前が既に使用されているフラグを定義しようとすると、パニックが発生します。</target>
        </trans-unit>
        <trans-unit id="2c7a643e1bb2320ed4f231588740bf7ac2e291cd" translate="yes" xml:space="preserve">
          <source>Flag parsing stops just before the first non-flag argument (&quot;-&quot; is a non-flag argument) or after the terminator &quot;--&quot;.</source>
          <target state="translated">フラグの解析は、最初の非フラグ引数(&quot;-&quot;は非フラグ引数)の直前か、ターミネーター&quot;--&quot;の後で停止します。</target>
        </trans-unit>
        <trans-unit id="6fdd311ef8e9ef566cf48b8fece102302ba2cc48" translate="yes" xml:space="preserve">
          <source>Flags are ignored by verbs that do not expect them. For example there is no alternate decimal format, so %#d and %d behave identically.</source>
          <target state="translated">フラグは、それを期待しない動詞では無視されます。例えば、代替の 10 進数形式は存在しないので、%#d と %d は同じように動作します。</target>
        </trans-unit>
        <trans-unit id="af3386ff8f43c1696f153b0da6ee0a837cb1976a" translate="yes" xml:space="preserve">
          <source>Flags control the behavior of the parser and record information about regexp context.</source>
          <target state="translated">フラグはパーサの動作を制御し、正規表現のコンテキストに関する情報を記録します。</target>
        </trans-unit>
        <trans-unit id="16c488a94448ea7f6f8bcea47a1cbbb9b2216fc9" translate="yes" xml:space="preserve">
          <source>Flags may then be used directly. If you're using the flags themselves, they are all pointers; if you bind to variables, they're values.</source>
          <target state="translated">フラグを直接使用することができます。フラグ自体を使用する場合はすべてポインタで、変数にバインドする場合は値となります。</target>
        </trans-unit>
        <trans-unit id="8b5f3f5f47f0c72df0bc10a5003e3c8534841d99" translate="yes" xml:space="preserve">
          <source>Flags returns the output flags for the logger.</source>
          <target state="translated">Flags は、ロガーの出力フラグを返します。</target>
        </trans-unit>
        <trans-unit id="f6c4e9587ed10cf97056188e5fee0abe91201a63" translate="yes" xml:space="preserve">
          <source>Flags returns the output flags for the logger. The flag bits are Ldate, Ltime, and so on.</source>
          <target state="translated">Flags は、ロガーの出力フラグを返します。フラグビットはLdate、Ltimeなどです。</target>
        </trans-unit>
        <trans-unit id="ab784ad102a2c124d297f0684145d0588e53e2ce" translate="yes" xml:space="preserve">
          <source>Flags returns the output flags for the standard logger.</source>
          <target state="translated">Flags は、標準ロガーの出力フラグを返します。</target>
        </trans-unit>
        <trans-unit id="2fc6ca1c2bb40c98076e96a0885f4d91179665d9" translate="yes" xml:space="preserve">
          <source>Flags returns the output flags for the standard logger. The flag bits are Ldate, Ltime, and so on.</source>
          <target state="translated">Flags は、標準ロガーの出力フラグを返します。フラグビットはLdate、Ltimeなどです。</target>
        </trans-unit>
        <trans-unit id="49886552d225c91289351966a030fb2ce1479645" translate="yes" xml:space="preserve">
          <source>Flags to OpenFile wrapping those of the underlying system. Not all flags may be implemented on a given system.</source>
          <target state="translated">基底システムのフラグをラッピングした OpenFile のフラグ。すべてのフラグがシステム上で実装されているわけではありません。</target>
        </trans-unit>
        <trans-unit id="e4dce7c8ab9c22a7b9475e937cb3027b98a99140" translate="yes" xml:space="preserve">
          <source>Float (Shift)</source>
          <target state="translated">フロート(シフト</target>
        </trans-unit>
        <trans-unit id="44e98719e5ce5b2d4401b4abb5dc0f8819be8a88" translate="yes" xml:space="preserve">
          <source>Float is a 64-bit float variable that satisfies the Var interface.</source>
          <target state="translated">Float は、Var インターフェースを満たす 64 ビットの float 変数です。</target>
        </trans-unit>
        <trans-unit id="10efe1f5142078fa491d28fd6eb4b8558bc300d7" translate="yes" xml:space="preserve">
          <source>Float returns the value v as a float64. It panics if v is not a JavaScript number.</source>
          <target state="translated">Float は、値 v を float64 として返します。v が JavaScript の数値でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="8ce5b8413e70edd589cd645e2e4c3403f1aae941" translate="yes" xml:space="preserve">
          <source>Float returns v's underlying value, as a float64. It panics if v's Kind is not Float32 or Float64</source>
          <target state="translated">Float は、v の基本的な値を float64 で返します。v のカインドが Float32 または Float64 でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="eeec2beb5f657aee9f544ee180ec6e738a4d2d1a" translate="yes" xml:space="preserve">
          <source>Float.Add</source>
          <target state="translated">Float.Add</target>
        </trans-unit>
        <trans-unit id="ad02b5997c5669d53745f3d1c236de0ca407890e" translate="yes" xml:space="preserve">
          <source>Float.Cmp</source>
          <target state="translated">Float.Cmp</target>
        </trans-unit>
        <trans-unit id="fec48acd5df26f0383b2951f8c9e9ae9c4ff8998" translate="yes" xml:space="preserve">
          <source>Float.Scan</source>
          <target state="translated">Float.Scan</target>
        </trans-unit>
        <trans-unit id="27a60da3c6927b3e7808077db5c420b80b923197" translate="yes" xml:space="preserve">
          <source>Float.SetString</source>
          <target state="translated">Float.SetString</target>
        </trans-unit>
        <trans-unit id="b29933c6b53142cadd8d7b922f23fae52793b020" translate="yes" xml:space="preserve">
          <source>Float32 returns the float32 value nearest to x. If x is too small to be represented by a float32 (|x| &amp;lt; math.SmallestNonzeroFloat32), the result is (0, Below) or (-0, Above), respectively, depending on the sign of x. If x is too large to be represented by a float32 (|x| &amp;gt; math.MaxFloat32), the result is (+Inf, Above) or (-Inf, Below), depending on the sign of x.</source>
          <target state="translated">Float32は、xに最も近いfloat32値を返します。xが小さすぎてfloat32（| x | &amp;lt;math.SmallestNonzeroFloat32）で表すことができない場合、結果はそれぞれxの符号に応じて（0、Below）または（-0、Above）になります。xが大きすぎてfloat32（| x |&amp;gt; math.MaxFloat32）で表現できない場合、結果はxの符号に応じて（+ Inf、Above）または（-Inf、Below）になります。</target>
        </trans-unit>
        <trans-unit id="f0d283c114b964a75d4c408e464182f402cb0b18" translate="yes" xml:space="preserve">
          <source>Float32 returns the nearest float32 value for x and a bool indicating whether f represents x exactly. If the magnitude of x is too large to be represented by a float32, f is an infinity and exact is false. The sign of f always matches the sign of x, even if f == 0.</source>
          <target state="translated">Float32 は、x に最も近い float32 の値と、f が x を正確に表すかどうかを示す bool を返します。x の大きさが大きすぎて float32 で表現できない場合、f は無限大であり、厳密には false となります。f の符号は、f ==0 であっても常に x の符号と一致します。</target>
        </trans-unit>
        <trans-unit id="eb048248df2600ce9ef5e83d147f9a17ca26adc9" translate="yes" xml:space="preserve">
          <source>Float32 returns, as a float32, a pseudo-random number in [0.0,1.0) from the default Source.</source>
          <target state="translated">Float32 は、デフォルトのソースから [0.0,1.0)の疑似乱数を float32 として返します。</target>
        </trans-unit>
        <trans-unit id="119557e6710e4b086bbd4a2b0b1939505b2ba07f" translate="yes" xml:space="preserve">
          <source>Float32 returns, as a float32, a pseudo-random number in [0.0,1.0).</source>
          <target state="translated">Float32 は、[0.0,1.0]の疑似乱数を float32 として返します。</target>
        </trans-unit>
        <trans-unit id="4b84b66f83430db58763aa54b8b6d03936e54bbe" translate="yes" xml:space="preserve">
          <source>Float32Val is like Float64Val but for float32 instead of float64.</source>
          <target state="translated">Float32ValはFloat64Valと似ていますが、float64ではなくfloat32用です。</target>
        </trans-unit>
        <trans-unit id="105737d03460ae3ded6de0ef2ecd36f638e30d1b" translate="yes" xml:space="preserve">
          <source>Float32bits returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position. Float32bits(Float32frombits(x)) == x.</source>
          <target state="translated">Float32bits は、f の符号ビットと結果が同じビット位置にある IEEE 754 の 2 進表現を返します。Float32bits(Float32frombits(x))==x.</target>
        </trans-unit>
        <trans-unit id="7a6760b22e35a08f8123f6341f83087ea51bc753" translate="yes" xml:space="preserve">
          <source>Float32frombits returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. Float32frombits(Float32bits(x)) == x.</source>
          <target state="translated">Float32frombitsは、IEEE 754の2進表現bに対応する浮動小数点数を、bの符号ビットと結果を同じビット位置で返します。Float32frombits(Float32bits(x))==x.</target>
        </trans-unit>
        <trans-unit id="e33f8d6b4fe7a74df8d041793f6b8728167aa373" translate="yes" xml:space="preserve">
          <source>Float64 defines a float64 flag with specified name, default value, and usage string. The return value is the address of a float64 variable that stores the value of the flag.</source>
          <target state="translated">Float64 は、指定された名前、デフォルト値、使用文字列を持つ float64 フラグを定義します。戻り値は、フラグの値を格納する float64 変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="932e539e33ca068476000955a48af619cccb5721" translate="yes" xml:space="preserve">
          <source>Float64 returns the float64 value nearest to x. If x is too small to be represented by a float64 (|x| &amp;lt; math.SmallestNonzeroFloat64), the result is (0, Below) or (-0, Above), respectively, depending on the sign of x. If x is too large to be represented by a float64 (|x| &amp;gt; math.MaxFloat64), the result is (+Inf, Above) or (-Inf, Below), depending on the sign of x.</source>
          <target state="translated">Float64は、xに最も近いfloat64値を返します。xが小さすぎてfloat64で表すことができない場合（| x | &amp;lt;math.SmallestNonzeroFloat64）、xの符号に応じて、結果はそれぞれ（0、下）または（-0、上）になります。xが大きすぎてfloat64（| x |&amp;gt; math.MaxFloat64）で表すことができない場合、結果はxの符号に応じて（+ Inf、Above）または（-Inf、Below）になります。</target>
        </trans-unit>
        <trans-unit id="dc045688c2b10e541f35cd8fc5a73c8305f2eb7e" translate="yes" xml:space="preserve">
          <source>Float64 returns the internal float64 value for the metric.</source>
          <target state="translated">Float64は、そのメトリックの内部的なfloat64値を返します。</target>
        </trans-unit>
        <trans-unit id="9246cdfb5427d2669759af0d644a975a43bcf09a" translate="yes" xml:space="preserve">
          <source>Float64 returns the nearest float64 value for x and a bool indicating whether f represents x exactly. If the magnitude of x is too large to be represented by a float64, f is an infinity and exact is false. The sign of f always matches the sign of x, even if f == 0.</source>
          <target state="translated">Float64 は、x に最も近い float64 値を返し、f が x を正確に表すかどうかを示す bool を返します。x の大きさが大きすぎて float64 で表現できない場合、f は無限大となり、正確には false となります。f の符号は、f ==0 であっても常に x の符号と一致します。</target>
        </trans-unit>
        <trans-unit id="fb72db19ea2b309695153285bf2c38294276e222" translate="yes" xml:space="preserve">
          <source>Float64 returns the number as a float64.</source>
          <target state="translated">Float64 は、数値を float64 として返します。</target>
        </trans-unit>
        <trans-unit id="20e645bfba6b519f6d6f9f504b9c2a836ed66b68" translate="yes" xml:space="preserve">
          <source>Float64 returns, as a float64, a pseudo-random number in [0.0,1.0) from the default Source.</source>
          <target state="translated">Float64 は、デフォルトのソースから [0.0,1.0)の疑似乱数を float64 として返します。</target>
        </trans-unit>
        <trans-unit id="39abd5b0f47630ce640acfdfa7a56a26bd48772c" translate="yes" xml:space="preserve">
          <source>Float64 returns, as a float64, a pseudo-random number in [0.0,1.0).</source>
          <target state="translated">Float64 は、[0.0,1.0)]の疑似乱数を float64 として返します。</target>
        </trans-unit>
        <trans-unit id="3044c9d35d4c2e395ec952bd2c1f124b00a34e5a" translate="yes" xml:space="preserve">
          <source>Float64Histogram represents a distribution of float64 values.</source>
          <target state="translated">Float64Histogramは、float64の値の分布を表しています。</target>
        </trans-unit>
        <trans-unit id="e78d2601d317a5e13ee64826b30b75657ca96c0e" translate="yes" xml:space="preserve">
          <source>Float64Histogram returns the internal *Float64Histogram value for the metric.</source>
          <target state="translated">Float64Histogramは、メトリックの内部*Float64Histogram値を返します。</target>
        </trans-unit>
        <trans-unit id="653daf75fab3a49fdd7213b2a24c9eb000e8f80b" translate="yes" xml:space="preserve">
          <source>Float64Slice attaches the methods of Interface to []float64, sorting in increasing order (not-a-number values are treated as less than other values).</source>
          <target state="translated">Float64Sliceは、Interfaceのメソッドを[]float64にアタッチし、昇順にソートします(数値ではない値は他の値よりも小さい値として扱われます)。</target>
        </trans-unit>
        <trans-unit id="f906cc84916bc0dd00d17ca51f9d5dd6448fa3ef" translate="yes" xml:space="preserve">
          <source>Float64Slice implements Interface for a []float64, sorting in increasing order, with not-a-number (NaN) values ordered before other values.</source>
          <target state="translated">Float64Sliceは、[]float64のインターフェイスを実装したもので、昇順にソートされ、数字ではない(NaN)値が他の値の前に並びます。</target>
        </trans-unit>
        <trans-unit id="6d5aaf48b420a680701da91064c2099910f7a459" translate="yes" xml:space="preserve">
          <source>Float64Val returns the nearest Go float64 value of x and whether the result is exact; x must be numeric or an Unknown, but not Complex. For values too small (too close to 0) to represent as float64, Float64Val silently underflows to 0. The result sign always matches the sign of x, even for 0. If x is Unknown, the result is (0, false).</source>
          <target state="translated">Float64Val は、x の最も近い Go float64 値を返し、その結果が正確であるかどうかを返します。値が小さすぎて(0に近すぎて)float64として表現できない場合、Float64Valは静かに0にアンダーフローします。 結果の符号は、0の場合でも常にxの符号と一致します。 xがUnknownの場合、結果は(0,false)となります。</target>
        </trans-unit>
        <trans-unit id="f480bc564117c47157609272dad009564b4f9701" translate="yes" xml:space="preserve">
          <source>Float64Var defines a float64 flag with specified name, default value, and usage string. The argument p points to a float64 variable in which to store the value of the flag.</source>
          <target state="translated">Float64Var は、指定された名前、デフォルト値、使用文字列を持つ float64 フラグを定義します。引数 p は、フラグの値を格納する float64 変数を指します。</target>
        </trans-unit>
        <trans-unit id="5b76d09c27fdfd38a6732c012baed4272833ca08" translate="yes" xml:space="preserve">
          <source>Float64bits returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position, and Float64bits(Float64frombits(x)) == x.</source>
          <target state="translated">Float64bitsは、fの符号ビットと結果のビット位置が同じで、Float64bits(Float64frombits(x))==xのIEEE 754の2進表現を返します。</target>
        </trans-unit>
        <trans-unit id="13821cdc42fa2ea9b35bbae95ee0c4f0016322fc" translate="yes" xml:space="preserve">
          <source>Float64frombits returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. Float64frombits(Float64bits(x)) == x.</source>
          <target state="translated">Float64frombitsは、IEEE 754の2進表現bに対応する浮動小数点数を、bの符号ビットと結果を同じビット位置で返します。Float64frombits(Float64bits(x))==x.</target>
        </trans-unit>
        <trans-unit id="9528abfae7394b5c9ba7f685b93bd097bf04d6fb" translate="yes" xml:space="preserve">
          <source>Float64s</source>
          <target state="translated">Float64s</target>
        </trans-unit>
        <trans-unit id="6d807816d1f16d759e0177078b58ba0a3f78cc89" translate="yes" xml:space="preserve">
          <source>Float64s sorts a slice of float64s in increasing order (not-a-number values are treated as less than other values).</source>
          <target state="translated">Float64s は float64 のスライスを昇順にソートします(数値ではない値は他の値よりも小さい値として扱われます)。</target>
        </trans-unit>
        <trans-unit id="e76c800c50d12be0d0ffe3d12ab4347b885eba2b" translate="yes" xml:space="preserve">
          <source>Float64s sorts a slice of float64s in increasing order. Not-a-number (NaN) values are ordered before other values.</source>
          <target state="translated">Float64sは、float64sのスライスを昇順にソートします。数字ではない値(NaN)は他の値の前に並べられます。</target>
        </trans-unit>
        <trans-unit id="423599a7986fad94bdc1d6990e093d25432d1712" translate="yes" xml:space="preserve">
          <source>Float64sAreSorted</source>
          <target state="translated">Float64sAreSorted</target>
        </trans-unit>
        <trans-unit id="7420edb10083ef184106f9d40b1aeb6592603e4a" translate="yes" xml:space="preserve">
          <source>Float64sAreSorted reports whether the slice x is sorted in increasing order, with not-a-number (NaN) values before any other values.</source>
          <target state="translated">Float64sAreSortedは、スライスxが昇順でソートされているかどうかを報告するもので、数字でない(NaN)値が他の値よりも先に表示されます。</target>
        </trans-unit>
        <trans-unit id="4b88d9ca0f421f91022935615e41cacbe0162795" translate="yes" xml:space="preserve">
          <source>Float64sAreSorted tests whether a slice of float64s is sorted in increasing order (not-a-number values are treated as less than other values).</source>
          <target state="translated">Float64sAreSorted は、float64 のスライスが昇順にソートされているかどうかをテストします (番号ではない値は他の値よりも小さい値として扱われます)。</target>
        </trans-unit>
        <trans-unit id="2d47ae20529c410d30f8acaae289ca9d51484938" translate="yes" xml:space="preserve">
          <source>FloatString returns a string representation of x in decimal form with prec digits of precision after the radix point. The last digit is rounded to nearest, with halves rounded away from zero.</source>
          <target state="translated">FloatString は、基底点の後に精度の高い桁数を持つ 10 進形式の x の文字列表現を返します。最後の桁は直近の桁に丸められ、半分の桁はゼロから離れて丸められます。</target>
        </trans-unit>
        <trans-unit id="05a1f94d542ff10ae04a25aa8e277a76154c76d0" translate="yes" xml:space="preserve">
          <source>FloatType is here for the purposes of documentation only. It is a stand-in for either float type: float32 or float64.</source>
          <target state="translated">FloatType は、ここでは説明のみを目的としています。float32 または float64 のいずれかの float 型の代用となります。</target>
        </trans-unit>
        <trans-unit id="062cea8bd0e8167673b6851fa82870b7db8d7c76" translate="yes" xml:space="preserve">
          <source>Floating point, integer, and Number values encode as JSON numbers.</source>
          <target state="translated">浮動小数点値、整数値、Number値はJSONの数値としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="d8d6ee865f2a29fd1629088910ea491c9698ff5c" translate="yes" xml:space="preserve">
          <source>Floating-point and complex constituents:</source>
          <target state="translated">浮動小数点と複素体の構成要素。</target>
        </trans-unit>
        <trans-unit id="b844d202032ef470ba06e9916c2c520ac0ae8998" translate="yes" xml:space="preserve">
          <source>Floating-point limit values. Max is the largest finite value representable by the type. SmallestNonzero is the smallest positive, non-zero value representable by the type.</source>
          <target state="translated">浮動小数点の有限値。Maxは、型で表現可能な最大の有限値です。SmallestNonzeroは、型によって表現可能な最小の正の非ゼロ値です。</target>
        </trans-unit>
        <trans-unit id="58315571a008eb8b389dc1e86460decd0968399f" translate="yes" xml:space="preserve">
          <source>Floating-point numbers are always sent as a representation of a float64 value. That value is converted to a uint64 using math.Float64bits. The uint64 is then byte-reversed and sent as a regular unsigned integer. The byte-reversal means the exponent and high-precision part of the mantissa go first. Since the low bits are often zero, this can save encoding bytes. For instance, 17.0 is encoded in only three bytes (FE 31 40).</source>
          <target state="translated">浮動小数点数は常に float64 値の表現として送信されます。この値は、math.Float64bits を使用して uint64 に変換されます。その後、uint64 はバイト反転され、通常の符号なし整数として送信されます。バイト反転とは、指数と高精度の部分が最初に行くことを意味します。低ビットは多くの場合ゼロなので、これはエンコーディングのバイト数を節約することができます。例えば、17.0は3バイト(FE 31 40)だけで符号化されます。</target>
        </trans-unit>
        <trans-unit id="7db82f74092fc3160e6bc0d9e9bd4849c5c06c0f" translate="yes" xml:space="preserve">
          <source>Floor</source>
          <target state="translated">Floor</target>
        </trans-unit>
        <trans-unit id="ecdffd0cc36f2aad9aef8da98d7fbdd7cd3a98c8" translate="yes" xml:space="preserve">
          <source>Floor returns the greatest integer value less than or equal to x.</source>
          <target state="translated">Floorは、x以下の最大の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="563e65b909d8ae6e49711cd799a32c5eb753dc00" translate="yes" xml:space="preserve">
          <source>FloydSteinberg is a Drawer that is the Src Op with Floyd-Steinberg error diffusion.</source>
          <target state="translated">FloydSteinbergはFloydSteinbergのエラー拡散でSrc Opとなるドロワーです。</target>
        </trans-unit>
        <trans-unit id="589b0d2e5704bd529f61be95ef5544d324be7a14" translate="yes" xml:space="preserve">
          <source>Flush finishes writing the current file's block padding. The current file must be fully written before Flush can be called.</source>
          <target state="translated">Flush は、現在のファイルのブロックパディングの書き込みを終了します。Flush を呼び出す前に、現在のファイルが完全に書き込まれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="843ff9ecc07dad8fd240920fbaff659c8bd3b2af" translate="yes" xml:space="preserve">
          <source>Flush flushes any buffered XML to the underlying writer. See the EncodeToken documentation for details about when it is necessary.</source>
          <target state="translated">Flush は、バッファリングされた XML を基礎となるライタにフラッシュします。必要な場合の詳細については EncodeToken のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7757e81dddaaa31ce1e5de4d9b235a8f3a0853cd" translate="yes" xml:space="preserve">
          <source>Flush flushes any buffered data to the underlying writer. Calling Flush is not normally necessary; calling Close is sufficient.</source>
          <target state="translated">Flush は、バッファリングされたデータを基礎となるライタにフラッシュします。通常、Flush を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="96dda344b5d691957686f7fdb72b5295f5fa20bb" translate="yes" xml:space="preserve">
          <source>Flush flushes any pending compressed data to the underlying writer.</source>
          <target state="translated">Flush は、保留中の圧縮データを基礎となるライタにフラッシュします。</target>
        </trans-unit>
        <trans-unit id="3d5ed753caad4196a8e88cd94331064662192c20" translate="yes" xml:space="preserve">
          <source>Flush flushes any pending data to the underlying writer. It is useful mainly in compressed network protocols, to ensure that a remote reader has enough data to reconstruct a packet. Flush does not return until the data has been written. Calling Flush when there is no pending data still causes the Writer to emit a sync marker of at least 4 bytes. If the underlying writer returns an error, Flush returns that error.</source>
          <target state="translated">Flush は、基礎となるライタに保留中のデータをフラッシュします。これは主に圧縮ネットワークプロトコルで有用で、リモートリーダーがパケットを再構築するのに十分なデータを持っていることを保証します。Flush はデータが書き込まれるまで戻りません。保留中のデータがない場合に Flush を呼び出すと、ライターは少なくとも 4 バイトの同期マーカを発行します。基礎となるライタがエラーを返す場合、Flush はそのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="18258ea43eb9026bfa3ba6a07c0a3a31739171f2" translate="yes" xml:space="preserve">
          <source>Flush flushes the Writer to its underlying io.Writer.</source>
          <target state="translated">Flush は、その下にある io.Writer をフラッシュします。</target>
        </trans-unit>
        <trans-unit id="729311d07e8c1334af4a5f862a0dd14b0dd93238" translate="yes" xml:space="preserve">
          <source>Flush implements http.Flusher. To test whether Flush was called, see rw.Flushed.</source>
          <target state="translated">Flush は http.Flusher を実装しています。Flush が呼び出されたかどうかをテストするには、rw.Flushed を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d24f3ea0b3c10e2043b05ee2cd79df1306cedcb" translate="yes" xml:space="preserve">
          <source>Flush should be called after the last call to Write to ensure that any data buffered in the Writer is written to output. Any incomplete escape sequence at the end is considered complete for formatting purposes.</source>
          <target state="translated">Flushは、Writerでバッファリングされたデータが出力に書き込まれることを確実にするために、最後にWriteを呼び出した後に呼び出す必要があります。最後に不完全なエスケープシーケンスがあった場合は、フォーマットのために完全とみなされます。</target>
        </trans-unit>
        <trans-unit id="ea94514228dc595c44d2b25610d0fa2d54b246e4" translate="yes" xml:space="preserve">
          <source>Flush writes any buffered data to the underlying io.Writer.</source>
          <target state="translated">Flush は、バッファリングされたデータを基底の io.Writer に書き込みます。</target>
        </trans-unit>
        <trans-unit id="ae89e3b744d5bf8ef751ee2c788427617846f85a" translate="yes" xml:space="preserve">
          <source>Flush writes any buffered data to the underlying io.Writer. To check if an error occurred during the Flush, call Error.</source>
          <target state="translated">Flush は、バッファリングされたデータを基底の io.Writer に書き込みます。Flush中にエラーが発生したかどうかをチェックするには、Errorを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9f472a0c2c904654bddc286404214aebce731987" translate="yes" xml:space="preserve">
          <source>FlushAfterChunkWriter signals from the caller of NewChunkedWriter that each chunk should be followed by a flush. It is used by the http.Transport code to keep the buffering behavior for headers and trailers, but flush out chunks aggressively in the middle for request bodies which may be generated slowly. See Issue 6574.</source>
          <target state="translated">FlushAfterChunkWriter は NewChunkedWriter の呼び出し元から、各チャンクの後にフラッシュを行うべきであることを シグナルします。これは http.Transport のコードで使用され、ヘッダやトレーラのバッファリング動作を維持しつつ、 リクエストボディの生成が遅い場合には途中で積極的にチャンクをフラッシュアウトします。6574 号を参照してください。</target>
        </trans-unit>
        <trans-unit id="772a9c77dc26ab2b684cccb97da47b2e2cdf95ac" translate="yes" xml:space="preserve">
          <source>FoldCategory maps a category name to a table of code points outside the category that are equivalent under simple case folding to code points inside the category. If there is no entry for a category name, there are no such points.</source>
          <target state="translated">FoldCategory は、カテゴリ名をカテゴリ外のコードポイントの表にマッピングします。カテゴリ名のエントリがない場合は、そのようなポイントは存在しません。</target>
        </trans-unit>
        <trans-unit id="3df43e93d81327f2c6837f681b29802a81ed9d8c" translate="yes" xml:space="preserve">
          <source>FoldScript maps a script name to a table of code points outside the script that are equivalent under simple case folding to code points inside the script. If there is no entry for a script name, there are no such points.</source>
          <target state="translated">FoldScript は、スクリプト名をスクリプト外部のコードポイントの表にマッピングします。スクリプト名のエントリがない場合は、そのようなポイントは存在しません。</target>
        </trans-unit>
        <trans-unit id="2a306a62652b9cfbec638f004e0203911d315836" translate="yes" xml:space="preserve">
          <source>For IP networks, the network must be &quot;ip&quot;, &quot;ip4&quot; or &quot;ip6&quot; followed by a colon and a literal protocol number or a protocol name, and the address has the form &quot;host&quot;. The host must be a literal IP address or a literal IPv6 address with zone. It depends on each operating system how the operating system behaves with a non-well known protocol number such as &quot;0&quot; or &quot;255&quot;.</source>
          <target state="translated">IPネットワークの場合、ネットワークは &quot;ip&quot;、&quot;ip4 &quot;または &quot;ip6 &quot;の後にコロンとリテラルプロトコル番号またはプロトコル名を続け、アドレスは &quot;host &quot;の形をしていなければなりません。ホストは、リテラルIPアドレスまたはゾーン付きのリテラルIPv6アドレスでなければなりません。0 &quot;や &quot;255 &quot;のようなよく知られていないプロトコル番号を指定した場合、オペレーティングシステムがどのように動作するかは、各オペレーティングシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="a986939ec86bd91233d7b82449d187d316efcfcb" translate="yes" xml:space="preserve">
          <source>For POST, PUT, and PATCH requests, it also parses the request body as a form and puts the results into both r.PostForm and r.Form. Request body parameters take precedence over URL query string values in r.Form.</source>
          <target state="translated">POST,PUT,PATCH リクエストの場合、リクエストボディをフォームとして解析し、その結果を r.PostForm と r.Form の両方に格納します。リクエストボディのパラメータは、r.Form の URL クエリ文字列の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="225b1c801f3e5dbb06167528a23dd7b472f86786" translate="yes" xml:space="preserve">
          <source>For POST, PUT, and PATCH requests, it also reads the request body, parses it as a form and puts the results into both r.PostForm and r.Form. Request body parameters take precedence over URL query string values in r.Form.</source>
          <target state="translated">POST,PUT,PATCH リクエストに対しては、リクエストボディを読み込んでフォームとして解析し、その結果を r.PostForm と r.Form の両方に入れます。リクエストボディのパラメータは、r.Form の URL クエリ文字列の値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="961435f4e8342868021020dbf9e49c6cd0fb855a" translate="yes" xml:space="preserve">
          <source>For TCP and UDP networks, the address has the form &quot;host:port&quot;. The host must be a literal IP address, or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name. If the host is a literal IPv6 address it must be enclosed in square brackets, as in &quot;[2001:db8::1]:80&quot; or &quot;[fe80::1%zone]:80&quot;. The zone specifies the scope of the literal IPv6 address as defined in RFC 4007. The functions JoinHostPort and SplitHostPort manipulate a pair of host and port in this form. When using TCP, and the host resolves to multiple IP addresses, Dial will try each IP address in order until one succeeds.</source>
          <target state="translated">TCP および UDP ネットワークの場合、アドレスは「host:port」という形式を持ちます。ホストは、リテラルIPアドレス、またはIPアドレスに解決できるホスト名でなければなりません。ポートは、リテラルのポート番号またはサービス名である必要があります。ホストがリテラルIPv6アドレスの場合は、「[2001:db8::1]:80」または「[fe80::1%zone]:80」のように角括弧で囲む必要がある。ゾーンは、RFC4007で定義されているリテラルIPv6アドレスの範囲を指定する。関数JoinHostPortとSplitHostPortは、この形式でホストとポートのペアを操作する。TCPを使用していて、ホストが複数のIPアドレスに解決している場合、ダイヤルは1つが成功するまで各IPアドレスを順番に試行します。</target>
        </trans-unit>
        <trans-unit id="03c81916838d3414948e1c22f701e5ce4a3a4855" translate="yes" xml:space="preserve">
          <source>For TCP networks, if the host in the address parameter is empty or a literal unspecified IP address, Listen listens on all available unicast and anycast IP addresses of the local system. To only use IPv4, use network &quot;tcp4&quot;. The address can use a host name, but this is not recommended, because it will create a listener for at most one of the host's IP addresses. If the port in the address parameter is empty or &quot;0&quot;, as in &quot;127.0.0.1:&quot; or &quot;[::1]:0&quot;, a port number is automatically chosen. The Addr method of Listener can be used to discover the chosen port.</source>
          <target state="translated">TCP ネットワークの場合、address パラメータのホストが空の場合、またはリテラルの指定されていない IP アドレスの場合、Listen はローカルシステムのすべての利用可能なユニキャスト IP アドレスとエ ンジキャスト IP アドレスをリッスンします。IPv4 のみを使用するには、ネットワーク &quot;tcp4 &quot;を使用します。アドレスにはホスト名を使用することができますが、これは推奨されません。addressパラメータのポートが空か、&quot;127.0.0.0.1:&quot;や&quot;[::1]:0 &quot;のように &quot;0 &quot;の場合は、自動的にポート番号が選択されます。Listener の Addr メソッドを使用して、選択されたポートを検出することができます。</target>
        </trans-unit>
        <trans-unit id="bc11a7bec3f66f8d391db1eaf65bf359662c3096" translate="yes" xml:space="preserve">
          <source>For TCP, UDP and IP networks, if the host is empty or a literal unspecified IP address, as in &quot;:80&quot;, &quot;0.0.0.0:80&quot; or &quot;[::]:80&quot; for TCP and UDP, &quot;&quot;, &quot;0.0.0.0&quot; or &quot;::&quot; for IP, the local system is assumed.</source>
          <target state="translated">TCP、UDP、IPネットワークでは、ホストが空か、TCPとUDPでは&quot;:80&quot;、&quot;0.0.0.0.0:80 &quot;または&quot;[::]:80&quot;、IPでは&quot;&quot;、&quot;0.0.0.0 &quot;または&quot;::&quot;のように、リテラルな不特定のIPアドレスを指定した場合、ローカルシステムを想定しています。</target>
        </trans-unit>
        <trans-unit id="f2ddf19f5cd72f2d3b549235c60d91767535d03b" translate="yes" xml:space="preserve">
          <source>For UDP and IP networks, if the host in the address parameter is empty or a literal unspecified IP address, ListenPacket listens on all available IP addresses of the local system except multicast IP addresses. To only use IPv4, use network &quot;udp4&quot; or &quot;ip4:proto&quot;. The address can use a host name, but this is not recommended, because it will create a listener for at most one of the host's IP addresses. If the port in the address parameter is empty or &quot;0&quot;, as in &quot;127.0.0.1:&quot; or &quot;[::1]:0&quot;, a port number is automatically chosen. The LocalAddr method of PacketConn can be used to discover the chosen port.</source>
          <target state="translated">UDPおよびIPネットワークの場合、addressパラメータのホストが空かリテラルの指定されていないIPアドレスの場合、ListenPacketはマルチキャストIPアドレスを除くローカルシステムの利用可能なすべてのIPアドレスをリッスンします。IPv4のみを使用する場合は、ネットワーク &quot;udp4 &quot;または &quot;ip4:proto &quot;を使用します。アドレスにはホスト名を使用することができますが、これはホストのIPアドレスのうち最大でも1つのリスナーを作成することになるのでお勧めできません。address パラメータのポートが空の場合や &quot;127.0.0.0.1:&quot; や &quot;[::1]:0&quot; のように &quot;0&quot; が指定された場合は、自動的にポート番号が選択されます。選択されたポートを検出するには、PacketConn の LocalAddr メソッドを使用することができます。</target>
        </trans-unit>
        <trans-unit id="4aa2c0bd0a7ad04b8f9986a2d00cc56ef314d18a" translate="yes" xml:space="preserve">
          <source>For Unix networks, the address must be a file system path.</source>
          <target state="translated">Unix ネットワークの場合、アドレスはファイルシステムのパスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="55388abcc16d920a08a97c993d2242d3821d48ea" translate="yes" xml:space="preserve">
          <source>For a Timer created with AfterFunc(d, f), Reset either reschedules when f will run, in which case Reset returns true, or schedules f to run again, in which case it returns false. When Reset returns false, Reset neither waits for the prior f to complete before returning nor does it guarantee that the subsequent goroutine running f does not run concurrently with the prior one. If the caller needs to know whether the prior execution of f is completed, it must coordinate with f explicitly.</source>
          <target state="translated">AfterFunc(d,f)で作成されたTimerの場合、Resetは、fが実行されるタイミングを再スケジュールするか(この場合、Resetはtrueを返す)、fが再び実行されるようにスケジュールするか(この場合、Resetはfalseを返す)のいずれかです。Resetがfalseを返す場合、Resetは先に実行されたfが完了するのを待ってから戻るのでもなく、fを実行する後続のゴルーチンが先に実行されたものと同時に実行されないことを保証するのでもありません。呼び出し側がfの先行実行が完了したかどうかを知る必要がある場合は、fと明示的に調整する必要があります。</target>
        </trans-unit>
        <trans-unit id="abbce471eb362731eac46a382c7b5f3c54982be7" translate="yes" xml:space="preserve">
          <source>For a Timer created with NewTimer, Reset should be invoked only on stopped or expired timers with drained channels.</source>
          <target state="translated">NewTimerで作成されたTimerでは、Resetは、チャンネルが排水された停止中または期限切れのTimerに対してのみ実行されるべきです。</target>
        </trans-unit>
        <trans-unit id="6cd90d9b68fe83f1b691af955f9ccbfffd46f969" translate="yes" xml:space="preserve">
          <source>For a description of the testing flags, see &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Testing_flags&quot;&gt;https://golang.org/cmd/go/#hdr-Testing_flags&lt;/a&gt;</source>
          <target state="translated">テストフラグの説明については、&lt;a href=&quot;https://golang.org/cmd/go/#hdr-Testing_flags&quot;&gt;https：//golang.org/cmd/go/#hdr-Testing_flagsをご覧ください。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="73db7630962b7d9bfe80901d992afe02ab8d444e" translate="yes" xml:space="preserve">
          <source>For a more concise way to create NamedArg values, see the Named function.</source>
          <target state="translated">NamedArg値を作成するより簡潔な方法については、Named関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="2e93a7b63c6c1c22251cdfa7d2125bbcb4c1d807" translate="yes" xml:space="preserve">
          <source>For a study of the facility in action, visit</source>
          <target state="translated">施設の稼働状況については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ea8b0e15d8c10094163cd876f62393b64628d456" translate="yes" xml:space="preserve">
          <source>For a timer created with AfterFunc(d, f), if t.Stop returns false, then the timer has already expired and the function f has been started in its own goroutine; Stop does not wait for f to complete before returning. If the caller needs to know whether f is completed, it must coordinate with f explicitly.</source>
          <target state="translated">AfterFunc(d,f)で作成されたタイマに対して、t.Stopがfalseを返した場合、そのタイマはすでに期限切れであり、関数fはそれ自身のgoroutineで開始されていることになります;Stopはfが完了するのを待たずに戻ります。呼び出し元がfが完了したかどうかを知る必要がある場合は、明示的にfと調整しなければなりません。</target>
        </trans-unit>
        <trans-unit id="adbed43366f7734c782e1358f999b46beb1e3fca" translate="yes" xml:space="preserve">
          <source>For a tutorial, see &lt;a href=&quot;https://golang.org/s/types-tutorial&quot;&gt;https://golang.org/s/types-tutorial&lt;/a&gt;.</source>
          <target state="translated">チュートリアルについては、&lt;a href=&quot;https://golang.org/s/types-tutorial&quot;&gt;https：&lt;/a&gt; //golang.org/s/types-tutorialを参照してください。</target>
        </trans-unit>
        <trans-unit id="e18ade19ed4a3115a9d9e3c880c80a5a49514530" translate="yes" xml:space="preserve">
          <source>For all requests, ParseForm parses the raw query from the URL and updates r.Form.</source>
          <target state="translated">すべてのリクエストに対して、ParseForm は URL からの生のクエリを解析し、r.Form を更新します。</target>
        </trans-unit>
        <trans-unit id="a78bb4acd6502d15dc3957871fac3c0be9d9b00b" translate="yes" xml:space="preserve">
          <source>For an abstract method, Recv returns the enclosing interface either as a *Named or an *Interface. Due to embedding, an interface may contain methods whose receiver type is a different interface.</source>
          <target state="translated">抽象メソッドの場合、Recv は、包含するインタフェースを *Named または *Interface のいずれかで返します。組み込みのため、インターフェイスには、レシーバ・タイプが異なるインターフェイスであるメソッドが含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="4e330719ad337b4c9602641929cab60cae09925d" translate="yes" xml:space="preserve">
          <source>For an outgoing client request, the context controls the entire lifetime of a request and its response: obtaining a connection, sending the request, and reading the response headers and body.</source>
          <target state="translated">発信クライアントリクエストに対して、コンテキストは、コネクションの取得、リクエストの送信、 レスポンスヘッダーとボディの読み込みという、リクエストとその応答の全ライフタイムを制御する。</target>
        </trans-unit>
        <trans-unit id="d8c341cebb2371fc4554d9fb0c6e54c2c5900936" translate="yes" xml:space="preserve">
          <source>For base 0, an underscore character &amp;ldquo;_&amp;rdquo; may appear between a base prefix and an adjacent digit, and between successive digits; such underscores do not change the value of the number, or the returned digit count. Incorrect placement of underscores is reported as an error if there are no other errors. If base != 0, underscores are not recognized and thus terminate scanning like any other character that is not a valid radix point or digit.</source>
          <target state="translated">ベース0の場合、ベースプレフィックスと隣接する数字の間、および連続する数字の間にアンダースコア文字「_」が表示されることがあります。このようなアンダースコアは、数値の値や返される桁数を変更しません。他にエラーがない場合、アンダースコアの不適切な配置はエラーとして報告されます。base！= 0の場合、アンダースコアは認識されないため、有効な基数ポイントまたは数字ではない他の文字と同様にスキャンを終了します。</target>
        </trans-unit>
        <trans-unit id="e5942b37cf590ae4aabd1b760f075ef90fd1c294" translate="yes" xml:space="preserve">
          <source>For base 0, an underscore character &amp;ldquo;_&amp;rdquo; may appear between a base prefix and an adjacent digit, and between successive digits; such underscores do not change the value of the number. Incorrect placement of underscores is reported as an error if there are no other errors. If base != 0, underscores are not recognized and act like any other character that is not a valid digit.</source>
          <target state="translated">ベース0の場合、ベースプレフィックスと隣接する数字の間、および連続する数字の間にアンダースコア文字「_」が表示されることがあります。このような下線は、数値の値を変更しません。他にエラーがない場合、アンダースコアの不適切な配置はエラーとして報告されます。base！= 0の場合、アンダースコアは認識されず、有効な数字ではない他の文字と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="5f1ac8df1f8e77c9fdc27bc0637f8b872484b6a1" translate="yes" xml:space="preserve">
          <source>For base 0, the number prefix determines the actual base: A prefix of &amp;ldquo;0b&amp;rdquo; or &amp;ldquo;0B&amp;rdquo; selects base 2, &amp;ldquo;0o&amp;rdquo; or &amp;ldquo;0O&amp;rdquo; selects base 8, and &amp;ldquo;0x&amp;rdquo; or &amp;ldquo;0X&amp;rdquo; selects base 16. Otherwise, the actual base is 10 and no prefix is accepted. The octal prefix &quot;0&quot; is not supported (a leading &quot;0&quot; is simply considered a &quot;0&quot;).</source>
          <target state="translated">基数0の場合、数値プレフィックスは実際の基数を決定します。「0b」または「0B」のプレフィックスは基数2を選択し、「0o」または「0O」は基数8を選択し、「0x」または「0X」は基数16を選択します。 、実際のベースは10であり、接頭辞は受け入れられません。8進数の接頭辞「0」はサポートされていません（先頭の「0」は単に「0」と見なされます）。</target>
        </trans-unit>
        <trans-unit id="8da96f7777bef60314c708eb513a45527fc86e1a" translate="yes" xml:space="preserve">
          <source>For bases &amp;lt;= 36, lower and upper case letters are considered the same: The letters 'a' to 'z' and 'A' to 'Z' represent digit values 10 to 35. For bases &amp;gt; 36, the upper case letters 'A' to 'Z' represent the digit values 36 to 61.</source>
          <target state="translated">基数が36以下の場合、小文字と大文字は同じと見なされます。文字「a」から「z」および「A」から「Z」は、10から35までの数字の値を表します。塩基&amp;gt; 36の場合は、大文字の「 AからZは、36から61までの数字の値を表します。</target>
        </trans-unit>
        <trans-unit id="1cda30f1e34e7fc3ab26bca0abe9bc827de94de0" translate="yes" xml:space="preserve">
          <source>For calls ForCompiler with a new FileSet.</source>
          <target state="translated">新しいFileSetでForCompilerを呼び出す場合。</target>
        </trans-unit>
        <trans-unit id="7777ccd24b8bd654eee8980ccc52774364f6122b" translate="yes" xml:space="preserve">
          <source>For compatibility with Go 1.0, Symbols omits the null symbol at index 0. After retrieving the symbols as symtab, an externally supplied index x corresponds to symtab[x-1], not symtab[x].</source>
          <target state="translated">Go 1.0との互換性のため、Symbolsはインデックス0のヌル記号を省略します。シンボルを symtab として取得した後、外部から与えられたインデックス x は symtab[x]ではなく symtab[x-1]に対応します。</target>
        </trans-unit>
        <trans-unit id="bd3f39afacd60fc39b35ccda1637af8ff2e8c205" translate="yes" xml:space="preserve">
          <source>For compatibility with Symbols, DynamicSymbols omits the null symbol at index 0. After retrieving the symbols as symtab, an externally supplied index x corresponds to symtab[x-1], not symtab[x].</source>
          <target state="translated">シンボルとの互換性のため、DynamicSymbols はインデックス 0 の NULL シンボルを省略します。シンボルを symtab として取得した後、外部から与えられたインデックス x は symtab[x]ではなく symtab[x-1]に対応します。</target>
        </trans-unit>
        <trans-unit id="ceff07027a0562aae7bcfc8fafd438b3054bb3ea" translate="yes" xml:space="preserve">
          <source>For complex numbers, the width and precision apply to the two components independently and the result is parenthesized, so %f applied to 1.2+3.4i produces (1.200000+3.400000i).</source>
          <target state="translated">複素数の場合、幅と精度は 2 つの成分に独立して適用され、結果は括弧で括られるので、%f を 1.2+3.4i に適用すると、(1.200000+3.400000i)となります。</target>
        </trans-unit>
        <trans-unit id="9b540b6ad368c9fd7ce41d2cd5a4983671593e81" translate="yes" xml:space="preserve">
          <source>For compound objects, the elements are printed using these rules, recursively, laid out like this:</source>
          <target state="translated">複合オブジェクトの場合は、これらのルールを使用して要素を再帰的に印刷し、このようにレイアウトします。</target>
        </trans-unit>
        <trans-unit id="33fb692c25f138c6447e3086029bcccc81bc7da5" translate="yes" xml:space="preserve">
          <source>For compound operands such as slices and structs, the format applies to the elements of each operand, recursively, not to the operand as a whole. Thus %q will quote each element of a slice of strings, and %6.2f will control formatting for each element of a floating-point array.</source>
          <target state="translated">スライスや構造体などの複合オペランドの場合、フォーマットは、オペランド全体ではなく、各オペランドの要素に再帰的に適用されます。したがって、%q は文字列のスライスの各要素を引用し、%6.2f は浮動小数点配列の各要素の書式設定を制御します。</target>
        </trans-unit>
        <trans-unit id="5cab5826d638fdbcb2ad7a5200731c473b3d7274" translate="yes" xml:space="preserve">
          <source>For control over HTTP client headers, redirect policy, and other settings, create a Client:</source>
          <target state="translated">HTTP クライアントヘッダ、リダイレクトポリシー、その他の設定を制御するには、Client を作成します。</target>
        </trans-unit>
        <trans-unit id="c05d2d3e27ddcc721da61cee1a36f988089cfb17" translate="yes" xml:space="preserve">
          <source>For control over canceling or setting a timeout on a handshake, use the Dialer's DialContext method.</source>
          <target state="translated">ハンドシェイクのキャンセルやタイムアウトの設定を制御するには、Dialer の DialContext メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="d0c2ce00eb37f48324b8088e1562b15a52ee733a" translate="yes" xml:space="preserve">
          <source>For control over proxies, TLS configuration, keep-alives, compression, and other settings, create a Transport:</source>
          <target state="translated">プロキシ、TLS 設定、キープアライブ、圧縮、その他の設定を制御するには、トランスポートを作成します。</target>
        </trans-unit>
        <trans-unit id="993c8adfef972ba1b068a5731b030b2c3e0c3fdb" translate="yes" xml:space="preserve">
          <source>For correct printing of source code containing comments (using packages go/format and go/printer), special care must be taken to update comments when a File's syntax tree is modified: For printing, comments are interspersed between tokens based on their position. If syntax tree nodes are removed or moved, relevant comments in their vicinity must also be removed (from the File.Comments list) or moved accordingly (by updating their positions). A CommentMap may be used to facilitate some of these operations.</source>
          <target state="translated">コメントを含むソースコードを正しく印刷するために(パッケージgo/formatとgo/printerを使用して)、ファイルの構文ツリーが変更されたときにコメントを更新するために特別な注意を払う必要があります。印刷のために、コメントはその位置に基づいてトークンの間に配置されます。シンタックスツリーのノードが削除または移動された場合、その周辺の関連するコメントも削除(File.Commentsリストから)またはそれに応じて移動(位置を更新することによって)する必要があります。これらの操作の一部を容易にするために CommentMap を使用することができます。</target>
        </trans-unit>
        <trans-unit id="483fb4b25526c306ca9ffc7060d999d1af757359" translate="yes" xml:space="preserve">
          <source>For debugging, the result of t.String does include the monotonic clock reading if present. If t != u because of different monotonic clock readings, that difference will be visible when printing t.String() and u.String().</source>
          <target state="translated">デバッグのために、t.Stringの結果には、単調クロックの読みがある場合には、その読みが含まれています。モノトニッククロックの読み取り値が異なるために t !=u となった場合、その差は t.String()と u.String()を印刷する際に表示されます。</target>
        </trans-unit>
        <trans-unit id="c8abfac368bfa911449148a175097af24838350b" translate="yes" xml:space="preserve">
          <source>For each Printf-like function, there is also a Print function that takes no format and is equivalent to saying %v for every operand. Another variant Println inserts blanks between operands and appends a newline.</source>
          <target state="translated">それぞれのPrintfに似た関数には、フォーマットを取らず、すべてのオペランドに対して%vと言っているのと同等のPrint関数もあります。もう一つのPrintlnは、オペランド間に空白を挿入し、改行を追加します。</target>
        </trans-unit>
        <trans-unit id="2a2f4f1a729ce7677e5cf80bd12ad7a79baf850c" translate="yes" xml:space="preserve">
          <source>For embedding a single file, a variable of type string or []byte is often best. The FS type enables embedding a tree of files, such as a directory of static web server content, as in the example above.</source>
          <target state="translated">1つのファイルを埋め込む場合は、stringまたは[]byte型の変数が最適です。FS型では、上の例のように、静的なWebサーバーコンテンツのディレクトリなど、ファイルのツリーを埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="0691fc88626f896c5b4d0c9d21eb150c4440f732" translate="yes" xml:space="preserve">
          <source>For example, a client might run a HELP command that returns a dot-body by using:</source>
          <target state="translated">例えば、クライアントは、ドットボディを返すHELPコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="d2c85d01a63eaf87fca388b5018e0aae0a907e1f" translate="yes" xml:space="preserve">
          <source>For example, a plugin defined as</source>
          <target state="translated">例えば、次のように定義されたプラグインは</target>
        </trans-unit>
        <trans-unit id="b604de3a3134fd6e14b1dedf12ca2289afcd00f8" translate="yes" xml:space="preserve">
          <source>For example, assume that we decided to froth milk, extract coffee, and mix milk and coffee in separate goroutines. With a task, the trace tool can identify the goroutines involved in a specific cappuccino order.</source>
          <target state="translated">例えば、ミルクを泡立て、コーヒーを抽出し、ミルクとコーヒーを別々のゴロチンで混ぜることにしたとします。タスクを使用すると、トレースツールは、特定のカプチーノの注文に関与するゴロチンを識別することができます。</target>
        </trans-unit>
        <trans-unit id="eb2f502c06edd8d48f9eb402147b9d0d02234fdf" translate="yes" xml:space="preserve">
          <source>For example, consider this input:</source>
          <target state="translated">例えば、この入力を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="32f7515ac15513dae926420ef8347c405e749ac1" translate="yes" xml:space="preserve">
          <source>For example, given the content variable in the example above, we can write:</source>
          <target state="translated">例えば、上の例のコンテンツ変数があれば、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="e07ff3b2f7ec128082cb6d47f79493ae88ad678a" translate="yes" xml:space="preserve">
          <source>For example, here are three ways to embed a file named hello.txt and then print its contents at run time.</source>
          <target state="translated">例えば、hello.txtという名前のファイルを埋め込み、その内容を実行時に表示する方法を3つ紹介します。</target>
        </trans-unit>
        <trans-unit id="4c08416096093138a9f21f98db3e35296861799a" translate="yes" xml:space="preserve">
          <source>For example, if p points to a struct that contains a file descriptor d, and p has a finalizer that closes that file descriptor, and if the last use of p in a function is a call to syscall.Write(p.d, buf, size), then p may be unreachable as soon as the program enters syscall.Write. The finalizer may run at that moment, closing p.d, causing syscall.Write to fail because it is writing to a closed file descriptor (or, worse, to an entirely different file descriptor opened by a different goroutine). To avoid this problem, call runtime.KeepAlive(p) after the call to syscall.Write.</source>
          <target state="translated">例えば、pがファイル記述子dを含む構造体を指し、pがそのファイル記述子を閉じるファイナライザを持ち、関数内でのpの最後の使用がsyscall.Write(p.d,buf,size)への呼び出しである場合、プログラムがsyscall.Writeに入るとすぐにpは到達できなくなるかもしれません。その時点でファイナライザが実行され、p.dを閉じてしまい、syscall.Writeが閉じたファイルディスクリプタ(あるいは、より悪いことに、異なるgoroutineによって開かれた全く異なるファイルディスクリプタ)に書き込んでいるために失敗することがあります。この問題を回避するには、syscall.Writeの呼び出しの後にruntime.KeepAlive(p)を呼び出してください。</target>
        </trans-unit>
        <trans-unit id="b7f27996d14898d381b2006768c093d3591a4f75" translate="yes" xml:space="preserve">
          <source>For example, if p points to a struct, such as os.File, that contains a file descriptor d, and p has a finalizer that closes that file descriptor, and if the last use of p in a function is a call to syscall.Write(p.d, buf, size), then p may be unreachable as soon as the program enters syscall.Write. The finalizer may run at that moment, closing p.d, causing syscall.Write to fail because it is writing to a closed file descriptor (or, worse, to an entirely different file descriptor opened by a different goroutine). To avoid this problem, call runtime.KeepAlive(p) after the call to syscall.Write.</source>
          <target state="translated">例えば、pがファイル記述子dを含むos.Fileなどの構造体を指していて、pにはそのファイル記述子を閉じるファイナライザがあり、関数内でのpの最後の使用がsyscall.Write(p.d,buf,size)の呼び出しである場合、プログラムがsyscall.Writeに入ると同時にpは到達できなくなる可能性があります。その瞬間にファイナライザが実行されてp.dが閉じられ、閉じられたファイルディスクリプタ(最悪の場合、別のゴルーチンによって開かれた全く別のファイルディスクリプタ)に書き込んでいるために、syscall.Writeが失敗してしまうかもしれません。この問題を回避するには、syscall.Write.の呼び出しの後にruntime.KeepAlive(p)を呼び出してください。</target>
        </trans-unit>
        <trans-unit id="648df35862f0618dac59c24e1f3c2197d967fa5c" translate="yes" xml:space="preserve">
          <source>For example, pre-submit checks that use this package directly would behave differently depending on what Go version each developer uses, causing the check to be inherently fragile.</source>
          <target state="translated">例えば、このパッケージを直接使用するプリサブミットチェックは、各開発者が使用する Go のバージョンによって挙動が異なり、チェックが本質的に壊れやすいものになってしまいます。</target>
        </trans-unit>
        <trans-unit id="b70afa30fe71b5984e96c509da8feab3dc9a6c66" translate="yes" xml:space="preserve">
          <source>For example, this code always computes a positive elapsed time of approximately 20 milliseconds, even if the wall clock is changed during the operation being timed:</source>
          <target state="translated">例えば、このコードは、計時中に壁のクロックが変更された場合でも、常に約20ミリ秒の正の経過時間を計算します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="b900be25452bfa919448d61bc68d11256350e2d5" translate="yes" xml:space="preserve">
          <source>For floating-point values, width sets the minimum width of the field and precision sets the number of places after the decimal, if appropriate, except that for %g/%G precision sets the maximum number of significant digits (trailing zeros are removed). For example, given 12.345 the format %6.3f prints 12.345 while %.3g prints 12.3. The default precision for %e, %f and %#g is 6; for %g it is the smallest number of digits necessary to identify the value uniquely.</source>
          <target state="translated">浮動小数点値の場合、width はフィールドの最小幅を設定し、precision は必要に応じて小数点以下の桁数を設定します。例えば、12.345 と指定すると、フォーマット %6.3f は 12.345 と表示され、%.3g は 12.3 と表示されます。e、%f、および %#g の既定の精度は 6 で、%g の場合は、値を一意に識別するのに必要な最小の桁数です。</target>
        </trans-unit>
        <trans-unit id="8acb9c872d25848ac32729a8857f27d0fe460ece" translate="yes" xml:space="preserve">
          <source>For forward compatibility, users that retrieve a Header from Reader.Next, mutate it in some ways, and then pass it back to Writer.WriteHeader should do so by creating a new Header and copying the fields that they are interested in preserving.</source>
          <target state="translated">前方互換性のために、Reader.NextからHeaderを取得し、それを何らかの方法で変異させてからWriter.WriteHeaderに渡す場合は、新しいHeaderを作成し、保存したいフィールドをコピーすることで行う必要があります。</target>
        </trans-unit>
        <trans-unit id="e4409a51b04b7b882dd788481aa8d78b52daf5f6" translate="yes" xml:space="preserve">
          <source>For higher-level HTTP client support (such as handling of cookies and redirects), see Get, Post, and the Client type.</source>
          <target state="translated">より高度な HTTP クライアントのサポート (クッキーやリダイレクトの処理など)については、 Get,Post,Client type を参照してください。</target>
        </trans-unit>
        <trans-unit id="ccf573cb88fa50261bc0cb844250e5c546113d3a" translate="yes" xml:space="preserve">
          <source>For incoming server requests, the context is canceled when the client's connection closes, the request is canceled (with HTTP/2), or when the ServeHTTP method returns.</source>
          <target state="translated">着信サーバーリクエストの場合、クライアントの接続が閉じたとき、リクエストがキャンセルされたとき (HTTP/2 の場合)、または ServeHTTP メソッドが戻ってきたときにコンテキストがキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="fbc897ff158a8e45243f9b229fc5329d56c63ca4" translate="yes" xml:space="preserve">
          <source>For information about UTF-8 strings in Go, see &lt;a href=&quot;https://blog.golang.org/strings&quot;&gt;https://blog.golang.org/strings&lt;/a&gt;.</source>
          <target state="translated">GoのUTF-8文字列の詳細については、&lt;a href=&quot;https://blog.golang.org/strings&quot;&gt;https：//blog.golang.org/stringsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="63fe9b03e1c707dfe354f7496b7b0ea1047361fe" translate="yes" xml:space="preserve">
          <source>For instance, NewInt(x) returns an *Int set to the value of the int64 argument x, NewRat(a, b) returns a *Rat set to the fraction a/b where a and b are int64 values, and NewFloat(f) returns a *Float initialized to the float64 argument f. More flexibility is provided with explicit setters, for instance:</source>
          <target state="translated">例えば、NewInt(x)は int64 引数 x の値に設定された *Int を返し、NewRat(a,b)は a と b が int64 の値である分数 a/b に設定された *Rat を返し、NewFloat(f)は float64 引数 f に初期化された *Float を返します。明示的なセッターなどを使用すると、より柔軟性が増します。</target>
        </trans-unit>
        <trans-unit id="ef36fa9bc6685ceb9dbf97a5a5da2cffd6025d4b" translate="yes" xml:space="preserve">
          <source>For instance, given a slice data sorted in ascending order, the call Search(len(data), func(i int) bool { return data[i] &amp;gt;= 23 }) returns the smallest index i such that data[i] &amp;gt;= 23. If the caller wants to find whether 23 is in the slice, it must test data[i] == 23 separately.</source>
          <target state="translated">たとえば、昇順で並べ替えられたスライスデータを指定して、Search（len（data）、func（i int）bool {return data [i]&amp;gt; = 23}）を呼び出すと、data [i]&amp;gt; =23。発信者が23がスライス内にあるかどうかを確認する場合は、data [i] == 23を個別にテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="c7dfa4cd456b849ced74b774ac752b76885a540c" translate="yes" xml:space="preserve">
          <source>For instance, the arguments for (*Int).Add are named x and y, and because the receiver specifies the result destination, it is called z:</source>
          <target state="translated">例えば、(*Int).Add の引数には x,y という名前が付けられており、受信機は結果の送信先を指定するので z という名前になります。</target>
        </trans-unit>
        <trans-unit id="8f07f1d3d8e7f6b87f995e34e12a6b2b7256d6aa" translate="yes" xml:space="preserve">
          <source>For instance, when executing the template whose source is</source>
          <target state="translated">例えば、ソースが</target>
        </trans-unit>
        <trans-unit id="d7e0bab67441455c755b896ba0e2e68a1eb05350" translate="yes" xml:space="preserve">
          <source>For layouts specifying the two-digit year 06, a value NN &amp;gt;= 69 will be treated as 19NN and a value NN &amp;lt; 69 will be treated as 20NN.</source>
          <target state="translated">2桁の年06を指定するレイアウトの場合、値NN&amp;gt; = 69は19NNとして扱われ、値NN &amp;lt;69は20NNとして扱われます。</target>
        </trans-unit>
        <trans-unit id="c9e462fa1286e4f10051fc8442af5645f8b6918a" translate="yes" xml:space="preserve">
          <source>For more details on the precise definition of the metric key's path and unit formats, see the documentation of the Name field of the Description struct.</source>
          <target state="translated">メトリック・キーのパスと単位のフォーマットの正確な定義については、Description構造体のNameフィールドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6018681f8b36b5a67b809b220861a7e3eea4cf91" translate="yes" xml:space="preserve">
          <source>For more information about pprof, see &lt;a href=&quot;https://github.com/google/pprof/blob/master/doc/README.md&quot;&gt;https://github.com/google/pprof/blob/master/doc/README.md&lt;/a&gt;.</source>
          <target state="translated">pprofの詳細については、&lt;a href=&quot;https://github.com/google/pprof/blob/master/doc/README.md&quot;&gt;https：&lt;/a&gt; //github.com/google/pprof/blob/master/doc/README.mdを参照してください。</target>
        </trans-unit>
        <trans-unit id="d996431a64b6bd8bf9d3bd0300d40b96d810b5b1" translate="yes" xml:space="preserve">
          <source>For more tolerant parsing, Scan will return a valid token if possible even if a syntax error was encountered. Thus, even if the resulting token sequence contains no illegal tokens, a client may not assume that no error occurred. Instead it must check the scanner's ErrorCount or the number of calls of the error handler, if there was one installed.</source>
          <target state="translated">より寛容な構文解析のために、構文エラーが発生した場合でも、可能であれば有効なトークンを返します。そのため、結果のトークンに不正なトークンが含まれていなくても、クライアントはエラーが発生していないとは考えられません。その代わりに、スキャナのErrorCountやエラーハンドラがインストールされている場合は、その呼び出し回数をチェックしなければなりません。</target>
        </trans-unit>
        <trans-unit id="ee92c8f279c1f6e92caa92b507d20eceb3f7bf2a" translate="yes" xml:space="preserve">
          <source>For most Unix systems, this package has two internal implementations of resolving user and group ids to names. One is written in pure Go and parses /etc/passwd and /etc/group. The other is cgo-based and relies on the standard C library (libc) routines such as getpwuid_r and getgrnam_r.</source>
          <target state="translated">ほとんどの Unix システムでは、本パッケージはユーザとグループの ID を名前に解決する 2 つの内部実装を持っています。一つは純粋な Go で書かれており、/etc/passwd と /etc/group を解析します。もう一つは cgo ベースで、getpwuid_r や getgrnam_r のような標準 C ライブラリ (libc)ルーチンに依存しています。</target>
        </trans-unit>
        <trans-unit id="c4cdb94c601192f951b8e3c2e58421475088397d" translate="yes" xml:space="preserve">
          <source>For most values, width is the minimum number of runes to output, padding the formatted form with spaces if necessary.</source>
          <target state="translated">ほとんどの値では、widthは出力するルーンの最小数であり、必要に応じて空白でフォーマットされたフォームをパディングする。</target>
        </trans-unit>
        <trans-unit id="515255bc358ef4ff5aa5412e1b66dcc8c403a8d9" translate="yes" xml:space="preserve">
          <source>For non-interface types V, or if static is set, V implements T if all methods of T are present in V. Otherwise (V is an interface and static is not set), MissingMethod only checks that methods of T which are also present in V have matching types (e.g., for a type assertion x.(T) where x is of interface type V).</source>
          <target state="translated">それ以外の場合(Vがインターフェイスであり、staticが設定されていない場合)、MissingMethodは、Vにも存在するTのメソッドが一致する型を持っているかどうかだけをチェックします(例えば、型アサーションx.(T)の場合、xはインターフェイス型Vの型です)。</target>
        </trans-unit>
        <trans-unit id="b71be130422309f072d39771550fbade7a681c88" translate="yes" xml:space="preserve">
          <source>For other HTTP methods, or when the Content-Type is not application/x-www-form-urlencoded, the request Body is not read, and r.PostForm is initialized to a non-nil, empty value.</source>
          <target state="translated">他のHTTPメソッドや、Content-Typeがapplication/x-www-form-urlencodedでない場合、リクエストBodyは読み込まれず、r.PostFormはnil以外の空の値に初期化されます。</target>
        </trans-unit>
        <trans-unit id="90fd7feae6eaa72525957265644b35d2d7178aab" translate="yes" xml:space="preserve">
          <source>For outgoing client request, the context controls the entire lifetime of a request and its response: obtaining a connection, sending the request, and reading the response headers and body.</source>
          <target state="translated">送信クライアントリクエストの場合、コンテキストはリクエストとその応答の全ライフサイクルを制御します:接続の取得、リクエストの送信、応答ヘッダーとボディの読み込み。</target>
        </trans-unit>
        <trans-unit id="d9dd41b387dea5f2e387ef2638e22692d5781ada" translate="yes" xml:space="preserve">
          <source>For outgoing client requests, the context controls cancellation.</source>
          <target state="translated">送信クライアントリクエストの場合、コンテキストはキャンセルを制御します。</target>
        </trans-unit>
        <trans-unit id="a001fc47d27546732ba34a6c50953e3947ee9592" translate="yes" xml:space="preserve">
          <source>For parsing this time format, see ParseTime.</source>
          <target state="translated">この時間フォーマットの解析については、「ParseTime」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f71ccb724292b936b826fde518652933240dfacc" translate="yes" xml:space="preserve">
          <source>For portability, the status code should be in the range [0, 125].</source>
          <target state="translated">移植性を考慮して、ステータスコードは[0,125]の範囲にする必要があります。</target>
        </trans-unit>
        <trans-unit id="bf654bcdb4217ef6a979d8f651f736b1fbda2ae7" translate="yes" xml:space="preserve">
          <source>For random numbers suitable for security-sensitive work, see the crypto/rand package.</source>
          <target state="translated">セキュリティに配慮した作業に適した乱数については、 crypto/rand パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="8dac1d0bb1e2323543dc0dee447715c7804fe438" translate="yes" xml:space="preserve">
          <source>For scanning into *bool, the source may be true, false, 1, 0, or string inputs parseable by strconv.ParseBool.</source>
          <target state="translated">ブールにスキャンする場合、ソースは真、偽、1、0、または strconv.ParseBool で解析可能な文字列入力となります。</target>
        </trans-unit>
        <trans-unit id="22a8f63617a1059c9b07e1b34be114b05733ec0f" translate="yes" xml:space="preserve">
          <source>For simpler multi-way equality tests, eq (only) accepts two or more arguments and compares the second and subsequent to the first, returning in effect</source>
          <target state="translated">より単純な多元的な平等性テストの場合、eq (only)は 2 つ以上の引数を受け取り、2 番目以降を 1 番目と比較して、実質的には</target>
        </trans-unit>
        <trans-unit id="b0a480a0eda63e237a87664c806578f92d694410" translate="yes" xml:space="preserve">
          <source>For simplicity in setup, the connection is defined to understand these types a priori, as well as the basic gob types int, uint, etc. Their ids are:</source>
          <target state="translated">セットアップを簡単にするために、基本的な gob 型である int,uint などと同様に、これらの型を事前に理解するために接続が定義されています。それらの ID は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2a1206bb6c7f79687004103bffb38cbee66ebc60" translate="yes" xml:space="preserve">
          <source>For some arguments, such as a simple array expression, the result can be a constant. See the Go language specification's &quot;Length and capacity&quot; section for details.</source>
          <target state="translated">単純な配列式などの一部の引数では、結果は定数になります。詳細は、Go言語仕様の「長さと容量」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b73ee93bdb118cfdcf76b1431924d083213a9b9c" translate="yes" xml:space="preserve">
          <source>For some arguments, such as a string literal or a simple array expression, the result can be a constant. See the Go language specification's &quot;Length and capacity&quot; section for details.</source>
          <target state="translated">文字列リテラルや単純な配列式などの一部の引数では、結果は定数になります。詳細は、Go言語仕様の「長さと容量」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6fd5303b38861cc1f75ea4005c27f0d0e4bc73ba" translate="yes" xml:space="preserve">
          <source>For strings, byte slices and byte arrays, however, precision limits the length of the input to be formatted (not the size of the output), truncating if necessary. Normally it is measured in runes, but for these types when formatted with the %x or %X format it is measured in bytes.</source>
          <target state="translated">しかし、文字列、バイトスライス、バイト配列の場合、精度はフォーマットされる入力の長さを制限し(出力のサイズではなく)、必要に応じて切り捨てます。通常、精度はルーンで測定されますが、これらのタイプの場合、%xまたは%Xフォーマットでフォーマットされているときは、バイトで測定されます。</target>
        </trans-unit>
        <trans-unit id="751d670356e91a449ec7c80c4156cc58a03922ea" translate="yes" xml:space="preserve">
          <source>For such flags, the default value is just the initial value of the variable.</source>
          <target state="translated">このようなフラグの場合、デフォルト値は変数の初期値だけです。</target>
        </trans-unit>
        <trans-unit id="fe319d30e4ff1d3bb9c9679e1d41b020cb9fc422" translate="yes" xml:space="preserve">
          <source>For testing: clients can set this flag to force creation of IPv6 sockets to return EAFNOSUPPORT.</source>
          <target state="translated">テストのために:クライアントはこのフラグを設定して、EAFNOSUPPORTを返すためにIPv6ソケットの作成を強制的に行うことができます。</target>
        </trans-unit>
        <trans-unit id="0d0e9615cbad5d104943c88a1e426bb41d0d3626" translate="yes" xml:space="preserve">
          <source>For the compiler to recognize this pattern, the conversion must appear in the argument list:</source>
          <target state="translated">コンパイラがこのパターンを認識するためには、変換は引数リストに現れなければなりません。</target>
        </trans-unit>
        <trans-unit id="13732a80c7c6067fbd8ddcc6a6ec2963b831f009" translate="yes" xml:space="preserve">
          <source>For the most part, LineTable's methods should be treated as an internal detail of the package; callers should use the methods on Table instead.</source>
          <target state="translated">ほとんどの場合、LineTable のメソッドはパッケージの内部詳細として扱われるべきです。</target>
        </trans-unit>
        <trans-unit id="82aa2e5faa1102c849b424650d24e3f7def76f8e" translate="yes" xml:space="preserve">
          <source>For the most part, this package follows the syntax as specified by RFC 5322 and extended by RFC 6532. Notable divergences:</source>
          <target state="translated">ほとんどの場合、本パッケージは RFC 5322 で指定され、RFC 6532 で拡張された構文に従っています。注目すべき相違点。</target>
        </trans-unit>
        <trans-unit id="9dbc53494237ff152fc67f06045073fe509d54b4" translate="yes" xml:space="preserve">
          <source>For the power-of-two exponent formats, the mantissa is printed in normalized form:</source>
          <target state="translated">指数の2乗形式の場合、仮数は正規化された形式で印刷されます。</target>
        </trans-unit>
        <trans-unit id="f64016515259f77234a6cb253ce7855821350f37" translate="yes" xml:space="preserve">
          <source>For the synchronous signals and SIGPIPE, the Go runtime will install a signal handler. It will save any existing signal handler. If a synchronous signal arrives while executing non-Go code, the Go runtime will invoke the existing signal handler instead of the Go signal handler.</source>
          <target state="translated">同期シグナルとSIGPIPEについては、Goランタイムがシグナルハンドラをインストールします。既存のシグナルハンドラはすべて保存されます。Go 以外のコードを実行中に同期シグナルが到着した場合、Go ランタイムは Go シグナルハンドラの代わりに既存のシグナルハンドラを呼び出します。</target>
        </trans-unit>
        <trans-unit id="cee851057097c0db5b5b8a9c0d45d60cedf064a6" translate="yes" xml:space="preserve">
          <source>For these internal escaping functions, if an action pipeline evaluates to a nil interface value, it is treated as though it were an empty string.</source>
          <target state="translated">これらの内部エスケープ関数では、アクションパイプラインが nil インターフェイス値を評価した場合、それは空の文字列であるかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="94cdbab58de221c0845a1f0bccdc6ab6b9dfee7c" translate="yes" xml:space="preserve">
          <source>For this trimming, the definition of white space characters is the same as in Go: space, horizontal tab, carriage return, and newline.</source>
          <target state="translated">このトリミングでは、空白文字の定義は囲碁と同じで、スペース、水平タブ、キャリッジリターン、改行です。</target>
        </trans-unit>
        <trans-unit id="c4dda3b24b75ceb8fb66edf8e6d50d204c1750ea" translate="yes" xml:space="preserve">
          <source>For unrecognized or vendor-defined attributes, Class may be ClassUnknown.</source>
          <target state="translated">認識されていない属性やベンダ定義の属性の場合、ClassはClassUnknownになることがあります。</target>
        </trans-unit>
        <trans-unit id="a2c58c0bacd7ac1887ab982a2597ef55f18dc028" translate="yes" xml:space="preserve">
          <source>For usage examples, see the wiki page at &lt;a href=&quot;https://golang.org/s/sqlwiki&quot;&gt;https://golang.org/s/sqlwiki&lt;/a&gt;.</source>
          <target state="translated">使用例については、&lt;a href=&quot;https://golang.org/s/sqlwiki&quot;&gt;https：&lt;/a&gt; //golang.org/s/sqlwikiのwikiページを参照してください。</target>
        </trans-unit>
        <trans-unit id="988918abc4e75847a40cae9d31b2ff0b26774a56" translate="yes" xml:space="preserve">
          <source>ForCompiler returns an Importer for importing from installed packages for the compilers &quot;gc&quot; and &quot;gccgo&quot;, or for importing directly from the source if the compiler argument is &quot;source&quot;. In this latter case, importing may fail under circumstances where the exported API is not entirely defined in pure Go source code (if the package API depends on cgo-defined entities, the type checker won't have access to those).</source>
          <target state="translated">ForCompiler は、コンパイラ &quot;gc&quot; および &quot;gccgo&quot; のインストールされたパッケージからインポートするための Importer を返し、コンパイラの引数が &quot;source&quot; の場合はソースから直接インポートします。後者の場合、エクスポートされた API が純粋な Go ソースコードで完全に定義されていない状況では、インポートに失敗する可能性があります (パッケージ API が cgo 定義のエンティティに依存している場合、型チェッカーはそれらにアクセスできません)。</target>
        </trans-unit>
        <trans-unit id="133285841cd925c282a101cb331b225c1c71812e" translate="yes" xml:space="preserve">
          <source>ForLabels invokes f with each label set on the context. The function f should return true to continue iteration or false to stop iteration early.</source>
          <target state="translated">ForLabels は,コンテキスト上に設定されたラベルごとに f を呼び出します.関数 f は、反復処理を継続する場合は true を返し、反復処理を早期に停止する場合は false を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="353aeb4085eb053c5afffba4c97380c4860aca38" translate="yes" xml:space="preserve">
          <source>Form is a parsed multipart form. Its File parts are stored either in memory or on disk, and are accessible via the *FileHeader's Open method. Its Value parts are stored as strings. Both are keyed by field name.</source>
          <target state="translated">Form は解析されたマルチパートフォームです。ファイル部分はメモリまたはディスクに保存され、*FileHeader の Open メソッドでアクセスできます。値の部分は文字列として保存されます。両方ともフィールド名でキーが設定されています。</target>
        </trans-unit>
        <trans-unit id="eccde56e16564dc7c7df2c5cc1796440a15f9401" translate="yes" xml:space="preserve">
          <source>FormDataContentType returns the Content-Type for an HTTP multipart/form-data with this Writer's Boundary.</source>
          <target state="translated">FormDataContentTypeは、このWriter's Boundaryを持つHTTPマルチパート/フォームデータのContent-Typeを返します。</target>
        </trans-unit>
        <trans-unit id="a49e5a35587aa21155c47ca684122af3589d1687" translate="yes" xml:space="preserve">
          <source>FormFile returns the first file for the provided form key. FormFile calls ParseMultipartForm and ParseForm if necessary.</source>
          <target state="translated">FormFile は、提供されたフォームキーの最初のファイルを返します。FormFile は必要に応じて ParseMultipartForm と ParseForm を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5d5c015330e69759a40946c508bd098ecc8416e4" translate="yes" xml:space="preserve">
          <source>FormName returns the name parameter if p has a Content-Disposition of type &quot;form-data&quot;. Otherwise it returns the empty string.</source>
          <target state="translated">formName は、p が &quot;form-data&quot; 型の Content-Disposition を持っている場合、name パラメータを返します。それ以外の場合は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="445b64c2c00e9bf0c6abebdbd962d04b7f9f105c" translate="yes" xml:space="preserve">
          <source>FormValue returns the first value for the named component of the query. POST and PUT body parameters take precedence over URL query string values. FormValue calls ParseMultipartForm and ParseForm if necessary and ignores any errors returned by these functions. If key is not present, FormValue returns the empty string. To access multiple values of the same key, call ParseForm and then inspect Request.Form directly.</source>
          <target state="translated">FormValueは、クエリの名前付きコンポーネントの最初の値を返します。POST および PUT のボディパラメータは URL クエリ文字列の値よりも優先されます。FormValueは必要に応じてParseMultipartFormとParseFormを呼び出し、これらの関数から返されるエラーは無視されます。キーが存在しない場合、FormValueは空の文字列を返します。同じキーの複数の値にアクセスするには、ParseForm を呼び出してから Request.Form を直接検査します。</target>
        </trans-unit>
        <trans-unit id="b90d813e4920205a13e7a3e3ea46b1033f09615e" translate="yes" xml:space="preserve">
          <source>Format errors:</source>
          <target state="translated">フォーマットエラー。</target>
        </trans-unit>
        <trans-unit id="bd81fbee8cc623aef03682c00bd263e80dddfcaa" translate="yes" xml:space="preserve">
          <source>Format implements fmt.Formatter. It accepts all the regular formats for floating-point numbers ('b', 'e', 'E', 'f', 'F', 'g', 'G', 'x') as well as 'p' and 'v'. See (*Float).Text for the interpretation of 'p'. The 'v' format is handled like 'g'. Format also supports specification of the minimum precision in digits, the output field width, as well as the format flags '+' and ' ' for sign control, '0' for space or zero padding, and '-' for left or right justification. See the fmt package for details.</source>
          <target state="translated">Format は fmt.Formatter を実装しています。浮動小数点数('b','e','E','f','F','g','G','x')や'p'と'v'のすべての正規フォーマットを受け付けます。p' の解釈については (*Float).Text を参照してください。v' フォーマットは 'g' と同様に扱われます。書式は、最小精度の桁数、出力フィールドの幅、符号制御のための書式フラグ '+' と ' '、スペースやゼロパディングのための '0'、左揃えや右揃えのための '-' の指定もサポートしています。詳細はfmtパッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="ddca00e8215628107f30d61b04b8094c67090fc1" translate="yes" xml:space="preserve">
          <source>Format implements fmt.Formatter. It accepts the formats 'b' (binary), 'o' (octal with 0 prefix), 'O' (octal with 0o prefix), 'd' (decimal), 'x' (lowercase hexadecimal), and 'X' (uppercase hexadecimal). Also supported are the full suite of package fmt's format flags for integral types, including '+' and ' ' for sign control, '#' for leading zero in octal and for hexadecimal, a leading &quot;0x&quot; or &quot;0X&quot; for &quot;%#x&quot; and &quot;%#X&quot; respectively, specification of minimum digits precision, output field width, space or zero padding, and '-' for left or right justification.</source>
          <target state="translated">Format は fmt.Formatter を実装しています。b' (2 進数)、'o' (接頭辞が 0 の 8 進数)、'O' (接頭辞が 0 の 8 進数)、'd' (10 進数)、'x' (小文字の 16 進数)、および 'X' (大文字の 16 進数)のフォーマットを受け付けます。また、符号制御のための '+' と ' '、8 進数と 16 進数の先頭のゼロのための '#'、&quot;%#x&quot; と &quot;%#X&quot; のための先頭の &quot;0x&quot; または &quot;0X&quot;、最小桁精度、出力フィールド幅、スペースまたはゼロパディングの指定、左または右揃えのための '-' を含む、積分型のためのパッケージ fmt のフォーマットフラグの完全なスイートもサポートされています。</target>
        </trans-unit>
        <trans-unit id="81a5476108fadb465e67c178e260599d04ddc2e8" translate="yes" xml:space="preserve">
          <source>Format represents the tar archive format.</source>
          <target state="translated">Format は tar アーカイブのフォーマットを表します。</target>
        </trans-unit>
        <trans-unit id="8d4885fbdac6d0d14accf79b985b4ce78e6bdd62" translate="yes" xml:space="preserve">
          <source>Format returns a textual representation of the time value formatted according to layout, which defines the format by showing how the reference time, defined to be</source>
          <target state="translated">フォーマットは、レイアウトに従ってフォーマットされた時間値のテキスト表現を返します。</target>
        </trans-unit>
        <trans-unit id="b3ee515426820c27b536513d4c839dfeda89b51d" translate="yes" xml:space="preserve">
          <source>FormatBool</source>
          <target state="translated">FormatBool</target>
        </trans-unit>
        <trans-unit id="1b75ed131650db00babc41765f3ab4d40a495482" translate="yes" xml:space="preserve">
          <source>FormatBool returns &quot;true&quot; or &quot;false&quot; according to the value of b.</source>
          <target state="translated">FormatBoolは、bの値に応じて &quot;true &quot;または &quot;false &quot;を返します。</target>
        </trans-unit>
        <trans-unit id="6afd52cbbbdc2288edb941b965e52c2fc0f3f529" translate="yes" xml:space="preserve">
          <source>FormatBool, FormatFloat, FormatInt, and FormatUint convert values to strings:</source>
          <target state="translated">FormatBool、FormatFloat、FormatInt、およびFormatUintは、値を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="7cde6838cd6d9db48f444c3319801df0ed449cfb" translate="yes" xml:space="preserve">
          <source>FormatComplex converts the complex number c to a string of the form (a+bi) where a and b are the real and imaginary parts, formatted according to the format fmt and precision prec.</source>
          <target state="translated">FormatComplex は、複素数 c を (a+bi)形式の文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="cf02981ef6c41fa3e9a421259a94865e8c2df157" translate="yes" xml:space="preserve">
          <source>FormatError is returned by some operations if the data does not have the correct format for an object file.</source>
          <target state="translated">FormatErrorは、データがオブジェクトファイルに対して正しいフォーマットを持っていない場合、いくつかの操作によって返されます。</target>
        </trans-unit>
        <trans-unit id="9be4c97132e0f61e257dba73681e0455cf421f26" translate="yes" xml:space="preserve">
          <source>FormatError is unused. The type is retained for compatibility.</source>
          <target state="translated">FormatError は使用されません。互換性のために型は保持されます。</target>
        </trans-unit>
        <trans-unit id="66155c8335bf85f47e7201829386a88e599875d5" translate="yes" xml:space="preserve">
          <source>FormatFloat</source>
          <target state="translated">FormatFloat</target>
        </trans-unit>
        <trans-unit id="8ab806a123a3e3bc36a09fdd9698930a4aafbfb9" translate="yes" xml:space="preserve">
          <source>FormatFloat converts the floating-point number f to a string, according to the format fmt and precision prec. It rounds the result assuming that the original was obtained from a floating-point value of bitSize bits (32 for float32, 64 for float64).</source>
          <target state="translated">FormatFloat は、浮動小数点数 f をフォーマット fmt と精度 prec に従って文字列に変換します。元の値が bitSizeビット(float32なら32、float64なら64)の浮動小数点値から得られたものであると仮定して、結果を丸めます。</target>
        </trans-unit>
        <trans-unit id="54acac612d12c84fbb587187170a9d2f5002e9e1" translate="yes" xml:space="preserve">
          <source>FormatInt</source>
          <target state="translated">FormatInt</target>
        </trans-unit>
        <trans-unit id="ac942d8c471010cc2511b6465b29a4a4eaf7e487" translate="yes" xml:space="preserve">
          <source>FormatInt returns the string representation of i in the given base, for 2 &amp;lt;= base &amp;lt;= 36. The result uses the lower-case letters 'a' to 'z' for digit values &amp;gt;= 10.</source>
          <target state="translated">FormatIntは、2 &amp;lt;= base &amp;lt;= 36の場合、指定されたbaseでiの文字列表現を返します。結果は、数字の値&amp;gt; = 10に小文字の「a」から「z」を使用します。</target>
        </trans-unit>
        <trans-unit id="7d726d8b9675ed9de10e3a267d41a3004b409192" translate="yes" xml:space="preserve">
          <source>FormatMediaType</source>
          <target state="translated">FormatMediaType</target>
        </trans-unit>
        <trans-unit id="7ffe85b478b1a8a795e300c5a2b13589a4aacd1b" translate="yes" xml:space="preserve">
          <source>FormatMediaType serializes mediatype t and the parameters param as a media type conforming to RFC 2045 and RFC 2616. The type and parameter names are written in lower-case. When any of the arguments result in a standard violation then FormatMediaType returns the empty string.</source>
          <target state="translated">FormatMediaType は mediatype t とパラメータ param を RFC 2045 および RFC 2616 に準拠したメディアタイプとしてシリアライズします。型名とパラメータ名は小文字で記述されます。引数のいずれかが標準違反となった場合、FormatMediaType は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="457b9a9d61506e909562e056e83daf32584b6e03" translate="yes" xml:space="preserve">
          <source>FormatUint</source>
          <target state="translated">FormatUint</target>
        </trans-unit>
        <trans-unit id="29e428f2dcc8699c0417730387a64fac7ddd1961" translate="yes" xml:space="preserve">
          <source>FormatUint returns the string representation of i in the given base, for 2 &amp;lt;= base &amp;lt;= 36. The result uses the lower-case letters 'a' to 'z' for digit values &amp;gt;= 10.</source>
          <target state="translated">FormatUintは、2 &amp;lt;= base &amp;lt;= 36の場合、指定されたbaseでiの文字列表現を返します。結果は、数字の値&amp;gt; = 10に小文字の「a」から「z」を使用します。</target>
        </trans-unit>
        <trans-unit id="5c8097315c949db11f3c54f81dd03fc38d2dca5c" translate="yes" xml:space="preserve">
          <source>Formatter is implemented by any value that has a Format method. The implementation controls how State and rune are interpreted, and may call Sprint(f) or Fprint(f) etc. to generate its output.</source>
          <target state="translated">Formatterは、Formatメソッドを持つ任意の値によって実装されます。この実装では、Stateとruneがどのように解釈されるかを制御し、Sprint(f)やFprint(f)などを呼び出して出力を生成することができます。</target>
        </trans-unit>
        <trans-unit id="74de65e787a3b1e89f96cc3e3b260c1d5a19f78c" translate="yes" xml:space="preserve">
          <source>Formatter is the interface implemented by values with a custom formatter. The implementation of Format may call Sprint(f) or Fprint(f) etc. to generate its output.</source>
          <target state="translated">Formatterは、カスタムフォーマッタを持つ値によって実装されるインターフェイスです。Formatの実装は、Sprint(f)やFprint(f)などを呼び出して出力を生成することができます。</target>
        </trans-unit>
        <trans-unit id="d3a818c703590da441ab8fb9d8bac8b6144c0764" translate="yes" xml:space="preserve">
          <source>Formatting can be controlled with these flags.</source>
          <target state="translated">これらのフラグで書式設定を制御することができます。</target>
        </trans-unit>
        <trans-unit id="75a6bd1d5df471e18e5ef09488e671afbb943a27" translate="yes" xml:space="preserve">
          <source>Fprint</source>
          <target state="translated">Fprint</target>
        </trans-unit>
        <trans-unit id="8c8522f1e4d59e7911ef9e37ddbccae99dbf77c6" translate="yes" xml:space="preserve">
          <source>Fprint &quot;pretty-prints&quot; an AST node to output for a given configuration cfg. Position information is interpreted relative to the file set fset. The node type must be *ast.File, *CommentedNode, []ast.Decl, []ast.Stmt, or assignment-compatible to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt.</source>
          <target state="translated">Fprintは、指定された設定fgに対してASTノードを &quot;pretty-prints &quot;して出力します。位置情報はファイルセットfsetを基準にして解釈されます。ノードの型は、*ast.File,*CommentedNode,[]ast.Decl,[]ast.Stmt,または ast.Expr,ast.Decl,ast.Spec,ast.Stmtと代入互換性のあるものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="f8a539386d013173d33a590058d75eefbdb15fa6" translate="yes" xml:space="preserve">
          <source>Fprint &quot;pretty-prints&quot; an AST node to output. It calls Config.Fprint with default settings. Note that gofmt uses tabs for indentation but spaces for alignment; use format.Node (package go/format) for output that matches gofmt.</source>
          <target state="translated">FprintはASTノードをプリティプリントして出力します。デフォルトの設定でConfig.Fprintを呼び出します。gofmtはインデントにはタブを使いますが、整列にはスペースを使うことに注意してください。</target>
        </trans-unit>
        <trans-unit id="104c28c9f2550f07e8ce3bfa8162280f3f8c80ca" translate="yes" xml:space="preserve">
          <source>Fprint formats using the default formats for its operands and writes to w. Spaces are added between operands when neither is a string. It returns the number of bytes written and any write error encountered.</source>
          <target state="translated">Fprintは、オペランドのデフォルトのフォーマットを使用してフォーマットし、wに書き込みます。書き込まれたバイト数と書き込みエラーを返します。</target>
        </trans-unit>
        <trans-unit id="6a536bd9e7bf91ae60cda20d0ea5db515bbd6c7b" translate="yes" xml:space="preserve">
          <source>Fprint prints the (sub-)tree starting at AST node x to w. If fset != nil, position information is interpreted relative to that file set. Otherwise positions are printed as integer values (file set specific offsets).</source>
          <target state="translated">Fprintは,ASTノードxからwまでの(サブ)木を印刷します.fset !=nilの場合,位置情報はそのファイルセットからの相対的なものとして解釈されます.そうでなければ,位置情報は整数値(ファイルセット固有のオフセット)で表示されます.</target>
        </trans-unit>
        <trans-unit id="d20e1fe41e4983b3d1227303d39b1a75b7115f30" translate="yes" xml:space="preserve">
          <source>Fprintf</source>
          <target state="translated">Fprintf</target>
        </trans-unit>
        <trans-unit id="a13c0d787117a7941cdce4981a12d040db7f0953" translate="yes" xml:space="preserve">
          <source>Fprintf formats according to a format specifier and writes to w. It returns the number of bytes written and any write error encountered.</source>
          <target state="translated">Fprintf はフォーマット指定子に従ってフォーマットを行い、w に書き込みます。</target>
        </trans-unit>
        <trans-unit id="46197102442051b0256d5e8d44d3fa71b3e0ca3a" translate="yes" xml:space="preserve">
          <source>Fprintln</source>
          <target state="translated">Fprintln</target>
        </trans-unit>
        <trans-unit id="b390d66055f3fb09a9893ca4c02d4466e93e9f7e" translate="yes" xml:space="preserve">
          <source>Fprintln formats using the default formats for its operands and writes to w. Spaces are always added between operands and a newline is appended. It returns the number of bytes written and any write error encountered.</source>
          <target state="translated">Fprintlnはそのオペランドのデフォルトのフォーマットを使用してフォーマットし、wに書き込みます。書き込まれたバイト数と、発生した書き込みエラーを返します。</target>
        </trans-unit>
        <trans-unit id="c52284236b3cbc2d437f96673b062717eea95c7a" translate="yes" xml:space="preserve">
          <source>Frame is the information returned by Frames for each call frame.</source>
          <target state="translated">Frameは、各呼出フレームに対してFramesが返す情報です。</target>
        </trans-unit>
        <trans-unit id="e3e7a3833d19706ebf33b2c3baf8e05deeed7bca" translate="yes" xml:space="preserve">
          <source>Frames</source>
          <target state="translated">Frames</target>
        </trans-unit>
        <trans-unit id="6a32e149e9d6773e4f6967f48bf708bb90588f99" translate="yes" xml:space="preserve">
          <source>Frames may be used to get function/file/line information for a slice of PC values returned by Callers.</source>
          <target state="translated">フレームは、Callers が返す PC 値のスライスの関数/ファイル/行情報を取得するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="971e42ae8bcc68c1d3c0b0b0f45fd394dc7d0afe" translate="yes" xml:space="preserve">
          <source>FreeOSMemory forces a garbage collection followed by an attempt to return as much memory to the operating system as possible. (Even if this is not called, the runtime gradually returns memory to the operating system in a background task.)</source>
          <target state="translated">FreeOSMemoryは、可能な限り多くのメモリをオペレーティングシステムに戻そうとする試みに続いて、ガベージコレクションを強制的に行います。(これが呼ばれなくても、ランタイムはバックグラウンドタスクで徐々にメモリをオペレーティングシステムに返します)。</target>
        </trans-unit>
        <trans-unit id="2d6c189d92419208a8893cd5a97e05687d681927" translate="yes" xml:space="preserve">
          <source>Frexp breaks f into a normalized fraction and an integral power of two. It returns frac and exp satisfying f == frac &amp;times; 2**exp, with the absolute value of frac in the interval [&amp;frac12;, 1).</source>
          <target state="translated">Frexpはfを正規化された分数と2のべき乗に分割します。これはf == frac&amp;times;2 ** expを満たすfracとexpを返し、区間[&amp;frac12;、1）内のfracの絶対値を含みます。</target>
        </trans-unit>
        <trans-unit id="fa23c274e14dd5cc1e7fa9a8a9b29bf34200b44f" translate="yes" xml:space="preserve">
          <source>FromSlash returns the result of replacing each slash ('/') character in path with a separator character. Multiple slashes are replaced by multiple separators.</source>
          <target state="translated">FromSlash は、パス内の各スラッシュ ('/')文字をセパレータ文字に置き換えた結果を返します。複数のスラッシュは複数のセパレータで置き換えられます。</target>
        </trans-unit>
        <trans-unit id="164e0e9caa51bad7048b8f096c49d9b2c2ab5e89" translate="yes" xml:space="preserve">
          <source>Front returns the first element of list l or nil if the list is empty.</source>
          <target state="translated">Front はリスト l の最初の要素を返し、リストが空の場合は nil を返します。</target>
        </trans-unit>
        <trans-unit id="52c1852fe9f31cf9deb2025a2022f1fc079a5aee" translate="yes" xml:space="preserve">
          <source>Fscan scans text read from r, storing successive space-separated values into successive arguments. Newlines count as space. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why.</source>
          <target state="translated">Fscan は r から読み込んだテキストをスキャンし、スペースで区切られた値を連続した引数に格納します。改行はスペースとしてカウントされます。スキャンに成功した項目の数を返します。もしそれが引数の数よりも少ない場合は、 err がその理由を報告します。</target>
        </trans-unit>
        <trans-unit id="554810832552956da9a7da2eee0a73593dca23e7" translate="yes" xml:space="preserve">
          <source>Fscanf</source>
          <target state="translated">Fscanf</target>
        </trans-unit>
        <trans-unit id="8bd3b6e023a616305dbe6b056ba1a191e7adb603" translate="yes" xml:space="preserve">
          <source>Fscanf scans text read from r, storing successive space-separated values into successive arguments as determined by the format. It returns the number of items successfully parsed. Newlines in the input must match newlines in the format.</source>
          <target state="translated">Fscanf は r から読み込んだテキストをスキャンし、スペースで区切られた値をフォーマットで指定された連続した引数に格納します。解析に成功した項目の数を返します。入力の改行はフォーマットの改行と一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="24ce0d47eda270ec1be1d5faf6933fc84f496fc9" translate="yes" xml:space="preserve">
          <source>Fscanln</source>
          <target state="translated">Fscanln</target>
        </trans-unit>
        <trans-unit id="6ba607f7da03e13291dee0bc0511128cd6a13033" translate="yes" xml:space="preserve">
          <source>Fscanln is similar to Fscan, but stops scanning at a newline and after the final item there must be a newline or EOF.</source>
          <target state="translated">FscanlnはFscanと似ていますが、改行でスキャンを停止し、最後の項目の後に改行かEOFがなければなりません。</target>
        </trans-unit>
        <trans-unit id="18339496bb65d9199e22c7756d8d353de7e08bb1" translate="yes" xml:space="preserve">
          <source>FullName finds real name of symbol sym. Normally name is stored in sym.Name, but if it is longer then 8 characters, it is stored in COFF string table st instead.</source>
          <target state="translated">FullName は、シンボリックシンボルの実名を見つけます。通常、名前はsymfony.Nameに格納されますが、8文字以上の場合はCOFF文字列テーブルstに格納されます。</target>
        </trans-unit>
        <trans-unit id="7902524eb980d3f158a430d41566b78e54c0f4a8" translate="yes" xml:space="preserve">
          <source>FullName returns the package- or receiver-type-qualified name of function or method obj.</source>
          <target state="translated">FullName は、関数またはメソッド obj のパッケージまたはレシーバー型の修飾名を返します。</target>
        </trans-unit>
        <trans-unit id="b3483c701e937232d5e060b21f7fb965b230aa71" translate="yes" xml:space="preserve">
          <source>FullRune</source>
          <target state="translated">FullRune</target>
        </trans-unit>
        <trans-unit id="81aa0878662ea86cc86d82ed1ab7992029d672d9" translate="yes" xml:space="preserve">
          <source>FullRune reports whether the bytes in p begin with a full UTF-8 encoding of a rune. An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.</source>
          <target state="translated">FullRuneは、pのバイトがルーンの完全なUTF-8エンコーディングで始まるかどうかを報告します。無効なエンコーディングは、width-1エラールーンとして変換されるため、フルルーンとみなされます。</target>
        </trans-unit>
        <trans-unit id="e05115514df90c085c4af490f89158b561b0d92c" translate="yes" xml:space="preserve">
          <source>FullRuneInString</source>
          <target state="translated">FullRuneInString</target>
        </trans-unit>
        <trans-unit id="95812f07b4917317402c5d2167338a188da0ce79" translate="yes" xml:space="preserve">
          <source>FullRuneInString is like FullRune but its input is a string.</source>
          <target state="translated">FullRuneInStringはFullRuneと似ていますが、入力は文字列です。</target>
        </trans-unit>
        <trans-unit id="d14c246c1269ccb4359c67583949d6908348f108" translate="yes" xml:space="preserve">
          <source>Func</source>
          <target state="translated">Func</target>
        </trans-unit>
        <trans-unit id="6f03ac155657e14e643cdb5dc79319887df7f634" translate="yes" xml:space="preserve">
          <source>Func defines a flag with the specified name and usage string. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error.</source>
          <target state="translated">Funcは、指定された名前と使用文字列を持つフラグを定義します。フラグが表示されるたびに、フラグの値を指定してfnが呼び出されます。fnがnil以外のエラーを返した場合は、フラグの値の解析エラーとして扱われます。</target>
        </trans-unit>
        <trans-unit id="279955fd7d680432dfab90fbe069c9bfd8dc8495" translate="yes" xml:space="preserve">
          <source>Func implements Var by calling the function and formatting the returned value using JSON.</source>
          <target state="translated">Funcは、関数を呼び出し、JSONを使って戻り値をフォーマットすることでVarを実装しています。</target>
        </trans-unit>
        <trans-unit id="524a0d206f4cbf19e946f5d4ed3f42690d7a8676" translate="yes" xml:space="preserve">
          <source>Func is a wrapped Go function to be called by JavaScript.</source>
          <target state="translated">FuncはJavaScriptで呼び出されるGo関数をラップしたものです。</target>
        </trans-unit>
        <trans-unit id="9f43fd9d5faa1fad98bda7488e8199738c579a5f" translate="yes" xml:space="preserve">
          <source>Func is the documentation for a func declaration.</source>
          <target state="translated">Funcはfunc宣言のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="1428a5974ab9a5d9bb8050c81e92e9a085606a0b" translate="yes" xml:space="preserve">
          <source>Func values are deeply equal if both are nil; otherwise they are not deeply equal.</source>
          <target state="translated">Funcの値は、両方がnilの場合は深く等しく、そうでない場合は深く等しくありません。</target>
        </trans-unit>
        <trans-unit id="c6b073315fc317c2d847f10bda8f819f0b734264" translate="yes" xml:space="preserve">
          <source>Func.Release must be called to free up resources when the function will not be invoked any more.</source>
          <target state="translated">Func.Releaseは、関数がこれ以上呼び出されないときにリソースを解放するために呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="4b4c67efe336d8800eb50760aa412d1cd7318a96" translate="yes" xml:space="preserve">
          <source>Func.Release must be called to free up resources when the function will not be used any more.</source>
          <target state="translated">Func.Releaseは、関数がこれ以上使用されないときにリソースを解放するために呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="79c0844aa92a7c85df75b63db88d3ac85acf1947" translate="yes" xml:space="preserve">
          <source>FuncForPC returns a *Func describing the function that contains the given program counter address, or else nil.</source>
          <target state="translated">FuncForPCは、与えられたプログラム・カウンタ・アドレスを含む関数を記述した*Funcを返すか、そうでなければnilを返します。</target>
        </trans-unit>
        <trans-unit id="2f873cfa96e723fb817cda8756e298acee836d4d" translate="yes" xml:space="preserve">
          <source>FuncMap is the type of the map defining the mapping from names to functions. Each function must have either a single return value, or two return values of which the second has type error. In that case, if the second (error) argument evaluates to non-nil during execution, execution terminates and Execute returns that error. FuncMap has the same base type as FuncMap in &quot;text/template&quot;, copied here so clients need not import &quot;text/template&quot;.</source>
          <target state="translated">FuncMapは、名前から関数へのマッピングを定義するマップの型です。各関数は、1つの戻り値を持つか、2つの戻り値のうち2番目の引数がエラー型を持つかのいずれかでなければなりません。その場合、実行中に 2 番目の (error)引数が non-nil と評価された場合、実行は終了し、 Execute はそのエラーを返します。FuncMap は &quot;text/template&quot; の FuncMap と同じ基本型を持っており、クライアントが &quot;text/template&quot; をインポートする必要がないように、ここにコピーされています。</target>
        </trans-unit>
        <trans-unit id="c663a8fdf1b0c07a4b3a9bf988b2301d91e56916" translate="yes" xml:space="preserve">
          <source>FuncMap is the type of the map defining the mapping from names to functions. Each function must have either a single return value, or two return values of which the second has type error. In that case, if the second (error) return value evaluates to non-nil during execution, execution terminates and Execute returns that error.</source>
          <target state="translated">FuncMapは、名前から関数へのマッピングを定義するマップの型です。各関数は、1つの戻り値を持つか、2つの戻り値のうち、2つ目の戻り値がエラー型を持つかのいずれかでなければなりません。その場合、実行中に 2 番目の (エラーの)返り値が non-nil と評価された場合、実行は終了し、 Execute はそのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="e6a6e8cadfebe9c4799e999d069f9213bb24bed9" translate="yes" xml:space="preserve">
          <source>FuncOf</source>
          <target state="translated">FuncOf</target>
        </trans-unit>
        <trans-unit id="727153d867d797c3632d8920f9ed42e20c01b542" translate="yes" xml:space="preserve">
          <source>FuncOf returns a function to be used by JavaScript.</source>
          <target state="translated">FuncOfはJavaScriptで使用する関数を返します。</target>
        </trans-unit>
        <trans-unit id="d863a41e98edea4d63050f4d41d85e38ee53432a" translate="yes" xml:space="preserve">
          <source>FuncOf returns a wrapped function.</source>
          <target state="translated">FuncOf は、ラップされた関数を返します。</target>
        </trans-unit>
        <trans-unit id="93a168211e34460ad795ada01d7598344ab1ff0e" translate="yes" xml:space="preserve">
          <source>FuncOf returns the function type with the given argument and result types. For example if k represents int and e represents string, FuncOf([]Type{k}, []Type{e}, false) represents func(int) string.</source>
          <target state="translated">FuncOfは、与えられた引数と結果の型を持つ関数の型を返します。例えば、kがintでeが文字列の場合、FuncOf([]Type{k},[]Type{e},false)はfunc(int)の文字列を表します。</target>
        </trans-unit>
        <trans-unit id="e545c5b7597389c332937a417c6dbb10d7b9c2b9" translate="yes" xml:space="preserve">
          <source>Funcs adds the elements of the argument map to the template's function map. It must be called before the template is parsed. It panics if a value in the map is not a function with appropriate return type or if the name cannot be used syntactically as a function in a template. It is legal to overwrite elements of the map. The return value is the template, so calls can be chained.</source>
          <target state="translated">Funcsは、引数マップの要素をテンプレートの関数マップに追加します。テンプレートが解析される前に呼び出されなければなりません。マップ内の値が適切な戻り値型を持つ関数でない場合や、その名前がテンプレート内の関数として構文的に使用できない場合にパニックになります。マップの要素を上書きするのはご法度です。戻り値はテンプレートなので、呼び出しは連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="d356e92562acfcaf97196969d96dd79e05dacf25" translate="yes" xml:space="preserve">
          <source>Funcs adds the elements of the argument map to the template's function map. It must be called before the template is parsed. It panics if a value in the map is not a function with appropriate return type. However, it is legal to overwrite elements of the map. The return value is the template, so calls can be chained.</source>
          <target state="translated">Funcsは、引数マップの要素をテンプレートの関数マップに追加します。テンプレートが解析される前に呼び出す必要があります。マップ内の値が適切な戻り値型を持つ関数でない場合はパニックになります。ただし、マップの要素を上書きすることは合法です。戻り値はテンプレートなので、呼び出しは連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="8c10d9660a016948a806bd8cbcad3722d8e6bc88" translate="yes" xml:space="preserve">
          <source>Functions and channels will not be sent in a gob. Attempting to encode such a value at the top level will fail. A struct field of chan or func type is treated exactly like an unexported field and is ignored.</source>
          <target state="translated">関数やチャンネルはゴブでは送信されません。そのような値をトップレベルでエンコードしようとすると失敗します。chan 型や func 型の struct フィールドは、エクスポートされていないフィールドと同じように扱われ、無視されます。</target>
        </trans-unit>
        <trans-unit id="515fb65b2b3a55f3a5ea9024aecd183d10145a5b" translate="yes" xml:space="preserve">
          <source>Functions of the form</source>
          <target state="translated">フォームの機能</target>
        </trans-unit>
        <trans-unit id="5bde1b79ff9cf2a64313aa293a07d05136a9d65d" translate="yes" xml:space="preserve">
          <source>Functions starting with &quot;Is&quot; can be used to inspect which table of range a rune belongs to. Note that runes may fit into more than one range.</source>
          <target state="translated">Is &quot;で始まる関数は、ルーンがどの範囲のテーブルに属しているかを調べるために使用することができます。ルーンは複数の範囲に入ることがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="14038939956e123c4daa0060310ed80bf1b7a49d" translate="yes" xml:space="preserve">
          <source>GC runs a garbage collection and blocks the caller until the garbage collection is complete. It may also block the entire program.</source>
          <target state="translated">GC はガベージコレクションを実行し、ガベージコレクションが完了するまで呼び出し元をブロックします。また、プログラム全体をブロックすることもあります。</target>
        </trans-unit>
        <trans-unit id="c7f87699bcc973fce315d8d3ae36debdf341faa6" translate="yes" xml:space="preserve">
          <source>GCD sets z to the greatest common divisor of a and b and returns z. If x or y are not nil, GCD sets their value such that z = a*x + b*y.</source>
          <target state="translated">GCD は z を a と b の最大公約数に設定し、z を返します。 x または y が nil でない場合、gcd は z=a*x+b*y となるようにそれらの値を設定します。</target>
        </trans-unit>
        <trans-unit id="c1dacc63b01c8608c5a77320640ce147950f96e1" translate="yes" xml:space="preserve">
          <source>GCD sets z to the greatest common divisor of a and b, which both must be &amp;gt; 0, and returns z. If x or y are not nil, GCD sets their value such that z = a*x + b*y. If either a or b is &amp;lt;= 0, GCD sets z = x = y = 0.</source>
          <target state="translated">GCDは、zをaとbの最大公約数に設定します。これらは両方とも&amp;gt; 0でなければならず、zを返します。xまたはyがnilでない場合、GCDはz = a * x + b * yとなるように値を設定します。aまたはbのいずれかが0以下の場合、GCDはz = x = y = 0を設定します。</target>
        </trans-unit>
        <trans-unit id="19dd357da96d7272320f7fadf3fd2965c024dba5" translate="yes" xml:space="preserve">
          <source>GCStats collect information about recent garbage collections.</source>
          <target state="translated">GCStats は最近のゴミ収集に関する情報を収集します。</target>
        </trans-unit>
        <trans-unit id="d010209a0c3d0dee637f5259dfa34515f68772df" translate="yes" xml:space="preserve">
          <source>GIF represents the possibly multiple images stored in a GIF file.</source>
          <target state="translated">GIFは、GIFファイルに格納されている可能性のある複数の画像を表します。</target>
        </trans-unit>
        <trans-unit id="f62024646db1c94f452ef8c25337fad08f62d18e" translate="yes" xml:space="preserve">
          <source>GOARCH is the running program's architecture target: one of 386, amd64, arm, s390x, and so on.</source>
          <target state="translated">GOARCH は実行中のプログラムのアーキテクチャターゲットです:386,amd64,arm,s390x,などのいずれかです。</target>
        </trans-unit>
        <trans-unit id="cb34b31ce447e79881d19460e35c7075fc05a81a" translate="yes" xml:space="preserve">
          <source>GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting. If n &amp;lt; 1, it does not change the current setting. The number of logical CPUs on the local machine can be queried with NumCPU. This call will go away when the scheduler improves.</source>
          <target state="translated">GOMAXPROCSは、同時に実行できるCPUの最大数を設定し、以前の設定を返します。n &amp;lt;1の場合、現在の設定は変更されません。ローカルマシン上の論理CPUの数は、NumCPUで照会できます。この呼び出しは、スケジューラーが改善されると消えます。</target>
        </trans-unit>
        <trans-unit id="e0edbc08b54ba2717d6e63675d087628cd37bc2a" translate="yes" xml:space="preserve">
          <source>GOMAXPROCS sets the maximum number of CPUs that can be executing simultaneously and returns the previous setting. It defaults to the value of runtime.NumCPU. If n &amp;lt; 1, it does not change the current setting. This call will go away when the scheduler improves.</source>
          <target state="translated">GOMAXPROCSは、同時に実行できるCPUの最大数を設定し、前の設定を返します。デフォルトはruntime.NumCPUの値です。n &amp;lt;1の場合、現在の設定は変更されません。この呼び出しは、スケジューラーが改善されるとなくなります。</target>
        </trans-unit>
        <trans-unit id="ad65293e987b4a4c08430d0e000aecbc1854ac24" translate="yes" xml:space="preserve">
          <source>GOOS is the running program's operating system target: one of darwin, freebsd, linux, and so on. To view possible combinations of GOOS and GOARCH, run &quot;go tool dist list&quot;.</source>
          <target state="translated">GOOSは実行中のプログラムのオペレーティングシステムのターゲットです:darwin,freebsd,linuxなどのいずれかです。GOOS と GOARCH の組み合わせを見るには &quot;go tool dist list&quot; を実行してください。</target>
        </trans-unit>
        <trans-unit id="7bb230fcc10199af1bb88085306db7998e9674cd" translate="yes" xml:space="preserve">
          <source>GOROOT returns the root of the Go tree. It uses the GOROOT environment variable, if set at process start, or else the root used during the Go build.</source>
          <target state="translated">GOROOT は Go ツリーのルートを返します。プロセス開始時に設定されている場合はGOROOT環境変数を使用し、そうでない場合はGoビルド時に使用されたルートを使用します。</target>
        </trans-unit>
        <trans-unit id="3552a70e477a364f8e82a292dad18f46a2ad988b" translate="yes" xml:space="preserve">
          <source>Gamma returns the Gamma function of x.</source>
          <target state="translated">Gammaは、xのガンマ関数を返します。</target>
        </trans-unit>
        <trans-unit id="a2672eb4dac0440844556fb66fa39b9edb2d2041" translate="yes" xml:space="preserve">
          <source>General:</source>
          <target state="translated">General:</target>
        </trans-unit>
        <trans-unit id="453efae49cba4a01a09c987414ab329ee6c4a305" translate="yes" xml:space="preserve">
          <source>Generally Get, Post, or PostForm will be used instead of Do.</source>
          <target state="translated">一般的には、Do の代わりに Get,Post,PostForm を使用します。</target>
        </trans-unit>
        <trans-unit id="1c57b54aace051c9a60fd146f5087c013aa2d721" translate="yes" xml:space="preserve">
          <source>GenerateKey generates a public and private key pair.</source>
          <target state="translated">GenerateKeyは公開鍵と秘密鍵のペアを生成します。</target>
        </trans-unit>
        <trans-unit id="db1ff76045ebe9cc510f3c31601ddcbcd7fd57de" translate="yes" xml:space="preserve">
          <source>GenerateKey generates a public&amp;amp;private key pair. The Parameters of the PrivateKey must already be valid (see GenerateParameters).</source>
          <target state="translated">GenerateKeyは、公開鍵と秘密鍵のペアを生成します。PrivateKeyのパラメーターは既に有効である必要があります（GenerateParametersを参照）。</target>
        </trans-unit>
        <trans-unit id="e650907b55be64a19300b70e59344d22b7245e9b" translate="yes" xml:space="preserve">
          <source>GenerateKey generates a public/private key pair using entropy from rand. If rand is nil, crypto/rand.Reader will be used.</source>
          <target state="translated">GenerateKeyは、randからエントロピーを使用して公開鍵/秘密鍵ペアを生成します。randがnilの場合は、crypto/rand.Readerが使用されます。</target>
        </trans-unit>
        <trans-unit id="7f11f0f6942fab0ca9f944e5798d7d37395d774c" translate="yes" xml:space="preserve">
          <source>GenerateKey generates an RSA keypair of the given bit size using the random source random (for example, crypto/rand.Reader).</source>
          <target state="translated">GenerateKey は、ランダムソースの random (例えば、crypto/rand.Reader)を使用して、指定されたビットサイズの RSA 鍵ペアを生成します。</target>
        </trans-unit>
        <trans-unit id="80806cb0e126f8dd45cfba36eccecc7429a61358" translate="yes" xml:space="preserve">
          <source>GenerateKey returns a public/private key pair. The private key is generated using the given reader, which must return random data.</source>
          <target state="translated">GenerateKey は公開鍵/秘密鍵のペアを返します。秘密鍵は、与えられたリーダを使用して生成され、ランダムなデータを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="94cfc2c7f30a1879e413d8411b7005501c966655" translate="yes" xml:space="preserve">
          <source>GenerateMultiPrimeKey generates a multi-prime RSA keypair of the given bit size and the given random source, as suggested in [1]. Although the public keys are compatible (actually, indistinguishable) from the 2-prime case, the private keys are not. Thus it may not be possible to export multi-prime private keys in certain formats or to subsequently import them into other code.</source>
          <target state="translated">GenerateMultiPrimeKeyは、[1]で提案されているように、与えられたビットサイズとランダムなソースから、 マルチプライムRSA鍵ペアを生成する。公開鍵は2-primeの場合と互換性がある(実際には区別がつかない)が、秘密鍵は互換性がない。そのため、特定の形式で複数プライムの秘密鍵をエクスポートしたり、後から他のコードにインポートしたりすることはできないかもしれない。</target>
        </trans-unit>
        <trans-unit id="51625703089c85c9211c0ab627055dec67c2bfaf" translate="yes" xml:space="preserve">
          <source>GenerateParameters puts a random, valid set of DSA parameters into params. This function can take many seconds, even on fast machines.</source>
          <target state="translated">GenerateParameters は、ランダムで有効な DSA パラメータのセットを params に入れます。この関数は、高速なマシンでも数秒かかることがあります。</target>
        </trans-unit>
        <trans-unit id="4ebb3d9bf07301446af753fd8cfde6a2dbd2f25b" translate="yes" xml:space="preserve">
          <source>Generic file system errors. Errors returned by file systems can be tested against these errors using errors.Is.</source>
          <target state="translated">ファイルシステムの一般的なエラー。ファイルシステムが返すエラーは、errors.Isを使ってこれらのエラーをテストすることができます。</target>
        </trans-unit>
        <trans-unit id="bfffd736cddd08a4eee689949c3399cb61da773b" translate="yes" xml:space="preserve">
          <source>Get</source>
          <target state="translated">Get</target>
        </trans-unit>
        <trans-unit id="2fe964aa376032085805189a0397b3cdcf676226" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. If there are no values associated with the key, Get returns &quot;&quot;. It is case insensitive; textproto.CanonicalMIMEHeaderKey is used to canonicalize the provided key. To access multiple values of a key, or to use non-canonical keys, access the map directly.</source>
          <target state="translated">Get は、指定されたキーに関連付けられた最初の値を取得します。キーに関連付けられた値がない場合、Get は &quot;&quot; を返します。大文字小文字を区別しません。textproto.CanonicalMIMEHeaderKeyは、与えられたキーを正規化するために使用されます。キーの複数の値にアクセスしたり、非正規キーを使用したりするには、マップに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="3baa902f39cd83b30a85e419cba3b5af01d1e3ff" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. If there are no values associated with the key, Get returns &quot;&quot;. It is case insensitive; textproto.CanonicalMIMEHeaderKey is used to canonicalize the provided key. To use non-canonical keys, access the map directly.</source>
          <target state="translated">Get は、指定されたキーに関連付けられた最初の値を取得します。キーに関連付けられた値がない場合、Get は &quot;&quot; を返します。大文字小文字を区別しません。textproto.CanonicalMIMEHeaderKeyは、指定されたキーを正規化するために使用されます。非正規化キーを使用するには、マップに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="5819a3dfa32fe18b54e30756235c5c0b3e71efb0" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. If there are no values associated with the key, Get returns the empty string. To access multiple values, use the map directly.</source>
          <target state="translated">Get は、指定されたキーに関連付けられた最初の値を取得します。キーに関連付けられた値がない場合、Get は空の文字列を返します。複数の値にアクセスするには、マップを直接使用します。</target>
        </trans-unit>
        <trans-unit id="322573da1168297393f519b4b988bc100cbe0b6c" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. It is case insensitive; CanonicalMIMEHeaderKey is used to canonicalize the provided key. If there are no values associated with the key, Get returns &quot;&quot;. To access multiple values of a key, or to use non-canonical keys, access the map directly.</source>
          <target state="translated">Get は、指定したキーに関連付けられた最初の値を取得します。大文字小文字を区別しません。CanonicalMIMEHeaderKey を使用して、指定したキーを正規化します。キーに関連付けられた値がない場合、Get は &quot;&quot; を返します。キーの複数の値にアクセスしたり、非正規キーを使用したりするには、マップに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="70b433c8accfde2bcfff0de0db7ea43f32e215fb" translate="yes" xml:space="preserve">
          <source>Get gets the first value associated with the given key. It is case insensitive; CanonicalMIMEHeaderKey is used to canonicalize the provided key. If there are no values associated with the key, Get returns &quot;&quot;. To use non-canonical keys, access the map directly.</source>
          <target state="translated">Get は、指定したキーに関連付けられた最初の値を取得します。大文字小文字を区別しません。CanonicalMIMEHeaderKey を使用して、指定したキーを正規化します。キーに関連付けられた値がない場合、Get は &quot;&quot; を返します。非正規化キーを使用するには、マップに直接アクセスします。</target>
        </trans-unit>
        <trans-unit id="ec73d0c593dbece5412fe884185bdca68896527d" translate="yes" xml:space="preserve">
          <source>Get is a wrapper around DefaultClient.Get.</source>
          <target state="translated">Get は DefaultClient.Get のラッパーです。</target>
        </trans-unit>
        <trans-unit id="e51f2ab7d6fbd0e2ffab583f80049b3cfc794ac8" translate="yes" xml:space="preserve">
          <source>Get issues a GET to the specified URL. If the response is one of the following redirect codes, Get follows the redirect after calling the Client's CheckRedirect function:</source>
          <target state="translated">Get は、指定された URL に GET を発行します。レスポンスが以下のリダイレクトコードのいずれかである場合、クライアントの CheckRedirect 関数を呼び出した後、Get はリダイレクトに従います。</target>
        </trans-unit>
        <trans-unit id="cff58f3ccfaec37f9252515e01360ee67558791b" translate="yes" xml:space="preserve">
          <source>Get issues a GET to the specified URL. If the response is one of the following redirect codes, Get follows the redirect, up to a maximum of 10 redirects:</source>
          <target state="translated">Get は、指定された URL に対して GET を発行します。レスポンスが以下のリダイレクトコードのいずれかである場合、Get はリダイレクトに従います。</target>
        </trans-unit>
        <trans-unit id="4af41ae2934aaf3ecc571a5a758befaaf5dd46ec" translate="yes" xml:space="preserve">
          <source>Get retrieves a named exported variable. It returns nil if the name has not been registered.</source>
          <target state="translated">Getは、名前付きエクスポートされた変数を取得します。名前が登録されていない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="afa92ba06d138d5628558f74ba88a7e263aff277" translate="yes" xml:space="preserve">
          <source>Get returns the JavaScript property p of value v. It panics if v is not a JavaScript object.</source>
          <target state="translated">Get は、値 v の JavaScript プロパティ p を返します。</target>
        </trans-unit>
        <trans-unit id="1f152948d80d4df7cedf020669e282541979aaff" translate="yes" xml:space="preserve">
          <source>Get returns the value associated with key in the tag string. If there is no such key in the tag, Get returns the empty string. If the tag does not have the conventional format, the value returned by Get is unspecified. To determine whether a tag is explicitly set to the empty string, use Lookup.</source>
          <target state="translated">Get は、タグの文字列に含まれるキーに関連付けられた値を返します。タグにそのようなキーがない場合、Get は空の文字列を返します。タグが従来の形式を持たない場合、Get が返す値は指定されていません。タグが明示的に空文字列に設定されているかどうかを調べるには、Lookup を使用します。</target>
        </trans-unit>
        <trans-unit id="1c95403f4621e18fe8ba30c67d76e285e8214f43" translate="yes" xml:space="preserve">
          <source>Get selects an arbitrary item from the Pool, removes it from the Pool, and returns it to the caller. Get may choose to ignore the pool and treat it as empty. Callers should not assume any relation between values passed to Put and the values returned by Get.</source>
          <target state="translated">Get は、プールから任意の項目を選択し、プールから削除して呼び出し元に返します。Get は、プールを無視して空として扱うこともできます。呼び出し元は、Put に渡された値と Get が返す値との間に何の関係もないと思ってはいけません。</target>
        </trans-unit>
        <trans-unit id="c21e6716a05006be2a3b33da22f790cc4dacbd14" translate="yes" xml:space="preserve">
          <source>Get, Head, Post, and PostForm make HTTP (or HTTPS) requests:</source>
          <target state="translated">Get、Head、Post、PostForm は HTTP (または HTTPS)リクエストを行います。</target>
        </trans-unit>
        <trans-unit id="c5763aa4654b9f9e755a5247c7e85bd6431154eb" translate="yes" xml:space="preserve">
          <source>Getegid returns the numeric effective group id of the caller.</source>
          <target state="translated">Getegid は、呼び出し元の有効なグループ ID を数値で返します。</target>
        </trans-unit>
        <trans-unit id="3ce86e952faaa112161293325cc18e1e8b1d1f86" translate="yes" xml:space="preserve">
          <source>Getenv</source>
          <target state="translated">Getenv</target>
        </trans-unit>
        <trans-unit id="83272f1d9be5d707a2abc299316ecf8c20c6572e" translate="yes" xml:space="preserve">
          <source>Getenv retrieves the value of the environment variable named by the key. It returns the value, which will be empty if the variable is not present. To distinguish between an empty value and an unset value, use LookupEnv.</source>
          <target state="translated">Getenv は、キーで指定された環境変数の値を取得します。変数が存在しない場合は空の値を返します。空の値と未設定の値を区別するには、LookupEnv を使用します。</target>
        </trans-unit>
        <trans-unit id="fb87cd5bc3aee2814b4736bc86345f331ef466ad" translate="yes" xml:space="preserve">
          <source>Geteuid returns the numeric effective user id of the caller.</source>
          <target state="translated">Geteuid は、呼び出し元の有効なユーザ ID を数値で返します。</target>
        </trans-unit>
        <trans-unit id="ba1ccf148fadcaa5a423e416bb3b76de027035d5" translate="yes" xml:space="preserve">
          <source>Getgid returns the numeric group id of the caller.</source>
          <target state="translated">Getgid は、呼び出し元のグループ ID を返します。</target>
        </trans-unit>
        <trans-unit id="1a0d3dfabc3d14d5473d84c935b43760abff4984" translate="yes" xml:space="preserve">
          <source>Getgroups returns a list of the numeric ids of groups that the caller belongs to.</source>
          <target state="translated">Getgroups は、呼び出し元が所属するグループの ID のリストを返します。</target>
        </trans-unit>
        <trans-unit id="cf37c04d335f6576ae2f027091318c6f433db063" translate="yes" xml:space="preserve">
          <source>Getpagesize returns the underlying system's memory page size.</source>
          <target state="translated">Getpagesizeは、基礎となるシステムのメモリページサイズを返します。</target>
        </trans-unit>
        <trans-unit id="98c30bd03388e6d00325569f2c09cb7a5c1f7d76" translate="yes" xml:space="preserve">
          <source>Getpid returns the process id of the caller.</source>
          <target state="translated">Getpid は、呼び出し元のプロセス ID を返します。</target>
        </trans-unit>
        <trans-unit id="7d80618e0017c08138a1fb60fea1c4ec0dbcc585" translate="yes" xml:space="preserve">
          <source>Getppid returns the process id of the caller's parent.</source>
          <target state="translated">Getppid は、呼び出し元の親のプロセス ID を返します。</target>
        </trans-unit>
        <trans-unit id="0420495bba5effaa143906967bf722c4ac8e2224" translate="yes" xml:space="preserve">
          <source>Getter is an interface that allows the contents of a Value to be retrieved. It wraps the Value interface, rather than being part of it, because it appeared after Go 1 and its compatibility rules. All Value types provided by this package satisfy the Getter interface, except the type used by Func.</source>
          <target state="translated">ゲッターは、Valueのコンテンツを取得するためのインターフェースです。これは、Go 1 とその互換性ルールの後に登場したため、Value インターフェースの一部ではなく、これをラップしています。本パッケージで提供されるすべての Value タイプは、Func で使用されるタイプを除き、Getter インターフェースを満たします。</target>
        </trans-unit>
        <trans-unit id="ed660f2b70ea9d5fc73733f3c8d0fe3252a11e78" translate="yes" xml:space="preserve">
          <source>Getter is an interface that allows the contents of a Value to be retrieved. It wraps the Value interface, rather than being part of it, because it appeared after Go 1 and its compatibility rules. All Value types provided by this package satisfy the Getter interface.</source>
          <target state="translated">ゲッターは、Valueの内容を取得できるようにするインターフェースです。Getter は、Go 1 とその互換性ルールの後に登場したため、Value インターフェースの一部ではなくラップしています。本パッケージが提供するすべての Value 型は Getter インターフェースを満たしています。</target>
        </trans-unit>
        <trans-unit id="87c5badfd378b66a2a7ada85f8b7415911742baa" translate="yes" xml:space="preserve">
          <source>Getuid returns the numeric user id of the caller.</source>
          <target state="translated">Getuid は、呼び出し元のユーザ ID を返します。</target>
        </trans-unit>
        <trans-unit id="55e12168bb983e41918aba1691a9e5f495430b36" translate="yes" xml:space="preserve">
          <source>Getwd returns a rooted path name corresponding to the current directory. If the current directory can be reached via multiple paths (due to symbolic links), Getwd may return any one of them.</source>
          <target state="translated">Getwd は、カレントディレクトリに対応するルートパス名を返します。カレントディレクトリに複数のパス (シンボリックリンクによる)で到達できる場合、Getwd はそのうちのどれかを返すことができます。</target>
        </trans-unit>
        <trans-unit id="db8c30ea4bb862dc2beac406c90a324c6875e53e" translate="yes" xml:space="preserve">
          <source>Given that input, ReadMIMEHeader returns the map:</source>
          <target state="translated">その入力が与えられると、ReadMIMEHeaderはマップを返します。</target>
        </trans-unit>
        <trans-unit id="0d7c5c492a7ddeb919966cbf89bf311a727d8ab3" translate="yes" xml:space="preserve">
          <source>Glob ignores file system errors such as I/O errors reading directories. The only possible returned error is ErrBadPattern, when pattern is malformed.</source>
          <target state="translated">Glob は、ディレクトリの読み込みなどの I/O エラーなどのファイルシステムエラーを無視する。返される可能性のあるエラーは、パターンが不正な場合の ErrBadPattern のみです。</target>
        </trans-unit>
        <trans-unit id="ec233ed9cb1b9df5201fce35a0b5f94ec953239c" translate="yes" xml:space="preserve">
          <source>Glob ignores file system errors such as I/O errors reading directories. The only possible returned error is path.ErrBadPattern, reporting that the pattern is malformed.</source>
          <target state="translated">Glob は、ディレクトリを読み取る I/O エラーのようなファイルシステム・エラーを無視します。返される可能性のある唯一のエラーは path.ErrBadPattern で、パターンが不正に形成されていることを報告します。</target>
        </trans-unit>
        <trans-unit id="5a57ea57c1f0982972dd2d2f408926f91cf67c45" translate="yes" xml:space="preserve">
          <source>Glob returns the names of all files matching pattern or nil if there is no matching file. The syntax of patterns is the same as in Match. The pattern may describe hierarchical names such as /usr/*/bin/ed (assuming the Separator is '/').</source>
          <target state="translated">Glob は、パターンにマッチするすべてのファイルの名前を返します。パターンの構文は Matchと同じです。パターンは、/usr/*/bin/ed のような階層的な名前を記述することができます (Separator が '/' であることを前提としています)。</target>
        </trans-unit>
        <trans-unit id="59177559b687a2613d20fb79582001f540617ebd" translate="yes" xml:space="preserve">
          <source>Glob returns the names of all files matching pattern or nil if there is no matching file. The syntax of patterns is the same as in path.Match. The pattern may describe hierarchical names such as usr/*/bin/ed.</source>
          <target state="translated">Globは、パターンにマッチするすべてのファイルの名前を返し、マッチするファイルがない場合はnilを返します。パターンの構文は、path.Matchと同じです。パターンは usr/*/bin/ed のような階層的な名前を記述することができます。</target>
        </trans-unit>
        <trans-unit id="599aa1de3cf0d500e8e5f7d1a178d0ab1cc0a630" translate="yes" xml:space="preserve">
          <source>Global returns the JavaScript global object, usually &quot;window&quot; or &quot;global&quot;.</source>
          <target state="translated">Globalは、JavaScriptのグローバルオブジェクト(通常は &quot;window &quot;または &quot;global&quot;)を返します。</target>
        </trans-unit>
        <trans-unit id="2e0b45f2a456e8db55f08d7b65e87593a3e9a140" translate="yes" xml:space="preserve">
          <source>Go</source>
          <target state="translated">Go</target>
        </trans-unit>
        <trans-unit id="e2b7859482bcbcd7f30181447cb1227d814aecb3" translate="yes" xml:space="preserve">
          <source>Go Path</source>
          <target state="translated">碁道</target>
        </trans-unit>
        <trans-unit id="31c51be344c4f61c8aa40bf7e10aeaf5b3b1af91" translate="yes" xml:space="preserve">
          <source>Go Programming Language</source>
          <target state="translated">囲碁プログラミング言語</target>
        </trans-unit>
        <trans-unit id="2c968e5f87e6cf184e435232ef5dd7937823c72a" translate="yes" xml:space="preserve">
          <source>Go code built with -buildmode=c-archive or -buildmode=c-shared will not install any other signal handlers by default. If there is an existing signal handler, the Go runtime will turn on the SA_ONSTACK flag and otherwise keep the signal handler. If Notify is called for an asynchronous signal, a Go signal handler will be installed for that signal. If, later, Reset is called for that signal, the original handling for that signal will be reinstalled, restoring the non-Go signal handler if any.</source>
          <target state="translated">buildmode=c-archive または -buildmode=c-shared でビルドされた Go コードは、デフォルトで他のシグナルハンドラをインストールしません。既存のシグナルハンドラがある場合、Go ランタイムは SA_ONSTACK フラグをオンにし、それ以外の場合はシグナルハンドラを保持します。非同期シグナルに対して Notify が呼び出された場合、そのシグナルに対して Go シグナルハンドラがインストールされます。後日、そのシグナルに対して Reset が呼び出された場合、そのシグナルの元の処理が再インストールされ、Go 以外のシグナルハンドラがあればそれを復元します。</target>
        </trans-unit>
        <trans-unit id="799dd6ab824dcf093ff420451386c628fa2a9520" translate="yes" xml:space="preserve">
          <source>Go code built without -buildmode=c-archive or -buildmode=c-shared will install a signal handler for the asynchronous signals listed above, and save any existing signal handler. If a signal is delivered to a non-Go thread, it will act as described above, except that if there is an existing non-Go signal handler, that handler will be installed before raising the signal.</source>
          <target state="translated">buildmode=c-archive または -buildmode=c-shared を使用せずにビルドされた Go コードは、上記の非同期シグナル用のシグナルハンドラをインストールし、既存のシグナルハンドラを保存します。シグナルが非Goスレッドに配信された場合、上述のように動作しますが、既存の非Goシグナルハンドラがある場合は、シグナルを上げる前にそのハンドラがインストールされます。</target>
        </trans-unit>
        <trans-unit id="eb5d4b3ab79b5b09438ad686f6a173b50aeb10bd" translate="yes" xml:space="preserve">
          <source>Go identifiers that appear in the words map are italicized; if the corresponding map value is not the empty string, it is considered a URL and the word is converted into a link.</source>
          <target state="translated">対応するマップ値が空文字列でない場合、それはURLとみなされ、その単語はリンクに変換されます。</target>
        </trans-unit>
        <trans-unit id="ea224aeb731dc78304c02f088e7a39cfe984c1f7" translate="yes" xml:space="preserve">
          <source>Go invokes the function asynchronously. It returns the Call structure representing the invocation. The done channel will signal when the call is complete by returning the same Call object. If done is nil, Go will allocate a new channel. If non-nil, done must be buffered or Go will deliberately crash.</source>
          <target state="translated">Go は、関数を非同期的に呼び出します。呼び出しを表す Call 構造体を返します。done チャネルは、同じ Call オブジェクトを返すことで、呼び出しが完了したことを通知します。done が nil の場合、Go は新しいチャネルを割り当てます。done が nil でない場合は、done をバッファリングしておかなければなりません。</target>
        </trans-unit>
        <trans-unit id="a7c304672885987fa9e2bc01caee3388d0b9796b" translate="yes" xml:space="preserve">
          <source>Go programs that use cgo or SWIG</source>
          <target state="translated">cgoやSWIGを使用した囲碁プログラム</target>
        </trans-unit>
        <trans-unit id="dd7dcac022db9d7876634d64e370d5b00e950d72" translate="yes" xml:space="preserve">
          <source>Go source files that import &quot;embed&quot; can use the //go:embed directive to initialize a variable of type string, []byte, or FS with the contents of files read from the package directory or subdirectories at compile time.</source>
          <target state="translated">embed &quot;をインポートしたGoのソースファイルは、//go:embedディレクティブを使用して、コンパイル時にパッケージディレクトリやサブディレクトリから読み込んだファイルの内容で、string、[]byte、FS型の変数を初期化することができます。</target>
        </trans-unit>
        <trans-unit id="f00375ef44991e7032fc680e2e8afc5d4b4ddcac" translate="yes" xml:space="preserve">
          <source>GoStringer</source>
          <target state="translated">GoStringer</target>
        </trans-unit>
        <trans-unit id="776ec360ea626f63aba6d19bf197cc0106f28f0c" translate="yes" xml:space="preserve">
          <source>GoStringer is implemented by any value that has a GoString method, which defines the Go syntax for that value. The GoString method is used to print values passed as an operand to a %#v format.</source>
          <target state="translated">GoStringer は、その値の Go 構文を定義する GoString メソッドを持つ任意の値によって実装されます。GoString メソッドは、オペランドとして渡された値を %#v 形式に印刷するために使用されます。</target>
        </trans-unit>
        <trans-unit id="06664245ef1dbe050dbc75990b043c9e9da34427" translate="yes" xml:space="preserve">
          <source>GoWhitespace is the default value for the Scanner's Whitespace field. Its value selects Go's white space characters.</source>
          <target state="translated">GoWhitespace は、スキャナのホワイトスペースフィールドの既定値です。この値は、Goの空白文字を選択します。</target>
        </trans-unit>
        <trans-unit id="13594eb4e63d05205c24ee0d18474bb09fad234a" translate="yes" xml:space="preserve">
          <source>Gob can decode a value of any type implementing the GobDecoder or encoding.BinaryUnmarshaler interfaces by calling the corresponding method, again in that order of preference.</source>
          <target state="translated">Gob は、対応するメソッドを呼び出すことで、GobDecoder や encoding.BinaryUnmarshaler インターフェイスを実装した任意の型の値をデコードすることができます。</target>
        </trans-unit>
        <trans-unit id="7274c1618f0661ff86ead432a84f718728e78907" translate="yes" xml:space="preserve">
          <source>Gob can encode a value of any type implementing the GobEncoder or encoding.BinaryMarshaler interfaces by calling the corresponding method, in that order of preference.</source>
          <target state="translated">Gob は、GobEncoder や encoding.BinaryMarshaler インターフェイスを実装した任意の型の値を、優先順位の高い順に対応するメソッドを呼び出すことでエンコードすることができます。</target>
        </trans-unit>
        <trans-unit id="3f0664b183bab943699d699e2b7fa06d50e41b1a" translate="yes" xml:space="preserve">
          <source>GobDecode implements the gob.GobDecoder interface.</source>
          <target state="translated">GobDecode は gob.GobDecoder インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="d350a1211682bc77e1cf31df3df91c75eb68270c" translate="yes" xml:space="preserve">
          <source>GobDecode implements the gob.GobDecoder interface. The result is rounded per the precision and rounding mode of z unless z's precision is 0, in which case z is set exactly to the decoded value.</source>
          <target state="translated">GobDecode は gob.GobDecoder インターフェイスを実装しています。z の精度が 0 でない限り、結果は z の精度と丸めモードに従って丸められ、その場合は z がデコードされた値に正確に設定されます。</target>
        </trans-unit>
        <trans-unit id="dd719ca2cfb03b3cfba4caf011be5a1140872694" translate="yes" xml:space="preserve">
          <source>GobDecoder is the interface describing data that provides its own routine for decoding transmitted values sent by a GobEncoder.</source>
          <target state="translated">GobDecoderは、GobEncoderによって送信された送信値をデコードするための独自のルーチンを提供するデータを記述するインタフェースです。</target>
        </trans-unit>
        <trans-unit id="d5aa87ccb7988a5106efef8e6d2f9cae7932e9c6" translate="yes" xml:space="preserve">
          <source>GobEncode implements the gob.GobEncoder interface.</source>
          <target state="translated">GobEncode は gob.GobEncoder インターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="20cb90d239fa73b1f6938fdb92b390d973a1de7f" translate="yes" xml:space="preserve">
          <source>GobEncode implements the gob.GobEncoder interface. The Float value and all its attributes (precision, rounding mode, accuracy) are marshaled.</source>
          <target state="translated">GobEncodeは、gob.GobEncoderインターフェースを実装しています。Float値とそのすべての属性(精度、丸めモード、精度)がマーシャリングされます。</target>
        </trans-unit>
        <trans-unit id="a019b8cdacb9fe6be4bcfe375ae2210cd1a4074d" translate="yes" xml:space="preserve">
          <source>GobEncoder is the interface describing data that provides its own representation for encoding values for transmission to a GobDecoder. A type that implements GobEncoder and GobDecoder has complete control over the representation of its data and may therefore contain things such as private fields, channels, and functions, which are not usually transmissible in gob streams.</source>
          <target state="translated">GobEncoder は、GobDecoder に送信するための値をエンコードするための独自の表現を提供するデータを記述するインターフェイスです。GobEncoder と GobDecoder を実装した型は、そのデータの表現を完全に制御しているため、プライベートフィールド、チャンネル、関数など、通常は gob ストリームでは伝送できないものを含むことがあります。</target>
        </trans-unit>
        <trans-unit id="3af908c6818caa06d786a8ce4e61618d352da418" translate="yes" xml:space="preserve">
          <source>Goexit terminates the goroutine that calls it. No other goroutine is affected. Goexit runs all deferred calls before terminating the goroutine. Because Goexit is not a panic, any recover calls in those deferred functions will return nil.</source>
          <target state="translated">Goexitはそれを呼び出すgoroutineを終了させます。他のgoroutineは影響を受けません。Goexitは、goroutineを終了する前に、すべての繰延関数の呼び出しを実行します。Goexit はパニックではないので、これらの繰延関数の回復呼び出しはすべて nil を返します。</target>
        </trans-unit>
        <trans-unit id="92c1b5045c151c8351b05867329857d4da35385e" translate="yes" xml:space="preserve">
          <source>GoroutineProfile returns n, the number of records in the active goroutine stack profile. If len(p) &amp;gt;= n, GoroutineProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, GoroutineProfile does not change p and returns n, false.</source>
          <target state="translated">GoroutineProfileは、アクティブなgoroutineスタックプロファイルのレコード数であるnを返します。len（p）&amp;gt; = nの場合、GoroutineProfileはプロファイルをpにコピーし、n、trueを返します。len（p）&amp;lt;nの場合、GoroutineProfileはpを変更せず、n、falseを返します。</target>
        </trans-unit>
        <trans-unit id="62967be4b08298e25e7959a7cdc5602a2a2be72a" translate="yes" xml:space="preserve">
          <source>Gosched yields the processor, allowing other goroutines to run. It does not suspend the current goroutine, so execution resumes automatically.</source>
          <target state="translated">Gosched はプロセッサを解放し、他の goroutine を実行できるようにします。現在のgoroutineをサスペンドしないので、実行は自動的に再開されます。</target>
        </trans-unit>
        <trans-unit id="1c2aaf1310e2e413d539667c1a3e7771e58933c6" translate="yes" xml:space="preserve">
          <source>GotConnInfo is the argument to the ClientTrace.GotConn function and contains information about the obtained connection.</source>
          <target state="translated">GotConnInfo は ClientTrace.GotConn 関数の引数で、取得した接続に関する情報を含みます。</target>
        </trans-unit>
        <trans-unit id="8aa6da089a7b549e351002a5e03605264795ad2e" translate="yes" xml:space="preserve">
          <source>GraphicRanges defines the set of graphic characters according to Unicode.</source>
          <target state="translated">GraphicRangesは、Unicodeに従ったグラフィック文字の集合を定義します。</target>
        </trans-unit>
        <trans-unit id="e7195fa4641b119dd2889d0a417f633c2b3c037d" translate="yes" xml:space="preserve">
          <source>Gray is an in-memory image whose At method returns color.Gray values.</source>
          <target state="translated">グレーは、Atメソッドがcolor.Grayの値を返すインメモリ画像です。</target>
        </trans-unit>
        <trans-unit id="8551691479e553fcfd58c230f9f1c7702a08e936" translate="yes" xml:space="preserve">
          <source>Gray represents an 8-bit grayscale color.</source>
          <target state="translated">グレーは8ビットのグレースケールカラーを表します。</target>
        </trans-unit>
        <trans-unit id="8be44534e41a9fdc599304347782cb967b0bd62b" translate="yes" xml:space="preserve">
          <source>Gray16 is an in-memory image whose At method returns color.Gray16 values.</source>
          <target state="translated">Gray16は、Atメソッドがcolor.Gray16の値を返すインメモリ画像です。</target>
        </trans-unit>
        <trans-unit id="b7ee628ee7a9a7bf06c313fa8d8dc808a58abb8f" translate="yes" xml:space="preserve">
          <source>Gray16 represents a 16-bit grayscale color.</source>
          <target state="translated">Gray16は16ビットのグレースケールカラーを表します。</target>
        </trans-unit>
        <trans-unit id="6e09be6a83f7d3163e99081e0c679a65e139fc8d" translate="yes" xml:space="preserve">
          <source>Group represents a grouping of users.</source>
          <target state="translated">グループは、ユーザーのグループ化を表します。</target>
        </trans-unit>
        <trans-unit id="7de1bb0487db53a77d3d5fa786aa26f9027ba7c1" translate="yes" xml:space="preserve">
          <source>GroupIds returns the list of group IDs that the user is a member of.</source>
          <target state="translated">GroupIdsは、ユーザーが所属しているグループIDのリストを返します。</target>
        </trans-unit>
        <trans-unit id="d0e679bf3eeb0246c0708b92532613618a2a5627" translate="yes" xml:space="preserve">
          <source>Grouping:</source>
          <target state="translated">Grouping:</target>
        </trans-unit>
        <trans-unit id="a3dd80da68d80e7f0e9f29bcc9f5cb31d2777884" translate="yes" xml:space="preserve">
          <source>Grow grows b's capacity, if necessary, to guarantee space for another n bytes. After Grow(n), at least n bytes can be written to b without another allocation. If n is negative, Grow panics.</source>
          <target state="translated">Grow は、必要に応じて b の容量を増やし、さらに n バイト分のスペースを保証します。Grow(n)の後、少なくとも n バイトを b に書き込むことができます。n が負の値の場合、Grow はパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="ea6ca3eab6713cfdabbbddc578b2358a70e4ccb7" translate="yes" xml:space="preserve">
          <source>Grow grows the buffer's capacity, if necessary, to guarantee space for another n bytes. After Grow(n), at least n bytes can be written to the buffer without another allocation. If n is negative, Grow will panic. If the buffer can't grow it will panic with ErrTooLarge.</source>
          <target state="translated">Grow は、必要に応じてバッファの容量を増やし、さらに n バイト分のスペースを確保します。Grow(n)の後は、少なくとも n バイトをバッファに書き込むことができます。n が負の値の場合、Grow はパニックに陥ります。バッファの容量を増やすことができない場合は、ErrTooLarge でパニックになります。</target>
        </trans-unit>
        <trans-unit id="fcfc665b9c38534864ef4c48c8a42633500c63ee" translate="yes" xml:space="preserve">
          <source>Gzip files store a length and checksum of the uncompressed data. The Reader will return an ErrChecksum when Read reaches the end of the uncompressed data if it does not have the expected length or checksum. Clients should treat data returned by Read as tentative until they receive the io.EOF marking the end of the data.</source>
          <target state="translated">Gzipファイルは、非圧縮データの長さとチェックサムを格納する。期待された長さやチェックサムがない場合、Readが非圧縮データの最後に到達したとき、ReadはErrChecksumを返します。クライアントは、データの終了を示すio.EOFを受け取るまでは、Readから返されたデータを暫定的なものとして扱うべきです。</target>
        </trans-unit>
        <trans-unit id="5d71851e777cb11c10615f1403f7831b2abdc279" translate="yes" xml:space="preserve">
          <source>HTML encapsulates a known safe HTML document fragment. It should not be used for HTML from a third-party, or HTML with unclosed tags or comments. The outputs of a sound HTML sanitizer and a template escaped by this package are fine for use with HTML.</source>
          <target state="translated">HTMLは、既知の安全なHTML文書の断片をカプセル化します。サードパーティからのHTMLや、閉じられていないタグやコメントのあるHTMLには使用すべきではありません。このパッケージによってエスケープされたテンプレートやサウンドHTMLサニタイザの出力は、HTMLでの使用には問題ありません。</target>
        </trans-unit>
        <trans-unit id="b3eeeba32a88681f357c6658794b2cde0a1ffee1" translate="yes" xml:space="preserve">
          <source>HTML templates treat data values as plain text which should be encoded so they can be safely embedded in an HTML document. The escaping is contextual, so actions can appear within JavaScript, CSS, and URI contexts.</source>
          <target state="translated">HTML テンプレートはデータ値をプレーンテキストとして扱います。エスケープは文脈に応じて行われるので、アクションは JavaScript、CSS、URI のコンテキスト内で表示されます。</target>
        </trans-unit>
        <trans-unit id="9941fc69ceb0b7c4c9cd661ccc1d3296d53a1466" translate="yes" xml:space="preserve">
          <source>HTMLAttr encapsulates an HTML attribute from a trusted source, for example, ` dir=&quot;ltr&quot;`.</source>
          <target state="translated">HTMLAttrは信頼できるソースからのHTML属性をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="56515df9ce780f70db2a14123d61a78cb0491ced" translate="yes" xml:space="preserve">
          <source>HTMLAutoClose is the set of HTML elements that should be considered to close automatically.</source>
          <target state="translated">HTMLAutoCloseは、自動的に閉じることを考慮すべきHTML要素の集合です。</target>
        </trans-unit>
        <trans-unit id="e3ae2c19a119f12f6bd7618bea966cc88fb1903b" translate="yes" xml:space="preserve">
          <source>HTMLEntity is an entity map containing translations for the standard HTML entity characters.</source>
          <target state="translated">HTMLEntityは、標準的なHTMLエンティティ文字の翻訳を含むエンティティマップです。</target>
        </trans-unit>
        <trans-unit id="0502b94bdac42557ec458b2bcfd7d81519bb7f5f" translate="yes" xml:space="preserve">
          <source>HTMLEscape</source>
          <target state="translated">HTMLEscape</target>
        </trans-unit>
        <trans-unit id="108bb0274697ed474af72c0af28941c4694cc443" translate="yes" xml:space="preserve">
          <source>HTMLEscape appends to dst the JSON-encoded src with &amp;lt;, &amp;gt;, &amp;amp;, U+2028 and U+2029 characters inside string literals changed to \u003c, \u003e, \u0026, \u2028, \u2029 so that the JSON will be safe to embed inside HTML &amp;lt;script&amp;gt; tags. For historical reasons, web browsers don't honor standard HTML escaping within &amp;lt;script&amp;gt; tags, so an alternative JSON encoding must be used.</source>
          <target state="translated">HTMLEscapeは、JSONエンコードされたsrcをdstに追加し、文字列リテラル内の&amp;lt;、&amp;gt;、＆、U + 2028およびU + 2029文字を\ u003c、\ u003e、\ u0026、\ u2028、\ u2029に変更して、JSONが安全になるようにしますHTML &amp;lt;script&amp;gt;タグ内に埋め込む。歴史的な理由から、Webブラウザーは&amp;lt;script&amp;gt;タグ内の標準のHTMLエスケープを受け入れないため、代替のJSONエンコーディングを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="eaa5eff89dbdb13500c068f0e84bf21b7f3be3fb" translate="yes" xml:space="preserve">
          <source>HTMLEscape writes to w the escaped HTML equivalent of the plain text data b.</source>
          <target state="translated">HTMLEscape は、プレーンテキストデータ b のエスケープされた HTML に相当するものを w に書き込みます。</target>
        </trans-unit>
        <trans-unit id="eba1f3f7ea429a820bedfa415a707d8da7ce1238" translate="yes" xml:space="preserve">
          <source>HTMLEscapeString returns the escaped HTML equivalent of the plain text data s.</source>
          <target state="translated">HTMLEscapeString は、プレーンテキストデータ s のエスケープされた HTML と同等のものを返します。</target>
        </trans-unit>
        <trans-unit id="8b2dbe52305b6c07dd244c27d634207753a8523e" translate="yes" xml:space="preserve">
          <source>HTMLEscaper returns the escaped HTML equivalent of the textual representation of its arguments.</source>
          <target state="translated">HTMLEscaperは、その引数のテキスト表現のエスケープされたHTMLと同等のものを返します。</target>
        </trans-unit>
        <trans-unit id="9304c86e0fba62ba5daa5297c254f425c77df161" translate="yes" xml:space="preserve">
          <source>HTTP Trailers are a set of key/value pairs like headers that come after the HTTP response, instead of before.</source>
          <target state="translated">HTTP トレーラーは、HTTP レスポンスの前ではなく、HTTP レスポンスの後に来るヘッダのようなキー/値のペアのセットです。</target>
        </trans-unit>
        <trans-unit id="0f4dea56c9591992aae081556a866da7a62d7c76" translate="yes" xml:space="preserve">
          <source>HTTP status codes as registered with IANA. See: &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&lt;/a&gt;</source>
          <target state="translated">IANAに登録されているHTTPステータスコード。参照：&lt;a href=&quot;https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml&quot;&gt;https&lt;/a&gt; : //www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</target>
        </trans-unit>
        <trans-unit id="ffb0634925a034a37cf81c8bf163966c760740e9" translate="yes" xml:space="preserve">
          <source>HTTP/2 support is only enabled if the Listener returns *tls.Conn connections and they were configured with &quot;h2&quot; in the TLS Config.NextProtos.</source>
          <target state="translated">HTTP/2のサポートが有効になるのは、リスナーが*tls.Conn接続を返し、それらがTLS Config.NextProtosで &quot;h2 &quot;で構成されている場合のみです。</target>
        </trans-unit>
        <trans-unit id="5ee0353f20802f9b3b832dc664b1cf16f1dd8c83" translate="yes" xml:space="preserve">
          <source>HalfReader returns a Reader that implements Read by reading half as many requested bytes from r.</source>
          <target state="translated">HalfReaderは、要求されたバイト数の半分のバイト数をrから読み込むことでReadを実装したReaderを返します。</target>
        </trans-unit>
        <trans-unit id="c0392b2b1c472815ba8d1a1e3b20f4a279bf6c50" translate="yes" xml:space="preserve">
          <source>Handle</source>
          <target state="translated">Handle</target>
        </trans-unit>
        <trans-unit id="1f7743a2da5a9b87698980081ed0a9b4a848c67b" translate="yes" xml:space="preserve">
          <source>Handle registers the handler for the given pattern in the DefaultServeMux. The documentation for ServeMux explains how patterns are matched.</source>
          <target state="translated">Handle は、与えられたパターンのハンドラを DefaultServeMux に登録します。ServeMuxのドキュメントでは、パターンがどのようにマッチするかを説明しています。</target>
        </trans-unit>
        <trans-unit id="adfb5ece7bb714f07a8d92f38ecaccd93eb91488" translate="yes" xml:space="preserve">
          <source>Handle registers the handler for the given pattern. If a handler already exists for pattern, Handle panics.</source>
          <target state="translated">Handleは、与えられたパターンのハンドラを登録します。すでにパターンにハンドラが存在する場合、Handleはパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="9df709e02c4285ab3a3440b49e05002a1810c202" translate="yes" xml:space="preserve">
          <source>HandleFunc</source>
          <target state="translated">HandleFunc</target>
        </trans-unit>
        <trans-unit id="ba3631b03a8549831c70fb0b756b06eb4ccdf22e" translate="yes" xml:space="preserve">
          <source>HandleFunc registers the handler function for the given pattern in the DefaultServeMux. The documentation for ServeMux explains how patterns are matched.</source>
          <target state="translated">HandleFuncは、与えられたパターンに対するハンドラ関数をDefaultServeMuxに登録します。ServeMuxのドキュメントでは、パターンがどのようにマッチするかを説明しています。</target>
        </trans-unit>
        <trans-unit id="671e02c9111874e0dde4ea20673fb01320ed5a12" translate="yes" xml:space="preserve">
          <source>HandleFunc registers the handler function for the given pattern.</source>
          <target state="translated">HandleFuncは、与えられたパターンのハンドラ関数を登録します。</target>
        </trans-unit>
        <trans-unit id="b8bc0ae743c24154bab55e05ddac119f84a83a3e" translate="yes" xml:space="preserve">
          <source>HandleHTTP registers an HTTP handler for RPC messages on rpcPath, and a debugging handler on debugPath. It is still necessary to invoke http.Serve(), typically in a go statement.</source>
          <target state="translated">HandleHTTPはRPCメッセージ用のHTTPハンドラをrpcPathに、デバッグ用ハンドラをdebugPathに登録します。http.Serve()を呼び出す必要がありますが、通常は go 文の中で行います。</target>
        </trans-unit>
        <trans-unit id="104cf096656ffcb1565dfd1219d7035e43630f88" translate="yes" xml:space="preserve">
          <source>HandleHTTP registers an HTTP handler for RPC messages to DefaultServer on DefaultRPCPath and a debugging handler on DefaultDebugPath. It is still necessary to invoke http.Serve(), typically in a go statement.</source>
          <target state="translated">HandleHTTP は DefaultServer への RPC メッセージ用の HTTP ハンドラを DefaultRPCPath に、デバッグ用のハンドラを DefaultDebugPath に登録します。http.Serve()を呼び出す必要がありますが、通常は go 文の中で行います。</target>
        </trans-unit>
        <trans-unit id="a62b57b0720d266ed6489a123759bbfe855bf88a" translate="yes" xml:space="preserve">
          <source>Handler also returns the registered pattern that matches the request or, in the case of internally-generated redirects, the pattern that will match after following the redirect.</source>
          <target state="translated">ハンドラはまた、リクエストにマッチする登録済みのパターン、あるいは内部的に生成されたリダイレクトの場合には、リダイレクトの後にマッチするパターンを返します。</target>
        </trans-unit>
        <trans-unit id="0ddb06f6f85fc2ca7a7cc5302dfee4fc45947bee" translate="yes" xml:space="preserve">
          <source>Handler returns an HTTP handler that serves the named profile.</source>
          <target state="translated">ハンドラは、指定されたプロファイルにサービスを提供する HTTP ハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="4065eef104a7b00ebd8ce9a91293334fd4bb0db9" translate="yes" xml:space="preserve">
          <source>Handler returns the expvar HTTP Handler.</source>
          <target state="translated">Handler は expvar HTTP ハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="e63273beb69f3454c447975682e44a2c5d4a0c1e" translate="yes" xml:space="preserve">
          <source>Handler returns the handler to use for the given request, consulting r.Method, r.Host, and r.URL.Path. It always returns a non-nil handler. If the path is not in its canonical form, the handler will be an internally-generated handler that redirects to the canonical path. If the host contains a port, it is ignored when matching handlers.</source>
          <target state="translated">Handler は、r.Method,r.Host,r.URL.Path を参照して、指定されたリクエストに使用するハンドラを返します。常に非 null のハンドラを返します。パスが正規の形でない場合、ハンドラは正規のパスにリダイレクトする内部的に生成されたハンドラになります。ホストにポートが含まれている場合は、ハンドラのマッチング時に無視されます。</target>
        </trans-unit>
        <trans-unit id="a812b2fb8f7451d8a9be630f8c521fc7613cf74d" translate="yes" xml:space="preserve">
          <source>Handler runs an executable in a subprocess with a CGI environment.</source>
          <target state="translated">ハンドラは、CGI 環境のあるサブプロセスで実行ファイルを実行します。</target>
        </trans-unit>
        <trans-unit id="612e8566dcf29030b3f86ae45fac3cd161070575" translate="yes" xml:space="preserve">
          <source>Handling of anonymous struct fields is new in Go 1.1. Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of an anonymous struct field in both current and earlier versions, give the field a JSON tag of &quot;-&quot;.</source>
          <target state="translated">匿名構造体フィールドの取り扱いは、Go 1.1では新しくなりました。Go 1.1以前のバージョンでは、匿名構造体フィールドは無視されていました。現在のバージョンと以前のバージョンの両方で、匿名構造体フィールドを強制的に無視するには、フィールドに &quot;-&quot; の JSON タグを与えます。</target>
        </trans-unit>
        <trans-unit id="5bd11c3402a6253a1d760b097dca2d66d778e6dd" translate="yes" xml:space="preserve">
          <source>Handshake runs the client or server handshake protocol if it has not yet been run.</source>
          <target state="translated">ハンドシェイクは、まだ実行されていない場合、クライアントまたはサーバのハンドシェイクプロトコルを実行します。</target>
        </trans-unit>
        <trans-unit id="8bd5447a341844b0e1ee2ac00ed949437eac1c43" translate="yes" xml:space="preserve">
          <source>Handshake runs the client or server handshake protocol if it has not yet been run. Most uses of this package need not call Handshake explicitly: the first Read or Write will call it automatically.</source>
          <target state="translated">Handshake は、まだ実行されていない場合、クライアントまたはサーバのハンドシェイクプロトコルを実行します。本パッケージのほとんどの用途では、Handshake を明示的に呼び出す必要はありません:最初の読み取りまたは書き込みで自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0bf39eaf505133458b930fe0c34986ca5b577cc9" translate="yes" xml:space="preserve">
          <source>HasExpired reports whether certList should have been updated by now.</source>
          <target state="translated">HasExpired は、certList が今までに更新されている必要があるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d390517d58b930cb269df7a0b32aa914bfb5311d" translate="yes" xml:space="preserve">
          <source>HasOk reports whether the corresponding expression may be used on the rhs of a comma-ok assignment.</source>
          <target state="translated">HasOkは、対応する式がカンマOK代入のrhsで使用できるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="e53848ef4c6fc884ed74c95d3ab525fa42a2bbe7" translate="yes" xml:space="preserve">
          <source>HasPrefix</source>
          <target state="translated">HasPrefix</target>
        </trans-unit>
        <trans-unit id="8d314f541aff1011d7ddb318695b8f61b2af6ec2" translate="yes" xml:space="preserve">
          <source>HasPrefix exists for historical compatibility and should not be used.</source>
          <target state="translated">HasPrefixは歴史的互換性のために存在し、使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="2669e9427d4779bbc09f60c5ccfd3fe6d15b6c70" translate="yes" xml:space="preserve">
          <source>HasPrefix tests whether the byte slice s begins with prefix.</source>
          <target state="translated">HasPrefix は、バイトスライスが接頭辞で始まるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="5cd07ae1c7bc3b9ed87eb16cdb61e05184635090" translate="yes" xml:space="preserve">
          <source>HasPrefix tests whether the string s begins with prefix.</source>
          <target state="translated">HasPrefix は、文字列 s が接頭辞で始まるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="117455f286c7643c45e4bb7a574dddee082000d6" translate="yes" xml:space="preserve">
          <source>HasSuffix</source>
          <target state="translated">HasSuffix</target>
        </trans-unit>
        <trans-unit id="0d84ad6d23e5d60c659894725feb80de1e5bc00b" translate="yes" xml:space="preserve">
          <source>HasSuffix tests whether the byte slice s ends with suffix.</source>
          <target state="translated">HasSuffix は、バイトスライスの末尾がサフィックスで終わるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="71e6720e740d9f5d90d030cf5d260029a0041a76" translate="yes" xml:space="preserve">
          <source>HasSuffix tests whether the string s ends with suffix.</source>
          <target state="translated">HasSuffix は、文字列 s がサフィックスで終わるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="c07fb815b0dd23f98464b6c96ba0043996f42574" translate="yes" xml:space="preserve">
          <source>Hash identifies a cryptographic hash function that is implemented in another package.</source>
          <target state="translated">ハッシュは、他のパッケージで実装されている暗号化ハッシュ関数を識別します。</target>
        </trans-unit>
        <trans-unit id="a8a4a81d7a93ec8ea6de29fca7e817e8b0ccf094" translate="yes" xml:space="preserve">
          <source>Hash implementations in the standard library (e.g. hash/crc32 and crypto/sha256) implement the encoding.BinaryMarshaler and encoding.BinaryUnmarshaler interfaces. Marshaling a hash implementation allows its internal state to be saved and used for additional processing later, without having to re-write the data previously written to the hash. The hash state may contain portions of the input in its original form, which users are expected to handle for any possible security implications.</source>
          <target state="translated">標準ライブラリのハッシュ実装(hash/crc32やcrypto/sha256など)は、encoding.BinaryMarshalerとencoding.BinaryUnmarshalerインターフェースを実装しています。ハッシュ実装をマーシャリングすることで、ハッシュに書き込まれたデータを書き換えることなく、内部状態を保存し、後で追加の処理に使用することができます。ハッシュの状態は入力の一部を元の形で含むことがありますが、これはセキュリティ上の影響を考慮してユーザーが処理することが期待されています。</target>
        </trans-unit>
        <trans-unit id="afa3769866aaa8e9ccd0894bbb12db0f2a42b294" translate="yes" xml:space="preserve">
          <source>Hash is the common interface implemented by all hash functions.</source>
          <target state="translated">ハッシュは、すべてのハッシュ関数で実装されている共通のインターフェースです。</target>
        </trans-unit>
        <trans-unit id="bbb248d3e1082f71a91f55221f9ef1629bac5c92" translate="yes" xml:space="preserve">
          <source>Hash32 is the common interface implemented by all 32-bit hash functions.</source>
          <target state="translated">Hash32は、すべての32ビットハッシュ関数で実装されている共通のインターフェースです。</target>
        </trans-unit>
        <trans-unit id="05bc44af5e367ef4fc60329373f6d1a44dbf5c85" translate="yes" xml:space="preserve">
          <source>Hash64 is the common interface implemented by all 64-bit hash functions.</source>
          <target state="translated">Hash64は、すべての64ビットハッシュ関数で実装されている共通のインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="4aa2a3cc436464a090fd637734a2095043d7b259" translate="yes" xml:space="preserve">
          <source>HashFunc returns opts.Hash so that PSSOptions implements crypto.SignerOpts.</source>
          <target state="translated">HashFuncはopts.Hashを返すので、PSOptionsはcrypto.SignerOptsを実装します。</target>
        </trans-unit>
        <trans-unit id="3959061e57c74057bbf958321e7f6031a26bba89" translate="yes" xml:space="preserve">
          <source>HashFunc returns pssOpts.Hash so that PSSOptions implements crypto.SignerOpts.</source>
          <target state="translated">HashFunc は pssOpts.Hash を返すので、PSSOptions は crypto.SignerOpts を実装します。</target>
        </trans-unit>
        <trans-unit id="860155016136afc0d36dbbc3f9fc98412399783e" translate="yes" xml:space="preserve">
          <source>HashFunc simply returns the value of h so that Hash implements SignerOpts.</source>
          <target state="translated">HashFuncは、HashがSignerOptsを実装するようにhの値を返すだけです。</target>
        </trans-unit>
        <trans-unit id="2d042d0360cc7e1f18d91ae4331ed196e499f0e3" translate="yes" xml:space="preserve">
          <source>Hashes are intended to be collision-resistant, even for situations where an adversary controls the byte sequences being hashed.</source>
          <target state="translated">ハッシュは、敵対者がハッシュされているバイト列を制御するような状況でも、衝突に耐えられるように設計されています。</target>
        </trans-unit>
        <trans-unit id="cd2b2728ea1f997355e4a7e5005a26c5306f470a" translate="yes" xml:space="preserve">
          <source>Head is a wrapper around DefaultClient.Head</source>
          <target state="translated">Head は DefaultClient.Head のラッパーです。</target>
        </trans-unit>
        <trans-unit id="93e59ac29bb3c357b0f9c42db1f78e97e116c128" translate="yes" xml:space="preserve">
          <source>Head issues a HEAD to the specified URL. If the response is one of the following redirect codes, Head follows the redirect after calling the Client's CheckRedirect function:</source>
          <target state="translated">Head は指定された URL に HEAD を発行します。レスポンスが以下のリダイレクトコードのいずれかであれば、クライアントの CheckRedirect 関数を呼び出した後に HEAD はリダイレクトに従います。</target>
        </trans-unit>
        <trans-unit id="24094406af9408bd066ab26a0a1ef55bdcdead08" translate="yes" xml:space="preserve">
          <source>Head issues a HEAD to the specified URL. If the response is one of the following redirect codes, Head follows the redirect, up to a maximum of 10 redirects:</source>
          <target state="translated">Head は指定された URL に HEAD を発行します。レスポンスが以下のリダイレクトコードのいずれかである場合、Head はリダイレクトを追従し、最大 10 個のリダイレクトを行います。</target>
        </trans-unit>
        <trans-unit id="a50c7cbf99b8cae529cf3d620f5022a1c82e8fca" translate="yes" xml:space="preserve">
          <source>Header implements http.ResponseWriter. It returns the response headers to mutate within a handler. To test the headers that were written after a handler completes, use the Result method and see the returned Response value's Header.</source>
          <target state="translated">Header は http.ResponseWriter を実装しています。ハンドラ内で変異するレスポンスヘッダを返します。ハンドラが完了した後に書き込まれたヘッダをテストするには、Resultメソッドを使用して、返されたレスポンス値のヘッダを確認します。</target>
        </trans-unit>
        <trans-unit id="2a403ca7fd2ae0865923ded1f911ee30d4fbde83" translate="yes" xml:space="preserve">
          <source>Hello sends a HELO or EHLO to the server as the given host name. Calling this method is only necessary if the client needs control over the host name used. The client will introduce itself as &quot;localhost&quot; automatically otherwise. If Hello is called, it must be called before any of the other methods.</source>
          <target state="translated">Hello は、指定されたホスト名としてサーバに HELO または EHLO を送信します。このメソッドの呼び出しは、クライアントが使用するホスト名を制御する必要がある場合にのみ必要です。そうでなければ、クライアントは自動的に「localhost」として自分自身を紹介します。Helloが呼び出された場合は、他のどのメソッドよりも先に呼び出されなければなりません。</target>
        </trans-unit>
        <trans-unit id="0aed41610e50a1818172a103900a5a6fdac5322e" translate="yes" xml:space="preserve">
          <source>Helper marks the calling function as a test helper function. When printing file and line information, that function will be skipped. Helper may be called simultaneously from multiple goroutines.</source>
          <target state="translated">Helperは、呼び出した関数をテストヘルパー関数としてマークします。ファイルや行情報を印刷する場合は、その関数はスキップされます。Helperは複数のゴロチンから同時に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="aa0b52b8a6b42d9b0905c653c010a924ae5e874a" translate="yes" xml:space="preserve">
          <source>Here are some example one-line templates demonstrating pipelines and variables. All produce the quoted word &quot;output&quot;:</source>
          <target state="translated">パイプラインと変数を示す一行テンプレートの例を以下に示します。すべて引用符で囲まれた &quot;output &quot;という単語を生成します。</target>
        </trans-unit>
        <trans-unit id="89620d229387855063bd56a8e6d5a3250086c9f0" translate="yes" xml:space="preserve">
          <source>Here is a simple example, opening a file and reading some of it.</source>
          <target state="translated">ここでは簡単な例として、ファイルを開いてその一部を読み込んでみます。</target>
        </trans-unit>
        <trans-unit id="2824caba6baa2187c9e56d7836920f8ff25bcc71" translate="yes" xml:space="preserve">
          <source>Here is a simple example. A server wishes to export an object of type Arith:</source>
          <target state="translated">ここでは簡単な例を示します。サーバーがArith型のオブジェクトをエクスポートしたいとします。</target>
        </trans-unit>
        <trans-unit id="2c22db98d01fc50d0681541a0b0caf2c4141f0f4" translate="yes" xml:space="preserve">
          <source>Here is a trivial example that prints &quot;17 items are made of wool&quot;.</source>
          <target state="translated">ここでは、「17品目はウールでできています」とプリントした些細な例を紹介します。</target>
        </trans-unit>
        <trans-unit id="dc0bea3647dd8635722162c3a9c56cc10d70b7ac" translate="yes" xml:space="preserve">
          <source>Here is the list of actions. &quot;Arguments&quot; and &quot;pipelines&quot; are evaluations of data, defined in detail in the corresponding sections that follow.</source>
          <target state="translated">ここにアクションのリストがあります。&quot;Arguments &quot;と &quot;pipelines &quot;はデータの評価であり、後に続く対応するセクションで詳細に定義されています。</target>
        </trans-unit>
        <trans-unit id="c3b612d75a40adadd01e188d1e2aba30e8b88d33" translate="yes" xml:space="preserve">
          <source>Here we demonstrate loading a set of templates from a directory.</source>
          <target state="translated">ここでは、ディレクトリからテンプレートのセットをロードするデモを行います。</target>
        </trans-unit>
        <trans-unit id="c18d789286c40d70b27c77faebcb174f22c85dbc" translate="yes" xml:space="preserve">
          <source>Here we demonstrate loading a set of templates from files in different directories</source>
          <target state="translated">ここでは、異なるディレクトリ内のファイルからテンプレートのセットをロードするデモを行います。</target>
        </trans-unit>
        <trans-unit id="bcef5f73d0a48aab25273d92f8664ff4fb80379d" translate="yes" xml:space="preserve">
          <source>Here's an example directory layout:</source>
          <target state="translated">以下にディレクトリレイアウトの例を示します。</target>
        </trans-unit>
        <trans-unit id="35d5d6962be99793c34862b1061c8b5cacf67fc9" translate="yes" xml:space="preserve">
          <source>HexEncoding is the &amp;ldquo;Extended Hex Alphabet&amp;rdquo; defined in RFC 4648. It is typically used in DNS.</source>
          <target state="translated">HexEncodingは、RFC 4648で定義されている「Extended Hex Alphabet」です。通常、DNSで使用されます。</target>
        </trans-unit>
        <trans-unit id="e23f68e03ccbc9812663415a4a25267a75156114" translate="yes" xml:space="preserve">
          <source>Hijack detaches the ClientConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before the user or Read have signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress.</source>
          <target state="translated">Hijackは、ClientConnを切り離し、基本的な接続と、データが残っている可能性のある read側のbufioを返します。Hijackは、ユーザやReadがキープアライブロジックの終了を通知する前に呼ばれることがあります。ユーザは、Read または Write の実行中に Hijack を呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="9150896df8944dbbb2d645bc78167fd76df1dc80" translate="yes" xml:space="preserve">
          <source>Hijack detaches the ServerConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before Read has signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress.</source>
          <target state="translated">HijackはServerConnを切り離して、基礎となる接続と、データが残っているかもしれないリード側のbufioを返します。Hijackは、Readがキープアライブロジックの終了を通知する前に呼ばれることがあります。ReadやWriteの実行中にHijackを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="4a56321e103f0a1a522b694db3cb8d2d733e26fd" translate="yes" xml:space="preserve">
          <source>Hijacker</source>
          <target state="translated">Hijacker</target>
        </trans-unit>
        <trans-unit id="162450ef640a1216b7486b356d2e0daf7f97ce1d" translate="yes" xml:space="preserve">
          <source>Hostname returns the host name reported by the kernel.</source>
          <target state="translated">Hostname はカーネルが報告したホスト名を返します。</target>
        </trans-unit>
        <trans-unit id="96c776e02774d643d6c9b2543ae4ea531e374ca6" translate="yes" xml:space="preserve">
          <source>Hostname returns u.Host, stripping any valid port number if present.</source>
          <target state="translated">Hostname は u.Host を返し、有効なポート番号がある場合はそれを取り除きます。</target>
        </trans-unit>
        <trans-unit id="c10a91f09a43d36b8c063665239759dddfc07545" translate="yes" xml:space="preserve">
          <source>HostnameError results when the set of authorized names doesn't match the requested name.</source>
          <target state="translated">許可された名前のセットが要求された名前と一致しない場合、HostnameError が発生します。</target>
        </trans-unit>
        <trans-unit id="a732fe7ae23ec635b26f3cda289c15cbca4f3d8c" translate="yes" xml:space="preserve">
          <source>Hour returns the hour within the day specified by t, in the range [0, 23].</source>
          <target state="translated">Hourは、tで指定した日中の時間を[0,23]の範囲で返します。</target>
        </trans-unit>
        <trans-unit id="316afefe22138dc95ee9f3b2f4bc4164e8b8424e" translate="yes" xml:space="preserve">
          <source>Hours returns the duration as a floating point number of hours.</source>
          <target state="translated">Hoursは、時間を浮動小数点数で返します。</target>
        </trans-unit>
        <trans-unit id="29032d83edd3b2c57e81fe35f7063e01de42a614" translate="yes" xml:space="preserve">
          <source>However, there can be multiple leftmost-longest matches, with different submatch choices, and here this package diverges from POSIX. Among the possible leftmost-longest matches, this package chooses the one that a backtracking search would have found first, while POSIX specifies that the match be chosen to maximize the length of the first subexpression, then the second, and so on from left to right. The POSIX rule is computationally prohibitive and not even well-defined. See &lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp2.html#posix&quot;&gt;https://swtch.com/~rsc/regexp/regexp2.html#posix&lt;/a&gt; for details.</source>
          <target state="translated">ただし、左端が最も長い複数の一致があり、サブマッチの選択肢が異なる場合があります。この場合、このパッケージはPOSIXとは異なります。可能な左端から最長の一致の中から、このパッケージは、バックトラッキング検索で最初に見つかったものを選択しますが、POSIXは、最初の部分式、次に2番目の部分式の長さを最大にするように一致を選択することを指定しています。 。POSIXルールは計算上禁止されており、明確に定義されていません。詳細については、&lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp2.html#posix&quot;&gt;https：//swtch.com/~rsc/regexp/regexp2.html#posix&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="40708df18a19eb4cd04fce64de3e8c9f00288cb2" translate="yes" xml:space="preserve">
          <source>However, to aid in formatting template source code, if an action's left delimiter (by default &quot;{{&quot;) is followed immediately by a minus sign and ASCII space character (&quot;{{- &quot;), all trailing white space is trimmed from the immediately preceding text. Similarly, if the right delimiter (&quot;}}&quot;) is preceded by a space and minus sign (&quot; -}}&quot;), all leading white space is trimmed from the immediately following text. In these trim markers, the ASCII space must be present; &quot;{{-3}}&quot; parses as an action containing the number -3.</source>
          <target state="translated">しかし、テンプレートのソースコードのフォーマットを助けるために、アクションの左の区切り文字(デフォルトでは&quot;{{&quot;)の後にマイナス記号とASCIIスペース文字(&quot;{{-&quot;)が続く場合、末尾のすべてのホワイトスペースは直前のテキストからトリミングされます。同様に、右の区切り文字 (&quot;}}}&quot;)の前にスペースとマイナス記号 (&quot; -}}}&quot;)を付けると、直後のテキストから先頭の空白がすべて切り取られます。これらのトリムマーカーでは、ASCIIスペースが存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="865c5231eb19f03389b3d03b11a5fede2d02038c" translate="yes" xml:space="preserve">
          <source>However, to aid in formatting template source code, if an action's left delimiter (by default &quot;{{&quot;) is followed immediately by a minus sign and white space, all trailing white space is trimmed from the immediately preceding text. Similarly, if the right delimiter (&quot;}}&quot;) is preceded by white space and a minus sign, all leading white space is trimmed from the immediately following text. In these trim markers, the white space must be present: &quot;{{- 3}}&quot; is like &quot;{{3}}&quot; but trims the immediately preceding text, while &quot;{{-3}}&quot; parses as an action containing the number -3.</source>
          <target state="translated">ただし、テンプレートのソースコードを整形するために、アクションの左のデリミタ(デフォルトでは「{{」)の直後にマイナス記号と空白がある場合、直前のテキストから後ろの空白がすべて切り取られます。同様に、右のデリミタ(「}}」)の前に空白とマイナス記号がある場合は、先頭の空白がすべて直後のテキストから切り捨てられます。これらのトリムマーカーでは、ホワイトスペースが存在しなければなりません。&quot;{{-3}}&quot;は&quot;{{3}}&quot;と同じですが、直前のテキストをトリミングします。&quot;{{-3}}&quot;は数字の-3を含むアクションとして解析されます。</target>
        </trans-unit>
        <trans-unit id="d4e4742177e63cc124605c711f8542e79a9c655e" translate="yes" xml:space="preserve">
          <source>However, when printing a byte slice with a string-like verb (%s %q %x %X), it is treated identically to a string, as a single item.</source>
          <target state="translated">ただし、文字列のような動詞 (%s %q %x %X)を持つバイト・スライスを印刷する場合は、文字列と同じように 1 つの項目として扱われます。</target>
        </trans-unit>
        <trans-unit id="5c4cbffa6231f3b3c2514644d0fee825e224c80d" translate="yes" xml:space="preserve">
          <source>Hypot returns Sqrt(p*p + q*q), taking care to avoid unnecessary overflow and underflow.</source>
          <target state="translated">Hypotは、不要なオーバーフローやアンダーフローが発生しないように注意して、Sqrt(p*p+q*q)を返します。</target>
        </trans-unit>
        <trans-unit id="576b7847aead683e23b77c003ff6f222a841ef25" translate="yes" xml:space="preserve">
          <source>IEEETable is the table for the IEEE polynomial.</source>
          <target state="translated">IEEETableは、IEEE多項式のテーブルです。</target>
        </trans-unit>
        <trans-unit id="a220db6c90383cf3092dacd6831c2890463d8ced" translate="yes" xml:space="preserve">
          <source>IMAGE_DIRECTORY_ENTRY constants</source>
          <target state="translated">IMAGE_DIRECTORY_ENTRY 定数</target>
        </trans-unit>
        <trans-unit id="f585c9fe77a34e4b203ca7586560b165b3fa9e06" translate="yes" xml:space="preserve">
          <source>IP address lengths (bytes).</source>
          <target state="translated">IP アドレスの長さ (バイト)。</target>
        </trans-unit>
        <trans-unit id="8f3823940310cc4dda7efac459317d31719ee534" translate="yes" xml:space="preserve">
          <source>IP addresses can be optionally enclosed in square brackets and are checked against the IPAddresses field. Other names are checked case insensitively against the DNSNames field. If the names are valid hostnames, the certificate fields can have a wildcard as the left-most label.</source>
          <target state="translated">IPアドレスは、オプションで角括弧で囲むことができ、IPAddressesフィールドに対してチェックされます。その他の名前はDNSNamesフィールドに対して大文字小文字を区別せずにチェックされます。名前が有効なホスト名である場合、証明書フィールドには左端のラベルとしてワイルドカードを付けることができます。</target>
        </trans-unit>
        <trans-unit id="e746cf97286466a3ee7a6da22134f5658e5d9835" translate="yes" xml:space="preserve">
          <source>IP.DefaultMask</source>
          <target state="translated">IP.DefaultMask</target>
        </trans-unit>
        <trans-unit id="11cb3659b8e0ce7581cbb847a5c82b1c9f0fd371" translate="yes" xml:space="preserve">
          <source>IP.Mask</source>
          <target state="translated">IP.Mask</target>
        </trans-unit>
        <trans-unit id="afa88b5842f11425f491e338d7ab921fd1ba5273" translate="yes" xml:space="preserve">
          <source>IPAddr represents the address of an IP end point.</source>
          <target state="translated">IPAddrは、IPエンドポイントのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="62bf2467f82c0177288446c3c53fcfe1388fdbf4" translate="yes" xml:space="preserve">
          <source>IPConn is the implementation of the Conn and PacketConn interfaces for IP network connections.</source>
          <target state="translated">IPConnは、IPネットワーク接続のためのConnおよびPacketConnインターフェースの実装です。</target>
        </trans-unit>
        <trans-unit id="f8a4e52fe170a6b87d8e8f324c9e46497e3e1a1e" translate="yes" xml:space="preserve">
          <source>IPv4</source>
          <target state="translated">IPv4</target>
        </trans-unit>
        <trans-unit id="01eafbb77fe2e5da4ec4f2fa2166e61bdbf17fda" translate="yes" xml:space="preserve">
          <source>IPv4 returns the IP address (in 16-byte form) of the IPv4 address a.b.c.d.</source>
          <target state="translated">IPv4は、IPv4アドレスa.b.c.dのIPアドレス(16バイト形式)を返します。</target>
        </trans-unit>
        <trans-unit id="3e2065fb2c469f55091e83e0c17ec6c33b2ade3a" translate="yes" xml:space="preserve">
          <source>IPv4Mask</source>
          <target state="translated">IPv4Mask</target>
        </trans-unit>
        <trans-unit id="d0818e19fd482dbfdc092a8f03eecab69f4f02c6" translate="yes" xml:space="preserve">
          <source>IPv4Mask returns the IP mask (in 4-byte form) of the IPv4 mask a.b.c.d.</source>
          <target state="translated">IPv4Maskは、IPv4マスクa.b.c.dのIPマスク(4バイト形式)を返します。</target>
        </trans-unit>
        <trans-unit id="84f775d13ea13d9914f862669240b386b5b2ce40" translate="yes" xml:space="preserve">
          <source>ISOWeek returns the ISO 8601 year and week number in which t occurs. Week ranges from 1 to 53. Jan 01 to Jan 03 of year n might belong to week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1 of year n+1.</source>
          <target state="translated">ISOWeekは、tが発生するISO 8601の年号と週号を返します。週の範囲は1から53までです。n 年の 1 月 1 日から 1 月 03 日は n-1 年の 52 週目または 53 週目に属し、12 月 29 日から 12 月 31 日は n+1 年の 1 週目に属するかもしれません。</target>
        </trans-unit>
        <trans-unit id="08d6764cba419802272bb09d455c908144b957aa" translate="yes" xml:space="preserve">
          <source>Id is a wrapper for Id(obj.Pkg(), obj.Name()).</source>
          <target state="translated">IdはId(obj.Pkg(),obj.Name())のラッパーです。</target>
        </trans-unit>
        <trans-unit id="1d68ea4276c501cd9a850a1820a4a4d86fcccd10" translate="yes" xml:space="preserve">
          <source>Id returns name if it is exported, otherwise it returns the name qualified with the package path.</source>
          <target state="translated">Id は、エクスポートされた場合は名前を返し、そうでない場合はパッケージパスで修飾された名前を返します。</target>
        </trans-unit>
        <trans-unit id="fa08cb5f856950ffd31e99879394c8d2ecd78b73" translate="yes" xml:space="preserve">
          <source>Identical reports whether x and y are identical types. Receivers of Signature types are ignored.</source>
          <target state="translated">Identical は、x と y が同一の型であるかどうかを報告します。Signature型の受信者は無視されます。</target>
        </trans-unit>
        <trans-unit id="62582ea142e0c589620d5bd10a3675dc62d150bc" translate="yes" xml:space="preserve">
          <source>IdenticalIgnoreTags reports whether x and y are identical types if tags are ignored. Receivers of Signature types are ignored.</source>
          <target state="translated">IdenticalIgnoreTagsは、タグが無視された場合にxとyが同一型かどうかを報告します。Signature型の受信者は無視されます。</target>
        </trans-unit>
        <trans-unit id="1b283807cc15b11d0882e9fd847033d20b983bd2" translate="yes" xml:space="preserve">
          <source>IdentifierNode holds an identifier.</source>
          <target state="translated">IdentifierNodeは識別子を保持します。</target>
        </trans-unit>
        <trans-unit id="e3f7a148cc891203b5f7d36d2d9e45cad70d628a" translate="yes" xml:space="preserve">
          <source>If 'All' is present, the routine matches successive non-overlapping matches of the entire expression. Empty matches abutting a preceding match are ignored. The return value is a slice containing the successive return values of the corresponding non-'All' routine. These routines take an extra integer argument, n. If n &amp;gt;= 0, the function returns at most n matches/submatches; otherwise, it returns all of them.</source>
          <target state="translated">「すべて」が存在する場合、ルーチンは式全体の連続する重複しない一致に一致します。前の一致に隣接する空の一致は無視されます。戻り値は、対応する「すべて」以外のルーチンの連続する戻り値を含むスライスです。これらのルーチンは、追加の整数引数nを取ります。n&amp;gt; = 0の場合、関数は最大でn個の一致/部分一致を返します。それ以外の場合は、それらすべてを返します。</target>
        </trans-unit>
        <trans-unit id="4bc5ea7c2a0ba24905139043c1e06d713fc4b624" translate="yes" xml:space="preserve">
          <source>If 'Index' is present, matches and submatches are identified by byte index pairs within the input string: result[2*n:2*n+1] identifies the indexes of the nth submatch. The pair for n==0 identifies the match of the entire expression. If 'Index' is not present, the match is identified by the text of the match/submatch. If an index is negative or text is nil, it means that subexpression did not match any string in the input. For 'String' versions an empty string means either no match or an empty match.</source>
          <target state="translated">Index' が存在する場合、マッチとサブマッチは入力文字列内のバイトインデックスペアで識別されます:result[2*n:2*n+1]は n 番目のサブマッチのインデックスを識別します。n==0 のペアは、式全体のマッチを識別します。Index' が存在しない場合は、マッチ/サブマッチのテキストによってマッチが識別されます。インデックスが負の値であったり、テキストがnilであったりする場合は、subexpressionが入力中の文字列にマッチしなかったことを意味します。String' バージョンでは、空の文字列は一致しないか空の一致を意味します。</target>
        </trans-unit>
        <trans-unit id="750f20e67d15d8b15512065e634f8a04cd24649d" translate="yes" xml:space="preserve">
          <source>If 'String' is present, the argument is a string; otherwise it is a slice of bytes; return values are adjusted as appropriate.</source>
          <target state="translated">String' が存在する場合、引数は文字列であり、そうでない場合はバイトのスライスである。</target>
        </trans-unit>
        <trans-unit id="6b5422b81678b9d8d259a31067e6668262dc0a15" translate="yes" xml:space="preserve">
          <source>If 'Submatch' is present, the return value is a slice identifying the successive submatches of the expression. Submatches are matches of parenthesized subexpressions (also known as capturing groups) within the regular expression, numbered from left to right in order of opening parenthesis. Submatch 0 is the match of the entire expression, submatch 1 the match of the first parenthesized subexpression, and so on.</source>
          <target state="translated">サブマッチ」が存在する場合、戻り値は式の連続するサブマッチを識別するスライスです。サブマッチは、正規表現内の括弧付きのサブ表現(キャプチャグループとも呼ばれます)のマッチで、左から右へと括弧が開いている順に番号が付けられています。サブマッチ 0 は式全体のマッチであり、サブマッチ 1 は最初の括弧付き部分式のマッチです。</target>
        </trans-unit>
        <trans-unit id="c8e129ec8b814ed3ea9bfb24aed18824a3379050" translate="yes" xml:space="preserve">
          <source>If Body is present, Content-Length is &amp;lt;= 0 and TransferEncoding hasn't been set to &quot;identity&quot;, Write adds &quot;Transfer-Encoding: chunked&quot; to the header. Body is closed after it is sent.</source>
          <target state="translated">Bodyが存在し、Content-Lengthが0以下で、TransferEncodingが &quot;identity&quot;に設定されていない場合、Writeは &quot;Transfer-Encoding：chunked&quot;をヘッダーに追加します。送信後、本体は閉じられます。</target>
        </trans-unit>
        <trans-unit id="a4c660d2d836ce5011f39f208170601c14fc3f84" translate="yes" xml:space="preserve">
          <source>If CheckNamedValue returns ErrRemoveArgument, the NamedValue will not be included in the final query arguments. This may be used to pass special options to the query itself.</source>
          <target state="translated">CheckNamedValueがErrRemoveArgumentを返した場合、NamedValueは最終的な問い合わせ引数には含まれません。これは、クエリ自体に特別なオプションを渡すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="16a03bedfc442181d888e7b8ec8eee1e7e8562bb" translate="yes" xml:space="preserve">
          <source>If Conn.Ping returns ErrBadConn, DB.Ping and DB.PingContext will remove the Conn from pool.</source>
          <target state="translated">Conn.Ping が ErrBadConn を返すと、DB.Ping と DB.PingContext はプールから Conn を削除します。</target>
        </trans-unit>
        <trans-unit id="9bf5fb8d1ebbb6dc425efaa4065a072560c9aaa0" translate="yes" xml:space="preserve">
          <source>If DIR is a directory listed in the Go path, a package with source in DIR/src/foo/bar can be imported as &quot;foo/bar&quot; and has its compiled form installed to &quot;DIR/pkg/GOOS_GOARCH/foo/bar.a&quot; (or, for gccgo, &quot;DIR/pkg/gccgo/foo/libbar.a&quot;).</source>
          <target state="translated">DIRがGoパスに記載されているディレクトリであれば、DIR/src/foo/barにソースがあるパッケージを &quot;foo/bar &quot;としてインポートし、コンパイルされた形で &quot;DIR/pkg/GOOS_GOARCH/foo/bar.a &quot;にインストールすることができます(gccgoの場合は &quot;DIR/pkg/gccgo/foo/libbar.a &quot;にインストールします)。</target>
        </trans-unit>
        <trans-unit id="626d82422a444f8260197f6a255b844b957560c9" translate="yes" xml:space="preserve">
          <source>If Dir is SelectDefault, the case represents a default case. Chan and Send must be zero Values.</source>
          <target state="translated">DirがSelectDefaultの場合、ケースはデフォルトのケースを表します。ChanとSendは0の値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b64c8a9a4dd6bc23186cb39d29f2d6a941b37467" translate="yes" xml:space="preserve">
          <source>If Dir is SelectRecv, the case represents a receive operation. Normally Chan's underlying value must be a channel and Send must be a zero Value. If Chan is a zero Value, then the case is ignored, but Send must still be a zero Value. When a receive operation is selected, the received Value is returned by Select.</source>
          <target state="translated">DirがSelectRecvの場合は受信操作を表します。通常、Chan の基本値はチャンネルでなければならず、Send はゼロ値でなければなりません。Chan が 0 Value の場合、ケースは無視されますが、Send は 0 Value でなければなりません。受信操作が選択されると、受信した Value が Select によって返されます。</target>
        </trans-unit>
        <trans-unit id="fc3241471000ca543780e2776c12ce2c0f98b518" translate="yes" xml:space="preserve">
          <source>If Dir is SelectSend, the case represents a send operation. Normally Chan's underlying value must be a channel, and Send's underlying value must be assignable to the channel's element type. As a special case, if Chan is a zero Value, then the case is ignored, and the field Send will also be ignored and may be either zero or non-zero.</source>
          <target state="translated">Dir が SelectSend の場合、このケースは送信操作を表します。通常、Chanの基本値はチャンネルでなければならず、Sendの基本値はチャンネルの要素型に代入可能でなければなりません。特殊なケースとして、Chanがゼロ値の場合、ケースは無視され、フィールドSendも無視され、ゼロか非ゼロのどちらかになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e5a9a392b54a0f9dbcf70e078d697829fda46e7" translate="yes" xml:space="preserve">
          <source>If Discard skips fewer than n bytes, it also returns an error. If 0 &amp;lt;= n &amp;lt;= b.Buffered(), Discard is guaranteed to succeed without reading from the underlying io.Reader.</source>
          <target state="translated">Discardがスキップするバイト数がnバイト未満の場合も、エラーを返します。0 &amp;lt;= n &amp;lt;= b.Buffered（）の場合、破棄は、基になるio.Readerから読み取らずに成功することが保証されています。</target>
        </trans-unit>
        <trans-unit id="5388f313bdebc1cd743073994620f637168dfccb" translate="yes" xml:space="preserve">
          <source>If DiscardEmptyColumns is set, empty columns that are terminated entirely by vertical (or &quot;soft&quot;) tabs are discarded. Columns terminated by horizontal (or &quot;hard&quot;) tabs are not affected by this flag.</source>
          <target state="translated">DiscardEmptyColumns が設定されている場合、垂直タブ (または &quot;ソフト&quot; タブ)で完全に終端された空のカラムは破棄されます。水平タブ (または &quot;ハード&quot; タブ)で終了したカラムは、このフラグの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="c9deb8e1a0cfa1d1825dc49ade2afa7eec850bd3" translate="yes" xml:space="preserve">
          <source>If ErrSkip is returned the column converter error checking path is used for the argument. Drivers may wish to return ErrSkip after they have exhausted their own special cases.</source>
          <target state="translated">ErrSkip が返された場合、カラムコンバータのエラーチェックパスが引数に使用されます。ドライバは、独自の特殊なケースを使い切った後に ErrSkip を返すことを望むかもしれません。</target>
        </trans-unit>
        <trans-unit id="acb8bfb04c68aa06cf649fa65fe83fd0ec6ad99b" translate="yes" xml:space="preserve">
          <source>If Get would otherwise return nil and p.New is non-nil, Get returns the result of calling p.New.</source>
          <target state="translated">Get が nil を返し、p.New が非 nil である場合、Get は p.New を呼び出した結果を返します。</target>
        </trans-unit>
        <trans-unit id="cbb35dd622fd4fc40d747d7fe8a39806c85598b4" translate="yes" xml:space="preserve">
          <source>If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than MaxIdleConns, then MaxIdleConns will be reduced to match the new MaxOpenConns limit.</source>
          <target state="translated">MaxIdleConnsが0よりも大きく、新しいMaxOpenConnsがMaxIdleConnsよりも小さい場合、MaxIdleConnsは新しいMaxOpenConnsの制限値に合わせて縮小されます。</target>
        </trans-unit>
        <trans-unit id="0566ce3b75e32de588395cc9db25a53062d79613" translate="yes" xml:space="preserve">
          <source>If MaxOpenConns is greater than 0 but less than the new MaxIdleConns, then the new MaxIdleConns will be reduced to match the MaxOpenConns limit.</source>
          <target state="translated">MaxOpenConns が 0 よりも大きく、新しい MaxIdleConns よりも小さい場合、新しい MaxIdleConns は MaxOpenConns の制限値に合わせて減少します。</target>
        </trans-unit>
        <trans-unit id="ba59fc6bf9458413409db5ff0b9045c64e756bcb" translate="yes" xml:space="preserve">
          <source>If ReadAt is reading from an input source with a seek offset, ReadAt should not affect nor be affected by the underlying seek offset.</source>
          <target state="translated">ReadAtがシークオフセットを持つ入力ソースから読み出す場合、ReadAtは、その下にあるシークオフセットに影響を与えたり、影響を受けたりすることはないはずです。</target>
        </trans-unit>
        <trans-unit id="cc3d6766541295fe523ec22933263aa9a06c4657" translate="yes" xml:space="preserve">
          <source>If ServeHTTP panics, the server (the caller of ServeHTTP) assumes that the effect of the panic was isolated to the active request. It recovers the panic, logs a stack trace to the server error log, and either closes the network connection or sends an HTTP/2 RST_STREAM, depending on the HTTP protocol. To abort a handler so the client sees an interrupted response but the server doesn't log an error, panic with the value ErrAbortHandler.</source>
          <target state="translated">ServeHTTPがパニックになった場合、サーバー(ServeHTTPの呼び出し元)はパニックの影響がアクティブなリクエス トに隔離されたと仮定する。それはパニックを回復し、スタックトレースをサーバーエラーログに記録し、HTTPプロトコルに応じて、 ネットワーク接続を閉じるか、HTTP/2 RST_STREAMを送る。クライアントが中断された応答を見てもサーバーがエラーログを記録しないようにハンドラを中止するには、ErrAbortHandler の値を指定してパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="c9df130ceb3ae952587ab322cca16f6a65e29d84" translate="yes" xml:space="preserve">
          <source>If Start returns successfully, the c.Process field will be set.</source>
          <target state="translated">Startが正常に返ってきた場合、c.Processフィールドが設定されます。</target>
        </trans-unit>
        <trans-unit id="eed6a51dc00d92ad58016afb39e08c5356592608" translate="yes" xml:space="preserve">
          <source>If SubjectKeyId from template is empty and the template is a CA, SubjectKeyId will be generated from the hash of the public key.</source>
          <target state="translated">テンプレートのSubjectKeyIdが空で、テンプレートがCAの場合、公開鍵のハッシュからSubjectKeyIdが生成されます。</target>
        </trans-unit>
        <trans-unit id="03b743a2bf24014291b619ac4052a90413c15a39" translate="yes" xml:space="preserve">
          <source>If TestFS finds any misbehaviors, it returns an error reporting all of them. The error text spans multiple lines, one per detected misbehavior.</source>
          <target state="translated">TestFS が何か問題を発見した場合は、そのすべてを報告するエラーを返します。エラーテキストは複数行にわたっており、検出された問題行動ごとに1行ずつとなります。</target>
        </trans-unit>
        <trans-unit id="15b3f0511e9fa111d5eb85347847012bfb679dba" translate="yes" xml:space="preserve">
          <source>If TestReader finds any misbehaviors, it returns an error reporting them. The error text may span multiple lines.</source>
          <target state="translated">TestReader が不適切な動作を発見した場合は、それを報告するエラーを返します。エラー テキストは複数行に渡る場合があります。</target>
        </trans-unit>
        <trans-unit id="7c30ed6f837b3e7a9558eb599fa8c56e0e97063b" translate="yes" xml:space="preserve">
          <source>If Times t and u both contain monotonic clock readings, the operations t.After(u), t.Before(u), t.Equal(u), and t.Sub(u) are carried out using the monotonic clock readings alone, ignoring the wall clock readings. If either t or u contains no monotonic clock reading, these operations fall back to using the wall clock readings.</source>
          <target state="translated">Times t と u の両方に単調なクロック値が含まれている場合、t.After(u)、t.Before(u)、t.Equal(u)、および t.Sub(u)の操作は、壁のクロック値を無視して単調なクロック値のみを使用して実行されます。t または u のいずれかに単調クロックの読み取り値が含まれていない場合、これらの演算は壁のクロックの読み取り値を使用することに戻ります。</target>
        </trans-unit>
        <trans-unit id="bc4d8baa4dbb3f1a94db59ec9aa34f357782809d" translate="yes" xml:space="preserve">
          <source>If Unmarshal encounters a field type that implements the Unmarshaler interface, Unmarshal calls its UnmarshalXML method to produce the value from the XML element. Otherwise, if the value implements encoding.TextUnmarshaler, Unmarshal calls that value's UnmarshalText method.</source>
          <target state="translated">Unmarshal は、Unmarshaler インターフェイスを実装したフィールド型に遭遇した場合、Unmarshal はその UnmarshalXML メソッドを呼び出して XML 要素から値を生成します。そうでなければ、値が encoding.TextUnmarshaler を実装している場合、Unmarshal はその値の UnmarshalText メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="e7b1cef9234b9022f80f99b102d2ffde95658f55" translate="yes" xml:space="preserve">
          <source>If UseCRLF is true, the Writer ends each output line with \r\n instead of \n.</source>
          <target state="translated">UseCRLFが真の場合、Writerは、各出力行を\\rnの代わりに\rnで終了する。</target>
        </trans-unit>
        <trans-unit id="24f02297c63afdceb90dae9a889e378f8f5dc1c7" translate="yes" xml:space="preserve">
          <source>If WriteAt is writing to a destination with a seek offset, WriteAt should not affect nor be affected by the underlying seek offset.</source>
          <target state="translated">WriteAtがシークオフセットを持つデスティネーションに書き込んでいる場合、WriteAtは、その下にあるシークオフセットに影響を与えたり、影響を受けたりすることはないはずです。</target>
        </trans-unit>
        <trans-unit id="93383c5ea1d8fe26c2febc3914b065857796c533" translate="yes" xml:space="preserve">
          <source>If a != 0 and b == 0, GCD sets z = |a|, x = sign(a) * 1, y = 0.</source>
          <target state="translated">a !=0,b ==0 の場合、gcd は z=|a|,x=sign(a)*1,y=0 とします。</target>
        </trans-unit>
        <trans-unit id="01ec25dfc6204eb6897de5935b9779223b3cad13" translate="yes" xml:space="preserve">
          <source>If a &quot;range&quot; action initializes a variable, the variable is set to the successive elements of the iteration. Also, a &quot;range&quot; may declare two variables, separated by a comma:</source>
          <target state="translated">range &quot;アクションが変数を初期化する場合、その変数は反復の連続した要素に設定されます。また、&quot;range &quot;はカンマで区切られた2つの変数を宣言することができます。</target>
        </trans-unit>
        <trans-unit id="630b98d4876b039ef4109d3fcef4537345f5b1cb" translate="yes" xml:space="preserve">
          <source>If a == 0 and b != 0, GCD sets z = |b|, x = 0, y = sign(b) * 1.</source>
          <target state="translated">a ==0,b !=0 の場合、gcd は z=|b|,x=0,y=sign(b)*1 とします。</target>
        </trans-unit>
        <trans-unit id="64d609c4002ae17b5c018b505462be8ebae980f7" translate="yes" xml:space="preserve">
          <source>If a == b == 0, GCD sets z = x = y = 0.</source>
          <target state="translated">a ==b ==0 の場合、GCD は z=x=y=0 とします。</target>
        </trans-unit>
        <trans-unit id="58d444ec12c7fa5d6e872ab50772870b5a393d01" translate="yes" xml:space="preserve">
          <source>If a Conn does not implement ExecerContext, the sql package's DB.Exec will fall back to Execer; if the Conn does not implement Execer either, DB.Exec will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が ExecerContext を実装していない場合、SQL パッケージの DB.Exec は Execer にフォールバックします。Conn が Execer を実装していない場合、DB.Exec は最初にクエリを準備し、文を実行し、文を閉じます。</target>
        </trans-unit>
        <trans-unit id="44e6dfb38005e87694379cf1c0216f95562e9cfb" translate="yes" xml:space="preserve">
          <source>If a Conn does not implement Pinger, the sql package's DB.Ping and DB.PingContext will check if there is at least one Conn available.</source>
          <target state="translated">ConnがPingerを実装していない場合、SQLパッケージのDB.PingとDB.PingContextは、少なくとも1つのConnが利用可能かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="21128809a4ab46817c40f8b5969689593dcd6f72" translate="yes" xml:space="preserve">
          <source>If a Conn does not implement QueryerContext, the sql package's DB.Query will fall back to Queryer; if the Conn does not implement Queryer either, DB.Query will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が QueryerContext を実装していない場合、SQL パッケージの DB.Query は Queryer にフォールバックします。Conn が Queryer を実装していない場合、DB.Query は最初にクエリを準備し、文を実行し、文を閉じます。</target>
        </trans-unit>
        <trans-unit id="45c4be212f44031bede2b5276a4a3589a0dc2b98" translate="yes" xml:space="preserve">
          <source>If a Conn implements neither ExecerContext nor Execer, the sql package's DB.Exec will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が ExecerContext も Execer も実装していない場合、SQL パッケージの DB.Exec は最初にクエリを準備し、文を実行し、文を閉じます。</target>
        </trans-unit>
        <trans-unit id="1cb5d6dd6f4d516d1ae37935040abf369ba105f8" translate="yes" xml:space="preserve">
          <source>If a Conn implements neither QueryerContext nor Queryer, the sql package's DB.Query will first prepare a query, execute the statement, and then close the statement.</source>
          <target state="translated">Conn が QueryerContext も Queryer も実装していない場合、SQL パッケージの DB.Query は最初にクエリを準備し、文を実行してから文を閉じます。</target>
        </trans-unit>
        <trans-unit id="71c0f29e06c175a2adb537fdf47269746a601d0d" translate="yes" xml:space="preserve">
          <source>If a Driver implements DriverContext, then sql.DB will call OpenConnector to obtain a Connector and then invoke that Connector's Conn method to obtain each needed connection, instead of invoking the Driver's Open method for each connection. The two-step sequence allows drivers to parse the name just once and also provides access to per-Conn contexts.</source>
          <target state="translated">ドライバが DriverContext を実装している場合、sql.DB は OpenConnector を呼び出して Connector を取得し、その Connector の Conn メソッドを呼び出して必要な接続を取得します。この 2 段階のシーケンスにより、ドライバは 1 回だけ名前を解析し、Conn 単位のコンテキストへのアクセスも可能になります。</target>
        </trans-unit>
        <trans-unit id="56a7870f9afac036630f51a12d5ce02b7331bec6" translate="yes" xml:space="preserve">
          <source>If a Driver implements DriverContext, then sql.DB will call OpenConnector to obtain a Connector and then invoke that Connector's Connect method to obtain each needed connection, instead of invoking the Driver's Open method for each connection. The two-step sequence allows drivers to parse the name just once and also provides access to per-Conn contexts.</source>
          <target state="translated">ドライバが DriverContext を実装している場合、sql.DB は OpenConnector を呼び出して Connector を取得し、その Connector の Connect メソッドを呼び出して必要な接続を取得します。この 2 段階のシーケンスにより、ドライバは 1 回だけ名前を解析し、Conn ごとのコンテキストへのアクセスも可能になります。</target>
        </trans-unit>
        <trans-unit id="232b341436c8f9f54c10a5dba1cf92c214798814" translate="yes" xml:space="preserve">
          <source>If a JSON value is not appropriate for a given target type, or if a JSON number overflows the target type, Unmarshal skips that field and completes the unmarshaling as best it can. If no more serious errors are encountered, Unmarshal returns an UnmarshalTypeError describing the earliest such error. In any case, it's not guaranteed that all the remaining fields following the problematic one will be unmarshaled into the target object.</source>
          <target state="translated">JSON 値が指定されたターゲット型に適切でない場合、または JSON 数がターゲット型をオーバーフローした場合、Unmarshal はそのフィールドをスキップして、可能な限りのアンマーシャリングを完了します。これ以上深刻なエラーが発生しなかった場合、Unmarshal はそのようなエラーのうち最も早いものを記述した UnmarshalTypeError を返します。いずれにしても、問題のあるフィールドに続く残りのすべてのフィールドがターゲットオブジェクトにアンマーシャリングされることは保証されていません。</target>
        </trans-unit>
        <trans-unit id="07bd09bc1ed04a73b33dd796fe781c9034c95572" translate="yes" xml:space="preserve">
          <source>If a Stmt is prepared on a Tx or Conn, it will be bound to a single underlying connection forever. If the Tx or Conn closes, the Stmt will become unusable and all operations will return an error. If a Stmt is prepared on a DB, it will remain usable for the lifetime of the DB. When the Stmt needs to execute on a new underlying connection, it will prepare itself on the new connection automatically.</source>
          <target state="translated">Tx または Conn 上に Stmt が用意されている場合、その Stmt は永遠に単一の基礎となる接続にバインドされます。Tx または Conn が閉じた場合、Stmt は使用不能となり、すべての操作はエラーを返します。Stmt が DB 上に用意されている場合は、DB の寿命まで使用可能な状態が維持されます。Stmt が新しい接続上で実行する必要がある場合、新しい接続上で自動的に準備されます。</target>
        </trans-unit>
        <trans-unit id="3b80dd32b6041fa4ef2f09439544647455bd33ab" translate="yes" xml:space="preserve">
          <source>If a Value has an IsBoolFlag() bool method returning true, the command-line parser makes -name equivalent to -name=true rather than using the next command-line argument.</source>
          <target state="translated">値が真を返す IsBoolFlag()bool メソッドを持つ場合、コマンドライン・パーサは、次のコマンドライン引数を使用するのではなく、-name を -name=true と同等にします。</target>
        </trans-unit>
        <trans-unit id="1d651c7c470bed2709ac735baaeec98dda753ea4" translate="yes" xml:space="preserve">
          <source>If a Writer is configured to filter HTML, HTML tags and entities are passed through. The widths of tags and entities are assumed to be zero (tags) and one (entities) for formatting purposes.</source>
          <target state="translated">Writer が HTML をフィルタリングするように設定されている場合、HTML のタグとエンティティが通過します。タグとエンティティの幅は、書式設定のためにゼロ(タグ)と1(エンティティ)と見なされます。</target>
        </trans-unit>
        <trans-unit id="52438c4d80c78ea57962cd3af33f715085501ef6" translate="yes" xml:space="preserve">
          <source>If a benchmark needs some expensive setup before running, the timer may be reset:</source>
          <target state="translated">ベンチマークを実行する前に何らかの高価な設定が必要な場合、タイマーがリセットされることがあります。</target>
        </trans-unit>
        <trans-unit id="d7727dcc2593fe8b30c299beed7e6a6b86f7e22b" translate="yes" xml:space="preserve">
          <source>If a benchmark needs to test performance in a parallel setting, it may use the RunParallel helper function; such benchmarks are intended to be used with the go test -cpu flag:</source>
          <target state="translated">ベンチマークが並列設定で性能をテストする必要がある場合、RunParallelヘルパー関数を使用することができます;そのようなベンチマークは、go test -cpuフラグで使用することを意図しています。</target>
        </trans-unit>
        <trans-unit id="a54ff063e15dbe9b378b4160c9280c7409b22dcb" translate="yes" xml:space="preserve">
          <source>If a dest argument has type *[]byte, Scan saves in that argument a copy of the corresponding data. The copy is owned by the caller and can be modified and held indefinitely. The copy can be avoided by using an argument of type *RawBytes instead; see the documentation for RawBytes for restrictions on its use.</source>
          <target state="translated">dest 引数の型が *[]バイトの場合、Scan はその引数に対応するデータのコピーを保存します。コピーは呼び出し元が所有し、無期限に変更・保持することができます。代わりに*RawBytes型の引数を使用することでコピーを回避することができます。</target>
        </trans-unit>
        <trans-unit id="20186d29e290366ced58a159801092dd58a776e3" translate="yes" xml:space="preserve">
          <source>If a field uses a tag &quot;a&amp;gt;b&amp;gt;c&quot;, then the element c will be nested inside parent elements a and b. Fields that appear next to each other that name the same parent will be enclosed in one XML element.</source>
          <target state="translated">フィールドがタグ &quot;a&amp;gt; b&amp;gt; c&quot;を使用する場合、要素cは親要素aおよびb内にネストされます。同じ親を指定する、隣り合って表示されるフィールドは、1つのXML要素で囲まれます。</target>
        </trans-unit>
        <trans-unit id="9df6c8e2aa87346f45992618c6d030de25253b4a" translate="yes" xml:space="preserve">
          <source>If a file's name, after stripping the extension and a possible _test suffix, matches any of the following patterns:</source>
          <target state="translated">拡張子と_testの可能性のある接尾辞を除去した後のファイル名が、以下のパターンのいずれかに一致する場合。</target>
        </trans-unit>
        <trans-unit id="d6c46042317668db3b232f00f55a1ab61b108925" translate="yes" xml:space="preserve">
          <source>If a goroutine holds a RWMutex for reading and another goroutine might call Lock, no goroutine should expect to be able to acquire a read lock until the initial read lock is released. In particular, this prohibits recursive read locking. This is to ensure that the lock eventually becomes available; a blocked Lock call excludes new readers from acquiring the lock.</source>
          <target state="translated">goroutineが読み取り用のRWMutexを保持していて、別のgoroutineがLockを呼び出す可能性がある場合、どのgoroutineも最初の読み取りロックが解放されるまで読み取りロックを取得できることを期待すべきではありません。特に、これは再帰的な読み取りロックを禁止しています。これは、ロックが最終的に利用可能になることを確実にするためです。ブロックされた Lock 呼び出しは、新しいリーダがロックを取得することを除外します。</target>
        </trans-unit>
        <trans-unit id="09dcc94416ba2854a88e6fecddf19b900c4d3599" translate="yes" xml:space="preserve">
          <source>If a pattern names a directory, all files in the subtree rooted at that directory are embedded (recursively), except that files with names beginning with &amp;lsquo;.&amp;rsquo; or &amp;lsquo;_&amp;rsquo; are excluded. So the variable in the above example is almost equivalent to:</source>
          <target state="translated">パターンがディレクトリに名前を付ける場合、そのディレクトリをルートとするサブツリー内のすべてのファイルが（再帰的に）埋め込まれます。ただし、名前が「。」で始まるファイルは除きます。または「_」は除外されます。したがって、上記の例の変数は、次のものとほぼ同等です。</target>
        </trans-unit>
        <trans-unit id="54b696ffb9e87ece68a0d432b267874461da7b0c" translate="yes" xml:space="preserve">
          <source>If a pointer argument must be converted to uintptr for use as an argument, that conversion must appear in the call expression itself:</source>
          <target state="translated">ポインタの引数を引数として使用するためにuintptrに変換しなければならない場合、その変換は呼び出し式自体に現れなければなりません。</target>
        </trans-unit>
        <trans-unit id="ad57bb6494bba356a620db6dbc5f566b04a58730" translate="yes" xml:space="preserve">
          <source>If a program has already received a value from t.C, the timer is known to have expired and the channel drained, so t.Reset can be used directly. If a program has not yet received a value from t.C, however, the timer must be stopped and&amp;mdash;if Stop reports that the timer expired before being stopped&amp;mdash;the channel explicitly drained:</source>
          <target state="translated">プログラムがすでにtCから値を受信して​​いる場合、タイマーが期限切れになり、チャネルがドレインされたことがわかっているため、t.Resetを直接使用できます。ただし、プログラムがtCから値をまだ受信していない場合は、タイマーを停止する必要があります。Stopが、停止する前にタイマーの期限が切れたことを報告した場合、チャネルは明示的にドレインされます。</target>
        </trans-unit>
        <trans-unit id="a7be185efba59538fbd160cb8d8144506dd7c57d" translate="yes" xml:space="preserve">
          <source>If a subtree has been registered and a request is received naming the subtree root without its trailing slash, ServeMux redirects that request to the subtree root (adding the trailing slash). This behavior can be overridden with a separate registration for the path without the trailing slash. For example, registering &quot;/images/&quot; causes ServeMux to redirect a request for &quot;/images&quot; to &quot;/images/&quot;, unless &quot;/images&quot; has been registered separately.</source>
          <target state="translated">サブツリーが登録されていて、最後のスラッシュのないサブツリールートを指定したリクエストを受け取った場合、ServeMux はそのリクエストをサブツリールートにリダイレクトします (最後のスラッシュを追加します)。この動作は、末尾にスラッシュを付けないパスを個別に登録することでオーバーライドできます。例えば、「/images/」を登録すると、「/images」が個別に登録されていない限り、ServeMuxは「/images」に対するリクエストを「/images/」にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="104ed2563a73defc4faea46be899a20063ec818c" translate="yes" xml:space="preserve">
          <source>If a template with the given name already exists, the new HTML template will replace it. The existing template will be reset and disassociated with t.</source>
          <target state="translated">与えられた名前のテンプレートが既に存在する場合、新しいHTMLテンプレートがそれを置き換えます。既存のテンプレートはリセットされ、tとの関連付けが解除されます。</target>
        </trans-unit>
        <trans-unit id="463d47c06a7100464461b73a8101f7660c223839" translate="yes" xml:space="preserve">
          <source>If a value is passed to Encode and the type is not a struct (or pointer to struct, etc.), for simplicity of processing it is represented as a struct of one field. The only visible effect of this is to encode a zero byte after the value, just as after the last field of an encoded struct, so that the decode algorithm knows when the top-level value is complete.</source>
          <target state="translated">値が Encode に渡され、その型が struct (または struct へのポインタなど)でない場合、処理を簡単にするために、1 つのフィールドの struct として表現されます。これの唯一の目に見える効果は、エンコードされた構造体の最後のフィールドの後と同じように、値の後にゼロバイトをエンコードすることで、デコードアルゴリズムはトップレベルの値が完了したときに知ることができます。</target>
        </trans-unit>
        <trans-unit id="d7d467cb048cd5252bcf40b068f20c227a6c5268" translate="yes" xml:space="preserve">
          <source>If an Error or String method triggers a panic when called by a print routine, the fmt package reformats the error message from the panic, decorating it with an indication that it came through the fmt package. For example, if a String method calls panic(&quot;bad&quot;), the resulting formatted message will look like</source>
          <target state="translated">エラーや文字列メソッドがプリントルーチンによって呼び出されたときにパニックを引き起こす場合、fmtパッケージはパニックからのエラーメッセージを再構成し、それがfmtパッケージを経由して来たことを示す表示で装飾します。例えば、Stringメソッドがpanic(&quot;bad&quot;)を呼び出すと、結果として得られるフォーマットされたメッセージは次のようになります。</target>
        </trans-unit>
        <trans-unit id="cd5fac95dd3eef4d9d21db69e86463f17f12f02f" translate="yes" xml:space="preserve">
          <source>If an X-Forwarded-For header already exists, the client IP is appended to the existing values. As a special case, if the header exists in the Request.Header map but has a nil value (such as when set by the Director func), the X-Forwarded-For header is not modified.</source>
          <target state="translated">X-Forwarded-Forのヘッダが既に存在する場合、クライアントIPは既存の値に追加される。特殊なケースとして、ヘッダがRequest.Headerマップに存在するがnil値を持つ場合(Director funcによって設定された場合など)、X-Forwarded-Forヘッダは修正されない。</target>
        </trans-unit>
        <trans-unit id="d3278ea50ebebf5ea6289948b73b15f204c549e9" translate="yes" xml:space="preserve">
          <source>If an argument has type *interface{}, Scan copies the value provided by the underlying driver without conversion. When scanning from a source value of type []byte to *interface{}, a copy of the slice is made and the caller owns the result.</source>
          <target state="translated">引数の型が*interface{}の場合、変換せずに基礎となるドライバによって提供された値をコピーします。型[]バイトのソース値から*interface{}にスキャンすると、スライスのコピーが作成され、呼び出し元は結果を所有します。</target>
        </trans-unit>
        <trans-unit id="4329d9c7e154311e6c7d29f0986dc75dbddb37fd" translate="yes" xml:space="preserve">
          <source>If an attribute has both a namespace and a &quot;data-&quot; prefix, only the namespace will be removed when determining the context. For example</source>
          <target state="translated">属性が名前空間と &quot;data-&quot;接頭辞の両方を持つ場合、コンテキストを決定する際に名前空間だけが削除されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6c7525fb96a9e6dded8b4dd1c94198523c01a7a6" translate="yes" xml:space="preserve">
          <source>If an error occurs, Import returns a non-nil error and a non-nil *Package containing partial information.</source>
          <target state="translated">エラーが発生した場合、Importは非nilのエラーと部分情報を含む非nilの*Packageを返す。</target>
        </trans-unit>
        <trans-unit id="22a8988276a496bd99d453fc14d11bfb8cde90f0" translate="yes" xml:space="preserve">
          <source>If an invalid argument is given for a verb, such as providing a string to %d, the generated string will contain a description of the problem, as in these examples:</source>
          <target state="translated">d に文字列を与えるなど、動詞に無効な引数が与えられた場合、以下の例のように、生成された文字列には問題の説明が含まれます。</target>
        </trans-unit>
        <trans-unit id="2f5f672edd948d125f1a8e2164d6570e08508e2a" translate="yes" xml:space="preserve">
          <source>If any of c.Stdin, c.Stdout or c.Stderr are not an *os.File, Wait also waits for the respective I/O loop copying to or from the process to complete.</source>
          <target state="translated">c.Stdin、c.Stdout、c.Stderrのいずれかが*os.Fileでない場合、Waitはプロセスへの、またはプロセスからのそれぞれのI/Oループのコピーが完了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="1f5bbd150ddfb48c91c7cfee2c61e666fa277d7d" translate="yes" xml:space="preserve">
          <source>If any of the first arguments implementing Scanner returns an error, that error will be wrapped in the returned error</source>
          <target state="translated">スキャナを実装する最初の引数のいずれかがエラーを返した場合、そのエラーは返されたエラーにラップされます。</target>
        </trans-unit>
        <trans-unit id="1d9be5ef14b069fbd8a903d2f2a5d631da093ef0" translate="yes" xml:space="preserve">
          <source>If any patterns are invalid or have invalid matches, the build will fail.</source>
          <target state="translated">1つでも無効なパターンがあったり、無効なマッチがあった場合、ビルドは失敗します。</target>
        </trans-unit>
        <trans-unit id="f2c348eae7d177d9986e66ac0dbb1fa9c1c8eff2" translate="yes" xml:space="preserve">
          <source>If b has invalid headers and cannot be encoded, EncodeToMemory returns nil. If it is important to report details about this error case, use Encode instead.</source>
          <target state="translated">b に無効なヘッダがあり、エンコードできない場合、EncodeToMemory は nil を返します。このエラーケースの詳細を報告することが重要な場合は、代わりに Encode を使用します。</target>
        </trans-unit>
        <trans-unit id="81446ee41b4f44409d6c98445688e2c9dc448484" translate="yes" xml:space="preserve">
          <source>If base == 0, the base is implied by the string's prefix: base 2 for &quot;0b&quot;, base 8 for &quot;0&quot; or &quot;0o&quot;, base 16 for &quot;0x&quot;, and base 10 otherwise. Also, for base == 0 only, underscore characters are permitted per the Go integer literal syntax. If base is below 0, is 1, or is above 36, an error is returned.</source>
          <target state="translated">ベース ==0 の場合、ベースは文字列の接頭辞によって暗示されます。&quot;0b&quot; の場合はベース 2、&quot;0&quot; または &quot;0o&quot; の場合はベース 8、&quot;0x&quot; の場合はベース 16、それ以外の場合はベース 10 です。また、base ==0 の場合のみ、Go 整数リテラル構文ではアンダースコア文字が許可されます。base が 0 以下、1、または 36 以上の場合はエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="ff7cc9932856849c823dcd514ebeb18a3facfdc3" translate="yes" xml:space="preserve">
          <source>If body is of type *bytes.Buffer, *bytes.Reader, or *strings.Reader, the returned request's ContentLength is set to its exact value (instead of -1), GetBody is populated (so 307 and 308 redirects can replay the body), and Body is set to NoBody if the ContentLength is 0.</source>
          <target state="translated">bodyが*bytes.Buffer、*bytes.Reader、または*strings.Readerの型の場合、返されたリクエストのContentLengthが正確な値に設定され(-1ではなく)、GetBodyが生成され(リダイレクトがボディを再生できるように)、ContentLengthが0の場合はBodyがNoBodyに設定されます。</target>
        </trans-unit>
        <trans-unit id="07cc785c40dfb93b351fa360eaf5c11b3a687a2b" translate="yes" xml:space="preserve">
          <source>If body is true, DumpRequest also returns the body. To do so, it consumes req.Body and then replaces it with a new io.ReadCloser that yields the same bytes. If DumpRequest returns an error, the state of req is undefined.</source>
          <target state="translated">bodyがtrueの場合、DumpRequestはbodyも返します。そのためには、req.Bodyを消費し、同じバイト数を生成する新しいio.ReadCloserに置き換えます。DumpRequestがエラーを返した場合、reqの状態は未定義です。</target>
        </trans-unit>
        <trans-unit id="f6ca8f7ad0c62b57590e8d1aff231f008b51eef8" translate="yes" xml:space="preserve">
          <source>If d &amp;lt;= 0, connections are not closed due to a connection's age.</source>
          <target state="translated">If d &amp;lt;= 0, connections are not closed due to a connection's age.</target>
        </trans-unit>
        <trans-unit id="a796f4a07dcd83603a859bc99893a18fb6d4d814" translate="yes" xml:space="preserve">
          <source>If d &amp;lt;= 0, connections are not closed due to a connection's idle time.</source>
          <target state="translated">If d &amp;lt;= 0, connections are not closed due to a connection's idle time.</target>
        </trans-unit>
        <trans-unit id="e8579022b484933fe4198bbc194c8a61565aa3ef" translate="yes" xml:space="preserve">
          <source>If d &amp;lt;= 0, connections are reused forever.</source>
          <target state="translated">d &amp;lt;= 0の場合、接続は永久に再利用されます。</target>
        </trans-unit>
        <trans-unit id="11054b794a9e66d49b745938ef3b656c43f6d39e" translate="yes" xml:space="preserve">
          <source>If data is a reflect.Value, the template applies to the concrete value that the reflect.Value holds, as in fmt.Print.</source>
          <target state="translated">データが reflect.Value の場合、テンプレートは、fmt.Print.Print のように reflect.Value が保持する具体的な値に適用されます。</target>
        </trans-unit>
        <trans-unit id="f83ceb0ced26c1c764536b5ff1b4fa15e74b62ce" translate="yes" xml:space="preserve">
          <source>If dst implements the ReaderFrom interface, the copy is implemented using it.</source>
          <target state="translated">dstがReaderFromインターフェイスを実装している場合、コピーはそれを使って実装されます。</target>
        </trans-unit>
        <trans-unit id="6833b17cfcf75e1b486e6c702d0520e85f9b86a2" translate="yes" xml:space="preserve">
          <source>If e.Unwrap() returns a non-nil error w, then we say that e wraps w.</source>
          <target state="translated">e.Unwrap()が非nilのエラーwを返す場合は、eがwをラップしていることになります。</target>
        </trans-unit>
        <trans-unit id="f550577a407a74d547ca6987c46308a4d94fb754" translate="yes" xml:space="preserve">
          <source>If either src implements WriterTo or dst implements ReaderFrom, buf will not be used to perform the copy.</source>
          <target state="translated">src が WriterTo を実装している場合と dst が ReaderFrom を実装している場合、buf はコピーを実行するためには使用されません。</target>
        </trans-unit>
        <trans-unit id="81786ec59b1db1b26068cac6cb2b8f77c848e02c" translate="yes" xml:space="preserve">
          <source>If enabled (the default), the Reader expects the input to be a sequence of individually gzipped data streams, each with its own header and trailer, ending at EOF. The effect is that the concatenation of a sequence of gzipped files is treated as equivalent to the gzip of the concatenation of the sequence. This is standard behavior for gzip readers.</source>
          <target state="translated">この機能を有効にすると (デフォルトでは)、 リーダは入力を、それぞれ独自のヘッダとトレーラを持つ、個別に gzip 化されたデータストリームのシーケンスで、EOF で終わるものと期待します。これは、一連の gzip されたファイルを連結したものが、その連結したものを gzip したものと同等に扱われることを意味します。これは gzip リーダの標準的な動作です。</target>
        </trans-unit>
        <trans-unit id="eddf53f9cf1fca82486b2bf4ab21846e817aba06" translate="yes" xml:space="preserve">
          <source>If f calls Run, the result will be an estimate of running all its subbenchmarks that don't call Run in sequence in a single benchmark.</source>
          <target state="translated">fがRunを呼び出した場合、その結果は、Runを呼び出さないすべてのサブベンチマークを1つのベンチマークで順番に実行した場合の推定値となります。</target>
        </trans-unit>
        <trans-unit id="24aa535ef0441b2f9dcbe0e4bbff395ed6067287" translate="yes" xml:space="preserve">
          <source>If f depends on testing flags, then Init must be used to register those flags before calling Benchmark and before calling flag.Parse.</source>
          <target state="translated">fがテストフラグに依存している場合は、Benchmarkを呼び出す前、flag.Parseを呼び出す前に、Initを使用してフラグを登録しなければなりません。</target>
        </trans-unit>
        <trans-unit id="08b53793b968ecc1f35e8cac439169b17517c834" translate="yes" xml:space="preserve">
          <source>If f has a symbol version table, the returned Symbols will have initialized Version and Library fields.</source>
          <target state="translated">fがシンボルのバージョンテーブルを持っている場合、返されたシンボルは、バージョンフィールドとライブラリフィールドが初期化されています。</target>
        </trans-unit>
        <trans-unit id="c8478592007a3bacbc2da6cefaa1115496c485ee" translate="yes" xml:space="preserve">
          <source>If f is a directory, the behavior of Seek varies by operating system; you can seek to the beginning of the directory on Unix-like operating systems, but not on Windows.</source>
          <target state="translated">fがディレクトリの場合、Seekの動作はオペレーティングシステムによって異なります。</target>
        </trans-unit>
        <trans-unit id="d8c9bcc7ac7c9df2b87a2dbabc8c6ec7964d0a03" translate="yes" xml:space="preserve">
          <source>If f panics, Do considers it to have returned; future calls of Do return without calling f.</source>
          <target state="translated">f がパニックになった場合、Do はそれが戻ってきたとみなします。</target>
        </trans-unit>
        <trans-unit id="cfdf3a788dfda0a29c8d0cf447a4cec60c0bc739" translate="yes" xml:space="preserve">
          <source>If file was opened with the O_APPEND flag, WriteAt returns an error.</source>
          <target state="translated">ファイルが O_APPEND フラグでオープンされた場合、WriteAt はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="53e78446111b9259010cce70ef1e63ae6396cc68" translate="yes" xml:space="preserve">
          <source>If filter != nil, only the files with fs.FileInfo entries passing through the filter (and ending in &quot;.go&quot;) are considered. The mode bits are passed to ParseFile unchanged. Position information is recorded in fset, which must not be nil.</source>
          <target state="translated">filter !=nil の場合、fs.FileInfo エントリがフィルタを通過している(かつ、末尾が &quot;.go&quot; である)ファイルのみが対象となる。モードビットは、変更されずに ParseFile に渡される。位置情報は fset に記録され、これは nil であってはならない。</target>
        </trans-unit>
        <trans-unit id="822b75e4d85498d0d8696aa19251040ab86e6e90" translate="yes" xml:space="preserve">
          <source>If filter != nil, only the files with os.FileInfo entries passing through the filter (and ending in &quot;.go&quot;) are considered. The mode bits are passed to ParseFile unchanged. Position information is recorded in fset, which must not be nil.</source>
          <target state="translated">filter !=nil の場合、os.FileInfo エントリがフィルタを通過した (そして &quot;.go&quot; で終わる)ファイルのみが考慮されます。モードビットは変更されずに ParseFile に渡されます。位置情報は fset に記録されますが、これは nil であってはなりません。</target>
        </trans-unit>
        <trans-unit id="78e87476be473e05171bc062a52f2074d7a8ce2f" translate="yes" xml:space="preserve">
          <source>If flush is true, Decode assumes that src represents the end of the input stream and processes it completely rather than wait for the completion of another 32-bit block.</source>
          <target state="translated">flush が真の場合,Decode は src が入力ストリームの終わりを表し,別の 32 ビットブロックの完了を待つのではなく,完全に処理すると仮定します.</target>
        </trans-unit>
        <trans-unit id="abcd3e65f17be630b169b8e4f1f0e366085cdf18" translate="yes" xml:space="preserve">
          <source>If format is a different character, Text returns a &quot;%&quot; followed by the unrecognized format character.</source>
          <target state="translated">フォーマットが別の文字である場合、テキストは&quot;%&quot;の後に認識できないフォーマット文字を返します。</target>
        </trans-unit>
        <trans-unit id="15ac9863fd0dd8dccce7934858d51ea1256592ee" translate="yes" xml:space="preserve">
          <source>If fs implements GlobFS, Glob calls fs.Glob. Otherwise, Glob uses ReadDir to traverse the directory tree and look for matches for the pattern.</source>
          <target state="translated">fs が GlobFS を実装している場合、Glob は fs.Glob を呼び出す。それ以外の場合は、ReadDir を用いてディレクトリツリーを走査し、パターンにマッチするものを探す。</target>
        </trans-unit>
        <trans-unit id="4626bc3890fe37988ea2510caab3c9814ba275ba" translate="yes" xml:space="preserve">
          <source>If fs implements ReadDirFS, ReadDir calls fs.ReadDir. Otherwise ReadDir calls fs.Open and uses ReadDir and Close on the returned file.</source>
          <target state="translated">fsがReadDirFSを実装している場合、ReadDirはfs.ReadDirを呼び出す。それ以外の場合、ReadDir は fs.Open を呼び出し、返却されたファイルに対して ReadDir と Close を使用する。</target>
        </trans-unit>
        <trans-unit id="31f13441b50b357733713ae237e9ae2397173768" translate="yes" xml:space="preserve">
          <source>If fs implements ReadFileFS, ReadFile calls fs.ReadFile. Otherwise ReadFile calls fs.Open and uses Read and Close on the returned file.</source>
          <target state="translated">fsがReadFileFSを実装している場合、ReadFileはfs.ReadFileを呼び出す。それ以外の場合、ReadFile は fs.Open を呼び出し、返されたファイルの Read and Close を使用する。</target>
        </trans-unit>
        <trans-unit id="8ceb2c3429af8803daf0d90e52f7956a596fe7fa" translate="yes" xml:space="preserve">
          <source>If fs implements StatFS, Stat calls fs.Stat. Otherwise, Stat opens the file to stat it.</source>
          <target state="translated">fsがStatFSを実装している場合、Statはfs.Statを呼び出す。そうでない場合、Statはファイルを開いてStatする。</target>
        </trans-unit>
        <trans-unit id="b3469f576be775bc4ec742d95d1dcbeceeba0ae6" translate="yes" xml:space="preserve">
          <source>If fs implements SubFS, Sub calls returns fsys.Sub(dir). Otherwise, if dir is &quot;.&quot;, Sub returns fsys unchanged. Otherwise, Sub returns a new FS implementation sub that, in effect, implements sub.Open(dir) as fsys.Open(path.Join(dir, name)). The implementation also translates calls to ReadDir, ReadFile, and Glob appropriately.</source>
          <target state="translated">fsがSubFSを実装している場合、Subはfsys.Sub(dir)を返す。そうでなければ、dirが&quot;.&quot;であれば、Subはfsysを変更せずに返す。そうでなければ、Subは新しいFS実装subを返し、実質的にsub.Open(dir)を fsys.Open(path.Join(dir,name))として実装する。この実装では、ReadDir、ReadFile、Globの呼び出しも適切に変換される。</target>
        </trans-unit>
        <trans-unit id="5da5429fa2e44a95884b22d9fe6c9389416883fa" translate="yes" xml:space="preserve">
          <source>If id is an embedded struct field, ObjectOf returns the field (*Var) it defines, not the type (*TypeName) it uses.</source>
          <target state="translated">idが埋め込まれた構造体フィールドの場合、ObjectOfは、それが使用する型(*TypeName)ではなく、それが定義したフィールド(*Var)を返します。</target>
        </trans-unit>
        <trans-unit id="94590e2c870c388ec6ffdc4a336f130561479132" translate="yes" xml:space="preserve">
          <source>If implemented, drivers may return the underlying error from queries, even if the connection should be discarded by the connection pool.</source>
          <target state="translated">実装されている場合、ドライバは、接続が接続プールによって破棄されるべきであっても、クエリから基本的なエラーを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="5f15fee8dc8778902e45311fbf0205cb96dcffed" translate="yes" xml:space="preserve">
          <source>If inuseZero is true, the profile includes allocation records where r.AllocBytes &amp;gt; 0 but r.AllocBytes == r.FreeBytes. These are sites where memory was allocated, but it has all been released back to the runtime.</source>
          <target state="translated">inuseZeroがtrueの場合、プロファイルには、r.AllocBytes&amp;gt; 0であるがr.AllocBytes == r.FreeBytesである割り当てレコードが含まれます。これらは、メモリが割り当てられたサイトですが、すべてランタイムに解放されています。</target>
        </trans-unit>
        <trans-unit id="892475b4c6ec1f9a63d5df678595d2602a01d9d3" translate="yes" xml:space="preserve">
          <source>If laddr is nil, a local address is automatically chosen. If the IP field of raddr is nil or an unspecified IP address, the local system is assumed.</source>
          <target state="translated">laddr が nil の場合、ローカルアドレスが自動的に選択されます。raddr の IP フィールドが nil または指定されていない IP アドレスの場合は、ローカルシステムが想定されます。</target>
        </trans-unit>
        <trans-unit id="ba24dc1c2b3bf1cedb83b06f2414cb64ac15d1da" translate="yes" xml:space="preserve">
          <source>If laddr is non-nil, it is used as the local address for the connection.</source>
          <target state="translated">laddrがnilでない場合は、接続のローカルアドレスとして使用されます。</target>
        </trans-unit>
        <trans-unit id="9842a555fc5ba63bad435c92db4ce21af1894ec3" translate="yes" xml:space="preserve">
          <source>If level is in the range [-2, 9] then the error returned will be nil. Otherwise the error returned will be non-nil.</source>
          <target state="translated">レベルが [-2,9]の範囲内にある場合、返されるエラーは nil になります。それ以外の場合は、エラーは nil ではありません。</target>
        </trans-unit>
        <trans-unit id="550da103e5e342ac2c8eff3e35ca3b010db8375f" translate="yes" xml:space="preserve">
          <source>If modtime is not the zero time or Unix epoch, ServeContent includes it in a Last-Modified header in the response. If the request includes an If-Modified-Since header, ServeContent uses modtime to decide whether the content needs to be sent at all.</source>
          <target state="translated">modtimeがゼロタイムまたはUnixエポックでない場合、ServeContentは応答のLast-Modifiedヘッダーにそれを含める。リクエストが If-Modified-Since ヘッダを含む場合、ServeContent は modtime を使用してコンテンツが全く送信される必要があるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="df0b7b2149e75e7925ff056e6fc4f402a865000a" translate="yes" xml:space="preserve">
          <source>If multiple result sets are supported, Rows should implement RowsNextResultSet. If the driver knows how to describe the types present in the returned result it should implement the following interfaces: RowsColumnTypeScanType, RowsColumnTypeDatabaseTypeName, RowsColumnTypeLength, RowsColumnTypeNullable, and RowsColumnTypePrecisionScale. A given row value may also return a Rows type, which may represent a database cursor value.</source>
          <target state="translated">複数の結果セットがサポートされている場合、Rows は RowsNextResultSet を実装しなければなりません。ドライバが返された結果に存在する型を記述する方法を知っている場合は、以下のインターフェイスを実装する必要があります。RowsColumnTypeScanType、RowsColumnTypeDatabaseTypeName、RowsColumnTypeLength、RowsColumnTypeNullable、RowsColumnTypePrecisionScale。指定された行値は、データベースのカーソル値を表すRows型を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="8c6876f56eb90009b843d2c55675ac1e4df7f277" translate="yes" xml:space="preserve">
          <source>If multiple servers are terminating connections for the same host they should all have the same session ticket keys. If the session ticket keys leaks, previously recorded and future TLS connections using those keys might be compromised.</source>
          <target state="translated">複数のサーバが同じホストの接続を終了させている場合、それらのサーバはすべて同じセッションチケットの鍵を持っているはずです。セッションチケットの鍵が漏洩した場合、以前に記録された鍵を使った将来の TLS 接続が危うくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fb36c7496ab365e2e943be0f9148eadc4805b840" translate="yes" xml:space="preserve">
          <source>If n &amp;gt; 0, ReadDir returns at most n DirEntry records. In this case, if ReadDir returns an empty slice, it will return an error explaining why. At the end of a directory, the error is io.EOF.</source>
          <target state="translated">n&amp;gt; 0の場合、ReadDirは最大n個のDirEntryレコードを返します。この場合、ReadDirが空のスライスを返すと、その理由を説明するエラーが返されます。ディレクトリの終わりでは、エラーはio.EOFです。</target>
        </trans-unit>
        <trans-unit id="4498ca26095d9f0afc17fc3d124ee10f9b929767" translate="yes" xml:space="preserve">
          <source>If n &amp;gt; 0, Readdir returns at most n FileInfo structures. In this case, if Readdir returns an empty slice, it will return a non-nil error explaining why. At the end of a directory, the error is io.EOF.</source>
          <target state="translated">n&amp;gt; 0の場合、Readdirは最大でn個のFileInfo構造を返します。この場合、Readdirが空のスライスを返すと、理由を説明するnil以外のエラーが返されます。ディレクトリの最後でのエラーはio.EOFです。</target>
        </trans-unit>
        <trans-unit id="fc3b271d5f3a597b07b28cf1083fa8b465cfe35b" translate="yes" xml:space="preserve">
          <source>If n &amp;gt; 0, Readdirnames returns at most n names. In this case, if Readdirnames returns an empty slice, it will return a non-nil error explaining why. At the end of a directory, the error is io.EOF.</source>
          <target state="translated">n&amp;gt; 0の場合、Readdirnamesは最大でn個の名前を返します。この場合、Readdirnamesが空のスライスを返すと、理由を説明するnil以外のエラーが返されます。ディレクトリの最後でのエラーはio.EOFです。</target>
        </trans-unit>
        <trans-unit id="027dd1e79aacbdc0d0cb972c4a1c88050114f175" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, ReadDir returns all the DirEntry records remaining in the directory. When it succeeds, it returns a nil error (not io.EOF).</source>
          <target state="translated">n &amp;lt;= 0の場合、ReadDirはディレクトリに残っているすべてのDirEntryレコードを返します。成功すると、（io.EOFではなく）nilエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="eac4c3ba5a8c94ad8cb8a4a397c8ee90135cea13" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, Readdir returns all the FileInfo from the directory in a single slice. In this case, if Readdir succeeds (reads all the way to the end of the directory), it returns the slice and a nil error. If it encounters an error before the end of the directory, Readdir returns the FileInfo read until that point and a non-nil error.</source>
          <target state="translated">n &amp;lt;= 0の場合、ReaddirはディレクトリのすべてのFileInfoを単一のスライスで返します。この場合、Readdirが成功（ディレクトリの最後まで読み取り）すると、スライスとnilエラーが返されます。ディレクトリが終了する前にエラーが発生した場合、Readdirはその時点までに読み取られたFileInfoを返し、nil以外のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="c3cc55f92ff37a98b5144ea82d578410d2c8c458" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, Readdirnames returns all the names from the directory in a single slice. In this case, if Readdirnames succeeds (reads all the way to the end of the directory), it returns the slice and a nil error. If it encounters an error before the end of the directory, Readdirnames returns the names read until that point and a non-nil error.</source>
          <target state="translated">n &amp;lt;= 0の場合、Readdirnamesは1つのスライスのディレクトリからすべての名前を返します。この場合、Readdirnamesが成功すると（ディレクトリの最後まで読み取り）、スライスとnilエラーが返されます。ディレクトリが終わる前にエラーが発生した場合、Readdirnamesはその時点までに読み取られた名前と、nil以外のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="2b903f7cf121247bf3e7b3aca6c7022dbb5df0e4" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, no idle connections are retained.</source>
          <target state="translated">n &amp;lt;= 0の場合、アイドル接続は保持されません。</target>
        </trans-unit>
        <trans-unit id="be61ba0537fe2779cebfab91a18a370978aeba0f" translate="yes" xml:space="preserve">
          <source>If n &amp;lt;= 0, then there is no limit on the number of open connections. The default is 0 (unlimited).</source>
          <target state="translated">n &amp;lt;= 0の場合、開いている接続の数に制限はありません。デフォルトは0（無制限）です。</target>
        </trans-unit>
        <trans-unit id="3ffbdba0310e5330b6e39ba21df32f4ec64c1673" translate="yes" xml:space="preserve">
          <source>If name contains no path separators, Command uses LookPath to resolve name to a complete path if possible. Otherwise it uses name directly as Path.</source>
          <target state="translated">名前にパス区切り文字が含まれていない場合、可能であれば、コマンドはLookPathを使用して名前を完全なパスに解決します。それ以外の場合は、名前を直接Pathとして使用します。</target>
        </trans-unit>
        <trans-unit id="bda6ab9657711e238f41fc5c82fabb4f059d8032" translate="yes" xml:space="preserve">
          <source>If named parameters or context are supported, the driver's Conn should implement: ExecerContext, QueryerContext, ConnPrepareContext, and ConnBeginTx.</source>
          <target state="translated">名前付きパラメータやコンテキストがサポートされている場合は、ドライバのConnが実装されている必要があります。ExecerContext、QueryerContext、ConnPrepareContext、および ConnBeginTx を実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e919c20774517f309335e67ee8266068c715cb69" translate="yes" xml:space="preserve">
          <source>If no entry is found, a nil object is returned. In this case, the returned index and indirect values have the following meaning:</source>
          <target state="translated">エントリが見つからない場合は、nil オブジェクトが返されます。この場合、返されたインデックスと間接値は以下の意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="2a51e78e82aff9bdb39269ef8cd918a49b097d8e" translate="yes" xml:space="preserve">
          <source>If opts.Roots is nil and system roots are unavailable the returned error will be of type SystemRootsError.</source>
          <target state="translated">opts.Rootsがnilでシステムルートが利用できない場合、返されるエラーはSystemRootsError型になります。</target>
        </trans-unit>
        <trans-unit id="6ec80a61e5ca904701ff45ad5637a764d8777e22" translate="yes" xml:space="preserve">
          <source>If opts.Roots is nil, the platform verifier might be used, and verification details might differ from what is described below. If system roots are unavailable the returned error will be of type SystemRootsError.</source>
          <target state="translated">opts.Rootsがnilの場合、プラットフォームベリファイアが使用される可能性があり、検証の詳細は以下に説明する内容とは異なるかもしれません。システムルーツが利用できない場合、返されるエラーは SystemRootsError 型になります。</target>
        </trans-unit>
        <trans-unit id="93b29b6dd544ee070bf7867f11c38d0b30ce0f19" translate="yes" xml:space="preserve">
          <source>If p points into an allocated object, it can be advanced through the object by conversion to uintptr, addition of an offset, and conversion back to Pointer.</source>
          <target state="translated">p が割り当てられたオブジェクトを指している場合は,uintptr への変換,オフセットの追加,Pointer への変換により,オブジェクトの中を進むことができます.</target>
        </trans-unit>
        <trans-unit id="9c4a4899af1972effe20bb6d4fb3e2cc68991f24" translate="yes" xml:space="preserve">
          <source>If pc is not covered by any entry in this line table, SeekPC returns ErrUnknownPC. In this case, *entry and the final seek position are unspecified.</source>
          <target state="translated">pcがこの行テーブルのどのエントリにもカバーされていない場合、SeekPCはErrUnknownPCを返します。この場合、*エントリと最終的なシーク位置は指定されません。</target>
        </trans-unit>
        <trans-unit id="400c0cdcf2667212ffa50be895764e1b4992a8e1" translate="yes" xml:space="preserve">
          <source>If pc represents multiple functions because of inlining, it returns the *Func describing the innermost function, but with an entry of the outermost function.</source>
          <target state="translated">pcがインライン化のために複数の関数を表現している場合は、一番内側の関数を記述した*Funcを返しますが、一番外側の関数を記述したエントリを返します。</target>
        </trans-unit>
        <trans-unit id="47b9ebf87a72a4fc29d6e9526a5e472474f83dfe" translate="yes" xml:space="preserve">
          <source>If pc represents multiple functions because of inlining, it returns the a *Func describing the innermost function, but with an entry of the outermost function.</source>
          <target state="translated">pcがインライン化により複数の関数を表現している場合は、最内の関数を記述した*Funcを返しますが、最外の関数のエントリが含まれています。</target>
        </trans-unit>
        <trans-unit id="8759c1ffe2421dc4e493bad121916d1c4a784268" translate="yes" xml:space="preserve">
          <source>If pkg == nil, the Universe scope is used and the provided position pos is ignored. If pkg != nil, and pos is invalid, the package scope is used. Otherwise, pos must belong to the package.</source>
          <target state="translated">pkg ==nil の場合、Universe スコープが使用され、指定された位置 pos は無視されます。pkg !=nil で pos が無効な場合は、package スコープが使用されます。それ以外の場合は、そのパッケージに属している必要があります。</target>
        </trans-unit>
        <trans-unit id="3b501d10f0b3315a0edcb0a3aa0bfa72db3f19b3" translate="yes" xml:space="preserve">
          <source>If pkg was loaded from export data, Imports includes packages that provide package-level objects referenced by pkg. This may be more or less than the set of packages directly imported by pkg's source code.</source>
          <target state="translated">pkg がエクスポートデータから読み込まれた場合、Imports には pkg が参照するパッケージレベルのオブジェクトを提供する packages が含まれます。これは、pkgのソースコードによって直接インポートされたパッケージのセットよりも多いかもしれませんし、少ないかもしれません。</target>
        </trans-unit>
        <trans-unit id="a13dac68b11bffa0323115aff464b296dab14f09" translate="yes" xml:space="preserve">
          <source>If r and s point to different rings, linking them creates a single ring with the elements of s inserted after r. The result points to the element following the last element of s after insertion.</source>
          <target state="translated">r と s が異なるリングを指している場合、それらをリンクすると、r の後に s の要素が挿入された単一のリングが作成されます。</target>
        </trans-unit>
        <trans-unit id="b045896c9ac0e612d840b26fdcd16f9492dfd688" translate="yes" xml:space="preserve">
          <source>If r and s point to the same ring, linking them removes the elements between r and s from the ring. The removed elements form a subring and the result is a reference to that subring (if no elements were removed, the result is still the original value for r.Next(), and not nil).</source>
          <target state="translated">r と s が同じリングを指している場合、それらをリンクすると、リングから r と s の間の要素が削除されます。削除された要素はサブリングを形成し、結果はそのサブリングへの参照となります(要素が削除されていない場合、結果はr.Next()の元の値のままであり、nilではありません)。</target>
        </trans-unit>
        <trans-unit id="8848277c3a29719067a054c042f2cd449fd3596a" translate="yes" xml:space="preserve">
          <source>If rand is not nil then RSA blinding will be used to avoid timing side-channel attacks.</source>
          <target state="translated">randがnilでない場合は、タイミングのサイドチャネル攻撃を避けるためにRSA blindingが使用されます。</target>
        </trans-unit>
        <trans-unit id="a19e63938d7a0894376439e5599ffa43b250a5d4" translate="yes" xml:space="preserve">
          <source>If rt.RoundTrip returns ErrSkipAltProtocol, the Transport will handle the RoundTrip itself for that one request, as if the protocol were not registered.</source>
          <target state="translated">rt.RoundTripがErrSkipAltProtocolを返した場合、プロトコルが登録されていないかのように、トランスポートはその1つのリクエストに対してRoundTrip自体を処理します。</target>
        </trans-unit>
        <trans-unit id="54ad40399e089deda52c88ae3ba4659988c86560" translate="yes" xml:space="preserve">
          <source>If s does not contain sep and sep is not empty, Split returns a slice of length 1 whose only element is s.</source>
          <target state="translated">s が sep を含まず、sep が空でない場合、Split は唯一の要素が s である長さ 1 のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="9daee5dcf8a47681ddd5e5f835fb1dbed1f83aea" translate="yes" xml:space="preserve">
          <source>If s does not contain sep and sep is not empty, SplitAfter returns a slice of length 1 whose only element is s.</source>
          <target state="translated">s が sep を含まず sep が空でない場合、SplitAfter は、唯一の要素が s である長さ 1 のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="9684a535d56fa8216893011aa4860380b4410933" translate="yes" xml:space="preserve">
          <source>If s is not syntactically well-formed, ParseComplex returns err.Err = ErrSyntax.</source>
          <target state="translated">s が構文的に整形されていない場合、ParseComplex は err.Err=ErrSyntax を返します。</target>
        </trans-unit>
        <trans-unit id="95759bb8e19ebcbb98672ac7fdd18943d4708775" translate="yes" xml:space="preserve">
          <source>If s is not syntactically well-formed, ParseFloat returns err.Err = ErrSyntax.</source>
          <target state="translated">s が構文的に整形されていない場合、ParseFloat は err.Err=ErrSyntax を返します。</target>
        </trans-unit>
        <trans-unit id="07f06b052060daddabd04efc8e7cdb5992bfb2f4" translate="yes" xml:space="preserve">
          <source>If s is syntactically well-formed but either component is more than 1/2 ULP away from the largest floating point number of the given component's size, ParseComplex returns err.Err = ErrRange and c = &amp;plusmn;Inf for the respective component.</source>
          <target state="translated">If s is syntactically well-formed but either component is more than 1/2 ULP away from the largest floating point number of the given component's size, ParseComplex returns err.Err = ErrRange and c = &amp;plusmn;Inf for the respective component.</target>
        </trans-unit>
        <trans-unit id="3e257c93b527ddb828e688937de0ccc11edf5f79" translate="yes" xml:space="preserve">
          <source>If s is syntactically well-formed but is more than 1/2 ULP away from the largest floating point number of the given size, ParseFloat returns f = &amp;plusmn;Inf, err.Err = ErrRange.</source>
          <target state="translated">sが構文的に整形式であるが、指定されたサイズの最大の浮動小数点数から1/2 ULP以上離れている場合、ParseFloatはf =&amp;plusmn;Inf、err.Err = ErrRangeを返します。</target>
        </trans-unit>
        <trans-unit id="2958c3475b5e1c01d3ef1742914960b9002f7a9e" translate="yes" xml:space="preserve">
          <source>If sec &amp;gt; 0, the data is sent in the background as with sec &amp;lt; 0. On some operating systems after sec seconds have elapsed any remaining unsent data may be discarded.</source>
          <target state="translated">秒&amp;gt; 0の場合、データは秒&amp;lt;0の場合と同様にバックグラウンドで送信されます。一部のオペレーティングシステムでは、秒秒が経過した後、未送信の残りのデータが破棄される場合があります。</target>
        </trans-unit>
        <trans-unit id="f56f69cce6422c40a21ab01c5418cdbd4bf77063" translate="yes" xml:space="preserve">
          <source>If sec &amp;lt; 0 (the default), the operating system finishes sending the data in the background.</source>
          <target state="translated">sec &amp;lt;0（デフォルト）の場合、オペレーティングシステムはバックグラウンドでのデータ送信を終了します。</target>
        </trans-unit>
        <trans-unit id="d8d3489dffe9a7fe6c9ad9a620bad31395af4507" translate="yes" xml:space="preserve">
          <source>If sec == 0, the operating system discards any unsent or unacknowledged data.</source>
          <target state="translated">sec ==0 の場合、OS は未送信または未認識のデータを破棄します。</target>
        </trans-unit>
        <trans-unit id="be66aebe1a8866a8f4dc281f1bd57616b1f982bc" translate="yes" xml:space="preserve">
          <source>If sep is empty, Split splits after each UTF-8 sequence. If both s and sep are empty, Split returns an empty slice.</source>
          <target state="translated">sep が空の場合、Split は各 UTF-8 シーケンスの後に分割します。s と sep の両方が空の場合、Split は空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="489ca1eca08b1f0a405730583d47d533fb4b076e" translate="yes" xml:space="preserve">
          <source>If sep is empty, SplitAfter splits after each UTF-8 sequence. If both s and sep are empty, SplitAfter returns an empty slice.</source>
          <target state="translated">sep が空の場合、SplitAfter は各 UTF-8 シーケンスの後に分割します。s と sep の両方が空の場合、SplitAfter は空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="2a3657d8164caf54f78f733fc8ef2ecda3905624" translate="yes" xml:space="preserve">
          <source>If src != nil, ParseFile parses the source from src and the filename is only used when recording position information. The type of the argument for the src parameter must be string, []byte, or io.Reader. If src == nil, ParseFile parses the file specified by filename.</source>
          <target state="translated">src !=nil の場合,ParseFile は src からソースを解析し,ファイル名は位置情報を記録する際にのみ使用されます.src パラメータの引数の型は string,[]byte,または io.Reader でなければなりません.src ==nil の場合,ParseFile は filename で指定されたファイルを解析します.</target>
        </trans-unit>
        <trans-unit id="fe8d7fb1ea6082771e2bec41671407fae46d618e" translate="yes" xml:space="preserve">
          <source>If src implements the WriterTo interface, the copy is implemented by calling src.WriteTo(dst). Otherwise, if dst implements the ReaderFrom interface, the copy is implemented by calling dst.ReadFrom(src).</source>
          <target state="translated">src が WriterTo インターフェースを実装している場合,コピーは src.WriteTo(dst)を呼び出すことで実装されます.そうでなければ,dst が ReaderFrom インターフェースを実装している場合,コピーは dst.ReadFrom(src)を呼び出すことで実装されます.</target>
        </trans-unit>
        <trans-unit id="e40b342e6817ab9c3ac4432d840f11c1f0b22325" translate="yes" xml:space="preserve">
          <source>If src is a partial source file, the leading and trailing space of src is applied to the result (such that it has the same leading and trailing space as src), and the result is indented by the same amount as the first line of src containing code. Imports are not sorted for partial source files.</source>
          <target state="translated">srcが部分的なソースファイルの場合,srcの先頭と末尾のスペースが結果に適用され(srcと同じ先頭と末尾のスペースを持つように),その結果は,コードを含むsrcの最初の行と同じ量だけインデントされます.インポートは、部分的なソースファイルに対してはソートされません。</target>
        </trans-unit>
        <trans-unit id="7c67bad25cffc131c00d1eef36d585ec638c9170" translate="yes" xml:space="preserve">
          <source>If srv.Addr is blank, &quot;:http&quot; is used.</source>
          <target state="translated">srv.Addrが空白の場合は&quot;:http &quot;が使われます。</target>
        </trans-unit>
        <trans-unit id="f9e50e1a49136013b88aa780931a141882ea6f39" translate="yes" xml:space="preserve">
          <source>If srv.Addr is blank, &quot;:https&quot; is used.</source>
          <target state="translated">srv.Addrが空白の場合は&quot;:https &quot;が使われます。</target>
        </trans-unit>
        <trans-unit id="ad0892d319e6dc448b8b5b8890782a44c3d82311" translate="yes" xml:space="preserve">
          <source>If successful, tmpl will now be injection-safe. Otherwise, err is an error defined in the docs for ErrorCode.</source>
          <target state="translated">成功すれば、tmplはインジェクションセーフになります。そうでなければ、errはErrorCodeのドキュメントで定義されているエラーです。</target>
        </trans-unit>
        <trans-unit id="451a36f1b0a3d42a37ffc7ced9db73e72d35532d" translate="yes" xml:space="preserve">
          <source>If syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by source position.</source>
          <target state="translated">構文エラーが見つかった場合、結果は部分的なAST(誤ったソースコードの断片を表す ast.Bad*ノードを持つ)になります。複数のエラーは、ソースの位置でソートされた scanner.ErrorList によって返されます。</target>
        </trans-unit>
        <trans-unit id="02f96dee5151e31c5e7cb8d54792d30a40798d8b" translate="yes" xml:space="preserve">
          <source>If that method exists, it returns the memory address which triggered the fault. The results of Addr are best-effort and the veracity of the result may depend on the platform. SetPanicOnFault applies only to the current goroutine. It returns the previous setting.</source>
          <target state="translated">そのメソッドが存在する場合は、障害の原因となったメモリアドレスを返します。Addrの結果はベストエフォートであり、結果の信憑性はプラットフォームに依存する可能性があります。SetPanicOnFaultは、現在のゴルーチンにのみ適用されます。前の設定を返します。</target>
        </trans-unit>
        <trans-unit id="178b407eef387370d388c8cfe01edb64789c6b52" translate="yes" xml:space="preserve">
          <source>If the Client's Transport does not have a CloseIdleConnections method then this method does nothing.</source>
          <target state="translated">クライアントのトランスポートに CloseIdleConnections メソッドがない場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="a2836eacebc948128e4aa3ce4d8b1d3fc7d6a477" translate="yes" xml:space="preserve">
          <source>If the Content-Type header has not been set, Redirect sets it to &quot;text/html; charset=utf-8&quot; and writes a small HTML body. Setting the Content-Type header to any value, including nil, disables that behavior.</source>
          <target state="translated">Content-Typeヘッダが設定されていない場合、Redirectはそれを &quot;text/html;charset=utf-8 &quot;に設定し、小さなHTMLボディを書き込む。Content-Type ヘッダを nil を含む任意の値に設定すると、その動作を無効にします。</target>
        </trans-unit>
        <trans-unit id="3ae6135ca1107639811cd5daef71ae7fca79e2f6" translate="yes" xml:space="preserve">
          <source>If the Context field is 0, the context function is being called to record the current traceback context. It should record in the Context field whatever information is needed about the current point of execution to later produce a stack trace, probably the stack pointer and PC. In this case the context function will be called from C code.</source>
          <target state="translated">Context フィールドが 0 の場合、現在のトレースバックコンテキストを記録するためにコンテキスト関数が呼び出されています。後でスタックトレースを生成するために、現在の実行ポイントについて必要な情報(おそらくスタックポインタとPC)をContextフィールドに記録しなければなりません。この場合、コンテキスト関数は C コードから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="42011269501bbfe9917fe4565b51ba6a042b7ead" translate="yes" xml:space="preserve">
          <source>If the Context field is not 0, then it is a value returned by a previous call to the context function. This case is called when the context is no longer needed; that is, when the Go code is returning to its C code caller. This permits the context function to release any associated resources.</source>
          <target state="translated">コンテキスト フィールドが 0 でない場合は、以前にコンテキスト関数を呼び出したときに返された値になります。このケースは、コンテキストが不要になったとき、つまり囲碁コードがCコードの呼び出し元に戻るときに呼び出されます。これにより、コンテキスト関数は関連するリソースを解放することができます。</target>
        </trans-unit>
        <trans-unit id="084a8ea923e025ba6d8130824462ac823dad2f19" translate="yes" xml:space="preserve">
          <source>If the Delta field of a CaseRange is UpperLower, it means this CaseRange represents a sequence of the form (say) Upper Lower Upper Lower.</source>
          <target state="translated">CaseRangeのDeltaフィールドがUpperLowerの場合、このCaseRangeは(例えば)Upper Lower Upper Lowerという形式のシーケンスを表していることを意味します。</target>
        </trans-unit>
        <trans-unit id="99155dad735e31c1f83383d55994a89a1d5b0d8e" translate="yes" xml:space="preserve">
          <source>If the Go program is started with a non-empty signal mask, that will generally be honored. However, some signals are explicitly unblocked: the synchronous signals, SIGILL, SIGTRAP, SIGSTKFLT, SIGCHLD, SIGPROF, and, on GNU/Linux, signals 32 (SIGCANCEL) and 33 (SIGSETXID) (SIGCANCEL and SIGSETXID are used internally by glibc). Subprocesses started by os.Exec, or by the os/exec package, will inherit the modified signal mask.</source>
          <target state="translated">Goプログラムが空ではないシグナルマスクで開始された場合、通常はそれが尊重されます。しかし、いくつかのシグナルは明示的にブロックが解除されます:同期シグナル、SIGILL、SIGTRAP、SIGSTKFLT、SIGCHLD、SIGPROF、そして GNU/Linux ではシグナル 32 (SIGCANCEL)と 33 (SIGSETXID)です (SIGCANCEL と SIGSETXID は glibc によって内部的に使用されています)。os.Exec または os/exec パッケージによって起動されたサブプロセスは、変更されたシグナルマスクを継承します。</target>
        </trans-unit>
        <trans-unit id="9a19e7607fdf15201f487fc6adac4a654bb31d6b" translate="yes" xml:space="preserve">
          <source>If the Go program is started with either SIGHUP or SIGINT ignored (signal handler set to SIG_IGN), they will remain ignored.</source>
          <target state="translated">囲碁プログラムがSIGHUPまたはSIGINTのいずれかを無視して開始された場合(シグナルハンドラがSIG_IGNに設定されている場合)、これらは無視されたままになります。</target>
        </trans-unit>
        <trans-unit id="bb2401bc392b8c040ae8577c33db0583e1939491" translate="yes" xml:space="preserve">
          <source>If the Go runtime sees an existing signal handler for the SIGCANCEL or SIGSETXID signals (which are used only on GNU/Linux), it will turn on the SA_ONSTACK flag and otherwise keep the signal handler.</source>
          <target state="translated">もしGoランタイムがSIGCANCELまたはSIGSETXIDシグナル(GNU/Linuxでのみ使用される)のための既存のシグナルハンドラを見つけた場合、SA_ONSTACKフラグをオンにし、それ以外の場合はシグナルハンドラを保持します。</target>
        </trans-unit>
        <trans-unit id="b8c9bbe3199fe348a3ebb3c33bad8f777f2557ca" translate="yes" xml:space="preserve">
          <source>If the Go signal handler is invoked on a non-Go thread not running Go code, the handler generally forwards the signal to the non-Go code, as follows. If the signal is SIGPROF, the Go handler does nothing. Otherwise, the Go handler removes itself, unblocks the signal, and raises it again, to invoke any non-Go handler or default system handler. If the program does not exit, the Go handler then reinstalls itself and continues execution of the program.</source>
          <target state="translated">囲碁コードを実行していない非囲碁スレッドで囲碁シグナルハンドラが呼び出された場合、ハンドラは通常、以下のようにシグナルを非囲碁コードに転送します。シグナルが SIGPROF の場合、Go ハンドラは何もしません。そうでなければ、Go ハンドラはそれ自身を削除し、シグナルのブロックを解除し、シグナルを再び発生させて、非Go ハンドラまたはデフォルトのシステムハンドラを呼び出します。プログラムが終了しない場合、Go ハンドラはそれ自身を再インストールし、プログラムの実行を継続します。</target>
        </trans-unit>
        <trans-unit id="d1450a83e799c9f838308f1831ad2410ca5837bc" translate="yes" xml:space="preserve">
          <source>If the IP field of laddr is nil or an unspecified IP address, ListenIP listens on all available IP addresses of the local system except multicast IP addresses.</source>
          <target state="translated">laddrのIPフィールドがnilまたは指定されていないIPアドレスの場合、ListenIPはマルチキャストIPアドレスを除くローカルシステムで利用可能なすべてのIPアドレスをリッスンします。</target>
        </trans-unit>
        <trans-unit id="af82767d02391b6e900db2816b87a4fb9f84a234" translate="yes" xml:space="preserve">
          <source>If the IP field of laddr is nil or an unspecified IP address, ListenTCP listens on all available unicast and anycast IP addresses of the local system. If the Port field of laddr is 0, a port number is automatically chosen.</source>
          <target state="translated">laddr の IP フィールドが nil または指定されていない IP アドレスの場合、ListenTCP はローカルシステムのすべての利用可能なユニキャスト IP アドレスとエ ンジキャスト IP アドレスをリッスンする。laddr の Port フィールドが 0 の場合、ポート番号が自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="af86e9317bf51d088cb071c3ee8a01bff50d7b6b" translate="yes" xml:space="preserve">
          <source>If the IP field of laddr is nil or an unspecified IP address, ListenUDP listens on all available IP addresses of the local system except multicast IP addresses. If the Port field of laddr is 0, a port number is automatically chosen.</source>
          <target state="translated">laddrのIPフィールドがnilまたは指定されていないIPアドレスの場合、ListenUDPはマルチキャストIPアドレスを除くローカルシステムの利用可能なすべてのIPアドレスをリッスンします。laddrのPortフィールドが0の場合、ポート番号が自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="5b648936c52bc2fbcc7b753478ee856cc09da205" translate="yes" xml:space="preserve">
          <source>If the XML name for a struct field is defined by both the field tag and the struct's XMLName field, the names must match.</source>
          <target state="translated">構造体フィールドの XML 名が field タグと構造体の XMLName フィールドの両方で定義されている場合は、名前が一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="5d4098baadc84b2ed5afee57ad7e0f2a2a2618b1" translate="yes" xml:space="preserve">
          <source>If the absolute value of x doesn't fit in buf, FillBytes will panic.</source>
          <target state="translated">x の絶対値が buf に収まらない場合、FillBytes はパニックになります。</target>
        </trans-unit>
        <trans-unit id="3f2bd83aa910968ed65b7f3c442134176bd4b3dd" translate="yes" xml:space="preserve">
          <source>If the base argument is 0, the true base is implied by the string's prefix: 2 for &quot;0b&quot;, 8 for &quot;0&quot; or &quot;0o&quot;, 16 for &quot;0x&quot;, and 10 otherwise. Also, for argument base 0 only, underscore characters are permitted as defined by the Go syntax for integer literals.</source>
          <target state="translated">ベース引数が 0 の場合、真のベースは文字列の接頭辞によって暗示されます。&quot;0b&quot; の場合は 2、&quot;0&quot; または &quot;0o&quot; の場合は 8、&quot;0x&quot; の場合は 16、それ以外の場合は 10 です。また、引数の基底値 0 の場合のみ、整数リテラルの Go 構文で定義されているように、アンダースコア文字が許可されます。</target>
        </trans-unit>
        <trans-unit id="3ef1f744f6bc6158c837d3a4a05d2dd7419e3d5c" translate="yes" xml:space="preserve">
          <source>If the caller has set w's ETag header formatted per RFC 7232, section 2.3, ServeContent uses it to handle requests using If-Match, If-None-Match, or If-Range.</source>
          <target state="translated">発呼側がWのETagヘッダーをRFC7232のセクション2.3に従ってフォーマットしている場合、 ServeContentはそれを使用してIf-Match、If-None-Match、またはIf-Rangeを使用したリクエストを処理する。</target>
        </trans-unit>
        <trans-unit id="7fe34f55752121c99936b8403a6063a8914cb06e" translate="yes" xml:space="preserve">
          <source>If the calling goroutine has locked the operating system thread with runtime.LockOSThread and modified any inheritable OS-level thread state (for example, Linux or Plan 9 name spaces), the new process will inherit the caller's thread state.</source>
          <target state="translated">呼び出し元のゴローチンが runtime.LockOSThread でオペレーティング・システム・スレッドをロックし、継承可能な OS レベルのスレッド状態(Linux や Plan 9 のネームスペースなど)を変更した場合、新しいプロセスは呼び出し元のスレッド状態を継承します。</target>
        </trans-unit>
        <trans-unit id="259a07efdd482c1e280dc36d61c76b7e373057fb" translate="yes" xml:space="preserve">
          <source>If the command fails to run or doesn't complete successfully, the error is of type *ExitError. Other error types may be returned for I/O problems.</source>
          <target state="translated">コマンドの実行に失敗したり、正常に完了しなかった場合、エラーのタイプは *ExitError です。I/O問題の場合は、他のタイプのエラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="b33403be418b27f91a2d42d554ef5c02f7c63947" translate="yes" xml:space="preserve">
          <source>If the command starts but does not complete successfully, the error is of type *ExitError. Other error types may be returned for other situations.</source>
          <target state="translated">コマンドが開始されたが正常に完了しなかった場合、エラーのタイプは *ExitError です。その他の状況では、他のタイプのエラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="5a122d2b8c97a37a880702f2a3fbe016e3749fd3" translate="yes" xml:space="preserve">
          <source>If the current file is sparse, then the regions marked as a hole are read back as NUL-bytes.</source>
          <target state="translated">現在のファイルが疎な場合、ホールとしてマークされた領域は NUL バイトとして読み返されます。</target>
        </trans-unit>
        <trans-unit id="3b03d20f1b9fd110420a18ed294f7f997d1375b2" translate="yes" xml:space="preserve">
          <source>If the deadline is exceeded a call to Read or Write or to other I/O methods will return an error that wraps ErrDeadlineExceeded. This can be tested using errors.Is(err, os.ErrDeadlineExceeded). That error implements the Timeout method, and calling the Timeout method will return true, but there are other possible errors for which the Timeout will return true even if the deadline has not been exceeded.</source>
          <target state="translated">期限を超えた場合、Read や Write、または他の I/O メソッドへの呼び出しは、ErrDeadlineExceeded をラップしたエラーを返します。これは errors.Is(errr,os.ErrDeadlineExceeded)を使ってテストできます。このエラーは Timeout メソッドを実装しており、Timeout メソッドを呼び出すと真を返しますが、他にもデッドラインを超えていなくても Timeout が真を返すエラーがあります。</target>
        </trans-unit>
        <trans-unit id="6253658c1bbbfe0517d9a4b3227473cd894d597c" translate="yes" xml:space="preserve">
          <source>If the directory couldn't be read, a nil map and the respective error are returned. If a parse error occurred, a non-nil but incomplete map and the first error encountered are returned.</source>
          <target state="translated">ディレクトリが読み込めなかった場合は、nil のマップとそれぞれのエラーが返されます。パースエラーが発生した場合は、nil ではないが不完全なマップと最初に発生したエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="01b40bd5ac5583f9db3311853c6994966859d236" translate="yes" xml:space="preserve">
          <source>If the driver supports cursors, a returned Value may also implement the Rows interface in this package. This is used, for example, when a user selects a cursor such as &quot;select cursor(select * from my_table) from dual&quot;. If the Rows from the select is closed, the cursor Rows will also be closed.</source>
          <target state="translated">ドライバがカーソルをサポートしている場合、返される値は、このパッケージのRowsインターフェースも実装することができます。これは、例えば、&quot;select cursor(select*from my_table)from dual &quot;のようなカーソルをユーザが選択するときに使用されます。selectからのRowsがクローズされている場合、カーソルのRowsもクローズされます。</target>
        </trans-unit>
        <trans-unit id="cf50ebb80b297da2b505a620be031cb25dcead76" translate="yes" xml:space="preserve">
          <source>If the format (which is implicitly %v for Println etc.) is valid for a string (%s %q %v %x %X), the following two rules apply:</source>
          <target state="translated">文字列(%s %s %q %v %x %X)に対してフォーマット(Printlnなどでは暗黙のうちに%v)が有効な場合、以下の2つの規則が適用されます。</target>
        </trans-unit>
        <trans-unit id="0f42e25dba03dca0e51f87ed12e981c71373e332" translate="yes" xml:space="preserve">
          <source>If the format specifier includes a %w verb with an error operand, the returned error will implement an Unwrap method returning the operand. It is invalid to include more than one %w verb or to supply it with an operand that does not implement the error interface. The %w verb is otherwise a synonym for %v.</source>
          <target state="translated">フォーマット指定子がエラー・オペランドを持つ %w 動詞を含む場合、返されるエラーは、オペランドを返す Unwrap メソッドを実装します。複数の %w 動詞を含むことや、エラー・インタフェースを実装しないオペランドを指定することは無効です。w 動詞は、それ以外の場合、%v の同義語です。</target>
        </trans-unit>
        <trans-unit id="b70a519f0eee1914e654572a47f9ae5a7a8a3889" translate="yes" xml:space="preserve">
          <source>If the host in the address parameter is not a literal IP address or the port is not a literal port number, ResolveTCPAddr resolves the address to an address of TCP end point. Otherwise, it parses the address as a pair of literal IP address and port number. The address parameter can use a host name, but this is not recommended, because it will return at most one of the host name's IP addresses.</source>
          <target state="translated">address パラメータのホストがリテラル IP アドレスでない場合、またはポートがリテラルポート番号でない場合、ResolveTCPAddr はアドレスを TCP エンドポイントのアドレスに解決します。それ以外の場合は、アドレスをリテラル IP アドレスとポート番号のペアとして解析します。address パラメータにはホスト名を使用することができますが、ホスト名の IP アドレスのうち最大でも 1 つを返すことになるため、これは推奨されません。</target>
        </trans-unit>
        <trans-unit id="60603d4b10b0e1d0e446fdae0a4a44c25a6c45b7" translate="yes" xml:space="preserve">
          <source>If the host in the address parameter is not a literal IP address or the port is not a literal port number, ResolveUDPAddr resolves the address to an address of UDP end point. Otherwise, it parses the address as a pair of literal IP address and port number. The address parameter can use a host name, but this is not recommended, because it will return at most one of the host name's IP addresses.</source>
          <target state="translated">address パラメータのホストがリテラル IP アドレスでない場合、またはポートがリテラルポート番号でない場合、ResolveUDPAddr はアドレスを UDP エンドポイントのアドレスに解決します。それ以外の場合は、アドレスをリテラル IP アドレスとポート番号のペアとして解析します。address パラメータにはホスト名を使用することができますが、ホスト名の IP アドレスのうち最大でも 1 つを返すことになるので、これはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="cd0fc2990a9a9cf8fad81f64436555d3d6b35355" translate="yes" xml:space="preserve">
          <source>If the host in the address parameter is not a literal IP address, ResolveIPAddr resolves the address to an address of IP end point. Otherwise, it parses the address as a literal IP address. The address parameter can use a host name, but this is not recommended, because it will return at most one of the host name's IP addresses.</source>
          <target state="translated">address パラメータのホストがリテラル IP アドレスでない場合、ResolveIPAddr はそのアドレスを IP エンドポイントのアドレスに解決します。それ以外の場合は、アドレスをリテラル IP アドレスとして解析します。address パラメータにはホスト名を使用することができますが、ホスト名の IP アドレスのうち最大でも 1 つを返すことになるため、これは推奨されません。</target>
        </trans-unit>
        <trans-unit id="199da3dce7215d4cebc5f4fd0619e8dbc8fd6d9d" translate="yes" xml:space="preserve">
          <source>If the key type is not a valid map key type (that is, if it does not implement Go's == operator), MapOf panics.</source>
          <target state="translated">キー型が有効なマップ・キー型でない場合 (Go の ==演算子を実装していない場合)、MapOf はパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="fdcae4b6d304718d87888a4b14792a984d6db584" translate="yes" xml:space="preserve">
          <source>If the location cannot be determined (for example, $HOME is not defined), then it will return an error.</source>
          <target state="translated">場所が特定できない場合(例えば、$HOMEが定義されていないなど)は、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="83fc45c3d88185bce6b913b6fba87e76a3564c14" translate="yes" xml:space="preserve">
          <source>If the n = len(p) bytes returned by ReadAt are at the end of the input source, ReadAt may return either err == EOF or err == nil.</source>
          <target state="translated">ReadAt が返す n=len(p)バイトが入力ソースの最後にある場合、ReadAt は err ==EOF または err ==nil を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="96928e9a3e37cddefc97fd6808cb69e209a645f8" translate="yes" xml:space="preserve">
          <source>If the name is &quot;&quot; or &quot;UTC&quot;, LoadLocation returns UTC. If the name is &quot;Local&quot;, LoadLocation returns Local.</source>
          <target state="translated">名前が &quot;&quot; または &quot;UTC&quot; の場合、LoadLocation は UTC を返します。名前が &quot;Local&quot; の場合、LoadLocation は Local を返します。</target>
        </trans-unit>
        <trans-unit id="c79b81e2eaa3eeb8ef94f0d473fa6a78b2eff61b" translate="yes" xml:space="preserve">
          <source>If the name of a slice type ends with &quot;SET&quot; then it's treated as if the &quot;set&quot; tag was set on it. This results in interpreting the type as a SET OF x rather than a SEQUENCE OF x. This can be used with nested slices where a struct tag cannot be given.</source>
          <target state="translated">スライスタイプの名前が &quot;SET &quot;で終わる場合、&quot;SET &quot;タグが設定されているかのように扱われます。これは、構造体タグが与えられない入れ子になったスライスに使用することができます。</target>
        </trans-unit>
        <trans-unit id="71bd5d676aea790d3104c9356a66a88a54f27219" translate="yes" xml:space="preserve">
          <source>If the non-Go code called by the Go program does not change any signal handlers or masks, then the behavior is the same as for a pure Go program.</source>
          <target state="translated">囲碁プログラムによって呼び出された非囲碁コードがシグナルハンドラやマスクを変更しない場合、動作は純粋な囲碁プログラムと同じです。</target>
        </trans-unit>
        <trans-unit id="7ff28c4dacda2b677d57a006ed06c589035c4906" translate="yes" xml:space="preserve">
          <source>If the non-Go code installs a signal handler for any of the asynchronous signals, it may invoke the Go signal handler or not as it chooses. Naturally, if it does not invoke the Go signal handler, the Go behavior described above will not occur. This can be an issue with the SIGPROF signal in particular.</source>
          <target state="translated">非Goコードが非同期信号のシグナルハンドラをインストールした場合、Goシグナルハンドラを呼び出すかどうかは、その選択によります。当然のことながら、Goシグナルハンドラを呼び出さない場合、上述のGoの動作は発生しません。これは、特に SIGPROF シグナルの問題になることがあります。</target>
        </trans-unit>
        <trans-unit id="abd2048f2311a9e6d64b579961e64f72d37d33a6" translate="yes" xml:space="preserve">
          <source>If the non-Go code installs a signal handler for any of the synchronous signals (SIGBUS, SIGFPE, SIGSEGV), then it should record the existing Go signal handler. If those signals occur while executing Go code, it should invoke the Go signal handler (whether the signal occurs while executing Go code can be determined by looking at the PC passed to the signal handler). Otherwise some Go run-time panics will not occur as expected.</source>
          <target state="translated">Go以外のコードが同期信号(SIGBUS、SIGFPE、SIGSEGV)のシグナルハンドラをインストールする場合、既存のGoシグナルハンドラを記録する必要があります。囲碁コードの実行中にこれらのシグナルが発生した場合、囲碁シグナルハンドラを呼び出す必要があります(囲碁コードの実行中にシグナルが発生するかどうかは、シグナルハンドラに渡されたPCを見ることで判断できます)。そうしないと、期待したとおりに囲碁のランタイムパニックが発生しません。</target>
        </trans-unit>
        <trans-unit id="bb19b115a2d359b987ea5bcb60343aca9ae430dd" translate="yes" xml:space="preserve">
          <source>If the non-Go code installs any signal handlers, it must use the SA_ONSTACK flag with sigaction. Failing to do so is likely to cause the program to crash if the signal is received. Go programs routinely run with a limited stack, and therefore set up an alternate signal stack. Also, the Go standard library expects that any signal handlers will use the SA_RESTART flag. Failing to do so may cause some library calls to return &quot;interrupted system call&quot; errors.</source>
          <target state="translated">Go 以外のコードがシグナルハンドラをインストールする場合は、sigaction で SA_ONSTACK フラグを使用する必要があります。これを使用しないと、シグナルを受信したときにプログラムがクラッシュする可能性があります。囲碁プログラムは日常的に限られたスタックで実行されるため、代替のシグナルスタックをセットアップします。また、Go 標準ライブラリは、シグナルハンドラが SA_RESTART フラグを使用することを想定しています。これを使用しないと、一部のライブラリ呼び出しで「システムコールの中断」エラーが返されることがあります。</target>
        </trans-unit>
        <trans-unit id="7e1d203998def7d0f58007e88176f92e21a64b50" translate="yes" xml:space="preserve">
          <source>If the non-Go code starts a new thread, changes the signal mask, and then invokes a Go function in that thread, the Go runtime will automatically unblock certain signals: the synchronous signals, SIGILL, SIGTRAP, SIGSTKFLT, SIGCHLD, SIGPROF, SIGCANCEL, and SIGSETXID. When the Go function returns, the non-Go signal mask will be restored.</source>
          <target state="translated">非Goコードが新しいスレッドを開始し、シグナルマスクを変更し、そのスレッドでGo関数を呼び出した場合、Goランタイムは自動的に特定のシグナルのブロックを解除します:同期シグナル、SIGILL、SIGTRAP、SIGSTKFLT、SIGCHLD、SIGPROF、SIGCANCEL、およびSIGSETXID。Go関数が戻ると、Go以外のシグナルマスクが復元されます。</target>
        </trans-unit>
        <trans-unit id="91074ebc7a3334ebd4f37cdfabaa9ca32fd24f74" translate="yes" xml:space="preserve">
          <source>If the open fails, the error string will be self-explanatory, like</source>
          <target state="translated">オープンに失敗した場合、エラー文字列は次のような自明のものになります。</target>
        </trans-unit>
        <trans-unit id="54fcc24f407eeb4900b5f210d5d49a96c53bb1c9" translate="yes" xml:space="preserve">
          <source>If the prefix of the status does not match the digits in expectCode, ReadCodeLine returns with err set to &amp;amp;Error{code, message}. For example, if expectCode is 31, an error will be returned if the status is not in the range [310,319].</source>
          <target state="translated">ステータスのプレフィックスがexpectCodeの数字と一致しない場合、ReadCodeLineはerrを＆Error {code、message}に設定して戻ります。たとえば、expectCodeが31の場合、ステータスが[310,319]の範囲にない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="86837437a16860a8105279be00bffc491da5bba2" translate="yes" xml:space="preserve">
          <source>If the prefix of the status does not match the digits in expectCode, ReadResponse returns with err set to &amp;amp;Error{code, message}. For example, if expectCode is 31, an error will be returned if the status is not in the range [310,319].</source>
          <target state="translated">ステータスのプレフィックスがexpectCodeの数字と一致しない場合、ReadResponseはerrを＆Error {code、message}に設定して戻ります。たとえば、expectCodeが31の場合、ステータスが[310,319]の範囲にない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="5ebf5ba32952d52f53e121ccb89f42cb9010f630" translate="yes" xml:space="preserve">
          <source>If the program has called Notify to receive SIGPIPE signals, the file descriptor number does not matter. The SIGPIPE signal will be delivered to the Notify channel, and the write will fail with an EPIPE error.</source>
          <target state="translated">プログラムがSIGPIPE信号を受信するためにNotifyを呼び出した場合、ファイルディスクリプター番号は関係ありません。SIGPIPE シグナルは Notify チャネルに配信され、書き込みは EPIPE エラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="7cf239f9c12fb938b9596c568e4f45900dce20bb" translate="yes" xml:space="preserve">
          <source>If the program has not called Notify to receive SIGPIPE signals, then the behavior depends on the file descriptor number. A write to a broken pipe on file descriptors 1 or 2 (standard output or standard error) will cause the program to exit with a SIGPIPE signal. A write to a broken pipe on some other file descriptor will take no action on the SIGPIPE signal, and the write will fail with an EPIPE error.</source>
          <target state="translated">プログラムが SIGPIPE シグナルを受信するために Notify を呼んでいない場合、動作はファイルディスクリプタ番号に依存します。ファイルディスクリプタ 1 または 2 の壊れたパイプへの書き込み(標準出力または標準エラー)は、プログラムを SIGPIPE シグナルで終了させます。他のファイルディスクリプタ上の壊れたパイプへの書き込みは、SIGPIPE シグナルには何も作用せず、書き込みは EPIPE エラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="111ef080bfe5d9de228261353c72d73b391743f0" translate="yes" xml:space="preserve">
          <source>If the program is started with a non-empty signal mask, some signals will be explicitly unblocked as described above. If Notify is called for a blocked signal, it will be unblocked. If, later, Reset is called for that signal, or Stop is called on all channels passed to Notify for that signal, the signal will once again be blocked.</source>
          <target state="translated">プログラムが空でないシグナルマスクで開始された場合、上記のようにいくつかのシグナルが明示的にブロック解除されます。ブロックされたシグナルに対して Notify が呼び出された場合、そのシグナルはブロック解除されます。その後、そのシグナルに対して Reset が呼び出されたり、そのシグナルに対して Notify に渡された全てのチャンネルに対して Stop が呼び出されたりすると、そのシグナルは再びブロックされます。</target>
        </trans-unit>
        <trans-unit id="6b4f665c5cfb9144d49b7e1dcb5bc2df2bfa007a" translate="yes" xml:space="preserve">
          <source>If the program was started with SIGHUP or SIGINT ignored, and Notify is called for either signal, a signal handler will be installed for that signal and it will no longer be ignored. If, later, Reset or Ignore is called for that signal, or Stop is called on all channels passed to Notify for that signal, the signal will once again be ignored. Reset will restore the system default behavior for the signal, while Ignore will cause the system to ignore the signal entirely.</source>
          <target state="translated">プログラムがSIGHUPまたはSIGINTを無視して起動され、どちらかの信号に対してNotifyが呼び出された場合、その信号に対してシグナルハンドラがインストールされ、無視されることはなくなります。その後、そのシグナルに対して Reset または Ignore が呼び出されたり、そのシグナルに対して Notify に渡された全てのチャンネルで Stop が呼び出されたりすると、そのシグナルは再び無視されるようになります。Reset はそのシグナルのシステムのデフォルトの動作を復元し、Ignore はそのシグナルを完全に無視するようにします。</target>
        </trans-unit>
        <trans-unit id="a50b71ad5f04ba376647400ad12d829202f07d7f" translate="yes" xml:space="preserve">
          <source>If the provided body is also an io.Closer, the returned Request.Body is set to body and will be closed by the Client methods Do, Post, and PostForm, and Transport.RoundTrip.</source>
          <target state="translated">提供されたbodyがio.Closerでもある場合、返されたRequest.Bodyはbodyに設定され、クライアントメソッドDo,Post,PostFormとTransport.RoundTripによって閉じられます。</target>
        </trans-unit>
        <trans-unit id="a90f0974cd32b46dcc6c15c91f94c9f93252ae8b" translate="yes" xml:space="preserve">
          <source>If the provided body is an io.Closer, it is closed after the request.</source>
          <target state="translated">提供されたボディがio.Closerの場合、リクエスト後にクローズされます。</target>
        </trans-unit>
        <trans-unit id="76a4a3b11148dd18ae8c95298059edf28df076dc" translate="yes" xml:space="preserve">
          <source>If the provided file or directory name is a relative path, it is interpreted relative to the current directory and may ascend to parent directories. If the provided name is constructed from user input, it should be sanitized before calling ServeFile.</source>
          <target state="translated">提供されたファイル名またはディレクトリ名が相対パスである場合、それはカレントディレクトリからの相対パスとして解釈され、親ディレクトリに昇順する可能性があります。提供された名前がユーザ入力から構築されている場合は、ServeFile を呼び出す前にサニタイズされなければなりません。</target>
        </trans-unit>
        <trans-unit id="4e3cf22a6ffbc844d8cc7293fe5c88e56a31e62d" translate="yes" xml:space="preserve">
          <source>If the provided result precision is 0 (see below), it is set to the precision of the argument with the largest precision value before any rounding takes place, and the rounding mode remains unchanged. Thus, uninitialized Floats provided as result arguments will have their precision set to a reasonable value determined by the operands, and their mode is the zero value for RoundingMode (ToNearestEven).</source>
          <target state="translated">提供された結果の精度が0(下記参照)の場合、丸めが行われる前に最大の精度値を持つ引数の精度に設定され、丸めモードは変更されません。したがって、結果引数として提供される初期化されていない Floats は、その精度がオペランドによって決定される妥当な値に設定され、そのモードは RoundingMode (ToNearestEven)のゼロ値となります。</target>
        </trans-unit>
        <trans-unit id="2b88a75837ac44c3ec57492aadd63fbc336940cb" translate="yes" xml:space="preserve">
          <source>If the request Body's size has not already been limited by MaxBytesReader, the size is capped at 10MB.</source>
          <target state="translated">リクエストBodyのサイズがMaxBytesReaderによって制限されていない場合、サイズは10MBに制限されます。</target>
        </trans-unit>
        <trans-unit id="202ca334b5c1306191933ea4f4be7458350d5dde" translate="yes" xml:space="preserve">
          <source>If the response is multi-line, ReadCodeLine returns an error.</source>
          <target state="translated">レスポンスが複数行の場合、ReadCodeLine はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="cca7e3754527e1fa0174f20268f5f2115cb686b6" translate="yes" xml:space="preserve">
          <source>If the response's Content-Type header is not set, ServeContent first tries to deduce the type from name's file extension and, if that fails, falls back to reading the first block of the content and passing it to DetectContentType. The name is otherwise unused; in particular it can be empty and is never sent in the response.</source>
          <target state="translated">レスポンスのContent-Typeヘッダが設定されていない場合、ServeContentは最初にnameのファイル拡張子から型を推測しようとし、それが失敗した場合は、コンテンツの最初のブロックを読み込んでそれをDetectContentTypeに渡すことに戻ります。nameはそれ以外の場合は使用されません;特に空である可能性があり、レスポンスでは決して送信されません。</target>
        </trans-unit>
        <trans-unit id="4adb610dc4446d1c29fb56aaef6e5c8a55dbd30c" translate="yes" xml:space="preserve">
          <source>If the result is enclosed in square brackets, as literal IPv6 addresses are, the square brackets are removed from the result.</source>
          <target state="translated">リテラルIPv6アドレスのように結果が角括弧で囲まれている場合は、結果から角括弧が削除されます。</target>
        </trans-unit>
        <trans-unit id="46d8ee162d5e124f43ba34e4b526da01d3ba6f66" translate="yes" xml:space="preserve">
          <source>If the result of this process is an empty string, Clean returns the string &quot;.&quot;.</source>
          <target state="translated">この処理の結果が空の文字列の場合、Clean は &quot;.&quot; という文字列を返します。</target>
        </trans-unit>
        <trans-unit id="63039cb93ec1523520a70aa02f8add44a72d2dcc" translate="yes" xml:space="preserve">
          <source>If the resulting type would be larger than the available address space, ArrayOf panics.</source>
          <target state="translated">結果の型が利用可能なアドレス空間よりも大きくなる場合、ArrayOf はパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="49eb9c6b19926a8575c169e52f8df687a6338f21" translate="yes" xml:space="preserve">
          <source>If the returned error is nil, the Response will contain a non-nil Body which the user is expected to close. If the Body is not both read to EOF and closed, the Client's underlying RoundTripper (typically Transport) may not be able to re-use a persistent TCP connection to the server for a subsequent &quot;keep-alive&quot; request.</source>
          <target state="translated">返されたエラーが nil の場合、レスポンスには、ユーザーが閉じることが期待される非 nil のボディが含まれます。ボディがEOFに読み込まれ、クローズされていない場合、クライアントの基礎となるRoundTripper(通常はTransport)は、後続の「キープアライブ」リクエストのためにサーバへの持続的なTCP接続を再利用できない可能性があります。</target>
        </trans-unit>
        <trans-unit id="2bd3e276f21c33ca258e2835ea6ef2502ea92047" translate="yes" xml:space="preserve">
          <source>If the returned token is a keyword, the literal string is the keyword.</source>
          <target state="translated">返されたトークンがキーワードの場合、リテラル文字列がキーワードになります。</target>
        </trans-unit>
        <trans-unit id="d7865630a2cf1e24a8ed7ed472ba9beeb25fa193" translate="yes" xml:space="preserve">
          <source>If the returned token is a literal (token.IDENT, token.INT, token.FLOAT, token.IMAG, token.CHAR, token.STRING) or token.COMMENT, the literal string has the corresponding value.</source>
          <target state="translated">返されたトークンがリテラル(token.IDENT、token.INT、token.FLOAT、token.IMAG、token.CHAR、token.STRING)またはtoken.COMMENTの場合、リテラル文字列は対応する値を持ちます。</target>
        </trans-unit>
        <trans-unit id="7b330824cf4af38e2c2f1237e0044975056d896f" translate="yes" xml:space="preserve">
          <source>If the returned token is token.ILLEGAL, the literal string is the offending character.</source>
          <target state="translated">返されたトークンが token.ILLEGAL の場合、リテラル文字列が違反文字となります。</target>
        </trans-unit>
        <trans-unit id="f2065d9b79fae019bc66ef4f832603a41d2a079f" translate="yes" xml:space="preserve">
          <source>If the returned token is token.SEMICOLON, the corresponding literal string is &quot;;&quot; if the semicolon was present in the source, and &quot;\n&quot; if the semicolon was inserted because of a newline or at EOF.</source>
          <target state="translated">返されたトークンがtoken.SEMICOLONであれば、対応するリテラル文字列は、ソースにセミコロンがあった場合は&quot;;&quot;、改行やEOFでセミコロンが挿入された場合は&quot;\n &quot;となります。</target>
        </trans-unit>
        <trans-unit id="6d82694c27c567dcf0d737897e646720cd59f4a9" translate="yes" xml:space="preserve">
          <source>If the server replies with a redirect, the Client first uses the CheckRedirect function to determine whether the redirect should be followed. If permitted, a 301, 302, or 303 redirect causes subsequent requests to use HTTP method GET (or HEAD if the original request was HEAD), with no body. A 307 or 308 redirect preserves the original HTTP method and body, provided that the Request.GetBody function is defined. The NewRequest function automatically sets GetBody for common standard library body types.</source>
          <target state="translated">サーバがリダイレクトで応答する場合、クライアントは最初に CheckRedirect 関数を使用して、リダイレクトに従うかどうかを判断します。許可されている場合、301、302、303 リダイレクトは、後続のリクエストに HTTP メソッド GET (元のリクエストが HEAD の場合は HEAD)を使用させ、ボディを使用しません。307 または 308 リダイレクトは、Request.GetBody 関数が定義されていれば、元の HTTP メソッドとボディを保持します。NewRequest 関数は、一般的な標準ライブラリのボディタイプ用の GetBody を自動的に設定します。</target>
        </trans-unit>
        <trans-unit id="8bef3b53d6d7bb99946b130aacd06c58001e65ba" translate="yes" xml:space="preserve">
          <source>If the source couldn't be read, the returned AST is nil and the error indicates the specific failure. If the source was read but syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by file position.</source>
          <target state="translated">ソースが読み込めなかった場合は、ASTはnilとなり、エラーは特定の失敗を示します。ソースが読み込まれたが構文エラーが見つかった場合は、部分的なASTが返されます(AST.Bad*ノードは誤ったソースコードの断片を表します)。複数のエラーは、ファイルの位置でソートされた scanner.ErrorList によって返されます。</target>
        </trans-unit>
        <trans-unit id="0ea17fae18048ca3efef70d260f3befe5169300a" translate="yes" xml:space="preserve">
          <source>If the source couldn't be read, the returned AST is nil and the error indicates the specific failure. If the source was read but syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by source position.</source>
          <target state="translated">ソースが読み込めなかった場合は、ASTはnilとなり、エラーは特定の失敗を示します。ソースが読み込まれたが構文エラーが見つかった場合は、部分的なASTが返されます(AST.Bad*ノードは誤ったソースコードの断片を表します)。複数のエラーは、ソースの位置でソートされた scanner.ErrorList によって返されます。</target>
        </trans-unit>
        <trans-unit id="f66a139f57b43b60f302e27759bd0543bc9c0e26" translate="yes" xml:space="preserve">
          <source>If the time has a monotonic clock reading, the returned string includes a final field &quot;m=&amp;plusmn;&amp;lt;value&amp;gt;&quot;, where value is the monotonic clock reading formatted as a decimal number of seconds.</source>
          <target state="translated">時間に単調な時計の読みがある場合、返される文字列には最後のフィールド &quot;m =&amp;plusmn;&amp;lt;value&amp;gt;&quot;が含まれます。ここで、valueは10進数の秒数としてフォーマットされた単調な時計の読みです。</target>
        </trans-unit>
        <trans-unit id="251f36d24e83127f4dd9319d7cdbc49677b94325" translate="yes" xml:space="preserve">
          <source>If the traceback function is called from a signal handler on a Unix system, SigContext will be the signal context argument passed to the signal handler (a C ucontext_t* cast to uintptr_t). This may be used to start tracing at the point where the signal occurred. If the traceback function is not called from a signal handler, SigContext will be zero.</source>
          <target state="translated">トレースバック関数がUnixシステム上のシグナルハンドラから呼び出された場合、SigContextはシグナルハンドラに渡されたシグナルコンテキスト引数(Cのucontext_t*をuintptr_tにキャストしたもの)になります。これはシグナルが発生したポイントでトレースを開始するために使用されます。トレースバック関数がシグナルハンドラから呼び出されない場合、SigContext はゼロになります。</target>
        </trans-unit>
        <trans-unit id="07b1d78b08994662a459431d46bce8768415b25a" translate="yes" xml:space="preserve">
          <source>If the type name of a slice element ends with &quot;SET&quot; then it's treated as if the &quot;set&quot; tag was set on it. This can be used with nested slices where a struct tag cannot be given.</source>
          <target state="translated">slice要素の型名が &quot;set &quot;で終わる場合は、&quot;set &quot;タグが設定されているかのように扱われます。これは、 struct タグを与えることができないネストされたスライスで使用することができます。</target>
        </trans-unit>
        <trans-unit id="b1b298da75673ff2dc00ea6d79d2dbf4f6d4ad81" translate="yes" xml:space="preserve">
          <source>If the type of the first field of a structure is RawContent then the raw ASN1 contents of the struct will be stored in it.</source>
          <target state="translated">構造体の最初のフィールドの型が RawContent の場合、構造体の生の ASN1 コンテンツが格納されます。</target>
        </trans-unit>
        <trans-unit id="94580cf18c0cdda91d151e0855e03334c0926847" translate="yes" xml:space="preserve">
          <source>If there are nested type ids, the types for all inner type ids must be defined before the top-level type id is used to describe an encoded-v.</source>
          <target state="translated">入れ子になった型IDがある場合は、トップレベルの型IDがエンコードされたVを記述するために使用される前に、すべての内部の型IDの型を定義しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a4b08581fb59710f6d84824026b409a7e3fe2aea" translate="yes" xml:space="preserve">
          <source>If there is an error, it will be of type *PathError.</source>
          <target state="translated">エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="d59b10d118f91edc83c197a1ea597908270dd51e" translate="yes" xml:space="preserve">
          <source>If there is no registered handler that applies to the request, Handler returns a &amp;ldquo;page not found&amp;rdquo; handler and an empty pattern.</source>
          <target state="translated">リクエストに適用される登録済みハンドラーがない場合、ハンドラーは「ページが見つかりません」ハンドラーと空のパターンを返します。</target>
        </trans-unit>
        <trans-unit id="1a7ace82b8245bf4439307ba5dfdbd1b825dcfff" translate="yes" xml:space="preserve">
          <source>If there was a problem walking to the file or directory named by path, the incoming error will describe the problem and the function can decide how to handle that error (and Walk will not descend into that directory). In the case of an error, the info argument will be nil. If an error is returned, processing stops. The sole exception is when the function returns the special value SkipDir. If the function returns SkipDir when invoked on a directory, Walk skips the directory's contents entirely. If the function returns SkipDir when invoked on a non-directory file, Walk skips the remaining files in the containing directory.</source>
          <target state="translated">パスで指定されたファイルやディレクトリへの歩行に問題があった場合、入力されたエラーが問題を説明し、関数はそのエラーをどのように処理するかを決定することができます(そして、Walkはそのディレクトリには降りません)。エラーの場合、info 引数は nil になります。エラーが返された場合、処理は停止します。唯一の例外は、関数が特別な値SkipDirを返した場合です。 ディレクトリに対して呼び出されたときにSkipDirを返した場合、Walkはそのディレクトリの内容を完全にスキップします。ディレクトリ以外のファイルに対して SkipDir を返した場合、Walk はディレクトリ内の残りのファイルをスキップします。</target>
        </trans-unit>
        <trans-unit id="b1b4c374c9ed31601280332f5174e595585d5e35" translate="yes" xml:space="preserve">
          <source>If this ClientHelloInfo was passed to a GetConfigForClient or GetCertificate callback, this method will take into account the associated Config. Note that if GetConfigForClient returns a different Config, the change can't be accounted for by this method.</source>
          <target state="translated">この ClientHelloInfo が GetConfigForClient または GetCertificate コールバックに渡された場合、このメソッドは関連する Config を考慮します。GetConfigForClient が異なる Config を返した場合、このメソッドではその変更を考慮できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9f28f83ac01122a6b8eb17da82fc365cf06db186" translate="yes" xml:space="preserve">
          <source>If this compilation unit has no line table, it returns nil, nil.</source>
          <target state="translated">このコンパイルユニットに行テーブルがない場合は、nil,nilを返します。</target>
        </trans-unit>
        <trans-unit id="36cfd61621ceef678850032683735978215f2feb" translate="yes" xml:space="preserve">
          <source>If u.Host doesn't contain a valid numeric port, Port returns an empty string.</source>
          <target state="translated">u.Hostに有効な数値のポートが含まれていない場合、Portは空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="1f16e20c1b2a3c0d7a413b8fa21221a527ff3a01" translate="yes" xml:space="preserve">
          <source>If u.Opaque is non-empty, String uses the first form; otherwise it uses the second form. Any non-ASCII characters in host are escaped. To obtain the path, String uses u.EscapedPath().</source>
          <target state="translated">u.Opaqueが空でない場合、Stringは第1の形式を使用し、そうでない場合は第2の形式を使用します。host内の非ASCII文字はすべてエスケープされます。パスを取得するには、Stringはu.EscapedPath()を使用します。</target>
        </trans-unit>
        <trans-unit id="8013c9355c400aa79a6367baa057f4b9d4888841" translate="yes" xml:space="preserve">
          <source>If used in an unsafe context, then the value might be filtered out:</source>
          <target state="translated">安全でないコンテキストで使用された場合、値はフィルタリングされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="169176f5802d140421e02d07f71892f55914e587" translate="yes" xml:space="preserve">
          <source>If v's Kind is Func, the returned pointer is an underlying code pointer, but not necessarily enough to identify a single function uniquely. The only guarantee is that the result is zero if and only if v is a nil func Value.</source>
          <target state="translated">vのKindがFuncの場合、返されるポインタは基礎となるコードポインタですが、単一の関数を一意に識別するには必ずしも十分ではありません。唯一の保証は、v が nil の func Value である場合に限り、結果が 0 であることです。</target>
        </trans-unit>
        <trans-unit id="ee9b69667b384fa6c8c1419304597f7a05f5dda4" translate="yes" xml:space="preserve">
          <source>If v's Kind is Slice, the returned pointer is to the first element of the slice. If the slice is nil the returned value is 0. If the slice is empty but non-nil the return value is non-zero.</source>
          <target state="translated">vの種類がSliceの場合、返されるポインタはSliceの最初の要素になります。sliceがnilの場合は0が返され、sliceが空でnil以外の場合は0以外の値が返されます。</target>
        </trans-unit>
        <trans-unit id="c1a7d75eac6a2596c340ad7b921676eeff0e25d7" translate="yes" xml:space="preserve">
          <source>If v.Kind() != KindFloat64, this method panics.</source>
          <target state="translated">v.Kind()!=KindFloat64の場合、このメソッドはパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="c84cb549645a9f7d2d471fb47b82da9ad06c732f" translate="yes" xml:space="preserve">
          <source>If v.Kind() != KindFloat64Histogram, this method panics.</source>
          <target state="translated">v.Kind()!=KindFloat64Histogramの場合、このメソッドはパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="1d38af9266598f3f9c2fc36f0c6cb6b077209017" translate="yes" xml:space="preserve">
          <source>If v.Kind() != KindUint64, this method panics.</source>
          <target state="translated">v.Kind()!=KindUint64の場合、このメソッドはパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="ccce50575e90f1da7bb594b206672d76cc0b7fdc" translate="yes" xml:space="preserve">
          <source>If x is prime, ProbablyPrime returns true. If x is chosen randomly and not prime, ProbablyPrime probably returns false. The probability of returning true for a randomly chosen non-prime is at most &amp;frac14;ⁿ.</source>
          <target state="translated">xが素数の場合、ProbablyPrimeはtrueを返します。xが素数ではなくランダムに選択される場合、ProbablyPrimeはおそらくfalseを返します。ランダムに選択された非素数に対してtrueを返す確率は最大で&amp;frac14;ⁿです。</target>
        </trans-unit>
        <trans-unit id="e8a427ffc0c17926670bab4065e96207d4a28d2f" translate="yes" xml:space="preserve">
          <source>If you are not using DefaultServeMux, you will have to register handlers with the mux you are using.</source>
          <target state="translated">DefaultServeMuxを使用していない場合は、使用しているMuxにハンドラを登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="bf8bf41d1552e2a2314c86bbee51c546608c7502" translate="yes" xml:space="preserve">
          <source>If you like, you can bind the flag to a variable using the Var() functions.</source>
          <target state="translated">必要であれば、Var()関数を使ってフラグを変数にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="8a6f437f93f8b5dbc142b89b4316e10878736145" translate="yes" xml:space="preserve">
          <source>If your application is not already running an http server, you need to start one. Add &quot;net/http&quot; and &quot;log&quot; to your imports and the following code to your main function:</source>
          <target state="translated">アプリケーションがまだhttpサーバーを実行していない場合は、httpサーバーを起動する必要があります。インポートに &quot;net/http &quot;と &quot;log &quot;を追加し、メイン関数に以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="e08bef57a6d48a73f233b8062ac1ffdd047f7ffe" translate="yes" xml:space="preserve">
          <source>If z's precision is 0, it is changed to x's precision before the operation. Rounding is performed according to z's precision and rounding mode, but z's accuracy is not computed. Specifically, the result of z.Acc() is undefined.</source>
          <target state="translated">z の精度が 0 の場合、演算前に x の精度に変更されます。z の精度と丸めモードに応じて丸めを行いますが、z の精度は計算されません。具体的には、z.Acc()の結果は不定です。</target>
        </trans-unit>
        <trans-unit id="e7a7bb87f973e19b80ef2f0c235948e2ab80ca50" translate="yes" xml:space="preserve">
          <source>If z's precision is 0, it is changed to x's precision before the operation. Rounding is performed according to z's precision and rounding mode.</source>
          <target state="translated">z の精度が 0 の場合は、演算前に x の精度に変更されます。丸めは z の精度と丸めモードに応じて行います。</target>
        </trans-unit>
        <trans-unit id="bf3bdba69c06f396d015a2e68cfa8b8e0dc2a553" translate="yes" xml:space="preserve">
          <source>If {{.}} is the innocuous word, `left`, then it can appear more widely,</source>
          <target state="translated">もし{{{.}}が無害な言葉である`left`であれば、もっと広く出てくる可能性があります。</target>
        </trans-unit>
        <trans-unit id="35dc1b1b93ecc62032ac0000d9cf5065af4bc463" translate="yes" xml:space="preserve">
          <source>IfNode represents an {{if}} action and its commands.</source>
          <target state="translated">IfNodeは{{{if}}}アクションとそのコマンドを表します。</target>
        </trans-unit>
        <trans-unit id="a40a74611ce76ddfa9aec134c7c4d57d7e7d1a0b" translate="yes" xml:space="preserve">
          <source>Ignore causes the provided signals to be ignored. If they are received by the program, nothing will happen. Ignore undoes the effect of any prior calls to Notify for the provided signals. If no signals are provided, all incoming signals will be ignored.</source>
          <target state="translated">Ignore は、提供された信号を無視します。プログラムが受信した場合は何も起こりません。Ignore は、提供されたシグナルに対する事前の Notify コールの効果を元に戻します。シグナルが提供されない場合、すべての着信シグナルは無視されます。</target>
        </trans-unit>
        <trans-unit id="98d36857a614a1e009d79e216b4eb0d9115f0404" translate="yes" xml:space="preserve">
          <source>Ignored reports whether sig is currently ignored.</source>
          <target state="translated">Ignored は、シグが現在無視されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="4d88a112acad4eaba636cd685d95e848e229a4fb" translate="yes" xml:space="preserve">
          <source>Ilogb returns the binary exponent of x as an integer.</source>
          <target state="translated">Ilogbはxの2進指数を整数として返します。</target>
        </trans-unit>
        <trans-unit id="44e069a8f4a7e1ac23418ede1f9fbec843a967dd" translate="yes" xml:space="preserve">
          <source>Imag returns the imaginary part of x, which must be a numeric or unknown value. If x is Unknown, the result is Unknown.</source>
          <target state="translated">Imag は x の虚数部を返します。xがUnknownの場合、結果はUnknownとなります。</target>
        </trans-unit>
        <trans-unit id="30d40b43edb0bdc3eabf2d534c36f9d06f964b6e" translate="yes" xml:space="preserve">
          <source>Image is a finite rectangular grid of color.Color values taken from a color model.</source>
          <target state="translated">画像は、カラーモデルから取得されたカラー値の有限の長方形のグリッドです。</target>
        </trans-unit>
        <trans-unit id="26d71317c3ede5b3f54e923608b8db6326957a5e" translate="yes" xml:space="preserve">
          <source>Image is an image.Image with a Set method to change a single pixel.</source>
          <target state="translated">Imageは、1ピクセルを変更するためのSetメソッドを持つimage.Imageです。</target>
        </trans-unit>
        <trans-unit id="b146748a0514484acff9fb056c40176e7e0d62af" translate="yes" xml:space="preserve">
          <source>Implementation restriction: The counting forms x{n,m}, x{n,}, and x{n} reject forms that create a minimum or maximum repetition count above 1000. Unlimited repetitions are not subject to this restriction.</source>
          <target state="translated">実装制限。カウンティングフォーム x{n,m},x{n,},x{n}は、最小または最大の繰り返し回数が 1000 回を超えるフォームを拒否します。無制限の繰り返しはこの制限の対象にはなりません。</target>
        </trans-unit>
        <trans-unit id="75c9903908feb1732654db7dd3662c68681cf3c0" translate="yes" xml:space="preserve">
          <source>Implementations must not retain p.</source>
          <target state="translated">実装はpを保持してはならない。</target>
        </trans-unit>
        <trans-unit id="baccfe949bd483e0aa453da0b286a6848971e885" translate="yes" xml:space="preserve">
          <source>Implementations of CookieJar must be safe for concurrent use by multiple goroutines.</source>
          <target state="translated">CookieJarの実装は、複数のゴロチンによる同時使用に対して安全でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2496dd56381c55b51499d5f91502dcff20d2b771" translate="yes" xml:space="preserve">
          <source>Implementations of PublicSuffixList must be safe for concurrent use by multiple goroutines.</source>
          <target state="translated">PublicSuffixList の実装は、複数の goroutines が同時に使用しても安全でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f73bf070b6238c284ef7b4d02061d370d3bb9d34" translate="yes" xml:space="preserve">
          <source>Implementations of Read are discouraged from returning a zero byte count with a nil error, except when len(p) == 0. Callers should treat a return of 0 and nil as indicating that nothing happened; in particular it does not indicate EOF.</source>
          <target state="translated">Readの実装では、len(p)==0の場合を除いて、0バイトカウントとnilエラーを返すことは推奨されていません。 呼び出し側は、0とnilを返すことは何も起きなかったことを示すものとして扱わなければなりません;特にEOFを示すものではありません。</target>
        </trans-unit>
        <trans-unit id="9c4eb58019f122cd6fcd79f868e42855509e5b17" translate="yes" xml:space="preserve">
          <source>Implementations of Token are discouraged from returning a nil token with a nil error. Callers should treat a return of nil, nil as indicating that nothing happened; in particular it does not indicate EOF.</source>
          <target state="translated">Tokenの実装では、nilエラーでnilトークンを返すことは推奨されていません。呼び出し側は nil,nil のリターンを何も起きなかったことを示すものとして扱うべきです。</target>
        </trans-unit>
        <trans-unit id="3b31ef7323ed3ca421b9bab6f7dbaab32c7ce726" translate="yes" xml:space="preserve">
          <source>Implements reports whether type V implements interface T.</source>
          <target state="translated">インプルメントは、V型がインターフェースTを実装しているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="5ba5f70840c67e6a055ce04e03bb2454bb162d9f" translate="yes" xml:space="preserve">
          <source>Import is shorthand for Default.Import.</source>
          <target state="translated">インポートは Default.Import の略です。</target>
        </trans-unit>
        <trans-unit id="6afc9b3e57abb6585be9561d376bdea28ca944ae" translate="yes" xml:space="preserve">
          <source>Import returns details about the Go package named by the import path, interpreting local import paths relative to the srcDir directory. If the path is a local import path naming a package that can be imported using a standard import path, the returned package will set p.ImportPath to that path.</source>
          <target state="translated">Import は、srcDir ディレクトリからの相対的なローカルインポートパスを解釈して、インポートパスで指定された Go パッケージの詳細を返します。パスが標準のインポートパスを使用してインポートできるパッケージを指定したローカルのインポートパスである場合、返されるパッケージは p.ImportPath をそのパスに設定します。</target>
        </trans-unit>
        <trans-unit id="93d88a517c9d75699c2e4045b6e3fc932cd88482" translate="yes" xml:space="preserve">
          <source>ImportDir is like Import but processes the Go package found in the named directory.</source>
          <target state="translated">ImportDir は Import と似ていますが、指定されたディレクトリにある Go パッケージを処理します。</target>
        </trans-unit>
        <trans-unit id="58d6f3af90d9fbc41be2c405bfa8615d93151250" translate="yes" xml:space="preserve">
          <source>ImportDir is shorthand for Default.ImportDir.</source>
          <target state="translated">ImportDirはDefault.ImportDirの略です。</target>
        </trans-unit>
        <trans-unit id="2d321830ed77e3baaf4ac8b7f7efc36408c85002" translate="yes" xml:space="preserve">
          <source>ImportMode is reserved for future use.</source>
          <target state="translated">ImportModeは将来の使用のために予約されています。</target>
        </trans-unit>
        <trans-unit id="81d5bfd42309b64b183f9701f930099193a14426" translate="yes" xml:space="preserve">
          <source>Imported returns the package that was imported. It is distinct from Pkg(), which is the package containing the import statement.</source>
          <target state="translated">Imported は、インポートされたパッケージを返します。これは、インポート文を含むパッケージである Pkg()とは区別されます。</target>
        </trans-unit>
        <trans-unit id="98f8e071166bb5be3aecf52c0312f3d8e38c742a" translate="yes" xml:space="preserve">
          <source>ImportedLibraries returns the names of all libraries referred to by the binary f that are expected to be linked with the binary at dynamic link time.</source>
          <target state="translated">ImportedLibrariesは、ダイナミックリンク時にバイナリとリンクされることが予想されるバイナリfによって参照されるすべてのライブラリの名前を返します。</target>
        </trans-unit>
        <trans-unit id="6d0d053d5be94190ae4125e53a45e74c9bfff903" translate="yes" xml:space="preserve">
          <source>ImportedLibraries returns the paths of all libraries referred to by the binary f that are expected to be linked with the binary at dynamic link time.</source>
          <target state="translated">ImportedLibrariesは、ダイナミックリンク時にバイナリとリンクされると予想されるバイナリfによって参照されるすべてのライブラリのパスを返します。</target>
        </trans-unit>
        <trans-unit id="27f49356d80e117cb6ff37f13e3b8dc616e332cb" translate="yes" xml:space="preserve">
          <source>ImportedSymbols returns the names of all symbols referred to by the binary f that are expected to be satisfied by other libraries at dynamic load time.</source>
          <target state="translated">ImportedSymbolsは、動的ロード時に他のライブラリで満たされると予想されるバイナリfによって参照されるすべてのシンボルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="80301d15602072b275cf4e9d642684ee556fd2a0" translate="yes" xml:space="preserve">
          <source>ImportedSymbols returns the names of all symbols referred to by the binary f that are expected to be satisfied by other libraries at dynamic load time. It does not return weak symbols.</source>
          <target state="translated">ImportedSymbolsは、動的ロード時に他のライブラリで満たされると予想されるバイナリfで参照されるすべてのシンボルの名前を返します。弱いシンボルは返しません。</target>
        </trans-unit>
        <trans-unit id="a7a177ffbe3a55cdc66a04d44c08bbd35566d366" translate="yes" xml:space="preserve">
          <source>Importing this package will increase the size of a program by about 450 KB.</source>
          <target state="translated">このパッケージをインポートすると、プログラムのサイズが約450KB増加します。</target>
        </trans-unit>
        <trans-unit id="d5940cf724f4e1c9daed64775970e063932394d8" translate="yes" xml:space="preserve">
          <source>Importing this package will increase the size of a program by about 800 KB.</source>
          <target state="translated">このパッケージをインポートすると、プログラムのサイズが約800KB増加します。</target>
        </trans-unit>
        <trans-unit id="75eb201c4952cde504ceda9eb34765cbfc018641" translate="yes" xml:space="preserve">
          <source>Imports returns the list of packages directly imported by pkg; the list is in source order.</source>
          <target state="translated">Imports は pkg によって直接インポートされた packages のリストを返します。</target>
        </trans-unit>
        <trans-unit id="cb7bc76d7380682c92ffb45e3be0edf510619c0c" translate="yes" xml:space="preserve">
          <source>In C syntax, this struct will be</source>
          <target state="translated">C の構文では、この構造体は</target>
        </trans-unit>
        <trans-unit id="031e67b82062bc206ba16bfbb78969301350778f" translate="yes" xml:space="preserve">
          <source>In Go 1 and Go 1.1, each package produced one Obj for all Go sources and one Obj per C source file.</source>
          <target state="translated">Go 1とGo 1.1では、各パッケージはすべてのGoソースに対して1つのObjを、Cソースファイルに対して1つのObjを生成していました。</target>
        </trans-unit>
        <trans-unit id="f1a4145c4d681021c6b688a748d3fd850af7e56f" translate="yes" xml:space="preserve">
          <source>In Go 1.1 and earlier, each function (represented by a Func) had its own LineTable, and the line number corresponded to a numbering of all source lines in the program, across all files. That absolute line number would then have to be converted separately to a file name and line number within the file.</source>
          <target state="translated">Go 1.1以前のバージョンでは、各関数(Funcで表される)は独自のLineTableを持っており、行番号はプログラム内のすべてのソース行のナンバリングに対応していました。この絶対的な行番号は、ファイル内のファイル名と行番号に個別に変換しなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="35c4a15e4a2e0d9709fe9d9d2d8891336f5119ee" translate="yes" xml:space="preserve">
          <source>In Go 1.12 and earlier, it was possible to distribute packages in binary form without including the source code used for compiling the package. The package was distributed with a source file not excluded by build constraints and containing a &quot;//go:binary-only-package&quot; comment. Like a build constraint, this comment appeared at the top of a file, preceded only by blank lines and other line comments and with a blank line following the comment, to separate it from the package documentation. Unlike build constraints, this comment is only recognized in non-test Go source files.</source>
          <target state="translated">Go 1.12 以前のバージョンでは、パッケージのコンパイルに使用したソースコードを含まずにバイナリ形式でパッケージを配布することが可能でした。パッケージは、ビルド制約によって除外されず、&quot;//go:binary-only-package&quot; コメントを含むソースファイルとともに配布されました。ビルド制約と同様に、このコメントはファイルの先頭に表示され、空行や他の行のコメントのみが先行し、コメントの後に空行が続くことで、パッケージのドキュメントから分離されていました。ビルド制約とは異なり、このコメントはテスト用ではない Go ソースファイルでのみ認識されます。</target>
        </trans-unit>
        <trans-unit id="cc8775c16cc6c9f67e9f67d2c4b9b38bd2343802" translate="yes" xml:space="preserve">
          <source>In Go 1.2, the format of the data changed so that there is a single LineTable for the entire program, shared by all Funcs, and there are no absolute line numbers, just line numbers within specific files.</source>
          <target state="translated">Go 1.2では、データのフォーマットが変更され、すべてのFuncで共有されるプログラム全体の単一のLineTableが存在し、絶対的な行番号はなく、特定のファイル内の行番号だけが存在するようになりました。</target>
        </trans-unit>
        <trans-unit id="94c3f9b8a2f1195c43f29bc6d1587c741d49bcbe" translate="yes" xml:space="preserve">
          <source>In Go 1.2, there is a single Obj for the entire program.</source>
          <target state="translated">Go 1.2では、プログラム全体に1つのObjがあります。</target>
        </trans-unit>
        <trans-unit id="fc1a1510c05c5e605f2bf42bab100aff6fd4f01e" translate="yes" xml:space="preserve">
          <source>In Printf, Sprintf, and Fprintf, the default behavior is for each formatting verb to format successive arguments passed in the call. However, the notation [n] immediately before the verb indicates that the nth one-indexed argument is to be formatted instead. The same notation before a '*' for a width or precision selects the argument index holding the value. After processing a bracketed expression [n], subsequent verbs will use arguments n+1, n+2, etc. unless otherwise directed.</source>
          <target state="translated">Printf、Sprintf、およびFprintfでは、デフォルトの動作は、各書式設定動詞が、呼び出しで渡された連続した引数を書式設定することです。しかし、動詞の直前にある[n]という記法は、インデックスの付いた n 番目の引数が代わりにフォーマットされることを示しています。幅または精度を表す '*' の前の同じ表記法は、値を保持する引数インデックスを選択します。括弧付き式[n]を処理した後、後続の動詞は、特に指示がない限り、引数n+1、n+2などを使用します。</target>
        </trans-unit>
        <trans-unit id="6f69301b556dc9f571bc4bb3612422a63af49e86" translate="yes" xml:space="preserve">
          <source>In TLS 1.3, this type is called NamedGroup, but at this time this library only supports Elliptic Curve based groups. See RFC 8446, Section 4.2.7.</source>
          <target state="translated">TLS 1.3 では、このタイプは NamedGroup と呼ばれていますが、現時点では、このライブラリは楕円曲線ベースのグループのみをサポートしています。RFC 8446 のセクション 4.2.7 を参照してください。</target>
        </trans-unit>
        <trans-unit id="93a2aff531fe6a26d094463bdd12d8ce980726db" translate="yes" xml:space="preserve">
          <source>In a Go program that includes non-Go code, typically C/C++ code accessed using cgo or SWIG, Go's startup code normally runs first. It configures the signal handlers as expected by the Go runtime, before the non-Go startup code runs. If the non-Go startup code wishes to install its own signal handlers, it must take certain steps to keep Go working well. This section documents those steps and the overall effect changes to signal handler settings by the non-Go code can have on Go programs. In rare cases, the non-Go code may run before the Go code, in which case the next section also applies.</source>
          <target state="translated">Go 以外のコード、通常は cgo または SWIG を使用してアクセスする C/C++コードを含む Go プログラムでは、通常、Go のスタートアップコードが最初に実行されます。これは、Go ランタイムによって期待されるシグナルハンドラを設定し、非Go スタートアップコードが実行される前に実行します。Go 以外のスタートアップコードが独自のシグナルハンドラをインストールしたい場合は、Go の動作を維持するために特定のステップを踏まなければなりません。このセクションでは、これらのステップと、Go 以外のコードによるシグナルハンドラ設定の変更が Go プログラムに与える全体的な影響について説明します。まれに、Go 以外のコードが Go コードよりも先に実行されることがありますが、その場合は次のセクションも適用されます。</target>
        </trans-unit>
        <trans-unit id="b709a8b5c95be5a899a7612ec04af9fcd8c6fe68" translate="yes" xml:space="preserve">
          <source>In addition to adding the HTTP handler, this package registers the following variables:</source>
          <target state="translated">HTTP ハンドラの追加に加えて、本パッケージは以下の変数を登録します。</target>
        </trans-unit>
        <trans-unit id="c7232c786e65fae897885a5d1905f0858ffd2ae2" translate="yes" xml:space="preserve">
          <source>In addition to the required &amp;ldquo;wall clock&amp;rdquo; reading, a Time may contain an optional reading of the current process's monotonic clock, to provide additional precision for comparison or subtraction. See the &amp;ldquo;Monotonic Clocks&amp;rdquo; section in the package documentation for details.</source>
          <target state="translated">Timeには、必要な「ウォールクロック」の読み取り値に加えて、現在のプロセスの単調クロックのオプションの読み取り値が含まれ、比較または減算の精度が向上します。詳細については、パッケージドキュメントの「単調時計」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="965439857efd394443e37d36ace60b7ac7d83473" translate="yes" xml:space="preserve">
          <source>In addition to the struct tags recognised by Unmarshal, the following can be used:</source>
          <target state="translated">Unmarshalが認識するstructタグに加えて、以下のようなものを使用することができます。</target>
        </trans-unit>
        <trans-unit id="d07fa607208161c419b4aff2675e4f243b41086c" translate="yes" xml:space="preserve">
          <source>In all other cases, Scan returns an empty literal string.</source>
          <target state="translated">それ以外の場合、Scan は空のリテラル文字列を返します。</target>
        </trans-unit>
        <trans-unit id="dc451d8d43456b62826bda28dfbc96cdb2eb2524" translate="yes" xml:space="preserve">
          <source>In all the scanning functions, a carriage return followed immediately by a newline is treated as a plain newline (\r\n means the same as \n).</source>
          <target state="translated">全てのスキャニング機能では、キャリッジリターンの後に改行が続くと、プレーンな改行として扱われます(\r\nは、\nと同じ意味です)。</target>
        </trans-unit>
        <trans-unit id="fedccbf24f7f68d8101f599e3218a03c5ffaf765" translate="yes" xml:space="preserve">
          <source>In all the scanning functions, if an operand implements method Scan (that is, it implements the Scanner interface) that method will be used to scan the text for that operand. Also, if the number of arguments scanned is less than the number of arguments provided, an error is returned.</source>
          <target state="translated">全てのスキャン関数において、オペランドがScanメソッドを実装している場合(つまり、Scannerインターフェースを実装している場合)、そのメソッドは、そのオペランドのテキストをスキャンするために使用されます。また、スキャンされた引数の数が提供された引数の数よりも少ない場合は、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="a1bf502195aaabff9af8feae702eb1ba2c806b3d" translate="yes" xml:space="preserve">
          <source>In an ErrorList, an error is represented by an *Error. The position Pos, if valid, points to the beginning of the offending token, and the error condition is described by Msg.</source>
          <target state="translated">ErrorListでは、エラーは*Errorで表されます。Pos の位置が有効であれば、問題のあるトークンの先頭を指し、エラーの状態は Msg で記述されます。</target>
        </trans-unit>
        <trans-unit id="c43ce5959f73c41a703ce648d64371023d38a1e1" translate="yes" xml:space="preserve">
          <source>In early versions of Go each source file became a different Obj.</source>
          <target state="translated">Goの初期バージョンでは、各ソースファイルは別のObjになっていました。</target>
        </trans-unit>
        <trans-unit id="42a68547a9dca9735cb7eba8147953340f09b72e" translate="yes" xml:space="preserve">
          <source>In effect, the method must look schematically like</source>
          <target state="translated">実際には、メソッドは次のように模式的に表示されなければなりません。</target>
        </trans-unit>
        <trans-unit id="b72051420981768a1127b1640516d07dc80b1c1a" translate="yes" xml:space="preserve">
          <source>In general DeepEqual is a recursive relaxation of Go's == operator. However, this idea is impossible to implement without some inconsistency. Specifically, it is possible for a value to be unequal to itself, either because it is of func type (uncomparable in general) or because it is a floating-point NaN value (not equal to itself in floating-point comparison), or because it is an array, struct, or interface containing such a value. On the other hand, pointer values are always equal to themselves, even if they point at or contain such problematic values, because they compare equal using Go's == operator, and that is a sufficient condition to be deeply equal, regardless of content. DeepEqual has been defined so that the same short-cut applies to slices and maps: if x and y are the same slice or the same map, they are deeply equal regardless of content.</source>
          <target state="translated">一般的にDeepEqualはGoの==演算子の再帰的緩和です。しかし、この考えは、いくつかの矛盾を抜きにして実装することは不可能です。具体的には、値が func 型(一般的には比較できない)であるか、浮動小数点の NaN 値(浮動小数点比較では自分自身とは等しくない)であるか、またはそのような値を含む配列、構造体、インターフェースであるかのいずれかの理由で、値が自分自身と不等しくなる可能性があります。一方、ポインタの値は、たとえそのような問題のある値を指していたり、そのような値を含んでいたりしても、常にそれ自身と等しくなります。DeepEqualは、スライスやマップにも同じショートカットが適用されるように定義されています:xとyが同じスライスまたは同じマップであれば、内容に関係なく深く等しくなります。</target>
        </trans-unit>
        <trans-unit id="07b960c708d879d40875264c73a08a0683383d6b" translate="yes" xml:space="preserve">
          <source>In general, a given attribute's value may take on one of several possible classes defined by DWARF, each of which leads to a slightly different interpretation of the attribute.</source>
          <target state="translated">一般的に、与えられた属性の値は、DWARFによって定義されたいくつかの可能性のあるクラスのうちの1つを取ることができ、それぞれが属性のわずかに異なる解釈をもたらします。</target>
        </trans-unit>
        <trans-unit id="2e9ecaaf397056078378f799dda9c4e1072c7928" translate="yes" xml:space="preserve">
          <source>In general, a gzip file can be a concatenation of gzip files, each with its own header. Reads from the Reader return the concatenation of the uncompressed data of each. Only the first header is recorded in the Reader fields.</source>
          <target state="translated">一般に、gzipファイルは、それぞれが独自のヘッダを持つgzipファイルの連結体になる。リーダーからの読み込みは、それぞれの非圧縮データの連結体を返す。Readerのフィールドには、最初のヘッダのみが記録されます。</target>
        </trans-unit>
        <trans-unit id="b6ffd0a95c8557850de7ace105d0c02e95a18d70" translate="yes" xml:space="preserve">
          <source>In general, if allocation is required, the decoder will allocate memory. If not, it will update the destination variables with values read from the stream. It does not initialize them first, so if the destination is a compound value such as a map, struct, or slice, the decoded values will be merged elementwise into the existing variables.</source>
          <target state="translated">一般的に、割り当てが必要な場合、デコーダはメモリを割り当てます。そうでない場合は、ストリームから読み込んだ値で宛先変数を更新します。最初にそれらを初期化することはありませんので、宛先がマップ、構造体、スライスなどの複合値の場合、デコードされた値は既存の変数に要素ごとにマージされます。</target>
        </trans-unit>
        <trans-unit id="d1a73603a88217147c68ec9c324a3f4cba1ebddc" translate="yes" xml:space="preserve">
          <source>In general, reflect.SliceHeader and reflect.StringHeader should be used only as *reflect.SliceHeader and *reflect.StringHeader pointing at actual slices or strings, never as plain structs. A program should not declare or allocate variables of these struct types.</source>
          <target state="translated">一般的に、Reflect.SliceHeader と reflect.StringHeader は、実際のスライスまたは文字列を指す *reflect.SliceHeader と *reflect.StringHeader としてのみ使用し、プレーン構造体としては使用しないでください。プログラムは、これらの構造体型の変数を宣言したり、割り当てたりしてはいけません。</target>
        </trans-unit>
        <trans-unit id="99dc4b6fd44a858b786d20b64de92f5f16319ca0" translate="yes" xml:space="preserve">
          <source>In general, the GHASH operation performed by this implementation of GCM is not constant-time. An exception is when the underlying Block was created by aes.NewCipher on systems with hardware support for AES. See the crypto/aes package documentation for details.</source>
          <target state="translated">一般に、この実装の GCM によって実行される GHASH 操作は一定時間ではありません。例外は、AES をハードウェアでサポートしているシステムで、基礎となるブロックが aes.NewCipher によって作成された場合です。詳細は、crypto/aes パッケージのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="63a94d50c6e71995bfdddbf6d3b7ddbbd572fca1" translate="yes" xml:space="preserve">
          <source>In most cases, new(Buffer) (or just declaring a Buffer variable) is sufficient to initialize a Buffer.</source>
          <target state="translated">ほとんどの場合、バッファを初期化するにはnew(Buffer)(またはBuffer変数を宣言するだけ)で十分です。</target>
        </trans-unit>
        <trans-unit id="ce6abe6e4a1757599621f3d92af6850089e3e51d" translate="yes" xml:space="preserve">
          <source>In non-HTML settings where the escaping interferes with the readability of the output, SetEscapeHTML(false) disables this behavior.</source>
          <target state="translated">エスケープが出力の可読性を妨げる非HTML設定では、SetEscapeHTML(false)でこの動作を無効にします。</target>
        </trans-unit>
        <trans-unit id="7077ca93ebf4ef49120708550f14d220620ccf80" translate="yes" xml:space="preserve">
          <source>In panics if loc is nil.</source>
          <target state="translated">locがnilの場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="f52d38c87623b45c8b7767cba23884c87bb2c3a8" translate="yes" xml:space="preserve">
          <source>In particular, it implements LZW as used by the GIF and PDF file formats, which means variable-width codes up to 12 bits and the first two non-literal codes are a clear code and an EOF code.</source>
          <target state="translated">特に、GIFやPDFファイルフォーマットで使用されているLZWを実装しており、最大12ビットまでの可変幅コードと、最初の2つの非リテラルコードはクリアコードとEOFコードです。</target>
        </trans-unit>
        <trans-unit id="4026aa85ef00c786dfe0c796e4b667cd2644b68d" translate="yes" xml:space="preserve">
          <source>In performance critical applications, Reset can be used to discard the current compressor or decompressor state and reinitialize them quickly by taking advantage of previously allocated memory.</source>
          <target state="translated">パフォーマンスが重要なアプリケーションでは、リセットを使用して現在のコンプレッサまたはデコンプレッサの状態を破棄し、以前に割り当てられたメモリを利用して迅速に再初期化することができます。</target>
        </trans-unit>
        <trans-unit id="6db233d0c99db26b8c12c611c05604abfea98d46" translate="yes" xml:space="preserve">
          <source>In reports whether every point in r is in s.</source>
          <target state="translated">r のすべての点が s の中にあるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="84fe4eae8d319a1913e35010d51f1271fd7ded56" translate="yes" xml:space="preserve">
          <source>In reports whether p is in r.</source>
          <target state="translated">p が r にあるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="0fd55e418f00485b3f2efc5b428b0418b6a94be8" translate="yes" xml:space="preserve">
          <source>In reports whether the rune is a member of one of the ranges.</source>
          <target state="translated">ルーンがいずれかの範囲のメンバーであるかどうかを報告する。</target>
        </trans-unit>
        <trans-unit id="472b3dea5785c77ec21b439277ea93730e47a2be" translate="yes" xml:space="preserve">
          <source>In returns a copy of t representing the same time instant, but with the copy's location information set to loc for display purposes.</source>
          <target state="translated">In は、同じ時間の瞬間を表す t のコピーを返しますが、そのコピーの位置情報は表示のために loc に設定されています。</target>
        </trans-unit>
        <trans-unit id="711d8c9ceb05e3476e4192e2fd5e66ccc3b3ba1b" translate="yes" xml:space="preserve">
          <source>In slices and arrays, as well as maps, all elements, even zero-valued elements, are transmitted, even if all the elements are zero.</source>
          <target state="translated">スライスや配列では、マップと同様に、すべての要素がゼロ値の要素であっても、すべての要素が送信されます。</target>
        </trans-unit>
        <trans-unit id="9f17f1b7292d381dce79c4e2b9b83d7f1d5da96e" translate="yes" xml:space="preserve">
          <source>In summary, a gob stream looks like</source>
          <target state="translated">まとめると、ゴブの流れは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2d78ddedbd337c0bea6888e7055a4838325b74f8" translate="yes" xml:space="preserve">
          <source>In the $name form, name is taken to be as long as possible: $1x is equivalent to ${1x}, not ${1}x, and, $10 is equivalent to ${10}, not ${1}0.</source>
          <target state="translated">1xは${1}xではなく${1x}に相当し、$10は${1}0ではなく${10}に相当します。</target>
        </trans-unit>
        <trans-unit id="37a0ec0d20103e0c83570c4610c7755ff7ac53c0" translate="yes" xml:space="preserve">
          <source>In the absence of a time zone indicator, Parse returns a time in UTC.</source>
          <target state="translated">タイムゾーンインジケータがない場合、Parse は UTC での時刻を返します。</target>
        </trans-unit>
        <trans-unit id="b029486adc899e6b2e4bce186582f459ceb89a34" translate="yes" xml:space="preserve">
          <source>In the directory containing the package, .go, .c, .h, and .s files are considered part of the package except for:</source>
          <target state="translated">パッケージを含むディレクトリでは、.go、.c、.h、.sファイルはパッケージの一部とみなされますが、それ以外はパッケージの一部とみなされます。</target>
        </trans-unit>
        <trans-unit id="fa1c6c88c18a52fe6d2731df7b2ac739dc65317f" translate="yes" xml:space="preserve">
          <source>In the format string, a verb introduced by the % character consumes and parses input; these verbs are described in more detail below. A character other than %, space, or newline in the format consumes exactly that input character, which must be present. A newline with zero or more spaces before it in the format string consumes zero or more spaces in the input followed by a single newline or the end of the input. A space following a newline in the format string consumes zero or more spaces in the input. Otherwise, any run of one or more spaces in the format string consumes as many spaces as possible in the input. Unless the run of spaces in the format string appears adjacent to a newline, the run must consume at least one space from the input or find the end of the input.</source>
          <target state="translated">フォーマット文字列では、% 文字によって導入された動詞が入力を消費して解析します。フォーマット内の %、スペース、または改行以外の文字は、その入力文字を正確に消費します。フォーマット文字列の前にゼロまたはそれ以上のスペースを持つ改行は、入力中のゼロまたはそれ以上のスペースを消費し、その後に1つの改行が続くか、または入力の終わりになります。フォーマット文字列中の改行に続くスペースは、入力中に0個以上のスペースを消費します。それ以外の場合は、フォーマット文字列の中の1つ以上のスペースの実行は、入力の中で可能な限り多くのスペースを消費します。フォーマット文字列内のスペースの実行が改行に隣接していない限り、その実行は入力から少なくとも1つのスペースを消費するか、入力の終わりを見つけなければならない。</target>
        </trans-unit>
        <trans-unit id="ed1a2050a365f5d52ef37144115d11517ff42bc2" translate="yes" xml:space="preserve">
          <source>In the most simple case, if the type of the value from the source column is an integer, bool or string type T and dest is of type *T, Scan simply assigns the value through the pointer.</source>
          <target state="translated">最も単純なケースでは、ソースカラムからの値の型が整数、bool、または文字列で、destの型が*Tの場合、Scanは単にポインタを介して値を代入します。</target>
        </trans-unit>
        <trans-unit id="5c811352496639bcd7be1278e40839e6992f883a" translate="yes" xml:space="preserve">
          <source>In the second form, the following rules apply:</source>
          <target state="translated">第2の形態では、以下のようなルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="9ca6beb2058ca8ef81c9dbee1705e13b3578af1f" translate="yes" xml:space="preserve">
          <source>In the template, a variable is denoted by a substring of the form $name or ${name}, where name is a non-empty sequence of letters, digits, and underscores. A purely numeric name like $1 refers to the submatch with the corresponding index; other names refer to capturing parentheses named with the (?P&amp;lt;name&amp;gt;...) syntax. A reference to an out of range or unmatched index or a name that is not present in the regular expression is replaced with an empty slice.</source>
          <target state="translated">テンプレートでは、変数は$ nameまたは$ {name}の形式の部分文字列で表されます。ここで、nameは空ではない文字、数字、およびアンダースコアのシーケンスです。 $ 1のような純粋に数値の名前は、対応するインデックスとのサブマッチを指します。他の名前は、（？P &amp;lt;name&amp;gt; ...）構文で名前が付けられた括弧をキャプチャすることを指します。範囲外、一致しないインデックス、または正規表現に存在しない名前への参照は、空のスライスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="5a1c160af25c73f96bab58b7ac18692fbbe1ffa1" translate="yes" xml:space="preserve">
          <source>In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH.</source>
          <target state="translated">zlib ライブラリの用語では、Flush は Z_SYNC_FLUSH と同等です。</target>
        </trans-unit>
        <trans-unit id="2dd7b02fa4aa241d6b5f4aad090e1521eaf7af73" translate="yes" xml:space="preserve">
          <source>In this usage hdr.Data is really an alternate way to refer to the underlying pointer in the string header, not a uintptr variable itself.</source>
          <target state="translated">この使用法では、hdr.Dataは文字列ヘッダ内のポインタを参照する別の方法であり、uintptr変数そのものを参照するものではありません。</target>
        </trans-unit>
        <trans-unit id="b66dfbc84a8b6f209be163efb64c95ba40440449" translate="yes" xml:space="preserve">
          <source>InUseBytes returns the number of bytes in use (AllocBytes - FreeBytes).</source>
          <target state="translated">InUseBytes は、使用中のバイト数(AllocBytes-FreeBytes)を返します。</target>
        </trans-unit>
        <trans-unit id="d6ed56286846a6cf59f0baa7c19dd1836590eeba" translate="yes" xml:space="preserve">
          <source>InUseObjects returns the number of objects in use (AllocObjects - FreeObjects).</source>
          <target state="translated">InUseObjectsは、使用中のオブジェクト(AllocObjects-FreeObjects)の数を返します。</target>
        </trans-unit>
        <trans-unit id="dfe141017385b1d5692d01442e77119d4a1ae1e2" translate="yes" xml:space="preserve">
          <source>Incoming requests to a server should create a Context, and outgoing calls to servers should accept a Context. The chain of function calls between them must propagate the Context, optionally replacing it with a derived Context created using WithCancel, WithDeadline, WithTimeout, or WithValue. When a Context is canceled, all Contexts derived from it are also canceled.</source>
          <target state="translated">サーバへの着信リクエストはコンテキストを作成し、サーバへの発信コールはコンテキストを受け入れる必要があります。これらの間の関数呼び出しの連鎖は、そのコンテキストを伝搬させなければならず、オプションで WithCancel、WithDeadline、WithTimeout、または WithValue を使用して作成された派生コンテキストに置き換える必要があります。コンテキストがキャンセルされると、そこから派生したすべてのコンテキストもキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="f3527c443ffc9a19a79c9a5af60b69f82dd615d1" translate="yes" xml:space="preserve">
          <source>IncorrectPasswordError is returned when an incorrect password is detected.</source>
          <target state="translated">不正なパスワードが検出された場合、IncorrectPasswordError が返されます。</target>
        </trans-unit>
        <trans-unit id="aacf42132cce6cf5c1608a5d27f90fcbf93ae851" translate="yes" xml:space="preserve">
          <source>Indent</source>
          <target state="translated">Indent</target>
        </trans-unit>
        <trans-unit id="ffaaf5870213dda02bfcfd6086cb6c73c505917c" translate="yes" xml:space="preserve">
          <source>Indent appends to dst an indented form of the JSON-encoded src. Each element in a JSON object or array begins on a new, indented line beginning with prefix followed by one or more copies of indent according to the indentation nesting. The data appended to dst does not begin with the prefix nor any indentation, to make it easier to embed inside other formatted JSON data. Although leading space characters (space, tab, carriage return, newline) at the beginning of src are dropped, trailing space characters at the end of src are preserved and copied to dst. For example, if src has no trailing spaces, neither will dst; if src ends in a trailing newline, so will dst.</source>
          <target state="translated">Indent は、JSON でエンコードされた src のインデントされた形を dst に追加します。JSON オブジェクトや配列の各要素は、プレフィックスで始まる新しいインデントされた行から始まり、インデントの入れ子にしたがって 1 つ以上のコピーが続きます。dstに追加されるデータは、他のフォーマットされたJSONデータの中に埋め込むことを容易にするために、接頭辞やインデントでは始まりません。src の先頭のスペース文字 (スペース、タブ、キャリッジリターン、改行)は削除されますが、src の末尾のスペース文字は保存され、dst にコピーされます。例えば、src の末尾にスペースがない場合、dst も同様です。</target>
        </trans-unit>
        <trans-unit id="68e20af4dfa7d94d1e8e99b5a45a2168cf2653cc" translate="yes" xml:space="preserve">
          <source>Indent sets the encoder to generate XML in which each element begins on a new indented line that starts with prefix and is followed by one or more copies of indent according to the nesting depth.</source>
          <target state="translated">Indent は、各要素が接頭辞で始まる新しいインデント行から始まり、入れ子の深さに応じて 1 つ以上のインデントのコピーが続く XML を生成するようにエンコーダを設定します。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="421722312ce68c9bf9eb41def321649c4712dbd6" translate="yes" xml:space="preserve">
          <source>Index describes the path from x to f in x.f. The last index entry is the field or method index of the type declaring f; either:</source>
          <target state="translated">インデックスは、x.f内のxからfへのパスを記述します。最後のインデックス項目は、fを宣言する型のフィールドまたはメソッドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="1d0b49853e61d44f4f8b07282b1903e9f2bc5158" translate="yes" xml:space="preserve">
          <source>Index implements a suffix array for fast substring search.</source>
          <target state="translated">インデックスは、高速な部分文字列検索のためのサフィックス配列を実装しています。</target>
        </trans-unit>
        <trans-unit id="af573efacc3f6c1539d934e082a33b7c5805e74a" translate="yes" xml:space="preserve">
          <source>Index responds with the pprof-formatted profile named by the request. For example, &quot;/debug/pprof/heap&quot; serves the &quot;heap&quot; profile. Index responds to a request for &quot;/debug/pprof/&quot; with an HTML page listing the available profiles.</source>
          <target state="translated">Index はリクエストで指定された pprof 形式のプロファイルで応答します。例えば、&quot;/debug/pprof/heap&quot; は &quot;heap&quot; プロファイルを提供します。Index は &quot;/debug/pprof/&quot; へのリクエストに対して、利用可能なプロファイルを一覧にした HTML ページで応答します。</target>
        </trans-unit>
        <trans-unit id="fd5b04a55e6c188f04225c052c3a4ebb3eecf806" translate="yes" xml:space="preserve">
          <source>Index returns JavaScript index i of value v. It panics if v is not a JavaScript object.</source>
          <target state="translated">Indexは、値vのJavaScriptインデックスiを返します。</target>
        </trans-unit>
        <trans-unit id="41cc91c9bcf3f0a08fb627d21f4a77281aee4bad" translate="yes" xml:space="preserve">
          <source>Index returns the index of the first instance of sep in s, or -1 if sep is not present in s.</source>
          <target state="translated">Index は、s の最初のインスタンスである sep のインデックスを返し、 s に sep が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="1f02d6f4db0fe2bb71d169a720ea48dacd4410f7" translate="yes" xml:space="preserve">
          <source>Index returns the index of the first instance of substr in s, or -1 if substr is not present in s.</source>
          <target state="translated">Indexは、sの最初のインスタンスのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="6672a7ad3732041777afcc9d59e94790fa08598a" translate="yes" xml:space="preserve">
          <source>Index returns the index of the palette color closest to c in Euclidean R,G,B,A space.</source>
          <target state="translated">Indexは、ユークリッドR,G,B,A空間においてcに最も近いパレットカラーのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="08cc5090355bf36192f88d52e3809f63b35b1be3" translate="yes" xml:space="preserve">
          <source>Index returns v's i'th element. It panics if v's Kind is not Array, Slice, or String or i is out of range.</source>
          <target state="translated">Index は v の i 番目の要素を返します。vのKindがArray,Slice,Stringでない場合や、iが範囲外の場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="f604fe204d59450e53c6f0f981bb463a3da262fc" translate="yes" xml:space="preserve">
          <source>Index.Lookup</source>
          <target state="translated">Index.Lookup</target>
        </trans-unit>
        <trans-unit id="693f6afea6d2763baec63c4f683ab836809a8526" translate="yes" xml:space="preserve">
          <source>IndexAny</source>
          <target state="translated">IndexAny</target>
        </trans-unit>
        <trans-unit id="227cd6f0abdfd091813bf35b8fd1dcfbc25cecd9" translate="yes" xml:space="preserve">
          <source>IndexAny interprets s as a sequence of UTF-8-encoded Unicode code points. It returns the byte index of the first occurrence in s of any of the Unicode code points in chars. It returns -1 if chars is empty or if there is no code point in common.</source>
          <target state="translated">IndexAny は、s を UTF-8 でエンコードされた Unicode コード点のシーケンスとして解釈します。これは、s の中で、chars の中の Unicode コードポイントのいずれかが最初に出現したときのバイトインデックスを返します。chars が空の場合や、共通のコード点がない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="1adf36d0e196212f2787325e2cb626ccc3228c3b" translate="yes" xml:space="preserve">
          <source>IndexAny returns the index of the first instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s.</source>
          <target state="translated">IndexAny は、 s 内の文字列からの Unicode コ ー ド 点の最初の イ ン ス タ ン ス の イ ン ス タ ン ス の イ ンデ ッ ク ス を返し、 s 内に文字列か ら の Unicode コ ー ド 点が存在 し ない場合は -1 を返し ます。</target>
        </trans-unit>
        <trans-unit id="91d007c3332e259ec2e02f981423ecacc90c6ee6" translate="yes" xml:space="preserve">
          <source>IndexByte</source>
          <target state="translated">IndexByte</target>
        </trans-unit>
        <trans-unit id="c4f06e8f47e53dedfca453887d03a95ac035b5de" translate="yes" xml:space="preserve">
          <source>IndexByte returns the index of the first instance of c in b, or -1 if c is not present in b.</source>
          <target state="translated">IndexByte は、b の中の c の最初のインスタンスのインデックスを返し、 b の中に c が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="c369952c4d2f42c9a51eabe33a7908d4c8f60ad4" translate="yes" xml:space="preserve">
          <source>IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s.</source>
          <target state="translated">IndexByte は、 s の中の c の最初のインスタンスのインデックスを返し、 s の中に c が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="4b29f4c46fd4242b96d7f6d96005476262ea25b4" translate="yes" xml:space="preserve">
          <source>IndexFunc</source>
          <target state="translated">IndexFunc</target>
        </trans-unit>
        <trans-unit id="fd5aa7f0734b2b2162a12de708cba7a93a1ba269" translate="yes" xml:space="preserve">
          <source>IndexFunc interprets s as a sequence of UTF-8-encoded code points. It returns the byte index in s of the first Unicode code point satisfying f(c), or -1 if none do.</source>
          <target state="translated">IndexFunc は、s を UTF-8 でエンコードされたコード点のシーケンスとして解釈します。これは、f(c)を満たす最初の Unicode コードポイントの s のバイトインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="67453fcd073346734a7503bb3d4207a4ffac0a81" translate="yes" xml:space="preserve">
          <source>IndexFunc returns the index into s of the first Unicode code point satisfying f(c), or -1 if none do.</source>
          <target state="translated">IndexFunc は、f(c)を満たす最初の Unicode コード点の s へのインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="0404886738141ffe45c4d013ff978a64bde2ba63" translate="yes" xml:space="preserve">
          <source>IndexRune</source>
          <target state="translated">IndexRune</target>
        </trans-unit>
        <trans-unit id="f4318ccac75e1dd461aaa7a9c7842e97a421edce" translate="yes" xml:space="preserve">
          <source>IndexRune interprets s as a sequence of UTF-8-encoded code points. It returns the byte index of the first occurrence in s of the given rune. It returns -1 if rune is not present in s. If r is utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence.</source>
          <target state="translated">IndexRuneは、sをUTF-8でエンコードされたコードポイントのシーケンスとして解釈します。これは、指定されたルーンが s に最初に出現したときのバイトインデックスを返します。r が utf8.RuneError の場合、無効な UTF-8 バイトシーケンスの最初のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="042bb768e6a79fc4f2a8939cb46f8d887178fb46" translate="yes" xml:space="preserve">
          <source>IndexRune returns the index of the first instance of the Unicode code point r, or -1 if rune is not present in s. If r is utf8.RuneError, it returns the first instance of any invalid UTF-8 byte sequence.</source>
          <target state="translated">IndexRune は、Unicode コードポイント r の最初のインスタンスのインデックス、または s に rune が存在しない場合は -1 を返します。</target>
        </trans-unit>
        <trans-unit id="a85d156f8eef16ea6fae8f47130c09e7ab738f38" translate="yes" xml:space="preserve">
          <source>Indexes into the Header.Ident array.</source>
          <target state="translated">Header.Ident配列へのインデックス。</target>
        </trans-unit>
        <trans-unit id="bee82bdb7da751fd64eea7f5143956992f5aed77" translate="yes" xml:space="preserve">
          <source>Indices into the Delta arrays inside CaseRanges for case mapping.</source>
          <target state="translated">ケース マッピングのための CaseRanges 内のデルタ配列へのインデックス。</target>
        </trans-unit>
        <trans-unit id="22023c8031bf3535a364147cd1c4ebacba51eca8" translate="yes" xml:space="preserve">
          <source>Indirect reports whether any pointer indirection was required to get from x to f in x.f.</source>
          <target state="translated">Indirect は、x.f の x から f への取得にポインタのインダイレクトが必要だったかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="1dbf2dfd2ac6c93be252e418d12775d2db6f53d8" translate="yes" xml:space="preserve">
          <source>Indirect returns the value that v points to. If v is a nil pointer, Indirect returns a zero Value. If v is not a pointer, Indirect returns v.</source>
          <target state="translated">Indirect は v が指す値を返します。v が nil ポインタの場合、Indirect は 0 の値を返します。v がポインタでない場合、Indirect は v を返す。</target>
        </trans-unit>
        <trans-unit id="fe7ad1fbee745b4ca3d08d7729476db7d9fb4fe9" translate="yes" xml:space="preserve">
          <source>Inf returns a complex infinity, complex(+Inf, +Inf).</source>
          <target state="translated">Infは、複素数の無限大、complex(+Inf,+Inf)を返します。</target>
        </trans-unit>
        <trans-unit id="0125073a5f3757f1dc62bea262918d4c5b3bae8e" translate="yes" xml:space="preserve">
          <source>Inf returns positive infinity if sign &amp;gt;= 0, negative infinity if sign &amp;lt; 0.</source>
          <target state="translated">Infは、符号&amp;gt; = 0の場合は正の無限大を、符号&amp;lt;0の場合は負の無限大を返します。</target>
        </trans-unit>
        <trans-unit id="fd7feb1c61f7423453cbee79d9998496c4df75f3" translate="yes" xml:space="preserve">
          <source>Infinite recursion can also be triggered by self-referential data structures, such as a slice that contains itself as an element, if that type has a String method. Such pathologies are rare, however, and the package does not protect against them.</source>
          <target state="translated">無限再帰は、自己参照型のデータ構造、例えばそれ自身を要素として含むスライスのように、その型が String メソッドを持っている場合にもトリガされることがあります。しかし、このような問題は稀であり、パッケージはこのような問題からは保護されていません。</target>
        </trans-unit>
        <trans-unit id="4b631f69842530d659306c8f06dbad594a6b1807" translate="yes" xml:space="preserve">
          <source>Info</source>
          <target state="translated">Info</target>
        </trans-unit>
        <trans-unit id="0e2ca261be59b2db86de1819fd95c5c62808d215" translate="yes" xml:space="preserve">
          <source>Info holds result type information for a type-checked package. Only the information for which a map is provided is collected. If the package has type errors, the collected information may be incomplete.</source>
          <target state="translated">情報は、タイプチェックされたパッケージの結果タイプ情報を保持します。マップが提供されている情報のみが収集されます。パッケージに型エラーがある場合、収集された情報は不完全なものになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="829a6f4d1b71214eb93db4bdc76fb1b790f4e5d1" translate="yes" xml:space="preserve">
          <source>Info logs a message with severity LOG_INFO, ignoring the severity passed to New.</source>
          <target state="translated">Info は、New に渡された深刻度を無視して、深刻度 LOG_INFO でメッセージをログに記録します。</target>
        </trans-unit>
        <trans-unit id="d0968061a8aa60c3762f0e765c2376d0827896c3" translate="yes" xml:space="preserve">
          <source>Info returns information about properties of basic type b.</source>
          <target state="translated">Info は、基本型 b のプロパティに関する情報を返します。</target>
        </trans-unit>
        <trans-unit id="4bebef89f6713b109d9329a6bfe51cba5fd0be4f" translate="yes" xml:space="preserve">
          <source>Init establishes the heap invariants required by the other routines in this package. Init is idempotent with respect to the heap invariants and may be called whenever the heap invariants may have been invalidated. The complexity is O(n) where n = h.Len().</source>
          <target state="translated">Init は、本パッケージの他のルーチンが必要とするヒープ不変量を確立します。Init は、ヒープ不変量に関しては、偶数であり、ヒープ不変量が無効化されている場合はいつでも呼び出されます。複雑さはO(n)であり、n=h.Len()です。</target>
        </trans-unit>
        <trans-unit id="e025530212d94f43014839edcd8664101cb1d082" translate="yes" xml:space="preserve">
          <source>Init has no effect if it was already called.</source>
          <target state="translated">Initは既に呼び出されていても効果がありません。</target>
        </trans-unit>
        <trans-unit id="ab8a6a690d98493f29c3a7eded17da06a0fe4963" translate="yes" xml:space="preserve">
          <source>Init initializes a Scanner with a new source and returns s. Error is set to nil, ErrorCount is set to 0, Mode is set to GoTokens, and Whitespace is set to GoWhitespace.</source>
          <target state="translated">エラーは nil に、エラーカウントは 0 に、モードは GoTokens に、ホワイトスペースは GoWhitespace に設定されます。</target>
        </trans-unit>
        <trans-unit id="38f2f0576d19cc2c5fa27415d0b566e72a9f5fcc" translate="yes" xml:space="preserve">
          <source>Init initializes or clears list l.</source>
          <target state="translated">Init はリスト l を初期化またはクリアします。</target>
        </trans-unit>
        <trans-unit id="4828f42508fc3abcabc5d7577bba28e3151a2a20" translate="yes" xml:space="preserve">
          <source>Init prepares the scanner s to tokenize the text src by setting the scanner at the beginning of src. The scanner uses the file set file for position information and it adds line information for each line. It is ok to re-use the same file when re-scanning the same file as line information which is already present is ignored. Init causes a panic if the file size does not match the src size.</source>
          <target state="translated">Initは、スキャナsをsrcの先頭に設定することで、テキストsrcをトークン化するための準備をする。スキャナは、位置情報のためにファイルセットファイルを使用し、行ごとに行情報を追加する。既に存在する行情報は無視されるので、同じファイルを再スキャンする際には同じファイルを再利用しても構わない。Init は、ファイルサイズが src サイズと一致しない場合にパニックを起こす。</target>
        </trans-unit>
        <trans-unit id="1ff5728fd1958fa03cc23f0615bd53c6b8512d71" translate="yes" xml:space="preserve">
          <source>Init registers testing flags. These flags are automatically registered by the &quot;go test&quot; command before running test functions, so Init is only needed when calling functions such as Benchmark without using &quot;go test&quot;.</source>
          <target state="translated">Initはテストフラグを登録します。これらのフラグはテスト関数を実行する前に &quot;go test &quot;コマンドによって自動的に登録されるので、Initは &quot;go test &quot;を使わずにBenchmarkなどの関数を呼び出す場合にのみ必要になります。</target>
        </trans-unit>
        <trans-unit id="e71fb65b44dd31464c3ab6d5dc9c1b767849af42" translate="yes" xml:space="preserve">
          <source>Init removes all keys from the map.</source>
          <target state="translated">Init はマップからすべてのキーを削除します。</target>
        </trans-unit>
        <trans-unit id="2f9d5d06290960b800b664c463e2749afea3e374" translate="yes" xml:space="preserve">
          <source>Init sets the name and error handling property for a flag set. By default, the zero FlagSet uses an empty name and the ContinueOnError error handling policy.</source>
          <target state="translated">Initは、フラグセットの名前とエラー処理プロパティを設定します。デフォルトでは、ゼロのフラグセットは空の名前とContinueOnErrorエラー処理ポリシーを使用します。</target>
        </trans-unit>
        <trans-unit id="1ff277aa8c5f044965228237465cbaf43a54dec6" translate="yes" xml:space="preserve">
          <source>Initial magic number for ELF files.</source>
          <target state="translated">ELFファイルの初期マジックナンバー。</target>
        </trans-unit>
        <trans-unit id="7ceb1ca1dad4f40542d5a478441bc59f2f8873ca" translate="yes" xml:space="preserve">
          <source>Innermost returns the innermost (child) scope containing pos. If pos is not within any scope, the result is nil. The result is also nil for the Universe scope. The result is guaranteed to be valid only if the type-checked AST has complete position information.</source>
          <target state="translated">Innermost は、pos を含む最も内側の(子)スコープを返します。pos がどのスコープにも含まれていない場合は、結果は nil となります。Universeスコープの場合も、結果はnilです。この結果は、型チェックされたASTが完全な位置情報を持っている場合にのみ有効であることが保証されます。</target>
        </trans-unit>
        <trans-unit id="d3d677ba8b8fb62d3d734397c41c430f5735b25c" translate="yes" xml:space="preserve">
          <source>Input processed by verbs is implicitly space-delimited: the implementation of every verb except %c starts by discarding leading spaces from the remaining input, and the %s verb (and %v reading into a string) stops consuming input at the first space or newline character.</source>
          <target state="translated">c 以外のすべての動詞の実装は、残りの入力から先頭のスペースを破棄することで開始し、%s 動詞 (および文字列への読 み込み %v)は、最初のスペースまたは改行文字で入力の消費を停止します。</target>
        </trans-unit>
        <trans-unit id="f2b998d9fdcbc1c4a3ffebeea1625f9214a80db4" translate="yes" xml:space="preserve">
          <source>InputOffset returns the input stream byte offset of the current decoder position. The offset gives the location of the end of the most recently returned token and the beginning of the next token.</source>
          <target state="translated">InputOffset は、現在のデコーダ位置の入力ストリームのバイトオフセットを返す。このオフセットは、直近に返されたトークンの終了位置と次のトークンの開始位置を示します。</target>
        </trans-unit>
        <trans-unit id="e966ee10eb4ce3215fa8906700a612e44342e126" translate="yes" xml:space="preserve">
          <source>InsecureCipherSuites returns a list of cipher suites currently implemented by this package and which have security issues.</source>
          <target state="translated">InsecureCipherSuites は、現在このパッケージで実装されている暗号化スイートのリストを返します。</target>
        </trans-unit>
        <trans-unit id="c6bdbccac97746d550ea930e761dad7ffa800d06" translate="yes" xml:space="preserve">
          <source>Insert attempts to insert a named object obj into the scope s. If the scope already contains an object alt with the same name, Insert leaves the scope unchanged and returns alt. Otherwise it inserts obj and returns nil.</source>
          <target state="translated">スコープに同名のオブジェクト alt が既に含まれている場合、Insert はスコープを変更せずに alt を返します。それ以外の場合は obj を挿入して nil を返します。</target>
        </trans-unit>
        <trans-unit id="3c51f0bca7bc21285dde2f4365d66539c9045fbd" translate="yes" xml:space="preserve">
          <source>Insert attempts to insert an object obj into scope s. If s already contains an alternative object alt with the same name, Insert leaves s unchanged and returns alt. Otherwise it inserts obj, sets the object's parent scope if not already set, and returns nil.</source>
          <target state="translated">insert は、オブジェクト obj をスコープ s に挿入しようとします。 s に同名の代替オブジェクト alt が既に含まれている場合、Insert は s を変更せずに alt を返します。それ以外の場合は obj を挿入し、オブジェクトの親スコープが設定されていない場合はそのオブジェクトの親スコープを設定し、nil を返します。</target>
        </trans-unit>
        <trans-unit id="e5d297ca4eb4122848b745777ba08d9e98e99026" translate="yes" xml:space="preserve">
          <source>InsertAfter inserts a new element e with value v immediately after mark and returns e. If mark is not an element of l, the list is not modified. The mark must not be nil.</source>
          <target state="translated">InsertAfter は、マークの直後に値 v を持つ新しい要素 e を挿入し、e を返します。 マークが l の要素でない場合、リストは変更されません。マークはnilであってはなりません。</target>
        </trans-unit>
        <trans-unit id="f8690dfd3964564996a8ec4c6a534ffd7d8cce51" translate="yes" xml:space="preserve">
          <source>InsertBefore inserts a new element e with value v immediately before mark and returns e. If mark is not an element of l, the list is not modified. The mark must not be nil.</source>
          <target state="translated">InsertBefore は、マークの直前に値 v を持つ新しい要素 e を挿入し、e を返します。 マークが l の要素でない場合、リストは変更されません。マークはnilであってはなりません。</target>
        </trans-unit>
        <trans-unit id="1a44ed1d9fdf3b19a9445ead705835b2d7701bba" translate="yes" xml:space="preserve">
          <source>Inset returns the rectangle r inset by n, which may be negative. If either of r's dimensions is less than 2*n then an empty rectangle near the center of r will be returned.</source>
          <target state="translated">Insetは、rをnだけインセットした矩形を返しますが、負の値になることもあります。rのいずれかの寸法が2*nよりも小さい場合、rの中心付近の空の矩形が返されます。</target>
        </trans-unit>
        <trans-unit id="18ca87afec4298d9de864e32b4eeb6a31786e496" translate="yes" xml:space="preserve">
          <source>Inspect</source>
          <target state="translated">Inspect</target>
        </trans-unit>
        <trans-unit id="165da1fa673b9fd9a581f6c1c726cccbffc7e2ca" translate="yes" xml:space="preserve">
          <source>Inspect traverses an AST in depth-first order: It starts by calling f(node); node must not be nil. If f returns true, Inspect invokes f recursively for each of the non-nil children of node, followed by a call of f(nil).</source>
          <target state="translated">InspectはASTを深さ優先で走査します。nodeはnilであってはなりません。fが真を返す場合,Inspectはnodeの非nilの子のそれぞれについて再帰的にfを呼び出し,その後にf(nil)を呼び出します.</target>
        </trans-unit>
        <trans-unit id="a6a380194dfce8d967bc921f5f0bd2558e839e1f" translate="yes" xml:space="preserve">
          <source>InstanceOf reports whether v is an instance of type t according to JavaScript's instanceof operator.</source>
          <target state="translated">InstanceOf は、JavaScript の instanceof 演算子に従って、v が t 型のインスタンスであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="ebf808b93582c50b9dee098ffbc7851e8bbd1bc5" translate="yes" xml:space="preserve">
          <source>Int defines an int flag with specified name, default value, and usage string. The return value is the address of an int variable that stores the value of the flag.</source>
          <target state="translated">Intは、指定された名前、デフォルト値、使用文字列を持つintフラグを定義します。戻り値は、フラグの値を格納するint変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="4a82193f61167eeb73caee70b7d931807aee1e38" translate="yes" xml:space="preserve">
          <source>Int is a 64-bit integer variable that satisfies the Var interface.</source>
          <target state="translated">IntはVarインタフェースを満たす64ビットの整数変数です。</target>
        </trans-unit>
        <trans-unit id="af260c99fb6b16af9acf30bb7ef7c67bfd7f461c" translate="yes" xml:space="preserve">
          <source>Int returns a non-negative pseudo-random int from the default Source.</source>
          <target state="translated">Intは、デフォルトのSourceから非負の擬似乱数intを返します。</target>
        </trans-unit>
        <trans-unit id="381ad8d2cdfa2db4d632061cd5638bdb827c118f" translate="yes" xml:space="preserve">
          <source>Int returns a non-negative pseudo-random int.</source>
          <target state="translated">Intは、負ではない擬似乱数のintを返します。</target>
        </trans-unit>
        <trans-unit id="78b2c6c511c1ed56b26a62f7cd24e23bebce41b7" translate="yes" xml:space="preserve">
          <source>Int returns a uniform random value in [0, max). It panics if max &amp;lt;= 0.</source>
          <target state="translated">Intは[0、max）で均一なランダム値を返します。max &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="5333a3a7b26511027f14a3034f5b9a08970c91dc" translate="yes" xml:space="preserve">
          <source>Int returns the result of truncating x towards zero; or nil if x is an infinity. The result is Exact if x.IsInt(); otherwise it is Below for x &amp;gt; 0, and Above for x &amp;lt; 0. If a non-nil *Int argument z is provided, Int stores the result in z instead of allocating a new Int.</source>
          <target state="translated">Intは、xをゼロに向かって切り捨てた結果を返します。xが無限大の場合はnil。x.IsInt（）;の場合、結果は正確です。それ以外の場合は、x&amp;gt; 0の場合はBelow、x &amp;lt;0の場合はAboveです。nil以外の* Int引数zが指定されている場合、Intは新しいIntを割り当てる代わりに結果をzに格納します。</target>
        </trans-unit>
        <trans-unit id="b48fef275365436d3178b531a98b6df9140d4a4e" translate="yes" xml:space="preserve">
          <source>Int returns the value v truncated to an int. It panics if v is not a JavaScript number.</source>
          <target state="translated">Int は、v を int に切り捨てた値を返します。vがJavaScriptの数値でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="7aeadc703783366afed8a63b0734b22311f2a7e4" translate="yes" xml:space="preserve">
          <source>Int returns v's underlying value, as an int64. It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64.</source>
          <target state="translated">Int は、v の基礎となる値を int64 で返します。vのKindがInt、Int8、Int16、Int32、またはInt64でない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="53c091a9597bdba1f2ca46d491f5c108342e031f" translate="yes" xml:space="preserve">
          <source>Int.Scan</source>
          <target state="translated">Int.Scan</target>
        </trans-unit>
        <trans-unit id="5de699e08eb78e768e5b08ea65a2d2d995d6cca4" translate="yes" xml:space="preserve">
          <source>Int.SetString</source>
          <target state="translated">Int.SetString</target>
        </trans-unit>
        <trans-unit id="25863d22096f1ba104e899340881b4d53e78900e" translate="yes" xml:space="preserve">
          <source>Int31 returns a non-negative pseudo-random 31-bit integer as an int32 from the default Source.</source>
          <target state="translated">Int31は、デフォルトのソースから非負の疑似乱数31ビット整数をint32として返します。</target>
        </trans-unit>
        <trans-unit id="8668fa86efe442ed5c0ddfb6799eac348a1585d9" translate="yes" xml:space="preserve">
          <source>Int31 returns a non-negative pseudo-random 31-bit integer as an int32.</source>
          <target state="translated">Int31 は、非負の疑似乱数 31 ビット整数を int32 として返します。</target>
        </trans-unit>
        <trans-unit id="4ef488a0ec898f126b9413bbb42319fb0eaeff13" translate="yes" xml:space="preserve">
          <source>Int31n returns, as an int32, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int31nは、int32として、デフォルトのソースから[0、n）の負でない疑似乱数を返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="90d847f9e26c6ab28ce7fd160e1218ad35e875d4" translate="yes" xml:space="preserve">
          <source>Int31n returns, as an int32, a non-negative pseudo-random number in [0,n). It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int31nは、[0、n）に負でない疑似乱数をint32として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="848b71a013b8e0169e247e647c756adf54d70a3d" translate="yes" xml:space="preserve">
          <source>Int32 is a ValueConverter that converts input values to int64, respecting the limits of an int32 value.</source>
          <target state="translated">Int32は、入力値をint32値の限界を尊重してint64に変換するValueConverterです。</target>
        </trans-unit>
        <trans-unit id="40feceb2effc4993d828a64f0bbc7bd4b65472d1" translate="yes" xml:space="preserve">
          <source>Int63 returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source.</source>
          <target state="translated">Int63は、デフォルトのソースから非負の擬似乱数63ビット整数をint64として返します。</target>
        </trans-unit>
        <trans-unit id="73b13ad335bd8c446e54125036bbdb60110b8a67" translate="yes" xml:space="preserve">
          <source>Int63 returns a non-negative pseudo-random 63-bit integer as an int64.</source>
          <target state="translated">Int63 は、非負の疑似乱数 63 ビット整数を int64 として返します。</target>
        </trans-unit>
        <trans-unit id="ccf199104b81302e6aa6420d9d53fbe6d1e5e481" translate="yes" xml:space="preserve">
          <source>Int63n returns, as an int64, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int63nは、デフォルトのソースから[0、n）の負でない疑似乱数をint64として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="adc50ec6888e251cb9eb8237744893f852c6674f" translate="yes" xml:space="preserve">
          <source>Int63n returns, as an int64, a non-negative pseudo-random number in [0,n). It panics if n &amp;lt;= 0.</source>
          <target state="translated">Int63nは、[0、n）に負でない疑似乱数をint64として返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="caf7332f4387883214a684cf486e59d1298af5e4" translate="yes" xml:space="preserve">
          <source>Int64 defines an int64 flag with specified name, default value, and usage string. The return value is the address of an int64 variable that stores the value of the flag.</source>
          <target state="translated">Int64は、指定された名前、デフォルト値、使用文字列を持つint64フラグを定義します。戻り値はフラグの値を格納するint64変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="5ea42bb5a91b0f37c1c104284dddf7aee6dd3d40" translate="yes" xml:space="preserve">
          <source>Int64 returns the int64 representation of x. If x cannot be represented in an int64, the result is undefined.</source>
          <target state="translated">Int64 は、x を int64 で表現できない場合は、結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="024ee0329e5ac0182a79c3f0f817ea471b5da8f4" translate="yes" xml:space="preserve">
          <source>Int64 returns the integer resulting from truncating x towards zero. If math.MinInt64 &amp;lt;= x &amp;lt;= math.MaxInt64, the result is Exact if x is an integer, and Above (x &amp;lt; 0) or Below (x &amp;gt; 0) otherwise. The result is (math.MinInt64, Above) for x &amp;lt; math.MinInt64, and (math.MaxInt64, Below) for x &amp;gt; math.MaxInt64.</source>
          <target state="translated">Int64は、xをゼロに切り捨てた結果の整数を返します。math.MinInt64 &amp;lt;= x &amp;lt;= math.MaxInt64の場合、結果は、xが整数の場合はExact、それ以外の場合はAbove（x &amp;lt;0）またはBelow（x&amp;gt; 0）になります。結果は、x &amp;lt;math.MinInt64の場合は（math.MinInt64、Above）、x&amp;gt; math.MaxInt64の場合は（math.MaxInt64、Below）です。</target>
        </trans-unit>
        <trans-unit id="a7858f715e5515e9b11682c98c7e956884fa03d3" translate="yes" xml:space="preserve">
          <source>Int64 returns the number as an int64.</source>
          <target state="translated">Int64は、その数値をint64として返します。</target>
        </trans-unit>
        <trans-unit id="e87b1cbe8a7626b33b6c26f9454e9b97aa48ff20" translate="yes" xml:space="preserve">
          <source>Int64Val returns the Go int64 value of x and whether the result is exact; x must be an Int or an Unknown. If the result is not exact, its value is undefined. If x is Unknown, the result is (0, false).</source>
          <target state="translated">Int64Valは、xのGo int64値を返し、その結果が正確であるかどうかを返します。結果が正確でない場合、その値は未定義です。xがUnknownの場合、結果は(0,false)となります。</target>
        </trans-unit>
        <trans-unit id="e48ba0f308dabec3542a772cd98df7b4a194464a" translate="yes" xml:space="preserve">
          <source>Int64Var defines an int64 flag with specified name, default value, and usage string. The argument p points to an int64 variable in which to store the value of the flag.</source>
          <target state="translated">Int64Var は、指定された名前、デフォルト値、使用文字列を持つ int64 フラグを定義します。引数pは、フラグの値を格納するint64変数を指します。</target>
        </trans-unit>
        <trans-unit id="826fdf675ec889637dd1607e0ecbc7b4617ed6b5" translate="yes" xml:space="preserve">
          <source>IntSize is the size in bits of an int or uint value.</source>
          <target state="translated">IntSizeは、intまたはuint値のビット単位のサイズです。</target>
        </trans-unit>
        <trans-unit id="7d0ad3a5fc2c5562d1a3d5edaf660d5681e2e7dd" translate="yes" xml:space="preserve">
          <source>IntSlice attaches the methods of Interface to []int, sorting in increasing order.</source>
          <target state="translated">IntSliceはInterfaceのメソッドを[]intにアタッチして、順番にソートしていきます。</target>
        </trans-unit>
        <trans-unit id="259cdcc1487407a0effb8761c09ff465d822351b" translate="yes" xml:space="preserve">
          <source>IntVar defines an int flag with specified name, default value, and usage string. The argument p points to an int variable in which to store the value of the flag.</source>
          <target state="translated">IntVarは、指定された名前、デフォルト値、使用文字列を持つintフラグを定義します。引数pは、フラグの値を格納するint変数を指します。</target>
        </trans-unit>
        <trans-unit id="e927198b4dfea79ca477c6ca320b7977e5f907d8" translate="yes" xml:space="preserve">
          <source>Integer flags accept 1234, 0664, 0x1234 and may be negative. Boolean flags may be:</source>
          <target state="translated">整数フラグは1234、0664、0x1234を受け付け、負の値を指定することができます。ブール型フラグは、負の可能性があります。</target>
        </trans-unit>
        <trans-unit id="d8d2cb0f1ba846253e8f8508e7b268037f761677" translate="yes" xml:space="preserve">
          <source>Integer limit values.</source>
          <target state="translated">整数の制限値。</target>
        </trans-unit>
        <trans-unit id="8e6549b1b15bddbc7e4ca51ecb54082a0c50f802" translate="yes" xml:space="preserve">
          <source>Integer:</source>
          <target state="translated">Integer:</target>
        </trans-unit>
        <trans-unit id="8ef45f34654a956038b7d2e46f7b980bceca0a1e" translate="yes" xml:space="preserve">
          <source>IntegerType is here for the purposes of documentation only. It is a stand-in for any integer type: int, uint, int8 etc.</source>
          <target state="translated">IntegerType は、ここでは文書化のみを目的としています。int,uint,int8 などの任意の整数型の代用となります。</target>
        </trans-unit>
        <trans-unit id="5a289c0331a1e2ae1cddd468bdbd08515a751488" translate="yes" xml:space="preserve">
          <source>Integers are transmitted two ways: arbitrary precision signed integers or arbitrary precision unsigned integers. There is no int8, int16 etc. discrimination in the gob format; there are only signed and unsigned integers. As described below, the transmitter sends the value in a variable-length encoding; the receiver accepts the value and stores it in the destination variable. Floating-point numbers are always sent using IEEE-754 64-bit precision (see below).</source>
          <target state="translated">整数は、任意の精度の符号付き整数と任意の精度の符号なし整数の2つの方法で伝送されます。gob 形式には int8,int16 などの区別はなく、符号付き整数と符号なし整数しかありません。後述するように、送信機は可変長エンコーディングで値を送信し、受信機は値を受け入れて宛先変数に格納します。浮動小数点数は常にIEEE-754の64ビット精度(後述)で送信されます。</target>
        </trans-unit>
        <trans-unit id="7b4db7ef1fa23cfb5e115a2a2c89d46a6a2ebc4a" translate="yes" xml:space="preserve">
          <source>Interface</source>
          <target state="translated">Interface</target>
        </trans-unit>
        <trans-unit id="8a7e153030b338cdad7a41aa466f441af45e4a11" translate="yes" xml:space="preserve">
          <source>Interface represents a mapping between network interface name and index. It also represents network interface facility information.</source>
          <target state="translated">インタフェースは、ネットワーク・インタフェース名とインデックスのマッピングを表します。また、ネットワークインタフェースの設備情報を表します。</target>
        </trans-unit>
        <trans-unit id="6da3607f32beaa93e64c1a37a2f36fbed997c327" translate="yes" xml:space="preserve">
          <source>Interface returns v's current value as an interface{}. It is equivalent to:</source>
          <target state="translated">Interfaceは、vの現在の値をinterface{}として返します。と等価です。</target>
        </trans-unit>
        <trans-unit id="5ea5c3979b46b5a2713cc2d1786a81b1f8ec63c2" translate="yes" xml:space="preserve">
          <source>Interface types are not checked for compatibility; all interface types are treated, for transmission, as members of a single &quot;interface&quot; type, analogous to int or []byte - in effect they're all treated as interface{}. Interface values are transmitted as a string identifying the concrete type being sent (a name that must be pre-defined by calling Register), followed by a byte count of the length of the following data (so the value can be skipped if it cannot be stored), followed by the usual encoding of concrete (dynamic) value stored in the interface value. (A nil interface value is identified by the empty string and transmits no value.) Upon receipt, the decoder verifies that the unpacked concrete item satisfies the interface of the receiving variable.</source>
          <target state="translated">すべてのインタフェース型は、送信時には、intや[]byteに類似した単一の「インタフェース」型のメンバーとして扱われ、実質的にはすべてinterface{}として扱われます。インターフェイス値は、送信される具体的な型を識別する文字列(Registerを呼び出すことで事前に定義されなければならない名前)として送信され、その後に次のデータの長さのバイト数が続き(値を格納できない場合はスキップできるようにするため)、インターフェイス値に格納されている具体的な(動的な)値の通常のエンコーディングが続きます(nilのインターフェイス値は識別されます)。(nilインターフェース値は空文字列で識別され、値を送信しない)。受信時に、デコーダは、アンパックされた具象項目が受信変数のインタフェースを満たすことを検証する。</target>
        </trans-unit>
        <trans-unit id="74b4a1f2cd95d6ac03afcfd27826497cd84b5ae7" translate="yes" xml:space="preserve">
          <source>Interface values are deeply equal if they hold deeply equal concrete values.</source>
          <target state="translated">インターフェースの値は、深く等しい具体的な値を保持していれば、深く等しい。</target>
        </trans-unit>
        <trans-unit id="09203e8778d59b495323467d890a95f5807f26bf" translate="yes" xml:space="preserve">
          <source>Interface values encode as the value contained in the interface. A nil interface value encodes as the null JSON value.</source>
          <target state="translated">インターフェースの値は、インターフェースに含まれる値としてエンコードされます。nil のインターフェース値は、null の JSON 値としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="360b50370b24932254b26c7af3e111445c188db0" translate="yes" xml:space="preserve">
          <source>InterfaceAddrs returns a list of the system's unicast interface addresses.</source>
          <target state="translated">InterfaceAddrs は、システムのユニキャスト・インターフェース・アドレスのリストを返します。</target>
        </trans-unit>
        <trans-unit id="9ce937dfbe60c7ef5a110a8b5806627105e626f1" translate="yes" xml:space="preserve">
          <source>InterfaceByIndex returns the interface specified by index.</source>
          <target state="translated">InterfaceByIndex は、インデックスで指定されたインターフェースを返します。</target>
        </trans-unit>
        <trans-unit id="4245d4428eaccf8da6182470aec7d558cea28a53" translate="yes" xml:space="preserve">
          <source>InterfaceByName returns the interface specified by name.</source>
          <target state="translated">InterfaceByNameは、名前で指定されたインターフェースを返します。</target>
        </trans-unit>
        <trans-unit id="a63d53fbc696efd4a28db884d8645a21dcabe121" translate="yes" xml:space="preserve">
          <source>InterfaceData returns the interface v's value as a uintptr pair. It panics if v's Kind is not Interface.</source>
          <target state="translated">InterfaceData は、インタフェース v の値を uintptr のペアとして返します。vのKindがInterfaceでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="470a021de3b9df70021376a7834ee99ab5ab1f2e" translate="yes" xml:space="preserve">
          <source>Interfaces returns a list of the system's network interfaces.</source>
          <target state="translated">Interfaces は、システムのネットワーク・インターフェースのリストを返します。</target>
        </trans-unit>
        <trans-unit id="faba134b29aa30840bd61a266830217b82a22fc4" translate="yes" xml:space="preserve">
          <source>InternalBenchmark is an internal type but exported because it is cross-package; it is part of the implementation of the &quot;go test&quot; command.</source>
          <target state="translated">InternalBenchmarkは内部型ですが、クロスパッケージなのでエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="ce46964418231d76007ec656366d43d02eb959b8" translate="yes" xml:space="preserve">
          <source>InternalTest is an internal type but exported because it is cross-package; it is part of the implementation of the &quot;go test&quot; command.</source>
          <target state="translated">InternalTestは内部型ですが、クロスパッケージなのでエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="a60781d644f0c18cd790184e8cc93bbf04ff58fe" translate="yes" xml:space="preserve">
          <source>Intersect returns the largest rectangle contained by both r and s. If the two rectangles do not overlap then the zero rectangle will be returned.</source>
          <target state="translated">2つの矩形が重なっていない場合は、0の矩形が返されます。</target>
        </trans-unit>
        <trans-unit id="37b82affb5d88e1d235360ffb5b4876b9c358ef4" translate="yes" xml:space="preserve">
          <source>Intn</source>
          <target state="translated">Intn</target>
        </trans-unit>
        <trans-unit id="54d0c13534e6e00abbb2d04b4cb149c7d0ddea38" translate="yes" xml:space="preserve">
          <source>Intn returns, as an int, a non-negative pseudo-random number in [0,n) from the default Source. It panics if n &amp;lt;= 0.</source>
          <target state="translated">Intnは、デフォルトのSourceから[0、n）の負でない疑似乱数をintとして返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="8f26feb5337a07fc6e35ec73e1c6b06a4a8f7c21" translate="yes" xml:space="preserve">
          <source>Intn returns, as an int, a non-negative pseudo-random number in [0,n). It panics if n &amp;lt;= 0.</source>
          <target state="translated">Intnは、[0、n）の負でない疑似乱数をintとして返します。n &amp;lt;= 0の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="b7f44e53c873fdc1db7cef7777af521f4a3b60c1" translate="yes" xml:space="preserve">
          <source>Ints</source>
          <target state="translated">Ints</target>
        </trans-unit>
        <trans-unit id="0d62fa520893beed143100d8873cdbc43cfe7428" translate="yes" xml:space="preserve">
          <source>Ints sorts a slice of ints in increasing order.</source>
          <target state="translated">インツはスライスを順にソートしていきます。</target>
        </trans-unit>
        <trans-unit id="00382ca46ab71a1b23e2790f3cf0a66b6faa90df" translate="yes" xml:space="preserve">
          <source>IntsAreSorted</source>
          <target state="translated">IntsAreSorted</target>
        </trans-unit>
        <trans-unit id="15003e1b93fee181a87b2536fb555a75f6e8fa12" translate="yes" xml:space="preserve">
          <source>IntsAreSorted reports whether the slice x is sorted in increasing order.</source>
          <target state="translated">IntsAreSortedは、スライスxが昇順でソートされているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d11bf023986ecfce333bd8a5477d90f31eb1db0a" translate="yes" xml:space="preserve">
          <source>IntsAreSorted tests whether a slice of ints is sorted in increasing order.</source>
          <target state="translated">IntsAreSorted は、スライスされたイントが昇順にソートされているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e6124bd83c6b099c79f4ac3379192d76121e3dfb" translate="yes" xml:space="preserve">
          <source>Inv sets z to 1/x and returns z.</source>
          <target state="translated">Inv は z を 1/x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="496bc61a17df218d2461a9eddcde86416579b01a" translate="yes" xml:space="preserve">
          <source>Inv sets z to 1/x and returns z. If x == 0, Inv panics.</source>
          <target state="translated">Inv は z を 1/x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="57f0200085fa1268ae261758bfb7dee5795a5704" translate="yes" xml:space="preserve">
          <source>InvalidByteError values describe errors resulting from an invalid byte in a hex string.</source>
          <target state="translated">InvalidByteError 値は、16 進文字列の無効なバイトに起因するエラーを記述します。</target>
        </trans-unit>
        <trans-unit id="fc945344ffab3c8e0685a8f6f0b347b0e1b5f04c" translate="yes" xml:space="preserve">
          <source>Invoke does a JavaScript call of the value v with the given arguments. It panics if v is not a JavaScript function. The arguments get mapped to JavaScript values according to the ValueOf function.</source>
          <target state="translated">Invoke は、与えられた引数で値 v の JavaScript 呼び出しを行います。v が JavaScript 関数でない場合はパニックになります。引数は ValueOf 関数に従って JavaScript の値にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="a8bc24ce97a4c19ceec821a6c13e305d4cc7093a" translate="yes" xml:space="preserve">
          <source>Invoking the JavaScript function will synchronously call the Go function fn with the value of JavaScript's &quot;this&quot; keyword and the arguments of the invocation. The return value of the invocation is the result of the Go function mapped back to JavaScript according to ValueOf.</source>
          <target state="translated">JavaScriptの関数を呼び出すと、JavaScriptの &quot;this &quot;キーワードの値と呼び出しの引数を持つGo関数fnが同期的に呼び出されます。呼び出しの戻り値は、ValueOfに従ってJavaScriptにマッピングされたGo関数の結果となります。</target>
        </trans-unit>
        <trans-unit id="cf66655914f273806173ce98e001321c956d8544" translate="yes" xml:space="preserve">
          <source>Invoking the wrapped Go function from JavaScript will pause the event loop and spawn a new goroutine. Other wrapped functions which are triggered during a call from Go to JavaScript get executed on the same goroutine.</source>
          <target state="translated">JavaScript からラップされた Go 関数を呼び出すと、イベント ループが一時停止され、新しい goroutine が生成されます。Go から JavaScript への呼び出し中にトリガーされた他のラップされた関数は、同じ goroutine で実行されます。</target>
        </trans-unit>
        <trans-unit id="079bc3b6a59d995ce86a46665da2718451aea120" translate="yes" xml:space="preserve">
          <source>Is</source>
          <target state="translated">Is</target>
        </trans-unit>
        <trans-unit id="b80342e2833069978eb2ebabac8e59ca1a3fbfc5" translate="yes" xml:space="preserve">
          <source>Is reports whether any error in err's chain matches target.</source>
          <target state="translated">errのチェーンにあるエラーがターゲットにマッチしているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="2dcad3f5fb898f44a28ca9cc90eb869f037180e6" translate="yes" xml:space="preserve">
          <source>Is reports whether the rune is in the specified table of ranges.</source>
          <target state="translated">Isは、指定された範囲のテーブルにルーンがあるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d895a1147fb9e99c093e2c8e3aa2a3a161a62599" translate="yes" xml:space="preserve">
          <source>Is unwraps its first argument sequentially looking for an error that matches the second. It reports whether it finds a match. It should be used in preference to simple equality checks:</source>
          <target state="translated">Isは最初の引数を順次展開し、2番目の引数にマッチするエラーを探します。一致するものが見つかったかどうかを報告します。単純な等質性チェックよりも優先して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4240feb2e7eac03ab7672bf3d52cbd0df60964bf" translate="yes" xml:space="preserve">
          <source>IsAbs</source>
          <target state="translated">IsAbs</target>
        </trans-unit>
        <trans-unit id="6ba3e5deb5d3ce3b158c2019d9e58f42637cf610" translate="yes" xml:space="preserve">
          <source>IsAbs reports whether the URL is absolute. Absolute means that it has a non-empty scheme.</source>
          <target state="translated">IsAbsは、URLがアブソリュートかどうかをレポートします。絶対値は、空ではないスキームを持つことを意味します。</target>
        </trans-unit>
        <trans-unit id="36a0d5f9413d1e35ae6366ef607edd836694bee0" translate="yes" xml:space="preserve">
          <source>IsAbs reports whether the path is absolute.</source>
          <target state="translated">IsAbs は、パスが絶対パスかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="e1eaf7841a07f287f076c00cb20e44f9651ff13f" translate="yes" xml:space="preserve">
          <source>IsAlias reports whether obj is an alias name for a type.</source>
          <target state="translated">IsAlias は、obj が型のエイリアス名であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="0e84022f347580b90f81c69d614f481de5c48849" translate="yes" xml:space="preserve">
          <source>IsBuiltin reports whether the corresponding expression denotes a (possibly parenthesized) built-in function.</source>
          <target state="translated">IsBuiltin は、対応する式が (括弧で囲まれている可能性のある)組み込み関数を示すかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="c915051f076524ecaa2f5d332eb2bb4d2765eefa" translate="yes" xml:space="preserve">
          <source>IsCommand reports whether the package is considered a command to be installed (not just a library). Packages named &quot;main&quot; are treated as commands.</source>
          <target state="translated">IsCommandは、パッケージが(ライブラリだけでなく)インストールされるコマンドとみなされるかどうかを報告します。main」という名前のパッケージはコマンドとして扱われます。</target>
        </trans-unit>
        <trans-unit id="2cd3abc2f41e5f98828e0ebaee47dfbcd10387ad" translate="yes" xml:space="preserve">
          <source>IsControl reports whether the rune is a control character. The C (Other) Unicode category includes more code points such as surrogates; use Is(C, r) to test for them.</source>
          <target state="translated">IsControlは、ルーンが制御文字であるかどうかを報告します。C (その他)Unicodeカテゴリには、サロゲートなどのコードポイントが含まれています;それらをテストするにはIs(C,r)を使用してください。</target>
        </trans-unit>
        <trans-unit id="c746a0807bba76d32760f9142c884716d0699c51" translate="yes" xml:space="preserve">
          <source>IsDigit reports whether the rune is a decimal digit.</source>
          <target state="translated">IsDigitは、ルーンが10進数かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="3dc4a185454e26efa4716393eed4775f2e55fe7c" translate="yes" xml:space="preserve">
          <source>IsDir reports whether m describes a directory. That is, it tests for the ModeDir bit being set in m.</source>
          <target state="translated">IsDirは、mがディレクトリを記述しているかどうかを報告します。つまり、ModeDir ビットが m に設定されているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e67a4b242fe3e4d35035e7774ab8072906fab973" translate="yes" xml:space="preserve">
          <source>IsEmptyTree reports whether this tree (node) is empty of everything but space or comments.</source>
          <target state="translated">IsEmptyTreeは、このツリー(ノード)が、スペースやコメント以外のすべてのものを含んでいないかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="5fd80e2b1854e3452cd6bfd7234aa8fa8ddcdc63" translate="yes" xml:space="preserve">
          <source>IsEmptyTree reports whether this tree (node) is empty of everything but space.</source>
          <target state="translated">IsEmptyTree は、このツリー(ノード)がスペース以外のすべてのものが空であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="cd43f5281afe605e10c23fa5e5c73089248f9feb" translate="yes" xml:space="preserve">
          <source>IsEnabled reports whether tracing is enabled. The information is advisory only. The tracing status may have changed by the time this function returns.</source>
          <target state="translated">IsEnabled は、トレースが有効かどうかをレポートします。この情報はあくまでも参考情報です。この関数が戻るまでにトレースの状態が変更されている可能性があります。</target>
        </trans-unit>
        <trans-unit id="39e18e7e1b9d6fbe4b3f09d74593704f059a0c0a" translate="yes" xml:space="preserve">
          <source>IsEncryptedPEMBlock returns if the PEM block is password encrypted.</source>
          <target state="translated">IsEncryptedPEMBlock は、PEM ブロックがパスワードで暗号化されているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="60b1c669bbd4deb841f16ea07aaf99039943a55d" translate="yes" xml:space="preserve">
          <source>IsEncryptedPEMBlock returns whether the PEM block is password encrypted according to RFC 1423.</source>
          <target state="translated">IsEncryptedPEMBlockは、PEMブロックがRFC1423に基づいてパスワード暗号化されているかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="bc66205543d841780222acbebc983e058e70415a" translate="yes" xml:space="preserve">
          <source>IsExist returns a boolean indicating whether the error is known to report that a file or directory already exists. It is satisfied by ErrExist as well as some syscall errors.</source>
          <target state="translated">IsExistは、ファイルまたはディレクトリが既に存在することを報告するエラーが知られているかどうかを示すブール値を返します。これは、いくつかのsyscallエラーと同様にErrExistによって満たされます。</target>
        </trans-unit>
        <trans-unit id="fc56fa9983588228bd9fa3b0b5a7931ac3cb75f1" translate="yes" xml:space="preserve">
          <source>IsExported reports whether id starts with an upper-case letter.</source>
          <target state="translated">IsExported は、id が大文字で始まるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="3c6d4e31e0d52ed1d2823481dfa21ed80c9b776d" translate="yes" xml:space="preserve">
          <source>IsExported reports whether name starts with an upper-case letter.</source>
          <target state="translated">IsExported は、名前が大文字で始まるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="504274dd55fc2a273ebc2bd501f5695303ffe229" translate="yes" xml:space="preserve">
          <source>IsField reports whether the variable is a struct field.</source>
          <target state="translated">IsField は、変数が構造体フィールドであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="d9bdbeb50a8c37eb5d00e31069315d70d10359d6" translate="yes" xml:space="preserve">
          <source>IsGlobalUnicast reports whether ip is a global unicast address.</source>
          <target state="translated">IsGlobalUnicastは、ipがグローバルユニキャストアドレスであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="81438b4c8eca18603ccf70f1438b5199ee8dc35f" translate="yes" xml:space="preserve">
          <source>IsGoBuild reports whether the line of text is a &amp;ldquo;//go:build&amp;rdquo; constraint. It only checks the prefix of the text, not that the expression itself parses.</source>
          <target state="translated">IsGoBuildは、テキスト行が「// go：build」制約であるかどうかを報告します。式自体が解析するのではなく、テキストのプレフィックスのみをチェックします。</target>
        </trans-unit>
        <trans-unit id="d72f8c1ccd0ac092185d981b6c61eacc3c121ef6" translate="yes" xml:space="preserve">
          <source>IsGraphic</source>
          <target state="translated">IsGraphic</target>
        </trans-unit>
        <trans-unit id="56022820abfd812a684373d7b12ff29c87996877" translate="yes" xml:space="preserve">
          <source>IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such characters include letters, marks, numbers, punctuation, symbols, and spaces, from categories L, M, N, P, S, Zs.</source>
          <target state="translated">IsGraphicは、ルーンがUnicodeでグラフィックとして定義されているかどうかを報告する。このような文字には、L,M,N,P,S,Zsのカテゴリから、文字、マーク、数字、句読点、記号、スペースが含まれます。</target>
        </trans-unit>
        <trans-unit id="3bed5baca126f10003a7fc44f4e55808b330feda" translate="yes" xml:space="preserve">
          <source>IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such characters include letters, marks, numbers, punctuation, symbols, and spaces, from categories L, M, N, P, S, and Zs.</source>
          <target state="translated">IsGraphicは、ルーンがUnicodeでグラフィックとして定義されているかどうかを報告します。このような文字には、L,M,N,P,S,Zsのカテゴリから、文字、マーク、数字、句読点、記号、スペースが含まれます。</target>
        </trans-unit>
        <trans-unit id="93d167ded0e381246ad35c4922eb8c26e2a4fc55" translate="yes" xml:space="preserve">
          <source>IsIdentifier reports whether name is a Go identifier, that is, a non-empty string made up of letters, digits, and underscores, where the first character is not a digit. Keywords are not identifiers.</source>
          <target state="translated">IsIdentifier は、名前が Go 識別子であるかどうかを報告します。つまり、文字、数字、アンダースコアで構成された空でない文字列で、最初の文字は数字ではありません。キーワードは識別子ではありません。</target>
        </trans-unit>
        <trans-unit id="679d30c5187a96f463dfbcdfb594ecc9983403ef" translate="yes" xml:space="preserve">
          <source>IsInf reports whether either real(x) or imag(x) is an infinity.</source>
          <target state="translated">IsInfは、real(x)とimag(x)のどちらかが無限大であるかを報告します。</target>
        </trans-unit>
        <trans-unit id="13dd75a92325ad267d0a2fa14c6cb50f24a9dd7b" translate="yes" xml:space="preserve">
          <source>IsInf reports whether f is an infinity, according to sign. If sign &amp;gt; 0, IsInf reports whether f is positive infinity. If sign &amp;lt; 0, IsInf reports whether f is negative infinity. If sign == 0, IsInf reports whether f is either infinity.</source>
          <target state="translated">符号によると、IsInfはfが無限大であるかどうかを報告します。符号&amp;gt; 0の場合、IsInfはfが正の無限大かどうかを報告します。符号&amp;lt;0の場合、IsInfはfが負の無限大かどうかを報告します。sign == 0の場合、IsInfはfが無限大かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="8e1783a22a02fb29f43965c4b4c975183d78e4dd" translate="yes" xml:space="preserve">
          <source>IsInf reports whether x is +Inf or -Inf.</source>
          <target state="translated">IsInfは、xが+Infか-Infかをレポートします。</target>
        </trans-unit>
        <trans-unit id="1b05edd34484393d17b771d708b4b2dd276cb90e" translate="yes" xml:space="preserve">
          <source>IsInt reports whether the denominator of x is 1.</source>
          <target state="translated">IsIntは、xの分母が1であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="63c80063be9af3740f75431caecb4e56ba22484c" translate="yes" xml:space="preserve">
          <source>IsInt reports whether x is an integer. &amp;plusmn;Inf values are not integers.</source>
          <target state="translated">IsIntは、xが整数かどうかを報告します。&amp;plusmn;Inf値は整数ではありません。</target>
        </trans-unit>
        <trans-unit id="00a1b79e443959417f450c9b16cf5f48a8929d0f" translate="yes" xml:space="preserve">
          <source>IsInt64 reports whether x can be represented as an int64.</source>
          <target state="translated">IsInt64は、xがint64として表現できるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="ab97d0f94b18fe8f3b28313a45a877858cc4fa50" translate="yes" xml:space="preserve">
          <source>IsInterface reports whether typ is an interface type.</source>
          <target state="translated">IsInterfaceは、typがインターフェイス型であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="c6bdcbe107886851b028b532be31d52568400157" translate="yes" xml:space="preserve">
          <source>IsInterfaceLocalMulticast reports whether ip is an interface-local multicast address.</source>
          <target state="translated">IsInterfaceLocalMulticast は、ip がインターフェイスローカルマルチキャストアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="203bcfa02f0ff2531137c0e97e09e91145ccf765" translate="yes" xml:space="preserve">
          <source>IsKeyword reports whether name is a Go keyword, such as &quot;func&quot; or &quot;return&quot;.</source>
          <target state="translated">IsKeyword は、名前が &quot;func&quot; や &quot;return&quot; などの Go キーワードであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="b1af467f9e4844b489b1e4d07d7f23c5a24e49f8" translate="yes" xml:space="preserve">
          <source>IsKeyword returns true for tokens corresponding to keywords; it returns false otherwise.</source>
          <target state="translated">IsKeywordは、キーワードに対応するトークンに対して真を返し、そうでない場合は偽を返します。</target>
        </trans-unit>
        <trans-unit id="9e659e799b643d193bc338fa878bc56e93c2043d" translate="yes" xml:space="preserve">
          <source>IsLetter reports whether the rune is a letter (category L).</source>
          <target state="translated">IsLetterは、ルーンが文字(カテゴリL)であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="796f0c2eac4ef075bdac49252f1a8a9437f7cb5a" translate="yes" xml:space="preserve">
          <source>IsLinkLocalMulticast reports whether ip is a link-local multicast address.</source>
          <target state="translated">IsLinkLocalMulticastは、ipがリンクローカルマルチキャストアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="bb398472e4891951632d23a856db9700a4f1260f" translate="yes" xml:space="preserve">
          <source>IsLinkLocalUnicast reports whether ip is a link-local unicast address.</source>
          <target state="translated">IsLinkLocalUnicastは、ipがリンクローカルユニキャストアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="338823e775821fbbffd934b6dc8f8c7b06cf31f5" translate="yes" xml:space="preserve">
          <source>IsLiteral returns true for tokens corresponding to identifiers and basic type literals; it returns false otherwise.</source>
          <target state="translated">IsLiteral は、識別子と基本型リテラルに対応するトークンに対して真を返します。</target>
        </trans-unit>
        <trans-unit id="a302aa5062a5a2939f950e77a3b1bd2cffbbb134" translate="yes" xml:space="preserve">
          <source>IsLocalImport reports whether the import path is a local import path, like &quot;.&quot;, &quot;..&quot;, &quot;./foo&quot;, or &quot;../foo&quot;.</source>
          <target state="translated">IsLocalImport は、インポートパスが &quot;.&quot;,&quot;..&quot;,&quot;./foo&quot;,&quot;../foo&quot; のようなローカルインポートパスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="a279a0dd486da312eb888a933fcd3c106d5ddf1b" translate="yes" xml:space="preserve">
          <source>IsLoopback reports whether ip is a loopback address.</source>
          <target state="translated">IsLoopbackは、ipがループバックアドレスであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="4c6115a445a46684f9b4821abab1454dcf00a510" translate="yes" xml:space="preserve">
          <source>IsLower reports whether the rune is a lower case letter.</source>
          <target state="translated">IsLowerは、ルーンが小文字であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="e316f3e3a4a4a943e13f969fe03fe3e6888a42f0" translate="yes" xml:space="preserve">
          <source>IsMark reports whether the rune is a mark character (category M).</source>
          <target state="translated">IsMarkは、ルーンがマーク文字(カテゴリM)であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="e919a8a1e5af711657ece2a09a282e053c84e876" translate="yes" xml:space="preserve">
          <source>IsMulticast reports whether ip is a multicast address.</source>
          <target state="translated">IsMulticastは、ipがマルチキャストアドレスであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="0d71475a6ac8cde45586a2e1ee4e9f1a73195c46" translate="yes" xml:space="preserve">
          <source>IsNaN reports whether either real(x) or imag(x) is NaN and neither is an infinity.</source>
          <target state="translated">IsNaNは、real(x)とimag(x)のどちらかがNaNで、どちらも無限大であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="51cb1fb375010c76e1d272e937551b9aa294ed29" translate="yes" xml:space="preserve">
          <source>IsNaN reports whether f is an IEEE 754 &amp;ldquo;not-a-number&amp;rdquo; value.</source>
          <target state="translated">IsNaNは、fがIEEE 754の「数値ではない」値かどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="e6682a80abf1bf240c434de0a86adc44d2b4fa9e" translate="yes" xml:space="preserve">
          <source>IsNaN reports whether v is the JavaScript value &quot;NaN&quot;.</source>
          <target state="translated">IsNaNは、vがJavaScriptの値 &quot;NaN &quot;であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="8a70a6c8c78f197d95d9931060aaaff0e1ad7ace" translate="yes" xml:space="preserve">
          <source>IsNil reports whether its argument v is nil. The argument must be a chan, func, interface, map, pointer, or slice value; if it is not, IsNil panics. Note that IsNil is not always equivalent to a regular comparison with nil in Go. For example, if v was created by calling ValueOf with an uninitialized interface variable i, i==nil will be true but v.IsNil will panic as v will be the zero Value.</source>
          <target state="translated">IsNilは、引数vがnilであるかどうかを報告します。引数は chan,func,interface,map,pointer,slice 値でなければなりません。IsNil は、Go の nil との通常の比較とは必ずしも一致しないことに注意してください。例えば、初期化されていないインターフェイス変数 i で ValueOf を呼び出して v が作成された場合、i==nil は真になりますが、v.IsNil は v がゼロの Value になるのでパニックになります。</target>
        </trans-unit>
        <trans-unit id="d1cbf137d274a495776ae13213f6abf32b87d01c" translate="yes" xml:space="preserve">
          <source>IsNil reports whether the corresponding expression denotes the predeclared value nil.</source>
          <target state="translated">IsNil は、対応する式が事前に宣言された値 nil を示すかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="299ff42ffbb3020ccb3e165c3f47990aa016cf3b" translate="yes" xml:space="preserve">
          <source>IsNotExist</source>
          <target state="translated">IsNotExist</target>
        </trans-unit>
        <trans-unit id="03c20e37da945e513d60a4c872afa073a5099855" translate="yes" xml:space="preserve">
          <source>IsNotExist returns a boolean indicating whether the error is known to report that a file or directory does not exist. It is satisfied by ErrNotExist as well as some syscall errors.</source>
          <target state="translated">IsNotExistは、ファイルまたはディレクトリが存在しないことを報告するエラーが知られているかどうかを示すブール値を返します。これは、いくつかのsyscallエラーと同様にErrNotExistによって満たされます。</target>
        </trans-unit>
        <trans-unit id="05e6aafd3bbc506bf83192365d5b5ee27918dfa7" translate="yes" xml:space="preserve">
          <source>IsNull reports whether v is the JavaScript value &quot;null&quot;.</source>
          <target state="translated">IsNull は、v が JavaScript の値 &quot;null&quot; であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="f2c323038256b2a2953181c6a475ccd896ada404" translate="yes" xml:space="preserve">
          <source>IsNumber reports whether the rune is a number (category N).</source>
          <target state="translated">IsNumberは、ルーンが数字(カテゴリN)であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="245475f668f23bbed41324e2de1b4948cc531ddc" translate="yes" xml:space="preserve">
          <source>IsOneOf reports whether the rune is a member of one of the ranges. The function &quot;In&quot; provides a nicer signature and should be used in preference to IsOneOf.</source>
          <target state="translated">IsOneOfは、ルーンがいずれかの範囲のメンバーであるかどうかを報告する。関数 &quot;In &quot;はより良いシグネチャを提供するので、IsOneOfよりも優先して使用すべきである。</target>
        </trans-unit>
        <trans-unit id="a20bd2f5568b340e7370b04b798bc3f83596bcce" translate="yes" xml:space="preserve">
          <source>IsOperator returns true for tokens corresponding to operators and delimiters; it returns false otherwise.</source>
          <target state="translated">IsOperator は、演算子とデリミタに対応するトークンに対して真を返し、そうでない場合は偽を返します。</target>
        </trans-unit>
        <trans-unit id="73c5624da9ca6fbf3e420dbf86786a852cc89a14" translate="yes" xml:space="preserve">
          <source>IsPathSeparator reports whether c is a directory separator character.</source>
          <target state="translated">IsPathSeparatorは、cがディレクトリセパレータ文字であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="8bd40ac27999a79bc28cf90f839e43d8f9372279" translate="yes" xml:space="preserve">
          <source>IsPermission returns a boolean indicating whether the error is known to report that permission is denied. It is satisfied by ErrPermission as well as some syscall errors.</source>
          <target state="translated">IsPermissionは、パーミッションが拒否されたことを報告するエラーが知られているかどうかを示すブール値を返します。これは、いくつかのsyscallエラーと同様にErrPermissionによって満たされます。</target>
        </trans-unit>
        <trans-unit id="ba016d3b011cf2a354ca328ddbed33673e5c990a" translate="yes" xml:space="preserve">
          <source>IsPlusBuild reports whether the line of text is a &amp;ldquo;// +build&amp;rdquo; constraint. It only checks the prefix of the text, not that the expression itself parses.</source>
          <target state="translated">IsPlusBuildは、テキスト行が「// + build」制約であるかどうかを報告します。式自体が解析するのではなく、テキストのプレフィックスのみをチェックします。</target>
        </trans-unit>
        <trans-unit id="e48f3df15b49da83d51099ad5b3eb8bbfd8edc75" translate="yes" xml:space="preserve">
          <source>IsPredeclared reports whether s is a predeclared identifier.</source>
          <target state="translated">IsPredeclaredは、sが事前に宣言された識別子であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="36ebaf4d189aca534d273d48d5ddeec782d7bed9" translate="yes" xml:space="preserve">
          <source>IsPrint</source>
          <target state="translated">IsPrint</target>
        </trans-unit>
        <trans-unit id="9798b863454466bfa901e359486dca8125aebd8e" translate="yes" xml:space="preserve">
          <source>IsPrint reports whether the rune is defined as printable by Go, with the same definition as unicode.IsPrint: letters, numbers, punctuation, symbols and ASCII space.</source>
          <target state="translated">IsPrintは、ルーンがGoで印刷可能と定義されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="98481c27a5fae0a861fa7de3b6778c4d86a82e18" translate="yes" xml:space="preserve">
          <source>IsPrint reports whether the rune is defined as printable by Go. Such characters include letters, marks, numbers, punctuation, symbols, and the ASCII space character, from categories L, M, N, P, S and the ASCII space character. This categorization is the same as IsGraphic except that the only spacing character is ASCII space, U+0020.</source>
          <target state="translated">IsPrintは、ルーンがGoで印刷可能と定義されているかどうかを報告します。このような文字には、文字、マーク、数字、句読点、記号、およびカテゴリL、M、N、P、S、およびASCIIスペース文字が含まれます。この分類は、スペーシング文字がASCIIスペース文字のU+0020のみであることを除いては、IsGraphicと同じです。</target>
        </trans-unit>
        <trans-unit id="8d669f2d873d45ac65ae33ba5fc527f66e56a570" translate="yes" xml:space="preserve">
          <source>IsPunct reports whether the rune is a Unicode punctuation character (category P).</source>
          <target state="translated">IsPunctは、ルーンがUnicode句読点文字(カテゴリP)であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="09f51db22f739274d216b281ce628857122cde77" translate="yes" xml:space="preserve">
          <source>IsRegular reports whether m describes a regular file. That is, it tests that no mode type bits are set.</source>
          <target state="translated">IsRegularは、mが通常のファイルを記述しているかどうかを報告します。つまり、モードタイプのビットが設定されていないことをテストします。</target>
        </trans-unit>
        <trans-unit id="7aa02fb0658d675b5c73f5d774f227af20e5eda3" translate="yes" xml:space="preserve">
          <source>IsScanValue is equivalent to IsValue. It exists for compatibility.</source>
          <target state="translated">IsScanValueはIsValueと同等です。これは互換性のために存在します。</target>
        </trans-unit>
        <trans-unit id="02fd007fd97349a8b2fafa3e48b3fe7f504ea24c" translate="yes" xml:space="preserve">
          <source>IsSorted reports whether data is sorted.</source>
          <target state="translated">IsSorted は、データがソートされているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="514d21d401add5f58b109e05d3a8a2615962f831" translate="yes" xml:space="preserve">
          <source>IsSpace reports whether the rune is a space character as defined by Unicode's White Space property; in the Latin-1 space this is</source>
          <target state="translated">IsSpaceは、ルーンがUnicodeのWhite Spaceプロパティで定義されているスペース文字であるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="b8364c32e39bc01deb2db29de008f790b53e0511" translate="yes" xml:space="preserve">
          <source>IsSurrogate reports whether the specified Unicode code point can appear in a surrogate pair.</source>
          <target state="translated">IsSurrogateは、指定されたUnicodeコードポイントがサロゲートペアに現れるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="94ff69a73ee80e68160fc5d14463531f326feb1a" translate="yes" xml:space="preserve">
          <source>IsSymbol reports whether the rune is a symbolic character.</source>
          <target state="translated">IsSymbolは、ルーンが記号文字であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="80e8a9046c478caac6544a67a67898f6f56d102d" translate="yes" xml:space="preserve">
          <source>IsTimeout returns a boolean indicating whether the error is known to report that a timeout occurred.</source>
          <target state="translated">IsTimeoutは、タイムアウトが発生したことを報告するためにエラーが知られているかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="5dae031aae8f79fce18391198feff6e45790996f" translate="yes" xml:space="preserve">
          <source>IsTitle reports whether the rune is a title case letter.</source>
          <target state="translated">IsTitleは、ルーンがタイトル・ケースレターであるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="47cdd782e568065cbc896003cc3080e6fa343e64" translate="yes" xml:space="preserve">
          <source>IsTrue reports whether the value is 'true', in the sense of not the zero of its type, and whether the value has a meaningful truth value. This is the definition of truth used by if and other such actions.</source>
          <target state="translated">IsTrueは、その型のゼロではないという意味で、値が「真」であるかどうかを報告し、その値が意味のある真理値を持っているかどうかを報告します。これはifなどのアクションで使われる真理の定義です。</target>
        </trans-unit>
        <trans-unit id="f386d0c906e9366cb699b0ae4451bc9d70023dc4" translate="yes" xml:space="preserve">
          <source>IsType reports whether the corresponding expression specifies a type.</source>
          <target state="translated">IsTypeは、対応する式が型を指定しているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="bd72caa363338547d5699b96c1b4ac80c8cd24c1" translate="yes" xml:space="preserve">
          <source>IsUint64 reports whether x can be represented as a uint64.</source>
          <target state="translated">IsUint64は、xがuint64として表現できるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="85a3cd11f8d331b3763c1e34e0ce1cfca9c37e79" translate="yes" xml:space="preserve">
          <source>IsUndefined reports whether v is the JavaScript value &quot;undefined&quot;.</source>
          <target state="translated">IsUndefined は、v が JavaScript の値 &quot;undefined&quot; であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="6b3721da2086f5e9441475d80b1c204e06489512" translate="yes" xml:space="preserve">
          <source>IsUnspecified reports whether ip is an unspecified address, either the IPv4 address &quot;0.0.0.0&quot; or the IPv6 address &quot;::&quot;.</source>
          <target state="translated">IsUnspecifiedは、IPv4アドレス「0.0.0.0.0」またはIPv6アドレス「::」のいずれかであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="b72d29b8198db403c8169f5f00434fb729acb678" translate="yes" xml:space="preserve">
          <source>IsUpper reports whether the rune is an upper case letter.</source>
          <target state="translated">IsUpperは、ルーンが大文字かどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="ecc382ac4eeae90631c4ff786a142c8cd4a2a1e3" translate="yes" xml:space="preserve">
          <source>IsValid reports whether the position is valid.</source>
          <target state="translated">IsValid は、ポジションが有効かどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="fa9386e1dba484fd3efd4626c53284c1fe827e1b" translate="yes" xml:space="preserve">
          <source>IsValid reports whether v represents a value. It returns false if v is the zero Value. If IsValid returns false, all other methods except String panic. Most functions and methods never return an invalid Value. If one does, its documentation states the conditions explicitly.</source>
          <target state="translated">IsValid は、v が値を表すかどうかをレポートします。v がゼロの値の場合は false を返します。IsValid が false を返すと、String 以外のすべてのメソッドがパニックになります。ほとんどの関数やメソッドは、無効な値を返すことはありません。無効な値を返す関数やメソッドがある場合は、そのドキュメントに条件が明示されています。</target>
        </trans-unit>
        <trans-unit id="6b4d65bab951e443a5b5a6cb70b5527aa329d397" translate="yes" xml:space="preserve">
          <source>IsValid reports whether v represents a value. It returns false if v is the zero Value. If IsValid returns false, all other methods except String panic. Most functions and methods never return an invalid value. If one does, its documentation states the conditions explicitly.</source>
          <target state="translated">IsValid は、v が値を表すかどうかをレポートします。v がゼロの値の場合は false を返します。IsValid が false を返すと、String 以外のすべてのメソッドがパニックになります。ほとんどの関数やメソッドは、無効な値を返すことはありません。無効な値を返す場合は、そのドキュメントに明示的に条件が記載されています。</target>
        </trans-unit>
        <trans-unit id="55d30ff7d3d863a32468776759178dbe0451ccce" translate="yes" xml:space="preserve">
          <source>IsValue reports whether the corresponding expression is a value. Builtins are not considered values. Constant values have a non- nil Value.</source>
          <target state="translated">IsValueは、対応する式が値であるかどうかを報告します。ビルトインは値とはみなされません。定数の値は、非nilのValueを持ちます。</target>
        </trans-unit>
        <trans-unit id="9d7a5d3a7652824e4f9b549a7d5a262a10ef59c5" translate="yes" xml:space="preserve">
          <source>IsValue reports whether v is a valid Value parameter type.</source>
          <target state="translated">IsValueは、vが有効なValueパラメータ型であるかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="65e1a871482dad54f08e17dd72762a3fd2f75d74" translate="yes" xml:space="preserve">
          <source>IsVoid reports whether the corresponding expression is a function call without results.</source>
          <target state="translated">IsVoidは、対応する式が結果を伴わない関数呼び出しであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="297c16f9ae029663b610c3b616363007a062b053" translate="yes" xml:space="preserve">
          <source>IsWordChar reports whether r is consider a &amp;ldquo;word character&amp;rdquo; during the evaluation of the \b and \B zero-width assertions. These assertions are ASCII-only: the word characters are [A-Za-z0-9_].</source>
          <target state="translated">IsWordCharは、\ bおよび\ Bのゼロ幅アサーションの評価中にrが「ワード文字」と見なされるかどうかを報告します。これらのアサーションはASCIIのみです。文字は[A-Za-z0-9_]です。</target>
        </trans-unit>
        <trans-unit id="5f0397c5af2b47c485a6cac89d344b49d39148e5" translate="yes" xml:space="preserve">
          <source>IsZero reports whether t represents the zero time instant, January 1, year 1, 00:00:00 UTC.</source>
          <target state="translated">IsZero は、t がゼロ時間の瞬間、1 年 1 月 1 日 00:00:00:00 UTC を表しているかどうかをレポートします。</target>
        </trans-unit>
        <trans-unit id="14b29f8979f8b38e486b8c2fc265fcec75315a1b" translate="yes" xml:space="preserve">
          <source>IsZero reports whether v is the zero value for its type. It panics if the argument is invalid.</source>
          <target state="translated">IsZeroは、vがその型のゼロ値であるかどうかを報告します。引数が無効な場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="2e5ba7b50d53dc66de9ac76f94ae84e19ac42a4e" translate="yes" xml:space="preserve">
          <source>IsolationLevel is the transaction isolation level stored in TxOptions.</source>
          <target state="translated">IsolationLevelはTxOptionsに格納されているトランザクション分離レベルです。</target>
        </trans-unit>
        <trans-unit id="00b8885e61c34531225b38e32ae41a763eb82a05" translate="yes" xml:space="preserve">
          <source>IsolationLevel is the transaction isolation level used in TxOptions.</source>
          <target state="translated">IsolationLevelはTxOptionsで使用されるトランザクション分離レベルです。</target>
        </trans-unit>
        <trans-unit id="d76fb5eb8c221bc52330dc2413a54b325f8af681" translate="yes" xml:space="preserve">
          <source>It does nothing if the URL's scheme is not HTTP or HTTPS.</source>
          <target state="translated">URL のスキームが HTTP または HTTPS でない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="730fc66fc7c6f8658abbd279912d4debd6897a14" translate="yes" xml:space="preserve">
          <source>It is allowed but not required for the caller to hold c.L during the call.</source>
          <target state="translated">発信者が通話中にc.Lをホールドすることは許可されていますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="64b18effbf60d196d9c9972b0f4752ad49d90515" translate="yes" xml:space="preserve">
          <source>It is allowed to call Notify multiple times with different channels and the same signals: each channel receives copies of incoming signals independently.</source>
          <target state="translated">異なるチャネルと同じ信号で複数回Notifyを呼び出すことができます:各チャネルは受信信号のコピーを独立して受信します。</target>
        </trans-unit>
        <trans-unit id="2b72f5a15cc86252895b6a5820ed7c36974cccb2" translate="yes" xml:space="preserve">
          <source>It is allowed to call Notify multiple times with the same channel: each call expands the set of signals sent to that channel. The only way to remove signals from the set is to call Stop.</source>
          <target state="translated">同じチャンネルで複数回 Notify を呼び出すことができます。シグナルをセットから削除する唯一の方法は Stop を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="64b9ab50226fefd57abe4e106fe4fbde6d348569" translate="yes" xml:space="preserve">
          <source>It is defined in RFC 1950:</source>
          <target state="translated">これはRFC 1950で定義されています。</target>
        </trans-unit>
        <trans-unit id="3527f9b32341885623b87c38f5f98392bdedd8dc" translate="yes" xml:space="preserve">
          <source>It is equivalent to SplitAfterN with a count of -1.</source>
          <target state="translated">これは SplitAfterN のカウントを -1 としたものと同等です。</target>
        </trans-unit>
        <trans-unit id="dbac3455f5dcff27b15907e612c36dc6d6627118" translate="yes" xml:space="preserve">
          <source>It is equivalent to SplitN with a count of -1.</source>
          <target state="translated">SplitNのカウントが-1の場合と同等です。</target>
        </trans-unit>
        <trans-unit id="9bc89c86db3c02e15ec65887cfcf0cc312b36a24" translate="yes" xml:space="preserve">
          <source>It is not associated with any particular color profile.</source>
          <target state="translated">特定のカラープロファイルとは関係ありません。</target>
        </trans-unit>
        <trans-unit id="8b9cf269b7a066efe335dc4941105afdd2791a76" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that a finalizer will run for objects allocated in initializers for package-level variables. Such objects may be linker-allocated, not heap-allocated.</source>
          <target state="translated">パッケージレベルの変数のイニシャライザに割り当てられたオブジェクトに対してファイナライザが実行されることは保証されていません。このようなオブジェクトは、ヒープではなくリンカで割り当てられているかもしれません。</target>
        </trans-unit>
        <trans-unit id="185afc47d5312f1df75d7c2e1fd8c497c93c1bee" translate="yes" xml:space="preserve">
          <source>It is not guaranteed that a finalizer will run if the size of *obj is zero bytes.</source>
          <target state="translated">objのサイズが0バイトの場合、ファイナライザが実行されることは保証されていません。</target>
        </trans-unit>
        <trans-unit id="e276973efe0e06473fcbf2184470a55ce905f9ea" translate="yes" xml:space="preserve">
          <source>It is rare to Close a DB, as the DB handle is meant to be long-lived and shared between many goroutines.</source>
          <target state="translated">DBハンドルは長寿命を意味し、多くのゴロチン間で共有されているため、DBを閉じることは稀です。</target>
        </trans-unit>
        <trans-unit id="9a7d91a6cfdd5d25c7a9aebf66715a0621fd64e1" translate="yes" xml:space="preserve">
          <source>It is safe to call Dialer's methods concurrently.</source>
          <target state="translated">ダイアラーのメソッドを同時に呼び出しても問題ありません。</target>
        </trans-unit>
        <trans-unit id="13c70c7692f708ab80a79d217ba3b943c3b63874" translate="yes" xml:space="preserve">
          <source>It is safe to call Read and Write in parallel with each other or with Close. Parallel calls to Read and parallel calls to Write are also safe: the individual calls will be gated sequentially.</source>
          <target state="translated">ReadとWriteを互いに並行して、またはCloseと並行して呼び出すのは安全です。Readへの並列呼び出しやWriteへの並列呼び出しも安全です。</target>
        </trans-unit>
        <trans-unit id="fdb69e790ac12df4afc740ea8ac0b288915135a0" translate="yes" xml:space="preserve">
          <source>It is safe to execute multiple Read calls concurrently, but their arguments must share no underlying memory. When in doubt, create a new []Sample from scratch, which is always safe, though may be inefficient.</source>
          <target state="translated">複数のReadコールを同時に実行しても問題ありませんが、それらの引数は基礎となるメモリを共有してはいけません。疑わしい場合は、最初から新しい[]Sampleを作成してください。これは、非効率かもしれませんが、常に安全です。</target>
        </trans-unit>
        <trans-unit id="8e87bdde62b3a11cc618f6eef7d1ef7e95ea027e" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary for a test program to do extra setup or teardown before or after testing. It is also sometimes necessary for a test to control which code runs on the main thread. To support these and other cases, if a test file contains a function:</source>
          <target state="translated">テストプログラムでは、テストの前後に余分なセットアップやティアダウンを行うことが必要になることがあります。また、どのコードがメインスレッド上で実行されるかを制御するためにテストが必要になることもあります。これらのケースやその他のケースをサポートするために、テストファイルに関数が含まれている場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="c4c640b2d1c13408fc0addbe9ca9b3e33c914d4c" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to call Close on the Reader when done.</source>
          <target state="translated">終わったらClose on the Readerを呼び出すのは発信者の責任です。</target>
        </trans-unit>
        <trans-unit id="986480998eaebed4b6a54647e1482613d046d84f" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to call Close on the Writer when done. Writes may be buffered and not flushed until Close.</source>
          <target state="translated">書き込みが完了したら、ライター上でCloseを呼び出すのは呼び出し側の責任です。書き込みはバッファリングされ、Closeまでフラッシュされないことがあります。</target>
        </trans-unit>
        <trans-unit id="5d5e9d1ff14ea8de0b89e8865f3f584d482a0afe" translate="yes" xml:space="preserve">
          <source>It is useful mainly in compressed network protocols, to ensure that a remote reader has enough data to reconstruct a packet. Flush does not return until the data has been written. If the underlying writer returns an error, Flush returns that error.</source>
          <target state="translated">これは主に圧縮されたネットワークプロトコルで有用で、リモートリーダーがパケットを再構築するのに十分なデータを持っていることを保証します。Flush はデータが書き込まれるまで戻りません。基礎となるライタがエラーを返した場合、Flush はそのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="31cc99464ed62136a451655119e840afa7451b83" translate="yes" xml:space="preserve">
          <source>It is valid both to add and to subtract offsets from a pointer in this way. It is also valid to use &amp;amp;^ to round pointers, usually for alignment. In all cases, the result must continue to point into the original allocated object.</source>
          <target state="translated">このようにして、ポインターにオフセットを加算したり、ポインターから減算したりすることは有効です。また、通常は位置合わせのために、ポインターを丸めるために＆^を使用することも有効です。すべての場合において、結果は元の割り当てられたオブジェクトを指し示す必要があります。</target>
        </trans-unit>
        <trans-unit id="dd1e16d418b70f8a4bcbc355b1da37369ffe8113" translate="yes" xml:space="preserve">
          <source>It makes one call to data.Len to determine n, O(n*log(n)) calls to data.Less and O(n*log(n)*log(n)) calls to data.Swap.</source>
          <target state="translated">これは、nを決定するためにdata.Lenを1回呼び出し、data.LessをO(n*log(n)呼び出し、data.SwapをO(n*log(n)*log(n)呼び出し)します。</target>
        </trans-unit>
        <trans-unit id="49a3b03dcb3864c71030445c5ba5bfe2611711d2" translate="yes" xml:space="preserve">
          <source>It may also be received into any of these:</source>
          <target state="translated">また、これらのいずれかに受け取られることもあります。</target>
        </trans-unit>
        <trans-unit id="7b88fc3e61debf0d0f1a1581e71a0996edf539a5" translate="yes" xml:space="preserve">
          <source>It panics if count is negative or if the result of (len(b) * count) overflows.</source>
          <target state="translated">countが負の値であったり、(len(b)*count)の結果がオーバーフローした場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="8b61a1a4bb411ee036d7d3cc509678ace33cef83" translate="yes" xml:space="preserve">
          <source>It panics if count is negative or if the result of (len(s) * count) overflows.</source>
          <target state="translated">countが負の値であったり、(len(s)*count)の結果がオーバーフローした場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="652db58383317d0338f369bbd62022ed3ab07600" translate="yes" xml:space="preserve">
          <source>It panics if the Value was obtained by accessing unexported struct fields.</source>
          <target state="translated">ポートされていない構造体フィールドにアクセスして値が取得された場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="564d342d70ea92defe3199a234b7ca21ece54f95" translate="yes" xml:space="preserve">
          <source>It returns a *rsa.PrivateKey, a *ecdsa.PrivateKey, or a ed25519.PrivateKey. More types might be supported in the future.</source>
          <target state="translated">rsa.PrivateKey、*ecdsa.PrivateKey、またはed25519.PrivateKeyを返します。将来的には、より多くの型がサポートされるかもしれません。</target>
        </trans-unit>
        <trans-unit id="9f11d9cd546ed2abe8e697fa6f8bbdc2a3d2e5ef" translate="yes" xml:space="preserve">
          <source>It returns a *rsa.PublicKey, *dsa.PublicKey, *ecdsa.PublicKey, or ed25519.PublicKey. More types might be supported in the future.</source>
          <target state="translated">これは、*rsa.PublicKey、*dsa.PublicKey、*ecdsa.PublicKey、またはed25519.PublicKeyを返します。将来的には、より多くの型がサポートされるようになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e5010d434ca33dd92d7a44910817533939048059" translate="yes" xml:space="preserve">
          <source>It returns an empty slice if the URL's scheme is not HTTP or HTTPS.</source>
          <target state="translated">URL のスキームが HTTP または HTTPS でない場合は、空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="2b565edf53edd5e13295b4a395aad926eda82327" translate="yes" xml:space="preserve">
          <source>It returns an error if t has already been executed.</source>
          <target state="translated">すでに t が実行されている場合はエラーを返します。</target>
        </trans-unit>
        <trans-unit id="a56353db7fb203c22e0bfd117b292abd05c5de94" translate="yes" xml:space="preserve">
          <source>It returns an error if t or any associated template has already been executed.</source>
          <target state="translated">tまたは関連するテンプレートが既に実行されている場合はエラーを返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
