<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="c961995e6db994658573efe84b7d63130f82e309" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;--preserve-symlinks&lt;/code&gt; for more information.</source>
          <target state="translated">詳細は &lt;code&gt;--preserve-symlinks&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8571e10c0022c7b29c946c36b9ab7f58ad0b2ed7" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;SSL_CERT_DIR&lt;/code&gt; and &lt;code&gt;SSL_CERT_FILE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SSL_CERT_DIR&lt;/code&gt; および &lt;code&gt;SSL_CERT_FILE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d466c3ac92fdbe66e618833da57895cc6b506d14" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Writable&lt;/code&gt; stream &lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; method for more information.</source>
          <target state="translated">詳細については、 &lt;code&gt;Writable&lt;/code&gt; ストリームの&lt;a href=&quot;stream#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;write()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="d3fb320a2919b2e345ebe8192ebd8762ce6cabfb" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;subprocess.send()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ed6776b19dd733111285b4842abee409521089da" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#util_util_types_isarraybuffer_value&quot;&gt;&lt;code&gt;util.types.isArrayBuffer()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#util_util_types_issharedarraybuffer_value&quot;&gt;&lt;code&gt;util.types.isSharedArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#util_util_types_isarraybuffer_value&quot;&gt; &lt;code&gt;util.types.isArrayBuffer()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#util_util_types_issharedarraybuffer_value&quot;&gt; &lt;code&gt;util.types.isSharedArrayBuffer()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="e850e92e9e3a4462837d0e8a21f2341c800069ce" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView&quot;&gt;&lt;code&gt;ArrayBuffer.isView()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView&quot;&gt; &lt;code&gt;ArrayBuffer.isView()&lt;/code&gt; &lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="69a4b862ea1577e53ba9a4276b8bac602e08759b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="2e0f1a2a6fc66ae85bacb071c819dde12b453725" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#http_request_settimeout_timeout_callback&quot;&gt;&lt;code&gt;request.setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関連項目：&lt;a href=&quot;#http_request_settimeout_timeout_callback&quot;&gt; &lt;code&gt;request.setTimeout()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1a9857783a6066061979503838602f96c3d060bd" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#net_socket_settimeout_timeout_callback&quot;&gt;&lt;code&gt;socket.setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#net_socket_settimeout_timeout_callback&quot;&gt; &lt;code&gt;socket.setTimeout()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98fd813f44fcc5e17312c9f6e13b639a7e49a88a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;writable.cork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;writable.cork()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2ef4b4902386c6a49441fc44b122fac1531f12c" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;writable.uncork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#stream_writable_writev_chunks_callback&quot;&gt;&lt;code&gt;writable._writev()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#stream_writable_uncork&quot;&gt; &lt;code&gt;writable.uncork()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#stream_writable_writev_chunks_callback&quot;&gt; &lt;code&gt;writable._writev()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e032823b03e7a6f7deab984d5ba6c1d38d5f2e01" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;writable.uncork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;#stream_writable_uncork&quot;&gt; &lt;code&gt;writable.uncork()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f29d79cfd17c658aab1a50fc05726b76d9e9db6b" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://man7.org/linux/man-pages/man2/chmod.2.html&quot;&gt;&lt;code&gt;chmod(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照してください：&lt;a href=&quot;http://man7.org/linux/man-pages/man2/chmod.2.html&quot;&gt; &lt;code&gt;chmod(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c845c6474ad9dcd27a20b3f11751353a6409c8af" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://man7.org/linux/man-pages/man2/chown.2.html&quot;&gt;&lt;code&gt;chown(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;http://man7.org/linux/man-pages/man2/chown.2.html&quot;&gt; &lt;code&gt;chown(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c4f64e5cc462497961ab6fea014643e4085dc8d" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://man7.org/linux/man-pages/man2/mkdir.2.html&quot;&gt;&lt;code&gt;mkdir(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;http://man7.org/linux/man-pages/man2/mkdir.2.html&quot;&gt; &lt;code&gt;mkdir(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c7cc66c41a692aca3eac161bf3030c22aa0a04f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt;&lt;code&gt;rename(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">「&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt; &lt;code&gt;rename(2)&lt;/code&gt; &lt;/a&gt;」も参照してください。</target>
        </trans-unit>
        <trans-unit id="c773ff32a124a1d2b5f1068c6cad378ec1ec424a" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt;&lt;code&gt;unlink(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt; &lt;code&gt;unlink(2)&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="128a85c1454f660e5213abb5d235c3787ee28094" translate="yes" xml:space="preserve">
          <source>See also: the return values of &lt;code&gt;socket.write()&lt;/code&gt;.</source>
          <target state="translated">参照してください：の戻り値 &lt;code&gt;socket.write()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ccc96936f1b8ab004db41fe5e599755ab39ed7d" translate="yes" xml:space="preserve">
          <source>See how to write a custom &lt;a href=&quot;#events_emitter_symbol_for_nodejs_rejection_err_eventname_args&quot;&gt;rejection handler&lt;/a&gt;.</source>
          <target state="translated">カスタム&lt;a href=&quot;#events_emitter_symbol_for_nodejs_rejection_err_eventname_args&quot;&gt;拒否ハンドラーの&lt;/a&gt;作成方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0918c708b8d62946096632e41d206b6303638b0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;Implementation considerations section&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#dns_implementation_considerations&quot;&gt;実装に関する考慮事項のセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4d8b7ebbad2cfe3d5f0944f26fcfc4bd0306c6e4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#inspector_security&quot;&gt;security warning&lt;/a&gt; below regarding the &lt;code&gt;host&lt;/code&gt; parameter usage.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; パラメータの使用については、以下の&lt;a href=&quot;#inspector_security&quot;&gt;セキュリティ警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e2e82fe1228d737a96e6ae73e12e34aed58334ab" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#n_api_error_handling&quot;&gt;Error Handling&lt;/a&gt; section for additional information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#n_api_error_handling&quot;&gt;エラー処理&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="854e1e05cf92f502e28d0326353f93f391e9d50d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#n_api_error_handling&quot;&gt;Error handling&lt;/a&gt; section for additional information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#n_api_error_handling&quot;&gt;エラー処理の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="53ede92d82105cab62c5392164315c94995bec8b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;process.emitWarning()&lt;/code&gt;&lt;/a&gt; method for issuing custom or application-specific warnings.</source>
          <target state="translated">カスタムまたはアプリケーション固有の警告を発行するには、&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;process.emitWarning()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="aab77cb1270881a615513d86f78444483881dcc2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;cli#inspector_security&quot;&gt;security warning&lt;/a&gt; regarding the &lt;code&gt;host&lt;/code&gt; parameter usage.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; パラメータの使用に関する&lt;a href=&quot;cli#inspector_security&quot;&gt;セキュリティ警告を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f63cc95ede2d2107cfa6c45dc9fe8ab7ed5a603f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://nodejs.org/en/docs/guides/debugging-getting-started/#security-implications&quot;&gt;debugging security implications&lt;/a&gt; section for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://nodejs.org/en/docs/guides/debugging-getting-started/#security-implications&quot;&gt;セキュリティへの影響&lt;/a&gt;のデバッグのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1d0601652bb8b185faf3a1b722376a6e0beb0c8e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://wiki.openssl.org/index.php/List_of_SSL_OP_Flags#Table_of_Options&quot;&gt;list of SSL OP Flags&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://wiki.openssl.org/index.php/List_of_SSL_OP_Flags#Table_of_Options&quot;&gt;SSLOPフラグのリストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bb4557c9e4e329d055c1f433ad54aead74b7237d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://zlib.net/manual.html#Advanced&quot;&gt;&lt;code&gt;deflateInit2&lt;/code&gt; and &lt;code&gt;inflateInit2&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://zlib.net/manual.html#Advanced&quot;&gt; &lt;code&gt;deflateInit2&lt;/code&gt; および &lt;code&gt;inflateInit2&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a5a4beb85f8d2ff5f8699942014f44ed0dcb82a2" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;tty#tty_tty&quot;&gt;TTYの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c392cdb923f76643d5427b7c764a057d6efb0803" translate="yes" xml:space="preserve">
          <source>See the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material.html&quot;&gt;&lt;code&gt;SSL_export_keying_material&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material.html&quot;&gt; &lt;code&gt;SSL_export_keying_material&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7dfd5e81eaa304d60c097fe15a319e2973aa3914" translate="yes" xml:space="preserve">
          <source>See the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html&quot;&gt;&lt;code&gt;SSL_get_version&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細については、OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html&quot;&gt; &lt;code&gt;SSL_get_version&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="95732f4e1b6cc55d6a3eceeb3ab1e3920880b04f" translate="yes" xml:space="preserve">
          <source>See the reference for other recommendations and details.</source>
          <target state="translated">その他のおすすめポイントや詳細は参考にしてください。</target>
        </trans-unit>
        <trans-unit id="7fc53ef83718bb1eeaa8f36cd1fe19751f87505d" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;Child Process module&lt;/a&gt;.</source>
          <target state="translated">参照：&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;子プロセスモジュールを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e5638461af47bdd238b966838fbb3e5e239d5718" translate="yes" xml:space="preserve">
          <source>Send a message to a worker or master, optionally with a handle.</source>
          <target state="translated">ワーカーまたはマスターにメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="216ac1621b090e6ff6f992e3cfe752886b16bdd5" translate="yes" xml:space="preserve">
          <source>Send a message to the worker that will be received via &lt;a href=&quot;#worker_threads_event_message&quot;&gt;&lt;code&gt;require('worker_threads').parentPort.on('message')&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_event_message&quot;&gt; &lt;code&gt;require('worker_threads').parentPort.on('message')&lt;/code&gt; &lt;/a&gt;を介して受信されるメッセージをワーカーに送信します。詳細については、&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;port.postMessage()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1601e05aa8d7387978d504b11d58b19c5c79e1bb" translate="yes" xml:space="preserve">
          <source>Sending &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGTERM&lt;/code&gt;, and &lt;code&gt;SIGKILL&lt;/code&gt; will cause the unconditional termination of the target process, and afterwards, subprocess will report that the process was terminated by signal.</source>
          <target state="translated">&lt;code&gt;SIGINT&lt;/code&gt; 、 &lt;code&gt;SIGTERM&lt;/code&gt; 、および &lt;code&gt;SIGKILL&lt;/code&gt; を送信すると、ターゲットプロセスが無条件に終了し、その後、サブプロセスはプロセスがシグナルによって終了したことを報告します。</target>
        </trans-unit>
        <trans-unit id="baf1d486a054aa977d47adc0ad4f3b1cdbe43cae" translate="yes" xml:space="preserve">
          <source>Sending a 'Connection: keep-alive' will notify Node.js that the connection to the server should be persisted until the next request.</source>
          <target state="translated">Connection:keep-alive」を送信すると、次のリクエストが来るまでサーバへの接続を保持するようにNode.jsに通知します。</target>
        </trans-unit>
        <trans-unit id="173494763482f830f3a8c39e58f3783f99650e57" translate="yes" xml:space="preserve">
          <source>Sending a 'Content-Length' header will disable the default chunked encoding.</source>
          <target state="translated">Content-Length' ヘッダーを送信すると、デフォルトのチャンク化されたエンコーディングが無効になります。</target>
        </trans-unit>
        <trans-unit id="069ba33c5d76ad47fad096eba34eeb2afbe84d8d" translate="yes" xml:space="preserve">
          <source>Sending a message to the child process failed.</source>
          <target state="translated">子プロセスへのメッセージ送信に失敗しました。</target>
        </trans-unit>
        <trans-unit id="4c3644ba8bdf515404092cd010f062856414846a" translate="yes" xml:space="preserve">
          <source>Sending an 'Expect' header will immediately send the request headers. Usually, when sending 'Expect: 100-continue', both a timeout and a listener for the &lt;code&gt;'continue'&lt;/code&gt; event should be set. See RFC 2616 Section 8.2.3 for more information.</source>
          <target state="translated">'Expect'ヘッダーを送信すると、すぐに要求ヘッダーが送信されます。通常、「Expect：100-continue」を送信するときは、タイムアウトと &lt;code&gt;'continue'&lt;/code&gt; イベントのリスナーの両方を設定する必要があります。詳細については、RFC 2616セクション8.2.3を参照してください。</target>
        </trans-unit>
        <trans-unit id="974501461a0160cf744b2100773d9178949dd57d" translate="yes" xml:space="preserve">
          <source>Sending an &lt;code&gt;ALTSVC&lt;/code&gt; frame with a specific stream ID indicates that the alternate service is associated with the origin of the given &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">特定のストリームIDで &lt;code&gt;ALTSVC&lt;/code&gt; フレームを送信することは、代替サービスが特定の &lt;code&gt;Http2Stream&lt;/code&gt; の発信元に関連付けられていることを示します。</target>
        </trans-unit>
        <trans-unit id="4b25844f373648a414f348f869166ae8b8a8abce" translate="yes" xml:space="preserve">
          <source>Sending an Authorization header will override using the &lt;code&gt;auth&lt;/code&gt; option to compute basic authentication.</source>
          <target state="translated">Authorizationヘッダーを送信すると、 &lt;code&gt;auth&lt;/code&gt; オプションを使用して基本認証を計算するよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="1fdc0abc67eb0bb9eb02913433b1274bb71bda89" translate="yes" xml:space="preserve">
          <source>Sending multiple buffers might be faster or slower depending on the application and operating system. It is important to run benchmarks to determine the optimal strategy on a case-by-case basis. Generally speaking, however, sending multiple buffers is faster.</source>
          <target state="translated">複数のバッファを送信した方が、アプリケーションやオペレーティングシステムによっては速くなったり遅くなったりすることがあります。ベンチマークを実行して、ケースバイケースで最適な戦略を決定することが重要です。しかし、一般的には、複数のバッファを送信した方が高速です。</target>
        </trans-unit>
        <trans-unit id="6fc8e003bc3eb12c5ec8a4e8ca27394a757c4d07" translate="yes" xml:space="preserve">
          <source>Sending multiple buffers might be faster or slower depending on the application and operating system. Run benchmarks to determine the optimal strategy on a case-by-case basis. Generally speaking, however, sending multiple buffers is faster.</source>
          <target state="translated">複数のバッファを送信する方が、アプリケーションやオペレーティング・システムによっては速くなったり遅くなったりする場合があります。ベンチマークを実行して、ケースバイケースで最適な戦略を決定してください。しかし、一般的には、複数のバッファを送信する方が高速です。</target>
        </trans-unit>
        <trans-unit id="7c46acccb5705b498575d1a37e35a5ceb72f8e90" translate="yes" xml:space="preserve">
          <source>Sending signal &lt;code&gt;0&lt;/code&gt; can be used as a platform independent way to test for the existence of a process.</source>
          <target state="translated">シグナル &lt;code&gt;0&lt;/code&gt; の送信は、プロセスの存在をテストするためのプラットフォームに依存しない方法として使用できます。</target>
        </trans-unit>
        <trans-unit id="8cc2af068b550027c4c6c754f12bf9fd40996a2f" translate="yes" xml:space="preserve">
          <source>Sends a &lt;code&gt;PING&lt;/code&gt; frame to the connected HTTP/2 peer. A &lt;code&gt;callback&lt;/code&gt; function must be provided. The method will return &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;PING&lt;/code&gt; was sent, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">送信 &lt;code&gt;PING&lt;/code&gt; の接続HTTP / 2ピアにフレーム。 &lt;code&gt;callback&lt;/code&gt; 関数が提供されなければなりません。このメソッドは、 &lt;code&gt;PING&lt;/code&gt; が送信された場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="10a00c04715d26ce8bad0ee2c296827e1ae562ee" translate="yes" xml:space="preserve">
          <source>Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent. See the &lt;a href=&quot;#http_event_checkcontinue&quot;&gt;&lt;code&gt;'checkContinue'&lt;/code&gt;&lt;/a&gt; event on &lt;code&gt;Server&lt;/code&gt;.</source>
          <target state="translated">HTTP / 1.1 100継続メッセージをクライアントに送信し、要求の本文を送信する必要があることを示します。 &lt;code&gt;Server&lt;/code&gt; &lt;a href=&quot;#http_event_checkcontinue&quot;&gt; &lt;code&gt;'checkContinue'&lt;/code&gt; &lt;/a&gt;イベントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b79936f43ec7961037569400bb67e6d1dcd0a70d" translate="yes" xml:space="preserve">
          <source>Sends a HTTP/1.1 102 Processing message to the client, indicating that the request body should be sent.</source>
          <target state="translated">HTTP/1.1 102 処理メッセージをクライアントに送信します。</target>
        </trans-unit>
        <trans-unit id="2fb63bb1a0a579990bfe3b52b97d1b75760a1067" translate="yes" xml:space="preserve">
          <source>Sends a JavaScript value to the receiving side of this channel. &lt;code&gt;value&lt;/code&gt; will be transferred in a way which is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="translated">このチャネルの受信側にJavaScript値を送信します。 &lt;code&gt;value&lt;/code&gt; は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML構造化クローンアルゴリズム&lt;/a&gt;と互換性のある方法で転送されます。</target>
        </trans-unit>
        <trans-unit id="e567eb93c66da55380ed1d4b8576ed4f3756f5bf" translate="yes" xml:space="preserve">
          <source>Sends a chunk of the body. By calling this method many times, a request body can be sent to a server &amp;mdash; in that case it is suggested to use the &lt;code&gt;['Transfer-Encoding', 'chunked']&lt;/code&gt; header line when creating the request.</source>
          <target state="translated">ボディのチャンクを送信します。このメソッドを何度も呼び出すことで、リクエストの本文をサーバーに送信できます。その場合、リクエストの作成時に &lt;code&gt;['Transfer-Encoding', 'chunked']&lt;/code&gt; ヘッダー行を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e04dfbef5fa23a627bb45f1a93fedab570866de6" translate="yes" xml:space="preserve">
          <source>Sends a chunk of the body. By calling this method many times, a request body can be sent to a server. In that case, it is suggested to use the &lt;code&gt;['Transfer-Encoding', 'chunked']&lt;/code&gt; header line when creating the request.</source>
          <target state="translated">ボディのチャンクを送信します。このメソッドを何度も呼び出すことで、リクエスト本文をサーバーに送信できます。その場合、リクエストを作成するときに &lt;code&gt;['Transfer-Encoding', 'chunked']&lt;/code&gt; ヘッダー行を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4b41fa3c9265f1f5adf5d37af57c73980f904cf6" translate="yes" xml:space="preserve">
          <source>Sends a regular file as the response. The &lt;code&gt;path&lt;/code&gt; must specify a regular file or an &lt;code&gt;'error'&lt;/code&gt; event will be emitted on the &lt;code&gt;Http2Stream&lt;/code&gt; object.</source>
          <target state="translated">通常のファイルを応答として送信します。 &lt;code&gt;path&lt;/code&gt; 通常のファイルまたは指定しなければなりません &lt;code&gt;'error'&lt;/code&gt; に照射されるイベントを &lt;code&gt;Http2Stream&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="bee3b1a9d3e4dfa4236c728838dce5574bf1f717" translate="yes" xml:space="preserve">
          <source>Sends a response header to the request. The status code is a 3-digit HTTP status code, like &lt;code&gt;404&lt;/code&gt;. The last argument, &lt;code&gt;headers&lt;/code&gt;, are the response headers.</source>
          <target state="translated">要求に応答ヘッダーを送信します。ステータスコードは、 &lt;code&gt;404&lt;/code&gt; のような3桁のHTTPステータスコードです。最後の引数 &lt;code&gt;headers&lt;/code&gt; は、応答ヘッダーです。</target>
        </trans-unit>
        <trans-unit id="bc0b0b8927e1fb4dab1b507fdc2586c9d9b74a1d" translate="yes" xml:space="preserve">
          <source>Sends a response header to the request. The status code is a 3-digit HTTP status code, like &lt;code&gt;404&lt;/code&gt;. The last argument, &lt;code&gt;headers&lt;/code&gt;, are the response headers. Optionally one can give a human-readable &lt;code&gt;statusMessage&lt;/code&gt; as the second argument.</source>
          <target state="translated">要求に応答ヘッダーを送信します。ステータスコードは、 &lt;code&gt;404&lt;/code&gt; のような3桁のHTTPステータスコードです。最後の引数 &lt;code&gt;headers&lt;/code&gt; は、応答ヘッダーです。オプションで、2番目の引数として人間が読める &lt;code&gt;statusMessage&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="dcf7280d6bf3ff6aab3433e8ad6e2df54a72c1be" translate="yes" xml:space="preserve">
          <source>Sends a status &lt;code&gt;100 Continue&lt;/code&gt; to the client, indicating that the request body should be sent. See the &lt;a href=&quot;#http2_event_checkcontinue&quot;&gt;&lt;code&gt;'checkContinue'&lt;/code&gt;&lt;/a&gt; event on &lt;code&gt;Http2Server&lt;/code&gt; and &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">ステータス &lt;code&gt;100 Continue&lt;/code&gt; をクライアントに送信し、リクエストの本文を送信する必要があることを示します。 &lt;code&gt;Http2Server&lt;/code&gt; および &lt;code&gt;Http2SecureServer&lt;/code&gt; の&lt;a href=&quot;#http2_event_checkcontinue&quot;&gt; &lt;code&gt;'checkContinue'&lt;/code&gt; &lt;/a&gt;イベントを参照してください。</target>
        </trans-unit>
        <trans-unit id="740e61e4c80d373a930bd177e8dddde0e48b609e" translate="yes" xml:space="preserve">
          <source>Sends a trailing &lt;code&gt;HEADERS&lt;/code&gt; frame to the connected HTTP/2 peer. This method will cause the &lt;code&gt;Http2Stream&lt;/code&gt; to be immediately closed and must only be called after the &lt;code&gt;'wantTrailers'&lt;/code&gt; event has been emitted. When sending a request or sending a response, the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option must be set in order to keep the &lt;code&gt;Http2Stream&lt;/code&gt; open after the final &lt;code&gt;DATA&lt;/code&gt; frame so that trailers can be sent.</source>
          <target state="translated">接続されたHTTP / 2ピアに後続の &lt;code&gt;HEADERS&lt;/code&gt; フレームを送信します。このメソッドは、 &lt;code&gt;Http2Stream&lt;/code&gt; をすぐに閉じ、 &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが発行された後にのみ呼び出す必要があります。要求を送信するとき、または応答を送信するとき、トレーラーを送信できるように最後の &lt;code&gt;DATA&lt;/code&gt; フレームの後で &lt;code&gt;Http2Stream&lt;/code&gt; を開いたままにするために、 &lt;code&gt;options.waitForTrailers&lt;/code&gt; オプションを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ffca7414daeae77e616fcce7ff5737cc3f03af0e" translate="yes" xml:space="preserve">
          <source>Sends an additional informational &lt;code&gt;HEADERS&lt;/code&gt; frame to the connected HTTP/2 peer.</source>
          <target state="translated">追加の情報 &lt;code&gt;HEADERS&lt;/code&gt; フレームを接続されたHTTP / 2ピアに送信します。</target>
        </trans-unit>
        <trans-unit id="4c72a8318f946bd23c053f11507826d6dbec4170" translate="yes" xml:space="preserve">
          <source>Sends data on the socket. The second parameter specifies the encoding in the case of a string &amp;mdash; it defaults to UTF8 encoding.</source>
          <target state="translated">ソケットでデータを送信します。2番目のパラメーターは、ストリングの場合のエンコードを指定します&amp;mdash;デフォルトはUTF8エンコードです。</target>
        </trans-unit>
        <trans-unit id="b69eb3b662d4ad8a1506c13232af6b6b27dbb134" translate="yes" xml:space="preserve">
          <source>Sends data on the socket. The second parameter specifies the encoding in the case of a string. It defaults to UTF8 encoding.</source>
          <target state="translated">ソケットにデータを送信する。2番目のパラメータは文字列の場合のエンコーディングを指定する。デフォルトはUTF8エンコーディングである。</target>
        </trans-unit>
        <trans-unit id="686ceca20b3ee85a291546bd3b6d6f8a9b53a730" translate="yes" xml:space="preserve">
          <source>Sent to a process to identify user-defined conditions.</source>
          <target state="translated">ユーザーが定義した条件を特定するためのプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="b7c6292315398d0e5f10530b3666c61afc131dc4" translate="yes" xml:space="preserve">
          <source>Sent to a process to indicate a stack fault on a coprocessor.</source>
          <target state="translated">コプロセッサのスタック障害を示すためにプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="b7c8f3c9fd3804c566c680727bedef774ecfcd94" translate="yes" xml:space="preserve">
          <source>Sent to a process to notify of a bad argument.</source>
          <target state="translated">悪口を通知するためのプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="729ddef5f8adce71ae9391bf1a5e4cfd93301f1f" translate="yes" xml:space="preserve">
          <source>Sent to a process to notify of a power failure.</source>
          <target state="translated">停電を通知するためのプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="8cd83c0da9d5c04e794504481676ad3c18088dc7" translate="yes" xml:space="preserve">
          <source>Sent to a process to notify of a segmentation fault.</source>
          <target state="translated">セグメンテーション障害を通知するためにプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="926ef6576ad95a5372177feef9b4060331ef0bc6" translate="yes" xml:space="preserve">
          <source>Sent to a process to notify that it has attempted to perform an illegal, malformed, unknown, or privileged instruction.</source>
          <target state="translated">プロセスに送信され、不正な、不正な、不明な、または特権的な命令を実行しようとしたことを通知します。</target>
        </trans-unit>
        <trans-unit id="de5aa35f45ed2a69e0bc0aaf7f91f540793dbd7b" translate="yes" xml:space="preserve">
          <source>Sent to a process to notify that it has caused a bus error.</source>
          <target state="translated">バスエラーが発生したことを通知するためにプロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="f81125a9818b7edfa19d65b7c2e52c2784383300" translate="yes" xml:space="preserve">
          <source>Sent to a process to notify that it has performed an illegal arithmetic operation.</source>
          <target state="translated">不正な演算を行ったことを通知するためにプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="5cb4b6330c6941a76f1291dd06f361914216f3eb" translate="yes" xml:space="preserve">
          <source>Sent to a process to request it to stop.</source>
          <target state="translated">停止を要求するためにプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="a948bb36f3ff965db6db47947a1d69680b720eae" translate="yes" xml:space="preserve">
          <source>Sent to a process to request termination.</source>
          <target state="translated">終了を要求するプロセスに送られます。</target>
        </trans-unit>
        <trans-unit id="f7615ff1e5453f4e20866e4cf89f605148d7af25" translate="yes" xml:space="preserve">
          <source>Sent to a process to request that it abort.</source>
          <target state="translated">中止するように要求するためにプロセスに送られます。</target>
        </trans-unit>
        <trans-unit id="68ac89e67311b0975fe1ab3f75a100e0c62dde50" translate="yes" xml:space="preserve">
          <source>Sent to a process to terminate it immediately.</source>
          <target state="translated">プロセスに送信してすぐに終了させます。</target>
        </trans-unit>
        <trans-unit id="2745f427f44c065d9167c4509bed6da3783c9ba8" translate="yes" xml:space="preserve">
          <source>Sent to a process when I/O is available.</source>
          <target state="translated">I/Oが利用可能な場合にプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="ba5040b3b8cd4aa7d56c877bb369053f1e466238" translate="yes" xml:space="preserve">
          <source>Sent to a process when a child process terminates.</source>
          <target state="translated">子プロセスが終了するとプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="358454457ae9422a248f8b060028bdfa7b2070ba" translate="yes" xml:space="preserve">
          <source>Sent to a process when a file lock has been lost.</source>
          <target state="translated">ファイルロックが失われた場合にプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="39bd2a21506b111e855712b05147924fc96ed315" translate="yes" xml:space="preserve">
          <source>Sent to a process when a socket has urgent data to read.</source>
          <target state="translated">ソケットに緊急に読み込むべきデータがある場合に、プロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="fca7d34ec5c5bbe554ec1ca41b42ab778046640d" translate="yes" xml:space="preserve">
          <source>Sent to a process when a system timer elapses.</source>
          <target state="translated">システムタイマーが経過するとプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="2383ef1f9923b1320d6d65eb18787c893b9ec134" translate="yes" xml:space="preserve">
          <source>Sent to a process when a system timer has elapsed.</source>
          <target state="translated">システムタイマーが経過したときにプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="b11cda98c215921f9977e91f38493da5fa00d50a" translate="yes" xml:space="preserve">
          <source>Sent to a process when a virtual timer has elapsed.</source>
          <target state="translated">仮想タイマーが経過したときにプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="fdd98bd3ddcdf911c4535b8f5405dbc6d778b04a" translate="yes" xml:space="preserve">
          <source>Sent to a process when an exception has occurred.</source>
          <target state="translated">例外が発生した場合にプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="db7bfbd24f7c65550408079659a4ef27bd363b34" translate="yes" xml:space="preserve">
          <source>Sent to a process when it grows a file larger than the maximum allowed.</source>
          <target state="translated">許可された最大サイズよりも大きいファイルを成長させるとプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="837371891679d76b5302e266d5d18c63d752a862" translate="yes" xml:space="preserve">
          <source>Sent to a process when it has attempted to write to a disconnected pipe.</source>
          <target state="translated">切断されたパイプへの書き込みを試みた場合に、プロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="6d8950b2aac3ab892945e93d641e534e98862368" translate="yes" xml:space="preserve">
          <source>Sent to a process when it has exceeded its limit on CPU usage.</source>
          <target state="translated">CPU使用量の上限を超えた場合にプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="8ccce5ee15ee4cf82c23521a8aae1b0fbe3a81c8" translate="yes" xml:space="preserve">
          <source>Sent to a process when it reads from the TTY while in the background.</source>
          <target state="translated">バックグラウンドでTTYから読み込んだ場合、プロセスに送信される。</target>
        </trans-unit>
        <trans-unit id="f0a8599543a26a7035d5aae3193d890ada5a87fd" translate="yes" xml:space="preserve">
          <source>Sent to a process when it writes to the TTY while in the background.</source>
          <target state="translated">バックグラウンドでTTYに書き込みをするとプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="59a35f520fd595f7d7536f282ae7d1d9f819c6a0" translate="yes" xml:space="preserve">
          <source>Sent to a process when the controlling terminal has changed its size.</source>
          <target state="translated">制御端末のサイズが変更された場合にプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="17e07f39d942dc58a6f428fae3d6c298cf262d6e" translate="yes" xml:space="preserve">
          <source>Sent to indicate when a controlling terminal is closed or a parent process exits.</source>
          <target state="translated">制御端末が閉じたとき、または親プロセスが終了したときに送信されます。</target>
        </trans-unit>
        <trans-unit id="fa4c876888f2d744b3608f2f9d5dc38f24f07236" translate="yes" xml:space="preserve">
          <source>Sent to indicate when a user wishes to interrupt a process (&lt;code&gt;(Ctrl+C)&lt;/code&gt;).</source>
          <target state="translated">ユーザーがプロセスを中断したい場合に送信します（ &lt;code&gt;(Ctrl+C)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e9f9931320ee304acca7fa23a54a5b235c1d4fc0" translate="yes" xml:space="preserve">
          <source>Sent to indicate when a user wishes to interrupt a process.</source>
          <target state="translated">ユーザがプロセスの中断を希望する場合に送信されます。</target>
        </trans-unit>
        <trans-unit id="8c352ce7ad2c3f1b0fd3e3e49a428364108ac1d5" translate="yes" xml:space="preserve">
          <source>Sent to indicate when a user wishes to terminate a process and perform a core dump.</source>
          <target state="translated">ユーザがプロセスの終了とコアダンプの実行を希望する場合に送信されます。</target>
        </trans-unit>
        <trans-unit id="494f16520222d4afad2e578cdd074af31bf3ea22" translate="yes" xml:space="preserve">
          <source>Sent to instruct the operating system to continue a paused process.</source>
          <target state="translated">一時停止中のプロセスを続行するようにオペレーティングシステムに指示するために送信されます。</target>
        </trans-unit>
        <trans-unit id="66afab59466adece79635f0b335aeea13560cf8b" translate="yes" xml:space="preserve">
          <source>Sent to instruct the operating system to halt a process.</source>
          <target state="translated">プロセスを停止するようにオペレーティングシステムに指示するために送信されます。</target>
        </trans-unit>
        <trans-unit id="189c7c7dc733ca3d39f55bf4623a76ec86a66057" translate="yes" xml:space="preserve">
          <source>Serialization API</source>
          <target state="translated">シリアライズAPI</target>
        </trans-unit>
        <trans-unit id="a8b60f572e9b0666b7aa95699f72c514acd6fa2f" translate="yes" xml:space="preserve">
          <source>Serializes a JavaScript value and adds the serialized representation to the internal buffer.</source>
          <target state="translated">JavaScriptの値をシリアライズし、シリアライズされた表現を内部バッファに追加します。</target>
        </trans-unit>
        <trans-unit id="cb0cb170d106f8e8d5af1e05bbdbd3a96a7de197" translate="yes" xml:space="preserve">
          <source>Server</source>
          <target state="translated">Server</target>
        </trans-unit>
        <trans-unit id="b69cba81d0a9b85a3926c92d93c2501aded45b9b" translate="yes" xml:space="preserve">
          <source>Server extracts the OCSP URL from either the &lt;code&gt;certificate&lt;/code&gt; or &lt;code&gt;issuer&lt;/code&gt; and performs an &lt;a href=&quot;https://en.wikipedia.org/wiki/OCSP_stapling&quot;&gt;OCSP request&lt;/a&gt; to the CA.</source>
          <target state="translated">サーバーは、 &lt;code&gt;certificate&lt;/code&gt; または &lt;code&gt;issuer&lt;/code&gt; からOCSP URLを抽出し、CAへの&lt;a href=&quot;https://en.wikipedia.org/wiki/OCSP_stapling&quot;&gt;OCSP要求&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="687272c0596d39a0aa5bb7519fce56d5dfa95e54" translate="yes" xml:space="preserve">
          <source>Server is sending both a &lt;code&gt;Content-Length&lt;/code&gt; header and &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;.</source>
          <target state="translated">サーバーは、 &lt;code&gt;Content-Length&lt;/code&gt; ヘッダーと &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; 両方を送信しています。</target>
        </trans-unit>
        <trans-unit id="78e91258186208c778c8a604c044e8dc84de3307" translate="yes" xml:space="preserve">
          <source>Server receives &lt;code&gt;'OCSPResponse'&lt;/code&gt; from the CA and sends it back to the client via the &lt;code&gt;callback&lt;/code&gt; argument</source>
          <target state="translated">サーバーはCAから &lt;code&gt;'OCSPResponse'&lt;/code&gt; を受信し、 &lt;code&gt;callback&lt;/code&gt; 引数を介してクライアントに送信します</target>
        </trans-unit>
        <trans-unit id="1d3dba90add1299c5912aac1bea12bf1b0d74ba5" translate="yes" xml:space="preserve">
          <source>Server receives the request and emits the &lt;code&gt;'OCSPRequest'&lt;/code&gt; event, calling the listener if registered.</source>
          <target state="translated">サーバーはリクエストを受信し、 &lt;code&gt;'OCSPRequest'&lt;/code&gt; イベントを発行して、登録されている場合はリスナーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="2a5a7e7daa954280532db0a7b50aeb9d69dea060" translate="yes" xml:space="preserve">
          <source>Server-side example</source>
          <target state="translated">サーバー側の例</target>
        </trans-unit>
        <trans-unit id="8597675814fefc7caa914345286b035cd2c2657b" translate="yes" xml:space="preserve">
          <source>ServerHttp2Session</source>
          <target state="translated">ServerHttp2Session</target>
        </trans-unit>
        <trans-unit id="9342a9c95d24d057261ebe4b354f3662d0eb70ea" translate="yes" xml:space="preserve">
          <source>ServerHttp2Stream</source>
          <target state="translated">ServerHttp2Stream</target>
        </trans-unit>
        <trans-unit id="6367d094a3d3810715b30ccbed25103739048953" translate="yes" xml:space="preserve">
          <source>Servers generate a unique ID for new connections and send it to the client. Clients and servers save the session state. When reconnecting, clients send the ID of their saved session state and if the server also has the state for that ID, it can agree to use it. Otherwise, the server will create a new session. See &lt;a href=&quot;https://www.ietf.org/rfc/rfc2246.txt&quot;&gt;RFC 2246&lt;/a&gt; for more information, page 23 and 30.</source>
          <target state="translated">サーバーは、新しい接続用に一意のIDを生成し、それをクライアントに送信します。クライアントとサーバーはセッション状態を保存します。再接続すると、クライアントは保存されたセッション状態のIDを送信し、サーバーがそのIDの状態も持っている場合は、それを使用することに同意できます。それ以外の場合、サーバーは新しいセッションを作成します。詳細については、&lt;a href=&quot;https://www.ietf.org/rfc/rfc2246.txt&quot;&gt;RFC 2246、23&lt;/a&gt;ページおよび30ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="250c91c74c79cb391d243d401d9252159235d4b5" translate="yes" xml:space="preserve">
          <source>Session Resumption</source>
          <target state="translated">セッション再開</target>
        </trans-unit>
        <trans-unit id="5f99ca5b38af198d208d2d89ed3fdb0af9962ed8" translate="yes" xml:space="preserve">
          <source>Session identifiers</source>
          <target state="translated">セッション識別子</target>
        </trans-unit>
        <trans-unit id="a303dc7633df43e6cd72a3032f2f6396ef35cd83" translate="yes" xml:space="preserve">
          <source>Session resumption</source>
          <target state="translated">セッション再開</target>
        </trans-unit>
        <trans-unit id="9b25637854a2e85b8525cca74ebda7c04b30439f" translate="yes" xml:space="preserve">
          <source>Session ticket keys are cryptographic keys, and they &lt;strong&gt;&lt;em&gt;must be stored securely&lt;/em&gt;&lt;/strong&gt;. With TLS 1.2 and below, if they are compromised all sessions that used tickets encrypted with them can be decrypted. They should not be stored on disk, and they should be regenerated regularly.</source>
          <target state="translated">セッションチケットキーは暗号化キーであり、&lt;strong&gt;&lt;em&gt;安全に保管する必要があります&lt;/em&gt;&lt;/strong&gt;。TLS 1.2以前では、セキュリティが侵害された場合、それらで暗号化されたチケットを使用したすべてのセッションを復号化できます。これらはディスクに保存しないでください。また、定期的に再生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="0efe6605672ec265adb9e1ef92607da777f5b71c" translate="yes" xml:space="preserve">
          <source>Session tickets</source>
          <target state="translated">セッションチケット</target>
        </trans-unit>
        <trans-unit id="b24785d8118c974a151582cec434791d8ef728fc" translate="yes" xml:space="preserve">
          <source>Set &lt;a href=&quot;tls#tls_tls_default_max_version&quot;&gt;&lt;code&gt;tls.DEFAULT_MAX_VERSION&lt;/code&gt;&lt;/a&gt; to 'TLSv1.2'. Use to disable support for TLSv1.3.</source>
          <target state="translated">&lt;a href=&quot;tls#tls_tls_default_max_version&quot;&gt; &lt;code&gt;tls.DEFAULT_MAX_VERSION&lt;/code&gt; &lt;/a&gt;を「TLSv1.2」に設定します。TLSv1.3のサポートを無効にするために使用します。</target>
        </trans-unit>
        <trans-unit id="84d0763ed271ed742c9f4c2b889cb1a8bc9462b1" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;initialDelay&lt;/code&gt; (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;initialDelay&lt;/code&gt; will leave the value unchanged from the default (or previous) setting.</source>
          <target state="translated">セット &lt;code&gt;initialDelay&lt;/code&gt; の（ミリ秒単位）受信された最後のデータパケット及び第キープアライブプローブとの間の遅延を設定します。 &lt;code&gt;initialDelay&lt;/code&gt; に &lt;code&gt;0&lt;/code&gt; を設定すると、値はデフォルト（または以前の）設定から変更されません。</target>
        </trans-unit>
        <trans-unit id="9ceae984dc2cb1b303228efb6ff3e97f0400f102" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;process.title&lt;/code&gt; on startup.</source>
          <target state="translated">起動時に &lt;code&gt;process.title&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="cab1100919b8fc76bcb2ca56a2d507ed6e562f08" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;mainExport&lt;/em&gt; to &lt;em&gt;exports&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;mainExport&lt;/em&gt;を&lt;em&gt;exportsに&lt;/em&gt;設定し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a53e83972809d24036906f17429f5d2b97dcfd32" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;mainExport&lt;/em&gt; to &lt;em&gt;exports&lt;/em&gt;[&lt;em&gt;&quot;.&quot;&lt;/em&gt;].</source>
          <target state="translated">&lt;em&gt;mainExport&lt;/em&gt;を&lt;em&gt;exports&lt;/em&gt; [ &lt;em&gt;&quot;。&quot;に&lt;/em&gt;設定し&lt;em&gt;ます &lt;/em&gt;]。</target>
        </trans-unit>
        <trans-unit id="bc64481ebc9507df01338826d71cf3dab2a19b37" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;packageName&lt;/em&gt; to the substring of &lt;em&gt;packageSpecifier&lt;/em&gt; until the first &lt;em&gt;&quot;/&quot;&lt;/em&gt; separator or the end of the string.</source>
          <target state="translated">最初の&lt;em&gt;「/」&lt;/em&gt;区切り文字または文字列の&lt;em&gt;終わり&lt;/em&gt;まで、&lt;em&gt;packageName&lt;/em&gt;を&lt;em&gt;packageSpecifier&lt;/em&gt;のサブ文字列に設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9a6015cf781a6ccff68452d0792a1cf762f68ba3" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;packageName&lt;/em&gt; to the substring of &lt;em&gt;packageSpecifier&lt;/em&gt; until the second &lt;em&gt;&quot;/&quot;&lt;/em&gt; separator or the end of the string.</source>
          <target state="translated">2番目の&lt;em&gt;「/」&lt;/em&gt;区切り文字または文字列の&lt;em&gt;終わり&lt;/em&gt;まで、&lt;em&gt;packageName&lt;/em&gt;を&lt;em&gt;packageSpecifier&lt;/em&gt;のサブ文字列に設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed6955593364662baabe1facbb282fb85ce32f3c" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;packagePath&lt;/em&gt; to &lt;em&gt;&quot;./&quot;&lt;/em&gt; concatenated with &lt;em&gt;packagePath&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;packagePath&lt;/em&gt;を&lt;em&gt;packagePath&lt;/em&gt;と連結した&lt;em&gt;&quot;./&quot;に&lt;/em&gt;設定し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a2380398d3a20deb0429cfb252983f5f6ddde487" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;packageSubpath&lt;/em&gt; to &lt;em&gt;&quot;.&quot;&lt;/em&gt; concatenated with the substring of &lt;em&gt;packageSpecifier&lt;/em&gt; from the position at the length of &lt;em&gt;packageName&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;packageSubpath&lt;/em&gt;を&lt;em&gt;&quot;。&quot;に&lt;/em&gt;設定し&lt;em&gt;ます。&lt;/em&gt;&lt;em&gt;packageName&lt;/em&gt;の長さの位置からの&lt;em&gt;packageSpecifier&lt;/em&gt;のサブストリングと連結されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a16636dd417eb1e54d709170b2cd084858243d53" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;parentURL&lt;/em&gt; to the parent URL path of &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;parentURL&lt;/em&gt;の親URLパスに&lt;em&gt;parentURL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b1bf9201e182976aba7ce76a96a059fb186ed064" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;parentURL&lt;/em&gt; to the parent folder URL of &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;parentURL&lt;/em&gt;の親フォルダのURLに&lt;em&gt;parentURL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8d4ff95ede349f858be44c44b5067570a325adc1" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolved&lt;/em&gt; the result of &lt;strong&gt;PACKAGE_RESOLVE&lt;/strong&gt;(&lt;em&gt;specifier&lt;/em&gt;, &lt;em&gt;parentURL&lt;/em&gt;).</source>
          <target state="translated">セットは、&lt;strong&gt;PACKAGE_RESOLVE&lt;/strong&gt;（&lt;em&gt;指定子&lt;/em&gt;、&lt;em&gt;parentURL&lt;/em&gt;）の結果を&lt;em&gt;解決しまし&lt;/em&gt;た。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eb12ca830b0b3437b1c584eaddbdcdb3571f0d47" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolved&lt;/em&gt; to the URL resolution of &lt;em&gt;specifier&lt;/em&gt; relative to &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;parentURLを&lt;/em&gt;基準にした&lt;em&gt;指定子&lt;/em&gt;のURL解決に&lt;em&gt;解決済み&lt;/em&gt;を設定します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aa94715ffe81e223f1e20885e44e3f4487b2614c" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolved&lt;/em&gt; to the destructured value of the result of &lt;strong&gt;PACKAGE_IMPORTS_RESOLVE&lt;/strong&gt;(&lt;em&gt;specifier&lt;/em&gt;, &lt;em&gt;parentURL&lt;/em&gt;, &lt;em&gt;defaultConditions&lt;/em&gt;).</source>
          <target state="translated">セットには、&lt;em&gt;解決&lt;/em&gt;の結果の破壊さ値に&lt;strong&gt;PACKAGE_IMPORTS_RESOLVE&lt;/strong&gt;（&lt;em&gt;指定&lt;/em&gt;、&lt;em&gt;parentURL&lt;/em&gt;、&lt;em&gt;defaultConditions&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="6321c0351bc3b5b6b6462e4129dd6c4c10108193" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolved&lt;/em&gt; to the real path of &lt;em&gt;resolved&lt;/em&gt;.</source>
          <target state="translated">セットには、&lt;em&gt;解決&lt;/em&gt;の実際のパスに&lt;em&gt;解決します&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="247f4c915d49894bc0a4ac359750e11407268449" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolved&lt;/em&gt; to the result of parsing and reserializing &lt;em&gt;specifier&lt;/em&gt; as a URL.</source>
          <target state="translated">&lt;em&gt;指定子&lt;/em&gt;をURLとして解析および再シリアル化した結果に&lt;em&gt;解決さ&lt;/em&gt;れたセット。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d42c3a4b1b91d2502f6bd58cd233800cee19ab2e" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolvedURL&lt;/em&gt; the result of &lt;strong&gt;PACKAGE_RESOLVE&lt;/strong&gt;(&lt;em&gt;specifier&lt;/em&gt;, &lt;em&gt;parentURL&lt;/em&gt;).</source>
          <target state="translated">セット&lt;em&gt;resolvedURL&lt;/em&gt;の結果&lt;strong&gt;PACKAGE_RESOLVE&lt;/strong&gt;（&lt;em&gt;指定子&lt;/em&gt;、&lt;em&gt;parentURL&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="00295c495cdd3ac979d83262456aef5baac65893" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolvedURL&lt;/em&gt; to the URL resolution of &lt;em&gt;specifier&lt;/em&gt; relative to &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;resolveURL&lt;/em&gt;を、&lt;em&gt;parentURLを&lt;/em&gt;基準とした&lt;em&gt;指定子&lt;/em&gt;のURL &lt;em&gt;解決&lt;/em&gt;に設定します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a236b9bc1db092373f11e5f7d79ec756b31f78d6" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolvedURL&lt;/em&gt; to the real path of &lt;em&gt;resolvedURL&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;resolvedURL&lt;/em&gt;の実際のパスに&lt;em&gt;resolvedURL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9cf9dd33aa70501382a4c24a193bcab16b1bc3f7" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;resolvedURL&lt;/em&gt; to the result of parsing and reserializing &lt;em&gt;specifier&lt;/em&gt; as a URL.</source>
          <target state="translated">セット&lt;em&gt;resolvedURL&lt;/em&gt;解析し再直列化の結果に&lt;em&gt;指定&lt;/em&gt; URLとして。</target>
        </trans-unit>
        <trans-unit id="33cdf406b852c6960000147168f38be41c667861" translate="yes" xml:space="preserve">
          <source>Set &lt;em&gt;scopeURL&lt;/em&gt; to the parent URL of &lt;em&gt;scopeURL&lt;/em&gt;.</source>
          <target state="translated">セット&lt;em&gt;scopeURL&lt;/em&gt;の親URLへ&lt;em&gt;scopeURL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="530ad67d296ce12906ce5e7e7722c5c476cf26a0" translate="yes" xml:space="preserve">
          <source>Set V8's thread pool size which will be used to allocate background jobs.</source>
          <target state="translated">バックグラウンドジョブの割り当てに使用される V8 のスレッドプールのサイズを設定します。</target>
        </trans-unit>
        <trans-unit id="104ace6eda7c7bb140d967fc4c3a6bf141e1b802" translate="yes" xml:space="preserve">
          <source>Set by calling &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt;. Until then, it is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.kill()&lt;/code&gt; または &lt;code&gt;.disconnect()&lt;/code&gt; を呼び出して設定します。それまでは、 &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="58b19f0515d9de3211780dc8444021dd83d1fee4" translate="yes" xml:space="preserve">
          <source>Set default &lt;a href=&quot;tls#tls_tls_default_max_version&quot;&gt;&lt;code&gt;tls.DEFAULT_MAX_VERSION&lt;/code&gt;&lt;/a&gt; to 'TLSv1.3'. Use to enable support for TLSv1.3.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;tls#tls_tls_default_max_version&quot;&gt; &lt;code&gt;tls.DEFAULT_MAX_VERSION&lt;/code&gt; &lt;/a&gt;を「TLSv1.3」に設定します。TLSv1.3のサポートを有効にするために使用します。</target>
        </trans-unit>
        <trans-unit id="b831cdda478fe5deff6a8f20f7b164b2280eb038" translate="yes" xml:space="preserve">
          <source>Set default &lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt;&lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt;&lt;/a&gt; to 'TLSv1'. Use for compatibility with old TLS clients or servers.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt; &lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt; &lt;/a&gt;を「TLSv1」に設定します。古いTLSクライアントまたはサーバーとの互換性のために使用します。</target>
        </trans-unit>
        <trans-unit id="4573b3b42954114f51c4b980ce0fa53e231dc0a1" translate="yes" xml:space="preserve">
          <source>Set default &lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt;&lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt;&lt;/a&gt; to 'TLSv1.1'. Use for compatibility with old TLS clients or servers.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt; &lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt; &lt;/a&gt;を「TLSv1.1」に設定します。古いTLSクライアントまたはサーバーとの互換性のために使用します。</target>
        </trans-unit>
        <trans-unit id="ac23e76cd304e946d232a568fca78d62eddb9bad" translate="yes" xml:space="preserve">
          <source>Set default &lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt;&lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt;&lt;/a&gt; to 'TLSv1.2'. This is the default for 12.x and later, but the option is supported for compatibility with older Node.js versions.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt; &lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt; &lt;/a&gt;を「TLSv1.2」に設定します。これは12.x以降のデフォルトですが、このオプションは、古いNode.jsバージョンとの互換性のためにサポートされています。</target>
        </trans-unit>
        <trans-unit id="cc6d3c85558eabedc48d6d0f6be6630747559555" translate="yes" xml:space="preserve">
          <source>Set default &lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt;&lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt;&lt;/a&gt; to 'TLSv1.3'. Use to disable support for TLSv1.2, which is not as secure as TLSv1.3.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;tls#tls_tls_default_min_version&quot;&gt; &lt;code&gt;tls.DEFAULT_MIN_VERSION&lt;/code&gt; &lt;/a&gt;を「TLSv1.3」に設定します。TLSv1.3ほど安全ではないTLSv1.2のサポートを無効にするために使用します。</target>
        </trans-unit>
        <trans-unit id="ceee201b13a22058663e5885422863e763d177e6" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;host:port&lt;/code&gt; to be used when the inspector is activated. Useful when activating the inspector by sending the &lt;code&gt;SIGUSR1&lt;/code&gt; signal.</source>
          <target state="translated">インスペクターがアクティブ化されたときに使用される &lt;code&gt;host:port&lt;/code&gt; を設定します。 &lt;code&gt;SIGUSR1&lt;/code&gt; シグナルを送信してインスペクターをアクティブにするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d8a8097b77955146f09404f08475b7e98f1a3ed9" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;END_STREAM&lt;/code&gt; flag was set in the request or response HEADERS frame received, indicating that no additional data should be received and the readable side of the &lt;code&gt;Http2Stream&lt;/code&gt; will be closed.</source>
          <target state="translated">受信した要求または応答のHEADERSフレームで &lt;code&gt;END_STREAM&lt;/code&gt; フラグが設定されている場合は &lt;code&gt;true&lt;/code&gt; を設定します。これは、追加のデータを受信する必要がなく、 &lt;code&gt;Http2Stream&lt;/code&gt; の読み取り可能な側が閉じられることを示します。</target>
        </trans-unit>
        <trans-unit id="62bb11a008dd7993045c3efb4ebf726154568750" translate="yes" xml:space="preserve">
          <source>Set the directory to which all diagnostic output files are written. Defaults to current working directory.</source>
          <target state="translated">すべての診断出力ファイルを書き込むディレクトリを設定します。デフォルトは現在の作業ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="3318b1d5492c227517d0449ccd3cb4ebd292ee0f" translate="yes" xml:space="preserve">
          <source>Set the encoding for the socket as a &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;Readable Stream&lt;/a&gt;. See &lt;a href=&quot;stream#stream_readable_setencoding_encoding&quot;&gt;&lt;code&gt;readable.setEncoding()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">ソケットのエンコーディングを&lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;読み取り可能なストリーム&lt;/a&gt;として設定します。詳細については、&lt;a href=&quot;stream#stream_readable_setencoding_encoding&quot;&gt; &lt;code&gt;readable.setEncoding()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ade382989cd1fbd8b9561c4965242ebf0a6522e6" translate="yes" xml:space="preserve">
          <source>Set the number of pending pipe instance handles when the pipe server is waiting for connections. This setting applies to Windows only.</source>
          <target state="translated">パイプサーバーが接続待ちをしているときのパイプインスタンスの保留数を設定します。この設定は Windows のみに適用されます。</target>
        </trans-unit>
        <trans-unit id="7196161d9cd96c165479f276b9a35f01b938fc5b" translate="yes" xml:space="preserve">
          <source>Set the number of threads used in libuv's threadpool to &lt;code&gt;size&lt;/code&gt; threads.</source>
          <target state="translated">libuvのスレッドプールで使用されるスレッドの数をスレッドの &lt;code&gt;size&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="750585350067444da33fc302b355df5ef44f619e" translate="yes" xml:space="preserve">
          <source>Set this property to reject connections when the server's connection count gets high.</source>
          <target state="translated">このプロパティを設定すると、サーバーの接続数が多い場合に接続を拒否します。</target>
        </trans-unit>
        <trans-unit id="a36891032daecd6acdc4a3ac9ddd688fc5065b21" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Stream&lt;/code&gt; instance has been closed.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが閉じている場合は &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="12f1122fbbb31300e8edcdfb80780287546cbee9" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Stream&lt;/code&gt; instance has been destroyed and is no longer usable.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが破棄されて使用できなくなった場合は、 &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="0758f0c4d0bd2e5fb34a56ba33ca8ed0609b9e5c" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Stream&lt;/code&gt; instance has not yet been assigned a numeric stream identifier.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; インスタンスにまだ数値ストリーム識別子が割り当てられていない場合は、 &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="dfa0bfbc9c43e6df8e1554d48b215c04eef0a928" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Stream&lt;/code&gt; instance was aborted abnormally. When set, the &lt;code&gt;'aborted'&lt;/code&gt; event will have been emitted.</source>
          <target state="translated">設定し &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが異常に中止されました。設定すると、 &lt;code&gt;'aborted'&lt;/code&gt; イベントが発行されます。</target>
        </trans-unit>
        <trans-unit id="1a12164d10e7926ba19c69924a04f73a4585d15e" translate="yes" xml:space="preserve">
          <source>Set to the &lt;code&gt;RST_STREAM&lt;/code&gt;&lt;a href=&quot;#error_codes&quot;&gt;error code&lt;/a&gt; reported when the &lt;code&gt;Http2Stream&lt;/code&gt; is destroyed after either receiving an &lt;code&gt;RST_STREAM&lt;/code&gt; frame from the connected peer, calling &lt;code&gt;http2stream.close()&lt;/code&gt;, or &lt;code&gt;http2stream.destroy()&lt;/code&gt;. Will be &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Stream&lt;/code&gt; has not been closed.</source>
          <target state="translated">接続されたピアから &lt;code&gt;RST_STREAM&lt;/code&gt; フレームを受信するか、 &lt;code&gt;http2stream.close()&lt;/code&gt; 、または &lt;code&gt;http2stream.destroy()&lt;/code&gt; を呼び出した後に &lt;code&gt;Http2Stream&lt;/code&gt; が破棄されたときに報告される &lt;code&gt;RST_STREAM&lt;/code&gt; &lt;a href=&quot;#error_codes&quot;&gt;エラーコードに&lt;/a&gt;設定します。 &lt;code&gt;Http2Stream&lt;/code&gt; が閉じられていない場合、 &lt;code&gt;undefined&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="ef8a73521080aa0ec237ded470f8e0289adb9cca" translate="yes" xml:space="preserve">
          <source>Set to the &lt;code&gt;RST_STREAM&lt;/code&gt;&lt;a href=&quot;#http2_error_codes_for_rst_stream_and_goaway&quot;&gt;error code&lt;/a&gt; reported when the &lt;code&gt;Http2Stream&lt;/code&gt; is destroyed after either receiving an &lt;code&gt;RST_STREAM&lt;/code&gt; frame from the connected peer, calling &lt;code&gt;http2stream.close()&lt;/code&gt;, or &lt;code&gt;http2stream.destroy()&lt;/code&gt;. Will be &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Stream&lt;/code&gt; has not been closed.</source>
          <target state="translated">接続されたピアから &lt;code&gt;RST_STREAM&lt;/code&gt; フレームを受信し、 &lt;code&gt;http2stream.close()&lt;/code&gt; または &lt;code&gt;http2stream.destroy()&lt;/code&gt; を呼び出した後、 &lt;code&gt;Http2Stream&lt;/code&gt; が破棄されたときに報告される &lt;code&gt;RST_STREAM&lt;/code&gt; &lt;a href=&quot;#http2_error_codes_for_rst_stream_and_goaway&quot;&gt;エラーコードに&lt;/a&gt;設定します。 &lt;code&gt;Http2Stream&lt;/code&gt; が閉じられていない場合、 &lt;code&gt;undefined&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="027197708b1fca4fc57291b9daf927bb61f1f93c" translate="yes" xml:space="preserve">
          <source>Sets a single header value for headers object. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name. Non-string values will be stored without modification. Therefore, &lt;a href=&quot;#http_request_getheader_name&quot;&gt;&lt;code&gt;request.getHeader()&lt;/code&gt;&lt;/a&gt; may return non-string values. However, the non-string values will be converted to strings for network transmission.</source>
          <target state="translated">headersオブジェクトの単一のヘッダー値を設定します。このヘッダーが送信されるヘッダーにすでに存在する場合、その値は置き換えられます。ここで文字列の配列を使用して、同じ名前の複数のヘッダーを送信します。文字列以外の値は変更せずに保存されます。したがって、&lt;a href=&quot;#http_request_getheader_name&quot;&gt; &lt;code&gt;request.getHeader()&lt;/code&gt; &lt;/a&gt;は文字列以外の値を返す場合があります。ただし、文字列以外の値はネットワーク送信用の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="c54510ab43fdb65411751b64a8186ae7ccaf5161" translate="yes" xml:space="preserve">
          <source>Sets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name.</source>
          <target state="translated">暗黙のヘッダに単一のヘッダ値を設定します。このヘッダが既に送信先のヘッダに存在する場合は、その値が置き換えられます。同じ名前の複数のヘッダを送信するには、ここで文字列の配列を使用します。</target>
        </trans-unit>
        <trans-unit id="3ae441aab70bafeff1da7e2bfab3d6484462702d" translate="yes" xml:space="preserve">
          <source>Sets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here to send multiple headers with the same name. Non-string values will be stored without modification. Therefore, &lt;a href=&quot;#http_response_getheader_name&quot;&gt;&lt;code&gt;response.getHeader()&lt;/code&gt;&lt;/a&gt; may return non-string values. However, the non-string values will be converted to strings for network transmission.</source>
          <target state="translated">暗黙的なヘッダーに単一のヘッダー値を設定します。このヘッダーが送信されるヘッダーにすでに存在する場合、その値は置き換えられます。ここで文字列の配列を使用して、同じ名前の複数のヘッダーを送信します。文字列以外の値は変更せずに保存されます。したがって、&lt;a href=&quot;#http_response_getheader_name&quot;&gt; &lt;code&gt;response.getHeader()&lt;/code&gt; &lt;/a&gt;は文字列以外の値を返す場合があります。ただし、文字列以外の値はネットワーク送信用の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="976fde47f73fd1017d70232e0011b392d7b09f98" translate="yes" xml:space="preserve">
          <source>Sets or clears the &lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt; socket option. When set to &lt;code&gt;true&lt;/code&gt;, multicast packets will also be received on the local interface.</source>
          <target state="translated">&lt;code&gt;IP_MULTICAST_LOOP&lt;/code&gt; ソケットオプションを設定またはクリアします。 &lt;code&gt;true&lt;/code&gt; に設定すると、マルチキャストパケットもローカルインターフェイスで受信されます。</target>
        </trans-unit>
        <trans-unit id="0ea66db56de4dc8c2bff3a527cd35bfbdccf4131" translate="yes" xml:space="preserve">
          <source>Sets or clears the &lt;code&gt;SO_BROADCAST&lt;/code&gt; socket option. When set to &lt;code&gt;true&lt;/code&gt;, UDP packets may be sent to a local interface's broadcast address.</source>
          <target state="translated">&lt;code&gt;SO_BROADCAST&lt;/code&gt; ソケットオプションを設定またはクリアします。 &lt;code&gt;true&lt;/code&gt; に設定すると、UDPパケットがローカルインターフェースのブロードキャストアドレスに送信されます。</target>
        </trans-unit>
        <trans-unit id="8df3fc48b3164b8509245cf30c1caa34513b3cf4" translate="yes" xml:space="preserve">
          <source>Sets or resets the signal for report generation (not supported on Windows). Default signal is &lt;code&gt;SIGUSR2&lt;/code&gt;.</source>
          <target state="translated">レポート生成の信号を設定またはリセットします（Windowsではサポートされていません）。デフォルトのシグナルは &lt;code&gt;SIGUSR2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e54fefa67dbce31640ea48daef2ae8f599fabb76" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt;'s timeout value to &lt;code&gt;msecs&lt;/code&gt;. If a callback is provided, then it is added as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event on the response object.</source>
          <target state="translated">設定&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;のタイムアウト値は &lt;code&gt;msecs&lt;/code&gt; 。コールバックが提供されている場合は、応答オブジェクトの &lt;code&gt;'timeout'&lt;/code&gt; イベントのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="b33f9afc8f2ba80bf80196d39f9c714122164c1d" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt;'s timeout value to &lt;code&gt;msecs&lt;/code&gt;. If a callback is provided, then it is added as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event on the response object.</source>
          <target state="translated">設定&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;のタイムアウト値は &lt;code&gt;msecs&lt;/code&gt; 。コールバックが提供されている場合、それは応答オブジェクトの &lt;code&gt;'timeout'&lt;/code&gt; イベントのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="8d6aae0532bb9365d0d2d0f1acecd5f0871f7183" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt; socket option. While TTL generally stands for &quot;Time to Live&quot;, in this context it specifies the number of IP hops that a packet is allowed to travel through, specifically for multicast traffic. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.</source>
          <target state="translated">&lt;code&gt;IP_MULTICAST_TTL&lt;/code&gt; ソケットオプションを設定します。TTLは通常「生存時間」を表しますが、このコンテキストでは、特にマルチキャストトラフィックの場合に、パケットが通過できるIPホップの数を指定します。パケットを転送する各ルーターまたはゲートウェイは、TTLを減らします。TTLがルーターによって0に減らされた場合、転送されません。</target>
        </trans-unit>
        <trans-unit id="a022c75b0d49734597da0deee4aefe182c151af7" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;IP_TTL&lt;/code&gt; socket option. While TTL generally stands for &quot;Time to Live&quot;, in this context it specifies the number of IP hops that a packet is allowed to travel through. Each router or gateway that forwards a packet decrements the TTL. If the TTL is decremented to 0 by a router, it will not be forwarded. Changing TTL values is typically done for network probes or when multicasting.</source>
          <target state="translated">&lt;code&gt;IP_TTL&lt;/code&gt; ソケットオプションを設定します。TTLは一般に「存続可能時間」を表しますが、このコンテキストでは、パケットが通過できるIPホップの数を指定します。パケットを転送する各ルーターまたはゲートウェイは、TTLを減らします。TTLがルーターによって0に減らされた場合、転送されません。TTL値の変更は、通常、ネットワークプローブまたはマルチキャスト時に行われます。</target>
        </trans-unit>
        <trans-unit id="436892df9a5e61bb31c5e2f1122a71fb3c99b379" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;SO_RCVBUF&lt;/code&gt; socket option. Sets the maximum socket receive buffer in bytes.</source>
          <target state="translated">&lt;code&gt;SO_RCVBUF&lt;/code&gt; ソケットオプションを設定します。最大ソケット受信バッファーをバイト単位で設定します。</target>
        </trans-unit>
        <trans-unit id="0746c1f2d3a594ea286205ab0eea2067ab502ca5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;SO_SNDBUF&lt;/code&gt; socket option. Sets the maximum socket send buffer in bytes.</source>
          <target state="translated">&lt;code&gt;SO_SNDBUF&lt;/code&gt; ソケットオプションを設定します。最大ソケット送信バッファーをバイト単位で設定します。</target>
        </trans-unit>
        <trans-unit id="d437e8173a5baed9af151848e11b44f3ce496318" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;defaultPrevented&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;cancelable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cancelable&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、 &lt;code&gt;defaultPrevented&lt;/code&gt; プロパティを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="db2c1d8e3acdb7dabd8dc917af1f0cb0945210f5" translate="yes" xml:space="preserve">
          <source>Sets the Diffie-Hellman private key. If the &lt;code&gt;encoding&lt;/code&gt; argument is provided, &lt;code&gt;privateKey&lt;/code&gt; is expected to be a string. If no &lt;code&gt;encoding&lt;/code&gt; is provided, &lt;code&gt;privateKey&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">Diffie-Hellman秘密鍵を設定します。場合は &lt;code&gt;encoding&lt;/code&gt; 引数が提供され、 &lt;code&gt;privateKey&lt;/code&gt; 文字列であることが予想されます。 &lt;code&gt;encoding&lt;/code&gt; が指定されていない場合、 &lt;code&gt;privateKey&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; であると想定されます。</target>
        </trans-unit>
        <trans-unit id="6f581886c8fa5402a68d98bf7fffe85ca602d40b" translate="yes" xml:space="preserve">
          <source>Sets the Diffie-Hellman public key. If the &lt;code&gt;encoding&lt;/code&gt; argument is provided, &lt;code&gt;publicKey&lt;/code&gt; is expected to be a string. If no &lt;code&gt;encoding&lt;/code&gt; is provided, &lt;code&gt;publicKey&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">Diffie-Hellman公開鍵を設定します。場合は &lt;code&gt;encoding&lt;/code&gt; 引数が提供され、 &lt;code&gt;publicKey&lt;/code&gt; 文字列であることが予想されます。 &lt;code&gt;encoding&lt;/code&gt; が提供されていない場合、 &lt;code&gt;publicKey&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; であると想定されます。</target>
        </trans-unit>
        <trans-unit id="bc5dcaf2bef626c8f1f9af17b643b0cb916cbd7b" translate="yes" xml:space="preserve">
          <source>Sets the EC Diffie-Hellman private key. If &lt;code&gt;encoding&lt;/code&gt; is provided, &lt;code&gt;privateKey&lt;/code&gt; is expected to be a string; otherwise &lt;code&gt;privateKey&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">EC Diffie-Hellman秘密鍵を設定します。 &lt;code&gt;encoding&lt;/code&gt; が指定されている場合、 &lt;code&gt;privateKey&lt;/code&gt; は文字列であると想定されます。それ以外の場合、 &lt;code&gt;privateKey&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; であると想定されます。</target>
        </trans-unit>
        <trans-unit id="d0329a7b85771b2b2eaff86774c5561de567abad" translate="yes" xml:space="preserve">
          <source>Sets the EC Diffie-Hellman public key. If &lt;code&gt;encoding&lt;/code&gt; is provided &lt;code&gt;publicKey&lt;/code&gt; is expected to be a string; otherwise a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt; is expected.</source>
          <target state="translated">EC Diffie-Hellman公開鍵を設定します。場合 &lt;code&gt;encoding&lt;/code&gt; 提供される &lt;code&gt;publicKey&lt;/code&gt; 文字列であると予想されます。それ以外の場合は、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="cb2e89161f787cd40f64b6dd4927cddb5f4cf7bf" translate="yes" xml:space="preserve">
          <source>Sets the IP address and port of servers to be used when performing DNS resolution. The &lt;code&gt;servers&lt;/code&gt; argument is an array of &lt;a href=&quot;https://tools.ietf.org/html/rfc5952#section-6&quot;&gt;RFC 5952&lt;/a&gt; formatted addresses. If the port is the IANA default DNS port (53) it can be omitted.</source>
          <target state="translated">DNS解決を実行するときに使用するサーバーのIPアドレスとポートを設定します。 &lt;code&gt;servers&lt;/code&gt; 引数が配列である&lt;a href=&quot;https://tools.ietf.org/html/rfc5952#section-6&quot;&gt;RFC 5952&lt;/a&gt;フォーマットされたアドレス。ポートがIANAのデフォルトのDNSポート（53）の場合、省略できます。</target>
        </trans-unit>
        <trans-unit id="47c33526afc2462f88150fc1970249eab00a7dfd" translate="yes" xml:space="preserve">
          <source>Sets the Socket's timeout value to &lt;code&gt;msecs&lt;/code&gt;. If a callback is provided, then it is added as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event on the response object.</source>
          <target state="translated">ソケットのタイムアウト値を &lt;code&gt;msecs&lt;/code&gt; に設定します。コールバックが提供される場合、それは応答オブジェクトの &lt;code&gt;'timeout'&lt;/code&gt; イベントのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="c812e62a34b196bc16e5d8f0d9d71ac5d4e100b4" translate="yes" xml:space="preserve">
          <source>Sets the default outgoing multicast interface of the socket to a chosen interface or back to system interface selection. The &lt;code&gt;multicastInterface&lt;/code&gt; must be a valid string representation of an IP from the socket's family.</source>
          <target state="translated">ソケットのデフォルトの発信マルチキャストインターフェイスを選択したインターフェイスに設定するか、システムインターフェイスの選択に戻します。 &lt;code&gt;multicastInterface&lt;/code&gt; は、ソケットの家族からのIPの有効なストリング表記でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3754a44f3f502a779296e6d657e332f6a476edd9" translate="yes" xml:space="preserve">
          <source>Sets the max memory size of V8's old memory section. As memory consumption approaches the limit, V8 will spend more time on garbage collection in an effort to free unused memory.</source>
          <target state="translated">V8 の古いメモリセクションの最大メモリサイズを設定します。メモリ消費量が限界に近づくと、V8 は未使用のメモリを解放するためにガベージコレクションに多くの時間を費やします。</target>
        </trans-unit>
        <trans-unit id="1b50e76f74ffc8ca21758941561d2f9e2579bbf1" translate="yes" xml:space="preserve">
          <source>Sets the resolution algorithm for resolving ES module specifiers. Valid options are &lt;code&gt;explicit&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">ESモジュール指定子を解決するための解決アルゴリズムを設定します。有効なオプションは &lt;code&gt;explicit&lt;/code&gt; および &lt;code&gt;node&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a38063f49c5182af618349431253833349b0aa8e" translate="yes" xml:space="preserve">
          <source>Sets the salt length for &lt;code&gt;RSA_PKCS1_PSS_PADDING&lt;/code&gt; to the digest size when signing or verifying.</source>
          <target state="translated">署名または検証時に、 &lt;code&gt;RSA_PKCS1_PSS_PADDING&lt;/code&gt; のソルト長をダイジェストサイズに設定します。</target>
        </trans-unit>
        <trans-unit id="760ac10505e99c6106af8f91d38ba1a94e87f6b0" translate="yes" xml:space="preserve">
          <source>Sets the salt length for &lt;code&gt;RSA_PKCS1_PSS_PADDING&lt;/code&gt; to the maximum permissible value when signing data.</source>
          <target state="translated">データに署名するときに、 &lt;code&gt;RSA_PKCS1_PSS_PADDING&lt;/code&gt; のソルト長を最大許容値に設定します。</target>
        </trans-unit>
        <trans-unit id="c595047b44964a852e09054d88cddb9fe0b61f4c" translate="yes" xml:space="preserve">
          <source>Sets the session ticket keys.</source>
          <target state="translated">セッションチケットのキーを設定します。</target>
        </trans-unit>
        <trans-unit id="3a544d0544f7c22fa2a82aa9bd280897d9993318" translate="yes" xml:space="preserve">
          <source>Sets the socket to timeout after &lt;code&gt;timeout&lt;/code&gt; milliseconds of inactivity on the socket. By default &lt;code&gt;net.Socket&lt;/code&gt; do not have a timeout.</source>
          <target state="translated">ソケットの非アクティブ状態が &lt;code&gt;timeout&lt;/code&gt; ミリ秒後にタイムアウトするようにソケットを設定します。デフォルトでは、 &lt;code&gt;net.Socket&lt;/code&gt; にはタイムアウトがありません。</target>
        </trans-unit>
        <trans-unit id="be502f48ec5c589d17f31dc7a695463113db6498" translate="yes" xml:space="preserve">
          <source>Sets the timeout value for sockets, and emits a &lt;code&gt;'timeout'&lt;/code&gt; event on the Server object, passing the socket as an argument, if a timeout occurs.</source>
          <target state="translated">ソケットのタイムアウト値を設定し、タイムアウトが発生した場合は、サーバーオブジェクトに &lt;code&gt;'timeout'&lt;/code&gt; イベントを発行し、ソケットを引数として渡します。</target>
        </trans-unit>
        <trans-unit id="d031e20b34ef6fb7d57622b62200ffc3d05a930c" translate="yes" xml:space="preserve">
          <source>Sets the timeout value in milliseconds for receiving the entire request from the client.</source>
          <target state="translated">クライアントからのリクエスト全体を受信するためのタイムアウト値をミリ秒単位で設定します。</target>
        </trans-unit>
        <trans-unit id="ff03eda051f404b176de07ca1b32c4b13acd5d7d" translate="yes" xml:space="preserve">
          <source>Sets the timer's start time to the current time, and reschedules the timer to call its callback at the previously specified duration adjusted to the current time. This is useful for refreshing a timer without allocating a new JavaScript object.</source>
          <target state="translated">タイマーの開始時刻を現在の時刻に設定し、現在の時刻に合わせて以前に指定した時間でコールバックを呼び出すようにタイマーを再スケジュールします。これは、新しい JavaScript オブジェクトを割り当てずにタイマーをリフレッシュするのに便利です。</target>
        </trans-unit>
        <trans-unit id="d45b2ddc1235199a7103283701cc33d9e292a3d9" translate="yes" xml:space="preserve">
          <source>Sets the value in the &lt;code&gt;URLSearchParams&lt;/code&gt; object associated with &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. If there are any pre-existing name-value pairs whose names are &lt;code&gt;name&lt;/code&gt;, set the first such pair's value to &lt;code&gt;value&lt;/code&gt; and remove all others. If not, append the name-value pair to the query string.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; に関連付けられた &lt;code&gt;URLSearchParams&lt;/code&gt; オブジェクトの値をvalueに設定し &lt;code&gt;value&lt;/code&gt; 。名前が &lt;code&gt;name&lt;/code&gt; である既存の名前と値のペアがある場合は、そのようなペアの最初の値を &lt;code&gt;value&lt;/code&gt; に設定し、他のすべてのペアを削除します。そうでない場合は、名前と値のペアをクエリ文字列に追加します。</target>
        </trans-unit>
        <trans-unit id="6f2d02840839e783e61903bb787f89fe8b73d607" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;EventEmitter.captureRejections = true&lt;/code&gt; will change the default for all new instances of &lt;code&gt;EventEmitter&lt;/code&gt;.</source>
          <target state="translated">設定 &lt;code&gt;EventEmitter.captureRejections = true&lt;/code&gt; 、すべての新しいインスタンスのデフォルト変わる &lt;code&gt;EventEmitter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0347ff55c556419471cbda31eb9bfdff26b986ca" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;recursive&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; results in behavior similar to the Unix command &lt;code&gt;rm -rf&lt;/code&gt;: an error will not be raised for paths that do not exist, and paths that represent files will be deleted. The permissive behavior of the &lt;code&gt;recursive&lt;/code&gt; option is deprecated, &lt;code&gt;ENOTDIR&lt;/code&gt; and &lt;code&gt;ENOENT&lt;/code&gt; will be thrown in the future.</source>
          <target state="translated">&lt;code&gt;recursive&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、Unixコマンド &lt;code&gt;rm -rf&lt;/code&gt; と同様の動作になります。存在しないパスに対してエラーは発生せず、ファイルを表すパスは削除されます。 &lt;code&gt;recursive&lt;/code&gt; オプションの許容動作は非推奨になり、 &lt;code&gt;ENOTDIR&lt;/code&gt; と &lt;code&gt;ENOENT&lt;/code&gt; は将来スローされます。</target>
        </trans-unit>
        <trans-unit id="856c9009663f7618132c5b4cc5913826d76f95b5" translate="yes" xml:space="preserve">
          <source>Setting an integrity to &lt;code&gt;null&lt;/code&gt; on a scope will set the integrity for any resource not found in the manifest to fail matching.</source>
          <target state="translated">スコープで整合性を &lt;code&gt;null&lt;/code&gt; に設定すると、マニフェストに見つからないリソースの整合性が失敗するように設定されます。</target>
        </trans-unit>
        <trans-unit id="f96692eb92cd8bdaaad064d709c86d6dadc227dd" translate="yes" xml:space="preserve">
          <source>Setting an integrity to &lt;code&gt;true&lt;/code&gt; on a scope will set the integrity for any resource not found in the manifest to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">スコープで整合性を &lt;code&gt;true&lt;/code&gt; に設定すると、マニフェストに見つからないリソースの整合性がtrueに設定され &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="463c8c84a01a91233411ef7bae5f57412040bcc6" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;timeout&lt;/code&gt; option or using the &lt;code&gt;setTimeout()&lt;/code&gt; function will not abort the request or do anything besides add a &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; オプションを設定したり、 &lt;code&gt;setTimeout()&lt;/code&gt; 関数を使用したりしても、リクエストが中止されたり、 &lt;code&gt;'timeout'&lt;/code&gt; イベントが追加される以外は何も行われません。</target>
        </trans-unit>
        <trans-unit id="7688d31717dce19bbd96886fa96d12f7a30ef9aa" translate="yes" xml:space="preserve">
          <source>Setting the TLS ServerName to an IP address is not permitted by &lt;a href=&quot;https://tools.ietf.org/html/rfc6066#section-3&quot;&gt;RFC 6066&lt;/a&gt;. This will be ignored in a future version.</source>
          <target state="translated">TLS ServerNameをIPアドレスに設定することは、&lt;a href=&quot;https://tools.ietf.org/html/rfc6066#section-3&quot;&gt;RFC 6066&lt;/a&gt;では許可されていません。これは将来のバージョンでは無視される予定です。</target>
        </trans-unit>
        <trans-unit id="e4e9c4421659194dfbbc956c46004e1e2a2ff0df" translate="yes" xml:space="preserve">
          <source>Setting the value of this property to a new value is equivalent to creating a new &lt;code&gt;URL&lt;/code&gt; object using &lt;a href=&quot;#url_constructor_new_url_input_base&quot;&gt;&lt;code&gt;new URL(value)&lt;/code&gt;&lt;/a&gt;. Each of the &lt;code&gt;URL&lt;/code&gt; object's properties will be modified.</source>
          <target state="translated">このプロパティの値を新しい値に設定することは、&lt;a href=&quot;#url_constructor_new_url_input_base&quot;&gt; &lt;code&gt;new URL(value)&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;URL&lt;/code&gt; オブジェクトを作成することと同じです。 &lt;code&gt;URL&lt;/code&gt; オブジェクトの各プロパティが変更されます。</target>
        </trans-unit>
        <trans-unit id="dcbd6ad9018e4553d5999faae872eeb347e0421d" translate="yes" xml:space="preserve">
          <source>Setting the value of this property to a new value is equivalent to creating a new &lt;code&gt;URL&lt;/code&gt; object using &lt;a href=&quot;#url_new_url_input_base&quot;&gt;&lt;code&gt;new URL(value)&lt;/code&gt;&lt;/a&gt;. Each of the &lt;code&gt;URL&lt;/code&gt; object's properties will be modified.</source>
          <target state="translated">このプロパティの値を新しい値に設定することは、&lt;a href=&quot;#url_new_url_input_base&quot;&gt; &lt;code&gt;new URL(value)&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;URL&lt;/code&gt; オブジェクトを作成することと同じです。 &lt;code&gt;URL&lt;/code&gt; オブジェクトの各プロパティが変更されます。</target>
        </trans-unit>
        <trans-unit id="b326e69e36c40244712848515d81c5aafe93e641" translate="yes" xml:space="preserve">
          <source>Setting the weight of a push stream is not allowed in the &lt;code&gt;HEADERS&lt;/code&gt; frame. Pass a &lt;code&gt;weight&lt;/code&gt; value to &lt;code&gt;http2stream.priority&lt;/code&gt; with the &lt;code&gt;silent&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt; to enable server-side bandwidth balancing between concurrent streams.</source>
          <target state="translated">&lt;code&gt;HEADERS&lt;/code&gt; フレームでは、プッシュストリームの重みの設定は許可されていません。合格 &lt;code&gt;weight&lt;/code&gt; に値を &lt;code&gt;http2stream.priority&lt;/code&gt; で &lt;code&gt;silent&lt;/code&gt; にオプションが設定され &lt;code&gt;true&lt;/code&gt; の同時ストリームの間に、サーバー側の帯域幅のバランスを可能にします。</target>
        </trans-unit>
        <trans-unit id="7a53c3bbb38398e566349c9765654bfc7c071e9a" translate="yes" xml:space="preserve">
          <source>Settings Object</source>
          <target state="translated">設定オブジェクト</target>
        </trans-unit>
        <trans-unit id="d74c2c00d90f30736ba6359bfb401380ae665f98" translate="yes" xml:space="preserve">
          <source>Settings Timeout</source>
          <target state="translated">設定タイムアウト</target>
        </trans-unit>
        <trans-unit id="235b7897fcc2fb2e25ef2a1d245725a292353f5b" translate="yes" xml:space="preserve">
          <source>Settings object</source>
          <target state="translated">設定オブジェクト</target>
        </trans-unit>
        <trans-unit id="545407393f5ef87e1ccb7406e98e59ae05ee35ec" translate="yes" xml:space="preserve">
          <source>Shell Requirements</source>
          <target state="translated">シェルの要件</target>
        </trans-unit>
        <trans-unit id="1134fe3e5082ba78952d624f3d99b06e5df09fc2" translate="yes" xml:space="preserve">
          <source>Shell requirements</source>
          <target state="translated">シェルの要件</target>
        </trans-unit>
        <trans-unit id="6f562ac0adc8709be1c2b9ea58cdb7db190bccad" translate="yes" xml:space="preserve">
          <source>Shorthand method</source>
          <target state="translated">速記法</target>
        </trans-unit>
        <trans-unit id="8b3d8d665a765918b70a3f5f0378d51df00b92dd" translate="yes" xml:space="preserve">
          <source>Sign</source>
          <target state="translated">Sign</target>
        </trans-unit>
        <trans-unit id="c5c58f592e12a0198c300401f08add1bb72476b4" translate="yes" xml:space="preserve">
          <source>Signal Constants</source>
          <target state="translated">信号定数</target>
        </trans-unit>
        <trans-unit id="e254abb796ec7b77498c78ad0cb9349209f807b7" translate="yes" xml:space="preserve">
          <source>Signal Events</source>
          <target state="translated">信号イベント</target>
        </trans-unit>
        <trans-unit id="2f0dbb1873d79f580b3862851fe4436f96991592" translate="yes" xml:space="preserve">
          <source>Signal based report generation is not supported in Windows.</source>
          <target state="translated">シグナルベースのレポート生成は、Windowsではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="0fc76945fd2d5737ea25f7031939bac79eb8ee42" translate="yes" xml:space="preserve">
          <source>Signal constants</source>
          <target state="translated">信号定数</target>
        </trans-unit>
        <trans-unit id="2b2682331333df252234e8fbc9a37e6a2baeb78c" translate="yes" xml:space="preserve">
          <source>Signal events</source>
          <target state="translated">信号イベント</target>
        </trans-unit>
        <trans-unit id="b05421d084b57772b6fb1ec1715a0bf951c471e6" translate="yes" xml:space="preserve">
          <source>Signal events will be emitted when the Node.js process receives a signal. Please refer to &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;&lt;code&gt;signal(7)&lt;/code&gt;&lt;/a&gt; for a listing of standard POSIX signal names such as &lt;code&gt;'SIGINT'&lt;/code&gt;, &lt;code&gt;'SIGHUP'&lt;/code&gt;, etc.</source>
          <target state="translated">Node.jsプロセスがシグナルを受信すると、シグナルイベントが発生します。 &lt;code&gt;'SIGINT'&lt;/code&gt; 、 &lt;code&gt;'SIGHUP'&lt;/code&gt; などの標準的なPOSIXシグナル名のリストについては、&lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt; &lt;code&gt;signal(7)&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a8d8c3e7831b9836ad0ab8e16c35f44885185a7a" translate="yes" xml:space="preserve">
          <source>Signal names are strings such as &lt;code&gt;'SIGINT'&lt;/code&gt; or &lt;code&gt;'SIGHUP'&lt;/code&gt;. See &lt;a href=&quot;#process_signal_events&quot;&gt;Signal Events&lt;/a&gt; and &lt;a href=&quot;http://man7.org/linux/man-pages/man2/kill.2.html&quot;&gt;&lt;code&gt;kill(2)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">信号名は、 &lt;code&gt;'SIGINT'&lt;/code&gt; や &lt;code&gt;'SIGHUP'&lt;/code&gt; などの文字列です。詳細については、&lt;a href=&quot;#process_signal_events&quot;&gt;シグナルイベント&lt;/a&gt;と&lt;a href=&quot;http://man7.org/linux/man-pages/man2/kill.2.html&quot;&gt; &lt;code&gt;kill(2)&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="96ecc2e6a238786d329413bad45ad223fba21794" translate="yes" xml:space="preserve">
          <source>Signals are not available on &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">シグナルは&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="1b169ed18b9fc685bb9cb9c568a0f81a29f2d12a" translate="yes" xml:space="preserve">
          <source>Signals will not be delivered through &lt;a href=&quot;process#process_signal_events&quot;&gt;&lt;code&gt;process.on('...')&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">シグナルは、&lt;a href=&quot;process#process_signal_events&quot;&gt; &lt;code&gt;process.on('...')&lt;/code&gt; &lt;/a&gt;を通じて配信されません。</target>
        </trans-unit>
        <trans-unit id="27b83f157d9391bb9ba15888f8df6c5f2f9911b9" translate="yes" xml:space="preserve">
          <source>Silence all process warnings (including deprecations).</source>
          <target state="translated">すべてのプロセスの警告(非推奨を含む)を停止します。</target>
        </trans-unit>
        <trans-unit id="b7bf181796934ede918ef0d25b60ead9147e8b63" translate="yes" xml:space="preserve">
          <source>Silence deprecation warnings.</source>
          <target state="translated">非推奨の警告を沈黙させる。</target>
        </trans-unit>
        <trans-unit id="8e3a5d672a2a0708e114e1ab5da7bd2d34bb5b45" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#fs_fs_readfile_path_options_callback&quot;&gt;&lt;code&gt;fs.readFile()&lt;/code&gt;&lt;/a&gt;, when the path is a directory, the behavior of &lt;code&gt;fs.readFileSync()&lt;/code&gt; is platform-specific.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_readfile_path_options_callback&quot;&gt; &lt;code&gt;fs.readFile()&lt;/code&gt; &lt;/a&gt;と同様に、パスがディレクトリの場合、 &lt;code&gt;fs.readFileSync()&lt;/code&gt; の動作はプラットフォーム固有です。</target>
        </trans-unit>
        <trans-unit id="9d120e1b8123c9879fd52fcdba1263f6f9f041bc" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&quot;exports&quot;&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;, dependencies can also be specified to be objects containing conditions which branch how dependencies are loaded. In the preceding example, &lt;code&gt;&quot;http&quot;&lt;/code&gt; is allowed when the &lt;code&gt;&quot;import&quot;&lt;/code&gt; condition is part of loading it.</source>
          <target state="translated">同様に &lt;code&gt;&quot;exports&quot;&lt;/code&gt; で &lt;code&gt;package.json&lt;/code&gt; 、依存関係にも依存関係がどのようにロードされるか、分岐条件を含むオブジェクトであることを指定することができます。前の例では、 &lt;code&gt;&quot;import&quot;&lt;/code&gt; 条件がロードの一部である場合に &lt;code&gt;&quot;http&quot;&lt;/code&gt; が許可されます。</target>
        </trans-unit>
        <trans-unit id="52bf38096b0d9214d18879ed344df0d24da8aa4d" translate="yes" xml:space="preserve">
          <source>Similar to how CommonJS wrappers work, the code runs in an implicit function scope. The only argument is a &lt;code&gt;require&lt;/code&gt;-like function that can be used to load builtins like &quot;fs&quot;: &lt;code&gt;getBuiltin(request: string)&lt;/code&gt;.</source>
          <target state="translated">CommonJSラッパーの動作と同様に、コードは暗黙的な関数スコープで実行されます。唯一の引数は、「fs」のような組み込み関数をロードするために使用できる &lt;code&gt;require&lt;/code&gt; のような関数です： &lt;code&gt;getBuiltin(request: string)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2888236b26997566307bf071d6874122bd1cbf80" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;'message'&lt;/code&gt; event of &lt;code&gt;cluster&lt;/code&gt;, but specific to this worker.</source>
          <target state="translated">&lt;code&gt;cluster&lt;/code&gt; の &lt;code&gt;'message'&lt;/code&gt; イベントに似ていますが、このワーカーに固有です。</target>
        </trans-unit>
        <trans-unit id="84e07dae7a87dcc006d5b3565267e659a68e36c5" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;cluster.on('disconnect')&lt;/code&gt; event, but specific to this worker.</source>
          <target state="translated">&lt;code&gt;cluster.on('disconnect')&lt;/code&gt; イベントに似ていますが、このワーカーに固有です。</target>
        </trans-unit>
        <trans-unit id="66112a199b84ec5308a25b3cd73ea2c780f92ee7" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;cluster.on('exit')&lt;/code&gt; event, but specific to this worker.</source>
          <target state="translated">&lt;code&gt;cluster.on('exit')&lt;/code&gt; イベントに似ていますが、このワーカーに固有です。</target>
        </trans-unit>
        <trans-unit id="6b7fc57ceb5babec9b2eedb523922213e8224107" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;cluster.on('listening')&lt;/code&gt; event, but specific to this worker.</source>
          <target state="translated">&lt;code&gt;cluster.on('listening')&lt;/code&gt; イベントに似ていますが、このワーカーに固有です。</target>
        </trans-unit>
        <trans-unit id="b415e0fb4cf9c8fc796577773c7283847d366ce8" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;cluster.on('online')&lt;/code&gt; event, but specific to this worker.</source>
          <target state="translated">&lt;code&gt;cluster.on('online')&lt;/code&gt; イベントに似ていますが、このワーカーに固有です。</target>
        </trans-unit>
        <trans-unit id="14ced4a688bc187ca465b3cd83db96a083d3987f" translate="yes" xml:space="preserve">
          <source>Similar to the above &lt;code&gt;fs.read&lt;/code&gt; function, this version takes an optional &lt;code&gt;options&lt;/code&gt; object. If no &lt;code&gt;options&lt;/code&gt; object is specified, it will default with the above values.</source>
          <target state="translated">上記の &lt;code&gt;fs.read&lt;/code&gt; 関数と同様に、このバージョンはオプションの &lt;code&gt;options&lt;/code&gt; オブジェクトを取ります。 &lt;code&gt;options&lt;/code&gt; オブジェクトが指定されていない場合、デフォルトで上記の値になります。</target>
        </trans-unit>
        <trans-unit id="d238b4aac04c36dab023cec51593758f31bc9432" translate="yes" xml:space="preserve">
          <source>Similar to the above &lt;code&gt;fs.readSync&lt;/code&gt; function, this version takes an optional &lt;code&gt;options&lt;/code&gt; object. If no &lt;code&gt;options&lt;/code&gt; object is specified, it will default with the above values.</source>
          <target state="translated">上記の &lt;code&gt;fs.readSync&lt;/code&gt; 関数と同様に、このバージョンはオプションの &lt;code&gt;options&lt;/code&gt; オブジェクトを取ります。 &lt;code&gt;options&lt;/code&gt; オブジェクトが指定されていない場合、デフォルトで上記の値になります。</target>
        </trans-unit>
        <trans-unit id="3ac9855ed736b4fa480d8a43fec6f250afda30f3" translate="yes" xml:space="preserve">
          <source>Similarly to libuv handles, thread-safe functions can be &quot;referenced&quot; and &quot;unreferenced&quot;. A &quot;referenced&quot; thread-safe function will cause the event loop on the thread on which it is created to remain alive until the thread-safe function is destroyed. In contrast, an &quot;unreferenced&quot; thread-safe function will not prevent the event loop from exiting. The APIs &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; and &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; exist for this purpose.</source>
          <target state="translated">libuvハンドルと同様に、スレッドセーフ関数は「参照」および「非参照」にすることができます。「参照された」スレッドセーフ関数は、それが作成されたスレッドのイベントループを、スレッドセーフ関数が破棄されるまで存続させます。対照的に、「参照されていない」スレッドセーフ関数は、イベントループの終了を妨げません。この目的のために、API &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; および &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; が存在します。</target>
        </trans-unit>
        <trans-unit id="94c768e527f0909fc9c317c844d1e9705a535d7a" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;_error&lt;/code&gt; will refer to the last seen error, if there was any. Explicitly setting &lt;code&gt;_error&lt;/code&gt; to a value will disable this behavior.</source>
          <target state="translated">同様に、 &lt;code&gt;_error&lt;/code&gt; は、最後に発生したエラーがある場合はそれを参照します。 &lt;code&gt;_error&lt;/code&gt; を明示的に値に設定すると、この動作が無効になります。</target>
        </trans-unit>
        <trans-unit id="68908d198c0c00b636916c202280c1b128f47459" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;sendHandler&lt;/code&gt; argument can be used to pass the handle of a socket to the child process. The example below spawns two children that each handle connections with &quot;normal&quot; or &quot;special&quot; priority:</source>
          <target state="translated">同様に、 &lt;code&gt;sendHandler&lt;/code&gt; 引数を使用して、ソケットのハンドルを子プロセスに渡すことができます。以下の例では、「通常」または「特別」の優先順位で接続をそれぞれ処理する2つの子が生成されます。</target>
        </trans-unit>
        <trans-unit id="66b321574d3646632c046755f0ce64da291ab3da" translate="yes" xml:space="preserve">
          <source>Simple Asynchronous Operations</source>
          <target state="translated">単純な非同期演算</target>
        </trans-unit>
        <trans-unit id="1a4e669cafd14c0ff137b0343bce459f95a9ad89" translate="yes" xml:space="preserve">
          <source>Simple asynchronous operations</source>
          <target state="translated">シンプルな非同期演算</target>
        </trans-unit>
        <trans-unit id="3b26bf2b21d5c046c76bbe7966c4fe748d415483" translate="yes" xml:space="preserve">
          <source>Simplified Construction</source>
          <target state="translated">簡易施工</target>
        </trans-unit>
        <trans-unit id="f3b013a446639b600152feb4c9fa134a10c317da" translate="yes" xml:space="preserve">
          <source>Simplified construction</source>
          <target state="translated">簡易施工</target>
        </trans-unit>
        <trans-unit id="b54f8107ea96b03de1301ddaf61409430ff8ec4a" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&quot;not:valid&quot;&lt;/code&gt; is not a supported target, &lt;code&gt;&quot;./submodule.js&quot;&lt;/code&gt; is used instead as the fallback, as if it were the only target.</source>
          <target state="translated">以来 &lt;code&gt;&quot;not:valid&quot;&lt;/code&gt; サポート対象ではありません、 &lt;code&gt;&quot;./submodule.js&quot;&lt;/code&gt; それが唯一の目標であるかのように、フォールバックとして代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="f99d49ab528e192fb2f7529da1eb579e44af1746" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;null&lt;/code&gt; has a special meaning as the first argument to a callback, if a wrapped function rejects a &lt;code&gt;Promise&lt;/code&gt; with a falsy value as a reason, the value is wrapped in an &lt;code&gt;Error&lt;/code&gt; with the original value stored in a field named &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; はコールバックへの最初の引数として特別な意味を持つため、ラップされた関数が理由として偽の値を使用して &lt;code&gt;Promise&lt;/code&gt; を拒否した場合、その値は &lt;code&gt;reason&lt;/code&gt; という名前のフィールドに格納された元の値で &lt;code&gt;Error&lt;/code&gt; ラップされます。</target>
        </trans-unit>
        <trans-unit id="085d918324c093971fa8fdb09229e33d4e68eb60" translate="yes" xml:space="preserve">
          <source>Since Node.js looks up the &lt;code&gt;realpath&lt;/code&gt; of any modules it loads (that is, resolves symlinks), and then looks for their dependencies in the &lt;code&gt;node_modules&lt;/code&gt; folders as described &lt;a href=&quot;#modules_loading_from_node_modules_folders&quot;&gt;here&lt;/a&gt;, this situation is very simple to resolve with the following architecture:</source>
          <target state="translated">Node.jsのは見上げ以来 &lt;code&gt;realpath&lt;/code&gt; それは負荷（つまり、解決さのシンボリックリンクです）すべてのモジュールのを、その後にそれらの依存関係を探し &lt;code&gt;node_modules&lt;/code&gt; の説明に従ってフォルダ&lt;a href=&quot;#modules_loading_from_node_modules_folders&quot;&gt;ここでは&lt;/a&gt;、このような状況は、次のアーキテクチャで解決するのは非常に簡単です：</target>
        </trans-unit>
        <trans-unit id="0f1da689c102defeb89c9103817673c0158b2fd4" translate="yes" xml:space="preserve">
          <source>Since Node.js versions 4.4.0 and 5.2.0, several modules only intended for internal usage were mistakenly exposed to user code through &lt;code&gt;require()&lt;/code&gt;. These modules were:</source>
          <target state="translated">Node.jsバージョン4.4.0および5.2.0以降、内部使用のみを目的としたいくつかのモジュールが &lt;code&gt;require()&lt;/code&gt; を介してユーザーコードに誤って公開されていました。これらのモジュールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f165e4efc55d397d0dc31c26ef81605fc68e73c3" translate="yes" xml:space="preserve">
          <source>Since Windows recognizes multiple path separators, both separators will be replaced by instances of the Windows preferred separator (&lt;code&gt;\&lt;/code&gt;):</source>
          <target state="translated">Windowsは複数のパスセパレーターを認識するため、両方のセパレーターはWindows優先セパレーター（ &lt;code&gt;\&lt;/code&gt; ）のインスタンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3d6f320ba948afbbcfb7f638bba124936b823658" translate="yes" xml:space="preserve">
          <source>Since a dependency can be redirected, you can provide attenuated or modified forms of dependencies as fits your application. For example, you could log data about timing of function durations by wrapping the original:</source>
          <target state="translated">依存関係はリダイレクトできるので、アプリケーションに合わせて依存関係を減衰させたり、変更したりすることができます。例えば、関数の持続時間のタイミングに関するデータを、元のものをラップすることで記録することができます。</target>
        </trans-unit>
        <trans-unit id="618d19cec8697828c074bbb5db22e1bf9f6d5165" translate="yes" xml:space="preserve">
          <source>Since most requests are GET requests without bodies, Node.js provides this convenience method. The only difference between this method and &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt; is that it sets the method to GET and calls &lt;code&gt;req.end()&lt;/code&gt; automatically. The callback must take care to consume the response data for reasons stated in &lt;a href=&quot;#http_class_http_clientrequest&quot;&gt;&lt;code&gt;http.ClientRequest&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">ほとんどのリクエストはボディなしのGETリクエストであるため、Node.jsはこの便利なメソッドを提供します。このメソッドと&lt;a href=&quot;#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt;の唯一の違いは、メソッドをGETに設定し、 &lt;code&gt;req.end()&lt;/code&gt; を自動的に呼び出すことです。コールバックは、&lt;a href=&quot;#http_class_http_clientrequest&quot;&gt; &lt;code&gt;http.ClientRequest&lt;/code&gt; &lt;/a&gt;セクションに記載されている理由により、応答データを消費するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a28c553f702ce2e047215ea46b9b2d8fb4d2514" translate="yes" xml:space="preserve">
          <source>Since there are no browsers known that support &lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;unencrypted HTTP/2&lt;/a&gt;, the use of &lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt;&lt;code&gt;http2.createSecureServer()&lt;/code&gt;&lt;/a&gt; is necessary when communicating with browser clients.</source>
          <target state="translated">&lt;a href=&quot;https://http2.github.io/faq/#does-http2-require-encryption&quot;&gt;暗号化さ&lt;/a&gt;れていないHTTP / 2をサポートするブラウザは知られていないため、ブラウザクライアントと通信するときは&lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt; &lt;code&gt;http2.createSecureServer()&lt;/code&gt; を&lt;/a&gt;使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8e694832550e37d4a04939ea8b34156d6ffdb53" translate="yes" xml:space="preserve">
          <source>Single process servers need no specific implementation to use session tickets. To use session tickets across server restarts or load balancers, servers must all have the same ticket keys. There are three 16-byte keys internally, but the tls API exposes them as a single 48-byte buffer for convenience.</source>
          <target state="translated">単一プロセスサーバーでは、セッションチケットを使用するための特別な実装は必要ありません。サーバーの再起動やロードバランサー間でセッションチケットを使用するには、すべてのサーバーが同じチケットキーを持っていなければなりません。内部的には3つの16バイトの鍵がありますが、tls APIでは利便性を考慮して48バイトのバッファとして公開しています。</target>
        </trans-unit>
        <trans-unit id="9abc93c33bc470a2c82d5e5917a9a81982503c36" translate="yes" xml:space="preserve">
          <source>SlowBuffer</source>
          <target state="translated">SlowBuffer</target>
        </trans-unit>
        <trans-unit id="34dc8e380361d063fe82f5458126d05abc5326bb" translate="yes" xml:space="preserve">
          <source>Smaller fragment sizes decrease the buffering latency on the client: larger fragments are buffered by the TLS layer until the entire fragment is received and its integrity is verified; large fragments can span multiple roundtrips and their processing can be delayed due to packet loss or reordering. However, smaller fragments add extra TLS framing bytes and CPU overhead, which may decrease overall server throughput.</source>
          <target state="translated">大きなフラグメントは、フラグメント全体が受信され、その完全性が検証されるまで、TLS 層によってバッファリングされます。大きなフラグメントは複数のラウンドトリップにまたがることができ、その処理はパケットロスや並べ替えのために遅延することがあります。しかし、小さなフラグメントは余分な TLS フレーミングバイトと CPU のオーバーヘッドを追加し、サーバ全体のスループットを低下させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8dbd400ee29a0e6a09625803bca599022e0f22ab" translate="yes" xml:space="preserve">
          <source>So using &lt;code&gt;path.basename()&lt;/code&gt; might yield different results on POSIX and Windows:</source>
          <target state="translated">したがって、 &lt;code&gt;path.basename()&lt;/code&gt; を使用すると、POSIXとWindowsでは異なる結果が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a3145858095272e0709f16e62a1a781c8f6b6212" translate="yes" xml:space="preserve">
          <source>Sockets are removed from an agent when the socket emits either a &lt;code&gt;'close'&lt;/code&gt; event or an &lt;code&gt;'agentRemove'&lt;/code&gt; event. When intending to keep one HTTP request open for a long time without keeping it in the agent, something like the following may be done:</source>
          <target state="translated">ソケットが &lt;code&gt;'close'&lt;/code&gt; イベントまたは &lt;code&gt;'agentRemove'&lt;/code&gt; イベントを発行すると、ソケットはエージェントから削除されます。1つのHTTPリクエストをエージェントに保持せずに長時間開いたままにしようとする場合、次のようなことが行われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c3eef16e57ce01262cf18aa0104097978661b909" translate="yes" xml:space="preserve">
          <source>Sockets in the &lt;code&gt;freeSockets&lt;/code&gt; list will be automatically destroyed and removed from the array on &lt;code&gt;'timeout'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;freeSockets&lt;/code&gt; リストのソケットは自動的に破棄され、 &lt;code&gt;'timeout'&lt;/code&gt; 時に配列から削除されます。</target>
        </trans-unit>
        <trans-unit id="6bd3b535bf22fe68b49a861dd875c7f98dcae171" translate="yes" xml:space="preserve">
          <source>Some characters (&lt;code&gt;&amp;lt; &amp;gt; : &quot; / \ | ? *&lt;/code&gt;) are reserved under Windows as documented by &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file&quot;&gt;Naming Files, Paths, and Namespaces&lt;/a&gt;. Under NTFS, if the filename contains a colon, Node.js will open a file system stream, as described by &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">一部の文字（ &lt;code&gt;&amp;lt; &amp;gt; : &quot; / \ | ? *&lt;/code&gt; ）は&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file&quot;&gt;、ファイル、パス、およびネームスペースのネーミングで&lt;/a&gt;文書化されているように、Windowsで予約されています。NTFSでは、ファイル名にコロンが含まれている場合、Node.jsはファイルシステムストリームを開きます。&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams&quot;&gt;このMSDNのページ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="10866bce9cb7a7ba61906a2086d9064bfbd078d5" translate="yes" xml:space="preserve">
          <source>Some common interop cases of using Node.js streams with async generators and async iterators are provided below.</source>
          <target state="translated">Node.js ストリームを非同期ジェネレータと非同期イテレータで使用する一般的なインターロップケースを以下に示します。</target>
        </trans-unit>
        <trans-unit id="8d47f18e534bdd2a87efe02889958af7c944fb9f" translate="yes" xml:space="preserve">
          <source>Some exceptions are &lt;em&gt;unrecoverable&lt;/em&gt; at the JavaScript layer. Such exceptions will &lt;em&gt;always&lt;/em&gt; cause the Node.js process to crash. Examples include &lt;code&gt;assert()&lt;/code&gt; checks or &lt;code&gt;abort()&lt;/code&gt; calls in the C++ layer.</source>
          <target state="translated">一部の例外は、JavaScriptレイヤーでは&lt;em&gt;回復&lt;/em&gt;できません。このような例外は&lt;em&gt;常に&lt;/em&gt; Node.jsプロセスをクラッシュさせます。例には、C ++層での &lt;code&gt;assert()&lt;/code&gt; チェックまたは &lt;code&gt;abort()&lt;/code&gt; 呼び出しが含まれます。</target>
        </trans-unit>
        <trans-unit id="5399a6552ba070daf54ffef821cc2631bb0ba49c" translate="yes" xml:space="preserve">
          <source>Some modules use it to check if they are the entry point of the current process. Instead, it is recommended to compare &lt;code&gt;require.main&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt;:</source>
          <target state="translated">一部のモジュールは、これを使用して、現在のプロセスのエントリポイントであるかどうかを確認します。代わりに、 &lt;code&gt;require.main&lt;/code&gt; と &lt;code&gt;module&lt;/code&gt; を比較することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7c8d68cba7e47b6cb1c33a96454b1c63bc871705" translate="yes" xml:space="preserve">
          <source>Some of the N-API surface is considered experimental and requires explicit opt-in to access those APIs:</source>
          <target state="translated">N-APIの表面の一部は実験的なものと考えられており、これらのAPIにアクセスするには明示的なオプトインが必要です。</target>
        </trans-unit>
        <trans-unit id="3807b5061221ab0e9aa6dd303dab6453ef7264d4" translate="yes" xml:space="preserve">
          <source>Some of the N-API surface is experimental and requires explicit opt-in:</source>
          <target state="translated">N-API面の一部は実験的なものであり、明示的なオプトインが必要です。</target>
        </trans-unit>
        <trans-unit id="f8ae1401718791d628f854084c55fcbd7c7a4385" translate="yes" xml:space="preserve">
          <source>Some of these examples are actually &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams that implement the &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">これらの例の一部は、実際には&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;インターフェースを実装する&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="68e3d3c9a38a9ef86cdf3156637d4da2b4f9583b" translate="yes" xml:space="preserve">
          <source>Some options are only relevant when compressing and are ignored by the decompression classes.</source>
          <target state="translated">いくつかのオプションは圧縮時にのみ関連し、解凍クラスでは無視されます。</target>
        </trans-unit>
        <trans-unit id="d6ad7ff8e66ac8692e6be45fda9d7e05672bb5b1" translate="yes" xml:space="preserve">
          <source>Some previously supported (but strictly invalid) URLs were accepted through the &lt;a href=&quot;http#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;http#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https#https_https_request_options_callback&quot;&gt;&lt;code&gt;https.request()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https#https_https_get_options_callback&quot;&gt;&lt;code&gt;https.get()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;tls#tls_tls_checkserveridentity_hostname_cert&quot;&gt;&lt;code&gt;tls.checkServerIdentity()&lt;/code&gt;&lt;/a&gt; APIs because those were accepted by the legacy &lt;code&gt;url.parse()&lt;/code&gt; API. The mentioned APIs now use the WHATWG URL parser that requires strictly valid URLs. Passing an invalid URL is deprecated and support will be removed in the future.</source>
          <target state="translated">以前にサポートされていた（ただし完全に無効な）URLの一部は、&lt;a href=&quot;http#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;http#http_http_get_options_callback&quot;&gt; &lt;code&gt;http.get()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https#https_https_request_options_callback&quot;&gt; &lt;code&gt;https.request()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https#https_https_get_options_callback&quot;&gt; &lt;code&gt;https.get()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;tls#tls_tls_checkserveridentity_hostname_cert&quot;&gt; &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; &lt;/a&gt; API を通じて受け入れられました。従来の &lt;code&gt;url.parse()&lt;/code&gt; API。上記のAPIは、厳密に有効なURLを必要とするWHATWG URLパーサーを使用するようになりました。無効なURLを渡すことは非推奨であり、サポートは将来削除される予定です。</target>
        </trans-unit>
        <trans-unit id="db273fa15c72c57b732b3d97787207f93dba1c59" translate="yes" xml:space="preserve">
          <source>Some resources depend on garbage collection for cleanup, so if a reference is made to the &lt;code&gt;resource&lt;/code&gt; object passed to &lt;code&gt;init&lt;/code&gt; it is possible that &lt;code&gt;destroy&lt;/code&gt; will never be called, causing a memory leak in the application. If the resource does not depend on garbage collection, then this will not be an issue.</source>
          <target state="translated">一部のリソースはクリーンアップをガベージコレクションに依存しているため、 &lt;code&gt;init&lt;/code&gt; に渡された &lt;code&gt;resource&lt;/code&gt; オブジェクトを参照 &lt;code&gt;destroy&lt;/code&gt; と、destroyが呼び出されず、アプリケーションでメモリリークが発生する可能性があります。リソースがガベージコレクションに依存しない場合、これは問題にはなりません。</target>
        </trans-unit>
        <trans-unit id="89f652c658c2c3dcd487a98d916d06ede0d70fdf" translate="yes" xml:space="preserve">
          <source>Sometimes it might be necessary to run some code inside of the same global scope that the application runs in. This hook allows the return of a string that is run as sloppy-mode script on startup.</source>
          <target state="translated">時々、アプリケーションが実行するのと同じグローバルスコープ内でコードを実行する必要があるかもしれません。このフックは、起動時にsloppy-modeスクリプトとして実行される文字列を返すことを可能にします。</target>
        </trans-unit>
        <trans-unit id="a5943e0d28350aea8a52733949ee5fe2d57c91c0" translate="yes" xml:space="preserve">
          <source>Sometimes, the domain in use is not the one that ought to be used for a specific event emitter. Or, the event emitter could have been created in the context of one domain, but ought to instead be bound to some other domain.</source>
          <target state="translated">時には、使用中のドメインが特定のイベントエミッターに使用されるべきドメインではないことがあります。あるいは、イベントエミッタはあるドメインのコンテキストで作成されたが、代わりに他のドメインにバインドされるべきである場合もあります。</target>
        </trans-unit>
        <trans-unit id="64e4fff03b24706ce8b4fc77fa45e0f204b9ac34" translate="yes" xml:space="preserve">
          <source>Sort all existing name-value pairs in-place by their names. Sorting is done with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sorting_algorithm#Stability&quot;&gt;stable sorting algorithm&lt;/a&gt;, so relative order between name-value pairs with the same name is preserved.</source>
          <target state="translated">すべての既存の名前と値のペアをその名前でインプレースでソートします。並べ替えは&lt;a href=&quot;https://en.wikipedia.org/wiki/Sorting_algorithm#Stability&quot;&gt;安定した並べ替えアルゴリズム&lt;/a&gt;で行われるため、同じ名前の名前と値のペア間の相対的な順序は保持されます。</target>
        </trans-unit>
        <trans-unit id="18c45bbafa28bb4fba334ddb041026cbc401da0d" translate="yes" xml:space="preserve">
          <source>Source map cache</source>
          <target state="translated">ソースマップキャッシュ</target>
        </trans-unit>
        <trans-unit id="3c13fabf09c3265a0435cc69067213a99b7d2899" translate="yes" xml:space="preserve">
          <source>Source map v3 support</source>
          <target state="translated">ソースマップv3対応</target>
        </trans-unit>
        <trans-unit id="e76779cb445b8d302612885bef0332768076680d" translate="yes" xml:space="preserve">
          <source>Sources that are in formats Node.js doesn&amp;rsquo;t understand can be converted into JavaScript using the &lt;a href=&quot;#esm_transformsource_source_context_defaulttransformsource&quot;&gt;&lt;code&gt;transformSource&lt;/code&gt; hook&lt;/a&gt;. Before that hook gets called, however, other hooks need to tell Node.js not to throw an error on unknown file types; and to tell Node.js how to load this new file type.</source>
          <target state="translated">Node.jsが理解できない形式のソースは、&lt;a href=&quot;#esm_transformsource_source_context_defaulttransformsource&quot;&gt; &lt;code&gt;transformSource&lt;/code&gt; フック&lt;/a&gt;を使用してJavaScriptに変換できます。ただし、そのフックが呼び出される前に、他のフックはNode.jsに不明なファイルタイプでエラーをスローしないように指示する必要があります。そして、Node.jsにこの新しいファイルタイプをロードする方法を指示します。</target>
        </trans-unit>
        <trans-unit id="85cf48593252b562ba4bd04a76c01f0f4a3325a8" translate="yes" xml:space="preserve">
          <source>Spawn a new worker process.</source>
          <target state="translated">新しいワーカープロセスを生成します。</target>
        </trans-unit>
        <trans-unit id="08a1b595126ba27b20bc5b308a414089db2efef4" translate="yes" xml:space="preserve">
          <source>Spawning &lt;code&gt;.bat&lt;/code&gt; and &lt;code&gt;.cmd&lt;/code&gt; files on Windows</source>
          <target state="translated">産卵 &lt;code&gt;.bat&lt;/code&gt; と &lt;code&gt;.cmd&lt;/code&gt; の Windows上のファイルを</target>
        </trans-unit>
        <trans-unit id="b33c61eb1b1f48c2f9287d1be5561d705cd669ba" translate="yes" xml:space="preserve">
          <source>Spawns a shell then executes the &lt;code&gt;command&lt;/code&gt; within that shell, buffering any generated output. The &lt;code&gt;command&lt;/code&gt; string passed to the exec function is processed directly by the shell and special characters (vary based on &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_command-line_interpreters&quot;&gt;shell&lt;/a&gt;) need to be dealt with accordingly:</source>
          <target state="translated">シェルを生成し、そのシェル内で &lt;code&gt;command&lt;/code&gt; 実行し、生成された出力をバッファリングします。 &lt;code&gt;command&lt;/code&gt; exec関数に渡された文字列は、シェルと特殊文字によって直接処理される（に基づいて変わる&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_command-line_interpreters&quot;&gt;シェル&lt;/a&gt;）相応に対処する必要があります。</target>
        </trans-unit>
        <trans-unit id="2aa9733f2edd7e46bf6d382b077328070dd89a01" translate="yes" xml:space="preserve">
          <source>Special Schemes</source>
          <target state="translated">特別なスキーム</target>
        </trans-unit>
        <trans-unit id="cbdc98641621be8c2a23a3132eaf2652c8fce1f8" translate="yes" xml:space="preserve">
          <source>Special schemes</source>
          <target state="translated">特別なスキーム</target>
        </trans-unit>
        <trans-unit id="1cd951fe1b50293729ba97be1cf0a96e8aac643c" translate="yes" xml:space="preserve">
          <source>Specific API documentation can be found under &lt;a href=&quot;process&quot;&gt;&lt;code&gt;process API documentation&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">特定のAPIドキュメントは、&lt;a href=&quot;process&quot;&gt; &lt;code&gt;process API documentation&lt;/code&gt; &lt;/a&gt;セクションにあります。</target>
        </trans-unit>
        <trans-unit id="1c1fa7984dc357ebb3c9b1adca80944b9783143a" translate="yes" xml:space="preserve">
          <source>Specifically, at any given point in time, every &lt;code&gt;Readable&lt;/code&gt; is in one of three possible states:</source>
          <target state="translated">具体的には、任意の時点で、すべての &lt;code&gt;Readable&lt;/code&gt; は次の3つの状態のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="25921f74392f9b815efa3eeaff7a8232ad11e7a3" translate="yes" xml:space="preserve">
          <source>Specifiers may not begin with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;//&lt;/code&gt;. These are reserved for potential future use. The root of the current volume may be referenced via &lt;code&gt;file:///&lt;/code&gt;.</source>
          <target state="translated">指定子は、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;//&lt;/code&gt; で始めることはできません。これらは将来の使用のために予約されています。現在のボリュームのルートは &lt;code&gt;file:///&lt;/code&gt; で参照できます。</target>
        </trans-unit>
        <trans-unit id="fe861c7a1ea4c0c85253ccbccd759c572ec090c1" translate="yes" xml:space="preserve">
          <source>Specifies the active default cipher list used by the current Node.js process.</source>
          <target state="translated">現在のNode.jsプロセスで使用されているアクティブなデフォルトの暗号リストを指定します。</target>
        </trans-unit>
        <trans-unit id="79aa429838928d34cf678a64f8d1dc6a4d1f7299" translate="yes" xml:space="preserve">
          <source>Specifies the built-in default cipher list used by Node.js.</source>
          <target state="translated">Node.jsが使用する組み込みのデフォルト暗号リストを指定します。</target>
        </trans-unit>
        <trans-unit id="eb5097cca4fe65ebaebdd408c13e7dcf5989d1fe" translate="yes" xml:space="preserve">
          <source>Specify ICU data load path. (Overrides &lt;code&gt;NODE_ICU_DATA&lt;/code&gt;.)</source>
          <target state="translated">ICUデータロードパスを指定します。（ &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; をオーバーライドします。）</target>
        </trans-unit>
        <trans-unit id="90319811069e0eb580d90b9b29a4023d4050368f" translate="yes" xml:space="preserve">
          <source>Specify an alternative default TLS cipher list. Requires Node.js to be built with crypto support (default).</source>
          <target state="translated">代替となるデフォルトのTLS暗号リストを指定します。Node.jsがcryptoサポート(デフォルト)でビルドされている必要があります。</target>
        </trans-unit>
        <trans-unit id="315a8e1dbb731d6bc64ceabbfff8fd63facf6792" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;file&lt;/code&gt; of the custom &lt;a href=&quot;esm#esm_resolve_hook&quot;&gt;experimental ECMAScript Module&lt;/a&gt; loader.</source>
          <target state="translated">カスタムの&lt;a href=&quot;esm#esm_resolve_hook&quot;&gt;実験的ECMAScriptモジュール&lt;/a&gt;ローダーの &lt;code&gt;file&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="5a205ab8b92c7530d4484779597743d8397e59b2" translate="yes" xml:space="preserve">
          <source>Specify the &lt;code&gt;module&lt;/code&gt; of a custom &lt;a href=&quot;esm#esm_experimental_loaders&quot;&gt;experimental ECMAScript Module loader&lt;/a&gt;. &lt;code&gt;module&lt;/code&gt; may be either a path to a file, or an ECMAScript Module name.</source>
          <target state="translated">カスタムの&lt;a href=&quot;esm#esm_experimental_loaders&quot;&gt;実験的なECMAScriptモジュールローダー&lt;/a&gt;の &lt;code&gt;module&lt;/code&gt; を指定します。 &lt;code&gt;module&lt;/code&gt; は、ファイルへのパスまたはECMAScriptモジュール名のいずれかです。</target>
        </trans-unit>
        <trans-unit id="96d3f06d71b027251c65c65d65a3f546aeecee05" translate="yes" xml:space="preserve">
          <source>Specify the average sampling interval in bytes for the heap profiles generated by &lt;code&gt;--heap-prof&lt;/code&gt;. The default is 512 * 1024 bytes.</source>
          <target state="translated">&lt;code&gt;--heap-prof&lt;/code&gt; によって生成されたヒーププロファイルの平均サンプリング間隔をバイト単位で指定します。デフォルトは512 * 1024バイトです。</target>
        </trans-unit>
        <trans-unit id="d0b28ef5c3ff0ee830e0bf17cf6650900ce36094" translate="yes" xml:space="preserve">
          <source>Specify the directory where the CPU profiles generated by &lt;code&gt;--cpu-prof&lt;/code&gt; will be placed.</source>
          <target state="translated">&lt;code&gt;--cpu-prof&lt;/code&gt; によって生成されたCPUプロファイルが配置されるディレクトリを指定します。</target>
        </trans-unit>
        <trans-unit id="4126879d9350dee89100ef5b8b4b81f4896ba1f0" translate="yes" xml:space="preserve">
          <source>Specify the directory where the heap profiles generated by &lt;code&gt;--heap-prof&lt;/code&gt; will be placed.</source>
          <target state="translated">&lt;code&gt;--heap-prof&lt;/code&gt; によって生成されたヒーププロファイルを配置するディレクトリを指定します。</target>
        </trans-unit>
        <trans-unit id="5e4817ff17f0104cda29650876f5a49b3e41c961" translate="yes" xml:space="preserve">
          <source>Specify the file name of the CPU profile generated by &lt;code&gt;--cpu-prof&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--cpu-prof&lt;/code&gt; によって生成されたCPUプロファイルのファイル名を指定します。</target>
        </trans-unit>
        <trans-unit id="55143d8322efb2dc0d8ed2c1f605d89e8cee7282" translate="yes" xml:space="preserve">
          <source>Specify the file name of the heap profile generated by &lt;code&gt;--heap-prof&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--heap-prof&lt;/code&gt; によって生成されたヒーププロファイルのファイル名を指定します。</target>
        </trans-unit>
        <trans-unit id="4d1e7234506732f1e400dd0e3109d77e1ed883dc" translate="yes" xml:space="preserve">
          <source>Specify the maximum size, in bytes, of HTTP headers. Defaults to 16KB.</source>
          <target state="translated">HTTP ヘッダの最大サイズをバイト単位で指定します。デフォルトは 16KB です。</target>
        </trans-unit>
        <trans-unit id="1752fa70c5e1ad7d35bfb0e4c3716dddc4acdc38" translate="yes" xml:space="preserve">
          <source>Specify the maximum size, in bytes, of HTTP headers. Defaults to 8KB.</source>
          <target state="translated">HTTP ヘッダの最大サイズをバイト単位で指定します。既定値は 8KB です。</target>
        </trans-unit>
        <trans-unit id="a6afd9ae90ac974989b6cd8944099f9cbce7deca" translate="yes" xml:space="preserve">
          <source>Specify the sampling interval in microseconds for the CPU profiles generated by &lt;code&gt;--cpu-prof&lt;/code&gt;. The default is 1000 microseconds.</source>
          <target state="translated">&lt;code&gt;--cpu-prof&lt;/code&gt; によって生成されたCPUプロファイルのサンプリング間隔をマイクロ秒で指定します。デフォルトは1000マイクロ秒です。</target>
        </trans-unit>
        <trans-unit id="541c4ad4130a0b0489104d418b1638b813f9ffbf" translate="yes" xml:space="preserve">
          <source>Specify ways of the inspector web socket url exposure.</source>
          <target state="translated">インスペクタのWebソケットのURL公開方法を指定します。</target>
        </trans-unit>
        <trans-unit id="c1aeabaa1ef63f009af27e766739da1e3d90a586" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;end&lt;/code&gt; greater than &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; will return the same result as that of &lt;code&gt;end&lt;/code&gt; equal to &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; に&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; &lt;/a&gt;より大きい値を指定すると、&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;end&lt;/code&gt; と同じ結果が返されます。</target>
        </trans-unit>
        <trans-unit id="69226324dadc1ffbf4c2c77c9c8e9ea0140df26f" translate="yes" xml:space="preserve">
          <source>Specifying a code to &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit(code)&lt;/code&gt;&lt;/a&gt; will override any previous setting of &lt;code&gt;process.exitCode&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit(code)&lt;/code&gt; に&lt;/a&gt;コードを指定すると、以前の &lt;code&gt;process.exitCode&lt;/code&gt; の設定が上書きされます。</target>
        </trans-unit>
        <trans-unit id="b98cc8f6a5d313d5814066b57e630e93dc302e90" translate="yes" xml:space="preserve">
          <source>Specifying alternative services</source>
          <target state="translated">代替サービスの指定</target>
        </trans-unit>
        <trans-unit id="534dceee637624a8f11148c14fce348be3f9d9ed" translate="yes" xml:space="preserve">
          <source>Specifying an invalid string for &lt;code&gt;fill&lt;/code&gt; now results in a zero-filled buffer.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 無効な文字列を指定すると、バッファがゼロで埋められるようになります。</target>
        </trans-unit>
        <trans-unit id="9949307c2e9d850b9765e04d76443b1603efd22f" translate="yes" xml:space="preserve">
          <source>Specifying an invalid string for &lt;code&gt;fill&lt;/code&gt; triggers a thrown exception.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; 無効な文字列を指定すると、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="ff7cc9fb154569daf0e4204b6488615a4d28a3ab" translate="yes" xml:space="preserve">
          <source>Specifying an invalid string for &lt;code&gt;value&lt;/code&gt; triggers a thrown exception.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 無効な文字列を指定すると、スローされた例外がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="ac56acf0dea37e0491145b1985e99355101c5621" translate="yes" xml:space="preserve">
          <source>Specifying both a &lt;code&gt;'listening'&lt;/code&gt; event listener and passing a &lt;code&gt;callback&lt;/code&gt; to the &lt;code&gt;socket.bind()&lt;/code&gt; method is not harmful but not very useful.</source>
          <target state="translated">&lt;code&gt;'listening'&lt;/code&gt; イベントリスナーの指定と、 &lt;code&gt;socket.bind()&lt;/code&gt; メソッドへの &lt;code&gt;callback&lt;/code&gt; の引き渡しの両方を指定しても害はありませんが、あまり役に立ちません。</target>
        </trans-unit>
        <trans-unit id="903948b476f20fe83b6e3a0d50dd97ffc7fc0ca9" translate="yes" xml:space="preserve">
          <source>Specifying negative indexes causes the slice to be generated relative to the end of &lt;code&gt;buf&lt;/code&gt; rather than the beginning.</source>
          <target state="translated">負のインデックスを指定すると、スライスは、 &lt;code&gt;buf&lt;/code&gt; の先頭ではなく、末尾に相対的に生成されます。</target>
        </trans-unit>
        <trans-unit id="6cc57c857c10643c1a9f18baf8ce1a5fdd1a61c7" translate="yes" xml:space="preserve">
          <source>Standard JavaScript errors such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError&quot;&gt;&amp;lt;EvalError&amp;gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError&quot;&gt;&amp;lt;SyntaxError&amp;gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError&quot;&gt;&amp;lt;RangeError&amp;gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError&quot;&gt;&amp;lt;ReferenceError&amp;gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError&quot;&gt;&amp;lt;TypeError&amp;gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError&quot;&gt;&amp;lt;URIError&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">標準のJavaScriptのようなエラー&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError&quot;&gt;&amp;lt;EvalError&amp;gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError&quot;&gt;&amp;lt;にSyntaxError&amp;gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError&quot;&gt;&amp;lt;例外RangeError&amp;gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError&quot;&gt;&amp;lt;にReferenceError&amp;gt; &lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError&quot;&gt;&amp;lt;例外TypeError&amp;gt; 、&lt;/a&gt;および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError&quot;&gt;&amp;lt;URIError&amp;gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6fe7cb2643e6bba800a6e338181d58e18c9a8321" translate="yes" xml:space="preserve">
          <source>Start a TCP server listening for connections on the given &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;port&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; で接続を待機するTCPサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="06e6e2ed90096e43442a90d2be229202d8114274" translate="yes" xml:space="preserve">
          <source>Start a server listening for connections on a given &lt;code&gt;handle&lt;/code&gt; that has already been bound to a port, a Unix domain socket, or a Windows named pipe.</source>
          <target state="translated">すでにポート、Unixドメインソケット、またはWindows名前付きパイプにバインドされている特定の &lt;code&gt;handle&lt;/code&gt; で接続をリッスンするサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="554f2e41731bfa40d6620d1abc969c068af45b85" translate="yes" xml:space="preserve">
          <source>Start a server listening for connections. A &lt;code&gt;net.Server&lt;/code&gt; can be a TCP or an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server depending on what it listens to.</source>
          <target state="translated">接続を待機しているサーバーを起動します。A &lt;code&gt;net.Server&lt;/code&gt; は、 TCPまたはことができる&lt;a href=&quot;#net_ipc_support&quot;&gt;のIPC&lt;/a&gt;それが待機するものに応じてサーバー。</target>
        </trans-unit>
        <trans-unit id="9fe7a6165566f4e27bce2e6d711f060ad183f941" translate="yes" xml:space="preserve">
          <source>Start an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server listening for connections on the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; で接続を&lt;a href=&quot;#net_ipc_support&quot;&gt;待機&lt;/a&gt;するIPCサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="6ffb0420c6682f8d84de2c92d4d8c3a55cbdec95" translate="yes" xml:space="preserve">
          <source>Starting an IPC server as root may cause the server path to be inaccessible for unprivileged users. Using &lt;code&gt;readableAll&lt;/code&gt; and &lt;code&gt;writableAll&lt;/code&gt; will make the server accessible for all users.</source>
          <target state="translated">ルートとしてIPCサーバーを起動すると、権限のないユーザーがサーバーパスにアクセスできなくなる場合があります。 &lt;code&gt;readableAll&lt;/code&gt; および &lt;code&gt;writableAll&lt;/code&gt; を使用すると、すべてのユーザーがサーバーにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="c620676f35efb6292ef877604fc79f45ac633b18" translate="yes" xml:space="preserve">
          <source>Starting multiple REPL instances against a single running instance</source>
          <target state="translated">単一の実行中のインスタンスに対して複数のREPLインスタンスを起動する</target>
        </trans-unit>
        <trans-unit id="5d1f6d0e6ef8eaca9ce3ee322817f3e3ef165b90" translate="yes" xml:space="preserve">
          <source>Starting with Node.js 10.0.0, the tracing system uses the same time source as the one used by &lt;code&gt;process.hrtime()&lt;/code&gt; however the trace-event timestamps are expressed in microseconds, unlike &lt;code&gt;process.hrtime()&lt;/code&gt; which returns nanoseconds.</source>
          <target state="translated">Node.js 10.0.0以降、トレースシステムは &lt;code&gt;process.hrtime()&lt;/code&gt; で使用されるものと同じタイムソースを使用しますが、ナノ秒を返す &lt;code&gt;process.hrtime()&lt;/code&gt; とは異なり、トレースイベントのタイムスタンプはマイクロ秒で表されます。</target>
        </trans-unit>
        <trans-unit id="0346aaa3901062655c9c74e874a41b9dcb97e399" translate="yes" xml:space="preserve">
          <source>Starts a timer that can be used to compute the duration of an operation. Timers are identified by a unique &lt;code&gt;label&lt;/code&gt;. Use the same &lt;code&gt;label&lt;/code&gt; when calling &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt; to stop the timer and output the elapsed time in milliseconds to &lt;code&gt;stdout&lt;/code&gt;. Timer durations are accurate to the sub-millisecond.</source>
          <target state="translated">操作の継続時間を計算するために使用できるタイマーを開始します。タイマーは一意の &lt;code&gt;label&lt;/code&gt; 識別されます。&lt;a href=&quot;#console_console_timeend_label&quot;&gt; &lt;code&gt;console.timeEnd()&lt;/code&gt; &lt;/a&gt;を呼び出すときに同じ &lt;code&gt;label&lt;/code&gt; 使用してタイマーを停止し、経過時間をミリ秒単位で &lt;code&gt;stdout&lt;/code&gt; に出力します。タイマーの持続時間はサブミリ秒まで正確です。</target>
        </trans-unit>
        <trans-unit id="68de56216634a691fd554e2492439220dec0d947" translate="yes" xml:space="preserve">
          <source>Starts a timer that can be used to compute the duration of an operation. Timers are identified by a unique &lt;code&gt;label&lt;/code&gt;. Use the same &lt;code&gt;label&lt;/code&gt; when calling &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt; to stop the timer and output the elapsed time in suitable time units to &lt;code&gt;stdout&lt;/code&gt;. For example, if the elapsed time is 3869ms, &lt;code&gt;console.timeEnd()&lt;/code&gt; displays &quot;3.869s&quot;.</source>
          <target state="translated">操作の期間を計算するために使用できるタイマーを開始します。タイマーは一意の &lt;code&gt;label&lt;/code&gt; 識別されます。&lt;a href=&quot;#console_console_timeend_label&quot;&gt; &lt;code&gt;console.timeEnd()&lt;/code&gt; &lt;/a&gt;を呼び出すときに同じ &lt;code&gt;label&lt;/code&gt; 使用してタイマーを停止し、経過時間を適切な時間単位で &lt;code&gt;stdout&lt;/code&gt; に出力します。たとえば、経過時間が3869msの場合、 &lt;code&gt;console.timeEnd()&lt;/code&gt; は「3.869s」を表示します。</target>
        </trans-unit>
        <trans-unit id="d83607894695f9918ca047714909f1b962e36139" translate="yes" xml:space="preserve">
          <source>Starts receiving messages on this &lt;code&gt;MessagePort&lt;/code&gt;. When using this port as an event emitter, this will be called automatically once &lt;code&gt;'message'&lt;/code&gt; listeners are attached.</source>
          <target state="translated">この &lt;code&gt;MessagePort&lt;/code&gt; でメッセージの受信を開始します。このポートをイベントエミッターとして使用する場合、 &lt;code&gt;'message'&lt;/code&gt; リスナーがアタッチされると、このポートが自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d7f6564dec13bedab4ce6ac0ed6d752bff152099" translate="yes" xml:space="preserve">
          <source>Starts the HTTP server listening for connections. This method is identical to &lt;a href=&quot;net#net_server_listen&quot;&gt;&lt;code&gt;server.listen()&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">接続を待機しているHTTPサーバーを起動します。このメソッドは、&lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;net#net_server_listen&quot;&gt; &lt;code&gt;server.listen()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="eb4de66698b023ca700bc538bce0745337bc1e51" translate="yes" xml:space="preserve">
          <source>Starts the HTTPS server listening for encrypted connections. This method is identical to &lt;a href=&quot;net#net_server_listen&quot;&gt;&lt;code&gt;server.listen()&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">暗号化された接続をリッスンするHTTPSサーバーを起動します。このメソッドは、&lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;net#net_server_listen&quot;&gt; &lt;code&gt;server.listen()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="94699224d4856537f45bb6970bc72cc3f7bed4dd" translate="yes" xml:space="preserve">
          <source>Starts the V8 CPU profiler on start up, and writes the CPU profile to disk before exit.</source>
          <target state="translated">起動時にV8 CPUプロファイラを起動し、終了前にCPUプロファイルをディスクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="329370b2a7329e53d4d02e461c6e57a8fc9f9023" translate="yes" xml:space="preserve">
          <source>Starts the V8 heap profiler on start up, and writes the heap profile to disk before exit.</source>
          <target state="translated">起動時に V8 ヒープ プロファイラを起動し、終了前にヒープ プロファイルをディスクに書き込みます。</target>
        </trans-unit>
        <trans-unit id="9e50671dc5833c39a984b5d5fa7e22e278568975" translate="yes" xml:space="preserve">
          <source>Starts the server listening for encrypted connections. This method is identical to &lt;a href=&quot;net#net_server_listen&quot;&gt;&lt;code&gt;server.listen()&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">暗号化された接続をリッスンするサーバーを起動します。このメソッドは、&lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;net#net_server_listen&quot;&gt; &lt;code&gt;server.listen()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="e903bb32e898601cc8a5d30e6df965de3f1e789e" translate="yes" xml:space="preserve">
          <source>Stat Time Values</source>
          <target state="translated">統計時間値</target>
        </trans-unit>
        <trans-unit id="c7f1d08ff8093e2094c4dcd9d77cf8ada6325421" translate="yes" xml:space="preserve">
          <source>Stat time values</source>
          <target state="translated">統計時間の値</target>
        </trans-unit>
        <trans-unit id="32e7028d9d70a10b18be8b6405d3ba1a073fd9c7" translate="yes" xml:space="preserve">
          <source>State errors occur when an action is attempted at an incorrect time (for instance, attempting to send data on a stream after it has closed). These will be reported using either a synchronous &lt;code&gt;throw&lt;/code&gt; or via an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;Http2Stream&lt;/code&gt;, &lt;code&gt;Http2Session&lt;/code&gt; or HTTP/2 Server objects, depending on where and when the error occurs.</source>
          <target state="translated">状態エラーは、不正なタイミングでアクションが試行された場合に発生します（たとえば、ストリームが閉じた後にストリームでデータを送信しようとした場合）。これらは、エラーが発生した場所とタイミングに応じて、同期 &lt;code&gt;throw&lt;/code&gt; を使用するか、 &lt;code&gt;Http2Stream&lt;/code&gt; 、 &lt;code&gt;Http2Session&lt;/code&gt; 、またはHTTP / 2サーバーオブジェクトの &lt;code&gt;'error'&lt;/code&gt; イベントを介して報告されます。</target>
        </trans-unit>
        <trans-unit id="589fb40c4487b059e459386f3e42893629267e68" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;AsyncResource.bind(fn[, type])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;AsyncResource.bind(fn[, type])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14187f2361ab6f52b171dad2d7f0cc0a150b97e0" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.alloc(size[, fill[, encoding]])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.alloc(size[, fill[, encoding]])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c12bb9bdc6ddd9154b2e7dec800abbc48dfb465d" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.allocUnsafe(size)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.allocUnsafe(size)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="75bdc82f5a091b7fed8502e476ad71a29efec654" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d15b5911a869607d4e32294ee672cf66ed32309" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.byteLength(string[, encoding])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.byteLength(string[, encoding])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb3e0b01582e6c9ac4af47108131199dae74e284" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.compare(buf1, buf2)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.compare(buf1, buf2)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a073714aca09e5ededdc6b45cf1ac11f5ff3bea2" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.concat(list[, totalLength])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.concat(list[, totalLength])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53ee66f7e262f4f3fe645f06bb9cc2db84a19bc6" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.from(array)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.from(array)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ddaaa207da2add5c67510fadd0a25a1044cc4779" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.from(arrayBuffer[, byteOffset[, length]])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.from(arrayBuffer[, byteOffset[, length]])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="718dbf30d021395ff3ab3cb882914281cf161573" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.from(buffer)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.from(buffer)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="93cac6d86d9e9fba27e02f9317dd885d05810797" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.from(object[, offsetOrEncoding[, length]])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.from(object[, offsetOrEncoding[, length]])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bedb55cbcd99c323235c46f0bf523c711f52f23" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.from(string[, encoding])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.from(string[, encoding])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b47361dc8dc5e500786ddced81e51efa18348a5" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.isBuffer(obj)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.isBuffer(obj)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f34bbe4b706c7cce17ef8b5c3b831b5e9f725e24" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;Buffer.isEncoding(encoding)&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;Buffer.isEncoding(encoding)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcefd7703542e2fefa7a9eea76bd5071fbb28f17" translate="yes" xml:space="preserve">
          <source>Static method: &lt;code&gt;ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])&lt;/code&gt;</source>
          <target state="translated">静的メソッド： &lt;code&gt;ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="108f3f896601ff8bcab8df720006f617ed109e0d" translate="yes" xml:space="preserve">
          <source>Status code was outside the regular status code range (100-999).</source>
          <target state="translated">ステータスコードは通常のステータスコードの範囲外(100~999)でした。</target>
        </trans-unit>
        <trans-unit id="cf607186e7474df9831f133825fcf7b66be4e1f4" translate="yes" xml:space="preserve">
          <source>Status message is not supported by HTTP/2 (RFC 7540 8.1.2.4). It returns an empty string.</source>
          <target state="translated">ステータスメッセージはHTTP/2(RFC 7540 8.1.2.4)ではサポートされていません。空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f94f58f50f4cb02a7cf2e081505d0705933f148e" translate="yes" xml:space="preserve">
          <source>Stepping</source>
          <target state="translated">Stepping</target>
        </trans-unit>
        <trans-unit id="63277aa61bd8ad163c7295c17cd8b55a79a2d628" translate="yes" xml:space="preserve">
          <source>Stop all JavaScript execution in the worker thread as soon as possible. Returns a Promise for the exit code that is fulfilled when the &lt;a href=&quot;#worker_threads_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt; event&lt;/a&gt; is emitted.</source>
          <target state="translated">できるだけ早くワーカースレッドですべてのJavaScript実行を停止します。&lt;a href=&quot;#worker_threads_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; イベント&lt;/a&gt;が発生したときに実行される終了コードのPromiseを返します。</target>
        </trans-unit>
        <trans-unit id="9dea81038a58efdcbd299d037492c86d713176aa" translate="yes" xml:space="preserve">
          <source>Stop watching for changes on &lt;code&gt;filename&lt;/code&gt;. If &lt;code&gt;listener&lt;/code&gt; is specified, only that particular listener is removed. Otherwise, &lt;em&gt;all&lt;/em&gt; listeners are removed, effectively stopping watching of &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の変更の監視を停止します。 &lt;code&gt;listener&lt;/code&gt; が指定されている場合、その特定のリスナーのみが削除されます。それ以外の場合は、&lt;em&gt;すべての&lt;/em&gt;リスナーが削除され、 &lt;code&gt;filename&lt;/code&gt; の監視が事実上停止します。</target>
        </trans-unit>
        <trans-unit id="956283230e00809d8e93aa47ddb429664008db8a" translate="yes" xml:space="preserve">
          <source>Stop watching for changes on the given &lt;code&gt;fs.FSWatcher&lt;/code&gt;. Once stopped, the &lt;code&gt;fs.FSWatcher&lt;/code&gt; object is no longer usable.</source>
          <target state="translated">指定された &lt;code&gt;fs.FSWatcher&lt;/code&gt; の変更の監視を停止します。停止すると、 &lt;code&gt;fs.FSWatcher&lt;/code&gt; オブジェクトは使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="6fe3ec02a03400ada269c64ecea5affde1290ff1" translate="yes" xml:space="preserve">
          <source>Stops a timer that was previously started by calling &lt;a href=&quot;#console_console_time_label&quot;&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt; and prints the result to &lt;code&gt;stdout&lt;/code&gt;:</source>
          <target state="translated">以前に&lt;a href=&quot;#console_console_time_label&quot;&gt; &lt;code&gt;console.time()&lt;/code&gt; &lt;/a&gt;を呼び出して開始したタイマーを停止し、結果を &lt;code&gt;stdout&lt;/code&gt; に出力します。</target>
        </trans-unit>
        <trans-unit id="ad924985a4fdc90892a88d06a124e54339af38e5" translate="yes" xml:space="preserve">
          <source>Stops the invocation of event listeners after the current one completes.</source>
          <target state="translated">現在のイベントリスナーの呼び出しが完了した後、イベントリスナーの呼び出しを停止します。</target>
        </trans-unit>
        <trans-unit id="61ec9b12871b0be4c35d5f790a06eecf86e735a0" translate="yes" xml:space="preserve">
          <source>Stops the server from accepting new connections and keeps existing connections. This function is asynchronous, the server is finally closed when all connections are ended and the server emits a &lt;a href=&quot;#net_event_close&quot;&gt;&lt;code&gt;'close'&lt;/code&gt;&lt;/a&gt; event. The optional &lt;code&gt;callback&lt;/code&gt; will be called once the &lt;code&gt;'close'&lt;/code&gt; event occurs. Unlike that event, it will be called with an &lt;code&gt;Error&lt;/code&gt; as its only argument if the server was not open when it was closed.</source>
          <target state="translated">サーバーが新しい接続を受け入れないようにし、既存の接続を維持します。この関数は非同期で、すべての接続が終了し、サーバーが&lt;a href=&quot;#net_event_close&quot;&gt; &lt;code&gt;'close'&lt;/code&gt; &lt;/a&gt;イベントを発行すると、サーバーは最終的に閉じられます。オプションの &lt;code&gt;callback&lt;/code&gt; は、 &lt;code&gt;'close'&lt;/code&gt; イベントが発生すると呼び出されます。そのイベントとは異なり、サーバーが閉じられたときにサーバーが開いていなかった場合は、唯一の引数として &lt;code&gt;Error&lt;/code&gt; を指定して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="13a86801e6ed00aa1d0f8e920cda196addbcbd36" translate="yes" xml:space="preserve">
          <source>Stops the server from accepting new connections. See &lt;a href=&quot;net#net_server_close_callback&quot;&gt;&lt;code&gt;net.Server.close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">サーバーが新しい接続を受け入れないようにします。&lt;a href=&quot;net#net_server_close_callback&quot;&gt; &lt;code&gt;net.Server.close()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a7caa331874d02fa77974fab639264f29757f5ad" translate="yes" xml:space="preserve">
          <source>Stops the server from establishing new sessions. This does not prevent new request streams from being created due to the persistent nature of HTTP/2 sessions. To gracefully shut down the server, call &lt;a href=&quot;#http2_http2session_close_callback&quot;&gt;&lt;code&gt;http2session.close()&lt;/code&gt;&lt;/a&gt; on all active sessions.</source>
          <target state="translated">サーバーが新しいセッションを確立するのを停止します。これは、HTTP / 2セッションの永続的な性質により、新しい要求ストリームの作成を妨げません。サーバーを正常にシャットダウンするには、すべてのアクティブなセッションで&lt;a href=&quot;#http2_http2session_close_callback&quot;&gt; &lt;code&gt;http2session.close()&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1ab22de1842ea43fb623417c26b9f0e61280683c" translate="yes" xml:space="preserve">
          <source>Store the instance of the class in a &lt;code&gt;v8::External&lt;/code&gt;, and</source>
          <target state="translated">クラスのインスタンスを &lt;code&gt;v8::External&lt;/code&gt; に格納し、</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="94249e5dfc5218df05f3b663ab65e056d31c0b74" translate="yes" xml:space="preserve">
          <source>Stream Closed</source>
          <target state="translated">渓流閉鎖</target>
        </trans-unit>
        <trans-unit id="d476f10c1ee63bb6f40fe33a754aeb2ab4aada55" translate="yes" xml:space="preserve">
          <source>Stream instances are switched into object mode using the &lt;code&gt;objectMode&lt;/code&gt; option when the stream is created. Attempting to switch an existing stream into object mode is not safe.</source>
          <target state="translated">ストリームインスタンスは、ストリームの作成時に &lt;code&gt;objectMode&lt;/code&gt; オプションを使用してオブジェクトモードに切り替えられます。既存のストリームをオブジェクトモードに切り替えようとしても安全ではありません。</target>
        </trans-unit>
        <trans-unit id="4b543012dd93ff5cc7c8f60cc362f4bd102a8bdd" translate="yes" xml:space="preserve">
          <source>Stream&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/stream.js#L32&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">Stream&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/stream.js#L32&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4a0fa9606c6dbcdc85fcb43c57759b2e32c28c5c" translate="yes" xml:space="preserve">
          <source>Stream&lt;a href=&quot;https://github.com/nodejs/node/blob/c1da528bc25c9cc5a8240a7b4f136f5968f6e113/lib/stream.js#L30&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">Stream&lt;a href=&quot;https://github.com/nodejs/node/blob/c1da528bc25c9cc5a8240a7b4f136f5968f6e113/lib/stream.js#L30&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7886fb0d91a0f0911b002bce9e3c321e7aaad52f" translate="yes" xml:space="preserve">
          <source>Streams Compatibility with Async Generators and Async Iterators</source>
          <target state="translated">非同期生成器および非同期反復器とのストリームの互換性</target>
        </trans-unit>
        <trans-unit id="106a212df71896f6d20e121a7654d8b51d7a14b4" translate="yes" xml:space="preserve">
          <source>Streams can be readable, writable, or both. All streams are instances of &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ストリームは、読み取り、書き込み、またはその両方が可能です。すべてのストリームは&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; の&lt;/a&gt;インスタンスです。</target>
        </trans-unit>
        <trans-unit id="123de6c27a02c9b885b5c78ad4ae566a2775e718" translate="yes" xml:space="preserve">
          <source>Streams compatibility with async generators and async iterators</source>
          <target state="translated">非同期ジェネレータと非同期イテレータとのストリーム互換性</target>
        </trans-unit>
        <trans-unit id="8e59563edbe4df05e572c9eab21126fff23eeaba" translate="yes" xml:space="preserve">
          <source>Strict assertion mode</source>
          <target state="translated">厳格なアサーションモード</target>
        </trans-unit>
        <trans-unit id="bb58e54eade2e3692f42c15879de34341894444a" translate="yes" xml:space="preserve">
          <source>Strict mode</source>
          <target state="translated">ストリクトモード</target>
        </trans-unit>
        <trans-unit id="3b30f23ee8df70004bc7ea9f6e2a4a9062358a30" translate="yes" xml:space="preserve">
          <source>String Decoder</source>
          <target state="translated">文字列デコーダ</target>
        </trans-unit>
        <trans-unit id="ebbdfebb0825717b9599cf0349bb44c6b92883f4" translate="yes" xml:space="preserve">
          <source>String decoder</source>
          <target state="translated">文字列デコーダ</target>
        </trans-unit>
        <trans-unit id="a0c723512dbec32f83b010f368c6364c82511c5c" translate="yes" xml:space="preserve">
          <source>String form paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename. Relative paths will be resolved relative to the current working directory as determined by calling &lt;code&gt;process.cwd()&lt;/code&gt;.</source>
          <target state="translated">文字列形式のパスは、絶対ファイル名または相対ファイル名を識別するUTF-8文字シーケンスとして解釈されます。相対パスは、 &lt;code&gt;process.cwd()&lt;/code&gt; を呼び出して決定された現在の作業ディレクトリを基準にして解決されます。</target>
        </trans-unit>
        <trans-unit id="a264b9520a414926563a8008327aa2443b60a879" translate="yes" xml:space="preserve">
          <source>String form paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename. Relative paths will be resolved relative to the current working directory as specified by &lt;code&gt;process.cwd()&lt;/code&gt;.</source>
          <target state="translated">文字列形式のパスは、絶対または相対ファイル名を識別するUTF-8文字シーケンスとして解釈されます。相対パスは、 &lt;code&gt;process.cwd()&lt;/code&gt; で指定された現在の作業ディレクトリを基準にして解決されます。</target>
        </trans-unit>
        <trans-unit id="999927cdae2c2db921310b0d8403d7e09a07c33d" translate="yes" xml:space="preserve">
          <source>StringDecoder</source>
          <target state="translated">StringDecoder</target>
        </trans-unit>
        <trans-unit id="a5e1f1f09fd7265612fef9637d5c89e63e1db61b" translate="yes" xml:space="preserve">
          <source>Strings passed in as an argument to &lt;code&gt;--eval&lt;/code&gt; or &lt;code&gt;--print&lt;/code&gt; (or &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;-p&lt;/code&gt;), or piped to &lt;code&gt;node&lt;/code&gt; via &lt;code&gt;STDIN&lt;/code&gt;, will be treated as ES modules when the &lt;code&gt;--input-type=module&lt;/code&gt; flag is set.</source>
          <target state="translated">&lt;code&gt;--eval&lt;/code&gt; または &lt;code&gt;--print&lt;/code&gt; （または &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;-p&lt;/code&gt; ）への引数として渡された文字列、または &lt;code&gt;STDIN&lt;/code&gt; を介して &lt;code&gt;node&lt;/code&gt; パイプされた &lt;code&gt;--input-type=module&lt;/code&gt; フラグが設定されている場合、ESモジュールとして扱われます。</target>
        </trans-unit>
        <trans-unit id="968ee43e29eab6ac2668529b861917d17b332c0b" translate="yes" xml:space="preserve">
          <source>Strings passed in as an argument to &lt;code&gt;--eval&lt;/code&gt; or &lt;code&gt;--print&lt;/code&gt;, or piped to &lt;code&gt;node&lt;/code&gt; via &lt;code&gt;STDIN&lt;/code&gt;, with the flag &lt;code&gt;--input-type=commonjs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--eval&lt;/code&gt; または &lt;code&gt;--print&lt;/code&gt; への引数として渡される文字列、またはフラグ &lt;code&gt;--input-type=commonjs&lt;/code&gt; を使用して &lt;code&gt;STDIN&lt;/code&gt; を介して &lt;code&gt;node&lt;/code&gt; パイプされる文字列。</target>
        </trans-unit>
        <trans-unit id="7d82ffc15c7cf5004024420746251c72a12b0e21" translate="yes" xml:space="preserve">
          <source>Strings passed in as an argument to &lt;code&gt;--eval&lt;/code&gt; or &lt;code&gt;--print&lt;/code&gt;, or piped to &lt;code&gt;node&lt;/code&gt; via &lt;code&gt;STDIN&lt;/code&gt;, with the flag &lt;code&gt;--input-type=module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--eval&lt;/code&gt; または &lt;code&gt;--print&lt;/code&gt; の引数として渡される文字列、またはフラグ &lt;code&gt;--input-type=module&lt;/code&gt; を使用して &lt;code&gt;STDIN&lt;/code&gt; を介して &lt;code&gt;node&lt;/code&gt; パイプされる文字列。</target>
        </trans-unit>
        <trans-unit id="c64b6d8ab6a3167af6b211df05198e555a8951eb" translate="yes" xml:space="preserve">
          <source>Structures</source>
          <target state="translated">Structures</target>
        </trans-unit>
        <trans-unit id="33ac208e5067b7fca7eeb58207fd96dbb234fda5" translate="yes" xml:space="preserve">
          <source>Submits an &lt;code&gt;ALTSVC&lt;/code&gt; frame (as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838&lt;/a&gt;) to the connected client.</source>
          <target state="translated">送信 &lt;code&gt;ALTSVC&lt;/code&gt; の（によって定義されるようにフレームを&lt;a href=&quot;https://tools.ietf.org/html/rfc7838&quot;&gt;RFC 7838&lt;/a&gt;に接続されたクライアントに）。</target>
        </trans-unit>
        <trans-unit id="849253d9dcc6f60218e8517c42914a5ed918e914" translate="yes" xml:space="preserve">
          <source>Submits an &lt;code&gt;ORIGIN&lt;/code&gt; frame (as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc8336&quot;&gt;RFC 8336&lt;/a&gt;) to the connected client to advertise the set of origins for which the server is capable of providing authoritative responses.</source>
          <target state="translated">送信 &lt;code&gt;ORIGIN&lt;/code&gt; の（によって定義されるようにフレームを&lt;a href=&quot;https://tools.ietf.org/html/rfc8336&quot;&gt;RFC 8336&lt;/a&gt;サーバが権限応答を提供することが可能であるために起源のセットを広告するために接続されたクライアントに）。</target>
        </trans-unit>
        <trans-unit id="e2007f9387549bdf5be4a61f3838014dec3354d7" translate="yes" xml:space="preserve">
          <source>Subscribes the &lt;code&gt;PerformanceObserver&lt;/code&gt; instance to notifications of new &lt;code&gt;PerformanceEntry&lt;/code&gt; instances identified by &lt;code&gt;options.entryTypes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.entryTypes&lt;/code&gt; で識別される新しい &lt;code&gt;PerformanceEntry&lt;/code&gt; インスタンスの通知に &lt;code&gt;PerformanceObserver&lt;/code&gt; インスタンスをサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="a45cec84871b431d3bc0126190074e7271f38e86" translate="yes" xml:space="preserve">
          <source>Subsequent connections should say &quot;Reused&quot;, for example:</source>
          <target state="translated">それ以降の接続は、例えば「再利用」と記載してください。</target>
        </trans-unit>
        <trans-unit id="21e2a1da9d25fc356bf318be6517bcb5315c876c" translate="yes" xml:space="preserve">
          <source>Such legacy code would need to be changed to pass a callback function to the &lt;a href=&quot;#dgram_socket_bind_options_callback&quot;&gt;&lt;code&gt;dgram.Socket#bind()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このようなレガシーコードは、コールバック関数を&lt;a href=&quot;#dgram_socket_bind_options_callback&quot;&gt; &lt;code&gt;dgram.Socket#bind()&lt;/code&gt; &lt;/a&gt;関数に渡すように変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="978189a6d3eb0a4389d965c38a5bb3e301222b2d" translate="yes" xml:space="preserve">
          <source>Superseded by &lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111に置き換え&lt;/a&gt;られました。</target>
        </trans-unit>
        <trans-unit id="5c563526b100ae5b638e5f63dd8e3119933c72d8" translate="yes" xml:space="preserve">
          <source>Support Elliptic Curve public key info.</source>
          <target state="translated">楕円曲線の公開鍵情報をサポートしています。</target>
        </trans-unit>
        <trans-unit id="fb260b101d752c89ebdd0340b7e4a5bc81c63347" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;napi_would_deadlock&lt;/code&gt; has been reverted.</source>
          <target state="translated">&lt;code&gt;napi_would_deadlock&lt;/code&gt; のサポートが元に戻りました。</target>
        </trans-unit>
        <trans-unit id="1c35422e543b86296d837746e8b2b200548eb799" translate="yes" xml:space="preserve">
          <source>Support for RSASSA-PSS and additional options was added.</source>
          <target state="translated">RSASSA-PSSに対応し、オプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="c7d3417b48080460981a7aa9e5f1eff092a692ac" translate="yes" xml:space="preserve">
          <source>Support for builtin module loading</source>
          <target state="translated">ビルトインモジュールのロードをサポート</target>
        </trans-unit>
        <trans-unit id="4fff61eace08616d3d19713e854b33df11301ceb" translate="yes" xml:space="preserve">
          <source>Support for detection of CommonJS named exports.</source>
          <target state="translated">CommonJSの名前付きエクスポートの検出をサポート。</target>
        </trans-unit>
        <trans-unit id="7617c435c9b5a4ef73c549592679c48b52e9c63e" translate="yes" xml:space="preserve">
          <source>Support for weak or compromised algorithms</source>
          <target state="translated">脆弱なアルゴリズムや危殆化したアルゴリズムのサポート</target>
        </trans-unit>
        <trans-unit id="6f84f945190a7db7aa7201fecf6216fdcb1925f3" translate="yes" xml:space="preserve">
          <source>Support is currently only provided for the root context and no guarantees are currently provided that &lt;code&gt;global.Array&lt;/code&gt; is indeed the default intrinsic reference. Code may break under this flag.</source>
          <target state="translated">現在、サポートはルートコンテキストに対してのみ提供されており、 &lt;code&gt;global.Array&lt;/code&gt; が実際にデフォルトの組み込み参照であるという保証は現在提供されていません。このフラグの下でコードが壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f22bfbbec7e4a2527c37b3efefa3b95f5e2a9c2b" translate="yes" xml:space="preserve">
          <source>Support the &lt;code&gt;allowHalfOpen&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;allowHalfOpen&lt;/code&gt; オプションをサポートします。</target>
        </trans-unit>
        <trans-unit id="9ddba0b62cea2db0edaeeaae31029565be1c5629" translate="yes" xml:space="preserve">
          <source>Support values exceeding the 32-bit unsigned integer range.</source>
          <target state="translated">32ビット符号なし整数の範囲を超える値をサポートします。</target>
        </trans-unit>
        <trans-unit id="53bec4975ffa57dce7d489fd566af637201112f3" translate="yes" xml:space="preserve">
          <source>Supported getaddrinfo flags</source>
          <target state="translated">サポートされている getaddrinfo フラグ</target>
        </trans-unit>
        <trans-unit id="187f064702c6e1ac0414eca4e53a547a50dffb4f" translate="yes" xml:space="preserve">
          <source>Supporting the &lt;code&gt;CONNECT&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;CONNECT&lt;/code&gt; メソッドのサポート</target>
        </trans-unit>
        <trans-unit id="e93477923276d31462069b65f8e802ce17033aaf" translate="yes" xml:space="preserve">
          <source>Supporting the CONNECT method</source>
          <target state="translated">CONNECTメソッドのサポート</target>
        </trans-unit>
        <trans-unit id="22e2e793084dda8016a751b35f4dab9784fef579" translate="yes" xml:space="preserve">
          <source>Symbol.asyncIterator support is no longer experimental.</source>
          <target state="translated">Symbol.asyncIterator のサポートは実験的ではなくなりました。</target>
        </trans-unit>
        <trans-unit id="a05d7d30bcb75d5f357d39bc90bc0ab832d56cb3" translate="yes" xml:space="preserve">
          <source>Symbols defined by the library will be made available for symbol resolution of subsequently loaded libraries.</source>
          <target state="translated">ライブラリで定義されたシンボルは、その後に読み込まれたライブラリのシンボル解決のために利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="54b98c877425f6a91a38f41c4fd57aa95e8b5467" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/close.2.html&quot;&gt;&lt;code&gt;close(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/close.2.html&quot;&gt; &lt;code&gt;close(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5603394319545e3ebb199447d030b7b2e0a5e5ff" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchmod.2.html&quot;&gt;&lt;code&gt;fchmod(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchmod.2.html&quot;&gt; &lt;code&gt;fchmod(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ad3d4bf25a943f14d92312b632da4e7e0d35d840" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt;&lt;code&gt;fchown(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fchown.2.html&quot;&gt; &lt;code&gt;fchown(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f4b4d270194625e7b141610ff1e518b1aac200ab" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt;&lt;code&gt;fdatasync(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fdatasync.2.html&quot;&gt; &lt;code&gt;fdatasync(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc39dd69b8256834e2fb98fb94182119266e1cc6" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt;&lt;code&gt;fstat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fstat.2.html&quot;&gt; &lt;code&gt;fstat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="44b7f718e15200946f4623cb4b4e33834eb6e7a9" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt;&lt;code&gt;fsync(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fsync.2.html&quot;&gt; &lt;code&gt;fsync(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="33c888ae72d3a8a0bb50ca36afa4781566c3ea80" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt;&lt;code&gt;lchown(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lchown.2.html&quot;&gt; &lt;code&gt;lchown(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e18926f8587a2af308112d7b0c8264f16748a840" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt;&lt;code&gt;link(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/link.2.html&quot;&gt; &lt;code&gt;link(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2f75f3e28a706c2c6bb9568227b94b6acf713aa2" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt;&lt;code&gt;lstat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/lstat.2.html&quot;&gt; &lt;code&gt;lstat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6b1b75f489a2cb3ba4ed80adbdbf5ca21bba1eb" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt;&lt;code&gt;readlink(2)&lt;/code&gt;&lt;/a&gt;. Returns the symbolic link's string value.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/readlink.2.html&quot;&gt; &lt;code&gt;readlink(2)&lt;/code&gt; &lt;/a&gt;。シンボリックリンクの文字列値を返します。</target>
        </trans-unit>
        <trans-unit id="5ffc41f4f1ee61edfc49a65b31715d78d7ffe20f" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt;&lt;code&gt;rename(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期の&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt; &lt;code&gt;rename(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="17d3d4c89e4d85e653eafb3177f41259ef26e22c" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt;&lt;code&gt;rmdir(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/rmdir.2.html&quot;&gt; &lt;code&gt;rmdir(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28ee7ed0e188ac9f7826666bd674ecefca61b2c1" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt;&lt;code&gt;stat(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/stat.2.html&quot;&gt; &lt;code&gt;stat(2)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ac126ea425f6a1c40039329050a0f61304da05ae" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt;&lt;code&gt;truncate(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;. A file descriptor can also be passed as the first argument. In this case, &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; is called.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/truncate.2.html&quot;&gt; &lt;code&gt;truncate(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。ファイル記述子を最初の引数として渡すこともできます。この場合、 &lt;code&gt;fs.ftruncateSync()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dac8f3ceb4b160d897767d30f7f2d623ed374f45" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt;&lt;code&gt;unlink(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man2/unlink.2.html&quot;&gt; &lt;code&gt;unlink(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="11fd402af8cf61e990e467e592b5310749a1fdd5" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt;&lt;code&gt;readdir(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt; &lt;code&gt;readdir(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2ed53469e7b073c0706036b264bf98d6a1d5c91b" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9b10e55ac57c52c342c6cc931a99b72c4550bed" translate="yes" xml:space="preserve">
          <source>Synchronous &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt;&lt;code&gt;lchmod(2)&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同期&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=lchmod&amp;amp;sektion=2&quot;&gt; &lt;code&gt;lchmod(2)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="65e85fe7c1541edcf47592ce96e8d466cd76d7e6" translate="yes" xml:space="preserve">
          <source>Synchronous Process Creation</source>
          <target state="translated">同期プロセス作成</target>
        </trans-unit>
        <trans-unit id="3aa591f2ffd2541a7931be332b8f775837b034e1" translate="yes" xml:space="preserve">
          <source>Synchronous example</source>
          <target state="translated">同期の例</target>
        </trans-unit>
        <trans-unit id="22af31950e3aac0ec29fc837af5e0d4306f9e625" translate="yes" xml:space="preserve">
          <source>Synchronous process creation</source>
          <target state="translated">同期プロセスの作成</target>
        </trans-unit>
        <trans-unit id="cd9ec333e1e72b40b26740fa15e34a3e6d550f69" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;a href=&quot;#crypto_crypto_randomfill_buffer_offset_size_callback&quot;&gt;&lt;code&gt;crypto.randomFill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_randomfill_buffer_offset_size_callback&quot;&gt; &lt;code&gt;crypto.randomFill()&lt;/code&gt; の&lt;/a&gt;同期バージョン。</target>
        </trans-unit>
        <trans-unit id="5dff00a5c04808239d9aada5c4ca18cb5e7ce49d" translate="yes" xml:space="preserve">
          <source>Synchronous version of &lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt;&lt;code&gt;fs.futimes()&lt;/code&gt;&lt;/a&gt;. Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_futimes_fd_atime_mtime_callback&quot;&gt; &lt;code&gt;fs.futimes()&lt;/code&gt; の&lt;/a&gt;同期バージョン。 &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="001890af4b81357646bdfb6c882059353a682a82" translate="yes" xml:space="preserve">
          <source>Synchronous writes avoid problems such as output written with &lt;code&gt;console.log()&lt;/code&gt; or &lt;code&gt;console.error()&lt;/code&gt; being unexpectedly interleaved, or not written at all if &lt;code&gt;process.exit()&lt;/code&gt; is called before an asynchronous write completes. See &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">同期書き込みは、 &lt;code&gt;console.log()&lt;/code&gt; または &lt;code&gt;console.error()&lt;/code&gt; で書き込まれた出力が予期せずインターリーブされる、または非同期書き込みが完了する前に &lt;code&gt;process.exit()&lt;/code&gt; が呼び出された場合にまったく書き込まれないなどの問題を回避します。詳細については、&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="706e7214b2ee4d1df2b9c103d93e993b58d94846" translate="yes" xml:space="preserve">
          <source>Synchronously append data to a file, creating the file if it does not yet exist. &lt;code&gt;data&lt;/code&gt; can be a string or a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データをファイルに同期的に追加し、まだ存在しない場合はファイルを作成します。 &lt;code&gt;data&lt;/code&gt; は文字列または&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="caf29ea2fd4cca23c3642744d5dcee4b64efd42f" translate="yes" xml:space="preserve">
          <source>Synchronously calls each of the listeners registered for the event named &lt;code&gt;eventName&lt;/code&gt;, in the order they were registered, passing the supplied arguments to each.</source>
          <target state="translated">&lt;code&gt;eventName&lt;/code&gt; という名前のイベントに登録された各リスナーを、登録された順に同期的に呼び出し、指定された引数をそれぞれに渡します。</target>
        </trans-unit>
        <trans-unit id="87ab9cfcea2b82a6a54ad0e2a1be518d6d0377f0" translate="yes" xml:space="preserve">
          <source>Synchronously changes owner and group of a file. Returns &lt;code&gt;undefined&lt;/code&gt;. This is the synchronous version of &lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.chown()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルの所有者とグループを同期的に変更します。 &lt;code&gt;undefined&lt;/code&gt; を返します。これは&lt;a href=&quot;#fs_fs_chown_path_uid_gid_callback&quot;&gt; &lt;code&gt;fs.chown()&lt;/code&gt; の&lt;/a&gt;同期バージョンです。</target>
        </trans-unit>
        <trans-unit id="514b012954faee1dfa37f7985254294568b5436f" translate="yes" xml:space="preserve">
          <source>Synchronously close the directory's underlying resource handle. Subsequent reads will result in errors.</source>
          <target state="translated">ディレクトリの基礎となるリソースハンドルを同期的に閉じます。それ以降の読み込みはエラーになります。</target>
        </trans-unit>
        <trans-unit id="d3dc8169080cad4aad57268fbcf6dd615144282b" translate="yes" xml:space="preserve">
          <source>Synchronously copies &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;. By default, &lt;code&gt;dest&lt;/code&gt; is overwritten if it already exists. Returns &lt;code&gt;undefined&lt;/code&gt;. Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; を &lt;code&gt;dest&lt;/code&gt; に同期的にコピーします。デフォルトでは、 &lt;code&gt;dest&lt;/code&gt; はすでに存在する場合は上書きされます。 &lt;code&gt;undefined&lt;/code&gt; を返します。Node.jsは、コピー操作のアトミック性を保証しません。宛先ファイルが書き込み用に開かれた後にエラーが発生した場合、Node.jsは宛先を削除しようとします。</target>
        </trans-unit>
        <trans-unit id="388aece1b9a99547d0d7b2a46bdee8534fefb5b1" translate="yes" xml:space="preserve">
          <source>Synchronously creates a directory. Returns &lt;code&gt;undefined&lt;/code&gt;, or if &lt;code&gt;recursive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the first directory path created. This is the synchronous version of &lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt;&lt;code&gt;fs.mkdir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期してディレクトリを作成します。 &lt;code&gt;undefined&lt;/code&gt; を返すか、 &lt;code&gt;recursive&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、最初に作成されたディレクトリパスを返します。これは&lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt; &lt;code&gt;fs.mkdir()&lt;/code&gt; の&lt;/a&gt;同期バージョンです。</target>
        </trans-unit>
        <trans-unit id="30f949ad2b29c685875d038d9ad67d8db2d3042f" translate="yes" xml:space="preserve">
          <source>Synchronously creates a directory. Returns &lt;code&gt;undefined&lt;/code&gt;. This is the synchronous version of &lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt;&lt;code&gt;fs.mkdir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期してディレクトリを作成します。 &lt;code&gt;undefined&lt;/code&gt; を返します。これは&lt;a href=&quot;#fs_fs_mkdir_path_options_callback&quot;&gt; &lt;code&gt;fs.mkdir()&lt;/code&gt; の&lt;/a&gt;同期バージョンです。</target>
        </trans-unit>
        <trans-unit id="efb1551c7456c7000addb0a9ba13620d56b33e8c" translate="yes" xml:space="preserve">
          <source>Synchronously open a directory. See &lt;a href=&quot;http://man7.org/linux/man-pages/man3/opendir.3.html&quot;&gt;&lt;code&gt;opendir(3)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期してディレクトリを開きます。&lt;a href=&quot;http://man7.org/linux/man-pages/man3/opendir.3.html&quot;&gt; &lt;code&gt;opendir(3)&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1bf4a49ef70d0d3ebf6d0d05133c5c9dc789aa7c" translate="yes" xml:space="preserve">
          <source>Synchronously read the next directory entry via &lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt;&lt;code&gt;readdir(3)&lt;/code&gt;&lt;/a&gt; as an &lt;a href=&quot;#fs_class_fs_dirent&quot;&gt;&lt;code&gt;fs.Dirent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man3/readdir.3.html&quot;&gt; &lt;code&gt;readdir(3)&lt;/code&gt; &lt;/a&gt;を介して次のディレクトリエントリを&lt;a href=&quot;#fs_class_fs_dirent&quot;&gt; &lt;code&gt;fs.Dirent&lt;/code&gt; &lt;/a&gt;として同期的に読み取ります。</target>
        </trans-unit>
        <trans-unit id="ebd0082c320fb7120ba6a5f0dadbf69f99bca345" translate="yes" xml:space="preserve">
          <source>Synchronously removes files and directories (modeled on the standard POSIX &lt;code&gt;rm&lt;/code&gt; utility). Returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">ファイルとディレクトリを同期的に削除します（標準のPOSIX &lt;code&gt;rm&lt;/code&gt; ユーティリティをモデルにしています）。 &lt;code&gt;undefined&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="f76562e0906091f860d2cdc0acfa15b0fc73ae1a" translate="yes" xml:space="preserve">
          <source>Synchronously tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; で指定されたファイルまたはディレクトリに対するユーザーの権限を同期的にテストします。 &lt;code&gt;mode&lt;/code&gt; 引数は、実行されるアクセシビリティチェックを指定するオプションの整数です。 &lt;code&gt;mode&lt;/code&gt; 可能な値については、&lt;a href=&quot;#fs_file_access_constants&quot;&gt;ファイルアクセス定数&lt;/a&gt;を確認してください。2つ以上の値のビット単位ORで構成されるマスクを作成することができます（例： &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="940c1442a766a0685af47df7f07c94e9017d4b1c" translate="yes" xml:space="preserve">
          <source>Synchronously tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File access constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 指定されたファイルまたはディレクトリに対するユーザーのアクセス許可を同期的にテストします。 &lt;code&gt;mode&lt;/code&gt; 引数は、実行されるアクセシビリティチェックを指定するオプションの整数です。 &lt;code&gt;mode&lt;/code&gt; 可能な値については、&lt;a href=&quot;#fs_file_access_constants&quot;&gt;ファイルアクセス定数&lt;/a&gt;を確認してください。2つ以上の値のビットごとのORで構成されるマスクを作成することができます（例： &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="614fbaf6f3d8aa1997a48d7bc9f7c4c3b4540998" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGABRT&lt;/code&gt;</source>
          <target state="translated">同義語 &lt;code&gt;SIGABRT&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d05d361c5d3f5f2c9904e5d32dcd2d56476fed0" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGIO&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SIGIO&lt;/code&gt; の同義語</target>
        </trans-unit>
        <trans-unit id="4f380113053857d9adf18e38f7f28450d82bfa95" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGPWR&lt;/code&gt;</source>
          <target state="translated">同義語 &lt;code&gt;SIGPWR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60d41a9e703a8da02013c9f0bc6fb1550a2b1d32" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;SIGSYS&lt;/code&gt;</source>
          <target state="translated">同義語 &lt;code&gt;SIGSYS&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="1c1e69b645db3a0139b0bc89f68507bb8ecc8a8c" translate="yes" xml:space="preserve">
          <source>Syntax check the script without executing.</source>
          <target state="translated">実行せずにスクリプトをチェックする構文</target>
        </trans-unit>
        <trans-unit id="de4af2ff6c0bd31526ce7f5f8ca08783d0cc5ed7" translate="yes" xml:space="preserve">
          <source>SyntaxError</source>
          <target state="translated">SyntaxError</target>
        </trans-unit>
        <trans-unit id="79c1d6466cbd55165c23ed590e3c50259baeceb4" translate="yes" xml:space="preserve">
          <source>System errors triggered by underlying operating system constraints such as attempting to open a file that does not exist or attempting to send data over a closed socket.</source>
          <target state="translated">存在しないファイルを開こうとしたり、閉じたソケットを介してデータを送信しようとしたりするなど、基本的なオペレーティングシステムの制約によって引き起こされるシステムエラー。</target>
        </trans-unit>
        <trans-unit id="47e68638ef3b94e3c34563e1179f97e827fb9bec" translate="yes" xml:space="preserve">
          <source>SystemError</source>
          <target state="translated">SystemError</target>
        </trans-unit>
        <trans-unit id="7ed3ab6b248830bb34b14b34d5f1d70744e12132" translate="yes" xml:space="preserve">
          <source>TCP sockets</source>
          <target state="translated">ティーシーピーソケット</target>
        </trans-unit>
        <trans-unit id="d3aadd31313f9a9074b62457e4b8d729d92dc3de" translate="yes" xml:space="preserve">
          <source>TLS (SSL)</source>
          <target state="translated">ティーエルエス</target>
        </trans-unit>
        <trans-unit id="60b9a03e9759773382869e7ecdccf1ff67839f45" translate="yes" xml:space="preserve">
          <source>TLS-PSK is only a good choice where means exist to securely share a key with every connecting machine, so it does not replace PKI (Public Key Infrastructure) for the majority of TLS uses. The TLS-PSK implementation in OpenSSL has seen many security flaws in recent years, mostly because it is used only by a minority of applications. Please consider all alternative solutions before switching to PSK ciphers. Upon generating PSK it is of critical importance to use sufficient entropy as discussed in &lt;a href=&quot;https://tools.ietf.org/html/rfc4086&quot;&gt;RFC 4086&lt;/a&gt;. Deriving a shared secret from a password or other low-entropy sources is not secure.</source>
          <target state="translated">TLS-PSKは、接続するすべてのマシンとキーを安全に共有する手段が存在する場合にのみ適切な選択であるため、TLSの大部分の使用でPKI（公開キーインフラストラクチャ）に取って代わることはありません。 OpenSSLでのTLS-PSKの実装は、主に少数のアプリケーションでのみ使用されているため、近年多くのセキュリティ上の欠陥が見られます。 PSK暗号に切り替える前に、すべての代替ソリューションを検討してください。 PSKを生成する際には、&lt;a href=&quot;https://tools.ietf.org/html/rfc4086&quot;&gt;RFC 4086で&lt;/a&gt;説明されているように、十分なエントロピーを使用することが非常に重要です。パスワードまたはその他の低エントロピーソースから共有シークレットを取得することは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="607a2d10811ddfca8283b638c26ece25517884d9" translate="yes" xml:space="preserve">
          <source>TLS-PSK support is available as an alternative to normal certificate-based authentication. It uses a pre-shared key instead of certificates to authenticate a TLS connection, providing mutual authentication. TLS-PSK and public key infrastructure are not mutually exclusive. Clients and servers can accommodate both, choosing either of them during the normal cipher negotiation step.</source>
          <target state="translated">TLS-PSK サポートは、通常の証明書ベースの認証に代わるものとして利用できます。TLS-PSK は証明書の代わりに事前に共有された鍵を使用して TLS 接続を認証し、相互認証を提供します。TLS-PSK と公開鍵インフラストラクチャは相互に排他的なものではありません。クライアントとサーバは、通常の暗号化ネゴシエーションの段階でどちらかを選択し、両方に対応することができます。</target>
        </trans-unit>
        <trans-unit id="e2c513359710071e9f304f670426d7854aaf2267" translate="yes" xml:space="preserve">
          <source>TLS/SSL</source>
          <target state="translated">TLS/SSL</target>
        </trans-unit>
        <trans-unit id="fe30f2453beadbea9e17d4259abd3bb4c69ba8e0" translate="yes" xml:space="preserve">
          <source>TLS/SSL Concepts</source>
          <target state="translated">TLS/SSLの概念</target>
        </trans-unit>
        <trans-unit id="1b25be60c3ecae4f8985993c9449f7b5b4c547f3" translate="yes" xml:space="preserve">
          <source>TLS/SSL concepts</source>
          <target state="translated">TLS/SSLのコンセプト</target>
        </trans-unit>
        <trans-unit id="ad92e12207ad9494936c8629c6bf39a6c5c799e5" translate="yes" xml:space="preserve">
          <source>TLSv1.3 does not support renegotiation.</source>
          <target state="translated">TLSv1.3 は再ネゴシエーションをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="e6b1c6a14b3bdb56139962cae23fd38d0a437fb1" translate="yes" xml:space="preserve">
          <source>TLSv1.3 support added.</source>
          <target state="translated">TLSv1.3のサポートを追加しました。</target>
        </trans-unit>
        <trans-unit id="8318d6da10486926e0a8f69e39f6a29153e435fc" translate="yes" xml:space="preserve">
          <source>TTY</source>
          <target state="translated">TTY</target>
        </trans-unit>
        <trans-unit id="45a352a1cd5e01ed7784d949d191cfee3aff8273" translate="yes" xml:space="preserve">
          <source>TTY keybindings</source>
          <target state="translated">TTYキーバインド</target>
        </trans-unit>
        <trans-unit id="a14aa46e32a3b69ad4422aaabfff5efd16d76e92" translate="yes" xml:space="preserve">
          <source>TTYs (Terminals): &lt;em&gt;asynchronous&lt;/em&gt; on Windows, &lt;em&gt;synchronous&lt;/em&gt; on POSIX</source>
          <target state="translated">TTYの（ターミナル）：&lt;em&gt;非同期&lt;/em&gt;、Windows上で&lt;em&gt;同期&lt;/em&gt; POSIX上</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="10cc80972b3b7b3bc0d6f88a871f489f6df934e7" translate="yes" xml:space="preserve">
          <source>Take caution when setting the &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; because the change affects &lt;em&gt;all&lt;/em&gt;&lt;code&gt;EventEmitter&lt;/code&gt; instances, including those created before the change is made. However, calling &lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt;&lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt;&lt;/a&gt; still has precedence over &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt;.</source>
          <target state="translated">変更が行われる前に作成されたものを含む&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスに変更が影響するため、 &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; を設定するときは注意してください。ただし、&lt;a href=&quot;#events_emitter_setmaxlisteners_n&quot;&gt; &lt;code&gt;emitter.setMaxListeners(n)&lt;/code&gt; の&lt;/a&gt;呼び出しは、依然として &lt;code&gt;EventEmitter.defaultMaxListeners&lt;/code&gt; よりも優先されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5cf9760f1796a44472ed2a2b443da483fbd7afbc" translate="yes" xml:space="preserve">
          <source>Takes a function following the common error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument, and returns a version that returns promises.</source>
          <target state="translated">一般的なエラーファーストコールバックスタイルに従う関数、つまり &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; コールバックを最後の引数として受け取り、promiseを返すバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="32db24d9bf8ce36a03b9817eec0f05540b3a0a17" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;async&lt;/code&gt; function (or a function that returns a &lt;code&gt;Promise&lt;/code&gt;) and returns a function following the error-first callback style, i.e. taking an &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; callback as the last argument. In the callback, the first argument will be the rejection reason (or &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;Promise&lt;/code&gt; resolved), and the second argument will be the resolved value.</source>
          <target state="translated">受け取り &lt;code&gt;async&lt;/code&gt; 関数（または関数が戻っていることを &lt;code&gt;Promise&lt;/code&gt; し、すなわち取って、エラーの最初のコールバックのスタイルを次の関数を返す） &lt;code&gt;(err, value) =&amp;gt; ...&lt;/code&gt; 最後の引数としてコールバック。コールバックでは、最初の引数は拒否理由（または &lt;code&gt;Promise&lt;/code&gt; が解決された場合は &lt;code&gt;null&lt;/code&gt; ）であり、2番目の引数は解決された値になります。</target>
        </trans-unit>
        <trans-unit id="7d54b5d8e8aa77fc6ce6677ac24c516b5da46028" translate="yes" xml:space="preserve">
          <source>Taking the earlier example, adding calls to &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt; would ensure that at most a single handle is valid throughout the execution of the loop:</source>
          <target state="translated">前の例では、&lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt;への呼び出しを追加すると、ループの実行全体で最大1つのハンドルが有効になることが保証されます。</target>
        </trans-unit>
        <trans-unit id="dd51a810606018ddf94cd16af005343caaa48e2c" translate="yes" xml:space="preserve">
          <source>Tells the kernel to join a multicast group at the given &lt;code&gt;multicastAddress&lt;/code&gt; and &lt;code&gt;multicastInterface&lt;/code&gt; using the &lt;code&gt;IP_ADD_MEMBERSHIP&lt;/code&gt; socket option. If the &lt;code&gt;multicastInterface&lt;/code&gt; argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call &lt;code&gt;addMembership&lt;/code&gt; multiple times, once per interface.</source>
          <target state="translated">&lt;code&gt;IP_ADD_MEMBERSHIP&lt;/code&gt; ソケットオプションを使用して、指定された &lt;code&gt;multicastAddress&lt;/code&gt; および &lt;code&gt;multicastInterface&lt;/code&gt; でマルチキャストグループに参加するようにカーネルに指示します。 &lt;code&gt;multicastInterface&lt;/code&gt; 引数が指定されていない場合、オペレーティングシステムは1つのインターフェイスを選択し、それにメンバーシップを追加します。使用可能なすべてのインターフェースにメンバーシップを追加するには、インターフェースごとに1回、 &lt;code&gt;addMembership&lt;/code&gt; を複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="8923e5b03b993f717fd3d38e626926dd6ccf6bdb" translate="yes" xml:space="preserve">
          <source>Tells the kernel to join a source-specific multicast channel at the given &lt;code&gt;sourceAddress&lt;/code&gt; and &lt;code&gt;groupAddress&lt;/code&gt;, using the &lt;code&gt;multicastInterface&lt;/code&gt; with the &lt;code&gt;IP_ADD_SOURCE_MEMBERSHIP&lt;/code&gt; socket option. If the &lt;code&gt;multicastInterface&lt;/code&gt; argument is not specified, the operating system will choose one interface and will add membership to it. To add membership to every available interface, call &lt;code&gt;socket.addSourceSpecificMembership()&lt;/code&gt; multiple times, once per interface.</source>
          <target state="translated">&lt;code&gt;IP_ADD_SOURCE_MEMBERSHIP&lt;/code&gt; ソケットオプションを指定した &lt;code&gt;multicastInterface&lt;/code&gt; を使用して、指定された &lt;code&gt;sourceAddress&lt;/code&gt; および &lt;code&gt;groupAddress&lt;/code&gt; で送信元固有のマルチキャストチャネルに参加するようにカーネルに指示します。 &lt;code&gt;multicastInterface&lt;/code&gt; 引数が指定されていない場合、オペレーティングシステムは1つのインターフェイスを選択し、それにメンバーシップを追加します。使用可能なすべてのインターフェースにメンバーシップを追加するには、 &lt;code&gt;socket.addSourceSpecificMembership()&lt;/code&gt; をインターフェースごとに1回、複数回呼び出します。</target>
        </trans-unit>
        <trans-unit id="68526cb3fb1e6211c4ac6b9eaf5494ac56cc4442" translate="yes" xml:space="preserve">
          <source>Template string specifying the filepath for the trace event data, it supports &lt;code&gt;${rotation}&lt;/code&gt; and &lt;code&gt;${pid}&lt;/code&gt;.</source>
          <target state="translated">トレースイベントデータのファイルパスを指定するテンプレート文字列で、 &lt;code&gt;${rotation}&lt;/code&gt; および &lt;code&gt;${pid}&lt;/code&gt; サポートします。</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="a2aec777fa0c378671997b287a782c6e4b1c8a21" translate="yes" xml:space="preserve">
          <source>Test in JavaScript by running:</source>
          <target state="translated">実行してJavaScriptでテストします。</target>
        </trans-unit>
        <trans-unit id="0aca118537d18c7e7d8980c89a0c419fa4ceca6a" translate="yes" xml:space="preserve">
          <source>Test it with:</source>
          <target state="translated">使ってテストしてみてください。</target>
        </trans-unit>
        <trans-unit id="57ab06e2fee2425b84ed4812cf6062520ce6f01a" translate="yes" xml:space="preserve">
          <source>Test this by using &lt;code&gt;telnet&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;telnet&lt;/code&gt; を使用してこれをテストします。</target>
        </trans-unit>
        <trans-unit id="cf3a0b9ac49cdb286e37c2aa858d35d24b131508" translate="yes" xml:space="preserve">
          <source>Test whether or not the given path exists by checking with the file system. Then call the &lt;code&gt;callback&lt;/code&gt; argument with either true or false:</source>
          <target state="translated">ファイルシステムをチェックして、指定されたパスが存在するかどうかをテストします。次に、trueまたはfalseで &lt;code&gt;callback&lt;/code&gt; 引数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="373f76c3b48e3efa4da67e53a0ad70970dd592e8" translate="yes" xml:space="preserve">
          <source>Tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File Access Constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; で指定されたファイルまたはディレクトリに対するユーザーの権限をテストします。 &lt;code&gt;mode&lt;/code&gt; 引数は、実行されるアクセシビリティチェックを指定するオプションの整数です。 &lt;code&gt;mode&lt;/code&gt; 可能な値については、&lt;a href=&quot;#fs_file_access_constants&quot;&gt;ファイルアクセス定数&lt;/a&gt;を確認してください。2つ以上の値のビット単位ORで構成されるマスクを作成することができます（例： &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="506cef29dacbbd3261617af379fb03091ef94fcb" translate="yes" xml:space="preserve">
          <source>Tests a user's permissions for the file or directory specified by &lt;code&gt;path&lt;/code&gt;. The &lt;code&gt;mode&lt;/code&gt; argument is an optional integer that specifies the accessibility checks to be performed. Check &lt;a href=&quot;#fs_file_access_constants&quot;&gt;File access constants&lt;/a&gt; for possible values of &lt;code&gt;mode&lt;/code&gt;. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g. &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 指定されたファイルまたはディレクトリに対するユーザーのアクセス許可をテストします。 &lt;code&gt;mode&lt;/code&gt; 引数は、実行されるアクセシビリティチェックを指定するオプションの整数です。 &lt;code&gt;mode&lt;/code&gt; 可能な値については、&lt;a href=&quot;#fs_file_access_constants&quot;&gt;ファイルアクセス定数&lt;/a&gt;を確認してください。2つ以上の値のビットごとのORで構成されるマスクを作成することができます（例： &lt;code&gt;fs.constants.W_OK | fs.constants.R_OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="30c798d1cba4352fa5aa1995447937b01d2c89d8" translate="yes" xml:space="preserve">
          <source>Tests for any deep inequality. Opposite of &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">深い不平等がないかテストします。&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; の&lt;/a&gt;反対です。</target>
        </trans-unit>
        <trans-unit id="cca6c7dab0d67fd704d887e9ca5c9c5c95a18254" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. &quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects are recursively evaluated also by the following rules.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; パラメータと &lt;code&gt;expected&lt;/code&gt; パラメータの間の深い同等性をテストします。「深い」同等性とは、子オブジェクトの列挙可能な「独自の」プロパティが、次のルールによっても再帰的に評価されることを意味します。</target>
        </trans-unit>
        <trans-unit id="9dd71746b3ea99569a2d24241a5052d08ebd5d84" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. Consider using &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt; instead. &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; can have potentially surprising results.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; パラメータと &lt;code&gt;expected&lt;/code&gt; パラメータの間の深い同等性をテストします。代わりに&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; の&lt;/a&gt;使用を検討してください。&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;は驚くべき結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="168cdc511ba97025e2b2208dfebde793334aa43e" translate="yes" xml:space="preserve">
          <source>Tests for deep equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters. Consider using &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt; instead. &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; can have surprising results.</source>
          <target state="translated">&lt;code&gt;actual&lt;/code&gt; パラメーターと &lt;code&gt;expected&lt;/code&gt; パラメーターの間の深い同等性をテストします。代わりに&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; の&lt;/a&gt;使用を検討してください。&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;は驚くべき結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="395ce90a87d755e27601a56cb1b664b84baea384" translate="yes" xml:space="preserve">
          <source>Tests for deep strict inequality. Opposite of &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">厳密な不平等をテストします。&lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepStrictEqual()&lt;/code&gt; の&lt;/a&gt;反対です。</target>
        </trans-unit>
        <trans-unit id="463cc035e99c394930e6645776f0a53b43c38377" translate="yes" xml:space="preserve">
          <source>Tests if &lt;code&gt;value&lt;/code&gt; is truthy. It is equivalent to &lt;code&gt;assert.equal(!!value, true, message)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が真実かどうかをテストします。 &lt;code&gt;assert.equal(!!value, true, message)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="2a4ea6c5211e7b80703161d41055ac764abd80da" translate="yes" xml:space="preserve">
          <source>Tests if input is an IP address. Returns &lt;code&gt;0&lt;/code&gt; for invalid strings, returns &lt;code&gt;4&lt;/code&gt; for IP version 4 addresses, and returns &lt;code&gt;6&lt;/code&gt; for IP version 6 addresses.</source>
          <target state="translated">入力がIPアドレスかどうかをテストします。無効な文字列の場合は &lt;code&gt;0&lt;/code&gt; を返し、IPバージョン4アドレスの場合は &lt;code&gt;4&lt;/code&gt; を返し、IPバージョン6アドレスの場合は &lt;code&gt;6&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="feefa8a364493389f53430a6de0b21850fee011d" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ).</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等価比較&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）を使用して、 &lt;code&gt;actual&lt;/code&gt; パラメーターと &lt;code&gt;expected&lt;/code&gt; パラメーターの間の浅く強制的な等価性をテストします。</target>
        </trans-unit>
        <trans-unit id="37fcfada0c99ac2e93bcf06e375dff5f58609c1b" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;==&lt;/code&gt; ). &lt;code&gt;NaN&lt;/code&gt; is special handled and treated as being identical in case both sides are &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等式比較&lt;/a&gt;（ &lt;code&gt;==&lt;/code&gt; ）を使用して、 &lt;code&gt;actual&lt;/code&gt; パラメーターと &lt;code&gt;expected&lt;/code&gt; パラメーターの間の浅い強制的な等式をテストします。 &lt;code&gt;NaN&lt;/code&gt; は特別に処理され、両側が &lt;code&gt;NaN&lt;/code&gt; の場合は同一として扱われます。</target>
        </trans-unit>
        <trans-unit id="44f7e9972b6e6f7c5298385f4b7873077939044b" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive inequality with the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;!=&lt;/code&gt; ).</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等値比較&lt;/a&gt;（ &lt;code&gt;!=&lt;/code&gt; ）を使用して、浅く強制的な不等式をテストします。</target>
        </trans-unit>
        <trans-unit id="bc3f6410d5607316bd205cba5976ea38773ea571" translate="yes" xml:space="preserve">
          <source>Tests shallow, coercive inequality with the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; (&lt;code&gt;!=&lt;/code&gt; ). &lt;code&gt;NaN&lt;/code&gt; is special handled and treated as being identical in case both sides are &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">Tests shallow, coercive inequality with the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; ( &lt;code&gt;!=&lt;/code&gt; ). &lt;code&gt;NaN&lt;/code&gt; is special handled and treated as being identical in case both sides are &lt;code&gt;NaN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fa3dfda75c4503246ff098aae7b36a9a376efbc" translate="yes" xml:space="preserve">
          <source>Tests strict equality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters as determined by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue Comparison&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue比較&lt;/a&gt;によって決定さ &lt;code&gt;expected&lt;/code&gt; た &lt;code&gt;actual&lt;/code&gt; パラメーターと期待されるパラメーターの間の厳密な等価性をテストします。</target>
        </trans-unit>
        <trans-unit id="c3ef22ea86f89b85e92603495ca3f1838f321b32" translate="yes" xml:space="preserve">
          <source>Tests strict inequality between the &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;expected&lt;/code&gt; parameters as determined by the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue Comparison&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevalue&quot;&gt;SameValue比較&lt;/a&gt;によって決定さ &lt;code&gt;expected&lt;/code&gt; た &lt;code&gt;actual&lt;/code&gt; パラメーターと期待されるパラメーターの間の厳密な不等式をテストします。</target>
        </trans-unit>
        <trans-unit id="840c7e38544dbd613fa0b1f9a59f6f627ea3dd88" translate="yes" xml:space="preserve">
          <source>TextDecoder</source>
          <target state="translated">TextDecoder</target>
        </trans-unit>
        <trans-unit id="b1ec439dd8ac6da12ff0821c5bfa7393b4881faa" translate="yes" xml:space="preserve">
          <source>TextEncoder</source>
          <target state="translated">TextEncoder</target>
        </trans-unit>
        <trans-unit id="c42248b8074b4f949d55e28e0d79c0c0d4a648dd" translate="yes" xml:space="preserve">
          <source>That is possible via explicit binding.</source>
          <target state="translated">それは明示的なバインディングを介して可能です。</target>
        </trans-unit>
        <trans-unit id="0b16cd002f41de26f1ea4e18f3c9e90c00d1246b" translate="yes" xml:space="preserve">
          <source>That is: 128K for &lt;code&gt;windowBits&lt;/code&gt; = 15 + 128K for &lt;code&gt;memLevel&lt;/code&gt; = 8 (default values) plus a few kilobytes for small objects.</source>
          <target state="translated">つまり、 &lt;code&gt;windowBits&lt;/code&gt; の場合は128K = 15 + &lt;code&gt;memLevel&lt;/code&gt; = 8の場合は128K （デフォルト値）と小さなオブジェクトの場合は数キロバイト。</target>
        </trans-unit>
        <trans-unit id="a68ade3fe43251a8bf4b61f8712e096777291c78" translate="yes" xml:space="preserve">
          <source>That's usually desired (it saves a TCP round-trip), but not when the first data is not sent until possibly much later. &lt;code&gt;request.flushHeaders()&lt;/code&gt; bypasses the optimization and kickstarts the request.</source>
          <target state="translated">これは通常望ましいことです（TCPラウンドトリップを節約します）が、最初のデータが送信されない場合は、おそらくかなり後であることはありません。 &lt;code&gt;request.flushHeaders()&lt;/code&gt; は最適化をバイパスし、リクエストをキックスタートします。</target>
        </trans-unit>
        <trans-unit id="2ebc326079e65f383e5f73a385a4c2437e971919" translate="yes" xml:space="preserve">
          <source>The &quot;(not locale-aware)&quot; designation denotes that the function carries out its operation just like the non-&lt;code&gt;Locale&lt;/code&gt; version of the function, if one exists. For example, under &lt;code&gt;none&lt;/code&gt; mode, &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;'s operation is identical to that of &lt;code&gt;Date.prototype.toString()&lt;/code&gt;.</source>
          <target state="translated">「（ロケ​​ールを認識しない）」の指定は、関数の非 &lt;code&gt;Locale&lt;/code&gt; バージョンが存在する場合、その関数が非ロケールバージョンと同じように動作することを示します。例えば、下 &lt;code&gt;none&lt;/code&gt; モード、 &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt; の動作と同じである &lt;code&gt;Date.prototype.toString()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac095a03ae1997aefcc713236808ca5097ddd1d7" translate="yes" xml:space="preserve">
          <source>The &quot;not recommended&quot; examples above check for accessibility and then use the file; the &quot;recommended&quot; examples are better because they use the file directly and handle the error, if any.</source>
          <target state="translated">上記の「推奨されない」例は、アクセシビリティをチェックしてからファイルを使用していますが、「推奨される」例は、ファイルを直接使用し、エラーがあればそれを処理するので、より良いです。</target>
        </trans-unit>
        <trans-unit id="6e811cd4964e5f70132f577a1acb4f7a72db2bab" translate="yes" xml:space="preserve">
          <source>The &quot;not recommended&quot; examples above check for existence and then use the file; the &quot;recommended&quot; examples are better because they use the file directly and handle the error, if any.</source>
          <target state="translated">上の「推奨されない」例は、存在をチェックしてからファイルを使用しますが、「推奨される」例は、ファイルを直接使用し、エラーがあればそれを処理するので、より良いです。</target>
        </trans-unit>
        <trans-unit id="94c8ce5178b6bb7d28badf9f2a4281414fb8f41e" translate="yes" xml:space="preserve">
          <source>The &quot;two modes&quot; of operation for a &lt;code&gt;Readable&lt;/code&gt; stream are a simplified abstraction for the more complicated internal state management that is happening within the &lt;code&gt;Readable&lt;/code&gt; stream implementation.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; ストリームの操作の「2つのモード」は、 &lt;code&gt;Readable&lt;/code&gt; ストリームの実装内で行われているより複雑な内部状態管理の簡略化された抽象化です。</target>
        </trans-unit>
        <trans-unit id="56aa934142cd588e17bf9c1e16e0d637af9ba820" translate="yes" xml:space="preserve">
          <source>The 3-digit HTTP response status code. E.G. &lt;code&gt;404&lt;/code&gt;.</source>
          <target state="translated">3桁のHTTP応答ステータスコード。EG &lt;code&gt;404&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48e656032fb575261b8d316d8062bd83e8216921" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object may emit an &lt;a href=&quot;#child_process_event_error&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event if the signal cannot be delivered. Sending a signal to a child process that has already exited is not an error but may have unforeseen consequences. Specifically, if the process identifier (PID) has been reassigned to another process, the signal will be delivered to that process instead which can have unexpected results.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;目的は、発光することができる&lt;a href=&quot;#child_process_event_error&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;信号が配信できない場合、イベントを。すでに終了した子プロセスにシグナルを送信してもエラーにはなりませんが、予期しない結果が生じる可能性があります。具体的には、プロセス識別子（PID）が別のプロセスに再割り当てされた場合、シグナルは代わりにそのプロセスに配信され、予期しない結果が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="40e3287737f4479f804d16c44337bd5db18657bc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; methods additionally allow for an optional &lt;code&gt;callback&lt;/code&gt; function to be specified that is invoked when the child process terminates.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;メソッドは、さらにオプションを可能にする &lt;code&gt;callback&lt;/code&gt; 場合、子プロセスが終了呼び出される指定する機能。</target>
        </trans-unit>
        <trans-unit id="657b6c299886316eee3bc58094bef1e2370f9d36" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; method spawns the child process asynchronously, without blocking the Node.js event loop. The &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt; function provides equivalent functionality in a synchronous manner that blocks the event loop until the spawned process either exits or is terminated.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;メソッドは、Node.jsのイベントループをブロックすることなく、非同期に子プロセスを生成します。&lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt; &lt;code&gt;child_process.spawnSync()&lt;/code&gt; &lt;/a&gt;関数は、ブロックがいずれかの出口または生成されたプロセスまで、イベントループが終了したことを同期的に同等の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="1688011690fb4378a7719266ac1063b2799fdb70" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; methods all follow the idiomatic asynchronous programming pattern typical of other Node.js APIs.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;メソッドは、他のすべてのNode.jsのAPIの一般的な慣用非同期プログラミングパターンに従います。</target>
        </trans-unit>
        <trans-unit id="182b836ee1769bfedc16b78015980cd0b36abc0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_execsync_command_options&quot;&gt;&lt;code&gt;child_process.execSync()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_child_process_execfilesync_file_args_options&quot;&gt;&lt;code&gt;child_process.execFileSync()&lt;/code&gt;&lt;/a&gt; methods are synchronous and will block the Node.js event loop, pausing execution of any additional code until the spawned process exits.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt; &lt;code&gt;child_process.spawnSync()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_execsync_command_options&quot;&gt; &lt;code&gt;child_process.execSync()&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#child_process_child_process_execfilesync_file_args_options&quot;&gt; &lt;code&gt;child_process.execFileSync()&lt;/code&gt; &lt;/a&gt;メソッドは、同期され、生成されたプロセスが終了するまで、追加のコードの実行を一時停止、Node.jsのイベントループをブロックします。</target>
        </trans-unit>
        <trans-unit id="b3a665070f0e5b8d887ba5e44bc0316e93d97deb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createcipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createCipher()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;Cipher&lt;/code&gt; instances. &lt;code&gt;Cipher&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createcipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createCipher()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Cipher&lt;/code&gt; インスタンス。 &lt;code&gt;Cipher&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="1d8f2ca3fcde3d31aafb5b8d15b5bf8726d59896" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createDecipher()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;Decipher&lt;/code&gt; instances. &lt;code&gt;Decipher&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createDecipher()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Decipher&lt;/code&gt; インスタンス。 &lt;code&gt;Decipher&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="60a0dc8a28700375d6bd094fcb58b82f89d22e4d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Hash&lt;/code&gt; instances. &lt;code&gt;Hash&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Hash&lt;/code&gt; インスタンス。 &lt;code&gt;Hash&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="272aeced5bc0e4813efac50b5c1bc84cdc6fe849" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createhmac_algorithm_key_options&quot;&gt;&lt;code&gt;crypto.createHmac()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Hmac&lt;/code&gt; instances. &lt;code&gt;Hmac&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createhmac_algorithm_key_options&quot;&gt; &lt;code&gt;crypto.createHmac()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;Hmac&lt;/code&gt; インスタンス。 &lt;code&gt;Hmac&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="d72bf2ca2aeb5175891eb19c6679170377973cd3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createsign_algorithm_options&quot;&gt;&lt;code&gt;crypto.createSign()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Sign&lt;/code&gt; instances. The argument is the string name of the hash function to use. &lt;code&gt;Sign&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createsign_algorithm_options&quot;&gt; &lt;code&gt;crypto.createSign()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用された &lt;code&gt;Sign&lt;/code&gt; インスタンスを。引数は、使用するハッシュ関数の文字列名です。 &lt;code&gt;Sign&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="2f487e5e25b84ed0186cf99140719bc8c0beea5d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_crypto_createverify_algorithm_options&quot;&gt;&lt;code&gt;crypto.createVerify()&lt;/code&gt;&lt;/a&gt; method is used to create &lt;code&gt;Verify&lt;/code&gt; instances. &lt;code&gt;Verify&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;a href=&quot;#crypto_crypto_createverify_algorithm_options&quot;&gt; &lt;code&gt;crypto.createVerify()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用されている &lt;code&gt;Verify&lt;/code&gt; インスタンス。 &lt;code&gt;new&lt;/code&gt; キーワードを使用してオブジェクトが直接作成されないことを &lt;code&gt;Verify&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b1a7a1032abf97db10645fe578c6a3a0c928005f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; method is now deprecated as its inclusion in the API is not useful. Either a previously stored private key should be set, which automatically generates the associated public key, or &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; should be called. The main drawback of using &lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; is that it can be used to put the ECDH key pair into an inconsistent state.</source>
          <target state="translated">&lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt; APIでの包含は有用ではないような方法は、現在推奨されていません。以前に保存された秘密鍵を設定して、関連する公開鍵を自動的に生成するか、&lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。&lt;a href=&quot;#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt;を使用することの主な欠点は、ECDHキーペアを不整合な状態にするために使用できることです。</target>
        </trans-unit>
        <trans-unit id="af1ea3bd65833e08bbbbcc0fac2f7e6540b19747" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt;&lt;code&gt;dns.setServers()&lt;/code&gt;&lt;/a&gt; method affects only &lt;a href=&quot;#dns_dns_resolve_hostname_rrtype_callback&quot;&gt;&lt;code&gt;dns.resolve()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;dns.resolve*()&lt;/code&gt; and &lt;a href=&quot;#dns_dns_reverse_ip_callback&quot;&gt;&lt;code&gt;dns.reverse()&lt;/code&gt;&lt;/a&gt; (and specifically &lt;em&gt;not&lt;/em&gt;&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#dns_dns_setservers_servers&quot;&gt; &lt;code&gt;dns.setServers()&lt;/code&gt; &lt;/a&gt;メソッドのみ影響&lt;a href=&quot;#dns_dns_resolve_hostname_rrtype_callback&quot;&gt; &lt;code&gt;dns.resolve()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;dns.resolve*()&lt;/code&gt; と&lt;a href=&quot;#dns_dns_reverse_ip_callback&quot;&gt; &lt;code&gt;dns.reverse()&lt;/code&gt; &lt;/a&gt;（具体的に&lt;em&gt;はない&lt;/em&gt;&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="a5eaca6b7dcaf2d83d377c33b354cdfe71f471cf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; object backing the request.</source>
          <target state="translated">&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;要求をバックアップ対象。</target>
        </trans-unit>
        <trans-unit id="8ad81abf7e88f6be9cbd14b6e2a603f4c0d4dea9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; object backing the response.</source>
          <target state="translated">&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;応答をバックアップ対象。</target>
        </trans-unit>
        <trans-unit id="a55f9b45e6e60de3065281239cb831e2bfae2a74" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; API defines a JavaScript class with constructor, static properties and methods, and instance properties and methods that correspond to the C++ class.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; の&lt;/a&gt; APIは、対応するC ++クラスへのコンストラクタ、静的プロパティとメソッド、およびインスタンスのプロパティとメソッドとJavaScriptのクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="23794a3cdf8807a3dc8d04944e8b307aeb2170fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#net_net_connect&quot;&gt;&lt;code&gt;net.connect()&lt;/code&gt;&lt;/a&gt; function is an alias to this function.</source>
          <target state="translated">&lt;a href=&quot;#net_net_connect&quot;&gt; &lt;code&gt;net.connect()&lt;/code&gt; &lt;/a&gt;関数は、この関数の別名です。</target>
        </trans-unit>
        <trans-unit id="9054c0876a59d6156e0d7bc81b47e17153fb7093" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event is from the &lt;code&gt;stream.Readable&lt;/code&gt; class. The &lt;code&gt;'end'&lt;/code&gt; event is emitted after all data has been output, which occurs after the callback in &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; has been called. In the case of an error, &lt;code&gt;'end'&lt;/code&gt; should not be emitted.</source>
          <target state="translated">The &lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt; event is from the &lt;code&gt;stream.Readable&lt;/code&gt; class. The &lt;code&gt;'end'&lt;/code&gt; event is emitted after all data has been output, which occurs after the callback in &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; &lt;/a&gt; has been called. In the case of an error, &lt;code&gt;'end'&lt;/code&gt; should not be emitted.</target>
        </trans-unit>
        <trans-unit id="81b4b6a978521cef7f07c53b8c5d3a6500dabb8b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; events are from the &lt;code&gt;stream.Writable&lt;/code&gt; and &lt;code&gt;stream.Readable&lt;/code&gt; classes, respectively. The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; is called and all chunks have been processed by &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream._transform()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;'end'&lt;/code&gt; event is emitted after all data has been output, which occurs after the callback in &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;のイベントがあるから &lt;code&gt;stream.Writable&lt;/code&gt; と &lt;code&gt;stream.Readable&lt;/code&gt; 、それぞれのクラス。&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;が呼び出され、すべてのチャンクが&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream._transform()&lt;/code&gt; &lt;/a&gt;によって処理された後、 &lt;code&gt;'finish'&lt;/code&gt; イベントが発行されます。 &lt;code&gt;'end'&lt;/code&gt; すべてのデータが中にコールバックした後に発生する出力された後、イベントが発せられる&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; が&lt;/a&gt;呼び出されました。</target>
        </trans-unit>
        <trans-unit id="9c75c1f6f327ad57f965891aabce70ed347646c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is from the &lt;code&gt;stream.Writable&lt;/code&gt; class. The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; is called and all chunks have been processed by &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream._transform()&lt;/code&gt;&lt;/a&gt;. In the case of an error, &lt;code&gt;'finish'&lt;/code&gt; should not be emitted.</source>
          <target state="translated">The &lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt; event is from the &lt;code&gt;stream.Writable&lt;/code&gt; class. The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt; is called and all chunks have been processed by &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream._transform()&lt;/code&gt; &lt;/a&gt;. In the case of an error, &lt;code&gt;'finish'&lt;/code&gt; should not be emitted.</target>
        </trans-unit>
        <trans-unit id="a91b62e06ce5ed810007ac4394a54ee2b2a2526f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method was advisory, rather than guaranteed. This meant that it was still necessary to be prepared to receive &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events &lt;em&gt;even when the stream was in a paused state&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt;メソッドは、保証ではなく、顧問でした。つまり&lt;em&gt;、ストリームが一時停止状態であっても、&lt;/em&gt;&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;イベントを受信する準備をする必要&lt;em&gt;がありました&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ea894ca0e3886dd506370426d384279c1f4c6ffe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">The &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</target>
        </trans-unit>
        <trans-unit id="00ef3a2a185dea6ac7cc3de21b4d4ec335893dc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method is never called.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="ea078fae0cc509318f581c1ffd530ada67fd8ed7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_event_close&quot;&gt;&lt;code&gt;'close'&lt;/code&gt; event&lt;/a&gt; will be emitted on both &lt;code&gt;MessagePort&lt;/code&gt; instances that are part of the channel.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_event_close&quot;&gt; &lt;code&gt;'close'&lt;/code&gt; イベントは&lt;/a&gt;両方に放出される &lt;code&gt;MessagePort&lt;/code&gt; のチャネルの一部であるインスタンス。</target>
        </trans-unit>
        <trans-unit id="2a562b02e59b86e28885161e100a090fa5e871e5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_worker_ismainthread&quot;&gt;&lt;code&gt;require('worker_threads').isMainThread&lt;/code&gt;&lt;/a&gt; property is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_worker_ismainthread&quot;&gt; &lt;code&gt;require('worker_threads').isMainThread&lt;/code&gt; &lt;/a&gt;プロパティは次のように設定されている &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b47ce78c8cdb1996966bbb7ad92caede8246ea0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#worker_threads_worker_parentport&quot;&gt;&lt;code&gt;require('worker_threads').parentPort&lt;/code&gt;&lt;/a&gt; message port is available.</source>
          <target state="translated">&lt;a href=&quot;#worker_threads_worker_parentport&quot;&gt; &lt;code&gt;require('worker_threads').parentPort&lt;/code&gt; &lt;/a&gt;メッセージポートが使用可能です。</target>
        </trans-unit>
        <trans-unit id="a0788405a7f0d1d62586e574567272093df3cb23" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt;&lt;code&gt;SlowBuffer&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;buffer#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt; &lt;code&gt;SlowBuffer&lt;/code&gt; の&lt;/a&gt;クラスが推奨されていません。代わりに&lt;a href=&quot;buffer#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="5bc46b5bae53b8f37b36dbf2aa697f4db050db03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt;&lt;code&gt;SlowBuffer&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;buffer#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The &lt;a href=&quot;buffer#buffer_class_slowbuffer&quot;&gt; &lt;code&gt;SlowBuffer&lt;/code&gt; &lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;buffer#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow(size)&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4a2d10b9b1ed99815980887ff9b6b63ad7fa368a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_force_fips&quot;&gt;&lt;code&gt;--force-fips&lt;/code&gt;&lt;/a&gt; command-line argument was used but there was an attempt to enable or disable FIPS mode in the &lt;code&gt;crypto&lt;/code&gt; module.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_force_fips&quot;&gt; &lt;code&gt;--force-fips&lt;/code&gt; &lt;/a&gt;コマンドライン引数を使用しますがでFIPSモードを有効または無効にする試みがあった &lt;code&gt;crypto&lt;/code&gt; モジュールが。</target>
        </trans-unit>
        <trans-unit id="e983a50c7e4bc0702b1c113981673fe3ac4bc071" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_icu_data_dir_file&quot;&gt;&lt;code&gt;--icu-data-dir&lt;/code&gt;&lt;/a&gt; CLI parameter:</source>
          <target state="translated">&lt;a href=&quot;cli#cli_icu_data_dir_file&quot;&gt; &lt;code&gt;--icu-data-dir&lt;/code&gt; &lt;/a&gt; CLIパラメータ：</target>
        </trans-unit>
        <trans-unit id="3269de477ec16db6d3e4e2e4ec9e89547e253b9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_node_icu_data_file&quot;&gt;&lt;code&gt;NODE_ICU_DATA&lt;/code&gt;&lt;/a&gt; environment variable:</source>
          <target state="translated">&lt;a href=&quot;cli#cli_node_icu_data_file&quot;&gt; &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; の&lt;/a&gt;環境変数：</target>
        </trans-unit>
        <trans-unit id="55cdbfc05e62c6d410e5122eb1c4b31915a547ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_trace_warnings&quot;&gt;&lt;code&gt;--trace-warnings&lt;/code&gt;&lt;/a&gt; command line flag can be used to display the stack trace for such warnings.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_trace_warnings&quot;&gt; &lt;code&gt;--trace-warnings&lt;/code&gt; &lt;/a&gt;コマンド・ライン・フラグは、警告のためにスタックトレースを表示するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2bf44bd028e461aaf6dae831d8d2ad37d84094ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli#cli_trace_warnings&quot;&gt;&lt;code&gt;--trace-warnings&lt;/code&gt;&lt;/a&gt; command-line flag can be used to display the stack trace for such warnings.</source>
          <target state="translated">The &lt;a href=&quot;cli#cli_trace_warnings&quot;&gt; &lt;code&gt;--trace-warnings&lt;/code&gt; &lt;/a&gt; command-line flag can be used to display the stack trace for such warnings.</target>
        </trans-unit>
        <trans-unit id="bf5cc0b37d8fefcbb53b715018d9c8c57743b787" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_crypto_default_encoding&quot;&gt;&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt;&lt;/a&gt; property is deprecated.</source>
          <target state="translated">&lt;a href=&quot;crypto#crypto_crypto_default_encoding&quot;&gt; &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; の&lt;/a&gt;プロパティが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="62412f82af2fabb1917c397d074f13965837ec0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_crypto_fips&quot;&gt;&lt;code&gt;crypto.fips&lt;/code&gt;&lt;/a&gt; property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;crypto#crypto_crypto_fips&quot;&gt; &lt;code&gt;crypto.fips&lt;/code&gt; &lt;/a&gt;プロパティが廃止されました。代わりに、 &lt;code&gt;crypto.setFips()&lt;/code&gt; および &lt;code&gt;crypto.getFips()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="b4d433d17fd0d11353c66c15c886e318a5f1dbe0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt;&lt;code&gt;ecdh.setPublicKey()&lt;/code&gt;&lt;/a&gt; method is now deprecated as its inclusion in the API is not useful.</source>
          <target state="translated">&lt;a href=&quot;crypto#crypto_ecdh_setpublickey_publickey_encoding&quot;&gt; &lt;code&gt;ecdh.setPublicKey()&lt;/code&gt; &lt;/a&gt; APIでの包含は有用ではないような方法は、現在推奨されていません。</target>
        </trans-unit>
        <trans-unit id="ee41a90e0557071196115e1f493139052b5d9488" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;crypto#crypto_legacy_api&quot;&gt;&lt;code&gt;crypto.Certificate()&lt;/code&gt; constructor&lt;/a&gt; is deprecated. Use &lt;a href=&quot;crypto#crypto_class_certificate&quot;&gt;static methods of &lt;code&gt;crypto.Certificate()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The &lt;a href=&quot;crypto#crypto_legacy_api&quot;&gt; &lt;code&gt;crypto.Certificate()&lt;/code&gt; constructor&lt;/a&gt; is deprecated. Use &lt;a href=&quot;crypto#crypto_class_certificate&quot;&gt;static methods of &lt;code&gt;crypto.Certificate()&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3ddb42db48b459691d26c606a371305e9962646c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module is deprecated and should not be used.</source>
          <target state="translated">&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールは廃止され、使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="6b715676783ff70f39d153dfbf49c8d7a8d95c6c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;events#events_eventemitter_listenercount_emitter_eventname&quot;&gt;&lt;code&gt;EventEmitter.listenerCount(emitter, eventName)&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;events#events_emitter_listenercount_eventname&quot;&gt;&lt;code&gt;emitter.listenerCount(eventName)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;events#events_eventemitter_listenercount_emitter_eventname&quot;&gt; &lt;code&gt;EventEmitter.listenerCount(emitter, eventName)&lt;/code&gt; &lt;/a&gt; APIが推奨されていません。代わりに、&lt;a href=&quot;events#events_emitter_listenercount_eventname&quot;&gt; &lt;code&gt;emitter.listenerCount(eventName)&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fa07cb5e56416635aa8094e13198b6fec918ea02" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_class_fs_dir&quot;&gt;&lt;code&gt;fs.Dir&lt;/code&gt;&lt;/a&gt; was previously closed.</source>
          <target state="translated">The &lt;a href=&quot;fs#fs_class_fs_dir&quot;&gt; &lt;code&gt;fs.Dir&lt;/code&gt; &lt;/a&gt; was previously closed.</target>
        </trans-unit>
        <trans-unit id="4787b47a4047863e2178c993d4ef966741994d96" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_exists_path_callback&quot;&gt;&lt;code&gt;fs.exists(path, callback)&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;fs#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_exists_path_callback&quot;&gt; &lt;code&gt;fs.exists(path, callback)&lt;/code&gt; &lt;/a&gt; APIは推奨されません。代わりに&lt;a href=&quot;fs#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;fs.stat()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;fs#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="5450f8e3e61962987f25b85a6df69634e3d21306" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchmod_path_mode_callback&quot;&gt;&lt;code&gt;fs.lchmod(path, mode, callback)&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchmod_path_mode_callback&quot;&gt; &lt;code&gt;fs.lchmod(path, mode, callback)&lt;/code&gt; &lt;/a&gt; APIが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="f4197c2b634ea325f5f0b8697daf943e117c2877" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchmodsync_path_mode&quot;&gt;&lt;code&gt;fs.lchmodSync(path, mode)&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchmodsync_path_mode&quot;&gt; &lt;code&gt;fs.lchmodSync(path, mode)&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="0ab933eb3e9ecab8394da97c6d83154c68804b34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchown_path_uid_gid_callback&quot;&gt;&lt;code&gt;fs.lchown(path, uid, gid, callback)&lt;/code&gt;&lt;/a&gt; API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchown_path_uid_gid_callback&quot;&gt; &lt;code&gt;fs.lchown(path, uid, gid, callback)&lt;/code&gt; &lt;/a&gt; APIは廃止されました。必要なサポートAPIがlibuvに追加されたため、非推奨は取り消されました。</target>
        </trans-unit>
        <trans-unit id="17547f204a4a8cd3dd8b5f1b43c67f63b8b73057" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_lchownsync_path_uid_gid&quot;&gt;&lt;code&gt;fs.lchownSync(path, uid, gid)&lt;/code&gt;&lt;/a&gt; API was deprecated. The deprecation was revoked because the requisite supporting APIs were added in libuv.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_lchownsync_path_uid_gid&quot;&gt; &lt;code&gt;fs.lchownSync(path, uid, gid)&lt;/code&gt; &lt;/a&gt; APIは廃止されました。必要なサポートAPIがlibuvに追加されたため、非推奨は取り消されました。</target>
        </trans-unit>
        <trans-unit id="c804325c82ccdd29bbeee83eb71644618ad1c016" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt;&lt;code&gt;fs.read()&lt;/code&gt;&lt;/a&gt; legacy &lt;code&gt;String&lt;/code&gt; interface is deprecated. Use the &lt;code&gt;Buffer&lt;/code&gt; API as mentioned in the documentation instead.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_read_fd_buffer_offset_length_position_callback&quot;&gt; &lt;code&gt;fs.read()&lt;/code&gt; &lt;/a&gt;レガシー &lt;code&gt;String&lt;/code&gt; インターフェースが廃止されました。代わりに、ドキュメントに記載されている &lt;code&gt;Buffer&lt;/code&gt; APIを使用してください。</target>
        </trans-unit>
        <trans-unit id="3d0b2e1271980488fd62bebefbbcafb3a8039b6b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;fs#fs_fs_readsync_fd_buffer_offset_length_position&quot;&gt;&lt;code&gt;fs.readSync()&lt;/code&gt;&lt;/a&gt; legacy &lt;code&gt;String&lt;/code&gt; interface is deprecated. Use the &lt;code&gt;Buffer&lt;/code&gt; API as mentioned in the documentation instead.</source>
          <target state="translated">&lt;a href=&quot;fs#fs_fs_readsync_fd_buffer_offset_length_position&quot;&gt; &lt;code&gt;fs.readSync()&lt;/code&gt; &lt;/a&gt;レガシー &lt;code&gt;String&lt;/code&gt; インターフェースが廃止されました。代わりに、ドキュメントに記載されている &lt;code&gt;Buffer&lt;/code&gt; APIを使用してください。</target>
        </trans-unit>
        <trans-unit id="7e0e15dd5c7ff4e12c91a264536fb48be906367c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; (or &lt;code&gt;nan&lt;/code&gt;) provide a set of tools that Addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the &lt;code&gt;nan&lt;/code&gt;&lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;examples&lt;/a&gt; for an illustration of how it can be used.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Node.js&lt;/a&gt;（または &lt;code&gt;nan&lt;/code&gt; ）のネイティブ抽象化は、アドオン開発者がV8とNode.jsの過去と将来のリリース間の互換性を保つために使用することが推奨される一連のツールを提供します。使用&lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;例&lt;/a&gt;については、 &lt;code&gt;nan&lt;/code&gt; の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1bc4a56b3bd323e26936df22b8642674c3aa00d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; (or &lt;code&gt;nan&lt;/code&gt;) provide a set of tools that addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the &lt;code&gt;nan&lt;/code&gt;&lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;examples&lt;/a&gt; for an illustration of how it can be used.</source>
          <target state="translated">The &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; (or &lt;code&gt;nan&lt;/code&gt; ) provide a set of tools that addon developers are recommended to use to keep compatibility between past and future releases of V8 and Node.js. See the &lt;code&gt;nan&lt;/code&gt; &lt;a href=&quot;https://github.com/nodejs/nan/tree/master/examples/&quot;&gt;examples&lt;/a&gt; for an illustration of how it can be used.</target>
        </trans-unit>
        <trans-unit id="ff6142bbed340504f3c10e7e9daa05404f12f48b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://nodejs.github.io/node-addon-examples/&quot;&gt;N-API Resource&lt;/a&gt; offers an excellent orientation and tips for developers just getting started with N-API and &lt;code&gt;node-addon-api&lt;/code&gt;.</source>
          <target state="translated">The &lt;a href=&quot;https://nodejs.github.io/node-addon-examples/&quot;&gt;N-API Resource&lt;/a&gt; offers an excellent orientation and tips for developers just getting started with N-API and &lt;code&gt;node-addon-api&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6d4615e7da1a5be9752109051385fe95c802bdc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; considers a handful of URL protocol schemes to be &lt;em&gt;special&lt;/em&gt; in terms of how they are parsed and serialized. When a URL is parsed using one of these special protocols, the &lt;code&gt;url.protocol&lt;/code&gt; property may be changed to another special protocol but cannot be changed to a non-special protocol, and vice versa.</source>
          <target state="translated">&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL標準&lt;/a&gt; URLプロトコルスキームの一握りがあることを考えて&lt;em&gt;、特別な&lt;/em&gt;彼らが解析され、どのように直列化されるかという点で。これらの特別なプロトコルの1つを使用してURLを解析する場合、 &lt;code&gt;url.protocol&lt;/code&gt; プロパティは別の特別なプロトコルに変更できますが、特別でないプロトコルに変更することはできず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="fd206683a8c090e699b1fa58c29c9efcca8e48d1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; uses a more selective and fine grained approach to selecting encoded characters than that used by the Legacy API.</source>
          <target state="translated">&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL標準は、&lt;/a&gt;レガシーAPIが使用するよりもエンコードされた文字を選択することにより選択し、きめの細かいアプローチを使用しています。</target>
        </trans-unit>
        <trans-unit id="c145134bbf712c2e7b8b2f2e5174f2f626bfc168" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt;&lt;code&gt;timeOrigin&lt;/code&gt;&lt;/a&gt; specifies the high resolution millisecond timestamp at which the current &lt;code&gt;node&lt;/code&gt; process began, measured in Unix time.</source>
          <target state="translated">&lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt; &lt;code&gt;timeOrigin&lt;/code&gt; は&lt;/a&gt;現在れる高解像度ミリ秒のタイムスタンプを指定する &lt;code&gt;node&lt;/code&gt; のUnix時間で測定プロセスが始まったが、。</target>
        </trans-unit>
        <trans-unit id="7d2adb934d58d4e06962a615ed42864be6eca7c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/full-icu&quot;&gt;full-icu&lt;/a&gt; npm module can greatly simplify ICU data installation by detecting the ICU version of the running &lt;code&gt;node&lt;/code&gt; executable and downloading the appropriate data file. After installing the module through &lt;code&gt;npm i full-icu&lt;/code&gt;, the data file will be available at &lt;code&gt;./node_modules/full-icu&lt;/code&gt;. This path can be then passed either to &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; or &lt;code&gt;--icu-data-dir&lt;/code&gt; as shown above to enable full &lt;code&gt;Intl&lt;/code&gt; support.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/full-icu&quot;&gt;フルICU&lt;/a&gt; NPMモジュール実行中のICUバージョン検出することによって大幅に簡素化ICUデータインストールすることができる &lt;code&gt;node&lt;/code&gt; 実行可能ファイルを適切なデータ・ファイルをダウンロードします。 &lt;code&gt;npm i full-icu&lt;/code&gt; を介してモジュールをインストールすると、データファイルは &lt;code&gt;./node_modules/full-icu&lt;/code&gt; にあります。次に、このパスを上記のように &lt;code&gt;NODE_ICU_DATA&lt;/code&gt; または &lt;code&gt;--icu-data-dir&lt;/code&gt; に渡して、完全な &lt;code&gt;Intl&lt;/code&gt; サポートを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="416895945590576bea45ae4f6c939de8d5ff3cfb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;modules#modules_require_extensions&quot;&gt;&lt;code&gt;require.extensions&lt;/code&gt;&lt;/a&gt; property is deprecated.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_require_extensions&quot;&gt; &lt;code&gt;require.extensions&lt;/code&gt; の&lt;/a&gt;プロパティが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="f57857361da91519c1768f3f7d53e717a06f8e5c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; object associated with the connection.</source>
          <target state="translated">&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; の&lt;/a&gt;接続に関連付けられているオブジェクト。</target>
        </trans-unit>
        <trans-unit id="24877f198cc1c87a0e4b125d95b2a45703e83804" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt; method was called when a &lt;code&gt;net.Server&lt;/code&gt; was not running. This applies to all instances of &lt;code&gt;net.Server&lt;/code&gt;, including HTTP, HTTPS, and HTTP/2 &lt;code&gt;Server&lt;/code&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;net#net_server_close_callback&quot;&gt; &lt;code&gt;server.close()&lt;/code&gt; &lt;/a&gt;ときにメソッドが呼び出された &lt;code&gt;net.Server&lt;/code&gt; が実行されていませんでした。これは、HTTP、HTTPS、およびHTTP / 2 &lt;code&gt;Server&lt;/code&gt; インスタンスを含む &lt;code&gt;net.Server&lt;/code&gt; のすべてのインスタンスに適用されます。</target>
        </trans-unit>
        <trans-unit id="915652e40670b66703d29e0c38256d973f8431d3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_connections&quot;&gt;&lt;code&gt;Server.connections&lt;/code&gt;&lt;/a&gt; property is deprecated. Please use the &lt;a href=&quot;net#net_server_getconnections_callback&quot;&gt;&lt;code&gt;Server.getConnections()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">&lt;a href=&quot;net#net_server_connections&quot;&gt; &lt;code&gt;Server.connections&lt;/code&gt; &lt;/a&gt;プロパティが廃止されました。代わりに、&lt;a href=&quot;net#net_server_getconnections_callback&quot;&gt; &lt;code&gt;Server.getConnections()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="6f265d2883e4f676e4cd3c41d8c488642a4b375b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;net#net_server_listen&quot;&gt;&lt;code&gt;server.listen()&lt;/code&gt;&lt;/a&gt; method was called while a &lt;code&gt;net.Server&lt;/code&gt; was already listening. This applies to all instances of &lt;code&gt;net.Server&lt;/code&gt;, including HTTP, HTTPS, and HTTP/2 &lt;code&gt;Server&lt;/code&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;net#net_server_listen&quot;&gt; &lt;code&gt;server.listen()&lt;/code&gt; &lt;/a&gt;状態でメソッドを呼び出した &lt;code&gt;net.Server&lt;/code&gt; はすでに聞いていました。これは、HTTP、HTTPS、およびHTTP / 2 &lt;code&gt;Server&lt;/code&gt; インスタンスを含む &lt;code&gt;net.Server&lt;/code&gt; のすべてのインスタンスに適用されます。</target>
        </trans-unit>
        <trans-unit id="253d6a8397e34f584d1c9745f688c4be697f41d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;perf_hooks&quot;&gt;Performance Observer&lt;/a&gt; API can be used to collect basic performance metrics for each &lt;code&gt;Http2Session&lt;/code&gt; and &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;perf_hooks&quot;&gt;パフォーマンスオブザーバーの&lt;/a&gt; APIは、それぞれのための基本的なパフォーマンスメトリックを収集するために使用することができ &lt;code&gt;Http2Session&lt;/code&gt; と &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスを。</target>
        </trans-unit>
        <trans-unit id="59c7a2c5551f71a682899eef7cf74848de899dae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt;&lt;code&gt;Writable&lt;/code&gt; streams are never closed until the Node.js process exits, regardless of the specified options.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Writable&lt;/code&gt; ストリームは、指定されたオプションに関係なく、Node.jsのプロセスが終了するまで閉じされることはありません。</target>
        </trans-unit>
        <trans-unit id="3151c4db34282a1b8e07fe931c2f1458a047f718" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; may be redirected by the parent thread.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; は&lt;/a&gt;親スレッドによってリダイレクトすることができます。</target>
        </trans-unit>
        <trans-unit id="a0fc212c8a2ea41febc29bc21f4ef2413d4927ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;punycode&quot;&gt;&lt;code&gt;punycode&lt;/code&gt;&lt;/a&gt; module is deprecated. Please use a userland alternative instead.</source>
          <target state="translated">&lt;a href=&quot;punycode&quot;&gt; &lt;code&gt;punycode&lt;/code&gt; &lt;/a&gt;モジュールが推奨されていません。代わりにユーザーランドの代替を使用してください。</target>
        </trans-unit>
        <trans-unit id="6431daf4d0142dfe7df617e9d6645252b47e70c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; methods each return objects that represent the scheduled timers. These can be used to cancel the timer and prevent it from triggering.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;、と&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;メソッドスケジュールタイマーを表す各リターンオブジェクト。これらを使用して、タイマーをキャンセルし、トリガーされないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="f0b1ce5dcc2782ce2b6b05b8c6a481feb1f34cdb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_cryptostream&quot;&gt;&lt;code&gt;tls.CryptoStream&lt;/code&gt;&lt;/a&gt; class was removed. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;tls#tls_class_cryptostream&quot;&gt; &lt;code&gt;tls.CryptoStream&lt;/code&gt; の&lt;/a&gt;クラスは削除されました。代わりに&lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="67a4449b6148b1eda8420ac93777441f9f6ce373" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_securepair&quot;&gt;&lt;code&gt;tls.SecurePair&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;tls#tls_class_securepair&quot;&gt; &lt;code&gt;tls.SecurePair&lt;/code&gt; の&lt;/a&gt;クラスが推奨されていません。代わりに&lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="051a1cb749f4eaec31647fcc0fa62e07ea695c1e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_tls_cryptostream&quot;&gt;&lt;code&gt;tls.CryptoStream&lt;/code&gt;&lt;/a&gt; class was removed. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The &lt;a href=&quot;tls#tls_class_tls_cryptostream&quot;&gt; &lt;code&gt;tls.CryptoStream&lt;/code&gt; &lt;/a&gt; class was removed. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4273368d1e843669067efd9d4141de26d937e4b9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tls#tls_class_tls_securepair&quot;&gt;&lt;code&gt;tls.SecurePair&lt;/code&gt;&lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The &lt;a href=&quot;tls#tls_class_tls_securepair&quot;&gt; &lt;code&gt;tls.SecurePair&lt;/code&gt; &lt;/a&gt; class is deprecated. Please use &lt;a href=&quot;tls#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ca41300a47e657b9bac3334f3cc7b04056458915" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;tracing&quot;&gt;&lt;code&gt;trace_events&lt;/code&gt;&lt;/a&gt; module is not supported.</source>
          <target state="translated">&lt;a href=&quot;tracing&quot;&gt; &lt;code&gt;trace_events&lt;/code&gt; &lt;/a&gt;モジュールはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="bfb5ba2ace2f4a0028e1da1ece0bf9daee144b06" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;url#url_legacy_url_api&quot;&gt;Legacy URL API&lt;/a&gt; is deprecated. This includes &lt;a href=&quot;url#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;url#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;url#url_url_resolve_from_to&quot;&gt;&lt;code&gt;url.resolve()&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;url#url_legacy_urlobject&quot;&gt;legacy &lt;code&gt;urlObject&lt;/code&gt;&lt;/a&gt;. Please use the &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL API&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;url#url_legacy_url_api&quot;&gt;レガシーURL APIが&lt;/a&gt;推奨されていません。これには、&lt;a href=&quot;url#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;url#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;url#url_url_resolve_from_to&quot;&gt; &lt;code&gt;url.resolve()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;url#url_legacy_urlobject&quot;&gt;従来の &lt;code&gt;urlObject&lt;/code&gt; が含まれ&lt;/a&gt;ます。代わりに&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL APIを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d0bb3959cb2b9ede93d359620e31194deb615b69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URL parser&lt;/a&gt;'s &lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalized_domain_name&quot;&gt;internationalized domain names&lt;/a&gt; (IDNs) support</source>
          <target state="translated">&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;WHATWG URLパーサ&lt;/a&gt;の&lt;a href=&quot;https://en.wikipedia.org/wiki/Internationalized_domain_name&quot;&gt;国際化ドメイン名&lt;/a&gt;（IDNを）サポート</target>
        </trans-unit>
        <trans-unit id="bad9bfd66bb55ba2235dd85e59e1613b40fb48ee" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_extend_target_source&quot;&gt;&lt;code&gt;util._extend()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_extend_target_source&quot;&gt; &lt;code&gt;util._extend()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="24fb8e08f0115ee31b604e3d9cb707532a7f3d68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isarray_object&quot;&gt;&lt;code&gt;util.isArray()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;code&gt;Array.isArray()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isarray_object&quot;&gt; &lt;code&gt;util.isArray()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。代わりに &lt;code&gt;Array.isArray()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3e357fd30970802fa574d6b5b018c648beb3398d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isboolean_object&quot;&gt;&lt;code&gt;util.isBoolean()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isboolean_object&quot;&gt; &lt;code&gt;util.isBoolean()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="e6acacafcb035b94942a2a97144ad31539c3f91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt;&lt;code&gt;util.isBuffer()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;buffer#buffer_class_method_buffer_isbuffer_obj&quot;&gt;&lt;code&gt;Buffer.isBuffer()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt; &lt;code&gt;util.isBuffer()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。代わりに&lt;a href=&quot;buffer#buffer_class_method_buffer_isbuffer_obj&quot;&gt; &lt;code&gt;Buffer.isBuffer()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="85265f55b706d54559e8e05e29ba605a38b4e543" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt;&lt;code&gt;util.isBuffer()&lt;/code&gt;&lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;buffer#buffer_static_method_buffer_isbuffer_obj&quot;&gt;&lt;code&gt;Buffer.isBuffer()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">The &lt;a href=&quot;util#util_util_isbuffer_object&quot;&gt; &lt;code&gt;util.isBuffer()&lt;/code&gt; &lt;/a&gt; API is deprecated. Please use &lt;a href=&quot;buffer#buffer_static_method_buffer_isbuffer_obj&quot;&gt; &lt;code&gt;Buffer.isBuffer()&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="1fadb3df5f078ded7af9eb07eb0540836ed20330" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isdate_object&quot;&gt;&lt;code&gt;util.isDate()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isdate_object&quot;&gt; &lt;code&gt;util.isDate()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="cba186e269ab30db0f4997204ac2665f30745036" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_iserror_object&quot;&gt;&lt;code&gt;util.isError()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_iserror_object&quot;&gt; &lt;code&gt;util.isError()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="3eae527fa2790271252e26061067d5b6be5eba03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isfunction_object&quot;&gt;&lt;code&gt;util.isFunction()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isfunction_object&quot;&gt; &lt;code&gt;util.isFunction()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="a70e6c3de90a6ac2102583f433feed90cb85843a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnull_object&quot;&gt;&lt;code&gt;util.isNull()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isnull_object&quot;&gt; &lt;code&gt;util.isNull()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="26b9c813be7a79f319a8271e4f548a90e22e1c86" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnullorundefined_object&quot;&gt;&lt;code&gt;util.isNullOrUndefined()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isnullorundefined_object&quot;&gt; &lt;code&gt;util.isNullOrUndefined()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="f6505ee51314d52f61c0c4e024960bccd690bc39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isnumber_object&quot;&gt;&lt;code&gt;util.isNumber()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isnumber_object&quot;&gt; &lt;code&gt;util.isNumber()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="fc675f14e28a144b49f3304e6cc66846864e1ffb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isobject_object&quot;&gt;&lt;code&gt;util.isObject()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isobject_object&quot;&gt; &lt;code&gt;util.isObject()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="1eea74d5193199e9a450d57d153735b76a2b3466" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isprimitive_object&quot;&gt;&lt;code&gt;util.isPrimitive()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isprimitive_object&quot;&gt; &lt;code&gt;util.isPrimitive()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="85fb68081b5c8745039db57d4cf2885c55d9fb26" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isregexp_object&quot;&gt;&lt;code&gt;util.isRegExp()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isregexp_object&quot;&gt; &lt;code&gt;util.isRegExp()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="3ef6a66e04fa8965d8501d2c259ea2dca7cf679c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isstring_object&quot;&gt;&lt;code&gt;util.isString()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isstring_object&quot;&gt; &lt;code&gt;util.isString()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="6ef8b7b760bc341d4a2aba646dd105a36af4be18" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_issymbol_object&quot;&gt;&lt;code&gt;util.isSymbol()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_issymbol_object&quot;&gt; &lt;code&gt;util.isSymbol()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="bda29f3bc4445a30ae931de9d8ecc252ad7751eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_isundefined_object&quot;&gt;&lt;code&gt;util.isUndefined()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_isundefined_object&quot;&gt; &lt;code&gt;util.isUndefined()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="1a5825539b9e279df51e00a04c9ffe0d213f05a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;util#util_util_log_string&quot;&gt;&lt;code&gt;util.log()&lt;/code&gt;&lt;/a&gt; API is deprecated.</source>
          <target state="translated">&lt;a href=&quot;util#util_util_log_string&quot;&gt; &lt;code&gt;util.log()&lt;/code&gt; &lt;/a&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="1ae316081841cbae85e514ff3e35cb1804302a11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;main&quot;&lt;/code&gt; field can point to exactly one file, regardless of whether the package is referenced via &lt;code&gt;require&lt;/code&gt; (in a CommonJS context) or &lt;code&gt;import&lt;/code&gt; (in an ES module context). Package authors who want to publish a package to be used in both contexts can do so by setting &lt;code&gt;&quot;main&quot;&lt;/code&gt; to point to the CommonJS entry point and informing the package&amp;rsquo;s users of the path to the ES module entry point. Such a package would be accessible like &lt;code&gt;require('pkg')&lt;/code&gt; and &lt;code&gt;import 'pkg/module.mjs'&lt;/code&gt;. Alternatively the package &lt;code&gt;&quot;main&quot;&lt;/code&gt; could point to the ES module entry point and legacy users could be informed of the CommonJS entry point path, e.g. &lt;code&gt;require('pkg/commonjs')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;main&quot;&lt;/code&gt; フィールドに関係なくパッケージを介して参照されているか否かを、正確に一つのファイルを指すことができる &lt;code&gt;require&lt;/code&gt; （CommonJSコンテキストで）または &lt;code&gt;import&lt;/code&gt; （ESモジュールコンテキストで）。両方のコンテキストで使用されるパッケージを公開するパッケージ作成者は、 &lt;code&gt;&quot;main&quot;&lt;/code&gt; をCommonJSエントリポイントを指すように設定し、ESモジュールエントリポイントへのパスをパッケージのユーザーに通知することで、これを行うことができます。そのようなパッケージは &lt;code&gt;require('pkg')&lt;/code&gt; や &lt;code&gt;import 'pkg/module.mjs'&lt;/code&gt; のようにアクセスできます。あるいは、パッケージ &lt;code&gt;&quot;main&quot;&lt;/code&gt; がESモジュールのエントリポイントをポイントし、レガシーユーザーにCommonJSエントリポイントパスを通知することもできます。例： &lt;code&gt;require('pkg/commonjs')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72dca3a20e139a37ac97b2c31b0f300dc7f4ad7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%c&lt;/code&gt; specifier is ignored now.</source>
          <target state="translated">The &lt;code&gt;%c&lt;/code&gt; specifier is ignored now.</target>
        </trans-unit>
        <trans-unit id="61c9ebe3c11e206914190083d08bd0af4fef8102" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%d&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; specifiers now support BigInt.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; のと &lt;code&gt;%i&lt;/code&gt; 指定子は今のBigIntをサポートしています。</target>
        </trans-unit>
        <trans-unit id="7ea800961e1445a983637a3fa0d8d83a67bc4be6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%f&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; specifiers now support Symbols properly.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; は、 &lt;code&gt;%f&lt;/code&gt; および &lt;code&gt;%i&lt;/code&gt; 正しく記号をサポートしてい指定子。</target>
        </trans-unit>
        <trans-unit id="24aed4099e7c845ded6fe13351fadb51a5d791de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; and &lt;code&gt;%O&lt;/code&gt; specifiers are supported now.</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; および &lt;code&gt;%O&lt;/code&gt; 指定子がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4e831b601d6d2d5d9f79cd2a24fcde96c59f5781" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; specifier's &lt;code&gt;depth&lt;/code&gt; has default depth of 4 again.</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; 指定子の &lt;code&gt;depth&lt;/code&gt; 再び4のデフォルトの深さを有しています。</target>
        </trans-unit>
        <trans-unit id="ea86e9d20de063b4c7fd031b6c0ac213659ff329" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%o&lt;/code&gt; specifier's &lt;code&gt;depth&lt;/code&gt; option will now fall back to the default depth.</source>
          <target state="translated">&lt;code&gt;%o&lt;/code&gt; 指定子の &lt;code&gt;depth&lt;/code&gt; オプションは、デフォルトの深さにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="4d5b0636a67f459e393ebbe414afd5f20c75036c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ERR_UNKNOWN_BUILTIN_MODULE'&lt;/code&gt; error code is used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.</source>
          <target state="translated">&lt;code&gt;'ERR_UNKNOWN_BUILTIN_MODULE'&lt;/code&gt; エラーコードは、典型的には、ユーザコードによってトリガされるべきではない内部のNode.jsエラーの特定の種類を識別するために使用されます。このエラーのインスタンスは、Node.jsバイナリ自体の内部バグを示しています。</target>
        </trans-unit>
        <trans-unit id="11ab7ececfa28aafc4aa19ae6385b7c2b8a0cd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'OCSPRequest'&lt;/code&gt; event is emitted when the client sends a certificate status request. The listener callback is passed three arguments when called:</source>
          <target state="translated">&lt;code&gt;'OCSPRequest'&lt;/code&gt; クライアントが証明書の状態要求を送信したときにイベントが放出されます。リスナーコールバックには、呼び出されたときに3つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="8bfe430c226f0a9e2efdb6fcc488124fa32e49cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'OCSPResponse'&lt;/code&gt; event is emitted if the &lt;code&gt;requestOCSP&lt;/code&gt; option was set when the &lt;code&gt;tls.TLSSocket&lt;/code&gt; was created and an OCSP response has been received. The listener callback is passed a single argument when called:</source>
          <target state="translated">&lt;code&gt;'OCSPResponse'&lt;/code&gt; 場合、イベントが発せられる &lt;code&gt;requestOCSP&lt;/code&gt; の際にオプションが設定された &lt;code&gt;tls.TLSSocket&lt;/code&gt; が作成され、OCSP応答が受信されています。リスナーコールバックには、呼び出されたときに単一の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="d3e25a4d64e0a457f91b49f6a798068c9d2d9beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGCONT'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; supported on Windows.</source>
          <target state="translated">&lt;code&gt;'SIGCONT'&lt;/code&gt; イベントがされて&lt;em&gt;いない&lt;/em&gt; Windows上でサポートされています。</target>
        </trans-unit>
        <trans-unit id="ea03decaaaca5df5498dcceb04679c155e8445b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGCONT'&lt;/code&gt; event is emitted when a Node.js process previously moved into the background using &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; (i.e. &lt;code&gt;SIGTSTP&lt;/code&gt;) is then brought back to the foreground using &lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt;&lt;code&gt;fg(1p)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'SIGCONT'&lt;/code&gt; のNode.jsは、以前使用してバックグラウンドに移動工程と、イベントが発せられる &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; （すなわち &lt;code&gt;SIGTSTP&lt;/code&gt; に）戻し前景用いになる&lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt; &lt;code&gt;fg(1p)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99e824d272e95adde2be812dc78ea63b0e40b3a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGINT'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; input, known typically as &lt;code&gt;SIGINT&lt;/code&gt;. If there are no &lt;code&gt;'SIGINT'&lt;/code&gt; event listeners registered when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;SIGINT&lt;/code&gt;, the &lt;code&gt;'pause'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">&lt;code&gt;'SIGINT'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームが受信 &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; として一般的に知られている入力、 &lt;code&gt;SIGINT&lt;/code&gt; を。 &lt;code&gt;input&lt;/code&gt; ストリームが &lt;code&gt;SIGINT&lt;/code&gt; を受け取ったときに &lt;code&gt;'SIGINT'&lt;/code&gt; イベントリスナーが登録されていない場合、 &lt;code&gt;'pause'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="58fa1888e379ec7a6b536027558fb242e1b348f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGTSTP'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; supported on Windows.</source>
          <target state="translated">&lt;code&gt;'SIGTSTP'&lt;/code&gt; イベントがされて&lt;em&gt;いない&lt;/em&gt; Windows上でサポートされています。</target>
        </trans-unit>
        <trans-unit id="a2425fdaa44366773b7902f6c2a4bc3c1298d1db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'SIGTSTP'&lt;/code&gt; event is emitted when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; input, typically known as &lt;code&gt;SIGTSTP&lt;/code&gt;. If there are no &lt;code&gt;'SIGTSTP'&lt;/code&gt; event listeners registered when the &lt;code&gt;input&lt;/code&gt; stream receives a &lt;code&gt;SIGTSTP&lt;/code&gt;, the Node.js process will be sent to the background.</source>
          <target state="translated">&lt;code&gt;'SIGTSTP'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームを受信する &lt;code&gt;&amp;lt;ctrl&amp;gt;-Z&lt;/code&gt; 典型的に知られている入力、 &lt;code&gt;SIGTSTP&lt;/code&gt; を。 &lt;code&gt;input&lt;/code&gt; ストリームが &lt;code&gt;SIGTSTP&lt;/code&gt; を受信したときに &lt;code&gt;'SIGTSTP'&lt;/code&gt; イベントリスナーが登録されていない場合、Node.jsプロセスがバックグラウンドに送信されます。</target>
        </trans-unit>
        <trans-unit id="c3d458cf8941bf210e3472a7ed859272579c7bd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2ServerRequest&lt;/code&gt; instance is abnormally aborted in mid-communication.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;Http2ServerRequest&lt;/code&gt; インスタンスが異常通信中に中止されます。</target>
        </trans-unit>
        <trans-unit id="49e33cc3abfe5a6aff3be8850a5c7b241d82bc6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2Stream&lt;/code&gt; instance is abnormally aborted in mid-communication.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが異常通信中に中止されます。</target>
        </trans-unit>
        <trans-unit id="5021cea836108a8e4481e5774c0cb4b1dec49dc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2Stream&lt;/code&gt; instance is abnormally aborted in mid-communication. Its listener does not expect any arguments.</source>
          <target state="translated">The &lt;code&gt;'aborted'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Http2Stream&lt;/code&gt; instance is abnormally aborted in mid-communication. Its listener does not expect any arguments.</target>
        </trans-unit>
        <trans-unit id="329a98287275acec9b408010e3e11c457f416dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event will only be emitted if the &lt;code&gt;Http2ServerRequest&lt;/code&gt; writable side has not been ended.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; 場合、イベントにのみ放出される &lt;code&gt;Http2ServerRequest&lt;/code&gt; 書き込み可能な側面が終了していません。</target>
        </trans-unit>
        <trans-unit id="16cba63c2e802f270ef416ef55a58c2b5601d3b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'aborted'&lt;/code&gt; event will only be emitted if the &lt;code&gt;Http2Stream&lt;/code&gt; writable side has not been ended.</source>
          <target state="translated">&lt;code&gt;'aborted'&lt;/code&gt; 場合、イベントにのみ放出される &lt;code&gt;Http2Stream&lt;/code&gt; 書き込み可能な側面が終了していません。</target>
        </trans-unit>
        <trans-unit id="5881a0fcae4dcd20ddaa53a05727df7900384be1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'altsvc'&lt;/code&gt; event is emitted whenever an &lt;code&gt;ALTSVC&lt;/code&gt; frame is received by the client. The event is emitted with the &lt;code&gt;ALTSVC&lt;/code&gt; value, origin, and stream ID. If no &lt;code&gt;origin&lt;/code&gt; is provided in the &lt;code&gt;ALTSVC&lt;/code&gt; frame, &lt;code&gt;origin&lt;/code&gt; will be an empty string.</source>
          <target state="translated">&lt;code&gt;'altsvc'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;ALTSVC&lt;/code&gt; のフレームがクライアントによって受信されます。イベントは、 &lt;code&gt;ALTSVC&lt;/code&gt; 値、発信元、およびストリームID とともに発行されます。 &lt;code&gt;ALTSVC&lt;/code&gt; フレームで &lt;code&gt;origin&lt;/code&gt; が指定されていない場合、 &lt;code&gt;origin&lt;/code&gt; は空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="431c27fffcc5c3515200d9aa796f1881ad21eaaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; event is &lt;em&gt;not&lt;/em&gt; emitted for conditions causing explicit termination, such as calling &lt;a href=&quot;#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt; or uncaught exceptions.</source>
          <target state="translated">&lt;code&gt;'beforeExit'&lt;/code&gt; イベントがさ&lt;em&gt;れない&lt;/em&gt;ような呼び出しとして明示的終結を引き起こす条件、のために放出された&lt;a href=&quot;#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;またはキャッチされない例外。</target>
        </trans-unit>
        <trans-unit id="49bb5c86196c564b79661579857a5af05a391ac9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; event is emitted when Node.js empties its event loop and has no additional work to schedule. Normally, the Node.js process will exit when there is no work scheduled, but a listener registered on the &lt;code&gt;'beforeExit'&lt;/code&gt; event can make asynchronous calls, and thereby cause the Node.js process to continue.</source>
          <target state="translated">&lt;code&gt;'beforeExit'&lt;/code&gt; のNode.jsは、そのイベントループを空にし、スケジュールに追加の仕事を持っていないときに、イベントが発せられます。通常、スケジュールされた作業がない場合、Node.jsプロセスは終了しますが、 &lt;code&gt;'beforeExit'&lt;/code&gt; イベントに登録されたリスナーは非同期呼び出しを行うことができるため、Node.jsプロセスが続行されます。</target>
        </trans-unit>
        <trans-unit id="aaeeb5f96ebb59c101927056a12ccfc0f7339c45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'beforeExit'&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be used as an alternative to the &lt;code&gt;'exit'&lt;/code&gt; event unless the intention is to schedule additional work.</source>
          <target state="translated">&lt;code&gt;'beforeExit'&lt;/code&gt; すべき&lt;em&gt;ではない&lt;/em&gt;の代替として使用する &lt;code&gt;'exit'&lt;/code&gt; の意図は、追加の作業をスケジュールしない限りイベント。</target>
        </trans-unit>
        <trans-unit id="b146ae0e412e32595d3ffe601ee1b5e9eba7dc42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted after a socket is closed with &lt;a href=&quot;#dgram_socket_close_callback&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. Once triggered, no new &lt;code&gt;'message'&lt;/code&gt; events will be emitted on this socket.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; のソケットを用いて閉じた後、イベントが発せられる&lt;a href=&quot;#dgram_socket_close_callback&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;。トリガーされると、このソケットで新しい &lt;code&gt;'message'&lt;/code&gt; イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="e348d7100af21e4929d2a05d5e7b4db74635a645" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted once either side of the channel has been disconnected.</source>
          <target state="translated">チャネルのどちらかの側が切断されると、 &lt;code&gt;'close'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="6453811996b62b86754fbcde8172369282b1c44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted once the &lt;code&gt;Http2Session&lt;/code&gt; has been destroyed. Its listener does not expect any arguments.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; 一度イベントが放出される &lt;code&gt;Http2Session&lt;/code&gt; が破壊されています。そのリスナーは引数を期待しません。</target>
        </trans-unit>
        <trans-unit id="bdc3f031b1bc01954f0e23bc22110442e0956b49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when one of the following occur:</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; 次のいずれかが発生したときにイベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="c7c841e158dd9c22dac46ce613efd65d9aa7cf19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; is destroyed. Once this event is emitted, the &lt;code&gt;Http2Stream&lt;/code&gt; instance is no longer usable.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; ときイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; が破壊されます。このイベントが発生すると、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="ba41a6efcf176543cb43f3bd282ed0424f69070a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the stdio streams of a child process have been closed. This is distinct from the &lt;a href=&quot;#child_process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event, since multiple processes might share the same stdio streams.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; 子プロセスの標準入出力ストリームを閉じたときにイベントが放出されます。複数のプロセスが同じstdioストリームを共有する可能性があるため、これは&lt;a href=&quot;#child_process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;イベントとは異なります。</target>
        </trans-unit>
        <trans-unit id="70155d5dbfc4d7b6f0fa0f01c52f6e2d104d629f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'close'&lt;/code&gt; event is emitted when the stream and any of its underlying resources (a file descriptor, for example) have been closed. The event indicates that no more events will be emitted, and no further computation will occur.</source>
          <target state="translated">&lt;code&gt;'close'&lt;/code&gt; イベントが生成されたとき（例えば、ファイルディスクリプタ、）ストリームとその基礎となるリソースのいずれかが閉鎖されています。このイベントは、これ以上イベントが発行されず、それ以上の計算が行われないことを示しています。</target>
        </trans-unit>
        <trans-unit id="908f10fad57d5bf5706478e0ac6d3587a72a3e64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'connect'&lt;/code&gt; event is emitted after a socket is associated to a remote address as a result of a successful &lt;a href=&quot;#dgram_socket_connect_port_address_callback&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; ソケットが成功の結果として、リモートアドレスに関連付けられた後にイベントが放出される&lt;a href=&quot;#dgram_socket_connect_port_address_callback&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt;呼び出し。</target>
        </trans-unit>
        <trans-unit id="883d87058dd9ee15031c28136444e2fe9937f941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'connect'&lt;/code&gt; event is emitted once the &lt;code&gt;Http2Session&lt;/code&gt; has been successfully connected to the remote peer and communication may begin.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; 一旦イベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; が正常にリモートピアに接続され、通信を開始することができます。</target>
        </trans-unit>
        <trans-unit id="89b2d33ff189c9e8a7cdd81471945bff2164caa1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'data'&lt;/code&gt; event is emitted whenever the stream is relinquishing ownership of a chunk of data to a consumer. This may occur whenever the stream is switched in flowing mode by calling &lt;code&gt;readable.pipe()&lt;/code&gt;, &lt;code&gt;readable.resume()&lt;/code&gt;, or by attaching a listener callback to the &lt;code&gt;'data'&lt;/code&gt; event. The &lt;code&gt;'data'&lt;/code&gt; event will also be emitted whenever the &lt;code&gt;readable.read()&lt;/code&gt; method is called and a chunk of data is available to be returned.</source>
          <target state="translated">&lt;code&gt;'data'&lt;/code&gt; ストリームは、消費者へのデータのチャンクの所有権を放棄されたときにイベントが発せられます。これは、 &lt;code&gt;readable.resume()&lt;/code&gt; 、readable.resume（）を呼び出す &lt;code&gt;readable.pipe()&lt;/code&gt; によって、または &lt;code&gt;'data'&lt;/code&gt; イベントにリスナーコールバックをアタッチすることによって、ストリームがフローモードで切り替えられるたびに発生する可能性があります。 &lt;code&gt;'data'&lt;/code&gt; イベントは、たびに放出される &lt;code&gt;readable.read()&lt;/code&gt; メソッドが呼び出され、データのチャンクが返されるために利用可能です。</target>
        </trans-unit>
        <trans-unit id="f3585a0a88cd8b90d12afe8d08d50e684e44726e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted after calling the &lt;a href=&quot;#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;subprocess.disconnect()&lt;/code&gt;&lt;/a&gt; method in parent process or &lt;a href=&quot;process#process_process_disconnect&quot;&gt;&lt;code&gt;process.disconnect()&lt;/code&gt;&lt;/a&gt; in child process. After disconnecting it is no longer possible to send or receive messages, and the &lt;a href=&quot;#child_process_subprocess_connected&quot;&gt;&lt;code&gt;subprocess.connected&lt;/code&gt;&lt;/a&gt; property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; イベントが呼び出した後に放出される&lt;a href=&quot;#child_process_subprocess_disconnect&quot;&gt; &lt;code&gt;subprocess.disconnect()&lt;/code&gt; &lt;/a&gt;親プロセスまたはにおける方法&lt;a href=&quot;process#process_process_disconnect&quot;&gt; &lt;code&gt;process.disconnect()&lt;/code&gt; &lt;/a&gt;子プロセスでは。切断すると、メッセージの送受信ができなくなり、&lt;a href=&quot;#child_process_subprocess_connected&quot;&gt; &lt;code&gt;subprocess.connected&lt;/code&gt; &lt;/a&gt;プロパティが &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="520fdf29c3a9aae399e9ad386de9244085c3f35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'disconnect'&lt;/code&gt; event will be emitted when there are no messages in the process of being received. This will most often be triggered immediately after calling &lt;code&gt;subprocess.disconnect()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; 受信中のプロセスにメッセージがないときにイベントが放出されます。ほとんどの場合、これは &lt;code&gt;subprocess.disconnect()&lt;/code&gt; を呼び出した直後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="6261bd58ea0cfd3a238560b3c12048c5182bb79f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'end'&lt;/code&gt; event &lt;strong&gt;will not be emitted&lt;/strong&gt; unless the data is completely consumed. This can be accomplished by switching the stream into flowing mode, or by calling &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; repeatedly until all data has been consumed.</source>
          <target state="translated">&lt;code&gt;'end'&lt;/code&gt; イベントが&lt;strong&gt;放出されることはありません&lt;/strong&gt;データが完全に消費されていない限り。これは、ストリームをフローモードに切り替えるか、すべてのデータが消費されるまで&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;stream.read()&lt;/code&gt; を&lt;/a&gt;繰り返し呼び出すことで実現できます。</target>
        </trans-unit>
        <trans-unit id="f34ffb418ae39563b461a7f6daafc853f64a2b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'end'&lt;/code&gt; event is emitted when there is no more data to be consumed from the stream.</source>
          <target state="translated">&lt;code&gt;'end'&lt;/code&gt; ストリームから消費すべきより多くのデータが存在しない場合、イベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="d605acf2596ab22046861a707f88f2343acbbdf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted if an error occurred while writing or piping data. The listener callback is passed a single &lt;code&gt;Error&lt;/code&gt; argument when called.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; のデータを書き込むや配管中にエラーが発生した場合、イベントが放出されます。リスナーコールバックは、呼び出されたときに単一の &lt;code&gt;Error&lt;/code&gt; 引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="6a83a8802a571046e766d6e8ee09056733af749e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted if the worker thread throws an uncaught exception. In that case, the worker will be terminated.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; ワーカースレッドがキャッチされない例外をスローした場合イベントが放出されます。その場合、ワーカーは終了します。</target>
        </trans-unit>
        <trans-unit id="d397d55086b73ef66d35bd212162ce2c03c17242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted when an error occurs during the processing of an &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; エラーを処理中に発生した場合にイベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="413e3c65c79844f13c63eb7655c4bf843861f36a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted when an error occurs during the processing of an &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; エラーを処理中に発生した場合にイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d6ac5911dfcf76ad7712a935d4826f69712a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted whenever any error occurs. The event handler function is passed a single &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; エラーが発生するたびにイベントが発せられます。イベントハンドラー関数には、単一の &lt;code&gt;Error&lt;/code&gt; オブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="b649c1dab21ce0af6e720c11d2fadb9d7a9e499b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event is emitted whenever:</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; イベントがいつでも放出されます。</target>
        </trans-unit>
        <trans-unit id="2fa272f6420b73087035e5ec70afa54b433648bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; event may be emitted by a &lt;code&gt;Readable&lt;/code&gt; implementation at any time. Typically, this may occur if the underlying stream is unable to generate data due to an underlying internal failure, or when a stream implementation attempts to push an invalid chunk of data.</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; イベントがによって放出される &lt;code&gt;Readable&lt;/code&gt; いつでも実装。通常、これは、基になる内部エラーが原因で基になるストリームがデータを生成できない場合、またはストリーム実装が無効なデータチャンクをプッシュしようとした場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a5e374258204979aa08c47c615132f02212d4b58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'error'&lt;/code&gt; events that are generated by the &lt;code&gt;captureRejections&lt;/code&gt; behavior do not have a catch handler to avoid infinite error loops: the recommendation is to &lt;strong&gt;not use &lt;code&gt;async&lt;/code&gt; functions as &lt;code&gt;'error'&lt;/code&gt; event handlers&lt;/strong&gt;.</source>
          <target state="translated">The &lt;code&gt;'error'&lt;/code&gt; events that are generated by the &lt;code&gt;captureRejections&lt;/code&gt; behavior do not have a catch handler to avoid infinite error loops: the recommendation is to &lt;strong&gt;not use &lt;code&gt;async&lt;/code&gt; functions as &lt;code&gt;'error'&lt;/code&gt; event handlers&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="bcdbcfaae3d823b356f383f3c68826f1c15312c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted after the child process ends. If the process exited, &lt;code&gt;code&lt;/code&gt; is the final exit code of the process, otherwise &lt;code&gt;null&lt;/code&gt;. If the process terminated due to receipt of a signal, &lt;code&gt;signal&lt;/code&gt; is the string name of the signal, otherwise &lt;code&gt;null&lt;/code&gt;. One of the two will always be non-&lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;'exit'&lt;/code&gt; event is emitted after the child process ends. If the process exited, &lt;code&gt;code&lt;/code&gt; is the final exit code of the process, otherwise &lt;code&gt;null&lt;/code&gt; . If the process terminated due to receipt of a signal, &lt;code&gt;signal&lt;/code&gt; is the string name of the signal, otherwise &lt;code&gt;null&lt;/code&gt; . One of the two will always be non- &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ae56452417c810dcf262ae98ea22d57c7405134" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted after the child process ends. If the process exited, &lt;code&gt;code&lt;/code&gt; is the final exit code of the process, otherwise &lt;code&gt;null&lt;/code&gt;. If the process terminated due to receipt of a signal, &lt;code&gt;signal&lt;/code&gt; is the string name of the signal, otherwise &lt;code&gt;null&lt;/code&gt;. One of the two will always be non-null.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; イベントは、子プロセスが終了した後に放出されます。プロセスが終了した場合、 &lt;code&gt;code&lt;/code&gt; はプロセスの最後の終了コードです。それ以外の場合は &lt;code&gt;null&lt;/code&gt; です。シグナルの受信が原因でプロセスが終了した場合、 &lt;code&gt;signal&lt;/code&gt; はシグナルの文字列名、それ以外の場合は &lt;code&gt;null&lt;/code&gt; です。2つのうちの1つは常にnull以外になります。</target>
        </trans-unit>
        <trans-unit id="123f48934839bfe2588cb02108ecd112f832ccc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted once the worker has stopped. If the worker exited by calling &lt;a href=&quot;process#process_process_exit_code&quot;&gt;&lt;code&gt;process.exit()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;exitCode&lt;/code&gt; parameter will be the passed exit code. If the worker was terminated, the &lt;code&gt;exitCode&lt;/code&gt; parameter will be &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; 労働者が停止した後にイベントが放出されます。労働者が呼び出すことにより終了した場合は&lt;a href=&quot;process#process_process_exit_code&quot;&gt; &lt;code&gt;process.exit()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;exitCode&lt;/code&gt; パラメータが渡された終了コードになります。ワーカーが終了した場合、 &lt;code&gt;exitCode&lt;/code&gt; パラメータは &lt;code&gt;1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="afee462ecbee216bfce98bfc1bb4dd2bd3b53065" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the Node.js process is about to exit as a result of either:</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; のNode.jsプロセスのいずれかの結果として、終了しようとしているときにイベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="41b697c75ab5e89c56cb6b43574aff9141513720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the REPL is exited either by receiving the &lt;code&gt;.exit&lt;/code&gt; command as input, the user pressing</source>
          <target state="translated">The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the REPL is exited either by receiving the &lt;code&gt;.exit&lt;/code&gt; command as input, the user pressing</target>
        </trans-unit>
        <trans-unit id="9a6f422bb8de57a4477a93475d1191faaff75e7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event is emitted when the REPL is exited either by receiving the &lt;code&gt;.exit&lt;/code&gt; command as input, the user pressing &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; twice to signal &lt;code&gt;SIGINT&lt;/code&gt;, or by pressing &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to signal &lt;code&gt;'end'&lt;/code&gt; on the input stream. The listener callback is invoked without any arguments.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; REPLを受信することによってのいずれかで終了したときにイベントが発せられる &lt;code&gt;.exit&lt;/code&gt; の入力として押下するコマンドを &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 倍信号に &lt;code&gt;SIGINT&lt;/code&gt; 、または押して &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; 信号を &lt;code&gt;'end'&lt;/code&gt; に入力ストリーム。リスナーコールバックは引数なしで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="135bfe74de59210c9b9511d750f86b0c451cc498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event may or may not fire after an error has occurred. When listening to both the &lt;code&gt;'exit'&lt;/code&gt; and &lt;code&gt;'error'&lt;/code&gt; events, guard against accidentally invoking handler functions multiple times.</source>
          <target state="translated">The &lt;code&gt;'exit'&lt;/code&gt; event may or may not fire after an error has occurred. When listening to both the &lt;code&gt;'exit'&lt;/code&gt; and &lt;code&gt;'error'&lt;/code&gt; events, guard against accidentally invoking handler functions multiple times.</target>
        </trans-unit>
        <trans-unit id="1f963075b240042211e93f34948383cfbb0b6a1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'exit'&lt;/code&gt; event may or may not fire after an error has occurred. When listening to both the &lt;code&gt;'exit'&lt;/code&gt; and &lt;code&gt;'error'&lt;/code&gt; events, it is important to guard against accidentally invoking handler functions multiple times.</source>
          <target state="translated">&lt;code&gt;'exit'&lt;/code&gt; エラーが発生した後にイベントが火災ではない場合があります。 &lt;code&gt;'exit'&lt;/code&gt; イベントと &lt;code&gt;'error'&lt;/code&gt; イベントの両方をリッスンするときは、誤ってハンドラー関数を何度も呼び出さないようにすることが重要です。</target>
        </trans-unit>
        <trans-unit id="5c045b95a3f3d67c739999dde8aadc99426902a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'finish'&lt;/code&gt; event is emitted after the &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; method has been called, and all data has been flushed to the underlying system.</source>
          <target state="translated">&lt;code&gt;'finish'&lt;/code&gt; イベントが後に放出される&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されており、すべてのデータは、基礎となるシステムにフラッシュされています。</target>
        </trans-unit>
        <trans-unit id="b6a22727c894fadd448a7f390fe47d103feecab5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'frameError'&lt;/code&gt; event is emitted when an error occurs while attempting to send a frame on the session. If the frame that could not be sent is associated with a specific &lt;code&gt;Http2Stream&lt;/code&gt;, an attempt to emit a &lt;code&gt;'frameError'&lt;/code&gt; event on the &lt;code&gt;Http2Stream&lt;/code&gt; is made.</source>
          <target state="translated">&lt;code&gt;'frameError'&lt;/code&gt; セッションでフレームを送信しようとした際にエラーが発生したときにイベントが発せられます。送信できなかったフレームは、特定の関連付けられている場合 &lt;code&gt;Http2Stream&lt;/code&gt; 、放出しようとすると &lt;code&gt;'frameError'&lt;/code&gt; にイベントを &lt;code&gt;Http2Stream&lt;/code&gt; が行われます。</target>
        </trans-unit>
        <trans-unit id="760233dbfe4d62c71e85e5b64f2e79daec0b7d57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'frameError'&lt;/code&gt; event is emitted when an error occurs while attempting to send a frame. When invoked, the handler function will receive an integer argument identifying the frame type, and an integer argument identifying the error code. The &lt;code&gt;Http2Stream&lt;/code&gt; instance will be destroyed immediately after the &lt;code&gt;'frameError'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;'frameError'&lt;/code&gt; フレームを送信しようとした際にエラーが発生したときにイベントが発せられます。ハンドラー関数が呼び出されると、フレームタイプを識別する整数引数と、エラーコードを識別する整数引数を受け取ります。 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、直後に破棄されます &lt;code&gt;'frameError'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="bc5d72127b4de031733972dd5c7ac0bf407ee9ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'goaway'&lt;/code&gt; event is emitted when a &lt;code&gt;GOAWAY&lt;/code&gt; frame is received.</source>
          <target state="translated">&lt;code&gt;'goaway'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;GOAWAY&lt;/code&gt; のフレームが受信されます。</target>
        </trans-unit>
        <trans-unit id="06fde462f19c33854aa53df976784a61259a9435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'headers'&lt;/code&gt; event is emitted when an additional block of headers is received for a stream, such as when a block of &lt;code&gt;1xx&lt;/code&gt; informational headers is received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'headers'&lt;/code&gt; ヘッダの追加のブロックは、ブロックの場合のように、ストリームの受信されたときにイベントが発せられる &lt;code&gt;1xx&lt;/code&gt; 情報ヘッダが受信されます。リスナーコールバックには、&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;とヘッダーに関連付けられたフラグが渡されます。</target>
        </trans-unit>
        <trans-unit id="79520eba2a068a4c7e9f8acddb2d688f2b3c92e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'iso-8859-16'&lt;/code&gt; encoding listed in the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt; is not supported.</source>
          <target state="translated">&lt;code&gt;'iso-8859-16'&lt;/code&gt; に記載されている符号化&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWGエンコーディング規格は&lt;/a&gt;サポートされていません。</target>
        </trans-unit>
        <trans-unit id="a7281f72a178bef00207240f8d3d065f64e94f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'line'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream receives an end-of-line input (&lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, or &lt;code&gt;\r\n&lt;/code&gt;). This usually occurs when the user presses the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; keys.</source>
          <target state="translated">&lt;code&gt;'line'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームがエンド・オブ・ライン入力（受信 &lt;code&gt;\n&lt;/code&gt; 、 &lt;code&gt;\r&lt;/code&gt; 、または &lt;code&gt;\r\n&lt;/code&gt; ）。これは通常、ユーザーが &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; キーを押したときに発生します。</target>
        </trans-unit>
        <trans-unit id="e03ef196d23fdd364ff1535a134130d3779b1ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'listening'&lt;/code&gt; event is emitted once the &lt;code&gt;dgram.Socket&lt;/code&gt; is addressable and can receive data. This happens either explicitly with &lt;code&gt;socket.bind()&lt;/code&gt; or implicitly the first time data is sent using &lt;code&gt;socket.send()&lt;/code&gt;. Until the &lt;code&gt;dgram.Socket&lt;/code&gt; is listening, the underlying system resources do not exist and calls such as &lt;code&gt;socket.address()&lt;/code&gt; and &lt;code&gt;socket.setTTL()&lt;/code&gt; will fail.</source>
          <target state="translated">The &lt;code&gt;'listening'&lt;/code&gt; event is emitted once the &lt;code&gt;dgram.Socket&lt;/code&gt; is addressable and can receive data. This happens either explicitly with &lt;code&gt;socket.bind()&lt;/code&gt; or implicitly the first time data is sent using &lt;code&gt;socket.send()&lt;/code&gt; . Until the &lt;code&gt;dgram.Socket&lt;/code&gt; is listening, the underlying system resources do not exist and calls such as &lt;code&gt;socket.address()&lt;/code&gt; and &lt;code&gt;socket.setTTL()&lt;/code&gt; will fail.</target>
        </trans-unit>
        <trans-unit id="d1dd53c8b8c5a418dd3a58ccaf51adcf802a8dca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'listening'&lt;/code&gt; event is emitted whenever a socket begins listening for datagram messages. This occurs as soon as UDP sockets are created.</source>
          <target state="translated">&lt;code&gt;'listening'&lt;/code&gt; ソケットがデータグラム・メッセージのリスニングを開始したときにイベントが放出されます。これは、UDPソケットが作成されるとすぐに発生します。</target>
        </trans-unit>
        <trans-unit id="cbdbadeefb4cce49c686eaa4d3978db3435a7c97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted when an acknowledgment &lt;code&gt;SETTINGS&lt;/code&gt; frame has been received.</source>
          <target state="translated">&lt;code&gt;'localSettings'&lt;/code&gt; 肯定応答と、イベントが発せられる &lt;code&gt;SETTINGS&lt;/code&gt; のフレームが受信されています。</target>
        </trans-unit>
        <trans-unit id="f5ca50004941181eea8f74d0fc68816de2de7201" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted for any incoming message, containing the cloned input of &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; イベントはのクローン化された入力を含む、任意の着信メッセージのために放出される&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;port.postMessage()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81b3bdbadfae1e3264119b629189aba2112399d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted when a new datagram is available on a socket. The event handler function is passed two arguments: &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;rinfo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; イベントは、新しいデータグラムソケットで提供されていたときに放出されます。イベントハンドラー関数には、 &lt;code&gt;msg&lt;/code&gt; と &lt;code&gt;rinfo&lt;/code&gt; の 2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="3d138cd76d2b496029c2982956fead778e703deb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is emitted when the worker thread has invoked &lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt;&lt;code&gt;require('worker_threads').parentPort.postMessage()&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;#worker_threads_event_message&quot;&gt;&lt;code&gt;port.on('message')&lt;/code&gt;&lt;/a&gt; event for more details.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; ワーカースレッドが呼び出されたときにイベントが発せられる&lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt; &lt;code&gt;require('worker_threads').parentPort.postMessage()&lt;/code&gt; &lt;/a&gt;。詳細については、&lt;a href=&quot;#worker_threads_event_message&quot;&gt; &lt;code&gt;port.on('message')&lt;/code&gt; &lt;/a&gt;イベントを参照してください。</target>
        </trans-unit>
        <trans-unit id="82ba8dd138e86b900fa9975500671c42d475acfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'message'&lt;/code&gt; event is triggered when a child process uses &lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;process.send()&lt;/code&gt;&lt;/a&gt; to send messages.</source>
          <target state="translated">&lt;code&gt;'message'&lt;/code&gt; 子プロセスが使用すると、イベントがトリガされます&lt;a href=&quot;process#process_process_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;process.send()&lt;/code&gt; &lt;/a&gt;メッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="8110897d46a733caf502ab2fd52ae7e588029993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'messageerror'&lt;/code&gt; event is emitted when deserializing a message failed.</source>
          <target state="translated">The &lt;code&gt;'messageerror'&lt;/code&gt; event is emitted when deserializing a message failed.</target>
        </trans-unit>
        <trans-unit id="974ad0e64fe6296b3b090d56a32c0565a97e1803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'multipleResolves'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; has been either:</source>
          <target state="translated">&lt;code&gt;'multipleResolves'&lt;/code&gt; いつでもイベントが放出される &lt;code&gt;Promise&lt;/code&gt; どちらかされています：</target>
        </trans-unit>
        <trans-unit id="a80b6d5de14633d665d01a9e2512f0b611fd2f7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'newSession'&lt;/code&gt; event is emitted upon creation of a new TLS session. This may be used to store sessions in external storage. The data should be provided to the &lt;a href=&quot;#tls_event_resumesession&quot;&gt;&lt;code&gt;'resumeSession'&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">&lt;code&gt;'newSession'&lt;/code&gt; イベントは、新たなTLSセッションの作成時に放出されます。これを使用して、セッションを外部ストレージに保存できます。データは&lt;a href=&quot;#tls_event_resumesession&quot;&gt; &lt;code&gt;'resumeSession'&lt;/code&gt; &lt;/a&gt;コールバックに提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0fee03b9371081a1b7ac033a2811eb25d701512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'online'&lt;/code&gt; event is emitted when the worker thread has started executing JavaScript code.</source>
          <target state="translated">&lt;code&gt;'online'&lt;/code&gt; ワーカースレッドがJavaScriptコードの実行を開始したときにイベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="61b0a905df713569973ce617c63dea32723865a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'origin'&lt;/code&gt; event is emitted whenever an &lt;code&gt;ORIGIN&lt;/code&gt; frame is received by the client. The event is emitted with an array of &lt;code&gt;origin&lt;/code&gt; strings. The &lt;code&gt;http2session.originSet&lt;/code&gt; will be updated to include the received origins.</source>
          <target state="translated">&lt;code&gt;'origin'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;ORIGIN&lt;/code&gt; のフレームがクライアントによって受信されます。イベントは、 &lt;code&gt;origin&lt;/code&gt; 文字列の配列で発行されます。 &lt;code&gt;http2session.originSet&lt;/code&gt; は受信起源を含むように更新されます。</target>
        </trans-unit>
        <trans-unit id="f65018cab56b4ae93ba24fd445ffd1c49d1f068d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'origin'&lt;/code&gt; event is only emitted when using a secure TLS connection.</source>
          <target state="translated">&lt;code&gt;'origin'&lt;/code&gt; 安全なTLS接続を使用すると、イベントにのみ放出されます。</target>
        </trans-unit>
        <trans-unit id="ba81bca8b322e658babfec33ee6b3baa6c478b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; and &lt;code&gt;'SIGCONT'&lt;/code&gt; events will not be emitted if the &lt;code&gt;input&lt;/code&gt; was paused before the process was sent to the background.</source>
          <target state="translated">&lt;code&gt;'pause'&lt;/code&gt; と &lt;code&gt;'SIGCONT'&lt;/code&gt; 場合にイベントが放出されない &lt;code&gt;input&lt;/code&gt; 処理はバックグラウンドに送信される前に一時停止されました。</target>
        </trans-unit>
        <trans-unit id="a637b3ce402e4c17d1a124eacd504ebc99f3eb16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; event is emitted when &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; is called and &lt;code&gt;readableFlowing&lt;/code&gt; is not &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'pause'&lt;/code&gt; したときにイベントが発せられる&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; が&lt;/a&gt;呼び出され、 &lt;code&gt;readableFlowing&lt;/code&gt; がない &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4e5586adc19c1a578afc50547341cbae3ad8c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pause'&lt;/code&gt; event is emitted when one of the following occur:</source>
          <target state="translated">&lt;code&gt;'pause'&lt;/code&gt; 次のいずれかが発生したときにイベントが発せられます。</target>
        </trans-unit>
        <trans-unit id="048ea341b0571ea4393ad72e671351d7d6053bdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ping'&lt;/code&gt; event is emitted whenever a &lt;code&gt;PING&lt;/code&gt; frame is received from the connected peer.</source>
          <target state="translated">&lt;code&gt;'ping'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;PING&lt;/code&gt; のフレームが接続ピアから受信されます。</target>
        </trans-unit>
        <trans-unit id="0b5d77dd469f50b5abf03bcacf58c2b55cf6c3b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'pipe'&lt;/code&gt; event is emitted when the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method is called on a readable stream, adding this writable to its set of destinations.</source>
          <target state="translated">&lt;code&gt;'pipe'&lt;/code&gt; と、イベントが発せられる&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;メソッドが、目的地のセットには、この書き込み可能を追加、読み取り可能なストリームで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="743cd45272e3e81930c50026e225cdc079b474a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'push'&lt;/code&gt; event is emitted when response headers for a Server Push stream are received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'push'&lt;/code&gt; サーバープッシュストリームの応答ヘッダーが受信されたときにイベントが発せられます。リスナーコールバックには、&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;とヘッダーに関連付けられたフラグが渡されます。</target>
        </trans-unit>
        <trans-unit id="c590ad720763b332369a839ca3aeb58adbd53461" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; event is emitted when there is data available to be read from the stream. In some cases, attaching a listener for the &lt;code&gt;'readable'&lt;/code&gt; event will cause some amount of data to be read into an internal buffer.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; ストリームから読み込むことが可能なデータがあるときにイベントが放出されます。場合によっては、 &lt;code&gt;'readable'&lt;/code&gt; イベントのリスナーをアタッチすると、ある程度のデータが内部バッファーに読み込まれます。</target>
        </trans-unit>
        <trans-unit id="3f321790d8533ee1575d152841b2014bbb9a9e1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; event will also be emitted once the end of the stream data has been reached but before the &lt;code&gt;'end'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; ストリームデータの終わりに達した後、しかし前に、イベントにも放出される &lt;code&gt;'end'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="6a33c06469b5000b45fd1ff75e2103ea23711d04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'readable'&lt;/code&gt; is always emitted in the next tick after &lt;code&gt;.push()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; 常に後に次のダニに放出される &lt;code&gt;.push()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="5b641b4e9fe876980200e83a5029308c935e9df7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'ready'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; has been opened, has been assigned an &lt;code&gt;id&lt;/code&gt;, and can be used. The listener does not expect any arguments.</source>
          <target state="translated">The &lt;code&gt;'ready'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; has been opened, has been assigned an &lt;code&gt;id&lt;/code&gt; , and can be used. The listener does not expect any arguments.</target>
        </trans-unit>
        <trans-unit id="331814408ad22b9e15f1f826850a2f2b6d57b17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'rejectionHandled'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; has been rejected and an error handler was attached to it (using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;promise.catch()&lt;/code&gt;&lt;/a&gt;, for example) later than one turn of the Node.js event loop.</source>
          <target state="translated">&lt;code&gt;'rejectionHandled'&lt;/code&gt; たびにイベントが発せられる &lt;code&gt;Promise&lt;/code&gt; 拒否され、エラーハンドラが（使用してそれに取り付けられた&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;promise.catch()&lt;/code&gt; &lt;/a&gt; Node.jsのイベントループの一の回転よりも遅いなど）。</target>
        </trans-unit>
        <trans-unit id="cdffe035f7f5e8eeb5025bc5fb803a0ce34a6ec9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'remoteSettings'&lt;/code&gt; event is emitted when a new &lt;code&gt;SETTINGS&lt;/code&gt; frame is received from the connected peer.</source>
          <target state="translated">&lt;code&gt;'remoteSettings'&lt;/code&gt; 新たなときにイベントが発せられる &lt;code&gt;SETTINGS&lt;/code&gt; のフレームが接続されたピアから受信されます。</target>
        </trans-unit>
        <trans-unit id="e7bab2cbef5a8084fcc62f25ae893aa63ee29422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'removeListener'&lt;/code&gt; event is emitted &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;listener&lt;/code&gt; is removed.</source>
          <target state="translated">&lt;code&gt;'removeListener'&lt;/code&gt; イベントが放出され&lt;em&gt;た後、&lt;/em&gt; &lt;code&gt;listener&lt;/code&gt; 削除されます。</target>
        </trans-unit>
        <trans-unit id="2f15eb3db706956bc4a77474ff2fa5c7906f8192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'request'&lt;/code&gt; event works identically on both &lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt; and HTTP/2.</source>
          <target state="translated">&lt;code&gt;'request'&lt;/code&gt; イベントは、両方に同じように動作&lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt;とHTTP / 2。</target>
        </trans-unit>
        <trans-unit id="67038f9420ce56b7d4d983221318c5c2eea5002d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'reset'&lt;/code&gt; event is emitted when the REPL's context is reset. This occurs whenever the &lt;code&gt;.clear&lt;/code&gt; command is received as input &lt;em&gt;unless&lt;/em&gt; the REPL is using the default evaluator and the &lt;code&gt;repl.REPLServer&lt;/code&gt; instance was created with the &lt;code&gt;useGlobal&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. The listener callback will be called with a reference to the &lt;code&gt;context&lt;/code&gt; object as the only argument.</source>
          <target state="translated">&lt;code&gt;'reset'&lt;/code&gt; REPLのコンテキストがリセットされたときにイベントが発せられます。これは、REPLがデフォルトのエバリュエーターを使用していて、 &lt;code&gt;useGlobal&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定して &lt;code&gt;repl.REPLServer&lt;/code&gt; インスタンスが作成されてい&lt;em&gt;ない限り&lt;/em&gt;、 &lt;code&gt;.clear&lt;/code&gt; コマンドが入力として受信されるたびに発生します。リスナーコールバックは、 &lt;code&gt;context&lt;/code&gt; オブジェクトへの参照を唯一の引数として呼び出されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="20a4a05f2093abc18166b110dcd5b70ad9f00eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resize'&lt;/code&gt; event is emitted whenever either of the &lt;code&gt;writeStream.columns&lt;/code&gt; or &lt;code&gt;writeStream.rows&lt;/code&gt; properties have changed. No arguments are passed to the listener callback when called.</source>
          <target state="translated">&lt;code&gt;'resize'&lt;/code&gt; のいずれかのたびにイベントが発せられる &lt;code&gt;writeStream.columns&lt;/code&gt; 又は &lt;code&gt;writeStream.rows&lt;/code&gt; 特性が変更されています。呼び出された場合、引数はリスナーコールバックに渡されません。</target>
        </trans-unit>
        <trans-unit id="f8dd7100f65e5be48fd853e4911e57e22c4b6451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'response'&lt;/code&gt; event is emitted when a response &lt;code&gt;HEADERS&lt;/code&gt; frame has been received for this stream from the connected HTTP/2 server. The listener is invoked with two arguments: an &lt;code&gt;Object&lt;/code&gt; containing the received &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt;, and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'response'&lt;/code&gt; の応答と、イベントが発せられる &lt;code&gt;HEADERS&lt;/code&gt; フレームは、接続されたHTTP / 2サーバから、このストリームについて受信されています。：リスナーは2つの引数を指定して呼び出された &lt;code&gt;Object&lt;/code&gt; 受信含む&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;、およびヘッダに関連付けられたフラグ。</target>
        </trans-unit>
        <trans-unit id="54582df4bb78540744ceeaff58f63d87fc95c5ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resume'&lt;/code&gt; event is emitted when &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; is called and &lt;code&gt;readableFlowing&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'resume'&lt;/code&gt; ときイベントが発せられる&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; が&lt;/a&gt;呼び出され、 &lt;code&gt;readableFlowing&lt;/code&gt; はない &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c6dd9b71ac7098f6ea0b70c58c682488ceb44d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resume'&lt;/code&gt; event is emitted whenever the &lt;code&gt;input&lt;/code&gt; stream is resumed.</source>
          <target state="translated">&lt;code&gt;'resume'&lt;/code&gt; するたびにイベントが発せられる &lt;code&gt;input&lt;/code&gt; ストリームが再開されます。</target>
        </trans-unit>
        <trans-unit id="bef01c7015ad884d3d793c89e4e856737e7f0a19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'resumeSession'&lt;/code&gt; event is emitted when the client requests to resume a previous TLS session. The listener callback is passed two arguments when called:</source>
          <target state="translated">&lt;code&gt;'resumeSession'&lt;/code&gt; クライアントの要求が前のTLSセッションを再開したときにイベントが放出されます。リスナーコールバックには、呼び出されたときに2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="2cc0eb4e717982dea937c4e766c505133e21862f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secure'&lt;/code&gt; event is emitted by the &lt;code&gt;SecurePair&lt;/code&gt; object once a secure connection has been established.</source>
          <target state="translated">&lt;code&gt;'secure'&lt;/code&gt; イベントがによって放出される &lt;code&gt;SecurePair&lt;/code&gt; の安全な接続が確立されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="2341e93879ce8f12981105ab49853749cc7e0163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secureConnect'&lt;/code&gt; event is emitted after the handshaking process for a new connection has successfully completed. The listener callback will be called regardless of whether or not the server's certificate has been authorized. It is the client's responsibility to check the &lt;code&gt;tlsSocket.authorized&lt;/code&gt; property to determine if the server certificate was signed by one of the specified CAs. If &lt;code&gt;tlsSocket.authorized === false&lt;/code&gt;, then the error can be found by examining the &lt;code&gt;tlsSocket.authorizationError&lt;/code&gt; property. If ALPN was used, the &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; property can be checked to determine the negotiated protocol.</source>
          <target state="translated">&lt;code&gt;'secureConnect'&lt;/code&gt; 新しい接続のためのハンドシェイクプロセスが正常に完了した後にイベントが放出されます。リスナーコールバックは、サーバーの証明書が承認されているかどうかに関係なく呼び出されます。 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; プロパティをチェックして、サーバー証明書が指定されたいずれかのCAによって署名されているかどうかを判断するのは、クライアントの責任です。 &lt;code&gt;tlsSocket.authorized === false&lt;/code&gt; 場合、 &lt;code&gt;tlsSocket.authorizationError&lt;/code&gt; プロパティを調べることでエラーを見つけることができます。 ALPNが使用された場合、 &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; プロパティをチェックして、ネゴシエートされたプロトコルを判別できます。</target>
        </trans-unit>
        <trans-unit id="4cdfa01e16e883f668e8dcde46ecb8537a05aa84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'secureConnection'&lt;/code&gt; event is emitted after the handshaking process for a new connection has successfully completed. The listener callback is passed a single argument when called:</source>
          <target state="translated">&lt;code&gt;'secureConnection'&lt;/code&gt; 新しい接続のためのハンドシェイクプロセスが正常に完了した後にイベントが放出されます。リスナーコールバックには、呼び出されたときに単一の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="2c12fc6f19cad46e27778cdbde243418fc2aa32f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted on a client &lt;code&gt;tls.TLSSocket&lt;/code&gt; when a new session or TLS ticket is available. This may or may not be before the handshake is complete, depending on the TLS protocol version that was negotiated. The event is not emitted on the server, or if a new session was not created, for example, when the connection was resumed. For some TLS protocol versions the event may be emitted multiple times, in which case all the sessions can be used for resumption.</source>
          <target state="translated">&lt;code&gt;'session'&lt;/code&gt; イベントは、クライアント上で放出される &lt;code&gt;tls.TLSSocket&lt;/code&gt; 新しいセッションまたはTLSチケットが利用可能になったとき。これは、ネゴシエートされたTLSプロトコルのバージョンに応じて、ハンドシェイクが完了する前である場合とそうでない場合があります。イベントはサーバーで発行されません。または、接続が再開されたときなど、新しいセッションが作成されなかった場合。一部のTLSプロトコルバージョンでは、イベントが複数回発行される場合があります。その場合、すべてのセッションを再開に使用できます。</target>
        </trans-unit>
        <trans-unit id="d5381be7496a12105803cfef7e039de8630e7cd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Session&lt;/code&gt; is created by the &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'session'&lt;/code&gt; 新しいときにイベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; がによって作成され &lt;code&gt;Http2SecureServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e1eaf0ed898b0fca1a226411fff348f74b7ff52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'session'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Session&lt;/code&gt; is created by the &lt;code&gt;Http2Server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'session'&lt;/code&gt; 新しいときにイベントが発せられる &lt;code&gt;Http2Session&lt;/code&gt; がによって作成され &lt;code&gt;Http2Server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="238f72829ecaec928f578a773e5441d6c4659596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'sessionError'&lt;/code&gt; event is emitted when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;code&gt;Http2Session&lt;/code&gt; object associated with the &lt;code&gt;Http2SecureServer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'sessionError'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;'error'&lt;/code&gt; イベントによって放出される &lt;code&gt;Http2Session&lt;/code&gt; の関連付けられたオブジェクト &lt;code&gt;Http2SecureServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14cd694c9317db24ce6afc17f5aca349dd385bfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'sessionError'&lt;/code&gt; event is emitted when an &lt;code&gt;'error'&lt;/code&gt; event is emitted by an &lt;code&gt;Http2Session&lt;/code&gt; object associated with the &lt;code&gt;Http2Server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'sessionError'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;'error'&lt;/code&gt; イベントによって放出される &lt;code&gt;Http2Session&lt;/code&gt; の関連付けられたオブジェクト &lt;code&gt;Http2Server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51ea0e301e0ed929a3b9724d7a5f4ae527be5562" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'stream'&lt;/code&gt; event is emitted when a &lt;code&gt;'stream'&lt;/code&gt; event has been emitted by an &lt;code&gt;Http2Session&lt;/code&gt; associated with the server.</source>
          <target state="translated">&lt;code&gt;'stream'&lt;/code&gt; と、イベントが発せられる &lt;code&gt;'stream'&lt;/code&gt; イベントにより放出された &lt;code&gt;Http2Session&lt;/code&gt; サーバに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="65e49bda1180537406c13d55823d09a48f6f4669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'stream'&lt;/code&gt; event is emitted when a new &lt;code&gt;Http2Stream&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;'stream'&lt;/code&gt; 新しいときにイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; が作成されます。</target>
        </trans-unit>
        <trans-unit id="09e6820161ddb001a04c2443f06c7b6df3cbae18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted after no activity is received for this &lt;code&gt;Http2Stream&lt;/code&gt; within the number of milliseconds set using &lt;code&gt;http2stream.setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; アクティビティは、このために受信されなかった後にイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; ミリ秒数以内に使用して設定 &lt;code&gt;http2stream.setTimeout()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46521e658922e64de21b228f37dc84f733fe48c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted after no activity is received for this &lt;code&gt;Http2Stream&lt;/code&gt; within the number of milliseconds set using &lt;code&gt;http2stream.setTimeout()&lt;/code&gt;. Its listener does not expect any arguments.</source>
          <target state="translated">The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted after no activity is received for this &lt;code&gt;Http2Stream&lt;/code&gt; within the number of milliseconds set using &lt;code&gt;http2stream.setTimeout()&lt;/code&gt; . Its listener does not expect any arguments.</target>
        </trans-unit>
        <trans-unit id="7fe5fc81abcb2aae6b9dc8f2243d24b1d7188c7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2secureServer.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 2 minutes.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; を使用して設定のミリ秒の所定の数のサーバ上のアクティビティがないときにイベントが発せられる &lt;code&gt;http2secureServer.setTimeout()&lt;/code&gt; 。&lt;strong&gt;デフォルト：&lt;/strong&gt; 2分。</target>
        </trans-unit>
        <trans-unit id="108936544aea63f28d9a60ebe957d6a7f1889efd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; を使用して設定のミリ秒の所定の数のサーバ上のアクティビティがないときにイベントが発せられる &lt;code&gt;http2server.setTimeout()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b21bbd9ce06ffb024f5ac48d347674d1ab724fde" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 0 (no timeout)</source>
          <target state="translated">The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt; . &lt;strong&gt;Default:&lt;/strong&gt; 0 (no timeout)</target>
        </trans-unit>
        <trans-unit id="39ed4884868474d1d719d77f6fcff51e968f3d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'timeout'&lt;/code&gt; event is emitted when there is no activity on the Server for a given number of milliseconds set using &lt;code&gt;http2server.setTimeout()&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt; 2 minutes.</source>
          <target state="translated">&lt;code&gt;'timeout'&lt;/code&gt; を使用して設定のミリ秒の所定の数のサーバ上のアクティビティがないときにイベントが発せられる &lt;code&gt;http2server.setTimeout()&lt;/code&gt; 。&lt;strong&gt;デフォルト：&lt;/strong&gt; 2分。</target>
        </trans-unit>
        <trans-unit id="6fb78b74b7bacfc18783789bfee8f7f7e26fbb38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'tlsClientError'&lt;/code&gt; event is emitted when an error occurs before a secure connection is established. The listener callback is passed two arguments when called:</source>
          <target state="translated">&lt;code&gt;'tlsClientError'&lt;/code&gt; 安全な接続が確立される前にエラーが発生したときにイベントが発せられます。リスナーコールバックには、呼び出されたときに2つの引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="4fe8033442d93b36467a9592e5b48ab0e305d9e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'trailers'&lt;/code&gt; event is emitted when a block of headers associated with trailing header fields is received. The listener callback is passed the &lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP/2 Headers Object&lt;/a&gt; and flags associated with the headers.</source>
          <target state="translated">&lt;code&gt;'trailers'&lt;/code&gt; 後続ヘッダフィールドに関連付けられたヘッダブロックを受信したときにイベントが発せられます。リスナーコールバックには、&lt;a href=&quot;#http2_headers_object&quot;&gt;HTTP / 2ヘッダーオブジェクト&lt;/a&gt;とヘッダーに関連付けられたフラグが渡されます。</target>
        </trans-unit>
        <trans-unit id="23673d04eae7b0bc5661bdbcf6403ecf29c7b20d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted when an uncaught JavaScript exception bubbles all the way back to the event loop. By default, Node.js handles such exceptions by printing the stack trace to &lt;code&gt;stderr&lt;/code&gt; and exiting with code 1, overriding any previously set &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt;. Adding a handler for the &lt;code&gt;'uncaughtException'&lt;/code&gt; event overrides this default behavior. Alternatively, change the &lt;a href=&quot;#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;'uncaughtException'&lt;/code&gt; handler which will result in the process exiting with the provided exit code. Otherwise, in the presence of such handler the process will exit with 0.</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; キャッチされないJavaScript例外がイベントループまでずっとバックバブル時にイベントが放出されます。デフォルトでは、Node.jsは、スタックトレースを &lt;code&gt;stderr&lt;/code&gt; に出力し、コード1で終了することにより、このような例外を処理します。以前に設定された&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; を&lt;/a&gt;オーバーライドします。 &lt;code&gt;'uncaughtException'&lt;/code&gt; イベントのハンドラーを追加すると、このデフォルトの動作がオーバーライドされます。または、提供された終了コードでプロセスが終了する &lt;code&gt;'uncaughtException'&lt;/code&gt; ハンドラーの&lt;a href=&quot;#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt;を変更します。そうでない場合、そのようなハンドラーが存在すると、プロセスは0で終了します。</target>
        </trans-unit>
        <trans-unit id="093aa13b2c97a6032857fa6ea423e7921815103a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtException'&lt;/code&gt; event is from now on triggered if the repl is used as standalone program.</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; REPLをスタンドアロンプログラムとして使用されている場合、イベントがトリガーになりましたからです。</target>
        </trans-unit>
        <trans-unit id="99483817a564a43223cfbaac290377004e31443c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; event is emitted before an &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted or a hook installed via &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">The &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; event is emitted before an &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted or a hook installed via &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt; is called.</target>
        </trans-unit>
        <trans-unit id="9a07847bc26be18865a3248444066bcc64a6386e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is emitted whenever a &lt;code&gt;Promise&lt;/code&gt; is rejected and no error handler is attached to the promise within a turn of the event loop. When programming with Promises, exceptions are encapsulated as &quot;rejected promises&quot;. Rejections can be caught and handled using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;promise.catch()&lt;/code&gt;&lt;/a&gt; and are propagated through a &lt;code&gt;Promise&lt;/code&gt; chain. The &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is useful for detecting and keeping track of promises that were rejected whose rejections have not yet been handled.</source>
          <target state="translated">&lt;code&gt;'unhandledRejection'&lt;/code&gt; いつでもイベントが放出される &lt;code&gt;Promise&lt;/code&gt; 拒否され、エラー・ハンドラは、イベントループのターン内の約束に添付されていません。Promiseでプログラミングする場合、例外は「拒否されたPromise」としてカプセル化されます。拒否は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;promise.catch()&lt;/code&gt; &lt;/a&gt;を使用してキャッチおよび処理でき、 &lt;code&gt;Promise&lt;/code&gt; チェーンを通じて伝播されます。 &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが検出し、その拒否、まだ処理されていない拒否された約束を追跡するために有用です。</target>
        </trans-unit>
        <trans-unit id="5e17ef7fa41c6032423aa7e11ccf9b80fe4dd1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unknownProtocol'&lt;/code&gt; event is emitted when a connecting client fails to negotiate an allowed protocol (i.e. HTTP/2 or HTTP/1.1). The event handler receives the socket for handling. If no listener is registered for this event, the connection is terminated. See the &lt;a href=&quot;#http2_compatibility_api&quot;&gt;Compatibility API&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'unknownProtocol'&lt;/code&gt; イベントは、接続クライアントが許可されたプロトコル（すなわちHTTP / 2またはHTTP / 1.1）を交渉するために失敗したときに放出されます。イベントハンドラーは、処理するソケットを受け取ります。このイベントにリスナーが登録されていない場合、接続は終了します。&lt;a href=&quot;#http2_compatibility_api&quot;&gt;互換性APIを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9bc1afb0dc467971e7c8c541f29dc0ce77428191" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'unpipe'&lt;/code&gt; event is emitted when the &lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt;&lt;code&gt;stream.unpipe()&lt;/code&gt;&lt;/a&gt; method is called on a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream, removing this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; from its set of destinations.</source>
          <target state="translated">&lt;code&gt;'unpipe'&lt;/code&gt; ときにイベントが発せられる&lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt; &lt;code&gt;stream.unpipe()&lt;/code&gt; &lt;/a&gt;メソッドは、上で呼び出された&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;この除去、ストリーム&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;目的地のセットから。</target>
        </trans-unit>
        <trans-unit id="9ad68df74b203249636785fbbb8f31130efe9650" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted when the &lt;code&gt;Http2Stream&lt;/code&gt; has queued the final &lt;code&gt;DATA&lt;/code&gt; frame to be sent on a frame and the &lt;code&gt;Http2Stream&lt;/code&gt; is ready to send trailing headers. When initiating a request or response, the &lt;code&gt;waitForTrailers&lt;/code&gt; option must be set for this event to be emitted.</source>
          <target state="translated">&lt;code&gt;'wantTrailers'&lt;/code&gt; ときにイベントが発せられる &lt;code&gt;Http2Stream&lt;/code&gt; が最終キューに入れられた &lt;code&gt;DATA&lt;/code&gt; フレームに送信されるフレームと &lt;code&gt;Http2Stream&lt;/code&gt; は後続ヘッダを送信する準備ができています。要求または応答を開始するとき、このイベントを &lt;code&gt;waitForTrailers&lt;/code&gt; するには、waitForTrailersオプションを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f77fe3ae22d5c805b787b388eccf38ff6d236031" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'warning'&lt;/code&gt; event is emitted whenever Node.js emits a process warning.</source>
          <target state="translated">Node.jsがプロセス警告を発行するたびに、 &lt;code&gt;'warning'&lt;/code&gt; イベントが発行されます。</target>
        </trans-unit>
        <trans-unit id="9e9f48e2643df52ffddfef6f3c88d585dc1364b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*-deprecation&lt;/code&gt; command line flags only affect warnings that use the name &lt;code&gt;'DeprecationWarning'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*-deprecation&lt;/code&gt; コマンドラインフラグは名前のみ使用警告影響を及ぼす &lt;code&gt;'DeprecationWarning'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8f6c9386281e14f40f7c5386b666a2283b25091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*-deprecation&lt;/code&gt; command-line flags only affect warnings that use the name &lt;code&gt;'DeprecationWarning'&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;*-deprecation&lt;/code&gt; command-line flags only affect warnings that use the name &lt;code&gt;'DeprecationWarning'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38d4545050dbc2c8a080a726ad5533c98d06ab51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--entry-type=...&lt;/code&gt; flag is not compatible with the Node.js REPL.</source>
          <target state="translated">&lt;code&gt;--entry-type=...&lt;/code&gt; フラグのNode.js REPLと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="c4cc81479fbee805579102393c38c6cc511dd6a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--entry-type=commonjs&lt;/code&gt; flag was used to attempt to execute an &lt;code&gt;.mjs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file where the nearest parent &lt;code&gt;package.json&lt;/code&gt; contains &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt;; or the &lt;code&gt;--entry-type=module&lt;/code&gt; flag was used to attempt to execute a &lt;code&gt;.cjs&lt;/code&gt; file or a &lt;code&gt;.js&lt;/code&gt; file where the nearest parent &lt;code&gt;package.json&lt;/code&gt; either lacks a &lt;code&gt;&quot;type&quot;&lt;/code&gt; field or contains &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--entry-type=commonjs&lt;/code&gt; フラグは、実行しようとするために使用された &lt;code&gt;.mjs&lt;/code&gt; ファイルまたは &lt;code&gt;.js&lt;/code&gt; の最も近い親ファイル &lt;code&gt;package.json&lt;/code&gt; が含まれ &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; 。または &lt;code&gt;--entry-type=module&lt;/code&gt; フラグが実行しようとするために使用された &lt;code&gt;.cjs&lt;/code&gt; ファイルまたは &lt;code&gt;.js&lt;/code&gt; の最も近い親ファイル &lt;code&gt;package.json&lt;/code&gt; が欠けているいずれかの &lt;code&gt;&quot;type&quot;&lt;/code&gt; フィールドを含んでいるか、 &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a26e5cbc4d1f28001634ae58ba9f86157fc53853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--es-module-specifier-resolution=[mode]&lt;/code&gt; flag can be used to customize the extension resolution algorithm. The default mode is &lt;code&gt;explicit&lt;/code&gt;, which requires the full path to a module be provided to the loader. To enable the automatic extension resolution and importing from directories that include an index file use the &lt;code&gt;node&lt;/code&gt; mode.</source>
          <target state="translated">&lt;code&gt;--es-module-specifier-resolution=[mode]&lt;/code&gt; フラグは、拡張解像度アルゴリズムをカスタマイズするために使用することができます。デフォルトのモードは &lt;code&gt;explicit&lt;/code&gt; で、ローダーへのモジュールへのフルパスを提供する必要があります。自動拡張解決を有効にし、インデックスファイルを含むディレクトリからインポートするには、 &lt;code&gt;node&lt;/code&gt; モードを使用します。</target>
        </trans-unit>
        <trans-unit id="e751902ada063e7c7c367c8219987632bfbdfff5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag is needed for the module to work.</source>
          <target state="translated">The &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag is needed for the module to work.</target>
        </trans-unit>
        <trans-unit id="7d96684c5374525fe5f2896a118c35d100dd9f80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-modules&lt;/code&gt; flag can be used to enable support for ECMAScript modules (ES modules).</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; フラグのECMAScriptモジュール（ESモジュール）のサポートを可能にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ee3284f640f748accb037052d5de9540a6b3c2c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-policy&lt;/code&gt; flag can be used to enable features for policies when loading modules.</source>
          <target state="translated">&lt;code&gt;--experimental-policy&lt;/code&gt; フラグは、モジュールをロードするときにポリシーの機能を有効にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="11e148c51ffb4cb0e2581ced11d99c093fb36260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--experimental-specifier-resolution=[mode]&lt;/code&gt; flag can be used to customize the extension resolution algorithm. The default mode is &lt;code&gt;explicit&lt;/code&gt;, which requires the full path to a module be provided to the loader. To enable the automatic extension resolution and importing from directories that include an index file use the &lt;code&gt;node&lt;/code&gt; mode.</source>
          <target state="translated">The &lt;code&gt;--experimental-specifier-resolution=[mode]&lt;/code&gt; flag can be used to customize the extension resolution algorithm. The default mode is &lt;code&gt;explicit&lt;/code&gt; , which requires the full path to a module be provided to the loader. To enable the automatic extension resolution and importing from directories that include an index file use the &lt;code&gt;node&lt;/code&gt; mode.</target>
        </trans-unit>
        <trans-unit id="45f8d4be1b16580af36211eb2184e713f2cb9f2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--input-type&lt;/code&gt; flag was used to attempt to execute a file. This flag can only be used with input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt; or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--input-type&lt;/code&gt; フラグは、ファイルを実行しようとするために使用されました。このフラグは、 &lt;code&gt;--print&lt;/code&gt; &lt;code&gt;--eval&lt;/code&gt; 、-- print、または &lt;code&gt;STDIN&lt;/code&gt; による入力でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="48ee988f6a0b4b3cc241bf5e59e36e5337844ca5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; command line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.</source>
          <target state="translated">&lt;code&gt;--preserve-symlinks&lt;/code&gt; ラインフラグがシンボリックリンクピアの依存関係を見つけることができるように、実際の経路とは対照的のNode.jsは、モジュールのシンボリックリンクパスを使用するように指示するコマンド。</target>
        </trans-unit>
        <trans-unit id="a7dd7b61c3f4afceb685b2dcaca77c903eca6fdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; command-line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.</source>
          <target state="translated">The &lt;code&gt;--preserve-symlinks&lt;/code&gt; command-line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.</target>
        </trans-unit>
        <trans-unit id="dd2428085953e3e18c912f639e577dc736a3e57d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--preserve-symlinks&lt;/code&gt; flag does not apply to the main module, which allows &lt;code&gt;node --preserve-symlinks node_module/.bin/&amp;lt;foo&amp;gt;&lt;/code&gt; to work. To apply the same behavior for the main module, also use &lt;code&gt;--preserve-symlinks-main&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--preserve-symlinks&lt;/code&gt; フラグができ、メインモジュールには適用されない &lt;code&gt;node --preserve-symlinks node_module/.bin/&amp;lt;foo&amp;gt;&lt;/code&gt; 仕事に。同じ動作をメインモジュールに適用するには、 &lt;code&gt;--preserve-symlinks-main&lt;/code&gt; も使用します。</target>
        </trans-unit>
        <trans-unit id="60f5204e6156c13b879f75bc2bdeb77cd740b764" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--require&lt;/code&gt; option is now supported when checking a file.</source>
          <target state="translated">&lt;code&gt;--require&lt;/code&gt; ファイルをチェックする際にオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="03afc2a2819725a665ff93384497c5a6dd67974e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag and &lt;code&gt;process.throwDeprecation&lt;/code&gt; property take precedence over &lt;code&gt;--trace-deprecation&lt;/code&gt; and &lt;code&gt;process.traceDeprecation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--throw-deprecation&lt;/code&gt; コマンドラインフラグと &lt;code&gt;process.throwDeprecation&lt;/code&gt; 以上の財産が優先 &lt;code&gt;--trace-deprecation&lt;/code&gt; と &lt;code&gt;process.traceDeprecation&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbe5ddd12c6b5434ff18372c08067f1d56183830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--throw-deprecation&lt;/code&gt; command-line flag and &lt;code&gt;process.throwDeprecation&lt;/code&gt; property take precedence over &lt;code&gt;--trace-deprecation&lt;/code&gt; and &lt;code&gt;process.traceDeprecation&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;--throw-deprecation&lt;/code&gt; command-line flag and &lt;code&gt;process.throwDeprecation&lt;/code&gt; property take precedence over &lt;code&gt;--trace-deprecation&lt;/code&gt; and &lt;code&gt;process.traceDeprecation&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7748e47658d28f465e0f702908443bffd47e5677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace-warnings&lt;/code&gt; command-line option can be used to have the default console output for warnings include the full stack trace of the warning.</source>
          <target state="translated">&lt;code&gt;--trace-warnings&lt;/code&gt; 警告は警告の完全なスタックトレースを含めるためのコマンドラインオプションは、デフォルトのコンソール出力を持つように使用することができます。</target>
        </trans-unit>
        <trans-unit id="910fc4fb3a34a12cbb451f186082373ce6a56fd4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--with-lttng&lt;/code&gt; compile-time option has been removed.</source>
          <target state="translated">&lt;code&gt;--with-lttng&lt;/code&gt; コンパイル時のオプションが削除されました。</target>
        </trans-unit>
        <trans-unit id="49ec27d09eca7302b82dba6c21ef5b6de51165b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command line option</source>
          <target state="translated">&lt;code&gt;--zero-fill-buffers&lt;/code&gt; コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="feb7ddf125536fe2726807180ff32dd4f36b301b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command-line option</source>
          <target state="translated">The &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command-line option</target>
        </trans-unit>
        <trans-unit id="d44bdf199493a6f91f2c55bd7a0d4dafee53ad3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are not considered equal anymore.</source>
          <target state="translated">&lt;code&gt;-0&lt;/code&gt; と &lt;code&gt;+0&lt;/code&gt; はもはや等しいと見なされていません。</target>
        </trans-unit>
        <trans-unit id="64c98a5e7ac18374fc6663c8752491fc56a08fa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; extensions may be used to mix types within the same package scope:</source>
          <target state="translated">&lt;code&gt;.mjs&lt;/code&gt; と &lt;code&gt;.cjs&lt;/code&gt; の拡張機能は、同じパッケージの範囲内で型を混合するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d9f9c6fe1bda6cb495fc50c09400d829c18834be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:method&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; pseudo-headers are not specified within &lt;code&gt;headers&lt;/code&gt;, they respectively default to:</source>
          <target state="translated">&lt;code&gt;:method&lt;/code&gt; と &lt;code&gt;:path&lt;/code&gt; 疑似ヘッダは内で指定されていない &lt;code&gt;headers&lt;/code&gt; 、それらはそれぞれにデフォルト：</target>
        </trans-unit>
        <trans-unit id="0fbdd10cf14e123063f1ad68f662b994e5b14f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:status&lt;/code&gt; header is converted to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:status&lt;/code&gt; ヘッダに変換される &lt;code&gt;number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19b2b078e03ca61c0c3a2ac02bbf791223c851cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ALPNProtocols&lt;/code&gt; option can be a &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;ALPNProtocols&lt;/code&gt; のオプションが可能 &lt;code&gt;TypedArray&lt;/code&gt; または &lt;code&gt;DataView&lt;/code&gt; の今。</target>
        </trans-unit>
        <trans-unit id="d95460bcf082c4b92776fd0735511e83d3058398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt; is considered detached if its internal data is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;ArrayBuffer&lt;/code&gt; is considered detached if its internal data is &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="475870025e28f149e9ccab4883b8050b39585b6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArrayBuffer&lt;/code&gt;s for &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;code&gt;Buffer.alloc()&lt;/code&gt; or &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; can always be transferred but doing so will render all other existing views of those &lt;code&gt;ArrayBuffer&lt;/code&gt;s unusable.</source>
          <target state="translated">The &lt;code&gt;ArrayBuffer&lt;/code&gt; s for &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;code&gt;Buffer.alloc()&lt;/code&gt; or &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; can always be transferred but doing so will render all other existing views of those &lt;code&gt;ArrayBuffer&lt;/code&gt; s unusable.</target>
        </trans-unit>
        <trans-unit id="03c0a26d735adb90e83ae84b4b23b480f2bb6077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncHook&lt;/code&gt; instance is disabled by default. If the &lt;code&gt;AsyncHook&lt;/code&gt; instance should be enabled immediately after creation, the following pattern can be used.</source>
          <target state="translated">&lt;code&gt;AsyncHook&lt;/code&gt; のインスタンスは、デフォルトでは無効になっています。 &lt;code&gt;AsyncHook&lt;/code&gt; インスタンスを作成直後に有効にする必要がある場合は、次のパターンを使用できます。</target>
        </trans-unit>
        <trans-unit id="92482e3afbb86a30bca701deea5ef5e1aa3b1852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer()&lt;/code&gt; function and &lt;code&gt;new Buffer()&lt;/code&gt; constructor are deprecated due to API usability issues that can lead to accidental security issues.</source>
          <target state="translated">&lt;code&gt;Buffer()&lt;/code&gt; 関数と &lt;code&gt;new Buffer()&lt;/code&gt; コンストラクタは、偶発的なセキュリティ上の問題につながる可能APIのユーザビリティの問題が原因推奨されていません。</target>
        </trans-unit>
        <trans-unit id="17975c7ac6c9252a591d0f88b25f283db9f71165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer.from()&lt;/code&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from&quot;&gt;&lt;code&gt;TypedArray.from()&lt;/code&gt;&lt;/a&gt; have different signatures and implementations. Specifically, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; variants accept a second argument that is a mapping function that is invoked on every element of the typed array:</source>
          <target state="translated">&lt;code&gt;Buffer.from()&lt;/code&gt; と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from&quot;&gt; &lt;code&gt;TypedArray.from()&lt;/code&gt; は、&lt;/a&gt;異なるシグネチャと実装を持っています。具体的には、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;バリアントは、型付き配列のすべての要素で呼び出されるマッピング関数である2番目の引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="e3314f82d53657bb32c8b0bf63f070d1a392cb08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer.from()&lt;/code&gt; method, however, does not support the use of a mapping function:</source>
          <target state="translated">&lt;code&gt;Buffer.from()&lt;/code&gt; メソッドは、しかし、マッピング関数の使用をサポートしません。</target>
        </trans-unit>
        <trans-unit id="3d48187fc23c783eaffae70401964e0da90c39c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is a global type for dealing with binary data directly. It can be constructed in a variety of ways.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; クラスは、直接バイナリデータを扱うための世界的なタイプです。さまざまな方法で構築できます。</target>
        </trans-unit>
        <trans-unit id="c324bad1ff2d43adea12270c9d6512d23e39210d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is a subclass of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt; class and extends it with methods that cover additional use cases. Node.js APIs accept plain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;s wherever &lt;code&gt;Buffer&lt;/code&gt;s are supported as well.</source>
          <target state="translated">The &lt;code&gt;Buffer&lt;/code&gt; class is a subclass of JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt; class and extends it with methods that cover additional use cases. Node.js APIs accept plain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;s wherever &lt;code&gt;Buffer&lt;/code&gt; s are supported as well.</target>
        </trans-unit>
        <trans-unit id="585f3b86fff89664ab6131088e4c31921218b060" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; class is within the global scope, making it unlikely that one would need to ever use &lt;code&gt;require('buffer').Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; クラスには、それはそう1が今まで使用する必要があるだろうとなって、世界的な範囲内である &lt;code&gt;require('buffer').Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="684e7abad764687ae152e1366f4fcfb15875aae7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; module pre-allocates an internal &lt;code&gt;Buffer&lt;/code&gt; instance of size &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; that is used as a pool for the fast allocation of new &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and the deprecated &lt;code&gt;new Buffer(size)&lt;/code&gt; constructor only when &lt;code&gt;size&lt;/code&gt; is less than or equal to &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; (floor of &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; divided by two).</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; 内部モジュール事前割り当て &lt;code&gt;Buffer&lt;/code&gt; サイズのインスタンス&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt;新規の迅速な割り当てのためのプールとして使用される &lt;code&gt;Buffer&lt;/code&gt; のインスタンスが使用して作成した&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;と廃止予定 &lt;code&gt;new Buffer(size)&lt;/code&gt; のみコンストラクタ &lt;code&gt;size&lt;/code&gt; 小さいですか等しい &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; （の床&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; を&lt;/a&gt; 2で割りました）。</target>
        </trans-unit>
        <trans-unit id="62c3136cd0be230971fef263cbe02fa854030dba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; module pre-allocates an internal &lt;code&gt;Buffer&lt;/code&gt; instance of size &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; that is used as a pool for the fast allocation of new &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_static_method_buffer_from_array&quot;&gt;&lt;code&gt;Buffer.from(array)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_static_method_buffer_concat_list_totallength&quot;&gt;&lt;code&gt;Buffer.concat()&lt;/code&gt;&lt;/a&gt;, and the deprecated &lt;code&gt;new Buffer(size)&lt;/code&gt; constructor only when &lt;code&gt;size&lt;/code&gt; is less than or equal to &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; (floor of &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt; divided by two).</source>
          <target state="translated">The &lt;code&gt;Buffer&lt;/code&gt; module pre-allocates an internal &lt;code&gt;Buffer&lt;/code&gt; instance of size &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt; that is used as a pool for the fast allocation of new &lt;code&gt;Buffer&lt;/code&gt; instances created using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#buffer_static_method_buffer_from_array&quot;&gt; &lt;code&gt;Buffer.from(array)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#buffer_static_method_buffer_concat_list_totallength&quot;&gt; &lt;code&gt;Buffer.concat()&lt;/code&gt; &lt;/a&gt;, and the deprecated &lt;code&gt;new Buffer(size)&lt;/code&gt; constructor only when &lt;code&gt;size&lt;/code&gt; is less than or equal to &lt;code&gt;Buffer.poolSize &amp;gt;&amp;gt; 1&lt;/code&gt; (floor of &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; &lt;/a&gt; divided by two).</target>
        </trans-unit>
        <trans-unit id="c34c1579f9d3091d1c40fe60dbec8ff7528291ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; object's memory is copied to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;, not shared.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; オブジェクトのメモリがにコピーされ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;共有されません。</target>
        </trans-unit>
        <trans-unit id="704b960d42ce6ee4bea2be6057aa3c3ef4d88b3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt; object's memory is interpreted as an array of distinct elements, and not as a byte array of the target type. That is, &lt;code&gt;new Uint32Array(Buffer.from([1, 2, 3, 4]))&lt;/code&gt; creates a 4-element &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt; with elements &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;, not a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt;&lt;code&gt;Uint32Array&lt;/code&gt;&lt;/a&gt; with a single element &lt;code&gt;[0x1020304]&lt;/code&gt; or &lt;code&gt;[0x4030201]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; オブジェクトのメモリは、別個の要素の配列としてではなく、ターゲット・タイプのバイト配列として解釈されます。すなわち、 &lt;code&gt;new Uint32Array(Buffer.from([1, 2, 3, 4]))&lt;/code&gt; 4要素作成&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; &lt;/a&gt;要素を有する &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt; ではなく&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&quot;&gt; &lt;code&gt;Uint32Array&lt;/code&gt; を&lt;/a&gt;単一の要素で &lt;code&gt;[0x1020304]&lt;/code&gt; または &lt;code&gt;[0x4030201]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11eb58ed11164726ce6d21f520f0f89a5b64939a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Buffer&lt;/code&gt;s class now inherits from &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; のクラスは今から継承 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cf8ace03d30403e070d9de4de22190c4288a09e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CONNECT&lt;/code&gt; method is used to allow an HTTP/2 server to be used as a proxy for TCP/IP connections.</source>
          <target state="translated">&lt;code&gt;CONNECT&lt;/code&gt; の方法は、HTTP / 2サーバは、TCP / IP接続のためのプロキシとして使用されることを可能にするために使用されます。</target>
        </trans-unit>
        <trans-unit id="961a4f20e145645fc8ffca7ac16191a131fc024d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ClientHttp2Stream&lt;/code&gt; class is an extension of &lt;code&gt;Http2Stream&lt;/code&gt; that is used exclusively on HTTP/2 Clients. &lt;code&gt;Http2Stream&lt;/code&gt; instances on the client provide events such as &lt;code&gt;'response'&lt;/code&gt; and &lt;code&gt;'push'&lt;/code&gt; that are only relevant on the client.</source>
          <target state="translated">&lt;code&gt;ClientHttp2Stream&lt;/code&gt; のクラスはの拡張である &lt;code&gt;Http2Stream&lt;/code&gt; HTTP / 2クライアントでのみ使用されます。クライアントの &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、 &lt;code&gt;'response'&lt;/code&gt; や &lt;code&gt;'push'&lt;/code&gt; など、クライアントにのみ関連するイベントを提供します。</target>
        </trans-unit>
        <trans-unit id="237dfac99ceb30113262b74862ab7b982fdd765f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Console&lt;/code&gt; class can be used to create a simple logger with configurable output streams and can be accessed using either &lt;code&gt;require('console').Console&lt;/code&gt; or &lt;code&gt;console.Console&lt;/code&gt; (or their destructured counterparts):</source>
          <target state="translated">&lt;code&gt;Console&lt;/code&gt; クラスは、構成可能な出力ストリームを持つ単純なロガーを作成するために使用することができ、いずれかを使用してアクセスすることができる &lt;code&gt;require('console').Console&lt;/code&gt; または &lt;code&gt;console.Console&lt;/code&gt; （またはそれらの非構造対応）。</target>
        </trans-unit>
        <trans-unit id="b3479b91f4a9f06b22b5fca034870dcb3c3d2180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Console&lt;/code&gt; constructor now supports an &lt;code&gt;options&lt;/code&gt; argument, and the &lt;code&gt;colorMode&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;Console&lt;/code&gt; コンストラクタがサポートするようになりまし &lt;code&gt;options&lt;/code&gt; 引数を、そして &lt;code&gt;colorMode&lt;/code&gt; オプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="95647c259880f4c6867e28a035da609cf9f22a98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CryptoStream.prototype.readyState&lt;/code&gt; property was removed.</source>
          <target state="translated">&lt;code&gt;CryptoStream.prototype.readyState&lt;/code&gt; プロパティが削除されました。</target>
        </trans-unit>
        <trans-unit id="9e1415e933cffef1a94867e2ba597a959a2e5d9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiffieHellman&lt;/code&gt; class is a utility for creating Diffie-Hellman key exchanges.</source>
          <target state="translated">&lt;code&gt;DiffieHellman&lt;/code&gt; クラスはてDiffieHellmanの鍵交換を作成するためのユーティリティです。</target>
        </trans-unit>
        <trans-unit id="9548581b93240d640677667523fd0ee94db7798f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiffieHellmanGroup&lt;/code&gt; class takes a well-known modp group as its argument but otherwise works the same as &lt;code&gt;DiffieHellman&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DiffieHellmanGroup&lt;/code&gt; のクラスは引数としてよく知られているMODPグループを取りますが、それ以外と同じように動作し &lt;code&gt;DiffieHellman&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cec2a1fa9c52fe93d5184901be8bdb624d2dbeb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Domain&lt;/code&gt; class encapsulates the functionality of routing errors and uncaught exceptions to the active &lt;code&gt;Domain&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; クラスがアクティブにエラーとキャッチされない例外をルーティングする機能をカプセル化 &lt;code&gt;Domain&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="5c6c84190a5e08be666ab662c685f538c6bff7f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ECDH&lt;/code&gt; class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH) key exchanges.</source>
          <target state="translated">&lt;code&gt;ECDH&lt;/code&gt; のクラスは、楕円曲線ディフィ-ヘルマン（ECDH）鍵交換を作成するためのユーティリティです。</target>
        </trans-unit>
        <trans-unit id="a60e7d3da510710daa286f535baa3630ec9f2729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error.stackTraceLimit&lt;/code&gt; property specifies the number of stack frames collected by a stack trace (whether generated by &lt;code&gt;new Error().stack&lt;/code&gt; or &lt;code&gt;Error.captureStackTrace(obj)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Error.stackTraceLimit&lt;/code&gt; のプロパティには、スタックトレース（によって生成されたかどうかによって収集されたスタックフレームの数を指定する &lt;code&gt;new Error().stack&lt;/code&gt; または &lt;code&gt;Error.captureStackTrace(obj)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5591cd885f1b8837637fc0c070419a2cc4315071" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error&lt;/code&gt; names and messages are now properly compared</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; 名とメッセージが正しく比較され、</target>
        </trans-unit>
        <trans-unit id="6d70cd1f85ef1cd10c7f2afc95d923aa3e5918fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Error&lt;/code&gt; names and messages are now properly compared.</source>
          <target state="translated">The &lt;code&gt;Error&lt;/code&gt; names and messages are now properly compared.</target>
        </trans-unit>
        <trans-unit id="4af3ec96374fb254981cd79c18307654700f7f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event&lt;/code&gt; object is an adaptation of the &lt;a href=&quot;https://dom.spec.whatwg.org/#event&quot;&gt;&lt;code&gt;Event&lt;/code&gt; Web API&lt;/a&gt;. Instances are created internally by Node.js.</source>
          <target state="translated">The &lt;code&gt;Event&lt;/code&gt; object is an adaptation of the &lt;a href=&quot;https://dom.spec.whatwg.org/#event&quot;&gt; &lt;code&gt;Event&lt;/code&gt; Web API&lt;/a&gt;. Instances are created internally by Node.js.</target>
        </trans-unit>
        <trans-unit id="592ba923f31c491ba205843bb76ee4127c1a878f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; calls all listeners synchronously in the order in which they were registered. This ensures the proper sequencing of events and helps avoid race conditions and logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the &lt;code&gt;setImmediate()&lt;/code&gt; or &lt;code&gt;process.nextTick()&lt;/code&gt; methods:</source>
          <target state="translated">The &lt;code&gt;EventEmitter&lt;/code&gt; calls all listeners synchronously in the order in which they were registered. This ensures the proper sequencing of events and helps avoid race conditions and logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the &lt;code&gt;setImmediate()&lt;/code&gt; or &lt;code&gt;process.nextTick()&lt;/code&gt; methods:</target>
        </trans-unit>
        <trans-unit id="74c3defd6a5b6deb5cd891de560ee91dc83a92e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; calls all listeners synchronously in the order in which they were registered. This is important to ensure the proper sequencing of events and to avoid race conditions or logic errors. When appropriate, listener functions can switch to an asynchronous mode of operation using the &lt;code&gt;setImmediate()&lt;/code&gt; or &lt;code&gt;process.nextTick()&lt;/code&gt; methods:</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; それらが登録された順に同期すべてのリスナーを呼び出します。これは、イベントの適切なシーケンスを確保し、競合状態や論理エラーを回避するために重要です。リスナー関数は、必要に応じて、 &lt;code&gt;setImmediate()&lt;/code&gt; &lt;code&gt;process.nextTick()&lt;/code&gt; メソッドまたはprocess.nextTick（）メソッドを使用して、操作の非同期モードに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="510d148ff0fbe98acf30ab9a2081857d2a93f0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; class is defined and exposed by the &lt;code&gt;events&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; クラスは以下のように定義し、公開された &lt;code&gt;events&lt;/code&gt; モジュール：</target>
        </trans-unit>
        <trans-unit id="f6e23e7067c0e5dbaa40a250b4e464457e7b388e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventEmitter&lt;/code&gt; instance will emit its own &lt;code&gt;'newListener'&lt;/code&gt; event &lt;em&gt;before&lt;/em&gt; a listener is added to its internal array of listeners.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; インスタンスは、それ自身の発する &lt;code&gt;'newListener'&lt;/code&gt; イベント&lt;em&gt;の前に&lt;/em&gt;リスナーがリスナーの内部配列に追加されます。</target>
        </trans-unit>
        <trans-unit id="4a341b74c517c84bf3e5a60449e0f2e75f8dcfd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventTarget&lt;/code&gt; and &lt;code&gt;Event&lt;/code&gt; objects are a Node.js-specific implementation of the &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt; that are exposed by some Node.js core APIs. Neither the &lt;code&gt;EventTarget&lt;/code&gt; nor &lt;code&gt;Event&lt;/code&gt; classes are available for end user code to create.</source>
          <target state="translated">The &lt;code&gt;EventTarget&lt;/code&gt; and &lt;code&gt;Event&lt;/code&gt; objects are a Node.js-specific implementation of the &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt; that are exposed by some Node.js core APIs. Neither the &lt;code&gt;EventTarget&lt;/code&gt; nor &lt;code&gt;Event&lt;/code&gt; classes are available for end user code to create.</target>
        </trans-unit>
        <trans-unit id="6085064ba50c1200381a07957eb0c76efc671fdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventTarget&lt;/code&gt; does not implement any special default handling for &lt;code&gt;'error'&lt;/code&gt; type events.</source>
          <target state="translated">The &lt;code&gt;EventTarget&lt;/code&gt; does not implement any special default handling for &lt;code&gt;'error'&lt;/code&gt; type events.</target>
        </trans-unit>
        <trans-unit id="dfeb1c49ebfaf5bf934d6b81d566edb3d8c7c526" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; has to support reading.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 読み取りをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="0012f3238be8c04c425f3363b4025fdc1063a019" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; has to support writing.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 書き込みをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="0c94a51970f81440252550d4c9273fb0d1f4f92b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandle&lt;/code&gt; must have been opened for appending.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; 追加用に開かれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="11154ab149b6892234ea37a705b7295182b7ed53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GLOBAL&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; aliases for the &lt;code&gt;global&lt;/code&gt; property are deprecated and should no longer be used.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; プロパティの &lt;code&gt;GLOBAL&lt;/code&gt; エイリアスと &lt;code&gt;root&lt;/code&gt; エイリアスは非推奨であり、今後は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c7e767280b3d7089db372e4a39184c6e2d2dc21f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GLOBAL&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; aliases for the &lt;code&gt;global&lt;/code&gt; property were deprecated in Node.js 6.0.0 and have since been removed.</source>
          <target state="translated">The &lt;code&gt;GLOBAL&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; aliases for the &lt;code&gt;global&lt;/code&gt; property were deprecated in Node.js 6.0.0 and have since been removed.</target>
        </trans-unit>
        <trans-unit id="0e9e7f936801f2c6f1cd03b0afd04159b01fbe53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; class is a utility for creating hash digests of data. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Hash&lt;/code&gt; クラスは、データのハッシュダイジェストを作成するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="5b0e3b2329da4f0248f2e06ac742acc1bb19364e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hash&lt;/code&gt; object can not be used again after &lt;code&gt;hash.digest()&lt;/code&gt; method has been called. Multiple calls will cause an error to be thrown.</source>
          <target state="translated">&lt;code&gt;hash.digest()&lt;/code&gt; メソッドが呼び出された後は、 &lt;code&gt;Hash&lt;/code&gt; オブジェクトを再び使用することはできません。複数の呼び出しを行うと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="4d73cdb3a8800f6f58788222cf6b09a4e16e9704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hmac&lt;/code&gt; class is a utility for creating cryptographic HMAC digests. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Hmac&lt;/code&gt; クラスは、暗号HMACダイジェストを作成するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="34a6f3c385334289cc8dca5ad57af1aa934cc351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Hmac&lt;/code&gt; object can not be used again after &lt;code&gt;hmac.digest()&lt;/code&gt; has been called. Multiple calls to &lt;code&gt;hmac.digest()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;hmac.digest()&lt;/code&gt; が呼び出された後は、 &lt;code&gt;Hmac&lt;/code&gt; オブジェクトを再び使用することはできません。 &lt;code&gt;hmac.digest()&lt;/code&gt; を複数回呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="fdd188407a46759b1ee1c35887ef9c7a825bdfd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; closed with a non-zero error code.</source>
          <target state="translated">&lt;code&gt;Http2Session&lt;/code&gt; は非ゼロのエラーコードで閉じ。</target>
        </trans-unit>
        <trans-unit id="5d76c8b39de5b7fc902fab8ede861ae4cc2fc88c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; instance will be shut down automatically when the &lt;code&gt;'goaway'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;'goaway'&lt;/code&gt; イベントが発行されると、 &lt;code&gt;Http2Session&lt;/code&gt; インスタンスは自動的にシャットダウンされます。</target>
        </trans-unit>
        <trans-unit id="d7caf622fab7b5caf40c57aeb0f0bd26ae301dc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Session&lt;/code&gt; settings canceled.</source>
          <target state="translated">&lt;code&gt;Http2Session&lt;/code&gt; の設定がキャンセルされました。</target>
        </trans-unit>
        <trans-unit id="51e143abb35647df3e2b943997a955c876171f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Http2Stream&lt;/code&gt; class is a base for the &lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt;&lt;code&gt;ServerHttp2Stream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt;&lt;code&gt;ClientHttp2Stream&lt;/code&gt;&lt;/a&gt; classes, each of which is used specifically by either the Server or Client side, respectively.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; クラスはのベースで&lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt; &lt;code&gt;ServerHttp2Stream&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt; &lt;code&gt;ClientHttp2Stream&lt;/code&gt; &lt;/a&gt;それぞれ、具体的にサーバまたはクライアント側のいずれかで使用されそれぞれがクラス。</target>
        </trans-unit>
        <trans-unit id="598e51e3af2bb4e6222164b78922892e71acb6ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MTU&lt;/code&gt; is the largest size a given link layer technology can support for datagram messages. For any link, &lt;code&gt;IPv4&lt;/code&gt; mandates a minimum &lt;code&gt;MTU&lt;/code&gt; of &lt;code&gt;68&lt;/code&gt; octets, while the recommended &lt;code&gt;MTU&lt;/code&gt; for IPv4 is &lt;code&gt;576&lt;/code&gt; (typically recommended as the &lt;code&gt;MTU&lt;/code&gt; for dial-up type applications), whether they arrive whole or in fragments.</source>
          <target state="translated">&lt;code&gt;MTU&lt;/code&gt; は、与えられたリンクレイヤ技術は、データグラム・メッセージのためにサポートできる最大サイズです。どのリンクでも、 &lt;code&gt;IPv4&lt;/code&gt; は &lt;code&gt;68&lt;/code&gt; オクテットの最小 &lt;code&gt;MTU&lt;/code&gt; を要求しますが、IPv4 の推奨 &lt;code&gt;MTU&lt;/code&gt; は、全体またはフラグメントで到着するかどうかにかかわらず、 &lt;code&gt;576&lt;/code&gt; （通常、ダイヤルアップタイプアプリケーションの &lt;code&gt;MTU&lt;/code&gt; として推奨）です。</target>
        </trans-unit>
        <trans-unit id="0ebe6acbbe9179acb26e22c76b54180472959828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MTU&lt;/code&gt; is the largest size a given link layer technology can support for datagram messages. For any link, IPv4 mandates a minimum &lt;code&gt;MTU&lt;/code&gt; of 68 octets, while the recommended &lt;code&gt;MTU&lt;/code&gt; for IPv4 is 576 (typically recommended as the &lt;code&gt;MTU&lt;/code&gt; for dial-up type applications), whether they arrive whole or in fragments.</source>
          <target state="translated">The &lt;code&gt;MTU&lt;/code&gt; is the largest size a given link layer technology can support for datagram messages. For any link, IPv4 mandates a minimum &lt;code&gt;MTU&lt;/code&gt; of 68 octets, while the recommended &lt;code&gt;MTU&lt;/code&gt; for IPv4 is 576 (typically recommended as the &lt;code&gt;MTU&lt;/code&gt; for dial-up type applications), whether they arrive whole or in fragments.</target>
        </trans-unit>
        <trans-unit id="3d73d38a7b4edc972c4eca60995c75fac0b6f4da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module._debug()&lt;/code&gt; function was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;Module._debug()&lt;/code&gt; 関数は、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="3902051e46408eac3f37f5cbedc575dbfa43f481" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="b8b4fbe63983de1a4ce3fdaf4fbf8edbc27571a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; object</source>
          <target state="translated">The &lt;code&gt;Module&lt;/code&gt; object</target>
        </trans-unit>
        <trans-unit id="91d8733f70a3ed59c4e362014169d60d93f70694" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module&lt;/code&gt; object representing the entry script loaded when the Node.js process launched. See &lt;a href=&quot;#modules_accessing_the_main_module&quot;&gt;&quot;Accessing the main module&quot;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; Node.jsのプロセスが起動時にエントリスクリプトを表すオブジェクトがロードされました。&lt;a href=&quot;#modules_accessing_the_main_module&quot;&gt;「メインモジュールへのアクセス」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f548961702fbdaa669c57caf04ec1584e86af9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NODE_REPL_HISTORY_FILE&lt;/code&gt; environment variable was removed. Please use &lt;code&gt;NODE_REPL_HISTORY&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;NODE_REPL_HISTORY_FILE&lt;/code&gt; の環境変数を除去しました。代わりに &lt;code&gt;NODE_REPL_HISTORY&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="07a5ed6c3b03bfe0f86b3d27a6b9e92fabe92726" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NODE_REPL_MODE&lt;/code&gt; environment variable is used to set the underlying &lt;code&gt;replMode&lt;/code&gt; of an interactive &lt;code&gt;node&lt;/code&gt; session. Its value, &lt;code&gt;magic&lt;/code&gt;, is also removed. Please use &lt;code&gt;sloppy&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;NODE_REPL_MODE&lt;/code&gt; の環境変数は、基礎となる設定するために使用される &lt;code&gt;replMode&lt;/code&gt; 対話の &lt;code&gt;node&lt;/code&gt; セッション。その値 &lt;code&gt;magic&lt;/code&gt; も削除されます。代わりに &lt;code&gt;sloppy&lt;/code&gt; 使用をしてください。</target>
        </trans-unit>
        <trans-unit id="4f57d31fa24c9ab8fa6b54112c6d279905574a10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NaN&lt;/code&gt; is now compared using the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevaluezero&quot;&gt;SameValueZero&lt;/a&gt; comparison.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; は今使用して比較され&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-samevaluezero&quot;&gt;SameValueZeroの&lt;/a&gt;比較を。</target>
        </trans-unit>
        <trans-unit id="4b609916962b3f8e346e756ff269f2b261ec8a79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeEventTarget&lt;/code&gt; does not emulate the full &lt;code&gt;EventEmitter&lt;/code&gt; API. Specifically the &lt;code&gt;prependListener()&lt;/code&gt;, &lt;code&gt;prependOnceListener()&lt;/code&gt;, &lt;code&gt;rawListeners()&lt;/code&gt;, &lt;code&gt;setMaxListeners()&lt;/code&gt;, &lt;code&gt;getMaxListeners()&lt;/code&gt;, and &lt;code&gt;errorMonitor&lt;/code&gt; APIs are not emulated. The &lt;code&gt;'newListener'&lt;/code&gt; and &lt;code&gt;'removeListener'&lt;/code&gt; events will also not be emitted.</source>
          <target state="translated">The &lt;code&gt;NodeEventTarget&lt;/code&gt; does not emulate the full &lt;code&gt;EventEmitter&lt;/code&gt; API. Specifically the &lt;code&gt;prependListener()&lt;/code&gt; , &lt;code&gt;prependOnceListener()&lt;/code&gt; , &lt;code&gt;rawListeners()&lt;/code&gt; , &lt;code&gt;setMaxListeners()&lt;/code&gt; , &lt;code&gt;getMaxListeners()&lt;/code&gt; , and &lt;code&gt;errorMonitor&lt;/code&gt; APIs are not emulated. The &lt;code&gt;'newListener'&lt;/code&gt; and &lt;code&gt;'removeListener'&lt;/code&gt; events will also not be emitted.</target>
        </trans-unit>
        <trans-unit id="a8041cfc266bfb98f8b8bf3fc8f20ef868f40da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeEventTarget&lt;/code&gt; does not implement any special default behavior for events with type &lt;code&gt;'error'&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;NodeEventTarget&lt;/code&gt; does not implement any special default behavior for events with type &lt;code&gt;'error'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="076604ec363756cb8762d1b3a729e19e113b416f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeEventTarget&lt;/code&gt; is a Node.js-specific extension to &lt;code&gt;EventTarget&lt;/code&gt; that emulates a subset of the &lt;code&gt;EventEmitter&lt;/code&gt; API.</source>
          <target state="translated">The &lt;code&gt;NodeEventTarget&lt;/code&gt; is a Node.js-specific extension to &lt;code&gt;EventTarget&lt;/code&gt; that emulates a subset of the &lt;code&gt;EventEmitter&lt;/code&gt; API.</target>
        </trans-unit>
        <trans-unit id="3d370c6c10dd5c2299b427f242377df1e6c79ab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeEventTarget&lt;/code&gt; object implements a modified subset of the &lt;code&gt;EventEmitter&lt;/code&gt; API that allows it to closely &lt;em&gt;emulate&lt;/em&gt; an &lt;code&gt;EventEmitter&lt;/code&gt; in certain situations. A &lt;code&gt;NodeEventTarget&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an instance of &lt;code&gt;EventEmitter&lt;/code&gt; and cannot be used in place of an &lt;code&gt;EventEmitter&lt;/code&gt; in most cases.</source>
          <target state="translated">The &lt;code&gt;NodeEventTarget&lt;/code&gt; object implements a modified subset of the &lt;code&gt;EventEmitter&lt;/code&gt; API that allows it to closely &lt;em&gt;emulate&lt;/em&gt; an &lt;code&gt;EventEmitter&lt;/code&gt; in certain situations. A &lt;code&gt;NodeEventTarget&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; an instance of &lt;code&gt;EventEmitter&lt;/code&gt; and cannot be used in place of an &lt;code&gt;EventEmitter&lt;/code&gt; in most cases.</target>
        </trans-unit>
        <trans-unit id="4bef2db93ebe1b179b9d5720a17ef7184b9239af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeEventTarget&lt;/code&gt; supports &lt;code&gt;EventListener&lt;/code&gt; objects as well as functions as handlers for all event types.</source>
          <target state="translated">The &lt;code&gt;NodeEventTarget&lt;/code&gt; supports &lt;code&gt;EventListener&lt;/code&gt; objects as well as functions as handlers for all event types.</target>
        </trans-unit>
        <trans-unit id="f25d757bb0437c0808e30a2c56e76be0fefee1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; and &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; properties were never documented as officially supported properties.</source>
          <target state="translated">&lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; と &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; プロパティが正式にサポートされているプロパティとして文書化されませんでした。</target>
        </trans-unit>
        <trans-unit id="25fe5fbbbdb21df3c56b73ffd31d112176c4a754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype._renderHeaders&lt;/code&gt; property was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;OutgoingMessage.prototype._renderHeaders&lt;/code&gt; プロパティは、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="85be1dae89516e838a638d632c276365895d2cca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OutgoingMessage.prototype.flush()&lt;/code&gt; method is deprecated. Use &lt;code&gt;OutgoingMessage.prototype.flushHeaders()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;OutgoingMessage.prototype.flush()&lt;/code&gt; メソッドは推奨されています。代わりに &lt;code&gt;OutgoingMessage.prototype.flushHeaders()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="44c5d1f0ef56b375aabe443d5920e6371e64fa99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PADDING_STRATEGY_CALLBACK&lt;/code&gt; has been made equivalent to providing &lt;code&gt;PADDING_STRATEGY_ALIGNED&lt;/code&gt; and &lt;code&gt;selectPadding&lt;/code&gt; has been removed.</source>
          <target state="translated">The &lt;code&gt;PADDING_STRATEGY_CALLBACK&lt;/code&gt; has been made equivalent to providing &lt;code&gt;PADDING_STRATEGY_ALIGNED&lt;/code&gt; and &lt;code&gt;selectPadding&lt;/code&gt; has been removed.</target>
        </trans-unit>
        <trans-unit id="96e06b7fd51dcd1800a0a50b878c27cdd7872eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Payload Length&lt;/code&gt; field is 16 bits wide, which means that a normal payload cannot exceed 64K octets including the internet header and data (65,507 bytes = 65,535 &amp;minus; 8 bytes UDP header &amp;minus; 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.</source>
          <target state="translated">The &lt;code&gt;Payload Length&lt;/code&gt; field is 16 bits wide, which means that a normal payload cannot exceed 64K octets including the internet header and data (65,507 bytes = 65,535 &amp;minus; 8 bytes UDP header &amp;minus; 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.</target>
        </trans-unit>
        <trans-unit id="7583c7bd3ce3415e55d127bad13f53b600328ee0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Payload Length&lt;/code&gt; field is &lt;code&gt;16 bits&lt;/code&gt; wide, which means that a normal payload exceed 64K octets &lt;em&gt;including&lt;/em&gt; the internet header and data (65,507 bytes = 65,535 &amp;minus; 8 bytes UDP header &amp;minus; 20 bytes IP header); this is generally true for loopback interfaces, but such long datagram messages are impractical for most hosts and networks.</source>
          <target state="translated">&lt;code&gt;Payload Length&lt;/code&gt; フィールドは、 &lt;code&gt;16 bits&lt;/code&gt; ノーマルペイロードは64Kオクテット上回ることを意味する広い、&lt;em&gt;を含む&lt;/em&gt;インターネットヘッダとデータを（65507バイト= 65,535 - 8バイトのUDPヘッダー- 20バイトのIPヘッダ）; これは一般にループバックインターフェイスに当てはまりますが、このような長いデータグラムメッセージは、ほとんどのホストおよびネットワークにとって非現実的です。</target>
        </trans-unit>
        <trans-unit id="11322df6e8f3a45b7544ddbfd8fe2899ff90b6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; class is used to provide access to the &lt;code&gt;PerformanceEntry&lt;/code&gt; instances passed to a &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; のクラスはへのアクセスを提供するために使用される &lt;code&gt;PerformanceEntry&lt;/code&gt; のに渡されたインスタンス &lt;code&gt;PerformanceObserver&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="9fc52b19db49da11707502b642a5a54bf8dff18f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; class is used to provide access to the &lt;code&gt;PerformanceEntry&lt;/code&gt; instances passed to a &lt;code&gt;PerformanceObserver&lt;/code&gt;. The constructor of this class is not exposed to users.</source>
          <target state="translated">The &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; class is used to provide access to the &lt;code&gt;PerformanceEntry&lt;/code&gt; instances passed to a &lt;code&gt;PerformanceObserver&lt;/code&gt; . The constructor of this class is not exposed to users.</target>
        </trans-unit>
        <trans-unit id="c2150c40d137a3a78d9e3de9caaadd190bb01b4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is not necessarily fulfilled or rejected at this point if the &lt;code&gt;Promise&lt;/code&gt; was resolved by assuming the state of another &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 必ずしも満たされた場合、または、この時点で拒否されていない &lt;code&gt;Promise&lt;/code&gt; 別の状態と仮定することによって解決された &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="307916a0596c1d244787bc37a5a19c5158a409b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesRead&lt;/code&gt; property identifying the number of bytes read, and a &lt;code&gt;buffers&lt;/code&gt; property containing a reference to the &lt;code&gt;buffers&lt;/code&gt; input.</source>
          <target state="translated">The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesRead&lt;/code&gt; property identifying the number of bytes read, and a &lt;code&gt;buffers&lt;/code&gt; property containing a reference to the &lt;code&gt;buffers&lt;/code&gt; input.</target>
        </trans-unit>
        <trans-unit id="3f10ae6e72704999927267fee59194a33c04c7c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing a reference to the &lt;code&gt;buffer&lt;/code&gt; written.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 含むオブジェクトで解決さ &lt;code&gt;bytesWritten&lt;/code&gt; 書き込まれたバイト数、および特定のプロパティ &lt;code&gt;buffer&lt;/code&gt; への参照を含むプロパティ &lt;code&gt;buffer&lt;/code&gt; 書き込まれています。</target>
        </trans-unit>
        <trans-unit id="c3eb603b33fa227474bbe36e7372860ecd829661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffer&lt;/code&gt; property containing a reference to the &lt;code&gt;string&lt;/code&gt; written.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 含むオブジェクトで解決さ &lt;code&gt;bytesWritten&lt;/code&gt; 書き込まれたバイト数、および特定のプロパティ &lt;code&gt;buffer&lt;/code&gt; への参照を含むプロパティ &lt;code&gt;string&lt;/code&gt; 書き込まを。</target>
        </trans-unit>
        <trans-unit id="825a385ef4de609d746584469c7c195733f4d069" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with an object containing a &lt;code&gt;bytesWritten&lt;/code&gt; property identifying the number of bytes written, and a &lt;code&gt;buffers&lt;/code&gt; property containing a reference to the &lt;code&gt;buffers&lt;/code&gt; input.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 含むオブジェクトで解決さ &lt;code&gt;bytesWritten&lt;/code&gt; 書き込まれたバイト数、および特定のプロパティ &lt;code&gt;buffers&lt;/code&gt; への参照を含むプロパティ &lt;code&gt;buffers&lt;/code&gt; 入力。</target>
        </trans-unit>
        <trans-unit id="7ad21b404605628659537719b01daa3fa49e3b78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object for the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; して解決した&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;与えられたのオブジェクト &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b34c55f6af90344499f9227fbf0f7703ad16276b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; is resolved with the contents of the file. If no encoding is specified (using &lt;code&gt;options.encoding&lt;/code&gt;), the data is returned as a &lt;code&gt;Buffer&lt;/code&gt; object. Otherwise, the data will be a string.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; ファイルの内容で解決されます。（ &lt;code&gt;options.encoding&lt;/code&gt; を使用して）エンコーディングが指定されていない場合、データは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして返されます。それ以外の場合、データは文字列になります。</target>
        </trans-unit>
        <trans-unit id="d92a386de646198c7629bbf0e8bcfcbbee8353a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; object would have previously been emitted in an &lt;code&gt;'unhandledRejection'&lt;/code&gt; event, but during the course of processing gained a rejection handler.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; オブジェクトは、以前に放出されていたであろう &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが、獲得拒否ハンドラの処理の過程。</target>
        </trans-unit>
        <trans-unit id="95b84d2eeaef21bd512e6f651c98a85d0c11f349" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPLServer.bufferedCommand&lt;/code&gt; property was deprecated in favor of &lt;a href=&quot;repl#repl_replserver_clearbufferedcommand&quot;&gt;&lt;code&gt;REPLServer.clearBufferedCommand()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;REPLServer.bufferedCommand&lt;/code&gt; のプロパティはの賛成で廃止されました&lt;a href=&quot;repl#repl_replserver_clearbufferedcommand&quot;&gt; &lt;code&gt;REPLServer.clearBufferedCommand()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7deb4358683108a00dc65d360c2e1eea2ad2e71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPLServer.prototype.convertToContext()&lt;/code&gt; API has been removed.</source>
          <target state="translated">&lt;code&gt;REPLServer.prototype.convertToContext()&lt;/code&gt; APIは削除されました。</target>
        </trans-unit>
        <trans-unit id="8ec680d58ff39833b259e02131642979355b3954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REPL_MAGIC_MODE&lt;/code&gt;&lt;code&gt;replMode&lt;/code&gt; was removed.</source>
          <target state="translated">&lt;code&gt;REPL_MAGIC_MODE&lt;/code&gt; &lt;code&gt;replMode&lt;/code&gt; は削除されました。</target>
        </trans-unit>
        <trans-unit id="35cb8009f6996f2fb52a4b2bab6a52d304d25322" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; can switch back to paused mode using one of the following:</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; 、次のいずれかを使用して一時停止モードに切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="d455be01e46d6bff48f7600c93471266c9edc7cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; stream API evolved across multiple Node.js versions and provides multiple methods of consuming stream data. In general, developers should choose &lt;em&gt;one&lt;/em&gt; of the methods of consuming data and &lt;em&gt;should never&lt;/em&gt; use multiple methods to consume data from a single stream. Specifically, using a combination of &lt;code&gt;on('data')&lt;/code&gt;, &lt;code&gt;on('readable')&lt;/code&gt;, &lt;code&gt;pipe()&lt;/code&gt;, or async iterators could lead to unintuitive behavior.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; ストリームAPIは、複数のNode.jsのバージョン間で進化したストリームデータを消費する複数の方法を提供します。一般に、開発者はデータを消費する方法の&lt;em&gt;1つ&lt;/em&gt;を選択する必要があり、単一のストリームからのデータを消費するために複数の方法を使用し&lt;em&gt;ない&lt;/em&gt;で&lt;em&gt;ください&lt;/em&gt;。具体的には、 &lt;code&gt;on('data')&lt;/code&gt; 、 &lt;code&gt;on('readable')&lt;/code&gt; 、 &lt;code&gt;pipe()&lt;/code&gt; 、または非同期反復子の組み合わせを使用すると、直感的でない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="dc6ef70e5e44b5c5fd7cbeb40c7b98befd8c1d32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Readable&lt;/code&gt; stream will properly handle multi-byte characters delivered through the stream that would otherwise become improperly decoded if simply pulled from the stream as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; ストリームが正しく、単にストリームから引き出された場合にはそうでない場合は、不適切に復号なるストリームを介して配信マルチバイト文字処理する &lt;code&gt;Buffer&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="ba77f1dd7afa6162e4c23e525d9abfc526ccbe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Server.listenFD()&lt;/code&gt; method was deprecated and removed. Please use &lt;a href=&quot;net#net_server_listen_handle_backlog_callback&quot;&gt;&lt;code&gt;Server.listen({fd: &amp;lt;number&amp;gt;})&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;Server.listenFD()&lt;/code&gt; メソッドは廃止して除去しました。代わりに&lt;a href=&quot;net#net_server_listen_handle_backlog_callback&quot;&gt; &lt;code&gt;Server.listen({fd: &amp;lt;number&amp;gt;})&lt;/code&gt; &lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="e5bbee4c5ac3953d02808c1af81a251e062b54bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerHttp2Stream&lt;/code&gt; class is an extension of &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; that is used exclusively on HTTP/2 Servers. &lt;code&gt;Http2Stream&lt;/code&gt; instances on the server provide additional methods such as &lt;code&gt;http2stream.pushStream()&lt;/code&gt; and &lt;code&gt;http2stream.respond()&lt;/code&gt; that are only relevant on the server.</source>
          <target state="translated">&lt;code&gt;ServerHttp2Stream&lt;/code&gt; のクラスはの拡張である&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt; HTTP / 2サーバー上でのみ使用されます。サーバー上の &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、サーバー上でのみ関連する &lt;code&gt;http2stream.pushStream()&lt;/code&gt; や &lt;code&gt;http2stream.respond()&lt;/code&gt; などの追加メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="260f5173c9b0e346f6c8e494ec720490f9e8f18d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; method was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; メソッドは、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="d6322d71cca5de7fd95668cd54c4afd6280dda05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; content is also compared</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; や &lt;code&gt;Map&lt;/code&gt; コンテンツも比較され</target>
        </trans-unit>
        <trans-unit id="2c6c5562110a18c005327618b73d26f37d6050ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; content is also compared.</source>
          <target state="translated">The &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; content is also compared.</target>
        </trans-unit>
        <trans-unit id="2bb21f70161ab7849ecd22c378497788620b4580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sign&lt;/code&gt; class is a utility for generating signatures. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Sign&lt;/code&gt; クラスは、署名を生成するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="763e027dea1785f195a0fb8439e7699ec0a13aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sign&lt;/code&gt; object can not be again used after &lt;code&gt;sign.sign()&lt;/code&gt; method has been called. Multiple calls to &lt;code&gt;sign.sign()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;sign.sign()&lt;/code&gt; メソッドが呼び出された後は、 &lt;code&gt;Sign&lt;/code&gt; オブジェクトを再び使用することはできません。 &lt;code&gt;sign.sign()&lt;/code&gt; を複数回呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="4c4d71ecd409616c993b687c66f67344fbc4ac5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt; method is called in case a promise rejection happens when emitting an event and &lt;a href=&quot;#events_capture_rejections_of_promises&quot;&gt;&lt;code&gt;captureRejections&lt;/code&gt;&lt;/a&gt; is enabled on the emitter. It is possible to use &lt;a href=&quot;#events_events_capturerejectionsymbol&quot;&gt;&lt;code&gt;events.captureRejectionSymbol&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt; method is called in case a promise rejection happens when emitting an event and &lt;a href=&quot;#events_capture_rejections_of_promises&quot;&gt; &lt;code&gt;captureRejections&lt;/code&gt; &lt;/a&gt; is enabled on the emitter. It is possible to use &lt;a href=&quot;#events_events_capturerejectionsymbol&quot;&gt; &lt;code&gt;events.captureRejectionSymbol&lt;/code&gt; &lt;/a&gt; in place of &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ab8fb852ea64926590693443729ea88a031468f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is not part of this graph, even though it was the reason for &lt;code&gt;console.log()&lt;/code&gt; being called. This is because binding to a port without a host name is a &lt;em&gt;synchronous&lt;/em&gt; operation, but to maintain a completely asynchronous API the user's callback is placed in a &lt;code&gt;process.nextTick()&lt;/code&gt;. Which is why &lt;code&gt;TickObject&lt;/code&gt; is present in the output and is a 'parent' for &lt;code&gt;.listen()&lt;/code&gt; callback.</source>
          <target state="translated">The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is not part of this graph, even though it was the reason for &lt;code&gt;console.log()&lt;/code&gt; being called. This is because binding to a port without a host name is a &lt;em&gt;synchronous&lt;/em&gt; operation, but to maintain a completely asynchronous API the user's callback is placed in a &lt;code&gt;process.nextTick()&lt;/code&gt; . Which is why &lt;code&gt;TickObject&lt;/code&gt; is present in the output and is a 'parent' for &lt;code&gt;.listen()&lt;/code&gt; callback.</target>
        </trans-unit>
        <trans-unit id="067224cdaedb01555047e368ecfaed450b4b9d71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is not part of this graph, even though it was the reason for &lt;code&gt;console.log()&lt;/code&gt; being called. This is because binding to a port without a hostname is a &lt;em&gt;synchronous&lt;/em&gt; operation, but to maintain a completely asynchronous API the user's callback is placed in a &lt;code&gt;process.nextTick()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TCPSERVERWRAP&lt;/code&gt; はそれが理由だったにも関わらず、このグラフの一部されていない &lt;code&gt;console.log()&lt;/code&gt; と呼ばれています。これは、ホスト名のないポートへのバインドは&lt;em&gt;同期&lt;/em&gt;操作であるためですが、完全に非同期のAPIを維持するために、ユーザーのコールバックは &lt;code&gt;process.nextTick()&lt;/code&gt; に配置されます。</target>
        </trans-unit>
        <trans-unit id="97bc03b082ece96085c82400600ceae8fe714235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPSERVERWRAP&lt;/code&gt; is the server which receives the connections.</source>
          <target state="translated">&lt;code&gt;TCPSERVERWRAP&lt;/code&gt; は、接続を受信するサーバーです。</target>
        </trans-unit>
        <trans-unit id="fc1c7554594dc402923925ed657aa3cde810e524" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TCPWRAP&lt;/code&gt; is the new connection from the client. When a new connection is made, the &lt;code&gt;TCPWrap&lt;/code&gt; instance is immediately constructed. This happens outside of any JavaScript stack. (An &lt;code&gt;executionAsyncId()&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt; means that it is being executed from C++ with no JavaScript stack above it.) With only that information, it would be impossible to link resources together in terms of what caused them to be created, so &lt;code&gt;triggerAsyncId&lt;/code&gt; is given the task of propagating what resource is responsible for the new resource's existence.</source>
          <target state="translated">&lt;code&gt;TCPWRAP&lt;/code&gt; は、クライアントからの新しい接続です。新しい接続が確立されると、 &lt;code&gt;TCPWrap&lt;/code&gt; インスタンスがすぐに構築されます。これは、JavaScriptスタックの外部で発生します。（ &lt;code&gt;executionAsyncId()&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合は、その上にJavaScriptスタックがない状態でC ++から実行されていることを意味します。）その情報だけでは、リソースを作成した原因に関してリソースをリンクすることは不可能であるため、 &lt;code&gt;triggerAsyncId&lt;/code&gt; が指定されます。新しいリソースの存在に責任があるリソースを伝播するタスク。</target>
        </trans-unit>
        <trans-unit id="c8b4a848ccb8bd223a9110350ff0ff3b72da2390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextDecoder&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">&lt;code&gt;TextDecoder&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="4386ce8178a330d40567e2509372c3cf7b2a95a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextEncoder&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">&lt;code&gt;TextEncoder&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="15b7afb5cb9a7558bf2c7c32915c8456523d10ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tracing&lt;/code&gt; object is used to enable or disable tracing for sets of categories. Instances are created using the &lt;code&gt;trace_events.createTracing()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Tracing&lt;/code&gt; オブジェクトは、カテゴリのセットのトレースを有効または無効にするために使用されます。インスタンスは、 &lt;code&gt;trace_events.createTracing()&lt;/code&gt; メソッドを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="02f95b3badbd05241aa901e088ab499ccb3aac01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Trailer&lt;/code&gt; header was set even though the transfer encoding does not support that.</source>
          <target state="translated">&lt;code&gt;Trailer&lt;/code&gt; ヘッダは、転送符号化がそれをサポートしていないにもかかわらず、設定されました。</target>
        </trans-unit>
        <trans-unit id="aa40c498c08a9c2a43b3f98536108d6c36888450" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLSearchParams&lt;/code&gt; API provides read and write access to the query of a &lt;code&gt;URL&lt;/code&gt;. The &lt;code&gt;URLSearchParams&lt;/code&gt; class can also be used standalone with one of the four following constructors. The &lt;code&gt;URLSearchParams&lt;/code&gt; class is also available on the global object.</source>
          <target state="translated">&lt;code&gt;URLSearchParams&lt;/code&gt; の APIは、のクエリに対する読み取りおよび書き込みアクセスを提供 &lt;code&gt;URL&lt;/code&gt; を。 &lt;code&gt;URLSearchParams&lt;/code&gt; のクラスには、次の4つのコンストラクタのいずれかでスタンドアロンで使用することができます。 &lt;code&gt;URLSearchParams&lt;/code&gt; のクラスはグローバルオブジェクトにも使用可能です。</target>
        </trans-unit>
        <trans-unit id="0bdbb24616ccb50106340987aec8e6ea082fa341" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Verify&lt;/code&gt; class is a utility for verifying signatures. It can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Verify&lt;/code&gt; 、クラス署名を検証するためのユーティリティです。次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="5383ec704ee7dc45a94fb456043b3654dc8669de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WeakMap&lt;/code&gt; and &lt;code&gt;WeakSet&lt;/code&gt; entries can now be inspected as well.</source>
          <target state="translated">&lt;code&gt;WeakMap&lt;/code&gt; と &lt;code&gt;WeakSet&lt;/code&gt; エントリは今もとして検査することができます。</target>
        </trans-unit>
        <trans-unit id="9b55d7cf0291e64976ef5c1cd7ee77b82c96e07b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Worker&lt;/code&gt; class represents an independent JavaScript execution thread. Most Node.js APIs are available inside of it.</source>
          <target state="translated">&lt;code&gt;Worker&lt;/code&gt; クラスは独立したJavaScriptの実行スレッドを表します。ほとんどのNode.js APIは、その内部で使用できます。</target>
        </trans-unit>
        <trans-unit id="cb2fd0068986e52280752753ecfa76c76f556eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Worker&lt;/code&gt; initialization failed.</source>
          <target state="translated">The &lt;code&gt;Worker&lt;/code&gt; initialization failed.</target>
        </trans-unit>
        <trans-unit id="f7686dca253ccb9e0d3d850c2a95785d2dbeac18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Worker&lt;/code&gt; instance terminated because it reached its memory limit.</source>
          <target state="translated">The &lt;code&gt;Worker&lt;/code&gt; instance terminated because it reached its memory limit.</target>
        </trans-unit>
        <trans-unit id="debf2dcd1404efcdcc721a3846b17e40ea921f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_channel&lt;/code&gt; property of child process objects returned by &lt;code&gt;spawn()&lt;/code&gt; and similar functions is not intended for public use. Use &lt;code&gt;ChildProcess.channel&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;spawn()&lt;/code&gt; および類似の関数によって返される子プロセスオブジェクトの &lt;code&gt;_channel&lt;/code&gt; プロパティは、パブリックで使用するためのものではありません。代わりに &lt;code&gt;ChildProcess.channel&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5defc8b4590f5b0d812820377b2c16435a8e5049" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_construct()&lt;/code&gt; method MUST NOT be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</source>
          <target state="translated">The &lt;code&gt;_construct()&lt;/code&gt; method MUST NOT be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</target>
        </trans-unit>
        <trans-unit id="1488b8e1398683feb4c8301b2d23152e3fc97bf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_construct()&lt;/code&gt; method MUST NOT be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">The &lt;code&gt;_construct()&lt;/code&gt; method MUST NOT be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</target>
        </trans-unit>
        <trans-unit id="5075c4bc60a5cfdceb4a171eb24743398afe3236" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_destroy()&lt;/code&gt; method is called by &lt;a href=&quot;#stream_readable_destroy_error&quot;&gt;&lt;code&gt;readable.destroy()&lt;/code&gt;&lt;/a&gt;. It can be overridden by child classes but it &lt;strong&gt;must not&lt;/strong&gt; be called directly.</source>
          <target state="translated">&lt;code&gt;_destroy()&lt;/code&gt; メソッドによって呼び出され&lt;a href=&quot;#stream_readable_destroy_error&quot;&gt; &lt;code&gt;readable.destroy()&lt;/code&gt; &lt;/a&gt;。子クラスでオーバーライドできますが、直接呼び出すこと&lt;strong&gt;はできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8e72d0f6fb0b490c3fdabbf1b786ae5d46602187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_destroy()&lt;/code&gt; method is called by &lt;a href=&quot;#stream_writable_destroy_error&quot;&gt;&lt;code&gt;writable.destroy()&lt;/code&gt;&lt;/a&gt;. It can be overridden by child classes but it &lt;strong&gt;must not&lt;/strong&gt; be called directly.</source>
          <target state="translated">&lt;code&gt;_destroy()&lt;/code&gt; メソッドによって呼び出され&lt;a href=&quot;#stream_writable_destroy_error&quot;&gt; &lt;code&gt;writable.destroy()&lt;/code&gt; &lt;/a&gt;。子クラスでオーバーライドできますが、直接呼び出すこと&lt;strong&gt;はできません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="84dfdbc1e4803c46906daad4e04f8b1930dfa32d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_final()&lt;/code&gt; method &lt;strong&gt;must not&lt;/strong&gt; be called directly. It may be implemented by child classes, and if so, will be called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">&lt;code&gt;_final()&lt;/code&gt; メソッドは&lt;strong&gt;いけません&lt;/strong&gt;直接呼び出すこと。子クラスによって実装される場合があり、実装されている場合は、内部の &lt;code&gt;Writable&lt;/code&gt; クラスメソッドによってのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6481baedf3e3bdf741a09ffad002a9db9f046d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linklist&lt;/code&gt; module is deprecated. Please use a userland alternative.</source>
          <target state="translated">&lt;code&gt;_linklist&lt;/code&gt; のモジュールが推奨されていません。別のユーザーランドを使用してください。</target>
        </trans-unit>
        <trans-unit id="60118404f8ad4fa8dd8afc9f383d20f4a34244eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_stream_wrap&lt;/code&gt; module is deprecated.</source>
          <target state="translated">&lt;code&gt;_stream_wrap&lt;/code&gt; のモジュールが推奨されていません。</target>
        </trans-unit>
        <trans-unit id="807e366f3f59527fe993860b99dfe7939d27809a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_writableState.buffer&lt;/code&gt; has been removed. Use &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; instead.</source>
          <target state="translated">The &lt;code&gt;_writableState.buffer&lt;/code&gt; has been removed. Use &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; instead.</target>
        </trans-unit>
        <trans-unit id="ce85dabf9709d0fdeca06663508b85b7d88af6c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_writableState.buffer&lt;/code&gt; property is deprecated. Use the &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; method instead.</source>
          <target state="translated">&lt;code&gt;_writableState.buffer&lt;/code&gt; のプロパティが推奨されていません。代わりに &lt;code&gt;_writableState.getBuffer()&lt;/code&gt; メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="17864e9884718d6d34787016fba6b3c036adf024" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aborted&lt;/code&gt; property is no longer a timestamp number.</source>
          <target state="translated">&lt;code&gt;aborted&lt;/code&gt; プロパティは、もはや、タイムスタンプの数ではありません。</target>
        </trans-unit>
        <trans-unit id="523d60058c4d000c1f8113952c6858ae8be22de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;address&lt;/code&gt; argument is a string. If the value of &lt;code&gt;address&lt;/code&gt; is a host name, DNS will be used to resolve the address of the host. If &lt;code&gt;address&lt;/code&gt; is not provided or otherwise falsy, &lt;code&gt;'127.0.0.1'&lt;/code&gt; (for &lt;code&gt;udp4&lt;/code&gt; sockets) or &lt;code&gt;'::1'&lt;/code&gt; (for &lt;code&gt;udp6&lt;/code&gt; sockets) will be used by default.</source>
          <target state="translated">&lt;code&gt;address&lt;/code&gt; 引数は文字列です。 &lt;code&gt;address&lt;/code&gt; の値がホスト名の場合、DNSを使用してホストのアドレスを解決します。場合は &lt;code&gt;address&lt;/code&gt; 提供されるか、またはそうでなければfalsy、されていない &lt;code&gt;'127.0.0.1'&lt;/code&gt; （用 &lt;code&gt;udp4&lt;/code&gt; ソケット）または &lt;code&gt;'::1'&lt;/code&gt; （のための &lt;code&gt;udp6&lt;/code&gt; ソケット）がデフォルトで使用されます。</target>
        </trans-unit>
        <trans-unit id="0c15e300f4f1ce65070e7ce40a6d7a8e129b3ea0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;address&lt;/code&gt; parameter is always optional now.</source>
          <target state="translated">現在、 &lt;code&gt;address&lt;/code&gt; パラメータは常にオプションです。</target>
        </trans-unit>
        <trans-unit id="7e65a68e4b6dbb69fc77cbd51e46debd22b71448" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addressType&lt;/code&gt; is one of:</source>
          <target state="translated">&lt;code&gt;addressType&lt;/code&gt; 型は、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="c6af5995c277a4d9845542e6926ac54af7d4e41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; is dependent on OpenSSL, examples are &lt;code&gt;'aes192'&lt;/code&gt;, etc. On recent OpenSSL releases, &lt;code&gt;openssl list -cipher-algorithms&lt;/code&gt; (&lt;code&gt;openssl list-cipher-algorithms&lt;/code&gt; for older versions of OpenSSL) will display the available cipher algorithms.</source>
          <target state="translated">&lt;code&gt;algorithm&lt;/code&gt; 、例があるのOpenSSLに依存している &lt;code&gt;'aes192'&lt;/code&gt; の最近のOpenSSLのリリース、オンなど、 &lt;code&gt;openssl list -cipher-algorithms&lt;/code&gt; （ &lt;code&gt;openssl list-cipher-algorithms&lt;/code&gt; のOpenSSLの古いバージョンのために）使用可能な暗号化アルゴリズムが表示されます。</target>
        </trans-unit>
        <trans-unit id="5cf75b3efb8f1b7be9a886e494566b373165e669" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;algorithm&lt;/code&gt; is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are &lt;code&gt;'sha256'&lt;/code&gt;, &lt;code&gt;'sha512'&lt;/code&gt;, etc. On recent releases of OpenSSL, &lt;code&gt;openssl list -digest-algorithms&lt;/code&gt; (&lt;code&gt;openssl list-message-digest-algorithms&lt;/code&gt; for older versions of OpenSSL) will display the available digest algorithms.</source>
          <target state="translated">&lt;code&gt;algorithm&lt;/code&gt; プラットフォーム上のOpenSSLのバージョンでサポートされている利用可能なアルゴリズムに依存しています。例は &lt;code&gt;'sha256'&lt;/code&gt; 、 &lt;code&gt;'sha512'&lt;/code&gt; などです。OpenSSLの最近のリリースでは、 &lt;code&gt;openssl list -digest-algorithms&lt;/code&gt; （ &lt;code&gt;openssl list-message-digest-algorithms&lt;/code&gt; for OpenSSLの古いバージョン）は利用可能なダイジェストアルゴリズムを表示します。</target>
        </trans-unit>
        <trans-unit id="bb522ecae4930018820842e1866a5f7f41282121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;all&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="fe34a1e6e8c173cd3e3b36c3c3fe5e15935de821" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;alt&lt;/code&gt; and origin string &lt;em&gt;must&lt;/em&gt; contain only ASCII bytes and are strictly interpreted as a sequence of ASCII bytes. The special value &lt;code&gt;'clear'&lt;/code&gt; may be passed to clear any previously set alternative service for a given domain.</source>
          <target state="translated">&lt;code&gt;alt&lt;/code&gt; と原点文字列が&lt;em&gt;しなければならない&lt;/em&gt;だけでASCIIバイトが含まれており、厳密にASCIIバイトのシーケンスとして解釈されます。特定のドメインに対して以前に設定された代替サービスをクリアするために、特別な値 &lt;code&gt;'clear'&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c533ce6fc04b00d6aa6151f9b741b524ad6aab18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argv0&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;argv0&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="e3f0eb4e99b8e177f1e6eee0ad0d3bdf6553c32b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argv&lt;/code&gt; option was introduced.</source>
          <target state="translated">The &lt;code&gt;argv&lt;/code&gt; option was introduced.</target>
        </trans-unit>
        <trans-unit id="2e99141609060487c9bb90bcc163e7304d5744ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as+&lt;/code&gt; flags are supported now.</source>
          <target state="translated">The &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as+&lt;/code&gt; flags are supported now.</target>
        </trans-unit>
        <trans-unit id="d455d0ed53effe3b25db43d1fe5eecafa0a53ae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as&lt;/code&gt; and &lt;code&gt;as+&lt;/code&gt; modes are supported now.</source>
          <target state="translated">&lt;code&gt;as&lt;/code&gt; と &lt;code&gt;as+&lt;/code&gt; のモードがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="25878abdfa306ca7e7dc57e75fe59999862d0b04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert.ok()&lt;/code&gt; (no arguments) will now use a predefined error message.</source>
          <target state="translated">&lt;code&gt;assert.ok()&lt;/code&gt; （引数なし）は、現在事前に定義されたエラーメッセージを使用します。</target>
        </trans-unit>
        <trans-unit id="9f30219f1f8e5b13d0054b05f7bca3562891e3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; module provides a set of assertion functions for verifying invariants.</source>
          <target state="translated">The &lt;code&gt;assert&lt;/code&gt; module provides a set of assertion functions for verifying invariants.</target>
        </trans-unit>
        <trans-unit id="bf53a8640f6c440fb3875834f8fcdab85c39b1b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; module provides a set of assertion functions for verifying invariants. The module provides a recommended &lt;a href=&quot;#assert_strict_mode&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; and a more lenient legacy mode.</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; モジュールは、不変量を検証するためのアサーション機能のセットを提供します。このモジュールは、推奨される&lt;a href=&quot;#assert_strict_mode&quot;&gt; &lt;code&gt;strict&lt;/code&gt; モード&lt;/a&gt;と、より緩やかなレガシーモードを提供します。</target>
        </trans-unit>
        <trans-unit id="a6e4e80944c676b9dad7cb6791bc191cf400c222" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_hooks&lt;/code&gt; module provides an API to register callbacks tracking the lifetime of asynchronous resources created inside a Node.js application. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;async_hooks&lt;/code&gt; のモジュールは、Node.jsのアプリケーション内で作成された非同期資源の寿命を追跡するコールバックを登録するためのAPIを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="021c1943d753ac7f236107ba8a89f6b534fe7711" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_hooks&lt;/code&gt; module provides an API to track asynchronous resources. It can be accessed using:</source>
          <target state="translated">The &lt;code&gt;async_hooks&lt;/code&gt; module provides an API to track asynchronous resources. It can be accessed using:</target>
        </trans-unit>
        <trans-unit id="4ed6459e77932d2b602c852c8885a4589027cf94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_resource_name&lt;/code&gt; identifier is provided by the user and should be representative of the type of async work being performed. It is also recommended to apply namespacing to the identifier, e.g. by including the module name. See the &lt;a href=&quot;async_hooks#async_hooks_type&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt; documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;async_resource_name&lt;/code&gt; の識別子は、ユーザによって提供され、実行される非同期作業の種類の代表であるべきです。また、モジュール名を含めるなどして、名前空間を識別子に適用することをお勧めします。詳細については、&lt;a href=&quot;async_hooks#async_hooks_type&quot;&gt; &lt;code&gt;async_hooks&lt;/code&gt; のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d33f473978e21b579a16a230075abfec085ea1a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt; arguments follow these rules:</source>
          <target state="translated">&lt;code&gt;atime&lt;/code&gt; と &lt;code&gt;mtime&lt;/code&gt; の引数は次の規則に従ってください。</target>
        </trans-unit>
        <trans-unit id="449376bcbb92e36dfd1c08d24ffab6c86585eab0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atimeMs&lt;/code&gt;, &lt;code&gt;mtimeMs&lt;/code&gt;, &lt;code&gt;ctimeMs&lt;/code&gt;, &lt;code&gt;birthtimeMs&lt;/code&gt; properties are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;numbers&lt;/a&gt; that hold the corresponding times in milliseconds. Their precision is platform specific. &lt;code&gt;atime&lt;/code&gt;, &lt;code&gt;mtime&lt;/code&gt;, &lt;code&gt;ctime&lt;/code&gt;, and &lt;code&gt;birthtime&lt;/code&gt; are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object alternate representations of the various times. The &lt;code&gt;Date&lt;/code&gt; and number values are not connected. Assigning a new number value, or mutating the &lt;code&gt;Date&lt;/code&gt; value, will not be reflected in the corresponding alternate representation.</source>
          <target state="translated">&lt;code&gt;atimeMs&lt;/code&gt; 、 &lt;code&gt;mtimeMs&lt;/code&gt; 、 &lt;code&gt;ctimeMs&lt;/code&gt; 、 &lt;code&gt;birthtimeMs&lt;/code&gt; のプロパティがある&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;数字&lt;/a&gt;ミリ秒単位で対応する時間を保持します。それらの精度はプラットフォーム固有です。 &lt;code&gt;atime&lt;/code&gt; 、 &lt;code&gt;mtime&lt;/code&gt; 、 &lt;code&gt;ctime&lt;/code&gt; 、および &lt;code&gt;birthtime&lt;/code&gt; は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;オブジェクトのさまざまな時刻の代替表現です。 &lt;code&gt;Date&lt;/code&gt; と番号の値が接続されていません。新しい数値の割り当て、または &lt;code&gt;Date&lt;/code&gt; 値の変更は、対応する代替表現には反映されません。</target>
        </trans-unit>
        <trans-unit id="e8ae622cd215440d7a9f30e3c7bf78f1e7d3174f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atimeMs&lt;/code&gt;, &lt;code&gt;mtimeMs&lt;/code&gt;, &lt;code&gt;ctimeMs&lt;/code&gt;, &lt;code&gt;birthtimeMs&lt;/code&gt; properties are numeric values that hold the corresponding times in milliseconds. Their precision is platform specific. When &lt;code&gt;bigint: true&lt;/code&gt; is passed into the method that generates the object, the properties will be &lt;a href=&quot;https://tc39.github.io/proposal-bigint&quot;&gt;bigints&lt;/a&gt;, otherwise they will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;numbers&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;atimeMs&lt;/code&gt; , &lt;code&gt;mtimeMs&lt;/code&gt; , &lt;code&gt;ctimeMs&lt;/code&gt; , &lt;code&gt;birthtimeMs&lt;/code&gt; properties are numeric values that hold the corresponding times in milliseconds. Their precision is platform specific. When &lt;code&gt;bigint: true&lt;/code&gt; is passed into the method that generates the object, the properties will be &lt;a href=&quot;https://tc39.github.io/proposal-bigint&quot;&gt;bigints&lt;/a&gt;, otherwise they will be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;numbers&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a3ab5b7ac105b82ac70fb4fa4c07f1a1a2a87894" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atimeNs&lt;/code&gt;, &lt;code&gt;mtimeNs&lt;/code&gt;, &lt;code&gt;ctimeNs&lt;/code&gt;, &lt;code&gt;birthtimeNs&lt;/code&gt; properties are &lt;a href=&quot;https://tc39.github.io/proposal-bigint&quot;&gt;bigints&lt;/a&gt; that hold the corresponding times in nanoseconds. They are only present when &lt;code&gt;bigint: true&lt;/code&gt; is passed into the method that generates the object. Their precision is platform specific.</source>
          <target state="translated">The &lt;code&gt;atimeNs&lt;/code&gt; , &lt;code&gt;mtimeNs&lt;/code&gt; , &lt;code&gt;ctimeNs&lt;/code&gt; , &lt;code&gt;birthtimeNs&lt;/code&gt; properties are &lt;a href=&quot;https://tc39.github.io/proposal-bigint&quot;&gt;bigints&lt;/a&gt; that hold the corresponding times in nanoseconds. They are only present when &lt;code&gt;bigint: true&lt;/code&gt; is passed into the method that generates the object. Their precision is platform specific.</target>
        </trans-unit>
        <trans-unit id="d1fb10de5b21bd96b1861ce448f3dabf1c6cc6ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; fields are now kept intact when &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; refer to the same host.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; フィールドは、ときになりましそのまま保持されている &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; 、同じホストを参照してください。</target>
        </trans-unit>
        <trans-unit id="4953e8b11cad93b7b9ea12f21981198e9f7d206b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; fields is cleared now the &lt;code&gt;to&lt;/code&gt; parameter contains a hostname.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; フィールドが今クリアされる &lt;code&gt;to&lt;/code&gt; のパラメータは、ホスト名が含まれています。</target>
        </trans-unit>
        <trans-unit id="2cb6e6c52db18c0a11d623417542b47591dd51a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auth&lt;/code&gt; property is the username and password portion of the URL, also referred to as &lt;em&gt;userinfo&lt;/em&gt;. This string subset follows the &lt;code&gt;protocol&lt;/code&gt; and double slashes (if present) and precedes the &lt;code&gt;host&lt;/code&gt; component, delimited by &lt;code&gt;@&lt;/code&gt;. The string is either the username, or it is the username and password separated by &lt;code&gt;:&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;auth&lt;/code&gt; プロパティは、とも呼ばれる、URLのユーザ名とパスワードの部分である&lt;em&gt;のuserinfo&lt;/em&gt;。この文字列サブセットは、 &lt;code&gt;protocol&lt;/code&gt; とダブルスラッシュ（存在する場合）に従い、 &lt;code&gt;host&lt;/code&gt; コンポーネントの前に &lt;code&gt;@&lt;/code&gt; で区切られます。文字列は、ユーザー名、または &lt;code&gt;:&lt;/code&gt; で区切られたユーザー名とパスワードです。</target>
        </trans-unit>
        <trans-unit id="1f38f1de37b0bf494f218ed7c511911f13fa69ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authTagLength&lt;/code&gt; option can now be used to produce shorter authentication tags in GCM mode and defaults to 16 bytes.</source>
          <target state="translated">&lt;code&gt;authTagLength&lt;/code&gt; のオプションは16バイトにGCMモードと、デフォルトで短い認証タグを生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4717ac0a129595a7b0ba8362f889d2eb111be7f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authTagLength&lt;/code&gt; option can now be used to restrict accepted GCM authentication tag lengths.</source>
          <target state="translated">&lt;code&gt;authTagLength&lt;/code&gt; のオプションは、現在受け入れられGCM認証タグの長さを制限するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="f892ccf9ac759a08f758b755e272a341ca380048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoClose&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;autoClose&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="9b6939e8c0dac11e602017a10907bcb7c0f15fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;await&lt;/code&gt; keyword may be used in the top level (outside of async functions) within modules as per the &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await/&quot;&gt;ECMAScript Top-Level &lt;code&gt;await&lt;/code&gt; proposal&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;await&lt;/code&gt; keyword may be used in the top level (outside of async functions) within modules as per the &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await/&quot;&gt;ECMAScript Top-Level &lt;code&gt;await&lt;/code&gt; proposal&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3fe354e440db4d021a80a4a1de3cb0bd0379f9e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;before&lt;/code&gt; callback will be called 0 to N times. The &lt;code&gt;before&lt;/code&gt; callback will typically be called 0 times if the asynchronous operation was cancelled or, for example, if no connections are received by a TCP server. Persistent asynchronous resources like a TCP server will typically call the &lt;code&gt;before&lt;/code&gt; callback multiple times, while other operations like &lt;code&gt;fs.open()&lt;/code&gt; will call it only once.</source>
          <target state="translated">&lt;code&gt;before&lt;/code&gt; のコールバックは、N回に0と呼ばれます。 &lt;code&gt;before&lt;/code&gt; いかなる接続はTCPサーバによって受信されない場合、コールバックは、一般的に、例えば、非同期操作がキャンセルされた場合は0回と呼ばれたりします。通常、TCPサーバーなどの永続的な非同期リソースは &lt;code&gt;before&lt;/code&gt; コールバックを複数回呼び出しますが、 &lt;code&gt;fs.open()&lt;/code&gt; などの他の操作はそれを1回だけ呼び出します。</target>
        </trans-unit>
        <trans-unit id="6af9f3b981e953f388b90a28bd261b81b25d9cd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bigint&lt;/code&gt; option is now supported.</source>
          <target state="translated">The &lt;code&gt;bigint&lt;/code&gt; option is now supported.</target>
        </trans-unit>
        <trans-unit id="d2865411787013147736e7c6528d110aada6c506" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bigint&lt;/code&gt; version of the &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt; method returning the current high-resolution real time in a &lt;code&gt;bigint&lt;/code&gt;.</source>
          <target state="translated">現在の高解像度のリアルタイムを &lt;code&gt;bigint&lt;/code&gt; で返す&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;bigint&lt;/code&gt; バージョン。</target>
        </trans-unit>
        <trans-unit id="48588fd4c25dbd02f2717385e2422df741129cca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bigint&lt;/code&gt; version of the &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt; method returning the current high-resolution real time in nanoseconds as a &lt;code&gt;bigint&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;bigint&lt;/code&gt; version of the &lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt; method returning the current high-resolution real time in nanoseconds as a &lt;code&gt;bigint&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0951956716f38d3c9a31af3e12834af5ea205476" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakEvalOnSigint&lt;/code&gt; option is supported now.</source>
          <target state="translated">The &lt;code&gt;breakEvalOnSigint&lt;/code&gt; option is supported now.</target>
        </trans-unit>
        <trans-unit id="c48b4d08ed330264b4f8eb1e7a3005009bd60630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakLength&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;breakLength&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="afb9ab51848289ab8d0bcbcce7912894768d7275" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;breakOnSigint&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;breakOnSigint&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a4c4b22335ca3e1d7d0ed289d2587b07f1094bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buf.parent&lt;/code&gt; property is a deprecated alias for &lt;code&gt;buf.buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buf.parent&lt;/code&gt; のプロパティは非推奨のための別名である &lt;code&gt;buf.buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="751a13b39d085a2e801df110ee05aac2a34358bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; argument may be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 引数はいずれであってもよい &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c35cc0fd059f671ea5de074af24f81f56719ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータができ &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94a104be39c9bc13bef36af071c42ce0cf501caf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータができ &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="f24d6e585cea302eee1c5b8b0d24308bd5f95739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは任意のものとすることができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13347ff52ee272031d0dfa2402f16202165de828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータが今することができ &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6c7846f24666db70fe163eb55c7b74fbe223c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e7550ba45ded2a07645252a3e6d651b429ee3b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc2fa30b3b806b4b669461c2fcdca26d15195f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができ &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="448bee28069183d1b15fc96f2985ed6272e50e6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</source>
          <target state="translated">The &lt;code&gt;buffer&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="47a6faa1b05d5962fa77f2ef2cec1bbb6774225c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to buffers anymore.</source>
          <target state="translated">The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to buffers anymore.</target>
        </trans-unit>
        <trans-unit id="fb0c188572e0c48a8b69a36a5b9bd2f155bbb27a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</source>
          <target state="translated">The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</target>
        </trans-unit>
        <trans-unit id="6d4d5aa4256b2ea2efa06a436d4a16cbd73d21e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bufferSize&lt;/code&gt; option was introduced.</source>
          <target state="translated">The &lt;code&gt;bufferSize&lt;/code&gt; option was introduced.</target>
        </trans-unit>
        <trans-unit id="0becffa6e00a391d07ddcfd44821e7c5551acaa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are supported now.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; のパラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="26dde646bc9d6b4b4c3d1dee9bcfb39db3b93a23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca:&lt;/code&gt; option now supports &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ca:&lt;/code&gt; オプションをサポートするようになりましたが、 &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50abb0a253c600119fb0b706154a2d9856c65812" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca&lt;/code&gt; option can now be a single string containing multiple CA certificates.</source>
          <target state="translated">&lt;code&gt;ca&lt;/code&gt; オプションは、複数のCA証明書を含む単一の文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="6b641d22b2c014aa622b9b93bee1c68784632570" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cache&lt;/code&gt; parameter was removed.</source>
          <target state="translated">&lt;code&gt;cache&lt;/code&gt; パラメータが削除されました。</target>
        </trans-unit>
        <trans-unit id="9f1c69c38d8e38e5b17ae605ab46f393e7a823c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cachedData&lt;/code&gt; and &lt;code&gt;produceCachedData&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;cachedData&lt;/code&gt; と &lt;code&gt;produceCachedData&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="59361ef794dca079007c57ac559afd8fcab53ac8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cachedData&lt;/code&gt; option passed to a module constructor is invalid.</source>
          <target state="translated">The &lt;code&gt;cachedData&lt;/code&gt; option passed to a module constructor is invalid.</target>
        </trans-unit>
        <trans-unit id="e893e1ba3399c10852a524b61062e2e30e912c02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; argument is now supported.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; argument is now supported.</target>
        </trans-unit>
        <trans-unit id="1c0e007effbbc122cf39880451c0a560d0bbab07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; argument is optional and will be called when this chunk of data is flushed, but only if the chunk is non-empty.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; の引数はオプションであり、このデータのチャンクがフラッシュされたときに呼び出されますが、チャンクは非空である場合にのみ。</target>
        </trans-unit>
        <trans-unit id="ba29b709f3d8b858f0b327068e0a74f6852badbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. &lt;code&gt;err&lt;/code&gt; is an exception object when key derivation fails, otherwise &lt;code&gt;err&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は二つの引数で呼び出され： &lt;code&gt;err&lt;/code&gt; と &lt;code&gt;derivedKey&lt;/code&gt; 。 &lt;code&gt;err&lt;/code&gt; は、キーの導出に失敗した場合の例外オブジェクトです。それ以外の場合、 &lt;code&gt;err&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; です。 &lt;code&gt;derivedKey&lt;/code&gt; は、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;としてコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="5f9f155ba1bd27d006253becd5a6ecb00b817468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt;, it will be forwarded on to the &lt;code&gt;readable.push()&lt;/code&gt; method. In other words, the following are equivalent:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、現在のチャンクが完全に消費されている場合にのみ呼び出さなければなりません。 &lt;code&gt;callback&lt;/code&gt; 渡される最初の引数は、入力の処理中にエラーが発生した場合は &lt;code&gt;Error&lt;/code&gt; オブジェクトである必要があり、そうでない場合は &lt;code&gt;null&lt;/code&gt; である必要があります。2番目の引数が &lt;code&gt;callback&lt;/code&gt; に渡された場合、それは &lt;code&gt;readable.push()&lt;/code&gt; メソッドに転送されます。つまり、以下は同等です。</target>
        </trans-unit>
        <trans-unit id="dd840cc7a865d53dc95e99d01f3c4b10608dd98b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt;, it will be forwarded on to the &lt;code&gt;transform.push()&lt;/code&gt; method. In other words, the following are equivalent:</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt; , it will be forwarded on to the &lt;code&gt;transform.push()&lt;/code&gt; method. In other words, the following are equivalent:</target>
        </trans-unit>
        <trans-unit id="88dd40a797380bb42ff2aaf400c6888a523a3bb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called synchronously inside of &lt;code&gt;writable._write()&lt;/code&gt; or asynchronously (i.e. different tick) to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; function must be called synchronously inside of &lt;code&gt;writable._write()&lt;/code&gt; or asynchronously (i.e. different tick) to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</target>
        </trans-unit>
        <trans-unit id="ce46ebb800e17eebebaf8f9d46987e9d2dd4f325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function passed to &lt;code&gt;rl.question()&lt;/code&gt; does not follow the typical pattern of accepting an &lt;code&gt;Error&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; as the first argument. The &lt;code&gt;callback&lt;/code&gt; is called with the provided answer as the only argument.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; に渡された関数 &lt;code&gt;rl.question()&lt;/code&gt; は、受け入れの典型的なパターンに従わない &lt;code&gt;Error&lt;/code&gt; オブジェクト、または &lt;code&gt;null&lt;/code&gt; 最初の引数としてあります。 &lt;code&gt;callback&lt;/code&gt; 唯一の引数として提供さ答えで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="652f37b1b2968e2ab32c3881e04612dc419eb654" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function, if specified, will be added as a listener for the &lt;a href=&quot;#tls_event_secureconnect&quot;&gt;&lt;code&gt;'secureConnect'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、指定された場合、のリスナーとして追加されます&lt;a href=&quot;#tls_event_secureconnect&quot;&gt; &lt;code&gt;'secureConnect'&lt;/code&gt; &lt;/a&gt;イベント。</target>
        </trans-unit>
        <trans-unit id="48896b41d9279e5711e050c3ebf37d6393767a0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 二つの引数を取得 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb5d819e0cd349728bee11ce5e3538fc8b3951ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;. May use &lt;code&gt;process.cwd&lt;/code&gt; to resolve relative paths.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 二つの引数を取得 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。相対パスを解決するために &lt;code&gt;process.cwd&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d47f3734513421fd10f4f5ed4353e31d443dc11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked if 'finish' or 'error' is emitted.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; is invoked if 'finish' or 'error' is emitted.</target>
        </trans-unit>
        <trans-unit id="253886ac3350139a2e4de4d0e7575141b9659fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked when a &lt;code&gt;PerformanceObserver&lt;/code&gt; is notified about new &lt;code&gt;PerformanceEntry&lt;/code&gt; instances. The callback receives a &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; instance and a reference to the &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; ときに呼び出される &lt;code&gt;PerformanceObserver&lt;/code&gt; が新しいについて通知され &lt;code&gt;PerformanceEntry&lt;/code&gt; のインスタンス。コールバックは、受信 &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; のインスタンスと参照 &lt;code&gt;PerformanceObserver&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="9b72dba06513971ab2b899eb65fab8c7b2b0f850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked with a single argument that is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; のインスタンスである単一の引数で呼び出され&lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50db4a4272c90529a835c1153eb71e463f38c65c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; method must be called to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; メソッドは、書き込みが正常に完了またはエラーで失敗したことのいずれかを知らせるために呼び出されなければなりません。渡される最初の引数 &lt;code&gt;callback&lt;/code&gt; でなければならない &lt;code&gt;Error&lt;/code&gt; 呼び出しが失敗した場合、またはオブジェクト &lt;code&gt;null&lt;/code&gt; の書き込みが成功した場合。</target>
        </trans-unit>
        <trans-unit id="179014424211e6954e7ae18e22c66302ded36897" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータはもはやオプションではありません。渡さないと、DEP0013というIDの非推奨警告が発生します。</target>
        </trans-unit>
        <trans-unit id="5938acd6c222b936a76d043fe7bef6a5ee523eb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will throw a &lt;code&gt;TypeError&lt;/code&gt; at runtime.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータはもはやオプションではありません。渡さないと、実行時に &lt;code&gt;TypeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="80d8feeb9e26a94d3dde87faf723b7d3903dbfca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">現在、 &lt;code&gt;callback&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="ba70c7e9c871db219c8a222ad10026562b6f4eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="ff62e0bdb25bf6e3167f8d2e71d5dcb26d11520e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will always be called with &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;error&lt;/code&gt; parameter in case of success.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; いつもと呼ばれる &lt;code&gt;null&lt;/code&gt; として &lt;code&gt;error&lt;/code&gt; 成功した場合のパラメータ。</target>
        </trans-unit>
        <trans-unit id="a97f9f703037592367df8c46b968f79083b441dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will be called after the resource handle has been closed.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; will be called after the resource handle has been closed.</target>
        </trans-unit>
        <trans-unit id="dc1c85ca488c98544bc81bd9a9e01e47ef3bacd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will likely not be invoked in precisely &lt;code&gt;delay&lt;/code&gt; milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; おそらく正確には呼び出されません &lt;code&gt;delay&lt;/code&gt; （ミリ秒）。Node.jsは、コールバックが発生する正確なタイミングやその順序については保証しません。コールバックは、指定された時間に可能な限り近く呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b4d1ef89737481ccac58dabb8bf32a394b7a7041" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;capture&lt;/code&gt; option is not used by Node.js in any functional way other than tracking registered event listeners per the &lt;code&gt;EventTarget&lt;/code&gt; specification. Specifically, the &lt;code&gt;capture&lt;/code&gt; option is used as part of the key when registering a &lt;code&gt;listener&lt;/code&gt;. Any individual &lt;code&gt;listener&lt;/code&gt; may be added once with &lt;code&gt;capture = false&lt;/code&gt;, and once with &lt;code&gt;capture = true&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;capture&lt;/code&gt; option is not used by Node.js in any functional way other than tracking registered event listeners per the &lt;code&gt;EventTarget&lt;/code&gt; specification. Specifically, the &lt;code&gt;capture&lt;/code&gt; option is used as part of the key when registering a &lt;code&gt;listener&lt;/code&gt; . Any individual &lt;code&gt;listener&lt;/code&gt; may be added once with &lt;code&gt;capture = false&lt;/code&gt; , and once with &lt;code&gt;capture = true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82b8f42c74782ea471baa4a02bd82da50cc18f06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;captureRejections&lt;/code&gt; option in the &lt;code&gt;EventEmitter&lt;/code&gt; constructor or the global setting change this behavior, installing a &lt;code&gt;.then(undefined, handler)&lt;/code&gt; handler on the &lt;code&gt;Promise&lt;/code&gt;. This handler routes the exception asynchronously to the &lt;a href=&quot;#events_emitter_symbol_for_nodejs_rejection_err_eventname_args&quot;&gt;&lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;&lt;/a&gt; method if there is one, or to &lt;a href=&quot;#events_error_events&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event handler if there is none.</source>
          <target state="translated">The &lt;code&gt;captureRejections&lt;/code&gt; option in the &lt;code&gt;EventEmitter&lt;/code&gt; constructor or the global setting change this behavior, installing a &lt;code&gt;.then(undefined, handler)&lt;/code&gt; handler on the &lt;code&gt;Promise&lt;/code&gt; . This handler routes the exception asynchronously to the &lt;a href=&quot;#events_emitter_symbol_for_nodejs_rejection_err_eventname_args&quot;&gt; &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt; &lt;/a&gt; method if there is one, or to &lt;a href=&quot;#events_error_events&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt; event handler if there is none.</target>
        </trans-unit>
        <trans-unit id="1922dd3f5d83e12adee6b2b757d0739f0ad27dfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFile()&lt;/code&gt; function is similar to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; except that it does not spawn a shell by default. Rather, the specified executable &lt;code&gt;file&lt;/code&gt; is spawned directly as a new process making it slightly more efficient than &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;child_process.execFile()&lt;/code&gt; 関数はに似ている&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;それがデフォルトでシェルを起動しないことを除いて。むしろ、指定された実行可能 &lt;code&gt;file&lt;/code&gt; は新しいプロセスとして直接生成され、&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;よりもわずかに効率的になります。</target>
        </trans-unit>
        <trans-unit id="2a4a0a2c850eea5f5dfb7d502a45c3991da5e300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFileSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited.</source>
          <target state="translated">&lt;code&gt;child_process.execFileSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまでメソッドが返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。</target>
        </trans-unit>
        <trans-unit id="43e339d998d6a81aa79698538c93cb46b8fd4348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the child process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">&lt;code&gt;child_process.execSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまでメソッドが返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。子プロセスが &lt;code&gt;SIGTERM&lt;/code&gt; シグナルをインターセプトして処理し、終了しない場合、親プロセスは子プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="79ab2f31fa112d0a33071b52bf3919603eb10e38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.fork()&lt;/code&gt; method is a special case of &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; used specifically to spawn new Node.js processes. Like &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object is returned. The returned &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See &lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;subprocess.send()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;child_process.fork()&lt;/code&gt; メソッドは、特殊なケースである&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;新しいNode.jsのプロセスを起動するために特に使用されます。&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;オブジェクトが返されます。返された&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;には、追加の通信チャネルが組み込まれており、親と子の間でメッセージをやり取りできます。詳細については、&lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="baf57fba487307b776480db4b6f5caa8f5c57761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt;, with command line arguments in &lt;code&gt;args&lt;/code&gt;. If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</source>
          <target state="translated">&lt;code&gt;child_process.spawn()&lt;/code&gt; メソッドは、指定された使用して新しいプロセススポーン &lt;code&gt;command&lt;/code&gt; のコマンドライン引数を使用して、 &lt;code&gt;args&lt;/code&gt; 。省略した場合、 &lt;code&gt;args&lt;/code&gt; はデフォルトで空の配列になります。</target>
        </trans-unit>
        <trans-unit id="bed0498aaeb6be9f0b258ce105499e41924500b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt;, with command-line arguments in &lt;code&gt;args&lt;/code&gt;. If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</source>
          <target state="translated">The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt; , with command-line arguments in &lt;code&gt;args&lt;/code&gt; . If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</target>
        </trans-unit>
        <trans-unit id="ff2c5a22e3f39b38bd7778f858fd5a2731fa71b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawnSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">&lt;code&gt;child_process.spawnSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまで関数が返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。プロセスが &lt;code&gt;SIGTERM&lt;/code&gt; シグナルをインターセプトして処理し、終了しない場合、親プロセスは子プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="7e4066aabced91d6898f68577001b144876c3550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn child processes in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt;&lt;code&gt;popen(3)&lt;/code&gt;&lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">&lt;code&gt;child_process&lt;/code&gt; モジュールする、同様の、しかし同一ではない方法でスポーン子プロセスする能力を提供する&lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt; &lt;code&gt;popen(3)&lt;/code&gt; &lt;/a&gt;。この機能は主に、&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="9390a72ee9e9daffab348d7a85c9e259634d7445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt;&lt;code&gt;popen(3)&lt;/code&gt;&lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt; &lt;code&gt;popen(3)&lt;/code&gt; &lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt; function:</target>
        </trans-unit>
        <trans-unit id="7ab6bb247d807aa99f0d1ad8784b0eb604c5e644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunk&lt;/code&gt; argument can now be a &lt;code&gt;Uint8Array&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;chunk&lt;/code&gt; 引数は、今することができ &lt;code&gt;Uint8Array&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="59a049e2241d0e91f8119efebfab57152070fdcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.getAuthTag()&lt;/code&gt; method should only be called after encryption has been completed using the &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;cipher.getAuthTag()&lt;/code&gt; 暗号化を使用して完了した後にメソッドは、呼び出されるべき&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="fc2e9e0a05a5ea6249159718bf69662d588f281e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cipher.setAAD()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a674ee975c802867ef81a7453297330883d95c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb4365192a6a89f79bcda437a280cc2772a31e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;cipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;cipher.update()&lt;/code&gt; メソッドは、までは新しいデータで複数回呼び出すことができ&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;と呼ばれています。 &lt;code&gt;cipher.update()&lt;/code&gt; 後に&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="eab25cea22e5e6d0a936bebbeff627b02e836ed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;codeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;codeGeneration&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a6544e8c92f9b1421cb39964549a6fba71ba9b10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option accepts numbers for a new output mode.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションは、新しい出力モード用の番号を受け入れます。</target>
        </trans-unit>
        <trans-unit id="4e0fd9c17389d34407b63c9830ee6259874d3554" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="9c60993429a8283c8b6bb30d9d486cf8be30652b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; options default is changed to &lt;code&gt;3&lt;/code&gt; and the &lt;code&gt;breakLength&lt;/code&gt; options default is changed to &lt;code&gt;80&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションのデフォルトに変更された &lt;code&gt;3&lt;/code&gt; 及び &lt;code&gt;breakLength&lt;/code&gt; のオプションのデフォルト値に変更される &lt;code&gt;80&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c8daef3b2446d622017a6e79a063c5bb6f4079c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function can be called asynchronously if it accepts two arguments:</source>
          <target state="translated">次の2つの引数を受け入れる場合、 &lt;code&gt;completer&lt;/code&gt; 関数を非同期で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="978d498a3782c9fe0dec8c9101e02b8242d86778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function takes the current line entered by the user as an argument, and returns an &lt;code&gt;Array&lt;/code&gt; with 2 entries:</source>
          <target state="translated">&lt;code&gt;completer&lt;/code&gt; 関数は、引数として、ユーザによって入力された現在の行を受け取り、戻り &lt;code&gt;Array&lt;/code&gt; 2つのエントリが：</target>
        </trans-unit>
        <trans-unit id="2bd4321de6a5c1add0d20d51980bd23d40c9f9c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;conditions&lt;/code&gt; property on the &lt;code&gt;context&lt;/code&gt; is an array of conditions for &lt;a href=&quot;packages#packages_conditional_exports&quot;&gt;Conditional exports&lt;/a&gt; that apply to this resolution request. They can be used for looking up conditional mappings elsewhere or to modify the list when calling the default resolution logic.</source>
          <target state="translated">The &lt;code&gt;conditions&lt;/code&gt; property on the &lt;code&gt;context&lt;/code&gt; is an array of conditions for &lt;a href=&quot;packages#packages_conditional_exports&quot;&gt;Conditional exports&lt;/a&gt; that apply to this resolution request. They can be used for looking up conditional mappings elsewhere or to modify the list when calling the default resolution logic.</target>
        </trans-unit>
        <trans-unit id="fc31eb91c139ef8d491acdbbebec616d5484155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.debug()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.debug()&lt;/code&gt; 関数の別名で&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="defb8cff6c1e951f6de2d07f458d2babac7ba2a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.info()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.info()&lt;/code&gt; 関数の別名で&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cecd0aff03a02528c4539c7c9f56be627a6fd0bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.warn()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.warn()&lt;/code&gt; 関数での別名である&lt;a href=&quot;#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9c8303533d153fb137daa18d249448d01467f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console&lt;/code&gt; module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.</source>
          <target state="translated">&lt;code&gt;console&lt;/code&gt; モジュールは、Webブラウザが提供するJavaScriptコンソール機構と同様である簡単なデバッグコンソールを提供します。</target>
        </trans-unit>
        <trans-unit id="764cd16bca065f3cc69ab4d8a92233579209fc99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constants&lt;/code&gt; module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the &lt;code&gt;constants&lt;/code&gt; property exposed by the relevant module. For instance, &lt;code&gt;require('fs').constants&lt;/code&gt; and &lt;code&gt;require('os').constants&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constants&lt;/code&gt; モジュールが推奨されていません。特定のNode.js組み込みモジュールに関連する定数へのアクセスが必要な場合、開発者は代わりに、関連するモジュールによって公開される &lt;code&gt;constants&lt;/code&gt; プロパティを参照する必要があります。たとえば、 &lt;code&gt;require('fs').constants&lt;/code&gt; および &lt;code&gt;require('os').constants&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d5392b0ffb88c2d741b4a827845f941c5aa7e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; parameter can refer to an ES6 class now.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; パラメータは現在ES6クラスを参照することができます。</target>
        </trans-unit>
        <trans-unit id="91794b1474f58b591b318c4eb4de0f99f69c42fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from an end user. For instance:</source>
          <target state="translated">&lt;code&gt;constructorOpt&lt;/code&gt; の引数は、エンドユーザからのエラー発生の実装の詳細を隠蔽するために有用です。例えば：</target>
        </trans-unit>
        <trans-unit id="d2d6dc4aafe65e06a01071452301d4785efeb6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from the user. For instance:</source>
          <target state="translated">The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from the user. For instance:</target>
        </trans-unit>
        <trans-unit id="3f58213ab25c95853528316189bfb6d69406e28a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content-length&lt;/code&gt; header field will be automatically set.</source>
          <target state="translated">&lt;code&gt;content-length&lt;/code&gt; ヘッダフィールドが自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="54297810109a40e006edcdd14b8aa735a9c0830f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; given during the call to &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; can be retrieved from any thread with a call to &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; への通話中に所定の &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; を呼び出して、任意のスレッドから取得することができる &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ed0f099bbb846c6a8d341dea02523807f589314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contextCodeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;contextCodeGeneration&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d724f5e9ffe9edd754ed243abdbb481de04378bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cost&lt;/code&gt;, &lt;code&gt;blockSize&lt;/code&gt; and &lt;code&gt;parallelization&lt;/code&gt; option names have been added.</source>
          <target state="translated">&lt;code&gt;cost&lt;/code&gt; 、 &lt;code&gt;blockSize&lt;/code&gt; および &lt;code&gt;parallelization&lt;/code&gt; オプション名が追加されました。</target>
        </trans-unit>
        <trans-unit id="2ebacbab8ba40ddb7c2a01713d06a73151a28484" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crlfDelay&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;crlfDelay&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4f76355cd575f0ec09649052dbc2cc2c523a151b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.Credentials&lt;/code&gt; class was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.SecureContext&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;crypto.Credentials&lt;/code&gt; クラスが削除されました。代わりに&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.SecureContext&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="ab8548d3b4f7b48f74cef5f090f011d004a39e9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backward compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</source>
          <target state="translated">The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backward compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</target>
        </trans-unit>
        <trans-unit id="496c02ce2af63849a303e1f5ac12f7c5f3707e06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backwards compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; のメカニズムが期待レガシープログラムとの下位互換性のために提供される &lt;code&gt;'latin1'&lt;/code&gt; デフォルトのエンコードします。</target>
        </trans-unit>
        <trans-unit id="09a09563094e226c530650f4b442648579a0291b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property can be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback. This property, however, has been deprecated and use should be avoided.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; プロパティは、方法に変更するために使用することができ &lt;code&gt;derivedKey&lt;/code&gt; は、コールバックに渡されます。ただし、このプロパティは廃止されており、使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="252e5ce33b7a0494ca5705dfa01113826b19a5dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property may be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is returned. This property, however, is deprecated and use should be avoided.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; プロパティは、方法に変更するために使用することができる &lt;code&gt;derivedKey&lt;/code&gt; が返されます。ただし、このプロパティは非推奨であり、使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="145e6ed1d4b3ecb5175a68c99648976754551213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto._toBuf()&lt;/code&gt; function was not designed to be used by modules outside of Node.js core and was removed.</source>
          <target state="translated">&lt;code&gt;crypto._toBuf()&lt;/code&gt; 関数は、外部のNode.jsコアのモジュールによって使用されるように設計されていないし、除去しました。</target>
        </trans-unit>
        <trans-unit id="decbf0573b73333da4f753cecb890dd944596753" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.createCredentials()&lt;/code&gt; API was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;crypto.createCredentials()&lt;/code&gt; APIを除去しました。代わりに&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="dfb78b96f9539bdae500b0c828afd631df6535c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.randomBytes()&lt;/code&gt; method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.</source>
          <target state="translated">&lt;code&gt;crypto.randomBytes()&lt;/code&gt; 利用可能な十分なエントロピーがあるまで、この方法では完了しません。これには通常、数ミリ秒以上かかることはありません。ランダムバイトを生成する唯一の時間は、システム全体のエントロピーがまだ低い場合に、ブート直後にブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8339e284a971532b7d28d05ffe582daa5f7966b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールは、OpenSSLのハッシュ、HMAC、暗号、復号、符号のラッパーのセットを含み、および機能を検証する暗号化機能を提供します。</target>
        </trans-unit>
        <trans-unit id="480ec0b6a393327edcc239ebe43596e74863e8c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides the &lt;code&gt;Certificate&lt;/code&gt; class for working with SPKAC data. The most common usage is handling output generated by the HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; element. Node.js uses &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSL's SPKAC implementation&lt;/a&gt; internally.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールが提供 &lt;code&gt;Certificate&lt;/code&gt; SPKACデータを扱うためのクラスを。最も一般的な使用法は、HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; 要素によって生成された出力の処理です。Node.jsは&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSLのSPKAC実装を&lt;/a&gt;内部で使用します。</target>
        </trans-unit>
        <trans-unit id="2a2dac1ece53434551141ebdd9ed53915ef72940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are too weak for safe use.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールは、まだ、すでに危険にさらされており、現在は使用することは推奨されていないいくつかのアルゴリズムをサポートしています。APIは、安全に使用するには弱すぎる、小さい鍵サイズの暗号とハッシュの使用も許可します。</target>
        </trans-unit>
        <trans-unit id="012c7bdf0d9689e836fec05c286230617e01c04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; property returns the total number of bytes written to the underlying socket &lt;em&gt;including&lt;/em&gt; the bytes required for the implementation of the TLS protocol.</source>
          <target state="translated">&lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; プロパティは、下にあるソケットに書き込まれたバイトの総数を返し&lt;em&gt;を含む&lt;/em&gt; TLSプロトコルの実装のために必要なバイト。</target>
        </trans-unit>
        <trans-unit id="a4ffdb22912634d83f537b8778b7f78372135d6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cwd&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;cwd&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a785322575851f3cbfa6c65e6bc51bc7994b4d6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; パラメータは、今することができ &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="059fb205840fb573709992ff65937e48e8c47ccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14b07c7cbf1b68cd88bdda8eaa254aa5613b484c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</source>
          <target state="translated">The &lt;code&gt;data&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="25b52938a5997495e89f01c495bc114797b50757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</source>
          <target state="translated">The &lt;code&gt;data&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</target>
        </trans-unit>
        <trans-unit id="d699a8e66e291d4dbb66069406e56fa6a3bdbd56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;decipher.setAAD()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd0108662c04d88926a087d2bc8bf093bc824eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; and can only be called once.</source>
          <target state="translated">&lt;code&gt;decipher.setAuthTag()&lt;/code&gt; メソッドが呼び出される前にしなければならない&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;一度だけ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e673be07517d431f070c860e94bf9566340b507d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;CCM&lt;/code&gt; mode or before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; modes. &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; can only be called once.</source>
          <target state="translated">The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt; for &lt;code&gt;CCM&lt;/code&gt; mode or before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt; for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; modes. &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; can only be called once.</target>
        </trans-unit>
        <trans-unit id="e84318ad593602027e542c7e5bfeb9cd812b2a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6ed87d0293868649e057451f66f944a2b809c18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;decipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;decipher.update()&lt;/code&gt; メソッドがするまで、新しいデータで複数回呼び出すことができます&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;と呼ばれています。 &lt;code&gt;decipher.update()&lt;/code&gt; 後に&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="a0770c4cae4c4f8a3dc5664ccd10e0ca3a8b2e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultOptions&lt;/code&gt; value allows customization of the default options used by &lt;code&gt;util.inspect&lt;/code&gt;. This is useful for functions like &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;util.format&lt;/code&gt; which implicitly call into &lt;code&gt;util.inspect&lt;/code&gt;. It shall be set to an object containing one or more valid &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; options. Setting option properties directly is also supported.</source>
          <target state="translated">&lt;code&gt;defaultOptions&lt;/code&gt; の値がで使用されるデフォルトのオプションをカスタマイズできます &lt;code&gt;util.inspect&lt;/code&gt; を。これは、 &lt;code&gt;util.format&lt;/code&gt; を暗黙的に呼び出す &lt;code&gt;console.log&lt;/code&gt; やutil.formatなどの関数に &lt;code&gt;util.inspect&lt;/code&gt; ます。1つ以上の有効な&lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;オプションを含むオブジェクトに設定する必要があります。オプションプロパティの直接設定もサポートされています。</target>
        </trans-unit>
        <trans-unit id="ef6cc6afd4679ef76190a9f15f4f9a33f7099fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed back to &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt; デフォルトはに戻す &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a51131897a7f510936321ce110be4936110e773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt; に変更デフォルトの &lt;code&gt;20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b84842f945868c618332d4e911b58899660aa5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram.Socket&lt;/code&gt; object is an &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; that encapsulates the datagram functionality.</source>
          <target state="translated">&lt;code&gt;dgram.Socket&lt;/code&gt; のオブジェクトがある&lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;データグラムの機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="86b0893a7f189daf0b825fd662edb92ff8ee749b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module previously contained several APIs that were never meant to accessed outside of Node.js core: &lt;code&gt;Socket.prototype._handle&lt;/code&gt;, &lt;code&gt;Socket.prototype._receiving&lt;/code&gt;, &lt;code&gt;Socket.prototype._bindState&lt;/code&gt;, &lt;code&gt;Socket.prototype._queue&lt;/code&gt;, &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt;, &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt;, &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt;, and &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt;.</source>
          <target state="translated">以前の &lt;code&gt;dgram&lt;/code&gt; モジュールには、Node.jsコアの外部からアクセスすることを意図していないいくつかのAPIが含まれていました： &lt;code&gt;Socket.prototype._handle&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._receiving&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._bindState&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._queue&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt; 、および &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f59c7eb695d24e543b8bf8e05bcf31a8bb305b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP Datagram sockets.</source>
          <target state="translated">&lt;code&gt;dgram&lt;/code&gt; モジュールは、UDPデータグラムソケットの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="b97b1eaf999d50e4e0e41ecd874b2ab16c8cc8e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP datagram sockets.</source>
          <target state="translated">The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP datagram sockets.</target>
        </trans-unit>
        <trans-unit id="e49cb4f4a826367eb475ccde83a8070b593f0ec6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dictionary&lt;/code&gt; オプションが可能 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd508cc93689322f1c77c76b0ee7e9bb1098555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;dictionary&lt;/code&gt; オプションが可能 &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="3f15d09ab57639a0bbd963ccdc2d326537fb64d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; parameter is always required now.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; パラメータは常に必須になりました。</target>
        </trans-unit>
        <trans-unit id="ea73cbcffb6d3d2f70aa60b49f9b6128e82ab354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.promises&lt;/code&gt; API provides an alternative set of asynchronous DNS methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('dns').promises&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dns.promises&lt;/code&gt; の APIが返す非同期DNS法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには &lt;code&gt;require('dns').promises&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ebf732de7db900928d3336c4bb8043ad1b55b006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">&lt;code&gt;dns.setServers()&lt;/code&gt; DNSクエリが進行している状態でメソッドを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="51cfea11e5b64abbc7488234cdc0f7e71e59f882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns&lt;/code&gt; module contains functions belonging to two different categories:</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; モジュールには2つの異なるカテゴリに属する機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="1c076fd4cc8eef045d3a434a9b28f60938b5083c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns&lt;/code&gt; module enables name resolution. For example, use it to look up IP addresses of host names.</source>
          <target state="translated">The &lt;code&gt;dns&lt;/code&gt; module enables name resolution. For example, use it to look up IP addresses of host names.</target>
        </trans-unit>
        <trans-unit id="db764debbedbbc99da97635f28c98936c8927a81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dnsPromises.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">&lt;code&gt;dnsPromises.setServers()&lt;/code&gt; DNSクエリが進行している状態でメソッドを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="679e20c13d5a3c302673244281bcd94fae6b6f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;domain&lt;/code&gt; module was not usable since it could not establish the required error handling hooks, because &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; had been called at an earlier point in time.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; ので、それは、フックを取り扱う必要なエラーを確立できませんでしたので、モジュールは使用できませんでした&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; は&lt;/a&gt;、過去の時点で呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="04d4ce38eb55867a1f7955e0fe695cba0c0dd698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; cannot be set to &lt;code&gt;false&lt;/code&gt; anymore due to a change in OpenSSL.</source>
          <target state="translated">&lt;code&gt;ecdhCurve&lt;/code&gt; は、に設定することができない &lt;code&gt;false&lt;/code&gt; のOpenSSLの変化に起因するもう。</target>
        </trans-unit>
        <trans-unit id="742b9fe51501d348db258ff24896c339ef5c45a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option can now be multiple &lt;code&gt;':'&lt;/code&gt; separated curve names or &lt;code&gt;'auto'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ecdhCurve&lt;/code&gt; のオプションは、複数の可能 &lt;code&gt;':'&lt;/code&gt; 曲線名または区切ら &lt;code&gt;'auto'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a892c664f54e9e71b866fc1d18e553d9a45ee0de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option to &lt;code&gt;tls.createSecureContext()&lt;/code&gt; and &lt;code&gt;tls.TLSSocket&lt;/code&gt; could be set to &lt;code&gt;false&lt;/code&gt; to disable ECDH entirely on the server only. This mode was deprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with the client and is now unsupported. Use the &lt;code&gt;ciphers&lt;/code&gt; parameter instead.</source>
          <target state="translated">&lt;code&gt;tls.createSecureContext()&lt;/code&gt; および &lt;code&gt;tls.TLSSocket&lt;/code&gt; の &lt;code&gt;ecdhCurve&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定して、サーバーでのみECDHを完全に無効にすることができます。このモードは、OpenSSL 1.1.0への移行とクライアントとの一貫性のために廃止され、現在はサポートされていません。代わりに &lt;code&gt;ciphers&lt;/code&gt; パラメータを使用してください。</target>
        </trans-unit>
        <trans-unit id="2946f4082b1f02b207349af665cbc73adc1f9552" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enableTrace&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;enableTrace&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="357c0a04ac7d9b56fc95efc24a727a047b1c2cd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; argument is optional and only applies when &lt;code&gt;chunk&lt;/code&gt; is a string. Defaults to &lt;code&gt;'utf8'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 引数はオプションで、ときにのみ適用される &lt;code&gt;chunk&lt;/code&gt; 文字列です。デフォルトは &lt;code&gt;'utf8'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef7385768a7559ac9db4c147901248a0ed8b3a9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option can now explicitly be set to &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; オプションが明示的に設定することができる &lt;code&gt;buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b949d0b7f0849d139bac2ef42775cb8a31f70428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 場合、このオプションは無視され &lt;code&gt;data&lt;/code&gt; バッファです。</target>
        </trans-unit>
        <trans-unit id="d666b890d21afc0e001c3363da9e22a106d0a9c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer. If &lt;code&gt;data&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</source>
          <target state="translated">The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer. If &lt;code&gt;data&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</target>
        </trans-unit>
        <trans-unit id="1a6472fc1cb86c5ad31a896cde8078ce10d04af0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option sets the encoding for the &lt;code&gt;path&lt;/code&gt; while opening the directory and subsequent read operations.</source>
          <target state="translated">The &lt;code&gt;encoding&lt;/code&gt; option sets the encoding for the &lt;code&gt;path&lt;/code&gt; while opening the directory and subsequent read operations.</target>
        </trans-unit>
        <trans-unit id="b82c726c3a2d2cdae71f022dd63da3f76e7b51f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f494a34f4cd91e5259dbe4178555f1b760f38c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">&lt;code&gt;endMark&lt;/code&gt; の引数は、任意の特定する必要があり&lt;em&gt;、既存の&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; をパフォーマンスタイムラインまたはタイムスタンプが提供するプロパティのいずれかに &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラス。指定された &lt;code&gt;endMark&lt;/code&gt; が存在しない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="035516361da0b390a8068076aae888f97126f601" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enter()&lt;/code&gt; method is plumbing used by the &lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;intercept()&lt;/code&gt; methods to set the active domain. It sets &lt;code&gt;domain.active&lt;/code&gt; and &lt;code&gt;process.domain&lt;/code&gt; to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see &lt;a href=&quot;#domain_domain_exit&quot;&gt;&lt;code&gt;domain.exit()&lt;/code&gt;&lt;/a&gt; for details on the domain stack). The call to &lt;code&gt;enter()&lt;/code&gt; delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">&lt;code&gt;enter()&lt;/code&gt; メソッドは、で使用される配管である &lt;code&gt;run()&lt;/code&gt; 、 &lt;code&gt;bind()&lt;/code&gt; 、及び &lt;code&gt;intercept()&lt;/code&gt; 活性ドメインを設定する方法。 &lt;code&gt;domain.active&lt;/code&gt; と &lt;code&gt;process.domain&lt;/code&gt; をドメインに設定し、ドメインをドメインモジュールが管理するドメインスタックに暗黙的にプッシュします（ドメインスタックの詳細については&lt;a href=&quot;#domain_domain_exit&quot;&gt; &lt;code&gt;domain.exit()&lt;/code&gt; &lt;/a&gt;を参照）。呼び出し &lt;code&gt;enter()&lt;/code&gt; 非同期呼び出しとドメインに結合しているI / O操作のチェーンの始まりを区切ります。</target>
        </trans-unit>
        <trans-unit id="878c228a3891a931f577debd9834c0775a12f11d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entryType&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to &lt;code&gt;'http2'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; の &lt;code&gt;entryType&lt;/code&gt; プロパティは &lt;code&gt;'http2'&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="617453f3174a055bf920718631ceba8eb76b661c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eq&lt;/code&gt; parameter may now have a length of more than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eq&lt;/code&gt; パラメータは、今以上の長さを持っていることが &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64d6d95c1dd980f5b3c2e4b04d2297f9d27e6386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js Error Codes&lt;/a&gt; for details about specific codes.</source>
          <target state="translated">&lt;code&gt;error.code&lt;/code&gt; のプロパティには、エラーの種類を識別する文字列ラベルです。 &lt;code&gt;error.code&lt;/code&gt; は、エラーを識別する最も安定した方法です。Node.jsのメジャーバージョン間でのみ変更されます。対照的に、 &lt;code&gt;error.message&lt;/code&gt; 文字列はNode.jsのすべてのバージョン間で変更される可能性があります。参照してください&lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.jsのエラーコード&lt;/a&gt;の特定のコードの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="3347ac748f1478e4103b2313fa99687bfbc5467a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js error codes&lt;/a&gt; for details about specific codes.</source>
          <target state="translated">The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js error codes&lt;/a&gt; for details about specific codes.</target>
        </trans-unit>
        <trans-unit id="3da77ca9b7d80cdbbc4b9941df09bb518dfe59ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string representing the error code.</source>
          <target state="translated">&lt;code&gt;error.code&lt;/code&gt; のプロパティには、エラーコードを表す文字列です。</target>
        </trans-unit>
        <trans-unit id="0462a22edefc087f260f18509f515b9c274d6098" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.errno&lt;/code&gt; property is a negative number which corresponds to the error code defined in &lt;a href=&quot;https://docs.libuv.org/en/v1.x/errors.html&quot;&gt;&lt;code&gt;libuv Error handling&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;error.errno&lt;/code&gt; property is a negative number which corresponds to the error code defined in &lt;a href=&quot;https://docs.libuv.org/en/v1.x/errors.html&quot;&gt; &lt;code&gt;libuv Error handling&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c17e79c636fe0fafffb682716e2b3876c8f191fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.errno&lt;/code&gt; property is a number or a string. If it is a number, it is a negative value which corresponds to the error code defined in &lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt;&lt;code&gt;libuv Error handling&lt;/code&gt;&lt;/a&gt;. See the libuv &lt;code&gt;errno.h&lt;/code&gt; header file (&lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; in the Node.js source tree) for details. In case of a string, it is the same as &lt;code&gt;error.code&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error.errno&lt;/code&gt; のプロパティには、数値または文字列です。数値の場合は、&lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt; &lt;code&gt;libuv Error handling&lt;/code&gt; &lt;/a&gt;定義されたエラーコードに対応する負の値です。詳細については、libuv &lt;code&gt;errno.h&lt;/code&gt; ヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; ）を参照してください。文字列の場合、 &lt;code&gt;error.code&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="c80fb4345ad46d4df0a661a74199f2ed642ab2a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.message&lt;/code&gt; property is the string description of the error as set by calling &lt;code&gt;new Error(message)&lt;/code&gt;. The &lt;code&gt;message&lt;/code&gt; passed to the constructor will also appear in the first line of the stack trace of the &lt;code&gt;Error&lt;/code&gt;, however changing this property after the &lt;code&gt;Error&lt;/code&gt; object is created &lt;em&gt;may not&lt;/em&gt; change the first line of the stack trace (for example, when &lt;code&gt;error.stack&lt;/code&gt; is read before this property is changed).</source>
          <target state="translated">&lt;code&gt;error.message&lt;/code&gt; プロパティを呼び出すことにより、セットとして、エラーの内容を文字列である &lt;code&gt;new Error(message)&lt;/code&gt; 。 &lt;code&gt;message&lt;/code&gt; コンストラクタに渡されたものスタックトレースの1行目に表示されます &lt;code&gt;Error&lt;/code&gt; が後にこのプロパティを変更し、 &lt;code&gt;Error&lt;/code&gt; オブジェクトが作成されることは&lt;em&gt;ないかもしれない&lt;/em&gt;とき、例えばスタックトレース（の最初の行を変更 &lt;code&gt;error.stack&lt;/code&gt; がありますこのプロパティが変更される前にお読みください）。</target>
        </trans-unit>
        <trans-unit id="25a415e8d164701e31d0b96126983bc43065fc68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.stack&lt;/code&gt; property is a string describing the point in the code at which the &lt;code&gt;Error&lt;/code&gt; was instantiated.</source>
          <target state="translated">&lt;code&gt;error.stack&lt;/code&gt; のプロパティはれるコード内のポイントを説明する文字列で &lt;code&gt;Error&lt;/code&gt; インスタンス化されました。</target>
        </trans-unit>
        <trans-unit id="d5acdef4005210a3526de3c7d5bda753b7e60335" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</source>
          <target state="translated">&lt;code&gt;error.syscall&lt;/code&gt; プロパティが記述した文字列である&lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;システムコール&lt;/a&gt;に失敗しました。</target>
        </trans-unit>
        <trans-unit id="92c008a2e253d549202ad3115de62d2c095ae034" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;https://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</source>
          <target state="translated">The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;https://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</target>
        </trans-unit>
        <trans-unit id="a80d7026184c56cb488e8de9fb1edb33c83fa941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can be an object containing regular expressions now.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは現在、正規表現を含むオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="23ad1e5536984136751e24c5beb50e064c8e1314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an arrow function.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは現在、矢印関数とすることができます。</target>
        </trans-unit>
        <trans-unit id="b920ead4094b0b12297c0fe4c240d5ed11034b0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an object as well.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは、今だけでなく、オブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="2075e684d8f10b167c2b70e099103394abc86151" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. It is important to keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</source>
          <target state="translated">&lt;code&gt;eventEmitter.emit()&lt;/code&gt; メソッドは、引数の任意のセットは、リスナー関数に渡すことを可能にします。通常のリスナー関数が呼び出されると、標準の &lt;code&gt;this&lt;/code&gt; キーワードが意図的に設定され、リスナーが接続されている &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスを参照することに注意してください。</target>
        </trans-unit>
        <trans-unit id="2308aa877b07598c8f4935e760a6b13fc0fd2a7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. Keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</source>
          <target state="translated">The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. Keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</target>
        </trans-unit>
        <trans-unit id="21c566d2f82267df390f7fd5efa6c966214afa01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventLoopUtilization()&lt;/code&gt; method returns an object that contains the cumulative duration of time the event loop has been both idle and active as a high resolution milliseconds timer. The &lt;code&gt;utilization&lt;/code&gt; value is the calculated Event Loop Utilization (ELU). If bootstrapping has not yet finished, the properties have the value of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;eventLoopUtilization()&lt;/code&gt; method returns an object that contains the cumulative duration of time the event loop has been both idle and active as a high resolution milliseconds timer. The &lt;code&gt;utilization&lt;/code&gt; value is the calculated Event Loop Utilization (ELU). If bootstrapping has not yet finished, the properties have the value of &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fd11c7fea7eabceaea846d7b9ea1f99d450ca58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execArgv&lt;/code&gt; option passed to the &lt;code&gt;Worker&lt;/code&gt; constructor contains invalid flags.</source>
          <target state="translated">&lt;code&gt;execArgv&lt;/code&gt; のに渡されたオプション &lt;code&gt;Worker&lt;/code&gt; コンストラクタは無効なフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="e789f0770a175e554087330639eaebd93b4880ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; および &lt;code&gt;complete&lt;/code&gt; コールバックは、それは、それぞれのタスクを完了したときにexecutorが実行する準備ができたときに呼び出されます関数です。</target>
        </trans-unit>
        <trans-unit id="0d3d4486e4b536fc372bcf42a2a03816737fda87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in &lt;code&gt;complete&lt;/code&gt; callback instead. Avoid using the &lt;code&gt;napi_env&lt;/code&gt; parameter in the execute callback as it will likely execute JavaScript.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 機能では、JavaScriptの実行またはJavaScriptオブジェクトとの相互作用が生じる可能性が任意のN-APIの呼び出しを行うことは避けてください。ほとんどの場合、N-API呼び出しを行う必要があるコードは、代わりに &lt;code&gt;complete&lt;/code&gt; コールバックで行う必要があります。JavaScriptを実行する可能性が高いため、実行コールバックで &lt;code&gt;napi_env&lt;/code&gt; パラメータを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6d9348413b98a81a0cf3dd07ab0db2e379200c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;existingPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;existingPath&lt;/code&gt; と &lt;code&gt;newPath&lt;/code&gt; パラメータはWHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="77a9639aa0f385798a0047ae8b69bbc802072163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit()&lt;/code&gt; method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to &lt;code&gt;exit()&lt;/code&gt; delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">&lt;code&gt;exit()&lt;/code&gt; メソッドは、ドメインスタックからそれをポップ、現在のドメインを終了します。実行が非同期呼び出しの異なるチェーンのコンテキストに切り替わるときは常に、現在のドメインが終了していることを確認することが重要です。呼び出し &lt;code&gt;exit()&lt;/code&gt; 区切るのいずれかの終了または非同期呼び出しとドメインにバインドされたI / O操作のチェーンの中断。</target>
        </trans-unit>
        <trans-unit id="48733cf26ae9be875c167b92318f9677041ff285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; variable is available within a module's file-level scope, and is assigned the value of &lt;code&gt;module.exports&lt;/code&gt; before the module is evaluated.</source>
          <target state="translated">&lt;code&gt;exports&lt;/code&gt; 変数は、モジュールのファイルレベルの範囲内で利用可能であり、値が割り当てられる &lt;code&gt;module.exports&lt;/code&gt; はをモジュールが評価される前に。</target>
        </trans-unit>
        <trans-unit id="a019ecd29494a1f2cd556e3b0b23499397ece231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fd&lt;/code&gt; option may now be a &lt;code&gt;FileHandle&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;fd&lt;/code&gt; option may now be a &lt;code&gt;FileHandle&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51b35ef516d7b399065983da2f4b540dd40099ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; name may be an absolute path. If it is not, the default directory it will be written to is controlled by the &lt;a href=&quot;#cli_diagnostic_dir_directory&quot;&gt;--diagnostic-dir&lt;/a&gt; command-line option.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 名は絶対パスかもしれません。そうでない場合、書き込まれるデフォルトのディレクトリは&lt;a href=&quot;#cli_diagnostic_dir_directory&quot;&gt;--diagnostic-dir&lt;/a&gt;コマンドラインオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="d4838da588ca8557b0914d534154a3d490886ef3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; パラメータは現在、ファイルディスクリプタすることができます。</target>
        </trans-unit>
        <trans-unit id="22d5077a20466a9b9f6e10fc0c1adc2b51f64e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; argument may not be provided depending on operating system support. If &lt;code&gt;filename&lt;/code&gt; is provided, it will be provided as a &lt;code&gt;Buffer&lt;/code&gt; if &lt;code&gt;fs.watch()&lt;/code&gt; is called with its &lt;code&gt;encoding&lt;/code&gt; option set to &lt;code&gt;'buffer'&lt;/code&gt;, otherwise &lt;code&gt;filename&lt;/code&gt; will be a UTF-8 string.</source>
          <target state="translated">オペレーティングシステムのサポートによっては、 &lt;code&gt;filename&lt;/code&gt; 引数が提供されない場合があります。場合 &lt;code&gt;filename&lt;/code&gt; 提供され、それはのように提供される &lt;code&gt;Buffer&lt;/code&gt; 場合 &lt;code&gt;fs.watch()&lt;/code&gt; は、そのと呼ばれる &lt;code&gt;encoding&lt;/code&gt; のオプションセット &lt;code&gt;'buffer'&lt;/code&gt; 、そうでない場合 &lt;code&gt;filename&lt;/code&gt; UTF-8文字列です。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
