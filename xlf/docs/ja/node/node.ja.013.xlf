<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="14e00386da63c018937b609a03a6c28267f1376b" translate="yes" xml:space="preserve">
          <source>Use-case</source>
          <target state="translated">Use-case</target>
        </trans-unit>
        <trans-unit id="076dfed9bb64ae1973f85bbafed11ff094afb9b7" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;N-API&lt;/code&gt; when &lt;code&gt;Constructor.prototype&lt;/code&gt; is not an object.</source>
          <target state="translated">&lt;code&gt;Constructor.prototype&lt;/code&gt; がオブジェクトでないときに &lt;code&gt;N-API&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="f72f4e59693c2865eebdfafc952cee36d7e9a557" translate="yes" xml:space="preserve">
          <source>Used comparison changed from Strict Equality to &lt;code&gt;Object.is()&lt;/code&gt;</source>
          <target state="translated">使用される比較がStrict Equalityから &lt;code&gt;Object.is()&lt;/code&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="db16827b1edd8cd50f51af8bc6cc80b85ac16c6d" translate="yes" xml:space="preserve">
          <source>Used comparison changed from Strict Equality to &lt;code&gt;Object.is()&lt;/code&gt;.</source>
          <target state="translated">使用される比較が &lt;code&gt;Object.is()&lt;/code&gt; からObject.is（）に変更されました。</target>
        </trans-unit>
        <trans-unit id="15e9f8f7397050b664350844dc4e6a33a7224b3d" translate="yes" xml:space="preserve">
          <source>Used generically to identify that an operation caused an out of memory condition.</source>
          <target state="translated">一般的には、操作によってメモリ不足状態が発生したことを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1e1d73a3cdadd107c1c0da0fdccf79bf1ab7ae85" translate="yes" xml:space="preserve">
          <source>Used in the &lt;code&gt;repl&lt;/code&gt; in case the old history file is used and an error occurred while trying to read and parse it.</source>
          <target state="translated">古い履歴ファイルが使用され、それを読み取って解析しようとしたときにエラーが発生した場合に、 &lt;code&gt;repl&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="f6a37aa63269784f0b4d16ef57e43eb383bb66e3" translate="yes" xml:space="preserve">
          <source>Used to handle binary data. See the &lt;a href=&quot;buffer&quot;&gt;buffer section&lt;/a&gt;.</source>
          <target state="translated">バイナリデータの処理に使用されます。&lt;a href=&quot;buffer&quot;&gt;バッファセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="121dfb0e20e51079f748b8e0a1ace5ae85b26d22" translate="yes" xml:space="preserve">
          <source>Used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.</source>
          <target state="translated">一般的にユーザーコードによってトリガされるべきではない、特定の種類の Node.js 内部エラーを識別するために使用されます。このエラーのインスタンスは、Node.js バイナリ自体の内部バグを指しています。</target>
        </trans-unit>
        <trans-unit id="ce0213c2efe3eaf7abfd7af48ac8bb37a30fe5e7" translate="yes" xml:space="preserve">
          <source>Used to import modules, &lt;code&gt;JSON&lt;/code&gt;, and local files. Modules can be imported from &lt;code&gt;node_modules&lt;/code&gt;. Local modules and JSON files can be imported using a relative path (e.g. &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;./foo&lt;/code&gt;, &lt;code&gt;./bar/baz&lt;/code&gt;, &lt;code&gt;../foo&lt;/code&gt;) that will be resolved against the directory named by &lt;a href=&quot;#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt; (if defined) or the current working directory.</source>
          <target state="translated">モジュール、 &lt;code&gt;JSON&lt;/code&gt; 、ローカルファイルのインポートに使用されます。モジュールは &lt;code&gt;node_modules&lt;/code&gt; からインポートできます。ローカルモジュールとJSONファイルは、相対パスを使用してインポートすることができます（例： &lt;code&gt;./&lt;/code&gt; 、 &lt;code&gt;./foo&lt;/code&gt; 、 &lt;code&gt;./bar/baz&lt;/code&gt; 、 &lt;code&gt;../foo&lt;/code&gt; ）で指定されたディレクトリに対して解決されます&lt;a href=&quot;#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; &lt;/a&gt;（定義されている場合）または現在の作業ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="fa8901f3c2c158cdcada361a79f96ed53f062e7a" translate="yes" xml:space="preserve">
          <source>Used to import modules, &lt;code&gt;JSON&lt;/code&gt;, and local files. Modules can be imported from &lt;code&gt;node_modules&lt;/code&gt;. Local modules and JSON files can be imported using a relative path (e.g. &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;./foo&lt;/code&gt;, &lt;code&gt;./bar/baz&lt;/code&gt;, &lt;code&gt;../foo&lt;/code&gt;) that will be resolved against the directory named by &lt;a href=&quot;#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt; (if defined) or the current working directory. The relative paths of POSIX style are resolved in an OS independent fashion, meaning that the examples above will work on Windows in the same way they would on Unix systems.</source>
          <target state="translated">モジュール、 &lt;code&gt;JSON&lt;/code&gt; 、およびローカルファイルをインポートするために使用されます。モジュールは &lt;code&gt;node_modules&lt;/code&gt; からインポートできます。ローカルモジュールとJSONファイルは、相対パスを使用してインポートすることができます（例： &lt;code&gt;./&lt;/code&gt; 、 &lt;code&gt;./foo&lt;/code&gt; 、 &lt;code&gt;./bar/baz&lt;/code&gt; 、 &lt;code&gt;../foo&lt;/code&gt; ）で指定されたディレクトリに対して解決されます&lt;a href=&quot;#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; &lt;/a&gt;（定義されている場合）または現在の作業ディレクトリ。POSIXスタイルの相対パスは、OSに依存しない方法で解決されます。つまり、上記の例は、Unixシステムと同じようにWindowsでも機能します。</target>
        </trans-unit>
        <trans-unit id="8051e6f08f0917697ec0c2567547cefbbb345f70" translate="yes" xml:space="preserve">
          <source>Used to prevent an abort if a string decoder was set on the Socket.</source>
          <target state="translated">ソケットに文字列デコーダが設定されている場合のアボートを防止するために使用されます。</target>
        </trans-unit>
        <trans-unit id="24a89de7a287742d4f61724e35de45c6f674e19c" translate="yes" xml:space="preserve">
          <source>Used to print to stdout and stderr. See the &lt;a href=&quot;console&quot;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">stdoutおよびstderrへの出力に使用されます。&lt;a href=&quot;console&quot;&gt; &lt;code&gt;console&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4da4cffb302360787d219a0d7461f4f5f41ed1b7" translate="yes" xml:space="preserve">
          <source>Used to set a callback function that is called when there is no activity on the &lt;code&gt;Http2Session&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds. The given &lt;code&gt;callback&lt;/code&gt; is registered as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;msecs&lt;/code&gt; 秒ミリ秒後に &lt;code&gt;Http2Session&lt;/code&gt; にアクティビティがないときに呼び出されるコールバック関数を設定するために使用されます。指定された &lt;code&gt;callback&lt;/code&gt; は、 &lt;code&gt;'timeout'&lt;/code&gt; イベントのリスナーとして登録されます。</target>
        </trans-unit>
        <trans-unit id="d6092c257f3fe7fbcae918b9f10d3f9f4b59efd5" translate="yes" xml:space="preserve">
          <source>Used to set the timeout value for http2 secure server requests, and sets a callback function that is called when there is no activity on the &lt;code&gt;Http2SecureServer&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds.</source>
          <target state="translated">http2セキュアサーバーリクエストのタイムアウト値を設定するために使用され、 &lt;code&gt;msecs&lt;/code&gt; 秒ミリ秒後に &lt;code&gt;Http2SecureServer&lt;/code&gt; にアクティビティがないときに呼び出されるコールバック関数を設定します。</target>
        </trans-unit>
        <trans-unit id="6099d205b5ac90f16eaba84f09879638c543bdb1" translate="yes" xml:space="preserve">
          <source>Used to set the timeout value for http2 server requests, and sets a callback function that is called when there is no activity on the &lt;code&gt;Http2Server&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds.</source>
          <target state="translated">http2サーバー要求のタイムアウト値を設定するために使用され、 &lt;code&gt;msecs&lt;/code&gt; 秒ミリ秒後に &lt;code&gt;Http2Server&lt;/code&gt; にアクティビティがないときに呼び出されるコールバック関数を設定します。</target>
        </trans-unit>
        <trans-unit id="8a9e06ca05bd0b8449a2a685aa272bd3371a92a9" translate="yes" xml:space="preserve">
          <source>Used when a TLS renegotiation request has failed in a non-specific way.</source>
          <target state="translated">TLS の再ネゴシエーション要求が非特異的な方法で失敗した場合に使用される。</target>
        </trans-unit>
        <trans-unit id="a98d52897ccd48ecb3e15ea244dd351b3da000ab" translate="yes" xml:space="preserve">
          <source>Used when a child process is being forked without specifying an IPC channel.</source>
          <target state="translated">IPC チャネルを指定せずに子プロセスをフォークしている場合に使用します。</target>
        </trans-unit>
        <trans-unit id="1794600a519f16a59864bcb7c5c177b882aefaec" translate="yes" xml:space="preserve">
          <source>Used when a failure occurs sending an individual frame on the HTTP/2 session.</source>
          <target state="translated">HTTP/2 セッションで個別フレームの送信に失敗した場合に使用します。</target>
        </trans-unit>
        <trans-unit id="4abe7a2e8fd5924bf7dbdcead54c7db33c5f705e" translate="yes" xml:space="preserve">
          <source>Used when a feature that is not available to the current platform which is running Node.js is used.</source>
          <target state="translated">Node.jsが動作している現在のプラットフォームでは利用できない機能を利用する場合に使用します。</target>
        </trans-unit>
        <trans-unit id="61c5e151234f65531c9bcb06fcbd6d0a3e18e2c5" translate="yes" xml:space="preserve">
          <source>Used when a given value is out of the accepted range.</source>
          <target state="translated">指定された値が許容範囲外の場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="0845a17575717bce690fdf146f5a3dc7aca2d779" translate="yes" xml:space="preserve">
          <source>Used when a required header is missing in an HTTP/2 message.</source>
          <target state="translated">HTTP/2 メッセージに必須のヘッダがない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="9467d12ac92740faa32b731bd21160bacd588f2c" translate="yes" xml:space="preserve">
          <source>Used when an &lt;a href=&quot;esm&quot;&gt;ES Module&lt;/a&gt; loader hook specifies &lt;code&gt;format: 'dynamic'&lt;/code&gt; but does not provide a &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook.</source>
          <target state="translated">&lt;a href=&quot;esm&quot;&gt;ESモジュール&lt;/a&gt;ローダーフックが &lt;code&gt;format: 'dynamic'&lt;/code&gt; 指定しているが、 &lt;code&gt;dynamicInstantiate&lt;/code&gt; フックを提供していない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="1b24d21ed4c6621caddd9f321ae8b6a469e204be" translate="yes" xml:space="preserve">
          <source>Used when an HTTP/2 Headers Object is expected.</source>
          <target state="translated">HTTP/2ヘッダオブジェクトが期待される場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b918d798cee5f2a6e9c8d72f61abe8eb608f5d3f" translate="yes" xml:space="preserve">
          <source>Used when an action has been performed on an HTTP/2 Stream that has already been closed.</source>
          <target state="translated">すでに閉じられているHTTP/2ストリームに対してアクションが実行された場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="23bd3e8d7b3edf9e72a7c01d81c202ff7d9bedc0" translate="yes" xml:space="preserve">
          <source>Used when an attempt is made to use a &lt;code&gt;zlib&lt;/code&gt; object after it has already been closed.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; オブジェクトが既に閉じられた後で使用しようとしたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="664c1b2e71185319ae6e8b3d421c03ad9ceaa149" translate="yes" xml:space="preserve">
          <source>Used when an attempt is made to use a readable stream that has not implemented &lt;a href=&quot;stream#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stream#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; を&lt;/a&gt;実装していない読み取り可能なストリームを使用しようとしたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="c6832c2b5ead9c19cb61232927aae0d3eaeaef49" translate="yes" xml:space="preserve">
          <source>Used when an invalid character is found in an HTTP response status message (reason phrase).</source>
          <target state="translated">HTTP 応答ステータスメッセージ(理由フレーズ)に無効な文字が見つかった場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="429695ecac5f7fdb897661f9a315b10c325303e4" translate="yes" xml:space="preserve">
          <source>Used when the main process is trying to read data from the child process's STDERR/STDOUT, and the data's length is longer than the &lt;code&gt;maxBuffer&lt;/code&gt; option.</source>
          <target state="translated">メインプロセスが子プロセスのSTDERR / STDOUTからデータを読み取ろうとしているときに、データの長さが &lt;code&gt;maxBuffer&lt;/code&gt; オプションより長い場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="d86017044b62d046dd7d3f8a998cad704c8b25df" translate="yes" xml:space="preserve">
          <source>Used with &lt;code&gt;--experimental-modules&lt;/code&gt;, this configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; とともに使用すると、これはNode.jsを構成して、文字列入力をCommonJSまたはESモジュールとして解釈します。文字列の入力は、を介して入力される &lt;code&gt;--eval&lt;/code&gt; 、 &lt;code&gt;--print&lt;/code&gt; 、または &lt;code&gt;STDIN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbdf0f773f2695d034eda295b87b8838ae8922ee" translate="yes" xml:space="preserve">
          <source>Useful V8 options</source>
          <target state="translated">便利なV8オプション</target>
        </trans-unit>
        <trans-unit id="2ae2f04ad43660c25b4e8672a9f94dac65a9177d" translate="yes" xml:space="preserve">
          <source>User Timing</source>
          <target state="translated">ユーザータイミング</target>
        </trans-unit>
        <trans-unit id="25616a502c1bbb6bbe041649df7e3295c2d10d6d" translate="yes" xml:space="preserve">
          <source>User code will not construct &lt;code&gt;Http2Stream&lt;/code&gt; instances directly. Rather, these are created, managed, and provided to user code through the &lt;code&gt;Http2Session&lt;/code&gt; instance. On the server, &lt;code&gt;Http2Stream&lt;/code&gt; instances are created either in response to an incoming HTTP request (and handed off to user code via the &lt;code&gt;'stream'&lt;/code&gt; event), or in response to a call to the &lt;code&gt;http2stream.pushStream()&lt;/code&gt; method. On the client, &lt;code&gt;Http2Stream&lt;/code&gt; instances are created and returned when either the &lt;code&gt;http2session.request()&lt;/code&gt; method is called, or in response to an incoming &lt;code&gt;'push'&lt;/code&gt; event.</source>
          <target state="translated">ユーザーコードは &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスを直接構築しません。むしろ、これらは作成され、管理され、 &lt;code&gt;Http2Session&lt;/code&gt; インスタンスを通じてユーザーコードに提供されます。サーバー上で、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、着信HTTPリクエストへの応答（および &lt;code&gt;'stream'&lt;/code&gt; イベントを介してユーザーコードに渡される）、または &lt;code&gt;http2stream.pushStream()&lt;/code&gt; メソッドの呼び出しへの応答として作成されます。クライアントでは、 &lt;code&gt;http2session.request()&lt;/code&gt; メソッドが呼び出されたとき、または着信 &lt;code&gt;'push'&lt;/code&gt; イベントに応答して、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが作成されて返されます。</target>
        </trans-unit>
        <trans-unit id="39f51fc9e130a165a9061ccc184b4da818b4ea69" translate="yes" xml:space="preserve">
          <source>User code will not create &lt;code&gt;Http2Session&lt;/code&gt; instances directly. Server-side &lt;code&gt;Http2Session&lt;/code&gt; instances are created by the &lt;code&gt;Http2Server&lt;/code&gt; instance when a new HTTP/2 connection is received. Client-side &lt;code&gt;Http2Session&lt;/code&gt; instances are created using the &lt;code&gt;http2.connect()&lt;/code&gt; method.</source>
          <target state="translated">ユーザーコードは &lt;code&gt;Http2Session&lt;/code&gt; インスタンスを直接作成しません。サーバー側の &lt;code&gt;Http2Session&lt;/code&gt; インスタンスは、新しいHTTP / 2接続を受信したときに &lt;code&gt;Http2Server&lt;/code&gt; インスタンスによって作成されます。クライアント側の &lt;code&gt;Http2Session&lt;/code&gt; インスタンスは、 &lt;code&gt;http2.connect()&lt;/code&gt; メソッドを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="fddae98305cdd05d2b80966abde1a85c4a0cb970" translate="yes" xml:space="preserve">
          <source>User code will typically not listen for this event directly.</source>
          <target state="translated">ユーザーコードは通常、このイベントを直接リッスンすることはありません。</target>
        </trans-unit>
        <trans-unit id="fe593d151fbd8534d3e17f4a715524cf5537157f" translate="yes" xml:space="preserve">
          <source>User defined prototype properties are inspected in case &lt;code&gt;showHidden&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;showHidden&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、ユーザー定義のプロトタイププロパティが検査されます。</target>
        </trans-unit>
        <trans-unit id="e44d414f4523cb0020fa3bb9ef006880758d42a0" translate="yes" xml:space="preserve">
          <source>User-specified errors triggered by application code.</source>
          <target state="translated">アプリケーションコードによって引き起こされるユーザー指定のエラー。</target>
        </trans-unit>
        <trans-unit id="7006cd764ba16178062bfab50e81a707bc1f87ed" translate="yes" xml:space="preserve">
          <source>Users are able to define their own &lt;code&gt;type&lt;/code&gt; when using the public embedder API.</source>
          <target state="translated">パブリックエンベッダーAPIを使用する場合、ユーザーは独自の &lt;code&gt;type&lt;/code&gt; を定義できます。</target>
        </trans-unit>
        <trans-unit id="cf5ef9d00cdafe23ad10052c62fc3a82ffe4cd3c" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;MakeCallback&lt;/code&gt; that add the &lt;code&gt;domain&lt;/code&gt; property to carry context, should start using the &lt;code&gt;async_context&lt;/code&gt; variant of &lt;code&gt;MakeCallback&lt;/code&gt; or &lt;code&gt;CallbackScope&lt;/code&gt;, or the high-level &lt;code&gt;AsyncResource&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; プロパティを追加してコンテキストを運ぶ &lt;code&gt;MakeCallback&lt;/code&gt; のユーザーは、 &lt;code&gt;MakeCallback&lt;/code&gt; または &lt;code&gt;CallbackScope&lt;/code&gt; の &lt;code&gt;async_context&lt;/code&gt; バリアント、または高レベルの &lt;code&gt;AsyncResource&lt;/code&gt; クラスの使用を開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="76bd16f83da4c24b980d59d68158565cc72444d4" translate="yes" xml:space="preserve">
          <source>Users should take full responsibility for selecting the crypto algorithm and key size according to their security requirements.</source>
          <target state="translated">ユーザーは、セキュリティ要件に応じて暗号アルゴリズムとキーサイズを選択するために全責任を負うべきである。</target>
        </trans-unit>
        <trans-unit id="125395920a5c21bcd712ff46c895d10dd8989f5b" translate="yes" xml:space="preserve">
          <source>Users who experience large or growing &lt;code&gt;bufferSize&lt;/code&gt; should attempt to &quot;throttle&quot; the data flows in their program with &lt;a href=&quot;#net_socket_pause&quot;&gt;&lt;code&gt;socket.pause()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#net_socket_resume&quot;&gt;&lt;code&gt;socket.resume()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bufferSize&lt;/code&gt; が大きい、または増大しているユーザーは、&lt;a href=&quot;#net_socket_pause&quot;&gt; &lt;code&gt;socket.pause()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#net_socket_resume&quot;&gt; &lt;code&gt;socket.resume()&lt;/code&gt; &lt;/a&gt;を使用して、プログラム内のデータフローを「抑制」する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0b211e8d0fac47b645a9c120fc49ca3721fc00f" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;obj&lt;/code&gt; and prints the resulting string to &lt;code&gt;stdout&lt;/code&gt;. This function bypasses any custom &lt;code&gt;inspect()&lt;/code&gt; function defined on &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; で&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;を使用し、結果の文字列を &lt;code&gt;stdout&lt;/code&gt; に出力します。この関数は、 &lt;code&gt;obj&lt;/code&gt; で定義されたカスタム &lt;code&gt;inspect()&lt;/code&gt; 関数をバイパスします。</target>
        </trans-unit>
        <trans-unit id="8a548e7c578e9bcae5441755ca6981e1376b6940" translate="yes" xml:space="preserve">
          <source>Uses a &lt;a href=&quot;#v8_class_v8_defaultdeserializer&quot;&gt;&lt;code&gt;DefaultDeserializer&lt;/code&gt;&lt;/a&gt; with default options to read a JS value from a buffer.</source>
          <target state="translated">デフォルトのオプションで&lt;a href=&quot;#v8_class_v8_defaultdeserializer&quot;&gt; &lt;code&gt;DefaultDeserializer&lt;/code&gt; &lt;/a&gt;を使用して、バッファからJS値を読み取ります。</target>
        </trans-unit>
        <trans-unit id="ffa3ccebd075b40f80d680d211108b377dc2860c" translate="yes" xml:space="preserve">
          <source>Uses a &lt;a href=&quot;#v8_class_v8_defaultserializer&quot;&gt;&lt;code&gt;DefaultSerializer&lt;/code&gt;&lt;/a&gt; to serialize &lt;code&gt;value&lt;/code&gt; into a buffer.</source>
          <target state="translated">&lt;a href=&quot;#v8_class_v8_defaultserializer&quot;&gt; &lt;code&gt;DefaultSerializer&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;value&lt;/code&gt; をバッファーにシリアル化します。</target>
        </trans-unit>
        <trans-unit id="3e77d28cd7b2015b232d52aaadac17eb6a30ee01" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CNAME&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of canonical name records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['bar.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; &lt;code&gt;CNAME&lt;/code&gt; レコードを解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;hostname&lt;/code&gt; 使用できる正規名レコードの配列で解決されます（例： &lt;code&gt;['bar.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bb68d3eb1bfdcd227e65a5b4689509e2b0fe739c" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CNAME&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of canonical name records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['bar.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; &lt;code&gt;CNAME&lt;/code&gt; レコードを解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 正規名の配列を入れる機能が利用できるために記録し &lt;code&gt;hostname&lt;/code&gt; （例： &lt;code&gt;['bar.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="13e7d8dc5961f06bdcab36b2aa9dd7f9b7f85a28" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve IPv4 addresses (&lt;code&gt;A&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of IPv4 addresses (e.g. &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; IPv4アドレス（ &lt;code&gt;A&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; はIPv4アドレスの配列で解決されます（例： &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0c48d5cd8409e2e76101eadd1fce8d4f40ef0330" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve IPv6 addresses (&lt;code&gt;AAAA&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of IPv6 addresses.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; IPv6アドレス（ &lt;code&gt;AAAA&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は一連のIPv6アドレスで解決されます。</target>
        </trans-unit>
        <trans-unit id="66301e6000e1db09536b4bdae064e2b5fa0494b8" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a IPv4 addresses (&lt;code&gt;A&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of IPv4 addresses (e.g. &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の IPv4アドレス（ &lt;code&gt;A&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 機能は、IPv4アドレスの配列を含んでいます（例えば &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="11d194e2b3963c1420f88e04b7c8db00b6ab9e52" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a IPv6 addresses (&lt;code&gt;AAAA&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of IPv6 addresses.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の IPv6アドレス（ &lt;code&gt;AAAA&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 機能は、IPv6アドレスの配列を含んでいます。</target>
        </trans-unit>
        <trans-unit id="b9e411c1d095a916a43fc5af2efc5891cd2e489d" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a host name (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. The &lt;code&gt;callback&lt;/code&gt; function has arguments &lt;code&gt;(err, records)&lt;/code&gt;. When successful, &lt;code&gt;records&lt;/code&gt; will be an array of resource records. The type and structure of individual results varies based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（例： &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。 &lt;code&gt;callback&lt;/code&gt; 関数は、引数を持っている &lt;code&gt;(err, records)&lt;/code&gt; 。成功すると、 &lt;code&gt;records&lt;/code&gt; はリソースレコードの配列になります。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="0d8e2cf4737608f9a6c0665ab07ec0fd30414f31" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a host name (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. When successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of resource records. The type and structure of individual results vary based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（例： &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; はリソースレコードの配列で解決されます。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="ca7ed788165420143fc03ed1657a6c888a22a6f3" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a hostname (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. The &lt;code&gt;callback&lt;/code&gt; function has arguments &lt;code&gt;(err, records)&lt;/code&gt;. When successful, &lt;code&gt;records&lt;/code&gt; will be an array of resource records. The type and structure of individual results varies based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（ &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。 &lt;code&gt;callback&lt;/code&gt; 関数は、引数を持っている &lt;code&gt;(err, records)&lt;/code&gt; 。成功すると、 &lt;code&gt;records&lt;/code&gt; はリソースレコードの配列になります。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; に基づいて異なります。</target>
        </trans-unit>
        <trans-unit id="b416ceeaa487d3b737e0905aac04cace17b4a344" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a hostname (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. When successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of resource records. The type and structure of individual results vary based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（ &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は一連のリソースレコードで解決されます。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="5a5f278be9d05db0c31bebe95c9e1802d584b324" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a start of authority record (&lt;code&gt;SOA&lt;/code&gt; record) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an object with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の機関レコードの開始（ &lt;code&gt;SOA&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は次のプロパティを持つオブジェクトで解決されます。</target>
        </trans-unit>
        <trans-unit id="7b9a78a34b578f971014342e21ffa69021b10337" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a start of authority record (&lt;code&gt;SOA&lt;/code&gt; record) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;address&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an object with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の機関レコードの開始（ &lt;code&gt;SOA&lt;/code&gt; レコード）を解決します。 &lt;code&gt;address&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、次のプロパティを持つオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="1d74ad0a633112cf81a8691b4596126feb4dd586" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve all records (also known as &lt;code&gt;ANY&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; query). On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array containing various types of records. Each object has a property &lt;code&gt;type&lt;/code&gt; that indicates the type of the current record. And depending on the &lt;code&gt;type&lt;/code&gt;, additional properties will be present on the object:</source>
          <target state="translated">DNSプロトコルを使用してすべてのレコードを解決します（ &lt;code&gt;ANY&lt;/code&gt; または &lt;code&gt;*&lt;/code&gt; クエリとも呼ばれます）。成功すると、 &lt;code&gt;Promise&lt;/code&gt; はさまざまなタイプのレコードを含む配列で解決されます。各オブジェクトには、現在のレコードの &lt;code&gt;type&lt;/code&gt; を示すプロパティタイプがあります。 &lt;code&gt;type&lt;/code&gt; に応じて、追加のプロパティがオブジェクトに存在します。</target>
        </trans-unit>
        <trans-unit id="91e1407dc9084d4aaa922119e46c0bce323d3dc6" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve all records (also known as &lt;code&gt;ANY&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; query). The &lt;code&gt;ret&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array containing various types of records. Each object has a property &lt;code&gt;type&lt;/code&gt; that indicates the type of the current record. And depending on the &lt;code&gt;type&lt;/code&gt;, additional properties will be present on the object:</source>
          <target state="translated">DNSプロトコルを使用してすべてのレコードを解決します（ &lt;code&gt;ANY&lt;/code&gt; または &lt;code&gt;*&lt;/code&gt; クエリとも呼ばれます）。 &lt;code&gt;ret&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、レコードの様々なタイプを含む配列となります。各オブジェクトには、現在のレコードの &lt;code&gt;type&lt;/code&gt; を示すプロパティタイプがあります。 &lt;code&gt;type&lt;/code&gt; に応じて、追加のプロパティがオブジェクトに存在します。</target>
        </trans-unit>
        <trans-unit id="30c274b11b43436ca8e50e4b9bb064ebfa8da047" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve mail exchange records (&lt;code&gt;MX&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects containing both a &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;exchange&lt;/code&gt; property (e.g. &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; メール交換レコード（ &lt;code&gt;MX&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;priority&lt;/code&gt; と &lt;code&gt;exchange&lt;/code&gt; プロパティの両方を含むオブジェクトの配列で解決されます（例： &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="109d6398fcfc69ceb7fa119270ab376ba6aa392e" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve mail exchange records (&lt;code&gt;MX&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of objects containing both a &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;exchange&lt;/code&gt; property (e.g. &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; メール交換レコード（ &lt;code&gt;MX&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、両方を含むオブジェクトの配列を含むであろう &lt;code&gt;priority&lt;/code&gt; と &lt;code&gt;exchange&lt;/code&gt; 性（例えば &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dc59fbd604c9eff0af9fa4244d01a2d19d4bd02a" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve name server records (&lt;code&gt;NS&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of name server records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; ネームサーバーレコード（ &lt;code&gt;NS&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;hostname&lt;/code&gt; 使用可能なネームサーバーレコードの配列で解決されます（例： &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a484c1ce770c84e5d673e21b1f4c11f303be390f" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve name server records (&lt;code&gt;NS&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of name server records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; ネームサーバーレコード（ &lt;code&gt;NS&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数がために利用可能なネームサーバーレコードの配列が含まれます &lt;code&gt;hostname&lt;/code&gt; （例えば &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5f701aceb1092a30bfd015c6bc287c6570a19d1b" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve pointer records (&lt;code&gt;PTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of strings containing the reply records.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; のポインターレコード（ &lt;code&gt;PTR&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は応答レコードを含む文字列の配列で解決されます。</target>
        </trans-unit>
        <trans-unit id="51cf59a347f4849fe20aa2233c19cbb8407512e2" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve pointer records (&lt;code&gt;PTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array of strings containing the reply records.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; のポインターレコード（ &lt;code&gt;PTR&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、応答レコードを含む文字列の配列になります。</target>
        </trans-unit>
        <trans-unit id="3c00d6863ed2c84283db0b45a7fe5c8f979162e0" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve regular expression based records (&lt;code&gt;NAPTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の正規表現ベースのレコード（ &lt;code&gt;NAPTR&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は次のプロパティを持つオブジェクトの配列で解決されます。</target>
        </trans-unit>
        <trans-unit id="dbf18146ec8d0d15c5714fd4e604aee38719c40f" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve regular expression based records (&lt;code&gt;NAPTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の正規表現ベースのレコード（ &lt;code&gt;NAPTR&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、次のプロパティを持つオブジェクトの配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="f6fadfed87100de6310ccfb92dbee96e3e654ff8" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve service records (&lt;code&gt;SRV&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; サービスレコード（ &lt;code&gt;SRV&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は次のプロパティを持つオブジェクトの配列で解決されます。</target>
        </trans-unit>
        <trans-unit id="73c844bbadf29a730e5b2f6bec825acea856f5b3" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve service records (&lt;code&gt;SRV&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; サービスレコード（ &lt;code&gt;SRV&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、次のプロパティを持つオブジェクトの配列になります。</target>
        </trans-unit>
        <trans-unit id="c1829d47cc7a75e0eab657043bb6bf54db2a3b9d" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve text queries (&lt;code&gt;TXT&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with a two-dimensional array of the text records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt;). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; テキストクエリ（ &lt;code&gt;TXT&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;hostname&lt;/code&gt; 使用可能なテキストレコードの2次元配列で解決されます（例 &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt; ）。各サブ配列には、1つのレコードのTXTチャンクが含まれています。ユースケースに応じて、これらを結合するか、個別に処理することができます。</target>
        </trans-unit>
        <trans-unit id="d9d9bd15a950f14f1ee431ff23ce67682340f14c" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve text queries (&lt;code&gt;TXT&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;records&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function is a two-dimensional array of the text records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt;). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; テキストクエリ（ &lt;code&gt;TXT&lt;/code&gt; レコード）を解決します。 &lt;code&gt;records&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、テキストの2次元配列がために利用可能な記録され &lt;code&gt;hostname&lt;/code&gt; （例えば &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt; ）。各サブ配列には、1つのレコードのTXTチャンクが含まれています。ユースケースに応じて、これらを結合するか、個別に処理することができます。</target>
        </trans-unit>
        <trans-unit id="616674bd4b150c64ea79003b2aaf1d39214fdf57" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile()&lt;/code&gt; and &lt;code&gt;fs.unwatchFile()&lt;/code&gt;. &lt;code&gt;fs.watch()&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile()&lt;/code&gt; and &lt;code&gt;fs.unwatchFile()&lt;/code&gt; when possible.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt; &lt;code&gt;fs.watch()&lt;/code&gt; の&lt;/a&gt;使用は、 &lt;code&gt;fs.watchFile()&lt;/code&gt; および &lt;code&gt;fs.unwatchFile()&lt;/code&gt; よりも効率的です。 &lt;code&gt;fs.watch()&lt;/code&gt; の代わりに使用されるべきである &lt;code&gt;fs.watchFile()&lt;/code&gt; と &lt;code&gt;fs.unwatchFile()&lt;/code&gt; 可能。</target>
        </trans-unit>
        <trans-unit id="7acdc60681bce725b5f723840ea2948503a011d1" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile&lt;/code&gt; and &lt;code&gt;fs.unwatchFile&lt;/code&gt;. &lt;code&gt;fs.watch&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile&lt;/code&gt; and &lt;code&gt;fs.unwatchFile&lt;/code&gt; when possible.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt; &lt;code&gt;fs.watch()&lt;/code&gt; の&lt;/a&gt;使用は、 &lt;code&gt;fs.watchFile&lt;/code&gt; および &lt;code&gt;fs.unwatchFile&lt;/code&gt; よりも効率的です。 &lt;code&gt;fs.watch&lt;/code&gt; が代わりに使用されなければならない &lt;code&gt;fs.watchFile&lt;/code&gt; と &lt;code&gt;fs.unwatchFile&lt;/code&gt; 可能。</target>
        </trans-unit>
        <trans-unit id="1d856b63c6bc2607094f4910592eaafc6767cf8e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;crypto#crypto_crypto_createcipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createCipher()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createDecipher()&lt;/code&gt;&lt;/a&gt; should be avoided as they use a weak key derivation function (MD5 with no salt) and static initialization vectors. It is recommended to derive a key using &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;crypto#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; to obtain the &lt;a href=&quot;crypto#crypto_class_cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_class_decipher&quot;&gt;&lt;code&gt;Decipher&lt;/code&gt;&lt;/a&gt; objects respectively.</source>
          <target state="translated">使用&lt;a href=&quot;crypto#crypto_crypto_createcipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createCipher()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;crypto#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createDecipher()&lt;/code&gt; &lt;/a&gt;それらが弱い鍵導出関数（無塩とMD5）と静的初期化ベクトルを使用するように避けるべきです。&lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt; &lt;code&gt;crypto.scrypt()&lt;/code&gt; &lt;/a&gt;を使用して鍵を導出し、&lt;a href=&quot;crypto#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;crypto#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt;を使用してそれぞれ&lt;a href=&quot;crypto#crypto_class_cipher&quot;&gt; &lt;code&gt;Cipher&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;crypto#crypto_class_decipher&quot;&gt; &lt;code&gt;Decipher&lt;/code&gt; &lt;/a&gt;オブジェクトを取得することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4b53d1b9edfc43df645d059459c36ecb01b6cc17" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;'readable'&lt;/code&gt; requires calling &lt;code&gt;.read()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; を使用するには、 &lt;code&gt;.read()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="a0776ba10ce280120f92b94baeeaca430daff582" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool</source>
          <target state="translated">&lt;code&gt;Worker&lt;/code&gt; スレッドプールに &lt;code&gt;AsyncResource&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="00f82cdad4ad46b131c753812c570f4c13076bc0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.doesNotReject()&lt;/code&gt; is actually not useful because there is little benefit in catching a rejection and then rejecting it again. Instead, consider adding a comment next to the specific code path that should not reject and keep error messages as expressive as possible.</source>
          <target state="translated">&lt;code&gt;assert.doesNotReject()&lt;/code&gt; を使用しても、拒否をキャッチして再度拒否するメリットはほとんどないため、実際には役に立ちません。代わりに、エラーメッセージを拒否してできるだけ表現力を持たせないようにする特定のコードパスの横にコメントを追加することを検討してください。</target>
        </trans-unit>
        <trans-unit id="3df009e595692ba82d237e1bc93633ed46c2f125" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; is actually not useful because there is no benefit in catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible.</source>
          <target state="translated">エラーをキャッチしてから再スローしてもメリットがないため、 &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; を使用しても実際には役に立ちません。代わりに、エラーメッセージをスローして保持するべきではない特定のコードパスの横にコメントを追加して、可能な限り表現力を高めることを検討してください。</target>
        </trans-unit>
        <trans-unit id="8a7025ea485b11ba34d71bc4d34fa0cc905dbacf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than one argument is deprecated. Use &lt;code&gt;assert.fail()&lt;/code&gt; with only one argument or use a different &lt;code&gt;assert&lt;/code&gt; module method.</source>
          <target state="translated">複数の引数を指定した &lt;code&gt;assert.fail()&lt;/code&gt; の使用は非推奨です。使用 &lt;code&gt;assert.fail()&lt;/code&gt; 唯一の引数で、異なる使用 &lt;code&gt;assert&lt;/code&gt; モジュール方式を。</target>
        </trans-unit>
        <trans-unit id="2fab1e938204573f477a12aeb4d7d89efdf6f853" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than two arguments is possible but deprecated. See below for further details.</source>
          <target state="translated">3 つ以上の引数を指定して &lt;code&gt;assert.fail()&lt;/code&gt; を使用することは可能ですが、非推奨です。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="e32aee247c3e1fa65dfda18102dd4efc4ac847de" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;async&lt;/code&gt; functions with event handlers is problematic, because it can lead to an unhandled rejection in case of a thrown exception:</source>
          <target state="translated">イベントハンドラーで &lt;code&gt;async&lt;/code&gt; 関数を使用すると、例外がスローされた場合に未処理の拒否が発生する可能性があるため、問題があります。</target>
        </trans-unit>
        <trans-unit id="1df525a3f01a20d07a7478823ea9706315ce03a1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;cleartext&lt;/code&gt; has the same API as &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cleartext&lt;/code&gt; の使用には、&lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;と同じAPIがあります。</target>
        </trans-unit>
        <trans-unit id="b83dbd9102872f7df5e6cd66317d7029d871d346" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;executionAsyncResource()&lt;/code&gt; in the top-level execution context will return an empty object as there is no handle or request object to use, but having an object representing the top-level can be helpful.</source>
          <target state="translated">使用 &lt;code&gt;executionAsyncResource()&lt;/code&gt; を使用へのハンドルまたは要求オブジェクトが存在しないように、最上位実行コンテキストでは、空のオブジェクトを返すであろうが、トップレベルを表すオブジェクトを持つことは有用であり得ます。</target>
        </trans-unit>
        <trans-unit id="014449c1eec2b95f43b792ba5e16cf560609f257" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.access()&lt;/code&gt; to check for the accessibility of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</source>
          <target state="translated">使用 &lt;code&gt;fs.access()&lt;/code&gt; を呼び出す前に、ファイルのアクセス可能性をチェックするために &lt;code&gt;fs.open()&lt;/code&gt; 、 &lt;code&gt;fs.readFile()&lt;/code&gt; または &lt;code&gt;fs.writeFile()&lt;/code&gt; 推奨されません。他のプロセスが2つの呼び出し間でファイルの状態を変更する可能性があるため、これを行うと競合状態が発生します。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルにアクセスできない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5a8a3949f23f51bf204d9b3ac70d7f2b96dab32" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.exists()&lt;/code&gt; to check for the existence of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.</source>
          <target state="translated">使用 &lt;code&gt;fs.exists()&lt;/code&gt; を呼び出す前に、ファイルの存在を確認する &lt;code&gt;fs.open()&lt;/code&gt; 、 &lt;code&gt;fs.readFile()&lt;/code&gt; または &lt;code&gt;fs.writeFile()&lt;/code&gt; は推奨されません。他のプロセスが2つの呼び出し間でファイルの状態を変更する可能性があるため、これを行うと競合状態が発生します。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルが存在しない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="970e60822303aa19d5df0e3b029d9e1d8c3b3bec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.rmdir()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">ファイル（ディレクトリではない &lt;code&gt;fs.rmdir()&lt;/code&gt; でfs.rmdir（）を使用すると、Windowsでは &lt;code&gt;ENOENT&lt;/code&gt; エラーが発生し、POSIXでは &lt;code&gt;ENOTDIR&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bf6ef6db0ae8640548b812e024c0fa7a48f1c482" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.rmdirSync()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">ファイル（ディレクトリではない &lt;code&gt;fs.rmdirSync()&lt;/code&gt; でfs.rmdirSync（）を使用すると、Windowsでは &lt;code&gt;ENOENT&lt;/code&gt; エラーが発生し、POSIXでは &lt;code&gt;ENOTDIR&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a9f914be0f6e22f62b0aedd8bc70861ee2deabaa" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.stat()&lt;/code&gt; to check for the existence of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.</source>
          <target state="translated">使用 &lt;code&gt;fs.stat()&lt;/code&gt; を呼び出す前に、ファイルの存在を確認するために &lt;code&gt;fs.open()&lt;/code&gt; 、 &lt;code&gt;fs.readFile()&lt;/code&gt; または &lt;code&gt;fs.writeFile()&lt;/code&gt; 推奨されません。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルが利用できない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="866bfc24ae093b35297a6e8aab3beb28ab1fd1f4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.writeFile()&lt;/code&gt; with File Descriptors</source>
          <target state="translated">ファイル記述 &lt;code&gt;fs.writeFile()&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="335c637b7e6b77e8111a742f9e57617c84a27b7c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.writeFile()&lt;/code&gt; with file descriptors</source>
          <target state="translated">ファイル記述子での &lt;code&gt;fs.writeFile()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="0a5d496423749962cb5512ba1b233acfcd0078b4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fsPromises.access()&lt;/code&gt; to check for the accessibility of a file before calling &lt;code&gt;fsPromises.open()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</source>
          <target state="translated">使用 &lt;code&gt;fsPromises.access()&lt;/code&gt; を呼び出す前に、ファイルのアクセシビリティをチェックするために &lt;code&gt;fsPromises.open()&lt;/code&gt; 推奨されません。他のプロセスが2つの呼び出し間でファイルの状態を変更する可能性があるため、これを行うと競合状態が発生します。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルにアクセスできない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="c607cf90a0d8916415b340eb0252a8713b884eb8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; on a file (not a directory) results in the &lt;code&gt;Promise&lt;/code&gt; being rejected with an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">ファイル（ディレクトリではない &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; でfsPromises.rmdir（）を使用すると、Windowsでは &lt;code&gt;ENOENT&lt;/code&gt; エラー、POSIXでは &lt;code&gt;ENOTDIR&lt;/code&gt; エラーで &lt;code&gt;Promise&lt;/code&gt; が拒否されます。</target>
        </trans-unit>
        <trans-unit id="07472a684a532bb4eee8dd81f03cb60e9e4331c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;options.selectPadding()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;options.selectPadding()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="81de70c1267400cfc41cc7333bc90195bd61f1a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;process.binding()&lt;/code&gt; in general should be avoided. The type checking methods in particular can be replaced by using &lt;a href=&quot;util#util_util_types&quot;&gt;&lt;code&gt;util.types&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;process.binding()&lt;/code&gt; の使用は避けてください。特にタイプチェックメソッドは、&lt;a href=&quot;util#util_util_types&quot;&gt; &lt;code&gt;util.types&lt;/code&gt; &lt;/a&gt;を使用して置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="7d9d256692251bf585c474d243da24c4bf848c2c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;promisify()&lt;/code&gt; on class methods or other methods that use &lt;code&gt;this&lt;/code&gt; may not work as expected unless handled specially:</source>
          <target state="translated">使用 &lt;code&gt;promisify()&lt;/code&gt; クラスメソッドまたは使用する他の方法で &lt;code&gt;this&lt;/code&gt; 特殊な方法で処理しない限り、期待どおりかもしれない作業：</target>
        </trans-unit>
        <trans-unit id="1f9fa4662d9e59fdef4b483f80021b9e3a425c60" translate="yes" xml:space="preserve">
          <source>Using OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables.</source>
          <target state="translated">OpenSSLストアを使用することで、ストアを外部から変更することができます。ほとんどの Linux や BSD ディストリビューションでは、このストアはディストリビューションのメンテナやシステム管理者によって管理されています。OpenSSL CAストアの場所はOpenSSLライブラリの設定に依存しますが、これは環境変数を使って実行時に変更することができます。</target>
        </trans-unit>
        <trans-unit id="0ddc3e6b3b925cb8ef6a355cbeeeb58f94dd4be4" translate="yes" xml:space="preserve">
          <source>Using WHATWG &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; objects might introduce platform-specific behaviors.</source>
          <target state="translated">WHATWG &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;オブジェクトを使用すると、プラットフォーム固有の動作が導入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="9024760327c0026f81de6546b338f59f0dbed57d" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;vm.Module&lt;/code&gt; object requires three distinct steps: creation/parsing, linking, and evaluation. These three steps are illustrated in the following example.</source>
          <target state="translated">&lt;code&gt;vm.Module&lt;/code&gt; オブジェクトを使用するには、作成/解析、リンク、および評価の3つの異なるステップが必要です。これらの3つのステップは、次の例に示されています。</target>
        </trans-unit>
        <trans-unit id="2e0ad87979a98d2f046dff89a35addd29f2194ab" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object requires four distinct steps: creation/parsing, linking, instantiation, and evaluation. These four steps are illustrated in the following example.</source>
          <target state="translated">&lt;code&gt;vm.SourceTextModule&lt;/code&gt; オブジェクトを使用するには、作成/解析、リンク、インスタンス化、および評価という4つの異なる手順が必要です。これらの4つの手順を次の例に示します。</target>
        </trans-unit>
        <trans-unit id="c9b23dcc63cc7270d9b15447d12ff7f9dfd57376" translate="yes" xml:space="preserve">
          <source>Using a property named &lt;code&gt;inspect&lt;/code&gt; on an object to specify a custom inspection function for &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is deprecated. Use &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt;&lt;code&gt;util.inspect.custom&lt;/code&gt;&lt;/a&gt; instead. For backward compatibility with Node.js prior to version 6.4.0, both can be specified.</source>
          <target state="translated">オブジェクトで &lt;code&gt;inspect&lt;/code&gt; という名前のプロパティを使用して、&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; の&lt;/a&gt;カスタム検査関数を指定することは非推奨です。代わりに&lt;a href=&quot;util#util_util_inspect_custom&quot;&gt; &lt;code&gt;util.inspect.custom&lt;/code&gt; &lt;/a&gt;を使用してください。バージョン6.4.0より前のNode.jsとの下位互換性のために、両方を指定できます。</target>
        </trans-unit>
        <trans-unit id="dcf15580a7b8d6e22735987585fb71e72c7b9956" translate="yes" xml:space="preserve">
          <source>Using a property named &lt;code&gt;inspect&lt;/code&gt; on an object to specify a custom inspection function for &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is deprecated. Use &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt;&lt;code&gt;util.inspect.custom&lt;/code&gt;&lt;/a&gt; instead. For backward compatibility with Node.js prior to version 6.4.0, both may be specified.</source>
          <target state="translated">オブジェクトで &lt;code&gt;inspect&lt;/code&gt; という名前のプロパティを使用して&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; の&lt;/a&gt;カスタム検査関数を指定することは非推奨です。代わりに&lt;a href=&quot;util#util_util_inspect_custom&quot;&gt; &lt;code&gt;util.inspect.custom&lt;/code&gt; &lt;/a&gt;を使用してください。バージョン6.4.0より前のNode.jsとの下位互換性のために、両方を指定できます。</target>
        </trans-unit>
        <trans-unit id="088c5711cb1136a04d7d37ed97c2ab691586c0df" translate="yes" xml:space="preserve">
          <source>Using a regular expression runs &lt;code&gt;.toString&lt;/code&gt; on the error object, and will therefore also include the error name.</source>
          <target state="translated">正規表現を使用すると、エラーオブジェクトに対して &lt;code&gt;.toString&lt;/code&gt; が実行されるため、エラー名も含まれます。</target>
        </trans-unit>
        <trans-unit id="09fba33f227f6c3a033ebafcb4b5bbd4a4ad47b5" translate="yes" xml:space="preserve">
          <source>Using a timer to detect approximate event loop delay works because the execution of timers is tied specifically to the lifecycle of the libuv event loop. That is, a delay in the loop will cause a delay in the execution of the timer, and those delays are specifically what this API is intended to detect.</source>
          <target state="translated">タイマーを使用しておおよそのイベントループの遅延を検出することは、タイマーの実行が libuv イベントループのライフサイクルに特別に関連付けられているために機能します。つまり、ループの遅延はタイマーの実行に遅延を引き起こし、それらの遅延はこの API が検出することを意図しているものです。</target>
        </trans-unit>
        <trans-unit id="0e89804501b3927f4e3765d3fa4f23cb1fd82b30" translate="yes" xml:space="preserve">
          <source>Using invalid characters within an HTTP header field name will cause the stream to be closed with a protocol error being reported.</source>
          <target state="translated">HTTPヘッダフィールド名の中で無効な文字を使用すると、プロトコルエラーが報告されてストリームが閉じられます。</target>
        </trans-unit>
        <trans-unit id="6ae1a5ec2d8cfc6ba65f3c09bb2fe2404975a0fd" translate="yes" xml:space="preserve">
          <source>Using stream methods such as &lt;code&gt;write(data)&lt;/code&gt;, &lt;code&gt;end(data)&lt;/code&gt; or &lt;code&gt;pipe()&lt;/code&gt; in CCM mode might fail as CCM cannot handle more than one chunk of data per instance.</source>
          <target state="translated">CCMはインスタンスごとに複数のデータチャンクを処理できないため、CCMモードで &lt;code&gt;write(data)&lt;/code&gt; 、 &lt;code&gt;end(data)&lt;/code&gt; 、 &lt;code&gt;pipe()&lt;/code&gt; などのストリームメソッドを使用すると失敗する場合があります。</target>
        </trans-unit>
        <trans-unit id="127dafee70173e34186216b2c8f8c09db267903c" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; methods to produce the encrypted data.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;暗号化されたデータを生成する方法を。</target>
        </trans-unit>
        <trans-unit id="4f251efb4db5e9c8a5087bef9044351fae0d9331" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; methods to produce the unencrypted data.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;暗号化されていないデータを生成する方法を。</target>
        </trans-unit>
        <trans-unit id="64be152252122733e4bbc53b6ae8d30fe4a43dfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt;&lt;code&gt;hash.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest()&lt;/code&gt;&lt;/a&gt; methods to produce the computed hash.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt; &lt;code&gt;hash.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest()&lt;/code&gt; &lt;/a&gt;メソッドと、計算されたハッシュを生成します。</target>
        </trans-unit>
        <trans-unit id="c7e8e3be278fe75f9d2fd0de66e184b886ca17f4" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt;&lt;code&gt;hmac.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_hmac_digest_encoding&quot;&gt;&lt;code&gt;hmac.digest()&lt;/code&gt;&lt;/a&gt; methods to produce the computed HMAC digest.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt; &lt;code&gt;hmac.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_hmac_digest_encoding&quot;&gt; &lt;code&gt;hmac.digest()&lt;/code&gt; &lt;/a&gt;計算されたHMACダイジェストを生成する方法を。</target>
        </trans-unit>
        <trans-unit id="67f4f0b34dd18e7592930fb00cda12215d238144" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt;&lt;code&gt;sign.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt;&lt;code&gt;sign.sign()&lt;/code&gt;&lt;/a&gt; methods to produce the signature.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt; &lt;code&gt;sign.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt; &lt;code&gt;sign.sign()&lt;/code&gt; &lt;/a&gt;メソッドは、署名を生成します。</target>
        </trans-unit>
        <trans-unit id="bc23ae8e8540ed779fd8566342f072b035c26f81" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_verify_update_data_inputencoding&quot;&gt;&lt;code&gt;verify.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_verify_verify_object_signature_signatureencoding&quot;&gt;&lt;code&gt;verify.verify()&lt;/code&gt;&lt;/a&gt; methods to verify the signature.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_verify_update_data_inputencoding&quot;&gt; &lt;code&gt;verify.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_verify_verify_object_signature_signatureencoding&quot;&gt; &lt;code&gt;verify.verify()&lt;/code&gt; &lt;/a&gt;メソッドは、署名を検証します。</target>
        </trans-unit>
        <trans-unit id="eb25820ec4ba15c58d1aef843277d65ff7264047" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--no-deprecation&lt;/code&gt; command line flag will suppress all reporting of the custom deprecation.</source>
          <target state="translated">&lt;code&gt;--no-deprecation&lt;/code&gt; コマンドラインフラグを使用すると、カスタム非推奨のレポートがすべて抑制されます。</target>
        </trans-unit>
        <trans-unit id="3cfbf93b670c4a35f238c70ab57bf106e5b849c9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--no-deprecation&lt;/code&gt; command-line flag will suppress all reporting of the custom deprecation.</source>
          <target state="translated">使用 &lt;code&gt;--no-deprecation&lt;/code&gt; コマンドラインフラグはカスタム非推奨のすべてのレポートを抑制します。</target>
        </trans-unit>
        <trans-unit id="beb85e77bb17580639378b9767ab4b8f3f18878a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--trace-deprecation&lt;/code&gt; command line flag will cause the custom deprecation to be printed to &lt;code&gt;stderr&lt;/code&gt; along with the stack trace.</source>
          <target state="translated">使用 &lt;code&gt;--trace-deprecation&lt;/code&gt; コマンドラインフラグは、カスタムの廃止をすることが印刷されるようになります &lt;code&gt;stderr&lt;/code&gt; スタックトレースと一緒に。</target>
        </trans-unit>
        <trans-unit id="58b0ea8ad0986c815bfa086203f4052b8a4075eb" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--trace-deprecation&lt;/code&gt; command-line flag will cause the custom deprecation to be printed to &lt;code&gt;stderr&lt;/code&gt; along with the stack trace.</source>
          <target state="translated">使用 &lt;code&gt;--trace-deprecation&lt;/code&gt; コマンドラインフラグは、カスタムの廃止をすることが印刷されるようになります &lt;code&gt;stderr&lt;/code&gt; スタックトレースと一緒に。</target>
        </trans-unit>
        <trans-unit id="1aade48dc74184bf3018e802b560bc9fdde1529a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;eventEmitter.once()&lt;/code&gt; method, it is possible to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and &lt;em&gt;then&lt;/em&gt; called.</source>
          <target state="translated">&lt;code&gt;eventEmitter.once()&lt;/code&gt; メソッドを使用すると、特定のイベントに対して最大で1回呼び出されるリスナーを登録できます。イベントが放出されると、リスナーが登録されていないとされ&lt;em&gt;、その後&lt;/em&gt;呼ばれます。</target>
        </trans-unit>
        <trans-unit id="76c7bac3d55ead2fa3d5ee94ca9f99c7c33e9a42" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;noAssert&lt;/code&gt; argument has no functionality anymore. All input is going to be verified, no matter if it is set to true or not. Skipping the verification could lead to hard to find errors and crashes.</source>
          <target state="translated">&lt;code&gt;noAssert&lt;/code&gt; 引数を使用しても機能しなくなりました。trueに設定されているかどうかに関係なく、すべての入力が検証されます。検証をスキップすると、エラーやクラッシュが見つかりにくくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="75bf5fd5057c88a02149a0ccbe74842e13ef3ab9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;timeout&lt;/code&gt; or &lt;code&gt;breakOnSigint&lt;/code&gt; options will result in new event loops and corresponding threads being started, which have a non-zero performance overhead.</source>
          <target state="translated">使用して &lt;code&gt;timeout&lt;/code&gt; または &lt;code&gt;breakOnSigint&lt;/code&gt; オプションは、新しいイベントループと非ゼロのパフォーマンス・オーバーヘッドを持って開始され、対応するスレッドになります。</target>
        </trans-unit>
        <trans-unit id="97b15491568eb88678c0630c2498ffe3eb457850" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;util.promisify.custom&lt;/code&gt; symbol one can override the return value of &lt;a href=&quot;#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;util.promisify.custom&lt;/code&gt; シンボルを使用すると、&lt;a href=&quot;#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; の&lt;/a&gt;戻り値をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="fef65abe276369de6a7f627f0f824c09d9010621" translate="yes" xml:space="preserve">
          <source>Using the Node.js REPL with advanced line-editors</source>
          <target state="translated">Node.js REPL を高度なラインエディタで使う</target>
        </trans-unit>
        <trans-unit id="1416cd9b70255f5e8b906ccade9b66d4be132754" translate="yes" xml:space="preserve">
          <source>Using the worker's unique id is the easiest way to locate the worker.</source>
          <target state="translated">ワーカーの一意のIDを使用することは、ワーカーを見つける最も簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="89b4493de3d831021cc129eb07c2fd6b4e897a68" translate="yes" xml:space="preserve">
          <source>Using this flag allows to change what should happen when an unhandled rejection occurs. One of the following modes can be chosen:</source>
          <target state="translated">このフラグを使用することで、手のかからない拒絶反応が発生したときに何をすべきかを変更することができます。以下のモードのいずれかを選択することができます。</target>
        </trans-unit>
        <trans-unit id="c5d1341a74557dbb20bf54caa7e5e21ff2a54cbf" translate="yes" xml:space="preserve">
          <source>Using this flag allows to change what should happen when an unhandled rejection occurs. One of three modes can be chosen:</source>
          <target state="translated">このフラグを使用すると、手のかからない拒絶反応が発生したときに何が起こるかを変更することができます。3つのモードのうちの1つを選択することができます。</target>
        </trans-unit>
        <trans-unit id="44a6c833440a89de21d1119627e5bdd4e162ca03" translate="yes" xml:space="preserve">
          <source>Using this function is mutually exclusive with using the deprecated &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; built-in module.</source>
          <target state="translated">この関数の使用は、非推奨の&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;組み込みモジュールの使用と相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="a406802ec60c173518984b9e73db43db31538d00" translate="yes" xml:space="preserve">
          <source>Using this on a timer that has already called its callback will reactivate the timer.</source>
          <target state="translated">すでにコールバックを呼び出しているタイマーでこれを使用すると、タイマーが再起動されます。</target>
        </trans-unit>
        <trans-unit id="4c31156efed35ee7814650f8971c3698059440e3" translate="yes" xml:space="preserve">
          <source>Util</source>
          <target state="translated">Util</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="b8b097d0eea0934533ba237923021e6a341048fe" translate="yes" xml:space="preserve">
          <source>V8</source>
          <target state="translated">V8</target>
        </trans-unit>
        <trans-unit id="d72bb28caa036c763c48ffce7432d03efc797595" translate="yes" xml:space="preserve">
          <source>V8 Inspector Integration for Node.js</source>
          <target state="translated">Node.jsのためのV8インスペクタの統合</target>
        </trans-unit>
        <trans-unit id="cabd879dfeef746d08c749d5af715f589036a5b1" translate="yes" xml:space="preserve">
          <source>V8 Inspector can be enabled by passing the &lt;code&gt;--inspect&lt;/code&gt; flag when starting a Node.js application. It is also possible to supply a custom port with that flag, e.g. &lt;code&gt;--inspect=9222&lt;/code&gt; will accept DevTools connections on port 9222.</source>
          <target state="translated">Node.jsアプリケーションの起動時に &lt;code&gt;--inspect&lt;/code&gt; フラグを渡すことにより、V8インスペクターを有効にすることができます。そのフラグでカスタムポートを提供することも可能です。たとえば、 &lt;code&gt;--inspect=9222&lt;/code&gt; はポート9222でDevTools接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="9bdd712745068212698e2ff31a51cc113ecfb32e" translate="yes" xml:space="preserve">
          <source>V8 Inspector integration allows attaching Chrome DevTools to Node.js instances for debugging and profiling. It uses the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;.</source>
          <target state="translated">V8 Inspector統合により、デバッグとプロファイリングのためにChrome DevToolsをNode.jsインスタンスに接続できます。&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocolを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="0695bb193877756fc54a72ca47f48f1583220e62" translate="yes" xml:space="preserve">
          <source>V8 has its own set of CLI options. Any V8 CLI option that is provided to &lt;code&gt;node&lt;/code&gt; will be passed on to V8 to handle. V8's options have &lt;em&gt;no stability guarantee&lt;/em&gt;. The V8 team themselves don't consider them to be part of their formal API, and reserve the right to change them at any time. Likewise, they are not covered by the Node.js stability guarantees. Many of the V8 options are of interest only to V8 developers. Despite this, there is a small set of V8 options that are widely applicable to Node.js, and they are documented here:</source>
          <target state="translated">V8には独自のCLIオプションのセットがあります。 &lt;code&gt;node&lt;/code&gt; 提供されたV8CLIオプションはすべて、処理するためにV8に渡されます。 V8のオプションには&lt;em&gt;安定性の保証&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;。 V8チーム自体は、それらが正式なAPIの一部であるとは見なしておらず、いつでも変更する権利を留保します。同様に、それらはNode.jsの安定性保証の対象ではありません。 V8オプションの多くは、V8開発者のみが関心を持っています。それにもかかわらず、Node.jsに広く適用できるV8オプションの小さなセットがあり、それらはここに文書化されています。</target>
        </trans-unit>
        <trans-unit id="18746efcdacafb5421ac3876f8538e235a64b91d" translate="yes" xml:space="preserve">
          <source>V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;.</source>
          <target state="translated">V8インスペクターの統合により、Chrome DevToolsやIDEなどのツールでNode.jsインスタンスをデバッグおよびプロファイルできます。ツールは、tcpポートを介してNode.jsインスタンスに接続し、&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevToolsプロトコル&lt;/a&gt;を使用して通信します。</target>
        </trans-unit>
        <trans-unit id="28b99136362001f8842d1ba7dd740d8b6cf55c58" translate="yes" xml:space="preserve">
          <source>V8 inspector integration for Node.js</source>
          <target state="translated">Node.jsのためのV8インスペクタの統合</target>
        </trans-unit>
        <trans-unit id="3fb5b6ec0ebc7cc5b53865e6b15aed12de71598b" translate="yes" xml:space="preserve">
          <source>V8 options that are allowed are:</source>
          <target state="translated">許可されているV8のオプションは</target>
        </trans-unit>
        <trans-unit id="a93137526f7cbc73e7e9d50d14c1c433440b1b0e" translate="yes" xml:space="preserve">
          <source>V8: the C++ library Node.js currently uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the &lt;code&gt;v8.h&lt;/code&gt; header file (&lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; in the Node.js source tree), which is also available &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;online&lt;/a&gt;.</source>
          <target state="translated">V8：Node.jsがJavaScript実装を提供するために現在使用しているC ++ライブラリ。V8は、オブジェクトの作成、関数の呼び出しなどのメカニズムを提供します &lt;code&gt;v8.h&lt;/code&gt; のAPIは、主にv8.hヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; )に文書化されており、&lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;オンライン&lt;/a&gt;でも入手できます。</target>
        </trans-unit>
        <trans-unit id="fa9b1b42d23723b880299a1e8d6f48ff3becf2ce" translate="yes" xml:space="preserve">
          <source>V8: the C++ library Node.js uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the &lt;code&gt;v8.h&lt;/code&gt; header file (&lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; in the Node.js source tree), which is also available &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;online&lt;/a&gt;.</source>
          <target state="translated">V8：Node.jsがJavaScript実装を提供するために使用するC ++ライブラリ。V8は、オブジェクトの作成、関数の呼び出しなどのメカニズムを提供します &lt;code&gt;v8.h&lt;/code&gt; のAPIは、主にv8.hヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; )に記載されており、&lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;オンライン&lt;/a&gt;でも入手できます。</target>
        </trans-unit>
        <trans-unit id="494e5398b739ace80c2800a4e5b3cd1fb68001cf" translate="yes" xml:space="preserve">
          <source>VM</source>
          <target state="translated">VM</target>
        </trans-unit>
        <trans-unit id="dbe377a114ceb49b6128d4c1ccda27673cda2b2b" translate="yes" xml:space="preserve">
          <source>VM (Executing JavaScript)</source>
          <target state="translated">VM(JavaScriptの実行)</target>
        </trans-unit>
        <trans-unit id="0af4bf1819c48bb84742feec149353f7191c2e13" translate="yes" xml:space="preserve">
          <source>VM (executing JavaScript)</source>
          <target state="translated">VM(JavaScriptの実行</target>
        </trans-unit>
        <trans-unit id="fb8f27aea3185e30c92158b5a72b5e68427a8747" translate="yes" xml:space="preserve">
          <source>Valid TLS protocol versions are &lt;code&gt;'TLSv1'&lt;/code&gt;, &lt;code&gt;'TLSv1.1'&lt;/code&gt;, or &lt;code&gt;'TLSv1.2'&lt;/code&gt;.</source>
          <target state="translated">有効なTLSプロトコルバージョンは、 &lt;code&gt;'TLSv1'&lt;/code&gt; 、 &lt;code&gt;'TLSv1.1'&lt;/code&gt; 、または &lt;code&gt;'TLSv1.2'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="393b0cd2d2b4c056628251cd2e23912b2a26f716" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; and &lt;code&gt;&quot;module&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt;.</source>
          <target state="translated">有効な値は &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; および &lt;code&gt;&quot;module&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a528ab622db5be3124b720c51ff8a564a3515496" translate="yes" xml:space="preserve">
          <source>Validate error message using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;を使用してエラーメッセージを検証します。</target>
        </trans-unit>
        <trans-unit id="81b25ad8225f7ecb896fabebec88216239869060" translate="yes" xml:space="preserve">
          <source>Validate instanceof using constructor:</source>
          <target state="translated">コンストラクタを使用して instanceof を検証します。</target>
        </trans-unit>
        <trans-unit id="8ef03321a63fe1d0ebb05c543908688a331dd8ae" translate="yes" xml:space="preserve">
          <source>Validation errors occur when an incorrect argument, option, or setting value is passed in. These will always be reported by a synchronous &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="translated">検証エラーは、不正な引数、オプション、または設定値が渡されると発生します。これらは常に同期 &lt;code&gt;throw&lt;/code&gt; によって報告されます。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="27d2412cca245376cbe8f7b65f5729cd3d3ae3c9" translate="yes" xml:space="preserve">
          <source>Value is &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; session socket has not yet been connected, &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is connected with a &lt;code&gt;TLSSocket&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is connected to any other kind of socket or stream.</source>
          <target state="translated">値がされた &lt;code&gt;undefined&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; セッションソケットがまだ接続されていない &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; がに接続され &lt;code&gt;TLSSocket&lt;/code&gt; 、および &lt;code&gt;false&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; がソケットまたはストリームの他の種類に接続されています。</target>
        </trans-unit>
        <trans-unit id="b1b2d39b70dc3fb0257610327d062b71a8c39503" translate="yes" xml:space="preserve">
          <source>Value may now only be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. Before all falsy values were handled the same as &lt;code&gt;null&lt;/code&gt; and did not throw.</source>
          <target state="translated">値は &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; のみになります。以前は、すべての偽の値が &lt;code&gt;null&lt;/code&gt; と同じように処理され、スローされませんでした。</target>
        </trans-unit>
        <trans-unit id="384f69d4253fbebb54d8368317298745f013ef88" translate="yes" xml:space="preserve">
          <source>Value will be &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is not yet connected to a socket, &lt;code&gt;h2c&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is not connected to a &lt;code&gt;TLSSocket&lt;/code&gt;, or will return the value of the connected &lt;code&gt;TLSSocket&lt;/code&gt;'s own &lt;code&gt;alpnProtocol&lt;/code&gt; property.</source>
          <target state="translated">値がされる &lt;code&gt;undefined&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; がまだソケットに接続されていない、 &lt;code&gt;h2c&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; に接続されていない &lt;code&gt;TLSSocket&lt;/code&gt; 、または接続の値を返します &lt;code&gt;TLSSocket&lt;/code&gt; 自身 &lt;code&gt;alpnProtocol&lt;/code&gt; のプロパティを。</target>
        </trans-unit>
        <trans-unit id="3374585616cd19cdf8913de105924c8996485ee4" translate="yes" xml:space="preserve">
          <source>Value: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">値：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール値&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99bfc53543bae130b78974f3ac786581c4580860" translate="yes" xml:space="preserve">
          <source>Value: &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;</source>
          <target state="translated">値： &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="719b833bb97b00a6ee4444c1d9b2ce985e6a1a74" translate="yes" xml:space="preserve">
          <source>Values can be either numbers representing Unix epoch time in seconds, &lt;code&gt;Date&lt;/code&gt;s, or a numeric string like &lt;code&gt;'123456789.0'&lt;/code&gt;.</source>
          <target state="translated">値は、Unixエポック時間を秒単位で表す数値、 &lt;code&gt;Date&lt;/code&gt; s、または &lt;code&gt;'123456789.0'&lt;/code&gt; ような数値文字列のいずれかです。</target>
        </trans-unit>
        <trans-unit id="b9b183d756719a245acd620179f819dd9041ffd2" translate="yes" xml:space="preserve">
          <source>Values can be either numbers representing Unix epoch time, &lt;code&gt;Date&lt;/code&gt;s, or a numeric string like &lt;code&gt;'123456789.0'&lt;/code&gt;.</source>
          <target state="translated">値は、Unixエポック時間を表す数値、 &lt;code&gt;Date&lt;/code&gt; 、または &lt;code&gt;'123456789.0'&lt;/code&gt; のような数値文字列のいずれかです。</target>
        </trans-unit>
        <trans-unit id="53c0bb5f3d02bff6545de0ad72cc4c3a77afccdb" translate="yes" xml:space="preserve">
          <source>Values that are not part of the format string are formatted using &lt;code&gt;util.inspect()&lt;/code&gt; if their type is not &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">フォーマット文字列の一部ではない値は、タイプが &lt;code&gt;string&lt;/code&gt; でない場合、 &lt;code&gt;util.inspect()&lt;/code&gt; を使用してフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="8c84c56936b14a1634315a3aa83091b5dcfaa5b5" translate="yes" xml:space="preserve">
          <source>Variables local to the module will be private, because the module is wrapped in a function by Node.js (see &lt;a href=&quot;#modules_the_module_wrapper&quot;&gt;module wrapper&lt;/a&gt;). In this example, the variable &lt;code&gt;PI&lt;/code&gt; is private to &lt;code&gt;circle.js&lt;/code&gt;.</source>
          <target state="translated">モジュールはNode.jsによって関数にラップされるため、モジュールのローカル変数はプライベートになります（&lt;a href=&quot;#modules_the_module_wrapper&quot;&gt;モジュールラッパーを&lt;/a&gt;参照）。この例では、変数 &lt;code&gt;PI&lt;/code&gt; は &lt;code&gt;circle.js&lt;/code&gt; に対してプライベートです。</target>
        </trans-unit>
        <trans-unit id="075be6a60b145b1ce1b874ce5a76b369cdd0b469" translate="yes" xml:space="preserve">
          <source>Various</source>
          <target state="translated">Various</target>
        </trans-unit>
        <trans-unit id="5a8e182151fdcadd9117a606819b5b815c60f49d" translate="yes" xml:space="preserve">
          <source>Various behaviors of the Node.js REPL can be customized using the following environment variables:</source>
          <target state="translated">Node.js REPLの様々な動作は、以下の環境変数を使用してカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="63ed65929f9b05267e5a93a328e53542d3c61717" translate="yes" xml:space="preserve">
          <source>Various networking APIs will call &lt;code&gt;dns.lookup()&lt;/code&gt; internally to resolve host names. If that is an issue, consider resolving the host name to an address using &lt;code&gt;dns.resolve()&lt;/code&gt; and using the address instead of a host name. Also, some networking APIs (such as &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;) allow the default resolver, &lt;code&gt;dns.lookup()&lt;/code&gt;, to be replaced.</source>
          <target state="translated">さまざまなネットワークAPIが内部で &lt;code&gt;dns.lookup()&lt;/code&gt; を呼び出して、ホスト名を解決します。それが問題である場合は、 &lt;code&gt;dns.resolve()&lt;/code&gt; を使用してホスト名をアドレスに解決し、ホスト名の代わりにアドレスを使用することを検討してください。また、一部のネットワークAPI（&lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; など&lt;/a&gt;）では、デフォルトのリゾルバーである &lt;code&gt;dns.lookup()&lt;/code&gt; を置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="c96b8eeb58d81747d1411796da291708a9308b67" translate="yes" xml:space="preserve">
          <source>Various networking APIs will call &lt;code&gt;dns.lookup()&lt;/code&gt; internally to resolve host names. If that is an issue, consider resolving the hostname to an address using &lt;code&gt;dns.resolve()&lt;/code&gt; and using the address instead of a host name. Also, some networking APIs (such as &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;) allow the default resolver, &lt;code&gt;dns.lookup()&lt;/code&gt;, to be replaced.</source>
          <target state="translated">さまざまなネットワークAPIが、ホスト名を解決するために内部で &lt;code&gt;dns.lookup()&lt;/code&gt; を呼び出します。それが問題である場合は、 &lt;code&gt;dns.resolve()&lt;/code&gt; を使用してホスト名をアドレスに解決し、ホスト名の代わりにアドレスを使用することを検討してください。また、一部のネットワークAPI（&lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; など&lt;/a&gt;）では、デフォルトのリゾルバー &lt;code&gt;dns.lookup()&lt;/code&gt; を置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="b390264aee088cb79da9e392cde3a01f345279e2" translate="yes" xml:space="preserve">
          <source>Verifies the certificate &lt;code&gt;cert&lt;/code&gt; is issued to &lt;code&gt;hostname&lt;/code&gt;.</source>
          <target state="translated">証明書 &lt;code&gt;cert&lt;/code&gt; が &lt;code&gt;hostname&lt;/code&gt; に対して発行されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="7a70b5dbdbc521149cff80d733ae43d7c43b9c7c" translate="yes" xml:space="preserve">
          <source>Verifies the given signature for &lt;code&gt;data&lt;/code&gt; using the given key and algorithm. If &lt;code&gt;algorithm&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, then the algorithm is dependent upon the key type (especially Ed25519 and Ed448).</source>
          <target state="translated">指定された鍵とアルゴリズムを使用して、 &lt;code&gt;data&lt;/code&gt; の指定された署名を検証します。場合 &lt;code&gt;algorithm&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 場合、アルゴリズムは、キータイプ（特にEd25519とEd448）に依存しています。</target>
        </trans-unit>
        <trans-unit id="c802399b8ccd9918dcfcec45fe61466996fd99af" translate="yes" xml:space="preserve">
          <source>Verifies the provided data using the given &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;signature&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;object&lt;/code&gt; と &lt;code&gt;signature&lt;/code&gt; を使用して、提供されたデータを検証します。</target>
        </trans-unit>
        <trans-unit id="dda6ac27b9d3b234a68e8b2c412e90ab5a03a4e1" translate="yes" xml:space="preserve">
          <source>Verify</source>
          <target state="translated">Verify</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="53b449b15b889b1bdc8c4adba25d7f5d77268215" translate="yes" xml:space="preserve">
          <source>Version Management</source>
          <target state="translated">バージョン管理</target>
        </trans-unit>
        <trans-unit id="6df95f05b4f3bc565b7412688db876c215c30e58" translate="yes" xml:space="preserve">
          <source>Version management</source>
          <target state="translated">バージョン管理</target>
        </trans-unit>
        <trans-unit id="84367e806ed16f93cd67aba890fbaef52d16a0b0" translate="yes" xml:space="preserve">
          <source>WASI</source>
          <target state="translated">WASI</target>
        </trans-unit>
        <trans-unit id="50147dd0e338da6e654eba9af1030e40f73121ed" translate="yes" xml:space="preserve">
          <source>WHATWG API</source>
          <target state="translated">WHATWG API</target>
        </trans-unit>
        <trans-unit id="49ba0e373af06482bcd7581a6a5ec7546822ccf5" translate="yes" xml:space="preserve">
          <source>WHATWG Supported Encodings</source>
          <target state="translated">WHATWG がサポートするエンコーディング</target>
        </trans-unit>
        <trans-unit id="67198102e3d66c7df492b61bda67c0480340d548" translate="yes" xml:space="preserve">
          <source>WHATWG URL Parser</source>
          <target state="translated">WHATWG URL パーサー</target>
        </trans-unit>
        <trans-unit id="a6c20faa9094807e512be33285730d967b0f5fa0" translate="yes" xml:space="preserve">
          <source>WHATWG URL's &lt;code&gt;origin&lt;/code&gt; property includes &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;, but not &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.</source>
          <target state="translated">WHATWG URLの &lt;code&gt;origin&lt;/code&gt; プロパティには、 &lt;code&gt;protocol&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; が含まれますが、 &lt;code&gt;username&lt;/code&gt; や &lt;code&gt;password&lt;/code&gt; は含まれません。</target>
        </trans-unit>
        <trans-unit id="1a23d1b755affd82fb4b985673a55f141e42ed04" translate="yes" xml:space="preserve">
          <source>WHATWG supported encodings</source>
          <target state="translated">WHATWG がサポートするエンコーディング</target>
        </trans-unit>
        <trans-unit id="a2cf74613ac46317886ce4819718d05b8611088d" translate="yes" xml:space="preserve">
          <source>Warning: Don't Ignore Errors!</source>
          <target state="translated">警告。エラーを無視しないでください</target>
        </trans-unit>
        <trans-unit id="1a381fabac245f16381f9fcc429f3d58cda41f8f" translate="yes" xml:space="preserve">
          <source>Warning: Don't ignore errors!</source>
          <target state="translated">警告。エラーを無視しないでください</target>
        </trans-unit>
        <trans-unit id="ba74e05534617d2ea02ad96b1b65727a369644b9" translate="yes" xml:space="preserve">
          <source>Warning: Using &lt;code&gt;'uncaughtException'&lt;/code&gt; correctly</source>
          <target state="translated">警告： &lt;code&gt;'uncaughtException'&lt;/code&gt; 正しく使用しています</target>
        </trans-unit>
        <trans-unit id="88c9b3b7035c622e0f389e01ba6cf0e17f9a8035" translate="yes" xml:space="preserve">
          <source>Warning: binding inspector to a public IP:port combination is insecure</source>
          <target state="translated">警告:インスペクタをパブリックIP:ポートの組み合わせにバインドすると安全ではありません。</target>
        </trans-unit>
        <trans-unit id="4cc3642e79938d3a54d70cdcf5471b1c853bb99c" translate="yes" xml:space="preserve">
          <source>Watch for changes on &lt;code&gt;filename&lt;/code&gt;, where &lt;code&gt;filename&lt;/code&gt; is either a file or a directory.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の変更に注意してください &lt;code&gt;filename&lt;/code&gt; はファイルまたはディレクトリです。</target>
        </trans-unit>
        <trans-unit id="3cc8e7672ff86422896943e5f086f88c2cb556a9" translate="yes" xml:space="preserve">
          <source>Watch for changes on &lt;code&gt;filename&lt;/code&gt;. The callback &lt;code&gt;listener&lt;/code&gt; will be called each time the file is accessed.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の変更に注意してください。コールバック &lt;code&gt;listener&lt;/code&gt; は、ファイルにアクセスするたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cdc01934e544fe692a8a590e35cab70ab09f9b33" translate="yes" xml:space="preserve">
          <source>Watchers</source>
          <target state="translated">Watchers</target>
        </trans-unit>
        <trans-unit id="994fd9faac8b6e6f0fb4f4db18b10bc4de502de5" translate="yes" xml:space="preserve">
          <source>We are not endorsed by or affiliated with Joyent.</source>
          <target state="translated">私たちは、ジョイアント社によって支持されているわけではありませんし、ジョイアント社と提携しているわけでもありません。</target>
        </trans-unit>
        <trans-unit id="7d95a3ca55b65642f528e4081042f0f3f23c8511" translate="yes" xml:space="preserve">
          <source>We can construct a Node.js Readable Stream from an asynchronous generator using the &lt;code&gt;Readable.from()&lt;/code&gt; utility method:</source>
          <target state="translated">&lt;code&gt;Readable.from()&lt;/code&gt; ユーティリティメソッドを使用して、非同期ジェネレーターからNode.js読み取り可能ストリームを構築できます。</target>
        </trans-unit>
        <trans-unit id="2caad1f379f9a1c6cd05c938b7dd3f820e135760" translate="yes" xml:space="preserve">
          <source>We can construct a Node.js readable stream from an asynchronous generator using the &lt;code&gt;Readable.from()&lt;/code&gt; utility method:</source>
          <target state="translated">&lt;code&gt;Readable.from()&lt;/code&gt; ユーティリティメソッドを使用して、非同期ジェネレーターからNode.jsの読み取り可能なストリームを構築できます。</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">WebAssembly</target>
        </trans-unit>
        <trans-unit id="895286b9ffc9d778c00bb9c441eadee44988cc4d" translate="yes" xml:space="preserve">
          <source>What does it mean to &quot;contextify&quot; an object?</source>
          <target state="translated">物体を「文脈化」するとはどういうことか?</target>
        </trans-unit>
        <trans-unit id="ea899a2b4f85a243eb31293d0815ef8d517aa58c" translate="yes" xml:space="preserve">
          <source>What makes &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; and &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &quot;unsafe&quot;?</source>
          <target state="translated">何が作る &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; と &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &quot;安全でありませんか&quot;？</target>
        </trans-unit>
        <trans-unit id="a5ff49b6cb64f5bd92a07be45aae4e9be901e2eb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt;&lt;code&gt;fs.readdir()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt;&lt;code&gt;fs.readdirSync()&lt;/code&gt;&lt;/a&gt; is called with the &lt;code&gt;withFileTypes&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the resulting array is filled with &lt;code&gt;fs.Dirent&lt;/code&gt; objects, rather than strings or &lt;code&gt;Buffers&lt;/code&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt; &lt;code&gt;fs.readdir()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt; &lt;code&gt;fs.readdirSync()&lt;/code&gt; を&lt;/a&gt;用いて呼び出され &lt;code&gt;withFileTypes&lt;/code&gt; にオプションセット &lt;code&gt;true&lt;/code&gt; 、得られた配列を用いて充填されている &lt;code&gt;fs.Dirent&lt;/code&gt; なく文字列またはより、オブジェクト &lt;code&gt;Buffers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2c50750aec5f7dfc5188b6d2b5475a40f7a9f36" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;this.push(dataChunk)&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;_read()&lt;/code&gt; should continue reading from the resource and pushing data until &lt;code&gt;readable.push()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Only when &lt;code&gt;_read()&lt;/code&gt; is called again after it has stopped should it resume pushing additional data onto the queue.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;this.push(dataChunk)&lt;/code&gt; &lt;/a&gt;（）が呼び出されたときに、リソースからデータが利用可能な場合、実装はthis.push（dataChunk）メソッドを使用してそのデータを読み取りキューにプッシュし始める必要があります。 &lt;code&gt;_read()&lt;/code&gt; は、 &lt;code&gt;readable.push()&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返すまで、リソースからの読み取りとデータのプッシュを続行する必要があります。 &lt;code&gt;_read()&lt;/code&gt; が停止した後に再度呼び出された場合にのみ、追加データのキューへのプッシュを再開する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd82acd7823cb8417adc5ed62f046044d1b1434e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;SIGUSR1&lt;/code&gt; is received by a Node.js process, Node.js will start the debugger. See &lt;a href=&quot;#process_signal_events&quot;&gt;Signal Events&lt;/a&gt;.</source>
          <target state="translated">とき &lt;code&gt;SIGUSR1&lt;/code&gt; は、 Node.jsのプロセスによって受信され、Node.jsのは、デバッガを起動します。&lt;a href=&quot;#process_signal_events&quot;&gt;信号イベントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dc9b3892e250b09e2ccf1ba6dcba82854161c467" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; is called, it will immediately call the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">とき &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; が呼び出されると、それはすぐに呼び出す &lt;code&gt;fn&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="c51a7ae7f92cedc40838aa3599bed7de4ae3f59c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;autoPadding&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the length of the entire input data must be a multiple of the cipher's block size or &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will throw an error. Disabling automatic padding is useful for non-standard padding, for instance using &lt;code&gt;0x0&lt;/code&gt; instead of PKCS padding.</source>
          <target state="translated">とき &lt;code&gt;autoPadding&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、全入力データの長さは、暗号のブロックサイズまたはの倍数でなければなりません&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;エラーがスローされます。自動パディングを無効にすると、PKCSパディングの代わりに &lt;code&gt;0x0&lt;/code&gt; を使用するなど、非標準のパディングに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d5b4788c570217c4c4cd383fd70f220b520d0f3f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;chunk&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;, the &lt;code&gt;chunk&lt;/code&gt; of data will be added to the internal queue for users of the stream to consume. Passing &lt;code&gt;chunk&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; signals the end of the stream (EOF), after which no more data can be written.</source>
          <target state="translated">場合 &lt;code&gt;chunk&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; 、 &lt;code&gt;Uint8Array&lt;/code&gt; または &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;chunk&lt;/code&gt; データが消費するストリームのユーザのために内部キューに追加されるであろう。 &lt;code&gt;chunk&lt;/code&gt; を &lt;code&gt;null&lt;/code&gt; として渡すと、ストリームの終わり（EOF）が通知され、その後、データを書き込むことができなくなります。</target>
        </trans-unit>
        <trans-unit id="4f925a53c29c5bcd12a5d6dfdd3867f89f8364a3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;delay&lt;/code&gt; is larger than &lt;code&gt;2147483647&lt;/code&gt; or less than &lt;code&gt;1&lt;/code&gt;, the &lt;code&gt;delay&lt;/code&gt; will be set to &lt;code&gt;1&lt;/code&gt;. Non-integer delays are truncated to an integer.</source>
          <target state="translated">ときに &lt;code&gt;delay&lt;/code&gt; より大きい &lt;code&gt;2147483647&lt;/code&gt; 以下 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;delay&lt;/code&gt; に設定されます &lt;code&gt;1&lt;/code&gt; 。非整数遅延は整数に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="c5f55b3490002d692e1a0bc547c5d27f68d920cd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;encoding&lt;/code&gt; is being passed, the &lt;code&gt;byteOffset&lt;/code&gt; parameter is no longer required.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; が渡されるとき、 &lt;code&gt;byteOffset&lt;/code&gt; パラメータは不要になりました。</target>
        </trans-unit>
        <trans-unit id="5f4541cc38a816abc8f23ec4b8971b3ebd174a1a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a file descriptor, the behavior is almost identical to directly calling &lt;code&gt;fs.write()&lt;/code&gt; like:</source>
          <target state="translated">ときに &lt;code&gt;file&lt;/code&gt; ファイルディスクリプタで、動作が直接呼び出すとほとんど同じです &lt;code&gt;fs.write()&lt;/code&gt; ように：</target>
        </trans-unit>
        <trans-unit id="2701fff05e428233b787d036477d25103b1785f2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a file descriptor, the behavior is similar to calling &lt;code&gt;fs.write()&lt;/code&gt; directly (which is recommended). See the notes below on using a file descriptor.</source>
          <target state="translated">ときに &lt;code&gt;file&lt;/code&gt; ファイルディスクリプタで、動作が呼び出しに似て &lt;code&gt;fs.write()&lt;/code&gt; を直接（推奨されています）。ファイル記述子の使用については、以下の注を参照してください。</target>
        </trans-unit>
        <trans-unit id="90ac1e3daacaea2849e260a99067b74ddaee1919" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a filename, asynchronously writes data to the file, replacing the file if it already exists. &lt;code&gt;data&lt;/code&gt; can be a string or a buffer.</source>
          <target state="translated">ときに &lt;code&gt;file&lt;/code&gt; ファイル名で、非同期がすでに存在する場合、ファイルを置き換え、ファイルにデータを書き込みます。 &lt;code&gt;data&lt;/code&gt; は文字列またはバッファです。</target>
        </trans-unit>
        <trans-unit id="be558d668e858413c7f08029fc6140d8cc4aaa06" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;main.js&lt;/code&gt; loads &lt;code&gt;a.js&lt;/code&gt;, then &lt;code&gt;a.js&lt;/code&gt; in turn loads &lt;code&gt;b.js&lt;/code&gt;. At that point, &lt;code&gt;b.js&lt;/code&gt; tries to load &lt;code&gt;a.js&lt;/code&gt;. In order to prevent an infinite loop, an &lt;strong&gt;unfinished copy&lt;/strong&gt; of the &lt;code&gt;a.js&lt;/code&gt; exports object is returned to the &lt;code&gt;b.js&lt;/code&gt; module. &lt;code&gt;b.js&lt;/code&gt; then finishes loading, and its &lt;code&gt;exports&lt;/code&gt; object is provided to the &lt;code&gt;a.js&lt;/code&gt; module.</source>
          <target state="translated">とき &lt;code&gt;main.js&lt;/code&gt; のロード &lt;code&gt;a.js&lt;/code&gt; 、その後、 &lt;code&gt;a.js&lt;/code&gt; ターンロードに &lt;code&gt;b.js&lt;/code&gt; 。その時点で、 &lt;code&gt;b.js&lt;/code&gt; ロードしようとし &lt;code&gt;a.js&lt;/code&gt; を。無限ループを防ぐために、 &lt;code&gt;a.js&lt;/code&gt; エクスポートオブジェクトの&lt;strong&gt;未完成のコピー&lt;/strong&gt;が &lt;code&gt;b.js&lt;/code&gt; モジュールに返されます。その後、 &lt;code&gt;b.js&lt;/code&gt; の読み込みが完了し、その &lt;code&gt;exports&lt;/code&gt; オブジェクトが &lt;code&gt;a.js&lt;/code&gt; モジュールに提供されます。</target>
        </trans-unit>
        <trans-unit id="116dd83b9194432a786c2f883396dbf7da0f9614" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node-gyp&lt;/code&gt; runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, Addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</source>
          <target state="translated">とき &lt;code&gt;node-gyp&lt;/code&gt; 実行は、それが特定のリリースのNode.jsのバージョンとダウンロードのいずれかの完全なソースtarballやヘッダーだけを検出します。完全なソースがダウンロードされると、アドオンはNode.js依存関係の完全なセットに完全にアクセスできます。ただし、Node.jsヘッダーのみがダウンロードされる場合、Node.jsによってエクスポートされたシンボルのみが使用可能になります。</target>
        </trans-unit>
        <trans-unit id="5c3380def0df49b31f9e57740ec509df8706002f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node-gyp&lt;/code&gt; runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</source>
          <target state="translated">とき &lt;code&gt;node-gyp&lt;/code&gt; 実行は、それが特定のリリースのNode.jsのバージョンとダウンロードのいずれかの完全なソースtarballやヘッダーだけを検出します。完全なソースがダウンロードされると、アドオンはNode.jsの依存関係の完全なセットに完全にアクセスできるようになります。ただし、Node.jsヘッダーのみがダウンロードされる場合は、Node.jsによってエクスポートされたシンボルのみが使用可能になります。</target>
        </trans-unit>
        <trans-unit id="6d0a3872ff2b1c3b6aad0d9e67dc6a7b215bb7bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.buffered&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;callback&lt;/code&gt; will be invoked once for every &lt;code&gt;PerformanceEntry&lt;/code&gt; instance:</source>
          <target state="translated">とき &lt;code&gt;options.buffered&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;callback&lt;/code&gt; すべてのために一度呼び出されます &lt;code&gt;PerformanceEntry&lt;/code&gt; のインスタンス：</target>
        </trans-unit>
        <trans-unit id="b573fea9c7ba66a6043fa6811606bc0e5d00ae79" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.paddingStrategy&lt;/code&gt; is equal to &lt;code&gt;http2.constants.PADDING_STRATEGY_CALLBACK&lt;/code&gt;, the HTTP/2 implementation will consult the &lt;code&gt;options.selectPadding()&lt;/code&gt; callback function, if provided, to determine the specific amount of padding to use per &lt;code&gt;HEADERS&lt;/code&gt; and &lt;code&gt;DATA&lt;/code&gt; frame.</source>
          <target state="translated">&lt;code&gt;options.paddingStrategy&lt;/code&gt; が &lt;code&gt;http2.constants.PADDING_STRATEGY_CALLBACK&lt;/code&gt; と等しい場合、HTTP / 2実装は、 &lt;code&gt;options.selectPadding()&lt;/code&gt; 提供されている場合、options.selectPadding（）コールバック関数を参照して、 &lt;code&gt;HEADERS&lt;/code&gt; および &lt;code&gt;DATA&lt;/code&gt; フレームごとに使用する特定のパディング量を決定します。</target>
        </trans-unit>
        <trans-unit id="1c36d3249d148321075b6e5c9c7a29462665fd54" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.waitForTrailers&lt;/code&gt; is set, the &lt;code&gt;Http2Stream&lt;/code&gt; will not automatically close when the final &lt;code&gt;DATA&lt;/code&gt; frame is transmitted. User code &lt;em&gt;must&lt;/em&gt; call either &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; or &lt;code&gt;http2stream.close()&lt;/code&gt; to close the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;options.waitForTrailers&lt;/code&gt; が設定されている、 &lt;code&gt;Http2Stream&lt;/code&gt; は最終ないとき自動的に閉じます &lt;code&gt;DATA&lt;/code&gt; フレームが送信されます。ユーザーコードは &lt;code&gt;Http2Stream&lt;/code&gt; を閉じるためにhttp2stream.sendTrailers &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; または &lt;code&gt;http2stream.close()&lt;/code&gt; を呼び出す&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="06cc8b92c09da71177b92ce0b2f605e7dfac1ca4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.waitForTrailers&lt;/code&gt; is set, the &lt;code&gt;Http2Stream&lt;/code&gt; will not automatically close when the final &lt;code&gt;DATA&lt;/code&gt; frame is transmitted. User code must call either &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; or &lt;code&gt;http2stream.close()&lt;/code&gt; to close the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;options.waitForTrailers&lt;/code&gt; が設定されている、 &lt;code&gt;Http2Stream&lt;/code&gt; は最終ないとき自動的に閉じます &lt;code&gt;DATA&lt;/code&gt; フレームが送信されます。ユーザーコードは &lt;code&gt;Http2Stream&lt;/code&gt; を閉じるためにhttp2stream.sendTrailers &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; または &lt;code&gt;http2stream.close()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="44b13adb4475f68a6d3809ca001bb5510270e765" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is equal to &lt;code&gt;'gc'&lt;/code&gt;, the &lt;code&gt;performance.flags&lt;/code&gt; property contains additional information about garbage collection operation. The value may be one of:</source>
          <target state="translated">&lt;code&gt;performanceEntry.entryType&lt;/code&gt; が &lt;code&gt;'gc'&lt;/code&gt; と等しい場合、 &lt;code&gt;performance.flags&lt;/code&gt; プロパティには、ガベージコレクション操作に関する追加情報が含まれます。値は次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="b367288f95ded72c1333b22b3d7d31a6efa1b87f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is equal to &lt;code&gt;'gc'&lt;/code&gt;, the &lt;code&gt;performance.kind&lt;/code&gt; property identifies the type of garbage collection operation that occurred. The value may be one of:</source>
          <target state="translated">&lt;code&gt;performanceEntry.entryType&lt;/code&gt; が &lt;code&gt;'gc'&lt;/code&gt; と等しい場合、 &lt;code&gt;performance.kind&lt;/code&gt; プロパティは、発生したガベージコレクション操作のタイプを識別します。値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="fdf7e39c38e83dd8dabed9d41e819f625fb4d322" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserveCursor&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the cursor placement will not be reset to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;preserveCursor&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、カーソルの配置がにリセットされることはありません &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a39666ec417748f8c63aee587bbe9944f396c7a0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;readable._read()&lt;/code&gt; is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;this.push(dataChunk)&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;_read()&lt;/code&gt; should continue reading from the resource and pushing data until &lt;code&gt;readable.push()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Only when &lt;code&gt;_read()&lt;/code&gt; is called again after it has stopped should it resume pushing additional data onto the queue.</source>
          <target state="translated">&lt;code&gt;readable._read()&lt;/code&gt; が呼び出されたときに、リソースからデータが利用可能な場合、実装は&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;this.push(dataChunk)&lt;/code&gt; &lt;/a&gt;メソッドを使用してそのデータを読み取りキューにプッシュし始める必要があります。 &lt;code&gt;_read()&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返すまで、_read（）はリソースからの &lt;code&gt;readable.push()&lt;/code&gt; とデータのプッシュを続行する必要があります。 &lt;code&gt;_read()&lt;/code&gt; が停止した後に再度呼び出された場合にのみ、キューへの追加データのプッシュを再開する必要があります。</target>
        </trans-unit>
        <trans-unit id="415b52239b8b94c7fa3114478d7d7ecdce354a16" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;readable.readableFlowing&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no mechanism for consuming the stream's data is provided. Therefore, the stream will not generate data. While in this state, attaching a listener for the &lt;code&gt;'data'&lt;/code&gt; event, calling the &lt;code&gt;readable.pipe()&lt;/code&gt; method, or calling the &lt;code&gt;readable.resume()&lt;/code&gt; method will switch &lt;code&gt;readable.readableFlowing&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, causing the &lt;code&gt;Readable&lt;/code&gt; to begin actively emitting events as data is generated.</source>
          <target state="translated">&lt;code&gt;readable.readableFlowing&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、ストリームのデータを使用するためのメカニズムは提供されません。したがって、ストリームはデータを生成しません。一方、この状態でのリスナーを取り付ける &lt;code&gt;'data'&lt;/code&gt; 呼び出し、イベント &lt;code&gt;readable.pipe()&lt;/code&gt; メソッドを呼び出すか、 &lt;code&gt;readable.resume()&lt;/code&gt; 切り替わり方法 &lt;code&gt;readable.readableFlowing&lt;/code&gt; のに &lt;code&gt;true&lt;/code&gt; 引き起こし、 &lt;code&gt;Readable&lt;/code&gt; として積極的に放出イベントを開始しますデータが生成されます。</target>
        </trans-unit>
        <trans-unit id="8e9d949fb4bb20efb20445fe1a7086affdc76d63" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;request.url&lt;/code&gt; is &lt;code&gt;'/status?name=ryan'&lt;/code&gt; and &lt;code&gt;request.headers.host&lt;/code&gt; is &lt;code&gt;'localhost:3000'&lt;/code&gt;:</source>
          <target state="translated">とき &lt;code&gt;request.url&lt;/code&gt; がある &lt;code&gt;'/status?name=ryan'&lt;/code&gt; と &lt;code&gt;request.headers.host&lt;/code&gt; がある &lt;code&gt;'localhost:3000'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="a0d03546e4741a7e49019e1ebd77ec915605ef57" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;stdout&lt;/code&gt; is a TTY, calling &lt;code&gt;console.clear()&lt;/code&gt; will attempt to clear the TTY. When &lt;code&gt;stdout&lt;/code&gt; is not a TTY, this method does nothing.</source>
          <target state="translated">とき &lt;code&gt;stdout&lt;/code&gt; が呼び出し、TTYある &lt;code&gt;console.clear()&lt;/code&gt; TTYをクリアしようとします。 &lt;code&gt;stdout&lt;/code&gt; がTTYでない場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="dde7ffbfdb4a192362f42e087299ff40d0514549" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;, the actual byte length is returned.</source>
          <target state="translated">ときに &lt;code&gt;string&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;、実際のバイト長が返されます。</target>
        </trans-unit>
        <trans-unit id="9ac661dcdccd7433059697ab48894dd8e9ddbe65" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;, the byte length as reported by &lt;code&gt;.byteLength&lt;/code&gt; is returned.</source>
          <target state="translated">ときに &lt;code&gt;string&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; の&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;、によって報告されたバイト長 &lt;code&gt;.byteLength&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3b97abb19ab4fafe544fd2b1944b99263574df87" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write&lt;/code&gt; function is called with empty string or buffer, it does nothing and waits for more input.</source>
          <target state="translated">ときに &lt;code&gt;write&lt;/code&gt; 機能が空の文字列またはバッファーで呼ばれ、それは、複数の入力のために何もして待機しません。</target>
        </trans-unit>
        <trans-unit id="555a795705636054e34975bf9307cbe9b5899232" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a constructor for a class that was defined using &lt;code&gt;napi_define_class()&lt;/code&gt;, the &lt;code&gt;napi_callback&lt;/code&gt; for the constructor is invoked. After constructing an instance of the native class, the callback must then call &lt;code&gt;napi_wrap()&lt;/code&gt; to wrap the newly constructed instance in the already-created JavaScript object that is the &lt;code&gt;this&lt;/code&gt; argument to the constructor callback. (That &lt;code&gt;this&lt;/code&gt; object was created from the constructor function's &lt;code&gt;prototype&lt;/code&gt;, so it already has definitions of all the instance properties and methods.)</source>
          <target state="translated">JavaScriptコードが &lt;code&gt;napi_define_class()&lt;/code&gt; を使用して定義されたクラスのコンストラクターを呼び出すと、コンストラクターの &lt;code&gt;napi_callback&lt;/code&gt; が呼び出されます。ネイティブクラスのインスタンスを作成した後、コールバックは &lt;code&gt;napi_wrap()&lt;/code&gt; を呼び出して、新しく作成されたインスタンスを、コンストラクタコールバックの &lt;code&gt;this&lt;/code&gt; 引数である作成済みのJavaScriptオブジェクトにラップする必要があります。 （ &lt;code&gt;this&lt;/code&gt; オブジェクトは、コンストラクター関数の &lt;code&gt;prototype&lt;/code&gt; から作成されたため、すべてのインスタンスプロパティとメソッドの定義が既に含まれています。）</target>
        </trans-unit>
        <trans-unit id="1774b24fbf47d198b3a30100903828d7409b5b6c" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a method or property accessor on the class, the corresponding &lt;code&gt;napi_callback&lt;/code&gt; C++ function is invoked. For an instance callback, &lt;a href=&quot;#n_api_napi_unwrap&quot;&gt;&lt;code&gt;napi_unwrap&lt;/code&gt;&lt;/a&gt; obtains the C++ instance that is the target of the call.</source>
          <target state="translated">JavaScriptコードがクラスのメソッドまたはプロパティアクセサーを呼び出すと、対応する &lt;code&gt;napi_callback&lt;/code&gt; C ++関数が呼び出されます。インスタンスコールバックの場合、&lt;a href=&quot;#n_api_napi_unwrap&quot;&gt; &lt;code&gt;napi_unwrap&lt;/code&gt; &lt;/a&gt;は、呼び出しのターゲットであるC ++インスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="0918571bdde3395da834b0207495ce14e0fe8c8e" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a method or property accessor on the class, the corresponding &lt;code&gt;napi_callback&lt;/code&gt; is invoked. If the callback is for an instance method or accessor, then the &lt;code&gt;this&lt;/code&gt; argument to the callback is the wrapper object; the wrapped C++ instance that is the target of the call can be obtained then by calling &lt;code&gt;napi_unwrap()&lt;/code&gt; on the wrapper object.</source>
          <target state="translated">JavaScriptコードがクラスのメソッドまたはプロパティアクセサーを呼び出すと、対応する &lt;code&gt;napi_callback&lt;/code&gt; が呼び出されます。コールバックがインスタンスメソッドまたはアクセサーの場合、コールバックの &lt;code&gt;this&lt;/code&gt; 引数はラッパーオブジェクトです。呼び出しのターゲットであるラップされたC ++インスタンスは、ラッパーオブジェクトで &lt;code&gt;napi_unwrap()&lt;/code&gt; を呼び出すことによって取得できます。</target>
        </trans-unit>
        <trans-unit id="0ace059614f2d50957d2d6ec33c21258514bba31" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes the constructor, the constructor callback uses &lt;a href=&quot;#n_api_napi_wrap&quot;&gt;&lt;code&gt;napi_wrap&lt;/code&gt;&lt;/a&gt; to wrap a new C++ instance in a JavaScript object, then returns the wrapper object.</source>
          <target state="translated">JavaScriptコードがコンストラクターを呼び出すと、コンストラクターコールバックは&lt;a href=&quot;#n_api_napi_wrap&quot;&gt; &lt;code&gt;napi_wrap&lt;/code&gt; &lt;/a&gt;を使用して新しいC ++インスタンスをJavaScriptオブジェクトにラップし、ラッパーオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="e1e6d67a00f46d577c6fd5ff65d30fd56c2bc6ed" translate="yes" xml:space="preserve">
          <source>When Node.js detects that it is being run with a text terminal (&quot;TTY&quot;) attached, &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; will, by default, be initialized as an instance of &lt;code&gt;tty.ReadStream&lt;/code&gt; and both &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; will, by default be instances of &lt;code&gt;tty.WriteStream&lt;/code&gt;. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the &lt;code&gt;process.stdout.isTTY&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">Node.jsがテキストターミナル（ &quot;TTY&quot;）が接続された状態で実行されていることを検出すると、デフォルトでは、&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;tty.ReadStream&lt;/code&gt; のインスタンスとして初期化され、&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; の&lt;/a&gt;両方がデフォルトは &lt;code&gt;tty.WriteStream&lt;/code&gt; のインスタンスです。Node.jsがTTYコンテキスト内で実行されているかどうかを判断する推奨される方法は、 &lt;code&gt;process.stdout.isTTY&lt;/code&gt; プロパティの値が &lt;code&gt;true&lt;/code&gt; であることを確認することです。</target>
        </trans-unit>
        <trans-unit id="0d04f8d87844828d3bad4ca9fd29c03215b925a5" translate="yes" xml:space="preserve">
          <source>When PEM encoding was selected, the result will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">PEMエンコーディングが選択されている場合、結果は文字列となり、そうでない場合はDERとしてエンコーディングされたデータを含むバッファとなります。</target>
        </trans-unit>
        <trans-unit id="712e5de5a18b32a0cd5de594028fd6970962defd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Buffer&lt;/code&gt; instance is written to the &lt;code&gt;StringDecoder&lt;/code&gt; instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to &lt;code&gt;stringDecoder.write()&lt;/code&gt; or until &lt;code&gt;stringDecoder.end()&lt;/code&gt; is called.</source>
          <target state="translated">場合 &lt;code&gt;Buffer&lt;/code&gt; インスタンスが書き込まれる &lt;code&gt;StringDecoder&lt;/code&gt; のインスタンス、内部バッファは、デコードされた文字列は、任意の不完全なマルチバイト文字が含まれていないことを確実にするために使用されます。これらは、次の呼び出しまでバッファに保持されている &lt;code&gt;stringDecoder.write()&lt;/code&gt; またはまで &lt;code&gt;stringDecoder.end()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="d7f554f90810f250f3efe7dd028d56f55a04d642" translate="yes" xml:space="preserve">
          <source>When a TCP connection is created, it will have Nagle's algorithm enabled.</source>
          <target state="translated">TCP接続が作成されると、Nagleのアルゴリズムが有効になります。</target>
        </trans-unit>
        <trans-unit id="19927653ece31251319386d70d376450d99eecd0" translate="yes" xml:space="preserve">
          <source>When a connection is closed by the client or the server, it is removed from the pool. Any unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests. (see &lt;a href=&quot;net#net_socket_unref&quot;&gt;&lt;code&gt;socket.unref()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">接続がクライアントまたはサーバーによって閉じられると、プールから削除されます。未処理のリクエストがない場合にNode.jsプロセスを実行し続けないように、プール内の未使用のソケットは参照されません。（&lt;a href=&quot;net#net_socket_unref&quot;&gt; &lt;code&gt;socket.unref()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e10f31dacabf18eebe8a53f9a06341d949975f16" translate="yes" xml:space="preserve">
          <source>When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears, then the &lt;code&gt;previousStat&lt;/code&gt; reported in the second callback event (the file's reappearance) will be the same as the &lt;code&gt;previousStat&lt;/code&gt; of the first callback event (its disappearance).</source>
          <target state="translated">&lt;code&gt;fs.watchFile()&lt;/code&gt; によって監視されているファイルが消えて再表示されると、2番目のコールバックイベントで報告された &lt;code&gt;previousStat&lt;/code&gt; （ファイルの再出現）は、最初のコールバックイベントの &lt;code&gt;previousStat&lt;/code&gt; （その消失）と同じになります。</target>
        </trans-unit>
        <trans-unit id="0583ea7689fd44ba5f0901f941df4efc5774f1dd" translate="yes" xml:space="preserve">
          <source>When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears, then the contents of &lt;code&gt;previous&lt;/code&gt; in the second callback event (the file's reappearance) will be the same as the contents of &lt;code&gt;previous&lt;/code&gt; in the first callback event (its disappearance).</source>
          <target state="translated">&lt;code&gt;fs.watchFile()&lt;/code&gt; によって監視されているファイルが消えて再表示されると、2番目のコールバックイベントの &lt;code&gt;previous&lt;/code&gt; の内容（ファイルの再表示）は、最初のコールバックイベントの &lt;code&gt;previous&lt;/code&gt; の内容（その消失）と同じになります。</target>
        </trans-unit>
        <trans-unit id="f1894f695ef22c3ee491695c8dc21d4765ddad8a" translate="yes" xml:space="preserve">
          <source>When a file is run directly from Node.js, &lt;code&gt;require.main&lt;/code&gt; is set to its &lt;code&gt;module&lt;/code&gt;. That means that it is possible to determine whether a file has been run directly by testing &lt;code&gt;require.main === module&lt;/code&gt;.</source>
          <target state="translated">Node.jsから直接ファイルを実行すると、 &lt;code&gt;require.main&lt;/code&gt; がその &lt;code&gt;module&lt;/code&gt; 設定されます。つまり、 &lt;code&gt;require.main === module&lt;/code&gt; テストすることで、ファイルが直接実行されたかどうかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="5b842430962e7964c7770de7491a5dbb686db47c" translate="yes" xml:space="preserve">
          <source>When a listener is registered using the &lt;code&gt;eventEmitter.on()&lt;/code&gt; method, that listener is invoked &lt;em&gt;every time&lt;/em&gt; the named event is emitted.</source>
          <target state="translated">&lt;code&gt;eventEmitter.on()&lt;/code&gt; メソッドを使用してリスナーが登録されると、そのリスナーは、指定されたイベントが発行される&lt;em&gt;たびに&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fb4289ace81cecf2b85810326c8fe6461f147516" translate="yes" xml:space="preserve">
          <source>When a listener is registered using the &lt;code&gt;eventEmitter.on()&lt;/code&gt; method, that listener will be invoked &lt;em&gt;every time&lt;/em&gt; the named event is emitted.</source>
          <target state="translated">&lt;code&gt;eventEmitter.on()&lt;/code&gt; メソッドを使用してリスナーが登録されると、そのリスナーは、名前付きイベントが発生する&lt;em&gt;たび&lt;/em&gt;に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ec661b7d7bfcd43207b92f13fc2978eb8e876b58" translate="yes" xml:space="preserve">
          <source>When a new &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; is created, a custom evaluation function may be provided. This can be used, for instance, to implement fully customized REPL applications.</source>
          <target state="translated">新しい&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;が作成されると、カスタム評価関数が提供される場合があります。これは、たとえば、完全にカスタマイズされたREPLアプリケーションを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2de6c1acec16c787db17c177ceceacef6cbfddcd" translate="yes" xml:space="preserve">
          <source>When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, &lt;code&gt;process.title&lt;/code&gt; is limited to the size of the binary name plus the length of the command line arguments because setting the &lt;code&gt;process.title&lt;/code&gt; overwrites the &lt;code&gt;argv&lt;/code&gt; memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the &lt;code&gt;environ&lt;/code&gt; memory but that was potentially insecure and confusing in some (rather obscure) cases.</source>
          <target state="translated">新しい値が割り当てられると、プラットフォームごとにタイトルの最大長の制限が異なります。通常、このような制限はかなり限定されています。たとえば、LinuxとmacOSでは、 &lt;code&gt;process.title&lt;/code&gt; を設定すると &lt;code&gt;process.title&lt;/code&gt; の &lt;code&gt;argv&lt;/code&gt; メモリが上書きされるため、process.titleはバイナリ名のサイズとコマンドライン引数の長さに加えて制限されます。Node.js v0.8では、 &lt;code&gt;environ&lt;/code&gt; メモリも上書きすることにより、より長いプロセスタイトル文字列が可能でしたが、一部の（かなりあいまいな）場合に、これは安全でなく混乱する可能性がありました。</target>
        </trans-unit>
        <trans-unit id="41f14c991157e8be59395364f28e0f2bab7ae43c" translate="yes" xml:space="preserve">
          <source>When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, &lt;code&gt;process.title&lt;/code&gt; is limited to the size of the binary name plus the length of the command-line arguments because setting the &lt;code&gt;process.title&lt;/code&gt; overwrites the &lt;code&gt;argv&lt;/code&gt; memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the &lt;code&gt;environ&lt;/code&gt; memory but that was potentially insecure and confusing in some (rather obscure) cases.</source>
          <target state="translated">新しい値が割り当てられると、プラットフォームが異なれば、タイトルに異なる最大長の制限が課されます。通常、そのような制限はかなり制限されています。たとえば、LinuxおよびmacOSでは、 &lt;code&gt;process.title&lt;/code&gt; を設定すると &lt;code&gt;process.title&lt;/code&gt; の &lt;code&gt;argv&lt;/code&gt; メモリが上書きされるため、process.titleはバイナリ名のサイズとコマンドライン引数の長さに制限されます。 Node.js v0.8は、 &lt;code&gt;environ&lt;/code&gt; メモリも上書きすることで、より長いプロセスタイトル文字列を許可していましたが、それは潜在的に安全ではなく、一部の（かなりあいまいな）ケースでは混乱を招きました。</target>
        </trans-unit>
        <trans-unit id="3e6192f9f2edc651bd27c25fb6f640d241f78140" translate="yes" xml:space="preserve">
          <source>When a new worker is forked the cluster module will emit a &lt;code&gt;'fork'&lt;/code&gt; event. This can be used to log worker activity, and create a custom timeout.</source>
          <target state="translated">新しいワーカーがフォークされると、クラスターモジュールは &lt;code&gt;'fork'&lt;/code&gt; イベントを発行します。これを使用して、ワーカーアクティビティをログに記録し、カスタムタイムアウトを作成できます。</target>
        </trans-unit>
        <trans-unit id="ac6ece066e2e44ee56af54a0e437179aefc818e3" translate="yes" xml:space="preserve">
          <source>When a policy check fails, Node.js by default will throw an error. It is possible to change the error behavior to one of a few possibilities by defining an &quot;onerror&quot; field in a policy manifest. The following values are available to change the behavior:</source>
          <target state="translated">ポリシーチェックが失敗した場合、デフォルトではNode.jsはエラーをスローします。ポリシーマニフェストで &quot;onerror &quot;フィールドを定義することで、エラーの動作をいくつかの可能性のうちの1つに変更することができます。挙動を変更するには、以下の値が利用可能です。</target>
        </trans-unit>
        <trans-unit id="f6734825ccf390de2be59d84f5e066dbca41f678" translate="yes" xml:space="preserve">
          <source>When a registered event listener throws (or returns a Promise that rejects), by default the error is forwarded to the &lt;code&gt;process.on('error')&lt;/code&gt; event on &lt;code&gt;process.nextTick()&lt;/code&gt;. Throwing within an event listener will &lt;em&gt;not&lt;/em&gt; stop the other registered handlers from being invoked.</source>
          <target state="translated">登録されたイベントリスナーがスローする（または拒否するPromiseを返す）と、デフォルトでは、エラーは &lt;code&gt;process.nextTick()&lt;/code&gt; の &lt;code&gt;process.on('error')&lt;/code&gt; イベントに転送されます。イベントリスナー内でスローしても、登録されている他のハンドラーの呼び出し&lt;em&gt;は&lt;/em&gt;停止し&lt;em&gt;ません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="640af45d9fc3cb08af64151f9dd193ba65c4834a" translate="yes" xml:space="preserve">
          <source>When a report is written, start and end messages are issued to stderr and the filename of the report is returned to the caller. The default filename includes the date, time, PID and a sequence number. The sequence number helps in associating the report dump with the runtime state if generated multiple times for the same Node.js process.</source>
          <target state="translated">レポートが書き込まれると、開始と終了のメッセージが標準エラーに発行され、レポートのファイル名が呼び出し元に返されます。デフォルトのファイル名には、日付、時刻、PID、シーケンス番号が含まれます。シーケンス番号は、同じNode.jsプロセスに対して複数回生成された場合に、レポートダンプを実行時の状態に関連付けるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="15bb4b88c15a01df74babc65463bcbe4252a9901" translate="yes" xml:space="preserve">
          <source>When a single function has been added as a handler multiple times for a single event (as in the example below), &lt;code&gt;removeListener()&lt;/code&gt; will remove the most recently added instance. In the example the &lt;code&gt;once('ping')&lt;/code&gt; listener is removed:</source>
          <target state="translated">単一の関数が単一のイベントのハンドラーとして複数回追加された場合（以下の例のように）、 &lt;code&gt;removeListener()&lt;/code&gt; は最後に追加されたインスタンスを削除します。この例では、 &lt;code&gt;once('ping')&lt;/code&gt; リスナーが削除されています。</target>
        </trans-unit>
        <trans-unit id="511a8bb474a1e812669ff871a25d9353657ef621" translate="yes" xml:space="preserve">
          <source>When a string is passed as an &lt;code&gt;origin&lt;/code&gt;, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; is the ASCII string &lt;code&gt;'https://example.org'&lt;/code&gt;. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.</source>
          <target state="translated">文字列が &lt;code&gt;origin&lt;/code&gt; として渡されると、URLとして解析され、originが派生します。たとえば、HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; のオリジンはASCII文字列 &lt;code&gt;'https://example.org'&lt;/code&gt; です。指定された文字列をURLとして解析できない場合、または有効なオリジンを導出できない場合は、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="3e15aaa4c3d9a784868ceb60e33edb993d7e58a2" translate="yes" xml:space="preserve">
          <source>When a string is passed for the &lt;code&gt;originOrStream&lt;/code&gt; argument, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; is the ASCII string &lt;code&gt;'https://example.org'&lt;/code&gt;. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.</source>
          <target state="translated">&lt;code&gt;originOrStream&lt;/code&gt; 引数に文字列が渡されると、文字列はURLとして解析され、オリジンが派生します。たとえば、HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; のオリジンはASCII文字列 &lt;code&gt;'https://example.org'&lt;/code&gt; です。指定された文字列をURLとして解析できない場合、または有効なオリジンを導出できない場合は、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="afd64c1a21186719f41d045393b1ae954b443d5b" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;Http2Stream&lt;/code&gt; instance is destroyed, an attempt will be made to send an &lt;code&gt;RST_STREAM&lt;/code&gt; frame to the connected peer.</source>
          <target state="translated">場合 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが破棄され、試みが送信するようになされる &lt;code&gt;RST_STREAM&lt;/code&gt; の接続ピアにフレーム。</target>
        </trans-unit>
        <trans-unit id="9126903cfca7540b84da69ca08800be0ac994dcc" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;fs.watchFile&lt;/code&gt; operation results in an &lt;code&gt;ENOENT&lt;/code&gt; error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.</source>
          <target state="translated">とき &lt;code&gt;fs.watchFile&lt;/code&gt; の中に演算結果 &lt;code&gt;ENOENT&lt;/code&gt; のエラーは、それが（日付のか、Unixのエポック）全てゼロのフィールドを持つ、一度リスナーを起動します。ファイルが後で作成された場合、リスナーは最新のstatオブジェクトを使用して再度呼び出されます。これはv0.10以降の機能の変更です。</target>
        </trans-unit>
        <trans-unit id="15d5ff09225189118135ef540fc0d06959e1b6ea" translate="yes" xml:space="preserve">
          <source>When an IPC channel has been established between the parent and child ( i.e. when using &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;subprocess.send()&lt;/code&gt; method can be used to send messages to the child process. When the child process is a Node.js instance, these messages can be received via the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">親と子の間にIPCチャネルが確立されている場合（つまり、&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;を使用している場合）、 &lt;code&gt;subprocess.send()&lt;/code&gt; メソッドを使用して、子プロセスにメッセージを送信できます。子プロセスがNode.jsインスタンスである場合、これらのメッセージは&lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt;イベントを介して受信できます。</target>
        </trans-unit>
        <trans-unit id="1e27b21d76575a6545a822c2e33f4c81b2756f09" translate="yes" xml:space="preserve">
          <source>When an addon has additional threads and JavaScript functions need to be invoked based on the processing completed by those threads, those threads must communicate with the addon's main thread so that the main thread can invoke the JavaScript function on their behalf. The thread-safe function APIs provide an easy way to do this.</source>
          <target state="translated">アドオンに追加のスレッドがあり、それらのスレッドで完了した処理に基づいて JavaScript 関数を呼び出す必要がある場合、それらのスレッドはアドオンのメインスレッドと通信し、メインスレッドがそのスレッドに代わって JavaScript 関数を呼び出すことができるようにしなければなりません。スレッドセーフ関数APIはこれを簡単に行う方法を提供します。</target>
        </trans-unit>
        <trans-unit id="9756dd0510cc11850f4ec535793e6081c77c3248" translate="yes" xml:space="preserve">
          <source>When an asynchronous method is called on an object that is an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;, errors can be routed to that object's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;であるオブジェクトで非同期メソッドが呼び出されると、エラーはそのオブジェクトの &lt;code&gt;'error'&lt;/code&gt; イベントにルーティングされます。</target>
        </trans-unit>
        <trans-unit id="d18e3a14276353b8018b491a75c5696499ddaf86" translate="yes" xml:space="preserve">
          <source>When an asynchronous operation is initiated (such as a TCP server receiving a new connection) or completes (such as writing data to disk) a callback is called to notify the user. The &lt;code&gt;before&lt;/code&gt; callback is called just before said callback is executed. &lt;code&gt;asyncId&lt;/code&gt; is the unique identifier assigned to the resource about to execute the callback.</source>
          <target state="translated">非同期操作が開始されると（TCPサーバーが新しい接続を受信するなど）、または完了すると（ディスクへのデータの書き込みなど）、コールバックが呼び出されてユーザーに通知されます。 &lt;code&gt;before&lt;/code&gt; のコールバックは、直前に呼び出されるコールバックが実行されると言われています。 &lt;code&gt;asyncId&lt;/code&gt; は、コールバックを実行しようとしているリソースに割り当てられた一意の識別子です。</target>
        </trans-unit>
        <trans-unit id="d6b9733c7131b1f270bd8a59447f8373638fdeb8" translate="yes" xml:space="preserve">
          <source>When an error occurs within an &lt;code&gt;EventEmitter&lt;/code&gt; instance, the typical action is for an &lt;code&gt;'error'&lt;/code&gt; event to be emitted. These are treated as special cases within Node.js.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; インスタンス内でエラーが発生した場合、一般的なアクションは &lt;code&gt;'error'&lt;/code&gt; イベントが発生することです。これらは、Node.js内では特別なケースとして扱われます。</target>
        </trans-unit>
        <trans-unit id="881c946d092eee0c2019dddd26763c107f92074b" translate="yes" xml:space="preserve">
          <source>When an exception is pending one of two approaches can be employed.</source>
          <target state="translated">例外が保留されている場合は、2つのアプローチのうちの1つを採用することができます。</target>
        </trans-unit>
        <trans-unit id="b8d8e67ab97c6a356d400452947e7a1f5c25de46" translate="yes" xml:space="preserve">
          <source>When an idle timeout is triggered the socket will receive a &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event but the connection will not be severed. The user must manually call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;socket.end()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#net_socket_destroy_error&quot;&gt;&lt;code&gt;socket.destroy()&lt;/code&gt;&lt;/a&gt; to end the connection.</source>
          <target state="translated">アイドルタイムアウトがトリガーされると、ソケットは&lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt;イベントを受信しますが、接続は切断されません。ユーザーは手動で&lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;socket.end()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#net_socket_destroy_error&quot;&gt; &lt;code&gt;socket.destroy()&lt;/code&gt; &lt;/a&gt;を呼び出して接続を終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="b12a2263759010fd5cb937026f4d3cc1d87aca96" translate="yes" xml:space="preserve">
          <source>When an idle timeout is triggered the socket will receive a &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event but the connection will not be severed. The user must manually call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;socket.end()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#net_socket_destroy_exception&quot;&gt;&lt;code&gt;socket.destroy()&lt;/code&gt;&lt;/a&gt; to end the connection.</source>
          <target state="translated">アイドルタイムアウトがトリガーされると、ソケットは&lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt;イベントを受け取りますが、接続は切断されません。ユーザーは手動で&lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;socket.end()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#net_socket_destroy_exception&quot;&gt; &lt;code&gt;socket.destroy()&lt;/code&gt; &lt;/a&gt;を呼び出して接続を終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="77087efee8715a6dc2457aee2202585a65670e3f" translate="yes" xml:space="preserve">
          <source>When any of the workers die the cluster module will emit the &lt;code&gt;'exit'&lt;/code&gt; event.</source>
          <target state="translated">ワーカーのいずれかが死亡すると、クラスターモジュールは &lt;code&gt;'exit'&lt;/code&gt; イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="116eb8d9b320b92f34b0093303e05d42b3f6ac48" translate="yes" xml:space="preserve">
          <source>When assigning a non-string property to &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment may result in a thrown error. Please convert the property to a string before assigning it to &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">非文字列プロパティを&lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt;に割り当てると、割り当てられた値は暗黙的に文字列に変換されます。割り当てられた値が文字列、ブール値、または数値でない場合、この動作は非推奨です。将来的には、このような割り当てによってエラーがスローされる可能性があります。プロパティを文字列に変換してから、 &lt;code&gt;process.env&lt;/code&gt; に割り当ててください。</target>
        </trans-unit>
        <trans-unit id="7d917de109fb537bcc255120b58c25b9a1a0ef08" translate="yes" xml:space="preserve">
          <source>When assigning a non-string property to &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment might result in a thrown error. Please convert the property to a string before assigning it to &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">文字列以外のプロパティを&lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt;に割り当てると、割り当てられた値は暗黙的に文字列に変換されます。割り当てられた値が文字列、ブール値、または数値でない場合、この動作は非推奨になります。将来的には、そのような割り当てによってエラーがスローされる可能性があります。それを &lt;code&gt;process.env&lt;/code&gt; に割り当てる前に、プロパティを文字列に変換してください。</target>
        </trans-unit>
        <trans-unit id="8b818f741bbe7288d1ef2ca2faa3d09c3b90b166" translate="yes" xml:space="preserve">
          <source>When building addons with &lt;code&gt;node-gyp&lt;/code&gt;, using the macro &lt;code&gt;NODE_GYP_MODULE_NAME&lt;/code&gt; as the first parameter of &lt;code&gt;NODE_MODULE()&lt;/code&gt; will ensure that the name of the final binary will be passed to &lt;code&gt;NODE_MODULE()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node-gyp&lt;/code&gt; でアドオンを構築する場合、 &lt;code&gt;NODE_MODULE()&lt;/code&gt; の最初のパラメーターとしてマクロ &lt;code&gt;NODE_GYP_MODULE_NAME&lt;/code&gt; を使用すると、最終的なバイナリの名前が確実に &lt;code&gt;NODE_MODULE()&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="ad44239206d327c587affb7903510f4fb3d9e0f3" translate="yes" xml:space="preserve">
          <source>When called on an unbound socket, this method will implicitly bind to a random port, listening on all interfaces.</source>
          <target state="translated">束縛されていないソケットで呼び出された場合、このメソッドは暗黙のうちにランダムなポートにバインドし、すべてのインターフェイスをリッスンします。</target>
        </trans-unit>
        <trans-unit id="deed801833ff5cd178d1520926c3e8872b44b700" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.prompt()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;rl.prompt()&lt;/code&gt; は、一時停止されている場合に &lt;code&gt;input&lt;/code&gt; ストリームを再開します。</target>
        </trans-unit>
        <trans-unit id="95690a6b2ee253f0d475698c7f4cb4b18f80c22a" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.question()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;rl.question()&lt;/code&gt; は、一時停止されている場合に &lt;code&gt;input&lt;/code&gt; ストリームを再開します。</target>
        </trans-unit>
        <trans-unit id="03e0cfc11341c28038f0a5d042284497f7d85fcb" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.write()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;rl.write()&lt;/code&gt; は、一時停止されている場合に &lt;code&gt;input&lt;/code&gt; ストリームを再開します。</target>
        </trans-unit>
        <trans-unit id="ffb3e53f526ac9005699e2122cb50b0c9899e0ac" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;util.deprecate()&lt;/code&gt; will return a function that will emit a &lt;code&gt;DeprecationWarning&lt;/code&gt; using the &lt;a href=&quot;process#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; event. The warning will be emitted and printed to &lt;code&gt;stderr&lt;/code&gt; the first time the returned function is called. After the warning is emitted, the wrapped function is called without emitting a warning.</source>
          <target state="translated">&lt;code&gt;util.deprecate()&lt;/code&gt; を呼び出すと、&lt;a href=&quot;process#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;イベントを使用して &lt;code&gt;DeprecationWarning&lt;/code&gt; を発行する関数が返されます。警告は、返された関数が最初に呼び出されたときに発行され、 &lt;code&gt;stderr&lt;/code&gt; に出力されます。警告が発行された後、ラップされた関数が警告を発行せずに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="782b4e66ba3724b519a47f97cc938ec98cfd3fc0" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;FSWatcher&lt;/code&gt; is active. Calling &lt;code&gt;watcher.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;FSWatcher&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;watcher.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="41e9efc4f4b110bf919f383c4bad1087df420418" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;Immediate&lt;/code&gt; is active. Calling &lt;code&gt;immediate.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;Immediate&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;immediate.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="74a07dd0d422c69557a3f1212fdca158cd9d1388" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;StatWatcher&lt;/code&gt; is active. Calling &lt;code&gt;watcher.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;StatWatcher&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;watcher.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="be1e4bc9da3126435a172ee6de0a8b7b01a0eecb" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;Timeout&lt;/code&gt; is active. Calling &lt;code&gt;timeout.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;Timeout&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;timeout.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="3bdd99a968eb6c7c6f053bc7b91cc625374d6faa" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;FSWatcher&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;FSWatcher&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;watcher.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されたとき、アクティブな &lt;code&gt;FSWatcher&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブのままである必要はありません。イベントループの実行を維持している他のアクティビティがない場合、プロセスは &lt;code&gt;FSWatcher&lt;/code&gt; オブジェクトのコールバックが呼び出される前に終了する可能性があります。 &lt;code&gt;watcher.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="8e832ff5be2f07a09ebaa7573b2df95ffeb3614c" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;Immediate&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;Immediate&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;immediate.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、アクティブな &lt;code&gt;Immediate&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブなままである必要はありません。イベントループの実行を維持する他のアクティビティがない場合、 &lt;code&gt;Immediate&lt;/code&gt; オブジェクトのコールバックが呼び出される前にプロセスが終了する可能性があります。 &lt;code&gt;immediate.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="855b13a333a844940a73826ba1ecc4be80be3cfb" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;StatWatcher&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;StatWatcher&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;watcher.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されたとき、アクティブな &lt;code&gt;StatWatcher&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブのままである必要はありません。イベントループの実行を維持している他のアクティビティがない場合、 &lt;code&gt;StatWatcher&lt;/code&gt; オブジェクトのコールバックが呼び出される前にプロセスが終了する可能性があります。 &lt;code&gt;watcher.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="52de90f11b22fd290fb3c08dde2358cfaa2b0340" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;Timeout&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;Timeout&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;timeout.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、アクティブな &lt;code&gt;Timeout&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブのままである必要はありません。イベントループの実行を維持するアクティビティが他にない場合、 &lt;code&gt;Timeout&lt;/code&gt; オブジェクトのコールバックが呼び出される前にプロセスが終了する可能性があります。 &lt;code&gt;timeout.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="9472be900a89f3ccdcf5acc7441e9034a55e1be5" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, the segment of allocated memory is &lt;em&gt;uninitialized&lt;/em&gt; (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a &lt;code&gt;Buffer&lt;/code&gt; created by &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;completely&lt;/em&gt; overwriting the memory can allow this old data to be leaked when the &lt;code&gt;Buffer&lt;/code&gt; memory is read.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; を&lt;/a&gt;呼び出すと、割り当てられたメモリのセグメントは&lt;em&gt;初期化さ&lt;/em&gt;れません（ゼロ化されません）。この設計ではメモリの割り当てが非常に高速になりますが、割り当てられたメモリのセグメントには、潜在的に機密性の高い古いデータが含まれている可能性があります。メモリを&lt;em&gt;完全に&lt;/em&gt;上書きせずに、&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Buffer&lt;/code&gt; を使用すると、 &lt;code&gt;Buffer&lt;/code&gt; メモリが読み取られるときに、この古いデータがリークされる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="96f6bf2e2ec8bbbea1c61816a4f0b4a72612a006" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, the segment of allocated memory is &lt;em&gt;uninitialized&lt;/em&gt; (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a &lt;code&gt;Buffer&lt;/code&gt; created by &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;completely&lt;/em&gt; overwriting the memory can allow this old data to be leaked when the &lt;code&gt;Buffer&lt;/code&gt; memory is read.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; を&lt;/a&gt;呼び出すと、割り当てられたメモリのセグメントは&lt;em&gt;初期化さ&lt;/em&gt;れません（ゼロ化されません）。この設計によりメモリの割り当てが非常に高速になりますが、割り当てられたメモリセグメントには、機密性の高い可能性のある古いデータが含まれている可能性があります。メモリを&lt;em&gt;完全に&lt;/em&gt;上書きせずに&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Buffer&lt;/code&gt; を使用すると、 &lt;code&gt;Buffer&lt;/code&gt; メモリの読み取り時にこの古いデータがリークされる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="468120732bcdf214c7e9f58563736b992ee8c4bf" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;.node&lt;/code&gt; extension can usually be omitted and Node.js will still find and initialize the Addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file &lt;code&gt;addon.js&lt;/code&gt; in the same directory as the binary &lt;code&gt;addon.node&lt;/code&gt;, then &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require('addon')&lt;/code&gt;&lt;/a&gt; will give precedence to the &lt;code&gt;addon.js&lt;/code&gt; file and load it instead.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; を&lt;/a&gt;呼び出すとき、通常は &lt;code&gt;.node&lt;/code&gt; 拡張子を省略でき、Node.jsは引き続きアドオンを見つけて初期化します。ただし、注意点の1つは、Node.jsが最初に、同じベース名を共有するモジュールまたはJavaScriptファイルを見つけてロードしようとすることです。たとえば、バイナリ &lt;code&gt;addon.node&lt;/code&gt; と同じディレクトリにファイル &lt;code&gt;addon.js&lt;/code&gt; がある場合、&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require('addon')&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;addon.js&lt;/code&gt; ファイルを優先し、代わりにロードします。</target>
        </trans-unit>
        <trans-unit id="da566e0b89c4ee78a1cb664d3a13e2b25f5806e2" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;.node&lt;/code&gt; extension can usually be omitted and Node.js will still find and initialize the addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file &lt;code&gt;addon.js&lt;/code&gt; in the same directory as the binary &lt;code&gt;addon.node&lt;/code&gt;, then &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require('addon')&lt;/code&gt;&lt;/a&gt; will give precedence to the &lt;code&gt;addon.js&lt;/code&gt; file and load it instead.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; を&lt;/a&gt;呼び出す場合、通常は &lt;code&gt;.node&lt;/code&gt; 拡張子を省略でき、Node.jsは引き続きアドオンを見つけて初期化します。ただし、注意点の1つは、Node.jsが最初に、同じベース名を共有するモジュールまたはJavaScriptファイルを見つけてロードしようとすることです。たとえば、バイナリ &lt;code&gt;addon.node&lt;/code&gt; と同じディレクトリにファイル &lt;code&gt;addon.js&lt;/code&gt; がある場合、&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require('addon')&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;addon.js&lt;/code&gt; ファイルを優先し、代わりにそれをロードします。</target>
        </trans-unit>
        <trans-unit id="fa673ee946e346399b283e0ddd06ac9b7dc3be24" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;asyncLocalStorage.disable()&lt;/code&gt;, all current contexts linked to the instance will be exited.</source>
          <target state="translated">&lt;code&gt;asyncLocalStorage.disable()&lt;/code&gt; を呼び出すと、インスタンスにリンクされている現在のすべてのコンテキストが終了します。</target>
        </trans-unit>
        <trans-unit id="35899d0224206f7ecd5b079bec2e5ae41bf88bc6" translate="yes" xml:space="preserve">
          <source>When converting between &lt;code&gt;Buffer&lt;/code&gt;s and strings, a character encoding may be specified. If no character encoding is specified, UTF-8 will be used as the default.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; と文字列の間で変換する場合、文字エンコーディングを指定できます。文字エンコードが指定されていない場合、デフォルトとしてUTF-8が使用されます。</target>
        </trans-unit>
        <trans-unit id="69c454c7fd1f23edf7fd0f8da819640c0634eb1b" translate="yes" xml:space="preserve">
          <source>When created, the &lt;code&gt;Tracing&lt;/code&gt; object is disabled. Calling the &lt;code&gt;tracing.enable()&lt;/code&gt; method adds the categories to the set of enabled trace event categories. Calling &lt;code&gt;tracing.disable()&lt;/code&gt; will remove the categories from the set of enabled trace event categories.</source>
          <target state="translated">作成されると、 &lt;code&gt;Tracing&lt;/code&gt; オブジェクトは無効になります。 &lt;code&gt;tracing.enable()&lt;/code&gt; メソッドを呼び出すと、有効なトレースイベントカテゴリのセットにカテゴリが追加されます。 &lt;code&gt;tracing.disable()&lt;/code&gt; を呼び出すと、有効なトレースイベントカテゴリのセットからカテゴリが削除されます。</target>
        </trans-unit>
        <trans-unit id="cdfbef80b77a4d29415e274eb994b5bd25290e5d" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;Buffer&lt;/code&gt; using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;.buffer&lt;/code&gt;, it is possible to use only a portion of the underlying &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; by passing in &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;.buffer&lt;/code&gt; を使用して &lt;code&gt;Buffer&lt;/code&gt; を作成する場合、 &lt;code&gt;byteOffset&lt;/code&gt; および &lt;code&gt;length&lt;/code&gt; パラメータを渡すことにより、基になる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;一部のみを使用することが可能です。</target>
        </trans-unit>
        <trans-unit id="05011da92dca1fbee82021fa4aeff73f6a280090" translate="yes" xml:space="preserve">
          <source>When data has been encrypted without standard block padding, calling &lt;code&gt;decipher.setAutoPadding(false)&lt;/code&gt; will disable automatic padding to prevent &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; from checking for and removing padding.</source>
          <target state="translated">データが標準のブロックパディングなしで暗号化されている場合、 &lt;code&gt;decipher.setAutoPadding(false)&lt;/code&gt; を呼び出すと、自動パディングが無効になり、&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;によるパディングのチェックと削除が防止されます。</target>
        </trans-unit>
        <trans-unit id="41a108b65d6c3bc13552fc5b243229555d3f5234" translate="yes" xml:space="preserve">
          <source>When decrypting, the authentication tag must be set via &lt;code&gt;setAuthTag()&lt;/code&gt; before calling &lt;code&gt;update()&lt;/code&gt;. Otherwise, decryption will fail and &lt;code&gt;final()&lt;/code&gt; will throw an error in compliance with section 2.6 of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3610.txt&quot;&gt;RFC 3610&lt;/a&gt;.</source>
          <target state="translated">復号化するときは、 &lt;code&gt;update()&lt;/code&gt; を呼び出す前に、 &lt;code&gt;setAuthTag()&lt;/code&gt; を介して認証タグを設定する必要があります。そうでない場合、復号化は失敗し、 &lt;code&gt;final()&lt;/code&gt; は&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3610.txt&quot;&gt;RFC 3610の&lt;/a&gt;セクション2.6に準拠してエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="7900ae4062073e82206b0fa6925789e3589d4177" translate="yes" xml:space="preserve">
          <source>When enabled, TLS packet trace information is written to &lt;code&gt;stderr&lt;/code&gt;. This can be used to debug TLS connection problems.</source>
          <target state="translated">有効にすると、TLSパケットトレース情報が &lt;code&gt;stderr&lt;/code&gt; に書き込まれます。これは、TLS接続の問題をデバッグするために使用できます。</target>
        </trans-unit>
        <trans-unit id="6983a109482d5a03d2a40f9b0b6b02c14a31403b" translate="yes" xml:space="preserve">
          <source>When encoding public keys, it is recommended to use &lt;code&gt;'spki'&lt;/code&gt;. When encoding private keys, it is recommended to use &lt;code&gt;'pkcs8'&lt;/code&gt; with a strong passphrase, and to keep the passphrase confidential.</source>
          <target state="translated">公開鍵をエンコードするときは、 &lt;code&gt;'spki'&lt;/code&gt; を使用することをお勧めします。秘密鍵をエンコードするときは、強力なパスフレーズで &lt;code&gt;'pkcs8'&lt;/code&gt; を使用し、パスフレーズの機密を保持することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a7ef1148fcaa829598a8bfe1284ca6b09d93c35a" translate="yes" xml:space="preserve">
          <source>When encoding public keys, it is recommended to use &lt;code&gt;'spki'&lt;/code&gt;. When encoding private keys, it is recommended to use &lt;code&gt;'pks8'&lt;/code&gt; with a strong passphrase, and to keep the passphrase confidential.</source>
          <target state="translated">公開鍵をエンコードするときは、 &lt;code&gt;'spki'&lt;/code&gt; を使用することをお勧めします。秘密鍵をエンコードするときは、強力なパスフレーズで &lt;code&gt;'pks8'&lt;/code&gt; を使用し、パスフレーズの機密を保持することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="05906fb7a190e151a8a2e400c141bb3e603ff56b" translate="yes" xml:space="preserve">
          <source>When encountering this error, a possible alternative to creating a &lt;code&gt;Buffer&lt;/code&gt; instance is to create a normal &lt;code&gt;Uint8Array&lt;/code&gt;, which only differs in the prototype of the resulting object. &lt;code&gt;Uint8Array&lt;/code&gt;s are generally accepted in all Node.js core APIs where &lt;code&gt;Buffer&lt;/code&gt;s are; they are available in all Contexts.</source>
          <target state="translated">このエラーが発生した場合、 &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成する代わりに、通常の &lt;code&gt;Uint8Array&lt;/code&gt; を作成する方法があります。これは、結果のオブジェクトのプロトタイプのみが異なります。 &lt;code&gt;Uint8Array&lt;/code&gt; は、一般に、 &lt;code&gt;Buffer&lt;/code&gt; があるすべてのNode.jsコアAPIで受け入れられます。すべてのコンテキストで使用できます。</target>
        </trans-unit>
        <trans-unit id="fbea7195eb1a28298b5c6bcea88ce20614ead794" translate="yes" xml:space="preserve">
          <source>When extending streams, keep in mind what options the user can and should provide before forwarding these to the base constructor. For example, if the implementation makes assumptions in regard to the &lt;code&gt;autoDestroy&lt;/code&gt; and &lt;code&gt;emitClose&lt;/code&gt; options, do not allow the user to override these. Be explicit about what options are forwarded instead of implicitly forwarding all options.</source>
          <target state="translated">ストリームを拡張するときは、これらを基本コンストラクターに転送する前に、ユーザーが提供できるオプションと提供する必要があるオプションを覚えておいてください。たとえば、実装が &lt;code&gt;autoDestroy&lt;/code&gt; および &lt;code&gt;emitClose&lt;/code&gt; オプションに関して仮定を行う場合、ユーザーがこれらをオーバーライドすることを許可しないでください。すべてのオプションを暗黙的に転送するのではなく、どのオプションが転送されるかを明示します。</target>
        </trans-unit>
        <trans-unit id="e76bc96e47739cd7dc97aceca50067613ec70e6a" translate="yes" xml:space="preserve">
          <source>When having multiple instances of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;, they are independent from each other. It is safe to instantiate this class multiple times.</source>
          <target state="translated">&lt;code&gt;AsyncLocalStorage&lt;/code&gt; のインスタンスが複数ある場合、それらは互いに独立しています。このクラスを複数回インスタンス化しても安全です。</target>
        </trans-unit>
        <trans-unit id="b68d52fb44ce1ad14ef826fcceca8bc169d525a5" translate="yes" xml:space="preserve">
          <source>When headers have been set with &lt;a href=&quot;#http2_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt;, they will be merged with any headers passed to &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt;, with the headers passed to &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; given precedence.</source>
          <target state="translated">ヘッダーが&lt;a href=&quot;#http2_response_setheader_name_value&quot;&gt; &lt;code&gt;response.setHeader()&lt;/code&gt; &lt;/a&gt;で設定されている場合、ヘッダーはresponse.writeHead（）に渡されたヘッダーとマージされ、ヘッダーは&lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;に渡され&lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;優先されます。</target>
        </trans-unit>
        <trans-unit id="c27d25166c52526d61af879040d266b4ce3293c5" translate="yes" xml:space="preserve">
          <source>When headers have been set with &lt;a href=&quot;#http_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt;, they will be merged with any headers passed to &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt;, with the headers passed to &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; given precedence.</source>
          <target state="translated">ヘッダーが&lt;a href=&quot;#http_response_setheader_name_value&quot;&gt; &lt;code&gt;response.setHeader()&lt;/code&gt; &lt;/a&gt;で設定されている場合、ヘッダーはresponse.writeHead（）に渡されたヘッダーとマージされ、ヘッダーは&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;に渡され&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;優先されます。</target>
        </trans-unit>
        <trans-unit id="30fa6efb90162b70bba910948f8d508f93d02aec" translate="yes" xml:space="preserve">
          <source>When hooks are used they only apply to ES module loading and not to any CommonJS modules loaded.</source>
          <target state="translated">フックを使用する場合は、ESモジュールのロードにのみ適用され、ロードされたCommonJSモジュールには適用されません。</target>
        </trans-unit>
        <trans-unit id="b5a6dd08e0729dc5592da6bcbaa315760902c033" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. in order to provide asynchronous stack traces) about the correlation between tasks and their outcomes.</source>
          <target state="translated">ワーカープールを実装するときは、&lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; APIを使用して、タスクとその結果の相関関係を診断ツールに通知します（たとえば、非同期スタックトレースを提供するため）。</target>
        </trans-unit>
        <trans-unit id="86fa0425ee48db6d8d29ec95b9974a8ecde279dc" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. in order to provide asynchronous stack traces) about the correlation between tasks and their outcomes. See &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool&quot;&lt;/a&gt; in the &lt;code&gt;async_hooks&lt;/code&gt; documentation for an example implementation.</source>
          <target state="translated">ワーカープールを実装するときは、&lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; APIを使用して、タスクとその結果の間の相関関係について診断ツールに通知します（たとえば、非同期スタックトレースを提供するため）。実装例については、 &lt;code&gt;async_hooks&lt;/code&gt; ドキュメントの&lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;「&lt;/a&gt; &lt;code&gt;Worker&lt;/code&gt; スレッドプールに &lt;code&gt;AsyncResource&lt;/code&gt; を使用する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9447dff2dc7b6ea8f82aeb79872b54050b5c6671" translate="yes" xml:space="preserve">
          <source>When importing &lt;a href=&quot;#esm_commonjs_namespaces&quot;&gt;CommonJS modules&lt;/a&gt;, the &lt;code&gt;module.exports&lt;/code&gt; object is provided as the default export. Named exports may be available, provided by static analysis as a convenience for better ecosystem compatibility.</source>
          <target state="translated">&lt;a href=&quot;#esm_commonjs_namespaces&quot;&gt;CommonJSモジュールを&lt;/a&gt;インポートする場合、 &lt;code&gt;module.exports&lt;/code&gt; オブジェクトがデフォルトのエクスポートとして提供されます。生態系の互換性を高めるための利便性として静的分析によって提供される、名前付きのエクスポートが利用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="db0a58857ea8172591d17a349d053d1cf051d60f" translate="yes" xml:space="preserve">
          <source>When importing a CommonJS module, it can be reliably imported using the ES module default import or its corresponding sugar syntax:</source>
          <target state="translated">CommonJSモジュールをインポートする際には、ESモジュールのデフォルトインポートまたは対応するシュガー構文を使用して確実にインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="e9ddcbd7ac9a3379f4508938d4baf9617576b349" translate="yes" xml:space="preserve">
          <source>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters. &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt; will no longer cause a &lt;code&gt;SIGINT&lt;/code&gt; when in this mode.</source>
          <target state="translated">rawモードでは、入力は常に修飾子を含まず、文字ごとに使用できます。さらに、入力文字のエコーを含む、端末による文字のすべての特別な処理が無効になります。このモードでは、 &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; で &lt;code&gt;SIGINT&lt;/code&gt; が発生しなくなりました。</target>
        </trans-unit>
        <trans-unit id="cd0a26ba226713539b41536c16abf31af0d2cd2d" translate="yes" xml:space="preserve">
          <source>When iterating over &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt;, flags will appear only &lt;em&gt;once&lt;/em&gt;; each will begin with one or more dashes. Flags passed through to V8 will contain underscores instead of non-leading dashes:</source>
          <target state="translated">&lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; を反復する場合、フラグは&lt;em&gt;1回&lt;/em&gt;だけ表示さ&lt;em&gt;れ&lt;/em&gt;ます。それぞれが1つ以上のダッシュで始まります。V8に渡されるフラグには、先頭にないダッシュの代わりにアンダースコアが含まれます。</target>
        </trans-unit>
        <trans-unit id="152f4ff941bc3f806360985c462b440ec7b21293" translate="yes" xml:space="preserve">
          <source>When loading resources the entire URL must match including search parameters and hash fragment. &lt;code&gt;./a.js?b&lt;/code&gt; will not be used when attempting to load &lt;code&gt;./a.js&lt;/code&gt; and vice versa.</source>
          <target state="translated">リソースをロードするときは、検索パラメーターとハッシュフラグメントを含めて、URL全体が一致する必要があります。 &lt;code&gt;./a.js?b&lt;/code&gt; は、。 &lt;code&gt;./a.js&lt;/code&gt; をロードしようとするときには使用されず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="aa04f5cf4c0a06d2c3131d5e120108e37b37f3ff" translate="yes" xml:space="preserve">
          <source>When looking for the CommonJS modules that have required the current one, &lt;code&gt;require.cache&lt;/code&gt; and &lt;code&gt;module.children&lt;/code&gt; can be used:</source>
          <target state="translated">現在のモジュールを必要としているCommonJSモジュールを探すときは、 &lt;code&gt;require.cache&lt;/code&gt; と &lt;code&gt;module.children&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="4e88de394e67150d9975fd970bf780f1247bdc0e" translate="yes" xml:space="preserve">
          <source>When multi-line input is being entered, an ellipsis is printed rather than the 'prompt'.</source>
          <target state="translated">複数行入力の場合は、「プロンプト」ではなく「省略記号」が表示されます。</target>
        </trans-unit>
        <trans-unit id="da3fdcb3773839fe853004d32c8734d9ff43b77b" translate="yes" xml:space="preserve">
          <source>When multiple calls to &lt;code&gt;setImmediate()&lt;/code&gt; are made, the &lt;code&gt;callback&lt;/code&gt; functions are queued for execution in the order in which they are created. The entire callback queue is processed every event loop iteration. If an immediate timer is queued from inside an executing callback, that timer will not be triggered until the next event loop iteration.</source>
          <target state="translated">&lt;code&gt;setImmediate()&lt;/code&gt; への複数の呼び出しが行われると、 &lt;code&gt;callback&lt;/code&gt; 関数は作成された順に実行のためにキューに入れられます。コールバックキュー全体は、イベントループの反復ごとに処理されます。即時タイマーが実行中のコールバック内からキューに入れられている場合、そのタイマーは次のイベントループの反復までトリガーされません。</target>
        </trans-unit>
        <trans-unit id="798ac8eedc938f74e1db139185f92862c77691f3" translate="yes" xml:space="preserve">
          <source>When multiple, sequential path segment separation characters are found (e.g. &lt;code&gt;/&lt;/code&gt; on POSIX and either &lt;code&gt;\&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt; on Windows), they are replaced by a single instance of the platform-specific path segment separator (&lt;code&gt;/&lt;/code&gt; on POSIX and &lt;code&gt;\&lt;/code&gt; on Windows). Trailing separators are preserved.</source>
          <target state="translated">複数の、連続的なパスセグメント分離文字が（例えば発見された場合 &lt;code&gt;/&lt;/code&gt; POSIX上のいずれか &lt;code&gt;\&lt;/code&gt; または &lt;code&gt;/&lt;/code&gt; （Windowsの場合）、それらはプラットフォーム固有のパスセグメントの区切りの単一のインスタンスに置き換えられている &lt;code&gt;/&lt;/code&gt; 上POSIXと &lt;code&gt;\&lt;/code&gt; Windowsの場合）。末尾のセパレータは保持されます。</target>
        </trans-unit>
        <trans-unit id="04c7d9678da6dfcd3add1c63322a588714097a94" translate="yes" xml:space="preserve">
          <source>When nesting scopes, there are cases where a handle from an inner scope needs to live beyond the lifespan of that scope. N-API supports an 'escapable scope' in order to support this case. An escapable scope allows one handle to be 'promoted' so that it 'escapes' the current scope and the lifespan of the handle changes from the current scope to that of the outer scope.</source>
          <target state="translated">スコープを入れ子にする場合、内部スコープのハンドルがそのスコープの寿命を超えて生きている必要がある場合があります。N-API は、このようなケースをサポートするために「エスケープ可能なスコープ」をサポートしています。エスケープ可能なスコープでは、あるハンドルを現在のスコープから「エスケープ」するように「昇格」させ、ハンドルのライフスパンを現在のスコープから外部スコープのものに変更します。</target>
        </trans-unit>
        <trans-unit id="1ac9efff7e0ed2baf0cde15422c85d12b4cfa7e9" translate="yes" xml:space="preserve">
          <source>When non-ASCII characters appear within a host name, the host name is encoded using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm. Note, however, that a host name &lt;em&gt;may&lt;/em&gt; contain &lt;em&gt;both&lt;/em&gt; Punycode encoded and percent-encoded characters:</source>
          <target state="translated">非ASCII文字がホスト名に含まれている場合、ホスト名は&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用してエンコードされます。ただし、ホスト名には&lt;em&gt;、&lt;/em&gt; Punycodeエンコード文字とパーセントエンコード文字の&lt;em&gt;両方&lt;/em&gt;&lt;em&gt;が&lt;/em&gt;含まれる&lt;em&gt;場合&lt;/em&gt;があることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10235144f1c4270cc259caf923559f1488e62e3a" translate="yes" xml:space="preserve">
          <source>When non-ASCII characters appear within a hostname, the hostname is encoded using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm. Note, however, that a hostname &lt;em&gt;may&lt;/em&gt; contain &lt;em&gt;both&lt;/em&gt; Punycode encoded and percent-encoded characters:</source>
          <target state="translated">ホスト名内に非ASCII文字が含まれている場合、ホスト名は&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用してエンコードされます。ただし、ホスト名に&lt;em&gt;は&lt;/em&gt; Punycodeでエンコードされた文字とパーセントでエンコードされた文字の&lt;em&gt;両方&lt;/em&gt;&lt;em&gt;が&lt;/em&gt;含まれる&lt;em&gt;場合&lt;/em&gt;があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0a421b9c16e5b3e7316b0d634726cc34111fd19c" translate="yes" xml:space="preserve">
          <source>When not using N-API, implementing Addons is complicated, involving knowledge of several components and APIs:</source>
          <target state="translated">N-APIを使用しない場合、アドオンの実装は、いくつかのコンポーネントやAPIの知識を必要とする複雑なものです。</target>
        </trans-unit>
        <trans-unit id="b75365dd456e2085d1af3e62e1e9c9ca89f8f54f" translate="yes" xml:space="preserve">
          <source>When not using N-API, implementing addons is complicated, involving knowledge of several components and APIs:</source>
          <target state="translated">N-APIを使用しない場合、アドオンの実装は複雑で、いくつかのコンポーネントやAPIの知識が必要になります。</target>
        </trans-unit>
        <trans-unit id="b9264aa00cdf70e8036e90c5dcb862b3e0cf826b" translate="yes" xml:space="preserve">
          <source>When operating on file handles, the mode cannot be changed from what it was set to with &lt;a href=&quot;#fs_fspromises_open_path_flags_mode&quot;&gt;&lt;code&gt;fsPromises.open()&lt;/code&gt;&lt;/a&gt;. Therefore, this is equivalent to &lt;a href=&quot;#fs_filehandle_writefile_data_options&quot;&gt;&lt;code&gt;filehandle.writeFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルハンドルを操作する場合、モードは&lt;a href=&quot;#fs_fspromises_open_path_flags_mode&quot;&gt; &lt;code&gt;fsPromises.open()&lt;/code&gt; で&lt;/a&gt;設定されたものから変更できません。したがって、これは&lt;a href=&quot;#fs_filehandle_writefile_data_options&quot;&gt; &lt;code&gt;filehandle.writeFile()&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="7403bcfa35b1ae51039252b3f7bbba8a1bd6482b" translate="yes" xml:space="preserve">
          <source>When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to &lt;code&gt;setAAD()&lt;/code&gt; via the &lt;code&gt;plaintextLength&lt;/code&gt; option. Many crypto libraries include the authentication tag in the ciphertext, which means that they produce ciphertexts of the length &lt;code&gt;plaintextLength + authTagLength&lt;/code&gt;. Node.js does not include the authentication tag, so the ciphertext length is always &lt;code&gt;plaintextLength&lt;/code&gt;. This is not necessary if no AAD is used.</source>
          <target state="translated">追加の認証済みデータ（AAD）を渡す場合、実際のメッセージの長さ（バイト単位 &lt;code&gt;setAAD()&lt;/code&gt; を &lt;code&gt;plaintextLength&lt;/code&gt; オプションを介してsetAAD（）に渡す必要があります。多くの暗号ライブラリは、暗号文に認証タグを &lt;code&gt;plaintextLength + authTagLength&lt;/code&gt; ます。つまり、plaintextLength + authTagLengthの長さの暗号文を生成します。Node.jsには認証タグが含まれていないため、暗号文の長さは常に &lt;code&gt;plaintextLength&lt;/code&gt; です。AADが使用されていない場合、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="8683bab3670783f3e04b5996df01e0d7dd2896d5" translate="yes" xml:space="preserve">
          <source>When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to &lt;code&gt;setAAD()&lt;/code&gt; via the &lt;code&gt;plaintextLength&lt;/code&gt; option. This is not necessary if no AAD is used.</source>
          <target state="translated">追加の認証済みデータ（AAD）を渡すときは、実際のメッセージの長さ（バイト単位 &lt;code&gt;setAAD()&lt;/code&gt; を &lt;code&gt;plaintextLength&lt;/code&gt; オプションを介してsetAAD（）に渡す必要があります。AADを使用しない場合、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="9ba341ca5199ac44852abeb44a5301af661ece2d" translate="yes" xml:space="preserve">
          <source>When providing properties to the &lt;code&gt;pathObject&lt;/code&gt; remember that there are combinations where one property has priority over another:</source>
          <target state="translated">&lt;code&gt;pathObject&lt;/code&gt; にプロパティを提供する場合、あるプロパティが別のプロパティよりも優先される組み合わせがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0944cac5b42f3c2ff1100fac2f3b7a8f1fc8ea80" translate="yes" xml:space="preserve">
          <source>When running as the server, the socket will be destroyed with an error after &lt;code&gt;handshakeTimeout&lt;/code&gt; timeout.</source>
          <target state="translated">サーバーとして実行している場合、ソケットは &lt;code&gt;handshakeTimeout&lt;/code&gt; タイムアウト後にエラーで破棄されます。</target>
        </trans-unit>
        <trans-unit id="3e15b5e8110d7e4311accf450e570804ba7780a4" translate="yes" xml:space="preserve">
          <source>When sending request through a keep-alive enabled agent, the underlying socket might be reused. But if server closes connection at unfortunate time, client may run into a 'ECONNRESET' error.</source>
          <target state="translated">キープアライブを有効にしたエージェントを使ってリクエストを送信すると、そのソケットが再利用されることがあります。しかし、不運にもサーバが接続を終了した場合、クライアントは 'ECONNNRESET' エラーに陥る可能性があります。</target>
        </trans-unit>
        <trans-unit id="19afa335a5a1a42b34eda8c5c3d35d2ff56880d3" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, emit pending deprecation warnings.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; に設定すると、保留中の廃止警告を発行します。</target>
        </trans-unit>
        <trans-unit id="9967655ab23757c342e087c9abcca7e897cc09b4" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, instructs the module loader to preserve symbolic links when resolving and caching modules.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; に設定すると、モジュールを解決およびキャッシュするときにシンボリックリンクを保持するようにモジュールローダーに指示します。</target>
        </trans-unit>
        <trans-unit id="69eba8f2f8e4e897994fbb45673663b7f28cc8f9" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, process warnings are silenced.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; に設定すると、プロセスの警告が表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="fc9e5b7fcfaf3f43b575085ed7b886c4b43ff254" translate="yes" xml:space="preserve">
          <source>When set, Node.js will begin outputting &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript code coverage&lt;/a&gt; and &lt;a href=&quot;https://sourcemaps.info/spec.html&quot;&gt;Source Map&lt;/a&gt; data to the directory provided as an argument (coverage information is written as JSON to files with a &lt;code&gt;coverage&lt;/code&gt; prefix).</source>
          <target state="translated">設定すると、Node.jsは&lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScriptコードカバレッジ&lt;/a&gt;と&lt;a href=&quot;https://sourcemaps.info/spec.html&quot;&gt;ソースマップ&lt;/a&gt;データを引数として指定されたディレクトリに出力し始めます（カバレッジ情報はJSONとして &lt;code&gt;coverage&lt;/code&gt; プレフィックス付きのファイルに書き込まれます）。</target>
        </trans-unit>
        <trans-unit id="4676881586437aa22ae98370e5573441d068f144" translate="yes" xml:space="preserve">
          <source>When set, Node.js will begin outputting &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript code coverage&lt;/a&gt; to the directory provided as an argument. Coverage is output as an array of &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage&quot;&gt;ScriptCoverage&lt;/a&gt; objects:</source>
          <target state="translated">設定すると、Node.jsは、引数として指定されたディレクトリに&lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScriptコードカバレッジの&lt;/a&gt;出力を開始します。カバレッジは、&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage&quot;&gt;ScriptCoverage&lt;/a&gt;オブジェクトの配列として出力されます。</target>
        </trans-unit>
        <trans-unit id="43bc494caa00b16fbe479ff6c1a8ba8a4a01ffcf" translate="yes" xml:space="preserve">
          <source>When set, a memory file mapping is used to access the file. This flag is available on Windows operating systems only. On other operating systems, this flag is ignored.</source>
          <target state="translated">このフラグが設定されている場合、メモリ・ファイル・マッピングを使用してファイルにアクセスします。このフラグは、Windows オペレーティング・システムでのみ使用可能です。その他のオペレーティングシステムでは、このフラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="e9ad737be96822ad9acfdd2cb175b36332328f41" translate="yes" xml:space="preserve">
          <source>When set, an attempt will be made to minimize caching effects of file I/O.</source>
          <target state="translated">設定すると、ファイルI/Oのキャッシング効果を最小化するように試みます。</target>
        </trans-unit>
        <trans-unit id="c2ae5aecd16350b5fc32d69e0be29e2779f212ba" translate="yes" xml:space="preserve">
          <source>When set, colors will not be used in the REPL.</source>
          <target state="translated">設定されている場合、REPLでは色は使用されません。</target>
        </trans-unit>
        <trans-unit id="8933a68a9c2d796954f82edce5bf021ad21802b1" translate="yes" xml:space="preserve">
          <source>When set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the &lt;code&gt;--redirect-warnings=file&lt;/code&gt; command-line flag.</source>
          <target state="translated">設定すると、プロセス警告がstderrに出力されるのではなく、指定されたファイルに出力されます。ファイルが存在しない場合は作成され、存在する場合は追加されます。警告をファイルに書き込もうとしたときにエラーが発生した場合、警告は代わりにstderrに書き込まれます。これは、 &lt;code&gt;--redirect-warnings=file&lt;/code&gt; コマンドラインフラグを使用することと同じです。</target>
        </trans-unit>
        <trans-unit id="cc0c1ee3850dee15dcc0b864f7be858c91b16927" translate="yes" xml:space="preserve">
          <source>When set, the well known &quot;root&quot; CAs (like VeriSign) will be extended with the extra certificates in &lt;code&gt;file&lt;/code&gt;. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with &lt;a href=&quot;process#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;process.emitWarning()&lt;/code&gt;&lt;/a&gt; if the file is missing or malformed, but any errors are otherwise ignored.</source>
          <target state="translated">設定すると、よく知られている「ルート」CA（VeriSignなど）が &lt;code&gt;file&lt;/code&gt; の追加の証明書で拡張されます。ファイルは、PEM形式の1つ以上の信頼できる証明書で構成される必要があります。ファイルが見つからないか形式が正しくない場合、&lt;a href=&quot;process#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;process.emitWarning()&lt;/code&gt; で&lt;/a&gt;メッセージが（1回）送信されますが、それ以外のエラーは無視されます。</target>
        </trans-unit>
        <trans-unit id="f7c6e4d2978ec1bf438db14a2c184e3b7c1012e0" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;byteOffset&lt;/code&gt; in &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; or sometimes when allocating a buffer smaller than &lt;code&gt;Buffer.poolSize&lt;/code&gt; the buffer doesn't start from a zero offset on the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">設定時 &lt;code&gt;byteOffset&lt;/code&gt; で &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; よりも小さいバッファ割り当てる際に時々または &lt;code&gt;Buffer.poolSize&lt;/code&gt; バッファは、根底にオフセットがゼロから開始しない &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f7cfcbc6e6fdd528d5cb04ee742b42d07cf59f4" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;byteOffset&lt;/code&gt; in &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt;, or sometimes when allocating a &lt;code&gt;Buffer&lt;/code&gt; smaller than &lt;code&gt;Buffer.poolSize&lt;/code&gt;, the buffer does not start from a zero offset on the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">設定時 &lt;code&gt;byteOffset&lt;/code&gt; で &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; 割り当てるとき時々 、又は &lt;code&gt;Buffer&lt;/code&gt; より小さい &lt;code&gt;Buffer.poolSize&lt;/code&gt; を、緩衝液は、根底にオフセットゼロから開始しない &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="085c71302b8f2176512c80177d18f67801dc5d7e" translate="yes" xml:space="preserve">
          <source>When setting the priority for an HTTP/2 stream, the stream may be marked as a dependency for a parent stream. This error code is used when an attempt is made to mark a stream and dependent of itself.</source>
          <target state="translated">HTTP/2 ストリームの優先度を設定すると、ストリームが親ストリームの依存関係としてマークされることがあります。このエラーコードは、ストリームとそれ自身の依存関係をマークしようとしたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="a923dc95c051ae3fd873a26d6090eee9433803c1" translate="yes" xml:space="preserve">
          <source>When sharing a UDP socket across multiple &lt;code&gt;cluster&lt;/code&gt; workers, the &lt;code&gt;socket.addMembership()&lt;/code&gt; function must be called only once or an &lt;code&gt;EADDRINUSE&lt;/code&gt; error will occur:</source>
          <target state="translated">複数の &lt;code&gt;cluster&lt;/code&gt; ワーカー間でUDPソケットを共有する場合、 &lt;code&gt;socket.addMembership()&lt;/code&gt; 関数は1回だけ呼び出す必要があります。呼び出さないと、 &lt;code&gt;EADDRINUSE&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c4b3b4a6b2873bb41380ccce7474b29f9a36d610" translate="yes" xml:space="preserve">
          <source>When string data is stored in or extracted out of a &lt;code&gt;Buffer&lt;/code&gt; instance, a character encoding may be specified.</source>
          <target state="translated">文字列データが &lt;code&gt;Buffer&lt;/code&gt; インスタンスに格納または抽出される場合、文字エンコーディングを指定できます。</target>
        </trans-unit>
        <trans-unit id="a0a3c28f7d09722c63135541dd0b7a96ff34d1c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;'clientError'&lt;/code&gt; event occurs, there is no &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;response&lt;/code&gt; object, so any HTTP response sent, including response headers and payload, &lt;em&gt;must&lt;/em&gt; be written directly to the &lt;code&gt;socket&lt;/code&gt; object. Care must be taken to ensure the response is a properly formatted HTTP response message.</source>
          <target state="translated">場合 &lt;code&gt;'clientError'&lt;/code&gt; イベントが発生し、何も存在しない &lt;code&gt;request&lt;/code&gt; または &lt;code&gt;response&lt;/code&gt; オブジェクトは、任意のHTTP応答が応答ヘッダーとペイロードを含む、送信されたように、&lt;em&gt;しなければならない&lt;/em&gt;に直接書き込まれる &lt;code&gt;socket&lt;/code&gt; オブジェクト。応答が適切にフォーマットされたHTTP応答メッセージになるように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="46722ab714bf122284c53952ac05784c4ed481c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;'exit'&lt;/code&gt; event is triggered, child process stdio streams might still be open.</source>
          <target state="translated">ときに &lt;code&gt;'exit'&lt;/code&gt; イベントがトリガされ、子プロセスの標準入出力ストリームはまだ開いている可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae71290bea971b38db44d801b8804d4b598df24d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag is included, both the &lt;code&gt;commonjs&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; mode use the new experimental JSON loader. The imported JSON only exposes a &lt;code&gt;default&lt;/code&gt;. There is no support for named exports. A cache entry is created in the CommonJS cache to avoid duplication. The same object is returned in CommonJS if the JSON module has already been imported from the same path.</source>
          <target state="translated">場合 &lt;code&gt;--experimental-json-modules&lt;/code&gt; フラグが含まれ、両方さ &lt;code&gt;commonjs&lt;/code&gt; と &lt;code&gt;module&lt;/code&gt; のモードは、新しい実験JSONローダを使用します。インポートされたJSONは &lt;code&gt;default&lt;/code&gt; のみを公開します。名前付きエクスポートはサポートされていません。重複を避けるために、CommonJSキャッシュにキャッシュエントリが作成されます。JSONモジュールがすでに同じパスからインポートされている場合、CommonJSで同じオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="9963a38aa2feb80593cf79934ad0090b99243136" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;EventEmitter&lt;/code&gt; object emits an event, all of the functions attached to that specific event are called &lt;em&gt;synchronously&lt;/em&gt;. Any values returned by the called listeners are &lt;em&gt;ignored&lt;/em&gt; and discarded.</source>
          <target state="translated">場合 &lt;code&gt;EventEmitter&lt;/code&gt; オブジェクトがイベントを放出する、その特定のイベントにアタッチ機能の全てが呼び出される&lt;em&gt;同期&lt;/em&gt;。呼び出されたリスナーによって返された値はすべて&lt;em&gt;無視され&lt;/em&gt;、破棄されます。</target>
        </trans-unit>
        <trans-unit id="426682a4550b69dd0a79aa54c6bda8543efe9bc9" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;EventEmitter&lt;/code&gt; object emits an event, all of the functions attached to that specific event are called &lt;em&gt;synchronously&lt;/em&gt;. Any values returned by the called listeners are &lt;em&gt;ignored&lt;/em&gt; and will be discarded.</source>
          <target state="translated">場合 &lt;code&gt;EventEmitter&lt;/code&gt; オブジェクトがイベントを放出する、その特定のイベントにアタッチ機能の全てが呼び出される&lt;em&gt;同期&lt;/em&gt;。呼び出されたリスナーから返された値はすべて&lt;em&gt;無視され&lt;/em&gt;、破棄されます。</target>
        </trans-unit>
        <trans-unit id="9335ae09cb81077658802cf50fdbfc1ca1ad08cf" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Http2Stream&lt;/code&gt; instance is destroyed, the &lt;code&gt;'close'&lt;/code&gt; event will be emitted. Because &lt;code&gt;Http2Stream&lt;/code&gt; is an instance of &lt;code&gt;stream.Duplex&lt;/code&gt;, the &lt;code&gt;'end'&lt;/code&gt; event will also be emitted if the stream data is currently flowing. The &lt;code&gt;'error'&lt;/code&gt; event may also be emitted if &lt;code&gt;http2stream.destroy()&lt;/code&gt; was called with an &lt;code&gt;Error&lt;/code&gt; passed as the first argument.</source>
          <target state="translated">場合 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが破棄され、 &lt;code&gt;'close'&lt;/code&gt; イベントが放出されます。 &lt;code&gt;Http2Stream&lt;/code&gt; はstream.Duplexのインスタンスであるため、ストリームデータが現在流れている場合は、 &lt;code&gt;'end'&lt;/code&gt; イベントも &lt;code&gt;stream.Duplex&lt;/code&gt; ます。最初の引数として &lt;code&gt;Error&lt;/code&gt; が渡されて &lt;code&gt;http2stream.destroy()&lt;/code&gt; が呼び出された場合も、 &lt;code&gt;'error'&lt;/code&gt; イベントが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="67505530725409fba9c4758f50e5cd65e987bcc3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Readable&lt;/code&gt; is operating in flowing mode, the data added with &lt;code&gt;readable.push()&lt;/code&gt; will be delivered by emitting a &lt;code&gt;'data'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; がフローモードで動作している場合、 &lt;code&gt;readable.push()&lt;/code&gt; で追加された &lt;code&gt;'data'&lt;/code&gt; 、「data」イベントを発行して配信されます。</target>
        </trans-unit>
        <trans-unit id="c739d18f886c043c152b5e0e4e291d65429b3771" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Readable&lt;/code&gt; is operating in paused mode, the data added with &lt;code&gt;readable.push()&lt;/code&gt; can be read out by calling the &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt; method when the &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">場合 &lt;code&gt;Readable&lt;/code&gt; 一時停止モードで動作して、データを用いて添加し &lt;code&gt;readable.push()&lt;/code&gt; を呼び出すことによって読み出すことができる&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;readable.read()&lt;/code&gt; &lt;/a&gt;方法&lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt;イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="c93b11ec833bbc0f705edd63f5118a1273fee958" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;module.exports&lt;/code&gt; property is being completely replaced by a new object, it is common to also reassign &lt;code&gt;exports&lt;/code&gt;:</source>
          <target state="translated">とき &lt;code&gt;module.exports&lt;/code&gt; はのプロパティは、完全に新しいオブジェクトに置き換えられている、それはまた、再割り当てすることが一般的です &lt;code&gt;exports&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="eb83f1239982a95be7fd015fe27103105cb812e7" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option is set, the &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted immediately after queuing the last chunk of payload data to be sent. The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method can then be called to send trailing headers to the peer.</source>
          <target state="translated">とき &lt;code&gt;options.waitForTrailers&lt;/code&gt; のオプションが設定されている、 &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが送信されるペイロードデータの最後のチャンクをキューイングした直後に放出されます。次に、 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; メソッドを呼び出して、トレーリングヘッダーをピアに送信できます。</target>
        </trans-unit>
        <trans-unit id="0ffadd51efd23bab12b01de439947d260bc199f3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option is set, the &lt;code&gt;'wantTrailers'&lt;/code&gt; event will be emitted immediately after queuing the last chunk of payload data to be sent. The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method can then be used to sent trailing header fields to the peer.</source>
          <target state="translated">とき &lt;code&gt;options.waitForTrailers&lt;/code&gt; のオプションが設定されている、 &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが送信されるペイロードデータの最後のチャンクをキューイングした直後に放出されます。次に、 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; メソッドを使用して、トレーリングヘッダーフィールドをピアに送信できます。</target>
        </trans-unit>
        <trans-unit id="c5c32a70dad0d7767f357bc2634db83528bf93d5" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;path&lt;/code&gt; is a directory, the behavior of &lt;code&gt;fsPromises.readFile()&lt;/code&gt; is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; がディレクトリの場合、 &lt;code&gt;fsPromises.readFile()&lt;/code&gt; の動作はプラットフォーム固有です。macOS、Linux、およびWindowsでは、promiseはエラーで拒否されます。FreeBSDでは、ディレクトリの内容の表現が返されます。</target>
        </trans-unit>
        <trans-unit id="0620756c2aebd9c4bc3154b06ffe2566efb57b85" translate="yes" xml:space="preserve">
          <source>When the child process is a Node.js instance (e.g. spawned using &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;process.disconnect()&lt;/code&gt; method can be invoked within the child process to close the IPC channel as well.</source>
          <target state="translated">子プロセスがNode.jsインスタンスである場合（たとえば、&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;を使用して生成された場合）、 &lt;code&gt;process.disconnect()&lt;/code&gt; メソッドを子プロセス内で呼び出して、IPCチャネルを閉じることもできます。</target>
        </trans-unit>
        <trans-unit id="25fac66347fd0ed458017f12238e9c5ff50ec269" translate="yes" xml:space="preserve">
          <source>When the code in the &lt;code&gt;foo&lt;/code&gt; package does &lt;code&gt;require('bar')&lt;/code&gt;, it will get the version that is symlinked into &lt;code&gt;/usr/lib/node/foo/1.2.3/node_modules/bar&lt;/code&gt;. Then, when the code in the &lt;code&gt;bar&lt;/code&gt; package calls &lt;code&gt;require('quux')&lt;/code&gt;, it'll get the version that is symlinked into &lt;code&gt;/usr/lib/node/bar/4.3.2/node_modules/quux&lt;/code&gt;.</source>
          <target state="translated">内のコードとき &lt;code&gt;foo&lt;/code&gt; パッケージがない &lt;code&gt;require('bar')&lt;/code&gt; 、それがにシンボリックリンクされているバージョンを取得します &lt;code&gt;/usr/lib/node/foo/1.2.3/node_modules/bar&lt;/code&gt; を。内のコードときに、 &lt;code&gt;bar&lt;/code&gt; パッケージの呼び出しが &lt;code&gt;require('quux')&lt;/code&gt; 、それがにシンボリックリンクされているバージョン取得します &lt;code&gt;/usr/lib/node/bar/4.3.2/node_modules/quux&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cd46976fb0354327dc13a6ec7685b60dc19749f9" translate="yes" xml:space="preserve">
          <source>When the connection is established, a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted on the returned socket. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">接続が確立されると、返されたソケットで&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントが発生します。最後のパラメーター &lt;code&gt;connectListener&lt;/code&gt; が指定されている場合は、&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントのリスナーとして&lt;strong&gt;1回&lt;/strong&gt;追加されます。</target>
        </trans-unit>
        <trans-unit id="cfa09effef8afe3e66a0a81273124da1b75d2f40" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;vm.createContext()&lt;/code&gt; is called, the &lt;code&gt;contextObject&lt;/code&gt; argument (or a newly-created object if &lt;code&gt;contextObject&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;) is associated internally with a new instance of a V8 Context. This V8 Context provides the &lt;code&gt;code&lt;/code&gt; run using the &lt;code&gt;vm&lt;/code&gt; module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the &lt;code&gt;contextObject&lt;/code&gt; is what this document refers to as &quot;contextifying&quot; the object.</source>
          <target state="translated">メソッド &lt;code&gt;vm.createContext()&lt;/code&gt; が呼び出されると、 &lt;code&gt;contextObject&lt;/code&gt; 引数（または &lt;code&gt;contextObject&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; 場合は新しく作成されたオブジェクト）がV8コンテキストの新しいインスタンスに内部的に関連付けられます。このV8コンテキストは、 &lt;code&gt;vm&lt;/code&gt; モジュールのメソッドを使用して実行される &lt;code&gt;code&lt;/code&gt; を、それが動作できる分離されたグローバル環境で提供します。 V8コンテキストを作成し、それを &lt;code&gt;contextObject&lt;/code&gt; に関連付けるプロセスは、このドキュメントでオブジェクトの「コンテキスト化」と呼ばれるものです。</target>
        </trans-unit>
        <trans-unit id="729d92164779ddba59574378cc26cf3a6d136c2c" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;vm.createContext()&lt;/code&gt; is called, the &lt;code&gt;sandbox&lt;/code&gt; object that is passed in (or a newly created object if &lt;code&gt;sandbox&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;) is associated internally with a new instance of a V8 Context. This V8 Context provides the &lt;code&gt;code&lt;/code&gt; run using the &lt;code&gt;vm&lt;/code&gt; module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the &lt;code&gt;sandbox&lt;/code&gt; object is what this document refers to as &quot;contextifying&quot; the &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="translated">メソッド &lt;code&gt;vm.createContext()&lt;/code&gt; が呼び出されると、渡された &lt;code&gt;sandbox&lt;/code&gt; オブジェクト（または &lt;code&gt;sandbox&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; 場合は新しく作成されたオブジェクト）がV8コンテキストの新しいインスタンスに内部的に関連付けられます。このV8コンテキストは、 &lt;code&gt;vm&lt;/code&gt; モジュールのメソッドを使用して実行される &lt;code&gt;code&lt;/code&gt; と、その内部で動作する分離されたグローバル環境を提供します。 V8コンテキストを作成し、それを関連付けるプロセス &lt;code&gt;sandbox&lt;/code&gt; オブジェクトは、この文書は「contextifying」と呼んで何である &lt;code&gt;sandbox&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01caadbe64330cc1819e53d479c1f2414ca0dd3c" translate="yes" xml:space="preserve">
          <source>When the path is a directory, the behavior of &lt;code&gt;fs.readFile()&lt;/code&gt; and &lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync()&lt;/code&gt;&lt;/a&gt; is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned.</source>
          <target state="translated">パスがディレクトリの場合、 &lt;code&gt;fs.readFile()&lt;/code&gt; および&lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt; &lt;code&gt;fs.readFileSync()&lt;/code&gt; の動作&lt;/a&gt;はプラットフォーム固有です。macOS、Linux、およびWindowsでは、エラーが返されます。FreeBSDでは、ディレクトリの内容の表現が返されます。</target>
        </trans-unit>
        <trans-unit id="eba9274eddef14d7dda14e216ded1ef3a82c17c6" translate="yes" xml:space="preserve">
          <source>When the program is resumed using &lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt;&lt;code&gt;fg(1p)&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;'pause'&lt;/code&gt; and &lt;code&gt;'SIGCONT'&lt;/code&gt; events will be emitted. These can be used to resume the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="translated">プログラムが&lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt; &lt;code&gt;fg(1p)&lt;/code&gt; &lt;/a&gt;を使用して再開されると、 &lt;code&gt;'pause'&lt;/code&gt; および &lt;code&gt;'SIGCONT'&lt;/code&gt; イベントが発生します。これらは、 &lt;code&gt;input&lt;/code&gt; ストリームを再開するために使用できます。</target>
        </trans-unit>
        <trans-unit id="973f019c301a2f10546fdf95359798a8afd4304b" translate="yes" xml:space="preserve">
          <source>When there are circular &lt;code&gt;require()&lt;/code&gt; calls, a module might not have finished executing when it is returned.</source>
          <target state="translated">循環 &lt;code&gt;require()&lt;/code&gt; 呼び出しがある場合、返されたときにモジュールの実行が完了していない可能性があります。</target>
        </trans-unit>
        <trans-unit id="a83856f569bf73cddb634b7c469e9e76c59c0d43" translate="yes" xml:space="preserve">
          <source>When these methods are invoked, the &lt;code&gt;data&lt;/code&gt; parameter passed will be the addon-provided &lt;code&gt;void*&lt;/code&gt; data that was passed into the &lt;code&gt;napi_create_async_work&lt;/code&gt; call.</source>
          <target state="translated">これらのメソッドが呼び出されると、渡される &lt;code&gt;data&lt;/code&gt; パラメーターは、 &lt;code&gt;napi_create_async_work&lt;/code&gt; 呼び出しに渡されたアドオン提供の &lt;code&gt;void*&lt;/code&gt; データになります。</target>
        </trans-unit>
        <trans-unit id="161d84962881869453298b631777f71cfe4e6b80" translate="yes" xml:space="preserve">
          <source>When they are disconnected all internal handles will be closed, allowing the master process to die gracefully if no other event is waiting.</source>
          <target state="translated">それらが切断されると、すべての内部ハンドルが閉じられ、他のイベントが待機していない場合には、マスタープロセスは優雅に終了することができます。</target>
        </trans-unit>
        <trans-unit id="848bbfa33309d052a04b6c8cbbcac51e750f16d7" translate="yes" xml:space="preserve">
          <source>When this code is executed, the global &lt;code&gt;'m'&lt;/code&gt; variable can be modified but then reset to its initial value using the &lt;code&gt;.clear&lt;/code&gt; command:</source>
          <target state="translated">このコードを実行すると、グローバル &lt;code&gt;'m'&lt;/code&gt; 変数を変更できますが、 &lt;code&gt;.clear&lt;/code&gt; コマンドを使用して初期値にリセットできます。</target>
        </trans-unit>
        <trans-unit id="da17565ee00221d09a97209ab1ae2c18fb43a00e" translate="yes" xml:space="preserve">
          <source>When this event is emitted and handled, the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event will not be emitted.</source>
          <target state="translated">このイベントが発行されて処理されると、&lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="1d77c2e28b5e02c804db51a74809906188330f9e" translate="yes" xml:space="preserve">
          <source>When this event is emitted and handled, the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event will not be emitted.</source>
          <target state="translated">このイベントが発行されて処理されると、&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="c4bcc6914d3f458464403894a448ce8d2cfc0398" translate="yes" xml:space="preserve">
          <source>When this function is used, no &lt;code&gt;'message'&lt;/code&gt; event will be emitted and the &lt;code&gt;onmessage&lt;/code&gt; listener will not be invoked.</source>
          <target state="translated">この関数を使用すると、 &lt;code&gt;'message'&lt;/code&gt; イベントは &lt;code&gt;onmessage&lt;/code&gt; されず、onmessageリスナーは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="daaa6a63bd85db242fbd1af931f53b55126de0a6" translate="yes" xml:space="preserve">
          <source>When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.</source>
          <target state="translated">true の場合、Date ヘッダがまだ存在しない場合、Date ヘッダが自動的に生成され、レスポンスで送信されます。デフォルトは true です。</target>
        </trans-unit>
        <trans-unit id="73bbf108c7a0af560ba18bfbdfb275fa0bd25416" translate="yes" xml:space="preserve">
          <source>When used in another application:</source>
          <target state="translated">他のアプリケーションで使用する場合。</target>
        </trans-unit>
        <trans-unit id="7b3fa09a96ecdc067355bcc942d3a49a1906efe1" translate="yes" xml:space="preserve">
          <source>When used, the &lt;code&gt;Http2Stream&lt;/code&gt; object's &lt;code&gt;Duplex&lt;/code&gt; interface will be closed automatically.</source>
          <target state="translated">使用すると、 &lt;code&gt;Http2Stream&lt;/code&gt; オブジェクトの &lt;code&gt;Duplex&lt;/code&gt; インターフェイスは自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="a375a2e214a043804716201bc2ddc239ccd3b5de" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; to allocate new &lt;code&gt;Buffer&lt;/code&gt; instances, allocations under 4KB are sliced from a single pre-allocated &lt;code&gt;Buffer&lt;/code&gt;. This allows applications to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances. This approach improves both performance and memory usage by eliminating the need to track and clean up as many persistent objects.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;Buffer&lt;/code&gt; インスタンスを割り当てる場合、4KB未満の割り当ては、事前に割り当てられた単一の &lt;code&gt;Buffer&lt;/code&gt; からスライスされます。これにより、アプリケーションは、個別に割り当てられた多数の &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成するガベージコレクションのオーバーヘッドを回避できます。このアプローチでは、多くの永続オブジェクトを追跡してクリーンアップする必要がなくなるため、パフォーマンスとメモリ使用量の両方が向上します。</target>
        </trans-unit>
        <trans-unit id="d8af369a122ff8d89a82762dba5d82286fd5b88b" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; to allocate new &lt;code&gt;Buffer&lt;/code&gt; instances, allocations under 4KB are sliced from a single pre-allocated &lt;code&gt;Buffer&lt;/code&gt;. This allows applications to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances. This approach improves both performance and memory usage by eliminating the need to track and clean up as many individual &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;Buffer&lt;/code&gt; インスタンスを割り当てる場合、4KB未満の割り当ては、事前に割り当てられた単一の &lt;code&gt;Buffer&lt;/code&gt; からスライスされます。これにより、アプリケーションは、個別に割り当てられた多数の &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成することによるガベージコレクションのオーバーヘッドを回避できます。このアプローチでは、個々の &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトをできるだけ多く追跡してクリーンアップする必要がなくなるため、パフォーマンスとメモリ使用量の両方が向上します。</target>
        </trans-unit>
        <trans-unit id="bb8a06fc84bb54aebb3f5d34322924c7994f1112" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;writable.cork()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;writable.uncork()&lt;/code&gt; to manage the buffering of writes to a stream, it is recommended that calls to &lt;code&gt;writable.uncork()&lt;/code&gt; be deferred using &lt;code&gt;process.nextTick()&lt;/code&gt;. Doing so allows batching of all &lt;code&gt;writable.write()&lt;/code&gt; calls that occur within a given Node.js event loop phase.</source>
          <target state="translated">&lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;writable.cork()&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;writable.uncork()&lt;/code&gt; を使用してストリームへの書き込みのバッファリングを管理する場合は、 &lt;code&gt;writable.uncork()&lt;/code&gt; の呼び出しを &lt;code&gt;process.nextTick()&lt;/code&gt; を使用して延期することをお勧めします。これにより、特定のNode.jsイベントループフェーズ内で発生するすべての &lt;code&gt;writable.write()&lt;/code&gt; 呼び出しのバッチ処理が可能になります。</target>
        </trans-unit>
        <trans-unit id="f1590b6db3d610ebd53a04e717ee50b6883f13c8" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, &lt;code&gt;rss&lt;/code&gt; will be a value that is valid for the entire process, while the other fields will only refer to the current thread.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドを使用する場合、 &lt;code&gt;rss&lt;/code&gt; はプロセス全体に有効な値になりますが、他のフィールドは現在のスレッドのみを参照します。</target>
        </trans-unit>
        <trans-unit id="16b462e5d0419f550bd45208e292156c7a67eb63" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;http2session.settings()&lt;/code&gt; to submit new settings, the modified settings do not take effect until the &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;http2session.settings()&lt;/code&gt; を使用して新しい設定を送信する場合、変更された設定は &lt;code&gt;'localSettings'&lt;/code&gt; イベントが発行されるまで有効になりません。</target>
        </trans-unit>
        <trans-unit id="edaaf463c08a1a1d1a15adb2bc0e6d02fbfcb5d4" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;node-addon-api&lt;/code&gt; instead of the C APIs, start with the API &lt;a href=&quot;https://github.com/nodejs/node-addon-api#api-documentation&quot;&gt;docs&lt;/a&gt; for &lt;code&gt;node-addon-api&lt;/code&gt;.</source>
          <target state="translated">使用する場合 &lt;code&gt;node-addon-api&lt;/code&gt; の代わりにCのAPIには、APIで始まる&lt;a href=&quot;https://github.com/nodejs/node-addon-api#api-documentation&quot;&gt;ドキュメント&lt;/a&gt;のための &lt;code&gt;node-addon-api&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbf8c05902e863e4e9f097e100e92d75ee31fd12" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;npm install&lt;/code&gt; to install a Node.js Addon, npm uses its own bundled version of &lt;code&gt;node-gyp&lt;/code&gt; to perform this same set of actions, generating a compiled version of the Addon for the user's platform on demand.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; を使用してNode.jsアドオンをインストールする場合、npmは独自のバンドルバージョンの &lt;code&gt;node-gyp&lt;/code&gt; を使用してこれと同じ一連のアクションを実行し、ユーザーのプラットフォーム用のコンパイルされたバージョンのアドオンをオンデマンドで生成します。</target>
        </trans-unit>
        <trans-unit id="f9c3b73b2354de84a2f20da8c37cc1f497ac6163" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;npm install&lt;/code&gt; to install a Node.js addon, npm uses its own bundled version of &lt;code&gt;node-gyp&lt;/code&gt; to perform this same set of actions, generating a compiled version of the addon for the user's platform on demand.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; を使用してNode.jsアドオンをインストールする場合、npmは独自のバンドルバージョンの &lt;code&gt;node-gyp&lt;/code&gt; を使用してこれと同じ一連のアクションを実行し、ユーザーのプラットフォーム用にコンパイルされたバージョンのアドオンをオンデマンドで生成します。</target>
        </trans-unit>
        <trans-unit id="889f878c7063918c8dc415e6b81305b1359bba6a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;require()&lt;/code&gt; all resources involved in loading are checked for integrity if a policy manifest has been specified. If a resource does not match the integrity listed in the manifest, an error will be thrown.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; を使用すると、ポリシーマニフェストが指定されている場合、ロードに関連するすべてのリソースの整合性がチェックされます。リソースがマニフェストにリストされている整合性と一致しない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="32dbee3a5d5832dcbb1cd50fd17f7385cbffaaef" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;cipher.setAAD()&lt;/code&gt; method sets the value used for the &lt;em&gt;additional authenticated data&lt;/em&gt; (AAD) input parameter.</source>
          <target state="translated">認証された暗号化モードを使用する場合（ &lt;code&gt;GCM&lt;/code&gt; 、 &lt;code&gt;CCM&lt;/code&gt; および &lt;code&gt;OCB&lt;/code&gt; は現在サポートされています &lt;code&gt;cipher.setAAD()&lt;/code&gt; 、cipher.setAAD（）メソッドは、&lt;em&gt;追加の認証済みデータ&lt;/em&gt;（AAD）入力パラメーターに使用される値を設定します。</target>
        </trans-unit>
        <trans-unit id="bcdf8890c4f9a7a03bba177c0cf2be932cdf094c" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;decipher.setAAD()&lt;/code&gt; method sets the value used for the &lt;em&gt;additional authenticated data&lt;/em&gt; (AAD) input parameter.</source>
          <target state="translated">認証された暗号化モードを使用する場合（ &lt;code&gt;GCM&lt;/code&gt; 、 &lt;code&gt;CCM&lt;/code&gt; および &lt;code&gt;OCB&lt;/code&gt; は現在サポートされています &lt;code&gt;decipher.setAAD()&lt;/code&gt; 、decipher.setAAD（）メソッドは、&lt;em&gt;追加の認証済みデータ&lt;/em&gt;（AAD）入力パラメーターに使用される値を設定します。</target>
        </trans-unit>
        <trans-unit id="0b5becc7fa138f3deaf68c544742ebc6637e666f" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method is used to pass in the received &lt;em&gt;authentication tag&lt;/em&gt;. If no tag is provided, or if the cipher text has been tampered with, &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will throw, indicating that the cipher text should be discarded due to failed authentication. If the tag length is invalid according to &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt; or does not match the value of the &lt;code&gt;authTagLength&lt;/code&gt; option, &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; will throw an error.</source>
          <target state="translated">認証された暗号化モードを使用する場合（ &lt;code&gt;GCM&lt;/code&gt; 、 &lt;code&gt;CCM&lt;/code&gt; および &lt;code&gt;OCB&lt;/code&gt; は現在サポートされています）、 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; メソッドを使用して、受信した&lt;em&gt;認証タグ&lt;/em&gt;を渡します。タグが提供されていない場合、または暗号テキストが改ざんされている場合、&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;がスローされ、認証の失敗により暗号テキストが破棄されるべきであることを示します。&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;に従ってタグの長さが無効であるか、 &lt;code&gt;authTagLength&lt;/code&gt; オプションの値と一致しない場合、 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="e8abded618bf1e61374edf617c0e50239f5e735f" translate="yes" xml:space="preserve">
          <source>When using an older Node.js library that emits &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events and has a &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method that is advisory only, the &lt;code&gt;readable.wrap()&lt;/code&gt; method can be used to create a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream that uses the old stream as its data source.</source>
          <target state="translated">放射することを古いNode.jsのライブラリを使用する場合は&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;のイベントとあり&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt;唯一の助言である方法を、 &lt;code&gt;readable.wrap()&lt;/code&gt; メソッドを作成するために使用することができる&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;そのよう古いストリームを使用してストリームを情報源。</target>
        </trans-unit>
        <trans-unit id="d4a8a76000e40163d6b78b5788dc252982989de8" translate="yes" xml:space="preserve">
          <source>When using block encryption algorithms, the &lt;code&gt;Cipher&lt;/code&gt; class will automatically add padding to the input data to the appropriate block size. To disable the default padding call &lt;code&gt;cipher.setAutoPadding(false)&lt;/code&gt;.</source>
          <target state="translated">ブロック暗号化アルゴリズムを使用する場合、 &lt;code&gt;Cipher&lt;/code&gt; クラスは入力データに適切なブロックサイズになるようにパディングを自動的に追加します。デフォルトのパディングを無効にするには、 &lt;code&gt;cipher.setAutoPadding(false)&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6bde8404bcfba13f7fe07b88c2ce9708a51b5344" translate="yes" xml:space="preserve">
          <source>When using either &lt;a href=&quot;#vm_script_runinthiscontext_options&quot;&gt;&lt;code&gt;script.runInThisContext()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt;&lt;code&gt;vm.runInThisContext()&lt;/code&gt;&lt;/a&gt;, the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope.</source>
          <target state="translated">いずれかを使用した場合に&lt;a href=&quot;#vm_script_runinthiscontext_options&quot;&gt; &lt;code&gt;script.runInThisContext()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt; &lt;code&gt;vm.runInThisContext()&lt;/code&gt; &lt;/a&gt;、コードは、現在のV8グローバルコンテキスト内で実行されます。このVMコンテキストに渡されるコードには、独自の分離スコープがあります。</target>
        </trans-unit>
        <trans-unit id="e942021306a7b23d251e9b0a7a27441e49416042" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</source>
          <target state="translated">暗黙的なヘッダーを使用する場合（&lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出さない場合）、このプロパティは、ヘッダーがフラッシュされたときにクライアントに送信されるステータスコードを制御します。</target>
        </trans-unit>
        <trans-unit id="60893816080aba27da8d4e6ee7f959a8e20d2f06" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</source>
          <target state="translated">暗黙的なヘッダーを使用する場合（&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出さない場合）、このプロパティは、ヘッダーがフラッシュされたときにクライアントに送信されるステータスコードを制御します。</target>
        </trans-unit>
        <trans-unit id="1e3f4c4e721d306fd7c7d7b456a5392ba5e3af47" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status message that will be sent to the client when the headers get flushed. If this is left as &lt;code&gt;undefined&lt;/code&gt; then the standard message for the status code will be used.</source>
          <target state="translated">暗黙的なヘッダーを使用する場合（&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出さない場合）、このプロパティは、ヘッダーがフラッシュされたときにクライアントに送信されるステータスメッセージを制御します。これを &lt;code&gt;undefined&lt;/code&gt; にすると、ステータスコードの標準メッセージが使用されます。</target>
        </trans-unit>
        <trans-unit id="0d7fc4558703896b0eddb79f45cb41e05e1ec2cd" translate="yes" xml:space="preserve">
          <source>When using raw numbers where file modes are expected, any value larger than &lt;code&gt;0o777&lt;/code&gt; may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like &lt;code&gt;S_ISVTX&lt;/code&gt;, &lt;code&gt;S_ISGID&lt;/code&gt; or &lt;code&gt;S_ISUID&lt;/code&gt; are not exposed in &lt;code&gt;fs.constants&lt;/code&gt;.</source>
          <target state="translated">ファイルモードが予想される生の数値を使用する場合、 &lt;code&gt;0o777&lt;/code&gt; より大きい値を使用すると、一貫した動作がサポートされていないプラットフォーム固有の動作が発生する可能性があります。そのためのような定数 &lt;code&gt;S_ISVTX&lt;/code&gt; 、 &lt;code&gt;S_ISGID&lt;/code&gt; または &lt;code&gt;S_ISUID&lt;/code&gt; はで公開されていない &lt;code&gt;fs.constants&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="986cd8268880cef740911a0c55d562f7c09c1379" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;detached&lt;/code&gt; option to start a long-running process, the process will not stay running in the background after the parent exits unless it is provided with a &lt;code&gt;stdio&lt;/code&gt; configuration that is not connected to the parent. If the parent's &lt;code&gt;stdio&lt;/code&gt; is inherited, the child will remain attached to the controlling terminal.</source>
          <target state="translated">&lt;code&gt;detached&lt;/code&gt; オプションを使用して長時間実行プロセスを開始する場合、親に接続されていない &lt;code&gt;stdio&lt;/code&gt; 構成が提供されていない限り、親の終了後、プロセスはバックグラウンドで実行されたままにはなりません。親の &lt;code&gt;stdio&lt;/code&gt; が継承される場合、子は制御端末に接続されたままになります。</target>
        </trans-unit>
        <trans-unit id="ae4a9b10065ee31ea508871d338d7436779cee7c" translate="yes" xml:space="preserve">
          <source>When writing to a writable stream from an async iterator, ensure correct handling of backpressure and errors. &lt;a href=&quot;#stream_stream_pipeline_source_transforms_destination_callback&quot;&gt;&lt;code&gt;stream.pipeline()&lt;/code&gt;&lt;/a&gt; abstracts away the handling of backpressure and backpressure-related errors:</source>
          <target state="translated">非同期イテレータから書き込み可能なストリームに書き込むときは、バックプレッシャとエラーを正しく処理するようにしてください。&lt;a href=&quot;#stream_stream_pipeline_source_transforms_destination_callback&quot;&gt; &lt;code&gt;stream.pipeline()&lt;/code&gt; は、バックプレッシャおよびバックプレッシャ&lt;/a&gt;関連のエラーの処理を抽象化します。</target>
        </trans-unit>
        <trans-unit id="c120d35e20c3a52de19e7e178e265a55a8badd2d" translate="yes" xml:space="preserve">
          <source>Whenever an HTTP/2 &lt;code&gt;SETTINGS&lt;/code&gt; frame is sent to a connected peer, the peer is required to send an acknowledgment that it has received and applied the new &lt;code&gt;SETTINGS&lt;/code&gt;. By default, a maximum number of unacknowledged &lt;code&gt;SETTINGS&lt;/code&gt; frames may be sent at any given time. This error code is used when that limit has been reached.</source>
          <target state="translated">接続されたピアにHTTP / 2 &lt;code&gt;SETTINGS&lt;/code&gt; フレームが送信されるたびに、ピアは新しい &lt;code&gt;SETTINGS&lt;/code&gt; を受信して適用したことの確認を送信する必要があります。デフォルトでは、最大数の未確認の &lt;code&gt;SETTINGS&lt;/code&gt; フレームをいつでも送信できます。このエラーコードは、その制限に達したときに使用されます。</target>
        </trans-unit>
        <trans-unit id="dcc1f2aed891a178fc6f056739700967c873c616" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the &lt;a href=&quot;#assert_strict_assertion_mode&quot;&gt;strict assertion mode&lt;/a&gt; instead. Otherwise, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; may cause surprising results. This is especially true for &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;, where the comparison rules are lax:</source>
          <target state="translated">可能な限り、代わりに&lt;a href=&quot;#assert_strict_assertion_mode&quot;&gt;厳密なアサーションモードを&lt;/a&gt;使用してください。そうしないと、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象的な等式の比較&lt;/a&gt;によって驚くべき結果が生じる可能性があります。これは特に&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; に&lt;/a&gt;当てはまります。ここで、比較ルールは緩いです。</target>
        </trans-unit>
        <trans-unit id="de56f8a5e50431418240afbb2b02e04f59424ed0" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the &lt;a href=&quot;#assert_strict_mode&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; instead. Otherwise, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; may cause surprising results. This is especially true for &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;, where the comparison rules are lax:</source>
          <target state="translated">可能な限り、&lt;a href=&quot;#assert_strict_mode&quot;&gt; &lt;code&gt;strict&lt;/code&gt; モードを&lt;/a&gt;代わりに使用してください。そうしないと、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等値比較&lt;/a&gt;が驚くべき結果を引き起こす可能性があります。これは、比較ルールが&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;特に当てはまります。</target>
        </trans-unit>
        <trans-unit id="4b0837810808c1db86ff7969b3cc7349ad3a777d" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$HOME&lt;/code&gt; is the user's home directory, and &lt;code&gt;$PREFIX&lt;/code&gt; is Node.js's configured &lt;code&gt;node_prefix&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;$HOME&lt;/code&gt; はユーザーのホームディレクトリで、 &lt;code&gt;$PREFIX&lt;/code&gt; はNode.jsの構成 &lt;code&gt;node_prefix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f32697019030f03ffa8466dad93332914e45c734" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$HOME&lt;/code&gt; is the user's home directory, and &lt;code&gt;$PREFIX&lt;/code&gt; is the Node.js configured &lt;code&gt;node_prefix&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;$HOME&lt;/code&gt; はユーザーのホームディレクトリであり、 &lt;code&gt;$PREFIX&lt;/code&gt; はNode.jsで構成された &lt;code&gt;node_prefix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="38c19b2f1a4bf680069191361065f1dffe346b36" translate="yes" xml:space="preserve">
          <source>Whereas DOM &lt;code&gt;EventTarget&lt;/code&gt; instances &lt;em&gt;may&lt;/em&gt; be hierarchical, there is no concept of hierarchy and event propagation in Node.js. That is, an event dispatched to an &lt;code&gt;EventTarget&lt;/code&gt; does not propagate through a hierarchy of nested target objects that may each have their own set of handlers for the event.</source>
          <target state="translated">DOM &lt;code&gt;EventTarget&lt;/code&gt; インスタンス&lt;em&gt;は&lt;/em&gt;階層的である&lt;em&gt;可能性&lt;/em&gt;がありますが、Node.jsには階層とイベント伝播の概念はありません。つまり、 &lt;code&gt;EventTarget&lt;/code&gt; にディスパッチされたイベントは、それぞれがイベントの独自のハンドラーセットを持つ可能性のあるネストされたターゲットオブジェクトの階層を介して伝播されません。</target>
        </trans-unit>
        <trans-unit id="4d88ed0feb975e4fa8a53343cb171f8d13d607d4" translate="yes" xml:space="preserve">
          <source>Whether or not the module is done loading, or is in the process of loading.</source>
          <target state="translated">モジュールのロードが完了したかどうか、またはロード中かどうか。</target>
        </trans-unit>
        <trans-unit id="150bcea502183560d4bd3b371b2eac70c65966c2" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&quot;&gt;&lt;code&gt;TypedArray#slice()&lt;/code&gt;&lt;/a&gt; creates a copy of part of the &lt;code&gt;TypedArray&lt;/code&gt;, &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;Buffer#slice()&lt;/code&gt;&lt;/a&gt; creates a view over the existing &lt;code&gt;Buffer&lt;/code&gt; without copying. This behavior can be surprising, and only exists for legacy compatibility. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt; can be used to achieve the behavior of &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;Buffer#slice()&lt;/code&gt;&lt;/a&gt; on both &lt;code&gt;Buffer&lt;/code&gt;s and other &lt;code&gt;TypedArray&lt;/code&gt;s.</source>
          <target state="translated">一方で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&quot;&gt; &lt;code&gt;TypedArray#slice()&lt;/code&gt; &lt;/a&gt;の一部のコピーを作成し &lt;code&gt;TypedArray&lt;/code&gt; 、&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;Buffer#slice()&lt;/code&gt; &lt;/a&gt;既存のオーバービューを作成 &lt;code&gt;Buffer&lt;/code&gt; にコピーせずに。この動作は驚くべきものであり、レガシー互換性のためにのみ存在します。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;Buffer&lt;/code&gt; と他の &lt;code&gt;TypedArray&lt;/code&gt; の両方で&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;Buffer#slice()&lt;/code&gt; の&lt;/a&gt;動作を実現できます。</target>
        </trans-unit>
        <trans-unit id="073b0a5fc18cb0c2d155506393ae1a3f4713ec1d" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;readable.readableFlowing&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, data may be accumulating within the stream's internal buffer.</source>
          <target state="translated">一方で &lt;code&gt;readable.readableFlowing&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、データは、ストリームの内部バッファ内に蓄積することができます。</target>
        </trans-unit>
        <trans-unit id="56c8f07d4ebaba9048700c889aa63a035ed687c0" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;parentURL&lt;/em&gt; is not the file system root,</source>
          <target state="translated">一方で&lt;em&gt;parentURLは、&lt;/em&gt;ファイルシステムのルートではありません、</target>
        </trans-unit>
        <trans-unit id="3eaccbf0809c93e1b57c8a5d1f706909dffd3367" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;scopeURL&lt;/em&gt; is not the file system root,</source>
          <target state="translated">一方で&lt;em&gt;scopeURLは、&lt;/em&gt;ファイルシステムのルートではありません、</target>
        </trans-unit>
        <trans-unit id="827e891467d3d9882b685c22937f88f6efa8b40f" translate="yes" xml:space="preserve">
          <source>While a Node.js process typically releases all its resources when exiting, embedders of Node.js, or future Worker support, may require addons to register clean-up hooks that will be run once the current Node.js instance exits.</source>
          <target state="translated">Node.jsプロセスは通常、終了時にすべてのリソースを解放しますが、Node.jsのエンベッダーや将来のWorkerサポートでは、現在のNode.jsインスタンスが終了した後に実行されるクリーンアップフックを登録するためのアドオンが必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="16bf687a5d42e237a08af3b384d73c158bf3b89e" translate="yes" xml:space="preserve">
          <source>While a stream is not draining, calls to &lt;code&gt;write()&lt;/code&gt; will buffer &lt;code&gt;chunk&lt;/code&gt;, and return false. Once all currently buffered chunks are drained (accepted for delivery by the operating system), the &lt;code&gt;'drain'&lt;/code&gt; event will be emitted. It is recommended that once &lt;code&gt;write()&lt;/code&gt; returns false, no more chunks be written until the &lt;code&gt;'drain'&lt;/code&gt; event is emitted. While calling &lt;code&gt;write()&lt;/code&gt; on a stream that is not draining is allowed, Node.js will buffer all written chunks until maximum memory usage occurs, at which point it will abort unconditionally. Even before it aborts, high memory usage will cause poor garbage collector performance and high RSS (which is not typically released back to the system, even after the memory is no longer required). Since TCP sockets may never drain if the remote peer does not read the data, writing a socket that is not draining may lead to a remotely exploitable vulnerability.</source>
          <target state="translated">ストリームがドレインされていない間、 &lt;code&gt;write()&lt;/code&gt; への呼び出しは &lt;code&gt;chunk&lt;/code&gt; をバッファリングし、falseを返します。現在バッファリングされているすべてのチャンクが排出されると（オペレーティングシステムによる配信が受け入れられると）、 &lt;code&gt;'drain'&lt;/code&gt; イベントが発生します。 &lt;code&gt;write()&lt;/code&gt; がfalseを返すと、 &lt;code&gt;'drain'&lt;/code&gt; イベントが発行されるまで、これ以上チャンクを書き込まないことをお勧めします。 &lt;code&gt;write()&lt;/code&gt; を呼び出している間ドレインが許可されていないストリームでは、Node.jsは、最大メモリ使用量が発生するまで、書き込まれたすべてのチャンクをバッファします。この時点で、無条件に中止されます。中止する前であっても、メモリ使用量が多いと、ガベージコレクタのパフォーマンスが低下し、RSSが高くなります（メモリが不要になった後でも、通常はシステムに解放されません）。リモートピアがデータを読み取らない場合、TCPソケットはドレインされない可能性があるため、ドレインされていないソケットを書き込むと、リモートから悪用可能な脆弱性につながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d6a8020de6b381b75f56b7f678ab65ef6cbe3057" translate="yes" xml:space="preserve">
          <source>While a worker is alive, this is the key that indexes it in &lt;code&gt;cluster.workers&lt;/code&gt;.</source>
          <target state="translated">ワーカーが生きている間、これは &lt;code&gt;cluster.workers&lt;/code&gt; でワーカーにインデックスを付けるキーです。</target>
        </trans-unit>
        <trans-unit id="1fd443864b968d1422e68befd59a84340c0cbe2f" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_dataview()&lt;/code&gt;, a given &lt;code&gt;offset&lt;/code&gt; was outside the bounds of the dataview or &lt;code&gt;offset + length&lt;/code&gt; was larger than a length of given &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_create_dataview()&lt;/code&gt; の呼び出し中に、指定 &lt;code&gt;offset&lt;/code&gt; れたオフセットがデータビューの境界の外にあるか、 &lt;code&gt;offset + length&lt;/code&gt; さが指定された &lt;code&gt;buffer&lt;/code&gt; 長さを超えていました。</target>
        </trans-unit>
        <trans-unit id="8ac13a17681e077ea5bf349faacd8194b41cfd8a" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_typedarray()&lt;/code&gt;, &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; was larger than the length of given &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_create_typedarray()&lt;/code&gt; の呼び出し中に、 &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; が、指定された &lt;code&gt;buffer&lt;/code&gt; 長さよりも大きかった。</target>
        </trans-unit>
        <trans-unit id="89bedcd7f7b0e6f56592b23db9232857980b56be" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_typedarray()&lt;/code&gt;, the provided &lt;code&gt;offset&lt;/code&gt; was not a multiple of the element size.</source>
          <target state="translated">&lt;code&gt;napi_create_typedarray()&lt;/code&gt; の呼び出し中に、指定された &lt;code&gt;offset&lt;/code&gt; は要素サイズの倍数ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="5f70577b8889d7968ea8fc5369e676e9ca7b273e" translate="yes" xml:space="preserve">
          <source>While client code may generate and propagate these errors, in practice, only V8 will do so.</source>
          <target state="translated">クライアントコードはこれらのエラーを生成して伝播することができますが、実際にはV8のみがこれを行います。</target>
        </trans-unit>
        <trans-unit id="0a77636ef4321da677173086cd96495f6d6cd2c5" translate="yes" xml:space="preserve">
          <source>While it is not recommended, most fs functions allow the callback argument to be omitted, in which case a default callback is used that rethrows errors. To get a trace to the original call site, set the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable:</source>
          <target state="translated">推奨されていませんが、ほとんどのfs関数ではコールバック引数を省略できます。その場合、デフォルトのコールバックが使用され、エラーが再スローされます。元の呼び出しサイトへのトレースを取得するには、 &lt;code&gt;NODE_DEBUG&lt;/code&gt; 環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="07ad085018317673130d977314c9fd1a0ab27428" translate="yes" xml:space="preserve">
          <source>While most applications will almost never need to do this, there are situations within Node.js where this is done, particularly in the &lt;code&gt;Readable&lt;/code&gt; stream class internals.</source>
          <target state="translated">ほとんどのアプリケーションではこれを行う必要はほとんどありませんが、特に &lt;code&gt;Readable&lt;/code&gt; ストリームクラスの内部で、Node.js内でこれが行われる状況があります。</target>
        </trans-unit>
        <trans-unit id="12603addff37ef7fb8f4096757cb2ac7b6201fe2" translate="yes" xml:space="preserve">
          <source>While most applications will continue to function normally, this introduces an edge case in the following conditions:</source>
          <target state="translated">ほとんどのアプリケーションは正常に機能しますが、次のような状況ではエッジケースが発生します。</target>
        </trans-unit>
        <trans-unit id="e574df95dc872b8cc54642689247473a5c7d5173" translate="yes" xml:space="preserve">
          <source>While process warnings use &lt;code&gt;Error&lt;/code&gt; objects, the process warning mechanism is &lt;strong&gt;not&lt;/strong&gt; a replacement for normal error handling mechanisms.</source>
          <target state="translated">プロセス警告は &lt;code&gt;Error&lt;/code&gt; オブジェクトを使用しますが、プロセス警告メカニズムは通常のエラー処理メカニズムの代わりにはなり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="53b02f9a1b3e1a259321fe33272d01f74b179e92" translate="yes" xml:space="preserve">
          <source>While specific instances of &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; streams may differ in various ways, all &lt;code&gt;Writable&lt;/code&gt; streams follow the same fundamental usage pattern as illustrated in the example below:</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームの特定のインスタンスはさまざまな点で異なる場合がありますが、すべての &lt;code&gt;Writable&lt;/code&gt; ストリームは、以下の例に示すように、同じ基本的な使用パターンに従います。</target>
        </trans-unit>
        <trans-unit id="9bda333a604d893d1a75ffb87d5525e7ef7b7daa" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;bindings&lt;/code&gt; package implementation is more sophisticated in how it locates Addon modules, it is essentially using a &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; pattern similar to:</source>
          <target state="translated">一方で &lt;code&gt;bindings&lt;/code&gt; パッケージの実装は、それがアドオンモジュールを検索する方法で、より洗練され、それは基本的に使用されて &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; と同様のパターンを：</target>
        </trans-unit>
        <trans-unit id="148734bd8ae3a9daac7e2781c1383ca3a0ec28e6" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;bindings&lt;/code&gt; package implementation is more sophisticated in how it locates addon modules, it is essentially using a &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; pattern similar to:</source>
          <target state="translated">一方で &lt;code&gt;bindings&lt;/code&gt; パッケージの実装は、それがアドオンモジュールを検索する方法で、より洗練され、それは基本的に使用している &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 同様のパターンにします：</target>
        </trans-unit>
        <trans-unit id="76c90ee7eba72880849307c2039e0e4bb01a80a1" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;length&lt;/code&gt; property is not immutable, changing the value of &lt;code&gt;length&lt;/code&gt; can result in undefined and inconsistent behavior. Applications that wish to modify the length of a &lt;code&gt;Buffer&lt;/code&gt; should therefore treat &lt;code&gt;length&lt;/code&gt; as read-only and use &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;buf.slice()&lt;/code&gt;&lt;/a&gt; to create a new &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">ながら &lt;code&gt;length&lt;/code&gt; 性は不変ではない、の値は変化 &lt;code&gt;length&lt;/code&gt; 不定と一貫性のない動作をもたらすことができます。したがって、 &lt;code&gt;Buffer&lt;/code&gt; の長さを変更するアプリケーションでは、 &lt;code&gt;length&lt;/code&gt; を読み取り専用として扱い、&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;buf.slice()&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;Buffer&lt;/code&gt; を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a623dbbd3951370c264476b7c6e7232613236f42" translate="yes" xml:space="preserve">
          <source>While the Legacy API has not been deprecated, it is maintained solely for backwards compatibility with existing applications. New application code should use the WHATWG API.</source>
          <target state="translated">レガシー API は非推奨にはなっていませんが、既存のアプリケーションとの下位互換性のためだけに維持されています。新しいアプリケーション・コードは WHATWG API を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="09c5d64ead347c0d1001f45fe745bced7173b737" translate="yes" xml:space="preserve">
          <source>While the example above uses a server created using the &lt;code&gt;net&lt;/code&gt; module, &lt;code&gt;dgram&lt;/code&gt; module servers use exactly the same workflow with the exceptions of listening on a &lt;code&gt;'message'&lt;/code&gt; event instead of &lt;code&gt;'connection'&lt;/code&gt; and using &lt;code&gt;server.bind()&lt;/code&gt; instead of &lt;code&gt;server.listen()&lt;/code&gt;. This is, however, currently only supported on Unix platforms.</source>
          <target state="translated">上記の例は &lt;code&gt;net&lt;/code&gt; モジュールを使用して作成されたサーバーを使用していますが、 &lt;code&gt;dgram&lt;/code&gt; モジュールサーバーは、 &lt;code&gt;'connection'&lt;/code&gt; ではなく &lt;code&gt;'message'&lt;/code&gt; イベントをリッスンし、 &lt;code&gt;server.listen()&lt;/code&gt; &lt;code&gt;server.bind()&lt;/code&gt; 代わりにserver.bind（）を使用することを除いて、まったく同じワークフローを使用します。 ）。ただし、これは現在、UNIXプラットフォームでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="4cc676ce4cebcbf29d86e81b5c7d0dff3d3d683c" translate="yes" xml:space="preserve">
          <source>While the following will:</source>
          <target state="translated">次のようになりますが。</target>
        </trans-unit>
        <trans-unit id="b5fff3058753561ed1c6d6a0fda3b9ebdd80b49a" translate="yes" xml:space="preserve">
          <source>While the function is called &lt;code&gt;kill&lt;/code&gt;, the signal delivered to the child process may not actually terminate the process.</source>
          <target state="translated">関数が &lt;code&gt;kill&lt;/code&gt; と呼ばれている間、子プロセスに配信されたシグナルは実際にはプロセスを終了しない場合があります。</target>
        </trans-unit>
        <trans-unit id="272a1681221a0eec5a8cfa19d26eb906122e1b59" translate="yes" xml:space="preserve">
          <source>While there are clear performance advantages to using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, extra care &lt;em&gt;must&lt;/em&gt; be taken in order to avoid introducing security vulnerabilities into an application.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; の&lt;/a&gt;使用には明らかにパフォーマンス上の利点が&lt;em&gt;あり&lt;/em&gt;ますが、アプリケーションにセキュリティの脆弱性が持ち込まれ&lt;em&gt;ない&lt;/em&gt;ように、特別な注意を払う&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="dff47dc75762b117c912273ee750fcd8b8835a1f" translate="yes" xml:space="preserve">
          <source>While there are clear performance advantages to using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, extra care &lt;em&gt;must&lt;/em&gt; be taken in order to avoid introducing security vulnerabilities into an application.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;を使用することには明らかなパフォーマンス上の利点が&lt;em&gt;あり&lt;/em&gt;ますが、アプリケーションにセキュリティの脆弱性が導入され&lt;em&gt;ない&lt;/em&gt;ように、特別な注意を払う&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="906514837da60312b0100c43d459f45d3629e591" translate="yes" xml:space="preserve">
          <source>While using &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;, the size of the receive or send &lt;code&gt;Buffer&lt;/code&gt; could not be determined.</source>
          <target state="translated">&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt;を使用しているときに、受信または送信 &lt;code&gt;Buffer&lt;/code&gt; サイズを判別できませんでした。</target>
        </trans-unit>
        <trans-unit id="05941d502963f71fe136daa4cb4b731bc168d99f" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;N-API&lt;/code&gt;, a constructor passed was not a function.</source>
          <target state="translated">&lt;code&gt;N-API&lt;/code&gt; の使用中に、渡されたコンストラクターは関数ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="93457bdd2cd57367c90d2f2935274066789902d1" translate="yes" xml:space="preserve">
          <source>While using TLS, the &lt;code&gt;server.addContext()&lt;/code&gt; method was called without providing a host name in the first parameter.</source>
          <target state="translated">TLSの使用中に、最初のパラメーターにホスト名を指定せずに &lt;code&gt;server.addContext()&lt;/code&gt; メソッドが呼び出されました。</target>
        </trans-unit>
        <trans-unit id="f9146b4c870abc13d8e7270e7e2c8205a2d51013" translate="yes" xml:space="preserve">
          <source>While using TLS, the &lt;code&gt;server.addContext()&lt;/code&gt; method was called without providing a hostname in the first parameter.</source>
          <target state="translated">TLSの使用中に、最初のパラメーターにホスト名を指定せずに &lt;code&gt;server.addContext()&lt;/code&gt; メソッドが呼び出されました。</target>
        </trans-unit>
        <trans-unit id="4a919666b0cfbcead82430357bab047021b52466" translate="yes" xml:space="preserve">
          <source>While using TLS, the host name/IP of the peer did not match any of the &lt;code&gt;subjectAltNames&lt;/code&gt; in its certificate.</source>
          <target state="translated">TLSを使用しているときに、ピアのホスト名/ IPが証明書の &lt;code&gt;subjectAltNames&lt;/code&gt; のいずれとも一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="1a7d1e22335731ae81c12afd1af0756eec95e9e1" translate="yes" xml:space="preserve">
          <source>While using TLS, the hostname/IP of the peer did not match any of the &lt;code&gt;subjectAltNames&lt;/code&gt; in its certificate.</source>
          <target state="translated">TLSを使用しているときに、ピアのホスト名/ IPが証明書内のどの &lt;code&gt;subjectAltNames&lt;/code&gt; とも一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="45d99be8b65878064711b0e62c2136d7a075162d" translate="yes" xml:space="preserve">
          <source>While using TLS, the parameter offered for the Diffie-Hellman (&lt;code&gt;DH&lt;/code&gt;) key-agreement protocol is too small. By default, the key length must be greater than or equal to 1024 bits to avoid vulnerabilities, even though it is strongly recommended to use 2048 bits or larger for stronger security.</source>
          <target state="translated">TLSの使用中に、Diffie-Hellman（ &lt;code&gt;DH&lt;/code&gt; ）鍵合意プロトコルに提供されるパラメーターが小さすぎます。セキュリティを強化するために2048ビット以上を使用することを強くお勧めしますが、デフォルトでは、脆弱性を回避するためにキー長は1024ビット以上である必要があります。</target>
        </trans-unit>
        <trans-unit id="0255bf434163a119a17b1d975c9f1e7ecfd257e3" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to activate the inspector when it already started to listen on a port. Use &lt;code&gt;inspector.close()&lt;/code&gt; before activating it on a different address.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールの使用中に、インスペクターがすでにポートでリッスンを開始しているときに、インスペクターをアクティブ化しようとしました。別のアドレスでアクティブ化する前に、 &lt;code&gt;inspector.close()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="f0ed3431f9e7da6bdb7c0cdcc138f0c67a3a84bd" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to connect when the inspector was already connected.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールの使用中に、インスペクターが既に接続されているときに接続しようとしました。</target>
        </trans-unit>
        <trans-unit id="c9e4d1438169aa995467dae33b288560aea4c176" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to use the inspector after the session had already closed.</source>
          <target state="translated">使用している間 &lt;code&gt;inspector&lt;/code&gt; モジュールを、試みは、セッションがすでに終了した後にインスペクタを使用しました。</target>
        </trans-unit>
        <trans-unit id="7c8341fb6d1f4721021429c0a358429868bcd9a7" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to use the inspector before it was connected.</source>
          <target state="translated">使用している間 &lt;code&gt;inspector&lt;/code&gt; モジュールを、試みは、それが接続されていた前に、インスペクタを使用しました。</target>
        </trans-unit>
        <trans-unit id="85091e3c3a7666c26248b532c8232f034e100cae" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), a performance mark is invalid.</source>
          <target state="translated">Performance Timing API（ &lt;code&gt;perf_hooks&lt;/code&gt; ）を使用している間、パフォーマンスマークは無効です。</target>
        </trans-unit>
        <trans-unit id="cc4a904bf2febe00864e7180029aef452cfb34c5" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), no valid performance entry types are found.</source>
          <target state="translated">Performance Timing API（ &lt;code&gt;perf_hooks&lt;/code&gt; ）を使用しているときに、有効なパフォーマンスエントリタイプが見つかりません。</target>
        </trans-unit>
        <trans-unit id="1c712c9cfae45300304fedcd57cc9dbfd5142252" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), no valid performance entry types were found.</source>
          <target state="translated">Performance Timing API（ &lt;code&gt;perf_hooks&lt;/code&gt; ）を使用しているときに、有効なパフォーマンスエントリタイプが見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="7a0f6c9b6bee563036957bfb2ec6eb810b5f2187" translate="yes" xml:space="preserve">
          <source>While, the &lt;code&gt;Buffer&lt;/code&gt; object is available as a global, there are additional &lt;code&gt;Buffer&lt;/code&gt;-related APIs that are available only via the &lt;code&gt;buffer&lt;/code&gt; module accessed using &lt;code&gt;require('buffer')&lt;/code&gt;.</source>
          <target state="translated">、つつ、 &lt;code&gt;Buffer&lt;/code&gt; オブジェクトがグローバルとして使用可能であり、追加のある &lt;code&gt;Buffer&lt;/code&gt; のみを介して利用可能なAPI関連の &lt;code&gt;buffer&lt;/code&gt; 使用してアクセスモジュール &lt;code&gt;require('buffer')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbf2dd154821886de9761f603648735c3e559ee1" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance has been closed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">なります &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスは、それ以外の場合は、閉じられた &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e76c78443d8eaa0500bc30563e442b910eb81724" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance has been destroyed and must no longer be used, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">なります &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスが破棄されていないと、もはや使用されている必要があり、そうでない場合 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6c7b91092846e149e633701cf1ea18b986ae46f" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance is still connecting, will be set to &lt;code&gt;false&lt;/code&gt; before emitting &lt;code&gt;connect&lt;/code&gt; event and/or calling the &lt;code&gt;http2.connect&lt;/code&gt; callback.</source>
          <target state="translated">なります &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスが接続され、に設定されます &lt;code&gt;false&lt;/code&gt; 発光する前に &lt;code&gt;connect&lt;/code&gt; イベントを、および/または呼び出し &lt;code&gt;http2.connect&lt;/code&gt; コールバックを。</target>
        </trans-unit>
        <trans-unit id="5df68b6de935e716e54330bfbad78ac0cfff8003" translate="yes" xml:space="preserve">
          <source>Will generate an object similar to:</source>
          <target state="translated">似たようなオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="49659e5a07d9ec9ddbc5ea2cded9dfed86235252" translate="yes" xml:space="preserve">
          <source>Will generate:</source>
          <target state="translated">生成します。</target>
        </trans-unit>
        <trans-unit id="2c2d1ea901f0c8101ac1fb5fa6dc20b9daa197c0" translate="yes" xml:space="preserve">
          <source>Will print:</source>
          <target state="translated">印刷します。</target>
        </trans-unit>
        <trans-unit id="70e640967068e9aeff74a0b63a5f321ce52989ef" translate="yes" xml:space="preserve">
          <source>Windows Performance Counter support has been removed from Node.js. The undocumented &lt;code&gt;COUNTER_NET_SERVER_CONNECTION()&lt;/code&gt;, &lt;code&gt;COUNTER_NET_SERVER_CONNECTION_CLOSE()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_SERVER_REQUEST()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_SERVER_RESPONSE()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_CLIENT_REQUEST()&lt;/code&gt;, and &lt;code&gt;COUNTER_HTTP_CLIENT_RESPONSE()&lt;/code&gt; functions have been deprecated.</source>
          <target state="translated">WindowsパフォーマンスカウンターのサポートがNode.jsから削除されました。文書化されていない &lt;code&gt;COUNTER_NET_SERVER_CONNECTION()&lt;/code&gt; 、 &lt;code&gt;COUNTER_NET_SERVER_CONNECTION_CLOSE()&lt;/code&gt; 、 &lt;code&gt;COUNTER_HTTP_SERVER_REQUEST()&lt;/code&gt; 、 &lt;code&gt;COUNTER_HTTP_SERVER_RESPONSE()&lt;/code&gt; 、 &lt;code&gt;COUNTER_HTTP_CLIENT_REQUEST()&lt;/code&gt; 、および &lt;code&gt;COUNTER_HTTP_CLIENT_RESPONSE()&lt;/code&gt; 関数が廃止されました。</target>
        </trans-unit>
        <trans-unit id="d3eb2a06ecdde61b424aed0b151aacc295ac1030" translate="yes" xml:space="preserve">
          <source>Windows Specific Error Constants</source>
          <target state="translated">Windows固有のエラー定数</target>
        </trans-unit>
        <trans-unit id="c7bb5218ec791e1b5be45e3ebd73be51f17f1af7" translate="yes" xml:space="preserve">
          <source>Windows does not support sending signals, but Node.js offers some emulation with &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;process.kill()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;. Sending signal &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Sending &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGTERM&lt;/code&gt;, and &lt;code&gt;SIGKILL&lt;/code&gt; cause the unconditional termination of the target process.</source>
          <target state="translated">Windowsはシグナルの送信をサポートしていませんが、Node.jsは&lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;process.kill()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; を使用した&lt;/a&gt;エミュレーションを提供しています。シグナル &lt;code&gt;0&lt;/code&gt; の送信は、プロセスの存在をテストするために使用できます。 &lt;code&gt;SIGINT&lt;/code&gt; 、 &lt;code&gt;SIGTERM&lt;/code&gt; 、および &lt;code&gt;SIGKILL&lt;/code&gt; を送信すると、ターゲットプロセスが無条件に終了します。</target>
        </trans-unit>
        <trans-unit id="bfea3e748f09870848545f0c2f952c91ac03fe38" translate="yes" xml:space="preserve">
          <source>Windows does not support signals so has no equivalent to termination by signal, but Node.js offers some emulation with &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;process.kill()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Windowsはシグナルをサポートしていないため、シグナルによる終了に相当するものはありませんが、Node.jsは&lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;process.kill()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; を使用した&lt;/a&gt;エミュレーションを提供します。</target>
        </trans-unit>
        <trans-unit id="aba9f3b1cc568ab6b6fc3f150113c54c4f72c506" translate="yes" xml:space="preserve">
          <source>Windows vs. POSIX</source>
          <target state="translated">ウィンドウズ対ポシックス</target>
        </trans-unit>
        <trans-unit id="b6726453945768d268831e1f085608f8f62e92b3" translate="yes" xml:space="preserve">
          <source>Windows-specific error constants</source>
          <target state="translated">Windows固有のエラー定数</target>
        </trans-unit>
        <trans-unit id="27e8d1c11c75449e5d932b4ccddda5d5eb83e4a5" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; now available, the &lt;code&gt;Buffer&lt;/code&gt; class implements the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt; API in a manner that is more optimized and suitable for Node.js.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;利用可能になりまし、 &lt;code&gt;Buffer&lt;/code&gt; クラスが実装&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; の&lt;/a&gt;より最適化とNode.js.に適している方法で、API</target>
        </trans-unit>
        <trans-unit id="cc2ce0a1c1a12ddc001101986e9f3e96a7af34d3" translate="yes" xml:space="preserve">
          <source>With HTTPS support, use &lt;a href=&quot;tls#tls_tlssocket_getpeercertificate_detailed&quot;&gt;&lt;code&gt;request.socket.getPeerCertificate()&lt;/code&gt;&lt;/a&gt; to obtain the client's authentication details.</source>
          <target state="translated">HTTPSサポートでは、&lt;a href=&quot;tls#tls_tlssocket_getpeercertificate_detailed&quot;&gt; &lt;code&gt;request.socket.getPeerCertificate()&lt;/code&gt; &lt;/a&gt;を使用してクライアントの認証の詳細を取得します。</target>
        </trans-unit>
        <trans-unit id="eff3fb3260b706087702387fa36966dba17fa603" translate="yes" xml:space="preserve">
          <source>With TLS/SSL, all servers (and some clients) must have a &lt;em&gt;certificate&lt;/em&gt;. Certificates are &lt;em&gt;public keys&lt;/em&gt; that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as &quot;self-signed&quot;). The first step to obtaining a certificate is to create a &lt;em&gt;Certificate Signing Request&lt;/em&gt; (CSR) file.</source>
          <target state="translated">TLS / SSLでは、すべてのサーバー（および一部のクライアント）に&lt;em&gt;証明書が&lt;/em&gt;必要です。証明書は、秘密鍵に対応する&lt;em&gt;公開鍵&lt;/em&gt;であり、認証局または秘密鍵の所有者によってデジタル署名されています（このような証明書は「自己署名」と呼ばれます）。証明書を取得する最初のステップは、&lt;em&gt;証明書署名要求&lt;/em&gt;（CSR）ファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="0c21435a9e5e1897d281c15fe6d4278729f4ba10" translate="yes" xml:space="preserve">
          <source>With TLSv1.3, be aware that multiple tickets may be sent by the server, resulting in multiple &lt;code&gt;'session'&lt;/code&gt; events, see &lt;a href=&quot;#tls_event_session&quot;&gt;&lt;code&gt;'session'&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">TLSv1.3では、サーバーから複数のチケットが送信され、複数の &lt;code&gt;'session'&lt;/code&gt; イベントが発生する可能性があることに注意してください。詳細については、&lt;a href=&quot;#tls_event_session&quot;&gt; &lt;code&gt;'session'&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f9b2a4a6fab4bc23157008667b80e9978473ae86" translate="yes" xml:space="preserve">
          <source>With few exceptions, &lt;em&gt;Synchronous&lt;/em&gt; APIs (any blocking method that does not accept a &lt;code&gt;callback&lt;/code&gt; function, such as &lt;a href=&quot;fs#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync&lt;/code&gt;&lt;/a&gt;), will use &lt;code&gt;throw&lt;/code&gt; to report errors.</source>
          <target state="translated">いくつかの例外を除いて、&lt;em&gt;同期&lt;/em&gt; API（&lt;a href=&quot;fs#fs_fs_readfilesync_path_options&quot;&gt; &lt;code&gt;fs.readFileSync&lt;/code&gt; &lt;/a&gt;などの &lt;code&gt;callback&lt;/code&gt; 関数を受け入れない任意のブロッキングメソッド）は、 &lt;code&gt;throw&lt;/code&gt; を使用してエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="19b157b47e83a53d9af8023d224e343715e368cd" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt;&lt;code&gt;--experimental-repl-await&lt;/code&gt;&lt;/a&gt; command line option specified, experimental support for the &lt;code&gt;await&lt;/code&gt; keyword is enabled.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt; &lt;code&gt;--experimental-repl-await&lt;/code&gt; &lt;/a&gt;指定されたコマンドラインオプション、のための実験的なサポート &lt;code&gt;await&lt;/code&gt; キーワードが有効になっています。</target>
        </trans-unit>
        <trans-unit id="627181d1cba340317aff21e0565fb8c5949b0afc" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt;&lt;code&gt;--experimental-repl-await&lt;/code&gt;&lt;/a&gt; command-line option specified, experimental support for the &lt;code&gt;await&lt;/code&gt; keyword is enabled.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt; &lt;code&gt;--experimental-repl-await&lt;/code&gt; &lt;/a&gt;指定されたコマンドラインオプション、のための実験的なサポート &lt;code&gt;await&lt;/code&gt; キーワードが有効になっています。</target>
        </trans-unit>
        <trans-unit id="63ae8776ef3f404c5446c364b77e122a73f3b875" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;all&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;Promise&lt;/code&gt; is resolved with &lt;code&gt;addresses&lt;/code&gt; being an array of objects with the properties &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt;.</source>
          <target state="translated">では &lt;code&gt;all&lt;/code&gt; のオプションが設定され &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;Promise&lt;/code&gt; して解決され &lt;code&gt;addresses&lt;/code&gt; プロパティを持つオブジェクトの配列され &lt;code&gt;address&lt;/code&gt; と &lt;code&gt;family&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f3cf5f6869dcc18269bb5c37a1d11bb05d05e2a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;all&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the arguments for &lt;code&gt;callback&lt;/code&gt; change to &lt;code&gt;(err, addresses)&lt;/code&gt;, with &lt;code&gt;addresses&lt;/code&gt; being an array of objects with the properties &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; のオプションが設定され &lt;code&gt;true&lt;/code&gt; のため、引数 &lt;code&gt;callback&lt;/code&gt; への変更 &lt;code&gt;(err, addresses)&lt;/code&gt; と、 &lt;code&gt;addresses&lt;/code&gt; プロパティを持つオブジェクトの配列され &lt;code&gt;address&lt;/code&gt; と &lt;code&gt;family&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a48f83436ad8aa32468354573f07a9a9b6c4def3" translate="yes" xml:space="preserve">
          <source>With the exception of &lt;code&gt;MessagePort&lt;/code&gt;s being &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;s rather than &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;s, this implementation matches &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;browser &lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">除いて &lt;code&gt;MessagePort&lt;/code&gt; sがあること&lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;ではなく、秒&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; &lt;/a&gt;秒、この実装は一致する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;ブラウザ &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;秒。</target>
        </trans-unit>
        <trans-unit id="76d4961d795a294bf706c6cd1dc296778eaba002" translate="yes" xml:space="preserve">
          <source>With the list of module exports provided upfront, the &lt;code&gt;execute&lt;/code&gt; function will then be called at the exact point of module evaluation order for that module in the import tree.</source>
          <target state="translated">事前にモジュールエクスポートのリストが提供されているため、インポートツリー内のそのモジュールのモジュール評価順序の正確な時点で &lt;code&gt;execute&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4f29e9069090db473dbd25a596b113d2b2eef46f" translate="yes" xml:space="preserve">
          <source>With the preceding loader, running &lt;code&gt;node --experimental-loader ./coffeescript-loader.mjs main.coffee&lt;/code&gt; causes &lt;code&gt;main.coffee&lt;/code&gt; to be turned into JavaScript after its source code is loaded from disk but before Node.js executes it; and so on for any &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.litcoffee&lt;/code&gt; or &lt;code&gt;.coffee.md&lt;/code&gt; files referenced via &lt;code&gt;import&lt;/code&gt; statements of any loaded file.</source>
          <target state="translated">上記のローダーで、 &lt;code&gt;node --experimental-loader ./coffeescript-loader.mjs main.coffee&lt;/code&gt; を &lt;code&gt;main.coffee&lt;/code&gt; すると、ソースコードがディスクからロードされた後、Node.jsが実行する前に、main.coffeeがJavaScriptに変換されます。ロードされたファイルの &lt;code&gt;import&lt;/code&gt; ステートメントを介して参照される &lt;code&gt;.coffee&lt;/code&gt; 、 &lt;code&gt;.litcoffee&lt;/code&gt; 、または &lt;code&gt;.coffee.md&lt;/code&gt; ファイルについても同様です。</target>
        </trans-unit>
        <trans-unit id="7fdbfdcd5f31d2e7aba66fbb5809b057859e2ee3" translate="yes" xml:space="preserve">
          <source>With the preceding loader, running &lt;code&gt;node --experimental-loader ./https-loader.mjs ./main.mjs&lt;/code&gt; prints the current version of CoffeeScript per the module at the URL in &lt;code&gt;main.mjs&lt;/code&gt;.</source>
          <target state="translated">上記のローダーで、 &lt;code&gt;node --experimental-loader ./https-loader.mjs ./main.mjs&lt;/code&gt; 実行すると、 &lt;code&gt;main.mjs&lt;/code&gt; のURLにあるモジュールごとにCoffeeScriptの現在のバージョンが出力されます。</target>
        </trans-unit>
        <trans-unit id="fb2445d428b93b1d9ea273fbb18e3604288f8c8a" translate="yes" xml:space="preserve">
          <source>With the support of async generators and iterators in JavaScript, async generators are effectively a first-class language-level stream construct at this point.</source>
          <target state="translated">JavaScript での非同期ジェネレータとイテレータのサポートにより、非同期ジェネレータは、現時点では事実上、第一級の言語レベルのストリーム構成体となっています。</target>
        </trans-unit>
        <trans-unit id="508f1c18f9debe0dd4c0c6ff186eeb7481f33c77" translate="yes" xml:space="preserve">
          <source>With this feature enabled, the &lt;code&gt;LOAD_NODE_MODULES&lt;/code&gt; changes are:</source>
          <target state="translated">この機能を有効にすると、 &lt;code&gt;LOAD_NODE_MODULES&lt;/code&gt; の変更は次のようになります。</target>
        </trans-unit>
        <trans-unit id="29898952c4414597f3478e805087121bf125e40d" translate="yes" xml:space="preserve">
          <source>With this loader, running:</source>
          <target state="translated">このローダーを使って</target>
        </trans-unit>
        <trans-unit id="87544397313c61419dbce81557d29cbe03ec9f78" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; package scope, Node.js can be instructed to interpret a particular file as an ES module by naming it with an &lt;code&gt;.mjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; files are treated as CommonJS within a &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; package scope).</source>
          <target state="translated">内で &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; パッケージのスコープ、Node.jsのはでそれを命名することにより、ESモジュールとして特定のファイルを解釈するように指示することができます &lt;code&gt;.mjs&lt;/code&gt; 両方のため、拡張子（ &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.cjs&lt;/code&gt; ファイルが、A内のCommonJSとして扱われます &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; パッケージスコープ）。</target>
        </trans-unit>
        <trans-unit id="c0a800b8b27571600ff937bb46cc2b5dfa84cd7b" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; package scope, Node.js can be instructed to interpret a particular file as CommonJS by naming it with a &lt;code&gt;.cjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.mjs&lt;/code&gt; files are treated as ES modules within a &lt;code&gt;&quot;module&quot;&lt;/code&gt; package scope).</source>
          <target state="translated">内で &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; パッケージのスコープ、Node.jsのはでそれを命名することにより、CommonJSとして特定のファイルを解釈するように指示することができます &lt;code&gt;.cjs&lt;/code&gt; 両方以来（拡張子 &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.mjs&lt;/code&gt; ファイルが内ESモジュールとして扱われます &lt;code&gt;&quot;module&quot;&lt;/code&gt; パッケージスコープ）。</target>
        </trans-unit>
        <trans-unit id="370820eaa9e0490009215285dc97963f9f462fd5" translate="yes" xml:space="preserve">
          <source>Within a worker, &lt;code&gt;process.on('error')&lt;/code&gt; may also be used.</source>
          <target state="translated">ワーカー内では、 &lt;code&gt;process.on('error')&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="af77b260f549d5f7dd63b4b42c896073162aa0b8" translate="yes" xml:space="preserve">
          <source>Within a worker, &lt;code&gt;process.on('message')&lt;/code&gt; may also be used.</source>
          <target state="translated">ワーカー内では、 &lt;code&gt;process.on('message')&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="a03122d92eae16b3e9c16945ae88dceb7d7fdcb5" translate="yes" xml:space="preserve">
          <source>Within the &lt;a href=&quot;child_process&quot;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;spawn()&lt;/code&gt;, &lt;code&gt;fork()&lt;/code&gt;, and &lt;code&gt;exec()&lt;/code&gt; methods, the &lt;code&gt;options.customFds&lt;/code&gt; option is deprecated. The &lt;code&gt;options.stdio&lt;/code&gt; option should be used instead.</source>
          <target state="translated">内&lt;a href=&quot;child_process&quot;&gt; &lt;code&gt;child_process&lt;/code&gt; &lt;/a&gt;モジュールの &lt;code&gt;spawn()&lt;/code&gt; 、 &lt;code&gt;fork()&lt;/code&gt; 、および &lt;code&gt;exec()&lt;/code&gt; メソッドは、 &lt;code&gt;options.customFds&lt;/code&gt; のオプションは廃止されます。代わりに、 &lt;code&gt;options.stdio&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed4df86a1d1c449942f5123d02a997d7de257959" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;transform._flush()&lt;/code&gt; implementation, the &lt;code&gt;readable.push()&lt;/code&gt; method may be called zero or more times, as appropriate. The &lt;code&gt;callback&lt;/code&gt; function must be called when the flush operation is complete.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; 実装内では、 &lt;code&gt;readable.push()&lt;/code&gt; メソッドを必要に応じて0回以上呼び出すことができます。 &lt;code&gt;callback&lt;/code&gt; フラッシュ操作が完了すると、関数が呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="1a24fe6d490179934070f782bf83dd8c88d7f94f" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;transform._flush()&lt;/code&gt; implementation, the &lt;code&gt;transform.push()&lt;/code&gt; method may be called zero or more times, as appropriate. The &lt;code&gt;callback&lt;/code&gt; function must be called when the flush operation is complete.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; 実装内では、必要に応じて、 &lt;code&gt;transform.push()&lt;/code&gt; メソッドを0回以上呼び出すことができます。 &lt;code&gt;callback&lt;/code&gt; フラッシュ操作が完了すると、関数が呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="125b6852cc79b26c024fce31be89c0bb22eff517" translate="yes" xml:space="preserve">
          <source>Within the Legacy API, spaces (&lt;code&gt;' '&lt;/code&gt;) and the following characters will be automatically escaped in the properties of URL objects:</source>
          <target state="translated">レガシーAPI内では、スペース（ &lt;code&gt;' '&lt;/code&gt; ）および次の文字は、URLオブジェクトのプロパティで自動的にエスケープされます。</target>
        </trans-unit>
        <trans-unit id="71de115ea7eca96ddac83fb457ce40a81d7b326d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--pending-deprecation&lt;/code&gt;, runtime warnings occur only for code not in &lt;code&gt;node_modules&lt;/code&gt;. This means there will not be deprecation warnings for &lt;code&gt;Buffer()&lt;/code&gt; usage in dependencies. With &lt;code&gt;--pending-deprecation&lt;/code&gt;, a runtime warning results no matter where the &lt;code&gt;Buffer()&lt;/code&gt; usage occurs.</source>
          <target state="translated">なければ &lt;code&gt;--pending-deprecation&lt;/code&gt; 、実行時の警告はないのコードのためにのみ発生し &lt;code&gt;node_modules&lt;/code&gt; 。これは、依存関係での &lt;code&gt;Buffer()&lt;/code&gt; の使用に関する非推奨の警告がないことを意味します。で &lt;code&gt;--pending-deprecation&lt;/code&gt; 、実行時の警告は関係なく、結果 &lt;code&gt;Buffer()&lt;/code&gt; の使用が発生します。</target>
        </trans-unit>
        <trans-unit id="56d3f411141d52d4b02e0929571f8e99c9a817d7" translate="yes" xml:space="preserve">
          <source>Without a leading &lt;code&gt;'/'&lt;/code&gt;, &lt;code&gt;'./'&lt;/code&gt;, or &lt;code&gt;'../'&lt;/code&gt; to indicate a file, the module must either be a core module or is loaded from a &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">ファイルを示す先頭の &lt;code&gt;'/'&lt;/code&gt; 、 &lt;code&gt;'./'&lt;/code&gt; 、または &lt;code&gt;'../'&lt;/code&gt; がない場合、モジュールはコアモジュールであるか、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーから読み込まれる必要があります。</target>
        </trans-unit>
        <trans-unit id="d45cd8ec24f5a8c09cf96fd3d60fd8885398b31d" translate="yes" xml:space="preserve">
          <source>Without the explicit tracking added by the &lt;code&gt;WorkerPoolTaskInfo&lt;/code&gt; objects, it would appear that the callbacks are associated with the individual &lt;code&gt;Worker&lt;/code&gt; objects. However, the creation of the &lt;code&gt;Worker&lt;/code&gt;s is not associated with the creation of the tasks and does not provide information about when tasks were scheduled.</source>
          <target state="translated">&lt;code&gt;WorkerPoolTaskInfo&lt;/code&gt; オブジェクトによって明示的な追跡が追加されていない場合、コールバックは個々の &lt;code&gt;Worker&lt;/code&gt; オブジェクトに関連付けられているように見えます。ただし、 &lt;code&gt;Worker&lt;/code&gt; の作成はタスクの作成に関連付けられておらず、タスクがいつスケジュールされたかについての情報を提供しません。</target>
        </trans-unit>
        <trans-unit id="44568e9f26e0e47d85f67c8ff6f6f8246df7f35a" translate="yes" xml:space="preserve">
          <source>Word left</source>
          <target state="translated">ワードレフト</target>
        </trans-unit>
        <trans-unit id="8ee82f2915df23849a7b17d370c84b9ac570711a" translate="yes" xml:space="preserve">
          <source>Word right</source>
          <target state="translated">言葉の権利</target>
        </trans-unit>
        <trans-unit id="026e539e2c03caa3047c3a5a6e112c6b00aad95f" translate="yes" xml:space="preserve">
          <source>Work as a no-op on a stream that has already been destroyed.</source>
          <target state="translated">すでに破壊されている流れにノーオペで働く。</target>
        </trans-unit>
        <trans-unit id="99edd8c8e615e373739d2cdd38a8942b8a573113" translate="yes" xml:space="preserve">
          <source>Worker</source>
          <target state="translated">Worker</target>
        </trans-unit>
        <trans-unit id="bb3ad4c86040df77ac9065a618741afc7e6fe24d" translate="yes" xml:space="preserve">
          <source>Worker Threads</source>
          <target state="translated">ワーカースレッド</target>
        </trans-unit>
        <trans-unit id="a8be0bede91ceb6ad718250a6be05f374208c9a0" translate="yes" xml:space="preserve">
          <source>Worker support</source>
          <target state="translated">ワーカーサポート</target>
        </trans-unit>
        <trans-unit id="7525522a792d668c0d668b5c21340ba2343b0552" translate="yes" xml:space="preserve">
          <source>Worker threads</source>
          <target state="translated">ワーカースレッド</target>
        </trans-unit>
        <trans-unit id="7d1b2cb035e0f7274d760db926206b76cf58ce10" translate="yes" xml:space="preserve">
          <source>Worker threads inherit non-process-specific options by default. Refer to &lt;a href=&quot;#worker_threads_new_worker_filename_options&quot;&gt;&lt;code&gt;Worker constructor options&lt;/code&gt;&lt;/a&gt; to know how to customize worker thread options, specifically &lt;code&gt;argv&lt;/code&gt; and &lt;code&gt;execArgv&lt;/code&gt; options.</source>
          <target state="translated">ワーカースレッドは、デフォルトでプロセス固有ではないオプションを継承します。ワーカースレッドオプション、特に &lt;code&gt;argv&lt;/code&gt; および &lt;code&gt;execArgv&lt;/code&gt; オプションをカスタマイズする方法については、&lt;a href=&quot;#worker_threads_new_worker_filename_options&quot;&gt; &lt;code&gt;Worker constructor options&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a7bd96c1301ecc33bdde8b9a7616014344363a30" translate="yes" xml:space="preserve">
          <source>Worker threads will now use a copy of the parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt; by default, configurable through the &lt;code&gt;env&lt;/code&gt; option of the &lt;code&gt;Worker&lt;/code&gt; constructor.</source>
          <target state="translated">ワーカースレッドは、デフォルトで親スレッドの &lt;code&gt;process.env&lt;/code&gt; のコピーを使用するようになり、 &lt;code&gt;Worker&lt;/code&gt; コンストラクターの &lt;code&gt;env&lt;/code&gt; オプションを介して構成できます。</target>
        </trans-unit>
        <trans-unit id="6bd9d3a4fd785ea3f118b263af339d35d0d69b69" translate="yes" xml:space="preserve">
          <source>Workers (threads) are useful for performing CPU-intensive JavaScript operations. They will not help much with I/O-intensive work. Node.js&amp;rsquo;s built-in asynchronous I/O operations are more efficient than Workers can be.</source>
          <target state="translated">ワーカー（スレッド）は、CPU集中型のJavaScript操作を実行するのに役立ちます。I / O集約型の作業にはあまり役立ちません。Node.jsの組み込み非同期I / O操作は、ワーカーよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="6aaf9b869206de29e79682eff306f67eba9fb067" translate="yes" xml:space="preserve">
          <source>Workers are now included in the report.</source>
          <target state="translated">労働者が報告書に含まれるようになりました。</target>
        </trans-unit>
        <trans-unit id="32c156f4120dbff1b01165ba34dc20fbf7cb15d1" translate="yes" xml:space="preserve">
          <source>Workers will call &lt;code&gt;process.exit(0)&lt;/code&gt; if the &lt;code&gt;'disconnect'&lt;/code&gt; event occurs on &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;. This protects against accidental disconnection.</source>
          <target state="translated">労働者が呼び出されます &lt;code&gt;process.exit(0)&lt;/code&gt; 場合は &lt;code&gt;'disconnect'&lt;/code&gt; イベントが上で発生 &lt;code&gt;process&lt;/code&gt; と &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; はない &lt;code&gt;true&lt;/code&gt; 。これは偶発的な切断から保護します。</target>
        </trans-unit>
        <trans-unit id="94c55bc4e2625d29f89775dbe794f74b359f2824" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Functions</source>
          <target state="translated">JavaScript 関数を使った作業</target>
        </trans-unit>
        <trans-unit id="dd0d94c5173cefadd81e71498d52e9ffcecfc3a0" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Properties</source>
          <target state="translated">JavaScript のプロパティを使った作業</target>
        </trans-unit>
        <trans-unit id="ee3e162950e57e3ffb1353d33e108696b8bc1725" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Values</source>
          <target state="translated">JavaScript の値を使った作業</target>
        </trans-unit>
        <trans-unit id="304db6c8acf52e9ca4407908d6ca78a88ac2918d" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Values - Abstract Operations</source>
          <target state="translated">JavaScript の値を使った作業-抽象的な操作</target>
        </trans-unit>
        <trans-unit id="9cdd67e5cb2e225c5c0b8b1ce9482a821dbe89a5" translate="yes" xml:space="preserve">
          <source>Working with JavaScript functions</source>
          <target state="translated">JavaScriptの機能を使った作業</target>
        </trans-unit>
        <trans-unit id="255dcfaf721dcf1dd55894d1a1d93ee0a8e1f0cc" translate="yes" xml:space="preserve">
          <source>Working with JavaScript properties</source>
          <target state="translated">JavaScript のプロパティを使った作業</target>
        </trans-unit>
        <trans-unit id="ca5e66ec209f34b618d4d05c944a86b377ff913f" translate="yes" xml:space="preserve">
          <source>Working with JavaScript values</source>
          <target state="translated">JavaScriptの値を使った作業</target>
        </trans-unit>
        <trans-unit id="8f0d60670f7f9025ead1a51ac2db4bab8d4c1a28" translate="yes" xml:space="preserve">
          <source>Working with JavaScript values and abstract operations</source>
          <target state="translated">JavaScriptの値と抽象的な操作を扱う</target>
        </trans-unit>
        <trans-unit id="a1423e2e798a017cd435a74859b4b48f6c9e1eba" translate="yes" xml:space="preserve">
          <source>Would generate the output:</source>
          <target state="translated">出力を生成します。</target>
        </trans-unit>
        <trans-unit id="a60ec44f3e34e2fc665fcd9d6bf835697ce35472" translate="yes" xml:space="preserve">
          <source>Wrapping C++ objects</source>
          <target state="translated">C++オブジェクトのラッピング</target>
        </trans-unit>
        <trans-unit id="cb06ed8f59f8e191210d4b09f30961561267829c" translate="yes" xml:space="preserve">
          <source>Wraps a function within a new function that measures the running time of the wrapped function. A &lt;code&gt;PerformanceObserver&lt;/code&gt; must be subscribed to the &lt;code&gt;'function'&lt;/code&gt; event type in order for the timing details to be accessed.</source>
          <target state="translated">ラップされた関数の実行時間を測定する新しい関数内で関数をラップします。A &lt;code&gt;PerformanceObserver&lt;/code&gt; は、サブスクライブされなければならない &lt;code&gt;'function'&lt;/code&gt; タイミングの詳細にアクセスするために、イベントタイプ。</target>
        </trans-unit>
        <trans-unit id="ebbc2c554bd0547eeb3f522660396f7b8b5cfb4e" translate="yes" xml:space="preserve">
          <source>Wraps a native instance in a JavaScript object. The native instance can be retrieved later using &lt;code&gt;napi_unwrap()&lt;/code&gt;.</source>
          <target state="translated">JavaScriptオブジェクトのネイティブインスタンスをラップします。ネイティブインスタンスは、後で &lt;code&gt;napi_unwrap()&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="6dd1e6b70d2eb237d05773b74a2d7185e892ad13" translate="yes" xml:space="preserve">
          <source>Writable Streams</source>
          <target state="translated">書き込み可能なストリーム</target>
        </trans-unit>
        <trans-unit id="86793abc57b7f140d05eafeb0e1a06f397559249" translate="yes" xml:space="preserve">
          <source>Writable streams</source>
          <target state="translated">書き込み可能なストリーム</target>
        </trans-unit>
        <trans-unit id="00af705aff8c6b3697473cee8f797f564e4c1b63" translate="yes" xml:space="preserve">
          <source>Writable streams are an abstraction for a &lt;em&gt;destination&lt;/em&gt; to which data is written.</source>
          <target state="translated">書き込み可能なストリームは、データが書き込まれる&lt;em&gt;宛先の&lt;/em&gt;抽象概念です。</target>
        </trans-unit>
        <trans-unit id="93d3d897c11d8aae9c1294da774224aade8271d4" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;buffer&lt;/code&gt; を書き込みます。</target>
        </trans-unit>
        <trans-unit id="cc6f50c4f7427dda3b658235f0762dbc83479459" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;buffer&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;buffer&lt;/code&gt; を書き込みます。場合 &lt;code&gt;buffer&lt;/code&gt; 通常のオブジェクトである、それは自分の持っている必要があります &lt;code&gt;toString&lt;/code&gt; 関数プロパティを。</target>
        </trans-unit>
        <trans-unit id="4cff7cc1f79a86945f495b6f1c3da210c50c3fa3" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; をファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="bc5b60ee4cb51da03f87e3638498bd67f716e9f2" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, or an object with an own &lt;code&gt;toString&lt;/code&gt; function property, then an exception is thrown.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;string&lt;/code&gt; を書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、または独自の &lt;code&gt;toString&lt;/code&gt; 関数プロパティを持つオブジェクトの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="e90d07d868ba3b83ba0216e05e8251d164962bc9" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, then the value will be coerced to one.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;string&lt;/code&gt; を書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、値は1に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="23d73723d6b78ad57cc38c0dfd0f3e1b71a24ff7" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file. If &lt;code&gt;string&lt;/code&gt; is not a string, or an object with an own &lt;code&gt;toString&lt;/code&gt; function property, then an exception is thrown.</source>
          <target state="translated">ファイルに &lt;code&gt;string&lt;/code&gt; を書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、または独自の &lt;code&gt;toString&lt;/code&gt; 関数プロパティを持つオブジェクトの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="0bea8dcde86bb9d8107b916db603faf4f0333db7" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file. If &lt;code&gt;string&lt;/code&gt; is not a string, then the value will be coerced to one.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; をファイルに書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、値は1に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="8eaafb99079f8b6f86f0b18d8492a5bb17b00b82" translate="yes" xml:space="preserve">
          <source>Write a JS &lt;code&gt;number&lt;/code&gt; value. For use inside of a custom &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JS &lt;code&gt;number&lt;/code&gt; 値を書き込みます。カスタム&lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt; &lt;code&gt;serializer._writeHostObject()&lt;/code&gt; &lt;/a&gt;内で使用します。</target>
        </trans-unit>
        <trans-unit id="50114ebcf175d0fb53e3cf71e50fda80bbc7eed0" translate="yes" xml:space="preserve">
          <source>Write a raw 32-bit unsigned integer. For use inside of a custom &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">生の32ビット符号なし整数を書き込みます。カスタム&lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt; &lt;code&gt;serializer._writeHostObject()&lt;/code&gt; &lt;/a&gt;内で使用します。</target>
        </trans-unit>
        <trans-unit id="35ed2866709231cdfb447ffd42bb09bae9620175" translate="yes" xml:space="preserve">
          <source>Write a raw 64-bit unsigned integer, split into high and low 32-bit parts. For use inside of a custom &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">生の64ビット符号なし整数を書き込み、32ビットの上位部分と下位部分に分割します。カスタム&lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt; &lt;code&gt;serializer._writeHostObject()&lt;/code&gt; &lt;/a&gt;内で使用します。</target>
        </trans-unit>
        <trans-unit id="d7d2a5d883710e031a37b57f8eff7184faaf24aa" translate="yes" xml:space="preserve">
          <source>Write an array of &lt;code&gt;ArrayBufferView&lt;/code&gt;s to the file specified by &lt;code&gt;fd&lt;/code&gt; using &lt;code&gt;writev()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ArrayBufferView&lt;/code&gt; の配列を、 &lt;code&gt;writev()&lt;/code&gt; を使用して &lt;code&gt;fd&lt;/code&gt; で指定されたファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="f89fa51533db244a3b0cf23aa0703128fb11e0ae" translate="yes" xml:space="preserve">
          <source>Write an array of &lt;code&gt;ArrayBufferView&lt;/code&gt;s to the file.</source>
          <target state="translated">&lt;code&gt;ArrayBufferView&lt;/code&gt; の配列をファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="a44f20c3db548756995a0562a0a7c51a33f900f7" translate="yes" xml:space="preserve">
          <source>Write process warnings to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead.</source>
          <target state="translated">プロセス警告を標準エラーに出力する代わりに、指定されたファイルに書き込みます。ファイルが存在しない場合は作成され、存在する場合は追加されます。警告をファイルに書き込もうとしたときにエラーが発生した場合、警告は代わりに標準エラー出力に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="a30bb4c4040a31da3a74422b36b4da4dc77edd67" translate="yes" xml:space="preserve">
          <source>Write raw bytes into the serializer&amp;rsquo;s internal buffer. The deserializer will require a way to compute the length of the buffer. For use inside of a custom &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">生のバイトをシリアライザの内部バッファに書き込みます。デシリアライザは、バッファの長さを計算する方法を必要とします。カスタム&lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt; &lt;code&gt;serializer._writeHostObject()&lt;/code&gt; &lt;/a&gt;内で使用します。</target>
        </trans-unit>
        <trans-unit id="ac58a983f0c3eaa2d781ecb44f9ed4979ce635de" translate="yes" xml:space="preserve">
          <source>Write reports in a compact format, single-line JSON, more easily consumable by log processing systems than the default multi-line format designed for human consumption.</source>
          <target state="translated">コンパクトなフォーマット、1行JSONでレポートを書き、人間が消費するために設計されたデフォルトの複数行フォーマットよりも、ログ処理システムで簡単に消費することができます。</target>
        </trans-unit>
        <trans-unit id="f54af6e2b94060cfd95ea4ef7e94336367e51f04" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;byteLength&lt;/code&gt; bytes of &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed integer.</source>
          <target state="translated">書き込み &lt;code&gt;byteLength&lt;/code&gt; のバイトを &lt;code&gt;value&lt;/code&gt; する &lt;code&gt;buf&lt;/code&gt; を指定で &lt;code&gt;offset&lt;/code&gt; ビッグエンディアンとして。最大48ビットの精度をサポートします。 &lt;code&gt;value&lt;/code&gt; が符号付き整数以外の場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e079a9f740ec4653884c24988f9bbb2cabf36f36" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;byteLength&lt;/code&gt; bytes of &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned integer.</source>
          <target state="translated">書き込み &lt;code&gt;byteLength&lt;/code&gt; のバイトを &lt;code&gt;value&lt;/code&gt; する &lt;code&gt;buf&lt;/code&gt; を指定で &lt;code&gt;offset&lt;/code&gt; ビッグエンディアンとして。最大48ビットの精度をサポートします。 &lt;code&gt;value&lt;/code&gt; が符号なし整数以外の場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="b3f1260a52ddec5556ea2f9ffb1cd455910aca19" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;byteLength&lt;/code&gt; bytes of &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed integer.</source>
          <target state="translated">書き込み &lt;code&gt;byteLength&lt;/code&gt; のバイトを &lt;code&gt;value&lt;/code&gt; する &lt;code&gt;buf&lt;/code&gt; を指定で &lt;code&gt;offset&lt;/code&gt; リトルエンディアンとして。最大48ビットの精度をサポートします。 &lt;code&gt;value&lt;/code&gt; が符号付き整数以外の場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="55577bb6b169c509346dc6e13bf90925d2ebde1e" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;byteLength&lt;/code&gt; bytes of &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned integer.</source>
          <target state="translated">書き込み &lt;code&gt;byteLength&lt;/code&gt; のバイトを &lt;code&gt;value&lt;/code&gt; する &lt;code&gt;buf&lt;/code&gt; を指定で &lt;code&gt;offset&lt;/code&gt; リトルエンディアンとして。最大48ビットの精度をサポートします。 &lt;code&gt;value&lt;/code&gt; が符号なし整数以外の場合、動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="e6fea46a8a105edf91a6c395f7eb3aed774bafdd" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;byteLength&lt;/code&gt; bytes of &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt;. Supports up to 48 bits of accuracy. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed integer.</source>
          <target state="translated">書き込み &lt;code&gt;byteLength&lt;/code&gt; バイトは、の &lt;code&gt;value&lt;/code&gt; を &lt;code&gt;buf&lt;/code&gt; に指定で &lt;code&gt;offset&lt;/code&gt; 。最大48ビットの精度をサポートします。 &lt;code&gt;value&lt;/code&gt; が符号付き整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="8b976603b4efa6c8014780fbb6afbbbeb79069a5" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;byteLength&lt;/code&gt; bytes of &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt;. Supports up to 48 bits of accuracy. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned integer.</source>
          <target state="translated">書き込み &lt;code&gt;byteLength&lt;/code&gt; バイトは、の &lt;code&gt;value&lt;/code&gt; を &lt;code&gt;buf&lt;/code&gt; に指定で &lt;code&gt;offset&lt;/code&gt; 。最大48ビットの精度をサポートします。 &lt;code&gt;value&lt;/code&gt; が符号なし整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="ccb6cb44c5193b6f6bb5864e183401dd5b0c5675" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at &lt;code&gt;offset&lt;/code&gt; according to the character encoding in &lt;code&gt;encoding&lt;/code&gt;. The &lt;code&gt;length&lt;/code&gt; parameter is the number of bytes to write. If &lt;code&gt;buf&lt;/code&gt; did not contain enough space to fit the entire string, only part of &lt;code&gt;string&lt;/code&gt; will be written. However, partially encoded characters will not be written.</source>
          <target state="translated">書き込み &lt;code&gt;string&lt;/code&gt; する &lt;code&gt;buf&lt;/code&gt; をで &lt;code&gt;offset&lt;/code&gt; に文字エンコーディングに従って &lt;code&gt;encoding&lt;/code&gt; 。 &lt;code&gt;length&lt;/code&gt; パラメータは、書き込みバイトの数です。 &lt;code&gt;buf&lt;/code&gt; に文字列全体を収めるのに十分なスペースがない場合、 &lt;code&gt;string&lt;/code&gt; 一部のみが書き込まれます。ただし、部分的にエンコードされた文字は書き込まれません。</target>
        </trans-unit>
        <trans-unit id="310b7100772be468893d539733bdba0fcdb97d84" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。</target>
        </trans-unit>
        <trans-unit id="82ff7f866364862075a94b44a398934996d94b45" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a JavaScript number.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; がJavaScript番号以外の場合、動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="8bb30b120e1797c208a17eb33ba15f8e9f4a6d10" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. The &lt;code&gt;value&lt;/code&gt; must be a JavaScript number. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a JavaScript number.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; JavaScriptの数でなければなりません。 &lt;code&gt;value&lt;/code&gt; がJavaScript番号以外の場合、動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="736b164421cc43013cbd1fa72b04a07e5d9b9a5c" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid signed 16-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 16-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 有効な符号付き16ビット整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号付き16ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="840d5948ecf3de41fa80721467bc5df21302eaf3" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid signed 32-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 32-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 有効な符号付き32ビット整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号付き32ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="d447cc3288f795a70ee1577728ba32316daa1dcf" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid unsigned 16-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 16-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 、有効な16ビットの符号なし整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号なし16ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="ed32b6e72b4be4fa3287822e1b9c4c767580a29b" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as big-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid unsigned 32-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 32-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にビッグエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 有効な32ビットの符号なし整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号なし32ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="8ce61a4c422ed1aeeb8ceb019662b9c768638a2a" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます</target>
        </trans-unit>
        <trans-unit id="e853992d78435fdda1d5ef727a973b6f1a182d7c" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。</target>
        </trans-unit>
        <trans-unit id="c97c7a01adb9fa6d6bef596bc28e900333913bbb" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a JavaScript number.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; がJavaScript番号以外の場合、動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="e644425b65cb06227c22a147af40027a2f241906" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. The &lt;code&gt;value&lt;/code&gt; must be a JavaScript number. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a JavaScript number.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; JavaScriptの数でなければなりません。 &lt;code&gt;value&lt;/code&gt; がJavaScript番号以外の場合、動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="54eb1d78cba52455ac182e456a70b17a71866cdd" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid signed 16-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 16-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 有効な符号付き16ビット整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号付き16ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="8b1287a9c671e2c19b10c1b3f067cafd55ce3a19" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid signed 32-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 32-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 有効な符号付き32ビット整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号付き32ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="31daf2f7911ca962c616d7883a4e8c88ff44f307" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid unsigned 16-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 16-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 、有効な16ビットの符号なし整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号なし16ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="2f5bf1c944142fb35fa0a39f13f0ff7661d22e87" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; as little-endian. The &lt;code&gt;value&lt;/code&gt; must be a valid unsigned 32-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 32-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; にリトルエンディアンとして &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; 有効な32ビットの符号なし整数でなければなりません。 &lt;code&gt;value&lt;/code&gt; が符号なし32ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="aa963a1213ace94fc9fc6ca9ab637514ce87e58e" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeBigInt64BE()&lt;/code&gt; writes big endian, &lt;code&gt;writeBigInt64LE()&lt;/code&gt; writes little endian).</source>
          <target state="translated">指定されたエンディアン形式で指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeBigInt64BE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeBigInt64LE()&lt;/code&gt; はリトルエンディアンを書き込みます）。</target>
        </trans-unit>
        <trans-unit id="9d9dd87816e02f0f759092e0b6b0b9c847189fab" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeBigUInt64BE()&lt;/code&gt; writes big endian, &lt;code&gt;writeBigUInt64LE()&lt;/code&gt; writes little endian).</source>
          <target state="translated">指定されたエンディアン形式で指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeBigUInt64BE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeBigUInt64LE()&lt;/code&gt; はリトルエンディアンを書き込みます）。</target>
        </trans-unit>
        <trans-unit id="c2b42d4d27920f6735ac9b22e20a5ea4249cc6f8" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeDoubleBE()&lt;/code&gt; writes big endian, &lt;code&gt;writeDoubleLE()&lt;/code&gt; writes little endian). &lt;code&gt;value&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; be a valid 64-bit double. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a 64-bit double.</source>
          <target state="translated">指定されたエンディアン形式で指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeDoubleBE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeDoubleLE()&lt;/code&gt; はリトルエンディアンを書き込みます）。 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;有効な64ビットdoubleである&lt;em&gt;必要&lt;/em&gt;があります。 &lt;code&gt;value&lt;/code&gt; が64ビットdouble以外の場合の動作は未定義です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c45c7e4404c6ad956698b01788c30a9b6cd3a9b6" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeFloatBE()&lt;/code&gt; writes big endian, &lt;code&gt;writeFloatLE()&lt;/code&gt; writes little endian). &lt;code&gt;value&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; be a valid 32-bit float. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a 32-bit float.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; で指定されたエンディアン形式で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeFloatBE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeFloatLE()&lt;/code&gt; はリトルエンディアンを書き込みます）。 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;有効な32ビットfloatである&lt;em&gt;必要&lt;/em&gt;があります。 &lt;code&gt;value&lt;/code&gt; が32ビット浮動小数点以外の場合の動作は未定義です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5024b665d36c8f3a723ae24fc9876cafa751b928" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeInt16BE()&lt;/code&gt; writes big endian, &lt;code&gt;writeInt16LE()&lt;/code&gt; writes little endian). &lt;code&gt;value&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; be a valid signed 16-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 16-bit integer.</source>
          <target state="translated">指定されたエンディアン形式で、指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeInt16BE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeInt16LE()&lt;/code&gt; はリトルエンディアンを書き込みます）。 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;有効な符号付き16ビット整数である&lt;em&gt;必要&lt;/em&gt;があります。 &lt;code&gt;value&lt;/code&gt; が符号付き16ビット整数以外の場合の動作は未定義です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="284acb71a6f1e0fbd94e2e4f057497f2ea7774ff" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeInt32BE()&lt;/code&gt; writes big endian, &lt;code&gt;writeInt32LE()&lt;/code&gt; writes little endian). &lt;code&gt;value&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; be a valid signed 32-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 32-bit integer.</source>
          <target state="translated">指定されたエンディアン形式で、指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeInt32BE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeInt32LE()&lt;/code&gt; はリトルエンディアンを書き込みます）。 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;有効な符号付き32ビット整数である&lt;em&gt;必要&lt;/em&gt;があります。 &lt;code&gt;value&lt;/code&gt; が符号付き32ビット整数以外の場合の動作は未定義です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fbd9446c3bfff4782a454d2cfb92578ab63de8e" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeUInt16BE()&lt;/code&gt; writes big endian, &lt;code&gt;writeUInt16LE()&lt;/code&gt; writes little endian). &lt;code&gt;value&lt;/code&gt; should be a valid unsigned 16-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 16-bit integer.</source>
          <target state="translated">指定されたエンディアン形式で、指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeUInt16BE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeUInt16LE()&lt;/code&gt; はリトルエンディアンを書き込みます）。 &lt;code&gt;value&lt;/code&gt; は、有効な符号なし16ビット整数である必要があります。 &lt;code&gt;value&lt;/code&gt; が符号なし16ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="6c5491e2e05aee8bb56f6e9adb0c3fafeacf26c2" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt; with specified endian format (&lt;code&gt;writeUInt32BE()&lt;/code&gt; writes big endian, &lt;code&gt;writeUInt32LE()&lt;/code&gt; writes little endian). &lt;code&gt;value&lt;/code&gt; should be a valid unsigned 32-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 32-bit integer.</source>
          <target state="translated">指定されたエンディアン形式で、指定された &lt;code&gt;offset&lt;/code&gt; で &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます（ &lt;code&gt;writeUInt32BE()&lt;/code&gt; はビッグエンディアンを書き込み、 &lt;code&gt;writeUInt32LE()&lt;/code&gt; はリトルエンディアンを書き込みます）。 &lt;code&gt;value&lt;/code&gt; は、有効な符号なし32ビット整数である必要があります。 &lt;code&gt;value&lt;/code&gt; が符号なし32ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="57289a6a7a9de3e2dcd74444ede24784b1594808" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt; must be a valid signed 8-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 8-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; は、有効な符号付き8ビット整数である必要があります。 &lt;code&gt;value&lt;/code&gt; が符号付き8ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="65acd3624976c538def78552b10b347550b1c6c8" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt; must be a valid unsigned 8-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 8-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; は、有効な符号なし8ビット整数である必要があります。 &lt;code&gt;value&lt;/code&gt; が符号なし8ビット整数以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="37468020e2b7e0748aa2142de56b1c01eed933b6" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; be a valid signed 8-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than a signed 8-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;有効な符号付き8ビット整数である&lt;em&gt;必要&lt;/em&gt;があります。 &lt;code&gt;value&lt;/code&gt; が符号付き8ビット整数以外の場合の動作は未定義です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b7c855d67740b0a5d1fc05fd17e419db2a1c5540" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;value&lt;/code&gt; to &lt;code&gt;buf&lt;/code&gt; at the specified &lt;code&gt;offset&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt;&lt;em&gt;should&lt;/em&gt; be a valid unsigned 8-bit integer. Behavior is undefined when &lt;code&gt;value&lt;/code&gt; is anything other than an unsigned 8-bit integer.</source>
          <target state="translated">指定された &lt;code&gt;offset&lt;/code&gt; &lt;code&gt;buf&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; を書き込みます。 &lt;code&gt;value&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、有効な符号なし8ビット整数である&lt;em&gt;必要&lt;/em&gt;があります。 &lt;code&gt;value&lt;/code&gt; が符号なし8ビット整数以外の場合の動作は未定義です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="637b866360269d41abb4da8ab9f45eb85c6c4562" translate="yes" xml:space="preserve">
          <source>Writes a diagnostic report to a file. If &lt;code&gt;filename&lt;/code&gt; is not provided, the default filename includes the date, time, PID, and a sequence number. The report's JavaScript stack trace is taken from &lt;code&gt;err&lt;/code&gt;, if present.</source>
          <target state="translated">診断レポートをファイルに書き込みます。 &lt;code&gt;filename&lt;/code&gt; を指定しない場合、デフォルトのファイル名には、日付、時刻、PID、およびシーケンス番号が含まれます。レポートのJavaScriptスタックトレースは、存在する場合は &lt;code&gt;err&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="eeb9772f9524fa1b4acf8b284c0ca0d345bac1b4" translate="yes" xml:space="preserve">
          <source>Writes may be synchronous depending on what the stream is connected to and whether the system is Windows or POSIX:</source>
          <target state="translated">ストリームが何に接続されているか、システムがWindowsなのかPOSIXなのかによっては、書き込みが同期されることがあります。</target>
        </trans-unit>
        <trans-unit id="52e69715a04d319e593d12d93319343a3ae78893" translate="yes" xml:space="preserve">
          <source>Writes out a header, which includes the serialization format version.</source>
          <target state="translated">シリアライズフォーマットのバージョンを含むヘッダを書き出します。</target>
        </trans-unit>
        <trans-unit id="8374f703beef3d450fd9fe1960ce2fbfec64ae20" translate="yes" xml:space="preserve">
          <source>Writing data while the stream is not draining is particularly problematic for a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;, because the &lt;code&gt;Transform&lt;/code&gt; streams are paused by default until they are piped or a &lt;code&gt;'data'&lt;/code&gt; or &lt;code&gt;'readable'&lt;/code&gt; event handler is added.</source>
          <target state="translated">ストリームが排出されていない間にデータを書き込むことのために特に問題となる&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;するので、 &lt;code&gt;Transform&lt;/code&gt; ストリームは、それらがパイプ処理されるまで、デフォルトで一時停止されているか、 &lt;code&gt;'data'&lt;/code&gt; または &lt;code&gt;'readable'&lt;/code&gt; イベントハンドラが追加されます。</target>
        </trans-unit>
        <trans-unit id="edc0f06fef935e983df4951d8a8d4e28efce6907" translate="yes" xml:space="preserve">
          <source>Writing only</source>
          <target state="translated">書き込みのみ</target>
        </trans-unit>
        <trans-unit id="274f18c17545ea4efca15d34ac099fc63b709257" translate="yes" xml:space="preserve">
          <source>Zero-length &lt;code&gt;path&lt;/code&gt; segments are ignored.</source>
          <target state="translated">長さがゼロの &lt;code&gt;path&lt;/code&gt; セグメントは無視されます。</target>
        </trans-unit>
        <trans-unit id="50ac5b26dc7ecdfebb7e517c5d49739bbb1d6d72" translate="yes" xml:space="preserve">
          <source>Zero-length &lt;code&gt;path&lt;/code&gt; segments are ignored. If the joined path string is a zero-length string then &lt;code&gt;'.'&lt;/code&gt; will be returned, representing the current working directory.</source>
          <target state="translated">長さがゼロの &lt;code&gt;path&lt;/code&gt; セグメントは無視されます。結合されたパス文字列が長さゼロの文字列である場合、 &lt;code&gt;'.'&lt;/code&gt; 現在の作業ディレクトリを表す、が返されます。</target>
        </trans-unit>
        <trans-unit id="11bb391f0b17e28b6022b1e54849a09b53bb2edb" translate="yes" xml:space="preserve">
          <source>Zlib</source>
          <target state="translated">Zlib</target>
        </trans-unit>
        <trans-unit id="b71dd7017c73750d3b20b408485b837ad515505e" translate="yes" xml:space="preserve">
          <source>[&lt;code&gt;assert.equal()&lt;/code&gt;][]</source>
          <target state="translated">[&lt;code&gt;assert.equal()&lt;/code&gt;][]</target>
        </trans-unit>
        <trans-unit id="e64c00a8cdb2596ede01ddb4a7d7db7242069dca" translate="yes" xml:space="preserve">
          <source>[&lt;code&gt;assert.notDeepEqual()&lt;/code&gt;][]</source>
          <target state="translated">[&lt;code&gt;assert.notDeepEqual()&lt;/code&gt;][]</target>
        </trans-unit>
        <trans-unit id="9f7a99c8dbd0a9b0ba2d9001a63585aed464ba4a" translate="yes" xml:space="preserve">
          <source>[&lt;code&gt;assert.notEqual()&lt;/code&gt;][]</source>
          <target state="translated">[&lt;code&gt;assert.notEqual()&lt;/code&gt;][]</target>
        </trans-unit>
        <trans-unit id="0ff49a1539a7091bec4ab01248644f7c04f82f18" translate="yes" xml:space="preserve">
          <source>__dirname</source>
          <target state="translated">__dirname</target>
        </trans-unit>
        <trans-unit id="0b5a644275521dbf5ccb3e5642f25bcd37d18aa7" translate="yes" xml:space="preserve">
          <source>__filename</source>
          <target state="translated">__filename</target>
        </trans-unit>
        <trans-unit id="04aed8d7183a3cf1b4c2357474f76de93745defc" translate="yes" xml:space="preserve">
          <source>_write() is optional when providing _writev().</source>
          <target state="translated">_writev（）を提供する場合、_write（）はオプションです。</target>
        </trans-unit>
        <trans-unit id="f2fbc03b01b59b1fa737c795d22ccaa132256f49" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Buffer&lt;/code&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;value&lt;/code&gt; will be used in its entirety. To compare a partial &lt;code&gt;Buffer&lt;/code&gt;, use &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;buf.slice()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;value&lt;/code&gt; その全体が使用されます。部分的な &lt;code&gt;Buffer&lt;/code&gt; を比較するには、&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;buf.slice()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="bd8a082bc71b679c5c956525d77d78f903daf46f" translate="yes" xml:space="preserve">
          <source>a Worker pool around it could use the following structure:</source>
          <target state="translated">その周りのワーカープールは、以下の構造を使用することができます。</target>
        </trans-unit>
        <trans-unit id="1057c17cf233b8e05397cd75b5c38c64423c03a8" translate="yes" xml:space="preserve">
          <source>a number, &lt;code&gt;value&lt;/code&gt; will be interpreted as an unsigned 8-bit integer value between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;.</source>
          <target state="translated">数 &lt;code&gt;value&lt;/code&gt; の間の符号なし8ビット整数値として解釈され &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;255&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e18eeb88819228ed0370e744e2bba08eb2fbd2e3" translate="yes" xml:space="preserve">
          <source>a string, &lt;code&gt;value&lt;/code&gt; is interpreted according to the character encoding in &lt;code&gt;encoding&lt;/code&gt;.</source>
          <target state="translated">文字列、 &lt;code&gt;value&lt;/code&gt; はencodingの文字エンコーディングに従って解釈され &lt;code&gt;encoding&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ade6771c6ab0e990b497627b6199258ed7b1d22" translate="yes" xml:space="preserve">
          <source>abort event (http.ClientRequest)</source>
          <target state="translated">アボートイベント(http.ClientRequest)</target>
        </trans-unit>
        <trans-unit id="a4ebb648b667c4777f7652370a3bcadb05a1fb2c" translate="yes" xml:space="preserve">
          <source>aborted event (Http2Stream)</source>
          <target state="translated">中止されたイベント (Http2Stream)</target>
        </trans-unit>
        <trans-unit id="4a9fcaaf70d856db7f00eb240b4b41f9a3cff312" translate="yes" xml:space="preserve">
          <source>aborted event (http.IncomingMessage)</source>
          <target state="translated">中断されたイベント(http.IncomingMessage)</target>
        </trans-unit>
        <trans-unit id="53a9646aa4caa8db8443e70225d6289ee469adc0" translate="yes" xml:space="preserve">
          <source>aborted event (http2.Http2ServerRequest)</source>
          <target state="translated">中止されたイベント (http2.Http2ServerRequest)</target>
        </trans-unit>
        <trans-unit id="db701e58d0058ed1c7179ba5c625b61157bc5501" translate="yes" xml:space="preserve">
          <source>added &lt;code&gt;napi_default_method&lt;/code&gt; and &lt;code&gt;napi_default_property&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_default_method&lt;/code&gt; と &lt;code&gt;napi_default_property&lt;/code&gt; を追加しました。</target>
        </trans-unit>
        <trans-unit id="df3f8b34a62544d27d5f010b81c459d371bbe659" translate="yes" xml:space="preserve">
          <source>after()</source>
          <target state="translated">after()</target>
        </trans-unit>
        <trans-unit id="c77e45016896fd4a2782fd51ccd2faa96c6a34d4" translate="yes" xml:space="preserve">
          <source>after(asyncId)</source>
          <target state="translated">after(asyncId)</target>
        </trans-unit>
        <trans-unit id="e7432bcf472f9091fd900e6dcabb9364cae1a470" translate="yes" xml:space="preserve">
          <source>agent.createConnection()</source>
          <target state="translated">agent.createConnection()</target>
        </trans-unit>
        <trans-unit id="908feb3e55cee2b19df4b2416fc70e8bd7d7c04d" translate="yes" xml:space="preserve">
          <source>agent.createConnection(options[, callback])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L95&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">agent.createConnection（options [、callback]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L95&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="69a3714555191db344d9bb18afb6b7ffedda31a7" translate="yes" xml:space="preserve">
          <source>agent.destroy()</source>
          <target state="translated">agent.destroy()</target>
        </trans-unit>
        <trans-unit id="9077b386098bd26a4a932f3a6b12a9ed3aa01c5f" translate="yes" xml:space="preserve">
          <source>agent.destroy()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/_http_agent.js#L338&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">agent.destroy()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/_http_agent.js#L338&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf29a349fd2700b177e03073747f7786027a3faa" translate="yes" xml:space="preserve">
          <source>agent.freeSockets</source>
          <target state="translated">agent.freeSockets</target>
        </trans-unit>
        <trans-unit id="9759aae8106683167052d9d114e16c7050d01140" translate="yes" xml:space="preserve">
          <source>agent.getName()</source>
          <target state="translated">agent.getName()</target>
        </trans-unit>
        <trans-unit id="5aeb9d3aa234fe90b26c70890913c34b8a17c2f6" translate="yes" xml:space="preserve">
          <source>agent.getName(options)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L164&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">agent.getName(options)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/https.js#L164&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2176e8bf1805a2257884b418b44bf32b3f125932" translate="yes" xml:space="preserve">
          <source>agent.keepSocketAlive()</source>
          <target state="translated">agent.keepSocketAlive()</target>
        </trans-unit>
        <trans-unit id="46ff351e9d6283b3e4e7f628074e9a590703d63a" translate="yes" xml:space="preserve">
          <source>agent.keepSocketAlive(socket)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/_http_agent.js#L326&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">agent.keepSocketAlive(socket)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/_http_agent.js#L326&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ac2e35742ae2710ac42fa61bcf5d63a1321f4ab1" translate="yes" xml:space="preserve">
          <source>agent.maxFreeSockets</source>
          <target state="translated">agent.maxFreeSockets</target>
        </trans-unit>
        <trans-unit id="0c0e54ee5e4c6c5646da1bdbb0642e1658165917" translate="yes" xml:space="preserve">
          <source>agent.maxSockets</source>
          <target state="translated">agent.maxSockets</target>
        </trans-unit>
        <trans-unit id="392af47c14b564b3ef5daf2fa0a21ade303da45c" translate="yes" xml:space="preserve">
          <source>agent.requests</source>
          <target state="translated">agent.requests</target>
        </trans-unit>
        <trans-unit id="62a8c3389068cd7d17e23e961e65644bc45df089" translate="yes" xml:space="preserve">
          <source>agent.reuseSocket()</source>
          <target state="translated">agent.reuseSocket()</target>
        </trans-unit>
        <trans-unit id="e3ddab542e9d8396545ea5140f169d8d7878e427" translate="yes" xml:space="preserve">
          <source>agent.reuseSocket(socket, request)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/_http_agent.js#L333&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">agent.reuseSocket（ソケット、リクエスト）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/_http_agent.js#L333&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="d0cc0a54c5b39465fd7c37aa8c6ade3bc24c314d" translate="yes" xml:space="preserve">
          <source>agent.sockets</source>
          <target state="translated">agent.sockets</target>
        </trans-unit>
        <trans-unit id="2ae4e3c25a74c8888433ef5a7b66689ec0847294" translate="yes" xml:space="preserve">
          <source>all &lt;code&gt;fs&lt;/code&gt; APIs, other than the file watcher APIs and those that are explicitly synchronous</source>
          <target state="translated">File Watcher APIと明示的に同期されているAPIを除くすべての &lt;code&gt;fs&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="b6c8bf4ab9b11556666b71beeb4d27b9522cd1c5" translate="yes" xml:space="preserve">
          <source>all &lt;code&gt;zlib&lt;/code&gt; APIs, other than those that are explicitly synchronous</source>
          <target state="translated">明示的に同期されるものを除くすべての &lt;code&gt;zlib&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="63f772fe57389e36d8aa366bf74d60362b3c7320" translate="yes" xml:space="preserve">
          <source>all releases</source>
          <target state="translated">全リリース</target>
        </trans-unit>
        <trans-unit id="47b38b6b09876429f5787dad84caee58ca8c85d3" translate="yes" xml:space="preserve">
          <source>altsvc event (ClientHttp2Session)</source>
          <target state="translated">altsvc イベント (ClientHttp2Session)</target>
        </trans-unit>
        <trans-unit id="7a473528cc88cf2986148421b54b55f816bc4ade" translate="yes" xml:space="preserve">
          <source>and by checking, for all external libraries that it uses, that the external library makes ABI stability guarantees similar to N-API.</source>
          <target state="translated">また、使用するすべての外部ライブラリについて、外部ライブラリが N-API と同様の ABI 安定性保証を行っているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5b363f39528796e64f296068d71072624797c4f7" translate="yes" xml:space="preserve">
          <source>any records</source>
          <target state="translated">ぜんきろく</target>
        </trans-unit>
        <trans-unit id="64b5daad5073849378993ba34e058d7008293097" translate="yes" xml:space="preserve">
          <source>assert</source>
          <target state="translated">assert</target>
        </trans-unit>
        <trans-unit id="63ae10d79f4a0c4781e4e9b2dacd5c9896a57556" translate="yes" xml:space="preserve">
          <source>assert()</source>
          <target state="translated">assert()</target>
        </trans-unit>
        <trans-unit id="1a3065e73c8ff68081f50fb904bc7bbb9e96eeae" translate="yes" xml:space="preserve">
          <source>assert(value[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L76&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert（value [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L76&quot;&gt;[ソース]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ffbf8f3e47b029034b24735458a03234c521725" translate="yes" xml:space="preserve">
          <source>assert.AssertionError</source>
          <target state="translated">assert.AssertionError</target>
        </trans-unit>
        <trans-unit id="6c998ceff01d99d7b9de90f29f47e32d2d0ee80b" translate="yes" xml:space="preserve">
          <source>assert.deepEqual()</source>
          <target state="translated">assert.deepEqual()</target>
        </trans-unit>
        <trans-unit id="1c65a125849b88e2bbed76b82e94cee383a90244" translate="yes" xml:space="preserve">
          <source>assert.deepEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L421&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.deepEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L421&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c070be05744cba90e8dad98f799e40837bf11637" translate="yes" xml:space="preserve">
          <source>assert.deepStrictEqual()</source>
          <target state="translated">assert.deepStrictEqual()</target>
        </trans-unit>
        <trans-unit id="637ee5614670f7fd334d575c8582f21c2054290e" translate="yes" xml:space="preserve">
          <source>assert.deepStrictEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L455&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.deepStrictEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L455&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4386ffe649e4f9619dbf0298bcfe68841ba59c45" translate="yes" xml:space="preserve">
          <source>assert.doesNotReject()</source>
          <target state="translated">assert.doesNotReject()</target>
        </trans-unit>
        <trans-unit id="c7c372668a35495d7a68bf1e4e275ca645f456c8" translate="yes" xml:space="preserve">
          <source>assert.doesNotReject(asyncFn[, error][, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L788&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.doesNotReject（asyncFn [、error] [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L788&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="286071778e38d5ccb24ea528427d7cf6e0713657" translate="yes" xml:space="preserve">
          <source>assert.doesNotThrow()</source>
          <target state="translated">assert.doesNotThrow()</target>
        </trans-unit>
        <trans-unit id="9768ba79f4a4d0edc896241c78f04422ba987ba3" translate="yes" xml:space="preserve">
          <source>assert.doesNotThrow(fn[, error][, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L784&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.doesNotThrow（fn [、error] [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L784&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fe66f6731b1d5dcf18170b5a15adc6e221fe9dfe" translate="yes" xml:space="preserve">
          <source>assert.equal()</source>
          <target state="translated">assert.equal()</target>
        </trans-unit>
        <trans-unit id="9a668f3a3b8f5fdceac5987b4ddac4ebaf7c90ce" translate="yes" xml:space="preserve">
          <source>assert.equal(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L386&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.equal（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L386&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a864f3753fdd58f1c7bc7012ac0edc1bf5284b8" translate="yes" xml:space="preserve">
          <source>assert.fail()</source>
          <target state="translated">assert.fail()</target>
        </trans-unit>
        <trans-unit id="e7fef3b73a6ed860a5df88187437e07677645764" translate="yes" xml:space="preserve">
          <source>assert.fail([message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L92&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.fail([message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L92&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="af76795c8c8aadd739d437b3df21b1ab9d3c9f9b" translate="yes" xml:space="preserve">
          <source>assert.fail(actual, expected[, message[, operator[, stackStartFn]]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L92&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.fail（actual、expected [、message [、operator [、stackStartFn]]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L92&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc58e3b0561c33a3e2e4f8ff034e199a04a15c13" translate="yes" xml:space="preserve">
          <source>assert.ifError()</source>
          <target state="translated">assert.ifError()</target>
        </trans-unit>
        <trans-unit id="eb36718b201e68b49ae67084724cb2de00784c1f" translate="yes" xml:space="preserve">
          <source>assert.ifError(value)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L792&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.ifError(value)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L792&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6937f31c03da4f4ea4b081c82facf847f9c87100" translate="yes" xml:space="preserve">
          <source>assert.notDeepEqual()</source>
          <target state="translated">assert.notDeepEqual()</target>
        </trans-unit>
        <trans-unit id="4e4a2c47bb4daed4220784f69f3b4d5ecc829946" translate="yes" xml:space="preserve">
          <source>assert.notDeepEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L438&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.notDeepEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L438&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6e53668a01ae81fba40d0d1a247a42699a4a2dd" translate="yes" xml:space="preserve">
          <source>assert.notDeepStrictEqual()</source>
          <target state="translated">assert.notDeepStrictEqual()</target>
        </trans-unit>
        <trans-unit id="a31fc813aab8ca111968bfc31f960e35dcc61679" translate="yes" xml:space="preserve">
          <source>assert.notDeepStrictEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L472&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.notDeepStrictEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L472&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="627f048efc3f935b23d76a5b26bae496912206f5" translate="yes" xml:space="preserve">
          <source>assert.notEqual()</source>
          <target state="translated">assert.notEqual()</target>
        </trans-unit>
        <trans-unit id="a1e5cc897483c0bb6e32636dc0c58503614d9563" translate="yes" xml:space="preserve">
          <source>assert.notEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L404&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.notEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L404&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="94cf811166dc847bade52a9547cbf60705345af0" translate="yes" xml:space="preserve">
          <source>assert.notStrictEqual()</source>
          <target state="translated">assert.notStrictEqual()</target>
        </trans-unit>
        <trans-unit id="f697d001f074f0ec0f7e89870ee80ad517741201" translate="yes" xml:space="preserve">
          <source>assert.notStrictEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L503&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.notStrictEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L503&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b29427d7fba9116e9eff9107e5dd0a3a210c9287" translate="yes" xml:space="preserve">
          <source>assert.ok()</source>
          <target state="translated">assert.ok()</target>
        </trans-unit>
        <trans-unit id="1a9b72d9e05c0d5c16393802af05ae25f770c146" translate="yes" xml:space="preserve">
          <source>assert.ok(value[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L379&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.ok（value [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L379&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8ccfffedae43f08bb0cf431d6c66a06be3f33239" translate="yes" xml:space="preserve">
          <source>assert.rejects()</source>
          <target state="translated">assert.rejects()</target>
        </trans-unit>
        <trans-unit id="be7742aef4e160cd95ca1e4a47330942cb810a48" translate="yes" xml:space="preserve">
          <source>assert.rejects(asyncFn[, error][, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L780&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.rejects（asyncFn [、error] [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L780&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="698aaab1afcc5aab29f7ba8d00254d16273a9e16" translate="yes" xml:space="preserve">
          <source>assert.strictEqual()</source>
          <target state="translated">assert.strictEqual()</target>
        </trans-unit>
        <trans-unit id="188a1ba4fda838171b00e24bbf6b3ab24dde9332" translate="yes" xml:space="preserve">
          <source>assert.strictEqual(actual, expected[, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L488&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.strictEqual（actual、expected [、message]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L488&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="86aba819f58b60b6fafe16cfdfbb7a7c9703a869" translate="yes" xml:space="preserve">
          <source>assert.throws()</source>
          <target state="translated">assert.throws()</target>
        </trans-unit>
        <trans-unit id="f1491e54149f5da2befc9b6f6eab644a8fbf4c6b" translate="yes" xml:space="preserve">
          <source>assert.throws(fn[, error][, message])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L776&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">assert.throws（fn [、エラー] [、メッセージ]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/assert.js#L776&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="1b5d08dd661ecb4aa8239774dea5edc3144ee14f" translate="yes" xml:space="preserve">
          <source>asyncHook.disable()</source>
          <target state="translated">asyncHook.disable()</target>
        </trans-unit>
        <trans-unit id="50824976607cb90f68a0e4af12a0fdc1511ec97c" translate="yes" xml:space="preserve">
          <source>asyncHook.enable()</source>
          <target state="translated">asyncHook.enable()</target>
        </trans-unit>
        <trans-unit id="9395cfa6b41a14a6a5ba0c5a13f3f3466a361571" translate="yes" xml:space="preserve">
          <source>asyncResource.asyncId()</source>
          <target state="translated">asyncResource.asyncId()</target>
        </trans-unit>
        <trans-unit id="05ff704a190bc8e2513b14bb20e85087e27c9eb5" translate="yes" xml:space="preserve">
          <source>asyncResource.asyncId()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L187&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">asyncResource.asyncId()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L187&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37741f514fd78407eda3934f08092d640575e669" translate="yes" xml:space="preserve">
          <source>asyncResource.emitDestroy()</source>
          <target state="translated">asyncResource.emitDestroy()</target>
        </trans-unit>
        <trans-unit id="13dafd9a333b05495e4f8cd88834025113c3058f" translate="yes" xml:space="preserve">
          <source>asyncResource.emitDestroy()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L179&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">asyncResource.emitDestroy()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L179&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="557a9c254369f71955d75bf5e571fa74f276a171" translate="yes" xml:space="preserve">
          <source>asyncResource.runInAsyncScope()</source>
          <target state="translated">asyncResource.runInAsyncScope()</target>
        </trans-unit>
        <trans-unit id="8c244836dbf041aec1a36bb54b62fbeba311127f" translate="yes" xml:space="preserve">
          <source>asyncResource.runInAsyncScope(fn[, thisArg, ...args])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L167&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">asyncResource.runInAsyncScope（fn [、thisArg、... args]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L167&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e0fa0e80a804c749c1efd8f6418dd938b998742" translate="yes" xml:space="preserve">
          <source>asyncResource.triggerAsyncId()</source>
          <target state="translated">asyncResource.triggerAsyncId()</target>
        </trans-unit>
        <trans-unit id="aebf1475166b1624e2943bc5493985d97a60979c" translate="yes" xml:space="preserve">
          <source>asyncResource.triggerAsyncId()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L191&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">asyncResource.triggerAsyncId()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L191&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1e5ae03862c99c5cfa6ab0b52a98395198ae81cf" translate="yes" xml:space="preserve">
          <source>async_hooks</source>
          <target state="translated">async_hooks</target>
        </trans-unit>
        <trans-unit id="e3dfede5e930af37f119bac5b1860a6204007439" translate="yes" xml:space="preserve">
          <source>async_hooks.createHook()</source>
          <target state="translated">async_hooks.createHook()</target>
        </trans-unit>
        <trans-unit id="2164ffe6bcfb22406c890a8bfc9bf85a419f0425" translate="yes" xml:space="preserve">
          <source>async_hooks.createHook(callbacks)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L124&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">async_hooks.createHook(callbacks)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/async_hooks.js#L124&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cf4a40662a96de841e68a2fdad4d2cfa2a11c976" translate="yes" xml:space="preserve">
          <source>async_hooks.executionAsyncId()</source>
          <target state="translated">async_hooks.executionAsyncId()</target>
        </trans-unit>
        <trans-unit id="cf22de5d4bb8fc9948ef455a3b46f252e446ba97" translate="yes" xml:space="preserve">
          <source>async_hooks.triggerAsyncId()</source>
          <target state="translated">async_hooks.triggerAsyncId()</target>
        </trans-unit>
        <trans-unit id="d667ddbecdfd2116ea7c06d8b6cf924f8b2e49f1" translate="yes" xml:space="preserve">
          <source>asynchronous crypto APIs such as &lt;code&gt;crypto.pbkdf2()&lt;/code&gt;, &lt;code&gt;crypto.scrypt()&lt;/code&gt;, &lt;code&gt;crypto.randomBytes()&lt;/code&gt;, &lt;code&gt;crypto.randomFill()&lt;/code&gt;, &lt;code&gt;crypto.generateKeyPair()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;crypto.pbkdf2()&lt;/code&gt; 、 &lt;code&gt;crypto.scrypt()&lt;/code&gt; 、 &lt;code&gt;crypto.randomBytes()&lt;/code&gt; 、 &lt;code&gt;crypto.randomFill()&lt;/code&gt; 、 &lt;code&gt;crypto.generateKeyPair()&lt;/code&gt; などの非同期暗号API</target>
        </trans-unit>
        <trans-unit id="0fa4097fe1fb4bf0e8b9680dcd05894307892eb7" translate="yes" xml:space="preserve">
          <source>before()</source>
          <target state="translated">before()</target>
        </trans-unit>
        <trans-unit id="24d2d2f3ad44cf529cd2968dd6e1eae2c1f94ba7" translate="yes" xml:space="preserve">
          <source>before(asyncId)</source>
          <target state="translated">before(asyncId)</target>
        </trans-unit>
        <trans-unit id="4364efbc517f66a99a862edf5016df6bb13869ef" translate="yes" xml:space="preserve">
          <source>beforeExit event (Process)</source>
          <target state="translated">ビフォアエグジットイベント</target>
        </trans-unit>
        <trans-unit id="c0e62a8b3dd27e0f6f6b716b67d5b79f1987df48" translate="yes" xml:space="preserve">
          <source>blink - Hides and shows the text in an interval</source>
          <target state="translated">blink-テキストを間隔をおいて隠したり表示したりする</target>
        </trans-unit>
        <trans-unit id="ce6a9de71bcc8a59b4161f6bb09819f9519ab7f5" translate="yes" xml:space="preserve">
          <source>buf.buffer</source>
          <target state="translated">buf.buffer</target>
        </trans-unit>
        <trans-unit id="747c972ec221c1446b994ad4b274d54132410b80" translate="yes" xml:space="preserve">
          <source>buf.byteOffset</source>
          <target state="translated">buf.byteOffset</target>
        </trans-unit>
        <trans-unit id="53b22a3f87d2306298bdd8481618cdd5a3d67774" translate="yes" xml:space="preserve">
          <source>buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L759&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.compare（target [、targetStart [、targetEnd [、sourceStart [、sourceEnd]]]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L759&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="02277e203196054ede1908e089959ae1b26d37e4" translate="yes" xml:space="preserve">
          <source>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L681&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.copy（target [、targetStart [、sourceStart [、sourceEnd]]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L681&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9fc4bee8749904efd0685d9aa7d925137d3acc6c" translate="yes" xml:space="preserve">
          <source>buf.entries()</source>
          <target state="translated">buf.entries()</target>
        </trans-unit>
        <trans-unit id="c049970362e094d403626c338df306a0f242a1f5" translate="yes" xml:space="preserve">
          <source>buf.equals(otherBuffer)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L714&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.equals(otherBuffer)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L714&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c14f4279d1d1acc8e3ac708ee5775100d33af1ae" translate="yes" xml:space="preserve">
          <source>buf.fill(value[, offset[, end]][, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L888&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.fill（value [、offset [、end]] [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L888&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d490e5c617690c7f5f67bbd5f46bce3d90b6cc76" translate="yes" xml:space="preserve">
          <source>buf.includes(value[, byteOffset][, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L880&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.includes（value [、byteOffset] [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L880&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="762f2ca2370125edfe9c713a1fd7e5bf936c2824" translate="yes" xml:space="preserve">
          <source>buf.indexOf(value[, byteOffset][, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L872&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.indexOf（value [、byteOffset] [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L872&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bf8264970853463b3dc4b887deab1ae7e8bb846d" translate="yes" xml:space="preserve">
          <source>buf.keys()</source>
          <target state="translated">buf.keys()</target>
        </trans-unit>
        <trans-unit id="606f48d5fdb5f2e5b2e64fc40d0e046cd3de506b" translate="yes" xml:space="preserve">
          <source>buf.lastIndexOf(value[, byteOffset][, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L876&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.lastIndexOf（value [、byteOffset] [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L876&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a6de77e121d769580e3d9d68ec7c752d4ab340e2" translate="yes" xml:space="preserve">
          <source>buf.length</source>
          <target state="translated">buf.length</target>
        </trans-unit>
        <trans-unit id="8fe74448f8fa53727065af859752abbf87fe261e" translate="yes" xml:space="preserve">
          <source>buf.parent</source>
          <target state="translated">buf.parent</target>
        </trans-unit>
        <trans-unit id="759e1ba0f2d89de290b8fb6feaba7da03f9bff90" translate="yes" xml:space="preserve">
          <source>buf.readBigInt64BE([offset])</source>
          <target state="translated">buf.readBigInt64BE([offset])</target>
        </trans-unit>
        <trans-unit id="1bed668db33fdfd99ab690f227ee32a122ef2820" translate="yes" xml:space="preserve">
          <source>buf.readBigInt64LE([offset])</source>
          <target state="translated">buf.readBigInt64LE([offset])</target>
        </trans-unit>
        <trans-unit id="4a236e314c8297976a19b2668269272ccd8523cd" translate="yes" xml:space="preserve">
          <source>buf.readBigUInt64BE([offset])</source>
          <target state="translated">buf.readBigUInt64BE([offset])</target>
        </trans-unit>
        <trans-unit id="ced5fb3b293fb18175227b83b574250a0cc4a4d1" translate="yes" xml:space="preserve">
          <source>buf.readBigUInt64LE([offset])</source>
          <target state="translated">buf.readBigUInt64LE([offset])</target>
        </trans-unit>
        <trans-unit id="4cff9492a77cd5b73edd599448412860f855f282" translate="yes" xml:space="preserve">
          <source>buf.readDoubleBE([offset])</source>
          <target state="translated">buf.readDoubleBE([offset])</target>
        </trans-unit>
        <trans-unit id="10b48dbd565c11596a7a0aacc12e991d37105cd5" translate="yes" xml:space="preserve">
          <source>buf.readDoubleLE([offset])</source>
          <target state="translated">buf.readDoubleLE([offset])</target>
        </trans-unit>
        <trans-unit id="34ac7f88c3bd3a2bd289edc4deabb22b3d8ad227" translate="yes" xml:space="preserve">
          <source>buf.readFloatBE([offset])</source>
          <target state="translated">buf.readFloatBE([offset])</target>
        </trans-unit>
        <trans-unit id="23c804c3174efeb673e1d27992144c49f0d3db07" translate="yes" xml:space="preserve">
          <source>buf.readFloatLE([offset])</source>
          <target state="translated">buf.readFloatLE([offset])</target>
        </trans-unit>
        <trans-unit id="9c8dd32c5e1dca691bbc38588e96d5e97f9b7ea7" translate="yes" xml:space="preserve">
          <source>buf.readInt16BE([offset])</source>
          <target state="translated">buf.readInt16BE([offset])</target>
        </trans-unit>
        <trans-unit id="36bbea657d805f596e1034977f021878824755c5" translate="yes" xml:space="preserve">
          <source>buf.readInt16LE([offset])</source>
          <target state="translated">buf.readInt16LE([offset])</target>
        </trans-unit>
        <trans-unit id="c97ad46dfe47003f87fa04444b74738912c9e2f1" translate="yes" xml:space="preserve">
          <source>buf.readInt32BE([offset])</source>
          <target state="translated">buf.readInt32BE([offset])</target>
        </trans-unit>
        <trans-unit id="bc46ffcb8fb934671e24dde36f0c97b189011c6e" translate="yes" xml:space="preserve">
          <source>buf.readInt32LE([offset])</source>
          <target state="translated">buf.readInt32LE([offset])</target>
        </trans-unit>
        <trans-unit id="f159a5e6c80611b9332d3c3df7bff47b6519176b" translate="yes" xml:space="preserve">
          <source>buf.readInt8([offset])</source>
          <target state="translated">buf.readInt8([offset])</target>
        </trans-unit>
        <trans-unit id="a9fcf611991840d1b3b148384ea6240e6856e4ac" translate="yes" xml:space="preserve">
          <source>buf.readIntBE(offset, byteLength)</source>
          <target state="translated">buf.readIntBE(offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="44f9c557341cd8a40624f4ed82e78b45ed9aca2c" translate="yes" xml:space="preserve">
          <source>buf.readIntLE(offset, byteLength)</source>
          <target state="translated">buf.readIntLE(offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="c434581a4b60b09b8093f1540990b0fa261f9245" translate="yes" xml:space="preserve">
          <source>buf.readUInt16BE([offset])</source>
          <target state="translated">buf.readUInt16BE([offset])</target>
        </trans-unit>
        <trans-unit id="f97fb8c4944ae83d6fba71a56a7b671ddf870117" translate="yes" xml:space="preserve">
          <source>buf.readUInt16LE([offset])</source>
          <target state="translated">buf.readUInt16LE([offset])</target>
        </trans-unit>
        <trans-unit id="5ab2f1db2cb850f8d1a8cddbc8abc9f4e9b96f92" translate="yes" xml:space="preserve">
          <source>buf.readUInt32BE([offset])</source>
          <target state="translated">buf.readUInt32BE([offset])</target>
        </trans-unit>
        <trans-unit id="76d14214ab51731e2593e4d51d07bc940d66b58d" translate="yes" xml:space="preserve">
          <source>buf.readUInt32LE([offset])</source>
          <target state="translated">buf.readUInt32LE([offset])</target>
        </trans-unit>
        <trans-unit id="9fe39723359e7c652cab1b754fc6f430449dc7e6" translate="yes" xml:space="preserve">
          <source>buf.readUInt8([offset])</source>
          <target state="translated">buf.readUInt8([offset])</target>
        </trans-unit>
        <trans-unit id="a1048c2c7539a1b08ccf4e8a9eaab46b97997445" translate="yes" xml:space="preserve">
          <source>buf.readUIntBE(offset, byteLength)</source>
          <target state="translated">buf.readUIntBE(offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="75a7c5ee999e847a20af23bea273e6ef90855573" translate="yes" xml:space="preserve">
          <source>buf.readUIntLE(offset, byteLength)</source>
          <target state="translated">buf.readUIntLE(offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="0bbc1a58c5e470281013243cbf723d01d1c6ae86" translate="yes" xml:space="preserve">
          <source>buf.slice([start[, end]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1056&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.slice（[start [、end]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1056&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="578039e788fbb7fd1c06c7c89fbca1a41629612b" translate="yes" xml:space="preserve">
          <source>buf.subarray([start[, end]])</source>
          <target state="translated">buf.subarray([start[,end]])</target>
        </trans-unit>
        <trans-unit id="798ebb901864741f518a5945ac0091380ec5c4d6" translate="yes" xml:space="preserve">
          <source>buf.swap16()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1070&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.swap16()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1070&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="884ef837f2ea8a764e14c4a94d261b7a55b50dd8" translate="yes" xml:space="preserve">
          <source>buf.swap32()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1085&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.swap32()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1085&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="711adc07db8321cad769b188095a1f53a5d8a8cc" translate="yes" xml:space="preserve">
          <source>buf.swap64()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1102&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.swap64()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1102&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b34313175e7237150822eb2a0e2aa394ac12293e" translate="yes" xml:space="preserve">
          <source>buf.toJSON()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1029&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.toJSON()&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L1029&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0610e14246bdf73a5b89fa276eb93de39cb86b95" translate="yes" xml:space="preserve">
          <source>buf.toString([encoding[, start[, end]]])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L690&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.toString（[encoding [、start [、end]]]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L690&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53edff13cdb35768a2c14af819d9546c539ce321" translate="yes" xml:space="preserve">
          <source>buf.values()</source>
          <target state="translated">buf.values()</target>
        </trans-unit>
        <trans-unit id="23886d7fc4157e9a53bb2760c5a66e94757dc783" translate="yes" xml:space="preserve">
          <source>buf.write(string[, offset[, length]][, encoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L952&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">buf.write（string [、offset [、length]] [、encoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/buffer.js#L952&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44ac3b932669b0ecfa2f24a2e589ffc65c566ac9" translate="yes" xml:space="preserve">
          <source>buf.writeBigInt64BE(value[, offset])</source>
          <target state="translated">buf.writeBigInt64BE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="b1b7225a478f38a666b1d9baedcb6caa8861050e" translate="yes" xml:space="preserve">
          <source>buf.writeBigInt64LE(value[, offset])</source>
          <target state="translated">buf.writeBigInt64LE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="590eb801b5855c268ee0a188885f4aebc7d6b060" translate="yes" xml:space="preserve">
          <source>buf.writeBigUInt64BE(value[, offset])</source>
          <target state="translated">buf.writeBigUInt64BE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="89ab169601a57475d1d4e9ca54ed1923fe074bb2" translate="yes" xml:space="preserve">
          <source>buf.writeBigUInt64LE(value[, offset])</source>
          <target state="translated">buf.writeBigUInt64LE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="ba659a9ce07eb92d11b62131bf1d5295077ac20f" translate="yes" xml:space="preserve">
          <source>buf.writeDoubleBE(value[, offset])</source>
          <target state="translated">buf.writeDoubleBE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="622a14ff2748d0ac37eb69af43512e64ef16bbbe" translate="yes" xml:space="preserve">
          <source>buf.writeDoubleLE(value[, offset])</source>
          <target state="translated">buf.writeDoubleLE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="24c6b4f882a573fb0404b0e39e6ce24de3a9f8db" translate="yes" xml:space="preserve">
          <source>buf.writeFloatBE(value[, offset])</source>
          <target state="translated">buf.writeFloatBE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="a089efcc511531efe3a54cbac217c7cda24e0d2c" translate="yes" xml:space="preserve">
          <source>buf.writeFloatLE(value[, offset])</source>
          <target state="translated">buf.writeFloatLE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="ac4992c7d996dcf73335ab93045c55a104a6c904" translate="yes" xml:space="preserve">
          <source>buf.writeInt16BE(value[, offset])</source>
          <target state="translated">buf.writeInt16BE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="268839f16c84385e5634da17be0569702ea99aac" translate="yes" xml:space="preserve">
          <source>buf.writeInt16LE(value[, offset])</source>
          <target state="translated">buf.writeInt16LE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="44e784a5e761ee6be7f2ab1c09deaac174462fe9" translate="yes" xml:space="preserve">
          <source>buf.writeInt32BE(value[, offset])</source>
          <target state="translated">buf.writeInt32BE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="35099cdc0a8413d4c4401bbe74855850119f3356" translate="yes" xml:space="preserve">
          <source>buf.writeInt32LE(value[, offset])</source>
          <target state="translated">buf.writeInt32LE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="3c6faf4b14378b8d537e06f118c29a7253a98f82" translate="yes" xml:space="preserve">
          <source>buf.writeInt8(value[, offset])</source>
          <target state="translated">buf.writeInt8(value[,offset])</target>
        </trans-unit>
        <trans-unit id="b37c53a55e1cc118dbbb84726ba588f62fdebf21" translate="yes" xml:space="preserve">
          <source>buf.writeIntBE(value, offset, byteLength)</source>
          <target state="translated">buf.writeIntBE(value,offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="e025b37ca361e50636840fe2bbb46c52164111be" translate="yes" xml:space="preserve">
          <source>buf.writeIntLE(value, offset, byteLength)</source>
          <target state="translated">buf.writeIntLE(value,offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="ef5179e7d42a904e6b788210e79724658aff9629" translate="yes" xml:space="preserve">
          <source>buf.writeUInt16BE(value[, offset])</source>
          <target state="translated">buf.writeUInt16BE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="658989c19cde3c3db07f9dc5ac02af33a28febe2" translate="yes" xml:space="preserve">
          <source>buf.writeUInt16LE(value[, offset])</source>
          <target state="translated">buf.writeUInt16LE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="9b2c00cc251dfd99481ce63cc12500aab242fdd4" translate="yes" xml:space="preserve">
          <source>buf.writeUInt32BE(value[, offset])</source>
          <target state="translated">buf.writeUInt32BE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="3c26b9bcaca8466d897067976b88a769b7386327" translate="yes" xml:space="preserve">
          <source>buf.writeUInt32LE(value[, offset])</source>
          <target state="translated">buf.writeUInt32LE(value[,offset])</target>
        </trans-unit>
        <trans-unit id="0ff90af58fe26964319221e04221b4575fa3c7a2" translate="yes" xml:space="preserve">
          <source>buf.writeUInt8(value[, offset])</source>
          <target state="translated">buf.writeUInt8(value[,offset])</target>
        </trans-unit>
        <trans-unit id="8f438c86d19047d6de3b6d7c81c6986c31861ea0" translate="yes" xml:space="preserve">
          <source>buf.writeUIntBE(value, offset, byteLength)</source>
          <target state="translated">buf.writeUIntBE(value,offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="81f0d50aa5e35b6c131c660778ea8c57ce47f437" translate="yes" xml:space="preserve">
          <source>buf.writeUIntLE(value, offset, byteLength)</source>
          <target state="translated">buf.writeUIntLE(value,offset,byteLength)</target>
        </trans-unit>
        <trans-unit id="c97662b97c3ae43f4d083d2e256d7337c7a35f24" translate="yes" xml:space="preserve">
          <source>buf[index]</source>
          <target state="translated">buf[index]</target>
        </trans-unit>
        <trans-unit id="e53c2ea1fe4bd2b78bf4723c7c155a578e020a25" translate="yes" xml:space="preserve">
          <source>buffer</source>
          <target state="translated">buffer</target>
        </trans-unit>
        <trans-unit id="1b303e9922f30617988c23256edd77ba1b7604f4" translate="yes" xml:space="preserve">
          <source>buffer.INSPECT_MAX_BYTES</source>
          <target state="translated">buffer.INSPECT_MAX_BYTES</target>
        </trans-unit>
        <trans-unit id="866c2979105befe9a6382ee6858ff3a299530884" translate="yes" xml:space="preserve">
          <source>buffer.buffer</source>
          <target state="translated">buffer.buffer</target>
        </trans-unit>
        <trans-unit id="f8a4295ac6fd1d0c59312bf665c358c5ebd92267" translate="yes" xml:space="preserve">
          <source>buffer.byteOffset</source>
          <target state="translated">buffer.byteOffset</target>
        </trans-unit>
        <trans-unit id="3a96bbbbc94bd1a0311da0a810897f4ff161f825" translate="yes" xml:space="preserve">
          <source>buffer.compare()</source>
          <target state="translated">buffer.compare()</target>
        </trans-unit>
        <trans-unit id="23491d51fc6479b2138b04af46bb21063490fd2b" translate="yes" xml:space="preserve">
          <source>buffer.constants.MAX_LENGTH</source>
          <target state="translated">buffer.constants.MAX_LENGTH</target>
        </trans-unit>
        <trans-unit id="967f8011d7d460f6cd437186085b579bc1e2868a" translate="yes" xml:space="preserve">
          <source>buffer.constants.MAX_STRING_LENGTH</source>
          <target state="translated">buffer.constants.MAX_STRING_LENGTH</target>
        </trans-unit>
        <trans-unit id="c27699bc0aec31c57897e2ab630d5d610c015eef" translate="yes" xml:space="preserve">
          <source>buffer.copy()</source>
          <target state="translated">buffer.copy()</target>
        </trans-unit>
        <trans-unit id="1f2335568d382f33e0d8154e026c1fe1de48c3b7" translate="yes" xml:space="preserve">
          <source>buffer.entries()</source>
          <target state="translated">buffer.entries()</target>
        </trans-unit>
        <trans-unit id="563daf015dc3f2a7ff5ad19024a4df53b79eb2ab" translate="yes" xml:space="preserve">
          <source>buffer.equals()</source>
          <target state="translated">buffer.equals()</target>
        </trans-unit>
        <trans-unit id="84c6be5bd5f7fdc8ee94aa1598760bf12a7dc1f7" translate="yes" xml:space="preserve">
          <source>buffer.fill()</source>
          <target state="translated">buffer.fill()</target>
        </trans-unit>
        <trans-unit id="d4f0b0e9bfd61e33294e0b2eccfd258abb3f94da" translate="yes" xml:space="preserve">
          <source>buffer.includes()</source>
          <target state="translated">buffer.includes()</target>
        </trans-unit>
        <trans-unit id="77a2b56ca35b57ae8b2dd3bbba7b18e6135e731c" translate="yes" xml:space="preserve">
          <source>buffer.indexOf()</source>
          <target state="translated">buffer.indexOf()</target>
        </trans-unit>
        <trans-unit id="c1634b7b382a740652115419b38ea9909532a3ff" translate="yes" xml:space="preserve">
          <source>buffer.kMaxLength</source>
          <target state="translated">buffer.kMaxLength</target>
        </trans-unit>
        <trans-unit id="dd5bbffb26a6028ccce19bf9e0231e1193874e57" translate="yes" xml:space="preserve">
          <source>buffer.keys()</source>
          <target state="translated">buffer.keys()</target>
        </trans-unit>
        <trans-unit id="2a0836ba7fdcf6caf497b3feb36920dc30ec362c" translate="yes" xml:space="preserve">
          <source>buffer.lastIndexOf()</source>
          <target state="translated">buffer.lastIndexOf()</target>
        </trans-unit>
        <trans-unit id="a7dda681409c082fffd25d4b3aa77d0626828c63" translate="yes" xml:space="preserve">
          <source>buffer.length</source>
          <target state="translated">buffer.length</target>
        </trans-unit>
        <trans-unit id="ec8868e592c6dff7654b899ae21ff759bf2dd536" translate="yes" xml:space="preserve">
          <source>buffer.parent</source>
          <target state="translated">buffer.parent</target>
        </trans-unit>
        <trans-unit id="305bc142af3619c226247cc84847e966aa137b97" translate="yes" xml:space="preserve">
          <source>buffer.readBigInt64BE()</source>
          <target state="translated">buffer.readBigInt64BE()</target>
        </trans-unit>
        <trans-unit id="ccc07b67fab50739ad52d4fed105f9ca110598cc" translate="yes" xml:space="preserve">
          <source>buffer.readBigInt64LE()</source>
          <target state="translated">buffer.readBigInt64LE()</target>
        </trans-unit>
        <trans-unit id="042a3d861d91e023aa53589444a933af55ab6e50" translate="yes" xml:space="preserve">
          <source>buffer.readBigUInt64BE()</source>
          <target state="translated">buffer.readBigUInt64BE()</target>
        </trans-unit>
        <trans-unit id="421a19f76aaf33b06b2149f878753c50873a74e0" translate="yes" xml:space="preserve">
          <source>buffer.readBigUInt64LE()</source>
          <target state="translated">buffer.readBigUInt64LE()</target>
        </trans-unit>
        <trans-unit id="521100a807624b1c58d35bc565691752f2d3f3c7" translate="yes" xml:space="preserve">
          <source>buffer.readDoubleBE()</source>
          <target state="translated">buffer.readDoubleBE()</target>
        </trans-unit>
        <trans-unit id="d884700301d3e78cd606d0629f276b762fb3681c" translate="yes" xml:space="preserve">
          <source>buffer.readDoubleLE()</source>
          <target state="translated">buffer.readDoubleLE()</target>
        </trans-unit>
        <trans-unit id="3b0b799da2e6ed66fa3143a8e2370ee2d9a757a0" translate="yes" xml:space="preserve">
          <source>buffer.readFloatBE()</source>
          <target state="translated">buffer.readFloatBE()</target>
        </trans-unit>
        <trans-unit id="aeb1c7554661e932d86b8bcc99c0a4a84ebe0c8f" translate="yes" xml:space="preserve">
          <source>buffer.readFloatLE()</source>
          <target state="translated">buffer.readFloatLE()</target>
        </trans-unit>
        <trans-unit id="0fc4570bded99786d721e913538518bcdb1df3fe" translate="yes" xml:space="preserve">
          <source>buffer.readInt16BE()</source>
          <target state="translated">buffer.readInt16BE()</target>
        </trans-unit>
        <trans-unit id="34a2b12118eda510afce75597bc8eacea12f6f45" translate="yes" xml:space="preserve">
          <source>buffer.readInt16LE()</source>
          <target state="translated">buffer.readInt16LE()</target>
        </trans-unit>
        <trans-unit id="c24881b54546950886950c0500c105829ed3e30e" translate="yes" xml:space="preserve">
          <source>buffer.readInt32BE()</source>
          <target state="translated">buffer.readInt32BE()</target>
        </trans-unit>
        <trans-unit id="b15e8de91249208013f2074a8e27a7068baf1f2e" translate="yes" xml:space="preserve">
          <source>buffer.readInt32LE()</source>
          <target state="translated">buffer.readInt32LE()</target>
        </trans-unit>
        <trans-unit id="a9ed902b1f9038f9c9f6ae6b7f32a11b8e73850a" translate="yes" xml:space="preserve">
          <source>buffer.readInt8()</source>
          <target state="translated">buffer.readInt8()</target>
        </trans-unit>
        <trans-unit id="5d5d59f455ca0aafe6cee9eae3fe988475f7b59b" translate="yes" xml:space="preserve">
          <source>buffer.readIntBE()</source>
          <target state="translated">buffer.readIntBE()</target>
        </trans-unit>
        <trans-unit id="fba69e8d18111f0b641ba2ed6b16898ba56a8e13" translate="yes" xml:space="preserve">
          <source>buffer.readIntLE()</source>
          <target state="translated">buffer.readIntLE()</target>
        </trans-unit>
        <trans-unit id="bd6c0674217b16a5fb8fbfd3b59f4527fb0a3a9b" translate="yes" xml:space="preserve">
          <source>buffer.readUInt16BE()</source>
          <target state="translated">buffer.readUInt16BE()</target>
        </trans-unit>
        <trans-unit id="d30562aa840ef0b8ec842c2a11ee282062670ddb" translate="yes" xml:space="preserve">
          <source>buffer.readUInt16LE()</source>
          <target state="translated">buffer.readUInt16LE()</target>
        </trans-unit>
        <trans-unit id="3dff61d16767cbc575bed478a6dadb9b66fe08c9" translate="yes" xml:space="preserve">
          <source>buffer.readUInt32BE()</source>
          <target state="translated">buffer.readUInt32BE()</target>
        </trans-unit>
        <trans-unit id="38db2e586b41281aeb7ca078ca0023e76a1dbc25" translate="yes" xml:space="preserve">
          <source>buffer.readUInt32LE()</source>
          <target state="translated">buffer.readUInt32LE()</target>
        </trans-unit>
        <trans-unit id="7ec9e204d78101bfecd90fbe6a8bfc17d4baf03a" translate="yes" xml:space="preserve">
          <source>buffer.readUInt8()</source>
          <target state="translated">buffer.readUInt8()</target>
        </trans-unit>
        <trans-unit id="e18163615674fe158952ff6f8d3fad4dee75f482" translate="yes" xml:space="preserve">
          <source>buffer.readUIntBE()</source>
          <target state="translated">buffer.readUIntBE()</target>
        </trans-unit>
        <trans-unit id="4d39e034eafeeb0b60635d86eba3911a248711f6" translate="yes" xml:space="preserve">
          <source>buffer.readUIntLE()</source>
          <target state="translated">buffer.readUIntLE()</target>
        </trans-unit>
        <trans-unit id="822d3395a27c599345a63000f43eff7ca3d5237b" translate="yes" xml:space="preserve">
          <source>buffer.slice()</source>
          <target state="translated">buffer.slice()</target>
        </trans-unit>
        <trans-unit id="379b2d030be711c1facb28541bad05338d695521" translate="yes" xml:space="preserve">
          <source>buffer.subarray()</source>
          <target state="translated">buffer.subarray()</target>
        </trans-unit>
        <trans-unit id="d18b1939207e0a1354967cf48dd1929e7ee9557f" translate="yes" xml:space="preserve">
          <source>buffer.swap16()</source>
          <target state="translated">buffer.swap16()</target>
        </trans-unit>
        <trans-unit id="dfa846faa1a9f38ec58cfa3f4782186a283b17f1" translate="yes" xml:space="preserve">
          <source>buffer.swap32()</source>
          <target state="translated">buffer.swap32()</target>
        </trans-unit>
        <trans-unit id="bc463323226528afecb20e916430ea8011c28e0b" translate="yes" xml:space="preserve">
          <source>buffer.swap64()</source>
          <target state="translated">buffer.swap64()</target>
        </trans-unit>
        <trans-unit id="680e0d3f69f661d3f106a68f1dcc2457c7dd092d" translate="yes" xml:space="preserve">
          <source>buffer.toJSON()</source>
          <target state="translated">buffer.toJSON()</target>
        </trans-unit>
        <trans-unit id="5cc4b7d9dcdea2ce3e6c78b264b828089b0e95d5" translate="yes" xml:space="preserve">
          <source>buffer.toString()</source>
          <target state="translated">buffer.toString()</target>
        </trans-unit>
        <trans-unit id="913925f4b0534ddbe50f12d30bd50d5ef939a55c" translate="yes" xml:space="preserve">
          <source>buffer.transcode()</source>
          <target state="translated">buffer.transcode()</target>
        </trans-unit>
        <trans-unit id="004f87b0eee53ac018a3523af04742b473bca3ca" translate="yes" xml:space="preserve">
          <source>buffer.transcode(source, fromEnc, toEnc)</source>
          <target state="translated">buffer.transode(source,fromEnc,toEnc)</target>
        </trans-unit>
        <trans-unit id="1a37c3cc3c67ed3154154862909d3ab22693b6bb" translate="yes" xml:space="preserve">
          <source>buffer.values()</source>
          <target state="translated">buffer.values()</target>
        </trans-unit>
        <trans-unit id="b57417cc7ddefbab06ec6f89079dab216c574159" translate="yes" xml:space="preserve">
          <source>buffer.write()</source>
          <target state="translated">buffer.write()</target>
        </trans-unit>
        <trans-unit id="5e1f265adacc8fcb5ffeaa27a40132e9a67359be" translate="yes" xml:space="preserve">
          <source>buffer.writeBigInt64BE()</source>
          <target state="translated">buffer.writeBigInt64BE()</target>
        </trans-unit>
        <trans-unit id="93c6f2425ce23c7ec77b149a6a94c8e5d5cc5b36" translate="yes" xml:space="preserve">
          <source>buffer.writeBigInt64LE()</source>
          <target state="translated">buffer.writeBigInt64LE()</target>
        </trans-unit>
        <trans-unit id="dd0ac9afd4a2973e15f91ab859c9069804f6b7cb" translate="yes" xml:space="preserve">
          <source>buffer.writeBigUInt64BE()</source>
          <target state="translated">buffer.writeBigUInt64BE()</target>
        </trans-unit>
        <trans-unit id="4d17d700e0731765f5a4811693b40fd3060151c3" translate="yes" xml:space="preserve">
          <source>buffer.writeBigUInt64LE()</source>
          <target state="translated">buffer.writeBigUInt64LE()</target>
        </trans-unit>
        <trans-unit id="a530cda9c99ba8cc4447b6ef0236c619eefbbf37" translate="yes" xml:space="preserve">
          <source>buffer.writeDoubleBE()</source>
          <target state="translated">buffer.writeDoubleBE()</target>
        </trans-unit>
        <trans-unit id="3729490c201fd6753098ae57d41adddbb2107b85" translate="yes" xml:space="preserve">
          <source>buffer.writeDoubleLE()</source>
          <target state="translated">buffer.writeDoubleLE()</target>
        </trans-unit>
        <trans-unit id="110ff24c5bab739635f7c35cfc4648ffc617d99c" translate="yes" xml:space="preserve">
          <source>buffer.writeFloatBE()</source>
          <target state="translated">buffer.writeFloatBE()</target>
        </trans-unit>
        <trans-unit id="5891cc77f0e0847dad70811364ffa02783e28f46" translate="yes" xml:space="preserve">
          <source>buffer.writeFloatLE()</source>
          <target state="translated">buffer.writeFloatLE()</target>
        </trans-unit>
        <trans-unit id="9e40803a4b07b79648ce7eed21fa898b400ff50c" translate="yes" xml:space="preserve">
          <source>buffer.writeInt16BE()</source>
          <target state="translated">buffer.writeInt16BE()</target>
        </trans-unit>
        <trans-unit id="6e6255a018c4a2c4385d2b92076ee14ddf310e14" translate="yes" xml:space="preserve">
          <source>buffer.writeInt16LE()</source>
          <target state="translated">buffer.writeInt16LE()</target>
        </trans-unit>
        <trans-unit id="040e79e10070124ecc7720090f9f4716a57daca1" translate="yes" xml:space="preserve">
          <source>buffer.writeInt32BE()</source>
          <target state="translated">buffer.writeInt32BE()</target>
        </trans-unit>
        <trans-unit id="788ff1f605347f6dc66f78061eed7016af1699d0" translate="yes" xml:space="preserve">
          <source>buffer.writeInt32LE()</source>
          <target state="translated">buffer.writeInt32LE()</target>
        </trans-unit>
        <trans-unit id="f0d9cd85cc8d239cf3872b02edd04992cdaa7da2" translate="yes" xml:space="preserve">
          <source>buffer.writeInt8()</source>
          <target state="translated">buffer.writeInt8()</target>
        </trans-unit>
        <trans-unit id="707542c6ccd5873ec5a7b7141f072acdb4aba7e5" translate="yes" xml:space="preserve">
          <source>buffer.writeIntBE()</source>
          <target state="translated">buffer.writeIntBE()</target>
        </trans-unit>
        <trans-unit id="42de9a20a037bde934c131e3ede665922802820e" translate="yes" xml:space="preserve">
          <source>buffer.writeIntLE()</source>
          <target state="translated">buffer.writeIntLE()</target>
        </trans-unit>
        <trans-unit id="0faf5a898ae637990283804ce4b66ca22b995133" translate="yes" xml:space="preserve">
          <source>buffer.writeUInt16BE()</source>
          <target state="translated">buffer.writeUInt16BE()</target>
        </trans-unit>
        <trans-unit id="9f18a59d5d1211ac3d41f0cf40fc90381aa49734" translate="yes" xml:space="preserve">
          <source>buffer.writeUInt16LE()</source>
          <target state="translated">buffer.writeUInt16LE()</target>
        </trans-unit>
        <trans-unit id="6da021f4185dc55c77074b56a730678782751d1d" translate="yes" xml:space="preserve">
          <source>buffer.writeUInt32BE()</source>
          <target state="translated">buffer.writeUInt32BE()</target>
        </trans-unit>
        <trans-unit id="1123658d123733f4de619f058eece02ad4875848" translate="yes" xml:space="preserve">
          <source>buffer.writeUInt32LE()</source>
          <target state="translated">buffer.writeUInt32LE()</target>
        </trans-unit>
        <trans-unit id="c2ba7ac7b04eb5c5a3a6418daa4c50e03c46529b" translate="yes" xml:space="preserve">
          <source>buffer.writeUInt8()</source>
          <target state="translated">buffer.writeUInt8()</target>
        </trans-unit>
        <trans-unit id="1039cf4b69eabc02a949290bbd023a8d1e466596" translate="yes" xml:space="preserve">
          <source>buffer.writeUIntBE()</source>
          <target state="translated">buffer.writeUIntBE()</target>
        </trans-unit>
        <trans-unit id="61fdb54968856fe817091be507c0286e690e93e5" translate="yes" xml:space="preserve">
          <source>buffer.writeUIntLE()</source>
          <target state="translated">buffer.writeUIntLE()</target>
        </trans-unit>
        <trans-unit id="76d07af40629e1576bb81ccfc10cb0459fb3c021" translate="yes" xml:space="preserve">
          <source>buffer[]</source>
          <target state="translated">buffer[]</target>
        </trans-unit>
        <trans-unit id="1aded413bbbdffef6f1ceae10b1e04181420dadd" translate="yes" xml:space="preserve">
          <source>calls the following callbacks:</source>
          <target state="translated">は以下のコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="631b1c1a24b6ceaa5c8fea8ae2e6b485928c7037" translate="yes" xml:space="preserve">
          <source>can be replaced by:</source>
          <target state="translated">に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="452a6386a97517219f80f8bace00ab16d94c0a27" translate="yes" xml:space="preserve">
          <source>canonical name records</source>
          <target state="translated">正統名録</target>
        </trans-unit>
        <trans-unit id="5b54b7c19c6bad95e1110685a4f63fa380574b8c" translate="yes" xml:space="preserve">
          <source>certificate.exportChallenge()</source>
          <target state="translated">certificate.exportChallenge()</target>
        </trans-unit>
        <trans-unit id="71692c3241024cfc9e8a019c47a57a484bf848c3" translate="yes" xml:space="preserve">
          <source>certificate.exportChallenge(spkac)</source>
          <target state="translated">certificate.exportChallenge(spkac)</target>
        </trans-unit>
        <trans-unit id="b3165837185ca1b23abe88b13e1a0bb56b33b347" translate="yes" xml:space="preserve">
          <source>certificate.exportPublicKey()</source>
          <target state="translated">certificate.exportPublicKey()</target>
        </trans-unit>
        <trans-unit id="eca4ec840062473362bce9744267a4ee4319a1c5" translate="yes" xml:space="preserve">
          <source>certificate.exportPublicKey(spkac)</source>
          <target state="translated">certificate.exportPublicKey(spkac)</target>
        </trans-unit>
        <trans-unit id="c74ea8d0788b8e079c962a7820091bc6c5e1148a" translate="yes" xml:space="preserve">
          <source>certificate.verifySpkac()</source>
          <target state="translated">certificate.verifySpkac()</target>
        </trans-unit>
        <trans-unit id="b22f589fc8f9da21c14aa063e2aec580d2ed2ab5" translate="yes" xml:space="preserve">
          <source>certificate.verifySpkac(spkac)</source>
          <target state="translated">certificate.verifySpkac(spkac)</target>
        </trans-unit>
        <trans-unit id="fcd91b68a49a82061df6dad8e6d94c6532967731" translate="yes" xml:space="preserve">
          <source>change event (fs.FSWatcher)</source>
          <target state="translated">変更イベント</target>
        </trans-unit>
        <trans-unit id="daa1512df45dd945d6d8ec496658d091e9e2b762" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-filename&lt;/code&gt; to &lt;code&gt;--report-filename&lt;/code&gt;</source>
          <target state="translated">変更 &lt;code&gt;--diagnostic-report-filename&lt;/code&gt; に &lt;code&gt;--report-filename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3064800a8b66a8d3960267c531183cdc31f4bbc6" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-filename&lt;/code&gt; to &lt;code&gt;--report-filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-filename&lt;/code&gt; から &lt;code&gt;--report-filename&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="c92cfdb8f935fb84cb1bd1bd74421e37f7354abb" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-on-fatalerror&lt;/code&gt; to &lt;code&gt;--report-on-fatalerror&lt;/code&gt;</source>
          <target state="translated">変更 &lt;code&gt;--diagnostic-report-on-fatalerror&lt;/code&gt; する &lt;code&gt;--report-on-fatalerror&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80db06d0904cad7bcbc7fd6c909cff717860f569" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-on-fatalerror&lt;/code&gt; to &lt;code&gt;--report-on-fatalerror&lt;/code&gt;.</source>
          <target state="translated">変更 &lt;code&gt;--diagnostic-report-on-fatalerror&lt;/code&gt; に &lt;code&gt;--report-on-fatalerror&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="065d92edd28b68f9f80db90731b7e3edefc06572" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-on-signal&lt;/code&gt; to &lt;code&gt;--report-on-signal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-on-signal&lt;/code&gt; から &lt;code&gt;--report-on-signal&lt;/code&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="b568b1a9c3d811d830a6b30befdce670288dbe8f" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-on-signal&lt;/code&gt; to &lt;code&gt;--report-on-signal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-on-signal&lt;/code&gt; から &lt;code&gt;--report-on-signal&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="b93e8f697979cf358144a8db69e75e8d3f26cb50" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-signal&lt;/code&gt; to &lt;code&gt;--report-signal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-signal&lt;/code&gt; から &lt;code&gt;--report-signal&lt;/code&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="d3af2be5ed72462a66708e65740cac12ce7d5ccb" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-signal&lt;/code&gt; to &lt;code&gt;--report-signal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-signal&lt;/code&gt; から &lt;code&gt;--report-signal&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="e43c7204c41254544b177f7867f4292fc3267c4f" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-uncaught-exception&lt;/code&gt; to &lt;code&gt;--report-uncaught-exception&lt;/code&gt;</source>
          <target state="translated">変更 &lt;code&gt;--diagnostic-report-uncaught-exception&lt;/code&gt; に &lt;code&gt;--report-uncaught-exception&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="694154bbdc240709050669e39612949e67b37dd3" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--diagnostic-report-uncaught-exception&lt;/code&gt; to &lt;code&gt;--report-uncaught-exception&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--diagnostic-report-uncaught-exception&lt;/code&gt; から &lt;code&gt;--report-uncaught-exception&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="c07a2f5557de61a5ea62cbe091879f3fb946c83d" translate="yes" xml:space="preserve">
          <source>changed from &lt;code&gt;--experimental-wasi-unstable-preview0&lt;/code&gt; to &lt;code&gt;--experimental-wasi-unstable-preview1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-wasi-unstable-preview0&lt;/code&gt; から &lt;code&gt;--experimental-wasi-unstable-preview1&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="feea35f286f04f8e14a5a51e695669af33305560" translate="yes" xml:space="preserve">
          <source>checkContinue event (Http2SecureServer)</source>
          <target state="translated">checkContinue イベント (Http2SecureServer)</target>
        </trans-unit>
        <trans-unit id="e32638ac55bc9211c75b77da06ea19cdab499904" translate="yes" xml:space="preserve">
          <source>checkContinue event (Http2Server)</source>
          <target state="translated">checkContinue イベント (Http2Server)</target>
        </trans-unit>
        <trans-unit id="7ffd49ac7f86232c0f30a6cdb328c6f61fdc2a2a" translate="yes" xml:space="preserve">
          <source>checkContinue event (http.Server)</source>
          <target state="translated">checkContinue イベント (http.Server)</target>
        </trans-unit>
        <trans-unit id="8461f7793b71b0367668fc77076f280644e1c938" translate="yes" xml:space="preserve">
          <source>checkExpectation event (http.Server)</source>
          <target state="translated">checkExpectation イベント</target>
        </trans-unit>
        <trans-unit id="7508eb98bed5fb27d61eb8664bbae4574aa26617" translate="yes" xml:space="preserve">
          <source>child process stdin</source>
          <target state="translated">子プロセス標準入力</target>
        </trans-unit>
        <trans-unit id="f6bffeb3250608f9d17ce91ff1be89c3073ca51c" translate="yes" xml:space="preserve">
          <source>child process stdout and stderr</source>
          <target state="translated">子プロセス標準出力と標準エラー</target>
        </trans-unit>
        <trans-unit id="4845fa97410ff33f0112adeae3dd54c7b063c002" translate="yes" xml:space="preserve">
          <source>child_process</source>
          <target state="translated">child_process</target>
        </trans-unit>
        <trans-unit id="8dbb26afee545d0c22f68bf2f64c5c880abc61e7" translate="yes" xml:space="preserve">
          <source>child_process.exec()</source>
          <target state="translated">child_process.exec()</target>
        </trans-unit>
        <trans-unit id="4869cc49df388626488c147926142e9f37e6956a" translate="yes" xml:space="preserve">
          <source>child_process.exec(command[, options][, callback])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L143&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.exec（コマンド[、オプション] [、コールバック]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L143&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="be890a837a87c14680d937dfb8c2a4023651b6d7" translate="yes" xml:space="preserve">
          <source>child_process.execFile()</source>
          <target state="translated">child_process.execFile()</target>
        </trans-unit>
        <trans-unit id="cc23f2eca151ea00f83308c26d17b5e57cee8866" translate="yes" xml:space="preserve">
          <source>child_process.execFile(file[, args][, options][, callback])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L178&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.execFile（file [、args] [、options] [、callback]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L178&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3940015c992b8f3372a738a5048b5c1f537f6d9f" translate="yes" xml:space="preserve">
          <source>child_process.execFileSync()</source>
          <target state="translated">child_process.execFileSync()</target>
        </trans-unit>
        <trans-unit id="2b3608a2fd513c35dd045b7f0f44f61fa92cc4f2" translate="yes" xml:space="preserve">
          <source>child_process.execFileSync(file[, args][, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L630&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.execFileSync（file [、args] [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L630&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1dcdce597824bd2ff8293f9de6f794862fc75bed" translate="yes" xml:space="preserve">
          <source>child_process.execSync()</source>
          <target state="translated">child_process.execSync()</target>
        </trans-unit>
        <trans-unit id="4975d43ebbc8311cb903fa3af91256923a522529" translate="yes" xml:space="preserve">
          <source>child_process.execSync(command[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L648&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.execSync（コマンド[、オプション]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L648&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="f73451563991cc552e0a2cf56a8ae744d65e5174" translate="yes" xml:space="preserve">
          <source>child_process.fork()</source>
          <target state="translated">child_process.fork()</target>
        </trans-unit>
        <trans-unit id="25b2f68f746102b8ed7728a90bf61975a0fb84b0" translate="yes" xml:space="preserve">
          <source>child_process.fork(modulePath[, args][, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L54&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.fork（modulePath [、args] [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L54&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="760b6dcad88de5a1bbcc0b9a838ad7dca9f9215f" translate="yes" xml:space="preserve">
          <source>child_process.spawn()</source>
          <target state="translated">child_process.spawn()</target>
        </trans-unit>
        <trans-unit id="faecab8a95c5a3a5e990110a5b3c7249d6276b74" translate="yes" xml:space="preserve">
          <source>child_process.spawn(command[, args][, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L533&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.spawn（コマンド[、引数] [、オプション]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L533&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="632693b2c1a4d920cb21b7aa9c121f885b0034c3" translate="yes" xml:space="preserve">
          <source>child_process.spawnSync()</source>
          <target state="translated">child_process.spawnSync()</target>
        </trans-unit>
        <trans-unit id="631096f840b4bb07847560fc7012f2cc2ddb95eb" translate="yes" xml:space="preserve">
          <source>child_process.spawnSync(command[, args][, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L556&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">child_process.spawnSync（コマンド[、引数] [、オプション]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/child_process.js#L556&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="1afe9a4eef9851db5bde1cd23b060d198c4adf60" translate="yes" xml:space="preserve">
          <source>cipher.final()</source>
          <target state="translated">cipher.final()</target>
        </trans-unit>
        <trans-unit id="31026cd47490e10d6a87fd810d82827ad6028f3e" translate="yes" xml:space="preserve">
          <source>cipher.final([outputEncoding])</source>
          <target state="translated">cipher.final([outputEncoding])</target>
        </trans-unit>
        <trans-unit id="d0332cc334345e379d7fdbabb050409cf0ed2518" translate="yes" xml:space="preserve">
          <source>cipher.getAuthTag()</source>
          <target state="translated">cipher.getAuthTag()</target>
        </trans-unit>
        <trans-unit id="823494ff216e0efe9b6bc75c7d89e39a29eb9792" translate="yes" xml:space="preserve">
          <source>cipher.setAAD()</source>
          <target state="translated">cipher.setAAD()</target>
        </trans-unit>
        <trans-unit id="48bd79642dba9b9198c1f1ea13e25d0ea469c600" translate="yes" xml:space="preserve">
          <source>cipher.setAAD(buffer[, options])</source>
          <target state="translated">cipher.setAAD(buffer[,options])</target>
        </trans-unit>
        <trans-unit id="70644aaa9e2bba1b4d1fb12b801a39a09ee10a64" translate="yes" xml:space="preserve">
          <source>cipher.setAutoPadding()</source>
          <target state="translated">cipher.setAutoPadding()</target>
        </trans-unit>
        <trans-unit id="b7657e481b7a929e196cd8a4e90328a050a52870" translate="yes" xml:space="preserve">
          <source>cipher.setAutoPadding([autoPadding])</source>
          <target state="translated">cipher.setAutoPadding([autoPadding])</target>
        </trans-unit>
        <trans-unit id="0a2bc7b2cfe26b0f8ec4251548f27f5926dae9d4" translate="yes" xml:space="preserve">
          <source>cipher.update()</source>
          <target state="translated">cipher.update()</target>
        </trans-unit>
        <trans-unit id="df531e80ef8324ad8d799e1ad78226edb1711c78" translate="yes" xml:space="preserve">
          <source>cipher.update(data[, inputEncoding][, outputencoding])</source>
          <target state="translated">cipher.update(data[,inputEncoding][,outputencoding])</target>
        </trans-unit>
        <trans-unit id="04671aa4e2a82e01c2779ef7aedd4e23dd313109" translate="yes" xml:space="preserve">
          <source>class: FileHandle</source>
          <target state="translated">クラスを使用しています。ファイルハンドル</target>
        </trans-unit>
        <trans-unit id="7e54318d5e7d5c66dfba7ca879693ed9c1cea3b8" translate="yes" xml:space="preserve">
          <source>class: v8.DefaultDeserializer</source>
          <target state="translated">クラス:v8.DefaultDeserializer</target>
        </trans-unit>
        <trans-unit id="32c51c10096ce748ec9612cb89f92323c6116c32" translate="yes" xml:space="preserve">
          <source>class: v8.DefaultSerializer</source>
          <target state="translated">クラス:v8.DefaultSerializer</target>
        </trans-unit>
        <trans-unit id="17d4d5355269b7b42ddb28842b260e9c09844fed" translate="yes" xml:space="preserve">
          <source>class: v8.Deserializer</source>
          <target state="translated">クラス:v8.Deserializer</target>
        </trans-unit>
        <trans-unit id="a291be7832a0e9f988e9ec6260c915cf25840b4d" translate="yes" xml:space="preserve">
          <source>class: v8.Serializer</source>
          <target state="translated">クラス:v8.Serializer</target>
        </trans-unit>
        <trans-unit id="25213d63e67e7bbc5b1fe6946dacd11b2a5a8efd" translate="yes" xml:space="preserve">
          <source>clearImmediate()</source>
          <target state="translated">clearImmediate()</target>
        </trans-unit>
        <trans-unit id="1fbc56564e2108e59f2beca2598b94898fa78976" translate="yes" xml:space="preserve">
          <source>clearImmediate(immediate)</source>
          <target state="translated">clearImmediate(immediate)</target>
        </trans-unit>
        <trans-unit id="779b8e4ce3443cda8e707af0881701334eb04496" translate="yes" xml:space="preserve">
          <source>clearImmediate(immediateObject)</source>
          <target state="translated">clearImmediate(immediateObject)</target>
        </trans-unit>
        <trans-unit id="bb636c653ee12ad4eab24f318c786c172c2fa694" translate="yes" xml:space="preserve">
          <source>clearInterval()</source>
          <target state="translated">clearInterval()</target>
        </trans-unit>
        <trans-unit id="554b19a8dd48262d6d23d0cf6662ce905f55ef90" translate="yes" xml:space="preserve">
          <source>clearInterval(intervalObject)</source>
          <target state="translated">clearInterval(intervalObject)</target>
        </trans-unit>
        <trans-unit id="ce790b8215bebd96895f893d9f6dda6285401214" translate="yes" xml:space="preserve">
          <source>clearInterval(timeout)</source>
          <target state="translated">clearInterval(timeout)</target>
        </trans-unit>
        <trans-unit id="99b96b6c7a800a8861eedb4b9664004f20f83d8d" translate="yes" xml:space="preserve">
          <source>clearTimeout()</source>
          <target state="translated">clearTimeout()</target>
        </trans-unit>
        <trans-unit id="a96965e0cdf49eb6e9219a7d569a65b57baca266" translate="yes" xml:space="preserve">
          <source>clearTimeout(timeout)</source>
          <target state="translated">clearTimeout(timeout)</target>
        </trans-unit>
        <trans-unit id="d63bf1558d983d0b9a5c69a308de0a3cf6ef467c" translate="yes" xml:space="preserve">
          <source>clearTimeout(timeoutObject)</source>
          <target state="translated">clearTimeout(timeoutObject)</target>
        </trans-unit>
        <trans-unit id="2bd8e9c9c868efe968cc583d2d49f67380967d94" translate="yes" xml:space="preserve">
          <source>cli</source>
          <target state="translated">cli</target>
        </trans-unit>
        <trans-unit id="01682ea14c3e75d12014a844e6d5cb7a34b07b90" translate="yes" xml:space="preserve">
          <source>clientError event (http.Server)</source>
          <target state="translated">clientError イベント (http.Server)</target>
        </trans-unit>
        <trans-unit id="26cabde20d28663797deed775ed68748f1f6d3e5" translate="yes" xml:space="preserve">
          <source>clienthttp2session.request()</source>
          <target state="translated">clienthttp2session.request()</target>
        </trans-unit>
        <trans-unit id="cc4c5f9406433d1037153ae7c5413295cf4dffb7" translate="yes" xml:space="preserve">
          <source>clienthttp2session.request(headers[, options])</source>
          <target state="translated">clienthttp2session.request(headers[,options])</target>
        </trans-unit>
        <trans-unit id="33ae16233989d513b2102ef4ed546cf5ee8105ea" translate="yes" xml:space="preserve">
          <source>close event (ChildProcess)</source>
          <target state="translated">終了イベント</target>
        </trans-unit>
        <trans-unit id="9d505910a74e8d9f81b852098fa6bfc968291aac" translate="yes" xml:space="preserve">
          <source>close event (Http2Session)</source>
          <target state="translated">終了イベント (Http2Session)</target>
        </trans-unit>
        <trans-unit id="c076e5470e1f145af5d35711da1e1d5dcaa4ba5b" translate="yes" xml:space="preserve">
          <source>close event (Http2Stream)</source>
          <target state="translated">終了イベント (Http2Stream)</target>
        </trans-unit>
        <trans-unit id="ff8eaf5ee100560b3e51592bdc44cb9bc9242760" translate="yes" xml:space="preserve">
          <source>close event (Interface)</source>
          <target state="translated">終了イベント</target>
        </trans-unit>
        <trans-unit id="9aabbff29351b5013a7793346bbf8184568d2455" translate="yes" xml:space="preserve">
          <source>close event (MessagePort)</source>
          <target state="translated">終了イベント</target>
        </trans-unit>
        <trans-unit id="c3f65da7df0b22a521ddb9ba90403d425c76f9d7" translate="yes" xml:space="preserve">
          <source>close event (dgram.Socket)</source>
          <target state="translated">終了イベント(dgram.Socket)</target>
        </trans-unit>
        <trans-unit id="92767a0f3c1e2c7b4c0b7af80027a46765a3d23a" translate="yes" xml:space="preserve">
          <source>close event (fs.FSWatcher)</source>
          <target state="translated">クローズイベント</target>
        </trans-unit>
        <trans-unit id="ff3b91c9b31e90dcc66be16045a7354fdd621dbd" translate="yes" xml:space="preserve">
          <source>close event (fs.ReadStream)</source>
          <target state="translated">終了イベント (fs.ReadStream)</target>
        </trans-unit>
        <trans-unit id="e57a635e65803b7f34ea28f6e39111c3504e1e02" translate="yes" xml:space="preserve">
          <source>close event (fs.WriteStream)</source>
          <target state="translated">終了イベント (fs.WriteStream)</target>
        </trans-unit>
        <trans-unit id="08ea7fc3a91ab35feef5e437dc3da169a575aa61" translate="yes" xml:space="preserve">
          <source>close event (http.IncomingMessage)</source>
          <target state="translated">終了イベント</target>
        </trans-unit>
        <trans-unit id="b9f9c046f98e583d5e22febfd79dabcaec227f62" translate="yes" xml:space="preserve">
          <source>close event (http.Server)</source>
          <target state="translated">クローズイベント</target>
        </trans-unit>
        <trans-unit id="a78105e56acaf07a230a85b2264d7b9a9edb2087" translate="yes" xml:space="preserve">
          <source>close event (http.ServerResponse)</source>
          <target state="translated">close イベント (http.ServerResponse)</target>
        </trans-unit>
        <trans-unit id="ebb9b39faa83949ea7dc58725dd19884f10368d5" translate="yes" xml:space="preserve">
          <source>close event (http2.Http2ServerRequest)</source>
          <target state="translated">終了イベント (http2.Http2ServerRequest)</target>
        </trans-unit>
        <trans-unit id="65086e66f987eee54ce2e4cf5b0b7bf55a58a40e" translate="yes" xml:space="preserve">
          <source>close event (http2.Http2ServerResponse)</source>
          <target state="translated">終了イベント (http2.Http2ServerResponse)</target>
        </trans-unit>
        <trans-unit id="20616d33f8571d367aa7359af4f7e175bfcb5a2a" translate="yes" xml:space="preserve">
          <source>close event (net.Server)</source>
          <target state="translated">終了イベント</target>
        </trans-unit>
        <trans-unit id="9463d1c794e1fe717fa2f40ae6f22632873058b7" translate="yes" xml:space="preserve">
          <source>close event (net.Socket)</source>
          <target state="translated">終了イベント</target>
        </trans-unit>
        <trans-unit id="c2734b1868f5a33fe546e28904924786d1fe1e42" translate="yes" xml:space="preserve">
          <source>close event (stream.Readable)</source>
          <target state="translated">クローズイベント</target>
        </trans-unit>
        <trans-unit id="6bf39add8d5d8b6b94a4953cdfde59896a6a33b2" translate="yes" xml:space="preserve">
          <source>close event (stream.Writable)</source>
          <target state="translated">クローズイベント</target>
        </trans-unit>
        <trans-unit id="da68bf3a55223d19ffeabebe48b0af570d763307" translate="yes" xml:space="preserve">
          <source>cluster</source>
          <target state="translated">cluster</target>
        </trans-unit>
        <trans-unit id="e0cdf210924e960a9af7134d4dbe43641919be14" translate="yes" xml:space="preserve">
          <source>cluster.disconnect()</source>
          <target state="translated">cluster.disconnect()</target>
        </trans-unit>
        <trans-unit id="15cc7b836c716a1d6bb26f999ac6880864596909" translate="yes" xml:space="preserve">
          <source>cluster.disconnect([callback])</source>
          <target state="translated">cluster.disconnect([callback])</target>
        </trans-unit>
        <trans-unit id="b2d07fa18e850e6cf22b00d36b44f71fa6573ec4" translate="yes" xml:space="preserve">
          <source>cluster.fork()</source>
          <target state="translated">cluster.fork()</target>
        </trans-unit>
        <trans-unit id="583e7568a6680731f8aa8e8e03ac99221021c8ec" translate="yes" xml:space="preserve">
          <source>cluster.fork([env])</source>
          <target state="translated">cluster.fork([env])</target>
        </trans-unit>
        <trans-unit id="0e4e470c8480bacbeceabfde449b02c38c626d82" translate="yes" xml:space="preserve">
          <source>cluster.isMaster</source>
          <target state="translated">cluster.isMaster</target>
        </trans-unit>
        <trans-unit id="de904a86913492392371e7986a4a323464496fa3" translate="yes" xml:space="preserve">
          <source>cluster.isWorker</source>
          <target state="translated">cluster.isWorker</target>
        </trans-unit>
        <trans-unit id="761b0f3c73b57b5a7a249dcd0246d5dcb5ecf1b1" translate="yes" xml:space="preserve">
          <source>cluster.schedulingPolicy</source>
          <target state="translated">cluster.schedulingPolicy</target>
        </trans-unit>
        <trans-unit id="ad1c828957bf64601542696741fb15b07fccccbd" translate="yes" xml:space="preserve">
          <source>cluster.settings</source>
          <target state="translated">cluster.settings</target>
        </trans-unit>
        <trans-unit id="0f2271b61957d804a6f99eeef783ffac0a36a566" translate="yes" xml:space="preserve">
          <source>cluster.setupMaster()</source>
          <target state="translated">cluster.setupMaster()</target>
        </trans-unit>
        <trans-unit id="3fe4f17565e4f4f0bfb9d5f5add5473e3b7598fb" translate="yes" xml:space="preserve">
          <source>cluster.setupMaster([settings])</source>
          <target state="translated">cluster.setupMaster([settings])</target>
        </trans-unit>
        <trans-unit id="6991f97e3f0f2f85413e953cc4a293c60cc4a19f" translate="yes" xml:space="preserve">
          <source>cluster.worker</source>
          <target state="translated">cluster.worker</target>
        </trans-unit>
        <trans-unit id="756bf0ce66ea747b00605eb608ed6da9714e845e" translate="yes" xml:space="preserve">
          <source>cluster.workers</source>
          <target state="translated">cluster.workers</target>
        </trans-unit>
        <trans-unit id="0350ad2402f357ac97046d8d00fd147ee0f1477d" translate="yes" xml:space="preserve">
          <source>connect event (Http2Session)</source>
          <target state="translated">接続イベント(Http2Session)</target>
        </trans-unit>
        <trans-unit id="84423ba15448691facd31e87238966a3fab34f53" translate="yes" xml:space="preserve">
          <source>connect event (dgram.Socket)</source>
          <target state="translated">コネクトイベント</target>
        </trans-unit>
        <trans-unit id="bf020c26620feee7c48e7587211f16c9a4f6eb25" translate="yes" xml:space="preserve">
          <source>connect event (http.ClientRequest)</source>
          <target state="translated">コネクトイベント</target>
        </trans-unit>
        <trans-unit id="3a8a9a37aab4309bd4ee1d430e40fa6f11446802" translate="yes" xml:space="preserve">
          <source>connect event (http.Server)</source>
          <target state="translated">コネクトイベント</target>
        </trans-unit>
        <trans-unit id="c3258f29b77eb4b524ede0737755556f8285ab7a" translate="yes" xml:space="preserve">
          <source>connect event (net.Socket)</source>
          <target state="translated">コネクトイベント</target>
        </trans-unit>
        <trans-unit id="fb6737b5c479881f98362334a6a3bc45ad9bc2d3" translate="yes" xml:space="preserve">
          <source>connection event (http.Server)</source>
          <target state="translated">コネクションイベント</target>
        </trans-unit>
        <trans-unit id="bab06bdc8959ad2c7356f96b735dda3d6dbddf55" translate="yes" xml:space="preserve">
          <source>connection event (net.Server)</source>
          <target state="translated">コネクションイベント</target>
        </trans-unit>
        <trans-unit id="e2346381bb8eb382eb8b3877a9d3838996c5ca2d" translate="yes" xml:space="preserve">
          <source>console</source>
          <target state="translated">console</target>
        </trans-unit>
        <trans-unit id="3ce5de16fb518bcb11e5794728b3089690da603e" translate="yes" xml:space="preserve">
          <source>console.assert()</source>
          <target state="translated">console.assert()</target>
        </trans-unit>
        <trans-unit id="3bb13f683ac96510cd867284d73849e3a762c2bf" translate="yes" xml:space="preserve">
          <source>console.assert(value[, ...message])</source>
          <target state="translated">console.assert(value[,...message])</target>
        </trans-unit>
        <trans-unit id="fa92cc69a8008bf46365e1c2cf11fb10ffdc24d0" translate="yes" xml:space="preserve">
          <source>console.clear()</source>
          <target state="translated">console.clear()</target>
        </trans-unit>
        <trans-unit id="a5e5cec9733be64c1998e8a5daf9b3774fed6199" translate="yes" xml:space="preserve">
          <source>console.count()</source>
          <target state="translated">console.count()</target>
        </trans-unit>
        <trans-unit id="dab6b27885e72376ea57a666e1caa212fdd593fa" translate="yes" xml:space="preserve">
          <source>console.count([label])</source>
          <target state="translated">console.count([label])</target>
        </trans-unit>
        <trans-unit id="a7beec5c3d1fe20cbe23498d5483e26ea30c5972" translate="yes" xml:space="preserve">
          <source>console.countReset()</source>
          <target state="translated">console.countReset()</target>
        </trans-unit>
        <trans-unit id="d1b4d8fd90cd9ce8f9ca5de3752d757b0f6ea600" translate="yes" xml:space="preserve">
          <source>console.countReset([label])</source>
          <target state="translated">console.countReset([label])</target>
        </trans-unit>
        <trans-unit id="a9044ed2b70e5e9ee9a3156ca6179d5028840035" translate="yes" xml:space="preserve">
          <source>console.debug()</source>
          <target state="translated">console.debug()</target>
        </trans-unit>
        <trans-unit id="292ee000e1af751b52d227831efd9da41ca296e4" translate="yes" xml:space="preserve">
          <source>console.debug(data[, ...args])</source>
          <target state="translated">console.debug(data[,...args])</target>
        </trans-unit>
        <trans-unit id="2b4e3d8c549d748b4d18ca5dcbffecf00f5451ca" translate="yes" xml:space="preserve">
          <source>console.dir()</source>
          <target state="translated">console.dir()</target>
        </trans-unit>
        <trans-unit id="9e5484a0319d5c0083615b1fddf88327a93390f4" translate="yes" xml:space="preserve">
          <source>console.dir(obj[, options])</source>
          <target state="translated">console.dir(obj[,options])</target>
        </trans-unit>
        <trans-unit id="e8820ee3aaf33f96904990cc28a98fdd3681b2f2" translate="yes" xml:space="preserve">
          <source>console.dirxml()</source>
          <target state="translated">console.dirxml()</target>
        </trans-unit>
        <trans-unit id="9ce24146b59d95af314b79920a698b1c9ddda6ce" translate="yes" xml:space="preserve">
          <source>console.dirxml(...data)</source>
          <target state="translated">console.dirxml(...data)</target>
        </trans-unit>
        <trans-unit id="3aa787905ddff1165aa2e0a810af110cace60d0f" translate="yes" xml:space="preserve">
          <source>console.error()</source>
          <target state="translated">console.error()</target>
        </trans-unit>
        <trans-unit id="85e7fefc5e722adfbe79f0ccf17b1c02ed4c31aa" translate="yes" xml:space="preserve">
          <source>console.error([data][, ...args])</source>
          <target state="translated">console.error([data][,...args])</target>
        </trans-unit>
        <trans-unit id="5b3e862e8b653c37775b0d195d09e96947fc398c" translate="yes" xml:space="preserve">
          <source>console.group()</source>
          <target state="translated">console.group()</target>
        </trans-unit>
        <trans-unit id="dde928ce38ba0a5f3f0fc87bb6c76778b82782ac" translate="yes" xml:space="preserve">
          <source>console.group([...label])</source>
          <target state="translated">console.group([...label])</target>
        </trans-unit>
        <trans-unit id="8c74a89ee83c5c2a70fe7ae44d5f5aad88c899a7" translate="yes" xml:space="preserve">
          <source>console.groupCollapsed()</source>
          <target state="translated">console.groupCollapsed()</target>
        </trans-unit>
        <trans-unit id="64f6f476903a2d34265ea43596bda3d20032ec6d" translate="yes" xml:space="preserve">
          <source>console.groupEnd()</source>
          <target state="translated">console.groupEnd()</target>
        </trans-unit>
        <trans-unit id="215c3a36770de573c0a9a1ed4062c522d6949a5e" translate="yes" xml:space="preserve">
          <source>console.info()</source>
          <target state="translated">console.info()</target>
        </trans-unit>
        <trans-unit id="fe53b5fc60a76256ec983b3b660cafb422610c21" translate="yes" xml:space="preserve">
          <source>console.info([data][, ...args])</source>
          <target state="translated">console.info([data][,...args])</target>
        </trans-unit>
        <trans-unit id="8bde29775a9c36c7c86f73c4c01d5c40e657ee16" translate="yes" xml:space="preserve">
          <source>console.log()</source>
          <target state="translated">console.log()</target>
        </trans-unit>
        <trans-unit id="61154f82a60ed3da4545782cd930e632e245e5ee" translate="yes" xml:space="preserve">
          <source>console.log([data][, ...args])</source>
          <target state="translated">console.log([data][,...args])</target>
        </trans-unit>
        <trans-unit id="7b4ffc14954957953044b67603ccbd1a73864ebc" translate="yes" xml:space="preserve">
          <source>console.markTimeline()</source>
          <target state="translated">console.markTimeline()</target>
        </trans-unit>
        <trans-unit id="b378179184214924998141439d21310a5fad5593" translate="yes" xml:space="preserve">
          <source>console.markTimeline([label])</source>
          <target state="translated">console.markTimeline([label])</target>
        </trans-unit>
        <trans-unit id="23e0f9dbb1f4cf800a8d1a9f708925d571064a82" translate="yes" xml:space="preserve">
          <source>console.profile()</source>
          <target state="translated">console.profile()</target>
        </trans-unit>
        <trans-unit id="92317d34eeeb92d5333c11ecbfde0c497e5863c2" translate="yes" xml:space="preserve">
          <source>console.profile([label])</source>
          <target state="translated">console.profile([label])</target>
        </trans-unit>
        <trans-unit id="731f465c02f4f1d394e89638f0b3cd036b93a301" translate="yes" xml:space="preserve">
          <source>console.profileEnd()</source>
          <target state="translated">console.profileEnd()</target>
        </trans-unit>
        <trans-unit id="404b3666ec5997712ca620cbc0a5b742a918111f" translate="yes" xml:space="preserve">
          <source>console.profileEnd([label])</source>
          <target state="translated">console.profileEnd([label])</target>
        </trans-unit>
        <trans-unit id="1846765e42b54158a0fdb95885d749243ec65639" translate="yes" xml:space="preserve">
          <source>console.table()</source>
          <target state="translated">console.table()</target>
        </trans-unit>
        <trans-unit id="95b78d2d18d56e11604d99b2d08d3cb999200310" translate="yes" xml:space="preserve">
          <source>console.table(tabularData[, properties])</source>
          <target state="translated">console.table(tabularData[,properties)</target>
        </trans-unit>
        <trans-unit id="c53f25f457f1b70945150ce3388866acc88d2f0d" translate="yes" xml:space="preserve">
          <source>console.time()</source>
          <target state="translated">console.time()</target>
        </trans-unit>
        <trans-unit id="2fb5098b720ad7c0d8d567a7f8e5bec3fcd9cb23" translate="yes" xml:space="preserve">
          <source>console.time([label])</source>
          <target state="translated">console.time([label])</target>
        </trans-unit>
        <trans-unit id="4e8682c9da525280aae4f0e4ee9bd5a47508b836" translate="yes" xml:space="preserve">
          <source>console.timeEnd()</source>
          <target state="translated">console.timeEnd()</target>
        </trans-unit>
        <trans-unit id="e46772f8a6f651bc404b23f23ed9d08842dc23dd" translate="yes" xml:space="preserve">
          <source>console.timeEnd([label])</source>
          <target state="translated">console.timeEnd([label])</target>
        </trans-unit>
        <trans-unit id="d3036ff07e5eb72c4ae0b594fc042db12edc8d24" translate="yes" xml:space="preserve">
          <source>console.timeLog()</source>
          <target state="translated">console.timeLog()</target>
        </trans-unit>
        <trans-unit id="6d64a36a17b4858cf6face65a5aaa648e337ba84" translate="yes" xml:space="preserve">
          <source>console.timeLog([label][, ...data])</source>
          <target state="translated">console.timeLog([label][,...data])</target>
        </trans-unit>
        <trans-unit id="ef44417467d4f51b094ecfa39306c1951499155f" translate="yes" xml:space="preserve">
          <source>console.timeStamp()</source>
          <target state="translated">console.timeStamp()</target>
        </trans-unit>
        <trans-unit id="39c820420b5ca1f29162aede5c2618a4ed84cf0a" translate="yes" xml:space="preserve">
          <source>console.timeStamp([label])</source>
          <target state="translated">console.timeStamp([label])</target>
        </trans-unit>
        <trans-unit id="8104d2676f608a3ef730cad4302fb2c3e013265d" translate="yes" xml:space="preserve">
          <source>console.timeline()</source>
          <target state="translated">console.timeline()</target>
        </trans-unit>
        <trans-unit id="bbb65039edf8cc0776d7cbce8e90f8079ed8e55b" translate="yes" xml:space="preserve">
          <source>console.timeline([label])</source>
          <target state="translated">console.timeline([label])</target>
        </trans-unit>
        <trans-unit id="96365ed604de80f38f336400daf68eb8c1f095bf" translate="yes" xml:space="preserve">
          <source>console.timelineEnd()</source>
          <target state="translated">console.timelineEnd()</target>
        </trans-unit>
        <trans-unit id="c1ecb7396bd1be84d754d381ceeaf27f5e3aa3a2" translate="yes" xml:space="preserve">
          <source>console.timelineEnd([label])</source>
          <target state="translated">console.timelineEnd([label])</target>
        </trans-unit>
        <trans-unit id="c02f1bd3a39309a30add31b53f5ea9198de25a6c" translate="yes" xml:space="preserve">
          <source>console.trace()</source>
          <target state="translated">console.trace()</target>
        </trans-unit>
        <trans-unit id="f8d9edae9cf0ff9fa2bbbfec27a7c730b34c20fb" translate="yes" xml:space="preserve">
          <source>console.trace([message][, ...args])</source>
          <target state="translated">console.trace([message][,...args])</target>
        </trans-unit>
        <trans-unit id="04bde1d53cfe78a1fb0530e93370baa404a29729" translate="yes" xml:space="preserve">
          <source>console.warn()</source>
          <target state="translated">console.warn()</target>
        </trans-unit>
        <trans-unit id="748aa557231da4d79ab77b9eef80adc8db64fc06" translate="yes" xml:space="preserve">
          <source>console.warn([data][, ...args])</source>
          <target state="translated">console.warn([data][,...args])</target>
        </trans-unit>
        <trans-unit id="b35edf1cd84a7480b14be439aa9331ad162ae8e8" translate="yes" xml:space="preserve">
          <source>constructing an instance of this class in the addon initializer such that the &lt;code&gt;v8::Persistent&amp;lt;v8::Object&amp;gt;&lt;/code&gt; is set to the &lt;code&gt;exports&lt;/code&gt; object.</source>
          <target state="translated">アドオン初期化子でこのクラスのインスタンスを作成し、 &lt;code&gt;v8::Persistent&amp;lt;v8::Object&amp;gt;&lt;/code&gt; が &lt;code&gt;exports&lt;/code&gt; オブジェクトに設定されるようにします。</target>
        </trans-unit>
        <trans-unit id="4c1c7e49df637e2f250575dc18f2eb8ffc16e2f7" translate="yes" xml:space="preserve">
          <source>continue event (ClientHttp2Stream)</source>
          <target state="translated">継続イベント(ClientHttp2Stream)</target>
        </trans-unit>
        <trans-unit id="1e70814e70d287a149c708f9cc91a22167fdf6a7" translate="yes" xml:space="preserve">
          <source>continue event (http.ClientRequest)</source>
          <target state="translated">継続イベント(http.ClientRequest)</target>
        </trans-unit>
        <trans-unit id="44a9713350e53858f058463d4bf7f1e542d9ca4b" translate="yes" xml:space="preserve">
          <source>crypto</source>
          <target state="translated">crypto</target>
        </trans-unit>
        <trans-unit id="5dfa491e0c0e74608a94f5e25854f008757d5880" translate="yes" xml:space="preserve">
          <source>crypto streams</source>
          <target state="translated">暗号化ストリーム</target>
        </trans-unit>
        <trans-unit id="f79f5f25b964f787191f72a2959eb6957668bf2c" translate="yes" xml:space="preserve">
          <source>crypto.DEFAULT_ENCODING</source>
          <target state="translated">crypto.DEFAULT_ENCODING</target>
        </trans-unit>
        <trans-unit id="b9e58f5749872363ad812dbdc7d5ecfd2f984319" translate="yes" xml:space="preserve">
          <source>crypto.constants</source>
          <target state="translated">crypto.constants</target>
        </trans-unit>
        <trans-unit id="34b11f8a3d9f750f21c5a96c0db010f157ce1019" translate="yes" xml:space="preserve">
          <source>crypto.createCipher()</source>
          <target state="translated">crypto.createCipher()</target>
        </trans-unit>
        <trans-unit id="d6a992f0f0ce65d9c1de3e998b296c0b4cb4b553" translate="yes" xml:space="preserve">
          <source>crypto.createCipher(algorithm, password[, options])</source>
          <target state="translated">crypto.createCipher(algorithm,password[,options])</target>
        </trans-unit>
        <trans-unit id="3ef2bd54b9a1c0e71badefac74c23695524f1c49" translate="yes" xml:space="preserve">
          <source>crypto.createCipheriv()</source>
          <target state="translated">crypto.createCipheriv()</target>
        </trans-unit>
        <trans-unit id="a95c89ca56ef0aa1b31b52b9c4f883ae69ba56fd" translate="yes" xml:space="preserve">
          <source>crypto.createCipheriv(algorithm, key, iv[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L114&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createCipheriv（algorithm、key、iv [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L114&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1fc15de097db288a64c6bd193e1572be8b673315" translate="yes" xml:space="preserve">
          <source>crypto.createDecipher()</source>
          <target state="translated">crypto.createDecipher()</target>
        </trans-unit>
        <trans-unit id="f55b1b9260168b052eb992a0c25f47a0b2afa336" translate="yes" xml:space="preserve">
          <source>crypto.createDecipher(algorithm, password[, options])</source>
          <target state="translated">crypto.createDecipher(algorithm,password[,options])</target>
        </trans-unit>
        <trans-unit id="d3f52eea850c40e856c1cfff5d15c052aacbec99" translate="yes" xml:space="preserve">
          <source>crypto.createDecipheriv()</source>
          <target state="translated">crypto.createDecipheriv()</target>
        </trans-unit>
        <trans-unit id="ce5f63e54907df19132c66d4f65597a7e2f9f84e" translate="yes" xml:space="preserve">
          <source>crypto.createDecipheriv(algorithm, key, iv[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L122&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createDecipheriv（algorithm、key、iv [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L122&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5392f1b7ae24a18e4224315bdfe3a393d5cd1d84" translate="yes" xml:space="preserve">
          <source>crypto.createDiffieHellman()</source>
          <target state="translated">crypto.createDiffieHellman()</target>
        </trans-unit>
        <trans-unit id="9810e626e70c6b74a9ca3fdbda3496c7e10211c9" translate="yes" xml:space="preserve">
          <source>crypto.createDiffieHellman(primeLength[, generator])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L126&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createDiffieHellman（primeLength [、generator]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L126&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2a4f39bd481a55caf8bb9e2fb2ca52b7065ca09c" translate="yes" xml:space="preserve">
          <source>crypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L126&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createDiffieHellman（prime [、primeEncoding] [、generator] [、generatorEncoding]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L126&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="80922a1ad53839bc6562d70087478f0ef574cf3f" translate="yes" xml:space="preserve">
          <source>crypto.createDiffieHellmanGroup()</source>
          <target state="translated">crypto.createDiffieHellmanGroup()</target>
        </trans-unit>
        <trans-unit id="2b4068b7c191672e4079ea400e4706245ba693f0" translate="yes" xml:space="preserve">
          <source>crypto.createDiffieHellmanGroup(name)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L130&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createDiffieHellmanGroup(name)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L130&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fd0a267d101e772fc1712269b4847d8dcf5e2e7e" translate="yes" xml:space="preserve">
          <source>crypto.createECDH()</source>
          <target state="translated">crypto.createECDH()</target>
        </trans-unit>
        <trans-unit id="2a8a5892d5fd0fbfa86658a41c934425ce738b27" translate="yes" xml:space="preserve">
          <source>crypto.createECDH(curveName)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L134&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createECDH(curveName)&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L134&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="115df25fa774257b52b0cbcc438514312752f843" translate="yes" xml:space="preserve">
          <source>crypto.createHash()</source>
          <target state="translated">crypto.createHash()</target>
        </trans-unit>
        <trans-unit id="fa07699758c8c96783b0bfbf46d17af55109672a" translate="yes" xml:space="preserve">
          <source>crypto.createHash(algorithm[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L106&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createHash（algorithm [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L106&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="51bf9d5a624ee8a90e81078daccb146aeb9601bb" translate="yes" xml:space="preserve">
          <source>crypto.createHmac()</source>
          <target state="translated">crypto.createHmac()</target>
        </trans-unit>
        <trans-unit id="70d98f9ed3bcd599fd3cc0e8230af1be4cad3f86" translate="yes" xml:space="preserve">
          <source>crypto.createHmac(algorithm, key[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L138&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createHmac（アルゴリズム、キー[、オプション]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L138&quot;&gt;[&lt;/a&gt;ソース]</target>
        </trans-unit>
        <trans-unit id="1f1ba0bcab8331a944996f419258d65f39de87cd" translate="yes" xml:space="preserve">
          <source>crypto.createPrivateKey()</source>
          <target state="translated">crypto.createPrivateKey()</target>
        </trans-unit>
        <trans-unit id="3e0a5b169e0b3c08a1bf3b150ad513be0642cc50" translate="yes" xml:space="preserve">
          <source>crypto.createPrivateKey(key)</source>
          <target state="translated">crypto.createPrivateKey(key)</target>
        </trans-unit>
        <trans-unit id="d99989dbc5444924b85d17687534209774afaf00" translate="yes" xml:space="preserve">
          <source>crypto.createPublicKey()</source>
          <target state="translated">crypto.createPublicKey()</target>
        </trans-unit>
        <trans-unit id="0b3d1e97bae3cf41a959335106486e7d445cc1f1" translate="yes" xml:space="preserve">
          <source>crypto.createPublicKey(key)</source>
          <target state="translated">crypto.createPublicKey(key)</target>
        </trans-unit>
        <trans-unit id="452988e374e336459b5f3b430b367567b8cace57" translate="yes" xml:space="preserve">
          <source>crypto.createSecretKey()</source>
          <target state="translated">crypto.createSecretKey()</target>
        </trans-unit>
        <trans-unit id="d7dca83afd2139039eaecf4a44c6cde4f6c27660" translate="yes" xml:space="preserve">
          <source>crypto.createSecretKey(key)</source>
          <target state="translated">crypto.createSecretKey(key)</target>
        </trans-unit>
        <trans-unit id="3bc146c92d68cd2dac72fa1b330414c674ddfa0a" translate="yes" xml:space="preserve">
          <source>crypto.createSign()</source>
          <target state="translated">crypto.createSign()</target>
        </trans-unit>
        <trans-unit id="df608a7b6061f4080eb8d401b6a8fbb1b5c60a66" translate="yes" xml:space="preserve">
          <source>crypto.createSign(algorithm[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L142&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createSign（algorithm [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L142&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b0750c29b3e2111229e7ac991ec63c913ff6a721" translate="yes" xml:space="preserve">
          <source>crypto.createVerify()</source>
          <target state="translated">crypto.createVerify()</target>
        </trans-unit>
        <trans-unit id="5e1a2eb88a154ce9aa1e196fc198eaafa08c8a2e" translate="yes" xml:space="preserve">
          <source>crypto.createVerify(algorithm[, options])&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L146&quot;&gt;[src]&lt;/a&gt;</source>
          <target state="translated">crypto.createVerify（algorithm [、options]）&lt;a href=&quot;https://github.com/nodejs/node/blob/9cfb3841785cd658bb13369ed642247e089a5533/lib/crypto.js#L146&quot;&gt;[src]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="709649ae40f300edc1d2f8cd980446efe17bc0af" translate="yes" xml:space="preserve">
          <source>crypto.fips</source>
          <target state="translated">crypto.fips</target>
        </trans-unit>
        <trans-unit id="2f5c5f143481b72e07f5dc06e3bc71d3b4cb3fc4" translate="yes" xml:space="preserve">
          <source>crypto.generateKeyPair()</source>
          <target state="translated">crypto.generateKeyPair()</target>
        </trans-unit>
        <trans-unit id="84fe1e4a3c345563252bcbf7d2110cb9e22e1e57" translate="yes" xml:space="preserve">
          <source>crypto.generateKeyPair(type, options, callback)</source>
          <target state="translated">crypto.generateKeyPair(type,options,callback)</target>
        </trans-unit>
        <trans-unit id="41a283ce736ff4a2f22d0a0394ba63543a6faa9d" translate="yes" xml:space="preserve">
          <source>crypto.generateKeyPairSync()</source>
          <target state="translated">crypto.generateKeyPairSync()</target>
        </trans-unit>
        <trans-unit id="0b18516c6de1b367b228b5d76fa1fd252142b842" translate="yes" xml:space="preserve">
          <source>crypto.generateKeyPairSync(type, options)</source>
          <target state="translated">crypto.generateKeyPairSync(type,options)</target>
        </trans-unit>
        <trans-unit id="4396d919ab73aa3f86e49bf177d4837fadbae25a" translate="yes" xml:space="preserve">
          <source>crypto.getCiphers()</source>
          <target state="translated">crypto.getCiphers()</target>
        </trans-unit>
        <trans-unit id="56212212ede0f5ac0aab927d5844b6fd61ce4bc0" translate="yes" xml:space="preserve">
          <source>crypto.getCurves()</source>
          <target state="translated">crypto.getCurves()</target>
        </trans-unit>
        <trans-unit id="f5a892fe12c9710224371eef9793a6f29e079a1c" translate="yes" xml:space="preserve">
          <source>crypto.getDiffieHellman()</source>
          <target state="translated">crypto.getDiffieHellman()</target>
        </trans-unit>
        <trans-unit id="0e3a7cc27139279e2eabfebbbc25c6105e84f9c8" translate="yes" xml:space="preserve">
          <source>crypto.getDiffieHellman(groupName)</source>
          <target state="translated">crypto.getDiffieHellman(groupName)</target>
        </trans-unit>
        <trans-unit id="25c1545bdfc9eac33e5b28c11344daba54fb0e0b" translate="yes" xml:space="preserve">
          <source>crypto.getFips()</source>
          <target state="translated">crypto.getFips()</target>
        </trans-unit>
        <trans-unit id="73be3c589c87d9649acfecf1c6642b7ec8ab0dd0" translate="yes" xml:space="preserve">
          <source>crypto.getHashes()</source>
          <target state="translated">crypto.getHashes()</target>
        </trans-unit>
        <trans-unit id="190333556d69ca23111aad30ae32d481bd00e500" translate="yes" xml:space="preserve">
          <source>crypto.pbkdf2()</source>
          <target state="translated">crypto.pbkdf2()</target>
        </trans-unit>
        <trans-unit id="9c28b99d3673e7cef1bceddc21e6822466cebf41" translate="yes" xml:space="preserve">
          <source>crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)</source>
          <target state="translated">crypto.pbkdf2(password,salt,iterations,keylen,digest,callback)</target>
        </trans-unit>
        <trans-unit id="6ce08582eb353dcb59276fd3aa23ce27afc0c7d5" translate="yes" xml:space="preserve">
          <source>crypto.pbkdf2Sync()</source>
          <target state="translated">crypto.pbkdf2Sync()</target>
        </trans-unit>
        <trans-unit id="83f886ffc016b6c2015c97a51127f90ad35374dc" translate="yes" xml:space="preserve">
          <source>crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)</source>
          <target state="translated">crypto.pbkdf2Sync(password,salt,iterations,keylen,digest)</target>
        </trans-unit>
        <trans-unit id="94d9cf2c6607d065a4910317c3b770466db21a39" translate="yes" xml:space="preserve">
          <source>crypto.privateDecrypt()</source>
          <target state="translated">crypto.privateDecrypt()</target>
        </trans-unit>
        <trans-unit id="db0cd3da7ac2d2e274ff86f71bf3ffd2a21a4520" translate="yes" xml:space="preserve">
          <source>crypto.privateDecrypt(privateKey, buffer)</source>
          <target state="translated">crypto.privateDecrypt(privateKey,buffer)</target>
        </trans-unit>
        <trans-unit id="c1857dc0f5ad432fb5fef551112129cdc16abfb0" translate="yes" xml:space="preserve">
          <source>crypto.privateEncrypt()</source>
          <target state="translated">crypto.privateEncrypt()</target>
        </trans-unit>
        <trans-unit id="6ed5ebdacc87cacdfdccb8a39c40e46a8812367d" translate="yes" xml:space="preserve">
          <source>crypto.privateEncrypt(privateKey, buffer)</source>
          <target state="translated">crypto.privateEncrypt(privateKey,buffer)</target>
        </trans-unit>
        <trans-unit id="7559ca5823f45a9f44034a32accd5e8b6c229829" translate="yes" xml:space="preserve">
          <source>crypto.publicDecrypt()</source>
          <target state="translated">crypto.publicDecrypt()</target>
        </trans-unit>
        <trans-unit id="91d7314507fa4ecbb70f6c0f9b0a7dac8219025c" translate="yes" xml:space="preserve">
          <source>crypto.publicDecrypt(key, buffer)</source>
          <target state="translated">crypto.publicDecrypt(key,buffer)</target>
        </trans-unit>
        <trans-unit id="731012cbcfa639b6fb1a7f432f3f275471c9d5c2" translate="yes" xml:space="preserve">
          <source>crypto.publicEncrypt()</source>
          <target state="translated">crypto.publicEncrypt()</target>
        </trans-unit>
        <trans-unit id="85b3c71c90de7034804f824742cfd6aa48f8a2b6" translate="yes" xml:space="preserve">
          <source>crypto.publicEncrypt(key, buffer)</source>
          <target state="translated">crypto.publicEncrypt(key,buffer)</target>
        </trans-unit>
        <trans-unit id="5de3776901dbba41eed3e24f0ada56508a922fc9" translate="yes" xml:space="preserve">
          <source>crypto.randomBytes()</source>
          <target state="translated">crypto.randomBytes()</target>
        </trans-unit>
        <trans-unit id="cd38f1909f871dcb6251fef039bf4ac9d5f26676" translate="yes" xml:space="preserve">
          <source>crypto.randomBytes(size[, callback])</source>
          <target state="translated">crypto.randomBytes(size[,callback])</target>
        </trans-unit>
        <trans-unit id="403b17a4c430e7cf9b435c5e6f1055a6fda99af2" translate="yes" xml:space="preserve">
          <source>crypto.randomFill()</source>
          <target state="translated">crypto.randomFill()</target>
        </trans-unit>
        <trans-unit id="09ff0cabb583f5cc189445374000aae9d34eae66" translate="yes" xml:space="preserve">
          <source>crypto.randomFill(buffer[, offset][, size], callback)</source>
          <target state="translated">crypto.randomFill(buffer[,offset][,size],callback)</target>
        </trans-unit>
        <trans-unit id="fc4f3c66db6eda0e173379fb55596b7c46aaba65" translate="yes" xml:space="preserve">
          <source>crypto.randomFillSync()</source>
          <target state="translated">crypto.randomFillSync()</target>
        </trans-unit>
        <trans-unit id="0383cd1addc88b53207a286d507e4bd006ee1b07" translate="yes" xml:space="preserve">
          <source>crypto.randomFillSync(buffer[, offset][, size])</source>
          <target state="translated">crypto.randomFillSync(buffer[,offset][,size])</target>
        </trans-unit>
        <trans-unit id="1fe0edf344c01c3bdc91b86d5804ae39d2039b5a" translate="yes" xml:space="preserve">
          <source>crypto.scrypt()</source>
          <target state="translated">crypto.scrypt()</target>
        </trans-unit>
        <trans-unit id="3606fc1310b61c8af41869e13125b0694f6f99f2" translate="yes" xml:space="preserve">
          <source>crypto.scrypt(password, salt, keylen[, options], callback)</source>
          <target state="translated">crypto.scrypt(password,salt,keylen[,options],callback)</target>
        </trans-unit>
        <trans-unit id="f4b2042e7cacab529a3244cb00a01a6edfeabcfa" translate="yes" xml:space="preserve">
          <source>crypto.scryptSync()</source>
          <target state="translated">crypto.scryptSync()</target>
        </trans-unit>
        <trans-unit id="feac3231263d40b2c4e04f3a1edd8a503f06bb23" translate="yes" xml:space="preserve">
          <source>crypto.scryptSync(password, salt, keylen[, options])</source>
          <target state="translated">crypto.scryptSync(password,salt,keylen[,options])</target>
        </trans-unit>
        <trans-unit id="814267db85ae7f51105c98c2b3fe57ce770cc64f" translate="yes" xml:space="preserve">
          <source>crypto.setEngine()</source>
          <target state="translated">crypto.setEngine()</target>
        </trans-unit>
        <trans-unit id="ced9450639633d5ef6081ca3f604473f7c792a63" translate="yes" xml:space="preserve">
          <source>crypto.setEngine(engine[, flags])</source>
          <target state="translated">crypto.setEngine(engine[,flags])</target>
        </trans-unit>
        <trans-unit id="6b397d6f63b6e83c6f92254f7d873d4fd48c961c" translate="yes" xml:space="preserve">
          <source>crypto.setFips()</source>
          <target state="translated">crypto.setFips()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
