<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="d7a1dc1cbb67ff0479ab2d4ec138ffb994e39f33" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.confと&lt;/a&gt;よく似ています。つまり、提供された最初のサーバーで解決を試みた結果、 &lt;code&gt;NOTFOUND&lt;/code&gt; エラーが発生した場合、 &lt;code&gt;resolve()&lt;/code&gt; メソッドは、提供された後続のサーバーで解決を試み&lt;em&gt;ません&lt;/em&gt;。フォールバックDNSサーバーは、以前のDNSサーバーがタイムアウトするか、その他のエラーが発生した場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="338d35f90fcbabeed9638d0994745e773b223f83" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</target>
        </trans-unit>
        <trans-unit id="da5d4255578cc98dd0bf8203ac9635b394724a79" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously outside of a context and return its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">このメソッドは、コンテキストの外で関数を同期的に実行し、その戻り値を返します。ストアは、コールバック関数内やコールバック内で作成された非同期操作ではアクセスできません。</target>
        </trans-unit>
        <trans-unit id="44bd57aad2273e41bbc9d4b198d65622d5de140c" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously within a context and return its return value. The store is not accessible outside of the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">このメソッドは、コンテキスト内で関数を同期的に実行し、その戻り値を返します。ストアは、コールバック関数やコールバック内で作成された非同期操作の外部からはアクセスできません。</target>
        </trans-unit>
        <trans-unit id="80ac9951e9c15f0ad4db6383a1db28445d3d11d9" translate="yes" xml:space="preserve">
          <source>This mode provides a balance between features and binary size.</source>
          <target state="translated">このモードでは、機能とバイナリサイズのバランスが取れています。</target>
        </trans-unit>
        <trans-unit id="31b0496aa78380171e1c86de496fc1c12964b92b" translate="yes" xml:space="preserve">
          <source>This mode provides a good balance between features and binary size, and it is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">このモードは、機能とバイナリサイズのバランスが取れており、 &lt;code&gt;--with-intl&lt;/code&gt; フラグが渡されない場合のデフォルトの動作です。公式バイナリもこのモードでビルドされます。</target>
        </trans-unit>
        <trans-unit id="58478d1f06fd4faab8d57954c1994c2807d9e162" translate="yes" xml:space="preserve">
          <source>This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</source>
          <target state="translated">This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</target>
        </trans-unit>
        <trans-unit id="61829d000837d81bc1af29b5a18d65d68b23b06e" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been instantiated; otherwise it will throw an error. It could be called also when the module has already been evaluated, in which case it will do one of the following two things:</source>
          <target state="translated">これはモジュールがインスタンス化された後に呼ばれなければなりません。モジュールがすでに評価されている場合にも呼ばれますが、その場合は以下の2つのうちの1つを行います。</target>
        </trans-unit>
        <trans-unit id="6f7e3676799bc8a3bb8082ebb54448a8f098105d" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt;) or it will re-throw the exception that the initial evaluation resulted in (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;).</source>
          <target state="translated">This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt; ) or it will re-throw the exception that the initial evaluation resulted in ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4e9b793d8f4835801a2e03d986f43b29e0294b7f" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;. It can be passed to &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt;&lt;code&gt;clearImmediate()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">このオブジェクトは内部で作成され、&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;から返されます。スケジュールされたアクションをキャンセルするために、&lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt; &lt;code&gt;clearImmediate()&lt;/code&gt; &lt;/a&gt;に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="30df376bcf445e9ea2fd9f87e4e31b34c96b80ed" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;. It can be passed to either &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt;&lt;code&gt;clearInterval()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">このオブジェクトは内部で作成され、&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;から返されます。スケジュールされたアクションをキャンセルするために、&lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt; &lt;code&gt;clearTimeout()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt; &lt;code&gt;clearInterval()&lt;/code&gt; &lt;/a&gt;に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="11bcec38f2abde0cda814ffe6df5a8ef30f2d46d" translate="yes" xml:space="preserve">
          <source>This object is created internally and returned from &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt;. It represents an &lt;em&gt;in-progress&lt;/em&gt; request whose header has already been queued. The header is still mutable using the &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt;&lt;code&gt;setHeader(name, value)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_getheader_name&quot;&gt;&lt;code&gt;getHeader(name)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_removeheader_name&quot;&gt;&lt;code&gt;removeHeader(name)&lt;/code&gt;&lt;/a&gt; API. The actual header will be sent along with the first data chunk or when calling &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオブジェクトは内部で作成され、&lt;a href=&quot;#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt;から返されます。これは、ヘッダーがすでにキューに入れられている&lt;em&gt;進行中の&lt;/em&gt;要求を表します。ヘッダーは、&lt;a href=&quot;#http_request_setheader_name_value&quot;&gt; &lt;code&gt;setHeader(name, value)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#http_request_getheader_name&quot;&gt; &lt;code&gt;getHeader(name)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#http_request_removeheader_name&quot;&gt; &lt;code&gt;removeHeader(name)&lt;/code&gt; &lt;/a&gt; API を使用して引き続き変更可能です。実際のヘッダーは、最初のデータチャンクとともに、または&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; を&lt;/a&gt;呼び出すときに送信されます。</target>
        </trans-unit>
        <trans-unit id="276727d393a49049986a6764a6b9df30b3c6e8d1" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">このオブジェクトは、ユーザーではなくHTTPサーバーによって内部的に作成されます。これは、&lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントの2番目のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="5b243244bb0ee3d29d16ef5c4abcf7c8294d4366" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">このオブジェクトは、ユーザーではなくHTTPサーバーによって内部的に作成されます。これは、&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントの2番目のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="6d42c4c77f2412e6c0e13465d846324fb36177a5" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="6828f42c873a55b00234dc584cf52b644aef0a4c" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="b590c4862d8c62879d75abd1aa21bce18d4bbd42" translate="yes" xml:space="preserve">
          <source>This object is not intended to be changed or set manually.</source>
          <target state="translated">このオブジェクトは、手動で変更または設定することを意図していません。</target>
        </trans-unit>
        <trans-unit id="39f42f9d3b7870458abec1b8bba415750246f54d" translate="yes" xml:space="preserve">
          <source>This operation cannot be undone.</source>
          <target state="translated">この操作を元に戻すことはできません。</target>
        </trans-unit>
        <trans-unit id="6d68cfded63649ce7ce6716537aea2949bfdc24a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;UInt8Array&lt;/code&gt; - that is, getting returns &lt;code&gt;undefined&lt;/code&gt; and setting does nothing.</source>
          <target state="translated">この演算子は &lt;code&gt;Uint8Array&lt;/code&gt; から継承されているため、範囲外のアクセスでの動作は &lt;code&gt;UInt8Array&lt;/code&gt; と同じです。つまり、戻り &lt;code&gt;undefined&lt;/code&gt; が未定義であり、設定しても何も起こりません。</target>
        </trans-unit>
        <trans-unit id="7b68e9509c532127f52fafc15b3bbfa8dc0ae41a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt;. In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt;, and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt;.</source>
          <target state="translated">This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt; , so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt; . In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt; , and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd5bc0556c47cdb09e41d5ea59f149aa88e6a463" translate="yes" xml:space="preserve">
          <source>This option is a no-op. It is kept for compatibility.</source>
          <target state="translated">このオプションは無効です。互換性のために保持されます。</target>
        </trans-unit>
        <trans-unit id="4951046a2e8ef3ca45424f2c3f92fe4d355065b2" translate="yes" xml:space="preserve">
          <source>This option is no longer experimental.</source>
          <target state="translated">このオプションはもはや実験的なものではありません。</target>
        </trans-unit>
        <trans-unit id="7ab4df6e22ae62c4d079027a2c218b72789bdc22" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. See &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; on how to compile a binary using this mode.</source>
          <target state="translated">このオプションは、結果として生じるICUに対するバイナリリンクを静的に作成し、ICUデータの完全なセットを含みます。この方法で作成されたバイナリは、それ以上の外部依存関係がなく、すべてのロケールをサポートしますが、かなり大きい可能性があります。このモードを使用してバイナリをコンパイルする方法については、&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="883efe526d0eeec11102d9602133026d76078e17" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</target>
        </trans-unit>
        <trans-unit id="394a6a9a97a53a953940a51f3bdcf234aa0c8526" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the &lt;code&gt;node&lt;/code&gt; executable.</source>
          <target state="translated">このオプションは、ICUライブラリに対するバイナリリンクを静的に作成し、 &lt;code&gt;node&lt;/code&gt; 実行可能ファイル内にICUデータのサブセット（通常は英語ロケールのみ）を含めます。</target>
        </trans-unit>
        <trans-unit id="28fb57d096952e1be65ad8500b5938bfe5fc415f" translate="yes" xml:space="preserve">
          <source>This optional function will be called before the stream closes, delaying the &lt;code&gt;'finish'&lt;/code&gt; event until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to close resources or write buffered data before a stream ends.</source>
          <target state="translated">このオプション関数は、ストリームが閉じる前に呼び出され、 &lt;code&gt;callback&lt;/code&gt; が呼び出されるまで &lt;code&gt;'finish'&lt;/code&gt; イベントを遅らせます。これは、ストリームが終了する前にリソースを閉じるか、バッファリングされたデータを書き込むのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1e3da6c9301c93f8176d26d36040c1dd6fd9b584" translate="yes" xml:space="preserve">
          <source>This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt;, &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt; , &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="74b3259a863b34aca5868a5d91c49dfe546aa404" translate="yes" xml:space="preserve">
          <source>This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="68790ca7ff85f8f0b0ee5bc2bc19cfd046718f03" translate="yes" xml:space="preserve">
          <source>This page provides guidance for package authors writing &lt;code&gt;package.json&lt;/code&gt; files along with a reference for the &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; fields defined by Node.js.</source>
          <target state="translated">このページでは、Node.jsで定義された&lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;フィールドのリファレンスとともに、 &lt;code&gt;package.json&lt;/code&gt; ファイルを作成するパッケージ作成者向けのガイダンスを提供します。</target>
        </trans-unit>
        <trans-unit id="2a912ac54f282aa0ebdc6b3d1ffc8071941bc6bc" translate="yes" xml:space="preserve">
          <source>This particular operation may be hard to use in a Node.js context, as the streaming layer makes it hard to know which data will end up in this frame. Also, there is currently no way to consume this data through the Node.js API.</source>
          <target state="translated">ストリーミング層では、どのデータがこのフレームで終わるかを知ることが難しいため、この特定の操作はNode.jsのコンテキストでは使いづらいかもしれません。また、現在のところNode.js APIを使ってこのデータを消費する方法はありません。</target>
        </trans-unit>
        <trans-unit id="019c5d87354ac10b6f36fe3aa511b3b40d2ed49a" translate="yes" xml:space="preserve">
          <source>This pool could be used as follows:</source>
          <target state="translated">このプールは以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="b9a02d3eca403bdc666212cf0c86fe38b7d15dd1" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">このプロパティには、読み取り可能なキュー内のバイト（またはオブジェクト）の数が含まれます。この値は、 &lt;code&gt;highWaterMark&lt;/code&gt; のステータスに関するイントロスペクションデータを提供します。</target>
        </trans-unit>
        <trans-unit id="eb9e3144be10a8f3e780007f6d355783bf984b8d" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be written. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">このプロパティには、書き込み可能なキュー内のバイト（またはオブジェクト）の数が含まれます。この値は、 &lt;code&gt;highWaterMark&lt;/code&gt; のステータスに関するイントロスペクションデータを提供します。</target>
        </trans-unit>
        <trans-unit id="386fd84fec99ef9b47b7d16488786592c44b6e77" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the underlying file has not been opened yet, i.e. before the &lt;code&gt;'ready'&lt;/code&gt; event is emitted.</source>
          <target state="translated">このプロパティは、基になるファイルがまだ開かれていない場合、つまり &lt;code&gt;'ready'&lt;/code&gt; イベントが発行される前に &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="7fec8e8f93a4601a9b7a5243b25b3bca584a0d87" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt;. If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt;. If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt; . If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt; . If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f517051737746faa183df11c32566027df8f1e76" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;undefined&lt;/code&gt; for unrecognized &lt;code&gt;KeyObject&lt;/code&gt; types and symmetric keys.</source>
          <target state="translated">このプロパティは、認識されない &lt;code&gt;KeyObject&lt;/code&gt; タイプおよび対称キーに対しては &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d3602e2ea022e3bc39b7484318da9a603e6288b8" translate="yes" xml:space="preserve">
          <source>This property is a reference to the instance itself.</source>
          <target state="translated">このプロパティは、インスタンス自体への参照です。</target>
        </trans-unit>
        <trans-unit id="5e977f5de1846b2e85081b0ccf09406769d1cc7c" translate="yes" xml:space="preserve">
          <source>This property is also set for received headers. It will contain the names of all headers marked as sensitive, including ones marked that way automatically.</source>
          <target state="translated">このプロパティは、受信したヘッダに対しても設定されます。これには、自動的にそのようにマークされたものも含めて、 敏感とマークされたすべてのヘッダの名前が含まれます。</target>
        </trans-unit>
        <trans-unit id="e33cc887d6f76fe29d205691170fbab8a5395204" translate="yes" xml:space="preserve">
          <source>This property is deprecated.</source>
          <target state="translated">このプロパティは非推奨です。</target>
        </trans-unit>
        <trans-unit id="f73f92d394bd6733681726663afa3be14f683e89" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">このプロパティは非推奨です。代わりに、 &lt;code&gt;crypto.setFips()&lt;/code&gt; および &lt;code&gt;crypto.getFips()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8853fccd2133c9b9842c8f0088d75409954f4216" translate="yes" xml:space="preserve">
          <source>This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d7a656096a20de49803ec12a402ed5a91dccea98" translate="yes" xml:space="preserve">
          <source>This property is particularly useful as a means of determining if a client or server fully transmitted a message before a connection was terminated:</source>
          <target state="translated">このプロパティは、クライアントまたはサーバが接続が終了する前にメッセージを完全に送信したかどうかを判断する手段として特に有用である。</target>
        </trans-unit>
        <trans-unit id="f429a22f8731ad82e20fb7b571d26a7a167f34d0" translate="yes" xml:space="preserve">
          <source>This property now returns &lt;code&gt;undefined&lt;/code&gt; for KeyObject instances of unrecognized type instead of aborting.</source>
          <target state="translated">このプロパティは、打ち切りではなく、認識されないタイプのKeyObjectインスタンスに対して &lt;code&gt;undefined&lt;/code&gt; を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="0258cc0d87a79ada93448982013acd1442be2048" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt;. The value is fixed at &lt;code&gt;2&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt; . The value is fixed at &lt;code&gt;2&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="92d2b06eec651f39ccf3c9d6223d4bc3c22e2f93" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt;. The value is fixed at &lt;code&gt;0&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt; . The value is fixed at &lt;code&gt;0&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="e844b6956113839c2be7aaa33d95e92dee6d1883" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt;. The value is fixed at &lt;code&gt;1&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt; . The value is fixed at &lt;code&gt;1&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="5ac2df8cfb8a6ab600d58d12a18a1fd49b8186b6" translate="yes" xml:space="preserve">
          <source>This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</source>
          <target state="translated">This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="f8bac265f5b733744a963486d246686da65c6443" translate="yes" xml:space="preserve">
          <source>This property represents the state of the connection as a string.</source>
          <target state="translated">このプロパティは、接続の状態を文字列で表します。</target>
        </trans-unit>
        <trans-unit id="eefab09d53dbef4bb15074330e33f073160962a7" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</source>
          <target state="translated">このプロパティは、書き込み用にバッファリングされた文字数を示す。バッファには、エンコード後の長さが不明な文字列が含まれている可能性があります。そのため、この数値はバッファ内のバイト数の近似値に過ぎません。</target>
        </trans-unit>
        <trans-unit id="e1a6a91551ecd980b558ff842b37549796e6bf30" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters currently buffered to be written. See &lt;a href=&quot;net#net_socket_buffersize&quot;&gt;&lt;code&gt;net.Socket.bufferSize&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">このプロパティは、書き込み用に現在バッファリングされている文字数を示します。詳細については、&lt;a href=&quot;net#net_socket_buffersize&quot;&gt; &lt;code&gt;net.Socket.bufferSize&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="275fd6bab7ae5428d094e40bf2e70f30dde5cd7c" translate="yes" xml:space="preserve">
          <source>This represents the underlying binary scalar datatype of the &lt;code&gt;TypedArray&lt;/code&gt;. Elements of this enum correspond to &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;TypedArray&lt;/code&gt; の基礎となるバイナリスカラーデータ型を表します。この列挙型の要素は、&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;セクション22.2&lt;/a&gt;に対応しています。</target>
        </trans-unit>
        <trans-unit id="750611976052ddea1aefb70b31d097d53f3ce423" translate="yes" xml:space="preserve">
          <source>This restricts the N-API surface to just the functionality that was available in the specified (and earlier) versions.</source>
          <target state="translated">これにより、N-API サーフェスは、指定された(以前の)バージョンで利用可能だった機能だけに制限されます。</target>
        </trans-unit>
        <trans-unit id="36c4ff0f9108bfa3f5ac17d8e5cddf8133c7ace6" translate="yes" xml:space="preserve">
          <source>This section describes the fields used by the Node.js runtime. Other tools (such as &lt;a href=&quot;https://docs.npmjs.com/creating-a-package-json-file&quot;&gt;npm&lt;/a&gt;) use additional fields which are ignored by Node.js and not documented here.</source>
          <target state="translated">このセクションでは、Node.jsランタイムで使用されるフィールドについて説明します。他のツール（&lt;a href=&quot;https://docs.npmjs.com/creating-a-package-json-file&quot;&gt;npm&lt;/a&gt;など）は、Node.jsによって無視され、ここに記載されていない追加のフィールドを使用します。</target>
        </trans-unit>
        <trans-unit id="34670d73c4e4f5a65a2cb44fbd1ad5dc7e3c2e51" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3356fbb2ec8113ec889350faf51d5150518f85cf" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="36ef0fd0665d4357db1b84a2e19547d2706f8eb2" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e161eae495f60eecc39fcb871e7db25d724d21cd" translate="yes" xml:space="preserve">
          <source>This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.</source>
          <target state="translated">これは、応答ボディのチャンクを送信します。このメソッドは、ボディの連続した部分を提供するために複数回呼ばれることがあります。</target>
        </trans-unit>
        <trans-unit id="f47c2c3b1777de556577edd88a50fe16d9b43ef1" translate="yes" xml:space="preserve">
          <source>This should only be disabled for testing; HTTP requires the Date header in responses.</source>
          <target state="translated">HTTP はレスポンスに Date ヘッダを要求します。</target>
        </trans-unit>
        <trans-unit id="f59eae131a4bc1e43befd9071b9f0e34721e73ef" translate="yes" xml:space="preserve">
          <source>This status does not convey any information regarding if &lt;code&gt;module.link()&lt;/code&gt; has been called. See &lt;code&gt;module.linkingStatus&lt;/code&gt; for that.</source>
          <target state="translated">このステータスは、 &lt;code&gt;module.link()&lt;/code&gt; が呼び出されたかどうかに関する情報を伝えません。これについては、 &lt;code&gt;module.linkingStatus&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d569011bacf9d6bd4852dc82cdff4824a76def0c" translate="yes" xml:space="preserve">
          <source>This symbol can be set as a property on the HTTP/2 headers object with an array value in order to provide a list of headers considered sensitive. See &lt;a href=&quot;#http2_sensitive_headers&quot;&gt;Sensitive headers&lt;/a&gt; for more details.</source>
          <target state="translated">このシンボルは、機密と見なされるヘッダーのリストを提供するために、配列値を使用してHTTP / 2ヘッダーオブジェクトのプロパティとして設定できます。詳細については、&lt;a href=&quot;#http2_sensitive_headers&quot;&gt;機密ヘッダー&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0116ac87fb2193b9cadfa6e6c4b58a397209ffa8" translate="yes" xml:space="preserve">
          <source>This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</source>
          <target state="translated">This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</target>
        </trans-unit>
        <trans-unit id="7d49c824be76a8237417ac95208be1205943ec8d" translate="yes" xml:space="preserve">
          <source>This throws an error if &lt;code&gt;value&lt;/code&gt; cannot be serialized.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; をシリアル化できない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="c1f045702ea4da181894894d719dc7571a2ba4e1" translate="yes" xml:space="preserve">
          <source>This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt;.</source>
          <target state="translated">This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c184cfb934c9b738977c32837985d21a951b41c" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt;&lt;code&gt;dns.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">このタイプのレコードには、&lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt; &lt;code&gt;dns.resolveTxt()&lt;/code&gt; &lt;/a&gt;を参照する &lt;code&gt;entries&lt;/code&gt; と呼ばれる配列プロパティが含まれ &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt; 例：{エントリ：['...']、タイプ： 'TXT'}</target>
        </trans-unit>
        <trans-unit id="6eeca1c2f00a4310890a7139dcfe6a2e6c8c965b" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt;&lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">このタイプのレコードには、&lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt; &lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt; &lt;/a&gt;を参照する &lt;code&gt;entries&lt;/code&gt; と呼ばれる配列プロパティが含まれ &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt; 例：{エントリ：['...']、タイプ： 'TXT'}</target>
        </trans-unit>
        <trans-unit id="4fe3642f2b14cc07a05a25a58a28addaf29cbab1" translate="yes" xml:space="preserve">
          <source>This use of the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module in the REPL has these side effects:</source>
          <target state="translated">REPL での&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールのこの使用には、次のような副作用があります。</target>
        </trans-unit>
        <trans-unit id="aba8179089db1922508405d8b782dab836cca61d" translate="yes" xml:space="preserve">
          <source>This value is also available as &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt;&lt;code&gt;buffer.kMaxLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この値は、&lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt; &lt;code&gt;buffer.kMaxLength&lt;/code&gt; &lt;/a&gt;としても使用できます。</target>
        </trans-unit>
        <trans-unit id="1960fefc47eea7af53d2386124418b76d027b6f6" translate="yes" xml:space="preserve">
          <source>This value may depend on the JS engine that is being used.</source>
          <target state="translated">この値は、使用しているJSエンジンに依存します。</target>
        </trans-unit>
        <trans-unit id="1786c62ca4014aae9c8daf35face4f14af3bb962" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a88498e969bb560f2877e63299e4b7964f93ae3a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_exports&quot;&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_exports&quot;&gt; &lt;code&gt;exports&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="12ae6d48315f5836aaba96e8fe5033389f67632a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_filename&quot;&gt; &lt;code&gt;__filename&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9d045d7bbd376d894aa22ac1819fb6f7283f644a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0714b1ea5c5b147147404c53c9c7ea1c9d011bd2" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7388904d6f49c90b401aa690cef27c57e52dd479" translate="yes" xml:space="preserve">
          <source>This was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</source>
          <target state="translated">これは、Node.jsコア以外での使用を意図したものではなく、NPN (Next Protocol Negotiation)のサポートが削除されたことで廃止された、文書化されていないヘルパー関数でした。</target>
        </trans-unit>
        <trans-unit id="ce2a6d546b034160617c687e3f2691f4eb71b066" translate="yes" xml:space="preserve">
          <source>This was never a documented feature.</source>
          <target state="translated">これは決して文書化された機能ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="946c9714458dbb894196ffd1f153f59f0b8d6c98" translate="yes" xml:space="preserve">
          <source>This will ensure that the per-addon-instance data reaches each binding that can be called from JavaScript. The per-addon-instance data must also be passed into any asynchronous callbacks the addon may create.</source>
          <target state="translated">これにより、addon-instanceあたりのデータがJavaScriptから呼び出すことができる各バインディングに確実に届くようになります。アドオンインスタンスごとのデータは、アドオンが作成する非同期コールバックにも渡されなければなりません。</target>
        </trans-unit>
        <trans-unit id="110650dd72d6d2fde8d01c7a0259236b0dc7296b" translate="yes" xml:space="preserve">
          <source>This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.</source>
          <target state="translated">これは、入力データのフォーマットが無効な場合など、他のエラーが発生する状況での動作を変えるものではありません。この方法を使用すると、入力が早く終わったのか、完全性チェックが不足しているのかを判断することができなくなるため、解凍された結果が有効であることを手動でチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="d25a5d904dfe4b2d558d89e8b007b3cb884783fb" translate="yes" xml:space="preserve">
          <source>This will not work because the callback function passed to &lt;code&gt;fs.readFile()&lt;/code&gt; is called asynchronously. By the time the callback has been called, the surrounding code, including the &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; block, will have already exited. Throwing an error inside the callback &lt;strong&gt;can crash the Node.js process&lt;/strong&gt; in most cases. If &lt;a href=&quot;domain&quot;&gt;domains&lt;/a&gt; are enabled, or a handler has been registered with &lt;code&gt;process.on('uncaughtException')&lt;/code&gt;, such errors can be intercepted.</source>
          <target state="translated">&lt;code&gt;fs.readFile()&lt;/code&gt; に渡されるコールバック関数が非同期で呼び出されるため、これは機能しません。コールバックが呼び出されるまでに、 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; ブロックを含む周囲のコードはすでに終了しています。コールバック内でエラーを&lt;strong&gt;スローすると&lt;/strong&gt;、ほとんどの場合&lt;strong&gt;、Node.jsプロセスがクラッシュする可能性が&lt;/strong&gt;あります。&lt;a href=&quot;domain&quot;&gt;ドメイン&lt;/a&gt;が有効になっている場合、またはハンドラーが &lt;code&gt;process.on('uncaughtException')&lt;/code&gt; に登録されている場合、そのようなエラーはインターセプトされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b97a9813dd547ff5a18b92d60ea9c7c60a244fb" translate="yes" xml:space="preserve">
          <source>This will opt into the default &lt;code&gt;NAPI_VERSION&lt;/code&gt; for the given release of Node.js. In order to ensure compatibility with specific versions of N-API, the version can be specified explicitly when including the header:</source>
          <target state="translated">これにより、Node.jsの特定のリリースのデフォルトの &lt;code&gt;NAPI_VERSION&lt;/code&gt; が選択されます。N-APIの特定のバージョンとの互換性を確保するために、ヘッダーを含めるときにバージョンを明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="c2caba2077af1acf81bcaf212679d9efc23f7b46" translate="yes" xml:space="preserve">
          <source>This will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.</source>
          <target state="translated">これは、TTY ストリームから入力を読むときに、現在のカーソルが入力文字列のどこにあるかを追跡します。カーソルの位置は、入力が処理される際に変更される入力文字列の部分と、ターミナルキャレットがレンダリングされる列を決定します。</target>
        </trans-unit>
        <trans-unit id="03b61b4fd778d330c4d9ae04ee169c3836b77a3e" translate="yes" xml:space="preserve">
          <source>This will, however, generally degrade compression.</source>
          <target state="translated">しかし、これは一般的に圧縮を低下させます。</target>
        </trans-unit>
        <trans-unit id="898d4d4c37da591f1dbaea989ea4b845e4eb4dcd" translate="yes" xml:space="preserve">
          <source>This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.</source>
          <target state="translated">その結果、大量のハンドルが作成され、かなりのリソースを消費することになります。さらに、ネイティブコードでは最新のハンドルのみを使用することができたとしても、関連するオブジェクトはすべて同じスコープを共有しているため、すべてのオブジェクトが生きたままになります。</target>
        </trans-unit>
        <trans-unit id="d467439a515ceca23a9a5fc18245fc89bdccd935" translate="yes" xml:space="preserve">
          <source>Though the call to &lt;code&gt;dns.lookup()&lt;/code&gt; will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">&lt;code&gt;dns.lookup()&lt;/code&gt; の呼び出しはJavaScriptの観点からは非同期ですが、libuvのスレッドプールで実行される&lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt;への同期呼び出しとして実装されます。これは、一部のアプリケーションでパフォーマンスに悪影響を与える可能性があります。詳細については、&lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bf8b9bcd61ac02e20b1f70392f83be7f64e30820" translate="yes" xml:space="preserve">
          <source>Threadpool Usage</source>
          <target state="translated">スレッドプールの使い方</target>
        </trans-unit>
        <trans-unit id="194378c3031d5f4c91d972a4e5fae3797161a3bf" translate="yes" xml:space="preserve">
          <source>Threadpool usage</source>
          <target state="translated">スレッドプールの使用法</target>
        </trans-unit>
        <trans-unit id="5b84236df57d6e40394ff631a8881c1eb98f55ef" translate="yes" xml:space="preserve">
          <source>Threadpool usage and performance considerations</source>
          <target state="translated">スレッドプールの使用法とパフォーマンスに関する考察</target>
        </trans-unit>
        <trans-unit id="4c31834fd4f46e0567ccae1bc9794a97e2ef2ae6" translate="yes" xml:space="preserve">
          <source>Threads can be added to and removed from a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; object during its existence. Thus, in addition to specifying an initial number of threads upon creation, &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; can be called to indicate that an existing thread will stop making use of the thread-safe function.</source>
          <target state="translated">スレッドは、その存在中に &lt;code&gt;napi_threadsafe_function&lt;/code&gt; オブジェクトに追加したり、napi_threadsafe_functionオブジェクトから削除したりできます。したがって、作成時にスレッドの初期数を指定することに加えて、 &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; を呼び出して、新しいスレッドがスレッドセーフ関数の使用を開始することを示すことができます。同様に、 &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; を呼び出して、既存のスレッドがスレッドセーフ関数の使用を停止することを示すことができます。</target>
        </trans-unit>
        <trans-unit id="dd491a1a20798b4f3eab7ca47ce9cde3c1a3f963" translate="yes" xml:space="preserve">
          <source>Three States</source>
          <target state="translated">三州</target>
        </trans-unit>
        <trans-unit id="6e9c26957242e69ce7b5e779efca06887090978a" translate="yes" xml:space="preserve">
          <source>Three states</source>
          <target state="translated">三つの州</target>
        </trans-unit>
        <trans-unit id="4f702a6c25a0cf4674613f32d0f9697e71800855" translate="yes" xml:space="preserve">
          <source>Throw ERR_INVALID_ARG_VALUE instead of ERR_INVALID_OPT_VALUE for invalid input arguments.</source>
          <target state="translated">無効な入力引数に対して ERR_INVALID_OPT_VALUE の代わりに ERR_INVALID_ARG_VALUE をスローする。</target>
        </trans-unit>
        <trans-unit id="e50789f4c54d6872bdd31a68fcda1c02e644ea74" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;Module Not Found&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="3c2047ffcc9c1f89b1e17b907380a299308c953e" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="157fa426a458f5a47aca54e42c4db7bded9d4f50" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="8170c71e55e480b36becd3a8bdae44cd43c0144e" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="df6f0a31b4716ff39675671a8367ef62be40d012" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Package Configuration&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;無効なパッケージ構成&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="a78220df6c48d2fb08d8df29384d6309dc62e9a0" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Specifier&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;無効な指定子&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="14508f1d752fa9f1a58cf9aef8de034062c7fcf3" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="c6b845975caf9cd24e6a6a64484cf34be9a5885d" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported File Extension&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;サポートされていないファイル拡張子&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="274bb320296e78e649774ab7cf14c8bffcb9c969" translate="yes" xml:space="preserve">
          <source>Throw errors for deprecations.</source>
          <target state="translated">非推奨のエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="ca7b995e33945e66abe60ea39498a0102ea95fab" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide a valid value for one of its returned object properties on execution.</source>
          <target state="translated">関数オプションの実行時に、返されたオブジェクトプロパティのうちのひとつが有効な値を提供しなかった場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="e035afeae4a1775ec604c8b5d8f677f77e629c2f" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide an expected value type for one of its returned object properties on execution.</source>
          <target state="translated">関数オプションが、その関数の実行時に返されるオブジェクトプロパティの一つに対して期待される値の型を提供していない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="500f81cca30019a552ab883030a9f388e713b7de" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.</source>
          <target state="translated">関数オプションが実行時に期待される値の型を返さない場合、例えば関数がプロミスを返すことが期待される場合などにスローされます。</target>
        </trans-unit>
        <trans-unit id="5ad63a3ff43abbab909982b69d4d78b65b2aafab" translate="yes" xml:space="preserve">
          <source>Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34a1483538db6bbfe91dd9089515dcf6beb98e43" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_HTTP2_INVALID_SETTING_VALUE&lt;/code&gt; for invalid &lt;code&gt;settings&lt;/code&gt; values.</source>
          <target state="translated">例外 &lt;code&gt;ERR_HTTP2_INVALID_SETTING_VALUE&lt;/code&gt; は無効なため &lt;code&gt;settings&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="e302253df36558f348486c40585b9f94218d17e8" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_INVALID_ARG_TYPE&lt;/code&gt; for invalid &lt;code&gt;settings&lt;/code&gt; argument.</source>
          <target state="translated">例外 &lt;code&gt;ERR_INVALID_ARG_TYPE&lt;/code&gt; は無効なため &lt;code&gt;settings&lt;/code&gt; 引数。</target>
        </trans-unit>
        <trans-unit id="6c9dfd60d599c5257e4849241e700802dc509d8e" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; instead of &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt;.</source>
          <target state="translated">スロー &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; の代わり &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="1f533babc33348b6d3fb4950583edc945f148749" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;value&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This is useful when testing the &lt;code&gt;error&lt;/code&gt; argument in callbacks. The stack trace contains all frames from the error passed to &lt;code&gt;ifError()&lt;/code&gt; including the potential new frames for &lt;code&gt;ifError()&lt;/code&gt; itself.</source>
          <target state="translated">例外 &lt;code&gt;value&lt;/code&gt; 場合は &lt;code&gt;value&lt;/code&gt; されていない &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; を。これは、コールバックで &lt;code&gt;error&lt;/code&gt; 引数をテストするときに役立ちます。スタックトレースには、 &lt;code&gt;ifError()&lt;/code&gt; 自体に発生する可能性のある新しいフレームを含め、 &lt;code&gt;ifError()&lt;/code&gt; に渡されたエラーのすべてのフレームが含まれます。</target>
        </trans-unit>
        <trans-unit id="1d293028683a03e7c8565aef633c4bd64df69e5d" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;SystemError&lt;/code&gt;&lt;/a&gt; if a user has no &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;homedir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;username&lt;/code&gt; または &lt;code&gt;homedir&lt;/code&gt; がない場合は、&lt;a href=&quot;errors#errors_class_systemerror&quot;&gt; &lt;code&gt;SystemError&lt;/code&gt; をスロー&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="eb037643826c156fd10159ab0e43d2a4ebea39d9" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ab0da4aef65302e8e7125139145d3ae9207952c" translate="yes" xml:space="preserve">
          <source>Throws an &lt;code&gt;AssertionError&lt;/code&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="translated">指定されたエラーメッセージまたはデフォルトのエラーメッセージとともに &lt;code&gt;AssertionError&lt;/code&gt; をスローします。場合は &lt;code&gt;message&lt;/code&gt; パラメータは、インスタンスのある&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;、それはの代わりにスローされます &lt;code&gt;AssertionError&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="0f221650e50054f81fe163161fb94d86584723cb" translate="yes" xml:space="preserve">
          <source>Throws if the &lt;code&gt;fromEnc&lt;/code&gt; or &lt;code&gt;toEnc&lt;/code&gt; specify invalid character encodings or if conversion from &lt;code&gt;fromEnc&lt;/code&gt; to &lt;code&gt;toEnc&lt;/code&gt; is not permitted.</source>
          <target state="translated">&lt;code&gt;fromEnc&lt;/code&gt; または &lt;code&gt;toEnc&lt;/code&gt; が無効な文字エンコーディングを指定している場合、またはfromEncから &lt;code&gt;fromEnc&lt;/code&gt; への変換が許可されていない場合に &lt;code&gt;toEnc&lt;/code&gt; されます。</target>
        </trans-unit>
        <trans-unit id="60660bb221304e5fad9ca2c2dd92e7d7c409ce60" translate="yes" xml:space="preserve">
          <source>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</source>
          <target state="translated">このように、サイクルに遭遇した場合や依存関係の競合があった場合でも、すべてのモジュールは、そのモジュールが使用できる依存関係のバージョンを取得することができます。</target>
        </trans-unit>
        <trans-unit id="f395da331ca8317cd167d68da7aed50270080a44" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must make use exclusively of N-API by restricting itself to using</source>
          <target state="translated">このように、Node.js のメジャーバージョン間で ABI 互換性を維持するためには、アドオンは N-API のみを使用して</target>
        </trans-unit>
        <trans-unit id="112c3024c3d7912fd57cd8ebb68639fc60c09698" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must use N-API exclusively by restricting itself to using</source>
          <target state="translated">このように、Node.js のメジャーバージョン間で ABI 互換性を維持するためには、アドオンは N-API を排他的に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="551d6adf37a9cb1b523706676a5c3aab5b5fcb93" translate="yes" xml:space="preserve">
          <source>Timeout interactions with asynchronous tasks and Promises</source>
          <target state="translated">非同期タスクとPromisesとのタイムアウト相互作用</target>
        </trans-unit>
        <trans-unit id="ca7f027cfebdbd1cfd15712b89e96328bae876ed" translate="yes" xml:space="preserve">
          <source>Timeout limitations when using process.nextTick(), Promises, and queueMicrotask()</source>
          <target state="translated">process.nextTick()、Promises、および queueMicrotask()を使用した場合のタイムアウトの制限</target>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="b30cd93bad7030d8a76933dae1934ce5c619d4e0" translate="yes" xml:space="preserve">
          <source>Timers Promises API</source>
          <target state="translated">タイマーズ プロミス API</target>
        </trans-unit>
        <trans-unit id="f7391e8fca236efbdf30a41b1765e03b0aedeea8" translate="yes" xml:space="preserve">
          <source>To access it:</source>
          <target state="translated">アクセスするには</target>
        </trans-unit>
        <trans-unit id="2f285c5caf3395120404e2b15ef1afaae7633a15" translate="yes" xml:space="preserve">
          <source>To access the &lt;code&gt;stream&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; モジュールにアクセスするには：</target>
        </trans-unit>
        <trans-unit id="113093009a6693093866588b6702951e8ef8612a" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with POSIX file paths on any operating system, use &lt;a href=&quot;#path_path_posix&quot;&gt;&lt;code&gt;path.posix&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">任意のオペレーティングシステムでPOSIXファイルパスを操作するときに一貫した結果を得るには、&lt;a href=&quot;#path_path_posix&quot;&gt; &lt;code&gt;path.posix&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="89017d2ede47b0785d45ee78f6f27262e118a2db" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with Windows file paths on any operating system, use &lt;a href=&quot;#path_path_win32&quot;&gt;&lt;code&gt;path.win32&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">任意のオペレーティングシステムでWindowsファイルパスを操作するときに一貫した結果を得るには、&lt;a href=&quot;#path_path_win32&quot;&gt; &lt;code&gt;path.win32&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b45c1d802e95d3410405265dfd8e4d44f4dbfd27" translate="yes" xml:space="preserve">
          <source>To add the method &lt;code&gt;hello&lt;/code&gt; as a function so that it can be called as a method provided by the addon:</source>
          <target state="translated">メソッド &lt;code&gt;hello&lt;/code&gt; を関数として追加して、アドオンによって提供されるメソッドとして呼び出せるようにするには：</target>
        </trans-unit>
        <trans-unit id="81c0394f49db892821115b54c6eb0edd5cc1ba09" translate="yes" xml:space="preserve">
          <source>To be notified when the file was modified, not just accessed, it is necessary to compare &lt;code&gt;curr.mtime&lt;/code&gt; and &lt;code&gt;prev.mtime&lt;/code&gt;.</source>
          <target state="translated">アクセスされただけでなく、ファイルが変更されたときに通知を受けるには、 &lt;code&gt;curr.mtime&lt;/code&gt; と &lt;code&gt;prev.mtime&lt;/code&gt; を比較する必要があります。</target>
        </trans-unit>
        <trans-unit id="817d0bb7fcad591dfad28392604533ca026ba506" translate="yes" xml:space="preserve">
          <source>To be used in conjunction with &lt;code&gt;--experimental-modules&lt;/code&gt;. Sets the resolution algorithm for resolving specifiers. Valid options are &lt;code&gt;explicit&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; と組み合わせて使用​​します。指定子を解決するための解決アルゴリズムを設定します。有効なオプションは、 &lt;code&gt;explicit&lt;/code&gt; および &lt;code&gt;node&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f8a3354dac48c927a38f89348c115a2d20de7cf0" translate="yes" xml:space="preserve">
          <source>To begin watching an expression, type &lt;code&gt;watch('my_expression')&lt;/code&gt;. The command &lt;code&gt;watchers&lt;/code&gt; will print the active watchers. To remove a watcher, type &lt;code&gt;unwatch('my_expression')&lt;/code&gt;.</source>
          <target state="translated">式の &lt;code&gt;watch('my_expression')&lt;/code&gt; を開始するには、watch（ 'my_expression'）と入力します。コマンド &lt;code&gt;watchers&lt;/code&gt; は、アクティブなウォッチャーを出力します。ウォッチャーを削除するには、 &lt;code&gt;unwatch('my_expression')&lt;/code&gt; と入力します。</target>
        </trans-unit>
        <trans-unit id="1a0304f4e61d19a2c2ac88f8d7fae8f457554b26" translate="yes" xml:space="preserve">
          <source>To break on the first line of the application code, pass the &lt;code&gt;--inspect-brk&lt;/code&gt; flag instead of &lt;code&gt;--inspect&lt;/code&gt;.</source>
          <target state="translated">アプリケーションコードの最初の行で &lt;code&gt;--inspect-brk&lt;/code&gt; &lt;code&gt;--inspect&lt;/code&gt; 代わりに--inspect -brkフラグを渡します。</target>
        </trans-unit>
        <trans-unit id="22dfb32e7c28d8dcaa05c55a622e6cdce176c30b" translate="yes" xml:space="preserve">
          <source>To build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="translated">この例をビルドするには、 &lt;code&gt;myobject.cc&lt;/code&gt; ファイルを &lt;code&gt;binding.gyp&lt;/code&gt; に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb2546fbdf0da09b297499ea21ca759167d5daca" translate="yes" xml:space="preserve">
          <source>To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt;, &lt;code&gt;Promise.race()&lt;/code&gt;, or &lt;code&gt;Promise.allSettled()&lt;/code&gt;:</source>
          <target state="translated">To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt; , &lt;code&gt;Promise.race()&lt;/code&gt; , or &lt;code&gt;Promise.allSettled()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="257192fca64c7e5ef4beea84df13594a588d02bf" translate="yes" xml:space="preserve">
          <source>To change the default timeout use the &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt;&lt;code&gt;--http-server-default-timeout&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">デフォルトのタイムアウトを変更するには、&lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt; &lt;code&gt;--http-server-default-timeout&lt;/code&gt; &lt;/a&gt;フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="83bf60ee112d40f394c9009468f70ac11d5c5c03" translate="yes" xml:space="preserve">
          <source>To check for support for a non-English locale (i.e. &lt;code&gt;full-icu&lt;/code&gt; or &lt;code&gt;system-icu&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; can be a good distinguishing factor:</source>
          <target state="translated">英語以外のロケール（ &lt;code&gt;full-icu&lt;/code&gt; または &lt;code&gt;system-icu&lt;/code&gt; など）のサポートを確認するには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;が優れた識別要素になります。</target>
        </trans-unit>
        <trans-unit id="6f9ed209f8f372fe4035b55216331b230379fdb5" translate="yes" xml:space="preserve">
          <source>To check if a file exists without manipulating it afterwards, &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">後で操作せずにファイルが存在するかどうかを確認するには、&lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; &lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="72931344905502cc560ea0d63014dbb48946d73e" translate="yes" xml:space="preserve">
          <source>To check if a stream is connected to a &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; context, check the &lt;code&gt;isTTY&lt;/code&gt; property.</source>
          <target state="translated">ストリームが&lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt;コンテキストに接続されているかどうかを確認するには、 &lt;code&gt;isTTY&lt;/code&gt; プロパティを確認します。</target>
        </trans-unit>
        <trans-unit id="84c7039869bdb8532ecd51ab012fbbe93984c08f" translate="yes" xml:space="preserve">
          <source>To configure any of them, a custom &lt;a href=&quot;#http_class_http_agent&quot;&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/a&gt; instance must be created.</source>
          <target state="translated">これらのいずれかを構成するには、カスタムの&lt;a href=&quot;#http_class_http_agent&quot;&gt; &lt;code&gt;http.Agent&lt;/code&gt; &lt;/a&gt;インスタンスを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d69007751c2a41a54e8aeb848a171b7cce6a5036" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the second line would just be changed to:</source>
          <target state="translated">ソケット &lt;code&gt;/tmp/echo.sock&lt;/code&gt; に接続するには、2行目を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="13ba3f87d486426a67fdfd4e20f95fec780e8f03" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f0a6196d20446e42af34618037ad4de017d40178" translate="yes" xml:space="preserve">
          <source>To control how ICU is used in Node.js, four &lt;code&gt;configure&lt;/code&gt; options are available during compilation. Additional details on how to compile Node.js are documented in &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;.</source>
          <target state="translated">Node.jsでのICUの使用方法を制御するために、コンパイル中に4つの &lt;code&gt;configure&lt;/code&gt; オプションを使用できます。Node.jsのコンパイル方法の詳細については、&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.mdに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="67c2ffbe92be0f9b51c9a83a429725a64f6213f9" translate="yes" xml:space="preserve">
          <source>To correctly order the operations, move the &lt;code&gt;fs.stat()&lt;/code&gt; call into the callback of the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">操作を正しく &lt;code&gt;fs.stat()&lt;/code&gt; は、fs.stat（）呼び出しを &lt;code&gt;fs.rename()&lt;/code&gt; 操作のコールバックに移動します。</target>
        </trans-unit>
        <trans-unit id="f0520e0374ec9ffcd9c6cf5ec0d679283c3270e7" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic module that doesn't correspond to one of the existing &lt;code&gt;format&lt;/code&gt; interpretations, the &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook can be used. This hook is called only for modules that return &lt;code&gt;format: 'dynamic'&lt;/code&gt; from the &lt;code&gt;resolve&lt;/code&gt; hook.</source>
          <target state="translated">既存の &lt;code&gt;format&lt;/code&gt; 解釈のいずれにも対応しないカスタム動的モジュールを作成するには、 &lt;code&gt;dynamicInstantiate&lt;/code&gt; フックを使用できます。このフックは、 &lt;code&gt;resolve&lt;/code&gt; フックから &lt;code&gt;format: 'dynamic'&lt;/code&gt; を返すモジュールに対してのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8e176982d3949a6fa8a4834a7abff97fa762f0cb" translate="yes" xml:space="preserve">
          <source>To create custom messaging channels (which is encouraged over using the default global channel because it facilitates separation of concerns), users can create a &lt;code&gt;MessageChannel&lt;/code&gt; object on either thread and pass one of the &lt;code&gt;MessagePort&lt;/code&gt;s on that &lt;code&gt;MessageChannel&lt;/code&gt; to the other thread through a pre-existing channel, such as the global one.</source>
          <target state="translated">（それは懸念の分離を容易にするので、デフォルトのグローバルチャネルを使用しての上に奨励される）カスタムメッセージングチャネルを作成するには、ユーザーが作成することができ &lt;code&gt;MessageChannel&lt;/code&gt; のいずれかのスレッド上のオブジェクトをとの1パス &lt;code&gt;MessagePort&lt;/code&gt; その上Sを &lt;code&gt;MessageChannel&lt;/code&gt; 事前介して他のスレッドにグローバルチャネルなどの既存のチャネル。</target>
        </trans-unit>
        <trans-unit id="1a3b265855273805adaa9745965d95cb45ba31be" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</target>
        </trans-unit>
        <trans-unit id="42c2ed95d362ac6e310208df03daab20b4ae57a0" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">デフォルトのモジュール解像度をカスタマイズするために、オプションでNode.jsの &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; 引数を介してローダーフックを提供できます。</target>
        </trans-unit>
        <trans-unit id="152f25ba7578f4f82f7a056c9eb04659230b3677" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variable. This will also deactivate the colors in the REPL.</source>
          <target state="translated">色を無効にするには、 &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; 環境変数を使用します。これにより、REPLの色も無効になります。</target>
        </trans-unit>
        <trans-unit id="f63281065a3a3689c14d9466b15bbe449245428a" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</source>
          <target state="translated">To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="ee22bab1313bf7a33041e942c66c0625221d4e94" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt;):</source>
          <target state="translated">新しいインスタンスを作成できるようにクラスを定義するには（多くの場合、&lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrapで&lt;/a&gt;使用されます）：</target>
        </trans-unit>
        <trans-unit id="ed68c74bf87981629a008b2e07694c150206ebab" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object wrap&lt;/a&gt;):</source>
          <target state="translated">新しいインスタンスを作成できるようにクラスを定義するには（多くの場合、&lt;a href=&quot;#n_api_object_wrap&quot;&gt;オブジェクトラップで&lt;/a&gt;使用されます）：</target>
        </trans-unit>
        <trans-unit id="6a009f5771c1d5f40af8776f25938972d00c3c60" translate="yes" xml:space="preserve">
          <source>To enable source map parsing, Node.js must be run with the flag &lt;a href=&quot;cli#cli_enable_source_maps&quot;&gt;&lt;code&gt;--enable-source-maps&lt;/code&gt;&lt;/a&gt;, or with code coverage enabled by setting &lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt;&lt;code&gt;NODE_V8_COVERAGE=dir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ソースマップの解析を有効にするには、Node.jsをフラグ&lt;a href=&quot;cli#cli_enable_source_maps&quot;&gt; &lt;code&gt;--enable-source-maps&lt;/code&gt; &lt;/a&gt;で実行するか、&lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt; &lt;code&gt;NODE_V8_COVERAGE=dir&lt;/code&gt; を&lt;/a&gt;設定してコードカバレッジを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="652b902ed0de8270b9fb62fc619759f8ad4b57a9" translate="yes" xml:space="preserve">
          <source>To enforce a specific color support, use one of the below environment settings.</source>
          <target state="translated">特定の色のサポートを強制するには、以下の環境設定のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="563ac46b64bfdec1cb057f5366a2341549beff68" translate="yes" xml:space="preserve">
          <source>To ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of &lt;code&gt;queryHasRecords()&lt;/code&gt; has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in &lt;code&gt;napi_ref&lt;/code&gt;s can help, because &lt;code&gt;napi_instanceof()&lt;/code&gt; can then be used to ensure that the instances passed into &lt;code&gt;queryHashRecords()&lt;/code&gt; are indeed of the correct type.</source>
          <target state="translated">最初の引数から取得したポインターが実際にデータベースハンドルへのポインターであり、同様に、2番目の引数から取得したポインターが実際にクエリハンドルへのポインターであることを &lt;code&gt;queryHasRecords()&lt;/code&gt; するには、queryHasRecords（）の実装で型を実行する必要があります。検証。データベースハンドルがインスタンス化されたJavaScriptクラスコンストラクターとクエリハンドルがインスタンス化された &lt;code&gt;napi_ref&lt;/code&gt; すると、 &lt;code&gt;napi_instanceof()&lt;/code&gt; を使用して &lt;code&gt;queryHashRecords()&lt;/code&gt; に渡されたインスタンスが実際に正しいタイプ。</target>
        </trans-unit>
        <trans-unit id="c55f753794b1f35b9fdcfce66da0b9225f594ed1" translate="yes" xml:space="preserve">
          <source>To exit with a 'failure' code:</source>
          <target state="translated">失敗」コードで終了します。</target>
        </trans-unit>
        <trans-unit id="ba26739dd8d319b8071919705bb005ee5baa56d8" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;.</source>
          <target state="translated">クエリ文字列からパラメーターを抽出するには、 &lt;code&gt;require('querystring').parse&lt;/code&gt; 関数を使用するか、 &lt;code&gt;require('url').parse&lt;/code&gt; の2番目の引数として &lt;code&gt;true&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5727ff4630ff91a10fefc92eb21eadd2192abbee" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;:</source>
          <target state="translated">クエリ文字列からパラメータを抽出するには、 &lt;code&gt;require('querystring').parse&lt;/code&gt; 機能を使用することができ、または &lt;code&gt;true&lt;/code&gt; にする2番目の引数として渡すことができます &lt;code&gt;require('url').parse&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3fefe10ff6dde1978c8f6041595748b6a6792d9d" translate="yes" xml:space="preserve">
          <source>To fully customize the output of a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance pass in a new function for the &lt;code&gt;writer&lt;/code&gt; option on construction. The following example, for instance, simply converts any input text to upper case:</source>
          <target state="translated">&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;インスタンスの出力を完全にカスタマイズするには、作成時に &lt;code&gt;writer&lt;/code&gt; オプションの新しい関数を渡します。たとえば、次の例では、入力テキストを大文字に変換するだけです。</target>
        </trans-unit>
        <trans-unit id="f82f342e2108d2b1a12ccbbfb5e1444bf37c6bd0" translate="yes" xml:space="preserve">
          <source>To generate integrity strings, a script such as &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; can be used.</source>
          <target state="translated">整合性文字列を生成するには、 &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; などのスクリプトを使用できます。</target>
        </trans-unit>
        <trans-unit id="ad9bff9dfa86ac3f581dc9a1a87860cd6b7f4e57" translate="yes" xml:space="preserve">
          <source>To generate the certificate and key for this example, run:</source>
          <target state="translated">この例の証明書と鍵を生成するには、実行します。</target>
        </trans-unit>
        <trans-unit id="69f64fd3b92ea07f26cf029da8688a34b5e1c399" translate="yes" xml:space="preserve">
          <source>To get the exact filename that will be loaded when &lt;code&gt;require()&lt;/code&gt; is called, use the &lt;code&gt;require.resolve()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; が呼び出されたときにロードされる正確なファイル名を取得するには、 &lt;code&gt;require.resolve()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6ff57305218fef61e7a1c5f3ae88348b43634dfe" translate="yes" xml:space="preserve">
          <source>To get the response, add a listener for &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; to the request object. &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; will be emitted from the request object when the response headers have been received. The &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event is executed with one argument which is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答を取得するには、&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;リスナーを要求オブジェクトに追加します。&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;は、応答ヘッダーが受信されたときに要求オブジェクトから発行されます。&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;イベントはのインスタンスの引数で実行され&lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="044ebf34f23de583098254e8634e645a39e8143c" translate="yes" xml:space="preserve">
          <source>To get the string representation of the error code, use &lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt;&lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーコードの文字列表現を取得するには、&lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt; &lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="901383fa9c06c6cbf4f565534c4023b071c8fa19" translate="yes" xml:space="preserve">
          <source>To get the version string without the prepended &lt;em&gt;v&lt;/em&gt;, use &lt;code&gt;process.versions.node&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;vを&lt;/em&gt;付加せずにバージョン文字列を取得するには、 &lt;code&gt;process.versions.node&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6aa20aefae1fe619888a9d19f8166927723ea251" translate="yes" xml:space="preserve">
          <source>To guard against crashing the Node.js process the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module can be used. (Note, however, that the &lt;code&gt;domain&lt;/code&gt; module is deprecated.)</source>
          <target state="translated">Node.jsプロセスのクラッシュを防ぐために、&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールを使用できます。（ただし、 &lt;code&gt;domain&lt;/code&gt; モジュールは非推奨であることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="4a3925d0a0110a53c1988b899e2668ed5402b3d3" translate="yes" xml:space="preserve">
          <source>To handle the errors that it catches, listen to its &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">キャッチしたエラーを処理するには、 &lt;code&gt;'error'&lt;/code&gt; イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="9c953e56d44954a70f8f7788b1edcd731a0e9806" translate="yes" xml:space="preserve">
          <source>To handle this case, N-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このケースを処理するために、N-APIは、新しく作成されたハンドルが関連付けられる新しい「スコープ」を確立する機能を提供します。これらのハンドルが不要になると、スコープを「閉じる」ことができ、スコープに関連付けられているすべてのハンドルが無効になります。スコープの開閉に使用できるメソッドは、&lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="8ae9fb9267ffb10903bb86fc63715f4cd0cfcaaf" translate="yes" xml:space="preserve">
          <source>To have a module execute code multiple times, export a function, and call that function.</source>
          <target state="translated">モジュールにコードを複数回実行させ、関数をエクスポートし、その関数を呼び出すようにする。</target>
        </trans-unit>
        <trans-unit id="56b15cec207bf8e8429b8350d22d585ee8bda635" translate="yes" xml:space="preserve">
          <source>To illustrate the behavior, imagine this hypothetical implementation of &lt;code&gt;require()&lt;/code&gt;, which is quite similar to what is actually done by &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">動作を説明するために、 &lt;code&gt;require()&lt;/code&gt; のこの架空の実装を想像してください。これは、require（）によって実際に行われるものと非常に似てい &lt;code&gt;require()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d68e5b68a41d9794b3e7248a2d7f36459e1a791e" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import-expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ESモジュールをCommonJSに含めるには、&lt;a href=&quot;#esm_import-expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d089308ad7fa8608dc856e8dfd0c999ca3ce0d66" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import_expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ESモジュールをCommonJSに含めるには、&lt;a href=&quot;#esm_import_expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="652a3cd9523950c5d1acf707c7efb8f626e43774" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the third line from the last would just be changed to:</source>
          <target state="translated">ソケット &lt;code&gt;/tmp/echo.sock&lt;/code&gt; をリッスンするには、最後の3行目を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="4902deed6b5f58c97833c40362dfd51cfd1113c3" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">ソケット &lt;code&gt;/tmp/echo.sock&lt;/code&gt; でリッスンするには：</target>
        </trans-unit>
        <trans-unit id="21739c6890c2acc4bdec505b9f422fb0e996afe2" translate="yes" xml:space="preserve">
          <source>To maintain existing behaviour &lt;code&gt;response.finished&lt;/code&gt; should be replaced with &lt;code&gt;response.writableEnded&lt;/code&gt;.</source>
          <target state="translated">既存の動作を維持するために、 &lt;code&gt;response.finished&lt;/code&gt; に置き換える必要があり &lt;code&gt;response.writableEnded&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="3e10d026ab12717e40d75bbfd814a562f51e4156" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; インスタンスの作成をより信頼性が高く、エラーが発生しにくいものにするために、 &lt;code&gt;new Buffer()&lt;/code&gt; コンストラクターのさまざまな形式が&lt;strong&gt;非推奨に&lt;/strong&gt;なり、個別の &lt;code&gt;Buffer.from()&lt;/code&gt; 、&lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; に&lt;/a&gt;置き換えられましたメソッド。</target>
        </trans-unit>
        <trans-unit id="eb5ae203366178adec792f09dee66772cb19c68f" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; インスタンスの作成の信頼性を高め、エラーが発生しにくくするために、 &lt;code&gt;new Buffer()&lt;/code&gt; コンストラクターのさまざまな形式が&lt;strong&gt;非推奨に&lt;/strong&gt;なり、個別の &lt;code&gt;Buffer.from()&lt;/code&gt; 、&lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; に&lt;/a&gt;置き換えられました。メソッド。</target>
        </trans-unit>
        <trans-unit id="f485bda8dbde48a50bff5fb1b3ed1e00c32ea5f0" translate="yes" xml:space="preserve">
          <source>To make the introduction of &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; non-breaking, ensure that every previously supported entry point is exported. It is best to explicitly specify entry points so that the package&amp;rsquo;s public API is well-defined. For example, a project that previous exported &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;feature&lt;/code&gt;, and the &lt;code&gt;package.json&lt;/code&gt; could use the following &lt;code&gt;package.exports&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;導入を中断しないようにするには、以前にサポートされていたすべてのエントリポイントがエクスポートされるようにします。パッケージのパブリックAPIが明確に定義されるように、エントリポイントを明示的に指定することをお勧めします。たとえば、以前に &lt;code&gt;main&lt;/code&gt; 、 &lt;code&gt;lib&lt;/code&gt; 、 &lt;code&gt;feature&lt;/code&gt; 、および &lt;code&gt;package.json&lt;/code&gt; をエクスポートしたプロジェクトでは、次の &lt;code&gt;package.exports&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="3e7d1841b070660f5e124c6d0b0e5f09de0a3865" translate="yes" xml:space="preserve">
          <source>To mitigate tampering with policy files on disk, an integrity for the policy file itself may be provided via &lt;code&gt;--policy-integrity&lt;/code&gt;. This allows running &lt;code&gt;node&lt;/code&gt; and asserting the policy file contents even if the file is changed on disk.</source>
          <target state="translated">ディスク上のポリシーファイルの改ざんを軽減するために、 &lt;code&gt;--policy-integrity&lt;/code&gt; を使用してポリシーファイル自体の整合性を提供できます。これにより、ディスク上でファイルが変更された場合でも、 &lt;code&gt;node&lt;/code&gt; を実行してポリシーファイルの内容をアサートできます。</target>
        </trans-unit>
        <trans-unit id="1a99036e7fc6f4dd433ceb4a4d4fe866ee586c79" translate="yes" xml:space="preserve">
          <source>To mitigate the risk, renegotiation is limited to three times every ten minutes. An &lt;code&gt;'error'&lt;/code&gt; event is emitted on the &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instance when this threshold is exceeded. The limits are configurable:</source>
          <target state="translated">リスクを軽減するために、再交渉は10分ごとに3回に制限されています。 &lt;code&gt;'error'&lt;/code&gt; イベントが上放出される&lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; の&lt;/a&gt;このしきい値を超えた場合、インスタンス。制限は構成可能です。</target>
        </trans-unit>
        <trans-unit id="6bd92caa0dd0e220612d4509343caa388124bfc1" translate="yes" xml:space="preserve">
          <source>To nest &lt;code&gt;Domain&lt;/code&gt; objects as children of a parent &lt;code&gt;Domain&lt;/code&gt; they must be explicitly added.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; オブジェクトを親 &lt;code&gt;Domain&lt;/code&gt; 子としてネストするには、明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8af107ea8ff0e7e34570ffa65be2ae9ff7ad82a" translate="yes" xml:space="preserve">
          <source>To parse the URL into its parts:</source>
          <target state="translated">URL を部分的に解析するには</target>
        </trans-unit>
        <trans-unit id="3a3735245b8ad30f17b7512872187c1aa1d62b39" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; can be used:</source>
          <target state="translated">URLをパースするために &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; を使用することができます：</target>
        </trans-unit>
        <trans-unit id="773a385d557159d7209e8d59495c1d4ae2e640ae" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts, &lt;code&gt;new URL()&lt;/code&gt; can be used:</source>
          <target state="translated">URLをその部分に解析するには、 &lt;code&gt;new URL()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="c60e9cd07a257263fb8969b08ff3c393206c09af" translate="yes" xml:space="preserve">
          <source>To receive pushed streams on the client, set a listener for the &lt;code&gt;'stream'&lt;/code&gt; event on the &lt;code&gt;ClientHttp2Session&lt;/code&gt;:</source>
          <target state="translated">クライアントでプッシュされたストリームを受信するには、 &lt;code&gt;ClientHttp2Session&lt;/code&gt; で &lt;code&gt;'stream'&lt;/code&gt; イベントのリスナーを設定します。</target>
        </trans-unit>
        <trans-unit id="9fa7f2103554e2af5c33c5202941bd62a5133842" translate="yes" xml:space="preserve">
          <source>To restart a crashed application in a more reliable way, whether &lt;code&gt;'uncaughtException'&lt;/code&gt; is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.</source>
          <target state="translated">クラッシュしたアプリケーションをより信頼できる方法で再起動するには、 &lt;code&gt;'uncaughtException'&lt;/code&gt; が発行されるかどうかに関係なく、外部モニターを別のプロセスで使用して、アプリケーションの障害を検出し、必要に応じて回復または再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="24f3c415831200821564a427fca851b253ddebe0" translate="yes" xml:space="preserve">
          <source>To run the above example, create a new WebAssembly text format file named &lt;code&gt;demo.wat&lt;/code&gt;:</source>
          <target state="translated">上記の例を実行するには、 &lt;code&gt;demo.wat&lt;/code&gt; という名前の新しいWebAssemblyテキスト形式ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="f906fc2e9ed75535f0e33b7e1aaaf78e72fcf87b" translate="yes" xml:space="preserve">
          <source>To set a function to be returned by the &lt;code&gt;require()&lt;/code&gt; for the addon:</source>
          <target state="translated">アドオンの &lt;code&gt;require()&lt;/code&gt; によって返される関数を設定するには：</target>
        </trans-unit>
        <trans-unit id="14a2b1e275dc4b6cd9fc94bdafc4ee8fc0b41dfc" translate="yes" xml:space="preserve">
          <source>To set the main entry point for a package, it is advisable to define both &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#packages_main&quot;&gt;&lt;code&gt;&quot;main&quot;&lt;/code&gt;&lt;/a&gt; in the package&amp;rsquo;s &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file:</source>
          <target state="translated">パッケージのメインエントリポイントを設定するには、パッケージの&lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルで&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#packages_main&quot;&gt; &lt;code&gt;&quot;main&quot;&lt;/code&gt; &lt;/a&gt;両方を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b4f2374e10f3a7eb6b83d547d6c57c17e364858d" translate="yes" xml:space="preserve">
          <source>To test it in JavaScript:</source>
          <target state="translated">JavaScriptでテストするには。</target>
        </trans-unit>
        <trans-unit id="a0b29e9bbd29bf287a671314a5215366e894cdec" translate="yes" xml:space="preserve">
          <source>To test it, run the following JavaScript:</source>
          <target state="translated">テストするには、以下のJavaScriptを実行します。</target>
        </trans-unit>
        <trans-unit id="80e061ad3871e4c5c14888dba30a6440671c5a6d" translate="yes" xml:space="preserve">
          <source>To test:</source>
          <target state="translated">テストするために。</target>
        </trans-unit>
        <trans-unit id="4606c24e18a786400a447c1828c1a5df8796aaf7" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">この目的のために、N-APIは、そのライフサイクルがエージェントのライフサイクルに関連付けられているようにデータを割り当てる方法を提供します。</target>
        </trans-unit>
        <trans-unit id="86732a9994de407a5b4f9e7fdc6f58ff1d7808fa" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides type-tagging capabilities.</source>
          <target state="translated">このため、N-APIはタイプタギング機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="6e39ad99eeff4166287ae62024f1f20d4affe06b" translate="yes" xml:space="preserve">
          <source>To this env, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">この環境に対して、N-APIは、そのライフサイクルがエージェントのライフサイクルに結びつくようにデータを割り当てる方法を提供します。</target>
        </trans-unit>
        <trans-unit id="b5395666fc1a664a6eb308266e88f8f63adf53a4" translate="yes" xml:space="preserve">
          <source>To unset the capture function, &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; may be used. Calling this method with a non-&lt;code&gt;null&lt;/code&gt; argument while another capture function is set will throw an error.</source>
          <target state="translated">キャプチャ機能の設定を解除するには、 &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; を使用できます。別のキャプチャ関数が設定されているときに &lt;code&gt;null&lt;/code&gt; 以外の引数を指定してこのメ​​ソッドを呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="012fe7e6f8e20a96385f534d6d6e01f2918b08c3" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;strict&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; モードを使用するには：</target>
        </trans-unit>
        <trans-unit id="1ba4716684f52476f95f24b69f86ae65d28cd012" translate="yes" xml:space="preserve">
          <source>To use N-API in the above &quot;Hello world&quot; example, replace the content of &lt;code&gt;hello.cc&lt;/code&gt; with the following. All other instructions remain the same.</source>
          <target state="translated">上記の「Hello world」の例でN-APIを使用するには、 &lt;code&gt;hello.cc&lt;/code&gt; の内容を次のように置き換えます。他のすべての指示は同じままです。</target>
        </trans-unit>
        <trans-unit id="c2030286b077ae9f310389c7d604ec2ac5189637" translate="yes" xml:space="preserve">
          <source>To use Perfect Forward Secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">使用して完全転送秘密を使用するには &lt;code&gt;DHE&lt;/code&gt; をし &lt;code&gt;tls&lt;/code&gt; モジュール、それはのDiffie-Hellmanパラメータを生成し、それらを指定する必要があり &lt;code&gt;dhparam&lt;/code&gt; のにオプション&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;。以下は、そのようなパラメーターを生成するためのOpenSSLコマンド行インターフェースの使用を示しています。</target>
        </trans-unit>
        <trans-unit id="d0a5c6de3c73d917b80285249a110f4f66a4f266" translate="yes" xml:space="preserve">
          <source>To use legacy assertion mode:</source>
          <target state="translated">レガシー・アサーション・モードを使用するには</target>
        </trans-unit>
        <trans-unit id="409731a0c399b993f15524f4692dc78e27a98aeb" translate="yes" xml:space="preserve">
          <source>To use legacy mode:</source>
          <target state="translated">レガシーモードを使用するには</target>
        </trans-unit>
        <trans-unit id="b9501e0f16f826f87e9350e123b56bd36119f5d9" translate="yes" xml:space="preserve">
          <source>To use more than one constant, use the bitwise OR &lt;code&gt;|&lt;/code&gt; operator.</source>
          <target state="translated">複数の定数を使用するには、ビット単位のOR &lt;code&gt;|&lt;/code&gt; を使用します。オペレーター。</target>
        </trans-unit>
        <trans-unit id="59a200c232ad3bd583aabc76d909f585e995a5dc" translate="yes" xml:space="preserve">
          <source>To use perfect forward secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">使用して完全転送秘密を使用するには &lt;code&gt;DHE&lt;/code&gt; をして &lt;code&gt;tls&lt;/code&gt; モジュールを、それはのDiffie-Hellmanパラメータを生成し、それらを指定する必要があり &lt;code&gt;dhparam&lt;/code&gt; のにオプション&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;。以下に、OpenSSLコマンドラインインターフェイスを使用してこのようなパラメータを生成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="c20a336e72da316b2c9c2163a7733348225e4cc6" translate="yes" xml:space="preserve">
          <source>To use strict assertion mode:</source>
          <target state="translated">厳密なアサーション・モードを使用する。</target>
        </trans-unit>
        <trans-unit id="5b5ad91da59de7323cefe83cf2f0b20fda7969fd" translate="yes" xml:space="preserve">
          <source>To use the HTTP server and client one must &lt;code&gt;require('http')&lt;/code&gt;.</source>
          <target state="translated">HTTPサーバーとクライアントを使用するには、 &lt;code&gt;require('http')&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="71784b618df5ed1f33114983208856ba2d4ca1c0" translate="yes" xml:space="preserve">
          <source>To use this module:</source>
          <target state="translated">このモジュールを使用するには</target>
        </trans-unit>
        <trans-unit id="b7399a303049823aaa63a8aa2b18850c567f8783" translate="yes" xml:space="preserve">
          <source>To verify that ICU is enabled at all (&lt;code&gt;system-icu&lt;/code&gt;, &lt;code&gt;small-icu&lt;/code&gt;, or &lt;code&gt;full-icu&lt;/code&gt;), simply checking the existence of &lt;code&gt;Intl&lt;/code&gt; should suffice:</source>
          <target state="translated">ICUがまったく有効になっていることを確認するには（ &lt;code&gt;system-icu&lt;/code&gt; 、 &lt;code&gt;small-icu&lt;/code&gt; 、または &lt;code&gt;full-icu&lt;/code&gt; ）、単に &lt;code&gt;Intl&lt;/code&gt; の存在を確認するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="767a6b4283338f258039c6484f378f9774bf103f" translate="yes" xml:space="preserve">
          <source>To view this documentation as a manual page in a terminal, run &lt;code&gt;man node&lt;/code&gt;.</source>
          <target state="translated">このドキュメントをターミナルのマニュアルページとして表示するには、 &lt;code&gt;man node&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="fa49ae28e51088359080f4611ccdaeaee55d06b4" translate="yes" xml:space="preserve">
          <source>Too much HTTP header data was received. In order to protect against malicious or malconfigured clients, if more than 8KB of HTTP header data is received then HTTP parsing will abort without a request or response object being created, and an &lt;code&gt;Error&lt;/code&gt; with this code will be emitted.</source>
          <target state="translated">受信したHTTPヘッダーデータが多すぎます。悪意のあるクライアントまたは不正に構成されたクライアントから保護するために、8KBを超えるHTTPヘッダーデータを受信すると、リクエストまたは応答オブジェクトが作成されずにHTTP解析が中止され、このコードの &lt;code&gt;Error&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="fe926bf43f9c48ad4e7f0d9e66d6b0b6f4a7dcd7" translate="yes" xml:space="preserve">
          <source>Top-level &lt;code&gt;await&lt;/code&gt;</source>
          <target state="translated">トップレベルが &lt;code&gt;await&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f88bcb86a810807252c2f25ecd279d2e929c894" translate="yes" xml:space="preserve">
          <source>Trace Event provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.</source>
          <target state="translated">Trace Eventは、V8やNode.jsコア、ユーザースペースのコードによって生成されるトレース情報を一元化する仕組みを提供します。</target>
        </trans-unit>
        <trans-unit id="522930d7db32b707108991daae748228a5372efb" translate="yes" xml:space="preserve">
          <source>Trace Events</source>
          <target state="translated">トレースイベント</target>
        </trans-unit>
        <trans-unit id="a397d20d155f600d42049a221bc3c7232e0e47bf" translate="yes" xml:space="preserve">
          <source>Trace events</source>
          <target state="translated">トレースイベント</target>
        </trans-unit>
        <trans-unit id="28c7adc15802eb0b8935f3924650c3799b474e55" translate="yes" xml:space="preserve">
          <source>Tracing can be enabled with the &lt;code&gt;--trace-event-categories&lt;/code&gt; command-line flag or by using the &lt;code&gt;trace_events&lt;/code&gt; module. The &lt;code&gt;--trace-event-categories&lt;/code&gt; flag accepts a list of comma-separated category names.</source>
          <target state="translated">トレースを有効にするには、 &lt;code&gt;--trace-event-categories&lt;/code&gt; コマンドラインフラグを使用するか、 &lt;code&gt;trace_events&lt;/code&gt; モジュールを使用します。 &lt;code&gt;--trace-event-categories&lt;/code&gt; フラグは、コンマ区切りのカテゴリ名のリストを受け付けます。</target>
        </trans-unit>
        <trans-unit id="94e1656659df1321444d7824a33ef26cfdf8bed9" translate="yes" xml:space="preserve">
          <source>Track heap object allocations for heap snapshots.</source>
          <target state="translated">ヒープスナップショットのヒープオブジェクトの割り当てを追跡します。</target>
        </trans-unit>
        <trans-unit id="3dede6c9f5b091d4f1178b0d775ad848dfc2fe33" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate.</source>
          <target state="translated">指定されたサンプリングレートでイベントループの遅延を追跡します。</target>
        </trans-unit>
        <trans-unit id="32233aa3037754c48a35202d5c815e9963127c0e" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate. The constructor of this class not exposed to users.</source>
          <target state="translated">指定されたサンプリングレートでのイベントループの遅延を追跡します。このクラスのコンストラクタはユーザに公開されていません。</target>
        </trans-unit>
        <trans-unit id="751fa34c39229191e6c74b37aabdea80d0e08f00" translate="yes" xml:space="preserve">
          <source>Trailers will &lt;strong&gt;only&lt;/strong&gt; be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.</source>
          <target state="translated">トレーラーは、応答にチャンクエンコーディングが使用されている場合に&lt;strong&gt;のみ出力&lt;/strong&gt;されます。そうでない場合（たとえば、リクエストがHTTP / 1.0の場合）、それらは通知なく破棄されます。</target>
        </trans-unit>
        <trans-unit id="5b80a47ffdd07a222a0a9c9e34f1db9594849a60" translate="yes" xml:space="preserve">
          <source>Trailing Headers</source>
          <target state="translated">トレイリングヘッダ</target>
        </trans-unit>
        <trans-unit id="97674c913d04171ff7608f24cd0b8f68dcb4d685" translate="yes" xml:space="preserve">
          <source>Trailing Headers: A block of headers that follow the body of a request or response.</source>
          <target state="translated">Trailing Headers (トレーリングヘッダ)の略。リクエストやレスポンスの本文に続くヘッダのブロック。</target>
        </trans-unit>
        <trans-unit id="f752da73347f44bd141752afbe732a41e970f215" translate="yes" xml:space="preserve">
          <source>Trailing garbage at the end of the input stream will now result in an &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">入力ストリームの最後にあるゴミを追跡すると、 &lt;code&gt;'error'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="969267a9a3af0fbc68033e5c7098f852a9c4f7be" translate="yes" xml:space="preserve">
          <source>Trailing headers have already been sent on the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; ヘッダーはすでにHttp2Streamで送信されています。</target>
        </trans-unit>
        <trans-unit id="dfe8180f7ea03f9122b6de27291472a8cb2c1cd1" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object is rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance takes its place.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; を別の&lt;a href=&quot;vm&quot;&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/a&gt;コンテキストに転送します。元の &lt;code&gt;port&lt;/code&gt; オブジェクトは使用できなくなり、返された &lt;code&gt;MessagePort&lt;/code&gt; インスタンスが代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="0cec91881e34f290385e04905cd9b4c93523b2df" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object will be rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance will take its place.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; を別の&lt;a href=&quot;vm&quot;&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/a&gt;コンテキストに転送します。元の &lt;code&gt;port&lt;/code&gt; オブジェクトは使用できなくなり、返された &lt;code&gt;MessagePort&lt;/code&gt; インスタンスが代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="f821472ecd36f99690900f79391a7c77f149a02e" translate="yes" xml:space="preserve">
          <source>Transform streams are &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams where the output is in some way related to the input. Like all &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams, &lt;code&gt;Transform&lt;/code&gt; streams implement both the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="translated">変換ストリームは、出力がなんらかの形で入力に関連している&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームです。すべての&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームと同様に、 &lt;code&gt;Transform&lt;/code&gt; ストリームは&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;インターフェースと&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;インターフェースの両方を実装します。</target>
        </trans-unit>
        <trans-unit id="5d44411ee4a477c4003d0a4fd42fc9852f8eec42" translate="yes" xml:space="preserve">
          <source>Transmits a &lt;code&gt;GOAWAY&lt;/code&gt; frame to the connected peer &lt;em&gt;without&lt;/em&gt; shutting down the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">送信 &lt;code&gt;GOAWAY&lt;/code&gt; の接続ピアにフレームを&lt;em&gt;することなく、&lt;/em&gt;シャットダウン &lt;code&gt;Http2Session&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ea9576ac65abef46df5e8efa3c56554f7250f9bd" translate="yes" xml:space="preserve">
          <source>Transpiler loader</source>
          <target state="translated">トランスパイラーローダー</target>
        </trans-unit>
        <trans-unit id="49a8085f322954c5cb827e7d3811aff927e4beb4" translate="yes" xml:space="preserve">
          <source>Trigger an &lt;code&gt;'uncaughtException'&lt;/code&gt; in JavaScript. Useful if an async callback throws an exception with no way to recover.</source>
          <target state="translated">JavaScriptで &lt;code&gt;'uncaughtException'&lt;/code&gt; トリガーします。非同期コールバックが回復する方法なしで例外をスローする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="88fd9bf4f298a1d2622150397c550c3d7a9663cc" translate="yes" xml:space="preserve">
          <source>Triggered immediately after &lt;code&gt;'connect'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; 直後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="87d70346099a1ae1acdb1f551d32288df3e619c7" translate="yes" xml:space="preserve">
          <source>Triggers the abort signal, causing the &lt;code&gt;abortController.signal&lt;/code&gt; to emit the &lt;code&gt;'abort'&lt;/code&gt; event.</source>
          <target state="translated">アボートシグナルをトリガーし、 &lt;code&gt;abortController.signal&lt;/code&gt; に &lt;code&gt;'abort'&lt;/code&gt; イベントを発行させます。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="00719949dbe60c953bfc33c3a4fc7d650107ce37" translate="yes" xml:space="preserve">
          <source>True if headers were sent, false otherwise (read-only).</source>
          <target state="translated">ヘッダが送信された場合は True、そうでない場合は false (読み取り専用)。</target>
        </trans-unit>
        <trans-unit id="b2b51224ff63b91805e91d8fb1e7f7c31a7fb84f" translate="yes" xml:space="preserve">
          <source>True if the &lt;code&gt;QuicSession&lt;/code&gt; was closed due to QUIC stateless reset.</source>
          <target state="translated">QUICステートレスリセットが原因で &lt;code&gt;QuicSession&lt;/code&gt; が閉じられた場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="00f5babaddb644d2b78ece8c666bd73f4c43cd62" translate="yes" xml:space="preserve">
          <source>True if the certificate provided by the peer during the TLS 1.3 handshake has been verified.</source>
          <target state="translated">TLS 1.3 ハンドシェイク中にピアが提供した証明書が検証されている場合は True。</target>
        </trans-unit>
        <trans-unit id="52aaf50525ff477ac5ccb10f3e94474da0a7e6a3" translate="yes" xml:space="preserve">
          <source>True if the process is a master. This is determined by the &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt;. If &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; is undefined, then &lt;code&gt;isMaster&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">プロセスがマスターであれば真。これは、 &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; によって決定されます。場合 &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; が定義されていない、そして &lt;code&gt;isMaster&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f753bfbea14649b01155a879f0a01fd20d9acfb3" translate="yes" xml:space="preserve">
          <source>True if the process is not a master (it is the negation of &lt;code&gt;cluster.isMaster&lt;/code&gt;).</source>
          <target state="translated">プロセスがマスターでない場合はtrueです（ &lt;code&gt;cluster.isMaster&lt;/code&gt; の否定です）。</target>
        </trans-unit>
        <trans-unit id="a402e4d3f2f574d66f39eac4a0a59eb01b7429dc" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success. The &lt;code&gt;path&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be a string or &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 切り捨てて、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。 &lt;code&gt;path&lt;/code&gt; &lt;em&gt;しなければならない&lt;/em&gt;文字列またはこと &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e6fcf342166aa2b3f7da014c8cfdbe02e48d00f" translate="yes" xml:space="preserve">
          <source>Truncates the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">ファイルを切り捨ててから、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="eb397e6582ffce2afa6f0c50c11a1da76968e2e5" translate="yes" xml:space="preserve">
          <source>Try to construct a table with the columns of the properties of &lt;code&gt;tabularData&lt;/code&gt; (or use &lt;code&gt;properties&lt;/code&gt;) and rows of &lt;code&gt;tabularData&lt;/code&gt; and log it. Falls back to just logging the argument if it can&amp;rsquo;t be parsed as tabular.</source>
          <target state="translated">プロパティの列を持つテーブルを作成するようにしてください &lt;code&gt;tabularData&lt;/code&gt; （または使用する &lt;code&gt;properties&lt;/code&gt; の）と行 &lt;code&gt;tabularData&lt;/code&gt; し、それを記録します。表形式として解析できない場合は、引数のロギングのみにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="bd5dbabbefef5321cc8fd2b28e920d3d40a94172" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; throws an &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt;&lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt;を使用しようとすると、&lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt; &lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="21b131d9028db7e6607d213bfbc66c0ff665f5d4" translate="yes" xml:space="preserve">
          <source>Turning auto padding off will only work if the input data's length is a multiple of the ciphers block size.</source>
          <target state="translated">自動パディングをオフにすると、入力データの長さが暗号ブロックサイズの倍数の場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="33207f4af1d127df91481b71b60c34a426f9170e" translate="yes" xml:space="preserve">
          <source>Two Reading Modes</source>
          <target state="translated">2つの読書モード</target>
        </trans-unit>
        <trans-unit id="27d8454a7bd0ba08acf51f96558585ee7039de1c" translate="yes" xml:space="preserve">
          <source>Two reading modes</source>
          <target state="translated">2つの読書モード</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="81dec3dee152341fcaaa1202574f5bfce2107fdc" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; The prime parameter.</source>
          <target state="translated">タイプ：&lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt;素数パラメーター。</target>
        </trans-unit>
        <trans-unit id="7dbaee6b3d72c5fb2d6b4e87ebb27439475283a2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;EventTarget&amp;gt;&lt;/a&gt; The &lt;code&gt;EventTarget&lt;/code&gt; dispatching the event.</source>
          <target state="translated">タイプ：&lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;のEventTarget&amp;gt;&lt;/a&gt; &lt;code&gt;EventTarget&lt;/code&gt; イベントを送出。</target>
        </trans-unit>
        <trans-unit id="2b791360c3c51b123734a073dbdd5929c2635c37" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fdf3e2cffad5a828a7aa4148e91fb5cc50141041" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール値&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ab2fdbf860e78b084aa29dd2be0b21f910fe1b8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="559b8e980fd843d8f083ddbc18aa96d47d8fe569" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True after the &lt;code&gt;AbortController&lt;/code&gt; has been aborted.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt; &lt;/a&gt; &lt;code&gt;AbortController&lt;/code&gt; が中止された後にTrue 。</target>
        </trans-unit>
        <trans-unit id="6f769c6c38cdc512378467d74cdd67725602d5d4" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True for Node.js internal events, false otherwise.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Node.js内部イベントの場合はTrue、それ以外の場合はfalse。</target>
        </trans-unit>
        <trans-unit id="fd98bdcf8d930cfc4fddad7bdbcbed014cb5963b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event has not been canceled.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;イベントがキャンセルされていない場合はTrue。</target>
        </trans-unit>
        <trans-unit id="592434911cf70ed7c8d94bc575c5dc4ad5fcd012" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event was created with the &lt;code&gt;cancelable&lt;/code&gt; option.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;イベントが &lt;code&gt;cancelable&lt;/code&gt; オプションで作成された場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="1f83a891c954bfcae9f8213ec30898062cbe835e" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; When &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;QuicSocket&lt;/code&gt; will reject new connections.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール&amp;gt;&lt;/a&gt;場合は &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;QuicSocket&lt;/code&gt; は新しい接続を拒否します。</target>
        </trans-unit>
        <trans-unit id="a5ba0f6f560f85a29174a7580551297604de31ba" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;&lt;code&gt;true&lt;/code&gt; if stateless reset processing is enabled; &lt;code&gt;false&lt;/code&gt; if disabled.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;ステートレスリセット処理が有効になっている場合は &lt;code&gt;true&lt;/code&gt; 。無効になっている場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d077718461853f8c66f956fa3929098d50db3cc" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;&lt;code&gt;true&lt;/code&gt; if the module is running during the Node.js preload phase.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;モジュールがNode.jsプリロードフェーズ中に実行されている場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9aed18d242ca05f3f44be6eed337a107faa0a84" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;integer&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;整数&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1cc31d3d2b5210c7375845876ff2a16826ac9806" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;番号&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f6a4292808d277171818eb5b44f627e4679f084" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; A custom generator.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;カスタムジェネレータ。</target>
        </trans-unit>
        <trans-unit id="03bafe5ad8828c6fe457c8f446cd198a580ac9ee" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Block size parameter. &lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;8&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;ブロックサイズパラメータ。&lt;strong&gt;デフォルト&lt;/strong&gt;： &lt;code&gt;8&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9d23e0025240d7a4b74b72edbd5c82f2a34ec81" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Memory upper bound. It is an error when (approximately) &lt;code&gt;127 * N * r &amp;gt; maxmem&lt;/code&gt;. &lt;strong&gt;Default:&lt;/strong&gt;&lt;code&gt;32 * 1024 * 1024&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;数値&amp;gt;&lt;/a&gt;メモリの上限。（おおよそ） &lt;code&gt;127 * N * r &amp;gt; maxmem&lt;/code&gt; 場合、エラーになります。&lt;strong&gt;デフォルト：&lt;/strong&gt; &lt;code&gt;32 * 1024 * 1024&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c82c20b3feb29912776423b0e35d03d30f486991" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Parallelization parameter. &lt;strong&gt;Default&lt;/strong&gt;&lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;並列化パラメーター。&lt;strong&gt;デフォルト&lt;/strong&gt; &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32b6894e9b972a02fbebf6decdecb826a9a08499" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Returns &lt;code&gt;0&lt;/code&gt; while an event is not being dispatched, &lt;code&gt;2&lt;/code&gt; while it is being dispatched.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;イベントがディスパッチされていないときは &lt;code&gt;0&lt;/code&gt; を返し、ディスパッチされているときは &lt;code&gt;2&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="191f21e8620a363c6e6653d4276709505b0c1f39" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The CPU/memory cost parameter. Must e a power of two greater than 1. &lt;strong&gt;Default&lt;/strong&gt;&lt;code&gt;16384&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;数値&amp;gt;&lt;/a&gt; CPU /メモリコストパラメータ。1より大きい2の累乗である必要があります。&lt;strong&gt;デフォルトは&lt;/strong&gt; &lt;code&gt;16384&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="df7e1519d6665be682578426958b31fcdaa096e5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The length in bits of the prime.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;数値&amp;gt;&lt;/a&gt;素数のビット単位の長さ。</target>
        </trans-unit>
        <trans-unit id="a55d5b2ec241b1a7926617263c0c009b0e87335f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The number of bits in the &lt;code&gt;aesCtrParams.counter&lt;/code&gt; that are to be used as the counter.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;カウンターとして使用される &lt;code&gt;aesCtrParams.counter&lt;/code&gt; のビット数。</target>
        </trans-unit>
        <trans-unit id="9ef1abafdf3655626452ea56735bc00d8e22f2c1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; The size in bits of the generated authentication tag. This values must be one of &lt;code&gt;32&lt;/code&gt;, &lt;code&gt;64&lt;/code&gt;, &lt;code&gt;96&lt;/code&gt;, &lt;code&gt;104&lt;/code&gt;, &lt;code&gt;112&lt;/code&gt;, &lt;code&gt;120&lt;/code&gt;, or &lt;code&gt;128&lt;/code&gt;. &lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;128&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;生成された認証タグのビット単位のサイズ。この値は、のいずれかでなければなりません &lt;code&gt;32&lt;/code&gt; 、 &lt;code&gt;64&lt;/code&gt; 、 &lt;code&gt;96&lt;/code&gt; 、 &lt;code&gt;104&lt;/code&gt; 、 &lt;code&gt;112&lt;/code&gt; 、 &lt;code&gt;120&lt;/code&gt; 、または &lt;code&gt;128&lt;/code&gt; 。&lt;strong&gt;デフォルト&lt;/strong&gt;： &lt;code&gt;128&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a21a74a74290067e973bcaa8fa38d6218f2fc11f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e7a0e9b4740cfad9b64a9a86d1b326d57f5a812d" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-CBC'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'AES-CBC'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="2603363893f59f8abd09a786ddc7895f4619f485" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-CTR'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'AES-CTR'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="2516b6e63cfc635e02f04e70def23ebe7133872f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-GCM'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'AES-GCM'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="5d95be9478e8842ab65be05f22f7d1dc208a44b8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'AES-KW'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'AES-KW'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="df699e54874e5e112905c5fa3549600fafcd87e7" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'ECDH'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'ECDH'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="5c66a6d5b46bbd0ed19420fb6cd18291f8f9d9b1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'ECDSA'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'ECDSA'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="87c4a1dce5235029e0203eba172053de5a6b23b3" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'HKDF'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'HKDF'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="2732ca262af774941f8d3b728853d75ad8dfbda2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'HMAC'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'HMAC'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="42e697aea220f34c7166854dfdd1d89eea1709ca" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'HMAC&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'HMAC&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="c6b26ae2daa7d41b9a19a98c93b2406feff1aee5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-DH'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'NODE-DH'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="694bf461bef5a32a65a35acab62f2342237c5048" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-DSA'&lt;/code&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'NODE-DSA'&lt;/code&gt; 必要があります</target>
        </trans-unit>
        <trans-unit id="906115badaf9f8d9dee887c9a00b704cbab3a734" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-DSA'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'NODE-DSA'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="e77d10d10e61d73182f40d31a0dc792ca7a4b9b5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'NODE-SCRYPT'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'NODE-SCRYPT'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="fd3fb2427d956c17c38ee43762a35f8c02a4945a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'PBKDF2'&lt;/code&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt; &lt;/a&gt; &lt;code&gt;'PBKDF2'&lt;/code&gt; 必要があります</target>
        </trans-unit>
        <trans-unit id="dfe6d30d11d81818f12d9501faefcb917f4c1992" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'PBKDF2'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'PBKDF2'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="629ad0eafb7a7a59682b4caf68a6598770c4b4b7" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'RSA-PSS'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'RSA-PSS'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="5bc7af1a2745c2e040d02d130e5b4afb195477f6" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;は &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt; 必要があります</target>
        </trans-unit>
        <trans-unit id="ff0df871f8046c4ac3fd19b66dc75a7d2450124e" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'AES-CBC'&lt;/code&gt;, &lt;code&gt;'AES-CTR'&lt;/code&gt;, &lt;code&gt;'AES-GCM'&lt;/code&gt;, or &lt;code&gt;'AES-KW'&lt;/code&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;のいずれかでなければならない &lt;code&gt;'AES-CBC'&lt;/code&gt; 、 &lt;code&gt;'AES-CTR'&lt;/code&gt; 、 &lt;code&gt;'AES-GCM'&lt;/code&gt; 、または &lt;code&gt;'AES-KW'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="457d486fac563d2e96cedee67f290d1a3c6bbc78" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'AES-CTR'&lt;/code&gt;, &lt;code&gt;'AES-CBC'&lt;/code&gt;, &lt;code&gt;'AES-GCM'&lt;/code&gt;, or &lt;code&gt;'AES-KW'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;のいずれかでなければならない &lt;code&gt;'AES-CTR'&lt;/code&gt; 、 &lt;code&gt;'AES-CBC'&lt;/code&gt; 、 &lt;code&gt;'AES-GCM'&lt;/code&gt; 、または &lt;code&gt;'AES-KW'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f461cba0e1d0a7fb74661e3c0c7124874446a1e2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'ECDSA'&lt;/code&gt; or &lt;code&gt;'ECDH'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;'ECDSA'&lt;/code&gt; または &lt;code&gt;'ECDH'&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="3b895e6451776bebb9276ef128dfddd936fca60f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'P-256'&lt;/code&gt;, &lt;code&gt;'P-384'&lt;/code&gt; or &lt;code&gt;'P-521'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;のいずれかでなければならない &lt;code&gt;'P-256'&lt;/code&gt; 、 &lt;code&gt;'P-384'&lt;/code&gt; または &lt;code&gt;'P-521'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a8d228704d1caec209b77781372f8dc9951f32a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Must be one of &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt;, &lt;code&gt;'RSA-PSS'&lt;/code&gt;, or &lt;code&gt;'RSA-OAEP'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;のいずれかでなければならない &lt;code&gt;'RSASSA-PKCS1-v1_5'&lt;/code&gt; 、 &lt;code&gt;'RSA-PSS'&lt;/code&gt; 、または &lt;code&gt;'RSA-OAEP'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a699d6b6caf1b9a5bd3c6c23dd7b70e70089b93" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; One of &lt;code&gt;'secret'&lt;/code&gt;, &lt;code&gt;'private'&lt;/code&gt;, or &lt;code&gt;'public'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;の一つ &lt;code&gt;'secret'&lt;/code&gt; 、 &lt;code&gt;'private'&lt;/code&gt; 、または &lt;code&gt;'public'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="978e1a5a183ad430b4f5ed38ac04c4e08fb5ef7c" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; The Diffie-Hellman group name.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; Diffie-Hellmanグループ名。</target>
        </trans-unit>
        <trans-unit id="e9fcfb7c58be096f0473d03d8c166fef5a4bbcdf" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; The string encoding when &lt;code&gt;salt&lt;/code&gt; is a string.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt; &lt;/a&gt; &lt;code&gt;salt&lt;/code&gt; が文字列の場合の文字列エンコーディング。</target>
        </trans-unit>
        <trans-unit id="cfe640573e0e27a7ea866d3c74caa1acdc2ceaff" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; must be &lt;code&gt;'RSA-OAEP'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;は &lt;code&gt;'RSA-OAEP'&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="8ccb3da55d3c8149262995c5bbbd57dd299e1fba" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;バッファ&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;Da​​taView&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c8a5ab0c011b8b439e3ddf4315f71a57dfd504c3" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;オブジェクト&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a4265544e82459f2823e2fcde24684b91e1cb0b4" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string []&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f4031cfacd061ce21c7543c8e8bdf69c3458801" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;Da​​taView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;バッファ&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ea1f8486f61d3e2e80f8f2fc8fc310045bbed70" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;DataView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;Buffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type&quot;&gt;&amp;lt;undefined&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&amp;lt;TypedArray&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&amp;lt;Da​​taView&amp;gt;&lt;/a&gt; | &lt;a href=&quot;buffer#buffer_class_buffer&quot;&gt;&amp;lt;バッファ&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type&quot;&gt;&amp;lt;未定義&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0a3f00ce80162490a7815c4706ba984eacb6bac5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;機能&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03fbf3b7db603e2ab0dcaf326b514b18dffd7814" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt; Invoked with a received message cannot be deserialized.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;関数&amp;gt;&lt;/a&gt;受信したメッセージで呼び出されたものは逆シリアル化できません。</target>
        </trans-unit>
        <trans-unit id="bee2c30d2a3ec1a9c85913276e07b0d8052bec99" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;Function&amp;gt;&lt;/a&gt; Invoked with a single &lt;code&gt;MessageEvent&lt;/code&gt; argument when a message is received.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function&quot;&gt;&amp;lt;関数&amp;gt;&lt;/a&gt;メッセージの受信時に単一の &lt;code&gt;MessageEvent&lt;/code&gt; 引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a8a0a1ec9c884ec256153c9a5006a88ba84a4281" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;オブジェクト&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="01f78ac9cdfc8f669c51d4b1a75e40e81917f104" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt; An error object</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;オブジェクト&amp;gt;&lt;/a&gt;エラーオブジェクト</target>
        </trans-unit>
        <trans-unit id="49742d616ad76a5147e9598cf63783142528874b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;オブジェクト&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列[]&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2272da20a862e296c374258d5bacab43343eec53" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ceb223a22edb2173e00d8e6fa8f8508c7109b1c2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;net#net_class_net_blocklist&quot;&gt;&amp;lt;net.BlockList&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;net#net_class_net_blocklist&quot;&gt;&amp;lt;net.BlockList&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3ffeb31b143fc73e85da403cf1496272e5d911b7" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;quic#quic_class_quicendpoint&quot;&gt;&amp;lt;QuicEndpoint[]&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;quic#quic_class_quicendpoint&quot;&gt;&amp;lt;QuicEndpoint []&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34847f742650e612d151120815dcdf1cd8a3f44b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;quic#quic_class_quicserversession_extends_quicsession&quot;&gt;&amp;lt;QuicSession&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;quic#quic_class_quicserversession_extends_quicsession&quot;&gt;&amp;lt;QuicSession&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2568506c1a5940d78e32cac20ca0478096bf69d" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;quic#quic_net_createquicsocket_options&quot;&gt;&amp;lt;QuicSocket&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;quic#quic_net_createquicsocket_options&quot;&gt;&amp;lt;QuicSocket&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7dffc861d30374215dd8373cc077e747d836d6b1" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;&amp;lt;stream.Readable&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;&amp;lt;stream.Readable&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="91d4b4c41c8ce82611f320cb2c41940c6682c569" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_aeskeygenparams&quot;&gt;&amp;lt;AesKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_rsahashedkeygenparams&quot;&gt;&amp;lt;RsaHashedKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_eckeygenparams&quot;&gt;&amp;lt;EcKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_hmackeygenparams&quot;&gt;&amp;lt;HmacKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedsakeygenparams&quot;&gt;&amp;lt;NodeDsaKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedhkeygenparams&quot;&gt;&amp;lt;NodeDhKeyGenParams&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_aeskeygenparams&quot;&gt;&amp;lt;AesKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_rsahashedkeygenparams&quot;&gt;&amp;lt;RsaHashedKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_eckeygenparams&quot;&gt;&amp;lt;EcKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_hmackeygenparams&quot;&gt;&amp;lt;HmacKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedsakeygenparams&quot;&gt;&amp;lt;NodeDsaKeyGenParams&amp;gt;&lt;/a&gt; | &lt;a href=&quot;webcrypto#webcrypto_class_nodedhkeygenparams&quot;&gt;&amp;lt;NodeDhKeyGenParams&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cbaa111a337aab1a6ea00fee972498e5a7c36321" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_crypto&quot;&gt;&amp;lt;Crypto&amp;gt;&lt;/a&gt; An implementation of the Web Crypto API standard.</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_crypto&quot;&gt;&amp;lt;Crypto&amp;gt;&lt;/a&gt; Web CryptoAPI標準の実装。</target>
        </trans-unit>
        <trans-unit id="542d17d9e5f335edf7614836cb99abd654ed907c" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="85ab734ae427a00e0161a54603f81fe27ff24d3a" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; A &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; whose &lt;code&gt;type&lt;/code&gt; will be &lt;code&gt;'private'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt; A &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;その &lt;code&gt;type&lt;/code&gt; になります &lt;code&gt;'private'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0f174332635cd925bbf30c1190a1c28d7eddade" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; A &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; whose &lt;code&gt;type&lt;/code&gt; will be &lt;code&gt;'public'&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt; A &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;その &lt;code&gt;type&lt;/code&gt; になります &lt;code&gt;'public'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44a07774bd9709dce2567f86d83a3b9141c99fdd" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; The other parties public key.</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;他のパーティの公開鍵。</target>
        </trans-unit>
        <trans-unit id="cd480694fcd9a7005cb9e7edf7802cd5407cfcd5" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;webcrypto#webcrypto_class_subtlecrypto&quot;&gt;&amp;lt;SubtleCrypto&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;webcrypto#webcrypto_class_subtlecrypto&quot;&gt;&amp;lt;SubtleCrypto&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2647e5f13f485f80e1042fd1e8926be242eb82e" translate="yes" xml:space="preserve">
          <source>Type: Address</source>
          <target state="translated">タイプ 住所</target>
        </trans-unit>
        <trans-unit id="e9bad3fe9a9d788bf5ced613088a28a42982f43d" translate="yes" xml:space="preserve">
          <source>Type: Compile-time</source>
          <target state="translated">タイプを指定します。コンパイルタイム</target>
        </trans-unit>
        <trans-unit id="2e2f71bebdcf0432ba9dae30fc4cd34d69a994d9" translate="yes" xml:space="preserve">
          <source>Type: Deprecation revoked</source>
          <target state="translated">タイプを指定します。非推奨</target>
        </trans-unit>
        <trans-unit id="4afacd032dbf0b042ddec6e49a24f87b169ee946" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only</source>
          <target state="translated">タイプ。ドキュメントのみ</target>
        </trans-unit>
        <trans-unit id="f4038b1c0b648006573b34c3b0edb7a524d16ee2" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">タイプ：ドキュメントのみ（&lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; をサポート&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="c0334739797e8108100cffbf45a4decc971aeb44" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life</source>
          <target state="translated">タイプ。終末期</target>
        </trans-unit>
        <trans-unit id="c05f59a4cce67895e11eed8826cf4cee5bd54571" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life.</source>
          <target state="translated">タイプ。終末期です。</target>
        </trans-unit>
        <trans-unit id="daf411b4184b37552deeb3149950b164297c489d" translate="yes" xml:space="preserve">
          <source>Type: Runtime</source>
          <target state="translated">タイプは以下の通りです。ランタイム</target>
        </trans-unit>
        <trans-unit id="ebfbea69b5d285abfce6c4bef135a0ed69b7b0de" translate="yes" xml:space="preserve">
          <source>Type: Runtime (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">タイプ：ランタイム（&lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; をサポート&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="024bfd95e02496791b2881c7c1f7dd42376280b5" translate="yes" xml:space="preserve">
          <source>Type: Runtime &lt;code&gt;Transform._transformState&lt;/code&gt; will be removed in future versions where it is no longer required due to simplification of the implementation.</source>
          <target state="translated">タイプ：ランタイム &lt;code&gt;Transform._transformState&lt;/code&gt; は、実装が簡素化されたために不要になった将来のバージョンで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="44f1ccbdc81b78ae74c2d0ae854796e4d7061770" translate="yes" xml:space="preserve">
          <source>Typed array slices are handled correctly now.</source>
          <target state="translated">型付けされた配列スライスが正しく処理されるようになりました。</target>
        </trans-unit>
        <trans-unit id="38f54df64da42601768ef91ee31423fac4d49160" translate="yes" xml:space="preserve">
          <source>Types of Streams</source>
          <target state="translated">ストリームの種類</target>
        </trans-unit>
        <trans-unit id="d580373209dd6a1707a0a6d7b5661be32ac592f2" translate="yes" xml:space="preserve">
          <source>Types of streams</source>
          <target state="translated">流れの種類</target>
        </trans-unit>
        <trans-unit id="d7824c5156ab482008ad2ab94f44f8d1d1cdb802" translate="yes" xml:space="preserve">
          <source>Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the &lt;code&gt;data&lt;/code&gt; argument to the finalize callback.</source>
          <target state="translated">通常、クラスインスタンスをラップするときは、ファイナライズコールバックの &lt;code&gt;data&lt;/code&gt; 引数として受け取ったネイティブインスタンスを単に削除するファイナライズコールバックを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f65c7601001c43a1759b63d4de8c6cbfa1fdec3a" translate="yes" xml:space="preserve">
          <source>Typically, the &lt;code&gt;response&lt;/code&gt; is a digitally signed object from the server's CA that contains information about server's certificate revocation status.</source>
          <target state="translated">通常、 &lt;code&gt;response&lt;/code&gt; はサーバーのCAからのデジタル署名されたオブジェクトで、サーバーの証明書失効ステータスに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="1a77b330d905af0212c5c7ff0c6a442a27aabe49" translate="yes" xml:space="preserve">
          <source>Typically, the size of the current buffer is measured against the &lt;code&gt;highWaterMark&lt;/code&gt; in &lt;em&gt;bytes&lt;/em&gt;. However, after &lt;code&gt;setEncoding()&lt;/code&gt; is called, the comparison function will begin to measure the buffer's size in &lt;em&gt;characters&lt;/em&gt;.</source>
          <target state="translated">通常、現在のバッファーのサイズは、 &lt;code&gt;highWaterMark&lt;/code&gt; に対して&lt;em&gt;バイト単位で&lt;/em&gt;測定され&lt;em&gt;ます&lt;/em&gt;。ただし、 &lt;code&gt;setEncoding()&lt;/code&gt; が呼び出された後、比較関数はバッファーのサイズを&lt;em&gt;文字数で&lt;/em&gt;測定し始めます。</target>
        </trans-unit>
        <trans-unit id="219e224c2a9b92a6e101f6876f27314c5bbac679" translate="yes" xml:space="preserve">
          <source>Typically, this is managed through the number of &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'message'&lt;/code&gt; listeners on the &lt;code&gt;process&lt;/code&gt; object. However, this method can be used to explicitly request a specific behavior.</source>
          <target state="translated">通常、これは、 &lt;code&gt;process&lt;/code&gt; オブジェクトの &lt;code&gt;'disconnect'&lt;/code&gt; および &lt;code&gt;'message'&lt;/code&gt; リスナーの数によって管理されます。ただし、このメソッドを使用して、特定の動作を明示的に要求することができます。</target>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="b31db7cab86864065f3e106f86c44b514de32cc5" translate="yes" xml:space="preserve">
          <source>UDP/Datagram</source>
          <target state="translated">UDP/Datagram</target>
        </trans-unit>
        <trans-unit id="9f78a32c9e9869badba95ed40dd1e0e645130d94" translate="yes" xml:space="preserve">
          <source>UDP/Datagram Sockets</source>
          <target state="translated">UDP/データグラムソケット</target>
        </trans-unit>
        <trans-unit id="fb468ca992673c8e389166a22b228b123bbe372c" translate="yes" xml:space="preserve">
          <source>UDP/datagram</source>
          <target state="translated">UDP/datagram</target>
        </trans-unit>
        <trans-unit id="acc6e7e4a3651dd476a52e5cffe0d3c3489395d7" translate="yes" xml:space="preserve">
          <source>UDP/datagram sockets</source>
          <target state="translated">UDP/データグラムソケット</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="0aa6d0c7243e93e5b8220dee83a136c689b755fa" translate="yes" xml:space="preserve">
          <source>URL Strings and URL Objects</source>
          <target state="translated">URL 文字列と URL オブジェクト</target>
        </trans-unit>
        <trans-unit id="668c7293b4faab50fd65a1538e196f37e127ab64" translate="yes" xml:space="preserve">
          <source>URL object support</source>
          <target state="translated">URL オブジェクトのサポート</target>
        </trans-unit>
        <trans-unit id="79b0dc43bf17928f302cb7ea469c8717b49e7aa7" translate="yes" xml:space="preserve">
          <source>URL strings and URL objects</source>
          <target state="translated">URL 文字列と URL オブジェクト</target>
        </trans-unit>
        <trans-unit id="44c577ae467a3484accd429a3a86f410b07ee886" translate="yes" xml:space="preserve">
          <source>URL-based paths</source>
          <target state="translated">URLベースのパス</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="01f03837323aab32409bb99c50d6c475179c49df" translate="yes" xml:space="preserve">
          <source>URLs</source>
          <target state="translated">URLs</target>
        </trans-unit>
        <trans-unit id="aaa0bde7f5196da87592a553fbff4a7d60686471" translate="yes" xml:space="preserve">
          <source>URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.</source>
          <target state="translated">URL は、ある範囲の文字のみを含むことが許されています。その範囲外の文字はすべてエンコードされなければなりません。そのような文字がどのようにエンコードされるか、どの文字をエンコードするかは、その文字が URL の構造内のどこにあるかに完全に依存します。</target>
        </trans-unit>
        <trans-unit id="1caa901ddac6183bbfa527108f80fb9a81c3fb50" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A false-y &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; スキームのURLでは、 &lt;code&gt;slashes&lt;/code&gt; オプションに関係なく、常に正しい数のスラッシュが使用されるようになりました。プロトコルのないfalse-y &lt;code&gt;slashes&lt;/code&gt; オプションも常に尊重されるようになりました。</target>
        </trans-unit>
        <trans-unit id="7ce43f682f8e00790c8ef30d56b7ba3f345e48bf" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A falsy &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; URL ：スキームは、 &lt;code&gt;slashes&lt;/code&gt; オプションに関係なく、常に正しい数のスラッシュを使用するようになりました。プロトコルのない偽の &lt;code&gt;slashes&lt;/code&gt; オプションも常に尊重されるようになりました。</target>
        </trans-unit>
        <trans-unit id="7cf77927f71e28dcf1f204b6a54ebaa27e8f22d5" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;input&lt;/code&gt; string and returns a &lt;code&gt;Uint8Array&lt;/code&gt; containing the encoded bytes.</source>
          <target state="translated">UTF-8は &lt;code&gt;input&lt;/code&gt; 文字列をエンコードし、エンコードされたバイトを含む &lt;code&gt;Uint8Array&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b71146a62fb63a8add8a5579d875bb69309a465e" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;src&lt;/code&gt; string to the &lt;code&gt;dest&lt;/code&gt; Uint8Array and returns an object containing the read Unicode code units and written UTF-8 bytes.</source>
          <target state="translated">UTF-8は、 &lt;code&gt;src&lt;/code&gt; 文字列を &lt;code&gt;dest&lt;/code&gt; Uint8Arrayにエンコードし、読み取られたUnicodeコード単位と書き込まれたUTF-8バイトを含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="d2a020ddc6f85f9747d28e1db856f35e5132b29d" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event if the &lt;code&gt;repl&lt;/code&gt; is used as standalone program. If the &lt;code&gt;repl&lt;/code&gt; is included anywhere in another application, adding a listener for this event will throw an &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt;例外は、 &lt;code&gt;repl&lt;/code&gt; がスタンドアロンプ​​ログラムとして使用されている場合にのみ、「uncaughtException」イベントを発行します。 &lt;code&gt;repl&lt;/code&gt; が別のアプリケーションのどこかに含まれている場合、このイベントのリスナーを追加すると、&lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; &lt;/a&gt;例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="00499514ac2e595db5c7987996d23850bbb67efb" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event in the standalone REPL. Adding a listener for this event in a REPL within another Node.js program throws &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt;例外は、スタンドアロンREPLで「uncaughtException」イベントのみを発行します。このイベントのリスナーを別のNode.jsプログラム内のREPLに追加すると、&lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; が&lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="12780a16241be2fa7756cbd98a691718ec9bd790" translate="yes" xml:space="preserve">
          <source>Undefined value error is identified by &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt;.</source>
          <target state="translated">未定義の値のエラーは、 &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt; 識別されます。</target>
        </trans-unit>
        <trans-unit id="355754b0f03869d3cdd89f47abdc47135392a8b0" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, there is no need to modify the report triggering signal. However, if &lt;code&gt;SIGUSR2&lt;/code&gt; is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of &lt;code&gt;SIGUSR2&lt;/code&gt; for the said purposes.</source>
          <target state="translated">通常の状況では、レポートトリガー信号を変更する必要はありません。ただし、 &lt;code&gt;SIGUSR2&lt;/code&gt; がすでに他の目的で使用されている場合、このフラグはレポート生成のシグナルを変更し、その目的のための &lt;code&gt;SIGUSR2&lt;/code&gt; の元の意味を維持するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="91d9c4087497cf56cdc0c9a2696808d747e7494c" translate="yes" xml:space="preserve">
          <source>Under the hood, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses the same operating system facilities as most other programs. For instance, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; will almost always resolve a given name the same way as the &lt;code&gt;ping&lt;/code&gt; command. On most POSIX-like operating systems, the behavior of the &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function can be modified by changing settings in &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt;&lt;code&gt;nsswitch.conf(5)&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;&lt;code&gt;resolv.conf(5)&lt;/code&gt;&lt;/a&gt;, but changing these files will change the behavior of all other programs running on the same operating system.</source>
          <target state="translated">&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;は、dns.lookup（）は他のほとんどのプログラムと同じオペレーティングシステム機能を使用しています。たとえば、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;は、ほとんどの場合、 &lt;code&gt;ping&lt;/code&gt; コマンドと同じ方法で特定の名前を解決します。ほとんどのPOSIX系オペレーティングシステムでは、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;関数の動作は&lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt; &lt;code&gt;nsswitch.conf(5)&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt; &lt;code&gt;resolv.conf(5)&lt;/code&gt; の&lt;/a&gt;設定を変更することで変更できますが、これらのファイルを変更すると、同じオペレーティングシステムで実行されている他のすべてのプログラム。</target>
        </trans-unit>
        <trans-unit id="580e3fbd2559f3ee3cfa1776417d5a62f4c14b7c" translate="yes" xml:space="preserve">
          <source>Underscores instead of dashes are now allowed for Node.js options as well, in addition to V8 options.</source>
          <target state="translated">Node.jsのオプションでも、V8のオプションに加えて、ダッシュではなくアンダースコアを使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="ed2bd0b19c6dea70c7607644329c823665264cfc" translate="yes" xml:space="preserve">
          <source>Unflag &lt;code&gt;--experimental-modules&lt;/code&gt;.</source>
          <target state="translated">--experimental &lt;code&gt;--experimental-modules&lt;/code&gt; フラグを解除します。</target>
        </trans-unit>
        <trans-unit id="9c2e7282fb0e27b15982f88c5929897b3adfb4d7" translate="yes" xml:space="preserve">
          <source>Unflag Top-Level Await.</source>
          <target state="translated">トップレベルのアウェイをアンフラグ。</target>
        </trans-unit>
        <trans-unit id="d19cffd05ee3c79cb00f356aecb7406fcb1d3e26" translate="yes" xml:space="preserve">
          <source>Unflag conditional exports.</source>
          <target state="translated">条件付きエクスポートのフラグを解除します。</target>
        </trans-unit>
        <trans-unit id="a980d0989e6f2d52c0782eb0bf64b702bd0c9261" translate="yes" xml:space="preserve">
          <source>Unflag self-referencing a package using its name.</source>
          <target state="translated">パッケージ名を使用して自己参照しているパッケージをアンフラグします。</target>
        </trans-unit>
        <trans-unit id="c6535069f12c408de03e4a4245fa064b53e80ecc" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;napi_instanceof()&lt;/code&gt; does not protect against prototype manipulation. For example, the prototype of the database handle instance can be set to the prototype of the constructor for query handle instances. In this case, the database handle instance can appear as a query handle instance, and it will pass the &lt;code&gt;napi_instanceof()&lt;/code&gt; test for a query handle instance, while still containing a pointer to a database handle.</source>
          <target state="translated">残念ながら、 &lt;code&gt;napi_instanceof()&lt;/code&gt; はプロトタイプ操作から保護しません。たとえば、データベースハンドルインスタンスのプロトタイプを、クエリハンドルインスタンスのコンストラクターのプロトタイプに設定できます。この場合、データベースハンドルインスタンスはクエリハンドルインスタンスとして表示でき、データベースハンドルへのポインタを含みながら、クエリハンドルインスタンスの &lt;code&gt;napi_instanceof()&lt;/code&gt; テストに合格します。</target>
        </trans-unit>
        <trans-unit id="1b6da39f1b5c6c93e6c62b868278c8947240fb88" translate="yes" xml:space="preserve">
          <source>Unhandled &lt;code&gt;Promise&lt;/code&gt; rejections will now emit a process warning.</source>
          <target state="translated">未処理の &lt;code&gt;Promise&lt;/code&gt; 拒否は、プロセス警告を発します。</target>
        </trans-unit>
        <trans-unit id="8ceb854cab777251b618db6f339ec0de596df6df" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. By default, promise rejections that are not handled terminate the Node.js process with a non-zero exit code. To change the way Node.js treats unhandled rejections, use the &lt;a href=&quot;cli#cli_unhandled_rejections_mode&quot;&gt;&lt;code&gt;--unhandled-rejections&lt;/code&gt;&lt;/a&gt; command-line option.</source>
          <target state="translated">未処理のPromise拒否は非推奨です。デフォルトでは、処理されないPromise拒否は、ゼロ以外の終了コードでNode.jsプロセスを終了します。Node.jsが未処理の拒否を処理する方法を変更するには、&lt;a href=&quot;cli#cli_unhandled_rejections_mode&quot;&gt; &lt;code&gt;--unhandled-rejections&lt;/code&gt; &lt;/a&gt;コマンドラインオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="464f051574cc9f087c75400c48b33f6db9e3b08d" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</source>
          <target state="translated">ハンドリングされていないプロミスの拒否は非推奨です。将来的には、処理されなかったプロミスの拒否は、0以外の終了コードでNode.jsプロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="584854aa0e9467ba1a8c66c80f5e294682497d95" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the host name of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; のホスト名内に表示されるUnicode文字は、&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用して自動的にASCIIに変換されます。</target>
        </trans-unit>
        <trans-unit id="571721324afa74a8ee617292febb542f1513c933" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the hostname of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; のホスト名内に現れるUnicode文字は、&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用して自動的にASCIIに変換されます。</target>
        </trans-unit>
        <trans-unit id="12b0a12e37a0aa70166ef0879f9a3b2e21c18fa6" translate="yes" xml:space="preserve">
          <source>Unknown values for the resolved module location cause failures but are not guaranteed to be forward compatible.</source>
          <target state="translated">解決されたモジュール位置の不明な値は失敗の原因となりますが、前方互換性は保証されていません。</target>
        </trans-unit>
        <trans-unit id="d44850afeb4065072620c926d0775df5f7048af1" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances indicate a bug in the code or its dependencies.</source>
          <target state="translated">アプリケーションが動的にコードを生成して実行していない限り、 &lt;code&gt;ReferenceError&lt;/code&gt; インスタンスは、コードまたはその依存関係のバグを示します。</target>
        </trans-unit>
        <trans-unit id="929fece4ad5f5e7b4b1b96bae39ed7f671795daa" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances should always be considered a bug in the code or its dependencies.</source>
          <target state="translated">アプリケーションが動的にコードを生成して実行している場合を &lt;code&gt;ReferenceError&lt;/code&gt; 、ReferenceErrorインスタンスは常にコードまたはその依存関係のバグと見なす必要があります。</target>
        </trans-unit>
        <trans-unit id="fe2b51adbc6c7b0bc926ec919779dce328f8537f" translate="yes" xml:space="preserve">
          <source>Unless explicitly specified when creating a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; instance, each &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread has its own copy of &lt;code&gt;process.env&lt;/code&gt;, based on its parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt;, or whatever was specified as the &lt;code&gt;env&lt;/code&gt; option to the &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor. Changes to &lt;code&gt;process.env&lt;/code&gt; will not be visible across &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, and only the main thread can make changes that are visible to the operating system or to native add-ons.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;インスタンスの作成時に明示的に指定されていない限り、各&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドには、親スレッドの &lt;code&gt;process.env&lt;/code&gt; または&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;コンストラクターの &lt;code&gt;env&lt;/code&gt; オプションとして指定されたものに基づいて、独自の &lt;code&gt;process.env&lt;/code&gt; のコピーがあります。 &lt;code&gt;process.env&lt;/code&gt; への変更は&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッド間で表示されず、メインスレッドのみがオペレーティングシステムまたはネイティブアドオンに表示される変更を行うことができます。</target>
        </trans-unit>
        <trans-unit id="a72e9d9932fe774a0515db2c6aaea624c04effad" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside a &lt;code&gt;napi_callback&lt;/code&gt; is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;で説明されている理由がない限り、 &lt;code&gt;napi_callback&lt;/code&gt; 内にハンドルやコールバックスコープを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="0edc9ad8deb45d66b9a4ce8ca1ee4d65518cb9fc" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside the function body is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;で説明されている理由がない限り、関数本体内にハンドルやコールバックスコープを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2172d325e09251aae77841665a275f9f12e96c85" translate="yes" xml:space="preserve">
          <source>Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; keywords are declared at the global scope.</source>
          <target state="translated">ブロックまたは関数内でスコープされていない限り、暗黙的に、または &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; キーワードを使用して宣言された変数は、グローバルスコープで宣言されます。</target>
        </trans-unit>
        <trans-unit id="f2b9cb312ebc7377e0acc37ab64028e168b79e3b" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;&lt;/a&gt;, the hook is allowed to be asynchronous.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt; &lt;/a&gt;とは異なり、フックは非同期にすることができます。</target>
        </trans-unit>
        <trans-unit id="738279034066201991d76c70c2c3ad5d7acd5fb5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt;, it does not support an additional &lt;code&gt;time&lt;/code&gt; argument since the difference can just be computed directly by subtraction of the two &lt;code&gt;bigint&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt;とは異なり、2つの &lt;code&gt;bigint&lt;/code&gt; の減算によって差を直接計算できるため、追加の &lt;code&gt;time&lt;/code&gt; 引数はサポートされません。</target>
        </trans-unit>
        <trans-unit id="a7d31182b596602990e6a1b35091501ddc7cd0bd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if &lt;code&gt;readable.unshift()&lt;/code&gt; is called during a read (i.e. from within a &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;stream._read()&lt;/code&gt;&lt;/a&gt; implementation on a custom stream). Following the call to &lt;code&gt;readable.unshift()&lt;/code&gt; with an immediate &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push('')&lt;/code&gt;&lt;/a&gt; will reset the reading state appropriately, however it is best to simply avoid calling &lt;code&gt;readable.unshift()&lt;/code&gt; while in the process of performing a read.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; は、ストリームの内部読み取り状態をリセットしても、読み取りプロセスを終了しません。これにより、 &lt;code&gt;readable.unshift()&lt;/code&gt; 中に&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;stream._read()&lt;/code&gt; &lt;/a&gt;が呼び出された場合（つまり、カスタムストリームのstream._read（）実装内から）、予期しない結果が生じる可能性があります。すぐに&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push('')&lt;/code&gt; &lt;/a&gt;を指定してreaderial.unshift &lt;code&gt;readable.unshift()&lt;/code&gt; を呼び出すと、読み取り状態が適切にリセットされますが、読み取りを実行している間は、簡単に &lt;code&gt;readable.unshift()&lt;/code&gt; を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="ffbea780c221ab67ef22ff2efead15150ae9d4ad" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module, duplicate keys in the form of array values are not allowed. Arrays are stringified using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt;&lt;code&gt;array.toString()&lt;/code&gt;&lt;/a&gt;, which simply joins all array elements with commas.</source>
          <target state="translated">&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;モジュールとは異なり、配列値の形式での重複キーは許可されていません。配列は、すべての配列要素をカンマで結合する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt; &lt;code&gt;array.toString()&lt;/code&gt; &lt;/a&gt;を使用して文字列化されます。</target>
        </trans-unit>
        <trans-unit id="cf1a2bd2bcaee5665438d46897ea1c835ab3373a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;EventEmitter&lt;/code&gt;, any given &lt;code&gt;listener&lt;/code&gt; can be registered at most once per event &lt;code&gt;type&lt;/code&gt;. Attempts to register a &lt;code&gt;listener&lt;/code&gt; multiple times are ignored.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; とは異なり、任意の &lt;code&gt;listener&lt;/code&gt; はイベント &lt;code&gt;type&lt;/code&gt; ごとに最大1回登録できます。 &lt;code&gt;listener&lt;/code&gt; 複数回登録しようとしても無視されます。</target>
        </trans-unit>
        <trans-unit id="93286044bb9cc680edddcad0e702f7630a603e80" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;child_process&lt;/code&gt; or &lt;code&gt;cluster&lt;/code&gt;, &lt;code&gt;worker_threads&lt;/code&gt; can share memory. They do so by transferring &lt;code&gt;ArrayBuffer&lt;/code&gt; instances or sharing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;child_process&lt;/code&gt; や &lt;code&gt;cluster&lt;/code&gt; とは異なり、 &lt;code&gt;worker_threads&lt;/code&gt; はメモリを共有できます。そのためには、 &lt;code&gt;ArrayBuffer&lt;/code&gt; インスタンスを転送するか、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; インスタンスを共有します。</target>
        </trans-unit>
        <trans-unit id="786c293ea8a2a263e26d57c1c94d19f2b5a49165" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;eval&lt;/code&gt;, this function does not allow the script to access the current lexical scope, and therefore also does not allow to access the &lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;module scope&lt;/a&gt;, meaning that pseudo-globals such as &lt;code&gt;require&lt;/code&gt; will not be available.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; とは異なり、この関数はスクリプトが現在の字句スコープにアクセスすることを許可しないため、&lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;モジュールスコープ&lt;/a&gt;にアクセスすることも許可しません。つまり、 &lt;code&gt;require&lt;/code&gt; などの疑似グローバルは使用できません。</target>
        </trans-unit>
        <trans-unit id="b31b651c0bd301bf713d75fd4cc4cb768e5aecc6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.Module&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.Module&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. The use of 'async' functions can help with manipulating &lt;code&gt;vm.Module&lt;/code&gt; objects.</source>
          <target state="translated">ただし、 &lt;code&gt;vm.Script&lt;/code&gt; とは異なり、すべての &lt;code&gt;vm.Module&lt;/code&gt; オブジェクトは作成時からコンテキストにバインドされます。上の操作 &lt;code&gt;vm.Module&lt;/code&gt; のオブジェクトは、同期性質とは対照的に、本質的に非同期である &lt;code&gt;vm.Script&lt;/code&gt; のオブジェクト。'async'関数を使用すると、 &lt;code&gt;vm.Module&lt;/code&gt; オブジェクトの操作に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bc66008fe7449b513d18dc2e492a0bd73292fdec" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. With the help of async functions, however, manipulating &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects is fairly straightforward.</source>
          <target state="translated">ただし、 &lt;code&gt;vm.Script&lt;/code&gt; とは異なり、すべての &lt;code&gt;vm.SourceTextModule&lt;/code&gt; オブジェクトは、その作成からコンテキストにバインドされます。上の操作 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; のオブジェクトは、同期性質とは対照的に、本質的に非同期である &lt;code&gt;vm.Script&lt;/code&gt; のオブジェクト。ただし、非同期関数を使用すると、 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; オブジェクトの操作はかなり簡単になります。</target>
        </trans-unit>
        <trans-unit id="0599776b2acdfbdb39a04e0dc3671e103e9a70bf" translate="yes" xml:space="preserve">
          <source>Unlike modules written in JavaScript, developing and deploying Node.js native addons using N-API requires an additional set of tools. Besides the basic tools required to develop for Node.js, the native addon developer requires a toolchain that can compile C and C++ code into a binary. In addition, depending upon how the native addon is deployed, the &lt;em&gt;user&lt;/em&gt; of the native addon will also need to have a C/C++ toolchain installed.</source>
          <target state="translated">JavaScriptで記述されたモジュールとは異なり、N-APIを使用してNode.jsネイティブアドオンを開発およびデプロイするには、追加のツールセットが必要です。Node.jsの開発に必要な基本的なツールに加えて、ネイティブアドオン開発者は、CおよびC ++コードをバイナリにコンパイルできるツールチェーンを必要とします。さらに、ネイティブアドオンの展開方法に応じて、ネイティブアドオンの&lt;em&gt;ユーザー&lt;/em&gt;にもC / C ++ツールチェーンをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="7c5877252fff27f076a79408216302ad7142ca78" translate="yes" xml:space="preserve">
          <source>Unlike other methods operating on &lt;code&gt;Module&lt;/code&gt;, this function completes synchronously and returns nothing.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; で動作する他のメソッドとは異なり、この関数は同期的に完了し、何も返しません。</target>
        </trans-unit>
        <trans-unit id="d88dff4d6b12aaa62861c546611f134585732b86" translate="yes" xml:space="preserve">
          <source>Unlike the 16 kb default &lt;code&gt;highWaterMark&lt;/code&gt; for a readable stream, the stream returned by this method has a default &lt;code&gt;highWaterMark&lt;/code&gt; of 64 kb.</source>
          <target state="translated">読み取り可能なストリームの16 kbのデフォルトの &lt;code&gt;highWaterMark&lt;/code&gt; とは異なり、このメソッドによって返されるストリームのデフォルトの &lt;code&gt;highWaterMark&lt;/code&gt; は64 kbです。</target>
        </trans-unit>
        <trans-unit id="c89fbd3cb8564198493b0872bc897f53689f1cdc" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt;&lt;code&gt;fork(2)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.fork()&lt;/code&gt; does not clone the current process.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt; &lt;code&gt;fork(2)&lt;/code&gt; &lt;/a&gt; POSIXシステムコールとは異なり、 &lt;code&gt;child_process.fork()&lt;/code&gt; は現在のプロセスのクローンを作成しません。</target>
        </trans-unit>
        <trans-unit id="14ecf150019ebe6bc4270fdded6d714de98dea3b" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt;&lt;code&gt;exec(3)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.exec()&lt;/code&gt; does not replace the existing process and uses a shell to execute the command.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt; &lt;code&gt;exec(3)&lt;/code&gt; &lt;/a&gt; POSIXシステムコールとは異なり、 &lt;code&gt;child_process.exec()&lt;/code&gt; は既存のプロセスを置き換えず、シェルを使用してコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ac552eba22b166975a88df1dd5f700d09b1fc6fd" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;&quot;exports&quot;&lt;/code&gt; field, the &lt;code&gt;&quot;imports&quot;&lt;/code&gt; field permits mapping to external packages.</source>
          <target state="translated">&lt;code&gt;&quot;exports&quot;&lt;/code&gt; フィールドとは異なり、「 &lt;code&gt;&quot;imports&quot;&lt;/code&gt; フィールドでは外部パッケージへのマッピングが可能です。</target>
        </trans-unit>
        <trans-unit id="8550f7544a3f4ee9abeb8cba1ce111534a3ad502" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;https&lt;/code&gt; API, &lt;code&gt;tls.connect()&lt;/code&gt; does not enable the SNI (Server Name Indication) extension by default, which may cause some servers to return an incorrect certificate or reject the connection altogether. To enable SNI, set the &lt;code&gt;servername&lt;/code&gt; option in addition to &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https&lt;/code&gt; APIとは異なり、 &lt;code&gt;tls.connect()&lt;/code&gt; はデフォルトでSNI（Server Name Indication）拡張機能を有効にしません。これにより、一部のサーバーが誤った証明書を返したり、接続を完全に拒否したりする可能性があります。SNIを有効にするには、 &lt;code&gt;host&lt;/code&gt; に加えて &lt;code&gt;servername&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="f6945f22f96a4e53b030942319ed3d31db4f4e41" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;net.Socket&lt;/code&gt; and &lt;code&gt;tls.TLSSocket&lt;/code&gt;, a &lt;code&gt;QuicSocket&lt;/code&gt; instance cannot be directly used by user code at the JavaScript level to send or receive data over the network.</source>
          <target state="translated">異なり &lt;code&gt;net.Socket&lt;/code&gt; と &lt;code&gt;tls.TLSSocket&lt;/code&gt; 、 &lt;code&gt;QuicSocket&lt;/code&gt; のインスタンスは、直接ネットワークを介してデータを送信または受信するためにJavaScriptのレベルでユーザ・コードによって使用することができません。</target>
        </trans-unit>
        <trans-unit id="8a651eaa44463d71d0ba17228140a40f73da19e4" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;request&lt;/code&gt; object, if the response closes prematurely, the &lt;code&gt;response&lt;/code&gt; object does not emit an &lt;code&gt;'error'&lt;/code&gt; event but instead emits the &lt;code&gt;'aborted'&lt;/code&gt; event.</source>
          <target state="translated">異なり &lt;code&gt;request&lt;/code&gt; 応答が途中で閉じた場合、オブジェクト、 &lt;code&gt;response&lt;/code&gt; オブジェクトは排出しない &lt;code&gt;'error'&lt;/code&gt; イベントを代わりに発する &lt;code&gt;'aborted'&lt;/code&gt; イベントを。</target>
        </trans-unit>
        <trans-unit id="245fd6876839504d24af1a18605a9594e7b65485" translate="yes" xml:space="preserve">
          <source>Unlike the callback-based API (&lt;code&gt;fs.fstat()&lt;/code&gt;, &lt;code&gt;fs.fchown()&lt;/code&gt;, &lt;code&gt;fs.fchmod()&lt;/code&gt;, and so on), a numeric file descriptor is not used by the promise-based API. Instead, the promise-based API uses the &lt;code&gt;FileHandle&lt;/code&gt; class in order to help avoid accidental leaking of unclosed file descriptors after a &lt;code&gt;Promise&lt;/code&gt; is resolved or rejected.</source>
          <target state="translated">コールバックベースのAPI（ &lt;code&gt;fs.fstat()&lt;/code&gt; 、 &lt;code&gt;fs.fchown()&lt;/code&gt; 、 &lt;code&gt;fs.fchmod()&lt;/code&gt; など）とは異なり、数値ファイル記述子はpromiseベースのAPIでは使用されません。代わりに、PromiseベースのAPIは、 &lt;code&gt;FileHandle&lt;/code&gt; クラスを使用して、 &lt;code&gt;Promise&lt;/code&gt; が解決または拒否された後に、閉じられていないファイル記述子が誤ってリークされるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="aec5e222fb21197428b2bc12e8d85d03d3d352d7" translate="yes" xml:space="preserve">
          <source>Unregisters &lt;code&gt;fun&lt;/code&gt; as a function to be run with the &lt;code&gt;arg&lt;/code&gt; parameter once the current Node.js environment exits. Both the argument and the function value need to be exact matches.</source>
          <target state="translated">現在のNode.js環境が終了したら、 &lt;code&gt;arg&lt;/code&gt; パラメーターを指定して実行する関数として &lt;code&gt;fun&lt;/code&gt; を登録解除します。引数と関数値の両方が完全に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d18fe6d2e5688021879f7a873899d3115ce6e749" translate="yes" xml:space="preserve">
          <source>Unregisters the cleanup hook corresponding to &lt;code&gt;remove_handle&lt;/code&gt;. This will prevent the hook from being executed, unless it has already started executing. This must be called on any &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; value obtained from &lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;remove_handle&lt;/code&gt; に対応するクリーンアップフックの登録を解除します。これにより、フックがすでに実行を開始していない限り、フックが実行されなくなります。これは、&lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt; &lt;/a&gt;から取得したnapi_async_cleanup_hook_handle値で &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="65c4b2669e9c330ac9f73450acc1e9a90e0c45de" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Hmac&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;code&gt;Hmac&lt;/code&gt; コンテンツを指定された &lt;code&gt;data&lt;/code&gt; で更新します。そのエンコードは &lt;code&gt;inputEncoding&lt;/code&gt; で指定されます。場合 &lt;code&gt;encoding&lt;/code&gt; 設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="93605dc813a8e916582ddbffd733db79b79cce3c" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Sign&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">更新 &lt;code&gt;Sign&lt;/code&gt; 所与とコンテンツ &lt;code&gt;data&lt;/code&gt; に付与されたの符号化 &lt;code&gt;inputEncoding&lt;/code&gt; を。場合 &lt;code&gt;encoding&lt;/code&gt; 設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="a2260478143ea14e9583ad4e3b793657f13996f1" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Verify&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;code&gt;Verify&lt;/code&gt; コンテンツを指定された &lt;code&gt;data&lt;/code&gt; で更新します。そのエンコードは &lt;code&gt;inputEncoding&lt;/code&gt; で指定されています。場合 &lt;code&gt;inputEncoding&lt;/code&gt; が設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="77d2af3d6057a23de355899c59dd7f7a41c92d30" translate="yes" xml:space="preserve">
          <source>Updates the cipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">暗号を &lt;code&gt;data&lt;/code&gt; 更新します。場合 &lt;code&gt;inputEncoding&lt;/code&gt; の引数が指定され、 &lt;code&gt;data&lt;/code&gt; 引数が指定されたエンコーディングを使用して文字列です。 &lt;code&gt;inputEncoding&lt;/code&gt; 引数を指定しない場合、 &lt;code&gt;data&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; でなければなりません。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="db6770b018c405d1e79d9580f71bd8cf8282662f" translate="yes" xml:space="preserve">
          <source>Updates the current local settings for this &lt;code&gt;Http2Session&lt;/code&gt; and sends a new &lt;code&gt;SETTINGS&lt;/code&gt; frame to the connected HTTP/2 peer.</source>
          <target state="translated">この &lt;code&gt;Http2Session&lt;/code&gt; の現在のローカル設定を更新し、接続されたHTTP / 2ピアに新しい &lt;code&gt;SETTINGS&lt;/code&gt; フレームを送信します。</target>
        </trans-unit>
        <trans-unit id="957c600a690a3a36412946efac93320156d3eb42" translate="yes" xml:space="preserve">
          <source>Updates the decipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">解読を &lt;code&gt;data&lt;/code&gt; 更新します。場合 &lt;code&gt;inputEncoding&lt;/code&gt; の引数が指定され、 &lt;code&gt;data&lt;/code&gt; 引数が指定されたエンコーディングを使用して文字列です。 &lt;code&gt;inputEncoding&lt;/code&gt; 引数を指定しない場合、 &lt;code&gt;data&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; で&lt;/a&gt;なければなりません。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;その後 &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="5ed45c49beca4ce2a38119d874096a97e38115cc" translate="yes" xml:space="preserve">
          <source>Updates the hash content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">指定された &lt;code&gt;data&lt;/code&gt; でハッシュコンテンツを更新します。そのエンコードは &lt;code&gt;inputEncoding&lt;/code&gt; で指定されます。場合 &lt;code&gt;encoding&lt;/code&gt; 設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="7d2950e7ca60835246638412bbc7c834bf90e01b" translate="yes" xml:space="preserve">
          <source>Updates the priority for this &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">この &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスの優先度を更新します。</target>
        </trans-unit>
        <trans-unit id="da0f7a31471fb4f5f448dffafa53fb94e1f6c0de" translate="yes" xml:space="preserve">
          <source>Uploading precompiled binaries</source>
          <target state="translated">コンパイル済みバイナリのアップロード</target>
        </trans-unit>
        <trans-unit id="f6b150488cf43f5c486b4617e1a3281d94130a34" translate="yes" xml:space="preserve">
          <source>Upon assigning a value to the port, the value will first be converted to a string using &lt;code&gt;.toString()&lt;/code&gt;.</source>
          <target state="translated">ポートに値を割り当てると、最初に &lt;code&gt;.toString()&lt;/code&gt; を使用して値が文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="f8d1386e91a02cb0c85bee48bbf4edcff35a05d0" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;Aside from the main loop thread, no threads should be using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; の作成時に、 &lt;code&gt;napi_finalize&lt;/code&gt; コールバックを提供できます。このコールバックは、スレッドセーフ関数が破棄されようとしているときにメインスレッドで呼び出されます。構築中に指定されたコンテキストとファイナライズデータを受け取り、 &lt;code&gt;uv_thread_join()&lt;/code&gt; を呼び出すなどして、スレッドの後にクリーンアップする機会を提供します。&lt;strong&gt;メインループスレッドを除いて、finalizeコールバックが完了した後はスレッドセーフ関数を使用してはなりません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a21b6b47f79ea7bf24d3448220aa0114efedd561" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;It is important that, aside from the main loop thread, there be no threads left using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; の作成時に、 &lt;code&gt;napi_finalize&lt;/code&gt; コールバックを提供できます。このコールバックは、スレッドセーフ関数が破棄されるときにメインスレッドで呼び出されます。構築中に与えられたコンテキストとファイナライズデータを受け取り、たとえば &lt;code&gt;uv_thread_join()&lt;/code&gt; を呼び出すことによって、スレッドの後にクリーンアップする機会を提供します。&lt;strong&gt;メインループスレッドを除いて、finalizeコールバックの完了後にスレッドセーフ関数を使用しているスレッドが残っていないことが重要です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0ce53004853a0d3cc308cfeea91d8ad9ccd6880" translate="yes" xml:space="preserve">
          <source>Upon success, the &lt;code&gt;Promise&lt;/code&gt; is resolved without arguments.</source>
          <target state="translated">成功すると、 &lt;code&gt;Promise&lt;/code&gt; は引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="2de39f1fb97e8b9fad2a13c376d5983dda0775fd" translate="yes" xml:space="preserve">
          <source>Usage &amp;amp; Example</source>
          <target state="translated">使用法と例</target>
        </trans-unit>
        <trans-unit id="e52c8372eec3736296f93f87fe2977417bbb2721" translate="yes" xml:space="preserve">
          <source>Usage and example</source>
          <target state="translated">使い方と例</target>
        </trans-unit>
        <trans-unit id="d36ee1550e836b658bce06b4f1d49c2dec79550a" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;ECDH&lt;/code&gt; with non-dynamically generated key pairs has been simplified. Now, &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; can be called with a preselected private key and the associated public point (key) will be computed and stored in the object. This allows code to only store and provide the private part of the EC key pair. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; now also validates that the private key is valid for the selected curve.</source>
          <target state="translated">動的に生成されないキーペアでの &lt;code&gt;ECDH&lt;/code&gt; の使用が簡略化されました。これで、事前に選択された秘密鍵を使用して&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;を呼び出すことができ、関連する公開ポイント（キー）が計算されてオブジェクトに保存されます。これにより、コードはECキーペアの秘密部分のみを格納および提供できます。&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;は、秘密鍵が選択した曲線に対して有効であることも検証するようになりました。</target>
        </trans-unit>
        <trans-unit id="5ff118bed7c719c614a84434b5439be16bf71d2c" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;util.inherits()&lt;/code&gt; is discouraged. Please use the ES6 &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords to get language level inheritance support. Also note that the two styles are &lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;semantically incompatible&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;util.inherits()&lt;/code&gt; の使用はお勧めしません。ES6 &lt;code&gt;class&lt;/code&gt; と &lt;code&gt;extends&lt;/code&gt; キーワードを使用して、言語レベルの継承サポートを取得してください。また、2つのスタイルには&lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;意味的に互換性がない&lt;/a&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a7631402d6fe2c428c59f2ef506230c3fbbc9e7d" translate="yes" xml:space="preserve">
          <source>Usage with &lt;code&gt;async/await&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;async/await&lt;/code&gt; での使用</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="eae67d2af37c578abfdf9b05166c5445461a54fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt;&lt;code&gt;crypto.getCurves()&lt;/code&gt;&lt;/a&gt; to obtain a list of available curve names. On recent OpenSSL releases, &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; will also display the name and description of each available elliptic curve.</source>
          <target state="translated">使用可能な曲線名のリストを取得するには、&lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt; &lt;code&gt;crypto.getCurves()&lt;/code&gt; &lt;/a&gt;を使用します。最近のOpenSSLリリースでは、 &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; は、利用可能な各楕円曲線の名前と説明も表示します。</target>
        </trans-unit>
        <trans-unit id="765064bc0f2ebbee5fd48d238b26225a203b8acc" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt;&lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt;&lt;/a&gt; API instead which provides a much safer, and more convenient, alternative. See &lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513&lt;/a&gt;.</source>
          <target state="translated">代わりに、はるかに安全で便利な代替手段を提供する&lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt; &lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt; &lt;/a&gt; APIを使用してください。&lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="49f7b175b350d863eddd6c45e7bde6196f5a3dae" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_request_destroy_error&quot;&gt;&lt;code&gt;request.destroy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http#http_request_abort&quot;&gt;&lt;code&gt;request.abort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;http#http_request_destroy_error&quot;&gt; &lt;code&gt;request.destroy()&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;http#http_request_abort&quot;&gt; &lt;code&gt;request.abort()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6154b148a1c536c520dcd143957f4ee42fa11bca" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http#http_response_writableended&quot;&gt;&lt;code&gt;response.writableEnded&lt;/code&gt;&lt;/a&gt; accordingly instead to avoid the ambigiuty.</source>
          <target state="translated">あいまいさを避けるために、代わりに&lt;a href=&quot;http#http_response_writablefinished&quot;&gt; &lt;code&gt;response.writableFinished&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;http#http_response_writableended&quot;&gt; &lt;code&gt;response.writableEnded&lt;/code&gt; を&lt;/a&gt;適宜使用してください。</target>
        </trans-unit>
        <trans-unit id="5a30ec81f674dcb2bdd37f247d94a36bf6b4dc08" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;wabt&lt;/a&gt; to compile &lt;code&gt;.wat&lt;/code&gt; to &lt;code&gt;.wasm&lt;/code&gt;</source>
          <target state="translated">使用&lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;WABT&lt;/a&gt;にコンパイル &lt;code&gt;.wat&lt;/code&gt; に &lt;code&gt;.wasm&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21fffe7297300dbe9e8fff2c0d9e6bf6dadca3c2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Content-Length&lt;/code&gt; or &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;Content-Length&lt;/code&gt; または &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0002c56173cba9691148346f5ff59f5e6272f3f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cwd&lt;/code&gt; to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory.</source>
          <target state="translated">&lt;code&gt;cwd&lt;/code&gt; を使用して、プロセスが生成される作業ディレクトリを指定します。指定しない場合、デフォルトでは現在の作業ディレクトリが継承されます。</target>
        </trans-unit>
        <trans-unit id="c05a3240b8dcb6543102bd118217246c78db60fb" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cwd&lt;/code&gt; to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory. If given, but the path does not exist, the child process emits an &lt;code&gt;ENOENT&lt;/code&gt; error and exits immediately. &lt;code&gt;ENOENT&lt;/code&gt; is also emitted when the command does not exist.</source>
          <target state="translated">&lt;code&gt;cwd&lt;/code&gt; を使用して、プロセスが生成される作業ディレクトリを指定します。指定しない場合、デフォルトでは現在の作業ディレクトリを継承します。指定されたがパスが存在しない場合、子プロセスは &lt;code&gt;ENOENT&lt;/code&gt; エラーを発行し、すぐに終了します。 &lt;code&gt;ENOENT&lt;/code&gt; は、コマンドが存在しない場合にも発行されます。</target>
        </trans-unit>
        <trans-unit id="f76aedfcb8be71f942f01d87d5c0635892414e98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;delete&lt;/code&gt; to delete a property from &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">使用し &lt;code&gt;delete&lt;/code&gt; からプロパティを削除する &lt;code&gt;process.env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf939c90dc4dd9f69fea1af3d6551d592973f347" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;env&lt;/code&gt; to specify environment variables that will be visible to the new process, the default is &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; を使用して、新しいプロセスから見える環境変数を指定します。デフォルトは&lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bdf8f57531e78c20b41a30f579a4c55918a56c3e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;nc&lt;/code&gt; to connect to a Unix domain socket server:</source>
          <target state="translated">使用 &lt;code&gt;nc&lt;/code&gt; Unixドメインソケットサーバーに接続するには：</target>
        </trans-unit>
        <trans-unit id="62e20e3f8690fbd92499a0d02dda8d74f948e711" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;require('crypto').webcrypto&lt;/code&gt; to access this module.</source>
          <target state="translated">このモジュールにアクセスするに &lt;code&gt;require('crypto').webcrypto&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="356edf58e99c3593deffa78d682258b2fdf50801" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;require('crypto')&lt;/code&gt; to access this module.</source>
          <target state="translated">このモジュールにアクセスするに &lt;code&gt;require('crypto')&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="38303ef87943f896c6983d0f7cf9a70cfee6997e" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;dynamic instantiate hook&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;動的インスタンス化フックを&lt;/a&gt;使用する</target>
        </trans-unit>
        <trans-unit id="e8deebbe7ac1f499b778249832e695a840225107" translate="yes" xml:space="preserve">
          <source>Use an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option.</source>
          <target state="translated">無効な HTTP ヘッダを受け入れる安全でない HTTP パーサを使用してください。これにより、不適合な HTTP 実装との相互運用が可能になる可能性があります。また、リクエストの密輸や、無効なヘッダの受け入れに依存する他の HTTP 攻撃を許す可能性があります。このオプションの使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="dec969f970ae2da31370314777710e2a530ab15f" translate="yes" xml:space="preserve">
          <source>Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store. The default store is selectable at build-time.</source>
          <target state="translated">現在のNode.jsバージョンで提供されているバンドルされたMozilla CAストアを使用するか、OpenSSLのデフォルトのCAストアを使用します。デフォルトのストアはビルド時に選択可能です。</target>
        </trans-unit>
        <trans-unit id="66143e2c420f8a7613239f1e3efea9682fa4826d" translate="yes" xml:space="preserve">
          <source>Use care when dropping privileges:</source>
          <target state="translated">特権を落とすときは注意してください。</target>
        </trans-unit>
        <trans-unit id="c22810f5eadd6fdab3516f9428266e7d74af7b11" translate="yes" xml:space="preserve">
          <source>Use care when using &lt;code&gt;.searchParams&lt;/code&gt; to modify the &lt;code&gt;URL&lt;/code&gt; because, per the WHATWG specification, the &lt;code&gt;URLSearchParams&lt;/code&gt; object uses different rules to determine which characters to percent-encode. For instance, the &lt;code&gt;URL&lt;/code&gt; object will not percent encode the ASCII tilde (&lt;code&gt;~&lt;/code&gt;) character, while &lt;code&gt;URLSearchParams&lt;/code&gt; will always encode it:</source>
          <target state="translated">&lt;code&gt;.searchParams&lt;/code&gt; を使用して &lt;code&gt;URL&lt;/code&gt; を変更する場合は注意が必要です。これは、WHATWG仕様 &lt;code&gt;URLSearchParams&lt;/code&gt; 、URLSearchParamsオブジェクトが異なるルールを使用して、パーセントエンコードする文字を決定するためです。たとえば、 &lt;code&gt;URL&lt;/code&gt; オブジェクトはASCIIチルダ（ &lt;code&gt;~&lt;/code&gt; ）文字をパーセントエンコードしませんが、 &lt;code&gt;URLSearchParams&lt;/code&gt; は常にそれをエンコードします。</target>
        </trans-unit>
        <trans-unit id="3f880e14ac8f636e000356a9df1eb2bc8423b67a" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;SlowBuffer&lt;/code&gt; should be used only as a last resort &lt;em&gt;after&lt;/em&gt; a developer has observed undue memory retention in their applications.</source>
          <target state="translated">&lt;code&gt;SlowBuffer&lt;/code&gt; の使用は、開発者がアプリケーションで過度のメモリ保持を確認した&lt;em&gt;後の&lt;/em&gt;最後の手段としてのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="fb9a785beb4586226520f84b421e62184beadeba" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; does not guarantee that the &lt;em&gt;surrounding&lt;/em&gt; code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities.</source>
          <target state="translated">&lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; を使用しても、&lt;em&gt;周囲の&lt;/em&gt;コードがタイミングセーフであることは保証されません。周囲のコードがタイミングの脆弱性を引き起こさないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2d44bc65ec8f3fb2f025187a40ecd2da6969c33" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;readable.push('')&lt;/code&gt; is not recommended.</source>
          <target state="translated">&lt;code&gt;readable.push('')&lt;/code&gt; の使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="d7a18f27832e42f62a26d1adff869deccc220b01" translate="yes" xml:space="preserve">
          <source>Use of the &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; API without specifying a digest was deprecated in Node.js 6.0 because the method defaulted to using the non-recommended &lt;code&gt;'SHA1'&lt;/code&gt; digest. Previously, a deprecation warning was printed. Starting in Node.js 8.0.0, calling &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; or &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; with &lt;code&gt;digest&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt;メソッドは非推奨使用にデフォルト設定するので、ダイジェストを指定せずにAPIは、Node.jsの6.0で廃止されました &lt;code&gt;'SHA1'&lt;/code&gt; ダイジェスト。以前は、非推奨の警告が出力されていました。Node.js 8.0.0以降、 &lt;code&gt;digest&lt;/code&gt; を &lt;code&gt;undefined&lt;/code&gt; に設定して &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; または &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; を呼び出すと、 &lt;code&gt;TypeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="d7240b7777dbbea1e8a1ef48b75d9dcfb9881251" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;101&lt;/code&gt; Informational status code is forbidden in HTTP/2.</source>
          <target state="translated">HTTP / 2では、 &lt;code&gt;101&lt;/code&gt; 情報ステータスコードの使用は禁止されています。</target>
        </trans-unit>
        <trans-unit id="e598d7c6a0b9a276ca5b3bfcb5495de0f13c1ad6" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; Function</source>
          <target state="translated">使用 &lt;code&gt;completer&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="d093439750831928b8de4711644263144b0afd9f" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; function</source>
          <target state="translated">使用 &lt;code&gt;completer&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="7d32435c7a197f2836dfd3532944c2482f4fd236" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;readable.pipe()&lt;/code&gt; method is recommended for most users as it has been implemented to provide the easiest way of consuming stream data. Developers that require more fine-grained control over the transfer and generation of data can use the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;readable.on('readable')&lt;/code&gt;/&lt;code&gt;readable.read()&lt;/code&gt; or the &lt;code&gt;readable.pause()&lt;/code&gt;/&lt;code&gt;readable.resume()&lt;/code&gt; APIs.</source>
          <target state="translated">使用 &lt;code&gt;readable.pipe()&lt;/code&gt; メソッドは、ストリームデータを消費する最も簡単な方法を提供するために実装されているように、ほとんどのユーザーにお勧めします。データの転送及び生成をより細かく制御を必要とする開発者が使用することができる&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;readable.on('readable')&lt;/code&gt; / &lt;code&gt;readable.read()&lt;/code&gt; または &lt;code&gt;readable.pause()&lt;/code&gt; / &lt;code&gt;readable.resume()&lt;/code&gt; APIを。</target>
        </trans-unit>
        <trans-unit id="51dda8e8d6b44f5c574aaf42f7777da76a59fa0f" translate="yes" xml:space="preserve">
          <source>Use of the API is unsafe.</source>
          <target state="translated">APIの使用は安全ではありません。</target>
        </trans-unit>
        <trans-unit id="948edf4448016b2dd50434fa23064801c2a1cb22" translate="yes" xml:space="preserve">
          <source>Use of the legacy &lt;code&gt;url.parse()&lt;/code&gt; method is discouraged. Users should use the WHATWG &lt;code&gt;URL&lt;/code&gt; API. Because the &lt;code&gt;url.parse()&lt;/code&gt; method uses a lenient, non-standard algorithm for parsing URL strings, security issues can be introduced. Specifically, issues with &lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;host name spoofing&lt;/a&gt; and incorrect handling of usernames and passwords have been identified.</source>
          <target state="translated">従来の &lt;code&gt;url.parse()&lt;/code&gt; メソッドの使用はお勧めしません。ユーザーはWHATWG使用する必要がある &lt;code&gt;URL&lt;/code&gt; のAPIを。ので &lt;code&gt;url.parse()&lt;/code&gt; メソッドは、URL文字列を解析するための寛大な、非標準的なアルゴリズムを使用して、セキュリティ上の問題を導入することができます。具体的には、&lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;ホスト名のなりすまし&lt;/a&gt;やユーザー名とパスワードの誤った処理に関する問題が特定されています。</target>
        </trans-unit>
        <trans-unit id="ecb58157819114bf578e605246aad486b041e117" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">この事前に割り当てられた内部メモリプールの使用は、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; と &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; の呼び出しの主な違いです。具体的には、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; は内部 &lt;code&gt;Buffer&lt;/code&gt; プールを使用し&lt;em&gt;ません&lt;/em&gt;が、 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;size&lt;/code&gt; が&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; の&lt;/a&gt;半分以下の場合、内部 &lt;code&gt;Buffer&lt;/code&gt; プール&lt;em&gt;を&lt;/em&gt;使用します。違いはわずかですが、アプリケーションが&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; が&lt;/a&gt;提供する追加のパフォーマンスを必要とする場合に重要になる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e255a577e807bc002dfb0d84533a52b730e80888" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">この事前に割り当てられた内部メモリプールの使用は、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; と &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; の呼び出しの主な違いです。具体的には、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; は内部 &lt;code&gt;Buffer&lt;/code&gt; プールを使用し&lt;em&gt;ません&lt;/em&gt;が、 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;size&lt;/code&gt; が&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; の&lt;/a&gt;半分以下の場合に内部 &lt;code&gt;Buffer&lt;/code&gt; プール&lt;em&gt;を&lt;/em&gt;使用します。違いは微妙ですが、アプリケーションが&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; が&lt;/a&gt;提供する追加のパフォーマンスを必要とする場合に重要になる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7a11077ab4673062788e7639d751aef808d830d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field of a manifest to set configuration for many resources at once. The &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field works by matching resources by their segments. If a scope or resource includes &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt;, unknown specifiers will be searched for in their containing scope. The containing scope for cascading is found by recursively reducing the resource URL by removing segments for &lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;special schemes&lt;/a&gt;, keeping trailing &lt;code&gt;&quot;/&quot;&lt;/code&gt; suffixes, and removing the query and hash fragment. This leads to the eventual reduction of the URL to its origin. If the URL is non-special the scope will be located by the URL's origin. If no scope is found for the origin or in the case of opaque origins, a protocol string can be used as a scope.</source>
          <target state="translated">マニフェストの &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; フィールドを使用して、一度に多くのリソースの構成を設定します。 &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; フィールドには、そのセグメントによってリソースを照合することによって動作します。スコープまたはリソースに &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt; 含まれている場合：true、不明な指定子は、含まれているスコープで検索されます。カスケードの包含スコープは、&lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;特別なスキームの&lt;/a&gt;セグメントを削除し、末尾の &lt;code&gt;&quot;/&quot;&lt;/code&gt; サフィックスを保持し、クエリとハッシュフラグメントを削除することにより、リソースURLを再帰的に削減することで見つかります。これにより、最終的にURLが元の場所に縮小されます。 URLが特別でない場合、スコープはURLの発信元によって検索されます。原点のスコープが見つからない場合、または不透明な原点の場合は、プロトコル文字列をスコープとして使用できます。</target>
        </trans-unit>
        <trans-unit id="4c412511e5a0d8bdf92bc274feb5291adda3aa57" translate="yes" xml:space="preserve">
          <source>Use the dynamically loaded pointer to invoke the function.</source>
          <target state="translated">関数を呼び出すには、動的にロードされたポインタを使用します。</target>
        </trans-unit>
        <trans-unit id="ae952fa27153fb5a58933981baea15f63402ec27" translate="yes" xml:space="preserve">
          <source>Use the internal &lt;code&gt;require()&lt;/code&gt; machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</source>
          <target state="translated">内部の &lt;code&gt;require()&lt;/code&gt; 機構を使用してモジュールの場所を検索しますが、モジュールをロードするのではなく、解決されたファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="15ee6e17c37012897af5f61e78384cc87974d16d" translate="yes" xml:space="preserve">
          <source>Use the specified file as a security policy.</source>
          <target state="translated">指定したファイルをセキュリティポリシーとして使用します。</target>
        </trans-unit>
        <trans-unit id="3380a8b2c6439c7c83ba160cfc5cef5210723c7c" translate="yes" xml:space="preserve">
          <source>Use this to determine what colors the terminal supports. Due to the nature of colors in terminals it is possible to either have false positives or false negatives. It depends on process information and the environment variables that may lie about what terminal is used. It is possible to pass in an &lt;code&gt;env&lt;/code&gt; object to simulate the usage of a specific terminal. This can be useful to check how specific environment settings behave.</source>
          <target state="translated">これを使用して、端末がサポートする色を決定します。端末の色の性質により、誤検知または誤検知のいずれかが発生する可能性があります。これは、使用される端末についてのプロセス情報と環境変数に依存します。特定の端末の使用をシミュレートするために &lt;code&gt;env&lt;/code&gt; オブジェクトを渡すことが可能です。これは、特定の環境設定の動作を確認するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="14e00386da63c018937b609a03a6c28267f1376b" translate="yes" xml:space="preserve">
          <source>Use-case</source>
          <target state="translated">Use-case</target>
        </trans-unit>
        <trans-unit id="076dfed9bb64ae1973f85bbafed11ff094afb9b7" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;N-API&lt;/code&gt; when &lt;code&gt;Constructor.prototype&lt;/code&gt; is not an object.</source>
          <target state="translated">&lt;code&gt;Constructor.prototype&lt;/code&gt; がオブジェクトでないときに &lt;code&gt;N-API&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="f72f4e59693c2865eebdfafc952cee36d7e9a557" translate="yes" xml:space="preserve">
          <source>Used comparison changed from Strict Equality to &lt;code&gt;Object.is()&lt;/code&gt;</source>
          <target state="translated">使用される比較がStrict Equalityから &lt;code&gt;Object.is()&lt;/code&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="db16827b1edd8cd50f51af8bc6cc80b85ac16c6d" translate="yes" xml:space="preserve">
          <source>Used comparison changed from Strict Equality to &lt;code&gt;Object.is()&lt;/code&gt;.</source>
          <target state="translated">使用される比較が &lt;code&gt;Object.is()&lt;/code&gt; からObject.is（）に変更されました。</target>
        </trans-unit>
        <trans-unit id="15e9f8f7397050b664350844dc4e6a33a7224b3d" translate="yes" xml:space="preserve">
          <source>Used generically to identify that an operation caused an out of memory condition.</source>
          <target state="translated">一般的には、操作によってメモリ不足状態が発生したことを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1e1d73a3cdadd107c1c0da0fdccf79bf1ab7ae85" translate="yes" xml:space="preserve">
          <source>Used in the &lt;code&gt;repl&lt;/code&gt; in case the old history file is used and an error occurred while trying to read and parse it.</source>
          <target state="translated">古い履歴ファイルが使用され、それを読み取って解析しようとしたときにエラーが発生した場合に、 &lt;code&gt;repl&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="f6a37aa63269784f0b4d16ef57e43eb383bb66e3" translate="yes" xml:space="preserve">
          <source>Used to handle binary data. See the &lt;a href=&quot;buffer&quot;&gt;buffer section&lt;/a&gt;.</source>
          <target state="translated">バイナリデータの処理に使用されます。&lt;a href=&quot;buffer&quot;&gt;バッファセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="121dfb0e20e51079f748b8e0a1ace5ae85b26d22" translate="yes" xml:space="preserve">
          <source>Used to identify a specific kind of internal Node.js error that should not typically be triggered by user code. Instances of this error point to an internal bug within the Node.js binary itself.</source>
          <target state="translated">一般的にユーザーコードによってトリガされるべきではない、特定の種類の Node.js 内部エラーを識別するために使用されます。このエラーのインスタンスは、Node.js バイナリ自体の内部バグを指しています。</target>
        </trans-unit>
        <trans-unit id="ce0213c2efe3eaf7abfd7af48ac8bb37a30fe5e7" translate="yes" xml:space="preserve">
          <source>Used to import modules, &lt;code&gt;JSON&lt;/code&gt;, and local files. Modules can be imported from &lt;code&gt;node_modules&lt;/code&gt;. Local modules and JSON files can be imported using a relative path (e.g. &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;./foo&lt;/code&gt;, &lt;code&gt;./bar/baz&lt;/code&gt;, &lt;code&gt;../foo&lt;/code&gt;) that will be resolved against the directory named by &lt;a href=&quot;#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt; (if defined) or the current working directory.</source>
          <target state="translated">モジュール、 &lt;code&gt;JSON&lt;/code&gt; 、ローカルファイルのインポートに使用されます。モジュールは &lt;code&gt;node_modules&lt;/code&gt; からインポートできます。ローカルモジュールとJSONファイルは、相対パスを使用してインポートすることができます（例： &lt;code&gt;./&lt;/code&gt; 、 &lt;code&gt;./foo&lt;/code&gt; 、 &lt;code&gt;./bar/baz&lt;/code&gt; 、 &lt;code&gt;../foo&lt;/code&gt; ）で指定されたディレクトリに対して解決されます&lt;a href=&quot;#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; &lt;/a&gt;（定義されている場合）または現在の作業ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="fa8901f3c2c158cdcada361a79f96ed53f062e7a" translate="yes" xml:space="preserve">
          <source>Used to import modules, &lt;code&gt;JSON&lt;/code&gt;, and local files. Modules can be imported from &lt;code&gt;node_modules&lt;/code&gt;. Local modules and JSON files can be imported using a relative path (e.g. &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;./foo&lt;/code&gt;, &lt;code&gt;./bar/baz&lt;/code&gt;, &lt;code&gt;../foo&lt;/code&gt;) that will be resolved against the directory named by &lt;a href=&quot;#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt; (if defined) or the current working directory. The relative paths of POSIX style are resolved in an OS independent fashion, meaning that the examples above will work on Windows in the same way they would on Unix systems.</source>
          <target state="translated">モジュール、 &lt;code&gt;JSON&lt;/code&gt; 、およびローカルファイルをインポートするために使用されます。モジュールは &lt;code&gt;node_modules&lt;/code&gt; からインポートできます。ローカルモジュールとJSONファイルは、相対パスを使用してインポートすることができます（例： &lt;code&gt;./&lt;/code&gt; 、 &lt;code&gt;./foo&lt;/code&gt; 、 &lt;code&gt;./bar/baz&lt;/code&gt; 、 &lt;code&gt;../foo&lt;/code&gt; ）で指定されたディレクトリに対して解決されます&lt;a href=&quot;#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; &lt;/a&gt;（定義されている場合）または現在の作業ディレクトリ。POSIXスタイルの相対パスは、OSに依存しない方法で解決されます。つまり、上記の例は、Unixシステムと同じようにWindowsでも機能します。</target>
        </trans-unit>
        <trans-unit id="8051e6f08f0917697ec0c2567547cefbbb345f70" translate="yes" xml:space="preserve">
          <source>Used to prevent an abort if a string decoder was set on the Socket.</source>
          <target state="translated">ソケットに文字列デコーダが設定されている場合のアボートを防止するために使用されます。</target>
        </trans-unit>
        <trans-unit id="24a89de7a287742d4f61724e35de45c6f674e19c" translate="yes" xml:space="preserve">
          <source>Used to print to stdout and stderr. See the &lt;a href=&quot;console&quot;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">stdoutおよびstderrへの出力に使用されます。&lt;a href=&quot;console&quot;&gt; &lt;code&gt;console&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4da4cffb302360787d219a0d7461f4f5f41ed1b7" translate="yes" xml:space="preserve">
          <source>Used to set a callback function that is called when there is no activity on the &lt;code&gt;Http2Session&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds. The given &lt;code&gt;callback&lt;/code&gt; is registered as a listener on the &lt;code&gt;'timeout'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;msecs&lt;/code&gt; 秒ミリ秒後に &lt;code&gt;Http2Session&lt;/code&gt; にアクティビティがないときに呼び出されるコールバック関数を設定するために使用されます。指定された &lt;code&gt;callback&lt;/code&gt; は、 &lt;code&gt;'timeout'&lt;/code&gt; イベントのリスナーとして登録されます。</target>
        </trans-unit>
        <trans-unit id="d6092c257f3fe7fbcae918b9f10d3f9f4b59efd5" translate="yes" xml:space="preserve">
          <source>Used to set the timeout value for http2 secure server requests, and sets a callback function that is called when there is no activity on the &lt;code&gt;Http2SecureServer&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds.</source>
          <target state="translated">http2セキュアサーバーリクエストのタイムアウト値を設定するために使用され、 &lt;code&gt;msecs&lt;/code&gt; 秒ミリ秒後に &lt;code&gt;Http2SecureServer&lt;/code&gt; にアクティビティがないときに呼び出されるコールバック関数を設定します。</target>
        </trans-unit>
        <trans-unit id="6099d205b5ac90f16eaba84f09879638c543bdb1" translate="yes" xml:space="preserve">
          <source>Used to set the timeout value for http2 server requests, and sets a callback function that is called when there is no activity on the &lt;code&gt;Http2Server&lt;/code&gt; after &lt;code&gt;msecs&lt;/code&gt; milliseconds.</source>
          <target state="translated">http2サーバー要求のタイムアウト値を設定するために使用され、 &lt;code&gt;msecs&lt;/code&gt; 秒ミリ秒後に &lt;code&gt;Http2Server&lt;/code&gt; にアクティビティがないときに呼び出されるコールバック関数を設定します。</target>
        </trans-unit>
        <trans-unit id="cf089c5d65bc1c1b020815a919861fac22a741cc" translate="yes" xml:space="preserve">
          <source>Used to update the server with the provided settings.</source>
          <target state="translated">提供された設定でサーバーを更新するために使用します。</target>
        </trans-unit>
        <trans-unit id="8a9e06ca05bd0b8449a2a685aa272bd3371a92a9" translate="yes" xml:space="preserve">
          <source>Used when a TLS renegotiation request has failed in a non-specific way.</source>
          <target state="translated">TLS の再ネゴシエーション要求が非特異的な方法で失敗した場合に使用される。</target>
        </trans-unit>
        <trans-unit id="a98d52897ccd48ecb3e15ea244dd351b3da000ab" translate="yes" xml:space="preserve">
          <source>Used when a child process is being forked without specifying an IPC channel.</source>
          <target state="translated">IPC チャネルを指定せずに子プロセスをフォークしている場合に使用します。</target>
        </trans-unit>
        <trans-unit id="1794600a519f16a59864bcb7c5c177b882aefaec" translate="yes" xml:space="preserve">
          <source>Used when a failure occurs sending an individual frame on the HTTP/2 session.</source>
          <target state="translated">HTTP/2 セッションで個別フレームの送信に失敗した場合に使用します。</target>
        </trans-unit>
        <trans-unit id="4abe7a2e8fd5924bf7dbdcead54c7db33c5f705e" translate="yes" xml:space="preserve">
          <source>Used when a feature that is not available to the current platform which is running Node.js is used.</source>
          <target state="translated">Node.jsが動作している現在のプラットフォームでは利用できない機能を利用する場合に使用します。</target>
        </trans-unit>
        <trans-unit id="61c5e151234f65531c9bcb06fcbd6d0a3e18e2c5" translate="yes" xml:space="preserve">
          <source>Used when a given value is out of the accepted range.</source>
          <target state="translated">指定された値が許容範囲外の場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="0845a17575717bce690fdf146f5a3dc7aca2d779" translate="yes" xml:space="preserve">
          <source>Used when a required header is missing in an HTTP/2 message.</source>
          <target state="translated">HTTP/2 メッセージに必須のヘッダがない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="9467d12ac92740faa32b731bd21160bacd588f2c" translate="yes" xml:space="preserve">
          <source>Used when an &lt;a href=&quot;esm&quot;&gt;ES Module&lt;/a&gt; loader hook specifies &lt;code&gt;format: 'dynamic'&lt;/code&gt; but does not provide a &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook.</source>
          <target state="translated">&lt;a href=&quot;esm&quot;&gt;ESモジュール&lt;/a&gt;ローダーフックが &lt;code&gt;format: 'dynamic'&lt;/code&gt; 指定しているが、 &lt;code&gt;dynamicInstantiate&lt;/code&gt; フックを提供していない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="1b24d21ed4c6621caddd9f321ae8b6a469e204be" translate="yes" xml:space="preserve">
          <source>Used when an HTTP/2 Headers Object is expected.</source>
          <target state="translated">HTTP/2ヘッダオブジェクトが期待される場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b918d798cee5f2a6e9c8d72f61abe8eb608f5d3f" translate="yes" xml:space="preserve">
          <source>Used when an action has been performed on an HTTP/2 Stream that has already been closed.</source>
          <target state="translated">すでに閉じられているHTTP/2ストリームに対してアクションが実行された場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="23bd3e8d7b3edf9e72a7c01d81c202ff7d9bedc0" translate="yes" xml:space="preserve">
          <source>Used when an attempt is made to use a &lt;code&gt;zlib&lt;/code&gt; object after it has already been closed.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; オブジェクトが既に閉じられた後で使用しようとしたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="664c1b2e71185319ae6e8b3d421c03ad9ceaa149" translate="yes" xml:space="preserve">
          <source>Used when an attempt is made to use a readable stream that has not implemented &lt;a href=&quot;stream#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stream#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; を&lt;/a&gt;実装していない読み取り可能なストリームを使用しようとしたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="c6832c2b5ead9c19cb61232927aae0d3eaeaef49" translate="yes" xml:space="preserve">
          <source>Used when an invalid character is found in an HTTP response status message (reason phrase).</source>
          <target state="translated">HTTP 応答ステータスメッセージ(理由フレーズ)に無効な文字が見つかった場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="3fb26f283a60b38e80c873a606c7a370e1e92380" translate="yes" xml:space="preserve">
          <source>Used when an operation has been aborted (typically using an &lt;code&gt;AbortController&lt;/code&gt;).</source>
          <target state="translated">操作が中止されたときに使用されます（通常は &lt;code&gt;AbortController&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="429695ecac5f7fdb897661f9a315b10c325303e4" translate="yes" xml:space="preserve">
          <source>Used when the main process is trying to read data from the child process's STDERR/STDOUT, and the data's length is longer than the &lt;code&gt;maxBuffer&lt;/code&gt; option.</source>
          <target state="translated">メインプロセスが子プロセスのSTDERR / STDOUTからデータを読み取ろうとしているときに、データの長さが &lt;code&gt;maxBuffer&lt;/code&gt; オプションより長い場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="d86017044b62d046dd7d3f8a998cad704c8b25df" translate="yes" xml:space="preserve">
          <source>Used with &lt;code&gt;--experimental-modules&lt;/code&gt;, this configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; とともに使用すると、これはNode.jsを構成して、文字列入力をCommonJSまたはESモジュールとして解釈します。文字列の入力は、を介して入力される &lt;code&gt;--eval&lt;/code&gt; 、 &lt;code&gt;--print&lt;/code&gt; 、または &lt;code&gt;STDIN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbdf0f773f2695d034eda295b87b8838ae8922ee" translate="yes" xml:space="preserve">
          <source>Useful V8 options</source>
          <target state="translated">便利なV8オプション</target>
        </trans-unit>
        <trans-unit id="2ae2f04ad43660c25b4e8672a9f94dac65a9177d" translate="yes" xml:space="preserve">
          <source>User Timing</source>
          <target state="translated">ユーザータイミング</target>
        </trans-unit>
        <trans-unit id="25616a502c1bbb6bbe041649df7e3295c2d10d6d" translate="yes" xml:space="preserve">
          <source>User code will not construct &lt;code&gt;Http2Stream&lt;/code&gt; instances directly. Rather, these are created, managed, and provided to user code through the &lt;code&gt;Http2Session&lt;/code&gt; instance. On the server, &lt;code&gt;Http2Stream&lt;/code&gt; instances are created either in response to an incoming HTTP request (and handed off to user code via the &lt;code&gt;'stream'&lt;/code&gt; event), or in response to a call to the &lt;code&gt;http2stream.pushStream()&lt;/code&gt; method. On the client, &lt;code&gt;Http2Stream&lt;/code&gt; instances are created and returned when either the &lt;code&gt;http2session.request()&lt;/code&gt; method is called, or in response to an incoming &lt;code&gt;'push'&lt;/code&gt; event.</source>
          <target state="translated">ユーザーコードは &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスを直接構築しません。むしろ、これらは作成され、管理され、 &lt;code&gt;Http2Session&lt;/code&gt; インスタンスを通じてユーザーコードに提供されます。サーバー上で、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスは、着信HTTPリクエストへの応答（および &lt;code&gt;'stream'&lt;/code&gt; イベントを介してユーザーコードに渡される）、または &lt;code&gt;http2stream.pushStream()&lt;/code&gt; メソッドの呼び出しへの応答として作成されます。クライアントでは、 &lt;code&gt;http2session.request()&lt;/code&gt; メソッドが呼び出されたとき、または着信 &lt;code&gt;'push'&lt;/code&gt; イベントに応答して、 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが作成されて返されます。</target>
        </trans-unit>
        <trans-unit id="39f51fc9e130a165a9061ccc184b4da818b4ea69" translate="yes" xml:space="preserve">
          <source>User code will not create &lt;code&gt;Http2Session&lt;/code&gt; instances directly. Server-side &lt;code&gt;Http2Session&lt;/code&gt; instances are created by the &lt;code&gt;Http2Server&lt;/code&gt; instance when a new HTTP/2 connection is received. Client-side &lt;code&gt;Http2Session&lt;/code&gt; instances are created using the &lt;code&gt;http2.connect()&lt;/code&gt; method.</source>
          <target state="translated">ユーザーコードは &lt;code&gt;Http2Session&lt;/code&gt; インスタンスを直接作成しません。サーバー側の &lt;code&gt;Http2Session&lt;/code&gt; インスタンスは、新しいHTTP / 2接続を受信したときに &lt;code&gt;Http2Server&lt;/code&gt; インスタンスによって作成されます。クライアント側の &lt;code&gt;Http2Session&lt;/code&gt; インスタンスは、 &lt;code&gt;http2.connect()&lt;/code&gt; メソッドを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="fddae98305cdd05d2b80966abde1a85c4a0cb970" translate="yes" xml:space="preserve">
          <source>User code will typically not listen for this event directly.</source>
          <target state="translated">ユーザーコードは通常、このイベントを直接リッスンすることはありません。</target>
        </trans-unit>
        <trans-unit id="fe593d151fbd8534d3e17f4a715524cf5537157f" translate="yes" xml:space="preserve">
          <source>User defined prototype properties are inspected in case &lt;code&gt;showHidden&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;showHidden&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、ユーザー定義のプロトタイププロパティが検査されます。</target>
        </trans-unit>
        <trans-unit id="e44d414f4523cb0020fa3bb9ef006880758d42a0" translate="yes" xml:space="preserve">
          <source>User-specified errors triggered by application code.</source>
          <target state="translated">アプリケーションコードによって引き起こされるユーザー指定のエラー。</target>
        </trans-unit>
        <trans-unit id="7006cd764ba16178062bfab50e81a707bc1f87ed" translate="yes" xml:space="preserve">
          <source>Users are able to define their own &lt;code&gt;type&lt;/code&gt; when using the public embedder API.</source>
          <target state="translated">パブリックエンベッダーAPIを使用する場合、ユーザーは独自の &lt;code&gt;type&lt;/code&gt; を定義できます。</target>
        </trans-unit>
        <trans-unit id="cf5ef9d00cdafe23ad10052c62fc3a82ffe4cd3c" translate="yes" xml:space="preserve">
          <source>Users of &lt;code&gt;MakeCallback&lt;/code&gt; that add the &lt;code&gt;domain&lt;/code&gt; property to carry context, should start using the &lt;code&gt;async_context&lt;/code&gt; variant of &lt;code&gt;MakeCallback&lt;/code&gt; or &lt;code&gt;CallbackScope&lt;/code&gt;, or the high-level &lt;code&gt;AsyncResource&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; プロパティを追加してコンテキストを運ぶ &lt;code&gt;MakeCallback&lt;/code&gt; のユーザーは、 &lt;code&gt;MakeCallback&lt;/code&gt; または &lt;code&gt;CallbackScope&lt;/code&gt; の &lt;code&gt;async_context&lt;/code&gt; バリアント、または高レベルの &lt;code&gt;AsyncResource&lt;/code&gt; クラスの使用を開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="76bd16f83da4c24b980d59d68158565cc72444d4" translate="yes" xml:space="preserve">
          <source>Users should take full responsibility for selecting the crypto algorithm and key size according to their security requirements.</source>
          <target state="translated">ユーザーは、セキュリティ要件に応じて暗号アルゴリズムとキーサイズを選択するために全責任を負うべきである。</target>
        </trans-unit>
        <trans-unit id="125395920a5c21bcd712ff46c895d10dd8989f5b" translate="yes" xml:space="preserve">
          <source>Users who experience large or growing &lt;code&gt;bufferSize&lt;/code&gt; should attempt to &quot;throttle&quot; the data flows in their program with &lt;a href=&quot;#net_socket_pause&quot;&gt;&lt;code&gt;socket.pause()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#net_socket_resume&quot;&gt;&lt;code&gt;socket.resume()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;bufferSize&lt;/code&gt; が大きい、または増大しているユーザーは、&lt;a href=&quot;#net_socket_pause&quot;&gt; &lt;code&gt;socket.pause()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#net_socket_resume&quot;&gt; &lt;code&gt;socket.resume()&lt;/code&gt; &lt;/a&gt;を使用して、プログラム内のデータフローを「抑制」する必要があります。</target>
        </trans-unit>
        <trans-unit id="c441c245c026869fc42a7d133264a863c02ddd56" translate="yes" xml:space="preserve">
          <source>Users will not create instances of &lt;code&gt;QuicEndpoint&lt;/code&gt; directly.</source>
          <target state="translated">ユーザーが &lt;code&gt;QuicEndpoint&lt;/code&gt; のインスタンスを直接作成することはありません。</target>
        </trans-unit>
        <trans-unit id="c916db3f2c5f001f12fde4c7e7de18a2a34d7b3f" translate="yes" xml:space="preserve">
          <source>Users will not create instances of &lt;code&gt;QuicSession&lt;/code&gt; directly.</source>
          <target state="translated">ユーザーは &lt;code&gt;QuicSession&lt;/code&gt; のインスタンスを直接作成しません。</target>
        </trans-unit>
        <trans-unit id="f0b211e8d0fac47b645a9c120fc49ca3721fc00f" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;obj&lt;/code&gt; and prints the resulting string to &lt;code&gt;stdout&lt;/code&gt;. This function bypasses any custom &lt;code&gt;inspect()&lt;/code&gt; function defined on &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; で&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;を使用し、結果の文字列を &lt;code&gt;stdout&lt;/code&gt; に出力します。この関数は、 &lt;code&gt;obj&lt;/code&gt; で定義されたカスタム &lt;code&gt;inspect()&lt;/code&gt; 関数をバイパスします。</target>
        </trans-unit>
        <trans-unit id="8a548e7c578e9bcae5441755ca6981e1376b6940" translate="yes" xml:space="preserve">
          <source>Uses a &lt;a href=&quot;#v8_class_v8_defaultdeserializer&quot;&gt;&lt;code&gt;DefaultDeserializer&lt;/code&gt;&lt;/a&gt; with default options to read a JS value from a buffer.</source>
          <target state="translated">デフォルトのオプションで&lt;a href=&quot;#v8_class_v8_defaultdeserializer&quot;&gt; &lt;code&gt;DefaultDeserializer&lt;/code&gt; &lt;/a&gt;を使用して、バッファからJS値を読み取ります。</target>
        </trans-unit>
        <trans-unit id="ffa3ccebd075b40f80d680d211108b377dc2860c" translate="yes" xml:space="preserve">
          <source>Uses a &lt;a href=&quot;#v8_class_v8_defaultserializer&quot;&gt;&lt;code&gt;DefaultSerializer&lt;/code&gt;&lt;/a&gt; to serialize &lt;code&gt;value&lt;/code&gt; into a buffer.</source>
          <target state="translated">&lt;a href=&quot;#v8_class_v8_defaultserializer&quot;&gt; &lt;code&gt;DefaultSerializer&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;value&lt;/code&gt; をバッファーにシリアル化します。</target>
        </trans-unit>
        <trans-unit id="8c67b5925b673c832694d1ebc5382ae5e3763bab" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CAA&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects containing available certification authority authorization records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; &lt;code&gt;CAA&lt;/code&gt; レコードを解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は、 &lt;code&gt;hostname&lt;/code&gt; 使用可能な認証局承認レコードを含むオブジェクトの配列で解決されます（例： &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="09d6517df50af67360f17bc302c32dc5e4d01ecd" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CAA&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of certification authority authorization records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; &lt;code&gt;CAA&lt;/code&gt; レコードを解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数がために利用可能な認証局の許可レコードの配列が含まれています &lt;code&gt;hostname&lt;/code&gt; （例： &lt;code&gt;[{critial: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3e77d28cd7b2015b232d52aaadac17eb6a30ee01" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CNAME&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of canonical name records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['bar.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; &lt;code&gt;CNAME&lt;/code&gt; レコードを解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;hostname&lt;/code&gt; 使用できる正規名レコードの配列で解決されます（例： &lt;code&gt;['bar.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bb68d3eb1bfdcd227e65a5b4689509e2b0fe739c" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve &lt;code&gt;CNAME&lt;/code&gt; records for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of canonical name records available for the &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['bar.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; &lt;code&gt;CNAME&lt;/code&gt; レコードを解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 正規名の配列を入れる機能が利用できるために記録し &lt;code&gt;hostname&lt;/code&gt; （例： &lt;code&gt;['bar.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="13e7d8dc5961f06bdcab36b2aa9dd7f9b7f85a28" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve IPv4 addresses (&lt;code&gt;A&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of IPv4 addresses (e.g. &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; IPv4アドレス（ &lt;code&gt;A&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; はIPv4アドレスの配列で解決されます（例： &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0c48d5cd8409e2e76101eadd1fce8d4f40ef0330" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve IPv6 addresses (&lt;code&gt;AAAA&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of IPv6 addresses.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; IPv6アドレス（ &lt;code&gt;AAAA&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は一連のIPv6アドレスで解決されます。</target>
        </trans-unit>
        <trans-unit id="66301e6000e1db09536b4bdae064e2b5fa0494b8" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a IPv4 addresses (&lt;code&gt;A&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of IPv4 addresses (e.g. &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の IPv4アドレス（ &lt;code&gt;A&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 機能は、IPv4アドレスの配列を含んでいます（例えば &lt;code&gt;['74.125.79.104', '74.125.79.105', '74.125.79.106']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="11d194e2b3963c1420f88e04b7c8db00b6ab9e52" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a IPv6 addresses (&lt;code&gt;AAAA&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of IPv6 addresses.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の IPv6アドレス（ &lt;code&gt;AAAA&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 機能は、IPv6アドレスの配列を含んでいます。</target>
        </trans-unit>
        <trans-unit id="b9e411c1d095a916a43fc5af2efc5891cd2e489d" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a host name (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. The &lt;code&gt;callback&lt;/code&gt; function has arguments &lt;code&gt;(err, records)&lt;/code&gt;. When successful, &lt;code&gt;records&lt;/code&gt; will be an array of resource records. The type and structure of individual results varies based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（例： &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。 &lt;code&gt;callback&lt;/code&gt; 関数は、引数を持っている &lt;code&gt;(err, records)&lt;/code&gt; 。成功すると、 &lt;code&gt;records&lt;/code&gt; はリソースレコードの配列になります。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="0d8e2cf4737608f9a6c0665ab07ec0fd30414f31" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a host name (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. When successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of resource records. The type and structure of individual results vary based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（例： &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; はリソースレコードの配列で解決されます。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="ca7ed788165420143fc03ed1657a6c888a22a6f3" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a hostname (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. The &lt;code&gt;callback&lt;/code&gt; function has arguments &lt;code&gt;(err, records)&lt;/code&gt;. When successful, &lt;code&gt;records&lt;/code&gt; will be an array of resource records. The type and structure of individual results varies based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（ &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。 &lt;code&gt;callback&lt;/code&gt; 関数は、引数を持っている &lt;code&gt;(err, records)&lt;/code&gt; 。成功すると、 &lt;code&gt;records&lt;/code&gt; はリソースレコードの配列になります。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; に基づいて異なります。</target>
        </trans-unit>
        <trans-unit id="b416ceeaa487d3b737e0905aac04cace17b4a344" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a hostname (e.g. &lt;code&gt;'nodejs.org'&lt;/code&gt;) into an array of the resource records. When successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of resource records. The type and structure of individual results vary based on &lt;code&gt;rrtype&lt;/code&gt;:</source>
          <target state="translated">DNSプロトコルを使用して、ホスト名（ &lt;code&gt;'nodejs.org'&lt;/code&gt; ）をリソースレコードの配列に解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は一連のリソースレコードで解決されます。個々の結果のタイプと構造は、 &lt;code&gt;rrtype&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="5a5f278be9d05db0c31bebe95c9e1802d584b324" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a start of authority record (&lt;code&gt;SOA&lt;/code&gt; record) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an object with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の機関レコードの開始（ &lt;code&gt;SOA&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は次のプロパティを持つオブジェクトで解決されます。</target>
        </trans-unit>
        <trans-unit id="7b9a78a34b578f971014342e21ffa69021b10337" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve a start of authority record (&lt;code&gt;SOA&lt;/code&gt; record) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;address&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an object with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の機関レコードの開始（ &lt;code&gt;SOA&lt;/code&gt; レコード）を解決します。 &lt;code&gt;address&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、次のプロパティを持つオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="1d74ad0a633112cf81a8691b4596126feb4dd586" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve all records (also known as &lt;code&gt;ANY&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; query). On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array containing various types of records. Each object has a property &lt;code&gt;type&lt;/code&gt; that indicates the type of the current record. And depending on the &lt;code&gt;type&lt;/code&gt;, additional properties will be present on the object:</source>
          <target state="translated">DNSプロトコルを使用してすべてのレコードを解決します（ &lt;code&gt;ANY&lt;/code&gt; または &lt;code&gt;*&lt;/code&gt; クエリとも呼ばれます）。成功すると、 &lt;code&gt;Promise&lt;/code&gt; はさまざまなタイプのレコードを含む配列で解決されます。各オブジェクトには、現在のレコードの &lt;code&gt;type&lt;/code&gt; を示すプロパティタイプがあります。 &lt;code&gt;type&lt;/code&gt; に応じて、追加のプロパティがオブジェクトに存在します。</target>
        </trans-unit>
        <trans-unit id="91e1407dc9084d4aaa922119e46c0bce323d3dc6" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve all records (also known as &lt;code&gt;ANY&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; query). The &lt;code&gt;ret&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array containing various types of records. Each object has a property &lt;code&gt;type&lt;/code&gt; that indicates the type of the current record. And depending on the &lt;code&gt;type&lt;/code&gt;, additional properties will be present on the object:</source>
          <target state="translated">DNSプロトコルを使用してすべてのレコードを解決します（ &lt;code&gt;ANY&lt;/code&gt; または &lt;code&gt;*&lt;/code&gt; クエリとも呼ばれます）。 &lt;code&gt;ret&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、レコードの様々なタイプを含む配列となります。各オブジェクトには、現在のレコードの &lt;code&gt;type&lt;/code&gt; を示すプロパティタイプがあります。 &lt;code&gt;type&lt;/code&gt; に応じて、追加のプロパティがオブジェクトに存在します。</target>
        </trans-unit>
        <trans-unit id="30c274b11b43436ca8e50e4b9bb064ebfa8da047" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve mail exchange records (&lt;code&gt;MX&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects containing both a &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;exchange&lt;/code&gt; property (e.g. &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; メール交換レコード（ &lt;code&gt;MX&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;priority&lt;/code&gt; と &lt;code&gt;exchange&lt;/code&gt; プロパティの両方を含むオブジェクトの配列で解決されます（例： &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="109d6398fcfc69ceb7fa119270ab376ba6aa392e" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve mail exchange records (&lt;code&gt;MX&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of objects containing both a &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;exchange&lt;/code&gt; property (e.g. &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; メール交換レコード（ &lt;code&gt;MX&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、両方を含むオブジェクトの配列を含むであろう &lt;code&gt;priority&lt;/code&gt; と &lt;code&gt;exchange&lt;/code&gt; 性（例えば &lt;code&gt;[{priority: 10, exchange: 'mx.example.com'}, ...]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="dc59fbd604c9eff0af9fa4244d01a2d19d4bd02a" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve name server records (&lt;code&gt;NS&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of name server records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; ネームサーバーレコード（ &lt;code&gt;NS&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;hostname&lt;/code&gt; 使用可能なネームサーバーレコードの配列で解決されます（例： &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="a484c1ce770c84e5d673e21b1f4c11f303be390f" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve name server records (&lt;code&gt;NS&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of name server records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt;).</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; ネームサーバーレコード（ &lt;code&gt;NS&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数がために利用可能なネームサーバーレコードの配列が含まれます &lt;code&gt;hostname&lt;/code&gt; （例えば &lt;code&gt;['ns1.example.com', 'ns2.example.com']&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5f701aceb1092a30bfd015c6bc287c6570a19d1b" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve pointer records (&lt;code&gt;PTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of strings containing the reply records.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; のポインターレコード（ &lt;code&gt;PTR&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は応答レコードを含む文字列の配列で解決されます。</target>
        </trans-unit>
        <trans-unit id="51cf59a347f4849fe20aa2233c19cbb8407512e2" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve pointer records (&lt;code&gt;PTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array of strings containing the reply records.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; のポインターレコード（ &lt;code&gt;PTR&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、応答レコードを含む文字列の配列になります。</target>
        </trans-unit>
        <trans-unit id="3c00d6863ed2c84283db0b45a7fe5c8f979162e0" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve regular expression based records (&lt;code&gt;NAPTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の正規表現ベースのレコード（ &lt;code&gt;NAPTR&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は次のプロパティを持つオブジェクトの配列で解決されます。</target>
        </trans-unit>
        <trans-unit id="dbf18146ec8d0d15c5714fd4e604aee38719c40f" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve regular expression based records (&lt;code&gt;NAPTR&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will contain an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; の正規表現ベースのレコード（ &lt;code&gt;NAPTR&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、次のプロパティを持つオブジェクトの配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="f6fadfed87100de6310ccfb92dbee96e3e654ff8" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve service records (&lt;code&gt;SRV&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; サービスレコード（ &lt;code&gt;SRV&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は次のプロパティを持つオブジェクトの配列で解決されます。</target>
        </trans-unit>
        <trans-unit id="73c844bbadf29a730e5b2f6bec825acea856f5b3" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve service records (&lt;code&gt;SRV&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;addresses&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function will be an array of objects with the following properties:</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; サービスレコード（ &lt;code&gt;SRV&lt;/code&gt; レコード）を解決します。 &lt;code&gt;addresses&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、次のプロパティを持つオブジェクトの配列になります。</target>
        </trans-unit>
        <trans-unit id="c1829d47cc7a75e0eab657043bb6bf54db2a3b9d" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve text queries (&lt;code&gt;TXT&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. On success, the &lt;code&gt;Promise&lt;/code&gt; is resolved with a two-dimensional array of the text records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt;). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; テキストクエリ（ &lt;code&gt;TXT&lt;/code&gt; レコード）を解決します。成功すると、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;hostname&lt;/code&gt; 使用可能なテキストレコードの2次元配列で解決されます（例 &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt; ）。各サブ配列には、1つのレコードのTXTチャンクが含まれています。ユースケースに応じて、これらを結合するか、個別に処理することができます。</target>
        </trans-unit>
        <trans-unit id="d9d9bd15a950f14f1ee431ff23ce67682340f14c" translate="yes" xml:space="preserve">
          <source>Uses the DNS protocol to resolve text queries (&lt;code&gt;TXT&lt;/code&gt; records) for the &lt;code&gt;hostname&lt;/code&gt;. The &lt;code&gt;records&lt;/code&gt; argument passed to the &lt;code&gt;callback&lt;/code&gt; function is a two-dimensional array of the text records available for &lt;code&gt;hostname&lt;/code&gt; (e.g. &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt;). Each sub-array contains TXT chunks of one record. Depending on the use case, these could be either joined together or treated separately.</source>
          <target state="translated">DNSプロトコルを使用して、 &lt;code&gt;hostname&lt;/code&gt; テキストクエリ（ &lt;code&gt;TXT&lt;/code&gt; レコード）を解決します。 &lt;code&gt;records&lt;/code&gt; に渡される引数 &lt;code&gt;callback&lt;/code&gt; 関数は、テキストの2次元配列がために利用可能な記録され &lt;code&gt;hostname&lt;/code&gt; （例えば &lt;code&gt;[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]&lt;/code&gt; ）。各サブ配列には、1つのレコードのTXTチャンクが含まれています。ユースケースに応じて、これらを結合するか、個別に処理することができます。</target>
        </trans-unit>
        <trans-unit id="616674bd4b150c64ea79003b2aaf1d39214fdf57" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile()&lt;/code&gt; and &lt;code&gt;fs.unwatchFile()&lt;/code&gt;. &lt;code&gt;fs.watch()&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile()&lt;/code&gt; and &lt;code&gt;fs.unwatchFile()&lt;/code&gt; when possible.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt; &lt;code&gt;fs.watch()&lt;/code&gt; の&lt;/a&gt;使用は、 &lt;code&gt;fs.watchFile()&lt;/code&gt; および &lt;code&gt;fs.unwatchFile()&lt;/code&gt; よりも効率的です。 &lt;code&gt;fs.watch()&lt;/code&gt; の代わりに使用されるべきである &lt;code&gt;fs.watchFile()&lt;/code&gt; と &lt;code&gt;fs.unwatchFile()&lt;/code&gt; 可能。</target>
        </trans-unit>
        <trans-unit id="7acdc60681bce725b5f723840ea2948503a011d1" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt;&lt;code&gt;fs.watch()&lt;/code&gt;&lt;/a&gt; is more efficient than &lt;code&gt;fs.watchFile&lt;/code&gt; and &lt;code&gt;fs.unwatchFile&lt;/code&gt;. &lt;code&gt;fs.watch&lt;/code&gt; should be used instead of &lt;code&gt;fs.watchFile&lt;/code&gt; and &lt;code&gt;fs.unwatchFile&lt;/code&gt; when possible.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_watch_filename_options_listener&quot;&gt; &lt;code&gt;fs.watch()&lt;/code&gt; の&lt;/a&gt;使用は、 &lt;code&gt;fs.watchFile&lt;/code&gt; および &lt;code&gt;fs.unwatchFile&lt;/code&gt; よりも効率的です。 &lt;code&gt;fs.watch&lt;/code&gt; が代わりに使用されなければならない &lt;code&gt;fs.watchFile&lt;/code&gt; と &lt;code&gt;fs.unwatchFile&lt;/code&gt; 可能。</target>
        </trans-unit>
        <trans-unit id="1d856b63c6bc2607094f4910592eaafc6767cf8e" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;crypto#crypto_crypto_createcipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createCipher()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt;&lt;code&gt;crypto.createDecipher()&lt;/code&gt;&lt;/a&gt; should be avoided as they use a weak key derivation function (MD5 with no salt) and static initialization vectors. It is recommended to derive a key using &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;crypto#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; to obtain the &lt;a href=&quot;crypto#crypto_class_cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;crypto#crypto_class_decipher&quot;&gt;&lt;code&gt;Decipher&lt;/code&gt;&lt;/a&gt; objects respectively.</source>
          <target state="translated">使用&lt;a href=&quot;crypto#crypto_crypto_createcipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createCipher()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;crypto#crypto_crypto_createdecipher_algorithm_password_options&quot;&gt; &lt;code&gt;crypto.createDecipher()&lt;/code&gt; &lt;/a&gt;それらが弱い鍵導出関数（無塩とMD5）と静的初期化ベクトルを使用するように避けるべきです。&lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt; &lt;code&gt;crypto.scrypt()&lt;/code&gt; &lt;/a&gt;を使用して鍵を導出し、&lt;a href=&quot;crypto#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createCipheriv()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;crypto#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt; &lt;code&gt;crypto.createDecipheriv()&lt;/code&gt; &lt;/a&gt;を使用してそれぞれ&lt;a href=&quot;crypto#crypto_class_cipher&quot;&gt; &lt;code&gt;Cipher&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;crypto#crypto_class_decipher&quot;&gt; &lt;code&gt;Decipher&lt;/code&gt; &lt;/a&gt;オブジェクトを取得することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4b53d1b9edfc43df645d059459c36ecb01b6cc17" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;'readable'&lt;/code&gt; requires calling &lt;code&gt;.read()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'readable'&lt;/code&gt; を使用するには、 &lt;code&gt;.read()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="a0776ba10ce280120f92b94baeeaca430daff582" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool</source>
          <target state="translated">&lt;code&gt;Worker&lt;/code&gt; スレッドプールに &lt;code&gt;AsyncResource&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="00f82cdad4ad46b131c753812c570f4c13076bc0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.doesNotReject()&lt;/code&gt; is actually not useful because there is little benefit in catching a rejection and then rejecting it again. Instead, consider adding a comment next to the specific code path that should not reject and keep error messages as expressive as possible.</source>
          <target state="translated">&lt;code&gt;assert.doesNotReject()&lt;/code&gt; を使用しても、拒否をキャッチして再度拒否するメリットはほとんどないため、実際には役に立ちません。代わりに、エラーメッセージを拒否してできるだけ表現力を持たせないようにする特定のコードパスの横にコメントを追加することを検討してください。</target>
        </trans-unit>
        <trans-unit id="3df009e595692ba82d237e1bc93633ed46c2f125" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; is actually not useful because there is no benefit in catching an error and then rethrowing it. Instead, consider adding a comment next to the specific code path that should not throw and keep error messages as expressive as possible.</source>
          <target state="translated">エラーをキャッチしてから再スローしてもメリットがないため、 &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; を使用しても実際には役に立ちません。代わりに、エラーメッセージをスローして保持するべきではない特定のコードパスの横にコメントを追加して、可能な限り表現力を高めることを検討してください。</target>
        </trans-unit>
        <trans-unit id="8a7025ea485b11ba34d71bc4d34fa0cc905dbacf" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than one argument is deprecated. Use &lt;code&gt;assert.fail()&lt;/code&gt; with only one argument or use a different &lt;code&gt;assert&lt;/code&gt; module method.</source>
          <target state="translated">複数の引数を指定した &lt;code&gt;assert.fail()&lt;/code&gt; の使用は非推奨です。使用 &lt;code&gt;assert.fail()&lt;/code&gt; 唯一の引数で、異なる使用 &lt;code&gt;assert&lt;/code&gt; モジュール方式を。</target>
        </trans-unit>
        <trans-unit id="2fab1e938204573f477a12aeb4d7d89efdf6f853" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;assert.fail()&lt;/code&gt; with more than two arguments is possible but deprecated. See below for further details.</source>
          <target state="translated">3 つ以上の引数を指定して &lt;code&gt;assert.fail()&lt;/code&gt; を使用することは可能ですが、非推奨です。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="e32aee247c3e1fa65dfda18102dd4efc4ac847de" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;async&lt;/code&gt; functions with event handlers is problematic, because it can lead to an unhandled rejection in case of a thrown exception:</source>
          <target state="translated">イベントハンドラーで &lt;code&gt;async&lt;/code&gt; 関数を使用すると、例外がスローされた場合に未処理の拒否が発生する可能性があるため、問題があります。</target>
        </trans-unit>
        <trans-unit id="1df525a3f01a20d07a7478823ea9706315ce03a1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;cleartext&lt;/code&gt; has the same API as &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cleartext&lt;/code&gt; の使用には、&lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;と同じAPIがあります。</target>
        </trans-unit>
        <trans-unit id="b83dbd9102872f7df5e6cd66317d7029d871d346" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;executionAsyncResource()&lt;/code&gt; in the top-level execution context will return an empty object as there is no handle or request object to use, but having an object representing the top-level can be helpful.</source>
          <target state="translated">使用 &lt;code&gt;executionAsyncResource()&lt;/code&gt; を使用へのハンドルまたは要求オブジェクトが存在しないように、最上位実行コンテキストでは、空のオブジェクトを返すであろうが、トップレベルを表すオブジェクトを持つことは有用であり得ます。</target>
        </trans-unit>
        <trans-unit id="014449c1eec2b95f43b792ba5e16cf560609f257" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.access()&lt;/code&gt; to check for the accessibility of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</source>
          <target state="translated">使用 &lt;code&gt;fs.access()&lt;/code&gt; を呼び出す前に、ファイルのアクセス可能性をチェックするために &lt;code&gt;fs.open()&lt;/code&gt; 、 &lt;code&gt;fs.readFile()&lt;/code&gt; または &lt;code&gt;fs.writeFile()&lt;/code&gt; 推奨されません。他のプロセスが2つの呼び出し間でファイルの状態を変更する可能性があるため、これを行うと競合状態が発生します。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルにアクセスできない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5a8a3949f23f51bf204d9b3ac70d7f2b96dab32" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.exists()&lt;/code&gt; to check for the existence of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.</source>
          <target state="translated">使用 &lt;code&gt;fs.exists()&lt;/code&gt; を呼び出す前に、ファイルの存在を確認する &lt;code&gt;fs.open()&lt;/code&gt; 、 &lt;code&gt;fs.readFile()&lt;/code&gt; または &lt;code&gt;fs.writeFile()&lt;/code&gt; は推奨されません。他のプロセスが2つの呼び出し間でファイルの状態を変更する可能性があるため、これを行うと競合状態が発生します。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルが存在しない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="970e60822303aa19d5df0e3b029d9e1d8c3b3bec" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.rmdir()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">ファイル（ディレクトリではない &lt;code&gt;fs.rmdir()&lt;/code&gt; でfs.rmdir（）を使用すると、Windowsでは &lt;code&gt;ENOENT&lt;/code&gt; エラーが発生し、POSIXでは &lt;code&gt;ENOTDIR&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="bf6ef6db0ae8640548b812e024c0fa7a48f1c482" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.rmdirSync()&lt;/code&gt; on a file (not a directory) results in an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">ファイル（ディレクトリではない &lt;code&gt;fs.rmdirSync()&lt;/code&gt; でfs.rmdirSync（）を使用すると、Windowsでは &lt;code&gt;ENOENT&lt;/code&gt; エラーが発生し、POSIXでは &lt;code&gt;ENOTDIR&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a9f914be0f6e22f62b0aedd8bc70861ee2deabaa" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.stat()&lt;/code&gt; to check for the existence of a file before calling &lt;code&gt;fs.open()&lt;/code&gt;, &lt;code&gt;fs.readFile()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.</source>
          <target state="translated">使用 &lt;code&gt;fs.stat()&lt;/code&gt; を呼び出す前に、ファイルの存在を確認するために &lt;code&gt;fs.open()&lt;/code&gt; 、 &lt;code&gt;fs.readFile()&lt;/code&gt; または &lt;code&gt;fs.writeFile()&lt;/code&gt; 推奨されません。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルが利用できない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="866bfc24ae093b35297a6e8aab3beb28ab1fd1f4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.writeFile()&lt;/code&gt; with File Descriptors</source>
          <target state="translated">ファイル記述 &lt;code&gt;fs.writeFile()&lt;/code&gt; 使用</target>
        </trans-unit>
        <trans-unit id="335c637b7e6b77e8111a742f9e57617c84a27b7c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fs.writeFile()&lt;/code&gt; with file descriptors</source>
          <target state="translated">ファイル記述子での &lt;code&gt;fs.writeFile()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="0a5d496423749962cb5512ba1b233acfcd0078b4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fsPromises.access()&lt;/code&gt; to check for the accessibility of a file before calling &lt;code&gt;fsPromises.open()&lt;/code&gt; is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.</source>
          <target state="translated">使用 &lt;code&gt;fsPromises.access()&lt;/code&gt; を呼び出す前に、ファイルのアクセシビリティをチェックするために &lt;code&gt;fsPromises.open()&lt;/code&gt; 推奨されません。他のプロセスが2つの呼び出し間でファイルの状態を変更する可能性があるため、これを行うと競合状態が発生します。代わりに、ユーザーコードはファイルを直接開いたり、読み込んだり、書き込んだりして、ファイルにアクセスできない場合に発生するエラーを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="c607cf90a0d8916415b340eb0252a8713b884eb8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; on a file (not a directory) results in the &lt;code&gt;Promise&lt;/code&gt; being rejected with an &lt;code&gt;ENOENT&lt;/code&gt; error on Windows and an &lt;code&gt;ENOTDIR&lt;/code&gt; error on POSIX.</source>
          <target state="translated">ファイル（ディレクトリではない &lt;code&gt;fsPromises.rmdir()&lt;/code&gt; でfsPromises.rmdir（）を使用すると、Windowsでは &lt;code&gt;ENOENT&lt;/code&gt; エラー、POSIXでは &lt;code&gt;ENOTDIR&lt;/code&gt; エラーで &lt;code&gt;Promise&lt;/code&gt; が拒否されます。</target>
        </trans-unit>
        <trans-unit id="07472a684a532bb4eee8dd81f03cb60e9e4331c6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;options.selectPadding()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;options.selectPadding()&lt;/code&gt; の使用</target>
        </trans-unit>
        <trans-unit id="81de70c1267400cfc41cc7333bc90195bd61f1a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;process.binding()&lt;/code&gt; in general should be avoided. The type checking methods in particular can be replaced by using &lt;a href=&quot;util#util_util_types&quot;&gt;&lt;code&gt;util.types&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;process.binding()&lt;/code&gt; の使用は避けてください。特にタイプチェックメソッドは、&lt;a href=&quot;util#util_util_types&quot;&gt; &lt;code&gt;util.types&lt;/code&gt; &lt;/a&gt;を使用して置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="7d9d256692251bf585c474d243da24c4bf848c2c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;promisify()&lt;/code&gt; on class methods or other methods that use &lt;code&gt;this&lt;/code&gt; may not work as expected unless handled specially:</source>
          <target state="translated">使用 &lt;code&gt;promisify()&lt;/code&gt; クラスメソッドまたは使用する他の方法で &lt;code&gt;this&lt;/code&gt; 特殊な方法で処理しない限り、期待どおりかもしれない作業：</target>
        </trans-unit>
        <trans-unit id="71279ee197c5f01129ef5e543cfc6f739195ac37" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;require&lt;/code&gt; to load an ES module is not supported because ES modules have asynchronous execution. Instead, use use &lt;a href=&quot;#esm_import_expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt; to load an ES module from a CommonJS module.</source>
          <target state="translated">ESモジュールには非同期実行があるため、 &lt;code&gt;require&lt;/code&gt; を使用してESモジュールをロードすることはサポートされていません。代わりに、&lt;a href=&quot;#esm_import_expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; &lt;/a&gt;を使用してCommonJSモジュールからESモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="1f9fa4662d9e59fdef4b483f80021b9e3a425c60" translate="yes" xml:space="preserve">
          <source>Using OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables.</source>
          <target state="translated">OpenSSLストアを使用することで、ストアを外部から変更することができます。ほとんどの Linux や BSD ディストリビューションでは、このストアはディストリビューションのメンテナやシステム管理者によって管理されています。OpenSSL CAストアの場所はOpenSSLライブラリの設定に依存しますが、これは環境変数を使って実行時に変更することができます。</target>
        </trans-unit>
        <trans-unit id="0ddc3e6b3b925cb8ef6a355cbeeeb58f94dd4be4" translate="yes" xml:space="preserve">
          <source>Using WHATWG &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; objects might introduce platform-specific behaviors.</source>
          <target state="translated">WHATWG &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;オブジェクトを使用すると、プラットフォーム固有の動作が導入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="9024760327c0026f81de6546b338f59f0dbed57d" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;vm.Module&lt;/code&gt; object requires three distinct steps: creation/parsing, linking, and evaluation. These three steps are illustrated in the following example.</source>
          <target state="translated">&lt;code&gt;vm.Module&lt;/code&gt; オブジェクトを使用するには、作成/解析、リンク、および評価の3つの異なるステップが必要です。これらの3つのステップは、次の例に示されています。</target>
        </trans-unit>
        <trans-unit id="2e0ad87979a98d2f046dff89a35addd29f2194ab" translate="yes" xml:space="preserve">
          <source>Using a &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object requires four distinct steps: creation/parsing, linking, instantiation, and evaluation. These four steps are illustrated in the following example.</source>
          <target state="translated">&lt;code&gt;vm.SourceTextModule&lt;/code&gt; オブジェクトを使用するには、作成/解析、リンク、インスタンス化、および評価という4つの異なる手順が必要です。これらの4つの手順を次の例に示します。</target>
        </trans-unit>
        <trans-unit id="c9b23dcc63cc7270d9b15447d12ff7f9dfd57376" translate="yes" xml:space="preserve">
          <source>Using a property named &lt;code&gt;inspect&lt;/code&gt; on an object to specify a custom inspection function for &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is deprecated. Use &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt;&lt;code&gt;util.inspect.custom&lt;/code&gt;&lt;/a&gt; instead. For backward compatibility with Node.js prior to version 6.4.0, both can be specified.</source>
          <target state="translated">オブジェクトで &lt;code&gt;inspect&lt;/code&gt; という名前のプロパティを使用して、&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; の&lt;/a&gt;カスタム検査関数を指定することは非推奨です。代わりに&lt;a href=&quot;util#util_util_inspect_custom&quot;&gt; &lt;code&gt;util.inspect.custom&lt;/code&gt; &lt;/a&gt;を使用してください。バージョン6.4.0より前のNode.jsとの下位互換性のために、両方を指定できます。</target>
        </trans-unit>
        <trans-unit id="dcf15580a7b8d6e22735987585fb71e72c7b9956" translate="yes" xml:space="preserve">
          <source>Using a property named &lt;code&gt;inspect&lt;/code&gt; on an object to specify a custom inspection function for &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is deprecated. Use &lt;a href=&quot;util#util_util_inspect_custom&quot;&gt;&lt;code&gt;util.inspect.custom&lt;/code&gt;&lt;/a&gt; instead. For backward compatibility with Node.js prior to version 6.4.0, both may be specified.</source>
          <target state="translated">オブジェクトで &lt;code&gt;inspect&lt;/code&gt; という名前のプロパティを使用して&lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; の&lt;/a&gt;カスタム検査関数を指定することは非推奨です。代わりに&lt;a href=&quot;util#util_util_inspect_custom&quot;&gt; &lt;code&gt;util.inspect.custom&lt;/code&gt; &lt;/a&gt;を使用してください。バージョン6.4.0より前のNode.jsとの下位互換性のために、両方を指定できます。</target>
        </trans-unit>
        <trans-unit id="088c5711cb1136a04d7d37ed97c2ab691586c0df" translate="yes" xml:space="preserve">
          <source>Using a regular expression runs &lt;code&gt;.toString&lt;/code&gt; on the error object, and will therefore also include the error name.</source>
          <target state="translated">正規表現を使用すると、エラーオブジェクトに対して &lt;code&gt;.toString&lt;/code&gt; が実行されるため、エラー名も含まれます。</target>
        </trans-unit>
        <trans-unit id="09fba33f227f6c3a033ebafcb4b5bbd4a4ad47b5" translate="yes" xml:space="preserve">
          <source>Using a timer to detect approximate event loop delay works because the execution of timers is tied specifically to the lifecycle of the libuv event loop. That is, a delay in the loop will cause a delay in the execution of the timer, and those delays are specifically what this API is intended to detect.</source>
          <target state="translated">タイマーを使用しておおよそのイベントループの遅延を検出することは、タイマーの実行が libuv イベントループのライフサイクルに特別に関連付けられているために機能します。つまり、ループの遅延はタイマーの実行に遅延を引き起こし、それらの遅延はこの API が検出することを意図しているものです。</target>
        </trans-unit>
        <trans-unit id="0e89804501b3927f4e3765d3fa4f23cb1fd82b30" translate="yes" xml:space="preserve">
          <source>Using invalid characters within an HTTP header field name will cause the stream to be closed with a protocol error being reported.</source>
          <target state="translated">HTTPヘッダフィールド名の中で無効な文字を使用すると、プロトコルエラーが報告されてストリームが閉じられます。</target>
        </trans-unit>
        <trans-unit id="6ae1a5ec2d8cfc6ba65f3c09bb2fe2404975a0fd" translate="yes" xml:space="preserve">
          <source>Using stream methods such as &lt;code&gt;write(data)&lt;/code&gt;, &lt;code&gt;end(data)&lt;/code&gt; or &lt;code&gt;pipe()&lt;/code&gt; in CCM mode might fail as CCM cannot handle more than one chunk of data per instance.</source>
          <target state="translated">CCMはインスタンスごとに複数のデータチャンクを処理できないため、CCMモードで &lt;code&gt;write(data)&lt;/code&gt; 、 &lt;code&gt;end(data)&lt;/code&gt; 、 &lt;code&gt;pipe()&lt;/code&gt; などのストリームメソッドを使用すると失敗する場合があります。</target>
        </trans-unit>
        <trans-unit id="127dafee70173e34186216b2c8f8c09db267903c" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; methods to produce the encrypted data.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;暗号化されたデータを生成する方法を。</target>
        </trans-unit>
        <trans-unit id="4f251efb4db5e9c8a5087bef9044351fae0d9331" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; methods to produce the unencrypted data.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;暗号化されていないデータを生成する方法を。</target>
        </trans-unit>
        <trans-unit id="64be152252122733e4bbc53b6ae8d30fe4a43dfa" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt;&lt;code&gt;hash.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest()&lt;/code&gt;&lt;/a&gt; methods to produce the computed hash.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_hash_update_data_inputencoding&quot;&gt; &lt;code&gt;hash.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest()&lt;/code&gt; &lt;/a&gt;メソッドと、計算されたハッシュを生成します。</target>
        </trans-unit>
        <trans-unit id="c7e8e3be278fe75f9d2fd0de66e184b886ca17f4" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt;&lt;code&gt;hmac.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_hmac_digest_encoding&quot;&gt;&lt;code&gt;hmac.digest()&lt;/code&gt;&lt;/a&gt; methods to produce the computed HMAC digest.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_hmac_update_data_inputencoding&quot;&gt; &lt;code&gt;hmac.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_hmac_digest_encoding&quot;&gt; &lt;code&gt;hmac.digest()&lt;/code&gt; &lt;/a&gt;計算されたHMACダイジェストを生成する方法を。</target>
        </trans-unit>
        <trans-unit id="67f4f0b34dd18e7592930fb00cda12215d238144" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt;&lt;code&gt;sign.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt;&lt;code&gt;sign.sign()&lt;/code&gt;&lt;/a&gt; methods to produce the signature.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_sign_update_data_inputencoding&quot;&gt; &lt;code&gt;sign.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_sign_sign_privatekey_outputencoding&quot;&gt; &lt;code&gt;sign.sign()&lt;/code&gt; &lt;/a&gt;メソッドは、署名を生成します。</target>
        </trans-unit>
        <trans-unit id="bc23ae8e8540ed779fd8566342f072b035c26f81" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#crypto_verify_update_data_inputencoding&quot;&gt;&lt;code&gt;verify.update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_verify_verify_object_signature_signatureencoding&quot;&gt;&lt;code&gt;verify.verify()&lt;/code&gt;&lt;/a&gt; methods to verify the signature.</source>
          <target state="translated">使用&lt;a href=&quot;#crypto_verify_update_data_inputencoding&quot;&gt; &lt;code&gt;verify.update()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_verify_verify_object_signature_signatureencoding&quot;&gt; &lt;code&gt;verify.verify()&lt;/code&gt; &lt;/a&gt;メソッドは、署名を検証します。</target>
        </trans-unit>
        <trans-unit id="1c1528a393c438992217fc1628dac9e34225dbec" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&quot;import&quot;&lt;/code&gt; and &lt;code&gt;&quot;require&quot;&lt;/code&gt; conditions can lead to some hazards, which are further explained in &lt;a href=&quot;#packages_dual_commonjs_es_module_packages&quot;&gt;the dual CommonJS/ES module packages section&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;import&quot;&lt;/code&gt; および &lt;code&gt;&quot;require&quot;&lt;/code&gt; 条件を使用すると、いくつかの危険が発生する可能性があります。これについては&lt;a href=&quot;#packages_dual_commonjs_es_module_packages&quot;&gt;、デュアルCommonJS / ESモジュールパッケージのセクションで&lt;/a&gt;詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="eb25820ec4ba15c58d1aef843277d65ff7264047" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--no-deprecation&lt;/code&gt; command line flag will suppress all reporting of the custom deprecation.</source>
          <target state="translated">&lt;code&gt;--no-deprecation&lt;/code&gt; コマンドラインフラグを使用すると、カスタム非推奨のレポートがすべて抑制されます。</target>
        </trans-unit>
        <trans-unit id="3cfbf93b670c4a35f238c70ab57bf106e5b849c9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--no-deprecation&lt;/code&gt; command-line flag will suppress all reporting of the custom deprecation.</source>
          <target state="translated">使用 &lt;code&gt;--no-deprecation&lt;/code&gt; コマンドラインフラグはカスタム非推奨のすべてのレポートを抑制します。</target>
        </trans-unit>
        <trans-unit id="beb85e77bb17580639378b9767ab4b8f3f18878a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--trace-deprecation&lt;/code&gt; command line flag will cause the custom deprecation to be printed to &lt;code&gt;stderr&lt;/code&gt; along with the stack trace.</source>
          <target state="translated">使用 &lt;code&gt;--trace-deprecation&lt;/code&gt; コマンドラインフラグは、カスタムの廃止をすることが印刷されるようになります &lt;code&gt;stderr&lt;/code&gt; スタックトレースと一緒に。</target>
        </trans-unit>
        <trans-unit id="58b0ea8ad0986c815bfa086203f4052b8a4075eb" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--trace-deprecation&lt;/code&gt; command-line flag will cause the custom deprecation to be printed to &lt;code&gt;stderr&lt;/code&gt; along with the stack trace.</source>
          <target state="translated">使用 &lt;code&gt;--trace-deprecation&lt;/code&gt; コマンドラインフラグは、カスタムの廃止をすることが印刷されるようになります &lt;code&gt;stderr&lt;/code&gt; スタックトレースと一緒に。</target>
        </trans-unit>
        <trans-unit id="1aade48dc74184bf3018e802b560bc9fdde1529a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;eventEmitter.once()&lt;/code&gt; method, it is possible to register a listener that is called at most once for a particular event. Once the event is emitted, the listener is unregistered and &lt;em&gt;then&lt;/em&gt; called.</source>
          <target state="translated">&lt;code&gt;eventEmitter.once()&lt;/code&gt; メソッドを使用すると、特定のイベントに対して最大で1回呼び出されるリスナーを登録できます。イベントが放出されると、リスナーが登録されていないとされ&lt;em&gt;、その後&lt;/em&gt;呼ばれます。</target>
        </trans-unit>
        <trans-unit id="76c7bac3d55ead2fa3d5ee94ca9f99c7c33e9a42" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;noAssert&lt;/code&gt; argument has no functionality anymore. All input is going to be verified, no matter if it is set to true or not. Skipping the verification could lead to hard to find errors and crashes.</source>
          <target state="translated">&lt;code&gt;noAssert&lt;/code&gt; 引数を使用しても機能しなくなりました。trueに設定されているかどうかに関係なく、すべての入力が検証されます。検証をスキップすると、エラーやクラッシュが見つかりにくくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="75bf5fd5057c88a02149a0ccbe74842e13ef3ab9" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;timeout&lt;/code&gt; or &lt;code&gt;breakOnSigint&lt;/code&gt; options will result in new event loops and corresponding threads being started, which have a non-zero performance overhead.</source>
          <target state="translated">使用して &lt;code&gt;timeout&lt;/code&gt; または &lt;code&gt;breakOnSigint&lt;/code&gt; オプションは、新しいイベントループと非ゼロのパフォーマンス・オーバーヘッドを持って開始され、対応するスレッドになります。</target>
        </trans-unit>
        <trans-unit id="97b15491568eb88678c0630c2498ffe3eb457850" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;util.promisify.custom&lt;/code&gt; symbol one can override the return value of &lt;a href=&quot;#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;util.promisify.custom&lt;/code&gt; シンボルを使用すると、&lt;a href=&quot;#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; の&lt;/a&gt;戻り値をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="fef65abe276369de6a7f627f0f824c09d9010621" translate="yes" xml:space="preserve">
          <source>Using the Node.js REPL with advanced line-editors</source>
          <target state="translated">Node.js REPL を高度なラインエディタで使う</target>
        </trans-unit>
        <trans-unit id="7328f5c7c59ba3af2610c9a943fda05bd71b6ac5" translate="yes" xml:space="preserve">
          <source>Using the method and parameters given by &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.sign()&lt;/code&gt; attempts to generate a cryptographic signature of &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise is resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the generated signature.</source>
          <target state="translated">&lt;code&gt;subtle.sign()&lt;/code&gt; は、 &lt;code&gt;algorithm&lt;/code&gt; によって提供されるメソッドとパラメーター、および &lt;code&gt;key&lt;/code&gt; によって提供されるキー &lt;code&gt;data&lt;/code&gt; 、データの暗号署名を生成しようとします。成功した場合、返されたpromiseは、生成された署名を含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;で&lt;/a&gt;解決されます。</target>
        </trans-unit>
        <trans-unit id="0550897b357b50919d983a5a08b40321e1020e5a" translate="yes" xml:space="preserve">
          <source>Using the method and parameters given in &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.verify()&lt;/code&gt; attempts to verify that &lt;code&gt;signature&lt;/code&gt; is a valid cryptographic signature of &lt;code&gt;data&lt;/code&gt;. The returned promise is resolved with either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">方法およびパラメータに与えられた使用 &lt;code&gt;algorithm&lt;/code&gt; によって提供される鍵材料 &lt;code&gt;key&lt;/code&gt; 、 &lt;code&gt;subtle.verify()&lt;/code&gt; ことを確認するための試み &lt;code&gt;signature&lt;/code&gt; 有効な暗号署名され &lt;code&gt;data&lt;/code&gt; 。返されたpromiseは、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; のいずれかで解決されます。</target>
        </trans-unit>
        <trans-unit id="cd75df4f898d0a8260e76ac2471d4e0cb6001495" translate="yes" xml:space="preserve">
          <source>Using the method and parameters provided in &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;subtle.generateKey()&lt;/code&gt; attempts to generate new keying material. Depending the method used, the method may generate either a single &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; or a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokeypair&quot;&gt;&amp;lt;CryptoKeyPair&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;subtle.generateKey()&lt;/code&gt; は、 &lt;code&gt;algorithm&lt;/code&gt; で提供されるメソッドとパラメーターを使用して、新しいキー情報を生成しようとします。使用方法によっては、この方法は、単一のいずれかで生成することができる&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;又は&lt;a href=&quot;webcrypto#webcrypto_class_cryptokeypair&quot;&gt;&amp;lt;CryptoKeyPair&amp;gt;を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff8a97499c1a0fef025c19e37d1fdcb3b9749a54" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified by &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.encrypt()&lt;/code&gt; attempts to encipher &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise is resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the encrypted result.</source>
          <target state="translated">&lt;code&gt;subtle.encrypt()&lt;/code&gt; は、 &lt;code&gt;algorithm&lt;/code&gt; で指定されたメソッドとパラメーター、および &lt;code&gt;key&lt;/code&gt; で提供されたキー情報を使用して、 &lt;code&gt;data&lt;/code&gt; 暗号化を試みます。成功した場合、返されたpromiseは、暗号化された結果を含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;で&lt;/a&gt;解決されます。</target>
        </trans-unit>
        <trans-unit id="b685ede9ec73b82334a4d6a026af50ed779b939a" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified in &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;baseKey&lt;/code&gt;, &lt;code&gt;subtle.deriveBits()&lt;/code&gt; attempts to generate &lt;code&gt;length&lt;/code&gt; bits. The Node.js implementation requires that &lt;code&gt;length&lt;/code&gt; is a multiple of &lt;code&gt;8&lt;/code&gt;. If successful, the returned promise will be resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the generated data.</source>
          <target state="translated">&lt;code&gt;subtle.deriveBits()&lt;/code&gt; は、 &lt;code&gt;algorithm&lt;/code&gt; で指定されたメソッドとパラメーター、および &lt;code&gt;baseKey&lt;/code&gt; によって提供されるキー情報を使用して、 &lt;code&gt;length&lt;/code&gt; ビットを生成しようとします。 Node.jsの実装では、 &lt;code&gt;length&lt;/code&gt; が &lt;code&gt;8&lt;/code&gt; の倍数である必要があります。成功した場合、返されたPromiseは、生成されたデータを含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;で&lt;/a&gt;解決されます。</target>
        </trans-unit>
        <trans-unit id="329bc16a9f339512e66fcd94fc126a6b0e2d6f00" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified in &lt;code&gt;algorithm&lt;/code&gt; and the keying material provided by &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;subtle.decrypt()&lt;/code&gt; attempts to decipher the provided &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise will be resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the plaintext result.</source>
          <target state="translated">方法およびパラメータを使用することで指定された &lt;code&gt;algorithm&lt;/code&gt; によって提供される鍵材料 &lt;code&gt;key&lt;/code&gt; 、 &lt;code&gt;subtle.decrypt()&lt;/code&gt; 提供解読する試み &lt;code&gt;data&lt;/code&gt; 。成功した場合、返されたpromiseは、プレーンテキストの結果を含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;で&lt;/a&gt;解決されます。</target>
        </trans-unit>
        <trans-unit id="c7bc73140bc0a85391234d71c752cc5842d6b97c" translate="yes" xml:space="preserve">
          <source>Using the method and parameters specified in &lt;code&gt;algorithm&lt;/code&gt;, and the keying material provided by &lt;code&gt;baseKey&lt;/code&gt;, &lt;code&gt;subtle.deriveKey()&lt;/code&gt; attempts to generate a new &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; based on the method and parameters in &lt;code&gt;derivedKeyAlgorithm&lt;/code&gt;.</source>
          <target state="translated">方法とで指定されたパラメータを用い &lt;code&gt;algorithm&lt;/code&gt; 、およびによって提供キーイング材料 &lt;code&gt;baseKey&lt;/code&gt; を、 &lt;code&gt;subtle.deriveKey()&lt;/code&gt; 試みが生成する新しい&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;での方法とパラメータに基づい &lt;code&gt;derivedKeyAlgorithm&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1e4e36e1fe7e0c80cded4e1c209428b480cd429" translate="yes" xml:space="preserve">
          <source>Using the method identified by &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;subtle.digest()&lt;/code&gt; attempts to generate a digest of &lt;code&gt;data&lt;/code&gt;. If successful, the returned promise is resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the computed digest.</source>
          <target state="translated">&lt;code&gt;subtle.digest()&lt;/code&gt; は、 &lt;code&gt;algorithm&lt;/code&gt; で識別されるメソッドを使用して、 &lt;code&gt;data&lt;/code&gt; ダイジェストを生成しようとします。成功した場合、返されたPromiseは、計算されたダイジェストを含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;で&lt;/a&gt;解決されます。</target>
        </trans-unit>
        <trans-unit id="1416cd9b70255f5e8b906ccade9b66d4be132754" translate="yes" xml:space="preserve">
          <source>Using the worker's unique id is the easiest way to locate the worker.</source>
          <target state="translated">ワーカーの一意のIDを使用することは、ワーカーを見つける最も簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="89b4493de3d831021cc129eb07c2fd6b4e897a68" translate="yes" xml:space="preserve">
          <source>Using this flag allows to change what should happen when an unhandled rejection occurs. One of the following modes can be chosen:</source>
          <target state="translated">このフラグを使用することで、手のかからない拒絶反応が発生したときに何をすべきかを変更することができます。以下のモードのいずれかを選択することができます。</target>
        </trans-unit>
        <trans-unit id="c5d1341a74557dbb20bf54caa7e5e21ff2a54cbf" translate="yes" xml:space="preserve">
          <source>Using this flag allows to change what should happen when an unhandled rejection occurs. One of three modes can be chosen:</source>
          <target state="translated">このフラグを使用すると、手のかからない拒絶反応が発生したときに何が起こるかを変更することができます。3つのモードのうちの1つを選択することができます。</target>
        </trans-unit>
        <trans-unit id="44a6c833440a89de21d1119627e5bdd4e162ca03" translate="yes" xml:space="preserve">
          <source>Using this function is mutually exclusive with using the deprecated &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; built-in module.</source>
          <target state="translated">この関数の使用は、非推奨の&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;組み込みモジュールの使用と相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="a406802ec60c173518984b9e73db43db31538d00" translate="yes" xml:space="preserve">
          <source>Using this on a timer that has already called its callback will reactivate the timer.</source>
          <target state="translated">すでにコールバックを呼び出しているタイマーでこれを使用すると、タイマーが再起動されます。</target>
        </trans-unit>
        <trans-unit id="4c31156efed35ee7814650f8971c3698059440e3" translate="yes" xml:space="preserve">
          <source>Util</source>
          <target state="translated">Util</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="b8b097d0eea0934533ba237923021e6a341048fe" translate="yes" xml:space="preserve">
          <source>V8</source>
          <target state="translated">V8</target>
        </trans-unit>
        <trans-unit id="d72bb28caa036c763c48ffce7432d03efc797595" translate="yes" xml:space="preserve">
          <source>V8 Inspector Integration for Node.js</source>
          <target state="translated">Node.jsのためのV8インスペクタの統合</target>
        </trans-unit>
        <trans-unit id="cabd879dfeef746d08c749d5af715f589036a5b1" translate="yes" xml:space="preserve">
          <source>V8 Inspector can be enabled by passing the &lt;code&gt;--inspect&lt;/code&gt; flag when starting a Node.js application. It is also possible to supply a custom port with that flag, e.g. &lt;code&gt;--inspect=9222&lt;/code&gt; will accept DevTools connections on port 9222.</source>
          <target state="translated">Node.jsアプリケーションの起動時に &lt;code&gt;--inspect&lt;/code&gt; フラグを渡すことにより、V8インスペクターを有効にすることができます。そのフラグでカスタムポートを提供することも可能です。たとえば、 &lt;code&gt;--inspect=9222&lt;/code&gt; はポート9222でDevTools接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="9bdd712745068212698e2ff31a51cc113ecfb32e" translate="yes" xml:space="preserve">
          <source>V8 Inspector integration allows attaching Chrome DevTools to Node.js instances for debugging and profiling. It uses the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;.</source>
          <target state="translated">V8 Inspector統合により、デバッグとプロファイリングのためにChrome DevToolsをNode.jsインスタンスに接続できます。&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocolを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="0695bb193877756fc54a72ca47f48f1583220e62" translate="yes" xml:space="preserve">
          <source>V8 has its own set of CLI options. Any V8 CLI option that is provided to &lt;code&gt;node&lt;/code&gt; will be passed on to V8 to handle. V8's options have &lt;em&gt;no stability guarantee&lt;/em&gt;. The V8 team themselves don't consider them to be part of their formal API, and reserve the right to change them at any time. Likewise, they are not covered by the Node.js stability guarantees. Many of the V8 options are of interest only to V8 developers. Despite this, there is a small set of V8 options that are widely applicable to Node.js, and they are documented here:</source>
          <target state="translated">V8には独自のCLIオプションのセットがあります。 &lt;code&gt;node&lt;/code&gt; 提供されたV8CLIオプションはすべて、処理するためにV8に渡されます。 V8のオプションには&lt;em&gt;安定性の保証&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;。 V8チーム自体は、それらが正式なAPIの一部であるとは見なしておらず、いつでも変更する権利を留保します。同様に、それらはNode.jsの安定性保証の対象ではありません。 V8オプションの多くは、V8開発者のみが関心を持っています。それにもかかわらず、Node.jsに広く適用できるV8オプションの小さなセットがあり、それらはここに文書化されています。</target>
        </trans-unit>
        <trans-unit id="18746efcdacafb5421ac3876f8538e235a64b91d" translate="yes" xml:space="preserve">
          <source>V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol&lt;/a&gt;.</source>
          <target state="translated">V8インスペクターの統合により、Chrome DevToolsやIDEなどのツールでNode.jsインスタンスをデバッグおよびプロファイルできます。ツールは、tcpポートを介してNode.jsインスタンスに接続し、&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevToolsプロトコル&lt;/a&gt;を使用して通信します。</target>
        </trans-unit>
        <trans-unit id="28b99136362001f8842d1ba7dd740d8b6cf55c58" translate="yes" xml:space="preserve">
          <source>V8 inspector integration for Node.js</source>
          <target state="translated">Node.jsのためのV8インスペクタの統合</target>
        </trans-unit>
        <trans-unit id="3fb5b6ec0ebc7cc5b53865e6b15aed12de71598b" translate="yes" xml:space="preserve">
          <source>V8 options that are allowed are:</source>
          <target state="translated">許可されているV8のオプションは</target>
        </trans-unit>
        <trans-unit id="8a7d326dfb5b6af4779be16c67127f3a43de3ca1" translate="yes" xml:space="preserve">
          <source>V8 per-process requirements, such as a &lt;code&gt;v8::Platform&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;v8::Platform&lt;/code&gt; インスタンスなどのV8プロセスごとの要件。</target>
        </trans-unit>
        <trans-unit id="a93137526f7cbc73e7e9d50d14c1c433440b1b0e" translate="yes" xml:space="preserve">
          <source>V8: the C++ library Node.js currently uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the &lt;code&gt;v8.h&lt;/code&gt; header file (&lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; in the Node.js source tree), which is also available &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;online&lt;/a&gt;.</source>
          <target state="translated">V8：Node.jsがJavaScript実装を提供するために現在使用しているC ++ライブラリ。V8は、オブジェクトの作成、関数の呼び出しなどのメカニズムを提供します &lt;code&gt;v8.h&lt;/code&gt; のAPIは、主にv8.hヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; )に文書化されており、&lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;オンライン&lt;/a&gt;でも入手できます。</target>
        </trans-unit>
        <trans-unit id="fa9b1b42d23723b880299a1e8d6f48ff3becf2ce" translate="yes" xml:space="preserve">
          <source>V8: the C++ library Node.js uses to provide the JavaScript implementation. V8 provides the mechanisms for creating objects, calling functions, etc. V8's API is documented mostly in the &lt;code&gt;v8.h&lt;/code&gt; header file (&lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; in the Node.js source tree), which is also available &lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;online&lt;/a&gt;.</source>
          <target state="translated">V8：Node.jsがJavaScript実装を提供するために使用するC ++ライブラリ。V8は、オブジェクトの作成、関数の呼び出しなどのメカニズムを提供します &lt;code&gt;v8.h&lt;/code&gt; のAPIは、主にv8.hヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/v8/include/v8.h&lt;/code&gt; )に記載されており、&lt;a href=&quot;https://v8docs.nodesource.com/&quot;&gt;オンライン&lt;/a&gt;でも入手できます。</target>
        </trans-unit>
        <trans-unit id="494e5398b739ace80c2800a4e5b3cd1fb68001cf" translate="yes" xml:space="preserve">
          <source>VM</source>
          <target state="translated">VM</target>
        </trans-unit>
        <trans-unit id="dbe377a114ceb49b6128d4c1ccda27673cda2b2b" translate="yes" xml:space="preserve">
          <source>VM (Executing JavaScript)</source>
          <target state="translated">VM(JavaScriptの実行)</target>
        </trans-unit>
        <trans-unit id="0af4bf1819c48bb84742feec149353f7191c2e13" translate="yes" xml:space="preserve">
          <source>VM (executing JavaScript)</source>
          <target state="translated">VM(JavaScriptの実行</target>
        </trans-unit>
        <trans-unit id="fb8f27aea3185e30c92158b5a72b5e68427a8747" translate="yes" xml:space="preserve">
          <source>Valid TLS protocol versions are &lt;code&gt;'TLSv1'&lt;/code&gt;, &lt;code&gt;'TLSv1.1'&lt;/code&gt;, or &lt;code&gt;'TLSv1.2'&lt;/code&gt;.</source>
          <target state="translated">有効なTLSプロトコルバージョンは、 &lt;code&gt;'TLSv1'&lt;/code&gt; 、 &lt;code&gt;'TLSv1.1'&lt;/code&gt; 、または &lt;code&gt;'TLSv1.2'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a987e7a89129aa23cb3e6c2551267ffab5bdfaa7" translate="yes" xml:space="preserve">
          <source>Valid key usages depend on the key algorithm (identified by &lt;code&gt;cryptokey.algorithm.name&lt;/code&gt;).</source>
          <target state="translated">有効なキーの使用法は、キーアルゴリズム（ &lt;code&gt;cryptokey.algorithm.name&lt;/code&gt; で識別）によって異なります。</target>
        </trans-unit>
        <trans-unit id="393b0cd2d2b4c056628251cd2e23912b2a26f716" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; and &lt;code&gt;&quot;module&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt;.</source>
          <target state="translated">有効な値は &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; および &lt;code&gt;&quot;module&quot;&lt;/code&gt; です。デフォルトは &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a528ab622db5be3124b720c51ff8a564a3515496" translate="yes" xml:space="preserve">
          <source>Validate error message using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt;を使用してエラーメッセージを検証します。</target>
        </trans-unit>
        <trans-unit id="81b25ad8225f7ecb896fabebec88216239869060" translate="yes" xml:space="preserve">
          <source>Validate instanceof using constructor:</source>
          <target state="translated">コンストラクタを使用して instanceof を検証します。</target>
        </trans-unit>
        <trans-unit id="8ef03321a63fe1d0ebb05c543908688a331dd8ae" translate="yes" xml:space="preserve">
          <source>Validation errors occur when an incorrect argument, option, or setting value is passed in. These will always be reported by a synchronous &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="translated">検証エラーは、不正な引数、オプション、または設定値が渡されると発生します。これらは常に同期 &lt;code&gt;throw&lt;/code&gt; によって報告されます。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="27d2412cca245376cbe8f7b65f5729cd3d3ae3c9" translate="yes" xml:space="preserve">
          <source>Value is &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; session socket has not yet been connected, &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is connected with a &lt;code&gt;TLSSocket&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is connected to any other kind of socket or stream.</source>
          <target state="translated">値がされた &lt;code&gt;undefined&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; セッションソケットがまだ接続されていない &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; がに接続され &lt;code&gt;TLSSocket&lt;/code&gt; 、および &lt;code&gt;false&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; がソケットまたはストリームの他の種類に接続されています。</target>
        </trans-unit>
        <trans-unit id="b1b2d39b70dc3fb0257610327d062b71a8c39503" translate="yes" xml:space="preserve">
          <source>Value may now only be &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. Before all falsy values were handled the same as &lt;code&gt;null&lt;/code&gt; and did not throw.</source>
          <target state="translated">値は &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; のみになります。以前は、すべての偽の値が &lt;code&gt;null&lt;/code&gt; と同じように処理され、スローされませんでした。</target>
        </trans-unit>
        <trans-unit id="384f69d4253fbebb54d8368317298745f013ef88" translate="yes" xml:space="preserve">
          <source>Value will be &lt;code&gt;undefined&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is not yet connected to a socket, &lt;code&gt;h2c&lt;/code&gt; if the &lt;code&gt;Http2Session&lt;/code&gt; is not connected to a &lt;code&gt;TLSSocket&lt;/code&gt;, or will return the value of the connected &lt;code&gt;TLSSocket&lt;/code&gt;'s own &lt;code&gt;alpnProtocol&lt;/code&gt; property.</source>
          <target state="translated">値がされる &lt;code&gt;undefined&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; がまだソケットに接続されていない、 &lt;code&gt;h2c&lt;/code&gt; 場合 &lt;code&gt;Http2Session&lt;/code&gt; に接続されていない &lt;code&gt;TLSSocket&lt;/code&gt; 、または接続の値を返します &lt;code&gt;TLSSocket&lt;/code&gt; 自身 &lt;code&gt;alpnProtocol&lt;/code&gt; のプロパティを。</target>
        </trans-unit>
        <trans-unit id="3374585616cd19cdf8913de105924c8996485ee4" translate="yes" xml:space="preserve">
          <source>Value: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">値：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール値&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99bfc53543bae130b78974f3ac786581c4580860" translate="yes" xml:space="preserve">
          <source>Value: &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;</source>
          <target state="translated">値： &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="719b833bb97b00a6ee4444c1d9b2ce985e6a1a74" translate="yes" xml:space="preserve">
          <source>Values can be either numbers representing Unix epoch time in seconds, &lt;code&gt;Date&lt;/code&gt;s, or a numeric string like &lt;code&gt;'123456789.0'&lt;/code&gt;.</source>
          <target state="translated">値は、Unixエポック時間を秒単位で表す数値、 &lt;code&gt;Date&lt;/code&gt; s、または &lt;code&gt;'123456789.0'&lt;/code&gt; ような数値文字列のいずれかです。</target>
        </trans-unit>
        <trans-unit id="b9b183d756719a245acd620179f819dd9041ffd2" translate="yes" xml:space="preserve">
          <source>Values can be either numbers representing Unix epoch time, &lt;code&gt;Date&lt;/code&gt;s, or a numeric string like &lt;code&gt;'123456789.0'&lt;/code&gt;.</source>
          <target state="translated">値は、Unixエポック時間を表す数値、 &lt;code&gt;Date&lt;/code&gt; 、または &lt;code&gt;'123456789.0'&lt;/code&gt; のような数値文字列のいずれかです。</target>
        </trans-unit>
        <trans-unit id="53c0bb5f3d02bff6545de0ad72cc4c3a77afccdb" translate="yes" xml:space="preserve">
          <source>Values that are not part of the format string are formatted using &lt;code&gt;util.inspect()&lt;/code&gt; if their type is not &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">フォーマット文字列の一部ではない値は、タイプが &lt;code&gt;string&lt;/code&gt; でない場合、 &lt;code&gt;util.inspect()&lt;/code&gt; を使用してフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="8c84c56936b14a1634315a3aa83091b5dcfaa5b5" translate="yes" xml:space="preserve">
          <source>Variables local to the module will be private, because the module is wrapped in a function by Node.js (see &lt;a href=&quot;#modules_the_module_wrapper&quot;&gt;module wrapper&lt;/a&gt;). In this example, the variable &lt;code&gt;PI&lt;/code&gt; is private to &lt;code&gt;circle.js&lt;/code&gt;.</source>
          <target state="translated">モジュールはNode.jsによって関数にラップされるため、モジュールのローカル変数はプライベートになります（&lt;a href=&quot;#modules_the_module_wrapper&quot;&gt;モジュールラッパーを&lt;/a&gt;参照）。この例では、変数 &lt;code&gt;PI&lt;/code&gt; は &lt;code&gt;circle.js&lt;/code&gt; に対してプライベートです。</target>
        </trans-unit>
        <trans-unit id="075be6a60b145b1ce1b874ce5a76b369cdd0b469" translate="yes" xml:space="preserve">
          <source>Various</source>
          <target state="translated">Various</target>
        </trans-unit>
        <trans-unit id="5a8e182151fdcadd9117a606819b5b815c60f49d" translate="yes" xml:space="preserve">
          <source>Various behaviors of the Node.js REPL can be customized using the following environment variables:</source>
          <target state="translated">Node.js REPLの様々な動作は、以下の環境変数を使用してカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="63ed65929f9b05267e5a93a328e53542d3c61717" translate="yes" xml:space="preserve">
          <source>Various networking APIs will call &lt;code&gt;dns.lookup()&lt;/code&gt; internally to resolve host names. If that is an issue, consider resolving the host name to an address using &lt;code&gt;dns.resolve()&lt;/code&gt; and using the address instead of a host name. Also, some networking APIs (such as &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;) allow the default resolver, &lt;code&gt;dns.lookup()&lt;/code&gt;, to be replaced.</source>
          <target state="translated">さまざまなネットワークAPIが内部で &lt;code&gt;dns.lookup()&lt;/code&gt; を呼び出して、ホスト名を解決します。それが問題である場合は、 &lt;code&gt;dns.resolve()&lt;/code&gt; を使用してホスト名をアドレスに解決し、ホスト名の代わりにアドレスを使用することを検討してください。また、一部のネットワークAPI（&lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; など&lt;/a&gt;）では、デフォルトのリゾルバーである &lt;code&gt;dns.lookup()&lt;/code&gt; を置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="c96b8eeb58d81747d1411796da291708a9308b67" translate="yes" xml:space="preserve">
          <source>Various networking APIs will call &lt;code&gt;dns.lookup()&lt;/code&gt; internally to resolve host names. If that is an issue, consider resolving the hostname to an address using &lt;code&gt;dns.resolve()&lt;/code&gt; and using the address instead of a host name. Also, some networking APIs (such as &lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;) allow the default resolver, &lt;code&gt;dns.lookup()&lt;/code&gt;, to be replaced.</source>
          <target state="translated">さまざまなネットワークAPIが、ホスト名を解決するために内部で &lt;code&gt;dns.lookup()&lt;/code&gt; を呼び出します。それが問題である場合は、 &lt;code&gt;dns.resolve()&lt;/code&gt; を使用してホスト名をアドレスに解決し、ホスト名の代わりにアドレスを使用することを検討してください。また、一部のネットワークAPI（&lt;a href=&quot;net#net_socket_connect_options_connectlistener&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; など&lt;/a&gt;）では、デフォルトのリゾルバー &lt;code&gt;dns.lookup()&lt;/code&gt; を置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="b390264aee088cb79da9e392cde3a01f345279e2" translate="yes" xml:space="preserve">
          <source>Verifies the certificate &lt;code&gt;cert&lt;/code&gt; is issued to &lt;code&gt;hostname&lt;/code&gt;.</source>
          <target state="translated">証明書 &lt;code&gt;cert&lt;/code&gt; が &lt;code&gt;hostname&lt;/code&gt; に対して発行されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="7a70b5dbdbc521149cff80d733ae43d7c43b9c7c" translate="yes" xml:space="preserve">
          <source>Verifies the given signature for &lt;code&gt;data&lt;/code&gt; using the given key and algorithm. If &lt;code&gt;algorithm&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, then the algorithm is dependent upon the key type (especially Ed25519 and Ed448).</source>
          <target state="translated">指定された鍵とアルゴリズムを使用して、 &lt;code&gt;data&lt;/code&gt; の指定された署名を検証します。場合 &lt;code&gt;algorithm&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; 場合、アルゴリズムは、キータイプ（特にEd25519とEd448）に依存しています。</target>
        </trans-unit>
        <trans-unit id="c802399b8ccd9918dcfcec45fe61466996fd99af" translate="yes" xml:space="preserve">
          <source>Verifies the provided data using the given &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;signature&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;object&lt;/code&gt; と &lt;code&gt;signature&lt;/code&gt; を使用して、提供されたデータを検証します。</target>
        </trans-unit>
        <trans-unit id="dda6ac27b9d3b234a68e8b2c412e90ab5a03a4e1" translate="yes" xml:space="preserve">
          <source>Verify</source>
          <target state="translated">Verify</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="53b449b15b889b1bdc8c4adba25d7f5d77268215" translate="yes" xml:space="preserve">
          <source>Version Management</source>
          <target state="translated">バージョン管理</target>
        </trans-unit>
        <trans-unit id="6df95f05b4f3bc565b7412688db876c215c30e58" translate="yes" xml:space="preserve">
          <source>Version management</source>
          <target state="translated">バージョン管理</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="84367e806ed16f93cd67aba890fbaef52d16a0b0" translate="yes" xml:space="preserve">
          <source>WASI</source>
          <target state="translated">WASI</target>
        </trans-unit>
        <trans-unit id="50147dd0e338da6e654eba9af1030e40f73121ed" translate="yes" xml:space="preserve">
          <source>WHATWG API</source>
          <target state="translated">WHATWG API</target>
        </trans-unit>
        <trans-unit id="49ba0e373af06482bcd7581a6a5ec7546822ccf5" translate="yes" xml:space="preserve">
          <source>WHATWG Supported Encodings</source>
          <target state="translated">WHATWG がサポートするエンコーディング</target>
        </trans-unit>
        <trans-unit id="67198102e3d66c7df492b61bda67c0480340d548" translate="yes" xml:space="preserve">
          <source>WHATWG URL Parser</source>
          <target state="translated">WHATWG URL パーサー</target>
        </trans-unit>
        <trans-unit id="a6c20faa9094807e512be33285730d967b0f5fa0" translate="yes" xml:space="preserve">
          <source>WHATWG URL's &lt;code&gt;origin&lt;/code&gt; property includes &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;, but not &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;password&lt;/code&gt;.</source>
          <target state="translated">WHATWG URLの &lt;code&gt;origin&lt;/code&gt; プロパティには、 &lt;code&gt;protocol&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; が含まれますが、 &lt;code&gt;username&lt;/code&gt; や &lt;code&gt;password&lt;/code&gt; は含まれません。</target>
        </trans-unit>
        <trans-unit id="1a23d1b755affd82fb4b985673a55f141e42ed04" translate="yes" xml:space="preserve">
          <source>WHATWG supported encodings</source>
          <target state="translated">WHATWG がサポートするエンコーディング</target>
        </trans-unit>
        <trans-unit id="beab9fd3086850e64e9b1822421a582494860e7c" translate="yes" xml:space="preserve">
          <source>Wait for server &lt;code&gt;QuicSession&lt;/code&gt; instances; or</source>
          <target state="translated">サーバーの &lt;code&gt;QuicSession&lt;/code&gt; インスタンスを待ちます。または</target>
        </trans-unit>
        <trans-unit id="a2cf74613ac46317886ce4819718d05b8611088d" translate="yes" xml:space="preserve">
          <source>Warning: Don't Ignore Errors!</source>
          <target state="translated">警告。エラーを無視しないでください</target>
        </trans-unit>
        <trans-unit id="1a381fabac245f16381f9fcc429f3d58cda41f8f" translate="yes" xml:space="preserve">
          <source>Warning: Don't ignore errors!</source>
          <target state="translated">警告。エラーを無視しないでください</target>
        </trans-unit>
        <trans-unit id="ba74e05534617d2ea02ad96b1b65727a369644b9" translate="yes" xml:space="preserve">
          <source>Warning: Using &lt;code&gt;'uncaughtException'&lt;/code&gt; correctly</source>
          <target state="translated">警告： &lt;code&gt;'uncaughtException'&lt;/code&gt; 正しく使用しています</target>
        </trans-unit>
        <trans-unit id="88c9b3b7035c622e0f389e01ba6cf0e17f9a8035" translate="yes" xml:space="preserve">
          <source>Warning: binding inspector to a public IP:port combination is insecure</source>
          <target state="translated">警告:インスペクタをパブリックIP:ポートの組み合わせにバインドすると安全ではありません。</target>
        </trans-unit>
        <trans-unit id="5572df96747c775e74faaf9fbcff598c0868e454" translate="yes" xml:space="preserve">
          <source>Wasm modules</source>
          <target state="translated">ワームモジュール</target>
        </trans-unit>
        <trans-unit id="4cc3642e79938d3a54d70cdcf5471b1c853bb99c" translate="yes" xml:space="preserve">
          <source>Watch for changes on &lt;code&gt;filename&lt;/code&gt;, where &lt;code&gt;filename&lt;/code&gt; is either a file or a directory.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の変更に注意してください &lt;code&gt;filename&lt;/code&gt; はファイルまたはディレクトリです。</target>
        </trans-unit>
        <trans-unit id="3cc8e7672ff86422896943e5f086f88c2cb556a9" translate="yes" xml:space="preserve">
          <source>Watch for changes on &lt;code&gt;filename&lt;/code&gt;. The callback &lt;code&gt;listener&lt;/code&gt; will be called each time the file is accessed.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; の変更に注意してください。コールバック &lt;code&gt;listener&lt;/code&gt; は、ファイルにアクセスするたびに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cdc01934e544fe692a8a590e35cab70ab09f9b33" translate="yes" xml:space="preserve">
          <source>Watchers</source>
          <target state="translated">Watchers</target>
        </trans-unit>
        <trans-unit id="994fd9faac8b6e6f0fb4f4db18b10bc4de502de5" translate="yes" xml:space="preserve">
          <source>We are not endorsed by or affiliated with Joyent.</source>
          <target state="translated">私たちは、ジョイアント社によって支持されているわけではありませんし、ジョイアント社と提携しているわけでもありません。</target>
        </trans-unit>
        <trans-unit id="7d95a3ca55b65642f528e4081042f0f3f23c8511" translate="yes" xml:space="preserve">
          <source>We can construct a Node.js Readable Stream from an asynchronous generator using the &lt;code&gt;Readable.from()&lt;/code&gt; utility method:</source>
          <target state="translated">&lt;code&gt;Readable.from()&lt;/code&gt; ユーティリティメソッドを使用して、非同期ジェネレーターからNode.js読み取り可能ストリームを構築できます。</target>
        </trans-unit>
        <trans-unit id="2caad1f379f9a1c6cd05c938b7dd3f820e135760" translate="yes" xml:space="preserve">
          <source>We can construct a Node.js readable stream from an asynchronous generator using the &lt;code&gt;Readable.from()&lt;/code&gt; utility method:</source>
          <target state="translated">&lt;code&gt;Readable.from()&lt;/code&gt; ユーティリティメソッドを使用して、非同期ジェネレーターからNode.jsの読み取り可能なストリームを構築できます。</target>
        </trans-unit>
        <trans-unit id="d22ce1330ab24cd772e12179abf27c3f4e3a3767" translate="yes" xml:space="preserve">
          <source>Web Crypto API</source>
          <target state="translated">ウェブ暗号API</target>
        </trans-unit>
        <trans-unit id="051061c35dede06e751f127657cfd8dabc9b47ce" translate="yes" xml:space="preserve">
          <source>WebAssembly</source>
          <target state="translated">WebAssembly</target>
        </trans-unit>
        <trans-unit id="db0624b3355092508d71740bf70a2f3d923a7aa7" translate="yes" xml:space="preserve">
          <source>WebAssembly System Interface (WASI)</source>
          <target state="translated">ウェブアセンブリシステムインタフェース (WASI)</target>
        </trans-unit>
        <trans-unit id="895286b9ffc9d778c00bb9c441eadee44988cc4d" translate="yes" xml:space="preserve">
          <source>What does it mean to &quot;contextify&quot; an object?</source>
          <target state="translated">物体を「文脈化」するとはどういうことか?</target>
        </trans-unit>
        <trans-unit id="ea899a2b4f85a243eb31293d0815ef8d517aa58c" translate="yes" xml:space="preserve">
          <source>What makes &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; and &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &quot;unsafe&quot;?</source>
          <target state="translated">何が作る &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; と &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &quot;安全でありませんか&quot;？</target>
        </trans-unit>
        <trans-unit id="a5ff49b6cb64f5bd92a07be45aae4e9be901e2eb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt;&lt;code&gt;fs.readdir()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt;&lt;code&gt;fs.readdirSync()&lt;/code&gt;&lt;/a&gt; is called with the &lt;code&gt;withFileTypes&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the resulting array is filled with &lt;code&gt;fs.Dirent&lt;/code&gt; objects, rather than strings or &lt;code&gt;Buffers&lt;/code&gt;.</source>
          <target state="translated">場合&lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt; &lt;code&gt;fs.readdir()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt; &lt;code&gt;fs.readdirSync()&lt;/code&gt; を&lt;/a&gt;用いて呼び出され &lt;code&gt;withFileTypes&lt;/code&gt; にオプションセット &lt;code&gt;true&lt;/code&gt; 、得られた配列を用いて充填されている &lt;code&gt;fs.Dirent&lt;/code&gt; なく文字列またはより、オブジェクト &lt;code&gt;Buffers&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2c50750aec5f7dfc5188b6d2b5475a40f7a9f36" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;this.push(dataChunk)&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;_read()&lt;/code&gt; should continue reading from the resource and pushing data until &lt;code&gt;readable.push()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Only when &lt;code&gt;_read()&lt;/code&gt; is called again after it has stopped should it resume pushing additional data onto the queue.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;this.push(dataChunk)&lt;/code&gt; &lt;/a&gt;（）が呼び出されたときに、リソースからデータが利用可能な場合、実装はthis.push（dataChunk）メソッドを使用してそのデータを読み取りキューにプッシュし始める必要があります。 &lt;code&gt;_read()&lt;/code&gt; は、 &lt;code&gt;readable.push()&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返すまで、リソースからの読み取りとデータのプッシュを続行する必要があります。 &lt;code&gt;_read()&lt;/code&gt; が停止した後に再度呼び出された場合にのみ、追加データのキューへのプッシュを再開する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd82acd7823cb8417adc5ed62f046044d1b1434e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;SIGUSR1&lt;/code&gt; is received by a Node.js process, Node.js will start the debugger. See &lt;a href=&quot;#process_signal_events&quot;&gt;Signal Events&lt;/a&gt;.</source>
          <target state="translated">とき &lt;code&gt;SIGUSR1&lt;/code&gt; は、 Node.jsのプロセスによって受信され、Node.jsのは、デバッガを起動します。&lt;a href=&quot;#process_signal_events&quot;&gt;信号イベントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dc9b3892e250b09e2ccf1ba6dcba82854161c467" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; is called, it will immediately call the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">とき &lt;code&gt;assert.doesNotThrow()&lt;/code&gt; が呼び出されると、それはすぐに呼び出す &lt;code&gt;fn&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="c51a7ae7f92cedc40838aa3599bed7de4ae3f59c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;autoPadding&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the length of the entire input data must be a multiple of the cipher's block size or &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will throw an error. Disabling automatic padding is useful for non-standard padding, for instance using &lt;code&gt;0x0&lt;/code&gt; instead of PKCS padding.</source>
          <target state="translated">とき &lt;code&gt;autoPadding&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、全入力データの長さは、暗号のブロックサイズまたはの倍数でなければなりません&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;エラーがスローされます。自動パディングを無効にすると、PKCSパディングの代わりに &lt;code&gt;0x0&lt;/code&gt; を使用するなど、非標準のパディングに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d5b4788c570217c4c4cd383fd70f220b520d0f3f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;chunk&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;, the &lt;code&gt;chunk&lt;/code&gt; of data will be added to the internal queue for users of the stream to consume. Passing &lt;code&gt;chunk&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt; signals the end of the stream (EOF), after which no more data can be written.</source>
          <target state="translated">場合 &lt;code&gt;chunk&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; 、 &lt;code&gt;Uint8Array&lt;/code&gt; または &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;chunk&lt;/code&gt; データが消費するストリームのユーザのために内部キューに追加されるであろう。 &lt;code&gt;chunk&lt;/code&gt; を &lt;code&gt;null&lt;/code&gt; として渡すと、ストリームの終わり（EOF）が通知され、その後、データを書き込むことができなくなります。</target>
        </trans-unit>
        <trans-unit id="4f925a53c29c5bcd12a5d6dfdd3867f89f8364a3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;delay&lt;/code&gt; is larger than &lt;code&gt;2147483647&lt;/code&gt; or less than &lt;code&gt;1&lt;/code&gt;, the &lt;code&gt;delay&lt;/code&gt; will be set to &lt;code&gt;1&lt;/code&gt;. Non-integer delays are truncated to an integer.</source>
          <target state="translated">ときに &lt;code&gt;delay&lt;/code&gt; より大きい &lt;code&gt;2147483647&lt;/code&gt; 以下 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;delay&lt;/code&gt; に設定されます &lt;code&gt;1&lt;/code&gt; 。非整数遅延は整数に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="c5f55b3490002d692e1a0bc547c5d27f68d920cd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;encoding&lt;/code&gt; is being passed, the &lt;code&gt;byteOffset&lt;/code&gt; parameter is no longer required.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; が渡されるとき、 &lt;code&gt;byteOffset&lt;/code&gt; パラメータは不要になりました。</target>
        </trans-unit>
        <trans-unit id="5f4541cc38a816abc8f23ec4b8971b3ebd174a1a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a file descriptor, the behavior is almost identical to directly calling &lt;code&gt;fs.write()&lt;/code&gt; like:</source>
          <target state="translated">ときに &lt;code&gt;file&lt;/code&gt; ファイルディスクリプタで、動作が直接呼び出すとほとんど同じです &lt;code&gt;fs.write()&lt;/code&gt; ように：</target>
        </trans-unit>
        <trans-unit id="2701fff05e428233b787d036477d25103b1785f2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a file descriptor, the behavior is similar to calling &lt;code&gt;fs.write()&lt;/code&gt; directly (which is recommended). See the notes below on using a file descriptor.</source>
          <target state="translated">ときに &lt;code&gt;file&lt;/code&gt; ファイルディスクリプタで、動作が呼び出しに似て &lt;code&gt;fs.write()&lt;/code&gt; を直接（推奨されています）。ファイル記述子の使用については、以下の注を参照してください。</target>
        </trans-unit>
        <trans-unit id="90ac1e3daacaea2849e260a99067b74ddaee1919" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;file&lt;/code&gt; is a filename, asynchronously writes data to the file, replacing the file if it already exists. &lt;code&gt;data&lt;/code&gt; can be a string or a buffer.</source>
          <target state="translated">ときに &lt;code&gt;file&lt;/code&gt; ファイル名で、非同期がすでに存在する場合、ファイルを置き換え、ファイルにデータを書き込みます。 &lt;code&gt;data&lt;/code&gt; は文字列またはバッファです。</target>
        </trans-unit>
        <trans-unit id="6fae7e3a5f019a0902ac6919aec620f66f32a1e8" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;format&lt;/code&gt; is &lt;code&gt;'jwk'&lt;/code&gt; and the export is successful, the returned promise will be resolved with a JavaScript object conforming to the &lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JSON Web Key&lt;/a&gt; specification.</source>
          <target state="translated">ときに &lt;code&gt;format&lt;/code&gt; ある &lt;code&gt;'jwk'&lt;/code&gt; と輸出が成功し、返された約束はに準拠したJavaScriptオブジェクトに解決されます&lt;a href=&quot;https://tools.ietf.org/html/rfc7517&quot;&gt;JSONのWebキー&lt;/a&gt;仕様。</target>
        </trans-unit>
        <trans-unit id="1281287fb6cbb852cce4f82592cc1ef45ca96d01" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;format&lt;/code&gt; is either &lt;code&gt;'pkcs8'&lt;/code&gt; or &lt;code&gt;'spki'&lt;/code&gt; and the export is successful, the returned promise will be resolved with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt; containing the exported key data.</source>
          <target state="translated">とき &lt;code&gt;format&lt;/code&gt; どちらかである &lt;code&gt;'pkcs8'&lt;/code&gt; または &lt;code&gt;'spki'&lt;/code&gt; と輸出が成功し、返された約束はして解決されます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;。&amp;lt;ArrayBuffer&amp;gt;&lt;/a&gt;エクスポートされたキーデータを含みます。</target>
        </trans-unit>
        <trans-unit id="be558d668e858413c7f08029fc6140d8cc4aaa06" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;main.js&lt;/code&gt; loads &lt;code&gt;a.js&lt;/code&gt;, then &lt;code&gt;a.js&lt;/code&gt; in turn loads &lt;code&gt;b.js&lt;/code&gt;. At that point, &lt;code&gt;b.js&lt;/code&gt; tries to load &lt;code&gt;a.js&lt;/code&gt;. In order to prevent an infinite loop, an &lt;strong&gt;unfinished copy&lt;/strong&gt; of the &lt;code&gt;a.js&lt;/code&gt; exports object is returned to the &lt;code&gt;b.js&lt;/code&gt; module. &lt;code&gt;b.js&lt;/code&gt; then finishes loading, and its &lt;code&gt;exports&lt;/code&gt; object is provided to the &lt;code&gt;a.js&lt;/code&gt; module.</source>
          <target state="translated">とき &lt;code&gt;main.js&lt;/code&gt; のロード &lt;code&gt;a.js&lt;/code&gt; 、その後、 &lt;code&gt;a.js&lt;/code&gt; ターンロードに &lt;code&gt;b.js&lt;/code&gt; 。その時点で、 &lt;code&gt;b.js&lt;/code&gt; ロードしようとし &lt;code&gt;a.js&lt;/code&gt; を。無限ループを防ぐために、 &lt;code&gt;a.js&lt;/code&gt; エクスポートオブジェクトの&lt;strong&gt;未完成のコピー&lt;/strong&gt;が &lt;code&gt;b.js&lt;/code&gt; モジュールに返されます。その後、 &lt;code&gt;b.js&lt;/code&gt; の読み込みが完了し、その &lt;code&gt;exports&lt;/code&gt; オブジェクトが &lt;code&gt;a.js&lt;/code&gt; モジュールに提供されます。</target>
        </trans-unit>
        <trans-unit id="116dd83b9194432a786c2f883396dbf7da0f9614" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node-gyp&lt;/code&gt; runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, Addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</source>
          <target state="translated">とき &lt;code&gt;node-gyp&lt;/code&gt; 実行は、それが特定のリリースのNode.jsのバージョンとダウンロードのいずれかの完全なソースtarballやヘッダーだけを検出します。完全なソースがダウンロードされると、アドオンはNode.js依存関係の完全なセットに完全にアクセスできます。ただし、Node.jsヘッダーのみがダウンロードされる場合、Node.jsによってエクスポートされたシンボルのみが使用可能になります。</target>
        </trans-unit>
        <trans-unit id="5c3380def0df49b31f9e57740ec509df8706002f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node-gyp&lt;/code&gt; runs, it will detect the specific release version of Node.js and download either the full source tarball or just the headers. If the full source is downloaded, addons will have complete access to the full set of Node.js dependencies. However, if only the Node.js headers are downloaded, then only the symbols exported by Node.js will be available.</source>
          <target state="translated">とき &lt;code&gt;node-gyp&lt;/code&gt; 実行は、それが特定のリリースのNode.jsのバージョンとダウンロードのいずれかの完全なソースtarballやヘッダーだけを検出します。完全なソースがダウンロードされると、アドオンはNode.jsの依存関係の完全なセットに完全にアクセスできるようになります。ただし、Node.jsヘッダーのみがダウンロードされる場合は、Node.jsによってエクスポートされたシンボルのみが使用可能になります。</target>
        </trans-unit>
        <trans-unit id="6d0a3872ff2b1c3b6aad0d9e67dc6a7b215bb7bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.buffered&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;callback&lt;/code&gt; will be invoked once for every &lt;code&gt;PerformanceEntry&lt;/code&gt; instance:</source>
          <target state="translated">とき &lt;code&gt;options.buffered&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;callback&lt;/code&gt; すべてのために一度呼び出されます &lt;code&gt;PerformanceEntry&lt;/code&gt; のインスタンス：</target>
        </trans-unit>
        <trans-unit id="b573fea9c7ba66a6043fa6811606bc0e5d00ae79" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.paddingStrategy&lt;/code&gt; is equal to &lt;code&gt;http2.constants.PADDING_STRATEGY_CALLBACK&lt;/code&gt;, the HTTP/2 implementation will consult the &lt;code&gt;options.selectPadding()&lt;/code&gt; callback function, if provided, to determine the specific amount of padding to use per &lt;code&gt;HEADERS&lt;/code&gt; and &lt;code&gt;DATA&lt;/code&gt; frame.</source>
          <target state="translated">&lt;code&gt;options.paddingStrategy&lt;/code&gt; が &lt;code&gt;http2.constants.PADDING_STRATEGY_CALLBACK&lt;/code&gt; と等しい場合、HTTP / 2実装は、 &lt;code&gt;options.selectPadding()&lt;/code&gt; 提供されている場合、options.selectPadding（）コールバック関数を参照して、 &lt;code&gt;HEADERS&lt;/code&gt; および &lt;code&gt;DATA&lt;/code&gt; フレームごとに使用する特定のパディング量を決定します。</target>
        </trans-unit>
        <trans-unit id="f03d6dd27fa836da716d942b341ab7febca3677a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.signal&lt;/code&gt; is set with an &lt;code&gt;AbortSignal&lt;/code&gt; and then &lt;code&gt;abort&lt;/code&gt; on the corresponding &lt;code&gt;AbortController&lt;/code&gt; is called, the request will emit an &lt;code&gt;'error'&lt;/code&gt; event with an &lt;code&gt;AbortError&lt;/code&gt; error.</source>
          <target state="translated">場合 &lt;code&gt;options.signal&lt;/code&gt; を用いて設定されている &lt;code&gt;AbortSignal&lt;/code&gt; 次いで及び &lt;code&gt;abort&lt;/code&gt; 対応上 &lt;code&gt;AbortController&lt;/code&gt; 呼ばれ、要求が放出する &lt;code&gt;'error'&lt;/code&gt; のイベント &lt;code&gt;AbortError&lt;/code&gt; のエラー。</target>
        </trans-unit>
        <trans-unit id="1c36d3249d148321075b6e5c9c7a29462665fd54" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.waitForTrailers&lt;/code&gt; is set, the &lt;code&gt;Http2Stream&lt;/code&gt; will not automatically close when the final &lt;code&gt;DATA&lt;/code&gt; frame is transmitted. User code &lt;em&gt;must&lt;/em&gt; call either &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; or &lt;code&gt;http2stream.close()&lt;/code&gt; to close the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;options.waitForTrailers&lt;/code&gt; が設定されている、 &lt;code&gt;Http2Stream&lt;/code&gt; は最終ないとき自動的に閉じます &lt;code&gt;DATA&lt;/code&gt; フレームが送信されます。ユーザーコードは &lt;code&gt;Http2Stream&lt;/code&gt; を閉じるためにhttp2stream.sendTrailers &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; または &lt;code&gt;http2stream.close()&lt;/code&gt; を呼び出す&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="06cc8b92c09da71177b92ce0b2f605e7dfac1ca4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;options.waitForTrailers&lt;/code&gt; is set, the &lt;code&gt;Http2Stream&lt;/code&gt; will not automatically close when the final &lt;code&gt;DATA&lt;/code&gt; frame is transmitted. User code must call either &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; or &lt;code&gt;http2stream.close()&lt;/code&gt; to close the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;options.waitForTrailers&lt;/code&gt; が設定されている、 &lt;code&gt;Http2Stream&lt;/code&gt; は最終ないとき自動的に閉じます &lt;code&gt;DATA&lt;/code&gt; フレームが送信されます。ユーザーコードは &lt;code&gt;Http2Stream&lt;/code&gt; を閉じるためにhttp2stream.sendTrailers &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; または &lt;code&gt;http2stream.close()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="44b13adb4475f68a6d3809ca001bb5510270e765" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is equal to &lt;code&gt;'gc'&lt;/code&gt;, the &lt;code&gt;performance.flags&lt;/code&gt; property contains additional information about garbage collection operation. The value may be one of:</source>
          <target state="translated">&lt;code&gt;performanceEntry.entryType&lt;/code&gt; が &lt;code&gt;'gc'&lt;/code&gt; と等しい場合、 &lt;code&gt;performance.flags&lt;/code&gt; プロパティには、ガベージコレクション操作に関する追加情報が含まれます。値は次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="b367288f95ded72c1333b22b3d7d31a6efa1b87f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;performanceEntry.entryType&lt;/code&gt; is equal to &lt;code&gt;'gc'&lt;/code&gt;, the &lt;code&gt;performance.kind&lt;/code&gt; property identifies the type of garbage collection operation that occurred. The value may be one of:</source>
          <target state="translated">&lt;code&gt;performanceEntry.entryType&lt;/code&gt; が &lt;code&gt;'gc'&lt;/code&gt; と等しい場合、 &lt;code&gt;performance.kind&lt;/code&gt; プロパティは、発生したガベージコレクション操作のタイプを識別します。値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="fdf7e39c38e83dd8dabed9d41e819f625fb4d322" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserveCursor&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the cursor placement will not be reset to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;preserveCursor&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、カーソルの配置がにリセットされることはありません &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1570becd301409cef87544fe074fd1a4f64f49f4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;quicsocket.listen()&lt;/code&gt; is called, a &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; is created and used by default for all new &lt;code&gt;QuicServerSession&lt;/code&gt; instances. There are times, however, when the &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; to be used for a &lt;code&gt;QuicSession&lt;/code&gt; can only be determined once the client initiates a connection. This is accomplished using the &lt;code&gt;clientHelloHandler&lt;/code&gt; option when calling &lt;code&gt;quicsocket.listen()&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;quicsocket.listen()&lt;/code&gt; 、と呼ばれている&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt;作成され、すべての新しいのためにデフォルトで使用され &lt;code&gt;QuicServerSession&lt;/code&gt; のインスタンス。時が、しかし、があります&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;。&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt;のために使用される &lt;code&gt;QuicSession&lt;/code&gt; クライアントが接続を開始した後にのみ決定することができます。これは、 &lt;code&gt;quicsocket.listen()&lt;/code&gt; を呼び出すときに &lt;code&gt;clientHelloHandler&lt;/code&gt; オプションを使用して実行されます。</target>
        </trans-unit>
        <trans-unit id="a39666ec417748f8c63aee587bbe9944f396c7a0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;readable._read()&lt;/code&gt; is called, if data is available from the resource, the implementation should begin pushing that data into the read queue using the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;this.push(dataChunk)&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;_read()&lt;/code&gt; should continue reading from the resource and pushing data until &lt;code&gt;readable.push()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Only when &lt;code&gt;_read()&lt;/code&gt; is called again after it has stopped should it resume pushing additional data onto the queue.</source>
          <target state="translated">&lt;code&gt;readable._read()&lt;/code&gt; が呼び出されたときに、リソースからデータが利用可能な場合、実装は&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;this.push(dataChunk)&lt;/code&gt; &lt;/a&gt;メソッドを使用してそのデータを読み取りキューにプッシュし始める必要があります。 &lt;code&gt;_read()&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返すまで、_read（）はリソースからの &lt;code&gt;readable.push()&lt;/code&gt; とデータのプッシュを続行する必要があります。 &lt;code&gt;_read()&lt;/code&gt; が停止した後に再度呼び出された場合にのみ、キューへの追加データのプッシュを再開する必要があります。</target>
        </trans-unit>
        <trans-unit id="415b52239b8b94c7fa3114478d7d7ecdce354a16" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;readable.readableFlowing&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no mechanism for consuming the stream's data is provided. Therefore, the stream will not generate data. While in this state, attaching a listener for the &lt;code&gt;'data'&lt;/code&gt; event, calling the &lt;code&gt;readable.pipe()&lt;/code&gt; method, or calling the &lt;code&gt;readable.resume()&lt;/code&gt; method will switch &lt;code&gt;readable.readableFlowing&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, causing the &lt;code&gt;Readable&lt;/code&gt; to begin actively emitting events as data is generated.</source>
          <target state="translated">&lt;code&gt;readable.readableFlowing&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、ストリームのデータを使用するためのメカニズムは提供されません。したがって、ストリームはデータを生成しません。一方、この状態でのリスナーを取り付ける &lt;code&gt;'data'&lt;/code&gt; 呼び出し、イベント &lt;code&gt;readable.pipe()&lt;/code&gt; メソッドを呼び出すか、 &lt;code&gt;readable.resume()&lt;/code&gt; 切り替わり方法 &lt;code&gt;readable.readableFlowing&lt;/code&gt; のに &lt;code&gt;true&lt;/code&gt; 引き起こし、 &lt;code&gt;Readable&lt;/code&gt; として積極的に放出イベントを開始しますデータが生成されます。</target>
        </trans-unit>
        <trans-unit id="8e9d949fb4bb20efb20445fe1a7086affdc76d63" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;request.url&lt;/code&gt; is &lt;code&gt;'/status?name=ryan'&lt;/code&gt; and &lt;code&gt;request.headers.host&lt;/code&gt; is &lt;code&gt;'localhost:3000'&lt;/code&gt;:</source>
          <target state="translated">とき &lt;code&gt;request.url&lt;/code&gt; がある &lt;code&gt;'/status?name=ryan'&lt;/code&gt; と &lt;code&gt;request.headers.host&lt;/code&gt; がある &lt;code&gt;'localhost:3000'&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="a0d03546e4741a7e49019e1ebd77ec915605ef57" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;stdout&lt;/code&gt; is a TTY, calling &lt;code&gt;console.clear()&lt;/code&gt; will attempt to clear the TTY. When &lt;code&gt;stdout&lt;/code&gt; is not a TTY, this method does nothing.</source>
          <target state="translated">とき &lt;code&gt;stdout&lt;/code&gt; が呼び出し、TTYある &lt;code&gt;console.clear()&lt;/code&gt; TTYをクリアしようとします。 &lt;code&gt;stdout&lt;/code&gt; がTTYでない場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="dde7ffbfdb4a192362f42e087299ff40d0514549" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;, the actual byte length is returned.</source>
          <target state="translated">ときに &lt;code&gt;string&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;、実際のバイト長が返されます。</target>
        </trans-unit>
        <trans-unit id="9ac661dcdccd7433059697ab48894dd8e9ddbe65" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;string&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;, the byte length as reported by &lt;code&gt;.byteLength&lt;/code&gt; is returned.</source>
          <target state="translated">ときに &lt;code&gt;string&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt; &lt;code&gt;DataView&lt;/code&gt; の&lt;/a&gt;/ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;、によって報告されたバイト長 &lt;code&gt;.byteLength&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3e85ba5aa76361578aa11ab45899f063297a4632" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; can be extracted using either &lt;code&gt;subtleCrypto.exportKey()&lt;/code&gt; or &lt;code&gt;subtleCrypto.wrapKey()&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;true&lt;/code&gt; 、&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;のいずれかを用いて抽出することができる &lt;code&gt;subtleCrypto.exportKey()&lt;/code&gt; または &lt;code&gt;subtleCrypto.wrapKey()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b83fecde6d4c12f20d0cd6ce7299c23edb443120" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;QuicStream&lt;/code&gt; is bidirectional. Both the readable and writable sides of the &lt;code&gt;QuicStream&lt;/code&gt;&lt;code&gt;Duplex&lt;/code&gt; are open.</source>
          <target state="translated">とき &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;QuicStream&lt;/code&gt; は双方向です。両方の読み書き可能な側面 &lt;code&gt;QuicStream&lt;/code&gt; &lt;code&gt;Duplex&lt;/code&gt; 開放されています。</target>
        </trans-unit>
        <trans-unit id="3b97abb19ab4fafe544fd2b1944b99263574df87" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;write&lt;/code&gt; function is called with empty string or buffer, it does nothing and waits for more input.</source>
          <target state="translated">ときに &lt;code&gt;write&lt;/code&gt; 機能が空の文字列またはバッファーで呼ばれ、それは、複数の入力のために何もして待機しません。</target>
        </trans-unit>
        <trans-unit id="555a795705636054e34975bf9307cbe9b5899232" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a constructor for a class that was defined using &lt;code&gt;napi_define_class()&lt;/code&gt;, the &lt;code&gt;napi_callback&lt;/code&gt; for the constructor is invoked. After constructing an instance of the native class, the callback must then call &lt;code&gt;napi_wrap()&lt;/code&gt; to wrap the newly constructed instance in the already-created JavaScript object that is the &lt;code&gt;this&lt;/code&gt; argument to the constructor callback. (That &lt;code&gt;this&lt;/code&gt; object was created from the constructor function's &lt;code&gt;prototype&lt;/code&gt;, so it already has definitions of all the instance properties and methods.)</source>
          <target state="translated">JavaScriptコードが &lt;code&gt;napi_define_class()&lt;/code&gt; を使用して定義されたクラスのコンストラクターを呼び出すと、コンストラクターの &lt;code&gt;napi_callback&lt;/code&gt; が呼び出されます。ネイティブクラスのインスタンスを作成した後、コールバックは &lt;code&gt;napi_wrap()&lt;/code&gt; を呼び出して、新しく作成されたインスタンスを、コンストラクタコールバックの &lt;code&gt;this&lt;/code&gt; 引数である作成済みのJavaScriptオブジェクトにラップする必要があります。 （ &lt;code&gt;this&lt;/code&gt; オブジェクトは、コンストラクター関数の &lt;code&gt;prototype&lt;/code&gt; から作成されたため、すべてのインスタンスプロパティとメソッドの定義が既に含まれています。）</target>
        </trans-unit>
        <trans-unit id="1774b24fbf47d198b3a30100903828d7409b5b6c" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a method or property accessor on the class, the corresponding &lt;code&gt;napi_callback&lt;/code&gt; C++ function is invoked. For an instance callback, &lt;a href=&quot;#n_api_napi_unwrap&quot;&gt;&lt;code&gt;napi_unwrap&lt;/code&gt;&lt;/a&gt; obtains the C++ instance that is the target of the call.</source>
          <target state="translated">JavaScriptコードがクラスのメソッドまたはプロパティアクセサーを呼び出すと、対応する &lt;code&gt;napi_callback&lt;/code&gt; C ++関数が呼び出されます。インスタンスコールバックの場合、&lt;a href=&quot;#n_api_napi_unwrap&quot;&gt; &lt;code&gt;napi_unwrap&lt;/code&gt; &lt;/a&gt;は、呼び出しのターゲットであるC ++インスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="0918571bdde3395da834b0207495ce14e0fe8c8e" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes a method or property accessor on the class, the corresponding &lt;code&gt;napi_callback&lt;/code&gt; is invoked. If the callback is for an instance method or accessor, then the &lt;code&gt;this&lt;/code&gt; argument to the callback is the wrapper object; the wrapped C++ instance that is the target of the call can be obtained then by calling &lt;code&gt;napi_unwrap()&lt;/code&gt; on the wrapper object.</source>
          <target state="translated">JavaScriptコードがクラスのメソッドまたはプロパティアクセサーを呼び出すと、対応する &lt;code&gt;napi_callback&lt;/code&gt; が呼び出されます。コールバックがインスタンスメソッドまたはアクセサーの場合、コールバックの &lt;code&gt;this&lt;/code&gt; 引数はラッパーオブジェクトです。呼び出しのターゲットであるラップされたC ++インスタンスは、ラッパーオブジェクトで &lt;code&gt;napi_unwrap()&lt;/code&gt; を呼び出すことによって取得できます。</target>
        </trans-unit>
        <trans-unit id="0ace059614f2d50957d2d6ec33c21258514bba31" translate="yes" xml:space="preserve">
          <source>When JavaScript code invokes the constructor, the constructor callback uses &lt;a href=&quot;#n_api_napi_wrap&quot;&gt;&lt;code&gt;napi_wrap&lt;/code&gt;&lt;/a&gt; to wrap a new C++ instance in a JavaScript object, then returns the wrapper object.</source>
          <target state="translated">JavaScriptコードがコンストラクターを呼び出すと、コンストラクターコールバックは&lt;a href=&quot;#n_api_napi_wrap&quot;&gt; &lt;code&gt;napi_wrap&lt;/code&gt; &lt;/a&gt;を使用して新しいC ++インスタンスをJavaScriptオブジェクトにラップし、ラッパーオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="e1e6d67a00f46d577c6fd5ff65d30fd56c2bc6ed" translate="yes" xml:space="preserve">
          <source>When Node.js detects that it is being run with a text terminal (&quot;TTY&quot;) attached, &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; will, by default, be initialized as an instance of &lt;code&gt;tty.ReadStream&lt;/code&gt; and both &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; will, by default be instances of &lt;code&gt;tty.WriteStream&lt;/code&gt;. The preferred method of determining whether Node.js is being run within a TTY context is to check that the value of the &lt;code&gt;process.stdout.isTTY&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">Node.jsがテキストターミナル（ &quot;TTY&quot;）が接続された状態で実行されていることを検出すると、デフォルトでは、&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;tty.ReadStream&lt;/code&gt; のインスタンスとして初期化され、&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; の&lt;/a&gt;両方がデフォルトは &lt;code&gt;tty.WriteStream&lt;/code&gt; のインスタンスです。Node.jsがTTYコンテキスト内で実行されているかどうかを判断する推奨される方法は、 &lt;code&gt;process.stdout.isTTY&lt;/code&gt; プロパティの値が &lt;code&gt;true&lt;/code&gt; であることを確認することです。</target>
        </trans-unit>
        <trans-unit id="0d04f8d87844828d3bad4ca9fd29c03215b925a5" translate="yes" xml:space="preserve">
          <source>When PEM encoding was selected, the result will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">PEMエンコーディングが選択されている場合、結果は文字列となり、そうでない場合はDERとしてエンコーディングされたデータを含むバッファとなります。</target>
        </trans-unit>
        <trans-unit id="712e5de5a18b32a0cd5de594028fd6970962defd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Buffer&lt;/code&gt; instance is written to the &lt;code&gt;StringDecoder&lt;/code&gt; instance, an internal buffer is used to ensure that the decoded string does not contain any incomplete multibyte characters. These are held in the buffer until the next call to &lt;code&gt;stringDecoder.write()&lt;/code&gt; or until &lt;code&gt;stringDecoder.end()&lt;/code&gt; is called.</source>
          <target state="translated">場合 &lt;code&gt;Buffer&lt;/code&gt; インスタンスが書き込まれる &lt;code&gt;StringDecoder&lt;/code&gt; のインスタンス、内部バッファは、デコードされた文字列は、任意の不完全なマルチバイト文字が含まれていないことを確実にするために使用されます。これらは、次の呼び出しまでバッファに保持されている &lt;code&gt;stringDecoder.write()&lt;/code&gt; またはまで &lt;code&gt;stringDecoder.end()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="d7f554f90810f250f3efe7dd028d56f55a04d642" translate="yes" xml:space="preserve">
          <source>When a TCP connection is created, it will have Nagle's algorithm enabled.</source>
          <target state="translated">TCP接続が作成されると、Nagleのアルゴリズムが有効になります。</target>
        </trans-unit>
        <trans-unit id="19927653ece31251319386d70d376450d99eecd0" translate="yes" xml:space="preserve">
          <source>When a connection is closed by the client or the server, it is removed from the pool. Any unused sockets in the pool will be unrefed so as not to keep the Node.js process running when there are no outstanding requests. (see &lt;a href=&quot;net#net_socket_unref&quot;&gt;&lt;code&gt;socket.unref()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">接続がクライアントまたはサーバーによって閉じられると、プールから削除されます。未処理のリクエストがない場合にNode.jsプロセスを実行し続けないように、プール内の未使用のソケットは参照されません。（&lt;a href=&quot;net#net_socket_unref&quot;&gt; &lt;code&gt;socket.unref()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e10f31dacabf18eebe8a53f9a06341d949975f16" translate="yes" xml:space="preserve">
          <source>When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears, then the &lt;code&gt;previousStat&lt;/code&gt; reported in the second callback event (the file's reappearance) will be the same as the &lt;code&gt;previousStat&lt;/code&gt; of the first callback event (its disappearance).</source>
          <target state="translated">&lt;code&gt;fs.watchFile()&lt;/code&gt; によって監視されているファイルが消えて再表示されると、2番目のコールバックイベントで報告された &lt;code&gt;previousStat&lt;/code&gt; （ファイルの再出現）は、最初のコールバックイベントの &lt;code&gt;previousStat&lt;/code&gt; （その消失）と同じになります。</target>
        </trans-unit>
        <trans-unit id="0583ea7689fd44ba5f0901f941df4efc5774f1dd" translate="yes" xml:space="preserve">
          <source>When a file being watched by &lt;code&gt;fs.watchFile()&lt;/code&gt; disappears and reappears, then the contents of &lt;code&gt;previous&lt;/code&gt; in the second callback event (the file's reappearance) will be the same as the contents of &lt;code&gt;previous&lt;/code&gt; in the first callback event (its disappearance).</source>
          <target state="translated">&lt;code&gt;fs.watchFile()&lt;/code&gt; によって監視されているファイルが消えて再表示されると、2番目のコールバックイベントの &lt;code&gt;previous&lt;/code&gt; の内容（ファイルの再表示）は、最初のコールバックイベントの &lt;code&gt;previous&lt;/code&gt; の内容（その消失）と同じになります。</target>
        </trans-unit>
        <trans-unit id="f1894f695ef22c3ee491695c8dc21d4765ddad8a" translate="yes" xml:space="preserve">
          <source>When a file is run directly from Node.js, &lt;code&gt;require.main&lt;/code&gt; is set to its &lt;code&gt;module&lt;/code&gt;. That means that it is possible to determine whether a file has been run directly by testing &lt;code&gt;require.main === module&lt;/code&gt;.</source>
          <target state="translated">Node.jsから直接ファイルを実行すると、 &lt;code&gt;require.main&lt;/code&gt; がその &lt;code&gt;module&lt;/code&gt; 設定されます。つまり、 &lt;code&gt;require.main === module&lt;/code&gt; テストすることで、ファイルが直接実行されたかどうかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="5b842430962e7964c7770de7491a5dbb686db47c" translate="yes" xml:space="preserve">
          <source>When a listener is registered using the &lt;code&gt;eventEmitter.on()&lt;/code&gt; method, that listener is invoked &lt;em&gt;every time&lt;/em&gt; the named event is emitted.</source>
          <target state="translated">&lt;code&gt;eventEmitter.on()&lt;/code&gt; メソッドを使用してリスナーが登録されると、そのリスナーは、指定されたイベントが発行される&lt;em&gt;たびに&lt;/em&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fb4289ace81cecf2b85810326c8fe6461f147516" translate="yes" xml:space="preserve">
          <source>When a listener is registered using the &lt;code&gt;eventEmitter.on()&lt;/code&gt; method, that listener will be invoked &lt;em&gt;every time&lt;/em&gt; the named event is emitted.</source>
          <target state="translated">&lt;code&gt;eventEmitter.on()&lt;/code&gt; メソッドを使用してリスナーが登録されると、そのリスナーは、名前付きイベントが発生する&lt;em&gt;たび&lt;/em&gt;に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ec661b7d7bfcd43207b92f13fc2978eb8e876b58" translate="yes" xml:space="preserve">
          <source>When a new &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; is created, a custom evaluation function may be provided. This can be used, for instance, to implement fully customized REPL applications.</source>
          <target state="translated">新しい&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;が作成されると、カスタム評価関数が提供される場合があります。これは、たとえば、完全にカスタマイズされたREPLアプリケーションを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2de6c1acec16c787db17c177ceceacef6cbfddcd" translate="yes" xml:space="preserve">
          <source>When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, &lt;code&gt;process.title&lt;/code&gt; is limited to the size of the binary name plus the length of the command line arguments because setting the &lt;code&gt;process.title&lt;/code&gt; overwrites the &lt;code&gt;argv&lt;/code&gt; memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the &lt;code&gt;environ&lt;/code&gt; memory but that was potentially insecure and confusing in some (rather obscure) cases.</source>
          <target state="translated">新しい値が割り当てられると、プラットフォームごとにタイトルの最大長の制限が異なります。通常、このような制限はかなり限定されています。たとえば、LinuxとmacOSでは、 &lt;code&gt;process.title&lt;/code&gt; を設定すると &lt;code&gt;process.title&lt;/code&gt; の &lt;code&gt;argv&lt;/code&gt; メモリが上書きされるため、process.titleはバイナリ名のサイズとコマンドライン引数の長さに加えて制限されます。Node.js v0.8では、 &lt;code&gt;environ&lt;/code&gt; メモリも上書きすることにより、より長いプロセスタイトル文字列が可能でしたが、一部の（かなりあいまいな）場合に、これは安全でなく混乱する可能性がありました。</target>
        </trans-unit>
        <trans-unit id="41f14c991157e8be59395364f28e0f2bab7ae43c" translate="yes" xml:space="preserve">
          <source>When a new value is assigned, different platforms will impose different maximum length restrictions on the title. Usually such restrictions are quite limited. For instance, on Linux and macOS, &lt;code&gt;process.title&lt;/code&gt; is limited to the size of the binary name plus the length of the command-line arguments because setting the &lt;code&gt;process.title&lt;/code&gt; overwrites the &lt;code&gt;argv&lt;/code&gt; memory of the process. Node.js v0.8 allowed for longer process title strings by also overwriting the &lt;code&gt;environ&lt;/code&gt; memory but that was potentially insecure and confusing in some (rather obscure) cases.</source>
          <target state="translated">新しい値が割り当てられると、プラットフォームが異なれば、タイトルに異なる最大長の制限が課されます。通常、そのような制限はかなり制限されています。たとえば、LinuxおよびmacOSでは、 &lt;code&gt;process.title&lt;/code&gt; を設定すると &lt;code&gt;process.title&lt;/code&gt; の &lt;code&gt;argv&lt;/code&gt; メモリが上書きされるため、process.titleはバイナリ名のサイズとコマンドライン引数の長さに制限されます。 Node.js v0.8は、 &lt;code&gt;environ&lt;/code&gt; メモリも上書きすることで、より長いプロセスタイトル文字列を許可していましたが、それは潜在的に安全ではなく、一部の（かなりあいまいな）ケースでは混乱を招きました。</target>
        </trans-unit>
        <trans-unit id="3e6192f9f2edc651bd27c25fb6f640d241f78140" translate="yes" xml:space="preserve">
          <source>When a new worker is forked the cluster module will emit a &lt;code&gt;'fork'&lt;/code&gt; event. This can be used to log worker activity, and create a custom timeout.</source>
          <target state="translated">新しいワーカーがフォークされると、クラスターモジュールは &lt;code&gt;'fork'&lt;/code&gt; イベントを発行します。これを使用して、ワーカーアクティビティをログに記録し、カスタムタイムアウトを作成できます。</target>
        </trans-unit>
        <trans-unit id="ccdde242365773b6d1c801177f6044e7fed74140" translate="yes" xml:space="preserve">
          <source>When a package has an &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, this will take precedence over the &lt;code&gt;&quot;main&quot;&lt;/code&gt; field when importing the package by name.</source>
          <target state="translated">パッケージに&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドがある場合、名前でパッケージをインポートするときに、これは &lt;code&gt;&quot;main&quot;&lt;/code&gt; フィールドよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="ac6ece066e2e44ee56af54a0e437179aefc818e3" translate="yes" xml:space="preserve">
          <source>When a policy check fails, Node.js by default will throw an error. It is possible to change the error behavior to one of a few possibilities by defining an &quot;onerror&quot; field in a policy manifest. The following values are available to change the behavior:</source>
          <target state="translated">ポリシーチェックが失敗した場合、デフォルトではNode.jsはエラーをスローします。ポリシーマニフェストで &quot;onerror &quot;フィールドを定義することで、エラーの動作をいくつかの可能性のうちの1つに変更することができます。挙動を変更するには、以下の値が利用可能です。</target>
        </trans-unit>
        <trans-unit id="f6734825ccf390de2be59d84f5e066dbca41f678" translate="yes" xml:space="preserve">
          <source>When a registered event listener throws (or returns a Promise that rejects), by default the error is forwarded to the &lt;code&gt;process.on('error')&lt;/code&gt; event on &lt;code&gt;process.nextTick()&lt;/code&gt;. Throwing within an event listener will &lt;em&gt;not&lt;/em&gt; stop the other registered handlers from being invoked.</source>
          <target state="translated">登録されたイベントリスナーがスローする（または拒否するPromiseを返す）と、デフォルトでは、エラーは &lt;code&gt;process.nextTick()&lt;/code&gt; の &lt;code&gt;process.on('error')&lt;/code&gt; イベントに転送されます。イベントリスナー内でスローしても、登録されている他のハンドラーの呼び出し&lt;em&gt;は&lt;/em&gt;停止し&lt;em&gt;ません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="640af45d9fc3cb08af64151f9dd193ba65c4834a" translate="yes" xml:space="preserve">
          <source>When a report is written, start and end messages are issued to stderr and the filename of the report is returned to the caller. The default filename includes the date, time, PID and a sequence number. The sequence number helps in associating the report dump with the runtime state if generated multiple times for the same Node.js process.</source>
          <target state="translated">レポートが書き込まれると、開始と終了のメッセージが標準エラーに発行され、レポートのファイル名が呼び出し元に返されます。デフォルトのファイル名には、日付、時刻、PID、シーケンス番号が含まれます。シーケンス番号は、同じNode.jsプロセスに対して複数回生成された場合に、レポートダンプを実行時の状態に関連付けるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="15bb4b88c15a01df74babc65463bcbe4252a9901" translate="yes" xml:space="preserve">
          <source>When a single function has been added as a handler multiple times for a single event (as in the example below), &lt;code&gt;removeListener()&lt;/code&gt; will remove the most recently added instance. In the example the &lt;code&gt;once('ping')&lt;/code&gt; listener is removed:</source>
          <target state="translated">単一の関数が単一のイベントのハンドラーとして複数回追加された場合（以下の例のように）、 &lt;code&gt;removeListener()&lt;/code&gt; は最後に追加されたインスタンスを削除します。この例では、 &lt;code&gt;once('ping')&lt;/code&gt; リスナーが削除されています。</target>
        </trans-unit>
        <trans-unit id="511a8bb474a1e812669ff871a25d9353657ef621" translate="yes" xml:space="preserve">
          <source>When a string is passed as an &lt;code&gt;origin&lt;/code&gt;, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; is the ASCII string &lt;code&gt;'https://example.org'&lt;/code&gt;. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.</source>
          <target state="translated">文字列が &lt;code&gt;origin&lt;/code&gt; として渡されると、URLとして解析され、originが派生します。たとえば、HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; のオリジンはASCII文字列 &lt;code&gt;'https://example.org'&lt;/code&gt; です。指定された文字列をURLとして解析できない場合、または有効なオリジンを導出できない場合は、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="3e15aaa4c3d9a784868ceb60e33edb993d7e58a2" translate="yes" xml:space="preserve">
          <source>When a string is passed for the &lt;code&gt;originOrStream&lt;/code&gt; argument, it will be parsed as a URL and the origin will be derived. For instance, the origin for the HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; is the ASCII string &lt;code&gt;'https://example.org'&lt;/code&gt;. An error will be thrown if either the given string cannot be parsed as a URL or if a valid origin cannot be derived.</source>
          <target state="translated">&lt;code&gt;originOrStream&lt;/code&gt; 引数に文字列が渡されると、文字列はURLとして解析され、オリジンが派生します。たとえば、HTTP URL &lt;code&gt;'https://example.org/foo/bar'&lt;/code&gt; のオリジンはASCII文字列 &lt;code&gt;'https://example.org'&lt;/code&gt; です。指定された文字列をURLとして解析できない場合、または有効なオリジンを導出できない場合は、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="17832f33592cea32687ed0391953029199680044" translate="yes" xml:space="preserve">
          <source>When all of the &lt;code&gt;QuicEndpoint&lt;/code&gt; instances associated with a &lt;code&gt;QuicSocket&lt;/code&gt; have closed, the &lt;code&gt;QuicEndpoint&lt;/code&gt; will also automatically close.</source>
          <target state="translated">すべてのとき &lt;code&gt;QuicEndpoint&lt;/code&gt; のに関連付けられているインスタンス &lt;code&gt;QuicSocket&lt;/code&gt; が閉じている、 &lt;code&gt;QuicEndpoint&lt;/code&gt; も自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="afd64c1a21186719f41d045393b1ae954b443d5b" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;Http2Stream&lt;/code&gt; instance is destroyed, an attempt will be made to send an &lt;code&gt;RST_STREAM&lt;/code&gt; frame to the connected peer.</source>
          <target state="translated">場合 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが破棄され、試みが送信するようになされる &lt;code&gt;RST_STREAM&lt;/code&gt; の接続ピアにフレーム。</target>
        </trans-unit>
        <trans-unit id="9126903cfca7540b84da69ca08800be0ac994dcc" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;fs.watchFile&lt;/code&gt; operation results in an &lt;code&gt;ENOENT&lt;/code&gt; error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.10.</source>
          <target state="translated">とき &lt;code&gt;fs.watchFile&lt;/code&gt; の中に演算結果 &lt;code&gt;ENOENT&lt;/code&gt; のエラーは、それが（日付のか、Unixのエポック）全てゼロのフィールドを持つ、一度リスナーを起動します。ファイルが後で作成された場合、リスナーは最新のstatオブジェクトを使用して再度呼び出されます。これはv0.10以降の機能の変更です。</target>
        </trans-unit>
        <trans-unit id="15d5ff09225189118135ef540fc0d06959e1b6ea" translate="yes" xml:space="preserve">
          <source>When an IPC channel has been established between the parent and child ( i.e. when using &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;subprocess.send()&lt;/code&gt; method can be used to send messages to the child process. When the child process is a Node.js instance, these messages can be received via the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">親と子の間にIPCチャネルが確立されている場合（つまり、&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;を使用している場合）、 &lt;code&gt;subprocess.send()&lt;/code&gt; メソッドを使用して、子プロセスにメッセージを送信できます。子プロセスがNode.jsインスタンスである場合、これらのメッセージは&lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt;イベントを介して受信できます。</target>
        </trans-unit>
        <trans-unit id="1e27b21d76575a6545a822c2e33f4c81b2756f09" translate="yes" xml:space="preserve">
          <source>When an addon has additional threads and JavaScript functions need to be invoked based on the processing completed by those threads, those threads must communicate with the addon's main thread so that the main thread can invoke the JavaScript function on their behalf. The thread-safe function APIs provide an easy way to do this.</source>
          <target state="translated">アドオンに追加のスレッドがあり、それらのスレッドで完了した処理に基づいて JavaScript 関数を呼び出す必要がある場合、それらのスレッドはアドオンのメインスレッドと通信し、メインスレッドがそのスレッドに代わって JavaScript 関数を呼び出すことができるようにしなければなりません。スレッドセーフ関数APIはこれを簡単に行う方法を提供します。</target>
        </trans-unit>
        <trans-unit id="c7a942a0f6d718e366c908d56adfffde40992b49" translate="yes" xml:space="preserve">
          <source>When an application is using a package that provides both CommonJS and ES module sources, there is a risk of certain bugs if both versions of the package get loaded. This potential comes from the fact that the &lt;code&gt;pkgInstance&lt;/code&gt; created by &lt;code&gt;const pkgInstance = require('pkg')&lt;/code&gt; is not the same as the &lt;code&gt;pkgInstance&lt;/code&gt; created by &lt;code&gt;import pkgInstance from 'pkg'&lt;/code&gt; (or an alternative main path like &lt;code&gt;'pkg/module'&lt;/code&gt;). This is the &amp;ldquo;dual package hazard,&amp;rdquo; where two versions of the same package can be loaded within the same runtime environment. While it is unlikely that an application or package would intentionally load both versions directly, it is common for an application to load one version while a dependency of the application loads the other version. This hazard can happen because Node.js supports intermixing CommonJS and ES modules, and can lead to unexpected behavior.</source>
          <target state="translated">アプリケーションがCommonJSとESモジュールソースの両方を提供するパッケージを使用している場合、パッケージの両方のバージョンがロードされると、特定のバグのリスクがあります。この電位は事実から来る &lt;code&gt;pkgInstance&lt;/code&gt; によって作成 &lt;code&gt;const pkgInstance = require('pkg')&lt;/code&gt; と同じではない &lt;code&gt;pkgInstance&lt;/code&gt; により作成された &lt;code&gt;import pkgInstance from 'pkg'&lt;/code&gt; （等代替メインパス &lt;code&gt;'pkg/module'&lt;/code&gt; ）。これは「デュアルパッケージハザード」であり、同じパッケージの2つのバージョンを同じランタイム環境内にロードできます。アプリケーションまたはパッケージが意図的に両方のバージョンを直接ロードする可能性は低いですが、アプリケーションの依存関係がもう一方のバージョンをロードするときに、アプリケーションが一方のバージョンをロードするのが一般的です。この危険は、Node.jsがCommonJSモジュールとESモジュールの混合をサポートしているために発生する可能性があり、予期しない動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="9756dd0510cc11850f4ec535793e6081c77c3248" translate="yes" xml:space="preserve">
          <source>When an asynchronous method is called on an object that is an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;, errors can be routed to that object's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;であるオブジェクトで非同期メソッドが呼び出されると、エラーはそのオブジェクトの &lt;code&gt;'error'&lt;/code&gt; イベントにルーティングされます。</target>
        </trans-unit>
        <trans-unit id="d18e3a14276353b8018b491a75c5696499ddaf86" translate="yes" xml:space="preserve">
          <source>When an asynchronous operation is initiated (such as a TCP server receiving a new connection) or completes (such as writing data to disk) a callback is called to notify the user. The &lt;code&gt;before&lt;/code&gt; callback is called just before said callback is executed. &lt;code&gt;asyncId&lt;/code&gt; is the unique identifier assigned to the resource about to execute the callback.</source>
          <target state="translated">非同期操作が開始されると（TCPサーバーが新しい接続を受信するなど）、または完了すると（ディスクへのデータの書き込みなど）、コールバックが呼び出されてユーザーに通知されます。 &lt;code&gt;before&lt;/code&gt; のコールバックは、直前に呼び出されるコールバックが実行されると言われています。 &lt;code&gt;asyncId&lt;/code&gt; は、コールバックを実行しようとしているリソースに割り当てられた一意の識別子です。</target>
        </trans-unit>
        <trans-unit id="d6b9733c7131b1f270bd8a59447f8373638fdeb8" translate="yes" xml:space="preserve">
          <source>When an error occurs within an &lt;code&gt;EventEmitter&lt;/code&gt; instance, the typical action is for an &lt;code&gt;'error'&lt;/code&gt; event to be emitted. These are treated as special cases within Node.js.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; インスタンス内でエラーが発生した場合、一般的なアクションは &lt;code&gt;'error'&lt;/code&gt; イベントが発生することです。これらは、Node.js内では特別なケースとして扱われます。</target>
        </trans-unit>
        <trans-unit id="881c946d092eee0c2019dddd26763c107f92074b" translate="yes" xml:space="preserve">
          <source>When an exception is pending one of two approaches can be employed.</source>
          <target state="translated">例外が保留されている場合は、2つのアプローチのうちの1つを採用することができます。</target>
        </trans-unit>
        <trans-unit id="b8d8e67ab97c6a356d400452947e7a1f5c25de46" translate="yes" xml:space="preserve">
          <source>When an idle timeout is triggered the socket will receive a &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event but the connection will not be severed. The user must manually call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;socket.end()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#net_socket_destroy_error&quot;&gt;&lt;code&gt;socket.destroy()&lt;/code&gt;&lt;/a&gt; to end the connection.</source>
          <target state="translated">アイドルタイムアウトがトリガーされると、ソケットは&lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt;イベントを受信しますが、接続は切断されません。ユーザーは手動で&lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;socket.end()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#net_socket_destroy_error&quot;&gt; &lt;code&gt;socket.destroy()&lt;/code&gt; &lt;/a&gt;を呼び出して接続を終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="b12a2263759010fd5cb937026f4d3cc1d87aca96" translate="yes" xml:space="preserve">
          <source>When an idle timeout is triggered the socket will receive a &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event but the connection will not be severed. The user must manually call &lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt;&lt;code&gt;socket.end()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#net_socket_destroy_exception&quot;&gt;&lt;code&gt;socket.destroy()&lt;/code&gt;&lt;/a&gt; to end the connection.</source>
          <target state="translated">アイドルタイムアウトがトリガーされると、ソケットは&lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt;イベントを受け取りますが、接続は切断されません。ユーザーは手動で&lt;a href=&quot;#net_socket_end_data_encoding_callback&quot;&gt; &lt;code&gt;socket.end()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#net_socket_destroy_exception&quot;&gt; &lt;code&gt;socket.destroy()&lt;/code&gt; &lt;/a&gt;を呼び出して接続を終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="77087efee8715a6dc2457aee2202585a65670e3f" translate="yes" xml:space="preserve">
          <source>When any of the workers die the cluster module will emit the &lt;code&gt;'exit'&lt;/code&gt; event.</source>
          <target state="translated">ワーカーのいずれかが死亡すると、クラスターモジュールは &lt;code&gt;'exit'&lt;/code&gt; イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="116eb8d9b320b92f34b0093303e05d42b3f6ac48" translate="yes" xml:space="preserve">
          <source>When assigning a non-string property to &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment may result in a thrown error. Please convert the property to a string before assigning it to &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">非文字列プロパティを&lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt;に割り当てると、割り当てられた値は暗黙的に文字列に変換されます。割り当てられた値が文字列、ブール値、または数値でない場合、この動作は非推奨です。将来的には、このような割り当てによってエラーがスローされる可能性があります。プロパティを文字列に変換してから、 &lt;code&gt;process.env&lt;/code&gt; に割り当ててください。</target>
        </trans-unit>
        <trans-unit id="7d917de109fb537bcc255120b58c25b9a1a0ef08" translate="yes" xml:space="preserve">
          <source>When assigning a non-string property to &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;, the assigned value is implicitly converted to a string. This behavior is deprecated if the assigned value is not a string, boolean, or number. In the future, such assignment might result in a thrown error. Please convert the property to a string before assigning it to &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">文字列以外のプロパティを&lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt;に割り当てると、割り当てられた値は暗黙的に文字列に変換されます。割り当てられた値が文字列、ブール値、または数値でない場合、この動作は非推奨になります。将来的には、そのような割り当てによってエラーがスローされる可能性があります。それを &lt;code&gt;process.env&lt;/code&gt; に割り当てる前に、プロパティを文字列に変換してください。</target>
        </trans-unit>
        <trans-unit id="8b818f741bbe7288d1ef2ca2faa3d09c3b90b166" translate="yes" xml:space="preserve">
          <source>When building addons with &lt;code&gt;node-gyp&lt;/code&gt;, using the macro &lt;code&gt;NODE_GYP_MODULE_NAME&lt;/code&gt; as the first parameter of &lt;code&gt;NODE_MODULE()&lt;/code&gt; will ensure that the name of the final binary will be passed to &lt;code&gt;NODE_MODULE()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node-gyp&lt;/code&gt; でアドオンを構築する場合、 &lt;code&gt;NODE_MODULE()&lt;/code&gt; の最初のパラメーターとしてマクロ &lt;code&gt;NODE_GYP_MODULE_NAME&lt;/code&gt; を使用すると、最終的なバイナリの名前が確実に &lt;code&gt;NODE_MODULE()&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="ad44239206d327c587affb7903510f4fb3d9e0f3" translate="yes" xml:space="preserve">
          <source>When called on an unbound socket, this method will implicitly bind to a random port, listening on all interfaces.</source>
          <target state="translated">束縛されていないソケットで呼び出された場合、このメソッドは暗黙のうちにランダムなポートにバインドし、すべてのインターフェイスをリッスンします。</target>
        </trans-unit>
        <trans-unit id="deed801833ff5cd178d1520926c3e8872b44b700" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.prompt()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;rl.prompt()&lt;/code&gt; は、一時停止されている場合に &lt;code&gt;input&lt;/code&gt; ストリームを再開します。</target>
        </trans-unit>
        <trans-unit id="95690a6b2ee253f0d475698c7f4cb4b18f80c22a" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.question()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;rl.question()&lt;/code&gt; は、一時停止されている場合に &lt;code&gt;input&lt;/code&gt; ストリームを再開します。</target>
        </trans-unit>
        <trans-unit id="03e0cfc11341c28038f0a5d042284497f7d85fcb" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;rl.write()&lt;/code&gt; will resume the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;rl.write()&lt;/code&gt; は、一時停止されている場合に &lt;code&gt;input&lt;/code&gt; ストリームを再開します。</target>
        </trans-unit>
        <trans-unit id="ffb3e53f526ac9005699e2122cb50b0c9899e0ac" translate="yes" xml:space="preserve">
          <source>When called, &lt;code&gt;util.deprecate()&lt;/code&gt; will return a function that will emit a &lt;code&gt;DeprecationWarning&lt;/code&gt; using the &lt;a href=&quot;process#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; event. The warning will be emitted and printed to &lt;code&gt;stderr&lt;/code&gt; the first time the returned function is called. After the warning is emitted, the wrapped function is called without emitting a warning.</source>
          <target state="translated">&lt;code&gt;util.deprecate()&lt;/code&gt; を呼び出すと、&lt;a href=&quot;process#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;イベントを使用して &lt;code&gt;DeprecationWarning&lt;/code&gt; を発行する関数が返されます。警告は、返された関数が最初に呼び出されたときに発行され、 &lt;code&gt;stderr&lt;/code&gt; に出力されます。警告が発行された後、ラップされた関数が警告を発行せずに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="782b4e66ba3724b519a47f97cc938ec98cfd3fc0" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;FSWatcher&lt;/code&gt; is active. Calling &lt;code&gt;watcher.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;FSWatcher&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;watcher.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="41e9efc4f4b110bf919f383c4bad1087df420418" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;Immediate&lt;/code&gt; is active. Calling &lt;code&gt;immediate.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;Immediate&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;immediate.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="74a07dd0d422c69557a3f1212fdca158cd9d1388" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;StatWatcher&lt;/code&gt; is active. Calling &lt;code&gt;watcher.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;StatWatcher&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;watcher.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="be1e4bc9da3126435a172ee6de0a8b7b01a0eecb" translate="yes" xml:space="preserve">
          <source>When called, requests that the Node.js event loop &lt;em&gt;not&lt;/em&gt; exit so long as the &lt;code&gt;Timeout&lt;/code&gt; is active. Calling &lt;code&gt;timeout.ref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、 &lt;code&gt;Timeout&lt;/code&gt; がアクティブである限り、Node.jsイベントループ&lt;em&gt;が&lt;/em&gt;終了し&lt;em&gt;ない&lt;/em&gt;ように要求します。 &lt;code&gt;timeout.ref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="3bdd99a968eb6c7c6f053bc7b91cc625374d6faa" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;FSWatcher&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;FSWatcher&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;watcher.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されたとき、アクティブな &lt;code&gt;FSWatcher&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブのままである必要はありません。イベントループの実行を維持している他のアクティビティがない場合、プロセスは &lt;code&gt;FSWatcher&lt;/code&gt; オブジェクトのコールバックが呼び出される前に終了する可能性があります。 &lt;code&gt;watcher.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="8e832ff5be2f07a09ebaa7573b2df95ffeb3614c" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;Immediate&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;Immediate&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;immediate.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、アクティブな &lt;code&gt;Immediate&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブなままである必要はありません。イベントループの実行を維持する他のアクティビティがない場合、 &lt;code&gt;Immediate&lt;/code&gt; オブジェクトのコールバックが呼び出される前にプロセスが終了する可能性があります。 &lt;code&gt;immediate.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="855b13a333a844940a73826ba1ecc4be80be3cfb" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;StatWatcher&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;StatWatcher&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;watcher.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されたとき、アクティブな &lt;code&gt;StatWatcher&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブのままである必要はありません。イベントループの実行を維持している他のアクティビティがない場合、 &lt;code&gt;StatWatcher&lt;/code&gt; オブジェクトのコールバックが呼び出される前にプロセスが終了する可能性があります。 &lt;code&gt;watcher.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="52de90f11b22fd290fb3c08dde2358cfaa2b0340" translate="yes" xml:space="preserve">
          <source>When called, the active &lt;code&gt;Timeout&lt;/code&gt; object will not require the Node.js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the &lt;code&gt;Timeout&lt;/code&gt; object's callback is invoked. Calling &lt;code&gt;timeout.unref()&lt;/code&gt; multiple times will have no effect.</source>
          <target state="translated">呼び出されると、アクティブな &lt;code&gt;Timeout&lt;/code&gt; オブジェクトは、Node.jsイベントループがアクティブのままである必要はありません。イベントループの実行を維持するアクティビティが他にない場合、 &lt;code&gt;Timeout&lt;/code&gt; オブジェクトのコールバックが呼び出される前にプロセスが終了する可能性があります。 &lt;code&gt;timeout.unref()&lt;/code&gt; を複数回呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="9472be900a89f3ccdcf5acc7441e9034a55e1be5" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, the segment of allocated memory is &lt;em&gt;uninitialized&lt;/em&gt; (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a &lt;code&gt;Buffer&lt;/code&gt; created by &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;completely&lt;/em&gt; overwriting the memory can allow this old data to be leaked when the &lt;code&gt;Buffer&lt;/code&gt; memory is read.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; を&lt;/a&gt;呼び出すと、割り当てられたメモリのセグメントは&lt;em&gt;初期化さ&lt;/em&gt;れません（ゼロ化されません）。この設計ではメモリの割り当てが非常に高速になりますが、割り当てられたメモリのセグメントには、潜在的に機密性の高い古いデータが含まれている可能性があります。メモリを&lt;em&gt;完全に&lt;/em&gt;上書きせずに、&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Buffer&lt;/code&gt; を使用すると、 &lt;code&gt;Buffer&lt;/code&gt; メモリが読み取られるときに、この古いデータがリークされる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="96f6bf2e2ec8bbbea1c61816a4f0b4a72612a006" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, the segment of allocated memory is &lt;em&gt;uninitialized&lt;/em&gt; (it is not zeroed-out). While this design makes the allocation of memory quite fast, the allocated segment of memory might contain old data that is potentially sensitive. Using a &lt;code&gt;Buffer&lt;/code&gt; created by &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; without &lt;em&gt;completely&lt;/em&gt; overwriting the memory can allow this old data to be leaked when the &lt;code&gt;Buffer&lt;/code&gt; memory is read.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; を&lt;/a&gt;呼び出すと、割り当てられたメモリのセグメントは&lt;em&gt;初期化さ&lt;/em&gt;れません（ゼロ化されません）。この設計によりメモリの割り当てが非常に高速になりますが、割り当てられたメモリセグメントには、機密性の高い可能性のある古いデータが含まれている可能性があります。メモリを&lt;em&gt;完全に&lt;/em&gt;上書きせずに&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;によって作成された &lt;code&gt;Buffer&lt;/code&gt; を使用すると、 &lt;code&gt;Buffer&lt;/code&gt; メモリの読み取り時にこの古いデータがリークされる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="468120732bcdf214c7e9f58563736b992ee8c4bf" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;.node&lt;/code&gt; extension can usually be omitted and Node.js will still find and initialize the Addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file &lt;code&gt;addon.js&lt;/code&gt; in the same directory as the binary &lt;code&gt;addon.node&lt;/code&gt;, then &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require('addon')&lt;/code&gt;&lt;/a&gt; will give precedence to the &lt;code&gt;addon.js&lt;/code&gt; file and load it instead.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; を&lt;/a&gt;呼び出すとき、通常は &lt;code&gt;.node&lt;/code&gt; 拡張子を省略でき、Node.jsは引き続きアドオンを見つけて初期化します。ただし、注意点の1つは、Node.jsが最初に、同じベース名を共有するモジュールまたはJavaScriptファイルを見つけてロードしようとすることです。たとえば、バイナリ &lt;code&gt;addon.node&lt;/code&gt; と同じディレクトリにファイル &lt;code&gt;addon.js&lt;/code&gt; がある場合、&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require('addon')&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;addon.js&lt;/code&gt; ファイルを優先し、代わりにロードします。</target>
        </trans-unit>
        <trans-unit id="da566e0b89c4ee78a1cb664d3a13e2b25f5806e2" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;.node&lt;/code&gt; extension can usually be omitted and Node.js will still find and initialize the addon. One caveat, however, is that Node.js will first attempt to locate and load modules or JavaScript files that happen to share the same base name. For instance, if there is a file &lt;code&gt;addon.js&lt;/code&gt; in the same directory as the binary &lt;code&gt;addon.node&lt;/code&gt;, then &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require('addon')&lt;/code&gt;&lt;/a&gt; will give precedence to the &lt;code&gt;addon.js&lt;/code&gt; file and load it instead.</source>
          <target state="translated">&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; を&lt;/a&gt;呼び出す場合、通常は &lt;code&gt;.node&lt;/code&gt; 拡張子を省略でき、Node.jsは引き続きアドオンを見つけて初期化します。ただし、注意点の1つは、Node.jsが最初に、同じベース名を共有するモジュールまたはJavaScriptファイルを見つけてロードしようとすることです。たとえば、バイナリ &lt;code&gt;addon.node&lt;/code&gt; と同じディレクトリにファイル &lt;code&gt;addon.js&lt;/code&gt; がある場合、&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require('addon')&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;addon.js&lt;/code&gt; ファイルを優先し、代わりにそれをロードします。</target>
        </trans-unit>
        <trans-unit id="fa673ee946e346399b283e0ddd06ac9b7dc3be24" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;asyncLocalStorage.disable()&lt;/code&gt;, all current contexts linked to the instance will be exited.</source>
          <target state="translated">&lt;code&gt;asyncLocalStorage.disable()&lt;/code&gt; を呼び出すと、インスタンスにリンクされている現在のすべてのコンテキストが終了します。</target>
        </trans-unit>
        <trans-unit id="01bbab8a41af1b936d094221718dc42485ff9707" translate="yes" xml:space="preserve">
          <source>When connecting as a client, if the remote IP address is blocked, the connection attempt will be rejected.</source>
          <target state="translated">クライアントとして接続する場合、リモートIPアドレスがブロックされていると、接続の試みは拒否されます。</target>
        </trans-unit>
        <trans-unit id="35899d0224206f7ecd5b079bec2e5ae41bf88bc6" translate="yes" xml:space="preserve">
          <source>When converting between &lt;code&gt;Buffer&lt;/code&gt;s and strings, a character encoding may be specified. If no character encoding is specified, UTF-8 will be used as the default.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; と文字列の間で変換する場合、文字エンコーディングを指定できます。文字エンコードが指定されていない場合、デフォルトとしてUTF-8が使用されます。</target>
        </trans-unit>
        <trans-unit id="69c454c7fd1f23edf7fd0f8da819640c0634eb1b" translate="yes" xml:space="preserve">
          <source>When created, the &lt;code&gt;Tracing&lt;/code&gt; object is disabled. Calling the &lt;code&gt;tracing.enable()&lt;/code&gt; method adds the categories to the set of enabled trace event categories. Calling &lt;code&gt;tracing.disable()&lt;/code&gt; will remove the categories from the set of enabled trace event categories.</source>
          <target state="translated">作成されると、 &lt;code&gt;Tracing&lt;/code&gt; オブジェクトは無効になります。 &lt;code&gt;tracing.enable()&lt;/code&gt; メソッドを呼び出すと、有効なトレースイベントカテゴリのセットにカテゴリが追加されます。 &lt;code&gt;tracing.disable()&lt;/code&gt; を呼び出すと、有効なトレースイベントカテゴリのセットからカテゴリが削除されます。</target>
        </trans-unit>
        <trans-unit id="cdfbef80b77a4d29415e274eb994b5bd25290e5d" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;Buffer&lt;/code&gt; using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;.buffer&lt;/code&gt;, it is possible to use only a portion of the underlying &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; by passing in &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;.buffer&lt;/code&gt; を使用して &lt;code&gt;Buffer&lt;/code&gt; を作成する場合、 &lt;code&gt;byteOffset&lt;/code&gt; および &lt;code&gt;length&lt;/code&gt; パラメータを渡すことにより、基になる&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;一部のみを使用することが可能です。</target>
        </trans-unit>
        <trans-unit id="05011da92dca1fbee82021fa4aeff73f6a280090" translate="yes" xml:space="preserve">
          <source>When data has been encrypted without standard block padding, calling &lt;code&gt;decipher.setAutoPadding(false)&lt;/code&gt; will disable automatic padding to prevent &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; from checking for and removing padding.</source>
          <target state="translated">データが標準のブロックパディングなしで暗号化されている場合、 &lt;code&gt;decipher.setAutoPadding(false)&lt;/code&gt; を呼び出すと、自動パディングが無効になり、&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;によるパディングのチェックと削除が防止されます。</target>
        </trans-unit>
        <trans-unit id="41a108b65d6c3bc13552fc5b243229555d3f5234" translate="yes" xml:space="preserve">
          <source>When decrypting, the authentication tag must be set via &lt;code&gt;setAuthTag()&lt;/code&gt; before calling &lt;code&gt;update()&lt;/code&gt;. Otherwise, decryption will fail and &lt;code&gt;final()&lt;/code&gt; will throw an error in compliance with section 2.6 of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3610.txt&quot;&gt;RFC 3610&lt;/a&gt;.</source>
          <target state="translated">復号化するときは、 &lt;code&gt;update()&lt;/code&gt; を呼び出す前に、 &lt;code&gt;setAuthTag()&lt;/code&gt; を介して認証タグを設定する必要があります。そうでない場合、復号化は失敗し、 &lt;code&gt;final()&lt;/code&gt; は&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3610.txt&quot;&gt;RFC 3610の&lt;/a&gt;セクション2.6に準拠してエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="7900ae4062073e82206b0fa6925789e3589d4177" translate="yes" xml:space="preserve">
          <source>When enabled, TLS packet trace information is written to &lt;code&gt;stderr&lt;/code&gt;. This can be used to debug TLS connection problems.</source>
          <target state="translated">有効にすると、TLSパケットトレース情報が &lt;code&gt;stderr&lt;/code&gt; に書き込まれます。これは、TLS接続の問題をデバッグするために使用できます。</target>
        </trans-unit>
        <trans-unit id="6983a109482d5a03d2a40f9b0b6b02c14a31403b" translate="yes" xml:space="preserve">
          <source>When encoding public keys, it is recommended to use &lt;code&gt;'spki'&lt;/code&gt;. When encoding private keys, it is recommended to use &lt;code&gt;'pkcs8'&lt;/code&gt; with a strong passphrase, and to keep the passphrase confidential.</source>
          <target state="translated">公開鍵をエンコードするときは、 &lt;code&gt;'spki'&lt;/code&gt; を使用することをお勧めします。秘密鍵をエンコードするときは、強力なパスフレーズで &lt;code&gt;'pkcs8'&lt;/code&gt; を使用し、パスフレーズの機密を保持することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a7ef1148fcaa829598a8bfe1284ca6b09d93c35a" translate="yes" xml:space="preserve">
          <source>When encoding public keys, it is recommended to use &lt;code&gt;'spki'&lt;/code&gt;. When encoding private keys, it is recommended to use &lt;code&gt;'pks8'&lt;/code&gt; with a strong passphrase, and to keep the passphrase confidential.</source>
          <target state="translated">公開鍵をエンコードするときは、 &lt;code&gt;'spki'&lt;/code&gt; を使用することをお勧めします。秘密鍵をエンコードするときは、強力なパスフレーズで &lt;code&gt;'pks8'&lt;/code&gt; を使用し、パスフレーズの機密を保持することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="05906fb7a190e151a8a2e400c141bb3e603ff56b" translate="yes" xml:space="preserve">
          <source>When encountering this error, a possible alternative to creating a &lt;code&gt;Buffer&lt;/code&gt; instance is to create a normal &lt;code&gt;Uint8Array&lt;/code&gt;, which only differs in the prototype of the resulting object. &lt;code&gt;Uint8Array&lt;/code&gt;s are generally accepted in all Node.js core APIs where &lt;code&gt;Buffer&lt;/code&gt;s are; they are available in all Contexts.</source>
          <target state="translated">このエラーが発生した場合、 &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成する代わりに、通常の &lt;code&gt;Uint8Array&lt;/code&gt; を作成する方法があります。これは、結果のオブジェクトのプロトタイプのみが異なります。 &lt;code&gt;Uint8Array&lt;/code&gt; は、一般に、 &lt;code&gt;Buffer&lt;/code&gt; があるすべてのNode.jsコアAPIで受け入れられます。すべてのコンテキストで使用できます。</target>
        </trans-unit>
        <trans-unit id="fbea7195eb1a28298b5c6bcea88ce20614ead794" translate="yes" xml:space="preserve">
          <source>When extending streams, keep in mind what options the user can and should provide before forwarding these to the base constructor. For example, if the implementation makes assumptions in regard to the &lt;code&gt;autoDestroy&lt;/code&gt; and &lt;code&gt;emitClose&lt;/code&gt; options, do not allow the user to override these. Be explicit about what options are forwarded instead of implicitly forwarding all options.</source>
          <target state="translated">ストリームを拡張するときは、これらを基本コンストラクターに転送する前に、ユーザーが提供できるオプションと提供する必要があるオプションを覚えておいてください。たとえば、実装が &lt;code&gt;autoDestroy&lt;/code&gt; および &lt;code&gt;emitClose&lt;/code&gt; オプションに関して仮定を行う場合、ユーザーがこれらをオーバーライドすることを許可しないでください。すべてのオプションを暗黙的に転送するのではなく、どのオプションが転送されるかを明示します。</target>
        </trans-unit>
        <trans-unit id="c3a545d2ef71b7de3995f4fd31454d72ba7d867d" translate="yes" xml:space="preserve">
          <source>When generating snapshots, garbage collection may be triggered and bring the heap usage down, therefore multiple snapshots may be written to disk before the Node.js instance finally runs out of memory. These heap snapshots can be compared to determine what objects are being allocated during the time consecutive snapshots are taken. It's not guaranteed that Node.js will write exactly &lt;code&gt;max_count&lt;/code&gt; snapshots to disk, but it will try its best to generate at least one and up to &lt;code&gt;max_count&lt;/code&gt; snapshots before the Node.js instance runs out of memory when &lt;code&gt;max_count&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">スナップショットを生成するときに、ガベージコレクションがトリガーされ、ヒープ使用量が低下する可能性があるため、Node.jsインスタンスが最終的にメモリを使い果たす前に、複数のスナップショットがディスクに書き込まれる可能性があります。これらのヒープスナップショットを比較して、連続するスナップショットが作成されている間に割り当てられているオブジェクトを判別できます。 Node.jsが正確に &lt;code&gt;max_count&lt;/code&gt; スナップショットをディスクに書き込むことは保証されていませんが、 &lt;code&gt;max_count&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; より大きい場合、Node.jsインスタンスがメモリを使い果たす前に、少なくとも1つから最大 &lt;code&gt;max_count&lt;/code&gt; のスナップショットを生成するように最善を尽くします。</target>
        </trans-unit>
        <trans-unit id="e76bc96e47739cd7dc97aceca50067613ec70e6a" translate="yes" xml:space="preserve">
          <source>When having multiple instances of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;, they are independent from each other. It is safe to instantiate this class multiple times.</source>
          <target state="translated">&lt;code&gt;AsyncLocalStorage&lt;/code&gt; のインスタンスが複数ある場合、それらは互いに独立しています。このクラスを複数回インスタンス化しても安全です。</target>
        </trans-unit>
        <trans-unit id="b68d52fb44ce1ad14ef826fcceca8bc169d525a5" translate="yes" xml:space="preserve">
          <source>When headers have been set with &lt;a href=&quot;#http2_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt;, they will be merged with any headers passed to &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt;, with the headers passed to &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; given precedence.</source>
          <target state="translated">ヘッダーが&lt;a href=&quot;#http2_response_setheader_name_value&quot;&gt; &lt;code&gt;response.setHeader()&lt;/code&gt; &lt;/a&gt;で設定されている場合、ヘッダーはresponse.writeHead（）に渡されたヘッダーとマージされ、ヘッダーは&lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;に渡され&lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;優先されます。</target>
        </trans-unit>
        <trans-unit id="c27d25166c52526d61af879040d266b4ce3293c5" translate="yes" xml:space="preserve">
          <source>When headers have been set with &lt;a href=&quot;#http_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt;, they will be merged with any headers passed to &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt;, with the headers passed to &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; given precedence.</source>
          <target state="translated">ヘッダーが&lt;a href=&quot;#http_response_setheader_name_value&quot;&gt; &lt;code&gt;response.setHeader()&lt;/code&gt; &lt;/a&gt;で設定されている場合、ヘッダーはresponse.writeHead（）に渡されたヘッダーとマージされ、ヘッダーは&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;に渡され&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; &lt;/a&gt;優先されます。</target>
        </trans-unit>
        <trans-unit id="30fa6efb90162b70bba910948f8d508f93d02aec" translate="yes" xml:space="preserve">
          <source>When hooks are used they only apply to ES module loading and not to any CommonJS modules loaded.</source>
          <target state="translated">フックを使用する場合は、ESモジュールのロードにのみ適用され、ロードされたCommonJSモジュールには適用されません。</target>
        </trans-unit>
        <trans-unit id="b5a6dd08e0729dc5592da6bcbaa315760902c033" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. in order to provide asynchronous stack traces) about the correlation between tasks and their outcomes.</source>
          <target state="translated">ワーカープールを実装するときは、&lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; APIを使用して、タスクとその結果の相関関係を診断ツールに通知します（たとえば、非同期スタックトレースを提供するため）。</target>
        </trans-unit>
        <trans-unit id="86fa0425ee48db6d8d29ec95b9974a8ecde279dc" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. in order to provide asynchronous stack traces) about the correlation between tasks and their outcomes. See &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool&quot;&lt;/a&gt; in the &lt;code&gt;async_hooks&lt;/code&gt; documentation for an example implementation.</source>
          <target state="translated">ワーカープールを実装するときは、&lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; APIを使用して、タスクとその結果の間の相関関係について診断ツールに通知します（たとえば、非同期スタックトレースを提供するため）。実装例については、 &lt;code&gt;async_hooks&lt;/code&gt; ドキュメントの&lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;「&lt;/a&gt; &lt;code&gt;Worker&lt;/code&gt; スレッドプールに &lt;code&gt;AsyncResource&lt;/code&gt; を使用する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9c208a745801e45a4f35ec88446a8d65ce92804" translate="yes" xml:space="preserve">
          <source>When implementing a worker pool, use the &lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt;&lt;code&gt;AsyncResource&lt;/code&gt;&lt;/a&gt; API to inform diagnostic tools (e.g. to provide asynchronous stack traces) about the correlation between tasks and their outcomes. See &lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;&quot;Using &lt;code&gt;AsyncResource&lt;/code&gt; for a &lt;code&gt;Worker&lt;/code&gt; thread pool&quot;&lt;/a&gt; in the &lt;code&gt;async_hooks&lt;/code&gt; documentation for an example implementation.</source>
          <target state="translated">ワーカープールを実装するときは、&lt;a href=&quot;async_hooks#async_hooks_class_asyncresource&quot;&gt; &lt;code&gt;AsyncResource&lt;/code&gt; &lt;/a&gt; APIを使用して、タスクとその結果の相関関係について診断ツールに通知します（たとえば、非同期スタックトレースを提供します）。実装例については、 &lt;code&gt;async_hooks&lt;/code&gt; ドキュメントの&lt;a href=&quot;async_hooks#async-resource-worker-pool&quot;&gt;「&lt;/a&gt; &lt;code&gt;Worker&lt;/code&gt; スレッドプールに &lt;code&gt;AsyncResource&lt;/code&gt; を使用する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9447dff2dc7b6ea8f82aeb79872b54050b5c6671" translate="yes" xml:space="preserve">
          <source>When importing &lt;a href=&quot;#esm_commonjs_namespaces&quot;&gt;CommonJS modules&lt;/a&gt;, the &lt;code&gt;module.exports&lt;/code&gt; object is provided as the default export. Named exports may be available, provided by static analysis as a convenience for better ecosystem compatibility.</source>
          <target state="translated">&lt;a href=&quot;#esm_commonjs_namespaces&quot;&gt;CommonJSモジュールを&lt;/a&gt;インポートする場合、 &lt;code&gt;module.exports&lt;/code&gt; オブジェクトがデフォルトのエクスポートとして提供されます。生態系の互換性を高めるための利便性として静的分析によって提供される、名前付きのエクスポートが利用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="db0a58857ea8172591d17a349d053d1cf051d60f" translate="yes" xml:space="preserve">
          <source>When importing a CommonJS module, it can be reliably imported using the ES module default import or its corresponding sugar syntax:</source>
          <target state="translated">CommonJSモジュールをインポートする際には、ESモジュールのデフォルトインポートまたは対応するシュガー構文を使用して確実にインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="bc3b5f795fe89b94678eaec7d3231cbad8bf6c33" translate="yes" xml:space="preserve">
          <source>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters.</source>
          <target state="translated">生モードの場合、入力は常に一文字一文字、修飾子を含まずに利用可能である。さらに、入力文字のエコーを含め、端末による文字の特殊な処理はすべて無効化されます。</target>
        </trans-unit>
        <trans-unit id="e9ddcbd7ac9a3379f4508938d4baf9617576b349" translate="yes" xml:space="preserve">
          <source>When in raw mode, input is always available character-by-character, not including modifiers. Additionally, all special processing of characters by the terminal is disabled, including echoing input characters. &lt;code&gt;CTRL&lt;/code&gt;+&lt;code&gt;C&lt;/code&gt; will no longer cause a &lt;code&gt;SIGINT&lt;/code&gt; when in this mode.</source>
          <target state="translated">rawモードでは、入力は常に修飾子を含まず、文字ごとに使用できます。さらに、入力文字のエコーを含む、端末による文字のすべての特別な処理が無効になります。このモードでは、 &lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; で &lt;code&gt;SIGINT&lt;/code&gt; が発生しなくなりました。</target>
        </trans-unit>
        <trans-unit id="cd0a26ba226713539b41536c16abf31af0d2cd2d" translate="yes" xml:space="preserve">
          <source>When iterating over &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt;, flags will appear only &lt;em&gt;once&lt;/em&gt;; each will begin with one or more dashes. Flags passed through to V8 will contain underscores instead of non-leading dashes:</source>
          <target state="translated">&lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; を反復する場合、フラグは&lt;em&gt;1回&lt;/em&gt;だけ表示さ&lt;em&gt;れ&lt;/em&gt;ます。それぞれが1つ以上のダッシュで始まります。V8に渡されるフラグには、先頭にないダッシュの代わりにアンダースコアが含まれます。</target>
        </trans-unit>
        <trans-unit id="e74d2be5a7317a9ec278704eed362d45bd75d40b" translate="yes" xml:space="preserve">
          <source>When listening as a server, if a packet is received from a blocked address, the packet will be ignored.</source>
          <target state="translated">サーバとしてリッスンする場合、ブロックされたアドレスからパケットを受信した場合、そのパケットは無視されます。</target>
        </trans-unit>
        <trans-unit id="152f4ff941bc3f806360985c462b440ec7b21293" translate="yes" xml:space="preserve">
          <source>When loading resources the entire URL must match including search parameters and hash fragment. &lt;code&gt;./a.js?b&lt;/code&gt; will not be used when attempting to load &lt;code&gt;./a.js&lt;/code&gt; and vice versa.</source>
          <target state="translated">リソースをロードするときは、検索パラメーターとハッシュフラグメントを含めて、URL全体が一致する必要があります。 &lt;code&gt;./a.js?b&lt;/code&gt; は、。 &lt;code&gt;./a.js&lt;/code&gt; をロードしようとするときには使用されず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="aa04f5cf4c0a06d2c3131d5e120108e37b37f3ff" translate="yes" xml:space="preserve">
          <source>When looking for the CommonJS modules that have required the current one, &lt;code&gt;require.cache&lt;/code&gt; and &lt;code&gt;module.children&lt;/code&gt; can be used:</source>
          <target state="translated">現在のモジュールを必要としているCommonJSモジュールを探すときは、 &lt;code&gt;require.cache&lt;/code&gt; と &lt;code&gt;module.children&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="4e88de394e67150d9975fd970bf780f1247bdc0e" translate="yes" xml:space="preserve">
          <source>When multi-line input is being entered, an ellipsis is printed rather than the 'prompt'.</source>
          <target state="translated">複数行入力の場合は、「プロンプト」ではなく「省略記号」が表示されます。</target>
        </trans-unit>
        <trans-unit id="da3fdcb3773839fe853004d32c8734d9ff43b77b" translate="yes" xml:space="preserve">
          <source>When multiple calls to &lt;code&gt;setImmediate()&lt;/code&gt; are made, the &lt;code&gt;callback&lt;/code&gt; functions are queued for execution in the order in which they are created. The entire callback queue is processed every event loop iteration. If an immediate timer is queued from inside an executing callback, that timer will not be triggered until the next event loop iteration.</source>
          <target state="translated">&lt;code&gt;setImmediate()&lt;/code&gt; への複数の呼び出しが行われると、 &lt;code&gt;callback&lt;/code&gt; 関数は作成された順に実行のためにキューに入れられます。コールバックキュー全体は、イベントループの反復ごとに処理されます。即時タイマーが実行中のコールバック内からキューに入れられている場合、そのタイマーは次のイベントループの反復までトリガーされません。</target>
        </trans-unit>
        <trans-unit id="798ac8eedc938f74e1db139185f92862c77691f3" translate="yes" xml:space="preserve">
          <source>When multiple, sequential path segment separation characters are found (e.g. &lt;code&gt;/&lt;/code&gt; on POSIX and either &lt;code&gt;\&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt; on Windows), they are replaced by a single instance of the platform-specific path segment separator (&lt;code&gt;/&lt;/code&gt; on POSIX and &lt;code&gt;\&lt;/code&gt; on Windows). Trailing separators are preserved.</source>
          <target state="translated">複数の、連続的なパスセグメント分離文字が（例えば発見された場合 &lt;code&gt;/&lt;/code&gt; POSIX上のいずれか &lt;code&gt;\&lt;/code&gt; または &lt;code&gt;/&lt;/code&gt; （Windowsの場合）、それらはプラットフォーム固有のパスセグメントの区切りの単一のインスタンスに置き換えられている &lt;code&gt;/&lt;/code&gt; 上POSIXと &lt;code&gt;\&lt;/code&gt; Windowsの場合）。末尾のセパレータは保持されます。</target>
        </trans-unit>
        <trans-unit id="33339c7accc5eb5c867d93f62942b6b1c37dab1e" translate="yes" xml:space="preserve">
          <source>When negotiating TLS-PSK (pre-shared keys), this function is called with optional identity &lt;code&gt;hint&lt;/code&gt; provided by the server or &lt;code&gt;null&lt;/code&gt; in case of TLS 1.3 where &lt;code&gt;hint&lt;/code&gt; was removed. It will be necessary to provide a custom &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; for the connection as the default one will try to check host name/IP of the server against the certificate but that's not applicable for PSK because there won't be a certificate present. More information can be found in the &lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC 4279&lt;/a&gt;.</source>
          <target state="translated">TLS-PSK（事前共有キー）をネゴシエートする場合、この関数は、サーバーによって提供されるオプションのID &lt;code&gt;hint&lt;/code&gt; 、または &lt;code&gt;hint&lt;/code&gt; が削除されたTLS1.3の場合は &lt;code&gt;null&lt;/code&gt; を使用して呼び出されます。デフォルトではサーバーのホスト名/ IPを証明書と照合しようとするため、接続にカスタム &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; を提供する必要がありますが、証明書が存在しないため、PSKには適用されません。詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC4279を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="1d0d09a9388f0d0382aca9117ad64b6468d50a91" translate="yes" xml:space="preserve">
          <source>When negotiating TLS-PSK (pre-shared keys), this function is called with the identity provided by the client. If the return value is &lt;code&gt;null&lt;/code&gt; the negotiation process will stop and an &quot;unknown_psk_identity&quot; alert message will be sent to the other party. If the server wishes to hide the fact that the PSK identity was not known, the callback must provide some random data as &lt;code&gt;psk&lt;/code&gt; to make the connection fail with &quot;decrypt_error&quot; before negotiation is finished. PSK ciphers are disabled by default, and using TLS-PSK thus requires explicitly specifying a cipher suite with the &lt;code&gt;ciphers&lt;/code&gt; option. More information can be found in the &lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC 4279&lt;/a&gt;.</source>
          <target state="translated">TLS-PSK（事前共有キー）をネゴシエートする場合、この関数はクライアントから提供されたIDを使用して呼び出されます。戻り値が &lt;code&gt;null&lt;/code&gt; の場合、ネゴシエーションプロセスは停止し、「unknown_psk_identity」アラートメッセージが相手に送信されます。サーバーがPSKIDが不明であるという事実を隠したい場合、コールバックは、ネゴシエーションが終了する前に「decrypt_error」で接続を失敗させるために、 &lt;code&gt;psk&lt;/code&gt; としてランダムデータを提供する必要があります。 PSK暗号はデフォルトで無効になっているため、TLS-PSKを使用するには、 &lt;code&gt;ciphers&lt;/code&gt; オプションを使用して暗号スイートを明示的に指定する必要があります。詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc4279&quot;&gt;RFC4279を参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="04c7d9678da6dfcd3add1c63322a588714097a94" translate="yes" xml:space="preserve">
          <source>When nesting scopes, there are cases where a handle from an inner scope needs to live beyond the lifespan of that scope. N-API supports an 'escapable scope' in order to support this case. An escapable scope allows one handle to be 'promoted' so that it 'escapes' the current scope and the lifespan of the handle changes from the current scope to that of the outer scope.</source>
          <target state="translated">スコープを入れ子にする場合、内部スコープのハンドルがそのスコープの寿命を超えて生きている必要がある場合があります。N-API は、このようなケースをサポートするために「エスケープ可能なスコープ」をサポートしています。エスケープ可能なスコープでは、あるハンドルを現在のスコープから「エスケープ」するように「昇格」させ、ハンドルのライフスパンを現在のスコープから外部スコープのものに変更します。</target>
        </trans-unit>
        <trans-unit id="1ac9efff7e0ed2baf0cde15422c85d12b4cfa7e9" translate="yes" xml:space="preserve">
          <source>When non-ASCII characters appear within a host name, the host name is encoded using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm. Note, however, that a host name &lt;em&gt;may&lt;/em&gt; contain &lt;em&gt;both&lt;/em&gt; Punycode encoded and percent-encoded characters:</source>
          <target state="translated">非ASCII文字がホスト名に含まれている場合、ホスト名は&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用してエンコードされます。ただし、ホスト名には&lt;em&gt;、&lt;/em&gt; Punycodeエンコード文字とパーセントエンコード文字の&lt;em&gt;両方&lt;/em&gt;&lt;em&gt;が&lt;/em&gt;含まれる&lt;em&gt;場合&lt;/em&gt;があることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10235144f1c4270cc259caf923559f1488e62e3a" translate="yes" xml:space="preserve">
          <source>When non-ASCII characters appear within a hostname, the hostname is encoded using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm. Note, however, that a hostname &lt;em&gt;may&lt;/em&gt; contain &lt;em&gt;both&lt;/em&gt; Punycode encoded and percent-encoded characters:</source>
          <target state="translated">ホスト名内に非ASCII文字が含まれている場合、ホスト名は&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用してエンコードされます。ただし、ホスト名に&lt;em&gt;は&lt;/em&gt; Punycodeでエンコードされた文字とパーセントでエンコードされた文字の&lt;em&gt;両方&lt;/em&gt;&lt;em&gt;が&lt;/em&gt;含まれる&lt;em&gt;場合&lt;/em&gt;があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0a421b9c16e5b3e7316b0d634726cc34111fd19c" translate="yes" xml:space="preserve">
          <source>When not using N-API, implementing Addons is complicated, involving knowledge of several components and APIs:</source>
          <target state="translated">N-APIを使用しない場合、アドオンの実装は、いくつかのコンポーネントやAPIの知識を必要とする複雑なものです。</target>
        </trans-unit>
        <trans-unit id="b75365dd456e2085d1af3e62e1e9c9ca89f8f54f" translate="yes" xml:space="preserve">
          <source>When not using N-API, implementing addons is complicated, involving knowledge of several components and APIs:</source>
          <target state="translated">N-APIを使用しない場合、アドオンの実装は複雑で、いくつかのコンポーネントやAPIの知識が必要になります。</target>
        </trans-unit>
        <trans-unit id="b9264aa00cdf70e8036e90c5dcb862b3e0cf826b" translate="yes" xml:space="preserve">
          <source>When operating on file handles, the mode cannot be changed from what it was set to with &lt;a href=&quot;#fs_fspromises_open_path_flags_mode&quot;&gt;&lt;code&gt;fsPromises.open()&lt;/code&gt;&lt;/a&gt;. Therefore, this is equivalent to &lt;a href=&quot;#fs_filehandle_writefile_data_options&quot;&gt;&lt;code&gt;filehandle.writeFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルハンドルを操作する場合、モードは&lt;a href=&quot;#fs_fspromises_open_path_flags_mode&quot;&gt; &lt;code&gt;fsPromises.open()&lt;/code&gt; で&lt;/a&gt;設定されたものから変更できません。したがって、これは&lt;a href=&quot;#fs_filehandle_writefile_data_options&quot;&gt; &lt;code&gt;filehandle.writeFile()&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="7403bcfa35b1ae51039252b3f7bbba8a1bd6482b" translate="yes" xml:space="preserve">
          <source>When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to &lt;code&gt;setAAD()&lt;/code&gt; via the &lt;code&gt;plaintextLength&lt;/code&gt; option. Many crypto libraries include the authentication tag in the ciphertext, which means that they produce ciphertexts of the length &lt;code&gt;plaintextLength + authTagLength&lt;/code&gt;. Node.js does not include the authentication tag, so the ciphertext length is always &lt;code&gt;plaintextLength&lt;/code&gt;. This is not necessary if no AAD is used.</source>
          <target state="translated">追加の認証済みデータ（AAD）を渡す場合、実際のメッセージの長さ（バイト単位 &lt;code&gt;setAAD()&lt;/code&gt; を &lt;code&gt;plaintextLength&lt;/code&gt; オプションを介してsetAAD（）に渡す必要があります。多くの暗号ライブラリは、暗号文に認証タグを &lt;code&gt;plaintextLength + authTagLength&lt;/code&gt; ます。つまり、plaintextLength + authTagLengthの長さの暗号文を生成します。Node.jsには認証タグが含まれていないため、暗号文の長さは常に &lt;code&gt;plaintextLength&lt;/code&gt; です。AADが使用されていない場合、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="8683bab3670783f3e04b5996df01e0d7dd2896d5" translate="yes" xml:space="preserve">
          <source>When passing additional authenticated data (AAD), the length of the actual message in bytes must be passed to &lt;code&gt;setAAD()&lt;/code&gt; via the &lt;code&gt;plaintextLength&lt;/code&gt; option. This is not necessary if no AAD is used.</source>
          <target state="translated">追加の認証済みデータ（AAD）を渡すときは、実際のメッセージの長さ（バイト単位 &lt;code&gt;setAAD()&lt;/code&gt; を &lt;code&gt;plaintextLength&lt;/code&gt; オプションを介してsetAAD（）に渡す必要があります。AADを使用しない場合、これは必要ありません。</target>
        </trans-unit>
        <trans-unit id="9ba341ca5199ac44852abeb44a5301af661ece2d" translate="yes" xml:space="preserve">
          <source>When providing properties to the &lt;code&gt;pathObject&lt;/code&gt; remember that there are combinations where one property has priority over another:</source>
          <target state="translated">&lt;code&gt;pathObject&lt;/code&gt; にプロパティを提供する場合、あるプロパティが別のプロパティよりも優先される組み合わせがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cec04fbd71c75ae41d540467b94b25559cc93156" translate="yes" xml:space="preserve">
          <source>When running Node.js, custom user conditions can be added with the &lt;code&gt;--conditions&lt;/code&gt; flag:</source>
          <target state="translated">Node.jsを実行する場合、カスタムユーザー条件を &lt;code&gt;--conditions&lt;/code&gt; フラグで追加できます。</target>
        </trans-unit>
        <trans-unit id="0944cac5b42f3c2ff1100fac2f3b7a8f1fc8ea80" translate="yes" xml:space="preserve">
          <source>When running as the server, the socket will be destroyed with an error after &lt;code&gt;handshakeTimeout&lt;/code&gt; timeout.</source>
          <target state="translated">サーバーとして実行している場合、ソケットは &lt;code&gt;handshakeTimeout&lt;/code&gt; タイムアウト後にエラーで破棄されます。</target>
        </trans-unit>
        <trans-unit id="3e15b5e8110d7e4311accf450e570804ba7780a4" translate="yes" xml:space="preserve">
          <source>When sending request through a keep-alive enabled agent, the underlying socket might be reused. But if server closes connection at unfortunate time, client may run into a 'ECONNRESET' error.</source>
          <target state="translated">キープアライブを有効にしたエージェントを使ってリクエストを送信すると、そのソケットが再利用されることがあります。しかし、不運にもサーバが接続を終了した場合、クライアントは 'ECONNNRESET' エラーに陥る可能性があります。</target>
        </trans-unit>
        <trans-unit id="19afa335a5a1a42b34eda8c5c3d35d2ff56880d3" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, emit pending deprecation warnings.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; に設定すると、保留中の廃止警告を発行します。</target>
        </trans-unit>
        <trans-unit id="9967655ab23757c342e087c9abcca7e897cc09b4" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, instructs the module loader to preserve symbolic links when resolving and caching modules.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; に設定すると、モジュールを解決およびキャッシュするときにシンボリックリンクを保持するようにモジュールローダーに指示します。</target>
        </trans-unit>
        <trans-unit id="69eba8f2f8e4e897994fbb45673663b7f28cc8f9" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;1&lt;/code&gt;, process warnings are silenced.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; に設定すると、プロセスの警告が表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="fc9e5b7fcfaf3f43b575085ed7b886c4b43ff254" translate="yes" xml:space="preserve">
          <source>When set, Node.js will begin outputting &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript code coverage&lt;/a&gt; and &lt;a href=&quot;https://sourcemaps.info/spec.html&quot;&gt;Source Map&lt;/a&gt; data to the directory provided as an argument (coverage information is written as JSON to files with a &lt;code&gt;coverage&lt;/code&gt; prefix).</source>
          <target state="translated">設定すると、Node.jsは&lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScriptコードカバレッジ&lt;/a&gt;と&lt;a href=&quot;https://sourcemaps.info/spec.html&quot;&gt;ソースマップ&lt;/a&gt;データを引数として指定されたディレクトリに出力し始めます（カバレッジ情報はJSONとして &lt;code&gt;coverage&lt;/code&gt; プレフィックス付きのファイルに書き込まれます）。</target>
        </trans-unit>
        <trans-unit id="4676881586437aa22ae98370e5573441d068f144" translate="yes" xml:space="preserve">
          <source>When set, Node.js will begin outputting &lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScript code coverage&lt;/a&gt; to the directory provided as an argument. Coverage is output as an array of &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage&quot;&gt;ScriptCoverage&lt;/a&gt; objects:</source>
          <target state="translated">設定すると、Node.jsは、引数として指定されたディレクトリに&lt;a href=&quot;https://v8project.blogspot.com/2017/12/javascript-code-coverage.html&quot;&gt;V8 JavaScriptコードカバレッジの&lt;/a&gt;出力を開始します。カバレッジは、&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/tot/Profiler#type-ScriptCoverage&quot;&gt;ScriptCoverage&lt;/a&gt;オブジェクトの配列として出力されます。</target>
        </trans-unit>
        <trans-unit id="43bc494caa00b16fbe479ff6c1a8ba8a4a01ffcf" translate="yes" xml:space="preserve">
          <source>When set, a memory file mapping is used to access the file. This flag is available on Windows operating systems only. On other operating systems, this flag is ignored.</source>
          <target state="translated">このフラグが設定されている場合、メモリ・ファイル・マッピングを使用してファイルにアクセスします。このフラグは、Windows オペレーティング・システムでのみ使用可能です。その他のオペレーティングシステムでは、このフラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="e9ad737be96822ad9acfdd2cb175b36332328f41" translate="yes" xml:space="preserve">
          <source>When set, an attempt will be made to minimize caching effects of file I/O.</source>
          <target state="translated">設定すると、ファイルI/Oのキャッシング効果を最小化するように試みます。</target>
        </trans-unit>
        <trans-unit id="c2ae5aecd16350b5fc32d69e0be29e2779f212ba" translate="yes" xml:space="preserve">
          <source>When set, colors will not be used in the REPL.</source>
          <target state="translated">設定されている場合、REPLでは色は使用されません。</target>
        </trans-unit>
        <trans-unit id="8933a68a9c2d796954f82edce5bf021ad21802b1" translate="yes" xml:space="preserve">
          <source>When set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the &lt;code&gt;--redirect-warnings=file&lt;/code&gt; command-line flag.</source>
          <target state="translated">設定すると、プロセス警告がstderrに出力されるのではなく、指定されたファイルに出力されます。ファイルが存在しない場合は作成され、存在する場合は追加されます。警告をファイルに書き込もうとしたときにエラーが発生した場合、警告は代わりにstderrに書き込まれます。これは、 &lt;code&gt;--redirect-warnings=file&lt;/code&gt; コマンドラインフラグを使用することと同じです。</target>
        </trans-unit>
        <trans-unit id="cc0c1ee3850dee15dcc0b864f7be858c91b16927" translate="yes" xml:space="preserve">
          <source>When set, the well known &quot;root&quot; CAs (like VeriSign) will be extended with the extra certificates in &lt;code&gt;file&lt;/code&gt;. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with &lt;a href=&quot;process#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;process.emitWarning()&lt;/code&gt;&lt;/a&gt; if the file is missing or malformed, but any errors are otherwise ignored.</source>
          <target state="translated">設定すると、よく知られている「ルート」CA（VeriSignなど）が &lt;code&gt;file&lt;/code&gt; の追加の証明書で拡張されます。ファイルは、PEM形式の1つ以上の信頼できる証明書で構成される必要があります。ファイルが見つからないか形式が正しくない場合、&lt;a href=&quot;process#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;process.emitWarning()&lt;/code&gt; で&lt;/a&gt;メッセージが（1回）送信されますが、それ以外のエラーは無視されます。</target>
        </trans-unit>
        <trans-unit id="f7c6e4d2978ec1bf438db14a2c184e3b7c1012e0" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;byteOffset&lt;/code&gt; in &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; or sometimes when allocating a buffer smaller than &lt;code&gt;Buffer.poolSize&lt;/code&gt; the buffer doesn't start from a zero offset on the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">設定時 &lt;code&gt;byteOffset&lt;/code&gt; で &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; よりも小さいバッファ割り当てる際に時々または &lt;code&gt;Buffer.poolSize&lt;/code&gt; バッファは、根底にオフセットがゼロから開始しない &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f7cfcbc6e6fdd528d5cb04ee742b42d07cf59f4" translate="yes" xml:space="preserve">
          <source>When setting &lt;code&gt;byteOffset&lt;/code&gt; in &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt;, or sometimes when allocating a &lt;code&gt;Buffer&lt;/code&gt; smaller than &lt;code&gt;Buffer.poolSize&lt;/code&gt;, the buffer does not start from a zero offset on the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">設定時 &lt;code&gt;byteOffset&lt;/code&gt; で &lt;code&gt;Buffer.from(ArrayBuffer, byteOffset, length)&lt;/code&gt; 割り当てるとき時々 、又は &lt;code&gt;Buffer&lt;/code&gt; より小さい &lt;code&gt;Buffer.poolSize&lt;/code&gt; を、緩衝液は、根底にオフセットゼロから開始しない &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="085c71302b8f2176512c80177d18f67801dc5d7e" translate="yes" xml:space="preserve">
          <source>When setting the priority for an HTTP/2 stream, the stream may be marked as a dependency for a parent stream. This error code is used when an attempt is made to mark a stream and dependent of itself.</source>
          <target state="translated">HTTP/2 ストリームの優先度を設定すると、ストリームが親ストリームの依存関係としてマークされることがあります。このエラーコードは、ストリームとそれ自身の依存関係をマークしようとしたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="a923dc95c051ae3fd873a26d6090eee9433803c1" translate="yes" xml:space="preserve">
          <source>When sharing a UDP socket across multiple &lt;code&gt;cluster&lt;/code&gt; workers, the &lt;code&gt;socket.addMembership()&lt;/code&gt; function must be called only once or an &lt;code&gt;EADDRINUSE&lt;/code&gt; error will occur:</source>
          <target state="translated">複数の &lt;code&gt;cluster&lt;/code&gt; ワーカー間でUDPソケットを共有する場合、 &lt;code&gt;socket.addMembership()&lt;/code&gt; 関数は1回だけ呼び出す必要があります。呼び出さないと、 &lt;code&gt;EADDRINUSE&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c4b3b4a6b2873bb41380ccce7474b29f9a36d610" translate="yes" xml:space="preserve">
          <source>When string data is stored in or extracted out of a &lt;code&gt;Buffer&lt;/code&gt; instance, a character encoding may be specified.</source>
          <target state="translated">文字列データが &lt;code&gt;Buffer&lt;/code&gt; インスタンスに格納または抽出される場合、文字エンコーディングを指定できます。</target>
        </trans-unit>
        <trans-unit id="7f00737601b54a24483d073d129fba80a4c04bdc" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field is defined, all subpaths of the package are encapsulated and no longer available to importers. For example, &lt;code&gt;require('pkg/subpath.js')&lt;/code&gt; throws an &lt;a href=&quot;errors#errors_err_package_path_not_exported&quot;&gt;&lt;code&gt;ERR_PACKAGE_PATH_NOT_EXPORTED&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">ときに&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドが定義されている、パッケージのすべてのサブパスは、カプセル化されておらず、輸入に利用できなくなっています。たとえば、 &lt;code&gt;require('pkg/subpath.js')&lt;/code&gt; は&lt;a href=&quot;errors#errors_err_package_path_not_exported&quot;&gt; &lt;code&gt;ERR_PACKAGE_PATH_NOT_EXPORTED&lt;/code&gt; &lt;/a&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="a0a3c28f7d09722c63135541dd0b7a96ff34d1c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;'clientError'&lt;/code&gt; event occurs, there is no &lt;code&gt;request&lt;/code&gt; or &lt;code&gt;response&lt;/code&gt; object, so any HTTP response sent, including response headers and payload, &lt;em&gt;must&lt;/em&gt; be written directly to the &lt;code&gt;socket&lt;/code&gt; object. Care must be taken to ensure the response is a properly formatted HTTP response message.</source>
          <target state="translated">場合 &lt;code&gt;'clientError'&lt;/code&gt; イベントが発生し、何も存在しない &lt;code&gt;request&lt;/code&gt; または &lt;code&gt;response&lt;/code&gt; オブジェクトは、任意のHTTP応答が応答ヘッダーとペイロードを含む、送信されたように、&lt;em&gt;しなければならない&lt;/em&gt;に直接書き込まれる &lt;code&gt;socket&lt;/code&gt; オブジェクト。応答が適切にフォーマットされたHTTP応答メッセージになるように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="46722ab714bf122284c53952ac05784c4ed481c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;'exit'&lt;/code&gt; event is triggered, child process stdio streams might still be open.</source>
          <target state="translated">ときに &lt;code&gt;'exit'&lt;/code&gt; イベントがトリガされ、子プロセスの標準入出力ストリームはまだ開いている可能性があります。</target>
        </trans-unit>
        <trans-unit id="ae71290bea971b38db44d801b8804d4b598df24d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag is included, both the &lt;code&gt;commonjs&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; mode use the new experimental JSON loader. The imported JSON only exposes a &lt;code&gt;default&lt;/code&gt;. There is no support for named exports. A cache entry is created in the CommonJS cache to avoid duplication. The same object is returned in CommonJS if the JSON module has already been imported from the same path.</source>
          <target state="translated">場合 &lt;code&gt;--experimental-json-modules&lt;/code&gt; フラグが含まれ、両方さ &lt;code&gt;commonjs&lt;/code&gt; と &lt;code&gt;module&lt;/code&gt; のモードは、新しい実験JSONローダを使用します。インポートされたJSONは &lt;code&gt;default&lt;/code&gt; のみを公開します。名前付きエクスポートはサポートされていません。重複を避けるために、CommonJSキャッシュにキャッシュエントリが作成されます。JSONモジュールがすでに同じパスからインポートされている場合、CommonJSで同じオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="9963a38aa2feb80593cf79934ad0090b99243136" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;EventEmitter&lt;/code&gt; object emits an event, all of the functions attached to that specific event are called &lt;em&gt;synchronously&lt;/em&gt;. Any values returned by the called listeners are &lt;em&gt;ignored&lt;/em&gt; and discarded.</source>
          <target state="translated">場合 &lt;code&gt;EventEmitter&lt;/code&gt; オブジェクトがイベントを放出する、その特定のイベントにアタッチ機能の全てが呼び出される&lt;em&gt;同期&lt;/em&gt;。呼び出されたリスナーによって返された値はすべて&lt;em&gt;無視され&lt;/em&gt;、破棄されます。</target>
        </trans-unit>
        <trans-unit id="426682a4550b69dd0a79aa54c6bda8543efe9bc9" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;EventEmitter&lt;/code&gt; object emits an event, all of the functions attached to that specific event are called &lt;em&gt;synchronously&lt;/em&gt;. Any values returned by the called listeners are &lt;em&gt;ignored&lt;/em&gt; and will be discarded.</source>
          <target state="translated">場合 &lt;code&gt;EventEmitter&lt;/code&gt; オブジェクトがイベントを放出する、その特定のイベントにアタッチ機能の全てが呼び出される&lt;em&gt;同期&lt;/em&gt;。呼び出されたリスナーから返された値はすべて&lt;em&gt;無視され&lt;/em&gt;、破棄されます。</target>
        </trans-unit>
        <trans-unit id="9335ae09cb81077658802cf50fdbfc1ca1ad08cf" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Http2Stream&lt;/code&gt; instance is destroyed, the &lt;code&gt;'close'&lt;/code&gt; event will be emitted. Because &lt;code&gt;Http2Stream&lt;/code&gt; is an instance of &lt;code&gt;stream.Duplex&lt;/code&gt;, the &lt;code&gt;'end'&lt;/code&gt; event will also be emitted if the stream data is currently flowing. The &lt;code&gt;'error'&lt;/code&gt; event may also be emitted if &lt;code&gt;http2stream.destroy()&lt;/code&gt; was called with an &lt;code&gt;Error&lt;/code&gt; passed as the first argument.</source>
          <target state="translated">場合 &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスが破棄され、 &lt;code&gt;'close'&lt;/code&gt; イベントが放出されます。 &lt;code&gt;Http2Stream&lt;/code&gt; はstream.Duplexのインスタンスであるため、ストリームデータが現在流れている場合は、 &lt;code&gt;'end'&lt;/code&gt; イベントも &lt;code&gt;stream.Duplex&lt;/code&gt; ます。最初の引数として &lt;code&gt;Error&lt;/code&gt; が渡されて &lt;code&gt;http2stream.destroy()&lt;/code&gt; が呼び出された場合も、 &lt;code&gt;'error'&lt;/code&gt; イベントが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="67505530725409fba9c4758f50e5cd65e987bcc3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Readable&lt;/code&gt; is operating in flowing mode, the data added with &lt;code&gt;readable.push()&lt;/code&gt; will be delivered by emitting a &lt;code&gt;'data'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;Readable&lt;/code&gt; がフローモードで動作している場合、 &lt;code&gt;readable.push()&lt;/code&gt; で追加された &lt;code&gt;'data'&lt;/code&gt; 、「data」イベントを発行して配信されます。</target>
        </trans-unit>
        <trans-unit id="c739d18f886c043c152b5e0e4e291d65429b3771" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;Readable&lt;/code&gt; is operating in paused mode, the data added with &lt;code&gt;readable.push()&lt;/code&gt; can be read out by calling the &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt; method when the &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">場合 &lt;code&gt;Readable&lt;/code&gt; 一時停止モードで動作して、データを用いて添加し &lt;code&gt;readable.push()&lt;/code&gt; を呼び出すことによって読み出すことができる&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;readable.read()&lt;/code&gt; &lt;/a&gt;方法&lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt;イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="c93b11ec833bbc0f705edd63f5118a1273fee958" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;module.exports&lt;/code&gt; property is being completely replaced by a new object, it is common to also reassign &lt;code&gt;exports&lt;/code&gt;:</source>
          <target state="translated">とき &lt;code&gt;module.exports&lt;/code&gt; はのプロパティは、完全に新しいオブジェクトに置き換えられている、それはまた、再割り当てすることが一般的です &lt;code&gt;exports&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="eb83f1239982a95be7fd015fe27103105cb812e7" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option is set, the &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted immediately after queuing the last chunk of payload data to be sent. The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method can then be called to send trailing headers to the peer.</source>
          <target state="translated">とき &lt;code&gt;options.waitForTrailers&lt;/code&gt; のオプションが設定されている、 &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが送信されるペイロードデータの最後のチャンクをキューイングした直後に放出されます。次に、 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; メソッドを呼び出して、トレーリングヘッダーをピアに送信できます。</target>
        </trans-unit>
        <trans-unit id="0ffadd51efd23bab12b01de439947d260bc199f3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;options.waitForTrailers&lt;/code&gt; option is set, the &lt;code&gt;'wantTrailers'&lt;/code&gt; event will be emitted immediately after queuing the last chunk of payload data to be sent. The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method can then be used to sent trailing header fields to the peer.</source>
          <target state="translated">とき &lt;code&gt;options.waitForTrailers&lt;/code&gt; のオプションが設定されている、 &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが送信されるペイロードデータの最後のチャンクをキューイングした直後に放出されます。次に、 &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; メソッドを使用して、トレーリングヘッダーフィールドをピアに送信できます。</target>
        </trans-unit>
        <trans-unit id="c5c32a70dad0d7767f357bc2634db83528bf93d5" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;path&lt;/code&gt; is a directory, the behavior of &lt;code&gt;fsPromises.readFile()&lt;/code&gt; is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; がディレクトリの場合、 &lt;code&gt;fsPromises.readFile()&lt;/code&gt; の動作はプラットフォーム固有です。macOS、Linux、およびWindowsでは、promiseはエラーで拒否されます。FreeBSDでは、ディレクトリの内容の表現が返されます。</target>
        </trans-unit>
        <trans-unit id="0620756c2aebd9c4bc3154b06ffe2566efb57b85" translate="yes" xml:space="preserve">
          <source>When the child process is a Node.js instance (e.g. spawned using &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;), the &lt;code&gt;process.disconnect()&lt;/code&gt; method can be invoked within the child process to close the IPC channel as well.</source>
          <target state="translated">子プロセスがNode.jsインスタンスである場合（たとえば、&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;を使用して生成された場合）、 &lt;code&gt;process.disconnect()&lt;/code&gt; メソッドを子プロセス内で呼び出して、IPCチャネルを閉じることもできます。</target>
        </trans-unit>
        <trans-unit id="25fac66347fd0ed458017f12238e9c5ff50ec269" translate="yes" xml:space="preserve">
          <source>When the code in the &lt;code&gt;foo&lt;/code&gt; package does &lt;code&gt;require('bar')&lt;/code&gt;, it will get the version that is symlinked into &lt;code&gt;/usr/lib/node/foo/1.2.3/node_modules/bar&lt;/code&gt;. Then, when the code in the &lt;code&gt;bar&lt;/code&gt; package calls &lt;code&gt;require('quux')&lt;/code&gt;, it'll get the version that is symlinked into &lt;code&gt;/usr/lib/node/bar/4.3.2/node_modules/quux&lt;/code&gt;.</source>
          <target state="translated">内のコードとき &lt;code&gt;foo&lt;/code&gt; パッケージがない &lt;code&gt;require('bar')&lt;/code&gt; 、それがにシンボリックリンクされているバージョンを取得します &lt;code&gt;/usr/lib/node/foo/1.2.3/node_modules/bar&lt;/code&gt; を。内のコードときに、 &lt;code&gt;bar&lt;/code&gt; パッケージの呼び出しが &lt;code&gt;require('quux')&lt;/code&gt; 、それがにシンボリックリンクされているバージョン取得します &lt;code&gt;/usr/lib/node/bar/4.3.2/node_modules/quux&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cd46976fb0354327dc13a6ec7685b60dc19749f9" translate="yes" xml:space="preserve">
          <source>When the connection is established, a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted on the returned socket. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">接続が確立されると、返されたソケットで&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントが発生します。最後のパラメーター &lt;code&gt;connectListener&lt;/code&gt; が指定されている場合は、&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントのリスナーとして&lt;strong&gt;1回&lt;/strong&gt;追加されます。</target>
        </trans-unit>
        <trans-unit id="cfa09effef8afe3e66a0a81273124da1b75d2f40" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;vm.createContext()&lt;/code&gt; is called, the &lt;code&gt;contextObject&lt;/code&gt; argument (or a newly-created object if &lt;code&gt;contextObject&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;) is associated internally with a new instance of a V8 Context. This V8 Context provides the &lt;code&gt;code&lt;/code&gt; run using the &lt;code&gt;vm&lt;/code&gt; module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the &lt;code&gt;contextObject&lt;/code&gt; is what this document refers to as &quot;contextifying&quot; the object.</source>
          <target state="translated">メソッド &lt;code&gt;vm.createContext()&lt;/code&gt; が呼び出されると、 &lt;code&gt;contextObject&lt;/code&gt; 引数（または &lt;code&gt;contextObject&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; 場合は新しく作成されたオブジェクト）がV8コンテキストの新しいインスタンスに内部的に関連付けられます。このV8コンテキストは、 &lt;code&gt;vm&lt;/code&gt; モジュールのメソッドを使用して実行される &lt;code&gt;code&lt;/code&gt; を、それが動作できる分離されたグローバル環境で提供します。 V8コンテキストを作成し、それを &lt;code&gt;contextObject&lt;/code&gt; に関連付けるプロセスは、このドキュメントでオブジェクトの「コンテキスト化」と呼ばれるものです。</target>
        </trans-unit>
        <trans-unit id="729d92164779ddba59574378cc26cf3a6d136c2c" translate="yes" xml:space="preserve">
          <source>When the method &lt;code&gt;vm.createContext()&lt;/code&gt; is called, the &lt;code&gt;sandbox&lt;/code&gt; object that is passed in (or a newly created object if &lt;code&gt;sandbox&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;) is associated internally with a new instance of a V8 Context. This V8 Context provides the &lt;code&gt;code&lt;/code&gt; run using the &lt;code&gt;vm&lt;/code&gt; module's methods with an isolated global environment within which it can operate. The process of creating the V8 Context and associating it with the &lt;code&gt;sandbox&lt;/code&gt; object is what this document refers to as &quot;contextifying&quot; the &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="translated">メソッド &lt;code&gt;vm.createContext()&lt;/code&gt; が呼び出されると、渡された &lt;code&gt;sandbox&lt;/code&gt; オブジェクト（または &lt;code&gt;sandbox&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; 場合は新しく作成されたオブジェクト）がV8コンテキストの新しいインスタンスに内部的に関連付けられます。このV8コンテキストは、 &lt;code&gt;vm&lt;/code&gt; モジュールのメソッドを使用して実行される &lt;code&gt;code&lt;/code&gt; と、その内部で動作する分離されたグローバル環境を提供します。 V8コンテキストを作成し、それを関連付けるプロセス &lt;code&gt;sandbox&lt;/code&gt; オブジェクトは、この文書は「contextifying」と呼んで何である &lt;code&gt;sandbox&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01caadbe64330cc1819e53d479c1f2414ca0dd3c" translate="yes" xml:space="preserve">
          <source>When the path is a directory, the behavior of &lt;code&gt;fs.readFile()&lt;/code&gt; and &lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync()&lt;/code&gt;&lt;/a&gt; is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned.</source>
          <target state="translated">パスがディレクトリの場合、 &lt;code&gt;fs.readFile()&lt;/code&gt; および&lt;a href=&quot;#fs_fs_readfilesync_path_options&quot;&gt; &lt;code&gt;fs.readFileSync()&lt;/code&gt; の動作&lt;/a&gt;はプラットフォーム固有です。macOS、Linux、およびWindowsでは、エラーが返されます。FreeBSDでは、ディレクトリの内容の表現が返されます。</target>
        </trans-unit>
        <trans-unit id="7d8a9e86b434a10cd051dc6d1f9ee3082f6619f5" translate="yes" xml:space="preserve">
          <source>When the process is about to exit, one last coverage will still be written to disk unless &lt;a href=&quot;#v8_v8_stopcoverage&quot;&gt;&lt;code&gt;v8.stopCoverage()&lt;/code&gt;&lt;/a&gt; is invoked before the process exits.</source>
          <target state="translated">プロセスが終了しようとしているとき、プロセスが終了する前に&lt;a href=&quot;#v8_v8_stopcoverage&quot;&gt; &lt;code&gt;v8.stopCoverage()&lt;/code&gt; &lt;/a&gt;が呼び出されない限り、最後の1つのカバレッジがディスクに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="eba9274eddef14d7dda14e216ded1ef3a82c17c6" translate="yes" xml:space="preserve">
          <source>When the program is resumed using &lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt;&lt;code&gt;fg(1p)&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;'pause'&lt;/code&gt; and &lt;code&gt;'SIGCONT'&lt;/code&gt; events will be emitted. These can be used to resume the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="translated">プログラムが&lt;a href=&quot;http://man7.org/linux/man-pages/man1/fg.1p.html&quot;&gt; &lt;code&gt;fg(1p)&lt;/code&gt; &lt;/a&gt;を使用して再開されると、 &lt;code&gt;'pause'&lt;/code&gt; および &lt;code&gt;'SIGCONT'&lt;/code&gt; イベントが発生します。これらは、 &lt;code&gt;input&lt;/code&gt; ストリームを再開するために使用できます。</target>
        </trans-unit>
        <trans-unit id="973f019c301a2f10546fdf95359798a8afd4304b" translate="yes" xml:space="preserve">
          <source>When there are circular &lt;code&gt;require()&lt;/code&gt; calls, a module might not have finished executing when it is returned.</source>
          <target state="translated">循環 &lt;code&gt;require()&lt;/code&gt; 呼び出しがある場合、返されたときにモジュールの実行が完了していない可能性があります。</target>
        </trans-unit>
        <trans-unit id="a83856f569bf73cddb634b7c469e9e76c59c0d43" translate="yes" xml:space="preserve">
          <source>When these methods are invoked, the &lt;code&gt;data&lt;/code&gt; parameter passed will be the addon-provided &lt;code&gt;void*&lt;/code&gt; data that was passed into the &lt;code&gt;napi_create_async_work&lt;/code&gt; call.</source>
          <target state="translated">これらのメソッドが呼び出されると、渡される &lt;code&gt;data&lt;/code&gt; パラメーターは、 &lt;code&gt;napi_create_async_work&lt;/code&gt; 呼び出しに渡されたアドオン提供の &lt;code&gt;void*&lt;/code&gt; データになります。</target>
        </trans-unit>
        <trans-unit id="161d84962881869453298b631777f71cfe4e6b80" translate="yes" xml:space="preserve">
          <source>When they are disconnected all internal handles will be closed, allowing the master process to die gracefully if no other event is waiting.</source>
          <target state="translated">それらが切断されると、すべての内部ハンドルが閉じられ、他のイベントが待機していない場合には、マスタープロセスは優雅に終了することができます。</target>
        </trans-unit>
        <trans-unit id="848bbfa33309d052a04b6c8cbbcac51e750f16d7" translate="yes" xml:space="preserve">
          <source>When this code is executed, the global &lt;code&gt;'m'&lt;/code&gt; variable can be modified but then reset to its initial value using the &lt;code&gt;.clear&lt;/code&gt; command:</source>
          <target state="translated">このコードを実行すると、グローバル &lt;code&gt;'m'&lt;/code&gt; 変数を変更できますが、 &lt;code&gt;.clear&lt;/code&gt; コマンドを使用して初期値にリセットできます。</target>
        </trans-unit>
        <trans-unit id="da17565ee00221d09a97209ab1ae2c18fb43a00e" translate="yes" xml:space="preserve">
          <source>When this event is emitted and handled, the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event will not be emitted.</source>
          <target state="translated">このイベントが発行されて処理されると、&lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="1d77c2e28b5e02c804db51a74809906188330f9e" translate="yes" xml:space="preserve">
          <source>When this event is emitted and handled, the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event will not be emitted.</source>
          <target state="translated">このイベントが発行されて処理されると、&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントは発行されません。</target>
        </trans-unit>
        <trans-unit id="ad65b9cecfc3a17f900491bb46a38e63a093e547" translate="yes" xml:space="preserve">
          <source>When this function is used, no &lt;code&gt;'message'&lt;/code&gt; event is emitted and the &lt;code&gt;onmessage&lt;/code&gt; listener is not invoked.</source>
          <target state="translated">この関数を使用すると、 &lt;code&gt;'message'&lt;/code&gt; イベントは &lt;code&gt;onmessage&lt;/code&gt; されず、onmessageリスナーは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="c4bcc6914d3f458464403894a448ce8d2cfc0398" translate="yes" xml:space="preserve">
          <source>When this function is used, no &lt;code&gt;'message'&lt;/code&gt; event will be emitted and the &lt;code&gt;onmessage&lt;/code&gt; listener will not be invoked.</source>
          <target state="translated">この関数を使用すると、 &lt;code&gt;'message'&lt;/code&gt; イベントは &lt;code&gt;onmessage&lt;/code&gt; されず、onmessageリスナーは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="daaa6a63bd85db242fbd1af931f53b55126de0a6" translate="yes" xml:space="preserve">
          <source>When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.</source>
          <target state="translated">true の場合、Date ヘッダがまだ存在しない場合、Date ヘッダが自動的に生成され、レスポンスで送信されます。デフォルトは true です。</target>
        </trans-unit>
        <trans-unit id="73bbf108c7a0af560ba18bfbdfb275fa0bd25416" translate="yes" xml:space="preserve">
          <source>When used in another application:</source>
          <target state="translated">他のアプリケーションで使用する場合。</target>
        </trans-unit>
        <trans-unit id="7b3fa09a96ecdc067355bcc942d3a49a1906efe1" translate="yes" xml:space="preserve">
          <source>When used, the &lt;code&gt;Http2Stream&lt;/code&gt; object's &lt;code&gt;Duplex&lt;/code&gt; interface will be closed automatically.</source>
          <target state="translated">使用すると、 &lt;code&gt;Http2Stream&lt;/code&gt; オブジェクトの &lt;code&gt;Duplex&lt;/code&gt; インターフェイスは自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="a375a2e214a043804716201bc2ddc239ccd3b5de" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; to allocate new &lt;code&gt;Buffer&lt;/code&gt; instances, allocations under 4KB are sliced from a single pre-allocated &lt;code&gt;Buffer&lt;/code&gt;. This allows applications to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances. This approach improves both performance and memory usage by eliminating the need to track and clean up as many persistent objects.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;Buffer&lt;/code&gt; インスタンスを割り当てる場合、4KB未満の割り当ては、事前に割り当てられた単一の &lt;code&gt;Buffer&lt;/code&gt; からスライスされます。これにより、アプリケーションは、個別に割り当てられた多数の &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成するガベージコレクションのオーバーヘッドを回避できます。このアプローチでは、多くの永続オブジェクトを追跡してクリーンアップする必要がなくなるため、パフォーマンスとメモリ使用量の両方が向上します。</target>
        </trans-unit>
        <trans-unit id="d8af369a122ff8d89a82762dba5d82286fd5b88b" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; to allocate new &lt;code&gt;Buffer&lt;/code&gt; instances, allocations under 4KB are sliced from a single pre-allocated &lt;code&gt;Buffer&lt;/code&gt;. This allows applications to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances. This approach improves both performance and memory usage by eliminating the need to track and clean up as many individual &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;Buffer&lt;/code&gt; インスタンスを割り当てる場合、4KB未満の割り当ては、事前に割り当てられた単一の &lt;code&gt;Buffer&lt;/code&gt; からスライスされます。これにより、アプリケーションは、個別に割り当てられた多数の &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成することによるガベージコレクションのオーバーヘッドを回避できます。このアプローチでは、個々の &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトをできるだけ多く追跡してクリーンアップする必要がなくなるため、パフォーマンスとメモリ使用量の両方が向上します。</target>
        </trans-unit>
        <trans-unit id="bb8a06fc84bb54aebb3f5d34322924c7994f1112" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;writable.cork()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;writable.uncork()&lt;/code&gt; to manage the buffering of writes to a stream, it is recommended that calls to &lt;code&gt;writable.uncork()&lt;/code&gt; be deferred using &lt;code&gt;process.nextTick()&lt;/code&gt;. Doing so allows batching of all &lt;code&gt;writable.write()&lt;/code&gt; calls that occur within a given Node.js event loop phase.</source>
          <target state="translated">&lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;writable.cork()&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;writable.uncork()&lt;/code&gt; を使用してストリームへの書き込みのバッファリングを管理する場合は、 &lt;code&gt;writable.uncork()&lt;/code&gt; の呼び出しを &lt;code&gt;process.nextTick()&lt;/code&gt; を使用して延期することをお勧めします。これにより、特定のNode.jsイベントループフェーズ内で発生するすべての &lt;code&gt;writable.write()&lt;/code&gt; 呼び出しのバッチ処理が可能になります。</target>
        </trans-unit>
        <trans-unit id="f1590b6db3d610ebd53a04e717ee50b6883f13c8" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, &lt;code&gt;rss&lt;/code&gt; will be a value that is valid for the entire process, while the other fields will only refer to the current thread.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドを使用する場合、 &lt;code&gt;rss&lt;/code&gt; はプロセス全体に有効な値になりますが、他のフィールドは現在のスレッドのみを参照します。</target>
        </trans-unit>
        <trans-unit id="16b462e5d0419f550bd45208e292156c7a67eb63" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;http2session.settings()&lt;/code&gt; to submit new settings, the modified settings do not take effect until the &lt;code&gt;'localSettings'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;http2session.settings()&lt;/code&gt; を使用して新しい設定を送信する場合、変更された設定は &lt;code&gt;'localSettings'&lt;/code&gt; イベントが発行されるまで有効になりません。</target>
        </trans-unit>
        <trans-unit id="edaaf463c08a1a1d1a15adb2bc0e6d02fbfcb5d4" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;node-addon-api&lt;/code&gt; instead of the C APIs, start with the API &lt;a href=&quot;https://github.com/nodejs/node-addon-api#api-documentation&quot;&gt;docs&lt;/a&gt; for &lt;code&gt;node-addon-api&lt;/code&gt;.</source>
          <target state="translated">使用する場合 &lt;code&gt;node-addon-api&lt;/code&gt; の代わりにCのAPIには、APIで始まる&lt;a href=&quot;https://github.com/nodejs/node-addon-api#api-documentation&quot;&gt;ドキュメント&lt;/a&gt;のための &lt;code&gt;node-addon-api&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbf8c05902e863e4e9f097e100e92d75ee31fd12" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;npm install&lt;/code&gt; to install a Node.js Addon, npm uses its own bundled version of &lt;code&gt;node-gyp&lt;/code&gt; to perform this same set of actions, generating a compiled version of the Addon for the user's platform on demand.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; を使用してNode.jsアドオンをインストールする場合、npmは独自のバンドルバージョンの &lt;code&gt;node-gyp&lt;/code&gt; を使用してこれと同じ一連のアクションを実行し、ユーザーのプラットフォーム用のコンパイルされたバージョンのアドオンをオンデマンドで生成します。</target>
        </trans-unit>
        <trans-unit id="f9c3b73b2354de84a2f20da8c37cc1f497ac6163" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;npm install&lt;/code&gt; to install a Node.js addon, npm uses its own bundled version of &lt;code&gt;node-gyp&lt;/code&gt; to perform this same set of actions, generating a compiled version of the addon for the user's platform on demand.</source>
          <target state="translated">&lt;code&gt;npm install&lt;/code&gt; を使用してNode.jsアドオンをインストールする場合、npmは独自のバンドルバージョンの &lt;code&gt;node-gyp&lt;/code&gt; を使用してこれと同じ一連のアクションを実行し、ユーザーのプラットフォーム用にコンパイルされたバージョンのアドオンをオンデマンドで生成します。</target>
        </trans-unit>
        <trans-unit id="889f878c7063918c8dc415e6b81305b1359bba6a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;require()&lt;/code&gt; all resources involved in loading are checked for integrity if a policy manifest has been specified. If a resource does not match the integrity listed in the manifest, an error will be thrown.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; を使用すると、ポリシーマニフェストが指定されている場合、ロードに関連するすべてのリソースの整合性がチェックされます。リソースがマニフェストにリストされている整合性と一致しない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="32dbee3a5d5832dcbb1cd50fd17f7385cbffaaef" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;cipher.setAAD()&lt;/code&gt; method sets the value used for the &lt;em&gt;additional authenticated data&lt;/em&gt; (AAD) input parameter.</source>
          <target state="translated">認証された暗号化モードを使用する場合（ &lt;code&gt;GCM&lt;/code&gt; 、 &lt;code&gt;CCM&lt;/code&gt; および &lt;code&gt;OCB&lt;/code&gt; は現在サポートされています &lt;code&gt;cipher.setAAD()&lt;/code&gt; 、cipher.setAAD（）メソッドは、&lt;em&gt;追加の認証済みデータ&lt;/em&gt;（AAD）入力パラメーターに使用される値を設定します。</target>
        </trans-unit>
        <trans-unit id="bcdf8890c4f9a7a03bba177c0cf2be932cdf094c" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;decipher.setAAD()&lt;/code&gt; method sets the value used for the &lt;em&gt;additional authenticated data&lt;/em&gt; (AAD) input parameter.</source>
          <target state="translated">認証された暗号化モードを使用する場合（ &lt;code&gt;GCM&lt;/code&gt; 、 &lt;code&gt;CCM&lt;/code&gt; および &lt;code&gt;OCB&lt;/code&gt; は現在サポートされています &lt;code&gt;decipher.setAAD()&lt;/code&gt; 、decipher.setAAD（）メソッドは、&lt;em&gt;追加の認証済みデータ&lt;/em&gt;（AAD）入力パラメーターに使用される値を設定します。</target>
        </trans-unit>
        <trans-unit id="0b5becc7fa138f3deaf68c544742ebc6637e666f" translate="yes" xml:space="preserve">
          <source>When using an authenticated encryption mode (&lt;code&gt;GCM&lt;/code&gt;, &lt;code&gt;CCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; are currently supported), the &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method is used to pass in the received &lt;em&gt;authentication tag&lt;/em&gt;. If no tag is provided, or if the cipher text has been tampered with, &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will throw, indicating that the cipher text should be discarded due to failed authentication. If the tag length is invalid according to &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt; or does not match the value of the &lt;code&gt;authTagLength&lt;/code&gt; option, &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; will throw an error.</source>
          <target state="translated">認証された暗号化モードを使用する場合（ &lt;code&gt;GCM&lt;/code&gt; 、 &lt;code&gt;CCM&lt;/code&gt; および &lt;code&gt;OCB&lt;/code&gt; は現在サポートされています）、 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; メソッドを使用して、受信した&lt;em&gt;認証タグ&lt;/em&gt;を渡します。タグが提供されていない場合、または暗号テキストが改ざんされている場合、&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;がスローされ、認証の失敗により暗号テキストが破棄されるべきであることを示します。&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;に従ってタグの長さが無効であるか、 &lt;code&gt;authTagLength&lt;/code&gt; オプションの値と一致しない場合、 &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="e8abded618bf1e61374edf617c0e50239f5e735f" translate="yes" xml:space="preserve">
          <source>When using an older Node.js library that emits &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events and has a &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method that is advisory only, the &lt;code&gt;readable.wrap()&lt;/code&gt; method can be used to create a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream that uses the old stream as its data source.</source>
          <target state="translated">放射することを古いNode.jsのライブラリを使用する場合は&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;のイベントとあり&lt;a href=&quot;#stream_readable_pause&quot;&gt; &lt;code&gt;stream.pause()&lt;/code&gt; &lt;/a&gt;唯一の助言である方法を、 &lt;code&gt;readable.wrap()&lt;/code&gt; メソッドを作成するために使用することができる&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;そのよう古いストリームを使用してストリームを情報源。</target>
        </trans-unit>
        <trans-unit id="d4a8a76000e40163d6b78b5788dc252982989de8" translate="yes" xml:space="preserve">
          <source>When using block encryption algorithms, the &lt;code&gt;Cipher&lt;/code&gt; class will automatically add padding to the input data to the appropriate block size. To disable the default padding call &lt;code&gt;cipher.setAutoPadding(false)&lt;/code&gt;.</source>
          <target state="translated">ブロック暗号化アルゴリズムを使用する場合、 &lt;code&gt;Cipher&lt;/code&gt; クラスは入力データに適切なブロックサイズになるようにパディングを自動的に追加します。デフォルトのパディングを無効にするには、 &lt;code&gt;cipher.setAutoPadding(false)&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6bde8404bcfba13f7fe07b88c2ce9708a51b5344" translate="yes" xml:space="preserve">
          <source>When using either &lt;a href=&quot;#vm_script_runinthiscontext_options&quot;&gt;&lt;code&gt;script.runInThisContext()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt;&lt;code&gt;vm.runInThisContext()&lt;/code&gt;&lt;/a&gt;, the code is executed within the current V8 global context. The code passed to this VM context will have its own isolated scope.</source>
          <target state="translated">いずれかを使用した場合に&lt;a href=&quot;#vm_script_runinthiscontext_options&quot;&gt; &lt;code&gt;script.runInThisContext()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt; &lt;code&gt;vm.runInThisContext()&lt;/code&gt; &lt;/a&gt;、コードは、現在のV8グローバルコンテキスト内で実行されます。このVMコンテキストに渡されるコードには、独自の分離スコープがあります。</target>
        </trans-unit>
        <trans-unit id="d4b392ebb5f406274751ac4a974842c597a563e1" translate="yes" xml:space="preserve">
          <source>When using environment branches, always include a &lt;code&gt;&quot;default&quot;&lt;/code&gt; condition where possible. Providing a &lt;code&gt;&quot;default&quot;&lt;/code&gt; condition ensures that any unknown JS environments are able to use this universal implementation, which helps avoid these JS environments from having to pretend to be existing environments in order to support packages with conditional exports. For this reason, using &lt;code&gt;&quot;node&quot;&lt;/code&gt; and &lt;code&gt;&quot;default&quot;&lt;/code&gt; condition branches is usually preferable to using &lt;code&gt;&quot;node&quot;&lt;/code&gt; and &lt;code&gt;&quot;browser&quot;&lt;/code&gt; condition branches.</source>
          <target state="translated">環境ブランチを使用する場合は、可能な &lt;code&gt;&quot;default&quot;&lt;/code&gt; は常に「デフォルト」条件を含めてください。 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 条件を提供することで、未知のJS環境がこのユニバーサル実装を使用できるようになり、条件付きエクスポートでパッケージをサポートするために、これらのJS環境が既存の環境のふりをする必要がなくなります。このため、通常、 &lt;code&gt;&quot;node&quot;&lt;/code&gt; および &lt;code&gt;&quot;browser&quot;&lt;/code&gt; 条件ブランチを使用するよりも、 &lt;code&gt;&quot;node&quot;&lt;/code&gt; および &lt;code&gt;&quot;default&quot;&lt;/code&gt; 条件ブランチを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e942021306a7b23d251e9b0a7a27441e49416042" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</source>
          <target state="translated">暗黙的なヘッダーを使用する場合（&lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出さない場合）、このプロパティは、ヘッダーがフラッシュされたときにクライアントに送信されるステータスコードを制御します。</target>
        </trans-unit>
        <trans-unit id="60893816080aba27da8d4e6ee7f959a8e20d2f06" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status code that will be sent to the client when the headers get flushed.</source>
          <target state="translated">暗黙的なヘッダーを使用する場合（&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出さない場合）、このプロパティは、ヘッダーがフラッシュされたときにクライアントに送信されるステータスコードを制御します。</target>
        </trans-unit>
        <trans-unit id="1e3f4c4e721d306fd7c7d7b456a5392ba5e3af47" translate="yes" xml:space="preserve">
          <source>When using implicit headers (not calling &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; explicitly), this property controls the status message that will be sent to the client when the headers get flushed. If this is left as &lt;code&gt;undefined&lt;/code&gt; then the standard message for the status code will be used.</source>
          <target state="translated">暗黙的なヘッダーを使用する場合（&lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt; &lt;code&gt;response.writeHead()&lt;/code&gt; を&lt;/a&gt;明示的に呼び出さない場合）、このプロパティは、ヘッダーがフラッシュされたときにクライアントに送信されるステータスメッセージを制御します。これを &lt;code&gt;undefined&lt;/code&gt; にすると、ステータスコードの標準メッセージが使用されます。</target>
        </trans-unit>
        <trans-unit id="12c9765153405927e84db58e9afc9c476579e1a9" translate="yes" xml:space="preserve">
          <source>When using pipeline:</source>
          <target state="translated">パイプラインを使用する場合。</target>
        </trans-unit>
        <trans-unit id="0d7fc4558703896b0eddb79f45cb41e05e1ec2cd" translate="yes" xml:space="preserve">
          <source>When using raw numbers where file modes are expected, any value larger than &lt;code&gt;0o777&lt;/code&gt; may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like &lt;code&gt;S_ISVTX&lt;/code&gt;, &lt;code&gt;S_ISGID&lt;/code&gt; or &lt;code&gt;S_ISUID&lt;/code&gt; are not exposed in &lt;code&gt;fs.constants&lt;/code&gt;.</source>
          <target state="translated">ファイルモードが予想される生の数値を使用する場合、 &lt;code&gt;0o777&lt;/code&gt; より大きい値を使用すると、一貫した動作がサポートされていないプラットフォーム固有の動作が発生する可能性があります。そのためのような定数 &lt;code&gt;S_ISVTX&lt;/code&gt; 、 &lt;code&gt;S_ISGID&lt;/code&gt; または &lt;code&gt;S_ISUID&lt;/code&gt; はで公開されていない &lt;code&gt;fs.constants&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f6605525ad51f6a30d5fbabc03561e06e76bfa6" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, custom subpaths can be defined along with the main entry point by treating the main entry point as the &lt;code&gt;&quot;.&quot;&lt;/code&gt; subpath:</source>
          <target state="translated">&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドを使用する場合、メインエントリポイントを &lt;code&gt;&quot;.&quot;&lt;/code&gt; として扱うことにより、カスタムサブパスをメインエントリポイントとともに定義できます。サブパス：</target>
        </trans-unit>
        <trans-unit id="986cd8268880cef740911a0c55d562f7c09c1379" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;detached&lt;/code&gt; option to start a long-running process, the process will not stay running in the background after the parent exits unless it is provided with a &lt;code&gt;stdio&lt;/code&gt; configuration that is not connected to the parent. If the parent's &lt;code&gt;stdio&lt;/code&gt; is inherited, the child will remain attached to the controlling terminal.</source>
          <target state="translated">&lt;code&gt;detached&lt;/code&gt; オプションを使用して長時間実行プロセスを開始する場合、親に接続されていない &lt;code&gt;stdio&lt;/code&gt; 構成が提供されていない限り、親の終了後、プロセスはバックグラウンドで実行されたままにはなりません。親の &lt;code&gt;stdio&lt;/code&gt; が継承される場合、子は制御端末に接続されたままになります。</target>
        </trans-unit>
        <trans-unit id="9f2bbc751362fc160bc2ffe73acfb71d4b97aa60" translate="yes" xml:space="preserve">
          <source>When wrapping a C++ class, the C++ constructor callback passed via &lt;code&gt;constructor&lt;/code&gt; should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See &lt;a href=&quot;#n_api_napi_wrap&quot;&gt;&lt;code&gt;napi_wrap&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">C ++クラスをラップするときに、渡しC ++コンストラクタコールバック &lt;code&gt;constructor&lt;/code&gt; 実際のクラスのコンストラクタを呼び出すクラスの静的メソッドであるべきで、その後、JavaScriptオブジェクトに新しいC ++インスタンスをラップし、ラッパー・オブジェクトを返します。詳細については、&lt;a href=&quot;#n_api_napi_wrap&quot;&gt; &lt;code&gt;napi_wrap&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ae4a9b10065ee31ea508871d338d7436779cee7c" translate="yes" xml:space="preserve">
          <source>When writing to a writable stream from an async iterator, ensure correct handling of backpressure and errors. &lt;a href=&quot;#stream_stream_pipeline_source_transforms_destination_callback&quot;&gt;&lt;code&gt;stream.pipeline()&lt;/code&gt;&lt;/a&gt; abstracts away the handling of backpressure and backpressure-related errors:</source>
          <target state="translated">非同期イテレータから書き込み可能なストリームに書き込むときは、バックプレッシャとエラーを正しく処理するようにしてください。&lt;a href=&quot;#stream_stream_pipeline_source_transforms_destination_callback&quot;&gt; &lt;code&gt;stream.pipeline()&lt;/code&gt; は、バックプレッシャおよびバックプレッシャ&lt;/a&gt;関連のエラーの処理を抽象化します。</target>
        </trans-unit>
        <trans-unit id="c120d35e20c3a52de19e7e178e265a55a8badd2d" translate="yes" xml:space="preserve">
          <source>Whenever an HTTP/2 &lt;code&gt;SETTINGS&lt;/code&gt; frame is sent to a connected peer, the peer is required to send an acknowledgment that it has received and applied the new &lt;code&gt;SETTINGS&lt;/code&gt;. By default, a maximum number of unacknowledged &lt;code&gt;SETTINGS&lt;/code&gt; frames may be sent at any given time. This error code is used when that limit has been reached.</source>
          <target state="translated">接続されたピアにHTTP / 2 &lt;code&gt;SETTINGS&lt;/code&gt; フレームが送信されるたびに、ピアは新しい &lt;code&gt;SETTINGS&lt;/code&gt; を受信して適用したことの確認を送信する必要があります。デフォルトでは、最大数の未確認の &lt;code&gt;SETTINGS&lt;/code&gt; フレームをいつでも送信できます。このエラーコードは、その制限に達したときに使用されます。</target>
        </trans-unit>
        <trans-unit id="dcc1f2aed891a178fc6f056739700967c873c616" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the &lt;a href=&quot;#assert_strict_assertion_mode&quot;&gt;strict assertion mode&lt;/a&gt; instead. Otherwise, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; may cause surprising results. This is especially true for &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;, where the comparison rules are lax:</source>
          <target state="translated">可能な限り、代わりに&lt;a href=&quot;#assert_strict_assertion_mode&quot;&gt;厳密なアサーションモードを&lt;/a&gt;使用してください。そうしないと、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象的な等式の比較&lt;/a&gt;によって驚くべき結果が生じる可能性があります。これは特に&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; に&lt;/a&gt;当てはまります。ここで、比較ルールは緩いです。</target>
        </trans-unit>
        <trans-unit id="de56f8a5e50431418240afbb2b02e04f59424ed0" translate="yes" xml:space="preserve">
          <source>Whenever possible, use the &lt;a href=&quot;#assert_strict_mode&quot;&gt;&lt;code&gt;strict&lt;/code&gt; mode&lt;/a&gt; instead. Otherwise, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; may cause surprising results. This is especially true for &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt;, where the comparison rules are lax:</source>
          <target state="translated">可能な限り、&lt;a href=&quot;#assert_strict_mode&quot;&gt; &lt;code&gt;strict&lt;/code&gt; モードを&lt;/a&gt;代わりに使用してください。そうしないと、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等値比較&lt;/a&gt;が驚くべき結果を引き起こす可能性があります。これは、比較ルールが&lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt; &lt;code&gt;assert.deepEqual()&lt;/code&gt; &lt;/a&gt;特に当てはまります。</target>
        </trans-unit>
        <trans-unit id="4b0837810808c1db86ff7969b3cc7349ad3a777d" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$HOME&lt;/code&gt; is the user's home directory, and &lt;code&gt;$PREFIX&lt;/code&gt; is Node.js's configured &lt;code&gt;node_prefix&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;$HOME&lt;/code&gt; はユーザーのホームディレクトリで、 &lt;code&gt;$PREFIX&lt;/code&gt; はNode.jsの構成 &lt;code&gt;node_prefix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f32697019030f03ffa8466dad93332914e45c734" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;$HOME&lt;/code&gt; is the user's home directory, and &lt;code&gt;$PREFIX&lt;/code&gt; is the Node.js configured &lt;code&gt;node_prefix&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;$HOME&lt;/code&gt; はユーザーのホームディレクトリであり、 &lt;code&gt;$PREFIX&lt;/code&gt; はNode.jsで構成された &lt;code&gt;node_prefix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="38c19b2f1a4bf680069191361065f1dffe346b36" translate="yes" xml:space="preserve">
          <source>Whereas DOM &lt;code&gt;EventTarget&lt;/code&gt; instances &lt;em&gt;may&lt;/em&gt; be hierarchical, there is no concept of hierarchy and event propagation in Node.js. That is, an event dispatched to an &lt;code&gt;EventTarget&lt;/code&gt; does not propagate through a hierarchy of nested target objects that may each have their own set of handlers for the event.</source>
          <target state="translated">DOM &lt;code&gt;EventTarget&lt;/code&gt; インスタンス&lt;em&gt;は&lt;/em&gt;階層的である&lt;em&gt;可能性&lt;/em&gt;がありますが、Node.jsには階層とイベント伝播の概念はありません。つまり、 &lt;code&gt;EventTarget&lt;/code&gt; にディスパッチされたイベントは、それぞれがイベントの独自のハンドラーセットを持つ可能性のあるネストされたターゲットオブジェクトの階層を介して伝播されません。</target>
        </trans-unit>
        <trans-unit id="4d88ed0feb975e4fa8a53343cb171f8d13d607d4" translate="yes" xml:space="preserve">
          <source>Whether or not the module is done loading, or is in the process of loading.</source>
          <target state="translated">モジュールのロードが完了したかどうか、またはロード中かどうか。</target>
        </trans-unit>
        <trans-unit id="150bcea502183560d4bd3b371b2eac70c65966c2" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&quot;&gt;&lt;code&gt;TypedArray#slice()&lt;/code&gt;&lt;/a&gt; creates a copy of part of the &lt;code&gt;TypedArray&lt;/code&gt;, &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;Buffer#slice()&lt;/code&gt;&lt;/a&gt; creates a view over the existing &lt;code&gt;Buffer&lt;/code&gt; without copying. This behavior can be surprising, and only exists for legacy compatibility. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt; can be used to achieve the behavior of &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;Buffer#slice()&lt;/code&gt;&lt;/a&gt; on both &lt;code&gt;Buffer&lt;/code&gt;s and other &lt;code&gt;TypedArray&lt;/code&gt;s.</source>
          <target state="translated">一方で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice&quot;&gt; &lt;code&gt;TypedArray#slice()&lt;/code&gt; &lt;/a&gt;の一部のコピーを作成し &lt;code&gt;TypedArray&lt;/code&gt; 、&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;Buffer#slice()&lt;/code&gt; &lt;/a&gt;既存のオーバービューを作成 &lt;code&gt;Buffer&lt;/code&gt; にコピーせずに。この動作は驚くべきものであり、レガシー互換性のためにのみ存在します。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;Buffer&lt;/code&gt; と他の &lt;code&gt;TypedArray&lt;/code&gt; の両方で&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;Buffer#slice()&lt;/code&gt; の&lt;/a&gt;動作を実現できます。</target>
        </trans-unit>
        <trans-unit id="073b0a5fc18cb0c2d155506393ae1a3f4713ec1d" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;readable.readableFlowing&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, data may be accumulating within the stream's internal buffer.</source>
          <target state="translated">一方で &lt;code&gt;readable.readableFlowing&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、データは、ストリームの内部バッファ内に蓄積することができます。</target>
        </trans-unit>
        <trans-unit id="56c8f07d4ebaba9048700c889aa63a035ed687c0" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;parentURL&lt;/em&gt; is not the file system root,</source>
          <target state="translated">一方で&lt;em&gt;parentURLは、&lt;/em&gt;ファイルシステムのルートではありません、</target>
        </trans-unit>
        <trans-unit id="3eaccbf0809c93e1b57c8a5d1f706909dffd3367" translate="yes" xml:space="preserve">
          <source>While &lt;em&gt;scopeURL&lt;/em&gt; is not the file system root,</source>
          <target state="translated">一方で&lt;em&gt;scopeURLは、&lt;/em&gt;ファイルシステムのルートではありません、</target>
        </trans-unit>
        <trans-unit id="827e891467d3d9882b685c22937f88f6efa8b40f" translate="yes" xml:space="preserve">
          <source>While a Node.js process typically releases all its resources when exiting, embedders of Node.js, or future Worker support, may require addons to register clean-up hooks that will be run once the current Node.js instance exits.</source>
          <target state="translated">Node.jsプロセスは通常、終了時にすべてのリソースを解放しますが、Node.jsのエンベッダーや将来のWorkerサポートでは、現在のNode.jsインスタンスが終了した後に実行されるクリーンアップフックを登録するためのアドオンが必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="16bf687a5d42e237a08af3b384d73c158bf3b89e" translate="yes" xml:space="preserve">
          <source>While a stream is not draining, calls to &lt;code&gt;write()&lt;/code&gt; will buffer &lt;code&gt;chunk&lt;/code&gt;, and return false. Once all currently buffered chunks are drained (accepted for delivery by the operating system), the &lt;code&gt;'drain'&lt;/code&gt; event will be emitted. It is recommended that once &lt;code&gt;write()&lt;/code&gt; returns false, no more chunks be written until the &lt;code&gt;'drain'&lt;/code&gt; event is emitted. While calling &lt;code&gt;write()&lt;/code&gt; on a stream that is not draining is allowed, Node.js will buffer all written chunks until maximum memory usage occurs, at which point it will abort unconditionally. Even before it aborts, high memory usage will cause poor garbage collector performance and high RSS (which is not typically released back to the system, even after the memory is no longer required). Since TCP sockets may never drain if the remote peer does not read the data, writing a socket that is not draining may lead to a remotely exploitable vulnerability.</source>
          <target state="translated">ストリームがドレインされていない間、 &lt;code&gt;write()&lt;/code&gt; への呼び出しは &lt;code&gt;chunk&lt;/code&gt; をバッファリングし、falseを返します。現在バッファリングされているすべてのチャンクが排出されると（オペレーティングシステムによる配信が受け入れられると）、 &lt;code&gt;'drain'&lt;/code&gt; イベントが発生します。 &lt;code&gt;write()&lt;/code&gt; がfalseを返すと、 &lt;code&gt;'drain'&lt;/code&gt; イベントが発行されるまで、これ以上チャンクを書き込まないことをお勧めします。 &lt;code&gt;write()&lt;/code&gt; を呼び出している間ドレインが許可されていないストリームでは、Node.jsは、最大メモリ使用量が発生するまで、書き込まれたすべてのチャンクをバッファします。この時点で、無条件に中止されます。中止する前であっても、メモリ使用量が多いと、ガベージコレクタのパフォーマンスが低下し、RSSが高くなります（メモリが不要になった後でも、通常はシステムに解放されません）。リモートピアがデータを読み取らない場合、TCPソケットはドレインされない可能性があるため、ドレインされていないソケットを書き込むと、リモートから悪用可能な脆弱性につながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d6a8020de6b381b75f56b7f678ab65ef6cbe3057" translate="yes" xml:space="preserve">
          <source>While a worker is alive, this is the key that indexes it in &lt;code&gt;cluster.workers&lt;/code&gt;.</source>
          <target state="translated">ワーカーが生きている間、これは &lt;code&gt;cluster.workers&lt;/code&gt; でワーカーにインデックスを付けるキーです。</target>
        </trans-unit>
        <trans-unit id="1fd443864b968d1422e68befd59a84340c0cbe2f" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_dataview()&lt;/code&gt;, a given &lt;code&gt;offset&lt;/code&gt; was outside the bounds of the dataview or &lt;code&gt;offset + length&lt;/code&gt; was larger than a length of given &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_create_dataview()&lt;/code&gt; の呼び出し中に、指定 &lt;code&gt;offset&lt;/code&gt; れたオフセットがデータビューの境界の外にあるか、 &lt;code&gt;offset + length&lt;/code&gt; さが指定された &lt;code&gt;buffer&lt;/code&gt; 長さを超えていました。</target>
        </trans-unit>
        <trans-unit id="8ac13a17681e077ea5bf349faacd8194b41cfd8a" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_typedarray()&lt;/code&gt;, &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; was larger than the length of given &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_create_typedarray()&lt;/code&gt; の呼び出し中に、 &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; が、指定された &lt;code&gt;buffer&lt;/code&gt; 長さよりも大きかった。</target>
        </trans-unit>
        <trans-unit id="89bedcd7f7b0e6f56592b23db9232857980b56be" translate="yes" xml:space="preserve">
          <source>While calling &lt;code&gt;napi_create_typedarray()&lt;/code&gt;, the provided &lt;code&gt;offset&lt;/code&gt; was not a multiple of the element size.</source>
          <target state="translated">&lt;code&gt;napi_create_typedarray()&lt;/code&gt; の呼び出し中に、指定された &lt;code&gt;offset&lt;/code&gt; は要素サイズの倍数ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="5f70577b8889d7968ea8fc5369e676e9ca7b273e" translate="yes" xml:space="preserve">
          <source>While client code may generate and propagate these errors, in practice, only V8 will do so.</source>
          <target state="translated">クライアントコードはこれらのエラーを生成して伝播することができますが、実際にはV8のみがこれを行います。</target>
        </trans-unit>
        <trans-unit id="0a77636ef4321da677173086cd96495f6d6cd2c5" translate="yes" xml:space="preserve">
          <source>While it is not recommended, most fs functions allow the callback argument to be omitted, in which case a default callback is used that rethrows errors. To get a trace to the original call site, set the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable:</source>
          <target state="translated">推奨されていませんが、ほとんどのfs関数ではコールバック引数を省略できます。その場合、デフォルトのコールバックが使用され、エラーが再スローされます。元の呼び出しサイトへのトレースを取得するには、 &lt;code&gt;NODE_DEBUG&lt;/code&gt; 環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="07ad085018317673130d977314c9fd1a0ab27428" translate="yes" xml:space="preserve">
          <source>While most applications will almost never need to do this, there are situations within Node.js where this is done, particularly in the &lt;code&gt;Readable&lt;/code&gt; stream class internals.</source>
          <target state="translated">ほとんどのアプリケーションではこれを行う必要はほとんどありませんが、特に &lt;code&gt;Readable&lt;/code&gt; ストリームクラスの内部で、Node.js内でこれが行われる状況があります。</target>
        </trans-unit>
        <trans-unit id="12603addff37ef7fb8f4096757cb2ac7b6201fe2" translate="yes" xml:space="preserve">
          <source>While most applications will continue to function normally, this introduces an edge case in the following conditions:</source>
          <target state="translated">ほとんどのアプリケーションは正常に機能しますが、次のような状況ではエッジケースが発生します。</target>
        </trans-unit>
        <trans-unit id="2e267fe043876fa36afddb190a1c3ab052c39add" translate="yes" xml:space="preserve">
          <source>While other subpaths will error:</source>
          <target state="translated">他のサブパスはエラーになりますが。</target>
        </trans-unit>
        <trans-unit id="e574df95dc872b8cc54642689247473a5c7d5173" translate="yes" xml:space="preserve">
          <source>While process warnings use &lt;code&gt;Error&lt;/code&gt; objects, the process warning mechanism is &lt;strong&gt;not&lt;/strong&gt; a replacement for normal error handling mechanisms.</source>
          <target state="translated">プロセス警告は &lt;code&gt;Error&lt;/code&gt; オブジェクトを使用しますが、プロセス警告メカニズムは通常のエラー処理メカニズムの代わりにはなり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="53b02f9a1b3e1a259321fe33272d01f74b179e92" translate="yes" xml:space="preserve">
          <source>While specific instances of &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; streams may differ in various ways, all &lt;code&gt;Writable&lt;/code&gt; streams follow the same fundamental usage pattern as illustrated in the example below:</source>
          <target state="translated">&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームの特定のインスタンスはさまざまな点で異なる場合がありますが、すべての &lt;code&gt;Writable&lt;/code&gt; ストリームは、以下の例に示すように、同じ基本的な使用パターンに従います。</target>
        </trans-unit>
        <trans-unit id="9bda333a604d893d1a75ffb87d5525e7ef7b7daa" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;bindings&lt;/code&gt; package implementation is more sophisticated in how it locates Addon modules, it is essentially using a &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; pattern similar to:</source>
          <target state="translated">一方で &lt;code&gt;bindings&lt;/code&gt; パッケージの実装は、それがアドオンモジュールを検索する方法で、より洗練され、それは基本的に使用されて &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; と同様のパターンを：</target>
        </trans-unit>
        <trans-unit id="148734bd8ae3a9daac7e2781c1383ca3a0ec28e6" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;bindings&lt;/code&gt; package implementation is more sophisticated in how it locates addon modules, it is essentially using a &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; pattern similar to:</source>
          <target state="translated">一方で &lt;code&gt;bindings&lt;/code&gt; パッケージの実装は、それがアドオンモジュールを検索する方法で、より洗練され、それは基本的に使用している &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; 同様のパターンにします：</target>
        </trans-unit>
        <trans-unit id="76c90ee7eba72880849307c2039e0e4bb01a80a1" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;length&lt;/code&gt; property is not immutable, changing the value of &lt;code&gt;length&lt;/code&gt; can result in undefined and inconsistent behavior. Applications that wish to modify the length of a &lt;code&gt;Buffer&lt;/code&gt; should therefore treat &lt;code&gt;length&lt;/code&gt; as read-only and use &lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt;&lt;code&gt;buf.slice()&lt;/code&gt;&lt;/a&gt; to create a new &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">ながら &lt;code&gt;length&lt;/code&gt; 性は不変ではない、の値は変化 &lt;code&gt;length&lt;/code&gt; 不定と一貫性のない動作をもたらすことができます。したがって、 &lt;code&gt;Buffer&lt;/code&gt; の長さを変更するアプリケーションでは、 &lt;code&gt;length&lt;/code&gt; を読み取り専用として扱い、&lt;a href=&quot;#buffer_buf_slice_start_end&quot;&gt; &lt;code&gt;buf.slice()&lt;/code&gt; &lt;/a&gt;を使用して新しい &lt;code&gt;Buffer&lt;/code&gt; を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a623dbbd3951370c264476b7c6e7232613236f42" translate="yes" xml:space="preserve">
          <source>While the Legacy API has not been deprecated, it is maintained solely for backwards compatibility with existing applications. New application code should use the WHATWG API.</source>
          <target state="translated">レガシー API は非推奨にはなっていませんが、既存のアプリケーションとの下位互換性のためだけに維持されています。新しいアプリケーション・コードは WHATWG API を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="09c5d64ead347c0d1001f45fe745bced7173b737" translate="yes" xml:space="preserve">
          <source>While the example above uses a server created using the &lt;code&gt;net&lt;/code&gt; module, &lt;code&gt;dgram&lt;/code&gt; module servers use exactly the same workflow with the exceptions of listening on a &lt;code&gt;'message'&lt;/code&gt; event instead of &lt;code&gt;'connection'&lt;/code&gt; and using &lt;code&gt;server.bind()&lt;/code&gt; instead of &lt;code&gt;server.listen()&lt;/code&gt;. This is, however, currently only supported on Unix platforms.</source>
          <target state="translated">上記の例は &lt;code&gt;net&lt;/code&gt; モジュールを使用して作成されたサーバーを使用していますが、 &lt;code&gt;dgram&lt;/code&gt; モジュールサーバーは、 &lt;code&gt;'connection'&lt;/code&gt; ではなく &lt;code&gt;'message'&lt;/code&gt; イベントをリッスンし、 &lt;code&gt;server.listen()&lt;/code&gt; &lt;code&gt;server.bind()&lt;/code&gt; 代わりにserver.bind（）を使用することを除いて、まったく同じワークフローを使用します。 ）。ただし、これは現在、UNIXプラットフォームでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="4cc676ce4cebcbf29d86e81b5c7d0dff3d3d683c" translate="yes" xml:space="preserve">
          <source>While the following will:</source>
          <target state="translated">次のようになりますが。</target>
        </trans-unit>
        <trans-unit id="b5fff3058753561ed1c6d6a0fda3b9ebdd80b49a" translate="yes" xml:space="preserve">
          <source>While the function is called &lt;code&gt;kill&lt;/code&gt;, the signal delivered to the child process may not actually terminate the process.</source>
          <target state="translated">関数が &lt;code&gt;kill&lt;/code&gt; と呼ばれている間、子プロセスに配信されたシグナルは実際にはプロセスを終了しない場合があります。</target>
        </trans-unit>
        <trans-unit id="272a1681221a0eec5a8cfa19d26eb906122e1b59" translate="yes" xml:space="preserve">
          <source>While there are clear performance advantages to using &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, extra care &lt;em&gt;must&lt;/em&gt; be taken in order to avoid introducing security vulnerabilities into an application.</source>
          <target state="translated">&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; の&lt;/a&gt;使用には明らかにパフォーマンス上の利点が&lt;em&gt;あり&lt;/em&gt;ますが、アプリケーションにセキュリティの脆弱性が持ち込まれ&lt;em&gt;ない&lt;/em&gt;ように、特別な注意を払う&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="dff47dc75762b117c912273ee750fcd8b8835a1f" translate="yes" xml:space="preserve">
          <source>While there are clear performance advantages to using &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, extra care &lt;em&gt;must&lt;/em&gt; be taken in order to avoid introducing security vulnerabilities into an application.</source>
          <target state="translated">&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;を使用することには明らかなパフォーマンス上の利点が&lt;em&gt;あり&lt;/em&gt;ますが、アプリケーションにセキュリティの脆弱性が導入され&lt;em&gt;ない&lt;/em&gt;ように、特別な注意を払う&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="906514837da60312b0100c43d459f45d3629e591" translate="yes" xml:space="preserve">
          <source>While using &lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;, the size of the receive or send &lt;code&gt;Buffer&lt;/code&gt; could not be determined.</source>
          <target state="translated">&lt;a href=&quot;dgram#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt;を使用しているときに、受信または送信 &lt;code&gt;Buffer&lt;/code&gt; サイズを判別できませんでした。</target>
        </trans-unit>
        <trans-unit id="05941d502963f71fe136daa4cb4b731bc168d99f" translate="yes" xml:space="preserve">
          <source>While using &lt;code&gt;N-API&lt;/code&gt;, a constructor passed was not a function.</source>
          <target state="translated">&lt;code&gt;N-API&lt;/code&gt; の使用中に、渡されたコンストラクターは関数ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="93457bdd2cd57367c90d2f2935274066789902d1" translate="yes" xml:space="preserve">
          <source>While using TLS, the &lt;code&gt;server.addContext()&lt;/code&gt; method was called without providing a host name in the first parameter.</source>
          <target state="translated">TLSの使用中に、最初のパラメーターにホスト名を指定せずに &lt;code&gt;server.addContext()&lt;/code&gt; メソッドが呼び出されました。</target>
        </trans-unit>
        <trans-unit id="f9146b4c870abc13d8e7270e7e2c8205a2d51013" translate="yes" xml:space="preserve">
          <source>While using TLS, the &lt;code&gt;server.addContext()&lt;/code&gt; method was called without providing a hostname in the first parameter.</source>
          <target state="translated">TLSの使用中に、最初のパラメーターにホスト名を指定せずに &lt;code&gt;server.addContext()&lt;/code&gt; メソッドが呼び出されました。</target>
        </trans-unit>
        <trans-unit id="4a919666b0cfbcead82430357bab047021b52466" translate="yes" xml:space="preserve">
          <source>While using TLS, the host name/IP of the peer did not match any of the &lt;code&gt;subjectAltNames&lt;/code&gt; in its certificate.</source>
          <target state="translated">TLSを使用しているときに、ピアのホスト名/ IPが証明書の &lt;code&gt;subjectAltNames&lt;/code&gt; のいずれとも一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="1a7d1e22335731ae81c12afd1af0756eec95e9e1" translate="yes" xml:space="preserve">
          <source>While using TLS, the hostname/IP of the peer did not match any of the &lt;code&gt;subjectAltNames&lt;/code&gt; in its certificate.</source>
          <target state="translated">TLSを使用しているときに、ピアのホスト名/ IPが証明書内のどの &lt;code&gt;subjectAltNames&lt;/code&gt; とも一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="45d99be8b65878064711b0e62c2136d7a075162d" translate="yes" xml:space="preserve">
          <source>While using TLS, the parameter offered for the Diffie-Hellman (&lt;code&gt;DH&lt;/code&gt;) key-agreement protocol is too small. By default, the key length must be greater than or equal to 1024 bits to avoid vulnerabilities, even though it is strongly recommended to use 2048 bits or larger for stronger security.</source>
          <target state="translated">TLSの使用中に、Diffie-Hellman（ &lt;code&gt;DH&lt;/code&gt; ）鍵合意プロトコルに提供されるパラメーターが小さすぎます。セキュリティを強化するために2048ビット以上を使用することを強くお勧めしますが、デフォルトでは、脆弱性を回避するためにキー長は1024ビット以上である必要があります。</target>
        </trans-unit>
        <trans-unit id="0255bf434163a119a17b1d975c9f1e7ecfd257e3" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to activate the inspector when it already started to listen on a port. Use &lt;code&gt;inspector.close()&lt;/code&gt; before activating it on a different address.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールの使用中に、インスペクターがすでにポートでリッスンを開始しているときに、インスペクターをアクティブ化しようとしました。別のアドレスでアクティブ化する前に、 &lt;code&gt;inspector.close()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="f0ed3431f9e7da6bdb7c0cdcc138f0c67a3a84bd" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to connect when the inspector was already connected.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールの使用中に、インスペクターが既に接続されているときに接続しようとしました。</target>
        </trans-unit>
        <trans-unit id="c9e4d1438169aa995467dae33b288560aea4c176" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to use the inspector after the session had already closed.</source>
          <target state="translated">使用している間 &lt;code&gt;inspector&lt;/code&gt; モジュールを、試みは、セッションがすでに終了した後にインスペクタを使用しました。</target>
        </trans-unit>
        <trans-unit id="7c8341fb6d1f4721021429c0a358429868bcd9a7" translate="yes" xml:space="preserve">
          <source>While using the &lt;code&gt;inspector&lt;/code&gt; module, an attempt was made to use the inspector before it was connected.</source>
          <target state="translated">使用している間 &lt;code&gt;inspector&lt;/code&gt; モジュールを、試みは、それが接続されていた前に、インスペクタを使用しました。</target>
        </trans-unit>
        <trans-unit id="85091e3c3a7666c26248b532c8232f034e100cae" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), a performance mark is invalid.</source>
          <target state="translated">Performance Timing API（ &lt;code&gt;perf_hooks&lt;/code&gt; ）を使用している間、パフォーマンスマークは無効です。</target>
        </trans-unit>
        <trans-unit id="cc4a904bf2febe00864e7180029aef452cfb34c5" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), no valid performance entry types are found.</source>
          <target state="translated">Performance Timing API（ &lt;code&gt;perf_hooks&lt;/code&gt; ）を使用しているときに、有効なパフォーマンスエントリタイプが見つかりません。</target>
        </trans-unit>
        <trans-unit id="1c712c9cfae45300304fedcd57cc9dbfd5142252" translate="yes" xml:space="preserve">
          <source>While using the Performance Timing API (&lt;code&gt;perf_hooks&lt;/code&gt;), no valid performance entry types were found.</source>
          <target state="translated">Performance Timing API（ &lt;code&gt;perf_hooks&lt;/code&gt; ）を使用しているときに、有効なパフォーマンスエントリタイプが見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="7a0f6c9b6bee563036957bfb2ec6eb810b5f2187" translate="yes" xml:space="preserve">
          <source>While, the &lt;code&gt;Buffer&lt;/code&gt; object is available as a global, there are additional &lt;code&gt;Buffer&lt;/code&gt;-related APIs that are available only via the &lt;code&gt;buffer&lt;/code&gt; module accessed using &lt;code&gt;require('buffer')&lt;/code&gt;.</source>
          <target state="translated">、つつ、 &lt;code&gt;Buffer&lt;/code&gt; オブジェクトがグローバルとして使用可能であり、追加のある &lt;code&gt;Buffer&lt;/code&gt; のみを介して利用可能なAPI関連の &lt;code&gt;buffer&lt;/code&gt; 使用してアクセスモジュール &lt;code&gt;require('buffer')&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="300d4cf95fd55a00d2f8a5ccb4867cbf70cfc142" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicSocket&lt;/code&gt; has been destroyed.</source>
          <target state="translated">&lt;code&gt;QuicSocket&lt;/code&gt; が破壊された場合は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b3ed3d9b3b369ef7cf4a361ca2e1346f0cf8f228" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicSocket&lt;/code&gt; has been successfully bound to a local UDP port. Initially the value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;QuicSocket&lt;/code&gt; がローカルUDPポートに正常にバインドされている場合は &lt;code&gt;true&lt;/code&gt; になります。最初は値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="51e10faadc7ce3a3d6851a934dfc743094c5a2e1" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicStream&lt;/code&gt; is unidirectional. Whether the &lt;code&gt;QuicStream&lt;/code&gt; will be readable or writable depends on whether the &lt;code&gt;quicstream.session&lt;/code&gt; is a &lt;code&gt;QuicClientSession&lt;/code&gt; or &lt;code&gt;QuicServerSession&lt;/code&gt;, and whether the &lt;code&gt;QuicStream&lt;/code&gt; was initiated locally or remotely.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; が単方向の場合は &lt;code&gt;true&lt;/code&gt; になります。かどうか &lt;code&gt;QuicStream&lt;/code&gt; は読めるだろうか、書き込みがいるかどうかに依存 &lt;code&gt;quicstream.session&lt;/code&gt; がある &lt;code&gt;QuicClientSession&lt;/code&gt; または &lt;code&gt;QuicServerSession&lt;/code&gt; 、そしてかどうか &lt;code&gt;QuicStream&lt;/code&gt; は、ローカルまたはリモートで開始されました。</target>
        </trans-unit>
        <trans-unit id="56852f1433cd6db40dd6ed5ff8afdb21f7d2b72c" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicStream&lt;/code&gt; was initiated by a &lt;code&gt;QuicClientSession&lt;/code&gt; instance.</source>
          <target state="translated">なり &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;QuicStream&lt;/code&gt; はによって開始された &lt;code&gt;QuicClientSession&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="b3c4698c06e9766787f59a0a0720a7451edbc163" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;QuicStream&lt;/code&gt; was initiated by a &lt;code&gt;QuicServerSession&lt;/code&gt; instance.</source>
          <target state="translated">なり &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;QuicStream&lt;/code&gt; はによって開始された &lt;code&gt;QuicServerSession&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="cbf2dd154821886de9761f603648735c3e559ee1" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance has been closed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">なります &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスは、それ以外の場合は、閉じられた &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e76c78443d8eaa0500bc30563e442b910eb81724" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance has been destroyed and must no longer be used, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">なります &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスが破棄されていないと、もはや使用されている必要があり、そうでない場合 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6c7b91092846e149e633701cf1ea18b986ae46f" translate="yes" xml:space="preserve">
          <source>Will be &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance is still connecting, will be set to &lt;code&gt;false&lt;/code&gt; before emitting &lt;code&gt;connect&lt;/code&gt; event and/or calling the &lt;code&gt;http2.connect&lt;/code&gt; callback.</source>
          <target state="translated">なります &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスが接続され、に設定されます &lt;code&gt;false&lt;/code&gt; 発光する前に &lt;code&gt;connect&lt;/code&gt; イベントを、および/または呼び出し &lt;code&gt;http2.connect&lt;/code&gt; コールバックを。</target>
        </trans-unit>
        <trans-unit id="5df68b6de935e716e54330bfbad78ac0cfff8003" translate="yes" xml:space="preserve">
          <source>Will generate an object similar to:</source>
          <target state="translated">似たようなオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="49659e5a07d9ec9ddbc5ea2cded9dfed86235252" translate="yes" xml:space="preserve">
          <source>Will generate:</source>
          <target state="translated">生成します。</target>
        </trans-unit>
        <trans-unit id="2c2d1ea901f0c8101ac1fb5fa6dc20b9daa197c0" translate="yes" xml:space="preserve">
          <source>Will print:</source>
          <target state="translated">印刷します。</target>
        </trans-unit>
        <trans-unit id="70e640967068e9aeff74a0b63a5f321ce52989ef" translate="yes" xml:space="preserve">
          <source>Windows Performance Counter support has been removed from Node.js. The undocumented &lt;code&gt;COUNTER_NET_SERVER_CONNECTION()&lt;/code&gt;, &lt;code&gt;COUNTER_NET_SERVER_CONNECTION_CLOSE()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_SERVER_REQUEST()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_SERVER_RESPONSE()&lt;/code&gt;, &lt;code&gt;COUNTER_HTTP_CLIENT_REQUEST()&lt;/code&gt;, and &lt;code&gt;COUNTER_HTTP_CLIENT_RESPONSE()&lt;/code&gt; functions have been deprecated.</source>
          <target state="translated">WindowsパフォーマンスカウンターのサポートがNode.jsから削除されました。文書化されていない &lt;code&gt;COUNTER_NET_SERVER_CONNECTION()&lt;/code&gt; 、 &lt;code&gt;COUNTER_NET_SERVER_CONNECTION_CLOSE()&lt;/code&gt; 、 &lt;code&gt;COUNTER_HTTP_SERVER_REQUEST()&lt;/code&gt; 、 &lt;code&gt;COUNTER_HTTP_SERVER_RESPONSE()&lt;/code&gt; 、 &lt;code&gt;COUNTER_HTTP_CLIENT_REQUEST()&lt;/code&gt; 、および &lt;code&gt;COUNTER_HTTP_CLIENT_RESPONSE()&lt;/code&gt; 関数が廃止されました。</target>
        </trans-unit>
        <trans-unit id="d3eb2a06ecdde61b424aed0b151aacc295ac1030" translate="yes" xml:space="preserve">
          <source>Windows Specific Error Constants</source>
          <target state="translated">Windows固有のエラー定数</target>
        </trans-unit>
        <trans-unit id="c7bb5218ec791e1b5be45e3ebd73be51f17f1af7" translate="yes" xml:space="preserve">
          <source>Windows does not support sending signals, but Node.js offers some emulation with &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;process.kill()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;. Sending signal &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Sending &lt;code&gt;SIGINT&lt;/code&gt;, &lt;code&gt;SIGTERM&lt;/code&gt;, and &lt;code&gt;SIGKILL&lt;/code&gt; cause the unconditional termination of the target process.</source>
          <target state="translated">Windowsはシグナルの送信をサポートしていませんが、Node.jsは&lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;process.kill()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; を使用した&lt;/a&gt;エミュレーションを提供しています。シグナル &lt;code&gt;0&lt;/code&gt; の送信は、プロセスの存在をテストするために使用できます。 &lt;code&gt;SIGINT&lt;/code&gt; 、 &lt;code&gt;SIGTERM&lt;/code&gt; 、および &lt;code&gt;SIGKILL&lt;/code&gt; を送信すると、ターゲットプロセスが無条件に終了します。</target>
        </trans-unit>
        <trans-unit id="bfea3e748f09870848545f0c2f952c91ac03fe38" translate="yes" xml:space="preserve">
          <source>Windows does not support signals so has no equivalent to termination by signal, but Node.js offers some emulation with &lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;process.kill()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt;&lt;code&gt;subprocess.kill()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Windowsはシグナルをサポートしていないため、シグナルによる終了に相当するものはありませんが、Node.jsは&lt;a href=&quot;#process_process_kill_pid_signal&quot;&gt; &lt;code&gt;process.kill()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;child_process#child_process_subprocess_kill_signal&quot;&gt; &lt;code&gt;subprocess.kill()&lt;/code&gt; を使用した&lt;/a&gt;エミュレーションを提供します。</target>
        </trans-unit>
        <trans-unit id="aba9f3b1cc568ab6b6fc3f150113c54c4f72c506" translate="yes" xml:space="preserve">
          <source>Windows vs. POSIX</source>
          <target state="translated">ウィンドウズ対ポシックス</target>
        </trans-unit>
        <trans-unit id="b6726453945768d268831e1f085608f8f62e92b3" translate="yes" xml:space="preserve">
          <source>Windows-specific error constants</source>
          <target state="translated">Windows固有のエラー定数</target>
        </trans-unit>
        <trans-unit id="27e8d1c11c75449e5d932b4ccddda5d5eb83e4a5" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; now available, the &lt;code&gt;Buffer&lt;/code&gt; class implements the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt; API in a manner that is more optimized and suitable for Node.js.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;利用可能になりまし、 &lt;code&gt;Buffer&lt;/code&gt; クラスが実装&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; の&lt;/a&gt;より最適化とNode.js.に適している方法で、API</target>
        </trans-unit>
        <trans-unit id="cc2ce0a1c1a12ddc001101986e9f3e96a7af34d3" translate="yes" xml:space="preserve">
          <source>With HTTPS support, use &lt;a href=&quot;tls#tls_tlssocket_getpeercertificate_detailed&quot;&gt;&lt;code&gt;request.socket.getPeerCertificate()&lt;/code&gt;&lt;/a&gt; to obtain the client's authentication details.</source>
          <target state="translated">HTTPSサポートでは、&lt;a href=&quot;tls#tls_tlssocket_getpeercertificate_detailed&quot;&gt; &lt;code&gt;request.socket.getPeerCertificate()&lt;/code&gt; &lt;/a&gt;を使用してクライアントの認証の詳細を取得します。</target>
        </trans-unit>
        <trans-unit id="eff3fb3260b706087702387fa36966dba17fa603" translate="yes" xml:space="preserve">
          <source>With TLS/SSL, all servers (and some clients) must have a &lt;em&gt;certificate&lt;/em&gt;. Certificates are &lt;em&gt;public keys&lt;/em&gt; that correspond to a private key, and that are digitally signed either by a Certificate Authority or by the owner of the private key (such certificates are referred to as &quot;self-signed&quot;). The first step to obtaining a certificate is to create a &lt;em&gt;Certificate Signing Request&lt;/em&gt; (CSR) file.</source>
          <target state="translated">TLS / SSLでは、すべてのサーバー（および一部のクライアント）に&lt;em&gt;証明書が&lt;/em&gt;必要です。証明書は、秘密鍵に対応する&lt;em&gt;公開鍵&lt;/em&gt;であり、認証局または秘密鍵の所有者によってデジタル署名されています（このような証明書は「自己署名」と呼ばれます）。証明書を取得する最初のステップは、&lt;em&gt;証明書署名要求&lt;/em&gt;（CSR）ファイルを作成することです。</target>
        </trans-unit>
        <trans-unit id="0c21435a9e5e1897d281c15fe6d4278729f4ba10" translate="yes" xml:space="preserve">
          <source>With TLSv1.3, be aware that multiple tickets may be sent by the server, resulting in multiple &lt;code&gt;'session'&lt;/code&gt; events, see &lt;a href=&quot;#tls_event_session&quot;&gt;&lt;code&gt;'session'&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">TLSv1.3では、サーバーから複数のチケットが送信され、複数の &lt;code&gt;'session'&lt;/code&gt; イベントが発生する可能性があることに注意してください。詳細については、&lt;a href=&quot;#tls_event_session&quot;&gt; &lt;code&gt;'session'&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f9b2a4a6fab4bc23157008667b80e9978473ae86" translate="yes" xml:space="preserve">
          <source>With few exceptions, &lt;em&gt;Synchronous&lt;/em&gt; APIs (any blocking method that does not accept a &lt;code&gt;callback&lt;/code&gt; function, such as &lt;a href=&quot;fs#fs_fs_readfilesync_path_options&quot;&gt;&lt;code&gt;fs.readFileSync&lt;/code&gt;&lt;/a&gt;), will use &lt;code&gt;throw&lt;/code&gt; to report errors.</source>
          <target state="translated">いくつかの例外を除いて、&lt;em&gt;同期&lt;/em&gt; API（&lt;a href=&quot;fs#fs_fs_readfilesync_path_options&quot;&gt; &lt;code&gt;fs.readFileSync&lt;/code&gt; &lt;/a&gt;などの &lt;code&gt;callback&lt;/code&gt; 関数を受け入れない任意のブロッキングメソッド）は、 &lt;code&gt;throw&lt;/code&gt; を使用してエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="19b157b47e83a53d9af8023d224e343715e368cd" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt;&lt;code&gt;--experimental-repl-await&lt;/code&gt;&lt;/a&gt; command line option specified, experimental support for the &lt;code&gt;await&lt;/code&gt; keyword is enabled.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt; &lt;code&gt;--experimental-repl-await&lt;/code&gt; &lt;/a&gt;指定されたコマンドラインオプション、のための実験的なサポート &lt;code&gt;await&lt;/code&gt; キーワードが有効になっています。</target>
        </trans-unit>
        <trans-unit id="627181d1cba340317aff21e0565fb8c5949b0afc" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt;&lt;code&gt;--experimental-repl-await&lt;/code&gt;&lt;/a&gt; command-line option specified, experimental support for the &lt;code&gt;await&lt;/code&gt; keyword is enabled.</source>
          <target state="translated">&lt;a href=&quot;cli#cli_experimental_repl_await&quot;&gt; &lt;code&gt;--experimental-repl-await&lt;/code&gt; &lt;/a&gt;指定されたコマンドラインオプション、のための実験的なサポート &lt;code&gt;await&lt;/code&gt; キーワードが有効になっています。</target>
        </trans-unit>
        <trans-unit id="63ae8776ef3f404c5446c364b77e122a73f3b875" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;all&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;Promise&lt;/code&gt; is resolved with &lt;code&gt;addresses&lt;/code&gt; being an array of objects with the properties &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt;.</source>
          <target state="translated">では &lt;code&gt;all&lt;/code&gt; のオプションが設定され &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;Promise&lt;/code&gt; して解決され &lt;code&gt;addresses&lt;/code&gt; プロパティを持つオブジェクトの配列され &lt;code&gt;address&lt;/code&gt; と &lt;code&gt;family&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f3cf5f6869dcc18269bb5c37a1d11bb05d05e2a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;all&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;, the arguments for &lt;code&gt;callback&lt;/code&gt; change to &lt;code&gt;(err, addresses)&lt;/code&gt;, with &lt;code&gt;addresses&lt;/code&gt; being an array of objects with the properties &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; のオプションが設定され &lt;code&gt;true&lt;/code&gt; のため、引数 &lt;code&gt;callback&lt;/code&gt; への変更 &lt;code&gt;(err, addresses)&lt;/code&gt; と、 &lt;code&gt;addresses&lt;/code&gt; プロパティを持つオブジェクトの配列され &lt;code&gt;address&lt;/code&gt; と &lt;code&gt;family&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="703ba3425a961923f35e100eb6262f175b5c075e" translate="yes" xml:space="preserve">
          <source>With the AES-GCM method, the &lt;code&gt;additionalData&lt;/code&gt; is extra input that is not encrypted but is included in the authentication of the data. The use of &lt;code&gt;additionalData&lt;/code&gt; is optional.</source>
          <target state="translated">AES-GCM方式では、 &lt;code&gt;additionalData&lt;/code&gt; は暗号化されていないが、データの認証に含まれる追加の入力です。 &lt;code&gt;additionalData&lt;/code&gt; の使用はオプションです。</target>
        </trans-unit>
        <trans-unit id="a48f83436ad8aa32468354573f07a9a9b6c4def3" translate="yes" xml:space="preserve">
          <source>With the exception of &lt;code&gt;MessagePort&lt;/code&gt;s being &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;s rather than &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;s, this implementation matches &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;browser &lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">除いて &lt;code&gt;MessagePort&lt;/code&gt; sがあること&lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;ではなく、秒&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; &lt;/a&gt;秒、この実装は一致する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;ブラウザ &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;秒。</target>
        </trans-unit>
        <trans-unit id="76d4961d795a294bf706c6cd1dc296778eaba002" translate="yes" xml:space="preserve">
          <source>With the list of module exports provided upfront, the &lt;code&gt;execute&lt;/code&gt; function will then be called at the exact point of module evaluation order for that module in the import tree.</source>
          <target state="translated">事前にモジュールエクスポートのリストが提供されているため、インポートツリー内のそのモジュールのモジュール評価順序の正確な時点で &lt;code&gt;execute&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4f29e9069090db473dbd25a596b113d2b2eef46f" translate="yes" xml:space="preserve">
          <source>With the preceding loader, running &lt;code&gt;node --experimental-loader ./coffeescript-loader.mjs main.coffee&lt;/code&gt; causes &lt;code&gt;main.coffee&lt;/code&gt; to be turned into JavaScript after its source code is loaded from disk but before Node.js executes it; and so on for any &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.litcoffee&lt;/code&gt; or &lt;code&gt;.coffee.md&lt;/code&gt; files referenced via &lt;code&gt;import&lt;/code&gt; statements of any loaded file.</source>
          <target state="translated">上記のローダーで、 &lt;code&gt;node --experimental-loader ./coffeescript-loader.mjs main.coffee&lt;/code&gt; を &lt;code&gt;main.coffee&lt;/code&gt; すると、ソースコードがディスクからロードされた後、Node.jsが実行する前に、main.coffeeがJavaScriptに変換されます。ロードされたファイルの &lt;code&gt;import&lt;/code&gt; ステートメントを介して参照される &lt;code&gt;.coffee&lt;/code&gt; 、 &lt;code&gt;.litcoffee&lt;/code&gt; 、または &lt;code&gt;.coffee.md&lt;/code&gt; ファイルについても同様です。</target>
        </trans-unit>
        <trans-unit id="7fdbfdcd5f31d2e7aba66fbb5809b057859e2ee3" translate="yes" xml:space="preserve">
          <source>With the preceding loader, running &lt;code&gt;node --experimental-loader ./https-loader.mjs ./main.mjs&lt;/code&gt; prints the current version of CoffeeScript per the module at the URL in &lt;code&gt;main.mjs&lt;/code&gt;.</source>
          <target state="translated">上記のローダーで、 &lt;code&gt;node --experimental-loader ./https-loader.mjs ./main.mjs&lt;/code&gt; 実行すると、 &lt;code&gt;main.mjs&lt;/code&gt; のURLにあるモジュールごとにCoffeeScriptの現在のバージョンが出力されます。</target>
        </trans-unit>
        <trans-unit id="fb2445d428b93b1d9ea273fbb18e3604288f8c8a" translate="yes" xml:space="preserve">
          <source>With the support of async generators and iterators in JavaScript, async generators are effectively a first-class language-level stream construct at this point.</source>
          <target state="translated">JavaScript での非同期ジェネレータとイテレータのサポートにより、非同期ジェネレータは、現時点では事実上、第一級の言語レベルのストリーム構成体となっています。</target>
        </trans-unit>
        <trans-unit id="508f1c18f9debe0dd4c0c6ff186eeb7481f33c77" translate="yes" xml:space="preserve">
          <source>With this feature enabled, the &lt;code&gt;LOAD_NODE_MODULES&lt;/code&gt; changes are:</source>
          <target state="translated">この機能を有効にすると、 &lt;code&gt;LOAD_NODE_MODULES&lt;/code&gt; の変更は次のようになります。</target>
        </trans-unit>
        <trans-unit id="29898952c4414597f3478e805087121bf125e40d" translate="yes" xml:space="preserve">
          <source>With this loader, running:</source>
          <target state="translated">このローダーを使って</target>
        </trans-unit>
        <trans-unit id="87544397313c61419dbce81557d29cbe03ec9f78" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; package scope, Node.js can be instructed to interpret a particular file as an ES module by naming it with an &lt;code&gt;.mjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; files are treated as CommonJS within a &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; package scope).</source>
          <target state="translated">内で &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; パッケージのスコープ、Node.jsのはでそれを命名することにより、ESモジュールとして特定のファイルを解釈するように指示することができます &lt;code&gt;.mjs&lt;/code&gt; 両方のため、拡張子（ &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.cjs&lt;/code&gt; ファイルが、A内のCommonJSとして扱われます &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; パッケージスコープ）。</target>
        </trans-unit>
        <trans-unit id="86fcf66426ef1262636ff5dc61cde3531c37f2a3" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; package, Node.js can be instructed to interpret a particular file as an &lt;a href=&quot;esm&quot;&gt;ES module&lt;/a&gt; by naming it with an &lt;code&gt;.mjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.cjs&lt;/code&gt; files are treated as CommonJS within a &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; package).</source>
          <target state="translated">内で &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt; パッケージに、Node.jsのは、として特定のファイルを解釈するように指示することができ&lt;a href=&quot;esm&quot;&gt;ESモジュール&lt;/a&gt;とそれを命名することにより、 &lt;code&gt;.mjs&lt;/code&gt; 両方以来（拡張子 &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.cjs&lt;/code&gt; ファイルが内CommonJSとして扱われます &lt;code&gt;&quot;commonjs&quot;&lt;/code&gt; パッケージ）。</target>
        </trans-unit>
        <trans-unit id="c0a800b8b27571600ff937bb46cc2b5dfa84cd7b" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; package scope, Node.js can be instructed to interpret a particular file as CommonJS by naming it with a &lt;code&gt;.cjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.mjs&lt;/code&gt; files are treated as ES modules within a &lt;code&gt;&quot;module&quot;&lt;/code&gt; package scope).</source>
          <target state="translated">内で &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; パッケージのスコープ、Node.jsのはでそれを命名することにより、CommonJSとして特定のファイルを解釈するように指示することができます &lt;code&gt;.cjs&lt;/code&gt; 両方以来（拡張子 &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.mjs&lt;/code&gt; ファイルが内ESモジュールとして扱われます &lt;code&gt;&quot;module&quot;&lt;/code&gt; パッケージスコープ）。</target>
        </trans-unit>
        <trans-unit id="5fce17e1fc1d46764d50b59b00210d76e2ffc540" translate="yes" xml:space="preserve">
          <source>Within a &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; package, Node.js can be instructed to interpret a particular file as &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt; by naming it with a &lt;code&gt;.cjs&lt;/code&gt; extension (since both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.mjs&lt;/code&gt; files are treated as ES modules within a &lt;code&gt;&quot;module&quot;&lt;/code&gt; package).</source>
          <target state="translated">内で &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; のパッケージには、Node.jsのは、などの特定のファイルを解釈するように指示することができ&lt;a href=&quot;modules&quot;&gt;CommonJSを&lt;/a&gt;して、それを命名することにより、 &lt;code&gt;.cjs&lt;/code&gt; の両方のため、（拡張子 &lt;code&gt;.js&lt;/code&gt; ファイルと &lt;code&gt;.mjs&lt;/code&gt; ファイルが内ESモジュールとして扱われる &lt;code&gt;&quot;module&quot;&lt;/code&gt; パッケージ）。</target>
        </trans-unit>
        <trans-unit id="062724fc947c8849d3387e1819eee1c552839ad6" translate="yes" xml:space="preserve">
          <source>Within a package, the &lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#packages_type&quot;&gt;&lt;code&gt;&quot;type&quot;&lt;/code&gt;&lt;/a&gt; field defines how Node.js should interpret &lt;code&gt;.js&lt;/code&gt; files. If a &lt;code&gt;package.json&lt;/code&gt; file does not have a &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, &lt;code&gt;.js&lt;/code&gt; files are treated as &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;.</source>
          <target state="translated">パッケージ内で、&lt;a href=&quot;#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;#packages_type&quot;&gt; &lt;code&gt;&quot;type&quot;&lt;/code&gt; &lt;/a&gt;フィールドはNode.jsが &lt;code&gt;.js&lt;/code&gt; ファイルを解釈する方法を定義します。 &lt;code&gt;package.json&lt;/code&gt; ファイルに &lt;code&gt;&quot;type&quot;&lt;/code&gt; フィールドがない場合、 &lt;code&gt;.js&lt;/code&gt; ファイルは&lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;として扱われます。</target>
        </trans-unit>
        <trans-unit id="6f6099de0275d7cce12f45f0778f6466923edf3e" translate="yes" xml:space="preserve">
          <source>Within a package, the values defined in the package&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field can be referenced via the package&amp;rsquo;s name. For example, assuming the &lt;code&gt;package.json&lt;/code&gt; is:</source>
          <target state="translated">パッケージ内では、パッケージの &lt;code&gt;package.json&lt;/code&gt; &lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドで定義された値は、パッケージの名前を介して参照できます。たとえば、 &lt;code&gt;package.json&lt;/code&gt; が次のようになっていると仮定します。</target>
        </trans-unit>
        <trans-unit id="370820eaa9e0490009215285dc97963f9f462fd5" translate="yes" xml:space="preserve">
          <source>Within a worker, &lt;code&gt;process.on('error')&lt;/code&gt; may also be used.</source>
          <target state="translated">ワーカー内では、 &lt;code&gt;process.on('error')&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="af77b260f549d5f7dd63b4b42c896073162aa0b8" translate="yes" xml:space="preserve">
          <source>Within a worker, &lt;code&gt;process.on('message')&lt;/code&gt; may also be used.</source>
          <target state="translated">ワーカー内では、 &lt;code&gt;process.on('message')&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="42076897c7679f498ccc170d8884642d916c015c" translate="yes" xml:space="preserve">
          <source>Within the &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; object, key order is significant. During condition matching, earlier entries have higher priority and take precedence over later entries. &lt;em&gt;The general rule is that conditions should be from most specific to least specific in object order&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;オブジェクト内では、キーの順序が重要です。条件の一致中は、前のエントリの優先度が高くなり、後のエントリよりも優先されます。&lt;em&gt;原則として、条件はオブジェクトの順序で最も具体的なものから最も具体的でないものへと変化する必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a03122d92eae16b3e9c16945ae88dceb7d7fdcb5" translate="yes" xml:space="preserve">
          <source>Within the &lt;a href=&quot;child_process&quot;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;spawn()&lt;/code&gt;, &lt;code&gt;fork()&lt;/code&gt;, and &lt;code&gt;exec()&lt;/code&gt; methods, the &lt;code&gt;options.customFds&lt;/code&gt; option is deprecated. The &lt;code&gt;options.stdio&lt;/code&gt; option should be used instead.</source>
          <target state="translated">内&lt;a href=&quot;child_process&quot;&gt; &lt;code&gt;child_process&lt;/code&gt; &lt;/a&gt;モジュールの &lt;code&gt;spawn()&lt;/code&gt; 、 &lt;code&gt;fork()&lt;/code&gt; 、および &lt;code&gt;exec()&lt;/code&gt; メソッドは、 &lt;code&gt;options.customFds&lt;/code&gt; のオプションは廃止されます。代わりに、 &lt;code&gt;options.stdio&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed4df86a1d1c449942f5123d02a997d7de257959" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;transform._flush()&lt;/code&gt; implementation, the &lt;code&gt;readable.push()&lt;/code&gt; method may be called zero or more times, as appropriate. The &lt;code&gt;callback&lt;/code&gt; function must be called when the flush operation is complete.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; 実装内では、 &lt;code&gt;readable.push()&lt;/code&gt; メソッドを必要に応じて0回以上呼び出すことができます。 &lt;code&gt;callback&lt;/code&gt; フラッシュ操作が完了すると、関数が呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="1a24fe6d490179934070f782bf83dd8c88d7f94f" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;transform._flush()&lt;/code&gt; implementation, the &lt;code&gt;transform.push()&lt;/code&gt; method may be called zero or more times, as appropriate. The &lt;code&gt;callback&lt;/code&gt; function must be called when the flush operation is complete.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; 実装内では、必要に応じて、 &lt;code&gt;transform.push()&lt;/code&gt; メソッドを0回以上呼び出すことができます。 &lt;code&gt;callback&lt;/code&gt; フラッシュ操作が完了すると、関数が呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="125b6852cc79b26c024fce31be89c0bb22eff517" translate="yes" xml:space="preserve">
          <source>Within the Legacy API, spaces (&lt;code&gt;' '&lt;/code&gt;) and the following characters will be automatically escaped in the properties of URL objects:</source>
          <target state="translated">レガシーAPI内では、スペース（ &lt;code&gt;' '&lt;/code&gt; ）および次の文字は、URLオブジェクトのプロパティで自動的にエスケープされます。</target>
        </trans-unit>
        <trans-unit id="7b09082c8ee521e51bd17ca2ba19995f402a66a3" translate="yes" xml:space="preserve">
          <source>Within the Node.js implementation of the QUIC protocol, there are three main components: the &lt;code&gt;QuicSocket&lt;/code&gt;, the &lt;code&gt;QuicSession&lt;/code&gt; and the &lt;code&gt;QuicStream&lt;/code&gt;.</source>
          <target state="translated">：QUICプロトコルのNode.jsの実装内で、3つの主要コンポーネントがあり &lt;code&gt;QuicSocket&lt;/code&gt; 、 &lt;code&gt;QuicSession&lt;/code&gt; と &lt;code&gt;QuicStream&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="71de115ea7eca96ddac83fb457ce40a81d7b326d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--pending-deprecation&lt;/code&gt;, runtime warnings occur only for code not in &lt;code&gt;node_modules&lt;/code&gt;. This means there will not be deprecation warnings for &lt;code&gt;Buffer()&lt;/code&gt; usage in dependencies. With &lt;code&gt;--pending-deprecation&lt;/code&gt;, a runtime warning results no matter where the &lt;code&gt;Buffer()&lt;/code&gt; usage occurs.</source>
          <target state="translated">なければ &lt;code&gt;--pending-deprecation&lt;/code&gt; 、実行時の警告はないのコードのためにのみ発生し &lt;code&gt;node_modules&lt;/code&gt; 。これは、依存関係での &lt;code&gt;Buffer()&lt;/code&gt; の使用に関する非推奨の警告がないことを意味します。で &lt;code&gt;--pending-deprecation&lt;/code&gt; 、実行時の警告は関係なく、結果 &lt;code&gt;Buffer()&lt;/code&gt; の使用が発生します。</target>
        </trans-unit>
        <trans-unit id="e417b3147471af07c80250cfd0767ce3deae13e0" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--pending-deprecation&lt;/code&gt;, runtime warnings occur only for exports resolutions not in &lt;code&gt;node_modules&lt;/code&gt;. This means there will not be deprecation warnings for &lt;code&gt;&quot;exports&quot;&lt;/code&gt; in dependencies. With &lt;code&gt;--pending-deprecation&lt;/code&gt;, a runtime warning results no matter where the &lt;code&gt;&quot;exports&quot;&lt;/code&gt; usage occurs.</source>
          <target state="translated">&lt;code&gt;--pending-deprecation&lt;/code&gt; を指定しない場合、ランタイム警告は、 &lt;code&gt;node_modules&lt;/code&gt; にないエクスポート解決に対してのみ発生します。これは、依存関係の &lt;code&gt;&quot;exports&quot;&lt;/code&gt; に対する非推奨の警告がないことを意味します。 &lt;code&gt;--pending-deprecation&lt;/code&gt; 、実行時の警告は関係なく、結果 &lt;code&gt;&quot;exports&quot;&lt;/code&gt; の使用が発生します。</target>
        </trans-unit>
        <trans-unit id="56d3f411141d52d4b02e0929571f8e99c9a817d7" translate="yes" xml:space="preserve">
          <source>Without a leading &lt;code&gt;'/'&lt;/code&gt;, &lt;code&gt;'./'&lt;/code&gt;, or &lt;code&gt;'../'&lt;/code&gt; to indicate a file, the module must either be a core module or is loaded from a &lt;code&gt;node_modules&lt;/code&gt; folder.</source>
          <target state="translated">ファイルを示す先頭の &lt;code&gt;'/'&lt;/code&gt; 、 &lt;code&gt;'./'&lt;/code&gt; 、または &lt;code&gt;'../'&lt;/code&gt; がない場合、モジュールはコアモジュールであるか、 &lt;code&gt;node_modules&lt;/code&gt; フォルダーから読み込まれる必要があります。</target>
        </trans-unit>
        <trans-unit id="d45cd8ec24f5a8c09cf96fd3d60fd8885398b31d" translate="yes" xml:space="preserve">
          <source>Without the explicit tracking added by the &lt;code&gt;WorkerPoolTaskInfo&lt;/code&gt; objects, it would appear that the callbacks are associated with the individual &lt;code&gt;Worker&lt;/code&gt; objects. However, the creation of the &lt;code&gt;Worker&lt;/code&gt;s is not associated with the creation of the tasks and does not provide information about when tasks were scheduled.</source>
          <target state="translated">&lt;code&gt;WorkerPoolTaskInfo&lt;/code&gt; オブジェクトによって明示的な追跡が追加されていない場合、コールバックは個々の &lt;code&gt;Worker&lt;/code&gt; オブジェクトに関連付けられているように見えます。ただし、 &lt;code&gt;Worker&lt;/code&gt; の作成はタスクの作成に関連付けられておらず、タスクがいつスケジュールされたかについての情報を提供しません。</target>
        </trans-unit>
        <trans-unit id="44568e9f26e0e47d85f67c8ff6f6f8246df7f35a" translate="yes" xml:space="preserve">
          <source>Word left</source>
          <target state="translated">ワードレフト</target>
        </trans-unit>
        <trans-unit id="8ee82f2915df23849a7b17d370c84b9ac570711a" translate="yes" xml:space="preserve">
          <source>Word right</source>
          <target state="translated">言葉の権利</target>
        </trans-unit>
        <trans-unit id="026e539e2c03caa3047c3a5a6e112c6b00aad95f" translate="yes" xml:space="preserve">
          <source>Work as a no-op on a stream that has already been destroyed.</source>
          <target state="translated">すでに破壊されている流れにノーオペで働く。</target>
        </trans-unit>
        <trans-unit id="99edd8c8e615e373739d2cdd38a8942b8a573113" translate="yes" xml:space="preserve">
          <source>Worker</source>
          <target state="translated">Worker</target>
        </trans-unit>
        <trans-unit id="bb3ad4c86040df77ac9065a618741afc7e6fe24d" translate="yes" xml:space="preserve">
          <source>Worker Threads</source>
          <target state="translated">ワーカースレッド</target>
        </trans-unit>
        <trans-unit id="a8be0bede91ceb6ad718250a6be05f374208c9a0" translate="yes" xml:space="preserve">
          <source>Worker support</source>
          <target state="translated">ワーカーサポート</target>
        </trans-unit>
        <trans-unit id="7525522a792d668c0d668b5c21340ba2343b0552" translate="yes" xml:space="preserve">
          <source>Worker threads</source>
          <target state="translated">ワーカースレッド</target>
        </trans-unit>
        <trans-unit id="7d1b2cb035e0f7274d760db926206b76cf58ce10" translate="yes" xml:space="preserve">
          <source>Worker threads inherit non-process-specific options by default. Refer to &lt;a href=&quot;#worker_threads_new_worker_filename_options&quot;&gt;&lt;code&gt;Worker constructor options&lt;/code&gt;&lt;/a&gt; to know how to customize worker thread options, specifically &lt;code&gt;argv&lt;/code&gt; and &lt;code&gt;execArgv&lt;/code&gt; options.</source>
          <target state="translated">ワーカースレッドは、デフォルトでプロセス固有ではないオプションを継承します。ワーカースレッドオプション、特に &lt;code&gt;argv&lt;/code&gt; および &lt;code&gt;execArgv&lt;/code&gt; オプションをカスタマイズする方法については、&lt;a href=&quot;#worker_threads_new_worker_filename_options&quot;&gt; &lt;code&gt;Worker constructor options&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a7bd96c1301ecc33bdde8b9a7616014344363a30" translate="yes" xml:space="preserve">
          <source>Worker threads will now use a copy of the parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt; by default, configurable through the &lt;code&gt;env&lt;/code&gt; option of the &lt;code&gt;Worker&lt;/code&gt; constructor.</source>
          <target state="translated">ワーカースレッドは、デフォルトで親スレッドの &lt;code&gt;process.env&lt;/code&gt; のコピーを使用するようになり、 &lt;code&gt;Worker&lt;/code&gt; コンストラクターの &lt;code&gt;env&lt;/code&gt; オプションを介して構成できます。</target>
        </trans-unit>
        <trans-unit id="93f0aed841cd2508c8f0a145d49b6fb5194c2db5" translate="yes" xml:space="preserve">
          <source>Workers (threads) are useful for performing CPU-intensive JavaScript operations. They do not help much with I/O-intensive work. The Node.js built-in asynchronous I/O operations are more efficient than Workers can be.</source>
          <target state="translated">ワーカー(スレッド)は、CPU集約的なJavaScriptの操作を行うのに便利です。I/Oを多用する作業にはあまり役立ちません。Node.jsに組み込まれている非同期I/O操作はWorkerよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="6bd9d3a4fd785ea3f118b263af339d35d0d69b69" translate="yes" xml:space="preserve">
          <source>Workers (threads) are useful for performing CPU-intensive JavaScript operations. They will not help much with I/O-intensive work. Node.js&amp;rsquo;s built-in asynchronous I/O operations are more efficient than Workers can be.</source>
          <target state="translated">ワーカー（スレッド）は、CPU集中型のJavaScript操作を実行するのに役立ちます。I / O集約型の作業にはあまり役立ちません。Node.jsの組み込み非同期I / O操作は、ワーカーよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="6aaf9b869206de29e79682eff306f67eba9fb067" translate="yes" xml:space="preserve">
          <source>Workers are now included in the report.</source>
          <target state="translated">労働者が報告書に含まれるようになりました。</target>
        </trans-unit>
        <trans-unit id="32c156f4120dbff1b01165ba34dc20fbf7cb15d1" translate="yes" xml:space="preserve">
          <source>Workers will call &lt;code&gt;process.exit(0)&lt;/code&gt; if the &lt;code&gt;'disconnect'&lt;/code&gt; event occurs on &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; is not &lt;code&gt;true&lt;/code&gt;. This protects against accidental disconnection.</source>
          <target state="translated">労働者が呼び出されます &lt;code&gt;process.exit(0)&lt;/code&gt; 場合は &lt;code&gt;'disconnect'&lt;/code&gt; イベントが上で発生 &lt;code&gt;process&lt;/code&gt; と &lt;code&gt;.exitedAfterDisconnect&lt;/code&gt; はない &lt;code&gt;true&lt;/code&gt; 。これは偶発的な切断から保護します。</target>
        </trans-unit>
        <trans-unit id="94c55bc4e2625d29f89775dbe794f74b359f2824" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Functions</source>
          <target state="translated">JavaScript 関数を使った作業</target>
        </trans-unit>
        <trans-unit id="dd0d94c5173cefadd81e71498d52e9ffcecfc3a0" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Properties</source>
          <target state="translated">JavaScript のプロパティを使った作業</target>
        </trans-unit>
        <trans-unit id="ee3e162950e57e3ffb1353d33e108696b8bc1725" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Values</source>
          <target state="translated">JavaScript の値を使った作業</target>
        </trans-unit>
        <trans-unit id="304db6c8acf52e9ca4407908d6ca78a88ac2918d" translate="yes" xml:space="preserve">
          <source>Working with JavaScript Values - Abstract Operations</source>
          <target state="translated">JavaScript の値を使った作業-抽象的な操作</target>
        </trans-unit>
        <trans-unit id="9cdd67e5cb2e225c5c0b8b1ce9482a821dbe89a5" translate="yes" xml:space="preserve">
          <source>Working with JavaScript functions</source>
          <target state="translated">JavaScriptの機能を使った作業</target>
        </trans-unit>
        <trans-unit id="255dcfaf721dcf1dd55894d1a1d93ee0a8e1f0cc" translate="yes" xml:space="preserve">
          <source>Working with JavaScript properties</source>
          <target state="translated">JavaScript のプロパティを使った作業</target>
        </trans-unit>
        <trans-unit id="ca5e66ec209f34b618d4d05c944a86b377ff913f" translate="yes" xml:space="preserve">
          <source>Working with JavaScript values</source>
          <target state="translated">JavaScriptの値を使った作業</target>
        </trans-unit>
        <trans-unit id="8f0d60670f7f9025ead1a51ac2db4bab8d4c1a28" translate="yes" xml:space="preserve">
          <source>Working with JavaScript values and abstract operations</source>
          <target state="translated">JavaScriptの値と抽象的な操作を扱う</target>
        </trans-unit>
        <trans-unit id="a1423e2e798a017cd435a74859b4b48f6c9e1eba" translate="yes" xml:space="preserve">
          <source>Would generate the output:</source>
          <target state="translated">出力を生成します。</target>
        </trans-unit>
        <trans-unit id="a60ec44f3e34e2fc665fcd9d6bf835697ce35472" translate="yes" xml:space="preserve">
          <source>Wrapping C++ objects</source>
          <target state="translated">C++オブジェクトのラッピング</target>
        </trans-unit>
        <trans-unit id="ae49cf3e60a72b1c1ca1223f4465337457a32e0e" translate="yes" xml:space="preserve">
          <source>Wrapping and unwrapping keys</source>
          <target state="translated">鍵のラッピングとアンラッピング</target>
        </trans-unit>
        <trans-unit id="cb06ed8f59f8e191210d4b09f30961561267829c" translate="yes" xml:space="preserve">
          <source>Wraps a function within a new function that measures the running time of the wrapped function. A &lt;code&gt;PerformanceObserver&lt;/code&gt; must be subscribed to the &lt;code&gt;'function'&lt;/code&gt; event type in order for the timing details to be accessed.</source>
          <target state="translated">ラップされた関数の実行時間を測定する新しい関数内で関数をラップします。A &lt;code&gt;PerformanceObserver&lt;/code&gt; は、サブスクライブされなければならない &lt;code&gt;'function'&lt;/code&gt; タイミングの詳細にアクセスするために、イベントタイプ。</target>
        </trans-unit>
        <trans-unit id="ebbc2c554bd0547eeb3f522660396f7b8b5cfb4e" translate="yes" xml:space="preserve">
          <source>Wraps a native instance in a JavaScript object. The native instance can be retrieved later using &lt;code&gt;napi_unwrap()&lt;/code&gt;.</source>
          <target state="translated">JavaScriptオブジェクトのネイティブインスタンスをラップします。ネイティブインスタンスは、後で &lt;code&gt;napi_unwrap()&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="dd35487a2eb7da40332f7fc41452378d92a72445" translate="yes" xml:space="preserve">
          <source>Writable</source>
          <target state="translated">Writable</target>
        </trans-unit>
        <trans-unit id="6dd1e6b70d2eb237d05773b74a2d7185e892ad13" translate="yes" xml:space="preserve">
          <source>Writable Streams</source>
          <target state="translated">書き込み可能なストリーム</target>
        </trans-unit>
        <trans-unit id="86793abc57b7f140d05eafeb0e1a06f397559249" translate="yes" xml:space="preserve">
          <source>Writable streams</source>
          <target state="translated">書き込み可能なストリーム</target>
        </trans-unit>
        <trans-unit id="00af705aff8c6b3697473cee8f797f564e4c1b63" translate="yes" xml:space="preserve">
          <source>Writable streams are an abstraction for a &lt;em&gt;destination&lt;/em&gt; to which data is written.</source>
          <target state="translated">書き込み可能なストリームは、データが書き込まれる&lt;em&gt;宛先の&lt;/em&gt;抽象概念です。</target>
        </trans-unit>
        <trans-unit id="93d3d897c11d8aae9c1294da774224aade8271d4" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;buffer&lt;/code&gt; を書き込みます。</target>
        </trans-unit>
        <trans-unit id="cc6f50c4f7427dda3b658235f0762dbc83479459" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;buffer&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;buffer&lt;/code&gt; を書き込みます。場合 &lt;code&gt;buffer&lt;/code&gt; 通常のオブジェクトである、それは自分の持っている必要があります &lt;code&gt;toString&lt;/code&gt; 関数プロパティを。</target>
        </trans-unit>
        <trans-unit id="4cff7cc1f79a86945f495b6f1c3da210c50c3fa3" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;buffer&lt;/code&gt; to the file.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; をファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="bc5b60ee4cb51da03f87e3638498bd67f716e9f2" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, or an object with an own &lt;code&gt;toString&lt;/code&gt; function property, then an exception is thrown.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;string&lt;/code&gt; を書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、または独自の &lt;code&gt;toString&lt;/code&gt; 関数プロパティを持つオブジェクトの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="e90d07d868ba3b83ba0216e05e8251d164962bc9" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file specified by &lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;string&lt;/code&gt; is not a string, then the value will be coerced to one.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; で指定されたファイルに &lt;code&gt;string&lt;/code&gt; を書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、値は1に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="23d73723d6b78ad57cc38c0dfd0f3e1b71a24ff7" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file. If &lt;code&gt;string&lt;/code&gt; is not a string, or an object with an own &lt;code&gt;toString&lt;/code&gt; function property, then an exception is thrown.</source>
          <target state="translated">ファイルに &lt;code&gt;string&lt;/code&gt; を書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、または独自の &lt;code&gt;toString&lt;/code&gt; 関数プロパティを持つオブジェクトの場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="0bea8dcde86bb9d8107b916db603faf4f0333db7" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;string&lt;/code&gt; to the file. If &lt;code&gt;string&lt;/code&gt; is not a string, then the value will be coerced to one.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; をファイルに書き込みます。 &lt;code&gt;string&lt;/code&gt; が文字列でない場合、値は1に強制変換されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
