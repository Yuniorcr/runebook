<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="34a1a029b73f14872b97df7d8a65365950b239dc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;http&lt;/code&gt; module, the response body is omitted when the request is a HEAD request. Similarly, the &lt;code&gt;204&lt;/code&gt; and &lt;code&gt;304&lt;/code&gt; responses &lt;em&gt;must not&lt;/em&gt; include a message body.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; リクエストがHEAD要求である場合、モジュール、レスポンスボディを省略しています。同様に、 &lt;code&gt;204&lt;/code&gt; および &lt;code&gt;304&lt;/code&gt; 応答にはメッセージ本文を含めること&lt;em&gt;はできません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e51ffedc5aa7b802f39e0dbd76ccacf085da1acf" translate="yes" xml:space="preserve">
          <source>In the Node.js &lt;code&gt;EventTarget&lt;/code&gt;, if an event listener is an async function or returns a &lt;code&gt;Promise&lt;/code&gt;, and the returned &lt;code&gt;Promise&lt;/code&gt; rejects, the rejection is automatically captured and handled the same way as a listener that throws synchronously (see &lt;a href=&quot;#events_eventtarget_error_handling&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; error handling&lt;/a&gt; for details).</source>
          <target state="translated">In the Node.js &lt;code&gt;EventTarget&lt;/code&gt; , if an event listener is an async function or returns a &lt;code&gt;Promise&lt;/code&gt; , and the returned &lt;code&gt;Promise&lt;/code&gt; rejects, the rejection is automatically captured and handled the same way as a listener that throws synchronously (see &lt;a href=&quot;#events_eventtarget_error_handling&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; error handling&lt;/a&gt; for details).</target>
        </trans-unit>
        <trans-unit id="ea6a5d641d8bc637062b7f84d566dcbd208d5b73" translate="yes" xml:space="preserve">
          <source>In the Node.js module system, each file is treated as a separate module. For example, consider a file named &lt;code&gt;foo.js&lt;/code&gt;:</source>
          <target state="translated">Node.jsモジュールシステムでは、各ファイルは個別のモジュールとして扱われます。たとえば、 &lt;code&gt;foo.js&lt;/code&gt; という名前のファイルについて考えます。</target>
        </trans-unit>
        <trans-unit id="5efe8184649f8e9b88e3c4673bc7122c9bf741b4" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;myAddon.queryHasRecords()&lt;/code&gt; is a method that accepts two arguments. The first is a database handle and the second is a query handle. Internally, it unwraps the first argument and casts the resulting pointer to a native database handle. It then unwraps the second argument and casts the resulting pointer to a query handle. If the arguments are passed in the wrong order, the casts will work, however, there is a good chance that the underlying database operation will fail, or will even cause an invalid memory access.</source>
          <target state="translated">In the above example &lt;code&gt;myAddon.queryHasRecords()&lt;/code&gt; is a method that accepts two arguments. The first is a database handle and the second is a query handle. Internally, it unwraps the first argument and casts the resulting pointer to a native database handle. It then unwraps the second argument and casts the resulting pointer to a query handle. If the arguments are passed in the wrong order, the casts will work, however, there is a good chance that the underlying database operation will fail, or will even cause an invalid memory access.</target>
        </trans-unit>
        <trans-unit id="48e2be294d408b9afdcf261478d35f9f2c3215e8" translate="yes" xml:space="preserve">
          <source>In the above, errors on the write stream would be caught and thrown by the two &lt;code&gt;once()&lt;/code&gt; listeners, since &lt;code&gt;once()&lt;/code&gt; will also handle &lt;code&gt;'error'&lt;/code&gt; events.</source>
          <target state="translated">上記では、 &lt;code&gt;once()&lt;/code&gt; も &lt;code&gt;'error'&lt;/code&gt; イベントを処理するため、書き込みストリームのエラーは2つの &lt;code&gt;once()&lt;/code&gt; リスナーによってキャッチおよびスローされます。</target>
        </trans-unit>
        <trans-unit id="5261e070003e9d4318beec94c3cf4ba4e3cbd884" translate="yes" xml:space="preserve">
          <source>In the case of Promises, the &lt;code&gt;resource&lt;/code&gt; object will have an &lt;code&gt;isChainedPromise&lt;/code&gt; property, set to &lt;code&gt;true&lt;/code&gt; if the promise has a parent promise, and &lt;code&gt;false&lt;/code&gt; otherwise. For example, in the case of &lt;code&gt;b = a.then(handler)&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is considered a parent &lt;code&gt;Promise&lt;/code&gt; of &lt;code&gt;b&lt;/code&gt;. Here, &lt;code&gt;b&lt;/code&gt; is considered a chained promise.</source>
          <target state="translated">&lt;code&gt;isChainedPromise&lt;/code&gt; の場合、 &lt;code&gt;resource&lt;/code&gt; オブジェクトにはisChainedPromiseプロパティがあり、プロミスに親プロミスがある場合は &lt;code&gt;true&lt;/code&gt; に設定され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; に設定されます。例えば、の場合 &lt;code&gt;b = a.then(handler)&lt;/code&gt; 、親と考えられる &lt;code&gt;Promise&lt;/code&gt; の &lt;code&gt;b&lt;/code&gt; 。ここで、 &lt;code&gt;b&lt;/code&gt; は連鎖約束と見なされます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b68963099522536bfb9d03e74439ba262a06acfe" translate="yes" xml:space="preserve">
          <source>In the case of a connection error, the following events will be emitted:</source>
          <target state="translated">接続エラーが発生した場合、以下のイベントが発生します。</target>
        </trans-unit>
        <trans-unit id="03a5e4309fc1c7ad9fcbe06a809e4b2569683624" translate="yes" xml:space="preserve">
          <source>In the case of a premature connection close after the response is received, the following events will be emitted in the following order:</source>
          <target state="translated">応答を受信した後に早々に接続が終了した場合、以下のイベントが順に発せられます。</target>
        </trans-unit>
        <trans-unit id="d8bb0b42ce2a493aa297335691f09d8aec6a1679" translate="yes" xml:space="preserve">
          <source>In the case of a premature connection close before the response is received, the following events will be emitted in the following order:</source>
          <target state="translated">レスポンスを受信する前に早々に接続が終了した場合、以下のイベントが順に発せられます。</target>
        </trans-unit>
        <trans-unit id="918cb5bc54bb7c658a3c96576889997c72299bef" translate="yes" xml:space="preserve">
          <source>In the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled &lt;code&gt;Buffer&lt;/code&gt; instance using &lt;code&gt;SlowBuffer&lt;/code&gt; then copy out the relevant bits.</source>
          <target state="translated">開発者がプールから小さなメモリチャンクを不確定な時間保持する必要がある場合、 &lt;code&gt;SlowBuffer&lt;/code&gt; を使用してプールされていない &lt;code&gt;Buffer&lt;/code&gt; インスタンスを作成し、関連するビットをコピーするのが適切です。</target>
        </trans-unit>
        <trans-unit id="02ef5ea159bcc99b4a4ae1f2a88941efdfec9000" translate="yes" xml:space="preserve">
          <source>In the event of an unrecoverable error in a native module, a fatal error can be thrown to immediately terminate the process.</source>
          <target state="translated">ネイティブモジュールで回復不可能なエラーが発生した場合、致命的なエラーをスローして直ちにプロセスを終了させることができます。</target>
        </trans-unit>
        <trans-unit id="2b5ef3b0128e137344ad3cbe4a5087a73a781f41" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;req.end()&lt;/code&gt; was called. With &lt;code&gt;http.request()&lt;/code&gt; one must always call &lt;code&gt;req.end()&lt;/code&gt; to signify the end of the request - even if there is no data being written to the request body.</source>
          <target state="translated">例では &lt;code&gt;req.end()&lt;/code&gt; が呼び出されました。 &lt;code&gt;http.request()&lt;/code&gt; 1は、常に呼び出す必要があります &lt;code&gt;req.end()&lt;/code&gt; リクエストボディに書き込まれるデータが存在しない場合でも、 -リクエストの終了を意味します。</target>
        </trans-unit>
        <trans-unit id="ee4ef00df3b73a5938a813feaf72104024931ba1" translate="yes" xml:space="preserve">
          <source>In the following algorithms, all subroutine errors are propagated as errors of these top-level routines unless stated otherwise.</source>
          <target state="translated">以下のアルゴリズムでは、特に明記されていない限り、すべてのサブルーチンエラーはこれらのトップレベルルーチンのエラーとして伝搬されます。</target>
        </trans-unit>
        <trans-unit id="fa725afe5295f20910c112028ae94f2b56a1a734" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;flush()&lt;/code&gt; is used to write a compressed partial HTTP response to the client:</source>
          <target state="translated">次の例では、 &lt;code&gt;flush()&lt;/code&gt; を使用して、圧縮された部分的なHTTP応答をクライアントに書き込みます。</target>
        </trans-unit>
        <trans-unit id="bf82ec3610a7aca0a8ed51fb8b215927e85734d4" translate="yes" xml:space="preserve">
          <source>In the following example, for instance, a new &lt;code&gt;Transform&lt;/code&gt; stream (which is a type of &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream) is created that has an object mode &lt;code&gt;Writable&lt;/code&gt; side that accepts JavaScript numbers that are converted to hexadecimal strings on the &lt;code&gt;Readable&lt;/code&gt; side.</source>
          <target state="translated">たとえば、次の例では、新しい &lt;code&gt;Transform&lt;/code&gt; ストリーム（&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームの一種）が作成され、 &lt;code&gt;Readable&lt;/code&gt; 側で16進数の文字列に変換されるJavaScript番号を受け入れるオブジェクトモード &lt;code&gt;Writable&lt;/code&gt; 側があります。</target>
        </trans-unit>
        <trans-unit id="7c0fb3c9414cf1c8a8bda6e4b07edf6163cccd34" translate="yes" xml:space="preserve">
          <source>In the following example, only the child's fd &lt;code&gt;1&lt;/code&gt; (stdout) is configured as a pipe, so only the parent's &lt;code&gt;subprocess.stdio[1]&lt;/code&gt; is a stream, all other values in the array are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">次の例では、子のfd &lt;code&gt;1&lt;/code&gt; （stdout）のみがパイプとして構成されているため、親の &lt;code&gt;subprocess.stdio[1]&lt;/code&gt; がストリームであり、配列内の他のすべての値は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0de61ebd59a8526600cd416227b8b1e35a46645a" translate="yes" xml:space="preserve">
          <source>In the following example, the three UTF-8 encoded bytes of the European Euro symbol (&lt;code&gt;&amp;euro;&lt;/code&gt;) are written over three separate operations:</source>
          <target state="translated">次の例では、ヨーロッパユーロ記号（ &lt;code&gt;&amp;euro;&lt;/code&gt; ）の3つのUTF-8エンコードバイトが、3つの別々の操作で書き込まれます。</target>
        </trans-unit>
        <trans-unit id="67b32ff656d65a26d312747226fead13fb28eaac" translate="yes" xml:space="preserve">
          <source>In the last three cases &lt;code&gt;actual&lt;/code&gt;, &lt;code&gt;expected&lt;/code&gt;, and &lt;code&gt;operator&lt;/code&gt; have no influence on the error message.</source>
          <target state="translated">最後の3つのケースでは、 &lt;code&gt;actual&lt;/code&gt; 、 &lt;code&gt;expected&lt;/code&gt; 、および &lt;code&gt;operator&lt;/code&gt; はエラーメッセージに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="fb96692d68fa67ba34d26bf28629f0c68833dc44" translate="yes" xml:space="preserve">
          <source>In the master this sends a message to a specific worker. It is identical to &lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;ChildProcess.send()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">マスターでは、これは特定のワーカーにメッセージを送信します。&lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;ChildProcess.send()&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="f382762e386304b924761ff709bc435737f82042" translate="yes" xml:space="preserve">
          <source>In the master, an internal message is sent to the worker causing it to call &lt;code&gt;.disconnect()&lt;/code&gt; on itself.</source>
          <target state="translated">マスターでは、内部メッセージがワーカーに送信され、ワー​​カーで &lt;code&gt;.disconnect()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="47d8c3363f2d2eb56cc1c395f156dd4f776263e2" translate="yes" xml:space="preserve">
          <source>In the preceding example, 30,000 deflate instances are created concurrently. Because of how some operating systems handle memory allocation and deallocation, this may lead to to significant memory fragmentation.</source>
          <target state="translated">前述の例では、30,000個のdeflateインスタンスが同時に作成されています。オペレーティング・システムによっては、メモリの割り当てと解放をどのように扱うかによっては、メモリの断片化が大きくなることがあります。</target>
        </trans-unit>
        <trans-unit id="40fb2a46c3495adde1bdbd6a72aa0fe0f5338274" translate="yes" xml:space="preserve">
          <source>In the scenario of writing to a writable stream from an async iterator, it is important to ensure the correct handling of backpressure and errors.</source>
          <target state="translated">非同期イテレータから書き込み可能なストリームに書き込むシナリオでは、バックプレッシャーとエラーの正しい処理を確実に行うことが重要です。</target>
        </trans-unit>
        <trans-unit id="0ce5fad120b64ee42264f01dfdc44ee7b983178a" translate="yes" xml:space="preserve">
          <source>In this case the entire API surface, including any experimental APIs, will be available to the module code.</source>
          <target state="translated">この場合、実験的なAPIを含めてAPIの表面全体がモジュールコードで利用可能になります。</target>
        </trans-unit>
        <trans-unit id="8211aa9015b5d9d4b17ecb481815c6ab35412ee7" translate="yes" xml:space="preserve">
          <source>In this case, the microtask scheduled through &lt;code&gt;promise.then()&lt;/code&gt; will be run before returning from &lt;code&gt;vm.runInNewContext()&lt;/code&gt;, and will be interrupted by the &lt;code&gt;timeout&lt;/code&gt; functionality. This applies only to code running in a &lt;code&gt;vm.Context&lt;/code&gt;, so e.g. &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt;&lt;code&gt;vm.runInThisContext()&lt;/code&gt;&lt;/a&gt; does not take this option.</source>
          <target state="translated">In this case, the microtask scheduled through &lt;code&gt;promise.then()&lt;/code&gt; will be run before returning from &lt;code&gt;vm.runInNewContext()&lt;/code&gt; , and will be interrupted by the &lt;code&gt;timeout&lt;/code&gt; functionality. This applies only to code running in a &lt;code&gt;vm.Context&lt;/code&gt; , so e.g. &lt;a href=&quot;#vm_vm_runinthiscontext_code_options&quot;&gt; &lt;code&gt;vm.runInThisContext()&lt;/code&gt; &lt;/a&gt; does not take this option.</target>
        </trans-unit>
        <trans-unit id="3340c556f6543bec062f3b2ed6d553b3150156a1" translate="yes" xml:space="preserve">
          <source>In this example case, it is possible to track the rejection as a developer error as would typically be the case for other &lt;code&gt;'unhandledRejection'&lt;/code&gt; events. To address such failures, a non-operational &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;.catch(() =&amp;gt; { })&lt;/code&gt;&lt;/a&gt; handler may be attached to &lt;code&gt;resource.loaded&lt;/code&gt;, which would prevent the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event from being emitted.</source>
          <target state="translated">この例の場合、他の &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントの場合と同様に、拒否を開発者のエラーとして追跡することができます。このような障害に対処するために、非操作の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt; &lt;code&gt;.catch(() =&amp;gt; { })&lt;/code&gt; &lt;/a&gt;ハンドラーを &lt;code&gt;resource.loaded&lt;/code&gt; にアタッチすることができます。これにより、 &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが発行されなくなります。</target>
        </trans-unit>
        <trans-unit id="b30d924ce86ebcb8be4941fadb4d24eb63050b49" translate="yes" xml:space="preserve">
          <source>In this example, adding any actual hook function enabled the tracking of promises. There are two promises in the example above; the promise created by &lt;code&gt;Promise.resolve()&lt;/code&gt; and the promise returned by the call to &lt;code&gt;then()&lt;/code&gt;. In the example above, the first promise got the &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;6&lt;/code&gt; and the latter got &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;7&lt;/code&gt;. During the execution of the &lt;code&gt;then()&lt;/code&gt; callback, we are executing in the context of promise with &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;7&lt;/code&gt;. This promise was triggered by async resource &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">この例では、実際のフック関数を追加すると、promiseの追跡が有効になります。上記の例には2つの約束があります。 &lt;code&gt;Promise.resolve()&lt;/code&gt; によって作成されたpromiseと &lt;code&gt;then()&lt;/code&gt; の呼び出しによって返されたpromise 。上記の例では、最初のpromiseは &lt;code&gt;asyncId&lt;/code&gt; &lt;code&gt;6&lt;/code&gt; を取得し、後者は &lt;code&gt;asyncId&lt;/code&gt; &lt;code&gt;7&lt;/code&gt; を取得しました。実行中に &lt;code&gt;then()&lt;/code&gt; コールバック、我々はとの約束のコンテキストで実行されている &lt;code&gt;asyncId&lt;/code&gt; &lt;code&gt;7&lt;/code&gt; 。このpromiseは、非同期リソース &lt;code&gt;6&lt;/code&gt; によってトリガーされました。</target>
        </trans-unit>
        <trans-unit id="f2c1f79c71778e1324e95e72ef55b00fad51c2b3" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;code&gt;Error&lt;/code&gt; object is generated internally by &lt;code&gt;process.emitWarning()&lt;/code&gt; and passed through to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">この例では、 &lt;code&gt;Error&lt;/code&gt; オブジェクトは &lt;code&gt;process.emitWarning()&lt;/code&gt; によって内部的に生成され、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;ハンドラーに渡されます。</target>
        </trans-unit>
        <trans-unit id="75d63ff46a64b4f575facc6bfa8055c873dc89f8" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;d.on('error')&lt;/code&gt; handler will be triggered, rather than crashing the program.</source>
          <target state="translated">この例では、プログラムをクラッシュさせるのではなく、 &lt;code&gt;d.on('error')&lt;/code&gt; ハンドラーがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="0e9125992e5a27db7323b09884626b3c07becbe5" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;name&lt;/code&gt; from &lt;code&gt;import { name } from 'pkg'&lt;/code&gt; is the same singleton as the &lt;code&gt;name&lt;/code&gt; from &lt;code&gt;const { name } = require('pkg')&lt;/code&gt;. Therefore &lt;code&gt;===&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; when comparing the two &lt;code&gt;name&lt;/code&gt;s and the divergent specifier hazard is avoided.</source>
          <target state="translated">この例では、 &lt;code&gt;name&lt;/code&gt; から &lt;code&gt;import { name } from 'pkg'&lt;/code&gt; 同じシングルトンである &lt;code&gt;name&lt;/code&gt; から &lt;code&gt;const { name } = require('pkg')&lt;/code&gt; 。したがって、 &lt;code&gt;===&lt;/code&gt; は2つの &lt;code&gt;name&lt;/code&gt; 比較するときに &lt;code&gt;true&lt;/code&gt; を返し、発散する指定子の危険が回避されます。</target>
        </trans-unit>
        <trans-unit id="4a2f4cd6b751dfe743b9e57f92471b943ba9aa8e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;unhandledRejections&lt;/code&gt;&lt;code&gt;Map&lt;/code&gt; will grow and shrink over time, reflecting rejections that start unhandled and then become handled. It is possible to record such errors in an error log, either periodically (which is likely best for long-running application) or upon process exit (which is likely most convenient for scripts).</source>
          <target state="translated">この例では、 &lt;code&gt;unhandledRejections&lt;/code&gt; &lt;code&gt;Map&lt;/code&gt; は時間の経過とともに拡大および縮小し、処理されずに処理されてから処理される拒否を反映します。このようなエラーは、定期的に（実行時間の長いアプリケーションに最適です）、またはプロセスの終了時に（スクリプトに最も便利です）、エラーログに記録することができます。</target>
        </trans-unit>
        <trans-unit id="f2a9e0f5e7284af8b7d1cd8e4c8dee1cd1759793" translate="yes" xml:space="preserve">
          <source>In this example, the callback function is invoked synchronously.</source>
          <target state="translated">この例では、コールバック関数が同期的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b1ae140087d25d149461331902a072314e871a3f" translate="yes" xml:space="preserve">
          <source>In this example, the store is only available in the callback function and the functions called by &lt;code&gt;foo&lt;/code&gt;. Outside of &lt;code&gt;run&lt;/code&gt;, calling &lt;code&gt;getStore&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">In this example, the store is only available in the callback function and the functions called by &lt;code&gt;foo&lt;/code&gt; . Outside of &lt;code&gt;run&lt;/code&gt; , calling &lt;code&gt;getStore&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4031e8bbffadc3eeaaece5bccec619b8b40c5fe2" translate="yes" xml:space="preserve">
          <source>In this way, &lt;code&gt;domain&lt;/code&gt; usage goes hand-in-hand with the cluster module, since the master process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly.</source>
          <target state="translated">このように、ワーカーがエラーを検出するとマスタープロセスが新しいワーカーをフォークできるため、 &lt;code&gt;domain&lt;/code&gt; 使用はクラスターモジュールと密接に関連しています。複数のマシンに対応するNode.jsプログラムの場合、終了プロキシまたはサービスレジストリが障害を記録し、それに応じて対応できます。</target>
        </trans-unit>
        <trans-unit id="f3c8ce86c05cf45e881c8b88dcfc90bac15ce63e" translate="yes" xml:space="preserve">
          <source>In this way, the common &lt;code&gt;if (err) return callback(err);&lt;/code&gt; pattern can be replaced with a single error handler in a single place.</source>
          <target state="translated">このように、一般的な &lt;code&gt;if (err) return callback(err);&lt;/code&gt; patternは、単一の場所で単一のエラーハンドラーに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="8f1593e2fa0de1cde7649f366647211411e84269" translate="yes" xml:space="preserve">
          <source>In versions of Node.js prior to 6.0.0, &lt;code&gt;Buffer&lt;/code&gt; instances were created using the &lt;code&gt;Buffer&lt;/code&gt; constructor function, which allocates the returned &lt;code&gt;Buffer&lt;/code&gt; differently based on what arguments are provided:</source>
          <target state="translated">6.0.0より前のバージョンのNode.jsでは、 &lt;code&gt;Buffer&lt;/code&gt; インスタンスは、提供された引数に基づいて返された &lt;code&gt;Buffer&lt;/code&gt; を異なる方法で割り当てる &lt;code&gt;Buffer&lt;/code&gt; コンストラクター関数を使用して作成されました。</target>
        </trans-unit>
        <trans-unit id="832c4629f7e8996e07e8102ea0fa28b91da7e64c" translate="yes" xml:space="preserve">
          <source>Inadequate Security</source>
          <target state="translated">不十分なセキュリティ</target>
        </trans-unit>
        <trans-unit id="a04fbe86378e32032371c210b82217db52298dd6" translate="yes" xml:space="preserve">
          <source>Increases indentation of subsequent lines by spaces for &lt;code&gt;groupIndentation&lt;/code&gt; length.</source>
          <target state="translated">Increases indentation of subsequent lines by spaces for &lt;code&gt;groupIndentation&lt;/code&gt; length.</target>
        </trans-unit>
        <trans-unit id="00695bb607f52dab548ebe840966ef926ce5e82c" translate="yes" xml:space="preserve">
          <source>Increases indentation of subsequent lines by two spaces.</source>
          <target state="translated">後続行のインデントを2スペース分増やします。</target>
        </trans-unit>
        <trans-unit id="1d70be8dce5ba727bab7ab54dcd1d8109b04da3a" translate="yes" xml:space="preserve">
          <source>Indexed properties can be set in a similar manner. Consider the following JavaScript snippet:</source>
          <target state="translated">インデックス付きプロパティも同様の方法で設定できます。次の JavaScript スニペットを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="6a9226b31bce95d0e64d3b93d51517a2e18a0695" translate="yes" xml:space="preserve">
          <source>Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument is used as a script filename.</source>
          <target state="translated">ノードオプションの終了を示します。残りの引数をスクリプトに渡す。これより前にスクリプトファイル名やeval/printスクリプトが与えられていない場合は、次の引数がスクリプトファイル名として使用されます。</target>
        </trans-unit>
        <trans-unit id="cfe35ae027c5117ae3dcbc4f4499564544b6855c" translate="yes" xml:space="preserve">
          <source>Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument will be used as a script filename.</source>
          <target state="translated">ノードオプションの終了を示します。残りの引数をスクリプトに渡す。これより前にスクリプトファイル名や eval/print スクリプトが与えられていない場合は、次の引数がスクリプトファイル名として使用されます。</target>
        </trans-unit>
        <trans-unit id="99d425840951d8be042af09d1dcf66a17ffc427c" translate="yes" xml:space="preserve">
          <source>Indicate whether to treat &lt;code&gt;TypedArray&lt;/code&gt; and &lt;code&gt;DataView&lt;/code&gt; objects as host objects, i.e. pass them to &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; および &lt;code&gt;DataView&lt;/code&gt; オブジェクトをホストオブジェクトとして扱うかどうか、つまり、&lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt; &lt;code&gt;serializer._writeHostObject()&lt;/code&gt; に&lt;/a&gt;渡すかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="fb592b621da88223e8c8eeaa77068b4a45722a59" translate="yes" xml:space="preserve">
          <source>Indicates a bad protocol option.</source>
          <target state="translated">不正なプロトコルオプションを示します。</target>
        </trans-unit>
        <trans-unit id="8ce04c2ac7352b9f26f40319a3e76118d2aa0de4" translate="yes" xml:space="preserve">
          <source>Indicates a broken pipe.</source>
          <target state="translated">パイプが壊れていることを示します。</target>
        </trans-unit>
        <trans-unit id="af50c58faad8a1bc38a6c9a13abb8207dd6be3b4" translate="yes" xml:space="preserve">
          <source>Indicates a protocol error.</source>
          <target state="translated">プロトコルエラーを示します。</target>
        </trans-unit>
        <trans-unit id="ed6600816a977d05967d85edb3fba53ca13ec802" translate="yes" xml:space="preserve">
          <source>Indicates a stale file handle reference.</source>
          <target state="translated">古いファイルハンドル参照を示します。</target>
        </trans-unit>
        <trans-unit id="970e3b5809af80329b70563fbfeafb59b12d099d" translate="yes" xml:space="preserve">
          <source>Indicates a system call failure.</source>
          <target state="translated">システムコールの失敗を示します。</target>
        </trans-unit>
        <trans-unit id="47f9d21b2e00f4702c7ba7173aab1e2e364d4334" translate="yes" xml:space="preserve">
          <source>Indicates an exec format error.</source>
          <target state="translated">exec フォーマットエラーを示します。</target>
        </trans-unit>
        <trans-unit id="7cc6e95cd367c61b66f24c7fe172fdd4c8923fd1" translate="yes" xml:space="preserve">
          <source>Indicates an expired timer.</source>
          <target state="translated">タイマーの有効期限が切れていることを示します。</target>
        </trans-unit>
        <trans-unit id="1c6d7b9adaac7927a8389d72c9d49641a39dfb73" translate="yes" xml:space="preserve">
          <source>Indicates an illegal byte sequence.</source>
          <target state="translated">不正なバイト列を示します。</target>
        </trans-unit>
        <trans-unit id="c2399784693d157cc9db6a7d56a6802acafd3410" translate="yes" xml:space="preserve">
          <source>Indicates an improper link.</source>
          <target state="translated">不適切なリンクを示します。</target>
        </trans-unit>
        <trans-unit id="f5096800752c0124499ffda65a06e130ca52bf58" translate="yes" xml:space="preserve">
          <source>Indicates an inappropriate I/O control operation.</source>
          <target state="translated">不適切な入出力制御動作を示す。</target>
        </trans-unit>
        <trans-unit id="47bec5da438c0efb0d77c5a830b93909367a15cd" translate="yes" xml:space="preserve">
          <source>Indicates an interrupted function call.</source>
          <target state="translated">中断された関数呼び出しを示します。</target>
        </trans-unit>
        <trans-unit id="f90c9f7ea77891094deecf8791df2b6a6f6e7be0" translate="yes" xml:space="preserve">
          <source>Indicates an invalid data message.</source>
          <target state="translated">無効なデータメッセージを示します。</target>
        </trans-unit>
        <trans-unit id="9c88760d39d665b5ee4f2cedcdae333c06a2e638" translate="yes" xml:space="preserve">
          <source>Indicates an invalid file handle.</source>
          <target state="translated">無効なファイルハンドルを示します。</target>
        </trans-unit>
        <trans-unit id="e973fa6216cda928d3b1ff9110620c4c3f989631" translate="yes" xml:space="preserve">
          <source>Indicates an invalid pointer address.</source>
          <target state="translated">無効なポインタアドレスを示す。</target>
        </trans-unit>
        <trans-unit id="542f438ea8fb2199f934997e9825630c4ad77ec3" translate="yes" xml:space="preserve">
          <source>Indicates an invalid seek operation.</source>
          <target state="translated">無効なシーク操作を示します。</target>
        </trans-unit>
        <trans-unit id="ec1cddd818d2d11c606513689ef95576ae628a23" translate="yes" xml:space="preserve">
          <source>Indicates an invalid service provider.</source>
          <target state="translated">無効なサービスプロバイダを示します。</target>
        </trans-unit>
        <trans-unit id="ca69bd9871d6b4b835be2cc5b7e303a5aeb76ba5" translate="yes" xml:space="preserve">
          <source>Indicates an otherwise unspecified I/O error.</source>
          <target state="translated">指定されていないI/Oエラーを示します。</target>
        </trans-unit>
        <trans-unit id="93e1ce7f1ec33ca5400e5c2d49688b755daf62ba" translate="yes" xml:space="preserve">
          <source>Indicates insufficient permissions to complete the operation.</source>
          <target state="translated">操作を完了するための権限が不足していることを示します。</target>
        </trans-unit>
        <trans-unit id="1ea06b534d77b7af671ce8399f89fdee2b70e93d" translate="yes" xml:space="preserve">
          <source>Indicates no such device or address.</source>
          <target state="translated">そのようなデバイスやアドレスがないことを示します。</target>
        </trans-unit>
        <trans-unit id="b3bb95ecdaaf6e1c491e89dc55bdf4ada5917b17" translate="yes" xml:space="preserve">
          <source>Indicates that a class type was not found.</source>
          <target state="translated">クラス・タイプが見つからなかったことを示します。</target>
        </trans-unit>
        <trans-unit id="a078deb966b1f0dbb2923905efd3bfa3c6936245" translate="yes" xml:space="preserve">
          <source>Indicates that a database query was refused.</source>
          <target state="translated">データベースの問い合わせが拒否されたことを示します。</target>
        </trans-unit>
        <trans-unit id="5b0136ce90dcbd9af267c4da8409264b6bd7ceca" translate="yes" xml:space="preserve">
          <source>Indicates that a destination address is required.</source>
          <target state="translated">宛先アドレスが必要であることを示します。</target>
        </trans-unit>
        <trans-unit id="65b88689f4254cf59cbd36c90757eba4ed54d095" translate="yes" xml:space="preserve">
          <source>Indicates that a device or resource is busy.</source>
          <target state="translated">デバイスまたはリソースがビジー状態であることを示します。</target>
        </trans-unit>
        <trans-unit id="9096f517c393ffbea05056d33a410bb9d60b9052" translate="yes" xml:space="preserve">
          <source>Indicates that a file descriptor is not valid.</source>
          <target state="translated">ファイル記述子が有効でないことを示します。</target>
        </trans-unit>
        <trans-unit id="077d00dbf6c0ccd17eaf6e1e436cd24460670b70" translate="yes" xml:space="preserve">
          <source>Indicates that a function call was interrupted.</source>
          <target state="translated">関数呼び出しが中断されたことを示します。</target>
        </trans-unit>
        <trans-unit id="32434c08cff7624431ad07e73db693f189e5d592" translate="yes" xml:space="preserve">
          <source>Indicates that a function has not been implemented.</source>
          <target state="translated">関数が実装されていないことを示します。</target>
        </trans-unit>
        <trans-unit id="74b21789e4d047a87bbefcae69e223e57c0e7bc1" translate="yes" xml:space="preserve">
          <source>Indicates that a given operation is not supported.</source>
          <target state="translated">指定された操作がサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="08aa9ba556ae45765e72b0f04829db3b1e21a970" translate="yes" xml:space="preserve">
          <source>Indicates that a given protocol is not available.</source>
          <target state="translated">指定されたプロトコルが利用できないことを示します。</target>
        </trans-unit>
        <trans-unit id="9ccae215e314e41ad23dfb2f6f21781ee668e8a7" translate="yes" xml:space="preserve">
          <source>Indicates that a given resource is not a stream.</source>
          <target state="translated">与えられたリソースがストリームではないことを示します。</target>
        </trans-unit>
        <trans-unit id="922181aef7cb91ecc745d786636e602f8d8746de" translate="yes" xml:space="preserve">
          <source>Indicates that a graceful shutdown is in progress.</source>
          <target state="translated">優雅なシャットダウンが進行中であることを示します。</target>
        </trans-unit>
        <trans-unit id="2cfcd2648b9d53561c3025491875a16bef0d4576" translate="yes" xml:space="preserve">
          <source>Indicates that a multihop was attempted.</source>
          <target state="translated">マルチホップが試みられたことを示します。</target>
        </trans-unit>
        <trans-unit id="372b49dc7ed23c93af3008079025984775b9a0a1" translate="yes" xml:space="preserve">
          <source>Indicates that a name cannot be translated.</source>
          <target state="translated">名前が翻訳できないことを示します。</target>
        </trans-unit>
        <trans-unit id="cb0450ee237990615ef0438fa979bfc59059b2b2" translate="yes" xml:space="preserve">
          <source>Indicates that a name was too long.</source>
          <target state="translated">名前が長すぎたことを示します。</target>
        </trans-unit>
        <trans-unit id="b454765c5ab209985df1dbfb4d65a1bff4292245" translate="yes" xml:space="preserve">
          <source>Indicates that a network host is down.</source>
          <target state="translated">ネットワークホストがダウンしていることを示します。</target>
        </trans-unit>
        <trans-unit id="5bcf54d6293dc7770b625573d31b031e6f7b608c" translate="yes" xml:space="preserve">
          <source>Indicates that a program is not valid JavaScript. These errors may only be generated and propagated as a result of code evaluation. Code evaluation may happen as a result of &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, or &lt;a href=&quot;vm&quot;&gt;vm&lt;/a&gt;. These errors are almost always indicative of a broken program.</source>
          <target state="translated">Indicates that a program is not valid JavaScript. These errors may only be generated and propagated as a result of code evaluation. Code evaluation may happen as a result of &lt;code&gt;eval&lt;/code&gt; , &lt;code&gt;Function&lt;/code&gt; , &lt;code&gt;require&lt;/code&gt; , or &lt;a href=&quot;vm&quot;&gt;vm&lt;/a&gt;. These errors are almost always indicative of a broken program.</target>
        </trans-unit>
        <trans-unit id="830228d8de255623ef067539c11b71452b1b48e0" translate="yes" xml:space="preserve">
          <source>Indicates that a protocol is not supported.</source>
          <target state="translated">プロトコルがサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="fb0db3310f6fa82a141f97f8c665cfadbcabb020" translate="yes" xml:space="preserve">
          <source>Indicates that a provided argument is not an allowable type. For example, passing a function to a parameter which expects a string would be a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">Indicates that a provided argument is not an allowable type. For example, passing a function to a parameter which expects a string would be a &lt;code&gt;TypeError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c97014940f0f7f3168721a0513da09d5c372e74a" translate="yes" xml:space="preserve">
          <source>Indicates that a provided argument was not within the set or range of acceptable values for a function; whether that is a numeric range, or outside the set of options for a given function parameter.</source>
          <target state="translated">与えられた引数が、関数の許容値のセットまたは範囲内になかったことを示します。</target>
        </trans-unit>
        <trans-unit id="a2d0760b68dc2b9e3234f32c458f8a15a66f253a" translate="yes" xml:space="preserve">
          <source>Indicates that a resource deadlock has been avoided.</source>
          <target state="translated">リソースのデッドロックが回避されたことを示します。</target>
        </trans-unit>
        <trans-unit id="57423d447a54dca4cdf2140de632822c67c31e39" translate="yes" xml:space="preserve">
          <source>Indicates that a resource is temporarily unavailable.</source>
          <target state="translated">リソースが一時的に利用できないことを示します。</target>
        </trans-unit>
        <trans-unit id="c0b30d5efeba61a960acda84ef5df098d46eae0f" translate="yes" xml:space="preserve">
          <source>Indicates that a service was not found.</source>
          <target state="translated">サービスが見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="2128a64f48d84403ea51f2253aaedfb90b12afd6" translate="yes" xml:space="preserve">
          <source>Indicates that a text file is busy.</source>
          <target state="translated">テキストファイルがビジー状態であることを示します。</target>
        </trans-unit>
        <trans-unit id="3789cc087d5c8e5368437244d2068b7da97884fe" translate="yes" xml:space="preserve">
          <source>Indicates that a value is too large to be stored in a given data type.</source>
          <target state="translated">値が大きすぎて、指定されたデータ型に保存できないことを示します。</target>
        </trans-unit>
        <trans-unit id="119dde472605c62e07c67fc1eb210d45a22024ad" translate="yes" xml:space="preserve">
          <source>Indicates that an argument is out of the domain of the function.</source>
          <target state="translated">引数が関数のドメイン外であることを示します。</target>
        </trans-unit>
        <trans-unit id="ba87fc5d415a17cd82523be1ea2df374e0511f76" translate="yes" xml:space="preserve">
          <source>Indicates that an attempt is being made to access a variable that is not defined. Such errors commonly indicate typos in code, or an otherwise broken program.</source>
          <target state="translated">定義されていない変数にアクセスしようとしたことを示します。このようなエラーは、一般的にコードのタイプミスやプログラムが壊れていることを示します。</target>
        </trans-unit>
        <trans-unit id="206c12d38e5f031ad2d2a6389b829af57d9dcd48" translate="yes" xml:space="preserve">
          <source>Indicates that an invalid argument was passed.</source>
          <target state="translated">無効な引数が渡されたことを示します。</target>
        </trans-unit>
        <trans-unit id="18f885333d175807022b890e71c998dfc2743f45" translate="yes" xml:space="preserve">
          <source>Indicates that an invalid argument was provided.</source>
          <target state="translated">無効な引数が提供されたことを示します。</target>
        </trans-unit>
        <trans-unit id="b66800334e222058ef0de4a3087566910745cd0d" translate="yes" xml:space="preserve">
          <source>Indicates that an operation cannot be completed due to an invalid state. For instance, an object may have already been destroyed, or may be performing another operation.</source>
          <target state="translated">無効な状態のために操作を完了できないことを示します。例えば、オブジェクトが既に破壊されていたり、別の操作を行っている可能性があります。</target>
        </trans-unit>
        <trans-unit id="39125118a5a05fdb14d46044b0ea226b675a9877" translate="yes" xml:space="preserve">
          <source>Indicates that an operation has been canceled.</source>
          <target state="translated">操作がキャンセルされたことを示します。</target>
        </trans-unit>
        <trans-unit id="a1d4a2a79fb94045c9c939b6febc16183fe9de98" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is already in progress.</source>
          <target state="translated">操作が既に進行中であることを示します。</target>
        </trans-unit>
        <trans-unit id="948ed5bc8d3bcef9cb214d0bff38ef1f9cbb6092" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is currently in progress.</source>
          <target state="translated">操作が現在進行中であることを示します。</target>
        </trans-unit>
        <trans-unit id="986c5f3c1884501bbd01dbd74ec96d7ee20da1ba" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is not supported on the socket. Although &lt;code&gt;ENOTSUP&lt;/code&gt; and &lt;code&gt;EOPNOTSUPP&lt;/code&gt; have the same value on Linux, according to POSIX.1 these error values should be distinct.)</source>
          <target state="translated">Indicates that an operation is not supported on the socket. Although &lt;code&gt;ENOTSUP&lt;/code&gt; and &lt;code&gt;EOPNOTSUPP&lt;/code&gt; have the same value on Linux, according to POSIX.1 these error values should be distinct.)</target>
        </trans-unit>
        <trans-unit id="9c9fc2a88443f1bd9bcd796a3c09a586342edc14" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is not supported on the socket. Note that while &lt;code&gt;ENOTSUP&lt;/code&gt; and &lt;code&gt;EOPNOTSUPP&lt;/code&gt; have the same value on Linux, according to POSIX.1 these error values should be distinct.)</source>
          <target state="translated">ソケットで操作がサポートされていないことを示します。ながらそのノート &lt;code&gt;ENOTSUP&lt;/code&gt; と &lt;code&gt;EOPNOTSUPP&lt;/code&gt; は、 Linux上で同じ値を持つ、POSIX.1によれば、これらの誤差値が明確であるべきです。）</target>
        </trans-unit>
        <trans-unit id="4c078047af5f70ba3758bfb52a630d790c966eef" translate="yes" xml:space="preserve">
          <source>Indicates that an operation was canceled.</source>
          <target state="translated">操作がキャンセルされたことを示します。</target>
        </trans-unit>
        <trans-unit id="4e4c46f02c3fe5b062d6dee34e96956cdbf1d2ef" translate="yes" xml:space="preserve">
          <source>Indicates that data cannot be sent after the socket has been shutdown.</source>
          <target state="translated">ソケットがシャットダウンされた後、データを送信できないことを示す。</target>
        </trans-unit>
        <trans-unit id="5d4b71c7fe6eb8dcca0374a54346d6d8ee080a7d" translate="yes" xml:space="preserve">
          <source>Indicates that no buffer space is available.</source>
          <target state="translated">バッファスペースがないことを示します。</target>
        </trans-unit>
        <trans-unit id="fb5fe0bc009a449b0c131d1b39cee3df3ec53be6" translate="yes" xml:space="preserve">
          <source>Indicates that no message is available on the stream head read queue.</source>
          <target state="translated">ストリームヘッド読み取りキューにメッセージがないことを示します。</target>
        </trans-unit>
        <trans-unit id="76b762b35b459e2a3f4130aaecebcc05d526dd1d" translate="yes" xml:space="preserve">
          <source>Indicates that successful WSAStartup has not yet been performed.</source>
          <target state="translated">WSAStartup が成功していないことを示します。</target>
        </trans-unit>
        <trans-unit id="48d443e903069b79fc6fc8e876cd1f59a55ab321" translate="yes" xml:space="preserve">
          <source>Indicates that the &lt;code&gt;winsock.dll&lt;/code&gt; version is out of range.</source>
          <target state="translated">&lt;code&gt;winsock.dll&lt;/code&gt; のバージョンが範囲外であることを示します。</target>
        </trans-unit>
        <trans-unit id="f8b67731347b7d3d1a2fb104a016252967ec1f8a" translate="yes" xml:space="preserve">
          <source>Indicates that the address family is not supported.</source>
          <target state="translated">アドレスファミリがサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="5593d5f8a211a9b9a1628f4eb1448ba6b26682d7" translate="yes" xml:space="preserve">
          <source>Indicates that the call was canceled.</source>
          <target state="translated">通話がキャンセルされたことを示します。</target>
        </trans-unit>
        <trans-unit id="e0a53ecfeb6b859c1766e6952e74ee72db93b25b" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been aborted by the network.</source>
          <target state="translated">ネットワークによって接続が中断されたことを示します。</target>
        </trans-unit>
        <trans-unit id="695ee1b1d84ae237c8c3346f15676398969a0d84" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been aborted.</source>
          <target state="translated">接続が中断されたことを示します。</target>
        </trans-unit>
        <trans-unit id="a8362bc4ab7de1fd6ca1112c54f2f53624fc425a" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been refused.</source>
          <target state="translated">接続が拒否されたことを示します。</target>
        </trans-unit>
        <trans-unit id="757641a9b638d2123741484401860c5f6d474ad0" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been reset by the peer.</source>
          <target state="translated">接続がピアによってリセットされたことを示します。</target>
        </trans-unit>
        <trans-unit id="e3ae37829bc190196d8da2831b4c0f75007675de" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has timed out.</source>
          <target state="translated">接続がタイムアウトしたことを示します。</target>
        </trans-unit>
        <trans-unit id="7b4be4d3afaa2e5f45d481ca27450e687b555f25" translate="yes" xml:space="preserve">
          <source>Indicates that the connection timed out.</source>
          <target state="translated">接続がタイムアウトしたことを示します。</target>
        </trans-unit>
        <trans-unit id="63d73aaa34d8df5ee63adbb0894f6278dfec083d" translate="yes" xml:space="preserve">
          <source>Indicates that the directory is not empty.</source>
          <target state="translated">ディレクトリが空でないことを示します。</target>
        </trans-unit>
        <trans-unit id="e46d1e52d341e3f224dfa62b18df35ba474687e5" translate="yes" xml:space="preserve">
          <source>Indicates that the disk quota has been exceeded.</source>
          <target state="translated">ディスククォータを超えたことを示します。</target>
        </trans-unit>
        <trans-unit id="161c3595104196dd948b18febc343f1bd46f25c7" translate="yes" xml:space="preserve">
          <source>Indicates that the file already exists.</source>
          <target state="translated">ファイルが既に存在することを示します。</target>
        </trans-unit>
        <trans-unit id="a60ba5dd633cddcea59d035cdabd5b096d7d3e9a" translate="yes" xml:space="preserve">
          <source>Indicates that the file handle is stale.</source>
          <target state="translated">ファイルハンドルが古くなっていることを示します。</target>
        </trans-unit>
        <trans-unit id="855b2f5e83d5f45403266942ed6a78a8e48438fd" translate="yes" xml:space="preserve">
          <source>Indicates that the file is too large.</source>
          <target state="translated">ファイルが大きすぎることを示します。</target>
        </trans-unit>
        <trans-unit id="40663f45ce87393265672016c54db313ad1a6e64" translate="yes" xml:space="preserve">
          <source>Indicates that the file system is read only.</source>
          <target state="translated">ファイルシステムが読み取り専用であることを示します。</target>
        </trans-unit>
        <trans-unit id="e2436e26e43b92563a743feba4b113fa8a275c36" translate="yes" xml:space="preserve">
          <source>Indicates that the filename is too long.</source>
          <target state="translated">ファイル名が長すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="089cc30b91254f5c76ce11943c070ea4bb9e4ffe" translate="yes" xml:space="preserve">
          <source>Indicates that the given item is not a socket.</source>
          <target state="translated">与えられた項目がソケットではないことを示す。</target>
        </trans-unit>
        <trans-unit id="55d9efc8d6c36c8b3a99098120e3624ebd4ee169" translate="yes" xml:space="preserve">
          <source>Indicates that the host is unreachable.</source>
          <target state="translated">ホストが到達不可能であることを示します。</target>
        </trans-unit>
        <trans-unit id="6deb274595ac102e6a95cf0fda8844325c2402b2" translate="yes" xml:space="preserve">
          <source>Indicates that the identifier has been removed.</source>
          <target state="translated">識別子が削除されたことを示します。</target>
        </trans-unit>
        <trans-unit id="16385ed77106de084d977545579771db76e25687" translate="yes" xml:space="preserve">
          <source>Indicates that the item is remote.</source>
          <target state="translated">アイテムがリモートであることを示します。</target>
        </trans-unit>
        <trans-unit id="cd0453304f970d9c1105ea3bd64f4cc2e4c65c32" translate="yes" xml:space="preserve">
          <source>Indicates that the list of arguments is longer than expected.</source>
          <target state="translated">引数のリストが予想よりも長いことを示します。</target>
        </trans-unit>
        <trans-unit id="bfafda04ebb20ac0339f69bfb2547f21a46f2b4c" translate="yes" xml:space="preserve">
          <source>Indicates that the message size is too long.</source>
          <target state="translated">メッセージサイズが長すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="28f8f8a59da191885b3db8e166955be99443a142" translate="yes" xml:space="preserve">
          <source>Indicates that the network address family is not supported.</source>
          <target state="translated">ネットワークアドレスファミリがサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="b1b3a54983042b769b394e9481c90955db44eede" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is already in use.</source>
          <target state="translated">ネットワークアドレスが既に使用されていることを示します。</target>
        </trans-unit>
        <trans-unit id="8f10c1721305ff9e8e66fc7ac1a7b82f41551e9d" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is currently unavailable for use.</source>
          <target state="translated">ネットワークアドレスが現在使用できないことを示します。</target>
        </trans-unit>
        <trans-unit id="a794b8e798681860dc3c2cd356736564119b7aaa" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is not available.</source>
          <target state="translated">ネットワークアドレスが使用できないことを示します。</target>
        </trans-unit>
        <trans-unit id="b452c6966555edcc5055e10c8498f2a68f0760bc" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been aborted.</source>
          <target state="translated">ネットワーク接続が中断されたことを示します。</target>
        </trans-unit>
        <trans-unit id="4764d277de78c1ce7c30015888e50a4502c04cda" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been refused.</source>
          <target state="translated">ネットワーク接続が拒否されたことを示します。</target>
        </trans-unit>
        <trans-unit id="9b9818c6db8926eb6f8490fe27a113f4e4f48bd3" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been reset.</source>
          <target state="translated">ネットワーク接続がリセットされたことを示します。</target>
        </trans-unit>
        <trans-unit id="0e4630ae08750c7cc87ea20c36c05978a40c3365" translate="yes" xml:space="preserve">
          <source>Indicates that the network is down.</source>
          <target state="translated">ネットワークがダウンしていることを示します。</target>
        </trans-unit>
        <trans-unit id="4af29b3221c7857a372f20709460cf0cf423ed12" translate="yes" xml:space="preserve">
          <source>Indicates that the network is unreachable.</source>
          <target state="translated">ネットワークにアクセスできないことを示します。</target>
        </trans-unit>
        <trans-unit id="368c2e27b0922fb850ee9cc185aaaabf0f6f0c72" translate="yes" xml:space="preserve">
          <source>Indicates that the network subsystem is not ready.</source>
          <target state="translated">ネットワークサブシステムの準備ができていないことを示します。</target>
        </trans-unit>
        <trans-unit id="383ae045925743a63505cb92d9281c853dfbcc7c" translate="yes" xml:space="preserve">
          <source>Indicates that the operation did not have sufficient permissions.</source>
          <target state="translated">操作に十分な権限がなかったことを示します。</target>
        </trans-unit>
        <trans-unit id="2bcee5ac45f4a21f13696f8ffe7c93a2d766ac8a" translate="yes" xml:space="preserve">
          <source>Indicates that the operation is not permitted.</source>
          <target state="translated">操作が許可されていないことを示します。</target>
        </trans-unit>
        <trans-unit id="65f9f362c2c3c2f761dab77a4a911af304ad3f33" translate="yes" xml:space="preserve">
          <source>Indicates that the operation is not supported.</source>
          <target state="translated">操作がサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="776c0d89c093c17f22b7b6705dc7e7960302d908" translate="yes" xml:space="preserve">
          <source>Indicates that the operation would block.</source>
          <target state="translated">操作がブロックされることを示します。</target>
        </trans-unit>
        <trans-unit id="e117af40033e88e685ebc9243ba8656b98dee296" translate="yes" xml:space="preserve">
          <source>Indicates that the path is a directory.</source>
          <target state="translated">パスがディレクトリであることを示します。</target>
        </trans-unit>
        <trans-unit id="701e0fe25025bc13b6c3ae1b84ed6ee66e9cf69e" translate="yes" xml:space="preserve">
          <source>Indicates that the path is not a directory.</source>
          <target state="translated">パスがディレクトリでないことを示します。</target>
        </trans-unit>
        <trans-unit id="2d5bc9d82c613e54c1df8c0723a4c03f1298377f" translate="yes" xml:space="preserve">
          <source>Indicates that the procedure call table is invalid.</source>
          <target state="translated">プロシージャコールテーブルが無効であることを示します。</target>
        </trans-unit>
        <trans-unit id="03a40bb10c80e6514013b0ad35fa8d777655f104" translate="yes" xml:space="preserve">
          <source>Indicates that the protocol family is not supported.</source>
          <target state="translated">プロトコルファミリがサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="71af43ae58a0ce69e6cde0af5f6e86a43cb92527" translate="yes" xml:space="preserve">
          <source>Indicates that the protocol is not supported.</source>
          <target state="translated">プロトコルがサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="96a23e49b5ed1e325f70e865582ab8264afc3fa6" translate="yes" xml:space="preserve">
          <source>Indicates that the provided message is too long.</source>
          <target state="translated">提供されたメッセージが長すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="74bff985c66849e5fa9d2c2e0ac7cfbb7ceeaf1f" translate="yes" xml:space="preserve">
          <source>Indicates that the resource is not a socket.</source>
          <target state="translated">リソースがソケットではないことを示します。</target>
        </trans-unit>
        <trans-unit id="d33c873c0e43a3d1c20a25c9f226c7397de4abc4" translate="yes" xml:space="preserve">
          <source>Indicates that the results are too large.</source>
          <target state="translated">結果が大きすぎることを示します。</target>
        </trans-unit>
        <trans-unit id="bcf3dc9f9254b168e5ca41afd9d2992ac56a9e00" translate="yes" xml:space="preserve">
          <source>Indicates that the service provider failed to initialized.</source>
          <target state="translated">サービスプロバイダの初期化に失敗したことを示します。</target>
        </trans-unit>
        <trans-unit id="ef5ae11922fe267f93483559945ea71416b14b63" translate="yes" xml:space="preserve">
          <source>Indicates that the socket already has a pending connection in progress.</source>
          <target state="translated">ソケットが既に接続を保留中であることを示す。</target>
        </trans-unit>
        <trans-unit id="da9a9c897b5c353995793f4224f6105691fd33a8" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is already connected.</source>
          <target state="translated">ソケットが既に接続されていることを示します。</target>
        </trans-unit>
        <trans-unit id="d63328104df6e2b2399694396579fe9ce96abe0f" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is connected.</source>
          <target state="translated">ソケットが接続されていることを示します。</target>
        </trans-unit>
        <trans-unit id="8a4539fe8fe18ebf237948a7033f92ffe07cf5b8" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is not connected.</source>
          <target state="translated">ソケットが接続されていないことを示します。</target>
        </trans-unit>
        <trans-unit id="4574e95a6c77d72a0a44c095218843f94a28bb70" translate="yes" xml:space="preserve">
          <source>Indicates that the socket type is not supported.</source>
          <target state="translated">ソケットタイプがサポートされていないことを示します。</target>
        </trans-unit>
        <trans-unit id="3f8a7729a563a492b558759c17c48de2ac002c94" translate="yes" xml:space="preserve">
          <source>Indicates that the the response is completed, or its underlying connection was terminated prematurely (before the response completion).</source>
          <target state="translated">応答が完了したこと、またはその基礎となる接続が(応答完了前に)早期に終了したことを示す。</target>
        </trans-unit>
        <trans-unit id="b14389542f80e2a560b89ba1bb7a23334b01d4c1" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was closed. Just like &lt;code&gt;'end'&lt;/code&gt;, this event occurs only once per response.</source>
          <target state="translated">基になる&lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;が閉じられたことを示します。 &lt;code&gt;'end'&lt;/code&gt; と同様に、このイベントは応答ごとに1回だけ発生します。</target>
        </trans-unit>
        <trans-unit id="dfe895c11954545a14b05bd8ad28fa8a7ef0c8b5" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was terminated before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; was called or able to flush.</source>
          <target state="translated">Indicates that the underlying &lt;a href=&quot;#http2_class_http2stream&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt; was terminated before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt; was called or able to flush.</target>
        </trans-unit>
        <trans-unit id="6a4be62dc021781f1f7331af72972eee9db55491" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was terminated before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; was called or able to flush.</source>
          <target state="translated">&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;が呼び出される前、またはフラッシュする前に、基になる&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2Stream&lt;/code&gt; &lt;/a&gt;が終了したことを示します。</target>
        </trans-unit>
        <trans-unit id="7d37a8f24a3523e9d164fbb58172c9cd00aa98d6" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying connection was closed.</source>
          <target state="translated">基礎となる接続が閉じられたことを示します。</target>
        </trans-unit>
        <trans-unit id="19e0d6007f4cfb102172b1f94dcbf1507928863f" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying connection was terminated.</source>
          <target state="translated">基礎となる接続が終了したことを示します。</target>
        </trans-unit>
        <trans-unit id="260e1df33ddcd4e82330898db6a7ca89ab095d5c" translate="yes" xml:space="preserve">
          <source>Indicates that the user quota has been exceeded.</source>
          <target state="translated">ユーザークォータを超えたことを示します。</target>
        </trans-unit>
        <trans-unit id="c18f1d989cebb9a5ccb0014b0a3b804ab18c29c8" translate="yes" xml:space="preserve">
          <source>Indicates that there are no child processes.</source>
          <target state="translated">子プロセスがないことを示します。</target>
        </trans-unit>
        <trans-unit id="89b994954e043610752ae496b165c4ad0cfacabb" translate="yes" xml:space="preserve">
          <source>Indicates that there are no locks available.</source>
          <target state="translated">利用可能なロックがないことを示します。</target>
        </trans-unit>
        <trans-unit id="6614378fd3d8db903142159b891610453273befe" translate="yes" xml:space="preserve">
          <source>Indicates that there are no more results.</source>
          <target state="translated">結果が出ていないことを示します。</target>
        </trans-unit>
        <trans-unit id="9c2f963abe2e3b2191a35765acbcd9088625836c" translate="yes" xml:space="preserve">
          <source>Indicates that there are no stream resources available.</source>
          <target state="translated">利用可能なストリームリソースがないことを示します。</target>
        </trans-unit>
        <trans-unit id="f9a897a9242c6f8deaa685d649f1f37446fe4f32" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many hard links to a file.</source>
          <target state="translated">ファイルへのハードリンクが多すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="e28f98082ba14f699b932ee58bac27df4cf4769d" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many open files.</source>
          <target state="translated">開いているファイルが多すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="f92b6f438bbbad6dd4b5c6e5240708cfc537fc1f" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many processes.</source>
          <target state="translated">プロセスが多すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="71d85f876e9626a6491e65d612e9b483bfa7b9cd" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many references.</source>
          <target state="translated">参照先が多すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="61082c259368a9f710adafe9a304001eb1fee6c5" translate="yes" xml:space="preserve">
          <source>Indicates that there is currently no data available and to try the operation again later.</source>
          <target state="translated">現在利用可能なデータがなく、後でもう一度操作を試すことを示します。</target>
        </trans-unit>
        <trans-unit id="b83fced05951abf5691548b4cd2103feaf2c694a" translate="yes" xml:space="preserve">
          <source>Indicates that there is no buffer space available.</source>
          <target state="translated">利用可能なバッファスペースがないことを示します。</target>
        </trans-unit>
        <trans-unit id="82fb1de123b047874668f6b2b7144fbdb954fcea" translate="yes" xml:space="preserve">
          <source>Indicates that there is no data available and to try the operation again later.</source>
          <target state="translated">利用可能なデータがなく、後で再度操作を試みることを示します。</target>
        </trans-unit>
        <trans-unit id="976457834d5fc65d10eefc909f9b879b0f79e739" translate="yes" xml:space="preserve">
          <source>Indicates that there is no message of the desired type.</source>
          <target state="translated">希望するタイプのメッセージがないことを示す。</target>
        </trans-unit>
        <trans-unit id="22073a072089d5c0ffc9dce772a1a7ec08c2c53f" translate="yes" xml:space="preserve">
          <source>Indicates that there is no route to a network host.</source>
          <target state="translated">ネットワークホストへのルートがないことを示します。</target>
        </trans-unit>
        <trans-unit id="ee2f6e7184bd083b8b8ad9d4456fd58b427c7808" translate="yes" xml:space="preserve">
          <source>Indicates that there is no space available on the device.</source>
          <target state="translated">デバイスに空き容量がないことを示します。</target>
        </trans-unit>
        <trans-unit id="7853ff79915590151db29acfe2f8a05e4231bf78" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such device.</source>
          <target state="translated">そのようなデバイスがないことを示します。</target>
        </trans-unit>
        <trans-unit id="feb99cc3620ddf00d8a100209370656211892cda" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such file or directory.</source>
          <target state="translated">そのようなファイルやディレクトリが存在しないことを示します。</target>
        </trans-unit>
        <trans-unit id="46c76f2198f24358bd4c816200de1fcb8af12a78" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such process.</source>
          <target state="translated">そのような処理がないことを示す。</target>
        </trans-unit>
        <trans-unit id="27353c844a6a35a27649ab175b0eb68661ef531a" translate="yes" xml:space="preserve">
          <source>Indicates that there is not enough space.</source>
          <target state="translated">十分なスペースがないことを示します。</target>
        </trans-unit>
        <trans-unit id="915ee7ece9b652c3f36d18624a65020ff4d4c2dc" translate="yes" xml:space="preserve">
          <source>Indicates the failure of an assertion. All errors thrown by the &lt;code&gt;assert&lt;/code&gt; module will be instances of the &lt;code&gt;AssertionError&lt;/code&gt; class.</source>
          <target state="translated">Indicates the failure of an assertion. All errors thrown by the &lt;code&gt;assert&lt;/code&gt; module will be instances of the &lt;code&gt;AssertionError&lt;/code&gt; class.</target>
        </trans-unit>
        <trans-unit id="1cff06c2c1c9eb44ded32d50b847319e14be81c0" translate="yes" xml:space="preserve">
          <source>Indicates the failure of an assertion. For details, see &lt;a href=&quot;assert#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;Class: assert.AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Indicates the failure of an assertion. For details, see &lt;a href=&quot;assert#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;Class: assert.AssertionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="da5e1a3736d4e24ec12fb4f0df216bed85b2f1b8" translate="yes" xml:space="preserve">
          <source>Indicates the wrong protocol type for the socket.</source>
          <target state="translated">ソケットのプロトコルタイプが間違っていることを示す。</target>
        </trans-unit>
        <trans-unit id="e8d7594bb044a48ce5960ed97b1c5e185a94eb43" translate="yes" xml:space="preserve">
          <source>Indicates the wrong type of protocol for a socket.</source>
          <target state="translated">ソケットのプロトコルが間違っていることを示します。</target>
        </trans-unit>
        <trans-unit id="33cd43c392b2eaab3b1a94dfcc9ae9f8cb85a5fb" translate="yes" xml:space="preserve">
          <source>Indicates too many levels of symbolic links in a path.</source>
          <target state="translated">パス内のシンボリックリンクのレベルが高すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="a1121a0a8baa36b282377bd118336f82d59471e5" translate="yes" xml:space="preserve">
          <source>Indicates too many open files in the system.</source>
          <target state="translated">システムで開いているファイルが多すぎることを示します。</target>
        </trans-unit>
        <trans-unit id="f793ef295cef1dc50901d3c108997d4015097940" translate="yes" xml:space="preserve">
          <source>Indicates whether a callback has been set using &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コールバックが&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt;を使用して設定されているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="84abc9bf3d68bcff752515aa207501469e0aa0e9" translate="yes" xml:space="preserve">
          <source>Indicates whether the &lt;code&gt;Http2Session&lt;/code&gt; is currently waiting for acknowledgment of a sent &lt;code&gt;SETTINGS&lt;/code&gt; frame. Will be &lt;code&gt;true&lt;/code&gt; after calling the &lt;code&gt;http2session.settings()&lt;/code&gt; method. Will be &lt;code&gt;false&lt;/code&gt; once all sent &lt;code&gt;SETTINGS&lt;/code&gt; frames have been acknowledged.</source>
          <target state="translated">&lt;code&gt;Http2Session&lt;/code&gt; が現在、送信された &lt;code&gt;SETTINGS&lt;/code&gt; フレームの確認を待機しているかどうかを示します。 &lt;code&gt;http2session.settings()&lt;/code&gt; メソッドを呼び出した後に &lt;code&gt;true&lt;/code&gt; になります。送信されたすべての &lt;code&gt;SETTINGS&lt;/code&gt; フレームが確認されると、 &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="42c22cb8018104ad4a34b76968a323a00574ca11" translate="yes" xml:space="preserve">
          <source>Indications that a link has been severed.</source>
          <target state="translated">リンクが切断されたことを示します。</target>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="f3b4641545ee175acfc4265f97a1626ea40f907b" translate="yes" xml:space="preserve">
          <source>Information about the cipher algorithm selected for the session.</source>
          <target state="translated">セッションで選択された暗号アルゴリズムに関する情報。</target>
        </trans-unit>
        <trans-unit id="2c6d1039846355bb3c61f905e9d3ba65581c1937" translate="yes" xml:space="preserve">
          <source>Informational HTTP status codes (&lt;code&gt;1xx&lt;/code&gt;) may not be set as the response status code on HTTP/2 responses.</source>
          <target state="translated">情報HTTPステータスコード（ &lt;code&gt;1xx&lt;/code&gt; ）は、HTTP / 2応答の応答ステータスコードとして設定されない場合があります。</target>
        </trans-unit>
        <trans-unit id="7d409ba6d52f3a405cf5f9a0291be6c9569d3e96" translate="yes" xml:space="preserve">
          <source>Informational Headers</source>
          <target state="translated">情報の見出し</target>
        </trans-unit>
        <trans-unit id="454bff202859695294ed0d692a79b0cd3d986d67" translate="yes" xml:space="preserve">
          <source>Informational Headers: Any response headers transmitted within a block of headers using a &lt;code&gt;1xx&lt;/code&gt; status code.</source>
          <target state="translated">情報ヘッダー： &lt;code&gt;1xx&lt;/code&gt; ステータスコードを使用してヘッダーのブロック内で送信される応答ヘッダー。</target>
        </trans-unit>
        <trans-unit id="10f35ea53e49802f840775c3d4b91ff4f9c6035d" translate="yes" xml:space="preserve">
          <source>Inherit the prototype methods from one &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor&quot;&gt;constructor&lt;/a&gt; into another. The prototype of &lt;code&gt;constructor&lt;/code&gt; will be set to a new object created from &lt;code&gt;superConstructor&lt;/code&gt;.</source>
          <target state="translated">ある&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor&quot;&gt;コンストラクター&lt;/a&gt;から別のコンストラクターにプロトタイプメソッドを継承します。 &lt;code&gt;constructor&lt;/code&gt; のプロトタイプは、 &lt;code&gt;superConstructor&lt;/code&gt; から作成された新しいオブジェクトに設定されます。</target>
        </trans-unit>
        <trans-unit id="905527bad8a55f9475f8845932d0fc433480e08e" translate="yes" xml:space="preserve">
          <source>Initial Headers</source>
          <target state="translated">初期ヘッダ</target>
        </trans-unit>
        <trans-unit id="b0443bd0441bc30d5c3dd2144ee4b77afc32a9f2" translate="yes" xml:space="preserve">
          <source>Initial Headers: HTTP request or response headers</source>
          <target state="translated">初期ヘッダ。HTTP リクエストヘッダまたはレスポンスヘッダ</target>
        </trans-unit>
        <trans-unit id="5c8ecdfbfc1dd50dc01b89601fe8f8be9beeb66d" translate="yes" xml:space="preserve">
          <source>Initialization of an asynchronous crypto operation failed.</source>
          <target state="translated">非同期 crypto 操作の初期化に失敗しました。</target>
        </trans-unit>
        <trans-unit id="f5fa5412f2cf16eed186105984f1a62b5cc7c1e6" translate="yes" xml:space="preserve">
          <source>Initialization of the crypto subsystem failed.</source>
          <target state="translated">暗号サブシステムの初期化に失敗しました。</target>
        </trans-unit>
        <trans-unit id="1c605479b3766044fe5d8c5e766dca7dfa29eac8" translate="yes" xml:space="preserve">
          <source>Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; it is important to remember that an attacker must not be able to predict ahead of time what a given IV will be.</source>
          <target state="translated">初期化ベクトルは予測不可能で一意でなければなりません。理想的には暗号的にランダムであることが望ましいです。IV は通常、暗号化されていない暗号文メッセージに追加されるだけです。何かが予測不可能で一意でなければならないというのは矛盾しているように聞こえるかもしれませんが、秘密である必要はありません。</target>
        </trans-unit>
        <trans-unit id="c95e5b0cef8d79d14d3cfbaa8b47cbfec97c8155" translate="yes" xml:space="preserve">
          <source>Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; remember that an attacker must not be able to predict ahead of time what a given IV will be.</source>
          <target state="translated">初期化ベクトルは予測不可能で一意でなければなりません。理想的には暗号的にランダムであることが望ましいです。IV は通常、暗号化されていない暗号文メッセージに追加されるだけです。予測不可能で一意でなければならないというのは矛盾しているように聞こえるかもしれませんが、秘密である必要はありません。</target>
        </trans-unit>
        <trans-unit id="a81cf0d3001b974f4ab0ead2bdb88c2f9cb54eeb" translate="yes" xml:space="preserve">
          <source>Initializes a history log file for the REPL instance. When executing the Node.js binary and using the command line REPL, a history file is initialized by default. However, this is not the case when creating a REPL programmatically. Use this method to initialize a history log file when working with REPL instances programmatically.</source>
          <target state="translated">REPL インスタンスの履歴ログファイルを初期化します。Node.js バイナリを実行してコマンドラインの REPL を使用する場合、履歴ファイルはデフォルトで初期化されます。ただし、プログラムで REPL を作成する場合はこの限りではありません。プログラムで REPL インスタンスを使用して作業する場合は、このメソッドを使用して履歴ログファイルを初期化してください。</target>
        </trans-unit>
        <trans-unit id="424343ae6998b53b7b5197e4547912f100930a60" translate="yes" xml:space="preserve">
          <source>Initializes a history log file for the REPL instance. When executing the Node.js binary and using the command-line REPL, a history file is initialized by default. However, this is not the case when creating a REPL programmatically. Use this method to initialize a history log file when working with REPL instances programmatically.</source>
          <target state="translated">REPL インスタンスの履歴ログファイルを初期化します。Node.js バイナリを実行してコマンドラインの REPL を使用する場合、履歴ファイルはデフォルトで初期化されます。ただし、プログラムで REPL を作成する場合はこの限りではありません。プログラム的に REPL インスタンスを使用して作業する場合は、このメソッドを使用して履歴ログファイルを初期化してください。</target>
        </trans-unit>
        <trans-unit id="a4cdbd02ba690df84da7adc74e183f564120378f" translate="yes" xml:space="preserve">
          <source>Initiate a TCP connection on the given socket.</source>
          <target state="translated">指定されたソケットでTCP接続を開始します。</target>
        </trans-unit>
        <trans-unit id="0d5479f7f1139e75134b5638b844d0e258a74f35" translate="yes" xml:space="preserve">
          <source>Initiate a connection on a given socket.</source>
          <target state="translated">指定されたソケットで接続を開始します。</target>
        </trans-unit>
        <trans-unit id="810ba9b70df6c10d966779b0bafa88ded886aa59" translate="yes" xml:space="preserve">
          <source>Initiate a connection on a given socket. Normally this method is not needed, the socket should be created and opened with &lt;a href=&quot;#net_net_createconnection&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;. Use this only when implementing a custom Socket.</source>
          <target state="translated">指定されたソケットで接続を開始します。通常、このメソッドは必要ありません。ソケットは&lt;a href=&quot;#net_net_createconnection&quot;&gt; &lt;code&gt;net.createConnection()&lt;/code&gt; &lt;/a&gt;で作成して開く必要があります。これは、カスタムソケットを実装する場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="6043ac861d8556db1f1186a96ea25461c657c5ba" translate="yes" xml:space="preserve">
          <source>Initiate an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; connection on the given socket.</source>
          <target state="translated">指定されたソケットで&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;接続を開始します。</target>
        </trans-unit>
        <trans-unit id="d640515b7b587180776147c1f262a31f611022ef" translate="yes" xml:space="preserve">
          <source>Initiates QuicSession key update.</source>
          <target state="translated">QuicSessionキーの更新を開始します。</target>
        </trans-unit>
        <trans-unit id="586faf8bd3a03c92f8cb24c136ad18b37d24ab58" translate="yes" xml:space="preserve">
          <source>Initiates a TCP connection.</source>
          <target state="translated">TCP 接続を開始します。</target>
        </trans-unit>
        <trans-unit id="53a4de7eba42de63d90bb804549dc818d7f966d1" translate="yes" xml:space="preserve">
          <source>Initiates a push stream. The callback is invoked with the new &lt;code&gt;Http2Stream&lt;/code&gt; instance created for the push stream passed as the second argument, or an &lt;code&gt;Error&lt;/code&gt; passed as the first argument.</source>
          <target state="translated">プッシュストリームを開始します。コールバックは、2番目の引数として渡されたプッシュストリーム用に作成された新しい &lt;code&gt;Http2Stream&lt;/code&gt; インスタンス、または最初の引数として渡された &lt;code&gt;Error&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9c2bf8ae9d7cffd1a2491dca9b8c27dd7928ed38" translate="yes" xml:space="preserve">
          <source>Initiates a response whose data is read from the given file descriptor. No validation is performed on the given file descriptor. If an error occurs while attempting to read data using the file descriptor, the &lt;code&gt;Http2Stream&lt;/code&gt; will be closed using an &lt;code&gt;RST_STREAM&lt;/code&gt; frame using the standard &lt;code&gt;INTERNAL_ERROR&lt;/code&gt; code.</source>
          <target state="translated">指定されたファイル記述子からデータが読み取られる応答を開始します。指定されたファイル記述子に対して検証は実行されません。ファイル記述子を使用してデータを読み取ろうとしたときにエラーが発生した場合、 &lt;code&gt;Http2Stream&lt;/code&gt; は、標準の &lt;code&gt;INTERNAL_ERROR&lt;/code&gt; コードを使用する &lt;code&gt;RST_STREAM&lt;/code&gt; フレームを使用して閉じられます。</target>
        </trans-unit>
        <trans-unit id="35fb6e9a05f63492052bc71c81678318b03c33a7" translate="yes" xml:space="preserve">
          <source>Initiates an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; connection.</source>
          <target state="translated">&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;接続を開始します。</target>
        </trans-unit>
        <trans-unit id="26d4e2e6f7bc72aa1b7fe9902a5761b23f342bb5" translate="yes" xml:space="preserve">
          <source>Inodes</source>
          <target state="translated">Inodes</target>
        </trans-unit>
        <trans-unit id="720c091ce87a13844611624e3c634ce2ed5d326a" translate="yes" xml:space="preserve">
          <source>Input &lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;Uint8Array&lt;/code&gt; instances passed to the &lt;code&gt;http2.getUnpackedSettings()&lt;/code&gt; API must have a length that is a multiple of six.</source>
          <target state="translated">&lt;code&gt;http2.getUnpackedSettings()&lt;/code&gt; APIに渡される入力 &lt;code&gt;Buffer&lt;/code&gt; および &lt;code&gt;Uint8Array&lt;/code&gt; インスタンスの長さは、6の倍数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="08ab03b761f96fdd2c5da59a100ff5730e9c4009" translate="yes" xml:space="preserve">
          <source>Inserting the statement &lt;code&gt;debugger;&lt;/code&gt; into the source code of a script will enable a breakpoint at that position in the code:</source>
          <target state="translated">ステートメント &lt;code&gt;debugger;&lt;/code&gt; 挿入; スクリプトのソースコードに挿入すると、コード内のその位置でブレークポイントが有効になります。</target>
        </trans-unit>
        <trans-unit id="051747894e566bebff8a6f6ae4afde9c862d5e6c" translate="yes" xml:space="preserve">
          <source>Inspecting linked lists and similar objects is now possible up to the maximum call stack size.</source>
          <target state="translated">リンクされたリストや類似のオブジェクトの検査が、最大コールスタックサイズまで可能になりました。</target>
        </trans-unit>
        <trans-unit id="8222c902ae0723e8bb352bb17ed76809e4688165" translate="yes" xml:space="preserve">
          <source>Inspector</source>
          <target state="translated">Inspector</target>
        </trans-unit>
        <trans-unit id="ad8db003f59f527184ade10382360155f5682949" translate="yes" xml:space="preserve">
          <source>Inspector only methods</source>
          <target state="translated">インスペクタのみのメソッド</target>
        </trans-unit>
        <trans-unit id="d4894011e9b416e24cf4f9f064f29c68ac3eac26" translate="yes" xml:space="preserve">
          <source>Installing a listener using this symbol does not change the behavior once an &lt;code&gt;'error'&lt;/code&gt; event is emitted, therefore the process will still crash if no regular &lt;code&gt;'error'&lt;/code&gt; listener is installed.</source>
          <target state="translated">Installing a listener using this symbol does not change the behavior once an &lt;code&gt;'error'&lt;/code&gt; event is emitted, therefore the process will still crash if no regular &lt;code&gt;'error'&lt;/code&gt; listener is installed.</target>
        </trans-unit>
        <trans-unit id="31e83acb3d25252952bd8f79f736885ae0f9595f" translate="yes" xml:space="preserve">
          <source>Installing an &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; listener does not change the behavior once an &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted. The process will still crash if no &lt;code&gt;'uncaughtException'&lt;/code&gt; listener is installed.</source>
          <target state="translated">Installing an &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; listener does not change the behavior once an &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted. The process will still crash if no &lt;code&gt;'uncaughtException'&lt;/code&gt; listener is installed.</target>
        </trans-unit>
        <trans-unit id="a0cf2d5cc76825e10c97a10dd59da6837fcc0666" translate="yes" xml:space="preserve">
          <source>Installing async hooks via &lt;code&gt;async_hooks.createHook&lt;/code&gt; enables promise execution tracking:</source>
          <target state="translated">&lt;code&gt;async_hooks.createHook&lt;/code&gt; を介して非同期フックをインストールすると、promiseの実行追跡が可能になります。</target>
        </trans-unit>
        <trans-unit id="0ffd36feafce2d27574b6db79c98b71558f382af" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; support automatic completion of inputs, completion preview, simplistic Emacs-style line editing, multi-line inputs, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;-like reverse-i-search, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;-like substring-based history search, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions. Terminals that do not support ANSI styles and Emacs-style line editing automatically fall back to a limited feature set.</source>
          <target state="translated">Instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt; support automatic completion of inputs, completion preview, simplistic Emacs-style line editing, multi-line inputs, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;-like reverse-i-search, &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;-like substring-based history search, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions. Terminals that do not support ANSI styles and Emacs-style line editing automatically fall back to a limited feature set.</target>
        </trans-unit>
        <trans-unit id="5458ffc182cdf6836a16e2f16d8f4bd6d79f5c4e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; support automatic completion of inputs, simplistic Emacs-style line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions.</source>
          <target state="translated">&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;インスタンスは、入力の自動補完、単純なEmacsスタイルの行編集、複数行の入力、ANSIスタイルの出力、現在のREPLセッション状態の保存と復元、エラー回復、およびカスタマイズ可能な評価関数をサポートします。</target>
        </trans-unit>
        <trans-unit id="94f06ec883aef342f5e087d10776f74fac5e8140" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;BroadcastChannel&lt;/code&gt; allow asynchronous one-to-many communication with all other &lt;code&gt;BroadcastChannel&lt;/code&gt; instances bound to the same channel name.</source>
          <target state="translated">インスタンス &lt;code&gt;BroadcastChannel&lt;/code&gt; は、他のすべての非同期1対多の通信が可能 &lt;code&gt;BroadcastChannel&lt;/code&gt; の同じチャンネル名にバインドされたインスタンスを。</target>
        </trans-unit>
        <trans-unit id="b89a320c3f62e6b6ba8e85b021337befc0641078" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;ChildProcess&lt;/code&gt; are not intended to be created directly. Rather, use the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; methods to create instances of &lt;code&gt;ChildProcess&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ChildProcess&lt;/code&gt; のインスタンスは、直接作成するためのものではありません。代わりに、&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;ChildProcess&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="db1b65a0d3c2528e965754146fd9d0a86600f551" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Duplex&lt;/code&gt; now return &lt;code&gt;true&lt;/code&gt; when checking &lt;code&gt;instanceof stream.Writable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Duplex&lt;/code&gt; のインスタンスは、 &lt;code&gt;instanceof stream.Writable&lt;/code&gt; をチェックするときに &lt;code&gt;true&lt;/code&gt; を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="8fdd2c2c9379faa14d448a471b59a6faffffb1ed" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Http2SecureServer&lt;/code&gt; are created using the &lt;code&gt;http2.createSecureServer()&lt;/code&gt; function. The &lt;code&gt;Http2SecureServer&lt;/code&gt; class is not exported directly by the &lt;code&gt;http2&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Http2SecureServer&lt;/code&gt; のインスタンスは、 &lt;code&gt;http2.createSecureServer()&lt;/code&gt; 関数を使用して作成されます。 &lt;code&gt;Http2SecureServer&lt;/code&gt; クラスはによって直接エクスポートされません &lt;code&gt;http2&lt;/code&gt; モジュール。</target>
        </trans-unit>
        <trans-unit id="e618cc6bee9611e42d99ee69ae677154195e8043" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Http2Server&lt;/code&gt; are created using the &lt;code&gt;http2.createServer()&lt;/code&gt; function. The &lt;code&gt;Http2Server&lt;/code&gt; class is not exported directly by the &lt;code&gt;http2&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Http2Server&lt;/code&gt; のインスタンスは、 &lt;code&gt;http2.createServer()&lt;/code&gt; 関数を使用して作成されます。 &lt;code&gt;Http2Server&lt;/code&gt; クラスはによって直接エクスポートされません &lt;code&gt;http2&lt;/code&gt; モジュール。</target>
        </trans-unit>
        <trans-unit id="800ee83c789ca3173d0e98447fc49ae8f796f1ae" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;fs.ReadStream&lt;/code&gt; are created and returned using the &lt;a href=&quot;#fs_fs_createreadstream_path_options&quot;&gt;&lt;code&gt;fs.createReadStream()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Instances of &lt;code&gt;fs.ReadStream&lt;/code&gt; are created and returned using the &lt;a href=&quot;#fs_fs_createreadstream_path_options&quot;&gt; &lt;code&gt;fs.createReadStream()&lt;/code&gt; &lt;/a&gt; function.</target>
        </trans-unit>
        <trans-unit id="7adf135f2541749ab0e6b0d183f3e69d29f0948e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;fs.WriteStream&lt;/code&gt; are created and returned using the &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Instances of &lt;code&gt;fs.WriteStream&lt;/code&gt; are created and returned using the &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt; function.</target>
        </trans-unit>
        <trans-unit id="369f68f902069850f471888346c26c220953855e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;repl.REPLServer&lt;/code&gt; are created using the &lt;a href=&quot;#repl_repl_start_options&quot;&gt;&lt;code&gt;repl.start()&lt;/code&gt;&lt;/a&gt; method or directly using the JavaScript &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">Instances of &lt;code&gt;repl.REPLServer&lt;/code&gt; are created using the &lt;a href=&quot;#repl_repl_start_options&quot;&gt; &lt;code&gt;repl.start()&lt;/code&gt; &lt;/a&gt; method or directly using the JavaScript &lt;code&gt;new&lt;/code&gt; keyword.</target>
        </trans-unit>
        <trans-unit id="c931f1541982a4495922666b7b5bc642601cc990" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;tls.TLSSocket&lt;/code&gt; implement the duplex &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; interface.</source>
          <target state="translated">&lt;code&gt;tls.TLSSocket&lt;/code&gt; のインスタンスは、二重&lt;a href=&quot;stream#stream_stream&quot;&gt;ストリーム&lt;/a&gt;インターフェイスを実装します。</target>
        </trans-unit>
        <trans-unit id="35783666b090e1bcb188e0ff52ae2b546eb2a159" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Buffer&lt;/code&gt; class are similar to arrays of integers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; (other integers are coerced to this range by &lt;code&gt;&amp;amp; 255&lt;/code&gt; operation) but correspond to fixed-sized, raw memory allocations outside the V8 heap. The size of the &lt;code&gt;Buffer&lt;/code&gt; is established when it is created and cannot be changed.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; クラスのインスタンスは、 &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;255&lt;/code&gt; の整数の配列に似ています（他の整数は &lt;code&gt;&amp;amp; 255&lt;/code&gt; 演算によってこの範囲に強制変換されます）が、V8ヒープ外の固定サイズのrawメモリ割り当てに対応しています。 &lt;code&gt;Buffer&lt;/code&gt; のサイズは、作成時に設定され、変更できません。</target>
        </trans-unit>
        <trans-unit id="dffd1ef53587360af9f4e464d4d5cf73ae045da0" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Certificate&lt;/code&gt; class can be created using the &lt;code&gt;new&lt;/code&gt; keyword or by calling &lt;code&gt;crypto.Certificate()&lt;/code&gt; as a function:</source>
          <target state="translated">&lt;code&gt;Certificate&lt;/code&gt; クラスのインスタンスは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用するか、関数として &lt;code&gt;crypto.Certificate()&lt;/code&gt; を呼び出すことで作成できます。</target>
        </trans-unit>
        <trans-unit id="1a67f7f0229202a5e0c59ed378df4ef19e04cdd1" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ChildProcess&lt;/code&gt; class are &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitters&lt;/code&gt;&lt;/a&gt; that represent spawned child processes.</source>
          <target state="translated">&lt;code&gt;ChildProcess&lt;/code&gt; クラスのインスタンスは、生成された子プロセスを表す&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitters&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9da9ac1fe02f8599e055e564d64abc742cf4f4a5" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ChildProcess&lt;/code&gt; represent spawned child processes.</source>
          <target state="translated">Instances of the &lt;code&gt;ChildProcess&lt;/code&gt; represent spawned child processes.</target>
        </trans-unit>
        <trans-unit id="e0cc93f3328ea5a0a0adcec2dba75fe3d0516e6a" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Cipher&lt;/code&gt; class are used to encrypt data. The class can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; クラスのインスタンスは、データの暗号化に使用されます。クラスは、次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="adadf4a8671dae9115a1b4925ff5480625d42ff5" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Decipher&lt;/code&gt; class are used to decrypt data. The class can be used in one of two ways:</source>
          <target state="translated">&lt;code&gt;Decipher&lt;/code&gt; クラスのインスタンスは、データを復号化するために使用されます。クラスは、次の2つの方法のいずれかで使用できます。</target>
        </trans-unit>
        <trans-unit id="c29738f83796b77d7a2afe6dfa6aa91432202d54" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;DiffieHellman&lt;/code&gt; class can be created using the &lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt;&lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;DiffieHellman&lt;/code&gt; クラスのインスタンスは、crypto.createDiffieHellman &lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt; &lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt; &lt;/a&gt;関数を使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="06629143118ba183c91662524da3d6583f95f245" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ECDH&lt;/code&gt; class can be created using the &lt;a href=&quot;#crypto_crypto_createecdh_curvename&quot;&gt;&lt;code&gt;crypto.createECDH()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;ECDH&lt;/code&gt; クラスのインスタンスは、&lt;a href=&quot;#crypto_crypto_createecdh_curvename&quot;&gt; &lt;code&gt;crypto.createECDH()&lt;/code&gt; &lt;/a&gt;関数を使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="e19a3efe923bf85bc8b05ac0272473f4501716f9" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;FileHandle&lt;/code&gt; object are created internally by the &lt;code&gt;fsPromises.open()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;FileHandle&lt;/code&gt; オブジェクトのインスタンスは、 &lt;code&gt;fsPromises.open()&lt;/code&gt; メソッドによって内部的に作成されます。</target>
        </trans-unit>
        <trans-unit id="af20962e987f76605ebbac474846e378dc9efb59" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;http2.Http2Session&lt;/code&gt; class represent an active communications session between an HTTP/2 client and server. Instances of this class are &lt;em&gt;not&lt;/em&gt; intended to be constructed directly by user code.</source>
          <target state="translated">&lt;code&gt;http2.Http2Session&lt;/code&gt; クラスのインスタンスは、HTTP / 2クライアントとサーバー間のアクティブな通信セッションを表します。このクラスのインスタンスは、ユーザーコードによって直接構築されることを意図して&lt;em&gt;いません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="432d12dcbaa96cbcfdc7739ae3abf129c909c6a7" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;readline.Interface&lt;/code&gt; class are constructed using the &lt;code&gt;readline.createInterface()&lt;/code&gt; method. Every instance is associated with a single &lt;code&gt;input&lt;/code&gt;&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream and a single &lt;code&gt;output&lt;/code&gt;&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream. The &lt;code&gt;output&lt;/code&gt; stream is used to print prompts for user input that arrives on, and is read from, the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;readline.Interface&lt;/code&gt; クラスのインスタンスは、readline.createInterface &lt;code&gt;readline.createInterface()&lt;/code&gt; メソッドを使用して構築されます。すべてのインスタンスは、1つの &lt;code&gt;input&lt;/code&gt; &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt;ストリームと1つの &lt;code&gt;output&lt;/code&gt; &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt;ストリームに関連付けられています。 &lt;code&gt;output&lt;/code&gt; ストリームは、上の到着ユーザ入力のためのプロンプトを印刷するために使用され、そして、から読み出され &lt;code&gt;input&lt;/code&gt; ストリーム。</target>
        </trans-unit>
        <trans-unit id="298dfc9afa41ab353b24ce154f8859bd24d0afe2" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;vm.Script&lt;/code&gt; class contain precompiled scripts that can be executed in specific contexts.</source>
          <target state="translated">Instances of the &lt;code&gt;vm.Script&lt;/code&gt; class contain precompiled scripts that can be executed in specific contexts.</target>
        </trans-unit>
        <trans-unit id="c0a8dd21a7c8c59429281b201339a2209dc5cdab" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;vm.Script&lt;/code&gt; class contain precompiled scripts that can be executed in specific sandboxes (or &quot;contexts&quot;).</source>
          <target state="translated">&lt;code&gt;vm.Script&lt;/code&gt; クラスのインスタンスには、特定のサンドボックス（または「コンテキスト」）で実行できるプリコンパイル済みスクリプトが含まれています。</target>
        </trans-unit>
        <trans-unit id="ce65dd9273ad652d638f34de4134789c3e16e945" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;worker.MessageChannel&lt;/code&gt; class represent an asynchronous, two-way communications channel. The &lt;code&gt;MessageChannel&lt;/code&gt; has no methods of its own. &lt;code&gt;new MessageChannel()&lt;/code&gt; yields an object with &lt;code&gt;port1&lt;/code&gt; and &lt;code&gt;port2&lt;/code&gt; properties, which refer to linked &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">&lt;code&gt;worker.MessageChannel&lt;/code&gt; クラスのインスタンスは、非同期の双方向通信チャネルを表します。 &lt;code&gt;MessageChannel&lt;/code&gt; は、自分自身のメソッドを持っていません。 &lt;code&gt;new MessageChannel()&lt;/code&gt; は、リンクされた&lt;a href=&quot;#worker_threads_class_messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;インスタンスを参照する、 &lt;code&gt;port1&lt;/code&gt; および &lt;code&gt;port2&lt;/code&gt; プロパティを持つオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="7a38e81654aa75e50f8ac4a46d3a4444cd9d971f" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;worker.MessagePort&lt;/code&gt; class represent one end of an asynchronous, two-way communications channel. It can be used to transfer structured data, memory regions and other &lt;code&gt;MessagePort&lt;/code&gt;s between different &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;code&gt;worker.MessagePort&lt;/code&gt; クラスのインスタンスは、非同期の双方向通信チャネルの一端を表します。異なる&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;間で構造化データ、メモリ領域、およびその他の &lt;code&gt;MessagePort&lt;/code&gt; を転送するために使用できます。</target>
        </trans-unit>
        <trans-unit id="81720bda68cbd9e127cd631462f662a8bd1e1fa9" translate="yes" xml:space="preserve">
          <source>Instances of this class can now be passed to worker threads using &lt;code&gt;postMessage&lt;/code&gt;.</source>
          <target state="translated">Instances of this class can now be passed to worker threads using &lt;code&gt;postMessage&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c676be9a0fcb70600a6d6a66e1bc4fb7d9ad4219" translate="yes" xml:space="preserve">
          <source>Instantiate a new &lt;code&gt;URLSearchParams&lt;/code&gt; object with a query hash map. The key and value of each property of &lt;code&gt;obj&lt;/code&gt; are always coerced to strings.</source>
          <target state="translated">クエリハッシュマップを使用して、新しい &lt;code&gt;URLSearchParams&lt;/code&gt; オブジェクトをインスタンス化します。 &lt;code&gt;obj&lt;/code&gt; の各プロパティのキーと値は、常に文字列に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="65181063e2280876fa3f8f363ffe435314f6a6cc" translate="yes" xml:space="preserve">
          <source>Instantiate a new &lt;code&gt;URLSearchParams&lt;/code&gt; object with an iterable map in a way that is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;'s constructor. &lt;code&gt;iterable&lt;/code&gt; can be an &lt;code&gt;Array&lt;/code&gt; or any iterable object. That means &lt;code&gt;iterable&lt;/code&gt; can be another &lt;code&gt;URLSearchParams&lt;/code&gt;, in which case the constructor will simply create a clone of the provided &lt;code&gt;URLSearchParams&lt;/code&gt;. Elements of &lt;code&gt;iterable&lt;/code&gt; are key-value pairs, and can themselves be any iterable object.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;のコンストラクタと同様の方法で、新しい &lt;code&gt;URLSearchParams&lt;/code&gt; オブジェクトを反復可能なマップでインスタンス化します。 &lt;code&gt;iterable&lt;/code&gt; は、 &lt;code&gt;Array&lt;/code&gt; または任意の反復可能なオブジェクトです。つまり、 &lt;code&gt;iterable&lt;/code&gt; は別の &lt;code&gt;URLSearchParams&lt;/code&gt; でもかまいません。その場合、コンストラクターは指定された &lt;code&gt;URLSearchParams&lt;/code&gt; のクローンを作成するだけです。 &lt;code&gt;iterable&lt;/code&gt; の要素はキーと値のペアであり、それ自体が任意の反復可能なオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="7fc82e9b73a75737421b7fc3a88c424c1b841dee" translate="yes" xml:space="preserve">
          <source>Instantiate a new empty &lt;code&gt;URLSearchParams&lt;/code&gt; object.</source>
          <target state="translated">新しい空の &lt;code&gt;URLSearchParams&lt;/code&gt; オブジェクトをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="b21c73c2d5f688055cfa8ed255e3120b2cccea8d" translate="yes" xml:space="preserve">
          <source>Instantiate the module. This must be called after linking has completed (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linked'&lt;/code&gt;); otherwise it will throw an error. It may also throw an exception if one of the dependencies does not provide an export the parent module requires.</source>
          <target state="translated">モジュールをインスタンス化します。これは、リンクが完了した後に呼び出す必要があります（ &lt;code&gt;linkingStatus&lt;/code&gt; は &lt;code&gt;'linked'&lt;/code&gt; です）。そうしないと、エラーがスローされます。依存関係の1つが親モジュールが必要とするエクスポートを提供しない場合も、例外をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="fed39324e841d37c87d9ceaf44bcca4c8c9a4e11" translate="yes" xml:space="preserve">
          <source>Instead of throwing the original error it is now wrapped into an &lt;code&gt;AssertionError&lt;/code&gt; that contains the full stack trace.</source>
          <target state="translated">元のエラーをスローする代わりに、完全なスタックトレースを含む &lt;code&gt;AssertionError&lt;/code&gt; にラップされるようになりました。</target>
        </trans-unit>
        <trans-unit id="5459a160eefe5077e9724d4e48b8c8d75dd07d82" translate="yes" xml:space="preserve">
          <source>Instead of throwing the original error it is now wrapped into an [&lt;code&gt;AssertionError&lt;/code&gt;][] that contains the full stack trace.</source>
          <target state="translated">Instead of throwing the original error it is now wrapped into an [ &lt;code&gt;AssertionError&lt;/code&gt; ][] that contains the full stack trace.</target>
        </trans-unit>
        <trans-unit id="f3cda84a60945615fb5594f83f4b9f44393ad1ff" translate="yes" xml:space="preserve">
          <source>Instead of using a &lt;code&gt;QuicStream&lt;/code&gt; as a writable stream, send data from a given file descriptor.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; を書き込み可能なストリームとして使用する代わりに、特定のファイル記述子からデータを送信します。</target>
        </trans-unit>
        <trans-unit id="3ef6a163e5f0bd526a7fec7052379ef22cd69ad0" translate="yes" xml:space="preserve">
          <source>Instead of using a &lt;code&gt;QuicStream&lt;/code&gt; as a writable stream, send data from a given file path.</source>
          <target state="translated">&lt;code&gt;QuicStream&lt;/code&gt; を書き込み可能なストリームとして使用する代わりに、指定されたファイルパスからデータを送信します。</target>
        </trans-unit>
        <trans-unit id="30efab8410e00da41af04eba4012009dd72d227b" translate="yes" xml:space="preserve">
          <source>Instead, use direct &lt;a href=&quot;#packages_subpath_patterns&quot;&gt;subpath patterns&lt;/a&gt;:</source>
          <target state="translated">代わりに、直接&lt;a href=&quot;#packages_subpath_patterns&quot;&gt;サブパスパターンを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="0886c0750f47c6c020e0212835b6e14e09f31e83" translate="yes" xml:space="preserve">
          <source>Instruct &lt;code&gt;require&lt;/code&gt; on how to handle certain file extensions.</source>
          <target state="translated">特定のファイル拡張子の処理方法を &lt;code&gt;require&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="c063ff3cdde65053663a7873bf8ab9bd399ef6b0" translate="yes" xml:space="preserve">
          <source>Instructs Node.js to error prior to running any code if the policy does not have the specified integrity. It expects a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;Subresource Integrity&lt;/a&gt; string as a parameter.</source>
          <target state="translated">ポリシーに指定された整合性がない場合、コードを実行する前にエラーが発生するようにNode.jsに指示します。パラメータとして&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;サブリソース整合性&lt;/a&gt;文字列が必要です。</target>
        </trans-unit>
        <trans-unit id="d0b00d1feef65ce7e33d04d315b5601124b9350a" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL server to prioritize ChaCha20Poly1305 when client does. This option has no effect if &lt;code&gt;SSL_OP_CIPHER_SERVER_PREFERENCE&lt;/code&gt; is not enabled.</source>
          <target state="translated">Instructs OpenSSL server to prioritize ChaCha20Poly1305 when client does. This option has no effect if &lt;code&gt;SSL_OP_CIPHER_SERVER_PREFERENCE&lt;/code&gt; is not enabled.</target>
        </trans-unit>
        <trans-unit id="0b2c85f8a9e409e60a7c57bb3a6180c6a74b488d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft.</source>
          <target state="translated">OpenSSL に、初期バージョンの cryptopro ドラフトから server-hello 拡張を追加するように指示します。</target>
        </trans-unit>
        <trans-unit id="be2960d676515f73072f7067706d825293617492" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to allow a non-[EC]DHE-based key exchange mode for TLS v1.3</source>
          <target state="translated">TLS v1.3 で非[EC]DHE ベースの鍵交換モードを許可するよう OpenSSL に指示</target>
        </trans-unit>
        <trans-unit id="ac6c05112a017d47310f296b0041f44b75da5a87" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters.</source>
          <target state="translated">一時的な/エフェメラルDHパラメータを使用する場合、OpenSSLが常に新しい鍵を作成するように指示します。</target>
        </trans-unit>
        <trans-unit id="546f5bbe97ae294c8fc5e687dae9f83654f746e8" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters.</source>
          <target state="translated">OpenSSL が一時的/エフェメラル ECDH パラメータを使用する際には、常に新しい鍵を作成するように指示しました。</target>
        </trans-unit>
        <trans-unit id="ac0311c08a3469b8d71f9d3883a3fe4a8bf94820" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always start a new session when performing renegotiation.</source>
          <target state="translated">OpenSSL が再ネゴシエーションを行う際には、常に新しいセッションを開始するように指示します。</target>
        </trans-unit>
        <trans-unit id="ae7bb7ececabda2568352c90383393ed8f76fe08" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations.</source>
          <target state="translated">OpenSSL が RSA 演算を行う際に常に tmp_rsa キーを使用するように指示します。</target>
        </trans-unit>
        <trans-unit id="caca42fad826dd949c6335a63c6ceb14c18ab473" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d.</source>
          <target state="translated">OpenSSL 0.9.6d で追加された SSL 3.0/TLS 1.0 の脆弱性の回避策を無効にするよう OpenSSL に指示します。</target>
        </trans-unit>
        <trans-unit id="70a5fa003ee5c03ab6047780d6a1756112249d54" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable encrypt-then-MAC.</source>
          <target state="translated">OpenSSL に encrypt-then-MAC を無効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="b66cff55ed33dd0619fafbee8f2c1a8844db9d45" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable renegotiation.</source>
          <target state="translated">OpenSSL にリネゴシエーションを無効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="23867858cda445617e031433f5f870ccca19e39d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable support for SSL/TLS compression.</source>
          <target state="translated">OpenSSL に SSL/TLS 圧縮のサポートを無効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="0b25ca4b0affb115218bbc6dc9c81460963a1551" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation.</source>
          <target state="translated">SSL 2.0 サーバの実装にある man-in-the-middle プロトコルバージョンの脆弱性の回避策を無効にするよう OpenSSL に指示します。</target>
        </trans-unit>
        <trans-unit id="2165b961ee84bb34e7517631c063e2f2f98f243d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable use of RFC4507bis tickets.</source>
          <target state="translated">OpenSSL に RFC4507bis チケットの使用を無効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="608aeeeb5a40e2d41f521b3de5c1f59b365144e3" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable version rollback attack detection.</source>
          <target state="translated">OpenSSLにバージョンロールバック攻撃の検出を無効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="710ee28e0f7e59c4bcb18bce916c5f0f0d575362" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off SSL v2</source>
          <target state="translated">OpenSSLにSSL v2をオフにするように指示します。</target>
        </trans-unit>
        <trans-unit id="4a26e814f5c329c70cc5bbf34635600b0166e139" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off SSL v3</source>
          <target state="translated">OpenSSLにSSL v3をオフにするように指示します。</target>
        </trans-unit>
        <trans-unit id="80de102aad3b8873aa476d2f44620c3de39d7a90" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1</source>
          <target state="translated">OpenSSL に TLS v1 をオフにするように指示します。</target>
        </trans-unit>
        <trans-unit id="0e08471820c4afa43946e65eac375fcd772422b3" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.1</source>
          <target state="translated">OpenSSLにTLS v1.1をオフにするように指示します。</target>
        </trans-unit>
        <trans-unit id="55e7bd4f680213d3fc1d7f9ebf87e0706ef0e930" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.2</source>
          <target state="translated">OpenSSLにTLS v1.2をオフにするように指示します。</target>
        </trans-unit>
        <trans-unit id="d2577ea31fe29df8d4ee86b2f8d05d0b4c6ee9a7" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.3</source>
          <target state="translated">OpenSSLにTLS v1.3をオフにするように指示します。</target>
        </trans-unit>
        <trans-unit id="dfbab4e09330ea425ca00047c6c5baf5232c6ce4" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn on cookie exchange.</source>
          <target state="translated">OpenSSLにクッキー交換を有効にするように指示します。</target>
        </trans-unit>
        <trans-unit id="1e82de46cebb9eab62329940282272bfd3ba678a" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to use Cisco's &quot;speshul&quot; version of DTLS_BAD_VER.</source>
          <target state="translated">OpenSSL に Cisco の &quot;speshul&quot; バージョンの DTLS_BAD_VER を使用するように指示します。</target>
        </trans-unit>
        <trans-unit id="75031cb337e0583a13d4c7be4edb3e048cfc6d63" translate="yes" xml:space="preserve">
          <source>Instructs the kernel to leave a multicast group at &lt;code&gt;multicastAddress&lt;/code&gt; using the &lt;code&gt;IP_DROP_MEMBERSHIP&lt;/code&gt; socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</source>
          <target state="translated">でマルチキャストグループを離れるためにカーネルに指示 &lt;code&gt;multicastAddress&lt;/code&gt; 使用 &lt;code&gt;IP_DROP_MEMBERSHIP&lt;/code&gt; のソケットオプションを。このメソッドは、ソケットが閉じられるかプロセスが終了するとカーネルによって自動的に呼び出されるため、ほとんどのアプリはこれを呼び出す理由がありません。</target>
        </trans-unit>
        <trans-unit id="81933be106e68779eab34fb4514049a58d52563f" translate="yes" xml:space="preserve">
          <source>Instructs the kernel to leave a source-specific multicast channel at the given &lt;code&gt;sourceAddress&lt;/code&gt; and &lt;code&gt;groupAddress&lt;/code&gt; using the &lt;code&gt;IP_DROP_SOURCE_MEMBERSHIP&lt;/code&gt; socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</source>
          <target state="translated">Instructs the kernel to leave a source-specific multicast channel at the given &lt;code&gt;sourceAddress&lt;/code&gt; and &lt;code&gt;groupAddress&lt;/code&gt; using the &lt;code&gt;IP_DROP_SOURCE_MEMBERSHIP&lt;/code&gt; socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</target>
        </trans-unit>
        <trans-unit id="1144c6f61e59c74db28b6c4b9401d09107634752" translate="yes" xml:space="preserve">
          <source>Instructs the module loader to preserve symbolic links when resolving and caching modules.</source>
          <target state="translated">モジュールを解決してキャッシュする際にシンボリックリンクを保持するようにモジュールローダに指示します。</target>
        </trans-unit>
        <trans-unit id="6870fb28c403ee5eb0f8b0e36861a73965d25e9a" translate="yes" xml:space="preserve">
          <source>Instructs the module loader to preserve symbolic links when resolving and caching the main module (&lt;code&gt;require.main&lt;/code&gt;).</source>
          <target state="translated">メインモジュール（ &lt;code&gt;require.main&lt;/code&gt; ）を解決してキャッシュするときにシンボリックリンクを保持するようモジュールローダーに指示します。</target>
        </trans-unit>
        <trans-unit id="8402b4a029cc3b4cbc3fef404091dc1447dc7b5c" translate="yes" xml:space="preserve">
          <source>Integer value representing the expected input size; defaults to &lt;code&gt;0&lt;/code&gt; for an unknown input size.</source>
          <target state="translated">予想される入力サイズを表す整数値。不明な入力サイズの場合、デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="99ab494ded4d235df6eccb37568024a22d56ee79" translate="yes" xml:space="preserve">
          <source>Integer-Indexed: an index value represented by &lt;code&gt;uint32_t&lt;/code&gt;</source>
          <target state="translated">整数インデックス： &lt;code&gt;uint32_t&lt;/code&gt; で表されるインデックス値</target>
        </trans-unit>
        <trans-unit id="81bd3b466b0034894173f99f33ef569af480be3a" translate="yes" xml:space="preserve">
          <source>Integers read from a &lt;code&gt;Buffer&lt;/code&gt; are interpreted as two's complement signed values.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; から読み込まれた整数は、2の補数の符号付き値として解釈されます。</target>
        </trans-unit>
        <trans-unit id="b05fe054d228b76470ec56b7184d0bc99d39e7ba" translate="yes" xml:space="preserve">
          <source>Integral status code indicating the success or failure of a N-API call. Currently, the following status codes are supported.</source>
          <target state="translated">N-API コールの成功または失敗を示す統合ステータスコード。現在、以下のステータスコードがサポートされています。</target>
        </trans-unit>
        <trans-unit id="d3e304cd07b5bd6c7b426830429c14bc2b356ec5" translate="yes" xml:space="preserve">
          <source>Integrating &lt;code&gt;AsyncResource&lt;/code&gt; with &lt;code&gt;EventEmitter&lt;/code&gt;</source>
          <target state="translated">Integrating &lt;code&gt;AsyncResource&lt;/code&gt; with &lt;code&gt;EventEmitter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b62f41c12ee066d13d5c86a1257925ad8861703" translate="yes" xml:space="preserve">
          <source>Integrity Checks</source>
          <target state="translated">完全性のチェック</target>
        </trans-unit>
        <trans-unit id="4cb5b39c0f8028f339c4e3a11a09d7b24bb24591" translate="yes" xml:space="preserve">
          <source>Integrity can be specified as the boolean value &lt;code&gt;true&lt;/code&gt; to accept any body for the resource which can be useful for local development. It is not recommended in production since it would allow unexpected alteration of resources to be considered valid.</source>
          <target state="translated">整合性をブール値 &lt;code&gt;true&lt;/code&gt; として指定して、ローカル開発に役立つリソースの任意のボディを受け入れることができます。リソースの予期しない変更が有効と見なされる可能性があるため、本番環境では推奨されません。</target>
        </trans-unit>
        <trans-unit id="50c9e0c5e01735529d5358e6bf00aeb5fbddb67a" translate="yes" xml:space="preserve">
          <source>Integrity checks</source>
          <target state="translated">完全性チェック</target>
        </trans-unit>
        <trans-unit id="4cf43a800950dd777641442ca904838912bd822f" translate="yes" xml:space="preserve">
          <source>Integrity using scopes</source>
          <target state="translated">スコープを使った完全性</target>
        </trans-unit>
        <trans-unit id="3f7eed5af6d7877b3ba1d70d5214faa63dad25d2" translate="yes" xml:space="preserve">
          <source>Interaction with workers</source>
          <target state="translated">労働者との交流</target>
        </trans-unit>
        <trans-unit id="7b4db7ef1fa23cfb5e115a2a2c89d46a6a2ebc4a" translate="yes" xml:space="preserve">
          <source>Interface</source>
          <target state="translated">Interface</target>
        </trans-unit>
        <trans-unit id="23575f35a521e9c261d274ac4cb29c2f05b261ac" translate="yes" xml:space="preserve">
          <source>Internal Error</source>
          <target state="translated">内部エラー</target>
        </trans-unit>
        <trans-unit id="95533607b2195871cdd825109cced72868daaac4" translate="yes" xml:space="preserve">
          <source>Internal Node.js libraries. Node.js itself exports C++ APIs that addons can use, the most important of which is the &lt;code&gt;node::ObjectWrap&lt;/code&gt; class.</source>
          <target state="translated">Internal Node.js libraries. Node.js itself exports C++ APIs that addons can use, the most important of which is the &lt;code&gt;node::ObjectWrap&lt;/code&gt; class.</target>
        </trans-unit>
        <trans-unit id="be2832f2017b9feac348c32119b337871f7f79ff" translate="yes" xml:space="preserve">
          <source>Internal Node.js libraries. Node.js itself exports a number of C++ APIs that Addons can use &amp;mdash; the most important of which is the &lt;code&gt;node::ObjectWrap&lt;/code&gt; class.</source>
          <target state="translated">内部Node.jsライブラリ。Node.js自体は、アドオンが使用できるいくつかのC ++ APIをエクスポートします。最も重要なのは &lt;code&gt;node::ObjectWrap&lt;/code&gt; クラスです。</target>
        </trans-unit>
        <trans-unit id="5f4c2cebcc0952f7ae86ffbb2645ce54c5574178" translate="yes" xml:space="preserve">
          <source>Internal errors occur when an HTTP/2 session fails unexpectedly. These will be reported via an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;Http2Session&lt;/code&gt; or HTTP/2 Server objects.</source>
          <target state="translated">HTTP / 2セッションが予期せず失敗すると、内部エラーが発生します。これらは、 &lt;code&gt;Http2Session&lt;/code&gt; またはHTTP / 2サーバーオブジェクトの &lt;code&gt;'error'&lt;/code&gt; イベントを介して報告されます。</target>
        </trans-unit>
        <trans-unit id="ad90811f03e8bbaf83a345f7229936551486b928" translate="yes" xml:space="preserve">
          <source>Internal properties no longer appear in the context argument of a custom inspection function.</source>
          <target state="translated">内部プロパティがカスタム検査関数のコンテキスト引数に表示されなくなりました。</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="845202ae0fe1a669c29ddc90a5436534b580fc96" translate="yes" xml:space="preserve">
          <source>Internationalization Support</source>
          <target state="translated">国際化支援</target>
        </trans-unit>
        <trans-unit id="4de73a3f1e6b5deccf35f9983157dd29155946aa" translate="yes" xml:space="preserve">
          <source>Internationalization support</source>
          <target state="translated">国際化支援</target>
        </trans-unit>
        <trans-unit id="f1c74da0c6c57362d1086bc64d6d9a5389c76829" translate="yes" xml:space="preserve">
          <source>Interoperability with CommonJS</source>
          <target state="translated">CommonJSとの相互運用性</target>
        </trans-unit>
        <trans-unit id="1f06c6ea3387d2dd0326bd91120a11c32eb42186" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of 64-bit numbers and swaps byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 8.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; を64ビットの数値の配列として解釈し、バイト順&lt;em&gt;をインプレースで&lt;/em&gt;スワップします。例外&lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt; &lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt; が&lt;/a&gt;あれば&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; は&lt;/a&gt; 8の倍数ではありません。</target>
        </trans-unit>
        <trans-unit id="e3f37cf37971ac698f0307a0849c4d8a45eaa91f" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of unsigned 16-bit integers and swaps the byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 2.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; を符号なし16ビット整数の配列として解釈し、バイト順&lt;em&gt;をインプレースで&lt;/em&gt;スワップします。例外&lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt; &lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt; が&lt;/a&gt;あれば&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; は&lt;/a&gt; 2の倍数ではありません。</target>
        </trans-unit>
        <trans-unit id="d8b8e329633284e96f9adb1691da632260f2b83b" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of unsigned 32-bit integers and swaps the byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 4.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; を符号なし32ビット整数の配列として解釈し、バイトオーダー&lt;em&gt;をインプレースで&lt;/em&gt;スワップします。例外&lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt; &lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt; が&lt;/a&gt;あれば&lt;a href=&quot;#buffer_buf_length&quot;&gt; &lt;code&gt;buf.length&lt;/code&gt; は&lt;/a&gt; 4の倍数ではありません。</target>
        </trans-unit>
        <trans-unit id="c616a96a3aadb87c9d82ce10c8373a85d56ea758" translate="yes" xml:space="preserve">
          <source>Introduce &lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;code&gt;package.json&lt;/code&gt; field as a more powerful alternative to the classic &lt;code&gt;&quot;main&quot;&lt;/code&gt; field.</source>
          <target state="translated">従来の &lt;code&gt;&quot;main&quot;&lt;/code&gt; フィールドのより強力な代替手段として、 &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; フィールドを導入します。</target>
        </trans-unit>
        <trans-unit id="2c495326cbec001dafeaa0da9ab820a10bbe892f" translate="yes" xml:space="preserve">
          <source>Introduced &lt;code&gt;latin1&lt;/code&gt; as an alias for &lt;code&gt;binary&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary&lt;/code&gt; のエイリアスとして &lt;code&gt;latin1&lt;/code&gt; を導入しました。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="e9c92f0c550f88b8f940f3db1e7343ac28f0092f" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;hash&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; プロパティに割り当てられた値に含まれる無効なURL文字は、&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;パーセントエンコードされてい&lt;/a&gt;ます。パーセントエンコードする文字の選択は、&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;メソッドが生成するものと多少異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="1629e5ff15506fca0875d4572b9feec31e969dc3" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;password&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">&lt;code&gt;password&lt;/code&gt; プロパティに割り当てられた値に含まれる無効なURL文字は、&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;パーセントエンコードされてい&lt;/a&gt;ます。パーセントエンコードする文字の選択は、&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;メソッドが生成するものと多少異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="08d09dda66848238d39695ce4a7fee107a1aaf1b" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;pathname&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; プロパティに割り当てられた値に含まれる無効なURL文字は、&lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;パーセントエンコードされてい&lt;/a&gt;ます。パーセントエンコードする文字の選択は、&lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt; &lt;code&gt;url.parse()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_format_urlobject&quot;&gt; &lt;code&gt;url.format()&lt;/code&gt; &lt;/a&gt;メソッドが生成するものと多少異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="65f72a935bbcf546bea987da823f35b5a5e27db6" translate="yes" xml:space="preserve">
          <source>Invalid URL protocol values assigned to the &lt;code&gt;protocol&lt;/code&gt; property are ignored.</source>
          <target state="translated">&lt;code&gt;protocol&lt;/code&gt; プロパティに割り当てられた無効なURLプロトコル値は無視されます。</target>
        </trans-unit>
        <trans-unit id="738d6832032229b051ea3b4a368aee59f1757724" translate="yes" xml:space="preserve">
          <source>Invalid character handling in header names and values</source>
          <target state="translated">ヘッダ名と値での無効な文字処理</target>
        </trans-unit>
        <trans-unit id="fe947aa91a35f6be8f5dcea115d7f1b3523381d5" translate="yes" xml:space="preserve">
          <source>Invalid characters were detected in headers.</source>
          <target state="translated">ヘッダに無効な文字が検出されました。</target>
        </trans-unit>
        <trans-unit id="80cb8ebdce9f68d51276352fdbb4b36363df747a" translate="yes" xml:space="preserve">
          <source>Invalid host name values assigned to the &lt;code&gt;hostname&lt;/code&gt; property are ignored.</source>
          <target state="translated">Invalid host name values assigned to the &lt;code&gt;hostname&lt;/code&gt; property are ignored.</target>
        </trans-unit>
        <trans-unit id="52cbfcf6f98b93d30c926a6b1749b607fc691744" translate="yes" xml:space="preserve">
          <source>Invalid host values assigned to the &lt;code&gt;host&lt;/code&gt; property are ignored.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; プロパティに割り当てられた無効なホスト値は無視されます。</target>
        </trans-unit>
        <trans-unit id="eae8e79a320be525fba1c1ca46fb7bf1f890b46f" translate="yes" xml:space="preserve">
          <source>Invalid hostname values assigned to the &lt;code&gt;hostname&lt;/code&gt; property are ignored.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; プロパティに割り当てられた無効なホスト名値は無視されます。</target>
        </trans-unit>
        <trans-unit id="13a2b99768c33644588f26fbb00fc22931cde509" translate="yes" xml:space="preserve">
          <source>Invalid scrypt algorithm parameters were provided.</source>
          <target state="translated">無効な scrypt アルゴリズムのパラメータが提供されました。</target>
        </trans-unit>
        <trans-unit id="248507b930ae47b7fe748fc4e5d1a8a49f58a393" translate="yes" xml:space="preserve">
          <source>Invalid value character error is identified by &lt;code&gt;code: 'ERR_INVALID_CHAR'&lt;/code&gt;.</source>
          <target state="translated">Invalid value character error is identified by &lt;code&gt;code: 'ERR_INVALID_CHAR'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d21c7370be790d52740a91b52fc49543cba6a787" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;stream#stream_writable_writablefinished&quot;&gt;&lt;code&gt;writable.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;が呼び出された後は &lt;code&gt;true&lt;/code&gt; です。このプロパティは、データがフラッシュされたかどうかを示しません。代わりに&lt;a href=&quot;stream#stream_writable_writablefinished&quot;&gt; &lt;code&gt;writable.writableFinished&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="d6ed934df555246f26c85f0b0c4eb07f81f3f242" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_request_destroy_error&quot;&gt;&lt;code&gt;request.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_request_destroy_error&quot;&gt; &lt;code&gt;request.destroy()&lt;/code&gt; &lt;/a&gt; has been called.</target>
        </trans-unit>
        <trans-unit id="6b8a83f3e29a618906de053b984b4116151588fe" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#http_request_writablefinished&quot;&gt;&lt;code&gt;request.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt;が呼び出された後は &lt;code&gt;true&lt;/code&gt; です。このプロパティは、データがフラッシュされたかどうかを示すのではなく、代わりにこの&lt;a href=&quot;#http_request_writablefinished&quot;&gt; &lt;code&gt;request.writableFinished&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="279811758f3fc49f9271db9de98d53ac59a3a35f" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;が呼び出された後は &lt;code&gt;true&lt;/code&gt; です。このプロパティは、データがフラッシュされたかどうかを示すのではなく、代わりに&lt;a href=&quot;#http_response_writablefinished&quot;&gt; &lt;code&gt;response.writableFinished&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="c457dffdf62810b5e0e74ea9f6901231788f1d26" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_readable_destroy_error&quot;&gt;&lt;code&gt;readable.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_destroy_error&quot;&gt; &lt;code&gt;readable.destroy()&lt;/code&gt; &lt;/a&gt;が呼び出された後は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="27ba9b336441c7b9636f805f2664a8b20332ff3a" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_writable_destroy_error&quot;&gt;&lt;code&gt;writable.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">&lt;a href=&quot;#stream_writable_destroy_error&quot;&gt; &lt;code&gt;writable.destroy()&lt;/code&gt; &lt;/a&gt;が呼び出された後は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8e457e44e34dbf6c98b053774a3a83b0eda0d06e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#stream_writable_writablefinished&quot;&gt;&lt;code&gt;writable.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;writable.end()&lt;/code&gt; &lt;/a&gt;が呼び出された後は &lt;code&gt;true&lt;/code&gt; です。このプロパティは、データがフラッシュされたかどうかを示しません。代わりに&lt;a href=&quot;#stream_writable_writablefinished&quot;&gt; &lt;code&gt;writable.writableFinished&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="50e07a05ea7df0d75d37b07ce707de336d4f493d" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;cancelable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; has been called.</source>
          <target state="translated">Is &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;cancelable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; has been called.</target>
        </trans-unit>
        <trans-unit id="447e18b05fa6d326f80492387bf46993194d011e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if all data has been flushed to the underlying system, immediately before the &lt;a href=&quot;#http_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">&lt;a href=&quot;#http_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;イベントが発行される直前に、すべてのデータが基本システムにフラッシュされている場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="03e591663a26db9a5ed21e408db60596066058fc" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt;, which means the stream has not been destroyed or emitted &lt;code&gt;'error'&lt;/code&gt; or &lt;code&gt;'end'&lt;/code&gt;.</source>
          <target state="translated">Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;readable.read()&lt;/code&gt; &lt;/a&gt;, which means the stream has not been destroyed or emitted &lt;code&gt;'error'&lt;/code&gt; or &lt;code&gt;'end'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e8d5a5a4a8431f9f64a806e5b6f385f45074325" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_read_size&quot;&gt; &lt;code&gt;readable.read()&lt;/code&gt; &lt;/a&gt;を呼び出しても安全な場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3b1e2c65bb71ef448544cac04896a09cce61abdd" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.write()&lt;/code&gt;&lt;/a&gt;, which means the stream has not been destroyed, errored or ended.</source>
          <target state="translated">Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;writable.write()&lt;/code&gt; &lt;/a&gt;, which means the stream has not been destroyed, errored or ended.</target>
        </trans-unit>
        <trans-unit id="4370f01d3c96b257612ae70204203ea0a8789809" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.write()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;writable.write()&lt;/code&gt; &lt;/a&gt;を呼び出しても安全な場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9cba112c3a24385e4a72e89be1c0898218a67a84" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if the stream's buffer has been full and stream will emit &lt;code&gt;'drain'&lt;/code&gt;.</source>
          <target state="translated">ストリームのバッファがいっぱいで、ストリームが &lt;code&gt;'drain'&lt;/code&gt; を放出する場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a54e2373de13c6357b66bf3b96598900cda4816e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if this code is not running inside of a &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread.</source>
          <target state="translated">このコードが&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッド内で実行されていない場合は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5ea282d632dfbf0003030b6293ca539ecda81b32" translate="yes" xml:space="preserve">
          <source>Is set to &lt;code&gt;true&lt;/code&gt; immediately before the &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_finish&quot;&gt; &lt;code&gt;'finish'&lt;/code&gt; &lt;/a&gt;イベントが発行される直前に &lt;code&gt;true&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="61932731dd9823ec43230a3d5c44c777698963c2" translate="yes" xml:space="preserve">
          <source>Isolate the state in one or more CommonJS files that are shared between the CommonJS and ES module versions of the package. For example, if the CommonJS and ES module entry points are &lt;code&gt;index.cjs&lt;/code&gt; and &lt;code&gt;index.mjs&lt;/code&gt;, respectively:</source>
          <target state="translated">パッケージのCommonJSモジュールバージョンとESモジュールバージョンの間で共有される1つ以上のCommonJSファイルの状態を分離します。たとえば、CommonJSとESモジュールのエントリポイントがそれぞれ &lt;code&gt;index.cjs&lt;/code&gt; と &lt;code&gt;index.mjs&lt;/code&gt; の場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="31f54ec164d59bd1126c3d41ec9e0caa797ca9ac" translate="yes" xml:space="preserve">
          <source>It allows a shortcut, so that &lt;code&gt;module.exports.f = ...&lt;/code&gt; can be written more succinctly as &lt;code&gt;exports.f = ...&lt;/code&gt;. However, be aware that like any variable, if a new value is assigned to &lt;code&gt;exports&lt;/code&gt;, it is no longer bound to &lt;code&gt;module.exports&lt;/code&gt;:</source>
          <target state="translated">これによりショートカットが許可されるため、 &lt;code&gt;module.exports.f = ...&lt;/code&gt; をexports.f = ...としてより簡潔に記述でき &lt;code&gt;exports.f = ...&lt;/code&gt; 。ただし、他の変数と同様に、新しい値が &lt;code&gt;exports&lt;/code&gt; に割り当てられると、 &lt;code&gt;module.exports&lt;/code&gt; にバインドされなくなります。</target>
        </trans-unit>
        <trans-unit id="9073ca8fe086c420a4962aa555b1febbd7e4eb14" translate="yes" xml:space="preserve">
          <source>It can also be created by Node.js and passed to the user when a connection is received. For example, it is passed to the listeners of a &lt;a href=&quot;#net_event_connection&quot;&gt;&lt;code&gt;'connection'&lt;/code&gt;&lt;/a&gt; event emitted on a &lt;a href=&quot;#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt;, so the user can use it to interact with the client.</source>
          <target state="translated">Node.jsで作成して、接続の受信時にユーザーに渡すこともできます。たとえば、&lt;a href=&quot;#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; で発行&lt;/a&gt;された&lt;a href=&quot;#net_event_connection&quot;&gt; &lt;code&gt;'connection'&lt;/code&gt; &lt;/a&gt;イベントのリスナーに渡されるため、ユーザーはこれを使用してクライアントと対話できます。</target>
        </trans-unit>
        <trans-unit id="5170688bb6d5c05e758eaa86801b72671253446e" translate="yes" xml:space="preserve">
          <source>It can be accessed using:</source>
          <target state="translated">を使ってアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="aa2502aa25bb881c5a8de387f4855f38f05049a2" translate="yes" xml:space="preserve">
          <source>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</source>
          <target state="translated">これは &quot;foo&quot; を指す &quot;new-port&quot; というシンボリックリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="f0450c3659d04b97d0de09b169af32ff8f617bc3" translate="yes" xml:space="preserve">
          <source>It detects &lt;code&gt;null&lt;/code&gt; as a separate type, while ECMAScript &lt;code&gt;typeof&lt;/code&gt; would detect &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">It detects &lt;code&gt;null&lt;/code&gt; as a separate type, while ECMAScript &lt;code&gt;typeof&lt;/code&gt; would detect &lt;code&gt;object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d1be5b11468a8cdf73d05266cfb33d14f98a6df" translate="yes" xml:space="preserve">
          <source>It does nothing if the stream was already destroyed.</source>
          <target state="translated">流れがすでに破壊されていても何もしない。</target>
        </trans-unit>
        <trans-unit id="41d9374edd67e5544a25ed3217406f608f09bce8" translate="yes" xml:space="preserve">
          <source>It has already been linked (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linked'&lt;/code&gt;)</source>
          <target state="translated">すでにリンクされています（ &lt;code&gt;linkingStatus&lt;/code&gt; は &lt;code&gt;'linked'&lt;/code&gt; です）</target>
        </trans-unit>
        <trans-unit id="967e13c06d26edbbb18720333bfad7b741a78020" translate="yes" xml:space="preserve">
          <source>It has support for detecting an External value.</source>
          <target state="translated">外部値の検出をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a70b0c65dc3241d0690f77cfe10d0e5c2409d02c" translate="yes" xml:space="preserve">
          <source>It helps to provide some global-looking variables that are actually specific to the module, such as:</source>
          <target state="translated">これは、実際にはモジュールに固有のグローバルな変数を提供するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bb0464e843f0f43c4dc6eaefcde1f38e4a3f6cc1" translate="yes" xml:space="preserve">
          <source>It implements the &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;Readable Stream&lt;/a&gt; interface, as well as the following additional events, methods, and properties.</source>
          <target state="translated">これは、&lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;Readable Stream&lt;/a&gt;インターフェースに加えて、以下の追加のイベント、メソッド、プロパティを実装しています。</target>
        </trans-unit>
        <trans-unit id="5d45f625dfde54e988f472dec8c49c8ac4e78699" translate="yes" xml:space="preserve">
          <source>It is also possible to compress or decompress data in a single step:</source>
          <target state="translated">また、データを圧縮したり、解凍したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="60bfb3903cd859802eba53ef817be6fc4d39e1d0" translate="yes" xml:space="preserve">
          <source>It is also possible to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt; with the following caveats:</source>
          <target state="translated">次の警告に従って、 &lt;code&gt;Buffer&lt;/code&gt; から新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンスを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="94f8e04142983f13c24079e34f4c988c32e45040" translate="yes" xml:space="preserve">
          <source>It is also possible to set a breakpoint in a file (module) that is not loaded yet:</source>
          <target state="translated">また、まだ読み込まれていないファイル(モジュール)にブレークポイントを設定することも可能です。</target>
        </trans-unit>
        <trans-unit id="a34d6d2cfc9e4ced2263ec4c4d2ab062b99846e3" translate="yes" xml:space="preserve">
          <source>It is also possible to set a conditional breakpoint that only breaks when a given expression evaluates to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">特定の式が &lt;code&gt;true&lt;/code&gt; と評価された場合にのみブレークする条件付きブレークポイントを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="f3e7ef80ba24b9fb35096f06920755ced16718da" translate="yes" xml:space="preserve">
          <source>It is also possible to subscribe only to notifications with specific method:</source>
          <target state="translated">また、特定の方法で通知のみを購読することも可能です。</target>
        </trans-unit>
        <trans-unit id="c36886a21b327f4efa13efb333b8085346c75732" translate="yes" xml:space="preserve">
          <source>It is also possible to wrap C++ objects/classes in a way that allows new instances to be created using the JavaScript &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="translated">JavaScriptの &lt;code&gt;new&lt;/code&gt; 演算子を使用して新しいインスタンスを作成できるように、C ++オブジェクト/クラスをラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="c27ace742269815d9bc53f0c5f64ced13adb5440" translate="yes" xml:space="preserve">
          <source>It is also recommended that any &lt;code&gt;'message'&lt;/code&gt; handlers in the child process verify that &lt;code&gt;socket&lt;/code&gt; exists, as the connection may have been closed during the time it takes to send the connection to the child.</source>
          <target state="translated">接続を子に送信するのにかかる時間中に接続が閉じられた可能性があるため、子プロセスの &lt;code&gt;'message'&lt;/code&gt; ハンドラーが &lt;code&gt;socket&lt;/code&gt; が存在することを確認することもお勧めします。</target>
        </trans-unit>
        <trans-unit id="16c143cda1d23fdc307acaa4ab93fadca2a6f783" translate="yes" xml:space="preserve">
          <source>It is bad practice to remove listeners added elsewhere in the code, particularly when the &lt;code&gt;EventEmitter&lt;/code&gt; instance was created by some other component or module (e.g. sockets or file streams).</source>
          <target state="translated">特に &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスが他のコンポーネントまたはモジュール（ソケットやファイルストリームなど）によって作成された場合は、コードの他の場所に追加されたリスナーを削除することはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="9c833a8c6ebe950f983fd451c778c087cc9332c0" translate="yes" xml:space="preserve">
          <source>It is being linked (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linking'&lt;/code&gt;)</source>
          <target state="translated">リンクされています（ &lt;code&gt;linkingStatus&lt;/code&gt; は &lt;code&gt;'linking'&lt;/code&gt; です）</target>
        </trans-unit>
        <trans-unit id="419d5dee627637c5194692a9f10eb64d65bcc9aa" translate="yes" xml:space="preserve">
          <source>It is common practice within Addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:</source>
          <target state="translated">JavaScript の関数を C++関数に渡して、そこから実行するのはアドオン内では一般的です。次の例は、そのようなコールバックを呼び出す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="d1e8308e7f9db59899a0946a4de525aabc71fba1" translate="yes" xml:space="preserve">
          <source>It is common practice within addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:</source>
          <target state="translated">JavaScript の関数を C++関数に渡してそこから実行するのは、アドオン内では一般的です。次の例は、そのようなコールバックを呼び出す方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3048ab55c4bb6de03bd26d55d03dc4c5facb8b7f" translate="yes" xml:space="preserve">
          <source>It is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to those directories. There are three ways in which a folder may be passed to &lt;code&gt;require()&lt;/code&gt; as an argument.</source>
          <target state="translated">プログラムとライブラリーを自己完結型ディレクトリーに編成し、それらのディレクトリーへの単一のエントリー・ポイントを提供すると便利です。フォルダーを &lt;code&gt;require()&lt;/code&gt; に引数として渡す方法は3つあります。</target>
        </trans-unit>
        <trans-unit id="1ae010a7f5ed72fe5c4197d82c84289cacb4988c" translate="yes" xml:space="preserve">
          <source>It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは非推奨であり、新しいコードでは使用しないでください。JavaScriptには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt; &lt;code&gt;Object.assign()&lt;/code&gt; を&lt;/a&gt;介して非常によく似た組み込み機能が付属しています。</target>
        </trans-unit>
        <trans-unit id="382706d811accf5e4830215dc1300355249bb388" translate="yes" xml:space="preserve">
          <source>It is deprecated in favor of &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt;, because it serves the same purpose and is only available on CommonJS environment.</source>
          <target state="translated">It is deprecated in favor of &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; &lt;/a&gt;, because it serves the same purpose and is only available on CommonJS environment.</target>
        </trans-unit>
        <trans-unit id="937f36c6fe0ce89575bd34e56b0dfed7daac172f" translate="yes" xml:space="preserve">
          <source>It is good practice, to &lt;a href=&quot;#http_agent_destroy&quot;&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/a&gt; an &lt;code&gt;Agent&lt;/code&gt; instance when it is no longer in use, because unused sockets consume OS resources.</source>
          <target state="translated">それはする、お勧めしません&lt;a href=&quot;#http_agent_destroy&quot;&gt; &lt;code&gt;destroy()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Agent&lt;/code&gt; 未使用のソケットは、OSのリソースを消費するので、それは、使用されなくなったときにインスタンス。</target>
        </trans-unit>
        <trans-unit id="2bc5790e09a1d829dcaf9ede78c9a8dcb7900d48" translate="yes" xml:space="preserve">
          <source>It is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</source>
          <target state="translated">ここで注意したいのは、スポーンされたNode.jsの子プロセスは、2つの間に確立されたIPC通信チャネルを除いて、親プロセスから独立しているということです。各プロセスは独自のメモリを持ち、独自の V8 インスタンスを持っています。追加のリソース割り当てが必要となるため、多数の子プロセスをスポーンすることは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="4512b8cdb5a3c36488e4bbb14fc8dde177723733" translate="yes" xml:space="preserve">
          <source>It is impossible to know in advance the MTU of each link through which a packet might travel. Sending a datagram greater than the receiver &lt;code&gt;MTU&lt;/code&gt; will not work because the packet will get silently dropped without informing the source that the data did not reach its intended recipient.</source>
          <target state="translated">パケットが通過する可能性のある各リンクのMTUを事前に知ることは不可能です。データが目的の受信者に到達しなかったことをソースに通知せずにパケットが静かにドロップされるため、受信者の &lt;code&gt;MTU&lt;/code&gt; より大きいデータグラムを送信しても機能しません。</target>
        </trans-unit>
        <trans-unit id="4d15922f6fb49942cb495192c566614d6f960db0" translate="yes" xml:space="preserve">
          <source>It is intended that a module writer wanting to report diagnostics messages will create one or many top-level channels to report messages through. Channels may also be acquired at runtime but it is not encouraged due to the additional overhead of doing so. Channels may be exported for convenience, but as long as the name is known it can be acquired anywhere.</source>
          <target state="translated">診断メッセージを報告したいモジュールライタが、メッセージを報告するためのトップレベルのチャンネルを1つまたは多数作成することが意図されています。チャンネルは実行時に取得することもできますが、実行時に追加のオーバーヘッドが発生するため、推奨されません。チャンネルは便利なようにエクスポートすることができますが、名前がわかっていればどこでも取得することができます。</target>
        </trans-unit>
        <trans-unit id="6e2e4af5d5aa394246178c425f14d66e2517e6db" translate="yes" xml:space="preserve">
          <source>It is not clear whether &lt;code&gt;foo()&lt;/code&gt; or &lt;code&gt;bar()&lt;/code&gt; will be called first.</source>
          <target state="translated">&lt;code&gt;foo()&lt;/code&gt; と &lt;code&gt;bar()&lt;/code&gt; のどちらが最初に呼び出されるかは明確ではありません。</target>
        </trans-unit>
        <trans-unit id="67feb1878c776ad9fccd934e67f62317478d643e" translate="yes" xml:space="preserve">
          <source>It is not emitted in the worker.</source>
          <target state="translated">ワーカーでは排出されません。</target>
        </trans-unit>
        <trans-unit id="187a290752482dba747ede2b91a61d535838b186" translate="yes" xml:space="preserve">
          <source>It is not necessary to call into JavaScript via &lt;code&gt;napi_make_callback()&lt;/code&gt; because N-API runs &lt;code&gt;call_js_cb&lt;/code&gt; in a context appropriate for callbacks.</source>
          <target state="translated">N-APIはコールバックに適したコンテキストで &lt;code&gt;call_js_cb&lt;/code&gt; を実行するため、 &lt;code&gt;napi_make_callback()&lt;/code&gt; を介してJavaScriptを呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="de78e88d2cf1c226b2cfb4eda72528bc88f2e15b" translate="yes" xml:space="preserve">
          <source>It is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers.</source>
          <target state="translated">HTTP リクエストやレスポンスにヘッダを渡す前にこのメソッドを使用する必要はありません。HTTP モジュールはそのようなヘッダを自動的に検証します。</target>
        </trans-unit>
        <trans-unit id="296a4e8488e3ee0257b7a2a2c0b7176cf79e4966" translate="yes" xml:space="preserve">
          <source>It is not necessary to use this method before passing headers to an HTTP request or response. The HTTP module will automatically validate such headers. Examples:</source>
          <target state="translated">HTTP リクエストやレスポンスにヘッダを渡す前にこのメソッドを使用する必要はありません。HTTP モジュールはそのようなヘッダを自動的に検証します。例を示します。</target>
        </trans-unit>
        <trans-unit id="3d10f2c19d8c5b37fce057d024a074f7f6dd563d" translate="yes" xml:space="preserve">
          <source>It is not possible to &lt;code&gt;require()&lt;/code&gt; files that have the &lt;code&gt;.mjs&lt;/code&gt; extension. Attempting to do so will throw &lt;a href=&quot;errors#errors_err_require_esm&quot;&gt;an error&lt;/a&gt;. The &lt;code&gt;.mjs&lt;/code&gt; extension is reserved for &lt;a href=&quot;esm&quot;&gt;ECMAScript Modules&lt;/a&gt; which cannot be loaded via &lt;code&gt;require()&lt;/code&gt;. See &lt;a href=&quot;esm&quot;&gt;ECMAScript Modules&lt;/a&gt; for more details.</source>
          <target state="translated">拡張子が &lt;code&gt;.mjs&lt;/code&gt; の &lt;code&gt;require()&lt;/code&gt; ファイルは使用できません。そうしようとすると&lt;a href=&quot;errors#errors_err_require_esm&quot;&gt;、エラー&lt;/a&gt;がスローされます。 &lt;code&gt;.mjs&lt;/code&gt; 拡張をするために予約されている&lt;a href=&quot;esm&quot;&gt;のECMAScriptモジュール&lt;/a&gt;を介してロードすることができない &lt;code&gt;require()&lt;/code&gt; 。詳細については、&lt;a href=&quot;esm&quot;&gt;ECMAScriptモジュール&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d7b21297f31acb334dbc5d7e4654c5f95618230e" translate="yes" xml:space="preserve">
          <source>It is not possible to cancel timers that were created using the promisified variants of &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;の約束されたバリアントを使用して作成されたタイマーをキャンセルすることはできません。</target>
        </trans-unit>
        <trans-unit id="e66357995a3753445dca09b779bcb4d762b0d211" translate="yes" xml:space="preserve">
          <source>It is not recommended to use this option once a socket has been sent to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;を使用してソケットが子に送信された後は、このオプションを使用することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="11b99fc0673b66c9c42a80c4a0c35748194bd28e" translate="yes" xml:space="preserve">
          <source>It is often necessary to make the lifespan of handles shorter than the lifespan of a native method. For example, consider a native method that has a loop which iterates through the elements in a large array:</source>
          <target state="translated">ハンドルの寿命をネイティブメソッドの寿命よりも短くする必要があることがよくあります。たとえば、大きな配列の要素を反復処理するループを持つネイティブメソッドを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="4c4c02784543cf811bfb3f1f2ca2f803b137643c" translate="yes" xml:space="preserve">
          <source>It is possible for Node.js to be built without including support for the &lt;code&gt;crypto&lt;/code&gt; module. In such cases, calling &lt;code&gt;require('crypto')&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">Node.jsは、 &lt;code&gt;crypto&lt;/code&gt; モジュールのサポートを含めずに構築することが可能です。このような場合、 &lt;code&gt;require('crypto')&lt;/code&gt; を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="9ec146a36358c16fe853764f44ebbd03ad1c100e" translate="yes" xml:space="preserve">
          <source>It is possible that no output is generated from any given chunk of input data.</source>
          <target state="translated">入力データの任意のチャンクから出力が発生しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="1c05044fad35947e2b34f640cb82763b531c67e6" translate="yes" xml:space="preserve">
          <source>It is possible to abort a request with an AbortSignal.</source>
          <target state="translated">AbortSignalでリクエストを中止することができます。</target>
        </trans-unit>
        <trans-unit id="fb41f4ead62c0acd100bea2cdb2db4664be791dc" translate="yes" xml:space="preserve">
          <source>It is possible to abort an ongoing &lt;code&gt;readFile&lt;/code&gt; using an &lt;code&gt;AbortSignal&lt;/code&gt;. If a request is aborted the promise returned is rejected with an &lt;code&gt;AbortError&lt;/code&gt;:</source>
          <target state="translated">継続的な中止することが可能である &lt;code&gt;readFile&lt;/code&gt; の使用 &lt;code&gt;AbortSignal&lt;/code&gt; を。リクエストが中止された場合、返されたプロミスは &lt;code&gt;AbortError&lt;/code&gt; で拒否されます：</target>
        </trans-unit>
        <trans-unit id="8bb9372b3ea7df0e017b7e2df090f9d1d713f7f6" translate="yes" xml:space="preserve">
          <source>It is possible to abort an ongoing request using an &lt;code&gt;AbortSignal&lt;/code&gt;. If a request is aborted the callback is called with an &lt;code&gt;AbortError&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;AbortSignal&lt;/code&gt; を使用して、進行中のリクエストを中止することができます。リクエストが中止された場合、コールバックは &lt;code&gt;AbortError&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="041de057d4cce3b0afd146cbb127bf4a3b681c5a" translate="yes" xml:space="preserve">
          <source>It is possible to attach multiple &lt;code&gt;Writable&lt;/code&gt; streams to a single &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">複数の &lt;code&gt;Writable&lt;/code&gt; ストリームを単一の &lt;code&gt;Readable&lt;/code&gt; 可能なストリームに添付することが可能です。</target>
        </trans-unit>
        <trans-unit id="e1f756af417fbde2518c13a7c85fc18b3dac2b86" translate="yes" xml:space="preserve">
          <source>It is possible to create a new &lt;code&gt;Buffer&lt;/code&gt; that shares the same allocated memory as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance by using the &lt;code&gt;TypedArray&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;.buffer&lt;/code&gt; property in the same way. &lt;a href=&quot;#buffer_static_method_buffer_from_arraybuffer_byteoffset_length&quot;&gt;&lt;code&gt;Buffer.from()&lt;/code&gt;&lt;/a&gt; behaves like &lt;code&gt;new Uint8Array()&lt;/code&gt; in this context.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; オブジェクトの &lt;code&gt;.buffer&lt;/code&gt; プロパティを同じ方法で使用することにより、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンスと同じ割り当てメモリを共有する新しい &lt;code&gt;Buffer&lt;/code&gt; を作成することができます。&lt;a href=&quot;#buffer_static_method_buffer_from_arraybuffer_byteoffset_length&quot;&gt; &lt;code&gt;Buffer.from()&lt;/code&gt; &lt;/a&gt;は、このコンテキストでは &lt;code&gt;new Uint8Array()&lt;/code&gt; ように動作します。</target>
        </trans-unit>
        <trans-unit id="9d799d5874d270cd1edf1e65682d3d92bdbd761d" translate="yes" xml:space="preserve">
          <source>It is possible to create a new &lt;code&gt;Buffer&lt;/code&gt; that shares the same allocated memory as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance by using the &lt;code&gt;TypedArray&lt;/code&gt; object's &lt;code&gt;.buffer&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;TypedArray&lt;/code&gt; オブジェクトの &lt;code&gt;.buffer&lt;/code&gt; プロパティを使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンスと同じ割り当てメモリを共有する新しい &lt;code&gt;Buffer&lt;/code&gt; を作成することができます。</target>
        </trans-unit>
        <trans-unit id="0425f8d11e929edaebd4ecd9966c15d540c99b06" translate="yes" xml:space="preserve">
          <source>It is possible to create and run multiple REPL instances against a single running instance of Node.js that share a single &lt;code&gt;global&lt;/code&gt; object but have separate I/O interfaces.</source>
          <target state="translated">単一の &lt;code&gt;global&lt;/code&gt; オブジェクトを共有するが、個別のI / Oインターフェースを持つNode.jsの単一の実行中のインスタンスに対して、複数のREPLインスタンスを作成して実行することが可能です。</target>
        </trans-unit>
        <trans-unit id="aebe7a7a176eecea0791341611fe6bc21db870e1" translate="yes" xml:space="preserve">
          <source>It is possible to have type name collisions. Embedders are encouraged to use unique prefixes, such as the npm package name, to prevent collisions when listening to the hooks.</source>
          <target state="translated">型名の衝突が発生する可能性があります。エンベッダーは、フックを聞くときに衝突を防ぐために、npm パッケージ名のようなユニークな接頭辞を使うことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e6c6c312d474be31ba928b610b1f24972346fde4" translate="yes" xml:space="preserve">
          <source>It is possible to modify this object, but such modifications will not be reflected outside the Node.js process, or (unless explicitly requested) to other &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads. In other words, the following example would not work:</source>
          <target state="translated">このオブジェクトを変更することは可能ですが、そのような変更はNode.jsプロセスの外部、または（明示的に要求されない限り）他の&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドには反映されません。つまり、次の例は機能しません。</target>
        </trans-unit>
        <trans-unit id="35d16003884be438df7a1acc413175dbe0c12f8c" translate="yes" xml:space="preserve">
          <source>It is possible to monitor &lt;code&gt;'error'&lt;/code&gt; events without consuming the emitted error by installing a listener using the symbol &lt;code&gt;errorMonitor&lt;/code&gt;.</source>
          <target state="translated">シンボル &lt;code&gt;errorMonitor&lt;/code&gt; を使用してリスナーをインストールすることにより、発行されたエラーを消費せずに &lt;code&gt;'error'&lt;/code&gt; イベントを監視することができます。</target>
        </trans-unit>
        <trans-unit id="eb47b5281d45cca64650f0bdac0dc02b859e95f9" translate="yes" xml:space="preserve">
          <source>It is possible to monitor &lt;code&gt;'error'&lt;/code&gt; events without consuming the emitted error by installing a listener using the symbol &lt;code&gt;events.errorMonitor&lt;/code&gt;.</source>
          <target state="translated">シンボル &lt;code&gt;events.errorMonitor&lt;/code&gt; を使用してリスナーをインストールすることにより、発行されたエラーを消費せずに &lt;code&gt;'error'&lt;/code&gt; イベントを監視することができます。</target>
        </trans-unit>
        <trans-unit id="a7c50e3a0dc247c0e0d0c4d0e9566d30f009dc29" translate="yes" xml:space="preserve">
          <source>It is possible to monitor &lt;code&gt;'uncaughtException'&lt;/code&gt; events without overriding the default behavior to exit the process by installing a &lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; listener.</source>
          <target state="translated">&lt;code&gt;'uncaughtExceptionMonitor'&lt;/code&gt; リスナーをインストールすることにより、デフォルトの動作をオーバーライドせずに &lt;code&gt;'uncaughtException'&lt;/code&gt; イベントを監視してプロセスを終了することができます。</target>
        </trans-unit>
        <trans-unit id="86565752a73577e2315e700600c3bf0c40a3f4fd" translate="yes" xml:space="preserve">
          <source>It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance &lt;code&gt;require('example-module/path/to/file')&lt;/code&gt; would resolve &lt;code&gt;path/to/file&lt;/code&gt; relative to where &lt;code&gt;example-module&lt;/code&gt; is located. The suffixed path follows the same module resolution semantics.</source>
          <target state="translated">モジュール名の後にパス接尾辞を含めることにより、モジュールと共に配布される特定のファイルまたはサブモジュールを要求することができます。たとえば &lt;code&gt;require('example-module/path/to/file')&lt;/code&gt; は、 &lt;code&gt;example-module&lt;/code&gt; が配置されている場所を基準にして &lt;code&gt;path/to/file&lt;/code&gt; を解決します。接尾辞付きのパスは、同じモジュール解決セマンティクスに従います。</target>
        </trans-unit>
        <trans-unit id="ba28385ee96435cb01e25cc4b9a932046f15c449" translate="yes" xml:space="preserve">
          <source>It is possible to use ES6 Arrow Functions as listeners, however, when doing so, the &lt;code&gt;this&lt;/code&gt; keyword will no longer reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance:</source>
          <target state="translated">ES6アロー関数をリスナーとして使用することは可能ですが、そうすると、 &lt;code&gt;this&lt;/code&gt; キーワードは &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスを参照しなくなります。</target>
        </trans-unit>
        <trans-unit id="eceb970a4b280c5ebbc9381a566687448de43d03" translate="yes" xml:space="preserve">
          <source>It is possible to use an &lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt; to cancel an &lt;code&gt;fs.writeFile()&lt;/code&gt;. Cancelation is &quot;best effort&quot;, and some amount of data is likely still to be written.</source>
          <target state="translated">&lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt;を使用して &lt;code&gt;fs.writeFile()&lt;/code&gt; をキャンセルすることができます。キャンセルは「最善の努力」であり、ある程度のデータがまだ書き込まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5e733ce5ceec976b0d4043f067896f296736fc30" translate="yes" xml:space="preserve">
          <source>It is possible to use an &lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt; to cancel an &lt;code&gt;fsPromises.writeFile()&lt;/code&gt;. Cancelation is &quot;best effort&quot;, and some amount of data is likely still to be written.</source>
          <target state="translated">&lt;a href=&quot;globals#globals_class_abortsignal&quot;&gt;&amp;lt;AbortSignal&amp;gt;&lt;/a&gt;を使用して &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; をキャンセルすることができます。キャンセルは「最善の努力」であり、ある程度のデータがまだ書き込まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d50f1c65fac5502c9e1814ed3537ba4589771ab5" translate="yes" xml:space="preserve">
          <source>It is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint's source code listing.</source>
          <target state="translated">デバッグ中に式や変数の値をウォッチすることが可能です。すべてのブレークポイントで、ウォッチャーリストの各式は現在のコンテキストで評価され、ブレークポイントのソースコードリストの直前に表示されます。</target>
        </trans-unit>
        <trans-unit id="9a28d0af67f353f363a2876505349b3688d12dbd" translate="yes" xml:space="preserve">
          <source>It is recommended that errors occurring during the processing of the &lt;code&gt;readable._read()&lt;/code&gt; method are emitted using the &lt;code&gt;'error'&lt;/code&gt; event rather than being thrown. Throwing an &lt;code&gt;Error&lt;/code&gt; from within &lt;code&gt;readable._read()&lt;/code&gt; can result in unexpected and inconsistent behavior depending on whether the stream is operating in flowing or paused mode. Using the &lt;code&gt;'error'&lt;/code&gt; event ensures consistent and predictable handling of errors.</source>
          <target state="translated">&lt;code&gt;readable._read()&lt;/code&gt; メソッドの処理中に発生した &lt;code&gt;'error'&lt;/code&gt; は、スローするのではなく、「error」イベントを使用して発行することをお勧めします。readible._read &lt;code&gt;readable._read()&lt;/code&gt; 内から &lt;code&gt;Error&lt;/code&gt; をスローすると、ストリームがフローモードと一時停止モードのどちらで動作しているかに応じて、予期しない一貫性のない動作が発生する可能性があります。 &lt;code&gt;'error'&lt;/code&gt; イベントを使用すると、一貫した予測可能なエラー処理が保証されます。</target>
        </trans-unit>
        <trans-unit id="a056961ff3bdb7c76c478689117c030d14d553dd" translate="yes" xml:space="preserve">
          <source>It is recommended that errors occurring during the processing of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;code&gt;writable._writev()&lt;/code&gt; methods are reported by invoking the callback and passing the error as the first argument. This will cause an &lt;code&gt;'error'&lt;/code&gt; event to be emitted by the &lt;code&gt;Writable&lt;/code&gt;. Throwing an &lt;code&gt;Error&lt;/code&gt; from within &lt;code&gt;writable._write()&lt;/code&gt; can result in unexpected and inconsistent behavior depending on how the stream is being used. Using the callback ensures consistent and predictable handling of errors.</source>
          <target state="translated">エラーが処理中に発生することが推奨される &lt;code&gt;writable._write()&lt;/code&gt; 及び &lt;code&gt;writable._writev()&lt;/code&gt; メソッドは、コールバックを呼び出し、最初の引数としてエラーを渡すことによって報告されています。これにより、 &lt;code&gt;'error'&lt;/code&gt; イベントが &lt;code&gt;Writable&lt;/code&gt; によって発行されます。 &lt;code&gt;writable._write()&lt;/code&gt; 内から &lt;code&gt;Error&lt;/code&gt; をスローすると、ストリームの使用方法によっては、予期しない一貫性のない動作が発生する可能性があります。コールバックを使用すると、一貫した予測可能なエラー処理が保証されます。</target>
        </trans-unit>
        <trans-unit id="ea16402f95d8daded063cf513af19663455d8c99" translate="yes" xml:space="preserve">
          <source>It is recommended to encode public keys as &lt;code&gt;'spki'&lt;/code&gt; and private keys as &lt;code&gt;'pkcs8'&lt;/code&gt; with encryption for long-term storage:</source>
          <target state="translated">公開鍵を &lt;code&gt;'spki'&lt;/code&gt; として、秘密鍵を &lt;code&gt;'pkcs8'&lt;/code&gt; として暗号化し、長期間保存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="be30c74885508dee4aa59c7f4ed4177d22aed095" translate="yes" xml:space="preserve">
          <source>It is required that &lt;code&gt;byte_length + byte_offset&lt;/code&gt; is less than or equal to the size in bytes of the array passed in. If not, a &lt;code&gt;RangeError&lt;/code&gt; exception is raised.</source>
          <target state="translated">要求される &lt;code&gt;byte_length + byte_offset&lt;/code&gt; 渡された配列のバイト単位のサイズに等しいかそれ未満である。そうでない場合、 &lt;code&gt;RangeError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="22b0f46e9ce955411b0e5f9b89cbb8973cf2da94" translate="yes" xml:space="preserve">
          <source>It is still possible to use &lt;code&gt;fs.watchFile()&lt;/code&gt;, which uses stat polling, but this method is slower and less reliable.</source>
          <target state="translated">statポーリングを使用する &lt;code&gt;fs.watchFile()&lt;/code&gt; を使用することも可能ですが、この方法は遅く、信頼性が低くなります。</target>
        </trans-unit>
        <trans-unit id="139b9846793e9d67315fbc1333aef413751a7253" translate="yes" xml:space="preserve">
          <source>It is strongly encouraged to place dependencies in the local &lt;code&gt;node_modules&lt;/code&gt; folder. These will be loaded faster, and more reliably.</source>
          <target state="translated">依存関係をローカルの &lt;code&gt;node_modules&lt;/code&gt; フォルダーに配置することを強くお勧めします。これらはより速く、より確実に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="022cb2f71f9ba41c057c015a1ac77f0d6fecfadd" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the results of compression operations be cached to avoid duplication of effort.</source>
          <target state="translated">圧縮操作の結果は、労力の重複を避けるためにキャッシュすることを強く推奨します。</target>
        </trans-unit>
        <trans-unit id="c57e947162fc04e3a4c5011c7abce4b05a307aa0" translate="yes" xml:space="preserve">
          <source>It is unsafe to call &lt;code&gt;writev()&lt;/code&gt; multiple times on the same file without waiting for the previous operation to complete.</source>
          <target state="translated">前の操作が完了するのを待たずに、同じファイルで &lt;code&gt;writev()&lt;/code&gt; を複数回呼び出すのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="9a074961b126d1ed61535ab8ccf81ae46b4f5b8c" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;filehandle.write()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected). For this scenario, use &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; が解決（または拒否）されるのを待たずに、同じファイルで &lt;code&gt;filehandle.write()&lt;/code&gt; を複数回使用するのは安全ではありません。このシナリオでは、&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="fa06e1e67ec61d886012a5ebbf346afac1c50178" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;filehandle.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; が解決（または拒否）されるのを待たずに、同じファイルで &lt;code&gt;filehandle.writeFile()&lt;/code&gt; を複数回使用するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="327d5849595d0b2d3af0390f737024885e0b74a4" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.write()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">コールバックを待たずに同じファイルで &lt;code&gt;fs.write()&lt;/code&gt; を複数回使用するのは安全ではありません。このシナリオでは、&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="cb3527578258e75386e719cb61809fc94de47660" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">コールバックを待たずに同じファイルで &lt;code&gt;fs.writeFile()&lt;/code&gt; を複数回使用するのは安全ではありません。このシナリオでは、&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; &lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="9cd51ed95a8e7ff9d29a46cc5b594661dab21ee9" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.writev()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, use &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コールバックを待たずに同じファイルで &lt;code&gt;fs.writev()&lt;/code&gt; を複数回使用するのは安全ではありません。このシナリオでは、&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="622d7bb464ea01fd61d4419e05853d2d42f264a1" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be fulfilled (or rejected).</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; が実行される（または拒否される）のを待たずに、同じファイルで &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; を複数回使用することは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="e32bdefd256d2a24661a921234ae0d689962bf7c" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; が解決（または拒否）されるのを待たずに、同じファイルで &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; を複数回使用するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="7e425dadb8e04b5a366c75f5e580a69b178cf54a" translate="yes" xml:space="preserve">
          <source>It is usually not necessary to do this. However, if using an agent with &lt;code&gt;keepAlive&lt;/code&gt; enabled, then it is best to explicitly shut down the agent when it is no longer needed. Otherwise, sockets might stay open for quite a long time before the server terminates them.</source>
          <target state="translated">通常、これを行う必要はありません。ただし、 &lt;code&gt;keepAlive&lt;/code&gt; が有効になっているエージェントを使用している場合は、不要になったときにエージェントを明示的にシャットダウンすることをお勧めします。そうしないと、サーバーがソケットを終了する前に、ソケットがかなり長い間開いたままになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e339f1709056e0ab06d967b94bed7dafd547b83" translate="yes" xml:space="preserve">
          <source>It is usually not necessary to do this. However, if using an agent with &lt;code&gt;keepAlive&lt;/code&gt; enabled, then it is best to explicitly shut down the agent when it will no longer be used. Otherwise, sockets may hang open for quite a long time before the server terminates them.</source>
          <target state="translated">通常、これを行う必要はありません。ただし、 &lt;code&gt;keepAlive&lt;/code&gt; を有効にしてエージェントを使用している場合は、使用されなくなったエージェントを明示的にシャットダウンすることをお勧めします。そうしないと、サーバーがソケットを終了する前に、ソケットが長時間ハングしたままになることがあります。</target>
        </trans-unit>
        <trans-unit id="588053c04448ff48f8bf959f153ee214ac140018" translate="yes" xml:space="preserve">
          <source>It is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example:</source>
          <target state="translated">APIは100%同期または100%非同期のどちらかであることが非常に重要です。この例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="0324495de22e85e0d134839d942c3962300cbac5" translate="yes" xml:space="preserve">
          <source>It keeps top-level variables (defined with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;) scoped to the module rather than the global object.</source>
          <target state="translated">グローバルオブジェクトではなく、モジュールをスコープとするトップレベルの変数（ &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;let&lt;/code&gt; で定義）を保持します。</target>
        </trans-unit>
        <trans-unit id="83e75e459c92e28df79b2b636a0f41ab57292e39" translate="yes" xml:space="preserve">
          <source>It may be useful for debugging.</source>
          <target state="translated">デバッグに便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="3b653a9cb85ecaa0c5b1d834abf7d88df675e8a5" translate="yes" xml:space="preserve">
          <source>It must be set to a non-zero value (e.g. 120 seconds) to proctect against potential Denial-of-Service attacks in case the server is deployed without a reverse proxy in front.</source>
          <target state="translated">サーバがリバースプロキシなしで配備されている場合に、サービス拒否攻撃の可能性を防ぐために、ゼロではない値(例えば120秒)に設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e3d4c4a6b07ad03b9db87fefb27c47016dd56d4f" translate="yes" xml:space="preserve">
          <source>It must belong to the same context as the parent &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">親 &lt;code&gt;Module&lt;/code&gt; と同じコンテキストに属している必要があります。</target>
        </trans-unit>
        <trans-unit id="389a01fac4a0ef708ee83106d03f5176a5d0807c" translate="yes" xml:space="preserve">
          <source>It performs the inverse operation to &lt;a href=&quot;#url_url_domaintoascii_domain&quot;&gt;&lt;code&gt;url.domainToASCII()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#url_url_domaintoascii_domain&quot;&gt; &lt;code&gt;url.domainToASCII()&lt;/code&gt; の&lt;/a&gt;逆の操作を実行します。</target>
        </trans-unit>
        <trans-unit id="e1f3dc61a93c5fe87d9de7e00282a1c8432614fc" translate="yes" xml:space="preserve">
          <source>It performs the inverse operation to &lt;a href=&quot;#url_url_domaintounicode_domain&quot;&gt;&lt;code&gt;url.domainToUnicode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#url_url_domaintounicode_domain&quot;&gt; &lt;code&gt;url.domainToUnicode()&lt;/code&gt; の&lt;/a&gt;逆の操作を実行します。</target>
        </trans-unit>
        <trans-unit id="16ec379b732d9cc8bb302ba29e2ef8af384a9552" translate="yes" xml:space="preserve">
          <source>It serializes the following types of values passed in &lt;code&gt;obj&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean[]&amp;gt;&lt;/a&gt; Any other input values will be coerced to empty strings.</source>
          <target state="translated">これは、渡された値は、次のタイプのシリアライズ &lt;code&gt;obj&lt;/code&gt; ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;番号&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string []&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;番号[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean []&amp;gt;&lt;/a&gt;その他の入力値は、空の文字列に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="6b40068b622f5e568804f8433e1a279e68a06ec3" translate="yes" xml:space="preserve">
          <source>It serializes the following types of values passed in &lt;code&gt;obj&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&quot;&gt;&amp;lt;bigint&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&quot;&gt;&amp;lt;bigint[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean[]&amp;gt;&lt;/a&gt; The numeric values must be finite. Any other input values will be coerced to empty strings.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; で渡される次のタイプの値をシリアル化します。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;番号&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&quot;&gt;&amp;lt;bigint&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール値&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;番号[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&quot;&gt;&amp;lt;bigint []&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean []&amp;gt;&lt;/a&gt;数値は有限でなければなりません。その他の入力値はすべて空の文字列に強制変換されます。</target>
        </trans-unit>
        <trans-unit id="f351f399c56b32725ac21458cab9068da78810d2" translate="yes" xml:space="preserve">
          <source>It supports the following option:</source>
          <target state="translated">以下のオプションに対応しています。</target>
        </trans-unit>
        <trans-unit id="55a4bb7259c84af569c9b2e4d90c56c3c0ed3ef3" translate="yes" xml:space="preserve">
          <source>It will rarely be necessary to use &lt;code&gt;readable.wrap()&lt;/code&gt; but the method has been provided as a convenience for interacting with older Node.js applications and libraries.</source>
          <target state="translated">&lt;code&gt;readable.wrap()&lt;/code&gt; を使用する必要はめったにありませんが、このメソッドは、古いNode.jsアプリケーションおよびライブラリと対話するための便宜として提供されています。</target>
        </trans-unit>
        <trans-unit id="1d542fd12f985c8768fbe8ead6923a0d00b50f32" translate="yes" xml:space="preserve">
          <source>It's required that &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; should be &amp;lt;= the size in bytes of the array passed in. If not, a &lt;code&gt;RangeError&lt;/code&gt; exception is raised.</source>
          <target state="translated">それことが必要です &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; &amp;lt;=渡された配列のサイズ（バイト単位）。そうでない場合、されるべき &lt;code&gt;RangeError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="42a3b56cedfed26ace470da3c86678970122c99f" translate="yes" xml:space="preserve">
          <source>Iterates over each name-value pair in the query and invokes the given function.</source>
          <target state="translated">クエリ内の各名前と値のペアを繰り返し処理し、与えられた関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e605b560485e511ea1daf5880b375c721cd76bc2" translate="yes" xml:space="preserve">
          <source>Iterates through the list of functions passed to &lt;a href=&quot;#assert_tracker_calls_fn_exact&quot;&gt;&lt;code&gt;tracker.calls()&lt;/code&gt;&lt;/a&gt; and will throw an error for functions that have not been called the expected number of times.</source>
          <target state="translated">&lt;a href=&quot;#assert_tracker_calls_fn_exact&quot;&gt; &lt;code&gt;tracker.calls()&lt;/code&gt; に&lt;/a&gt;渡された関数のリストを反復処理し、予想された回数呼び出されなかった関数に対してエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="8b0eca1e364367b12a698606c4b171ea9cc0b251" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;linkingStatus&lt;/code&gt; must not be &lt;code&gt;'errored'&lt;/code&gt;.</source>
          <target state="translated">その &lt;code&gt;linkingStatus&lt;/code&gt; は &lt;code&gt;'errored'&lt;/code&gt; errored」であってはなりません。</target>
        </trans-unit>
        <trans-unit id="c389cfb78c9e8ab8770625e5975f1207f9467241" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;status&lt;/code&gt; must not be &lt;code&gt;'errored'&lt;/code&gt;.</source>
          <target state="translated">その &lt;code&gt;status&lt;/code&gt; は &lt;code&gt;'errored'&lt;/code&gt; はなりません。</target>
        </trans-unit>
        <trans-unit id="56643b463dc4ce55950dfcbbef495be7564e51fe" translate="yes" xml:space="preserve">
          <source>Its possible to get the ticket keys by calling &lt;a href=&quot;#tls_server_getticketkeys&quot;&gt;&lt;code&gt;server.getTicketKeys()&lt;/code&gt;&lt;/a&gt; on one server instance and then distribute them, but it is more reasonable to securely generate 48 bytes of secure random data and set them with the &lt;code&gt;ticketKeys&lt;/code&gt; option of &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;. The keys should be regularly regenerated and server's keys can be reset with &lt;a href=&quot;#tls_server_setticketkeys_keys&quot;&gt;&lt;code&gt;server.setTicketKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1つのサーバーインスタンスで&lt;a href=&quot;#tls_server_getticketkeys&quot;&gt; &lt;code&gt;server.getTicketKeys()&lt;/code&gt; &lt;/a&gt;を呼び出してチケットキーを取得し、それを配布することは可能ですが、48バイトの安全なランダムデータを安全に生成し、&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;ticketKeys&lt;/code&gt; オプションを使用して設定する方が合理的です。。キーは定期的に再生成する必要があり、サーバーのキーは&lt;a href=&quot;#tls_server_setticketkeys_keys&quot;&gt; &lt;code&gt;server.setTicketKeys()&lt;/code&gt; で&lt;/a&gt;リセットできます。</target>
        </trans-unit>
        <trans-unit id="d96b84d8240a01cb379b56b8ddafa735704cf6dc" translate="yes" xml:space="preserve">
          <source>JSON Modules</source>
          <target state="translated">JSON モジュール</target>
        </trans-unit>
        <trans-unit id="d99d73b448c0f1ffea6212a90bfd357cad49d279" translate="yes" xml:space="preserve">
          <source>JSON fetching example:</source>
          <target state="translated">JSON フェッチの例。</target>
        </trans-unit>
        <trans-unit id="61f0767b1104231cbf534aea8ad3502fa4bdac54" translate="yes" xml:space="preserve">
          <source>JSON imports are still experimental and only supported via the &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag.</source>
          <target state="translated">JSONインポートはまだ実験 &lt;code&gt;--experimental-json-modules&lt;/code&gt; 、-experimental-json-modulesフラグを介してのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="985f971159c4193aaefd51184bf8e0f7c092a1a9" translate="yes" xml:space="preserve">
          <source>JSON modules</source>
          <target state="translated">JSON モジュール</target>
        </trans-unit>
        <trans-unit id="f7b9a43a2017f679eee5493180c26ed2f1e85185" translate="yes" xml:space="preserve">
          <source>JSON modules follow the &lt;a href=&quot;https://html.spec.whatwg.org/#creating-a-json-module-script&quot;&gt;WHATWG JSON modules specification&lt;/a&gt;.</source>
          <target state="translated">JSONモジュールは、&lt;a href=&quot;https://html.spec.whatwg.org/#creating-a-json-module-script&quot;&gt;WHATWG JSONモジュール仕様に準拠してい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="be23b85acb18166e5a08c5600a8d19dd96e42e39" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;Section 24.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; オブジェクトについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;セクション24.1&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="719a95a4bd9cf0b14d2f00175d73f2e6d748c5c3" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;s are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;Section 24.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; については、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;セクション24.1&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="2c8a0f0228ff639ea0dc5a1ba127ae8157e21154" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;DataView&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-dataview-objects&quot;&gt;Section 24.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;DataView&lt;/code&gt; オブジェクトについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-dataview-objects&quot;&gt;セクション24.3&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="5b1277ef9e321fb8f47bd20f93e6f1911ecebefc" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-objects&quot;&gt;Section 20.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-objects&quot;&gt;セクション20.3&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="4939241f55942c05d559f3a5b9a7e5d692c058d3" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Function&lt;/code&gt;s are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function-objects&quot;&gt;Section 19.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Function&lt;/code&gt; は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function-objects&quot;&gt;セクション19.2&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="dd9060b350cc54a90664674036d8765a0574ec82" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;TypedArray&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;TypedArray&lt;/code&gt; オブジェクトについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;セクション22.2&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="52cad7d4c62e41b12e029e3a1056b734751ff955" translate="yes" xml:space="preserve">
          <source>JavaScript Embedder API</source>
          <target state="translated">JavaScriptエンベッダーAPI</target>
        </trans-unit>
        <trans-unit id="48785657daead33de8f57e1fb9950e0b74a5ba21" translate="yes" xml:space="preserve">
          <source>JavaScript Expressions</source>
          <target state="translated">JavaScriptの表現</target>
        </trans-unit>
        <trans-unit id="0c87a0c72e80e2b3ed246c907f512dd6657150a6" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript配列については、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;セクション22.1&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="41362f31a71042ce6d33522241a4d37c00acbcd3" translate="yes" xml:space="preserve">
          <source>JavaScript cannot encode 64-bit integers. This method is intended for working with 64-bit floats.</source>
          <target state="translated">JavaScriptは64ビット整数をエンコードできません。このメソッドは、64 ビットのフロートを扱うためのものです。</target>
        </trans-unit>
        <trans-unit id="cec7f745469211f8ad0113b8267b2dbc38c96dca" translate="yes" xml:space="preserve">
          <source>JavaScript code can be compiled and run immediately or compiled, saved, and run later.</source>
          <target state="translated">JavaScriptのコードは、コンパイルしてすぐに実行することも、コンパイルして保存して後で実行することもできます。</target>
        </trans-unit>
        <trans-unit id="c9d606db4020d55005c50701236345ff97022d05" translate="yes" xml:space="preserve">
          <source>JavaScript embedder API</source>
          <target state="translated">JavaScript エンベッダー API</target>
        </trans-unit>
        <trans-unit id="917e1829cf18731633a9e9508396fcc748caf231" translate="yes" xml:space="preserve">
          <source>JavaScript expressions</source>
          <target state="translated">ジャバスクリプト式</target>
        </trans-unit>
        <trans-unit id="50c23bb655ecc1d108ac1670bce1574ac9c38369" translate="yes" xml:space="preserve">
          <source>JavaScript functions can normally only be called from a native addon's main thread. If an addon creates additional threads, then N-API functions that require a &lt;code&gt;napi_env&lt;/code&gt;, &lt;code&gt;napi_value&lt;/code&gt;, or &lt;code&gt;napi_ref&lt;/code&gt; must not be called from those threads.</source>
          <target state="translated">JavaScript関数は通常、ネイティブアドオンのメインスレッドからのみ呼び出すことができます。アドオンが追加のスレッドを作成する場合、 &lt;code&gt;napi_env&lt;/code&gt; 、 &lt;code&gt;napi_value&lt;/code&gt; 、または &lt;code&gt;napi_ref&lt;/code&gt; を必要とするN-API関数をそれらのスレッドから呼び出してはなりません。</target>
        </trans-unit>
        <trans-unit id="f37b66a76531faf963b06cfaf86c9ef0c5a880f1" translate="yes" xml:space="preserve">
          <source>JavaScript string escaping requires paths to be specified with extra backslash escaping such as:</source>
          <target state="translated">JavaScript の文字列エスケープでは、パスを指定する際にバックスラッシュを追加して指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7e07413b34ffd366886a0fb40b6c95efba1be0d7" translate="yes" xml:space="preserve">
          <source>JavaScript value: these are represented in N-API by &lt;code&gt;napi_value&lt;/code&gt;. This can be a &lt;code&gt;napi_value&lt;/code&gt; representing a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, or &lt;code&gt;Symbol&lt;/code&gt;.</source>
          <target state="translated">JavaScript値：これらは &lt;code&gt;napi_value&lt;/code&gt; によって表されます。これは、 &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、または &lt;code&gt;Symbol&lt;/code&gt; を表す &lt;code&gt;napi_value&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="2a646ce6b666ea8e7f9c939db95870c104b2926f" translate="yes" xml:space="preserve">
          <source>Keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</source>
          <target state="translated">スポーンされたNode.jsの子プロセスは、2つの間に確立されたIPC通信チャネルを除いて、親プロセスから独立していることを覚えておいてください。各プロセスは独自のメモリを持ち、独自の V8 インスタンスを持っています。追加のリソース割り当てが必要となるため、多数の子プロセスをスポーンすることは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="85219482f1f7715085ff2a7c4d7bf2331f590d10" translate="yes" xml:space="preserve">
          <source>Key Type</source>
          <target state="translated">キータイプ</target>
        </trans-unit>
        <trans-unit id="4a71118cb899549ef60707eb4c7093a6139cf8e2" translate="yes" xml:space="preserve">
          <source>Key events in the lifetime of asynchronous events have been categorized into four areas: instantiation, before/after the callback is called, and when the instance is destroyed.</source>
          <target state="translated">非同期イベントのライフタイムにおける主要なイベントは、インスタンス化、コールバックが呼ばれる前後、インスタンスが破棄されたときの4つの領域に分類されています。</target>
        </trans-unit>
        <trans-unit id="42fd293e6b52b92ee891b25260a8dcb7640476d7" translate="yes" xml:space="preserve">
          <source>Key-value pairs of header names and values. Header names are lower-cased.</source>
          <target state="translated">ヘッダー名と値のキーと値のペア。ヘッダー名は小文字になります。</target>
        </trans-unit>
        <trans-unit id="0219bac0488bb0b49dd2dc78aa3d21e7f7786afc" translate="yes" xml:space="preserve">
          <source>KeyObject</source>
          <target state="translated">KeyObject</target>
        </trans-unit>
        <trans-unit id="2cc8ec97bf0278d6ea5a1e7e27f117cb103c0fd7" translate="yes" xml:space="preserve">
          <source>Keybindings</source>
          <target state="translated">Keybindings</target>
        </trans-unit>
        <trans-unit id="736612bdaab47ddf51cb2896ce71e8f600786271" translate="yes" xml:space="preserve">
          <source>Keying material is used for validations to prevent different kind of attacks in network protocols, for example in the specifications of IEEE 802.1X.</source>
          <target state="translated">キーイング材料は、例えばIEEE 802.1Xの仕様では、ネットワークプロトコルのさまざまな種類の攻撃を防ぐための検証に使用されます。</target>
        </trans-unit>
        <trans-unit id="90247e04a9ab9c31144526b27a99cafa47c9ed23" translate="yes" xml:space="preserve">
          <source>Keys are lowercased. Values are not modified.</source>
          <target state="translated">キーは小文字で表示されます。値は変更されません。</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="be4d0497bc308dc68e2b86f9d700c936ee0973b7" translate="yes" xml:space="preserve">
          <source>Launching Node.js using the &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag will cause custom deprecation warnings to be thrown as exceptions.</source>
          <target state="translated">&lt;code&gt;--throw-deprecation&lt;/code&gt; コマンドラインフラグを使用してNode.jsを起動すると、カスタムの非推奨警告が例外としてスローされます。</target>
        </trans-unit>
        <trans-unit id="589aa56dcb4ae2243331e70e2c456e0e3f10ee92" translate="yes" xml:space="preserve">
          <source>Launching Node.js using the &lt;code&gt;--throw-deprecation&lt;/code&gt; command-line flag will cause custom deprecation warnings to be thrown as exceptions.</source>
          <target state="translated">&lt;code&gt;--throw-deprecation&lt;/code&gt; コマンドラインフラグを使用してNode.jsを起動すると、カスタムの非推奨警告が例外としてスローされます。</target>
        </trans-unit>
        <trans-unit id="3dcbad204095230ea14447be64d133cef03f50d2" translate="yes" xml:space="preserve">
          <source>Launching the Node.js process as:</source>
          <target state="translated">としてNode.jsのプロセスを起動します。</target>
        </trans-unit>
        <trans-unit id="7e7d3f1e7fa18067320d712dd92e8eec071149da" translate="yes" xml:space="preserve">
          <source>Left arrow</source>
          <target state="translated">左矢印</target>
        </trans-unit>
        <trans-unit id="bc8751555a3239b7dac027ac31b93be45c7a72a5" translate="yes" xml:space="preserve">
          <source>Legacy &lt;code&gt;urlObject&lt;/code&gt;</source>
          <target state="translated">従来の &lt;code&gt;urlObject&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d12363dec3cec522658520bb14b574d2c38d4a9b" translate="yes" xml:space="preserve">
          <source>Legacy API</source>
          <target state="translated">レガシーAPI</target>
        </trans-unit>
        <trans-unit id="fff0473a6005f02c6ee988eeea5c4589c0cee01e" translate="yes" xml:space="preserve">
          <source>Legacy Node.js Error Codes</source>
          <target state="translated">レガシーNode.jsのエラーコード</target>
        </trans-unit>
        <trans-unit id="f2f3e644bfa273f7a62a339c8c67d92c2d023797" translate="yes" xml:space="preserve">
          <source>Legacy Node.js error codes</source>
          <target state="translated">レガシーNode.jsのエラーコード</target>
        </trans-unit>
        <trans-unit id="2c20dd0e85aff7e0a43472ec0bd080ec8d34d100" translate="yes" xml:space="preserve">
          <source>Legacy Streams API (pre Node.js v0.10)</source>
          <target state="translated">レガシーストリーム API (Node.js v0.10以前)</target>
        </trans-unit>
        <trans-unit id="c20be4f6f706ee94b9055b8d2bb127f7bf2f5336" translate="yes" xml:space="preserve">
          <source>Legacy URL API</source>
          <target state="translated">レガシー URL API</target>
        </trans-unit>
        <trans-unit id="c49890f6e5c25894c8780c745056d41986aa3353" translate="yes" xml:space="preserve">
          <source>Legacy assertion mode</source>
          <target state="translated">レガシーアサーションモード</target>
        </trans-unit>
        <trans-unit id="690cbb84b7e6358f848c556655c562eb7808ca07" translate="yes" xml:space="preserve">
          <source>Legacy assertion mode uses the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; in:</source>
          <target state="translated">レガシーアサーションモードは、次の場所で&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等価比較を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d5edbf5c71f5ce411aa5b2426065109df221ad37" translate="yes" xml:space="preserve">
          <source>Legacy mode</source>
          <target state="translated">レガシーモード</target>
        </trans-unit>
        <trans-unit id="cd1cabfb965ba7b42cb732ed586da70b61d4573f" translate="yes" xml:space="preserve">
          <source>Legacy mode uses the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; in:</source>
          <target state="translated">レガシーモードでは、次の場合に&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;抽象等価比較を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="afa63d440d39b6489812f1ff0f0264d475824636" translate="yes" xml:space="preserve">
          <source>Legacy streams API (prior to Node.js 0.10)</source>
          <target state="translated">レガシーストリームAPI (Node.js 0.10以前)</target>
        </trans-unit>
        <trans-unit id="461cb9806496bebf38f62add29762de4f9878b5d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;directoryKeys&lt;/em&gt; be the list of keys of &lt;em&gt;exports&lt;/em&gt; ending in &lt;em&gt;&quot;/&quot;&lt;/em&gt;, sorted by length descending.</source>
          <target state="translated">してみましょう&lt;em&gt;directoryKeysが&lt;/em&gt;のキーのリストも&lt;em&gt;輸出&lt;/em&gt;で終わる&lt;em&gt;「/」&lt;/em&gt;、長さ降順でソートされました。</target>
        </trans-unit>
        <trans-unit id="238d8642800d4e2e91641682a42b5accc596aa90" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;expansionKeys&lt;/em&gt; be the list of keys of &lt;em&gt;matchObj&lt;/em&gt; ending in &lt;em&gt;&quot;/&quot;&lt;/em&gt; or &lt;em&gt;&quot;*&quot;&lt;/em&gt;, sorted by length descending.</source>
          <target state="translated">してみましょう&lt;em&gt;expansionKeysが&lt;/em&gt;のキーのリストも&lt;em&gt;matchObj&lt;/em&gt;で終わる&lt;em&gt;「/」&lt;/em&gt;または&lt;em&gt;「*」&lt;/em&gt;、長さ降順でソートされました。</target>
        </trans-unit>
        <trans-unit id="ed43a3cca8d0829c50efa33ad8a1735744b22695" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;exports&lt;/em&gt; be &lt;em&gt;pjson.exports&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;輸出が&lt;/em&gt;可能&lt;em&gt;pjson.exports&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="81d341d451b4f23afb843c097d49a45ca52c1763" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;format&lt;/em&gt; be the result of &lt;strong&gt;ESM_FORMAT&lt;/strong&gt;(&lt;em&gt;resolved&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;フォーマットは&lt;/em&gt;の結果である&lt;strong&gt;ESM_FORMAT&lt;/strong&gt;（&lt;em&gt;解決&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="bd1edf85bc7e8552161c136541aa74c4bb663ae6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;format&lt;/em&gt; be the result of &lt;strong&gt;ESM_FORMAT&lt;/strong&gt;(&lt;em&gt;resolvedURL&lt;/em&gt;, &lt;em&gt;isMain&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;フォーマットは&lt;/em&gt;の結果である&lt;strong&gt;ESM_FORMAT&lt;/strong&gt;（&lt;em&gt;resolvedURL&lt;/em&gt;、&lt;em&gt;isMain&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="4e2049abb9ba314181946c48daedfb30d6cac2d4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;legacyMainURL&lt;/em&gt; be the result applying the legacy &lt;strong&gt;LOAD_AS_DIRECTORY&lt;/strong&gt; CommonJS resolver to &lt;em&gt;packageURL&lt;/em&gt;, throwing a &lt;em&gt;Module Not Found&lt;/em&gt; error for no resolution.</source>
          <target state="translated">してみましょう&lt;em&gt;legacyMainURLは&lt;/em&gt;レガシー適用結果である&lt;strong&gt;LOAD_AS_DIRECTORY&lt;/strong&gt;にCommonJSリゾルバを&lt;em&gt;たPackageURL&lt;/em&gt;投げ、&lt;em&gt;モジュールが見つかりませんでした&lt;/em&gt;なしの解像度のためのエラーを。</target>
        </trans-unit>
        <trans-unit id="bee1b70b523ce66dc44d421b5c0494d728fae4ca" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;mainExport&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;mainExportが&lt;/em&gt;あること&lt;strong&gt;未定義&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c81e55b25ae69be4df19f32567a31664526acb27" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;matchKey&lt;/em&gt; be the string &lt;em&gt;&quot;./&quot;&lt;/em&gt; concatenated with &lt;em&gt;subpath&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;matchKeyは&lt;/em&gt;文字列である&lt;em&gt;「./」&lt;/em&gt;と連結&lt;em&gt;サブパス&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="382b20b41c3fc6df5c3fd1360c69bcd4bdb1e7b4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageName&lt;/em&gt; be &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="translated">みましょう&lt;em&gt;のpackageNameが&lt;/em&gt;あること&lt;em&gt;未定義&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="07e24d67055d0d7ff4f488268b521db51a5de6d3" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageName&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="translated">みましょう&lt;em&gt;のpackageNameが&lt;/em&gt;あること&lt;strong&gt;未定義&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ce1bb2436be75a438429e67d7dabfd4581d93455" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageSubpath&lt;/em&gt; be &lt;em&gt;&quot;.&quot;&lt;/em&gt; concatenated with the substring of &lt;em&gt;packageSpecifier&lt;/em&gt; from the position at the length of &lt;em&gt;packageName&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;packageSubpathが&lt;/em&gt;あること&lt;em&gt;「」&lt;/em&gt;&lt;em&gt;packageName&lt;/em&gt;の長さの位置からの&lt;em&gt;packageSpecifier&lt;/em&gt;の部分文字列と連結されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d816a69a606558435c2f7bf214574701cee0921" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageSubpath&lt;/em&gt; be &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;packageSubpathが&lt;/em&gt;あること&lt;em&gt;未定義&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3879a2c60ae8d9f31de4e2f2d3064c3f0a2e8df0" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageURL&lt;/em&gt; be the URL resolution of &lt;em&gt;&quot;node_modules/&quot;&lt;/em&gt; concatenated with &lt;em&gt;packageSpecifier&lt;/em&gt;, relative to &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="translated">レッツ&lt;em&gt;たPackageURLは&lt;/em&gt;のURL解像度も&lt;em&gt;「node_modules /」&lt;/em&gt;で連結&lt;em&gt;packageSpecifier&lt;/em&gt;に比べて、&lt;em&gt;parentURL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7ec862b5268642383a7fa543609b749e1b9b9ad8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageURL&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;(&lt;em&gt;parentURL&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;たPackageURLは&lt;/em&gt;の結果である&lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;（&lt;em&gt;parentURL&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="7e82e8cf4cd3d2806cefa31d11b42457fe816e03" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;(&lt;em&gt;packageURL&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;pjsonは&lt;/em&gt;の結果である&lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="dfd3c96f5f0c598b9a6ae47e36bce4121bbd96e8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;(&lt;em&gt;scopeURL&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;pjsonは&lt;/em&gt;の結果である&lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;（&lt;em&gt;scopeURL&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="f236242b656b209b4a987cbd649a5c634a38f6f6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;(&lt;em&gt;url&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;pjsonは&lt;/em&gt;の結果である&lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;（&lt;em&gt;URL&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="d7efdf0ad8c2e8e15cf9c24ae647213041bbfe4d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjsonURL&lt;/em&gt; be the resolution of &lt;em&gt;&quot;package.json&quot;&lt;/em&gt; within &lt;em&gt;packageURL&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;pjsonURLは&lt;/em&gt;解像度も&lt;em&gt;「package.json」&lt;/em&gt;内&lt;em&gt;たPackageURL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d7e6e7ea60e186d1adbc7f7db3cc553716c4ddcc" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;解決&lt;/em&gt;すること&lt;strong&gt;は未定義&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3e85c83e3ea0b6dee0e7b7a3595ed1051fc6f538" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the URL resolution of the concatenation of &lt;em&gt;subpath&lt;/em&gt; and &lt;em&gt;resolvedTarget&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;解決&lt;/em&gt;の連結のURLの解決さ&lt;em&gt;サブパス&lt;/em&gt;と&lt;em&gt;resolvedTarget&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4e2ee789e16379e2ecc056e36d8d03d2ab18d4c4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_EXPORTS_TARGET_RESOLVE&lt;/strong&gt;(&lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;), continuing the loop on abrupt completion.</source>
          <target state="translated">してみましょう&lt;em&gt;解決&lt;/em&gt;の結果で&lt;strong&gt;PACKAGE_EXPORTS_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;targetValue&lt;/em&gt;、&lt;em&gt;サブパス&lt;/em&gt;、）突然の完了時にループを続けます。</target>
        </trans-unit>
        <trans-unit id="243345f737d47e69ad63b915c83c02e8578289f9" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;mainExport&lt;/em&gt;, &lt;em&gt;&quot;&quot;&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">LETが&lt;em&gt;解決&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;mainExport&lt;/em&gt;、&lt;em&gt;&quot;&quot; &lt;/em&gt;、&lt;strong&gt;偽&lt;/strong&gt;、&lt;strong&gt;偽&lt;/strong&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="6e3133d6b4733828af60caaae154fd26afd03ac4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;target&lt;/em&gt;, &lt;em&gt;&quot;&quot;&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;isImports&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">LETが&lt;em&gt;解決&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;ターゲット&lt;/em&gt;、&lt;em&gt;&quot;&quot; &lt;/em&gt;、&lt;strong&gt;偽&lt;/strong&gt;、&lt;em&gt;isImports&lt;/em&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="6c3a2de04bbe5cf6d3001d3a8d92aaf018b3eab6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;target&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;isImports&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">LETが&lt;em&gt;解決&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;ターゲット&lt;/em&gt;、&lt;em&gt;サブパス&lt;/em&gt;、&lt;strong&gt;偽&lt;/strong&gt;、&lt;em&gt;isImports&lt;/em&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="e2acbd60ce691239185ec3a3872052a6f85a88f8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;target&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;strong&gt;true&lt;/strong&gt;, &lt;em&gt;isImports&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">みましょう&lt;em&gt;解決&lt;/em&gt;の結果で&lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;ターゲット&lt;/em&gt;、&lt;em&gt;サブパス&lt;/em&gt;、&lt;strong&gt;真&lt;/strong&gt;、&lt;em&gt;isImports&lt;/em&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="d3668b83f08a9290de67e840d257b71bc618bed9" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, &lt;em&gt;internal&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;), continuing the loop on any &lt;em&gt;Invalid Package Target&lt;/em&gt; error.</source>
          <target state="translated">ましょ&lt;em&gt;解決は&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;targetValue&lt;/em&gt;、&lt;em&gt;サブパス&lt;/em&gt;、&lt;em&gt;パターン&lt;/em&gt;、&lt;em&gt;内部&lt;/em&gt;、&lt;em&gt;条件&lt;/em&gt;の任意のループ継続）、&lt;em&gt;無効なパッケージターゲット&lt;/em&gt;エラーを。</target>
        </trans-unit>
        <trans-unit id="2f774a01f0fa2f390a53fef5b7dc928702cca0b0" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;( &lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, &lt;em&gt;internal&lt;/em&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">LETが&lt;em&gt;解決&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_TARGET_RESOLVE&lt;/strong&gt;（&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;em&gt;targetValue&lt;/em&gt;、&lt;em&gt;サブパス&lt;/em&gt;、&lt;em&gt;パターン&lt;/em&gt;、&lt;em&gt;内部&lt;/em&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="79e52620ed2cc63ebf756b6791942858e8a11582" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMain&lt;/em&gt; be the URL resolution of &lt;em&gt;packageURL&lt;/em&gt;, &quot;/&quot;, and &lt;em&gt;pjson.main&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;resolvedMainは&lt;/em&gt;のURL解像度も&lt;em&gt;たPackageURL&lt;/em&gt;、 &quot;/&quot;、および&lt;em&gt;pjson.main&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3f80afb0110f0ca106fa01e077ca229073f534c6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMatch&lt;/em&gt; be result of &lt;strong&gt;PACKAGE_IMPORTS_EXPORTS_RESOLVE&lt;/strong&gt;( &lt;em&gt;matchKey&lt;/em&gt;, &lt;em&gt;exports&lt;/em&gt;, &lt;em&gt;packageURL&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;resolvedMatchは&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_IMPORTS_EXPORTS_RESOLVE&lt;/strong&gt;（&lt;em&gt;matchKey&lt;/em&gt;、&lt;em&gt;輸出&lt;/em&gt;、&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;strong&gt;偽&lt;/strong&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="b05bce46a2384c271777930978a6e81a4b6eb0ee" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMatch&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_IMPORTS_EXPORTS_RESOLVE&lt;/strong&gt;(&lt;em&gt;specifier&lt;/em&gt;, &lt;em&gt;pjson.imports&lt;/em&gt;, &lt;em&gt;packageURL&lt;/em&gt;, &lt;strong&gt;true&lt;/strong&gt;, &lt;em&gt;conditions&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;resolvedMatchは&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_IMPORTS_EXPORTS_RESOLVE&lt;/strong&gt;（&lt;em&gt;指定&lt;/em&gt;、&lt;em&gt;pjson.imports&lt;/em&gt;、&lt;em&gt;たPackageURL&lt;/em&gt;、&lt;strong&gt;真&lt;/strong&gt;、&lt;em&gt;条件&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="5ff7aedeb5d501d6e47d5396e51dcb3bb302bb04" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedTarget&lt;/em&gt; be the URL resolution of the concatenation of &lt;em&gt;packageURL&lt;/em&gt; and &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;resolvedTargetが&lt;/em&gt;の連結のURL解像度も&lt;em&gt;たPackageURL&lt;/em&gt;と&lt;em&gt;ターゲット&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5df506eb548277050de9692d3004f4e6b5b2aa9c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedURL&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;resolvedURLが&lt;/em&gt;あること&lt;strong&gt;未定義&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="82a293d31acbcb53e85a6f620e95bc60fec4dd62" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;scopeURL&lt;/em&gt; be &lt;em&gt;url&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;scopeURLが&lt;/em&gt;可能&lt;em&gt;URL&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e4c9bffb2320070f980f92960ea814b81c98162c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;selfUrl&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_SELF_RESOLVE&lt;/strong&gt;(&lt;em&gt;packageName&lt;/em&gt;, &lt;em&gt;packageSubpath&lt;/em&gt;, &lt;em&gt;parentURL&lt;/em&gt;).</source>
          <target state="translated">してみましょう&lt;em&gt;selfUrlは&lt;/em&gt;の結果である&lt;strong&gt;PACKAGE_SELF_RESOLVE&lt;/strong&gt;（&lt;em&gt;のpackageName&lt;/em&gt;、&lt;em&gt;packageSubpath&lt;/em&gt;、&lt;em&gt;parentURL&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="08f8d35a848d41b4dfdd85e8913a79da3444f87c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;matchKey&lt;/em&gt; starting at the index of the length of &lt;em&gt;expansionKey&lt;/em&gt; minus one.</source>
          <target state="translated">してみましょう&lt;em&gt;サブパスは、&lt;/em&gt;サブストリングも&lt;em&gt;matchKey&lt;/em&gt;の長さの指標で始まる&lt;em&gt;expansionKey&lt;/em&gt;マイナス1。</target>
        </trans-unit>
        <trans-unit id="723920f325a1eaab25de57cc41b1807f2212eaac" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;matchKey&lt;/em&gt; starting at the index of the length of &lt;em&gt;expansionKey&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;サブパスは、&lt;/em&gt;サブストリングも&lt;em&gt;matchKey&lt;/em&gt;の長さの指標で始まる&lt;em&gt;expansionKey&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e7dfbc5cc254de35a61a79580bcfc017d43a648a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;target&lt;/em&gt; starting at the index of the length of &lt;em&gt;directory&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;サブパスは、&lt;/em&gt;サブストリングなる&lt;em&gt;ターゲット&lt;/em&gt;の長さの指標で始まる&lt;em&gt;ディレクトリ&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3ce6d12ce9449fc911cc9f55c4eb8f68b7cd7887" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;exports[directory]&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;ターゲットは&lt;/em&gt;の値であることが&lt;em&gt;輸出[ディレクトリ]&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="197f5bec0ba9b0be792276cfd7d785ccdea0317a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;exports[packagePath]&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;ターゲットは&lt;/em&gt;の値であることが&lt;em&gt;輸出[packagePath] &lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9b1dd4140c5c0ad8c3c5f937b4044187ed0f524d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;matchObj&lt;/em&gt;[&lt;em&gt;expansionKey&lt;/em&gt;].</source>
          <target state="translated">してみましょう&lt;em&gt;ターゲットは&lt;/em&gt;の値であることが&lt;em&gt;matchObj&lt;/em&gt; [ &lt;em&gt;expansionKey&lt;/em&gt; ]。</target>
        </trans-unit>
        <trans-unit id="b3ca0876445e4e9e9e2d939e4491cfec452fe09a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;matchObj&lt;/em&gt;[&lt;em&gt;matchKey&lt;/em&gt;].</source>
          <target state="translated">してみましょう&lt;em&gt;ターゲットは&lt;/em&gt;の値であることが&lt;em&gt;matchObj&lt;/em&gt; [ &lt;em&gt;matchKey&lt;/em&gt; ]。</target>
        </trans-unit>
        <trans-unit id="078cd06ccd80615abc8b12af507acd7c2c70e6a6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;targetValue&lt;/em&gt; be the value of the &lt;em&gt;p&lt;/em&gt; property in &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="translated">してみましょう&lt;em&gt;targetValueは&lt;/em&gt;の値である&lt;em&gt;p個の&lt;/em&gt;内のプロパティ&lt;em&gt;のターゲット&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c05022795ff4fc80ccdb0eaa2b31a46cf687fbad" translate="yes" xml:space="preserve">
          <source>Let's say that we wanted to have the folder at &lt;code&gt;/usr/lib/node/&amp;lt;some-package&amp;gt;/&amp;lt;some-version&amp;gt;&lt;/code&gt; hold the contents of a specific version of a package.</source>
          <target state="translated">&lt;code&gt;/usr/lib/node/&amp;lt;some-package&amp;gt;/&amp;lt;some-version&amp;gt;&lt;/code&gt; にあるフォルダーに、パッケージの特定のバージョンの内容を保持したいとします。</target>
        </trans-unit>
        <trans-unit id="a50e6d474036a02bdd71609b13906ac7a2a3f78b" translate="yes" xml:space="preserve">
          <source>Library developers that handle their own asynchronous resources performing tasks like I/O, connection pooling, or managing callback queues may use the &lt;code&gt;AsyncResource&lt;/code&gt; JavaScript API so that all the appropriate callbacks are called.</source>
          <target state="translated">I / O、接続プーリング、コールバックキューの管理などのタスクを実行する独自の非同期リソースを処理するライブラリ開発者は、 &lt;code&gt;AsyncResource&lt;/code&gt; JavaScript APIを使用して、適切なすべてのコールバックが呼び出されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="494a09f021c47478da7edc0019571233304558a0" translate="yes" xml:space="preserve">
          <source>Library developers that handle their own asynchronous resources performing tasks like I/O, connection pooling, or managing callback queues may use the &lt;code&gt;AsyncWrap&lt;/code&gt; JavaScript API so that all the appropriate callbacks are called.</source>
          <target state="translated">I / O、接続プール、またはコールバックキューの管理などのタスクを実行する独自の非同期リソースを処理するライブラリ開発者は、 &lt;code&gt;AsyncWrap&lt;/code&gt; JavaScript APIを使用して、適切なすべてのコールバックを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="0ca7e018936674f1d60758637269700311826fef" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#fs_class_fs_readstream&quot;&gt;&lt;code&gt;ReadStream&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;fd&lt;/code&gt; is specified, &lt;a href=&quot;#fs_class_fs_writestream&quot;&gt;&lt;code&gt;WriteStream&lt;/code&gt;&lt;/a&gt; will ignore the &lt;code&gt;path&lt;/code&gt; argument and will use the specified file descriptor. This means that no &lt;code&gt;'open'&lt;/code&gt; event will be emitted. &lt;code&gt;fd&lt;/code&gt; should be blocking; non-blocking &lt;code&gt;fd&lt;/code&gt;s should be passed to &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_class_fs_readstream&quot;&gt; &lt;code&gt;ReadStream&lt;/code&gt; &lt;/a&gt;と同様に、 &lt;code&gt;fd&lt;/code&gt; が指定されている場合、&lt;a href=&quot;#fs_class_fs_writestream&quot;&gt; &lt;code&gt;WriteStream&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;path&lt;/code&gt; 引数を無視し、指定されたファイル記述子を使用します。これは、 &lt;code&gt;'open'&lt;/code&gt; イベントが発行されないことを意味します。 &lt;code&gt;fd&lt;/code&gt; はブロックしているはずです。非ブロッキング &lt;code&gt;fd&lt;/code&gt; は&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="851f0f8a8001316f6429280c11651db02e375ab1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;http#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt; but for HTTPS.</source>
          <target state="translated">&lt;a href=&quot;http#http_http_get_options_callback&quot;&gt; &lt;code&gt;http.get()&lt;/code&gt; &lt;/a&gt;と似ていますが、HTTPS用です。</target>
        </trans-unit>
        <trans-unit id="643276916be86da834620569b341d9177bff2e84" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Workers&lt;/a&gt; and the &lt;a href=&quot;cluster&quot;&gt;&lt;code&gt;cluster&lt;/code&gt; module&lt;/a&gt;, two-way communication can be achieved through inter-thread message passing. Internally, a &lt;code&gt;Worker&lt;/code&gt; has a built-in pair of &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s that are already associated with each other when the &lt;code&gt;Worker&lt;/code&gt; is created. While the &lt;code&gt;MessagePort&lt;/code&gt; object on the parent side is not directly exposed, its functionalities are exposed through &lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt;&lt;code&gt;worker.postMessage()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;#worker_threads_event_message_1&quot;&gt;&lt;code&gt;worker.on('message')&lt;/code&gt;&lt;/a&gt; event on the &lt;code&gt;Worker&lt;/code&gt; object for the parent thread.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Webワーカー&lt;/a&gt;や&lt;a href=&quot;cluster&quot;&gt; &lt;code&gt;cluster&lt;/code&gt; モジュール&lt;/a&gt;と同様に、双方向の通信はスレッド間メッセージパッシングを通じて実現できます。内部的に、 &lt;code&gt;Worker&lt;/code&gt; には組み込みの&lt;a href=&quot;#worker_threads_class_messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;のペアがあり、 &lt;code&gt;Worker&lt;/code&gt; 作成時に互いに関連付けられています。親側の &lt;code&gt;MessagePort&lt;/code&gt; オブジェクトは直接公開されませんが、その機能は、親スレッドの &lt;code&gt;Worker&lt;/code&gt; オブジェクトの&lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt; &lt;code&gt;worker.postMessage()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#worker_threads_event_message_1&quot;&gt; &lt;code&gt;worker.on('message')&lt;/code&gt; &lt;/a&gt;イベントを通じて公開されます。</target>
        </trans-unit>
        <trans-unit id="8dbd9c14005cc13742bdf9a1be2f6cfdb9bd756e" translate="yes" xml:space="preserve">
          <source>Like in CommonJS, files within packages can be accessed by appending a path to the package name.</source>
          <target state="translated">CommonJSと同様に、パッケージ内のファイルは、パッケージ名にパスを追加することでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a306faea3518b2a195011b48f1651813064985f7" translate="yes" xml:space="preserve">
          <source>Like in CommonJS, files within packages can be accessed by appending a path to the package name; unless the package&amp;rsquo;s &lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; contains an &lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, in which case files within packages need to be accessed via the path defined in &lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJSと同様に、パッケージ内のファイルには、パッケージ名にパスを追加することでアクセスできます。パッケージの&lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;packages#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドが含まれている場合を除きます。この場合、パッケージ内のファイルには、&lt;a href=&quot;packages#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;定義されたパスを介してアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="ea34c0a5f160248cca821308caf8a5453398e4e5" translate="yes" xml:space="preserve">
          <source>Like in CommonJS, module files within packages can be accessed by appending a path to the package name unless the package&amp;rsquo;s &lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; contains an &lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field, in which case files within packages can only be accessed via the paths defined in &lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CommonJSと同様に、パッケージの&lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;packages#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドが含まれていない限り、パッケージ内のモジュールファイルにアクセスするには、パッケージ名にパスを追加します。この場合、パッケージ内のファイルには、&lt;a href=&quot;packages#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;定義されたパスを介してのみアクセスできます。。</target>
        </trans-unit>
        <trans-unit id="a4b5a42854b5eed52a170023a09f02fc6d959468" translate="yes" xml:space="preserve">
          <source>Likewise, changing from a non-special protocol to a special protocol is also not permitted:</source>
          <target state="translated">同様に、非特殊プロトコルから特殊プロトコルへの変更も禁止されています。</target>
        </trans-unit>
        <trans-unit id="06dd6783b6493064f30b8f1541b693a42e5ccd3c" translate="yes" xml:space="preserve">
          <source>Limit engine usage to CIPHERS</source>
          <target state="translated">エンジン使用量をCIPHERSに制限</target>
        </trans-unit>
        <trans-unit id="93986208e144b83e2c97be29664bbada85c8e0bd" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DH</source>
          <target state="translated">エンジン使用量をDHに制限</target>
        </trans-unit>
        <trans-unit id="9f5015c701e9eb1d4dc682b1335a18b14503b0f5" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DIGESTS</source>
          <target state="translated">エンジン使用量をDIGESTSに制限</target>
        </trans-unit>
        <trans-unit id="d78c46d774a0e75daea31d4c9cffa2c56e543091" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DSA</source>
          <target state="translated">エンジン使用量をDSAに制限</target>
        </trans-unit>
        <trans-unit id="8732a9dbae5a0828ffbb44002b1242202da2c9de" translate="yes" xml:space="preserve">
          <source>Limit engine usage to EC</source>
          <target state="translated">エンジン使用量をECに制限</target>
        </trans-unit>
        <trans-unit id="cdcab6206e8a488e5549d5ec3e6b1d5da76478c8" translate="yes" xml:space="preserve">
          <source>Limit engine usage to PKEY_ASN1_METHS</source>
          <target state="translated">エンジンの使用を PKEY_ASN1_METHS に制限する。</target>
        </trans-unit>
        <trans-unit id="87885cad223c9bd4e4894b1854a73b7f044844b0" translate="yes" xml:space="preserve">
          <source>Limit engine usage to PKEY_METHDS</source>
          <target state="translated">エンジンの使用量を PKEY_METHDS に制限</target>
        </trans-unit>
        <trans-unit id="4022d5e22f1d34c3d5c81034adf42f203a7574aa" translate="yes" xml:space="preserve">
          <source>Limit engine usage to RAND</source>
          <target state="translated">エンジン使用量をRANDに制限</target>
        </trans-unit>
        <trans-unit id="9deea2b1b94be12b96f38053a33676be8cc7d149" translate="yes" xml:space="preserve">
          <source>Limit engine usage to RSA</source>
          <target state="translated">エンジンの使用をRSAに制限</target>
        </trans-unit>
        <trans-unit id="1450afe809ec7487cbb884eaae49c4b7de1dd9ef" translate="yes" xml:space="preserve">
          <source>Limit the amount of time the parser will wait to receive the complete HTTP headers.</source>
          <target state="translated">パーサーが完全な HTTP ヘッダを受信するまでの待ち時間を制限します。</target>
        </trans-unit>
        <trans-unit id="f203cc5a857dde040cc3f179c0e2e65d49f9ce37" translate="yes" xml:space="preserve">
          <source>Limits maximum incoming headers count. If set to 0, no limit will be applied.</source>
          <target state="translated">受信ヘッダの最大数を制限します。0 に設定すると、制限は適用されません。</target>
        </trans-unit>
        <trans-unit id="9201ce577050bd27894faffcae483339dbb7b78e" translate="yes" xml:space="preserve">
          <source>Limits maximum response headers count. If set to 0, no limit will be applied.</source>
          <target state="translated">応答ヘッダの最大数を制限します。0 に設定されている場合、制限は適用されません。</target>
        </trans-unit>
        <trans-unit id="8830812642973350a9e42a8556343932c261db90" translate="yes" xml:space="preserve">
          <source>Link module dependencies. This method must be called before evaluation, and can only be called once per module.</source>
          <target state="translated">モジュールの依存関係をリンクします。このメソッドは評価の前に呼び出す必要があり、モジュールごとに一度だけ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="80016ec82b8321d01a31f3c875531ddcc399155d" translate="yes" xml:space="preserve">
          <source>Link module dependencies. This method must be called before instantiation, and can only be called once per module.</source>
          <target state="translated">モジュールの依存関係をリンクします。このメソッドは、インスタンス化の前に呼び出す必要があり、モジュールごとに一度だけ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="99751c95e6330f5ee80abdd67407538e0c2ab2d7" translate="yes" xml:space="preserve">
          <source>Linking has failed for this module (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;)</source>
          <target state="translated">このモジュールのリンクに失敗しました（ &lt;code&gt;linkingStatus&lt;/code&gt; は &lt;code&gt;'errored'&lt;/code&gt; errored 'です）</target>
        </trans-unit>
        <trans-unit id="6137853119d6841cba11a0baee353a57f0a1174f" translate="yes" xml:space="preserve">
          <source>Linking to Node.js' own dependencies</source>
          <target state="translated">Node.js自身の依存関係へのリンク</target>
        </trans-unit>
        <trans-unit id="86bcbc2266c976e9c766fb200065c8f5e6acedaf" translate="yes" xml:space="preserve">
          <source>Linking to libraries included with Node.js</source>
          <target state="translated">Node.jsに含まれるライブラリへのリンク</target>
        </trans-unit>
        <trans-unit id="0f9e059087370a1f7ba9840dcffd7d8f1c5943ff" translate="yes" xml:space="preserve">
          <source>List of Deprecated APIs</source>
          <target state="translated">非推奨APIのリスト</target>
        </trans-unit>
        <trans-unit id="9a9e45f29e1adc44c7d9102ea05ee98d0a9c3be7" translate="yes" xml:space="preserve">
          <source>List of deprecated APIs</source>
          <target state="translated">非推奨APIのリスト</target>
        </trans-unit>
        <trans-unit id="65a564ffbe1b350df30a9ce29bace70db2229aaf" translate="yes" xml:space="preserve">
          <source>Listen for new peer-initiated sessions. Returns a &lt;code&gt;Promise&lt;/code&gt; that is resolved once the &lt;code&gt;QuicSocket&lt;/code&gt; is actively listening.</source>
          <target state="translated">新しいピア開始セッションをリッスンします。 &lt;code&gt;QuicSocket&lt;/code&gt; がアクティブにリッスンすると解決される &lt;code&gt;Promise&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1103e732d98418ac8b2c82f0196dadba02f7f6d0" translate="yes" xml:space="preserve">
          <source>Listener functions &lt;strong&gt;must&lt;/strong&gt; only perform &lt;strong&gt;synchronous&lt;/strong&gt; operations. The Node.js process will exit immediately after calling the &lt;code&gt;'exit'&lt;/code&gt; event listeners causing any additional work still queued in the event loop to be abandoned. In the following example, for instance, the timeout will never occur:</source>
          <target state="translated">リスナー関数&lt;strong&gt;は&lt;/strong&gt;&lt;strong&gt;同期&lt;/strong&gt;操作のみを実行する&lt;strong&gt;必要があり&lt;/strong&gt;ます。Node.jsプロセスは、 &lt;code&gt;'exit'&lt;/code&gt; イベントリスナーを呼び出した直後に終了し、イベントループにキューイングされている追加の作業はすべて破棄されます。たとえば、次の例では、タイムアウトは発生しません。</target>
        </trans-unit>
        <trans-unit id="966d499de3b135ab9ccb8f03b02a34e060751ecf" translate="yes" xml:space="preserve">
          <source>Listeners on this event receive a clone of the &lt;code&gt;value&lt;/code&gt; parameter as passed to &lt;code&gt;postMessage()&lt;/code&gt; and no further arguments.</source>
          <target state="translated">このイベントのリスナーは、 &lt;code&gt;postMessage()&lt;/code&gt; に渡された &lt;code&gt;value&lt;/code&gt; パラメーターのクローンを受け取り、それ以上の引数は受け取りません。</target>
        </trans-unit>
        <trans-unit id="77125edc2a436f1f45f34348108362e176b01cda" translate="yes" xml:space="preserve">
          <source>Listeners on this event will receive a clone of the &lt;code&gt;value&lt;/code&gt; parameter as passed to &lt;code&gt;postMessage()&lt;/code&gt; and no further arguments.</source>
          <target state="translated">このイベントのリスナーは、 &lt;code&gt;postMessage()&lt;/code&gt; に渡された &lt;code&gt;value&lt;/code&gt; パラメーターのクローンを受け取り、それ以上の引数は受け取りません。</target>
        </trans-unit>
        <trans-unit id="f36161242db928bc51c18ea3bb01737e480dcba0" translate="yes" xml:space="preserve">
          <source>Listeners registered for the &lt;code&gt;'newListener'&lt;/code&gt; event are passed the event name and a reference to the listener being added.</source>
          <target state="translated">&lt;code&gt;'newListener'&lt;/code&gt; イベントに登録されたリスナーには、イベント名と追加されるリスナーへの参照が渡されます。</target>
        </trans-unit>
        <trans-unit id="c64b06f1e2a3005863a818b791661622631104ad" translate="yes" xml:space="preserve">
          <source>Listeners registered for the &lt;code&gt;'newListener'&lt;/code&gt; event will be passed the event name and a reference to the listener being added.</source>
          <target state="translated">&lt;code&gt;'newListener'&lt;/code&gt; イベントに登録されたリスナーには、イベント名と追加されるリスナーへの参照が渡されます。</target>
        </trans-unit>
        <trans-unit id="263ff6da0a60052822f43bf968da5510ee95e89b" translate="yes" xml:space="preserve">
          <source>Listening for this event will have an effect only on connections established after the addition of the event listener.</source>
          <target state="translated">このイベントのリスニングは、イベントリスナーの追加後に確立された接続にのみ影響を与えます。</target>
        </trans-unit>
        <trans-unit id="0e55c3e5d75f22479bbed5d621f6f8ed741f295b" translate="yes" xml:space="preserve">
          <source>Listening on a file descriptor is not supported on Windows.</source>
          <target state="translated">Windowsでは、ファイル記述子でのリスニングはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6645374b89720ebff452642f3db30a36b512c936" translate="yes" xml:space="preserve">
          <source>Live binding updates or new exports added to &lt;code&gt;module.exports&lt;/code&gt; are not detected for these named exports.</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; に追加されたライブバインディングの更新または新しいエクスポートは、これらの名前付きエクスポートでは検出されません。</target>
        </trans-unit>
        <trans-unit id="0a934789fef476b366bfd30093d89439e844ad1e" translate="yes" xml:space="preserve">
          <source>Load &lt;em&gt;resolved&lt;/em&gt; as module format, &lt;em&gt;format&lt;/em&gt;.</source>
          <target state="translated">モジュール形式、&lt;em&gt;形式&lt;/em&gt;として&lt;em&gt;解決さ&lt;/em&gt;れた負荷。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="efea073c6c15864c713d76af7447f0d00ffffa38" translate="yes" xml:space="preserve">
          <source>Load &lt;em&gt;resolvedURL&lt;/em&gt; as module format, &lt;em&gt;format&lt;/em&gt;.</source>
          <target state="translated">ロード&lt;em&gt;resolvedURLを&lt;/em&gt;モジュール形式として&lt;em&gt;フォーマット&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5b98d38dd9ba6d75f2dcf66b3094803bd93b8a69" translate="yes" xml:space="preserve">
          <source>Load a JSON file</source>
          <target state="translated">JSONファイルの読み込み</target>
        </trans-unit>
        <trans-unit id="358aca8bed2102b20d329cb6c2d609fd3c90cb03" translate="yes" xml:space="preserve">
          <source>Load a Node.js CommonJS module</source>
          <target state="translated">Node.jsのCommonJSモジュールを読み込む</target>
        </trans-unit>
        <trans-unit id="00177c623e9ac0d49cba30da3c54b3c977b49a06" translate="yes" xml:space="preserve">
          <source>Load a Node.js builtin module</source>
          <target state="translated">Node.js ビルドインモジュールを読み込む</target>
        </trans-unit>
        <trans-unit id="b1eef931eb753eece9d6e34ced7f072cb22fcdba" translate="yes" xml:space="preserve">
          <source>Load a WebAssembly module</source>
          <target state="translated">WebAssembly モジュールのロード</target>
        </trans-unit>
        <trans-unit id="7519ad71b3a2bfc0f580ea1764b54f66e24c2e6f" translate="yes" xml:space="preserve">
          <source>Load a standard JavaScript module</source>
          <target state="translated">標準の JavaScript モジュールを読み込む</target>
        </trans-unit>
        <trans-unit id="88ea30e11dcebd6e84150ac5820c69a9d4afdc5f" translate="yes" xml:space="preserve">
          <source>Load an ES module</source>
          <target state="translated">ESモジュールのロード</target>
        </trans-unit>
        <trans-unit id="498893670658c01dd4ac6da4786a9dc9aa6df8e5" translate="yes" xml:space="preserve">
          <source>Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with &lt;code&gt;./configure --openssl-fips&lt;/code&gt;.</source>
          <target state="translated">起動時にOpenSSL構成ファイルをロードします。他の用途の中で、これはNode.jsが &lt;code&gt;./configure --openssl-fips&lt;/code&gt; でビルドされている場合にFIPS準拠の暗号を有効にするために使用できます。</target>
        </trans-unit>
        <trans-unit id="ee62206d8350faeb416823dca497bcc9021efda7" translate="yes" xml:space="preserve">
          <source>Load and set the &lt;code&gt;engine&lt;/code&gt; for some or all OpenSSL functions (selected by flags).</source>
          <target state="translated">一部またはすべてのOpenSSL関数（フラグで選択）の &lt;code&gt;engine&lt;/code&gt; をロードして設定します。</target>
        </trans-unit>
        <trans-unit id="4f514b04ed6b877534da140af8e12cab5016f713" translate="yes" xml:space="preserve">
          <source>Loaders</source>
          <target state="translated">Loaders</target>
        </trans-unit>
        <trans-unit id="864c89092077bd29bba0c7d8aa4a1ee0ee9ad0eb" translate="yes" xml:space="preserve">
          <source>Loading Addons using require()</source>
          <target state="translated">require()を使ってアドオンをロードする</target>
        </trans-unit>
        <trans-unit id="fb686f61ca8f80c8a2b1ea9c221dedc2bee6db94" translate="yes" xml:space="preserve">
          <source>Loading ECMAScript modules no longer requires a command-line flag.</source>
          <target state="translated">ECMAScript モジュールのロードにコマンドラインフラグが不要になりました。</target>
        </trans-unit>
        <trans-unit id="461404ed97327c8f261adb66fd0741495a2c8cbb" translate="yes" xml:space="preserve">
          <source>Loading addons using &lt;code&gt;require()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; を使用したアドオンのロード</target>
        </trans-unit>
        <trans-unit id="f7543238941e199c9c4cd5eb05bb0366a0f0e3cf" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;node_modules&lt;/code&gt; Folders</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; フォルダーからの読み込み</target>
        </trans-unit>
        <trans-unit id="b6335ac2b9f90ba310aefcc05b66c7ffb033560f" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;node_modules&lt;/code&gt; folders</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; フォルダーからの読み込み</target>
        </trans-unit>
        <trans-unit id="679458d12984235f54fda878bb725b25ccc3fbe0" translate="yes" xml:space="preserve">
          <source>Loading from the global folders</source>
          <target state="translated">グローバルフォルダからの読み込み</target>
        </trans-unit>
        <trans-unit id="9cf208e413ac7eafa3a57a4178219033a764fad4" translate="yes" xml:space="preserve">
          <source>Local JSON files can be loaded relative to &lt;code&gt;import.meta.url&lt;/code&gt; with &lt;code&gt;fs&lt;/code&gt; directly:</source>
          <target state="translated">ローカルJSONファイルは、 &lt;code&gt;fs&lt;/code&gt; を &lt;code&gt;import.meta.url&lt;/code&gt; してimport.meta.urlに関連して直接ロードできます。</target>
        </trans-unit>
        <trans-unit id="aab431df60aff2443055adf445c69510d18e5e54" translate="yes" xml:space="preserve">
          <source>Locale-sensitive methods like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot;&gt;&lt;code&gt;String.prototype.localeCompare()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString&quot;&gt;&lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot;&gt; &lt;code&gt;String.prototype.localeCompare()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString&quot;&gt; &lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt; &lt;/a&gt;などのロケール依存のメソッド</target>
        </trans-unit>
        <trans-unit id="c2ef9686a9d07af86ddb6785cca13fffd98fde0f" translate="yes" xml:space="preserve">
          <source>Locale-sensitive or Unicode-aware functions in the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;ロケール依存関数またはUnicode対応関数：</target>
        </trans-unit>
        <trans-unit id="53836d61b88bc9ebe5ff04c57ab3d5e85b3ccd6f" translate="yes" xml:space="preserve">
          <source>Location at which the report will be generated.</source>
          <target state="translated">レポートが生成される場所。</target>
        </trans-unit>
        <trans-unit id="80bbc7111675131489bcf1c8826abc71ac116a58" translate="yes" xml:space="preserve">
          <source>Log TLS key material to a file. The key material is in NSS &lt;code&gt;SSLKEYLOGFILE&lt;/code&gt; format and can be used by software (such as Wireshark) to decrypt the TLS traffic.</source>
          <target state="translated">TLSキーマテリアルをファイルに記録します。キーマテリアルは &lt;code&gt;SSLKEYLOGFILE&lt;/code&gt; 形式であり、ソフトウェア（Wiresharkなど）がTLSトラフィックを復号化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="e500d4d84a92a8c0603625b4b6fd77177fa0a2b3" translate="yes" xml:space="preserve">
          <source>MD5 and SHA-1 are no longer acceptable where collision resistance is required such as digital signatures.</source>
          <target state="translated">MD5やSHA-1は、デジタル署名などの耐衝突性が要求される場所では通用しなくなりました。</target>
        </trans-unit>
        <trans-unit id="86d931caa3fae8fb2300ea8f1d2a55be58e1a3d8" translate="yes" xml:space="preserve">
          <source>MODULE_NOT_FOUND</source>
          <target state="translated">MODULE_NOT_FOUND</target>
        </trans-unit>
        <trans-unit id="e1ec46742fb947b44338032993756f78da0b54d2" translate="yes" xml:space="preserve">
          <source>Made &lt;code&gt;func&lt;/code&gt; parameter optional with custom &lt;code&gt;call_js_cb&lt;/code&gt;.</source>
          <target state="translated">メイド &lt;code&gt;func&lt;/code&gt; カスタムとパラメータオプション &lt;code&gt;call_js_cb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="879e0b7f75a498f58d0f97f9d4112def27a09524" translate="yes" xml:space="preserve">
          <source>Main entry point export</source>
          <target state="translated">メインエントリーポイントのエクスポート</target>
        </trans-unit>
        <trans-unit id="fb480a8a8b26324095457c616935d3f1841b3f51" translate="yes" xml:space="preserve">
          <source>Maintains an internal counter specific to &lt;code&gt;label&lt;/code&gt; and outputs to &lt;code&gt;stdout&lt;/code&gt; the number of times &lt;code&gt;console.count()&lt;/code&gt; has been called with the given &lt;code&gt;label&lt;/code&gt;.</source>
          <target state="translated">内部カウンタ特定維持 &lt;code&gt;label&lt;/code&gt; に出力する &lt;code&gt;stdout&lt;/code&gt; 回数の数 &lt;code&gt;console.count()&lt;/code&gt; 指定されたと呼ばれている &lt;code&gt;label&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6c137a08d00a5877b58efdf0c01b0c1fa6533bc" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;startMark&lt;/code&gt; and &lt;code&gt;endMark&lt;/code&gt; parameters optional.</source>
          <target state="translated">作り &lt;code&gt;startMark&lt;/code&gt; と &lt;code&gt;endMark&lt;/code&gt; パラメータはオプション。</target>
        </trans-unit>
        <trans-unit id="7a81028c010c15e7a86469745fd56a7b314afde0" translate="yes" xml:space="preserve">
          <source>Make a self-contained library use its own symbols in preference to symbols from previously loaded libraries.</source>
          <target state="translated">自己完結型のライブラリでは、以前に読み込まれたライブラリのシンボルを使用せず、独自のシンボルを使用するようにします。</target>
        </trans-unit>
        <trans-unit id="4b7f740d6f3b43eb6e1369cd1861228eda3e73a9" translate="yes" xml:space="preserve">
          <source>Make built-in language features like &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;new Function&lt;/code&gt; that generate code from strings throw an exception instead. This does not affect the Node.js &lt;code&gt;vm&lt;/code&gt; module.</source>
          <target state="translated">組み込みのような言語機能作り &lt;code&gt;eval&lt;/code&gt; と &lt;code&gt;new Function&lt;/code&gt; 文字列からコードを生成する代わりに、例外をスローします。これは、 &lt;code&gt;vm&lt;/code&gt; モジュールには影響しません。</target>
        </trans-unit>
        <trans-unit id="58e5fc2cf8facef6490eacd62f42219179c768b6" translate="yes" xml:space="preserve">
          <source>Makes a request to a secure web server.</source>
          <target state="translated">安全なウェブサーバへのリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="77ef1a913ec8293839a75b3ea0986e203581e748" translate="yes" xml:space="preserve">
          <source>Making handle lifespan shorter than that of the native method</source>
          <target state="translated">ハンドルの寿命をネイティブ方式よりも短くする</target>
        </trans-unit>
        <trans-unit id="e7258012eabbd3b3ddb7a3bfafbe25922453be58" translate="yes" xml:space="preserve">
          <source>Mandatory file extensions</source>
          <target state="translated">必須ファイル拡張子</target>
        </trans-unit>
        <trans-unit id="fbaafc40bfcdb2bb2c788f4fd6fa884d335b1c61" translate="yes" xml:space="preserve">
          <source>Mark an object as not transferable. If &lt;code&gt;object&lt;/code&gt; occurs in the transfer list of a &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt; call, it is ignored.</source>
          <target state="translated">オブジェクトを譲渡不可としてマークします。&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;port.postMessage()&lt;/code&gt; &lt;/a&gt;呼び出しの転送リストで &lt;code&gt;object&lt;/code&gt; が発生した場合、それは無視されます。</target>
        </trans-unit>
        <trans-unit id="0d8dfb09236d715683d3d08dc442c2f7469f51e4" translate="yes" xml:space="preserve">
          <source>Mark an object as not transferable. If &lt;code&gt;object&lt;/code&gt; occurs in the transfer list of a &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;port.postMessage()&lt;/code&gt;&lt;/a&gt; call, it will be ignored.</source>
          <target state="translated">オブジェクトを譲渡不可としてマークします。場合は &lt;code&gt;object&lt;/code&gt; の転送リストに発生し&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;port.postMessage()&lt;/code&gt; &lt;/a&gt;呼び出し、それは無視されます。</target>
        </trans-unit>
        <trans-unit id="c7517849408f94693f21294c1f40a914dd912fa2" translate="yes" xml:space="preserve">
          <source>Marks an &lt;code&gt;ArrayBuffer&lt;/code&gt; as having its contents transferred out of band. Pass the corresponding &lt;code&gt;ArrayBuffer&lt;/code&gt; in the deserializing context to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; の内容を帯域外に転送するものとしてマークします。逆シリアル化コンテキストの対応する &lt;code&gt;ArrayBuffer&lt;/code&gt; を&lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt; に&lt;/a&gt;渡します。</target>
        </trans-unit>
        <trans-unit id="6e9d92daad3190f7c23fb73a149a2e3ed5745cfd" translate="yes" xml:space="preserve">
          <source>Marks an &lt;code&gt;ArrayBuffer&lt;/code&gt; as having its contents transferred out of band. Pass the corresponding &lt;code&gt;ArrayBuffer&lt;/code&gt; in the serializing context to &lt;a href=&quot;#v8_serializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;serializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt; (or return the &lt;code&gt;id&lt;/code&gt; from &lt;a href=&quot;#v8_serializer_getsharedarraybufferid_sharedarraybuffer&quot;&gt;&lt;code&gt;serializer._getSharedArrayBufferId()&lt;/code&gt;&lt;/a&gt; in the case of &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s).</source>
          <target state="translated">&lt;code&gt;ArrayBuffer&lt;/code&gt; の内容を帯域外に転送するものとしてマークします。シリアル化コンテキストの対応する &lt;code&gt;ArrayBuffer&lt;/code&gt; を&lt;a href=&quot;#v8_serializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;serializer.transferArrayBuffer()&lt;/code&gt; に&lt;/a&gt;渡します（または &lt;code&gt;SharedArrayBuffer&lt;/code&gt; の場合は、&lt;a href=&quot;#v8_serializer_getsharedarraybufferid_sharedarraybuffer&quot;&gt; &lt;code&gt;serializer._getSharedArrayBufferId()&lt;/code&gt; &lt;/a&gt;から &lt;code&gt;id&lt;/code&gt; を返します）。</target>
        </trans-unit>
        <trans-unit id="1e2ad0793ef76124b1034c1cea3ed4e613e126d0" translate="yes" xml:space="preserve">
          <source>Marks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.</source>
          <target state="translated">リクエストをアボートするマークを付けます。これを呼び出すと、レスポンスに残っているデータは削除され、ソケットは破棄されます。</target>
        </trans-unit>
        <trans-unit id="0f845dbfd32891203afbc6c332195efbd6298479" translate="yes" xml:space="preserve">
          <source>Max header size in &lt;code&gt;http_parser&lt;/code&gt; was set to 8KB.</source>
          <target state="translated">&lt;code&gt;http_parser&lt;/code&gt; の最大ヘッダーサイズが8KBに設定されました。</target>
        </trans-unit>
        <trans-unit id="767a965b42cd76eccbb5ffdd8ab7b02f20159af6" translate="yes" xml:space="preserve">
          <source>Measure the memory known to V8 and used by all contexts known to the current V8 isolate, or the main context.</source>
          <target state="translated">V8で知られているメモリを測定し、現在のV8アイソレートで知られているすべてのコンテキスト、またはメインコンテキストで使用されているメモリを測定します。</target>
        </trans-unit>
        <trans-unit id="f21ff80ab9cf701ac46a3167e21f3037801508fd" translate="yes" xml:space="preserve">
          <source>Measuring how long it takes to load dependencies</source>
          <target state="translated">依存関係のロードにかかる時間を測定する</target>
        </trans-unit>
        <trans-unit id="9128f1b632621e70aa390a4486c36bb163baf0c8" translate="yes" xml:space="preserve">
          <source>Measuring the duration of async operations</source>
          <target state="translated">非同期操作の継続時間の測定</target>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="translated">メモリ管理</target>
        </trans-unit>
        <trans-unit id="ef1eb41c5de244b704fcf15f3bc0f13c999a4f71" translate="yes" xml:space="preserve">
          <source>Memory Usage Tuning</source>
          <target state="translated">メモリ使用量の調整</target>
        </trans-unit>
        <trans-unit id="1c5536b98ab016fe61807564b4a34c80211a7613" translate="yes" xml:space="preserve">
          <source>Memory management</source>
          <target state="translated">メモリ管理</target>
        </trans-unit>
        <trans-unit id="bb3fa3d76a937e4a81d7780c47e49272ec406513" translate="yes" xml:space="preserve">
          <source>Memory usage tuning</source>
          <target state="translated">メモリ使用量の調整</target>
        </trans-unit>
        <trans-unit id="2a2bb3d6a7f5790d759cba72823f3811d734fe09" translate="yes" xml:space="preserve">
          <source>MessageChannel</source>
          <target state="translated">MessageChannel</target>
        </trans-unit>
        <trans-unit id="0ce120a41bf22d68c9fab53d50c8a38d4440d65a" translate="yes" xml:space="preserve">
          <source>MessagePort</source>
          <target state="translated">MessagePort</target>
        </trans-unit>
        <trans-unit id="8d546a6dea9ff90d517b51c25b35319931ae4e04" translate="yes" xml:space="preserve">
          <source>Meta</source>
          <target state="translated">Meta</target>
        </trans-unit>
        <trans-unit id="532bb72b545e75db867501d58fef21423a35b550" translate="yes" xml:space="preserve">
          <source>Method(s) to implement</source>
          <target state="translated">実装方法</target>
        </trans-unit>
        <trans-unit id="be11d28d855c168de0db39411d017ffe8e5d8b28" translate="yes" xml:space="preserve">
          <source>Methods that return TLS connection metadata (e.g. &lt;a href=&quot;#tls_tlssocket_getpeercertificate_detailed&quot;&gt;&lt;code&gt;tls.TLSSocket.getPeerCertificate()&lt;/code&gt;&lt;/a&gt; will only return data while the connection is open.</source>
          <target state="translated">TLS接続メタデータ（&lt;a href=&quot;#tls_tlssocket_getpeercertificate_detailed&quot;&gt; &lt;code&gt;tls.TLSSocket.getPeerCertificate()&lt;/code&gt; など)&lt;/a&gt;を返すメソッドは、接続が開いている間のみデータを返します。</target>
        </trans-unit>
        <trans-unit id="e17fb7615f69e41f040e33f83d9d9ed54f866a6a" translate="yes" xml:space="preserve">
          <source>Migrates the &lt;code&gt;QuicClientSession&lt;/code&gt; to the given &lt;code&gt;QuicSocket&lt;/code&gt; instance. If the new &lt;code&gt;QuicSocket&lt;/code&gt; has not yet been bound to a local UDP port, it will be bound prior to attempting the migration.</source>
          <target state="translated">&lt;code&gt;QuicClientSession&lt;/code&gt; を指定された &lt;code&gt;QuicSocket&lt;/code&gt; インスタンスに移行します。新しい &lt;code&gt;QuicSocket&lt;/code&gt; がまだローカルUDPポートにバインドされていない場合は、移行を試みる前にバインドされます。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="ba3efaca5f13d398812424482d57e438a3b44995" translate="yes" xml:space="preserve">
          <source>Modern Web browsers follow the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt; which aliases both &lt;code&gt;'latin1'&lt;/code&gt; and &lt;code&gt;'ISO-8859-1'&lt;/code&gt; to &lt;code&gt;'win-1252'&lt;/code&gt;. This means that while doing something like &lt;code&gt;http.get()&lt;/code&gt;, if the returned charset is one of those listed in the WHATWG specification it is possible that the server actually returned &lt;code&gt;'win-1252'&lt;/code&gt;-encoded data, and using &lt;code&gt;'latin1'&lt;/code&gt; encoding may incorrectly decode the characters.</source>
          <target state="translated">最新のWebブラウザーは、&lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWGエンコーディング規格に準拠し&lt;/a&gt;ており、 &lt;code&gt;'latin1'&lt;/code&gt; と &lt;code&gt;'ISO-8859-1'&lt;/code&gt; 両方を &lt;code&gt;'win-1252'&lt;/code&gt; エイリアスします。これは、 &lt;code&gt;http.get()&lt;/code&gt; のようなことをしているときに、返された文字セットがWHATWG仕様にリストされているものの1つである場合、サーバーが実際に &lt;code&gt;'win-1252'&lt;/code&gt; エンコードデータを返し、 &lt;code&gt;'latin1'&lt;/code&gt; エンコーディングを使用すると、文字を正しくデコードしません。</target>
        </trans-unit>
        <trans-unit id="65a15f6dfa2e4554da23919059f34e286d29b89d" translate="yes" xml:space="preserve">
          <source>Modifier support varies throughout different terminals. They will mostly be ignored, if not supported.</source>
          <target state="translated">修飾子のサポートは端末によって異なります。サポートされていない場合はほとんど無視されます。</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="5e5ee885e59c3666b818d0a51c7fee388b17e46d" translate="yes" xml:space="preserve">
          <source>Modifies the permissions on the file. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="translated">ファイルの権限を変更します。 &lt;code&gt;Promise&lt;/code&gt; 成功時に引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="e955b90e741d4c82b9b85c4cc9aa35c010f53aa4" translate="yes" xml:space="preserve">
          <source>Modifying a file rather than replacing it may require a flags mode of &lt;code&gt;'r+'&lt;/code&gt; rather than the default mode &lt;code&gt;'w'&lt;/code&gt;.</source>
          <target state="translated">ファイルを置き換えるのではなく変更するには、デフォルトモードの &lt;code&gt;'w'&lt;/code&gt; ではなく &lt;code&gt;'r+'&lt;/code&gt; フラグモードが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="59e3b2e3807f64b859509b97033f8b164102e074" translate="yes" xml:space="preserve">
          <source>Modifying a file rather than replacing it may require the &lt;code&gt;flag&lt;/code&gt; option to be set to &lt;code&gt;'r+'&lt;/code&gt; rather than the default &lt;code&gt;'w'&lt;/code&gt;.</source>
          <target state="translated">ファイルを置き換えるのではなく変更するには、 &lt;code&gt;flag&lt;/code&gt; オプションをデフォルトの &lt;code&gt;'w'&lt;/code&gt; ではなく &lt;code&gt;'r+'&lt;/code&gt; 設定する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e5cd669deb64182bb1486f9edc35fe42bd6d7f56" translate="yes" xml:space="preserve">
          <source>Modifying the Default TLS Cipher suite</source>
          <target state="translated">デフォルトの TLS 暗号スイートの変更</target>
        </trans-unit>
        <trans-unit id="f731a0f634fbf6df66f86fafb91a04dc2f63b03b" translate="yes" xml:space="preserve">
          <source>Modifying the default TLS cipher suite</source>
          <target state="translated">デフォルトの TLS 暗号スイートの変更</target>
        </trans-unit>
        <trans-unit id="386917eb344492726f971a2580c72bd0600c3297" translate="yes" xml:space="preserve">
          <source>Modifying the new &lt;code&gt;Buffer&lt;/code&gt; slice will modify the memory in the original &lt;code&gt;Buffer&lt;/code&gt; because the allocated memory of the two objects overlap.</source>
          <target state="translated">新しい &lt;code&gt;Buffer&lt;/code&gt; スライスを変更すると、2つのオブジェクトに割り当てられたメモリが重複するため、元の &lt;code&gt;Buffer&lt;/code&gt; メモリが変更されます。</target>
        </trans-unit>
        <trans-unit id="9a7606a01db550a47662b629f247d6367bcf7282" translate="yes" xml:space="preserve">
          <source>Module Caching Caveats</source>
          <target state="translated">モジュールキャッシングの注意点</target>
        </trans-unit>
        <trans-unit id="3d1eed928b27314ba7b9856337b096b1aba2610f" translate="yes" xml:space="preserve">
          <source>Module caching caveats</source>
          <target state="translated">モジュールキャッシュの注意点</target>
        </trans-unit>
        <trans-unit id="83624ccd7b5527bbf857a1fbcf3723edba0da40a" translate="yes" xml:space="preserve">
          <source>Module registration</source>
          <target state="translated">モジュール登録</target>
        </trans-unit>
        <trans-unit id="7575e8c6375f9ecce4bf5b77b70a45f98b8cd781" translate="yes" xml:space="preserve">
          <source>Module.createRequireFromPath() is deprecated. Please use &lt;a href=&quot;module#module_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Module.createRequireFromPath（）は非推奨です。代わりに&lt;a href=&quot;module#module_module_createrequire_filename&quot;&gt; &lt;code&gt;module.createRequire()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="7939217a1ff65e34d944c1af418682a3959683e6" translate="yes" xml:space="preserve">
          <source>Module.createRequireFromPath() is deprecated. Please use &lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Module.createRequireFromPath（）は非推奨です。代わりに&lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt; &lt;code&gt;module.createRequire()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="85946d17e9abcad5d8c5d7ff7e55541e63757d01" translate="yes" xml:space="preserve">
          <source>Modules are cached after the first time they are loaded. This means (among other things) that every call to &lt;code&gt;require('foo')&lt;/code&gt; will get exactly the same object returned, if it would resolve to the same file.</source>
          <target state="translated">モジュールは、最初にロードされた後にキャッシュされます。これは、（とりわけ） &lt;code&gt;require('foo')&lt;/code&gt; を呼び出すたびに、同じファイルに解決される場合、まったく同じオブジェクトが返されることを意味します。</target>
        </trans-unit>
        <trans-unit id="9328fdb06dec7493c1ac0a3bc42b0f79daf79a03" translate="yes" xml:space="preserve">
          <source>Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from &lt;code&gt;node_modules&lt;/code&gt; folders), it is not a &lt;em&gt;guarantee&lt;/em&gt; that &lt;code&gt;require('foo')&lt;/code&gt; will always return the exact same object, if it would resolve to different files.</source>
          <target state="translated">モジュールは、解決されたファイル名に基づいてキャッシュされます。モジュールは、（ &lt;code&gt;node_modules&lt;/code&gt; フォルダーからの読み込み）呼び出しモジュールの場所に基づいて異なるファイル名に解決される可能性があるため、 &lt;code&gt;require('foo')&lt;/code&gt; が異なるファイルに解決する場合、常にまったく同じオブジェクトを返す&lt;em&gt;保証&lt;/em&gt;はありません。。</target>
        </trans-unit>
        <trans-unit id="28e1343a6af7d08fdfab4981e72800f3eb87862a" translate="yes" xml:space="preserve">
          <source>Modules are cached in this object when they are required. By deleting a key value from this object, the next &lt;code&gt;require&lt;/code&gt; will reload the module. This does not apply to &lt;a href=&quot;addons&quot;&gt;native addons&lt;/a&gt;, for which reloading will result in an error.</source>
          <target state="translated">モジュールは、必要なときにこのオブジェクトにキャッシュされます。このオブジェクトからキー値を削除することにより、次の &lt;code&gt;require&lt;/code&gt; はモジュールをリロードします。これは、再ロードするとエラーが発生する&lt;a href=&quot;addons&quot;&gt;ネイティブアドオンに&lt;/a&gt;は適用されません。</target>
        </trans-unit>
        <trans-unit id="edcb0ef2ab0accce5f6e12688eb452c06c2902b5" translate="yes" xml:space="preserve">
          <source>Modules are loaded multiple times if the &lt;code&gt;import&lt;/code&gt; specifier used to resolve them has a different query or fragment.</source>
          <target state="translated">モジュールの解決に使用される &lt;code&gt;import&lt;/code&gt; 指定子に異なるクエリまたはフラグメントがある場合、モジュールは複数回ロードされます。</target>
        </trans-unit>
        <trans-unit id="00d05571b964dddda3ae3561348588cfd26ddbfa" translate="yes" xml:space="preserve">
          <source>Modules that have an invalid &lt;code&gt;main&lt;/code&gt; entry (e.g., &lt;code&gt;./does-not-exist.js&lt;/code&gt;) and also have an &lt;code&gt;index.js&lt;/code&gt; file in the top level directory will resolve the &lt;code&gt;index.js&lt;/code&gt; file. That is deprecated and is going to throw an error in future Node.js versions.</source>
          <target state="translated">無効たモジュール &lt;code&gt;main&lt;/code&gt; エントリ（例えば、 &lt;code&gt;./does-not-exist.js&lt;/code&gt; を）しても、持って &lt;code&gt;index.js&lt;/code&gt; トップレベルディレクトリ内のファイルを解決します &lt;code&gt;index.js&lt;/code&gt; ファイルを。これは非推奨であり、将来のNode.jsバージョンでエラーをスローする予定です。</target>
        </trans-unit>
        <trans-unit id="9f8cb9d5d814826c94ca425c65a80591a56c453c" translate="yes" xml:space="preserve">
          <source>Modules will be loaded multiple times if the &lt;code&gt;import&lt;/code&gt; specifier used to resolve them have a different query or fragment.</source>
          <target state="translated">モジュールの解決に使用される &lt;code&gt;import&lt;/code&gt; 指定子に異なるクエリまたはフラグメントがある場合、モジュールは複数回ロードされます。</target>
        </trans-unit>
        <trans-unit id="5d23e88306931082f27761862d8b5520ea16bd97" translate="yes" xml:space="preserve">
          <source>Modules: &lt;code&gt;module&lt;/code&gt; API</source>
          <target state="translated">モジュール： &lt;code&gt;module&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="65b4968c8aff51a834a13c32e250f01641e1418e" translate="yes" xml:space="preserve">
          <source>Modules: CommonJS modules</source>
          <target state="translated">モジュール。CommonJSモジュール</target>
        </trans-unit>
        <trans-unit id="8a0535905b5a082c8292472c944f2e1e2d049e25" translate="yes" xml:space="preserve">
          <source>Modules: ECMAScript modules</source>
          <target state="translated">モジュール。ECMAScript モジュール</target>
        </trans-unit>
        <trans-unit id="2b15f98211b2d493bfab305d048b6c3b3ba030fd" translate="yes" xml:space="preserve">
          <source>Modules: Packages</source>
          <target state="translated">モジュール。パッケージ</target>
        </trans-unit>
        <trans-unit id="90fbb2012f6d47e34578586d91fdc3981db8daf4" translate="yes" xml:space="preserve">
          <source>More accurate &lt;a href=&quot;repl#repl_repl&quot;&gt;REPL&lt;/a&gt; line editing</source>
          <target state="translated">より正確な&lt;a href=&quot;repl#repl_repl&quot;&gt;REPL&lt;/a&gt;行編集</target>
        </trans-unit>
        <trans-unit id="0ecdbeb6845d999cf7003e1812bec6e641a5510d" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;fs&lt;/code&gt; operations accept filepaths that may be specified in the form of a string, a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object using the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="translated">ほとんどの &lt;code&gt;fs&lt;/code&gt; 操作は、 &lt;code&gt;file:&lt;/code&gt; プロトコルを使用して文字列、&lt;a href=&quot;buffer#buffer_buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;オブジェクトの形式で指定できるファイルパスを受け入れます。</target>
        </trans-unit>
        <trans-unit id="82cff11b4bb5481a6d7ac80aec40ddd830fc32bf" translate="yes" xml:space="preserve">
          <source>Most applications should consider using the new &lt;code&gt;KeyObject&lt;/code&gt; API instead of passing keys as strings or &lt;code&gt;Buffer&lt;/code&gt;s due to improved security features.</source>
          <target state="translated">セキュリティ機能が向上しているため、ほとんどのアプリケーションでは、キーを文字列や &lt;code&gt;Buffer&lt;/code&gt; として渡す代わりに、新しい &lt;code&gt;KeyObject&lt;/code&gt; APIの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="20cb9dba8d1ec1bda32d3869a385011e92bc7b15" translate="yes" xml:space="preserve">
          <source>Most asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as an &lt;em&gt;error-first callback&lt;/em&gt;. With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the &lt;code&gt;Error&lt;/code&gt; object (if any) passed as the first argument. If no error was raised, the first argument will be passed as &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Node.jsコアAPIによって公開されるほとんどの非同期メソッドは、&lt;em&gt;エラー優先コールバック&lt;/em&gt;と呼ばれる慣用的なパターンに従い&lt;em&gt;ます&lt;/em&gt;。このパターンでは、コールバック関数が引数としてメソッドに渡されます。操作が完了するか、エラーが発生すると、最初の引数として渡された &lt;code&gt;Error&lt;/code&gt; オブジェクト（存在する場合）を使用してコールバック関数が呼び出されます。エラーが発生しなかった場合、最初の引数は &lt;code&gt;null&lt;/code&gt; として渡されます。</target>
        </trans-unit>
        <trans-unit id="cbf34ac485339ebd83193dd184575f98649766ac" translate="yes" xml:space="preserve">
          <source>Most asynchronous methods that accept a &lt;code&gt;callback&lt;/code&gt; function will accept an &lt;code&gt;Error&lt;/code&gt; object passed as the first argument to that function. If that first argument is not &lt;code&gt;null&lt;/code&gt; and is an instance of &lt;code&gt;Error&lt;/code&gt;, then an error occurred that should be handled.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数を受け入れるほとんどの非同期メソッドは、その関数の最初の引数として渡される &lt;code&gt;Error&lt;/code&gt; オブジェクトを受け入れます。最初の引数が &lt;code&gt;null&lt;/code&gt; ではなく、 &lt;code&gt;Error&lt;/code&gt; のインスタンスである場合、処理する必要のあるエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="2b8ceb2fddd337b5e111a9cd6250634bdec17c99" translate="yes" xml:space="preserve">
          <source>Most operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash.</source>
          <target state="translated">ほとんどのオペレーティングシステムでは、常に開いているファイルディスクリプタの数が制限されているため、操作が完了したらディスクリプタを閉じることが重要です。これに失敗すると、メモリリークが発生し、最終的にアプリケーションがクラッシュする原因となります。</target>
        </trans-unit>
        <trans-unit id="765bf483729f04bce1c6200d45ac7f5ae7b59417" translate="yes" xml:space="preserve">
          <source>Moves running process into background. Type &lt;code&gt;fg&lt;/code&gt; and press</source>
          <target state="translated">実行中のプロセスをバックグラウンドに移動します。 &lt;code&gt;fg&lt;/code&gt; と入力し、</target>
        </trans-unit>
        <trans-unit id="9dc05d950cd4618e0efb087a5472232826d34e84" translate="yes" xml:space="preserve">
          <source>Moves running process into background. Type &lt;code&gt;fg&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt; to return.</source>
          <target state="translated">実行中のプロセスをバックグラウンドに移動します。タイプ &lt;code&gt;fg&lt;/code&gt; を押して &lt;code&gt;enter&lt;/code&gt; 、リターンに。</target>
        </trans-unit>
        <trans-unit id="18cebb6899365ed285fb7b9339be5b27f9d9ab5f" translate="yes" xml:space="preserve">
          <source>Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called &quot;emitters&quot;) emit named events that cause &lt;code&gt;Function&lt;/code&gt; objects (&quot;listeners&quot;) to be called.</source>
          <target state="translated">Node.jsコアAPIの大部分は、特定の種類のオブジェクト（「エミッター」と呼ばれる）が名前付きイベントを発行して、 &lt;code&gt;Function&lt;/code&gt; オブジェクト（「リスナー」）を呼び出させる、慣用的な非同期イベント駆動型アーキテクチャーを中心に構築されています。</target>
        </trans-unit>
        <trans-unit id="51b9e9e4f853d5c9f436fb23cb6c1226b9b3c6d3" translate="yes" xml:space="preserve">
          <source>Multiple alternatives may be specified, for instance: &lt;code&gt;'h2=&quot;example.org:81&quot;, h2=&quot;:82&quot;'&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;'h2=&quot;example.org:81&quot;, h2=&quot;:82&quot;'&lt;/code&gt; 、複数の代替を指定できます。</target>
        </trans-unit>
        <trans-unit id="4a5479027d01ceffdeaae68128ea7b4adf28374c" translate="yes" xml:space="preserve">
          <source>Multiple comma-separated &lt;code&gt;section&lt;/code&gt; names may be specified in the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable: &lt;code&gt;NODE_DEBUG=fs,net,tls&lt;/code&gt;.</source>
          <target state="translated">複数のコンマ区切りの &lt;code&gt;section&lt;/code&gt; 名を &lt;code&gt;NODE_DEBUG&lt;/code&gt; 環境変数で指定できます： &lt;code&gt;NODE_DEBUG=fs,net,tls&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27f2ab40edb60bf40787bb6edf23d36b9c543077" translate="yes" xml:space="preserve">
          <source>Multiple concatenated gzip file members are supported now.</source>
          <target state="translated">複数の連結された gzip ファイルのメンバがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f4215a6b0ba9f7218f437607dda8f17b06a6cd29" translate="yes" xml:space="preserve">
          <source>Multiple empty entries are now parsed correctly (e.g. &lt;code&gt;&amp;amp;=&amp;amp;=&lt;/code&gt;).</source>
          <target state="translated">複数の空のエントリが正しく解析されるようになりました（例： &lt;code&gt;&amp;amp;=&amp;amp;=&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c11e7417524b09c3c63dbb1d8edf3a8d679325c8" translate="yes" xml:space="preserve">
          <source>Multiple values were provided for an HTTP/2 header field that was required to have only a single value.</source>
          <target state="translated">1つの値しか持たないように要求されたHTTP/2ヘッダーフィールドに複数の値が提供されました。</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="0cfd7073a743f5ff4fda510240475719d7850d63" translate="yes" xml:space="preserve">
          <source>N-API</source>
          <target state="translated">N-API</target>
        </trans-unit>
        <trans-unit id="90cbc0e18027d4869385351bdb9ade6021ccdf03" translate="yes" xml:space="preserve">
          <source>N-API (pronounced N as in the letter, followed by API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (for example, V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one major version to run on later major versions of Node.js without recompilation. The &lt;a href=&quot;https://nodejs.org/en/docs/guides/abi-stability/&quot;&gt;ABI Stability&lt;/a&gt; guide provides a more in-depth explanation.</source>
          <target state="translated">N-API（レターのようにNと発音し、その後にAPIが続く）は、ネイティブアドオンを構築するためのAPIです。これは、基盤となるJavaScriptランタイム（V8など）から独立しており、Node.js自体の一部として維持されます。このAPIは、Node.jsのバージョン間で安定したApplication Binary Interface（ABI）になります。これは、基になるJavaScriptエンジンの変更からアドオンを隔離し、1つのメジャーバージョン用にコンパイルされたモジュールを、再コンパイルせずにNode.jsの新しいメジャーバージョンで実行できるようにすることを目的としています。&lt;a href=&quot;https://nodejs.org/en/docs/guides/abi-stability/&quot;&gt;ABI安定性&lt;/a&gt;ガイドは、より詳細な説明を提供します。</target>
        </trans-unit>
        <trans-unit id="334e1de2311ffce54fb9769c28586c411d51f5fe" translate="yes" xml:space="preserve">
          <source>N-API Callback types</source>
          <target state="translated">N-API コールバックタイプ</target>
        </trans-unit>
        <trans-unit id="5ada9d09ff541a5d3e10d36683dca70ab044cf65" translate="yes" xml:space="preserve">
          <source>N-API Memory Management types</source>
          <target state="translated">N-API メモリ管理タイプ</target>
        </trans-unit>
        <trans-unit id="1f918c2169b9c207f636baeefc2f5e1825de6091" translate="yes" xml:space="preserve">
          <source>N-API Version Matrix</source>
          <target state="translated">N-APIバージョンマトリックス</target>
        </trans-unit>
        <trans-unit id="f8f29003d244cabc299bb893542ca04b223101d1" translate="yes" xml:space="preserve">
          <source>N-API callback types</source>
          <target state="translated">N-API コールバックタイプ</target>
        </trans-unit>
        <trans-unit id="d363f5ed275336e6c49002be4a2ef6344b73275b" translate="yes" xml:space="preserve">
          <source>N-API defines the &lt;code&gt;napi_async_work&lt;/code&gt; structure which is used to manage asynchronous workers. Instances are created/deleted with &lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt;&lt;code&gt;napi_create_async_work&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">N-APIは、非同期ワーカーの管理に使用される &lt;code&gt;napi_async_work&lt;/code&gt; 構造を定義します。インスタンスは、&lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt; &lt;code&gt;napi_create_async_work&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; &lt;/a&gt;を使用して作成/削除されます。</target>
        </trans-unit>
        <trans-unit id="4cd2329041a56e471a3596295b8fded33cd92bcd" translate="yes" xml:space="preserve">
          <source>N-API defines the &lt;code&gt;napi_work&lt;/code&gt; structure which is used to manage asynchronous workers. Instances are created/deleted with &lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt;&lt;code&gt;napi_create_async_work&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">N-APIは、非同期ワーカーの管理に使用される &lt;code&gt;napi_work&lt;/code&gt; 構造を定義します。インスタンスは&lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt; &lt;code&gt;napi_create_async_work&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; &lt;/a&gt;で作成/削除されます。</target>
        </trans-unit>
        <trans-unit id="88f54237d497e37e1e102b35a1c9c4125fb96d0f" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to create all types of JavaScript values. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values&quot;&gt;Section 6&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-APIは、すべてのタイプのJavaScript値を作成する一連のAPIを公開します。これらのタイプの一部は、&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values&quot;&gt;セクション6&lt;/a&gt;に記載されています。</target>
        </trans-unit>
        <trans-unit id="ad5509989753e7e47a4ed4e95d74d5238fc745c6" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-APIは、JavaScriptオブジェクトのプロパティを取得および設定するための一連のAPIを公開します。これらのタイプのいくつかは、&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;セクション7&lt;/a&gt;に記載されています。</target>
        </trans-unit>
        <trans-unit id="be7ee8aa91b06eb2761965bea9b3ca7d13159118" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-operations-on-objects&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-APIは、JavaScriptオブジェクトのプロパティを取得および設定するためのAPIセットを公開しています。これらのタイプの一部は、&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-operations-on-objects&quot;&gt;セクション7&lt;/a&gt;に記載されています。</target>
        </trans-unit>
        <trans-unit id="62b7e76dd3e6c6d68488dbe2b8f2a01306cdd1b3" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">N-APIは、JavaScript値に対していくつかの抽象的な操作を実行するための一連のAPIを公開します。これらの操作の一部は、&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;セクション7&lt;/a&gt;に記載されています。</target>
        </trans-unit>
        <trans-unit id="3c61dcfa47476fc6fa41772f59614e57871819b0" translate="yes" xml:space="preserve">
          <source>N-API exposes the following fundamental datatypes as abstractions that are consumed by the various APIs. These APIs should be treated as opaque, introspectable only with other N-API calls.</source>
          <target state="translated">N-API は、様々な API によって消費される抽象化として、以下の基本的なデータ型を公開しています。これらのAPIは、他のN-API呼び出しでのみ、不透明でイントロスペクト可能なものとして扱われるべきです。</target>
        </trans-unit>
        <trans-unit id="561e1622d71e550f526caaa66deabdc9dfbdc3cb" translate="yes" xml:space="preserve">
          <source>N-API is an API for building native Addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; APIs, the functions available in the N-API are used.</source>
          <target state="translated">N-APIは、ネイティブアドオンを構築するためのAPIです。基盤となるJavaScriptランタイム（V8など）から独立しており、Node.js自体の一部として維持されます。このAPIは、Node.jsのバージョン間で安定したApplication Binary Interface（ABI）になります。これは、基になるJavaScriptエンジンの変更からアドオンを隔離し、1つのバージョン用にコンパイルされたモジュールを再コンパイルせずに新しいバージョンのNode.jsで実行できるようにすることを目的としています。アドオンは、このドキュメントで概説されているのと同じアプローチ/ツール（node-gypなど）で構築/パッケージ化されています。唯一の違いは、ネイティブコードで使用されるAPIのセットです。&lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Node.js&lt;/a&gt; APIにV8またはNative Abstractionsを使用する代わりに、N-APIで使用可能な関数が使用されます。</target>
        </trans-unit>
        <trans-unit id="89fbace17d4b56b76ef0aeff0489594e4cfa0aef" translate="yes" xml:space="preserve">
          <source>N-API is an API for building native addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; APIs, the functions available in the N-API are used.</source>
          <target state="translated">N-APIは、ネイティブアドオンを構築するためのAPIです。基盤となるJavaScriptランタイム（V8など）から独立しており、Node.js自体の一部として維持されます。このAPIは、Node.jsのバージョン間で安定したアプリケーションバイナリインターフェイス（ABI）になります。これは、基盤となるJavaScriptエンジンの変更からアドオンを分離し、あるバージョン用にコンパイルされたモジュールを、再コンパイルせずにNode.jsの新しいバージョンで実行できるようにすることを目的としています。アドオンは、このドキュメントで概説されているのと同じアプローチ/ツール（node-gypなど）で構築/パッケージ化されています。唯一の違いは、ネイティブコードで使用されるAPIのセットです。&lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Node.js&lt;/a&gt; APIにV8またはネイティブ抽象化を使用する代わりに、N-APIで使用可能な関数が使用されます。</target>
        </trans-unit>
        <trans-unit id="fa01c7fdc1743fef1e453e6b6b825c139cad6a5d" translate="yes" xml:space="preserve">
          <source>N-API memory management types</source>
          <target state="translated">N-API メモリ管理タイプ</target>
        </trans-unit>
        <trans-unit id="0738955b59acf88770860528a15013618ab13c78" translate="yes" xml:space="preserve">
          <source>N-API modules are registered in a manner similar to other modules except that instead of using the &lt;code&gt;NODE_MODULE&lt;/code&gt; macro the following is used:</source>
          <target state="translated">N-APIモジュールは、 &lt;code&gt;NODE_MODULE&lt;/code&gt; マクロを使用する代わりに以下を使用することを除いて、他のモジュールと同様の方法で登録されます。</target>
        </trans-unit>
        <trans-unit id="3ce7ec8745b23919ab41738dc2e8d90813f2426a" translate="yes" xml:space="preserve">
          <source>N-API offers a way to &quot;wrap&quot; C++ classes and instances so that the class constructor and methods can be called from JavaScript.</source>
          <target state="translated">N-APIは、クラスのコンストラクタとメソッドをJavaScriptから呼び出すことができるように、C++のクラスとインスタンスを「ラップ」する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="45efbba7b6828bb6ff691538d9468098a20c4570" translate="yes" xml:space="preserve">
          <source>N-API only supports a single nested hierarchy of scopes. There is only one active scope at any time, and all new handles will be associated with that scope while it is active. Scopes must be closed in the reverse order from which they are opened. In addition, all scopes created within a native method must be closed before returning from that method.</source>
          <target state="translated">N-API は、スコープの単一の入れ子の階層のみをサポートしています。アクティブなスコープは常に 1 つだけで、すべての新しいハンドルはそのスコープがアクティブな間、そのスコープに関連付けられます。スコープは、開いた順と逆の順序で閉じる必要があります。さらに、ネイティブメソッド内で作成されたスコープはすべて、そのメソッドから戻る前に閉じなければなりません。</target>
        </trans-unit>
        <trans-unit id="d7b60dab0bc992db521955215d2463d3ce27f102" translate="yes" xml:space="preserve">
          <source>N-API provides a function for getting the current event loop associated with a specific &lt;code&gt;napi_env&lt;/code&gt;.</source>
          <target state="translated">N-APIは、特定の &lt;code&gt;napi_env&lt;/code&gt; に関連付けられた現在のイベントループを取得するための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="e6d292a608d795d02e9feb5215a93624719c5f3d" translate="yes" xml:space="preserve">
          <source>N-API provides a set of APIs that allow JavaScript code to call back into native code. N-API APIs that support calling back into native code take in a callback functions represented by the &lt;code&gt;napi_callback&lt;/code&gt; type. When the JavaScript VM calls back to native code, the &lt;code&gt;napi_callback&lt;/code&gt; function provided is invoked. The APIs documented in this section allow the callback function to do the following:</source>
          <target state="translated">N-APIは、JavaScriptコードがネイティブコードにコールバックできるようにする一連のAPIを提供します。ネイティブコードへのコールバックをサポートするN-API APIは、 &lt;code&gt;napi_callback&lt;/code&gt; タイプで表されるコールバック関数を受け取ります。JavaScript VMがネイティブコードにコールバックすると、提供されている &lt;code&gt;napi_callback&lt;/code&gt; 関数が呼び出されます。このセクションに記載されているAPIを使用すると、コールバック関数で次のことを実行できます。</target>
        </trans-unit>
        <trans-unit id="01090223361802809df29f213e82e3b9319fcf72" translate="yes" xml:space="preserve">
          <source>N-API provides an ABI-stable interface for these supporting functions which covers the most common asynchronous use cases.</source>
          <target state="translated">N-APIは、最も一般的な非同期のユースケースをカバーするABI安定インターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="6f39db522f9283fcef0c912ba468da776135f241" translate="yes" xml:space="preserve">
          <source>N-API provides an API for executing a string containing JavaScript using the underlying JavaScript engine.</source>
          <target state="translated">N-APIは、JavaScriptを含む文字列をJavaScriptエンジンを使って実行するためのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="2313fc0c61261c329c023f99d171fe8dbee4423c" translate="yes" xml:space="preserve">
          <source>N-API provides facilities for creating &lt;code&gt;Promise&lt;/code&gt; objects as described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-objects&quot;&gt;Section 25.4&lt;/a&gt; of the ECMA specification. It implements promises as a pair of objects. When a promise is created by &lt;code&gt;napi_create_promise()&lt;/code&gt;, a &quot;deferred&quot; object is created and returned alongside the &lt;code&gt;Promise&lt;/code&gt;. The deferred object is bound to the created &lt;code&gt;Promise&lt;/code&gt; and is the only means to resolve or reject the &lt;code&gt;Promise&lt;/code&gt; using &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; or &lt;code&gt;napi_reject_deferred()&lt;/code&gt;. The deferred object that is created by &lt;code&gt;napi_create_promise()&lt;/code&gt; is freed by &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; or &lt;code&gt;napi_reject_deferred()&lt;/code&gt;. The &lt;code&gt;Promise&lt;/code&gt; object may be returned to JavaScript where it can be used in the usual fashion.</source>
          <target state="translated">N-APIは、ECMA仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-objects&quot;&gt;セクション25.4&lt;/a&gt;で説明されている &lt;code&gt;Promise&lt;/code&gt; オブジェクトを作成するための機能を提供します。オブジェクトのペアとしてpromiseを実装します。 &lt;code&gt;napi_create_promise()&lt;/code&gt; によってpromiseが作成されると、「据え置き」オブジェクトが作成され、 &lt;code&gt;Promise&lt;/code&gt; とともに返されます。遅延オブジェクトは、作成された &lt;code&gt;Promise&lt;/code&gt; にバインドされ、 &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; または &lt;code&gt;napi_reject_deferred()&lt;/code&gt; を使用して &lt;code&gt;Promise&lt;/code&gt; を解決または拒否する唯一の手段です。 &lt;code&gt;napi_create_promise()&lt;/code&gt; によって作成された遅延オブジェクトは、 &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; または &lt;code&gt;napi_reject_deferred()&lt;/code&gt; によって解放されます。 &lt;code&gt;Promise&lt;/code&gt; オブジェクトは、それが通常の方法で使用することができますJavaScriptに返されることがあります。</target>
        </trans-unit>
        <trans-unit id="7d99e6c12543c037d84d75d93df6bb441b536baa" translate="yes" xml:space="preserve">
          <source>N-API provides functions for registering and un-registering such callbacks. When those callbacks are run, all resources that are being held by the addon should be freed up.</source>
          <target state="translated">N-API は、このようなコールバックを登録・解除するための機能を提供します。これらのコールバックが実行されると、アドオンによって保持されているすべてのリソースが解放されます。</target>
        </trans-unit>
        <trans-unit id="b7c3cd228011e5d9137f1bb00c23394226dbfbfc" translate="yes" xml:space="preserve">
          <source>N-API provides methods to create persistent references to an object. Each persistent reference has an associated count with a value of 0 or higher. The count determines if the reference will keep the corresponding object live. References with a count of 0 do not prevent the object from being collected and are often called 'weak' references. Any count greater than 0 will prevent the object from being collected.</source>
          <target state="translated">N-API は、オブジェクトへの永続的な参照を作成するメソッドを提供します。各永続的な参照には、0以上の値を持つ関連するカウントがあります。カウントは、参照が対応するオブジェクトを存続させるかどうかを決定します。カウントが 0 の参照はオブジェクトの収集を妨げず、しばしば「弱い」参照と呼ばれます。カウントが0より大きい場合は、オブジェクトが収集されないようになります。</target>
        </trans-unit>
        <trans-unit id="21039b0e91105633cdec6fe19581a15729f4b937" translate="yes" xml:space="preserve">
          <source>N-API sets up the environment prior to calling this callback, so it is sufficient to call the JavaScript function via &lt;code&gt;napi_call_function&lt;/code&gt; rather than via &lt;code&gt;napi_make_callback&lt;/code&gt;.</source>
          <target state="translated">N-APIはこのコールバックを呼び出す前に環境をセットアップするため、 &lt;code&gt;napi_call_function&lt;/code&gt; ではなくnapi_call_functionを介してJavaScript関数を呼び出すだけで十分 &lt;code&gt;napi_make_callback&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dea939312c782d8c5e666ab405635666046b5b1f" translate="yes" xml:space="preserve">
          <source>N-API uses both return values and JavaScript exceptions for error handling. The following sections explain the approach for each case.</source>
          <target state="translated">N-APIでは、エラー処理に戻り値とJavaScriptの例外の両方を使用しています。以下のセクションでは、それぞれのケースに応じたアプローチを説明します。</target>
        </trans-unit>
        <trans-unit id="1171e6e250c8137afa5e0b60938de57ff990d9c4" translate="yes" xml:space="preserve">
          <source>N-API values are represented by the type &lt;code&gt;napi_value&lt;/code&gt;. Any N-API call that requires a JavaScript value takes in a &lt;code&gt;napi_value&lt;/code&gt;. However, it's the caller's responsibility to make sure that the &lt;code&gt;napi_value&lt;/code&gt; in question is of the JavaScript type expected by the API.</source>
          <target state="translated">N-API値は、タイプ &lt;code&gt;napi_value&lt;/code&gt; で表されます。JavaScript値を必要とするN-API呼び出しは、 &lt;code&gt;napi_value&lt;/code&gt; を受け取ります。ただし、問題の &lt;code&gt;napi_value&lt;/code&gt; がAPIが予期するJavaScriptタイプであることを確認するのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="ed30e9f4e0aa475cc4bcf4606fa7aa3e116ab3a4" translate="yes" xml:space="preserve">
          <source>N-API values are represented by the type &lt;code&gt;napi_value&lt;/code&gt;. Any N-API call that requires a JavaScript value takes in a &lt;code&gt;napi_value&lt;/code&gt;. In some cases, the API does check the type of the &lt;code&gt;napi_value&lt;/code&gt; up-front. However, for better performance, it's better for the caller to make sure that the &lt;code&gt;napi_value&lt;/code&gt; in question is of the JavaScript type expected by the API.</source>
          <target state="translated">N-API値は、タイプ &lt;code&gt;napi_value&lt;/code&gt; で表されます。JavaScript値を必要とするN-API呼び出しは、 &lt;code&gt;napi_value&lt;/code&gt; を受け取ります。場合によっては、APIは &lt;code&gt;napi_value&lt;/code&gt; のタイプを事前にチェックします。ただし、パフォーマンスを向上させるには、問題の &lt;code&gt;napi_value&lt;/code&gt; がAPIが予期するJavaScriptタイプであることを呼び出し元が確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8d77c1ac20c6483c8f420a855abd5497053e93d5" translate="yes" xml:space="preserve">
          <source>N-API version matrix</source>
          <target state="translated">エヌエーピーアイバージョンマトリックス</target>
        </trans-unit>
        <trans-unit id="af583d89de0c7c4b8c0e6223b8b144c689c84cc0" translate="yes" xml:space="preserve">
          <source>N-API version: 1</source>
          <target state="translated">N-APIバージョン:1</target>
        </trans-unit>
        <trans-unit id="42eb0bf2898c4d90751141d61f3a812907fc83bc" translate="yes" xml:space="preserve">
          <source>N-API version: 4</source>
          <target state="translated">N-APIバージョン。4</target>
        </trans-unit>
        <trans-unit id="36688c47c6b67b86c616353a7b6ea5bc6ef4edce" translate="yes" xml:space="preserve">
          <source>N-API versions are additive and versioned independently from Node.js. Version 4 is an extension to version 3 in that it has all of the APIs from version 3 with some additions. This means that it is not necessary to recompile for new versions of Node.js which are listed as supporting a later version.</source>
          <target state="translated">N-APIのバージョンは、Node.jsから独立して追加され、バージョン分けされています。バージョン4はバージョン3の拡張であり、バージョン3からのAPIのすべてをいくつか追加しています。これは、後のバージョンをサポートしていると記載されている Node.js の新しいバージョンのために再コンパイルする必要がないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d9c9f155bef3ac70ea5522b0c447a11486f56d68" translate="yes" xml:space="preserve">
          <source>NaN is now treated as being identical in case both sides are NaN.</source>
          <target state="translated">双方がNaNの場合、NaNは同一のものとして扱われるようになりました。</target>
        </trans-unit>
        <trans-unit id="4861f73679976cfe93d5853d1be47fcaa088f38c" translate="yes" xml:space="preserve">
          <source>Nagle's algorithm delays data before it is sent via the network. It attempts to optimize throughput at the expense of latency.</source>
          <target state="translated">Nagleのアルゴリズムは、ネットワークを介して送信される前にデータを遅延させます。レイテンシを犠牲にしてスループットを最適化しようとします。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="5ad766507b42c419a18a1fab4a93852992d6d506" translate="yes" xml:space="preserve">
          <source>Name of the file to which the report will be written.</source>
          <target state="translated">報告書を作成するファイル名。</target>
        </trans-unit>
        <trans-unit id="1048f6c8527f66e3515e900d898fe7d003e1f286" translate="yes" xml:space="preserve">
          <source>Named exports detection covers many common export patterns, reexport patterns and build tool and transpiler outputs. See &lt;a href=&quot;https://github.com/guybedford/cjs-module-lexer/tree/0.4.2&quot;&gt;cjs-module-lexer&lt;/a&gt; for the exact semantics implemented.</source>
          <target state="translated">名前付きエクスポートの検出は、多くの一般的なエクスポートパターン、再エクスポートパターン、ビルドツールおよびトランスパイラーの出力を対象としています。実装されている正確なセマンティクスについては、&lt;a href=&quot;https://github.com/guybedford/cjs-module-lexer/tree/0.4.2&quot;&gt;cjs-module-lexer&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8325a8327d8fb8a683bf7014a3df6f7074fc2c9e" translate="yes" xml:space="preserve">
          <source>Named exports detection covers many common export patterns, reexport patterns and build tool and transpiler outputs. See &lt;a href=&quot;https://github.com/guybedford/cjs-module-lexer/tree/1.0.0&quot;&gt;cjs-module-lexer&lt;/a&gt; for the exact semantics implemented.</source>
          <target state="translated">名前付きエクスポートの検出は、多くの一般的なエクスポートパターン、再エクスポートパターン、ビルドツールおよびトランスパイラーの出力を対象としています。実装されている正確なセマンティクスについては、&lt;a href=&quot;https://github.com/guybedford/cjs-module-lexer/tree/1.0.0&quot;&gt;cjs-module-lexer&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc22075ed2175ad5ccc2508aac2f833f87e45dda" translate="yes" xml:space="preserve">
          <source>Named: a simple UTF8-encoded string</source>
          <target state="translated">名前付き:単純なUTF8エンコード文字列</target>
        </trans-unit>
        <trans-unit id="7137f503dc2584ea8280d497399006e247e659b7" translate="yes" xml:space="preserve">
          <source>Native Abstractions for Node.js</source>
          <target state="translated">Node.jsのネイティブ抽象化</target>
        </trans-unit>
        <trans-unit id="5b2b42c72d18c6faa9885b4109d0dd739273361a" translate="yes" xml:space="preserve">
          <source>Native abstractions for Node.js</source>
          <target state="translated">Node.js のネイティブ抽象化</target>
        </trans-unit>
        <trans-unit id="edcea4b8da29480f402438959046ab2f9f368022" translate="yes" xml:space="preserve">
          <source>Native add-ons can only be loaded from multiple threads if they fulfill &lt;a href=&quot;addons#addons_worker_support&quot;&gt;certain conditions&lt;/a&gt;.</source>
          <target state="translated">ネイティブアドオンは、&lt;a href=&quot;addons#addons_worker_support&quot;&gt;特定の条件を満たす&lt;/a&gt;場合にのみ、複数のスレッドからロードできます。</target>
        </trans-unit>
        <trans-unit id="f6675537e94c99d143279098c166eb1d6147b5fc" translate="yes" xml:space="preserve">
          <source>Native addons may need to allocate global state of which they make use during their entire life cycle such that the state must be unique to each instance of the addon.</source>
          <target state="translated">ネイティブアドオンは、そのライフサイクル全体で使用するグローバルステートを割り当てる必要があり、そのステートはアドオンのインスタンスごとに一意でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5eeb4b95aa64d8fee6f596435f2844988e53b6b8" translate="yes" xml:space="preserve">
          <source>Native addons may need to allocate global state which they use during their entire life cycle such that the state must be unique to each instance of the addon.</source>
          <target state="translated">ネイティブアドオンは、そのライフサイクル全体で使用するグローバルステートを割り当てる必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="0a998c2dc83ce627649da16d854c4244317dd6b5" translate="yes" xml:space="preserve">
          <source>Native modules are not currently supported with ES module imports.</source>
          <target state="translated">ネイティブモジュールは、現在ESモジュールのインポートではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="264fa17f0716888a4cd2265fb034958375c3d60e" translate="yes" xml:space="preserve">
          <source>Negative &lt;code&gt;end&lt;/code&gt; values throw an &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; error.</source>
          <target state="translated">負の &lt;code&gt;end&lt;/code&gt; 値は &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="d6bf8490f059717c8e2d09d80c5d0cd5ed5e1330" translate="yes" xml:space="preserve">
          <source>Neither does &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; mark the thread-safe functions as able to be destroyed nor does &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; prevent it from being destroyed.</source>
          <target state="translated">どちらも行いません &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; 破壊することができるように、スレッドセーフな関数をマークしたりし &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; 破壊されるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="cd380c71e5072703e31986beeba244ee7a164ed8" translate="yes" xml:space="preserve">
          <source>Neither does &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; mark the thread-safe functions as able to be destroyed nor does &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; prevent it from being destroyed. &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; and &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; are available for that purpose.</source>
          <target state="translated">どちらも行いません &lt;code&gt;napi_unref_threadsafe_function&lt;/code&gt; 破壊することができるように、スレッドセーフな関数をマークしたりし &lt;code&gt;napi_ref_threadsafe_function&lt;/code&gt; 破壊されるのを防ぎます。 &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; と &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; は、その目的で使用できます。</target>
        </trans-unit>
        <trans-unit id="3ba80e45016258331008bc495a573c344a21c641" translate="yes" xml:space="preserve">
          <source>Neither the well known nor extra certificates are used when the &lt;code&gt;ca&lt;/code&gt; options property is explicitly specified for a TLS or HTTPS client or server.</source>
          <target state="translated">TLSまたはHTTPSクライアントまたはサーバーに対して &lt;code&gt;ca&lt;/code&gt; オプションプロパティが明示的に指定されている場合、既知の証明書も追加の証明書も使用されません。</target>
        </trans-unit>
        <trans-unit id="b48fa14f090ac8735751585b8cfb2e0dd0a835a7" translate="yes" xml:space="preserve">
          <source>Nested conditions</source>
          <target state="translated">入れ子になっている条件</target>
        </trans-unit>
        <trans-unit id="9bb81c2eccbed59ee8cbe296f1278f0ca1f364cc" translate="yes" xml:space="preserve">
          <source>Net</source>
          <target state="translated">Net</target>
        </trans-unit>
        <trans-unit id="9d926a391a10419818faebd2c569e4c93c8a271b" translate="yes" xml:space="preserve">
          <source>New HTTP/2 Streams may not be opened after the &lt;code&gt;Http2Session&lt;/code&gt; has received a &lt;code&gt;GOAWAY&lt;/code&gt; frame from the connected peer.</source>
          <target state="translated">新しいHTTP / 2ストリームは、後に開かれないことがあり &lt;code&gt;Http2Session&lt;/code&gt; 受信した &lt;code&gt;GOAWAY&lt;/code&gt; の接続ピアからのフレームを。</target>
        </trans-unit>
        <trans-unit id="7193207627db5aaa3ebdacf110c6817d0cb0fe81" translate="yes" xml:space="preserve">
          <source>New applications should expect the default to be &lt;code&gt;'buffer'&lt;/code&gt;.</source>
          <target state="translated">新しいアプリケーションは、デフォルトが &lt;code&gt;'buffer'&lt;/code&gt; であることを期待する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e15548774f6f9b49b8188ccd5ba9d78c166b8e1" translate="yes" xml:space="preserve">
          <source>New instances of &lt;code&gt;QuicClientSession&lt;/code&gt; are created using the &lt;code&gt;connect()&lt;/code&gt; function on a &lt;code&gt;QuicSocket&lt;/code&gt; as in the example below:</source>
          <target state="translated">&lt;code&gt;QuicClientSession&lt;/code&gt; の新しいインスタンスは、以下の例のように、 &lt;code&gt;QuicSocket&lt;/code&gt; の &lt;code&gt;connect()&lt;/code&gt; 関数を使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="c7d2d1592c30cddf89ab767c42220616cbbac903" translate="yes" xml:space="preserve">
          <source>New instances of &lt;code&gt;QuicServerSession&lt;/code&gt; are created internally by the &lt;code&gt;QuicSocket&lt;/code&gt; if it has been configured to listen for new connections using the &lt;code&gt;listen()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;QuicServerSession&lt;/code&gt; の新しいインスタンスは、 &lt;code&gt;listen()&lt;/code&gt; メソッドを使用して新しい接続をリッスンするように構成されている場合、 &lt;code&gt;QuicSocket&lt;/code&gt; によって内部的に作成されます。</target>
        </trans-unit>
        <trans-unit id="868d027d188d42b401539ab7a362c36acad66bf5" translate="yes" xml:space="preserve">
          <source>New instances of &lt;code&gt;QuicSocket&lt;/code&gt; are created using the &lt;code&gt;net.createQuicSocket()&lt;/code&gt; method, and can be used as both a client and a server.</source>
          <target state="translated">&lt;code&gt;QuicSocket&lt;/code&gt; の新しいインスタンスは、 &lt;code&gt;net.createQuicSocket()&lt;/code&gt; メソッドを使用して作成され、クライアントとサーバーの両方として使用できます。</target>
        </trans-unit>
        <trans-unit id="538dbd3921c4aa1f787f750bebace3312d5e5773" translate="yes" xml:space="preserve">
          <source>New instances of &lt;code&gt;dgram.Socket&lt;/code&gt; are created using &lt;a href=&quot;#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;new&lt;/code&gt; keyword is not to be used to create &lt;code&gt;dgram.Socket&lt;/code&gt; instances.</source>
          <target state="translated">&lt;a href=&quot;#dgram_dgram_createsocket_options_callback&quot;&gt; &lt;code&gt;dgram.createSocket()&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;dgram.Socket&lt;/code&gt; の新しいインスタンスを作成します。 &lt;code&gt;new&lt;/code&gt; キーワードを作成するために使用されるものではない &lt;code&gt;dgram.Socket&lt;/code&gt; のインスタンスを。</target>
        </trans-unit>
        <trans-unit id="8286903a3b42f30c2845be65b9063df789c12e5a" translate="yes" xml:space="preserve">
          <source>New option &lt;code&gt;withFileTypes&lt;/code&gt; was added.</source>
          <target state="translated">新しいオプション &lt;code&gt;withFileTypes&lt;/code&gt; が追加されました。</target>
        </trans-unit>
        <trans-unit id="d9b883a3b076116d662bc7a87ea12fa4ff91a952" translate="yes" xml:space="preserve">
          <source>Next history item</source>
          <target state="translated">次の履歴項目</target>
        </trans-unit>
        <trans-unit id="dc072aabd2bae6e9c49b6e900e7612de2b36503a" translate="yes" xml:space="preserve">
          <source>Next, invoke the &lt;code&gt;node-gyp build&lt;/code&gt; command to generate the compiled &lt;code&gt;addon.node&lt;/code&gt; file. This will be put into the &lt;code&gt;build/Release/&lt;/code&gt; directory.</source>
          <target state="translated">次に、 &lt;code&gt;node-gyp build&lt;/code&gt; コマンドを呼び出して、コンパイル済みの &lt;code&gt;addon.node&lt;/code&gt; ファイルを生成します。これは、 &lt;code&gt;build/Release/&lt;/code&gt; ディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="60c6db9ea82d2e5e907d48b09a58571de5491306" translate="yes" xml:space="preserve">
          <source>No &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; event listener is added.</source>
          <target state="translated">&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;イベントリスナーは追加されません。</target>
        </trans-unit>
        <trans-unit id="7713480c15dd839650512046c796bdd1e22142e3" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;NODE_PATH&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;NODE_PATH&lt;/code&gt; なし</target>
        </trans-unit>
        <trans-unit id="7361173fb484e84aaf68d0c47d4f871c12275315" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;__filename&lt;/code&gt; or &lt;code&gt;__dirname&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;__filename&lt;/code&gt; または &lt;code&gt;__dirname&lt;/code&gt; はありません</target>
        </trans-unit>
        <trans-unit id="4e365ecb80d6c5e0aee9009ce4f7cb44fc85a412" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.cache&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require.cache&lt;/code&gt; なし</target>
        </trans-unit>
        <trans-unit id="5fdcf81df39a04935671e5f913e82a9ed67ac793" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.extensions&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require.extensions&lt;/code&gt; はありません</target>
        </trans-unit>
        <trans-unit id="b7884051283c69059211963d23c652ce9c1f43cb" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.resolve&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require.resolve&lt;/code&gt; はありません</target>
        </trans-unit>
        <trans-unit id="31d574584ee13786d014cad173cf9f70d7bcd958" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt; or &lt;code&gt;module.exports&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; ありません、 &lt;code&gt;exports&lt;/code&gt; または &lt;code&gt;module.exports&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73bd086942e812ae818e7cbfbd123ebe5c91a9cf" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;module.exports&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;</source>
          <target state="translated">ノー &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;exports&lt;/code&gt; 、 &lt;code&gt;module.exports&lt;/code&gt; は、 &lt;code&gt;__filename&lt;/code&gt; 、 &lt;code&gt;__dirname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d424da21bf8bf374cdfa3070439b63b71a40f17e" translate="yes" xml:space="preserve">
          <source>No Error</source>
          <target state="translated">エラーなし</target>
        </trans-unit>
        <trans-unit id="19446f0d45b50dbe4f0de6fb65db0a6b201e582c" translate="yes" xml:space="preserve">
          <source>No JSON Module Loading</source>
          <target state="translated">JSONモジュールの読み込みなし</target>
        </trans-unit>
        <trans-unit id="6fc718bbe6600d4a272a19e0ea5f974efa74df8f" translate="yes" xml:space="preserve">
          <source>No Native Module Loading</source>
          <target state="translated">ネイティブモジュールの読み込みなし</target>
        </trans-unit>
        <trans-unit id="e2a350e3da36cf6a880449d24a7d22ab9e4027d2" translate="yes" xml:space="preserve">
          <source>No arguments other than a possible exception are given to the completion callback.</source>
          <target state="translated">補完コールバックには、可能な例外以外の引数は与えられません。</target>
        </trans-unit>
        <trans-unit id="7d617594d209195a47bc9a68e67dac23de396ed7" translate="yes" xml:space="preserve">
          <source>No case conversion is performed on case-insensitive file systems.</source>
          <target state="translated">大文字小文字を区別しないファイルシステムでは、大文字小文字の変換は行われません。</target>
        </trans-unit>
        <trans-unit id="c3331168b9cff4f62863ed956ba7c063dc1e66ff" translate="yes" xml:space="preserve">
          <source>No decoding of the &lt;code&gt;path&lt;/code&gt; is performed.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; デコードは実行されません。</target>
        </trans-unit>
        <trans-unit id="5a6ddfb774d5f9c27c27174db32faeb0af1ec6da" translate="yes" xml:space="preserve">
          <source>No decoding of the path string is performed.</source>
          <target state="translated">パス文字列のデコードは行われません。</target>
        </trans-unit>
        <trans-unit id="13c8ff0aedccedab26b0a9cc20907ad8d12092c6" translate="yes" xml:space="preserve">
          <source>No decoding of the query string is performed.</source>
          <target state="translated">クエリ文字列のデコードは行われません。</target>
        </trans-unit>
        <trans-unit id="a03f0fd922f89467f81c73b168c18f01a6802039" translate="yes" xml:space="preserve">
          <source>No default extensions</source>
          <target state="translated">デフォルトの拡張子はありません。</target>
        </trans-unit>
        <trans-unit id="927a7432a2380470b398b68e7bf815a0c092cf92" translate="yes" xml:space="preserve">
          <source>No folder mains</source>
          <target state="translated">フォルダメインではありません</target>
        </trans-unit>
        <trans-unit id="33721baca453ed3776b1934ed251f43df574f827" translate="yes" xml:space="preserve">
          <source>No longer experimental.</source>
          <target state="translated">もはや実験的ではない。</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="b0b78d39dcf9723cadf7c92f189fafd553d14144" translate="yes" xml:space="preserve">
          <source>Node.js (and its underlying V8 engine) uses &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt; to implement these features in native C/C++ code. However, some of them require a very large ICU data file in order to support all locales of the world. Because it is expected that most Node.js users will make use of only a small portion of ICU functionality, only a subset of the full ICU data set is provided by Node.js by default. Several options are provided for customizing and expanding the ICU data set either when building or running Node.js.</source>
          <target state="translated">Node.js（およびその基礎となるV8エンジン）は&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt;を使用して、これらの機能をネイティブC / C ++コードに実装します。ただし、それらのいくつかは、世界のすべてのロケールをサポートするために非常に大きなICUデータファイルを必要とします。ほとんどのNode.jsユーザーはICU機能のごく一部のみを使用することが予想されるため、デフォルトでは、完全なICUデータセットのサブセットのみがNode.jsによって提供されます。Node.jsの作成時または実行時にICUデータセットをカスタマイズおよび拡張するためのいくつかのオプションが提供されています。</target>
        </trans-unit>
        <trans-unit id="c539dfd29c36580c7afd3ad17f46f3f5fa46d7d7" translate="yes" xml:space="preserve">
          <source>Node.js (and its underlying V8 engine) uses &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt; to implement these features in native C/C++ code. The full ICU data set is provided by Node.js by default. However, due to the size of the ICU data file, several options are provided for customizing the ICU data set either when building or running Node.js.</source>
          <target state="translated">Node.js（およびその基盤となるV8エンジン）は、&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt;を使用してこれらの機能をネイティブC / C ++コードに実装します。完全なICUデータセットは、デフォルトでNode.jsによって提供されます。ただし、ICUデータファイルのサイズが原因で、Node.jsをビルドまたは実行するときにICUデータセットをカスタマイズするためのいくつかのオプションが提供されています。</target>
        </trans-unit>
        <trans-unit id="b9ea04817c5b66536ed37593c38099d256e6265d" translate="yes" xml:space="preserve">
          <source>Node.js &lt;code&gt;EventTarget&lt;/code&gt; vs. DOM &lt;code&gt;EventTarget&lt;/code&gt;</source>
          <target state="translated">Node.jsの &lt;code&gt;EventTarget&lt;/code&gt; 対DOM &lt;code&gt;EventTarget&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd391461f54f5f00a9ca884b393cb0665af6364d" translate="yes" xml:space="preserve">
          <source>Node.js &lt;code&gt;package.json&lt;/code&gt; field definitions</source>
          <target state="translated">Node.jsの &lt;code&gt;package.json&lt;/code&gt; のフィールドの定義</target>
        </trans-unit>
        <trans-unit id="dc273ad6c9801813717d36e19bf7f8023b01504f" translate="yes" xml:space="preserve">
          <source>Node.js APIs might be deprecated for any of the following reasons:</source>
          <target state="translated">Node.jsのAPIは、以下のいずれかの理由で非推奨になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a4c6ff3487c288f0b8d40123f15c094451d4d58d" translate="yes" xml:space="preserve">
          <source>Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries.</source>
          <target state="translated">Node.jsアドオンは、C ++で記述された動的にリンクされた共有オブジェクトであり、&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;関数を使用してNode.jsにロードでき、通常のNode.jsモジュールと同じように使用できます。これらは主に、Node.jsで実行されているJavaScriptとC / C ++ライブラリ間のインターフェースを提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="51be1c370c336ba5619c2e9080dd4bf368c9c46b" translate="yes" xml:space="preserve">
          <source>Node.js Crypto Constants</source>
          <target state="translated">Node.jsの暗号定数</target>
        </trans-unit>
        <trans-unit id="441aa6a1425f4454daa77eeba4c8ce3a18045fb8" translate="yes" xml:space="preserve">
          <source>Node.js Error Codes</source>
          <target state="translated">Node.jsのエラーコード</target>
        </trans-unit>
        <trans-unit id="c6d30bd2144c9d89e9803d2977bc8a87eb8771f7" translate="yes" xml:space="preserve">
          <source>Node.js also supports the following two binary-to-text encodings. For binary-to-text encodings, the naming convention is reversed: Converting a &lt;code&gt;Buffer&lt;/code&gt; into a string is typically referred to as encoding, and converting a string into a &lt;code&gt;Buffer&lt;/code&gt; as decoding.</source>
          <target state="translated">Node.jsは、次の2つのバイナリからテキストへのエンコーディングもサポートしています。バイナリ・トゥ・テキスト・エンコーディングのために、命名規則を逆転する：変換 &lt;code&gt;Buffer&lt;/code&gt; 文字列には、通常、コード、およびに文字列を変換と呼ばれる &lt;code&gt;Buffer&lt;/code&gt; 復号化など。</target>
        </trans-unit>
        <trans-unit id="179df0cc5008db133b8bc9a59310d37319853e06" translate="yes" xml:space="preserve">
          <source>Node.js can be started using the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command line option to cause all newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances to be zero-filled upon creation by default. Before Node.js 8.0.0, this included buffers allocated by &lt;code&gt;new Buffer(size)&lt;/code&gt;. Since Node.js 8.0.0, buffers allocated with &lt;code&gt;new&lt;/code&gt; are always zero-filled, whether this option is used or not. &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;new SlowBuffer(size)&lt;/code&gt;. Use of this flag can have a significant negative impact on performance. Use of the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; option is recommended only when necessary to enforce that newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances cannot contain old data that is potentially sensitive.</source>
          <target state="translated">&lt;code&gt;--zero-fill-buffers&lt;/code&gt; コマンドラインオプションを使用してNode.jsを起動すると、新しく割り当てられたすべての &lt;code&gt;Buffer&lt;/code&gt; インスタンスが、デフォルトで作成時にゼロで埋められます。 Node.js 8.0.0より前のバージョンには、 &lt;code&gt;new Buffer(size)&lt;/code&gt; によって割り当てられたバッファーが含まれていました。 Node.js 8.0.0以降、 &lt;code&gt;new&lt;/code&gt; で割り当てられたバッファーは、このオプションが使用されているかどうかにかかわらず、常にゼロで埋められます。&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;new SlowBuffer(size)&lt;/code&gt; 。このフラグを使用すると、パフォーマンスに重大な悪影響を及ぼす可能性があります。 &lt;code&gt;--zero-fill-buffers&lt;/code&gt; オプションの使用は、新しく割り当てられた &lt;code&gt;Buffer&lt;/code&gt; を強制する必要がある場合にのみ推奨されます インスタンスには、機密である可能性のある古いデータを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="3f54ed66583f9bae1455fd00e2272f6a34ca953a" translate="yes" xml:space="preserve">
          <source>Node.js can be started using the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command-line option to cause all newly-allocated &lt;code&gt;Buffer&lt;/code&gt; instances to be zero-filled upon creation by default. Without the option, buffers created with &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;new SlowBuffer(size)&lt;/code&gt; are not zero-filled. Use of this flag can have a measurable negative impact on performance. Use the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; option only when necessary to enforce that newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances cannot contain old data that is potentially sensitive.</source>
          <target state="translated">Node.jsは、 &lt;code&gt;--zero-fill-buffers&lt;/code&gt; コマンドラインオプションを使用して開始できます。これにより、新しく割り当てられたすべての &lt;code&gt;Buffer&lt;/code&gt; インスタンスが、デフォルトで作成時にゼロで埋められます。このオプションがないと、&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#buffer_static_method_buffer_allocunsafeslow_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;new SlowBuffer(size)&lt;/code&gt; 作成されたバッファーはゼロで埋められません。このフラグを使用すると、パフォーマンスに測定可能な悪影響が及ぶ可能性があります。 &lt;code&gt;--zero-fill-buffers&lt;/code&gt; オプションは、新しく割り当てられた &lt;code&gt;Buffer&lt;/code&gt; インスタンスに、機密性の高い可能性のある古いデータを含めることができないようにする必要がある場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="b2f1a7ae4eec5392042ce17901f72140ba89d819" translate="yes" xml:space="preserve">
          <source>Node.js can link against an ICU build already installed on the system. In fact, most Linux distributions already come with ICU installed, and this option would make it possible to reuse the same set of data used by other components in the OS.</source>
          <target state="translated">Node.js は、システムに既にインストールされている ICU ビルドに対してリンクすることができます。実際、ほとんどのLinuxディストリビューションにはすでにICUがインストールされており、このオプションを使用することで、OSの他のコンポーネントで使用されているのと同じデータセットを再利用することが可能になります。</target>
        </trans-unit>
        <trans-unit id="c36cc4fad1e7074ce4842d8c3aae603fd4ad5ea2" translate="yes" xml:space="preserve">
          <source>Node.js can now run ES module entry points, and a package can contain both CommonJS and ES module entry points (either via separate specifiers such as &lt;code&gt;'pkg'&lt;/code&gt; and &lt;code&gt;'pkg/es-module'&lt;/code&gt;, or both at the same specifier via &lt;a href=&quot;#packages_conditional_exports&quot;&gt;Conditional exports&lt;/a&gt;). Unlike in the scenario where &lt;code&gt;&quot;module&quot;&lt;/code&gt; is only used by bundlers, or ES module files are transpiled into CommonJS on the fly before evaluation by Node.js, the files referenced by the ES module entry point are evaluated as ES modules.</source>
          <target state="translated">Node.jsはESモジュールエントリポイントを実行できるようになり、パッケージにはCommonJSとESモジュールエントリポイントの両方を含めることができます（ &lt;code&gt;'pkg'&lt;/code&gt; や &lt;code&gt;'pkg/es-module'&lt;/code&gt; などの個別の指定子を介して、または&lt;a href=&quot;#packages_conditional_exports&quot;&gt;条件付きを&lt;/a&gt;介して同じ指定子で両方を含む）エクスポート）。 &lt;code&gt;&quot;module&quot;&lt;/code&gt; がバンドラーによってのみ使用されるシナリオや、Node.jsによる評価の前にESモジュールファイルがオンザフライでCommonJSにトランスパイルされるシナリオとは異なり、ESモジュールエントリポイントによって参照されるファイルはESモジュールとして評価されます。</target>
        </trans-unit>
        <trans-unit id="5810ddd39bdfe4323cf379ac3f7b781e60db98e0" translate="yes" xml:space="preserve">
          <source>Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options.</source>
          <target state="translated">Node.jsには様々なCLIオプションが付属しています。これらのオプションは、組み込みのデバッグ、スクリプトを実行する複数の方法、その他の便利なランタイムオプションを公開しています。</target>
        </trans-unit>
        <trans-unit id="700f33732d1ab659fda7ca90f224da1753e7cde0" translate="yes" xml:space="preserve">
          <source>Node.js contains experimental support for creating policies on loading code.</source>
          <target state="translated">Node.jsには、コードの読み込みに関するポリシーを作成するための実験的なサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="4994583ed9ea64b95980a99b8ac9cb934c0c8136" translate="yes" xml:space="preserve">
          <source>Node.js contains support for ES Modules based upon the &lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md&quot;&gt;Node.js EP for ES Modules&lt;/a&gt; and the &lt;a href=&quot;https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md&quot;&gt;ECMAScript-modules implementation&lt;/a&gt;.</source>
          <target state="translated">Node.jsには、ESモジュールの&lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md&quot;&gt;Node.js EP&lt;/a&gt;と&lt;a href=&quot;https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md&quot;&gt;ECMAScript-modules実装に&lt;/a&gt;基づくESモジュールのサポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="c490a214340b790bb43bbfd2fa0be7c3074d0693" translate="yes" xml:space="preserve">
          <source>Node.js crypto constants</source>
          <target state="translated">Node.jsのcrypto定数</target>
        </trans-unit>
        <trans-unit id="f284dbd956cb499dff05c1a4c98369975a26484c" translate="yes" xml:space="preserve">
          <source>Node.js currently overwrites &lt;code&gt;argv[0]&lt;/code&gt; with &lt;code&gt;process.execPath&lt;/code&gt; on startup, so &lt;code&gt;process.argv[0]&lt;/code&gt; in a Node.js child process will not match the &lt;code&gt;argv0&lt;/code&gt; parameter passed to &lt;code&gt;spawn&lt;/code&gt; from the parent, retrieve it with the &lt;code&gt;process.argv0&lt;/code&gt; property instead.</source>
          <target state="translated">Node.jsは現在、起動時に &lt;code&gt;argv[0]&lt;/code&gt; を &lt;code&gt;process.execPath&lt;/code&gt; で上書きするため、Node.js子プロセスの &lt;code&gt;process.argv[0]&lt;/code&gt; は、親から &lt;code&gt;spawn&lt;/code&gt; するために渡された &lt;code&gt;argv0&lt;/code&gt; パラメーターと一致しません。それを &lt;code&gt;process.argv0&lt;/code&gt; で取得します。代わりにプロパティ。</target>
        </trans-unit>
        <trans-unit id="71f1ec4dc71d40c8c7d0a68270209a7d73533f56" translate="yes" xml:space="preserve">
          <source>Node.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.</source>
          <target state="translated">Node.jsでは、Content-Lengthと送信されてきた本体の長さが等しいかどうかはチェックしていません。</target>
        </trans-unit>
        <trans-unit id="06e7f421afd071d9d6af3f9498e9ce444a8edad0" translate="yes" xml:space="preserve">
          <source>Node.js does not provide routing logic. It is, therefore important to design an application such that it does not rely too heavily on in-memory data objects for things like sessions and login.</source>
          <target state="translated">Node.jsはルーティングロジックを提供しません。したがって、セッションやログインなどのためにインメモリデータオブジェクトに過度に依存しないようにアプリケーションを設計することが重要です。</target>
        </trans-unit>
        <trans-unit id="8bc2f65bdd2e7e9164e8bd1a326d5600365b5ab6" translate="yes" xml:space="preserve">
          <source>Node.js error codes</source>
          <target state="translated">Node.jsのエラーコード</target>
        </trans-unit>
        <trans-unit id="59620f5a7d966f7ed19e56a82fa67f4d669f5bf7" translate="yes" xml:space="preserve">
          <source>Node.js establishes signal handlers for &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; and Node.js processes will not terminate immediately due to receipt of those signals. Rather, Node.js will perform a sequence of cleanup actions and then will re-raise the handled signal.</source>
          <target state="translated">Node.jsは &lt;code&gt;SIGINT&lt;/code&gt; および &lt;code&gt;SIGTERM&lt;/code&gt; のシグナルハンドラーを確立します。Node.jsプロセスは、これらのシグナルを受信したためにすぐには終了しません。むしろ、Node.jsは一連のクリーンアップアクションを実行してから、処理された信号を再度発生させます。</target>
        </trans-unit>
        <trans-unit id="480b0d2dbef58c37d829b9c32965e5cf57f7057b" translate="yes" xml:space="preserve">
          <source>Node.js fully supports ECMAScript modules as they are currently specified and provides interoperability between them and its original module format, &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;.</source>
          <target state="translated">Node.jsは、現在指定されているECMAScriptモジュールを完全にサポートし、それらと元のモジュール形式である&lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;との間の相互運用性を提供します。</target>
        </trans-unit>
        <trans-unit id="b03b3b5fea382e76a7a57c11964832d9a8b669da" translate="yes" xml:space="preserve">
          <source>Node.js fully supports ECMAScript modules as they are currently specified and provides limited interoperability between them and the existing module format, &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;.</source>
          <target state="translated">Node.jsは、現在指定されているECMAScriptモジュールを完全にサポートし、既存のモジュール形式である&lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;との相互運用性を制限します。</target>
        </trans-unit>
        <trans-unit id="d9420a48ed10cc5802fa3b78bba7653131bf1a8e" translate="yes" xml:space="preserve">
          <source>Node.js generates system errors when exceptions occur within its runtime environment. These usually occur when an application violates an operating system constraint. For example, a system error will occur if an application attempts to read a file that does not exist.</source>
          <target state="translated">Node.js は、実行環境内で例外が発生するとシステムエラーを発生させます。これらは通常、アプリケーションがオペレーティングシステムの制約に違反したときに発生します。例えば、アプリケーションが存在しないファイルを読み込もうとするとシステムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="48de8cfe95796276bf63a2c8ab0ecbb060e9f9cf" translate="yes" xml:space="preserve">
          <source>Node.js has a concept of a &amp;ldquo;Node.js instance&amp;rdquo;, that is commonly being referred to as &lt;code&gt;node::Environment&lt;/code&gt;. Each &lt;code&gt;node::Environment&lt;/code&gt; is associated with:</source>
          <target state="translated">Node.jsには「Node.jsインスタンス」の概念があり、これは一般に &lt;code&gt;node::Environment&lt;/code&gt; と呼ばれています。各 &lt;code&gt;node::Environment&lt;/code&gt; は以下に関連付けられています。</target>
        </trans-unit>
        <trans-unit id="d0cd156f333656194d6d4ee97e4372a26119bd21" translate="yes" xml:space="preserve">
          <source>Node.js has many features that make it easier to write internationalized programs. Some of them are:</source>
          <target state="translated">Node.jsには、国際化されたプログラムを書きやすくする機能がたくさんあります。その一部を紹介します。</target>
        </trans-unit>
        <trans-unit id="195eccef86c70efe3ada3da5e4f20eea967db8b4" translate="yes" xml:space="preserve">
          <source>Node.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.</source>
          <target state="translated">Node.js はバイナリにコンパイルされたいくつかのモジュールを持っています。これらのモジュールについては、このドキュメントの他の場所でより詳細に説明されています。</target>
        </trans-unit>
        <trans-unit id="d3d67c8f1728279b2419e85378220842f097aa2a" translate="yes" xml:space="preserve">
          <source>Node.js includes a number of other statically linked libraries including OpenSSL. These other libraries are located in the &lt;code&gt;deps/&lt;/code&gt; directory in the Node.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by Addons. See &lt;a href=&quot;#addons_linking_to_node_js_own_dependencies&quot;&gt;Linking to Node.js' own dependencies&lt;/a&gt; for additional information.</source>
          <target state="translated">Node.jsには、OpenSSLを含む、静的にリンクされた他の多くのライブラリが含まれています。これらの他のライブラリは、Node.jsソースツリーの &lt;code&gt;deps/&lt;/code&gt; ディレクトリにあります。libuv、OpenSSL、V8、およびzlibシンボルのみが意図的にNode.jsによって再エクスポートされ、アドオンによってさまざまな範囲で使用できます。追加情報については&lt;a href=&quot;#addons_linking_to_node_js_own_dependencies&quot;&gt;、Node.js自身の依存関係へのリンクを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4002058c11230c8c613d48125799d611e8e5ab90" translate="yes" xml:space="preserve">
          <source>Node.js includes an out-of-process debugging utility accessible via a &lt;a href=&quot;#debugger_v8_inspector_integration_for_node_js&quot;&gt;V8 Inspector&lt;/a&gt; and built-in debugging client. To use it, start Node.js with the &lt;code&gt;inspect&lt;/code&gt; argument followed by the path to the script to debug; a prompt will be displayed indicating successful launch of the debugger:</source>
          <target state="translated">Node.jsには、&lt;a href=&quot;#debugger_v8_inspector_integration_for_node_js&quot;&gt;V8 Inspector&lt;/a&gt;および組み込みのデバッグクライアントを介してアクセスできるアウトプロセスデバッグユーティリティが含まれています。これを使用するには、 &lt;code&gt;inspect&lt;/code&gt; 引数とその後にデバッグするスクリプトへのパスを指定してNode.jsを起動します。デバッガが正常に起動したことを示すプロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="115f8d8c85f155299923066b8cd8afdf7cb6c984" translate="yes" xml:space="preserve">
          <source>Node.js includes other statically linked libraries including OpenSSL. These other libraries are located in the &lt;code&gt;deps/&lt;/code&gt; directory in the Node.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by addons. See &lt;a href=&quot;#addons_linking_to_libraries_included_with_node_js&quot;&gt;Linking to libraries included with Node.js&lt;/a&gt; for additional information.</source>
          <target state="translated">Node.jsには、OpenSSLを含む他の静的にリンクされたライブラリが含まれています。これらの他のライブラリは、Node.jsソースツリーの &lt;code&gt;deps/&lt;/code&gt; ディレクトリにあります。libuv、OpenSSL、V8、およびzlibシンボルのみがNode.jsによって意図的に再エクスポートされ、アドオンによってさまざまな範囲で使用できます。詳細について&lt;a href=&quot;#addons_linking_to_libraries_included_with_node_js&quot;&gt;は、Node.js&lt;/a&gt;に含まれているライブラリへのリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="0f9aede62d41177b7855358a4024583daeb12072" translate="yes" xml:space="preserve">
          <source>Node.js inspector supports all the Chrome DevTools Protocol domains declared by V8. Chrome DevTools Protocol domain provides an interface for interacting with one of the runtime agents used to inspect the application state and listen to the run-time events.</source>
          <target state="translated">Node.jsインスペクタは、V8で宣言されたすべてのChrome DevTools Protocolドメインをサポートしています。Chrome DevTools Protocol ドメインは、アプリケーションの状態を検査し、ランタイムイベントをリッスンするために使用されるランタイムエージェントのいずれかと対話するためのインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="9b8c531580042ddb6a9c8b040b19ffbdbcdd1525" translate="yes" xml:space="preserve">
          <source>Node.js is a trademark of Joyent, Inc. and is used with its permission.</source>
          <target state="translated">Node.jsはJoyent,Inc.の商標であり、許可を得て使用しています。</target>
        </trans-unit>
        <trans-unit id="f38a0ebf21cebf178508d7332d871c116478b9e4" translate="yes" xml:space="preserve">
          <source>Node.js is built with a default suite of enabled and disabled TLS ciphers. Currently, the default cipher suite is:</source>
          <target state="translated">Node.jsは、有効なTLS暗号と無効なTLS暗号のデフォルトのスイートで構築されています。現在のところ、デフォルトの暗号スイートは</target>
        </trans-unit>
        <trans-unit id="8aee71eb10933a7749912dfe5f90adbda7e60cec" translate="yes" xml:space="preserve">
          <source>Node.js is built with a default suite of enabled and disabled TLS ciphers. This default cipher list can be configured when building Node.js to allow distributions to provide their own default list.</source>
          <target state="translated">Node.jsは、有効なTLS暗号と無効なTLS暗号のデフォルトのスイートを使ってビルドされます。このデフォルトの暗号リストはNode.jsをビルドする際に設定することができ、ディストリビューションが独自のデフォルトリストを提供できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="d419b29bddd025ae8da2d1cd92469cb932388b2a" translate="yes" xml:space="preserve">
          <source>Node.js itself uses the &lt;code&gt;repl&lt;/code&gt; module to provide its own interactive interface for executing JavaScript. This can be used by executing the Node.js binary without passing any arguments (or by passing the &lt;code&gt;-i&lt;/code&gt; argument):</source>
          <target state="translated">Node.js自体は &lt;code&gt;repl&lt;/code&gt; モジュールを使用して、JavaScriptを実行するための独自のインタラクティブインターフェイスを提供します。これは、引数を渡さずにNode.jsバイナリを実行する（または &lt;code&gt;-i&lt;/code&gt; 引数を渡す）ことで使用できます。</target>
        </trans-unit>
        <trans-unit id="f09bc63e6e483ddf848817dae917ca441f8c70d6" translate="yes" xml:space="preserve">
          <source>Node.js maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests.</source>
          <target state="translated">Node.jsはHTTPリクエストを行うために、サーバごとに複数のコネクションを保持しています。この機能により、透過的にリクエストを発行することができます。</target>
        </trans-unit>
        <trans-unit id="ef83fb721ff96281b3ffd2a1bcbc9e428f3194ea" translate="yes" xml:space="preserve">
          <source>Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="translated">Node.jsはコピー操作のアトミック性を保証しません。書き出し先のファイルがオープンされた後にエラーが発生した場合、Node.jsは書き出し先の削除を試みます。</target>
        </trans-unit>
        <trans-unit id="5a2313c41832d43d1e319cb20bebf01ebb24487d" translate="yes" xml:space="preserve">
          <source>Node.js may deprecate APIs for any of the following reasons:</source>
          <target state="translated">Node.jsは以下のいずれかの理由でAPIを非推奨にすることがあります。</target>
        </trans-unit>
        <trans-unit id="8b6a49596101ad1c6c0a10180ddfbbd5d2267fc0" translate="yes" xml:space="preserve">
          <source>Node.js options that are allowed are:</source>
          <target state="translated">許可されているNode.jsのオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="138fea06dce092e1d24f06c81c94c22277dd9c70" translate="yes" xml:space="preserve">
          <source>Node.js processes launched with a custom &lt;code&gt;execPath&lt;/code&gt; will communicate with the parent process using the file descriptor (fd) identified using the environment variable &lt;code&gt;NODE_CHANNEL_FD&lt;/code&gt; on the child process.</source>
          <target state="translated">カスタム &lt;code&gt;execPath&lt;/code&gt; で起動されたNode.jsプロセスは、子プロセスの環境変数 &lt;code&gt;NODE_CHANNEL_FD&lt;/code&gt; を使用して識別されるファイル記述子（fd）を使用して親プロセスと通信します。</target>
        </trans-unit>
        <trans-unit id="888226cda32c651713a9bdcd3c9daa6164c10743" translate="yes" xml:space="preserve">
          <source>Node.js provides a number of C++ APIs that can be used to execute JavaScript in a Node.js environment from other C++ software.</source>
          <target state="translated">Node.jsには、他のC++ソフトウェアからNode.js環境でJavaScriptを実行するためのAPIが多数用意されています。</target>
        </trans-unit>
        <trans-unit id="44a315000fe0caec361396db2ab80cb8bd4201d2" translate="yes" xml:space="preserve">
          <source>Node.js provides an implementation of the standard &lt;a href=&quot;https://www.w3.org/TR/WebCryptoAPI/&quot;&gt;Web Crypto API&lt;/a&gt;.</source>
          <target state="translated">Node.jsは、標準の&lt;a href=&quot;https://www.w3.org/TR/WebCryptoAPI/&quot;&gt;Web CryptoAPIの&lt;/a&gt;実装を提供します。</target>
        </trans-unit>
        <trans-unit id="af889ac9a25421872e32a7b13c8dc159bbe14926" translate="yes" xml:space="preserve">
          <source>Node.js requires some per-process state management in order to run:</source>
          <target state="translated">Node.jsを実行するためには、プロセスごとにある程度の状態管理が必要です。</target>
        </trans-unit>
        <trans-unit id="5196287aca961808313ef47efa5a6a6078aaae9f" translate="yes" xml:space="preserve">
          <source>Node.js supports several mechanisms for propagating and handling errors that occur while an application is running. How these errors are reported and handled depends entirely on the type of &lt;code&gt;Error&lt;/code&gt; and the style of the API that is called.</source>
          <target state="translated">Node.jsは、アプリケーションの実行中に発生するエラーを伝播および処理するためのいくつかのメカニズムをサポートしています。これらのエラーが報告され、どのように処理されるかのタイプに完全に依存 &lt;code&gt;Error&lt;/code&gt; と呼ばれているAPIのスタイル。</target>
        </trans-unit>
        <trans-unit id="e3de5308a70d674ab3ba84ce75599d95c724d3f0" translate="yes" xml:space="preserve">
          <source>Node.js supports the following &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt;:</source>
          <target state="translated">Node.jsは、次の&lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;WebパフォーマンスAPIを&lt;/a&gt;サポートしています。</target>
        </trans-unit>
        <trans-unit id="1307f3ab8da5b477eb2214e7f2dae4a93417b84a" translate="yes" xml:space="preserve">
          <source>Node.js supports the following conditions out of the box:</source>
          <target state="translated">Node.jsは、以下の条件をサポートしています。</target>
        </trans-unit>
        <trans-unit id="73a27c18aed9d2957a1195a5def9fedbfaabd920" translate="yes" xml:space="preserve">
          <source>Node.js treats JavaScript code as CommonJS modules by default. Authors can tell Node.js to treat JavaScript code as ECMAScript modules via the &lt;code&gt;.mjs&lt;/code&gt; file extension, the &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;packages#packages_type&quot;&gt;&lt;code&gt;&quot;type&quot;&lt;/code&gt;&lt;/a&gt; field, or the &lt;code&gt;--input-type&lt;/code&gt; flag. See &lt;a href=&quot;packages#packages_determining_module_system&quot;&gt;Modules: Packages&lt;/a&gt; for more details.</source>
          <target state="translated">Node.jsは、デフォルトでJavaScriptコードをCommonJSモジュールとして扱います。作成者は、 &lt;code&gt;.mjs&lt;/code&gt; ファイル拡張子、 &lt;code&gt;package.json&lt;/code&gt; の&lt;a href=&quot;packages#packages_type&quot;&gt; &lt;code&gt;&quot;type&quot;&lt;/code&gt; &lt;/a&gt;フィールド、または &lt;code&gt;--input-type&lt;/code&gt; フラグを使用して、JavaScriptコードをECMAScriptモジュールとして扱うようにNode.jsに指示できます。詳細については、&lt;a href=&quot;packages#packages_determining_module_system&quot;&gt;モジュール：パッケージ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="02f6a2adac24b09ba48add96ffd834e0b65b5a81" translate="yes" xml:space="preserve">
          <source>Node.js used to support all GCM authentication tag lengths which are accepted by OpenSSL when calling &lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer&quot;&gt;&lt;code&gt;decipher.setAuthTag()&lt;/code&gt;&lt;/a&gt;. Beginning with Node.js v11.0.0, only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32 bits are allowed. Authentication tags of other lengths are invalid per &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;.</source>
          <target state="translated">Node.jsは、&lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer&quot;&gt; &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; を&lt;/a&gt;呼び出すときにOpenSSLによって受け入れられるすべてのGCM認証タグ長をサポートするために使用されていました。 Node.js v11.0.0から、128、120、112、104、96、64、および32ビットの認証タグ長のみが許可されます。&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38Dでは&lt;/a&gt;、他の長さの認証タグは無効です。</target>
        </trans-unit>
        <trans-unit id="fa1e0e5f6b06e5108f789c2f13a6fbb3b3730be3" translate="yes" xml:space="preserve">
          <source>Node.js used to support all GCM authentication tag lengths which are accepted by OpenSSL when calling &lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer_encoding&quot;&gt;&lt;code&gt;decipher.setAuthTag()&lt;/code&gt;&lt;/a&gt;. Beginning with Node.js v11.0.0, only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32 bits are allowed. Authentication tags of other lengths are invalid per &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;.</source>
          <target state="translated">Node.jsは、&lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer_encoding&quot;&gt; &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; を&lt;/a&gt;呼び出すときにOpenSSLによって受け入れられるすべてのGCM認証タグの長さをサポートするために使用されます。Node.js v11.0.0以降では、128、120、112、104、96、64、および32ビットの認証タグ長のみが許可されます。他の長さの認証タグは、&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP800-38Dでは&lt;/a&gt;無効です。</target>
        </trans-unit>
        <trans-unit id="2f9b6124a3880fa2afa106c7ef712fc837b2b911" translate="yes" xml:space="preserve">
          <source>Node.js uses a &lt;code&gt;KeyObject&lt;/code&gt; class to represent a symmetric or asymmetric key, and each kind of key exposes different functions. The &lt;a href=&quot;#crypto_crypto_createsecretkey_key&quot;&gt;&lt;code&gt;crypto.createSecretKey()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt;&lt;code&gt;crypto.createPublicKey()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt;&lt;code&gt;crypto.createPrivateKey()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;KeyObject&lt;/code&gt; instances. &lt;code&gt;KeyObject&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">Node.jsは、 &lt;code&gt;KeyObject&lt;/code&gt; クラスを使用して対称または非対称キーを表し、キーの種類ごとに異なる機能を公開します。&lt;a href=&quot;#crypto_crypto_createsecretkey_key&quot;&gt; &lt;code&gt;crypto.createSecretKey()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt; &lt;code&gt;crypto.createPublicKey()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt; &lt;code&gt;crypto.createPrivateKey()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;KeyObject&lt;/code&gt; インスタンス。 &lt;code&gt;KeyObject&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成されません。</target>
        </trans-unit>
        <trans-unit id="1492c443d129898740d894768c679a1ad73f43a5" translate="yes" xml:space="preserve">
          <source>Node.js uses a &lt;code&gt;KeyObject&lt;/code&gt; class to represent a symmetric or asymmetric key, and each kind of key exposes different functions. The &lt;a href=&quot;#crypto_crypto_createsecretkey_key_encoding&quot;&gt;&lt;code&gt;crypto.createSecretKey()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt;&lt;code&gt;crypto.createPublicKey()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt;&lt;code&gt;crypto.createPrivateKey()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;KeyObject&lt;/code&gt; instances. &lt;code&gt;KeyObject&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">Node.jsは &lt;code&gt;KeyObject&lt;/code&gt; クラスを使用して対称鍵または非対称鍵を表し、各種類の鍵は異なる関数を公開します。&lt;a href=&quot;#crypto_crypto_createsecretkey_key_encoding&quot;&gt; &lt;code&gt;crypto.createSecretKey()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt; &lt;code&gt;crypto.createPublicKey()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt; &lt;code&gt;crypto.createPrivateKey()&lt;/code&gt; &lt;/a&gt;メソッドを作成するために使用される &lt;code&gt;KeyObject&lt;/code&gt; インスタンス。 &lt;code&gt;KeyObject&lt;/code&gt; オブジェクトは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成することはできません。</target>
        </trans-unit>
        <trans-unit id="38c8c1daba3fd0b1fc631a3c4423fc53da9f7c2d" translate="yes" xml:space="preserve">
          <source>Node.js uses a number of statically linked libraries such as V8, libuv and OpenSSL. All Addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; statements (e.g. &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt;) and &lt;code&gt;node-gyp&lt;/code&gt; will locate the appropriate headers automatically. However, there are a few caveats to be aware of:</source>
          <target state="translated">Node.jsは、V8、libuv、OpenSSLなどの静的にリンクされた多数のライブラリを使用します。すべてのアドオンはV8にリンクする必要があり、他の依存関係にもリンクできます。通常、これは適切な &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; ステートメント（例 &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt; ）を &lt;code&gt;node-gyp&lt;/code&gt; 、node-gypは適切なヘッダーを自動的に見つけます。ただし、次の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="33fe961c6b46fc16a4675791acb6d47102a8c09d" translate="yes" xml:space="preserve">
          <source>Node.js uses statically linked libraries such as V8, libuv and OpenSSL. All addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; statements (e.g. &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt;) and &lt;code&gt;node-gyp&lt;/code&gt; will locate the appropriate headers automatically. However, there are a few caveats to be aware of:</source>
          <target state="translated">Node.jsは、V8、libuv、OpenSSLなどの静的にリンクされたライブラリを使用します。すべてのアドオンはV8にリンクする必要があり、他の依存関係にもリンクできます。通常、これは適切な &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; ステートメント（例： &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt; ）を &lt;code&gt;node-gyp&lt;/code&gt; と同じくらい簡単で、node-gypは適切なヘッダーを自動的に見つけます。ただし、注意すべきいくつかの注意事項があります。</target>
        </trans-unit>
        <trans-unit id="62610ad899b4964920eb4169835a333ede0d47ce" translate="yes" xml:space="preserve">
          <source>Node.js uses three kinds of Deprecations:</source>
          <target state="translated">Node.jsは3種類のDeprecationを使用しています。</target>
        </trans-unit>
        <trans-unit id="3cc44a7efe4f28833703418200a1bb5df5098eb3" translate="yes" xml:space="preserve">
          <source>Node.js utilizes three kinds of Deprecations:</source>
          <target state="translated">Node.jsは3種類のDeprecationを利用しています。</target>
        </trans-unit>
        <trans-unit id="a46a838b1cdedce2bf909aec9c2762a50a63df17" translate="yes" xml:space="preserve">
          <source>Node.js was compiled without &lt;code&gt;scrypt&lt;/code&gt; support. Not possible with the official release binaries but can happen with custom builds, including distro builds.</source>
          <target state="translated">Node.jsは &lt;code&gt;scrypt&lt;/code&gt; サポートなしでコンパイルされました。公式リリースバイナリでは不可能ですが、ディストリビューションビルドを含むカスタムビルドでは発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2be6c44f29011482418546ee57fd088cf4e02101" translate="yes" xml:space="preserve">
          <source>Node.js was unable to watch for the &lt;code&gt;SIGINT&lt;/code&gt; signal.</source>
          <target state="translated">Node.jsは &lt;code&gt;SIGINT&lt;/code&gt; シグナルを監視できませんでした。</target>
        </trans-unit>
        <trans-unit id="7aaa445f322cc3682bfe7bf5c6b4e24edfb5f0d7" translate="yes" xml:space="preserve">
          <source>Node.js will generate and throw &lt;code&gt;RangeError&lt;/code&gt; instances &lt;em&gt;immediately&lt;/em&gt; as a form of argument validation.</source>
          <target state="translated">Node.jsは、引数の検証の形式として &lt;code&gt;RangeError&lt;/code&gt; インスタンスを&lt;em&gt;即座に&lt;/em&gt;生成してスローします。</target>
        </trans-unit>
        <trans-unit id="8a136533538960fd36c0a7d5584874bcb8bdd70d" translate="yes" xml:space="preserve">
          <source>Node.js will generate and throw &lt;code&gt;TypeError&lt;/code&gt; instances &lt;em&gt;immediately&lt;/em&gt; as a form of argument validation.</source>
          <target state="translated">Node.jsは、引数の検証の形式として &lt;code&gt;TypeError&lt;/code&gt; インスタンスを&lt;em&gt;即座に&lt;/em&gt;生成してスローします。</target>
        </trans-unit>
        <trans-unit id="86b0b7269fa723a49aa2197764257f8d6198ae0b" translate="yes" xml:space="preserve">
          <source>Node.js will normally exit with a &lt;code&gt;0&lt;/code&gt; status code when no more async operations are pending. The following status codes are used in other cases:</source>
          <target state="translated">Node.jsは通常、保留中の非同期操作がなくなると、ステータスコード &lt;code&gt;0&lt;/code&gt; で終了します。その他の場合、次のステータスコードが使用されます。</target>
        </trans-unit>
        <trans-unit id="155db0c5b4c4ce480a51da327fc9bc6915920c76" translate="yes" xml:space="preserve">
          <source>Node.js will treat as &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt; all other forms of input, such as &lt;code&gt;.js&lt;/code&gt; files where the nearest parent &lt;code&gt;package.json&lt;/code&gt; file contains no top-level &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, or string input without the flag &lt;code&gt;--input-type&lt;/code&gt;. This behavior is to preserve backward compatibility. However, now that Node.js supports both CommonJS and ES modules, it is best to be explicit whenever possible. Node.js will treat the following as CommonJS when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="translated">Node.jsは、最も近い親の &lt;code&gt;package.json&lt;/code&gt; ファイルに最上位の &lt;code&gt;&quot;type&quot;&lt;/code&gt; フィールドが含まれていない &lt;code&gt;.js&lt;/code&gt; ファイルや、フラグ &lt;code&gt;--input-type&lt;/code&gt; のない文字列入力など、他のすべての形式の入力を&lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;として扱います。この動作は、下位互換性を維持するためのものです。ただし、Node.jsがCommonJSモジュールとESモジュールの両方をサポートするようになったため、可能な限り明示的にすることをお勧めします。 Node.jsは、 &lt;code&gt;node&lt;/code&gt; に初期入力として渡されたとき、またはESモジュールコード内の &lt;code&gt;import&lt;/code&gt; ステートメントによって参照されたときに、以下をCommonJSとして扱います。</target>
        </trans-unit>
        <trans-unit id="6d156462ec2e4a54246399867711ae97a6c34c54" translate="yes" xml:space="preserve">
          <source>Node.js will treat as CommonJS all other forms of input, such as &lt;code&gt;.js&lt;/code&gt; files where the nearest parent &lt;code&gt;package.json&lt;/code&gt; file contains no top-level &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, or string input without the flag &lt;code&gt;--input-type&lt;/code&gt;. This behavior is to preserve backward compatibility. However, now that Node.js supports both CommonJS and ES modules, it is best to be explicit whenever possible. Node.js will treat the following as CommonJS when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="translated">Node.jsは、最も近い親の &lt;code&gt;package.json&lt;/code&gt; ファイルに最上位の &lt;code&gt;&quot;type&quot;&lt;/code&gt; フィールドが含まれていない &lt;code&gt;.js&lt;/code&gt; ファイルや、フラグ &lt;code&gt;--input-type&lt;/code&gt; のない文字列入力など、他のすべての入力形式をCommonJSとして扱います。この動作は、下位互換性を維持するためのものです。ただし、Node.jsがCommonJSモジュールとESモジュールの両方をサポートするようになったため、可能な限り明示的にすることをお勧めします。Node.jsは、 &lt;code&gt;node&lt;/code&gt; に初期入力として渡される場合、またはESモジュールコード内の &lt;code&gt;import&lt;/code&gt; ステートメントによって参照される場合、以下をCommonJSとして扱います。</target>
        </trans-unit>
        <trans-unit id="147e38b7dc6f7e7f835ab0bcf608d595e57a6d0d" translate="yes" xml:space="preserve">
          <source>Node.js will treat the following as &lt;a href=&quot;esm&quot;&gt;ES modules&lt;/a&gt; when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="translated">Node.jsは、初期入力として &lt;code&gt;node&lt;/code&gt; に渡されたとき、またはESモジュールコード内の &lt;code&gt;import&lt;/code&gt; ステートメントによって参照されたときに、以下を&lt;a href=&quot;esm&quot;&gt;ESモジュール&lt;/a&gt;として扱います。</target>
        </trans-unit>
        <trans-unit id="2745ff23353f08077c9763af60cfd72843015ebb" translate="yes" xml:space="preserve">
          <source>Node.js's debugger client is not a full-featured debugger, but simple step and inspection are possible.</source>
          <target state="translated">Node.jsのデバッガークライアントはフル機能のデバッガではありませんが、簡単なステップやインスペクションは可能です。</target>
        </trans-unit>
        <trans-unit id="60873216d1e300530ea8a2768f6ff649a8955203" translate="yes" xml:space="preserve">
          <source>Node.js-specific alias for &lt;code&gt;eventTarget.addListener()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eventTarget.addListener()&lt;/code&gt; のNode.js固有のエイリアス。</target>
        </trans-unit>
        <trans-unit id="6509b24d38783cbfefe9a3a56034e3ca2386c75d" translate="yes" xml:space="preserve">
          <source>Node.js-specific alias for &lt;code&gt;eventTarget.removeListener()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eventTarget.removeListener()&lt;/code&gt; のNode.js固有のエイリアス。</target>
        </trans-unit>
        <trans-unit id="79171832c8c5742998fb3ce715335c31c87f30d9" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that adds a &lt;code&gt;once&lt;/code&gt; listener for the given event &lt;code&gt;type&lt;/code&gt;. This is equivalent to calling &lt;code&gt;on&lt;/code&gt; with the &lt;code&gt;once&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">指定されたイベント &lt;code&gt;type&lt;/code&gt; &lt;code&gt;once&lt;/code&gt; リスナーを追加する &lt;code&gt;EventTarget&lt;/code&gt; クラスのNode.js固有の拡張。これは、呼び出すのと同じである &lt;code&gt;on&lt;/code&gt; して &lt;code&gt;once&lt;/code&gt; にオプションを設定し &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="45bffbe24e10e4a97eddbf0c7c114da59faf30ad" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that emulates the equivalent &lt;code&gt;EventEmitter&lt;/code&gt; API. The only difference between &lt;code&gt;addListener()&lt;/code&gt; and &lt;code&gt;addEventListener()&lt;/code&gt; is that &lt;code&gt;addListener()&lt;/code&gt; will return a reference to the &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;EventEmitter&lt;/code&gt; APIをエミュレートする &lt;code&gt;EventTarget&lt;/code&gt; クラスのNode.js固有の拡張。 &lt;code&gt;addListener()&lt;/code&gt; と &lt;code&gt;addEventListener()&lt;/code&gt; の唯一の違いは、 &lt;code&gt;addListener()&lt;/code&gt; が &lt;code&gt;EventTarget&lt;/code&gt; への参照を返すことです。</target>
        </trans-unit>
        <trans-unit id="e64e97ca9a09285a7f734c2f63dbff7417bcebb7" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that removes the &lt;code&gt;listener&lt;/code&gt; for the given &lt;code&gt;type&lt;/code&gt;. The only difference between &lt;code&gt;removeListener()&lt;/code&gt; and &lt;code&gt;removeEventListener()&lt;/code&gt; is that &lt;code&gt;removeListener()&lt;/code&gt; will return a reference to the &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;type&lt;/code&gt; &lt;code&gt;listener&lt;/code&gt; を削除する &lt;code&gt;EventTarget&lt;/code&gt; クラスのNode.js固有の拡張。 &lt;code&gt;removeListener()&lt;/code&gt; と &lt;code&gt;removeEventListener()&lt;/code&gt; の唯一の違いは、 &lt;code&gt;removeListener()&lt;/code&gt; が &lt;code&gt;EventTarget&lt;/code&gt; への参照を返すことです。</target>
        </trans-unit>
        <trans-unit id="58a3b624b039863a7cfaf372fa5f8e8793d5ecaf" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that returns an array of event &lt;code&gt;type&lt;/code&gt; names for which event listeners are registered.</source>
          <target state="translated">イベントリスナーが登録されているイベント &lt;code&gt;type&lt;/code&gt; 名の配列を返す &lt;code&gt;EventTarget&lt;/code&gt; クラスのNode.js固有の拡張。</target>
        </trans-unit>
        <trans-unit id="982b7a762cfbd11198763ac7b4757540c86749e9" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class that returns the number of event listeners registered for the &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 登録されているイベントリスナーの数を返す &lt;code&gt;EventTarget&lt;/code&gt; クラスのNode.js固有の拡張。</target>
        </trans-unit>
        <trans-unit id="057ce1bfc2fde706a1ff2a67329d6b4077df18fa" translate="yes" xml:space="preserve">
          <source>Node.js-specific extension to the &lt;code&gt;EventTarget&lt;/code&gt; class. If &lt;code&gt;type&lt;/code&gt; is specified, removes all registered listeners for &lt;code&gt;type&lt;/code&gt;, otherwise removes all registered listeners.</source>
          <target state="translated">&lt;code&gt;EventTarget&lt;/code&gt; クラスのNode.js固有の拡張。場合は &lt;code&gt;type&lt;/code&gt; 指定されている、のすべての登録されたリスナーを削除 &lt;code&gt;type&lt;/code&gt; 、それ以外のすべての登録されたリスナーを削除します。</target>
        </trans-unit>
        <trans-unit id="a937ec6245c951225fcd0ec58796759da4816865" translate="yes" xml:space="preserve">
          <source>Node.js-specific extensions</source>
          <target state="translated">Node.js 固有の拡張機能</target>
        </trans-unit>
        <trans-unit id="7c0906e04d49a9c95bcb1edada2bb82cc8a7ad4c" translate="yes" xml:space="preserve">
          <source>Node.js-speciic alias for &lt;code&gt;eventTarget.removeListener()&lt;/code&gt;.</source>
          <target state="translated">Node.js-eventTarget.removeListener &lt;code&gt;eventTarget.removeListener()&lt;/code&gt; 特定のエイリアス。</target>
        </trans-unit>
        <trans-unit id="ac1013f374841b5452514d4b8359e7422406574b" translate="yes" xml:space="preserve">
          <source>Non-finite number values (&lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+Infinity&lt;/code&gt;, or &lt;code&gt;-Infinity&lt;/code&gt;) set the result to zero.</source>
          <target state="translated">非有限の数値（ &lt;code&gt;NaN&lt;/code&gt; 、 &lt;code&gt;+Infinity&lt;/code&gt; 、または &lt;code&gt;-Infinity&lt;/code&gt; ）は、結果をゼロに設定します。</target>
        </trans-unit>
        <trans-unit id="7d5e643747b3ffedc83ffcb3b71cbc3c5585ca03" translate="yes" xml:space="preserve">
          <source>Not all constants will be available on every operating system.</source>
          <target state="translated">すべての定数がすべてのオペレーティングシステムで利用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="67c4d0506a441a717b8988584c29925382c7326c" translate="yes" xml:space="preserve">
          <source>Not applicable</source>
          <target state="translated">該当なし</target>
        </trans-unit>
        <trans-unit id="4436debc55754f82e9d430eaa05339b900fd927e" translate="yes" xml:space="preserve">
          <source>Not every constant will be available on every operating system.</source>
          <target state="translated">すべての定数がすべてのオペレーティングシステムで利用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="549ab44d98603b37017112009e5442a545e8a373" translate="yes" xml:space="preserve">
          <source>Not exported by the &lt;code&gt;zlib&lt;/code&gt; module. It is documented here because it is the base class of the compressor/decompressor classes.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; モジュールではエクスポートされません。これは、コンプレッサー/デコンプレッサークラスの基本クラスであるため、ここに記載されています。</target>
        </trans-unit>
        <trans-unit id="bf19ed98b0dffdc4b322b922e2a0a394c9f67eab" translate="yes" xml:space="preserve">
          <source>Not handling &lt;code&gt;Promise&lt;/code&gt; rejections is deprecated.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; の拒否を処理しないことは非推奨です。</target>
        </trans-unit>
        <trans-unit id="c0b39022c2215221063a53f78441f94d3dba109d" translate="yes" xml:space="preserve">
          <source>Not including an integrity is the same as setting the integrity to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">整合性を含めないことは、整合性を &lt;code&gt;null&lt;/code&gt; に設定することと同じです。</target>
        </trans-unit>
        <trans-unit id="0f471ec3f86ad87114b1805cf0ff78e30f33eee3" translate="yes" xml:space="preserve">
          <source>Not listening to this event no longer causes the socket to be destroyed if a client sends an Upgrade header.</source>
          <target state="translated">このイベントをリッスンしないことで、クライアントがアップグレードヘッダを送信してもソケットが破壊されないようになりました。</target>
        </trans-unit>
        <trans-unit id="d73f792bf4588a09b4c61304ecd28cf0baf02107" translate="yes" xml:space="preserve">
          <source>Notable differences inside a Worker environment are:</source>
          <target state="translated">ワーカー環境の中での顕著な違いは、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="116bc38e0fa5e5ee07a1a94f2fa6f1bd37a22e34" translate="yes" xml:space="preserve">
          <source>Note about UDP datagram size</source>
          <target state="translated">UDPデータグラムのサイズについての注意点</target>
        </trans-unit>
        <trans-unit id="580765b00e88c3ab1fc90c8c0303dbfa89b6d16c" translate="yes" xml:space="preserve">
          <source>Note it is &lt;em&gt;not&lt;/em&gt; necessary to use &lt;code&gt;napi_make_callback&lt;/code&gt; from within a &lt;code&gt;napi_async_complete_callback&lt;/code&gt;; in that situation the callback's async context has already been set up, so a direct call to &lt;code&gt;napi_call_function&lt;/code&gt; is sufficient and appropriate. Use of the &lt;code&gt;napi_make_callback&lt;/code&gt; function may be required when implementing custom async behavior that does not use &lt;code&gt;napi_create_async_work&lt;/code&gt;.</source>
          <target state="translated">注意し&lt;em&gt;ていない&lt;/em&gt;使用する必要が &lt;code&gt;napi_make_callback&lt;/code&gt; を内から &lt;code&gt;napi_async_complete_callback&lt;/code&gt; 。その状況では、コールバックの非同期コンテキストがすでに設定されているため、 &lt;code&gt;napi_call_function&lt;/code&gt; を直接呼び出すだけで十分で適切です。使用 &lt;code&gt;napi_make_callback&lt;/code&gt; を使用しない独自の非同期動作実装する際の機能が必要になることがあり &lt;code&gt;napi_create_async_work&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a541315c3564892fb6389e50b5bf3c97adc29a5f" translate="yes" xml:space="preserve">
          <source>Note on &lt;code&gt;:authority&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:authority&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; に関する注記</target>
        </trans-unit>
        <trans-unit id="a2819ecc02995f7a6240325d276ffeabbdeecff8" translate="yes" xml:space="preserve">
          <source>Note, &lt;code&gt;blob:&lt;/code&gt; URLs adopt their origin from the path they contain, and so a scope of &lt;code&gt;&quot;blob:https://nodejs.org&quot;&lt;/code&gt; will have no effect since no URL can have an origin of &lt;code&gt;blob:https://nodejs.org&lt;/code&gt;; URLs starting with &lt;code&gt;blob:https://nodejs.org/&lt;/code&gt; will use &lt;code&gt;https://nodejs.org&lt;/code&gt; for its origin and thus &lt;code&gt;https:&lt;/code&gt; for its protocol scope. For opaque origin &lt;code&gt;blob:&lt;/code&gt; URLs they will have &lt;code&gt;blob:&lt;/code&gt; for their protocol scope since they do not adopt origins.</source>
          <target state="translated">注 &lt;code&gt;blob:&lt;/code&gt; URLは、含まれているパスからの起点を採用し &lt;code&gt;&quot;blob:https://nodejs.org&quot;&lt;/code&gt; 、「blob：https：//nodejs.org」のスコープは、どのURLも &lt;code&gt;blob:https://nodejs.org&lt;/code&gt; 起点を持つことができないため、効果がありません。 org ; &lt;code&gt;blob:https://nodejs.org/&lt;/code&gt; で始まるURLは、その起点に &lt;code&gt;https://nodejs.org&lt;/code&gt; を使用し、したがってプロトコルスコープに &lt;code&gt;https:&lt;/code&gt; を使用します。不透明なオリジン &lt;code&gt;blob:&lt;/code&gt; URLの場合、オリジンを採用しないため、プロトコルスコープに &lt;code&gt;blob:&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="d6e41c1622948c03f6ca8311eb8aef26b223ccf0" translate="yes" xml:space="preserve">
          <source>Note, however, that using &lt;code&gt;--preserve-symlinks&lt;/code&gt; can have other side effects. Specifically, symbolically linked &lt;em&gt;native&lt;/em&gt; modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown).</source>
          <target state="translated">ただし、 &lt;code&gt;--preserve-symlinks&lt;/code&gt; を使用すると、他の副作用が生じる可能性があることに注意してください。特に、依存関係ツリーの複数の場所からリンクされている場合、シンボリックリンクされた&lt;em&gt;ネイティブ&lt;/em&gt;モジュールはロードに失敗する可能性があります（Node.jsはそれらを2つの別個のモジュールとして認識し、モジュールを複数回ロードしようとするため、例外がスローされます）。</target>
        </trans-unit>
        <trans-unit id="972cb08f7fa7ede61014198194e4bb40a809cbac" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;getSession()&lt;/code&gt; works only for TLSv1.2 and below. For TLSv1.3, applications must use the &lt;a href=&quot;#tls_event_session&quot;&gt;&lt;code&gt;'session'&lt;/code&gt;&lt;/a&gt; event (it also works for TLSv1.2 and below).</source>
          <target state="translated">注： &lt;code&gt;getSession()&lt;/code&gt; はTLSv1.2以下でのみ機能します。TLSv1.3の場合、アプリケーションは&lt;a href=&quot;#tls_event_session&quot;&gt; &lt;code&gt;'session'&lt;/code&gt; &lt;/a&gt;イベントを使用する必要があります（これはTLSv1.2以下でも機能します）。</target>
        </trans-unit>
        <trans-unit id="ecd844f1014ce393ccf5d8fffcaf8b96adac6bf1" translate="yes" xml:space="preserve">
          <source>Note: &lt;em&gt;specifier&lt;/em&gt; is now a bare specifier.</source>
          <target state="translated">注：&lt;em&gt;指定子&lt;/em&gt;は、ベアの指定子になりました。</target>
        </trans-unit>
        <trans-unit id="01f9d22189eec14674a459713bb8e39e51c5a5c9" translate="yes" xml:space="preserve">
          <source>Note: For TLSv1.2 and below, &lt;a href=&quot;#tls_tlssocket_getsession&quot;&gt;&lt;code&gt;tls.TLSSocket.getSession()&lt;/code&gt;&lt;/a&gt; can be called once the handshake is complete. For TLSv1.3, only ticket based resumption is allowed by the protocol, multiple tickets are sent, and the tickets aren't sent until later, after the handshake completes, so it is necessary to wait for the &lt;code&gt;'session'&lt;/code&gt; event to get a resumable session. Applications are recommended to use the &lt;code&gt;'session'&lt;/code&gt; event instead of &lt;code&gt;getSession()&lt;/code&gt; to ensure they will work for all TLS protocol versions. Applications that only expect to get or use 1 session should listen for this event only once:</source>
          <target state="translated">注：TLSv1.2以前の場合、ハンドシェイクが完了すると&lt;a href=&quot;#tls_tlssocket_getsession&quot;&gt; &lt;code&gt;tls.TLSSocket.getSession()&lt;/code&gt; &lt;/a&gt;を呼び出すことができます。 TLSv1.3の場合、プロトコルではチケットベースの再開のみが​​許可され、複数のチケットが送信され、チケットはハンドシェイクが完了するまで送信されないため、 &lt;code&gt;'session'&lt;/code&gt; イベントが取得されるまで待機する必要があります。再開可能なセッション。アプリケーションは、すべてのTLSプロトコルバージョンで確実に機能するように、 &lt;code&gt;getSession()&lt;/code&gt; ではなく &lt;code&gt;'session'&lt;/code&gt; イベントを使用することをお勧めします。 1つのセッションの取得または使用のみを期待するアプリケーションは、このイベントを1回だけリッスンする必要があります。</target>
        </trans-unit>
        <trans-unit id="143d66316a52090c9d94eb1ce24b88eea6b0ee08" translate="yes" xml:space="preserve">
          <source>Note: If the source value of a text-based format (i.e., &lt;code&gt;'json'&lt;/code&gt;, &lt;code&gt;'module'&lt;/code&gt;) is not a string, it is converted to a string using &lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt;&lt;code&gt;util.TextDecoder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注：テキストベースの形式（つまり、 &lt;code&gt;'json'&lt;/code&gt; 、 &lt;code&gt;'module'&lt;/code&gt; ）のソース値が文字列でない場合は、&lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt; &lt;code&gt;util.TextDecoder&lt;/code&gt; &lt;/a&gt;を使用して文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="b8cc0b60938c91b13e1400e17c52a12ff07dd161" translate="yes" xml:space="preserve">
          <source>Note: The format of the output is identical to the output of &lt;code&gt;openssl s_client -trace&lt;/code&gt; or &lt;code&gt;openssl s_server -trace&lt;/code&gt;. While it is produced by OpenSSL's &lt;code&gt;SSL_trace()&lt;/code&gt; function, the format is undocumented, can change without notice, and should not be relied on.</source>
          <target state="translated">注：出力の形式は、 &lt;code&gt;openssl s_client -trace&lt;/code&gt; または &lt;code&gt;openssl s_server -trace&lt;/code&gt; の出力と同じです。OpenSSLの &lt;code&gt;SSL_trace()&lt;/code&gt; 関数によって生成されますが、形式は文書化されておらず、予告なしに変更される可能性があるため、これに依存することはできません。</target>
        </trans-unit>
        <trans-unit id="eeb03c3f0f36f676cbf5598bceb30b9b907caf42" translate="yes" xml:space="preserve">
          <source>Note: The loaders API is being redesigned. This hook may disappear or its signature may change. Do not rely on the API described below.</source>
          <target state="translated">注意:ローダーAPIは再設計中です。このフックは消滅したり、シグネチャが変更されたりするかもしれません。以下に説明するAPIに頼らないでください。</target>
        </trans-unit>
        <trans-unit id="1137c6d126d9539fc06dcec9bc60743ec7916ed7" translate="yes" xml:space="preserve">
          <source>Note: These types all correspond to classes defined in ECMAScript.</source>
          <target state="translated">注:これらの型はすべてECMAScriptで定義されているクラスに対応しています。</target>
        </trans-unit>
        <trans-unit id="4616f15367371a5e06b48d2440f7200dc5d1e91b" translate="yes" xml:space="preserve">
          <source>Note: this is not a strong encapsulation as any private modules can still be loaded by absolute paths.</source>
          <target state="translated">注意:プライベートモジュールは絶対パスでロードできるので、これは強力なカプセル化ではありません。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="19206efecb0b7ff72417c2ea1e1677519502ef39" translate="yes" xml:space="preserve">
          <source>Now only the defined subpath in &lt;a href=&quot;#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; can be imported by a consumer:</source>
          <target state="translated">これで、コンシューマーは&lt;a href=&quot;#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;で定義されたサブパスのみをインポートできます。</target>
        </trans-unit>
        <trans-unit id="a03c6fe1c5a7dfc8aba7cdb4a41e8ccd36e1826f" translate="yes" xml:space="preserve">
          <source>Now, however, passing either &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">ただし、 &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; を渡すと、 &lt;code&gt;TypeError&lt;/code&gt; がスローされるようになりました。</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="2bdc0c2afdfc8111c042201c3e20a922dbf5c7df" translate="yes" xml:space="preserve">
          <source>Number of times &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;writable.uncork()&lt;/code&gt;&lt;/a&gt; needs to be called in order to fully uncork the stream.</source>
          <target state="translated">ストリームのコルクを完全に解除するために&lt;a href=&quot;#stream_writable_uncork&quot;&gt; &lt;code&gt;writable.uncork()&lt;/code&gt; &lt;/a&gt;を呼び出す必要がある回数。</target>
        </trans-unit>
        <trans-unit id="29e915ad9f7438f469d5fcc18ac6ba4e549838fd" translate="yes" xml:space="preserve">
          <source>Numbers which contain a decimal point, such as floating-point numbers or numbers in scientific notation, are not an exception to this rule. Leading numbers up to the decimal point will be set as the URL's port, assuming they are valid:</source>
          <target state="translated">浮動小数点数や科学表記の数字など、小数点を含む数字はこの規則の例外ではありません。小数点までの先頭の数字は、有効であると仮定して、URLのポートとして設定されます。</target>
        </trans-unit>
        <trans-unit id="950d326ee993b3c5fd62c84949251f546e884fe5" translate="yes" xml:space="preserve">
          <source>Numeric strings, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; are now allowed time specifiers.</source>
          <target state="translated">数値文字列、 &lt;code&gt;NaN&lt;/code&gt; および &lt;code&gt;Infinity&lt;/code&gt; で時間指定子を使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="b569a17c3091df771016c89c44b2ffb4e1607960" translate="yes" xml:space="preserve">
          <source>OCSPRequest event (tls.Server)</source>
          <target state="translated">OCSPRequest イベント (tls.Server)</target>
        </trans-unit>
        <trans-unit id="869b3c3e713ad68da924ccf887bfa9fee9bd8b2b" translate="yes" xml:space="preserve">
          <source>OCSPResponse event (tls.TLSSocket)</source>
          <target state="translated">OCSPResponse イベント (tls.TLSSocket)</target>
        </trans-unit>
        <trans-unit id="de8aa86286dbb8eb74d2748c7b6d4486d0458203" translate="yes" xml:space="preserve">
          <source>OS</source>
          <target state="translated">OS</target>
        </trans-unit>
        <trans-unit id="bf4c411135eaccffeeffff0459da3c06dede6217" translate="yes" xml:space="preserve">
          <source>OS Constants</source>
          <target state="translated">OS定数</target>
        </trans-unit>
        <trans-unit id="6965d55430bc54c35413fd5c8bf55a36f18c649b" translate="yes" xml:space="preserve">
          <source>OS constants</source>
          <target state="translated">OS定数</target>
        </trans-unit>
        <trans-unit id="ac9cc4a542ab690808d6be64e5ca5ad4762815a8" translate="yes" xml:space="preserve">
          <source>Object &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;Object&amp;gt;&lt;/a&gt;</source>
          <target state="translated">オブジェクト&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&amp;lt;オブジェクト&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bddd1661aadc76f58c10dd21eeb8e7deaace4a15" translate="yes" xml:space="preserve">
          <source>Object Creation Functions</source>
          <target state="translated">オブジェクト作成機能</target>
        </trans-unit>
        <trans-unit id="802b3a5ff4c325801801b1f33c90e6aeb50581e9" translate="yes" xml:space="preserve">
          <source>Object Lifetime management</source>
          <target state="translated">オブジェクトの寿命管理</target>
        </trans-unit>
        <trans-unit id="da1a453a1b599c80407bbb5b25d54d19f9155848" translate="yes" xml:space="preserve">
          <source>Object Mode</source>
          <target state="translated">オブジェクトモード</target>
        </trans-unit>
        <trans-unit id="0e31dc36041309eb25a82e43f179da4c384a8655" translate="yes" xml:space="preserve">
          <source>Object Mode Duplex Streams</source>
          <target state="translated">オブジェクトモード 二重ストリーム</target>
        </trans-unit>
        <trans-unit id="e00ee9265d488224abef0452c70b1277e5a83f49" translate="yes" xml:space="preserve">
          <source>Object Wrap</source>
          <target state="translated">オブジェクトラップ</target>
        </trans-unit>
        <trans-unit id="ed4585f1bf8f3e5d64756e5a2158cd6c89ec5f06" translate="yes" xml:space="preserve">
          <source>Object creation functions</source>
          <target state="translated">オブジェクト作成機能</target>
        </trans-unit>
        <trans-unit id="6e782d8ce1f909216afa55f0563a026fe7e818df" translate="yes" xml:space="preserve">
          <source>Object factory</source>
          <target state="translated">オブジェクト工場</target>
        </trans-unit>
        <trans-unit id="ab6016ee032803e49db26c34525dd3ec5b87e864" translate="yes" xml:space="preserve">
          <source>Object lifetime management</source>
          <target state="translated">オブジェクトの寿命管理</target>
        </trans-unit>
        <trans-unit id="7f58022f766261caffba5edc95b9a9f6abe4cafe" translate="yes" xml:space="preserve">
          <source>Object mode</source>
          <target state="translated">オブジェクトモード</target>
        </trans-unit>
        <trans-unit id="16ec0f1b0142b04e2c99de9fa13eb604badafb51" translate="yes" xml:space="preserve">
          <source>Object mode duplex streams</source>
          <target state="translated">オブジェクトモードの二重ストリーム</target>
        </trans-unit>
        <trans-unit id="eb1df3362912f24b36ee95c2e780ae5886f130ba" translate="yes" xml:space="preserve">
          <source>Object wrap</source>
          <target state="translated">オブジェクトラップ</target>
        </trans-unit>
        <trans-unit id="97d591c73dd9bade5d6e035ec1c272d3d2d914a0" translate="yes" xml:space="preserve">
          <source>Objects assigned to the exports of this instance may allow importers of the module to access information outside the specified &lt;code&gt;context&lt;/code&gt;. Use &lt;code&gt;vm.runInContext()&lt;/code&gt; to create objects in a specific context.</source>
          <target state="translated">このインスタンスのエクスポートに割り当てられたオブジェクトにより、モジュールのインポーターが指定された &lt;code&gt;context&lt;/code&gt; 外の情報にアクセスできる場合があります。使用 &lt;code&gt;vm.runInContext()&lt;/code&gt; 特定のコンテキスト内のオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="241d3fb63dae7cf76601d561abf3a990fe514c68" translate="yes" xml:space="preserve">
          <source>Objects may also define their own &lt;a href=&quot;#util_util_inspect_custom&quot;&gt;&lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt;&lt;/a&gt; function, which &lt;code&gt;util.inspect()&lt;/code&gt; will invoke and use the result of when inspecting the object:</source>
          <target state="translated">オブジェクトは、独自の&lt;a href=&quot;#util_util_inspect_custom&quot;&gt; &lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt; &lt;/a&gt;関数を定義することもできます &lt;code&gt;util.inspect()&lt;/code&gt; は、オブジェクトを検査するときに、その結​​果を呼び出して使用します。</target>
        </trans-unit>
        <trans-unit id="405e84c6a63356b689521faa0c8b25c5d64dde37" translate="yes" xml:space="preserve">
          <source>Objects returned from &lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt;&lt;code&gt;fs.fstat()&lt;/code&gt;&lt;/a&gt; and their synchronous counterparts are of this type. If &lt;code&gt;bigint&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; passed to those methods is true, the numeric values will be &lt;code&gt;bigint&lt;/code&gt; instead of &lt;code&gt;number&lt;/code&gt;, and the object will contain additional nanosecond-precision properties suffixed with &lt;code&gt;Ns&lt;/code&gt;.</source>
          <target state="translated">返されたオブジェクト&lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;fs.stat()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt; &lt;code&gt;fs.fstat()&lt;/code&gt; &lt;/a&gt;およびそれらの同期カウンターパートは、このタイプのものです。場合 &lt;code&gt;bigint&lt;/code&gt; に &lt;code&gt;options&lt;/code&gt; これらのメソッドに渡されるがtrueの場合、数値はなり &lt;code&gt;bigint&lt;/code&gt; 代わりの &lt;code&gt;number&lt;/code&gt; 、及びオブジェクトは、接尾辞の追加ナノ秒精度の特性が含まれます &lt;code&gt;Ns&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d0d2e6c538dec52ec33838e688cc3db3a4ab623" translate="yes" xml:space="preserve">
          <source>Objects returned from &lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt;&lt;code&gt;fs.fstat()&lt;/code&gt;&lt;/a&gt; and their synchronous counterparts are of this type. If &lt;code&gt;bigint&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; passed to those methods is true, the numeric values will be &lt;code&gt;bigint&lt;/code&gt; instead of &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt; &lt;code&gt;fs.stat()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt; &lt;code&gt;fs.fstat()&lt;/code&gt; &lt;/a&gt;から返されるオブジェクトと、それらに対応する同期オブジェクトは、このタイプです。場合は &lt;code&gt;bigint&lt;/code&gt; での &lt;code&gt;options&lt;/code&gt; これらのメソッドに渡されたがtrueの場合、数値は次のようになります &lt;code&gt;bigint&lt;/code&gt; 代わりの &lt;code&gt;number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="592e8c13ea9bd4b8af95ba0ada47b20335a6e103" translate="yes" xml:space="preserve">
          <source>Objects with circular references can be used as inputs now.</source>
          <target state="translated">循環参照を持つオブジェクトを入力として使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="a0ea40e2b9bd257d370923337e02a0992196f54f" translate="yes" xml:space="preserve">
          <source>Observe that the &lt;code&gt;then()&lt;/code&gt; callback claims to have executed in the context of the outer scope even though there was an asynchronous hop involved. Also, the &lt;code&gt;triggerAsyncId&lt;/code&gt; value is &lt;code&gt;0&lt;/code&gt;, which means that we are missing context about the resource that caused (triggered) the &lt;code&gt;then()&lt;/code&gt; callback to be executed.</source>
          <target state="translated">ことを観察し &lt;code&gt;then()&lt;/code&gt; コールバックの特許請求の範囲は、関与する非同期ホップがあったにもかかわらず、外側のスコープのコンテキスト内で実行していると。また、 &lt;code&gt;triggerAsyncId&lt;/code&gt; の値は &lt;code&gt;0&lt;/code&gt; です。つまり、 &lt;code&gt;then()&lt;/code&gt; コールバックが実行される（トリガーされる）リソースに関するコンテキストがありません。</target>
        </trans-unit>
        <trans-unit id="083bef7791cf9d1baf8a9873f071dfc52b64445d" translate="yes" xml:space="preserve">
          <source>Occasionally, the deprecation of an API may be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified.</source>
          <target state="translated">時折、APIの非推奨が取り消されることがあります。そのような状況では、このドキュメントは決定に関連する情報で更新されます。ただし、非推奨識別子は変更されません。</target>
        </trans-unit>
        <trans-unit id="598a1ea6bb4b34df4307149358f5d4d90ab41312" translate="yes" xml:space="preserve">
          <source>Occasionally, the deprecation of an API might be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified.</source>
          <target state="translated">時折、APIの非推奨が取り消されることがあります。そのような状況では、このドキュメントは決定に関連する情報で更新されます。ただし、非推奨識別子は変更されません。</target>
        </trans-unit>
        <trans-unit id="ba38afb5d72c78a9ff4e1ee1598f9f9be252886d" translate="yes" xml:space="preserve">
          <source>Occurs with multiple attempts to shutdown an HTTP/2 session.</source>
          <target state="translated">HTTP/2 セッションをシャットダウンしようとすると、複数回発生します。</target>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="translated">Octal</target>
        </trans-unit>
        <trans-unit id="a48963a917f62904a1e8543a2ead20c099e2eff3" translate="yes" xml:space="preserve">
          <source>Offset and length are optional but both &lt;em&gt;must&lt;/em&gt; be set if either are used. They are supported only when the first argument is a &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">オフセットと長さはオプションですが、どちらかを使用する場合は両方を設定する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。これらは、最初の引数が &lt;code&gt;Buffer&lt;/code&gt; または &lt;code&gt;Uint8Array&lt;/code&gt; の場合にのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="8269c5428afc6a034f766b68b360ac4c01e96403" translate="yes" xml:space="preserve">
          <source>Offset and length are optional but both &lt;em&gt;must&lt;/em&gt; be set if either are used. They are supported only when the first argument is a &lt;code&gt;Buffer&lt;/code&gt;, a &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">オフセットと長さはオプションですが、どちらかを使用する場合は両方を設定する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。これらは、最初の引数が &lt;code&gt;Buffer&lt;/code&gt; 、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の場合にのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="e4a4dc432f9794752f6ad30e244e3a8e720cdc69" translate="yes" xml:space="preserve">
          <source>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients &lt;em&gt;must&lt;/em&gt; be supported, the &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS&quot;&gt;TLS recommendations&lt;/a&gt; may offer a compatible cipher suite. For more details on the format, see the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt; documentation.</source>
          <target state="translated">安全でない非推奨のRC4またはDESベースの暗号（Internet Explorer 6など）に依存する古いクライアントは、デフォルトの構成ではハンドシェイクプロセスを完了できません。これらのクライアントをサポートする&lt;em&gt;必要&lt;/em&gt;がある場合、&lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS&quot;&gt;TLS推奨&lt;/a&gt;は互換性のある暗号スイートを提供する場合があります。形式の詳細については、OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;暗号リスト形式の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="39846a8f31378460759ab91e423751587cbcd672" translate="yes" xml:space="preserve">
          <source>Omitting the callback function on asynchronous fs functions is deprecated and may result in an error being thrown in the future.</source>
          <target state="translated">非同期 fs 関数のコールバック関数を省略することは非推奨であり、将来的にエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e37ed6c1806cbc047e27697c95f4a9f5fa450df" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures, this value currently is 2&lt;sup&gt;30&lt;/sup&gt; - 1 (~1GB). On 64-bit architectures, this value currently is 2&lt;sup&gt;31&lt;/sup&gt; - 1 (~2GB).</source>
          <target state="translated">32ビットアーキテクチャでは、この値は、現在、2 &lt;sup&gt;30&lt;/sup&gt; -1（〜1ギガバイト） - 。64ビットアーキテクチャでは、この値は、現在、2 &lt;sup&gt;31&lt;/sup&gt; -1（〜2GB） - 。</target>
        </trans-unit>
        <trans-unit id="6d0e0b0451c6ef174ec5a71852c7111df84bc0bf" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures, this value is &lt;code&gt;(2^30)-1&lt;/code&gt; (~1GB). On 64-bit architectures, this value is &lt;code&gt;(2^31)-1&lt;/code&gt; (~2GB).</source>
          <target state="translated">32ビットアーキテクチャでは、この値は &lt;code&gt;(2^30)-1&lt;/code&gt; （〜1GB）です。64ビットアーキテクチャでは、この値は &lt;code&gt;(2^31)-1&lt;/code&gt; （〜2GB）です。</target>
        </trans-unit>
        <trans-unit id="cece5a81c61c5200f22063c4263b25c9ea0fa07a" translate="yes" xml:space="preserve">
          <source>On Aix systems, this feature depends on &lt;a href=&quot;https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&quot;&gt;&lt;code&gt;AHAFS&lt;/code&gt;&lt;/a&gt;, which must be enabled.</source>
          <target state="translated">Aixシステムでは、この機能は&lt;a href=&quot;https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&quot;&gt; &lt;code&gt;AHAFS&lt;/code&gt; &lt;/a&gt;に依存しているため、有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="3287e458f7d140ce7af1d1893ae19d42b58cb150" translate="yes" xml:space="preserve">
          <source>On BSD systems, this uses &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">BSDシステムでは、これは&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt; &lt;code&gt;kqueue(2)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="8caac710974bc62eceaa895a0fa812289ad69d07" translate="yes" xml:space="preserve">
          <source>On IBM i systems, this feature is not supported.</source>
          <target state="translated">IBM i システムでは、この機能はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="3cee5b68c9afac982d46719c80955c745508f033" translate="yes" xml:space="preserve">
          <source>On IPv4, if &lt;code&gt;multicastInterface&lt;/code&gt; is a valid address but does not match any interface, or if the address does not match the family then a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;System Error&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; or &lt;code&gt;EPROTONOSUP&lt;/code&gt; is thrown.</source>
          <target state="translated">IPv4では、 &lt;code&gt;multicastInterface&lt;/code&gt; が有効なアドレスであるがどのインターフェースとも一致しない場合、またはアドレスがファミリーと一致しない場合、 &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; や &lt;code&gt;EPROTONOSUP&lt;/code&gt; などの&lt;a href=&quot;errors#errors_class_systemerror&quot;&gt; &lt;code&gt;System Error&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="a12d6ebff8b4c4e4e6eb03c5545e6ff9fb72add1" translate="yes" xml:space="preserve">
          <source>On IPv4, if &lt;code&gt;multicastInterface&lt;/code&gt; is a valid address but does not match any interface, or if the address does not match the family then a System Error such as &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; or &lt;code&gt;EPROTONOSUP&lt;/code&gt; is thrown.</source>
          <target state="translated">IPv4では、 &lt;code&gt;multicastInterface&lt;/code&gt; が有効なアドレスであるがどのインターフェイスとも一致しない場合、またはアドレスがファミリと一致しない場合、 &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; や &lt;code&gt;EPROTONOSUP&lt;/code&gt; などのシステムエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="5d73abdde568049652b60fdd5aaa144ebebd0fc9" translate="yes" xml:space="preserve">
          <source>On IPv6, most errors with specifying or omitting scope will result in the socket continuing to use (or returning to) the system's default interface selection.</source>
          <target state="translated">IPv6では、スコープの指定や省略のエラーの多くは、ソケットがシステムのデフォルトのインタフェース選択を使用し続ける(または元のインタフェースに戻る)結果となる。</target>
        </trans-unit>
        <trans-unit id="c0b541a8346341860cd7703b98a4352d06a66130" translate="yes" xml:space="preserve">
          <source>On Linux and macOS systems, &lt;code&gt;fs.watch()&lt;/code&gt; resolves the path to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Inode&quot;&gt;inode&lt;/a&gt; and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the &lt;em&gt;original&lt;/em&gt; inode. Events for the new inode will not be emitted. This is expected behavior.</source>
          <target state="translated">LinuxおよびmacOSシステムでは、 &lt;code&gt;fs.watch()&lt;/code&gt; は&lt;a href=&quot;https://en.wikipedia.org/wiki/Inode&quot;&gt;iノード&lt;/a&gt;へのパスを解決し、iノードを監視します。監視対象のパスが削除されて再作成されると、新しいiノードが割り当てられます。ウォッチは削除のイベントを発行しますが、&lt;em&gt;元の&lt;/em&gt; iノードを引き続き監視します。新しいiノードのイベントは発行されません。これは予想される動作です。</target>
        </trans-unit>
        <trans-unit id="08f31ae143ca922e16ce486612875e1b465fba38" translate="yes" xml:space="preserve">
          <source>On Linux systems, this uses &lt;a href=&quot;http://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt;&lt;code&gt;inotify(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Linuxシステムでは、これは&lt;a href=&quot;http://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt; &lt;code&gt;inotify(7)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d99fa13cd94d439565091aa184b49a5f8b37dff1" translate="yes" xml:space="preserve">
          <source>On Linux systems, this uses &lt;a href=&quot;https://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt;&lt;code&gt;inotify(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Linuxシステムでは、これは&lt;a href=&quot;https://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt; &lt;code&gt;inotify(7)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b2f183efec4feb7bfa6fc109ebc4023975000344" translate="yes" xml:space="preserve">
          <source>On Linux, child processes of child processes will not be terminated when attempting to kill their parent. This is likely to happen when running a new process in a shell or with the use of the &lt;code&gt;shell&lt;/code&gt; option of &lt;code&gt;ChildProcess&lt;/code&gt;:</source>
          <target state="translated">Linuxでは、親を強制終了しようとしたときに、子プロセスの子プロセスは終了しません。これは、シェルで新しいプロセスを実行する場合、または &lt;code&gt;ChildProcess&lt;/code&gt; の &lt;code&gt;shell&lt;/code&gt; オプションを使用する場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7882f8e43f0f64c5514b81f5cfa8dcb3ff288045" translate="yes" xml:space="preserve">
          <source>On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</source>
          <target state="translated">Linux では、ファイルが append モードで開かれているときには、位置書き込みは機能しません。カーネルは位置引数を無視し、常にファイルの最後にデータを追加します。</target>
        </trans-unit>
        <trans-unit id="58c85a79493b7491ac9088c933d8b858c448602a" translate="yes" xml:space="preserve">
          <source>On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</source>
          <target state="translated">Linuxでは、ファイルがappendモードで開かれているときには、位置の書き込みは機能しません。カーネルは位置引数を無視し、常にファイルの最後にデータを追加します。</target>
        </trans-unit>
        <trans-unit id="9554e400419b2712320ba3378dbdb33b6ba3a586" translate="yes" xml:space="preserve">
          <source>On Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on &lt;code&gt;/proc&lt;/code&gt; in order for this function to work. Glibc does not have this restriction.</source>
          <target state="translated">Linuxでは、Node.jsがmusl libcに対してリンクされている場合、この関数が機能するためには、procfsファイルシステムが &lt;code&gt;/proc&lt;/code&gt; にマウントされている必要があります。Glibcにはこの制限はありません。</target>
        </trans-unit>
        <trans-unit id="46927efa147a220d19018a44c19bb0a81a2795b4" translate="yes" xml:space="preserve">
          <source>On POSIX and Windows:</source>
          <target state="translated">POSIXとWindowsで。</target>
        </trans-unit>
        <trans-unit id="51d7bab8caccee4037b352d1dd8b48e36fb94ee8" translate="yes" xml:space="preserve">
          <source>On POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a &lt;em&gt;file descriptor&lt;/em&gt;. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.js abstracts away the specific differences between operating systems and assigns all open files a numeric file descriptor.</source>
          <target state="translated">POSIXシステムでは、カーネルはすべてのプロセスについて、現在開いているファイルとリソースのテーブルを維持します。開いている各ファイルには、&lt;em&gt;ファイル記述子&lt;/em&gt;と呼ばれる単純な数値識別子が割り当てられ&lt;em&gt;ます&lt;/em&gt;。システムレベルでは、すべてのファイルシステム操作がこれらのファイル記述子を使用して、特定の各ファイルを識別および追跡します。Windowsシステムは、リソースを追跡するために、概念的には異なるメカニズムを使用します。ユーザーにとってわかりやすいように、Node.jsはオペレーティングシステム間の特定の違いを抽象化し、開いているすべてのファイルに数値ファイル記述子を割り当てます。</target>
        </trans-unit>
        <trans-unit id="fc406a1e7cf53219ab80c07c59e5aaa1d8a7ae6a" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;GetVersionExW()&lt;/code&gt; is used. Please see &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="translated">POSIXシステムでは、オペレーティングシステムのリリースは、&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; を&lt;/a&gt;呼び出すことによって決定されます。Windowsでは、 &lt;code&gt;GetVersionExW()&lt;/code&gt; が使用されます。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https：//en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="529835cf3a3fa32581d69a9d32689b9ecaa309fc" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;GetVersionExW()&lt;/code&gt; is used. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="translated">POSIXシステムでは、オペレーティングシステムのリリースは&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; を&lt;/a&gt;呼び出すことによって決定されます。Windowsでは、 &lt;code&gt;GetVersionExW()&lt;/code&gt; が使用されます。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https：//en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="26a3b30280dab2fdf275c399eb32f1ec5ace872a" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;RtlGetVersion()&lt;/code&gt; is used, and if it is not available, &lt;code&gt;GetVersionExW()&lt;/code&gt; will be used. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="translated">POSIXシステムでは、オペレーティングシステムのリリースは&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; を&lt;/a&gt;呼び出すことによって決定されます。Windowsでは、 &lt;code&gt;RtlGetVersion()&lt;/code&gt; が使用され、使用できない場合は &lt;code&gt;GetVersionExW()&lt;/code&gt; が使用されます。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https：//en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c9b0e6a082c9e5097d3e7d84e1d93e40884bd8f2" translate="yes" xml:space="preserve">
          <source>On POSIX, it uses the &lt;code&gt;$HOME&lt;/code&gt; environment variable if defined. Otherwise it uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID&quot;&gt;effective UID&lt;/a&gt; to look up the user's home directory.</source>
          <target state="translated">POSIXでは、定義されている場合、 &lt;code&gt;$HOME&lt;/code&gt; 環境変数を使用します。それ以外の場合は、&lt;a href=&quot;https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID&quot;&gt;有効なUID&lt;/a&gt;を使用してユーザーのホームディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="43964d44f0ac16e56226d71c33bedb3c5fe5eddc" translate="yes" xml:space="preserve">
          <source>On POSIX:</source>
          <target state="translated">POSIXで。</target>
        </trans-unit>
        <trans-unit id="fbb774d38621fd75eb708c21854f712a9058284b" translate="yes" xml:space="preserve">
          <source>On SunOS systems (including Solaris and SmartOS), this uses &lt;a href=&quot;http://illumos.org/man/port_create&quot;&gt;&lt;code&gt;event ports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SunOSシステム（SolarisおよびSmartOSを含む）では、これは&lt;a href=&quot;http://illumos.org/man/port_create&quot;&gt; &lt;code&gt;event ports&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d2249ac9863c008934bf32cf468a1af5268e9ec5" translate="yes" xml:space="preserve">
          <source>On SunOS systems (including Solaris and SmartOS), this uses &lt;a href=&quot;https://illumos.org/man/port_create&quot;&gt;&lt;code&gt;event ports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SunOSシステム（SolarisおよびSmartOSを含む）では、これは&lt;a href=&quot;https://illumos.org/man/port_create&quot;&gt; &lt;code&gt;event ports&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="df56f9f559c9d44e41081b83b633aad4f3fae33d" translate="yes" xml:space="preserve">
          <source>On Unix, the local domain is also known as the Unix domain. The path is a filesystem pathname. It gets truncated to &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt;, which varies on different operating system between 91 and 107 bytes. The typical values are 107 on Linux and 103 on macOS. The path is subject to the same naming conventions and permissions checks as would be done on file creation. If the Unix domain socket (that is visible as a file system path) is created and used in conjunction with one of Node.js' API abstractions such as &lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt;, it will be unlinked as part of &lt;a href=&quot;#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt;. On the other hand, if it is created and used outside of these abstractions, the user will need to manually remove it. The same applies when the path was created by a Node.js API but the program crashes abruptly. In short, a Unix domain socket once successfully created will be visible in the filesystem, and will persist until unlinked.</source>
          <target state="translated">Unixでは、ローカルドメインはUnixドメインとも呼ばれます。パスはファイルシステムのパス名です。 &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt; に切り捨てられます。これは、91〜107バイトのさまざまなオペレーティングシステムで異なります。一般的な値は、Linuxでは107、macOSでは103です。パスは、ファイルの作成時に行われるのと同じ命名規則と権限チェックの対象となります。 Unixドメインソケット（ファイルシステムパスとして表示されます）が作成され、&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt; &lt;code&gt;net.createServer()&lt;/code&gt; &lt;/a&gt;などのNode.jsのAPI抽象化の1つと組み合わせて使用​​されると、&lt;a href=&quot;#net_server_close_callback&quot;&gt; &lt;code&gt;server.close()&lt;/code&gt; の&lt;/a&gt;一部としてリンクが解除されます。一方、これらの抽象化の外で作成および使用される場合、ユーザーは手動で削除する必要があります。パスがNode.js APIによって作成された場合も同じことが当てはまりますが、プログラムが突然クラッシュします。つまり、正常に作成されたUnixドメインソケットはファイルシステムに表示され、リンクが解除されるまで保持されます。</target>
        </trans-unit>
        <trans-unit id="cd01d76d0a5be36ebb3d8172b05f7ed5b8cfd655" translate="yes" xml:space="preserve">
          <source>On Unix, the local domain is also known as the Unix domain. The path is a filesystem pathname. It gets truncated to an OS-dependent length of &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt;. Typical values are 107 bytes on Linux and 103 bytes on macOS. If a Node.js API abstraction creates the Unix domain socket, it will unlink the Unix domain socket as well. For example, &lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt; may create a Unix domain socket and &lt;a href=&quot;#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt; will unlink it. But if a user creates the Unix domain socket outside of these abstractions, the user will need to remove it. The same applies when a Node.js API creates a Unix domain socket but the program then crashes. In short, a Unix domain socket will be visible in the filesystem and will persist until unlinked.</source>
          <target state="translated">Unixでは、ローカルドメインはUnixドメインとも呼ばれます。パスはファイルシステムのパス名です。 OSに依存する &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt; 長さに切り捨てられます。一般的な値は、Linuxでは107バイト、macOSでは103バイトです。 Node.js API抽象化によってUnixドメインソケットが作成されると、Unixドメインソケットのリンクも解除されます。たとえば、&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt; &lt;code&gt;net.createServer()&lt;/code&gt; &lt;/a&gt;はUnixドメインソケットを作成し、&lt;a href=&quot;#net_server_close_callback&quot;&gt; &lt;code&gt;server.close()&lt;/code&gt; &lt;/a&gt;はそれをリンク解除します。ただし、ユーザーがこれらの抽象化の外部でUnixドメインソケットを作成した場合、ユーザーはそれを削除する必要があります。 Node.js APIがUnixドメインソケットを作成したが、プログラムがクラッシュした場合も同様です。つまり、Unixドメインソケットはファイルシステムに表示され、リンクが解除されるまで存続します。</target>
        </trans-unit>
        <trans-unit id="3972efd510cd3bdc92bf875a4f0a2ead952896ec" translate="yes" xml:space="preserve">
          <source>On Unix-like operating systems, the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; method performs memory operations synchronously before decoupling the event loop from the child. Applications with a large memory footprint may find frequent &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; calls to be a bottleneck. For more information, see &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7381&quot;&gt;V8 issue 7381&lt;/a&gt;.</source>
          <target state="translated">Unixライクなオペレーティングシステムでは、&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;メソッドは、イベントループを子から分離する前に、メモリ操作を同期的に実行します。メモリフットプリントが大きいアプリケーションでは、&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; の&lt;/a&gt;呼び出しが頻繁にボトルネックになる場合があります。詳細については、&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7381&quot;&gt;V8の問題7381を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="13a6509493c52e58db249370cc4c70c1b95c3182" translate="yes" xml:space="preserve">
          <source>On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example, &lt;code&gt;path.resolve('C:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;path.resolve('C:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、Node.jsはドライブごとの作業ディレクトリの概念に従います。この動作は、円記号のないドライブパスを使用している場合に発生します。例えば、 &lt;code&gt;path.resolve('C:\\')&lt;/code&gt; 潜在的に異なる結果を返すことができ &lt;code&gt;path.resolve('C:')&lt;/code&gt; 。詳細については、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;このMSDNページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7cccd5ed6fa224a3e49b57994f042004b58a3d24" translate="yes" xml:space="preserve">
          <source>On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example, &lt;code&gt;path.resolve('c:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;path.resolve('c:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、Node.jsはドライブごとの作業ディレクトリの概念に従います。この動作は、バックスラッシュのないドライブパスを使用しているときに観察できます。例えば、 &lt;code&gt;path.resolve('c:\\')&lt;/code&gt; 、潜在的に異なる結果を返すことができ &lt;code&gt;path.resolve('c:')&lt;/code&gt; 。詳細については、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;このMSDNページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="44da2b295d7da47cf09267ff3645f95eea8d9b81" translate="yes" xml:space="preserve">
          <source>On Windows operating systems, environment variables are case-insensitive.</source>
          <target state="translated">Windows オペレーティングシステムでは、環境変数は大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="9ea919f697c12d8bddae320cb521d2942ea420cb" translate="yes" xml:space="preserve">
          <source>On Windows setting priority to &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; requires elevated user, otherwise the set priority will be silently reduced to &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、優先度を &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; に設定するには昇格されたユーザーが必要です。そうでない場合、設定された優先度は暗黙的に &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; に下げられます。</target>
        </trans-unit>
        <trans-unit id="1ec6383b7c3b09150b80d42778d5cc7a98c50e48" translate="yes" xml:space="preserve">
          <source>On Windows systems only, returns an equivalent &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#namespaces&quot;&gt;namespace-prefixed path&lt;/a&gt; for the given &lt;code&gt;path&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is not a string, &lt;code&gt;path&lt;/code&gt; will be returned without modifications.</source>
          <target state="translated">唯一のWindowsシステムでは、同等返し&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#namespaces&quot;&gt;名前空間接頭辞パス&lt;/a&gt;与えられたために &lt;code&gt;path&lt;/code&gt; 。場合は &lt;code&gt;path&lt;/code&gt; 文字列でない、 &lt;code&gt;path&lt;/code&gt; 変更せずに返されます。</target>
        </trans-unit>
        <trans-unit id="9768705b87b168aec5ab1fa9f7b54014d3f95ac4" translate="yes" xml:space="preserve">
          <source>On Windows systems, this feature depends on &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&quot;&gt;&lt;code&gt;ReadDirectoryChangesW&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Windowsシステムでは、この機能は&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&quot;&gt; &lt;code&gt;ReadDirectoryChangesW&lt;/code&gt; に&lt;/a&gt;依存しています。</target>
        </trans-unit>
        <trans-unit id="9123970462a9a43d3561651e7ada1125be2a24b6" translate="yes" xml:space="preserve">
          <source>On Windows the error number provided by the system will be normalized by libuv.</source>
          <target state="translated">Windowsでは、システムから提供されたエラー番号はlibuvによって正規化されます。</target>
        </trans-unit>
        <trans-unit id="3df2880a42d4864e454ff5c30b2f005eea801949" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;NODE_PATH&lt;/code&gt; is delimited by semicolons (&lt;code&gt;;&lt;/code&gt;) instead of colons.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;NODE_PATH&lt;/code&gt; はコロンではなくセミコロン（ &lt;code&gt;;&lt;/code&gt; ）で区切られます。</target>
        </trans-unit>
        <trans-unit id="5931a3f0a8409d7489021967eca3c561a80a89c9" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs having encoded backslash will result in a throw:</source>
          <target state="translated">Windowsでは、 &lt;code&gt;file:&lt;/code&gt; バックスラッシュがエンコードされたURLがスローされます。</target>
        </trans-unit>
        <trans-unit id="5dfd6792c90679bed7685f41f16795e616150055" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs with a host name convert to UNC paths, while &lt;code&gt;file:&lt;/code&gt; URLs with drive letters convert to local absolute paths. &lt;code&gt;file:&lt;/code&gt; URLs without a host name nor a drive letter will result in a throw:</source>
          <target state="translated">Windowsでは、 &lt;code&gt;file:&lt;/code&gt; ホスト名のURLはUNCパスに変換され、 &lt;code&gt;file:&lt;/code&gt; ドライブ文字のURLはローカル絶対パスに変換されます。 &lt;code&gt;file:&lt;/code&gt; ホスト名もドライブ文字もないURLは、次のようにスローされます。</target>
        </trans-unit>
        <trans-unit id="91506a2d47b419ea0ee01cc61a92dad8cc27411b" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs with a hostname convert to UNC paths, while &lt;code&gt;file:&lt;/code&gt; URLs with drive letters convert to local absolute paths. &lt;code&gt;file:&lt;/code&gt; URLs without a hostname nor a drive letter will result in a throw:</source>
          <target state="translated">Windowsでは、 &lt;code&gt;file:&lt;/code&gt; ホスト名を含むURLはUNCパスに変換され、 &lt;code&gt;file:&lt;/code&gt; ドライブ文字を含むURLはローカルの絶対パスに変換されます。 &lt;code&gt;file:&lt;/code&gt; ホスト名もドライブ文字もないURLはスローになります：</target>
        </trans-unit>
        <trans-unit id="a8a07e8954ce58294b7c7861b0efb21b71fd0b43" translate="yes" xml:space="preserve">
          <source>On Windows, Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example &lt;code&gt;fs.readdirSync('C:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;fs.readdirSync('C:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、Node.jsはドライブごとの作業ディレクトリの概念に従います。この動作は、円記号のないドライブパスを使用している場合に発生します。たとえば、 &lt;code&gt;fs.readdirSync('C:\\')&lt;/code&gt; は、 &lt;code&gt;fs.readdirSync('C:')&lt;/code&gt; とは異なる結果を返す可能性があります。詳細については、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;このMSDNページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="eb13f48dbe09dfcc8c8afd1a18188c31d89c540d" translate="yes" xml:space="preserve">
          <source>On Windows, Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example &lt;code&gt;fs.readdirSync('c:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;fs.readdirSync('c:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="translated">Windowsでは、Node.jsはドライブごとの作業ディレクトリの概念に従います。この動作は、バックスラッシュのないドライブパスを使用しているときに観察できます。たとえば、 &lt;code&gt;fs.readdirSync('c:\\')&lt;/code&gt; は、 &lt;code&gt;fs.readdirSync('c:')&lt;/code&gt; とは異なる結果を返す可能性があります。詳細については、&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;このMSDNページを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ebe6267af9150e34384ccfb932409adc54221278" translate="yes" xml:space="preserve">
          <source>On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. The &lt;code&gt;fs.access()&lt;/code&gt; function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.</source>
          <target state="translated">Windowsでは、ディレクトリのアクセス制御ポリシー（ACL）により、ファイルまたはディレクトリへのアクセスが制限される場合があります。 &lt;code&gt;fs.access()&lt;/code&gt; 関数は、しかし、ACLをチェックしないので、パスがACLを読み取りまたはそれへの書き込みからユーザーを制限した場合でもアクセス可能であることを報告することがあります。</target>
        </trans-unit>
        <trans-unit id="aff139e0769d280257d0d48cf82151703507a29c" translate="yes" xml:space="preserve">
          <source>On Windows, both the forward slash (&lt;code&gt;/&lt;/code&gt;) and backward slash (&lt;code&gt;\&lt;/code&gt;) are accepted as path segment separators; however, the &lt;code&gt;path&lt;/code&gt; methods only add backward slashes (&lt;code&gt;\&lt;/code&gt;).</source>
          <target state="translated">Windowsでは、スラッシュ（ &lt;code&gt;/&lt;/code&gt; ）とバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）の両方がパスセグメントセパレーターとして受け入れられます。ただし、 &lt;code&gt;path&lt;/code&gt; メソッドはバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）のみを追加します。</target>
        </trans-unit>
        <trans-unit id="1e4b11f76bee6dae9b72dd20bcc56d6c47b35cfc" translate="yes" xml:space="preserve">
          <source>On Windows, environment variables are case-insensitive. Node.js lexicographically sorts the &lt;code&gt;env&lt;/code&gt; keys and uses the first one that case-insensitively matches. Only first (in lexicographic order) entry will be passed to the subprocess. This might lead to issues on Windows when passing objects to the &lt;code&gt;env&lt;/code&gt; option that have multiple variants of the same key, such as &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;Path&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、環境変数は大文字と小文字を区別しません。Node.jsは、辞書式に &lt;code&gt;env&lt;/code&gt; キーを並べ替え、大文字と小文字を区別せずに一致する最初のキーを使用します。最初の（辞書式順序で）エントリのみがサブプロセスに渡されます。これにより、 &lt;code&gt;PATH&lt;/code&gt; や &lt;code&gt;Path&lt;/code&gt; など、同じキーの複数のバリアントを持つオブジェクトを &lt;code&gt;env&lt;/code&gt; オプションに渡すときに、Windowsで問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e5e941fdda19df2837a224780f4308d95357b323" translate="yes" xml:space="preserve">
          <source>On Windows, if the file descriptor is connected to the console (e.g. &lt;code&gt;fd == 1&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt;) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the &lt;code&gt;chcp 65001&lt;/code&gt; command. See the &lt;a href=&quot;https://ss64.com/nt/chcp.html&quot;&gt;chcp&lt;/a&gt; docs for more details.</source>
          <target state="translated">Windowsでは、ファイル記述子がコンソールに接続されている場合（例： &lt;code&gt;fd == 1&lt;/code&gt; または &lt;code&gt;stdout&lt;/code&gt; ）、使用されているエンコーディングに関係なく、非ASCII文字を含む文字列はデフォルトで適切にレンダリングされません。 &lt;code&gt;chcp 65001&lt;/code&gt; コマンドでアクティブなコードページを変更することにより、UTF-8を適切にレンダリングするようにコンソールを構成することができます。詳細については、&lt;a href=&quot;https://ss64.com/nt/chcp.html&quot;&gt;chcpの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ac67ee10708396162b94cc66d589c1b59dc10f64" translate="yes" xml:space="preserve">
          <source>On Windows, it is not yet possible to set up a named pipe server in a worker.</source>
          <target state="translated">Windows では、ワーカーに名前付きパイプサーバーを設定することはまだできません。</target>
        </trans-unit>
        <trans-unit id="eec5600fe598ba09a7321eb984ae609eb585b3eb" translate="yes" xml:space="preserve">
          <source>On Windows, it uses the &lt;code&gt;USERPROFILE&lt;/code&gt; environment variable if defined. Otherwise it uses the path to the profile directory of the current user.</source>
          <target state="translated">Windowsでは、定義されている場合は &lt;code&gt;USERPROFILE&lt;/code&gt; 環境変数を使用します。それ以外の場合は、現在のユーザーのプロファイルディレクトリへのパスを使用します。</target>
        </trans-unit>
        <trans-unit id="4f584f58bf19995481842b619fd8a13edfd866dd" translate="yes" xml:space="preserve">
          <source>On Windows, no events will be emitted if the watched directory is moved or renamed. An &lt;code&gt;EPERM&lt;/code&gt; error is reported when the watched directory is deleted.</source>
          <target state="translated">Windowsでは、監視対象のディレクトリが移動または名前変更されても、イベントは発行されません。 &lt;code&gt;EPERM&lt;/code&gt; を見たディレクトリが削除されたときにエラーが報告されています。</target>
        </trans-unit>
        <trans-unit id="6a20253c7c4edfcb2e4f480c38f30c92cd1f24b4" translate="yes" xml:space="preserve">
          <source>On Windows, opening an existing hidden file using the &lt;code&gt;'w'&lt;/code&gt; flag (either through &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt;) will fail with &lt;code&gt;EPERM&lt;/code&gt;. Existing hidden files can be opened for writing with the &lt;code&gt;'r+'&lt;/code&gt; flag.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;'w'&lt;/code&gt; &lt;code&gt;fs.open()&lt;/code&gt; 」フラグを使用して（fs.open（）または &lt;code&gt;fs.writeFile()&lt;/code&gt; または &lt;code&gt;fsPromises.open()&lt;/code&gt; を介して）既存の隠しファイルを開くと、 &lt;code&gt;EPERM&lt;/code&gt; で失敗します。 &lt;code&gt;'r+'&lt;/code&gt; フラグを使用して、既存の隠しファイルを書き込み用に開くことができます。</target>
        </trans-unit>
        <trans-unit id="01c3c7ea68df8c4d84bf0458c22f4d8178e9c209" translate="yes" xml:space="preserve">
          <source>On Windows, setting &lt;code&gt;options.detached&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; makes it possible for the child process to continue running after the parent exits. The child will have its own console window. Once enabled for a child process, it cannot be disabled.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;options.detached&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、親が終了した後でも子プロセスを実行し続けることができます。子には独自のコンソールウィンドウがあります。子プロセスに対して有効にすると、無効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="8dc310772d1feb0f0873c31779150a0f045c973f" translate="yes" xml:space="preserve">
          <source>On Windows, setting priority to &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; requires elevated user privileges. Otherwise the set priority will be silently reduced to &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、優先度を &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; に設定するには、昇格されたユーザー特権が必要です。それ以外の場合、設定された優先度はサイレントに &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; に削減されます。</target>
        </trans-unit>
        <trans-unit id="cec484a036adf383f0cf83afa7944fb446a84f8f" translate="yes" xml:space="preserve">
          <source>On Windows, the leading slashes for UNC paths are now included in the return value.</source>
          <target state="translated">Windows では、UNC パスの先頭のスラッシュが戻り値に含まれるようになりました。</target>
        </trans-unit>
        <trans-unit id="5ef45d44679240b74995b77a40348470a3214c30" translate="yes" xml:space="preserve">
          <source>On Windows, the local domain is implemented using a named pipe. The path &lt;em&gt;must&lt;/em&gt; refer to an entry in &lt;code&gt;\\?\pipe\&lt;/code&gt; or &lt;code&gt;\\.\pipe\&lt;/code&gt;. Any characters are permitted, but the latter may do some processing of pipe names, such as resolving &lt;code&gt;..&lt;/code&gt; sequences. Despite how it might look, the pipe namespace is flat. Pipes will &lt;em&gt;not persist&lt;/em&gt;. They are removed when the last reference to them is closed. Unlike Unix domain sockets, Windows will close and remove the pipe when the owning process exits.</source>
          <target state="translated">Windowsでは、ローカルドメインは名前付きパイプを使用して実装されます。パスは &lt;code&gt;\\?\pipe\&lt;/code&gt; または &lt;code&gt;\\.\pipe\&lt;/code&gt; エントリを参照する&lt;em&gt;必要があり&lt;/em&gt;ます。任意の文字を使用できますが、後者は &lt;code&gt;..&lt;/code&gt; シーケンスの解決など、パイプ名の処理を行う場合があります。どのように見えるかにかかわらず、パイプの名前空間はフラットです。パイプは&lt;em&gt;存続しません&lt;/em&gt;。それらへの最後の参照が閉じられると、それらは削除されます。Unixドメインソケットとは異なり、Windowsは所有プロセスが終了するとパイプを閉じて削除します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4d884e9df62086a09c3c39332a23060c917a2fd" translate="yes" xml:space="preserve">
          <source>On Windows, this is a &lt;code&gt;';'&lt;/code&gt;-separated list instead.</source>
          <target state="translated">Windowsでは、これは &lt;code&gt;';'&lt;/code&gt; -代わりにリストを区切ります。</target>
        </trans-unit>
        <trans-unit id="126249b93389124fc90335a9d8ca99dd0a8df116" translate="yes" xml:space="preserve">
          <source>On Windows, using &lt;code&gt;cmd.exe&lt;/code&gt; a single quote will not work correctly because it only recognizes double &lt;code&gt;&quot;&lt;/code&gt; for quoting. In Powershell or Git bash, both &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt; are usable.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;cmd.exe&lt;/code&gt; を使用すると、二重引用符 &lt;code&gt;&quot;&lt;/code&gt; のみが認識されるため、単一引用符は正しく機能しません。PowershellまたはGit bashでは、 &lt;code&gt;'&lt;/code&gt; と &lt;code&gt;&quot;&lt;/code&gt; 両方を使用できます。</target>
        </trans-unit>
        <trans-unit id="d1aa8a0561e5d494303a1665e8c1c1ffaec18bdf" translate="yes" xml:space="preserve">
          <source>On Windows, using &lt;code&gt;fs.mkdir()&lt;/code&gt; on the root directory even with recursion will result in an error:</source>
          <target state="translated">Windowsでは、再帰があってもルートディレクトリで &lt;code&gt;fs.mkdir()&lt;/code&gt; を使用するとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="95a625c5b6c3cb8c2b26fa2d6baf9cb114baf0b1" translate="yes" xml:space="preserve">
          <source>On Windows, where scope format uses an interface number:</source>
          <target state="translated">スコープフォーマットがインターフェース番号を使用するWindowsの場合。</target>
        </trans-unit>
        <trans-unit id="55b56364276b5f7e47e7f031287b139fc5b947d5" translate="yes" xml:space="preserve">
          <source>On Windows:</source>
          <target state="translated">Windowsで。</target>
        </trans-unit>
        <trans-unit id="b657671d262ccf19050a75fb6bc55e7a42041cd0" translate="yes" xml:space="preserve">
          <source>On a machine with 2GB of memory, consider setting this to 1536 (1.5GB) to leave some memory for other uses and avoid swapping.</source>
          <target state="translated">メモリが2GBのマシンでは、これを1536(1.5GB)に設定して、他の用途のためにメモリを残し、スワップを避けることを検討してください。</target>
        </trans-unit>
        <trans-unit id="2b487baf058a8e6d5b2a94e0bf8ab5ae4ec8d476" translate="yes" xml:space="preserve">
          <source>On all other platforms, &lt;code&gt;file:&lt;/code&gt; URLs with a host name are unsupported and will result in a throw:</source>
          <target state="translated">他のすべてのプラットフォームでは、 &lt;code&gt;file:&lt;/code&gt; ホスト名のURLはサポートされておらず、次のようにスローされます。</target>
        </trans-unit>
        <trans-unit id="8a5f22e0dff9bf222d72376b8ec44283751a3201" translate="yes" xml:space="preserve">
          <source>On all other platforms, &lt;code&gt;file:&lt;/code&gt; URLs with a hostname are unsupported and will result in a throw:</source>
          <target state="translated">他のすべてのプラットフォームでは、 &lt;code&gt;file:&lt;/code&gt; ホスト名を含むURLはサポートされておらず、スローされます。</target>
        </trans-unit>
        <trans-unit id="358e1630770bd86b6eaadca9e6e64f99e4bb79cd" translate="yes" xml:space="preserve">
          <source>On an error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;err&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトです &lt;code&gt;err.code&lt;/code&gt; はエラーコードです。</target>
        </trans-unit>
        <trans-unit id="002bfab7979fd23e069b0486d57556dd50036776" translate="yes" xml:space="preserve">
          <source>On completion, &lt;code&gt;callback&lt;/code&gt; will be called with &lt;code&gt;err&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;publicKey&lt;/code&gt; / &lt;code&gt;privateKey&lt;/code&gt; representing the generated key pair.</source>
          <target state="translated">完了すると、 &lt;code&gt;callback&lt;/code&gt; が呼び出され、 &lt;code&gt;err&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; に設定され、 &lt;code&gt;publicKey&lt;/code&gt; / &lt;code&gt;privateKey&lt;/code&gt; が生成された鍵ペアを表します。</target>
        </trans-unit>
        <trans-unit id="7886649da2b50ecb04b5356e20760a1e5cb6366c" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is one of the &lt;a href=&quot;#dns_error_codes&quot;&gt;DNS error codes&lt;/a&gt;.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;err&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトです &lt;code&gt;err.code&lt;/code&gt; は&lt;a href=&quot;#dns_error_codes&quot;&gt;DNSエラーコードの&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="d1749539bce676fcc0aa4550969b6944cf6b4d32" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;err&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトであり、 &lt;code&gt;err.code&lt;/code&gt; はエラーコードです。 &lt;code&gt;err.code&lt;/code&gt; は、ホスト名が存在しない場合だけでなく、使用可能なファイル記述子がないなどの他の方法でルックアップが失敗した場合にも &lt;code&gt;'ENOTFOUND'&lt;/code&gt; 設定されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="944278cb905faca8676573641ea322dcf7de9025" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;err&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトです &lt;code&gt;err.code&lt;/code&gt; はエラーコードです。ホスト名が存在しない場合だけでなく、使用可能なファイル記述子がないなど、他の方法で検索が失敗した場合も、 &lt;code&gt;err.code&lt;/code&gt; は &lt;code&gt;'ENOTFOUND'&lt;/code&gt; 設定されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="28da3a89db66c1e49e35684df5651bd41326f739" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is one of the &lt;a href=&quot;#dns_error_codes&quot;&gt;DNS error codes&lt;/a&gt;.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;Promise&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトで拒否されます &lt;code&gt;err.code&lt;/code&gt; は&lt;a href=&quot;#dns_error_codes&quot;&gt;DNSエラーコードの&lt;/a&gt; 1つです。</target>
        </trans-unit>
        <trans-unit id="da16732d5d9a380f16a376ff4e654c12594bd786" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;Promise&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトで拒否されます &lt;code&gt;err.code&lt;/code&gt; はエラーコードです。</target>
        </trans-unit>
        <trans-unit id="b9fd4bc944366c53ef229e3870fe19b02e44ce24" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the host name does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;Promise&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトで拒否されます。ここで、 &lt;code&gt;err.code&lt;/code&gt; はエラーコードです。 &lt;code&gt;err.code&lt;/code&gt; は、ホスト名が存在しない場合だけでなく、使用可能なファイル記述子がないなどの他の方法でルックアップが失敗した場合にも &lt;code&gt;'ENOTFOUND'&lt;/code&gt; 設定されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="efe534a2832704d62aaa34473a2409791c2952e2" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="translated">エラーの場合、 &lt;code&gt;Promise&lt;/code&gt; は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトで拒否されます &lt;code&gt;err.code&lt;/code&gt; はエラーコードです。ホスト名が存在しない場合だけでなく、使用可能なファイル記述子がないなど、他の方法で検索が失敗した場合も、 &lt;code&gt;err.code&lt;/code&gt; は &lt;code&gt;'ENOTFOUND'&lt;/code&gt; 設定されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9d274e72d3eaf33ae1f5b101442303f281721deb" translate="yes" xml:space="preserve">
          <source>On macOS, this uses &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt; for files and &lt;a href=&quot;https://developer.apple.com/documentation/coreservices/file_system_events&quot;&gt;&lt;code&gt;FSEvents&lt;/code&gt;&lt;/a&gt; for directories.</source>
          <target state="translated">macOSでは、これはファイルには&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt; &lt;code&gt;kqueue(2)&lt;/code&gt; &lt;/a&gt;を使用し、ディレクトリには&lt;a href=&quot;https://developer.apple.com/documentation/coreservices/file_system_events&quot;&gt; &lt;code&gt;FSEvents&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="39eb6da0166d08d18888bf5d340f82d447a083bd" translate="yes" xml:space="preserve">
          <source>On most platforms, &lt;code&gt;'rename'&lt;/code&gt; is emitted whenever a filename appears or disappears in the directory.</source>
          <target state="translated">ほとんどのプラットフォームでは、ファイル名がディレクトリに表示または非表示になるたびに &lt;code&gt;'rename'&lt;/code&gt; が発行されます。</target>
        </trans-unit>
        <trans-unit id="c4558f0d2f934a695ab52b8b29e7288d194b5266" translate="yes" xml:space="preserve">
          <source>On most systems, where scope format uses the interface name:</source>
          <target state="translated">ほとんどのシステムでは、スコープのフォーマットがインターフェイス名を使用します。</target>
        </trans-unit>
        <trans-unit id="7b8df057d113972b6e227366e919aa409563a34a" translate="yes" xml:space="preserve">
          <source>On non-Windows platforms, if &lt;code&gt;options.detached&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the child process will be made the leader of a new process group and session. Child processes may continue running after the parent exits regardless of whether they are detached or not. See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setsid.2.html&quot;&gt;&lt;code&gt;setsid(2)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">Windows以外のプラットフォームでは、 &lt;code&gt;options.detached&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合、子プロセスは新しいプロセスグループとセッションのリーダーになります。分離されているかどうかに関係なく、親が終了した後も子プロセスは実行を継続できます。詳細については、&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setsid.2.html&quot;&gt; &lt;code&gt;setsid(2)&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e29d2951574111945c46bba862ffa9ea86d53afb" translate="yes" xml:space="preserve">
          <source>On server &lt;code&gt;QuicSession&lt;/code&gt; instances, set to &lt;code&gt;true&lt;/code&gt; on completion of the TLS handshake if early data is enabled. On client &lt;code&gt;QuicSession&lt;/code&gt; instances, set to true on handshake completion if early data is enabled &lt;em&gt;and&lt;/em&gt; was accepted by the server.</source>
          <target state="translated">サーバー &lt;code&gt;QuicSession&lt;/code&gt; インスタンスで、初期データが有効になっている場合は、TLSハンドシェイクの完了時に &lt;code&gt;true&lt;/code&gt; に設定します。クライアント上 &lt;code&gt;QuicSession&lt;/code&gt; の初期のデータが有効になっている場合のインスタンス、ハンドシェイクが完了した場合はtrueに設定&lt;em&gt;し、&lt;/em&gt;サーバーに受け入れられました。</target>
        </trans-unit>
        <trans-unit id="1643cfbf0d28d755f6e901a412963cf366b998f6" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;callback&lt;/code&gt; will now be called with an &lt;code&gt;error&lt;/code&gt; argument of &lt;code&gt;null&lt;/code&gt; rather than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">成功すると、 &lt;code&gt;callback&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; ではなく &lt;code&gt;null&lt;/code&gt; の &lt;code&gt;error&lt;/code&gt; 引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b992a9b66ecf9c509977f4e79d71ce4d083dbf97" translate="yes" xml:space="preserve">
          <source>On the client side, instances of &lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt;&lt;code&gt;ClientHttp2Stream&lt;/code&gt;&lt;/a&gt; are created when the &lt;code&gt;http2session.request()&lt;/code&gt; method is called.</source>
          <target state="translated">クライアント側では、インスタンスの&lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt; &lt;code&gt;ClientHttp2Stream&lt;/code&gt; を&lt;/a&gt;したときに作成され &lt;code&gt;http2session.request()&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ac9f26bc28901e0da3bba962837c8a762d501500" translate="yes" xml:space="preserve">
          <source>On the client, the &lt;code&gt;Http2Stream&lt;/code&gt; instance returned by &lt;code&gt;http2session.request()&lt;/code&gt; may not be immediately ready for use if the parent &lt;code&gt;Http2Session&lt;/code&gt; has not yet been fully established. In such cases, operations called on the &lt;code&gt;Http2Stream&lt;/code&gt; will be buffered until the &lt;code&gt;'ready'&lt;/code&gt; event is emitted. User code should rarely, if ever, need to handle the &lt;code&gt;'ready'&lt;/code&gt; event directly. The ready status of an &lt;code&gt;Http2Stream&lt;/code&gt; can be determined by checking the value of &lt;code&gt;http2stream.id&lt;/code&gt;. If the value is &lt;code&gt;undefined&lt;/code&gt;, the stream is not yet ready for use.</source>
          <target state="translated">クライアントでは、親の &lt;code&gt;Http2Session&lt;/code&gt; がまだ完全に確立されていない場合、 &lt;code&gt;http2session.request()&lt;/code&gt; によって返された &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスをすぐに使用できるとは限りません。このような場合、 &lt;code&gt;Http2Stream&lt;/code&gt; で呼び出された操作は、 &lt;code&gt;'ready'&lt;/code&gt; イベントが発行されるまでバッファリングされます。ユーザーコードが &lt;code&gt;'ready'&lt;/code&gt; イベントを直接処理する必要が生じることはほとんどありません。レディ状態 &lt;code&gt;Http2Stream&lt;/code&gt; は、の値をチェックすることによって決定することができる &lt;code&gt;http2stream.id&lt;/code&gt; を。値が &lt;code&gt;undefined&lt;/code&gt; の場合、ストリームはまだ使用できる状態ではありません。</target>
        </trans-unit>
        <trans-unit id="f16439cf41d36a278e3eaf44e9d440d888072b10" translate="yes" xml:space="preserve">
          <source>On the client, the &lt;code&gt;session&lt;/code&gt; can be provided to the &lt;code&gt;session&lt;/code&gt; option of &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt; to resume the connection.</source>
          <target state="translated">クライアントでは、 &lt;code&gt;session&lt;/code&gt; を&lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;session&lt;/code&gt; オプションに提供して、接続を再開できます。</target>
        </trans-unit>
        <trans-unit id="df17243448ce58a6e9d8efe145f7f94cbbd06305" translate="yes" xml:space="preserve">
          <source>On the first line, &lt;code&gt;foo.js&lt;/code&gt; loads the module &lt;code&gt;circle.js&lt;/code&gt; that is in the same directory as &lt;code&gt;foo.js&lt;/code&gt;.</source>
          <target state="translated">最初の行に、 &lt;code&gt;foo.js&lt;/code&gt; は負荷にモジュール &lt;code&gt;circle.js&lt;/code&gt; を同じディレクトリにある &lt;code&gt;foo.js&lt;/code&gt; はに。</target>
        </trans-unit>
        <trans-unit id="3b07e2e6f8a12bd63b2638139eb922d67ad2dfaf" translate="yes" xml:space="preserve">
          <source>On the main thread, values are removed from the queue associated with the thread-safe function in an idle loop. This error indicates that an error has occurred when attempting to start the loop.</source>
          <target state="translated">メインスレッドでは、アイドルループ内のスレッドセーフ関数に関連付けられたキューから値が削除されます。このエラーは、ループを開始しようとしたときにエラーが発生したことを示します。</target>
        </trans-unit>
        <trans-unit id="1a21df9b2f395bf348632f07253f5adab79a3235" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;code&gt;node-inspect&lt;/code&gt; can be installed locally through a package manager, as it is published on the npm registry under the same name. No source code modification is necessary if that is done.</source>
          <target state="translated">一方、 &lt;code&gt;node-inspect&lt;/code&gt; は、同じ名前でnpmレジストリに公開されているため、パッケージマネージャーを介してローカルにインストールできます。その場合、ソースコードを変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="bfb69afb09660b281005b2feb90d4b1d5ba3d6e1" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;code&gt;node-inspect&lt;/code&gt; may be installed locally through a package manager, as it is published on the npm registry under the same name. No source code modification is necessary if that is done.</source>
          <target state="translated">一方、 &lt;code&gt;node-inspect&lt;/code&gt; はnpmレジストリで同じ名前で公開されているため、パッケージマネージャーを介してローカルにインストールできます。それが行われた場合、ソースコードの変更は必要ありません。</target>
        </trans-unit>
        <trans-unit id="45d01237536f26cbcba80929de5b721832402940" translate="yes" xml:space="preserve">
          <source>On the server side, instances of &lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt;&lt;code&gt;ServerHttp2Stream&lt;/code&gt;&lt;/a&gt; are created either when:</source>
          <target state="translated">サーバー側では、次の場合に&lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt; &lt;code&gt;ServerHttp2Stream&lt;/code&gt; の&lt;/a&gt;インスタンスが作成されます。</target>
        </trans-unit>
        <trans-unit id="93fbaba0c5ebedfd2d6fa15d405cceb8572a7ff1" translate="yes" xml:space="preserve">
          <source>On the server side, user code will typically not listen for this event directly, and would instead register a handler for the &lt;code&gt;'stream'&lt;/code&gt; event emitted by the &lt;code&gt;net.Server&lt;/code&gt; or &lt;code&gt;tls.Server&lt;/code&gt; instances returned by &lt;code&gt;http2.createServer()&lt;/code&gt; and &lt;code&gt;http2.createSecureServer()&lt;/code&gt;, respectively, as in the example below:</source>
          <target state="translated">サーバー側では、ユーザコードは通常、直接、このイベントのために耳を傾けず、代わりのハンドラを登録します &lt;code&gt;'stream'&lt;/code&gt; から放出されたイベント &lt;code&gt;net.Server&lt;/code&gt; または &lt;code&gt;tls.Server&lt;/code&gt; によって返されるインスタンス &lt;code&gt;http2.createServer()&lt;/code&gt; と &lt;code&gt;http2.createSecureServer()&lt;/code&gt; それぞれ、以下の例のように：</target>
        </trans-unit>
        <trans-unit id="db98c36f8419db12b0191adee61e97e682faea7d" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;destroy()&lt;/code&gt; has been called any further calls will be a no-op and no further errors except from &lt;code&gt;_destroy()&lt;/code&gt; may be emitted as &lt;code&gt;'error'&lt;/code&gt;.</source>
          <target state="translated">一度 &lt;code&gt;destroy()&lt;/code&gt; 任意のさらなる呼び出しが無OPとから除いてさらにエラーないであろうと呼ばれている &lt;code&gt;_destroy()&lt;/code&gt; として放出される &lt;code&gt;'error'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4ea59c46dc0807588619ccf2c0d9fae3a8fddb2c" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;destroy()&lt;/code&gt; has been called, any further calls will be a no-op and no further errors except from &lt;code&gt;_destroy()&lt;/code&gt; may be emitted as &lt;code&gt;'error'&lt;/code&gt;.</source>
          <target state="translated">一度 &lt;code&gt;destroy()&lt;/code&gt; 任意のさらなる呼び出しが無OPとから除いてさらにエラーないであろう、と呼ばれている &lt;code&gt;_destroy()&lt;/code&gt; として放出される &lt;code&gt;'error'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b28a2e0cd081287892b62dd1e0f530cc16c1da53" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;process.connected&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it is no longer possible to send messages over the IPC channel using &lt;code&gt;process.send()&lt;/code&gt;.</source>
          <target state="translated">いったん &lt;code&gt;process.connected&lt;/code&gt; で &lt;code&gt;false&lt;/code&gt; 、使用してIPCチャネルを介してメッセージを送信することはできなくなりました &lt;code&gt;process.send()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed86458fc1973c9f74720793889edd1cf1b298fa" translate="yes" xml:space="preserve">
          <source>Once a &lt;code&gt;QuicSession&lt;/code&gt; transitions to the &lt;code&gt;Ready&lt;/code&gt; state, &lt;code&gt;QuicStream&lt;/code&gt; instances may be created and used to exchange application data. On a general level, all &lt;code&gt;QuicStream&lt;/code&gt; instances are simply Node.js Duplex Streams that allow bidirectional data flow between the QUIC client and server. However, the application protocol negotiated for the &lt;code&gt;QuicSession&lt;/code&gt; may alter the semantics and operation of a &lt;code&gt;QuicStream&lt;/code&gt; associated with the session. Specifically, some features of the &lt;code&gt;QuicStream&lt;/code&gt; (e.g. headers) are enabled only if the application protocol selected is known by Node.js to support those features.</source>
          <target state="translated">一旦 &lt;code&gt;QuicSession&lt;/code&gt; 用に遷移 &lt;code&gt;Ready&lt;/code&gt; 状態、 &lt;code&gt;QuicStream&lt;/code&gt; のインスタンスが作成されてもよく、交換アプリケーション・データに使用されます。一般的なレベルでは、すべての &lt;code&gt;QuicStream&lt;/code&gt; インスタンスは、QUICクライアントとサーバー間の双方向データフローを可能にする単なるNode.jsデュプレックスストリームです。ただし、 &lt;code&gt;QuicSession&lt;/code&gt; 用にネゴシエートされたアプリケーションプロトコルは、セッションに関連付けられた &lt;code&gt;QuicStream&lt;/code&gt; のセマンティクスと操作を変更する場合があります。具体的には、 &lt;code&gt;QuicStream&lt;/code&gt; の一部の機能（ヘッダーなど）は、選択されたアプリケーションプロトコルがNode.jsによってそれらの機能をサポートすることがわかっている場合にのみ有効になります。</target>
        </trans-unit>
        <trans-unit id="ffa23dc4c315219e395e0590efe1a2b70ca58a09" translate="yes" xml:space="preserve">
          <source>Once a &lt;code&gt;Socket&lt;/code&gt; has been bound to an &lt;code&gt;Http2Session&lt;/code&gt;, user code should rely solely on the API of the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">一度 &lt;code&gt;Socket&lt;/code&gt; にバインドされている &lt;code&gt;Http2Session&lt;/code&gt; 、ユーザーコードは、もっぱらのAPIに依存している必要があります &lt;code&gt;Http2Session&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d73920c9a9f1ea9d30889c8dfb8841df2a90c168" translate="yes" xml:space="preserve">
          <source>Once a socket has been passed to a child, the parent is no longer capable of tracking when the socket is destroyed. To indicate this, the &lt;code&gt;.connections&lt;/code&gt; property becomes &lt;code&gt;null&lt;/code&gt;. It is recommended not to use &lt;code&gt;.maxConnections&lt;/code&gt; when this occurs.</source>
          <target state="translated">ソケットが子に渡されると、親はソケットが破棄されたときに追跡できなくなります。これを示すために、 &lt;code&gt;.connections&lt;/code&gt; プロパティは &lt;code&gt;null&lt;/code&gt; になります。これが発生した場合は、 &lt;code&gt;.maxConnections&lt;/code&gt; を使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a692176ad95c5de300944c8834aa875a0d87f9b1" translate="yes" xml:space="preserve">
          <source>Once a socket is assigned to this request and is connected &lt;a href=&quot;net#net_socket_setkeepalive_enable_initialdelay&quot;&gt;&lt;code&gt;socket.setKeepAlive()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">ソケットがこのリクエストに割り当てられて接続されると、&lt;a href=&quot;net#net_socket_setkeepalive_enable_initialdelay&quot;&gt; &lt;code&gt;socket.setKeepAlive()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7f52f26999bdf868260d070323acc69b57258b58" translate="yes" xml:space="preserve">
          <source>Once a socket is assigned to this request and is connected &lt;a href=&quot;net#net_socket_setnodelay_nodelay&quot;&gt;&lt;code&gt;socket.setNoDelay()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">ソケットがこのリクエストに割り当てられ、接続されると、&lt;a href=&quot;net#net_socket_setnodelay_nodelay&quot;&gt; &lt;code&gt;socket.setNoDelay()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="33c79533c7386872c12f4b58db6859df57263cfa" translate="yes" xml:space="preserve">
          <source>Once a socket is assigned to this request and is connected &lt;a href=&quot;net#net_socket_settimeout_timeout_callback&quot;&gt;&lt;code&gt;socket.setTimeout()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">ソケットがこのリクエストに割り当てられ、接続されると、&lt;a href=&quot;net#net_socket_settimeout_timeout_callback&quot;&gt; &lt;code&gt;socket.setTimeout()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="efd079e73c7a96e390596e9440343bcb5e17ed66" translate="yes" xml:space="preserve">
          <source>Once again, to build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="translated">もう一度、この例をビルドするには、 &lt;code&gt;myobject.cc&lt;/code&gt; ファイルを &lt;code&gt;binding.gyp&lt;/code&gt; に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="a0f447123bcb9f711d107a546941eab8691f611f" translate="yes" xml:space="preserve">
          <source>Once an event has been emitted, all listeners attached to it at the time of emitting will be called in order. This implies that any &lt;code&gt;removeListener()&lt;/code&gt; or &lt;code&gt;removeAllListeners()&lt;/code&gt; calls &lt;em&gt;after&lt;/em&gt; emitting and &lt;em&gt;before&lt;/em&gt; the last listener finishes execution will not remove them from &lt;code&gt;emit()&lt;/code&gt; in progress. Subsequent events will behave as expected.</source>
          <target state="translated">イベントが発行されると、発行時にそれに接続されているすべてのリスナーが順番に呼び出されます。これは、 &lt;code&gt;removeListener()&lt;/code&gt; &lt;em&gt;後&lt;/em&gt;、最後のリスナーの実行が&lt;em&gt;完了&lt;/em&gt;する&lt;em&gt;前に&lt;/em&gt;removeListener（）または &lt;code&gt;removeAllListeners()&lt;/code&gt; を呼び出して&lt;em&gt;も&lt;/em&gt;、進行中の &lt;code&gt;emit()&lt;/code&gt; からそれらが削除されないことを意味します。後続のイベントは期待どおりに動作します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f94fa29a6ba027494d2efe834bdc10a1975cff01" translate="yes" xml:space="preserve">
          <source>Once an event is emitted, all listeners attached to it at the time of emitting are called in order. This implies that any &lt;code&gt;removeListener()&lt;/code&gt; or &lt;code&gt;removeAllListeners()&lt;/code&gt; calls &lt;em&gt;after&lt;/em&gt; emitting and &lt;em&gt;before&lt;/em&gt; the last listener finishes execution will not remove them from &lt;code&gt;emit()&lt;/code&gt; in progress. Subsequent events behave as expected.</source>
          <target state="translated">イベントが発行されると、発行時にそれに接続されているすべてのリスナーが順番に呼び出されます。これは、任意のことを意味 &lt;code&gt;removeListener()&lt;/code&gt; または &lt;code&gt;removeAllListeners()&lt;/code&gt; 呼び出し&lt;em&gt;の後に&lt;/em&gt;発光し、&lt;em&gt;前の&lt;/em&gt;最後のリスナー終了の実行からそれらを削除されません &lt;code&gt;emit()&lt;/code&gt; 進行中。後続のイベントは期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="e2b0e5947e0cec9da5491e6da952ace81743900d" translate="yes" xml:space="preserve">
          <source>Once built, the binary Addon can be used from within Node.js by pointing &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; to the built &lt;code&gt;addon.node&lt;/code&gt; module:</source>
          <target state="translated">ビルドされたバイナリAddonは、ビルドされた &lt;code&gt;addon.node&lt;/code&gt; モジュールに&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;をポイントすることにより、Node.js内から使用できます。</target>
        </trans-unit>
        <trans-unit id="c6a5e03fd76a0c9401995bf6c32afa91bc8f4c48" translate="yes" xml:space="preserve">
          <source>Once built, the binary addon can be used from within Node.js by pointing &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; to the built &lt;code&gt;addon.node&lt;/code&gt; module:</source>
          <target state="translated">ビルドが完了すると、&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;をビルドされた &lt;code&gt;addon.node&lt;/code&gt; モジュールにポイントすることで、Node.js内からバイナリアドオンを使用できます。</target>
        </trans-unit>
        <trans-unit id="15b98e33970016f35017b9cd3f8d13b67f71f0b2" translate="yes" xml:space="preserve">
          <source>Once called, the &lt;code&gt;http2session.pendingSettingsAck&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; while the session is waiting for the remote peer to acknowledge the new settings.</source>
          <target state="translated">呼び出されると、セッションがリモートピアが新しい設定を確認するのを待っている間、 &lt;code&gt;http2session.pendingSettingsAck&lt;/code&gt; プロパティは &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b7b49eb661c1323cc9c21687a30ad06fc5aca2c4" translate="yes" xml:space="preserve">
          <source>Once compiled, the example Addon can be required and used from within Node.js:</source>
          <target state="translated">コンパイルしたら、Node.js内から例のアドオンを必要とし、使用することができます。</target>
        </trans-unit>
        <trans-unit id="a257431910afb0a71f29f84ab098cccf906f7a42" translate="yes" xml:space="preserve">
          <source>Once compiled, the example addon can be required and used from within Node.js:</source>
          <target state="translated">コンパイルしたら、Node.js内から例のアドオンを必要とし、使用することができます。</target>
        </trans-unit>
        <trans-unit id="c860007d4d4eedf037226ad7546486c7073ead4f" translate="yes" xml:space="preserve">
          <source>Once created the async worker can be queued for execution using the &lt;a href=&quot;#n_api_napi_queue_async_work&quot;&gt;&lt;code&gt;napi_queue_async_work&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">作成された非同期ワーカーは、&lt;a href=&quot;#n_api_napi_queue_async_work&quot;&gt; &lt;code&gt;napi_queue_async_work&lt;/code&gt; &lt;/a&gt;関数を使用して実行キューに入れることができます。</target>
        </trans-unit>
        <trans-unit id="fde554252391956e05e5ec8e1b886df2dade9a50" translate="yes" xml:space="preserve">
          <source>Once destroyed, the &lt;code&gt;Http2Session&lt;/code&gt; will emit the &lt;code&gt;'close'&lt;/code&gt; event. If &lt;code&gt;error&lt;/code&gt; is not undefined, an &lt;code&gt;'error'&lt;/code&gt; event will be emitted immediately before the &lt;code&gt;'close'&lt;/code&gt; event.</source>
          <target state="translated">破棄されると、 &lt;code&gt;Http2Session&lt;/code&gt; は &lt;code&gt;'close'&lt;/code&gt; イベントを発行します。 &lt;code&gt;error&lt;/code&gt; が未定義でない場合、 &lt;code&gt;'error'&lt;/code&gt; イベントは &lt;code&gt;'close'&lt;/code&gt; イベントの直前に発行されます。</target>
        </trans-unit>
        <trans-unit id="6b2d38c26dd12cdd65c7b3c851e009727e58fdc0" translate="yes" xml:space="preserve">
          <source>Once enabled, Node.js will treat the following as ES modules when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="translated">有効にすると、Node.jsは、 &lt;code&gt;node&lt;/code&gt; に初期入力として渡されたとき、またはESモジュールコード内の &lt;code&gt;import&lt;/code&gt; ステートメントによって参照されたときに、以下をESモジュールとして扱います。</target>
        </trans-unit>
        <trans-unit id="73e0f4c1adc95b4748965a8b094cee1cd3d7802c" translate="yes" xml:space="preserve">
          <source>Once no more items are left in the queue, the idle loop must be suspended. This error indicates that the idle loop has failed to stop.</source>
          <target state="translated">キューにこれ以上のアイテムが残らないと、アイドルループは中断されなければなりません。このエラーは、アイドルループの停止に失敗したことを示します。</target>
        </trans-unit>
        <trans-unit id="56f48e595782eee9bf460b4ddf8f7f4ab9ce4be3" translate="yes" xml:space="preserve">
          <source>Once the &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; method has been called, it will not be called again until more data is pushed through the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;readable.push()&lt;/code&gt;&lt;/a&gt; method. Empty data such as empty buffers and strings will not cause &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; to be called.</source>
          <target state="translated">いったん&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出された多くのデータがを通して押されるまで、それが再び呼び出されることはありません&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;readable.push()&lt;/code&gt; &lt;/a&gt;メソッド。空のバッファや文字列などの空のデータでは、&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="7d3db187cb961af709196ceb21cc18d02ae92584" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;QuicSession&lt;/code&gt; is ready, a &lt;code&gt;QuicStream&lt;/code&gt; may be created by either the client or server, and may be unidirectional or bidirectional.</source>
          <target state="translated">いったん &lt;code&gt;QuicSession&lt;/code&gt; は準備ができて、 &lt;code&gt;QuicStream&lt;/code&gt; は、クライアントまたはサーバのいずれかで作成することができ、かつ単方向または双方向のかもしれません。</target>
        </trans-unit>
        <trans-unit id="82ae60722591a3b5fc366c0deb82c1caaa5403c3" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;binding.gyp&lt;/code&gt; file has been created, use &lt;code&gt;node-gyp configure&lt;/code&gt; to generate the appropriate project build files for the current platform. This will generate either a &lt;code&gt;Makefile&lt;/code&gt; (on Unix platforms) or a &lt;code&gt;vcxproj&lt;/code&gt; file (on Windows) in the &lt;code&gt;build/&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;binding.gyp&lt;/code&gt; ファイルが作成されたら、 &lt;code&gt;node-gyp configure&lt;/code&gt; を使用して、現在のプラットフォームに適したプロジェクトビルドファイルを生成します。これにより、 &lt;code&gt;Makefile&lt;/code&gt; （UNIXプラットフォームの場合）または &lt;code&gt;vcxproj&lt;/code&gt; ファイル（Windowsの場合）が &lt;code&gt;build/&lt;/code&gt; ディレクトリーに生成されます。</target>
        </trans-unit>
        <trans-unit id="546e3d8231cb1e62063ceda275311eaa096e3438" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;binding.gyp&lt;/code&gt; file is ready, the example Addons can be configured and built using &lt;code&gt;node-gyp&lt;/code&gt;:</source>
          <target state="translated">いったん &lt;code&gt;binding.gyp&lt;/code&gt; のファイルの準備ができている、例のアドオンが構成され、使用して構築することができます &lt;code&gt;node-gyp&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c72da0d7dea0742ac9e442107cf2b82db83e160c" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;binding.gyp&lt;/code&gt; file is ready, the example addons can be configured and built using &lt;code&gt;node-gyp&lt;/code&gt;:</source>
          <target state="translated">いったん &lt;code&gt;binding.gyp&lt;/code&gt; のファイルの準備ができ、例えば、アドオンが構成され、使用して構築することができます &lt;code&gt;node-gyp&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9da60f44e80b948826dc67bb1bcd8aec425f7132" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;cipher.final()&lt;/code&gt; method has been called, the &lt;code&gt;Cipher&lt;/code&gt; object can no longer be used to encrypt data. Attempts to call &lt;code&gt;cipher.final()&lt;/code&gt; more than once will result in an error being thrown.</source>
          <target state="translated">一旦 &lt;code&gt;cipher.final()&lt;/code&gt; メソッドが呼び出された、 &lt;code&gt;Cipher&lt;/code&gt; オブジェクトは、暗号化データにもはや使用することができます。 &lt;code&gt;cipher.final()&lt;/code&gt; を2回以上呼び出そうとすると、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="6673a87b1a83c087904fc3e05640c35e0ffaa21b" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;decipher.final()&lt;/code&gt; method has been called, the &lt;code&gt;Decipher&lt;/code&gt; object can no longer be used to decrypt data. Attempts to call &lt;code&gt;decipher.final()&lt;/code&gt; more than once will result in an error being thrown.</source>
          <target state="translated">一旦 &lt;code&gt;decipher.final()&lt;/code&gt; メソッドが呼び出された、 &lt;code&gt;Decipher&lt;/code&gt; 対象は、もはや復号化データに使用することができません。 &lt;code&gt;decipher.final()&lt;/code&gt; を複数回呼び出そうとすると、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="52f4dfed9ec5522e12f3e2b5320ac83fe3e4216c" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;readable._read()&lt;/code&gt; method has been called, it will not be called again until the &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;readable.push()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">いったん &lt;code&gt;readable._read()&lt;/code&gt; メソッドが呼び出されると、&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;readable.push()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されるまで、再度呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="1a22398bb64d578f5216c8a024b94cc6d8495243" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;readline.Interface&lt;/code&gt; instance is created, the most common case is to listen for the &lt;code&gt;'line'&lt;/code&gt; event:</source>
          <target state="translated">いったん &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスが作成され、最も一般的なケースはをリッスンするためにある &lt;code&gt;'line'&lt;/code&gt; イベント：</target>
        </trans-unit>
        <trans-unit id="c00e5c746b27e93abda9669983083d6308ff5915" translate="yes" xml:space="preserve">
          <source>Once the CSR file is generated, it can either be sent to a Certificate Authority for signing or used to generate a self-signed certificate.</source>
          <target state="translated">CSRファイルが生成されると、それを証明書局に送って署名するか、自己署名証明書を生成するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="c814183de4ee5ac446ac54e8c1b050300c264185" translate="yes" xml:space="preserve">
          <source>Once the certificate is generated, it can be used to generate a &lt;code&gt;.pfx&lt;/code&gt; or &lt;code&gt;.p12&lt;/code&gt; file:</source>
          <target state="translated">証明書が生成されると、それを使用して &lt;code&gt;.pfx&lt;/code&gt; または &lt;code&gt;.p12&lt;/code&gt; ファイルを生成できます。</target>
        </trans-unit>
        <trans-unit id="96a60a169bcc053e92f04ade6da11c5c2f124427" translate="yes" xml:space="preserve">
          <source>Once the client receives the &lt;code&gt;SETTINGS&lt;/code&gt; frame from the server indicating that the extended CONNECT may be used, it may send &lt;code&gt;CONNECT&lt;/code&gt; requests that use the &lt;code&gt;':protocol'&lt;/code&gt; HTTP/2 pseudo-header:</source>
          <target state="translated">クライアントが拡張CONNECTを使用できることを示す &lt;code&gt;SETTINGS&lt;/code&gt; フレームをサーバーから受信すると、 &lt;code&gt;':protocol'&lt;/code&gt; HTTP / 2疑似ヘッダーを使用する &lt;code&gt;CONNECT&lt;/code&gt; リクエストを送信できます。</target>
        </trans-unit>
        <trans-unit id="23163b4a5b1c314b71549df1d1817513f8d243c4" translate="yes" xml:space="preserve">
          <source>Once the debugger is run, a breakpoint will occur at line 3:</source>
          <target state="translated">デバッガが実行されると、3 行目でブレークポイントが発生します。</target>
        </trans-unit>
        <trans-unit id="06333cf16cd00d4e14a36bbf306106e9fe7a8631" translate="yes" xml:space="preserve">
          <source>Once the number of threads making use of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; reaches zero, no further threads can start making use of it by calling &lt;code&gt;napi_acquire_threadsafe_function()&lt;/code&gt;. In fact, all subsequent API calls associated with it, except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;, will return an error value of &lt;code&gt;napi_closing&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; を使用するスレッドの数がゼロに達すると、それ以上のスレッドは &lt;code&gt;napi_acquire_threadsafe_function()&lt;/code&gt; を呼び出してそれを使用できなくなります。実際、 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; を除いて、それに関連付けられている後続のすべてのAPI呼び出しは、 &lt;code&gt;napi_closing&lt;/code&gt; のエラー値を返します。</target>
        </trans-unit>
        <trans-unit id="697685409a68c8f36ef5cf0d11b15316e24adea9" translate="yes" xml:space="preserve">
          <source>Once the server is now shared between the parent and child, some connections can be handled by the parent and some by the child.</source>
          <target state="translated">サーバが親と子で共有されるようになると、いくつかの接続は親が処理し、いくつかは子が処理することができるようになります。</target>
        </trans-unit>
        <trans-unit id="54c3869b5e878ba059e38cec56d8324aec191fbe" translate="yes" xml:space="preserve">
          <source>Once the socket is created, calling &lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt;&lt;code&gt;socket.bind()&lt;/code&gt;&lt;/a&gt; will instruct the socket to begin listening for datagram messages. When &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are not passed to &lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt;&lt;code&gt;socket.bind()&lt;/code&gt;&lt;/a&gt; the method will bind the socket to the &quot;all interfaces&quot; address on a random port (it does the right thing for both &lt;code&gt;udp4&lt;/code&gt; and &lt;code&gt;udp6&lt;/code&gt; sockets). The bound address and port can be retrieved using &lt;a href=&quot;#dgram_socket_address&quot;&gt;&lt;code&gt;socket.address().address&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#dgram_socket_address&quot;&gt;&lt;code&gt;socket.address().port&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ソケットが作成されたら、&lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt; &lt;code&gt;socket.bind()&lt;/code&gt; &lt;/a&gt;を呼び出すと、ソケットにデータグラムメッセージのリスニングを開始するように指示します。 &lt;code&gt;address&lt;/code&gt; と &lt;code&gt;port&lt;/code&gt; が&lt;a href=&quot;#dgram_socket_bind_port_address_callback&quot;&gt; &lt;code&gt;socket.bind()&lt;/code&gt; に&lt;/a&gt;渡されない場合、メソッドはソケットをランダムポートの「すべてのインターフェース」アドレスにバインドします（ &lt;code&gt;udp4&lt;/code&gt; ソケットと &lt;code&gt;udp6&lt;/code&gt; ソケットの両方で正しく機能します）。バインドされたアドレスとポートは、&lt;a href=&quot;#dgram_socket_address&quot;&gt; &lt;code&gt;socket.address().address&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#dgram_socket_address&quot;&gt; &lt;code&gt;socket.address().port&lt;/code&gt; &lt;/a&gt;を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="d9dd7de7e1c91ec7335bd144924ed7a2032f6d8f" translate="yes" xml:space="preserve">
          <source>Once the source code has been written, it must be compiled into the binary &lt;code&gt;addon.node&lt;/code&gt; file. To do so, create a file called &lt;code&gt;binding.gyp&lt;/code&gt; in the top-level of the project describing the build configuration of the module using a JSON-like format. This file is used by &lt;a href=&quot;https://github.com/nodejs/node-gyp&quot;&gt;node-gyp&lt;/a&gt; &amp;mdash; a tool written specifically to compile Node.js Addons.</source>
          <target state="translated">ソースコードを作成したら、それをバイナリの &lt;code&gt;addon.node&lt;/code&gt; ファイルにコンパイルする必要があります。これを行うには、JSONのような形式を使用して、モジュールのビルド構成を記述したプロジェクトの最上位に &lt;code&gt;binding.gyp&lt;/code&gt; というファイルを作成します。このファイルは、Node.jsアドオンをコンパイルするために特別に記述されたツールである&lt;a href=&quot;https://github.com/nodejs/node-gyp&quot;&gt;node-gyp&lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="4c1ec49d0c8b41620816e4acc922a0bb808c5323" translate="yes" xml:space="preserve">
          <source>Once the source code has been written, it must be compiled into the binary &lt;code&gt;addon.node&lt;/code&gt; file. To do so, create a file called &lt;code&gt;binding.gyp&lt;/code&gt; in the top-level of the project describing the build configuration of the module using a JSON-like format. This file is used by &lt;a href=&quot;https://github.com/nodejs/node-gyp&quot;&gt;node-gyp&lt;/a&gt;, a tool written specifically to compile Node.js addons.</source>
          <target state="translated">ソースコードを記述したら、バイナリの &lt;code&gt;addon.node&lt;/code&gt; ファイルにコンパイルする必要があります。これを行うには、プロジェクトのトップレベルに &lt;code&gt;binding.gyp&lt;/code&gt; というファイルを作成し、JSONのような形式を使用してモジュールのビルド構成を記述します。このファイルは、Node.jsアドオンをコンパイルするために特別に作成されたツールである&lt;a href=&quot;https://github.com/nodejs/node-gyp&quot;&gt;node-gyp&lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="bcbfb2f9203bc4c118a7a189cee574fa849e67c8" translate="yes" xml:space="preserve">
          <source>Once the total size of the internal read buffer reaches the threshold specified by &lt;code&gt;highWaterMark&lt;/code&gt;, the stream will temporarily stop reading data from the underlying resource until the data currently buffered can be consumed (that is, the stream will stop calling the internal &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; method that is used to fill the read buffer).</source>
          <target state="translated">内部読み取りバッファーの合計サイズが &lt;code&gt;highWaterMark&lt;/code&gt; で指定されたしきい値に達すると、ストリームは、現在バッファーに入れられているデータが消費されるまで、基になるリソースからのデータの読み取りを一時的に停止します（つまり、ストリームは内部&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;読み取りバッファを埋めるために使用されるメソッド）。</target>
        </trans-unit>
        <trans-unit id="3ab067988cb8464f26b4eae4e55c63ed294db10f" translate="yes" xml:space="preserve">
          <source>Once the total size of the internal read buffer reaches the threshold specified by &lt;code&gt;highWaterMark&lt;/code&gt;, the stream will temporarily stop reading data from the underlying resource until the data currently buffered can be consumed (that is, the stream will stop calling the internal &lt;code&gt;readable._read()&lt;/code&gt; method that is used to fill the read buffer).</source>
          <target state="translated">内部読み取りバッファーの合計サイズが &lt;code&gt;highWaterMark&lt;/code&gt; で指定されたしきい値に達すると、ストリームは、現在バッファーされているデータを消費できるようになるまで（つまり、ストリームは内部の &lt;code&gt;readable._read()&lt;/code&gt; コードの呼び出しを停止するまで）、基になるリソースからのデータの読み取りを一時的に停止します。）読み取りバッファを埋めるために使用されるメソッド）。</target>
        </trans-unit>
        <trans-unit id="ad2356ff474e553c5985844e65af0e12776a0075" translate="yes" xml:space="preserve">
          <source>Once this code is invoked, the Node.js application will not terminate until the &lt;code&gt;readline.Interface&lt;/code&gt; is closed because the interface waits for data to be received on the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="translated">このコードが呼び出されると、インターフェースが &lt;code&gt;input&lt;/code&gt; ストリームでデータが受信されるのを待機するため、 &lt;code&gt;readline.Interface&lt;/code&gt; が閉じられるまで、Node.jsアプリケーションは終了しません。</target>
        </trans-unit>
        <trans-unit id="8fc3a43e7dfa64098d2c09722663a4214268b6eb" translate="yes" xml:space="preserve">
          <source>Once this has been set, all modules must conform to a policy manifest file passed to the flag:</source>
          <target state="translated">これが設定されると、すべてのモジュールはフラグに渡されたポリシーマニフェストファイルに準拠しなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc5c3dc70f48938a8559564ae3f486a2c451dc83" translate="yes" xml:space="preserve">
          <source>One &lt;code&gt;node::IsolateData&lt;/code&gt; instance that contains information that could be shared by multiple &lt;code&gt;node::Environment&lt;/code&gt;s that use the same &lt;code&gt;v8::Isolate&lt;/code&gt;. Currently, no testing if performed for this scenario.</source>
          <target state="translated">同じ &lt;code&gt;v8::Isolate&lt;/code&gt; を使用する複数の &lt;code&gt;node::Environment&lt;/code&gt; 共有できる情報を含む1つの &lt;code&gt;node::IsolateData&lt;/code&gt; インスタンス。現在、このシナリオで実行された場合のテストはありません。</target>
        </trans-unit>
        <trans-unit id="3519b2f373a34f74cf339382a013f3959d2d1fd2" translate="yes" xml:space="preserve">
          <source>One can provide the context by &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;&quot;contextifying&quot;&lt;/a&gt; a sandbox object. The sandboxed code treats any property in the sandbox like a global variable. Any changes to global variables caused by the sandboxed code are reflected in the sandbox object.</source>
          <target state="translated">サンドボックスオブジェクトを&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;「&lt;/a&gt;コンテキスト化」することでコンテキストを提供できます。サンドボックス化されたコードは、サンドボックス内のすべてのプロパティをグローバル変数のように扱います。サンドボックス化されたコードによるグローバル変数への変更は、サンドボックスオブジェクトに反映されます。</target>
        </trans-unit>
        <trans-unit id="187c68bb8a264278e9942712292d71404fc271e4" translate="yes" xml:space="preserve">
          <source>One can provide the context by &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;&lt;em&gt;contextifying&lt;/em&gt;&lt;/a&gt; an object. The invoked code treats any property in the context like a global variable. Any changes to global variables caused by the invoked code are reflected in the context object.</source>
          <target state="translated">一つはでコンテキストを提供することができ&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;&lt;em&gt;contextifying&lt;/em&gt;&lt;/a&gt;オブジェクトを。呼び出されたコードは、コンテキスト内のすべてのプロパティをグローバル変数のように扱います。呼び出されたコードによって引き起こされたグローバル変数への変更は、コンテキストオブジェクトに反映されます。</target>
        </trans-unit>
        <trans-unit id="351de5baff893d4ca3128780d0df95fddb77cebd" translate="yes" xml:space="preserve">
          <source>One convenient use of &lt;code&gt;buf.swap16()&lt;/code&gt; is to perform a fast in-place conversion between UTF-16 little-endian and UTF-16 big-endian:</source>
          <target state="translated">&lt;code&gt;buf.swap16()&lt;/code&gt; の便利な使用法の1つは、UTF-16リトルエンディアンとUTF-16ビッグエンディアンの間で高速インプレース変換を実行することです。</target>
        </trans-unit>
        <trans-unit id="1d7552355d0153f8ac68346e623f5900cfc80651" translate="yes" xml:space="preserve">
          <source>One difference is that, unlike the main thread, bootstrapping within a worker is done within the event loop. So the event loop utilization is immediately available once the worker's script begins execution.</source>
          <target state="translated">1つの違いは、メインスレッドとは異なり、ワーカー内でのブートストラップはイベントループ内で行われます。そのため、ワーカーのスクリプトが実行を開始すれば、イベントループの利用はすぐに可能になります。</target>
        </trans-unit>
        <trans-unit id="e3a507f120a673bd98a67457d61883d39ae2de1c" translate="yes" xml:space="preserve">
          <source>One important caveat is that if the &lt;code&gt;Readable&lt;/code&gt; stream emits an error during processing, the &lt;code&gt;Writable&lt;/code&gt; destination &lt;em&gt;is not closed&lt;/em&gt; automatically. If an error occurs, it will be necessary to &lt;em&gt;manually&lt;/em&gt; close each stream in order to prevent memory leaks.</source>
          <target state="translated">重要な注意点の1つは、 &lt;code&gt;Readable&lt;/code&gt; ストリームが処理中にエラーを発行した場合、 &lt;code&gt;Writable&lt;/code&gt; 宛先&lt;em&gt;が&lt;/em&gt;自動的に&lt;em&gt;閉じられないこと&lt;/em&gt;です。エラーが発生した場合は、メモリリークを防ぐために、各ストリームを&lt;em&gt;手動で&lt;/em&gt;閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="fe5f45681577d4b399916698594c49e0ceea86c0" translate="yes" xml:space="preserve">
          <source>One of the most common errors raised when listening is &lt;code&gt;EADDRINUSE&lt;/code&gt;. This happens when another server is already listening on the requested &lt;code&gt;port&lt;/code&gt;/&lt;code&gt;path&lt;/code&gt;/&lt;code&gt;handle&lt;/code&gt;. One way to handle this would be to retry after a certain amount of time:</source>
          <target state="translated">リスニング時に発生する最も一般的なエラーの1つは &lt;code&gt;EADDRINUSE&lt;/code&gt; です。これは、要求された &lt;code&gt;port&lt;/code&gt; / &lt;code&gt;path&lt;/code&gt; / &lt;code&gt;handle&lt;/code&gt; 別のサーバーがすでにリッスンしているときに発生します。これを処理する1つの方法は、一定時間後に再試行することです。</target>
        </trans-unit>
        <trans-unit id="aa135875bf0bd9017b9a196225817756a41d1812" translate="yes" xml:space="preserve">
          <source>One or more &lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;crypto#crypto_crypto_scryptsync_password_salt_keylen_options&quot;&gt;&lt;code&gt;crypto.scryptSync()&lt;/code&gt;&lt;/a&gt; parameters are outside their legal range.</source>
          <target state="translated">1つ以上の&lt;a href=&quot;crypto#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt; &lt;code&gt;crypto.scrypt()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;crypto#crypto_crypto_scryptsync_password_salt_keylen_options&quot;&gt; &lt;code&gt;crypto.scryptSync()&lt;/code&gt; &lt;/a&gt;パラメーターがそれらの有効範囲外です。</target>
        </trans-unit>
        <trans-unit id="6a2562b4150db0fb4119fd85c182ca57d6db6994" translate="yes" xml:space="preserve">
          <source>One possible use case would be as follows:</source>
          <target state="translated">考えられるユースケースとしては、以下のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="802b0ff3ec61eb809530d7709928925cab0089e0" translate="yes" xml:space="preserve">
          <source>Online Certificate Status Protocol (OCSP)</source>
          <target state="translated">オンライン証明書ステータスプロトコル(OCSP)</target>
        </trans-unit>
        <trans-unit id="bb47b123548d590aa8c68a0428d092779ba76f44" translate="yes" xml:space="preserve">
          <source>Only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;enumerable &quot;own&quot; properties&lt;/a&gt; are considered.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties&quot;&gt;列挙可能な「独自の」プロパティ&lt;/a&gt;のみが考慮されます。</target>
        </trans-unit>
        <trans-unit id="63f3372d23540753a3045f20a2de73ac6d501f2c" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;file://&lt;/code&gt; URLs are supported. A specifier like &lt;code&gt;'https://example.com/app.js'&lt;/code&gt; may be supported by browsers but it is not supported in Node.js.</source>
          <target state="translated">&lt;code&gt;file://&lt;/code&gt; URL のみがサポートされています。 &lt;code&gt;'https://example.com/app.js'&lt;/code&gt; などの指定子はブラウザでサポートされている可能性がありますが、Node.jsではサポートされていません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
