<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="751a13b39d085a2e801df110ee05aac2a34358bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; argument may be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; 引数はいずれであってもよい &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33c35cc0fd059f671ea5de074af24f81f56719ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータができ &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94a104be39c9bc13bef36af071c42ce0cf501caf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータができ &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="f24d6e585cea302eee1c5b8b0d24308bd5f95739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは任意のものとすることができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13347ff52ee272031d0dfa2402f16202165de828" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータが今することができ &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6c7846f24666db70fe163eb55c7b74fbe223c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e7550ba45ded2a07645252a3e6d651b429ee3b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc2fa30b3b806b4b669461c2fcdca26d15195f76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;buffer&lt;/code&gt; パラメータは今どんなことができ &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="448bee28069183d1b15fc96f2985ed6272e50e6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</source>
          <target state="translated">The &lt;code&gt;buffer&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="47a6faa1b05d5962fa77f2ef2cec1bbb6774225c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to buffers anymore.</source>
          <target state="translated">The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to buffers anymore.</target>
        </trans-unit>
        <trans-unit id="fb0c188572e0c48a8b69a36a5b9bd2f155bbb27a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</source>
          <target state="translated">The &lt;code&gt;buffer&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</target>
        </trans-unit>
        <trans-unit id="6d4d5aa4256b2ea2efa06a436d4a16cbd73d21e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bufferSize&lt;/code&gt; option was introduced.</source>
          <target state="translated">The &lt;code&gt;bufferSize&lt;/code&gt; option was introduced.</target>
        </trans-unit>
        <trans-unit id="0becffa6e00a391d07ddcfd44821e7c5551acaa5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are supported now.</source>
          <target state="translated">&lt;code&gt;byteOffset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; のパラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="26dde646bc9d6b4b4c3d1dee9bcfb39db3b93a23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca:&lt;/code&gt; option now supports &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ca:&lt;/code&gt; オプションをサポートするようになりましたが、 &lt;code&gt;BEGIN TRUSTED CERTIFICATE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50abb0a253c600119fb0b706154a2d9856c65812" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ca&lt;/code&gt; option can now be a single string containing multiple CA certificates.</source>
          <target state="translated">&lt;code&gt;ca&lt;/code&gt; オプションは、複数のCA証明書を含む単一の文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="6b641d22b2c014aa622b9b93bee1c68784632570" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cache&lt;/code&gt; parameter was removed.</source>
          <target state="translated">&lt;code&gt;cache&lt;/code&gt; パラメータが削除されました。</target>
        </trans-unit>
        <trans-unit id="9f1c69c38d8e38e5b17ae605ab46f393e7a823c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cachedData&lt;/code&gt; and &lt;code&gt;produceCachedData&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;cachedData&lt;/code&gt; と &lt;code&gt;produceCachedData&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="59361ef794dca079007c57ac559afd8fcab53ac8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cachedData&lt;/code&gt; option passed to a module constructor is invalid.</source>
          <target state="translated">The &lt;code&gt;cachedData&lt;/code&gt; option passed to a module constructor is invalid.</target>
        </trans-unit>
        <trans-unit id="e893e1ba3399c10852a524b61062e2e30e912c02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; argument is now supported.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; argument is now supported.</target>
        </trans-unit>
        <trans-unit id="1c0e007effbbc122cf39880451c0a560d0bbab07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; argument is optional and will be called when this chunk of data is flushed, but only if the chunk is non-empty.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; の引数はオプションであり、このデータのチャンクがフラッシュされたときに呼び出されますが、チャンクは非空である場合にのみ。</target>
        </trans-unit>
        <trans-unit id="ba29b709f3d8b858f0b327068e0a74f6852badbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. &lt;code&gt;err&lt;/code&gt; is an exception object when key derivation fails, otherwise &lt;code&gt;err&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は二つの引数で呼び出され： &lt;code&gt;err&lt;/code&gt; と &lt;code&gt;derivedKey&lt;/code&gt; 。 &lt;code&gt;err&lt;/code&gt; は、キーの導出に失敗した場合の例外オブジェクトです。それ以外の場合、 &lt;code&gt;err&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; です。 &lt;code&gt;derivedKey&lt;/code&gt; は、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;としてコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="5f9f155ba1bd27d006253becd5a6ecb00b817468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt;, it will be forwarded on to the &lt;code&gt;readable.push()&lt;/code&gt; method. In other words, the following are equivalent:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、現在のチャンクが完全に消費されている場合にのみ呼び出さなければなりません。 &lt;code&gt;callback&lt;/code&gt; 渡される最初の引数は、入力の処理中にエラーが発生した場合は &lt;code&gt;Error&lt;/code&gt; オブジェクトである必要があり、そうでない場合は &lt;code&gt;null&lt;/code&gt; である必要があります。2番目の引数が &lt;code&gt;callback&lt;/code&gt; に渡された場合、それは &lt;code&gt;readable.push()&lt;/code&gt; メソッドに転送されます。つまり、以下は同等です。</target>
        </trans-unit>
        <trans-unit id="dd840cc7a865d53dc95e99d01f3c4b10608dd98b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt;, it will be forwarded on to the &lt;code&gt;transform.push()&lt;/code&gt; method. In other words, the following are equivalent:</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; function must be called only when the current chunk is completely consumed. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be an &lt;code&gt;Error&lt;/code&gt; object if an error occurred while processing the input or &lt;code&gt;null&lt;/code&gt; otherwise. If a second argument is passed to the &lt;code&gt;callback&lt;/code&gt; , it will be forwarded on to the &lt;code&gt;transform.push()&lt;/code&gt; method. In other words, the following are equivalent:</target>
        </trans-unit>
        <trans-unit id="88dd40a797380bb42ff2aaf400c6888a523a3bb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function must be called synchronously inside of &lt;code&gt;writable._write()&lt;/code&gt; or asynchronously (i.e. different tick) to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; function must be called synchronously inside of &lt;code&gt;writable._write()&lt;/code&gt; or asynchronously (i.e. different tick) to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</target>
        </trans-unit>
        <trans-unit id="ce46ebb800e17eebebaf8f9d46987e9d2dd4f325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function passed to &lt;code&gt;rl.question()&lt;/code&gt; does not follow the typical pattern of accepting an &lt;code&gt;Error&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; as the first argument. The &lt;code&gt;callback&lt;/code&gt; is called with the provided answer as the only argument.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; に渡された関数 &lt;code&gt;rl.question()&lt;/code&gt; は、受け入れの典型的なパターンに従わない &lt;code&gt;Error&lt;/code&gt; オブジェクト、または &lt;code&gt;null&lt;/code&gt; 最初の引数としてあります。 &lt;code&gt;callback&lt;/code&gt; 唯一の引数として提供さ答えで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="652f37b1b2968e2ab32c3881e04612dc419eb654" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function, if specified, will be added as a listener for the &lt;a href=&quot;#tls_event_secureconnect&quot;&gt;&lt;code&gt;'secureConnect'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、指定された場合、のリスナーとして追加されます&lt;a href=&quot;#tls_event_secureconnect&quot;&gt; &lt;code&gt;'secureConnect'&lt;/code&gt; &lt;/a&gt;イベント。</target>
        </trans-unit>
        <trans-unit id="48896b41d9279e5711e050c3ebf37d6393767a0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 二つの引数を取得 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb5d819e0cd349728bee11ce5e3538fc8b3951ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; gets two arguments &lt;code&gt;(err, resolvedPath)&lt;/code&gt;. May use &lt;code&gt;process.cwd&lt;/code&gt; to resolve relative paths.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 二つの引数を取得 &lt;code&gt;(err, resolvedPath)&lt;/code&gt; 。相対パスを解決するために &lt;code&gt;process.cwd&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="f1eb35be2fe480d7732795f04ca5c40df621729b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked before 'finish' or on error.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 「完了」の前またはエラー時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d47f3734513421fd10f4f5ed4353e31d443dc11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked if 'finish' or 'error' is emitted.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; is invoked if 'finish' or 'error' is emitted.</target>
        </trans-unit>
        <trans-unit id="253886ac3350139a2e4de4d0e7575141b9659fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked when a &lt;code&gt;PerformanceObserver&lt;/code&gt; is notified about new &lt;code&gt;PerformanceEntry&lt;/code&gt; instances. The callback receives a &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; instance and a reference to the &lt;code&gt;PerformanceObserver&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; ときに呼び出される &lt;code&gt;PerformanceObserver&lt;/code&gt; が新しいについて通知され &lt;code&gt;PerformanceEntry&lt;/code&gt; のインスタンス。コールバックは、受信 &lt;code&gt;PerformanceObserverEntryList&lt;/code&gt; のインスタンスと参照 &lt;code&gt;PerformanceObserver&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="9b72dba06513971ab2b899eb65fab8c7b2b0f850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; is invoked with a single argument that is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; のインスタンスである単一の引数で呼び出され&lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50db4a4272c90529a835c1153eb71e463f38c65c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; method must be called to signal either that the write completed successfully or failed with an error. The first argument passed to the &lt;code&gt;callback&lt;/code&gt; must be the &lt;code&gt;Error&lt;/code&gt; object if the call failed or &lt;code&gt;null&lt;/code&gt; if the write succeeded.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; メソッドは、書き込みが正常に完了またはエラーで失敗したことのいずれかを知らせるために呼び出されなければなりません。渡される最初の引数 &lt;code&gt;callback&lt;/code&gt; でなければならない &lt;code&gt;Error&lt;/code&gt; 呼び出しが失敗した場合、またはオブジェクト &lt;code&gt;null&lt;/code&gt; の書き込みが成功した場合。</target>
        </trans-unit>
        <trans-unit id="179014424211e6954e7ae18e22c66302ded36897" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータはもはやオプションではありません。渡さないと、DEP0013というIDの非推奨警告が発生します。</target>
        </trans-unit>
        <trans-unit id="5938acd6c222b936a76d043fe7bef6a5ee523eb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is no longer optional. Not passing it will throw a &lt;code&gt;TypeError&lt;/code&gt; at runtime.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータはもはやオプションではありません。渡さないと、実行時に &lt;code&gt;TypeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="80d8feeb9e26a94d3dde87faf723b7d3903dbfca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">現在、 &lt;code&gt;callback&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="ba70c7e9c871db219c8a222ad10026562b6f4eae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="ff62e0bdb25bf6e3167f8d2e71d5dcb26d11520e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will always be called with &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;error&lt;/code&gt; parameter in case of success.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; いつもと呼ばれる &lt;code&gt;null&lt;/code&gt; として &lt;code&gt;error&lt;/code&gt; 成功した場合のパラメータ。</target>
        </trans-unit>
        <trans-unit id="a97f9f703037592367df8c46b968f79083b441dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will be called after the resource handle has been closed.</source>
          <target state="translated">The &lt;code&gt;callback&lt;/code&gt; will be called after the resource handle has been closed.</target>
        </trans-unit>
        <trans-unit id="dc1c85ca488c98544bc81bd9a9e01e47ef3bacd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; will likely not be invoked in precisely &lt;code&gt;delay&lt;/code&gt; milliseconds. Node.js makes no guarantees about the exact timing of when callbacks will fire, nor of their ordering. The callback will be called as close as possible to the time specified.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; おそらく正確には呼び出されません &lt;code&gt;delay&lt;/code&gt; （ミリ秒）。Node.jsは、コールバックが発生する正確なタイミングやその順序については保証しません。コールバックは、指定された時間に可能な限り近く呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b4d1ef89737481ccac58dabb8bf32a394b7a7041" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;capture&lt;/code&gt; option is not used by Node.js in any functional way other than tracking registered event listeners per the &lt;code&gt;EventTarget&lt;/code&gt; specification. Specifically, the &lt;code&gt;capture&lt;/code&gt; option is used as part of the key when registering a &lt;code&gt;listener&lt;/code&gt;. Any individual &lt;code&gt;listener&lt;/code&gt; may be added once with &lt;code&gt;capture = false&lt;/code&gt;, and once with &lt;code&gt;capture = true&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;capture&lt;/code&gt; option is not used by Node.js in any functional way other than tracking registered event listeners per the &lt;code&gt;EventTarget&lt;/code&gt; specification. Specifically, the &lt;code&gt;capture&lt;/code&gt; option is used as part of the key when registering a &lt;code&gt;listener&lt;/code&gt; . Any individual &lt;code&gt;listener&lt;/code&gt; may be added once with &lt;code&gt;capture = false&lt;/code&gt; , and once with &lt;code&gt;capture = true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82b8f42c74782ea471baa4a02bd82da50cc18f06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;captureRejections&lt;/code&gt; option in the &lt;code&gt;EventEmitter&lt;/code&gt; constructor or the global setting change this behavior, installing a &lt;code&gt;.then(undefined, handler)&lt;/code&gt; handler on the &lt;code&gt;Promise&lt;/code&gt;. This handler routes the exception asynchronously to the &lt;a href=&quot;#events_emitter_symbol_for_nodejs_rejection_err_eventname_args&quot;&gt;&lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt;&lt;/a&gt; method if there is one, or to &lt;a href=&quot;#events_error_events&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event handler if there is none.</source>
          <target state="translated">The &lt;code&gt;captureRejections&lt;/code&gt; option in the &lt;code&gt;EventEmitter&lt;/code&gt; constructor or the global setting change this behavior, installing a &lt;code&gt;.then(undefined, handler)&lt;/code&gt; handler on the &lt;code&gt;Promise&lt;/code&gt; . This handler routes the exception asynchronously to the &lt;a href=&quot;#events_emitter_symbol_for_nodejs_rejection_err_eventname_args&quot;&gt; &lt;code&gt;Symbol.for('nodejs.rejection')&lt;/code&gt; &lt;/a&gt; method if there is one, or to &lt;a href=&quot;#events_error_events&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt; event handler if there is none.</target>
        </trans-unit>
        <trans-unit id="1922dd3f5d83e12adee6b2b757d0739f0ad27dfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFile()&lt;/code&gt; function is similar to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; except that it does not spawn a shell by default. Rather, the specified executable &lt;code&gt;file&lt;/code&gt; is spawned directly as a new process making it slightly more efficient than &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;child_process.execFile()&lt;/code&gt; 関数はに似ている&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;それがデフォルトでシェルを起動しないことを除いて。むしろ、指定された実行可能 &lt;code&gt;file&lt;/code&gt; は新しいプロセスとして直接生成され、&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;よりもわずかに効率的になります。</target>
        </trans-unit>
        <trans-unit id="2a4a0a2c850eea5f5dfb7d502a45c3991da5e300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execFileSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited.</source>
          <target state="translated">&lt;code&gt;child_process.execFileSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt; &lt;code&gt;child_process.execFile()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまでメソッドが返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。</target>
        </trans-unit>
        <trans-unit id="43e339d998d6a81aa79698538c93cb46b8fd4348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.execSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; with the exception that the method will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the child process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">&lt;code&gt;child_process.execSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまでメソッドが返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。子プロセスが &lt;code&gt;SIGTERM&lt;/code&gt; シグナルをインターセプトして処理し、終了しない場合、親プロセスは子プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="79ab2f31fa112d0a33071b52bf3919603eb10e38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.fork()&lt;/code&gt; method is a special case of &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; used specifically to spawn new Node.js processes. Like &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object is returned. The returned &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; will have an additional communication channel built-in that allows messages to be passed back and forth between the parent and child. See &lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;subprocess.send()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;child_process.fork()&lt;/code&gt; メソッドは、特殊なケースである&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;新しいNode.jsのプロセスを起動するために特に使用されます。&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;オブジェクトが返されます。返された&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;には、追加の通信チャネルが組み込まれており、親と子の間でメッセージをやり取りできます。詳細については、&lt;a href=&quot;#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt; &lt;code&gt;subprocess.send()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="baf57fba487307b776480db4b6f5caa8f5c57761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt;, with command line arguments in &lt;code&gt;args&lt;/code&gt;. If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</source>
          <target state="translated">&lt;code&gt;child_process.spawn()&lt;/code&gt; メソッドは、指定された使用して新しいプロセススポーン &lt;code&gt;command&lt;/code&gt; のコマンドライン引数を使用して、 &lt;code&gt;args&lt;/code&gt; 。省略した場合、 &lt;code&gt;args&lt;/code&gt; はデフォルトで空の配列になります。</target>
        </trans-unit>
        <trans-unit id="bed0498aaeb6be9f0b258ce105499e41924500b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt;, with command-line arguments in &lt;code&gt;args&lt;/code&gt;. If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</source>
          <target state="translated">The &lt;code&gt;child_process.spawn()&lt;/code&gt; method spawns a new process using the given &lt;code&gt;command&lt;/code&gt; , with command-line arguments in &lt;code&gt;args&lt;/code&gt; . If omitted, &lt;code&gt;args&lt;/code&gt; defaults to an empty array.</target>
        </trans-unit>
        <trans-unit id="ff2c5a22e3f39b38bd7778f858fd5a2731fa71b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process.spawnSync()&lt;/code&gt; method is generally identical to &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; with the exception that the function will not return until the child process has fully closed. When a timeout has been encountered and &lt;code&gt;killSignal&lt;/code&gt; is sent, the method won't return until the process has completely exited. If the process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and doesn't exit, the parent process will wait until the child process has exited.</source>
          <target state="translated">&lt;code&gt;child_process.spawnSync()&lt;/code&gt; メソッドは、一般的に同じである&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;子プロセスが完全に閉じてしまうまで関数が返さないことを除いて。タイムアウトが発生して &lt;code&gt;killSignal&lt;/code&gt; が送信された場合、プロセスが完全に終了するまでメソッドは戻りません。プロセスが &lt;code&gt;SIGTERM&lt;/code&gt; シグナルをインターセプトして処理し、終了しない場合、親プロセスは子プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="7e4066aabced91d6898f68577001b144876c3550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn child processes in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt;&lt;code&gt;popen(3)&lt;/code&gt;&lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">&lt;code&gt;child_process&lt;/code&gt; モジュールする、同様の、しかし同一ではない方法でスポーン子プロセスする能力を提供する&lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt; &lt;code&gt;popen(3)&lt;/code&gt; &lt;/a&gt;。この機能は主に、&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;関数によって提供されます。</target>
        </trans-unit>
        <trans-unit id="9390a72ee9e9daffab348d7a85c9e259634d7445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt;&lt;code&gt;popen(3)&lt;/code&gt;&lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">The &lt;code&gt;child_process&lt;/code&gt; module provides the ability to spawn subprocesses in a manner that is similar, but not identical, to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/popen.3.html&quot;&gt; &lt;code&gt;popen(3)&lt;/code&gt; &lt;/a&gt;. This capability is primarily provided by the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt; function:</target>
        </trans-unit>
        <trans-unit id="7ab6bb247d807aa99f0d1ad8784b0eb604c5e644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunk&lt;/code&gt; argument can now be a &lt;code&gt;Uint8Array&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;chunk&lt;/code&gt; 引数は、今することができ &lt;code&gt;Uint8Array&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="59a049e2241d0e91f8119efebfab57152070fdcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.getAuthTag()&lt;/code&gt; method should only be called after encryption has been completed using the &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;cipher.getAuthTag()&lt;/code&gt; 暗号化を使用して完了した後にメソッドは、呼び出されるべき&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="fc2e9e0a05a5ea6249159718bf69662d588f281e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;cipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cipher.setAAD()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_cipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;cipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a674ee975c802867ef81a7453297330883d95c2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;cipher.setAutoPadding()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb4365192a6a89f79bcda437a280cc2772a31e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;cipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt;&lt;code&gt;cipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;cipher.update()&lt;/code&gt; メソッドは、までは新しいデータで複数回呼び出すことができ&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;と呼ばれています。 &lt;code&gt;cipher.update()&lt;/code&gt; 後に&lt;a href=&quot;#crypto_cipher_final_outputencoding&quot;&gt; &lt;code&gt;cipher.final()&lt;/code&gt; &lt;/a&gt;を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="99db075b76a09de689ee8cce9b005a8d5bab5898" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clientHelloHandler&lt;/code&gt; can return a new &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; object that will be used to continue the TLS handshake. If the function returns &lt;code&gt;undefined&lt;/code&gt;, the default &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; will be used. Returning any other value will cause an error to be thrown that will destroy the &lt;code&gt;QuicServerSession&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;clientHelloHandler&lt;/code&gt; は新しい返すことができます&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;。&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt; TLSハンドシェイクを継続するのに使用されるオブジェクトを。関数が &lt;code&gt;undefined&lt;/code&gt; を返す場合、デフォルトの&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&amp;lt;tls.SecureContext&amp;gt;&lt;/a&gt;が使用されます。他の値を返すと、 &lt;code&gt;QuicServerSession&lt;/code&gt; インスタンスを破壊するエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="eab25cea22e5e6d0a936bebbeff627b02e836ed7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;codeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;codeGeneration&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a6544e8c92f9b1421cb39964549a6fba71ba9b10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option accepts numbers for a new output mode.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションは、新しい出力モード用の番号を受け入れます。</target>
        </trans-unit>
        <trans-unit id="4e0fd9c17389d34407b63c9830ee6259874d3554" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="9c60993429a8283c8b6bb30d9d486cf8be30652b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compact&lt;/code&gt; options default is changed to &lt;code&gt;3&lt;/code&gt; and the &lt;code&gt;breakLength&lt;/code&gt; options default is changed to &lt;code&gt;80&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; オプションのデフォルトに変更された &lt;code&gt;3&lt;/code&gt; 及び &lt;code&gt;breakLength&lt;/code&gt; のオプションのデフォルト値に変更される &lt;code&gt;80&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c8daef3b2446d622017a6e79a063c5bb6f4079c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function can be called asynchronously if it accepts two arguments:</source>
          <target state="translated">次の2つの引数を受け入れる場合、 &lt;code&gt;completer&lt;/code&gt; 関数を非同期で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="978d498a3782c9fe0dec8c9101e02b8242d86778" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completer&lt;/code&gt; function takes the current line entered by the user as an argument, and returns an &lt;code&gt;Array&lt;/code&gt; with 2 entries:</source>
          <target state="translated">&lt;code&gt;completer&lt;/code&gt; 関数は、引数として、ユーザによって入力された現在の行を受け取り、戻り &lt;code&gt;Array&lt;/code&gt; 2つのエントリが：</target>
        </trans-unit>
        <trans-unit id="2bd4321de6a5c1add0d20d51980bd23d40c9f9c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;conditions&lt;/code&gt; property on the &lt;code&gt;context&lt;/code&gt; is an array of conditions for &lt;a href=&quot;packages#packages_conditional_exports&quot;&gt;Conditional exports&lt;/a&gt; that apply to this resolution request. They can be used for looking up conditional mappings elsewhere or to modify the list when calling the default resolution logic.</source>
          <target state="translated">The &lt;code&gt;conditions&lt;/code&gt; property on the &lt;code&gt;context&lt;/code&gt; is an array of conditions for &lt;a href=&quot;packages#packages_conditional_exports&quot;&gt;Conditional exports&lt;/a&gt; that apply to this resolution request. They can be used for looking up conditional mappings elsewhere or to modify the list when calling the default resolution logic.</target>
        </trans-unit>
        <trans-unit id="fc31eb91c139ef8d491acdbbebec616d5484155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.debug()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.debug()&lt;/code&gt; 関数の別名で&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="defb8cff6c1e951f6de2d07f458d2babac7ba2a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.info()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.info()&lt;/code&gt; 関数の別名で&lt;a href=&quot;#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cecd0aff03a02528c4539c7c9f56be627a6fd0bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console.warn()&lt;/code&gt; function is an alias for &lt;a href=&quot;#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;console.warn()&lt;/code&gt; 関数での別名である&lt;a href=&quot;#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f9c8303533d153fb137daa18d249448d01467f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console&lt;/code&gt; module provides a simple debugging console that is similar to the JavaScript console mechanism provided by web browsers.</source>
          <target state="translated">&lt;code&gt;console&lt;/code&gt; モジュールは、Webブラウザが提供するJavaScriptコンソール機構と同様である簡単なデバッグコンソールを提供します。</target>
        </trans-unit>
        <trans-unit id="764cd16bca065f3cc69ab4d8a92233579209fc99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constants&lt;/code&gt; module is deprecated. When requiring access to constants relevant to specific Node.js builtin modules, developers should instead refer to the &lt;code&gt;constants&lt;/code&gt; property exposed by the relevant module. For instance, &lt;code&gt;require('fs').constants&lt;/code&gt; and &lt;code&gt;require('os').constants&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;constants&lt;/code&gt; モジュールが推奨されていません。特定のNode.js組み込みモジュールに関連する定数へのアクセスが必要な場合、開発者は代わりに、関連するモジュールによって公開される &lt;code&gt;constants&lt;/code&gt; プロパティを参照する必要があります。たとえば、 &lt;code&gt;require('fs').constants&lt;/code&gt; および &lt;code&gt;require('os').constants&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d5392b0ffb88c2d741b4a827845f941c5aa7e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructor&lt;/code&gt; parameter can refer to an ES6 class now.</source>
          <target state="translated">&lt;code&gt;constructor&lt;/code&gt; パラメータは現在ES6クラスを参照することができます。</target>
        </trans-unit>
        <trans-unit id="91794b1474f58b591b318c4eb4de0f99f69c42fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from an end user. For instance:</source>
          <target state="translated">&lt;code&gt;constructorOpt&lt;/code&gt; の引数は、エンドユーザからのエラー発生の実装の詳細を隠蔽するために有用です。例えば：</target>
        </trans-unit>
        <trans-unit id="d2d6dc4aafe65e06a01071452301d4785efeb6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from the user. For instance:</source>
          <target state="translated">The &lt;code&gt;constructorOpt&lt;/code&gt; argument is useful for hiding implementation details of error generation from the user. For instance:</target>
        </trans-unit>
        <trans-unit id="3f58213ab25c95853528316189bfb6d69406e28a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content-length&lt;/code&gt; header field will be automatically set.</source>
          <target state="translated">&lt;code&gt;content-length&lt;/code&gt; ヘッダフィールドが自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="54297810109a40e006edcdd14b8aa735a9c0830f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; given during the call to &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; can be retrieved from any thread with a call to &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; への通話中に所定の &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; を呼び出して、任意のスレッドから取得することができる &lt;code&gt;napi_get_threadsafe_function_context()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ed0f099bbb846c6a8d341dea02523807f589314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contextCodeGeneration&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;contextCodeGeneration&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d724f5e9ffe9edd754ed243abdbb481de04378bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cost&lt;/code&gt;, &lt;code&gt;blockSize&lt;/code&gt; and &lt;code&gt;parallelization&lt;/code&gt; option names have been added.</source>
          <target state="translated">&lt;code&gt;cost&lt;/code&gt; 、 &lt;code&gt;blockSize&lt;/code&gt; および &lt;code&gt;parallelization&lt;/code&gt; オプション名が追加されました。</target>
        </trans-unit>
        <trans-unit id="2ebacbab8ba40ddb7c2a01713d06a73151a28484" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crlfDelay&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;crlfDelay&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="4f76355cd575f0ec09649052dbc2cc2c523a151b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.Credentials&lt;/code&gt; class was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.SecureContext&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;crypto.Credentials&lt;/code&gt; クラスが削除されました。代わりに&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.SecureContext&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="ab8548d3b4f7b48f74cef5f090f011d004a39e9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backward compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</source>
          <target state="translated">The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backward compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</target>
        </trans-unit>
        <trans-unit id="496c02ce2af63849a303e1f5ac12f7c5f3707e06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; mechanism is provided for backwards compatibility with legacy programs that expect &lt;code&gt;'latin1'&lt;/code&gt; to be the default encoding.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; のメカニズムが期待レガシープログラムとの下位互換性のために提供される &lt;code&gt;'latin1'&lt;/code&gt; デフォルトのエンコードします。</target>
        </trans-unit>
        <trans-unit id="09a09563094e226c530650f4b442648579a0291b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property can be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is passed to the callback. This property, however, has been deprecated and use should be avoided.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; プロパティは、方法に変更するために使用することができ &lt;code&gt;derivedKey&lt;/code&gt; は、コールバックに渡されます。ただし、このプロパティは廃止されており、使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="252e5ce33b7a0494ca5705dfa01113826b19a5dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; property may be used to change the way the &lt;code&gt;derivedKey&lt;/code&gt; is returned. This property, however, is deprecated and use should be avoided.</source>
          <target state="translated">&lt;code&gt;crypto.DEFAULT_ENCODING&lt;/code&gt; プロパティは、方法に変更するために使用することができる &lt;code&gt;derivedKey&lt;/code&gt; が返されます。ただし、このプロパティは非推奨であり、使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="145e6ed1d4b3ecb5175a68c99648976754551213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto._toBuf()&lt;/code&gt; function was not designed to be used by modules outside of Node.js core and was removed.</source>
          <target state="translated">&lt;code&gt;crypto._toBuf()&lt;/code&gt; 関数は、外部のNode.jsコアのモジュールによって使用されるように設計されていないし、除去しました。</target>
        </trans-unit>
        <trans-unit id="decbf0573b73333da4f753cecb890dd944596753" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.createCredentials()&lt;/code&gt; API was removed. Please use &lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;crypto.createCredentials()&lt;/code&gt; APIを除去しました。代わりに&lt;a href=&quot;tls#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="dfb78b96f9539bdae500b0c828afd631df6535c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto.randomBytes()&lt;/code&gt; method will not complete until there is sufficient entropy available. This should normally never take longer than a few milliseconds. The only time when generating the random bytes may conceivably block for a longer period of time is right after boot, when the whole system is still low on entropy.</source>
          <target state="translated">&lt;code&gt;crypto.randomBytes()&lt;/code&gt; 利用可能な十分なエントロピーがあるまで、この方法では完了しません。これには通常、数ミリ秒以上かかることはありません。ランダムバイトを生成する唯一の時間は、システム全体のエントロピーがまだ低い場合に、ブート直後にブロックされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8339e284a971532b7d28d05ffe582daa5f7966b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides cryptographic functionality that includes a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify functions.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールは、OpenSSLのハッシュ、HMAC、暗号、復号、符号のラッパーのセットを含み、および機能を検証する暗号化機能を提供します。</target>
        </trans-unit>
        <trans-unit id="480ec0b6a393327edcc239ebe43596e74863e8c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module provides the &lt;code&gt;Certificate&lt;/code&gt; class for working with SPKAC data. The most common usage is handling output generated by the HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; element. Node.js uses &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSL's SPKAC implementation&lt;/a&gt; internally.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールが提供 &lt;code&gt;Certificate&lt;/code&gt; SPKACデータを扱うためのクラスを。最も一般的な使用法は、HTML5 &lt;code&gt;&amp;lt;keygen&amp;gt;&lt;/code&gt; 要素によって生成された出力の処理です。Node.jsは&lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html&quot;&gt;OpenSSLのSPKAC実装を&lt;/a&gt;内部で使用します。</target>
        </trans-unit>
        <trans-unit id="2a2dac1ece53434551141ebdd9ed53915ef72940" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; module still supports some algorithms which are already compromised and are not currently recommended for use. The API also allows the use of ciphers and hashes with a small key size that are too weak for safe use.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モジュールは、まだ、すでに危険にさらされており、現在は使用することは推奨されていないいくつかのアルゴリズムをサポートしています。APIは、安全に使用するには弱すぎる、小さい鍵サイズの暗号とハッシュの使用も許可します。</target>
        </trans-unit>
        <trans-unit id="012c7bdf0d9689e836fec05c286230617e01c04a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; property returns the total number of bytes written to the underlying socket &lt;em&gt;including&lt;/em&gt; the bytes required for the implementation of the TLS protocol.</source>
          <target state="translated">&lt;code&gt;cryptoStream.bytesWritten&lt;/code&gt; プロパティは、下にあるソケットに書き込まれたバイトの総数を返し&lt;em&gt;を含む&lt;/em&gt; TLSプロトコルの実装のために必要なバイト。</target>
        </trans-unit>
        <trans-unit id="a4ffdb22912634d83f537b8778b7f78372135d6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cwd&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;cwd&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a785322575851f3cbfa6c65e6bc51bc7994b4d6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; パラメータは、今することができ &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="059fb205840fb573709992ff65937e48e8c47ccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14b07c7cbf1b68cd88bdda8eaa254aa5613b484c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</source>
          <target state="translated">The &lt;code&gt;data&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</target>
        </trans-unit>
        <trans-unit id="25b52938a5997495e89f01c495bc114797b50757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</source>
          <target state="translated">The &lt;code&gt;data&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</target>
        </trans-unit>
        <trans-unit id="d699a8e66e291d4dbb66069406e56fa6a3bdbd56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAAD()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;decipher.setAAD()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd0108662c04d88926a087d2bc8bf093bc824eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; and can only be called once.</source>
          <target state="translated">&lt;code&gt;decipher.setAuthTag()&lt;/code&gt; メソッドが呼び出される前にしなければならない&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;一度だけ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e673be07517d431f070c860e94bf9566340b507d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt;&lt;code&gt;decipher.update()&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;CCM&lt;/code&gt; mode or before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; modes. &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; can only be called once.</source>
          <target state="translated">The &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_update_data_inputencoding_outputencoding&quot;&gt; &lt;code&gt;decipher.update()&lt;/code&gt; &lt;/a&gt; for &lt;code&gt;CCM&lt;/code&gt; mode or before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt; for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt; modes. &lt;code&gt;decipher.setAuthTag()&lt;/code&gt; can only be called once.</target>
        </trans-unit>
        <trans-unit id="e84318ad593602027e542c7e5bfeb9cd812b2a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; method must be called before &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;decipher.setAutoPadding()&lt;/code&gt; メソッドは、前に呼び出さなければなりません&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6ed87d0293868649e057451f66f944a2b809c18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;decipher.update()&lt;/code&gt; method can be called multiple times with new data until &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; is called. Calling &lt;code&gt;decipher.update()&lt;/code&gt; after &lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt;&lt;code&gt;decipher.final()&lt;/code&gt;&lt;/a&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;decipher.update()&lt;/code&gt; メソッドがするまで、新しいデータで複数回呼び出すことができます&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;と呼ばれています。 &lt;code&gt;decipher.update()&lt;/code&gt; 後に&lt;a href=&quot;#crypto_decipher_final_outputencoding&quot;&gt; &lt;code&gt;decipher.final()&lt;/code&gt; &lt;/a&gt;を呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="a0770c4cae4c4f8a3dc5664ccd10e0ca3a8b2e11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultOptions&lt;/code&gt; value allows customization of the default options used by &lt;code&gt;util.inspect&lt;/code&gt;. This is useful for functions like &lt;code&gt;console.log&lt;/code&gt; or &lt;code&gt;util.format&lt;/code&gt; which implicitly call into &lt;code&gt;util.inspect&lt;/code&gt;. It shall be set to an object containing one or more valid &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; options. Setting option properties directly is also supported.</source>
          <target state="translated">&lt;code&gt;defaultOptions&lt;/code&gt; の値がで使用されるデフォルトのオプションをカスタマイズできます &lt;code&gt;util.inspect&lt;/code&gt; を。これは、 &lt;code&gt;util.format&lt;/code&gt; を暗黙的に呼び出す &lt;code&gt;console.log&lt;/code&gt; やutil.formatなどの関数に &lt;code&gt;util.inspect&lt;/code&gt; ます。1つ以上の有効な&lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;オプションを含むオブジェクトに設定する必要があります。オプションプロパティの直接設定もサポートされています。</target>
        </trans-unit>
        <trans-unit id="ef6cc6afd4679ef76190a9f15f4f9a33f7099fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed back to &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt; デフォルトはに戻す &lt;code&gt;2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a51131897a7f510936321ce110be4936110e773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depth&lt;/code&gt; default changed to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;depth&lt;/code&gt; に変更デフォルトの &lt;code&gt;20&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b84842f945868c618332d4e911b58899660aa5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram.Socket&lt;/code&gt; object is an &lt;a href=&quot;events&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; that encapsulates the datagram functionality.</source>
          <target state="translated">&lt;code&gt;dgram.Socket&lt;/code&gt; のオブジェクトがある&lt;a href=&quot;events&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;データグラムの機能をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="86b0893a7f189daf0b825fd662edb92ff8ee749b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module previously contained several APIs that were never meant to accessed outside of Node.js core: &lt;code&gt;Socket.prototype._handle&lt;/code&gt;, &lt;code&gt;Socket.prototype._receiving&lt;/code&gt;, &lt;code&gt;Socket.prototype._bindState&lt;/code&gt;, &lt;code&gt;Socket.prototype._queue&lt;/code&gt;, &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt;, &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt;, &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt;, and &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt;.</source>
          <target state="translated">以前の &lt;code&gt;dgram&lt;/code&gt; モジュールには、Node.jsコアの外部からアクセスすることを意図していないいくつかのAPIが含まれていました： &lt;code&gt;Socket.prototype._handle&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._receiving&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._bindState&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._queue&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._reuseAddr&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._healthCheck()&lt;/code&gt; 、 &lt;code&gt;Socket.prototype._stopReceiving()&lt;/code&gt; 、および &lt;code&gt;dgram._createSocketHandle()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4f59c7eb695d24e543b8bf8e05bcf31a8bb305b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP Datagram sockets.</source>
          <target state="translated">&lt;code&gt;dgram&lt;/code&gt; モジュールは、UDPデータグラムソケットの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="b97b1eaf999d50e4e0e41ecd874b2ab16c8cc8e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP datagram sockets.</source>
          <target state="translated">The &lt;code&gt;dgram&lt;/code&gt; module provides an implementation of UDP datagram sockets.</target>
        </trans-unit>
        <trans-unit id="f2fba3946daca5b8c18880f06bf7abe54b59cb56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;diagnostics_channel&lt;/code&gt; module provides an API to create named channels to report arbitrary message data for diagnostics purposes.</source>
          <target state="translated">&lt;code&gt;diagnostics_channel&lt;/code&gt; のモジュールは、診断目的のために任意のメッセージデータを報告するという名前のチャネルを作成するためのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="e49cb4f4a826367eb475ccde83a8070b593f0ec6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dictionary&lt;/code&gt; オプションが可能 &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd508cc93689322f1c77c76b0ee7e9bb1098555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dictionary&lt;/code&gt; option can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;dictionary&lt;/code&gt; オプションが可能 &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="3f15d09ab57639a0bbd963ccdc2d326537fb64d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; parameter is always required now.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; パラメータは常に必須になりました。</target>
        </trans-unit>
        <trans-unit id="2c56d2b4b4491b6e12c848bc33342d5f9914ca9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.promises&lt;/code&gt; API provides an alternative set of asynchronous DNS methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('dns').promises&lt;/code&gt; or &lt;code&gt;require('dns/promises')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dns.promises&lt;/code&gt; のAPIが返す非同期DNS法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには、 &lt;code&gt;require('dns').promises&lt;/code&gt; または &lt;code&gt;require('dns/promises')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ea73cbcffb6d3d2f70aa60b49f9b6128e82ab354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.promises&lt;/code&gt; API provides an alternative set of asynchronous DNS methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('dns').promises&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dns.promises&lt;/code&gt; の APIが返す非同期DNS法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには &lt;code&gt;require('dns').promises&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ebf732de7db900928d3336c4bb8043ad1b55b006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">&lt;code&gt;dns.setServers()&lt;/code&gt; DNSクエリが進行している状態でメソッドを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="51cfea11e5b64abbc7488234cdc0f7e71e59f882" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns&lt;/code&gt; module contains functions belonging to two different categories:</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; モジュールには2つの異なるカテゴリに属する機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="1c076fd4cc8eef045d3a434a9b28f60938b5083c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dns&lt;/code&gt; module enables name resolution. For example, use it to look up IP addresses of host names.</source>
          <target state="translated">The &lt;code&gt;dns&lt;/code&gt; module enables name resolution. For example, use it to look up IP addresses of host names.</target>
        </trans-unit>
        <trans-unit id="db764debbedbbc99da97635f28c98936c8927a81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dnsPromises.setServers()&lt;/code&gt; method must not be called while a DNS query is in progress.</source>
          <target state="translated">&lt;code&gt;dnsPromises.setServers()&lt;/code&gt; DNSクエリが進行している状態でメソッドを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="679e20c13d5a3c302673244281bcd94fae6b6f09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;domain&lt;/code&gt; module was not usable since it could not establish the required error handling hooks, because &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; had been called at an earlier point in time.</source>
          <target state="translated">&lt;code&gt;domain&lt;/code&gt; ので、それは、フックを取り扱う必要なエラーを確立できませんでしたので、モジュールは使用できませんでした&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; は&lt;/a&gt;、過去の時点で呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="04d4ce38eb55867a1f7955e0fe695cba0c0dd698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; cannot be set to &lt;code&gt;false&lt;/code&gt; anymore due to a change in OpenSSL.</source>
          <target state="translated">&lt;code&gt;ecdhCurve&lt;/code&gt; は、に設定することができない &lt;code&gt;false&lt;/code&gt; のOpenSSLの変化に起因するもう。</target>
        </trans-unit>
        <trans-unit id="742b9fe51501d348db258ff24896c339ef5c45a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option can now be multiple &lt;code&gt;':'&lt;/code&gt; separated curve names or &lt;code&gt;'auto'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ecdhCurve&lt;/code&gt; のオプションは、複数の可能 &lt;code&gt;':'&lt;/code&gt; 曲線名または区切ら &lt;code&gt;'auto'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a892c664f54e9e71b866fc1d18e553d9a45ee0de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecdhCurve&lt;/code&gt; option to &lt;code&gt;tls.createSecureContext()&lt;/code&gt; and &lt;code&gt;tls.TLSSocket&lt;/code&gt; could be set to &lt;code&gt;false&lt;/code&gt; to disable ECDH entirely on the server only. This mode was deprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with the client and is now unsupported. Use the &lt;code&gt;ciphers&lt;/code&gt; parameter instead.</source>
          <target state="translated">&lt;code&gt;tls.createSecureContext()&lt;/code&gt; および &lt;code&gt;tls.TLSSocket&lt;/code&gt; の &lt;code&gt;ecdhCurve&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定して、サーバーでのみECDHを完全に無効にすることができます。このモードは、OpenSSL 1.1.0への移行とクライアントとの一貫性のために廃止され、現在はサポートされていません。代わりに &lt;code&gt;ciphers&lt;/code&gt; パラメータを使用してください。</target>
        </trans-unit>
        <trans-unit id="2946f4082b1f02b207349af665cbc73adc1f9552" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enableTrace&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;enableTrace&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="357c0a04ac7d9b56fc95efc24a727a047b1c2cd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; argument is optional and only applies when &lt;code&gt;chunk&lt;/code&gt; is a string. Defaults to &lt;code&gt;'utf8'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 引数はオプションで、ときにのみ適用される &lt;code&gt;chunk&lt;/code&gt; 文字列です。デフォルトは &lt;code&gt;'utf8'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef7385768a7559ac9db4c147901248a0ed8b3a9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option can now explicitly be set to &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; オプションが明示的に設定することができる &lt;code&gt;buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b949d0b7f0849d139bac2ef42775cb8a31f70428" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 場合、このオプションは無視され &lt;code&gt;data&lt;/code&gt; バッファです。</target>
        </trans-unit>
        <trans-unit id="d666b890d21afc0e001c3363da9e22a106d0a9c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer. If &lt;code&gt;data&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</source>
          <target state="translated">The &lt;code&gt;encoding&lt;/code&gt; option is ignored if &lt;code&gt;data&lt;/code&gt; is a buffer. If &lt;code&gt;data&lt;/code&gt; is a normal object, it must have an own &lt;code&gt;toString&lt;/code&gt; function property.</target>
        </trans-unit>
        <trans-unit id="1a6472fc1cb86c5ad31a896cde8078ce10d04af0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; option sets the encoding for the &lt;code&gt;path&lt;/code&gt; while opening the directory and subsequent read operations.</source>
          <target state="translated">The &lt;code&gt;encoding&lt;/code&gt; option sets the encoding for the &lt;code&gt;path&lt;/code&gt; while opening the directory and subsequent read operations.</target>
        </trans-unit>
        <trans-unit id="b82c726c3a2d2cdae71f022dd63da3f76e7b51f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoding&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f494a34f4cd91e5259dbe4178555f1b760f38c15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">&lt;code&gt;endMark&lt;/code&gt; の引数は、任意の特定する必要があり&lt;em&gt;、既存の&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; をパフォーマンスタイムラインまたはタイムスタンプが提供するプロパティのいずれかに &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラス。指定された &lt;code&gt;endMark&lt;/code&gt; が存在しない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="035516361da0b390a8068076aae888f97126f601" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enter()&lt;/code&gt; method is plumbing used by the &lt;code&gt;run()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;intercept()&lt;/code&gt; methods to set the active domain. It sets &lt;code&gt;domain.active&lt;/code&gt; and &lt;code&gt;process.domain&lt;/code&gt; to the domain, and implicitly pushes the domain onto the domain stack managed by the domain module (see &lt;a href=&quot;#domain_domain_exit&quot;&gt;&lt;code&gt;domain.exit()&lt;/code&gt;&lt;/a&gt; for details on the domain stack). The call to &lt;code&gt;enter()&lt;/code&gt; delimits the beginning of a chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">&lt;code&gt;enter()&lt;/code&gt; メソッドは、で使用される配管である &lt;code&gt;run()&lt;/code&gt; 、 &lt;code&gt;bind()&lt;/code&gt; 、及び &lt;code&gt;intercept()&lt;/code&gt; 活性ドメインを設定する方法。 &lt;code&gt;domain.active&lt;/code&gt; と &lt;code&gt;process.domain&lt;/code&gt; をドメインに設定し、ドメインをドメインモジュールが管理するドメインスタックに暗黙的にプッシュします（ドメインスタックの詳細については&lt;a href=&quot;#domain_domain_exit&quot;&gt; &lt;code&gt;domain.exit()&lt;/code&gt; &lt;/a&gt;を参照）。呼び出し &lt;code&gt;enter()&lt;/code&gt; 非同期呼び出しとドメインに結合しているI / O操作のチェーンの始まりを区切ります。</target>
        </trans-unit>
        <trans-unit id="878c228a3891a931f577debd9834c0775a12f11d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entryType&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to &lt;code&gt;'http2'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; の &lt;code&gt;entryType&lt;/code&gt; プロパティは &lt;code&gt;'http2'&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="617453f3174a055bf920718631ceba8eb76b661c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eq&lt;/code&gt; parameter may now have a length of more than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eq&lt;/code&gt; パラメータは、今以上の長さを持っていることが &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64d6d95c1dd980f5b3c2e4b04d2297f9d27e6386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js Error Codes&lt;/a&gt; for details about specific codes.</source>
          <target state="translated">&lt;code&gt;error.code&lt;/code&gt; のプロパティには、エラーの種類を識別する文字列ラベルです。 &lt;code&gt;error.code&lt;/code&gt; は、エラーを識別する最も安定した方法です。Node.jsのメジャーバージョン間でのみ変更されます。対照的に、 &lt;code&gt;error.message&lt;/code&gt; 文字列はNode.jsのすべてのバージョン間で変更される可能性があります。参照してください&lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.jsのエラーコード&lt;/a&gt;の特定のコードの詳細については、を。</target>
        </trans-unit>
        <trans-unit id="3347ac748f1478e4103b2313fa99687bfbc5467a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js error codes&lt;/a&gt; for details about specific codes.</source>
          <target state="translated">The &lt;code&gt;error.code&lt;/code&gt; property is a string label that identifies the kind of error. &lt;code&gt;error.code&lt;/code&gt; is the most stable way to identify an error. It will only change between major versions of Node.js. In contrast, &lt;code&gt;error.message&lt;/code&gt; strings may change between any versions of Node.js. See &lt;a href=&quot;#nodejs-error-codes&quot;&gt;Node.js error codes&lt;/a&gt; for details about specific codes.</target>
        </trans-unit>
        <trans-unit id="3da77ca9b7d80cdbbc4b9941df09bb518dfe59ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.code&lt;/code&gt; property is a string representing the error code.</source>
          <target state="translated">&lt;code&gt;error.code&lt;/code&gt; のプロパティには、エラーコードを表す文字列です。</target>
        </trans-unit>
        <trans-unit id="0462a22edefc087f260f18509f515b9c274d6098" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.errno&lt;/code&gt; property is a negative number which corresponds to the error code defined in &lt;a href=&quot;https://docs.libuv.org/en/v1.x/errors.html&quot;&gt;&lt;code&gt;libuv Error handling&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;error.errno&lt;/code&gt; property is a negative number which corresponds to the error code defined in &lt;a href=&quot;https://docs.libuv.org/en/v1.x/errors.html&quot;&gt; &lt;code&gt;libuv Error handling&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c17e79c636fe0fafffb682716e2b3876c8f191fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.errno&lt;/code&gt; property is a number or a string. If it is a number, it is a negative value which corresponds to the error code defined in &lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt;&lt;code&gt;libuv Error handling&lt;/code&gt;&lt;/a&gt;. See the libuv &lt;code&gt;errno.h&lt;/code&gt; header file (&lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; in the Node.js source tree) for details. In case of a string, it is the same as &lt;code&gt;error.code&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error.errno&lt;/code&gt; のプロパティには、数値または文字列です。数値の場合は、&lt;a href=&quot;http://docs.libuv.org/en/v1.x/errors.html&quot;&gt; &lt;code&gt;libuv Error handling&lt;/code&gt; &lt;/a&gt;定義されたエラーコードに対応する負の値です。詳細については、libuv &lt;code&gt;errno.h&lt;/code&gt; ヘッダーファイル（Node.jsソースツリーの &lt;code&gt;deps/uv/include/uv/errno.h&lt;/code&gt; ）を参照してください。文字列の場合、 &lt;code&gt;error.code&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="c80fb4345ad46d4df0a661a74199f2ed642ab2a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.message&lt;/code&gt; property is the string description of the error as set by calling &lt;code&gt;new Error(message)&lt;/code&gt;. The &lt;code&gt;message&lt;/code&gt; passed to the constructor will also appear in the first line of the stack trace of the &lt;code&gt;Error&lt;/code&gt;, however changing this property after the &lt;code&gt;Error&lt;/code&gt; object is created &lt;em&gt;may not&lt;/em&gt; change the first line of the stack trace (for example, when &lt;code&gt;error.stack&lt;/code&gt; is read before this property is changed).</source>
          <target state="translated">&lt;code&gt;error.message&lt;/code&gt; プロパティを呼び出すことにより、セットとして、エラーの内容を文字列である &lt;code&gt;new Error(message)&lt;/code&gt; 。 &lt;code&gt;message&lt;/code&gt; コンストラクタに渡されたものスタックトレースの1行目に表示されます &lt;code&gt;Error&lt;/code&gt; が後にこのプロパティを変更し、 &lt;code&gt;Error&lt;/code&gt; オブジェクトが作成されることは&lt;em&gt;ないかもしれない&lt;/em&gt;とき、例えばスタックトレース（の最初の行を変更 &lt;code&gt;error.stack&lt;/code&gt; がありますこのプロパティが変更される前にお読みください）。</target>
        </trans-unit>
        <trans-unit id="25a415e8d164701e31d0b96126983bc43065fc68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.stack&lt;/code&gt; property is a string describing the point in the code at which the &lt;code&gt;Error&lt;/code&gt; was instantiated.</source>
          <target state="translated">&lt;code&gt;error.stack&lt;/code&gt; のプロパティはれるコード内のポイントを説明する文字列で &lt;code&gt;Error&lt;/code&gt; インスタンス化されました。</target>
        </trans-unit>
        <trans-unit id="d5acdef4005210a3526de3c7d5bda753b7e60335" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</source>
          <target state="translated">&lt;code&gt;error.syscall&lt;/code&gt; プロパティが記述した文字列である&lt;a href=&quot;http://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;システムコール&lt;/a&gt;に失敗しました。</target>
        </trans-unit>
        <trans-unit id="92c008a2e253d549202ad3115de62d2c095ae034" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;https://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</source>
          <target state="translated">The &lt;code&gt;error.syscall&lt;/code&gt; property is a string describing the &lt;a href=&quot;https://man7.org/linux/man-pages/man2/syscalls.2.html&quot;&gt;syscall&lt;/a&gt; that failed.</target>
        </trans-unit>
        <trans-unit id="a80d7026184c56cb488e8de9fb1edb33c83fa941" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can be an object containing regular expressions now.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは現在、正規表現を含むオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="23ad1e5536984136751e24c5beb50e064c8e1314" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an arrow function.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは現在、矢印関数とすることができます。</target>
        </trans-unit>
        <trans-unit id="b920ead4094b0b12297c0fe4c240d5ed11034b0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error&lt;/code&gt; parameter can now be an object as well.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; パラメータは、今だけでなく、オブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="2075e684d8f10b167c2b70e099103394abc86151" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. It is important to keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</source>
          <target state="translated">&lt;code&gt;eventEmitter.emit()&lt;/code&gt; メソッドは、引数の任意のセットは、リスナー関数に渡すことを可能にします。通常のリスナー関数が呼び出されると、標準の &lt;code&gt;this&lt;/code&gt; キーワードが意図的に設定され、リスナーが接続されている &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスを参照することに注意してください。</target>
        </trans-unit>
        <trans-unit id="2308aa877b07598c8f4935e760a6b13fc0fd2a7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. Keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</source>
          <target state="translated">The &lt;code&gt;eventEmitter.emit()&lt;/code&gt; method allows an arbitrary set of arguments to be passed to the listener functions. Keep in mind that when an ordinary listener function is called, the standard &lt;code&gt;this&lt;/code&gt; keyword is intentionally set to reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance to which the listener is attached.</target>
        </trans-unit>
        <trans-unit id="10b4cc0c849e2b447d9e9c4341c672b5def6630a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventLoopUtilization()&lt;/code&gt; method returns an object that contains the cumulative duration of time the event loop has been both idle and active as a high resolution milliseconds timer. The &lt;code&gt;utilization&lt;/code&gt; value is the calculated Event Loop Utilization (ELU).</source>
          <target state="translated">&lt;code&gt;eventLoopUtilization()&lt;/code&gt; メソッドは、イベントループは、高分解能ミリ秒タイマーの両方アイドル状態とアクティブであった時間の累積時間を含むオブジェクトを返します。 &lt;code&gt;utilization&lt;/code&gt; 価値が算出したイベントループの利用（ELU）です。</target>
        </trans-unit>
        <trans-unit id="21c566d2f82267df390f7fd5efa6c966214afa01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventLoopUtilization()&lt;/code&gt; method returns an object that contains the cumulative duration of time the event loop has been both idle and active as a high resolution milliseconds timer. The &lt;code&gt;utilization&lt;/code&gt; value is the calculated Event Loop Utilization (ELU). If bootstrapping has not yet finished, the properties have the value of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;eventLoopUtilization()&lt;/code&gt; method returns an object that contains the cumulative duration of time the event loop has been both idle and active as a high resolution milliseconds timer. The &lt;code&gt;utilization&lt;/code&gt; value is the calculated Event Loop Utilization (ELU). If bootstrapping has not yet finished, the properties have the value of &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fd11c7fea7eabceaea846d7b9ea1f99d450ca58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execArgv&lt;/code&gt; option passed to the &lt;code&gt;Worker&lt;/code&gt; constructor contains invalid flags.</source>
          <target state="translated">&lt;code&gt;execArgv&lt;/code&gt; のに渡されたオプション &lt;code&gt;Worker&lt;/code&gt; コンストラクタは無効なフラグが含まれています。</target>
        </trans-unit>
        <trans-unit id="e789f0770a175e554087330639eaebd93b4880ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;complete&lt;/code&gt; callbacks are functions that will be invoked when the executor is ready to execute and when it completes its task respectively.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; および &lt;code&gt;complete&lt;/code&gt; コールバックは、それは、それぞれのタスクを完了したときにexecutorが実行する準備ができたときに呼び出されます関数です。</target>
        </trans-unit>
        <trans-unit id="0d3d4486e4b536fc372bcf42a2a03816737fda87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in &lt;code&gt;complete&lt;/code&gt; callback instead. Avoid using the &lt;code&gt;napi_env&lt;/code&gt; parameter in the execute callback as it will likely execute JavaScript.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 機能では、JavaScriptの実行またはJavaScriptオブジェクトとの相互作用が生じる可能性が任意のN-APIの呼び出しを行うことは避けてください。ほとんどの場合、N-API呼び出しを行う必要があるコードは、代わりに &lt;code&gt;complete&lt;/code&gt; コールバックで行う必要があります。JavaScriptを実行する可能性が高いため、実行コールバックで &lt;code&gt;napi_env&lt;/code&gt; パラメータを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6d9348413b98a81a0cf3dd07ab0db2e379200c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;existingPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;existingPath&lt;/code&gt; と &lt;code&gt;newPath&lt;/code&gt; パラメータはWHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="77a9639aa0f385798a0047ae8b69bbc802072163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit()&lt;/code&gt; method exits the current domain, popping it off the domain stack. Any time execution is going to switch to the context of a different chain of asynchronous calls, it's important to ensure that the current domain is exited. The call to &lt;code&gt;exit()&lt;/code&gt; delimits either the end of or an interruption to the chain of asynchronous calls and I/O operations bound to a domain.</source>
          <target state="translated">&lt;code&gt;exit()&lt;/code&gt; メソッドは、ドメインスタックからそれをポップ、現在のドメインを終了します。実行が非同期呼び出しの異なるチェーンのコンテキストに切り替わるときは常に、現在のドメインが終了していることを確認することが重要です。呼び出し &lt;code&gt;exit()&lt;/code&gt; 区切るのいずれかの終了または非同期呼び出しとドメインにバインドされたI / O操作のチェーンの中断。</target>
        </trans-unit>
        <trans-unit id="48733cf26ae9be875c167b92318f9677041ff285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exports&lt;/code&gt; variable is available within a module's file-level scope, and is assigned the value of &lt;code&gt;module.exports&lt;/code&gt; before the module is evaluated.</source>
          <target state="translated">&lt;code&gt;exports&lt;/code&gt; 変数は、モジュールのファイルレベルの範囲内で利用可能であり、値が割り当てられる &lt;code&gt;module.exports&lt;/code&gt; はをモジュールが評価される前に。</target>
        </trans-unit>
        <trans-unit id="3cb825d39461f7a30aee97a8f72859a5d7b95529" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fd&lt;/code&gt; option accepts FileHandle arguments.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; オプションは、ファイルハンドルの引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="a019ecd29494a1f2cd556e3b0b23499397ece231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fd&lt;/code&gt; option may now be a &lt;code&gt;FileHandle&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;fd&lt;/code&gt; option may now be a &lt;code&gt;FileHandle&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51b35ef516d7b399065983da2f4b540dd40099ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; name may be an absolute path. If it is not, the default directory it will be written to is controlled by the &lt;a href=&quot;#cli_diagnostic_dir_directory&quot;&gt;--diagnostic-dir&lt;/a&gt; command-line option.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 名は絶対パスかもしれません。そうでない場合、書き込まれるデフォルトのディレクトリは&lt;a href=&quot;#cli_diagnostic_dir_directory&quot;&gt;--diagnostic-dir&lt;/a&gt;コマンドラインオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="d4838da588ca8557b0914d534154a3d490886ef3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; パラメータは現在、ファイルディスクリプタすることができます。</target>
        </trans-unit>
        <trans-unit id="22d5077a20466a9b9f6e10fc0c1adc2b51f64e0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; argument may not be provided depending on operating system support. If &lt;code&gt;filename&lt;/code&gt; is provided, it will be provided as a &lt;code&gt;Buffer&lt;/code&gt; if &lt;code&gt;fs.watch()&lt;/code&gt; is called with its &lt;code&gt;encoding&lt;/code&gt; option set to &lt;code&gt;'buffer'&lt;/code&gt;, otherwise &lt;code&gt;filename&lt;/code&gt; will be a UTF-8 string.</source>
          <target state="translated">オペレーティングシステムのサポートによっては、 &lt;code&gt;filename&lt;/code&gt; 引数が提供されない場合があります。場合 &lt;code&gt;filename&lt;/code&gt; 提供され、それはのように提供される &lt;code&gt;Buffer&lt;/code&gt; 場合 &lt;code&gt;fs.watch()&lt;/code&gt; は、そのと呼ばれる &lt;code&gt;encoding&lt;/code&gt; のオプションセット &lt;code&gt;'buffer'&lt;/code&gt; 、そうでない場合 &lt;code&gt;filename&lt;/code&gt; UTF-8文字列です。</target>
        </trans-unit>
        <trans-unit id="12b0b8fb57adb3b3a4746de7a5c33c26c72ccaba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;data:&lt;/code&gt; protocol.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;data:&lt;/code&gt; プロトコル。</target>
        </trans-unit>
        <trans-unit id="89e439134337298aaf21a8ce9d0487c2f70d57d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。</target>
        </trans-unit>
        <trans-unit id="a28f201faddf9b917438ff36a93787eb3029e6b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filename&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="4a5de3e0e6bce547b220fb8ea3feb03044f739ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finishFlush&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;finishFlush&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="7868168ac9d0d259c982ac3e4dbc842aedac62cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finished(stream, cb)&lt;/code&gt; will wait for the &lt;code&gt;'close'&lt;/code&gt; event before invoking the callback. The implementation tries to detect legacy streams and only apply this behavior to streams which are expected to emit &lt;code&gt;'close'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;finished(stream, cb)&lt;/code&gt; 待機します &lt;code&gt;'close'&lt;/code&gt; コールバックを呼び出す前にイベント。実装はレガシーストリームを検出しようとし、この動作を &lt;code&gt;'close'&lt;/code&gt; を放出すると予想されるストリームにのみ適用します。</target>
        </trans-unit>
        <trans-unit id="2d229be81ffd2afb7635ff4b2f3c0698eb23aefb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finished&lt;/code&gt; API is promisify-able as well;</source>
          <target state="translated">&lt;code&gt;finished&lt;/code&gt; APIは、同様にpromisify-ことができます。</target>
        </trans-unit>
        <trans-unit id="c2c78b1a5c688435bd8184d070a826e8abc3d47e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finished&lt;/code&gt; API provides promise version:</source>
          <target state="translated">&lt;code&gt;finished&lt;/code&gt; APIは、約束のバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="706527d904b2fb4969305ef115835923a10d6a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is an integer that allows to specify dlopen behavior. See the &lt;a href=&quot;os#os_dlopen_constants&quot;&gt;&lt;code&gt;os.constants.dlopen&lt;/code&gt;&lt;/a&gt; documentation for details.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数はdlopenの動作を指定することを可能にする整数です。詳細については、&lt;a href=&quot;os#os_dlopen_constants&quot;&gt; &lt;code&gt;os.constants.dlopen&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="27367d1d92b5697db0227446413f596428537264" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flags&lt;/code&gt; argument is now optional and defaults to &lt;code&gt;'r'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 引数は、今までオプションで、デフォルトである &lt;code&gt;'r'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09526397e956ee47b394baf26977ccd216515483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is now only taken as such if it actually contains format specifiers.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 、それが実際に書式指定子が含まれている場合、引数は今だけなとしています。</target>
        </trans-unit>
        <trans-unit id="7bc8c5937b73a750bd5e5600d26b1093e5e39a91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt; or &lt;code&gt;'uncompressed'&lt;/code&gt;. If &lt;code&gt;format&lt;/code&gt; is not specified the point will be returned in &lt;code&gt;'uncompressed'&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数指定はコードポイントとすることができる &lt;code&gt;'compressed'&lt;/code&gt; または &lt;code&gt;'uncompressed'&lt;/code&gt; 。 &lt;code&gt;format&lt;/code&gt; が指定されていない場合、ポイントは &lt;code&gt;'uncompressed'&lt;/code&gt; 形式で返されます。</target>
        </trans-unit>
        <trans-unit id="97b07dd8ca3daf75d2585bd7953e09981f85d3b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument specifies point encoding and can be &lt;code&gt;'compressed'&lt;/code&gt; or &lt;code&gt;'uncompressed'&lt;/code&gt;. If &lt;code&gt;format&lt;/code&gt; is not specified, the point will be returned in &lt;code&gt;'uncompressed'&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数指定はコードポイントとすることができる &lt;code&gt;'compressed'&lt;/code&gt; または &lt;code&gt;'uncompressed'&lt;/code&gt; 。 &lt;code&gt;format&lt;/code&gt; が指定されていない場合、ポイントは &lt;code&gt;'uncompressed'&lt;/code&gt; 形式で返されます。</target>
        </trans-unit>
        <trans-unit id="512d1e9cf419c61f987590abd4eda55a0aaece8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.SyncWriteStream&lt;/code&gt; class was never intended to be a publicly accessible API and has been removed. No alternative API is available. Please use a userland alternative.</source>
          <target state="translated">&lt;code&gt;fs.SyncWriteStream&lt;/code&gt; のクラスでは、公的にアクセス可能なAPIであることを意図していなかった、削除されました。代替APIはありません。別のユーザーランドを使用してください。</target>
        </trans-unit>
        <trans-unit id="3b3969f60cc471802155198406af45024556947d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt;&lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator (&lt;code&gt;require('path').sep&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;fs.mkdtemp()&lt;/code&gt; メソッドは、直接6つのランダムに選択された文字を追加します &lt;code&gt;prefix&lt;/code&gt; 文字列。たとえば、ディレクトリ &lt;code&gt;/tmp&lt;/code&gt; を指定した場合、 &lt;code&gt;/tmp&lt;/code&gt; &lt;em&gt;内に&lt;/em&gt;一時ディレクトリを作成する場合、 &lt;code&gt;prefix&lt;/code&gt; はプラットフォーム固有のパス区切り文字で終了する &lt;code&gt;require('path').sep&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b43021409dbaf79c3301901e3b3cddb0257dfdc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.open()&lt;/code&gt; method is used to allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.</source>
          <target state="translated">&lt;code&gt;fs.open()&lt;/code&gt; メソッドは、新しいファイル記述子を割り当てるために使用されます。割り当てられると、ファイル記述子は、ファイルに関するデータの読み取り、書き込み、またはファイルに関する情報の要求に使用できます。</target>
        </trans-unit>
        <trans-unit id="93a78efbe82f94d41f8194ef7d95036b1c5ee7c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.promises&lt;/code&gt; API provides an alternative set of asynchronous file system methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('fs').promises&lt;/code&gt; or &lt;code&gt;require('fs/promises')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fs.promises&lt;/code&gt; のAPIが返す非同期ファイルシステム方法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには、 &lt;code&gt;require('fs').promises&lt;/code&gt; または &lt;code&gt;require('fs/promises')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="5050f06a70041a240f048ae3b245e2727e08d273" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.promises&lt;/code&gt; API provides an alternative set of asynchronous file system methods that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('fs').promises&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fs.promises&lt;/code&gt; の APIが返す非同期ファイルシステム方法の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには &lt;code&gt;require('fs').promises&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="69891f9554e4820439907262af47444c9b3b47fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.readFile()&lt;/code&gt; function buffers the entire file. To minimize memory costs, when possible prefer streaming via &lt;code&gt;fs.createReadStream()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fs.readFile()&lt;/code&gt; 関数は、ファイル全体をバッファします。メモリコストを最小限に抑えるために、可能な場合は &lt;code&gt;fs.createReadStream()&lt;/code&gt; によるストリーミングを優先します。</target>
        </trans-unit>
        <trans-unit id="71b074ffe9a2bdeb0c4bfd802e18206b5fbec371" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs.watch&lt;/code&gt; API is not 100% consistent across platforms, and is unavailable in some situations.</source>
          <target state="translated">&lt;code&gt;fs.watch&lt;/code&gt; の APIは、プラットフォーム間で100％一致していない、といくつかの状況では使用できません。</target>
        </trans-unit>
        <trans-unit id="d9ec7eb98a002dbd8e63c1eb68a8434c8cee12a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs&lt;/code&gt; module enables interacting with the file system in a way modeled on standard POSIX functions.</source>
          <target state="translated">&lt;code&gt;fs&lt;/code&gt; モジュールは、標準のPOSIX関数をモデルように、ファイルシステムとの相互作用が可能になります。</target>
        </trans-unit>
        <trans-unit id="d74ffda80caae1884220c03a1ff7a7eb0f46a69d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs&lt;/code&gt; module provides an API for interacting with the file system in a manner closely modeled around standard POSIX functions.</source>
          <target state="translated">&lt;code&gt;fs&lt;/code&gt; モジュール密接標準POSIX関数の周りモデル化された方法でファイルシステムと対話するためのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="ee1fda4211746114892f1a79cba5ddcbe2d3ae35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fs&lt;/code&gt; options allow overriding the used &lt;code&gt;fs&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;fs&lt;/code&gt; オプションは使用オーバーライドできるように &lt;code&gt;fs&lt;/code&gt; 実施を。</target>
        </trans-unit>
        <trans-unit id="bbd0e2e565c661b9a3e00926ebd169d183ba557f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; method will append the six randomly selected characters directly to the &lt;code&gt;prefix&lt;/code&gt; string. For instance, given a directory &lt;code&gt;/tmp&lt;/code&gt;, if the intention is to create a temporary directory &lt;em&gt;within&lt;/em&gt;&lt;code&gt;/tmp&lt;/code&gt;, the &lt;code&gt;prefix&lt;/code&gt; must end with a trailing platform-specific path separator (&lt;code&gt;require('path').sep&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;fsPromises.mkdtemp()&lt;/code&gt; メソッドは、直接6つのランダムに選択された文字を追加します &lt;code&gt;prefix&lt;/code&gt; 文字列。たとえば、ディレクトリ &lt;code&gt;/tmp&lt;/code&gt; を指定した場合、 &lt;code&gt;/tmp&lt;/code&gt; &lt;em&gt;内に&lt;/em&gt;一時ディレクトリを作成する場合、 &lt;code&gt;prefix&lt;/code&gt; はプラットフォーム固有のパス区切り文字で終了する &lt;code&gt;require('path').sep&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e6bed20438607157322dcd80d8999ccaf445c93a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generateKeyPair&lt;/code&gt; and &lt;code&gt;generateKeyPairSync&lt;/code&gt; functions now produce key objects if no encoding was specified.</source>
          <target state="translated">&lt;code&gt;generateKeyPair&lt;/code&gt; と &lt;code&gt;generateKeyPairSync&lt;/code&gt; エンコーディングが指定されていない場合の機能は現在、主要なオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="cf3b6cd25ee8891e4d83936876a193907e6a7ee6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;generator&lt;/code&gt; argument can be a number, string, or &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;generator&lt;/code&gt; is not specified, the value &lt;code&gt;2&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;generator&lt;/code&gt; 引数は、数値、文字列、またはことができる&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;generator&lt;/code&gt; が指定されていない場合、値 &lt;code&gt;2&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="1ae19dca3489b857be7aed718993101b305d3ecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFormat&lt;/code&gt; hook provides a way to define a custom method of determining how a URL should be interpreted. The &lt;code&gt;format&lt;/code&gt; returned also affects what the acceptable forms of source values are for a module when parsing. This can be one of the following:</source>
          <target state="translated">&lt;code&gt;getFormat&lt;/code&gt; ののフックは、URLがどのように解釈すべきかを決定するためのカスタムメソッドを定義する方法を提供します。返される形式は、解析時にモジュールで受け入れ可能なソース値の &lt;code&gt;format&lt;/code&gt; にも影響します。これは、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="fdf26db5e44d2bf3693adecdd724efd4cf8ca259" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getSource&lt;/code&gt; hook provides a way to define a custom method for retrieving the source code of an ES module specifier. This would allow a loader to potentially avoid reading files from disk.</source>
          <target state="translated">&lt;code&gt;getSource&lt;/code&gt; フックは、ESモジュール指定子のソースコードを取得するためのカスタムメソッドを定義する方法を提供します。これにより、ローダーはディスクからのファイルの読み取りを回避できる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7fb03f9df2774a668f92936850f17f31a33d9c3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getters&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;getters&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="ec71fda64a4b5243ce97e0ee30af7989a6dd5db0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;groupIndentation&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;groupIndentation&lt;/code&gt; のオプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="c414c011c27eaa196a1f2f35222b45256f28f22a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;groups&lt;/code&gt; array can contain numeric group IDs, group names or both.</source>
          <target state="translated">&lt;code&gt;groups&lt;/code&gt; 配列は、数値のグループID、グループ名、またはその両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="01bdcfcc07700df8efd655d5667214a5885941a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;groups&lt;/code&gt; array can contain numeric group IDs, group names, or both.</source>
          <target state="translated">&lt;code&gt;groups&lt;/code&gt; 配列は、数値のグループID、グループ名、またはその両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="3a833b425252dc97918bfb21e6854a976c340208" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; object can be either a server, a socket (anything with an underlying &lt;code&gt;_handle&lt;/code&gt; member), or an object with an &lt;code&gt;fd&lt;/code&gt; member that is a valid file descriptor.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; オブジェクトは、サーバー、ソケット（基礎となると何のいずれかになります &lt;code&gt;_handle&lt;/code&gt; メンバー）、または持つオブジェクト &lt;code&gt;fd&lt;/code&gt; 有効なファイルディスクリプタであるメンバー。</target>
        </trans-unit>
        <trans-unit id="5fe58b45e79c330bacba8ef6c3d083eec4ad1d42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hash&lt;/code&gt; property is the fragment identifier portion of the URL including the leading &lt;code&gt;#&lt;/code&gt; character.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; プロパティは、大手を含むURLのフラグメント識別子部分である &lt;code&gt;#&lt;/code&gt; の文字。</target>
        </trans-unit>
        <trans-unit id="d6a5ef2a6839d66d97bfcb9605bd0e58653ccf0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;highWaterMark&lt;/code&gt; option is a threshold, not a limit: it dictates the amount of data that a stream buffers before it stops asking for more data. It does not enforce a strict memory limitation in general. Specific stream implementations may choose to enforce stricter limits but doing so is optional.</source>
          <target state="translated">&lt;code&gt;highWaterMark&lt;/code&gt; オプションは、しきい値、ない限度である：それはより多くのデータを求めて停止する前に、ストリームバッファするデータの量を指示します。一般に、厳密なメモリ制限は適用されません。特定のストリーム実装では、より厳しい制限を適用することを選択できますが、そうすることはオプションです。</target>
        </trans-unit>
        <trans-unit id="5c10328089857a8b0b5ef7ea9d5e3db38eee808d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;highWaterMark&lt;/code&gt; option is accepted now.</source>
          <target state="translated">&lt;code&gt;highWaterMark&lt;/code&gt; オプションは、現在受け入れられています。</target>
        </trans-unit>
        <trans-unit id="9b971a2c3fa7c4ee351bc0962b6dd290b13d2a41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option defaults to &lt;code&gt;0&lt;/code&gt; in all cases now. Previously, in the absence of the &lt;code&gt;family&lt;/code&gt; option it would default to &lt;code&gt;dns.ADDRCONFIG | dns.V4MAPPED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; にオプションのデフォルトは &lt;code&gt;0&lt;/code&gt; になりましたすべてのケースで。以前は、 &lt;code&gt;family&lt;/code&gt; オプションがない場合、デフォルトで &lt;code&gt;dns.ADDRCONFIG | dns.V4MAPPED&lt;/code&gt; 設定されていました。dns.V4MAPPED。</target>
        </trans-unit>
        <trans-unit id="18653303895ce097a5504ae43d5170d72df3c34a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="053e6bd05fa0fbb307a5d54eb6487d94b8a85e2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hints&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;hints&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="04278f1b07d014dfdc021e46e970ec2ad3bb52d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;historySize&lt;/code&gt; option can be &lt;code&gt;0&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;historySize&lt;/code&gt; のオプションが可能 &lt;code&gt;0&lt;/code&gt; になりました。</target>
        </trans-unit>
        <trans-unit id="bd637527f354d50e0755926a886a0e485028e79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; parameter is supported now.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; パラメータがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="2749f6daae838de15678cf4dd488bcb1358def17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; property is the full lower-cased host portion of the URL, including the &lt;code&gt;port&lt;/code&gt; if specified.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; プロパティには、URLの完全な、小文字のホスト部分である &lt;code&gt;port&lt;/code&gt; を指定した場合。</target>
        </trans-unit>
        <trans-unit id="6c0c38e22555230472f06d34eb68eaf5ce24d077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; property is the lower-cased host name portion of the &lt;code&gt;host&lt;/code&gt; component &lt;em&gt;without&lt;/em&gt; the &lt;code&gt;port&lt;/code&gt; included.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; プロパティは、下部外装ホスト名部分である &lt;code&gt;host&lt;/code&gt; コンポーネント&lt;em&gt;なし&lt;/em&gt; &lt;code&gt;port&lt;/code&gt; 含ま。</target>
        </trans-unit>
        <trans-unit id="998060cae450269301b689074185c6d9c3eb67ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;href&lt;/code&gt; property is the full URL string that was parsed with both the &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; components converted to lower-case.</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; プロパティは両方と解析された完全なURL文字列である &lt;code&gt;protocol&lt;/code&gt; と &lt;code&gt;host&lt;/code&gt; 構成要素は、小文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="030f78ddaf21d184576156325eba98bebd2bd148" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2.getDefaultSettings()&lt;/code&gt;, &lt;code&gt;http2.getPackedSettings()&lt;/code&gt;, &lt;code&gt;http2.createServer()&lt;/code&gt;, &lt;code&gt;http2.createSecureServer()&lt;/code&gt;, &lt;code&gt;http2session.settings()&lt;/code&gt;, &lt;code&gt;http2session.localSettings&lt;/code&gt;, and &lt;code&gt;http2session.remoteSettings&lt;/code&gt; APIs either return or receive as input an object that defines configuration settings for an &lt;code&gt;Http2Session&lt;/code&gt; object. These objects are ordinary JavaScript objects containing the following properties.</source>
          <target state="translated">&lt;code&gt;http2.getDefaultSettings()&lt;/code&gt; 、 &lt;code&gt;http2.getPackedSettings()&lt;/code&gt; 、 &lt;code&gt;http2.createServer()&lt;/code&gt; 、 &lt;code&gt;http2.createSecureServer()&lt;/code&gt; 、 &lt;code&gt;http2session.settings()&lt;/code&gt; 、 &lt;code&gt;http2session.localSettings&lt;/code&gt; 、及び &lt;code&gt;http2session.remoteSettings&lt;/code&gt; のAPIリターンいずれかまたは入力として定義するオブジェクトを受け取ります &lt;code&gt;Http2Session&lt;/code&gt; オブジェクトの構成設定。これらのオブジェクトは、次のプロパティを含む通常のJavaScriptオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="49f7803f945b28f0689831e69895b549945bf369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2&lt;/code&gt; Core API is much more symmetric between client and server than the &lt;code&gt;http&lt;/code&gt; API. For instance, most events, like &lt;code&gt;'error'&lt;/code&gt;, &lt;code&gt;'connect'&lt;/code&gt; and &lt;code&gt;'stream'&lt;/code&gt;, can be emitted either by client-side code or server-side code.</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; コアAPIは、はるかに対称性よりも、クライアントとサーバの間で &lt;code&gt;http&lt;/code&gt; API。たとえば、 &lt;code&gt;'error'&lt;/code&gt; 、 &lt;code&gt;'connect'&lt;/code&gt; 、 &lt;code&gt;'stream'&lt;/code&gt; などのほとんどのイベントは、クライアント側コードまたはサーバー側コードのいずれかによって発行できます。</target>
        </trans-unit>
        <trans-unit id="17b1e503059e1af4f65e309d49229e66e8fc0e50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2&lt;/code&gt; module provides an implementation of the &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP/2&lt;/a&gt; protocol. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; モジュールのインプリメンテーションを提供&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP / 2&lt;/a&gt;プロトコル。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="221ef6633a5b5159ca7a2ec64108549b9b1ee05c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2session.type&lt;/code&gt; will be equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_SERVER&lt;/code&gt; if this &lt;code&gt;Http2Session&lt;/code&gt; instance is a server, and &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; if the instance is a client.</source>
          <target state="translated">&lt;code&gt;http2session.type&lt;/code&gt; は等しくなります &lt;code&gt;http2.constants.NGHTTP2_SESSION_SERVER&lt;/code&gt; この場合 &lt;code&gt;Http2Session&lt;/code&gt; のインスタンスがサーバである、と &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; インスタンスがクライアントである場合。</target>
        </trans-unit>
        <trans-unit id="2f82b25069cfbe280ebd5033cdd008448d966cd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.close()&lt;/code&gt; method is called, and (for client streams only) pending data has been read.</source>
          <target state="translated">&lt;code&gt;http2stream.close()&lt;/code&gt; メソッドが呼び出され、保留中のデータ（クライアントのみをストリームするために）読み込まれました。</target>
        </trans-unit>
        <trans-unit id="de2ccc067c77f440a48986ade62790f284e7b4db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.close()&lt;/code&gt; method is called, and pending data has been read.</source>
          <target state="translated">&lt;code&gt;http2stream.close()&lt;/code&gt; メソッドが呼び出され、保留中のデータが読み込まれました。</target>
        </trans-unit>
        <trans-unit id="77560b2b0d8bbfb538a8a3ebe0e37ff202a3f8fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.destroy()&lt;/code&gt; or &lt;code&gt;http2session.destroy()&lt;/code&gt; methods are called.</source>
          <target state="translated">&lt;code&gt;http2stream.destroy()&lt;/code&gt; または &lt;code&gt;http2session.destroy()&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c91e96a400ed5b707a5db055d844cc0bc3b12ca9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.pushStream()&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;http2stream.pushStream()&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c24866f2679c9a1b2b7618cf886b9fc0b058641d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; method cannot be called until after the &lt;code&gt;'wantTrailers'&lt;/code&gt; event is emitted on an &lt;code&gt;Http2Stream&lt;/code&gt; object. The &lt;code&gt;'wantTrailers'&lt;/code&gt; event will only be emitted if the &lt;code&gt;waitForTrailers&lt;/code&gt; option is set for the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;http2stream.sendTrailers()&lt;/code&gt; メソッドが完了するまで呼び出すことはできません &lt;code&gt;'wantTrailers'&lt;/code&gt; イベントが上に放出される &lt;code&gt;Http2Stream&lt;/code&gt; オブジェクト。 &lt;code&gt;'wantTrailers'&lt;/code&gt; 場合、イベントにのみ放出される &lt;code&gt;waitForTrailers&lt;/code&gt; のオプションが設定されている &lt;code&gt;Http2Stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="358c32f4bc69cf40fd7e6290a30048c00cc82993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; and &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; properties are deprecated. Use one of the public methods (e.g. &lt;code&gt;OutgoingMessage.prototype.getHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.getHeaders()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.getHeaderNames()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.hasHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.removeHeader()&lt;/code&gt;, &lt;code&gt;OutgoingMessage.prototype.setHeader()&lt;/code&gt;) for working with outgoing headers.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; モジュール &lt;code&gt;OutgoingMessage.prototype._headers&lt;/code&gt; と &lt;code&gt;OutgoingMessage.prototype._headerNames&lt;/code&gt; プロパティが廃止されました。パブリックメソッドの1つを使用します（例： &lt;code&gt;OutgoingMessage.prototype.getHeader()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.getHeaders()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.getHeaderNames()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.hasHeader()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.removeHeader()&lt;/code&gt; 、 &lt;code&gt;OutgoingMessage.prototype.setHeader()&lt;/code&gt; ）。発信ヘッダーを操作します。</target>
        </trans-unit>
        <trans-unit id="637eb8d39fd696e261d53ed71950da5b93479796" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;OutgoingMessage.prototype._renderHeaders()&lt;/code&gt; API is deprecated.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; モジュール &lt;code&gt;OutgoingMessage.prototype._renderHeaders()&lt;/code&gt; APIは推奨されません。</target>
        </trans-unit>
        <trans-unit id="646d914a75a6436a127ce9860c30e69de08491ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;http&lt;/code&gt; module &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; API is deprecated. Please use &lt;code&gt;ServerResponse.prototype.writeHead()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;http&lt;/code&gt; モジュール &lt;code&gt;ServerResponse.prototype.writeHeader()&lt;/code&gt; APIは推奨されません。代わりに &lt;code&gt;ServerResponse.prototype.writeHead()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e7261c4b49ac7812caefc611e5afe4d784b89feb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;icu&lt;/code&gt; property is now supported.</source>
          <target state="translated">&lt;code&gt;icu&lt;/code&gt; プロパティがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="e7890dd47100cfd73eb85b14133b651e0037d68a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreErrors&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;ignoreErrors&lt;/code&gt; がのオプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="7b6b87e870bbcf1e3e09a2c0798fd7264f9dac40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; meta property is an &lt;code&gt;Object&lt;/code&gt; that contains the following properties.</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; メタプロパティがある &lt;code&gt;Object&lt;/code&gt; 次のプロパティが含まれています。</target>
        </trans-unit>
        <trans-unit id="4ac2e36d27344790e2460b7911af062bfb314225" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;import.meta&lt;/code&gt; metaproperty is an &lt;code&gt;Object&lt;/code&gt; that contains the following property:</source>
          <target state="translated">&lt;code&gt;import.meta&lt;/code&gt; のメタプロパティは、 &lt;code&gt;Object&lt;/code&gt; 次のプロパティが含まれています。</target>
        </trans-unit>
        <trans-unit id="be30e043253b78ef667131174c9fe723d6b6c3d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;importModuleDynamically&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;importModuleDynamically&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="49a0c2f363f6d983a8eada0b6fedc41926fc28c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; hook will trigger when an &lt;code&gt;AsyncResource&lt;/code&gt; is instantiated.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 時にフックがトリガーされます &lt;code&gt;AsyncResource&lt;/code&gt; がインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="db4a0b3a2e021f4bdfad5bc1d5a6e56641914872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; option can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; オプションが可能 &lt;code&gt;Uint8Array&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af5c3e4a87313354ccf9f4aa00c92f59b988d2c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; option can now be any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; オプションは任意のものとすることができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df7edb459abfc8207448861fb6d62addd3407892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream is not paused and receives the &lt;code&gt;'SIGCONT'&lt;/code&gt; event. (See events &lt;a href=&quot;readline#readline_event_sigtstp&quot;&gt;&lt;code&gt;'SIGTSTP'&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;readline#readline_event_sigcont&quot;&gt;&lt;code&gt;'SIGCONT'&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを一時停止し、受信されていない &lt;code&gt;'SIGCONT'&lt;/code&gt; イベントを。（イベント&lt;a href=&quot;readline#readline_event_sigtstp&quot;&gt; &lt;code&gt;'SIGTSTP'&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;readline#readline_event_sigcont&quot;&gt; &lt;code&gt;'SIGCONT'&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3ee5822dcfd304c76a5ffa2f5d4b728db3799dc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream is paused.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームが一時停止されています。</target>
        </trans-unit>
        <trans-unit id="fb8e3c4ceba2b1a1a118031d86693fb4060649ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを受け取り、</target>
        </trans-unit>
        <trans-unit id="2df9f73cfc483053aab32bfe5533e1a25c271a1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; to signal &lt;code&gt;SIGINT&lt;/code&gt; and there is no &lt;code&gt;'SIGINT'&lt;/code&gt; event listener registered on the &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを受信する &lt;code&gt;&amp;lt;ctrl&amp;gt;-C&lt;/code&gt; 知らせるために &lt;code&gt;SIGINT&lt;/code&gt; をなしある &lt;code&gt;'SIGINT'&lt;/code&gt; に登録されたイベントリスナー &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスが。</target>
        </trans-unit>
        <trans-unit id="19ffd24b7be2889cd9b67fc0e30774377bb486cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; to signal end-of-transmission (EOT);</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームを受信する &lt;code&gt;&amp;lt;ctrl&amp;gt;-D&lt;/code&gt; 信号にエンドオブトランスミッション（EOT）。</target>
        </trans-unit>
        <trans-unit id="fb307dffe6f05523d47993892fbcc5b1b86d93e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;input&lt;/code&gt; stream receives its &lt;code&gt;'end'&lt;/code&gt; event;</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; ストリームは、その受信 &lt;code&gt;'end'&lt;/code&gt; イベントを、</target>
        </trans-unit>
        <trans-unit id="d9dcd121be9fed632d90e0d0120632e710efcaba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;insecureHTTPParser&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;insecureHTTPParser&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d04877e5405a4dc1c1a71d8fe62cd536eaf0588e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspectOptions&lt;/code&gt; option is introduced.</source>
          <target state="translated">&lt;code&gt;inspectOptions&lt;/code&gt; オプションが導入されます。</target>
        </trans-unit>
        <trans-unit id="c8e3f99c777e534b0710502a380d35e942192366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspectPort&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;inspectPort&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f2a23f09be367ac5c32f81df1e0be355bca0f3ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector.Session&lt;/code&gt; is used for dispatching messages to the V8 inspector back-end and receiving message responses and notifications.</source>
          <target state="translated">&lt;code&gt;inspector.Session&lt;/code&gt; は V8インスペクタのバックエンドにメッセージをディスパッチし、メッセージ応答と通知を受信するために使用されています。</target>
        </trans-unit>
        <trans-unit id="1673d36b6d4ff5339c7cdf1c8ca2771a52789638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; is not active when &lt;code&gt;inspector.waitForDebugger()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; アクティブでないときである &lt;code&gt;inspector.waitForDebugger()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="8f150b7dcc586beef8809bc0c329c872df4c6450" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; module is not available for use.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールは使用できません。</target>
        </trans-unit>
        <trans-unit id="43c935ccd266c90668fafe79ecf59bfac32471dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspector&lt;/code&gt; module provides an API for interacting with the V8 inspector.</source>
          <target state="translated">&lt;code&gt;inspector&lt;/code&gt; モジュールは、V8インスペクタと対話するためのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="9a3568429cf6b04a52b84c92f6edb033b6d2d0fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ipv6Only&lt;/code&gt; option is supported.</source>
          <target state="translated">&lt;code&gt;ipv6Only&lt;/code&gt; のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="eabb45d71a6ceccea5ae6288c84a3112b1682ea5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;issuer&lt;/code&gt; can be &lt;code&gt;null&lt;/code&gt; if the certificate is either self-signed or the issuer is not in the root certificates list. (An issuer may be provided via the &lt;code&gt;ca&lt;/code&gt; option when establishing the TLS connection.)</source>
          <target state="translated">&lt;code&gt;issuer&lt;/code&gt; することができ &lt;code&gt;null&lt;/code&gt; 証明書がいずれかの自己署名されているか、発行者は、ルート証明書のリストにない場合。（発行者は、TLS接続の確立時に &lt;code&gt;ca&lt;/code&gt; オプションを介して提供される場合があります。）</target>
        </trans-unit>
        <trans-unit id="bfbc853b74447076da49fbe1f1ba5e8d12545de7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; argument must be a number set as high as possible. The higher the number of iterations, the more secure the derived key will be, but will take a longer amount of time to complete.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; 引数には、できるだけ高いとして設定された数でなければなりません。反復回数が多いほど、派生キーの安全性は高くなりますが、完了するまでの時間が長くなります。</target>
        </trans-unit>
        <trans-unit id="90727b5faa448f8510a7be780603c12933a26680" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; parameter is now restricted to positive values. Earlier releases treated other values as one.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; パラメータは、今や正の値に制限されています。以前のリリースでは、他の値が1つとして扱われていました。</target>
        </trans-unit>
        <trans-unit id="03868ecb29ac859681e14576c1131d0017356374" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iv&lt;/code&gt; parameter may now be &lt;code&gt;null&lt;/code&gt; for ciphers which do not need an initialization vector.</source>
          <target state="translated">&lt;code&gt;iv&lt;/code&gt; パラメータは今かもしれ &lt;code&gt;null&lt;/code&gt; 初期化ベクトルを必要としない暗号の。</target>
        </trans-unit>
        <trans-unit id="8921fa68940edce16e188119827079689fd8187d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a &lt;code&gt;KeyObject&lt;/code&gt; with type &lt;code&gt;private&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の引数は、今することができ &lt;code&gt;KeyObject&lt;/code&gt; タイプと &lt;code&gt;private&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cafd672d3c4665a35d1633dd54172928bcbe5641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a &lt;code&gt;KeyObject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の引数は、今することができ &lt;code&gt;KeyObject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f026eccc533fce80be766457d2fbda4c0a108025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; argument can now be a private key.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 引数は今、秘密鍵することができます。</target>
        </trans-unit>
        <trans-unit id="b9014c3f8163dbd4b28bba211ee7ff2c9d8473c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; is the HMAC key used to generate the cryptographic HMAC hash. If it is a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt;, its type must be &lt;code&gt;secret&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 暗号HMACハッシュを生成するために使用されるHMACキーです。&lt;a href=&quot;#crypto_class_keyobject&quot;&gt; &lt;code&gt;KeyObject&lt;/code&gt; の&lt;/a&gt;場合、その型は &lt;code&gt;secret&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="29ef7b348c30af429329ae739855eee669bfa054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; is the raw key used by the &lt;code&gt;algorithm&lt;/code&gt; and &lt;code&gt;iv&lt;/code&gt; is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;initialization vector&lt;/a&gt;. Both arguments must be &lt;code&gt;'utf8'&lt;/code&gt; encoded strings, &lt;a href=&quot;buffer&quot;&gt;Buffers&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;s. The &lt;code&gt;key&lt;/code&gt; may optionally be a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;secret&lt;/code&gt;. If the cipher does not need an initialization vector, &lt;code&gt;iv&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; で使用される生の鍵である &lt;code&gt;algorithm&lt;/code&gt; と &lt;code&gt;iv&lt;/code&gt; ある&lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;初期化ベクトル&lt;/a&gt;。両方の引数は、 &lt;code&gt;'utf8'&lt;/code&gt; エンコードされた文字列、&lt;a href=&quot;buffer&quot;&gt;Buffers&lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; でなければなりません。 &lt;code&gt;key&lt;/code&gt; 、必要に応じかもしれ&lt;a href=&quot;#crypto_class_keyobject&quot;&gt; &lt;code&gt;KeyObject&lt;/code&gt; &lt;/a&gt;型の &lt;code&gt;secret&lt;/code&gt; 。暗号が初期化ベクトルを必要としない場合、 &lt;code&gt;iv&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; になることがあります。</target>
        </trans-unit>
        <trans-unit id="ffae64256419dc0df3807dec38b1b90ed4b18d01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted on a &lt;code&gt;tls.TLSSocket&lt;/code&gt; when key material is generated or received by the socket. This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times, before or after the handshake completes.</source>
          <target state="translated">&lt;code&gt;keylog&lt;/code&gt; イベントが上に放出される &lt;code&gt;tls.TLSSocket&lt;/code&gt; 鍵材料がソケットによって生成または受信されたとき。このキー情報は、キャプチャされたTLSトラフィックを復号化できるため、デバッグ用に保存できます。ハンドシェイクが完了する前または後に、複数回発行される場合があります。</target>
        </trans-unit>
        <trans-unit id="bafa8e5f7656a13a7f0bf36422494a865effaa99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted on a client &lt;code&gt;tls.TLSSocket&lt;/code&gt; when key material is generated or received by the socket. This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times, before or after the handshake completes.</source>
          <target state="translated">&lt;code&gt;keylog&lt;/code&gt; イベントは、クライアントに照射さ &lt;code&gt;tls.TLSSocket&lt;/code&gt; 鍵材料がソケットによって生成または受信されたとき。このキー情報は、キャプチャされたTLSトラフィックを復号化できるため、デバッグ用に保存できます。ハンドシェイクの完了前または完了後に、複数回発行される場合があります。</target>
        </trans-unit>
        <trans-unit id="ea9db45705c688339caa3d459e3d3c8e44871ba4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted when key material is generated or received by a connection managed by this agent (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.</source>
          <target state="translated">&lt;code&gt;keylog&lt;/code&gt; 鍵材料を生成するか、このエージェントによって管理接続（ハンドシェイクが完了した一般的に前に、必ずしもそうではない）によって受信されたときにイベントが発せられます。このキー情報は、キャプチャされたTLSトラフィックを復号化できるため、デバッグ用に保存できます。ソケットごとに複数回発行される場合があります。</target>
        </trans-unit>
        <trans-unit id="1b5c9959237d932a1dd90e1d5e7ccd6afbcaa1bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keylog&lt;/code&gt; event is emitted when key material is generated or received by a connection to this server (typically before handshake has completed, but not necessarily). This keying material can be stored for debugging, as it allows captured TLS traffic to be decrypted. It may be emitted multiple times for each socket.</source>
          <target state="translated">&lt;code&gt;keylog&lt;/code&gt; 鍵材料は（典型的には、ハンドシェイクの前に完了するが、必ずしもた）このサーバに接続することによって生成または受信されたときにイベントが発せられます。このキー情報は、キャプチャされたTLSトラフィックを復号化できるため、デバッグ用に保存できます。ソケットごとに複数回発行される場合があります。</target>
        </trans-unit>
        <trans-unit id="8e25eb3ce4cc53afe7df92ff2547e9ea6c1abd85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; parameter can now be &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; パラメータは、今することができ &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8474fcae614a88cc1859b34f296796c04ff4a24b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; gets two arguments the current stat object and the previous stat object:</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 二つの引数、現在のstatオブジェクトと前回のstatオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="b95fd1fb410073e13c6931880070a9ae7e41ec9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0661e96f6a1fa8202e0885fe2e819d379f5b3c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; option is supported.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; オプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="a263c4d70f3c9893353d874e8b88eb6a65c7562d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lts&lt;/code&gt; property is now supported.</source>
          <target state="translated">&lt;code&gt;lts&lt;/code&gt; プロパティがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="b5b4dafcc9dd09a489be54c49427119ae4eacbe5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxArrayLength&lt;/code&gt; option is supported now; in particular, long arrays are truncated by default.</source>
          <target state="translated">&lt;code&gt;maxArrayLength&lt;/code&gt; のオプションがサポートされるようになりました。特に、長い配列はデフォルトで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="9f0e93d57c97db265be6481e8ebb1720a769436b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxBuffer&lt;/code&gt; option specifies the largest number of bytes allowed on &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;. If this value is exceeded, then the child process is terminated. This impacts output that includes multibyte character encodings such as UTF-8 or UTF-16. For instance, &lt;code&gt;console.log('中文测试')&lt;/code&gt; will send 13 UTF-8 encoded bytes to &lt;code&gt;stdout&lt;/code&gt; although there are only 4 characters.</source>
          <target state="translated">&lt;code&gt;maxBuffer&lt;/code&gt; のオプションは、上で許可されたバイトの最大数を指定する &lt;code&gt;stdout&lt;/code&gt; や &lt;code&gt;stderr&lt;/code&gt; 。この値を超えると、子プロセスは終了します。これは、UTF-8やUTF-16などのマルチバイト文字エンコーディングを含む出力に影響します。たとえば、 &lt;code&gt;console.log('中文测试')&lt;/code&gt; は、UTF-8でエンコードされた13バイトを &lt;code&gt;stdout&lt;/code&gt; に送信しますが、4文字しかありません。</target>
        </trans-unit>
        <trans-unit id="777a8058aaec2fa77d72d7ea901226343ec90dc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxBusyTries&lt;/code&gt; option is renamed to &lt;code&gt;maxRetries&lt;/code&gt;, and its default is 0. The &lt;code&gt;emfileWait&lt;/code&gt; option has been removed, and &lt;code&gt;EMFILE&lt;/code&gt; errors use the same retry logic as other errors. The &lt;code&gt;retryDelay&lt;/code&gt; option is now supported. &lt;code&gt;ENFILE&lt;/code&gt; errors are now retried.</source>
          <target state="translated">&lt;code&gt;maxBusyTries&lt;/code&gt; のオプションが名前に変更され &lt;code&gt;maxRetries&lt;/code&gt; 、およびそのデフォルトは0です。 &lt;code&gt;emfileWait&lt;/code&gt; のオプションが削除されている、と &lt;code&gt;EMFILE&lt;/code&gt; のエラーは、他のエラーと同じ再試行ロジックを使用します。 &lt;code&gt;retryDelay&lt;/code&gt; オプションがサポートされるようになりました。 &lt;code&gt;ENFILE&lt;/code&gt; エラーが再試行されるようになりました。</target>
        </trans-unit>
        <trans-unit id="3f0535deeb4f21170d9550e104412473144e2543" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxConcurrentStreams&lt;/code&gt; setting is stricter.</source>
          <target state="translated">&lt;code&gt;maxConcurrentStreams&lt;/code&gt; 設定が厳しいです。</target>
        </trans-unit>
        <trans-unit id="bdf828d79d9c65c3d2308f93d966b829b5353cb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxHeaderListSize&lt;/code&gt; setting is now strictly enforced.</source>
          <target state="translated">&lt;code&gt;maxHeaderListSize&lt;/code&gt; の設定は今厳密に施行されます。</target>
        </trans-unit>
        <trans-unit id="c9d886fcd6bcbaf154a3ff1eb88e25291077abc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxHeaderSize&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;maxHeaderSize&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a31f3b942b22d3b54f8a87d6e548aba16b310055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxOutputLength&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;maxOutputLength&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="75f636483863102d236aa183cb98ccabd798539a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxStringLength&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;maxStringLength&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="1a220a1dff3522aa6ba343896510506f310f7309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxmem&lt;/code&gt; value can now be any safe integer.</source>
          <target state="translated">&lt;code&gt;maxmem&lt;/code&gt; 値は現在、任意の安全な整数を指定できます。</target>
        </trans-unit>
        <trans-unit id="2910047a49f404706f3c278c96a92461ef2d5246" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message.aborted&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been aborted.</source>
          <target state="translated">&lt;code&gt;message.aborted&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 要求が中止された場合。</target>
        </trans-unit>
        <trans-unit id="c78b424a8fdbcfde8dcaaaf45220f24d0c8c92ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message.complete&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if a complete HTTP message has been received and successfully parsed.</source>
          <target state="translated">&lt;code&gt;message.complete&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 完全なHTTPメッセージを受信し、正常に解析されている場合。</target>
        </trans-unit>
        <trans-unit id="6ea2ab0f1116b6046fd1c04b56051fcdef1efe04" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; parameter is respected now.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; パラメータは現在、尊敬されています。</target>
        </trans-unit>
        <trans-unit id="60051271d5b27028c89593f10be4a20ea5f74ed0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;microtaskMode&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;microtaskMode&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="95cafa66742d9a54e282f1f89e2ac2a52f93ac10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minVersion&lt;/code&gt; and &lt;code&gt;maxVersion&lt;/code&gt; can be used to restrict the allowed TLS protocol versions.</source>
          <target state="translated">&lt;code&gt;minVersion&lt;/code&gt; と &lt;code&gt;maxVersion&lt;/code&gt; のは許容TLSプロトコルバージョンを制限するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="85196439ab75a01651afe6c358739c962e8b4142" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; argument used in both the &lt;code&gt;fs.chmod()&lt;/code&gt; and &lt;code&gt;fs.chmodSync()&lt;/code&gt; methods is a numeric bitmask created using a logical OR of the following constants:</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; の両方で使用される引数 &lt;code&gt;fs.chmod()&lt;/code&gt; と &lt;code&gt;fs.chmodSync()&lt;/code&gt; メソッドは、論理和、次の定数のを使用して作成された数値のビットマスクです。</target>
        </trans-unit>
        <trans-unit id="2ec0556bd164fb5f6f007e756d8a286bbf69595a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.exports&lt;/code&gt; object is created by the &lt;code&gt;Module&lt;/code&gt; system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to &lt;code&gt;module.exports&lt;/code&gt;. Assigning the desired object to &lt;code&gt;exports&lt;/code&gt; will simply rebind the local &lt;code&gt;exports&lt;/code&gt; variable, which is probably not what is desired.</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; はのオブジェクトがによって作成された &lt;code&gt;Module&lt;/code&gt; システム。これは許容できない場合があります。多くの人は、自分のモジュールをあるクラスのインスタンスにしたいと考えています。これを行うには、目的のエクスポートオブジェクトを &lt;code&gt;module.exports&lt;/code&gt; に割り当てます。 &lt;code&gt;exports&lt;/code&gt; 目的のオブジェクトを割り当てると、ローカルの &lt;code&gt;exports&lt;/code&gt; 変数が再バインドされますが、これはおそらく望ましいことではありません。</target>
        </trans-unit>
        <trans-unit id="7741269d9ec5a257707126dc0b6412895ee24cc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.exports&lt;/code&gt; property can be assigned a new value (such as a function or object).</source>
          <target state="translated">&lt;code&gt;module.exports&lt;/code&gt; はのプロパティは、（関数又はオブジェクトのような）新しい値を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="83b552f2fcab82083bd52fcea2777b5d1ccc766c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.require()&lt;/code&gt; method provides a way to load a module as if &lt;code&gt;require()&lt;/code&gt; was called from the original module.</source>
          <target state="translated">&lt;code&gt;module.require()&lt;/code&gt; メソッドがあるかのようにモジュールをロードする方法を提供 &lt;code&gt;require()&lt;/code&gt; 、元のモジュールから呼び出されました。</target>
        </trans-unit>
        <trans-unit id="9497a4255d80492c901cecc4e42691981c3ccd2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module.syncBuiltinESMExports()&lt;/code&gt; method updates all the live bindings for builtin &lt;a href=&quot;esm&quot;&gt;ES Modules&lt;/a&gt; to match the properties of the &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt; exports. It does not add or remove exported names from the &lt;a href=&quot;esm&quot;&gt;ES Modules&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;module.syncBuiltinESMExports()&lt;/code&gt; メソッドは、組み込みのためのすべてのライブバインディング更新&lt;a href=&quot;esm&quot;&gt;ESモジュール&lt;/a&gt;の特性を一致させるために&lt;a href=&quot;modules&quot;&gt;CommonJSの&lt;/a&gt;輸出を。&lt;a href=&quot;esm&quot;&gt;ESモジュール&lt;/a&gt;からエクスポートされた名前を追加または削除しません。</target>
        </trans-unit>
        <trans-unit id="0c2cea094d99b8a6b21113410956face81228b7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="7e7a0f9b045b1ebc95a32e313c720c988b31f8ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; objects that the implementor can use to export values from the module.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; と &lt;code&gt;exports&lt;/code&gt; 実装モジュールから値をエクスポートするのに使用できるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="950f4b9151297ef36f9e4a02428f0848aa3edf9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="a7d0cfde8c11c32a565d5356d3d6a5250d5da0da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module_name&lt;/code&gt; must match the filename of the final binary (excluding the &lt;code&gt;.node&lt;/code&gt; suffix).</source>
          <target state="translated">&lt;code&gt;module_name&lt;/code&gt; （除く、最終的なバイナリのファイル名と一致する必要があります &lt;code&gt;.node&lt;/code&gt; ファイルのサフィックスを）。</target>
        </trans-unit>
        <trans-unit id="4327ee27361cd2e73d674b05a8d012bb50878667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; argument contains the message to be sent. Depending on its type, different behavior can apply. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;Uint8Array&lt;/code&gt;, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; specify the offset within the &lt;code&gt;Buffer&lt;/code&gt; where the message begins and the number of bytes in the message, respectively. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;, then it is automatically converted to a &lt;code&gt;Buffer&lt;/code&gt; with &lt;code&gt;'utf8'&lt;/code&gt; encoding. With messages that contain multi-byte characters, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; will be calculated with respect to &lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;byte length&lt;/a&gt; and not the character position. If &lt;code&gt;msg&lt;/code&gt; is an array, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; must not be specified.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 引数には、送信するメッセージが含まれています。そのタイプに応じて、異なる動作が適用される可能性があります。場合 &lt;code&gt;msg&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; 又は &lt;code&gt;Uint8Array&lt;/code&gt; 、 &lt;code&gt;offset&lt;/code&gt; および &lt;code&gt;length&lt;/code&gt; 内のオフセットを指定 &lt;code&gt;Buffer&lt;/code&gt; メッセージが開始され、それぞれのメッセージのバイト数を、。場合 &lt;code&gt;msg&lt;/code&gt; ある &lt;code&gt;String&lt;/code&gt; 、それは自動的に変換され、 &lt;code&gt;Buffer&lt;/code&gt; と &lt;code&gt;'utf8'&lt;/code&gt; エンコーディング。マルチバイト文字を含むメッセージの場合、 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; は&lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;バイト長&lt;/a&gt;に関して計算されます文字の位置ではありません。 &lt;code&gt;msg&lt;/code&gt; が配列の場合、 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; 指定してはなりません。</target>
        </trans-unit>
        <trans-unit id="ac1a0ce71c5f294aa9b599d59c4a46537a806e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; argument contains the message to be sent. Depending on its type, different behavior can apply. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt;, any &lt;code&gt;TypedArray&lt;/code&gt; or a &lt;code&gt;DataView&lt;/code&gt;, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; specify the offset within the &lt;code&gt;Buffer&lt;/code&gt; where the message begins and the number of bytes in the message, respectively. If &lt;code&gt;msg&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;, then it is automatically converted to a &lt;code&gt;Buffer&lt;/code&gt; with &lt;code&gt;'utf8'&lt;/code&gt; encoding. With messages that contain multi-byte characters, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; will be calculated with respect to &lt;a href=&quot;buffer#buffer_static_method_buffer_bytelength_string_encoding&quot;&gt;byte length&lt;/a&gt; and not the character position. If &lt;code&gt;msg&lt;/code&gt; is an array, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; must not be specified.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 引数には、送信するメッセージが含まれています。そのタイプに応じて、異なる動作が適用される可能性があります。場合 &lt;code&gt;msg&lt;/code&gt; ある &lt;code&gt;Buffer&lt;/code&gt; 、任意 &lt;code&gt;TypedArray&lt;/code&gt; または &lt;code&gt;DataView&lt;/code&gt; 、 &lt;code&gt;offset&lt;/code&gt; および &lt;code&gt;length&lt;/code&gt; 内のオフセットを指定 &lt;code&gt;Buffer&lt;/code&gt; メッセージが開始され、それぞれのメッセージのバイト数を、。 &lt;code&gt;msg&lt;/code&gt; が &lt;code&gt;String&lt;/code&gt; 場合、 &lt;code&gt;'utf8'&lt;/code&gt; エンコーディングの &lt;code&gt;Buffer&lt;/code&gt; 自動的に変換されます。マルチバイト文字を含むメッセージの場合、 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; は以下に関して計算されます。&lt;a href=&quot;buffer#buffer_static_method_buffer_bytelength_string_encoding&quot;&gt;&lt;/a&gt;文字位置ではなくバイト長。 &lt;code&gt;msg&lt;/code&gt; が配列の場合、 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;length&lt;/code&gt; 指定しないでください。</target>
        </trans-unit>
        <trans-unit id="2075a60413e8276b59620a4d198fc1c48b94d2fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can be an &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; パラメータができ &lt;code&gt;Uint8Array&lt;/code&gt; 今。</target>
        </trans-unit>
        <trans-unit id="0d6ec7207b4873c92fc17dd896ab5164bb27bddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can be an array now. Also, the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are optional now.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; パラメータは現在、配列にすることができます。また、 &lt;code&gt;offset&lt;/code&gt; パラメータと &lt;code&gt;length&lt;/code&gt; パラメータはオプションになりました。</target>
        </trans-unit>
        <trans-unit id="f81df58e30c72b4b85bdc7fa25f3366ddd071815" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; パラメータは今どんなことができる &lt;code&gt;TypedArray&lt;/code&gt; か &lt;code&gt;DataView&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ce94e146f1bee23f4a19a2c9729e94ce4ff608c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; property of the &lt;code&gt;PerformanceEntry&lt;/code&gt; will be equal to either &lt;code&gt;'Http2Stream'&lt;/code&gt; or &lt;code&gt;'Http2Session'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PerformanceEntry&lt;/code&gt; の &lt;code&gt;name&lt;/code&gt; プロパティは、 &lt;code&gt;'Http2Stream'&lt;/code&gt; または &lt;code&gt;'Http2Session'&lt;/code&gt; いずれかに等しくなります。</target>
        </trans-unit>
        <trans-unit id="fead3a1b10f1cd1219ecd83f4f5309be607d6bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;napi_status&lt;/code&gt; return value provides a VM-independent representation of the error which occurred. In some cases it is useful to be able to get more detailed information, including a string representing the error as well as VM (engine)-specific information.</source>
          <target state="translated">&lt;code&gt;napi_status&lt;/code&gt; の戻り値は、発生したエラーのVM-独立表現を提供します。エラーを表す文字列やVM（エンジン）固有の情報など、より詳細な情報を取得できると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="8420aef6e68318f7cf22413ea994098205a463a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net.createQuicSocket()&lt;/code&gt; function is used to create new &lt;code&gt;QuicSocket&lt;/code&gt; instances associated with a local UDP address.</source>
          <target state="translated">&lt;code&gt;net.createQuicSocket()&lt;/code&gt; 関数は、新規作成するために使用され &lt;code&gt;QuicSocket&lt;/code&gt; のローカルUDPアドレスに関連付けられているインスタンスを。</target>
        </trans-unit>
        <trans-unit id="a5592b5c4bb94af8a694920848a14649e29bdb54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module provides an asynchronous network API for creating stream-based TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; servers (&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt;) and clients (&lt;a href=&quot;#net_net_createconnection&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;net&lt;/code&gt; モジュールは、ストリームベースのTCPまたは作成するための非同期ネットワークAPIを提供&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;サーバ（&lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt; &lt;code&gt;net.createServer()&lt;/code&gt; &lt;/a&gt;）とクライアント（&lt;a href=&quot;#net_net_createconnection&quot;&gt; &lt;code&gt;net.createConnection()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="31b0acf0893d1c1e29270c99bb268d786ad3d97e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module provides an implementation of the QUIC protocol. To access it, the Node.js binary must be compiled using the &lt;code&gt;--experimental-quic&lt;/code&gt; configuration flag.</source>
          <target state="translated">&lt;code&gt;net&lt;/code&gt; モジュールはQUICプロトコルの実装を提供します。これにアクセスするには、Node.jsバイナリを &lt;code&gt;--experimental-quic&lt;/code&gt; 構成フラグを使用してコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="afe70f2afea81de2ad39fdbdca8f06a2bf7b7881" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net&lt;/code&gt; module supports IPC with named pipes on Windows, and Unix domain sockets on other operating systems.</source>
          <target state="translated">&lt;code&gt;net&lt;/code&gt; モジュールは、他のオペレーティングシステム上のWindowsとUNIXドメインソケット上の名前付きパイプとIPCをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c99c66ffa459f318d34b430b1960b9ec1ec032dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Buffer(size)&lt;/code&gt; will return zero-filled memory by default.</source>
          <target state="translated">&lt;code&gt;new Buffer(size)&lt;/code&gt; 、デフォルトではゼロで満たされたメモリを返します。</target>
        </trans-unit>
        <trans-unit id="98cd02d87620b12bf18cb45009fe403411fb6755" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; keyword isn&amp;rsquo;t required; a package&amp;rsquo;s function can return a new object, or modify a passed-in object, to keep the state external to the package.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; キーワードは必須ではありません。パッケージの関数は、新しいオブジェクトを返すか、渡されたオブジェクトを変更して、パッケージの外部の状態を維持できます。</target>
        </trans-unit>
        <trans-unit id="b63aedb914d35f85da2330f76baf396624ea666b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;node::NewIsolate()&lt;/code&gt; helper function creates a &lt;code&gt;v8::Isolate&lt;/code&gt;, sets it up with some Node.js-specific hooks (e.g. the Node.js error handler), and registers it with the platform automatically.</source>
          <target state="translated">&lt;code&gt;node::NewIsolate()&lt;/code&gt; ヘルパー関数を作成し、 &lt;code&gt;v8::Isolate&lt;/code&gt; 自動的プラットフォームと、セットそれをいくつかのNode.jsの固有のフックを持つ（例えばNode.jsのエラーハンドラ）、およびレジスタそれを。</target>
        </trans-unit>
        <trans-unit id="ad7337a8c889e7d305644a015405dea9b202ed4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oaepHash&lt;/code&gt; option was added.</source>
          <target state="translated">&lt;code&gt;oaepHash&lt;/code&gt; のオプションが追加されました。</target>
        </trans-unit>
        <trans-unit id="fb138e2bbaf05f17d0875a8401ceccd36987bc3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oaepLabel&lt;/code&gt; option was added.</source>
          <target state="translated">&lt;code&gt;oaepLabel&lt;/code&gt; のオプションが追加されました。</target>
        </trans-unit>
        <trans-unit id="885ca29403d392148790862294f2104b877b5980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; options may be used to limit the response to a specific range subset. This can be used, for instance, to support HTTP Range requests.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 及び &lt;code&gt;length&lt;/code&gt; オプションは、特定の範囲の部分集合への応答を制限するために使用されてもよいです。これは、たとえば、HTTP範囲要求をサポートするために使用できます。</target>
        </trans-unit>
        <trans-unit id="3912ef30ca5bc4619350e3a871983ad1a82598df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters are optional now.</source>
          <target state="translated">現在、 &lt;code&gt;offset&lt;/code&gt; パラメータと &lt;code&gt;length&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="a23df2f613658facfd004babcb0062fd4ef3fab7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oldPath&lt;/code&gt; and &lt;code&gt;newPath&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;oldPath&lt;/code&gt; と &lt;code&gt;newPath&lt;/code&gt; パラメータはWHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="a237c089938bc17654d1872fb13f0c29b46e32ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;openStream()&lt;/code&gt; method is used to create a new &lt;code&gt;QuicStream&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;openStream()&lt;/code&gt; メソッドは、新規作成するために使用され &lt;code&gt;QuicStream&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="edc1f2e34a6125ab9dc62cf2242e8afebeffb580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.onError&lt;/code&gt; callback will be called if the file could not be opened. If &lt;code&gt;offset&lt;/code&gt; is set to a non-negative number, reading starts from that position. If &lt;code&gt;length&lt;/code&gt; is set to a non-negative number, it gives the maximum number of bytes that are read from the file.</source>
          <target state="translated">&lt;code&gt;options.onError&lt;/code&gt; のファイルを開くことができなかった場合は、コールバックが呼び出されます。 &lt;code&gt;offset&lt;/code&gt; が負でない数値に設定されている場合、読み取りはその位置から開始されます。 &lt;code&gt;length&lt;/code&gt; が負でない数に設定されている場合、ファイルから読み取られる最大バイト数が示されます。</target>
        </trans-unit>
        <trans-unit id="b91336e152d266abaf56acd5db6edb3d059c4ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.onError&lt;/code&gt; function may also be used to handle all the errors that could happen before the delivery of the file is initiated. The default behavior is to destroy the stream.</source>
          <target state="translated">&lt;code&gt;options.onError&lt;/code&gt; の機能は、ファイルの配信が開始される前に発生する可能性があり、すべてのエラーを処理するために使用することができます。デフォルトの動作は、ストリームを破棄することです。</target>
        </trans-unit>
        <trans-unit id="88725ed0c752fd2e0d3d7eb4b4fa2aac4684e747" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.selectPadding()&lt;/code&gt; function is invoked once for &lt;em&gt;every&lt;/em&gt;&lt;code&gt;HEADERS&lt;/code&gt; and &lt;code&gt;DATA&lt;/code&gt; frame. This has a definite noticeable impact on performance.</source>
          <target state="translated">&lt;code&gt;options.selectPadding()&lt;/code&gt; 関数は、のために一度呼び出される&lt;em&gt;すべての&lt;/em&gt; &lt;code&gt;HEADERS&lt;/code&gt; と &lt;code&gt;DATA&lt;/code&gt; フレーム。これは、パフォーマンスに明確な顕著な影響を及ぼします。</target>
        </trans-unit>
        <trans-unit id="58c22594cb8dda9afe65bb4ffe82eac94dae29bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.selectPadding()&lt;/code&gt; function receives two numeric arguments, &lt;code&gt;frameLen&lt;/code&gt; and &lt;code&gt;maxFrameLen&lt;/code&gt; and must return a number &lt;code&gt;N&lt;/code&gt; such that &lt;code&gt;frameLen &amp;lt;= N &amp;lt;= maxFrameLen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.selectPadding()&lt;/code&gt; 関数は、2つの数値引数、受信 &lt;code&gt;frameLen&lt;/code&gt; と &lt;code&gt;maxFrameLen&lt;/code&gt; をし、数返さなければならない &lt;code&gt;N&lt;/code&gt; ように &lt;code&gt;frameLen &amp;lt;= N &amp;lt;= maxFrameLen&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1c0d85ce19cd9d1ce4392696fd5cac8f4203d86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.statCheck&lt;/code&gt; function may also be used to cancel the send operation by returning &lt;code&gt;false&lt;/code&gt;. For instance, a conditional request may check the stat results to determine if the file has been modified to return an appropriate &lt;code&gt;304&lt;/code&gt; response:</source>
          <target state="translated">&lt;code&gt;options.statCheck&lt;/code&gt; の機能も返すことによって、送信操作をキャンセルするために使用することができる &lt;code&gt;false&lt;/code&gt; 。たとえば、条件付きリクエストは、統計結果をチェックして、適切な &lt;code&gt;304&lt;/code&gt; 応答を返すようにファイルが変更されているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="7a08e01016b2c2502c2e42198c75f2bc1cff02d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options.stdio&lt;/code&gt; option is used to configure the pipes that are established between the parent and child process. By default, the child's stdin, stdout, and stderr are redirected to corresponding &lt;a href=&quot;#child_process_subprocess_stdin&quot;&gt;&lt;code&gt;subprocess.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_subprocess_stdout&quot;&gt;&lt;code&gt;subprocess.stdout&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#child_process_subprocess_stderr&quot;&gt;&lt;code&gt;subprocess.stderr&lt;/code&gt;&lt;/a&gt; streams on the &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object. This is equivalent to setting the &lt;code&gt;options.stdio&lt;/code&gt; equal to &lt;code&gt;['pipe', 'pipe', 'pipe']&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.stdio&lt;/code&gt; オプションは、親と子プロセスの間で確立されているパイプを設定するために使用されます。デフォルトでは、子のstdin、stdout、およびstderrは、&lt;a href=&quot;#child_process_child_process&quot;&gt; &lt;code&gt;ChildProcess&lt;/code&gt; &lt;/a&gt;オブジェクトの対応する&lt;a href=&quot;#child_process_subprocess_stdin&quot;&gt; &lt;code&gt;subprocess.stdin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#child_process_subprocess_stdout&quot;&gt; &lt;code&gt;subprocess.stdout&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#child_process_subprocess_stderr&quot;&gt; &lt;code&gt;subprocess.stderr&lt;/code&gt; &lt;/a&gt;ストリームにリダイレクトされます。これは、 &lt;code&gt;options.stdio&lt;/code&gt; を &lt;code&gt;['pipe', 'pipe', 'pipe']&lt;/code&gt; に設定することと同じです。</target>
        </trans-unit>
        <trans-unit id="c8dd4ab4f071e2989533d5f91caa4e4a34ce887c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数コントロールが（たとえば、行動をストリーミングし、CCMまたはOCBモードの暗号が使用されている場合を除き、オプションである &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。その場合、 &lt;code&gt;authTagLength&lt;/code&gt; オプションが必須であり、認証タグの長さをバイト単位で指定します。CCM &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;モードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70db3910480442bf6b039c30dead899f0e07b3e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;. In GCM mode, the &lt;code&gt;authTagLength&lt;/code&gt; option is not required but can be used to restrict accepted authentication tags to those with the specified length.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数コントロールが（たとえば、行動をストリーミングし、CCMまたはOCBモードの暗号が使用されている場合を除き、オプションである &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。その場合、 &lt;code&gt;authTagLength&lt;/code&gt; オプションが必須であり、認証タグの長さをバイト単位で指定します。CCM &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;モードを&lt;/a&gt;参照してください。 GCMモードでは、 &lt;code&gt;authTagLength&lt;/code&gt; オプションは必須ではありませんが、受け入れられる認証タグを指定された長さのものに制限するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1f07368952df0b4d175cfc6577e347d6c1e59d58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument controls stream behavior and is optional except when a cipher in CCM or OCB mode is used (e.g. &lt;code&gt;'aes-128-ccm'&lt;/code&gt;). In that case, the &lt;code&gt;authTagLength&lt;/code&gt; option is required and specifies the length of the authentication tag in bytes, see &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;. In GCM mode, the &lt;code&gt;authTagLength&lt;/code&gt; option is not required but can be used to set the length of the authentication tag that will be returned by &lt;code&gt;getAuthTag()&lt;/code&gt; and defaults to 16 bytes.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数コントロールが（たとえば、行動をストリーミングし、CCMまたはOCBモードの暗号が使用されている場合を除き、オプションである &lt;code&gt;'aes-128-ccm'&lt;/code&gt; ）。その場合、 &lt;code&gt;authTagLength&lt;/code&gt; オプションが必須であり、認証タグの長さをバイト単位で指定します。CCM &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;モードを&lt;/a&gt;参照してください。 GCMモードでは、 &lt;code&gt;authTagLength&lt;/code&gt; オプションは必須ではありませんが、 &lt;code&gt;getAuthTag()&lt;/code&gt; によって返される認証タグの長さを設定するために使用できます。デフォルトは16バイトです。</target>
        </trans-unit>
        <trans-unit id="b388a3d7d0f9bca878571c8a6039e4ada05c0bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数はオプションです &lt;code&gt;GCM&lt;/code&gt; と &lt;code&gt;OCB&lt;/code&gt; 。 &lt;code&gt;CCM&lt;/code&gt; を使用する場合は、 &lt;code&gt;plaintextLength&lt;/code&gt; オプションを指定する必要があり、その値はプレーンテキストの長さ（バイト単位）と一致する必要があります。&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCMモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9affcc0d6846e73a405fe2a318791ff8c6763f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the ciphertext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数はオプションです &lt;code&gt;GCM&lt;/code&gt; 。 &lt;code&gt;CCM&lt;/code&gt; を使用する場合は、 &lt;code&gt;plaintextLength&lt;/code&gt; オプションを指定する必要があり、その値は暗号文の長さ（バイト単位）と一致する必要があります。&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCMモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04d1fc8ede515595f0022bbcb95640413bd973e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is optional for &lt;code&gt;GCM&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数はオプションです &lt;code&gt;GCM&lt;/code&gt; 。 &lt;code&gt;CCM&lt;/code&gt; を使用する場合は、 &lt;code&gt;plaintextLength&lt;/code&gt; オプションを指定する必要があり、その値はプレーンテキストの長さ（バイト単位）と一致する必要があります。&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCMモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ffcc3d1f21652c8051ddf089c67bff61f63a2cb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument is supported now.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="8c18426cec8944bfcba4ea3507d2515508ff8326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; argument may be omitted. If provided, it should be an object. The &lt;code&gt;options&lt;/code&gt; object may contain a boolean named &lt;code&gt;persistent&lt;/code&gt; that indicates whether the process should continue to run as long as files are being watched. The &lt;code&gt;options&lt;/code&gt; object may specify an &lt;code&gt;interval&lt;/code&gt; property indicating how often the target should be polled in milliseconds.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 引数を省略することができます。指定する場合は、オブジェクトにする必要があります。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、名前で指定されたboolean含むことが &lt;code&gt;persistent&lt;/code&gt; プロセスがある限り、ファイルが監視されているように実行し続けるべきかどうかを示します。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、指定することができ &lt;code&gt;interval&lt;/code&gt; ターゲットはミリ秒単位でポーリングする頻度を示すプロパティを。</target>
        </trans-unit>
        <trans-unit id="3ecccc5808da944ebe14cfab94721d12f71b2cf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; object may contain a &lt;code&gt;fd&lt;/code&gt; property. When a &lt;code&gt;fd&lt;/code&gt; greater than &lt;code&gt;0&lt;/code&gt; is set, it will wrap around an existing socket with the given file descriptor. In this case, the properties of &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; オブジェクトが含まれていてもよい &lt;code&gt;fd&lt;/code&gt; のプロパティを。とき &lt;code&gt;fd&lt;/code&gt; より大きく &lt;code&gt;0&lt;/code&gt; が設定されている、それは与えられたファイルディスクリプタで既存のソケットの周りに折り返されます。この場合、 &lt;code&gt;port&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; プロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="f185bba23af7cf7637b219df23160a83316f0b66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; object may contain an additional &lt;code&gt;exclusive&lt;/code&gt; property that is used when using &lt;code&gt;dgram.Socket&lt;/code&gt; objects with the &lt;a href=&quot;cluster&quot;&gt;&lt;code&gt;cluster&lt;/code&gt;&lt;/a&gt; module. When &lt;code&gt;exclusive&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (the default), cluster workers will use the same underlying socket handle allowing connection handling duties to be shared. When &lt;code&gt;exclusive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, however, the handle is not shared and attempted port sharing results in an error.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; オブジェクトは、追加含有することができる &lt;code&gt;exclusive&lt;/code&gt; 使用しているときに使用されるプロパティ &lt;code&gt;dgram.Socket&lt;/code&gt; を有するオブジェクトを&lt;a href=&quot;cluster&quot;&gt; &lt;code&gt;cluster&lt;/code&gt; &lt;/a&gt;モジュール。ときに &lt;code&gt;exclusive&lt;/code&gt; に設定されている &lt;code&gt;false&lt;/code&gt; （デフォルト）、クラスタ労働者が業務を取り扱い、接続を共有できるようにすることと同じ基本的なソケットハンドルを使用します。ただし、 &lt;code&gt;exclusive&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、ハンドルは共有されず、ポート共有を試行するとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6fbf7471b69b1732468b84a8b5cd6c3bbd820fbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、WHATWGすることができ &lt;code&gt;URL&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="f310b73d29091e1115b087085826cee5193689cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter can now include &lt;code&gt;clientCertEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは今含めることができます &lt;code&gt;clientCertEngine&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c04ccd742cb846d729c46db1c92d993bda691af3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータはオプションになりました。</target>
        </trans-unit>
        <trans-unit id="1544d0a25361e0102480911c75332cf1faf9847a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter now supports &lt;code&gt;net.createServer()&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータがサポートするようになりまし &lt;code&gt;net.createServer()&lt;/code&gt; のオプションを。</target>
        </trans-unit>
        <trans-unit id="11a0da7077baf241c7325863b0e43935555f3a40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter was added.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータが追加されました。</target>
        </trans-unit>
        <trans-unit id="7e73cb4a761c64c133dbf1f7850ece9925d2eed6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter, and the &lt;code&gt;keepOpen&lt;/code&gt; option in particular, is supported now.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータ、および &lt;code&gt;keepOpen&lt;/code&gt; の特にオプションは、サポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="2763cd5beff3c94cee8b93fbe274c8b2cdd696ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;originSet&lt;/code&gt; property is only available when using a secure TLS connection.</source>
          <target state="translated">&lt;code&gt;originSet&lt;/code&gt; のセキュアなTLS接続を使用するときに、プロパティにのみ使用可能です。</target>
        </trans-unit>
        <trans-unit id="0ee9a44acc588d2b0ac4bfb8cdbe73ea5d2ad84c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.arch()&lt;/code&gt; method returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.</source>
          <target state="translated">&lt;code&gt;os.arch()&lt;/code&gt; メソッドは、Node.jsのバイナリがコンパイルされたため、オペレーティングシステムのCPUアーキテクチャを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fd4b8a513a4015a14ac01295145fcd7349422760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.cpus()&lt;/code&gt; method returns an array of objects containing information about each logical CPU core.</source>
          <target state="translated">&lt;code&gt;os.cpus()&lt;/code&gt; メソッドは、各論理CPUコアに関する情報を含むオブジェクトの配列を返します。</target>
        </trans-unit>
        <trans-unit id="dd819e9d7af1fe616adb3dde7cf03a235051f4d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.endianness()&lt;/code&gt; method returns a string identifying the endianness of the CPU &lt;em&gt;for which the Node.js binary was compiled&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;os.endianness()&lt;/code&gt; メソッドは、CPUのエンディアン識別する文字列を返し&lt;em&gt;Node.jsのバイナリがコンパイルされたために&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9a88232839cef7e552682cd4db9e7d869e81ce93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.freemem()&lt;/code&gt; method returns the amount of free system memory in bytes as an integer.</source>
          <target state="translated">&lt;code&gt;os.freemem()&lt;/code&gt; メソッドは、整数としてバイト単位で自由なシステムメモリの量を返します。</target>
        </trans-unit>
        <trans-unit id="e9589b6e8570ce552b673c7c3286ac69d95ca7d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.getNetworkInterfaces()&lt;/code&gt; method is deprecated. Please use the &lt;a href=&quot;os#os_os_networkinterfaces&quot;&gt;&lt;code&gt;os.networkInterfaces()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="translated">&lt;code&gt;os.getNetworkInterfaces()&lt;/code&gt; メソッドは推奨されています。代わりに&lt;a href=&quot;os#os_os_networkinterfaces&quot;&gt; &lt;code&gt;os.networkInterfaces()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。</target>
        </trans-unit>
        <trans-unit id="68455ecd26853fd1c43efff0e0b76dba1707b26e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.getPriority()&lt;/code&gt; method returns the scheduling priority for the process specified by &lt;code&gt;pid&lt;/code&gt;. If &lt;code&gt;pid&lt;/code&gt; is not provided, or is &lt;code&gt;0&lt;/code&gt;, the priority of the current process is returned.</source>
          <target state="translated">&lt;code&gt;os.getPriority()&lt;/code&gt; メソッドは、で指定されたプロセスのスケジューリング優先順位を返し &lt;code&gt;pid&lt;/code&gt; 。場合 &lt;code&gt;pid&lt;/code&gt; 設け、またはされないが &lt;code&gt;0&lt;/code&gt; 、現在のプロセスの優先度が返されます。</target>
        </trans-unit>
        <trans-unit id="ff202cb94fa55d86ebbf8be59a9fe425b0365415" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.homedir()&lt;/code&gt; method returns the home directory of the current user as a string.</source>
          <target state="translated">&lt;code&gt;os.homedir()&lt;/code&gt; メソッドは文字列として現在のユーザのホームディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="08ccc46f0c89757856f0de672fdae7d519bc7bb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.hostname()&lt;/code&gt; method returns the hostname of the operating system as a string.</source>
          <target state="translated">&lt;code&gt;os.hostname()&lt;/code&gt; メソッドは、文字列などのオペレーティング・システムのホスト名を返します。</target>
        </trans-unit>
        <trans-unit id="5c9a1431d7ea068ec0c902acf347c2518816ee86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.loadavg()&lt;/code&gt; method returns an array containing the 1, 5, and 15 minute load averages.</source>
          <target state="translated">&lt;code&gt;os.loadavg()&lt;/code&gt; メソッドは、1を含む配列を返し5、及び15分の平均負荷。</target>
        </trans-unit>
        <trans-unit id="d194900a3e2e0f96f28e2fc9905489cd527a1b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.networkInterfaces()&lt;/code&gt; method returns an object containing only network interfaces that have been assigned a network address.</source>
          <target state="translated">&lt;code&gt;os.networkInterfaces()&lt;/code&gt; メソッドは、ネットワークアドレスを割り当てられている唯一のネットワークインターフェースを含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="e76c72da5ce1666431d22cdc5b11e7141d7dee80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.platform()&lt;/code&gt; method returns a string identifying the operating system platform as set during compile time of Node.js.</source>
          <target state="translated">&lt;code&gt;os.platform()&lt;/code&gt; メソッドは、Node.js.のコンパイル時にセットとしてオペレーティング・システム・プラットフォームを識別する文字列を返します</target>
        </trans-unit>
        <trans-unit id="8f2147ad23c2ec0f83d80f4078e3e27a91e6857f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.release()&lt;/code&gt; method returns a string identifying the operating system release.</source>
          <target state="translated">&lt;code&gt;os.release()&lt;/code&gt; メソッドは、オペレーティングシステムのリリースを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fbfd957e2f788604cd2a912c9f703622e4c74d1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.setPriority()&lt;/code&gt; method attempts to set the scheduling priority for the process specified by &lt;code&gt;pid&lt;/code&gt;. If &lt;code&gt;pid&lt;/code&gt; is not provided, or is &lt;code&gt;0&lt;/code&gt;, the priority of the current process is used.</source>
          <target state="translated">&lt;code&gt;os.setPriority()&lt;/code&gt; で指定されたプロセスのスケジューリング優先順位を設定する方法を試み &lt;code&gt;pid&lt;/code&gt; 。場合 &lt;code&gt;pid&lt;/code&gt; 設け、またはされないが &lt;code&gt;0&lt;/code&gt; 、現在のプロセスの優先順位が使用されます。</target>
        </trans-unit>
        <trans-unit id="2381f4505912aa2a83ede87b6e353a245af8bce9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpDir()&lt;/code&gt; API is deprecated. Please use &lt;a href=&quot;os#os_os_tmpdir&quot;&gt;&lt;code&gt;os.tmpdir()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;os.tmpDir()&lt;/code&gt; APIは推奨されません。代わりに&lt;a href=&quot;os#os_os_tmpdir&quot;&gt; &lt;code&gt;os.tmpdir()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="9b37481d17aa1a08f38033af5e07ad5a8c1d8e7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpDir()&lt;/code&gt; API was deprecated in Node.js 7.0.0 and has since been removed. Please use &lt;a href=&quot;os#os_os_tmpdir&quot;&gt;&lt;code&gt;os.tmpdir()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;os.tmpDir()&lt;/code&gt; APIは、Node.jsの7.0.0で廃止されましたし、以来、削除されました。代わりに&lt;a href=&quot;os#os_os_tmpdir&quot;&gt; &lt;code&gt;os.tmpdir()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="b4c8d89820967edb5a86cf15fc4f3223e85cb656" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.tmpdir()&lt;/code&gt; method returns a string specifying the operating system's default directory for temporary files.</source>
          <target state="translated">&lt;code&gt;os.tmpdir()&lt;/code&gt; メソッドは、一時ファイルのためのオペレーティングシステムのデフォルトのディレクトリを指定する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fa88528ec6a826f144023495a7b003de6458571a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.totalmem()&lt;/code&gt; method returns the total amount of system memory in bytes as an integer.</source>
          <target state="translated">&lt;code&gt;os.totalmem()&lt;/code&gt; メソッドは、整数バイトのシステムメモリの総量を返します。</target>
        </trans-unit>
        <trans-unit id="704218fb38cc5fde83230e8b7f548bf48215777f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.type()&lt;/code&gt; method returns a string identifying the operating system name as returned by &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;'Linux'&lt;/code&gt; on Linux, &lt;code&gt;'Darwin'&lt;/code&gt; on macOS, and &lt;code&gt;'Windows_NT'&lt;/code&gt; on Windows.</source>
          <target state="translated">&lt;code&gt;os.type()&lt;/code&gt; メソッドの戻りによって返されるオペレーティングシステム名を識別する文字列&lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt; &lt;code&gt;uname(3)&lt;/code&gt; &lt;/a&gt;。たとえば、 &lt;code&gt;'Linux'&lt;/code&gt; Linux &lt;code&gt;'Darwin'&lt;/code&gt; 、macOSでは「Darwin &lt;code&gt;'Windows_NT'&lt;/code&gt; 、Windowsでは「Windows_NT」などです。</target>
        </trans-unit>
        <trans-unit id="8c622a09d0f16bb6ec01b41edf064ab83a149100" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.uptime()&lt;/code&gt; method returns the system uptime in number of seconds.</source>
          <target state="translated">&lt;code&gt;os.uptime()&lt;/code&gt; メソッドは、秒数で、システムの稼働時間を返します。</target>
        </trans-unit>
        <trans-unit id="bfeef8c91f8d956e86c7a531b06a7f532f2035ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os.userInfo()&lt;/code&gt; method returns information about the currently effective user &amp;mdash; on POSIX platforms, this is typically a subset of the password file. The returned object includes the &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;uid&lt;/code&gt;, &lt;code&gt;gid&lt;/code&gt;, &lt;code&gt;shell&lt;/code&gt;, and &lt;code&gt;homedir&lt;/code&gt;. On Windows, the &lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; fields are &lt;code&gt;-1&lt;/code&gt;, and &lt;code&gt;shell&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; メソッドは、現在有効なユーザーに関する情報を返す- POSIXプラットフォームでは、これは通常、パスワードファイルのサブセットです。返されるオブジェクトには、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;uid&lt;/code&gt; 、 &lt;code&gt;gid&lt;/code&gt; 、 &lt;code&gt;shell&lt;/code&gt; 、 &lt;code&gt;homedir&lt;/code&gt; が含まれます。Windowsでは、 &lt;code&gt;uid&lt;/code&gt; および &lt;code&gt;gid&lt;/code&gt; フィールドは &lt;code&gt;-1&lt;/code&gt; で、 &lt;code&gt;shell&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4cb17d14194660fd3cf9cfa11482a196f87f429" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os&lt;/code&gt; module provides a number of operating system-related utility methods. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;os&lt;/code&gt; モジュールは、オペレーティングシステム関連のユーティリティの多数の方法を提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="8c2c9c178476a88ba930d872530fe7e244cbfca0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;os&lt;/code&gt; module provides operating system-related utility methods and properties. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;os&lt;/code&gt; モジュールは、システム関連のユーティリティメソッドとプロパティを操作提供します。次を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="eae6c5263eb3a3adb56e5c667edc4c110678a119" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputEncoding&lt;/code&gt; specifies the output format of the enciphered data. If the &lt;code&gt;outputEncoding&lt;/code&gt; is specified, a string using the specified encoding is returned. If no &lt;code&gt;outputEncoding&lt;/code&gt; is provided, a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; is returned.</source>
          <target state="translated">&lt;code&gt;outputEncoding&lt;/code&gt; は暗号化されたデータの出力形式を指定します。 &lt;code&gt;outputEncoding&lt;/code&gt; が指定されている場合、指定されたエンコーディングを使用する文字列が返されます。 &lt;code&gt;outputEncoding&lt;/code&gt; が指定されていない場合、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="05eb17785bdeb53b18850ce2ab3ab0ff99d9b5ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputLength&lt;/code&gt; option was added for XOF hash functions.</source>
          <target state="translated">&lt;code&gt;outputLength&lt;/code&gt; のオプションはXOFハッシュ関数のために追加されました。</target>
        </trans-unit>
        <trans-unit id="29c3f4c932b9fe2069789e319498450a4d448d68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field contains an invalid target mapping value for the attempted module resolution.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; &lt;a href=&quot;packages#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドモジュール解像度を試みたため、無効なターゲット・マッピング値が含まれています。</target>
        </trans-unit>
        <trans-unit id="6f9efbd944ec2ee1939f2c0a80991e78d74ea147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;packages#packages_exports&quot;&gt;&lt;code&gt;&quot;exports&quot;&lt;/code&gt;&lt;/a&gt; field does not export the requested subpath. Because exports are encapsulated, private internal modules that are not exported cannot be imported through the package resolution, unless using an absolute URL.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; &lt;a href=&quot;packages#packages_exports&quot;&gt; &lt;code&gt;&quot;exports&quot;&lt;/code&gt; &lt;/a&gt;フィールドには、要求されたサブパスをエクスポートしません。エクスポートはカプセル化されているため、絶対URLを使用しない限り、エクスポートされないプライベート内部モジュールはパッケージ解決を介してインポートできません。</target>
        </trans-unit>
        <trans-unit id="4224eb4a6bc7b06089af432cdc5b560a90885bfb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt;&lt;a href=&quot;packages#packages_imports&quot;&gt;&lt;code&gt;&quot;imports&quot;&lt;/code&gt;&lt;/a&gt; field does not define the given internal package specifier mapping.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; &lt;a href=&quot;packages#packages_imports&quot;&gt; &lt;code&gt;&quot;imports&quot;&lt;/code&gt; &lt;/a&gt;欄には、与えられた内部パッケージ指定子マッピングを定義していません。</target>
        </trans-unit>
        <trans-unit id="fdafd20e01a0d40cc24f829e01b07007772132ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;package.json&lt;/code&gt;&lt;code&gt;&quot;main&quot;&lt;/code&gt; field defines the entry point for a package, whether the package is included into CommonJS via &lt;code&gt;require&lt;/code&gt; or into an ES module via &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;&quot;main&quot;&lt;/code&gt; フィールドは、を介してパッケージはCommonJSに含まれているか否か、パッケージのエントリポイントを定義する &lt;code&gt;require&lt;/code&gt; を介して、またはESモジュールに &lt;code&gt;import&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f71aede9a83547ad5a39786ee9673bf753810698" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parentModuleURL&lt;/code&gt; is provided as &lt;code&gt;undefined&lt;/code&gt; when performing main Node.js load itself.</source>
          <target state="translated">&lt;code&gt;parentModuleURL&lt;/code&gt; はとして提供され &lt;code&gt;undefined&lt;/code&gt; メインのNode.js負荷自体を実行するとき。</target>
        </trans-unit>
        <trans-unit id="40c6fcca460251f4d4fb83bc801b49111c66163b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;password&lt;/code&gt; is used to derive the cipher key and initialization vector (IV). The value must be either a &lt;code&gt;'latin1'&lt;/code&gt; encoded string, a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;TypedArray&lt;/code&gt;, or a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;password&lt;/code&gt; 暗号キーと初期化ベクトル（IV）を導出するために使用されます。値は、 &lt;code&gt;'latin1'&lt;/code&gt; エンコードされた文字列、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="659dd8f56b53b04b94234030ba9cc76bde38ef25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.basename()&lt;/code&gt; method returns the last portion of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;basename&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.basename()&lt;/code&gt; メソッドは、最後の部分戻り &lt;code&gt;path&lt;/code&gt; Unixのと同様に、 &lt;code&gt;basename&lt;/code&gt; コマンド。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="188bb6063b9cc56f886f4feab1c8df1de8a2c2ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.basename()&lt;/code&gt; methods returns the last portion of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;basename&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.basename()&lt;/code&gt; メソッドは、最後の部分戻り &lt;code&gt;path&lt;/code&gt; Unixのと同様に、 &lt;code&gt;basename&lt;/code&gt; コマンド。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a46c55b6aac880d7bc1592bfe28b266a7b1031c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.dirname()&lt;/code&gt; method returns the directory name of a &lt;code&gt;path&lt;/code&gt;, similar to the Unix &lt;code&gt;dirname&lt;/code&gt; command. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.dirname()&lt;/code&gt; メソッドは、ディレクトリ名戻り &lt;code&gt;path&lt;/code&gt; のUnixと同様、 &lt;code&gt;dirname&lt;/code&gt; コマンド。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3f6292e5cd1e0345df138f65b07d3563d7ad4f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.extname()&lt;/code&gt; method returns the extension of the &lt;code&gt;path&lt;/code&gt;, from the last occurrence of the &lt;code&gt;.&lt;/code&gt; (period) character to end of string in the last portion of the &lt;code&gt;path&lt;/code&gt;. If there is no &lt;code&gt;.&lt;/code&gt; in the last portion of the &lt;code&gt;path&lt;/code&gt;, or if there are no &lt;code&gt;.&lt;/code&gt; characters other than the first character of the basename of &lt;code&gt;path&lt;/code&gt; (see &lt;code&gt;path.basename()&lt;/code&gt;) , an empty string is returned.</source>
          <target state="translated">&lt;code&gt;path.extname()&lt;/code&gt; メソッドは、拡張戻り &lt;code&gt;path&lt;/code&gt; の最後の発生から、 &lt;code&gt;.&lt;/code&gt; （ピリオド） &lt;code&gt;path&lt;/code&gt; 最後の部分の文字列の終わりまでの文字。ない場合 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; 最後の部分、またはない場合 &lt;code&gt;.&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; のベース名の最初の文字（ &lt;code&gt;path.basename()&lt;/code&gt; を参照）以外の文字の場合、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="8e0e67a46c436cf5fe841f17ec165a43522a8571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.format()&lt;/code&gt; method returns a path string from an object. This is the opposite of &lt;a href=&quot;#path_path_parse_path&quot;&gt;&lt;code&gt;path.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.format()&lt;/code&gt; メソッドは、オブジェクトからのパス文字列を返します。これは&lt;a href=&quot;#path_path_parse_path&quot;&gt; &lt;code&gt;path.parse()&lt;/code&gt; の&lt;/a&gt;逆です。</target>
        </trans-unit>
        <trans-unit id="252cfc98db637fc3e0bc47e764b59687b1c5ae77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.isAbsolute()&lt;/code&gt; method determines if &lt;code&gt;path&lt;/code&gt; is an absolute path.</source>
          <target state="translated">&lt;code&gt;path.isAbsolute()&lt;/code&gt; 場合、メソッドは決定 &lt;code&gt;path&lt;/code&gt; 絶対パスです。</target>
        </trans-unit>
        <trans-unit id="23d1f7bebec278f9d7e734b9f87e77484ef62d91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.join()&lt;/code&gt; method joins all given &lt;code&gt;path&lt;/code&gt; segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.</source>
          <target state="translated">&lt;code&gt;path.join()&lt;/code&gt; メソッドは、すべての所与の参加 &lt;code&gt;path&lt;/code&gt; 一緒に区切り文字としてプラットフォーム固有のセパレータを使用してセグメントを、次いで得られたパスを正規化します。</target>
        </trans-unit>
        <trans-unit id="fccc035b7e3371f3ec57061631961afe47bacedc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.normalize()&lt;/code&gt; method normalizes the given &lt;code&gt;path&lt;/code&gt;, resolving &lt;code&gt;'..'&lt;/code&gt; and &lt;code&gt;'.'&lt;/code&gt; segments.</source>
          <target state="translated">&lt;code&gt;path.normalize()&lt;/code&gt; メソッドは、指定された正規化 &lt;code&gt;path&lt;/code&gt; 解決する、 &lt;code&gt;'..'&lt;/code&gt; および &lt;code&gt;'.'&lt;/code&gt; セグメント。</target>
        </trans-unit>
        <trans-unit id="54cf59d346f9b6392b2a87a5566d28221bcb562a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.parse()&lt;/code&gt; method returns an object whose properties represent significant elements of the &lt;code&gt;path&lt;/code&gt;. Trailing directory separators are ignored, see &lt;a href=&quot;#path_path_sep&quot;&gt;&lt;code&gt;path.sep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path.parse()&lt;/code&gt; メソッドは、その特性の重要要素表すオブジェクト戻り &lt;code&gt;path&lt;/code&gt; 。末尾のディレクトリ区切り文字は無視されます&lt;a href=&quot;#path_path_sep&quot;&gt; &lt;code&gt;path.sep&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="37668729a1da9d1c73a91abba8181fc015734cb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.posix&lt;/code&gt; property provides access to POSIX specific implementations of the &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;path.posix&lt;/code&gt; のプロパティは、のPOSIXの特定の実装へのアクセスを提供 &lt;code&gt;path&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="10a83fa0396ec811505daa5cde984be16592ee0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.relative()&lt;/code&gt; method returns the relative path from &lt;code&gt;from&lt;/code&gt; to &lt;code&gt;to&lt;/code&gt; based on the current working directory. If &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; each resolve to the same path (after calling &lt;code&gt;path.resolve()&lt;/code&gt; on each), a zero-length string is returned.</source>
          <target state="translated">&lt;code&gt;path.relative()&lt;/code&gt; メソッドからの相対パスを返す &lt;code&gt;from&lt;/code&gt; へ &lt;code&gt;to&lt;/code&gt; 現在の作業ディレクトリに基づきます。 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; がそれぞれ同じパスに解決される場合 &lt;code&gt;path.resolve()&lt;/code&gt; それぞれでpath.resolve（）を呼び出した後）、長さがゼロの文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="581183ca669de52def1090661675d2069384bfd0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.resolve()&lt;/code&gt; method resolves a sequence of paths or path segments into an absolute path.</source>
          <target state="translated">&lt;code&gt;path.resolve()&lt;/code&gt; メソッドは、絶対パスにパスまたはパスセグメントのシーケンスを解決します。</target>
        </trans-unit>
        <trans-unit id="fc46e1af8b2b47418d0b18b69062f0e559b72294" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path.win32&lt;/code&gt; property provides access to Windows-specific implementations of the &lt;code&gt;path&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;path.win32&lt;/code&gt; のプロパティは、Windows固有の実装へのアクセスを提供し &lt;code&gt;path&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="f63bee69cffa8c7230b8d83b01ff643325fa158e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; may be specified as a &lt;code&gt;FileHandle&lt;/code&gt; that has been opened for appending (using &lt;code&gt;fsPromises.open()&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のように指定することができる &lt;code&gt;FileHandle&lt;/code&gt; （使用して追加のために開かれた &lt;code&gt;fsPromises.open()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6e44c0aaf70d7f280a84fa02cdd1307c2a8b5325" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; may be specified as a numeric file descriptor that has been opened for appending (using &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.openSync()&lt;/code&gt;). The file descriptor will not be closed automatically.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 追加用に開かれている数値のファイル記述子として指定することができる（使用 &lt;code&gt;fs.open()&lt;/code&gt; または &lt;code&gt;fs.openSync()&lt;/code&gt; ）。ファイル記述子は自動的に閉じられません。</target>
        </trans-unit>
        <trans-unit id="54784f8d6788b2b1af616c6de7cd51656da924fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; module provides utilities for working with file and directory paths. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; モジュールはファイルやディレクトリのパスを操作するためのユーティリティを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0891b7522aea49dbbbd5c5d2e3ee6703a2df6b14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートはまだ&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="753c6c336baca793a6760ebb70f8457b1c8d3709" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter can be a file descriptor now.</source>
          <target state="translated">現在、 &lt;code&gt;path&lt;/code&gt; パラメータはファイル記述子にすることができます。</target>
        </trans-unit>
        <trans-unit id="8226322163fdae4413c7f4db24d0461e11583e74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameters can be a WHATWG &lt;code&gt;URL&lt;/code&gt; object using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートは&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="a636f6e53d1a384050820e5a3525c5fd15f2d5b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; property is a concatenation of the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; プロパティは、連結した &lt;code&gt;pathname&lt;/code&gt; と &lt;code&gt;search&lt;/code&gt; コンポーネント。</target>
        </trans-unit>
        <trans-unit id="cd8b1b1230d3106b94a572ac3ffbd6f8548b801e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathname&lt;/code&gt; property consists of the entire path section of the URL. This is everything following the &lt;code&gt;host&lt;/code&gt; (including the &lt;code&gt;port&lt;/code&gt;) and before the start of the &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;hash&lt;/code&gt; components, delimited by either the ASCII question mark (&lt;code&gt;?&lt;/code&gt;) or hash (&lt;code&gt;#&lt;/code&gt;) characters.</source>
          <target state="translated">&lt;code&gt;pathname&lt;/code&gt; プロパティは、URLのパス全体のセクションで構成されています。これは、 &lt;code&gt;host&lt;/code&gt; （ &lt;code&gt;port&lt;/code&gt; を含む）の後、 &lt;code&gt;query&lt;/code&gt; または &lt;code&gt;hash&lt;/code&gt; コンポーネントの開始前のすべてであり、ASCII疑問符（ &lt;code&gt;?&lt;/code&gt; ）またはハッシュ（ &lt;code&gt;#&lt;/code&gt; ）文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="cf3bb4ab113ab2ffcd7d4df193185b49aa974b47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathname&lt;/code&gt; property on the returned URL object is now &lt;code&gt;/&lt;/code&gt; when there is no path and the protocol scheme is &lt;code&gt;ws:&lt;/code&gt; or &lt;code&gt;wss:&lt;/code&gt;.</source>
          <target state="translated">返されるURLオブジェクトの &lt;code&gt;pathname&lt;/code&gt; プロパティは、パスがなく、プロトコルスキームが &lt;code&gt;ws:&lt;/code&gt; または &lt;code&gt;wss:&lt;/code&gt; の場合、 &lt;code&gt;/&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="919f87148245100aefaf59182626d3fc677bc928" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;paths&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;paths&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="beb4b2e149c75ae2ce192afac1b8402c322d7309" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ping()&lt;/code&gt; method will trigger the underlying QUIC connection to serialize any frames currently pending in the outbound queue if it is able to do so. This has the effect of keeping the connection with the peer active and resets the idle and retransmission timers. The &lt;code&gt;ping()&lt;/code&gt; method is a best-effort that ignores any errors that may occur during the serialization and send operations. There is no return value and there is no way to monitor the status of the &lt;code&gt;ping()&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;ping()&lt;/code&gt; メソッドは、そうすることが可能であればどのフレームが現在送信キューに保留シリアル化する基礎となるQUIC接続をトリガします。これには、ピアとの接続をアクティブに保ち、アイドルタイマーと再送信タイマーをリセットする効果があります。 &lt;code&gt;ping()&lt;/code&gt; メソッドは、直列化および送信動作中に発生する可能性のあるエラーを無視ベストエフォート型です。戻り値はなく、 &lt;code&gt;ping()&lt;/code&gt; 操作のステータスを監視する方法もありません。</target>
        </trans-unit>
        <trans-unit id="7404569f0f04ba79fca0af14aad486e3b599508e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipeline(..., cb)&lt;/code&gt; will wait for the &lt;code&gt;'close'&lt;/code&gt; event before invoking the callback. The implementation tries to detect legacy streams and only apply this behavior to streams which are expected to emit &lt;code&gt;'close'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pipeline(..., cb)&lt;/code&gt; をお待ちしております &lt;code&gt;'close'&lt;/code&gt; コールバックを呼び出す前にイベント。実装はレガシーストリームを検出しようとし、この動作を &lt;code&gt;'close'&lt;/code&gt; を放出すると予想されるストリームにのみ適用します。</target>
        </trans-unit>
        <trans-unit id="a33cedd6029c93c6341522334acf2b89006a9e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipeline&lt;/code&gt; API also supports async generators:</source>
          <target state="translated">&lt;code&gt;pipeline&lt;/code&gt; APIも非同期の発電機をサポートしています。</target>
        </trans-unit>
        <trans-unit id="d69b64872e4dabf952d6da7f4c96857f30589a2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipeline&lt;/code&gt; API is promisify-able as well:</source>
          <target state="translated">&lt;code&gt;pipeline&lt;/code&gt; APIは、同様にpromisify-ことができます：</target>
        </trans-unit>
        <trans-unit id="70b8cb986a83670438911fd8d5ea7485d49522da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pipeline&lt;/code&gt; API provides promise version:</source>
          <target state="translated">&lt;code&gt;pipeline&lt;/code&gt; APIは、約束のバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="8388962530bce3c8f8f6286e5a05fe14ed7ceb5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plaintextLength&lt;/code&gt; option is optional for &lt;code&gt;GCM&lt;/code&gt; and &lt;code&gt;OCB&lt;/code&gt;. When using &lt;code&gt;CCM&lt;/code&gt;, the &lt;code&gt;plaintextLength&lt;/code&gt; option must be specified and its value must match the length of the plaintext in bytes. See &lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCM mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;plaintextLength&lt;/code&gt; のオプションはオプションです &lt;code&gt;GCM&lt;/code&gt; と &lt;code&gt;OCB&lt;/code&gt; 。 &lt;code&gt;CCM&lt;/code&gt; を使用する場合は、 &lt;code&gt;plaintextLength&lt;/code&gt; オプションを指定する必要があり、その値は、バイト単位のプレーンテキストの長さと一致する必要があります。&lt;a href=&quot;#crypto_ccm_mode&quot;&gt;CCMモードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6fb265fd07a0d7f8e8e2a9f431c481837d8fb7fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; field is copied correctly now.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; フィールドが正しくコピーされます。</target>
        </trans-unit>
        <trans-unit id="5ed15aa76dd58bec9add6b4d7a2c2f7a8bf30e61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; property is the numeric port portion of the &lt;code&gt;host&lt;/code&gt; component.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; プロパティは、数値ポート部である &lt;code&gt;host&lt;/code&gt; コンポーネント。</target>
        </trans-unit>
        <trans-unit id="8b7858034d75ee3f2b3b2de7c9b9a05146723800" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; parameter is optional now.</source>
          <target state="translated">現在、 &lt;code&gt;position&lt;/code&gt; パラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="70c39279bee51de99acc1dba6574cee08232b6a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preview&lt;/code&gt; option is now available.</source>
          <target state="translated">&lt;code&gt;preview&lt;/code&gt; オプションが利用可能になりました。</target>
        </trans-unit>
        <trans-unit id="a762a27d128ae739b16dec3315cf9d688d7132bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prime&lt;/code&gt; argument can be a &lt;code&gt;Uint8Array&lt;/code&gt; now.</source>
          <target state="translated">現在、 &lt;code&gt;prime&lt;/code&gt; 引数は &lt;code&gt;Uint8Array&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e0e02f6628331bc85eaeb22e4681f24afb59013" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prime&lt;/code&gt; argument can be any &lt;code&gt;TypedArray&lt;/code&gt; or &lt;code&gt;DataView&lt;/code&gt; now.</source>
          <target state="translated">現在、 &lt;code&gt;prime&lt;/code&gt; 引数は任意の &lt;code&gt;TypedArray&lt;/code&gt; または &lt;code&gt;DataView&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9ef3092e9402a32d8a11faf19f4c8bd27014d4d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priority&lt;/code&gt; input must be an integer between &lt;code&gt;-20&lt;/code&gt; (high priority) and &lt;code&gt;19&lt;/code&gt; (low priority). Due to differences between Unix priority levels and Windows priority classes, &lt;code&gt;priority&lt;/code&gt; is mapped to one of six priority constants in &lt;code&gt;os.constants.priority&lt;/code&gt;. When retrieving a process priority level, this range mapping may cause the return value to be slightly different on Windows. To avoid confusion, it is recommended to set &lt;code&gt;priority&lt;/code&gt; to one of the priority constants.</source>
          <target state="translated">&lt;code&gt;priority&lt;/code&gt; 入力との間の整数でなければなりません &lt;code&gt;-20&lt;/code&gt; （高優先度）と &lt;code&gt;19&lt;/code&gt; （低優先度）。Unixの優先度レベルとWindowsの優先度クラスの違いにより、 &lt;code&gt;priority&lt;/code&gt; は &lt;code&gt;os.constants.priority&lt;/code&gt; の 6つの優先度定数の1つにマッピングされます。プロセスの優先度レベルを取得する場合、この範囲マッピングにより、Windowsでは戻り値が若干異なる場合があります。混乱を避けるために、 &lt;code&gt;priority&lt;/code&gt; をいずれかの優先度定数に設定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="44e51cd918d4d8324e00923a36969ffd263f3e03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priority&lt;/code&gt; input must be an integer between &lt;code&gt;-20&lt;/code&gt; (high priority) and &lt;code&gt;19&lt;/code&gt; (low priority). Due to differences between Unix priority levels and Windows priority classes, &lt;code&gt;priority&lt;/code&gt; is mapped to one of six priority constants in &lt;code&gt;os.constants.priority&lt;/code&gt;. When retrieving a process priority level, this range mapping may cause the return value to be slightly different on Windows. To avoid confusion, set &lt;code&gt;priority&lt;/code&gt; to one of the priority constants.</source>
          <target state="translated">&lt;code&gt;priority&lt;/code&gt; 入力との間の整数でなければなりません &lt;code&gt;-20&lt;/code&gt; （高優先度）と &lt;code&gt;19&lt;/code&gt; （低優先度）。Unixの優先度レベルとWindowsの優先度クラスの違いにより、 &lt;code&gt;priority&lt;/code&gt; は &lt;code&gt;os.constants.priority&lt;/code&gt; の6つの優先度定数の1つにマップされます。プロセスの優先度レベルを取得する場合、この範囲マッピングにより、Windowsでは戻り値がわずかに異なる場合があります。混乱を避けるために、 &lt;code&gt;priority&lt;/code&gt; を優先度定数の1つに設定します。</target>
        </trans-unit>
        <trans-unit id="c70f6cae36f6636f5abdf54d08b8b3988c7da1ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process._tickCallback&lt;/code&gt; property was never documented as an officially supported API.</source>
          <target state="translated">&lt;code&gt;process._tickCallback&lt;/code&gt; のプロパティは、公式にサポートされているAPIとして文書化されていませんでした。</target>
        </trans-unit>
        <trans-unit id="3622698fdbf850cdcfea82b10e7031c7e9a98213" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.abort()&lt;/code&gt; method causes the Node.js process to exit immediately and generate a core file.</source>
          <target state="translated">&lt;code&gt;process.abort()&lt;/code&gt; メソッドは、Node.jsのが直ちに終了し、コア・ファイルを生成するために処理させます。</target>
        </trans-unit>
        <trans-unit id="256cd1c7845a467da45db4ea069ac1d3173efd8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; property is a special, read-only &lt;code&gt;Set&lt;/code&gt; of flags allowable within the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; のプロパティは、読み取り専用、特別で &lt;code&gt;Set&lt;/code&gt; 内の許容フラグの&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; の&lt;/a&gt;環境変数。</target>
        </trans-unit>
        <trans-unit id="2a727071fefe2a18d8e379badd7dad07fd67f002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.arch&lt;/code&gt; property returns a string identifying the operating system CPU architecture for which the Node.js binary was compiled.</source>
          <target state="translated">&lt;code&gt;process.arch&lt;/code&gt; プロパティは、Node.jsのバイナリがコンパイルされた対象のオペレーティングシステムのCPUアーキテクチャを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="cbb573355c9a987424098eb4d1b59d8d159b0580" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv0&lt;/code&gt; property stores a read-only copy of the original value of &lt;code&gt;argv[0]&lt;/code&gt; passed when Node.js starts.</source>
          <target state="translated">&lt;code&gt;process.argv0&lt;/code&gt; プロパティストアは読み取り専用の元の値のコピー &lt;code&gt;argv[0]&lt;/code&gt; のNode.jsの起動時に渡されます。</target>
        </trans-unit>
        <trans-unit id="ea07aeb7f928579452477082622dac424365d23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv&lt;/code&gt; property returns an array containing the command line arguments passed when the Node.js process was launched. The first element will be &lt;a href=&quot;#process_process_execpath&quot;&gt;&lt;code&gt;process.execPath&lt;/code&gt;&lt;/a&gt;. See &lt;code&gt;process.argv0&lt;/code&gt; if access to the original value of &lt;code&gt;argv[0]&lt;/code&gt; is needed. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command line arguments.</source>
          <target state="translated">&lt;code&gt;process.argv&lt;/code&gt; のプロパティは、Node.jsのプロセスが開始された時にライン引数が渡されたコマンドを含む配列を返します。最初の要素は&lt;a href=&quot;#process_process_execpath&quot;&gt; &lt;code&gt;process.execPath&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;argv[0]&lt;/code&gt; 元の値へのアクセスが必要な場合は、 &lt;code&gt;process.argv0&lt;/code&gt; を参照してください。2番目の要素は、実行されるJavaScriptファイルへのパスです。残りの要素は、追加のコマンドライン引数になります。</target>
        </trans-unit>
        <trans-unit id="227f29bdbdb61d8a7a0ef3572a2dd4095fa32a96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.argv&lt;/code&gt; property returns an array containing the command-line arguments passed when the Node.js process was launched. The first element will be &lt;a href=&quot;#process_process_execpath&quot;&gt;&lt;code&gt;process.execPath&lt;/code&gt;&lt;/a&gt;. See &lt;code&gt;process.argv0&lt;/code&gt; if access to the original value of &lt;code&gt;argv[0]&lt;/code&gt; is needed. The second element will be the path to the JavaScript file being executed. The remaining elements will be any additional command-line arguments.</source>
          <target state="translated">&lt;code&gt;process.argv&lt;/code&gt; のプロパティは、Node.jsのプロセスが起動されたときにコマンドライン引数を含む配列が渡さ返します。最初の要素は&lt;a href=&quot;#process_process_execpath&quot;&gt; &lt;code&gt;process.execPath&lt;/code&gt; &lt;/a&gt;になります。 &lt;code&gt;argv[0]&lt;/code&gt; 元の値にアクセスする必要がある場合は、 &lt;code&gt;process.argv0&lt;/code&gt; を参照してください。2番目の要素は、実行されているJavaScriptファイルへのパスになります。残りの要素は、追加のコマンドライン引数になります。</target>
        </trans-unit>
        <trans-unit id="c6b4b1de939aef4af9e8fcf89d17bebffa3f7e86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.chdir()&lt;/code&gt; method changes the current working directory of the Node.js process or throws an exception if doing so fails (for instance, if the specified &lt;code&gt;directory&lt;/code&gt; does not exist).</source>
          <target state="translated">&lt;code&gt;process.chdir()&lt;/code&gt; メソッドは、Node.jsのプロセスの現在の作業ディレクトリを変更したり（指定した場合、例えばそうすることが失敗した場合に例外をスローし &lt;code&gt;directory&lt;/code&gt; 存在しません）。</target>
        </trans-unit>
        <trans-unit id="506618ff24992beaaf170321a3e3e38432597bf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.config&lt;/code&gt; property is &lt;strong&gt;not&lt;/strong&gt; read-only and there are existing modules in the ecosystem that are known to extend, modify, or entirely replace the value of &lt;code&gt;process.config&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.config&lt;/code&gt; のプロパティがされ&lt;strong&gt;ていない&lt;/strong&gt;読み取り専用で、拡張、変更、または全くの値置き換えることが知られているエコシステム内の既存のモジュールがある &lt;code&gt;process.config&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="f3323519b7dfe1f96d4694e734f3bc092e9dc8cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.config&lt;/code&gt; property returns an &lt;code&gt;Object&lt;/code&gt; containing the JavaScript representation of the configure options used to compile the current Node.js executable. This is the same as the &lt;code&gt;config.gypi&lt;/code&gt; file that was produced when running the &lt;code&gt;./configure&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;process.config&lt;/code&gt; のプロパティを返す &lt;code&gt;Object&lt;/code&gt; 現在のNode.js実行可能ファイルをコンパイルするために使用される設定オプションのJavaScriptの表現を含有します。これは、。/ &lt;code&gt;./configure&lt;/code&gt; スクリプトの実行時に生成された &lt;code&gt;config.gypi&lt;/code&gt; ファイルと同じです。</target>
        </trans-unit>
        <trans-unit id="cf7ff57c67040bc13dfbab7e1084e880809f8679" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.cpuUsage()&lt;/code&gt; method returns the user and system CPU time usage of the current process, in an object with properties &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;system&lt;/code&gt;, whose values are microsecond values (millionth of a second). These values measure time spent in user and system code respectively, and may end up being greater than actual elapsed time if multiple CPU cores are performing work for this process.</source>
          <target state="translated">&lt;code&gt;process.cpuUsage()&lt;/code&gt; メソッドは、プロパティを持つオブジェクトに、現在のプロセスのユーザおよびシステムCPU時間の使用状況を返し &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;system&lt;/code&gt; 値マイクロ秒の値（第2の万）です。これらの値は、ユーザーコードとシステムコードでそれぞれ費やされた時間を測定し、複数のCPUコアがこのプロセスの作業を実行している場合、実際の経過時間より長くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="771947b36c2b55fee12b3a836b78cc4c4e13363f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.cwd()&lt;/code&gt; method returns the current working directory of the Node.js process.</source>
          <target state="translated">&lt;code&gt;process.cwd()&lt;/code&gt; メソッドは、Node.jsのプロセスの現在の作業ディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="a9fb18fe69e5a088b5eeda1d02119941c653b80c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.dlopen()&lt;/code&gt; method allows dynamically loading shared objects. It is primarily used by &lt;code&gt;require()&lt;/code&gt; to load C++ Addons, and should not be used directly, except in special cases. In other words, &lt;a href=&quot;globals#globals_require&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; should be preferred over &lt;code&gt;process.dlopen()&lt;/code&gt; unless there are specific reasons such as custom dlopen flags or loading from ES modules.</source>
          <target state="translated">&lt;code&gt;process.dlopen()&lt;/code&gt; メソッドは、動的に共有オブジェクトをロードすることができます。これは主に &lt;code&gt;require()&lt;/code&gt; によってC ++アドオンをロードするために使用され、特別な場合を除いて直接使用しないでください。つまり、カスタムdlopenフラグやESモジュールからのロードなどの特定の理由がない限り、&lt;a href=&quot;globals#globals_require&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;process.dlopen()&lt;/code&gt; よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="789be1f7f1a58a4f8e41dc6a7207677908b728fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.dlopen()&lt;/code&gt; method allows to dynamically load shared objects. It is primarily used by &lt;code&gt;require()&lt;/code&gt; to load C++ Addons, and should not be used directly, except in special cases. In other words, &lt;a href=&quot;globals#globals_require&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; should be preferred over &lt;code&gt;process.dlopen()&lt;/code&gt;, unless there are specific reasons.</source>
          <target state="translated">&lt;code&gt;process.dlopen()&lt;/code&gt; メソッドは、動的に共有オブジェクトをロードすることを可能にします。これは主に &lt;code&gt;require()&lt;/code&gt; によってC ++アドオンをロードするために使用され、特別な場合を除いて直接使用しないでください。言い換えると、特別な理由がない限り、&lt;a href=&quot;globals#globals_require&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;process.dlopen()&lt;/code&gt; よりも優先されるべきです。</target>
        </trans-unit>
        <trans-unit id="b810960a380dde20678d8a762550d496b7d4904f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.emitWarning()&lt;/code&gt; method can be used to emit custom or application specific process warnings. These can be listened for by adding a handler to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;process.emitWarning()&lt;/code&gt; メソッドは、カスタムまたは特定用途の処理警告を発するために使用することができます。これらは、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; &lt;/a&gt;イベントにハンドラーを追加することでリッスンできます。</target>
        </trans-unit>
        <trans-unit id="a363e8af022e5aace7bd4cc8489cc4b12d310a86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; property returns an object containing the user environment. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/environ.7.html&quot;&gt;&lt;code&gt;environ(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; のプロパティは、ユーザーの環境を含むオブジェクトを返します。&lt;a href=&quot;http://man7.org/linux/man-pages/man7/environ.7.html&quot;&gt; &lt;code&gt;environ(7)&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2735db157a5cf0d02b3e84dbefe75992b18a6f02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execArgv&lt;/code&gt; property returns the set of Node.js-specific command-line options passed when the Node.js process was launched. These options do not appear in the array returned by the &lt;a href=&quot;#process_process_argv&quot;&gt;&lt;code&gt;process.argv&lt;/code&gt;&lt;/a&gt; property, and do not include the Node.js executable, the name of the script, or any options following the script name. These options are useful in order to spawn child processes with the same execution environment as the parent.</source>
          <target state="translated">&lt;code&gt;process.execArgv&lt;/code&gt; のプロパティは、Node.jsのプロセスが起動されたとき、Node.jsの固有のコマンドラインオプションのセットが渡さ返します。これらのオプションは、&lt;a href=&quot;#process_process_argv&quot;&gt; &lt;code&gt;process.argv&lt;/code&gt; &lt;/a&gt;プロパティによって返される配列には表示されず、Node.js実行可能ファイル、スクリプトの名前、またはスクリプト名に続くオプションは含まれません。これらのオプションは、親と同じ実行環境で子プロセスを生成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="04f3674cccb81b4b3df6feff774a9785180339eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execPath&lt;/code&gt; property returns the absolute pathname of the executable that started the Node.js process.</source>
          <target state="translated">&lt;code&gt;process.execPath&lt;/code&gt; のプロパティは、Node.jsのプロセスを開始した実行可能ファイルの絶対パス名を返します。</target>
        </trans-unit>
        <trans-unit id="10bd7a2cdee12143702c163eb07143246d465c25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.execPath&lt;/code&gt; property returns the absolute pathname of the executable that started the Node.js process. Symbolic links, if any, are resolved.</source>
          <target state="translated">&lt;code&gt;process.execPath&lt;/code&gt; のプロパティは、Node.jsのプロセスを開始した実行可能ファイルの絶対パス名を返します。シンボリックリンクがある場合は、解決されます。</target>
        </trans-unit>
        <trans-unit id="bd34beaf709be80f72dd5d32da45aab42c5ff969" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method being called explicitly;</source>
          <target state="translated">&lt;code&gt;process.exit()&lt;/code&gt; 明示的に呼び出されるメソッド。</target>
        </trans-unit>
        <trans-unit id="fb84d9b3c71243bbeeef4ef8f2352da9dd648c25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method instructs Node.js to terminate the process synchronously with an exit status of &lt;code&gt;code&lt;/code&gt;. If &lt;code&gt;code&lt;/code&gt; is omitted, exit uses either the 'success' code &lt;code&gt;0&lt;/code&gt; or the value of &lt;code&gt;process.exitCode&lt;/code&gt; if it has been set. Node.js will not terminate until all the &lt;a href=&quot;#process_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt;&lt;/a&gt; event listeners are called.</source>
          <target state="translated">&lt;code&gt;process.exit()&lt;/code&gt; メソッドは終了ステータスと同期プロセスを終了するためのNode.jsを指示する &lt;code&gt;code&lt;/code&gt; 。 &lt;code&gt;code&lt;/code&gt; が省略されている場合、exitは「成功」コード &lt;code&gt;0&lt;/code&gt; または設定されている場合は &lt;code&gt;process.exitCode&lt;/code&gt; の値を使用します。Node.jsは、すべての&lt;a href=&quot;#process_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; &lt;/a&gt;イベントリスナーが呼び出されるまで終了しません。</target>
        </trans-unit>
        <trans-unit id="62d6b7f5898a28e30f2d6fe157c331fd123ade49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getegid()&lt;/code&gt; method returns the numerical effective group identity of the Node.js process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getegid.2.html&quot;&gt;&lt;code&gt;getegid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.getegid()&lt;/code&gt; メソッドは、Node.jsのプロセスの数値有効なグループIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getegid.2.html&quot;&gt; &lt;code&gt;getegid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="ed73c7c214cd4dee204193e3a7ae59aec83c4add" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.geteuid()&lt;/code&gt; method returns the numerical effective user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/geteuid.2.html&quot;&gt;&lt;code&gt;geteuid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.geteuid()&lt;/code&gt; メソッドは、プロセスの数値有効なユーザIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/geteuid.2.html&quot;&gt; &lt;code&gt;geteuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="af132ca481dc153ef9ccfdc5f748fae75cd7e730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getgid()&lt;/code&gt; method returns the numerical group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getgid.2.html&quot;&gt;&lt;code&gt;getgid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.getgid()&lt;/code&gt; メソッドは、プロセスの数値グループIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getgid.2.html&quot;&gt; &lt;code&gt;getgid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3708eae157d7c0dac42a7a30fd0c9654eb1a1766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getgroups()&lt;/code&gt; method returns an array with the supplementary group IDs. POSIX leaves it unspecified if the effective group ID is included but Node.js ensures it always is.</source>
          <target state="translated">&lt;code&gt;process.getgroups()&lt;/code&gt; メソッドは、補助グループIDの配列を返します。POSIXは、有効なグループIDが含まれている場合は未指定のままにしますが、Node.jsは常に含まれていることを保証します。</target>
        </trans-unit>
        <trans-unit id="d5dca59d0c62895f4a7bb800e388aa9d94396a7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.getuid()&lt;/code&gt; method returns the numeric user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getuid.2.html&quot;&gt;&lt;code&gt;getuid(2)&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;process.getuid()&lt;/code&gt; メソッドは、プロセスの数値ユーザIDを返します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/getuid.2.html&quot;&gt; &lt;code&gt;getuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="211a725b7d93a1ec88ccf7daa8269658983d8aac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.hrtime()&lt;/code&gt; method returns the current high-resolution real time in a &lt;code&gt;[seconds, nanoseconds]&lt;/code&gt; tuple &lt;code&gt;Array&lt;/code&gt;, where &lt;code&gt;nanoseconds&lt;/code&gt; is the remaining part of the real time that can't be represented in second precision.</source>
          <target state="translated">&lt;code&gt;process.hrtime()&lt;/code&gt; メソッドは、現在では高解像度の実時間を返し &lt;code&gt;[seconds, nanoseconds]&lt;/code&gt; タプル &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;nanoseconds&lt;/code&gt; 秒精度で表現できない実時間の残りの部分です。</target>
        </trans-unit>
        <trans-unit id="4be5514b03bd6fa1959b502b9f965ad001625a88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.initgroups()&lt;/code&gt; method reads the &lt;code&gt;/etc/group&lt;/code&gt; file and initializes the group access list, using all groups of which the user is a member. This is a privileged operation that requires that the Node.js process either have &lt;code&gt;root&lt;/code&gt; access or the &lt;code&gt;CAP_SETGID&lt;/code&gt; capability.</source>
          <target state="translated">&lt;code&gt;process.initgroups()&lt;/code&gt; メソッドは、読み出し &lt;code&gt;/etc/group&lt;/code&gt; ファイルを、ユーザーがメンバーであるすべてのグループを使用して、グループアクセスリストを初期化します。これは特権操作であり、Node.jsプロセスに &lt;code&gt;root&lt;/code&gt; アクセスまたは &lt;code&gt;CAP_SETGID&lt;/code&gt; 機能のいずれかが必要です。</target>
        </trans-unit>
        <trans-unit id="762e81bf5ea587278c34db5c315aa6c7bd3317a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.kill()&lt;/code&gt; method sends the &lt;code&gt;signal&lt;/code&gt; to the process identified by &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.kill()&lt;/code&gt; メソッドは、送信 &lt;code&gt;signal&lt;/code&gt; によって識別されるプロセスに &lt;code&gt;pid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75f6018d6315d0eee16c17c8d7ee72c0c45f37fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.mainModule&lt;/code&gt; property provides an alternative way of retrieving &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt;. The difference is that if the main module changes at runtime, &lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt;&lt;code&gt;require.main&lt;/code&gt;&lt;/a&gt; may still refer to the original main module in modules that were required before the change occurred. Generally, it's safe to assume that the two refer to the same module.</source>
          <target state="translated">&lt;code&gt;process.mainModule&lt;/code&gt; のプロパティが取得する別の方法を提供&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; を&lt;/a&gt;。違いは、メインモジュールが実行時に変更された場合、&lt;a href=&quot;modules#modules_accessing_the_main_module&quot;&gt; &lt;code&gt;require.main&lt;/code&gt; &lt;/a&gt;は、変更が発生する前に必要だったモジュールの元のメインモジュールを引き続き参照する可能性があることです。一般に、2つが同じモジュールを参照していると想定しても安全です。</target>
        </trans-unit>
        <trans-unit id="191b911b521fd16f873a9320d9b6eb03a484f7d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.memoryUsage()&lt;/code&gt; method returns an object describing the memory usage of the Node.js process measured in bytes.</source>
          <target state="translated">&lt;code&gt;process.memoryUsage()&lt;/code&gt; メソッドは、バイト単位で測定されたNode.jsのプロセスのメモリ使用量を記述するオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a8983e937ed2efcfdac105808395486f4b6cda97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.noDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--no-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">&lt;code&gt;process.noDeprecation&lt;/code&gt; のプロパティがあるかどうかを示す &lt;code&gt;--no-deprecation&lt;/code&gt; フラグは現在のNode.jsプロセスに設定されています。このフラグの動作の詳細については、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; イベント&lt;/a&gt;と&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; メソッド&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1df30c5c00fda9c639114a7d3b1c2f2d35df2248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.pid&lt;/code&gt; property returns the PID of the process.</source>
          <target state="translated">&lt;code&gt;process.pid&lt;/code&gt; プロパティは、プロセスのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="acaa47049ce31949c1b04bc4f40b7065fb80a583" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.platform&lt;/code&gt; property returns a string identifying the operating system platform on which the Node.js process is running.</source>
          <target state="translated">&lt;code&gt;process.platform&lt;/code&gt; のプロパティは、Node.jsの処理が実行されているオペレーティング・システム・プラットフォームを識別する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="eff9bdee5852ccca216f17f3c7f3889a21c51dc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.ppid&lt;/code&gt; property returns the PID of the current parent process.</source>
          <target state="translated">&lt;code&gt;process.ppid&lt;/code&gt; プロパティは、現在の親プロセスのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="3acb53eed696a06fc2be0999aa3616a400e5b9ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.ppid&lt;/code&gt; property returns the PID of the parent of the current process.</source>
          <target state="translated">&lt;code&gt;process.ppid&lt;/code&gt; プロパティは、現在のプロセスの親のPIDを返します。</target>
        </trans-unit>
        <trans-unit id="b5be56c986bb2a57fe5b74e3d4ff21efc9a8bc0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.release&lt;/code&gt; property returns an &lt;code&gt;Object&lt;/code&gt; containing metadata related to the current release, including URLs for the source tarball and headers-only tarball.</source>
          <target state="translated">&lt;code&gt;process.release&lt;/code&gt; プロパティを返し &lt;code&gt;Object&lt;/code&gt; ソースtarballとヘッダーのみのtarファイルのURLを含む、現在のリリースに関連するメタデータを含有します。</target>
        </trans-unit>
        <trans-unit id="811c638aa90d3dc585a7798554c7019e09390dc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; function sets a function that will be invoked when an uncaught exception occurs, which will receive the exception value itself as its first argument.</source>
          <target state="translated">&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; 関数は、最初の引数として例外値そのものを受信するキャッチされない例外が発生したときに呼び出される関数を設定します。</target>
        </trans-unit>
        <trans-unit id="2fc2a8eeb7c653eb83e8bcad3bd6133d002b2e9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setegid()&lt;/code&gt; method sets the effective group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setegid.2.html&quot;&gt;&lt;code&gt;setegid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated a numeric ID.</source>
          <target state="translated">&lt;code&gt;process.setegid()&lt;/code&gt; メソッドは、プロセスの実効グループIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setegid.2.html&quot;&gt; &lt;code&gt;setegid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはグループ名の文字列として渡すことができます。グループ名が指定されている場合、このメソッドは、関連付けられている数値IDを解決している間ブロックします。</target>
        </trans-unit>
        <trans-unit id="b5076a0f2622ac5941128ba5a36bf507f3fb4978" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.seteuid()&lt;/code&gt; method sets the effective user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/seteuid.2.html&quot;&gt;&lt;code&gt;seteuid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</source>
          <target state="translated">&lt;code&gt;process.seteuid()&lt;/code&gt; メソッドは、プロセスの有効なユーザIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/seteuid.2.html&quot;&gt; &lt;code&gt;seteuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはユーザー名文字列として渡すことができます。ユーザー名が指定されている場合、関連する数値IDを解決している間、メソッドはブロックします。</target>
        </trans-unit>
        <trans-unit id="fa29192faf11ea969773313f63af6ca30198b281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setgid()&lt;/code&gt; method sets the group identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setgid.2.html&quot;&gt;&lt;code&gt;setgid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a group name string. If a group name is specified, this method blocks while resolving the associated numeric ID.</source>
          <target state="translated">&lt;code&gt;process.setgid()&lt;/code&gt; メソッドは、プロセスのグループIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setgid.2.html&quot;&gt; &lt;code&gt;setgid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはグループ名の文字列として渡すことができます。グループ名が指定されている場合、このメソッドは、関連する数値IDを解決している間ブロックします。</target>
        </trans-unit>
        <trans-unit id="71c4c145094b051c684076f71f43e6e3e387e712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setgroups()&lt;/code&gt; method sets the supplementary group IDs for the Node.js process. This is a privileged operation that requires the Node.js process to have &lt;code&gt;root&lt;/code&gt; or the &lt;code&gt;CAP_SETGID&lt;/code&gt; capability.</source>
          <target state="translated">&lt;code&gt;process.setgroups()&lt;/code&gt; メソッドは、Node.jsのプロセスのための補助グループIDを設定します。これは特権操作であり、Node.jsプロセスに &lt;code&gt;root&lt;/code&gt; または &lt;code&gt;CAP_SETGID&lt;/code&gt; 機能が必要です。</target>
        </trans-unit>
        <trans-unit id="548e1236f80bd23b2ec686e399bbc916d2cb95ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.setuid(id)&lt;/code&gt; method sets the user identity of the process. (See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setuid.2.html&quot;&gt;&lt;code&gt;setuid(2)&lt;/code&gt;&lt;/a&gt;.) The &lt;code&gt;id&lt;/code&gt; can be passed as either a numeric ID or a username string. If a username is specified, the method blocks while resolving the associated numeric ID.</source>
          <target state="translated">&lt;code&gt;process.setuid(id)&lt;/code&gt; メソッドは、プロセスのユーザIDを設定します。（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/setuid.2.html&quot;&gt; &lt;code&gt;setuid(2)&lt;/code&gt; を&lt;/a&gt;参照してください。） &lt;code&gt;id&lt;/code&gt; は、数値IDまたはユーザー名文字列として渡すことができます。ユーザー名が指定されている場合、関連する数値IDを解決している間、メソッドはブロックします。</target>
        </trans-unit>
        <trans-unit id="5081fd6ebb2403afeaea915b7bd21a31860635b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stderr&lt;/code&gt; property returns a stream connected to &lt;code&gt;stderr&lt;/code&gt; (fd &lt;code&gt;2&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;2&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;process.stderr&lt;/code&gt; のプロパティが接続ストリーム戻り &lt;code&gt;stderr&lt;/code&gt; （FD &lt;code&gt;2&lt;/code&gt; ）。fd &lt;code&gt;2&lt;/code&gt; がファイルを参照しない限り、それは&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt;ストリーム）です。この場合、ファイルは&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;書き込み可能な&lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="a1fcfbce9ab7065707f5aa8853282b67206fe402" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stdin&lt;/code&gt; property returns a stream connected to &lt;code&gt;stdin&lt;/code&gt; (fd &lt;code&gt;0&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;0&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;process.stdin&lt;/code&gt; プロパティが接続ストリーム戻り &lt;code&gt;stdin&lt;/code&gt; （FD &lt;code&gt;0&lt;/code&gt; ）。fd &lt;code&gt;0&lt;/code&gt; がファイルを参照しない限り、それは&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt;ストリーム）です。その場合、ファイルは&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;読み取り可能な&lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="eb08e01031c16b9aa9d0024fe2532eb2e3e999a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.stdout&lt;/code&gt; property returns a stream connected to &lt;code&gt;stdout&lt;/code&gt; (fd &lt;code&gt;1&lt;/code&gt;). It is a &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; (which is a &lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt; stream) unless fd &lt;code&gt;1&lt;/code&gt; refers to a file, in which case it is a &lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;process.stdout&lt;/code&gt; のプロパティが接続ストリーム戻り &lt;code&gt;stdout&lt;/code&gt; （FD &lt;code&gt;1&lt;/code&gt; ）。fd &lt;code&gt;1&lt;/code&gt; がファイルを参照しない限り、それは&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;stream#stream_duplex_and_transform_streams&quot;&gt;Duplex&lt;/a&gt;ストリーム）です。この場合、ファイルは&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;書き込み可能な&lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="9cd576ae3e4876157374a35dbd6210172c5e9640" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.throwDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--throw-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">&lt;code&gt;process.throwDeprecation&lt;/code&gt; のプロパティがあるかどうかを示す &lt;code&gt;--throw-deprecation&lt;/code&gt; フラグは現在のNode.jsプロセスに設定されています。このフラグの動作の詳細については、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; イベント&lt;/a&gt;と&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; メソッド&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a15c02c35a18d0437643387e177371d9e6917b1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.title&lt;/code&gt; property returns the current process title (i.e. returns the current value of &lt;code&gt;ps&lt;/code&gt;). Assigning a new value to &lt;code&gt;process.title&lt;/code&gt; modifies the current value of &lt;code&gt;ps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;process.title&lt;/code&gt; プロパティは、現在のプロセスタイトル（すなわち、現在の値を返す返し &lt;code&gt;ps&lt;/code&gt; ）。 &lt;code&gt;process.title&lt;/code&gt; に新しい値を割り当てると、 &lt;code&gt;ps&lt;/code&gt; の現在の値が変更されます。</target>
        </trans-unit>
        <trans-unit id="b9b5bc60b8b13672f1ce76e6ac6f0e3f1ed8658c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.traceDeprecation&lt;/code&gt; property indicates whether the &lt;code&gt;--trace-deprecation&lt;/code&gt; flag is set on the current Node.js process. See the documentation for the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt; event&lt;/a&gt; and the &lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt;&lt;code&gt;emitWarning()&lt;/code&gt; method&lt;/a&gt; for more information about this flag's behavior.</source>
          <target state="translated">&lt;code&gt;process.traceDeprecation&lt;/code&gt; のプロパティがあるかどうかを示す &lt;code&gt;--trace-deprecation&lt;/code&gt; フラグは現在のNode.jsプロセスに設定されています。このフラグの動作の詳細については、&lt;a href=&quot;#process_event_warning&quot;&gt; &lt;code&gt;'warning'&lt;/code&gt; イベント&lt;/a&gt;と&lt;a href=&quot;#process_process_emitwarning_warning_type_code_ctor&quot;&gt; &lt;code&gt;emitWarning()&lt;/code&gt; メソッド&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="694d48572e7659a3c90fe3f65ec90ed80b9a9e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.umask()&lt;/code&gt; method sets or returns the Node.js process's file mode creation mask. Child processes inherit the mask from the parent process. Invoked without an argument, the current mask is returned, otherwise the umask is set to the argument value and the previous mask is returned.</source>
          <target state="translated">&lt;code&gt;process.umask()&lt;/code&gt; メソッドのセットや戻りNode.jsのプロセスのファイル・モード作成マスク。子プロセスは親プロセスからマスクを継承します。引数なしで呼び出されると、現在のマスクが返されます。それ以外の場合は、umaskが引数値に設定され、前のマスクが返されます。</target>
        </trans-unit>
        <trans-unit id="d1a2bae7c8b84dc3492873bd48e3d5fc03d34913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.uptime()&lt;/code&gt; method returns the number of seconds the current Node.js process has been running.</source>
          <target state="translated">&lt;code&gt;process.uptime()&lt;/code&gt; メソッドは、現在のNode.jsプロセスが実行された秒数を返します。</target>
        </trans-unit>
        <trans-unit id="bde800f2ea7200eb51373a0760af4ac542e9ef84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.version&lt;/code&gt; property contains the Node.js version string.</source>
          <target state="translated">&lt;code&gt;process.version&lt;/code&gt; のプロパティは、Node.jsのバージョン文字列が含まれています。</target>
        </trans-unit>
        <trans-unit id="a55e19423be1cf5e5fd45f377c01fd1c5c5c7be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.version&lt;/code&gt; property returns the Node.js version string.</source>
          <target state="translated">&lt;code&gt;process.version&lt;/code&gt; のプロパティは、Node.jsのバージョン文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5cd91315fa24f2e5fb1ec6c0fe3012d7b04a6c87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.versions&lt;/code&gt; property returns an object listing the version strings of Node.js and its dependencies. &lt;code&gt;process.versions.modules&lt;/code&gt; indicates the current ABI version, which is increased whenever a C++ API changes. Node.js will refuse to load modules that were compiled against a different module ABI version.</source>
          <target state="translated">&lt;code&gt;process.versions&lt;/code&gt; のプロパティは、Node.jsのとその依存関係のバージョン文字列をリストオブジェクトを返します。 &lt;code&gt;process.versions.modules&lt;/code&gt; は、現在のABIバージョンを示します。これは、C ++ APIが変更されるたびに増加します。Node.jsは、異なるモジュールのABIバージョンに対してコンパイルされたモジュールのロードを拒否します。</target>
        </trans-unit>
        <trans-unit id="ccc599c540c487983716c87164c83eff4013c0e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process&lt;/code&gt; object is a &lt;code&gt;global&lt;/code&gt; that provides information about, and control over, the current Node.js process. As a global, it is always available to Node.js applications without using &lt;code&gt;require()&lt;/code&gt;. It can also be explicitly accessed using &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; オブジェクトは、 &lt;code&gt;global&lt;/code&gt; 情報を提供すること、および現在のNode.jsプロセスの制御。グローバルとして、 &lt;code&gt;require()&lt;/code&gt; を使用せずにNode.jsアプリケーションで常に使用できます。 &lt;code&gt;require()&lt;/code&gt; を使用して明示的にアクセスすることもできます：</target>
        </trans-unit>
        <trans-unit id="bc3750100f2cebbb32bfd75aab8de7089d8ecadb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process&lt;/code&gt; object is an instance of &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; オブジェクトは、インスタンスである&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="16d89af6e6069a7f2da9647bc46587a5e575bc24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; is deprecated in favour of &lt;code&gt;script.createCachedData()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;produceCachedData&lt;/code&gt; はを支持して推奨されません &lt;code&gt;script.createCachedData()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36a59df4efa190407311884d6561af4f5706054a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; is deprecated in favour of &lt;code&gt;script.createCachedData()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;produceCachedData&lt;/code&gt; はを支持して推奨されません &lt;code&gt;script.createCachedData()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d20471aca1c68e2609119fc1a3be70dd8ae453d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;produceCachedData&lt;/code&gt; option is deprecated. Use &lt;a href=&quot;vm#vm_script_createcacheddata&quot;&gt;&lt;code&gt;script.createCachedData()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;produceCachedData&lt;/code&gt; のオプションが推奨されていません。代わりに&lt;a href=&quot;vm#vm_script_createcacheddata&quot;&gt; &lt;code&gt;script.createCachedData()&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="826f7bd6fc7391d89e12f247d46ccc2f906c4e5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prompt&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;prompt&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="a98c7c4f83c7e514f693d9bddfce7f7e87772c91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;protocol&lt;/code&gt; property identifies the URL's lower-cased protocol scheme.</source>
          <target state="translated">&lt;code&gt;protocol&lt;/code&gt; プロパティは、URLの小文字に変換プロトコルスキームを識別します。</target>
        </trans-unit>
        <trans-unit id="e292c94bf408419754bdd997696c8365665d09cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pskCallback&lt;/code&gt; option is now supported.</source>
          <target state="translated">&lt;code&gt;pskCallback&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="228c4ac856e053044883415e7373842750fd563f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.decode()&lt;/code&gt; method converts a &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; string of ASCII-only characters to the equivalent string of Unicode codepoints.</source>
          <target state="translated">&lt;code&gt;punycode.decode()&lt;/code&gt; メソッドは、変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードの&lt;/a&gt; Unicodeのコードポイントの等価文字列に、ASCII文字のみの文字列。</target>
        </trans-unit>
        <trans-unit id="408bbc431e16aec56b6b6e8fb9712fe1f4b62965" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.encode()&lt;/code&gt; method converts a string of Unicode codepoints to a &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; string of ASCII-only characters.</source>
          <target state="translated">&lt;code&gt;punycode.encode()&lt;/code&gt; メソッドは、へのUnicodeコードポイントの文字列に変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードの&lt;/a&gt; ASCIIのみの文字列を。</target>
        </trans-unit>
        <trans-unit id="91875f6288f895ce3a2a09be67905a3132039dee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.toASCII()&lt;/code&gt; method converts a Unicode string representing an Internationalized Domain Name to &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt;. Only the non-ASCII parts of the domain name will be converted. Calling &lt;code&gt;punycode.toASCII()&lt;/code&gt; on a string that already only contains ASCII characters will have no effect.</source>
          <target state="translated">&lt;code&gt;punycode.toASCII()&lt;/code&gt; メソッドは、に国際化ドメイン名を表すUnicode文字列に変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードを&lt;/a&gt;。ドメイン名の非ASCII部分のみが変換されます。既にASCII文字のみが含まれている文字列に対して &lt;code&gt;punycode.toASCII()&lt;/code&gt; を呼び出しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="cc4b8dfe8ceb6a10ad2abdbc92c91f0d4a7f2f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.toUnicode()&lt;/code&gt; method converts a string representing a domain name containing &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; encoded characters into Unicode. Only the &lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycode&lt;/a&gt; encoded parts of the domain name are be converted.</source>
          <target state="translated">&lt;code&gt;punycode.toUnicode()&lt;/code&gt; メソッドが含まれているドメイン名を表す文字列に変換&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;ピュニコードが&lt;/a&gt;ユニコード文字にエンコード。ドメイン名の&lt;a href=&quot;https://tools.ietf.org/html/rfc3492&quot;&gt;Punycodeで&lt;/a&gt;エンコードされた部分のみが変換されます。</target>
        </trans-unit>
        <trans-unit id="0befa44f7babd888957b6e36c930438b76ffd9ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.ucs2.decode()&lt;/code&gt; method returns an array containing the numeric codepoint values of each Unicode symbol in the string.</source>
          <target state="translated">&lt;code&gt;punycode.ucs2.decode()&lt;/code&gt; メソッドは、文字列内の各Unicodeのシンボルの数値コードポイント値を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="267a9d0ce3eff929cfb8ef044cf76a59b55c9c1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode.ucs2.encode()&lt;/code&gt; method returns a string based on an array of numeric code point values.</source>
          <target state="translated">&lt;code&gt;punycode.ucs2.encode()&lt;/code&gt; メソッドは、数値コードポイント値の配列に基づいて、文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8e23d6e8be896f3734158314b4e9867f3ad47751" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module is a bundled version of the &lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt; module. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;punycode&lt;/code&gt; モジュールは、バンドル版のある&lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.jsの&lt;/a&gt;モジュール。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d808670b3cd55126d38e22493d03f04db2cf6c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module is a third-party dependency used by Node.js and made available to developers as a convenience. Fixes or other modifications to the module must be directed to the &lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt; project.</source>
          <target state="translated">&lt;code&gt;punycode&lt;/code&gt; モジュールのNode.jsで使用されるサードパーティ依存性であり、利便性の開発者に利用可能となります。モジュールの修正またはその他の変更は、&lt;a href=&quot;https://github.com/bestiejs/punycode.js&quot;&gt;Punycode.js&lt;/a&gt;プロジェクトに送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="41de5cb0574f2fba4ee155fa5a1b2a348c0df173" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;punycode&lt;/code&gt; module provides a simple implementation of the Punycode standard.</source>
          <target state="translated">&lt;code&gt;punycode&lt;/code&gt; モジュールは、ピュニコード標準の単純な実装を提供します。</target>
        </trans-unit>
        <trans-unit id="73bb1f54941b1b2bcfe26b1faa1939a3272676d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query&lt;/code&gt; property is either the query string without the leading ASCII question mark (&lt;code&gt;?&lt;/code&gt;), or an object returned by the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;parse()&lt;/code&gt; method. Whether the &lt;code&gt;query&lt;/code&gt; property is a string or object is determined by the &lt;code&gt;parseQueryString&lt;/code&gt; argument passed to &lt;code&gt;url.parse()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;query&lt;/code&gt; プロパティは、主要なASCIIの疑問符（なしのクエリ文字列のいずれかである &lt;code&gt;?&lt;/code&gt; ）、またはによって返されたオブジェクト&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;モジュールの &lt;code&gt;parse()&lt;/code&gt; メソッド。かどうかを &lt;code&gt;query&lt;/code&gt; プロパティは、文字列またはオブジェクトであることによって決定され &lt;code&gt;parseQueryString&lt;/code&gt; のに渡される引数 &lt;code&gt;url.parse()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2153550243326c160d012c291015912a1ad6a730" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.decode()&lt;/code&gt; function is an alias for &lt;code&gt;querystring.parse()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.decode()&lt;/code&gt; 関数での別名である &lt;code&gt;querystring.parse()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bed9c0e3a6a05f53d9ef96d274c51de9ef8679c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.encode()&lt;/code&gt; function is an alias for &lt;code&gt;querystring.stringify()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.encode()&lt;/code&gt; 関数での別名である &lt;code&gt;querystring.stringify()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6132c47d28eb2786bc7bb47dc7d4db7a3c2ff1d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.escape()&lt;/code&gt; method is used by &lt;code&gt;querystring.stringify()&lt;/code&gt; and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement percent-encoding implementation if necessary by assigning &lt;code&gt;querystring.escape&lt;/code&gt; to an alternative function.</source>
          <target state="translated">&lt;code&gt;querystring.escape()&lt;/code&gt; メソッドは、で使用される &lt;code&gt;querystring.stringify()&lt;/code&gt; と一般的に直接使用されることが期待されていません。これは主にエクスポートされ、必要に応じて &lt;code&gt;querystring.escape&lt;/code&gt; を代替関数に割り当てることにより、アプリケーションコードが置換パーセントエンコーディング実装を提供できるようにします。</target>
        </trans-unit>
        <trans-unit id="c5224c380629537428e0e4f4c27dbf51ea35016e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.escape()&lt;/code&gt; method performs URL percent-encoding on the given &lt;code&gt;str&lt;/code&gt; in a manner that is optimized for the specific requirements of URL query strings.</source>
          <target state="translated">&lt;code&gt;querystring.escape()&lt;/code&gt; 所与のメソッドを実行するURLパーセントエンコーディング &lt;code&gt;str&lt;/code&gt; URLのクエリ文字列の特定の要件のために最適化されている方法です。</target>
        </trans-unit>
        <trans-unit id="5a10b77992e833bb7410543f2bec62c4ac5b0e9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.parse()&lt;/code&gt; method parses a URL query string (&lt;code&gt;str&lt;/code&gt;) into a collection of key and value pairs.</source>
          <target state="translated">&lt;code&gt;querystring.parse()&lt;/code&gt; メソッドは、URLのクエリ文字列（解析し、 &lt;code&gt;str&lt;/code&gt; キーと値のペアのコレクションの中に）。</target>
        </trans-unit>
        <trans-unit id="e5a1960ba5fd4e2b74aca2fe1c165907f1f0d579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.stringify()&lt;/code&gt; method produces a URL query string from a given &lt;code&gt;obj&lt;/code&gt; by iterating through the object's &quot;own properties&quot;.</source>
          <target state="translated">&lt;code&gt;querystring.stringify()&lt;/code&gt; メソッドは、指定されたからURLクエリ文字列を生成 &lt;code&gt;obj&lt;/code&gt; 、オブジェクトの「独自のプロパティ」を反復処理による。</target>
        </trans-unit>
        <trans-unit id="c5307406ea6fa7bf57e06f70c0174467f51d9697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.unescape()&lt;/code&gt; method is used by &lt;code&gt;querystring.parse()&lt;/code&gt; and is generally not expected to be used directly. It is exported primarily to allow application code to provide a replacement decoding implementation if necessary by assigning &lt;code&gt;querystring.unescape&lt;/code&gt; to an alternative function.</source>
          <target state="translated">&lt;code&gt;querystring.unescape()&lt;/code&gt; メソッドは、で使用される &lt;code&gt;querystring.parse()&lt;/code&gt; と一般的に直接使用されることが期待されていません。これは主にエクスポートされ、必要に応じて &lt;code&gt;querystring.unescape&lt;/code&gt; を代替関数に割り当てることにより、アプリケーションコードが代替のデコード実装を提供できるようにします。</target>
        </trans-unit>
        <trans-unit id="3dfebb02c6228ac8a5328e125126812feb5b89f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring.unescape()&lt;/code&gt; method performs decoding of URL percent-encoded characters on the given &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.unescape()&lt;/code&gt; 所与のURLパーセントエンコード文字のデコード方法を行う &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6d1c0ca34aa769ac9ddc016377ff8b652b08575" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;querystring&lt;/code&gt; module provides utilities for parsing and formatting URL query strings. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;querystring&lt;/code&gt; モジュールは、URLのクエリ文字列を解析してフォーマットするためのユーティリティを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="30245987a4dc60e4e4ad7243ddad02cac4a76463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;queueMicrotask()&lt;/code&gt; method queues a microtask to invoke &lt;code&gt;callback&lt;/code&gt;. If &lt;code&gt;callback&lt;/code&gt; throws an exception, the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">&lt;code&gt;queueMicrotask()&lt;/code&gt; メソッドを呼び出すためにマイクロタスクをキューに &lt;code&gt;callback&lt;/code&gt; 。場合 &lt;code&gt;callback&lt;/code&gt; 例外をスローし、&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; オブジェクト&lt;/a&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="365157af4fa82be9fbeff8df2a4aac4eb9985806" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quicendpoint.bind()&lt;/code&gt; function returns &lt;code&gt;Promise&lt;/code&gt; that will be resolved with the address once the bind operation is successful.</source>
          <target state="translated">&lt;code&gt;quicendpoint.bind()&lt;/code&gt; 関数が返す &lt;code&gt;Promise&lt;/code&gt; バインド操作が成功したら、アドレスが解決されます。</target>
        </trans-unit>
        <trans-unit id="988226071ab6d6f18473c4c67983d0d221362d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quicsocket.setDiagnosticPacketLoss()&lt;/code&gt; method is a diagnostic only tool that can be used to &lt;em&gt;simulate&lt;/em&gt; packet loss conditions for this &lt;code&gt;QuicSocket&lt;/code&gt; by artificially dropping received or transmitted packets.</source>
          <target state="translated">&lt;code&gt;quicsocket.setDiagnosticPacketLoss()&lt;/code&gt; メソッドは、に使用することができる診断ツールだけで&lt;em&gt;シミュレート&lt;/em&gt;このためパケット損失条件 &lt;code&gt;QuicSocket&lt;/code&gt; 人工的に受信または送信されたパケットをドロップすることによって。</target>
        </trans-unit>
        <trans-unit id="39930c61db776c2617ebaa27b1b42a4bdf7d2790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rawPacket&lt;/code&gt; is the current buffer that just parsed. Adding this buffer to the error object of &lt;code&gt;'clientError'&lt;/code&gt; event is to make it possible that developers can log the broken packet.</source>
          <target state="translated">&lt;code&gt;rawPacket&lt;/code&gt; はちょうど解析され、現在のバッファです。このバッファを &lt;code&gt;'clientError'&lt;/code&gt; イベントのエラーオブジェクトに追加すると、開発者が壊れたパケットをログに記録できるようになります。</target>
        </trans-unit>
        <trans-unit id="93ee6743dbfa8019b82c97cbc7225730ee7f7113" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable._read()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;readable._read()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="10cec6d0c6d91f034eb6cec16dd30e3ca6d38432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.isPaused()&lt;/code&gt; method returns the current operating state of the &lt;code&gt;Readable&lt;/code&gt;. This is used primarily by the mechanism that underlies the &lt;code&gt;readable.pipe()&lt;/code&gt; method. In most typical cases, there will be no reason to use this method directly.</source>
          <target state="translated">&lt;code&gt;readable.isPaused()&lt;/code&gt; メソッドは、現在の動作状態を返し &lt;code&gt;Readable&lt;/code&gt; 。これは主に、 &lt;code&gt;readable.pipe()&lt;/code&gt; メソッドの基礎となるメカニズムによって使用されます。ほとんどの場合、この方法を直接使用する理由はありません。</target>
        </trans-unit>
        <trans-unit id="b31cf177473ce29edcad6d40ce117be0e7f14407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pause()&lt;/code&gt; method has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listener.</source>
          <target state="translated">&lt;code&gt;readable.pause()&lt;/code&gt; がある場合、この方法は効果がありません &lt;code&gt;'readable'&lt;/code&gt; イベントリスナ。</target>
        </trans-unit>
        <trans-unit id="b002965c32b67e9b46208135e46530c174b4fc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pause()&lt;/code&gt; method will cause a stream in flowing mode to stop emitting &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events, switching out of flowing mode. Any data that becomes available will remain in the internal buffer.</source>
          <target state="translated">&lt;code&gt;readable.pause()&lt;/code&gt; メソッドは、発光停止に流れるモードでストリーム原因となります&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;モードを流すアウト切り替え、イベントを。使用可能になったデータはすべて内部バッファーに残ります。</target>
        </trans-unit>
        <trans-unit id="4eb396a0c95f297e4817955f466c443654703ac3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pipe()&lt;/code&gt; method attaches a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream to the &lt;code&gt;readable&lt;/code&gt;, causing it to switch automatically into flowing mode and push all of its data to the attached &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt;. The flow of data will be automatically managed so that the destination &lt;code&gt;Writable&lt;/code&gt; stream is not overwhelmed by a faster &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;readable.pipe()&lt;/code&gt; メソッドは、添付&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;にストリームを &lt;code&gt;readable&lt;/code&gt; ことが流れるモードに自動的に切り替わり、添付へのデータの全てをプッシュさせる、&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;。データのフローは自動的に管理されるので、宛先の &lt;code&gt;Writable&lt;/code&gt; ストリームが、より高速 &lt;code&gt;Readable&lt;/code&gt; ストリームによって圧倒されることはありません。</target>
        </trans-unit>
        <trans-unit id="40beb50c9579d94c270f6b6fd52c38e624a46fb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.pipe()&lt;/code&gt; method returns a reference to the &lt;em&gt;destination&lt;/em&gt; stream making it possible to set up chains of piped streams:</source>
          <target state="translated">&lt;code&gt;readable.pipe()&lt;/code&gt; メソッドへの参照戻り&lt;em&gt;先&lt;/em&gt;パイプストリームのチェーンを設定することが可能となるストリーム。</target>
        </trans-unit>
        <trans-unit id="df0ca1507c102328f0c4d38e0061a85b34869b62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is designed to be as flexible as possible. For example, when wrapping a lower-level source that provides some form of pause/resume mechanism, and a data callback, the low-level source can be wrapped by the custom &lt;code&gt;Readable&lt;/code&gt; instance:</source>
          <target state="translated">&lt;code&gt;readable.push()&lt;/code&gt; メソッドはできるだけ柔軟であるように設計されます。たとえば、何らかの形式の一時停止/再開メカニズムを提供する下位レベルのソースとデータコールバックをラップする場合、下位レベルのソースはカスタムの &lt;code&gt;Readable&lt;/code&gt; インスタンスによってラップできます。</target>
        </trans-unit>
        <trans-unit id="3f5e547595479ed3384e0eb249b538f6f2836384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is intended be called only by &lt;code&gt;Readable&lt;/code&gt; implementers, and only from within the &lt;code&gt;readable._read()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;readable.push()&lt;/code&gt; のみによって呼び出されるメソッドが意図されている &lt;code&gt;Readable&lt;/code&gt; 実装、およびのみの中から &lt;code&gt;readable._read()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="b50754a4ac299420108073c4c9524b56daf2bb5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.push()&lt;/code&gt; method is used to push the content into the internal buffer. It can be driven by the &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;readable.push()&lt;/code&gt; メソッドは、内部バッファにコンテンツをプッシュするために使用されます。&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;メソッドで駆動できます。</target>
        </trans-unit>
        <trans-unit id="7524ab06bd3d9013528b860fd7928c96bab32f50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.read()&lt;/code&gt; method pulls some data out of the internal buffer and returns it. If no data available to be read, &lt;code&gt;null&lt;/code&gt; is returned. By default, the data will be returned as a &lt;code&gt;Buffer&lt;/code&gt; object unless an encoding has been specified using the &lt;code&gt;readable.setEncoding()&lt;/code&gt; method or the stream is operating in object mode.</source>
          <target state="translated">&lt;code&gt;readable.read()&lt;/code&gt; メソッドは、内部バッファ及び戻りそこからいくつかのデータを引っ張ります。読み取るデータがない場合は、 &lt;code&gt;null&lt;/code&gt; が返されます。デフォルトでは、 &lt;code&gt;readable.setEncoding()&lt;/code&gt; メソッドを使用してエンコーディングが指定されていないか、ストリームがオブジェクトモードで動作していない限り、データは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして返されます。</target>
        </trans-unit>
        <trans-unit id="6d01a823a8005400d55db78dcbbecbca4b2d2630" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.read()&lt;/code&gt; method should only be called on &lt;code&gt;Readable&lt;/code&gt; streams operating in paused mode. In flowing mode, &lt;code&gt;readable.read()&lt;/code&gt; is called automatically until the internal buffer is fully drained.</source>
          <target state="translated">&lt;code&gt;readable.read()&lt;/code&gt; メソッドは、上で呼び出されるべきで &lt;code&gt;Readable&lt;/code&gt; 一時停止モードで動作するストリーム。フローモードでは、内部バッファーが完全に空になるまで、 &lt;code&gt;readable.read()&lt;/code&gt; が自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="deed8c40399d92ccac8f49f87f78ca29453829e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method can be used to fully consume the data from a stream without actually processing any of that data:</source>
          <target state="translated">&lt;code&gt;readable.resume()&lt;/code&gt; メソッドは、完全に実際にそのデータのいずれかを処理することなく、ストリームからデータを消費するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="67b8504af943e24f27cd912b4a2f12f128f2a1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method causes an explicitly paused &lt;code&gt;Readable&lt;/code&gt; stream to resume emitting &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; events, switching the stream into flowing mode.</source>
          <target state="translated">&lt;code&gt;readable.resume()&lt;/code&gt; メソッドは、明示的に一時停止させる &lt;code&gt;Readable&lt;/code&gt; 発光再開するストリーム&lt;a href=&quot;#stream_event_data&quot;&gt; &lt;code&gt;'data'&lt;/code&gt; &lt;/a&gt;流動モードにストリームを切り替え、イベント。</target>
        </trans-unit>
        <trans-unit id="385656b7c5ea9118f2532b255395a4a4185c8bf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.resume()&lt;/code&gt; method has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listener.</source>
          <target state="translated">&lt;code&gt;readable.resume()&lt;/code&gt; がある場合、この方法は効果がありません &lt;code&gt;'readable'&lt;/code&gt; イベントリスナ。</target>
        </trans-unit>
        <trans-unit id="c040a86eed6518119372b49051a74bee86060ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.setEncoding()&lt;/code&gt; method sets the character encoding for data read from the &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="translated">&lt;code&gt;readable.setEncoding()&lt;/code&gt; メソッドは、から読み出されたデータをコード文字セット &lt;code&gt;Readable&lt;/code&gt; ストリーム。</target>
        </trans-unit>
        <trans-unit id="346734afb05ca4e259af67e729481a1570cc346e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.unpipe()&lt;/code&gt; method detaches a &lt;code&gt;Writable&lt;/code&gt; stream previously attached using the &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;readable.unpipe()&lt;/code&gt; メソッドは、切り離し &lt;code&gt;Writable&lt;/code&gt; 以前に使用して取り付けられたストリーム&lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt; &lt;code&gt;stream.pipe()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="3c3b8b68124246bfe57ac4975a1c8937cd39a32e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readable.unshift()&lt;/code&gt; method pushes a chunk of data back into the internal buffer. This is useful in certain situations where a stream is being consumed by code that needs to &quot;un-consume&quot; some amount of data that it has optimistically pulled out of the source, so that the data can be passed on to some other party.</source>
          <target state="translated">&lt;code&gt;readable.unshift()&lt;/code&gt; メソッドは、内部バッファへのデータバックのチャンクを押します。これは、ストリームがソースから楽観的に引き出したある量のデータを「消費しない」必要があるコードによって消費されている特定の状況で役立ちます。これにより、データを他のパーティに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="af39af0d7243c6f7a04b6565b68a4532aecaac6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readableHighWaterMark&lt;/code&gt; and &lt;code&gt;writableHighWaterMark&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;readableHighWaterMark&lt;/code&gt; と &lt;code&gt;writableHighWaterMark&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="2d1b65b3e284d939a421aa08437a85f01cbacf02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readableHighWaterMark&lt;/code&gt; value mirrors that of the socket.</source>
          <target state="translated">&lt;code&gt;readableHighWaterMark&lt;/code&gt; のそのソケットの価値ミラー。</target>
        </trans-unit>
        <trans-unit id="caf7cf20b5829c60b2ece6960157ef5b46432184" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.Interface&lt;/code&gt; instance is finished once the &lt;code&gt;'close'&lt;/code&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;readline.Interface&lt;/code&gt; の後にインスタンスが終了した &lt;code&gt;'close'&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="e4bd58e1c634bfc6e7a4aea91a5e49231b1c0690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.clearLine()&lt;/code&gt; method clears current line of given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; stream in a specified direction identified by &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readline.clearLine()&lt;/code&gt; メソッドは、所与の電流線クリア&lt;a href=&quot;tty&quot;&gt;のTTY&lt;/a&gt;によって識別指定された方向に流れを &lt;code&gt;dir&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4426aa47fac03cd3a3473ed655e8669aed5da5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.clearScreenDown()&lt;/code&gt; method clears the given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; stream from the current position of the cursor down.</source>
          <target state="translated">&lt;code&gt;readline.clearScreenDown()&lt;/code&gt; メソッドは、指定されたクリア&lt;a href=&quot;tty&quot;&gt;TTYの&lt;/a&gt;カーソルの下の現在位置からのストリームを。</target>
        </trans-unit>
        <trans-unit id="5fc664c5790e107254a94b5912d0bd3240885968" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.createInterface()&lt;/code&gt; method creates a new &lt;code&gt;readline.Interface&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;readline.createInterface()&lt;/code&gt; メソッドは、新規作成 &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンス。</target>
        </trans-unit>
        <trans-unit id="5836c4f9ce7c37e68b431dba356d7f48120837c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.cursorTo()&lt;/code&gt; method moves cursor to the specified position in a given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;&lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readline.cursorTo()&lt;/code&gt; メソッドの移動は、所定の指定された位置にカーソル&lt;a href=&quot;tty&quot;&gt;のTTY &lt;/a&gt; &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="07bae1b92e44b9c284369abc211727c51537a250" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.emitKeypressEvents()&lt;/code&gt; method causes the given &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream to begin emitting &lt;code&gt;'keypress'&lt;/code&gt; events corresponding to received input.</source>
          <target state="translated">&lt;code&gt;readline.emitKeypressEvents()&lt;/code&gt; メソッドは、指定された原因&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;可読&lt;/a&gt;発光開始するストリームを &lt;code&gt;'keypress'&lt;/code&gt; 受け取った入力に対応するイベント。</target>
        </trans-unit>
        <trans-unit id="17e092a48964934cca04dfb7cdd8d3238574e8df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline.moveCursor()&lt;/code&gt; method moves the cursor &lt;em&gt;relative&lt;/em&gt; to its current position in a given &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;&lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readline.moveCursor()&lt;/code&gt; メソッドは、カーソル移動&lt;em&gt;の相対的な&lt;/em&gt;所与におけるその現在の位置へ&lt;a href=&quot;tty&quot;&gt;のTTY &lt;/a&gt; &lt;code&gt;stream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e79db115dc200fa9356a7c5ef91d8c9284c30f2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readline&lt;/code&gt; module provides an interface for reading data from a &lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream (such as &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt;) one line at a time. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;readline&lt;/code&gt; のモジュールからデータを読み取るためのインターフェースを提供&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;読み取り可能な&lt;/a&gt;（例えば、ストリーム&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;時）一行。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a52edae9e57a8752dfeccf5b524e03b8ecdef2e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursive&lt;/code&gt;, &lt;code&gt;maxBusyTries&lt;/code&gt;, and &lt;code&gt;emfileWait&lt;/code&gt; options are now supported.</source>
          <target state="translated">&lt;code&gt;recursive&lt;/code&gt; 、 &lt;code&gt;maxBusyTries&lt;/code&gt; 、および &lt;code&gt;emfileWait&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="91a37ef88760a1e1055abebacad77b336f36d8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recvBufferSize&lt;/code&gt; and &lt;code&gt;sendBufferSize&lt;/code&gt; options are supported now.</source>
          <target state="translated">&lt;code&gt;recvBufferSize&lt;/code&gt; と &lt;code&gt;sendBufferSize&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="297f39796ec740fbf6ca8c7b4f53526f22394916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl.REPLServer&lt;/code&gt; class inherits from the &lt;a href=&quot;readline#readline_class_interface&quot;&gt;&lt;code&gt;readline.Interface&lt;/code&gt;&lt;/a&gt; class. Instances of &lt;code&gt;repl.REPLServer&lt;/code&gt; are created using the &lt;code&gt;repl.start()&lt;/code&gt; method and &lt;em&gt;should not&lt;/em&gt; be created directly using the JavaScript &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;repl.REPLServer&lt;/code&gt; のからクラスを継承&lt;a href=&quot;readline#readline_class_interface&quot;&gt; &lt;code&gt;readline.Interface&lt;/code&gt; の&lt;/a&gt;クラス。 &lt;code&gt;repl.REPLServer&lt;/code&gt; のインスタンスはrepl.start &lt;code&gt;repl.start()&lt;/code&gt; メソッドを使用して作成されます。JavaScriptの &lt;code&gt;new&lt;/code&gt; キーワードを使用して直接作成し&lt;em&gt;ない&lt;/em&gt;で&lt;em&gt;ください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="046929e0c4d6f589b8a544a51cc42f7fb89edf9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl.start()&lt;/code&gt; method creates and starts a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;code&gt;repl.start()&lt;/code&gt; メソッドを作成して開始&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="90f98e1e7da501cb08e226bfb8ef8830de8da4f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; command allows code to be evaluated remotely. The &lt;code&gt;next&lt;/code&gt; command steps to the next line. Type &lt;code&gt;help&lt;/code&gt; to see what other commands are available.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; コマンドは、コードをリモートに評価することを可能にします。 &lt;code&gt;next&lt;/code&gt; のコマンドは、次の行に繰り返します。 &lt;code&gt;help&lt;/code&gt; と入力して、他に利用できるコマンドを確認します。</target>
        </trans-unit>
        <trans-unit id="fa5f5595f4359a04fba7678590750d842bb72f80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module exported the input and output stream twice. Use &lt;code&gt;.input&lt;/code&gt; instead of &lt;code&gt;.inputStream&lt;/code&gt; and &lt;code&gt;.output&lt;/code&gt; instead of &lt;code&gt;.outputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、二回の入力および出力ストリームを輸出しました。使用 &lt;code&gt;.input&lt;/code&gt; の代わりに &lt;code&gt;.inputStream&lt;/code&gt; と &lt;code&gt;.output&lt;/code&gt; の代わりに &lt;code&gt;.outputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d59a38d0202d212fe1c462ed4fde73d86cb47fa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module exports a &lt;code&gt;_builtinLibs&lt;/code&gt; property that contains an array with native modules. It was incomplete so far and instead it's better to rely upon &lt;code&gt;require('module').builtinModules&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュール輸出 &lt;code&gt;_builtinLibs&lt;/code&gt; ネイティブモジュールの配列を含むプロパティを。これまでのところ不完全でしたが、代わりに &lt;code&gt;require('module').builtinModules&lt;/code&gt; に依存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0c7e83295655ebdff0b8c9ba68d0bc6b523483cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module exports the &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; class. While running, instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; will accept individual lines of user input, evaluate those according to a user-defined evaluation function, then output the result. Input and output may be from &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;, respectively, or may be connected to any Node.js &lt;a href=&quot;stream&quot;&gt;stream&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、エクスポート&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;クラスを。実行中、&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; の&lt;/a&gt;インスタンスはユーザー入力の個々の行を受け入れ、ユーザー定義の評価関数に従ってそれらを評価し、結果を出力します。入力と出力は、それぞれ &lt;code&gt;stdin&lt;/code&gt; と &lt;code&gt;stdout&lt;/code&gt; から、または任意のNode.js &lt;a href=&quot;stream&quot;&gt;ストリームに&lt;/a&gt;接続できます。</target>
        </trans-unit>
        <trans-unit id="1951a81b0b8f762a64a14d642731c2b48d00965d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module provides a Read-Eval-Print-Loop (REPL) implementation that is available both as a standalone program or includible in other applications. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、スタンドアロンプログラムとして、または他のアプリケーションでincludible両方利用可能である読み取りEVAL-プリントループ（REPL）の実装を提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cf27f1073da71855d9a610f1a35c2a529c179f5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module was unable to parse data from the REPL history file.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールは、REPL履歴ファイルからのデータを解析することができませんでした。</target>
        </trans-unit>
        <trans-unit id="1a2ad03c80c14a3c16014aedd8e247faf5bc99d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;repl&lt;/code&gt; module's &lt;code&gt;REPL_MODE_MAGIC&lt;/code&gt; constant, used for &lt;code&gt;replMode&lt;/code&gt; option, has been removed. Its behavior has been functionally identical to that of &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; since Node.js 6.0.0, when V8 5.0 was imported. Please use &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;repl&lt;/code&gt; モジュールの &lt;code&gt;REPL_MODE_MAGIC&lt;/code&gt; のために使用される定数、 &lt;code&gt;replMode&lt;/code&gt; のオプションは、削除されました。その動作は、V8 5.0がインポートされたときのNode.js 6.0.0以降、 &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; の動作と機能的に同じです。代わりに &lt;code&gt;REPL_MODE_SLOPPY&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="7623117240409b0ce2003070bd63b8fe2d453bbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.clearBufferedCommand()&lt;/code&gt; method clears any command that has been buffered but not yet executed. This method is primarily intended to be called from within the action function for commands registered using the &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;replServer.clearBufferedCommand()&lt;/code&gt; メソッドは、バッファではなく、まだ実行されている任意のコマンドをクリアします。このメソッドは、主に &lt;code&gt;replServer.defineCommand()&lt;/code&gt; メソッドを使用して登録されたコマンドのアクション関数内から呼び出されることを目的としています。</target>
        </trans-unit>
        <trans-unit id="8f32cec1ea1335c2f16445f6aac3c850821e3c78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method is used to add new &lt;code&gt;.&lt;/code&gt;-prefixed commands to the REPL instance. Such commands are invoked by typing a &lt;code&gt;.&lt;/code&gt; followed by the &lt;code&gt;keyword&lt;/code&gt;. The &lt;code&gt;cmd&lt;/code&gt; is either a &lt;code&gt;Function&lt;/code&gt; or an &lt;code&gt;Object&lt;/code&gt; with the following properties:</source>
          <target state="translated">&lt;code&gt;replServer.defineCommand()&lt;/code&gt; メソッドは、新しい追加するために使用されます &lt;code&gt;.&lt;/code&gt; -REPLインスタンスへの接頭辞付きコマンド。このようなコマンドは、を入力して呼び出されます &lt;code&gt;.&lt;/code&gt; &lt;code&gt;keyword&lt;/code&gt; 続きます。 &lt;code&gt;cmd&lt;/code&gt; はどちらかである &lt;code&gt;Function&lt;/code&gt; や &lt;code&gt;Object&lt;/code&gt; 次のプロパティを持ちます：</target>
        </trans-unit>
        <trans-unit id="77d9fdd8690bcc5161c48aab54bfce43107e70ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.displayPrompt()&lt;/code&gt; method readies the REPL instance for input from the user, printing the configured &lt;code&gt;prompt&lt;/code&gt; to a new line in the &lt;code&gt;output&lt;/code&gt; and resuming the &lt;code&gt;input&lt;/code&gt; to accept new input.</source>
          <target state="translated">&lt;code&gt;replServer.displayPrompt()&lt;/code&gt; メソッドは、設定、印刷、ユーザからの入力をREPLインスタンスを構える &lt;code&gt;prompt&lt;/code&gt; に新しい行に &lt;code&gt;output&lt;/code&gt; し、再開 &lt;code&gt;input&lt;/code&gt; 新しい入力を受け付けます。</target>
        </trans-unit>
        <trans-unit id="8ae31ac41f2a61484f03761b32d79b09d1466453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replServer.displayPrompt&lt;/code&gt; method is primarily intended to be called from within the action function for commands registered using the &lt;code&gt;replServer.defineCommand()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;replServer.displayPrompt&lt;/code&gt; のコマンドを使用して登録するための方法は、主にアクション関数内から呼び出されることを意図している &lt;code&gt;replServer.defineCommand()&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="9023f3594f56fc3e26b7898032e35aeb28ef142f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.aborted&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been aborted.</source>
          <target state="translated">&lt;code&gt;request.aborted&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 要求が中止された場合。</target>
        </trans-unit>
        <trans-unit id="fb2f53a7eec477ab9fe9763ba847f3e15f448432" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.complete&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if the request has been completed, aborted, or destroyed.</source>
          <target state="translated">&lt;code&gt;request.complete&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 要求は、完了中止され、または破壊された場合。</target>
        </trans-unit>
        <trans-unit id="b59052072d1351f3c90fcf75636c42d307d6014a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;request.finished&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt; has been called. &lt;code&gt;request.end()&lt;/code&gt; will automatically be called if the request was initiated via &lt;a href=&quot;#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;request.finished&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 場合&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; &lt;/a&gt;と呼ばれてきました。リクエストが&lt;a href=&quot;#http_http_get_options_callback&quot;&gt; &lt;code&gt;http.get()&lt;/code&gt; を&lt;/a&gt;介して開始された場合、 &lt;code&gt;request.end()&lt;/code&gt; が自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e3099fd656b83e7763a54f364082aa1b15553996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requestListener&lt;/code&gt; is a function which is automatically added to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;requestListener&lt;/code&gt; は自動的に追加された機能である&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベント。</target>
        </trans-unit>
        <trans-unit id="d168aa9bbd7ab8c6e86509d8b2cf46cf229b468d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require()&lt;/code&gt; in the above case shares the state with the context it is passed from. This may introduce risks when untrusted code is executed, e.g. altering objects in the context in unwanted ways.</source>
          <target state="translated">上記の場合の &lt;code&gt;require()&lt;/code&gt; は、渡されたコンテキストと状態を共有します。これは、信頼できないコードが実行された場合にリスクをもたらす可能性があります。たとえば、コンテキスト内のオブジェクトを望ましくない方法で変更する場合などです。</target>
        </trans-unit>
        <trans-unit id="f0b85ca7d6352c7d1fb3b49b9ad92384688911f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resolve&lt;/code&gt; hook returns the resolved file URL for a given module specifier and parent URL. The module specifier is the string in an &lt;code&gt;import&lt;/code&gt; statement or &lt;code&gt;import()&lt;/code&gt; expression, and the parent URL is the URL of the module that imported this one, or &lt;code&gt;undefined&lt;/code&gt; if this is the main entry point for the application.</source>
          <target state="translated">&lt;code&gt;resolve&lt;/code&gt; フックは、与えられたモジュール指定子と親のURLの解決ファイルのURLを返します。モジュール指定子は、 &lt;code&gt;import&lt;/code&gt; ステートメントまたは &lt;code&gt;import()&lt;/code&gt; 式の文字列であり、親URLは、これをインポートしたモジュールのURLであり、これがアプリケーションのメインエントリポイントである場合は &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7ee1b91d9acfad7419938a65da376609c34be780" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resourceLimits&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;resourceLimits&lt;/code&gt; オプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="d31c7e3af9a3b7c6102a0abc6c34e55dcd58c775" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;response.finished&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="translated">&lt;code&gt;response.finished&lt;/code&gt; プロパティは次のようになります &lt;code&gt;true&lt;/code&gt; 場合&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;と呼ばれてきました。</target>
        </trans-unit>
        <trans-unit id="751ee92ece3e1bd8851491d0e6d3476f732d18c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resume()&lt;/code&gt; has no effect if there is a &lt;code&gt;'readable'&lt;/code&gt; event listening.</source>
          <target state="translated">&lt;code&gt;resume()&lt;/code&gt; がある場合には効果がありません &lt;code&gt;'readable'&lt;/code&gt; イベントのリスニング。</target>
        </trans-unit>
        <trans-unit id="4a799f1ab032fc1a6cef82fa1afa0ac7e9f6b4a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.close()&lt;/code&gt; method closes the &lt;code&gt;readline.Interface&lt;/code&gt; instance and relinquishes control over the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; streams. When called, the &lt;code&gt;'close'&lt;/code&gt; event will be emitted.</source>
          <target state="translated">&lt;code&gt;rl.close()&lt;/code&gt; メソッドが閉じ &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスをオーバー制御放棄 &lt;code&gt;input&lt;/code&gt; 及び &lt;code&gt;output&lt;/code&gt; ストリームを。呼び出されると、 &lt;code&gt;'close'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="e7d58ebe0c855404a134dd7d4758bbda83411900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.close()&lt;/code&gt; method is called and the &lt;code&gt;readline.Interface&lt;/code&gt; instance has relinquished control over the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; streams;</source>
          <target state="translated">&lt;code&gt;rl.close()&lt;/code&gt; メソッドが呼び出され、 &lt;code&gt;readline.Interface&lt;/code&gt; のインスタンスは、上制御放棄た &lt;code&gt;input&lt;/code&gt; 及び &lt;code&gt;output&lt;/code&gt; ストリームを。</target>
        </trans-unit>
        <trans-unit id="cd889ad51b2b67f4239887d376bbc64b67e889aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.getPrompt()&lt;/code&gt; method returns the current prompt used by &lt;code&gt;rl.prompt()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rl.getPrompt()&lt;/code&gt; メソッドの戻りによって使用される現在のプロンプト &lt;code&gt;rl.prompt()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="656cec055c1e88ac7b7963397456f2fd3d5ac25f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.pause()&lt;/code&gt; method pauses the &lt;code&gt;input&lt;/code&gt; stream, allowing it to be resumed later if necessary.</source>
          <target state="translated">&lt;code&gt;rl.pause()&lt;/code&gt; メソッドは、一時停止 &lt;code&gt;input&lt;/code&gt; 必要に応じて、後で再開することを可能にする、ストリーム。</target>
        </trans-unit>
        <trans-unit id="231ef0fff60ee1f800adb18b7cdccf12c25eeea1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.prompt()&lt;/code&gt; method writes the &lt;code&gt;readline.Interface&lt;/code&gt; instances configured &lt;code&gt;prompt&lt;/code&gt; to a new line in &lt;code&gt;output&lt;/code&gt; in order to provide a user with a new location at which to provide input.</source>
          <target state="translated">&lt;code&gt;rl.prompt()&lt;/code&gt; メソッドは、書き込み &lt;code&gt;readline.Interface&lt;/code&gt; の構成例 &lt;code&gt;prompt&lt;/code&gt; に新しい行へ &lt;code&gt;output&lt;/code&gt; の入力を提供するために、新しい場所をユーザに提供するためにあります。</target>
        </trans-unit>
        <trans-unit id="f854a6ae33efe012164ab999bb636997ed8412a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.question()&lt;/code&gt; method displays the &lt;code&gt;query&lt;/code&gt; by writing it to the &lt;code&gt;output&lt;/code&gt;, waits for user input to be provided on &lt;code&gt;input&lt;/code&gt;, then invokes the &lt;code&gt;callback&lt;/code&gt; function passing the provided input as the first argument.</source>
          <target state="translated">&lt;code&gt;rl.question()&lt;/code&gt; メソッドが表示さ &lt;code&gt;query&lt;/code&gt; にそれを書き込むことにより、 &lt;code&gt;output&lt;/code&gt; 、上に提供されるユーザ入力を待つ &lt;code&gt;input&lt;/code&gt; し、呼び出す &lt;code&gt;callback&lt;/code&gt; 最初の引数として与えられた入力を渡す機能。</target>
        </trans-unit>
        <trans-unit id="cd58e2912673539288897b48fb7e4e51af8d97da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.resume()&lt;/code&gt; method resumes the &lt;code&gt;input&lt;/code&gt; stream if it has been paused.</source>
          <target state="translated">&lt;code&gt;rl.resume()&lt;/code&gt; メソッドが再開 &lt;code&gt;input&lt;/code&gt; が一時停止された場合にストリームを。</target>
        </trans-unit>
        <trans-unit id="d7e0ca70a4694f620324f931a7c614e9530d97e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.setPrompt()&lt;/code&gt; method sets the prompt that will be written to &lt;code&gt;output&lt;/code&gt; whenever &lt;code&gt;rl.prompt()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;rl.setPrompt()&lt;/code&gt; メソッドは、に書き込まれるというプロンプト設定 &lt;code&gt;output&lt;/code&gt; たび &lt;code&gt;rl.prompt()&lt;/code&gt; が呼び出されています。</target>
        </trans-unit>
        <trans-unit id="f6c1a88a49e8590ead87e513bf92a8f632c1befb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write either &lt;code&gt;data&lt;/code&gt; or a key sequence identified by &lt;code&gt;key&lt;/code&gt; to the &lt;code&gt;output&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; argument is supported only if &lt;code&gt;output&lt;/code&gt; is a &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; text terminal.</source>
          <target state="translated">&lt;code&gt;rl.write()&lt;/code&gt; メソッドのいずれか書き込む &lt;code&gt;data&lt;/code&gt; によって識別またはキーシーケンス &lt;code&gt;key&lt;/code&gt; に &lt;code&gt;output&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; 引数が場合にのみサポートされて &lt;code&gt;output&lt;/code&gt; ある&lt;a href=&quot;tty&quot;&gt;TTYの&lt;/a&gt;テキスト端末。</target>
        </trans-unit>
        <trans-unit id="d679f6d4ae87e809542a7be788c5dcc1aa66f1d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write either &lt;code&gt;data&lt;/code&gt; or a key sequence identified by &lt;code&gt;key&lt;/code&gt; to the &lt;code&gt;output&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; argument is supported only if &lt;code&gt;output&lt;/code&gt; is a &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt; text terminal. See &lt;a href=&quot;#readline_tty_keybindings&quot;&gt;TTY keybindings&lt;/a&gt; for a list of key combinations.</source>
          <target state="translated">&lt;code&gt;rl.write()&lt;/code&gt; メソッドのいずれか書き込む &lt;code&gt;data&lt;/code&gt; によって識別またはキーシーケンス &lt;code&gt;key&lt;/code&gt; に &lt;code&gt;output&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; 引数が場合にのみサポートされて &lt;code&gt;output&lt;/code&gt; ある&lt;a href=&quot;tty&quot;&gt;TTYの&lt;/a&gt;テキスト端末。キーの組み合わせのリストについては、&lt;a href=&quot;#readline_tty_keybindings&quot;&gt;TTYキーバインディング&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41196dd89a1deba404d8e0e8e0fdd66883bb26af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rl.write()&lt;/code&gt; method will write the data to the &lt;code&gt;readline&lt;/code&gt;&lt;code&gt;Interface&lt;/code&gt;'s &lt;code&gt;input&lt;/code&gt;&lt;em&gt;as if it were provided by the user&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;rl.write()&lt;/code&gt; メソッドは、にデータを書き込む &lt;code&gt;readline&lt;/code&gt; の &lt;code&gt;Interface&lt;/code&gt; の &lt;code&gt;input&lt;/code&gt; &lt;em&gt;、それがユーザによって提供されたかのように&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="31caa8cf5653d6f422783759f0f7edd1ac16a756" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rsaOaepParams.label&lt;/code&gt; parameter is optional.</source>
          <target state="translated">&lt;code&gt;rsaOaepParams.label&lt;/code&gt; のパラメータはオプションです。</target>
        </trans-unit>
        <trans-unit id="9c337047522d177bda79f124489b56c36c33708b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;salt&lt;/code&gt; should be as unique as possible. It is recommended that a salt is random and at least 16 bytes long. See &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf&quot;&gt;NIST SP 800-132&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;salt&lt;/code&gt; 、できるだけ一意である必要があります。ソルトはランダムで、少なくとも16バイト長にすることをお勧めします。詳細については、&lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf&quot;&gt;NIST SP 800-132&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aa589028c96e71c62e9b586d1f0c2ca62d142cdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sandbox&lt;/code&gt; object can no longer be a function.</source>
          <target state="translated">&lt;code&gt;sandbox&lt;/code&gt; オブジェクトは、もはや機能しないことができます。</target>
        </trans-unit>
        <trans-unit id="d10ba4e8a0c1d8c98f308b168ec8ec270bca7c1f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; property consists of the entire &quot;query string&quot; portion of the URL, including the leading ASCII question mark (&lt;code&gt;?&lt;/code&gt;) character.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; プロパティは、主要なASCIIの疑問符（を含むURLの全体の「クエリ文字列」の部分で構成されて &lt;code&gt;?&lt;/code&gt; ）の文字。</target>
        </trans-unit>
        <trans-unit id="40b486985304f73099b4f78d5aefc122c98b347a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;search&lt;/code&gt; property on the returned URL object is now &lt;code&gt;null&lt;/code&gt; when no query string is present.</source>
          <target state="translated">クエリ文字列が存在しない場合、返されるURLオブジェクトの &lt;code&gt;search&lt;/code&gt; プロパティは &lt;code&gt;null&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8cb34b8f1b3871d967141e43f1347b28b5e1825d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;section&lt;/code&gt; supports wildcard also:</source>
          <target state="translated">この &lt;code&gt;section&lt;/code&gt; はワイルドカードもサポートしています。</target>
        </trans-unit>
        <trans-unit id="b06a6d57aafd3cfb2973ecfafdf82702f3df1908" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;secureContext&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;secureContext&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d7d56b9261eb176b23d8762ecf8514431701b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sendHandle&lt;/code&gt; argument can be used, for instance, to pass the handle of a TCP server object to the child process as illustrated in the example below:</source>
          <target state="translated">&lt;code&gt;sendHandle&lt;/code&gt; 引数は以下の例に示すように、子プロセスにTCPサーバオブジェクトのハンドルを渡すために、例えば、使用することができます。</target>
        </trans-unit>
        <trans-unit id="83d3ad970ee9b0245c5617d9a4cea9041adbc474" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;serialization&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;serialization&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="f5657ee72d6362cb4513b8953d78d812b4bca85c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.addContext()&lt;/code&gt; method adds a secure context that will be used if the client request's SNI name matches the supplied &lt;code&gt;hostname&lt;/code&gt; (or wildcard).</source>
          <target state="translated">&lt;code&gt;server.addContext()&lt;/code&gt; メソッドは、クライアント要求のSNI名が指定され一致した場合に使用される安全な文脈追加 &lt;code&gt;hostname&lt;/code&gt; （またはワイルドカード）を。</target>
        </trans-unit>
        <trans-unit id="7baac3bdf0594cf99c87594fd0400053a3626b59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.close()&lt;/code&gt; method stops the server from accepting new connections.</source>
          <target state="translated">&lt;code&gt;server.close()&lt;/code&gt; メソッドは、新しい接続を受け付けからサーバーを停止します。</target>
        </trans-unit>
        <trans-unit id="00e9fa32d099affec4d987cebd08a43b32bbda61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.listen()&lt;/code&gt; method can be called again if and only if there was an error during the first &lt;code&gt;server.listen()&lt;/code&gt; call or &lt;code&gt;server.close()&lt;/code&gt; has been called. Otherwise, an &lt;code&gt;ERR_SERVER_ALREADY_LISTEN&lt;/code&gt; error will be thrown.</source>
          <target state="translated">&lt;code&gt;server.listen()&lt;/code&gt; メソッドは次の場合に再度呼び出すことができ、エラーが最初の中に存在した場合のみ &lt;code&gt;server.listen()&lt;/code&gt; コールまたは &lt;code&gt;server.close()&lt;/code&gt; と呼ばれています。そうしないと、 &lt;code&gt;ERR_SERVER_ALREADY_LISTEN&lt;/code&gt; エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="0de5d1141e84be1cc2fe33a3c4dc10fab6bffb22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server.setSecureContext()&lt;/code&gt; method replaces the secure context of an existing server. Existing connections to the server are not interrupted.</source>
          <target state="translated">&lt;code&gt;server.setSecureContext()&lt;/code&gt; メソッドは、既存のサーバーの安全なコンテキストを置き換えます。サーバーへの既存の接続は中断されません。</target>
        </trans-unit>
        <trans-unit id="c430f64fe73b740458276963df7aa0255dd17054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sessionTicket&lt;/code&gt; and &lt;code&gt;remoteTransportParams&lt;/code&gt; are useful when creating a new &lt;code&gt;QuicClientSession&lt;/code&gt; to more quickly resume an existing session.</source>
          <target state="translated">&lt;code&gt;sessionTicket&lt;/code&gt; と &lt;code&gt;remoteTransportParams&lt;/code&gt; は新しい作成するときに便利です &lt;code&gt;QuicClientSession&lt;/code&gt; をより迅速に既存のセッションを再開します。</target>
        </trans-unit>
        <trans-unit id="f87dc0d9ddcedac3facff6bfe9b376d4f1c94475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;settings&lt;/code&gt; object is the &lt;code&gt;cluster.settings&lt;/code&gt; object at the time &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt;&lt;code&gt;.setupMaster()&lt;/code&gt;&lt;/a&gt; was called and is advisory only, since multiple calls to &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt;&lt;code&gt;.setupMaster()&lt;/code&gt;&lt;/a&gt; can be made in a single tick.</source>
          <target state="translated">&lt;code&gt;settings&lt;/code&gt; オブジェクトは &lt;code&gt;cluster.settings&lt;/code&gt; が時刻における物体&lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt; &lt;code&gt;.setupMaster()&lt;/code&gt; &lt;/a&gt;と呼ばれていたとする複数の呼び出しので、唯一の顧問である&lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt; &lt;code&gt;.setupMaster()&lt;/code&gt; &lt;/a&gt;単一ティックで作製することができます。</target>
        </trans-unit>
        <trans-unit id="4f3fbe161e0f031b5a8998231ac65e19553efbb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;settings&lt;/code&gt; object is the &lt;code&gt;cluster.settings&lt;/code&gt; object at the time &lt;code&gt;.setupMaster()&lt;/code&gt; was called and is advisory only, since multiple calls to &lt;code&gt;.setupMaster()&lt;/code&gt; can be made in a single tick.</source>
          <target state="translated">&lt;code&gt;settings&lt;/code&gt; オブジェクトは &lt;code&gt;cluster.settings&lt;/code&gt; が時刻における物体 &lt;code&gt;.setupMaster()&lt;/code&gt; と呼ばれていたとする複数の呼び出しので、唯一の顧問である &lt;code&gt;.setupMaster()&lt;/code&gt; 単一ティックで作製することができます。</target>
        </trans-unit>
        <trans-unit id="ca40305874430184f507d1ff1620b98dee2a13a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell&lt;/code&gt; option available in &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; is not supported by &lt;code&gt;child_process.fork()&lt;/code&gt; and will be ignored if set.</source>
          <target state="translated">&lt;code&gt;shell&lt;/code&gt; で利用可能なオプション&lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt; &lt;code&gt;child_process.spawn()&lt;/code&gt; &lt;/a&gt;でサポートされていない &lt;code&gt;child_process.fork()&lt;/code&gt; とセットならば無視されます。</target>
        </trans-unit>
        <trans-unit id="789309d654799197d595dae31587b32fcbc40e41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shell&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;shell&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="131086e035ed08bcd6abed9542fab8e2099a0739" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showHidden&lt;/code&gt; option allows &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt;&lt;code&gt;WeakMap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt; entries to be inspected. If there are more entries than &lt;code&gt;maxArrayLength&lt;/code&gt;, there is no guarantee which entries are displayed. That means retrieving the same &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt;&lt;code&gt;WeakSet&lt;/code&gt;&lt;/a&gt; entries twice may result in different output. Furthermore, entries with no remaining strong references may be garbage collected at any time.</source>
          <target state="translated">&lt;code&gt;showHidden&lt;/code&gt; オプションが可能に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap&quot;&gt; &lt;code&gt;WeakMap&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; &lt;/a&gt;エントリが検査されます。 &lt;code&gt;maxArrayLength&lt;/code&gt; よりも多くのエントリがある場合、どのエントリが表示されるかは保証されません。つまり、同じ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet&quot;&gt; &lt;code&gt;WeakSet&lt;/code&gt; &lt;/a&gt;エントリを2回取得すると、出力が異なる場合があります。さらに、強い参照が残っていないエントリは、いつでもガベージコレクションされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="aeeffd142a8b58ab3fd25d52eb6a1a38c53837e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showProxy&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;showProxy&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="02fe55ea31407e76877facbc15d9a22a0783d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; argument is the previously calculated signature for the &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 引数は、のために以前に計算された署名である &lt;code&gt;data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ec046491bd12670eae5fc18363137ed9fe01460" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; argument is the previously calculated signature for the data, in the &lt;code&gt;signatureEncoding&lt;/code&gt;. If a &lt;code&gt;signatureEncoding&lt;/code&gt; is specified, the &lt;code&gt;signature&lt;/code&gt; is expected to be a string; otherwise &lt;code&gt;signature&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 引数はで、データの前に計算された署名である &lt;code&gt;signatureEncoding&lt;/code&gt; 。場合 &lt;code&gt;signatureEncoding&lt;/code&gt; が指定され、 &lt;code&gt;signature&lt;/code&gt; 文字列であると予想されます。それ以外の場合、 &lt;code&gt;signature&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; であると予想されます。</target>
        </trans-unit>
        <trans-unit id="68695d428776a7c74fee782fa95bbce0abf2687f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; argument is advisory. For implementations where a &quot;read&quot; is a single operation that returns data can use the &lt;code&gt;size&lt;/code&gt; argument to determine how much data to fetch. Other implementations may ignore this argument and simply provide data whenever it becomes available. There is no need to &quot;wait&quot; until &lt;code&gt;size&lt;/code&gt; bytes are available before calling &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 引数は顧問です。「読み取り」がデータを返す単一の操作である実装では、 &lt;code&gt;size&lt;/code&gt; 引数を使用して、フェッチするデータの量を決定できます。他の実装では、この引数を無視して、利用可能になったときにデータを提供するだけです。&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; を&lt;/a&gt;呼び出す前に &lt;code&gt;size&lt;/code&gt; バイトが利用可能になるまで「待つ」必要はありません。</target>
        </trans-unit>
        <trans-unit id="8b93ea54d9d39565f4a36933c0c817edd67d5098" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; argument must be less than or equal to 1 GiB.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 引数は、以下1ジブに等しくなければなりません。</target>
        </trans-unit>
        <trans-unit id="b98eea67c5cf6a231230babe352bdbf93c4d8c03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slashes&lt;/code&gt; property is a &lt;code&gt;boolean&lt;/code&gt; with a value of &lt;code&gt;true&lt;/code&gt; if two ASCII forward-slash characters (&lt;code&gt;/&lt;/code&gt;) are required following the colon in the &lt;code&gt;protocol&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slashes&lt;/code&gt; プロパティは、 &lt;code&gt;boolean&lt;/code&gt; 値を持つ &lt;code&gt;true&lt;/code&gt; 2つのASCIIスラッシュ文字が（IF &lt;code&gt;/&lt;/code&gt; ）でコロンの後の必要とされる &lt;code&gt;protocol&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cde32729934909632dd7d9f932044a842cfeda60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket.ref()&lt;/code&gt; method returns a reference to the socket so calls can be chained.</source>
          <target state="translated">&lt;code&gt;socket.ref()&lt;/code&gt; 呼び出しは連鎖することができるので、この方法は、ソケットへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="0e152e8a099033c1331c3bdd0de17b53ae3059c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket.unref()&lt;/code&gt; method returns a reference to the socket so calls can be chained.</source>
          <target state="translated">&lt;code&gt;socket.unref()&lt;/code&gt; 呼び出しは連鎖することができるので、この方法は、ソケットへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="52796494923e871fc7e75a50e0d41e5cf6709d3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;socket&lt;/code&gt; argument can be an instance of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 引数はのインスタンスとすることができる&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;のサブクラス&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f29bc2fa372e5d9603c756477069df5000ce63d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sorted&lt;/code&gt; option ensures that an object's property insertion order does not impact the result of &lt;code&gt;util.inspect()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sorted&lt;/code&gt; オブジェクトのプロパティの挿入順序が結果に影響しないというオプション性を保証 &lt;code&gt;util.inspect()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ac7cb97a611c457d3799d39f5df6768a67cb545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sorted&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;sorted&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0c7015e16b23c8277a7108a06694c98bf45cc13b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;source&lt;/code&gt; パラメータを &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="e5d97670c9965eb774646bb1cacca1be0ca0fad8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;square&lt;/code&gt; module is defined in &lt;code&gt;square.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;square&lt;/code&gt; モジュールはで定義され &lt;code&gt;square.js&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5ef2d45d0dcdb5acc0bbf694fece9d91abd0220c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startMark&lt;/code&gt; argument may identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline, or &lt;em&gt;may&lt;/em&gt; identify any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. If the named &lt;code&gt;startMark&lt;/code&gt; does not exist, then &lt;code&gt;startMark&lt;/code&gt; is set to &lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt;&lt;code&gt;timeOrigin&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">&lt;code&gt;startMark&lt;/code&gt; の引数は、任意の識別することができる&lt;em&gt;既存の&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; をパフォーマンスタイムラインで、または&lt;em&gt;こと&lt;/em&gt;により提供されるタイムスタンプのプロパティのいずれかの識別 &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラスを。名前付きの &lt;code&gt;startMark&lt;/code&gt; が存在しない場合、 &lt;code&gt;startMark&lt;/code&gt; はデフォルトで&lt;a href=&quot;https://w3c.github.io/hr-time/#dom-performance-timeorigin&quot;&gt; &lt;code&gt;timeOrigin&lt;/code&gt; に&lt;/a&gt;設定されます。</target>
        </trans-unit>
        <trans-unit id="dcf43343004244fdc72aeb9f8e96c8f8036d6b2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdio&lt;/code&gt; option can now be a string.</source>
          <target state="translated">&lt;code&gt;stdio&lt;/code&gt; のオプションは文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="c1e6b684183674552223009944114d387d473b05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdio&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;stdio&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="26ad0d1530bfcc93190d959f0cb08e32179fc25a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; arguments passed to the callback will contain the stdout and stderr output of the child process. By default, Node.js will decode the output as UTF-8 and pass strings to the callback. The &lt;code&gt;encoding&lt;/code&gt; option can be used to specify the character encoding used to decode the stdout and stderr output. If &lt;code&gt;encoding&lt;/code&gt; is &lt;code&gt;'buffer'&lt;/code&gt;, or an unrecognized character encoding, &lt;code&gt;Buffer&lt;/code&gt; objects will be passed to the callback instead.</source>
          <target state="translated">&lt;code&gt;stdout&lt;/code&gt; と &lt;code&gt;stderr&lt;/code&gt; コールバックに渡される引数は、子プロセスのstdoutとstderr出力が含まれます。デフォルトでは、Node.jsは出力をUTF-8としてデコードし、文字列をコールバックに渡します。 &lt;code&gt;encoding&lt;/code&gt; オプションは、stdoutとstderr出力をデコードするために使用される文字コードを指定するために使用することができます。場合 &lt;code&gt;encoding&lt;/code&gt; ある &lt;code&gt;'buffer'&lt;/code&gt; 、または認識されない文字エンコーディング、 &lt;code&gt;Buffer&lt;/code&gt; オブジェクトではなく、コールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="084bb7b91e83379175c5022e9cf46939ee8a02bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Duplex&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Readable&lt;/code&gt; and parasitically from &lt;code&gt;stream.Writable&lt;/code&gt;, but &lt;code&gt;instanceof&lt;/code&gt; will work properly for both base classes due to overriding &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance&quot;&gt;&lt;code&gt;Symbol.hasInstance&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;stream.Writable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stream.Duplex&lt;/code&gt; のクラスはからprototypically継承 &lt;code&gt;stream.Readable&lt;/code&gt; と寄生から &lt;code&gt;stream.Writable&lt;/code&gt; が、 &lt;code&gt;instanceof&lt;/code&gt; は原因オーバーライドの両方に、基本クラスのために正しく動作します&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance&quot;&gt; &lt;code&gt;Symbol.hasInstance&lt;/code&gt; を&lt;/a&gt;上 &lt;code&gt;stream.Writable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd0c7035d5887c79e724c63625e2a2fa4f4e00ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.PassThrough&lt;/code&gt; class is a trivial implementation of a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream that simply passes the input bytes across to the output. Its purpose is primarily for examples and testing, but there are some use cases where &lt;code&gt;stream.PassThrough&lt;/code&gt; is useful as a building block for novel sorts of streams.</source>
          <target state="translated">&lt;code&gt;stream.PassThrough&lt;/code&gt; クラスは、些細な実装である&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;単に入力を通過ストリームを出力するまたがっバイト。その目的は主に例とテストですが、 &lt;code&gt;stream.PassThrough&lt;/code&gt; が新しい種類のストリームの構成要素として役立つユースケースがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="ae66ead56bbe01b337d36c610bb9e26b4cd98960" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Readable&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;stream.Readable&lt;/code&gt; クラスが実装するために拡張された&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="0ea09bbb39789ea3cc0eaf44ddee45dcc419148d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;stream.Transform&lt;/code&gt; のクラスを実装するために拡張された&lt;a href=&quot;#stream_class_stream_transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="993f4389bae76af907ae96bb71b6886c5330ffa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Duplex&lt;/code&gt; and implements its own versions of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;readable._read()&lt;/code&gt;&lt;/a&gt; methods. Custom &lt;code&gt;Transform&lt;/code&gt; implementations &lt;em&gt;must&lt;/em&gt; implement the &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;transform._transform()&lt;/code&gt;&lt;/a&gt; method and &lt;em&gt;may&lt;/em&gt; also implement the &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;stream.Transform&lt;/code&gt; のクラスはprototypicallyから継承 &lt;code&gt;stream.Duplex&lt;/code&gt; と実装独自のバージョン &lt;code&gt;writable._write()&lt;/code&gt; と&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;readable._read()&lt;/code&gt; &lt;/a&gt;メソッドを。カスタム &lt;code&gt;Transform&lt;/code&gt; 実装&lt;em&gt;しなければならない&lt;/em&gt;実装&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;transform._transform()&lt;/code&gt; &lt;/a&gt;メソッドをと&lt;em&gt;することができる&lt;/em&gt;にも実装&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="c3c1c3a30f04ae9a0da36c430d696738f058704c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Transform&lt;/code&gt; class prototypically inherits from &lt;code&gt;stream.Duplex&lt;/code&gt; and implements its own versions of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;code&gt;readable._read()&lt;/code&gt; methods. Custom &lt;code&gt;Transform&lt;/code&gt; implementations &lt;em&gt;must&lt;/em&gt; implement the &lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt;&lt;code&gt;transform._transform()&lt;/code&gt;&lt;/a&gt; method and &lt;em&gt;may&lt;/em&gt; also implement the &lt;a href=&quot;#stream_transform_flush_callback&quot;&gt;&lt;code&gt;transform._flush()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;stream.Transform&lt;/code&gt; のクラスはprototypicallyから継承 &lt;code&gt;stream.Duplex&lt;/code&gt; と実装独自のバージョン &lt;code&gt;writable._write()&lt;/code&gt; と &lt;code&gt;readable._read()&lt;/code&gt; メソッドを。カスタム &lt;code&gt;Transform&lt;/code&gt; 実装&lt;em&gt;しなければならない&lt;/em&gt;実装&lt;a href=&quot;#stream_transform_transform_chunk_encoding_callback&quot;&gt; &lt;code&gt;transform._transform()&lt;/code&gt; &lt;/a&gt;メソッドをと&lt;em&gt;することができる&lt;/em&gt;にも実装&lt;a href=&quot;#stream_transform_flush_callback&quot;&gt; &lt;code&gt;transform._flush()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="c260d8fd0dab360e2d5844ae6a472872447a2f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.Writable&lt;/code&gt; class is extended to implement a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;stream.Writable&lt;/code&gt; クラスが実装するために拡張された&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="8af51137bee18dc37e015969a47dd4a588a34b6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; method cannot be called after the &lt;a href=&quot;#stream_event_end&quot;&gt;&lt;code&gt;'end'&lt;/code&gt;&lt;/a&gt; event has been emitted or a runtime error will be thrown.</source>
          <target state="translated">&lt;code&gt;stream.unshift(chunk)&lt;/code&gt; の後にメソッドを呼び出すことはできません&lt;a href=&quot;#stream_event_end&quot;&gt; &lt;code&gt;'end'&lt;/code&gt; &lt;/a&gt;イベントが放出されたか、ランタイムエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="457e1fe6bd83e973ceb8b148d303f39fedfa6c45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream/promises&lt;/code&gt; API provides an alternative set of asynchronous utility functions for streams that return &lt;code&gt;Promise&lt;/code&gt; objects rather than using callbacks. The API is accessible via &lt;code&gt;require('stream/promises')&lt;/code&gt; or &lt;code&gt;require('stream').promises&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stream/promises&lt;/code&gt; APIを返すストリームの非同期のユーティリティ機能の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; コールバックを使用するのではなく、オブジェクトを。APIには、 &lt;code&gt;require('stream/promises')&lt;/code&gt; または &lt;code&gt;require('stream').promises&lt;/code&gt; からアクセスできます。</target>
        </trans-unit>
        <trans-unit id="691f4859d654b4c9ab45f33157afe7c5bac57435" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; module API has been designed to make it possible to easily implement streams using JavaScript's prototypal inheritance model.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; モジュールのAPIは簡単にはJavaScriptの原型継承モデルを使用してストリームを実装することを可能にするように設計されています。</target>
        </trans-unit>
        <trans-unit id="bc56a2c1de4b9e87e59ac1c30d9a0c0a5259ebda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; module is useful for creating new types of stream instances. It is usually not necessary to use the &lt;code&gt;stream&lt;/code&gt; module to consume streams.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; モジュールは、ストリーム・インスタンスの新しいタイプを作成する場合に便利です。通常、 &lt;code&gt;stream&lt;/code&gt; を使用するためにストリームモジュールを使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="357321edbc1568fd30c17cfc80ff0748b6db2542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; parameter can now be any &lt;code&gt;TypedArray&lt;/code&gt;, &lt;code&gt;DataView&lt;/code&gt; or &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; パラメータは今どんなことができ &lt;code&gt;TypedArray&lt;/code&gt; 、 &lt;code&gt;DataView&lt;/code&gt; または &lt;code&gt;ArrayBuffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5f828f2124596b27064aac5d1ec4f80681b8276" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; parameter will stringify an object with an explicit &lt;code&gt;toString&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; パラメータが明示的にオブジェクトを文字列化します &lt;code&gt;toString&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="0e5470f8764de4f8a3b550db35d84f8b273c8a8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; parameter won't coerce unsupported input to strings anymore.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; パラメータは、もはや文字列にサポートされていない入力を強要しません。</target>
        </trans-unit>
        <trans-unit id="5a45d51c7cabfc0ab2ba5e3dff6526f12a49bf66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string_decoder&lt;/code&gt; module provides an API for decoding &lt;code&gt;Buffer&lt;/code&gt; objects into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16 characters. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;string_decoder&lt;/code&gt; のモジュールを復号化するためのAPIを提供する &lt;code&gt;Buffer&lt;/code&gt; ジャムがマルチバイトUTF-8およびUTF-16文字をコードなるように文字列にオブジェクト。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="c5126690fac33fb4d5387e26eb565d04e69d7adb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.channel&lt;/code&gt; property is a reference to the child's IPC channel. If no IPC channel currently exists, this property is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subprocess.channel&lt;/code&gt; のプロパティは、子供のIPCチャネルへの参照です。現在IPCチャネルが存在しない場合、このプロパティは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="630496965672d7d17bca3ce951936e1a7f96b9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.connected&lt;/code&gt; property indicates whether it is still possible to send and receive messages from a child process. When &lt;code&gt;subprocess.connected&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it is no longer possible to send or receive messages.</source>
          <target state="translated">&lt;code&gt;subprocess.connected&lt;/code&gt; プロパティは、子プロセスからのメッセージを送受信することは可能であるかどうかを示します。 &lt;code&gt;subprocess.connected&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、メッセージを送受信できなくなります。</target>
        </trans-unit>
        <trans-unit id="8787c5e94bff4066ab6850ba1134383970a157be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.exitCode&lt;/code&gt; property indicates the exit code of the child process. If the child process is still running, the field will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subprocess.exitCode&lt;/code&gt; のプロパティには、子プロセスの終了コードを示します。子プロセスがまだ実行中の場合、フィールドは &lt;code&gt;null&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="85f59425a9992636760b8d033dc4606abef401d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.js&lt;/code&gt; would receive the socket handle as the second argument passed to the event callback function:</source>
          <target state="translated">&lt;code&gt;subprocess.js&lt;/code&gt; は、 2番目の引数はイベントのコールバック関数に渡されたソケットハンドルを受け取ることになります。</target>
        </trans-unit>
        <trans-unit id="f43b8450ff014c705fd9bc6ad073773c1c9f1baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.kill()&lt;/code&gt; method sends a signal to the child process. If no argument is given, the process will be sent the &lt;code&gt;'SIGTERM'&lt;/code&gt; signal. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;&lt;code&gt;signal(7)&lt;/code&gt;&lt;/a&gt; for a list of available signals.</source>
          <target state="translated">&lt;code&gt;subprocess.kill()&lt;/code&gt; メソッドは、子プロセスに信号を送ります。引数を指定しない場合、プロセスには &lt;code&gt;'SIGTERM'&lt;/code&gt; が送信されます。利用可能なシグナルのリストについては、&lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt; &lt;code&gt;signal(7)&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="80a2e30e640c53e8f89fd65eeab80475e18914a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.kill()&lt;/code&gt; method sends a signal to the child process. If no argument is given, the process will be sent the &lt;code&gt;'SIGTERM'&lt;/code&gt; signal. See &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;&lt;code&gt;signal(7)&lt;/code&gt;&lt;/a&gt; for a list of available signals. This function returns &lt;code&gt;true&lt;/code&gt; if &lt;a href=&quot;http://man7.org/linux/man-pages/man2/kill.2.html&quot;&gt;&lt;code&gt;kill(2)&lt;/code&gt;&lt;/a&gt; succeeds, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;subprocess.kill()&lt;/code&gt; メソッドは、子プロセスに信号を送ります。引数が指定されていない場合、プロセスには &lt;code&gt;'SIGTERM'&lt;/code&gt; が送信されます。使用可能なシグナルのリストについては、&lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt; &lt;code&gt;signal(7)&lt;/code&gt; &lt;/a&gt;を参照してください。この関数は、&lt;a href=&quot;http://man7.org/linux/man-pages/man2/kill.2.html&quot;&gt; &lt;code&gt;kill(2)&lt;/code&gt; &lt;/a&gt;が成功した場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="00e0cd67de99d7123ac0bb29d2796973028616a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.killed&lt;/code&gt; property indicates whether the child process successfully received a signal from &lt;code&gt;subprocess.kill()&lt;/code&gt;. The &lt;code&gt;killed&lt;/code&gt; property does not indicate that the child process has been terminated.</source>
          <target state="translated">&lt;code&gt;subprocess.killed&lt;/code&gt; プロパティは、子プロセスが正常からの信号を受信したか否かを示す &lt;code&gt;subprocess.kill()&lt;/code&gt; 。 &lt;code&gt;killed&lt;/code&gt; プロパティは、子プロセスが終了していることを示すものではありません。</target>
        </trans-unit>
        <trans-unit id="1779a317945a22c1b4172db480f75216aa53fab3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.signalCode&lt;/code&gt; property indicates the signal received by the child process if any, else &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subprocess.signalCode&lt;/code&gt; のプロパティには、子プロセスがあれば、そうでないことにより、受信した信号を示す &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="357526cd8f96b0381851878f3ab605b57210a0fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.spawnargs&lt;/code&gt; property represents the full list of command-line arguments the child process was launched with.</source>
          <target state="translated">&lt;code&gt;subprocess.spawnargs&lt;/code&gt; のプロパティには、子プロセスが開始されたとコマンドライン引数の完全なリストを表します。</target>
        </trans-unit>
        <trans-unit id="fb5925d7503bdf3118070f408e391779b2b5a30f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subprocess.spawnfile&lt;/code&gt; property indicates the executable file name of the child process that is launched.</source>
          <target state="translated">&lt;code&gt;subprocess.spawnfile&lt;/code&gt; プロパティが起動される子プロセスの実行可能ファイル名を示します。</target>
        </trans-unit>
        <trans-unit id="1109066d653752ad02b1f78e45830677c0e43874" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subtle.importKey()&lt;/code&gt; method attempts to interpret the provided &lt;code&gt;keyData&lt;/code&gt; as the given &lt;code&gt;format&lt;/code&gt; to create a &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; instance using the provided &lt;code&gt;algorithm&lt;/code&gt;, &lt;code&gt;extractable&lt;/code&gt;, and &lt;code&gt;keyUsages&lt;/code&gt; arguments. If the import is successful, the returned promise will be resolved with the created &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;subtle.importKey()&lt;/code&gt; メソッドの試みが提供解釈する &lt;code&gt;keyData&lt;/code&gt; 所与として &lt;code&gt;format&lt;/code&gt; 作成する&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;設け使用してインスタンスを &lt;code&gt;algorithm&lt;/code&gt; 、 &lt;code&gt;extractable&lt;/code&gt; 、及び &lt;code&gt;keyUsages&lt;/code&gt; の引数。インポートが成功すると、返されたPromiseは作成された&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt;で解決されます。</target>
        </trans-unit>
        <trans-unit id="5e369294cd449eb3ac8bc8f7b44bdac1cbfcf71b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module is deprecated. Please use the &lt;a href=&quot;util&quot;&gt;&lt;code&gt;util&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールが推奨されていません。代わりに&lt;a href=&quot;util&quot;&gt; &lt;code&gt;util&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="06233b1be7e9e5213ba5dd58ad71b01af1e96e3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tabSize&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;tabSize&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="905f8dec56ddaba13188a29c248c1808e84bc5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; parameters can be WHATWG &lt;code&gt;URL&lt;/code&gt; objects using &lt;code&gt;file:&lt;/code&gt; protocol. Support is currently still &lt;em&gt;experimental&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; と &lt;code&gt;path&lt;/code&gt; のパラメータは、WHATWGことができる &lt;code&gt;URL&lt;/code&gt; を使用してオブジェクト &lt;code&gt;file:&lt;/code&gt; プロトコルを。現在、サポートは&lt;em&gt;実験段階&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="21d47e71ab93ab29a6486089ea585020c6b859dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;target&lt;/code&gt; パラメータを &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="c294ea3b5974cb0ba7306f25aabde6ec0f217395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminal&lt;/code&gt; option now follows the default description in all cases and &lt;code&gt;useColors&lt;/code&gt; checks &lt;code&gt;hasColors()&lt;/code&gt; if available.</source>
          <target state="translated">&lt;code&gt;terminal&lt;/code&gt; オプションは、すべての場合とではデフォルトの説明を次の &lt;code&gt;useColors&lt;/code&gt; チェックする &lt;code&gt;hasColors()&lt;/code&gt; 利用できます。</target>
        </trans-unit>
        <trans-unit id="e53093313524ff1c7d2c347705f27f9f9f795a5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ticketKeys&lt;/code&gt; options is automatically shared between &lt;code&gt;cluster&lt;/code&gt; module workers.</source>
          <target state="translated">&lt;code&gt;ticketKeys&lt;/code&gt; のオプションが自動的に間で共有される &lt;code&gt;cluster&lt;/code&gt; モジュールの労働者。</target>
        </trans-unit>
        <trans-unit id="3f81955b3836a057f5c7a7aaa5ed0a6ca9bc0d2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="17ce97197b4e737e60d8c154549d0fd35ce67577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timer&lt;/code&gt; module exposes a global API for scheduling functions to be called at some future period of time. Because the timer functions are globals, there is no need to call &lt;code&gt;require('timers')&lt;/code&gt; to use the API.</source>
          <target state="translated">&lt;code&gt;timer&lt;/code&gt; モジュールは、時間のいくつかの将来の期間で呼び出される関数をスケジュールするための世界的なAPIを公開しています。タイマー関数はグローバルであるため、APIを使用する &lt;code&gt;require('timers')&lt;/code&gt; を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="85550b9a3de25c8ea7e1f364313fd6e88914714b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timers/promises&lt;/code&gt; API provides an alternative set of timer functions that return &lt;code&gt;Promise&lt;/code&gt; objects. The API is accessible via &lt;code&gt;require('timers/promises')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;timers/promises&lt;/code&gt; APIは復帰することをタイマ機能の代替セット提供 &lt;code&gt;Promise&lt;/code&gt; オブジェクトを。APIには、 &lt;code&gt;require('timers/promises')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cf7b4966e78b3bf9c81ea7b37f0cbce3a2e65f24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.CryptoStream&lt;/code&gt; class represents a stream of encrypted data. This class is deprecated and should no longer be used.</source>
          <target state="translated">&lt;code&gt;tls.CryptoStream&lt;/code&gt; のクラスは、暗号化されたデータのストリームを表します。このクラスは非推奨であり、今後は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="4924f51a594e62a3e48926493b0830358f972820" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.Server&lt;/code&gt; class is a subclass of &lt;code&gt;net.Server&lt;/code&gt; that accepts encrypted connections using TLS or SSL.</source>
          <target state="translated">&lt;code&gt;tls.Server&lt;/code&gt; のクラスはサブクラスである &lt;code&gt;net.Server&lt;/code&gt; TLSまたはSSLを使用して暗号化された接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="3759526aec41e16a038394bb7b88557096ed9d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.TLSSocket&lt;/code&gt; is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that performs transparent encryption of written data and all required TLS negotiation.</source>
          <target state="translated">&lt;code&gt;tls.TLSSocket&lt;/code&gt; はのサブクラスである&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;書き込まれたデータと、必要なすべてのTLSネゴシエーションの透過的な暗号化を行なうこと。</target>
        </trans-unit>
        <trans-unit id="a53fcb9eccbc70ba28e31c4dc6d95605701391e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecureContext()&lt;/code&gt; method creates a &lt;code&gt;SecureContext&lt;/code&gt; object. It is usable as an argument to several &lt;code&gt;tls&lt;/code&gt; APIs, such as &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tls_server_addcontext_hostname_context&quot;&gt;&lt;code&gt;server.addContext()&lt;/code&gt;&lt;/a&gt;, but has no public methods.</source>
          <target state="translated">&lt;code&gt;tls.createSecureContext()&lt;/code&gt; メソッドは、作成 &lt;code&gt;SecureContext&lt;/code&gt; のオブジェクト。&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#tls_server_addcontext_hostname_context&quot;&gt; &lt;code&gt;server.addContext()&lt;/code&gt; &lt;/a&gt;など、いくつかの &lt;code&gt;tls&lt;/code&gt; APIの引数として使用できますが、パブリックメソッドはありません。</target>
        </trans-unit>
        <trans-unit id="ff58d2e25dc0b6be6c3c7b6f5498a0e15391844f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecurePair()&lt;/code&gt; API was deprecated in documentation in Node.js 0.11.3. Users should use &lt;code&gt;tls.Socket&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;tls.createSecurePair()&lt;/code&gt; APIは、Node.jsの0.11.3に文書で廃止されました。代わりに &lt;code&gt;tls.Socket&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="56f1c8824e6bac97724ac9136c4d20ffd2f71ff6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls.createSecurePair()&lt;/code&gt; method is now deprecated in favor of &lt;code&gt;tls.TLSSocket()&lt;/code&gt;. For example, the code:</source>
          <target state="translated">&lt;code&gt;tls.createSecurePair()&lt;/code&gt; メソッドは、現在の賛成で廃止されました &lt;code&gt;tls.TLSSocket()&lt;/code&gt; 。たとえば、コード：</target>
        </trans-unit>
        <trans-unit id="3bfd9e2e5bf7e913bcaa90224b9ac1d690880f7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tls&lt;/code&gt; module provides an implementation of the Transport Layer Security (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL. The module can be accessed using:</source>
          <target state="translated">&lt;code&gt;tls&lt;/code&gt; モジュールは、OpenSSLの上に構築されたトランスポート層セキュリティ（TLS）およびセキュア・ソケット・レイヤー（SSL）プロトコルの実装を提供します。このモジュールには、以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="27a8b91851aa82c6e1d1daa2ba743d969facb149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; property is a string that contains the selected ALPN protocol. When ALPN has no selected protocol, &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; equals &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; のプロパティは、選択したALPNプロトコルを含む文字列です。ALPNにプロトコルが選択されていない場合、 &lt;code&gt;tlsSocket.alpnProtocol&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a1e3716500e3efcbc06eb8c1971be5b3031aefbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.authorized&lt;/code&gt; property is a &lt;code&gt;boolean&lt;/code&gt; indicating whether the client has been verified by one of the supplied Certificate Authorities for the server. If &lt;code&gt;tlsSocket.authorized&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;socket.authorizationError&lt;/code&gt; is set to describe how authorization failed. Depending on the settings of the TLS server, unauthorized connections may still be accepted.</source>
          <target state="translated">&lt;code&gt;tlsSocket.authorized&lt;/code&gt; のプロパティがある &lt;code&gt;boolean&lt;/code&gt; クライアントがサーバー用に提供される認証局のいずれかによって検証されたかどうかを示します。場合 &lt;code&gt;tlsSocket.authorized&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、そして &lt;code&gt;socket.authorizationError&lt;/code&gt; は、認証が失敗した方法を記述するために設定されています。TLSサーバーの設定によっては、許可されていない接続が受け入れられる場合があります。</target>
        </trans-unit>
        <trans-unit id="c1560315e66506c9f14f682158610897048f54b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.renegotiate()&lt;/code&gt; method initiates a TLS renegotiation process. Upon completion, the &lt;code&gt;callback&lt;/code&gt; function will be passed a single argument that is either an &lt;code&gt;Error&lt;/code&gt; (if the request failed) or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tlsSocket.renegotiate()&lt;/code&gt; メソッドは、TLS再ネゴシエーションプロセスを開始します。完了すると、 &lt;code&gt;callback&lt;/code&gt; 関数には、 &lt;code&gt;Error&lt;/code&gt; （要求が失敗した場合）または &lt;code&gt;null&lt;/code&gt; のいずれかである単一の引数が渡されます。</target>
        </trans-unit>
        <trans-unit id="9855f343755bbd2595b4c8293c76e9a18177c3d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.servername&lt;/code&gt; property is a string containing the server name requested via SNI.</source>
          <target state="translated">&lt;code&gt;tlsSocket.servername&lt;/code&gt; のプロパティは、SNIを経由して要求されたサーバー名を含む文字列です。</target>
        </trans-unit>
        <trans-unit id="dcac01a659e106d52ac484f3d471c86b4c378df4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tlsSocket.setMaxSendFragment()&lt;/code&gt; method sets the maximum TLS fragment size. Returns &lt;code&gt;true&lt;/code&gt; if setting the limit succeeded; &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;tlsSocket.setMaxSendFragment()&lt;/code&gt; メソッドは、最大TLSフラグメントサイズを設定します。制限の設定が成功した場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="29428f13863882ea8f4f96a9c253ed79502b3724" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toJSON()&lt;/code&gt; method on the &lt;code&gt;URL&lt;/code&gt; object returns the serialized URL. The value returned is equivalent to that of &lt;a href=&quot;#url_url_href&quot;&gt;&lt;code&gt;url.href&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_tostring&quot;&gt;&lt;code&gt;url.toString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; オブジェクトの &lt;code&gt;toJSON()&lt;/code&gt; メソッドは、シリアル化されたURLを返します。返される値は、&lt;a href=&quot;#url_url_href&quot;&gt; &lt;code&gt;url.href&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_tostring&quot;&gt; &lt;code&gt;url.toString()&lt;/code&gt; &lt;/a&gt;の値と同じです。</target>
        </trans-unit>
        <trans-unit id="b9818ab352d22b2510640724d3e91a12f02f0866" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString()&lt;/code&gt; method on the &lt;code&gt;URL&lt;/code&gt; object returns the serialized URL. The value returned is equivalent to that of &lt;a href=&quot;#url_url_href&quot;&gt;&lt;code&gt;url.href&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_tojson&quot;&gt;&lt;code&gt;url.toJSON()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;URL&lt;/code&gt; オブジェクトの &lt;code&gt;toString()&lt;/code&gt; メソッドは、シリアル化されたURLを返します。返される値は、&lt;a href=&quot;#url_url_href&quot;&gt; &lt;code&gt;url.href&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#url_url_tojson&quot;&gt; &lt;code&gt;url.toJSON()&lt;/code&gt; &lt;/a&gt;の値と同等です。</target>
        </trans-unit>
        <trans-unit id="c3ff3398b1379b4f9e70c0f0e2112b898e772d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events.createTracing()&lt;/code&gt; method requires at least one trace event category.</source>
          <target state="translated">&lt;code&gt;trace_events.createTracing()&lt;/code&gt; メソッドは、少なくとも1つのトレースイベントカテゴリを必要とします。</target>
        </trans-unit>
        <trans-unit id="eb5f88aac5c15422dad13cd22ae5517d8aff25af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;trace_events&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="7b1b3b869aeb1da79b5e47ed6a53675c303384d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module could not be loaded because Node.js was compiled with the &lt;code&gt;--without-v8-platform&lt;/code&gt; flag.</source>
          <target state="translated">Node.jsが &lt;code&gt;--without-v8-platform&lt;/code&gt; フラグを使用してコンパイルされているため、 &lt;code&gt;trace_events&lt;/code&gt; モジュールをロードできませんでした。</target>
        </trans-unit>
        <trans-unit id="6cfc32f6c42771bc33b8e1c92c2ec5d9721a1ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trace_events&lt;/code&gt; module provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.</source>
          <target state="translated">&lt;code&gt;trace_events&lt;/code&gt; モジュールV8によって生成された情報、Node.jsのコア、およびユーザ空間コードをトレース集中する機構を提供します。</target>
        </trans-unit>
        <trans-unit id="28e018a9e70fc4006d7d150773b9d1c000bdc43d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trackUnmanagedFds&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;trackUnmanagedFds&lt;/code&gt; のオプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="9df826f538bfcf281512f8aeee137f3787c4979d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trackUnmanagedFds&lt;/code&gt; option was set to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">&lt;code&gt;trackUnmanagedFds&lt;/code&gt; のオプションがに設定された &lt;code&gt;true&lt;/code&gt; デフォルトで。</target>
        </trans-unit>
        <trans-unit id="c077f0855a45a0fa56e398966146afb4593595ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transferList&lt;/code&gt; option was introduced.</source>
          <target state="translated">&lt;code&gt;transferList&lt;/code&gt; のオプションが導入されました。</target>
        </trans-unit>
        <trans-unit id="d662971594b3afbe87ef697171174048eaa66120" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform._flush()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;transform._flush()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="d2e2e92ce7d02c1bfbe2c3e0c42828de5b57fbd1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform._transform()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;transform._transform()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="06b291008924c93d17c8a25ddc24cabe42e20aab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transform.push()&lt;/code&gt; method may be called zero or more times to generate output from a single input chunk, depending on how much is to be output as a result of the chunk.</source>
          <target state="translated">&lt;code&gt;transform.push()&lt;/code&gt; メソッドは、チャンクの結果として出力されるどの程度に応じて、単一の入力チャンクからの出力を生成するために、ゼロ回以上呼び出されてもよいです。</target>
        </trans-unit>
        <trans-unit id="f137017201b3115e139fe0807246ce2ce57c45b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transformSource&lt;/code&gt; hook provides a way to modify the source code of a loaded ES module file after the source string has been loaded but before Node.js has done anything with it.</source>
          <target state="translated">&lt;code&gt;transformSource&lt;/code&gt; のフックは、ソース文字列がロードされた後でのNode.jsはそれで何かを行っている前にロードされたESモジュールファイルのソースコードを変更する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="1df938c3a2888f3e976731ec993fb3a43796eaed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ttl&lt;/code&gt; argument may be between 0 and 255. The default on most systems is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ttl&lt;/code&gt; 引数は、ほとんどのシステム上のデフォルトは0〜255の間であってもよい &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2982c98411ebd6628b5acadd0974e3992b8612a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ttl&lt;/code&gt; argument may be between between 1 and 255. The default on most systems is 64.</source>
          <target state="translated">&lt;code&gt;ttl&lt;/code&gt; 引数は、ほとんどのシステム上のデフォルトは64で、1〜255の間であってもよいです。</target>
        </trans-unit>
        <trans-unit id="1482cb6354978fe69afb35af6b169257783355b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.ReadStream&lt;/code&gt; class is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that represents the readable side of a TTY. In normal circumstances &lt;a href=&quot;process#process_process_stdin&quot;&gt;&lt;code&gt;process.stdin&lt;/code&gt;&lt;/a&gt; will be the only &lt;code&gt;tty.ReadStream&lt;/code&gt; instance in a Node.js process and there should be no reason to create additional instances.</source>
          <target state="translated">&lt;code&gt;tty.ReadStream&lt;/code&gt; のクラスはのサブクラスである&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; TTYの読み込み可能な側面を表しています。通常の状況では、&lt;a href=&quot;process#process_process_stdin&quot;&gt; &lt;code&gt;process.stdin&lt;/code&gt; &lt;/a&gt;はNode.jsプロセスの唯一の &lt;code&gt;tty.ReadStream&lt;/code&gt; インスタンスであり、追加のインスタンスを作成する理由はありません。</target>
        </trans-unit>
        <trans-unit id="fea75197a06554fdf7484bfce8f391405a82e45b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.WriteStream&lt;/code&gt; class is a subclass of &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; that represents the writable side of a TTY. In normal circumstances, &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; will be the only &lt;code&gt;tty.WriteStream&lt;/code&gt; instances created for a Node.js process and there should be no reason to create additional instances.</source>
          <target state="translated">&lt;code&gt;tty.WriteStream&lt;/code&gt; のクラスはサブクラスで&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt; TTYの書き込み可能な側面を表しています。通常の状況では、&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;がNode.jsプロセス用に作成される唯一の &lt;code&gt;tty.WriteStream&lt;/code&gt; インスタンスであり、追加のインスタンスを作成する理由はないはずです。</target>
        </trans-unit>
        <trans-unit id="089ab25de4c5531a8932bd899316bf978f71777c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty.isatty()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;fd&lt;/code&gt; is associated with a TTY and &lt;code&gt;false&lt;/code&gt; if it is not, including whenever &lt;code&gt;fd&lt;/code&gt; is not a non-negative integer.</source>
          <target state="translated">&lt;code&gt;tty.isatty()&lt;/code&gt; メソッドの戻り &lt;code&gt;true&lt;/code&gt; 与えられた場合 &lt;code&gt;fd&lt;/code&gt; TTYと関連付けられている &lt;code&gt;false&lt;/code&gt; それがない場合にいつでも含む、 &lt;code&gt;fd&lt;/code&gt; は非負整数でありません。</target>
        </trans-unit>
        <trans-unit id="068c426f71f2a19cdc04cd090bc890bdef7f3df9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tty&lt;/code&gt; module provides the &lt;code&gt;tty.ReadStream&lt;/code&gt; and &lt;code&gt;tty.WriteStream&lt;/code&gt; classes. In most cases, it will not be necessary or possible to use this module directly. However, it can be accessed using:</source>
          <target state="translated">&lt;code&gt;tty&lt;/code&gt; モジュールは提供 &lt;code&gt;tty.ReadStream&lt;/code&gt; と &lt;code&gt;tty.WriteStream&lt;/code&gt; クラスを。ほとんどの場合、このモジュールを直接使用する必要はありません。ただし、次の方法でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f3d44a804121adee2ad3dc3b000ecb959a91c49d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument is only available on Windows and ignored on other platforms. It can be set to &lt;code&gt;'dir'&lt;/code&gt;, &lt;code&gt;'file'&lt;/code&gt;, or &lt;code&gt;'junction'&lt;/code&gt;. If the &lt;code&gt;type&lt;/code&gt; argument is not set, Node.js will autodetect &lt;code&gt;target&lt;/code&gt; type and use &lt;code&gt;'file'&lt;/code&gt; or &lt;code&gt;'dir'&lt;/code&gt;. If the &lt;code&gt;target&lt;/code&gt; does not exist, &lt;code&gt;'file'&lt;/code&gt; will be used. Windows junction points require the destination path to be absolute. When using &lt;code&gt;'junction'&lt;/code&gt;, the &lt;code&gt;target&lt;/code&gt; argument will automatically be normalized to absolute path.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数は、Windows上でのみ利用可能であり、他のプラットフォームでは無視します。 &lt;code&gt;'dir'&lt;/code&gt; 、 &lt;code&gt;'file'&lt;/code&gt; 、または &lt;code&gt;'junction'&lt;/code&gt; に設定できます。 &lt;code&gt;type&lt;/code&gt; 引数が設定されていない場合、Node.jsは &lt;code&gt;target&lt;/code&gt; タイプを自動検出し、 &lt;code&gt;'file'&lt;/code&gt; または &lt;code&gt;'dir'&lt;/code&gt; を使用します。場合は &lt;code&gt;target&lt;/code&gt; 存在しない、 &lt;code&gt;'file'&lt;/code&gt; 使用します。 Windowsジャンクションポイントでは、宛先パスが絶対パスである必要があります。 &lt;code&gt;'junction'&lt;/code&gt; を使用する場合、 &lt;code&gt;target&lt;/code&gt; 引数は自動的に絶対パスに正規化されます。</target>
        </trans-unit>
        <trans-unit id="546cf5cc6e4aec10268e918a7bb80559934e24b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument is only used on Windows platforms and can be one of &lt;code&gt;'dir'&lt;/code&gt;, &lt;code&gt;'file'&lt;/code&gt;, or &lt;code&gt;'junction'&lt;/code&gt;. Windows junction points require the destination path to be absolute. When using &lt;code&gt;'junction'&lt;/code&gt;, the &lt;code&gt;target&lt;/code&gt; argument will automatically be normalized to absolute path.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数は、Windowsプラットフォームでのみ使用され、のいずれかになります。 &lt;code&gt;'dir'&lt;/code&gt; 、 &lt;code&gt;'file'&lt;/code&gt; 、または &lt;code&gt;'junction'&lt;/code&gt; 。Windowsジャンクションポイントでは、宛先パスを絶対パスにする必要があります。 &lt;code&gt;'junction'&lt;/code&gt; を使用する場合、 &lt;code&gt;target&lt;/code&gt; 引数は自動的に絶対パスに正規化されます。</target>
        </trans-unit>
        <trans-unit id="b36cf89ae792607998f6c3f6881cfde3bdb33430" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; is a string identifying the type of resource that caused &lt;code&gt;init&lt;/code&gt; to be called. Generally, it will correspond to the name of the resource's constructor.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 生じ、リソースのタイプ識別する文字列であり、 &lt;code&gt;init&lt;/code&gt; が呼び出されるが。通常、これはリソースのコンストラクターの名前に対応します。</target>
        </trans-unit>
        <trans-unit id="b0713047630355050ba416d88406e08da301a3de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.format()&lt;/code&gt; method returns a formatted URL string derived from &lt;code&gt;urlObject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;url.format()&lt;/code&gt; メソッドが由来する形式のURL文字列を返し &lt;code&gt;urlObject&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="55ca44190456823e04f99f6ae22a8f57d60ffc3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.parse()&lt;/code&gt; method takes a URL string, parses it, and returns a URL object.</source>
          <target state="translated">&lt;code&gt;url.parse()&lt;/code&gt; メソッドは、URL文字列を受け取り、それを解析し、URLオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="11718d46d4cfbae5181595bd7c3fbe94462715cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url.resolve()&lt;/code&gt; method resolves a target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.</source>
          <target state="translated">&lt;code&gt;url.resolve()&lt;/code&gt; メソッドは、アンカータグのHREFを解決するWebブラウザと同様に、ベースURLにターゲットURLを相対的に解決します。</target>
        </trans-unit>
        <trans-unit id="2a3b4947c1330d3bfc1effd6af4af13f7b8bf1df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; module provides two APIs for working with URLs: a legacy API that is Node.js specific, and a newer API that implements the same &lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL Standard&lt;/a&gt; used by web browsers.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; のNode.jsの固有のレガシーAPI、および実装と同じことを、新しいAPI：モジュールは、2つのURLを扱うためのAPI提供&lt;a href=&quot;https://url.spec.whatwg.org/&quot;&gt;WHATWG URL標準&lt;/a&gt;のWebブラウザで使用します。</target>
        </trans-unit>
        <trans-unit id="821dfbb0ad8f8f3a555df6573ebbf7275fd65916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; module provides utilities for URL resolution and parsing. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; モジュールは、URLの解決や解析のためのユーティリティを提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="71ce52dc87ff4abf938e11b26b7ef8b7207b6d2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;url&lt;/code&gt; parameter can now be passed along with a separate &lt;code&gt;options&lt;/code&gt; object.</source>
          <target state="translated">これで、 &lt;code&gt;url&lt;/code&gt; パラメータを個別の &lt;code&gt;options&lt;/code&gt; オブジェクトと共に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="4c169a8e8d2679d88714d8feee5146867d802475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useColors&lt;/code&gt; boolean option can be specified at construction to instruct the default writer to use ANSI style codes to colorize the output from the &lt;code&gt;util.inspect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;useColors&lt;/code&gt; ブール値のオプションからの出力を色付けするANSIスタイルのコードを使用するデフォルトのライターに指示し、構築時に指定することができます &lt;code&gt;util.inspect()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="2071213609146bc9b4c2fbc006a6de7d9ec04a31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util._extend()&lt;/code&gt; method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.</source>
          <target state="translated">&lt;code&gt;util._extend()&lt;/code&gt; メソッドは、内部のNode.jsモジュールの使用外であることを意図していませんでした。コミュニティはとにかくそれを見つけて使用しました。</target>
        </trans-unit>
        <trans-unit id="e62821bb1901d1e936c33900201548cb9069787a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.debuglog().enabled&lt;/code&gt; getter is used to create a test that can be used in conditionals based on the existence of the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable. If the &lt;code&gt;section&lt;/code&gt; name appears within the value of that environment variable, then the returned value will be &lt;code&gt;true&lt;/code&gt;. If not, then the returned value will be &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;util.debuglog().enabled&lt;/code&gt; ゲッターはの存在に基づいて、条件式の中で使用することができ、テストの作成に使用されている &lt;code&gt;NODE_DEBUG&lt;/code&gt; の環境変数を。場合は &lt;code&gt;section&lt;/code&gt; 名は、その環境変数の値内に現れる、その後、返された値になります &lt;code&gt;true&lt;/code&gt; 。そうでない場合、戻り値は &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="ec8f575e1fba436442088c542aab95d0b244c3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.debuglog()&lt;/code&gt; method is used to create a function that conditionally writes debug messages to &lt;code&gt;stderr&lt;/code&gt; based on the existence of the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable. If the &lt;code&gt;section&lt;/code&gt; name appears within the value of that environment variable, then the returned function operates similar to &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;. If not, then the returned function is a no-op.</source>
          <target state="translated">&lt;code&gt;util.debuglog()&lt;/code&gt; メソッドは、条件付きにデバッグメッセージを書き込み機能作成するために使用される &lt;code&gt;stderr&lt;/code&gt; の有無に基づいて &lt;code&gt;NODE_DEBUG&lt;/code&gt; の環境変数を。場合は &lt;code&gt;section&lt;/code&gt; 名は、その環境変数の値内に現れる、そして返される関数は次のように動作し&lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;。そうでない場合、返される関数は何もしません。</target>
        </trans-unit>
        <trans-unit id="db7faf5cee157b8c4fc83b2ad07bd0dcc0dd44f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.deprecate()&lt;/code&gt; method wraps &lt;code&gt;fn&lt;/code&gt; (which may be a function or class) in such a way that it is marked as deprecated.</source>
          <target state="translated">&lt;code&gt;util.deprecate()&lt;/code&gt; メソッドは、ラップ &lt;code&gt;fn&lt;/code&gt; 非推奨として、それがマークされているように（関数又はクラスであってもよいです）。</target>
        </trans-unit>
        <trans-unit id="cf1a8d7ed63b25fd7017c632a33bdb344f9c97f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.format()&lt;/code&gt; method returns a formatted string using the first argument as a &lt;code&gt;printf&lt;/code&gt;-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:</source>
          <target state="translated">&lt;code&gt;util.format()&lt;/code&gt; メソッドは、ある第1引数でフォーマットストリングを返し &lt;code&gt;printf&lt;/code&gt; のゼロまたはそれ以上の形式指定子を含むことができるフォーマットストリング様に。各指定子は、対応する引数から変換された値に置き換えられます。サポートされている指定子は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3efb2da17a664e762687da8a1d0e5cfa3ac78852" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.inspect()&lt;/code&gt; method returns a string representation of &lt;code&gt;object&lt;/code&gt; that is intended for debugging. The output of &lt;code&gt;util.inspect&lt;/code&gt; may change at any time and should not be depended upon programmatically. Additional &lt;code&gt;options&lt;/code&gt; may be passed that alter the result. &lt;code&gt;util.inspect()&lt;/code&gt; will use the constructor's name and/or &lt;code&gt;@@toStringTag&lt;/code&gt; to make an identifiable tag for an inspected value.</source>
          <target state="translated">&lt;code&gt;util.inspect()&lt;/code&gt; メソッドは、文字列表現を返し &lt;code&gt;object&lt;/code&gt; のデバッグのために意図されています。 &lt;code&gt;util.inspect&lt;/code&gt; の出力はいつでも変更される可能性があり、プログラムで依存すべきではありません。結果を変更する追加の &lt;code&gt;options&lt;/code&gt; を渡すことができます。 &lt;code&gt;util.inspect()&lt;/code&gt; は、コンストラクターの名前や &lt;code&gt;@@toStringTag&lt;/code&gt; を使用して、検査された値の識別可能なタグを作成します。</target>
        </trans-unit>
        <trans-unit id="c9ea59fe3a0c4080140d9df673a1e5787423603d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util.log()&lt;/code&gt; method prints the given &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;stdout&lt;/code&gt; with an included timestamp.</source>
          <target state="translated">&lt;code&gt;util.log()&lt;/code&gt; メソッドは、指定された印刷 &lt;code&gt;string&lt;/code&gt; に &lt;code&gt;stdout&lt;/code&gt; 含まタイムスタンプと。</target>
        </trans-unit>
        <trans-unit id="b4480b5c9011c8675aadaf047b35b79505297227" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util&lt;/code&gt; module is primarily designed to support the needs of Node.js' own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;util&lt;/code&gt; のモジュールは主にNode.jsの自身の内部APIのニーズをサポートするように設計されています。ただし、ユーティリティの多くは、アプリケーションやモジュールの開発者にも役立ちます。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="85cbc18e348b1414eaa2c064469089ec9c678136" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;util&lt;/code&gt; module supports the needs of Node.js internal APIs. Many of the utilities are useful for application and module developers as well. To access it:</source>
          <target state="translated">&lt;code&gt;util&lt;/code&gt; モジュールは、Node.jsの内部APIのニーズをサポートしています。ユーティリティの多くは、アプリケーションやモジュールの開発者にも役立ちます。アクセスするには：</target>
        </trans-unit>
        <trans-unit id="ed55dce7d35fbae9a5ace55d3e9058bc7dbc420e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; method can be used to programmatically set V8 command line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing.</source>
          <target state="translated">&lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; メソッドは、プログラムで設定V8コマンド・ライン・フラグを使用することができます。この方法は注意して使用する必要があります。VMの起動後に設定を変更すると、クラッシュやデータ損失などの予期しない動作が発生する可能性があります。またはそれは単に何もしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="f509586bc94293f84be32bcf5e6b3f339802a2f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; method can be used to programmatically set V8 command-line flags. This method should be used with care. Changing settings after the VM has started may result in unpredictable behavior, including crashes and data loss; or it may simply do nothing.</source>
          <target state="translated">&lt;code&gt;v8.setFlagsFromString()&lt;/code&gt; メソッドは、プログラムで設定V8コマンド・ライン・フラグを使用することができます。この方法は注意して使用する必要があります。VMの起動後に設定を変更すると、クラッシュやデータ損失など、予期しない動作が発生する可能性があります。またはそれは単に何もしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="7f85c0b32a8a8391746a494ce79e8653dad5dd2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8.stopCoverage()&lt;/code&gt; method allows the user to stop the coverage collection started by &lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt;&lt;code&gt;NODE_V8_COVERAGE&lt;/code&gt;&lt;/a&gt;, so that V8 can release the execution count records and optimize code. This can be used in conjunction with &lt;a href=&quot;#v8_v8_takecoverage&quot;&gt;&lt;code&gt;v8.takeCoverage()&lt;/code&gt;&lt;/a&gt; if the user wants to collect the coverage on demand.</source>
          <target state="translated">&lt;code&gt;v8.stopCoverage()&lt;/code&gt; メソッドは、ユーザーが開始したことにより、カバレッジの収集を停止することができます&lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt; &lt;code&gt;NODE_V8_COVERAGE&lt;/code&gt; を&lt;/a&gt;V8は、実行回数を記録し、最適化コードを公開することができそうということ、。これは、ユーザーがオンデマンドでカバレッジを収集したい場合に、&lt;a href=&quot;#v8_v8_takecoverage&quot;&gt; &lt;code&gt;v8.takeCoverage()&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​できます。</target>
        </trans-unit>
        <trans-unit id="f368ec4af55e27fe44f39f8fc66970a051459084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8.takeCoverage()&lt;/code&gt; method allows the user to write the coverage started by &lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt;&lt;code&gt;NODE_V8_COVERAGE&lt;/code&gt;&lt;/a&gt; to disk on demand. This method can be invoked multiple times during the lifetime of the process. Each time the execution counter will be reset and a new coverage report will be written to the directory specified by &lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt;&lt;code&gt;NODE_V8_COVERAGE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;v8.takeCoverage()&lt;/code&gt; メソッドは、ユーザーが開始したことにより、カバレッジ書き込むことができます&lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt; &lt;code&gt;NODE_V8_COVERAGE&lt;/code&gt; &lt;/a&gt;オンデマンドでディスクにします。このメソッドは、プロセスの存続期間中に複数回呼び出すことができます。実行カウンターがリセットされ、&lt;a href=&quot;cli#cli_node_v8_coverage_dir&quot;&gt; &lt;code&gt;NODE_V8_COVERAGE&lt;/code&gt; で&lt;/a&gt;指定されたディレクトリに新しいカバレッジレポートが書き込まれるたびに。</target>
        </trans-unit>
        <trans-unit id="eb12b9f59b42f9a78781aeae6fde23e91affcd74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8/*&lt;/code&gt; modules do not have any exports, and if not imported in a specific order would in fact throw errors. As such there are virtually no legitimate use cases for importing them through &lt;code&gt;require()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v8/*&lt;/code&gt; モジュールは任意の輸出を持っている、としていない特定の順序でインポートされていない場合でしょう実際のスローエラーインチ そのため、 &lt;code&gt;require()&lt;/code&gt; を介してそれらをインポートする正当なユースケースは事実上ありません。</target>
        </trans-unit>
        <trans-unit id="42e8f90c8521f98a85d97ecfb9c316de5a897439" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; module exposes APIs that are specific to the version of &lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8&lt;/a&gt; built into the Node.js binary. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;v8&lt;/code&gt; のバージョンに固有のモジュールが公開するAPIの&lt;a href=&quot;https://developers.google.com/v8/&quot;&gt;V8は、&lt;/a&gt; Node.jsのバイナリに組み込まれています。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e9150ac5d17e860569baf146b36a5690bb0aff13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v8&lt;/code&gt; property now includes a Node.js specific suffix.</source>
          <target state="translated">&lt;code&gt;v8&lt;/code&gt; プロパティは現在のNode.jsの特定のサフィックスが含まれています。</target>
        </trans-unit>
        <trans-unit id="139ccc74ec513db3084c8d6e65e3c1ebda6b2995" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; can now be a &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;value&lt;/code&gt; を &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="c192cc600911419929e252fbb22925c9950ff5ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; is interpreted and written as a two's complement signed integer.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 2の補数の符号付き整数として解釈され、書き込まれます。</target>
        </trans-unit>
        <trans-unit id="ab730178ebe2836e29d19f2ab82c52f4762c6a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbatim&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;verbatim&lt;/code&gt; オプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0af2d856dfcd7dd69eac4ee3adf4d77a3dc20392" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify&lt;/code&gt; object can not be used again after &lt;code&gt;verify.verify()&lt;/code&gt; has been called. Multiple calls to &lt;code&gt;verify.verify()&lt;/code&gt; will result in an error being thrown.</source>
          <target state="translated">&lt;code&gt;verify.verify()&lt;/code&gt; が呼び出された後は、 &lt;code&gt;verify&lt;/code&gt; オブジェクトを再び使用することはできません。 &lt;code&gt;verify.verify()&lt;/code&gt; を複数回呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="976d556be3d415ba5029d67ed77b0daec9ea34d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.Module&lt;/code&gt; class provides a low-level interface for using ECMAScript modules in VM contexts. It is the counterpart of the &lt;code&gt;vm.Script&lt;/code&gt; class that closely mirrors &lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-abstract-module-records&quot;&gt;Module Record&lt;/a&gt;s as defined in the ECMAScript specification.</source>
          <target state="translated">&lt;code&gt;vm.Module&lt;/code&gt; のクラスは、VMコンテキストでのECMAScriptモジュールを使用するための低レベルのインタフェースを提供します。これは、ECMAScript仕様で定義されている&lt;a href=&quot;https://www.ecma-international.org/ecma-262/#sec-abstract-module-records&quot;&gt;モジュールレコード&lt;/a&gt;を厳密に &lt;code&gt;vm.Script&lt;/code&gt; するvm.Scriptクラスの対応物です。</target>
        </trans-unit>
        <trans-unit id="97ecc00ca544db7063b1c36bded215825f2053c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.SourceTextModule&lt;/code&gt; class provides a low-level interface for using ECMAScript modules in VM contexts. It is the counterpart of the &lt;code&gt;vm.Script&lt;/code&gt; class that closely mirrors &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;s as defined in the ECMAScript specification.</source>
          <target state="translated">&lt;code&gt;vm.SourceTextModule&lt;/code&gt; のクラスは、VMコンテキストでのECMAScriptモジュールを使用するための低レベルのインタフェースを提供します。これは、ECMAScript仕様で定義されている&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt;を厳密に反映する &lt;code&gt;vm.Script&lt;/code&gt; クラスの対応物です。</target>
        </trans-unit>
        <trans-unit id="3d59d4b376400672b54c3f6aca2898afab60a95c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.SourceTextModule&lt;/code&gt; class provides the &lt;a href=&quot;https://tc39.es/ecma262/#sec-source-text-module-records&quot;&gt;Source Text Module Record&lt;/a&gt; as defined in the ECMAScript specification.</source>
          <target state="translated">&lt;code&gt;vm.SourceTextModule&lt;/code&gt; のクラスが提供&lt;a href=&quot;https://tc39.es/ecma262/#sec-source-text-module-records&quot;&gt;ソーステキストモジュールのレコードを&lt;/a&gt;ECMAScript仕様で定義されています。</target>
        </trans-unit>
        <trans-unit id="b0e3d53780f5b723bb0411ba7da7c3b638dfc95f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.SyntheticModule&lt;/code&gt; class provides the &lt;a href=&quot;https://heycam.github.io/webidl/#synthetic-module-records&quot;&gt;Synthetic Module Record&lt;/a&gt; as defined in the WebIDL specification. The purpose of synthetic modules is to provide a generic interface for exposing non-JavaScript sources to ECMAScript module graphs.</source>
          <target state="translated">&lt;code&gt;vm.SyntheticModule&lt;/code&gt; のクラスが提供&lt;a href=&quot;https://heycam.github.io/webidl/#synthetic-module-records&quot;&gt;合成モジュールのレコードを&lt;/a&gt;WebIDL仕様で定義されています。合成モジュールの目的は、JavaScript以外のソースをECMAScriptモジュールグラフに公開するための汎用インターフェイスを提供することです。</target>
        </trans-unit>
        <trans-unit id="a6b7535a26e0fb508388f71c65a7971dfafdc57e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.createContext()&lt;/code&gt; method is primarily useful for creating a single context that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single context representing a window's global object, then run all &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags together within that context.</source>
          <target state="translated">&lt;code&gt;vm.createContext()&lt;/code&gt; メソッドは、複数のスクリプトを実行するために使用することができる単一のコンテキストを作成するために主に有用です。たとえば、Webブラウザーをエミュレートする場合、このメソッドを使用して、ウィンドウのグローバルオブジェクトを表す単一のコンテキストを作成し、そのコンテキスト内ですべての &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを一緒に実行できます。</target>
        </trans-unit>
        <trans-unit id="316cf355e3db60036a581e7c99d2d0bf9e7002ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.createContext()&lt;/code&gt; method is primarily useful for creating a single sandbox that can be used to run multiple scripts. For instance, if emulating a web browser, the method can be used to create a single sandbox representing a window's global object, then run all &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags together within the context of that sandbox.</source>
          <target state="translated">&lt;code&gt;vm.createContext()&lt;/code&gt; メソッドは、複数のスクリプトを実行するために使用することができる単一のサンドボックスを作成するために主に有用です。たとえば、Webブラウザをエミュレートする場合、このメソッドを使用して、ウィンドウのグローバルオブジェクトを表す単一のサンドボックスを作成し、そのサンドボックスのコンテキスト内ですべての &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグを一緒に実行できます。</target>
        </trans-unit>
        <trans-unit id="12753649588a0ca14f4ab96f26c304c6bf9bfee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInContext()&lt;/code&gt; method compiles &lt;code&gt;code&lt;/code&gt;, runs it within the context of the &lt;code&gt;contextifiedObject&lt;/code&gt;, then returns the result. Running code does not have access to the local scope. The &lt;code&gt;contextifiedObject&lt;/code&gt; object &lt;em&gt;must&lt;/em&gt; have been previously &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; using the &lt;a href=&quot;#vm_vm_createcontext_contextobject_options&quot;&gt;&lt;code&gt;vm.createContext()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;vm.runInContext()&lt;/code&gt; メソッドは、コンパイル &lt;code&gt;code&lt;/code&gt; のコンテキスト内でそれを実行 &lt;code&gt;contextifiedObject&lt;/code&gt; その結果を返します。実行中のコードはローカルスコープにアクセスできません。 &lt;code&gt;contextifiedObject&lt;/code&gt; のオブジェクトは、&lt;em&gt;必要があり&lt;/em&gt;、以前にされている&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt;使用&lt;a href=&quot;#vm_vm_createcontext_contextobject_options&quot;&gt; &lt;code&gt;vm.createContext()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="1cd62965c9c05e11b962409555d5994f7ff4e77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInContext()&lt;/code&gt; method compiles &lt;code&gt;code&lt;/code&gt;, runs it within the context of the &lt;code&gt;contextifiedSandbox&lt;/code&gt;, then returns the result. Running code does not have access to the local scope. The &lt;code&gt;contextifiedSandbox&lt;/code&gt; object &lt;em&gt;must&lt;/em&gt; have been previously &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt; using the &lt;a href=&quot;#vm_vm_createcontext_sandbox_options&quot;&gt;&lt;code&gt;vm.createContext()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;vm.runInContext()&lt;/code&gt; メソッドは、コンパイル &lt;code&gt;code&lt;/code&gt; のコンテキスト内でそれを実行 &lt;code&gt;contextifiedSandbox&lt;/code&gt; その結果を返します。実行中のコードはローカルスコープにアクセスできません。 &lt;code&gt;contextifiedSandbox&lt;/code&gt; のオブジェクトは、&lt;em&gt;必要があり&lt;/em&gt;、以前にされている&lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;contextified&lt;/a&gt;使用&lt;a href=&quot;#vm_vm_createcontext_sandbox_options&quot;&gt; &lt;code&gt;vm.createContext()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="9d9451f2987b24df6cb84d0ccb1184dd2f6db4ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInNewContext()&lt;/code&gt; first contextifies the given &lt;code&gt;contextObject&lt;/code&gt; (or creates a new &lt;code&gt;contextObject&lt;/code&gt; if passed as &lt;code&gt;undefined&lt;/code&gt;), compiles the &lt;code&gt;code&lt;/code&gt;, runs it within the created context, then returns the result. Running code does not have access to the local scope.</source>
          <target state="translated">&lt;code&gt;vm.runInNewContext()&lt;/code&gt; 最初contextifies所与 &lt;code&gt;contextObject&lt;/code&gt; （または新規作成 &lt;code&gt;contextObject&lt;/code&gt; として渡された場合は &lt;code&gt;undefined&lt;/code&gt; ）、コンパイル &lt;code&gt;code&lt;/code&gt; 結果を返し、その後、作成されたコンテキスト内でそれを実行し、。実行中のコードはローカルスコープにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="62d126cd1ce5c7f3fa39dc697a697511d07be670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.runInNewContext()&lt;/code&gt; first contextifies the given &lt;code&gt;sandbox&lt;/code&gt; object (or creates a new &lt;code&gt;sandbox&lt;/code&gt; if passed as &lt;code&gt;undefined&lt;/code&gt;), compiles the &lt;code&gt;code&lt;/code&gt;, runs it within the context of the created context, then returns the result. Running code does not have access to the local scope.</source>
          <target state="translated">&lt;code&gt;vm.runInNewContext()&lt;/code&gt; 最初contextifies所与 &lt;code&gt;sandbox&lt;/code&gt; オブジェクト（または新規作成 &lt;code&gt;sandbox&lt;/code&gt; として渡された場合 &lt;code&gt;undefined&lt;/code&gt; ）、コンパイル &lt;code&gt;code&lt;/code&gt; の結果を返し、その後、作成されたコンテキストのコンテキスト内でそれを実行し、。実行中のコードはローカルスコープにアクセスできません。</target>
        </trans-unit>
        <trans-unit id="df7e0e52575d07daf836f3dcb999f3622661ab52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm&lt;/code&gt; module enables compiling and running code within V8 Virtual Machine contexts. &lt;strong&gt;The &lt;code&gt;vm&lt;/code&gt; module is not a security mechanism. Do not use it to run untrusted code&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;vm&lt;/code&gt; モジュールは、V8仮想マシンのコンテキスト内のコードをコンパイルして実行できます。&lt;strong&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;モジュールは、セキュリティ・メカニズムではありません。&lt;/strong&gt;&lt;strong&gt;信頼できないコードを実行するために使用しないでください&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8610a6d7f3470d50f371fbbe335752bef43b3dbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm&lt;/code&gt; module provides APIs for compiling and running code within V8 Virtual Machine contexts. &lt;strong&gt;The &lt;code&gt;vm&lt;/code&gt; module is not a security mechanism. Do not use it to run untrusted code&lt;/strong&gt;. The term &quot;sandbox&quot; is used throughout these docs simply to refer to a separate context, and does not confer any security guarantees.</source>
          <target state="translated">&lt;code&gt;vm&lt;/code&gt; モジュールは、V8仮想マシンのコンテキスト内のコードをコンパイルして実行するためのAPIを提供します。&lt;strong&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;モジュールは、セキュリティ・メカニズムではありません。&lt;/strong&gt;&lt;strong&gt;信頼できないコードの実行には使用しないでください&lt;/strong&gt;。「サンドボックス」という用語は、これらのドキュメント全体で単に別のコンテキストを指すために使用されており、セキュリティの保証を与えるものではありません。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7c0e915e0cfd3fade1eb273a105095235eaa65a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; loop is necessary when processing data with &lt;code&gt;readable.read()&lt;/code&gt;. Only after &lt;code&gt;readable.read()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; will be emitted.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; と、データを処理する際にループが必要である &lt;code&gt;readable.read()&lt;/code&gt; 。 &lt;code&gt;readable.read()&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; を返した後にのみ、&lt;a href=&quot;#stream_event_readable&quot;&gt; &lt;code&gt;'readable'&lt;/code&gt; &lt;/a&gt;が発行されます。</target>
        </trans-unit>
        <trans-unit id="91c664db964a38815c9aa3275cf5c899ae5335ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;windowsHide&lt;/code&gt; option is supported now.</source>
          <target state="translated">&lt;code&gt;windowsHide&lt;/code&gt; のオプションがサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="d1d677ab19d955f0c42d4fec78bf4b048f05f716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worker&lt;/code&gt; parameter is passed now; see below for details.</source>
          <target state="translated">ここで &lt;code&gt;worker&lt;/code&gt; パラメーターが渡されます。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ced211b65867946e8189c44a339cd943b18be51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worker_threads&lt;/code&gt; module enables the use of threads that execute JavaScript in parallel. To access it:</source>
          <target state="translated">&lt;code&gt;worker_threads&lt;/code&gt; のモジュールは、並列にJavaScriptを実行するスレッドの使用を可能にします。アクセスするには：</target>
        </trans-unit>
        <trans-unit id="b5fc9fe76f26aead960a92945f78d6f11a6c11c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._write()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;writable._write()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="27fe9b62a347651c87f5964623a298ba8e0d3b63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method is prefixed with an underscore because it is internal to the class that defines it, and should never be called directly by user programs.</source>
          <target state="translated">&lt;code&gt;writable._writev()&lt;/code&gt; メソッドは、それを定義するクラスの内部にあるので、下線が付いており、ユーザプログラムによって直接呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="ac3a9cbb1959bfde47a2c93445f9ca1fb767ad5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method may be implemented in addition or alternatively to &lt;code&gt;writable._write()&lt;/code&gt; in stream implementations that are capable of processing multiple chunks of data at once. If implemented and if there is buffered data from previous writes, &lt;code&gt;_writev()&lt;/code&gt; will be called instead of &lt;code&gt;_write()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;writable._writev()&lt;/code&gt; メソッドは、に加えて、又は代替的に実現されてもよい &lt;code&gt;writable._write()&lt;/code&gt; 一度に複数のデータチャンクを処理することが可能なストリーム実装で。実装されていて、以前の書き込みからのバッファリングされたデータがある場合、 &lt;code&gt;_writev()&lt;/code&gt; 代わりに &lt;code&gt;_write()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7c6691c92a237bbbd878643214ec8297403742e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable._writev()&lt;/code&gt; method may be implemented in addition to &lt;code&gt;writable._write()&lt;/code&gt; in stream implementations that are capable of processing multiple chunks of data at once. If implemented, the method will be called with all chunks of data currently buffered in the write queue.</source>
          <target state="translated">&lt;code&gt;writable._writev()&lt;/code&gt; メソッドは、他に実装されてもよい &lt;code&gt;writable._write()&lt;/code&gt; 一度に複数のデータチャンクを処理することが可能なストリーム実装で。実装されている場合、メソッドは、現在書き込みキューにバッファーされているすべてのデータチャンクで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="294df34f36d025c8b6233b4ffb2e44e160eeae61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.cork()&lt;/code&gt; method forces all written data to be buffered in memory. The buffered data will be flushed when either the &lt;a href=&quot;#stream_writable_uncork&quot;&gt;&lt;code&gt;stream.uncork()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.end()&lt;/code&gt;&lt;/a&gt; methods are called.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; メソッド軍はすべてのメモリにバッファリングするデータを書き込みました。バッファリングされたデータは、&lt;a href=&quot;#stream_writable_uncork&quot;&gt; &lt;code&gt;stream.uncork()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt; &lt;code&gt;stream.end()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されるとフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="3cf311be2cf76a9013540e79f17530ebd02d755c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.setDefaultEncoding()&lt;/code&gt; method sets the default &lt;code&gt;encoding&lt;/code&gt; for a &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">&lt;code&gt;writable.setDefaultEncoding()&lt;/code&gt; メソッドは、デフォルトの設定 &lt;code&gt;encoding&lt;/code&gt; のための&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームを。</target>
        </trans-unit>
        <trans-unit id="671ed8c8319213450ede72423dbb05201859e81a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.uncork()&lt;/code&gt; method flushes all data buffered since &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;stream.cork()&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="translated">&lt;code&gt;writable.uncork()&lt;/code&gt; メソッドがあるため、バッファのすべてのデータフラッシュ&lt;a href=&quot;#stream_writable_cork&quot;&gt; &lt;code&gt;stream.cork()&lt;/code&gt; &lt;/a&gt;と呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="ae096348e9037ff2e10f68360c0ee59961ba8a2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.write()&lt;/code&gt; method writes some data to the stream, and calls the supplied &lt;code&gt;callback&lt;/code&gt; once the data has been fully handled. If an error occurs, the &lt;code&gt;callback&lt;/code&gt;&lt;em&gt;may or may not&lt;/em&gt; be called with the error as its first argument. To reliably detect write errors, add a listener for the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;writable.write()&lt;/code&gt; メソッドは、ストリームに、いくつかのデータを書き込み、供給されたコール &lt;code&gt;callback&lt;/code&gt; データが完全に処理された後。エラーが発生した場合、 &lt;code&gt;callback&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;最初の引数としてエラーを指定して呼び出される&lt;em&gt;場合&lt;/em&gt;と呼び出され&lt;em&gt;ない場合があり&lt;/em&gt;ます。書き込みエラーを確実に検出するには、 &lt;code&gt;'error'&lt;/code&gt; イベントのリスナーを追加します。</target>
        </trans-unit>
        <trans-unit id="24e8f8053ddb9bb0cecde9257df0a04f3c0365af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writable.write()&lt;/code&gt; method writes some data to the stream, and calls the supplied &lt;code&gt;callback&lt;/code&gt; once the data has been fully handled. If an error occurs, the &lt;code&gt;callback&lt;/code&gt;&lt;em&gt;may or may not&lt;/em&gt; be called with the error as its first argument. To reliably detect write errors, add a listener for the &lt;code&gt;'error'&lt;/code&gt; event. The &lt;code&gt;callback&lt;/code&gt; is called asynchronously and before &lt;code&gt;'error'&lt;/code&gt; is emitted.</source>
          <target state="translated">&lt;code&gt;writable.write()&lt;/code&gt; メソッドは、ストリームに、いくつかのデータを書き込み、供給されたコール &lt;code&gt;callback&lt;/code&gt; データが完全に処理された後。エラーが発生した場合、 &lt;code&gt;callback&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;エラーを最初の引数として呼び出される&lt;em&gt;場合&lt;/em&gt;と呼び出され&lt;em&gt;ない場合があり&lt;/em&gt;ます。書き込みエラーを確実に検出するには、 &lt;code&gt;'error'&lt;/code&gt; イベントのリスナーを追加します。 &lt;code&gt;callback&lt;/code&gt; 非同期と前に呼び出され &lt;code&gt;'error'&lt;/code&gt; 放出されます。</target>
        </trans-unit>
        <trans-unit id="0c114b95c94baec67e1dca89c5c1cbc3b54e1d47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib.bytesWritten&lt;/code&gt; property specifies the number of bytes written to the engine, before the bytes are processed (compressed or decompressed, as appropriate for the derived class).</source>
          <target state="translated">&lt;code&gt;zlib.bytesWritten&lt;/code&gt; のプロパティは、エンジンに書き込まれたバイトの数を指定するバイトが処理される前に（派生クラスに応じて、圧縮又は伸張します）。</target>
        </trans-unit>
        <trans-unit id="f4d9425ffe5e7209df632d44375adca39b3fbaf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module can be used to implement support for the &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;deflate&lt;/code&gt; and &lt;code&gt;br&lt;/code&gt; content-encoding mechanisms defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.2&quot;&gt;HTTP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; モジュールのためのサポートを実装するために使用することができる &lt;code&gt;gzip&lt;/code&gt; 、 &lt;code&gt;deflate&lt;/code&gt; と &lt;code&gt;br&lt;/code&gt; によって定義されるコンテンツコードメカニズム&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.2&quot;&gt;HTTPを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff312da231febfae7bc07450e11dc58ffa83a66e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module provides compression functionality implemented using Gzip and Deflate/Inflate, as well as Brotli. It can be accessed using:</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; モジュールは、圧縮機能は、gzipとデフレート/ふくらませる、ならびにBrotliを使用して実装提供します。以下を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f68e36cd6baa297102c920b2526a807760f1614d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;zlib&lt;/code&gt; module provides compression functionality implemented using Gzip, Deflate/Inflate, and Brotli.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; モジュールは、GZIP、デフレート/ふくらませる、及びBrotliを使用して実装圧縮機能を提供します。</target>
        </trans-unit>
        <trans-unit id="0d3fb2c750dea4c18daf95518433459481d23f29" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&quot;module&quot;&lt;/em&gt; format is returned for an ECMAScript Module, while the &lt;em&gt;&quot;commonjs&quot;&lt;/em&gt; format is used to indicate loading through the legacy CommonJS loader. Additional formats such as &lt;em&gt;&quot;addon&quot;&lt;/em&gt; can be extended in future updates.</source>
          <target state="translated">&lt;em&gt;「モジュール」&lt;/em&gt;つつフォーマットは、ECMAScriptのモジュールのために返される&lt;em&gt;「commonjs」&lt;/em&gt;フォーマットはレガシーCommonJSローダを介してローディングを示すために使用されます。&lt;em&gt;「アドオン」&lt;/em&gt;などの追加のフォーマットは、将来のアップデートで拡張できます。</target>
        </trans-unit>
        <trans-unit id="4b26d60c8c267e33ceec9eb3cb25823659216c18" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;C0 control percent-encode set&lt;/em&gt; includes code points in range U+0000 to U+001F (inclusive) and all code points greater than U+007E.</source>
          <target state="translated">&lt;em&gt;C0制御パーセントエンコードセットは、&lt;/em&gt; U + 001F（含む）とU + 007Eよりも大きいすべてのコードポイントに範囲U + 0000のコードポイントを含みます。</target>
        </trans-unit>
        <trans-unit id="0672d673b74190fd9fba201b783b6f34f40080c2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;fragment percent-encode set&lt;/em&gt; includes the &lt;em&gt;C0 control percent-encode set&lt;/em&gt; and code points U+0020, U+0022, U+003C, U+003E, and U+0060.</source>
          <target state="translated">&lt;em&gt;断片パーセントエンコードセットを&lt;/em&gt;含む&lt;em&gt;C0制御パーセントエンコードセット&lt;/em&gt;、U + 0022、U + 0020 U + 003C、U + 003E、およびU + 0060を、コードポイント。</target>
        </trans-unit>
        <trans-unit id="e22ab329bdd24668cc59f8fef8dc30760c4de96d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;heap&lt;/em&gt; is where objects, strings, and closures are stored. Variables are stored in the &lt;em&gt;stack&lt;/em&gt; and the actual JavaScript code resides in the &lt;em&gt;code segment&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ヒープは&lt;/em&gt;、オブジェクト、文字列、および閉鎖が保存される場所です。変数は&lt;em&gt;スタックに&lt;/em&gt;格納され、実際のJavaScriptコードは&lt;em&gt;コードセグメントにあります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d7375464a38257a226cb87f262dcb3be552b7358" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;path percent-encode set&lt;/em&gt; includes the &lt;em&gt;C0 control percent-encode set&lt;/em&gt; and code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060, U+007B, and U+007D.</source>
          <target state="translated">&lt;em&gt;パスパーセントエンコードセットを&lt;/em&gt;含む&lt;em&gt;C0制御パーセントエンコードセット&lt;/em&gt;とコードポイントU + 0020、U + 0022、U + 0023、U + 003C、U + 003E、U + 003F、U + 0060、U + 007B、およびU + 007D。</target>
        </trans-unit>
        <trans-unit id="e16b65952ade126f6a18c1bc1edf6665c9b2398f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specifier&lt;/em&gt; of an &lt;code&gt;import&lt;/code&gt; statement (the string after the &lt;code&gt;from&lt;/code&gt; keyword) can either be an URL-style relative path like &lt;code&gt;'./file.mjs'&lt;/code&gt; or a package name like &lt;code&gt;'fs'&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;指定&lt;/em&gt;の &lt;code&gt;import&lt;/code&gt; 文の（後の文字列 &lt;code&gt;from&lt;/code&gt; キーワード）は、いずれかのようなURL形式の相対パスになります &lt;code&gt;'./file.mjs'&lt;/code&gt; などのパッケージ名 &lt;code&gt;'fs'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d70f6b9c96199d8fff3d7061feed1cf128c3ca54" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specifier&lt;/em&gt; of an &lt;code&gt;import&lt;/code&gt; statement is the string after the &lt;code&gt;from&lt;/code&gt; keyword, e.g. &lt;code&gt;'path'&lt;/code&gt; in &lt;code&gt;import { sep } from 'path'&lt;/code&gt;. Specifiers are also used in &lt;code&gt;export from&lt;/code&gt; statements, and as the argument to an &lt;code&gt;import()&lt;/code&gt; expression.</source>
          <target state="translated">&lt;em&gt;指定&lt;/em&gt;の &lt;code&gt;import&lt;/code&gt; 文は後の文字列です &lt;code&gt;from&lt;/code&gt; 、キーワード、例えば &lt;code&gt;'path'&lt;/code&gt; で &lt;code&gt;import { sep } from 'path'&lt;/code&gt; 。指定子は、 &lt;code&gt;export from&lt;/code&gt; ステートメントでも、また &lt;code&gt;import()&lt;/code&gt; 式の引数としても使用されます。</target>
        </trans-unit>
        <trans-unit id="6ee6720e4d6848bc402c87158eb6ba5b1413a59b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;userinfo encode set&lt;/em&gt; includes the &lt;em&gt;path percent-encode set&lt;/em&gt; and code points U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D, U+005E, and U+007C.</source>
          <target state="translated">&lt;em&gt;ユーザー情報のエンコード・セットが&lt;/em&gt;含ま&lt;em&gt;パスパーセントエンコードセット&lt;/em&gt;、およびコードポイントU + 002F、U + 003A、U + 003B、U + 003D、U + 0040、U + 005B、U + 005C、U + 005D、U + 005EをおよびU + 007C。</target>
        </trans-unit>
        <trans-unit id="23386f556b00f0799b7c78c24407776a22e27dd3" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;userinfo percent-encode set&lt;/em&gt; is used exclusively for username and passwords encoded within the URL. The &lt;em&gt;path percent-encode set&lt;/em&gt; is used for the path of most URLs. The &lt;em&gt;fragment percent-encode set&lt;/em&gt; is used for URL fragments. The &lt;em&gt;C0 control percent-encode set&lt;/em&gt; is used for host and path under certain specific conditions, in addition to all other cases.</source>
          <target state="translated">&lt;em&gt;userinfoをパーセントエンコードセットは、&lt;/em&gt; URL内にエンコードのユーザー名とパスワードのためにのみ使用されます。&lt;em&gt;パスパーセントエンコードセットが&lt;/em&gt;最もURLのパスのために使用されます。&lt;em&gt;フラグメントパーセントエンコードセットは、&lt;/em&gt; URLの断片のために使用されています。&lt;em&gt;C0制御パーセントエンコードセットは、&lt;/em&gt;他のすべての場合に加えて、ある特定の条件下でのホストとパスのために使用されます。</target>
        </trans-unit>
        <trans-unit id="5d48f2ed2d48f5db7cc074ccbef3469964fc1d56" translate="yes" xml:space="preserve">
          <source>The ALPN protocol identifier negotiated for this session.</source>
          <target state="translated">このセッションのためにネゴシエートされた ALPN プロトコル識別子。</target>
        </trans-unit>
        <trans-unit id="19878fb49eb2e040b13e6f3ef4667684081a995d" translate="yes" xml:space="preserve">
          <source>The API adds a &lt;code&gt;napi_finalize&lt;/code&gt; callback which will be called when the JavaScript object just created is ready for garbage collection. It is similar to &lt;code&gt;napi_wrap()&lt;/code&gt; except that:</source>
          <target state="translated">APIは、作成されたJavaScriptオブジェクトがガベージコレクションの準備ができたときに呼び出される &lt;code&gt;napi_finalize&lt;/code&gt; コールバックを追加します。 &lt;code&gt;napi_wrap()&lt;/code&gt; と似ていますが、次の点が異なります。</target>
        </trans-unit>
        <trans-unit id="60209aed6d515cac9002b1fac588afdc2c3adb3e" translate="yes" xml:space="preserve">
          <source>The API is accessible via &lt;code&gt;require('fs').promises&lt;/code&gt; only.</source>
          <target state="translated">APIには、 &lt;code&gt;require('fs').promises&lt;/code&gt; みアクセスできます。</target>
        </trans-unit>
        <trans-unit id="457cca355c0fb79d557e5033521a1853e98aac87" translate="yes" xml:space="preserve">
          <source>The API is accessible via &lt;code&gt;require('path').posix&lt;/code&gt; or &lt;code&gt;require('path/posix')&lt;/code&gt;.</source>
          <target state="translated">APIには、 &lt;code&gt;require('path').posix&lt;/code&gt; または &lt;code&gt;require('path/posix')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a7b484bb35ef675f31fc51772fcda14becafc76a" translate="yes" xml:space="preserve">
          <source>The API is accessible via &lt;code&gt;require('path').win32&lt;/code&gt; or &lt;code&gt;require('path/win32')&lt;/code&gt;.</source>
          <target state="translated">APIには、 &lt;code&gt;require('path').win32&lt;/code&gt; または &lt;code&gt;require('path/win32')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b9d279465a96f20af7de8960a8fd3b41fc721ef0" translate="yes" xml:space="preserve">
          <source>The API is accessible via &lt;code&gt;require('util').types&lt;/code&gt; or &lt;code&gt;require('util/types')&lt;/code&gt;.</source>
          <target state="translated">APIには、 &lt;code&gt;require('util').types&lt;/code&gt; または &lt;code&gt;require('util/types')&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="fc483ce66d0abc03fd32e445e705d973f26da1ef" translate="yes" xml:space="preserve">
          <source>The API versions are useful when inspecting the runtime state from within the application, in expectation of self-adjusting the resource consumption, load balancing, monitoring etc.</source>
          <target state="translated">APIのバージョンは、アプリケーション内からランタイムの状態を検査する際に、リソース消費の自己調整、負荷分散、監視などを期待して便利です。</target>
        </trans-unit>
        <trans-unit id="0951fdaa95308bec1dfbfa8d404c92c357929728" translate="yes" xml:space="preserve">
          <source>The API's return value is passed via an out parameter.</source>
          <target state="translated">APIの戻り値はoutパラメータで渡されます。</target>
        </trans-unit>
        <trans-unit id="09062a80a94152f8f1768c599ae619e0e76b8acf" translate="yes" xml:space="preserve">
          <source>The APIs and implementation are subject to change at any time.</source>
          <target state="translated">APIや実装は随時変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="53f0c757b52397f8f07d9a59faa43b0b19cacf07" translate="yes" xml:space="preserve">
          <source>The APIs documented in this section provide a simple interface to get and set properties on arbitrary JavaScript objects represented by &lt;code&gt;napi_value&lt;/code&gt;.</source>
          <target state="translated">このセクションに記載されているAPIは、 &lt;code&gt;napi_value&lt;/code&gt; で表される任意のJavaScriptオブジェクトのプロパティを取得および設定するためのシンプルなインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="7b41c34ea62e101d148225b05038df05cdb06c85" translate="yes" xml:space="preserve">
          <source>The AsyncHooks Sensitive API was never documented and had various minor issues. Use the &lt;code&gt;AsyncResource&lt;/code&gt; API instead. See &lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572&lt;/a&gt;.</source>
          <target state="translated">AsyncHooks Sensitive APIは文書化されておらず、さまざまな小さな問題がありました。代わりに &lt;code&gt;AsyncResource&lt;/code&gt; APIを使用してください。&lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cae12fae9a85aea65afcafca344456be17b22a97" translate="yes" xml:space="preserve">
          <source>The AsyncHooks sensitive API was never documented and had various minor issues. Use the &lt;code&gt;AsyncResource&lt;/code&gt; API instead. See &lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572&lt;/a&gt;.</source>
          <target state="translated">AsyncHooksセンシティブAPIは文書化されておらず、さまざまな小さな問題がありました。代わりに &lt;code&gt;AsyncResource&lt;/code&gt; APIを使用してください。&lt;a href=&quot;https://github.com/nodejs/node/issues/15572&quot;&gt;https://github.com/nodejs/node/issues/15572を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d1b6f5984ae9585871ec63a04fbea85e35a8f15" translate="yes" xml:space="preserve">
          <source>The C++ constructor callback should be a static method on the class that calls the actual class constructor, then wraps the new C++ instance in a JavaScript object, and returns the wrapper object. See &lt;code&gt;napi_wrap()&lt;/code&gt; for details.</source>
          <target state="translated">C ++コンストラクターコールバックは、実際のクラスコンストラクターを呼び出し、JavaScriptオブジェクトで新しいC ++インスタンスをラップし、ラッパーオブジェクトを返すクラスの静的メソッドである必要があります。詳細については、 &lt;code&gt;napi_wrap()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b85ec611441373077fc9338ce3ee23e2bc14377b" translate="yes" xml:space="preserve">
          <source>The CommonJS module &lt;code&gt;require&lt;/code&gt; always treats the files it references as CommonJS.</source>
          <target state="translated">CommonJSモジュール &lt;code&gt;require&lt;/code&gt; は、参照するファイルを常にCommonJSとして扱います。</target>
        </trans-unit>
        <trans-unit id="75c226dff34c132b4dadda02d210de7f84a216ce" translate="yes" xml:space="preserve">
          <source>The Compatibility API has the goal of providing a similar developer experience of HTTP/1 when using HTTP/2, making it possible to develop applications that support both &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt; and HTTP/2. This API targets only the &lt;strong&gt;public API&lt;/strong&gt; of the &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt;. However many modules use internal methods or state, and those &lt;em&gt;are not supported&lt;/em&gt; as it is a completely different implementation.</source>
          <target state="translated">互換性APIの目的は、HTTP / 2の使用時にHTTP / 1と同様の開発者エクスペリエンスを提供し、&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;とHTTP / 2の両方をサポートするアプリケーションを開発できるようにすることです。このAPI は、&lt;a href=&quot;http&quot;&gt;HTTP / 1の&lt;/a&gt;&lt;strong&gt;パブリックAPI&lt;/strong&gt;のみを対象としています。ただし、多くのモジュールは内部メソッドまたは状態を使用し、それら&lt;em&gt;は&lt;/em&gt;完全に異なる実装である&lt;em&gt;ためサポートさ&lt;/em&gt;れ&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="961d6df9bb778b72464f79d4e4386ab4894e1c10" translate="yes" xml:space="preserve">
          <source>The Core API provides a low-level interface designed specifically around support for HTTP/2 protocol features. It is specifically &lt;em&gt;not&lt;/em&gt; designed for compatibility with the existing &lt;a href=&quot;http&quot;&gt;HTTP/1&lt;/a&gt; module API. However, the &lt;a href=&quot;#http2_compatibility_api&quot;&gt;Compatibility API&lt;/a&gt; is.</source>
          <target state="translated">Core APIは、HTTP / 2プロトコル機能のサポートを中心に設計された低レベルのインターフェースを提供します。特に既存の&lt;a href=&quot;http&quot;&gt;HTTP / 1&lt;/a&gt;モジュールAPI との互換性のために設計されて&lt;em&gt;いません&lt;/em&gt;。ただし、&lt;a href=&quot;#http2_compatibility_api&quot;&gt;互換性API&lt;/a&gt;はそうです。</target>
        </trans-unit>
        <trans-unit id="279de7517da4ff67656c3cc6b5f838ad1ce8305b" translate="yes" xml:space="preserve">
          <source>The Crypto module was added to Node.js before there was the concept of a unified Stream API, and before there were &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects for handling binary data. As such, the many of the &lt;code&gt;crypto&lt;/code&gt; defined classes have methods not typically found on other Node.js classes that implement the &lt;a href=&quot;stream&quot;&gt;streams&lt;/a&gt; API (e.g. &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;final()&lt;/code&gt;, or &lt;code&gt;digest()&lt;/code&gt;). Also, many methods accepted and returned &lt;code&gt;'latin1'&lt;/code&gt; encoded strings by default rather than &lt;code&gt;Buffer&lt;/code&gt;s. This default was changed after Node.js v0.8 to use &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects by default instead.</source>
          <target state="translated">暗号化モジュールは、統合されたStream APIの概念が存在する前、およびバイナリデータを処理するための&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;オブジェクトが存在する前にNode.jsに追加されました。そのため、 &lt;code&gt;crypto&lt;/code&gt; 定義されたクラスの多くには、&lt;a href=&quot;stream&quot;&gt;ストリーム&lt;/a&gt; API を実装する他のNode.jsクラスには通常見られないメソッドがあります（例： &lt;code&gt;update()&lt;/code&gt; 、 &lt;code&gt;final()&lt;/code&gt; 、または &lt;code&gt;digest()&lt;/code&gt; ）。また、多くのメソッドは、デフォルトでは &lt;code&gt;Buffer&lt;/code&gt; ではなく &lt;code&gt;'latin1'&lt;/code&gt; エンコード文字列を受け入れて返しました。このデフォルトはNode.js v0.8の後で変更され、デフォルトで代わりに&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;オブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="1255dfc8cbf2ee8aad0ef2d6ca18a8d1643d8eb7" translate="yes" xml:space="preserve">
          <source>The DH groups of &lt;code&gt;modp1&lt;/code&gt;, &lt;code&gt;modp2&lt;/code&gt; and &lt;code&gt;modp5&lt;/code&gt; have a key size smaller than 2048 bits and are not recommended.</source>
          <target state="translated">&lt;code&gt;modp1&lt;/code&gt; 、 &lt;code&gt;modp2&lt;/code&gt; 、および &lt;code&gt;modp5&lt;/code&gt; のDHグループのキーサイズは2048ビット未満であり、推奨されません。</target>
        </trans-unit>
        <trans-unit id="29a530b5f57e62f7cd8a51ee1b20ab13ab2eedf3" translate="yes" xml:space="preserve">
          <source>The ECMAScript Module Namespace representation of a CommonJS module is always a namespace with a &lt;code&gt;default&lt;/code&gt; export key pointing to the CommonJS &lt;code&gt;module.exports&lt;/code&gt; value.</source>
          <target state="translated">CommonJSモジュールのECMAScriptのモジュールの名前空間表現は常に持つ名前空間で &lt;code&gt;default&lt;/code&gt; CommonJSへの輸出キーポインティング &lt;code&gt;module.exports&lt;/code&gt; は値。</target>
        </trans-unit>
        <trans-unit id="16029571d08814879fd5ceff7ac0b6026da87458" translate="yes" xml:space="preserve">
          <source>The Extended CONNECT Protocol</source>
          <target state="translated">拡張 CONNECT プロトコル</target>
        </trans-unit>
        <trans-unit id="5b3b2456b76fd5373a47d7c0f25c7408ab474e91" translate="yes" xml:space="preserve">
          <source>The HTTP &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&quot;&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;&lt;/a&gt; header is used within an http request to identify the compression encodings accepted by the client. The &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11&quot;&gt;&lt;code&gt;Content-Encoding&lt;/code&gt;&lt;/a&gt; header is used to identify the compression encodings actually applied to a message.</source>
          <target state="translated">HTTP &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3&quot;&gt; &lt;code&gt;Accept-Encoding&lt;/code&gt; &lt;/a&gt;ヘッダーは、HTTPリクエスト内で使用され、クライアントが受け入れる圧縮エンコーディングを識別します。&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11&quot;&gt; &lt;code&gt;Content-Encoding&lt;/code&gt; &lt;/a&gt;ヘッダは、実際にメッセージに適用された圧縮符号化方式を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ed4090b42f4c6ce4fe634a7a6f88509a67714c4c" translate="yes" xml:space="preserve">
          <source>The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses &amp;mdash; the user is able to stream data.</source>
          <target state="translated">Node.jsのHTTPインターフェースは、従来は使用することが困難であったプロトコルの多くの機能をサポートするように設計されています。特に、大きなチャンクエンコードされた可能性のあるメッセージ。インターフェースは、リクエストやレスポンス全体を決してバッファリングしないように注意しています&amp;mdash;ユーザーはデータをストリーミングできます。</target>
        </trans-unit>
        <trans-unit id="bfc972be28de8f64a13449f87c9c0fb97bf19a5b" translate="yes" xml:space="preserve">
          <source>The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally difficult to use. In particular, large, possibly chunk-encoded, messages. The interface is careful to never buffer entire requests or responses, so the user is able to stream data.</source>
          <target state="translated">Node.js の HTTP インターフェースは、伝統的に使用することが困難であったプロトコルの多くの機能をサポートするように設計されています。特に、大きな、おそらくチャンクエンコードされたメッセージ。インターフェースは、リクエストやレスポンス全体をバッファリングしないように注意しているので、ユーザーはデータをストリームすることができます。</target>
        </trans-unit>
        <trans-unit id="772600c21e3faa346b0496ef8be7d5364935abae" translate="yes" xml:space="preserve">
          <source>The HTTP response status message (reason phrase). E.G. &lt;code&gt;OK&lt;/code&gt; or &lt;code&gt;Internal Server Error&lt;/code&gt;.</source>
          <target state="translated">HTTP応答ステータスメッセージ（理由フレーズ）。EG &lt;code&gt;OK&lt;/code&gt; または &lt;code&gt;Internal Server Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="40c5a5bee4534201d7b876c219ec7fc5d4463481" translate="yes" xml:space="preserve">
          <source>The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header fields (e.g. &lt;code&gt;':method'&lt;/code&gt;, &lt;code&gt;':path'&lt;/code&gt;, etc).</source>
          <target state="translated">HTTP / 1仕様では、トレーラーがHTTP / 2疑似ヘッダーフィールド（ &lt;code&gt;':method'&lt;/code&gt; 、 &lt;code&gt;':path'&lt;/code&gt; など）を含むことを禁止しています。</target>
        </trans-unit>
        <trans-unit id="7ccbbe9d073301ce6d219905acbc8ef0a73f4d4b" translate="yes" xml:space="preserve">
          <source>The HTTP/2 compatibility API is composed of &lt;a href=&quot;#http2_class_http2_http2serverrequest&quot;&gt;&lt;code&gt;Http2ServerRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http2_class_http2_http2serverresponse&quot;&gt;&lt;code&gt;Http2ServerResponse&lt;/code&gt;&lt;/a&gt;. They aim at API compatibility with HTTP/1, but they do not hide the differences between the protocols. As an example, the status message for HTTP codes is ignored.</source>
          <target state="translated">HTTP / 2互換APIは、&lt;a href=&quot;#http2_class_http2_http2serverrequest&quot;&gt; &lt;code&gt;Http2ServerRequest&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#http2_class_http2_http2serverresponse&quot;&gt; &lt;code&gt;Http2ServerResponse&lt;/code&gt; で&lt;/a&gt;構成されています。これらはHTTP / 1とのAPI互換性を目指していますが、プロトコル間の違いを隠していません。例として、HTTPコードのステータスメッセージは無視されます。</target>
        </trans-unit>
        <trans-unit id="135fed06aa5bbc41c44688e5c372775c7bdee37f" translate="yes" xml:space="preserve">
          <source>The HTTP/2 compatibility API is composed of &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2ServerRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2ServerResponse&lt;/code&gt;&lt;/a&gt;. They aim at API compatibility with HTTP/1, but they do not hide the differences between the protocols. As an example, the status message for HTTP codes is ignored.</source>
          <target state="translated">HTTP / 2互換性APIは、&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2ServerRequest&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;http2&quot;&gt; &lt;code&gt;Http2ServerResponse&lt;/code&gt; で&lt;/a&gt;構成されています。それらはHTTP / 1とのAPI互換性を目指していますが、プロトコル間の違いを隠していません。例として、HTTPコードのステータスメッセージは無視されます。</target>
        </trans-unit>
        <trans-unit id="162977f5d469e9a6540d7b02728763fc461aff28" translate="yes" xml:space="preserve">
          <source>The HTTP/2 error code used when closing the stream can be retrieved using the &lt;code&gt;http2stream.rstCode&lt;/code&gt; property. If the code is any value other than &lt;code&gt;NGHTTP2_NO_ERROR&lt;/code&gt; (&lt;code&gt;0&lt;/code&gt;), an &lt;code&gt;'error'&lt;/code&gt; event will have also been emitted.</source>
          <target state="translated">ストリームを閉じるときに使用されるHTTP / 2エラーコードは、 &lt;code&gt;http2stream.rstCode&lt;/code&gt; プロパティを使用して取得できます。コードが &lt;code&gt;NGHTTP2_NO_ERROR&lt;/code&gt; （ &lt;code&gt;0&lt;/code&gt; ）以外の値の場合、 &lt;code&gt;'error'&lt;/code&gt; イベントも発行されます。</target>
        </trans-unit>
        <trans-unit id="7a1bae8c706dfc594960961ddd5385024803aeda" translate="yes" xml:space="preserve">
          <source>The HTTP/2 implementation applies stricter handling of invalid characters in HTTP header names and values than the HTTP/1 implementation.</source>
          <target state="translated">HTTP/2 の実装では、HTTP/1 の実装よりも HTTP ヘッダ名と値の中の無効な文字の扱いが厳しくなります。</target>
        </trans-unit>
        <trans-unit id="2f96b2b47131be95c297bad382f063d4a1945e24" translate="yes" xml:space="preserve">
          <source>The ID returned from &lt;code&gt;executionAsyncId()&lt;/code&gt; is related to execution timing, not causality (which is covered by &lt;code&gt;triggerAsyncId()&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;executionAsyncId()&lt;/code&gt; から返されるIDは、因果関係（ &lt;code&gt;triggerAsyncId()&lt;/code&gt; でカバーされる）ではなく、実行タイミングに関連しています。</target>
        </trans-unit>
        <trans-unit id="4da7547ab3aadbad5cae5473816489a6c6c206b9" translate="yes" xml:space="preserve">
          <source>The JS execution context is not associated with a Node.js environment. This may occur when Node.js is used as an embedded library and some hooks for the JS engine are not set up properly.</source>
          <target state="translated">JS実行コンテキストがNode.js環境に関連付けられていません。これは、Node.jsを組み込みライブラリとして使用している場合や、JSエンジンのフックの一部が正しく設定されていない場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="47ac560e8f84993ade1da5a6679e57c4013bc4f7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; タイプについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;セクション6.1.6&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="58a08f1fccd82b78e4fa42d492a99a1e83b02718" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification. Note the complete range of &lt;code&gt;int64_t&lt;/code&gt; cannot be represented with full precision in JavaScript. Integer values outside the range of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt;&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; -(2^53 - 1) - &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt; (2^53 - 1) will lose precision.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; タイプについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;セクション6.1.6&lt;/a&gt;で説明されています。 &lt;code&gt;int64_t&lt;/code&gt; の完全な範囲は、JavaScriptでは完全な精度で表現できないことに注意してください。&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt; &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; -&lt;/a&gt;（2 ^ 53-1）&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt;（2 ^ 53-1 ）の範囲外の整数値は、精度を失います。</target>
        </trans-unit>
        <trans-unit id="5ff3452b5b899518426f420a45b82630e4266fc8" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Number&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;Section 6.1.6&lt;/a&gt; of the ECMAScript Language Specification. Note the complete range of &lt;code&gt;int64_t&lt;/code&gt; cannot be represented with full precision in JavaScript. Integer values outside the range of &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt;&lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-(2**53 - 1)&lt;/code&gt; - &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt;&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(2**53 - 1)&lt;/code&gt; will lose precision.</source>
          <target state="translated">JavaScript &lt;code&gt;Number&lt;/code&gt; タイプは、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&quot;&gt;セクション6.1.6&lt;/a&gt;で説明されています。JavaScript &lt;code&gt;int64_t&lt;/code&gt; 、int64_tの全範囲を完全な精度で表すことはできないことに注意してください。範囲外の整数値&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.min_safe_integer&quot;&gt; &lt;code&gt;Number.MIN_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-(2**53 - 1)&lt;/code&gt; - &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-number.max_safe_integer&quot;&gt; &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(2**53 - 1)&lt;/code&gt; 精度を失うことになります。</target>
        </trans-unit>
        <trans-unit id="49efb0950474a63e8a2561d0a785571f7a4d0f11" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Object&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object-type&quot;&gt;Section 6.1.7&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Object&lt;/code&gt; タイプについては、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-object-type&quot;&gt;セクション6.1.7&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="6d58498aa5f597c1ecf0a744aef261db4f31bc92" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;String&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type&quot;&gt;Section 6.1.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScriptの &lt;code&gt;String&lt;/code&gt; 型については、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type&quot;&gt;セクション6.1.4&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="e2d5ab3fbb2a9670eda6b4f6fe619f423b95b3da" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;Symbol&lt;/code&gt; type is described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol-objects&quot;&gt;Section 19.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">JavaScript &lt;code&gt;Symbol&lt;/code&gt; タイプは、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol-objects&quot;&gt;セクション19.4&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="8a9e4c46b3f1d21c0585bb00657cd3b4952dbae7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; mechanism &lt;strong&gt;cannot&lt;/strong&gt; be used to intercept errors generated by asynchronous APIs. A common mistake for beginners is to try to use &lt;code&gt;throw&lt;/code&gt; inside an error-first callback:</source>
          <target state="translated">JavaScriptの &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; メカニズム&lt;strong&gt;を&lt;/strong&gt;使用して、非同期APIによって生成されたエラーをインターセプトする&lt;strong&gt;ことはできません&lt;/strong&gt;。初心者によくある間違いは、エラーファーストコールバック内で &lt;code&gt;throw&lt;/code&gt; を使用しようとすることです。</target>
        </trans-unit>
        <trans-unit id="437a147abd15cf86e2cd8c650857105030d0049c" translate="yes" xml:space="preserve">
          <source>The JavaScript constructor function returned from &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; is often saved and used later to construct new instances of the class from native code, and/or to check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, a strong persistent reference to it can be created using &lt;a href=&quot;#n_api_napi_create_reference&quot;&gt;&lt;code&gt;napi_create_reference&lt;/code&gt;&lt;/a&gt;, ensuring that the reference count is kept &amp;gt;= 1.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; &lt;/a&gt;から返されたJavaScriptコンストラクター関数は、多くの場合、保存され、後でネイティブコードからクラスの新しいインスタンスを構築したり、提供された値がクラスのインスタンスであるかどうかを確認したりするために使用されます。その場合、関数値がガベージコレクションされるのを防ぐために、&lt;a href=&quot;#n_api_napi_create_reference&quot;&gt; &lt;code&gt;napi_create_reference&lt;/code&gt; &lt;/a&gt;を使用して関数値への強力な永続参照を作成し、参照カウントが1以上に保たれるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="c410bef1bfc9aa5063d237d54175e04472c4cef2" translate="yes" xml:space="preserve">
          <source>The JavaScript constructor function returned from &lt;a href=&quot;#n_api_napi_define_class&quot;&gt;&lt;code&gt;napi_define_class&lt;/code&gt;&lt;/a&gt; is often saved and used later, to construct new instances of the class from native code, and/or check whether provided values are instances of the class. In that case, to prevent the function value from being garbage-collected, create a persistent reference to it using &lt;a href=&quot;#n_api_napi_create_reference&quot;&gt;&lt;code&gt;napi_create_reference&lt;/code&gt;&lt;/a&gt; and ensure the reference count is kept &amp;gt;= 1.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_define_class&quot;&gt; &lt;code&gt;napi_define_class&lt;/code&gt; &lt;/a&gt;から返されるJavaScriptコンストラクター関数はしばしば保存され、後で使用されて、ネイティブコードからクラスの新しいインスタンスを構築したり、指定された値がクラスのインスタンスであるかどうかを確認したりします。その場合、関数の値がガベージコレクションされないようにするには、&lt;a href=&quot;#n_api_napi_create_reference&quot;&gt; &lt;code&gt;napi_create_reference&lt;/code&gt; &lt;/a&gt;を使用して関数の永続的な参照を作成し、参照カウントが&amp;gt; = 1に保たれるようにします。</target>
        </trans-unit>
        <trans-unit id="657216a379465090b22847c0560ff9e628279283" translate="yes" xml:space="preserve">
          <source>The Legacy URL API is deprecated. Use the WHATWG URL API.</source>
          <target state="translated">Legacy URL API は非推奨です。WHATWG URL API を使用してください。</target>
        </trans-unit>
        <trans-unit id="70aa0f140901d61bf4bad9be3684a2287796974d" translate="yes" xml:space="preserve">
          <source>The N-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. A C++ API can be easier to use. To support using C++, the project maintains a C++ wrapper module called &lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;&lt;code&gt;node-addon-api&lt;/code&gt;&lt;/a&gt;. This wrapper provides an inlineable C++ API. Binaries built with &lt;code&gt;node-addon-api&lt;/code&gt; will depend on the symbols for the N-API C-based functions exported by Node.js. &lt;code&gt;node-addon-api&lt;/code&gt; is a more efficient way to write code that calls N-API. Take, for example, the following &lt;code&gt;node-addon-api&lt;/code&gt; code. The first section shows the &lt;code&gt;node-addon-api&lt;/code&gt; code and the second section shows what actually gets used in the addon.</source>
          <target state="translated">N-APIは、Node.jsバージョンおよびさまざまなコンパイラレベル間でABIの安定性を保証するCAPIです。 C ++ APIの方が使いやすい場合があります。 C ++の使用をサポートするために、プロジェクトは&lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt; &lt;code&gt;node-addon-api&lt;/code&gt; &lt;/a&gt;と呼ばれるC ++ラッパーモジュールを維持します。このラッパーは、インライン化可能なC ++ APIを提供します。 &lt;code&gt;node-addon-api&lt;/code&gt; で構築されたバイナリは、Node.jsによってエクスポートされたN-APICベースの関数のシンボルに依存します。 &lt;code&gt;node-addon-api&lt;/code&gt; は、N-APIを呼び出すコードを記述するためのより効率的な方法です。たとえば、次の &lt;code&gt;node-addon-api&lt;/code&gt; コードを考えてみましょう。最初のセクションは &lt;code&gt;node-addon-api&lt;/code&gt; コードを示し、2番目のセクションはアドオンで実際に使用されるものを示しています。</target>
        </trans-unit>
        <trans-unit id="c9bcb6aef5fbe5e6c4c49d6ca50a7775ad79058d" translate="yes" xml:space="preserve">
          <source>The N-API is a C API that ensures ABI stability across Node.js versions and different compiler levels. A C++ API can be easier to use. To support using C++, the project maintains a C++ wrapper module called &lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;node-addon-api&lt;/a&gt;. This wrapper provides an inlineable C++ API. Binaries built with &lt;code&gt;node-addon-api&lt;/code&gt; will depend on the symbols for the N-API C-based functions exported by Node.js. &lt;code&gt;node-addon-api&lt;/code&gt; is a more efficient way to write code that calls N-API. Take, for example, the following &lt;code&gt;node-addon-api&lt;/code&gt; code. The first section shows the &lt;code&gt;node-addon-api&lt;/code&gt; code and the second section shows what actually gets used in the addon.</source>
          <target state="translated">N-APIはC. APIであり、Node.jsバージョンとさまざまなコンパイラレベルでABIの安定性を保証します。 C ++ APIの方が使いやすい場合があります。 C ++の使用をサポートするために、プロジェクトは&lt;a href=&quot;https://github.com/nodejs/node-addon-api&quot;&gt;node-addon-api&lt;/a&gt;と呼ばれるC ++ラッパーモジュールを維持します。このラッパーは、インライン化可能なC ++ APIを提供します。 &lt;code&gt;node-addon-api&lt;/code&gt; でビルドされたバイナリは、Node.jsによってエクスポートされたN-API Cベースの関数のシンボルに依存します。 &lt;code&gt;node-addon-api&lt;/code&gt; は、N-APIを呼び出すコードを記述するためのより効率的な方法です。たとえば、次の &lt;code&gt;node-addon-api&lt;/code&gt; コードを見てください。最初のセクションは &lt;code&gt;node-addon-api&lt;/code&gt; コードを示し、2番目のセクションはアドオンで実際に使用されるものを示しています。</target>
        </trans-unit>
        <trans-unit id="7fbeecff23b86e6f00bb89f0d12dd0bfed507713" translate="yes" xml:space="preserve">
          <source>The N-APIs associated strictly with accessing ECMAScript features from native code can be found separately in &lt;code&gt;js_native_api.h&lt;/code&gt; and &lt;code&gt;js_native_api_types.h&lt;/code&gt;. The APIs defined in these headers are included in &lt;code&gt;node_api.h&lt;/code&gt; and &lt;code&gt;node_api_types.h&lt;/code&gt;. The headers are structured in this way in order to allow implementations of N-API outside of Node.js. For those implementations the Node.js specific APIs may not be applicable.</source>
          <target state="translated">ネイティブコードからのECMAScript機能へのアクセスに厳密に関連付けられているN-APIは、 &lt;code&gt;js_native_api.h&lt;/code&gt; および &lt;code&gt;js_native_api_types.h&lt;/code&gt; に個別にあります。これらのヘッダーで定義されているAPIは、 &lt;code&gt;node_api.h&lt;/code&gt; および &lt;code&gt;node_api_types.h&lt;/code&gt; に含まれています。ヘッダーは、Node.jsの外部でN-APIを実装できるように、このように構造化されています。これらの実装では、Node.js固有のAPIは適用されない場合があります。</target>
        </trans-unit>
        <trans-unit id="3bdef6c72992d8c5e5ff5c885a73a68885fd6ad0" translate="yes" xml:space="preserve">
          <source>The Node.js REPL</source>
          <target state="translated">Node.jsのREPL</target>
        </trans-unit>
        <trans-unit id="15acce84e4ce0d3aae89ca582482a951d2d4e7e1" translate="yes" xml:space="preserve">
          <source>The Node.js Web Crypto API extends various aspects of the Web Crypto API. These extensions are consistently identified by prepending names with the &lt;code&gt;node.&lt;/code&gt; prefix. For instance, the &lt;code&gt;node.keyObject&lt;/code&gt; key format can be used with the &lt;code&gt;subtle.exportKey()&lt;/code&gt; and &lt;code&gt;subtle.importKey()&lt;/code&gt; methods to convert between a WebCrypto &lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;CryptoKey&amp;gt;&lt;/a&gt; object and a Node.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">Node.js Web Crypto APIは、Web CryptoAPIのさまざまな側面を拡張します。これらの拡張機能は、 &lt;code&gt;node.&lt;/code&gt; 前に名前を付けることで一貫して識別されます。プレフィックス。例えば、 &lt;code&gt;node.keyObject&lt;/code&gt; のキーのフォーマットを用いて使用することができる &lt;code&gt;subtle.exportKey()&lt;/code&gt; と &lt;code&gt;subtle.importKey()&lt;/code&gt; WebCryptoとの間で変換する方法&lt;a href=&quot;webcrypto#webcrypto_class_cryptokey&quot;&gt;&amp;lt;暗号鍵&amp;gt;&lt;/a&gt;オブジェクトとのNode.js &lt;a href=&quot;crypto#crypto_class_keyobject&quot;&gt;&amp;lt;KeyObject&amp;gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c249d8b28c70b1ec431c46938cc76ebf046543e" translate="yes" xml:space="preserve">
          <source>The Node.js debugger client is not a full-featured debugger, but simple step and inspection are possible.</source>
          <target state="translated">Node.jsデバッガークライアントはフル機能のデバッガではありませんが、簡単なステップやインスペクションは可能です。</target>
        </trans-unit>
        <trans-unit id="e3c044365d34cf9a28d8db2d3ac2cd94ca4a34e6" translate="yes" xml:space="preserve">
          <source>The Node.js event loop no longer having any additional work to perform.</source>
          <target state="translated">Node.jsのイベントループでは、追加の作業が不要になりました。</target>
        </trans-unit>
        <trans-unit id="24946bc27e0870f56ea3a1c3561b15e3e311a6fa" translate="yes" xml:space="preserve">
          <source>The Node.js project is adding error codes to all of the errors generated internally. The goal is for applications to use these error codes for all error checking. The associated error messages will remain, but will only be meant to be used for logging and display with the expectation that the message can change without SemVer applying. In order to support this model with N-API, both in internal functionality and for module specific functionality (as its good practice), the &lt;code&gt;throw_&lt;/code&gt; and &lt;code&gt;create_&lt;/code&gt; functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is &lt;code&gt;NULL&lt;/code&gt; then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be:</source>
          <target state="translated">Node.jsプロジェクトは、内部で生成されたすべてのエラーにエラーコードを追加しています。目標は、アプリケーションがすべてのエラーチェックにこれらのエラーコードを使用することです。関連するエラーメッセージは残りますが、SemVerを適用せずにメッセージが変更される可能性があることを想定して、ログ記録と表示にのみ使用することを目的としています。内部機能及び（その良好な慣行として）モジュール特定機能の両方、N-APIを用いて、このモデルをサポートするために、 &lt;code&gt;throw_&lt;/code&gt; と &lt;code&gt;create_&lt;/code&gt; 関数がエラーに追加されるコードの文字列であるオプションコードパラメータを取りますオブジェクト。オプションのパラメーターが &lt;code&gt;NULL&lt;/code&gt; の場合、エラーに関連付けられるコードはありません。コードが提供されている場合、エラーに関連付けられている名前も次のように更新されます。</target>
        </trans-unit>
        <trans-unit id="7e65b631311436d7e53c5dbb3d80a7085dab5a90" translate="yes" xml:space="preserve">
          <source>The Node.js project is adding error codes to all of the errors generated internally. The goal is for applications to use these error codes for all error checking. The associated error messages will remain, but will only be meant to be used for logging and display with the expectation that the message can change without SemVer applying. In order to support this model with N-API, both in internal functionality and for module specific functionality (as its good practice), the &lt;code&gt;throw_&lt;/code&gt; and &lt;code&gt;create_&lt;/code&gt; functions take an optional code parameter which is the string for the code to be added to the error object. If the optional parameter is NULL then no code will be associated with the error. If a code is provided, the name associated with the error is also updated to be:</source>
          <target state="translated">Node.jsプロジェクトは、内部で生成されたすべてのエラーにエラーコードを追加しています。目標は、アプリケーションがすべてのエラーチェックにこれらのエラーコードを使用することです。関連するエラーメッセージは残りますが、SemVerを適用しなくてもメッセージが変更される可能性があることを想定して、ロギングと表示に使用することのみを目的としています。 N-APIでこのモデルをサポートするために、内部機能とモジュール固有の機能の両方で（その良い習慣として）、 &lt;code&gt;throw_&lt;/code&gt; および &lt;code&gt;create_&lt;/code&gt; 関数は、エラーに追加されるコードの文字列であるオプションのコードパラメーターを取りますオブジェクト。オプションのパラメーターがNULLの場合、コードはエラーに関連付けられません。コードが提供されている場合、エラーに関連付けられている名前も次のように更新されます。</target>
        </trans-unit>
        <trans-unit id="bdcbdbacfe81b80e870cab0c5a70fe82807a94ad" translate="yes" xml:space="preserve">
          <source>The Node.js-specific parts of an addon can be separated from the code that exposes the actual functionality to the JavaScript environment so that the latter may be used with multiple implementations of N-API. In the example below, &lt;code&gt;addon.c&lt;/code&gt; and &lt;code&gt;addon.h&lt;/code&gt; refer only to &lt;code&gt;js_native_api.h&lt;/code&gt;. This ensures that &lt;code&gt;addon.c&lt;/code&gt; can be reused to compile against either the Node.js implementation of N-API or any implementation of N-API outside of Node.js.</source>
          <target state="translated">アドオンのNode.js固有の部分は、実際の機能をJavaScript環境に公開するコードから分離できるため、JavaScript環境をN-APIの複数の実装で使用できます。以下の例では、 &lt;code&gt;addon.c&lt;/code&gt; および &lt;code&gt;addon.h&lt;/code&gt; はjs_native_api.hのみを参照し &lt;code&gt;js_native_api.h&lt;/code&gt; 。これにより、 &lt;code&gt;addon.c&lt;/code&gt; を再利用して、Node.jsのN-API実装またはNode.js外のN-API実装に対してコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="552d0c830ce2aa539ac168b242bbc027a66f4008" translate="yes" xml:space="preserve">
          <source>The OpenSSL command-line interface can be used to generate a CSR for a private key:</source>
          <target state="translated">OpenSSL のコマンドラインインタフェースを使用して、秘密鍵の CSR を生成することができます。</target>
        </trans-unit>
        <trans-unit id="91cfbd995886d282297192748688dbaa4166ed28" translate="yes" xml:space="preserve">
          <source>The OpenSSL function the error originates in.</source>
          <target state="translated">エラーの原因となった OpenSSL 関数。</target>
        </trans-unit>
        <trans-unit id="a1e80bf18d0319ba48b28be867e8b0e1d8c12952" translate="yes" xml:space="preserve">
          <source>The OpenSSL library the error originates in.</source>
          <target state="translated">エラーの原因となった OpenSSL ライブラリです。</target>
        </trans-unit>
        <trans-unit id="8acbb56d9d8d4d4648cc4c93a9173dfb379ab8ef" translate="yes" xml:space="preserve">
          <source>The PBKDF2 algorithm failed for unspecified reasons. OpenSSL does not provide more details and therefore neither does Node.js.</source>
          <target state="translated">PBKDF2 アルゴリズムは、特定できない理由で失敗しました。OpenSSLは詳細を提供していないので、Node.jsも同様です。</target>
        </trans-unit>
        <trans-unit id="5afe86aa9575a5298ab1d62fb451e96c8518364c" translate="yes" xml:space="preserve">
          <source>The Performance Timing API provides an implementation of the &lt;a href=&quot;https://w3c.github.io/performance-timeline/&quot;&gt;W3C Performance Timeline&lt;/a&gt; specification. The purpose of the API is to support collection of high resolution performance metrics. This is the same Performance API as implemented in modern Web browsers.</source>
          <target state="translated">Performance Timing APIは、&lt;a href=&quot;https://w3c.github.io/performance-timeline/&quot;&gt;W3C Performance Timeline&lt;/a&gt;仕様の実装を提供します。APIの目的は、高解像度のパフォーマンスメトリックの収集をサポートすることです。これは、最新のWebブラウザーに実装されているものと同じPerformance APIです。</target>
        </trans-unit>
        <trans-unit id="212b765aabecdf0c7cc78074a60dc51e080ff61f" translate="yes" xml:space="preserve">
          <source>The QUIC implementation supports use of OCSP during the TLS 1.3 handshake of a new QUIC session.</source>
          <target state="translated">QUICの実装では、新しいQUICセッションのTLS 1.3ハンドシェイク中のOCSPの使用をサポートしています。</target>
        </trans-unit>
        <trans-unit id="dda260bc4b1377ec8e5558f668a5cd99abb67682" translate="yes" xml:space="preserve">
          <source>The REPL supports bi-directional reverse-i-search similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;. It is triggered with</source>
          <target state="translated">REPLは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;ZSH&lt;/a&gt;と同様の双方向逆i検索をサポートします。それはでトリガーされます</target>
        </trans-unit>
        <trans-unit id="468e3b5bc8a586f299c6cc20a15e70c9d5278376" translate="yes" xml:space="preserve">
          <source>The REPL uses the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module to catch all uncaught exceptions for that REPL session.</source>
          <target state="translated">REPLは&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールを使用して、そのREPLセッションのキャッチされなかったすべての例外をキャッチします。</target>
        </trans-unit>
        <trans-unit id="cb1f6a2de855dc929ea467b816a110de9301de37" translate="yes" xml:space="preserve">
          <source>The RSA public exponent. This must be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt; containing a big-endian, unsigned integer that must fit within 32-bits. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt; may contain an arbitrary number of leading zero-bits. The value must be a prime number. Unless there is reason to use a different value, use &lt;code&gt;new Uint8Array([1, 0, 1])&lt;/code&gt; (65537) as the public exponent.</source>
          <target state="translated">RSA公開指数。これは、32ビット内に収まらなければならないビッグエンディアンの符号なし整数を含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;で&lt;/a&gt;ある必要があります。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&amp;lt;Uint8Array&amp;gt;&lt;/a&gt;先行ゼロビットの任意の数を含んでいてもよいです。値は素数でなければなりません。別の値を使用する理由がない限り、 &lt;code&gt;new Uint8Array([1, 0, 1])&lt;/code&gt; （65537）を公開指数として使用します。</target>
        </trans-unit>
        <trans-unit id="0c1b589843005d3c1fc9f18c791c857ef61d81c0" translate="yes" xml:space="preserve">
          <source>The SNI servername requested for this session by the client.</source>
          <target state="translated">クライアントがこのセッションで要求した SNI サーバー名。</target>
        </trans-unit>
        <trans-unit id="8c0c176203397da1a1a71fa900815154369f9aaa" translate="yes" xml:space="preserve">
          <source>The TLS protocol allows clients to renegotiate certain aspects of the TLS session. Unfortunately, session renegotiation requires a disproportionate amount of server-side resources, making it a potential vector for denial-of-service attacks.</source>
          <target state="translated">TLS プロトコルでは、クライアントは TLS セッションの特定の側面を再ネゴシエーションすることができます。残念ながら、セッションの再ネゴシエーションはサーバ側のリソースを不釣り合いに多く必要とするため、サービス拒否攻撃の標的となる可能性があります。</target>
        </trans-unit>
        <trans-unit id="51f6027f84756986ffae7d9689173a910a2972ae" translate="yes" xml:space="preserve">
          <source>The TLS socket must be connected and securily established. Ensure the 'secure' event is emitted before continuing.</source>
          <target state="translated">TLS ソケットが接続され、安全に確立されている必要があります。続行する前に「セキュア」イベントが発生していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="7ca92e1a8e1a69feb461c9b09be13473fdf946f9" translate="yes" xml:space="preserve">
          <source>The TLS/SSL is a public/private key infrastructure (PKI). For most common cases, each client and server must have a &lt;em&gt;private key&lt;/em&gt;.</source>
          <target state="translated">TLS / SSLは、公開/秘密鍵インフラストラクチャー（PKI）です。最も一般的なケースでは、各クライアントとサーバーに&lt;em&gt;秘密鍵が&lt;/em&gt;必要です。</target>
        </trans-unit>
        <trans-unit id="b4d1cad14d0d9ba62b458be617a2501e8397e2a5" translate="yes" xml:space="preserve">
          <source>The URL constructor is accessible as a property on the global object. It can also be imported from the built-in url module:</source>
          <target state="translated">URL コンストラクタはグローバルオブジェクトのプロパティとしてアクセスできます。また、組み込みの URL モジュールからインポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="45b677ccb54927c1003b316f56811247ed5f73cf" translate="yes" xml:space="preserve">
          <source>The URL object has both a &lt;code&gt;toString()&lt;/code&gt; method and &lt;code&gt;href&lt;/code&gt; property that return string serializations of the URL. These are not, however, customizable in any way. The &lt;code&gt;url.format(URL[, options])&lt;/code&gt; method allows for basic customization of the output.</source>
          <target state="translated">URLオブジェクトには、 &lt;code&gt;toString()&lt;/code&gt; メソッドと、URLの文字列シリアル化を返す &lt;code&gt;href&lt;/code&gt; プロパティの両方があります。ただし、これらはカスタマイズできません。 &lt;code&gt;url.format(URL[, options])&lt;/code&gt; メソッドは、出力の基本的なカスタマイズを可能にします。</target>
        </trans-unit>
        <trans-unit id="6734cf0089aff7197648c315082814fcb791c116" translate="yes" xml:space="preserve">
          <source>The URL of the current module, as set in the constructor.</source>
          <target state="translated">コンストラクタで設定した現在のモジュールの URL。</target>
        </trans-unit>
        <trans-unit id="37eb375188b0bcfc1a769a5733533ca6a019e9c3" translate="yes" xml:space="preserve">
          <source>The UTF-16 encoding was used with &lt;a href=&quot;crypto#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest()&lt;/code&gt;&lt;/a&gt;. While the &lt;code&gt;hash.digest()&lt;/code&gt; method does allow an &lt;code&gt;encoding&lt;/code&gt; argument to be passed in, causing the method to return a string rather than a &lt;code&gt;Buffer&lt;/code&gt;, the UTF-16 encoding (e.g. &lt;code&gt;ucs&lt;/code&gt; or &lt;code&gt;utf16le&lt;/code&gt;) is not supported.</source>
          <target state="translated">UTF-16エンコーディングが&lt;a href=&quot;crypto#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest()&lt;/code&gt; で&lt;/a&gt;使用されました。ながら &lt;code&gt;hash.digest()&lt;/code&gt; メソッドを許可し &lt;code&gt;encoding&lt;/code&gt; 引数ではなく、文字列を返すようにする方法を引き起こし、に渡される &lt;code&gt;Buffer&lt;/code&gt; 、UTF-16符号化（例えば、 &lt;code&gt;ucs&lt;/code&gt; 又は &lt;code&gt;utf16le&lt;/code&gt; サポートされていません）。</target>
        </trans-unit>
        <trans-unit id="0707fea87e96404333ec61633fb2b6e0bae25d52" translate="yes" xml:space="preserve">
          <source>The V8 &lt;code&gt;BreakIterator&lt;/code&gt; API was used but the full ICU data set is not installed.</source>
          <target state="translated">V8 &lt;code&gt;BreakIterator&lt;/code&gt; APIが使用されましたが、完全なICUデータセットがインストールされていません。</target>
        </trans-unit>
        <trans-unit id="f32b99c9224cb051847362e060819b2b4c50c079" translate="yes" xml:space="preserve">
          <source>The V8 options available for a version of Node.js may be determined by running &lt;code&gt;node --v8-options&lt;/code&gt;.</source>
          <target state="translated">Node.jsのバージョンで使用できるV8オプションは、 &lt;code&gt;node --v8-options&lt;/code&gt; を実行することで決定できます。</target>
        </trans-unit>
        <trans-unit id="1376e8a42784ef291882a0614dae5e571b33be74" translate="yes" xml:space="preserve">
          <source>The V8 platform used by this instance of Node.js does not support creating Workers. This is caused by lack of embedder support for Workers. In particular, this error will not occur with standard builds of Node.js.</source>
          <target state="translated">このNode.jsのインスタンスで使用されているV8プラットフォームはWorkerの作成をサポートしていません。これは、Worker のエンベッダーのサポートが不足していることが原因です。特にNode.jsの標準ビルドではこのエラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="eb51a2f976786e9160f26f6e8555910456e3113b" translate="yes" xml:space="preserve">
          <source>The WASI API provides an implementation of the &lt;a href=&quot;https://wasi.dev/&quot;&gt;WebAssembly System Interface&lt;/a&gt; specification. WASI gives sandboxed WebAssembly applications access to the underlying operating system via a collection of POSIX-like functions.</source>
          <target state="translated">WASI APIは、&lt;a href=&quot;https://wasi.dev/&quot;&gt;WebAssemblyシステムインターフェイス&lt;/a&gt;仕様の実装を提供します。WASIは、サンドボックス化されたWebAssemblyアプリケーションに、POSIXのような関数のコレクションを介して基盤となるオペレーティングシステムへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="e704bd3fc277ef8f64a361081b2fd03c819ec902" translate="yes" xml:space="preserve">
          <source>The WASI instance has already started.</source>
          <target state="translated">WASIインスタンスはすでに開始されています。</target>
        </trans-unit>
        <trans-unit id="03d7251f03ed34f2a2519a855b62565019b3eb13" translate="yes" xml:space="preserve">
          <source>The WASI instance has not been started.</source>
          <target state="translated">WASI インスタンスが起動していません。</target>
        </trans-unit>
        <trans-unit id="c7aa4e7f9c86be387463308a7aa43274019989e8" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;TextDecoder&lt;/code&gt; class. See the &lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt;&lt;code&gt;TextDecoder&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;TextDecoder&lt;/code&gt; クラス。&lt;a href=&quot;util#util_class_util_textdecoder&quot;&gt; &lt;code&gt;TextDecoder&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2c77f6c4c5072baf3631c95fcc538d6de133b14d" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;TextEncoder&lt;/code&gt; class. See the &lt;a href=&quot;util#util_class_util_textencoder&quot;&gt;&lt;code&gt;TextEncoder&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;TextEncoder&lt;/code&gt; クラス。&lt;a href=&quot;util#util_class_util_textencoder&quot;&gt; &lt;code&gt;TextEncoder&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8477a4551f71f9abb4cb2cf82ea30bda851328a6" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URL&lt;/code&gt; class. See the &lt;a href=&quot;url#url_class_url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;URL&lt;/code&gt; クラス。&lt;a href=&quot;url#url_class_url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="bbd5c13ca2d2f6a88b82622750c83bf478985f68" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; class. See the &lt;a href=&quot;url#url_class_urlsearchparams&quot;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; section.</source>
          <target state="translated">WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; クラス。&lt;a href=&quot;url#url_class_urlsearchparams&quot;&gt; &lt;code&gt;URLSearchParams&lt;/code&gt; &lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8f9bdac2cd843e3fcae98a8d5e15b498e52ce639" translate="yes" xml:space="preserve">
          <source>The WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; interface and the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module have similar purpose, but the purpose of the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module is more general, as it allows the customization of delimiter characters (&lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;). On the other hand, this API is designed purely for URL query strings.</source>
          <target state="translated">WHATWG &lt;code&gt;URLSearchParams&lt;/code&gt; のインターフェイスと&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;モジュールは、同様の目的を持っているが、目的の&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;が（区切り文字のカスタマイズを可能にするように、モジュールは、より一般的であり、 &lt;code&gt;&amp;amp;&lt;/code&gt; と &lt;code&gt;=&lt;/code&gt; ）。一方、このAPIは純粋にURLクエリ文字列用に設計されています。</target>
        </trans-unit>
        <trans-unit id="b05ee11c49a49c40741a840c0cf9acf09965de08" translate="yes" xml:space="preserve">
          <source>The WHATWG URL API</source>
          <target state="translated">WHATWG URL API</target>
        </trans-unit>
        <trans-unit id="303b85623f10249b2f174883bd7c66ad4a31337f" translate="yes" xml:space="preserve">
          <source>The WHATWG algorithm defines four &quot;percent-encode sets&quot; that describe ranges of characters that must be percent-encoded:</source>
          <target state="translated">WHATWG アルゴリズムでは、パーセンテージでエンコードする必要がある文字の範囲を記述する 4 つの「パーセンテージ・エンコード・セット」を定義しています。</target>
        </trans-unit>
        <trans-unit id="5a29a5e631516e2167486370d859dc02427ff5e4" translate="yes" xml:space="preserve">
          <source>The a and b arguments can also be ArrayBuffer.</source>
          <target state="translated">aとbの引数にはArrayBufferを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="1d0d078594f6a4548f54d230b92788f44dad0c47" translate="yes" xml:space="preserve">
          <source>The above applies &lt;em&gt;only&lt;/em&gt; to server connections, client connections are not automatically closed by workers, and disconnect does not wait for them to close before exiting.</source>
          <target state="translated">上記はサーバー接続に&lt;em&gt;のみ&lt;/em&gt;適用され、クライアント接続はワーカーによって自動的に閉じられません。また、接続解除はワーカーが閉じるのを待ってから終了します。</target>
        </trans-unit>
        <trans-unit id="ad0dc5ff68fb78cc7f3990d0c8c08ce66bb1a69b" translate="yes" xml:space="preserve">
          <source>The above example creates a symbolic link &lt;code&gt;mewtwo&lt;/code&gt; in the &lt;code&gt;example&lt;/code&gt; which points to &lt;code&gt;mew&lt;/code&gt; in the same directory:</source>
          <target state="translated">上記の例では、シンボリックリンクの作成 &lt;code&gt;mewtwo&lt;/code&gt; に &lt;code&gt;example&lt;/code&gt; を指す &lt;code&gt;mew&lt;/code&gt; 同じディレクトリには：</target>
        </trans-unit>
        <trans-unit id="da6fb4bd1de2ee75e3fbb24655337b6e25395bc5" translate="yes" xml:space="preserve">
          <source>The above example spawns a Worker thread for each &lt;code&gt;parse()&lt;/code&gt; call. In actual practice, use a pool of Workers for these kinds of tasks. Otherwise, the overhead of creating Workers would likely exceed their benefit.</source>
          <target state="translated">上記の例では、 &lt;code&gt;parse()&lt;/code&gt; 呼び出しごとにワーカースレッドを生成します。実際には、これらの種類のタスクにはワーカーのプールを使用してください。そうしないと、ワーカーを作成するオーバーヘッドがそのメリットを超える可能性があります。</target>
        </trans-unit>
        <trans-unit id="ef4541443acbac2ca975fcae7469aa7ccd5761dd" translate="yes" xml:space="preserve">
          <source>The above example spawns a Worker thread for each &lt;code&gt;parse()&lt;/code&gt; call. In actual practice, use a pool of Workers instead for these kinds of tasks. Otherwise, the overhead of creating Workers would likely exceed their benefit.</source>
          <target state="translated">上記の例では、 &lt;code&gt;parse()&lt;/code&gt; 呼び出しごとにワーカースレッドが生成されます。実際には、これらの種類のタスクの代わりにワーカーのプールを使用してください。そうしないと、ワーカーを作成するオーバーヘッドがそのメリットを超える可能性があります。</target>
        </trans-unit>
        <trans-unit id="036ff3fbd8810caec3fac26115b25dea2af31c08" translate="yes" xml:space="preserve">
          <source>The above function &lt;code&gt;do_something_asynchronous()&lt;/code&gt; would perform its asynchronous action and then it would resolve or reject the deferred, thereby concluding the promise and freeing the deferred:</source>
          <target state="translated">上記の関数 &lt;code&gt;do_something_asynchronous()&lt;/code&gt; は非同期アクションを実行してから、遅延オブジェクトを解決または拒否し、それによってpromiseを終了し、遅延オブジェクトを解放します。</target>
        </trans-unit>
        <trans-unit id="a21d8d48ed2a377accbad45c89781e4cb6927841" translate="yes" xml:space="preserve">
          <source>The actual &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation used during module linking is one that returns the modules linked during linking. Since at that point all modules would have been fully linked already, the &lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation is fully synchronous per specification.</source>
          <target state="translated">モジュールのリンク中に使用される実際の&lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;実装は、リンク中にリンクされたモジュールを返す実装です。その時点ですべてのモジュールがすでに完全にリンクされているため、&lt;a href=&quot;https://tc39.es/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModuleの&lt;/a&gt;実装は仕様ごとに完全に同期されます。</target>
        </trans-unit>
        <trans-unit id="1f204e8b1fde824583e61cdcdb79c21b74961dd3" translate="yes" xml:space="preserve">
          <source>The actual &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation used during module instantiation is one that returns the modules linked during linking. Since at that point all modules would have been fully linked already, the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt; implementation is fully synchronous per specification.</source>
          <target state="translated">モジュールのインスタンス化中に使用される実際の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;実装は、リンク中にリンクされたモジュールを返すものです。その時点ですべてのモジュールがすでに完全にリンクされているため、&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule&quot;&gt;HostResolveImportedModule&lt;/a&gt;実装は仕様ごとに完全に同期しています。</target>
        </trans-unit>
        <trans-unit id="ecfed31ae4afe696ad0187f8d5a4df3436474fff" translate="yes" xml:space="preserve">
          <source>The actual call into JavaScript is controlled by the callback given via the &lt;code&gt;call_js_cb&lt;/code&gt; parameter. &lt;code&gt;call_js_cb&lt;/code&gt; is invoked on the main thread once for each value that was placed into the queue by a successful call to &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;. If such a callback is not given, a default callback will be used, and the resulting JavaScript call will have no arguments. The &lt;code&gt;call_js_cb&lt;/code&gt; callback receives the JavaScript function to call as a &lt;code&gt;napi_value&lt;/code&gt; in its parameters, as well as the &lt;code&gt;void*&lt;/code&gt; context pointer used when creating the &lt;code&gt;napi_threadsafe_function&lt;/code&gt;, and the next data pointer that was created by one of the secondary threads. The callback can then use an API such as &lt;code&gt;napi_call_function()&lt;/code&gt; to call into JavaScript.</source>
          <target state="translated">JavaScriptへの実際の呼び出しは、 &lt;code&gt;call_js_cb&lt;/code&gt; パラメーターを介して指定されたコールバックによって制御されます。 &lt;code&gt;call_js_cb&lt;/code&gt; は、 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; への正常な呼び出しによってキューに入れられた各値に対してメインスレッドで1回呼び出されます。そのようなコールバックが指定されていない場合、デフォルトのコールバックが使用され、結果のJavaScript呼び出しには引数がありません。 &lt;code&gt;call_js_cb&lt;/code&gt; のコールバックはとの通話にJavaScript関数を受け &lt;code&gt;napi_value&lt;/code&gt; そのパラメータでは、だけでなく、 &lt;code&gt;void*&lt;/code&gt; の作成時に使用されるコンテキスト・ポインタ &lt;code&gt;napi_threadsafe_function&lt;/code&gt; を、およびセカンダリスレッドの1つによって作成された次のデータポインタ。コールバックは、 &lt;code&gt;napi_call_function()&lt;/code&gt; などのAPIを使用してJavaScriptを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d874e52d403ffaeb6a0bb88b41831e81658da1db" translate="yes" xml:space="preserve">
          <source>The algorithm parameter objects define the methods and parameters used by the various &lt;a href=&quot;webcrypto#webcrypto_class_subtlecrypto&quot;&gt;&amp;lt;SubtleCrypto&amp;gt;&lt;/a&gt; methods. While described here as &quot;classes&quot;, they are simple JavaScript dictionary objects.</source>
          <target state="translated">アルゴリズムパラメータオブジェクトは、さまざまな&lt;a href=&quot;webcrypto#webcrypto_class_subtlecrypto&quot;&gt;&amp;lt;SubtleCrypto&amp;gt;&lt;/a&gt;メソッドで使用されるメソッドとパラメータを定義します。ここでは「クラス」として説明されていますが、これらは単純なJavaScript辞書オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="3d75b026046d8bd7203f4377941abc1dae5972d5" translate="yes" xml:space="preserve">
          <source>The algorithm to determine the module format of a resolved URL is provided by &lt;strong&gt;ESM_FORMAT&lt;/strong&gt;, which returns the unique module format for any file. The &lt;em&gt;&quot;module&quot;&lt;/em&gt; format is returned for an ECMAScript Module, while the &lt;em&gt;&quot;commonjs&quot;&lt;/em&gt; format is used to indicate loading through the legacy CommonJS loader. Additional formats such as &lt;em&gt;&quot;addon&quot;&lt;/em&gt; can be extended in future updates.</source>
          <target state="translated">解決されたURLのモジュール形式を決定するアルゴリズムは、&lt;strong&gt;ESM_FORMAT&lt;/strong&gt;によって提供されます。これは、任意のファイルの一意のモジュール形式を返します。&lt;em&gt;「モジュール」&lt;/em&gt;つつフォーマットは、ECMAScriptのモジュールのために返される&lt;em&gt;「commonjs」&lt;/em&gt;フォーマットはレガシーCommonJSローダを介してローディングを示すために使用されます。&lt;em&gt;「アドオン」&lt;/em&gt;などの追加フォーマットは、将来のアップデートで拡張される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5e7459e78387875c44f8b117729e1c1215f75ce7" translate="yes" xml:space="preserve">
          <source>The algorithm to load an ES module specifier is given through the &lt;strong&gt;ESM_RESOLVE&lt;/strong&gt; method below. It returns the resolved URL for a module specifier relative to a parentURL, in addition to the unique module format for that resolved URL given by the &lt;strong&gt;ESM_FORMAT&lt;/strong&gt; routine.</source>
          <target state="translated">ESモジュール指定子をロードするアルゴリズムは、以下の&lt;strong&gt;ESM_RESOLVE&lt;/strong&gt;メソッドを通じて提供されます。&lt;strong&gt;ESM_FORMAT&lt;/strong&gt;ルーチンによって指定された解決済みURLの一意のモジュール形式に加えて、parentURLに関連するモジュール指定子の解決済みURLを返します。</target>
        </trans-unit>
        <trans-unit id="ba890430e43b925bcb49efea8d0c192387f4dc66" translate="yes" xml:space="preserve">
          <source>The algorithm to load an ES module specifier is given through the &lt;strong&gt;ESM_RESOLVE&lt;/strong&gt; method below. It returns the resolved URL for a module specifier relative to a parentURL.</source>
          <target state="translated">ESモジュール指定子をロードするアルゴリズムは、以下の&lt;strong&gt;ESM_RESOLVE&lt;/strong&gt;メソッドを介して&lt;strong&gt;提供され&lt;/strong&gt;ます。これは、parentURLに関連するモジュール指定子の解決されたURLを返します。</target>
        </trans-unit>
        <trans-unit id="97bc1041effe4d1449bc26d4c028437d2ddf2d1b" translate="yes" xml:space="preserve">
          <source>The algorithms currently supported include:</source>
          <target state="translated">現在サポートされているアルゴリズムは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e2865caae4196a8ce3cb3455bc08c0ec48f21572" translate="yes" xml:space="preserve">
          <source>The amount of bytes sent.</source>
          <target state="translated">送信されたバイト数。</target>
        </trans-unit>
        <trans-unit id="752de4e522104a321897ca061b65431f0e708ede" translate="yes" xml:space="preserve">
          <source>The amount of data potentially buffered depends on the &lt;code&gt;highWaterMark&lt;/code&gt; option passed into the stream's constructor. For normal streams, the &lt;code&gt;highWaterMark&lt;/code&gt; option specifies a &lt;a href=&quot;#stream_highwatermark_discrepancy_after_calling_readable_setencoding&quot;&gt;total number of bytes&lt;/a&gt;. For streams operating in object mode, the &lt;code&gt;highWaterMark&lt;/code&gt; specifies a total number of objects.</source>
          <target state="translated">バッファリングされる可能性のあるデータの量は、ストリームのコンストラクタに渡される &lt;code&gt;highWaterMark&lt;/code&gt; オプションによって異なります。通常のストリームの場合、 &lt;code&gt;highWaterMark&lt;/code&gt; オプションは&lt;a href=&quot;#stream_highwatermark_discrepancy_after_calling_readable_setencoding&quot;&gt;合計バイト数を&lt;/a&gt;指定します。オブジェクトモードで動作するストリームの場合、 &lt;code&gt;highWaterMark&lt;/code&gt; はオブジェクトの総数を指定します。</target>
        </trans-unit>
        <trans-unit id="a35a8acfb4310a6ca1417d5aa116ec24991910cc" translate="yes" xml:space="preserve">
          <source>The amount of received bytes.</source>
          <target state="translated">受信したバイト数です。</target>
        </trans-unit>
        <trans-unit id="a6f3f6e27833ab894708dd7aa4225b14760672ce" translate="yes" xml:space="preserve">
          <source>The argument passed to &lt;code&gt;setMulticastTTL()&lt;/code&gt; is a number of hops between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;. The default on most systems is &lt;code&gt;1&lt;/code&gt; but can vary.</source>
          <target state="translated">渡される引数 &lt;code&gt;setMulticastTTL()&lt;/code&gt; の間のホップ数で &lt;code&gt;0&lt;/code&gt; 及び &lt;code&gt;255&lt;/code&gt; 。ほとんどのシステムのデフォルトは &lt;code&gt;1&lt;/code&gt; ですが、異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="62a3ec9f8979cb49a74a9496133dd67ae0c17a07" translate="yes" xml:space="preserve">
          <source>The argument passed to &lt;code&gt;socket.setMulticastTTL()&lt;/code&gt; is a number of hops between 0 and 255. The default on most systems is &lt;code&gt;1&lt;/code&gt; but can vary.</source>
          <target state="translated">&lt;code&gt;socket.setMulticastTTL()&lt;/code&gt; に渡される引数は、0〜255のホップ数です。ほとんどのシステムのデフォルトは &lt;code&gt;1&lt;/code&gt; ですが、異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="8d83a3ca7f6e20087dfd4c035a16342fc131e1a0" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;setTTL()&lt;/code&gt; is a number of hops between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;. The default on most systems is &lt;code&gt;64&lt;/code&gt; but can vary.</source>
          <target state="translated">引数 &lt;code&gt;setTTL()&lt;/code&gt; の間のホップ数である &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;255&lt;/code&gt; 。ほとんどのシステムのデフォルトは &lt;code&gt;64&lt;/code&gt; ですが、異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="2c9f655d796d6f2a9f8642f9fc8ebbdd26684f1a" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;socket.setTTL()&lt;/code&gt; is a number of hops between 1 and 255. The default on most systems is 64 but can vary.</source>
          <target state="translated">&lt;code&gt;socket.setTTL()&lt;/code&gt; の引数は、1から255までのホップ数です。ほとんどのシステムのデフォルトは64ですが、異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="8bf15292e9849dd748e24ee05e44ad5013d7601b" translate="yes" xml:space="preserve">
          <source>The arguments can now be &lt;code&gt;Uint8Array&lt;/code&gt;s.</source>
          <target state="translated">引数を &lt;code&gt;Uint8Array&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="97793c75498216a87e4edcc89a0b16c11875b2c1" translate="yes" xml:space="preserve">
          <source>The arrays contains information about the expected and actual number of calls of the functions that have not been called the expected number of times.</source>
          <target state="translated">配列には、期待される回数と実際に呼び出されていない関数の呼び出し回数に関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="40b0cf0042f4eeeae17370a371bf3f66d0da118c" translate="yes" xml:space="preserve">
          <source>The asynchronous form always takes a completion callback as its last argument. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation was completed successfully, then the first argument will be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">非同期フォームは、最後の引数として常に完了コールバックを取ります。完了コールバックに渡される引数はメソッドによって異なりますが、最初の引数は常に例外用に予約されています。操作が正常に完了した場合、最初の引数は &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="291ef0fd2d2520243cf6bfecb8993ceec5c2fef1" translate="yes" xml:space="preserve">
          <source>The asynchronous version of &lt;code&gt;crypto.randomBytes()&lt;/code&gt; is carried out in a single threadpool request. To minimize threadpool task length variation, partition large &lt;code&gt;randomBytes&lt;/code&gt; requests when doing so as part of fulfilling a client request.</source>
          <target state="translated">&lt;code&gt;crypto.randomBytes()&lt;/code&gt; の非同期バージョンは、単一のスレッドプール要求で実行されます。 &lt;code&gt;randomBytes&lt;/code&gt; プールタスクの長さの変動を最小限に抑えるには、クライアントの要求を実行する一環として、大きなrandomBytes要求を分割します。</target>
        </trans-unit>
        <trans-unit id="a806f088e76048a6ac24766e6eacdc252a91a7d9" translate="yes" xml:space="preserve">
          <source>The asynchronous version of &lt;code&gt;crypto.randomFill()&lt;/code&gt; is carried out in a single threadpool request. To minimize threadpool task length variation, partition large &lt;code&gt;randomFill&lt;/code&gt; requests when doing so as part of fulfilling a client request.</source>
          <target state="translated">&lt;code&gt;crypto.randomFill()&lt;/code&gt; の非同期バージョンは、単一のスレッドプール要求で実行されます。 &lt;code&gt;randomFill&lt;/code&gt; プールタスクの長さの変動を最小限に抑えるには、クライアント要求の処理の一環として、大きなrandomFill要求を分割します。</target>
        </trans-unit>
        <trans-unit id="3e3731f815cd4296b5ee24c9c4ab6b0ab9a153dc" translate="yes" xml:space="preserve">
          <source>The authentication tag length must be specified during cipher creation by setting the &lt;code&gt;authTagLength&lt;/code&gt; option and must be one of 4, 6, 8, 10, 12, 14 or 16 bytes.</source>
          <target state="translated">認証タグの長さは、 &lt;code&gt;authTagLength&lt;/code&gt; オプションを設定して暗号の作成時に指定する必要があり、4、6、8、10、12、14、または16バイトのいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="a8b6f8e05b9649ed665f924974cc7ad085f20636" translate="yes" xml:space="preserve">
          <source>The available categories are:</source>
          <target state="translated">利用可能なカテゴリーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="cf49903ddb7d15dabbdc849b6abbcb3bcb14b0c5" translate="yes" xml:space="preserve">
          <source>The base address of the &lt;code&gt;SharedArrayBuffer&lt;/code&gt; in question, as well as the byte offset corresponding to the index passed to &lt;code&gt;Atomics.wait()&lt;/code&gt;</source>
          <target state="translated">問題の &lt;code&gt;SharedArrayBuffer&lt;/code&gt; のベースアドレス、および &lt;code&gt;Atomics.wait()&lt;/code&gt; に渡されたインデックスに対応するバイトオフセット</target>
        </trans-unit>
        <trans-unit id="266c4cc94f24b9eaff50ca9e1bdd0832d10d0467" translate="yes" xml:space="preserve">
          <source>The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the &lt;code&gt;'a+'&lt;/code&gt; flag - see example below - will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a &lt;code&gt;FileHandle&lt;/code&gt; will be returned.</source>
          <target state="translated">一部のフラグの動作はプラットフォーム固有です。そのため、 &lt;code&gt;'a+'&lt;/code&gt; フラグを付けてmacOSおよびLinuxでディレクトリを開くと（以下の例を参照）、エラーが返されます。対照的に、WindowsおよびFreeBSDでは、ファイル記述子または &lt;code&gt;FileHandle&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c9f3f1a16c4cc6991d144e678e2a7db88950cdae" translate="yes" xml:space="preserve">
          <source>The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the &lt;code&gt;'a+'&lt;/code&gt; flag, as in the example below, will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a &lt;code&gt;FileHandle&lt;/code&gt; will be returned.</source>
          <target state="translated">一部のフラグの動作はプラットフォーム固有です。そのため、以下の例のように、 &lt;code&gt;'a+'&lt;/code&gt; フラグを指定してmacOSおよびLinuxでディレクトリを開くと、エラーが返されます。対照的に、WindowsおよびFreeBSDでは、ファイル記述子または &lt;code&gt;FileHandle&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="83b17a79132f4cdbf2fd15bcb5b24ae384b0a45c" translate="yes" xml:space="preserve">
          <source>The benefit of patterns over folder exports is that packages can always be imported by consumers without subpath file extensions being necessary.</source>
          <target state="translated">フォルダのエクスポートよりもパターンの方がメリットがあるのは、サブパスファイルの拡張子を必要とせずに、パッケージを常にコンシューマからインポートできることです。</target>
        </trans-unit>
        <trans-unit id="8e3f1fdcc1fd05030a6a5539c961c34e59c014a7" translate="yes" xml:space="preserve">
          <source>The better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.</source>
          <target state="translated">より良いアプローチは、エラーの引き金となったリクエストにエラー応答を送り、他の人には通常の時間内に終了させ、そのワーカーの新しいリクエストをリッスンするのを止めることです。</target>
        </trans-unit>
        <trans-unit id="9815fdff69ce8f044a31c34fc3104d641337a5c7" translate="yes" xml:space="preserve">
          <source>The body of the function should initiate the asynchronous cleanup actions at the end of which &lt;code&gt;handle&lt;/code&gt; must be passed in a call to &lt;a href=&quot;#n_api_napi_remove_async_cleanup_hook&quot;&gt;&lt;code&gt;napi_remove_async_cleanup_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">関数の本体は非同期クリーンアップアクションを開始する必要があり、その最後に&lt;a href=&quot;#n_api_napi_remove_async_cleanup_hook&quot;&gt; &lt;code&gt;napi_remove_async_cleanup_hook&lt;/code&gt; の&lt;/a&gt;呼び出しで &lt;code&gt;handle&lt;/code&gt; 渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="6a8c06964af99516ebd182cbce0225e7ac0ebb47" translate="yes" xml:space="preserve">
          <source>The boolean &lt;a href=&quot;#cluster_worker_exitedafterdisconnect&quot;&gt;&lt;code&gt;worker.exitedAfterDisconnect&lt;/code&gt;&lt;/a&gt; allows distinguishing between voluntary and accidental exit, the master may choose not to respawn a worker based on this value.</source>
          <target state="translated">boolean &lt;a href=&quot;#cluster_worker_exitedafterdisconnect&quot;&gt; &lt;code&gt;worker.exitedAfterDisconnect&lt;/code&gt; &lt;/a&gt;により、自発的終了と偶発的終了を区別できます。マスターは、この値に基づいてワーカーを再生成しないことを選択できます。</target>
        </trans-unit>
        <trans-unit id="8b4ccfa3d546d36604e38326c7e02b11f0a63bb2" translate="yes" xml:space="preserve">
          <source>The buffer argument can be a string or ArrayBuffer and is limited to no more than 2 ** 31 - 1 bytes.</source>
          <target state="translated">buffer 引数には文字列または ArrayBuffer を指定することができ、2 **31-1 バイト以下に制限されています。</target>
        </trans-unit>
        <trans-unit id="27fbe8cde36d276b791db6e0cd726aac4a0099ce" translate="yes" xml:space="preserve">
          <source>The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.</source>
          <target state="translated">Node.jsが提供するバンドルされたCAストアは、リリース時に修正されたMozilla CAストアのスナップショットです。サポートされているすべてのプラットフォームで同じです。</target>
        </trans-unit>
        <trans-unit id="e46a7acd48778963f91e9e3807e193f47abca2ea" translate="yes" xml:space="preserve">
          <source>The callback form takes a completion callback function as its last argument and invokes the operation asynchronously. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">コールバックフォームは、最後の引数として完了コールバック関数を取り、非同期で操作を呼び出します。完了コールバックに渡される引数はメソッドによって異なりますが、最初の引数は常に例外用に予約されています。操作が正常に完了した場合、最初の引数は &lt;code&gt;null&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cf32702437464172afacdfdde8fc219e9132b629" translate="yes" xml:space="preserve">
          <source>The callback gets two arguments &lt;code&gt;(err, fd)&lt;/code&gt;.</source>
          <target state="translated">コールバックは2つの引数 &lt;code&gt;(err, fd)&lt;/code&gt; 取得します。</target>
        </trans-unit>
        <trans-unit id="84f91cf0f06ebc87e9db6de7e904fb20acc36a02" translate="yes" xml:space="preserve">
          <source>The callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event, and if not handled will exit.</source>
          <target state="translated">コールバックは非同期で実行され、スタックトレースが制限されます。コールバックがスローすると、プロセスは&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt;イベントを発行し、処理されない場合は終了します。</target>
        </trans-unit>
        <trans-unit id="88ceedc1aeeb2d2b572a2289405e95b59fa6d7c9" translate="yes" xml:space="preserve">
          <source>The callback is given a possible exception and, if &lt;code&gt;recursive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the first directory path created, &lt;code&gt;(err, [path])&lt;/code&gt;.</source>
          <target state="translated">コールバックには例外の可能性があり、 &lt;code&gt;recursive&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、最初に作成されたディレクトリパス &lt;code&gt;(err, [path])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f8002ca8095bc3f9827de3ef7438330229b189b" translate="yes" xml:space="preserve">
          <source>The callback is given the three arguments, &lt;code&gt;(err, bytesRead, buffer)&lt;/code&gt;.</source>
          <target state="translated">コールバックには3つの引数 &lt;code&gt;(err, bytesRead, buffer)&lt;/code&gt; が与えられます。</target>
        </trans-unit>
        <trans-unit id="f5cc049183053def3a207d9ee2ca536647f2e271" translate="yes" xml:space="preserve">
          <source>The callback is passed two arguments &lt;code&gt;(err, data)&lt;/code&gt;, where &lt;code&gt;data&lt;/code&gt; is the contents of the file.</source>
          <target state="translated">コールバックには2つの引数 &lt;code&gt;(err, data)&lt;/code&gt; が渡されます。ここで、 &lt;code&gt;data&lt;/code&gt; はファイルの内容です。</target>
        </trans-unit>
        <trans-unit id="b96e8c0e949764bf072f76b4c48317bd2bcaf81e" translate="yes" xml:space="preserve">
          <source>The callback may also be invoked with &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;call_js_cb&lt;/code&gt; both set to &lt;code&gt;NULL&lt;/code&gt; to indicate that calls into JavaScript are no longer possible, while items remain in the queue that may need to be freed. This normally occurs when the Node.js process exits while there is a thread-safe function still active.</source>
          <target state="translated">コールバックは、 &lt;code&gt;env&lt;/code&gt; と &lt;code&gt;call_js_cb&lt;/code&gt; の両方を &lt;code&gt;NULL&lt;/code&gt; に設定して呼び出すこともできます。これは、解放する必要があるアイテムがキューに残っている間、JavaScriptへの呼び出しができなくなったことを示します。これは通常、スレッドセーフな機能がまだアクティブであるときにNode.jsプロセスが終了すると発生します。</target>
        </trans-unit>
        <trans-unit id="cfa70d55901ac5a01f67f2c36fccbc4b1f44a9e6" translate="yes" xml:space="preserve">
          <source>The callback will be given three arguments &lt;code&gt;(err, bytesWritten, buffer)&lt;/code&gt; where &lt;code&gt;bytesWritten&lt;/code&gt; specifies how many &lt;em&gt;bytes&lt;/em&gt; were written from &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">コールバックは3つの引数を与えられます &lt;code&gt;(err, bytesWritten, buffer)&lt;/code&gt; どこ &lt;code&gt;bytesWritten&lt;/code&gt; 指定どのように多くの&lt;em&gt;バイト&lt;/em&gt;から書き込まれた &lt;code&gt;buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1205f0c5be8539bf4d54379d40db2b91cb958b42" translate="yes" xml:space="preserve">
          <source>The callback will be given three arguments: &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;bytesRead&lt;/code&gt;, and &lt;code&gt;buffers&lt;/code&gt;. &lt;code&gt;bytesRead&lt;/code&gt; is how many bytes were read from the file.</source>
          <target state="translated">コールバックには、 &lt;code&gt;err&lt;/code&gt; 、 &lt;code&gt;bytesRead&lt;/code&gt; 、 &lt;code&gt;buffers&lt;/code&gt; の3つの引数が与えられます。 &lt;code&gt;bytesRead&lt;/code&gt; は、ファイルから読み取られたバイト数です。</target>
        </trans-unit>
        <trans-unit id="7f96a34aeb9b8f13cf0531eaa66a0f0138bda350" translate="yes" xml:space="preserve">
          <source>The callback will be given three arguments: &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;bytesWritten&lt;/code&gt;, and &lt;code&gt;buffers&lt;/code&gt;. &lt;code&gt;bytesWritten&lt;/code&gt; is how many bytes were written from &lt;code&gt;buffers&lt;/code&gt;.</source>
          <target state="translated">コールバックには、 &lt;code&gt;err&lt;/code&gt; 、 &lt;code&gt;bytesWritten&lt;/code&gt; 、および &lt;code&gt;buffers&lt;/code&gt; の 3つの引数が与えられます。 &lt;code&gt;bytesWritten&lt;/code&gt; は、 &lt;code&gt;buffers&lt;/code&gt; から書き込まれたバイト数です。</target>
        </trans-unit>
        <trans-unit id="a71f02309c4560ad2ddc437ae3c8c5d929e2b820" translate="yes" xml:space="preserve">
          <source>The callback will be invoked with a single argument:</source>
          <target state="translated">コールバックは単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9f56940c0afd168c7a82f8c9103fe6257ad56025" translate="yes" xml:space="preserve">
          <source>The callback will be invoked with three arguments:</source>
          <target state="translated">コールバックは3つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3ca12069aa877b52e7bb977d5913b75f27786fe0" translate="yes" xml:space="preserve">
          <source>The callback will be invoked with three arguments: an error argument that will be &lt;code&gt;null&lt;/code&gt; if the &lt;code&gt;PING&lt;/code&gt; was successfully acknowledged, a &lt;code&gt;duration&lt;/code&gt; argument that reports the number of milliseconds elapsed since the ping was sent and the acknowledgment was received, and a &lt;code&gt;Buffer&lt;/code&gt; containing the 8-byte &lt;code&gt;PING&lt;/code&gt; payload.</source>
          <target state="translated">コールバックは3つの引数で呼び出され &lt;code&gt;null&lt;/code&gt; &lt;code&gt;PING&lt;/code&gt; が正常に確認された場合はnullになるエラー引数、pingが送信されて確認が受信されてから経過したミリ秒数を報告する &lt;code&gt;duration&lt;/code&gt; 引数、および8を含む &lt;code&gt;Buffer&lt;/code&gt; バイトの &lt;code&gt;PING&lt;/code&gt; ペイロード。</target>
        </trans-unit>
        <trans-unit id="51f09a13a0b059cfea1a5dfd02fff1543bb4282f" translate="yes" xml:space="preserve">
          <source>The callback will be invoked with two arguments:</source>
          <target state="translated">コールバックは2つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="116b1007dccbbdde251923f7ad95904c99b31733" translate="yes" xml:space="preserve">
          <source>The callback will receive the arguments &lt;code&gt;(err, written, string)&lt;/code&gt; where &lt;code&gt;written&lt;/code&gt; specifies how many &lt;em&gt;bytes&lt;/em&gt; the passed string required to be written. Bytes written is not necessarily the same as string characters written. See &lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt;&lt;code&gt;Buffer.byteLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コールバックは引数 &lt;code&gt;(err, written, string)&lt;/code&gt; を受け取ります。ここで、 &lt;code&gt;written&lt;/code&gt; れた場合、渡された文字列の書き込みに必要な&lt;em&gt;バイト数を&lt;/em&gt;指定します。書き込まれるバイトは、書き込まれる文字列と必ずしも同じではありません。&lt;a href=&quot;buffer#buffer_class_method_buffer_bytelength_string_encoding&quot;&gt; &lt;code&gt;Buffer.byteLength&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="af7cdb9c7498deea55be0f44fd8ef40fdc292efb" translate="yes" xml:space="preserve">
          <source>The callback will receive the arguments &lt;code&gt;(err, written, string)&lt;/code&gt; where &lt;code&gt;written&lt;/code&gt; specifies how many &lt;em&gt;bytes&lt;/em&gt; the passed string required to be written. Bytes written is not necessarily the same as string characters written. See &lt;a href=&quot;buffer#buffer_static_method_buffer_bytelength_string_encoding&quot;&gt;&lt;code&gt;Buffer.byteLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コールバックは引数 &lt;code&gt;(err, written, string)&lt;/code&gt; を受け取ります。ここで、 &lt;code&gt;written&lt;/code&gt; は、渡された文字列を書き込む必要がある&lt;em&gt;バイト数を&lt;/em&gt;指定します。書き込まれるバイト数は、書き込まれる文字列文字と必ずしも同じではありません。&lt;a href=&quot;buffer#buffer_static_method_buffer_bytelength_string_encoding&quot;&gt; &lt;code&gt;Buffer.byteLength&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0bb6aebd3a361c3a662f43db3ae173689e5c7cf2" translate="yes" xml:space="preserve">
          <source>The callbacks &lt;code&gt;init()&lt;/code&gt;/&lt;code&gt;before()&lt;/code&gt;/&lt;code&gt;after()&lt;/code&gt;/&lt;code&gt;destroy()&lt;/code&gt; are called for the respective asynchronous event during a resource's lifetime.</source>
          <target state="translated">コールバック &lt;code&gt;init()&lt;/code&gt; / &lt;code&gt;before()&lt;/code&gt; / &lt;code&gt;after()&lt;/code&gt; / &lt;code&gt;destroy()&lt;/code&gt; は、リソースの存続期間中にそれぞれの非同期イベントに対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7ff9309107e860b24455f540b834f14dc084f8e1" translate="yes" xml:space="preserve">
          <source>The callbacks will be inherited via the prototype chain:</source>
          <target state="translated">コールバックはプロトタイプチェーンを介して継承されます。</target>
        </trans-unit>
        <trans-unit id="96fa359cc9b6cdd0544e51a0c112f04811b82f53" translate="yes" xml:space="preserve">
          <source>The can instead be loaded with &lt;a href=&quot;module#module_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;process#process_process_dlopen_module_filename_flags&quot;&gt;&lt;code&gt;process.dlopen&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">代わりに、&lt;a href=&quot;module#module_module_createrequire_filename&quot;&gt; &lt;code&gt;module.createRequire()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;process#process_process_dlopen_module_filename_flags&quot;&gt; &lt;code&gt;process.dlopen&lt;/code&gt; を&lt;/a&gt;ロードできます。</target>
        </trans-unit>
        <trans-unit id="1aba9e941b743a0ba1b1b3db4505bad8d964129a" translate="yes" xml:space="preserve">
          <source>The certificate may contain information about the public key, depending on the key type.</source>
          <target state="translated">証明書には、鍵の種類によっては公開鍵に関する情報が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="fe1692cfc15f670027de87652a76ad02ec8d9df8" translate="yes" xml:space="preserve">
          <source>The character encodings currently supported by Node.js are the following:</source>
          <target state="translated">現在Node.jsでサポートされている文字エンコーディングは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="129c1d6ce76304307ec415e5247eb789e7d9e3e4" translate="yes" xml:space="preserve">
          <source>The character encodings currently supported by Node.js include:</source>
          <target state="translated">現在Node.jsでサポートされている文字エンコーディングには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="ba7b9bd04765b05a8f07a7075a5c54bf00d05417" translate="yes" xml:space="preserve">
          <source>The child would then receive the server object as:</source>
          <target state="translated">そして、子はサーバーオブジェクトを受け取ります。</target>
        </trans-unit>
        <trans-unit id="07bced28a5dc6de3cb93394d620aff5d1b3935c1" translate="yes" xml:space="preserve">
          <source>The choice to build a context-aware addon carries with it the responsibility of carefully managing global static data. Since the addon may be loaded multiple times, potentially even from different threads, any global static data stored in the addon must be properly protected, and must not contain any persistent references to JavaScript objects. The reason for this is that JavaScript objects are only valid in one context, and will likely cause a crash when accessed from the wrong context or from a different thread than the one on which they were created.</source>
          <target state="translated">コンテキスト対応アドオンを構築するという選択は、グローバルな静的データを慎重に管理する責任を伴います。アドオンは複数回ロードされる可能性があり、異なるスレッドからもロードされる可能性があるため、アドオンに保存されているグローバルな静的データは適切に保護されていなければなりません。その理由は、JavaScriptオブジェクトは1つのコンテキストでしか有効ではなく、間違ったコンテキストからアクセスされたり、作成されたスレッドとは異なるスレッドからアクセスされたりすると、クラッシュを引き起こす可能性が高いからです。</target>
        </trans-unit>
        <trans-unit id="702a2d85959883967425d972382b385fac4e2d47" translate="yes" xml:space="preserve">
          <source>The cipher &lt;code&gt;chacha20-poly1305&lt;/code&gt; is now supported.</source>
          <target state="translated">暗号 &lt;code&gt;chacha20-poly1305&lt;/code&gt; がサポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="505c80df480bcf5affdccf4c5f99a1ee38af773f" translate="yes" xml:space="preserve">
          <source>The ciphers list can contain a mixture of TLSv1.3 cipher suite names, the ones that start with &lt;code&gt;'TLS_'&lt;/code&gt;, and specifications for TLSv1.2 and below cipher suites. The TLSv1.2 ciphers support a legacy specification format, consult the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt; documentation for details, but those specifications do &lt;em&gt;not&lt;/em&gt; apply to TLSv1.3 ciphers. The TLSv1.3 suites can only be enabled by including their full name in the cipher list. They cannot, for example, be enabled or disabled by using the legacy TLSv1.2 &lt;code&gt;'EECDH'&lt;/code&gt; or &lt;code&gt;'!EECDH'&lt;/code&gt; specification.</source>
          <target state="translated">暗号リストには、TLSv1.3暗号スイート名、 &lt;code&gt;'TLS_'&lt;/code&gt; で始まる名前、およびTLSv1.2以下の暗号スイートの仕様を混在させることができます。 TLSv1.2暗号はレガシー仕様形式をサポートしています。詳細については、OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;暗号リスト形式の&lt;/a&gt;ドキュメントを参照してください。ただし、これらの仕様はTLSv1.3暗号に&lt;em&gt;は&lt;/em&gt;適用されませ&lt;em&gt;ん&lt;/em&gt;。 TLSv1.3スイートは、フルリストの名前を暗号リストに含めることによってのみ有効にできます。たとえば、従来のTLSv1.2 &lt;code&gt;'EECDH'&lt;/code&gt; または &lt;code&gt;'!EECDH'&lt;/code&gt; 仕様を使用して有効または無効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="ccd94299b4d0f2544f0516dcdb7e612467520620" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;AsyncHook&lt;/code&gt; exposes an interface for tracking lifetime events of asynchronous operations.</source>
          <target state="translated">クラス &lt;code&gt;AsyncHook&lt;/code&gt; は、非同期操作のライフタイムイベントを追跡するためのインターフェイスを公開します。</target>
        </trans-unit>
        <trans-unit id="d6cf85038ecf1f428f2c584d9f7bd5ccc75adb7f" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;AsyncResource&lt;/code&gt; is designed to be extended by the embedder's async resources. Using this, users can easily trigger the lifetime events of their own resources.</source>
          <target state="translated">クラス &lt;code&gt;AsyncResource&lt;/code&gt; は、埋め込み者の非同期リソースによって拡張されるように設計されています。これを使用すると、ユーザーは自分のリソースのライフタイムイベントを簡単にトリガーできます。</target>
        </trans-unit>
        <trans-unit id="fdcff2d24b5cf2da1f54b8dc6b1baafcba4d231c" translate="yes" xml:space="preserve">
          <source>The class &lt;code&gt;Channel&lt;/code&gt; represents an individual named channel within the data pipeline. It is use to track subscribers and to publish messages when there are subscribers present. It exists as a separate object to avoid channel lookups at publish time, enabling very fast publish speeds and allowing for heavy use while incurring very minimal cost. Channels are created with &lt;a href=&quot;#diagnostics_channel_diagnostics_channel_channel_name&quot;&gt;&lt;code&gt;diagnostics_channel.channel(name)&lt;/code&gt;&lt;/a&gt;, constructing a channel directly with &lt;code&gt;new Channel(name)&lt;/code&gt; is not supported.</source>
          <target state="translated">クラス &lt;code&gt;Channel&lt;/code&gt; は、データパイプライン内の個々の名前付きチャネルを表します。サブスクライバーを追跡し、サブスクライバーが存在する場合にメッセージを公開するために使用されます。これは、公開時にチャネルルックアップを回避するための別個のオブジェクトとして存在し、非常に高速な公開速度を可能にし、非常に最小限のコストで大量の使用を可能にします。チャネルは&lt;a href=&quot;#diagnostics_channel_diagnostics_channel_channel_name&quot;&gt; &lt;code&gt;diagnostics_channel.channel(name)&lt;/code&gt; &lt;/a&gt;で作成され、 &lt;code&gt;new Channel(name)&lt;/code&gt; 直接チャネルを構築することはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="24db6bc18d31361f8935db2215b4b23721678e22" translate="yes" xml:space="preserve">
          <source>The class is now available on the global object.</source>
          <target state="translated">グローバルオブジェクトでクラスを利用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="212705644c7b6f0a0de981dca4f59278961e7751" translate="yes" xml:space="preserve">
          <source>The client has not sent the entire request within the allowed time.</source>
          <target state="translated">クライアントは許可された時間内にリクエスト全体を送信していません。</target>
        </trans-unit>
        <trans-unit id="9276c199dcaa044d43e534bee7ec29f5ce383910" translate="yes" xml:space="preserve">
          <source>The cluster module allows easy creation of child processes that all share server ports.</source>
          <target state="translated">クラスタモジュールでは、すべてのサーバポートを共有する子プロセスを簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="e260c2e8ff2b3624fcd4e9411f07dcc9655f3db3" translate="yes" xml:space="preserve">
          <source>The cluster module supports two methods of distributing incoming connections.</source>
          <target state="translated">クラスタモジュールは、着信接続を分配する2つの方法をサポートしています。</target>
        </trans-unit>
        <trans-unit id="61e2978725f05de6db47385a9e6fb7d61fa5322c" translate="yes" xml:space="preserve">
          <source>The command lookup is performed using the &lt;code&gt;options.env.PATH&lt;/code&gt; environment variable if it is in the &lt;code&gt;options&lt;/code&gt; object. Otherwise, &lt;code&gt;process.env.PATH&lt;/code&gt; is used.</source>
          <target state="translated">コマンドルックアップは、 &lt;code&gt;options&lt;/code&gt; オブジェクトにある場合は &lt;code&gt;options.env.PATH&lt;/code&gt; 環境変数を使用して実行されます。それ以外の場合は、 &lt;code&gt;process.env.PATH&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="0f3b54c01712ac09b705fea3a82a14936f3c75d1" translate="yes" xml:space="preserve">
          <source>The compatibility API falls back to &lt;code&gt;host&lt;/code&gt; if &lt;code&gt;:authority&lt;/code&gt; is not present. See &lt;a href=&quot;#http2_request_authority&quot;&gt;&lt;code&gt;request.authority&lt;/code&gt;&lt;/a&gt; for more information. However, if you don't use the compatibility API (or use &lt;code&gt;req.headers&lt;/code&gt; directly), you need to implement any fall-back behaviour yourself.</source>
          <target state="translated">&lt;code&gt;:authority&lt;/code&gt; が存在しない場合、互換性APIは &lt;code&gt;host&lt;/code&gt; フォールバックします。詳細については、&lt;a href=&quot;#http2_request_authority&quot;&gt; &lt;code&gt;request.authority&lt;/code&gt; &lt;/a&gt;を参照してください。ただし、互換性APIを使用しない（または &lt;code&gt;req.headers&lt;/code&gt; を直接使用する）場合は、フォールバック動作を自分で実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="68df9708e3d0d3eddef8ce802e18951683a0f588" translate="yes" xml:space="preserve">
          <source>The consequence of this internal buffering is that memory may grow. This property shows the number of characters currently buffered to be written. (Number of characters is approximately equal to the number of bytes to be written, but the buffer may contain strings, and the strings are lazily encoded, so the exact number of bytes is not known.)</source>
          <target state="translated">この内部バッファリングの結果、メモリが増大する可能性があります。このプロパティは、現在バッファリングされている書き込み可能な文字数を示しています(文字数は書き込むバイト数とほぼ等しくなりますが、バッファには文字列が含まれている可能性があり、文字列はレイジーエンコードされていますので、正確な文字数を示しています)。(文字数は書き込まれるバイト数とほぼ同じですが、バッファには文字列が含まれている可能性があり、文字列は遅延エンコードされているため、正確なバイト数はわかりません)</target>
        </trans-unit>
        <trans-unit id="70401bc7809ade04a68d697a5d615df110d5ea61" translate="yes" xml:space="preserve">
          <source>The consequence of this internal buffering is that memory may grow. Users who experience large or growing &lt;code&gt;bufferSize&lt;/code&gt; should attempt to &quot;throttle&quot; the data flows in their program with &lt;a href=&quot;#net_socket_pause&quot;&gt;&lt;code&gt;socket.pause()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#net_socket_resume&quot;&gt;&lt;code&gt;socket.resume()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この内部バッファリングの結果、メモリが増大する可能性があります。 &lt;code&gt;bufferSize&lt;/code&gt; が大きくなったり大きくなったりするユーザーは、&lt;a href=&quot;#net_socket_pause&quot;&gt; &lt;code&gt;socket.pause()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#net_socket_resume&quot;&gt; &lt;code&gt;socket.resume()&lt;/code&gt; &lt;/a&gt;を使用して、プログラム内のデータフローを「スロットル」する必要があります。</target>
        </trans-unit>
        <trans-unit id="c3b0b7947887e3177fb32878a7f6377630a45255" translate="yes" xml:space="preserve">
          <source>The constants like &lt;code&gt;fs.R_OK&lt;/code&gt;, etc which were present directly on &lt;code&gt;fs&lt;/code&gt; were moved into &lt;code&gt;fs.constants&lt;/code&gt; as a soft deprecation. Thus for Node.js &lt;code&gt;&amp;lt; v6.3.0&lt;/code&gt; use &lt;code&gt;fs&lt;/code&gt; to access those constants, or do something like &lt;code&gt;(fs.constants || fs).R_OK&lt;/code&gt; to work with all versions.</source>
          <target state="translated">&lt;code&gt;fs&lt;/code&gt; に直接存在していた &lt;code&gt;fs.R_OK&lt;/code&gt; などの定数は、ソフトな非推奨として &lt;code&gt;fs.constants&lt;/code&gt; に移動されました。したがって、Node.js &lt;code&gt;&amp;lt; v6.3.0&lt;/code&gt; 場合、 &lt;code&gt;fs&lt;/code&gt; を使用してこれらの定数にアクセスするか、 &lt;code&gt;(fs.constants || fs).R_OK&lt;/code&gt; のようにしてすべてのバージョンで機能します。</target>
        </trans-unit>
        <trans-unit id="078d07bc511a46f9ad2d587bfc09a65d0bbbda50" translate="yes" xml:space="preserve">
          <source>The constructor now accepts an &lt;code&gt;options&lt;/code&gt; object. The single supported option is &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">コンストラクターが &lt;code&gt;options&lt;/code&gt; オブジェクトを受け入れるようになりました。サポートされている唯一のオプションは &lt;code&gt;timeout&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6bfd95b3ca9ee7199060e6e1715e8bcbcbb0aa56" translate="yes" xml:space="preserve">
          <source>The content of the &lt;code&gt;napi_extended_error_info&lt;/code&gt; returned is only valid up until an n-api function is called on the same &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">返される &lt;code&gt;napi_extended_error_info&lt;/code&gt; の内容は、同じ &lt;code&gt;env&lt;/code&gt; で n-api関数が呼び出されるまでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="37322a017055be672ead9b7bce8d7251c4fb3b11" translate="yes" xml:space="preserve">
          <source>The content of the diagnostic report can be returned as a JavaScript Object via an API call from a JavaScript application:</source>
          <target state="translated">診断レポートの内容は、JavaScriptアプリケーションからAPIコールを介してJavaScriptオブジェクトとして返すことができます。</target>
        </trans-unit>
        <trans-unit id="94462a68854dcc9df8d84a5d4715ade8e88dcd2b" translate="yes" xml:space="preserve">
          <source>The content of the report consists of a header section containing the event type, date, time, PID and Node.js version, sections containing JavaScript and native stack traces, a section containing V8 heap information, a section containing &lt;code&gt;libuv&lt;/code&gt; handle information and an OS platform information section showing CPU and memory usage and system limits. An example report can be triggered using the Node.js REPL:</source>
          <target state="translated">レポートのコンテンツは、イベントタイプ、日付、時刻、PIDおよびNode.jsバージョンを含むヘッダーセクション、JavaScriptとネイティブスタックトレースを含むセクション、V8ヒープ情報を含むセクション、 &lt;code&gt;libuv&lt;/code&gt; ハンドル情報を含むセクション、およびOSで構成されます。 CPUおよびメモリの使用状況とシステムの制限を示すプラットフォーム情報セクション。Node.js REPLを使用してサンプルレポートをトリガーできます。</target>
        </trans-unit>
        <trans-unit id="7a269de38f22f3b66fa8b6e7fab4b3d214e4a841" translate="yes" xml:space="preserve">
          <source>The context must be a &lt;code&gt;SecureContext&lt;/code&gt;.</source>
          <target state="translated">コンテキストは &lt;code&gt;SecureContext&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="dddd64b488a8422aa4a3f8c20eed7a178725c29f" translate="yes" xml:space="preserve">
          <source>The context-aware addon can be structured to avoid global static data by performing the following steps:</source>
          <target state="translated">コンテキスト対応アドオンは、以下の手順を実行することで、グローバルな静的データを回避するように構成することができます。</target>
        </trans-unit>
        <trans-unit id="ca567f36b677c5cb9763a70027bdd30de5f61620" translate="yes" xml:space="preserve">
          <source>The convenience variables &lt;code&gt;__filename&lt;/code&gt; and &lt;code&gt;__dirname&lt;/code&gt;, containing the module's absolute filename and directory path.</source>
          <target state="translated">モジュールの絶対ファイル名とディレクトリパスを含む、便利な変数 &lt;code&gt;__filename&lt;/code&gt; および &lt;code&gt;__dirname&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="694e515eb057c18adb64b8be49347f6111aff135" translate="yes" xml:space="preserve">
          <source>The converse of &lt;code&gt;RTLD_GLOBAL&lt;/code&gt;. This is the default behavior if neither flag is specified.</source>
          <target state="translated">&lt;code&gt;RTLD_GLOBAL&lt;/code&gt; の逆です。どちらのフラグも指定されていない場合、これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="9c041965ccb05cbcc2b2498f3f98ef7349f8774c" translate="yes" xml:space="preserve">
          <source>The core modules are defined within Node.js's source and are located in the &lt;code&gt;lib/&lt;/code&gt; folder.</source>
          <target state="translated">コアモジュールはNode.jsのソース内で定義され、 &lt;code&gt;lib/&lt;/code&gt; フォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="e98733c24b3ce9165e583f1afbfb98c251b70218" translate="yes" xml:space="preserve">
          <source>The core modules are defined within the Node.js source and are located in the &lt;code&gt;lib/&lt;/code&gt; folder.</source>
          <target state="translated">コアモジュールはNode.jsソース内で定義され、 &lt;code&gt;lib/&lt;/code&gt; フォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="e60dec677cc19fbe9b8602f6c55cb17a67fa7e2c" translate="yes" xml:space="preserve">
          <source>The correct use of &lt;code&gt;'uncaughtException'&lt;/code&gt; is to perform synchronous cleanup of allocated resources (e.g. file descriptors, handles, etc) before shutting down the process. &lt;strong&gt;It is not safe to resume normal operation after &lt;code&gt;'uncaughtException'&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;'uncaughtException'&lt;/code&gt; の正しい使い方は、プロセスをシャットダウンする前に、割り当てられたリソース（ファイル記述子、ハンドルなど）の同期クリーンアップを実行することです。&lt;strong&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; の&lt;/strong&gt;&lt;strong&gt;後で通常の操作を再開するのは安全ではありません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="625fbc038e9decf9ed14bb4c4fb80f76a2814a76" translate="yes" xml:space="preserve">
          <source>The created directory path is passed as a string to the callback's second parameter.</source>
          <target state="translated">作成されたディレクトリパスは、コールバックの 2 番目のパラメータに文字列として渡されます。</target>
        </trans-unit>
        <trans-unit id="534f58fa46d21aba1104952457ca5c04ac5b893c" translate="yes" xml:space="preserve">
          <source>The created folder path is passed as a string to the callback's second parameter.</source>
          <target state="translated">作成されたフォルダのパスは、コールバックの 2 番目のパラメータに文字列として渡されます。</target>
        </trans-unit>
        <trans-unit id="8a041f97cc4e73b998491a2c8188d0d2bd2b85e8" translate="yes" xml:space="preserve">
          <source>The created value is not an object, and therefore does not support additional properties. It is considered a distinct value type: calling &lt;code&gt;napi_typeof()&lt;/code&gt; with an external value yields &lt;code&gt;napi_external&lt;/code&gt;.</source>
          <target state="translated">作成された値はオブジェクトではないため、追加のプロパティをサポートしていません。これは別個の値タイプと &lt;code&gt;napi_external&lt;/code&gt; ます。外部値を指定して &lt;code&gt;napi_typeof()&lt;/code&gt; を呼び出すと、napi_externalが生成されます。</target>
        </trans-unit>
        <trans-unit id="ef737a58b4b7b0ed95607d49d4483d909837f8fd" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;packages#packages_conditional_exports&quot;&gt;package exports conditions&lt;/a&gt; are always in the &lt;code&gt;context.conditions&lt;/code&gt; array passed into the hook. To guarantee &lt;em&gt;default Node.js module specifier resolution behavior&lt;/em&gt; when calling &lt;code&gt;defaultResolve&lt;/code&gt;, the &lt;code&gt;context.conditions&lt;/code&gt; array passed to it &lt;em&gt;must&lt;/em&gt; include &lt;em&gt;all&lt;/em&gt; elements of the &lt;code&gt;context.conditions&lt;/code&gt; array originally passed into the &lt;code&gt;resolve&lt;/code&gt; hook.</source>
          <target state="translated">現在の&lt;a href=&quot;packages#packages_conditional_exports&quot;&gt;パッケージのエクスポート条件&lt;/a&gt;は、常に &lt;code&gt;context.conditions&lt;/code&gt; 配列にあります。保証するために&lt;em&gt;、既定のNode.jsモジュール指定子解像度の挙動&lt;/em&gt;呼び出すとき &lt;code&gt;defaultResolve&lt;/code&gt; を、 &lt;code&gt;context.conditions&lt;/code&gt; のそれに渡された配列は、&lt;em&gt;必要があります&lt;/em&gt;含める&lt;em&gt;すべて&lt;/em&gt;の要素 &lt;code&gt;context.conditions&lt;/code&gt; のもともとの中に渡された配列 &lt;code&gt;resolve&lt;/code&gt; フックを。</target>
        </trans-unit>
        <trans-unit id="76206b663da9a2f080a739f00a82b3be58c4a8c3" translate="yes" xml:space="preserve">
          <source>The current implementation doesn't support asynchronous PSK callbacks due to the limitations of the underlying OpenSSL API.</source>
          <target state="translated">現在の実装では、基礎となるOpenSSL APIの制限のため、非同期PSKコールバックをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="db3d85bb6eb16c87c47b9de7c7f2d1c1e43e3c37" translate="yes" xml:space="preserve">
          <source>The current input data being processed by node.</source>
          <target state="translated">ノードが処理している現在の入力データ。</target>
        </trans-unit>
        <trans-unit id="5e69b4a01df1a61066a9ce7a18a8823cf91a55a0" translate="yes" xml:space="preserve">
          <source>The current linking status of &lt;code&gt;module&lt;/code&gt;. It will be one of the following values:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; の現在のリンク状態。次のいずれかの値になります。</target>
        </trans-unit>
        <trans-unit id="604e58117e969d3ee3e9fa8801b2d02f3bb873dc" translate="yes" xml:space="preserve">
          <source>The current module's status does not allow for this operation. The specific meaning of the error depends on the specific function.</source>
          <target state="translated">現在のモジュールの状態では、この操作はできません。エラーの具体的な意味は、特定の機能に依存します。</target>
        </trans-unit>
        <trans-unit id="2f77c9d8e4f62fe3ec3a09fb65f2570da38f3d0c" translate="yes" xml:space="preserve">
          <source>The current possible values are: &lt;code&gt;'arm'&lt;/code&gt;, &lt;code&gt;'arm64'&lt;/code&gt;, &lt;code&gt;'ia32'&lt;/code&gt;, &lt;code&gt;'mips'&lt;/code&gt;, &lt;code&gt;'mipsel'&lt;/code&gt;, &lt;code&gt;'ppc'&lt;/code&gt;, &lt;code&gt;'ppc64'&lt;/code&gt;, &lt;code&gt;'s390'&lt;/code&gt;, &lt;code&gt;'s390x'&lt;/code&gt;, &lt;code&gt;'x32'&lt;/code&gt;, and &lt;code&gt;'x64'&lt;/code&gt;.</source>
          <target state="translated">現在可能な値は、 &lt;code&gt;'arm'&lt;/code&gt; 、 &lt;code&gt;'arm64'&lt;/code&gt; 、 &lt;code&gt;'ia32'&lt;/code&gt; 、 &lt;code&gt;'mips'&lt;/code&gt; 、 &lt;code&gt;'mipsel'&lt;/code&gt; 、 &lt;code&gt;'ppc'&lt;/code&gt; 、 &lt;code&gt;'ppc64'&lt;/code&gt; 、 &lt;code&gt;'s390'&lt;/code&gt; 、 &lt;code&gt;'s390x'&lt;/code&gt; 、 &lt;code&gt;'x32'&lt;/code&gt; 、 &lt;code&gt;'x64'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08f2aa30537d2a94aab319cde4595eaa5a193929" translate="yes" xml:space="preserve">
          <source>The current specifier resolution does not support all default behavior of the CommonJS loader. One of the behavior differences is automatic resolution of file extensions and the ability to import directories that have an index file.</source>
          <target state="translated">現在の指定子の解決は、CommonJS ローダーのデフォルトの動作をすべてサポートしているわけではありません。挙動の違いの1つは、ファイル拡張子の自動解決と、インデックスファイルを持つディレクトリをインポートする機能です。</target>
        </trans-unit>
        <trans-unit id="e7340d732bc4f74892a449e92c3a9d1a66649a5d" translate="yes" xml:space="preserve">
          <source>The current status of the module. Will be one of:</source>
          <target state="translated">モジュールの現在の状態。のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="ee7afc371fcff00f9ae5caf557ebb75c2aae5ed1" translate="yes" xml:space="preserve">
          <source>The cursor position relative to &lt;code&gt;rl.line&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rl.line&lt;/code&gt; に対するカーソル位置。</target>
        </trans-unit>
        <trans-unit id="7ac927a9571a39f1ca30306572ad991afbd537b3" translate="yes" xml:space="preserve">
          <source>The custom &lt;code&gt;lookup&lt;/code&gt; function must return a &lt;code&gt;Promise&lt;/code&gt; that is resolved once the lookup is complete. It will be invoked with two arguments:</source>
          <target state="translated">カスタム &lt;code&gt;lookup&lt;/code&gt; 関数は、ルックアップが完了すると解決される &lt;code&gt;Promise&lt;/code&gt; を返す必要があります。これは、2つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c7823a9aa167ea3d4beea31a35714835371f04c5" translate="yes" xml:space="preserve">
          <source>The data arriving from the secondary thread via the queue is given in the &lt;code&gt;data&lt;/code&gt; parameter and the JavaScript function to call is given in the &lt;code&gt;js_callback&lt;/code&gt; parameter.</source>
          <target state="translated">キューを介してセカンダリスレッドから到着する &lt;code&gt;data&lt;/code&gt; はdataパラメータで指定され、呼び出すJavaScript関数は &lt;code&gt;js_callback&lt;/code&gt; パラメータで指定されます。</target>
        </trans-unit>
        <trans-unit id="a47cc91b138d94f64283a7019417203b465b938e" translate="yes" xml:space="preserve">
          <source>The data is cloned as if using &lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt;&lt;code&gt;postMessage()&lt;/code&gt;&lt;/a&gt;, according to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTMLの構造化複製アルゴリズム&lt;/a&gt;に従って、&lt;a href=&quot;#worker_threads_port_postmessage_value_transferlist&quot;&gt; &lt;code&gt;postMessage()&lt;/code&gt; &lt;/a&gt;を使用する場合と同様にデータが複製されます。</target>
        </trans-unit>
        <trans-unit id="66dc76e6845e847d601765b5f200dde07614a3a4" translate="yes" xml:space="preserve">
          <source>The data will be lost if there is no listener when a &lt;code&gt;Socket&lt;/code&gt; emits a &lt;code&gt;'data'&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; が &lt;code&gt;'data'&lt;/code&gt; イベントを発行するときにリスナーがない場合、データは失われます。</target>
        </trans-unit>
        <trans-unit id="d117ad890c4d2d7c0c5443bfa3cc8f8d2a166c1b" translate="yes" xml:space="preserve">
          <source>The data, key, and signature arguments can also be ArrayBuffer.</source>
          <target state="translated">データ、キー、シグネチャの引数にはArrayBufferを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="424a5b793d70583c5cb89e2883eb2b3acc0af5a2" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#http_http_globalagent&quot;&gt;&lt;code&gt;http.globalAgent&lt;/code&gt;&lt;/a&gt; that is used by &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt; has all of these values set to their respective defaults.</source>
          <target state="translated">&lt;a href=&quot;#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt;によって使用されるデフォルトの&lt;a href=&quot;#http_http_globalagent&quot;&gt; &lt;code&gt;http.globalAgent&lt;/code&gt; &lt;/a&gt;では、これらの値がすべてそれぞれのデフォルトに設定されています。</target>
        </trans-unit>
        <trans-unit id="45622ce3718f46c787db722917b25603b428ce8d" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;inputEncoding&lt;/code&gt; changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;</source>
          <target state="translated">デフォルトの &lt;code&gt;inputEncoding&lt;/code&gt; が &lt;code&gt;binary&lt;/code&gt; から &lt;code&gt;utf8&lt;/code&gt; に変更されました</target>
        </trans-unit>
        <trans-unit id="9c9dcea9957bb03769108610d78d2c722541b6f4" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;inputEncoding&lt;/code&gt; changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;inputEncoding&lt;/code&gt; が &lt;code&gt;binary&lt;/code&gt; から &lt;code&gt;utf8&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="805e29c53bf5cedf603de21a2fe3e36cae8ccef2" translate="yes" xml:space="preserve">
          <source>The default Node.js ES module resolution function is provided as a third argument to the resolver for easy compatibility workflows.</source>
          <target state="translated">デフォルトのNode.js ESモジュールの解決関数は、互換性のワークフローを容易にするためにリゾルバの第3引数として提供されています。</target>
        </trans-unit>
        <trans-unit id="eb5341852c6e3cd7eb2ae6cd040a4e2f22b47f9a" translate="yes" xml:space="preserve">
          <source>The default Node.js conditions of &lt;code&gt;&quot;node&quot;&lt;/code&gt;, &lt;code&gt;&quot;default&quot;&lt;/code&gt;, &lt;code&gt;&quot;import&quot;&lt;/code&gt;, and &lt;code&gt;&quot;require&quot;&lt;/code&gt; will always apply as defined.</source>
          <target state="translated">&lt;code&gt;&quot;node&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;default&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;import&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;require&quot;&lt;/code&gt; のデフォルトのNode.js条件は、定義されたとおりに常に適用されます。</target>
        </trans-unit>
        <trans-unit id="e149389a3c51155d4602420a22a0808ef50b764f" translate="yes" xml:space="preserve">
          <source>The default action of calling &lt;code&gt;.destroy()&lt;/code&gt; on the &lt;code&gt;socket&lt;/code&gt; will no longer take place if there are listeners attached for &lt;code&gt;'clientError'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'clientError'&lt;/code&gt; に接続されたリスナーがある場合、 &lt;code&gt;socket&lt;/code&gt; &lt;code&gt;.destroy()&lt;/code&gt; を呼び出すデフォルトのアクションは行われなくなりました。</target>
        </trans-unit>
        <trans-unit id="037f6425f19247726590a65496e73da3e211f467" translate="yes" xml:space="preserve">
          <source>The default behavior will return a 431 Request Header Fields Too Large if a HPE_HEADER_OVERFLOW error occurs.</source>
          <target state="translated">デフォルトの動作では、HPE_HEADER_OVERFLOWエラーが発生した場合、431 Request Header Fields Too Largeを返します。</target>
        </trans-unit>
        <trans-unit id="9302b7a92d56642d560974704122ede73aa0f99d" translate="yes" xml:space="preserve">
          <source>The default can also be replaced on a per client or server basis using the &lt;code&gt;ciphers&lt;/code&gt; option from &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;, which is also available in &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;, and when creating new &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">デフォルトも使用して、クライアントまたはサーバごとに交換することができる &lt;code&gt;ciphers&lt;/code&gt; からオプション&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;、にも利用可能である&lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt; &lt;code&gt;tls.createServer()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; &lt;/a&gt;、および新しい作成&lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; &lt;/a&gt;秒。</target>
        </trans-unit>
        <trans-unit id="94bbf774c7da53135f47084850fa248daa49cf18" translate="yes" xml:space="preserve">
          <source>The default cipher suite included within Node.js has been carefully selected to reflect current security best practices and risk mitigation. Changing the default cipher suite can have a significant impact on the security of an application. The &lt;code&gt;--tls-cipher-list&lt;/code&gt; switch and &lt;code&gt;ciphers&lt;/code&gt; option should by used only if absolutely necessary.</source>
          <target state="translated">Node.jsに含まれるデフォルトの暗号スイートは、現在のセキュリティのベストプラクティスとリスク軽減を反映するように慎重に選択されています。デフォルトの暗号スイートを変更すると、アプリケーションのセキュリティに大きな影響を与える可能性があります。 &lt;code&gt;--tls-cipher-list&lt;/code&gt; スイッチと &lt;code&gt;ciphers&lt;/code&gt; オプションをすることによってのみ、絶対に必要な場合に使用すべきです。</target>
        </trans-unit>
        <trans-unit id="e9e2179dc54344f056b0decf54f9e52896f35ce1" translate="yes" xml:space="preserve">
          <source>The default cipher suite prefers GCM ciphers for &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites&quot;&gt;Chrome's 'modern cryptography' setting&lt;/a&gt; and also prefers ECDHE and DHE ciphers for Perfect Forward Secrecy, while offering &lt;em&gt;some&lt;/em&gt; backward compatibility.</source>
          <target state="translated">デフォルトの暗号スイートは、&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites&quot;&gt;Chromeの「最新の暗号化」設定に&lt;/a&gt;はGCM暗号を優先し、Perfect Forward SecrecyにはECDHEおよびDHE暗号を優先しますが&lt;em&gt;、&lt;/em&gt;下位互換性もあります。</target>
        </trans-unit>
        <trans-unit id="dbbfe4006da39c95815ae911f098edf3a96dfb05" translate="yes" xml:space="preserve">
          <source>The default cipher suite prefers GCM ciphers for &lt;a href=&quot;https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites&quot;&gt;Chrome's 'modern cryptography' setting&lt;/a&gt; and also prefers ECDHE and DHE ciphers for perfect forward secrecy, while offering &lt;em&gt;some&lt;/em&gt; backward compatibility.</source>
          <target state="translated">デフォルトの暗号スイートは、&lt;a href=&quot;https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites&quot;&gt;Chromeの「最新の暗号化」設定に&lt;/a&gt;GCM暗号を優先し、完全転送秘密のためにECDHEおよびDHE暗号を優先しますが&lt;em&gt;、&lt;/em&gt;下位互換性も提供します。</target>
        </trans-unit>
        <trans-unit id="92c94173505dabb90bff349caf3b6e28c76cde35" translate="yes" xml:space="preserve">
          <source>The default curve name to use for ECDH key agreement in a tls server. The default value is &lt;code&gt;'auto'&lt;/code&gt;. See &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; for further information.</source>
          <target state="translated">TLSサーバーでECDH鍵合意に使用するデフォルトの曲線名。デフォルト値は &lt;code&gt;'auto'&lt;/code&gt; です。詳細については、&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b0778671ccbc9625a83b9f92ee296a2658f4dfff" translate="yes" xml:space="preserve">
          <source>The default encoding for &lt;code&gt;password&lt;/code&gt; if it is a string changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;password&lt;/code&gt; が &lt;code&gt;binary&lt;/code&gt; から &lt;code&gt;utf8&lt;/code&gt; に変更された場合のパスワードのデフォルトのエンコーディング。</target>
        </trans-unit>
        <trans-unit id="2bcb8db5cc34d864f90eddb699c015081a96297f" translate="yes" xml:space="preserve">
          <source>The default encoding to use for functions that can take either strings or &lt;a href=&quot;buffer&quot;&gt;buffers&lt;/a&gt;. The default value is &lt;code&gt;'buffer'&lt;/code&gt;, which makes methods default to &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">文字列または&lt;a href=&quot;buffer&quot;&gt;バッファの&lt;/a&gt;いずれかを取ることができる関数に使用するデフォルトのエンコーディング。デフォルト値は &lt;code&gt;'buffer'&lt;/code&gt; で、メソッドはデフォルトで&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;オブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="2f0ae7f7212ef53218a990773857d3a20b74faa5" translate="yes" xml:space="preserve">
          <source>The default evaluator provides access to any variables that exist in the global scope. It is possible to expose a variable to the REPL explicitly by assigning it to the &lt;code&gt;context&lt;/code&gt; object associated with each &lt;code&gt;REPLServer&lt;/code&gt;:</source>
          <target state="translated">デフォルトのエバリュエーターは、グローバルスコープに存在するすべての変数へのアクセスを提供します。変数を各 &lt;code&gt;REPLServer&lt;/code&gt; に関連付けられた &lt;code&gt;context&lt;/code&gt; オブジェクトに割り当てることにより、変数をREPLに明示的に公開できます。</target>
        </trans-unit>
        <trans-unit id="bef6999caafa42e1fa0985f55ff6f38a2c0c82ba" translate="yes" xml:space="preserve">
          <source>The default evaluator supports direct evaluation of JavaScript expressions:</source>
          <target state="translated">デフォルトの評価器は、JavaScript 式の直接評価をサポートしています。</target>
        </trans-unit>
        <trans-unit id="cbfef051942d11a17c2cb3bac8ddcb75ee42bdbd" translate="yes" xml:space="preserve">
          <source>The default evaluator will automatically load Node.js core modules into the REPL environment when used. For instance, unless otherwise declared as a global or scoped variable, the input &lt;code&gt;fs&lt;/code&gt; will be evaluated on-demand as &lt;code&gt;global.fs = require('fs')&lt;/code&gt;.</source>
          <target state="translated">デフォルトのエバリュエーターは、使用時にNode.jsコアモジュールをREPL環境に自動的にロードします。たとえば、グローバル変数またはスコープ付き変数として宣言されていない限り、入力 &lt;code&gt;fs&lt;/code&gt; は &lt;code&gt;global.fs = require('fs')&lt;/code&gt; 応じてglobal.fs = require（ 'fs'）として評価されます。</target>
        </trans-unit>
        <trans-unit id="bd2e99648a3e680c5642e93ef4f08787fbb963d6" translate="yes" xml:space="preserve">
          <source>The default evaluator will, by default, assign the result of the most recently evaluated expression to the special variable &lt;code&gt;_&lt;/code&gt; (underscore). Explicitly setting &lt;code&gt;_&lt;/code&gt; to a value will disable this behavior.</source>
          <target state="translated">デフォルトのエバリュエーターは、デフォルトで、最後に評価された式の結果を特殊変数 &lt;code&gt;_&lt;/code&gt; （下線）に割り当てます。 &lt;code&gt;_&lt;/code&gt; を明示的に値に設定すると、この動作が無効になります。</target>
        </trans-unit>
        <trans-unit id="bbe86dc7499b2f2504270c087ed480381407986c" translate="yes" xml:space="preserve">
          <source>The default for the encoding parameters changed from &lt;code&gt;binary&lt;/code&gt; to &lt;code&gt;utf8&lt;/code&gt;.</source>
          <target state="translated">エンコーディングパラメータのデフォルトが &lt;code&gt;binary&lt;/code&gt; から &lt;code&gt;utf8&lt;/code&gt; に変更されました。</target>
        </trans-unit>
        <trans-unit id="b138f23d74f38922003979496f380210fccc5ead" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;explicit&lt;/code&gt;, which requires providing the full path to a module. The &lt;code&gt;node&lt;/code&gt; mode enables support for optional file extensions and the ability to import a directory that has an index file.</source>
          <target state="translated">デフォルトは &lt;code&gt;explicit&lt;/code&gt; 。これには、モジュールへのフルパスを指定する必要があります。 &lt;code&gt;node&lt;/code&gt; モードは、オプションのファイル拡張子とインデックスファイルを持つディレクトリをインポートする機能をサポートできます。</target>
        </trans-unit>
        <trans-unit id="72fa3b4409ef85a1be285a1185d85e86da0c3c99" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;explicit&lt;/code&gt;, which requires providing the full path to a module. The &lt;code&gt;node&lt;/code&gt; mode will enable support for optional file extensions and the ability to import a directory that has an index file.</source>
          <target state="translated">デフォルトは &lt;code&gt;explicit&lt;/code&gt; で、モジュールへのフルパスを提供する必要があります。 &lt;code&gt;node&lt;/code&gt; モードは、オプションのファイル拡張子とインデックスファイルを持つディレクトリをインポートする機能のサポートを有効にします。</target>
        </trans-unit>
        <trans-unit id="b22dd5b7f37d3175e6a2d67fba4aa13c2f98f537" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;llhttp&lt;/code&gt;, unless otherwise specified when building Node.js.</source>
          <target state="translated">Node.jsのビルド時に特に指定されていない限り、デフォルトは &lt;code&gt;llhttp&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="894fb1f385daf51f85572a8a7c60aa9aa6778da7" translate="yes" xml:space="preserve">
          <source>The default operation of the &lt;code&gt;path&lt;/code&gt; module varies based on the operating system on which a Node.js application is running. Specifically, when running on a Windows operating system, the &lt;code&gt;path&lt;/code&gt; module will assume that Windows-style paths are being used.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; モジュールのデフォルトの動作は、Node.jsアプリケーションが実行されているオペレーティングシステムによって異なります。具体的には、Windowsオペレーティングシステムで実行する場合、 &lt;code&gt;path&lt;/code&gt; モジュールはWindowsスタイルのパスが使用されていると想定します。</target>
        </trans-unit>
        <trans-unit id="a9d442f7826b0f19502c0bf256c75a5c50b16d0c" translate="yes" xml:space="preserve">
          <source>The default process scheduling priority. This corresponds to &lt;code&gt;NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;0&lt;/code&gt; on all other platforms.</source>
          <target state="translated">デフォルトのプロセススケジューリング優先順位。これは、Windowsでは &lt;code&gt;NORMAL_PRIORITY_CLASS&lt;/code&gt; に対応し、他のすべてのプラットフォームではnice値 &lt;code&gt;0&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="d0c251e35032fe92a7793aba7069dcc830b94bfb" translate="yes" xml:space="preserve">
          <source>The default renegotiation limits should not be modified without a full understanding of the implications and risks.</source>
          <target state="translated">デフォルトの再交渉限度額は、その意味合いとリスクを十分に理解せずに変更すべきではない。</target>
        </trans-unit>
        <trans-unit id="28b7bcc17765718245517a14a51988bbaafe7fd1" translate="yes" xml:space="preserve">
          <source>The default styles and associated colors are:</source>
          <target state="translated">デフォルトのスタイルと関連する色は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d1cd97ac4111ca4276bffe41bb19e7bf5513d14d" translate="yes" xml:space="preserve">
          <source>The default text character encoding for all &lt;code&gt;Http2Stream&lt;/code&gt;s is UTF-8. As a best practice, it is recommended that when using an &lt;code&gt;Http2Stream&lt;/code&gt; to send text, the &lt;code&gt;'content-type'&lt;/code&gt; header should be set and should identify the character encoding used.</source>
          <target state="translated">すべての &lt;code&gt;Http2Stream&lt;/code&gt; のデフォルトのテキスト文字エンコードはUTF-8です。ベストプラクティスとして、 &lt;code&gt;Http2Stream&lt;/code&gt; を使用してテキストを送信する場合は、 &lt;code&gt;'content-type'&lt;/code&gt; ヘッダーを設定し、使用する文字エンコードを識別することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fc7868a08f5fff87fda23b49b4c8e69a1dca029b" translate="yes" xml:space="preserve">
          <source>The default timeout changed from 120s to 0 (no timeout).</source>
          <target state="translated">デフォルトのタイムアウトが120秒から0(タイムアウトなし)に変更されました。</target>
        </trans-unit>
        <trans-unit id="e1598a2f5f22914893d0936f932737ab462261a2" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;10&lt;/code&gt; but may be set to any valid JavaScript number. Changes will affect any stack trace captured &lt;em&gt;after&lt;/em&gt; the value has been changed.</source>
          <target state="translated">デフォルト値は &lt;code&gt;10&lt;/code&gt; ですが、任意の有効なJavaScript番号に設定できます。変更は、値が変更された&lt;em&gt;後&lt;/em&gt;にキャプチャさ&lt;em&gt;れ&lt;/em&gt;たスタックトレースに影響します。</target>
        </trans-unit>
        <trans-unit id="ab0911e1f17365fc495919107a28aaa89b4632a9" translate="yes" xml:space="preserve">
          <source>The default value is controlled by the &lt;a href=&quot;#cli_diagnostic_dir_directory&quot;&gt;--diagnostic-dir&lt;/a&gt; command-line option.</source>
          <target state="translated">デフォルト値は、&lt;a href=&quot;#cli_diagnostic_dir_directory&quot;&gt;-diagnostic-dir&lt;/a&gt;コマンドラインオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="1dfe5e502595198cf936b72689bf013987b09e5d" translate="yes" xml:space="preserve">
          <source>The defaults above apply to the first call only; the defaults for later calls are the current values at the time of &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called.</source>
          <target state="translated">上記のデフォルトは最初の呼び出しにのみ適用されます。以降の呼び出しのデフォルトは、 &lt;code&gt;cluster.setupMaster()&lt;/code&gt; が呼び出されたときの現在の値です。</target>
        </trans-unit>
        <trans-unit id="ea578a19411c9ccf375f0f3b1630215e405e21f3" translate="yes" xml:space="preserve">
          <source>The deferred object is freed upon successful completion.</source>
          <target state="translated">繰延化されたオブジェクトは、正常に完了した時点で解放されます。</target>
        </trans-unit>
        <trans-unit id="dd1071e967d93b412fe0d84a325422b75f6eb19d" translate="yes" xml:space="preserve">
          <source>The dependencies are keyed by the requested specifier string and have values of either &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, a string pointing to a module to be resolved, or a conditions object.</source>
          <target state="translated">依存関係は、要求された指定子文字列によってキー設定され、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;null&lt;/code&gt; 、解決されるモジュールを指す文字列、または条件オブジェクトのいずれかの値を持ちます。</target>
        </trans-unit>
        <trans-unit id="014b37147f5f5b20f9f952c77143b7ae77c5373a" translate="yes" xml:space="preserve">
          <source>The dependencies are keyed by the requested string specifier and have values of either &lt;code&gt;true&lt;/code&gt; or a string pointing to a module that will be resolved.</source>
          <target state="translated">依存関係は、要求された文字列指定子によってキー設定され、 &lt;code&gt;true&lt;/code&gt; または解決されるモジュールを指す文字列のいずれかの値を持ちます。</target>
        </trans-unit>
        <trans-unit id="dc767baaa2fbc0edadfb6dbb5fcc35b1fb8b2531" translate="yes" xml:space="preserve">
          <source>The destructor for a wrapper object will run when the object is garbage-collected. For destructor testing, there are command-line flags that can be used to make it possible to force garbage collection. These flags are provided by the underlying V8 JavaScript engine. They are subject to change or removal at any time. They are not documented by Node.js or V8, and they should never be used outside of testing.</source>
          <target state="translated">ラッパー・オブジェクトのデストラクタは、オブジェクトがガベージコレクションされると実行されます。デストラクタのテストのために、 ガベージコレクションを強制的に行うことができるようにするためのコマンドライン・フラグがあります。これらのフラグは、基礎となる V8 JavaScript エンジンによって提供されています。これらのフラグはいつでも変更または削除される可能性があります。これらのフラグは Node.js や V8 によって文書化されておらず、テスト以外では決して使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="65d4964307ef68512d4dada61511bed2c1cb7f1c" translate="yes" xml:space="preserve">
          <source>The detection of named exports is based on common syntax patterns but does not always correctly detect named exports. In these cases, using the default import form described above can be a better option.</source>
          <target state="translated">名前付きエクスポートの検出は、一般的な構文パターンに基づいていますが、必ずしも名前付きエクスポートを正しく検出できるとは限りません。このような場合は、上で説明したデフォルトのインポートフォームを使用することがより良いオプションとなります。</target>
        </trans-unit>
        <trans-unit id="15ce80971e310e3ec3ee6cd0b337307c7fa1f596" translate="yes" xml:space="preserve">
          <source>The difference from directly calling &lt;code&gt;fs.write()&lt;/code&gt; is that under some unusual conditions, &lt;code&gt;fs.write()&lt;/code&gt; may write only part of the buffer and will need to be retried to write the remaining data, whereas &lt;code&gt;fs.writeFile()&lt;/code&gt; will retry until the data is entirely written (or an error occurs).</source>
          <target state="translated">&lt;code&gt;fs.write()&lt;/code&gt; を直接呼び出すこととの違いは、いくつかの異常な状況下では、 &lt;code&gt;fs.write()&lt;/code&gt; がバッファーの一部のみを書き込み、残りのデータを書き込むために再試行する必要があるのに対し、 &lt;code&gt;fs.writeFile()&lt;/code&gt; は、データは完全に書き込まれます（またはエラーが発生します）。</target>
        </trans-unit>
        <trans-unit id="094c6508fa8695afd31b4c77badee301087c2b8c" translate="yes" xml:space="preserve">
          <source>The difference from directly calling &lt;code&gt;fs.write()&lt;/code&gt; is that under some unusual conditions, &lt;code&gt;fs.write()&lt;/code&gt; might write only part of the buffer and need to be retried to write the remaining data, whereas &lt;code&gt;fs.writeFile()&lt;/code&gt; retries until the data is entirely written (or an error occurs).</source>
          <target state="translated">&lt;code&gt;fs.write()&lt;/code&gt; を直接呼び出すこととの違いは、いくつかの異常な条件下では、 &lt;code&gt;fs.write()&lt;/code&gt; がバッファーの一部のみを書き込み、残りのデータを書き込むために再試行する必要があるのに対し、 &lt;code&gt;fs.writeFile()&lt;/code&gt; はデータまで再試行することです。完全に書き込まれます（またはエラーが発生します）。</target>
        </trans-unit>
        <trans-unit id="ce8ecf893c2df1ff2904e309973b97beb8f1d939" translate="yes" xml:space="preserve">
          <source>The directory name of the current module. This is the same as the &lt;a href=&quot;path#path_path_dirname_path&quot;&gt;&lt;code&gt;path.dirname()&lt;/code&gt;&lt;/a&gt; of the &lt;a href=&quot;#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のモジュールのディレクトリ名。これは、同じである&lt;a href=&quot;path#path_path_dirname_path&quot;&gt; &lt;code&gt;path.dirname()&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;#modules_filename&quot;&gt; &lt;code&gt;__filename&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9d9ae82e6c05956e005dc9b9074c2f5acb9b5c9b" translate="yes" xml:space="preserve">
          <source>The directory name of the module. This is usually the same as the &lt;a href=&quot;path#path_path_dirname_path&quot;&gt;&lt;code&gt;path.dirname()&lt;/code&gt;&lt;/a&gt; of the &lt;a href=&quot;#modules_module_id&quot;&gt;&lt;code&gt;module.id&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュールのディレクトリ名。これは通常と同じです&lt;a href=&quot;path#path_path_dirname_path&quot;&gt; &lt;code&gt;path.dirname()&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;#modules_module_id&quot;&gt; &lt;code&gt;module.id&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2837289275e81adbf0b915e85cd318a84bd0b432" translate="yes" xml:space="preserve">
          <source>The documentation for these APIs can be found in &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/node.h&quot;&gt;src/node.h&lt;/a&gt; in the Node.js source tree. In addition to the APIs exposed by Node.js, some required concepts are provided by the V8 embedder API.</source>
          <target state="translated">これらのAPIのドキュメントは、Node.jsソースツリーの&lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/node.h&quot;&gt;src /node.h&lt;/a&gt;にあります。Node.jsによって公開されたAPIに加えて、いくつかの必要な概念がV8 embedderAPIによって提供されます。</target>
        </trans-unit>
        <trans-unit id="fad0f8a6baae40a95ed3db2f59199a04f367f259" translate="yes" xml:space="preserve">
          <source>The effect of calling &lt;code&gt;process.disconnect()&lt;/code&gt; is the same as calling &lt;a href=&quot;child_process#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;ChildProcess.disconnect()&lt;/code&gt;&lt;/a&gt; from the parent process.</source>
          <target state="translated">&lt;code&gt;process.disconnect()&lt;/code&gt; を呼び出すことの効果は、親プロセスから&lt;a href=&quot;child_process#child_process_subprocess_disconnect&quot;&gt; &lt;code&gt;ChildProcess.disconnect()&lt;/code&gt; &lt;/a&gt;を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="b13233810b1e41d46809c6ff3912d669e5f6b111" translate="yes" xml:space="preserve">
          <source>The elapsed time is diplayed with a suitable time unit.</source>
          <target state="translated">経過時間は、適切な時間単位でディプレイされます。</target>
        </trans-unit>
        <trans-unit id="a377736575964238d7b29d25721cb94a28e972ae" translate="yes" xml:space="preserve">
          <source>The elements of &lt;code&gt;list&lt;/code&gt; can now be &lt;code&gt;Uint8Array&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; の要素を &lt;code&gt;Uint8Array&lt;/code&gt; にできるようになりました。</target>
        </trans-unit>
        <trans-unit id="72f28522157a9426c5f81f77230a9678e411fb42" translate="yes" xml:space="preserve">
          <source>The embedded API provided by AsyncHooks exposes &lt;code&gt;.emitBefore()&lt;/code&gt; and &lt;code&gt;.emitAfter()&lt;/code&gt; methods which are very easy to use incorrectly which can lead to unrecoverable errors.</source>
          <target state="translated">AsyncHooksが提供する組み込みAPIは、非常に使いやすく、回復不可能なエラーにつながる可能性のある &lt;code&gt;.emitBefore()&lt;/code&gt; および &lt;code&gt;.emitAfter()&lt;/code&gt; メソッドを公開しています。</target>
        </trans-unit>
        <trans-unit id="308ef7a28f597422070882e9c448b7b77d348344" translate="yes" xml:space="preserve">
          <source>The emitted warning can be inspected with &lt;a href=&quot;process#process_event_warning&quot;&gt;&lt;code&gt;process.on('warning')&lt;/code&gt;&lt;/a&gt; and will have the additional &lt;code&gt;emitter&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; properties, referring to the event emitter instance, the event&amp;rsquo;s name and the number of attached listeners, respectively. Its &lt;code&gt;name&lt;/code&gt; property is set to &lt;code&gt;'MaxListenersExceededWarning'&lt;/code&gt;.</source>
          <target state="translated">発生した警告は、&lt;a href=&quot;process#process_event_warning&quot;&gt; &lt;code&gt;process.on('warning')&lt;/code&gt; &lt;/a&gt;で検査でき、追加の &lt;code&gt;emitter&lt;/code&gt; 、 &lt;code&gt;type&lt;/code&gt; 、および &lt;code&gt;count&lt;/code&gt; プロパティがあり、それぞれイベントエミッターインスタンス、イベントの名前、および接続されているリスナーの数を参照します。その &lt;code&gt;name&lt;/code&gt; プロパティは &lt;code&gt;'MaxListenersExceededWarning'&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="6cd59bd3076447e9cc4efabee6cf2beb7857aab9" translate="yes" xml:space="preserve">
          <source>The encoding supported by the &lt;code&gt;TextDecoder&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;TextDecoder&lt;/code&gt; インスタンスでサポートされるエンコーディング。</target>
        </trans-unit>
        <trans-unit id="3bca291a385c7124fbe4f264a429759a9910bc1a" translate="yes" xml:space="preserve">
          <source>The encoding supported by the &lt;code&gt;TextEncoder&lt;/code&gt; instance. Always set to &lt;code&gt;'utf-8'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TextEncoder&lt;/code&gt; インスタンスでサポートされるエンコーディング。常に &lt;code&gt;'utf-8'&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="14993bef185de40fca6f37f6025f6adc4a6d38bc" translate="yes" xml:space="preserve">
          <source>The end result is that the addon only uses the exported C APIs. As a result, it still gets the benefits of the ABI stability provided by the C API.</source>
          <target state="translated">最終的な結果として、このアドオンはエクスポートされたC APIのみを使用することになります。その結果、C APIによって提供されるABIの安定性の恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="06d491534acac8b5c333bb2ec685b11ff9198bfc" translate="yes" xml:space="preserve">
          <source>The equivalent can be done using N-API values with the following snippet:</source>
          <target state="translated">以下のスニペットでN-API値を使用して同等のことができます。</target>
        </trans-unit>
        <trans-unit id="a4d783475a1d8cf1593dcf10fc96ac93b5e7fefe" translate="yes" xml:space="preserve">
          <source>The event handler is executed with two arguments, the &lt;code&gt;worker&lt;/code&gt; contains the worker object and the &lt;code&gt;address&lt;/code&gt; object contains the following connection properties: &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;addressType&lt;/code&gt;. This is very useful if the worker is listening on more than one address.</source>
          <target state="translated">イベントハンドラは、二つの引数で実行され、 &lt;code&gt;worker&lt;/code&gt; 労働者オブジェクトが含まれており、 &lt;code&gt;address&lt;/code&gt; オブジェクトは、次の接続プロパティが含まれます。 &lt;code&gt;address&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; および &lt;code&gt;addressType&lt;/code&gt; 型を。これは、ワーカーが複数のアドレスでリッスンしている場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cd9ae4f011332788bbb2b1cefe6a18d83225b7d8" translate="yes" xml:space="preserve">
          <source>The event handler is invoked with a single argument representing the block of Headers as an object.</source>
          <target state="translated">イベントハンドラは、Headersのブロックをオブジェクトとして表す単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e7f66f6f56b2d0f62c5b2f68996f376b675b6f0b" translate="yes" xml:space="preserve">
          <source>The event listener should perform a lookup in external storage for the &lt;code&gt;sessionData&lt;/code&gt; saved by the &lt;a href=&quot;#tls_event_newsession&quot;&gt;&lt;code&gt;'newSession'&lt;/code&gt;&lt;/a&gt; event handler using the given &lt;code&gt;sessionId&lt;/code&gt;. If found, call &lt;code&gt;callback(null, sessionData)&lt;/code&gt; to resume the session. If not found, the session cannot be resumed. &lt;code&gt;callback()&lt;/code&gt; must be called without &lt;code&gt;sessionData&lt;/code&gt; so that the handshake can continue and a new session can be created. It is possible to call &lt;code&gt;callback(err)&lt;/code&gt; to terminate the incoming connection and destroy the socket.</source>
          <target state="translated">イベントリスナーは、指定された &lt;code&gt;sessionId&lt;/code&gt; を使用して、&lt;a href=&quot;#tls_event_newsession&quot;&gt; &lt;code&gt;'newSession'&lt;/code&gt; &lt;/a&gt;イベントハンドラーによって保存された &lt;code&gt;sessionData&lt;/code&gt; を外部ストレージで検索する必要があります。見つかった場合は、 &lt;code&gt;callback(null, sessionData)&lt;/code&gt; を呼び出してセッションを再開します。見つからない場合、セッションを再開できません。ハンドシェイクを続行して新しいセッションを作成できるように、 &lt;code&gt;callback()&lt;/code&gt; は &lt;code&gt;sessionData&lt;/code&gt; なしで呼び出す必要があります。 &lt;code&gt;callback(err)&lt;/code&gt; を呼び出して、着信接続を終了し、ソケットを破棄することができます。</target>
        </trans-unit>
        <trans-unit id="e7932d0007a3a720c50efa7157ca26cfcca5c21c" translate="yes" xml:space="preserve">
          <source>The event loop utilization of a worker is available only after the &lt;a href=&quot;#worker_threads_event_online&quot;&gt;&lt;code&gt;'online'&lt;/code&gt; event&lt;/a&gt; emitted, and if called before this, or after the &lt;a href=&quot;#worker_threads_event_exit&quot;&gt;&lt;code&gt;'exit'&lt;/code&gt; event&lt;/a&gt;, then all properties have the value of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">ワーカーのイベントループ使用率は、&lt;a href=&quot;#worker_threads_event_online&quot;&gt; &lt;code&gt;'online'&lt;/code&gt; イベントが&lt;/a&gt;発行された後にのみ使用できます。この前、または&lt;a href=&quot;#worker_threads_event_exit&quot;&gt; &lt;code&gt;'exit'&lt;/code&gt; イベントの&lt;/a&gt;後に呼び出された場合、すべてのプロパティの値は &lt;code&gt;0&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="fb9c6769a7d3ab77d5a98be612a050c6ff5aadba" translate="yes" xml:space="preserve">
          <source>The event type identifier.</source>
          <target state="translated">イベントタイプの識別子。</target>
        </trans-unit>
        <trans-unit id="39ad37d81334859393b41e8367f9744e17ae1e88" translate="yes" xml:space="preserve">
          <source>The example below shows how to load a C++ Addon, named &lt;code&gt;local.node&lt;/code&gt;, that exports a &lt;code&gt;foo&lt;/code&gt; function. All the symbols are loaded before the call returns, by passing the &lt;code&gt;RTLD_NOW&lt;/code&gt; constant. In this example the constant is assumed to be available.</source>
          <target state="translated">以下の例は、 &lt;code&gt;foo&lt;/code&gt; 関数をエクスポートする &lt;code&gt;local.node&lt;/code&gt; という名前のC ++アドオンをロードする方法を示しています。 &lt;code&gt;RTLD_NOW&lt;/code&gt; 定数を渡すことにより、呼び出しが戻る前にすべてのシンボルがロードされます。この例では、定数が使用可能であると想定されています。</target>
        </trans-unit>
        <trans-unit id="d8dbce94f12021debc1c57fcb99388c2187b7fdc" translate="yes" xml:space="preserve">
          <source>The example below shows how to load a C++ Addon, named as &lt;code&gt;binding&lt;/code&gt;, that exports a &lt;code&gt;foo&lt;/code&gt; function. All the symbols will be loaded before the call returns, by passing the &lt;code&gt;RTLD_NOW&lt;/code&gt; constant. In this example the constant is assumed to be available.</source>
          <target state="translated">次の例は、 &lt;code&gt;foo&lt;/code&gt; 関数をエクスポートする &lt;code&gt;binding&lt;/code&gt; という名前のC ++アドオンをロードする方法を示しています。 &lt;code&gt;RTLD_NOW&lt;/code&gt; 定数を渡すことにより、呼び出しが戻る前にすべてのシンボルがロードされます。この例では、定数は使用可能であると想定されています。</target>
        </trans-unit>
        <trans-unit id="c629104a0ddee7a4876950fb0838db38bc7275bd" translate="yes" xml:space="preserve">
          <source>The examples given below are drastically simplified to show the basic concept. Using &lt;code&gt;zlib&lt;/code&gt; encoding can be expensive, and the results ought to be cached. See &lt;a href=&quot;#zlib_memory_usage_tuning&quot;&gt;Memory Usage Tuning&lt;/a&gt; for more information on the speed/memory/compression tradeoffs involved in &lt;code&gt;zlib&lt;/code&gt; usage.</source>
          <target state="translated">以下の例は、基本的な概念を示すために大幅に簡略化されています。 &lt;code&gt;zlib&lt;/code&gt; エンコーディングを使用するとコストが高くなる可能性があり、結果をキャッシュする必要があります。 &lt;code&gt;zlib&lt;/code&gt; の使用に関連する速度/メモリ/圧縮のトレードオフの詳細については、&lt;a href=&quot;#zlib_memory_usage_tuning&quot;&gt;メモリ使用のチューニング&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5575b8f8a9c590e3c21cd3dade2f49debfcd8d72" translate="yes" xml:space="preserve">
          <source>The examples given below are drastically simplified to show the basic concept. Using &lt;code&gt;zlib&lt;/code&gt; encoding can be expensive, and the results ought to be cached. See &lt;a href=&quot;#zlib_memory_usage_tuning&quot;&gt;Memory usage tuning&lt;/a&gt; for more information on the speed/memory/compression tradeoffs involved in &lt;code&gt;zlib&lt;/code&gt; usage.</source>
          <target state="translated">以下の例は、基本的な概念を示すために大幅に簡略化されています。 &lt;code&gt;zlib&lt;/code&gt; エンコーディングの使用はコストがかかる可能性があり、結果をキャッシュする必要があります。 &lt;code&gt;zlib&lt;/code&gt; の使用に伴う速度/メモリ/圧縮のトレードオフの詳細については、&lt;a href=&quot;#zlib_memory_usage_tuning&quot;&gt;メモリ使用量の調整&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a02969c11adc17ab381092c83b421d05b836fe5" translate="yes" xml:space="preserve">
          <source>The exclusive flag &lt;code&gt;'x'&lt;/code&gt; (&lt;code&gt;O_EXCL&lt;/code&gt; flag in &lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt;&lt;code&gt;open(2)&lt;/code&gt;&lt;/a&gt;) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using &lt;code&gt;O_EXCL&lt;/code&gt; returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems.</source>
          <target state="translated">排他フラグ &lt;code&gt;'x'&lt;/code&gt; （&lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt; &lt;code&gt;open(2)&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;O_EXCL&lt;/code&gt; フラグ）により、パスがすでに存在する場合、操作はエラーを返します。POSIXでは、パスがシンボリックリンクの場合、リンクが存在しないパスへのリンクであっても、 &lt;code&gt;O_EXCL&lt;/code&gt; を使用するとエラーが返されます。排他フラグは、ネットワークファイルシステムでは機能しない場合があります。</target>
        </trans-unit>
        <trans-unit id="642427622751275891701914a8d55f1bd6738f2f" translate="yes" xml:space="preserve">
          <source>The exclusive flag &lt;code&gt;'x'&lt;/code&gt; (&lt;code&gt;O_EXCL&lt;/code&gt; flag in &lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt;&lt;code&gt;open(2)&lt;/code&gt;&lt;/a&gt;) ensures that path is newly created. On POSIX systems, path is considered to exist even if it is a symlink to a non-existent file. The exclusive flag may or may not work with network file systems.</source>
          <target state="translated">排他フラグ &lt;code&gt;'x'&lt;/code&gt; （&lt;a href=&quot;http://man7.org/linux/man-pages/man2/open.2.html&quot;&gt; &lt;code&gt;open(2)&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;O_EXCL&lt;/code&gt; フラグ）は、パスが新しく作成されることを保証します。POSIXシステムでは、存在しないファイルへのシンボリックリンクであっても、パスは存在すると見なされます。排他フラグは、ネットワークファイルシステムで機能する場合と機能しない場合があります。</target>
        </trans-unit>
        <trans-unit id="84db6d1725ebf721b5be4ce2a0e896ae584a4910" translate="yes" xml:space="preserve">
          <source>The expected value that was passed to &lt;code&gt;Atomics.wait()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Atomics.wait()&lt;/code&gt; に渡された期待値</target>
        </trans-unit>
        <trans-unit id="39bbdf4c3e7fea261fc7e7c33e5454ba3d0485df" translate="yes" xml:space="preserve">
          <source>The extended &lt;code&gt;CONNECT&lt;/code&gt; protocol</source>
          <target state="translated">拡張 &lt;code&gt;CONNECT&lt;/code&gt; プロトコル</target>
        </trans-unit>
        <trans-unit id="b02d8d59f7dcd362b8e23494013d0b87d175689b" translate="yes" xml:space="preserve">
          <source>The fact that the event is triggered before adding the listener has a subtle but important side effect: any &lt;em&gt;additional&lt;/em&gt; listeners registered to the same &lt;code&gt;name&lt;/code&gt;&lt;em&gt;within&lt;/em&gt; the &lt;code&gt;'newListener'&lt;/code&gt; callback are inserted &lt;em&gt;before&lt;/em&gt; the listener that is in the process of being added.</source>
          <target state="translated">イベントリスナーを追加する前にトリガされたという事実は、微妙だが重要な副作用があります任意&lt;em&gt;の追加&lt;/em&gt;同じに登録されたリスナー &lt;code&gt;name&lt;/code&gt; &lt;em&gt;内の&lt;/em&gt; &lt;code&gt;'newListener'&lt;/code&gt; コールバックが挿入される&lt;em&gt;前に&lt;/em&gt;添加されたプロセスであるリスナー。</target>
        </trans-unit>
        <trans-unit id="f991ef69223e9cd0846243129d8f311818fe9174" translate="yes" xml:space="preserve">
          <source>The fact that the event is triggered before adding the listener has a subtle but important side effect: any &lt;em&gt;additional&lt;/em&gt; listeners registered to the same &lt;code&gt;name&lt;/code&gt;&lt;em&gt;within&lt;/em&gt; the &lt;code&gt;'newListener'&lt;/code&gt; callback will be inserted &lt;em&gt;before&lt;/em&gt; the listener that is in the process of being added.</source>
          <target state="translated">イベントは、リスナーを追加する前にトリガされたという事実は微妙ですが、重要な副作用があります任意の&lt;em&gt;追加&lt;/em&gt;同じに登録されたリスナー &lt;code&gt;name&lt;/code&gt; &lt;em&gt;の中に&lt;/em&gt; &lt;code&gt;'newListener'&lt;/code&gt; コールバックが挿入される&lt;em&gt;前に&lt;/em&gt;追加されているプロセスであるリスナー。</target>
        </trans-unit>
        <trans-unit id="bfc04f1dd675259f60dc351def2e3631809ce7e9" translate="yes" xml:space="preserve">
          <source>The features from this module are not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">このモジュールの機能は、&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="69fdb52ee7bf92e5c2c30672f1adae8ad19f542a" translate="yes" xml:space="preserve">
          <source>The fields here correspond to:</source>
          <target state="translated">ここのフィールドは対応しています。</target>
        </trans-unit>
        <trans-unit id="8b30dc798ad1553d8e1e5095ee227a809cf1116b" translate="yes" xml:space="preserve">
          <source>The file descriptor is not closed when the stream is closed, so it will need to be closed manually once it is no longer needed. Using the same file descriptor concurrently for multiple streams is not supported and may result in data loss. Re-using a file descriptor after a stream has finished is supported.</source>
          <target state="translated">ファイル記述子は、ストリームが閉じられても閉じられないため、不要になったら手動で閉じる必要があります。複数のストリームに対して同じファイル記述子を同時に使用することはサポートされておらず、データが失われる可能性があります。ストリーム終了後にファイル記述子を再利用することはサポートされています。</target>
        </trans-unit>
        <trans-unit id="f1abbadaf33a23ece5a12d7f75c8be515f57a15f" translate="yes" xml:space="preserve">
          <source>The file descriptor or &lt;code&gt;FileHandle&lt;/code&gt; is not closed when the stream is closed, so it will need to be closed manually once it is no longer needed. Using the same file descriptor concurrently for multiple streams is not supported and may result in data loss. Re-using a file descriptor after a stream has finished is supported.</source>
          <target state="translated">ストリームが閉じられてもファイル記述子または &lt;code&gt;FileHandle&lt;/code&gt; は閉じられないため、不要になったら手動で閉じる必要があります。複数のストリームに対して同じファイル記述子を同時に使用することはサポートされておらず、データが失われる可能性があります。ストリームの終了後にファイル記述子を再利用することがサポートされています。</target>
        </trans-unit>
        <trans-unit id="bddc936e8d4ebc433f25d1e3e819e94434bf989d" translate="yes" xml:space="preserve">
          <source>The file name of the current module. This is the current module file's absolute path with symlinks resolved.</source>
          <target state="translated">現在のモジュールのファイル名。これは、シンボリックリンクを解決した現在のモジュールファイルの絶対パスです。</target>
        </trans-unit>
        <trans-unit id="3fd9d87a037c6b1d7d288a9cff4723a9a82e17eb" translate="yes" xml:space="preserve">
          <source>The file name that this &lt;code&gt;fs.Dirent&lt;/code&gt; object refers to. The type of this value is determined by the &lt;code&gt;options.encoding&lt;/code&gt; passed to &lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt;&lt;code&gt;fs.readdir()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt;&lt;code&gt;fs.readdirSync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この &lt;code&gt;fs.Dirent&lt;/code&gt; オブジェクトが参照するファイル名。この値のタイプは、&lt;a href=&quot;#fs_fs_readdir_path_options_callback&quot;&gt; &lt;code&gt;fs.readdir()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#fs_fs_readdirsync_path_options&quot;&gt; &lt;code&gt;fs.readdirSync()&lt;/code&gt; に&lt;/a&gt;渡される &lt;code&gt;options.encoding&lt;/code&gt; によって決定されます。</target>
        </trans-unit>
        <trans-unit id="f23216cb82acb6c74c0ecdccb12ab70a12515fb7" translate="yes" xml:space="preserve">
          <source>The file system block size for i/o operations.</source>
          <target state="translated">i/o操作のためのファイルシステムのブロックサイズ。</target>
        </trans-unit>
        <trans-unit id="a5d9badf2e81e7c2a4a71547744b59260512c87b" translate="yes" xml:space="preserve">
          <source>The file system specific &quot;Inode&quot; number for the file.</source>
          <target state="translated">ファイルのファイルシステム固有の &quot;Inode &quot;番号。</target>
        </trans-unit>
        <trans-unit id="38282d780c53ef35ec0b5aca732b15db81ca69b2" translate="yes" xml:space="preserve">
          <source>The filename extension of the compiled Addon binary is &lt;code&gt;.node&lt;/code&gt; (as opposed to &lt;code&gt;.dll&lt;/code&gt; or &lt;code&gt;.so&lt;/code&gt;). The &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; function is written to look for files with the &lt;code&gt;.node&lt;/code&gt; file extension and initialize those as dynamically-linked libraries.</source>
          <target state="translated">コンパイルされたアドオンバイナリのファイル名拡張子は（ &lt;code&gt;.dll&lt;/code&gt; または &lt;code&gt;.so&lt;/code&gt; ではなく） &lt;code&gt;.node&lt;/code&gt; です。&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;関数を使用してファイルを探すために書かれ &lt;code&gt;.node&lt;/code&gt; ファイルのファイル拡張子と動的にリンクされたライブラリとしてそれらを初期化します。</target>
        </trans-unit>
        <trans-unit id="1664aedb5346d42f9b92cb48d45ae0c26bef6c68" translate="yes" xml:space="preserve">
          <source>The filename extension of the compiled addon binary is &lt;code&gt;.node&lt;/code&gt; (as opposed to &lt;code&gt;.dll&lt;/code&gt; or &lt;code&gt;.so&lt;/code&gt;). The &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; function is written to look for files with the &lt;code&gt;.node&lt;/code&gt; file extension and initialize those as dynamically-linked libraries.</source>
          <target state="translated">コンパイルされたアドオンバイナリのファイル名拡張子は &lt;code&gt;.node&lt;/code&gt; です（ &lt;code&gt;.dll&lt;/code&gt; や &lt;code&gt;.so&lt;/code&gt; ではありません）。&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; &lt;/a&gt;関数を使用してファイルを探すために書かれ &lt;code&gt;.node&lt;/code&gt; ファイルのファイル拡張子と動的にリンクされたライブラリとしてそれらを初期化します。</target>
        </trans-unit>
        <trans-unit id="0e3696df745998c394540bd5159546abfa00f86f" translate="yes" xml:space="preserve">
          <source>The final argument, &lt;code&gt;callback&lt;/code&gt;, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an &lt;code&gt;Error&lt;/code&gt; object. The following examples check if &lt;code&gt;package.json&lt;/code&gt; exists, and if it is readable or writable.</source>
          <target state="translated">最後の引数 &lt;code&gt;callback&lt;/code&gt; は、起こり得るエラー引数で呼び出されるコールバック関数です。アクセシビリティチェックのいずれかが失敗した場合、エラー引数は &lt;code&gt;Error&lt;/code&gt; オブジェクトになります。次の例では、 &lt;code&gt;package.json&lt;/code&gt; が存在するかどうか、およびそれが読み取り可能または書き込み可能かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="b69404bc9d9b3943fef57e2e4d39a1da0b6e93fb" translate="yes" xml:space="preserve">
          <source>The first 3 are enabled by default. The last 2 &lt;code&gt;CCM&lt;/code&gt;-based suites are supported by TLSv1.3 because they may be more performant on constrained systems, but they are not enabled by default since they offer less security.</source>
          <target state="translated">最初の3つはデフォルトで有効になっています。最後の2つの &lt;code&gt;CCM&lt;/code&gt; ベースのスイートは、制約のあるシステムではパフォーマンスが高いため、TLSv1.3でサポートされていますが、セキュリティが低いため、デフォルトでは有効になっていません。</target>
        </trans-unit>
        <trans-unit id="eecb84f910ff00f50424043534c4fedcb7d3584f" translate="yes" xml:space="preserve">
          <source>The first approach is to do any appropriate cleanup and then return so that execution will return to JavaScript. As part of the transition back to JavaScript the exception will be thrown at the point in the JavaScript code where the native method was invoked. The behavior of most N-API calls is unspecified while an exception is pending, and many will simply return &lt;code&gt;napi_pending_exception&lt;/code&gt;, so it is important to do as little as possible and then return to JavaScript where the exception can be handled.</source>
          <target state="translated">最初のアプローチは、適切なクリーンアップを行ってから戻ることで、実行はJavaScriptに戻ります。JavaScriptへの移行の一部として、ネイティブメソッドが呼び出されたJavaScriptコードのポイントで例外がスローされます。ほとんどのN-API呼び出しの動作は、例外が保留されている間は指定されていません。多くの場合、単に &lt;code&gt;napi_pending_exception&lt;/code&gt; を返すため、できる限り実行せずに、例外を処理できるJavaScriptに戻ることが重要です。</target>
        </trans-unit>
        <trans-unit id="9975264b8c1d3d07fcf324339ca4eca04f1bf13f" translate="yes" xml:space="preserve">
          <source>The first approach is to do any appropriate cleanup and then return so that execution will return to JavaScript. As part of the transition back to JavaScript, the exception will be thrown at the point in the JavaScript code where the native method was invoked. The behavior of most N-API calls is unspecified while an exception is pending, and many will simply return &lt;code&gt;napi_pending_exception&lt;/code&gt;, so do as little as possible and then return to JavaScript where the exception can be handled.</source>
          <target state="translated">最初のアプローチは、適切なクリーンアップを実行してから戻ることで、実行がJavaScriptに戻るようにします。JavaScriptへの移行の一環として、JavaScriptコード内でネイティブメソッドが呼び出された時点で例外がスローされます。ほとんどのN-API呼び出しの動作は、例外が保留されている間は指定されておらず、多くは単に &lt;code&gt;napi_pending_exception&lt;/code&gt; を返すため、できるだけ少なくしてから、例外を処理できるJavaScriptに戻ります。</target>
        </trans-unit>
        <trans-unit id="d041cbb052d7c2b2b104b2d97cb23e5d9864bfd1" translate="yes" xml:space="preserve">
          <source>The first argument can no longer be a function.</source>
          <target state="translated">第一引数はもはや関数にはできません。</target>
        </trans-unit>
        <trans-unit id="d4131d0e1bf8ecd08927d70b2ef4d08ae37a98e8" translate="yes" xml:space="preserve">
          <source>The first is to create a &lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file in the root of the folder, which specifies a &lt;code&gt;main&lt;/code&gt; module. An example &lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file might look like this:</source>
          <target state="translated">1つ目は、 &lt;code&gt;main&lt;/code&gt; モジュールを指定するフォルダーのルートに&lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルを作成することです。&lt;a href=&quot;packages#packages_node_js_package_json_field_definitions&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルの例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e9b9dd847bdc22570d18de4f8cc1566987987006" translate="yes" xml:space="preserve">
          <source>The first is to create a &lt;code&gt;package.json&lt;/code&gt; file in the root of the folder, which specifies a &lt;code&gt;main&lt;/code&gt; module. An example &lt;code&gt;package.json&lt;/code&gt; file might look like this:</source>
          <target state="translated">1つは、 &lt;code&gt;main&lt;/code&gt; モジュールを指定する &lt;code&gt;package.json&lt;/code&gt; ファイルをフォルダーのルートに作成することです。 &lt;code&gt;package.json&lt;/code&gt; ファイルの例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="cd86eed1c6f92f82cdfb073363d1441e834fdf86" translate="yes" xml:space="preserve">
          <source>The first line is formatted as &lt;code&gt;&amp;lt;error class name&amp;gt;: &amp;lt;error message&amp;gt;&lt;/code&gt;, and is followed by a series of stack frames (each line beginning with &quot;at &quot;). Each frame describes a call site within the code that lead to the error being generated. V8 attempts to display a name for each function (by variable name, function name, or object method name), but occasionally it will not be able to find a suitable name. If V8 cannot determine a name for the function, only location information will be displayed for that frame. Otherwise, the determined function name will be displayed with location information appended in parentheses.</source>
          <target state="translated">最初の行は &lt;code&gt;&amp;lt;error class name&amp;gt;: &amp;lt;error message&amp;gt;&lt;/code&gt; 形式であり、その後に一連のスタックフレームが続きます（各行は &quot;at&quot;で始まります）。各フレームは、生成されるエラーの原因となるコード内の呼び出しサイトを記述します。V8は各関数の名前を（変数名、関数名、またはオブジェクトメソッド名によって）表示しようとしますが、適切な名前を見つけることができない場合があります。V8が関数の名前を判別できない場合、そのフレームの位置情報のみが表示されます。それ以外の場合は、決定された関数名が括弧で囲まれた位置情報とともに表示されます。</target>
        </trans-unit>
        <trans-unit id="7b4773296c484e1d27c6ce74cc0e57a635c095e4" translate="yes" xml:space="preserve">
          <source>The first line of the trace will be prefixed with &lt;code&gt;${myObject.name}: ${myObject.message}&lt;/code&gt;.</source>
          <target state="translated">トレースの最初の行の前には、 &lt;code&gt;${myObject.name}: ${myObject.message}&lt;/code&gt; が付けられます。</target>
        </trans-unit>
        <trans-unit id="33cac6cb57b6f6d96c270fc2be9cf5074edd981e" translate="yes" xml:space="preserve">
          <source>The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.</source>
          <target state="translated">最初のもの (Windows 以外のすべてのプラットフォームではデフォルトのもの)はラウンドロビン方式で、マスタープロセスがポートをリッスンし、新しい接続を受け入れて、ワーカープロセスにラウンドロビン方式で分配します。</target>
        </trans-unit>
        <trans-unit id="5cef4ec1b404b4a3f370637689e111e01d2b492c" translate="yes" xml:space="preserve">
          <source>The first time &lt;a href=&quot;#http2_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, it will send the buffered header information and the first chunk of the body to the client. The second time &lt;a href=&quot;#http2_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.</source>
          <target state="translated">初めて&lt;a href=&quot;#http2_response_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;response.write()&lt;/code&gt; &lt;/a&gt;が呼び出されると、バッファリングされたヘッダー情報と本文の最初のチャンクがクライアントに送信されます。2回目に&lt;a href=&quot;#http2_response_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;response.write()&lt;/code&gt; &lt;/a&gt;が呼び出されると、Node.jsはデータがストリーミングされると想定し、新しいデータを個別に送信します。つまり、応答は本文の最初のチャンクまでバッファリングされます。</target>
        </trans-unit>
        <trans-unit id="db4ea19562ddcbdd7307dfffa568d95f6cb64f82" translate="yes" xml:space="preserve">
          <source>The first time &lt;a href=&quot;#http_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, it will send the buffered header information and the first chunk of the body to the client. The second time &lt;a href=&quot;#http_response_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;response.write()&lt;/code&gt;&lt;/a&gt; is called, Node.js assumes data will be streamed, and sends the new data separately. That is, the response is buffered up to the first chunk of the body.</source>
          <target state="translated">初めて&lt;a href=&quot;#http_response_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;response.write()&lt;/code&gt; &lt;/a&gt;が呼び出されると、バッファリングされたヘッダー情報と本文の最初のチャンクがクライアントに送信されます。2回目に&lt;a href=&quot;#http_response_write_chunk_encoding_callback&quot;&gt; &lt;code&gt;response.write()&lt;/code&gt; &lt;/a&gt;が呼び出されると、Node.jsはデータがストリーミングされると想定し、新しいデータを個別に送信します。つまり、応答は本文の最初のチャンクまでバッファリングされます。</target>
        </trans-unit>
        <trans-unit id="f34b18afec776cbbe19b5510ed53febd92bbb0f1" translate="yes" xml:space="preserve">
          <source>The flags below are deprecated in OpenSSL-1.1.0.</source>
          <target state="translated">以下のフラグは OpenSSL-1.1.0 では非推奨です。</target>
        </trans-unit>
        <trans-unit id="15c1bb881c181c5773a41231b4007265b0112578" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;addon.cc&lt;/code&gt; implements &lt;code&gt;AtExit&lt;/code&gt;:</source>
          <target state="translated">次の &lt;code&gt;addon.cc&lt;/code&gt; はAtExitを実装してい &lt;code&gt;AtExit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7f55a97cb3d8b321f6277e62ccc092fc45e56f0" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;addon.cc&lt;/code&gt; uses &lt;code&gt;AddEnvironmentCleanupHook&lt;/code&gt;:</source>
          <target state="translated">次の &lt;code&gt;addon.cc&lt;/code&gt; はAddEnvironmentCleanupHookを使用し &lt;code&gt;AddEnvironmentCleanupHook&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c32c49c908fc409f5d3898e47bc77dd9f1b77a58" translate="yes" xml:space="preserve">
          <source>The following APIs are deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches.</source>
          <target state="translated">以下のAPIは非推奨であり、もはや使用すべきではありません。既存のアプリケーションやモジュールは、代替のアプローチを見つけるために更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3c2789bcf46fd62972318b927e0a8c62d50a658" translate="yes" xml:space="preserve">
          <source>The following additional &lt;code&gt;options&lt;/code&gt; from &lt;a href=&quot;tls#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt; are also accepted: &lt;code&gt;ca&lt;/code&gt;, &lt;code&gt;cert&lt;/code&gt;, &lt;code&gt;ciphers&lt;/code&gt;, &lt;code&gt;clientCertEngine&lt;/code&gt;, &lt;code&gt;crl&lt;/code&gt;, &lt;code&gt;dhparam&lt;/code&gt;, &lt;code&gt;ecdhCurve&lt;/code&gt;, &lt;code&gt;honorCipherOrder&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;passphrase&lt;/code&gt;, &lt;code&gt;pfx&lt;/code&gt;, &lt;code&gt;rejectUnauthorized&lt;/code&gt;, &lt;code&gt;secureOptions&lt;/code&gt;, &lt;code&gt;secureProtocol&lt;/code&gt;, &lt;code&gt;servername&lt;/code&gt;, &lt;code&gt;sessionIdContext&lt;/code&gt;, &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">次の追加 &lt;code&gt;options&lt;/code&gt; から&lt;a href=&quot;tls#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; &lt;/a&gt;も受け入れている： &lt;code&gt;ca&lt;/code&gt; 、 &lt;code&gt;cert&lt;/code&gt; 、 &lt;code&gt;ciphers&lt;/code&gt; 、 &lt;code&gt;clientCertEngine&lt;/code&gt; 、 &lt;code&gt;crl&lt;/code&gt; 、 &lt;code&gt;dhparam&lt;/code&gt; 、 &lt;code&gt;ecdhCurve&lt;/code&gt; 、 &lt;code&gt;honorCipherOrder&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、 &lt;code&gt;passphrase&lt;/code&gt; 、 &lt;code&gt;pfx&lt;/code&gt; 、 &lt;code&gt;rejectUnauthorized&lt;/code&gt; 、 &lt;code&gt;secureOptions&lt;/code&gt; 、 &lt;code&gt;secureProtocol&lt;/code&gt; 、 &lt;code&gt;servername&lt;/code&gt; 、 &lt;code&gt;sessionIdContext&lt;/code&gt; 、 &lt;code&gt;highWaterMark&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f5b7b61227ced1ec217e7db8fa0a09b2666692d" translate="yes" xml:space="preserve">
          <source>The following additional &lt;code&gt;options&lt;/code&gt; from &lt;a href=&quot;tls#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt; are also accepted: &lt;code&gt;ca&lt;/code&gt;, &lt;code&gt;cert&lt;/code&gt;, &lt;code&gt;ciphers&lt;/code&gt;, &lt;code&gt;clientCertEngine&lt;/code&gt;, &lt;code&gt;crl&lt;/code&gt;, &lt;code&gt;dhparam&lt;/code&gt;, &lt;code&gt;ecdhCurve&lt;/code&gt;, &lt;code&gt;honorCipherOrder&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;passphrase&lt;/code&gt;, &lt;code&gt;pfx&lt;/code&gt;, &lt;code&gt;rejectUnauthorized&lt;/code&gt;, &lt;code&gt;secureOptions&lt;/code&gt;, &lt;code&gt;secureProtocol&lt;/code&gt;, &lt;code&gt;servername&lt;/code&gt;, &lt;code&gt;sessionIdContext&lt;/code&gt;.</source>
          <target state="translated">次の追加 &lt;code&gt;options&lt;/code&gt; から&lt;a href=&quot;tls#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; &lt;/a&gt;も受け入れている： &lt;code&gt;ca&lt;/code&gt; 、 &lt;code&gt;cert&lt;/code&gt; 、 &lt;code&gt;ciphers&lt;/code&gt; 、 &lt;code&gt;clientCertEngine&lt;/code&gt; 、 &lt;code&gt;crl&lt;/code&gt; 、 &lt;code&gt;dhparam&lt;/code&gt; 、 &lt;code&gt;ecdhCurve&lt;/code&gt; 、 &lt;code&gt;honorCipherOrder&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、 &lt;code&gt;passphrase&lt;/code&gt; 、 &lt;code&gt;pfx&lt;/code&gt; 、 &lt;code&gt;rejectUnauthorized&lt;/code&gt; 、 &lt;code&gt;secureOptions&lt;/code&gt; 、 &lt;code&gt;secureProtocol&lt;/code&gt; 、 &lt;code&gt;servername&lt;/code&gt; 、 &lt;code&gt;sessionIdContext&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="54447810aa08df7985f4cbfad788a86993e818f3" translate="yes" xml:space="preserve">
          <source>The following additional handling is implemented if the warning &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;'DeprecationWarning'&lt;/code&gt;:</source>
          <target state="translated">警告 &lt;code&gt;type&lt;/code&gt; が &lt;code&gt;'DeprecationWarning'&lt;/code&gt; 場合、次の追加の処理が実装されます。</target>
        </trans-unit>
        <trans-unit id="bb3a1aa21d21866510e3b76e6d72fba491830b4e" translate="yes" xml:space="preserve">
          <source>The following approach is much better:</source>
          <target state="translated">次のような方法の方がはるかに良いです。</target>
        </trans-unit>
        <trans-unit id="827001922af67138a9f878b796dafb9dfb51266f" translate="yes" xml:space="preserve">
          <source>The following can be approximated in N-API using the following snippet:</source>
          <target state="translated">以下のスニペットを使用して、N-APIで近似することができます。</target>
        </trans-unit>
        <trans-unit id="6c1bf4df63aee45fb7eb6ddae692d43e6a0d83f7" translate="yes" xml:space="preserve">
          <source>The following command can be used to show the default cipher suite:</source>
          <target state="translated">以下のコマンドを使用して、デフォルトの暗号スイートを表示することができます。</target>
        </trans-unit>
        <trans-unit id="928dcbed1708cf626131e60e3258e091ed18f8a0" translate="yes" xml:space="preserve">
          <source>The following constants are exported by &lt;code&gt;fs.constants&lt;/code&gt;.</source>
          <target state="translated">次の定数は &lt;code&gt;fs.constants&lt;/code&gt; によってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d371ce6c00fbacd100137d09136575db666e66b9" translate="yes" xml:space="preserve">
          <source>The following constants are exported by &lt;code&gt;os.constants&lt;/code&gt;.</source>
          <target state="translated">次の定数は &lt;code&gt;os.constants&lt;/code&gt; によってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="32173a09a1966787fec1f9f5484ce505ae2ecb50" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の定数は、&lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; &lt;/a&gt;で使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="5687f7198333699b9bae06281375ba0db2ea8a29" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;a href=&quot;#fs_fs_copyfile_src_dest_flags_callback&quot;&gt;&lt;code&gt;fs.copyFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の定数は、&lt;a href=&quot;#fs_fs_copyfile_src_dest_flags_callback&quot;&gt; &lt;code&gt;fs.copyFile()&lt;/code&gt; &lt;/a&gt;で使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="7f2ecac114225df43aafd7dd87bcae5a40db3a25" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;a href=&quot;#fs_fs_copyfile_src_dest_mode_callback&quot;&gt;&lt;code&gt;fs.copyFile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の定数は、&lt;a href=&quot;#fs_fs_copyfile_src_dest_mode_callback&quot;&gt; &lt;code&gt;fs.copyFile()&lt;/code&gt; &lt;/a&gt;で使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="8bbb7a774533a46ec3115e75cb6cca0eb4ea9349" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with &lt;code&gt;fs.open()&lt;/code&gt;.</source>
          <target state="translated">次の定数は、 &lt;code&gt;fs.open()&lt;/code&gt; で使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="c9b567d00bd5272b3f69cb11dcf5ea3f697aec5d" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object's &lt;code&gt;mode&lt;/code&gt; property for determining a file's type.</source>
          <target state="translated">以下の定数は、ファイルのタイプを決定するために&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;mode&lt;/code&gt; プロパティで使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="475faab4f5defb5fe8858da27a2d490930994934" translate="yes" xml:space="preserve">
          <source>The following constants are meant for use with the &lt;a href=&quot;#fs_class_fs_stats&quot;&gt;&lt;code&gt;fs.Stats&lt;/code&gt;&lt;/a&gt; object's &lt;code&gt;mode&lt;/code&gt; property for determining the access permissions for a file.</source>
          <target state="translated">次の定数は、ファイルのアクセス許可を決定するために&lt;a href=&quot;#fs_class_fs_stats&quot;&gt; &lt;code&gt;fs.Stats&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;mode&lt;/code&gt; プロパティで使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="4b2a8743f98da8d480afb21b23ce442ed0d0b3cd" translate="yes" xml:space="preserve">
          <source>The following constants exported by &lt;code&gt;crypto.constants&lt;/code&gt; apply to various uses of the &lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;tls&lt;/code&gt;, and &lt;code&gt;https&lt;/code&gt; modules and are generally specific to OpenSSL.</source>
          <target state="translated">&lt;code&gt;crypto.constants&lt;/code&gt; によってエクスポートされる以下の定数は、 &lt;code&gt;crypto&lt;/code&gt; 、 &lt;code&gt;tls&lt;/code&gt; 、および &lt;code&gt;https&lt;/code&gt; モジュールのさまざまな使用に適用され、一般にOpenSSLに固有です。</target>
        </trans-unit>
        <trans-unit id="2c070956f8d8c7bd727a1124692bb853add47c05" translate="yes" xml:space="preserve">
          <source>The following error codes are specific to the Windows operating system.</source>
          <target state="translated">以下のエラーコードは、Windows オペレーティングシステムに固有のものです。</target>
        </trans-unit>
        <trans-unit id="ae15549ff78e98dd71154b2301ed7ccc1a34836a" translate="yes" xml:space="preserve">
          <source>The following error codes are specific to the Windows operating system:</source>
          <target state="translated">以下のエラーコードは、Windows オペレーティングシステムに固有のものです。</target>
        </trans-unit>
        <trans-unit id="1f786534e0e8250d0d07dce36d39432a2b4b8ad2" translate="yes" xml:space="preserve">
          <source>The following error constants are exported by &lt;code&gt;os.constants.errno&lt;/code&gt;.</source>
          <target state="translated">次のエラー定数は、 &lt;code&gt;os.constants.errno&lt;/code&gt; によってエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="c7031bafd5711766cd57423f21784e69b1a456da" translate="yes" xml:space="preserve">
          <source>The following error constants are exported by &lt;code&gt;os.constants.errno&lt;/code&gt;:</source>
          <target state="translated">次のエラー定数は &lt;code&gt;os.constants.errno&lt;/code&gt; によってエクスポートされます：</target>
        </trans-unit>
        <trans-unit id="f2110b505972117c08409661c9a9f725562e46c5" translate="yes" xml:space="preserve">
          <source>The following example allows loading any file:</source>
          <target state="translated">以下の例では、任意のファイルを読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="ae04eb921f75cede6d98a5138010dd68c1ea5f53" translate="yes" xml:space="preserve">
          <source>The following example compiles and executes code that increments a global variable and sets a new one. These globals are contained in the &lt;code&gt;contextObject&lt;/code&gt;.</source>
          <target state="translated">次の例では、グローバル変数をインクリメントして新しい変数を設定するコードをコンパイルして実行します。これらのグローバルは &lt;code&gt;contextObject&lt;/code&gt; に含まれています。</target>
        </trans-unit>
        <trans-unit id="9dafb35125a9eb3c8fd4054107b4b62a1593755e" translate="yes" xml:space="preserve">
          <source>The following example compiles and executes code that increments a global variable and sets a new one. These globals are contained in the &lt;code&gt;sandbox&lt;/code&gt;.</source>
          <target state="translated">次の例では、グローバル変数をインクリメントして新しい変数を設定するコードをコンパイルして実行します。これらのグローバルは、 &lt;code&gt;sandbox&lt;/code&gt; 含まれています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
