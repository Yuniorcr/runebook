<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="95fbb303d7117ac0cc3ddd8c21e8aa6323d739de" translate="yes" xml:space="preserve">
          <source>The numeric identifier of the device containing the file.</source>
          <target state="translated">ファイルを格納しているデバイスの数値識別子。</target>
        </trans-unit>
        <trans-unit id="5bcfd36761a1de493eeb09cab611d6b7581ca7fe" translate="yes" xml:space="preserve">
          <source>The numeric representation of the local port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">ローカルポートの数値表現。たとえば、 &lt;code&gt;80&lt;/code&gt; または &lt;code&gt;21&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="042883a8dd9e1f35f72278a7a8626cb40d0978ea" translate="yes" xml:space="preserve">
          <source>The numeric representation of the remote port. For example, &lt;code&gt;80&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.</source>
          <target state="translated">リモートポートの数値表現。たとえば、 &lt;code&gt;80&lt;/code&gt; または &lt;code&gt;21&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b62dd787bc222e91a4a0ed4bf6ba392d5a6fb778" translate="yes" xml:space="preserve">
          <source>The numeric stream identifier of this &lt;code&gt;Http2Stream&lt;/code&gt; instance. Set to &lt;code&gt;undefined&lt;/code&gt; if the stream identifier has not yet been assigned.</source>
          <target state="translated">この &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスの数値ストリーム識別子。ストリーム識別子がまだ割り当てられていない場合は、 &lt;code&gt;undefined&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="aa8f383702a5ceae99ce4b389c67ad72755ba3f7" translate="yes" xml:space="preserve">
          <source>The numeric user identifier of the user that owns the file (POSIX).</source>
          <target state="translated">ファイルを所有しているユーザーの数値的なユーザー識別子(POSIX)。</target>
        </trans-unit>
        <trans-unit id="5cb1b68058d104a308062e11d73d1e40f866b4ff" translate="yes" xml:space="preserve">
          <source>The object no longer accidentally exposes native C++ bindings.</source>
          <target state="translated">オブジェクトが誤ってネイティブ C++バインディングを公開しなくなりました。</target>
        </trans-unit>
        <trans-unit id="9383b10ddf25c0ce6d97c93198a1bf00d5916ca1" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;querystring.parse()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;querystring.parse()&lt;/code&gt; メソッドによって返されるオブジェクトは、JavaScript &lt;code&gt;Object&lt;/code&gt; からプロトタイプを継承&lt;em&gt;しません&lt;/em&gt;。つまり、 &lt;code&gt;obj.toString()&lt;/code&gt; 、 &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; などの一般的な &lt;code&gt;Object&lt;/code&gt; メソッドは定義されて&lt;em&gt;おらず、機能しません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be819bdae9121513238d1f9a8e195544167c627a" translate="yes" xml:space="preserve">
          <source>The object returned by the &lt;code&gt;response.getHeaders()&lt;/code&gt; method &lt;em&gt;does not&lt;/em&gt; prototypically inherit from the JavaScript &lt;code&gt;Object&lt;/code&gt;. This means that typical &lt;code&gt;Object&lt;/code&gt; methods such as &lt;code&gt;obj.toString()&lt;/code&gt;, &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt;, and others are not defined and &lt;em&gt;will not work&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;response.getHeaders()&lt;/code&gt; メソッドによって返されるオブジェクトは、JavaScript &lt;code&gt;Object&lt;/code&gt; からプロトタイプを継承&lt;em&gt;しません&lt;/em&gt;。つまり、 &lt;code&gt;obj.toString()&lt;/code&gt; 、 &lt;code&gt;obj.hasOwnProperty()&lt;/code&gt; などの一般的な &lt;code&gt;Object&lt;/code&gt; メソッドは定義されて&lt;em&gt;おらず、機能しません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ebb203e4256fb19d4ef99599ca9b09d60bab677" translate="yes" xml:space="preserve">
          <source>The object that acts as the namespace for all W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt; related functionality. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla Developer Network&lt;/a&gt; for usage and compatibility.</source>
          <target state="translated">W3C &lt;a href=&quot;https://webassembly.org&quot;&gt;WebAssembly&lt;/a&gt;関連のすべての機能の名前空間として機能するオブジェクト。使用方法と互換性については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;Mozilla Developer Network&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b541c74cc18aaa314b7c832f7d31793b35808668" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">ここにリストされているオブジェクトは、Node.jsに固有のものです。JavaScript言語自体の一部である&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;組み込みオブジェクト&lt;/a&gt;があり、これらもグローバルにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a5307f8ae4e7b8daeba7438d364931e5ea281096" translate="yes" xml:space="preserve">
          <source>The objects listed here are specific to Node.js. There are a number of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;built-in objects&lt;/a&gt; that are part of the JavaScript language itself, which are also globally accessible.</source>
          <target state="translated">ここにリストされているオブジェクトは、Node.jsに固有です。JavaScript言語自体の一部である多数の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&quot;&gt;組み込みオブジェクト&lt;/a&gt;があり、これらもグローバルにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="499501b23d67779dbab01a6a26119c1c65a4262b" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">経由で設定することができない労働者の唯一の属性 &lt;code&gt;.setupMaster()&lt;/code&gt; である &lt;code&gt;env&lt;/code&gt; に渡された&lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dc78f21c4e5c2db90b51724d6195216ddadfbc62" translate="yes" xml:space="preserve">
          <source>The only attribute of a worker that cannot be set via &lt;code&gt;.setupMaster()&lt;/code&gt; is the &lt;code&gt;env&lt;/code&gt; passed to &lt;code&gt;.fork()&lt;/code&gt;.</source>
          <target state="translated">経由で設定することができない労働者の唯一の属性 &lt;code&gt;.setupMaster()&lt;/code&gt; である &lt;code&gt;env&lt;/code&gt; に渡された &lt;code&gt;.fork()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c18120e27e4c6e292bcb271ec4406958e025cda8" translate="yes" xml:space="preserve">
          <source>The only way to know for sure that the datagram has been sent is by using a &lt;code&gt;callback&lt;/code&gt;. If an error occurs and a &lt;code&gt;callback&lt;/code&gt; is given, the error will be passed as the first argument to the &lt;code&gt;callback&lt;/code&gt;. If a &lt;code&gt;callback&lt;/code&gt; is not given, the error is emitted as an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;socket&lt;/code&gt; object.</source>
          <target state="translated">データグラムが送信されたことを確認する唯一の方法は、 &lt;code&gt;callback&lt;/code&gt; を使用することです。エラーが発生して &lt;code&gt;callback&lt;/code&gt; が渡された場合、エラーは最初の引数として &lt;code&gt;callback&lt;/code&gt; に渡されます。 &lt;code&gt;callback&lt;/code&gt; が指定されていない場合、エラーは &lt;code&gt;socket&lt;/code&gt; オブジェクトの &lt;code&gt;'error'&lt;/code&gt; イベントとして発行されます。</target>
        </trans-unit>
        <trans-unit id="7647e89cb4fdb8b632085740a5be4e8b940e567a" translate="yes" xml:space="preserve">
          <source>The operating system CPU architecture for which the Node.js binary was compiled. Possible values are: &lt;code&gt;'arm'&lt;/code&gt;, &lt;code&gt;'arm64'&lt;/code&gt;, &lt;code&gt;'ia32'&lt;/code&gt;, &lt;code&gt;'mips'&lt;/code&gt;,&lt;code&gt;'mipsel'&lt;/code&gt;, &lt;code&gt;'ppc'&lt;/code&gt;, &lt;code&gt;'ppc64'&lt;/code&gt;, &lt;code&gt;'s390'&lt;/code&gt;, &lt;code&gt;'s390x'&lt;/code&gt;, &lt;code&gt;'x32'&lt;/code&gt;, and &lt;code&gt;'x64'&lt;/code&gt;.</source>
          <target state="translated">Node.jsバイナリがコンパイルされたオペレーティングシステムのCPUアーキテクチャ。可能な値は、 &lt;code&gt;'arm'&lt;/code&gt; 、 &lt;code&gt;'arm64'&lt;/code&gt; 、 &lt;code&gt;'ia32'&lt;/code&gt; 、 &lt;code&gt;'mips'&lt;/code&gt; 、 &lt;code&gt;'mipsel'&lt;/code&gt; 、 &lt;code&gt;'ppc'&lt;/code&gt; 、 &lt;code&gt;'ppc64'&lt;/code&gt; 、 &lt;code&gt;'s390'&lt;/code&gt; 、 &lt;code&gt;'s390x'&lt;/code&gt; 、 &lt;code&gt;'x32'&lt;/code&gt; 、および &lt;code&gt;'x64'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="576168f18bf6a9c771bad8bf0ef707c41bacf3dc" translate="yes" xml:space="preserve">
          <source>The operating system-specific end-of-line marker.</source>
          <target state="translated">オペレーティングシステム固有の行末マーカー。</target>
        </trans-unit>
        <trans-unit id="7ad3e7e145c0e7190f2d6920ff4570771b7cd38d" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;a href=&quot;#domain_domain_add_emitter&quot;&gt;&lt;code&gt;domain.add(emitter)&lt;/code&gt;&lt;/a&gt;. Removes domain handling from the specified emitter.</source>
          <target state="translated">&lt;a href=&quot;#domain_domain_add_emitter&quot;&gt; &lt;code&gt;domain.add(emitter)&lt;/code&gt; &lt;/a&gt;の反対です。指定されたエミッターからドメイン処理を削除します。</target>
        </trans-unit>
        <trans-unit id="caab31fb22afb4b240d3935cb5134e9f4f33d038" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;byteOffset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; arguments specify a memory range within the &lt;code&gt;arrayBuffer&lt;/code&gt; that will be shared by the &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;byteOffset&lt;/code&gt; および &lt;code&gt;length&lt;/code&gt; 引数は、 &lt;code&gt;Buffer&lt;/code&gt; によって共有される &lt;code&gt;arrayBuffer&lt;/code&gt; 内のメモリ範囲を指定します。</target>
        </trans-unit>
        <trans-unit id="f4cce0bb94cb39d36b419142e4a7c61c1067e805" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; argument can be used to replace the logging function with a different function that doesn't have any initialization or unnecessary wrapping.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; 引数を使用して、ロギング関数を、初期化や不要な折り返しがない別の関数に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="8b96aca949c2dfad90f34208e151d92d5c4e3782" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; is a function that is invoked after the message is sent but before the child may have received it. The function is called with a single argument: &lt;code&gt;null&lt;/code&gt; on success, or an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object on failure.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; は、メッセージが送信された後、子が受信する前に呼び出される関数です。関数は単一の引数で呼び出され &lt;code&gt;null&lt;/code&gt; 。成功した場合はnull、失敗した場合は&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="0f4bda021a4230b873e23262d38a21e96fd815c9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; パラメータは、&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;イベントの1回限りのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="4f75dfbd1ccb81dcb45cc7787f70bf228fab77d5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be added as a one-time listener for the &lt;a href=&quot;#net_event_timeout&quot;&gt;&lt;code&gt;'timeout'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; パラメーターは、&lt;a href=&quot;#net_event_timeout&quot;&gt; &lt;code&gt;'timeout'&lt;/code&gt; &lt;/a&gt;イベントの1回限りのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="7a388a3c8ef1c6891f4bc45f8cf75c4ca428eb38" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out - this may not be immediately.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; パラメータは、データが最終的に書き出されたときに実行されます-これはすぐには行われない場合があります。</target>
        </trans-unit>
        <trans-unit id="3f398da22b9a537a80ef95f6587773ea48b8d1eb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;callback&lt;/code&gt; parameter will be executed when the data is finally written out, which may not be immediately.</source>
          <target state="translated">オプションの &lt;code&gt;callback&lt;/code&gt; パラメータは、データが最終的に書き出されたときに実行されますが、すぐには実行されない場合があります。</target>
        </trans-unit>
        <trans-unit id="4848a2877fc4fdda35fdaabacb12c2f613d9bff6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;constructorOpt&lt;/code&gt; argument accepts a function. If given, all frames above &lt;code&gt;constructorOpt&lt;/code&gt;, including &lt;code&gt;constructorOpt&lt;/code&gt;, will be omitted from the generated stack trace.</source>
          <target state="translated">オプションの &lt;code&gt;constructorOpt&lt;/code&gt; 引数は関数を受け入れます。与えられた場合は、上記のすべてのフレーム &lt;code&gt;constructorOpt&lt;/code&gt; 含め、 &lt;code&gt;constructorOpt&lt;/code&gt; は、生成されたスタックトレースから除外されます。</target>
        </trans-unit>
        <trans-unit id="1ad586a6a1c5973d95690ca8fdc184bb4c8b9ce9" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;endMark&lt;/code&gt; argument must identify any &lt;em&gt;existing&lt;/em&gt;&lt;code&gt;PerformanceMark&lt;/code&gt; in the Performance Timeline or any of the timestamp properties provided by the &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; class. &lt;code&gt;endMark&lt;/code&gt; will be &lt;code&gt;performance.now()&lt;/code&gt; if no parameter is passed, otherwise if the named &lt;code&gt;endMark&lt;/code&gt; does not exist, an error will be thrown.</source>
          <target state="translated">オプションの &lt;code&gt;endMark&lt;/code&gt; 引数は、パフォーマンスタイムライン内の&lt;em&gt;既存の&lt;/em&gt; &lt;code&gt;PerformanceMark&lt;/code&gt; 、または &lt;code&gt;PerformanceNodeTiming&lt;/code&gt; クラスによって提供されるタイムスタンププロパティを識別する必要があります。 &lt;code&gt;endMark&lt;/code&gt; はなります &lt;code&gt;performance.now()&lt;/code&gt; そう名付けられた場合、パラメータが渡されない場合 &lt;code&gt;endMark&lt;/code&gt; が存在しない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="ebd4f60ba39ba1f7450156da76a6991f33b60f2b" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;flags&lt;/code&gt; argument uses &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; by default. The &lt;code&gt;flags&lt;/code&gt; is a bit field taking one of or a mix of the following flags (defined in &lt;code&gt;crypto.constants&lt;/code&gt;):</source>
          <target state="translated">オプションの &lt;code&gt;flags&lt;/code&gt; 引数は、デフォルトで &lt;code&gt;ENGINE_METHOD_ALL&lt;/code&gt; を使用します。 &lt;code&gt;flags&lt;/code&gt; ビットフィールド撮影一つまたは（で定義された次のフラグの組み合わせである &lt;code&gt;crypto.constants&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cc9f65c30553afbd1b4d82c484f88aa304441ee3" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given fd. If the &lt;code&gt;statCheck&lt;/code&gt; function is provided, the &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; method will perform an &lt;code&gt;fs.fstat()&lt;/code&gt; call to collect details on the provided file descriptor.</source>
          <target state="translated">オプションの &lt;code&gt;options.statCheck&lt;/code&gt; 関数を指定して、指定されたfdの &lt;code&gt;fs.Stat&lt;/code&gt; の詳細に基づいて、ユーザーコードに追加のコンテンツヘッダーを設定する機会を与えることができます。場合 &lt;code&gt;statCheck&lt;/code&gt; の機能が提供され、 &lt;code&gt;http2stream.respondWithFD()&lt;/code&gt; メソッドが実行されます &lt;code&gt;fs.fstat()&lt;/code&gt; 提供されたファイルディスクリプタのコレクト詳細に電話を。</target>
        </trans-unit>
        <trans-unit id="b8ca99509b25a6ab5ee70308bafe39a1b71f3d06" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options.statCheck&lt;/code&gt; function may be specified to give user code an opportunity to set additional content headers based on the &lt;code&gt;fs.Stat&lt;/code&gt; details of the given file:</source>
          <target state="translated">オプションの &lt;code&gt;options.statCheck&lt;/code&gt; 関数を指定して、ユーザーコードに、指定されたファイルの &lt;code&gt;fs.Stat&lt;/code&gt; の詳細に基づいて追加のコンテンツヘッダーを設定する機会を与えることができます。</target>
        </trans-unit>
        <trans-unit id="30b397372595487a1e26df98289fea04b5b45c5e" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、またはコールバックに渡されるファイル名に使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるファイル名は &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="72091fa8c95571c209adee473c28da126c9baae6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、または返されるファイル名に使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるファイル名は &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="1a3104057b5c38fd9e4bdac45532ce193dd2ed26" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the filenames. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the filenames returned will be passed as &lt;code&gt;Buffer&lt;/code&gt; objects.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、またはファイル名に使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるファイル名は &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="3fb2522fc8cd80845e2a3e2842ca468e7ddb1fc0" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、またはコールバックに渡されるリンクパスに使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるリンクパスは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="bc5b6bb3218a1bc4526850c82e33474df9261f0f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the link path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the link path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、または返されるリンクパスに使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるリンクパスは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="4eb7ec41225ab0c4c453df7c72a1c959224af868" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path passed to the callback. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、またはコールバックに渡されるパスに使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるパスは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="cbb0aa1d9d2894d118c49c7e7622ffb29c1d85fd" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path returned. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、または返されるパスに使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるパスは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="e5a60b46a69ed6136f940f53c21b10d9760164ad" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use for the path. If the &lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;'buffer'&lt;/code&gt;, the path returned will be passed as a &lt;code&gt;Buffer&lt;/code&gt; object.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、またはパスに使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;'buffer'&lt;/code&gt; に設定されている場合、返されるパスは &lt;code&gt;Buffer&lt;/code&gt; オブジェクトとして渡されます。</target>
        </trans-unit>
        <trans-unit id="e9b1ce0f8bd5bffe9b99b0262eb3a242c5e14124" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be a string specifying an encoding, or an object with an &lt;code&gt;encoding&lt;/code&gt; property specifying the character encoding to use.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、エンコーディングを指定する文字列、または使用する文字エンコーディングを指定する &lt;code&gt;encoding&lt;/code&gt; プロパティを持つオブジェクトを指定できます。</target>
        </trans-unit>
        <trans-unit id="aadca4acdf449aec7197e7dc17a104a173c63dbb" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数は、 &lt;code&gt;mode&lt;/code&gt; （許可ビットとスティッキービット）を指定する整数、または親ディレクトリを作成するかどうかを示す &lt;code&gt;mode&lt;/code&gt; プロパティと &lt;code&gt;recursive&lt;/code&gt; プロパティを持つオブジェクトにすることができます。 &lt;code&gt;path&lt;/code&gt; が存在するディレクトリであるときに &lt;code&gt;fs.mkdir()&lt;/code&gt; を呼び出すと、 &lt;code&gt;recursive&lt;/code&gt; がfalseの場合にのみエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c72f65bfd27c29868388c460c4fee4a3c00dfdde" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying &lt;code&gt;mode&lt;/code&gt; (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent directories should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数は、 &lt;code&gt;mode&lt;/code&gt; （許可ビットとスティッキービット）を指定する整数、または親ディレクトリを作成するかどうかを示す &lt;code&gt;mode&lt;/code&gt; プロパティと &lt;code&gt;recursive&lt;/code&gt; プロパティを持つオブジェクトにすることができます。 &lt;code&gt;path&lt;/code&gt; が存在するディレクトリであるときに &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; を呼び出すと、 &lt;code&gt;recursive&lt;/code&gt; がfalseの場合にのみ拒否されます。</target>
        </trans-unit>
        <trans-unit id="c29432448e6ca0758f3927cc455e95393816652f" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fs.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in an error only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、モードを指定する整数（パーミッションとスティッキービット）、または親フォルダーを作成するかどうかを示す &lt;code&gt;mode&lt;/code&gt; プロパティと &lt;code&gt;recursive&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;path&lt;/code&gt; が存在するディレクトリであるときに &lt;code&gt;fs.mkdir()&lt;/code&gt; を呼び出すと、 &lt;code&gt;recursive&lt;/code&gt; がfalseの場合にのみエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fe44a69d963c148c4578bad831ce5ae5a6ff0b73" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument can be an integer specifying mode (permission and sticky bits), or an object with a &lt;code&gt;mode&lt;/code&gt; property and a &lt;code&gt;recursive&lt;/code&gt; property indicating whether parent folders should be created. Calling &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; when &lt;code&gt;path&lt;/code&gt; is a directory that exists results in a rejection only when &lt;code&gt;recursive&lt;/code&gt; is false.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数には、モードを指定する整数（パーミッションとスティッキービット）、または親フォルダーを作成するかどうかを示す &lt;code&gt;mode&lt;/code&gt; プロパティと &lt;code&gt;recursive&lt;/code&gt; プロパティを持つオブジェクトを指定できます。 &lt;code&gt;path&lt;/code&gt; が存在するディレクトリであるときに &lt;code&gt;fsPromises.mkdir()&lt;/code&gt; を呼び出すと、 &lt;code&gt;recursive&lt;/code&gt; がfalseの場合にのみ拒否が発生します。</target>
        </trans-unit>
        <trans-unit id="8df1775ddf99a0878d244350e8f9f93ec0727826" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; argument controls stream behavior. For XOF hash functions such as &lt;code&gt;'shake256'&lt;/code&gt;, the &lt;code&gt;outputLength&lt;/code&gt; option can be used to specify the desired output length in bytes.</source>
          <target state="translated">オプションの &lt;code&gt;options&lt;/code&gt; 引数は、ストリームの動作を制御します。 &lt;code&gt;'shake256'&lt;/code&gt; などのXOFハッシュ関数の場合、 &lt;code&gt;outputLength&lt;/code&gt; オプションを使用して、目的の出力長をバイト単位で指定できます。</target>
        </trans-unit>
        <trans-unit id="261827080f081a265d9518c196a9756632d4c999" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;sendHandle&lt;/code&gt; argument that may be passed to &lt;code&gt;subprocess.send()&lt;/code&gt; is for passing a TCP server or socket object to the child process. The child will receive the object as the second argument passed to the callback function registered on the &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Any data that is received and buffered in the socket will not be sent to the child.</source>
          <target state="translated">&lt;code&gt;subprocess.send()&lt;/code&gt; に渡すことができるオプションの &lt;code&gt;sendHandle&lt;/code&gt; 引数は、TCPサーバーまたはソケットオブジェクトを子プロセスに渡すためのものです。子は、&lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt;イベントに登録されたコールバック関数に渡される2番目の引数としてオブジェクトを受け取ります。ソケットで受信およびバッファリングされたデータは、子には送信されません。</target>
        </trans-unit>
        <trans-unit id="21776c2a95a91147668e079bc279b294e52498a6" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;size&lt;/code&gt; argument specifies a specific number of bytes to read. If &lt;code&gt;size&lt;/code&gt; bytes are not available to be read, &lt;code&gt;null&lt;/code&gt; will be returned &lt;em&gt;unless&lt;/em&gt; the stream has ended, in which case all of the data remaining in the internal buffer will be returned.</source>
          <target state="translated">オプションの &lt;code&gt;size&lt;/code&gt; 引数は、読み取る特定のバイト数を指定します。場合 &lt;code&gt;size&lt;/code&gt; バイトを読み取ることができませんされ、 &lt;code&gt;null&lt;/code&gt; が返される&lt;em&gt;場合を除き&lt;/em&gt;、ストリームが終了した内部バッファに残っているすべてのデータが返される場合には、。</target>
        </trans-unit>
        <trans-unit id="7dcc1ff991ba74f3e2341e794b5bd2a7209b9bd5" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;targetStart&lt;/code&gt;, &lt;code&gt;targetEnd&lt;/code&gt;, &lt;code&gt;sourceStart&lt;/code&gt;, and &lt;code&gt;sourceEnd&lt;/code&gt; arguments can be used to limit the comparison to specific ranges within &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt; respectively.</source>
          <target state="translated">オプションの &lt;code&gt;targetStart&lt;/code&gt; 、 &lt;code&gt;targetEnd&lt;/code&gt; 、 &lt;code&gt;sourceStart&lt;/code&gt; 、および &lt;code&gt;sourceEnd&lt;/code&gt; 引数を使用して、比較をそれぞれ &lt;code&gt;target&lt;/code&gt; および &lt;code&gt;buf&lt;/code&gt; 内の特定の範囲に制限できます。</target>
        </trans-unit>
        <trans-unit id="de8fd304a1c7493a27d13d17ca2a7665914145e8" translate="yes" xml:space="preserve">
          <source>The optional returned reference is initially a weak reference, meaning it has a reference count of 0. Typically this reference count would be incremented temporarily during async operations that require the instance to remain valid.</source>
          <target state="translated">オプションで返される参照は、最初は弱い参照、つまり参照カウントが 0 であることを意味します。 通常、この参照カウントは、インスタンスの有効性を維持する必要がある非同期操作の間、一時的にインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="2bf5d71ef6bb11c383df71dca6fed4c4d1e8880f" translate="yes" xml:space="preserve">
          <source>The output of running this script is:</source>
          <target state="translated">このスクリプトを実行したときの出力は</target>
        </trans-unit>
        <trans-unit id="45989adee27623dee9b58303d643cfed64b9aa3e" translate="yes" xml:space="preserve">
          <source>The owner may read, write and execute the file.</source>
          <target state="translated">オーナーは、ファイルを読み書きして実行することができます。</target>
        </trans-unit>
        <trans-unit id="705e766de26998db30b9b74945357c8783455fd0" translate="yes" xml:space="preserve">
          <source>The package scope applies not only to initial entry points (&lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt;) but also to files referenced by &lt;code&gt;import&lt;/code&gt; statements and &lt;code&gt;import()&lt;/code&gt; expressions.</source>
          <target state="translated">パッケージスコープは、初期エントリポイント（ &lt;code&gt;node --experimental-modules my-app.js&lt;/code&gt; ）だけでなく、 &lt;code&gt;import&lt;/code&gt; ステートメントおよび &lt;code&gt;import()&lt;/code&gt; 式によって参照されるファイルにも適用されます。</target>
        </trans-unit>
        <trans-unit id="f7564c3f9eff583a58e8d21cd99ee8d14688a3bf" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object can be a string now.</source>
          <target state="translated">渡された &lt;code&gt;options&lt;/code&gt; オブジェクトは文字列にすることができます。</target>
        </trans-unit>
        <trans-unit id="b59339c89766317598c7665c33ea20dd610e99de" translate="yes" xml:space="preserve">
          <source>The passed &lt;code&gt;options&lt;/code&gt; object will never be modified.</source>
          <target state="translated">渡された &lt;code&gt;options&lt;/code&gt; オブジェクトは変更されません。</target>
        </trans-unit>
        <trans-unit id="fb2d39c4340f5b4b6c986cba1d575aa90762c3be" translate="yes" xml:space="preserve">
          <source>The path for the main script of a worker is neither an absolute path nor a relative path starting with &lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt;.</source>
          <target state="translated">ワーカーのメインスクリプトのパスは、絶対パスでも、。 &lt;code&gt;./&lt;/code&gt; または &lt;code&gt;../&lt;/code&gt; で始まる相対パスでもありません。</target>
        </trans-unit>
        <trans-unit id="3a68f2ecb4bd3f38847a7eeccce766303a522feb" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is reading from as specified in the first argument to &lt;code&gt;fs.createReadStream()&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;readStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;readStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fs.createReadStream()&lt;/code&gt; の最初の引数で指定された、ストリームの読み取り元のファイルへのパス。 &lt;code&gt;path&lt;/code&gt; が文字列として渡される場合、 &lt;code&gt;readStream.path&lt;/code&gt; は文字列になります。 &lt;code&gt;path&lt;/code&gt; が &lt;code&gt;Buffer&lt;/code&gt; として渡される場合、 &lt;code&gt;readStream.path&lt;/code&gt; は &lt;code&gt;Buffer&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e3bb0d95641a2afd52bb195881c3abca28b19aa5" translate="yes" xml:space="preserve">
          <source>The path to the file the stream is writing to as specified in the first argument to &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is passed as a string, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a string. If &lt;code&gt;path&lt;/code&gt; is passed as a &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;writeStream.path&lt;/code&gt; will be a &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt; &lt;code&gt;fs.createWriteStream()&lt;/code&gt; の&lt;/a&gt;最初の引数で指定された、ストリームが書き込んでいるファイルへのパス。 &lt;code&gt;path&lt;/code&gt; が文字列として渡される場合、 &lt;code&gt;writeStream.path&lt;/code&gt; は文字列になります。 &lt;code&gt;path&lt;/code&gt; が &lt;code&gt;Buffer&lt;/code&gt; として渡される場合、 &lt;code&gt;writeStream.path&lt;/code&gt; は &lt;code&gt;Buffer&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="5303b9030ddafd814201239d3425172e5de09971" translate="yes" xml:space="preserve">
          <source>The pathname used for the main script of a worker has an unknown file extension.</source>
          <target state="translated">ワーカーのメインスクリプトに使用されるパス名の拡張子が不明です。</target>
        </trans-unit>
        <trans-unit id="842995cd8000d0efb4e4627b63f283405c9de9df" translate="yes" xml:space="preserve">
          <source>The policy manifest will be used to enforce constraints on code loaded by Node.js.</source>
          <target state="translated">ポリシーマニフェストは、Node.jsによってロードされたコードに対する制約を強制するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f37ced12d39d64c1acd89371245e9dd2d45e0ac9" translate="yes" xml:space="preserve">
          <source>The port used by Node.js's debugger when enabled.</source>
          <target state="translated">Node.jsのデバッガが有効になっているときに使用するポート。</target>
        </trans-unit>
        <trans-unit id="dec6b7a7b66dcadd093ce17f9ff0d5581242e4cb" translate="yes" xml:space="preserve">
          <source>The port used by the Node.js debugger when enabled.</source>
          <target state="translated">Node.js デバッガが有効になっているときに使用するポート。</target>
        </trans-unit>
        <trans-unit id="e95b5aab3ab3fba91f054dea6c27fd9fd3c7181c" translate="yes" xml:space="preserve">
          <source>The port value can be an empty string in which case the port depends on the protocol/scheme:</source>
          <target state="translated">ポートの値は空の文字列にすることができますが、その場合、ポートはプロトコル/スキームに依存します。</target>
        </trans-unit>
        <trans-unit id="35240f5bbe9b687669eb3a21a6d605183b197a00" translate="yes" xml:space="preserve">
          <source>The port value may be a number or a string containing a number in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt; (inclusive). Setting the value to the default port of the &lt;code&gt;URL&lt;/code&gt; objects given &lt;code&gt;protocol&lt;/code&gt; will result in the &lt;code&gt;port&lt;/code&gt; value becoming the empty string (&lt;code&gt;''&lt;/code&gt;).</source>
          <target state="translated">ポートの値は、数値または範囲の数を含む文字列であってもよい &lt;code&gt;0&lt;/code&gt; へ &lt;code&gt;65535&lt;/code&gt; （包括的）。指定された &lt;code&gt;protocol&lt;/code&gt; の &lt;code&gt;URL&lt;/code&gt; オブジェクトのデフォルトポートに値を設定すると、 &lt;code&gt;port&lt;/code&gt; 値が空の文字列（ &lt;code&gt;''&lt;/code&gt; ）になります。</target>
        </trans-unit>
        <trans-unit id="516b367bb725dc118632a0063079984861a1c67f" translate="yes" xml:space="preserve">
          <source>The preceding module supports named imports in ES modules:</source>
          <target state="translated">前述のモジュールは、ES モジュールで名前付きインポートをサポートしています。</target>
        </trans-unit>
        <trans-unit id="f5e1752bb85ccb2347cdba3385d98029d5ceffb3" translate="yes" xml:space="preserve">
          <source>The predefined color codes are: &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt; and &lt;code&gt;yellow&lt;/code&gt;. There are also &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt; and &lt;code&gt;inverse&lt;/code&gt; codes.</source>
          <target state="translated">定義済みのカラーコードは、 &lt;code&gt;white&lt;/code&gt; 、 &lt;code&gt;grey&lt;/code&gt; 、 &lt;code&gt;black&lt;/code&gt; 、 &lt;code&gt;blue&lt;/code&gt; 、 &lt;code&gt;cyan&lt;/code&gt; 、 &lt;code&gt;green&lt;/code&gt; 、 &lt;code&gt;magenta&lt;/code&gt; 、 &lt;code&gt;red&lt;/code&gt; 、 &lt;code&gt;yellow&lt;/code&gt; です。 &lt;code&gt;bold&lt;/code&gt; 、 &lt;code&gt;italic&lt;/code&gt; 、 &lt;code&gt;underline&lt;/code&gt; 、 &lt;code&gt;inverse&lt;/code&gt; コードもあります。</target>
        </trans-unit>
        <trans-unit id="a8feec306734bdd21e98aea495e525ccece43f81" translate="yes" xml:space="preserve">
          <source>The previously undocumented &lt;code&gt;timers.active()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If re-referencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_ref&quot;&gt;&lt;code&gt;timeout.ref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">以前は文書化されてい &lt;code&gt;timers.active()&lt;/code&gt; は非推奨です。代わりに、公式に文書化されている&lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; を&lt;/a&gt;使用してください。タイムアウトの再参照が必要な場合は、Node.js 10以降、&lt;a href=&quot;timers#timers_timeout_ref&quot;&gt; &lt;code&gt;timeout.ref()&lt;/code&gt; &lt;/a&gt;を使用してもパフォーマンスに影響を与えることはありません。</target>
        </trans-unit>
        <trans-unit id="8fa2c8b129174c0fc077a4918a3e4b0112acc742" translate="yes" xml:space="preserve">
          <source>The previously undocumented and &quot;private&quot; &lt;code&gt;timers._unrefActive()&lt;/code&gt; is deprecated. Please use the publicly documented &lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt;&lt;code&gt;timeout.refresh()&lt;/code&gt;&lt;/a&gt; instead. If unreferencing the timeout is necessary, &lt;a href=&quot;timers#timers_timeout_unref&quot;&gt;&lt;code&gt;timeout.unref()&lt;/code&gt;&lt;/a&gt; can be used with no performance impact since Node.js 10.</source>
          <target state="translated">以前はドキュメント化されてい &lt;code&gt;timers._unrefActive()&lt;/code&gt; 「プライベート」のtimers._unrefActive（）は非推奨になりました。代わりに、公式に文書化されている&lt;a href=&quot;timers#timers_timeout_refresh&quot;&gt; &lt;code&gt;timeout.refresh()&lt;/code&gt; を&lt;/a&gt;使用してください。タイムアウトの参照を&lt;a href=&quot;timers#timers_timeout_unref&quot;&gt; &lt;code&gt;timeout.unref()&lt;/code&gt; &lt;/a&gt;する必要がある場合は、Node.js 10以降、timeout.unref（）を使用してもパフォーマンスに影響を与えることはありません。</target>
        </trans-unit>
        <trans-unit id="c7e811ac507e899887eadb3b761ab472eb68ab19" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to accommodate a situation in which several small chunks are written to the stream in rapid succession. Instead of immediately forwarding them to the underlying destination, &lt;code&gt;writable.cork()&lt;/code&gt; buffers all the chunks until &lt;code&gt;writable.uncork()&lt;/code&gt; is called, which will pass them all to &lt;code&gt;writable._writev()&lt;/code&gt;, if present. This prevents a head-of-line blocking situation where data is being buffered while waiting for the first small chunk to be processed. However, use of &lt;code&gt;writable.cork()&lt;/code&gt; without implementing &lt;code&gt;writable._writev()&lt;/code&gt; may have an adverse effect on throughput.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; の主な目的は、いくつかの小さなチャンクが連続してストリームに書き込まれる状況に対応することです。 &lt;code&gt;writable.cork()&lt;/code&gt; は、それらを基になる宛先にすぐに転送する代わりに、 &lt;code&gt;writable.uncork()&lt;/code&gt; が呼び出されるまですべてのチャンクをバッファリングします。これにより、すべてのチャンクがwritable._writev（）に渡されます &lt;code&gt;writable._writev()&lt;/code&gt; 存在する場合）。これにより、最初の小さなチャンクが処理されるのを待っている間にデータがバッファリングされるという行頭ブロッキング状況が回避されます。しかしながら、使用 &lt;code&gt;writable.cork()&lt;/code&gt; 実装することなく &lt;code&gt;writable._writev()&lt;/code&gt; は、スループットに悪影響を及ぼす可能性があります。</target>
        </trans-unit>
        <trans-unit id="301d6f86720b7caebae0c21957576c82619859d7" translate="yes" xml:space="preserve">
          <source>The primary intent of &lt;code&gt;writable.cork()&lt;/code&gt; is to avoid a situation where writing many small chunks of data to a stream do not cause a backup in the internal buffer that would have an adverse impact on performance. In such situations, implementations that implement the &lt;code&gt;writable._writev()&lt;/code&gt; method can perform buffered writes in a more optimized manner.</source>
          <target state="translated">&lt;code&gt;writable.cork()&lt;/code&gt; の主な目的は、多数の小さなデータチャンクをストリームに書き込んでも、パフォーマンスに悪影響を与える可能性のあるバックアップが内部バッファーに発生しないようにすることです。このような状況では、 &lt;code&gt;writable._writev()&lt;/code&gt; メソッドを実装する実装は、より最適化された方法でバッファリングされた書き込みを実行できます。</target>
        </trans-unit>
        <trans-unit id="64985acfc6f181ff488fc6817834027a19e84721" translate="yes" xml:space="preserve">
          <source>The process could not be killed, or</source>
          <target state="translated">プロセスを終了させることができなかったり</target>
        </trans-unit>
        <trans-unit id="e873e5b18616841f05efdd386c89f6ba201225db" translate="yes" xml:space="preserve">
          <source>The process could not be spawned, or</source>
          <target state="translated">プロセスがスポーンされなかったか、または</target>
        </trans-unit>
        <trans-unit id="4bfa64f515a1b0181d935c05f6c69ffff6fbfd05" translate="yes" xml:space="preserve">
          <source>The process object. See the &lt;a href=&quot;process#process_process&quot;&gt;&lt;code&gt;process&lt;/code&gt; object&lt;/a&gt; section.</source>
          <target state="translated">プロセスオブジェクト。&lt;a href=&quot;process#process_process&quot;&gt; &lt;code&gt;process&lt;/code&gt; オブジェクトの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="19a87c186d9fc90f05f38ed4cba9e32faeadbae9" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt;. This corresponds to &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-14&lt;/code&gt; on all other platforms.</source>
          <target state="translated">上記のプロセスのスケジューリング優先順位 &lt;code&gt;PRIORITY_ABOVE_NORMAL&lt;/code&gt; 以下 &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; 。これは、Windowsでは &lt;code&gt;HIGH_PRIORITY_CLASS&lt;/code&gt; に対応し、他のすべてのプラットフォームでは &lt;code&gt;-14&lt;/code&gt; の nice値です。</target>
        </trans-unit>
        <trans-unit id="a8b5e718648dcd24e1f04e65ec6ef9126189b362" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_LOW&lt;/code&gt; and below &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt;. This corresponds to &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;10&lt;/code&gt; on all other platforms.</source>
          <target state="translated">上記のプロセスのスケジューリング優先順位 &lt;code&gt;PRIORITY_LOW&lt;/code&gt; 以下 &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 。これは、Windowsでは &lt;code&gt;BELOW_NORMAL_PRIORITY_CLASS&lt;/code&gt; に相当し、他のすべてのプラットフォームでは &lt;code&gt;10&lt;/code&gt; の nice値です。</target>
        </trans-unit>
        <trans-unit id="07f606e78cf90aabba4bf4bb1ef36128cea4c14f" translate="yes" xml:space="preserve">
          <source>The process scheduling priority above &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; and below &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;. This corresponds to &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; on Windows, and a nice value of &lt;code&gt;-7&lt;/code&gt; on all other platforms.</source>
          <target state="translated">上記のプロセスのスケジューリング優先順位 &lt;code&gt;PRIORITY_NORMAL&lt;/code&gt; 以下 &lt;code&gt;PRIORITY_HIGH&lt;/code&gt; 。これは、Windowsでは &lt;code&gt;ABOVE_NORMAL_PRIORITY_CLASS&lt;/code&gt; に対応し、他のすべてのプラットフォームでは &lt;code&gt;-7&lt;/code&gt; の nice値です。</target>
        </trans-unit>
        <trans-unit id="681821ab96576ebe60cbcdd765ffba967ab60b31" translate="yes" xml:space="preserve">
          <source>The properties available on the assigned network address object include:</source>
          <target state="translated">割り当てられたネットワーク・アドレス・オブジェクトで使用できるプロパティには、次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="15089f6598bc6c72817c26575069415cd75bbb85" translate="yes" xml:space="preserve">
          <source>The properties included on each object include:</source>
          <target state="translated">各オブジェクトに含まれるプロパティには、次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="32cbb03653d9c062d765fd9dedb500b4ce391d11" translate="yes" xml:space="preserve">
          <source>The protocol identifier (&lt;code&gt;'h2'&lt;/code&gt; in the examples) may be any valid &lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPN Protocol ID&lt;/a&gt;.</source>
          <target state="translated">プロトコル識別子（例では &lt;code&gt;'h2'&lt;/code&gt; ）は、任意の有効な&lt;a href=&quot;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids&quot;&gt;ALPNプロトコルID&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="682dd72da7ec2fc2dd775aaa85fc979fb00717b6" translate="yes" xml:space="preserve">
          <source>The provided &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt; of the context are made visible through the Inspector API.</source>
          <target state="translated">提供されたコンテキストの &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;origin&lt;/code&gt; は、Inspector APIを通じて表示されます。</target>
        </trans-unit>
        <trans-unit id="0c874b3f599c2f388ee9adaf7c51cc16c6ca9ab2" translate="yes" xml:space="preserve">
          <source>The provided address family is not understood by the Node.js API.</source>
          <target state="translated">提供されたアドレスファミリはNode.js APIでは理解されません。</target>
        </trans-unit>
        <trans-unit id="0d5a7141a0afa24f729a66e2573aa9e735d8af9e" translate="yes" xml:space="preserve">
          <source>The range (&lt;code&gt;max - min&lt;/code&gt;) must be less than 2&lt;sup&gt;48&lt;/sup&gt;. &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; must be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;safe integers&lt;/a&gt;.</source>
          <target state="translated">範囲（ &lt;code&gt;max - min&lt;/code&gt; ）が2未満でなければならない&lt;sup&gt;48&lt;/sup&gt;。 &lt;code&gt;min&lt;/code&gt; と &lt;code&gt;max&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger&quot;&gt;安全な整数で&lt;/a&gt;なければなりません。</target>
        </trans-unit>
        <trans-unit id="a6ce53307f0479c8ec03dffd96128613abfed0ef" translate="yes" xml:space="preserve">
          <source>The raw headers as they were received are retained in the &lt;code&gt;rawHeaders&lt;/code&gt; property, which is an array of &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt;. For example, the previous message header object might have a &lt;code&gt;rawHeaders&lt;/code&gt; list like the following:</source>
          <target state="translated">受信した生のヘッダーは、 &lt;code&gt;[key, value, key2, value2, ...]&lt;/code&gt; 配列である &lt;code&gt;rawHeaders&lt;/code&gt; プロパティに保持されます。たとえば、前のメッセージヘッダーオブジェクトには、次のような &lt;code&gt;rawHeaders&lt;/code&gt; リストがある場合があります。</target>
        </trans-unit>
        <trans-unit id="83f581d673868d237fedae3567c8e5ca1905d79d" translate="yes" xml:space="preserve">
          <source>The raw request/response headers list exactly as they were received.</source>
          <target state="translated">生のリクエスト/レスポンスヘッダは、受信したものと同じようにリストアップされます。</target>
        </trans-unit>
        <trans-unit id="b985d4474679d7d8436722ff0ebeff67e3eb82aa" translate="yes" xml:space="preserve">
          <source>The raw request/response trailer keys and values exactly as they were received. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">未処理のリクエスト/レスポンストレーラーのキーと値。 &lt;code&gt;'end'&lt;/code&gt; イベントでのみ入力されます。</target>
        </trans-unit>
        <trans-unit id="5d9dff5cd0c71c07633537409b66578e6b80505c" translate="yes" xml:space="preserve">
          <source>The read-only path of this directory as was provided to &lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt;&lt;code&gt;fs.opendir()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt;&lt;code&gt;fs.opendirSync()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt;&lt;code&gt;fsPromises.opendir()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#fs_fs_opendir_path_options_callback&quot;&gt; &lt;code&gt;fs.opendir()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#fs_fs_opendirsync_path_options&quot;&gt; &lt;code&gt;fs.opendirSync()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#fs_fspromises_opendir_path_options&quot;&gt; &lt;code&gt;fsPromises.opendir()&lt;/code&gt; &lt;/a&gt;に提供されたこのディレクトリの読み取り専用パス。</target>
        </trans-unit>
        <trans-unit id="34df59cd5882c36bd6c67c750c332e85dde52821" translate="yes" xml:space="preserve">
          <source>The reading will begin at the current position. For example, if the file already had &lt;code&gt;'Hello World&lt;/code&gt;' and six bytes are read with the file descriptor, the call to &lt;code&gt;fs.readFile()&lt;/code&gt; with the same file descriptor, would give &lt;code&gt;'World'&lt;/code&gt;, rather than &lt;code&gt;'Hello World'&lt;/code&gt;.</source>
          <target state="translated">現在位置から読み取りを開始します。たとえば、ファイルにすでに &lt;code&gt;'Hello World&lt;/code&gt; 」があり、ファイル記述子で6バイトが読み取られる &lt;code&gt;fs.readFile()&lt;/code&gt; 、同じファイル記述子でfs.readFile（）を呼び出すと、 &lt;code&gt;'Hello World'&lt;/code&gt; ではなく &lt;code&gt;'World'&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4a5389685a663870c4323e668ef2d2e417308f1a" translate="yes" xml:space="preserve">
          <source>The reason for this error handling behavior is that these callbacks are running at potentially volatile points in an object's lifetime, for example during class construction and destruction. Because of this, it is deemed necessary to bring down the process quickly in order to prevent an unintentional abort in the future. This is subject to change in the future if a comprehensive analysis is performed to ensure an exception can follow the normal control flow without unintentional side effects.</source>
          <target state="translated">このエラー処理の動作の理由は、これらのコールバックがオブジェクトのライフサイクルの中で、例えばクラスの構築や破壊の間など、潜在的に揮発性のあるポイントで実行されているからです。このため、将来の意図しないアボートを防ぐために、プロセスを素早く停止させる必要があると考えられています。これは、意図しない副作用なしに例外が通常の制御フローに従うことができるように包括的な分析が行われた場合、将来的に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7e95038a9c64315188042fc9eab57e4956f07d72" translate="yes" xml:space="preserve">
          <source>The reason this is problematic is because writes to &lt;code&gt;process.stdout&lt;/code&gt; in Node.js are sometimes &lt;em&gt;asynchronous&lt;/em&gt; and may occur over multiple ticks of the Node.js event loop. Calling &lt;code&gt;process.exit()&lt;/code&gt;, however, forces the process to exit &lt;em&gt;before&lt;/em&gt; those additional writes to &lt;code&gt;stdout&lt;/code&gt; can be performed.</source>
          <target state="translated">これが問題となる理由は、Node.jsの &lt;code&gt;process.stdout&lt;/code&gt; への書き込みが&lt;em&gt;非同期&lt;/em&gt;であり、Node.jsイベントループの複数のティックで発生する可能性があるためです。ただし、 &lt;code&gt;process.exit()&lt;/code&gt; を呼び出すと、 &lt;code&gt;stdout&lt;/code&gt; への追加の書き込みを実行する&lt;em&gt;前に&lt;/em&gt;プロセスが強制的に終了します。</target>
        </trans-unit>
        <trans-unit id="882e863942bbfdb2c275d570776a56f3cb7eed13" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows.</source>
          <target state="translated">再帰オプションはmacOSとWindowsでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="0d5da93cf7c47ffd68713f07c2a2d70da3b7c85f" translate="yes" xml:space="preserve">
          <source>The recursive option is only supported on macOS and Windows. An &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; exception will be thrown when the option is used on a platform that does not support it.</source>
          <target state="translated">再帰オプションは、macOSとWindowsでのみサポートされています。 &lt;code&gt;ERR_FEATURE_UNAVAILABLE_ON_PLATFORM&lt;/code&gt; のオプションは、それをサポートしていないプラットフォーム上で使用されている場合は例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="96411a8d35be2600a6fa3cb907c90d1ed0ea5379" translate="yes" xml:space="preserve">
          <source>The reference must be freed once it is no longer needed.</source>
          <target state="translated">参照は不要になったら解放しなければなりません。</target>
        </trans-unit>
        <trans-unit id="6cc848b653807d38e0a4cbaec6143db941486dc6" translate="yes" xml:space="preserve">
          <source>The registered event listeners is synchronously invoked in the order they were registered.</source>
          <target state="translated">登録されたイベントリスナーは、登録された順に同期的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6da8026af719b1ab6b55c12dbb1cb53a3be6fd63" translate="yes" xml:space="preserve">
          <source>The report is intended for development, test and production use, to capture and preserve information for problem determination. It includes JavaScript and native stack traces, heap statistics, platform information, resource usage etc. With the report option enabled, diagnostic reports can be triggered on unhandled exceptions, fatal errors and user signals, in addition to triggering programmatically through API calls.</source>
          <target state="translated">このレポートは、開発、テスト、本番環境での使用を目的としており、問題を判断するための情報を取得し、保存することを目的としています。これには、JavaScript とネイティブスタックのトレース、ヒープ統計、プラットフォーム情報、リソースの使用状況などが含まれます。レポートオプションを有効にすると、API呼び出しによるプログラム的なトリガーに加えて、未処理の例外、致命的なエラー、ユーザーシグナルで診断レポートをトリガーすることができます。</target>
        </trans-unit>
        <trans-unit id="02f104dfa09be26fcee1ec1287c9793da8d202a7" translate="yes" xml:space="preserve">
          <source>The request authority pseudo header field. It can also be accessed via &lt;code&gt;req.headers[':authority']&lt;/code&gt;.</source>
          <target state="translated">要求権限の疑似ヘッダーフィールド。 &lt;code&gt;req.headers[':authority']&lt;/code&gt; からもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f8cc8ec77eab284c5b1d9a9e8bee79b0a4e96211" translate="yes" xml:space="preserve">
          <source>The request inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">リクエストは&lt;a href=&quot;stream#stream_stream&quot;&gt;Streamを&lt;/a&gt;継承し、さらに以下を実装します。</target>
        </trans-unit>
        <trans-unit id="d2f1ed5fc05d92917b60ebf9072ab11385b53fc9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">文字列としてのリクエストメソッド。読み取り専用。例： &lt;code&gt;'GET'&lt;/code&gt; 、 &lt;code&gt;'DELETE'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b820a151f8af96f9a8410852cebe4b9fce928d9" translate="yes" xml:space="preserve">
          <source>The request method as a string. Read-only. Examples: &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'DELETE'&lt;/code&gt;.</source>
          <target state="translated">文字列としてのリクエストメソッド。読み取り専用。例： &lt;code&gt;'GET'&lt;/code&gt; 、 &lt;code&gt;'DELETE'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf2b93920ae2dda23261c83e7efa9025f30a8059" translate="yes" xml:space="preserve">
          <source>The request scheme pseudo header field indicating the scheme portion of the target URL.</source>
          <target state="translated">対象URLのスキーム部分を示すリクエストスキーム擬似ヘッダフィールド。</target>
        </trans-unit>
        <trans-unit id="d62ea70efeb08e31455b4542aaf477b0d2b0fbb4" translate="yes" xml:space="preserve">
          <source>The request to promote a handle is made through &lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt;&lt;code&gt;napi_escape_handle&lt;/code&gt;&lt;/a&gt; which can only be called once.</source>
          <target state="translated">ハンドルを昇格させる要求は、&lt;a href=&quot;#n_api_napi_escape_handle&quot;&gt; &lt;code&gt;napi_escape_handle&lt;/code&gt; &lt;/a&gt;を介して行われます。</target>
        </trans-unit>
        <trans-unit id="c35bb861539c1d20772a3a4da4e40cab1b2864ac" translate="yes" xml:space="preserve">
          <source>The request/response headers object.</source>
          <target state="translated">リクエスト/レスポンスヘッダオブジェクト。</target>
        </trans-unit>
        <trans-unit id="efa13e0d6f5d17d44de1820e6c6f833cd6533735" translate="yes" xml:space="preserve">
          <source>The request/response trailers object. Only populated at the &lt;code&gt;'end'&lt;/code&gt; event.</source>
          <target state="translated">要求/応答トレーラーオブジェクト。 &lt;code&gt;'end'&lt;/code&gt; イベントでのみ入力されます。</target>
        </trans-unit>
        <trans-unit id="76afa09b3c9e4455c22d150e86e0a878c83b5f18" translate="yes" xml:space="preserve">
          <source>The requested functionality is not supported in worker threads.</source>
          <target state="translated">要求された機能はワーカースレッドではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="130c49b75db4d5f28d69526125533d14026a98f8" translate="yes" xml:space="preserve">
          <source>The resolve hook returns the resolved file URL and module format for a given module specifier and parent file URL:</source>
          <target state="translated">resolveフックは、与えられたモジュール指定子と親ファイルURLに対して、解決されたファイルURLとモジュールフォーマットを返します。</target>
        </trans-unit>
        <trans-unit id="01c7f5cd9e64e948205f4e8da34e92946ac36c24" translate="yes" xml:space="preserve">
          <source>The resolver can throw the following errors:</source>
          <target state="translated">リゾルバは以下のエラーをスローすることができます。</target>
        </trans-unit>
        <trans-unit id="6ad6fadfeabaeb9c9c66df7b9fd54f216fa3d3aa" translate="yes" xml:space="preserve">
          <source>The resolver has the following properties:</source>
          <target state="translated">リゾルバは以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="965055eab4b20e712cee07e74d7e15f1dc310a7e" translate="yes" xml:space="preserve">
          <source>The response inherits from &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt;, and additionally implements the following:</source>
          <target state="translated">応答は&lt;a href=&quot;stream#stream_stream&quot;&gt;Streamを&lt;/a&gt;継承し、さらに以下を実装します。</target>
        </trans-unit>
        <trans-unit id="b18e030ec3ca1714e02a7b098543adb935c78705" translate="yes" xml:space="preserve">
          <source>The result generally does not make any guarantees about what kinds of properties or behavior a value exposes in JavaScript. They are primarily useful for addon developers who prefer to do type checking in JavaScript.</source>
          <target state="translated">この結果は一般的に、値がJavaScriptでどのようなプロパティや振る舞いを公開しているかを保証するものではありません。これらは主に、JavaScriptで型チェックを行うことを好むアドオン開発者にとって有用です。</target>
        </trans-unit>
        <trans-unit id="b8b8022504a26ffb5513f898bea8594dd091a830" translate="yes" xml:space="preserve">
          <source>The result of a previous call to &lt;code&gt;process.cpuUsage()&lt;/code&gt; can be passed as the argument to the function, to get a diff reading.</source>
          <target state="translated">以前に &lt;code&gt;process.cpuUsage()&lt;/code&gt; を呼び出した結果を引数として関数に渡して、差分の読み取りを取得できます。</target>
        </trans-unit>
        <trans-unit id="0c970c11e0a87e0dc98113377ad10bd2ef4c395a" translate="yes" xml:space="preserve">
          <source>The result of this function no longer contains a fraction component on Windows.</source>
          <target state="translated">Windowsでは、この関数の結果に端数成分が含まれなくなりました。</target>
        </trans-unit>
        <trans-unit id="350b994c82684bd0c40d5f8bba62015f9d892265" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;BigInt&lt;/code&gt; is calculated as: (&amp;ndash;1)&lt;sup&gt;&lt;code&gt;sign_bit&lt;/code&gt;&lt;/sup&gt; (&lt;code&gt;words[0]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times; (2&lt;sup&gt;64&lt;/sup&gt;)&lt;sup&gt;1&lt;/sup&gt; + &amp;hellip;)</source>
          <target state="translated">結果の &lt;code&gt;BigInt&lt;/code&gt; は次のように計算されます：（&amp;ndash;1）&lt;sup&gt; &lt;code&gt;sign_bit&lt;/code&gt; &lt;/sup&gt;（ &lt;code&gt;words[0]&lt;/code&gt; &amp;times;（2 &lt;sup&gt;64&lt;/sup&gt;）&lt;sup&gt;0&lt;/sup&gt; + &lt;code&gt;words[1]&lt;/code&gt; &amp;times;（2 &lt;sup&gt;64&lt;/sup&gt;）&lt;sup&gt;1&lt;/sup&gt; +&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="090264918bf0db3d97f15783938c5710acd286f9" translate="yes" xml:space="preserve">
          <source>The resulting output will resemble:</source>
          <target state="translated">結果の出力は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6592f1ecacf5d99cad7d854240afeddc010dff43" translate="yes" xml:space="preserve">
          <source>The resulting path is normalized and trailing slashes are removed unless the path is resolved to the root directory.</source>
          <target state="translated">結果として得られるパスは正規化され、パスがルートディレクトリに解決されない限り、末尾のスラッシュは削除されます。</target>
        </trans-unit>
        <trans-unit id="6755c8e673605ed2b394bffd53b16e00aa04ed50" translate="yes" xml:space="preserve">
          <source>The return value &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; represents the generated key pair. When PEM encoding was selected, the respective key will be a string, otherwise it will be a buffer containing the data encoded as DER.</source>
          <target state="translated">戻り値 &lt;code&gt;{ publicKey, privateKey }&lt;/code&gt; は、生成された鍵ペアを表します。PEMエンコーディングが選択された場合、それぞれのキーは文字列になります。それ以外の場合は、DERとしてエンコードされたデータを含むバッファになります。</target>
        </trans-unit>
        <trans-unit id="8540d6f242c1449e741beb63b74e073fc037812e" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt;, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; からの戻り値は、モジュールの &lt;code&gt;exports&lt;/code&gt; オブジェクトとして扱われます。 &lt;code&gt;Init&lt;/code&gt; 方法を介して空のオブジェクトが渡され &lt;code&gt;exports&lt;/code&gt; 便宜などのパラメータ。場合は &lt;code&gt;Init&lt;/code&gt; 返す &lt;code&gt;NULL&lt;/code&gt; を、として渡されたパラメータ &lt;code&gt;exports&lt;/code&gt; モジュールによってエクスポートされます。N-APIモジュールは、 &lt;code&gt;module&lt;/code&gt; オブジェクトを変更できませんが、モジュールの &lt;code&gt;exports&lt;/code&gt; プロパティとして何でも指定できます。</target>
        </trans-unit>
        <trans-unit id="74d46df7105ceb22c98097c79674b8da75df0880" translate="yes" xml:space="preserve">
          <source>The return value from &lt;code&gt;Init&lt;/code&gt; is treated as the &lt;code&gt;exports&lt;/code&gt; object for the module. The &lt;code&gt;Init&lt;/code&gt; method is passed an empty object via the &lt;code&gt;exports&lt;/code&gt; parameter as a convenience. If &lt;code&gt;Init&lt;/code&gt; returns NULL, the parameter passed as &lt;code&gt;exports&lt;/code&gt; is exported by the module. N-API modules cannot modify the &lt;code&gt;module&lt;/code&gt; object but can specify anything as the &lt;code&gt;exports&lt;/code&gt; property of the module.</source>
          <target state="translated">&lt;code&gt;Init&lt;/code&gt; からの戻り値は、モジュールの &lt;code&gt;exports&lt;/code&gt; オブジェクトとして扱われます。 &lt;code&gt;Init&lt;/code&gt; 方法を介して空のオブジェクトが渡され &lt;code&gt;exports&lt;/code&gt; 便宜などのパラメータ。場合 &lt;code&gt;Init&lt;/code&gt; NULLを返し、として渡されたパラメータ &lt;code&gt;exports&lt;/code&gt; モジュールによってエクスポートされます。N-APIモジュールは &lt;code&gt;module&lt;/code&gt; オブジェクトを変更できませんが、モジュールの &lt;code&gt;exports&lt;/code&gt; プロパティとして何でも指定できます。</target>
        </trans-unit>
        <trans-unit id="b7768bae4378835321f00405e40f7b2cd7232e22" translate="yes" xml:space="preserve">
          <source>The return value includes fractions of a second. Use &lt;code&gt;Math.floor()&lt;/code&gt; to get whole seconds.</source>
          <target state="translated">戻り値には、秒の端数が含まれます。秒全体を取得するには、 &lt;code&gt;Math.floor()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="97d244151a2074f335e80ec7c64b042a2a7bf155" translate="yes" xml:space="preserve">
          <source>The return value is &lt;code&gt;true&lt;/code&gt; if the internal buffer is less than the &lt;code&gt;highWaterMark&lt;/code&gt; configured when the stream was created after admitting &lt;code&gt;chunk&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt; is returned, further attempts to write data to the stream should stop until the &lt;a href=&quot;#stream_event_drain&quot;&gt;&lt;code&gt;'drain'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="translated">&lt;code&gt;chunk&lt;/code&gt; &lt;code&gt;highWaterMark&lt;/code&gt; た後にストリームが作成されたときに設定されたhighWaterMarkよりも内部バッファーが小さい場合、戻り値は &lt;code&gt;true&lt;/code&gt; です。 &lt;code&gt;false&lt;/code&gt; が返された場合、&lt;a href=&quot;#stream_event_drain&quot;&gt; &lt;code&gt;'drain'&lt;/code&gt; &lt;/a&gt;イベントが発生するまで、ストリームへのデータの書き込みをさらに停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="26d76acade904502d2ab1c10b9e6ee013a9e7a40" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_arch&quot;&gt;&lt;code&gt;process.arch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は&lt;a href=&quot;process#process_process_arch&quot;&gt; &lt;code&gt;process.arch&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="d2cc4b1ac76c7772ee2e1e982aae790cb286904e" translate="yes" xml:space="preserve">
          <source>The return value is equivalent to &lt;a href=&quot;process#process_process_platform&quot;&gt;&lt;code&gt;process.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は&lt;a href=&quot;process#process_process_platform&quot;&gt; &lt;code&gt;process.platform&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="3e1ee035941771511703ba74230eaf82a6d8a77f" translate="yes" xml:space="preserve">
          <source>The return value of a handler function is ignored.</source>
          <target state="translated">ハンドラ関数の戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="5a297e4c1534ad58591aefd1896f05fb34a3b663" translate="yes" xml:space="preserve">
          <source>The return value will be &lt;code&gt;napi_ok&lt;/code&gt; if the request was successful and no uncaught JavaScript exception was thrown. If an error occurred AND an exception was thrown, the &lt;code&gt;napi_status&lt;/code&gt; value for the error will be returned. If an exception was thrown, and no error occurred, &lt;code&gt;napi_pending_exception&lt;/code&gt; will be returned.</source>
          <target state="translated">リクエストが成功し、キャッチされていないJavaScript例外がスローされなかった場合、戻り値は &lt;code&gt;napi_ok&lt;/code&gt; になります。エラーが発生し、例外がスローされた場合、エラーの &lt;code&gt;napi_status&lt;/code&gt; 値が返されます。例外がスローされ、エラーが発生しなかった場合、 &lt;code&gt;napi_pending_exception&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a30bf17d9b1e59d4e5f5069fa0021e31e3506815" translate="yes" xml:space="preserve">
          <source>The returned &lt;code&gt;MessagePort&lt;/code&gt; will be an object in the target context, and will inherit from its global &lt;code&gt;Object&lt;/code&gt; class. Objects passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt;&lt;code&gt;port.onmessage()&lt;/code&gt;&lt;/a&gt; listener will also be created in the target context and inherit from its global &lt;code&gt;Object&lt;/code&gt; class.</source>
          <target state="translated">返される &lt;code&gt;MessagePort&lt;/code&gt; はターゲットコンテキスト内のオブジェクトであり、グローバル &lt;code&gt;Object&lt;/code&gt; クラスから継承します。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage&quot;&gt; &lt;code&gt;port.onmessage()&lt;/code&gt; &lt;/a&gt;リスナーに渡されたオブジェクトも、ターゲットコンテキストで作成され、グローバル &lt;code&gt;Object&lt;/code&gt; クラスから継承されます。</target>
        </trans-unit>
        <trans-unit id="dfc70b1227f01401a4b050e13257206410687bd0" translate="yes" xml:space="preserve">
          <source>The returned buffer is statically allocated and does not need to be freed.</source>
          <target state="translated">返されたバッファは静的に確保され、解放する必要はありません。</target>
        </trans-unit>
        <trans-unit id="38fcc6c2ece2cf3c7e594688e04adf2e09823305" translate="yes" xml:space="preserve">
          <source>The returned function will be a wrapper around the supplied callback function. When the returned function is called, any errors that are thrown will be routed to the domain's &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">返される関数は、指定されたコールバック関数のラッパーになります。返された関数が呼び出されると、スローされたエラーはすべてドメインの &lt;code&gt;'error'&lt;/code&gt; イベントにルーティングされます。</target>
        </trans-unit>
        <trans-unit id="2d318eb946457587672c9d9705f3cc85af1dd775" translate="yes" xml:space="preserve">
          <source>The returned function will have an &lt;code&gt;asyncResource&lt;/code&gt; property referencing the &lt;code&gt;AsyncResource&lt;/code&gt; to which the function is bound.</source>
          <target state="translated">返される関数には、関数がバインドされている &lt;code&gt;AsyncResource&lt;/code&gt; を参照する &lt;code&gt;asyncResource&lt;/code&gt; プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="a03e4b5f6edfce2e491d26c75c656ecf3f9be2a9" translate="yes" xml:space="preserve">
          <source>The returned object no longer inherits from &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">返されたオブジェクトは &lt;code&gt;Object.prototype&lt;/code&gt; を継承しなくなりました。</target>
        </trans-unit>
        <trans-unit id="efca954612151fbe49aeec68bf42cb1165e6aba5" translate="yes" xml:space="preserve">
          <source>The returned object will have the following properties:</source>
          <target state="translated">返されるオブジェクトは以下のプロパティを持ちます。</target>
        </trans-unit>
        <trans-unit id="44bb5d6c3855220369956ba8708ec28034c18d86" translate="yes" xml:space="preserve">
          <source>The returned result is different from the statistics returned by &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; in that &lt;code&gt;vm.measureMemory()&lt;/code&gt; measure the memory reachable by each V8 specific contexts in the current instance of the V8 engine, while the result of &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; measure the memory occupied by each heap space in the current V8 instance.</source>
          <target state="translated">返された結果が統計異なるによって返さ &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; という &lt;code&gt;vm.measureMemory()&lt;/code&gt; の結果が、V8エンジンの現在のインスタンス内の各V8の特定のコンテキストによってメモリ到達を測定 &lt;code&gt;v8.getHeapSpaceStatistics()&lt;/code&gt; メジャー現在のV8インスタンスの各ヒープスペースが占めるメモリ。</target>
        </trans-unit>
        <trans-unit id="2663bc23f657359a1e5a0d9802b2b8ab09e2c133" translate="yes" xml:space="preserve">
          <source>The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.</source>
          <target state="translated">投げられたエラーに対応する最も安全な方法は、プロセスをシャットダウンすることです。もちろん、通常のウェブサーバでは、多くのオープンな接続があるかもしれませんし、誰かがエラーを起こしたからといって、それらを突然シャットダウンするのは合理的ではありません。</target>
        </trans-unit>
        <trans-unit id="17642e3dfd2688c6cd67e72a34c50952e74d46ec" translate="yes" xml:space="preserve">
          <source>The same options as &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt; are supported. Since a shell is not spawned, behaviors such as I/O redirection and file globbing are not supported.</source>
          <target state="translated">&lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt; &lt;code&gt;child_process.exec()&lt;/code&gt; &lt;/a&gt;と同じオプションがサポートされています。シェルは生成されないため、I / Oリダイレクトやファイルグロビングなどの動作はサポートされません。</target>
        </trans-unit>
        <trans-unit id="b5c131d6859b462a4ccc2f3ff1ca448377cb2782" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt;&lt;code&gt;.setupMaster()&lt;/code&gt;&lt;/a&gt; is called, whichever comes first.</source>
          <target state="translated">スケジューリングポリシー、どちらか &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; ラウンドロビンまたはのための &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; は、オペレーティング・システムにお任せします。これはグローバル設定であり、最初のワーカーが生成されるか、&lt;a href=&quot;#cluster_cluster_setupmaster_settings&quot;&gt; &lt;code&gt;.setupMaster()&lt;/code&gt; &lt;/a&gt;が呼び出されると、どちらか早い方で効果的にフリーズされます。</target>
        </trans-unit>
        <trans-unit id="61aae47bb566b3e756d07254aa9ebf2e27b0d263" translate="yes" xml:space="preserve">
          <source>The scheduling policy, either &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; for round-robin or &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; to leave it to the operating system. This is a global setting and effectively frozen once either the first worker is spawned, or &lt;code&gt;cluster.setupMaster()&lt;/code&gt; is called, whichever comes first.</source>
          <target state="translated">スケジューリングポリシー、どちらか &lt;code&gt;cluster.SCHED_RR&lt;/code&gt; ラウンドロビンまたはのための &lt;code&gt;cluster.SCHED_NONE&lt;/code&gt; は、オペレーティング・システムにお任せします。これはグローバル設定であり、最初のワーカーが生成されるか、 &lt;code&gt;cluster.setupMaster()&lt;/code&gt; が呼び出されるかのいずれか早い方で効果的に凍結されます。</target>
        </trans-unit>
        <trans-unit id="a1108ba05be7f85b2c2a446fb6ad5e88bb3a3f9d" translate="yes" xml:space="preserve">
          <source>The script can access the &lt;a href=&quot;globals&quot;&gt;global scope&lt;/a&gt;. Function and &lt;code&gt;var&lt;/code&gt; declarations in the script will be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object. Variable declarations made using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; will be visible globally, but will not be added to the &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">スクリプトは&lt;a href=&quot;globals&quot;&gt;グローバルスコープに&lt;/a&gt;アクセスできます。スクリプト内の関数と &lt;code&gt;var&lt;/code&gt; 宣言が&lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;オブジェクトに追加されます。 &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;const&lt;/code&gt; を使用して行われた変数宣言はグローバルに表示されますが、&lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;オブジェクトには追加されません。</target>
        </trans-unit>
        <trans-unit id="478005d19999ae183e0f7a9bb0ae6f007bd16fbb" translate="yes" xml:space="preserve">
          <source>The search paths for the module.</source>
          <target state="translated">モジュールの検索パスです。</target>
        </trans-unit>
        <trans-unit id="0cfd0df8336c867963656caf2b437c62fdf98b4d" translate="yes" xml:space="preserve">
          <source>The second approach is to try to handle the exception. There will be cases where the native code can catch the exception, take the appropriate action, and then continue. This is only recommended in specific cases where it is known that the exception can be safely handled. In these cases &lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt;&lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt;&lt;/a&gt; can be used to get and clear the exception. On success, result will contain the handle to the last JavaScript &lt;code&gt;Object&lt;/code&gt; thrown. If it is determined, after retrieving the exception, the exception cannot be handled after all it can be re-thrown it with &lt;a href=&quot;#n_api_napi_throw&quot;&gt;&lt;code&gt;napi_throw&lt;/code&gt;&lt;/a&gt; where error is the JavaScript &lt;code&gt;Error&lt;/code&gt; object to be thrown.</source>
          <target state="translated">2番目のアプローチは、例外の処理を試みることです。ネイティブコードが例外をキャッチし、適切なアクションを実行して続行できる場合があります。これは、例外を安全に処理できることがわかっている特定の場合にのみ推奨されます。これらの場合、&lt;a href=&quot;#n_api_napi_get_and_clear_last_exception&quot;&gt; &lt;code&gt;napi_get_and_clear_last_exception&lt;/code&gt; &lt;/a&gt;を使用して、例外を取得およびクリアできます。成功した場合、resultには、最後にスローされたJavaScript &lt;code&gt;Object&lt;/code&gt; へのハンドルが含まれます。決定された場合、例外を取得した後、例外は処理できません&lt;a href=&quot;#n_api_napi_throw&quot;&gt; &lt;code&gt;napi_throw&lt;/code&gt; &lt;/a&gt;で例外を再スローできます。ここで、errorはスローされるJavaScript &lt;code&gt;Error&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="dc926d997d4c579499bbdcda07f643f7920bddbb" translate="yes" xml:space="preserve">
          <source>The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.</source>
          <target state="translated">2つ目のアプローチは、マスタープロセスがリスンソケットを作成し、興味のあるワーカーに送信する方法です。その後、ワーカーは直接接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="338ae710bded6a0f6fd004eec96b553cb3dbb378" translate="yes" xml:space="preserve">
          <source>The second approach should, in theory, give the best performance. In practice however, distribution tends to be very unbalanced due to operating system scheduler vagaries. Loads have been observed where over 70% of all connections ended up in just two processes, out of a total of eight.</source>
          <target state="translated">2 番目のアプローチは、理論的には最高のパフォーマンスを提供するはずです。しかし実際には、オペレーティング・システムのスケジューラのばらつきにより、分散は非常に不均衡になる傾向があります。負荷は、全接続の70%以上が、合計8つのプロセスのうち、たった2つのプロセスで終わっていることが観察されています。</target>
        </trans-unit>
        <trans-unit id="a15f3c8ca4baed085ff4f00bb83df9df5112dc61" translate="yes" xml:space="preserve">
          <source>The second argument can now be an &lt;code&gt;options&lt;/code&gt; object with &lt;code&gt;recursive&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties.</source>
          <target state="translated">2番目の引数は、 &lt;code&gt;recursive&lt;/code&gt; プロパティと &lt;code&gt;mode&lt;/code&gt; プロパティを持つ &lt;code&gt;options&lt;/code&gt; オブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="056385b629217bf4d47083a5cf61e4dbc958e791" translate="yes" xml:space="preserve">
          <source>The second argument is optional. If &lt;code&gt;options&lt;/code&gt; is provided as a string, it specifies the &lt;code&gt;encoding&lt;/code&gt;. Otherwise &lt;code&gt;options&lt;/code&gt; should be passed as an object.</source>
          <target state="translated">2番目の引数はオプションです。 &lt;code&gt;options&lt;/code&gt; が文字列として提供されている場合は、 &lt;code&gt;encoding&lt;/code&gt; 指定します。それ以外の場合、 &lt;code&gt;options&lt;/code&gt; はオブジェクトとして渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9dafbecade7b94f6c57417ea5afec4a5bc9790e3" translate="yes" xml:space="preserve">
          <source>The sections below describe the additional tools available for developing and deploying Node.js native addons.</source>
          <target state="translated">以下のセクションでは、Node.jsネイティブアドオンの開発とデプロイに利用できる追加ツールについて説明します。</target>
        </trans-unit>
        <trans-unit id="9e19e2fd3684a2ee8b1c503085e8dc2cb74704b7" translate="yes" xml:space="preserve">
          <source>The selected public or private key encoding is incompatible with other options.</source>
          <target state="translated">選択された公開鍵または秘密鍵のエンコーディングは、他のオプションと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="d2b9aebdd568a045c5581d3668edfbe15a6a2bea" translate="yes" xml:space="preserve">
          <source>The semantics of Node.js's &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support a number of reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.jsの &lt;code&gt;require()&lt;/code&gt; 関数のセマンティクスは、多くの妥当なディレクトリ構造をサポートするのに十分一般的であるように設計されています。 &lt;code&gt;dpkg&lt;/code&gt; 、 &lt;code&gt;rpm&lt;/code&gt; 、 &lt;code&gt;npm&lt;/code&gt; などのパッケージマネージャプログラムは、Node.jsモジュールからネイティブパッケージを変更せずにビルドできることを期待しています。</target>
        </trans-unit>
        <trans-unit id="c9e7e477b28102f006aa9e1ae786b6e5fff1d8ea" translate="yes" xml:space="preserve">
          <source>The semantics of the Node.js &lt;code&gt;require()&lt;/code&gt; function were designed to be general enough to support reasonable directory structures. Package manager programs such as &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt;, and &lt;code&gt;npm&lt;/code&gt; will hopefully find it possible to build native packages from Node.js modules without modification.</source>
          <target state="translated">Node.js &lt;code&gt;require()&lt;/code&gt; 関数のセマンティクスは、妥当なディレクトリ構造をサポートするのに十分一般的であるように設計されています。 &lt;code&gt;dpkg&lt;/code&gt; 、 &lt;code&gt;rpm&lt;/code&gt; 、 &lt;code&gt;npm&lt;/code&gt; などのパッケージマネージャープログラムは、Node.jsモジュールから変更なしでネイティブパッケージを構築できることを願っています。</target>
        </trans-unit>
        <trans-unit id="765c907408a72b7c359b1e6e3c2a44d833e954e0" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;.</source>
          <target state="translated">シリアル化APIは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML構造化クローンアルゴリズム&lt;/a&gt;と互換性のある方法でJavaScript値をシリアル化する手段を提供します。</target>
        </trans-unit>
        <trans-unit id="1dd892ccc6dffe2bd093abfe21edcd6594062c97" translate="yes" xml:space="preserve">
          <source>The serialization API provides means of serializing JavaScript values in a way that is compatible with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML structured clone algorithm&lt;/a&gt;. The format is backward-compatible (i.e. safe to store to disk).</source>
          <target state="translated">シリアル化APIは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm&quot;&gt;HTML構造化クローンアルゴリズム&lt;/a&gt;と互換性のある方法でJavaScript値をシリアル化する手段を提供します。フォーマットは下位互換性があります（つまり、ディスクに保存しても安全です）。</target>
        </trans-unit>
        <trans-unit id="6375e172794a973dd431fe6fb6d9d47672ad78be" translate="yes" xml:space="preserve">
          <source>The server can be a TCP server or an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server, depending on what it &lt;a href=&quot;#net_server_listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to.</source>
          <target state="translated">サーバーは、&lt;a href=&quot;#net_server_listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; の対象&lt;/a&gt;に応じて、TCPサーバーまたは&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;サーバーになります。</target>
        </trans-unit>
        <trans-unit id="2404f9b86c98cba231fff8bebda45b2ca16649b5" translate="yes" xml:space="preserve">
          <source>The server can be tested by connecting to it using the example client from &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt; &lt;code&gt;tls.connect()&lt;/code&gt; の&lt;/a&gt;サンプルクライアントを使用してサーバーに接続することにより、サーバーをテストできます。</target>
        </trans-unit>
        <trans-unit id="aede112d180e1d47ab7a08eaa5b0ea3c6ed75bc2" translate="yes" xml:space="preserve">
          <source>The server's current certificate can be parsed to obtain the OCSP URL and certificate ID; after obtaining an OCSP response, &lt;code&gt;callback(null, resp)&lt;/code&gt; is then invoked, where &lt;code&gt;resp&lt;/code&gt; is a &lt;code&gt;Buffer&lt;/code&gt; instance containing the OCSP response. Both &lt;code&gt;certificate&lt;/code&gt; and &lt;code&gt;issuer&lt;/code&gt; are &lt;code&gt;Buffer&lt;/code&gt; DER-representations of the primary and issuer's certificates. These can be used to obtain the OCSP certificate ID and OCSP endpoint URL.</source>
          <target state="translated">サーバーの現在の証明書を解析して、OCSP URLと証明書IDを取得できます。OCSP応答を取得した後、 &lt;code&gt;callback(null, resp)&lt;/code&gt; が呼び出されます &lt;code&gt;resp&lt;/code&gt; は、OCSP応答を含む &lt;code&gt;Buffer&lt;/code&gt; インスタンスです。 &lt;code&gt;certificate&lt;/code&gt; と &lt;code&gt;issuer&lt;/code&gt; はどちらも、プライマリおよび発行者の証明書の &lt;code&gt;Buffer&lt;/code&gt; DER表現です。これらを使用して、OCSP証明書IDおよびOCSPエンドポイントURLを取得できます。</target>
        </trans-unit>
        <trans-unit id="ea711def7d72186a6796edc378b6d6298bc4d28d" translate="yes" xml:space="preserve">
          <source>The servers encrypt the entire session state and send it to the client as a &quot;ticket&quot;. When reconnecting, the state is sent to the server in the initial connection. This mechanism avoids the need for server-side session cache. If the server doesn't use the ticket, for any reason (failure to decrypt it, it's too old, etc.), it will create a new session and send a new ticket. See &lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC 5077&lt;/a&gt; for more information.</source>
          <target state="translated">サーバーはセッション状態全体を暗号化し、それを「チケット」としてクライアントに送信します。再接続すると、状態は最初の接続でサーバーに送信されます。このメカニズムにより、サーバー側のセッションキャッシュが不要になります。サーバーが何らかの理由（復号化の失敗、古すぎるなど）でチケットを使用しない場合、サーバーは新しいセッションを作成し、新しいチケットを送信します。詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc5077&quot;&gt;RFC5077&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="76accd0d371c0c87373d40be1eddae24ddb6507b" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command line parsing should be compatible.</source>
          <target state="translated">シェルは &lt;code&gt;-c&lt;/code&gt; スイッチを理解する必要があります。シェルが &lt;code&gt;'cmd.exe'&lt;/code&gt; の場合、 &lt;code&gt;/d /s /c&lt;/code&gt; スイッチを理解している必要があり、コマンドライン解析は互換性があるはずです。</target>
        </trans-unit>
        <trans-unit id="aeb000fbdb4d2424b01088fd13f9a5381e396488" translate="yes" xml:space="preserve">
          <source>The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch. If the shell is &lt;code&gt;'cmd.exe'&lt;/code&gt;, it should understand the &lt;code&gt;/d /s /c&lt;/code&gt; switches and command-line parsing should be compatible.</source>
          <target state="translated">シェルは &lt;code&gt;-c&lt;/code&gt; スイッチを理解する必要があります。シェルが &lt;code&gt;'cmd.exe'&lt;/code&gt; 場合、 &lt;code&gt;/d /s /c&lt;/code&gt; スイッチを理解し、コマンドライン解析に互換性がある必要があります。</target>
        </trans-unit>
        <trans-unit id="21be831d3adf2892b25eaf65824eb2c524ecba41" translate="yes" xml:space="preserve">
          <source>The shell that executed Node.js should see the exit code as &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">Node.jsを実行したシェルでは、終了コードが &lt;code&gt;1&lt;/code&gt; と表示されます。</target>
        </trans-unit>
        <trans-unit id="05c0d6d3b494c3c20fef212dff014249c946a65b" translate="yes" xml:space="preserve">
          <source>The signal handler will receive the signal's name (&lt;code&gt;'SIGINT'&lt;/code&gt;, &lt;code&gt;'SIGTERM'&lt;/code&gt;, etc.) as the first argument.</source>
          <target state="translated">シグナルハンドラは、最初の引数として &lt;code&gt;'SIGTERM'&lt;/code&gt; の名前（ &lt;code&gt;'SIGINT'&lt;/code&gt; 、'SIGTERM'など）を受け取ります。</target>
        </trans-unit>
        <trans-unit id="47e574501f3a0d99059119864ec3279d3f9294c3" translate="yes" xml:space="preserve">
          <source>The signal used to trigger the creation of a diagnostic report. Defaults to &lt;code&gt;'SIGUSR2'&lt;/code&gt;.</source>
          <target state="translated">診断レポートの作成をトリガーするために使用される信号。デフォルトは &lt;code&gt;'SIGUSR2'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d52541ad62fc4e1c6ca8683f187715851a92c6fd" translate="yes" xml:space="preserve">
          <source>The simple asynchronous work APIs above may not be appropriate for every scenario. When using any other asynchronous mechanism, the following APIs are necessary to ensure an asynchronous operation is properly tracked by the runtime.</source>
          <target state="translated">上記の単純な非同期作業APIは、すべてのシナリオに適しているとは限りません。他の非同期メカニズムを使用する場合、以下のAPIは非同期操作がランタイムによって適切に追跡されることを保証するために必要です。</target>
        </trans-unit>
        <trans-unit id="0cf28a9f4765208e101d68cf21ce0fa06a19c689" translate="yes" xml:space="preserve">
          <source>The size of the file in bytes.</source>
          <target state="translated">ファイルのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="2a5cdd3536fe2bed3772a134a40f524b1ba55908" translate="yes" xml:space="preserve">
          <source>The socket timeout logic is set up on connection, so changing this value only affects new connections to the server, not any existing connections.</source>
          <target state="translated">ソケットタイムアウトのロジックは接続時に設定されているため、この値を変更すると、既存の接続ではなく、新規の接続にのみ影響を与えます。</target>
        </trans-unit>
        <trans-unit id="6c1c5af86acdb2cbdf7981b86ae3b974f13c3df2" translate="yes" xml:space="preserve">
          <source>The special handling of the &lt;code&gt;'error'&lt;/code&gt; event is only used when &lt;code&gt;events.once()&lt;/code&gt; is used to wait for another event. If &lt;code&gt;events.once()&lt;/code&gt; is used to wait for the '&lt;code&gt;error'&lt;/code&gt; event itself, then it is treated as any other kind of event without special handling:</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; イベントの特別な処理は、 &lt;code&gt;events.once()&lt;/code&gt; が別のイベントを待機するために使用される場合にのみ使用されます。場合 &lt;code&gt;events.once()&lt;/code&gt; 「を待つために使用されている &lt;code&gt;error'&lt;/code&gt; イベント自体、それは特別な取り扱いのないイベントの他の種類として扱われます。</target>
        </trans-unit>
        <trans-unit id="471976270e8935af1d178909e020a76781b88bf1" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;オブジェクトは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="dfcfaca3f84262ad37f21835b36d6a8ca0a1720e" translate="yes" xml:space="preserve">
          <source>The specific &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; object is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;オブジェクトは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array&quot;&gt; &lt;code&gt;Uint8Array&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e9568eb7140ccc6f348c4550a9426056f00bc293" translate="yes" xml:space="preserve">
          <source>The specific operation of &lt;code&gt;console.clear()&lt;/code&gt; can vary across operating systems and terminal types. For most Linux operating systems, &lt;code&gt;console.clear()&lt;/code&gt; operates similarly to the &lt;code&gt;clear&lt;/code&gt; shell command. On Windows, &lt;code&gt;console.clear()&lt;/code&gt; will clear only the output in the current terminal viewport for the Node.js binary.</source>
          <target state="translated">&lt;code&gt;console.clear()&lt;/code&gt; の特定の操作は、オペレーティングシステムや端末のタイプによって異なります。ほとんどのLinuxオペレーティングシステムでは、 &lt;code&gt;console.clear()&lt;/code&gt; は &lt;code&gt;clear&lt;/code&gt; shellコマンドと同様に動作します。Windowsでは、 &lt;code&gt;console.clear()&lt;/code&gt; は、Node.jsバイナリの現在のターミナルビューポートの出力のみをクリアします。</target>
        </trans-unit>
        <trans-unit id="26f56414b822e235f350940f03c7fed02c4a3f19" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;secureProtocol&lt;/code&gt; method is invalid. It is either unknown, or disabled because it is insecure.</source>
          <target state="translated">指定された &lt;code&gt;secureProtocol&lt;/code&gt; メソッドは無効です。不明であるか、安全でないため無効になっています。</target>
        </trans-unit>
        <trans-unit id="d4404d9ad06af7978ed7f6400d6bff8448f52f29" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if it uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">指定文字列は検索を実行せず、 &lt;code&gt;require()&lt;/code&gt; または &lt;code&gt;import&lt;/code&gt; に提供されるものと正確に一致する必要があります。したがって、ポリシーで複数の異なる文字列を使用して同じモジュールを指す場合（拡張子の除外など）、ポリシーで複数の指定子が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="7d1dd38b3953bad12ed9a2d4c03e49e9322e0421" translate="yes" xml:space="preserve">
          <source>The specifier string does not perform any searching and must match exactly what is provided to the &lt;code&gt;require()&lt;/code&gt;. Therefore, multiple specifiers may be needed in the policy if &lt;code&gt;require()&lt;/code&gt; uses multiple different strings to point to the same module (such as excluding the extension).</source>
          <target state="translated">指定子文字列は検索を実行せず、 &lt;code&gt;require()&lt;/code&gt; に提供されるものと正確に一致する必要があります。したがって、 &lt;code&gt;require()&lt;/code&gt; が複数の異なる文字列を使用して同じモジュールを指す場合（拡張を除外する場合など）は、ポリシーで複数の指定子が必要になることがあります。</target>
        </trans-unit>
        <trans-unit id="71c55e13b6ab04144ed0ca0148cd676f281a362f" translate="yes" xml:space="preserve">
          <source>The specifiers of all dependencies of this module. The returned array is frozen to disallow any changes to it.</source>
          <target state="translated">このモジュールのすべての依存関係の指定子。返された配列は、変更を許可しないようにフリーズされます。</target>
        </trans-unit>
        <trans-unit id="6712a27a78d38007f4db6badef0327b5c9f247ac" translate="yes" xml:space="preserve">
          <source>The speed of &lt;code&gt;zlib&lt;/code&gt; compression is affected most dramatically by the &lt;code&gt;level&lt;/code&gt; setting. A higher level will result in better compression, but will take longer to complete. A lower level will result in less compression, but will be much faster.</source>
          <target state="translated">&lt;code&gt;zlib&lt;/code&gt; 圧縮の速度は、 &lt;code&gt;level&lt;/code&gt; 設定の影響を最も大きく受けます。レベルが高いほど圧縮率は高くなりますが、完了するまでに時間がかかります。レベルを低くすると、圧縮率は低くなりますが、はるかに高速になります。</target>
        </trans-unit>
        <trans-unit id="baae50c19885878970af46308a9fcef6e3ca5413" translate="yes" xml:space="preserve">
          <source>The stack trace is extended to include the point in time at which the &lt;code&gt;domain&lt;/code&gt; module had been loaded.</source>
          <target state="translated">スタックトレースが拡張され、 &lt;code&gt;domain&lt;/code&gt; モジュールがロードされた時点が含まれます。</target>
        </trans-unit>
        <trans-unit id="d04dab8c062b60270fff8951733a2c1bf12db8dc" translate="yes" xml:space="preserve">
          <source>The standard deviation of the recorded event loop delays.</source>
          <target state="translated">記録されたイベントループの遅延の標準偏差。</target>
        </trans-unit>
        <trans-unit id="12d4241096406199958bcd38c41ce903d3de3859" translate="yes" xml:space="preserve">
          <source>The stream is closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;false&lt;/code&gt; when creating the stream.</source>
          <target state="translated">ストリームの作成時に&lt;a href=&quot;#stream_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt;オプションが &lt;code&gt;false&lt;/code&gt; に設定されていない限り、 &lt;code&gt;'error'&lt;/code&gt; イベントが発行されると、ストリームは閉じられます。</target>
        </trans-unit>
        <trans-unit id="2f2ac76df98dbcdd434e991056889f9574990f71" translate="yes" xml:space="preserve">
          <source>The stream is not closed when the &lt;code&gt;'error'&lt;/code&gt; event is emitted unless the &lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt;&lt;code&gt;autoDestroy&lt;/code&gt;&lt;/a&gt; option was set to &lt;code&gt;true&lt;/code&gt; when creating the stream.</source>
          <target state="translated">ストリームの作成時に&lt;a href=&quot;#stream_constructor_new_stream_writable_options&quot;&gt; &lt;code&gt;autoDestroy&lt;/code&gt; &lt;/a&gt;オプションが &lt;code&gt;true&lt;/code&gt; に設定されていない限り、 &lt;code&gt;'error'&lt;/code&gt; イベントが発生してもストリームは閉じられません。</target>
        </trans-unit>
        <trans-unit id="a44550d4120786eeeb6f0da72c77067c943d5e7f" translate="yes" xml:space="preserve">
          <source>The stream is not piped to any writable destination.</source>
          <target state="translated">ストリームは書き込み可能な宛先にパイプされていません。</target>
        </trans-unit>
        <trans-unit id="138b0e7f3ba481dfbd0c57d82fdbac0b326fefae" translate="yes" xml:space="preserve">
          <source>The stream's write() callback and return value are exposed.</source>
          <target state="translated">ストリームの write()コールバックと戻り値が公開されています。</target>
        </trans-unit>
        <trans-unit id="350def31fd9875bd3d581c4fbb2b29aebcde0c4d" translate="yes" xml:space="preserve">
          <source>The string passed to &lt;code&gt;require()&lt;/code&gt; is the name of the target in &lt;code&gt;binding.gyp&lt;/code&gt; responsible for creating the &lt;code&gt;.node&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; に渡される文字列は、 &lt;code&gt;.node&lt;/code&gt; ファイルの作成を担当する &lt;code&gt;binding.gyp&lt;/code&gt; 内のターゲットの名前です。</target>
        </trans-unit>
        <trans-unit id="1f4858a294cb8f6108238742da8a2f702b4e7800" translate="yes" xml:space="preserve">
          <source>The string representation of the local IP address the remote client is connecting on. For example, in a server listening on &lt;code&gt;'0.0.0.0'&lt;/code&gt;, if a client connects on &lt;code&gt;'192.168.1.1'&lt;/code&gt;, the value of &lt;code&gt;socket.localAddress&lt;/code&gt; would be &lt;code&gt;'192.168.1.1'&lt;/code&gt;.</source>
          <target state="translated">リモートクライアントが接続しているローカルIPアドレスの文字列表現。たとえば、上のサーバーのリスニングに &lt;code&gt;'0.0.0.0'&lt;/code&gt; 、上のクライアントが接続する場合は &lt;code&gt;'192.168.1.1'&lt;/code&gt; 、の値 &lt;code&gt;socket.localAddress&lt;/code&gt; はなり &lt;code&gt;'192.168.1.1'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c907e196491aec5b81c0d022d86f6e906bde2939" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP address. For example, &lt;code&gt;'74.125.127.100'&lt;/code&gt; or &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt;. Value may be &lt;code&gt;undefined&lt;/code&gt; if the socket is destroyed (for example, if the client disconnected).</source>
          <target state="translated">リモートIPアドレスの文字列表現。たとえば、 &lt;code&gt;'74.125.127.100'&lt;/code&gt; または &lt;code&gt;'2001:4860:a005::68'&lt;/code&gt; a005 :: 68 'です。ソケットが破棄された場合（クライアントが切断された場合など）は、値が &lt;code&gt;undefined&lt;/code&gt; 場合があります。</target>
        </trans-unit>
        <trans-unit id="2179deb625958e34cb0c9470426542821e19d005" translate="yes" xml:space="preserve">
          <source>The string representation of the remote IP family. &lt;code&gt;'IPv4'&lt;/code&gt; or &lt;code&gt;'IPv6'&lt;/code&gt;.</source>
          <target state="translated">リモートIPファミリの文字列表現。 &lt;code&gt;'IPv4'&lt;/code&gt; または &lt;code&gt;'IPv6'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b14d2cbabe1d821f1fe19c891d331b602e974058" translate="yes" xml:space="preserve">
          <source>The string representing the stack trace is lazily generated when the &lt;code&gt;error.stack&lt;/code&gt; property is &lt;strong&gt;accessed&lt;/strong&gt;.</source>
          <target state="translated">スタックトレースを表す文字列は、 &lt;code&gt;error.stack&lt;/code&gt; プロパティに&lt;strong&gt;アクセス&lt;/strong&gt;すると遅延生成され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="98fe85fdbe508ef6c827c907e5d2f1831bd9b29d" translate="yes" xml:space="preserve">
          <source>The substring that was used for the matching.</source>
          <target state="translated">マッチングに使用された部分文字列。</target>
        </trans-unit>
        <trans-unit id="d4576fd7cf24c54c52dedbc9e9bd4dfe7af6d9fe" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;callback&lt;/code&gt; function is called with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;derivedKey&lt;/code&gt;. If an error occurs while deriving the key, &lt;code&gt;err&lt;/code&gt; will be set; otherwise &lt;code&gt;err&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. By default, the successfully generated &lt;code&gt;derivedKey&lt;/code&gt; will be passed to the callback as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. An error will be thrown if any of the input arguments specify invalid values or types.</source>
          <target state="translated">提供された &lt;code&gt;callback&lt;/code&gt; 関数は、2つの引数 &lt;code&gt;err&lt;/code&gt; および &lt;code&gt;derivedKey&lt;/code&gt; で呼び出されます。キーの導出中にエラーが発生した場合、 &lt;code&gt;err&lt;/code&gt; が設定されます。そうでない場合、 &lt;code&gt;err&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; になります。デフォルトでは、正常に生成された &lt;code&gt;derivedKey&lt;/code&gt; は、&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;としてコールバックに渡されます。入力引数のいずれかに無効な値またはタイプが指定されている場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="0957fe6b3d636aed70380ea3ee84cc5c69bf4bee" translate="yes" xml:space="preserve">
          <source>The synchronous form blocks the Node.js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using &lt;code&gt;try&amp;hellip;catch&lt;/code&gt;, or can be allowed to bubble up.</source>
          <target state="translated">同期フォームは、操作が完了するまでNode.jsイベントループとJavaScriptの実行をブロックします。例外はすぐにスローされ、 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; を使用して処理するか、バブルアップさせることができます。</target>
        </trans-unit>
        <trans-unit id="13b6f6c400f32e4c15818f48380024fa6f42a8c5" translate="yes" xml:space="preserve">
          <source>The syntax of these values is not validated by the Node.js implementation and are passed through as provided by the user or received from the peer.</source>
          <target state="translated">これらの値の構文はNode.jsの実装では検証されておらず、ユーザーから提供されたもの、またはピアから受信したものとして渡されます。</target>
        </trans-unit>
        <trans-unit id="6225c4c4ebdc288d3a2d4ec23c52209f6023bf46" translate="yes" xml:space="preserve">
          <source>The term &quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;Forward Secrecy&lt;/a&gt;&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">「順方向&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;秘密&lt;/a&gt;」または「完全順方向秘密」という用語は、鍵の一致（つまり、鍵交換）方式の機能を表します。つまり、サーバーとクライアントのキーは、特に現在の通信セッションでのみ使用される新しい一時キーをネゴシエートするために使用されます。実際には、これは、サーバーの秘密鍵が危険にさらされている場合でも、攻撃者がセッション用に特別に生成された鍵ペアを取得できた場合にのみ、通信が盗聴者によって解読されることを意味します。</target>
        </trans-unit>
        <trans-unit id="e930ba3f37adc9345f4bcca9cb555bc0b2e00b12" translate="yes" xml:space="preserve">
          <source>The term &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;forward secrecy&lt;/a&gt;&lt;/em&gt; or &lt;em&gt;perfect forward secrecy&lt;/em&gt; describes a feature of key-agreement (i.e., key-exchange) methods. That is, the server and client keys are used to negotiate new temporary keys that are used specifically and only for the current communication session. Practically, this means that even if the server's private key is compromised, communication can only be decrypted by eavesdroppers if the attacker manages to obtain the key-pair specifically generated for the session.</source>
          <target state="translated">用語&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perfect_forward_secrecy&quot;&gt;前進の秘密保持&lt;/a&gt;&lt;/em&gt;または&lt;em&gt;完全転送秘密は&lt;/em&gt;、キー合意（すなわち、キー交換）メソッドの機能について説明します。つまり、サーバーキーとクライアントキーは、現在の通信セッションでのみ使用される新しい一時キーをネゴシエートするために使用されます。実際には、これは、サーバーの秘密鍵が危険にさらされた場合でも、攻撃者がセッション用に特別に生成された鍵ペアを取得できた場合にのみ、盗聴者が通信を復号化できることを意味します。</target>
        </trans-unit>
        <trans-unit id="0bad6d5ba86517581ea93518756b284caea90d77" translate="yes" xml:space="preserve">
          <source>The thread id as given by &lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt;&lt;code&gt;worker_threads.threadId&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_worker_threadid&quot;&gt; &lt;code&gt;worker_threads.threadId&lt;/code&gt; で&lt;/a&gt;指定されたスレッドID</target>
        </trans-unit>
        <trans-unit id="644b7390ff4919cf711608e29230a6b5cd65c540" translate="yes" xml:space="preserve">
          <source>The thread which is generating the report will wait for the reports from Worker threads to finish. However, the latency for this will usually be low, as both running JavaScript and the event loop are interrupted to generate the report.</source>
          <target state="translated">レポートを生成しているスレッドは、Workerスレッドからのレポートが終了するのを待ちます。しかし、レポートを生成するために実行中の JavaScript とイベントループの両方が中断されるため、この場合のレイテンシは通常は低くなります。</target>
        </trans-unit>
        <trans-unit id="5027f2889856b5eff5759ff3a0048ebbb10df85e" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must make no further use of the thread-safe function because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">スレッドセーフ関数は、 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; にnapi_tsfn_abortの値を &lt;code&gt;napi_tsfn_abort&lt;/code&gt; することで「中止」できます。これにより、 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; を除く、スレッドセーフ関数に関連付けられている後続のすべてのAPIは、参照カウントがゼロに達する前であっても、 &lt;code&gt;napi_closing&lt;/code&gt; を返します。特に、 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; は &lt;code&gt;napi_closing&lt;/code&gt; を返すため、スレッドセーフな関数への非同期呼び出しを行うことができなくなったことをスレッドに通知します。これは、スレッドを終了するための基準として使用できます。&lt;strong&gt;戻り値受信する&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;napi_closing&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;から&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; スレッドは、割り当てられることが保証されなくなったため、スレッドセーフ関数をそれ以上使用してはなりません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c593e7d8b94b3676794e201f5b57070222f901e3" translate="yes" xml:space="preserve">
          <source>The thread-safe function can be &quot;aborted&quot; by giving a value of &lt;code&gt;napi_tsfn_abort&lt;/code&gt; to &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt;. This will cause all subsequent APIs associated with the thread-safe function except &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; to return &lt;code&gt;napi_closing&lt;/code&gt; even before its reference count reaches zero. In particular, &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; will return &lt;code&gt;napi_closing&lt;/code&gt;, thus informing the threads that it is no longer possible to make asynchronous calls to the thread-safe function. This can be used as a criterion for terminating the thread. &lt;strong&gt;Upon receiving a return value of &lt;code&gt;napi_closing&lt;/code&gt; from &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; a thread must not use the thread-safe function anymore because it is no longer guaranteed to be allocated.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; にnapi_tsfn_abortの値を &lt;code&gt;napi_tsfn_abort&lt;/code&gt; することにより、スレッドセーフ関数を「中止」できます。これにより、 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; を除くスレッドセーフ関数に関連付けられた後続のすべてのAPIは、参照カウントがゼロになる前でも &lt;code&gt;napi_closing&lt;/code&gt; を返します。特に、 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; は &lt;code&gt;napi_closing&lt;/code&gt; を返すため、スレッドセーフ関数への非同期呼び出しを行うことができなくなったことをスレッドに通知します。これは、スレッドを終了するための基準として使用できます。&lt;strong&gt;戻り値受信する&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;napi_closing&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;から&lt;/strong&gt;&lt;strong&gt; &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; スレッドは、割り当てが保証されなくなったため、スレッドセーフ機能を使用してはなりません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63541238aa26564d51eb28716b3e8da2eb477a58" translate="yes" xml:space="preserve">
          <source>The three tools listed here permit native addon developers and maintainers to create and upload binaries to public or private servers. These tools are typically integrated with CI/CD build systems like &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; and &lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt; to build and upload binaries for a variety of platforms and architectures. These binaries are then available for download by users who do not need to have a C/C++ toolchain installed.</source>
          <target state="translated">ここにリストされている3つのツールを使用すると、ネイティブアドオンの開発者とメンテナーがバイナリを作成してパブリックサーバーまたはプライベートサーバーにアップロードできます。これらのツールは、通常のようなCI / CDのビルドシステムと統合されている&lt;a href=&quot;https://travis-ci.org&quot;&gt;トラヴィスCI&lt;/a&gt;と&lt;a href=&quot;https://www.appveyor.com&quot;&gt;AppVeyor&lt;/a&gt;プラットフォームや様々なアーキテクチャのビルドおよびアップロードバイナリへ。これらのバイナリは、C / C ++ツールチェーンをインストールする必要がないユーザーがダウンロードできるようになります。</target>
        </trans-unit>
        <trans-unit id="ae69600838324998125805013d93da028ccbe298" translate="yes" xml:space="preserve">
          <source>The timeout passed to &lt;code&gt;Atomics.wait&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Atomics.wait&lt;/code&gt; に渡されたタイムアウト</target>
        </trans-unit>
        <trans-unit id="5e67c9640ec1fa6137f83769ae5b65b87eb23576" translate="yes" xml:space="preserve">
          <source>The timer functions within Node.js implement a similar API as the timers API provided by Web Browsers but use a different internal implementation that is built around the Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;Event Loop&lt;/a&gt;.</source>
          <target state="translated">Node.js内のタイマー関数は、Webブラウザーによって提供されるタイマーAPIと同様のAPIを実装しますが、Node.js &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout&quot;&gt;イベントループを&lt;/a&gt;中心に構築された別の内部実装を使用します。</target>
        </trans-unit>
        <trans-unit id="24142a2f59af56bc69ad24cdd8ff0eb028144072" translate="yes" xml:space="preserve">
          <source>The times in the stat object have the following semantics:</source>
          <target state="translated">stat オブジェクトの times は以下のセマンティクスを持っています。</target>
        </trans-unit>
        <trans-unit id="11338b33321f7c1210af69f2e5b2929e07ab4a7f" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">このファイルの作成時刻を示すタイムスタンプをPOSIXエポックからミリ秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="17b34123fd039eac484c0932d35c7d243a87f909" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the creation time of this file.</source>
          <target state="translated">このファイルの作成時刻を示すタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="724e46ddf25f0bcf42fa24bc37ddf8c0097582d7" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">ファイルの状態が最後に変更されたことを示すタイムスタンプを、POSIX エポック以降のミリ秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="61773109ba1c85f4ebece132711c5158b722aa5c" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time the file status was changed.</source>
          <target state="translated">ファイルの状態が最後に変更されたことを示すタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="069fd01b27a0105d764e62a925be9ce027926e36" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">このファイルが最後にアクセスされた時刻を示すタイムスタンプを、POSIX エポック以降のミリ秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="bb6699921685ac3e2dd128110a9aa9134e05fa52" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was accessed.</source>
          <target state="translated">このファイルが最後にアクセスされた時間を示すタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="97c50105501bb2bfd22cb492162a0f85fc156c0e" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.</source>
          <target state="translated">このファイルが最後に変更された時刻を示すタイムスタンプを、POSIX エポック以降のミリ秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="d04d4005b317a67d275b64117bfd954f165821eb" translate="yes" xml:space="preserve">
          <source>The timestamp indicating the last time this file was modified.</source>
          <target state="translated">このファイルが最後に変更されたことを示すタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="4ee4420a40bacb4b309040070a2a109b60250f40" translate="yes" xml:space="preserve">
          <source>The total number of milliseconds elapsed for this entry. This value will not be meaningful for all Performance Entry types.</source>
          <target state="translated">このエントリの経過時間の合計ミリ秒数。この値は、すべてのパフォーマンス・エントリ・タイプでは意味を持ちません。</target>
        </trans-unit>
        <trans-unit id="dceaa4442e4a67a592b8e691c590ea3c3a720f78" translate="yes" xml:space="preserve">
          <source>The tracing system uses the same time source as the one used by &lt;code&gt;process.hrtime()&lt;/code&gt;. However the trace-event timestamps are expressed in microseconds, unlike &lt;code&gt;process.hrtime()&lt;/code&gt; which returns nanoseconds.</source>
          <target state="translated">トレースシステムは、 &lt;code&gt;process.hrtime()&lt;/code&gt; で使用されるものと同じタイムソースを使用します。ただし、トレースイベントのタイムスタンプは、ナノ秒を返す &lt;code&gt;process.hrtime()&lt;/code&gt; とは異なり、マイクロ秒で表されます。</target>
        </trans-unit>
        <trans-unit id="abafe3c3983a12616d3ab9d5970201bbaeddb49e" translate="yes" xml:space="preserve">
          <source>The transcoding process will use substitution characters if a given byte sequence cannot be adequately represented in the target encoding. For instance:</source>
          <target state="translated">トランスコーディング処理では、与えられたバイト列がターゲットエンコーディングで適切に表現できない場合、置換文字を使用します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="580e806012432ab96eb065a247141bef72a7f774" translate="yes" xml:space="preserve">
          <source>The type of an asynchronous resource was invalid. Users are also able to define their own types if using the public embedder API.</source>
          <target state="translated">非同期リソースの型が無効でした。また、パブリック エンベッダー API を使用している場合、ユーザーは独自のタイプを定義することができます。</target>
        </trans-unit>
        <trans-unit id="c4fe24a1a4412575d21267293d8a210703d96afd" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. Currently it may be one of: &lt;code&gt;'node'&lt;/code&gt;, &lt;code&gt;'mark'&lt;/code&gt;, &lt;code&gt;'measure'&lt;/code&gt;, &lt;code&gt;'gc'&lt;/code&gt;, &lt;code&gt;'function'&lt;/code&gt;, &lt;code&gt;'http2'&lt;/code&gt; or &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="translated">パフォーマンスエントリのタイプ。現在、 &lt;code&gt;'node'&lt;/code&gt; 、 &lt;code&gt;'mark'&lt;/code&gt; 、 &lt;code&gt;'measure'&lt;/code&gt; 、 &lt;code&gt;'gc'&lt;/code&gt; 、 &lt;code&gt;'function'&lt;/code&gt; 、 &lt;code&gt;'http2'&lt;/code&gt; 、 &lt;code&gt;'http'&lt;/code&gt; のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="1a75304b33d14797ab764eb8c4c7d32f6e108038" translate="yes" xml:space="preserve">
          <source>The type of the performance entry. It may be one of:</source>
          <target state="translated">パフォーマンスエントリのタイプ。のいずれかである可能性があります。</target>
        </trans-unit>
        <trans-unit id="5b5e053536c481a8b50ecd5b068ee7fcf0ba2c2e" translate="yes" xml:space="preserve">
          <source>The type tags are now properly compared and there are a couple minor comparison adjustments to make the check less surprising.</source>
          <target state="translated">タイプタグがきちんと比較されるようになったので、チェックが意外としにくくなるようにちょっとした比較調整が行われています。</target>
        </trans-unit>
        <trans-unit id="d1ae4d26f68ff9e770ba1c7b9fe1bb317ab919ab" translate="yes" xml:space="preserve">
          <source>The typical flow of an OCSP Request is as follows:</source>
          <target state="translated">OCSPリクエストの典型的な流れは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ed60e000342dc962c9266db500477f9e994c8a86" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize such &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">この方法で作成された &lt;code&gt;Buffer&lt;/code&gt; インスタンスの基礎となるメモリ&lt;em&gt;は初期化&lt;/em&gt;され&lt;em&gt;ません&lt;/em&gt;。新しく作成された &lt;code&gt;Buffer&lt;/code&gt; の内容は不明で&lt;em&gt;あり、機密データが含まれている可能性があります&lt;/em&gt;。このような &lt;code&gt;Buffer&lt;/code&gt; インスタンスをゼロで初期化するには、&lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="58b7a5f60ed15b149caff061065151e09d20b14b" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">この方法で作成された &lt;code&gt;Buffer&lt;/code&gt; インスタンスの基礎となるメモリ&lt;em&gt;は初期化&lt;/em&gt;され&lt;em&gt;ません&lt;/em&gt;。新しく作成された &lt;code&gt;Buffer&lt;/code&gt; の内容は不明で&lt;em&gt;あり、機密データが含まれている可能性があります&lt;/em&gt;。代わりに&lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; を&lt;/a&gt;使用して、 &lt;code&gt;Buffer&lt;/code&gt; インスタンスをゼロで初期化してください。</target>
        </trans-unit>
        <trans-unit id="4ef9fd7dad9eaa34841c0f3a9cab53f8a8cb3e58" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;Buffer&lt;/code&gt; instances created in this way is &lt;em&gt;not initialized&lt;/em&gt;. The contents of the newly created &lt;code&gt;Buffer&lt;/code&gt; are unknown and &lt;em&gt;may contain sensitive data&lt;/em&gt;. Use &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt; instead to initialize &lt;code&gt;Buffer&lt;/code&gt; instances with zeroes.</source>
          <target state="translated">この方法で作成された &lt;code&gt;Buffer&lt;/code&gt; インスタンスの基盤となるメモリ&lt;em&gt;は初期化&lt;/em&gt;され&lt;em&gt;ません&lt;/em&gt;。新しく作成された &lt;code&gt;Buffer&lt;/code&gt; の内容は不明で&lt;em&gt;あり、機密データが含まれている可能性があります&lt;/em&gt;。代わりに&lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; を&lt;/a&gt;使用して、 &lt;code&gt;Buffer&lt;/code&gt; インスタンスをゼロで初期化します。</target>
        </trans-unit>
        <trans-unit id="8a787b77e22fb6f3e77127ec8593459c30794b75" translate="yes" xml:space="preserve">
          <source>The underlying memory for &lt;code&gt;SlowBuffer&lt;/code&gt; instances is &lt;em&gt;not initialized&lt;/em&gt;. The contents of a newly created &lt;code&gt;SlowBuffer&lt;/code&gt; are unknown and may contain sensitive data. Use &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(0)&lt;/code&gt;&lt;/a&gt; to initialize a &lt;code&gt;SlowBuffer&lt;/code&gt; with zeroes.</source>
          <target state="translated">&lt;code&gt;SlowBuffer&lt;/code&gt; インスタンスの基礎となるメモリ&lt;em&gt;は初期化されていません&lt;/em&gt;。新しく作成された &lt;code&gt;SlowBuffer&lt;/code&gt; の内容は不明であり、機密データが含まれている可能性があります。&lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt; &lt;code&gt;buf.fill(0)&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;SlowBuffer&lt;/code&gt; をゼロで初期化します。</target>
        </trans-unit>
        <trans-unit id="867a8f54f53cc42a74637197afdab6fff988978b" translate="yes" xml:space="preserve">
          <source>The undocumented &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; function was originally intended for debugging and performance tuning when using the &lt;code&gt;child_process&lt;/code&gt; and &lt;code&gt;cluster&lt;/code&gt; modules on Windows. The function is not generally useful and is being removed. See discussion here: &lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https://github.com/nodejs/node/issues/18391&lt;/a&gt;</source>
          <target state="translated">ドキュメントに記載されていない &lt;code&gt;net._setSimultaneousAccepts()&lt;/code&gt; 関数は、もともとWindowsで &lt;code&gt;child_process&lt;/code&gt; および &lt;code&gt;cluster&lt;/code&gt; モジュールを使用する場合のデバッグとパフォーマンスチューニングを目的としていました。この機能は一般的には役に立たないため、削除されます。こちらのディスカッションを参照してください：&lt;a href=&quot;https://github.com/nodejs/node/issues/18391&quot;&gt;https&lt;/a&gt; : //github.com/nodejs/node/issues/18391</target>
        </trans-unit>
        <trans-unit id="4b521521f75103faccb7d51cd9d2f1b5e0e6ccaf" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;readable.setEncoding()&lt;/code&gt; will change the behavior of how the &lt;code&gt;highWaterMark&lt;/code&gt; operates in non-object mode.</source>
          <target state="translated">&lt;code&gt;readable.setEncoding()&lt;/code&gt; を使用すると、 &lt;code&gt;highWaterMark&lt;/code&gt; が非オブジェクトモードで動作する方法の動作が変更されます。</target>
        </trans-unit>
        <trans-unit id="27af502777cc48272ed80adad79f83defdbec1fe" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;'error'&lt;/code&gt; event mechanism is most common for &lt;a href=&quot;stream&quot;&gt;stream-based&lt;/a&gt; and &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;event emitter-based&lt;/a&gt; APIs, which themselves represent a series of asynchronous operations over time (as opposed to a single operation that may pass or fail).</source>
          <target state="translated">&lt;code&gt;'error'&lt;/code&gt; イベントメカニズムの使用は、&lt;a href=&quot;stream&quot;&gt;ストリームベース&lt;/a&gt;および&lt;a href=&quot;events#events_class_eventemitter&quot;&gt;イベントエミッターベースの&lt;/a&gt; APIで最も一般的です。これらは、（成功または失敗する可能性がある単一の操作ではなく）一連の非同期操作を表します。</target>
        </trans-unit>
        <trans-unit id="f9afa630637657eabbb89a3f52ab510d1fb28688" translate="yes" xml:space="preserve">
          <source>The use of the Extended CONNECT Protocol is enabled by HTTP/2 servers by using the &lt;code&gt;enableConnectProtocol&lt;/code&gt; setting:</source>
          <target state="translated">拡張接続プロトコルの使用は、 &lt;code&gt;enableConnectProtocol&lt;/code&gt; 設定を使用することにより、HTTP / 2サーバーによって有効になります。</target>
        </trans-unit>
        <trans-unit id="300d2118e20daa8e0f1e2f8f53ad243a96013499" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if Node.js is built on the Android operating system. &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Android support is experimental&lt;/a&gt;.</source>
          <target state="translated">Node.jsがAndroidオペレーティングシステムで構築されている場合は、値 &lt;code&gt;'android'&lt;/code&gt; も返される場合があります。&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;Androidのサポートは実験的なもの&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="59f4a988511ad2f772cdb10a461f62d9115d066c" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;is experimental&lt;/a&gt;.</source>
          <target state="translated">Node.jsがAndroidオペレーティングシステムでビルドされている場合、値 &lt;code&gt;'android'&lt;/code&gt; も返されることがあります。ただし、Node.jsでのAndroidサポート&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;は試験的なもの&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c07b4ef549b464279da1a098d4302bead0c3d309" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'android'&lt;/code&gt; may also be returned if the Node.js is built on the Android operating system. However, Android support in Node.js is considered &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;to be experimental&lt;/a&gt; at this time.</source>
          <target state="translated">Node.jsがAndroidオペレーティングシステムでビルドされている場合、値 &lt;code&gt;'android'&lt;/code&gt; も返されることがあります。ただし、現時点では、Node.jsでのAndroidサポートは&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os&quot;&gt;実験的なもの&lt;/a&gt;と見なされています。</target>
        </trans-unit>
        <trans-unit id="941fe2cec88cb061344cd4ca3f47041ec7d3d800" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;0&lt;/code&gt; is now accepted as a file descriptor.</source>
          <target state="translated">値 &lt;code&gt;0&lt;/code&gt; がファイル記述子として受け入れられるようになりました。</target>
        </trans-unit>
        <trans-unit id="ddbfd621c854ebb6c9668e80ef6194f125b93fb8" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;undefined&lt;/code&gt; cannot be used for cases where there is not a thrown exception due to possible ambiguity with &lt;code&gt;throw undefined;&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;undefined&lt;/code&gt; は、 &lt;code&gt;throw undefined;&lt;/code&gt; あいまいさが原因でスローされた例外がない場合には使用できません。。</target>
        </trans-unit>
        <trans-unit id="d78b331e35be7b21a30c47f32e06a07819b550e7" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; によって返される &lt;code&gt;homedir&lt;/code&gt; の値は、オペレーティングシステムによって提供されます。これは、オペレーティングシステムの応答にフォールバックする前にホームディレクトリの環境変数を照会する &lt;code&gt;os.homedir()&lt;/code&gt; の結果とは異なります。</target>
        </trans-unit>
        <trans-unit id="c22adcf410f61546f4cf7752ab0362f5a6a5606a" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;homedir&lt;/code&gt; returned by &lt;code&gt;os.userInfo()&lt;/code&gt; is provided by the operating system. This differs from the result of &lt;code&gt;os.homedir()&lt;/code&gt;, which queries several environment variables for the home directory before falling back to the operating system response.</source>
          <target state="translated">&lt;code&gt;os.userInfo()&lt;/code&gt; によって返される &lt;code&gt;homedir&lt;/code&gt; の値は、オペレーティングシステムによって提供されます。これは、オペレーティングシステムの応答にフォールバックする前にホームディレクトリのいくつかの環境変数を照会する &lt;code&gt;os.homedir()&lt;/code&gt; の結果とは異なります。</target>
        </trans-unit>
        <trans-unit id="6329830cca711ff7e90b6ad78fe1cb5caa3423e1" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;this&lt;/code&gt; is &lt;a href=&quot;globals#globals_global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; within the script.</source>
          <target state="translated">値は &lt;code&gt;this&lt;/code&gt; ある&lt;a href=&quot;globals#globals_global&quot;&gt; &lt;code&gt;global&lt;/code&gt; &lt;/a&gt;スクリプト内。</target>
        </trans-unit>
        <trans-unit id="f4c400444128a7253063ab3d3ca508cbfb8b9928" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.hash&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;urlObject.hash&lt;/code&gt; がに追加され &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f11b40efff2f11ec85da3f23b35a76cc6588c477" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.pathname&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;urlObject.pathname&lt;/code&gt; がに追加され &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5ee59ce8058895b38d6200c77460df3494139ea" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.port&lt;/code&gt; is coerced to a string and appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;urlObject.port&lt;/code&gt; の値は文字列に強制変換され、 &lt;code&gt;result&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="f9a81e556419112a8d0a931ecf395dd3247be233" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;urlObject.search&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;urlObject.search&lt;/code&gt; がに追加され &lt;code&gt;result&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7948e802953d66c2402ca8fa5d1b25f66c1e5b8" translate="yes" xml:space="preserve">
          <source>The value passed to &lt;code&gt;postMessage()&lt;/code&gt; contained an object that is not supported for transferring.</source>
          <target state="translated">&lt;code&gt;postMessage()&lt;/code&gt; に渡された値に、転送がサポートされていないオブジェクトが含まれていました。</target>
        </trans-unit>
        <trans-unit id="e79bd05eced9303cb66ff355ac9f577ee93b88c0" translate="yes" xml:space="preserve">
          <source>The value returned is an array of objects containing the following properties:</source>
          <target state="translated">返される値は、以下のプロパティを含むオブジェクトの配列です。</target>
        </trans-unit>
        <trans-unit id="ca7dd665e8fdfe267d513d08093ce8bedbca4171" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if decoding errors result in a &lt;code&gt;TypeError&lt;/code&gt; being thrown.</source>
          <target state="translated">デコードエラーの結果 &lt;code&gt;TypeError&lt;/code&gt; がスローされる &lt;code&gt;true&lt;/code&gt; 、値はtrueになります。</target>
        </trans-unit>
        <trans-unit id="f1ca85b3627e52d634af29f4b8a623574861fb2b" translate="yes" xml:space="preserve">
          <source>The value will be &lt;code&gt;true&lt;/code&gt; if the decoding result will include the byte order mark.</source>
          <target state="translated">デコード結果にバイトオーダーマークが含まれる場合、値は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="104132237db0b7ecb17081ab083c9af7c1d419d4" translate="yes" xml:space="preserve">
          <source>The variables &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; will be available inside the function body following the macro invocation.</source>
          <target state="translated">変数 &lt;code&gt;env&lt;/code&gt; と &lt;code&gt;exports&lt;/code&gt; は、マクロを呼び出した後、関数本体内で使用できます。</target>
        </trans-unit>
        <trans-unit id="1ca2642bb4155ee750ac00797ce4a46dc67ac445" translate="yes" xml:space="preserve">
          <source>The various loader hooks can be used together to accomplish wide-ranging customizations of Node.js&amp;rsquo; code loading and evaluation behaviors.</source>
          <target state="translated">さまざまなローダーフックを一緒に使用して、Node.jsのコードの読み込みと評価の動作を幅広くカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="b4d706806806ea43c9c128b45cdecd01ed8d570e" translate="yes" xml:space="preserve">
          <source>The vm context passed into the API is not yet initialized. This could happen when an error occurs (and is caught) during the creation of the context, for example, when the allocation fails or the maximum call stack size is reached when the context is created.</source>
          <target state="translated">API に渡された vm コンテキストがまだ初期化されていません。これは、コンテキストの作成中にエラーが発生した場合 (捕捉された場合)、例えば、アロケーションに失敗した場合や、コンテキストの作成時に最大コールスタックサイズに達した場合などに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1a3768d673fbfe9fe1a8bf340a95d76c85f8f437" translate="yes" xml:space="preserve">
          <source>The workaround in this situation is to call the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method to begin the flow of data:</source>
          <target state="translated">この状況での回避策は、&lt;a href=&quot;#stream_readable_resume&quot;&gt; &lt;code&gt;stream.resume()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出してデータのフローを開始することです。</target>
        </trans-unit>
        <trans-unit id="4d6edeb8cb0fc86e77857d0fda8d129467b2e13b" translate="yes" xml:space="preserve">
          <source>The worker processes are spawned using the &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.</source>
          <target state="translated">ワーカープロセスは、&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;メソッドを使用して生成されるため、IPCを介して親と通信し、サーバーハンドルをやり取りできます。</target>
        </trans-unit>
        <trans-unit id="aaa2d3ce72e4b3a43da91c13bc4934c0350da0af" translate="yes" xml:space="preserve">
          <source>The wrapper function is expected to be called exactly &lt;code&gt;exact&lt;/code&gt; times. If the function has not been called exactly &lt;code&gt;exact&lt;/code&gt; times when &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; is called, then &lt;a href=&quot;#assert_tracker_verify&quot;&gt;&lt;code&gt;tracker.verify()&lt;/code&gt;&lt;/a&gt; will throw an error.</source>
          <target state="translated">ラッパー関数は正確 &lt;code&gt;exact&lt;/code&gt; 時間に呼び出されることが期待されています。関数が正確に呼び出されていない場合は &lt;code&gt;exact&lt;/code&gt; 時に時間を&lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; が&lt;/a&gt;呼び出された後、&lt;a href=&quot;#assert_tracker_verify&quot;&gt; &lt;code&gt;tracker.verify()&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="052d8814bbbc21731431f0d8bff6bf49f919c5ba" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;request.url&lt;/code&gt; will be:</source>
          <target state="translated">次に、 &lt;code&gt;request.url&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="0c414cc316bb380ca834b2610259a592dc194ac7" translate="yes" xml:space="preserve">
          <source>Then in another file we could do:</source>
          <target state="translated">そして、別のファイルでは、私たちはすることができました。</target>
        </trans-unit>
        <trans-unit id="0bfbe586e02fe7477b1253341534ea2bb9055af6" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;myobject.h&lt;/code&gt;, the wrapper class inherits from &lt;code&gt;node::ObjectWrap&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;myobject.h&lt;/code&gt; で、ラッパークラスが &lt;code&gt;node::ObjectWrap&lt;/code&gt; 継承します。</target>
        </trans-unit>
        <trans-unit id="90426bdb684915cfaf8776137e646120a460c1af" translate="yes" xml:space="preserve">
          <source>Then, the above function can be invoked from a native add-on using the following code:</source>
          <target state="translated">そして、以下のコードを使用して、ネイティブアドオンから上記の関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="73571d4285a148f8c850321e41ee7538063e9a0e" translate="yes" xml:space="preserve">
          <source>There are a few design considerations when declaring a module that may be loaded multiple times. The documentation of &lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;context-aware addons&lt;/a&gt; provides more details.</source>
          <target state="translated">複数回ロードされる可能性のあるモジュールを宣言する場合、いくつかの設計上の考慮事項があります。詳細は、&lt;a href=&quot;addons#addons_context_aware_addons&quot;&gt;コンテキスト認識アドオン&lt;/a&gt;のドキュメントに記載されています。</target>
        </trans-unit>
        <trans-unit id="ba61ede2581496949913fe44efcbd9784cfd62d9" translate="yes" xml:space="preserve">
          <source>There are a few special headers that should be noted.</source>
          <target state="translated">注意すべき特別なヘッダがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="136d6e7557a4d34635921dd2991584bcb620088d" translate="yes" xml:space="preserve">
          <source>There are cases (for example, resolving promises) where it is necessary to have the equivalent of the scope associated with a callback in place when making certain N-API calls. If there is no other script on the stack the &lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt;&lt;code&gt;napi_open_callback_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt;&lt;code&gt;napi_close_callback_scope&lt;/code&gt;&lt;/a&gt; functions can be used to open/close the required scope.</source>
          <target state="translated">特定のN-API呼び出しを行うときに、コールバックに関連付けられたスコープに相当するものを用意する必要がある場合（たとえば、promiseの解決）があります。スタックに他のスクリプトがない場合、&lt;a href=&quot;#n_api_napi_open_callback_scope&quot;&gt; &lt;code&gt;napi_open_callback_scope&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#n_api_napi_close_callback_scope&quot;&gt; &lt;code&gt;napi_close_callback_scope&lt;/code&gt; &lt;/a&gt;関数を使用して、必要なスコープを開いたり閉じたりできます。</target>
        </trans-unit>
        <trans-unit id="dbf25be1fb4ee565e1f98036a323d619cf26ae97" translate="yes" xml:space="preserve">
          <source>There are environments in which Node.js addons may need to be loaded multiple times in multiple contexts. For example, the &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; runtime runs multiple instances of Node.js in a single process. Each instance will have its own &lt;code&gt;require()&lt;/code&gt; cache, and thus each instance will need a native addon to behave correctly when loaded via &lt;code&gt;require()&lt;/code&gt;. From the addon's perspective, this means that it must support multiple initializations.</source>
          <target state="translated">Node.jsアドオンを複数のコンテキストで複数回ロードする必要がある環境があります。たとえば、&lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt;ランタイムはNode.jsの複数のインスタンスを単一のプロセスで実行します。各インスタンスには独自の &lt;code&gt;require()&lt;/code&gt; キャッシュがあるため、 &lt;code&gt;require()&lt;/code&gt; を介してロードされたときに正しく動作するには、各インスタンスにネイティブアドオンが必要です。アドオンの観点からは、これは複数の初期化をサポートする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="efb4ff938e74b88ea0e6e30ab328bd442468ef8f" translate="yes" xml:space="preserve">
          <source>There are equivalents to the zlib options for Brotli-based streams, although these options have different ranges than the zlib ones:</source>
          <target state="translated">Brotli ベースのストリーム用の zlib オプションと同等のものがありますが、これらのオプションは zlib オプションとは異なる範囲を持っています。</target>
        </trans-unit>
        <trans-unit id="9941613492520ff34cf0deb38e791800ee7a5c07" translate="yes" xml:space="preserve">
          <source>There are four fundamental stream types within Node.js:</source>
          <target state="translated">Node.jsの中には基本的に4つのストリームタイプがあります。</target>
        </trans-unit>
        <trans-unit id="dde1500fca17353440ae8484822501b542d81fb1" translate="yes" xml:space="preserve">
          <source>There are four types of specifiers:</source>
          <target state="translated">指定子には4つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="8a931ff5d55f1c3afbe2f95105c6e77b48277bb0" translate="yes" xml:space="preserve">
          <source>There are many stream objects provided by Node.js. For instance, a &lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;request to an HTTP server&lt;/a&gt; and &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; are both stream instances.</source>
          <target state="translated">Node.jsによって提供される多くのストリームオブジェクトがあります。たとえば&lt;a href=&quot;http#http_class_http_incomingmessage&quot;&gt;、HTTPサーバーへ&lt;/a&gt;のリクエストと&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;はどちらもストリームインスタンスです。</target>
        </trans-unit>
        <trans-unit id="489828fe1e889442eeda5f8face869dde3d76a80" translate="yes" xml:space="preserve">
          <source>There are occasions where &lt;code&gt;napi_instanceof()&lt;/code&gt; is insufficient for ensuring that a JavaScript object is a wrapper for a certain native type. This is the case especially when wrapped JavaScript objects are passed back into the addon via static methods rather than as the &lt;code&gt;this&lt;/code&gt; value of prototype methods. In such cases there is a chance that they may be unwrapped incorrectly.</source>
          <target state="translated">JavaScriptオブジェクトが特定のネイティブ型のラッパーであることを保証するには、 &lt;code&gt;napi_instanceof()&lt;/code&gt; では不十分な場合があります。これは特に、ラップされたJavaScriptオブジェクトが、プロトタイプメソッドの &lt;code&gt;this&lt;/code&gt; 値としてではなく、静的メソッドを介してアドオンに返される場合に当てはまります。このような場合、誤ってアンラップされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1b08753e896dc3b6a7c1f8c73d6f29652afc9286" translate="yes" xml:space="preserve">
          <source>There are ongoing efforts to make the latter code possible.</source>
          <target state="translated">後者のコードを可能にするための努力は現在進行形で行われています。</target>
        </trans-unit>
        <trans-unit id="cca70f7a24329f2fb4b95221882a8404c5c05645" translate="yes" xml:space="preserve">
          <source>There are only 5 TLSv1.3 cipher suites:</source>
          <target state="translated">TLSv1.3 の暗号スイートは 5 つしかありません。</target>
        </trans-unit>
        <trans-unit id="5431d0afa6129bcba426cef1e17c022c359e7b17" translate="yes" xml:space="preserve">
          <source>There are several options and other constants available for Brotli-based streams:</source>
          <target state="translated">Brotli ベースのストリームには、いくつかのオプションやその他の定数が用意されています。</target>
        </trans-unit>
        <trans-unit id="42e16077da0035c3069c49856eb3033b4b72553d" translate="yes" xml:space="preserve">
          <source>There are several options that can be set on Brotli encoders, affecting compression efficiency and speed. Both the keys and the values can be accessed as properties of the &lt;code&gt;zlib.constants&lt;/code&gt; object.</source>
          <target state="translated">Brotliエンコーダーで設定できるオプションがいくつかあり、圧縮効率と速度に影響します。キーと値の両方に、 &lt;code&gt;zlib.constants&lt;/code&gt; オブジェクトのプロパティとしてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="68a19ad87ed88b1d5cfb1b645ade3d15711bd59d" translate="yes" xml:space="preserve">
          <source>There are several types of error conditions that may arise when using the &lt;code&gt;http2&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;http2&lt;/code&gt; モジュールの使用時に発生する可能性のあるエラー状態には、いくつかのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="26c7f747d478773cb0c7b9fd07d4c61acf3a4a1f" translate="yes" xml:space="preserve">
          <source>There are some cases where it is necessary to trigger a refresh of the underlying readable stream mechanisms, without actually consuming any data. In such cases, it is possible to call &lt;code&gt;readable.read(0)&lt;/code&gt;, which will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">実際にデータを消費せずに、基盤となる読み取り可能なストリームメカニズムの更新をトリガーする必要がある場合があります。そのような場合は、常に &lt;code&gt;null&lt;/code&gt; を返すreadible.read &lt;code&gt;readable.read(0)&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="dd9ef41883fe3bdd2c2207efb8d44bad0186fe1c" translate="yes" xml:space="preserve">
          <source>There are subtle consequences in choosing one over the other, please consult the &lt;a href=&quot;#dns_implementation_considerations&quot;&gt;Implementation considerations section&lt;/a&gt; for more information.</source>
          <target state="translated">どちらを選択するかによって微妙な影響があります。詳細については、&lt;a href=&quot;#dns_implementation_considerations&quot;&gt;実装に関する考慮事項のセクション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d6fbe184691d2e54bbf5609f598f34c9f95c95a" translate="yes" xml:space="preserve">
          <source>There are three options for implementing Addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless you need direct access to functionality which is not exposed by N-API, use N-API. Refer to the section &lt;a href=&quot;n-api&quot;&gt;C/C++ Addons - N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">アドオンの実装には、N-API、nan、または内部V8、libuv、Node.jsライブラリの直接使用の3つのオプションがあります。 N-APIで公開されていない機能に直接アクセスする必要がない限り、N-APIを使用してください。&lt;a href=&quot;n-api&quot;&gt;N-APIの&lt;/a&gt;詳細については、「C / C ++アドオン-N-API」を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a84e67ac6afa19b0bb7e32d3243ac6912e617a6" translate="yes" xml:space="preserve">
          <source>There are three options for implementing addons: N-API, nan, or direct use of internal V8, libuv and Node.js libraries. Unless there is a need for direct access to functionality which is not exposed by N-API, use N-API. Refer to &lt;a href=&quot;n-api&quot;&gt;C/C++ addons with N-API&lt;/a&gt; for more information on N-API.</source>
          <target state="translated">アドオンを実装するには、N-API、nan、または内部V8、libuv、Node.jsライブラリの直接使用の3つのオプションがあります。N-APIで公開されていない機能に直接アクセスする必要がない限り、N-APIを使用してください。&lt;a href=&quot;n-api&quot;&gt;N-API&lt;/a&gt;の詳細については、N-APIを使用したC / C ++アドオンを参照してください。</target>
        </trans-unit>
        <trans-unit id="e769f43d8b2c2a24eea5250cfae5e60ed961a3d5" translate="yes" xml:space="preserve">
          <source>There are two key differences between the Node.js &lt;code&gt;EventTarget&lt;/code&gt; and the &lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt; Web API&lt;/a&gt;:</source>
          <target state="translated">Node.jsの間に2つの重要な違いがある &lt;code&gt;EventTarget&lt;/code&gt; と&lt;a href=&quot;https://dom.spec.whatwg.org/#eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; のWeb APIは&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="9db4014699f46bd5890e62e4dba34c251b486d78" translate="yes" xml:space="preserve">
          <source>There are two ways to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; から新しい&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンスを作成する方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="8f793dc4fcaeca43b4ba873686274c2e8f8925a7" translate="yes" xml:space="preserve">
          <source>There can be multiple persistent references created which refer to the same object, each of which will either keep the object live or not based on its individual count.</source>
          <target state="translated">同じオブジェクトを参照する複数の永続的な参照を作成することができ、それぞれがオブジェクトをライブに保つか、個々のカウントに基づいてそうでないかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="0fe3f1751523750e75dcc6278c56537ba6011fcb" translate="yes" xml:space="preserve">
          <source>There is a special case when sending a &lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; message. Messages containing a &lt;code&gt;NODE_&lt;/code&gt; prefix in the &lt;code&gt;cmd&lt;/code&gt; property are reserved for use within Node.js core and will not be emitted in the child's &lt;a href=&quot;process#process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event. Rather, such messages are emitted using the &lt;code&gt;'internalMessage'&lt;/code&gt; event and are consumed internally by Node.js. Applications should avoid using such messages or listening for &lt;code&gt;'internalMessage'&lt;/code&gt; events as it is subject to change without notice.</source>
          <target state="translated">&lt;code&gt;{cmd: 'NODE_foo'}&lt;/code&gt; メッセージを送信する場合、特別なケースがあります。 &lt;code&gt;cmd&lt;/code&gt; プロパティに &lt;code&gt;NODE_&lt;/code&gt; プレフィックスを含むメッセージは、Node.jsコア内での使用のために予約されており、子の&lt;a href=&quot;process#process_event_message&quot;&gt; &lt;code&gt;'message'&lt;/code&gt; &lt;/a&gt;イベントでは発行されません。むしろ、そのようなメッセージは &lt;code&gt;'internalMessage'&lt;/code&gt; イベントを使用して発行され、Node.jsによって内部的に消費されます。このようなメッセージは予告なしに変更される可能性があるため、アプリケーションはそのようなメッセージの使用や &lt;code&gt;'internalMessage'&lt;/code&gt; イベントの待機を回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="7f4a67800306ac64b920c2be0c83ae4d3007f584" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;PROMISE&lt;/code&gt; resource type, which is used to track &lt;code&gt;Promise&lt;/code&gt; instances and asynchronous work scheduled by them.</source>
          <target state="translated">&lt;code&gt;PROMISE&lt;/code&gt; リソースタイプもあり、 &lt;code&gt;Promise&lt;/code&gt; インスタンスとそれらによってスケジュールされた非同期作業を追跡するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e31048695af7ec9e8cc2c7c604352f23bc3184d4" translate="yes" xml:space="preserve">
          <source>There is an edge case worth noting when using the &lt;code&gt;events.once()&lt;/code&gt; function to await multiple events emitted on in the same batch of &lt;code&gt;process.nextTick()&lt;/code&gt; operations, or whenever multiple events are emitted synchronously. Specifically, because the &lt;code&gt;process.nextTick()&lt;/code&gt; queue is drained before the &lt;code&gt;Promise&lt;/code&gt; microtask queue, and because &lt;code&gt;EventEmitter&lt;/code&gt; emits all events synchronously, it is possible for &lt;code&gt;events.once()&lt;/code&gt; to miss an event.</source>
          <target state="translated">&lt;code&gt;events.once()&lt;/code&gt; 関数を使用して &lt;code&gt;process.nextTick()&lt;/code&gt; 操作の同じバッチで発行される複数のイベントを待機する場合、または複数のイベントが同期して発行される場合は、注目に値するエッジケースがあります。具体的には、 &lt;code&gt;process.nextTick()&lt;/code&gt; キューは &lt;code&gt;Promise&lt;/code&gt; マイクロタスクキューの前に排出され、 &lt;code&gt;EventEmitter&lt;/code&gt; はすべてのイベントを同期的に発行するため、 &lt;code&gt;events.once()&lt;/code&gt; がイベントを見逃す可能性があります。</target>
        </trans-unit>
        <trans-unit id="741d73c54f957fe61e35c6abd8637dba21b785cc" translate="yes" xml:space="preserve">
          <source>There is no equivalent to this API in browsers.</source>
          <target state="translated">ブラウザにはこのAPIに相当するものはありません。</target>
        </trans-unit>
        <trans-unit id="3a7ccafeacce74e97b6782160f11feb38555669c" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using asynchronous methods. So the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation may complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">非同期メソッドを使用する場合の順序は保証されていません。ため、エラーを起こしやすい以下はそう &lt;code&gt;fs.stat()&lt;/code&gt; 操作をする前に完了する可能性が &lt;code&gt;fs.rename()&lt;/code&gt; 操作：</target>
        </trans-unit>
        <trans-unit id="70935f1d3d5e4fd62d42c2c159e6aea9b6c95079" translate="yes" xml:space="preserve">
          <source>There is no guaranteed ordering when using either the callback or promise-based methods. For example, the following is prone to error because the &lt;code&gt;fs.stat()&lt;/code&gt; operation might complete before the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">コールバックまたはpromiseベースのメソッドを使用する場合、順序は保証されません。ので、例えば、以下は、エラーを起こしやすいです &lt;code&gt;fs.stat()&lt;/code&gt; 操作が完了する前にあります &lt;code&gt;fs.rename()&lt;/code&gt; 操作：</target>
        </trans-unit>
        <trans-unit id="9499af4d83f7a3933b926f5089a91e801e6f9b3b" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time &amp;mdash; possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">拒否を常に処理できる &lt;code&gt;Promise&lt;/code&gt; チェーンの最上位という概念はありません。本質的に非同期であるため、 &lt;code&gt;Promise&lt;/code&gt; の拒否は、将来の時点で処理できます。おそらく、 &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが発行されるのにかかるイベントループの順番よりもはるかに遅くなります。</target>
        </trans-unit>
        <trans-unit id="3485b253ac4903049655572c6b7db990c6f6ad19" translate="yes" xml:space="preserve">
          <source>There is no notion of a top level for a &lt;code&gt;Promise&lt;/code&gt; chain at which rejections can always be handled. Being inherently asynchronous in nature, a &lt;code&gt;Promise&lt;/code&gt; rejection can be handled at a future point in time, possibly much later than the event loop turn it takes for the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event to be emitted.</source>
          <target state="translated">拒否を常に処理できる &lt;code&gt;Promise&lt;/code&gt; チェーンのトップレベルの概念はありません。本質的に非同期であるため、 &lt;code&gt;Promise&lt;/code&gt; の拒否は将来の時点で処理できます。おそらく、 &lt;code&gt;'unhandledRejection'&lt;/code&gt; イベントが発行されるまでにかかるイベントループターンよりもはるかに遅くなります。</target>
        </trans-unit>
        <trans-unit id="d41af3e735ab2e346b33ec05065393fa3da84547" translate="yes" xml:space="preserve">
          <source>There is no requirement that the output be the same size as the input, the same number of chunks, or arrive at the same time. For example, a &lt;code&gt;Hash&lt;/code&gt; stream will only ever have a single chunk of output which is provided when the input is ended. A &lt;code&gt;zlib&lt;/code&gt; stream will produce output that is either much smaller or much larger than its input.</source>
          <target state="translated">出力が入力と同じサイズ、同じ数のチャンク、または同時に到着する必要はありません。たとえば、 &lt;code&gt;Hash&lt;/code&gt; ストリームには、入力が終了したときに提供される単一の出力チャンクしかありません。 &lt;code&gt;zlib&lt;/code&gt; ストリームは、いずれかのはるかに小さい、または、その入力よりもはるかに大きい出力を生成します。</target>
        </trans-unit>
        <trans-unit id="f6752fbe1232a75370c52187c18b0bfebe5cef5a" translate="yes" xml:space="preserve">
          <source>There is no semi-colon after &lt;code&gt;NODE_MODULE&lt;/code&gt; as it's not a function (see &lt;code&gt;node.h&lt;/code&gt;).</source>
          <target state="translated">関数ではないため、 &lt;code&gt;NODE_MODULE&lt;/code&gt; の後にセミコロンはありません（ &lt;code&gt;node.h&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="1761405f7560e0613a6cad3aca984566accc5d24" translate="yes" xml:space="preserve">
          <source>There is no way to prevent the exiting of the event loop at this point, and once all &lt;code&gt;'exit'&lt;/code&gt; listeners have finished running the Node.js process will terminate.</source>
          <target state="translated">この時点でイベントループの終了を防ぐ方法はありません。すべての &lt;code&gt;'exit'&lt;/code&gt; リスナーが完了すると、Node.jsプロセスの実行が終了します。</target>
        </trans-unit>
        <trans-unit id="c8d9cd97680b932da70dad66e0e134e8da83ab30" translate="yes" xml:space="preserve">
          <source>There is not normally a reason to call this method because &lt;code&gt;ECDH&lt;/code&gt; only requires a private key and the other party's public key to compute the shared secret. Typically either &lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt;&lt;code&gt;ecdh.generateKeys()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; will be called. The &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; method attempts to generate the public point/key associated with the private key being set.</source>
          <target state="translated">&lt;code&gt;ECDH&lt;/code&gt; が共有秘密を計算するために必要なのは秘密鍵と相手側の公開鍵だけなので、通常、このメソッドを呼び出す理由はありません。通常、&lt;a href=&quot;#crypto_ecdh_generatekeys_encoding_format&quot;&gt; &lt;code&gt;ecdh.generateKeys()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;が呼び出されます。&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;秘密鍵が設定されているに関連する公開点/キーを生成する方法を試み。</target>
        </trans-unit>
        <trans-unit id="3f3585e14ee5cd0674d2bfffe8a62484838e8f1d" translate="yes" xml:space="preserve">
          <source>There may be a delay between the &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'exit'&lt;/code&gt; events. These events can be used to detect if the process is stuck in a cleanup or if there are long-living connections.</source>
          <target state="translated">&lt;code&gt;'disconnect'&lt;/code&gt; &lt;code&gt;'exit'&lt;/code&gt; イベントと「終了」イベントの間に遅延が発生する可能性があります。これらのイベントを使用して、プロセスがクリーンアップでスタックしているかどうか、または長時間の接続があるかどうかを検出できます。</target>
        </trans-unit>
        <trans-unit id="bba3543dee9ea91f94206f53de987930f9874179" translate="yes" xml:space="preserve">
          <source>There was a bug in Node.js or incorrect usage of Node.js internals. To fix the error, open an issue at &lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https://github.com/nodejs/node/issues&lt;/a&gt;.</source>
          <target state="translated">Node.jsにバグがあったか、Node.js内部の使い方が間違っていました。エラーを修正するには、&lt;a href=&quot;https://github.com/nodejs/node/issues&quot;&gt;https：//github.com/nodejs/node/issuesで&lt;/a&gt;問題を開きます。</target>
        </trans-unit>
        <trans-unit id="db2fa69bb8b4d9e6a5a4775222f61ead5ed51450" translate="yes" xml:space="preserve">
          <source>There was an attempt to use a &lt;code&gt;MessagePort&lt;/code&gt; instance in a closed state, usually after &lt;code&gt;.close()&lt;/code&gt; has been called.</source>
          <target state="translated">通常は &lt;code&gt;.close()&lt;/code&gt; が呼び出された後、閉じた状態で &lt;code&gt;MessagePort&lt;/code&gt; インスタンスを使用しようとしました。</target>
        </trans-unit>
        <trans-unit id="8c2872699c52fca493a736da697cd1c55a7b7f65" translate="yes" xml:space="preserve">
          <source>Therefore to read a file's whole contents from a &lt;code&gt;readable&lt;/code&gt;, it is necessary to collect chunks across multiple &lt;code&gt;'readable'&lt;/code&gt; events:</source>
          <target state="translated">したがって、 &lt;code&gt;readable&lt;/code&gt; ファイルからファイルの内容全体を読み取るには、複数の &lt;code&gt;'readable'&lt;/code&gt; イベントにわたってチャンクを収集する必要があります。</target>
        </trans-unit>
        <trans-unit id="754f342c55d3348d9516f90760098a1bea3cfcb1" translate="yes" xml:space="preserve">
          <source>These APIs provide the type &lt;code&gt;napi_threadsafe_function&lt;/code&gt; as well as APIs to create, destroy, and call objects of this type. &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; creates a persistent reference to a &lt;code&gt;napi_value&lt;/code&gt; that holds a JavaScript function which can be called from multiple threads. The calls happen asynchronously. This means that values with which the JavaScript callback is to be called will be placed in a queue, and, for each value in the queue, a call will eventually be made to the JavaScript function.</source>
          <target state="translated">これらのAPIは、タイプ &lt;code&gt;napi_threadsafe_function&lt;/code&gt; と、このタイプのオブジェクトを作成、破棄、および呼び出すためのAPIを提供します。 &lt;code&gt;napi_create_threadsafe_function()&lt;/code&gt; は、複数のスレッドから呼び出すことができるJavaScript関数を保持する &lt;code&gt;napi_value&lt;/code&gt; への永続的な参照を作成します。呼び出しは非同期で行われます。これは、JavaScriptコールバックが呼び出される値がキューに入れられ、キュー内の各値に対して、最終的にJavaScript関数が呼び出されることを意味します。</target>
        </trans-unit>
        <trans-unit id="a36e985e57f05c7e84c751dd0c4673cc6bb7e955" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following:</source>
          <target state="translated">これらのAPIは、以下のいずれかの操作をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ab3247d3394f4459aabb0d5e7cfa8d13e0f7db8b" translate="yes" xml:space="preserve">
          <source>These APIs support doing one of the following: 1. Coerce JavaScript values to specific JavaScript types (such as &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;). 2. Check the type of a JavaScript value. 3. Check for equality between two JavaScript values.</source>
          <target state="translated">これらのAPIは、次のいずれかの実行をサポートします。1. JavaScript値を特定のJavaScriptタイプ（ &lt;code&gt;Number&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; など）に強制変換します。2. JavaScript値のタイプを確認します。3. 2つのJavaScript値が等しいかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f7a10234d3fe5a51cc4325ae088318cfc712a583" translate="yes" xml:space="preserve">
          <source>These CommonJS variables are not available in ES modules.</source>
          <target state="translated">これらのCommonJS変数はESモジュールでは使用できません。</target>
        </trans-unit>
        <trans-unit id="749928e253ba002f7186e912db98b776c93c0d85" translate="yes" xml:space="preserve">
          <source>These advanced options are available for controlling decompression:</source>
          <target state="translated">これらの高度なオプションは、減圧を制御するために利用可能です。</target>
        </trans-unit>
        <trans-unit id="0b9f62edc3aaf20d90f4845d04676a42b04260ea" translate="yes" xml:space="preserve">
          <source>These are mostly for historic reasons.</source>
          <target state="translated">これらはほとんどが歴史的な理由によるものです。</target>
        </trans-unit>
        <trans-unit id="487b22b66f8d184a53a9dcfbab6f9a187dd0c70a" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backward incompatibility, but they are also expected by some users.</source>
          <target state="translated">これらの動作は歴史的な理由もあり、変更すると後方互換性がなくなるからですが、一部のユーザーには期待されています。</target>
        </trans-unit>
        <trans-unit id="f723d23d902d3dc9557352556e6b5d454055d450" translate="yes" xml:space="preserve">
          <source>These behaviors are partly for historical reasons, as changing them would create backwards incompatibility, but they are also expected by some users.</source>
          <target state="translated">これらの動作は歴史的な理由もあり、変更すると後方互換性がなくなるからですが、一部のユーザーには期待されています。</target>
        </trans-unit>
        <trans-unit id="6a5b136b6b60c4ed00d8df2d82c0a6a7ad030249" translate="yes" xml:space="preserve">
          <source>These errors have never been released, but had been present on master between releases.</source>
          <target state="translated">これらのエラーはリリースされたことはありませんが、リリースの間にマスターに存在していました。</target>
        </trans-unit>
        <trans-unit id="d444a6c59b18503b6828306190b3da244c05eaa9" translate="yes" xml:space="preserve">
          <source>These functions are implemented quite differently than &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt;. They do not use &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; and they &lt;em&gt;always&lt;/em&gt; perform a DNS query on the network. This network communication is always done asynchronously, and does not use libuv's threadpool.</source>
          <target state="translated">これらの関数は、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;とはまったく異なる方法で実装されます。&lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt;を使用せず、&lt;em&gt;常に&lt;/em&gt;ネットワーク上でDNSクエリを実行します。このネットワーク通信は常に非同期で行われ、libuvのスレッドプールを使用しません。</target>
        </trans-unit>
        <trans-unit id="24cdde9c4ce42694fdfee71a149f5983befb138f" translate="yes" xml:space="preserve">
          <source>These functions implement the following interfaces:</source>
          <target state="translated">これらの関数は、以下のインタフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="067e9ba51bba0fff71ca73b5284b6b724824a791" translate="yes" xml:space="preserve">
          <source>These objects are available in all modules. The following variables may appear to be global but are not. They exist only in the scope of modules, see the &lt;a href=&quot;modules&quot;&gt;module system documentation&lt;/a&gt;:</source>
          <target state="translated">これらのオブジェクトはすべてのモジュールで使用できます。次の変数はグローバルであるように見えますが、グローバルではありません。それらはモジュールのスコープ内にのみ存在し&lt;a href=&quot;modules&quot;&gt;ます。モジュールシステムのドキュメントを&lt;/a&gt;参照してください：</target>
        </trans-unit>
        <trans-unit id="a92a2040e1759234554eb3d95876ef117287affb" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;.</source>
          <target state="translated">これらのstatオブジェクトは &lt;code&gt;fs.Stat&lt;/code&gt; のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="81ffaa5610a923a366ff2fb68c7b7ae7e89cef81" translate="yes" xml:space="preserve">
          <source>These stat objects are instances of &lt;code&gt;fs.Stat&lt;/code&gt;. If the &lt;code&gt;bigint&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, the numeric values in these objects are specified as &lt;code&gt;BigInt&lt;/code&gt;s.</source>
          <target state="translated">これらのstatオブジェクトは &lt;code&gt;fs.Stat&lt;/code&gt; のインスタンスです。場合 &lt;code&gt;bigint&lt;/code&gt; オプションがある &lt;code&gt;true&lt;/code&gt; 、これらのオブジェクト内の数値は次のように指定されている &lt;code&gt;BigInt&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="a7f5c6bb153f7ecd9533f0a1d47aa3444a5f2641" translate="yes" xml:space="preserve">
          <source>These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals:</source>
          <target state="translated">これらの時間は、過去の任意の時間との相対的なものであり、一日の時間とは無関係であり、したがって、時計のドリフトの対象ではありません。主な用途は、間隔の間のパフォーマンスを測定するためのものです。</target>
        </trans-unit>
        <trans-unit id="0406dde620b7e64bbd32e4cb8c0bbc3121260bb2" translate="yes" xml:space="preserve">
          <source>They are used internally by &lt;a href=&quot;console#console_console_log_data_args&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;console#console_console_error_data_args&quot;&gt;&lt;code&gt;console.error()&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">これらはそれぞれ&lt;a href=&quot;console#console_console_log_data_args&quot;&gt; &lt;code&gt;console.log()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;console#console_console_error_data_args&quot;&gt; &lt;code&gt;console.error()&lt;/code&gt; &lt;/a&gt;によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="b30b2dac4cfcbca285a7b7116de61f5f1237d363" translate="yes" xml:space="preserve">
          <source>They do not use the same set of configuration files than what &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses. For instance, &lt;em&gt;they do not use the configuration from &lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/em&gt;.</source>
          <target state="translated">これらは、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; が&lt;/a&gt;使用するものと同じ構成ファイルのセットを使用しません。たとえば、&lt;em&gt;彼らは &lt;code&gt;/etc/hosts&lt;/code&gt; の&lt;/em&gt;&lt;em&gt;設定を使用しません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2ea56235428b28cef1f2f9acfba69b76b619221b" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">この「Hello world」の例は、C++で書かれたシンプルなアドオンで、以下のJavaScriptのコードに相当します。</target>
        </trans-unit>
        <trans-unit id="692dfc84db615cfec92e46e7af4aeebc4271f4fe" translate="yes" xml:space="preserve">
          <source>This &quot;Hello world&quot; example is a simple addon, written in C++, that is the equivalent of the following JavaScript code:</source>
          <target state="translated">この「Hello world」の例は、C++で書かれたシンプルなアドオンで、以下の JavaScript コードに相当します。</target>
        </trans-unit>
        <trans-unit id="66e9a4260b22fdad1a565eaa4103d9039fdbf381" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;ArrayBuffer&lt;/code&gt; is not guaranteed to correspond exactly to the original &lt;code&gt;Buffer&lt;/code&gt;. See the notes on &lt;code&gt;buf.byteOffset&lt;/code&gt; for details.</source>
          <target state="translated">この &lt;code&gt;ArrayBuffer&lt;/code&gt; は、元の &lt;code&gt;Buffer&lt;/code&gt; に正確に対応することが保証されていません。詳細については、 &lt;code&gt;buf.byteOffset&lt;/code&gt; の注記を参照してください。</target>
        </trans-unit>
        <trans-unit id="2512370bd56df49b594b7a713133b58f497c3cd9" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;Error&lt;/code&gt; is thrown when a read is attempted on a TTY &lt;code&gt;WriteStream&lt;/code&gt;, such as &lt;code&gt;process.stdout.on('data')&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Error&lt;/code&gt; は、 &lt;code&gt;process.stdout.on('data')&lt;/code&gt; などのTTY &lt;code&gt;WriteStream&lt;/code&gt; で読み取りが試行されるとスローされます。</target>
        </trans-unit>
        <trans-unit id="39742e84897b18f0eedc2af5e9fd8236a7c65b9b" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data backed by the passed in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">このAPIは、 &lt;code&gt;node::Buffer&lt;/code&gt; オブジェクトを割り当て、渡されたバッファーによってバッキングされるデータで初期化します。これはまだ完全にサポートされているデータ構造ですが、ほとんどの場合、 &lt;code&gt;TypedArray&lt;/code&gt; を使用することで十分です。</target>
        </trans-unit>
        <trans-unit id="9f9f6383f8d100211478dc2ef9a8cec62954908a" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object and initializes it with data copied from the passed-in buffer. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">このAPIは、 &lt;code&gt;node::Buffer&lt;/code&gt; オブジェクトを割り当て、渡されたバッファーからコピーされたデータで初期化します。これはまだ完全にサポートされているデータ構造ですが、ほとんどの場合、 &lt;code&gt;TypedArray&lt;/code&gt; を使用することで十分です。</target>
        </trans-unit>
        <trans-unit id="735a91d83874cde7676b3e25ee0191cf41805cb1" translate="yes" xml:space="preserve">
          <source>This API allocates a &lt;code&gt;node::Buffer&lt;/code&gt; object. While this is still a fully-supported data structure, in most cases using a &lt;code&gt;TypedArray&lt;/code&gt; will suffice.</source>
          <target state="translated">このAPIは、 &lt;code&gt;node::Buffer&lt;/code&gt; オブジェクトを割り当てます。これはまだ完全にサポートされているデータ構造ですが、ほとんどの場合、 &lt;code&gt;TypedArray&lt;/code&gt; を使用することで十分です。</target>
        </trans-unit>
        <trans-unit id="6b77dc094889eb2692e801516cd866717730e4b3" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript &lt;code&gt;Date&lt;/code&gt; object.</source>
          <target state="translated">このAPIは、JavaScript &lt;code&gt;Date&lt;/code&gt; オブジェクトを割り当てます。</target>
        </trans-unit>
        <trans-unit id="c196cb0b40fe69112ca66200c4a74b7260d08ead" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code using &lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt;&lt;code&gt;napi_get_value_external&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このAPIは、外部データが添付されたJavaScript値を割り当てます。これは、JavaScriptコードを介して外部データを渡すために使用されるため、後で&lt;a href=&quot;#n_api_napi_get_value_external&quot;&gt; &lt;code&gt;napi_get_value_external&lt;/code&gt; &lt;/a&gt;を使用してネイティブコードで取得できます。</target>
        </trans-unit>
        <trans-unit id="7998ea99d1cc838811e0d8df86d28e4a62bc8591" translate="yes" xml:space="preserve">
          <source>This API allocates a JavaScript value with external data attached to it. This is used to pass external data through JavaScript code, so it can be retrieved later by native code. The API allows the caller to pass in a finalize callback, in case the underlying native resource needs to be cleaned up when the external JavaScript value gets collected.</source>
          <target state="translated">本APIは、外部データをアタッチしたJavaScriptの値を確保します。これは、JavaScript コードを通して外部データを渡すために使用され、後でネイティブコードで取得できるようにします。外部の JavaScript の値が収集されたときに、基礎となるネイティブリソースをクリーンアップする必要がある場合に備えて、この API を使用して呼び出し元に finalize コールバックを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="363266f752f8dea9471bad2f288fed6c4c06c654" translate="yes" xml:space="preserve">
          <source>This API allocates a default JavaScript &lt;code&gt;Object&lt;/code&gt;. It is the equivalent of doing &lt;code&gt;new Object()&lt;/code&gt; in JavaScript.</source>
          <target state="translated">このAPIは、デフォルトのJavaScript &lt;code&gt;Object&lt;/code&gt; 割り当てます。これは、JavaScriptで &lt;code&gt;new Object()&lt;/code&gt; を実行するのと同じです。</target>
        </trans-unit>
        <trans-unit id="a39488fe93d490d5976e523becbfa7322dd2f6d7" translate="yes" xml:space="preserve">
          <source>This API allocates a work object that is used to execute logic asynchronously. It should be freed using &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt; once the work is no longer required.</source>
          <target state="translated">このAPIは、ロジックを非同期に実行するために使用される作業オブジェクトを割り当てます。作業が必要なくなったら、&lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt; &lt;code&gt;napi_delete_async_work&lt;/code&gt; &lt;/a&gt;を使用して解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="d63e8ba62f11bb852241a2b0aa7b58d201a30b7b" translate="yes" xml:space="preserve">
          <source>This API allows an add-on author to create a function object in native code. This is the primary mechanism to allow calling &lt;em&gt;into&lt;/em&gt; the add-on's native code &lt;em&gt;from&lt;/em&gt; JavaScript.</source>
          <target state="translated">このAPIを使用すると、アドオン作成者はネイティブコードで関数オブジェクトを作成できます。これは、呼び出しできるようにする主要なメカニズムである&lt;em&gt;に&lt;/em&gt;アドオンのネイティブコード&lt;em&gt;から&lt;/em&gt; JavaScriptを。</target>
        </trans-unit>
        <trans-unit id="8dd5fc62dd12610ddf00da4580f78086ea7a8a67" translate="yes" xml:space="preserve">
          <source>This API associates &lt;code&gt;data&lt;/code&gt; with the currently running Agent. &lt;code&gt;data&lt;/code&gt; can later be retrieved using &lt;code&gt;napi_get_instance_data()&lt;/code&gt;. Any existing data associated with the currently running Agent which was set by means of a previous call to &lt;code&gt;napi_set_instance_data()&lt;/code&gt; will be overwritten. If a &lt;code&gt;finalize_cb&lt;/code&gt; was provided by the previous call, it will not be called.</source>
          <target state="translated">このAPI は、現在実行中のエージェントに &lt;code&gt;data&lt;/code&gt; を関連付けます。 &lt;code&gt;data&lt;/code&gt; は後で &lt;code&gt;napi_get_instance_data()&lt;/code&gt; を使用して取得できます。 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; への以前の呼び出しによって設定された、現在実行中のエージェントに関連付けられている既存のデータは上書きされます。 &lt;code&gt;finalize_cb&lt;/code&gt; が前の呼び出しによって提供された場合、それは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="bb9807accb784346da4b294170dca41195385db4" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the &lt;code&gt;key&lt;/code&gt; own property from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">このAPIは、 &lt;code&gt;object&lt;/code&gt; から &lt;code&gt;key&lt;/code&gt; 自体のプロパティを削除しようとします。</target>
        </trans-unit>
        <trans-unit id="c14effd61c957bf8b764c352d4e546b6d39372bb" translate="yes" xml:space="preserve">
          <source>This API attempts to delete the specified &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定された &lt;code&gt;index&lt;/code&gt; を &lt;code&gt;object&lt;/code&gt; から削除しようとします。</target>
        </trans-unit>
        <trans-unit id="eefd9d0b3eff1797f4ec8fa9a473e7edc0d2a2cb" translate="yes" xml:space="preserve">
          <source>This API can be called even if there is a pending JavaScript exception.</source>
          <target state="translated">このAPIは、保留中のJavaScriptの例外があっても呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2de8f84612348b342d10646507923c0aa5b2c0a3" translate="yes" xml:space="preserve">
          <source>This API cancels queued work if it has not yet been started. If it has already started executing, it cannot be cancelled and &lt;code&gt;napi_generic_failure&lt;/code&gt; will be returned. If successful, the &lt;code&gt;complete&lt;/code&gt; callback will be invoked with a status value of &lt;code&gt;napi_cancelled&lt;/code&gt;. The work should not be deleted before the &lt;code&gt;complete&lt;/code&gt; callback invocation, even if it has been successfully cancelled.</source>
          <target state="translated">このAPIは、まだ開始されていない場合、キューに入れられた作業をキャンセルします。すでに実行を開始している場合はキャンセルできず、 &lt;code&gt;napi_generic_failure&lt;/code&gt; が返されます。成功すると、 &lt;code&gt;complete&lt;/code&gt; コールバックが &lt;code&gt;napi_cancelled&lt;/code&gt; のステータス値で呼び出されます。コールバックが正常にキャンセルされた場合でも、 &lt;code&gt;complete&lt;/code&gt; コールバック呼び出しの前に作業を削除しないでください。</target>
        </trans-unit>
        <trans-unit id="57431dbca7e08b81d45fb5a6037ae282b5c085fc" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named own property. &lt;code&gt;key&lt;/code&gt; must be a string or a &lt;code&gt;Symbol&lt;/code&gt;, or an error will be thrown. N-API will not perform any conversion between data types.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; に名前付きの独自のプロパティがあるかどうかを確認します。 &lt;code&gt;key&lt;/code&gt; は文字列または &lt;code&gt;Symbol&lt;/code&gt; である必要があります。そうでない場合、エラーがスローされます。N-APIはデータ型間の変換を実行しません。</target>
        </trans-unit>
        <trans-unit id="df00668a39c6c8f23284d619d34702ee2bdec177" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in has the named property.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; に名前付きプロパティがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="77017a1b76496c7920bf9d3ddbbe51f4eec0e781" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">このAPI は、渡された &lt;code&gt;Object&lt;/code&gt; が &lt;code&gt;DataView&lt;/code&gt; かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="85cd50d093b265fd67db2b9b8fc771fec5f784aa" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a buffer.</source>
          <target state="translated">このAPI は、渡された &lt;code&gt;Object&lt;/code&gt; がバッファであるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="8b04720a7d7ea49d3d60de79014fb69fa8491a06" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a date.</source>
          <target state="translated">このAPI は、渡された &lt;code&gt;Object&lt;/code&gt; が日付かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5e43a0f69097cd9621e0e8616fc96ff13206b854" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is a typed array.</source>
          <target state="translated">このAPI は、渡された &lt;code&gt;Object&lt;/code&gt; が型付き配列かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="b1512ceb15a56445f12edb557bed0d491dd21b2b" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">このAPI は、渡された &lt;code&gt;Object&lt;/code&gt; が &lt;code&gt;Error&lt;/code&gt; かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="23864b8fd9618610d06ad4c9de555c8fc662e0f9" translate="yes" xml:space="preserve">
          <source>This API checks if the &lt;code&gt;Object&lt;/code&gt; passed in is an array buffer.</source>
          <target state="translated">このAPI は、渡された &lt;code&gt;Object&lt;/code&gt; が配列バッファーかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="e8c7e3fe1e7df4ee3d1c160136ec8c8b57a30461" translate="yes" xml:space="preserve">
          <source>This API closes the scope passed in. Scopes must be closed in the reverse order from which they were created.</source>
          <target state="translated">この API は、渡されたスコープを閉じます。スコープは、作成された順とは逆の順序で閉じなければなりません。</target>
        </trans-unit>
        <trans-unit id="5d1aae2a2f436ea48d9c7acff12819c96b4925cc" translate="yes" xml:space="preserve">
          <source>This API converts a single &lt;code&gt;BigInt&lt;/code&gt; value into a sign bit, 64-bit little-endian array, and the number of elements in the array. &lt;code&gt;sign_bit&lt;/code&gt; and &lt;code&gt;words&lt;/code&gt; may be both set to &lt;code&gt;NULL&lt;/code&gt;, in order to get only &lt;code&gt;word_count&lt;/code&gt;.</source>
          <target state="translated">このAPIは、単一の &lt;code&gt;BigInt&lt;/code&gt; 値を符号ビット、64ビットリトルエンディアン配列、および配列内の要素数に変換します。 &lt;code&gt;sign_bit&lt;/code&gt; と &lt;code&gt;words&lt;/code&gt; 両方設定することができ &lt;code&gt;NULL&lt;/code&gt; のみを取得するためには、 &lt;code&gt;word_count&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ce0e25291cf2e6b501788d49eeebff5721c4a9c8" translate="yes" xml:space="preserve">
          <source>This API converts an array of unsigned 64-bit words into a single &lt;code&gt;BigInt&lt;/code&gt; value.</source>
          <target state="translated">このAPIは、符号なし64ビットワードの配列を単一の &lt;code&gt;BigInt&lt;/code&gt; 値に変換します。</target>
        </trans-unit>
        <trans-unit id="4dacc40682bb28b50a6f0c8a84eaeb75999988ac" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">このAPIは、Cの &lt;code&gt;int64_t&lt;/code&gt; 型をJavaScript &lt;code&gt;BigInt&lt;/code&gt; 型に変換します。</target>
        </trans-unit>
        <trans-unit id="39a65c954085e0b75e67379733eefa4137788a57" translate="yes" xml:space="preserve">
          <source>This API converts the C &lt;code&gt;uint64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;BigInt&lt;/code&gt; type.</source>
          <target state="translated">このAPIは、Cの変換 &lt;code&gt;uint64_t&lt;/code&gt; をの JavaScriptにタイプ &lt;code&gt;BigInt&lt;/code&gt; 種類を。</target>
        </trans-unit>
        <trans-unit id="872b6fbfcb10c1766c01c033a11510d812c343c5" translate="yes" xml:space="preserve">
          <source>This API create a new reference with the specified reference count to the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; への指定された参照カウントで新しい参照を作成します。</target>
        </trans-unit>
        <trans-unit id="bb7a9e00501915d315dc9db028de926ed4735c81" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;DataView&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;DataView&lt;/code&gt; objects provide an array-like view over an underlying data buffer, but one which allows items of different size and type in the &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="translated">このAPIは、既存の &lt;code&gt;ArrayBuffer&lt;/code&gt; の上にJavaScript &lt;code&gt;DataView&lt;/code&gt; オブジェクトを作成します。 &lt;code&gt;DataView&lt;/code&gt; オブジェクトは、基になるデータバッファーの配列のようなビューを提供しますが、 &lt;code&gt;ArrayBuffer&lt;/code&gt; で異なるサイズとタイプの項目を許可します。</target>
        </trans-unit>
        <trans-unit id="c2689ecf9af46ba39953d951567d6520bf653ba1" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF16-LE-encoded C string. The native string is copied.</source>
          <target state="translated">このAPIは、UTF16-LEでエンコードされたC文字列からJavaScript &lt;code&gt;String&lt;/code&gt; オブジェクトを作成します。ネイティブ文字列がコピーされます。</target>
        </trans-unit>
        <trans-unit id="5d7c7b178115d5c2e4337be18e30534c47276b07" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from a UTF8-encoded C string. The native string is copied.</source>
          <target state="translated">このAPIは、UTF8でエンコードされたC文字列からJavaScript &lt;code&gt;String&lt;/code&gt; オブジェクトを作成します。ネイティブ文字列がコピーされます。</target>
        </trans-unit>
        <trans-unit id="f8feb6065755866e5b518ec3409fce83787d5f3d" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;String&lt;/code&gt; object from an ISO-8859-1-encoded C string. The native string is copied.</source>
          <target state="translated">このAPIは、ISO-8859-1でエンコードされたC文字列からJavaScript &lt;code&gt;String&lt;/code&gt; オブジェクトを作成します。ネイティブ文字列がコピーされます。</target>
        </trans-unit>
        <trans-unit id="78e932bf060993a76782b2993b8d0e5d90ca6cbe" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;Symbol&lt;/code&gt; object from a UTF8-encoded C string.</source>
          <target state="translated">このAPIは、UTF8でエンコードされたC文字列からJavaScript &lt;code&gt;Symbol&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="dd3e74bf0ee6bf2199a6c976eeb4432bd41d78cf" translate="yes" xml:space="preserve">
          <source>This API creates a JavaScript &lt;code&gt;TypedArray&lt;/code&gt; object over an existing &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;TypedArray&lt;/code&gt; objects provide an array-like view over an underlying data buffer where each element has the same underlying binary scalar datatype.</source>
          <target state="translated">このAPIは、既存の &lt;code&gt;ArrayBuffer&lt;/code&gt; の上にJavaScript &lt;code&gt;TypedArray&lt;/code&gt; オブジェクトを作成します。 &lt;code&gt;TypedArray&lt;/code&gt; オブジェクトは、各要素が同じ基本的なバイナリスカラーデータ型を持つ、基本的なデータバッファーの配列のようなビューを提供します。</target>
        </trans-unit>
        <trans-unit id="eb7871e3b46d5ec2a3996e81a299debc3b8ecc76" translate="yes" xml:space="preserve">
          <source>This API creates a deferred object and a JavaScript promise.</source>
          <target state="translated">本APIは、遅延オブジェクトとJavaScriptのプロミスを作成します。</target>
        </trans-unit>
        <trans-unit id="25573620c7961f244c4fcf1ec2dc339f590285c9" translate="yes" xml:space="preserve">
          <source>This API decrements the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">本APIは、渡された参照の参照カウントをデクリメントし、結果の参照カウントを返します。</target>
        </trans-unit>
        <trans-unit id="8eff332e350a0e574536ca03420ca38be0ab632a" translate="yes" xml:space="preserve">
          <source>This API deletes the reference passed in.</source>
          <target state="translated">このAPIは、渡された参照を削除します。</target>
        </trans-unit>
        <trans-unit id="23a2cb69e25f56f3c362034320b9ab3929281f96" translate="yes" xml:space="preserve">
          <source>This API does not observe leap seconds; they are ignored, as ECMAScript aligns with POSIX time specification.</source>
          <target state="translated">このAPIはうるう秒を観測しません。ECMAScriptがPOSIXの時刻仕様に合わせているため、うるう秒は無視されます。</target>
        </trans-unit>
        <trans-unit id="dd6fca0a073178b69d2f39a3d83f5c7410fddeac" translate="yes" xml:space="preserve">
          <source>This API frees a previously allocated work object.</source>
          <target state="translated">本APIは、以前に割り当てられたワークオブジェクトを解放します。</target>
        </trans-unit>
        <trans-unit id="dd8d73286c93051c5ede6fc340006b9e8edcb1b1" translate="yes" xml:space="preserve">
          <source>This API gets the element at the requested index.</source>
          <target state="translated">本APIは、要求されたインデックスの要素を取得します。</target>
        </trans-unit>
        <trans-unit id="7f0b9e72b1ac3277c4602c64072072238f09ab14" translate="yes" xml:space="preserve">
          <source>This API gets the requested property from the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; から要求されたプロパティを取得します。</target>
        </trans-unit>
        <trans-unit id="98a5e0c385afa6d2fa9a179e263dfa1942ac13cb" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToBoolean()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;Section 7.1.2&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toboolean&quot;&gt;セクション7.1.2&lt;/a&gt;で定義されている抽象操作 &lt;code&gt;ToBoolean()&lt;/code&gt; を実装します。渡された &lt;code&gt;Object&lt;/code&gt; でゲッターが定義されている場合、このAPIは再入可能です。</target>
        </trans-unit>
        <trans-unit id="d25a05e4ed2a43028a62b36f7a945008651ab9c6" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToNumber()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;Section 7.1.3&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tonumber&quot;&gt;セクション7.1.3&lt;/a&gt;で定義されている抽象操作 &lt;code&gt;ToNumber()&lt;/code&gt; を実装します。渡された &lt;code&gt;Object&lt;/code&gt; でゲッターが定義されている場合、このAPIは再入可能です。</target>
        </trans-unit>
        <trans-unit id="4dcbf1148507fc0d2cb75126a083441bb025a61e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToObject()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;セクション7.1.13&lt;/a&gt;で定義されている抽象オペレーション &lt;code&gt;ToObject()&lt;/code&gt; を実装します。渡された &lt;code&gt;Object&lt;/code&gt; でゲッターが定義されている場合、このAPIは再入可能です。</target>
        </trans-unit>
        <trans-unit id="fddc49ca9e6f7884f4f7402d158c3562d69f3dad" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">このAPIは、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-toobject&quot;&gt;セクション7.1.13&lt;/a&gt;で定義されている抽象操作 &lt;code&gt;ToString()&lt;/code&gt; を実装します。渡された &lt;code&gt;Object&lt;/code&gt; ゲッターが定義されている場合、このAPIは再入可能です。</target>
        </trans-unit>
        <trans-unit id="96806471eb397aab399550c79244f2cb6c1c198e" translate="yes" xml:space="preserve">
          <source>This API implements the abstract operation &lt;code&gt;ToString()&lt;/code&gt; as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;Section 7.1.13&lt;/a&gt; of the ECMAScript Language Specification. This API can be re-entrant if getters are defined on the passed-in &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-tostring&quot;&gt;セクション7.1.13&lt;/a&gt;で定義されている抽象操作 &lt;code&gt;ToString()&lt;/code&gt; を実装します。渡された &lt;code&gt;Object&lt;/code&gt; でゲッターが定義されている場合、このAPIは再入可能です。</target>
        </trans-unit>
        <trans-unit id="f06230c0740f7b63f1615ff39e6c8deed4c8847d" translate="yes" xml:space="preserve">
          <source>This API increments the reference count for the reference passed in and returns the resulting reference count.</source>
          <target state="translated">本APIは、渡された参照の参照カウントをインクリメントし、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="b8c58ad460418d4b4b95ff2da9afea0a0ec2d635" translate="yes" xml:space="preserve">
          <source>This API is hazardous because in the following case:</source>
          <target state="translated">本APIは、以下のような場合に危険です。</target>
        </trans-unit>
        <trans-unit id="bb85535a8220d4eff8e0e3a7ee1e3a079d312053" translate="yes" xml:space="preserve">
          <source>This API is no longer deprecated.</source>
          <target state="translated">このAPIはもはや非推奨となっています。</target>
        </trans-unit>
        <trans-unit id="d0c5024828803462de5995e87af9efa3f1777afa" translate="yes" xml:space="preserve">
          <source>This API is no longer experimental.</source>
          <target state="translated">このAPIはもはや実験的なものではありません。</target>
        </trans-unit>
        <trans-unit id="cd41e783eaf560ec51e472abe82e76eb74feeda5" translate="yes" xml:space="preserve">
          <source>This API is under development, and changes (including incompatible changes to the API or wire format) may occur until this warning is removed.</source>
          <target state="translated">このAPIは開発中であり、この警告が取り除かれるまでは変更(APIやワイヤーフォーマットの互換性のない変更を含む)が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3dfa3ff17965f642d6a192310726a8f5b8b20e85" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;double&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">このAPIは、Cの &lt;code&gt;double&lt;/code&gt; 型からJavaScriptの &lt;code&gt;Number&lt;/code&gt; 型に変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="49877d21ef96ccd14727aaa7c002c5ffab88048a" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">このAPIは、Cの &lt;code&gt;int32_t&lt;/code&gt; 型からJavaScriptの &lt;code&gt;Number&lt;/code&gt; 型に変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="92bc6f15a322ff8b07f019e96a8cdf7d530c3029" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;int64_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">このAPIは、Cの &lt;code&gt;int64_t&lt;/code&gt; 型からJavaScriptの &lt;code&gt;Number&lt;/code&gt; 型に変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6503e99b292474ebaf2bcc59e2356b6df0fa3d82" translate="yes" xml:space="preserve">
          <source>This API is used to convert from the C &lt;code&gt;uint32_t&lt;/code&gt; type to the JavaScript &lt;code&gt;Number&lt;/code&gt; type.</source>
          <target state="translated">このAPIは、Cの &lt;code&gt;uint32_t&lt;/code&gt; 型からJavaScriptの &lt;code&gt;Number&lt;/code&gt; 型に変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="942e3ae495c5a4657aae15a037f4e246e6f8be57" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">このAPIは、 &lt;code&gt;func&lt;/code&gt; が破棄される前にメインスレッドで実行されているイベントループが終了する可能性があることを示すために使用されます。&lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt;と同様に、べき等でもあります。</target>
        </trans-unit>
        <trans-unit id="69d5e56003b7f8cb4d12ffc8eab17a293a3dc17b" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread may exit before &lt;code&gt;func&lt;/code&gt; is destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt;&lt;code&gt;uv_unref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">このAPIは、メインスレッドで実行されているイベントループが &lt;code&gt;func&lt;/code&gt; が破棄される前に終了する可能性があることを示すために使用されます。&lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_unref&quot;&gt; &lt;code&gt;uv_unref&lt;/code&gt; &lt;/a&gt;と同様に、べき等でもあります。</target>
        </trans-unit>
        <trans-unit id="0b33e42364a61da332e3e2db27d345503de5d1d5" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">このAPIは、 &lt;code&gt;func&lt;/code&gt; が破棄されるまでメインスレッドで実行されているイベントループが終了しないことを示すために使用されます。&lt;a href=&quot;http://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt;と同様に、べき等でもあります。</target>
        </trans-unit>
        <trans-unit id="0c0b66e358caa382c17ce63f4a5db0114fdfabe6" translate="yes" xml:space="preserve">
          <source>This API is used to indicate that the event loop running on the main thread should not exit until &lt;code&gt;func&lt;/code&gt; has been destroyed. Similar to &lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt;&lt;code&gt;uv_ref&lt;/code&gt;&lt;/a&gt; it is also idempotent.</source>
          <target state="translated">このAPIは、 &lt;code&gt;func&lt;/code&gt; が破棄されるまで、メインスレッドで実行されているイベントループが終了しないことを示すために使用されます。&lt;a href=&quot;https://docs.libuv.org/en/v1.x/handle.html#c.uv_ref&quot;&gt; &lt;code&gt;uv_ref&lt;/code&gt; &lt;/a&gt;と同様に、べき等でもあります。</target>
        </trans-unit>
        <trans-unit id="587cd767b10603c8d3213430b7152df4d2279b2e" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of a &lt;code&gt;node::Buffer&lt;/code&gt; and it's length.</source>
          <target state="translated">このAPIは、 &lt;code&gt;node::Buffer&lt;/code&gt; 基になるデータバッファーとその長さを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0254baecc8eba4b547466faecb90c78e6d68158b" translate="yes" xml:space="preserve">
          <source>This API is used to retrieve the underlying data buffer of an &lt;code&gt;ArrayBuffer&lt;/code&gt; and its length.</source>
          <target state="translated">このAPIは、 &lt;code&gt;ArrayBuffer&lt;/code&gt; の基になるデータバッファーとその長さを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="36b58192525902070d2c0a7c428788e7464512e3" translate="yes" xml:space="preserve">
          <source>This API is used to return the JavaScript singleton object that is used to represent the given boolean value.</source>
          <target state="translated">このAPIは、与えられたブール値を表現するために使用されるJavaScriptのシングルトンオブジェクトを返すために使用されます。</target>
        </trans-unit>
        <trans-unit id="2b8a478e9e4ad0ba2b83ceb79f6fe8b2726590f0" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which makes use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">このAPIは、 &lt;code&gt;func&lt;/code&gt; を使用する任意のスレッドから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3a193c4c7abe861db8905fcb50538ab5a608deb2" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will start making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">このAPIは、 &lt;code&gt;func&lt;/code&gt; の使用を開始する任意のスレッドから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="6266d5dc6d62f9a22ff00a8bf12ea4d6477e4048" translate="yes" xml:space="preserve">
          <source>This API may be called from any thread which will stop making use of &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">このAPIは、 &lt;code&gt;func&lt;/code&gt; の使用を停止する任意のスレッドから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ab533709169cd3a484819689ba1c7142adf5ce42" translate="yes" xml:space="preserve">
          <source>This API may only be called from the main thread.</source>
          <target state="translated">このAPIはメインスレッドからのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="319b4e36a7ead231d4ea80e0de94d083ff5268fa" translate="yes" xml:space="preserve">
          <source>This API open a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">本APIは、あるオブジェクトを外側のスコープに昇格させることができる新しいスコープを開きます。</target>
        </trans-unit>
        <trans-unit id="1d428023fa95497e48d68ac408f843d544e50ef9" translate="yes" xml:space="preserve">
          <source>This API open a new scope.</source>
          <target state="translated">このAPIは新しいスコープを開きます。</target>
        </trans-unit>
        <trans-unit id="a93e16643b3e03345deb8f8210fcb379c0d37099" translate="yes" xml:space="preserve">
          <source>This API opens a new scope from which one object can be promoted to the outer scope.</source>
          <target state="translated">本APIは、1つのオブジェクトを外側のスコープに昇格させることができる新しいスコープを開きます。</target>
        </trans-unit>
        <trans-unit id="52465275dd21628e32d7a1dd63399f75db334558" translate="yes" xml:space="preserve">
          <source>This API opens a new scope.</source>
          <target state="translated">このAPIは新しいスコープを開きます。</target>
        </trans-unit>
        <trans-unit id="12f3e0e9a51f400dccede73be29a7a7dc94bdbcc" translate="yes" xml:space="preserve">
          <source>This API promotes the handle to the JavaScript object so that it is valid for the lifetime of the outer scope. It can only be called once per scope. If it is called more than once an error will be returned.</source>
          <target state="translated">このAPIは、外部スコープの有効期間中有効なようにJavaScriptオブジェクトへのハンドルを促進します。スコープごとに一度しか呼び出すことができません。複数回呼ばれた場合はエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="c5d285a239d764c227e486f18daf3332cdb1bfa0" translate="yes" xml:space="preserve">
          <source>This API queries a &lt;code&gt;napi_value&lt;/code&gt; to check if it represents an error object.</source>
          <target state="translated">このAPIは &lt;code&gt;napi_value&lt;/code&gt; をクエリして、エラーオブジェクトを表すかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="07a858ab5884aa274ef23a00e2dbfc7bb56465d0" translate="yes" xml:space="preserve">
          <source>This API rejects a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to reject JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">このAPIは、関連付けられている遅延オブジェクトを介してJavaScriptプロミスを拒否します。したがって、対応する据え置きオブジェクトが使用可能なJavaScriptプロミスを拒否するためにのみ使用できます。つまり、このAPIに渡すために、 &lt;code&gt;napi_create_promise()&lt;/code&gt; を使用してpromiseが作成され、その呼び出しから返された遅延オブジェクトが保持されている必要があります。</target>
        </trans-unit>
        <trans-unit id="bdfac549e19d0fd3951aa268d2754e865e81e0fd" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, it has support for detecting an External value. If &lt;code&gt;value&lt;/code&gt; has a type that is invalid, an error is returned.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;セクション12.5.5&lt;/a&gt;で定義されているオブジェクトの &lt;code&gt;typeof&lt;/code&gt; オペレーターの呼び出しと同様の動作を表します。ただし、外部値の検出はサポートされています。場合 &lt;code&gt;value&lt;/code&gt; 無効なタイプがあり、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="37b45f96b0b997e3a98523c6bb3d2db3bf4f8b51" translate="yes" xml:space="preserve">
          <source>This API represents behavior similar to invoking the &lt;code&gt;typeof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;Section 12.5.5&lt;/a&gt; of the ECMAScript Language Specification. However, there are some differences:</source>
          <target state="translated">このAPIは、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typeof-operator&quot;&gt;セクション12.5.5&lt;/a&gt;で定義されているように、オブジェクトで &lt;code&gt;typeof&lt;/code&gt; 演算子を呼び出すのと同様の動作を表します。ただし、いくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="d52bdf433c534f2133fcb54ff7c6f2707cbe4de1" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;IsArray&lt;/code&gt; operation on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;Section 7.2.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-isarray&quot;&gt;セクション7.2.2&lt;/a&gt;で定義されているオブジェクトの &lt;code&gt;IsArray&lt;/code&gt; 操作の呼び出しを表します。</target>
        </trans-unit>
        <trans-unit id="071bc6a2988b5ec1974c804b6e1314b62d4f8f5f" translate="yes" xml:space="preserve">
          <source>This API represents invoking the &lt;code&gt;instanceof&lt;/code&gt; Operator on the object as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;Section 12.10.4&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-instanceofoperator&quot;&gt;セクション12.10.4&lt;/a&gt;で定義されているオブジェクトの &lt;code&gt;instanceof&lt;/code&gt; オペレーターの呼び出しを表します。</target>
        </trans-unit>
        <trans-unit id="0c169ebc6223ec0195007a1a8dddc814e6e1bb9f" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt; detach operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;Section 24.1.1.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">このAPIは、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.es/ecma262/#sec-detacharraybuffer&quot;&gt;セクション24.1.1.3&lt;/a&gt;で定義されている &lt;code&gt;ArrayBuffer&lt;/code&gt; デタッチ操作の呼び出しを表します。</target>
        </trans-unit>
        <trans-unit id="cb8244e2d276441f1fdca1221750307d283ca0d4" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the &lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;code&gt;IsDetachedBuffer&lt;/code&gt; operation as defined in &lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;Section 24.1.1.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">このAPIは、の呼び出しを表す &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;code&gt;IsDetachedBuffer&lt;/code&gt; の中で定義されている操作を&lt;a href=&quot;https://tc39.es/ecma262/#sec-isdetachedbuffer&quot;&gt;、セクション24.1.1.2&lt;/a&gt;のECMAScript言語仕様の。</target>
        </trans-unit>
        <trans-unit id="1d161386d078bae13e76126f77747e5f73c7af9e" translate="yes" xml:space="preserve">
          <source>This API represents the invocation of the Strict Equality algorithm as defined in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;Section 7.2.14&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">このAPI は、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-strict-equality-comparison&quot;&gt;セクション7.2.14&lt;/a&gt;で定義されているStrict Equalityアルゴリズムの呼び出しを表します。</target>
        </trans-unit>
        <trans-unit id="9985bed5b2b909c86b4c219b81b72403588f5ec9" translate="yes" xml:space="preserve">
          <source>This API requests that the previously allocated work be scheduled for execution. Once it returns successfully, this API must not be called again with the same &lt;code&gt;napi_async_work&lt;/code&gt; item or the result will be undefined.</source>
          <target state="translated">このAPIは、以前に割り当てられた作業を実行するようにスケジュールすることを要求します。正常に戻ったら、同じ &lt;code&gt;napi_async_work&lt;/code&gt; アイテムでこのAPIを再度呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="06d16e5f9910adb2bd8786d4e2bb452ed0ff9dff" translate="yes" xml:space="preserve">
          <source>This API resolves a JavaScript promise by way of the deferred object with which it is associated. Thus, it can only be used to resolve JavaScript promises for which the corresponding deferred object is available. This effectively means that the promise must have been created using &lt;code&gt;napi_create_promise()&lt;/code&gt; and the deferred object returned from that call must have been retained in order to be passed to this API.</source>
          <target state="translated">このAPIは、関連付けられている遅延オブジェクトを介してJavaScriptプロミスを解決します。したがって、対応する据え置きオブジェクトが使用可能なJavaScriptプロミスを解決するためにのみ使用できます。つまり、このAPIに渡すために、 &lt;code&gt;napi_create_promise()&lt;/code&gt; を使用してpromiseが作成され、その呼び出しから返された遅延オブジェクトが保持されている必要があります。</target>
        </trans-unit>
        <trans-unit id="27002effa854efa84116cc6ba528e82a613dccf1" translate="yes" xml:space="preserve">
          <source>This API retrieves a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure with information about the last error that occurred.</source>
          <target state="translated">このAPIは、発生した最後のエラーに関する情報を &lt;code&gt;napi_extended_error_info&lt;/code&gt; 構造を取得します。</target>
        </trans-unit>
        <trans-unit id="c54fae2ce18788face29f37c323cbd4a9728444f" translate="yes" xml:space="preserve">
          <source>This API retrieves data that was previously associated with the currently running Agent via &lt;code&gt;napi_set_instance_data()&lt;/code&gt;. If no data is set, the call will succeed and &lt;code&gt;data&lt;/code&gt; will be set to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">このAPIは、 &lt;code&gt;napi_set_instance_data()&lt;/code&gt; を介して現在実行中のエージェントに以前関連付けられていたデータを取得します。データが設定されていない場合、呼び出しは成功し、 &lt;code&gt;data&lt;/code&gt; は &lt;code&gt;NULL&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="65239448f493d9f6ef4cbb9fa475b6583cc8a2fc" translate="yes" xml:space="preserve">
          <source>This API retrieves the external data pointer that was previously passed to &lt;code&gt;napi_create_external()&lt;/code&gt;.</source>
          <target state="translated">このAPIは、以前に &lt;code&gt;napi_create_external()&lt;/code&gt; に渡された外部データポインターを取得します。</target>
        </trans-unit>
        <trans-unit id="f0eee031ab3af3225681355d84afe4145095683c" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">このAPIは、指定されたテキストでJavaScript &lt;code&gt;Error&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="db44d290a91d87cc4443be06ede8203a66b55369" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">このAPIは、 &lt;code&gt;RangeError&lt;/code&gt; れたテキストを含むJavaScript RangeErrorを返します。</target>
        </trans-unit>
        <trans-unit id="fa81b73ac735abebb0edffd8561f17aa7d32742e" translate="yes" xml:space="preserve">
          <source>This API returns a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">このAPIは、提供されたテキストを含むJavaScript &lt;code&gt;TypeError&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="eac49581d384370c2fd8061e8992f383a07a12f6" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="translated">このAPIは、JavaScript &lt;code&gt;Array&lt;/code&gt; タイプに対応するN-API値を返します。JavaScript配列については、ECMAScript言語仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;セクション22.1&lt;/a&gt;で説明されています。</target>
        </trans-unit>
        <trans-unit id="5ebdcd06ac50a711b98eac9ad3ba26e473236254" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created - that behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このAPIは、JavaScript &lt;code&gt;Array&lt;/code&gt; タイプに対応するN-API値を返します。 &lt;code&gt;Array&lt;/code&gt; のlengthプロパティは、渡された長さのパラメータに設定されています。ただし、基になるバッファーは、配列の作成時にVMによって事前に割り当てられるとは限りません。その動作は、基になるVMの実装に任されています。バッファーが、Cを介して直接読み書きできる連続したメモリブロックでなければならない場合は、&lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="f6f1e1ad010526c6b95577249e9d20e0bd898f13" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;Array&lt;/code&gt; type. The &lt;code&gt;Array&lt;/code&gt;'s length property is set to the passed-in length parameter. However, the underlying buffer is not guaranteed to be pre-allocated by the VM when the array is created. That behavior is left to the underlying VM implementation. If the buffer must be a contiguous block of memory that can be directly read and/or written via C, consider using &lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt;&lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このAPIは、JavaScript &lt;code&gt;Array&lt;/code&gt; 型に対応するN-API値を返します。 &lt;code&gt;Array&lt;/code&gt; のlengthプロパティは、渡された長さのパラメータに設定されています。ただし、アレイの作成時に、基盤となるバッファーがVMによって事前に割り当てられるとは限りません。その動作は、基盤となるVMの実装に任されています。バッファが、Cを介して直接読み取りおよび/または&lt;a href=&quot;#n_api_napi_create_external_arraybuffer&quot;&gt; &lt;code&gt;napi_create_external_arraybuffer&lt;/code&gt; &lt;/a&gt;できる連続したメモリブロックである必要がある場合は、napi_create_external_arraybufferの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="74bae849b3abb7d0a846a00b3211719de9de8557" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. &lt;code&gt;ArrayBuffer&lt;/code&gt;s are used to represent fixed-length binary data buffers. They are normally used as a backing-buffer for &lt;code&gt;TypedArray&lt;/code&gt; objects. The &lt;code&gt;ArrayBuffer&lt;/code&gt; allocated will have an underlying byte buffer whose size is determined by the &lt;code&gt;length&lt;/code&gt; parameter that's passed in. The underlying buffer is optionally returned back to the caller in case the caller wants to directly manipulate the buffer. This buffer can only be written to directly from native code. To write to this buffer from JavaScript, a typed array or &lt;code&gt;DataView&lt;/code&gt; object would need to be created.</source>
          <target state="translated">このAPIは、JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; に対応するN-API値を返します。 &lt;code&gt;ArrayBuffer&lt;/code&gt; は、固定長のバイナリデータバッファを表すために使用されます。これらは通常、 &lt;code&gt;TypedArray&lt;/code&gt; オブジェクトのバッキングバッファーとして使用されます。 &lt;code&gt;ArrayBuffer&lt;/code&gt; は、そのサイズによって決定される基礎となるバイトのバッファがあります割り当てられた &lt;code&gt;length&lt;/code&gt; に渡されるパラメータ。呼び出し元が直接バッファを操作したい場合には、基礎となるバッファは、必要に応じて呼び出し元に戻されます。このバッファは、ネイティブコードからのみ直接書き込むことができます。 JavaScriptからこのバッファーに書き込むには、型指定された配列または &lt;code&gt;DataView&lt;/code&gt; オブジェクトを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="5abde2fefb489242a6fbaf801b7da355c609cf82" translate="yes" xml:space="preserve">
          <source>This API returns an N-API value corresponding to a JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;. The underlying byte buffer of the &lt;code&gt;ArrayBuffer&lt;/code&gt; is externally allocated and managed. The caller must ensure that the byte buffer remains valid until the finalize callback is called.</source>
          <target state="translated">このAPIは、JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; に対応するN-API値を返します。 &lt;code&gt;ArrayBuffer&lt;/code&gt; の基になるバイトバッファーは、外部で割り当てられ、管理されます。呼び出し元は、ファイナライズコールバックが呼び出されるまで、バイトバッファーが有効であることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="54dc707b3f198fc07141776bb634e4e4e63b2b8f" translate="yes" xml:space="preserve">
          <source>This API returns an array containing the names of the available properties of this object.</source>
          <target state="translated">このAPIは、このオブジェクトで利用可能なプロパティの名前を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="aa79ae1b37565525274506b36dd7fc40477368cb" translate="yes" xml:space="preserve">
          <source>This API returns if the &lt;code&gt;Object&lt;/code&gt; passed in has an element at the requested index.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; に、要求されたインデックスの要素がある場合に返されます。</target>
        </trans-unit>
        <trans-unit id="c604c612d96a87d8101af3ddf6bfc01f4b4d68ec" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;global&lt;/code&gt; object.</source>
          <target state="translated">このAPIは &lt;code&gt;global&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="48a7f0383f00e9573b596f72e50a2cb7b8d0000d" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;new.target&lt;/code&gt; of the constructor call. If the current callback is not a constructor call, the result is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">このAPIは、コンストラクター呼び出しの &lt;code&gt;new.target&lt;/code&gt; を返します。現在のコールバックがコンストラクター呼び出しでない場合、結果は &lt;code&gt;NULL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ca0876caff75d7fcb5c27bc7d32784621271953f" translate="yes" xml:space="preserve">
          <source>This API returns the &lt;code&gt;null&lt;/code&gt; object.</source>
          <target state="translated">このAPIは &lt;code&gt;null&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6f4b499dfda4f2e7f389bb8a459c0442468d26c5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int32&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定されたJavaScript &lt;code&gt;Number&lt;/code&gt; 相当するCの &lt;code&gt;int32&lt;/code&gt; プリミティブを返します。</target>
        </trans-unit>
        <trans-unit id="827d0e5a4fe902762d8fdbd2a59f01ff491412f5" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定されたJavaScript &lt;code&gt;Number&lt;/code&gt; 相当するCの &lt;code&gt;int64&lt;/code&gt; プリミティブを返します。</target>
        </trans-unit>
        <trans-unit id="2df8e3cc2f4a8dd457d5502a718bb8bd98790b34" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;int64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定されたJavaScript &lt;code&gt;BigInt&lt;/code&gt; に相当するCの &lt;code&gt;int64_t&lt;/code&gt; プリミティブを返します。必要に応じて、値を切り捨て、 &lt;code&gt;lossless&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="accfb9b3a000444a53160665ebc8ad9cca255ff1" translate="yes" xml:space="preserve">
          <source>This API returns the C &lt;code&gt;uint64_t&lt;/code&gt; primitive equivalent of the given JavaScript &lt;code&gt;BigInt&lt;/code&gt;. If needed it will truncate the value, setting &lt;code&gt;lossless&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このAPIはCを返し &lt;code&gt;uint64_t&lt;/code&gt; を与えられたJavaScriptのプリミティブと同等 &lt;code&gt;BigInt&lt;/code&gt; 。必要に応じて、値を切り捨て、 &lt;code&gt;lossless&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3a1a204e8e4a5df3c6cc124c41060a09c140f51d" translate="yes" xml:space="preserve">
          <source>This API returns the C boolean primitive equivalent of the given JavaScript &lt;code&gt;Boolean&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定されたJavaScript &lt;code&gt;Boolean&lt;/code&gt; 型に相当するCブール型プリミティブを返します。</target>
        </trans-unit>
        <trans-unit id="ca2b5220b79fdd14c56eb3008d7a5c1f99fb540c" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive equivalent of the given JavaScript &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定されたJavaScript &lt;code&gt;Number&lt;/code&gt; 相当するCのdoubleプリミティブを返します。</target>
        </trans-unit>
        <trans-unit id="76fc91334d0e8e6d7cd76625caa8bac8a9d82ab4" translate="yes" xml:space="preserve">
          <source>This API returns the C double primitive of time value for the given JavaScript &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定されたJavaScript &lt;code&gt;Date&lt;/code&gt; の時間値のCダブルプリミティブを返します。</target>
        </trans-unit>
        <trans-unit id="a89a951199f81c03153d5318b6b870955ad2668b" translate="yes" xml:space="preserve">
          <source>This API returns the C primitive equivalent of the given &lt;code&gt;napi_value&lt;/code&gt; as a &lt;code&gt;uint32_t&lt;/code&gt;.</source>
          <target state="translated">このAPIは、指定 &lt;code&gt;napi_value&lt;/code&gt; れた &lt;code&gt;uint32_t&lt;/code&gt; 相当するCプリミティブをuint32_tとして返します。</target>
        </trans-unit>
        <trans-unit id="252de5913968c0e14b8dc66ec544741c0d2689fb" translate="yes" xml:space="preserve">
          <source>This API returns the ISO-8859-1-encoded string corresponding the value passed in.</source>
          <target state="translated">本APIは、渡された値に対応するISO-8859-1でエンコードされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="84ae74192a0873baca176de8e267018dc4cfbd5a" translate="yes" xml:space="preserve">
          <source>This API returns the UTF16-encoded string corresponding the value passed in.</source>
          <target state="translated">本APIは、渡された値に対応するUTF16エンコードされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="2c87b6403f35f26e7404749f214ce41091747843" translate="yes" xml:space="preserve">
          <source>This API returns the UTF8-encoded string corresponding the value passed in.</source>
          <target state="translated">本APIは、渡された値に対応するUTF8エンコードされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c0b748b497bba3eb1c898153dfbd929b87db172b" translate="yes" xml:space="preserve">
          <source>This API returns the Undefined object.</source>
          <target state="translated">本APIは、未定義のオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="adba2f90399935e0690e7ea6510c317990dbccfb" translate="yes" xml:space="preserve">
          <source>This API returns the highest N-API version supported by the Node.js runtime. N-API is planned to be additive such that newer releases of Node.js may support additional API functions. In order to allow an addon to use a newer function when running with versions of Node.js that support it, while providing fallback behavior when running with Node.js versions that don't support it:</source>
          <target state="translated">このAPIは、Node.jsランタイムがサポートするN-APIの最高バージョンを返します。N-API は、Node.js の新しいリリースが追加の API 関数をサポートする可能性があるように、追加的なものになるよう計画されています。これは、サポートしているNode.jsのバージョンで動作しているときには新しい関数を使用し、サポートしていないNode.jsのバージョンで動作しているときにはフォールバック動作を提供することをアドオンが可能にするためです。</target>
        </trans-unit>
        <trans-unit id="522d2a776db00199579b4671e9a78264576e9097" translate="yes" xml:space="preserve">
          <source>This API returns the length of an array.</source>
          <target state="translated">本APIは、配列の長さを返します。</target>
        </trans-unit>
        <trans-unit id="62dde4493dbecb32a8daa6b7073d93a0a48999a4" translate="yes" xml:space="preserve">
          <source>This API returns the names of the enumerable properties of &lt;code&gt;object&lt;/code&gt; as an array of strings. The properties of &lt;code&gt;object&lt;/code&gt; whose key is a symbol will not be included.</source>
          <target state="translated">このAPIは、 &lt;code&gt;object&lt;/code&gt; の列挙可能なプロパティの名前を文字列の配列として返します。キーがシンボルである &lt;code&gt;object&lt;/code&gt; のプロパティは含まれません。</target>
        </trans-unit>
        <trans-unit id="40720472b0f1b38ae83da6f85669c9b6c99e9e15" translate="yes" xml:space="preserve">
          <source>This API returns true if an exception is pending.</source>
          <target state="translated">このAPIは、例外が保留されている場合に真を返します。</target>
        </trans-unit>
        <trans-unit id="70f8fc304edc0eb1ff4bd3a9bd31242f6e63b866" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="translated">このAPIは、 &lt;code&gt;DataView&lt;/code&gt; のさまざまなプロパティを返します。</target>
        </trans-unit>
        <trans-unit id="094bf686b8d41acd51551e48f0d5506a78066bcd" translate="yes" xml:space="preserve">
          <source>This API returns various properties of a typed array.</source>
          <target state="translated">このAPIは、型付き配列の各種プロパティを返します。</target>
        </trans-unit>
        <trans-unit id="8443a100e796e230e9a632cdd639d47a8dd0c30e" translate="yes" xml:space="preserve">
          <source>This API set a property on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; プロパティを設定します。</target>
        </trans-unit>
        <trans-unit id="055ca98bb19b6d2b39f8280d72632e38436dcde6" translate="yes" xml:space="preserve">
          <source>This API sets and element on the &lt;code&gt;Object&lt;/code&gt; passed in.</source>
          <target state="translated">このAPIは、渡された &lt;code&gt;Object&lt;/code&gt; 要素と要素を設定します。</target>
        </trans-unit>
        <trans-unit id="f3259243731814fd2604630f35f7dc1e7cb7967f" translate="yes" xml:space="preserve">
          <source>This API should not be called with &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; from a JavaScript thread, because, if the queue is full, it may cause the JavaScript thread to deadlock.</source>
          <target state="translated">このAPIは、JavaScriptスレッドから &lt;code&gt;napi_tsfn_blocking&lt;/code&gt; を使用して呼び出すべきではありません。キューがいっぱいになると、JavaScriptスレッドがデッドロックする可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="d1442d6affa3740f89af3af8d557d700b4757238" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;Error&lt;/code&gt; with the text provided.</source>
          <target state="translated">このAPIは、指定されたテキストでJavaScript &lt;code&gt;Error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="b3dd51c041226d76a52e71a99edd9a2f1b9f2b71" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;RangeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">このAPIは、 &lt;code&gt;RangeError&lt;/code&gt; れたテキストでJavaScript RangeErrorをスローします。</target>
        </trans-unit>
        <trans-unit id="be4f91f940ec94f29555da2de8b293137ec65b17" translate="yes" xml:space="preserve">
          <source>This API throws a JavaScript &lt;code&gt;TypeError&lt;/code&gt; with the text provided.</source>
          <target state="translated">このAPIは、指定されたテキストでJavaScript &lt;code&gt;TypeError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="1e9614bea2e91f427dd259be89411bcf53308e40" translate="yes" xml:space="preserve">
          <source>This API throws the JavaScript value provided.</source>
          <target state="translated">このAPIは、提供されたJavaScriptの値をスローします。</target>
        </trans-unit>
        <trans-unit id="99f41202181c70e315d0fe22903a8a88e874c6f3" translate="yes" xml:space="preserve">
          <source>This API uses libuv's threadpool, which can have surprising and negative performance implications for some applications; see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">このAPIはlibuvのスレッドプールを使用します。これは、一部のアプリケーションにとっては、パフォーマンスに驚くほどの悪影響を与える可能性があります。詳細については、&lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5421be1b58e3a5f37657e78acf463c299fc19571" translate="yes" xml:space="preserve">
          <source>This API will return &lt;code&gt;napi_closing&lt;/code&gt; if &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; was called with &lt;code&gt;abort&lt;/code&gt; set to &lt;code&gt;napi_tsfn_abort&lt;/code&gt; from any thread. The value is only added to the queue if the API returns &lt;code&gt;napi_ok&lt;/code&gt;.</source>
          <target state="translated">このAPIは戻ります &lt;code&gt;napi_closing&lt;/code&gt; を場合 &lt;code&gt;napi_release_threadsafe_function()&lt;/code&gt; と呼ばれた &lt;code&gt;abort&lt;/code&gt; にセット &lt;code&gt;napi_tsfn_abort&lt;/code&gt; 任意のスレッドから。この値は、APIが &lt;code&gt;napi_ok&lt;/code&gt; を返した場合にのみキューに追加されます。</target>
        </trans-unit>
        <trans-unit id="ca4d7acb60577ff5a3d284f73b617fe9d4f84288" translate="yes" xml:space="preserve">
          <source>This Module Namespace Exotic Object can be directly observed either when using &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; or a dynamic import:</source>
          <target state="translated">このモジュール名前空間エキゾチックオブジェクトは、 &lt;code&gt;import * as m from 'cjs'&lt;/code&gt; または動的インポートのいずれかを使用して直接観察できます。</target>
        </trans-unit>
        <trans-unit id="0484acdcfb56a632e947996df777e0189ffd6889" translate="yes" xml:space="preserve">
          <source>This allows programs to localize their dependencies, so that they do not clash.</source>
          <target state="translated">これにより、プログラムは依存関係をローカライズして衝突しないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="8849f713925ba1f9a6b09df33af235ddaf81cd16" translate="yes" xml:space="preserve">
          <source>This also works with timers that are returned from &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;. If their callback function throws, it will be caught by the domain &lt;code&gt;'error'&lt;/code&gt; handler.</source>
          <target state="translated">これは、&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;から返されるタイマーでも機能します。それらのコールバック関数がスローすると、ドメインの &lt;code&gt;'error'&lt;/code&gt; ハンドラーによってキャッチされます。</target>
        </trans-unit>
        <trans-unit id="820157915a230f72b4dfebbb307e744ce07bc105" translate="yes" xml:space="preserve">
          <source>This becomes &lt;code&gt;null&lt;/code&gt; when sending a socket to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;. To poll forks and get current number of active connections, use asynchronous &lt;a href=&quot;#net_server_getconnections_callback&quot;&gt;&lt;code&gt;server.getConnections()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;を使用して子にソケットを送信すると、これは &lt;code&gt;null&lt;/code&gt; になります。フォークをポーリングしてアクティブな接続の現在の数を取得するには、代わりに非同期の&lt;a href=&quot;#net_server_getconnections_callback&quot;&gt; &lt;code&gt;server.getConnections()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="0403c54b19cf7c518c743ac412f170084964d2d4" translate="yes" xml:space="preserve">
          <source>This behavior can be observed by doing something like opening a resource then closing it before the resource can be used. The following snippet demonstrates this.</source>
          <target state="translated">この動作は、リソースを開いてからリソースを閉じてからリソースを使用できるようにすることで観察できます。次のスニペットはこれを示しています。</target>
        </trans-unit>
        <trans-unit id="4d3be871fb0a41430f8168f7829d357513f35f9e" translate="yes" xml:space="preserve">
          <source>This behavior matches how &lt;code&gt;import&lt;/code&gt; behaves in browser environments, assuming a typically configured server.</source>
          <target state="translated">この動作は、ブラウザー環境での &lt;code&gt;import&lt;/code&gt; 動作と一致し、通常構成されているサーバーを想定しています。</target>
        </trans-unit>
        <trans-unit id="88491dff6c51b120ea1b1d70767ea3bf8c1f612b" translate="yes" xml:space="preserve">
          <source>This can be addressed by passing &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; to the code that creates the &lt;code&gt;Context&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;Context&lt;/code&gt; を作成するコードに &lt;code&gt;microtaskMode: 'afterEvaluate'&lt;/code&gt; を渡すことで対処できます。</target>
        </trans-unit>
        <trans-unit id="c09d684d7a4d21b175c08bdd339dca1134e4b755" translate="yes" xml:space="preserve">
          <source>This can be called many times with new data as it is streamed.</source>
          <target state="translated">これは、新しいデータが流れてくると何度も呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7c491563022589b8a9b5c79a33442425c69e8e3b" translate="yes" xml:space="preserve">
          <source>This can be overridden for servers and client requests by passing the &lt;code&gt;maxHeaderSize&lt;/code&gt; option.</source>
          <target state="translated">これは、 &lt;code&gt;maxHeaderSize&lt;/code&gt; オプションを渡すことにより、サーバーおよびクライアント要求に対してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c880dd4ffae1216437534bad1ef14743456d2388" translate="yes" xml:space="preserve">
          <source>This can be used primarily to re-initialize REPL context to some pre-defined state:</source>
          <target state="translated">これは主に、REPL コンテキストを事前に定義された状態に再初期化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="cdf292923a244ea9d67a38073716924be27282d5" translate="yes" xml:space="preserve">
          <source>This can be used to implement continuation local storage without the use of a tracking &lt;code&gt;Map&lt;/code&gt; to store the metadata:</source>
          <target state="translated">これは、メタデータを格納するためのトラッキング &lt;code&gt;Map&lt;/code&gt; を使用せずに、継続ローカルストレージを実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7f813d16b38829c4c7b83c4595769721b0e2f9aa" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt;&lt;code&gt;.fork()&lt;/code&gt;&lt;/a&gt; again.</source>
          <target state="translated">これを使用して、&lt;a href=&quot;#cluster_cluster_fork_env&quot;&gt; &lt;code&gt;.fork()&lt;/code&gt; を&lt;/a&gt;再度呼び出すことでワーカーを再起動できます。</target>
        </trans-unit>
        <trans-unit id="884b5d2f2fb4791a811ef2a6aa11b44f1d059e43" translate="yes" xml:space="preserve">
          <source>This can be used to restart the worker by calling &lt;code&gt;.fork()&lt;/code&gt; again.</source>
          <target state="translated">これは、 &lt;code&gt;.fork()&lt;/code&gt; を再度呼び出してワーカーを再起動するために使用できます。</target>
        </trans-unit>
        <trans-unit id="adb47d3b708ed81016472d29ae643286daa0d023" translate="yes" xml:space="preserve">
          <source>This can be used when collecting input from a TTY stream to retrieve the current value that has been processed thus far, prior to the &lt;code&gt;line&lt;/code&gt; event being emitted. Once the &lt;code&gt;line&lt;/code&gt; event has been emitted, this property will be an empty string.</source>
          <target state="translated">これは、TTYストリームから入力を収集して、 &lt;code&gt;line&lt;/code&gt; イベントが発行される前にこれまでに処理された現在の値を取得するときに使用できます。いったん &lt;code&gt;line&lt;/code&gt; イベントが放出された、このプロパティは空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="81cb9ba6df123ad25e5c1f7880d8d7faab015f8c" translate="yes" xml:space="preserve">
          <source>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</source>
          <target state="translated">これは、元の関数が最後の引数としてエラーファーストのコールバックを取るという標準的な形式に従っていない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="cc26040f8f9ecbf7bbd37bcaa328d37dfb1dd0f1" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as other parts of the &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;Buffer&lt;/code&gt; object itself.</source>
          <target state="translated">これにより、 &lt;code&gt;buf.buffer&lt;/code&gt; を使用して基になる &lt;code&gt;ArrayBuffer&lt;/code&gt; に直接アクセスするときに問題が発生する可能性があります。これは、 &lt;code&gt;ArrayBuffer&lt;/code&gt; の他の部分が &lt;code&gt;Buffer&lt;/code&gt; オブジェクト自体とは無関係である可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="6a2698ef50db0dc91fafb011a769f5cfdfc45098" translate="yes" xml:space="preserve">
          <source>This can cause problems when accessing the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt; directly using &lt;code&gt;buf.buffer&lt;/code&gt;, as the first bytes in this &lt;code&gt;ArrayBuffer&lt;/code&gt; may be unrelated to the &lt;code&gt;buf&lt;/code&gt; object itself.</source>
          <target state="translated">基礎となるアクセスする際に問題が発生する可能性があります &lt;code&gt;ArrayBuffer&lt;/code&gt; を使用して直接 &lt;code&gt;buf.buffer&lt;/code&gt; をこの最初のバイトとして、 &lt;code&gt;ArrayBuffer&lt;/code&gt; はとは無関係のかもしれ &lt;code&gt;buf&lt;/code&gt; オブジェクトそのもの。</target>
        </trans-unit>
        <trans-unit id="94c39157bbaadfeac0740fd2bddc3c5a9e18fe2b" translate="yes" xml:space="preserve">
          <source>This can only be called from the master process.</source>
          <target state="translated">これはマスタープロセスからのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2bf60ae930ac6615a4d1242e8315c9eb04f632ba" translate="yes" xml:space="preserve">
          <source>This can only happen when native addons create &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s in &quot;externalized&quot; mode, or put existing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; into externalized mode.</source>
          <target state="translated">これは、ネイティブアドオンが「外部化」モードで &lt;code&gt;SharedArrayBuffer&lt;/code&gt; を作成するか、既存の &lt;code&gt;SharedArrayBuffer&lt;/code&gt; を外部化モードにするときにのみ発生します。</target>
        </trans-unit>
        <trans-unit id="6199ec1544ac620470d1eb68d66a477d9db98885" translate="yes" xml:space="preserve">
          <source>This change was made while &lt;code&gt;async_hooks&lt;/code&gt; was an experimental API.</source>
          <target state="translated">この変更は、 &lt;code&gt;async_hooks&lt;/code&gt; が試験的なAPIであったときに行われました。</target>
        </trans-unit>
        <trans-unit id="f5c8587a30eab7a428dcbb7513f0b815a15706fa" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;net#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt; and has the following additional events:</source>
          <target state="translated">このクラスは&lt;a href=&quot;net#net_class_net_server&quot;&gt; &lt;code&gt;net.Server&lt;/code&gt; &lt;/a&gt;を継承し、次の追加イベントがあります。</target>
        </trans-unit>
        <trans-unit id="bb154621216808fa548d91e360e57e7c8109d9f7" translate="yes" xml:space="preserve">
          <source>This class inherits from &lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt;&lt;code&gt;stream.Transform&lt;/code&gt;&lt;/a&gt;, allowing &lt;code&gt;zlib&lt;/code&gt; objects to be used in pipes and similar stream operations.</source>
          <target state="translated">このクラスは&lt;a href=&quot;stream#stream_class_stream_transform&quot;&gt; &lt;code&gt;stream.Transform&lt;/code&gt; を&lt;/a&gt;継承しているため、 &lt;code&gt;zlib&lt;/code&gt; オブジェクトをパイプや同様のストリーム操作で使用できます。</target>
        </trans-unit>
        <trans-unit id="8e88b64435ae0d469109330906f76139a67a2d71" translate="yes" xml:space="preserve">
          <source>This class is a subclass of &lt;code&gt;tls.Server&lt;/code&gt; and emits events same as &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http#http_class_http_server&quot;&gt;&lt;code&gt;http.Server&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">このクラスは &lt;code&gt;tls.Server&lt;/code&gt; のサブクラスであり、http.Serverと同じイベントを&lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt;ます。詳細については、&lt;a href=&quot;http#http_class_http_server&quot;&gt; &lt;code&gt;http.Server&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="16c329449b1b3c4b04d85f37f6e6b48c47ddc4d5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). A &lt;code&gt;net.Socket&lt;/code&gt; is also a &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;duplex stream&lt;/a&gt;, so it can be both readable and writable, and it is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、TCPソケットまたはストリーミング&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;エンドポイントの抽象化です（Windowsでは名前付きパイプを使用し、それ以外ではUnixドメインソケットを使用します）。A &lt;code&gt;net.Socket&lt;/code&gt; でもある&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;二重ストリーム&lt;/a&gt;が読み書きの両方とすることができるので、それはまた、ある&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bb6db2a0d099fbb5e70fab688511fc3b030d22f5" translate="yes" xml:space="preserve">
          <source>This class is an abstraction of a TCP socket or a streaming &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; endpoint (uses named pipes on Windows, and Unix domain sockets otherwise). It is also an &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスは、TCPソケットまたはストリーミング&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;エンドポイントを抽象化したものです（Windowsでは名前付きパイプを使用し、それ以外の場合はUnixドメインソケットを使用します）。これは&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;でもあります。</target>
        </trans-unit>
        <trans-unit id="9cb39e860eb677e256cb393655fda70a7c3d4eaa" translate="yes" xml:space="preserve">
          <source>This class is now exported.</source>
          <target state="translated">このクラスがエクスポートされるようになりました。</target>
        </trans-unit>
        <trans-unit id="44e839a369fec339f5305657a162e8136375a579" translate="yes" xml:space="preserve">
          <source>This class is used to create a TCP or &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; server.</source>
          <target state="translated">このクラスは、TCPまたは&lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt;サーバーの作成に使用されます。</target>
        </trans-unit>
        <trans-unit id="fd4c4aa236c69d8176bdaffd55ffe16275814e30" translate="yes" xml:space="preserve">
          <source>This class is used to create asynchronous state within callbacks and promise chains. It allows storing data throughout the lifetime of a web request or any other asynchronous duration. It is similar to thread-local storage in other languages.</source>
          <target state="translated">このクラスは、コールバックやプロミスチェーン内で非同期状態を作成するために使用されます。これにより、ウェブリクエストやその他の非同期期間中ずっとデータを保存することができます。これは他の言語のスレッドローカルストレージに似ています。</target>
        </trans-unit>
        <trans-unit id="a92b7b6bb57bdc44b8ea493af6aace2149818803" translate="yes" xml:space="preserve">
          <source>This class was renamed from &lt;code&gt;Zlib&lt;/code&gt; to &lt;code&gt;ZlibBase&lt;/code&gt;.</source>
          <target state="translated">このクラスは &lt;code&gt;Zlib&lt;/code&gt; から &lt;code&gt;ZlibBase&lt;/code&gt; に名前が変更されました。</target>
        </trans-unit>
        <trans-unit id="de024a70044896351480dcb7c1b1ad560f5c6459" translate="yes" xml:space="preserve">
          <source>This configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via &lt;code&gt;--eval&lt;/code&gt;, &lt;code&gt;--print&lt;/code&gt;, or &lt;code&gt;STDIN&lt;/code&gt;.</source>
          <target state="translated">これにより、文字列入力をCommonJSまたはESモジュールとして解釈するようにNode.jsが構成されます。文字列の入力は、を介して入力される &lt;code&gt;--eval&lt;/code&gt; 、 &lt;code&gt;--print&lt;/code&gt; 、または &lt;code&gt;STDIN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="244101b103efaee2124df7a27e0b69d17a4c72b4" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;&lt;code&gt;SharedArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これにより、基になるメモリをコピーせずに、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt; &lt;code&gt;SharedArrayBuffer&lt;/code&gt; の&lt;/a&gt;ビューが作成されます。たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンスの &lt;code&gt;.buffer&lt;/code&gt; プロパティへの参照を渡すと、新しく作成された &lt;code&gt;Buffer&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;と同じ割り当てメモリを共有します。</target>
        </trans-unit>
        <trans-unit id="642feea22e99d5b86e730cd2666b24ed829c2acf" translate="yes" xml:space="preserve">
          <source>This creates a view of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; without copying the underlying memory. For example, when passed a reference to the &lt;code&gt;.buffer&lt;/code&gt; property of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance, the newly created &lt;code&gt;Buffer&lt;/code&gt; will share the same allocated memory as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これにより、基になるメモリをコピーせずに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; の&lt;/a&gt;ビューが作成されます。たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;インスタンスの &lt;code&gt;.buffer&lt;/code&gt; プロパティへの参照を渡すと、新しく作成された &lt;code&gt;Buffer&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt;と同じ割り当てメモリを共有します。</target>
        </trans-unit>
        <trans-unit id="f70a9e943eb437948e2007e44c804669a3a635f8" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">このデフォルトは、-- &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt;コマンドラインスイッチを使用して完全に置き換えることができます（直接、または&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt;環境変数を介して）。たとえば、以下は &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; をデフォルトのTLS暗号スイートにします。</target>
        </trans-unit>
        <trans-unit id="c3e306cc187ad3b8c8c5117038d5c054feb07697" translate="yes" xml:space="preserve">
          <source>This default can be replaced entirely using the &lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt;&lt;code&gt;--tls-cipher-list&lt;/code&gt;&lt;/a&gt; command-line switch (directly, or via the &lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; environment variable). For instance, the following makes &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; the default TLS cipher suite:</source>
          <target state="translated">このデフォルトは、&lt;a href=&quot;cli#cli_tls_cipher_list_list&quot;&gt; &lt;code&gt;--tls-cipher-list&lt;/code&gt; &lt;/a&gt;コマンドラインスイッチを使用して（直接、または&lt;a href=&quot;cli#cli_node_options_options&quot;&gt; &lt;code&gt;NODE_OPTIONS&lt;/code&gt; &lt;/a&gt;環境変数を介して）完全に置き換えることができます。たとえば、次のようにすると、 &lt;code&gt;ECDHE-RSA-AES128-GCM-SHA256:!RC4&lt;/code&gt; がデフォルトのTLS暗号スイートになります。</target>
        </trans-unit>
        <trans-unit id="d52314f1ca567086d94d0b2153e5c443a8d5ccef" translate="yes" xml:space="preserve">
          <source>This deprecation has been superseded by the deprecation of the &lt;code&gt;process.binding()&lt;/code&gt; API (&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;).</source>
          <target state="translated">この非推奨は、 &lt;code&gt;process.binding()&lt;/code&gt; API（&lt;a href=&quot;#DEP0111&quot;&gt;DEP0111&lt;/a&gt;）の非推奨によって置き換えられました。</target>
        </trans-unit>
        <trans-unit id="8c190b3f34fae908925a1a6be8e8afe5048e36e2" translate="yes" xml:space="preserve">
          <source>This document contains two primary sections and a third section for notes. The first section explains how to use existing streams within an application. The second section explains how to create new types of streams.</source>
          <target state="translated">このドキュメントには、2 つの主要なセクションと、注意事項のための 3 つ目のセクションがあります。最初のセクションでは、アプリケーション内で既存のストリームを使用する方法を説明します。2 番目のセクションでは、新しいタイプのストリームを作成する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="62e0d03e950af6c192f429106a4d7a544db728f4" translate="yes" xml:space="preserve">
          <source>This doesn't turn &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt; into a synchronous blocking call. If synchronous operation is desired, something like &lt;code&gt;fs.openSync()&lt;/code&gt; should be used.</source>
          <target state="translated">これは、 &lt;code&gt;fs.open()&lt;/code&gt; または &lt;code&gt;fsPromises.open()&lt;/code&gt; を同期ブロッキング呼び出しに変換しません。同期操作が必要な場合は、 &lt;code&gt;fs.openSync()&lt;/code&gt; などを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="511c5720a26dc7d320da43671cc5b1fecc46d7b6" translate="yes" xml:space="preserve">
          <source>This environment variable is ignored when &lt;code&gt;node&lt;/code&gt; runs as setuid root or has Linux file capabilities set.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; がsetuidルートとして実行されている場合、またはLinuxファイル機能が設定されている場合、この環境変数は無視されます。</target>
        </trans-unit>
        <trans-unit id="6e6ca02ed62b1234e7dfc3664b35ddb769fa981f" translate="yes" xml:space="preserve">
          <source>This error is designed to prevent accidentally overwriting a callback registered from another module.</source>
          <target state="translated">このエラーは、他のモジュールから登録されたコールバックを誤って上書きしてしまうことを防ぐためのものです。</target>
        </trans-unit>
        <trans-unit id="b9977cdce2fd4b47c0997cc9ad3729a7f41f972a" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the HTTP server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">このイベントは、ユーザーがHTTPサーバーに接続を挿入するために明示的に発行することもできます。その場合、任意の&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5c553b5e91dff230374b24a70b3a2617cfe02603" translate="yes" xml:space="preserve">
          <source>This event can also be explicitly emitted by users to inject connections into the TLS server. In that case, any &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream can be passed.</source>
          <target state="translated">このイベントは、TLSサーバーに接続を挿入するためにユーザーが明示的に発行することもできます。その場合、任意の&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="10a0c432576c88ea7fd6ac6682ca82473146468d" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established, before the TLS handshake begins. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">このイベントは、TLSハンドシェイクが開始される前に、新しいTCPストリームが確立されたときに発行されます。 &lt;code&gt;socket&lt;/code&gt; は通常、&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;タイプのオブジェクトです。通常、ユーザーはこのイベントにアクセスしたくないでしょう。</target>
        </trans-unit>
        <trans-unit id="b8b0d428fb2bcfd24f28cd7691efd806371c187e" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event.</source>
          <target state="translated">このイベントは、新しいTCPストリームが確立されたときに発行されます。 &lt;code&gt;socket&lt;/code&gt; は通常、&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;タイプのオブジェクトです。通常、ユーザーはこのイベントにアクセスしたくないでしょう。</target>
        </trans-unit>
        <trans-unit id="0e2d4b6cd4a5729a1807f57603f4e80b4da71d69" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.connection&lt;/code&gt;.</source>
          <target state="translated">このイベントは、新しいTCPストリームが確立されると発生します。 &lt;code&gt;socket&lt;/code&gt; は通常、タイプ&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; の&lt;/a&gt;オブジェクトです。通常、ユーザーはこのイベントにアクセスしたくないでしょう。特に、プロトコルパーサーがソケットに接続する方法が原因で、ソケットは &lt;code&gt;'readable'&lt;/code&gt; イベントを発行しません。 &lt;code&gt;socket&lt;/code&gt; またにアクセスすることができる &lt;code&gt;request.connection&lt;/code&gt; から。</target>
        </trans-unit>
        <trans-unit id="66fa4ee297e42f821aa6c5e39bfbf8cf100dc851" translate="yes" xml:space="preserve">
          <source>This event is emitted when a new TCP stream is established. &lt;code&gt;socket&lt;/code&gt; is typically an object of type &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;. Usually users will not want to access this event. In particular, the socket will not emit &lt;code&gt;'readable'&lt;/code&gt; events because of how the protocol parser attaches to the socket. The &lt;code&gt;socket&lt;/code&gt; can also be accessed at &lt;code&gt;request.socket&lt;/code&gt;.</source>
          <target state="translated">このイベントは、新しいTCPストリームが確立されたときに発行されます。 &lt;code&gt;socket&lt;/code&gt; は通常、&lt;a href=&quot;net#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;タイプのオブジェクトです。通常、ユーザーはこのイベントにアクセスしたくないでしょう。特に、プロトコルパーサーがソケットに接続する方法が原因で、ソケットは &lt;code&gt;'readable'&lt;/code&gt; イベントを発行しません。 &lt;code&gt;socket&lt;/code&gt; またにアクセスすることができる &lt;code&gt;request.socket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f345cc8a09df280597dfb6653ff618e979ce58bb" translate="yes" xml:space="preserve">
          <source>This event is guaranteed to be passed an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">このイベントは、インスタンス渡されることが保証されている&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;のクラス、サブクラス&lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;以外の、ユーザー指定しない限り、ソケットタイプ&lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a8a890977d51324cd393c8898f763d1cb6d447e8" translate="yes" xml:space="preserve">
          <source>This event is the same as the one provided by &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このイベントは、&lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt; &lt;code&gt;child_process.fork()&lt;/code&gt; &lt;/a&gt;によって提供されるイベントと同じです。</target>
        </trans-unit>
        <trans-unit id="8091d5c0132da2ce578d23516bf7b26daf3174a5" translate="yes" xml:space="preserve">
          <source>This event might not be emitted if &lt;code&gt;http2stream.end()&lt;/code&gt; is called before trailers are received and the incoming data is not being read or listened for.</source>
          <target state="translated">このイベントは、トレーラーが受信される前に &lt;code&gt;http2stream.end()&lt;/code&gt; が呼び出され、着信データが読み取られていないか、リッスンされていない場合は発行されない可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e42e31a1c6291ea1620368f27b2644f12f5bfaa" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the Addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">この例では、2 番目の引数として完全な &lt;code&gt;module&lt;/code&gt; オブジェクトを受け取る2引数形式の &lt;code&gt;Init()&lt;/code&gt; を使用しています。これにより、アドオンは、 &lt;code&gt;exports&lt;/code&gt; プロパティとして関数を追加する代わりに、単一の関数で &lt;code&gt;exports&lt;/code&gt; を完全に上書きできます。</target>
        </trans-unit>
        <trans-unit id="1d0a35cc513f8432ce78b0f093625a881d170862" translate="yes" xml:space="preserve">
          <source>This example uses a two-argument form of &lt;code&gt;Init()&lt;/code&gt; that receives the full &lt;code&gt;module&lt;/code&gt; object as the second argument. This allows the addon to completely overwrite &lt;code&gt;exports&lt;/code&gt; with a single function instead of adding the function as a property of &lt;code&gt;exports&lt;/code&gt;.</source>
          <target state="translated">この例では、2番目の引数として完全な &lt;code&gt;module&lt;/code&gt; オブジェクトを受け取る2つの引数形式の &lt;code&gt;Init()&lt;/code&gt; を使用します。これにより、アドオンは、 &lt;code&gt;exports&lt;/code&gt; のプロパティとして関数を追加する代わりに、単一の関数で &lt;code&gt;exports&lt;/code&gt; を完全に上書きできます。</target>
        </trans-unit>
        <trans-unit id="c53e228887749d0c0419e29bc7e571d4700538a6" translate="yes" xml:space="preserve">
          <source>This example will echo back all messages from the master:</source>
          <target state="translated">この例では、マスターからのすべてのメッセージをエコーバックします。</target>
        </trans-unit>
        <trans-unit id="a85c797866ee7d1ad692e8f7298750e061674f0a" translate="yes" xml:space="preserve">
          <source>This feature depends on the underlying operating system providing a way to be notified of filesystem changes.</source>
          <target state="translated">この機能は、ファイルシステムの変更を通知する方法を提供するオペレーティングシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="eacad87587423d69625ed5d43b2a928821b829b6" translate="yes" xml:space="preserve">
          <source>This feature has been removed.</source>
          <target state="translated">この機能は削除されました。</target>
        </trans-unit>
        <trans-unit id="0fe4cf3e3f69627b03a85ed87c00d5a21b561899" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and behavior might still change.</source>
          <target state="translated">この機能は現在実験的なものであり、まだ挙動が変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8b9672c5c130d16069c2cb01cb9a6fb0915f6961" translate="yes" xml:space="preserve">
          <source>This feature is currently experimental and the name might change or it might be completely removed again.</source>
          <target state="translated">この機能は現在実験的なものであり、名前が変わるかもしれませんし、また完全に削除されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="de2bb0948bf98b0d72951fab0d71632f50f1639c" translate="yes" xml:space="preserve">
          <source>This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">この機能は&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="318da36545ca71c8357ead6931515e132410af72" translate="yes" xml:space="preserve">
          <source>This feature is only available if the &lt;code&gt;node&lt;/code&gt; executable was compiled with &lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICU&lt;/a&gt; enabled. If not, the domain names are passed through unchanged.</source>
          <target state="translated">この機能は、 &lt;code&gt;node&lt;/code&gt; 実行可能ファイルが&lt;a href=&quot;intl#intl_options_for_building_node_js&quot;&gt;ICUを&lt;/a&gt;有効にしてコンパイルされている場合にのみ使用できます。そうでない場合、ドメイン名は変更されずに渡されます。</target>
        </trans-unit>
        <trans-unit id="353351e40895571a9fe1a94d54ee8ac76890b44d" translate="yes" xml:space="preserve">
          <source>This flag exists so that the main module can be opted-in to the same behavior that &lt;code&gt;--preserve-symlinks&lt;/code&gt; gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.</source>
          <target state="translated">このフラグは、メインモジュールを &lt;code&gt;--preserve-symlinks&lt;/code&gt; が他のすべてのインポートに与えるのと同じ動作にオプトインできるようにするために存在します。ただし、以前のNode.jsバージョンとの下位互換性のために、これらは別個のフラグです。</target>
        </trans-unit>
        <trans-unit id="22fd36e23827a3db1f425306badbacaded4ffb64" translate="yes" xml:space="preserve">
          <source>This flag exists to aid in experimentation with the internal implementation of the Node.js http parser. This flag is likely to become a no-op and removed at some point in the future.</source>
          <target state="translated">このフラグはNode.jsのhttpパーサの内部実装の実験を支援するために存在します。このフラグは将来的には無効となり、削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="62d2caffde3a99f9ad79f9ef28e6d3f1fc2ba015" translate="yes" xml:space="preserve">
          <source>This flag is inherited from V8 and is subject to change upstream. It may disappear in a non-semver-major release.</source>
          <target state="translated">このフラグは V8 から継承され、上流で変更される可能性があります。このフラグは、Semver-major 以外のリリースでは消えてしまうかもしれません。</target>
        </trans-unit>
        <trans-unit id="0ef0d9ec3e79a5d118740d96d95026bba3f19b0a" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Readable&lt;/code&gt; class methods only.</source>
          <target state="translated">この関数は、アプリケーションコードから直接呼び出すことはできません。子クラスによって実装され、内部の &lt;code&gt;Readable&lt;/code&gt; クラスメソッドによってのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="49a676e99b324309fcea6e9319c1afc529b01374" translate="yes" xml:space="preserve">
          <source>This function MUST NOT be called by application code directly. It should be implemented by child classes, and called by the internal &lt;code&gt;Writable&lt;/code&gt; class methods only.</source>
          <target state="translated">この関数は、アプリケーションコードから直接呼び出すことはできません。子クラスによって実装され、内部の &lt;code&gt;Writable&lt;/code&gt; クラスメソッドによってのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1f33ccfcd0f74d271bd116cb4c56da77fb246945" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt;, which has the same signature. Callbacks are run in last-in first-out order.</source>
          <target state="translated">This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed before they are run using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; , which has the same signature. Callbacks are run in last-in first-out order.</target>
        </trans-unit>
        <trans-unit id="3de80300bdb948c051cf6cc4090a49b1df7ff897" translate="yes" xml:space="preserve">
          <source>This function adds a hook that will run before a given Node.js instance shuts down. If necessary, such hooks can be removed using &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; before they are run, which has the same signature.</source>
          <target state="translated">この関数は、特定のNode.jsインスタンスがシャットダウンする前に実行されるフックを追加します。必要に応じて、そのようなフックは、実行前に &lt;code&gt;RemoveEnvironmentCleanupHook()&lt;/code&gt; を使用して削除できます。これらのフックは同じ署名を持っています。</target>
        </trans-unit>
        <trans-unit id="90ca9c092fb3cd108c85d11cc79640ed5f5ff9ea" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt;&lt;code&gt;realpath(3)&lt;/code&gt;&lt;/a&gt;, with some exceptions:</source>
          <target state="translated">この関数は、いくつかの例外を除いて、&lt;a href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot;&gt; &lt;code&gt;realpath(3)&lt;/code&gt; の&lt;/a&gt;ように動作します。</target>
        </trans-unit>
        <trans-unit id="b68ec689236f9a0971c9dc975d6d90cad1215953" translate="yes" xml:space="preserve">
          <source>This function can be overwritten by providing alternative function as part of the &lt;code&gt;options.checkServerIdentity&lt;/code&gt; option passed to &lt;code&gt;tls.connect()&lt;/code&gt;. The overwriting function can call &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; of course, to augment the checks done with additional verification.</source>
          <target state="translated">この関数は、 &lt;code&gt;tls.connect()&lt;/code&gt; に渡される &lt;code&gt;options.checkServerIdentity&lt;/code&gt; オプションの一部として代替関数を提供することで上書きできます。もちろん、上書き関数は &lt;code&gt;tls.checkServerIdentity()&lt;/code&gt; を呼び出して、追加の検証で行われるチェックを強化することができます。</target>
        </trans-unit>
        <trans-unit id="19be6f8a2996df1dc3d420cff41c083dff365e49" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt;&lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">この関数は、新規作成&lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;すぐに関連して開始し、デフォルトに設定されたすべてのオプションとを&lt;a href=&quot;#net_socket_connect_path_connectlistener&quot;&gt; &lt;code&gt;socket.connect(path[, connectListener])&lt;/code&gt; &lt;/a&gt;、その後、返し &lt;code&gt;net.Socket&lt;/code&gt; 接続を開始します。</target>
        </trans-unit>
        <trans-unit id="e1ad29049dcb1287306ecc15dd61f9a7c9096e21" translate="yes" xml:space="preserve">
          <source>This function creates a new &lt;a href=&quot;#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt; with all options set to default, immediately initiates connection with &lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt;&lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt;&lt;/a&gt;, then returns the &lt;code&gt;net.Socket&lt;/code&gt; that starts the connection.</source>
          <target state="translated">この関数は、新規作成&lt;a href=&quot;#net_class_net_socket&quot;&gt; &lt;code&gt;net.Socket&lt;/code&gt; &lt;/a&gt;デフォルトに設定されているすべてのオプションとを、すぐにとの接続を開始&lt;a href=&quot;#net_socket_connect_port_host_connectlistener&quot;&gt; &lt;code&gt;socket.connect(port[, host][, connectListener])&lt;/code&gt; &lt;/a&gt;、その後、返し &lt;code&gt;net.Socket&lt;/code&gt; 接続を開始します。</target>
        </trans-unit>
        <trans-unit id="cb7a012e16cda321f95feeb4747e891fbb16db52" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will resolve the &lt;code&gt;Promise&lt;/code&gt; with an error using code &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">この機能は7.1より前のAIXバージョンでは機能しません。コード &lt;code&gt;UV_ENOSYS&lt;/code&gt; を使用してエラーで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="42b8c900f932b0d2bf423ef68b4068f49e84544a" translate="yes" xml:space="preserve">
          <source>This function does not work on AIX versions before 7.1, it will return the error &lt;code&gt;UV_ENOSYS&lt;/code&gt;.</source>
          <target state="translated">この関数は7.1以前のAIXバージョンでは機能せず、エラー &lt;code&gt;UV_ENOSYS&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5697cdda4de768e2cf54b723a122efe5653b963a" translate="yes" xml:space="preserve">
          <source>This function ensures that &lt;code&gt;path&lt;/code&gt; is resolved absolutely, and that the URL control characters are correctly encoded when converting into a File URL.</source>
          <target state="translated">この関数により、 &lt;code&gt;path&lt;/code&gt; が完全に解決され、URL制御文字がファイルURLに変換されるときに正しくエンコードされます。</target>
        </trans-unit>
        <trans-unit id="1108aee998992248b38802c507c72b2ed7d96209" translate="yes" xml:space="preserve">
          <source>This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.</source>
          <target state="translated">この関数は、パーセントエンコードされた文字の正しいデコードと、クロスプラットフォームで有効な絶対パス文字列を保証します。</target>
        </trans-unit>
        <trans-unit id="a70fc6c3e16322065cdff0ce2620dd70b68cc89b" translate="yes" xml:space="preserve">
          <source>This function executes a string of JavaScript code and returns its result with the following caveats:</source>
          <target state="translated">この関数は、JavaScriptコードの文字列を実行し、その結果を以下の注意点を付けて返します。</target>
        </trans-unit>
        <trans-unit id="c6da0e5af272e064260e3498115fb5e36dc75e6f" translate="yes" xml:space="preserve">
          <source>This function fills the &lt;code&gt;version&lt;/code&gt; struct with the major, minor, and patch version of Node.js that is currently running, and the &lt;code&gt;release&lt;/code&gt; field with the value of &lt;a href=&quot;process#process_process_release&quot;&gt;&lt;code&gt;process.release.name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、現在実行中のNode.jsのメジャー &lt;code&gt;version&lt;/code&gt; 、マイナーバージョン、およびパッチバージョンをバージョン構造体に入力し、 &lt;code&gt;release&lt;/code&gt; フィールドに&lt;a href=&quot;process#process_process_release&quot;&gt; &lt;code&gt;process.release.name&lt;/code&gt; &lt;/a&gt;の値を入力します。</target>
        </trans-unit>
        <trans-unit id="4badebe3055deecf26d575320a5dc0d908bb82ac" translate="yes" xml:space="preserve">
          <source>This function gives V8 an indication of the amount of externally allocated memory that is kept alive by JavaScript objects (i.e. a JavaScript object that points to its own memory allocated by a native module). Registering externally allocated memory will trigger global garbage collections more often than it would otherwise.</source>
          <target state="translated">この関数は、JavaScriptオブジェクト(すなわち、ネイティブモジュールによって割り当てられた自身のメモリを指すJavaScriptオブジェクト)によって生きたままにされている外部割り当てメモリの量をV8に示します。外部に割り当てられたメモリを登録すると、グローバルなガベージコレクションが発生する頻度が高くなります。</target>
        </trans-unit>
        <trans-unit id="b17195473e810af1aa1ea35771a8d98831afcd81" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readBigUint64BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="daa92f9057f7e94696ed20cc3e8e5783964bde9d" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readBigUint64LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c87095fe78fe415ecf76676138daab46f795497" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint16BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a599fe2ebb6e0c90f94e70d45ed6a6288849ec55" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint16LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ddf061751bfc021947a9bb28f05d5f92b30e724" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint32BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d062235ab556e4b8b487be4c2cbf719bc71bb59c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint32LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ca68f13ed6e5def2798c66c6ee71a5996cfd8f9" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUint8()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba4f4188ecc0c8acd718f14536ebb52296b31683" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUintBE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="acda940e611ac5151444acf58a6c596bc91a4ff5" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.readUintLE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eae0c648e7e8b4c6c06ab3bdc166c10fd01a29bc" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeBigUint64BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d989597ca83ce92b2ebc974227e030f79836246b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeBigUint64LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7882fe6b12a08ba2ecedc0ac073aa0c6926d56e8" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint16BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd4ede003e84631aa7ba9cf2c18f90f4daa2ea5b" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint16LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ca2a193ac4613205dba1af950bb14e9c274d1578" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint32BE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc823e61d2d24573479596ab4f4b6978195712b4" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint32LE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41d2df3a4f68377357ed939a55b364d4097c457c" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUint8()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="402a6fa5e58d03fc7bbe60b46e8a7c35f0c26ebd" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUintBE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03a24117e8fc9cb06efe4145ec7da0fd24e48708" translate="yes" xml:space="preserve">
          <source>This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt;.</source>
          <target state="translated">This function is also available as &lt;code&gt;buf.writeUintLE()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="857c61c4553c47ab5c22be99637b828b0046272f" translate="yes" xml:space="preserve">
          <source>This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</source>
          <target state="translated">This function is asynchronous because the ES module resolver in Node.js is asynchronous. With the introduction of &lt;a href=&quot;https://github.com/tc39/proposal-top-level-await&quot;&gt;Top-Level Await&lt;/a&gt;, these use cases will be easier as they won't require an async function wrapper.</target>
        </trans-unit>
        <trans-unit id="aa1a128b76492cea694295767529e32daed47241" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the connection is established, the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event will be emitted. If there is a problem connecting, instead of a &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event, an &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; event will be emitted with the error passed to the &lt;a href=&quot;#net_event_error_1&quot;&gt;&lt;code&gt;'error'&lt;/code&gt;&lt;/a&gt; listener. The last parameter &lt;code&gt;connectListener&lt;/code&gt;, if supplied, will be added as a listener for the &lt;a href=&quot;#net_event_connect&quot;&gt;&lt;code&gt;'connect'&lt;/code&gt;&lt;/a&gt; event &lt;strong&gt;once&lt;/strong&gt;.</source>
          <target state="translated">この関数は非同期です。接続が確立されると、&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントが発生します。接続に問題がある場合、&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントの代わりに&lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;イベントが発行され、エラーが&lt;a href=&quot;#net_event_error_1&quot;&gt; &lt;code&gt;'error'&lt;/code&gt; &lt;/a&gt;リスナーに渡されます。最後のパラメーター &lt;code&gt;connectListener&lt;/code&gt; が指定されている場合は、&lt;a href=&quot;#net_event_connect&quot;&gt; &lt;code&gt;'connect'&lt;/code&gt; &lt;/a&gt;イベントのリスナーとして&lt;strong&gt;1回&lt;/strong&gt;追加されます。</target>
        </trans-unit>
        <trans-unit id="04d4248379ca91265c113f72fb881941a2bc6374" translate="yes" xml:space="preserve">
          <source>This function is asynchronous. When the server starts listening, the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event will be emitted. The last parameter &lt;code&gt;callback&lt;/code&gt; will be added as a listener for the &lt;a href=&quot;#net_event_listening&quot;&gt;&lt;code&gt;'listening'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">この関数は非同期です。サーバーがリスニングを開始すると、&lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt;イベントが発生します。最後のパラメーター &lt;code&gt;callback&lt;/code&gt; は、&lt;a href=&quot;#net_event_listening&quot;&gt; &lt;code&gt;'listening'&lt;/code&gt; &lt;/a&gt;イベントのリスナーとして追加されます。</target>
        </trans-unit>
        <trans-unit id="2bee66a03f4e0be219c5798f053d5e9b9c3e847d" translate="yes" xml:space="preserve">
          <source>This function is based on a constant-time algorithm. Returns true if &lt;code&gt;a&lt;/code&gt; is equal to &lt;code&gt;b&lt;/code&gt;, without leaking timing information that would allow an attacker to guess one of the values. This is suitable for comparing HMAC digests or secret values like authentication cookies or &lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;capability urls&lt;/a&gt;.</source>
          <target state="translated">この関数は、一定時間アルゴリズムに基づいています。trueの場合は戻り値に等しい &lt;code&gt;b&lt;/code&gt; 、攻撃者が値のいずれかを推測することができるようになるタイミング情報を漏洩することなく、。これは、HMACダイジェストや、認証Cookieや&lt;a href=&quot;https://www.w3.org/TR/capability-urls/&quot;&gt;ケーパビリティURL&lt;/a&gt;などの秘密の値を比較するのに適しています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f26bf91d7cc00bfeb0aad8763630fd384b5df2c" translate="yes" xml:space="preserve">
          <source>This function is identical to &lt;a href=&quot;#util_util_format_format_args&quot;&gt;&lt;code&gt;util.format()&lt;/code&gt;&lt;/a&gt;, except in that it takes an &lt;code&gt;inspectOptions&lt;/code&gt; argument which specifies options that are passed along to &lt;a href=&quot;#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この機能は同じです&lt;a href=&quot;#util_util_format_format_args&quot;&gt; &lt;code&gt;util.format()&lt;/code&gt; &lt;/a&gt;それが取ることを除いて、 &lt;code&gt;inspectOptions&lt;/code&gt; のに渡された指定オプションの引数を&lt;a href=&quot;#util_util_inspect_object_options&quot;&gt; &lt;code&gt;util.inspect()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="617bb9f000f555b14d080241e1d35366b287a613" translate="yes" xml:space="preserve">
          <source>This function is not completely equivalent to &lt;code&gt;querystring.parse()&lt;/code&gt;. One difference is that &lt;code&gt;querystring.parse()&lt;/code&gt; does url decoding:</source>
          <target state="translated">この関数は &lt;code&gt;querystring.parse()&lt;/code&gt; と完全に同等ではありません。1つの違いは、 &lt;code&gt;querystring.parse()&lt;/code&gt; がURLデコードを行うことです。</target>
        </trans-unit>
        <trans-unit id="eb6a3e28055b4eb1c155f9eed1a1ea921b27b662" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform</source>
          <target state="translated">この関数はクロスプラットフォームに対応し、どのプラットフォームでも末尾にスラッシュが付いたパスを返さなくなりました。</target>
        </trans-unit>
        <trans-unit id="547b61aa8084b6f0d2b8892c94a1327d80d9a29d" translate="yes" xml:space="preserve">
          <source>This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform.</source>
          <target state="translated">この関数は、クロスプラットフォームでの一貫性を持つようになり、どのプラットフォームでも最後にスラッシュが付いたパスを返さなくなりました。</target>
        </trans-unit>
        <trans-unit id="e0d18b4c1d734142a1855c74af4c046ac1c0027b" translate="yes" xml:space="preserve">
          <source>This function is only available for zlib-based streams, i.e. not Brotli.</source>
          <target state="translated">この関数は zlib ベースのストリームでのみ利用可能で、Brotli ではありません。</target>
        </trans-unit>
        <trans-unit id="8a50b04599b1f0639a100cf46f5d1c6f9b45123c" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android).</source>
          <target state="translated">この機能はPOSIXプラットフォームでのみ利用可能です(WindowsやAndroidではありません)。</target>
        </trans-unit>
        <trans-unit id="dcddf4c38c715eb9dc19e1f8b915629007eb9f86" translate="yes" xml:space="preserve">
          <source>This function is only available on POSIX platforms (i.e. not Windows or Android). This feature is not available in &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">この関数はPOSIXプラットフォームでのみ使用できます（つまり、WindowsまたはAndroidでは使用できません）。この機能は&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="9b8337051652d8cca59af0a3ee06f51154cfa9f8" translate="yes" xml:space="preserve">
          <source>This function is only called if the certificate passed all other checks, such as being issued by trusted CA (&lt;code&gt;options.ca&lt;/code&gt;).</source>
          <target state="translated">この関数は、証明書が信頼できるCA（ &lt;code&gt;options.ca&lt;/code&gt; ）によって発行された場合など、他のすべてのチェックに合格した場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4dd8d9762971f53a0f4b9c54c5b91e951886daa4" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; but requires the first argument to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; that will be filled. It also requires that a callback is passed in.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#crypto_crypto_randombytes_size_callback&quot;&gt; &lt;code&gt;crypto.randomBytes()&lt;/code&gt; に&lt;/a&gt;似ていますが、最初の引数は、埋められる&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; で&lt;/a&gt;ある必要があります。また、コールバックが渡される必要があります。</target>
        </trans-unit>
        <trans-unit id="a0be84b52a05de61cb37d8e8aafedfc9056c383b" translate="yes" xml:space="preserve">
          <source>This function now returns a Promise. Passing a callback is deprecated, and was useless up to this version, as the Worker was actually terminated synchronously. Terminating is now a fully asynchronous operation.</source>
          <target state="translated">この関数はPromiseを返すようになりました。コールバックを渡すことは非推奨であり、このバージョンまではワーカーは実際に同期的に終了していたので意味がありませんでした。ワーカーの終了は完全に非同期で行われるようになりました。</target>
        </trans-unit>
        <trans-unit id="894173e491bab80c84c852bbf2fd895d54ca239e" translate="yes" xml:space="preserve">
          <source>This function now supports RSA-PSS keys.</source>
          <target state="translated">RSA-PSSキーに対応しました。</target>
        </trans-unit>
        <trans-unit id="1d299f2177608180223cfccb77b867a0f516eab6" translate="yes" xml:space="preserve">
          <source>This function now supports key objects.</source>
          <target state="translated">この関数はキーオブジェクトをサポートするようになりました。</target>
        </trans-unit>
        <trans-unit id="91771921fecce0493df003c3b93efccae8cfb43d" translate="yes" xml:space="preserve">
          <source>This function operates asynchronously. The &lt;code&gt;'close'&lt;/code&gt; event will be emitted when the server has no more open connections.</source>
          <target state="translated">この関数は非同期で動作します。 &lt;code&gt;'close'&lt;/code&gt; サーバはこれ以上のオープン接続を持っているときにイベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="0516587396d5bc4b5aea745b473a81786e9cfdf7" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker is connected to its master via its IPC channel, &lt;code&gt;false&lt;/code&gt; otherwise. A worker is connected to its master after it has been created. It is disconnected after the &lt;code&gt;'disconnect'&lt;/code&gt; event is emitted.</source>
          <target state="translated">この関数は、ワーカーがIPCチャネル経由でマスターに接続されている場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。ワーカーは作成後にマスターに接続されます。 &lt;code&gt;'disconnect'&lt;/code&gt; イベントが発生した後、切断されます。</target>
        </trans-unit>
        <trans-unit id="a3544713b214d05ed5bf6d144fbd49ea7c59cdb9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;true&lt;/code&gt; if the worker's process has terminated (either because of exiting or being signaled). Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">この関数は、ワーカーのプロセスが終了した場合（終了したか、通知されたため）に &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="28d972587f7fd8928ac54fe47aed457c4167ba5b" translate="yes" xml:space="preserve">
          <source>This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</source>
          <target state="translated">This function should only be used for reconnecting a socket after &lt;code&gt;'close'&lt;/code&gt; has been emitted or otherwise it may lead to undefined behavior.</target>
        </trans-unit>
        <trans-unit id="af382458c7c1694962f7272d5dc6257cee21c759" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">この機能は、オプションの追加の引数を取ります &lt;code&gt;err&lt;/code&gt; - &lt;code&gt;Error&lt;/code&gt; レポートに印刷されたJavaScriptのスタックのためのコンテキストとして使用されるオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="85a6696b2b5e9ad1b7f6b1c4ddafeb81b81510f6" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; - an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">この機能は、オプションの追加の引数を取ります &lt;code&gt;err&lt;/code&gt; - &lt;code&gt;Error&lt;/code&gt; レポートに印刷されたJavaScriptのスタックのためのコンテキストとして使用されるオブジェクトを。レポートを使用してコールバックまたは例外ハンドラーでエラーを処理する場合、これにより、レポートに元のエラーの場所とそれが処理された場所を含めることができます。</target>
        </trans-unit>
        <trans-unit id="2598594008e308c577b78ccab80128ea1021d684" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</source>
          <target state="translated">This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report. When using report to handle errors in a callback or an exception handler, this allows the report to include the location of the original error as well as where it was handled.</target>
        </trans-unit>
        <trans-unit id="5aed6487576d7dd9ad1eb9e85fc412600a086575" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt;, which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</source>
          <target state="translated">This function takes an optional additional argument &lt;code&gt;err&lt;/code&gt; , which is an &lt;code&gt;Error&lt;/code&gt; object that will be used as the context for the JavaScript stack printed in the report.</target>
        </trans-unit>
        <trans-unit id="77ea37c691223737f81084a936fc91467e04f445" translate="yes" xml:space="preserve">
          <source>This function takes an optional additional argument &lt;code&gt;filename&lt;/code&gt;, which is the name of a file into which the report is written.</source>
          <target state="translated">この関数は、オプションの追加引数 &lt;code&gt;filename&lt;/code&gt; を受け取ります。これは、レポートが書き込まれるファイルの名前です。</target>
        </trans-unit>
        <trans-unit id="5f1d19a17165c41d2e0284a1b5c28f86bd5da3dc" translate="yes" xml:space="preserve">
          <source>This function will kill the worker. In the master, it does this by disconnecting the &lt;code&gt;worker.process&lt;/code&gt;, and once disconnected, killing with &lt;code&gt;signal&lt;/code&gt;. In the worker, it does it by disconnecting the channel, and then exiting with code &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">この関数はワーカーを殺します。マスターでは、 &lt;code&gt;worker.process&lt;/code&gt; を切断してこれを行い、切断されると &lt;code&gt;signal&lt;/code&gt; でkillします。ワーカーでは、チャネルを切断してからコード &lt;code&gt;0&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="fc334c0e240796cb69b50cfdf422e85bbfb6b48c" translate="yes" xml:space="preserve">
          <source>This functionality has been removed.</source>
          <target state="translated">この機能は削除されました。</target>
        </trans-unit>
        <trans-unit id="36e8179328462918849467415bc6e47b53741e6f" translate="yes" xml:space="preserve">
          <source>This happens when:</source>
          <target state="translated">このような時に起こります。</target>
        </trans-unit>
        <trans-unit id="c6a7c9955e027e73c53547cdbc2c54fa7e69027d" translate="yes" xml:space="preserve">
          <source>This has the same false positives and negatives as described in &lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt;&lt;code&gt;writeStream.getColorDepth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これには、&lt;a href=&quot;#tty_writestream_getcolordepth_env&quot;&gt; &lt;code&gt;writeStream.getColorDepth()&lt;/code&gt; で&lt;/a&gt;説明されているものと同じ誤検知および除外があります。</target>
        </trans-unit>
        <trans-unit id="af19c7ad3abc63f1d8cfd897e2ce7c93b37d4059" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also currently no way to interact with the Loader, though support is planned.</source>
          <target state="translated">この実装は、&lt;a href=&quot;esm#esm_ecmascript_modules&quot;&gt;ECMAScriptモジュールローダー&lt;/a&gt;よりも低いレベルにあります。また、サポートは予定されていますが、現在ローダーと対話する方法はありません。</target>
        </trans-unit>
        <trans-unit id="4cc43cf5c93c4064080045c3dcadfc716ce173eb" translate="yes" xml:space="preserve">
          <source>This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</source>
          <target state="translated">This implementation lies at a lower level than the &lt;a href=&quot;esm#esm_modules_ecmascript_modules&quot;&gt;ECMAScript Module loader&lt;/a&gt;. There is also no way to interact with the Loader yet, though support is planned.</target>
        </trans-unit>
        <trans-unit id="7a7d6f9a64fbfdcb7e7c59dad106536b0e46b04e" translate="yes" xml:space="preserve">
          <source>This integration is in line with the &lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;ES Module Integration Proposal for Web Assembly&lt;/a&gt;.</source>
          <target state="translated">この統合は、&lt;a href=&quot;https://github.com/webassembly/esm-integration&quot;&gt;WebアセンブリのESモジュール統合提案&lt;/a&gt;に沿ったものです。</target>
        </trans-unit>
        <trans-unit id="6b04d8ad3ebc5af27ac4b4e1c10756739a2d2124" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; if the socket is not connected yet, either because &lt;code&gt;.connect()&lt;/code&gt; has not yet been called or because it is still in the process of connecting (see &lt;a href=&quot;#net_socket_connecting&quot;&gt;&lt;code&gt;socket.connecting&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">これは、 &lt;code&gt;.connect()&lt;/code&gt; がまだ呼び出されていないため、またはまだ接続処理中であるため（&lt;a href=&quot;#net_socket_connecting&quot;&gt; &lt;code&gt;socket.connecting&lt;/code&gt; を&lt;/a&gt;参照）、ソケットがまだ接続されていない場合に &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c6a303413dae5cf2f56522f80094d23bc472745a" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">これは、Node.jsプログラムの作成時に一般的に発生するシステムエラーのリストです。包括的なリストについては、&lt;a href=&quot;http://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; （3）のマニュアルページを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6384af73049677961508c308274b10195affbf33" translate="yes" xml:space="preserve">
          <source>This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt;&lt;code&gt;errno&lt;/code&gt;(3) man page&lt;/a&gt;.</source>
          <target state="translated">This is a list of system errors commonly-encountered when writing a Node.js program. For a comprehensive list, see the &lt;a href=&quot;https://man7.org/linux/man-pages/man3/errno.3.html&quot;&gt; &lt;code&gt;errno&lt;/code&gt; (3) man page&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="615981803bb95c92778608ec98aa86e6b7bec7bb" translate="yes" xml:space="preserve">
          <source>This is a property on the &lt;code&gt;buffer&lt;/code&gt; module returned by &lt;code&gt;require('buffer')&lt;/code&gt;, not on the &lt;code&gt;Buffer&lt;/code&gt; global or a &lt;code&gt;Buffer&lt;/code&gt; instance.</source>
          <target state="translated">これは &lt;code&gt;require('buffer')&lt;/code&gt; によって返される &lt;code&gt;buffer&lt;/code&gt; モジュールのプロパティであり、 &lt;code&gt;Buffer&lt;/code&gt; グローバルや &lt;code&gt;Buffer&lt;/code&gt; インスタンスではありません。</target>
        </trans-unit>
        <trans-unit id="22812016d42b8d66cb470ae9bc87b4d2aece8842" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stderr: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stderr&quot;&gt;&lt;code&gt;process.stderr&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">これは、ワーカースレッド内の&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; に&lt;/a&gt;書き込まれたデータを含む読み取り可能なストリームです。 &lt;code&gt;stderr: true&lt;/code&gt; が&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;コンストラクターに渡されなかった場合、データは親スレッドの&lt;a href=&quot;process#process_process_stderr&quot;&gt; &lt;code&gt;process.stderr&lt;/code&gt; &lt;/a&gt;ストリームにパイプされます。</target>
        </trans-unit>
        <trans-unit id="ef6edca8b742a017994b5d4c4977f24985399057" translate="yes" xml:space="preserve">
          <source>This is a readable stream which contains data written to &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; inside the worker thread. If &lt;code&gt;stdout: true&lt;/code&gt; was not passed to the &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor, then data will be piped to the parent thread's &lt;a href=&quot;process#process_process_stdout&quot;&gt;&lt;code&gt;process.stdout&lt;/code&gt;&lt;/a&gt; stream.</source>
          <target state="translated">これは、ワーカースレッド内の&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; に&lt;/a&gt;書き込まれたデータを含む読み取り可能なストリームです。 &lt;code&gt;stdout: true&lt;/code&gt; が&lt;a href=&quot;#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;コンストラクターに渡されなかった場合、データは親スレッドの&lt;a href=&quot;process#process_process_stdout&quot;&gt; &lt;code&gt;process.stdout&lt;/code&gt; &lt;/a&gt;ストリームにパイプされます。</target>
        </trans-unit>
        <trans-unit id="6afd75c5ddd399af67dafff5027ffe863f1e6152" translate="yes" xml:space="preserve">
          <source>This is also emitted in case this &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; stream emits an error when a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; stream pipes into it.</source>
          <target state="translated">これは、この&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;ストリームが&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;ストリームにパイプしたときにエラーが発生した場合にも発生します。</target>
        </trans-unit>
        <trans-unit id="7266000cead4bb9d2f0e14e9324975faa9eb3a46" translate="yes" xml:space="preserve">
          <source>This is an abstraction used to control and modify the lifetime of objects created within a particular scope. In general, N-API values are created within the context of a handle scope. When a native method is called from JavaScript, a default handle scope will exist. If the user does not explicitly create a new handle scope, N-API values will be created in the default handle scope. For any invocations of code outside the execution of a native method (for instance, during a libuv callback invocation), the module is required to create a scope before invoking any functions that can result in the creation of JavaScript values.</source>
          <target state="translated">これは、特定のスコープ内で作成されたオブジェクトのライフタイムを制御および変更するために使用される抽象化です。一般的に、N-API 値はハンドルスコープのコンテキスト内で作成されます。ネイティブメソッドが JavaScript から呼び出されると、デフォルトのハンドルスコープが存在します。ユーザーが明示的に新しいハンドル・スコープを作成しない場合、N-API 値はデフォルトのハンドル・スコープで作成されます。ネイティブメソッドの実行外でコードを呼び出す場合(例えば、libuv コールバックの呼び出し中など)、モジュールは JavaScript の値の作成につながる関数を呼び出す前にスコープを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac28259e1a0df374cd212eac367f298bb33dcf21" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that is used to represent a JavaScript value.</source>
          <target state="translated">これは、JavaScriptの値を表すために使用される不透明なポインタです。</target>
        </trans-unit>
        <trans-unit id="9f727952d85916df43ab81b94013dad46a0ffb66" translate="yes" xml:space="preserve">
          <source>This is an opaque pointer that represents a JavaScript function which can be called asynchronously from multiple threads via &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;napi_call_threadsafe_function()&lt;/code&gt; を介して複数のスレッドから非同期に呼び出すことができるJavaScript関数を表す不透明なポインターです。</target>
        </trans-unit>
        <trans-unit id="a4d7f80ddbb26766196c61aca550b0031231b661" translate="yes" xml:space="preserve">
          <source>This is automatically called by any readline instance on its &lt;code&gt;input&lt;/code&gt; if the &lt;code&gt;input&lt;/code&gt; is a terminal. Closing the &lt;code&gt;readline&lt;/code&gt; instance does not stop the &lt;code&gt;input&lt;/code&gt; from emitting &lt;code&gt;'keypress'&lt;/code&gt; events.</source>
          <target state="translated">これは、 &lt;code&gt;input&lt;/code&gt; が端末の場合、その &lt;code&gt;input&lt;/code&gt; readlineインスタンスによって自動的に呼び出されます。閉会 &lt;code&gt;readline&lt;/code&gt; のインスタンスは停止しません &lt;code&gt;input&lt;/code&gt; 発光から &lt;code&gt;'keypress'&lt;/code&gt; イベントを。</target>
        </trans-unit>
        <trans-unit id="513ca07430a1834e15b4c394a7795cf89cbe75bd" translate="yes" xml:space="preserve">
          <source>This is important when developing APIs in order to give users the opportunity to assign event handlers &lt;em&gt;after&lt;/em&gt; an object has been constructed but before any I/O has occurred:</source>
          <target state="translated">アサインイベントハンドラにユーザーに機会を与えるためにAPIを開発する際に重要です&lt;em&gt;後に&lt;/em&gt;任意のI / Oが発生した前にオブジェクトが構築されているが。</target>
        </trans-unit>
        <trans-unit id="357a4cb22700e3b307528201a96ec4a2b0b9733a" translate="yes" xml:space="preserve">
          <source>This is in addition to a single internal output slab buffer of size &lt;code&gt;chunkSize&lt;/code&gt;, which defaults to 16K.</source>
          <target state="translated">これは、サイズが &lt;code&gt;chunkSize&lt;/code&gt; の単一の内部出力スラブバッファーに追加され、デフォルトは16Kです。</target>
        </trans-unit>
        <trans-unit id="0e3d91f0352da1646e45574d84c00b75bddafb4b" translate="yes" xml:space="preserve">
          <source>This is less performant than transpiling source files before running Node.js; a transpiler loader should only be used for development and testing purposes.</source>
          <target state="translated">これはNode.jsを実行する前にソースファイルをトランスパイリングするよりもパフォーマンスが低くなります;トランスパイラーローダーは開発とテストの目的でのみ使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="07ba21f3ad7e7c13655130ea573064167080a992" translate="yes" xml:space="preserve">
          <source>This is not a hard limit. The &lt;code&gt;EventEmitter&lt;/code&gt; instance will allow more listeners to be added but will output a trace warning to stderr indicating that a &quot;possible EventEmitter memory leak&quot; has been detected. For any single &lt;code&gt;EventEmitter&lt;/code&gt;, the &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; and &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; methods can be used to temporarily avoid this warning:</source>
          <target state="translated">これはハードリミットではありません。 &lt;code&gt;EventEmitter&lt;/code&gt; インスタンスは、複数のリスナーを加えなくstderrに意志出力トレース警告「が可能持つEventEmitterメモリリーク」が検出されたことを示すことを可能にします。単一の &lt;code&gt;EventEmitter&lt;/code&gt; の場合、 &lt;code&gt;emitter.getMaxListeners()&lt;/code&gt; &lt;code&gt;emitter.setMaxListeners()&lt;/code&gt; メソッドとエミッター.setMaxListeners（）メソッドを使用して、この警告を一時的に回避できます。</target>
        </trans-unit>
        <trans-unit id="3d247546ea140a0078a900e014d8747b999296d6" translate="yes" xml:space="preserve">
          <source>This is not a problem in common cases with &lt;code&gt;latin1&lt;/code&gt; or &lt;code&gt;ascii&lt;/code&gt;. But it is advised to be mindful about this behavior when working with strings that could contain multi-byte characters.</source>
          <target state="translated">これは、 &lt;code&gt;latin1&lt;/code&gt; または &lt;code&gt;ascii&lt;/code&gt; の一般的なケースでは問題ではありません。ただし、マルチバイト文字を含む可能性のある文字列を操作する場合は、この動作に注意することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3d02f8a61048e89839ba3d326aaa6f920c92db2d" translate="yes" xml:space="preserve">
          <source>This is not used in Node.js and is provided purely for completeness.</source>
          <target state="translated">これはNode.jsでは使用されておらず、純粋に完全性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="1c66676dbad5fdaa521ab930e256e4fa335eadac" translate="yes" xml:space="preserve">
          <source>This is now defined as a shared symbol.</source>
          <target state="translated">これが共有シンボルとして定義されるようになりました。</target>
        </trans-unit>
        <trans-unit id="f5242dbc0ccf6b9ae1f9550732bf4ac3daf1ddd8" translate="yes" xml:space="preserve">
          <source>This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.</source>
          <target state="translated">これは主に NFS マウント上でファイルを開く際に便利です。これは I/O パフォーマンスに非常に大きな影響を与えるので、必要でない限りこのフラグの使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="13659d9d635a0bb9731d74ddaa44ccbacf7114d8" translate="yes" xml:space="preserve">
          <source>This is the abstraction to use to reference a &lt;code&gt;napi_value&lt;/code&gt;. This allows for users to manage the lifetimes of JavaScript values, including defining their minimum lifetimes explicitly.</source>
          <target state="translated">これは、 &lt;code&gt;napi_value&lt;/code&gt; を参照するために使用する抽象化です。これにより、ユーザーは、最小ライフタイムを明示的に定義することを含め、JavaScript値のライフタイムを管理できます。</target>
        </trans-unit>
        <trans-unit id="34a774ab2a4921da0fd743e3684fff94908d9756" translate="yes" xml:space="preserve">
          <source>This is the extent of Node.js's awareness of &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="translated">これは、Node.jsが &lt;code&gt;package.json&lt;/code&gt; ファイルを認識する程度です。</target>
        </trans-unit>
        <trans-unit id="1b5770f4a8b8d2b91b8b89200402bfc85d1d9ae4" translate="yes" xml:space="preserve">
          <source>This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</source>
          <target state="translated">This is the extent of the awareness of &lt;code&gt;package.json&lt;/code&gt; files within Node.js.</target>
        </trans-unit>
        <trans-unit id="3d91ef4e57195bccfb6358ea28c6511e77bda4df" translate="yes" xml:space="preserve">
          <source>This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</source>
          <target state="translated">This is the final event emitted by any &lt;code&gt;Worker&lt;/code&gt; instance.</target>
        </trans-unit>
        <trans-unit id="7b4dc164d26c00c2e0663b4d38c3db42c8434ee4" translate="yes" xml:space="preserve">
          <source>This is the legacy version of &lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt;&lt;code&gt;process.hrtime.bigint()&lt;/code&gt;&lt;/a&gt; before &lt;code&gt;bigint&lt;/code&gt; was introduced in JavaScript.</source>
          <target state="translated">これは、 &lt;code&gt;bigint&lt;/code&gt; がJavaScriptで導入される前の&lt;a href=&quot;#process_process_hrtime_bigint&quot;&gt; &lt;code&gt;process.hrtime.bigint()&lt;/code&gt; の&lt;/a&gt;レガシーバージョンです。</target>
        </trans-unit>
        <trans-unit id="2525459183823536083e4ebd1435d86bbd1b85ed" translate="yes" xml:space="preserve">
          <source>This is the most basic way to use a domain.</source>
          <target state="translated">これはドメインを使う上で最も基本的な方法です。</target>
        </trans-unit>
        <trans-unit id="80b89f0e469cc98dfba15cb1d10494441d90a747" translate="yes" xml:space="preserve">
          <source>This is the raw HTTP body and has nothing to do with higher-level multi-part body encodings that may be used.</source>
          <target state="translated">これは生の HTTP ボディであり、使用される可能性のある高レベルのマルチパートボディエンコーディングとは何の関係もありません。</target>
        </trans-unit>
        <trans-unit id="538139721ac2a46c540659479840eaa7091999c5" translate="yes" xml:space="preserve">
          <source>This is the same behavior as &lt;code&gt;buf.subarray()&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;buf.subarray()&lt;/code&gt; と同じ動作です。</target>
        </trans-unit>
        <trans-unit id="8885bf9fac1f550c45c516012648aa0d3c485186" translate="yes" xml:space="preserve">
          <source>This is the size (in bytes) of pre-allocated internal &lt;code&gt;Buffer&lt;/code&gt; instances used for pooling. This value may be modified.</source>
          <target state="translated">これは、プールに使用される事前に割り当てられた内部 &lt;code&gt;Buffer&lt;/code&gt; インスタンスのサイズ（バイト単位）です。この値は変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="48967cae6d1c2b0c2a13e4b791916ed7e65a4ccd" translate="yes" xml:space="preserve">
          <source>This is useful for tracking potential errors in an application while using the &lt;code&gt;Promise&lt;/code&gt; constructor, as multiple resolutions are silently swallowed. However, the occurrence of this event does not necessarily indicate an error. For example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;&lt;code&gt;Promise.race()&lt;/code&gt;&lt;/a&gt; can trigger a &lt;code&gt;'multipleResolves'&lt;/code&gt; event.</source>
          <target state="translated">これは、 &lt;code&gt;Promise&lt;/code&gt; コンストラクターの使用中にアプリケーションで発生する可能性のあるエラーを追跡するのに役立ちます。これは、複数の解決策が暗黙のうちに飲み込まれるためです。ただし、このイベントの発生は必ずしもエラーを示しているわけではありません。たとえば、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt; &lt;code&gt;Promise.race()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;'multipleResolves'&lt;/code&gt; イベントをトリガーできます。</target>
        </trans-unit>
        <trans-unit id="01763a87bcd722e13be0664e3816427229bb3d32" translate="yes" xml:space="preserve">
          <source>This issue also occurs when the &lt;code&gt;loop()&lt;/code&gt; call is scheduled using the &lt;code&gt;process.nextTick()&lt;/code&gt; and &lt;code&gt;queueMicrotask()&lt;/code&gt; functions.</source>
          <target state="translated">この問題は、 &lt;code&gt;loop()&lt;/code&gt; 呼び出しが &lt;code&gt;process.nextTick()&lt;/code&gt; および &lt;code&gt;queueMicrotask()&lt;/code&gt; 関数を使用してスケジュールされている場合にも発生します。</target>
        </trans-unit>
        <trans-unit id="c84e6ba5ec93b3229b046976c5bb2ea3de0008df" translate="yes" xml:space="preserve">
          <source>This issue occurs because all contexts share the same microtask and nextTick queues.</source>
          <target state="translated">この問題は、すべてのコンテキストが同じマイクロタスクと nextTick キューを共有しているために発生します。</target>
        </trans-unit>
        <trans-unit id="087b80944dc12b408a7190bd19a55dd80487fba1" translate="yes" xml:space="preserve">
          <source>This macro includes &lt;code&gt;NAPI_MODULE&lt;/code&gt;, and declares an &lt;code&gt;Init&lt;/code&gt; function with a special name and with visibility beyond the addon. This will allow Node.js to initialize the module even if it is loaded multiple times.</source>
          <target state="translated">このマクロには &lt;code&gt;NAPI_MODULE&lt;/code&gt; が含まれており、特別な名前とアドオンを超えた可視性を持つ &lt;code&gt;Init&lt;/code&gt; 関数を宣言します。これにより、Node.jsは、複数回ロードされた場合でもモジュールを初期化できます。</target>
        </trans-unit>
        <trans-unit id="65b6d753134ef1843140e701dbcf7c6cf6f1c011" translate="yes" xml:space="preserve">
          <source>This mainly adds some input validation on top of &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt;. As an additional convenience, &lt;code&gt;superConstructor&lt;/code&gt; will be accessible through the &lt;code&gt;constructor.super_&lt;/code&gt; property.</source>
          <target state="translated">これは主に &lt;code&gt;Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)&lt;/code&gt; 上にいくつかの入力検証を追加します。追加の便宜として、 &lt;code&gt;superConstructor&lt;/code&gt; には、 &lt;code&gt;constructor.super_&lt;/code&gt; プロパティを介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bbe38e8ab91654a3718be6a69fd1e9049d8a23cf" translate="yes" xml:space="preserve">
          <source>This method adds HTTP trailing headers (a header but at the end of the message) to the response.</source>
          <target state="translated">このメソッドは、HTTP の末尾にあるヘッダ (ヘッダではなくメッセージの最後にあるもの)をレスポンスに追加します。</target>
        </trans-unit>
        <trans-unit id="65a6ac889d5d3a2216eb8e367915333b528d1f56" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This API is similar to &lt;code&gt;napi_call_function&lt;/code&gt;. However, it is used to call &lt;em&gt;from&lt;/em&gt; native code back &lt;em&gt;into&lt;/em&gt; JavaScript &lt;em&gt;after&lt;/em&gt; returning from an async operation (when there is no other script on the stack). It is a fairly simple wrapper around &lt;code&gt;node::MakeCallback&lt;/code&gt;.</source>
          <target state="translated">このメソッドを使用すると、JavaScript関数オブジェクトをネイティブアドオンから呼び出すことができます。このAPIは &lt;code&gt;napi_call_function&lt;/code&gt; に似ています。しかし、呼び出すために使用されている&lt;em&gt;から&lt;/em&gt;ネイティブコードの背面&lt;em&gt;に&lt;/em&gt;はJavaScript &lt;em&gt;後&lt;/em&gt;（スタック上の他のスクリプトが存在しない場合）非同期操作から戻ります。これは &lt;code&gt;node::MakeCallback&lt;/code&gt; かなりシンプルなラッパーです。</target>
        </trans-unit>
        <trans-unit id="314d268cd28ce9b140b0dded93860db9fb90479e" translate="yes" xml:space="preserve">
          <source>This method allows a JavaScript function object to be called from a native add-on. This is the primary mechanism of calling back &lt;em&gt;from&lt;/em&gt; the add-on's native code &lt;em&gt;into&lt;/em&gt; JavaScript. For the special case of calling into JavaScript after an async operation, see &lt;a href=&quot;#n_api_napi_make_callback&quot;&gt;&lt;code&gt;napi_make_callback&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドを使用すると、JavaScript関数オブジェクトをネイティブアドオンから呼び出すことができます。これは、コールバックの主要なメカニズムです&lt;em&gt;から&lt;/em&gt;アドオンのネイティブコード&lt;em&gt;に&lt;/em&gt; JavaScriptを。非同期操作後にJavaScriptを呼び出す特殊なケースについては、&lt;a href=&quot;#n_api_napi_make_callback&quot;&gt; &lt;code&gt;napi_make_callback&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5b47fa157850c2f5703ae846bb53e6699d8248ed" translate="yes" xml:space="preserve">
          <source>This method allows the efficient definition of multiple properties on a given object. The properties are defined using property descriptors (see &lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt;&lt;code&gt;napi_property_descriptor&lt;/code&gt;&lt;/a&gt;). Given an array of such property descriptors, this API will set the properties on the object one at a time, as defined by &lt;code&gt;DefineOwnProperty()&lt;/code&gt; (described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;Section 9.1.6&lt;/a&gt; of the ECMA-262 specification).</source>
          <target state="translated">このメソッドを使用すると、特定のオブジェクトの複数のプロパティを効率的に定義できます。プロパティは、プロパティ記述子を使用して定義されます（&lt;a href=&quot;#n_api_napi_property_descriptor&quot;&gt; &lt;code&gt;napi_property_descriptor&lt;/code&gt; を&lt;/a&gt;参照）。このようなプロパティ記述子の配列を指定すると、このAPIは、 &lt;code&gt;DefineOwnProperty()&lt;/code&gt; で定義されているように、オブジェクトのプロパティを一度に1つずつ設定します（ ECMA-262仕様の&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc&quot;&gt;セクション9.1.6&lt;/a&gt;で説明）。</target>
        </trans-unit>
        <trans-unit id="3024bc40da0e8b2f8456ff7b850738108b0ba432" translate="yes" xml:space="preserve">
          <source>This method calls &lt;code&gt;console.log()&lt;/code&gt; passing it the arguments received. This method does not produce any XML formatting.</source>
          <target state="translated">このメソッドは、受け取った引数を渡して &lt;code&gt;console.log()&lt;/code&gt; を呼び出します。このメソッドは、XMLフォーマットを生成しません。</target>
        </trans-unit>
        <trans-unit id="a58dad5fbe14785fff61707964fc0d135efd16a6" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass.</source>
          <target state="translated">このメソッドは、特定の &lt;code&gt;Agent&lt;/code&gt; サブクラスによってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="044476cda3ae03b23c22f5aa1722fe2c9153e73c" translate="yes" xml:space="preserve">
          <source>This method can be overridden by a particular &lt;code&gt;Agent&lt;/code&gt; subclass. If this method returns a falsy value, the socket will be destroyed instead of persisting it for use with the next request.</source>
          <target state="translated">このメソッドは、特定の &lt;code&gt;Agent&lt;/code&gt; サブクラスによってオーバーライドできます。このメソッドが偽の値を返す場合、ソケットは次のリクエストで使用するために永続化する代わりに破棄されます。</target>
        </trans-unit>
        <trans-unit id="411dbf433a68f70422dbaf488ba5f65a2beaeff4" translate="yes" xml:space="preserve">
          <source>This method can be used to request a peer's certificate after the secure connection has been established.</source>
          <target state="translated">このメソッドは、セキュアな接続が確立された後に、ピアの証明書を要求するために使用できます。</target>
        </trans-unit>
        <trans-unit id="880393178dbd75cbd21c9662d8dee3698a77a077" translate="yes" xml:space="preserve">
          <source>This method can be used, in particular, to increase cache hits.</source>
          <target state="translated">この方法は、特にキャッシュのヒット数を増やすために使用することができます。</target>
        </trans-unit>
        <trans-unit id="5f4cb1d7d9a937c696a9d3a130cc76d5f3a14117" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;) to prevent infinite recursion.</source>
          <target state="translated">このメソッドは、モジュールが評価されている間（ &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt; ）に呼び出して、無限の再帰を防ぐことはできません。</target>
        </trans-unit>
        <trans-unit id="ae61ef6fb5c5e0b2e4e9dd9285bb0ec91b77d7af" translate="yes" xml:space="preserve">
          <source>This method cannot be called while the module is being evaluated (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt;).</source>
          <target state="translated">This method cannot be called while the module is being evaluated ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluating'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ce10b9da65b616da4694a90a9e7a21235864fb9b" translate="yes" xml:space="preserve">
          <source>This method defaults to the &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; constructor and can be overridden on subclasses.</source>
          <target state="translated">このメソッドのデフォルトは&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;コンストラクターであり、サブクラスでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="fe24c9359e77ab155e2cf5807443c493af258ac7" translate="yes" xml:space="preserve">
          <source>This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt;. All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</source>
          <target state="translated">This method disables the instance of &lt;code&gt;AsyncLocalStorage&lt;/code&gt; . All subsequent calls to &lt;code&gt;asyncLocalStorage.getStore()&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt; until &lt;code&gt;asyncLocalStorage.run()&lt;/code&gt; is called again.</target>
        </trans-unit>
        <trans-unit id="d59adf1d819f06dbe25fb548331d4b223442948c" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. Stops the current JavaScript CPU profiling session if one has been started and prints the report to the &lt;strong&gt;Profiles&lt;/strong&gt; panel of the inspector. See &lt;a href=&quot;#console_console_profile_label&quot;&gt;&lt;code&gt;console.profile()&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">このメソッドは、インスペクターで使用されない限り、何も表示しません。現在のJavaScript CPUプロファイリングセッションが開始されている場合は停止し、インスペクターの[ &lt;strong&gt;プロファイル&lt;/strong&gt; ]パネルにレポートを出力します。例については、&lt;a href=&quot;#console_console_profile_label&quot;&gt; &lt;code&gt;console.profile()&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ec4a52764354b50bcb9a5cfff971e55a8182917" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.markTimeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timestamp_label&quot;&gt;&lt;code&gt;console.timeStamp()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、インスペクターで使用されない限り、何も表示しません。 &lt;code&gt;console.markTimeline()&lt;/code&gt; メソッドは、非推奨の形である&lt;a href=&quot;#console_console_timestamp_label&quot;&gt; &lt;code&gt;console.timeStamp()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c9644bae39bdc4b2a06283995736aff4accc9db" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.profile()&lt;/code&gt; method starts a JavaScript CPU profile with an optional label until &lt;a href=&quot;#console_console_profileend_label&quot;&gt;&lt;code&gt;console.profileEnd()&lt;/code&gt;&lt;/a&gt; is called. The profile is then added to the &lt;strong&gt;Profile&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">このメソッドは、インスペクターで使用されない限り、何も表示しません。 &lt;code&gt;console.profile()&lt;/code&gt; メソッドがするまで、オプションのラベルとJavaScriptのCPUプロファイルを開始します&lt;a href=&quot;#console_console_profileend_label&quot;&gt; &lt;code&gt;console.profileEnd()&lt;/code&gt; &lt;/a&gt;と呼ばれています。次に、プロファイルがインスペクターの[ &lt;strong&gt;プロファイル&lt;/strong&gt; ]パネルに追加されます。</target>
        </trans-unit>
        <trans-unit id="66b73ac52f9f87f1e288fc8b5563d582410feaa9" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeStamp()&lt;/code&gt; method adds an event with the label &lt;code&gt;'label'&lt;/code&gt; to the &lt;strong&gt;Timeline&lt;/strong&gt; panel of the inspector.</source>
          <target state="translated">このメソッドは、インスペクターで使用されない限り、何も表示しません。 &lt;code&gt;console.timeStamp()&lt;/code&gt; メソッドは、ラベルでイベントを追加する &lt;code&gt;'label'&lt;/code&gt; に&lt;strong&gt;タイムライン&lt;/strong&gt;インスペクタのパネル。</target>
        </trans-unit>
        <trans-unit id="902c866e4222a0e01ce48bdc721e0e086336e617" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timeline()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_time_label&quot;&gt;&lt;code&gt;console.time()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、インスペクターで使用されない限り、何も表示しません。 &lt;code&gt;console.timeline()&lt;/code&gt; メソッドは、非推奨の形である&lt;a href=&quot;#console_console_time_label&quot;&gt; &lt;code&gt;console.time()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="89dc19b7a95d7304b45400b37628fe89d51d2642" translate="yes" xml:space="preserve">
          <source>This method does not display anything unless used in the inspector. The &lt;code&gt;console.timelineEnd()&lt;/code&gt; method is the deprecated form of &lt;a href=&quot;#console_console_timeend_label&quot;&gt;&lt;code&gt;console.timeEnd()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、インスペクターで使用されない限り、何も表示しません。 &lt;code&gt;console.timelineEnd()&lt;/code&gt; メソッドは、非推奨の形である&lt;a href=&quot;#console_console_timeend_label&quot;&gt; &lt;code&gt;console.timeEnd()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9ee1a742255ec0013c5a3a66d547b57b65aa47b9" translate="yes" xml:space="preserve">
          <source>This method exists for parity with the Web &lt;code&gt;MessagePort&lt;/code&gt; API. In Node.js, it is only useful for ignoring messages when no event listener is present. Node.js also diverges in its handling of &lt;code&gt;.onmessage&lt;/code&gt;. Setting it will automatically call &lt;code&gt;.start()&lt;/code&gt;, but unsetting it will let messages queue up until a new handler is set or the port is discarded.</source>
          <target state="translated">このメソッドは、Web &lt;code&gt;MessagePort&lt;/code&gt; API と同等にするために存在します。Node.jsでは、イベントリスナーが存在しないときにメッセージを無視する場合にのみ役立ちます。Node.jsは、 &lt;code&gt;.onmessage&lt;/code&gt; の処理も異なります。設定すると自動的に &lt;code&gt;.start()&lt;/code&gt; が呼び出されますが、設定を解除すると、新しいハンドラーが設定されるかポートが破棄されるまでメッセージがキューに入れられます。</target>
        </trans-unit>
        <trans-unit id="1bd0e8798533a40b472a574de3407e9a7b72f42b" translate="yes" xml:space="preserve">
          <source>This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">This method freezes a given object. This prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. It also prevents the object's prototype from being changed. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.freeze&quot;&gt;Section 19.1.2.6&lt;/a&gt; of the ECMA-262 specification.</target>
        </trans-unit>
        <trans-unit id="3bfb7ad344e3264e6f56ee6b803df6669da02258" translate="yes" xml:space="preserve">
          <source>This method has a custom variant for promises that is available using &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">このメソッドには、&lt;a href=&quot;util#util_util_promisify_original&quot;&gt; &lt;code&gt;util.promisify()&lt;/code&gt; &lt;/a&gt;を使用して利用できるpromise用のカスタムバリアントがあります。</target>
        </trans-unit>
        <trans-unit id="d57d1e099a57589123cef0225673441664e1e377" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</source>
          <target state="translated">This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backward compatibility.</target>
        </trans-unit>
        <trans-unit id="eb57dbb6c324bb36be5d114bc6d97130ad87632c" translate="yes" xml:space="preserve">
          <source>This method is aliased as &lt;code&gt;worker.destroy()&lt;/code&gt; for backwards compatibility.</source>
          <target state="translated">このメソッドは、下位互換性のために &lt;code&gt;worker.destroy()&lt;/code&gt; としてエイリアスされています。</target>
        </trans-unit>
        <trans-unit id="e775a3566b8847c710d9cc718838379fe8af31e8" translate="yes" xml:space="preserve">
          <source>This method is almost identical to &lt;a href=&quot;#domain_domain_bind_callback&quot;&gt;&lt;code&gt;domain.bind(callback)&lt;/code&gt;&lt;/a&gt;. However, in addition to catching thrown errors, it will also intercept &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; objects sent as the first argument to the function.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;#domain_domain_bind_callback&quot;&gt; &lt;code&gt;domain.bind(callback)&lt;/code&gt; &lt;/a&gt;とほぼ同じです。ただし、スローされたエラーをキャッチするだけでなく、関数の最初の引数として送信された&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;オブジェクトもインターセプトします。</target>
        </trans-unit>
        <trans-unit id="55fe8b47083e44662b3b21e0205abdb2450ff04a" translate="yes" xml:space="preserve">
          <source>This method is automatically called when an &lt;code&gt;URL&lt;/code&gt; object is serialized with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;URL&lt;/code&gt; オブジェクトが&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt; &lt;code&gt;JSON.stringify()&lt;/code&gt; で&lt;/a&gt;シリアル化されるときに自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="28801c3e02284a4ad1c8e05607ca10e063aca0d7" translate="yes" xml:space="preserve">
          <source>This method is called to generate error objects that will be thrown when an object can not be cloned.</source>
          <target state="translated">このメソッドは、オブジェクトを複製できなかった場合にスローされるエラーオブジェクトを生成するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="700f32b0f67ecb7c4ac4e3ae91ec634c886d4a35" translate="yes" xml:space="preserve">
          <source>This method is called to read some kind of host object, i.e. an object that is created by native C++ bindings. If it is not possible to deserialize the data, a suitable exception should be thrown.</source>
          <target state="translated">このメソッドは、ある種のホストオブジェクト、つまりネイティブ C++バインディングによって作成されたオブジェクトを読み込むために呼び出されます。データをデシリアライズできない場合は、適切な例外をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="b50d7fb37c7e66d40b59fce47a8cf43fd69d830e" translate="yes" xml:space="preserve">
          <source>This method is called to write some kind of host object, i.e. an object created by native C++ bindings. If it is not possible to serialize &lt;code&gt;object&lt;/code&gt;, a suitable exception should be thrown.</source>
          <target state="translated">このメソッドは、ある種のホストオブジェクト、つまりネイティブC ++バインディングによって作成されたオブジェクトを書き込むために呼び出されます。 &lt;code&gt;object&lt;/code&gt; をシリアル化できない場合は、適切な例外をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="cc90c26b3f24d636637240e71fd082c904e9c070" translate="yes" xml:space="preserve">
          <source>This method is called when the serializer is going to serialize a &lt;code&gt;SharedArrayBuffer&lt;/code&gt; object. It must return an unsigned 32-bit integer ID for the object, using the same ID if this &lt;code&gt;SharedArrayBuffer&lt;/code&gt; has already been serialized. When deserializing, this ID will be passed to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; オブジェクトをシリアル化するときに呼び出されます。この &lt;code&gt;SharedArrayBuffer&lt;/code&gt; が既にシリアル化されている場合は、同じIDを使用して、オブジェクトの符号なし32ビット整数IDを返す必要があります。逆シリアル化するとき、このIDは&lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt; &lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="a90ca117688b90f4f93a88c2020c612e45a213fe" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_get_property&quot;&gt;&lt;code&gt;napi_get_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;napi_value&lt;/code&gt; として渡された文字列から作成されたnapi_valueを&lt;a href=&quot;#n_api_napi_get_property&quot;&gt; &lt;code&gt;napi_get_property&lt;/code&gt; &lt;/a&gt;してnapi_get_propertyを呼び出すのと &lt;code&gt;utf8Name&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ff0f235c75ab596d17873611663abac578a666d2" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_has_property&quot;&gt;&lt;code&gt;napi_has_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;napi_value&lt;/code&gt; として渡された文字列から作成されたnapi_valueを&lt;a href=&quot;#n_api_napi_has_property&quot;&gt; &lt;code&gt;napi_has_property&lt;/code&gt; &lt;/a&gt;してnapi_has_propertyを呼び出すのと &lt;code&gt;utf8Name&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5fffe0150f23e478ffc2985c081f396a015cdadd" translate="yes" xml:space="preserve">
          <source>This method is equivalent to calling &lt;a href=&quot;#n_api_napi_set_property&quot;&gt;&lt;code&gt;napi_set_property&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;napi_value&lt;/code&gt; created from the string passed in as &lt;code&gt;utf8Name&lt;/code&gt;.</source>
          <target state="translated">このメソッドは呼び出すことに相当し&lt;a href=&quot;#n_api_napi_set_property&quot;&gt; &lt;code&gt;napi_set_property&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;napi_value&lt;/code&gt; として渡された文字列から作成された &lt;code&gt;utf8Name&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="19464a10e7ec85fab298874a00280da292ea3dfb" translate="yes" xml:space="preserve">
          <source>This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This method is guaranteed to return an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specifies a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="79406247f664fad5db62dc93aae5d2cdf35f025d" translate="yes" xml:space="preserve">
          <source>This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt;&lt;code&gt;TypedArray#subarray()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This method is inherited from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray&quot;&gt; &lt;code&gt;TypedArray#subarray()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b2b2abbf6b99b52821177c95dfb1032a424b6a78" translate="yes" xml:space="preserve">
          <source>This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">This method is intentionally generic and works with the web platform &lt;a href=&quot;https://dom.spec.whatwg.org/#interface-eventtarget&quot;&gt;EventTarget&lt;/a&gt; interface, which has no special &lt;code&gt;'error'&lt;/code&gt; event semantics and does not listen to the &lt;code&gt;'error'&lt;/code&gt; event.</target>
        </trans-unit>
        <trans-unit id="3517d618f187f767a89b4300a1b63a8e5b17cacd" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows system. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">この方法は、Windowsシステムでのみ意味があります。POSIXシステムでは、このメソッドは機能せず、常に変更なしで &lt;code&gt;path&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="25056a0846e91f46d370fe64132434ed4f7def8b" translate="yes" xml:space="preserve">
          <source>This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</source>
          <target state="translated">This method is meaningful only on Windows systems. On POSIX systems, the method is non-operational and always returns &lt;code&gt;path&lt;/code&gt; without modifications.</target>
        </trans-unit>
        <trans-unit id="c983f46e76b9dd0433799a448f5bdb19ed94b9c5" translate="yes" xml:space="preserve">
          <source>This method is not compatible with the &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;, which is a superclass of &lt;code&gt;Buffer&lt;/code&gt;. To copy the slice, use &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;Buffer&lt;/code&gt; のスーパークラスである &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; と互換性がありません。スライスをコピーするには、 &lt;code&gt;Uint8Array.prototype.slice()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b32b22b8c3858f8f2465d3884aa82bd24680b6ec" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Deserializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">このメソッドは &lt;code&gt;Deserializer&lt;/code&gt; クラス自体にはありませんが、サブクラスで提供できます。</target>
        </trans-unit>
        <trans-unit id="9f595b58310133998e11cc3f534439b34974ab0b" translate="yes" xml:space="preserve">
          <source>This method is not present on the &lt;code&gt;Serializer&lt;/code&gt; class itself but can be provided by subclasses.</source>
          <target state="translated">このメソッドは &lt;code&gt;Serializer&lt;/code&gt; クラス自体にはありませんが、サブクラスで提供できます。</target>
        </trans-unit>
        <trans-unit id="c26e9b3b06705355d77378147bd81e2be0268ac9" translate="yes" xml:space="preserve">
          <source>This method is only available if &lt;code&gt;http2session.type&lt;/code&gt; is equal to &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt;.</source>
          <target state="translated">場合、このメソッドはのみ使用可能です &lt;code&gt;http2session.type&lt;/code&gt; がに等しい &lt;code&gt;http2.constants.NGHTTP2_SESSION_CLIENT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1cc56a973921f1c8e3418ef2a7ab83893408b1d1" translate="yes" xml:space="preserve">
          <source>This method is only valid when using &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt; &lt;code&gt;fs.lstat()&lt;/code&gt; &lt;/a&gt;を使用する場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="0f78dbde2f747ddef4d4559acc66df6ead53e6a5" translate="yes" xml:space="preserve">
          <source>This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</source>
          <target state="translated">This method is to be used when the &lt;code&gt;asyncLocalStorage&lt;/code&gt; is not in use anymore in the current process.</target>
        </trans-unit>
        <trans-unit id="bf2ae0bdcbd8efcf11842d83c6ae7c582606fc85" translate="yes" xml:space="preserve">
          <source>This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt;&lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt;&lt;/a&gt; error will be thrown.</source>
          <target state="translated">This method is used after the module is linked to set the values of exports. If it is called before the module is linked, an &lt;a href=&quot;errors#ERR_VM_MODULE_STATUS&quot;&gt; &lt;code&gt;ERR_VM_MODULE_STATUS&lt;/code&gt; &lt;/a&gt; error will be thrown.</target>
        </trans-unit>
        <trans-unit id="c79bf54fc2158426a1f13109023fc9410f485037" translate="yes" xml:space="preserve">
          <source>This method is used to instantiate a new JavaScript value using a given &lt;code&gt;napi_value&lt;/code&gt; that represents the constructor for the object. For example, consider the following snippet:</source>
          <target state="translated">このメソッドは、オブジェクトのコンストラクターを表す特定の &lt;code&gt;napi_value&lt;/code&gt; を使用して、新しいJavaScript値をインスタンス化するために使用されます。たとえば、次のスニペットを考えてみます。</target>
        </trans-unit>
        <trans-unit id="137f79d3611d70d649552c51bbc155deba38dbc3" translate="yes" xml:space="preserve">
          <source>This method is used within a callback function to retrieve details about the call like the arguments and the &lt;code&gt;this&lt;/code&gt; pointer from a given callback info.</source>
          <target state="translated">このメソッドは、指定されたコールバック情報から引数や &lt;code&gt;this&lt;/code&gt; ポインターなどの呼び出しに関する詳細を取得するためにコールバック関数内で使用されます。</target>
        </trans-unit>
        <trans-unit id="60fde3ca8666014eb1362597c31de1875933d209" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">This method makes the IPC channel keep the event loop of the parent process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</target>
        </trans-unit>
        <trans-unit id="251db73775a8b3eb3fd6d9fbf270dcd66e16a1b7" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</source>
          <target state="translated">This method makes the IPC channel keep the event loop of the process running if &lt;code&gt;.unref()&lt;/code&gt; has been called before.</target>
        </trans-unit>
        <trans-unit id="81a4b339f84ffd2a9b0ba60d97efea903da7fe04" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the parent process running, and lets it finish even while the channel is open.</source>
          <target state="translated">このメソッドは、IPC チャネルを親プロセスのイベントループを実行し続けないようにし、チャネルが開いている間であっても終了させます。</target>
        </trans-unit>
        <trans-unit id="df073da75d6db77d3f3df5fbdcc741763d5d7bc9" translate="yes" xml:space="preserve">
          <source>This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.</source>
          <target state="translated">この方法では、IPC チャネルをプロセスのイベントループを実行したままにせず、チャネルが開いている間も終了させることができます。</target>
        </trans-unit>
        <trans-unit id="f55f033607e44dce887582c62c0f096d380f7f0b" translate="yes" xml:space="preserve">
          <source>This method may be called at most one time on a message before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;が呼び出される前に、メッセージで最大1回呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3526009bcd91f17d5aa041034e585a5c485866dd" translate="yes" xml:space="preserve">
          <source>This method must only be called once on a message and it must be called before &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">このメソッドは、メッセージに対して1回だけ呼び出す必要があり、&lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt; &lt;code&gt;response.end()&lt;/code&gt; &lt;/a&gt;が呼び出される前に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="dec2a56a8fed198bcdf723bd5b7ecf90cb7dc580" translate="yes" xml:space="preserve">
          <source>This method no longer supports multiple calls that don&amp;rsquo;t map to individual &lt;code&gt;console.time()&lt;/code&gt; calls; see below for details.</source>
          <target state="translated">このメソッドは、個々の &lt;code&gt;console.time()&lt;/code&gt; 呼び出しにマップしない複数の呼び出しをサポートしなくなりました。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6f47d3b4379f25f04e6a25df0b8f764ba8d8b4d" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ClientRequest&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;ClientRequest&lt;/code&gt; への参照を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="a29f826336bbe3debd8646a229b260cfd3ea8a80" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;ServerResponse&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;ServerResponse&lt;/code&gt; への参照を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="2bead6ce0f903b94b3581fba9b0c460760d9b196" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;decipher&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;decipher&lt;/code&gt; への参照を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="326608dac58b4293b056bd095e3a8d421c4657b5" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="translated">このメソッドは &lt;code&gt;worker&lt;/code&gt; への参照を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="eccd72d8d3bfb8524959d772fbf00e2e2ccd4284" translate="yes" xml:space="preserve">
          <source>This method now returns a reference to &lt;code&gt;writable&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;writable&lt;/code&gt; への参照を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="f736dde7b82e9ca5487f277a3fc447dc5f614522" translate="yes" xml:space="preserve">
          <source>This method now supports passing &lt;code&gt;options&lt;/code&gt;, specifically &lt;code&gt;options.ttl&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;options&lt;/code&gt; 、具体的には &lt;code&gt;options.ttl&lt;/code&gt; の受け渡しをサポートするようになりました。</target>
        </trans-unit>
        <trans-unit id="edb4af30902bebe24d30824096149434c6b8e2b5" translate="yes" xml:space="preserve">
          <source>This method now throws if the GCM tag length is invalid.</source>
          <target state="translated">このメソッドは、GCM タグの長さが無効な場合にスローされるようになりました。</target>
        </trans-unit>
        <trans-unit id="0970dd484b399eb1d57fb730f0ead071cb410ad4" translate="yes" xml:space="preserve">
          <source>This method relies on &lt;code&gt;Object.prototype.toString()&lt;/code&gt; behavior. It is possible to obtain an incorrect result when the &lt;code&gt;object&lt;/code&gt; argument manipulates &lt;code&gt;@@toStringTag&lt;/code&gt;.</source>
          <target state="translated">このメソッドは、 &lt;code&gt;Object.prototype.toString()&lt;/code&gt; の動作に依存しています。 &lt;code&gt;object&lt;/code&gt; 引数が &lt;code&gt;@@toStringTag&lt;/code&gt; 操作すると、誤った結果が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e9bf5991fa9c748c4ddd11e088d41c09880c593" translate="yes" xml:space="preserve">
          <source>This method returns a boolean for flow control now.</source>
          <target state="translated">このメソッドは、現在のフロー制御のためのブール値を返します。</target>
        </trans-unit>
        <trans-unit id="049623077d54205258c2f93454b1d1ee06027dbc" translate="yes" xml:space="preserve">
          <source>This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt;, it will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This method returns the current store. If this method is called outside of an asynchronous context initialized by calling &lt;code&gt;asyncLocalStorage.run&lt;/code&gt; , it will return &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="718308cf0c5761b550f5d72b6cf7018c6b6197ad" translate="yes" xml:space="preserve">
          <source>This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</source>
          <target state="translated">This method seals a given object. This prevents new properties from being added to it, as well as marking all existing properties as non-configurable. This is described in &lt;a href=&quot;https://tc39.es/ecma262/#sec-object.seal&quot;&gt;Section 19.1.2.20&lt;/a&gt; of the ECMA-262 specification.</target>
        </trans-unit>
        <trans-unit id="b9df835392f53f83cbf43706f5a9c14ab012c2f6" translate="yes" xml:space="preserve">
          <source>This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, &lt;code&gt;response.end()&lt;/code&gt;, MUST be called on each response.</source>
          <target state="translated">このメソッドは、すべての応答ヘッダーと本文が送信されたことをサーバーに通知します。そのサーバーは、このメッセージが完了したと見なす必要があります。メソッド &lt;code&gt;response.end()&lt;/code&gt; は、応答ごとに呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ed78b55e754e7fa16630f5733386b1ad180489e2" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt;&lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;a href=&quot;errors#errors_err_socket_bad_port&quot;&gt; &lt;code&gt;ERR_SOCKET_BAD_PORT&lt;/code&gt; &lt;/a&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="3e295612b73a29336c23b8ca6f269cd989dccbf9" translate="yes" xml:space="preserve">
          <source>This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt;&lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;a href=&quot;errors#errors_err_socket_buffer_size&quot;&gt; &lt;code&gt;ERR_SOCKET_BUFFER_SIZE&lt;/code&gt; &lt;/a&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="cfa965434bb457984be24fcb690fab82b4955073" translate="yes" xml:space="preserve">
          <source>This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</source>
          <target state="translated">This method throws &lt;code&gt;EBADF&lt;/code&gt; if called on an unbound socket.</target>
        </trans-unit>
        <trans-unit id="91894603a2d6878685230629c869c5cc4c825298" translate="yes" xml:space="preserve">
          <source>This method will throw an error if the target &lt;code&gt;pid&lt;/code&gt; does not exist. As a special case, a signal of &lt;code&gt;0&lt;/code&gt; can be used to test for the existence of a process. Windows platforms will throw an error if the &lt;code&gt;pid&lt;/code&gt; is used to kill a process group.</source>
          <target state="translated">ターゲット &lt;code&gt;pid&lt;/code&gt; が存在しない場合、このメソッドはエラーをスローします。特殊なケースとして、 &lt;code&gt;0&lt;/code&gt; のシグナルを使用してプロセスの存在をテストできます。 &lt;code&gt;pid&lt;/code&gt; を使用してプロセスグループを強制終了すると、Windowsプラットフォームはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="d7a1dc1cbb67ff0479ab2d4ec138ffb994e39f33" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">このメソッドは&lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.confと&lt;/a&gt;よく似ています。つまり、提供された最初のサーバーで解決を試みた結果、 &lt;code&gt;NOTFOUND&lt;/code&gt; エラーが発生した場合、 &lt;code&gt;resolve()&lt;/code&gt; メソッドは、提供された後続のサーバーで解決を試み&lt;em&gt;ません&lt;/em&gt;。フォールバックDNSサーバーは、以前のDNSサーバーがタイムアウトするか、その他のエラーが発生した場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="338d35f90fcbabeed9638d0994745e773b223f83" translate="yes" xml:space="preserve">
          <source>This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</source>
          <target state="translated">This method works much like &lt;a href=&quot;https://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;resolve.conf&lt;/a&gt;. That is, if attempting to resolve with the first server provided results in a &lt;code&gt;NOTFOUND&lt;/code&gt; error, the &lt;code&gt;resolve()&lt;/code&gt; method will &lt;em&gt;not&lt;/em&gt; attempt to resolve with subsequent servers provided. Fallback DNS servers will only be used if the earlier ones time out or result in some other error.</target>
        </trans-unit>
        <trans-unit id="da5d4255578cc98dd0bf8203ac9635b394724a79" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously outside of a context and return its return value. The store is not accessible within the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">このメソッドは、コンテキストの外で関数を同期的に実行し、その戻り値を返します。ストアは、コールバック関数内やコールバック内で作成された非同期操作ではアクセスできません。</target>
        </trans-unit>
        <trans-unit id="44bd57aad2273e41bbc9d4b198d65622d5de140c" translate="yes" xml:space="preserve">
          <source>This methods runs a function synchronously within a context and return its return value. The store is not accessible outside of the callback function or the asynchronous operations created within the callback.</source>
          <target state="translated">このメソッドは、コンテキスト内で関数を同期的に実行し、その戻り値を返します。ストアは、コールバック関数やコールバック内で作成された非同期操作の外部からはアクセスできません。</target>
        </trans-unit>
        <trans-unit id="80ac9951e9c15f0ad4db6383a1db28445d3d11d9" translate="yes" xml:space="preserve">
          <source>This mode provides a balance between features and binary size.</source>
          <target state="translated">このモードでは、機能とバイナリサイズのバランスが取れています。</target>
        </trans-unit>
        <trans-unit id="31b0496aa78380171e1c86de496fc1c12964b92b" translate="yes" xml:space="preserve">
          <source>This mode provides a good balance between features and binary size, and it is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">このモードは、機能とバイナリサイズのバランスが取れており、 &lt;code&gt;--with-intl&lt;/code&gt; フラグが渡されない場合のデフォルトの動作です。公式バイナリもこのモードでビルドされます。</target>
        </trans-unit>
        <trans-unit id="58478d1f06fd4faab8d57954c1994c2807d9e162" translate="yes" xml:space="preserve">
          <source>This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</source>
          <target state="translated">This module provides an implementation of a subset of the W3C &lt;a href=&quot;https://w3c.github.io/perf-timing-primer/&quot;&gt;Web Performance APIs&lt;/a&gt; as well as additional APIs for Node.js-specific performance measurements.</target>
        </trans-unit>
        <trans-unit id="61829d000837d81bc1af29b5a18d65d68b23b06e" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been instantiated; otherwise it will throw an error. It could be called also when the module has already been evaluated, in which case it will do one of the following two things:</source>
          <target state="translated">これはモジュールがインスタンス化された後に呼ばれなければなりません。モジュールがすでに評価されている場合にも呼ばれますが、その場合は以下の2つのうちの1つを行います。</target>
        </trans-unit>
        <trans-unit id="6f7e3676799bc8a3bb8082ebb54448a8f098105d" translate="yes" xml:space="preserve">
          <source>This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt;) or it will re-throw the exception that the initial evaluation resulted in (&lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;).</source>
          <target state="translated">This must be called after the module has been linked; otherwise it will reject. It could be called also when the module has already been evaluated, in which case it will either do nothing if the initial evaluation ended in success ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'evaluated'&lt;/code&gt; ) or it will re-throw the exception that the initial evaluation resulted in ( &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4e9b793d8f4835801a2e03d986f43b29e0294b7f" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;. It can be passed to &lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt;&lt;code&gt;clearImmediate()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">このオブジェクトは内部で作成され、&lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt; &lt;code&gt;setImmediate()&lt;/code&gt; &lt;/a&gt;から返されます。スケジュールされたアクションをキャンセルするために、&lt;a href=&quot;timers#timers_clearimmediate_immediate&quot;&gt; &lt;code&gt;clearImmediate()&lt;/code&gt; &lt;/a&gt;に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="30df376bcf445e9ea2fd9f87e4e31b34c96b80ed" translate="yes" xml:space="preserve">
          <source>This object is created internally and is returned from &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt;. It can be passed to either &lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt;&lt;code&gt;clearTimeout()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt;&lt;code&gt;clearInterval()&lt;/code&gt;&lt;/a&gt; in order to cancel the scheduled actions.</source>
          <target state="translated">このオブジェクトは内部で作成され、&lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;timers#timers_setinterval_callback_delay_args&quot;&gt; &lt;code&gt;setInterval()&lt;/code&gt; &lt;/a&gt;から返されます。スケジュールされたアクションをキャンセルするために、&lt;a href=&quot;timers#timers_cleartimeout_timeout&quot;&gt; &lt;code&gt;clearTimeout()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;timers#timers_clearinterval_timeout&quot;&gt; &lt;code&gt;clearInterval()&lt;/code&gt; &lt;/a&gt;に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="11bcec38f2abde0cda814ffe6df5a8ef30f2d46d" translate="yes" xml:space="preserve">
          <source>This object is created internally and returned from &lt;a href=&quot;#http_http_request_options_callback&quot;&gt;&lt;code&gt;http.request()&lt;/code&gt;&lt;/a&gt;. It represents an &lt;em&gt;in-progress&lt;/em&gt; request whose header has already been queued. The header is still mutable using the &lt;a href=&quot;#http_request_setheader_name_value&quot;&gt;&lt;code&gt;setHeader(name, value)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_getheader_name&quot;&gt;&lt;code&gt;getHeader(name)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#http_request_removeheader_name&quot;&gt;&lt;code&gt;removeHeader(name)&lt;/code&gt;&lt;/a&gt; API. The actual header will be sent along with the first data chunk or when calling &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオブジェクトは内部で作成され、&lt;a href=&quot;#http_http_request_options_callback&quot;&gt; &lt;code&gt;http.request()&lt;/code&gt; &lt;/a&gt;から返されます。これは、ヘッダーがすでにキューに入れられている&lt;em&gt;進行中の&lt;/em&gt;要求を表します。ヘッダーは、&lt;a href=&quot;#http_request_setheader_name_value&quot;&gt; &lt;code&gt;setHeader(name, value)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#http_request_getheader_name&quot;&gt; &lt;code&gt;getHeader(name)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#http_request_removeheader_name&quot;&gt; &lt;code&gt;removeHeader(name)&lt;/code&gt; &lt;/a&gt; API を使用して引き続き変更可能です。実際のヘッダーは、最初のデータチャンクとともに、または&lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt; &lt;code&gt;request.end()&lt;/code&gt; を&lt;/a&gt;呼び出すときに送信されます。</target>
        </trans-unit>
        <trans-unit id="276727d393a49049986a6764a6b9df30b3c6e8d1" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">このオブジェクトは、ユーザーではなくHTTPサーバーによって内部的に作成されます。これは、&lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントの2番目のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="5b243244bb0ee3d29d16ef5c4abcf7c8294d4366" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server &amp;mdash; not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">このオブジェクトは、ユーザーではなくHTTPサーバーによって内部的に作成されます。これは、&lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt;イベントの2番目のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="6d42c4c77f2412e6c0e13465d846324fb36177a5" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http2_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="6828f42c873a55b00234dc584cf52b644aef0a4c" translate="yes" xml:space="preserve">
          <source>This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; event.</source>
          <target state="translated">This object is created internally by an HTTP server, not by the user. It is passed as the second parameter to the &lt;a href=&quot;#http_event_request&quot;&gt; &lt;code&gt;'request'&lt;/code&gt; &lt;/a&gt; event.</target>
        </trans-unit>
        <trans-unit id="b590c4862d8c62879d75abd1aa21bce18d4bbd42" translate="yes" xml:space="preserve">
          <source>This object is not intended to be changed or set manually.</source>
          <target state="translated">このオブジェクトは、手動で変更または設定することを意図していません。</target>
        </trans-unit>
        <trans-unit id="39f42f9d3b7870458abec1b8bba415750246f54d" translate="yes" xml:space="preserve">
          <source>This operation cannot be undone.</source>
          <target state="translated">この操作を元に戻すことはできません。</target>
        </trans-unit>
        <trans-unit id="6d68cfded63649ce7ce6716537aea2949bfdc24a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;UInt8Array&lt;/code&gt; - that is, getting returns &lt;code&gt;undefined&lt;/code&gt; and setting does nothing.</source>
          <target state="translated">この演算子は &lt;code&gt;Uint8Array&lt;/code&gt; から継承されているため、範囲外のアクセスでの動作は &lt;code&gt;UInt8Array&lt;/code&gt; と同じです。つまり、戻り &lt;code&gt;undefined&lt;/code&gt; が未定義であり、設定しても何も起こりません。</target>
        </trans-unit>
        <trans-unit id="7b68e9509c532127f52fafc15b3bbfa8dc0ae41a" translate="yes" xml:space="preserve">
          <source>This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt;, so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt;. In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt;, and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt;.</source>
          <target state="translated">This operator is inherited from &lt;code&gt;Uint8Array&lt;/code&gt; , so its behavior on out-of-bounds access is the same as &lt;code&gt;Uint8Array&lt;/code&gt; . In other words, &lt;code&gt;buf[index]&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; when &lt;code&gt;index&lt;/code&gt; is negative or greater or equal to &lt;code&gt;buf.length&lt;/code&gt; , and &lt;code&gt;buf[index] = value&lt;/code&gt; does not modify the buffer if &lt;code&gt;index&lt;/code&gt; is negative or &lt;code&gt;&amp;gt;= buf.length&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd5bc0556c47cdb09e41d5ea59f149aa88e6a463" translate="yes" xml:space="preserve">
          <source>This option is a no-op. It is kept for compatibility.</source>
          <target state="translated">このオプションは無効です。互換性のために保持されます。</target>
        </trans-unit>
        <trans-unit id="4951046a2e8ef3ca45424f2c3f92fe4d355065b2" translate="yes" xml:space="preserve">
          <source>This option is no longer experimental.</source>
          <target state="translated">このオプションはもはや実験的なものではありません。</target>
        </trans-unit>
        <trans-unit id="7ab4df6e22ae62c4d079027a2c218b72789bdc22" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. See &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt; on how to compile a binary using this mode.</source>
          <target state="translated">このオプションは、結果として生じるICUに対するバイナリリンクを静的に作成し、ICUデータの完全なセットを含みます。この方法で作成されたバイナリは、それ以上の外部依存関係がなく、すべてのロケールをサポートしますが、かなり大きい可能性があります。このモードを使用してバイナリをコンパイルする方法については、&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu&quot;&gt;BUILDING.md&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="883efe526d0eeec11102d9602133026d76078e17" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</source>
          <target state="translated">This option makes the resulting binary link against ICU statically and include a full set of ICU data. A binary created this way has no further external dependencies and supports all locales, but might be rather large. This is the default behavior if no &lt;code&gt;--with-intl&lt;/code&gt; flag is passed. The official binaries are also built in this mode.</target>
        </trans-unit>
        <trans-unit id="394a6a9a97a53a953940a51f3bdcf234aa0c8526" translate="yes" xml:space="preserve">
          <source>This option makes the resulting binary link against the ICU library statically, and includes a subset of ICU data (typically only the English locale) within the &lt;code&gt;node&lt;/code&gt; executable.</source>
          <target state="translated">このオプションは、ICUライブラリに対するバイナリリンクを静的に作成し、 &lt;code&gt;node&lt;/code&gt; 実行可能ファイル内にICUデータのサブセット（通常は英語ロケールのみ）を含めます。</target>
        </trans-unit>
        <trans-unit id="28fb57d096952e1be65ad8500b5938bfe5fc415f" translate="yes" xml:space="preserve">
          <source>This optional function will be called before the stream closes, delaying the &lt;code&gt;'finish'&lt;/code&gt; event until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to close resources or write buffered data before a stream ends.</source>
          <target state="translated">このオプション関数は、ストリームが閉じる前に呼び出され、 &lt;code&gt;callback&lt;/code&gt; が呼び出されるまで &lt;code&gt;'finish'&lt;/code&gt; イベントを遅らせます。これは、ストリームが終了する前にリソースを閉じるか、バッファリングされたデータを書き込むのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1e3da6c9301c93f8176d26d36040c1dd6fd9b584" translate="yes" xml:space="preserve">
          <source>This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt;, &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be called in a tick after the stream constructor has returned, delaying any &lt;code&gt;_write()&lt;/code&gt; , &lt;code&gt;_final()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="74b3259a863b34aca5868a5d91c49dfe546aa404" translate="yes" xml:space="preserve">
          <source>This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</source>
          <target state="translated">This optional function will be scheduled in the next tick by the stream constructor, delaying any &lt;code&gt;_read()&lt;/code&gt; and &lt;code&gt;_destroy()&lt;/code&gt; calls until &lt;code&gt;callback&lt;/code&gt; is called. This is useful to initialize state or asynchronously initialize resources before the stream can be used.</target>
        </trans-unit>
        <trans-unit id="2a912ac54f282aa0ebdc6b3d1ffc8071941bc6bc" translate="yes" xml:space="preserve">
          <source>This particular operation may be hard to use in a Node.js context, as the streaming layer makes it hard to know which data will end up in this frame. Also, there is currently no way to consume this data through the Node.js API.</source>
          <target state="translated">ストリーミング層では、どのデータがこのフレームで終わるかを知ることが難しいため、この特定の操作はNode.jsのコンテキストでは使いづらいかもしれません。また、現在のところNode.js APIを使ってこのデータを消費する方法はありません。</target>
        </trans-unit>
        <trans-unit id="019c5d87354ac10b6f36fe3aa511b3b40d2ed49a" translate="yes" xml:space="preserve">
          <source>This pool could be used as follows:</source>
          <target state="translated">このプールは以下のように使用することができます。</target>
        </trans-unit>
        <trans-unit id="b9a02d3eca403bdc666212cf0c86fe38b7d15dd1" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">このプロパティには、読み取り可能なキュー内のバイト（またはオブジェクト）の数が含まれます。この値は、 &lt;code&gt;highWaterMark&lt;/code&gt; のステータスに関するイントロスペクションデータを提供します。</target>
        </trans-unit>
        <trans-unit id="eb9e3144be10a8f3e780007f6d355783bf984b8d" translate="yes" xml:space="preserve">
          <source>This property contains the number of bytes (or objects) in the queue ready to be written. The value provides introspection data regarding the status of the &lt;code&gt;highWaterMark&lt;/code&gt;.</source>
          <target state="translated">このプロパティには、書き込み可能なキュー内のバイト（またはオブジェクト）の数が含まれます。この値は、 &lt;code&gt;highWaterMark&lt;/code&gt; のステータスに関するイントロスペクションデータを提供します。</target>
        </trans-unit>
        <trans-unit id="386fd84fec99ef9b47b7d16488786592c44b6e77" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the underlying file has not been opened yet, i.e. before the &lt;code&gt;'ready'&lt;/code&gt; event is emitted.</source>
          <target state="translated">このプロパティは、基になるファイルがまだ開かれていない場合、つまり &lt;code&gt;'ready'&lt;/code&gt; イベントが発行される前に &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="7fec8e8f93a4601a9b7a5243b25b3bca584a0d87" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt;. If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt;. If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">This property is &lt;code&gt;true&lt;/code&gt; if the worker exited due to &lt;code&gt;.kill()&lt;/code&gt; or &lt;code&gt;.disconnect()&lt;/code&gt; . If the worker exited any other way, it is &lt;code&gt;false&lt;/code&gt; . If the worker has not exited, it is &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f517051737746faa183df11c32566027df8f1e76" translate="yes" xml:space="preserve">
          <source>This property is &lt;code&gt;undefined&lt;/code&gt; for unrecognized &lt;code&gt;KeyObject&lt;/code&gt; types and symmetric keys.</source>
          <target state="translated">このプロパティは、認識されない &lt;code&gt;KeyObject&lt;/code&gt; タイプおよび対称キーに対しては &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d3602e2ea022e3bc39b7484318da9a603e6288b8" translate="yes" xml:space="preserve">
          <source>This property is a reference to the instance itself.</source>
          <target state="translated">このプロパティは、インスタンス自体への参照です。</target>
        </trans-unit>
        <trans-unit id="e33cc887d6f76fe29d205691170fbab8a5395204" translate="yes" xml:space="preserve">
          <source>This property is deprecated.</source>
          <target state="translated">このプロパティは非推奨です。</target>
        </trans-unit>
        <trans-unit id="f73f92d394bd6733681726663afa3be14f683e89" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Please use &lt;code&gt;crypto.setFips()&lt;/code&gt; and &lt;code&gt;crypto.getFips()&lt;/code&gt; instead.</source>
          <target state="translated">このプロパティは非推奨です。代わりに、 &lt;code&gt;crypto.setFips()&lt;/code&gt; および &lt;code&gt;crypto.getFips()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8853fccd2133c9b9842c8f0088d75409954f4216" translate="yes" xml:space="preserve">
          <source>This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</source>
          <target state="translated">This property is guaranteed to be an instance of the &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt; class, a subclass of &lt;a href=&quot;stream#stream_class_stream_duplex&quot;&gt;&amp;lt;stream.Duplex&amp;gt;&lt;/a&gt;, unless the user specified a socket type other than &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&amp;lt;net.Socket&amp;gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d7a656096a20de49803ec12a402ed5a91dccea98" translate="yes" xml:space="preserve">
          <source>This property is particularly useful as a means of determining if a client or server fully transmitted a message before a connection was terminated:</source>
          <target state="translated">このプロパティは、クライアントまたはサーバが接続が終了する前にメッセージを完全に送信したかどうかを判断する手段として特に有用である。</target>
        </trans-unit>
        <trans-unit id="f429a22f8731ad82e20fb7b571d26a7a167f34d0" translate="yes" xml:space="preserve">
          <source>This property now returns &lt;code&gt;undefined&lt;/code&gt; for KeyObject instances of unrecognized type instead of aborting.</source>
          <target state="translated">このプロパティは、打ち切りではなく、認識されないタイプのKeyObjectインスタンスに対して &lt;code&gt;undefined&lt;/code&gt; を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="0258cc0d87a79ada93448982013acd1442be2048" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt;. The value is fixed at &lt;code&gt;2&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stderr&lt;/code&gt; . The value is fixed at &lt;code&gt;2&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="92d2b06eec651f39ccf3c9d6223d4bc3c22e2f93" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt;. The value is fixed at &lt;code&gt;0&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdin&lt;/code&gt; . The value is fixed at &lt;code&gt;0&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="e844b6956113839c2be7aaa33d95e92dee6d1883" translate="yes" xml:space="preserve">
          <source>This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt;. The value is fixed at &lt;code&gt;1&lt;/code&gt;. In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this field does not exist.</source>
          <target state="translated">This property refers to the value of underlying file descriptor of &lt;code&gt;process.stdout&lt;/code&gt; . The value is fixed at &lt;code&gt;1&lt;/code&gt; . In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt; threads, this field does not exist.</target>
        </trans-unit>
        <trans-unit id="5ac2df8cfb8a6ab600d58d12a18a1fd49b8186b6" translate="yes" xml:space="preserve">
          <source>This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</source>
          <target state="translated">This property reflects the current state of a &lt;code&gt;Readable&lt;/code&gt; stream as described in the &lt;a href=&quot;#stream_three_states&quot;&gt;Three states&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="f8bac265f5b733744a963486d246686da65c6443" translate="yes" xml:space="preserve">
          <source>This property represents the state of the connection as a string.</source>
          <target state="translated">このプロパティは、接続の状態を文字列で表します。</target>
        </trans-unit>
        <trans-unit id="eefab09d53dbef4bb15074330e33f073160962a7" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</source>
          <target state="translated">このプロパティは、書き込み用にバッファリングされた文字数を示す。バッファには、エンコード後の長さが不明な文字列が含まれている可能性があります。そのため、この数値はバッファ内のバイト数の近似値に過ぎません。</target>
        </trans-unit>
        <trans-unit id="e1a6a91551ecd980b558ff842b37549796e6bf30" translate="yes" xml:space="preserve">
          <source>This property shows the number of characters currently buffered to be written. See &lt;a href=&quot;net#net_socket_buffersize&quot;&gt;&lt;code&gt;net.Socket.bufferSize&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">このプロパティは、書き込み用に現在バッファリングされている文字数を示します。詳細については、&lt;a href=&quot;net#net_socket_buffersize&quot;&gt; &lt;code&gt;net.Socket.bufferSize&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="275fd6bab7ae5428d094e40bf2e70f30dde5cd7c" translate="yes" xml:space="preserve">
          <source>This represents the underlying binary scalar datatype of the &lt;code&gt;TypedArray&lt;/code&gt;. Elements of this enum correspond to &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;TypedArray&lt;/code&gt; の基礎となるバイナリスカラーデータ型を表します。この列挙型の要素は、&lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript言語仕様の&lt;/a&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;セクション22.2&lt;/a&gt;に対応しています。</target>
        </trans-unit>
        <trans-unit id="750611976052ddea1aefb70b31d097d53f3ce423" translate="yes" xml:space="preserve">
          <source>This restricts the N-API surface to just the functionality that was available in the specified (and earlier) versions.</source>
          <target state="translated">これにより、N-API サーフェスは、指定された(以前の)バージョンで利用可能だった機能だけに制限されます。</target>
        </trans-unit>
        <trans-unit id="34670d73c4e4f5a65a2cb44fbd1ad5dc7e3c2e51" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_source_map_v3_support&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3356fbb2ec8113ec889350faf51d5150518f85cf" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;module#module_the_module_object&quot;&gt;Modules: &lt;code&gt;module&lt;/code&gt; core module&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="36ef0fd0665d4357db1b84a2e19547d2706f8eb2" translate="yes" xml:space="preserve">
          <source>This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</source>
          <target state="translated">This section was moved to &lt;a href=&quot;packages&quot;&gt;Modules: Packages&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e161eae495f60eecc39fcb871e7db25d724d21cd" translate="yes" xml:space="preserve">
          <source>This sends a chunk of the response body. This method may be called multiple times to provide successive parts of the body.</source>
          <target state="translated">これは、応答ボディのチャンクを送信します。このメソッドは、ボディの連続した部分を提供するために複数回呼ばれることがあります。</target>
        </trans-unit>
        <trans-unit id="f47c2c3b1777de556577edd88a50fe16d9b43ef1" translate="yes" xml:space="preserve">
          <source>This should only be disabled for testing; HTTP requires the Date header in responses.</source>
          <target state="translated">HTTP はレスポンスに Date ヘッダを要求します。</target>
        </trans-unit>
        <trans-unit id="f59eae131a4bc1e43befd9071b9f0e34721e73ef" translate="yes" xml:space="preserve">
          <source>This status does not convey any information regarding if &lt;code&gt;module.link()&lt;/code&gt; has been called. See &lt;code&gt;module.linkingStatus&lt;/code&gt; for that.</source>
          <target state="translated">このステータスは、 &lt;code&gt;module.link()&lt;/code&gt; が呼び出されたかどうかに関する情報を伝えません。これについては、 &lt;code&gt;module.linkingStatus&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0116ac87fb2193b9cadfa6e6c4b58a397209ffa8" translate="yes" xml:space="preserve">
          <source>This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</source>
          <target state="translated">This symbol shall be used to install a listener for only monitoring &lt;code&gt;'error'&lt;/code&gt; events. Listeners installed using this symbol are called before the regular &lt;code&gt;'error'&lt;/code&gt; listeners are called.</target>
        </trans-unit>
        <trans-unit id="7d49c824be76a8237417ac95208be1205943ec8d" translate="yes" xml:space="preserve">
          <source>This throws an error if &lt;code&gt;value&lt;/code&gt; cannot be serialized.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; をシリアル化できない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="c1f045702ea4da181894894d719dc7571a2ba4e1" translate="yes" xml:space="preserve">
          <source>This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt;.</source>
          <target state="translated">This transition will continue for the &lt;em&gt;entire&lt;/em&gt; synchronous execution. This means that if, for example, the context is entered within an event handler subsequent event handlers will also run within that context unless specifically bound to another context with an &lt;code&gt;AsyncResource&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c184cfb934c9b738977c32837985d21a951b41c" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt;&lt;code&gt;dns.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">このタイプのレコードには、&lt;a href=&quot;#dns_dns_resolvetxt_hostname_callback&quot;&gt; &lt;code&gt;dns.resolveTxt()&lt;/code&gt; &lt;/a&gt;を参照する &lt;code&gt;entries&lt;/code&gt; と呼ばれる配列プロパティが含まれ &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt; 例：{エントリ：['...']、タイプ： 'TXT'}</target>
        </trans-unit>
        <trans-unit id="6eeca1c2f00a4310890a7139dcfe6a2e6c8c965b" translate="yes" xml:space="preserve">
          <source>This type of record contains an array property called &lt;code&gt;entries&lt;/code&gt; which refers to &lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt;&lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt;</source>
          <target state="translated">このタイプのレコードには、&lt;a href=&quot;#dns_dnspromises_resolvetxt_hostname&quot;&gt; &lt;code&gt;dnsPromises.resolveTxt()&lt;/code&gt; &lt;/a&gt;を参照する &lt;code&gt;entries&lt;/code&gt; と呼ばれる配列プロパティが含まれ &lt;code&gt;{ entries: ['...'], type: 'TXT' }&lt;/code&gt; 例：{エントリ：['...']、タイプ： 'TXT'}</target>
        </trans-unit>
        <trans-unit id="4fe3642f2b14cc07a05a25a58a28addaf29cbab1" translate="yes" xml:space="preserve">
          <source>This use of the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module in the REPL has these side effects:</source>
          <target state="translated">REPL での&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールのこの使用には、次のような副作用があります。</target>
        </trans-unit>
        <trans-unit id="aba8179089db1922508405d8b782dab836cca61d" translate="yes" xml:space="preserve">
          <source>This value is also available as &lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt;&lt;code&gt;buffer.kMaxLength&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この値は、&lt;a href=&quot;#buffer_buffer_kmaxlength&quot;&gt; &lt;code&gt;buffer.kMaxLength&lt;/code&gt; &lt;/a&gt;としても使用できます。</target>
        </trans-unit>
        <trans-unit id="1960fefc47eea7af53d2386124418b76d027b6f6" translate="yes" xml:space="preserve">
          <source>This value may depend on the JS engine that is being used.</source>
          <target state="translated">この値は、使用しているJSエンジンに依存します。</target>
        </trans-unit>
        <trans-unit id="1786c62ca4014aae9c8daf35face4f14af3bb962" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_dirname&quot;&gt;&lt;code&gt;__dirname&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_dirname&quot;&gt; &lt;code&gt;__dirname&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a88498e969bb560f2877e63299e4b7964f93ae3a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_exports&quot;&gt;&lt;code&gt;exports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_exports&quot;&gt; &lt;code&gt;exports&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="12ae6d48315f5836aaba96e8fe5033389f67632a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_filename&quot;&gt;&lt;code&gt;__filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_filename&quot;&gt; &lt;code&gt;__filename&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9d045d7bbd376d894aa22ac1819fb6f7283f644a" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0714b1ea5c5b147147404c53c9c7ea1c9d011bd2" translate="yes" xml:space="preserve">
          <source>This variable may appear to be global but is not. See &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数はグローバルであるように見えますが、グローバルではありません。&lt;a href=&quot;modules#modules_require_id&quot;&gt; &lt;code&gt;require()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7388904d6f49c90b401aa690cef27c57e52dd479" translate="yes" xml:space="preserve">
          <source>This was an undocumented helper function not intended for use outside Node.js core and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</source>
          <target state="translated">これは、Node.jsコア以外での使用を意図したものではなく、NPN (Next Protocol Negotiation)のサポートが削除されたことで廃止された、文書化されていないヘルパー関数でした。</target>
        </trans-unit>
        <trans-unit id="ce2a6d546b034160617c687e3f2691f4eb71b066" translate="yes" xml:space="preserve">
          <source>This was never a documented feature.</source>
          <target state="translated">これは決して文書化された機能ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="946c9714458dbb894196ffd1f153f59f0b8d6c98" translate="yes" xml:space="preserve">
          <source>This will ensure that the per-addon-instance data reaches each binding that can be called from JavaScript. The per-addon-instance data must also be passed into any asynchronous callbacks the addon may create.</source>
          <target state="translated">これにより、addon-instanceあたりのデータがJavaScriptから呼び出すことができる各バインディングに確実に届くようになります。アドオンインスタンスごとのデータは、アドオンが作成する非同期コールバックにも渡されなければなりません。</target>
        </trans-unit>
        <trans-unit id="110650dd72d6d2fde8d01c7a0259236b0dc7296b" translate="yes" xml:space="preserve">
          <source>This will not change the behavior in other error-throwing situations, e.g. when the input data has an invalid format. Using this method, it will not be possible to determine whether the input ended prematurely or lacks the integrity checks, making it necessary to manually check that the decompressed result is valid.</source>
          <target state="translated">これは、入力データのフォーマットが無効な場合など、他のエラーが発生する状況での動作を変えるものではありません。この方法を使用すると、入力が早く終わったのか、完全性チェックが不足しているのかを判断することができなくなるため、解凍された結果が有効であることを手動でチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="d25a5d904dfe4b2d558d89e8b007b3cb884783fb" translate="yes" xml:space="preserve">
          <source>This will not work because the callback function passed to &lt;code&gt;fs.readFile()&lt;/code&gt; is called asynchronously. By the time the callback has been called, the surrounding code, including the &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; block, will have already exited. Throwing an error inside the callback &lt;strong&gt;can crash the Node.js process&lt;/strong&gt; in most cases. If &lt;a href=&quot;domain&quot;&gt;domains&lt;/a&gt; are enabled, or a handler has been registered with &lt;code&gt;process.on('uncaughtException')&lt;/code&gt;, such errors can be intercepted.</source>
          <target state="translated">&lt;code&gt;fs.readFile()&lt;/code&gt; に渡されるコールバック関数が非同期で呼び出されるため、これは機能しません。コールバックが呼び出されるまでに、 &lt;code&gt;try&amp;hellip;catch&lt;/code&gt; ブロックを含む周囲のコードはすでに終了しています。コールバック内でエラーを&lt;strong&gt;スローすると&lt;/strong&gt;、ほとんどの場合&lt;strong&gt;、Node.jsプロセスがクラッシュする可能性が&lt;/strong&gt;あります。&lt;a href=&quot;domain&quot;&gt;ドメイン&lt;/a&gt;が有効になっている場合、またはハンドラーが &lt;code&gt;process.on('uncaughtException')&lt;/code&gt; に登録されている場合、そのようなエラーはインターセプトされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3b97a9813dd547ff5a18b92d60ea9c7c60a244fb" translate="yes" xml:space="preserve">
          <source>This will opt into the default &lt;code&gt;NAPI_VERSION&lt;/code&gt; for the given release of Node.js. In order to ensure compatibility with specific versions of N-API, the version can be specified explicitly when including the header:</source>
          <target state="translated">これにより、Node.jsの特定のリリースのデフォルトの &lt;code&gt;NAPI_VERSION&lt;/code&gt; が選択されます。N-APIの特定のバージョンとの互換性を確保するために、ヘッダーを含めるときにバージョンを明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="c2caba2077af1acf81bcaf212679d9efc23f7b46" translate="yes" xml:space="preserve">
          <source>This will track where the current cursor lands in the input string, when reading input from a TTY stream. The position of cursor determines the portion of the input string that will be modified as input is processed, as well as the column where the terminal caret will be rendered.</source>
          <target state="translated">これは、TTY ストリームから入力を読むときに、現在のカーソルが入力文字列のどこにあるかを追跡します。カーソルの位置は、入力が処理される際に変更される入力文字列の部分と、ターミナルキャレットがレンダリングされる列を決定します。</target>
        </trans-unit>
        <trans-unit id="03b61b4fd778d330c4d9ae04ee169c3836b77a3e" translate="yes" xml:space="preserve">
          <source>This will, however, generally degrade compression.</source>
          <target state="translated">しかし、これは一般的に圧縮を低下させます。</target>
        </trans-unit>
        <trans-unit id="898d4d4c37da591f1dbaea989ea4b845e4eb4dcd" translate="yes" xml:space="preserve">
          <source>This would result in a large number of handles being created, consuming substantial resources. In addition, even though the native code could only use the most recent handle, all of the associated objects would also be kept alive since they all share the same scope.</source>
          <target state="translated">その結果、大量のハンドルが作成され、かなりのリソースを消費することになります。さらに、ネイティブコードでは最新のハンドルのみを使用することができたとしても、関連するオブジェクトはすべて同じスコープを共有しているため、すべてのオブジェクトが生きたままになります。</target>
        </trans-unit>
        <trans-unit id="d467439a515ceca23a9a5fc18245fc89bdccd935" translate="yes" xml:space="preserve">
          <source>Though the call to &lt;code&gt;dns.lookup()&lt;/code&gt; will be asynchronous from JavaScript's perspective, it is implemented as a synchronous call to &lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt;&lt;code&gt;getaddrinfo(3)&lt;/code&gt;&lt;/a&gt; that runs on libuv's threadpool. This can have surprising negative performance implications for some applications, see the &lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt;&lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="translated">&lt;code&gt;dns.lookup()&lt;/code&gt; の呼び出しはJavaScriptの観点からは非同期ですが、libuvのスレッドプールで実行される&lt;a href=&quot;http://man7.org/linux/man-pages/man3/getaddrinfo.3.html&quot;&gt; &lt;code&gt;getaddrinfo(3)&lt;/code&gt; &lt;/a&gt;への同期呼び出しとして実装されます。これは、一部のアプリケーションでパフォーマンスに悪影響を与える可能性があります。詳細については、&lt;a href=&quot;cli#cli_uv_threadpool_size_size&quot;&gt; &lt;code&gt;UV_THREADPOOL_SIZE&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bf8b9bcd61ac02e20b1f70392f83be7f64e30820" translate="yes" xml:space="preserve">
          <source>Threadpool Usage</source>
          <target state="translated">スレッドプールの使い方</target>
        </trans-unit>
        <trans-unit id="194378c3031d5f4c91d972a4e5fae3797161a3bf" translate="yes" xml:space="preserve">
          <source>Threadpool usage</source>
          <target state="translated">スレッドプールの使用法</target>
        </trans-unit>
        <trans-unit id="5b84236df57d6e40394ff631a8881c1eb98f55ef" translate="yes" xml:space="preserve">
          <source>Threadpool usage and performance considerations</source>
          <target state="translated">スレッドプールの使用法とパフォーマンスに関する考察</target>
        </trans-unit>
        <trans-unit id="4c31834fd4f46e0567ccae1bc9794a97e2ef2ae6" translate="yes" xml:space="preserve">
          <source>Threads can be added to and removed from a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; object during its existence. Thus, in addition to specifying an initial number of threads upon creation, &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; can be called to indicate that a new thread will start making use of the thread-safe function. Similarly, &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; can be called to indicate that an existing thread will stop making use of the thread-safe function.</source>
          <target state="translated">スレッドは、その存在中に &lt;code&gt;napi_threadsafe_function&lt;/code&gt; オブジェクトに追加したり、napi_threadsafe_functionオブジェクトから削除したりできます。したがって、作成時にスレッドの初期数を指定することに加えて、 &lt;code&gt;napi_acquire_threadsafe_function&lt;/code&gt; を呼び出して、新しいスレッドがスレッドセーフ関数の使用を開始することを示すことができます。同様に、 &lt;code&gt;napi_release_threadsafe_function&lt;/code&gt; を呼び出して、既存のスレッドがスレッドセーフ関数の使用を停止することを示すことができます。</target>
        </trans-unit>
        <trans-unit id="dd491a1a20798b4f3eab7ca47ce9cde3c1a3f963" translate="yes" xml:space="preserve">
          <source>Three States</source>
          <target state="translated">三州</target>
        </trans-unit>
        <trans-unit id="6e9c26957242e69ce7b5e779efca06887090978a" translate="yes" xml:space="preserve">
          <source>Three states</source>
          <target state="translated">三つの州</target>
        </trans-unit>
        <trans-unit id="e50789f4c54d6872bdd31a68fcda1c02e644ea74" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;Module Not Found&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="3c2047ffcc9c1f89b1e17b907380a299308c953e" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Import Not Defined&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="157fa426a458f5a47aca54e42c4db7bded9d4f50" translate="yes" xml:space="preserve">
          <source>Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</source>
          <target state="translated">Throw a &lt;em&gt;Package Path Not Exported&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="8170c71e55e480b36becd3a8bdae44cd43c0144e" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Invalid Module Specifier&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="df6f0a31b4716ff39675671a8367ef62be40d012" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Package Configuration&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;無効なパッケージ構成&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="a78220df6c48d2fb08d8df29384d6309dc62e9a0" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Invalid Specifier&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;無効な指定子&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="14508f1d752fa9f1a58cf9aef8de034062c7fcf3" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</source>
          <target state="translated">Throw an &lt;em&gt;Unsupported Directory Import&lt;/em&gt; error.</target>
        </trans-unit>
        <trans-unit id="c6b845975caf9cd24e6a6a64484cf34be9a5885d" translate="yes" xml:space="preserve">
          <source>Throw an &lt;em&gt;Unsupported File Extension&lt;/em&gt; error.</source>
          <target state="translated">&lt;em&gt;サポートされていないファイル拡張子&lt;/em&gt;エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="274bb320296e78e649774ab7cf14c8bffcb9c969" translate="yes" xml:space="preserve">
          <source>Throw errors for deprecations.</source>
          <target state="translated">非推奨のエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="ca7b995e33945e66abe60ea39498a0102ea95fab" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide a valid value for one of its returned object properties on execution.</source>
          <target state="translated">関数オプションの実行時に、返されたオブジェクトプロパティのうちのひとつが有効な値を提供しなかった場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="e035afeae4a1775ec604c8b5d8f677f77e629c2f" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not provide an expected value type for one of its returned object properties on execution.</source>
          <target state="translated">関数オプションが、その関数の実行時に返されるオブジェクトプロパティの一つに対して期待される値の型を提供していない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="500f81cca30019a552ab883030a9f388e713b7de" translate="yes" xml:space="preserve">
          <source>Thrown in case a function option does not return an expected value type on execution, such as when a function is expected to return a promise.</source>
          <target state="translated">関数オプションが実行時に期待される値の型を返さない場合、例えば関数がプロミスを返すことが期待される場合などにスローされます。</target>
        </trans-unit>
        <trans-unit id="5ad63a3ff43abbab909982b69d4d78b65b2aafab" translate="yes" xml:space="preserve">
          <source>Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">Thrown when an attempt is made to recursively dispatch an event on &lt;code&gt;EventTarget&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c9dfd60d599c5257e4849241e700802dc509d8e" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; instead of &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt;.</source>
          <target state="translated">スロー &lt;code&gt;ERR_OUT_OF_RANGE&lt;/code&gt; の代わり &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="1f533babc33348b6d3fb4950583edc945f148749" translate="yes" xml:space="preserve">
          <source>Throws &lt;code&gt;value&lt;/code&gt; if &lt;code&gt;value&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. This is useful when testing the &lt;code&gt;error&lt;/code&gt; argument in callbacks. The stack trace contains all frames from the error passed to &lt;code&gt;ifError()&lt;/code&gt; including the potential new frames for &lt;code&gt;ifError()&lt;/code&gt; itself.</source>
          <target state="translated">例外 &lt;code&gt;value&lt;/code&gt; 場合は &lt;code&gt;value&lt;/code&gt; されていない &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; を。これは、コールバックで &lt;code&gt;error&lt;/code&gt; 引数をテストするときに役立ちます。スタックトレースには、 &lt;code&gt;ifError()&lt;/code&gt; 自体に発生する可能性のある新しいフレームを含め、 &lt;code&gt;ifError()&lt;/code&gt; に渡されたエラーのすべてのフレームが含まれます。</target>
        </trans-unit>
        <trans-unit id="1d293028683a03e7c8565aef633c4bd64df69e5d" translate="yes" xml:space="preserve">
          <source>Throws a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;SystemError&lt;/code&gt;&lt;/a&gt; if a user has no &lt;code&gt;username&lt;/code&gt; or &lt;code&gt;homedir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;username&lt;/code&gt; または &lt;code&gt;homedir&lt;/code&gt; がない場合は、&lt;a href=&quot;errors#errors_class_systemerror&quot;&gt; &lt;code&gt;SystemError&lt;/code&gt; をスロー&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="eb037643826c156fd10159ab0e43d2a4ebea39d9" translate="yes" xml:space="preserve">
          <source>Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Throws an &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt; then it will be thrown instead of the &lt;a href=&quot;#assert_class_assert_assertionerror&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ab0da4aef65302e8e7125139145d3ae9207952c" translate="yes" xml:space="preserve">
          <source>Throws an &lt;code&gt;AssertionError&lt;/code&gt; with the provided error message or a default error message. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="translated">指定されたエラーメッセージまたはデフォルトのエラーメッセージとともに &lt;code&gt;AssertionError&lt;/code&gt; をスローします。場合は &lt;code&gt;message&lt;/code&gt; パラメータは、インスタンスのある&lt;a href=&quot;errors#errors_class_error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;、それはの代わりにスローされます &lt;code&gt;AssertionError&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="0f221650e50054f81fe163161fb94d86584723cb" translate="yes" xml:space="preserve">
          <source>Throws if the &lt;code&gt;fromEnc&lt;/code&gt; or &lt;code&gt;toEnc&lt;/code&gt; specify invalid character encodings or if conversion from &lt;code&gt;fromEnc&lt;/code&gt; to &lt;code&gt;toEnc&lt;/code&gt; is not permitted.</source>
          <target state="translated">&lt;code&gt;fromEnc&lt;/code&gt; または &lt;code&gt;toEnc&lt;/code&gt; が無効な文字エンコーディングを指定している場合、またはfromEncから &lt;code&gt;fromEnc&lt;/code&gt; への変換が許可されていない場合に &lt;code&gt;toEnc&lt;/code&gt; されます。</target>
        </trans-unit>
        <trans-unit id="60660bb221304e5fad9ca2c2dd92e7d7c409ce60" translate="yes" xml:space="preserve">
          <source>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</source>
          <target state="translated">このように、サイクルに遭遇した場合や依存関係の競合があった場合でも、すべてのモジュールは、そのモジュールが使用できる依存関係のバージョンを取得することができます。</target>
        </trans-unit>
        <trans-unit id="f395da331ca8317cd167d68da7aed50270080a44" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must make use exclusively of N-API by restricting itself to using</source>
          <target state="translated">このように、Node.js のメジャーバージョン間で ABI 互換性を維持するためには、アドオンは N-API のみを使用して</target>
        </trans-unit>
        <trans-unit id="112c3024c3d7912fd57cd8ebb68639fc60c09698" translate="yes" xml:space="preserve">
          <source>Thus, for an addon to remain ABI-compatible across Node.js major versions, it must use N-API exclusively by restricting itself to using</source>
          <target state="translated">このように、Node.js のメジャーバージョン間で ABI 互換性を維持するためには、アドオンは N-API を排他的に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="551d6adf37a9cb1b523706676a5c3aab5b5fcb93" translate="yes" xml:space="preserve">
          <source>Timeout interactions with asynchronous tasks and Promises</source>
          <target state="translated">非同期タスクとPromisesとのタイムアウト相互作用</target>
        </trans-unit>
        <trans-unit id="ca7f027cfebdbd1cfd15712b89e96328bae876ed" translate="yes" xml:space="preserve">
          <source>Timeout limitations when using process.nextTick(), Promises, and queueMicrotask()</source>
          <target state="translated">process.nextTick()、Promises、および queueMicrotask()を使用した場合のタイムアウトの制限</target>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="f7391e8fca236efbdf30a41b1765e03b0aedeea8" translate="yes" xml:space="preserve">
          <source>To access it:</source>
          <target state="translated">アクセスするには</target>
        </trans-unit>
        <trans-unit id="2f285c5caf3395120404e2b15ef1afaae7633a15" translate="yes" xml:space="preserve">
          <source>To access the &lt;code&gt;stream&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; モジュールにアクセスするには：</target>
        </trans-unit>
        <trans-unit id="113093009a6693093866588b6702951e8ef8612a" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with POSIX file paths on any operating system, use &lt;a href=&quot;#path_path_posix&quot;&gt;&lt;code&gt;path.posix&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">任意のオペレーティングシステムでPOSIXファイルパスを操作するときに一貫した結果を得るには、&lt;a href=&quot;#path_path_posix&quot;&gt; &lt;code&gt;path.posix&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="89017d2ede47b0785d45ee78f6f27262e118a2db" translate="yes" xml:space="preserve">
          <source>To achieve consistent results when working with Windows file paths on any operating system, use &lt;a href=&quot;#path_path_win32&quot;&gt;&lt;code&gt;path.win32&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">任意のオペレーティングシステムでWindowsファイルパスを操作するときに一貫した結果を得るには、&lt;a href=&quot;#path_path_win32&quot;&gt; &lt;code&gt;path.win32&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b45c1d802e95d3410405265dfd8e4d44f4dbfd27" translate="yes" xml:space="preserve">
          <source>To add the method &lt;code&gt;hello&lt;/code&gt; as a function so that it can be called as a method provided by the addon:</source>
          <target state="translated">メソッド &lt;code&gt;hello&lt;/code&gt; を関数として追加して、アドオンによって提供されるメソッドとして呼び出せるようにするには：</target>
        </trans-unit>
        <trans-unit id="81c0394f49db892821115b54c6eb0edd5cc1ba09" translate="yes" xml:space="preserve">
          <source>To be notified when the file was modified, not just accessed, it is necessary to compare &lt;code&gt;curr.mtime&lt;/code&gt; and &lt;code&gt;prev.mtime&lt;/code&gt;.</source>
          <target state="translated">アクセスされただけでなく、ファイルが変更されたときに通知を受けるには、 &lt;code&gt;curr.mtime&lt;/code&gt; と &lt;code&gt;prev.mtime&lt;/code&gt; を比較する必要があります。</target>
        </trans-unit>
        <trans-unit id="817d0bb7fcad591dfad28392604533ca026ba506" translate="yes" xml:space="preserve">
          <source>To be used in conjunction with &lt;code&gt;--experimental-modules&lt;/code&gt;. Sets the resolution algorithm for resolving specifiers. Valid options are &lt;code&gt;explicit&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--experimental-modules&lt;/code&gt; と組み合わせて使用​​します。指定子を解決するための解決アルゴリズムを設定します。有効なオプションは、 &lt;code&gt;explicit&lt;/code&gt; および &lt;code&gt;node&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f8a3354dac48c927a38f89348c115a2d20de7cf0" translate="yes" xml:space="preserve">
          <source>To begin watching an expression, type &lt;code&gt;watch('my_expression')&lt;/code&gt;. The command &lt;code&gt;watchers&lt;/code&gt; will print the active watchers. To remove a watcher, type &lt;code&gt;unwatch('my_expression')&lt;/code&gt;.</source>
          <target state="translated">式の &lt;code&gt;watch('my_expression')&lt;/code&gt; を開始するには、watch（ 'my_expression'）と入力します。コマンド &lt;code&gt;watchers&lt;/code&gt; は、アクティブなウォッチャーを出力します。ウォッチャーを削除するには、 &lt;code&gt;unwatch('my_expression')&lt;/code&gt; と入力します。</target>
        </trans-unit>
        <trans-unit id="1a0304f4e61d19a2c2ac88f8d7fae8f457554b26" translate="yes" xml:space="preserve">
          <source>To break on the first line of the application code, pass the &lt;code&gt;--inspect-brk&lt;/code&gt; flag instead of &lt;code&gt;--inspect&lt;/code&gt;.</source>
          <target state="translated">アプリケーションコードの最初の行で &lt;code&gt;--inspect-brk&lt;/code&gt; &lt;code&gt;--inspect&lt;/code&gt; 代わりに--inspect -brkフラグを渡します。</target>
        </trans-unit>
        <trans-unit id="22dfb32e7c28d8dcaa05c55a622e6cdce176c30b" translate="yes" xml:space="preserve">
          <source>To build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="translated">この例をビルドするには、 &lt;code&gt;myobject.cc&lt;/code&gt; ファイルを &lt;code&gt;binding.gyp&lt;/code&gt; に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb2546fbdf0da09b297499ea21ca759167d5daca" translate="yes" xml:space="preserve">
          <source>To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt;, &lt;code&gt;Promise.race()&lt;/code&gt;, or &lt;code&gt;Promise.allSettled()&lt;/code&gt;:</source>
          <target state="translated">To catch both events, create each of the Promises &lt;em&gt;before&lt;/em&gt; awaiting either of them, then it becomes possible to use &lt;code&gt;Promise.all()&lt;/code&gt; , &lt;code&gt;Promise.race()&lt;/code&gt; , or &lt;code&gt;Promise.allSettled()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="257192fca64c7e5ef4beea84df13594a588d02bf" translate="yes" xml:space="preserve">
          <source>To change the default timeout use the &lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt;&lt;code&gt;--http-server-default-timeout&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">デフォルトのタイムアウトを変更するには、&lt;a href=&quot;cli#cli_http_server_default_timeout_milliseconds&quot;&gt; &lt;code&gt;--http-server-default-timeout&lt;/code&gt; &lt;/a&gt;フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="83bf60ee112d40f394c9009468f70ac11d5c5c03" translate="yes" xml:space="preserve">
          <source>To check for support for a non-English locale (i.e. &lt;code&gt;full-icu&lt;/code&gt; or &lt;code&gt;system-icu&lt;/code&gt;), &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;&lt;code&gt;Intl.DateTimeFormat&lt;/code&gt;&lt;/a&gt; can be a good distinguishing factor:</source>
          <target state="translated">英語以外のロケール（ &lt;code&gt;full-icu&lt;/code&gt; または &lt;code&gt;system-icu&lt;/code&gt; など）のサポートを確認するには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt; &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; &lt;/a&gt;が優れた識別要素になります。</target>
        </trans-unit>
        <trans-unit id="6f9ed209f8f372fe4035b55216331b230379fdb5" translate="yes" xml:space="preserve">
          <source>To check if a file exists without manipulating it afterwards, &lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt;&lt;code&gt;fs.access()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="translated">後で操作せずにファイルが存在するかどうかを確認するには、&lt;a href=&quot;#fs_fs_access_path_mode_callback&quot;&gt; &lt;code&gt;fs.access()&lt;/code&gt; &lt;/a&gt;をお勧めします。</target>
        </trans-unit>
        <trans-unit id="72931344905502cc560ea0d63014dbb48946d73e" translate="yes" xml:space="preserve">
          <source>To check if a stream is connected to a &lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt; context, check the &lt;code&gt;isTTY&lt;/code&gt; property.</source>
          <target state="translated">ストリームが&lt;a href=&quot;tty#tty_tty&quot;&gt;TTY&lt;/a&gt;コンテキストに接続されているかどうかを確認するには、 &lt;code&gt;isTTY&lt;/code&gt; プロパティを確認します。</target>
        </trans-unit>
        <trans-unit id="84c7039869bdb8532ecd51ab012fbbe93984c08f" translate="yes" xml:space="preserve">
          <source>To configure any of them, a custom &lt;a href=&quot;#http_class_http_agent&quot;&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/a&gt; instance must be created.</source>
          <target state="translated">これらのいずれかを構成するには、カスタムの&lt;a href=&quot;#http_class_http_agent&quot;&gt; &lt;code&gt;http.Agent&lt;/code&gt; &lt;/a&gt;インスタンスを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d69007751c2a41a54e8aeb848a171b7cce6a5036" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the second line would just be changed to:</source>
          <target state="translated">ソケット &lt;code&gt;/tmp/echo.sock&lt;/code&gt; に接続するには、2行目を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="13ba3f87d486426a67fdfd4e20f95fec780e8f03" translate="yes" xml:space="preserve">
          <source>To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">To connect on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f0a6196d20446e42af34618037ad4de017d40178" translate="yes" xml:space="preserve">
          <source>To control how ICU is used in Node.js, four &lt;code&gt;configure&lt;/code&gt; options are available during compilation. Additional details on how to compile Node.js are documented in &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.md&lt;/a&gt;.</source>
          <target state="translated">Node.jsでのICUの使用方法を制御するために、コンパイル中に4つの &lt;code&gt;configure&lt;/code&gt; オプションを使用できます。Node.jsのコンパイル方法の詳細については、&lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;BUILDING.mdに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="67c2ffbe92be0f9b51c9a83a429725a64f6213f9" translate="yes" xml:space="preserve">
          <source>To correctly order the operations, move the &lt;code&gt;fs.stat()&lt;/code&gt; call into the callback of the &lt;code&gt;fs.rename()&lt;/code&gt; operation:</source>
          <target state="translated">操作を正しく &lt;code&gt;fs.stat()&lt;/code&gt; は、fs.stat（）呼び出しを &lt;code&gt;fs.rename()&lt;/code&gt; 操作のコールバックに移動します。</target>
        </trans-unit>
        <trans-unit id="f0520e0374ec9ffcd9c6cf5ec0d679283c3270e7" translate="yes" xml:space="preserve">
          <source>To create a custom dynamic module that doesn't correspond to one of the existing &lt;code&gt;format&lt;/code&gt; interpretations, the &lt;code&gt;dynamicInstantiate&lt;/code&gt; hook can be used. This hook is called only for modules that return &lt;code&gt;format: 'dynamic'&lt;/code&gt; from the &lt;code&gt;resolve&lt;/code&gt; hook.</source>
          <target state="translated">既存の &lt;code&gt;format&lt;/code&gt; 解釈のいずれにも対応しないカスタム動的モジュールを作成するには、 &lt;code&gt;dynamicInstantiate&lt;/code&gt; フックを使用できます。このフックは、 &lt;code&gt;resolve&lt;/code&gt; フックから &lt;code&gt;format: 'dynamic'&lt;/code&gt; を返すモジュールに対してのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8e176982d3949a6fa8a4834a7abff97fa762f0cb" translate="yes" xml:space="preserve">
          <source>To create custom messaging channels (which is encouraged over using the default global channel because it facilitates separation of concerns), users can create a &lt;code&gt;MessageChannel&lt;/code&gt; object on either thread and pass one of the &lt;code&gt;MessagePort&lt;/code&gt;s on that &lt;code&gt;MessageChannel&lt;/code&gt; to the other thread through a pre-existing channel, such as the global one.</source>
          <target state="translated">（それは懸念の分離を容易にするので、デフォルトのグローバルチャネルを使用しての上に奨励される）カスタムメッセージングチャネルを作成するには、ユーザーが作成することができ &lt;code&gt;MessageChannel&lt;/code&gt; のいずれかのスレッド上のオブジェクトをとの1パス &lt;code&gt;MessagePort&lt;/code&gt; その上Sを &lt;code&gt;MessageChannel&lt;/code&gt; 事前介して他のスレッドにグローバルチャネルなどの既存のチャネル。</target>
        </trans-unit>
        <trans-unit id="1a3b265855273805adaa9745965d95cb45ba31be" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--experimental-loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</target>
        </trans-unit>
        <trans-unit id="42c2ed95d362ac6e310208df03daab20b4ae57a0" translate="yes" xml:space="preserve">
          <source>To customize the default module resolution, loader hooks can optionally be provided via a &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; argument to Node.js.</source>
          <target state="translated">デフォルトのモジュール解像度をカスタマイズするために、オプションでNode.jsの &lt;code&gt;--loader ./loader-name.mjs&lt;/code&gt; 引数を介してローダーフックを提供できます。</target>
        </trans-unit>
        <trans-unit id="152f25ba7578f4f82f7a056c9eb04659230b3677" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variable. This will also deactivate the colors in the REPL.</source>
          <target state="translated">色を無効にするには、 &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; 環境変数を使用します。これにより、REPLの色も無効になります。</target>
        </trans-unit>
        <trans-unit id="f63281065a3a3689c14d9466b15bbe449245428a" translate="yes" xml:space="preserve">
          <source>To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</source>
          <target state="translated">To deactivate the colors, use the &lt;code&gt;NO_COLOR&lt;/code&gt; or &lt;code&gt;NODE_DISABLE_COLORS&lt;/code&gt; environment variables. This will also deactivate the colors in the REPL. For more on color support in terminal environments, read the tty &lt;a href=&quot;tty#tty_writestream_getcolordepth_env&quot;&gt;getColorDepth()&lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="ee22bab1313bf7a33041e942c66c0625221d4e94" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrap&lt;/a&gt;):</source>
          <target state="translated">新しいインスタンスを作成できるようにクラスを定義するには（多くの場合、&lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object Wrapで&lt;/a&gt;使用されます）：</target>
        </trans-unit>
        <trans-unit id="ed68c74bf87981629a008b2e07694c150206ebab" translate="yes" xml:space="preserve">
          <source>To define a class so that new instances can be created (often used with &lt;a href=&quot;#n_api_object_wrap&quot;&gt;Object wrap&lt;/a&gt;):</source>
          <target state="translated">新しいインスタンスを作成できるようにクラスを定義するには（多くの場合、&lt;a href=&quot;#n_api_object_wrap&quot;&gt;オブジェクトラップで&lt;/a&gt;使用されます）：</target>
        </trans-unit>
        <trans-unit id="652b902ed0de8270b9fb62fc619759f8ad4b57a9" translate="yes" xml:space="preserve">
          <source>To enforce a specific color support, use one of the below environment settings.</source>
          <target state="translated">特定の色のサポートを強制するには、以下の環境設定のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="563ac46b64bfdec1cb057f5366a2341549beff68" translate="yes" xml:space="preserve">
          <source>To ensure that the pointer retrieved from the first argument is indeed a pointer to a database handle and, similarly, that the pointer retrieved from the second argument is indeed a pointer to a query handle, the implementation of &lt;code&gt;queryHasRecords()&lt;/code&gt; has to perform a type validation. Retaining the JavaScript class constructor from which the database handle was instantiated and the constructor from which the query handle was instantiated in &lt;code&gt;napi_ref&lt;/code&gt;s can help, because &lt;code&gt;napi_instanceof()&lt;/code&gt; can then be used to ensure that the instances passed into &lt;code&gt;queryHashRecords()&lt;/code&gt; are indeed of the correct type.</source>
          <target state="translated">最初の引数から取得したポインターが実際にデータベースハンドルへのポインターであり、同様に、2番目の引数から取得したポインターが実際にクエリハンドルへのポインターであることを &lt;code&gt;queryHasRecords()&lt;/code&gt; するには、queryHasRecords（）の実装で型を実行する必要があります。検証。データベースハンドルがインスタンス化されたJavaScriptクラスコンストラクターとクエリハンドルがインスタンス化された &lt;code&gt;napi_ref&lt;/code&gt; すると、 &lt;code&gt;napi_instanceof()&lt;/code&gt; を使用して &lt;code&gt;queryHashRecords()&lt;/code&gt; に渡されたインスタンスが実際に正しいタイプ。</target>
        </trans-unit>
        <trans-unit id="c55f753794b1f35b9fdcfce66da0b9225f594ed1" translate="yes" xml:space="preserve">
          <source>To exit with a 'failure' code:</source>
          <target state="translated">失敗」コードで終了します。</target>
        </trans-unit>
        <trans-unit id="ba26739dd8d319b8071919705bb005ee5baa56d8" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;.</source>
          <target state="translated">クエリ文字列からパラメーターを抽出するには、 &lt;code&gt;require('querystring').parse&lt;/code&gt; 関数を使用するか、 &lt;code&gt;require('url').parse&lt;/code&gt; の2番目の引数として &lt;code&gt;true&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5727ff4630ff91a10fefc92eb21eadd2192abbee" translate="yes" xml:space="preserve">
          <source>To extract the parameters from the query string, the &lt;code&gt;require('querystring').parse&lt;/code&gt; function can be used, or &lt;code&gt;true&lt;/code&gt; can be passed as the second argument to &lt;code&gt;require('url').parse&lt;/code&gt;:</source>
          <target state="translated">クエリ文字列からパラメータを抽出するには、 &lt;code&gt;require('querystring').parse&lt;/code&gt; 機能を使用することができ、または &lt;code&gt;true&lt;/code&gt; にする2番目の引数として渡すことができます &lt;code&gt;require('url').parse&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3fefe10ff6dde1978c8f6041595748b6a6792d9d" translate="yes" xml:space="preserve">
          <source>To fully customize the output of a &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; instance pass in a new function for the &lt;code&gt;writer&lt;/code&gt; option on construction. The following example, for instance, simply converts any input text to upper case:</source>
          <target state="translated">&lt;a href=&quot;#repl_class_replserver&quot;&gt; &lt;code&gt;repl.REPLServer&lt;/code&gt; &lt;/a&gt;インスタンスの出力を完全にカスタマイズするには、作成時に &lt;code&gt;writer&lt;/code&gt; オプションの新しい関数を渡します。たとえば、次の例では、入力テキストを大文字に変換するだけです。</target>
        </trans-unit>
        <trans-unit id="f82f342e2108d2b1a12ccbbfb5e1444bf37c6bd0" translate="yes" xml:space="preserve">
          <source>To generate integrity strings, a script such as &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; can be used.</source>
          <target state="translated">整合性文字列を生成するには、 &lt;code&gt;printf &quot;sha384-$(cat checked.js | openssl dgst -sha384 -binary | base64)&quot;&lt;/code&gt; などのスクリプトを使用できます。</target>
        </trans-unit>
        <trans-unit id="ad9bff9dfa86ac3f581dc9a1a87860cd6b7f4e57" translate="yes" xml:space="preserve">
          <source>To generate the certificate and key for this example, run:</source>
          <target state="translated">この例の証明書と鍵を生成するには、実行します。</target>
        </trans-unit>
        <trans-unit id="69f64fd3b92ea07f26cf029da8688a34b5e1c399" translate="yes" xml:space="preserve">
          <source>To get the exact filename that will be loaded when &lt;code&gt;require()&lt;/code&gt; is called, use the &lt;code&gt;require.resolve()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;require()&lt;/code&gt; が呼び出されたときにロードされる正確なファイル名を取得するには、 &lt;code&gt;require.resolve()&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="6ff57305218fef61e7a1c5f3ae88348b43634dfe" translate="yes" xml:space="preserve">
          <source>To get the response, add a listener for &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; to the request object. &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; will be emitted from the request object when the response headers have been received. The &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event is executed with one argument which is an instance of &lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt;&lt;code&gt;http.IncomingMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答を取得するには、&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;リスナーを要求オブジェクトに追加します。&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;は、応答ヘッダーが受信されたときに要求オブジェクトから発行されます。&lt;a href=&quot;#http_event_response&quot;&gt; &lt;code&gt;'response'&lt;/code&gt; &lt;/a&gt;イベントはのインスタンスの引数で実行され&lt;a href=&quot;#http_class_http_incomingmessage&quot;&gt; &lt;code&gt;http.IncomingMessage&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="044ebf34f23de583098254e8634e645a39e8143c" translate="yes" xml:space="preserve">
          <source>To get the string representation of the error code, use &lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt;&lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エラーコードの文字列表現を取得するには、&lt;a href=&quot;util#util_util_getsystemerrorname_err&quot;&gt; &lt;code&gt;util.getSystemErrorName(error.errno)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="901383fa9c06c6cbf4f565534c4023b071c8fa19" translate="yes" xml:space="preserve">
          <source>To get the version string without the prepended &lt;em&gt;v&lt;/em&gt;, use &lt;code&gt;process.versions.node&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;vを&lt;/em&gt;付加せずにバージョン文字列を取得するには、 &lt;code&gt;process.versions.node&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6aa20aefae1fe619888a9d19f8166927723ea251" translate="yes" xml:space="preserve">
          <source>To guard against crashing the Node.js process the &lt;a href=&quot;domain&quot;&gt;&lt;code&gt;domain&lt;/code&gt;&lt;/a&gt; module can be used. (Note, however, that the &lt;code&gt;domain&lt;/code&gt; module is deprecated.)</source>
          <target state="translated">Node.jsプロセスのクラッシュを防ぐために、&lt;a href=&quot;domain&quot;&gt; &lt;code&gt;domain&lt;/code&gt; &lt;/a&gt;モジュールを使用できます。（ただし、 &lt;code&gt;domain&lt;/code&gt; モジュールは非推奨であることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="4a3925d0a0110a53c1988b899e2668ed5402b3d3" translate="yes" xml:space="preserve">
          <source>To handle the errors that it catches, listen to its &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">キャッチしたエラーを処理するには、 &lt;code&gt;'error'&lt;/code&gt; イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="9c953e56d44954a70f8f7788b1edcd731a0e9806" translate="yes" xml:space="preserve">
          <source>To handle this case, N-API provides the ability to establish a new 'scope' to which newly created handles will be associated. Once those handles are no longer required, the scope can be 'closed' and any handles associated with the scope are invalidated. The methods available to open/close scopes are &lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt;&lt;code&gt;napi_open_handle_scope&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt;&lt;code&gt;napi_close_handle_scope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このケースを処理するために、N-APIは、新しく作成されたハンドルが関連付けられる新しい「スコープ」を確立する機能を提供します。これらのハンドルが不要になると、スコープを「閉じる」ことができ、スコープに関連付けられているすべてのハンドルが無効になります。スコープの開閉に使用できるメソッドは、&lt;a href=&quot;#n_api_napi_open_handle_scope&quot;&gt; &lt;code&gt;napi_open_handle_scope&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#n_api_napi_close_handle_scope&quot;&gt; &lt;code&gt;napi_close_handle_scope&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="8ae9fb9267ffb10903bb86fc63715f4cd0cfcaaf" translate="yes" xml:space="preserve">
          <source>To have a module execute code multiple times, export a function, and call that function.</source>
          <target state="translated">モジュールにコードを複数回実行させ、関数をエクスポートし、その関数を呼び出すようにする。</target>
        </trans-unit>
        <trans-unit id="56b15cec207bf8e8429b8350d22d585ee8bda635" translate="yes" xml:space="preserve">
          <source>To illustrate the behavior, imagine this hypothetical implementation of &lt;code&gt;require()&lt;/code&gt;, which is quite similar to what is actually done by &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">動作を説明するために、 &lt;code&gt;require()&lt;/code&gt; のこの架空の実装を想像してください。これは、require（）によって実際に行われるものと非常に似てい &lt;code&gt;require()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d68e5b68a41d9794b3e7248a2d7f36459e1a791e" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import-expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ESモジュールをCommonJSに含めるには、&lt;a href=&quot;#esm_import-expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d089308ad7fa8608dc856e8dfd0c999ca3ce0d66" translate="yes" xml:space="preserve">
          <source>To include an ES module into CommonJS, use &lt;a href=&quot;#esm_import_expressions&quot;&gt;&lt;code&gt;import()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ESモジュールをCommonJSに含めるには、&lt;a href=&quot;#esm_import_expressions&quot;&gt; &lt;code&gt;import()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="652a3cd9523950c5d1acf707c7efb8f626e43774" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt; the third line from the last would just be changed to:</source>
          <target state="translated">ソケット &lt;code&gt;/tmp/echo.sock&lt;/code&gt; をリッスンするには、最後の3行目を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="4902deed6b5f58c97833c40362dfd51cfd1113c3" translate="yes" xml:space="preserve">
          <source>To listen on the socket &lt;code&gt;/tmp/echo.sock&lt;/code&gt;:</source>
          <target state="translated">ソケット &lt;code&gt;/tmp/echo.sock&lt;/code&gt; でリッスンするには：</target>
        </trans-unit>
        <trans-unit id="21739c6890c2acc4bdec505b9f422fb0e996afe2" translate="yes" xml:space="preserve">
          <source>To maintain existing behaviour &lt;code&gt;response.finished&lt;/code&gt; should be replaced with &lt;code&gt;response.writableEnded&lt;/code&gt;.</source>
          <target state="translated">既存の動作を維持するために、 &lt;code&gt;response.finished&lt;/code&gt; に置き換える必要があり &lt;code&gt;response.writableEnded&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="3e10d026ab12717e40d75bbfd814a562f51e4156" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; インスタンスの作成をより信頼性が高く、エラーが発生しにくいものにするために、 &lt;code&gt;new Buffer()&lt;/code&gt; コンストラクターのさまざまな形式が&lt;strong&gt;非推奨に&lt;/strong&gt;なり、個別の &lt;code&gt;Buffer.from()&lt;/code&gt; 、&lt;a href=&quot;#buffer_class_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; に&lt;/a&gt;置き換えられましたメソッド。</target>
        </trans-unit>
        <trans-unit id="eb5ae203366178adec792f09dee66772cb19c68f" translate="yes" xml:space="preserve">
          <source>To make the creation of &lt;code&gt;Buffer&lt;/code&gt; instances more reliable and less error-prone, the various forms of the &lt;code&gt;new Buffer()&lt;/code&gt; constructor have been &lt;strong&gt;deprecated&lt;/strong&gt; and replaced by separate &lt;code&gt;Buffer.from()&lt;/code&gt;, &lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt;&lt;code&gt;Buffer.alloc()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;Buffer&lt;/code&gt; インスタンスの作成の信頼性を高め、エラーが発生しにくくするために、 &lt;code&gt;new Buffer()&lt;/code&gt; コンストラクターのさまざまな形式が&lt;strong&gt;非推奨に&lt;/strong&gt;なり、個別の &lt;code&gt;Buffer.from()&lt;/code&gt; 、&lt;a href=&quot;#buffer_static_method_buffer_alloc_size_fill_encoding&quot;&gt; &lt;code&gt;Buffer.alloc()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; に&lt;/a&gt;置き換えられました。メソッド。</target>
        </trans-unit>
        <trans-unit id="3e7d1841b070660f5e124c6d0b0e5f09de0a3865" translate="yes" xml:space="preserve">
          <source>To mitigate tampering with policy files on disk, an integrity for the policy file itself may be provided via &lt;code&gt;--policy-integrity&lt;/code&gt;. This allows running &lt;code&gt;node&lt;/code&gt; and asserting the policy file contents even if the file is changed on disk.</source>
          <target state="translated">ディスク上のポリシーファイルの改ざんを軽減するために、 &lt;code&gt;--policy-integrity&lt;/code&gt; を使用してポリシーファイル自体の整合性を提供できます。これにより、ディスク上でファイルが変更された場合でも、 &lt;code&gt;node&lt;/code&gt; を実行してポリシーファイルの内容をアサートできます。</target>
        </trans-unit>
        <trans-unit id="1a99036e7fc6f4dd433ceb4a4d4fe866ee586c79" translate="yes" xml:space="preserve">
          <source>To mitigate the risk, renegotiation is limited to three times every ten minutes. An &lt;code&gt;'error'&lt;/code&gt; event is emitted on the &lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt;&lt;code&gt;tls.TLSSocket&lt;/code&gt;&lt;/a&gt; instance when this threshold is exceeded. The limits are configurable:</source>
          <target state="translated">リスクを軽減するために、再交渉は10分ごとに3回に制限されています。 &lt;code&gt;'error'&lt;/code&gt; イベントが上放出される&lt;a href=&quot;#tls_class_tls_tlssocket&quot;&gt; &lt;code&gt;tls.TLSSocket&lt;/code&gt; の&lt;/a&gt;このしきい値を超えた場合、インスタンス。制限は構成可能です。</target>
        </trans-unit>
        <trans-unit id="6bd92caa0dd0e220612d4509343caa388124bfc1" translate="yes" xml:space="preserve">
          <source>To nest &lt;code&gt;Domain&lt;/code&gt; objects as children of a parent &lt;code&gt;Domain&lt;/code&gt; they must be explicitly added.</source>
          <target state="translated">&lt;code&gt;Domain&lt;/code&gt; オブジェクトを親 &lt;code&gt;Domain&lt;/code&gt; 子としてネストするには、明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8af107ea8ff0e7e34570ffa65be2ae9ff7ad82a" translate="yes" xml:space="preserve">
          <source>To parse the URL into its parts:</source>
          <target state="translated">URL を部分的に解析するには</target>
        </trans-unit>
        <trans-unit id="3a3735245b8ad30f17b7512872187c1aa1d62b39" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; can be used:</source>
          <target state="translated">URLをパースするために &lt;code&gt;require('url').parse(request.url)&lt;/code&gt; を使用することができます：</target>
        </trans-unit>
        <trans-unit id="773a385d557159d7209e8d59495c1d4ae2e640ae" translate="yes" xml:space="preserve">
          <source>To parse the url into its parts, &lt;code&gt;new URL()&lt;/code&gt; can be used:</source>
          <target state="translated">URLをその部分に解析するには、 &lt;code&gt;new URL()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="c60e9cd07a257263fb8969b08ff3c393206c09af" translate="yes" xml:space="preserve">
          <source>To receive pushed streams on the client, set a listener for the &lt;code&gt;'stream'&lt;/code&gt; event on the &lt;code&gt;ClientHttp2Session&lt;/code&gt;:</source>
          <target state="translated">クライアントでプッシュされたストリームを受信するには、 &lt;code&gt;ClientHttp2Session&lt;/code&gt; で &lt;code&gt;'stream'&lt;/code&gt; イベントのリスナーを設定します。</target>
        </trans-unit>
        <trans-unit id="9fa7f2103554e2af5c33c5202941bd62a5133842" translate="yes" xml:space="preserve">
          <source>To restart a crashed application in a more reliable way, whether &lt;code&gt;'uncaughtException'&lt;/code&gt; is emitted or not, an external monitor should be employed in a separate process to detect application failures and recover or restart as needed.</source>
          <target state="translated">クラッシュしたアプリケーションをより信頼できる方法で再起動するには、 &lt;code&gt;'uncaughtException'&lt;/code&gt; が発行されるかどうかに関係なく、外部モニターを別のプロセスで使用して、アプリケーションの障害を検出し、必要に応じて回復または再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="f906fc2e9ed75535f0e33b7e1aaaf78e72fcf87b" translate="yes" xml:space="preserve">
          <source>To set a function to be returned by the &lt;code&gt;require()&lt;/code&gt; for the addon:</source>
          <target state="translated">アドオンの &lt;code&gt;require()&lt;/code&gt; によって返される関数を設定するには：</target>
        </trans-unit>
        <trans-unit id="b4f2374e10f3a7eb6b83d547d6c57c17e364858d" translate="yes" xml:space="preserve">
          <source>To test it in JavaScript:</source>
          <target state="translated">JavaScriptでテストするには。</target>
        </trans-unit>
        <trans-unit id="a0b29e9bbd29bf287a671314a5215366e894cdec" translate="yes" xml:space="preserve">
          <source>To test it, run the following JavaScript:</source>
          <target state="translated">テストするには、以下のJavaScriptを実行します。</target>
        </trans-unit>
        <trans-unit id="80e061ad3871e4c5c14888dba30a6440671c5a6d" translate="yes" xml:space="preserve">
          <source>To test:</source>
          <target state="translated">テストするために。</target>
        </trans-unit>
        <trans-unit id="4606c24e18a786400a447c1828c1a5df8796aaf7" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">この目的のために、N-APIは、そのライフサイクルがエージェントのライフサイクルに関連付けられているようにデータを割り当てる方法を提供します。</target>
        </trans-unit>
        <trans-unit id="86732a9994de407a5b4f9e7fdc6f58ff1d7808fa" translate="yes" xml:space="preserve">
          <source>To this end, N-API provides type-tagging capabilities.</source>
          <target state="translated">このため、N-APIはタイプタギング機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="6e39ad99eeff4166287ae62024f1f20d4affe06b" translate="yes" xml:space="preserve">
          <source>To this env, N-API provides a way to allocate data such that its life cycle is tied to the life cycle of the Agent.</source>
          <target state="translated">この環境に対して、N-APIは、そのライフサイクルがエージェントのライフサイクルに結びつくようにデータを割り当てる方法を提供します。</target>
        </trans-unit>
        <trans-unit id="b5395666fc1a664a6eb308266e88f8f63adf53a4" translate="yes" xml:space="preserve">
          <source>To unset the capture function, &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; may be used. Calling this method with a non-&lt;code&gt;null&lt;/code&gt; argument while another capture function is set will throw an error.</source>
          <target state="translated">キャプチャ機能の設定を解除するには、 &lt;code&gt;process.setUncaughtExceptionCaptureCallback(null)&lt;/code&gt; を使用できます。別のキャプチャ関数が設定されているときに &lt;code&gt;null&lt;/code&gt; 以外の引数を指定してこのメ​​ソッドを呼び出すと、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="012fe7e6f8e20a96385f534d6d6e01f2918b08c3" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;strict&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; モードを使用するには：</target>
        </trans-unit>
        <trans-unit id="1ba4716684f52476f95f24b69f86ae65d28cd012" translate="yes" xml:space="preserve">
          <source>To use N-API in the above &quot;Hello world&quot; example, replace the content of &lt;code&gt;hello.cc&lt;/code&gt; with the following. All other instructions remain the same.</source>
          <target state="translated">上記の「Hello world」の例でN-APIを使用するには、 &lt;code&gt;hello.cc&lt;/code&gt; の内容を次のように置き換えます。他のすべての指示は同じままです。</target>
        </trans-unit>
        <trans-unit id="c2030286b077ae9f310389c7d604ec2ac5189637" translate="yes" xml:space="preserve">
          <source>To use Perfect Forward Secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">使用して完全転送秘密を使用するには &lt;code&gt;DHE&lt;/code&gt; をし &lt;code&gt;tls&lt;/code&gt; モジュール、それはのDiffie-Hellmanパラメータを生成し、それらを指定する必要があり &lt;code&gt;dhparam&lt;/code&gt; のにオプション&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;。以下は、そのようなパラメーターを生成するためのOpenSSLコマンド行インターフェースの使用を示しています。</target>
        </trans-unit>
        <trans-unit id="d0a5c6de3c73d917b80285249a110f4f66a4f266" translate="yes" xml:space="preserve">
          <source>To use legacy assertion mode:</source>
          <target state="translated">レガシー・アサーション・モードを使用するには</target>
        </trans-unit>
        <trans-unit id="409731a0c399b993f15524f4692dc78e27a98aeb" translate="yes" xml:space="preserve">
          <source>To use legacy mode:</source>
          <target state="translated">レガシーモードを使用するには</target>
        </trans-unit>
        <trans-unit id="b9501e0f16f826f87e9350e123b56bd36119f5d9" translate="yes" xml:space="preserve">
          <source>To use more than one constant, use the bitwise OR &lt;code&gt;|&lt;/code&gt; operator.</source>
          <target state="translated">複数の定数を使用するには、ビット単位のOR &lt;code&gt;|&lt;/code&gt; を使用します。オペレーター。</target>
        </trans-unit>
        <trans-unit id="59a200c232ad3bd583aabc76d909f585e995a5dc" translate="yes" xml:space="preserve">
          <source>To use perfect forward secrecy using &lt;code&gt;DHE&lt;/code&gt; with the &lt;code&gt;tls&lt;/code&gt; module, it is required to generate Diffie-Hellman parameters and specify them with the &lt;code&gt;dhparam&lt;/code&gt; option to &lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt;. The following illustrates the use of the OpenSSL command-line interface to generate such parameters:</source>
          <target state="translated">使用して完全転送秘密を使用するには &lt;code&gt;DHE&lt;/code&gt; をして &lt;code&gt;tls&lt;/code&gt; モジュールを、それはのDiffie-Hellmanパラメータを生成し、それらを指定する必要があり &lt;code&gt;dhparam&lt;/code&gt; のにオプション&lt;a href=&quot;#tls_tls_createsecurecontext_options&quot;&gt; &lt;code&gt;tls.createSecureContext()&lt;/code&gt; &lt;/a&gt;。以下に、OpenSSLコマンドラインインターフェイスを使用してこのようなパラメータを生成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="c20a336e72da316b2c9c2163a7733348225e4cc6" translate="yes" xml:space="preserve">
          <source>To use strict assertion mode:</source>
          <target state="translated">厳密なアサーション・モードを使用する。</target>
        </trans-unit>
        <trans-unit id="5b5ad91da59de7323cefe83cf2f0b20fda7969fd" translate="yes" xml:space="preserve">
          <source>To use the HTTP server and client one must &lt;code&gt;require('http')&lt;/code&gt;.</source>
          <target state="translated">HTTPサーバーとクライアントを使用するには、 &lt;code&gt;require('http')&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="71784b618df5ed1f33114983208856ba2d4ca1c0" translate="yes" xml:space="preserve">
          <source>To use this module:</source>
          <target state="translated">このモジュールを使用するには</target>
        </trans-unit>
        <trans-unit id="b7399a303049823aaa63a8aa2b18850c567f8783" translate="yes" xml:space="preserve">
          <source>To verify that ICU is enabled at all (&lt;code&gt;system-icu&lt;/code&gt;, &lt;code&gt;small-icu&lt;/code&gt;, or &lt;code&gt;full-icu&lt;/code&gt;), simply checking the existence of &lt;code&gt;Intl&lt;/code&gt; should suffice:</source>
          <target state="translated">ICUがまったく有効になっていることを確認するには（ &lt;code&gt;system-icu&lt;/code&gt; 、 &lt;code&gt;small-icu&lt;/code&gt; 、または &lt;code&gt;full-icu&lt;/code&gt; ）、単に &lt;code&gt;Intl&lt;/code&gt; の存在を確認するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="767a6b4283338f258039c6484f378f9774bf103f" translate="yes" xml:space="preserve">
          <source>To view this documentation as a manual page in a terminal, run &lt;code&gt;man node&lt;/code&gt;.</source>
          <target state="translated">このドキュメントをターミナルのマニュアルページとして表示するには、 &lt;code&gt;man node&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="fa49ae28e51088359080f4611ccdaeaee55d06b4" translate="yes" xml:space="preserve">
          <source>Too much HTTP header data was received. In order to protect against malicious or malconfigured clients, if more than 8KB of HTTP header data is received then HTTP parsing will abort without a request or response object being created, and an &lt;code&gt;Error&lt;/code&gt; with this code will be emitted.</source>
          <target state="translated">受信したHTTPヘッダーデータが多すぎます。悪意のあるクライアントまたは不正に構成されたクライアントから保護するために、8KBを超えるHTTPヘッダーデータを受信すると、リクエストまたは応答オブジェクトが作成されずにHTTP解析が中止され、このコードの &lt;code&gt;Error&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="6f88bcb86a810807252c2f25ecd279d2e929c894" translate="yes" xml:space="preserve">
          <source>Trace Event provides a mechanism to centralize tracing information generated by V8, Node.js core, and userspace code.</source>
          <target state="translated">Trace Eventは、V8やNode.jsコア、ユーザースペースのコードによって生成されるトレース情報を一元化する仕組みを提供します。</target>
        </trans-unit>
        <trans-unit id="522930d7db32b707108991daae748228a5372efb" translate="yes" xml:space="preserve">
          <source>Trace Events</source>
          <target state="translated">トレースイベント</target>
        </trans-unit>
        <trans-unit id="a397d20d155f600d42049a221bc3c7232e0e47bf" translate="yes" xml:space="preserve">
          <source>Trace events</source>
          <target state="translated">トレースイベント</target>
        </trans-unit>
        <trans-unit id="28c7adc15802eb0b8935f3924650c3799b474e55" translate="yes" xml:space="preserve">
          <source>Tracing can be enabled with the &lt;code&gt;--trace-event-categories&lt;/code&gt; command-line flag or by using the &lt;code&gt;trace_events&lt;/code&gt; module. The &lt;code&gt;--trace-event-categories&lt;/code&gt; flag accepts a list of comma-separated category names.</source>
          <target state="translated">トレースを有効にするには、 &lt;code&gt;--trace-event-categories&lt;/code&gt; コマンドラインフラグを使用するか、 &lt;code&gt;trace_events&lt;/code&gt; モジュールを使用します。 &lt;code&gt;--trace-event-categories&lt;/code&gt; フラグは、コンマ区切りのカテゴリ名のリストを受け付けます。</target>
        </trans-unit>
        <trans-unit id="94e1656659df1321444d7824a33ef26cfdf8bed9" translate="yes" xml:space="preserve">
          <source>Track heap object allocations for heap snapshots.</source>
          <target state="translated">ヒープスナップショットのヒープオブジェクトの割り当てを追跡します。</target>
        </trans-unit>
        <trans-unit id="3dede6c9f5b091d4f1178b0d775ad848dfc2fe33" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate.</source>
          <target state="translated">指定されたサンプリングレートでイベントループの遅延を追跡します。</target>
        </trans-unit>
        <trans-unit id="32233aa3037754c48a35202d5c815e9963127c0e" translate="yes" xml:space="preserve">
          <source>Tracks the event loop delay at a given sampling rate. The constructor of this class not exposed to users.</source>
          <target state="translated">指定されたサンプリングレートでのイベントループの遅延を追跡します。このクラスのコンストラクタはユーザに公開されていません。</target>
        </trans-unit>
        <trans-unit id="751fa34c39229191e6c74b37aabdea80d0e08f00" translate="yes" xml:space="preserve">
          <source>Trailers will &lt;strong&gt;only&lt;/strong&gt; be emitted if chunked encoding is used for the response; if it is not (e.g. if the request was HTTP/1.0), they will be silently discarded.</source>
          <target state="translated">トレーラーは、応答にチャンクエンコーディングが使用されている場合に&lt;strong&gt;のみ出力&lt;/strong&gt;されます。そうでない場合（たとえば、リクエストがHTTP / 1.0の場合）、それらは通知なく破棄されます。</target>
        </trans-unit>
        <trans-unit id="f752da73347f44bd141752afbe732a41e970f215" translate="yes" xml:space="preserve">
          <source>Trailing garbage at the end of the input stream will now result in an &lt;code&gt;'error'&lt;/code&gt; event.</source>
          <target state="translated">入力ストリームの最後にあるゴミを追跡すると、 &lt;code&gt;'error'&lt;/code&gt; イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="969267a9a3af0fbc68033e5c7098f852a9c4f7be" translate="yes" xml:space="preserve">
          <source>Trailing headers have already been sent on the &lt;code&gt;Http2Stream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Http2Stream&lt;/code&gt; ヘッダーはすでにHttp2Streamで送信されています。</target>
        </trans-unit>
        <trans-unit id="0cec91881e34f290385e04905cd9b4c93523b2df" translate="yes" xml:space="preserve">
          <source>Transfer a &lt;code&gt;MessagePort&lt;/code&gt; to a different &lt;a href=&quot;vm&quot;&gt;&lt;code&gt;vm&lt;/code&gt;&lt;/a&gt; Context. The original &lt;code&gt;port&lt;/code&gt; object will be rendered unusable, and the returned &lt;code&gt;MessagePort&lt;/code&gt; instance will take its place.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; を別の&lt;a href=&quot;vm&quot;&gt; &lt;code&gt;vm&lt;/code&gt; &lt;/a&gt;コンテキストに転送します。元の &lt;code&gt;port&lt;/code&gt; オブジェクトは使用できなくなり、返された &lt;code&gt;MessagePort&lt;/code&gt; インスタンスが代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="f821472ecd36f99690900f79391a7c77f149a02e" translate="yes" xml:space="preserve">
          <source>Transform streams are &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams where the output is in some way related to the input. Like all &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; streams, &lt;code&gt;Transform&lt;/code&gt; streams implement both the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stream_class_stream_writable&quot;&gt;&lt;code&gt;Writable&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="translated">変換ストリームは、出力がなんらかの形で入力に関連している&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームです。すべての&lt;a href=&quot;#stream_class_stream_duplex&quot;&gt; &lt;code&gt;Duplex&lt;/code&gt; &lt;/a&gt;ストリームと同様に、 &lt;code&gt;Transform&lt;/code&gt; ストリームは&lt;a href=&quot;#stream_class_stream_readable&quot;&gt; &lt;code&gt;Readable&lt;/code&gt; &lt;/a&gt;インターフェースと&lt;a href=&quot;#stream_class_stream_writable&quot;&gt; &lt;code&gt;Writable&lt;/code&gt; &lt;/a&gt;インターフェースの両方を実装します。</target>
        </trans-unit>
        <trans-unit id="5d44411ee4a477c4003d0a4fd42fc9852f8eec42" translate="yes" xml:space="preserve">
          <source>Transmits a &lt;code&gt;GOAWAY&lt;/code&gt; frame to the connected peer &lt;em&gt;without&lt;/em&gt; shutting down the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="translated">送信 &lt;code&gt;GOAWAY&lt;/code&gt; の接続ピアにフレームを&lt;em&gt;することなく、&lt;/em&gt;シャットダウン &lt;code&gt;Http2Session&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="ea9576ac65abef46df5e8efa3c56554f7250f9bd" translate="yes" xml:space="preserve">
          <source>Transpiler loader</source>
          <target state="translated">トランスパイラーローダー</target>
        </trans-unit>
        <trans-unit id="49a8085f322954c5cb827e7d3811aff927e4beb4" translate="yes" xml:space="preserve">
          <source>Trigger an &lt;code&gt;'uncaughtException'&lt;/code&gt; in JavaScript. Useful if an async callback throws an exception with no way to recover.</source>
          <target state="translated">JavaScriptで &lt;code&gt;'uncaughtException'&lt;/code&gt; トリガーします。非同期コールバックが回復する方法なしで例外をスローする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="88fd9bf4f298a1d2622150397c550c3d7a9663cc" translate="yes" xml:space="preserve">
          <source>Triggered immediately after &lt;code&gt;'connect'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'connect'&lt;/code&gt; 直後にトリガーされます。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="00719949dbe60c953bfc33c3a4fc7d650107ce37" translate="yes" xml:space="preserve">
          <source>True if headers were sent, false otherwise (read-only).</source>
          <target state="translated">ヘッダが送信された場合は True、そうでない場合は false (読み取り専用)。</target>
        </trans-unit>
        <trans-unit id="52aaf50525ff477ac5ccb10f3e94474da0a7e6a3" translate="yes" xml:space="preserve">
          <source>True if the process is a master. This is determined by the &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt;. If &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; is undefined, then &lt;code&gt;isMaster&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">プロセスがマスターであれば真。これは、 &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; によって決定されます。場合 &lt;code&gt;process.env.NODE_UNIQUE_ID&lt;/code&gt; が定義されていない、そして &lt;code&gt;isMaster&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f753bfbea14649b01155a879f0a01fd20d9acfb3" translate="yes" xml:space="preserve">
          <source>True if the process is not a master (it is the negation of &lt;code&gt;cluster.isMaster&lt;/code&gt;).</source>
          <target state="translated">プロセスがマスターでない場合はtrueです（ &lt;code&gt;cluster.isMaster&lt;/code&gt; の否定です）。</target>
        </trans-unit>
        <trans-unit id="a402e4d3f2f574d66f39eac4a0a59eb01b7429dc" translate="yes" xml:space="preserve">
          <source>Truncates the &lt;code&gt;path&lt;/code&gt; then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success. The &lt;code&gt;path&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be a string or &lt;code&gt;Buffer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 切り捨てて、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。 &lt;code&gt;path&lt;/code&gt; &lt;em&gt;しなければならない&lt;/em&gt;文字列またはこと &lt;code&gt;Buffer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e6fcf342166aa2b3f7da014c8cfdbe02e48d00f" translate="yes" xml:space="preserve">
          <source>Truncates the file then resolves the &lt;code&gt;Promise&lt;/code&gt; with no arguments upon success.</source>
          <target state="translated">ファイルを切り捨ててから、成功時に引数なしで &lt;code&gt;Promise&lt;/code&gt; を解決します。</target>
        </trans-unit>
        <trans-unit id="eb397e6582ffce2afa6f0c50c11a1da76968e2e5" translate="yes" xml:space="preserve">
          <source>Try to construct a table with the columns of the properties of &lt;code&gt;tabularData&lt;/code&gt; (or use &lt;code&gt;properties&lt;/code&gt;) and rows of &lt;code&gt;tabularData&lt;/code&gt; and log it. Falls back to just logging the argument if it can&amp;rsquo;t be parsed as tabular.</source>
          <target state="translated">プロパティの列を持つテーブルを作成するようにしてください &lt;code&gt;tabularData&lt;/code&gt; （または使用する &lt;code&gt;properties&lt;/code&gt; の）と行 &lt;code&gt;tabularData&lt;/code&gt; し、それを記録します。表形式として解析できない場合は、引数のロギングのみにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="bd5dbabbefef5321cc8fd2b28e920d3d40a94172" translate="yes" xml:space="preserve">
          <source>Trying to use &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; throws an &lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt;&lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="translated">&lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt; &lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt; &lt;/a&gt;を使用しようとすると、&lt;a href=&quot;errors#errors_err_domain_cannot_set_uncaught_exception_capture&quot;&gt; &lt;code&gt;ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE&lt;/code&gt; &lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="21b131d9028db7e6607d213bfbc66c0ff665f5d4" translate="yes" xml:space="preserve">
          <source>Turning auto padding off will only work if the input data's length is a multiple of the ciphers block size.</source>
          <target state="translated">自動パディングをオフにすると、入力データの長さが暗号ブロックサイズの倍数の場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="33207f4af1d127df91481b71b60c34a426f9170e" translate="yes" xml:space="preserve">
          <source>Two Reading Modes</source>
          <target state="translated">2つの読書モード</target>
        </trans-unit>
        <trans-unit id="27d8454a7bd0ba08acf51f96558585ee7039de1c" translate="yes" xml:space="preserve">
          <source>Two reading modes</source>
          <target state="translated">2つの読書モード</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="7dbaee6b3d72c5fb2d6b4e87ebb27439475283a2" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;EventTarget&amp;gt;&lt;/a&gt; The &lt;code&gt;EventTarget&lt;/code&gt; dispatching the event.</source>
          <target state="translated">タイプ：&lt;a href=&quot;events#events_class_eventtarget&quot;&gt;&amp;lt;のEventTarget&amp;gt;&lt;/a&gt; &lt;code&gt;EventTarget&lt;/code&gt; イベントを送出。</target>
        </trans-unit>
        <trans-unit id="fdf3e2cffad5a828a7aa4148e91fb5cc50141041" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;ブール値&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ab2fdbf860e78b084aa29dd2be0b21f910fe1b8" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; Always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fd98bdcf8d930cfc4fddad7bdbcbed014cb5963b" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event has not been canceled.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;イベントがキャンセルされていない場合はTrue。</target>
        </trans-unit>
        <trans-unit id="592434911cf70ed7c8d94bc575c5dc4ad5fcd012" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; True if the event was created with the &lt;code&gt;cancelable&lt;/code&gt; option.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt;イベントが &lt;code&gt;cancelable&lt;/code&gt; オプションで作成された場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="1cc31d3d2b5210c7375845876ff2a16826ac9806" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;番号&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32b6894e9b972a02fbebf6decdecb826a9a08499" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; Returns &lt;code&gt;0&lt;/code&gt; while an event is not being dispatched, &lt;code&gt;2&lt;/code&gt; while it is being dispatched.</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt;イベントがディスパッチされていないときは &lt;code&gt;0&lt;/code&gt; を返し、ディスパッチされているときは &lt;code&gt;2&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a21a74a74290067e973bcaa8fa38d6218f2fc11f" translate="yes" xml:space="preserve">
          <source>Type: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt;</source>
          <target state="translated">タイプ：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;文字列&amp;gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9bad3fe9a9d788bf5ced613088a28a42982f43d" translate="yes" xml:space="preserve">
          <source>Type: Compile-time</source>
          <target state="translated">タイプを指定します。コンパイルタイム</target>
        </trans-unit>
        <trans-unit id="2e2f71bebdcf0432ba9dae30fc4cd34d69a994d9" translate="yes" xml:space="preserve">
          <source>Type: Deprecation revoked</source>
          <target state="translated">タイプを指定します。非推奨</target>
        </trans-unit>
        <trans-unit id="4afacd032dbf0b042ddec6e49a24f87b169ee946" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only</source>
          <target state="translated">タイプ。ドキュメントのみ</target>
        </trans-unit>
        <trans-unit id="f4038b1c0b648006573b34c3b0edb7a524d16ee2" translate="yes" xml:space="preserve">
          <source>Type: Documentation-only (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">タイプ：ドキュメントのみ（&lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; をサポート&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="c0334739797e8108100cffbf45a4decc971aeb44" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life</source>
          <target state="translated">タイプ。終末期</target>
        </trans-unit>
        <trans-unit id="c05f59a4cce67895e11eed8826cf4cee5bd54571" translate="yes" xml:space="preserve">
          <source>Type: End-of-Life.</source>
          <target state="translated">タイプ。終末期です。</target>
        </trans-unit>
        <trans-unit id="daf411b4184b37552deeb3149950b164297c489d" translate="yes" xml:space="preserve">
          <source>Type: Runtime</source>
          <target state="translated">タイプは以下の通りです。ランタイム</target>
        </trans-unit>
        <trans-unit id="ebfbea69b5d285abfce6c4bef135a0ed69b7b0de" translate="yes" xml:space="preserve">
          <source>Type: Runtime (supports &lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt;&lt;code&gt;--pending-deprecation&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">タイプ：ランタイム（&lt;a href=&quot;cli#cli_pending_deprecation&quot;&gt; &lt;code&gt;--pending-deprecation&lt;/code&gt; をサポート&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="024bfd95e02496791b2881c7c1f7dd42376280b5" translate="yes" xml:space="preserve">
          <source>Type: Runtime &lt;code&gt;Transform._transformState&lt;/code&gt; will be removed in future versions where it is no longer required due to simplification of the implementation.</source>
          <target state="translated">タイプ：ランタイム &lt;code&gt;Transform._transformState&lt;/code&gt; は、実装が簡素化されたために不要になった将来のバージョンで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="44f1ccbdc81b78ae74c2d0ae854796e4d7061770" translate="yes" xml:space="preserve">
          <source>Typed array slices are handled correctly now.</source>
          <target state="translated">型付けされた配列スライスが正しく処理されるようになりました。</target>
        </trans-unit>
        <trans-unit id="38f54df64da42601768ef91ee31423fac4d49160" translate="yes" xml:space="preserve">
          <source>Types of Streams</source>
          <target state="translated">ストリームの種類</target>
        </trans-unit>
        <trans-unit id="d580373209dd6a1707a0a6d7b5661be32ac592f2" translate="yes" xml:space="preserve">
          <source>Types of streams</source>
          <target state="translated">流れの種類</target>
        </trans-unit>
        <trans-unit id="d7824c5156ab482008ad2ab94f44f8d1d1cdb802" translate="yes" xml:space="preserve">
          <source>Typically when wrapping a class instance, a finalize callback should be provided that simply deletes the native instance that is received as the &lt;code&gt;data&lt;/code&gt; argument to the finalize callback.</source>
          <target state="translated">通常、クラスインスタンスをラップするときは、ファイナライズコールバックの &lt;code&gt;data&lt;/code&gt; 引数として受け取ったネイティブインスタンスを単に削除するファイナライズコールバックを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f65c7601001c43a1759b63d4de8c6cbfa1fdec3a" translate="yes" xml:space="preserve">
          <source>Typically, the &lt;code&gt;response&lt;/code&gt; is a digitally signed object from the server's CA that contains information about server's certificate revocation status.</source>
          <target state="translated">通常、 &lt;code&gt;response&lt;/code&gt; はサーバーのCAからのデジタル署名されたオブジェクトで、サーバーの証明書失効ステータスに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="1a77b330d905af0212c5c7ff0c6a442a27aabe49" translate="yes" xml:space="preserve">
          <source>Typically, the size of the current buffer is measured against the &lt;code&gt;highWaterMark&lt;/code&gt; in &lt;em&gt;bytes&lt;/em&gt;. However, after &lt;code&gt;setEncoding()&lt;/code&gt; is called, the comparison function will begin to measure the buffer's size in &lt;em&gt;characters&lt;/em&gt;.</source>
          <target state="translated">通常、現在のバッファーのサイズは、 &lt;code&gt;highWaterMark&lt;/code&gt; に対して&lt;em&gt;バイト単位で&lt;/em&gt;測定され&lt;em&gt;ます&lt;/em&gt;。ただし、 &lt;code&gt;setEncoding()&lt;/code&gt; が呼び出された後、比較関数はバッファーのサイズを&lt;em&gt;文字数で&lt;/em&gt;測定し始めます。</target>
        </trans-unit>
        <trans-unit id="219e224c2a9b92a6e101f6876f27314c5bbac679" translate="yes" xml:space="preserve">
          <source>Typically, this is managed through the number of &lt;code&gt;'disconnect'&lt;/code&gt; and &lt;code&gt;'message'&lt;/code&gt; listeners on the &lt;code&gt;process&lt;/code&gt; object. However, this method can be used to explicitly request a specific behavior.</source>
          <target state="translated">通常、これは、 &lt;code&gt;process&lt;/code&gt; オブジェクトの &lt;code&gt;'disconnect'&lt;/code&gt; および &lt;code&gt;'message'&lt;/code&gt; リスナーの数によって管理されます。ただし、このメソッドを使用して、特定の動作を明示的に要求することができます。</target>
        </trans-unit>
        <trans-unit id="b31db7cab86864065f3e106f86c44b514de32cc5" translate="yes" xml:space="preserve">
          <source>UDP/Datagram</source>
          <target state="translated">UDP/Datagram</target>
        </trans-unit>
        <trans-unit id="9f78a32c9e9869badba95ed40dd1e0e645130d94" translate="yes" xml:space="preserve">
          <source>UDP/Datagram Sockets</source>
          <target state="translated">UDP/データグラムソケット</target>
        </trans-unit>
        <trans-unit id="fb468ca992673c8e389166a22b228b123bbe372c" translate="yes" xml:space="preserve">
          <source>UDP/datagram</source>
          <target state="translated">UDP/datagram</target>
        </trans-unit>
        <trans-unit id="acc6e7e4a3651dd476a52e5cffe0d3c3489395d7" translate="yes" xml:space="preserve">
          <source>UDP/datagram sockets</source>
          <target state="translated">UDP/データグラムソケット</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="0aa6d0c7243e93e5b8220dee83a136c689b755fa" translate="yes" xml:space="preserve">
          <source>URL Strings and URL Objects</source>
          <target state="translated">URL 文字列と URL オブジェクト</target>
        </trans-unit>
        <trans-unit id="668c7293b4faab50fd65a1538e196f37e127ab64" translate="yes" xml:space="preserve">
          <source>URL object support</source>
          <target state="translated">URL オブジェクトのサポート</target>
        </trans-unit>
        <trans-unit id="79b0dc43bf17928f302cb7ea469c8717b49e7aa7" translate="yes" xml:space="preserve">
          <source>URL strings and URL objects</source>
          <target state="translated">URL 文字列と URL オブジェクト</target>
        </trans-unit>
        <trans-unit id="44c577ae467a3484accd429a3a86f410b07ee886" translate="yes" xml:space="preserve">
          <source>URL-based paths</source>
          <target state="translated">URLベースのパス</target>
        </trans-unit>
        <trans-unit id="b19e8d66e7f004e226c44a75766dadab7d09911a" translate="yes" xml:space="preserve">
          <source>URLSearchParams</source>
          <target state="translated">URLSearchParams</target>
        </trans-unit>
        <trans-unit id="aaa0bde7f5196da87592a553fbff4a7d60686471" translate="yes" xml:space="preserve">
          <source>URLs are permitted to only contain a certain range of characters. Any character falling outside of that range must be encoded. How such characters are encoded, and which characters to encode depends entirely on where the character is located within the structure of the URL.</source>
          <target state="translated">URL は、ある範囲の文字のみを含むことが許されています。その範囲外の文字はすべてエンコードされなければなりません。そのような文字がどのようにエンコードされるか、どの文字をエンコードするかは、その文字が URL の構造内のどこにあるかに完全に依存します。</target>
        </trans-unit>
        <trans-unit id="1caa901ddac6183bbfa527108f80fb9a81c3fb50" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A false-y &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; スキームのURLでは、 &lt;code&gt;slashes&lt;/code&gt; オプションに関係なく、常に正しい数のスラッシュが使用されるようになりました。プロトコルのないfalse-y &lt;code&gt;slashes&lt;/code&gt; オプションも常に尊重されるようになりました。</target>
        </trans-unit>
        <trans-unit id="7ce43f682f8e00790c8ef30d56b7ba3f345e48bf" translate="yes" xml:space="preserve">
          <source>URLs with a &lt;code&gt;file:&lt;/code&gt; scheme will now always use the correct number of slashes regardless of &lt;code&gt;slashes&lt;/code&gt; option. A falsy &lt;code&gt;slashes&lt;/code&gt; option with no protocol is now also respected at all times.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; URL ：スキームは、 &lt;code&gt;slashes&lt;/code&gt; オプションに関係なく、常に正しい数のスラッシュを使用するようになりました。プロトコルのない偽の &lt;code&gt;slashes&lt;/code&gt; オプションも常に尊重されるようになりました。</target>
        </trans-unit>
        <trans-unit id="7cf77927f71e28dcf1f204b6a54ebaa27e8f22d5" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;input&lt;/code&gt; string and returns a &lt;code&gt;Uint8Array&lt;/code&gt; containing the encoded bytes.</source>
          <target state="translated">UTF-8は &lt;code&gt;input&lt;/code&gt; 文字列をエンコードし、エンコードされたバイトを含む &lt;code&gt;Uint8Array&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b71146a62fb63a8add8a5579d875bb69309a465e" translate="yes" xml:space="preserve">
          <source>UTF-8 encodes the &lt;code&gt;src&lt;/code&gt; string to the &lt;code&gt;dest&lt;/code&gt; Uint8Array and returns an object containing the read Unicode code units and written UTF-8 bytes.</source>
          <target state="translated">UTF-8は、 &lt;code&gt;src&lt;/code&gt; 文字列を &lt;code&gt;dest&lt;/code&gt; Uint8Arrayにエンコードし、読み取られたUnicodeコード単位と書き込まれたUTF-8バイトを含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="d2a020ddc6f85f9747d28e1db856f35e5132b29d" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event if the &lt;code&gt;repl&lt;/code&gt; is used as standalone program. If the &lt;code&gt;repl&lt;/code&gt; is included anywhere in another application, adding a listener for this event will throw an &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt;例外は、 &lt;code&gt;repl&lt;/code&gt; がスタンドアロンプ​​ログラムとして使用されている場合にのみ、「uncaughtException」イベントを発行します。 &lt;code&gt;repl&lt;/code&gt; が別のアプリケーションのどこかに含まれている場合、このイベントのリスナーを追加すると、&lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; &lt;/a&gt;例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="00499514ac2e595db5c7987996d23850bbb67efb" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions only emit the &lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event in the standalone REPL. Adding a listener for this event in a REPL within another Node.js program throws &lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt;&lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;process#process_event_uncaughtexception&quot;&gt; &lt;code&gt;'uncaughtException'&lt;/code&gt; &lt;/a&gt;例外は、スタンドアロンREPLで「uncaughtException」イベントのみを発行します。このイベントのリスナーを別のNode.jsプログラム内のREPLに追加すると、&lt;a href=&quot;errors#errors_err_invalid_repl_input&quot;&gt; &lt;code&gt;ERR_INVALID_REPL_INPUT&lt;/code&gt; が&lt;/a&gt;スローされます。</target>
        </trans-unit>
        <trans-unit id="12780a16241be2fa7756cbd98a691718ec9bd790" translate="yes" xml:space="preserve">
          <source>Undefined value error is identified by &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt;.</source>
          <target state="translated">未定義の値のエラーは、 &lt;code&gt;code: 'ERR_HTTP_INVALID_HEADER_VALUE'&lt;/code&gt; 識別されます。</target>
        </trans-unit>
        <trans-unit id="355754b0f03869d3cdd89f47abdc47135392a8b0" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, there is no need to modify the report triggering signal. However, if &lt;code&gt;SIGUSR2&lt;/code&gt; is already used for other purposes, then this flag helps to change the signal for report generation and preserve the original meaning of &lt;code&gt;SIGUSR2&lt;/code&gt; for the said purposes.</source>
          <target state="translated">通常の状況では、レポートトリガー信号を変更する必要はありません。ただし、 &lt;code&gt;SIGUSR2&lt;/code&gt; がすでに他の目的で使用されている場合、このフラグはレポート生成のシグナルを変更し、その目的のための &lt;code&gt;SIGUSR2&lt;/code&gt; の元の意味を維持するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="91d9c4087497cf56cdc0c9a2696808d747e7494c" translate="yes" xml:space="preserve">
          <source>Under the hood, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; uses the same operating system facilities as most other programs. For instance, &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; will almost always resolve a given name the same way as the &lt;code&gt;ping&lt;/code&gt; command. On most POSIX-like operating systems, the behavior of the &lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt;&lt;code&gt;dns.lookup()&lt;/code&gt;&lt;/a&gt; function can be modified by changing settings in &lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt;&lt;code&gt;nsswitch.conf(5)&lt;/code&gt;&lt;/a&gt; and/or &lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt;&lt;code&gt;resolv.conf(5)&lt;/code&gt;&lt;/a&gt;, but changing these files will change the behavior of all other programs running on the same operating system.</source>
          <target state="translated">&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;は、dns.lookup（）は他のほとんどのプログラムと同じオペレーティングシステム機能を使用しています。たとえば、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;は、ほとんどの場合、 &lt;code&gt;ping&lt;/code&gt; コマンドと同じ方法で特定の名前を解決します。ほとんどのPOSIX系オペレーティングシステムでは、&lt;a href=&quot;#dns_dns_lookup_hostname_options_callback&quot;&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; &lt;/a&gt;関数の動作は&lt;a href=&quot;http://man7.org/linux/man-pages/man5/nsswitch.conf.5.html&quot;&gt; &lt;code&gt;nsswitch.conf(5)&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;http://man7.org/linux/man-pages/man5/resolv.conf.5.html&quot;&gt; &lt;code&gt;resolv.conf(5)&lt;/code&gt; の&lt;/a&gt;設定を変更することで変更できますが、これらのファイルを変更すると、同じオペレーティングシステムで実行されている他のすべてのプログラム。</target>
        </trans-unit>
        <trans-unit id="580e3fbd2559f3ee3cfa1776417d5a62f4c14b7c" translate="yes" xml:space="preserve">
          <source>Underscores instead of dashes are now allowed for Node.js options as well, in addition to V8 options.</source>
          <target state="translated">Node.jsのオプションでも、V8のオプションに加えて、ダッシュではなくアンダースコアを使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="9c2e7282fb0e27b15982f88c5929897b3adfb4d7" translate="yes" xml:space="preserve">
          <source>Unflag Top-Level Await.</source>
          <target state="translated">トップレベルのアウェイをアンフラグ。</target>
        </trans-unit>
        <trans-unit id="c6535069f12c408de03e4a4245fa064b53e80ecc" translate="yes" xml:space="preserve">
          <source>Unfortunately, &lt;code&gt;napi_instanceof()&lt;/code&gt; does not protect against prototype manipulation. For example, the prototype of the database handle instance can be set to the prototype of the constructor for query handle instances. In this case, the database handle instance can appear as a query handle instance, and it will pass the &lt;code&gt;napi_instanceof()&lt;/code&gt; test for a query handle instance, while still containing a pointer to a database handle.</source>
          <target state="translated">残念ながら、 &lt;code&gt;napi_instanceof()&lt;/code&gt; はプロトタイプ操作から保護しません。たとえば、データベースハンドルインスタンスのプロトタイプを、クエリハンドルインスタンスのコンストラクターのプロトタイプに設定できます。この場合、データベースハンドルインスタンスはクエリハンドルインスタンスとして表示でき、データベースハンドルへのポインタを含みながら、クエリハンドルインスタンスの &lt;code&gt;napi_instanceof()&lt;/code&gt; テストに合格します。</target>
        </trans-unit>
        <trans-unit id="1b6da39f1b5c6c93e6c62b868278c8947240fb88" translate="yes" xml:space="preserve">
          <source>Unhandled &lt;code&gt;Promise&lt;/code&gt; rejections will now emit a process warning.</source>
          <target state="translated">未処理の &lt;code&gt;Promise&lt;/code&gt; 拒否は、プロセス警告を発します。</target>
        </trans-unit>
        <trans-unit id="464f051574cc9f087c75400c48b33f6db9e3b08d" translate="yes" xml:space="preserve">
          <source>Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.</source>
          <target state="translated">ハンドリングされていないプロミスの拒否は非推奨です。将来的には、処理されなかったプロミスの拒否は、0以外の終了コードでNode.jsプロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="584854aa0e9467ba1a8c66c80f5e294682497d95" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the host name of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; のホスト名内に表示されるUnicode文字は、&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用して自動的にASCIIに変換されます。</target>
        </trans-unit>
        <trans-unit id="571721324afa74a8ee617292febb542f1513c933" translate="yes" xml:space="preserve">
          <source>Unicode characters appearing within the hostname of &lt;code&gt;input&lt;/code&gt; will be automatically converted to ASCII using the &lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt; algorithm.</source>
          <target state="translated">&lt;code&gt;input&lt;/code&gt; のホスト名内に現れるUnicode文字は、&lt;a href=&quot;https://tools.ietf.org/html/rfc5891#section-4.4&quot;&gt;Punycode&lt;/a&gt;アルゴリズムを使用して自動的にASCIIに変換されます。</target>
        </trans-unit>
        <trans-unit id="12b0a12e37a0aa70166ef0879f9a3b2e21c18fa6" translate="yes" xml:space="preserve">
          <source>Unknown values for the resolved module location cause failures but are not guaranteed to be forward compatible.</source>
          <target state="translated">解決されたモジュール位置の不明な値は失敗の原因となりますが、前方互換性は保証されていません。</target>
        </trans-unit>
        <trans-unit id="d44850afeb4065072620c926d0775df5f7048af1" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances indicate a bug in the code or its dependencies.</source>
          <target state="translated">アプリケーションが動的にコードを生成して実行していない限り、 &lt;code&gt;ReferenceError&lt;/code&gt; インスタンスは、コードまたはその依存関係のバグを示します。</target>
        </trans-unit>
        <trans-unit id="929fece4ad5f5e7b4b1b96bae39ed7f671795daa" translate="yes" xml:space="preserve">
          <source>Unless an application is dynamically generating and running code, &lt;code&gt;ReferenceError&lt;/code&gt; instances should always be considered a bug in the code or its dependencies.</source>
          <target state="translated">アプリケーションが動的にコードを生成して実行している場合を &lt;code&gt;ReferenceError&lt;/code&gt; 、ReferenceErrorインスタンスは常にコードまたはその依存関係のバグと見なす必要があります。</target>
        </trans-unit>
        <trans-unit id="fe2b51adbc6c7b0bc926ec919779dce328f8537f" translate="yes" xml:space="preserve">
          <source>Unless explicitly specified when creating a &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; instance, each &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread has its own copy of &lt;code&gt;process.env&lt;/code&gt;, based on its parent thread&amp;rsquo;s &lt;code&gt;process.env&lt;/code&gt;, or whatever was specified as the &lt;code&gt;env&lt;/code&gt; option to the &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; constructor. Changes to &lt;code&gt;process.env&lt;/code&gt; will not be visible across &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, and only the main thread can make changes that are visible to the operating system or to native add-ons.</source>
          <target state="translated">&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;インスタンスの作成時に明示的に指定されていない限り、各&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッドには、親スレッドの &lt;code&gt;process.env&lt;/code&gt; または&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;コンストラクターの &lt;code&gt;env&lt;/code&gt; オプションとして指定されたものに基づいて、独自の &lt;code&gt;process.env&lt;/code&gt; のコピーがあります。 &lt;code&gt;process.env&lt;/code&gt; への変更は&lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;スレッド間で表示されず、メインスレッドのみがオペレーティングシステムまたはネイティブアドオンに表示される変更を行うことができます。</target>
        </trans-unit>
        <trans-unit id="a72e9d9932fe774a0515db2c6aaea624c04effad" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside a &lt;code&gt;napi_callback&lt;/code&gt; is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;で説明されている理由がない限り、 &lt;code&gt;napi_callback&lt;/code&gt; 内にハンドルやコールバックスコープを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="0edc9ad8deb45d66b9a4ce8ca1ee4d65518cb9fc" translate="yes" xml:space="preserve">
          <source>Unless for reasons discussed in &lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;, creating a handle and/or callback scope inside the function body is not necessary.</source>
          <target state="translated">&lt;a href=&quot;#n_api_object_lifetime_management&quot;&gt;Object Lifetime Management&lt;/a&gt;で説明されている理由がない限り、関数本体内にハンドルやコールバックスコープを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2172d325e09251aae77841665a275f9f12e96c85" translate="yes" xml:space="preserve">
          <source>Unless otherwise scoped within blocks or functions, variables declared either implicitly or using the &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; keywords are declared at the global scope.</source>
          <target state="translated">ブロックまたは関数内でスコープされていない限り、暗黙的に、または &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; キーワードを使用して宣言された変数は、グローバルスコープで宣言されます。</target>
        </trans-unit>
        <trans-unit id="f2b9cb312ebc7377e0acc37ab64028e168b79e3b" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt;&lt;/a&gt;, the hook is allowed to be asynchronous.</source>
          <target state="translated">&lt;a href=&quot;#n_api_napi_add_env_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_env_cleanup_hook&lt;/code&gt; &lt;/a&gt;とは異なり、フックは非同期にすることができます。</target>
        </trans-unit>
        <trans-unit id="738279034066201991d76c70c2c3ad5d7acd5fb5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#process_process_hrtime_time&quot;&gt;&lt;code&gt;process.hrtime()&lt;/code&gt;&lt;/a&gt;, it does not support an additional &lt;code&gt;time&lt;/code&gt; argument since the difference can just be computed directly by subtraction of the two &lt;code&gt;bigint&lt;/code&gt;s.</source>
          <target state="translated">&lt;a href=&quot;#process_process_hrtime_time&quot;&gt; &lt;code&gt;process.hrtime()&lt;/code&gt; &lt;/a&gt;とは異なり、2つの &lt;code&gt;bigint&lt;/code&gt; の減算によって差を直接計算できるため、追加の &lt;code&gt;time&lt;/code&gt; 引数はサポートされません。</target>
        </trans-unit>
        <trans-unit id="a7d31182b596602990e6a1b35091501ddc7cd0bd" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push(chunk)&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if &lt;code&gt;readable.unshift()&lt;/code&gt; is called during a read (i.e. from within a &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;stream._read()&lt;/code&gt;&lt;/a&gt; implementation on a custom stream). Following the call to &lt;code&gt;readable.unshift()&lt;/code&gt; with an immediate &lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt;&lt;code&gt;stream.push('')&lt;/code&gt;&lt;/a&gt; will reset the reading state appropriately, however it is best to simply avoid calling &lt;code&gt;readable.unshift()&lt;/code&gt; while in the process of performing a read.</source>
          <target state="translated">&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push(chunk)&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;stream.unshift(chunk)&lt;/code&gt; は、ストリームの内部読み取り状態をリセットしても、読み取りプロセスを終了しません。これにより、 &lt;code&gt;readable.unshift()&lt;/code&gt; 中に&lt;a href=&quot;#stream_readable_read_size_1&quot;&gt; &lt;code&gt;stream._read()&lt;/code&gt; &lt;/a&gt;が呼び出された場合（つまり、カスタムストリームのstream._read（）実装内から）、予期しない結果が生じる可能性があります。すぐに&lt;a href=&quot;#stream_readable_push_chunk_encoding&quot;&gt; &lt;code&gt;stream.push('')&lt;/code&gt; &lt;/a&gt;を指定してreaderial.unshift &lt;code&gt;readable.unshift()&lt;/code&gt; を呼び出すと、読み取り状態が適切にリセットされますが、読み取りを実行している間は、簡単に &lt;code&gt;readable.unshift()&lt;/code&gt; を呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="ffbea780c221ab67ef22ff2efead15150ae9d4ad" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module, duplicate keys in the form of array values are not allowed. Arrays are stringified using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt;&lt;code&gt;array.toString()&lt;/code&gt;&lt;/a&gt;, which simply joins all array elements with commas.</source>
          <target state="translated">&lt;a href=&quot;querystring&quot;&gt; &lt;code&gt;querystring&lt;/code&gt; &lt;/a&gt;モジュールとは異なり、配列値の形式での重複キーは許可されていません。配列は、すべての配列要素をカンマで結合する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString&quot;&gt; &lt;code&gt;array.toString()&lt;/code&gt; &lt;/a&gt;を使用して文字列化されます。</target>
        </trans-unit>
        <trans-unit id="cf1a2bd2bcaee5665438d46897ea1c835ab3373a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;EventEmitter&lt;/code&gt;, any given &lt;code&gt;listener&lt;/code&gt; can be registered at most once per event &lt;code&gt;type&lt;/code&gt;. Attempts to register a &lt;code&gt;listener&lt;/code&gt; multiple times are ignored.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; とは異なり、任意の &lt;code&gt;listener&lt;/code&gt; はイベント &lt;code&gt;type&lt;/code&gt; ごとに最大1回登録できます。 &lt;code&gt;listener&lt;/code&gt; 複数回登録しようとしても無視されます。</target>
        </trans-unit>
        <trans-unit id="93286044bb9cc680edddcad0e702f7630a603e80" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;child_process&lt;/code&gt; or &lt;code&gt;cluster&lt;/code&gt;, &lt;code&gt;worker_threads&lt;/code&gt; can share memory. They do so by transferring &lt;code&gt;ArrayBuffer&lt;/code&gt; instances or sharing &lt;code&gt;SharedArrayBuffer&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;child_process&lt;/code&gt; や &lt;code&gt;cluster&lt;/code&gt; とは異なり、 &lt;code&gt;worker_threads&lt;/code&gt; はメモリを共有できます。そのためには、 &lt;code&gt;ArrayBuffer&lt;/code&gt; インスタンスを転送するか、 &lt;code&gt;SharedArrayBuffer&lt;/code&gt; インスタンスを共有します。</target>
        </trans-unit>
        <trans-unit id="786c293ea8a2a263e26d57c1c94d19f2b5a49165" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;eval&lt;/code&gt;, this function does not allow the script to access the current lexical scope, and therefore also does not allow to access the &lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;module scope&lt;/a&gt;, meaning that pseudo-globals such as &lt;code&gt;require&lt;/code&gt; will not be available.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; とは異なり、この関数はスクリプトが現在の字句スコープにアクセスすることを許可しないため、&lt;a href=&quot;modules#modules_the_module_scope&quot;&gt;モジュールスコープ&lt;/a&gt;にアクセスすることも許可しません。つまり、 &lt;code&gt;require&lt;/code&gt; などの疑似グローバルは使用できません。</target>
        </trans-unit>
        <trans-unit id="b31b651c0bd301bf713d75fd4cc4cb768e5aecc6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.Module&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.Module&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. The use of 'async' functions can help with manipulating &lt;code&gt;vm.Module&lt;/code&gt; objects.</source>
          <target state="translated">ただし、 &lt;code&gt;vm.Script&lt;/code&gt; とは異なり、すべての &lt;code&gt;vm.Module&lt;/code&gt; オブジェクトは作成時からコンテキストにバインドされます。上の操作 &lt;code&gt;vm.Module&lt;/code&gt; のオブジェクトは、同期性質とは対照的に、本質的に非同期である &lt;code&gt;vm.Script&lt;/code&gt; のオブジェクト。'async'関数を使用すると、 &lt;code&gt;vm.Module&lt;/code&gt; オブジェクトの操作に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bc66008fe7449b513d18dc2e492a0bd73292fdec" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;vm.Script&lt;/code&gt; however, every &lt;code&gt;vm.SourceTextModule&lt;/code&gt; object is bound to a context from its creation. Operations on &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects are intrinsically asynchronous, in contrast with the synchronous nature of &lt;code&gt;vm.Script&lt;/code&gt; objects. With the help of async functions, however, manipulating &lt;code&gt;vm.SourceTextModule&lt;/code&gt; objects is fairly straightforward.</source>
          <target state="translated">ただし、 &lt;code&gt;vm.Script&lt;/code&gt; とは異なり、すべての &lt;code&gt;vm.SourceTextModule&lt;/code&gt; オブジェクトは、その作成からコンテキストにバインドされます。上の操作 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; のオブジェクトは、同期性質とは対照的に、本質的に非同期である &lt;code&gt;vm.Script&lt;/code&gt; のオブジェクト。ただし、非同期関数を使用すると、 &lt;code&gt;vm.SourceTextModule&lt;/code&gt; オブジェクトの操作はかなり簡単になります。</target>
        </trans-unit>
        <trans-unit id="0599776b2acdfbdb39a04e0dc3671e103e9a70bf" translate="yes" xml:space="preserve">
          <source>Unlike modules written in JavaScript, developing and deploying Node.js native addons using N-API requires an additional set of tools. Besides the basic tools required to develop for Node.js, the native addon developer requires a toolchain that can compile C and C++ code into a binary. In addition, depending upon how the native addon is deployed, the &lt;em&gt;user&lt;/em&gt; of the native addon will also need to have a C/C++ toolchain installed.</source>
          <target state="translated">JavaScriptで記述されたモジュールとは異なり、N-APIを使用してNode.jsネイティブアドオンを開発およびデプロイするには、追加のツールセットが必要です。Node.jsの開発に必要な基本的なツールに加えて、ネイティブアドオン開発者は、CおよびC ++コードをバイナリにコンパイルできるツールチェーンを必要とします。さらに、ネイティブアドオンの展開方法に応じて、ネイティブアドオンの&lt;em&gt;ユーザー&lt;/em&gt;にもC / C ++ツールチェーンをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="7c5877252fff27f076a79408216302ad7142ca78" translate="yes" xml:space="preserve">
          <source>Unlike other methods operating on &lt;code&gt;Module&lt;/code&gt;, this function completes synchronously and returns nothing.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; で動作する他のメソッドとは異なり、この関数は同期的に完了し、何も返しません。</target>
        </trans-unit>
        <trans-unit id="d88dff4d6b12aaa62861c546611f134585732b86" translate="yes" xml:space="preserve">
          <source>Unlike the 16 kb default &lt;code&gt;highWaterMark&lt;/code&gt; for a readable stream, the stream returned by this method has a default &lt;code&gt;highWaterMark&lt;/code&gt; of 64 kb.</source>
          <target state="translated">読み取り可能なストリームの16 kbのデフォルトの &lt;code&gt;highWaterMark&lt;/code&gt; とは異なり、このメソッドによって返されるストリームのデフォルトの &lt;code&gt;highWaterMark&lt;/code&gt; は64 kbです。</target>
        </trans-unit>
        <trans-unit id="c89fbd3cb8564198493b0872bc897f53689f1cdc" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt;&lt;code&gt;fork(2)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.fork()&lt;/code&gt; does not clone the current process.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man2/fork.2.html&quot;&gt; &lt;code&gt;fork(2)&lt;/code&gt; &lt;/a&gt; POSIXシステムコールとは異なり、 &lt;code&gt;child_process.fork()&lt;/code&gt; は現在のプロセスのクローンを作成しません。</target>
        </trans-unit>
        <trans-unit id="14ecf150019ebe6bc4270fdded6d714de98dea3b" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt;&lt;code&gt;exec(3)&lt;/code&gt;&lt;/a&gt; POSIX system call, &lt;code&gt;child_process.exec()&lt;/code&gt; does not replace the existing process and uses a shell to execute the command.</source>
          <target state="translated">&lt;a href=&quot;http://man7.org/linux/man-pages/man3/exec.3.html&quot;&gt; &lt;code&gt;exec(3)&lt;/code&gt; &lt;/a&gt; POSIXシステムコールとは異なり、 &lt;code&gt;child_process.exec()&lt;/code&gt; は既存のプロセスを置き換えず、シェルを使用してコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8550f7544a3f4ee9abeb8cba1ce111534a3ad502" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;https&lt;/code&gt; API, &lt;code&gt;tls.connect()&lt;/code&gt; does not enable the SNI (Server Name Indication) extension by default, which may cause some servers to return an incorrect certificate or reject the connection altogether. To enable SNI, set the &lt;code&gt;servername&lt;/code&gt; option in addition to &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;https&lt;/code&gt; APIとは異なり、 &lt;code&gt;tls.connect()&lt;/code&gt; はデフォルトでSNI（Server Name Indication）拡張機能を有効にしません。これにより、一部のサーバーが誤った証明書を返したり、接続を完全に拒否したりする可能性があります。SNIを有効にするには、 &lt;code&gt;host&lt;/code&gt; に加えて &lt;code&gt;servername&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="8a651eaa44463d71d0ba17228140a40f73da19e4" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;request&lt;/code&gt; object, if the response closes prematurely, the &lt;code&gt;response&lt;/code&gt; object does not emit an &lt;code&gt;'error'&lt;/code&gt; event but instead emits the &lt;code&gt;'aborted'&lt;/code&gt; event.</source>
          <target state="translated">異なり &lt;code&gt;request&lt;/code&gt; 応答が途中で閉じた場合、オブジェクト、 &lt;code&gt;response&lt;/code&gt; オブジェクトは排出しない &lt;code&gt;'error'&lt;/code&gt; イベントを代わりに発する &lt;code&gt;'aborted'&lt;/code&gt; イベントを。</target>
        </trans-unit>
        <trans-unit id="245fd6876839504d24af1a18605a9594e7b65485" translate="yes" xml:space="preserve">
          <source>Unlike the callback-based API (&lt;code&gt;fs.fstat()&lt;/code&gt;, &lt;code&gt;fs.fchown()&lt;/code&gt;, &lt;code&gt;fs.fchmod()&lt;/code&gt;, and so on), a numeric file descriptor is not used by the promise-based API. Instead, the promise-based API uses the &lt;code&gt;FileHandle&lt;/code&gt; class in order to help avoid accidental leaking of unclosed file descriptors after a &lt;code&gt;Promise&lt;/code&gt; is resolved or rejected.</source>
          <target state="translated">コールバックベースのAPI（ &lt;code&gt;fs.fstat()&lt;/code&gt; 、 &lt;code&gt;fs.fchown()&lt;/code&gt; 、 &lt;code&gt;fs.fchmod()&lt;/code&gt; など）とは異なり、数値ファイル記述子はpromiseベースのAPIでは使用されません。代わりに、PromiseベースのAPIは、 &lt;code&gt;FileHandle&lt;/code&gt; クラスを使用して、 &lt;code&gt;Promise&lt;/code&gt; が解決または拒否された後に、閉じられていないファイル記述子が誤ってリークされるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="aec5e222fb21197428b2bc12e8d85d03d3d352d7" translate="yes" xml:space="preserve">
          <source>Unregisters &lt;code&gt;fun&lt;/code&gt; as a function to be run with the &lt;code&gt;arg&lt;/code&gt; parameter once the current Node.js environment exits. Both the argument and the function value need to be exact matches.</source>
          <target state="translated">現在のNode.js環境が終了したら、 &lt;code&gt;arg&lt;/code&gt; パラメーターを指定して実行する関数として &lt;code&gt;fun&lt;/code&gt; を登録解除します。引数と関数値の両方が完全に一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d18fe6d2e5688021879f7a873899d3115ce6e749" translate="yes" xml:space="preserve">
          <source>Unregisters the cleanup hook corresponding to &lt;code&gt;remove_handle&lt;/code&gt;. This will prevent the hook from being executed, unless it has already started executing. This must be called on any &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; value obtained from &lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt;&lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;remove_handle&lt;/code&gt; に対応するクリーンアップフックの登録を解除します。これにより、フックがすでに実行を開始していない限り、フックが実行されなくなります。これは、&lt;a href=&quot;#n_api_napi_add_async_cleanup_hook&quot;&gt; &lt;code&gt;napi_add_async_cleanup_hook&lt;/code&gt; &lt;/a&gt;から取得したnapi_async_cleanup_hook_handle値で &lt;code&gt;napi_async_cleanup_hook_handle&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="65c4b2669e9c330ac9f73450acc1e9a90e0c45de" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Hmac&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;code&gt;Hmac&lt;/code&gt; コンテンツを指定された &lt;code&gt;data&lt;/code&gt; で更新します。そのエンコードは &lt;code&gt;inputEncoding&lt;/code&gt; で指定されます。場合 &lt;code&gt;encoding&lt;/code&gt; 設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="93605dc813a8e916582ddbffd733db79b79cce3c" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Sign&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">更新 &lt;code&gt;Sign&lt;/code&gt; 所与とコンテンツ &lt;code&gt;data&lt;/code&gt; に付与されたの符号化 &lt;code&gt;inputEncoding&lt;/code&gt; を。場合 &lt;code&gt;encoding&lt;/code&gt; 設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="a2260478143ea14e9583ad4e3b793657f13996f1" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;Verify&lt;/code&gt; content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;code&gt;Verify&lt;/code&gt; コンテンツを指定された &lt;code&gt;data&lt;/code&gt; で更新します。そのエンコードは &lt;code&gt;inputEncoding&lt;/code&gt; で指定されています。場合 &lt;code&gt;inputEncoding&lt;/code&gt; が設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="77d2af3d6057a23de355899c59dd7f7a41c92d30" translate="yes" xml:space="preserve">
          <source>Updates the cipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">暗号を &lt;code&gt;data&lt;/code&gt; 更新します。場合 &lt;code&gt;inputEncoding&lt;/code&gt; の引数が指定され、 &lt;code&gt;data&lt;/code&gt; 引数が指定されたエンコーディングを使用して文字列です。 &lt;code&gt;inputEncoding&lt;/code&gt; 引数を指定しない場合、 &lt;code&gt;data&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; でなければなりません。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="db6770b018c405d1e79d9580f71bd8cf8282662f" translate="yes" xml:space="preserve">
          <source>Updates the current local settings for this &lt;code&gt;Http2Session&lt;/code&gt; and sends a new &lt;code&gt;SETTINGS&lt;/code&gt; frame to the connected HTTP/2 peer.</source>
          <target state="translated">この &lt;code&gt;Http2Session&lt;/code&gt; の現在のローカル設定を更新し、接続されたHTTP / 2ピアに新しい &lt;code&gt;SETTINGS&lt;/code&gt; フレームを送信します。</target>
        </trans-unit>
        <trans-unit id="957c600a690a3a36412946efac93320156d3eb42" translate="yes" xml:space="preserve">
          <source>Updates the decipher with &lt;code&gt;data&lt;/code&gt;. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is given, the &lt;code&gt;data&lt;/code&gt; argument is a string using the specified encoding. If the &lt;code&gt;inputEncoding&lt;/code&gt; argument is not given, &lt;code&gt;data&lt;/code&gt; must be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">解読を &lt;code&gt;data&lt;/code&gt; 更新します。場合 &lt;code&gt;inputEncoding&lt;/code&gt; の引数が指定され、 &lt;code&gt;data&lt;/code&gt; 引数が指定されたエンコーディングを使用して文字列です。 &lt;code&gt;inputEncoding&lt;/code&gt; 引数を指定しない場合、 &lt;code&gt;data&lt;/code&gt; は&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; で&lt;/a&gt;なければなりません。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;その後 &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="5ed45c49beca4ce2a38119d874096a97e38115cc" translate="yes" xml:space="preserve">
          <source>Updates the hash content with the given &lt;code&gt;data&lt;/code&gt;, the encoding of which is given in &lt;code&gt;inputEncoding&lt;/code&gt;. If &lt;code&gt;encoding&lt;/code&gt; is not provided, and the &lt;code&gt;data&lt;/code&gt; is a string, an encoding of &lt;code&gt;'utf8'&lt;/code&gt; is enforced. If &lt;code&gt;data&lt;/code&gt; is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;, then &lt;code&gt;inputEncoding&lt;/code&gt; is ignored.</source>
          <target state="translated">指定された &lt;code&gt;data&lt;/code&gt; でハッシュコンテンツを更新します。そのエンコードは &lt;code&gt;inputEncoding&lt;/code&gt; で指定されます。場合 &lt;code&gt;encoding&lt;/code&gt; 設けられておらず、 &lt;code&gt;data&lt;/code&gt; 文字列であり、符号化の &lt;code&gt;'utf8'&lt;/code&gt; 適用されます。場合は &lt;code&gt;data&lt;/code&gt; ある&lt;a href=&quot;buffer&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;TypedArray&lt;/code&gt; 、または &lt;code&gt;DataView&lt;/code&gt; の、そして &lt;code&gt;inputEncoding&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="7d2950e7ca60835246638412bbc7c834bf90e01b" translate="yes" xml:space="preserve">
          <source>Updates the priority for this &lt;code&gt;Http2Stream&lt;/code&gt; instance.</source>
          <target state="translated">この &lt;code&gt;Http2Stream&lt;/code&gt; インスタンスの優先度を更新します。</target>
        </trans-unit>
        <trans-unit id="da0f7a31471fb4f5f448dffafa53fb94e1f6c0de" translate="yes" xml:space="preserve">
          <source>Uploading precompiled binaries</source>
          <target state="translated">コンパイル済みバイナリのアップロード</target>
        </trans-unit>
        <trans-unit id="f6b150488cf43f5c486b4617e1a3281d94130a34" translate="yes" xml:space="preserve">
          <source>Upon assigning a value to the port, the value will first be converted to a string using &lt;code&gt;.toString()&lt;/code&gt;.</source>
          <target state="translated">ポートに値を割り当てると、最初に &lt;code&gt;.toString()&lt;/code&gt; を使用して値が文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="f8d1386e91a02cb0c85bee48bbf4edcff35a05d0" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;Aside from the main loop thread, no threads should be using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; の作成時に、 &lt;code&gt;napi_finalize&lt;/code&gt; コールバックを提供できます。このコールバックは、スレッドセーフ関数が破棄されようとしているときにメインスレッドで呼び出されます。構築中に指定されたコンテキストとファイナライズデータを受け取り、 &lt;code&gt;uv_thread_join()&lt;/code&gt; を呼び出すなどして、スレッドの後にクリーンアップする機会を提供します。&lt;strong&gt;メインループスレッドを除いて、finalizeコールバックが完了した後はスレッドセーフ関数を使用してはなりません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a21b6b47f79ea7bf24d3448220aa0114efedd561" translate="yes" xml:space="preserve">
          <source>Upon creation of a &lt;code&gt;napi_threadsafe_function&lt;/code&gt; a &lt;code&gt;napi_finalize&lt;/code&gt; callback can be provided. This callback will be invoked on the main thread when the thread-safe function is about to be destroyed. It receives the context and the finalize data given during construction, and provides an opportunity for cleaning up after the threads e.g. by calling &lt;code&gt;uv_thread_join()&lt;/code&gt;. &lt;strong&gt;It is important that, aside from the main loop thread, there be no threads left using the thread-safe function after the finalize callback completes.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;napi_threadsafe_function&lt;/code&gt; の作成時に、 &lt;code&gt;napi_finalize&lt;/code&gt; コールバックを提供できます。このコールバックは、スレッドセーフ関数が破棄されるときにメインスレッドで呼び出されます。構築中に与えられたコンテキストとファイナライズデータを受け取り、たとえば &lt;code&gt;uv_thread_join()&lt;/code&gt; を呼び出すことによって、スレッドの後にクリーンアップする機会を提供します。&lt;strong&gt;メインループスレッドを除いて、finalizeコールバックの完了後にスレッドセーフ関数を使用しているスレッドが残っていないことが重要です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0ce53004853a0d3cc308cfeea91d8ad9ccd6880" translate="yes" xml:space="preserve">
          <source>Upon success, the &lt;code&gt;Promise&lt;/code&gt; is resolved without arguments.</source>
          <target state="translated">成功すると、 &lt;code&gt;Promise&lt;/code&gt; は引数なしで解決されます。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="2de39f1fb97e8b9fad2a13c376d5983dda0775fd" translate="yes" xml:space="preserve">
          <source>Usage &amp;amp; Example</source>
          <target state="translated">使用法と例</target>
        </trans-unit>
        <trans-unit id="e52c8372eec3736296f93f87fe2977417bbb2721" translate="yes" xml:space="preserve">
          <source>Usage and example</source>
          <target state="translated">使い方と例</target>
        </trans-unit>
        <trans-unit id="d36ee1550e836b658bce06b4f1d49c2dec79550a" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;ECDH&lt;/code&gt; with non-dynamically generated key pairs has been simplified. Now, &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; can be called with a preselected private key and the associated public point (key) will be computed and stored in the object. This allows code to only store and provide the private part of the EC key pair. &lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt;&lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt;&lt;/a&gt; now also validates that the private key is valid for the selected curve.</source>
          <target state="translated">動的に生成されないキーペアでの &lt;code&gt;ECDH&lt;/code&gt; の使用が簡略化されました。これで、事前に選択された秘密鍵を使用して&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;を呼び出すことができ、関連する公開ポイント（キー）が計算されてオブジェクトに保存されます。これにより、コードはECキーペアの秘密部分のみを格納および提供できます。&lt;a href=&quot;#crypto_ecdh_setprivatekey_privatekey_encoding&quot;&gt; &lt;code&gt;ecdh.setPrivateKey()&lt;/code&gt; &lt;/a&gt;は、秘密鍵が選択した曲線に対して有効であることも検証するようになりました。</target>
        </trans-unit>
        <trans-unit id="5ff118bed7c719c614a84434b5439be16bf71d2c" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;util.inherits()&lt;/code&gt; is discouraged. Please use the ES6 &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;extends&lt;/code&gt; keywords to get language level inheritance support. Also note that the two styles are &lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;semantically incompatible&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;util.inherits()&lt;/code&gt; の使用はお勧めしません。ES6 &lt;code&gt;class&lt;/code&gt; と &lt;code&gt;extends&lt;/code&gt; キーワードを使用して、言語レベルの継承サポートを取得してください。また、2つのスタイルには&lt;a href=&quot;https://github.com/nodejs/node/issues/4179&quot;&gt;意味的に互換性がない&lt;/a&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a7631402d6fe2c428c59f2ef506230c3fbbc9e7d" translate="yes" xml:space="preserve">
          <source>Usage with &lt;code&gt;async/await&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;async/await&lt;/code&gt; での使用</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="eae67d2af37c578abfdf9b05166c5445461a54fd" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt;&lt;code&gt;crypto.getCurves()&lt;/code&gt;&lt;/a&gt; to obtain a list of available curve names. On recent OpenSSL releases, &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; will also display the name and description of each available elliptic curve.</source>
          <target state="translated">使用可能な曲線名のリストを取得するには、&lt;a href=&quot;#crypto_crypto_getcurves&quot;&gt; &lt;code&gt;crypto.getCurves()&lt;/code&gt; &lt;/a&gt;を使用します。最近のOpenSSLリリースでは、 &lt;code&gt;openssl ecparam -list_curves&lt;/code&gt; は、利用可能な各楕円曲線の名前と説明も表示します。</target>
        </trans-unit>
        <trans-unit id="765064bc0f2ebbee5fd48d238b26225a203b8acc" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt;&lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt;&lt;/a&gt; API instead which provides a much safer, and more convenient, alternative. See &lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513&lt;/a&gt;.</source>
          <target state="translated">代わりに、はるかに安全で便利な代替手段を提供する&lt;a href=&quot;async_hooks#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args&quot;&gt; &lt;code&gt;asyncResource.runInAsyncScope()&lt;/code&gt; &lt;/a&gt; APIを使用してください。&lt;a href=&quot;https://github.com/nodejs/node/pull/18513&quot;&gt;https://github.com/nodejs/node/pull/18513を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="49f7b175b350d863eddd6c45e7bde6196f5a3dae" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_request_destroy_error&quot;&gt;&lt;code&gt;request.destroy()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;http#http_request_abort&quot;&gt;&lt;code&gt;request.abort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;http#http_request_destroy_error&quot;&gt; &lt;code&gt;request.destroy()&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;http#http_request_abort&quot;&gt; &lt;code&gt;request.abort()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6154b148a1c536c520dcd143957f4ee42fa11bca" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http#http_response_writableended&quot;&gt;&lt;code&gt;response.writableEnded&lt;/code&gt;&lt;/a&gt; accordingly instead to avoid the ambigiuty.</source>
          <target state="translated">あいまいさを避けるために、代わりに&lt;a href=&quot;http#http_response_writablefinished&quot;&gt; &lt;code&gt;response.writableFinished&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;http#http_response_writableended&quot;&gt; &lt;code&gt;response.writableEnded&lt;/code&gt; を&lt;/a&gt;適宜使用してください。</target>
        </trans-unit>
        <trans-unit id="21fffe7297300dbe9e8fff2c0d9e6bf6dadca3c2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Content-Length&lt;/code&gt; or &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt;.</source>
          <target state="translated">使用 &lt;code&gt;Content-Length&lt;/code&gt; または &lt;code&gt;Transfer-Encoding: chunked&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0002c56173cba9691148346f5ff59f5e6272f3f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;cwd&lt;/code&gt; to specify the working directory from which the process is spawned. If not given, the default is to inherit the current working directory.</source>
          <target state="translated">&lt;code&gt;cwd&lt;/code&gt; を使用して、プロセスが生成される作業ディレクトリを指定します。指定しない場合、デフォルトでは現在の作業ディレクトリが継承されます。</target>
        </trans-unit>
        <trans-unit id="f76aedfcb8be71f942f01d87d5c0635892414e98" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;delete&lt;/code&gt; to delete a property from &lt;code&gt;process.env&lt;/code&gt;.</source>
          <target state="translated">使用し &lt;code&gt;delete&lt;/code&gt; からプロパティを削除する &lt;code&gt;process.env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf939c90dc4dd9f69fea1af3d6551d592973f347" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;env&lt;/code&gt; to specify environment variables that will be visible to the new process, the default is &lt;a href=&quot;process#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; を使用して、新しいプロセスから見える環境変数を指定します。デフォルトは&lt;a href=&quot;process#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bdf8f57531e78c20b41a30f579a4c55918a56c3e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;nc&lt;/code&gt; to connect to a Unix domain socket server:</source>
          <target state="translated">使用 &lt;code&gt;nc&lt;/code&gt; Unixドメインソケットサーバーに接続するには：</target>
        </trans-unit>
        <trans-unit id="356edf58e99c3593deffa78d682258b2fdf50801" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;require('crypto')&lt;/code&gt; to access this module.</source>
          <target state="translated">このモジュールにアクセスするに &lt;code&gt;require('crypto')&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="38303ef87943f896c6983d0f7cf9a70cfee6997e" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;dynamic instantiate hook&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#esm_dynamic_instantiate_hook&quot;&gt;動的インスタンス化フックを&lt;/a&gt;使用する</target>
        </trans-unit>
        <trans-unit id="e8deebbe7ac1f499b778249832e695a840225107" translate="yes" xml:space="preserve">
          <source>Use an insecure HTTP parser that accepts invalid HTTP headers. This may allow interoperability with non-conformant HTTP implementations. It may also allow request smuggling and other HTTP attacks that rely on invalid headers being accepted. Avoid using this option.</source>
          <target state="translated">無効な HTTP ヘッダを受け入れる安全でない HTTP パーサを使用してください。これにより、不適合な HTTP 実装との相互運用が可能になる可能性があります。また、リクエストの密輸や、無効なヘッダの受け入れに依存する他の HTTP 攻撃を許す可能性があります。このオプションの使用は避けてください。</target>
        </trans-unit>
        <trans-unit id="dec969f970ae2da31370314777710e2a530ab15f" translate="yes" xml:space="preserve">
          <source>Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store. The default store is selectable at build-time.</source>
          <target state="translated">現在のNode.jsバージョンで提供されているバンドルされたMozilla CAストアを使用するか、OpenSSLのデフォルトのCAストアを使用します。デフォルトのストアはビルド時に選択可能です。</target>
        </trans-unit>
        <trans-unit id="66143e2c420f8a7613239f1e3efea9682fa4826d" translate="yes" xml:space="preserve">
          <source>Use care when dropping privileges:</source>
          <target state="translated">特権を落とすときは注意してください。</target>
        </trans-unit>
        <trans-unit id="c22810f5eadd6fdab3516f9428266e7d74af7b11" translate="yes" xml:space="preserve">
          <source>Use care when using &lt;code&gt;.searchParams&lt;/code&gt; to modify the &lt;code&gt;URL&lt;/code&gt; because, per the WHATWG specification, the &lt;code&gt;URLSearchParams&lt;/code&gt; object uses different rules to determine which characters to percent-encode. For instance, the &lt;code&gt;URL&lt;/code&gt; object will not percent encode the ASCII tilde (&lt;code&gt;~&lt;/code&gt;) character, while &lt;code&gt;URLSearchParams&lt;/code&gt; will always encode it:</source>
          <target state="translated">&lt;code&gt;.searchParams&lt;/code&gt; を使用して &lt;code&gt;URL&lt;/code&gt; を変更する場合は注意が必要です。これは、WHATWG仕様 &lt;code&gt;URLSearchParams&lt;/code&gt; 、URLSearchParamsオブジェクトが異なるルールを使用して、パーセントエンコードする文字を決定するためです。たとえば、 &lt;code&gt;URL&lt;/code&gt; オブジェクトはASCIIチルダ（ &lt;code&gt;~&lt;/code&gt; ）文字をパーセントエンコードしませんが、 &lt;code&gt;URLSearchParams&lt;/code&gt; は常にそれをエンコードします。</target>
        </trans-unit>
        <trans-unit id="3f880e14ac8f636e000356a9df1eb2bc8423b67a" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;SlowBuffer&lt;/code&gt; should be used only as a last resort &lt;em&gt;after&lt;/em&gt; a developer has observed undue memory retention in their applications.</source>
          <target state="translated">&lt;code&gt;SlowBuffer&lt;/code&gt; の使用は、開発者がアプリケーションで過度のメモリ保持を確認した&lt;em&gt;後の&lt;/em&gt;最後の手段としてのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="fb9a785beb4586226520f84b421e62184beadeba" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; does not guarantee that the &lt;em&gt;surrounding&lt;/em&gt; code is timing-safe. Care should be taken to ensure that the surrounding code does not introduce timing vulnerabilities.</source>
          <target state="translated">&lt;code&gt;crypto.timingSafeEqual&lt;/code&gt; を使用しても、&lt;em&gt;周囲の&lt;/em&gt;コードがタイミングセーフであることは保証されません。周囲のコードがタイミングの脆弱性を引き起こさないように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2d44bc65ec8f3fb2f025187a40ecd2da6969c33" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;readable.push('')&lt;/code&gt; is not recommended.</source>
          <target state="translated">&lt;code&gt;readable.push('')&lt;/code&gt; の使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="d7a18f27832e42f62a26d1adff869deccc220b01" translate="yes" xml:space="preserve">
          <source>Use of the &lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt;&lt;code&gt;crypto.pbkdf2()&lt;/code&gt;&lt;/a&gt; API without specifying a digest was deprecated in Node.js 6.0 because the method defaulted to using the non-recommended &lt;code&gt;'SHA1'&lt;/code&gt; digest. Previously, a deprecation warning was printed. Starting in Node.js 8.0.0, calling &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; or &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; with &lt;code&gt;digest&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;crypto#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback&quot;&gt; &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; &lt;/a&gt;メソッドは非推奨使用にデフォルト設定するので、ダイジェストを指定せずにAPIは、Node.jsの6.0で廃止されました &lt;code&gt;'SHA1'&lt;/code&gt; ダイジェスト。以前は、非推奨の警告が出力されていました。Node.js 8.0.0以降、 &lt;code&gt;digest&lt;/code&gt; を &lt;code&gt;undefined&lt;/code&gt; に設定して &lt;code&gt;crypto.pbkdf2()&lt;/code&gt; または &lt;code&gt;crypto.pbkdf2Sync()&lt;/code&gt; を呼び出すと、 &lt;code&gt;TypeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="d7240b7777dbbea1e8a1ef48b75d9dcfb9881251" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;101&lt;/code&gt; Informational status code is forbidden in HTTP/2.</source>
          <target state="translated">HTTP / 2では、 &lt;code&gt;101&lt;/code&gt; 情報ステータスコードの使用は禁止されています。</target>
        </trans-unit>
        <trans-unit id="e598d7c6a0b9a276ca5b3bfcb5495de0f13c1ad6" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; Function</source>
          <target state="translated">使用 &lt;code&gt;completer&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="d093439750831928b8de4711644263144b0afd9f" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;completer&lt;/code&gt; function</source>
          <target state="translated">使用 &lt;code&gt;completer&lt;/code&gt; 機能</target>
        </trans-unit>
        <trans-unit id="7d32435c7a197f2836dfd3532944c2482f4fd236" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;readable.pipe()&lt;/code&gt; method is recommended for most users as it has been implemented to provide the easiest way of consuming stream data. Developers that require more fine-grained control over the transfer and generation of data can use the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;readable.on('readable')&lt;/code&gt;/&lt;code&gt;readable.read()&lt;/code&gt; or the &lt;code&gt;readable.pause()&lt;/code&gt;/&lt;code&gt;readable.resume()&lt;/code&gt; APIs.</source>
          <target state="translated">使用 &lt;code&gt;readable.pipe()&lt;/code&gt; メソッドは、ストリームデータを消費する最も簡単な方法を提供するために実装されているように、ほとんどのユーザーにお勧めします。データの転送及び生成をより細かく制御を必要とする開発者が使用することができる&lt;a href=&quot;events#events_class_eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;readable.on('readable')&lt;/code&gt; / &lt;code&gt;readable.read()&lt;/code&gt; または &lt;code&gt;readable.pause()&lt;/code&gt; / &lt;code&gt;readable.resume()&lt;/code&gt; APIを。</target>
        </trans-unit>
        <trans-unit id="51dda8e8d6b44f5c574aaf42f7777da76a59fa0f" translate="yes" xml:space="preserve">
          <source>Use of the API is unsafe.</source>
          <target state="translated">APIの使用は安全ではありません。</target>
        </trans-unit>
        <trans-unit id="948edf4448016b2dd50434fa23064801c2a1cb22" translate="yes" xml:space="preserve">
          <source>Use of the legacy &lt;code&gt;url.parse()&lt;/code&gt; method is discouraged. Users should use the WHATWG &lt;code&gt;URL&lt;/code&gt; API. Because the &lt;code&gt;url.parse()&lt;/code&gt; method uses a lenient, non-standard algorithm for parsing URL strings, security issues can be introduced. Specifically, issues with &lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;host name spoofing&lt;/a&gt; and incorrect handling of usernames and passwords have been identified.</source>
          <target state="translated">従来の &lt;code&gt;url.parse()&lt;/code&gt; メソッドの使用はお勧めしません。ユーザーはWHATWG使用する必要がある &lt;code&gt;URL&lt;/code&gt; のAPIを。ので &lt;code&gt;url.parse()&lt;/code&gt; メソッドは、URL文字列を解析するための寛大な、非標準的なアルゴリズムを使用して、セキュリティ上の問題を導入することができます。具体的には、&lt;a href=&quot;https://hackerone.com/reports/678487&quot;&gt;ホスト名のなりすまし&lt;/a&gt;やユーザー名とパスワードの誤った処理に関する問題が特定されています。</target>
        </trans-unit>
        <trans-unit id="ecb58157819114bf578e605246aad486b041e117" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">この事前に割り当てられた内部メモリプールの使用は、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; と &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; の呼び出しの主な違いです。具体的には、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; は内部 &lt;code&gt;Buffer&lt;/code&gt; プールを使用し&lt;em&gt;ません&lt;/em&gt;が、 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;size&lt;/code&gt; が&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; の&lt;/a&gt;半分以下の場合、内部 &lt;code&gt;Buffer&lt;/code&gt; プール&lt;em&gt;を&lt;/em&gt;使用します。違いはわずかですが、アプリケーションが&lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; が&lt;/a&gt;提供する追加のパフォーマンスを必要とする場合に重要になる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e255a577e807bc002dfb0d84533a52b730e80888" translate="yes" xml:space="preserve">
          <source>Use of this pre-allocated internal memory pool is a key difference between calling &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; vs. &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;. Specifically, &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; will &lt;em&gt;never&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool, while &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt;&lt;em&gt;will&lt;/em&gt; use the internal &lt;code&gt;Buffer&lt;/code&gt; pool if &lt;code&gt;size&lt;/code&gt; is less than or equal to half &lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt;&lt;code&gt;Buffer.poolSize&lt;/code&gt;&lt;/a&gt;. The difference is subtle but can be important when an application requires the additional performance that &lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt; provides.</source>
          <target state="translated">この事前に割り当てられた内部メモリプールの使用は、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; と &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; の呼び出しの主な違いです。具体的には、 &lt;code&gt;Buffer.alloc(size, fill)&lt;/code&gt; は内部 &lt;code&gt;Buffer&lt;/code&gt; プールを使用し&lt;em&gt;ません&lt;/em&gt;が、 &lt;code&gt;Buffer.allocUnsafe(size).fill(fill)&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、 &lt;code&gt;size&lt;/code&gt; が&lt;a href=&quot;#buffer_class_property_buffer_poolsize&quot;&gt; &lt;code&gt;Buffer.poolSize&lt;/code&gt; の&lt;/a&gt;半分以下の場合に内部 &lt;code&gt;Buffer&lt;/code&gt; プール&lt;em&gt;を&lt;/em&gt;使用します。違いは微妙ですが、アプリケーションが&lt;a href=&quot;#buffer_static_method_buffer_allocunsafe_size&quot;&gt; &lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt; が&lt;/a&gt;提供する追加のパフォーマンスを必要とする場合に重要になる可能性があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e7a11077ab4673062788e7639d751aef808d830d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field of a manifest to set configuration for many resources at once. The &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; field works by matching resources by their segments. If a scope or resource includes &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt;, unknown specifiers will be searched for in their containing scope. The containing scope for cascading is found by recursively reducing the resource URL by removing segments for &lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;special schemes&lt;/a&gt;, keeping trailing &lt;code&gt;&quot;/&quot;&lt;/code&gt; suffixes, and removing the query and hash fragment. This leads to the eventual reduction of the URL to its origin. If the URL is non-special the scope will be located by the URL's origin. If no scope is found for the origin or in the case of opaque origins, a protocol string can be used as a scope.</source>
          <target state="translated">マニフェストの &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; フィールドを使用して、一度に多くのリソースの構成を設定します。 &lt;code&gt;&quot;scopes&quot;&lt;/code&gt; フィールドには、そのセグメントによってリソースを照合することによって動作します。スコープまたはリソースに &lt;code&gt;&quot;cascade&quot;: true&lt;/code&gt; 含まれている場合：true、不明な指定子は、含まれているスコープで検索されます。カスケードの包含スコープは、&lt;a href=&quot;https://url.spec.whatwg.org/#special-scheme&quot;&gt;特別なスキームの&lt;/a&gt;セグメントを削除し、末尾の &lt;code&gt;&quot;/&quot;&lt;/code&gt; サフィックスを保持し、クエリとハッシュフラグメントを削除することにより、リソースURLを再帰的に削減することで見つかります。これにより、最終的にURLが元の場所に縮小されます。 URLが特別でない場合、スコープはURLの発信元によって検索されます。原点のスコープが見つからない場合、または不透明な原点の場合は、プロトコル文字列をスコープとして使用できます。</target>
        </trans-unit>
        <trans-unit id="4c412511e5a0d8bdf92bc274feb5291adda3aa57" translate="yes" xml:space="preserve">
          <source>Use the dynamically loaded pointer to invoke the function.</source>
          <target state="translated">関数を呼び出すには、動的にロードされたポインタを使用します。</target>
        </trans-unit>
        <trans-unit id="ae952fa27153fb5a58933981baea15f63402ec27" translate="yes" xml:space="preserve">
          <source>Use the internal &lt;code&gt;require()&lt;/code&gt; machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</source>
          <target state="translated">内部の &lt;code&gt;require()&lt;/code&gt; 機構を使用してモジュールの場所を検索しますが、モジュールをロードするのではなく、解決されたファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="15ee6e17c37012897af5f61e78384cc87974d16d" translate="yes" xml:space="preserve">
          <source>Use the specified file as a security policy.</source>
          <target state="translated">指定したファイルをセキュリティポリシーとして使用します。</target>
        </trans-unit>
        <trans-unit id="3380a8b2c6439c7c83ba160cfc5cef5210723c7c" translate="yes" xml:space="preserve">
          <source>Use this to determine what colors the terminal supports. Due to the nature of colors in terminals it is possible to either have false positives or false negatives. It depends on process information and the environment variables that may lie about what terminal is used. It is possible to pass in an &lt;code&gt;env&lt;/code&gt; object to simulate the usage of a specific terminal. This can be useful to check how specific environment settings behave.</source>
          <target state="translated">これを使用して、端末がサポートする色を決定します。端末の色の性質により、誤検知または誤検知のいずれかが発生する可能性があります。これは、使用される端末についてのプロセス情報と環境変数に依存します。特定の端末の使用をシミュレートするために &lt;code&gt;env&lt;/code&gt; オブジェクトを渡すことが可能です。これは、特定の環境設定の動作を確認するのに役立ちます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
