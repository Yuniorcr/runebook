<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="eb8258e450e38cc55f3ffa9c4ed96c35b1d0796e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;: declaration of a required module from the &lt;a href=&quot;https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders&quot;&gt;node_modules folder&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; ：&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders&quot;&gt;node_modulesフォルダー&lt;/a&gt;からの必要なモジュールの宣言</target>
        </trans-unit>
        <trans-unit id="b09910d78236081c247662f312f2aee99dfca166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; - enable modules and global strict mode</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; -モジュールとグローバル厳密モードを有効にする</target>
        </trans-unit>
        <trans-unit id="f1eb57690ac9e5f2504c11738d49be0cbb356030" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mongo&lt;/code&gt; - MongoDB global variables.</source>
          <target state="translated">&lt;code&gt;mongo&lt;/code&gt; -MongoDBグローバル変数。</target>
        </trans-unit>
        <trans-unit id="3647b4fcbde2eb722899a5d9fafaf261749738c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiLine&lt;/code&gt; is used any time an object literal spans multiple lines. The &lt;code&gt;align&lt;/code&gt; configuration is used when there is a group of properties in the same object. For example:</source>
          <target state="translated">&lt;code&gt;multiLine&lt;/code&gt; は、オブジェクトリテラルが複数行にわたる場合に使用されます。 &lt;code&gt;align&lt;/code&gt; 同じオブジェクトのプロパティのグループがある場合に構成が使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="85039c386b7f208762c8ae1a31be6bdc48aeb7fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiple&lt;/code&gt; - import multiple members.</source>
          <target state="translated">&lt;code&gt;multiple&lt;/code&gt; -複数のメンバーをインポートします。</target>
        </trans-unit>
        <trans-unit id="579aa663d50600b5ef7ffd2525a6171016c6868b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiple&lt;/code&gt; = import multiple members.</source>
          <target state="translated">&lt;code&gt;multiple&lt;/code&gt; =複数のメンバーをインポートします。</target>
        </trans-unit>
        <trans-unit id="ca01976934e7ece1cd87cf6a6b9e17f832b2007c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;) ... The name to check.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; ）...チェックする名前。</target>
        </trans-unit>
        <trans-unit id="cbbf913cd485aaa5ddad4b03533760a45873bc56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nameOrPath&lt;/code&gt; (&lt;code&gt;string | undefined&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;nameOrPath&lt;/code&gt; （ &lt;code&gt;string | undefined&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="800b7245ca613f3ebc61977360eb904c941e8ace" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;named&lt;/code&gt; is for named function expressions (e.g. &lt;code&gt;function foo () {}&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;named&lt;/code&gt; は、名前付き関数式（例えば、 &lt;code&gt;function foo () {}&lt;/code&gt; ）用です。</target>
        </trans-unit>
        <trans-unit id="3d6361491a6c856de8f0a2b92cd031709326d668" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;named&lt;/code&gt; provides overrides for named functions</source>
          <target state="translated">&lt;code&gt;named&lt;/code&gt; は名前付き関数のオーバーライドを提供します</target>
        </trans-unit>
        <trans-unit id="2951da645870566154a39d07e1aa1f4f73766908" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nashorn&lt;/code&gt; - Java 8 Nashorn global variables.</source>
          <target state="translated">&lt;code&gt;nashorn&lt;/code&gt; -Java 8 Nashornグローバル変数。</target>
        </trans-unit>
        <trans-unit id="8d9058ea972205d9bab4d55bd44720735ec7cef5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;natural&lt;/code&gt; - if &lt;code&gt;true&lt;/code&gt;, enforce properties to be in natural order. Default is &lt;code&gt;false&lt;/code&gt;. Natural Order compares strings containing combination of letters and numbers in the way a human being would sort. It basically sorts numerically, instead of sorting alphabetically. So the number 10 comes after the number 3 in Natural Sorting.</source>
          <target state="translated">&lt;code&gt;natural&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; の場合、プロパティが自然な順序になるように強制します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。Natural Orderは、人間がソートする方法で文字と数字の組み合わせを含む文字列を比較します。アルファベット順に並べ替えるのではなく、基本的に数値順に並べ替えます。したがって、10は、Natural Sortingの3の後に続きます。</target>
        </trans-unit>
        <trans-unit id="5d4f348bc5fd68fe165f4a0f5e948d449dc8c143" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt; (default) requires &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; （デフォルト）は &lt;code&gt;()&lt;/code&gt; を必要としません</target>
        </trans-unit>
        <trans-unit id="21c7cae089f4fb4a04fc35071355db10bce38d61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt; - Never use === or !== with &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; -===または！==を &lt;code&gt;null&lt;/code&gt; とともに使用しないでください。</target>
        </trans-unit>
        <trans-unit id="150b88c71b497d49b0537134f903ddb08bea4602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt; - never report shadowing before the outer variables/functions are defined.</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; never-外側の変数/関数が定義される前にシャドウイングを報告しません。</target>
        </trans-unit>
        <trans-unit id="467f0afe9126525a342b10a95d3e0e5c338078ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt; disallows any space followed by the &lt;code&gt;(&lt;/code&gt; of arguments.</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; 引数の &lt;code&gt;(&lt;/code&gt; )が後に続くスペースを決して禁止しません。</target>
        </trans-unit>
        <trans-unit id="3dcc399600f6b9050b422c5fa504ff399da293dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt; excepting &lt;code&gt;empty&lt;/code&gt; requires &lt;code&gt;( )&lt;/code&gt; (empty parens without a space is here forbidden)</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; &lt;code&gt;empty&lt;/code&gt; を除くことは決して必要としない &lt;code&gt;( )&lt;/code&gt; （スペースのない空の括弧はここでは禁止されている）</target>
        </trans-unit>
        <trans-unit id="2c39b1b1476d2c7ac1789eababd46e4cc7fe4ba3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextSegments&lt;/code&gt; (&lt;code&gt;CodePathSegment[]&lt;/code&gt;) - The next segments. If forking, there are two or more. If final, there is nothing.</source>
          <target state="translated">&lt;code&gt;nextSegments&lt;/code&gt; （ &lt;code&gt;CodePathSegment[]&lt;/code&gt; ）-次のセグメント。フォークの場合、2つ以上あります。最終的な場合、何もありません。</target>
        </trans-unit>
        <trans-unit id="404cfcf3a3f2688e6624cb4e27ce204c9bcaf508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ASTNode&lt;/code&gt;) ... An AST node to get their reference object. The type of the node must be &lt;code&gt;&quot;Identifier&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ASTNode&lt;/code&gt; ）...参照オブジェクトを取得するASTノード。ノードのタイプは &lt;code&gt;&quot;Identifier&quot;&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="6f15a8e48557848c07ce298a0c404c3f33826d92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ASTNode&lt;/code&gt;) ... An AST node to get their scope.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ASTNode&lt;/code&gt; ）...スコープを取得するASTノード。</target>
        </trans-unit>
        <trans-unit id="94b450acb7f4afa1bfbf8de1ced97150d4c2f577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ASTNode&lt;/code&gt;) ... An AST node to get their variables.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; （ &lt;code&gt;ASTNode&lt;/code&gt; ）...変数を取得するASTノード。</target>
        </trans-unit>
        <trans-unit id="dffbedf4214aca2c0c2b58d0ffe9c7b4248651b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; - (optional) the AST node related to the problem. If present and &lt;code&gt;loc&lt;/code&gt; is not specified, then the starting location of the node is used as the location of the problem.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; -（オプション）問題に関連するASTノード。存在し、 &lt;code&gt;loc&lt;/code&gt; が指定されていない場合、ノードの開始場所が問題の場所として使用されます。</target>
        </trans-unit>
        <trans-unit id="f4030b72a54a52794b9dc5ec7841fbe1aa9c06e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; - Node.js global variables and Node.js scoping.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; -Node.jsグローバル変数とNode.jsスコープ。</target>
        </trans-unit>
        <trans-unit id="c7d2155ac722addd7b831828181dec9624fb266f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; or &lt;code&gt;commonjs&lt;/code&gt;&lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;environments&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; または &lt;code&gt;commonjs&lt;/code&gt; &lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;環境&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a07b9025274fa2a033cbaaa5f69bb41ee5298f7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeType&lt;/code&gt; - the node or token type that was reported with the problem.</source>
          <target state="translated">&lt;code&gt;nodeType&lt;/code&gt; -問題とともに報告されたノードまたはトークンのタイプ。</target>
        </trans-unit>
        <trans-unit id="d44be12fed8fe4c7cdf7e5e2f4471a6555a7bc6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node_modules/&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;code&gt;node_modules/&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="bb3eb57fc7840a0aa6f3082d5d2122c413aa8c57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node_modules&lt;/code&gt; (&lt;code&gt;/**/node_modules/*&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; (&lt;code&gt;/**/node_modules/*&lt;/code&gt;)</target>
        </trans-unit>
        <trans-unit id="9e16fd07b9d2e3844ccfa50073b8883f868ae9ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node_modules&lt;/code&gt; in the current working directory (&lt;code&gt;/node_modules/*&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; 現在の作業ディレクトリに（ &lt;code&gt;/node_modules/*&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="384f46cf64cff9e315b941696d4164896822a9be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; - do not check arguments.</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; -引数をチェックしません。</target>
        </trans-unit>
        <trans-unit id="b090ad91390c1df68b5f72575cec6e341afcc480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; - do not check error objects. This is the default setting.</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; -エラーオブジェクトをチェックしません。これがデフォルトの設定です。</target>
        </trans-unit>
        <trans-unit id="edf95455a983a2b97d5a9423077a46ed2e047538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; - import module without exported bindings.</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; -エクスポートされたバインディングなしのインポートモジュール。</target>
        </trans-unit>
        <trans-unit id="b78f70dc90333999fb966a4a706d4b0c96fba7c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; = import module without exported bindings.</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; =エクスポートされたバインディングなしでモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="e64fb5321925e14b22452de710bc2de3275fe99f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nonwords&lt;/code&gt; - applies to unary operators such as: &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;!!&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;nonwords&lt;/code&gt; ： -のような単項演算子に適用される &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;--&lt;/code&gt; 、 &lt;code&gt;++&lt;/code&gt; 、 &lt;code&gt;!&lt;/code&gt; 、 &lt;code&gt;!!&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="765880a399ab6f02e04b6c0d3debfd72a2e2cd4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;npm run test:cli&lt;/code&gt; is an alias of the Mocha cli in &lt;code&gt;./node_modules/.bin/mocha&lt;/code&gt;. &lt;a href=&quot;https://mochajs.org/#command-line-usage&quot;&gt;Options&lt;/a&gt; are available to be provided to help to better control the test to run.</source>
          <target state="translated">&lt;code&gt;npm run test:cli&lt;/code&gt; は、. &lt;code&gt;./node_modules/.bin/mocha&lt;/code&gt; 内のMocha cliのエイリアスです。実行するテストをより適切に制御するのに役立つ&lt;a href=&quot;https://mochajs.org/#command-line-usage&quot;&gt;オプション&lt;/a&gt;を提供できます。</target>
        </trans-unit>
        <trans-unit id="a8873b6f96c7780858e869c9b7d9e5ca536c3736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectLiteralComputedProperties&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-computed-property-names&quot;&gt;computed object literal property names&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;objectLiteralComputedProperties&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-computed-property-names&quot;&gt;計算されたオブジェクトリテラルプロパティ名を&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="c073dee9bb2bb831da6b0239d1d4997ff4bdd561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectLiteralDuplicateProperties&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-duplicate-object-literal-properties&quot;&gt;duplicate object literal properties&lt;/a&gt; in strict mode</source>
          <target state="translated">&lt;code&gt;objectLiteralDuplicateProperties&lt;/code&gt; -ストリクトモードで&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-duplicate-object-literal-properties&quot;&gt;重複するオブジェクトリテラルプロパティを&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="2f8a75cc5423aa46591bea3ace7f2872c2417d64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectLiteralShorthandMethods&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-method-initializer-shorthand&quot;&gt;object literal shorthand methods&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;objectLiteralShorthandMethods&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-method-initializer-shorthand&quot;&gt;オブジェクトリテラルの短縮メソッドを&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="8e695be0dd3d7735f420ad57736da2ee2cce8ad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectLiteralShorthandProperties&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-property-initializer-shorthand&quot;&gt;object literal shorthand properties&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;objectLiteralShorthandProperties&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-property-initializer-shorthand&quot;&gt;オブジェクトリテラルショートハンドプロパティを&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="f4d20dd68438d09312041171ff8ab4750fa31cc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objects&lt;/code&gt; is for object literals and object patterns of destructuring. (e.g. &lt;code&gt;let {a,} = {a: 1};&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;objects&lt;/code&gt; は、オブジェクトリテラルと構造化解除のオブジェクトパターン用です。（例： &lt;code&gt;let {a,} = {a: 1};&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="07c69ddb32ebf1cbf36659f8f44586caaff53914" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectsInArrays&lt;/code&gt; sets the spacings between the curly braces and square brackets of object literals that are the first or last element in an array.</source>
          <target state="translated">&lt;code&gt;objectsInArrays&lt;/code&gt; は、配列の最初または最後の要素であるオブジェクトリテラルの波括弧と角括弧の間の間隔を設定します。</target>
        </trans-unit>
        <trans-unit id="ce68e0b0c998b793c65ca22e5a473ec8ac9ff112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;objectsInObjects&lt;/code&gt; sets the spacing between the curly brace of an object literal that is the last element in an object and the curly brace of the containing object.</source>
          <target state="translated">&lt;code&gt;objectsInObjects&lt;/code&gt; は、オブジェクトの最後の要素であるオブジェクトリテラルの波括弧と、それを含むオブジェクトの波括弧の間の間隔を設定します。</target>
        </trans-unit>
        <trans-unit id="2de0f458dbd19aff17f068e875602abd4e80b48f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;octalLiterals&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-octal-and-binary-literals&quot;&gt;octal literals&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;octalLiterals&lt;/code&gt; - &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-octal-and-binary-literals&quot;&gt;8進数リテラルを&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="9fb7c667bb1b38e1b80c46eca65068eceefb9ef6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.allowInlineConfig&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.allowInlineConfig&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e23e5a4fdf6ef6798ecc9fc8657da0f084d12940" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.baseConfig&lt;/code&gt; (&lt;code&gt;ConfigData | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.baseConfig&lt;/code&gt; （ &lt;code&gt;ConfigData | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ccc5a9b6d45fd0fefaadfcc2537c6cc4593337ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.cache&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.cache&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="86a2f54aad0168d57705de1cd30e38ecb8232f73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.cacheLocation&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.cacheLocation&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="eebf4a42d17fbf7c8c352d57fe143c8f15f7853d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.cwd&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.cwd&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7ef25eaaba1b54180e9f6cd76cbe7e32e4efa9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.errorOnUnmatchedPattern&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.errorOnUnmatchedPattern&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1ead31ee810459d2ed1d3eb5277d567b2d10c8df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.extensions&lt;/code&gt; (&lt;code&gt;string[] | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.extensions&lt;/code&gt; （ &lt;code&gt;string[] | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6328ee48bb61b008a603dcee99fcec0d73a09b21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.filePath&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.filePath&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bc222f360b00c900c6a5fe4c62e7a72ca1383d7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.fix&lt;/code&gt; (&lt;code&gt;boolean | (message: LintMessage) =&amp;gt; boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.fix&lt;/code&gt; （ &lt;code&gt;boolean | (message: LintMessage) =&amp;gt; boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8de54b2afaab07cc12a45d0bbead4cedc67202f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.fixTypes&lt;/code&gt; (&lt;code&gt;(&quot;problem&quot; | &quot;suggestion&quot; | &quot;layout&quot;)[] | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.fixTypes&lt;/code&gt; （ &lt;code&gt;(&quot;problem&quot; | &quot;suggestion&quot; | &quot;layout&quot;)[] | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2444c2c65fd7e1b186d176cc6d7983f9c05afe46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.globInputPaths&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.globInputPaths&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7e33d5c782388edde327f82fa96f45c28dda35a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.ignore&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.ignore&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8daad7032846271f0bd78c7bc21d94bf72b12828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.ignorePath&lt;/code&gt; (&lt;code&gt;string | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.ignorePath&lt;/code&gt; （ &lt;code&gt;string | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="3a03057d59997f2d91e7723ea9e8144c9708659d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.overrideConfig&lt;/code&gt; (&lt;code&gt;ConfigData | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.overrideConfig&lt;/code&gt; （ &lt;code&gt;ConfigData | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9c293007a3b0029d05e7a017db4ecc5205eb33c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.overrideConfigFile&lt;/code&gt; (&lt;code&gt;string | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.overrideConfigFile&lt;/code&gt; （ &lt;code&gt;string | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c485f9477a4d2c0355b033fcec13727b78e98a1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.plugins&lt;/code&gt; (&lt;code&gt;Record&amp;lt;string, Plugin&amp;gt; | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.plugins&lt;/code&gt; （ &lt;code&gt;Record&amp;lt;string, Plugin&amp;gt; | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d6fa4ea1d951ef00153475188de16da6846af5fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.reportUnusedDisableDirectives&lt;/code&gt; (&lt;code&gt;&quot;error&quot; | &quot;warn&quot; | &quot;off&quot; | null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.reportUnusedDisableDirectives&lt;/code&gt; （ &lt;code&gt;&quot;error&quot; | &quot;warn&quot; | &quot;off&quot; | null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8773d4b4dd2ccad9901ab5ce79a49cc34f928084" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.resolvePluginsRelativeTo&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt; | &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.resolvePluginsRelativeTo&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6706f2dcb883c6ac6a6f21cebb3c365d142ef04f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.rulePaths&lt;/code&gt; (&lt;code&gt;string[]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.rulePaths&lt;/code&gt; （ &lt;code&gt;string[]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="344312b77cf7df150641cfd05c1c18b7243d3484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.useEslintrc&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.useEslintrc&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="97f933229f3cbd830f6e3b9d228fa646999b2f51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.warnIgnored&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;options.warnIgnored&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1f1eb81580fc13c3c53345c889589a701c11a131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; (array, optional): The options passed to the rule. The rule severity should not be included in this list.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; （配列、オプション）：ルールに渡されるオプション。ルールの重要度は、このリストに含めないでください。</target>
        </trans-unit>
        <trans-unit id="2b2b0f7963fc35570f1e7afb28b068b3074f0e95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - (optional) Additional options for this run.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; -（オプション）この実行の追加オプション。</target>
        </trans-unit>
        <trans-unit id="3cfde74554784cd87b376036b229c10f24b876bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - an array of rule options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; -ルールオプションの配列。</target>
        </trans-unit>
        <trans-unit id="953cca3d6e72a69e66f5bb55ea626d4968eea41a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - an array of the &lt;a href=&quot;../user-guide/configuring#configuring-rules&quot;&gt;configured options&lt;/a&gt; for this rule. This array does not include the rule severity. For more information, see &lt;a href=&quot;#contextoptions&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; -このルールに&lt;a href=&quot;../user-guide/configuring#configuring-rules&quot;&gt;構成されたオプションの&lt;/a&gt;配列。この配列には、ルールの重大度は含まれていません。詳細については、&lt;a href=&quot;#contextoptions&quot;&gt;こちらを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02f824487a88f212cffad864ce4af1140650de14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;other&lt;/code&gt;: any other kind of declaration</source>
          <target state="translated">&lt;code&gt;other&lt;/code&gt; ：その他の種類の宣言</target>
        </trans-unit>
        <trans-unit id="bc4477fbb65f6b8fcd53d64bb06b6c3629f2c357" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; (&lt;code&gt;string | undefined&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; （ &lt;code&gt;string | undefined&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ca9650deea2a9d987054e7c74a4eb8ebd5059ca2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; (string): A code string representing the result of applying the suggestion fix to the input code</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; （文字列）：入力コードに提案修正を適用した結果を表すコード文字列</target>
        </trans-unit>
        <trans-unit id="6798006d75c739786f6b0047691c8976e28d2adc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; (string, optional): Asserts the output that will be produced when using this rule for a single pass of autofixing (e.g. with the &lt;code&gt;--fix&lt;/code&gt; command line flag). If this is &lt;code&gt;null&lt;/code&gt;, asserts that none of the reported problems suggest autofixes.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; （文字列、オプション）：（と例えばautofixingの単一パスに対してこのルールを使用する際に生成される出力をアサート &lt;code&gt;--fix&lt;/code&gt; コマンド・ライン・フラグ）。これが &lt;code&gt;null&lt;/code&gt; の場合、報告された問題のいずれも自動修正を示唆していないと断言します。</target>
        </trans-unit>
        <trans-unit id="1d4ec23e8add02587790fe0f2f9fbf4e5bde01de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; (string, required if the rule fixes code): Asserts the output that will be produced when using this rule for a single pass of autofixing (e.g. with the &lt;code&gt;--fix&lt;/code&gt; command line flag). If this is &lt;code&gt;null&lt;/code&gt;, asserts that none of the reported problems suggest autofixes.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; （文字列、ルールの修正コードが場合は必須）：（と例えばautofixingの単一パスに対してこのルールを使用する際に生成される出力アサート &lt;code&gt;--fix&lt;/code&gt; コマンド・ライン・フラグ）。これが &lt;code&gt;null&lt;/code&gt; の場合、報告された問題のいずれも自動修正を示唆していないことを表明します。</target>
        </trans-unit>
        <trans-unit id="0a71ecfa6375c836acf20e29f020847ba870e46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; - Fixed code text (might be the same as input if no fixes were applied).</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; -固定コードのテキスト（無修正が適用されなかった場合は、入力と同じかもしれません）。</target>
        </trans-unit>
        <trans-unit id="12a06221f323f3b60d64937b61c3469af8706744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output&lt;/code&gt; - The source code for the given file with as many fixes applied as possible, so you can use that to rewrite the files if necessary. This property is omitted if no fix is available.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; -多くの修正が可能として適用されると指定したファイルのソースコードは、あなたが必要な場合は、ファイルを書き換えるためにそれを使用することができます。修正が利用できない場合、このプロパティは省略されます。</target>
        </trans-unit>
        <trans-unit id="c42883e5282e3b6113d27d5d9e52ff0ce418dbb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overrides&lt;/code&gt; - specifies overwriting usage of spacing for each operator, word or non word. This is empty by default, but can be used to enforce or disallow spacing around operators. For example:</source>
          <target state="translated">&lt;code&gt;overrides&lt;/code&gt; -各演算子、単語、または単語以外のスペースの上書き使用を指定します。これはデフォルトでは空ですが、演算子の周囲のスペースを強制または禁止するために使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="df212a0b1562019fdac6fcc446b5e67163169952" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parameters&lt;/code&gt; (default: 1) enforces indentation level for parameters in a function declaration. This can either be a number indicating indentation level, or the string &lt;code&gt;&quot;first&quot;&lt;/code&gt; indicating that all parameters of the declaration must be aligned with the first parameter. This can also be set to &lt;code&gt;&quot;off&quot;&lt;/code&gt; to disable checking for FunctionDeclaration parameters.</source>
          <target state="translated">&lt;code&gt;parameters&lt;/code&gt; （デフォルト：1）は、関数宣言のパラメータにインデントレベルを適用します。これは、インデントレベルを示す数値、または宣言のすべてのパラメーターを最初のパラメーターに揃える必要があることを示す文字列 &lt;code&gt;&quot;first&quot;&lt;/code&gt; いずれかです。これを &lt;code&gt;&quot;off&quot;&lt;/code&gt; に設定して、FunctionDeclarationパラメータのチェックを無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="77267ac9c00c59606640d20dfda54ee67ffed0c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parameters&lt;/code&gt; (default: 1) enforces indentation level for parameters in a function expression. This can either be a number indicating indentation level, or the string &lt;code&gt;&quot;first&quot;&lt;/code&gt; indicating that all parameters of the expression must be aligned with the first parameter. This can also be set to &lt;code&gt;&quot;off&quot;&lt;/code&gt; to disable checking for FunctionExpression parameters.</source>
          <target state="translated">&lt;code&gt;parameters&lt;/code&gt; （デフォルト：1）は、関数式のパラメータにインデントレベルを適用します。これは、インデントレベルを示す数値、または式のすべてのパラメーターを最初のパラメーターに揃える必要があることを示す文字列 &lt;code&gt;&quot;first&quot;&lt;/code&gt; いずれかです。これを &lt;code&gt;&quot;off&quot;&lt;/code&gt; に設定して、FunctionExpressionパラメータのチェックを無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="77af9e05de00995fa6b3a4d205aedf3f29ab3503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parameters&lt;/code&gt; (off by default) enforces indentation level for parameters in a function declaration. This can either be a number indicating indentation level, or the string &lt;code&gt;&quot;first&quot;&lt;/code&gt; indicating that all parameters of the declaration must be aligned with the first parameter.</source>
          <target state="translated">&lt;code&gt;parameters&lt;/code&gt; （デフォルトではオフ）は、関数宣言のパラメータにインデントレベルを適用します。これは、インデントレベルを示す数値、または宣言のすべてのパラメーターを最初のパラメーターに揃える必要があることを示す文字列 &lt;code&gt;&quot;first&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="2e834567550c48cf2d4a16eea1bc1483bce31889" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parameters&lt;/code&gt; (off by default) enforces indentation level for parameters in a function expression. This can either be a number indicating indentation level, or the string &lt;code&gt;&quot;first&quot;&lt;/code&gt; indicating that all parameters of the expression must be aligned with the first parameter.</source>
          <target state="translated">&lt;code&gt;parameters&lt;/code&gt; （デフォルトではオフ）は、関数式のパラメータにインデントレベルを適用します。これは、インデントレベルを示す数値、または式のすべてのパラメーターを最初のパラメーターに揃える必要があることを示す文字列 &lt;code&gt;&quot;first&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="fc7bf95bd7ee592e11b5b6651deeda79fd043e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parser&lt;/code&gt; - Specify the parser to be used (default: &lt;code&gt;espree&lt;/code&gt;). Corresponds to &lt;code&gt;--parser&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; - （デフォルト：使用するパーサを指定 &lt;code&gt;espree&lt;/code&gt; を）。 &lt;code&gt;--parser&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="1e6ca3e81d6c40d0b5138a230ae23b36a2fe3e0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserOptions&lt;/code&gt; - An object containing parser options (default: empty object). Corresponds to &lt;code&gt;--parser-options&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parserOptions&lt;/code&gt; -パーサーオプションを含むオブジェクト（デフォルト：空のオブジェクト）。 &lt;code&gt;--parser-options&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="62d9be7532f101375fff14421e22dedbe27cefdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserOptions&lt;/code&gt; - acts the same as &lt;code&gt;parserOptions&lt;/code&gt; in a configuration file.</source>
          <target state="translated">&lt;code&gt;parserOptions&lt;/code&gt; -構成ファイルの &lt;code&gt;parserOptions&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="b6236986a6f2bbaa813cea15a098e7e04f174efb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserOptions&lt;/code&gt; - the parser options configured for this run (more details &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;here&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;parserOptions&lt;/code&gt; -この実行用に構成されたパーサーオプション（詳細は&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;こちら&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="e957ea6aa911bb1036330b7acb419bd414111cf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserPath&lt;/code&gt; - the full path to the &lt;code&gt;parser&lt;/code&gt; from configuration.</source>
          <target state="translated">&lt;code&gt;parserPath&lt;/code&gt; -構成から &lt;code&gt;parser&lt;/code&gt; への絶対パス。</target>
        </trans-unit>
        <trans-unit id="eb9333f61a7b9f3ac236224816f41102b1af0104" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserPath&lt;/code&gt; - the name of the &lt;code&gt;parser&lt;/code&gt; from configuration.</source>
          <target state="translated">&lt;code&gt;parserPath&lt;/code&gt; -構成からの &lt;code&gt;parser&lt;/code&gt; の名前。</target>
        </trans-unit>
        <trans-unit id="c62035ea48d839d0d39478e294eb9dc8235bbc53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parserServices&lt;/code&gt; - an object containing parser-provided services for rules. The default parser does not provide any services. However, if a rule is intended to be used with a custom parser, it could use &lt;code&gt;parserServices&lt;/code&gt; to access anything provided by that parser. (For example, a TypeScript parser could provide the ability to get the computed type of a given node.)</source>
          <target state="translated">&lt;code&gt;parserServices&lt;/code&gt; -パーサーが提供するルールのサービスを含むオブジェクト。デフォルトのパーサーはサービスを提供しません。ただし、ルールをカスタムパーサーで使用することを目的としている場合は、 &lt;code&gt;parserServices&lt;/code&gt; を使用して、そのパーサーが提供するすべてのものにアクセスできます。（たとえば、TypeScriptパーサーは、指定されたノードの計算されたタイプを取得する機能を提供できます。）</target>
        </trans-unit>
        <trans-unit id="22cbbb157d0e04d14c3d8ef457339050ae3dabd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patterns&lt;/code&gt; (&lt;code&gt;string | string[]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;patterns&lt;/code&gt; （ &lt;code&gt;string | string[]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="271b2c95f820e9ab84edb131af02224323f30ab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;phantomjs&lt;/code&gt; - PhantomJS global variables.</source>
          <target state="translated">&lt;code&gt;phantomjs&lt;/code&gt; - PhantomJSグローバル変数。</target>
        </trans-unit>
        <trans-unit id="a1080ace528b98eb07dee2d43c91aaf7c8ad0224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;plugins&lt;/code&gt; - An array of plugins to load (default: empty array). Corresponds to &lt;code&gt;--plugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; -ロードするプラグインの配列（デフォルト：空の配列）。 &lt;code&gt;--plugin&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="a8d92334d46a87258e7d759c441b3a69a315ff2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postprocess&lt;/code&gt; - (optional) A function that &lt;a href=&quot;working-with-plugins#processors-in-plugins&quot;&gt;Processors in Plugins&lt;/a&gt; documentation describes as the &lt;code&gt;postprocess&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;postprocess&lt;/code&gt; -（オプション）&lt;a href=&quot;working-with-plugins#processors-in-plugins&quot;&gt;プラグインの&lt;/a&gt;ドキュメンテーションのプロセッサーが &lt;code&gt;postprocess&lt;/code&gt; メソッドとして記述する関数。</target>
        </trans-unit>
        <trans-unit id="ce4ff3a6ad693db9b7f88ce66b482c27c2f6bb0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preprocess&lt;/code&gt; - (optional) A function that &lt;a href=&quot;working-with-plugins#processors-in-plugins&quot;&gt;Processors in Plugins&lt;/a&gt; documentation describes as the &lt;code&gt;preprocess&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;preprocess&lt;/code&gt; -（オプション）&lt;a href=&quot;working-with-plugins#processors-in-plugins&quot;&gt;プラグインの&lt;/a&gt;ドキュメンテーションのプロセッサで &lt;code&gt;preprocess&lt;/code&gt; メソッドとして記述されている関数。</target>
        </trans-unit>
        <trans-unit id="83c103479177b2ca8bbd64b3b60366ab5cf9e137" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevSegments&lt;/code&gt; (&lt;code&gt;CodePathSegment[]&lt;/code&gt;) - The previous segments. If merging, there are two or more. If initial, there is nothing.</source>
          <target state="translated">&lt;code&gt;prevSegments&lt;/code&gt; （ &lt;code&gt;CodePathSegment[]&lt;/code&gt; ）-前のセグメント。マージする場合、2つ以上あります。初期の場合、何もありません。</target>
        </trans-unit>
        <trans-unit id="a48a350d7e90531b0eeb25b3e7e294822f866ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;problem&lt;/code&gt; - fix potential errors in the code</source>
          <target state="translated">&lt;code&gt;problem&lt;/code&gt; -コードの潜在的なエラーを修正する</target>
        </trans-unit>
        <trans-unit id="cd428966fd6374386740dd2c2d5d9219cb27af71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propertyName&lt;/code&gt; sets the spacing in square brackets of computed member expressions.</source>
          <target state="translated">&lt;code&gt;propertyName&lt;/code&gt; は、計算されたメンバー式の角括弧内の間隔を設定します。</target>
        </trans-unit>
        <trans-unit id="23f8106c7ca5493c8b0b6adc3e39e383a688096e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;props&lt;/code&gt; - if this is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;no-self-assign&lt;/code&gt; rule warns self-assignments of properties. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;props&lt;/code&gt; -これが &lt;code&gt;true&lt;/code&gt; の場合、 &lt;code&gt;no-self-assign&lt;/code&gt; ルールはプロパティの自己割り当てを警告します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e83860b52ce8d0cabec51837fbf8650b0f1e04be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prototypejs&lt;/code&gt; - Prototype.js global variables.</source>
          <target state="translated">&lt;code&gt;prototypejs&lt;/code&gt; -Prototype.jsグローバル変数。</target>
        </trans-unit>
        <trans-unit id="e3c950d020992eb6c37fbfa53820cc9cbdf3598e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;protractor&lt;/code&gt; - Protractor global variables.</source>
          <target state="translated">&lt;code&gt;protractor&lt;/code&gt; -分度器グローバル変数。</target>
        </trans-unit>
        <trans-unit id="a758b1fe1cfb1e786068a3d5f7c249a6a14be691" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qunit&lt;/code&gt; - QUnit global variables.</source>
          <target state="translated">&lt;code&gt;qunit&lt;/code&gt; -QUnitグローバル変数。</target>
        </trans-unit>
        <trans-unit id="d18b3e513a0134dc0a99151f8041a45128d3688e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; (&lt;code&gt;[number, number]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; （ &lt;code&gt;[number, number]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="fdf3ffc780217c7b564e59898b21427c601c2ce4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;range&lt;/code&gt; (&lt;code&gt;number[]&lt;/code&gt;) is an array of two numbers. Both numbers are a 0-based index which is the position in the array of source code characters. The first is the start position of the node, the second is the end position of the node. &lt;code&gt;code.slice(node.range[0], node.range[1])&lt;/code&gt; must be the text of the node. This range does not include spaces/parentheses which are around the node.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; （ &lt;code&gt;number[]&lt;/code&gt; ）は、2つの数値の配列です。どちらの数値も0から始まるインデックスで、ソースコード文字の配列内の位置です。1つ目はノードの開始位置、2つ目はノードの終了位置です。 &lt;code&gt;code.slice(node.range[0], node.range[1])&lt;/code&gt; は、ノードのテキストでなければなりません。この範囲には、ノードの周囲にあるスペース/括弧は含まれません。</target>
        </trans-unit>
        <trans-unit id="3bc82911a5abe75dd7022089706356e45d1eff63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rangeOptions&lt;/code&gt; is an object which has 1 property: &lt;code&gt;includeComments&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rangeOptions&lt;/code&gt; は：1プロパティを持つオブジェクトです &lt;code&gt;includeComments&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7784b4a1bdf14d9bb9593a19deaf3f2538bd8501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;raw&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;) is the source code of this literal. This is the same as &lt;code&gt;code.slice(node.range[0], node.range[1])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raw&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; ）は、このリテラルのソースコードです。これは &lt;code&gt;code.slice(node.range[0], node.range[1])&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="a13eb46f5bba31eb6d1f8a661b482fadcc21bc89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reachable&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;) - A flag which shows whether or not it's reachable. This becomes &lt;code&gt;false&lt;/code&gt; when preceded by &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or &lt;code&gt;continue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reachable&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）- 到達可能かどうかを示すフラグ。 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、または &lt;code&gt;continue&lt;/code&gt; が先行する場合、これは &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="d8169fa75038493ba09bffa4d71ab00bdd4d51f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recommended&lt;/code&gt; (boolean) is whether the &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a &lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;configuration file&lt;/a&gt; enables the rule</source>
          <target state="translated">&lt;code&gt;recommended&lt;/code&gt; （ブール値）は、&lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;構成ファイル&lt;/a&gt;の &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; プロパティがルールを有効にするかどうかです</target>
        </trans-unit>
        <trans-unit id="2ee047d1edaaf57a4131d4225af9a2587a45bf1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regexUFlag&lt;/code&gt; - enable the &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-regular-expression-u-flag&quot;&gt;regular expression &lt;code&gt;u&lt;/code&gt; flag&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;regexUFlag&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-regular-expression-u-flag&quot;&gt;正規表現の&lt;/a&gt; &lt;code&gt;u&lt;/code&gt; フラグを有効にする</target>
        </trans-unit>
        <trans-unit id="8566d709a346d28d2b1faa01db650a08ab377add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;regexYFlag&lt;/code&gt; - enable the &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-regular-expression-y-flag&quot;&gt;regular expression &lt;code&gt;y&lt;/code&gt; flag&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;regexYFlag&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-regular-expression-y-flag&quot;&gt;正規表現の&lt;/a&gt; &lt;code&gt;y&lt;/code&gt; フラグを有効にする</target>
        </trans-unit>
        <trans-unit id="afd2d633c8d9807fdc3075c2fe07411ee2a058e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove(nodeOrToken)&lt;/code&gt; - removes the given node or token</source>
          <target state="translated">&lt;code&gt;remove(nodeOrToken)&lt;/code&gt; -指定されたノードまたはトークンを削除します</target>
        </trans-unit>
        <trans-unit id="11d39baf6060a2ad476e6e8619b794300a847485" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;removeRange(range)&lt;/code&gt; - removes text in the given range</source>
          <target state="translated">&lt;code&gt;removeRange(range)&lt;/code&gt; -指定された範囲のテキストを削除します</target>
        </trans-unit>
        <trans-unit id="42e61dda13ee147b1a62ef2c6293cff07b8b228f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replaceText(nodeOrToken, text)&lt;/code&gt; - replaces the text in the given node or token</source>
          <target state="translated">&lt;code&gt;replaceText(nodeOrToken, text)&lt;/code&gt; -指定されたノードまたはトークンのテキストを置き換えます</target>
        </trans-unit>
        <trans-unit id="a1e4e6752c215d2c65bb1e37dff8db13c743e532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replaceTextRange(range, text)&lt;/code&gt; - replaces the text in the given range</source>
          <target state="translated">&lt;code&gt;replaceTextRange(range, text)&lt;/code&gt; -指定された範囲のテキストを置き換えます</target>
        </trans-unit>
        <trans-unit id="e5ef2a6db19c2d0173abd286cb3d83e827e95c9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacedBy&lt;/code&gt; (array) in the case of a deprecated rule, specifies replacement rule(s)</source>
          <target state="translated">&lt;code&gt;replacedBy&lt;/code&gt; 廃止されたルールの場合、replacedBy（配列）、置換ルールを指定します</target>
        </trans-unit>
        <trans-unit id="b3ca8cd8d276fad65094fd4cf491b4ebc6870f06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replacedBy&lt;/code&gt; - An array of rules that replace the deprecated rule (e.g. &lt;code&gt;[&quot;indent&quot;]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;replacedBy&lt;/code&gt; -非推奨ルールを置き換えるルールの配列（例えば &lt;code&gt;[&quot;indent&quot;]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8b008f6034627aab91885c2e655a5f996fa972fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report(descriptor)&lt;/code&gt; - reports a problem in the code (see the &lt;a href=&quot;#context-report&quot;&gt;dedicated section&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;report(descriptor)&lt;/code&gt; -コードの問題を報告します（&lt;a href=&quot;#context-report&quot;&gt;専用セクションを参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="673ed79127f467f90da4b20706efad40980cad39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report(descriptor)&lt;/code&gt; - reports a problem in the code (see the &lt;a href=&quot;#contextreport&quot;&gt;dedicated section&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;report(descriptor)&lt;/code&gt; -コードの問題を報告します（&lt;a href=&quot;#contextreport&quot;&gt;専用セクションを参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="44be526c0bf07640ca73389d24943d2ba6402b30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report(descriptor)&lt;/code&gt; - reports a problem in the code.</source>
          <target state="translated">&lt;code&gt;report(descriptor)&lt;/code&gt; -コードの問題を報告します。</target>
        </trans-unit>
        <trans-unit id="c1f576f0105a26406714f7c21c3d009aa937c466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report(node, [location], message)&lt;/code&gt; - reports a problem in the code.</source>
          <target state="translated">&lt;code&gt;report(node, [location], message)&lt;/code&gt; -コードの問題を報告します。</target>
        </trans-unit>
        <trans-unit id="0e70a123d190ad73ab6a4108ddc3ce1435f12922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; - (optional) when set to &lt;code&gt;true&lt;/code&gt;, adds reported errors for unused &lt;code&gt;eslint-disable&lt;/code&gt; directives when no problems would be reported in the disabled area anyway.</source>
          <target state="translated">&lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; -（オプション） &lt;code&gt;true&lt;/code&gt; に設定すると、 &lt;code&gt;eslint-disable&lt;/code&gt; された領域で問題が報告されない場合に、未使用のeslint-disableディレクティブのエラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="44662217adc4a07fba54d6d07d774d1c9511d2d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; - When set to &lt;code&gt;true&lt;/code&gt;, adds reported errors for unused &lt;code&gt;eslint-disable&lt;/code&gt; directives when no problems would be reported in the disabled area anyway (default: false). Corresponds to &lt;code&gt;--report-unused-disable-directives&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; に設定すると、無効領域で問題が報告されない場合 &lt;code&gt;eslint-disable&lt;/code&gt; 、未使用のeslint-disableディレクティブのエラーが報告されます（デフォルト：false）。 &lt;code&gt;--report-unused-disable-directives&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="342e993def331cf204c8eb81611d758fe135c958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolvePluginsRelativeTo&lt;/code&gt; - Determines the folder where plugins should be resolved from. Should be used when an integration installs plugins and uses those plugins to lint code on behalf of the end user. Corresponds to &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;resolvePluginsRelativeTo&lt;/code&gt; -プラグインの解決元のフォルダーを決定します。統合がプラグインをインストールし、それらのプラグインを使用してエンドユーザーに代わってコードをlintするときに使用する必要があります。 &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="f08895232fda29a1d46906fbd76c41944a98b08b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restParams&lt;/code&gt; - enable the &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-rest-parameters&quot;&gt;rest parameters&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;restParams&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-rest-parameters&quot;&gt;残りのパラメーターを&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="387ba243313b63a44f6fed3bf186a405dc18a3c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;results&lt;/code&gt; (&lt;code&gt;LintResult[]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;results&lt;/code&gt; （ &lt;code&gt;LintResult[]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bf8f5ae89641eff23950db05e8f16628d1f4b207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;returnedSegments&lt;/code&gt; (&lt;code&gt;CodePathSegment[]&lt;/code&gt;) - The final segments which includes only returned.</source>
          <target state="translated">&lt;code&gt;returnedSegments&lt;/code&gt; （ &lt;code&gt;CodePathSegment[]&lt;/code&gt; ）-返されるだけを含む最終セグメント。</target>
        </trans-unit>
        <trans-unit id="d8a36ed1ea0df53b1d1108561ba04761d6a3f852" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ruleId&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt; | &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;ruleId&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; | &lt;code&gt;null&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e7677439df7966be65f67970f0b081d5c60e994b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ruleId&lt;/code&gt; - The name of the rule (e.g. &lt;code&gt;indent-legacy&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ruleId&lt;/code&gt; -ルールの名前（例： &lt;code&gt;indent-legacy&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8f201397e61a1941d94949ce05e396f2eb6be892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ruleId&lt;/code&gt; - the ID of the rule that triggered the messages (or null if &lt;code&gt;fatal&lt;/code&gt; is true).</source>
          <target state="translated">&lt;code&gt;ruleId&lt;/code&gt; -メッセージをトリガーしたルールのID（または、 &lt;code&gt;fatal&lt;/code&gt; がtrueの場合はnull ）。</target>
        </trans-unit>
        <trans-unit id="448d5336b959502dad8f9091921de730cd52d6f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rulePaths&lt;/code&gt; - An array of directories to load custom rules from (default: empty array). Corresponds to &lt;code&gt;--rulesdir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rulePaths&lt;/code&gt; -カスタムルールをロードするディレクトリの配列（デフォルト：空の配列）。 &lt;code&gt;--rulesdir&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="0e9e950b17b2f15687b78111419b093702a5f998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; - An object of rules to use (default: null). Corresponds to &lt;code&gt;--rule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;rules&lt;/code&gt; -使用するルールのオブジェクト（デフォルト：null）。 &lt;code&gt;--rule&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="bb218e59d198a007db588129fdf4617116d0b205" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; - all source files defining rules</source>
          <target state="translated">&lt;code&gt;rules&lt;/code&gt; - ルールを定義するすべてのソースファイル</target>
        </trans-unit>
        <trans-unit id="033313294f0c24b5ba6cf94b3a35e48deb70bc28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; - tests for the rules</source>
          <target state="translated">&lt;code&gt;rules&lt;/code&gt; - ルールのテスト</target>
        </trans-unit>
        <trans-unit id="5244945f7f5609561b8d12a8e5d9113232f9758b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;schema&lt;/code&gt; (array) specifies the &lt;a href=&quot;#options-schemas&quot;&gt;options&lt;/a&gt; so ESLint can prevent invalid &lt;a href=&quot;../user-guide/configuring#configuring-rules&quot;&gt;rule configurations&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;schema&lt;/code&gt; （配列）は&lt;a href=&quot;#options-schemas&quot;&gt;オプションを&lt;/a&gt;指定するため、ESLintは無効な&lt;a href=&quot;../user-guide/configuring#configuring-rules&quot;&gt;ルール構成を&lt;/a&gt;防止できます</target>
        </trans-unit>
        <trans-unit id="c1a4737446920852b8f131e6d7ae69b4a97c6ce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scopeManager&lt;/code&gt; - the &lt;a href=&quot;scope-manager-interface#scopemanager-interface&quot;&gt;ScopeManager&lt;/a&gt; object of the code.</source>
          <target state="translated">&lt;code&gt;scopeManager&lt;/code&gt; - &lt;a href=&quot;scope-manager-interface#scopemanager-interface&quot;&gt;ScopeManagerの&lt;/a&gt;コードのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3d54fadc18a6887da37fa8545a87192989177d0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scopeManager&lt;/code&gt; can be a &lt;a href=&quot;scope-manager-interface&quot;&gt;ScopeManager&lt;/a&gt; object. Custom parsers can use customized scope analysis for experimental/enhancement syntaxes. Default is the &lt;code&gt;ScopeManager&lt;/code&gt; object which is created by &lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;scopeManager&lt;/code&gt; は&lt;a href=&quot;scope-manager-interface&quot;&gt;ScopeManager&lt;/a&gt;オブジェクトにすることができます。カスタムパーサーは、実験的/拡張構文のカスタマイズされたスコープ分析を使用できます。デフォルトは&lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;によって作成される &lt;code&gt;ScopeManager&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="4f8e07cc12ee3b5466a33cc3a5a2d3366bec5503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;services&lt;/code&gt; can contain any parser-dependent services (such as type checkers for nodes). The value of the &lt;code&gt;services&lt;/code&gt; property is available to rules as &lt;code&gt;context.parserServices&lt;/code&gt;. Default is an empty object.</source>
          <target state="translated">&lt;code&gt;services&lt;/code&gt; は、パーサーに依存するサービス（ノードのタイプチェッカーなど）を含めることができます。 &lt;code&gt;services&lt;/code&gt; プロパティの値は、 &lt;code&gt;context.parserServices&lt;/code&gt; としてルールで使用できます。デフォルトは空のオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="dd02fb5dc08b8103fec9545d2aaeae2326a714d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serviceworker&lt;/code&gt; - Service Worker global variables.</source>
          <target state="translated">&lt;code&gt;serviceworker&lt;/code&gt; -Service Workerグローバル変数。</target>
        </trans-unit>
        <trans-unit id="b61808bb3f6746f75d108f844f3b4f545613c1d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setWithoutGet&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; will warn for setters without getters (Default &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;setWithoutGet&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、ゲッターなしのセッターが警告されます（デフォルトは &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c1098db1b64e3f105b8662a96224e640d047b839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;settings&lt;/code&gt; - the &lt;a href=&quot;../user-guide/configuring#adding-shared-settings&quot;&gt;shared settings&lt;/a&gt; from configuration.</source>
          <target state="translated">&lt;code&gt;settings&lt;/code&gt; - 構成からの&lt;a href=&quot;../user-guide/configuring#adding-shared-settings&quot;&gt;共有設定&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="78b464593816361428618f91b97e7892b603ac13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;settings&lt;/code&gt; - the &lt;code&gt;settings&lt;/code&gt; from configuration.</source>
          <target state="translated">&lt;code&gt;settings&lt;/code&gt; - &lt;code&gt;settings&lt;/code&gt; の構成から。</target>
        </trans-unit>
        <trans-unit id="ed495021db0964352f84b2956da94665584ccc71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;severity&lt;/code&gt; (&lt;code&gt;1 | 2&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;severity&lt;/code&gt; （ &lt;code&gt;1 | 2&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4b1505c7011f867593ec6ba31405c1d9d6786878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;severity&lt;/code&gt; - either 1 or 2, depending on your configuration.</source>
          <target state="translated">&lt;code&gt;severity&lt;/code&gt; -構成に応じて1または2。</target>
        </trans-unit>
        <trans-unit id="af2e074f2291e32a851386f6943c35c62691d3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared-node-browser&lt;/code&gt; - Globals common to both Node.js and Browser.</source>
          <target state="translated">&lt;code&gt;shared-node-browser&lt;/code&gt; -Node.jsとBrowserの両方に共通のグローバル。</target>
        </trans-unit>
        <trans-unit id="2384792d9b4129dc8e3cd5aa0f33c7583190dd2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shelljs&lt;/code&gt; - ShellJS global variables.</source>
          <target state="translated">&lt;code&gt;shelljs&lt;/code&gt; -ShellJSグローバル変数。</target>
        </trans-unit>
        <trans-unit id="9c777d667874248097ecd8cebf907c1cbe0cea9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;single&lt;/code&gt; - import single member.</source>
          <target state="translated">&lt;code&gt;single&lt;/code&gt; -単一のメンバーをインポートします。</target>
        </trans-unit>
        <trans-unit id="d3e16e146a19049305bd1d48672791e81e83586c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;single&lt;/code&gt; = import single member.</source>
          <target state="translated">&lt;code&gt;single&lt;/code&gt; =単一のメンバーをインポートします。</target>
        </trans-unit>
        <trans-unit id="ba208adf6cb6bfa32e72d4683ef7409155bfc511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;singleValue&lt;/code&gt; sets the spacing of a single value inside of square brackets of an array.</source>
          <target state="translated">&lt;code&gt;singleValue&lt;/code&gt; は、配列の角括弧内の単一の値の間隔を設定します。</target>
        </trans-unit>
        <trans-unit id="ffc60847f9ffed871ebb8e8a274977cb17506c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skip&lt;/code&gt; is a positive integer, the number of skipping tokens. If &lt;code&gt;filter&lt;/code&gt; option is given at the same time, it doesn't count filtered tokens as skipped.</source>
          <target state="translated">&lt;code&gt;skip&lt;/code&gt; は正の整数、スキップするトークンの数です。 &lt;code&gt;filter&lt;/code&gt; オプションが同時に指定された場合、フィルターされたトークンはスキップされたものとしてカウントされません。</target>
        </trans-unit>
        <trans-unit id="d5bffd4721137f0668214feafc3f619665634c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipOptions&lt;/code&gt; is an object which has 3 properties; &lt;code&gt;skip&lt;/code&gt;, &lt;code&gt;includeComments&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt;. Default is &lt;code&gt;{skip: 0, includeComments: false, filter: null}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;skipOptions&lt;/code&gt; は3つのプロパティを持つオブジェクトです。 &lt;code&gt;skip&lt;/code&gt; 、 &lt;code&gt;includeComments&lt;/code&gt; 、および &lt;code&gt;filter&lt;/code&gt; 。デフォルトは &lt;code&gt;{skip: 0, includeComments: false, filter: null}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e00a007f4c3ff0bb6d68e192c15a3b74a01ed24f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; (&lt;code&gt;string | undefined&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; （ &lt;code&gt;string | undefined&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e0e2ecc0406df38b1d1ccf1ecac779fa61ca0ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; - The source code for the given file. This property is omitted if this file has no errors/warnings or if the &lt;code&gt;output&lt;/code&gt; property is present.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; -指定されたファイルのソースコード。このファイルにエラー/警告がない場合、または &lt;code&gt;output&lt;/code&gt; プロパティが存在する場合、このプロパティは省略されます。</target>
        </trans-unit>
        <trans-unit id="8bab5102de076b0619a8aaab81f5b6bcd8aed840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sourceType&lt;/code&gt; - set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; if your code is in ECMAScript modules.</source>
          <target state="translated">&lt;code&gt;sourceType&lt;/code&gt; -コードがECMAScriptモジュールにある場合は、 &lt;code&gt;&quot;script&quot;&lt;/code&gt; （デフォルト）または &lt;code&gt;&quot;module&quot;&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="60fc3fa75a643143fec43ea1214963f7a3090f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spread&lt;/code&gt; - enable the &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-spread-operator&quot;&gt;spread operator&lt;/a&gt; for arrays</source>
          <target state="translated">&lt;code&gt;spread&lt;/code&gt; - 配列の&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-spread-operator&quot;&gt;スプレッド演算子&lt;/a&gt;を有効にする</target>
        </trans-unit>
        <trans-unit id="a74498937d9da6989b3826fb3f822c1a0e6d8ca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; - An object of the start location.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; -開始位置のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="562c297214c3079c86643ee742a66325060aefce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestion&lt;/code&gt; (boolean) specifies whether rules can return suggestions (defaults to false if omitted)</source>
          <target state="translated">&lt;code&gt;suggestion&lt;/code&gt; （ブール）は、ルールが提案を返すことができるかどうかを指定します（省略した場合のデフォルトはfalseです）</target>
        </trans-unit>
        <trans-unit id="7001382730594d9af640d23183d826935097fc76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestion&lt;/code&gt; - apply fixes to the code that improve it</source>
          <target state="translated">&lt;code&gt;suggestion&lt;/code&gt; -コードを修正して修正する</target>
        </trans-unit>
        <trans-unit id="a3841d6bcd3c378320e8c76cb8882a3092dfd451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestions&lt;/code&gt; (&lt;code&gt;{ desc: string; fix: EditInfo }[] | undefined&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;suggestions&lt;/code&gt; （ &lt;code&gt;{ desc: string; fix: EditInfo }[] | undefined&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="17e1bd8b89f512b7c4dcfb3986baec9ba3d73bd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestions&lt;/code&gt; (array): An array of objects with suggestion details to check. See &lt;a href=&quot;#testing-suggestions&quot;&gt;Testing Suggestions&lt;/a&gt; for details</source>
          <target state="translated">&lt;code&gt;suggestions&lt;/code&gt; （配列）：チェックする候補の詳細を含むオブジェクトの配列。詳細については、&lt;a href=&quot;#testing-suggestions&quot;&gt;テストの提案&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="01a9e2d4ed6fc53580ec1667bad9ffa002d21113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestions&lt;/code&gt; - an array of objects describing possible lint fixes for editors to programmatically enable (see details in the &lt;a href=&quot;working-with-rules#providing-suggestions&quot;&gt;Working with Rules docs&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;suggestions&lt;/code&gt; -編集者がプログラムで有効にできる可能性のあるlint修正を説明するオブジェクトの配列（詳細については、&lt;a href=&quot;working-with-rules#providing-suggestions&quot;&gt;「ルールの操作」ドキュメント&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="1318fab7248c2f4b39f6afd96e36cbc603af759a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;superInFunctions&lt;/code&gt; - enable &lt;code&gt;super&lt;/code&gt; references inside of functions</source>
          <target state="translated">&lt;code&gt;superInFunctions&lt;/code&gt; -関数内の &lt;code&gt;super&lt;/code&gt; 参照を有効にします</target>
        </trans-unit>
        <trans-unit id="7d7e78c26943268d03f5a72365c1eb3015043d08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateStrings&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read/#leanpub-auto-template-strings&quot;&gt;template strings&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;templateStrings&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read/#leanpub-auto-template-strings&quot;&gt;テンプレート文字列を&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="cbd54e9fd010557953cb7a0ef7ddae91972ffc35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tests&lt;/code&gt; - the main unit test folder</source>
          <target state="translated">&lt;code&gt;tests&lt;/code&gt; -メインユニットテストフォルダ</target>
        </trans-unit>
        <trans-unit id="b7eed2b6d45348b720e65fb837c1ff1203bc507f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; （ &lt;code&gt;string&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="08dcb9cef9adf8696d4c280589a87557cb5a4fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt; - the full text of the code being linted. Unicode BOM has been stripped from this text.</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; -コードの全文はLINTEDされています。Unicode BOMはこのテキストから削除されています。</target>
        </trans-unit>
        <trans-unit id="816e619a8bf7c281ba92a529d4c0642f418078aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt; ステートメントをスローします。</target>
        </trans-unit>
        <trans-unit id="b115b1a6144f77e6a5aa3d71ef3e7bf2f0dc3aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thrownSegments&lt;/code&gt; (&lt;code&gt;CodePathSegment[]&lt;/code&gt;) - The final segments which includes only thrown.</source>
          <target state="translated">&lt;code&gt;thrownSegments&lt;/code&gt; （ &lt;code&gt;CodePathSegment[]&lt;/code&gt; ）-スローのみを含む最終セグメント。</target>
        </trans-unit>
        <trans-unit id="7519d7afe92e54795456484fa28061d35ee23b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tokens&lt;/code&gt; (&lt;code&gt;Token[]&lt;/code&gt;) is the array of tokens which affect the behavior of programs. Arbitrary spaces can exist between tokens, so rules check the &lt;code&gt;Token#range&lt;/code&gt; to detect spaces between tokens. This must be sorted by &lt;code&gt;Token#range[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tokens&lt;/code&gt; （ &lt;code&gt;Token[]&lt;/code&gt; ）は、プログラムの動作に影響を与えるトークンの配列です。トークン間には任意のスペースが存在する可能性があるため、ルールは &lt;code&gt;Token#range&lt;/code&gt; をチェックして、トークン間のスペースを検出します。これは &lt;code&gt;Token#range[0]&lt;/code&gt; でソートする必要があります。</target>
        </trans-unit>
        <trans-unit id="85189a44e953487b618de67a3eb0fa859151682c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; (default) &lt;strong&gt;even if&lt;/strong&gt; the function or method does not have a &lt;code&gt;return&lt;/code&gt; statement (this option value does not apply to constructors)</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 関数またはメソッドに &lt;code&gt;return&lt;/code&gt; ステートメントがない&lt;strong&gt;場合でも&lt;/strong&gt;true（デフォルト）（このオプション値はコンストラクターには適用されません）</target>
        </trans-unit>
        <trans-unit id="398be4feb083902f29f8a7376d7e2c72ed38a618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; means there should be &lt;strong&gt;one or more spaces&lt;/strong&gt; and &lt;code&gt;false&lt;/code&gt; means &lt;strong&gt;no spaces&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; は&lt;strong&gt;1つ以上のスペース&lt;/strong&gt;が必要であることを意味し、 &lt;code&gt;false&lt;/code&gt; は&lt;strong&gt;スペースがない&lt;/strong&gt;ことを意味し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="164473cb1bdffa8a6ee69e081b7955161d6ce2fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; relaxes the rule and accepts parenthesis as a valid &quot;confusion-preventing&quot; syntax.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; はルールを緩和し、括弧を有効な「混乱防止」構文として受け入れます。</target>
        </trans-unit>
        <trans-unit id="c110fc8578280c6d8b4187919d51e6880ee72955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;: requires at least one space between the colon and the value in object literals.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ：コロンとオブジェクトリテラルの値の間に少なくとも1つのスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="32c944022b8d6ef52bb3b58ed7186232da7a278a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;: requires at least one space between the key and the colon in object literals.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; ：オブジェクトリテラルのキーとコロンの間に少なくとも1つのスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="ed51de71320a2a1ea9139a4f6dac950b128ae463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; (string) indicates the type of rule, which is one of &lt;code&gt;&quot;problem&quot;&lt;/code&gt;, &lt;code&gt;&quot;suggestion&quot;&lt;/code&gt;, or &lt;code&gt;&quot;layout&quot;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; （文字列）は、ルールのタイプを示します。これは、 &lt;code&gt;&quot;problem&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;suggestion&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;layout&quot;&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="ce2daaa0d1c129ced8360a8ffb8f746db1ac9b57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; (string): The type of the reported AST node</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; （文字列）：報告されたASTノードのタイプ</target>
        </trans-unit>
        <trans-unit id="3e25050e2f24c7a7b3cbb85b0c2364d188dc9091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; set to true will warn for variables used inside typeof check (Default false).</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; をtrueに設定すると、typeofチェック内で使用される変数が警告されます（デフォルトはfalse）。</target>
        </trans-unit>
        <trans-unit id="5fdcb0790e9c597696da493f71389a15eb982651" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined&lt;/code&gt;. In this case, loads the &lt;code&gt;&quot;stylish&quot;&lt;/code&gt; built-in formatter.</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 。この場合、 &lt;code&gt;&quot;stylish&quot;&lt;/code&gt; 組み込みフォーマッタをロードします。</target>
        </trans-unit>
        <trans-unit id="d447c639868163e0b6f3e7e087f1876514ec1b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unicodeCodePointEscapes&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read/#leanpub-auto-escaping-non-bmp-characters&quot;&gt;code point escapes&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;unicodeCodePointEscapes&lt;/code&gt; -&lt;a href=&quot;https://leanpub.com/understandinges6/read/#leanpub-auto-escaping-non-bmp-characters&quot;&gt;コードポイントエスケープを&lt;/a&gt;有効にする</target>
        </trans-unit>
        <trans-unit id="54b2b3dcae0bc3c1af73d9d3ed3faff1b71eb602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uninitialized&lt;/code&gt;: a declaration that is not initialized</source>
          <target state="translated">&lt;code&gt;uninitialized&lt;/code&gt; ：初期化されていない宣言</target>
        </trans-unit>
        <trans-unit id="b1b8fcea74b3c2723ae07350ad0c06fdf101540d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upper&lt;/code&gt; (&lt;code&gt;CodePath|null&lt;/code&gt;) - The code path of the upper function/global scope.</source>
          <target state="translated">&lt;code&gt;upper&lt;/code&gt; （ &lt;code&gt;CodePath|null&lt;/code&gt; ）-上位の関数/グローバルスコープのコードパス。</target>
        </trans-unit>
        <trans-unit id="98dbb83ef9d84404723cc01fc7df3377147e2149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; (string) specifies the URL at which the full documentation can be accessed</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; （文字列）は、完全なドキュメントにアクセスできるURLを指定します</target>
        </trans-unit>
        <trans-unit id="d46d96d622b96dc5814ed780900e9336cc76ccc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useEslintrc&lt;/code&gt; - Set to false to disable use of &lt;code&gt;.eslintrc&lt;/code&gt; files (default: true). Corresponds to &lt;code&gt;--no-eslintrc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;useEslintrc&lt;/code&gt; - &lt;code&gt;.eslintrc&lt;/code&gt; ファイルの使用を無効にするにはfalseに設定します（デフォルト：true）。 &lt;code&gt;--no-eslintrc&lt;/code&gt; に対応します。</target>
        </trans-unit>
        <trans-unit id="6ac85eaf2f1ba91a9f688fea05ef09cd71330015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;usedDeprecatedRules&lt;/code&gt; (&lt;code&gt;{ ruleId: string; replacedBy: string[] }[]&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;usedDeprecatedRules&lt;/code&gt; （ &lt;code&gt;{ ruleId: string; replacedBy: string[] }[]&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="bb54b2ac875e39c6a5c69fbe0057d558eb17a51a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; と &lt;code&gt;function&lt;/code&gt; 宣言</target>
        </trans-unit>
        <trans-unit id="788e44194d9b2e6f3dfac11727ce139725216787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations in the global.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; グローバルでのvar宣言。</target>
        </trans-unit>
        <trans-unit id="fd77df796b591255e602e82be482bd2c1aadcf02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.eslintExplicitGlobal&lt;/code&gt; (&lt;code&gt;boolean | undefined&lt;/code&gt;) ... If &lt;code&gt;true&lt;/code&gt;, this global variable was defined by a &lt;code&gt;/* globals */&lt;/code&gt; directive comment in the source code file.</source>
          <target state="translated">&lt;code&gt;variable.eslintExplicitGlobal&lt;/code&gt; （ &lt;code&gt;boolean | undefined&lt;/code&gt; ）... &lt;code&gt;true&lt;/code&gt; の場合、このグローバル変数は、ソースコードファイルの &lt;code&gt;/* globals */&lt;/code&gt; ディレクティブコメントによって定義されています。</target>
        </trans-unit>
        <trans-unit id="41cdf97481d87a8abdd46b934132dc88e0f6bd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.eslintExplicitGlobalComments&lt;/code&gt; (&lt;code&gt;Comment[] | undefined&lt;/code&gt;) ... The array of &lt;code&gt;/* globals */&lt;/code&gt; directive comments which defined this global variable in the source code file. This property is &lt;code&gt;undefined&lt;/code&gt; if there are no &lt;code&gt;/* globals */&lt;/code&gt; directive comments.</source>
          <target state="translated">&lt;code&gt;variable.eslintExplicitGlobalComments&lt;/code&gt; （ &lt;code&gt;Comment[] | undefined&lt;/code&gt; ）... このグローバル変数をソースコードファイルで定義した &lt;code&gt;/* globals */&lt;/code&gt; ディレクティブコメントの配列。 &lt;code&gt;/* globals */&lt;/code&gt; ディレクティブコメントがない場合、このプロパティは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8842bb6edd2d2a32b42577f5d2f9ff77c03dc964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.eslintImplicitGlobalSetting&lt;/code&gt; (&lt;code&gt;&quot;readonly&quot; | &quot;writable&quot; | undefined&lt;/code&gt;) ... The configured value in config files. This can be different from &lt;code&gt;variable.writeable&lt;/code&gt; if there are &lt;code&gt;/* globals */&lt;/code&gt; directive comments.</source>
          <target state="translated">&lt;code&gt;variable.eslintImplicitGlobalSetting&lt;/code&gt; （ &lt;code&gt;&quot;readonly&quot; | &quot;writable&quot; | undefined&lt;/code&gt; ）...設定ファイルの設定値。 &lt;code&gt;/* globals */&lt;/code&gt; ディレクティブコメントがある場合、これは &lt;code&gt;variable.writeable&lt;/code&gt; とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="8ab0a21f7c02edcdbaf94c592f26a9debce3a664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.writeable&lt;/code&gt; (&lt;code&gt;boolean | undefined&lt;/code&gt;) ... If &lt;code&gt;true&lt;/code&gt;, this global variable can be assigned arbitrary value. If &lt;code&gt;false&lt;/code&gt;, this global variable is read-only.</source>
          <target state="translated">&lt;code&gt;variable.writeable&lt;/code&gt; （ &lt;code&gt;boolean | undefined&lt;/code&gt; ）... &lt;code&gt;true&lt;/code&gt; の場合、このグローバル変数には任意の値を割り当てることができます。 &lt;code&gt;false&lt;/code&gt; の場合、このグローバル変数は読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="5b8b2e84ad41c0b330735ef613256ce337ff37a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variables&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;) - This flag determines whether or not the rule checks variable declarations in upper scopes. If this is &lt;code&gt;true&lt;/code&gt;, the rule warns every reference to a variable before the variable declaration. Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;variables&lt;/code&gt; （ &lt;code&gt;boolean&lt;/code&gt; ）-このフラグは、ルールが上位スコープの変数宣言をチェックするかどうかを決定します。これが &lt;code&gt;true&lt;/code&gt; の場合、ルールは変数宣言の前に変数へのすべての参照を警告します。それ以外の場合、宣言が上位スコープにある場合、ルールは参照を無視しますが、宣言と同じスコープにある場合、参照を報告します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9ad405cae17dce59bbce81dd34c8a9459d0da26e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visitorKeys&lt;/code&gt; - the visitor keys to traverse this AST.</source>
          <target state="translated">&lt;code&gt;visitorKeys&lt;/code&gt; -このASTをトラバースするための訪問者キー。</target>
        </trans-unit>
        <trans-unit id="32c0307db470eaeab159b0b85167c1ef69de6382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visitorKeys&lt;/code&gt; can be an object to customize AST traversal. The keys of the object are the type of AST nodes. Each value is an array of the property names which should be traversed. Default is &lt;a href=&quot;https://github.com/eslint/eslint-visitor-keys#evkkeys&quot;&gt;KEYS of &lt;code&gt;eslint-visitor-keys&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;visitorKeys&lt;/code&gt; は、ASTトラバーサルをカスタマイズするオブジェクトにすることができます。オブジェクトのキーは、ASTノードのタイプです。各値は、トラバースする必要があるプロパティ名の配列です。デフォルトは&lt;a href=&quot;https://github.com/eslint/eslint-visitor-keys#evkkeys&quot;&gt; &lt;code&gt;eslint-visitor-keys&lt;/code&gt; の&lt;/a&gt; KEYSです。</target>
        </trans-unit>
        <trans-unit id="38a5b477d008fa55f98a37d2b9c603d027c9b335" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;warningCount&lt;/code&gt; (&lt;code&gt;number&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;warningCount&lt;/code&gt; （ &lt;code&gt;number&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="45370b8098f934ae8cbddafa379e59a2d8b1a96b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;webextensions&lt;/code&gt; - WebExtensions globals.</source>
          <target state="translated">&lt;code&gt;webextensions&lt;/code&gt; -WebExtensionsグローバル。</target>
        </trans-unit>
        <trans-unit id="e8318d7f2494338ee26e4f979f86bef08671fb6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;words&lt;/code&gt; - applies to unary word operators such as: &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;words&lt;/code&gt; ： -のような単項ワード事業者に適用される &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;typeof&lt;/code&gt; を、 &lt;code&gt;void&lt;/code&gt; 、 &lt;code&gt;yield&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8969774c77043e144aff4bf62101b043cce636d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;worker&lt;/code&gt; - web workers global variables.</source>
          <target state="translated">&lt;code&gt;worker&lt;/code&gt; -ウェブワーカーのグローバル変数。</target>
        </trans-unit>
        <trans-unit id="300e058b27197d2fd30811e6a51b5c26466d8375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;allowNamedFunctions&quot;: true }&lt;/code&gt;&lt;strong&gt;will not&lt;/strong&gt; flag the following example:</source>
          <target state="translated">&lt;code&gt;{ &quot;allowNamedFunctions&quot;: true }&lt;/code&gt; &lt;strong&gt;は&lt;/strong&gt;、次の例にフラグを立て&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="be93815ae6cace6c54c18967749e32ebc2ca2fb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;allowTemplateLiterals&quot;: false }&lt;/code&gt; will not disallow the usage of all template literals. If you want to forbid any instance of template literals, use &lt;a href=&quot;no-restricted-syntax&quot;&gt;no-restricted-syntax&lt;/a&gt; and target the &lt;code&gt;TemplateLiteral&lt;/code&gt; selector.</source>
          <target state="translated">&lt;code&gt;{ &quot;allowTemplateLiterals&quot;: false }&lt;/code&gt; は、すべてのテンプレートリテラルの使用を許可しません。テンプレートリテラルのインスタンスを禁止する場合は、&lt;a href=&quot;no-restricted-syntax&quot;&gt;no-restricted-syntax&lt;/a&gt;を使用して、 &lt;code&gt;TemplateLiteral&lt;/code&gt; セレクターをターゲットにします。</target>
        </trans-unit>
        <trans-unit id="26aa7eb76c77f36a5b4eef1017c7a9d4f09b8d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;allowUnboundThis&quot;: false }&lt;/code&gt;&lt;strong&gt;will&lt;/strong&gt; flag the following examples:</source>
          <target state="translated">&lt;code&gt;{ &quot;allowUnboundThis&quot;: false }&lt;/code&gt; &lt;strong&gt;は&lt;/strong&gt;、次の例にフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="85e2de4f7aaa1280b404b80f6d67d6de16259c8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;minItems&quot;: value }&lt;/code&gt; requires linebreaks inside function parentheses if the number of parameters/arguments is at least &lt;code&gt;value&lt;/code&gt;. Otherwise, it disallows linebreaks.</source>
          <target state="translated">&lt;code&gt;{ &quot;minItems&quot;: value }&lt;/code&gt; パラメータ/引数の数が少なくとも &lt;code&gt;value&lt;/code&gt; の場合、関数の括弧内に改行が必要です。それ以外の場合、改行は許可されません。</target>
        </trans-unit>
        <trans-unit id="5bcbf5b0912aba565be18b51eb0ba63df89c59da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: false}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;neither&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: false}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;neither&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7736fafa7d8c87cab4049ac35addef0742b055ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;after&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;after&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd01b6771ae8b10b383444ed75ec0191ae1708e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;before&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;before&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24ec96246a35f0fb25934ca1f382fdf207a71ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: true}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;both&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: true}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;both&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="428a16477e45de88f5411d14063f1b262bf4c21e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.eslintrc.*&lt;/code&gt; files behave similarly to regular configuration files, with some exceptions:</source>
          <target state="translated">&lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルは、いくつかの例外を除いて、通常の構成ファイルと同様に動作します。</target>
        </trans-unit>
        <trans-unit id="6579dd2d87db720cf5022eece35bcbc5152bc405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.eslintrc.*&lt;/code&gt; files load plugins from &lt;code&gt;$CWD/node_modules&lt;/code&gt; by default in order to identify plugins uniquely. If you want to use plugins with &lt;code&gt;~/.eslintrc.*&lt;/code&gt; files, plugins must be installed locally per project. Alternatively, you can use the &lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt;&lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; CLI option&lt;/a&gt; to change the location from which ESLint loads plugins.</source>
          <target state="translated">&lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルは、プラグインを一意に識別するために、デフォルトで &lt;code&gt;$CWD/node_modules&lt;/code&gt; からプラグインをロードします。 &lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルでプラグインを使用する場合は、プロジェクトごとにプラグインをローカルにインストールする必要があります。または、&lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt; &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; CLIオプション&lt;/a&gt;を使用して、ESLintがプラグインをロードする場所を変更できます。</target>
        </trans-unit>
        <trans-unit id="b95ef68d43736af87f87d494b9aa35117f6abd6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.eslintrc.*&lt;/code&gt; files load shareable configs and custom parsers from &lt;code&gt;~/node_modules/&lt;/code&gt; &amp;ndash; similarly to &lt;code&gt;require()&lt;/code&gt; &amp;ndash; in the user's home directory. Please note that it doesn't load global-installed packages.</source>
          <target state="translated">&lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルは、ユーザーのホームディレクトリの &lt;code&gt;~/node_modules/&lt;/code&gt; から、requireable &lt;code&gt;require()&lt;/code&gt; と同様に、共有可能な構成とカスタムパーサーをロードします。グローバルにインストールされたパッケージをロードしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7e650bf2ed65d3b6857b4caa24b44e2304666d78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/&lt;/code&gt; refers to &lt;a href=&quot;https://nodejs.org/api/os.html#os_os_homedir&quot;&gt;the home directory of the current user on your preferred operating system&lt;/a&gt;. The personal configuration file being referred to here is &lt;code&gt;~/.eslintrc.*&lt;/code&gt; file, which is currently handled differently than other configuration files.</source>
          <target state="translated">&lt;code&gt;~/&lt;/code&gt; は&lt;a href=&quot;https://nodejs.org/api/os.html#os_os_homedir&quot;&gt;、使用するオペレーティングシステム上の現在のユーザーのホームディレクトリを&lt;/a&gt;指します。ここで参照されている個人設定ファイルは &lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルで、現在他の設定ファイルとは異なる方法で処理されています。</target>
        </trans-unit>
        <trans-unit id="dde79d0dfe135bbe249b7430587f5c88f439ddb2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false negatives&lt;/em&gt; when this rule reports correct code, but the program calls the callback more than one time (which is incorrect behavior)</source>
          <target state="translated">&lt;em&gt;偽陰性&lt;/em&gt;このルールが正しいコードを報告しますが、プログラムはより多くの（不正な動作である）1時間よりもコールバックを呼び出し</target>
        </trans-unit>
        <trans-unit id="51dc182038cc3d39feed641c04dea65d51b78d8f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false positives&lt;/em&gt; when this rule reports incorrect code, but the program calls the callback only one time (which is correct behavior)</source>
          <target state="translated">&lt;em&gt;偽陽性&lt;/em&gt;このルールが正しくないコードを報告しますが、プログラムが（正しい動作です）、コールバックに一度だけ呼び出します</target>
        </trans-unit>
        <trans-unit id="f95a880d3b307bb016a078ab0e2bc85db5ee24a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A character with Emoji modifiers:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;絵文字修飾子を持つキャラクター：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15e0d475752ce95cade194ae748f9c3ca1809f39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A character with combining characters:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;結合文字を持つ文字：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0e3fab0654c27190e3d2eaab45ad1a04ef74343b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A pair of regional indicator symbols:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一対の地域インジケーター記号：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a49a6d1dbffb69c2c9ac935a8c9954a3fcd707b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A surrogate pair without Unicode flag:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Unicodeフラグのないサロゲートペア：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="607fdb8cf66564d700da735af85d57e55ad73a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Atomic.&lt;/strong&gt; Rules must function completely on their own. Rules are expressly forbidden from knowing about the state or presence of other rules.</source>
          <target state="translated">&lt;strong&gt;原子。&lt;/strong&gt;ルールは完全に機能する必要があります。ルールは、他のルールの状態または存在について知ることを明示的に禁止されています。</target>
        </trans-unit>
        <trans-unit id="b9a077df30f5baa6d17cb6042cbd8c3773fd3bb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bugs&lt;/strong&gt; - problems with the project are actively affecting users. We want to get these resolved as quickly as possible.</source>
          <target state="translated">&lt;strong&gt;バグ&lt;/strong&gt; -プロジェクトの問題が積極的にユーザーに影響を与えています。これらをできるだけ早く解決したいと考えています。</target>
        </trans-unit>
        <trans-unit id="fba6712942524dcf51cb8aee2c59d1ed42e073a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Characters that ZWJ joins:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ZWJが参加する文字：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d08dc10fd87a158f990e8ab8a386b673f6b33bc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuration Comments&lt;/strong&gt; - use JavaScript comments to embed configuration information directly into a file.</source>
          <target state="translated">&lt;strong&gt;構成コメント&lt;/strong&gt; -JavaScriptコメントを使用して、構成情報をファイルに直接埋め込みます。</target>
        </trans-unit>
        <trans-unit id="14e063069850efd0f1fddb86fa1f07284d1ce23f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuration File&lt;/strong&gt; - In JSCS, the configuration file is &lt;code&gt;.jscsrc&lt;/code&gt;, &lt;code&gt;.jscsrc.json&lt;/code&gt;, &lt;code&gt;.jscsrc.yaml&lt;/code&gt;, or &lt;code&gt;.jscsrs.js&lt;/code&gt;. In ESLint, the configuration file can be &lt;code&gt;.eslintrc.json&lt;/code&gt;, &lt;code&gt;.eslintrc.yml&lt;/code&gt;, &lt;code&gt;.eslintrc.yaml&lt;/code&gt;, or &lt;code&gt;.eslintrc.js&lt;/code&gt; (there is also a deprecated &lt;code&gt;.eslintrc&lt;/code&gt; file format).</source>
          <target state="translated">&lt;strong&gt;構成ファイル&lt;/strong&gt; &lt;code&gt;.jscsrc&lt;/code&gt; では、構成ファイルは.jscsrc、 &lt;code&gt;.jscsrc.json&lt;/code&gt; 、 &lt;code&gt;.jscsrc.yaml&lt;/code&gt; 、または &lt;code&gt;.jscsrs.js&lt;/code&gt; です。 ESLintでは、構成ファイルは &lt;code&gt;.eslintrc.json&lt;/code&gt; 、 &lt;code&gt;.eslintrc.yml&lt;/code&gt; 、 &lt;code&gt;.eslintrc.yaml&lt;/code&gt; 、または &lt;code&gt;.eslintrc.js&lt;/code&gt; です（非推奨の &lt;code&gt;.eslintrc&lt;/code&gt; ファイル形式もあります）。</target>
        </trans-unit>
        <trans-unit id="7e7c60fdb40941a7c04650e930ca4ef5a27a43b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuration Files&lt;/strong&gt; - use a JavaScript, JSON or YAML file to specify configuration information for an entire directory and all of its subdirectories. This can be in the form of an &lt;a href=&quot;#configuration-file-formats&quot;&gt;&lt;code&gt;.eslintrc.*&lt;/code&gt;&lt;/a&gt; file or an &lt;code&gt;eslintConfig&lt;/code&gt; field in a &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file, both of which ESLint will look for and read automatically, or you can specify a configuration file on the &lt;a href=&quot;command-line-interface&quot;&gt;command line&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;構成ファイル&lt;/strong&gt; -JavaScript、JSON、またはYAMLファイルを使用して、ディレクトリ全体とそのすべてのサブディレクトリの構成情報を指定します。これは、&lt;a href=&quot;#configuration-file-formats&quot;&gt; &lt;code&gt;.eslintrc.*&lt;/code&gt; &lt;/a&gt;ファイルまたは&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;ファイルの &lt;code&gt;eslintConfig&lt;/code&gt; フィールドの形式にすることができます。どちらもESLintが自動的に検索して読み取るか、&lt;a href=&quot;command-line-interface&quot;&gt;コマンドラインで&lt;/a&gt;構成ファイルを指定できます。</target>
        </trans-unit>
        <trans-unit id="8e8a5f8e101664426e49a35befa2755eaff5094c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Correct&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Correct&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="e6350cf7d6acc659eaca20917c1ca6ac8fd6666e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Instead of using this option use &quot;always&quot; and pass a &quot;null&quot; option property with value &quot;ignore&quot;. This will tell ESLint to always enforce strict equality except when comparing with the &lt;code&gt;null&lt;/code&gt; literal.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;このオプションを使用する代わりに「always」を使用し、値「ignore」を使用して「null」オプションプロパティを渡します。これにより、ESLintは、 &lt;code&gt;null&lt;/code&gt; リテラルと比較する場合を除いて、常に厳密な等価性を強制します。</target>
        </trans-unit>
        <trans-unit id="e1fdd0ebbb5f72ace445a12113655c6a65804e0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The following methods on the &lt;code&gt;context&lt;/code&gt; object are deprecated. Please use the corresponding methods on &lt;code&gt;SourceCode&lt;/code&gt; instead:</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt; &lt;code&gt;context&lt;/code&gt; オブジェクトの以下のメソッドは非推奨です。代わりに、 &lt;code&gt;SourceCode&lt;/code&gt; の対応するメソッドを使用してください：</target>
        </trans-unit>
        <trans-unit id="c26c1066ca9b4bcf09dcd1520419ccd5123d266c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The object property &lt;code&gt;maximum&lt;/code&gt; is deprecated; please use the object property &lt;code&gt;max&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;オブジェクトプロパティ &lt;code&gt;maximum&lt;/code&gt; は非推奨です。代わりに、オブジェクトプロパティ &lt;code&gt;max&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="07808693d351c1bf3961179bc77d8228df0bcab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The options &lt;code&gt;&quot;unix&quot;&lt;/code&gt; and &lt;code&gt;&quot;windows&quot;&lt;/code&gt; are deprecated. If you need to enforce a specific linebreak style, use this rule in conjunction with &lt;code&gt;linebreak-style&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;オプション &lt;code&gt;&quot;unix&quot;&lt;/code&gt; および &lt;code&gt;&quot;windows&quot;&lt;/code&gt; は非推奨です。特定の改行スタイルを適用する必要がある場合は、このルールを &lt;code&gt;linebreak-style&lt;/code&gt; と組み合わせて使用​​します。</target>
        </trans-unit>
        <trans-unit id="f69cd7a86dfd50efb7075779240a06f30d11a5d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the object property &lt;code&gt;applyDefaultPatterns&lt;/code&gt; is deprecated. Please use the property &lt;code&gt;applyDefaultIgnorePatterns&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;オブジェクトプロパティ &lt;code&gt;applyDefaultPatterns&lt;/code&gt; は非推奨です。代わりに、 &lt;code&gt;applyDefaultIgnorePatterns&lt;/code&gt; プロパティを使用してください。</target>
        </trans-unit>
        <trans-unit id="121d74800370c721111cd7b62fec7a4c3526b7a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the object property &lt;code&gt;maximum&lt;/code&gt; is deprecated. Please use the property &lt;code&gt;max&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;オブジェクトプロパティの &lt;code&gt;maximum&lt;/code&gt; は非推奨です。代わりにプロパティ &lt;code&gt;max&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="d6318908ad3986add6a5e1e373df74f506549530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; - use &lt;code&gt;.eslintrc&lt;/code&gt;, which can be either JSON or YAML.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt; &lt;code&gt;.eslintrc&lt;/code&gt; またはYAMLのいずれかである.eslintrcを使用します。</target>
        </trans-unit>
        <trans-unit id="6a411cecdb230e7393693a1f9d6fe3493cafaa02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;: The object property &lt;code&gt;avoid-escape&lt;/code&gt; is deprecated; please use the object property &lt;code&gt;avoidEscape&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt;：オブジェクトプロパティの &lt;code&gt;avoid-escape&lt;/code&gt; は非推奨です。代わりに、オブジェクトプロパティ &lt;code&gt;avoidEscape&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="9c318c6dcba96b5fe81622562c4653a966b5f5d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; All scopes.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;すべてのスコープ。</target>
        </trans-unit>
        <trans-unit id="1d63d07318ddd8f8176cae489ff8e9f2a3d7d8e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Get the scope of a given AST node. The gotten scope's &lt;code&gt;block&lt;/code&gt; property is the node. This method never returns &lt;code&gt;function-expression-name&lt;/code&gt; scope. If the node does not have their scope, this returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;指定されたASTノードのスコープを取得します。取得したスコープの &lt;code&gt;block&lt;/code&gt; プロパティはノードです。このメソッドが &lt;code&gt;function-expression-name&lt;/code&gt; スコープを返すことはありません。ノードにスコープがない場合、これは &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2502e7c0b0ca04673f7399d46d8f900e247c4a30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Get the scopes of a given AST node. The gotten scopes' &lt;code&gt;block&lt;/code&gt; property is the node. If the node does not have their scope, this returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;指定されたASTノードのスコープを取得します。取得したスコープの &lt;code&gt;block&lt;/code&gt; プロパティはノードです。ノードにスコープがない場合、これは &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d363b3e91012022cd70cf852479f174a720188a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Get the variables that a given AST node defines. The gotten variables' &lt;code&gt;def[].node&lt;/code&gt;/&lt;code&gt;def[].parent&lt;/code&gt; property is the node. If the node does not define any variable, this returns an empty array.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;指定されたASTノードが定義する変数を取得します。取得した変数の &lt;code&gt;def[].node&lt;/code&gt; / &lt;code&gt;def[].parent&lt;/code&gt; プロパティはノードです。ノードが変数を定義していない場合、これは空の配列を返します。</target>
        </trans-unit>
        <trans-unit id="1d444ab979de6d99d2f0cd11b618cbf8e2ccfb36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Returns &lt;code&gt;!this.dynamic&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;!this.dynamic&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="07297c7d844bcb4b55217d7bc274ac45715324d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Returns &lt;code&gt;this.references.find(r =&amp;gt; r.identifier === node)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;this.references.find(r =&amp;gt; r.identifier === node)&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="007187a08867fb25c108f3639d15a1bea0e1d62a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Returns &lt;code&gt;this.thisFound&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;this.thisFound&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8ad9c69bb1dc7f531761819279c2fdd71461cf98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Identifier&lt;/code&gt; node of this definition.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この定義の &lt;code&gt;Identifier&lt;/code&gt; ノード。</target>
        </trans-unit>
        <trans-unit id="1e87c3a915049bb9ad1e911500554f02ce7b30ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Identifier&lt;/code&gt; node of this reference.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照の &lt;code&gt;Identifier&lt;/code&gt; ノード。</target>
        </trans-unit>
        <trans-unit id="79543808d3d3ad8c145b7efc175082ee5b89fcdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Scope&lt;/code&gt; object that this reference is on.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;Scope&lt;/code&gt; この参照が上にあるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5353454d32fb26fa1a5e0e93c5ba931c946f60c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Variable&lt;/code&gt; object that this reference refers. If such variable was not defined, this is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;Variable&lt;/code&gt; この参照が参照するオブジェクト。そのような変数が定義されていない場合、これは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5d1991cac1575dce694faec96e6d6752ac18ce19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;partial&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;partial&lt;/code&gt; フラグ。</target>
        </trans-unit>
        <trans-unit id="5bfab1b4bccd169f5b14893af242e854123548d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;stack&lt;/code&gt; flag. (I'm not sure what this means.)</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;stack&lt;/code&gt; フラグ。（これが何を意味するのか分かりません。）</target>
        </trans-unit>
        <trans-unit id="e9ebdac4b754584d17fe9ec564d80fb1092bcd79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;tainted&lt;/code&gt; flag. (always &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;tainted&lt;/code&gt; フラグ。（常に &lt;code&gt;false&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c932e741f1645e5cf3fa3ca9cd763120e9447732" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The AST node which created this scope.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープを作成したASTノード。</target>
        </trans-unit>
        <trans-unit id="038d84337b46b25fee8f60dd2b0197373fa0a772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The ASTNode object which is right-hand side.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;右側にあるASTNodeオブジェクト。</target>
        </trans-unit>
        <trans-unit id="c9a11ff5c2342225e6f07d27d0bc2fe49c905df0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of &lt;code&gt;Identifier&lt;/code&gt; nodes which define this variable. If this variable is redeclared, this array includes two or more nodes.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この変数を定義する &lt;code&gt;Identifier&lt;/code&gt; ノードの配列。この変数が再宣言された場合、この配列には2つ以上のノードが含まれます。</target>
        </trans-unit>
        <trans-unit id="0e083b8ba70a3a809f455f303d81a522e42a59ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of all references on this scope. This does not include references in child scopes.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープのすべての参照の配列。これには、子スコープの参照は含まれません。</target>
        </trans-unit>
        <trans-unit id="8183238f4a04b2bad9ffb943be5777c9a692637f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of all variables which are defined on this scope. This does not include variables which are defined in child scopes.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープで定義されているすべての変数の配列。これには、子スコープで定義されている変数は含まれません。</target>
        </trans-unit>
        <trans-unit id="236d1509a87098d65558b21013cf936514b86213" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of child scopes. This does not include grandchild scopes.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;子スコープの配列。これには孫スコープは含まれません。</target>
        </trans-unit>
        <trans-unit id="6a37c4e52b7a84f2d803647b07615988738adb15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of references which could not be resolved in this scope.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープで解決できなかった参照の配列。</target>
        </trans-unit>
        <trans-unit id="30653239f2d91028d647f1ad7162ffeef9df6f30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of the definitions of this variable.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この変数の定義の配列。</target>
        </trans-unit>
        <trans-unit id="305a2395e825dbde278bed861652d19721e0cfad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of the references of this variable.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この変数の参照の配列。</target>
        </trans-unit>
        <trans-unit id="58fb1488df081af5b68cee135690c98d00735f21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The enclosing node of the name.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;名前を囲​​むノード。</target>
        </trans-unit>
        <trans-unit id="d8ed0a2d527f28125603b4b3b5c8d394d591f8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The enclosing statement node of the name.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;名前を囲​​むステートメントノード。</target>
        </trans-unit>
        <trans-unit id="be4a767ff967dddfb8222aad16461f1910ee0ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The index in the declaration statement.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;宣言ステートメントのインデックス。</target>
        </trans-unit>
        <trans-unit id="df195fad0ad68009fb0edecdec164d3a68408d4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The kind of the declaration statement.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;宣言ステートメントの種類。</target>
        </trans-unit>
        <trans-unit id="df67f02c6460a8e894f70afd9828d8ac31cfb053" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The map from variable names to &lt;code&gt;tainted&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;変数名から &lt;code&gt;tainted&lt;/code&gt; フラグへのマップ。</target>
        </trans-unit>
        <trans-unit id="1f4b8428bb328cbc24d4974827b464982c783b86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The map from variable names to variable objects.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;変数名から変数オブジェクトへのマップ。</target>
        </trans-unit>
        <trans-unit id="39e8bc09ba6281bf3aba9eda39636214bc5a8786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The name of this variable.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この変数の名前。</target>
        </trans-unit>
        <trans-unit id="fb4a7a61464fd8acd801b1f5b8c015729f2ac5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The parent scope. If this is the global scope then this property is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;親スコープ。これがグローバルスコープの場合、このプロパティは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9aca2fa95361a163dcc6e5d4f9ac2f5dea5fa996" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The root scope.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;ルートスコープ。</target>
        </trans-unit>
        <trans-unit id="c551be088c876b85479e2dd36895051838e06f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The scope which hosts variables which are defined by &lt;code&gt;var&lt;/code&gt; declarations.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;var&lt;/code&gt; 宣言で定義された変数をホストするスコープ。</target>
        </trans-unit>
        <trans-unit id="20468fe1f2bfbcc9f2e03707a8d0aa6a6f82e303" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The type of this definition. One of &lt;code&gt;&quot;CatchClause&quot;&lt;/code&gt;, &lt;code&gt;&quot;ClassName&quot;&lt;/code&gt;, &lt;code&gt;&quot;FunctionName&quot;&lt;/code&gt;, &lt;code&gt;&quot;ImplicitGlobalVariable&quot;&lt;/code&gt;, &lt;code&gt;&quot;ImportBinding&quot;&lt;/code&gt;, &lt;code&gt;&quot;Parameter&quot;&lt;/code&gt;, and &lt;code&gt;&quot;Variable&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この定義のタイプ。一つ &lt;code&gt;&quot;CatchClause&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ClassName&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;FunctionName&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ImplicitGlobalVariable&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ImportBinding&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Parameter&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;Variable&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb7b205ac1c4de3b9fcd54fcf2f952a239cd24e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The type of this scope. This is one of &lt;code&gt;&quot;block&quot;&lt;/code&gt;, &lt;code&gt;&quot;catch&quot;&lt;/code&gt;, &lt;code&gt;&quot;class&quot;&lt;/code&gt;, &lt;code&gt;&quot;for&quot;&lt;/code&gt;, &lt;code&gt;&quot;function&quot;&lt;/code&gt;, &lt;code&gt;&quot;function-expression-name&quot;&lt;/code&gt;, &lt;code&gt;&quot;global&quot;&lt;/code&gt;, &lt;code&gt;&quot;module&quot;&lt;/code&gt;, &lt;code&gt;&quot;switch&quot;&lt;/code&gt;, &lt;code&gt;&quot;with&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープのタイプ。これは、 &lt;code&gt;&quot;block&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;catch&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;class&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;for&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;function&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;function-expression-name&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;global&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;module&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;switch&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;with&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a58c91eaa02a13f4df54db1d615c3e064e860983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;1&lt;/code&gt; is reading, &lt;code&gt;2&lt;/code&gt; is writing, &lt;code&gt;3&lt;/code&gt; is reading/writing.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt; &lt;code&gt;1&lt;/code&gt; は読み取り、 &lt;code&gt;2&lt;/code&gt; は書き込み、 &lt;code&gt;3&lt;/code&gt; は読み取り/書き込みです。</target>
        </trans-unit>
        <trans-unit id="4cee383e7e07773e4a8112bf2c0a92da494d5121" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if a given name is used in variable names or reference names.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;指定された名前が変数名または参照名で使用されている場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7894caac9879d2f195f04eb7f0745ebba5f4240d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this is a &lt;code&gt;&quot;function&quot;&lt;/code&gt; scope which has used &lt;code&gt;arguments&lt;/code&gt; variable.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;これが &lt;code&gt;arguments&lt;/code&gt; 変数を使用した &lt;code&gt;&quot;function&quot;&lt;/code&gt; スコープの場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36605474d8f010edf63b7f0fe28ab85323907ba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this program is module.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このプログラムがモジュールの場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14b0b94037409dffb029ff1840fef7c70819c156" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this program is strict mode implicitly. I.e., &lt;code&gt;options.impliedStrict === true&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このプログラムが暗黙的に厳密モードの場合は &lt;code&gt;true&lt;/code&gt; 。つまり、 &lt;code&gt;options.impliedStrict === true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1053cc9be0aa9bb51f7f33ef4d47b041c266a14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this program supports strict mode. I.e., &lt;code&gt;options.ecmaVersion &amp;gt;= 5&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このプログラムがストリクトモードをサポートしている場合は &lt;code&gt;true&lt;/code&gt; 。つまり、 &lt;code&gt;options.ecmaVersion &amp;gt;= 5&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8268f6830b81c4adb5dd52396c3c0d3dd9a35f46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is reading and writing.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照が読み取りおよび書き込みの場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5d2b3adc78b6d3caf6e7aba6afd631e3ab0da6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is reading but not writing.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照が読み取りではあるが書き込みではない場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30a6f8f425d563354b1f0baf37d6b5825edd72c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is reading.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照が読み取りを行う場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b59b18e6bff230841784342f7042d2b53154dee0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is resolved statically.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照が静的に解決される場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd20eb7a275e9c8ab5581bbc0c1c586f64331ecd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is writing but not reading.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照が書き込みではあるが読み取りではない場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1aba86f1bf531bae103ec9e3ff7bc4a4d3f7206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is writing.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この参照が書き込みで &lt;code&gt;true&lt;/code&gt; 場合はtrue。</target>
        </trans-unit>
        <trans-unit id="7a2ddd3a18cc341e823438611f09b6a959d5574e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope contains &lt;code&gt;eval()&lt;/code&gt; invocations.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープに &lt;code&gt;eval()&lt;/code&gt; 呼び出しが含まれている場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a60b7f1e92c2caedd38861e969bb95ecd0ed131" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope contains &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープに &lt;code&gt;this&lt;/code&gt; が含まれている場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f506f32e92524b511ad88d3d8608cc02ae497b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope is &lt;code&gt;&quot;function-expression-name&quot;&lt;/code&gt; scope.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープが &lt;code&gt;&quot;function-expression-name&quot;&lt;/code&gt; スコープの場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b19a491137b8c9b3b56cd0ed75d02e46d6e52eb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope is dynamic. I.e., the type of this scope is &lt;code&gt;&quot;global&quot;&lt;/code&gt; or &lt;code&gt;&quot;with&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープが動的で &lt;code&gt;true&lt;/code&gt; 場合はtrue。つまり、このスコープのタイプは &lt;code&gt;&quot;global&quot;&lt;/code&gt; または &lt;code&gt;&quot;with&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dd78455aefa04ad7b2c67b07777658d01b7730cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope is strict mode.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;このスコープがストリクトモードの場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a395bb54efa49db4c3ce533e066f657b8faec55e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this writing reference is a variable initializer or a default value.</source>
          <target state="translated">&lt;strong&gt;説明：&lt;/strong&gt;この書き込み参照が変数初期化子またはデフォルト値である場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d583721fdee9eda617809d6d5f0932df533809dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Description&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98d77b848a0abc76e21193a499c216a7c96c4336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Documentation&lt;/strong&gt; - documentation issues are a type of bug in that they actively affect current users. As such, we want to address documentation issues as quickly as possible.</source>
          <target state="translated">&lt;strong&gt;ドキュメンテーション&lt;/strong&gt; -ドキュメンテーションの問題は、現在のユーザーに積極的に影響を与えるタイプのバグです。そのため、ドキュメントの問題にできる限り迅速に対処したいと考えています。</target>
        </trans-unit>
        <trans-unit id="cd8c901162291381cc0db68583bdf9faf0b01cf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ESLint Comment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ESLintコメント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b02977e23c10e3c214a0ce10d03e5be4439204f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ESLint Shareable Config&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ESLint共有可能構成&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb69c54f5fa4ad2445922301b88b27b35d084398" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enhancements&lt;/strong&gt; - requested improvements for existing functionality.</source>
          <target state="translated">&lt;strong&gt;機能強化&lt;/strong&gt; -既存の機能の改善が要求されました。</target>
        </trans-unit>
        <trans-unit id="c797ac32aa4127046dcb874228b7074f7a5c0aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Environments&lt;/strong&gt; - which environments your script is designed to run in. Each environment brings with it a certain set of predefined global variables.</source>
          <target state="translated">&lt;strong&gt;環境&lt;/strong&gt; -スクリプトを実行するために設計された環境。各環境には、事前定義された特定のグローバル変数のセットが用意されています。</target>
        </trans-unit>
        <trans-unit id="db36483c04f51816464104f9336215d65f9a9de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Features&lt;/strong&gt; - new functionality that will aid users in the future.</source>
          <target state="translated">&lt;strong&gt;機能&lt;/strong&gt; -将来ユーザーを支援する新機能。</target>
        </trans-unit>
        <trans-unit id="af207494644ef63da627d549729c12fe3b8c4ad1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generic.&lt;/strong&gt; Rules cannot be so specific that users will have trouble understanding when to use them. A rule is typically too specific if describing what it does requires more than two &quot;and&quot;s (if a and b and c and d, then this rule warns).</source>
          <target state="translated">&lt;strong&gt;ジェネリック。&lt;/strong&gt;ルールは、ユーザーがそれらを使用するタイミングを理解するのが困難になるほど具体的であってはなりません。ルールは、それが何を行うかを説明するために2つ以上の「and」を必要とする場合、一般的に具体的すぎます（aとbおよびcとdの場合、このルールは警告します）。</target>
        </trans-unit>
        <trans-unit id="6689c7c184eb755bc66eded45689e48fbf168a2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Globals&lt;/strong&gt; - the additional global variables your script accesses during execution.</source>
          <target state="translated">&lt;strong&gt;グローバル&lt;/strong&gt; -スクリプトが実行中にアクセスする追加のグローバル変数。</target>
        </trans-unit>
        <trans-unit id="20f8d000c45d1a39c043aba161502703deeee9cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; If the directory for the cache does not exist make sure you add a trailing &lt;code&gt;/&lt;/code&gt; on *nix systems or &lt;code&gt;\&lt;/code&gt; in windows. Otherwise the path will be assumed to be a file.</source>
          <target state="translated">&lt;strong&gt;重要な注意：&lt;/strong&gt;キャッシュ用のディレクトリが存在しない場合は、* nixシステムでは末尾に &lt;code&gt;/&lt;/code&gt; を、Windowsでは &lt;code&gt;\&lt;/code&gt; を必ず追加してください。それ以外の場合、パスはファイルと見なされます。</target>
        </trans-unit>
        <trans-unit id="235d36d7dcc57be47171dc560e7d69f443d908c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; If you are upgrading from 0.x, please refer to &lt;a href=&quot;migrating-to-1.0.0&quot;&gt;Migrating to 1.0.0&lt;/a&gt; as your starting point.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt; 0.xからアップグレードする場合は、開始点として&lt;a href=&quot;migrating-to-1.0.0&quot;&gt;1.0.0&lt;/a&gt;への移行を参照してください。</target>
        </trans-unit>
        <trans-unit id="ae2eaa51443c3258dd7e45dea4a5ac94bc4017db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; If you submit a &lt;strong&gt;core&lt;/strong&gt; rule to the ESLint repository, you &lt;strong&gt;must&lt;/strong&gt; follow some conventions explained below.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;あなたが提出した場合は&lt;strong&gt;コア&lt;/strong&gt; ESLintリポジトリにルールを、あなたが&lt;strong&gt;しなければならない&lt;/strong&gt;いくつかの規則を以下に説明に従ってください。</target>
        </trans-unit>
        <trans-unit id="ee492b684f6bb254969929ee2dd4880d1561b9fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; The &lt;code&gt;meta.fixable&lt;/code&gt; property is mandatory for fixable rules. ESLint will throw an error if a rule that implements &lt;code&gt;fix&lt;/code&gt; functions does not &lt;a href=&quot;#rule-basics&quot;&gt;export&lt;/a&gt; the &lt;code&gt;meta.fixable&lt;/code&gt; property.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt; &lt;code&gt;meta.fixable&lt;/code&gt; プロパティは、修正可能なルールには必須です。実装は、というルール場合ESLintはエラーをスローします &lt;code&gt;fix&lt;/code&gt; 機能がありません&lt;a href=&quot;#rule-basics&quot;&gt;エクスポート&lt;/a&gt; &lt;code&gt;meta.fixable&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="b42040c1488043bf228b71702cca0584f230373b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; This configuration is &lt;strong&gt;not recommended for production use&lt;/strong&gt; because it changes with every minor and major version of ESLint. Use at your own risk.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;この構成は、ESLintのマイナーバージョンおよびメジャーバージョンごとに変更されるため&lt;strong&gt;、本番環境での使用は推奨されません&lt;/strong&gt;。自己責任。</target>
        </trans-unit>
        <trans-unit id="84927636eae797794df96a60238b07a1ac6aff3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Unless the rule &lt;a href=&quot;#rule-basics&quot;&gt;exports&lt;/a&gt; the &lt;code&gt;meta.fixable&lt;/code&gt; property, ESLint does not apply fixes even if the rule implements &lt;code&gt;fix&lt;/code&gt; functions.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;ルールが &lt;code&gt;meta.fixable&lt;/code&gt; プロパティを&lt;a href=&quot;#rule-basics&quot;&gt;エクスポートし&lt;/a&gt;ない限り、ルールが &lt;code&gt;fix&lt;/code&gt; 関数を実装していても、ESLintは修正を適用しません。</target>
        </trans-unit>
        <trans-unit id="69c7924d351034165acbbfab277838dd50f1a24a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; We strongly recommend always including a default config for your plugin to avoid errors.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;エラーを回避するため、常にプラグインのデフォルト設定を含めることを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="bb214ee6eb5c7dc12ee59389822b7d98da3bd6fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; We will not be updating the ESLint v2.x versions going forward. All bug fixes and enhancements will land in ESLint v3.x.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;今後、ESLint v2.xバージョンは更新されません。すべてのバグ修正と機能拡張は、ESLint v3.xに組み込まれます。</target>
        </trans-unit>
        <trans-unit id="af1973d3d7abb5403d4358d2d444c4653aef3ef0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Without the &lt;code&gt;fixable&lt;/code&gt; property, ESLint does not &lt;a href=&quot;#applying-fixes&quot;&gt;apply fixes&lt;/a&gt; even if the rule implements &lt;code&gt;fix&lt;/code&gt; functions. Omit the &lt;code&gt;fixable&lt;/code&gt; property if the rule is not fixable.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;なしで &lt;code&gt;fixable&lt;/code&gt; プロパティ、ESLintはしない&lt;a href=&quot;#applying-fixes&quot;&gt;修正を適用する&lt;/a&gt;ルールが実装する場合でも、 &lt;code&gt;fix&lt;/code&gt; 機能を。ルールが修正可能でない場合は、 &lt;code&gt;fixable&lt;/code&gt; プロパティを省略します。</target>
        </trans-unit>
        <trans-unit id="f318a381208ca097f538b4b037cad2f3286f2d39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; You must pass in the &lt;code&gt;results&lt;/code&gt; property of the report. Passing in &lt;code&gt;report&lt;/code&gt; directly will result in an error.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;レポートの &lt;code&gt;results&lt;/code&gt; プロパティを渡す必要があります。 &lt;code&gt;report&lt;/code&gt; 直接渡すとエラーになります。</target>
        </trans-unit>
        <trans-unit id="d1c6167374ff4343d0a7bd093fb7451884c580ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; the &lt;code&gt;fixable&lt;/code&gt; property is mandatory for fixable rules. If this property isn't specified, ESLint will throw an error whenever the rule attempts to produce a fix. Omit the &lt;code&gt;fixable&lt;/code&gt; property if the rule is not fixable.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt;修正可能なルールには、 &lt;code&gt;fixable&lt;/code&gt; プロパティが必須です。このプロパティが指定されていない場合、ルールが修正を生成しようとするたびにESLintはエラーをスローします。ルールが修正可能でない場合は、 &lt;code&gt;fixable&lt;/code&gt; プロパティを省略します。</target>
        </trans-unit>
        <trans-unit id="4ef58db4ffe765c889ba28c24dfbc531efe80a6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Note that &lt;code&gt;node_modules&lt;/code&gt; directories in, for example, a &lt;code&gt;packages&lt;/code&gt; directory in a mono repo are &lt;em&gt;not&lt;/em&gt; ignored by default and need to be added to &lt;code&gt;.eslintignore&lt;/code&gt; explicitly.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt;：モノリポジトリの &lt;code&gt;packages&lt;/code&gt; ディレクトリなどの &lt;code&gt;node_modules&lt;/code&gt; ディレクトリはデフォルトで&lt;em&gt;は&lt;/em&gt;無視され&lt;em&gt;ず、&lt;/em&gt;明示的に &lt;code&gt;.eslintignore&lt;/code&gt; に追加する必要があることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06af978db0e74adafadd870923b8d60b542ceb0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Incorrect&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Incorrect&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="5c2cebb95a12bc72dedb9ca39be6d153867f8883" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS Comment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSCSコメント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1f3fe61c5863162813e794c8b1b86796bc5e188" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS Preset&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JSCSプリセット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="875fa661818e2fa945668f13e89129e9902797bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterBlocks&quot;&gt;disallowPaddingNewLinesAfterBlocks&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterBlocks&quot;&gt;disallowPaddingNewLinesAfterBlocks&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1afdb12b91844a96b65e7fe73d8b3fe6d0a5bcf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict&quot;&gt;disallowPaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict&quot;&gt;disallowPaddingNewLinesAfterUseStrict&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23b929bd9e971dba75ed1fca7e96be672a7b5b82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesBeforeExport&quot;&gt;disallowPaddingNewLinesBeforeExport&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesBeforeExport&quot;&gt;disallowPaddingNewLinesBeforeExport&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5ca621a4a90b373c75564885bff675dd36886635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewlinesBeforeKeywords&quot;&gt;disallowPaddingNewlinesBeforeKeywords&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewlinesBeforeKeywords&quot;&gt;disallowPaddingNewlinesBeforeKeywords&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3cf1f14ed21f7fd76bd4ea944770b2b1261ccc06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLineAfterVariableDeclaration&quot;&gt;requirePaddingNewLineAfterVariableDeclaration&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLineAfterVariableDeclaration&quot;&gt;requirePaddingNewLineAfterVariableDeclaration&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d9238f9fbbd5e5293f233a55af524c54e7219926" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterBlocks&quot;&gt;requirePaddingNewLinesAfterBlocks&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterBlocks&quot;&gt;requirePaddingNewLinesAfterBlocks&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="096a0e921738b26458570243b333d4e31296e6e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict&quot;&gt;requirePaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict&quot;&gt;requirePaddingNewLinesAfterUseStrict&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="74d28a0823e61957e5d2c5c16bede4f960cdf9ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesBeforeExport&quot;&gt;requirePaddingNewLinesBeforeExport&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesBeforeExport&quot;&gt;requirePaddingNewLinesBeforeExport&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="792713e14953df441ea953c5ccfabc5a465b6af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewlinesBeforeKeywords&quot;&gt;requirePaddingNewlinesBeforeKeywords&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewlinesBeforeKeywords&quot;&gt;requirePaddingNewlinesBeforeKeywords&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b6539cdeff7be733fe5f689599bef3381961e2a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/validateNewlineAfterArrayElements&quot;&gt;validateNewlineAfterArrayElements&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/validateNewlineAfterArrayElements&quot;&gt;validateNewlineAfterArrayElements&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b845858c98479877f5cd84e3e3d947a67cde0556" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/validateOrderInObjectKeys&quot;&gt;validateOrderInObjectKeys&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/validateOrderInObjectKeys&quot;&gt;validateOrderInObjectKeys&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92d02c2711b391996382780ce54c871ecfbcf61b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowAnonymousFunctions&quot;&gt;disallowAnonymousFunctions&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowAnonymousFunctions&quot;&gt;disallowAnonymousFunctions&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5518cb0a8307c096ca6e5181b41c3f34ded248b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowCapitalizedComments&quot;&gt;disallowCapitalizedComments&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowCapitalizedComments&quot;&gt;disallowCapitalizedComments&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3fce6c2919f5a7f4128db723289f261b2579f50e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowIdenticalDestructuringNames&quot;&gt;disallowIdenticalDestructuringNames&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowIdenticalDestructuringNames&quot;&gt;disallowIdenticalDestructuringNames&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2779a0f1925b729c25143da366d2ea05a156057c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict&quot;&gt;disallowPaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict&quot;&gt;disallowPaddingNewLinesAfterUseStrict&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bc46dd82ef9a36adced582b80db251ee8098f353" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesInObjects&quot;&gt;disallowPaddingNewLinesInObjects&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesInObjects&quot;&gt;disallowPaddingNewLinesInObjects&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1b76c35c4dec8659858707ea0d74f38aeff893a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowSpacesInCallExpression&quot;&gt;disallowSpacesInCallExpression&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowSpacesInCallExpression&quot;&gt;disallowSpacesInCallExpression&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ecefb37a09083aea3ec664483f3936076aa7ca67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowTabs&quot;&gt;disallowTabs&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowTabs&quot;&gt;disallowTabs&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a0b29a889bfed4db9fd94315be32c286fd2eb4d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/maximumNumberOfLines&quot;&gt;maximumNumberOfLines&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/maximumNumberOfLines&quot;&gt;maximumNumberOfLines&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="524522c208c793d67df0d70c51a25321ca6ead53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireAnonymousFunctions&quot;&gt;requireAnonymousFunctions&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireAnonymousFunctions&quot;&gt;requireAnonymousFunctions&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="186a02ade6372dc7fb4ce71dac0a15dd30047be7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireCapitalizedComments&quot;&gt;requireCapitalizedComments&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireCapitalizedComments&quot;&gt;requireCapitalizedComments&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c55f32f60480930c50ff24b3734d8f7612790aa2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireMatchingFunctionName&quot;&gt;requireMatchingFunctionName&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireMatchingFunctionName&quot;&gt;requireMatchingFunctionName&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f3b86e456fcc92f2d512f9b8198df3c5dd8ed28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireMultiLineTernary&quot;&gt;requireMultiLineTernary&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireMultiLineTernary&quot;&gt;requireMultiLineTernary&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="051352b9689b94454c403b5767b707d6004dd6d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireNumericLiterals&quot;&gt;requireNumericLiterals&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireNumericLiterals&quot;&gt;requireNumericLiterals&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7e99f39f1e1bc94d80fc4189abd36d57e1c90285" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict&quot;&gt;requirePaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict&quot;&gt;requirePaddingNewLinesAfterUseStrict&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f9e8eff6880ee488abbd0548b83266d9d9ea8b17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesInObjects&quot;&gt;requirePaddingNewLinesInObjects&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesInObjects&quot;&gt;requirePaddingNewLinesInObjects&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="14c43f82c9f67bcd07edf26203adc57f971b82cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireSpacesInCallExpression&quot;&gt;requireSpacesInCallExpression&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/requireSpacesInCallExpression&quot;&gt;requireSpacesInCallExpression&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b01ba1c29dfda05eb2c7fc519aef9d76b7858fec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/validateCommentPosition&quot;&gt;validateCommentPosition&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/validateCommentPosition&quot;&gt;validateCommentPosition&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="49b5a8cc5ef8759fcbb6679a20275bfc6b56da26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/validateIndentation&quot;&gt;validateIndentation&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/validateIndentation&quot;&gt;validateIndentation&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f184acb203d5acc54ea98a65572c44f57115d4d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/validateLineBreaks&quot;&gt;validateLineBreaks&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：&lt;a href=&quot;https://jscs-dev.github.io/rule/validateLineBreaks&quot;&gt;validateLineBreaks&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56c9d143227ac59dde41b0e45643f66838ae798d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: This rule option &lt;code&gt;separateRequires&lt;/code&gt; roughly maps to &lt;a href=&quot;https://jscs-dev.github.io/rule/requireMultipleVarDecl&quot;&gt;requireMultipleVarDecl&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：このルールオプション &lt;code&gt;separateRequires&lt;/code&gt; は、&lt;a href=&quot;https://jscs-dev.github.io/rule/requireMultipleVarDecl&quot;&gt;requireMultipleVarDeclに&lt;/a&gt;大まかにマップします。</target>
        </trans-unit>
        <trans-unit id="7ab1eb359d57bae17ce11110702185750e352610" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: This rule provides partial compatibility with &lt;a href=&quot;https://jscs-dev.github.io/rule/requireObjectKeysOnNewLine&quot;&gt;requireObjectKeysOnNewLine&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：このルールは&lt;a href=&quot;https://jscs-dev.github.io/rule/requireObjectKeysOnNewLine&quot;&gt;requireObjectKeysOnNewLine&lt;/a&gt;との部分的な互換性を提供します。</target>
        </trans-unit>
        <trans-unit id="cbaa291b1efb6425a2e95e390e53229057de31bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: This rule roughly maps to &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowMultipleVarDecl&quot;&gt;disallowMultipleVarDecl&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;JSCS&lt;/strong&gt;：このルールは、おおまかに&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowMultipleVarDecl&quot;&gt;disallowMultipleVarDeclに&lt;/a&gt;マッピングされます。</target>
        </trans-unit>
        <trans-unit id="a02d0f0790e678981318f34a951582534122cfce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: &lt;code&gt;indent&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;JSHint&lt;/strong&gt;： &lt;code&gt;indent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b29586ffa53e44f145de605c41b6a451d5a6782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: This rule corresponds to &lt;code&gt;scripturl&lt;/code&gt; rule of JSHint.</source>
          <target state="translated">&lt;strong&gt;JSHint&lt;/strong&gt;：このルールはJSHintの &lt;code&gt;scripturl&lt;/code&gt; ルールに対応しています。</target>
        </trans-unit>
        <trans-unit id="cee936d2f9a974901b4dba5c409d18cbe0656291" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: This rule maps to the &lt;code&gt;onevar&lt;/code&gt; JSHint rule, but allows &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; to be configured separately.</source>
          <target state="translated">&lt;strong&gt;JSHint&lt;/strong&gt;：このルールは &lt;code&gt;onevar&lt;/code&gt; JSHint ルールにマップされますが、 &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;const&lt;/code&gt; を個別に構成できます。</target>
        </trans-unit>
        <trans-unit id="2d89295b6bfd37b6a9a89be78ffac98e4a06adde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: W008, W047</source>
          <target state="translated">&lt;strong&gt;JSHint&lt;/strong&gt;：W008、W047</target>
        </trans-unit>
        <trans-unit id="58e9531777492d743c03a56b4bfa95723630ba9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: W115</source>
          <target state="translated">&lt;strong&gt;JSHint&lt;/strong&gt;：W115</target>
        </trans-unit>
        <trans-unit id="5df1d4948f9e69843f18fd06ce2f27dcf683bc4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSLint&lt;/strong&gt;: &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;JSLint&lt;/strong&gt;： &lt;code&gt;continue&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03abc3186a2e3ec2e4b5da6a44ca7df7223a5832" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON&lt;/strong&gt; - use &lt;code&gt;.eslintrc.json&lt;/code&gt; to define the configuration structure. ESLint's JSON files also allow JavaScript-style comments.</source>
          <target state="translated">&lt;strong&gt;JSON&lt;/strong&gt; - &lt;code&gt;.eslintrc.json&lt;/code&gt; を使用して構成構造を定義します。ESLintのJSONファイルでは、JavaScriptスタイルのコメントも使用できます。</target>
        </trans-unit>
        <trans-unit id="bf3b1c209a92ab9329d04e6738466afd50f9f514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript (ESM)&lt;/strong&gt; - use &lt;code&gt;.eslintrc.cjs&lt;/code&gt; when running ESLint in JavaScript packages that specify &lt;code&gt;&quot;type&quot;:&quot;module&quot;&lt;/code&gt; in their &lt;code&gt;package.json&lt;/code&gt;. Note that ESLint does not support ESM configuration at this time.</source>
          <target state="translated">&lt;strong&gt;JavaScriptの（ESM）&lt;/strong&gt; -使用 &lt;code&gt;.eslintrc.cjs&lt;/code&gt; 指定JavaScriptのパッケージでESLintを実行している &lt;code&gt;&quot;type&quot;:&quot;module&quot;&lt;/code&gt; 自分で &lt;code&gt;package.json&lt;/code&gt; を。現在、ESLintはESM構成をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="5fc92ffbd2f937c19368c31d09300ab30f115610" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt; - use &lt;code&gt;.eslintrc.js&lt;/code&gt; and export an object containing your configuration.</source>
          <target state="translated">&lt;strong&gt;JavaScript&lt;/strong&gt; - &lt;code&gt;.eslintrc.js&lt;/code&gt; を使用して、構成を含むオブジェクトをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="97416c386b892ff9370bf9f0e2f0d31298565ade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Library agnostic.&lt;/strong&gt; Rules must be based solely on JavaScript runtime environments and not on specific libraries or frameworks. For example, core rules shouldn't only apply if you're using jQuery but we may have some rules that apply only if you're using Node.js (a runtime).</source>
          <target state="translated">&lt;strong&gt;ライブラリにとらわれない。&lt;/strong&gt;ルールはJavaScriptランタイム環境のみに基づいており、特定のライブラリやフレームワークに基づいてはなりません。たとえば、コアルールはjQueryを使用している場合にのみ適用されるのではなく、Node.js（ランタイム）を使用している場合にのみ適用されるいくつかのルールがある場合があります。</target>
        </trans-unit>
        <trans-unit id="67e380d7569e0837d2446eb4b9acd155becbd4ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make the regular expression handling UTF-16 surrogate pairs correctly.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;正規表現がUTF-16サロゲートペアを正しく処理するようにしてください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70fae8edd3e9c149517dc5c247e1ce7e56536122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make the regular expression throwing syntax errors early as disabling &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-regular-expressions-patterns&quot;&gt;Annex B extensions&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;構文エラーをスローする正規表現を、早期に&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-regular-expressions-patterns&quot;&gt;Annex B拡張&lt;/a&gt;を無効にするようにします。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1810758c9168765d6922336525d960f9b55650a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No conflicts.&lt;/strong&gt; No rule must directly conflict with another rule. For example, if we have a rule requiring semicolons, we cannot also have a rule disallowing semicolons (which is why we have one rule, &lt;code&gt;semi&lt;/code&gt;, that does both).</source>
          <target state="translated">&lt;strong&gt;競合はありません。&lt;/strong&gt;ルールが別のルールと直接競合してはなりません。たとえば、セミコロンを必要とするルールがある場合、セミコロンを禁止するルールも使用できません（そのため、両方を実行する1つのルール &lt;code&gt;semi&lt;/code&gt; があります）。</target>
        </trans-unit>
        <trans-unit id="beb0a89baebb7d7ff29d07c57e6d6233ed7646ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Also available as a static function on &lt;code&gt;CLIEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;CLIEngine&lt;/code&gt; の静的関数としても使用できます。</target>
        </trans-unit>
        <trans-unit id="50455ab1a93fffcef57eabe19fc8429ed85ead31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Arrow functions can never have their &lt;code&gt;this&lt;/code&gt; value set using &lt;code&gt;bind()&lt;/code&gt;. This rule flags all uses of &lt;code&gt;bind()&lt;/code&gt; with arrow functions as a problem</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;矢印関数は、 &lt;code&gt;bind()&lt;/code&gt; を使用して &lt;code&gt;this&lt;/code&gt; 値を設定することはできません。このルールは、矢印関数での &lt;code&gt;bind()&lt;/code&gt; のすべての使用に問題としてフラグを立てます</target>
        </trans-unit>
        <trans-unit id="8b0db7671e7884ec48eec75359ca82cf8bcab23c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of 2016, we accept only rules that are deemed extremely important for inclusion. We prefer that new rules be implemented in plugins.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; 2016年の時点では、含めるのに非常に重要と思われるルールのみを受け入れています。新しいルールをプラグインに実装することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d281e2ec6a5c50e21574945636d77b62b8806afe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of 2020, we only accept rules related to new ECMAScript features. We prefer that new rules be implemented in plugins.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; 2020年の時点では、ECMAScriptの新機能に関連するルールのみを受け入れています。プラグインに新しいルールを実装することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5cd44b9d2b032786b403680c1e68b01291151ab8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Autofixed files are not placed in the cache. Subsequent linting that does not trigger an autofix will place it in the cache.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;自動修正されたファイルはキャッシュに配置されません。Autofixをトリガーしない後続のリンティングは、それをキャッシュに配置します。</target>
        </trans-unit>
        <trans-unit id="5e8afacc1817ba9914741b0463066a4e02852c26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Comments that disable warnings for a portion of a file tell ESLint not to report rule violations for the disabled code. ESLint still parses the entire file, however, so disabled code still needs to be syntactically valid JavaScript.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ファイルの一部の警告を無効にするコメントは、ESLintに無効なコードのルール違反を報告しないように指示します。ただし、ESLintは引き続きファイル全体を解析するため、無効化されたコードは構文的に有効なJavaScriptである必要があります。</target>
        </trans-unit>
        <trans-unit id="65e9cb21deb1f3e9b10ff060e4c51d4130334479" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Currently you need to use full JSON Schema object rather than array in case your schema has references ($ref), because in case of array format ESLint transforms this array into a single schema without updating references that makes them incorrect (they are ignored).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;現在、スキーマに参照（$ ref）がある場合は、配列ではなく完全なJSONスキーマオブジェクトを使用する必要があります。これは、配列形式の場合、ESLintが参照を更新せずにこの配列を単一のスキーマに変換するため、参照が正しくなくなります（無視されます）。 ）。</target>
        </trans-unit>
        <trans-unit id="6581a69e00b07d618a535806a4a29285978cb0d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not combine fixes for multiple issues into one branch. Use a separate branch for each issue you're working on.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;複数の問題の修正を1つのブランチに結合しないでください。取り組んでいる問題ごとに個別のブランチを使用します。</target>
        </trans-unit>
        <trans-unit id="e9afe00ea0bd3a5d7887bc0b406ce66c850f9fcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Earlier versions of ESLint supported additional methods on the &lt;code&gt;context&lt;/code&gt; object. Those methods were removed in the new format and should not be relied upon.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; ESLintの以前のバージョンでは、 &lt;code&gt;context&lt;/code&gt; オブジェクトの追加のメソッドがサポートされていました。これらのメソッドは新しい形式で削除されたため、信頼すべきではありません。</target>
        </trans-unit>
        <trans-unit id="4f2b5e8d74798a74e1d71cd719e14b5d2efbbfd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Enable the &lt;a href=&quot;../rules/no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; rule to disallow modifications to read-only global variables in your code.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;a href=&quot;../rules/no-global-assign&quot;&gt;no-global-assign&lt;/a&gt;ルールを有効にして、コード内の読み取り専用グローバル変数への変更を禁止します。</target>
        </trans-unit>
        <trans-unit id="78f41789a9a1d7bd3b1dc89346014e3c63ca6aa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are coming from a version before 1.0.0 please see the &lt;a href=&quot;user-guide/migrating-to-1.0.0&quot;&gt;migration guide&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; 1.0.0より前のバージョンを使用している場合は、&lt;a href=&quot;user-guide/migrating-to-1.0.0&quot;&gt;移行ガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="1a70a33e570e988ab48c7f6e6cc1e7f020ddfc32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you just have a question that won't necessarily result in a change to ESLint, such as asking how something works or how to contribute, please use the &lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;mailing list&lt;/a&gt; or &lt;a href=&quot;https://eslint.org/chat&quot;&gt;chat&lt;/a&gt; instead of filing an issue.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;何かがどのように機能するか、どのように貢献するかなど、必ずしもESLintに変更をもたらすとは限らない質問がある場合は、問題を提出する代わりに、&lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;メーリングリスト&lt;/a&gt;または&lt;a href=&quot;https://eslint.org/chat&quot;&gt;チャット&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="6d7f55b9ec463c0929ee2cc64c6034d205688a9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you just have a question that won't necessarily result in a change to ESLint, such as asking how something works or how to contribute, please use the &lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;mailing list&lt;/a&gt; or &lt;a href=&quot;https://gitter.im/eslint/eslint&quot;&gt;chat&lt;/a&gt; instead of filing an issue.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; ESLintへの変更が必ずしも必要ではない質問（たとえば、何かが機能したり、貢献したりする方法）がある場合は、問題を提出する代わりに、&lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;メーリングリスト&lt;/a&gt;または&lt;a href=&quot;https://gitter.im/eslint/eslint&quot;&gt;チャット&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="d00083bc1ec54901ca5364535918d10c18eadbb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you run ESLint with &lt;code&gt;--cache&lt;/code&gt; and then run ESLint without &lt;code&gt;--cache&lt;/code&gt;, the &lt;code&gt;.eslintcache&lt;/code&gt; file will be deleted. This is necessary because the results of the lint might change and make &lt;code&gt;.eslintcache&lt;/code&gt; invalid. If you want to control when the cache file is deleted, then use &lt;code&gt;--cache-location&lt;/code&gt; to specify an alternate location for the cache file.</source>
          <target state="translated">&lt;strong&gt;注：--&lt;/strong&gt; cacheを指定して &lt;code&gt;--cache&lt;/code&gt; を実行し、次に--cacheを指定せずに &lt;code&gt;--cache&lt;/code&gt; 実行すると、 &lt;code&gt;.eslintcache&lt;/code&gt; ファイルが削除されます。lintの結果が変更され、 &lt;code&gt;.eslintcache&lt;/code&gt; が無効になる可能性があるため、これが必要です。キャッシュファイルを削除する &lt;code&gt;--cache-location&lt;/code&gt; を制御する場合は、-cache-locationを使用して、キャッシュファイルの代替の場所を指定します。</target>
        </trans-unit>
        <trans-unit id="21ca9d817155df1e8a547f18bbb0946f1c55facc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is expected for this rule to emit one error for each mixed operator in a pair. As a result, for each two consecutive mixed operators used, a distinct error will be displayed, pointing to where the specific operator that breaks the rule is used:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このルールでは、ペアの混合演算子ごとに1つのエラーが発生することが予想されます。その結果、使用された2つの連続する混合演算子ごとに、ルールに違反する特定の演算子が使用されている場所を示す明確なエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="87444ecd21d0cd1926f69065aba4e403244297e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's a good idea to re-rerun &lt;code&gt;npm install&lt;/code&gt; whenever you pull from the main repository to ensure you have the latest development dependencies.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;メインリポジトリからプル &lt;code&gt;npm install&lt;/code&gt; たびにnpm installを再実行して、最新の開発依存関係があることを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="53466a99b9f7764d55c642b573e7a64a30debf03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's a good idea to re-run &lt;code&gt;npm install&lt;/code&gt; whenever you pull from the main repository to ensure you have the latest development dependencies.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;メインリポジトリからプル &lt;code&gt;npm install&lt;/code&gt; たびにnpm installを再実行して、最新の開発依存関係があることを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f2a4088cbd3a367e41689d6e94ffe74efaffd701" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; One of the libraries adds AST node properties for comments - do not use these properties. Always use &lt;code&gt;sourceCode.getComments()&lt;/code&gt; as this is the only guaranteed API for accessing comments (we will likely change how comments are handled later).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ライブラリの1つはコメントにASTノードプロパティを追加します-これらのプロパティは使用しないでください。これはコメントにアクセスするための唯一の保証されたAPIであるため、常に &lt;code&gt;sourceCode.getComments()&lt;/code&gt; を使用してください（コメントの処理方法は後で変更される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="c521db88d92c84eb7d807bdf62cf2da54f024a3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Please note that configuration will not enable any of the plugin's rules by default, and instead should be treated as a standalone config. This means that you must specify your plugin name in the &lt;code&gt;plugins&lt;/code&gt; array as well as any rules you want to enable that are part of the plugin. Any plugin rules must be prefixed with the short or long plugin name. See &lt;a href=&quot;../user-guide/configuring#configuring-plugins&quot;&gt;Configuring Plugins&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;構成ではデフォルトでプラグインのルールは有効にならず、スタンドアロン構成として扱う必要があります。つまり、 &lt;code&gt;plugins&lt;/code&gt; 配列でプラグイン名を指定し、プラグインの一部である有効にしたいルールを指定する必要があります。プラグインルールには、短いまたは長いプラグイン名をプレフィックスとして付ける必要があります。詳細については、&lt;a href=&quot;../user-guide/configuring#configuring-plugins&quot;&gt;プラグインの設定を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7faa123b30aef583c9cee838fcb46855b4a4bff2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Plugins are resolved relative to the current working directory of the ESLint process. In other words, ESLint will load the same plugin as a user would obtain by running &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; in a Node REPL from their project root.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;プラグインは、ESLintプロセスの現在の作業ディレクトリを基準にして解決されます。つまり、ESLintは、プロジェクトルートからノードREPLで &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; を実行してユーザーが取得するのと同じプラグインをロードします。</target>
        </trans-unit>
        <trans-unit id="c45f807c1f211c7c24235b84d560cd87554ee515" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Polyjuice does a good job of creating a reasonable ESLint configuration from your JSCS configuration, but it may not be 100%. You may still see different warnings than you saw with JSCS, and so you may need to further modify your configuration after using Polyjuice. This is especially true if you're using inline comments to enable/disable certain rules in JSCS (you'll need to manually convert those to use ESLint-style comments instead, see &quot;Disabling Rules Inline&quot; later in this page).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JSCS構成から妥当なESLint構成を作成するには、Polyjuiceが適切に機能しますが、100％とは限りません。それでもJSCSで表示されたものとは異なる警告が表示される可能性があるため、Polyjuiceの使用後に構成をさらに変更する必要がある場合があります。これは、インラインコメントを使用してJSCSの特定のルールを有効/無効にする場合に特に当てはまります（代わりにESLintスタイルのコメントを使用するには、手動で変換する必要があります。このページの「ルールをインラインで無効にする」を参照してください）。</target>
        </trans-unit>
        <trans-unit id="77611a061ac4806612783fac5430806211fdfab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The full code coverage report is output into &lt;code&gt;/coverage&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;完全なコードカバレッジレポートは &lt;code&gt;/coverage&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="8a5b7848fc50678575012888201f2e9e660f4fd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This option only applies when you pass directory paths to the &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; method. If you pass glob patterns like &lt;code&gt;lib/**/*&lt;/code&gt;, ESLint will lint all files matching the glob pattern regardless of extension.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このオプションは、ディレクトリパスを&lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt;メソッドに渡す場合にのみ適用されます。 &lt;code&gt;lib/**/*&lt;/code&gt; のようなglobパターンを渡すと、ESLintは、拡張子に関係なく、globパターンに一致するすべてのファイルをリントします。</target>
        </trans-unit>
        <trans-unit id="5354a4574d8823c1a4a4f34ce28ceb4a97458241" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This page covers the most recent rule format for ESLint &amp;gt;= 3.0.0. There is also a &lt;a href=&quot;working-with-rules-deprecated&quot;&gt;deprecated rule format&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このページでは、ESLint&amp;gt; = 3.0.0の最新のルール形式について説明します。&lt;a href=&quot;working-with-rules-deprecated&quot;&gt;廃止されたルール形式&lt;/a&gt;もあります。</target>
        </trans-unit>
        <trans-unit id="a477572548696d26bce47e489626b8817978c1af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This rule does not support all of the Google Closure documentation tool's use cases. As such, some code such as &lt;code&gt;(/**number*/ n =&amp;gt; n * 2);&lt;/code&gt; will be flagged as missing appropriate function JSDoc comments even though &lt;code&gt;/**number*/&lt;/code&gt; is intended to be a type hint and not a documentation block for the function. We don't recommend using this rule if you use type hints in this way.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このルールは、Google Closureドキュメントツールのすべての使用例をサポートしているわけではありません。そのため、 &lt;code&gt;(/**number*/ n =&amp;gt; n * 2);&lt;/code&gt; などのコードがあります。 &lt;code&gt;/**number*/&lt;/code&gt; が型ヒントであり、関数のドキュメントブロックではない場合でも、適切な関数JSDocコメントがないとしてフラグが付けられます。このように型ヒントを使用する場合は、このルールの使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="631d65af1a47adbb9d740eaf0589e40e089c670e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use undocumented parts of the API at your own risk. Only those parts that are specifically mentioned in this document are approved for use and will remain stable and reliable. Anything left undocumented is unstable and may change or be removed at any point.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; APIの文書化されていない部分は自己責任で使用してください。このドキュメントで具体的に言及されている部品のみが使用が承認されており、安定性と信頼性を維持します。ドキュメント化されていないものは不安定であり、いつでも変更または削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="deda6c328c3804b27cfc41a400a33ce9851025db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When specifying rules from plugins, make sure to omit &lt;code&gt;eslint-plugin-&lt;/code&gt;. ESLint uses only the unprefixed name internally to locate rules.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;プラグインからルールを指定する場合は、必ず &lt;code&gt;eslint-plugin-&lt;/code&gt; を省略してください。ESLintは、規則を見つけるために、プレフィックスなしの名前のみを内部で使用します。</target>
        </trans-unit>
        <trans-unit id="c46e12d16db360f32eead01e7c08603bd2f9ecea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;--ext&lt;/code&gt; is only used when the arguments are directories. If you use glob patterns or file names, then &lt;code&gt;--ext&lt;/code&gt; is ignored.</source>
          <target state="translated">&lt;strong&gt;注：-- &lt;/strong&gt; &lt;code&gt;--ext&lt;/code&gt; は、引数がディレクトリの場合にのみ使用されます。globパターンまたはファイル名を使用する場合、 &lt;code&gt;--ext&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="a7ff4f83c7b436d3b4b5999c8c1d638627a60796" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;--init&lt;/code&gt; assumes you have a &lt;code&gt;package.json&lt;/code&gt; file already. If you don't, make sure to run &lt;code&gt;npm init&lt;/code&gt; or &lt;code&gt;yarn init&lt;/code&gt; beforehand.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;--init&lt;/code&gt; は、 &lt;code&gt;package.json&lt;/code&gt; ファイルが既に存在することを前提としています。そうしない場合は、実行することを確認し &lt;code&gt;npm init&lt;/code&gt; または &lt;code&gt;yarn init&lt;/code&gt; 事前に。</target>
        </trans-unit>
        <trans-unit id="344dad29f241da2762dd7f62cc25793873438929" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Although this ensures zero empty lines at the EOF, most editors will still show one empty line at the end if the file ends with a line break, as illustrated below. There is no empty line at the end of a file after the last &lt;code&gt;\n&lt;/code&gt;, although editors may show an additional line. A true additional line would be represented by &lt;code&gt;\n\n&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これにより、EOFで空行がゼロになりますが、以下に示すように、ファイルが改行で終了する場合、ほとんどのエディターは最後に1行の空行を表示します。最後の &lt;code&gt;\n&lt;/code&gt; 後のファイルの終わりに空の行はありませんが、エディターは追加の行を表示する場合があります。真の追加行は &lt;code&gt;\n\n&lt;/code&gt; 表されます。</target>
        </trans-unit>
        <trans-unit id="7b54e0f954bc408384240a6020714081d3ec40f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you want to lint text and have your configuration be read and processed, use CLIEngine's &lt;a href=&quot;#cliengineexecuteonfiles&quot;&gt;&lt;code&gt;executeOnFiles&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#cliengineexecuteontext&quot;&gt;&lt;code&gt;executeOnText&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：テキストをリントし、構成を読み取って処理させる場合は、代わりにCLIEngineの&lt;a href=&quot;#cliengineexecuteonfiles&quot;&gt; &lt;code&gt;executeOnFiles&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#cliengineexecuteontext&quot;&gt; &lt;code&gt;executeOnText&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="6dc8e3bfd92b4dd07b36e616a5276ef8284b6034" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: It is not possible to determine if a variable will be referring to an object or an array at runtime. This rule therefore guesses the assignment type by checking whether the key being accessed is an integer. This can lead to the following possibly confusing situations:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：変数が実行時にオブジェクトまたは配列を参照するかどうかを判別することはできません。したがって、このルールは、アクセスされているキーが整数であるかどうかをチェックすることにより、割り当てタイプを推測します。これにより、以下の混乱する可能性のある状況が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ef937726101d6bbf1ea792d981c362dd127505c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Notes:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="277f9286419e058430f9a225cd4bc6a93b7b0f5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Other&lt;/strong&gt; - anything else.</source>
          <target state="translated">&lt;strong&gt;その他&lt;/strong&gt; -その他。</target>
        </trans-unit>
        <trans-unit id="8cf6a6684f50f3ea7a170aa3398f4403873e6036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameters:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Parameters:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="478ebdcce0e7a6cf53a18ef6273ae4e36f4dc9ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presets&lt;/strong&gt; - In JSCS, there were numerous predefined configurations shipped directly within JSCS. ESLint ships with just one predefined configuration (&lt;code&gt;eslint:recommended&lt;/code&gt;) that has no style rules enabled. However, ESLint does support &lt;a href=&quot;../developer-guide/shareable-configs&quot;&gt;shareable configs&lt;/a&gt;. Shareable configs are configurations that are published on their own to npm and there are shareable configs available for almost all of the JSCS presets (see the &quot;Converting Presets&quot; section below). Additionally, the &quot;preset&quot; option in a configuration file is the equivalent of the ESLint &quot;extends&quot; option.</source>
          <target state="translated">&lt;strong&gt;プリセット&lt;/strong&gt; -JSCSでは、JSCS内に直接出荷された多数の事前定義構成がありました。ESLintには、スタイルルールが有効になっていない定義済み構成（ &lt;code&gt;eslint:recommended&lt;/code&gt; ）が1つだけ付属しています。ただし、ESLintは&lt;a href=&quot;../developer-guide/shareable-configs&quot;&gt;共有可能な構成を&lt;/a&gt;サポートしています。共有可能な構成は、npmに独自に公開される構成であり、ほとんどすべてのJSCSプリセットで利用可能な共有可能な構成があります（以下の「変換プリセット」セクションを参照）。さらに、構成ファイルの「プリセット」オプションは、ESLintの「拡張」オプションと同等です。</target>
        </trans-unit>
        <trans-unit id="9c696028f6af1644c6acfa8977f8a9d95ddde2d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/10125&quot;&gt;eslint/eslint#10125&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint/rfcs#7&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/10125&quot;&gt;eslint / eslint＃10125&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint / rfcs＃7&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d11743e23f5e0719add32b8626153c71ede5152" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/10768&quot;&gt;eslint/eslint#10768&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/issues/10873&quot;&gt;eslint/eslint#10873&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/10768&quot;&gt;eslint / eslint＃10768&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/issues/10873&quot;&gt;eslint / eslint＃10873&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9570d7403523bee0649cc979233838054b90e0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11201&quot;&gt;eslint/eslint#11201&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11201&quot;&gt;eslint / eslint＃11201&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a1352f364143f800b534ad49bf1b88afe8fb865" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11370&quot;&gt;eslint/eslint#11370&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/issues/11405&quot;&gt;eslint/eslint#11405&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11370&quot;&gt;eslint / eslint＃11370&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/issues/11405&quot;&gt;eslint / eslint＃11405&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5cc19ee730984b2d00e99b9abe3a69195a55f2c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11423&quot;&gt;eslint/eslint#11423&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11423&quot;&gt;eslint / eslint＃11423&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb5c2b7ce826d5861457ba15a03402e7a5c6577d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11456&quot;&gt;eslint/eslint#11546&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11456&quot;&gt;eslint / eslint＃11546&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6b0ecaf60230944737d612577b682e88c9bbfa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11473&quot;&gt;eslint/eslint#11473&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11473&quot;&gt;eslint / eslint＃11473&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f5b6da2e886e1772f3ab4fec0748638891213bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11502&quot;&gt;eslint/eslint#11502&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11502&quot;&gt;eslint / eslint＃11502&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a6e01fb628e67b1c3164471cbb18bc9a5c8047a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11503&quot;&gt;eslint/eslint#11503&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11503&quot;&gt;eslint / eslint＃11503&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03f328443143182343b0e7102e74b6baec83b2a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11510&quot;&gt;eslint/eslint#11510&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11510&quot;&gt;eslint / eslint＃11510&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fbf167343a6bb2d759453c0907fd72f00eb08d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11728&quot;&gt;eslint/eslint#11728&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/issues/10125&quot;&gt;eslint/eslint#10125&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint/rfcs#7&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11728&quot;&gt;eslint / eslint＃11728&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/issues/10125&quot;&gt;eslint / eslint＃10125&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint / rfcs＃7&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="26bf2e8da0d7f94ec626e45a80bb23f4ea7b2167" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9505&quot;&gt;eslint/eslint#9505&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9505&quot;&gt;eslint / eslint＃9505&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="69a50620377c84cb31a397fd1730933e6876170d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9687&quot;&gt;eslint/eslint#9687&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/espree/issues/384&quot;&gt;eslint/espree#384&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9687&quot;&gt;eslint / eslint＃9687&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/espree/issues/384&quot;&gt;eslint / espree＃384&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d85f50272f097ff20a2462fcb341c1ec53d175c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9990&quot;&gt;eslint/eslint#9990&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9990&quot;&gt;eslint / eslint＃9990&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="175de1cfda30c6608b16b2b04cb7406c97e262f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/pull/12490&quot;&gt;#12490&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12608&quot;&gt;#12608&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12670&quot;&gt;#12670&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12701&quot;&gt;#12701&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12765&quot;&gt;#12765&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12837&quot;&gt;#12837&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12913&quot;&gt;#12913&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12915&quot;&gt;#12915&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12919&quot;&gt;#12919&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連問題（秒）：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/pull/12490&quot;&gt;＃12490&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12608&quot;&gt;＃12608&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12670&quot;&gt;＃12670&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12701&quot;&gt;＃12701&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12765&quot;&gt;＃12765&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12837&quot;&gt;＃12837&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12913&quot;&gt;＃12913&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12915&quot;&gt;＃12915&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12919&quot;&gt;＃12919&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a353463ede13212c47d0549dcadec40a989023a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/pull/12898&quot;&gt;#12898&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/pull/12898&quot;&gt;＃12898&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9498c0a8e1615d73f96e08ec356d0f8647bef2a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/pull/12920&quot;&gt;#12920&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/pull/12920&quot;&gt;＃12920&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90016aeee17d5eeb3368c3ee0df50181e6b67739" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-additional-lint-targets/README.md&quot;&gt;RFC20&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12677&quot;&gt;#12677&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-additional-lint-targets/README.md&quot;&gt;RFC20&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12677&quot;&gt;＃12677&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="99249aa2bb00f67657d52d0ffa8d998d98c5a514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-changing-base-path-in-config-files-that-cli-options-specify/README.md&quot;&gt;RFC37&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12887&quot;&gt;#12887&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-changing-base-path-in-config-files-that-cli-options-specify/README.md&quot;&gt;RFC37&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12887&quot;&gt;＃12887&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="603f08c72d36fde14a41628e92768c9a6677d0b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-description-in-directive-comments/README.md&quot;&gt;RFC33&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12699&quot;&gt;#12699&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-description-in-directive-comments/README.md&quot;&gt;RFC33&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12699&quot;&gt;＃12699&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8eb8162afa993b556d5b53e50a6b232a4ad1f218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-drop-node8/README.md&quot;&gt;RFC44&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12700&quot;&gt;#12700&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-drop-node8/README.md&quot;&gt;RFC44&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12700&quot;&gt;＃12700&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="35ce03e2d65063207565d29eac950215476df372" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-move-to-async-api/README.md&quot;&gt;RFC40&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12939&quot;&gt;#12939&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-move-to-async-api/README.md&quot;&gt;RFC40&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12939&quot;&gt;＃12939&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2048cd806b920b0d9dac165460246966253d818f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-plugin-loading-improvement/README.md&quot;&gt;RFC47&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12922&quot;&gt;#12922&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-plugin-loading-improvement/README.md&quot;&gt;RFC47&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12922&quot;&gt;＃12922&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d6c3dcf1fd692880b5dea31be472bd1f0cce6840" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-rule-tester-improvements/README.md&quot;&gt;RFC25&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12096&quot;&gt;#12096&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12955&quot;&gt;#12955&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-rule-tester-improvements/README.md&quot;&gt;RFC25&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12096&quot;&gt;＃12096&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12955&quot;&gt;＃12955&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d403d756afdc9e6b6c24ab577c2a301592a3f82f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-update-default-ignore-patterns/README.md&quot;&gt;RFC51&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12888&quot;&gt;#12888&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/blob/master/designs/2019-update-default-ignore-patterns/README.md&quot;&gt;RFC51&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12888&quot;&gt;＃12888&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8eae0a1381872f14248d2e837bdef9b8347dd237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/pull/17&quot;&gt;eslint/rfcs#17&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/pull/17&quot;&gt;eslint / rfcs＃17&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dbeb40a0dfa9d70841fc25cbea97d386230305a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint/rfcs#7&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint / rfcs＃7&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b1b25afe48d5eefc356901fd9bbc37c188819341" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/tree/master/designs/2019-deprecating-personal-config/README.md&quot;&gt;RFC32&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/pull/12678&quot;&gt;#12678&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;関連する問題：&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/tree/master/designs/2019-deprecating-personal-config/README.md&quot;&gt;RFC32&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/pull/12678&quot;&gt;＃12678&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f13297e23427bb54e61678231e790974ac7f0f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Reference | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;戻り値の型：&lt;/strong&gt; &lt;code&gt;Reference | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c600ac93f00bbe066199904ff634a04fb92e332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Scope | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;戻り値の型：&lt;/strong&gt; &lt;code&gt;Scope | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52aba0e4af1c9bc08abed1d9318fafb27d8d9ce7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Scope[] | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;戻り値の型：&lt;/strong&gt; &lt;code&gt;Scope[] | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21755435f998b6c23cd26f2246c08dc01146210c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Variable[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;戻り値の型：&lt;/strong&gt; &lt;code&gt;Variable[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bbfb63d32076d739044ec47055380412d316e10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;戻り型：&lt;/strong&gt; &lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="332190df6c1c50af3cdd19c670dc2cb18f7acd4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rules&lt;/strong&gt; - which rules are enabled and at what error level.</source>
          <target state="translated">&lt;strong&gt;ルール&lt;/strong&gt; -どのルールがどのエラーレベルで有効になっているのか。</target>
        </trans-unit>
        <trans-unit id="09a065f720324325574daed8c05153981da617fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;postprocess&lt;/code&gt; method&lt;/strong&gt; takes a two-dimensional array of arrays of lint messages and the filename. Each item in the input array corresponds to the part that was returned from the &lt;code&gt;preprocess&lt;/code&gt; method. The &lt;code&gt;postprocess&lt;/code&gt; method must adjust the locations of all errors to correspond to locations in the original, unprocessed code, and aggregate them into a single flat array and return it.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;postprocess&lt;/code&gt; 方法は、&lt;/strong&gt;リントメッセージとファイル名の列の2次元配列をとります。入力配列の各項目は、 &lt;code&gt;preprocess&lt;/code&gt; メソッドから返された部分に対応しています。 &lt;code&gt;postprocess&lt;/code&gt; 方法は、元の、未処理コード内の位置に対応するようにすべてのエラーの位置を調整し、単一のフラットアレイにそれらを集約し、それを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="34b590b64e5aa79c3fa18b45a59322291a219656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;preprocess&lt;/code&gt; method&lt;/strong&gt; takes the file contents and filename as arguments, and returns an array of code blocks to lint. The code blocks will be linted separately but still be registered to the filename.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;preprocess&lt;/code&gt; 方法は、&lt;/strong&gt;引数としてファイルの内容およびファイル名をとり、糸くずのコードブロックの配列を返します。コードブロックは個別にリントされますが、ファイル名に登録されます。</target>
        </trans-unit>
        <trans-unit id="b187a38081d30402a3978e56e14522b10ff436a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To Address:&lt;/strong&gt; You should be sure to use a configuration whenever you run ESLint. However, you can still run ESLint without a configuration by passing the &lt;code&gt;--no-eslintrc&lt;/code&gt; option on the command line or setting the &lt;code&gt;useEslintrc&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;CLIEngine&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;対処方法&lt;strong&gt;：&lt;/strong&gt; ESLintを実行するときは、必ず構成を使用する必要があります。しかし、あなたはまだ渡すことによって、設定なしでESLintを実行することができます &lt;code&gt;--no-eslintrc&lt;/code&gt; のコマンドラインでオプションを設定するか、 &lt;code&gt;useEslintrc&lt;/code&gt; のにオプションを &lt;code&gt;false&lt;/code&gt; ため &lt;code&gt;CLIEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="576dd716e844bba5b1c0b942527d1cda249b46a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;対処するには：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12fcbc95bdef4de22beac6b257134cb8a8141ce8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; As per &lt;a href=&quot;rule-deprecation&quot;&gt;our deprecation policy&lt;/a&gt;, the deprecated rules will remain in core for the foreseeable future and are still available for use. However, we will no longer be updating or fixing any bugs in those rules. To use a supported version of the rules, we recommend using the corresponding rules in the plugin instead.</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt; 1として&lt;a href=&quot;rule-deprecation&quot;&gt;、当社の廃止方針&lt;/a&gt;、非推奨ルールは予見可能な将来のためにコアに残り、まだ使用可能であるだろう。ただし、これらのルールのバグを更新または修正することはありません。サポートされているバージョンのルールを使用するには、代わりにプラグインで対応するルールを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="dc9d28a70914ce9eea0e57267f86f3ec660c8322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Convert all of your rule tests to use &lt;code&gt;RuleTester&lt;/code&gt;. If you have this as a test using &lt;code&gt;ESLintTester&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;すべてのルールテストを &lt;code&gt;RuleTester&lt;/code&gt; を使用するように変換します。 &lt;code&gt;ESLintTester&lt;/code&gt; を使用したテストとしてこれがある場合：</target>
        </trans-unit>
        <trans-unit id="08faafd94d313b0362fa5f31b839b0d38b539896" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Ensure that plugins are installed in a place that can be resolved relative to your configuration file or use &lt;code&gt;--resolve-plugins-relative-to .&lt;/code&gt; to override this change.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;プラグインが構成ファイルに関連して解決できる場所にインストールされていることを確認するか、 &lt;code&gt;--resolve-plugins-relative-to .&lt;/code&gt; 使用します。この変更を上書きします。</target>
        </trans-unit>
        <trans-unit id="b8b7e7ec9bb1a59ee9fcf91375208763efd70c59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Fix errors or disable these rules.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;エラーを修正するか、これらのルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="8930c23ebdc44f581f19994b612663831d90e7ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If &lt;code&gt;RuleTester&lt;/code&gt; starts reporting an error about an invalid default, you can remove the &lt;code&gt;default&lt;/code&gt; property at the indicated location in your rule schema, and the rule will behave the same way. (If this happens, you might also want to verify that the rule behaves correctly when no option value is provided in that location.)</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;RuleTester&lt;/code&gt; が無効なデフォルトに関するエラーを報告し始めた場合、ルールスキーマの指定された場所にある &lt;code&gt;default&lt;/code&gt; プロパティを削除でき、ルールは同じように動作します。（これが発生した場合は、その場所にオプション値が指定されていないときにルールが正しく動作することを確認することもできます。）</target>
        </trans-unit>
        <trans-unit id="d6ec9d60e5c2c0d06391a63cbdb3384b8833762f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If this change results in more linting errors in your codebase, you should fix them or reconfigure the rule.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;この変更によりコードベースでリンティングエラーがさらに発生する場合は、修正するか、ルールを再構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="770c5f27964d415381e58600e246b6e2a45ca7fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are currently using &lt;code&gt;--reset&lt;/code&gt;, then you should stop passing &lt;code&gt;--reset&lt;/code&gt; on the command line; no other changes are necessary. If you are not using &lt;code&gt;--reset&lt;/code&gt;, then you should review your configuration to determine which rules should be on by default. You can partially restore some of the default behavior by adding the following to your configuration file:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;現在 &lt;code&gt;--reset&lt;/code&gt; を使用している場合は、コマンドラインで &lt;code&gt;--reset&lt;/code&gt; を渡すのを停止する必要があります。他の変更は必要ありません。 &lt;code&gt;--reset&lt;/code&gt; を使用していない場合は、構成を確認して、デフォルトでオンにするルールを決定する必要があります。以下を構成ファイルに追加することで、デフォルトの動作の一部を部分的に復元できます。</target>
        </trans-unit>
        <trans-unit id="41f076cf8578b53e9f3a8986241de015ab8e0237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are currently using &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; in your project like this:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;現在、プロジェクトで次のように &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; を使用している場合：</target>
        </trans-unit>
        <trans-unit id="f807e75ac117796a23196980a6ad2170f058d220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are exporting a rule schema that checks severity, you need to make several changes:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;重大度をチェックするルールスキーマをエクスポートする場合、いくつかの変更を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="b5e466b2d2419b0bad9ffaf3dce47a73933c8d0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using &lt;code&gt;Scope#through&lt;/code&gt; to find references of a built-in global variable, you need to make several changes.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;Scope#through&lt;/code&gt; を使用して組み込みグローバル変数の参照を検索している場合は、いくつかの変更を行う必要があります。</target>
        </trans-unit>
        <trans-unit id="6cade783a3085679f35a97ecde650748cfd3e0a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using &lt;code&gt;SourceCode&lt;/code&gt; constructor in your code, please parse the source code after it stripped BOM:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;コードで &lt;code&gt;SourceCode&lt;/code&gt; コンストラクターを使用している場合は、BOMを削除した後にソースコードを解析してください。</target>
        </trans-unit>
        <trans-unit id="27ae4cbeef62973e69f3f62ff24d032e27e36eed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using a plugin in your configuration file, you will need to manually enable the plugin rules in the configuration file.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;構成ファイルでプラグインを使用している場合は、構成ファイルでプラグインルールを手動で有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="ba194d634d55561e298dceae820c8d85ef7450c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using any ECMAScript 6 feature flags in &lt;code&gt;ecmaFeatures&lt;/code&gt;, you'll need to use &lt;code&gt;ecmaVersion: 6&lt;/code&gt; instead. The ECMAScript 6 feature flags are:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;ecmaFeatures&lt;/code&gt; でECMAScript 6機能フラグを使用している場合は、代わりに &lt;code&gt;ecmaVersion: 6&lt;/code&gt; を使用する必要があります。ECMAScript 6機能フラグは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2c99a6b84e038c0957a900f5de5d3eb5c3e6ebd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using the exported &lt;code&gt;cli&lt;/code&gt; object, switch to using &lt;code&gt;CLIEngine&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;エクスポートされた &lt;code&gt;cli&lt;/code&gt; オブジェクトを使用している場合は、代わりに &lt;code&gt;CLIEngine&lt;/code&gt; の使用に切り替えます。</target>
        </trans-unit>
        <trans-unit id="a1fbd9e1e8eef6c0b85a3e5ac9a507ed4dae9ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are writing ES6 code, enable the &lt;code&gt;es6&lt;/code&gt; environment if you have not already done so:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ES6コードを &lt;code&gt;es6&lt;/code&gt; いる場合は、es6環境を有効にしていない場合は有効にします。</target>
        </trans-unit>
        <trans-unit id="56ea7ad6e98d40915dba63a00e6e1b16f3173653" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you don't want dotfiles to be matched by an override, consider adding something like &lt;code&gt;excludedFiles: [&quot;.*&quot;]&lt;/code&gt; to that &lt;code&gt;overrides&lt;/code&gt; section. See the &lt;a href=&quot;configuring#configuration-based-on-glob-patterns&quot;&gt;documentation&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;オーバーライドによってドットファイルを一致させたくない場合は、excludeFiles &lt;code&gt;excludedFiles: [&quot;.*&quot;]&lt;/code&gt; ようなものをその &lt;code&gt;overrides&lt;/code&gt; セクションに追加することを検討してください。詳細については、&lt;a href=&quot;configuring#configuration-based-on-glob-patterns&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c8a8953f9702269d96836ee318313f6a9e43c294" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you don't want to be notified by those rules, you can simply disable those rules.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;これらのルールによる通知を受け取りたくない場合は、それらのルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="cf8d63e22446253b1a28eb32a79b01dc479fdd5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you encounter an error about missing files after upgrading to ESLint v5, you may want to double-check that there are no typos in the paths you provide to ESLint. To make the error go away, you can simply remove the given files or globs from the list of arguments provided to ESLint on the command line.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ESLint v5へのアップグレード後にファイルが見つからないというエラーが発生した場合は、ESLintに指定したパスにタイプミスがないことを再確認してください。エラーを解消するには、コマンドラインでESLintに提供された引数のリストから特定のファイルまたはグロブを削除するだけです。</target>
        </trans-unit>
        <trans-unit id="587e0b5e7b7dde8c12b10a870eef785d9451aefe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you get rule option validation errors after upgrading, ensure that any regular expressions in your rule options have no invalid escape sequences.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;アップグレード後にルールオプションの検証エラーが発生した場合は、ルールオプションの正規表現に無効なエスケープシーケンスがないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="5e61d44f9a4e4162710df45256c076cdb5224275" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have &lt;code&gt;--&lt;/code&gt; surrounded by whitespace in directive comments, consider moving it into your configuration file.</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt;あなたが持っている場合 &lt;code&gt;--&lt;/code&gt; ディレクティブコメントで空白に囲まれ、コンフィギュレーションファイルにそれを移動することを検討。</target>
        </trans-unit>
        <trans-unit id="6bcfec1746b4cc64153f8610dfa226533b06a680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have a custom rule that depends on the &lt;code&gt;leadingComments&lt;/code&gt; or &lt;code&gt;trailingComments&lt;/code&gt; properties of an AST node, you can now use &lt;code&gt;sourceCode.getCommentsBefore()&lt;/code&gt; and &lt;code&gt;sourceCode.getCommentsAfter()&lt;/code&gt; instead, respectively.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ASTノードの &lt;code&gt;leadingComments&lt;/code&gt; または &lt;code&gt;trailingComments&lt;/code&gt; プロパティに依存するカスタムルールがある場合、代わりにそれぞれ &lt;code&gt;sourceCode.getCommentsBefore()&lt;/code&gt; および &lt;code&gt;sourceCode.getCommentsAfter()&lt;/code&gt; を使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="21c8ba13c4a7bc74d0557c888eb9c47ee3c701be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have a custom rule that performs operations on comments, some additional logic might be required to ensure that shebang comments are correctly handled or filtered out:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;コメントに対して操作を実行するカスタムルールがある場合、シバンコメントが正しく処理またはフィルター処理されるようにするには、いくつかの追加ロジックが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="8c51915a6fb2ba3acc4a34393b020cc435abafff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have a formatter or integration which relies on using the &lt;code&gt;source&lt;/code&gt; property on individual linting messages, you should update it to use the &lt;code&gt;source&lt;/code&gt; property on file results objects instead.</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt;あなたが使用に依存しているフォーマッタや統合がある場合は &lt;code&gt;source&lt;/code&gt; 個々のリンティングメッセージのプロパティを、あなたが使用することを更新する必要があります &lt;code&gt;source&lt;/code&gt; ファイルの結果にプロパティを代わりにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="907aefd8c1867f5c184569bdf1f2c733e0197711" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have an empty file in your project and you don't want it to be linted, consider adding it to an &lt;a href=&quot;configuring#ignoring-files-and-directories&quot;&gt;&lt;code&gt;.eslintignore&lt;/code&gt; file&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;プロジェクトに空のファイルがあり、それをリントしたくない場合は、&lt;a href=&quot;configuring#ignoring-files-and-directories&quot;&gt; &lt;code&gt;.eslintignore&lt;/code&gt; ファイルに&lt;/a&gt;追加することを検討してください。</target>
        </trans-unit>
        <trans-unit id="d207ee9fbb85e86882b82f80f1d1a22e454fda12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have an integration that deals with the ranges of reported problems, make sure you handle large report ranges in a user-friendly way.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;報告された問題の範囲を処理する統合がある場合は、ユーザーフレンドリーな方法で大きなレポート範囲を処理するようにしてください。</target>
        </trans-unit>
        <trans-unit id="d13d1c2c0ec09db8e58e52cefe33f1faeca1e45d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have an integration that detects all problems with linting runs by checking whether the exit code is equal to 1, update it to check whether the exit code is nonzero instead.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;終了コードが1に等しいかどうかをチェックすることでリンティングの実行に関するすべての問題を検出する統合がある場合は、それを更新して、終了コードがゼロ以外であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="f196fb391f011f0260dd45968583f3c6afac7768" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have both an &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; with ESLint configuration information in the same directory, combine your configurations into just one of those files.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;同じディレクトリにESLint構成情報を含む &lt;code&gt;.eslintrc.*&lt;/code&gt; と &lt;code&gt;package.json&lt;/code&gt; の両方がある場合は、構成をこれらのファイルの1つに結合します。</target>
        </trans-unit>
        <trans-unit id="c2cf3a1f46a8b6afe2db3a742f155b210a48bf89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that enumerates all properties of an AST node, consider excluding the &lt;code&gt;parent&lt;/code&gt; property or implementing cycle detection to ensure that you obtain the correct result.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ASTノードのすべてのプロパティを列挙するカスタムルールを作成した場合は、 &lt;code&gt;parent&lt;/code&gt; プロパティを除外するか、サイクル検出を実装して、正しい結果が得られることを確認してください。</target>
        </trans-unit>
        <trans-unit id="f0521f50b4ea0897fb5d9baf4c1aba7f6664d821" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that relies on rest operators having the &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; type, you should update it to also work with rest operators that have the &lt;code&gt;RestElement&lt;/code&gt; type.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; タイプのレストオペレーターに依存するカスタムルールを作成した場合、 &lt;code&gt;RestElement&lt;/code&gt; タイプのレストオペレーターでも動作するようにルールを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="9a741a6e5457d1d703b33b668c213de4f3bd3949" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that relies on spread operators having the &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; type, you should update it to also work with spread operators that have the &lt;code&gt;SpreadElement&lt;/code&gt; type.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; タイプのスプレッドオペレーターに依存するカスタムルールを作成した場合は、 &lt;code&gt;SpreadElement&lt;/code&gt; タイプのスプレッドオペレーターでも機能するようにルールを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="97813ca617db45c596b02040eff0d9c98cc91b10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that relies on text nodes in JSX elements having the &lt;code&gt;Literal&lt;/code&gt; type, you should update it to also work with nodes that have the &lt;code&gt;JSXText&lt;/code&gt; type.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;Literal&lt;/code&gt; タイプのJSX要素のテキストノードに依存するカスタムルールを作成した場合は、 &lt;code&gt;JSXText&lt;/code&gt; タイプのノードでも機能するようにルールを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="8655c1586aa80f6c2dac1db8eb7cfc6504d64456" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that reports a problem without providing a message, update it to provide a message along with the report.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;メッセージを提供せずに問題を報告するカスタムルールを作成した場合は、レポートとともにメッセージを提供するようにルールを更新します。</target>
        </trans-unit>
        <trans-unit id="93ce1b59082f4ae2bfb0511a01c79675050cbefb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that uses the &lt;code&gt;context.getScope()&lt;/code&gt; method in node handlers, you may need to update it to account for the modified scope information.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;ノードハンドラーで &lt;code&gt;context.getScope()&lt;/code&gt; メソッドを使用するカスタムルールを作成した場合は、変更されたスコープ情報を反映するようにルールを更新する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="089b7d47a2cc86930b289472505870eba900db84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you maintain a rule that uses the &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; property, update it to use the &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; property as a list instead.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; プロパティを使用するルールを維持している場合は、代わりに &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; プロパティをリストとして使用するように更新します。</target>
        </trans-unit>
        <trans-unit id="e16a4648dea2db7e4da75269412175cb302a26b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you reference a scoped NPM package as a plugin in a config file, be sure to include the scope wherever you reference it.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;スコープ指定されたNPMパッケージをプラグインとして構成ファイルで参照する場合は、参照する場所に必ずスコープを含めてください。</target>
        </trans-unit>
        <trans-unit id="b57576e9f49ccb97c8478c916cc243f245ca7b88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you rely on ESLint loading a package like &lt;code&gt;eslint-config-@foo&lt;/code&gt;, consider renaming the package to something else.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;eslint-config-@foo&lt;/code&gt; などのパッケージのロードに依存している場合は、パッケージの名前を別の名前に変更することを検討してください。</target>
        </trans-unit>
        <trans-unit id="771bfe5ae6ad01e83be3811455586a25bd1bf56c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you rely on enumerating all the properties of the &lt;code&gt;eslint&lt;/code&gt; object, use something like &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; to ensure that non-enumerable keys are captured.</source>
          <target state="translated">&lt;strong&gt;アドレスへ：&lt;/strong&gt;あなたは、すべてのプロパティの列挙に依存している場合 &lt;code&gt;eslint&lt;/code&gt; の使用のようなもの、オブジェクトを &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; を非列挙キーが取得されることを保証します。</target>
        </trans-unit>
        <trans-unit id="df4862d99b16336ac052fbd7de6b937b384ff20c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you rely on enumerating the methods of ESLint's Node.js APIs, use a function that can also access non-enumerable properties such as &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt;あなたはESLintのNode.jsのAPIの方法を列挙に依存している場合など、非可算のプロパティにアクセスすることもできます機能を使用 &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d2753e48e2ff870bb5294ecd04c0ac32cf093503" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you see a config validation error after upgrading, verify that your config doesn't contain any typos. If you are using an unrecognized property, you should be able to remove it from your config to restore the previous behavior.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;アップグレード後に構成の検証エラーが表示される場合は、構成にタイプミスがないことを確認してください。認識されないプロパティを使用している場合は、設定から削除して以前の動作に戻すことができるはずです。</target>
        </trans-unit>
        <trans-unit id="5d5035b705eda89a1ab0c7bd8c774c693536ecad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you see config validation errors related to globals after updating, ensure that all values configured for globals are either &lt;code&gt;readonly&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, or &lt;code&gt;off&lt;/code&gt;. (ESLint also accepts some alternate spellings and variants for compatibility.)</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;更新後にグローバルに関連する構成検証エラーが表示される場合は、グローバルに構成されているすべての値が &lt;code&gt;readonly&lt;/code&gt; 、 &lt;code&gt;writable&lt;/code&gt; 、または &lt;code&gt;off&lt;/code&gt; のいずれかであることを確認してください。（ESLintは、互換性のためにいくつかの代替スペルとバリアントも受け入れます。）</target>
        </trans-unit>
        <trans-unit id="91438d242b64b6f41b78e018f2bebd3432720acc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you see new reported errors as a result of this change, ensure that your &lt;code&gt;eslint-disable-line&lt;/code&gt; directives only span a single line. Note that &quot;block comments&quot; (delimited by &lt;code&gt;/* */&lt;/code&gt;) are still allowed to be used for directives, provided that the block comments do not contain linebreaks.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;この変更の結果として新たに報告されたエラーが表示された場合は、 &lt;code&gt;eslint-disable-line&lt;/code&gt; ディレクティブが1行のみに及ぶことを確認してください。「ブロックコメント」（ &lt;code&gt;/* */&lt;/code&gt; 区切られている）は、ブロックコメントに改行が含まれていない限り、引き続きディレクティブに使用できます。</target>
        </trans-unit>
        <trans-unit id="d02aad4fe8cf3ae7e80f1541633f1af83882297d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use &lt;code&gt;RuleTester&lt;/code&gt; to write tests for your custom rules, make sure the expected values in your assertions are strictly equal to the actual values.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;RuleTester&lt;/code&gt; を使用してカスタムルールのテストを作成する場合は、アサーションの期待値が実際の値と完全に等しいことを確認してください。</target>
        </trans-unit>
        <trans-unit id="2def4683d622c7ca990f22929b3d8fd2ec129a28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use &lt;code&gt;parser&lt;/code&gt; property with package names in test cases, update it with &lt;code&gt;require.resolve()&lt;/code&gt; function to resolve the package name to the absolute path to the package.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;テストケースでパッケージ名とともに &lt;code&gt;parser&lt;/code&gt; プロパティを使用する場合は、 &lt;code&gt;require.resolve()&lt;/code&gt; 関数でそれを更新して、パッケージ名をパッケージへの絶対パスに解決します。</target>
        </trans-unit>
        <trans-unit id="8c04e4b55d08a823682aa96facbb1f620bc73449" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use a global installation of ESLint (e.g. installed with &lt;code&gt;npm install eslint --global&lt;/code&gt;) along with plugins, you should install those plugins locally in the projects where you run ESLint. If your config file extends shareable configs and/or parsers, you should ensure that those packages are installed as dependencies of the project containing the config file.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ESLintのグローバルインストール（たとえば、 &lt;code&gt;npm install eslint --global&lt;/code&gt; でインストール）をプラグインと一緒に使用する場合は、ESLint を実行するプロジェクトにそれらのプラグインをローカルにインストールする必要があります。構成ファイルが共有可能な構成やパーサーを拡張する場合、それらのパッケージが構成ファイルを含むプロジェクトの依存関係としてインストールされていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="932a8a0b5d53f352ef6e81141b400f1099c1cc90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use an &lt;code&gt;.eslintignore&lt;/code&gt; file and you frequently run ESLint from somewhere other than the project root, it's possible that the patterns will be matched differently. You should update the patterns in the &lt;code&gt;.eslintignore&lt;/code&gt; file to ensure they are relative to the file, not to the working directory.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;.eslintignore&lt;/code&gt; ファイルを使用していて、ESLintをプロジェクトルート以外の場所から頻繁に実行している場合、パターンの一致が異なる可能性があります。 &lt;code&gt;.eslintignore&lt;/code&gt; ファイル内のパターンを更新して、作業ディレクトリではなくファイルに関連するようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="2a41e765e3b022b9ee6cacf0dd0cc958e025067c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use deprecated globals in the &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;browser&lt;/code&gt;, or &lt;code&gt;jest&lt;/code&gt; environments, you can add a &lt;code&gt;globals&lt;/code&gt; section to your configuration to re-enable any globals you need. For example:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;node&lt;/code&gt; 、 &lt;code&gt;browser&lt;/code&gt; 、または &lt;code&gt;jest&lt;/code&gt; 環境で非推奨のグローバルを使用している場合は、 &lt;code&gt;globals&lt;/code&gt; セクションを構成に追加して、必要なグローバルを再度有効にすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="384c76e78f089df83dae56f3eaf33a46d087f0e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option, you should be able to upgrade to ESLint v5 without any changes, but you will encounter a deprecation warning. To avoid the warning, use &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; in your config file rather than &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt;. If you would like to disallow the use of other ES2018 features, consider using rules such as &lt;a href=&quot;../rules/no-restricted-syntax&quot;&gt;&lt;code&gt;no-restricted-syntax&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを使用する場合、変更なしでESLint v5にアップグレードできるはずですが、非推奨の警告が表示されます。警告を回避するには、設定ファイルで &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; ではなく &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; を使用します。他のES2018機能の使用を許可しない場合は、&lt;a href=&quot;../rules/no-restricted-syntax&quot;&gt; &lt;code&gt;no-restricted-syntax&lt;/code&gt; &lt;/a&gt;などのルールの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="01db37c8acaa658a6bb43b82b83e0401cb1ad69d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option, you should change your config to contain this instead:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを使用する場合は、代わりにこれを含むように構成を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="d4c689e103cb28d77f2578eb10b0a1a4a6cbe60d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you want to mimic how &lt;code&gt;eslint:recommended&lt;/code&gt; worked in v2.x, you can use the following:</source>
          <target state="translated">&lt;strong&gt;対処&lt;/strong&gt;方法 &lt;code&gt;eslint:recommended&lt;/code&gt; がv2.xでどのように機能するかを模倣したい場合は、以下を使用できます。</target>
        </trans-unit>
        <trans-unit id="d8019bb3aa93a5e4dae201b5bfa1578295dffe98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you were using the &lt;code&gt;global&lt;/code&gt; property, please use the &lt;code&gt;globals&lt;/code&gt; property instead, which does the same thing.</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt;あなたが使用していた場合は &lt;code&gt;global&lt;/code&gt; プロパティを、使用してください &lt;code&gt;globals&lt;/code&gt; 同じことを代わりにプロパティを。</target>
        </trans-unit>
        <trans-unit id="c27b3129b5cebb205cf63438684e2accda668e14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you would like to maintain the previous behavior, update your configuration for &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; by adding &lt;code&gt;{&quot;max&quot;: 2}&lt;/code&gt;, and change &lt;code&gt;func-style&lt;/code&gt; to &lt;code&gt;&quot;declaration&quot;&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;strong&gt;アドレスへ：&lt;/strong&gt;あなたは、以前の動作を維持するためにあなたの設定更新したい場合は &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; 追加することによって &lt;code&gt;{&quot;max&quot;: 2}&lt;/code&gt; 、および変更 &lt;code&gt;func-style&lt;/code&gt; に &lt;code&gt;&quot;declaration&quot;&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="d063f796a1fd8df02ce0b2b81e55064b5aaf28f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you're using &lt;code&gt;Linter&lt;/code&gt; with a custom parser, use &lt;a href=&quot;../developer-guide/nodejs-api#linterdefineparser&quot;&gt;&lt;code&gt;Linter#defineParser&lt;/code&gt;&lt;/a&gt; to explicitly define the parser before linting any code.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;カスタムパーサーで &lt;code&gt;Linter&lt;/code&gt; を使用している場合は、コードを&lt;a href=&quot;../developer-guide/nodejs-api#linterdefineparser&quot;&gt; &lt;code&gt;Linter#defineParser&lt;/code&gt; &lt;/a&gt;する前に、Linter＃defineParserを使用してパーサーを明示的に定義します。</target>
        </trans-unit>
        <trans-unit id="a657be2b85aec590670ffc3351944457ebd3919a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you've created an editor integration, or a tool that had to correct the column number, you'll need to update to just pass through the column number from ESLint. Otherwise, no change is necessary.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;エディターの統合、または列番号を修正する必要があるツールを作成した場合は、ESLintから列番号を通過させるだけに更新する必要があります。それ以外の場合、変更は必要ありません。</target>
        </trans-unit>
        <trans-unit id="7b0f91e6af4c0a67887070073ef1922afdcd7e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If your config sets &lt;code&gt;ecmaVersion&lt;/code&gt; to something other than a number, you can restore the previous behavior by removing &lt;code&gt;ecmaVersion&lt;/code&gt;. (However, you may want to double-check that your config is actually working as expected.) If your config sets &lt;code&gt;parserOptions: { sourceType: &quot;module&quot; }&lt;/code&gt; without also setting &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt;, you should add &lt;code&gt;parserOptions: { ecmaVersion: 2015 }&lt;/code&gt; to restore the previous behavior.</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt;あなたの設定は、設定した場合 &lt;code&gt;ecmaVersion&lt;/code&gt; を数以外に、あなたは削除することで、以前の動作を復元することができ &lt;code&gt;ecmaVersion&lt;/code&gt; を。（ただし、実際に構成が期待どおりに機能していることを再確認することをお &lt;code&gt;parserOptions: { sourceType: &quot;module&quot; }&lt;/code&gt; ます。）構成でparserOptions：{sourceType： &quot;module&quot;}を設定し、 &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; も設定しない場合は、 &lt;code&gt;parserOptions: { ecmaVersion: 2015 }&lt;/code&gt; 追加する必要があります。以前の動作を復元します。</target>
        </trans-unit>
        <trans-unit id="d6ff72762e9c2760c32f1fc4fc00dd7d80b6fbbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If your tests for custom rules have extra properties, you should remove those properties.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;カスタムルールのテストに追加のプロパティがある場合は、それらのプロパティを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="f472fde2bcf15025ec6cea9c37475bc3a49d3fd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Instead of relying on &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComment&lt;/code&gt;, rules can now use &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; to get all comments in a file. To check all comments of a specific type, rules can use the following pattern:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;LineComment&lt;/code&gt; と &lt;code&gt;BlockComment&lt;/code&gt; に依存する代わりに、ルールで &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; を使用してファイル内のすべてのコメントを取得できるようになりました。特定のタイプのすべてのコメントをチェックするには、ルールで次のパターンを使用できます。</target>
        </trans-unit>
        <trans-unit id="3991457302791a2ccf0e89f9e9beb8a7e37d9b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Make sure you upgrade to at least Node.js 6 when using ESLint v5. If you are unable to upgrade, we recommend continuing to use ESLint v4.x until you are able to upgrade Node.js.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ESLint v5を使用する場合は、少なくともNode.js 6にアップグレードしてください。アップグレードできない場合は、Node.jsをアップグレードできるようになるまで、ESLint v4.xを引き続き使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="19b9dd9ffb0b3c605455b34509820a64afccf522" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Make sure you upgrade to at least Node.js 8 when using ESLint v6. If you are unable to upgrade, we recommend continuing to use ESLint v5.x until you are able to upgrade Node.js.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ESLint v6を使用する場合は、少なくともNode.js 8にアップグレードしてください。アップグレードできない場合は、Node.jsをアップグレードできるようになるまで、ESLint v5.xを引き続き使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8a0ac73e97dc4317f21f5b4f5dd4950b883ee9da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Make sure you upgrade to at least Node.js &lt;code&gt;10.12.0&lt;/code&gt; when using ESLint v7.0.0. One important thing to double check is the Node.js version supported by your editor when using ESLint via editor integrations. If you are unable to upgrade, we recommend continuing to use ESLint 6 until you are able to upgrade Node.js.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;10.12.0&lt;/code&gt; を使用する場合は、少なくともNode.js10.12.0にアップグレードしてください。再確認する重要なことの1つは、エディター統合を介してESLintを使用するときにエディターでサポートされているNode.jsのバージョンです。アップグレードできない場合は、Node.jsをアップグレードできるようになるまでESLint6を引き続き使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7b65fb29bf0fa1c8f5c4e0bacf9440614d7dadcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Modify your &lt;code&gt;.eslintignore&lt;/code&gt; or the &lt;code&gt;ignorePatterns&lt;/code&gt; property of your config file if you don't want to lint &lt;code&gt;bower_components/*&lt;/code&gt; and &lt;code&gt;.eslintrc.js&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;bower_components/*&lt;/code&gt; および &lt;code&gt;.eslintrc.js&lt;/code&gt; をリントしたくない場合は、構成ファイルの &lt;code&gt;.eslintignore&lt;/code&gt; または &lt;code&gt;ignorePatterns&lt;/code&gt; プロパティを変更します。</target>
        </trans-unit>
        <trans-unit id="2d86b1603cfe1be7a55c7c2f084701c4aa69aa11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Modify your rule or test case if existing test cases fail.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;既存のテストケースが失敗した場合は、ルールまたはテストケースを変更します。</target>
        </trans-unit>
        <trans-unit id="7d39ef9aaca85a45541412a643098b1d43bfa66c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Remove &lt;code&gt;~/.eslintrc.*&lt;/code&gt; configuration files and add a &lt;code&gt;.eslintrc.*&lt;/code&gt; configuration file to your project. Alternatively, use the &lt;code&gt;--config&lt;/code&gt; option to use shared config files.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;~/.eslintrc.*&lt;/code&gt; 構成ファイルを削除し、 &lt;code&gt;.eslintrc.*&lt;/code&gt; 構成ファイルをプロジェクトに追加します。または、 &lt;code&gt;--config&lt;/code&gt; オプションを使用して、共有構成ファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="247eb16e84dcf6771a5cd04c4fa93f82225f23ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the &lt;code&gt;eslint:recommended&lt;/code&gt; behavior from 3.x, you can disable these rules in a config file:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; 3.xからの &lt;code&gt;eslint:recommended&lt;/code&gt; 動作を模倣するには、構成ファイルでこれらのルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1513d5e57c50f48dec7ed680ce7a5a40192356a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the &lt;code&gt;eslint:recommended&lt;/code&gt; behavior from 4.x, you can disable these rules in a config file:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; 4.xの &lt;code&gt;eslint:recommended&lt;/code&gt; 動作を模倣するには、構成ファイルでこれらのルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="54fc81d9e8a3e8a0668fcf3702d5750b98c0abf6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the &lt;code&gt;eslint:recommended&lt;/code&gt; behavior from 5.x, you can explicitly disable/enable rules in a config file as follows:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; 5.xからの &lt;code&gt;eslint:recommended&lt;/code&gt; 動作を模倣するには、次のように構成ファイルでルールを明示的に無効化/有効化できます。</target>
        </trans-unit>
        <trans-unit id="416d6ba52d8d24552229dac5193497ac7375e930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the default config from 3.x, you can use:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; 3.xのデフォルト設定を模倣するには、以下を使用できます。</target>
        </trans-unit>
        <trans-unit id="ec581a37ebf9accbf967fe0fabaa5354c89f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To restore the rule behavior from ESLint v4, you can update your config file to include the previous options:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; ESLint v4からルールの動作を復元するには、前のオプションを含めるように構成ファイルを更新します。</target>
        </trans-unit>
        <trans-unit id="3f86ba22cf88980873f13987085312ccdafd8a1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Update the affected paths if you are using a configuration or ignore file via the &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;--ignore-path&lt;/code&gt; CLI options.</source>
          <target state="translated">&lt;strong&gt;アドレスへ：&lt;/strong&gt;更新影響を受けたパス設定を使用するかを経由してファイルを無視している場合 &lt;code&gt;--config&lt;/code&gt; または &lt;code&gt;--ignore-path&lt;/code&gt; CLIオプション。</target>
        </trans-unit>
        <trans-unit id="36e3b7dcc27dce8a1b3fe2a8a25e3dd62e6ae999" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Update your code to use the new &lt;code&gt;ESLint&lt;/code&gt; class if you are currently using &lt;code&gt;CLIEngine&lt;/code&gt;. The following table maps the existing &lt;code&gt;CLIEngine&lt;/code&gt; methods to their &lt;code&gt;ESLint&lt;/code&gt; counterparts:</source>
          <target state="translated">&lt;strong&gt;アドレスに：&lt;/strong&gt;新しい使用するようにコードを更新 &lt;code&gt;ESLint&lt;/code&gt; の現在使用している場合は、クラスを &lt;code&gt;CLIEngine&lt;/code&gt; を。次の表は、既存のマップする &lt;code&gt;CLIEngine&lt;/code&gt; の自分にメソッドを &lt;code&gt;ESLint&lt;/code&gt; の対応：</target>
        </trans-unit>
        <trans-unit id="31b77bddb418a5910a2058e8be339d1d8c983199" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Using the &lt;code&gt;--ext&lt;/code&gt; CLI option will override this new behavior. Run ESLint with &lt;code&gt;--ext .js&lt;/code&gt; if you are using &lt;code&gt;overrides&lt;/code&gt; but only want to lint files that have a &lt;code&gt;.js&lt;/code&gt; extension.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;--ext&lt;/code&gt; CLIオプションを使用すると、この新しい動作が上書きされます。 &lt;code&gt;overrides&lt;/code&gt; を使用しているが、拡張子が &lt;code&gt;.js&lt;/code&gt; のファイルのみをリントしたい場合は、 &lt;code&gt;--ext .js&lt;/code&gt; 指定してESLintを実行します。</target>
        </trans-unit>
        <trans-unit id="b5e334b9b8c1b05fd9a886cd98c56fc14f47ed1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; We expect the impact of this issue to be very low because most shareable configs don't use &lt;code&gt;overrides&lt;/code&gt; blocks. However, if you use a shareable config with &lt;code&gt;overrides&lt;/code&gt; blocks, you might encounter a change in behavior due to something that is explicitly specified in your config but was inactive until now. If you would rather inherit the behavior from the shareable config, simply remove the corresponding entry from your own config. (In the example above, the previous behavior could be restored by removing &lt;code&gt;semi: &quot;off&quot;&lt;/code&gt; from &lt;code&gt;.eslintrc.js&lt;/code&gt;.)</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;ほとんどの共有可能な構成は &lt;code&gt;overrides&lt;/code&gt; ブロックを使用しないため、この問題の影響は非常に小さいと予想されます。ただし、 &lt;code&gt;overrides&lt;/code&gt; ブロックで共有可能な構成を使用する場合、構成で明示的に指定されているものの、現在まで非アクティブであったために、動作が変更される可能性があります。共有可能な設定から動作を継承したい場合は、自分の設定から対応するエントリを削除するだけです。 （上記の例では、 &lt;code&gt;.eslintrc.js&lt;/code&gt; から &lt;code&gt;semi: &quot;off&quot;&lt;/code&gt; 削除することで、以前の動作を復元できます。）</target>
        </trans-unit>
        <trans-unit id="2eb7b39d41b7eba1b375099a8306c792b28a00a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; We recommend upgrading without changing your &lt;code&gt;indent&lt;/code&gt; configuration, and fixing any new indentation errors that appear in your codebase. However, if you want to mimic how the &lt;code&gt;indent&lt;/code&gt; rule worked in 3.x, you can update your configuration:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt; &lt;code&gt;indent&lt;/code&gt; 設定を変更せずにアップグレードし、コードベースに表示される新しいインデントエラーを修正することをお勧めします。ただし、 &lt;code&gt;indent&lt;/code&gt; ルールが3.xでどのように機能するかを模倣したい場合は、構成を更新できます。</target>
        </trans-unit>
        <trans-unit id="5448e647d1e18b8d154e70830c65d3ca281f27ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You can remove the non-existent rule in your (inline) config.</source>
          <target state="translated">&lt;strong&gt;対処方法：（&lt;/strong&gt;インライン）構成で存在しないルールを削除できます。</target>
        </trans-unit>
        <trans-unit id="258d65c83b7009266afa690a745fa8360311a395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You can restore the previous default behavior of the rule with:</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;ルールを以前のデフォルトの動作に戻すには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6d86228b26c28b3684eba95a90b5647e0f918ed6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You'll need to update your rule configurations to use the new rules. ESLint v1.0.0 will also warn you when you're using a rule that has been removed and will suggest the replacement rules. Hopefully, this will result in few surprises during the upgrade process.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;新しいルールを使用するには、ルール設定を更新する必要があります。ESLint v1.0.0は、削除されたルールを使用しているときにも警告し、置換ルールを提案します。うまくいけば、これはアップグレードプロセス中にいくつかの驚きをもたらすでしょう。</target>
        </trans-unit>
        <trans-unit id="44c64f85451fdde8fc3e5c5ba6dd407f68548a57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You'll need to update your rule configurations to use the new rules. ESLint v2.0.0 will also warn you when you're using a rule that has been removed and will suggest the replacement rules. Hopefully, this will result in few surprises during the upgrade process.</source>
          <target state="translated">&lt;strong&gt;対処方法：&lt;/strong&gt;新しいルールを使用するには、ルール設定を更新する必要があります。ESLint v2.0.0は、削除されたルールを使用しているときにも警告し、置換ルールを提案します。うまくいけば、これはアップグレードプロセス中にいくつかの驚きをもたらすでしょう。</target>
        </trans-unit>
        <trans-unit id="97a5526a5ada884ec86f1b6da70ee21b4903d17b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;ASTNode | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ab6019f558b59757ac38ebadacdec6259b91761" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode | undefined | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;ASTNode | undefined | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d6feb4f8364f23f0762c4393f5bbbb273cddcb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80fd28baa41a9e3c7c8727587a99aff5ec535f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a378958772ebf1a161b9c3e72909a3a55ed82f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Definition[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Definition[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2da3b971c96f631825ad04dbf8b4d303c9967ffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Map&amp;lt;string, Variable&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;Map&amp;lt;string, Variable&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2438c848579dbaa8779c8306f1c65c23fdeacd29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Map&amp;lt;string, boolean&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;Map&amp;lt;string, boolean&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92251fe75e52951a303a026f484f69cfef77aa06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Reference[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Reference[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60abdbc401d84bb32a9cb0260d994a6ae6e2f1aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;Scope | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b121b96e01956cb2ea86298f8b70b0650f3cd36c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0e9fdc725b8ea9f58f56be7c9222dd98788cc219" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9838d44d4785d1084ed93bf9fdef936c32cd25d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Variable | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;Variable | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04e60ad93ca62b50f3f6e8c758fe0f26ffa69e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Variable[]&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Variable[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="065aeffd64b55779e6665647b1f2bf408b580573" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a57f66aafb9f93efb062089ab9897cdf052d5120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;number | undefined | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;number | undefined | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="363e8dc93cca8bc600627e60044c5a563aae006f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef5e80bb801bf5debe255dec06519da8976703cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;string | undefined | null&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;タイプ：&lt;/strong&gt; &lt;code&gt;string | undefined | null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a876dbc9023a0657cc28e3d65b8aab30cbad7834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ec0a4b892636f7a0221b21073a02240fe72d8df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unique.&lt;/strong&gt; No two rules can produce the same warning. Overlapping rules confuse end users and there is an expectation that core ESLint rules do not overlap.</source>
          <target state="translated">&lt;strong&gt;ユニーク。&lt;/strong&gt;2つのルールが同じ警告を生成することはありません。重複するルールはエンドユーザーを混乱させ、ESLintのコアルールが重複しないことが期待されます。</target>
        </trans-unit>
        <trans-unit id="cf67d99b50404ab4358e9e339b1b708bcab25ed7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: When using this option, it is possible that new errors will start being reported whenever ESLint or custom rules are upgraded. For example, suppose a rule has a bug that causes it to report a false positive, and an &lt;code&gt;eslint-disable&lt;/code&gt; comment is added to suppress the incorrect report. If the bug is then fixed in a patch release of ESLint, the &lt;code&gt;eslint-disable&lt;/code&gt; comment will become unused since ESLint is no longer generating an incorrect report. This will result in a new reported error for the unused directive if the &lt;code&gt;report-unused-disable-directives&lt;/code&gt; option is used.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：このオプションを使用すると、ESLintまたはカスタムルールがアップグレードされるたびに、新しいエラーが報告され始める可能性があります。たとえば、ルールに誤 &lt;code&gt;eslint-disable&lt;/code&gt; を報告させるバグがあり、誤ったレポートを抑制するためにeslint-disableコメントが追加されているとします。ESLintのパッチリリースでバグが修正された場合、ESLintは誤ったレポートを生成しないため、 &lt;code&gt;eslint-disable&lt;/code&gt; コメントは使用されなくなります。これにより、 &lt;code&gt;report-unused-disable-directives&lt;/code&gt; オプションが使用されている場合、未使用のディレクティブに対して新たに報告されるエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="690b7b8d94a1b3c9d962ba1e289c660831b66f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Widely applicable.&lt;/strong&gt; The rules we distribute need to be of importance to a large number of developers. Individual preferences for uncommon patterns are not supported.</source>
          <target state="translated">&lt;strong&gt;広く適用されます。&lt;/strong&gt;私たちが配布するルールは、多くの開発者にとって重要である必要があります。一般的でないパターンの個別の設定はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b7e9f07f31c58b5e90255be8dd4e9357ec5ea649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;YAML&lt;/strong&gt; - use &lt;code&gt;.eslintrc.yaml&lt;/code&gt; or &lt;code&gt;.eslintrc.yml&lt;/code&gt; to define the configuration structure.</source>
          <target state="translated">&lt;strong&gt;YAML&lt;/strong&gt; - &lt;code&gt;.eslintrc.yaml&lt;/code&gt; または &lt;code&gt;.eslintrc.yml&lt;/code&gt; を使用して構成構造を定義します。</target>
        </trans-unit>
        <trans-unit id="6317608d852f5d6ad914b27925033eb82c9a3e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;column&lt;/strong&gt;: the column where the issue is located.</source>
          <target state="translated">&lt;strong&gt;column&lt;/strong&gt;：問題が配置されている列。</target>
        </trans-unit>
        <trans-unit id="c793f9da1e8e133aff3fa2bad00a6d31fdba9a7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errorCount&lt;/strong&gt;: The number of errors for the given file.</source>
          <target state="translated">&lt;strong&gt;errorCount&lt;/strong&gt;：指定されたファイルのエラーの数。</target>
        </trans-unit>
        <trans-unit id="6a543f31705d32791f173cab2adcad503f396575" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filePath&lt;/strong&gt;: The absolute path to the file that was linted.</source>
          <target state="translated">&lt;strong&gt;filePath&lt;/strong&gt;：&lt;strong&gt;リンクさ&lt;/strong&gt;れたファイルへの絶対パス。</target>
        </trans-unit>
        <trans-unit id="cea4713b9a2a74cb12b6d5b5fe7828d0536c07ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;line&lt;/strong&gt;: the line where the issue is located.</source>
          <target state="translated">&lt;strong&gt;line&lt;/strong&gt;：問題が存在する行。</target>
        </trans-unit>
        <trans-unit id="854fbee9878a2d6895114384f126d4f013d10900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;message&lt;/strong&gt;: the human readable description of the error.</source>
          <target state="translated">&lt;strong&gt;message&lt;/strong&gt;：人間が読める形式のエラーの説明。</target>
        </trans-unit>
        <trans-unit id="2c17ea1c475856f663a432014483567ba55bb191" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;messages&lt;/strong&gt;: An array of &lt;code&gt;message&lt;/code&gt; objects. See below for more info about messages.</source>
          <target state="translated">&lt;strong&gt;messages&lt;/strong&gt;： &lt;code&gt;message&lt;/code&gt; オブジェクトの配列。メッセージの詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="6765e88da537247c90435e6a324b1062059fc3fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;nodeType&lt;/strong&gt;: the type of the node in the &lt;a href=&quot;https://github.com/estree/estree/blob/master/spec.md#node-objects&quot;&gt;AST&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;nodeType&lt;/strong&gt;：&lt;a href=&quot;https://github.com/estree/estree/blob/master/spec.md#node-objects&quot;&gt;AST&lt;/a&gt;内のノードのタイプ</target>
        </trans-unit>
        <trans-unit id="ecaaa539bfcc75f4a627ffdf411f6db7d696f895" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;output&lt;/strong&gt;: The source code for the given file with as many fixes applied as possible. This property is omitted if no fix is available.</source>
          <target state="translated">&lt;strong&gt;output&lt;/strong&gt;：できるだけ多くの修正が適用された、指定されたファイルのソースコード。修正が利用できない場合、このプロパティは省略されます。</target>
        </trans-unit>
        <trans-unit id="edf4ab88e9d76bbc1db7e3e4f3a15e8073f7f66d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package.json&lt;/strong&gt; - create an &lt;code&gt;eslintConfig&lt;/code&gt; property in your &lt;code&gt;package.json&lt;/code&gt; file and define your configuration there.</source>
          <target state="translated">&lt;strong&gt;package.json&lt;/strong&gt; - &lt;code&gt;package.json&lt;/code&gt; ファイルに &lt;code&gt;eslintConfig&lt;/code&gt; プロパティを作成し、そこで構成を定義します。</target>
        </trans-unit>
        <trans-unit id="0c36fc10e4db3d87c7e40b5bfcb948a6a13aa9fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ruleId&lt;/strong&gt;: the ID of the rule that produced the error or warning.</source>
          <target state="translated">&lt;strong&gt;ruleId&lt;/strong&gt;：エラーまたは警告を生成したルールのID。</target>
        </trans-unit>
        <trans-unit id="c109eeec65f43a816559dc91fe2767810c7df9a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;severity&lt;/strong&gt;: the severity of the failure, &lt;code&gt;1&lt;/code&gt; for warnings and &lt;code&gt;2&lt;/code&gt; for errors.</source>
          <target state="translated">&lt;strong&gt;severity&lt;/strong&gt;：失敗の重大度 &lt;code&gt;1&lt;/code&gt; は警告、 &lt;code&gt;2&lt;/code&gt; はエラー。</target>
        </trans-unit>
        <trans-unit id="57dc6fa09a500c31ce3a0e575d3599f23582d063" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;source&lt;/strong&gt;: The source code for the given file. This property is omitted if this file has no errors/warnings or if the &lt;code&gt;output&lt;/code&gt; property is present.</source>
          <target state="translated">&lt;strong&gt;source&lt;/strong&gt;：指定されたファイルのソースコード。このファイルにエラー/警告がない場合、または &lt;code&gt;output&lt;/code&gt; プロパティが存在する場合、このプロパティは省略されます。</target>
        </trans-unit>
        <trans-unit id="7d06a59a13d8a1e231cb9ac165a8acbbdd84a946" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;warningCount&lt;/strong&gt;: The number of warnings for the given file.</source>
          <target state="translated">&lt;strong&gt;warningCount&lt;/strong&gt;：指定されたファイルの警告の数。</target>
        </trans-unit>
        <trans-unit id="e5bb7e063e087e28e2ba54b1ad62519de9907a17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;※1&lt;/strong&gt; Only if the configured parser provided the block-scope feature. The default parser provides the block-scope feature if &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; is not less than &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;※1&lt;/strong&gt;設定したパーサーがブロックスコープ機能を備えている場合のみ。 &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; が &lt;code&gt;6&lt;/code&gt; 以上の場合、デフォルトのパーサーはブロックスコープ機能を提供します。</target>
        </trans-unit>
        <trans-unit id="6b5b1372f368e9f1781486b1cdf873f6b6e922da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;※2&lt;/strong&gt; Only if the &lt;code&gt;for&lt;/code&gt; statement defines the iteration variable as a block-scoped variable (E.g., &lt;code&gt;for (let i = 0;;) {}&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;※2 &lt;/strong&gt; &lt;code&gt;for&lt;/code&gt; 文で繰り返し変数をブロックスコープ変数として定義した場合のみ（例： &lt;code&gt;for (let i = 0;;) {}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="09f95d6c9ec993bf1003f5d6d554fb0443bff70d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;※3&lt;/strong&gt; The scope of the closest ancestor node which has own scope. If the closest ancestor node has multiple scopes then it chooses the innermost scope (E.g., the &lt;code&gt;Program&lt;/code&gt; node has a &lt;code&gt;global&lt;/code&gt; scope and a &lt;code&gt;module&lt;/code&gt; scope if &lt;code&gt;Program#sourceType&lt;/code&gt; is &lt;code&gt;&quot;module&quot;&lt;/code&gt;. The innermost scope is the &lt;code&gt;module&lt;/code&gt; scope.).</source>
          <target state="translated">&lt;strong&gt;※3&lt;/strong&gt;独自のスコープを持つ直近の祖先ノードのスコープ。最も近い祖先ノードに複数のスコープがある場合、最も内側のスコープを選択します（たとえば、 &lt;code&gt;Program#sourceType&lt;/code&gt; が &lt;code&gt;&quot;module&quot;&lt;/code&gt; の場合、 &lt;code&gt;Program&lt;/code&gt; ノードには &lt;code&gt;global&lt;/code&gt; スコープと &lt;code&gt;module&lt;/code&gt; スコープがあり &lt;code&gt;module&lt;/code&gt; 。最も内側のスコープはモジュールスコープです）。</target>
        </trans-unit>
        <trans-unit id="02dd576fcd740e7b5e9d1205a01abf4062eb573e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;The examples in this section were adapted from the &lt;a href=&quot;https://github.com/estools/esquery&quot;&gt;esquery&lt;/a&gt; documentation.&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;このセクションの例は、&lt;a href=&quot;https://github.com/estools/esquery&quot;&gt;esqueryの&lt;/a&gt;ドキュメントを基にしています。&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="03c6124784996ca17201568f44be632340e6b1a5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../developer-guide/shareable-configs&quot;&gt;sharable configuration&lt;/a&gt; is an npm package that exports a configuration object. Make sure the package has been installed to a directory where ESLint can require it.</source>
          <target state="translated">&lt;a href=&quot;../developer-guide/shareable-configs&quot;&gt;共有可能な構成は、&lt;/a&gt;構成オブジェクトをエクスポートNPMパッケージです。ESLintが必要とするディレクトリにパッケージがインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="7e3808288d05eda6a0a0bc6617b661283e01236f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../developer-guide/working-with-plugins&quot;&gt;plugin&lt;/a&gt; is an npm package that usually exports rules. Some plugins also export one or more named &lt;a href=&quot;../developer-guide/working-with-plugins#configs-in-plugins&quot;&gt;configurations&lt;/a&gt;. Make sure the package has been installed to a directory where ESLint can require it.</source>
          <target state="translated">&lt;a href=&quot;../developer-guide/working-with-plugins&quot;&gt;プラグインは&lt;/a&gt;通常のルールをエクスポートNPMパッケージです。一部のプラグインは、1つ以上の名前付き&lt;a href=&quot;../developer-guide/working-with-plugins#configs-in-plugins&quot;&gt;構成&lt;/a&gt;もエクスポートします。ESLintが必要とするディレクトリにパッケージがインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="1a0fff9a243305a444f630687fb971bc9bdfe21c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;.eslintrc.js&lt;/code&gt;, &lt;code&gt;.eslintrc.json&lt;/code&gt;, &lt;code&gt;.eslintrc.yml&lt;/code&gt;, &lt;code&gt;.eslintrc.yaml&lt;/code&gt;, or &lt;code&gt;.eslintrc&lt;/code&gt; file either in your project or home directory.</source>
          <target state="translated">&lt;code&gt;.eslintrc.js&lt;/code&gt; 、 &lt;code&gt;.eslintrc.json&lt;/code&gt; 、 &lt;code&gt;.eslintrc.yml&lt;/code&gt; 、 &lt;code&gt;.eslintrc.yaml&lt;/code&gt; 、または &lt;code&gt;.eslintrc&lt;/code&gt; プロジェクトやホームディレクトリ内のファイルのいずれか。</target>
        </trans-unit>
        <trans-unit id="f3619e056c08299691ba58f3ad597b15a5f58a85" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;catch&lt;/code&gt; clause that only rethrows the original error is redundant, and has no effect on the runtime behavior of the program. These redundant clauses can be a source of confusion and code bloat, so it's better to disallow these unnecessary &lt;code&gt;catch&lt;/code&gt; clauses.</source>
          <target state="translated">元のエラーのみを再スローする &lt;code&gt;catch&lt;/code&gt; 句は冗長であり、プログラムの実行時の動作には影響しません。これらの冗長な句は混乱とコードの膨張の原因となる可能性があるため、これらの不要な &lt;code&gt;catch&lt;/code&gt; 句を許可しない方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="0a389d325d348388839c0ea0782dd37813615760" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fixing&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;fixing&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="afc4e0872788b98de54fe4422f2e108e57fa3981" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for&lt;/code&gt; loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as &lt;code&gt;while&lt;/code&gt; loops. More typically, an infinite for loop is a bug.</source>
          <target state="translated">A &lt;code&gt;for&lt;/code&gt; 、このような間違った方向に移動すると、無限に実行されることをカウンターで一人として、到達することはできません停止条件とループ。無限ループが意図されている場合もありますが、慣例では、 &lt;code&gt;while&lt;/code&gt; ループのようなループを構築します。より一般的には、無限ループはバグです。</target>
        </trans-unit>
        <trans-unit id="2cd8c1349fe0d5d2b91629e8af2a67df9488040b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;return;&lt;/code&gt; statement with nothing after it is redundant, and has no effect on the runtime behavior of a function. This can be confusing, so it's better to disallow these redundant statements.</source>
          <target state="translated">&lt;code&gt;return;&lt;/code&gt; 後に何もないステートメントは冗長であり、関数の実行時の動作には影響しません。これは混乱を招く可能性があるため、これらの冗長なステートメントを許可しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f8ef46dd6199641ff0b874e0663ddd3afebdf4cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;switch&lt;/code&gt; statement can optionally have a &lt;code&gt;default&lt;/code&gt; clause.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; 文は、必要に応じて持つことができ &lt;code&gt;default&lt;/code&gt; 句を。</target>
        </trans-unit>
        <trans-unit id="427cd3d37ea17c688301c4da2e2f301a2ab49185" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;yield&lt;/code&gt; or &lt;code&gt;await&lt;/code&gt; expression interrupts the assignment after the old value is read, and before the new value is set.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; や &lt;code&gt;await&lt;/code&gt; 古い値が読み込まれた後に式が割り当てを中断し、新しい値が設定される前に。</target>
        </trans-unit>
        <trans-unit id="a8008f59ac6bd0272b139f77f91c4eaec29b91f9" translate="yes" xml:space="preserve">
          <source>A base configuration is provided to CLIEngine using the &lt;code&gt;baseConfig&lt;/code&gt; option.</source>
          <target state="translated">基本構成は、 &lt;code&gt;baseConfig&lt;/code&gt; オプションを使用してCLIEngineに提供されます。</target>
        </trans-unit>
        <trans-unit id="e28f9cb5b2f38c73f333a34c925f89046619923e" translate="yes" xml:space="preserve">
          <source>A better coding convention for lists and object literals in JavaScript by isaacs</source>
          <target state="translated">JavaScriptにおけるリストとオブジェクトリテラルのためのより良いコーディング規約 by isaacs</target>
        </trans-unit>
        <trans-unit id="d49d168e597f86961f6dcfcf63c7b9fc77704bde" translate="yes" xml:space="preserve">
          <source>A blank space should appear after commas in argument lists.</source>
          <target state="translated">引数リストでは、カンマの後に空白を入れるようにしました。</target>
        </trans-unit>
        <trans-unit id="ef78cae4223417784fc081e3049bf82c27f50e97" translate="yes" xml:space="preserve">
          <source>A boolean to specify if numbers used as array indexes are considered okay. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">配列インデックスとして使用される数値が問題ないと見なされるかどうかを指定するブール。デフォルトでは &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b7b9c7e87b07ab8e6b27ae07b3318b9229c238c" translate="yes" xml:space="preserve">
          <source>A boolean to specify if numbers used in default value assignments are considered okay. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">デフォルト値の割り当てで使用される数値が問題ないと見なされるかどうかを指定するブール値。デフォルトでは &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ecfb57e8d83833b6672bf2fe7c3041c7c3250ac2" translate="yes" xml:space="preserve">
          <source>A boolean to specify if numbers used in the context of array indexes (e.g., &lt;code&gt;data[2]&lt;/code&gt;) are considered okay. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">配列インデックス（例： &lt;code&gt;data[2]&lt;/code&gt; ）のコンテキストで使用される数値が問題ないと見なされるかどうかを指定するブール値。デフォルトでは &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58cc5d7724902bc0ab2d7f5534386b2ad9db7d72" translate="yes" xml:space="preserve">
          <source>A boolean to specify if we should check for the const keyword in variable declaration of numbers. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">数値の変数宣言でconstキーワードをチェックする必要があるかどうかを指定するブール値。デフォルトでは &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8cedb82f008edd3bab5474e2a26c1601087ba6d" translate="yes" xml:space="preserve">
          <source>A boolean to specify if we should detect numbers when setting object properties for example. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">たとえば、オブジェクトのプロパティを設定するときに数値を検出する必要があるかどうかを指定するブール値。デフォルトでは &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25a836ff88ff9ac017f2c0ded333e7db070f9c18" translate="yes" xml:space="preserve">
          <source>A boolean value that defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; is set to true, the check will take into account the use of &lt;code&gt;Object.create&lt;/code&gt;, &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and &lt;code&gt;Reflect.defineProperty&lt;/code&gt;.</source>
          <target state="translated">デフォルトが &lt;code&gt;false&lt;/code&gt; のブール値。場合 &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; が trueに設定され、チェックが考慮の使用かかります &lt;code&gt;Object.create&lt;/code&gt; 、 &lt;code&gt;Object.defineProperty&lt;/code&gt; 、 &lt;code&gt;Object.defineProperties&lt;/code&gt; 、および &lt;code&gt;Reflect.defineProperty&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a5b15bec3881a375f3e36051b0e45319e9cb7dfa" translate="yes" xml:space="preserve">
          <source>A boolean value that defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt; is set to true, &lt;code&gt;module.exports&lt;/code&gt; and &lt;code&gt;module[&quot;exports&quot;]&lt;/code&gt; will be checked by this rule.</source>
          <target state="translated">デフォルトが &lt;code&gt;false&lt;/code&gt; のブール値。場合 &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt; が trueに設定され、 &lt;code&gt;module.exports&lt;/code&gt; はと &lt;code&gt;module[&quot;exports&quot;]&lt;/code&gt; 、このルールによってチェックされます。</target>
        </trans-unit>
        <trans-unit id="d392c027987959cf72d4b9853225e2e854601add" translate="yes" xml:space="preserve">
          <source>A code block has two properties &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt;; the &lt;code&gt;text&lt;/code&gt; property is the content of the block and the &lt;code&gt;filename&lt;/code&gt; property is the name of the block. Name of the block can be anything, but should include the file extension, that would tell the linter how to process the current block. The linter will check &lt;a href=&quot;../user-guide/command-line-interface#--ext&quot;&gt;&lt;code&gt;--ext&lt;/code&gt; CLI option&lt;/a&gt; to see if the current block should be linted, and resolve &lt;code&gt;overrides&lt;/code&gt; configs to check how to process the current block.</source>
          <target state="translated">コードブロックには、 &lt;code&gt;text&lt;/code&gt; と &lt;code&gt;filename&lt;/code&gt; 2つのプロパティがあります。 &lt;code&gt;text&lt;/code&gt; プロパティは、ブロックの内容で、 &lt;code&gt;filename&lt;/code&gt; プロパティは、ブロックの名前です。ブロックの名前は任意ですが、現在のブロックの処理方法をリンターに伝えるファイル拡張子を含める必要があります。&lt;a href=&quot;../user-guide/command-line-interface#--ext&quot;&gt; &lt;code&gt;--ext&lt;/code&gt; CLIオプション&lt;/a&gt;をチェックして現在のブロックをリンティングする必要があるかどうかを確認し、 &lt;code&gt;overrides&lt;/code&gt; 構成を解決して現在のブロックの処理方法をチェックします。</target>
        </trans-unit>
        <trans-unit id="64eea8b8a1570a4ad89b64de14a057281d21a3ef" translate="yes" xml:space="preserve">
          <source>A common suggestion to avoid this problem would be to wrap the inside of the &lt;code&gt;for&lt;/code&gt; loop with &lt;code&gt;users.hasOwnProperty(id)&lt;/code&gt;. However, if this rule is strictly enforced throughout your codebase you won't need to take that step.</source>
          <target state="translated">この問題を回避するための一般的な提案は、 &lt;code&gt;for&lt;/code&gt; ループの内側を &lt;code&gt;users.hasOwnProperty(id)&lt;/code&gt; でラップすることです。ただし、このルールがコードベース全体に厳密に適用されている場合、その手順を実行する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2d60456477141b8b709fcd647cee4d38da3405ac" translate="yes" xml:space="preserve">
          <source>A common use case for this option is to avoid useless renaming when the identifier is not intended to be used later in the code.</source>
          <target state="translated">このオプションの一般的な使用例は、コードの中で識別子を後で使用することを意図していない場合に、 無駄な名前の変更を避けるためです。</target>
        </trans-unit>
        <trans-unit id="a0b21754babbfe85667b0e2efa5cf5de9ec46843" translate="yes" xml:space="preserve">
          <source>A configuration file can extend the set of enabled rules from base configurations.</source>
          <target state="translated">設定ファイルは、基本設定から有効なルールのセットを拡張することができます。</target>
        </trans-unit>
        <trans-unit id="55883fdd5b9ae6a9a3a826f2405d1dbe3a0d2fed" translate="yes" xml:space="preserve">
          <source>A configuration file passed on the command line using &lt;code&gt;-c&lt;/code&gt; (or to CLIEngine using &lt;code&gt;configFile&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; を使用してコマンドラインで（または &lt;code&gt;configFile&lt;/code&gt; を使用してCLIEngineに）渡される構成ファイル。</target>
        </trans-unit>
        <trans-unit id="d16c6623d752e6bb2d6001c0a413fae9b0ced782" translate="yes" xml:space="preserve">
          <source>A configuration is an object which has 3 properties; &lt;code&gt;blankLine&lt;/code&gt;, &lt;code&gt;prev&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;. For example, &lt;code&gt;{ blankLine: &quot;always&quot;, prev: &quot;var&quot;, next: &quot;return&quot; }&lt;/code&gt; means &quot;one or more blank lines are required between a variable declaration and a &lt;code&gt;return&lt;/code&gt; statement.&quot; You can supply any number of configurations. If a statement pair matches multiple configurations, the last matched configuration will be used.</source>
          <target state="translated">構成は、3つのプロパティを持つオブジェクトです。 &lt;code&gt;blankLine&lt;/code&gt; 、 &lt;code&gt;prev&lt;/code&gt; および &lt;code&gt;next&lt;/code&gt; 。たとえば、 &lt;code&gt;{ blankLine: &quot;always&quot;, prev: &quot;var&quot;, next: &quot;return&quot; }&lt;/code&gt; は、 &quot;変数宣言と &lt;code&gt;return&lt;/code&gt; ステートメントの間に1つ以上の空白行が必要である&quot;ことを意味します。構成はいくつでも指定できます。ステートメントのペアが複数の構成と一致する場合、最後に一致した構成が使用されます。</target>
        </trans-unit>
        <trans-unit id="20e05403cd1ed3924830384794a2169931e37d6c" translate="yes" xml:space="preserve">
          <source>A confusing aspect of JavaScript is that a function returns &lt;code&gt;undefined&lt;/code&gt; if any of the following are true:</source>
          <target state="translated">JavaScriptの紛らわしい側面は、以下のいずれかに該当する場合、関数が &lt;code&gt;undefined&lt;/code&gt; を返すことです。</target>
        </trans-unit>
        <trans-unit id="b6b8b178eb884eddcdef7dfcdc5d1458ee22bc10" translate="yes" xml:space="preserve">
          <source>A constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior. For example, the following code looks as if it is not ready for production.</source>
          <target state="translated">テスト条件としての定数式(例えばリテラル)は、特定の動作のためのタイプミスや開発のトリガーになっている可能性があります。例えば、以下のコードは、まるで本番に向けて準備ができていないかのように見えます。</target>
        </trans-unit>
        <trans-unit id="43ef8f442efa45ca28465cdb5709982cce56b8d9" translate="yes" xml:space="preserve">
          <source>A criticism of the Single Var Pattern in JavaScript, and a simple alternative</source>
          <target state="translated">JavaScriptにおけるSingle Varパターンの批判と簡単な代替案</target>
        </trans-unit>
        <trans-unit id="86af3e246df7da9e6606e3119d58789e53135d52" translate="yes" xml:space="preserve">
          <source>A file provided on the command line does not exist</source>
          <target state="translated">コマンドラインで提供されたファイルが存在しない</target>
        </trans-unit>
        <trans-unit id="ac0f8365160b25f524152aaae9aa2a1eda0000c5" translate="yes" xml:space="preserve">
          <source>A formatter that only cares about the total count of errors and warnings will look like this:</source>
          <target state="translated">エラーと警告の合計数だけを気にするフォーマッタは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="836d7f5bf58c6c5d4d4a624f7d1ee3a0a7646a0b" translate="yes" xml:space="preserve">
          <source>A getter and setter for the same property don't necessarily have to be defined adjacent to each other.</source>
          <target state="translated">同じプロパティのゲッターとセッターは必ずしも隣接して定義されている必要はありません。</target>
        </trans-unit>
        <trans-unit id="5c7f11d210d922ba42114538c835a711d4da81d4" translate="yes" xml:space="preserve">
          <source>A glob or folder provided on the command line does not match any lintable files</source>
          <target state="translated">コマンドラインで提供された glob またはフォルダが lintable ファイルと一致しません。</target>
        </trans-unit>
        <trans-unit id="81ab6c931da3b6d371be8a93021d9e9b0d48645d" translate="yes" xml:space="preserve">
          <source>A glob specific configuration can have &lt;code&gt;extends&lt;/code&gt; setting, but the &lt;code&gt;root&lt;/code&gt; property in the extended configs is ignored. The &lt;code&gt;ignorePatterns&lt;/code&gt; property in the extended configs is used only for the files the glob specific configuration matched.</source>
          <target state="translated">グロブ固有の構成には &lt;code&gt;extends&lt;/code&gt; 設定を含めることができますが、拡張構成の &lt;code&gt;root&lt;/code&gt; プロパティは無視されます。拡張構成の &lt;code&gt;ignorePatterns&lt;/code&gt; プロパティは、glob固有の構成が一致したファイルにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="b522d213270e7f352fb5949b49df3ae85baa01a7" translate="yes" xml:space="preserve">
          <source>A glob specific configuration works almost the same as any other ESLint config. Override blocks can contain any configuration options that are valid in a regular config, with the exception of &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;ignorePatterns&lt;/code&gt;.</source>
          <target state="translated">グロブ固有の構成は、他のESLint構成とほぼ同じように機能します。オーバーライドブロックには、 &lt;code&gt;root&lt;/code&gt; および &lt;code&gt;ignorePatterns&lt;/code&gt; を除いて、通常の構成で有効な構成オプションを含めることができます。</target>
        </trans-unit>
        <trans-unit id="206b9feb0f4bbb8e333ef78a8e28833be8f4c5ae" translate="yes" xml:space="preserve">
          <source>A keyword followed by a parenthesis should be separated by a space.</source>
          <target state="translated">キーワードの後に括弧をつける場合は、スペースで区切る必要があります。</target>
        </trans-unit>
        <trans-unit id="a25b0a4a01a0fa0cb35fab86df6cc5fb0278bfe8" translate="yes" xml:space="preserve">
          <source>A line of code containing too many statements can be difficult to read. Code is generally read from the top down, especially when scanning, so limiting the number of statements allowed on a single line can be very beneficial for readability and maintainability.</source>
          <target state="translated">あまりにも多くのステートメントを含むコードの行は、読みにくくなる可能性があります。コードは一般的に、特にスキャン時には上から下へと読み込まれるので、1行に許可されるステートメントの数を制限することは、可読性と保守性の面で非常に有益です。</target>
        </trans-unit>
        <trans-unit id="fea0b553a8c75392fcd7215872f705a2b5d41b58" translate="yes" xml:space="preserve">
          <source>A loop that can never reach the second iteration is a possible error in the code.</source>
          <target state="translated">2回目の反復に到達できないループは、コード内のエラーの可能性があります。</target>
        </trans-unit>
        <trans-unit id="bfdb73170961eda63243d915f3c732b85dd2985f" translate="yes" xml:space="preserve">
          <source>A module in Node.js is a simple or complex functionality organized in a JavaScript file which can be reused throughout the Node.js application. The keyword &lt;code&gt;require&lt;/code&gt; is used in Node.js/CommonJS to import modules into an application. This way you can have dynamic loading where the loaded module name isn't predefined /static, or where you conditionally load a module only if it's &quot;truly required&quot;.</source>
          <target state="translated">Node.jsのモジュールは、Node.jsアプリケーション全体で再利用できるJavaScriptファイルに整理された単純または複雑な機能です。キーワード &lt;code&gt;require&lt;/code&gt; は、Node.js / CommonJSでモジュールをアプリケーションにインポートするために使用されます。このようにして、ロードされたモジュール名が事前定義されていない/ staticである動的ロード、または「本当に必要な」場合にのみ条件付きでモジュールをロードすることができます。</target>
        </trans-unit>
        <trans-unit id="4e913c7680534d6cb99080f78a2661196f66cafe" translate="yes" xml:space="preserve">
          <source>A more complex report will look something like this:</source>
          <target state="translated">より複雑なレポートを作成すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="308dd0db07bb7acf7df7d9b6b57f161aa88b87d2" translate="yes" xml:space="preserve">
          <source>A more detailed breakdown of supported patterns and directories ESLint ignores by default can be found in &lt;a href=&quot;configuring#ignoring-files-and-directories&quot;&gt;Configuring ESLint&lt;/a&gt;.</source>
          <target state="translated">ESLintがデフォルトで無視するサポートされているパターンとディレクトリの詳細な内訳は、&lt;a href=&quot;configuring#ignoring-files-and-directories&quot;&gt;ESLintの設定にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5f24536f4837bf59d260b3c116ca923e95986c97" translate="yes" xml:space="preserve">
          <source>A name of &lt;a href=&quot;../user-guide/formatters/index&quot;&gt;built-in formatters&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/formatters/index&quot;&gt;組み込みフォーマッターの&lt;/a&gt;名前。</target>
        </trans-unit>
        <trans-unit id="575b2d931afc6e0399849bc47d0e35b312f3114f" translate="yes" xml:space="preserve">
          <source>A name of &lt;a href=&quot;https://www.npmjs.com/search?q=eslintformatter&quot;&gt;third-party formatters&lt;/a&gt;. For examples:</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/search?q=eslintformatter&quot;&gt;サードパーティのフォーマッターの&lt;/a&gt;名前。例えば：</target>
        </trans-unit>
        <trans-unit id="11f95a5a52d06fa719a2b5d0e69c8f678b2e9461" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks between arguments of a function call.</source>
          <target state="translated">多くのスタイルガイドでは、関数呼び出しの引数間の改行を要求したり、禁止したりしています。</target>
        </trans-unit>
        <trans-unit id="eacd1564ab62e8653cfd111bed2b118e40aadb40" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks between array elements.</source>
          <target state="translated">多くのスタイルガイドでは、配列要素間の改行を要求したり、禁止したりしています。</target>
        </trans-unit>
        <trans-unit id="b6daa5b1d39d0ececccc70c8f1cdb04d99e441cc" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks inside of array brackets.</source>
          <target state="translated">多くのスタイルガイドでは、配列カッコの中での改行を要求したり、禁止したりしています。</target>
        </trans-unit>
        <trans-unit id="ba799235c50035c5b374a07ef2c2489a022d92f0" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks inside of object braces and other tokens.</source>
          <target state="translated">多くのスタイルガイドでは、オブジェクトの中括弧や他のトークンの中で改行を要求したり、禁止したりしています。</target>
        </trans-unit>
        <trans-unit id="0173ae7c66b71705fbe3bf702c3a75f916fc100b" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow spaces between array brackets and other tokens. This rule applies to both array literals and destructuring assignments (ECMAScript 6).</source>
          <target state="translated">多くのスタイルガイドでは、配列カッコと他のトークンの間にスペースを要求したり、禁止したりしています。この規則は、配列リテラルとデストラクチャリング代入の両方に適用されます(ECMAScript 6)。</target>
        </trans-unit>
        <trans-unit id="6685f6247b9014739a73df049fb6cc36b0707e79" translate="yes" xml:space="preserve">
          <source>A path to the file that defines a formatter. The path must contain one or more path separators (&lt;code&gt;/&lt;/code&gt;) in order to distinguish if it's a path or not. For example, start with &lt;code&gt;./&lt;/code&gt;.</source>
          <target state="translated">フォーマッターを定義するファイルへのパス。パスがパスであるかどうかを区別するために、パスには1つ以上のパス区切り文字（ &lt;code&gt;/&lt;/code&gt; ）が含まれている必要があります。たとえば、。 &lt;code&gt;./&lt;/code&gt; で始まります。</target>
        </trans-unit>
        <trans-unit id="96e7763e5080c827a61b70944488cf0e26f29ada" translate="yes" xml:space="preserve">
          <source>A pattern that's becoming more common is to give function expressions names to aid in debugging. For example:</source>
          <target state="translated">一般的になりつつあるパターンは、デバッグを助けるために関数式に名前をつけることです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ea5cdd669b54ca8ffb4b5b8c7c790d4b0d11fa08" translate="yes" xml:space="preserve">
          <source>A read-only global variable can be a built-in ES global (e.g. &lt;code&gt;Array&lt;/code&gt;), an environment specific global (e.g. &lt;code&gt;window&lt;/code&gt; in the browser environment), or a global variable defined as &lt;code&gt;readonly&lt;/code&gt; in the configuration file or in a &lt;code&gt;/*global */&lt;/code&gt; comment.</source>
          <target state="translated">読み取り専用のグローバル変数は、組み込みのESグローバル（例： &lt;code&gt;Array&lt;/code&gt; ）、環境固有のグローバル（例：ブラウザー環境の &lt;code&gt;window&lt;/code&gt; ）、または構成ファイルまたは &lt;code&gt;/*global */&lt;/code&gt; &lt;code&gt;readonly&lt;/code&gt; として定義されたグローバル変数です。/コメント。</target>
        </trans-unit>
        <trans-unit id="9e0054f9727b38ae6114afa1db04f33844004776" translate="yes" xml:space="preserve">
          <source>A return statement with a value should not use parentheses unless they make the return value more obvious in some way. Example:</source>
          <target state="translated">値を持つ戻り値の文は、戻り値が何らかの方法でより明白になる場合を除き、括弧を使用すべきではありません。例。</target>
        </trans-unit>
        <trans-unit id="8f17ce2af731b0cf58f28e612f21a508401014a8" translate="yes" xml:space="preserve">
          <source>A rule can use the current node and its surrounding tree to report or fix problems.</source>
          <target state="translated">ルールは、現在のノードとその周囲のツリーを使用して、問題を報告または修正することができます。</target>
        </trans-unit>
        <trans-unit id="4be5e6a9bd29b708e70db8babc0b03b78dbd1c85" translate="yes" xml:space="preserve">
          <source>A selector is a string that can be used to match nodes in an Abstract Syntax Tree (AST). This is useful for describing a particular syntax pattern in your code.</source>
          <target state="translated">セレクタは、抽象構文ツリー (AST)のノードにマッチさせるために使用できる文字列です。これはコードに特定の構文パターンを記述するのに便利です。</target>
        </trans-unit>
        <trans-unit id="6915f26f7dc1530331a66cc13216ce9e856f8f57" translate="yes" xml:space="preserve">
          <source>A simple fix for this problem could be to rewrite the offending line from scratch. This might also be a problem introduced by the text editor: if rewriting the line does not fix it, try using a different editor.</source>
          <target state="translated">この問題の簡単な解決策は、問題のある行を最初から書き換えることです。これはテキストエディタの問題かもしれません:行を書き換えても解決しない場合は、別のエディタを使ってみてください。</target>
        </trans-unit>
        <trans-unit id="a3e71be966e5f1571ea9763af48e414a021cf939" translate="yes" xml:space="preserve">
          <source>A strict mode directive is a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; literal at the beginning of a script or function body. It enables strict mode semantics.</source>
          <target state="translated">ストリクトモードディレクティブは、スクリプトまたは関数本体の先頭にある &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; リテラルです。厳格モードのセマンティクスを有効にします。</target>
        </trans-unit>
        <trans-unit id="9c57440c6b4f6db8e00e8b319bccc1d1604f8ba4" translate="yes" xml:space="preserve">
          <source>A string which must be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; (the default), to enforce initialization at declaration, or &lt;code&gt;&quot;never&quot;&lt;/code&gt; to disallow initialization during declaration. This rule applies to &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt; variables, however &lt;code&gt;&quot;never&quot;&lt;/code&gt; is ignored for &lt;code&gt;const&lt;/code&gt; variables, as unassigned &lt;code&gt;const&lt;/code&gt;s generate a parse error.</source>
          <target state="translated">宣言時の初期化を強制する &lt;code&gt;&quot;always&quot;&lt;/code&gt; （デフォルト）、または宣言時の初期化を禁止する &lt;code&gt;&quot;never&quot;&lt;/code&gt; でなければならない文字列。このルールが適用される &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、と &lt;code&gt;const&lt;/code&gt; 変数、しかし &lt;code&gt;&quot;never&quot;&lt;/code&gt; では無視されていない &lt;code&gt;const&lt;/code&gt; 割り当てられていないとして、変数 &lt;code&gt;const&lt;/code&gt; sがパースエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="9575765dd4d7230fd057ffcbe983765b294ae80e" translate="yes" xml:space="preserve">
          <source>A test case is an object with the following properties:</source>
          <target state="translated">テストケースは、以下のプロパティを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="25402932feca00f38e09e6ca5b7c31477fe21891" translate="yes" xml:space="preserve">
          <source>A variable &lt;code&gt;foo&lt;/code&gt; is considered to be used if any of the following are true:</source>
          <target state="translated">変数 &lt;code&gt;foo&lt;/code&gt; は、次のいずれかに該当する場合に使用されていると見なされます。</target>
        </trans-unit>
        <trans-unit id="d66ca9673a95b3a663eaf3f3446fa9ff9cf7c024" translate="yes" xml:space="preserve">
          <source>A variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks. This is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity. Note that &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings&quot;&gt;block bindings&lt;/a&gt; (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;) are not hoisted and therefore they are not affected by this rule.</source>
          <target state="translated">変数の宣言は、他のブロック内に深くネストされていても、ステートメントが実行できる場所であればどこでも許可されます。変数の巻き上げにより、これは望ましくないことが多く、宣言をプログラムまたは関数本体のルートに移動すると、わかりやすくなる場合があります。&lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings&quot;&gt;ブロックバインディング&lt;/a&gt;（ &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; ）はホイストされないため、このルールの影響を受けないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c94d0d2ff85b4c8409e8498075e6309cbae9ef3f" translate="yes" xml:space="preserve">
          <source>A variable is &lt;em&gt;not&lt;/em&gt; considered to be used if it is only ever declared (&lt;code&gt;var foo = 5&lt;/code&gt;) or assigned to (&lt;code&gt;foo = 7&lt;/code&gt;).</source>
          <target state="translated">変数が宣言されている（ &lt;code&gt;var foo = 5&lt;/code&gt; ）か、割り当てられている（ &lt;code&gt;foo = 7&lt;/code&gt; ）だけの場合、その変数は使用されているとは見なされ&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a874a11ae4a94e3610adc77e83b5927c07b204ca" translate="yes" xml:space="preserve">
          <source>A variable or property is reassigned to a new value which is based on its old value.</source>
          <target state="translated">変数またはプロパティは、その古い値に基づいた新しい値に再割り当てされます。</target>
        </trans-unit>
        <trans-unit id="7dd32e4a288d5369cb2e79caa2870b11139743be" translate="yes" xml:space="preserve">
          <source>A way to determine the node types as defined by &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; is to use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;で定義されているノードタイプを特定する方法は、&lt;a href=&quot;https://astexplorer.net/&quot;&gt;ASTエクスプローラ&lt;/a&gt;をespreeパーサーで使用することです。</target>
        </trans-unit>
        <trans-unit id="2271b14edc45904cc47bb0f92baf4a74500757a6" translate="yes" xml:space="preserve">
          <source>ALE</source>
          <target state="translated">ALE</target>
        </trans-unit>
        <trans-unit id="e70d4e47700375d0be401f693c74eef6991b7082" translate="yes" xml:space="preserve">
          <source>AST Node Type</source>
          <target state="translated">ASTノードタイプ</target>
        </trans-unit>
        <trans-unit id="c446c962a2b4445cdb957511e0b5cc3393b8d123" translate="yes" xml:space="preserve">
          <source>AST Nodes no longer have comment properties</source>
          <target state="translated">ASTノードがコメントプロパティを持たなくなった</target>
        </trans-unit>
        <trans-unit id="d6692192c75f1af7938f07f9f1af0696b6f6b2d6" translate="yes" xml:space="preserve">
          <source>AST node type: &lt;code&gt;ForStatement&lt;/code&gt;</source>
          <target state="translated">ASTノードタイプ： &lt;code&gt;ForStatement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bf40cf26a73c367ed22afa40853e78a88516d25" translate="yes" xml:space="preserve">
          <source>AST nodes no longer have comment properties</source>
          <target state="translated">ASTノードがコメントプロパティを持たなくなった</target>
        </trans-unit>
        <trans-unit id="bd34e75aa7865f007f08ac294fd329a2d8cd24e1" translate="yes" xml:space="preserve">
          <source>About &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; について</target>
        </trans-unit>
        <trans-unit id="062e0e828a9d9112137faebc7569d53ad6b18eaa" translate="yes" xml:space="preserve">
          <source>About Complexity</source>
          <target state="translated">複雑さについて</target>
        </trans-unit>
        <trans-unit id="b779c06c341c07ca1ffb8dd81ce10a4a085087a6" translate="yes" xml:space="preserve">
          <source>Accepting a Rule</source>
          <target state="translated">ルールを受け入れる</target>
        </trans-unit>
        <trans-unit id="81be0e1ba0ee31f4985c9d67dada1b00da7487bc" translate="yes" xml:space="preserve">
          <source>Accepting a Rule Change</source>
          <target state="translated">ルールの変更を受け入れる</target>
        </trans-unit>
        <trans-unit id="ca36c601812025fe58057e92a05f6f683d6d84fa" translate="yes" xml:space="preserve">
          <source>Access further control over this rule's behavior via an options object.</source>
          <target state="translated">オプションオブジェクトを使用して、このルールの動作をさらに制御します。</target>
        </trans-unit>
        <trans-unit id="2e08a06dd2fa9ae5c39052ab6543bc1691e9530b" translate="yes" xml:space="preserve">
          <source>Access the file system</source>
          <target state="translated">ファイルシステムにアクセスする</target>
        </trans-unit>
        <trans-unit id="35b88db2f1e9e841f51c72fd0f61599541bb7876" translate="yes" xml:space="preserve">
          <source>Accessing Code Paths</source>
          <target state="translated">コードパスへのアクセス</target>
        </trans-unit>
        <trans-unit id="bfb10a773b7cebdf807ce0cc70fe3dc0fe02182e" translate="yes" xml:space="preserve">
          <source>Accessing Comments</source>
          <target state="translated">コメントへのアクセス</target>
        </trans-unit>
        <trans-unit id="6d55809203eb5aff13f4e06c5c7e2bf1fb26217b" translate="yes" xml:space="preserve">
          <source>Accessing Shebangs</source>
          <target state="translated">シーバンズへのアクセス</target>
        </trans-unit>
        <trans-unit id="7706485af3af832462d09475d2669526c29e13d8" translate="yes" xml:space="preserve">
          <source>Accessing an array element through a computed index will fall under the category &lt;code&gt;object&lt;/code&gt; destructuring.</source>
          <target state="translated">計算されたインデックスを介して配列要素にアクセスすると、カテゴリ &lt;code&gt;object&lt;/code&gt; の構造化に分類されます。</target>
        </trans-unit>
        <trans-unit id="460c13f18291c5bc04269d7fad531d4041f17a30" translate="yes" xml:space="preserve">
          <source>Accessing an object property whose key is an integer will fall under the category &lt;code&gt;array&lt;/code&gt; destructuring.</source>
          <target state="translated">キーが整数であるオブジェクトプロパティへのアクセスは、カテゴリ &lt;code&gt;array&lt;/code&gt; の構造化に分類されます。</target>
        </trans-unit>
        <trans-unit id="8a776847f4d167c1b25e573491e2e435b11aa5da" translate="yes" xml:space="preserve">
          <source>Accessing comments</source>
          <target state="translated">コメントへのアクセス</target>
        </trans-unit>
        <trans-unit id="69ebcd59e2591617f7f8f6024f21a857d0c7360a" translate="yes" xml:space="preserve">
          <source>Actually labeled statements in JavaScript can be used with other than loop and switch statements. However, this way is ultra rare, not well-known, so this would be confusing developers.</source>
          <target state="translated">実はJavaScriptのラベル付き文は、ループ文やスイッチ文以外にも使うことができます。しかし、この方法は非常に稀で、よく知られていないので、開発者を混乱させることになります。</target>
        </trans-unit>
        <trans-unit id="02c3b754dfbd93ab56540aade8e2c3f780191601" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;supportsAutofix: true&lt;/code&gt; property to the processor.</source>
          <target state="translated">プロセッサに &lt;code&gt;supportsAutofix: true&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="00858d2635ba9c2a9c7ac282d89b7f6cbcebc9c4" translate="yes" xml:space="preserve">
          <source>Add these &lt;code&gt;keywords&lt;/code&gt; to help users find your formatter:</source>
          <target state="translated">次の &lt;code&gt;keywords&lt;/code&gt; を追加して、ユーザーがフォーマッターを見つけやすくします。</target>
        </trans-unit>
        <trans-unit id="b19ea4bd9e18d3a1a7038fa04e68cdf64a34ab3f" translate="yes" xml:space="preserve">
          <source>Add these keywords into your &lt;code&gt;package.json&lt;/code&gt; file to make it easy for others to find.</source>
          <target state="translated">これらのキーワードを &lt;code&gt;package.json&lt;/code&gt; ファイルに追加して、他のユーザーが簡単に見つけられるようにします。</target>
        </trans-unit>
        <trans-unit id="3b0ba8ee04639b15125daec80a1aac00deaef410" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;:exit&lt;/code&gt; to the end of a selector will cause the listener to be called when the matching nodes are exited during traversal, rather than when they are entered.</source>
          <target state="translated">セレクタの最後に &lt;code&gt;:exit&lt;/code&gt; を追加すると、トラバース中に一致するノードが終了したときではなく、終了したときにリスナーが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b45b75823c55d8218979c87efd326a30b99d5341" translate="yes" xml:space="preserve">
          <source>Adding Shared Settings</source>
          <target state="translated">共有設定の追加</target>
        </trans-unit>
        <trans-unit id="474d40db0ddeac1b2a8f15efaa569bdb7394c2a2" translate="yes" xml:space="preserve">
          <source>Adding newlines visibly separates the return statements from the previous lines, making it clear where the function exits and what value it returns:</source>
          <target state="translated">改行を追加すると、戻り値の文が前の行から目に見えて分離され、関数がどこで終了し、どのような値を返すのかが明確になります。</target>
        </trans-unit>
        <trans-unit id="f21fc61dc4820e7abd9d84a4d1d6ad03d3036bb0" translate="yes" xml:space="preserve">
          <source>Adding the second &lt;code&gt;bar&lt;/code&gt; in the above example is optional. If you leave off the function name then when the function throws an exception you are likely to get something similar to &lt;code&gt;anonymous function&lt;/code&gt; in the stack trace. If you provide the optional name for a function expression then you will get the name of the function expression in the stack trace.</source>
          <target state="translated">上記の例の2番目の &lt;code&gt;bar&lt;/code&gt; 追加はオプションです。関数名を省略した場合、関数が例外をスローすると、スタックトレースで &lt;code&gt;anonymous function&lt;/code&gt; に類似したものを取得する可能性があります。関数式にオプションの名前を指定すると、スタックトレースで関数式の名前が取得されます。</target>
        </trans-unit>
        <trans-unit id="7e15f7cd7c678492038a3fb0df79c3d8a550be82" translate="yes" xml:space="preserve">
          <source>Additional empty lines may be inserted to group related properties or otherwise improve readability.</source>
          <target state="translated">関連するプロパティをグループ化したり、その他の可読性を向上させるために空行を追加で挿入することができます。</target>
        </trans-unit>
        <trans-unit id="a0f21b87b34362bcd5c861480b3899b875de90fd" translate="yes" xml:space="preserve">
          <source>Additional validation added to the &lt;code&gt;RuleTester&lt;/code&gt; class</source>
          <target state="translated">&lt;code&gt;RuleTester&lt;/code&gt; クラスに追加された追加の検証</target>
        </trans-unit>
        <trans-unit id="6a56d991b0497bc7202cd311488f3455e1fb7855" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;context.getScope()&lt;/code&gt; incorrectly returned the parent scope of the proper scope on &lt;code&gt;CatchClause&lt;/code&gt; (in ES5), &lt;code&gt;ForStatement&lt;/code&gt; (in ≧ES2015), &lt;code&gt;ForInStatement&lt;/code&gt; (in ≧ES2015), &lt;code&gt;ForOfStatement&lt;/code&gt;, and &lt;code&gt;WithStatement&lt;/code&gt; nodes.</source>
          <target state="translated">さらに、 &lt;code&gt;context.getScope()&lt;/code&gt; は、 &lt;code&gt;CatchClause&lt;/code&gt; （ES5の場合）、 &lt;code&gt;ForStatement&lt;/code&gt; （≧ES2015の場合）、 &lt;code&gt;ForInStatement&lt;/code&gt; （≧ES2015の場合）、 &lt;code&gt;ForOfStatement&lt;/code&gt; 、および &lt;code&gt;WithStatement&lt;/code&gt; ノードの適切なスコープの親スコープを誤って返しました。</target>
        </trans-unit>
        <trans-unit id="d71b0e551b8a05566bb571b697959c043848b0db" translate="yes" xml:space="preserve">
          <source>Additionally, arrow functions are:</source>
          <target state="translated">さらに、矢印機能があります。</target>
        </trans-unit>
        <trans-unit id="79ad21267e1505f504ad3b64cf80fe8e17376b42" translate="yes" xml:space="preserve">
          <source>Additionally, if you are using &lt;code&gt;context.ecmaFeatures&lt;/code&gt; inside of your rules, then you'll need to update your code in the following ways:</source>
          <target state="translated">さらに、ルール内で &lt;code&gt;context.ecmaFeatures&lt;/code&gt; を使用している場合は、次の方法でコードを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="23b72b358b52f3185d5a6b610477da5e25ee339c" translate="yes" xml:space="preserve">
          <source>Additionally, if you intend to access large array indices directly, like:</source>
          <target state="translated">さらに、大きな配列のインデックスに直接アクセスしたい場合、例えば</target>
        </trans-unit>
        <trans-unit id="9eb5d082a2557226722f3bf4035b8c0c5d988b88" translate="yes" xml:space="preserve">
          <source>Additionally, if you see new errors for &lt;code&gt;global&lt;/code&gt; comments in your code, you should remove those comments.</source>
          <target state="translated">さらに、コード内の &lt;code&gt;global&lt;/code&gt; コメントに新しいエラーが表示された場合は、それらのコメントを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b39469792bfaba2ecb3083fe90ffe26058b9029" translate="yes" xml:space="preserve">
          <source>Additionally, objects can have properties that shadow the builtins on &lt;code&gt;Object.prototype&lt;/code&gt;, potentially causing unintended behavior or denial-of-service security vulnerabilities. For example, it would be unsafe for a webserver to parse JSON input from a client and call &lt;code&gt;hasOwnProperty&lt;/code&gt; directly on the resulting object, because a malicious client could send a JSON value like &lt;code&gt;{&quot;hasOwnProperty&quot;: 1}&lt;/code&gt; and cause the server to crash.</source>
          <target state="translated">さらに、オブジェクトには &lt;code&gt;Object.prototype&lt;/code&gt; のビルトインをシャドウするプロパティがあり、意図しない動作やサービス拒否のセキュリティの脆弱性を引き起こす可能性があります。たとえば、悪意のあるクライアントが &lt;code&gt;{&quot;hasOwnProperty&quot;: 1}&lt;/code&gt; ようなJSON値を送信してサーバーをクラッシュさせる可能性があるため、ウェブサーバーがクライアントからのJSON入力を解析し、結果のオブジェクトに対して直接 &lt;code&gt;hasOwnProperty&lt;/code&gt; を呼び出すのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="8aeab93591ed32ce88269713a4483a31fbd7449f" translate="yes" xml:space="preserve">
          <source>Additionally, since the maximum &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length&quot;&gt;array length&lt;/a&gt; is 2&lt;sup&gt;32&lt;/sup&gt; - 1, all values above 2&lt;sup&gt;32&lt;/sup&gt; - 2 also represent just normal property names and are thus not considered to be array indexes.</source>
          <target state="translated">また、最大のため&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length&quot;&gt;の配列の長さは&lt;/a&gt;2である&lt;sup&gt;32&lt;/sup&gt; 2上のすべての値は1 - &lt;sup&gt;32&lt;/sup&gt; 2はまた、普通のプロパティ名を表し、したがって、配列のインデックスであると見なされていません- 。</target>
        </trans-unit>
        <trans-unit id="bd4b3925054b433c5116e43fc5991fd0d16a8d04" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;context&lt;/code&gt; object has the following methods:</source>
          <target state="translated">さらに、 &lt;code&gt;context&lt;/code&gt; オブジェクトには次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="d8c87778f3cc603b2fb143ad17fcf5c72a8f9a63" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;sourceCode&lt;/code&gt; object now also has &lt;code&gt;sourceCode.getCommentsInside()&lt;/code&gt; (which returns all the comments inside a node), &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; (which returns all the comments in the file), and allows comments to be accessed through various other token iterator methods (such as &lt;code&gt;getTokenBefore()&lt;/code&gt; and &lt;code&gt;getTokenAfter()&lt;/code&gt;) with the &lt;code&gt;{ includeComments: true }&lt;/code&gt; option.</source>
          <target state="translated">さらに、 &lt;code&gt;sourceCode&lt;/code&gt; オブジェクトには、 &lt;code&gt;sourceCode.getCommentsInside()&lt;/code&gt; （ノード内のすべてのコメントを返す）、 &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; （ファイル内のすべてのコメントを返す）が追加され、他のさまざまなトークンを通じてコメントにアクセスできるようになりました。 &lt;code&gt;{ includeComments: true }&lt;/code&gt; &lt;code&gt;getTokenAfter()&lt;/code&gt; ：true}オプションを指定したイテレータメソッド（ &lt;code&gt;getTokenBefore()&lt;/code&gt; やgetTokenAfter（）など）。</target>
        </trans-unit>
        <trans-unit id="955a15f42c7d00c744259f3cde915b716c8035f8" translate="yes" xml:space="preserve">
          <source>Additionally, the following rule has been &lt;em&gt;removed&lt;/em&gt; from &lt;code&gt;eslint:recommended&lt;/code&gt;:</source>
          <target state="translated">さらに、次のルールが &lt;code&gt;eslint:recommended&lt;/code&gt; から&lt;em&gt;削除さ&lt;/em&gt;れました。</target>
        </trans-unit>
        <trans-unit id="813d924654bdcea721c482bee96ad4a150a5affe" translate="yes" xml:space="preserve">
          <source>Additionally, the rule accepts an optional object option with an &lt;code&gt;&quot;overrides&quot;&lt;/code&gt; key. This can be used to specify a location for particular statements that override the default. For example:</source>
          <target state="translated">さらに、このルールは &lt;code&gt;&quot;overrides&quot;&lt;/code&gt; キーを持つオプションのオブジェクトオプションを受け入れます。これを使用して、デフォルトをオーバーライドする特定のステートメントの場所を指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="02fd36ee79b3c753873be3e875d89e688ed0058a" translate="yes" xml:space="preserve">
          <source>Additionally, the rule takes an optional object configuration:</source>
          <target state="translated">さらに、ルールはオプションのオブジェクト設定を取ります。</target>
        </trans-unit>
        <trans-unit id="79ee2d95f84d63e0488662b62e6f527cc3ee9e35" translate="yes" xml:space="preserve">
          <source>Additionally, this rule allows further configurability via overrides per function type.</source>
          <target state="translated">さらに、このルールでは、関数タイプごとにオーバーライドを使用して、さらなる設定を行うことができます。</target>
        </trans-unit>
        <trans-unit id="bf52d0223b860a65d967da5e42817e7f5e564102" translate="yes" xml:space="preserve">
          <source>Adhere to the &lt;a href=&quot;new-rules#core-rule-guidelines&quot;&gt;Core Rule Guidelines&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;new-rules#core-rule-guidelines&quot;&gt;コアルールガイドラインの&lt;/a&gt;遵守</target>
        </trans-unit>
        <trans-unit id="ed051adea84f976f94ec5df3e8c5e5ea11fec6fc" translate="yes" xml:space="preserve">
          <source>Adjust &lt;code&gt;maxItems&lt;/code&gt; by subtracting 1</source>
          <target state="translated">1を引いて &lt;code&gt;maxItems&lt;/code&gt; を調整します</target>
        </trans-unit>
        <trans-unit id="fb6a7a39ce6f2107737b7821e6cfbfb519b1b47d" translate="yes" xml:space="preserve">
          <source>Adjust &lt;code&gt;minItems&lt;/code&gt; from 1 to 0</source>
          <target state="translated">&lt;code&gt;minItems&lt;/code&gt; を1から0に調整します</target>
        </trans-unit>
        <trans-unit id="fb8d480c5ed2f86d6a0f15310e0eda94ae41bd4b" translate="yes" xml:space="preserve">
          <source>After a rule has been deprecated, the team will no longer do any work on it. This includes bug fixes, enhancements, and updates to the rule's documentation. Issues and pull requests related to deprecated rule will not be accepted and will be closed.</source>
          <target state="translated">ルールが非推奨になった後は、チームはそのルールに対して一切の作業を行いません。これには、バグ修正、機能強化、ルールのドキュメントの更新が含まれます。非推奨となったルールに関連した問題やプルリクエストは受け付けられず、クローズされます。</target>
        </trans-unit>
        <trans-unit id="2a8391a640da107879132ab537ce183095c10f9e" translate="yes" xml:space="preserve">
          <source>After rebasing, be sure to run all of the tests once again to make sure nothing broke:</source>
          <target state="translated">リベースした後は、すべてのテストをもう一度実行して、何も壊れていないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="0a19182877a954b877a6e382865f5256d4acb007" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;eslint --init&lt;/code&gt;, you'll have a &lt;code&gt;.eslintrc.{js,yml,json}&lt;/code&gt; file in your directory. In it, you'll see some rules configured like this:</source>
          <target state="translated">&lt;code&gt;eslint --init&lt;/code&gt; を実行すると、 &lt;code&gt;.eslintrc.{js,yml,json}&lt;/code&gt; ファイルが作成されます。その中に、次のように構成されたいくつかのルールが表示されます。</target>
        </trans-unit>
        <trans-unit id="6110b5332caa86a14f380ec237c4258e5ec6e3a9" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;eslint --init&lt;/code&gt;, you'll have a &lt;code&gt;.eslintrc&lt;/code&gt; file in your directory. In it, you'll see some rules configured like this:</source>
          <target state="translated">実行した後 &lt;code&gt;eslint --init&lt;/code&gt; 、あなたが持っているでしょう &lt;code&gt;.eslintrc&lt;/code&gt; ディレクトリ内のファイルを。その中に、次のように構成されたいくつかのルールが表示されます。</target>
        </trans-unit>
        <trans-unit id="0d8faac586a3ebc8cdb26c6cc7a57c27e0364800" translate="yes" xml:space="preserve">
          <source>After that, you can run ESLint on any file or directory like this:</source>
          <target state="translated">その後、このように任意のファイルやディレクトリでESLintを実行することができます。</target>
        </trans-unit>
        <trans-unit id="8d757cb6f51d9c5e443378778cc41cdf3b2c5c8b" translate="yes" xml:space="preserve">
          <source>After that, you're ready to start working on code.</source>
          <target state="translated">その後は、コード作業を始める準備ができています。</target>
        </trans-unit>
        <trans-unit id="35c30fe94a928157a94135acef729424ab12ea31" translate="yes" xml:space="preserve">
          <source>All ECMAScript 6 &lt;code&gt;ecmaFeatures&lt;/code&gt; flags have been removed in favor of a &lt;code&gt;ecmaVersion&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; that can be set to 3, 5 (default), or 6.</source>
          <target state="translated">ECMAScript 6のすべての &lt;code&gt;ecmaFeatures&lt;/code&gt; フラグが削除され、 &lt;code&gt;ecmaVersion&lt;/code&gt; プロパティが &lt;code&gt;parserOptions&lt;/code&gt; （デフォルト）、または6に設定できるようになりました。</target>
        </trans-unit>
        <trans-unit id="27168471545ed29e71d31a94a211caecdf8e0715" translate="yes" xml:space="preserve">
          <source>All Rules Off by Default</source>
          <target state="translated">すべてのルールをデフォルトでオフにする</target>
        </trans-unit>
        <trans-unit id="21415cf206ac89c1ae9a5902f7fa084ec28c3c4e" translate="yes" xml:space="preserve">
          <source>All binary operators except dot (&lt;code&gt;.&lt;/code&gt;) should be separated from their operands by spaces. Blank spaces should never separate unary operators such as unary minus, increment (&lt;code&gt;++&lt;/code&gt;), and decrement (&lt;code&gt;--&lt;/code&gt;) from their operands.</source>
          <target state="translated">ドット（ &lt;code&gt;.&lt;/code&gt; ）を除くすべての2項演算子は、それらのオペランドからスペースで区切る必要があります。空白は、単項マイナス、インクリメント（ &lt;code&gt;++&lt;/code&gt; ）、デクリメント（ &lt;code&gt;--&lt;/code&gt; ）などの単項演算子をオペランドから分離してはなりません。</target>
        </trans-unit>
        <trans-unit id="c04e4bad4ab494fa9ae0caae96f8d872ba006651" translate="yes" xml:space="preserve">
          <source>All changes must be accompanied by tests, even if the feature you're working on previously had no tests.</source>
          <target state="translated">あなたが作業している機能が以前にテストを行っていなかったとしても、すべての変更にはテストを伴う必要があります。</target>
        </trans-unit>
        <trans-unit id="1fac9209227848cd5c566c056688fcbfeba1b6ec" translate="yes" xml:space="preserve">
          <source>All four options must be specified in the array, but you can customize their order.</source>
          <target state="translated">4 つのオプションはすべて配列で指定する必要がありますが、その順序をカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="9f5c8e84361b28f241a1b31c82fca23efdb68a0d" translate="yes" xml:space="preserve">
          <source>All instances that should be flagged as warnings.</source>
          <target state="translated">警告としてフラグを立てるべきすべてのインスタンス。</target>
        </trans-unit>
        <trans-unit id="39a3c57a313f8a6f509ff9d3ffc36567771fb975" translate="yes" xml:space="preserve">
          <source>All nodes must have &lt;code&gt;range&lt;/code&gt; property.</source>
          <target state="translated">すべてのノードに &lt;code&gt;range&lt;/code&gt; プロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="16bc8a2ef6d842f8d4078628bf71b055989417cb" translate="yes" xml:space="preserve">
          <source>All nodes:</source>
          <target state="translated">すべてのノード。</target>
        </trans-unit>
        <trans-unit id="380e6fbca39fdfd46a99f90e48d35959e1edf1ee" translate="yes" xml:space="preserve">
          <source>All of the above methods also work for plugin rules. For example, to disable &lt;code&gt;eslint-plugin-example&lt;/code&gt;'s &lt;code&gt;rule-name&lt;/code&gt; rule, combine the plugin's name (&lt;code&gt;example&lt;/code&gt;) and the rule's name (&lt;code&gt;rule-name&lt;/code&gt;) into &lt;code&gt;example/rule-name&lt;/code&gt;:</source>
          <target state="translated">上記のメソッドはすべて、プラグインルールでも機能します。たとえば、 &lt;code&gt;eslint-plugin-example&lt;/code&gt; の &lt;code&gt;rule-name&lt;/code&gt; ルールを無効にするには、プラグインの名前（ &lt;code&gt;example&lt;/code&gt; ）とルールの名前（ &lt;code&gt;rule-name&lt;/code&gt; ）を &lt;code&gt;example/rule-name&lt;/code&gt; に結合します。</target>
        </trans-unit>
        <trans-unit id="d86729b4f455fbcd7ffc0551c382021ba83dc3f7" translate="yes" xml:space="preserve">
          <source>All of these options give you fine-grained control over how ESLint treats your code.</source>
          <target state="translated">これらのオプションはすべて、ESLintがコードをどのように扱うかを細かくコントロールすることができます。</target>
        </trans-unit>
        <trans-unit id="b981df969032075eba25dbbe4f15f91c780d355d" translate="yes" xml:space="preserve">
          <source>All user-facing changes must be accompanied by appropriate documentation.</source>
          <target state="translated">ユーザーが直面するすべての変更には、適切な文書を添付しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d6ed9c633f11b7ae73f9eb30856004c5aa615a9d" translate="yes" xml:space="preserve">
          <source>All variables should be declared before they are used. Variable declarations should take place at the beginning of a function using a single &lt;code&gt;var&lt;/code&gt; statement with one variable per line. All lines after the first should be indented one level so the variable names line up. Variables should be initialized when declared if applicable and the equals operator should be at a consistent indentation level. Initialized variables should come first followed by uninitialized variables.</source>
          <target state="translated">すべての変数は、使用する前に宣言する必要があります。変数宣言は、1行に1つの変数を含む単一の &lt;code&gt;var&lt;/code&gt; ステートメントを使用して、関数の先頭で行う必要があります。変数名が揃うように、1行目以降のすべての行を1レベルインデントする必要があります。変数は、該当する場合は宣言時に初期化する必要があり、equals演算子は一貫したインデントレベルにする必要があります。初期化された変数が最初に来て、その後に初期化されていない変数が続きます。</target>
        </trans-unit>
        <trans-unit id="d7ceb6fc7b2eb8ab3c194e1131ea568a7b616a92" translate="yes" xml:space="preserve">
          <source>Allowlist and denylist rules specified via &lt;code&gt;--ignore-pattern&lt;/code&gt; or &lt;code&gt;.eslintignore&lt;/code&gt; are prioritized above implicit ignore rules.</source>
          <target state="translated">--ignore &lt;code&gt;--ignore-pattern&lt;/code&gt; または &lt;code&gt;.eslintignore&lt;/code&gt; を介して指定されたallowlistおよびdenylistルールは、暗黙の無視ルールよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="a5c0a91ce7688529b69563047855933d8f3fb1e8" translate="yes" xml:space="preserve">
          <source>Alphabetical list is maintained starting from the first variable and excluding any that are considered problems. So the following code will produce two problems:</source>
          <target state="translated">アルファベット順のリストは、最初の変数から始まり、問題とみなされるものは除外されます。したがって、次のコードは2つの問題を生成します。</target>
        </trans-unit>
        <trans-unit id="2942eb64d68ab38cec3ef47c24c9ccfc2f1d7e6b" translate="yes" xml:space="preserve">
          <source>Also note in the above examples that if you switch a method to a static method, &lt;em&gt;instances&lt;/em&gt; of the class that call the static method (&lt;code&gt;let a = new A(); a.sayHi();&lt;/code&gt;) have to be updated to being a static call (&lt;code&gt;A.sayHi();&lt;/code&gt;) instead of having the instance of the &lt;em&gt;class&lt;/em&gt; call the method</source>
          <target state="translated">上記の例では、メソッドを静的メソッドに切り替える場合、静的メソッドを呼び出すクラスの&lt;em&gt;インスタンス&lt;/em&gt;（ &lt;code&gt;let a = new A(); a.sayHi();&lt;/code&gt; ）を静的に更新する必要があることにも注意してください&lt;em&gt;クラス&lt;/em&gt;のインスタンスがメソッドを呼び出すのではなく、（ &lt;code&gt;A.sayHi();&lt;/code&gt; ）を呼び出す&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7231ab65ab1048ef96c41eb663d106ac690230a1" translate="yes" xml:space="preserve">
          <source>Also, parentheses limit the scope of short-circuiting in chains. For example:</source>
          <target state="translated">また、()は鎖で短絡する範囲を限定しています。例えば</target>
        </trans-unit>
        <trans-unit id="f7f8d2e506fae97d44675fd599bec988987ee20c" translate="yes" xml:space="preserve">
          <source>Also, this rule does not disallow duplicate keys in object literals and class definitions, and in certain cases with duplicate keys might not report a missing pair for a getter/setter, like in the following example:</source>
          <target state="translated">また、このルールはオブジェクトリテラルやクラス定義でのキーの重複を禁止しているわけではありません。また、以下の例のように、キーが重複している場合はゲッター/セッターのペアが見つからないことを報告しないこともあります。</target>
        </trans-unit>
        <trans-unit id="a5391918dbef9fd9c4d7cea0937d59ade63a7af6" translate="yes" xml:space="preserve">
          <source>Also, this rule does not report any warnings for properties that have duplicate getters or setters.</source>
          <target state="translated">また、このルールは、ゲッターやセッターが重複しているプロパティに対する警告を報告しません。</target>
        </trans-unit>
        <trans-unit id="6915f039925c6757b027241cf12e316770686bea" translate="yes" xml:space="preserve">
          <source>Alternate object option:</source>
          <target state="translated">代替オブジェクトオプション。</target>
        </trans-unit>
        <trans-unit id="c6c5ca112da18ace260ba6bb33f4d3c4cc7dca10" translate="yes" xml:space="preserve">
          <source>Alternative: Creating Your Own Rules</source>
          <target state="translated">オルタナティブ。独自のルールを作成する</target>
        </trans-unit>
        <trans-unit id="87e7deb2c19c3eced3590ab12970d7dd12c45695" translate="yes" xml:space="preserve">
          <source>Alternatively, different configurations can be specified for array expressions and array patterns:</source>
          <target state="translated">また、配列式と配列パターンに対して異なる構成を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="61b49ead1c63a69fdf7a8fef1d4e4527b0f4cbb6" translate="yes" xml:space="preserve">
          <source>Alternatively, the rule also accepts objects, where the global name and an optional custom message are specified:</source>
          <target state="translated">あるいは、グローバル名とオプションのカスタムメッセージを指定してオブジェクトを受け取ることもできます。</target>
        </trans-unit>
        <trans-unit id="b5ea439ae2fc25b1a8e4dc3f7821000550fb475e" translate="yes" xml:space="preserve">
          <source>Alternatively, the rule also accepts objects, where the selector and an optional custom message are specified:</source>
          <target state="translated">あるいは、セレクタとオプションのカスタムメッセージが指定されたオブジェクトを受け取ることもできます。</target>
        </trans-unit>
        <trans-unit id="f42388818dce26fe88593798136ce9a613cefe72" translate="yes" xml:space="preserve">
          <source>Alternatively, you can relax the rule to allow brace-less single-line &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt;, while still enforcing the use of curly braces for other instances.</source>
          <target state="translated">または、ルールを緩和して、他のインスタンスで中括弧の使用を強制しながら、中括弧のない単一行の &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、または &lt;code&gt;do&lt;/code&gt; を許可することもできます。</target>
        </trans-unit>
        <trans-unit id="a86c240750580618ea8e68ab3ee67459999fb917" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use separate configurations for different assignment types. It accepts 2 other keys instead of &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="translated">または、異なる割り当てタイプに個別の構成を使用できます。 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 代わりに他の2つのキーを受け入れます。</target>
        </trans-unit>
        <trans-unit id="cf9170b524599785b7c0aeb65895885be13571ba" translate="yes" xml:space="preserve">
          <source>Alternatively, you may specify a single integer for the &lt;code&gt;max&lt;/code&gt; option:</source>
          <target state="translated">または、 &lt;code&gt;max&lt;/code&gt; オプションに単一の整数を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="7925c2ccec5e609c97b9e24b12ce869df70db789" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;let b&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement is before the &lt;em&gt;function&lt;/em&gt; declaration in the outer scope, it is incorrect.</source>
          <target state="translated">けれども &lt;code&gt;let b&lt;/code&gt; で &lt;code&gt;if&lt;/code&gt; ステートメントが前にある&lt;em&gt;機能の&lt;/em&gt;外側のスコープで宣言、それは間違っています。</target>
        </trans-unit>
        <trans-unit id="866f243570c8f44641b36ea00e456d84d75ed160" translate="yes" xml:space="preserve">
          <source>Although ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a &lt;code&gt;\n&lt;/code&gt; character always ends a statement (just like a semicolon) unless one of the following is true:</source>
          <target state="translated">ASIを使用すると、コーディングスタイルの自由度が高まりますが、セミコロンを使用するかどうかに関係なく、コードが予期しない動作をする可能性もあります。したがって、ASIが発生するタイミングと発生しないタイミングを把握し、ESLintでこれらの予想外のケースからコードを保護することをお勧めします。要するに、Isaac Schlueterによって一度説明されたように、次のいずれかに該当しない限り、 &lt;code&gt;\n&lt;/code&gt; 文字は常に（セミコロンのように）ステートメントを終了します。</target>
        </trans-unit>
        <trans-unit id="a4f299f7bd27b6590317d120fdc51aa0f781de8e" translate="yes" xml:space="preserve">
          <source>Although it's possible to wrap functions in parentheses, this can be confusing when the code also contains immediately-invoked function expressions (IIFEs) since parentheses are often used to make this distinction. For example:</source>
          <target state="translated">関数を括弧で囲むことは可能ですが、コードに即時起動関数式(IIFE)が含まれている場合には、この区別をするために括弧がよく使われるため、混乱を招く可能性があります。なぜなら、この区別をするためにカッコが使われることが多いからです。</target>
        </trans-unit>
        <trans-unit id="24d405c574edf2eaca4756329796edd9539cb601" translate="yes" xml:space="preserve">
          <source>Although not a syntax error, this format for numbers can make it difficult to distinguish between true decimal numbers and the dot operator. For this reason, some recommend that you should always include a number before and after a decimal point to make it clear the intent is to create a decimal number.</source>
          <target state="translated">構文エラーではありませんが、この形式の数値を使用すると、真の10進数とドット演算子の区別が難しくなります。このため、小数を作成する意図があることを明確にするために、小数点の前後に常に数字を含めることを推奨する人もいます。</target>
        </trans-unit>
        <trans-unit id="5f6368c0345f5cc87a24b32c46efc1143bdc9b4b" translate="yes" xml:space="preserve">
          <source>Although not being specified in the language until ECMAScript 2021, &lt;code&gt;\8&lt;/code&gt; and &lt;code&gt;\9&lt;/code&gt; escape sequences in string literals were allowed in most JavaScript engines, and treated as &quot;useless&quot; escapes:</source>
          <target state="translated">ECMAScript 2021まで言語で指定されていませんが、文字列リテラルの &lt;code&gt;\8&lt;/code&gt; および &lt;code&gt;\9&lt;/code&gt; エスケープシーケンスはほとんどのJavaScriptエンジンで許可され、「役に立たない」エスケープとして扱われました。</target>
        </trans-unit>
        <trans-unit id="e81d773bf08a95ef47ad02f669bebf58abfe87c3" translate="yes" xml:space="preserve">
          <source>Although possible, there aren't any good reasons to use these primitive wrappers as constructors. They tend to confuse other developers more than anything else because they seem like they should act as primitives, but they do not. For example:</source>
          <target state="translated">可能ではありますが、これらのプリミティブラッパーをコンストラクタとして使う良い理由はありません。これらのラッパーは、他の開発者を何よりも混乱させる傾向があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="de8a9fd5b3850b78355ba59c0786ce342032800d" translate="yes" xml:space="preserve">
          <source>Although this code might seem like an error, it actually works fine because JavaScript engines hoist the &lt;code&gt;function&lt;/code&gt; declarations to the top of the scope. That means this code is treated as if the declaration came before the invocation.</source>
          <target state="translated">このコードはエラーのように見えるかもしれませんが、JavaScriptエンジンは &lt;code&gt;function&lt;/code&gt; 宣言をスコープの最上部に引き上げるため、実際には正常に機能します。つまり、このコードは、呼び出しの前に宣言があったかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="5553a9fdd742079120793eebc8d2221f6b891b20" translate="yes" xml:space="preserve">
          <source>Always declare variables. Implied globals should not be used.</source>
          <target state="translated">必ず変数を宣言してください。暗黙のグローバルは使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="10a7f009f495f80e7285c15fc4b4b3893ec6f362" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;extends&lt;/code&gt; property value &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; enables a subset of core rules that report common problems, which have a check mark  on the &lt;a href=&quot;../rules/index&quot;&gt;rules page&lt;/a&gt;. The recommended subset can change only at major versions of ESLint.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; のチェックマークを持っている共通の問題、レポートコアルールのサブセットができます&lt;a href=&quot;../rules/index&quot;&gt;ルールのページを&lt;/a&gt;。推奨サブセットは、ESLintのメジャーバージョンでのみ変更できます。</target>
        </trans-unit>
        <trans-unit id="b0008c8dec87379b7985a8a544d103acfceac72e" translate="yes" xml:space="preserve">
          <source>An Open Letter to JavaScript Leaders Regarding Semicolons</source>
          <target state="translated">セミコロンに関するJavaScriptリーダーへのオープンレター</target>
        </trans-unit>
        <trans-unit id="f6dfcf2a1b3453d2a0633aaf0e9c90f54b4a3cdf" translate="yes" xml:space="preserve">
          <source>An array of numbers to ignore. It's set to &lt;code&gt;[]&lt;/code&gt; by default. If provided, it must be an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">無視する数値の配列。デフォルトでは &lt;code&gt;[]&lt;/code&gt; に設定されています。指定する場合は、 &lt;code&gt;Array&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a0a90c8970e8cd98eda8ee49e8140bb8398cb04" translate="yes" xml:space="preserve">
          <source>An array which includes &lt;code&gt;fixing&lt;/code&gt; objects.</source>
          <target state="translated">オブジェクトの &lt;code&gt;fixing&lt;/code&gt; を含む配列。</target>
        </trans-unit>
        <trans-unit id="2b8611b9d9e5eaae2d252753440448d3feefcb89" translate="yes" xml:space="preserve">
          <source>An arrow function body can contain an implicit return as an expression instead of a block body. It can be useful to enforce a consistent location for the implicitly returned expression.</source>
          <target state="translated">arrow 関数ボディには、ブロックボディの代わりに式として暗黙の戻り値を含めることができます。これは、暗黙的に返される式の一貫した場所を強制するのに便利です。</target>
        </trans-unit>
        <trans-unit id="1884bdfcf4455f7e0f018c484d212b780f99886e" translate="yes" xml:space="preserve">
          <source>An environment defines global variables that are predefined. The available environments are:</source>
          <target state="translated">環境は、定義済みのグローバル変数を定義します。利用可能な環境は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4a993a714edad4c590ac5d9867159330b64ddc2c" translate="yes" xml:space="preserve">
          <source>An example configuration, with the defaults &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt; filled in, looks like this:</source>
          <target state="translated">デフォルトの &lt;code&gt;VariableDeclarator&lt;/code&gt; と &lt;code&gt;AssignmentExpression&lt;/code&gt; が入力された構成例は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="341d56c5d6e304784de6633b08d9af06d30d0708" translate="yes" xml:space="preserve">
          <source>An example configuration, with the defaults &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; filled in, looks like this:</source>
          <target state="translated">デフォルトの &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 入力された構成例は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="dd6f63391e9d21a63c3ea41d1ba8a96a2efd4e1d" translate="yes" xml:space="preserve">
          <source>An example configuration:</source>
          <target state="translated">設定例。</target>
        </trans-unit>
        <trans-unit id="d23f10e88a66188c21919014d33eeac201e7bb6e" translate="yes" xml:space="preserve">
          <source>An example of a configuration with overrides:</source>
          <target state="translated">オーバーライドを使用した設定の例です。</target>
        </trans-unit>
        <trans-unit id="1d36764ba33569671f7edfa7cc1e47cbf393760a" translate="yes" xml:space="preserve">
          <source>An example of shorthand configuration:</source>
          <target state="translated">速記構成の例。</target>
        </trans-unit>
        <trans-unit id="7033976c72e3e35c02fd8336248a55e6ab23e1eb" translate="yes" xml:space="preserve">
          <source>An example use case is to enforce comma style &lt;em&gt;only&lt;/em&gt; in var statements.</source>
          <target state="translated">使用例は、varステートメントで&lt;em&gt;のみ&lt;/em&gt;カンマスタイルを適用することです。</target>
        </trans-unit>
        <trans-unit id="dddab7ddd0688573b5d9e27e8a285815d7261f07" translate="yes" xml:space="preserve">
          <source>An invalid pattern in a regular expression literal is a &lt;code&gt;SyntaxError&lt;/code&gt; when the code is parsed, but an invalid string in &lt;code&gt;RegExp&lt;/code&gt; constructors throws a &lt;code&gt;SyntaxError&lt;/code&gt; only when the code is executed.</source>
          <target state="translated">正規表現リテラルの無効なパターンは、コードが解析されるときの &lt;code&gt;SyntaxError&lt;/code&gt; ですが、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターの無効な文字列は、コードが実行されるときにのみ &lt;code&gt;SyntaxError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="b476bef9567eb94c0088de30121faf7682d5623a" translate="yes" xml:space="preserve">
          <source>An iterable object which enumerates &lt;code&gt;fixing&lt;/code&gt; objects. Especially, the &lt;code&gt;fix()&lt;/code&gt; function can be a generator.</source>
          <target state="translated">&lt;code&gt;fixing&lt;/code&gt; オブジェクトを列挙する反復可能なオブジェクト。特に、 &lt;code&gt;fix()&lt;/code&gt; 関数はジェネレーターにすることができます。</target>
        </trans-unit>
        <trans-unit id="438d78e8f508d8dd7a89428814b76d0adf68590c" translate="yes" xml:space="preserve">
          <source>An npm-installed formatter is resolved with or without &lt;code&gt;eslint-formatter-&lt;/code&gt; prefix.</source>
          <target state="translated">npmでインストールされたフォーマッターは、 &lt;code&gt;eslint-formatter-&lt;/code&gt; プレフィックスの有無にかかわらず解決されます。</target>
        </trans-unit>
        <trans-unit id="e17d5deba51ad9da3d6d69e9127834d43c91175f" translate="yes" xml:space="preserve">
          <source>An object containing &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;invalid&lt;/code&gt; properties, each of which is an array containing test cases.</source>
          <target state="translated">&lt;code&gt;valid&lt;/code&gt; &lt;code&gt;invalid&lt;/code&gt; プロパティと無効なプロパティを含むオブジェクト。各プロパティはテストケースを含む配列です。</target>
        </trans-unit>
        <trans-unit id="7f65760ab68396ff18ca2c5e2cf5d15f9c0728d5" translate="yes" xml:space="preserve">
          <source>An object literal may be used as a third array item to specify exceptions, with the key &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; and an array as the value. These exceptions work in the context of the first option. That is, if &lt;code&gt;&quot;always&quot;&lt;/code&gt; is set to enforce spacing, then any &quot;exception&quot; will &lt;em&gt;disallow&lt;/em&gt; spacing. Conversely, if &lt;code&gt;&quot;never&quot;&lt;/code&gt; is set to disallow spacing, then any &quot;exception&quot; will &lt;em&gt;enforce&lt;/em&gt; spacing.</source>
          <target state="translated">オブジェクトリテラルは、例外を指定する3番目の配列項目として使用でき、キーとして &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; と配列を値として使用できます。これらの例外は、最初のオプションのコンテキストで機能します。つまり、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; が間隔を強制するように設定されている場合、「例外」はすべて間隔を&lt;em&gt;許可しません&lt;/em&gt;。逆に、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; が間隔を許可しないように設定されている場合、「exception」は間隔を&lt;em&gt;強制し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6e32a74ed5fb1438e5b7dc7286797ba7ef696aba" translate="yes" xml:space="preserve">
          <source>An object literal may be used as a third array item to specify spacing exceptions. These exceptions work in the context of the first option. That is, if &lt;code&gt;&quot;always&quot;&lt;/code&gt; is set to enforce spacing and an exception is set to &lt;code&gt;false&lt;/code&gt;, it will disallow spacing for cases matching the exception. Likewise, if &lt;code&gt;&quot;never&quot;&lt;/code&gt; is set to disallow spacing and an exception is set to &lt;code&gt;true&lt;/code&gt;, it will enforce spacing for cases matching the exception.</source>
          <target state="translated">オブジェクトリテラルは、間隔の例外を指定する3番目の配列項目として使用できます。これらの例外は、最初のオプションのコンテキストで機能します。つまり、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; が間隔を強制するように設定され、例外が &lt;code&gt;false&lt;/code&gt; に設定されている場合、例外に一致するケースの間隔は許可されません。同様に、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; が間隔を許可しないように設定され、例外が &lt;code&gt;true&lt;/code&gt; に設定されている場合、例外に一致するケースに間隔が適用されます。</target>
        </trans-unit>
        <trans-unit id="4b176eca1a5e1018132cb2364182412c12d16e9d" translate="yes" xml:space="preserve">
          <source>An object that further controls the behavior of this rule. Currently, the only available parameter is &lt;code&gt;ignoreForLoopInit&lt;/code&gt;, which indicates if initialization at declaration is allowed in &lt;code&gt;for&lt;/code&gt; loops when &lt;code&gt;&quot;never&quot;&lt;/code&gt; is set, since it is a very typical use case.</source>
          <target state="translated">このルールの動作をさらに制御するオブジェクト。現在、使用できる唯一のパラメーターは &lt;code&gt;ignoreForLoopInit&lt;/code&gt; です。これは、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; が設定されている場合に &lt;code&gt;for&lt;/code&gt; ループで宣言時の初期化が許可されるかどうかを示します。これは非常に一般的な使用例であるためです。</target>
        </trans-unit>
        <trans-unit id="76f218533f4fe1fb32f27068a4f20c9c3a16dfc3" translate="yes" xml:space="preserve">
          <source>An unused expression which has no effect on the state of the program indicates a logic error.</source>
          <target state="translated">プログラムの状態に影響を与えない未使用の式は、論理エラーを示します。</target>
        </trans-unit>
        <trans-unit id="49d4259045d26d22175e3f8251cfe300e5d181b6" translate="yes" xml:space="preserve">
          <source>And above of typed arrays.</source>
          <target state="translated">そして型付き配列の上に</target>
        </trans-unit>
        <trans-unit id="659290b631b70886723f30f43c495d7a9f19a9d7" translate="yes" xml:space="preserve">
          <source>And here is an example that autofixes lint problems:</source>
          <target state="translated">そして、糸くずの問題を自動修正してくれる例がこちら。</target>
        </trans-unit>
        <trans-unit id="4a2f05944f009f34fb2b41b47c60459ed7da7240" translate="yes" xml:space="preserve">
          <source>And in YAML:</source>
          <target state="translated">しかもYAMLで。</target>
        </trans-unit>
        <trans-unit id="3a25dc5ee33e69f8b75c5fcba0c9db10f8928e94" translate="yes" xml:space="preserve">
          <source>And the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/8.0/index.html#sec-atomics-object&quot;&gt;ECMAScript 2017 specification&lt;/a&gt; makes it clear that &lt;code&gt;Atomics&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">そして、&lt;a href=&quot;https://www.ecma-international.org/ecma-262/8.0/index.html#sec-atomics-object&quot;&gt;ECMAScriptの2017仕様では、&lt;/a&gt;それがあることが明らかになり &lt;code&gt;Atomics&lt;/code&gt; 呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="05dc9d622e3015b6bfa8811e104b85bb8205e25f" translate="yes" xml:space="preserve">
          <source>And the option has shorthand as a string keyword:</source>
          <target state="translated">そして、オプションには文字列キーワードとして速記があります。</target>
        </trans-unit>
        <trans-unit id="9777a1e6d65b67eb72edafff1e10fe081003864e" translate="yes" xml:space="preserve">
          <source>And then you run:</source>
          <target state="translated">そして逃げる。</target>
        </trans-unit>
        <trans-unit id="b25ceb4859dadbd732ae104b9a92498a1e1db184" translate="yes" xml:space="preserve">
          <source>And then you would modify your configuration file like this:</source>
          <target state="translated">そして、このように設定ファイルを修正します。</target>
        </trans-unit>
        <trans-unit id="775bd2afb33b18dbf1a41f0531b3507d20a625e6" translate="yes" xml:space="preserve">
          <source>And this rule allows &lt;code&gt;this&lt;/code&gt; keywords in functions below:</source>
          <target state="translated">そしてこのルールは以下の関数で &lt;code&gt;this&lt;/code&gt; キーワードを許可します：</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="591268d3d3fe5a72c8827ac84ee70b58e8c3d3e2" translate="yes" xml:space="preserve">
          <source>Annotated ES5 &amp;sect;7.8.5 - Regular Expression Literals</source>
          <target state="translated">注釈付きES5&amp;sect;7.8.5-正規表現リテラル</target>
        </trans-unit>
        <trans-unit id="80e28c8818d9491b3223341a49c734105d436df1" translate="yes" xml:space="preserve">
          <source>Annotated ES5 - &amp;sect;15.1.1</source>
          <target state="translated">注釈付きES5-&amp;sect;15.1.1</target>
        </trans-unit>
        <trans-unit id="d1483aa9f00c4b4bb5c32564c963065a2f0a0e12" translate="yes" xml:space="preserve">
          <source>Annotated ES5 - Annex C</source>
          <target state="translated">注釈付きES5-付属書C</target>
        </trans-unit>
        <trans-unit id="9b8565a92875ea54b3f07cae6ab323d0096e5706" translate="yes" xml:space="preserve">
          <source>Anonymous functions may be used for assignment of object methods or as arguments to other functions. There should be no space between the &lt;code&gt;function&lt;/code&gt; keyword and the opening parentheses.</source>
          <target state="translated">匿名関数は、オブジェクトメソッドの割り当てや他の関数への引数として使用できます。 &lt;code&gt;function&lt;/code&gt; キーワードと開き括弧の間にはスペースを入れないでください。</target>
        </trans-unit>
        <trans-unit id="c4ad37defa448472e1ebec233962bd2d574a8d79" translate="yes" xml:space="preserve">
          <source>Another argument in favor of this style is that it improves the clarity of diffs when something in the method chain is changed:</source>
          <target state="translated">このスタイルを支持するもう一つの論拠は、メソッドチェーン内の何かが変更されたときに、diffの明快さが向上するということです。</target>
        </trans-unit>
        <trans-unit id="284affa5f5f9ddb144dedea5ee6895aafa4a76f6" translate="yes" xml:space="preserve">
          <source>Another benefit of this rule is specificity of diffs when a property is changed:</source>
          <target state="translated">このルールのもう一つの利点は、プロパティが変更されたときのdiffの特異性です。</target>
        </trans-unit>
        <trans-unit id="68caf686c329b469a32cc27f694bcc136b6f4a77" translate="yes" xml:space="preserve">
          <source>Another case where you might not use this rule is if you want to enforce console calls and not console overwrites. For example:</source>
          <target state="translated">このルールを使用しない場合のもう一つの例は、コンソールの上書きではなく、コンソールコールを強制したい場合です。例えば、次のような場合です。</target>
        </trans-unit>
        <trans-unit id="3390320f4be3c19e524e28b23472d6dbb6cc689f" translate="yes" xml:space="preserve">
          <source>Another common case is to minify code as &lt;code&gt;void 0&lt;/code&gt; is shorter than &lt;code&gt;undefined&lt;/code&gt;:</source>
          <target state="translated">もう1つの一般的なケースは、 &lt;code&gt;void 0&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; より短いため、コードを縮小することです。</target>
        </trans-unit>
        <trans-unit id="332efd74927ce8d1c939228b31fa1aaaba97f93a" translate="yes" xml:space="preserve">
          <source>Another common mistake is using a single variable as both the conditional test and the consequent. In such cases, the logical &lt;code&gt;OR&lt;/code&gt; can be used to provide the same functionality. Here is an example:</source>
          <target state="translated">もう1つのよくある間違いは、条件テストと結果の両方として単一の変数を使用することです。このような場合、論理 &lt;code&gt;OR&lt;/code&gt; を使用して同じ機能を提供できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="80b5fcb5558eb477f24af2cd32b33af9f5ee37f2" translate="yes" xml:space="preserve">
          <source>Another common use case for this option is in combination with &lt;code&gt;{ &quot;properties&quot;: &quot;never&quot; }&lt;/code&gt;, when the identifier is intended to be used only as a property shorthand.</source>
          <target state="translated">このオプションのもう1つの一般的な使用例は、 &lt;code&gt;{ &quot;properties&quot;: &quot;never&quot; }&lt;/code&gt; との組み合わせで、識別子がプロパティの省略形としてのみ使用されることを目的としています。</target>
        </trans-unit>
        <trans-unit id="58af9b94d3f9837624df663f80036dcc5b7e920a" translate="yes" xml:space="preserve">
          <source>Another example where quotes do matter is when using numeric literals as property keys:</source>
          <target state="translated">また、プロパティキーとして数値リテラルを使用する場合には、引用符を使用することが重要になります。</target>
        </trans-unit>
        <trans-unit id="1d1e1b0f8401d2b1c59b0f126cfa628ec7627bf2" translate="yes" xml:space="preserve">
          <source>Another solution would be to avoid using a mutable variable reference at all:</source>
          <target state="translated">もう一つの解決策としては、突然変異可能な変数の参照を全く使わないということでしょう。</target>
        </trans-unit>
        <trans-unit id="1d60372e402e0715e69db2e70551f8dd90a5d6e9" translate="yes" xml:space="preserve">
          <source>Another style is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style#Allman_style&quot;&gt;Allman&lt;/a&gt;, in which all the braces are expected to be on their own lines without any extra indentation. For example:</source>
          <target state="translated">別のスタイルは&lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style#Allman_style&quot;&gt;Allman&lt;/a&gt;と呼ばれ、すべてのブレースが余分なインデントなしで独自の行にあることが期待されます。例えば：</target>
        </trans-unit>
        <trans-unit id="87a768a020f736c807eb3cee1ca2d1f14df684e7" translate="yes" xml:space="preserve">
          <source>Any additional properties of a test case will be passed directly to the linter as config options. For example, a test case can have a &lt;code&gt;parserOptions&lt;/code&gt; property to configure parser behavior:</source>
          <target state="translated">テストケースの追加のプロパティは、設定オプションとして直接リンターに渡されます。たとえば、テストケースに &lt;code&gt;parserOptions&lt;/code&gt; プロパティを指定して、パーサーの動作を構成できます。</target>
        </trans-unit>
        <trans-unit id="983552f9535f5fc056ba05e9fc491ecb6b8e9856" translate="yes" xml:space="preserve">
          <source>Any file that follows the standard ignore file format can be used. Keep in mind that specifying &lt;code&gt;--ignore-path&lt;/code&gt; means that any existing &lt;code&gt;.eslintignore&lt;/code&gt; file will not be used. Note that globbing rules in &lt;code&gt;.eslintignore&lt;/code&gt; follow those of &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">標準の無視ファイル形式に従う任意のファイルを使用できます。 &lt;code&gt;--ignore-path&lt;/code&gt; を指定すると、既存の &lt;code&gt;.eslintignore&lt;/code&gt; ファイルは使用されないことに注意してください。注グロブルールという &lt;code&gt;.eslintignore&lt;/code&gt; はのそれに従う &lt;code&gt;.gitignore&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="3cf92fd782072e232ee87ae387b92f10f733a45f" translate="yes" xml:space="preserve">
          <source>Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a &lt;code&gt;/*global ...*/&lt;/code&gt; comment, or specified in the &lt;a href=&quot;../user-guide/configuring#specifying-globals&quot;&gt;&lt;code&gt;globals&lt;/code&gt; key in the configuration file&lt;/a&gt;. A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).</source>
          <target state="translated">&lt;code&gt;/*global ...*/&lt;/code&gt; コメントで変数が明示的に言及されていないか&lt;a href=&quot;../user-guide/configuring#specifying-globals&quot;&gt;、設定ファイルの&lt;/a&gt; &lt;code&gt;globals&lt;/code&gt; キーで指定されていない限り、宣言されていない変数を参照すると警告が発生します。これらの一般的な使用例は、他の場所で定義されたグローバルを意図的に使用する場合（たとえば、HTMLから供給されるスクリプト内）です。</target>
        </trans-unit>
        <trans-unit id="0bb559fa969f749523424421aa9513fbc4bbf59e" translate="yes" xml:space="preserve">
          <source>Anyone not yet in an ES6 environment would not want to apply this rule. Others may find the terseness of the shorthand syntax harder to read and may not want to encourage it with this rule.</source>
          <target state="translated">まだES6環境に入っていない人は、このルールを適用したくないでしょう。他の人は、短文構文の辛さが読みづらいと感じるかもしれませんし、このルールを使って短文構文を推奨したくないかもしれません。</target>
        </trans-unit>
        <trans-unit id="301c21f7a6fb57bce654e5a9d38ef620e86123d7" translate="yes" xml:space="preserve">
          <source>Anything above Node.js 11.10.1</source>
          <target state="translated">Node.js 11.10.1以上のもの</target>
        </trans-unit>
        <trans-unit id="9abfe4f65f0647e4ea0c5ac4810e9e579b855636" translate="yes" xml:space="preserve">
          <source>Anything above Node.js 9.10.0</source>
          <target state="translated">Node.js 9.10.0以上のもの</target>
        </trans-unit>
        <trans-unit id="b22274513fcf59b01e075e91572dcaa215b399d2" translate="yes" xml:space="preserve">
          <source>Applying Fixes</source>
          <target state="translated">修正を適用する</target>
        </trans-unit>
        <trans-unit id="b040b4179b8b00702858fdb4c1afec3d6d284509" translate="yes" xml:space="preserve">
          <source>Architecture</source>
          <target state="translated">Architecture</target>
        </trans-unit>
        <trans-unit id="98436c6de89d4b1603f1e667da6c73ef406ed052" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators: &lt;code&gt;&quot;+&quot;&lt;/code&gt;, &lt;code&gt;&quot;-&quot;&lt;/code&gt;, &lt;code&gt;&quot;*&quot;&lt;/code&gt;, &lt;code&gt;&quot;/&quot;&lt;/code&gt;, &lt;code&gt;&quot;%&quot;&lt;/code&gt;, &lt;code&gt;&quot;**&quot;&lt;/code&gt;</source>
          <target state="translated">算術演算子： &lt;code&gt;&quot;+&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;-&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;*&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;%&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;**&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fb2a273d0d01b56cf649cac9134209472814c83" translate="yes" xml:space="preserve">
          <source>Arithmetic operators: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;</source>
          <target state="translated">算術演算子： &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;**&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73ef048c871e9426c677ce4026bf612fcbcc2927" translate="yes" xml:space="preserve">
          <source>ArrayExpression</source>
          <target state="translated">ArrayExpression</target>
        </trans-unit>
        <trans-unit id="732c5c8ecc734e72807c30052e877068cfabb79f" translate="yes" xml:space="preserve">
          <source>ArrayExpression and ArrayPattern</source>
          <target state="translated">ArrayExpressionとArrayPattern</target>
        </trans-unit>
        <trans-unit id="3ea5db1b781f5122a5eb2179ab2c211009c018a4" translate="yes" xml:space="preserve">
          <source>Arrays are objects, so they can have property names such as &lt;code&gt;&quot;-1&quot;&lt;/code&gt; or &lt;code&gt;&quot;2.5&quot;&lt;/code&gt;. However, those are just &quot;normal&quot; object properties that don't represent array elements. They don't influence the array's &lt;code&gt;length&lt;/code&gt;, and they are ignored by array methods like &lt;code&gt;.map&lt;/code&gt; or &lt;code&gt;.forEach&lt;/code&gt;.</source>
          <target state="translated">配列はオブジェクトであるため、 &lt;code&gt;&quot;-1&quot;&lt;/code&gt; や &lt;code&gt;&quot;2.5&quot;&lt;/code&gt; などのプロパティ名を付けることができます。ただし、これらは配列要素を表さない単なる「通常の」オブジェクトプロパティです。これらは配列の &lt;code&gt;length&lt;/code&gt; 影響を与えず、 &lt;code&gt;.map&lt;/code&gt; や &lt;code&gt;.forEach&lt;/code&gt; などの配列メソッドでは無視されます。</target>
        </trans-unit>
        <trans-unit id="f69ad151738c1fc440c6c498b7fc67ee1775b2df" translate="yes" xml:space="preserve">
          <source>Arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;) are similar in syntax to some comparison operators (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;). This rule warns against using the arrow function syntax in places where a condition is expected. Even if the arguments of the arrow function are wrapped with parens, this rule still warns about it.</source>
          <target state="translated">矢印関数（ &lt;code&gt;=&amp;gt;&lt;/code&gt; ）は、一部の比較演算子（ &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、および &lt;code&gt;&amp;gt;=&lt;/code&gt; ）と構文が似ています。このルールは、条件が予想される場所での矢印関数構文の使用を警告します。arrow関数の引数が括弧で囲まれている場合でも、このルールはそれについて警告します。</target>
        </trans-unit>
        <trans-unit id="4a3b43a8931184e9ca69c21c5bd72b49ed93b1e7" translate="yes" xml:space="preserve">
          <source>Arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;) are similar in syntax to some comparison operators (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;). This rule warns against using the arrow function syntax in places where it could be confused with a comparison operator.</source>
          <target state="translated">矢印関数（ &lt;code&gt;=&amp;gt;&lt;/code&gt; ）は、一部の比較演算子（ &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、および &lt;code&gt;&amp;gt;=&lt;/code&gt; ）と構文が似ています。このルールは、比較演算子と混同される可能性のある場所でアロー関数構文を使用しないよう警告します。</target>
        </trans-unit>
        <trans-unit id="bfd0c70c044d2f23664b1c4327d9b79430062401" translate="yes" xml:space="preserve">
          <source>Arrow functions can be an attractive alternative to function expressions for callbacks or function arguments.</source>
          <target state="translated">矢印関数は、コールバックや関数引数の関数式に代わる魅力的な選択肢となります。</target>
        </trans-unit>
        <trans-unit id="7e6cdc713a515de0161d2398e627f9ccf2d292b7" translate="yes" xml:space="preserve">
          <source>Arrow functions can omit parentheses when they have exactly one parameter. In all other cases the parameter(s) must be wrapped in parentheses. This rule enforces the consistent use of parentheses in arrow functions.</source>
          <target state="translated">矢印関数は、パラメータが正確に1つの場合は括弧を省略することができます。それ以外のすべての場合、パラメータは括弧で囲む必要があります。この規則は、矢印関数で一貫して括弧を使用することを強制します。</target>
        </trans-unit>
        <trans-unit id="86962e3d2106eae0514d3ca150fcb521360f7e33" translate="yes" xml:space="preserve">
          <source>Arrow functions have two syntactic forms for their function bodies. They may be defined with a &lt;em&gt;block&lt;/em&gt; body (denoted by curly braces) &lt;code&gt;() =&amp;gt; { ... }&lt;/code&gt; or with a single expression &lt;code&gt;() =&amp;gt; ...&lt;/code&gt;, whose value is implicitly returned.</source>
          <target state="translated">矢印関数には、関数本体に2つの構文形式があります。それらは、（中括弧で示される）&lt;em&gt;ブロック&lt;/em&gt;本体（ &lt;code&gt;() =&amp;gt; { ... }&lt;/code&gt; または単一の式 &lt;code&gt;() =&amp;gt; ...&lt;/code&gt; で定義でき、その値は暗黙的に返されます。</target>
        </trans-unit>
        <trans-unit id="ad88ac6681f3fba161f8f17b35402682ae6dfd20" translate="yes" xml:space="preserve">
          <source>As a result, it was difficult for an integration to distinguish between the two cases to determine whether it should try to extract linting results from the output.</source>
          <target state="translated">その結果、出力からモリント結果を抽出しようとするべきかどうかを判断するための統合が難しかった。</target>
        </trans-unit>
        <trans-unit id="cef53b4059e20deb2e5c46250f59e175341842d1" translate="yes" xml:space="preserve">
          <source>As a rule of thumb: With ESLint v6, plugins should always be installed locally, even if ESLint was installed globally. More precisely, ESLint v6 resolves plugins relative to the end user's project by default, and always resolves shareable configs and parsers relative to the location of the config file that imports them.</source>
          <target state="translated">経験則として ESLint v6では、たとえESLintがグローバルにインストールされていたとしても、プラグインは常にローカルにインストールされなければなりません。より正確には、ESLint v6 はデフォルトでプラグインをエンドユーザーのプロジェクトから相対的に解決し、共有可能なコンフィグとパーサーを常にインポートするコンフィグファイルの場所から相対的に解決します。</target>
        </trans-unit>
        <trans-unit id="5ac2a5d22276a18b4b5cf02e2da7daf5734ca95f" translate="yes" xml:space="preserve">
          <source>As an alternative, you can use the &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; and &lt;a href=&quot;no-shadow-restricted-names&quot;&gt;no-shadow-restricted-names&lt;/a&gt; rules to prevent &lt;code&gt;undefined&lt;/code&gt; from being shadowed or assigned a different value. This ensures that &lt;code&gt;undefined&lt;/code&gt; will always hold its original, expected value.</source>
          <target state="translated">代わりに、&lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt;および&lt;a href=&quot;no-shadow-restricted-names&quot;&gt;no-shadow-restricted-names&lt;/a&gt;ルールを使用して、 &lt;code&gt;undefined&lt;/code&gt; がシャドウされたり、別の値が割り当てられたりするのを防ぐことができます。これにより、 &lt;code&gt;undefined&lt;/code&gt; は常に元の期待値を保持します。</target>
        </trans-unit>
        <trans-unit id="bfabdafd218d7722aa287977e6776b77c7c9d117" translate="yes" xml:space="preserve">
          <source>As an example, let's assume you're using the package name &lt;code&gt;eslint-config-myconfig&lt;/code&gt; and your package looks something like this:</source>
          <target state="translated">例として、あなたは、パッケージ名を使用していると仮定しましょう &lt;code&gt;eslint-config-myconfig&lt;/code&gt; し、あなたのパッケージは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1e03fe02a8a4faab337d273cf85be225f6274838" translate="yes" xml:space="preserve">
          <source>As an example, suppose that you are using the &lt;code&gt;airbnb&lt;/code&gt; preset, so your &lt;code&gt;.jscsrc&lt;/code&gt; file looks like this:</source>
          <target state="translated">例として、 &lt;code&gt;airbnb&lt;/code&gt; プリセットを使用しているとすると、 &lt;code&gt;.jscsrc&lt;/code&gt; ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="92656dee77e92e2cde09e2ed85c732113bec847a" translate="yes" xml:space="preserve">
          <source>As an example, you can create a file called &lt;code&gt;my-special-config.js&lt;/code&gt; in the root of your npm package and export a config, such as:</source>
          <target state="translated">例として、npmパッケージのルートに &lt;code&gt;my-special-config.js&lt;/code&gt; というファイルを作成し、次のような設定をエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="ab00035935ca3b0baf7ecef1d9105a1cc7f8bbf3" translate="yes" xml:space="preserve">
          <source>As announced in &lt;a href=&quot;https://eslint.org/blog/2016/10/eslint-v3.8.0-released#additional-property-on-linting-results&quot;&gt;October 2016&lt;/a&gt;, the &lt;code&gt;source&lt;/code&gt; property has been removed from individual lint message objects.</source>
          <target state="translated">&lt;a href=&quot;https://eslint.org/blog/2016/10/eslint-v3.8.0-released#additional-property-on-linting-results&quot;&gt;2016年10月に&lt;/a&gt;発表されたように、 &lt;code&gt;source&lt;/code&gt; プロパティは個々のlintメッセージオブジェクトから削除されました。</target>
        </trans-unit>
        <trans-unit id="cc89e27f98a865cd56617be1e005e0fbabcceb74" translate="yes" xml:space="preserve">
          <source>As another example, you can disallow calls to &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="translated">別の例として、 &lt;code&gt;require()&lt;/code&gt; の呼び出しを禁止できます。</target>
        </trans-unit>
        <trans-unit id="35711e725121bb4daddca1b88df5389087578f01" translate="yes" xml:space="preserve">
          <source>As far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript. Dangling underscores are underscores at either the beginning or end of an identifier, such as:</source>
          <target state="translated">識別子の命名規則に関して言えば、ダングリングアンダースコアは JavaScript の中で最も偏ったものかもしれません。ダングリングアンダースコアとは、識別子の最初か最後のどちらかにあるアンダースコアのことです。</target>
        </trans-unit>
        <trans-unit id="359ddf699fe41e18d17c5cee4d7389854514dd09" translate="yes" xml:space="preserve">
          <source>As illustrated above, the &lt;code&gt;--fix&lt;/code&gt; option, applied to this rule, does not comply with other rules, such as &lt;code&gt;indent&lt;/code&gt;, but, if those other rules are also in effect, the option applies them, too.</source>
          <target state="translated">上記のように、このルールに適用される &lt;code&gt;--fix&lt;/code&gt; オプションは、 &lt;code&gt;indent&lt;/code&gt; などの他のルールに準拠していませんが、他のルールも有効である場合、オプションはそれらも適用します。</target>
        </trans-unit>
        <trans-unit id="63c22f0243a6ef055657c0b394805c35de30c0bb" translate="yes" xml:space="preserve">
          <source>As long as you do not explicitly disallow empty parentheses using the &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception , &lt;code&gt;()&lt;/code&gt; will be allowed.</source>
          <target state="translated">&lt;code&gt;&quot;empty&quot;&lt;/code&gt; 例外を使用して空の括弧を明示的に禁止しない限り、 &lt;code&gt;()&lt;/code&gt; は許可されます。</target>
        </trans-unit>
        <trans-unit id="36031e157974d6e4e95c8577f6c65001ba72eb53" translate="yes" xml:space="preserve">
          <source>As noted above, don't try to conform to user-defined styles.</source>
          <target state="translated">上述のように、ユーザー定義のスタイルに準拠しようとしないでください。</target>
        </trans-unit>
        <trans-unit id="6997d9f9481d3aa449f1f150ecff4a38d74cd109" translate="yes" xml:space="preserve">
          <source>As of April 2019, Node.js 6 will be at EOL and will no longer be receiving security updates. As a result, we have decided to drop support for it in ESLint v6. We now support the following versions of Node.js:</source>
          <target state="translated">2019年4月現在、Node.js 6はEOLになり、セキュリティアップデートを受けられなくなります。その結果、ESLint v6でのサポートを終了することにしました。現在は以下のバージョンのNode.jsをサポートしています。</target>
        </trans-unit>
        <trans-unit id="b8e4d215a9b1053a82c1c3667c7e83f450b7e535" translate="yes" xml:space="preserve">
          <source>As of April 30th, 2018, Node.js 4 will be at EOL and will no longer be receiving security updates. As a result, we have decided to drop support for it in ESLint v5. We now support the following versions of Node.js:</source>
          <target state="translated">2018年4月30日現在、Node.js 4はEOLとなり、セキュリティアップデートを受けられなくなります。その結果、ESLint v5でのサポートを終了することになりました。 現在は以下のバージョンのNode.jsをサポートしています。</target>
        </trans-unit>
        <trans-unit id="639737c9a0fcdaaf4de4d62a4eb3832bf70ec145" translate="yes" xml:space="preserve">
          <source>As of the ECMAScript 5 specification, octal escape sequences in string literals are deprecated and should not be used. Unicode escape sequences should be used instead.</source>
          <target state="translated">ECMAScript 5 の仕様では、文字列リテラル内の 8 進数エスケープシーケンスは非推奨であり、使用すべきではありません。代わりに Unicode エスケープシーケンスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5f796d7f3a3af24d75131206d0abc1c2fc320e4" translate="yes" xml:space="preserve">
          <source>As of today there is no consistency in separating variable declarations from the rest of the code. Some developers leave an empty line between var statements and the rest of the code like:</source>
          <target state="translated">現在のところ、変数宣言をコードの残りの部分から分離することには一貫性がありません。開発者の中には、var 文とそれ以外のコードの間に空行を残している人もいます。</target>
        </trans-unit>
        <trans-unit id="919575f3efa6c0f02be94e623198fe4b3f3858de" translate="yes" xml:space="preserve">
          <source>As with other operators, whitespace is allowed between the rest or spread operator and the expression it is operating on, which can lead to inconsistent spacing within a codebase.</source>
          <target state="translated">他の演算子と同様に、rest や spread 演算子とそれが操作している式との間には空白が許されており、コードベース内での間隔の不統一を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="0710b60a1696119971ef357bcfe3a579cda6ccc5" translate="yes" xml:space="preserve">
          <source>Assignment operators: &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;**=&lt;/code&gt;</source>
          <target state="translated">代入演算子： &lt;code&gt;+=&lt;/code&gt; 、 &lt;code&gt;-=&lt;/code&gt; 、 &lt;code&gt;/=&lt;/code&gt; 、 &lt;code&gt;*=&lt;/code&gt; 、 &lt;code&gt;%=&lt;/code&gt; 、 &lt;code&gt;**=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dcc322d290b8282a3ec6a0dcc7758c4cf606caee" translate="yes" xml:space="preserve">
          <source>Assignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the &lt;code&gt;arguments&lt;/code&gt; object. Often, assignment to function parameters is unintended and indicative of a mistake or programmer error.</source>
          <target state="translated">関数パラメーターを変更すると &lt;code&gt;arguments&lt;/code&gt; オブジェクトも変化するため、関数パラメーターとして宣言された変数への割り当ては誤解を招き、混乱を招く可能性があります。多くの場合、関数パラメーターへの割り当ては意図しないものであり、間違いやプログラマーのエラーを示しています。</target>
        </trans-unit>
        <trans-unit id="057d58c74d80136578cabbeee1b89206c3250bd4" translate="yes" xml:space="preserve">
          <source>Assignments</source>
          <target state="translated">Assignments</target>
        </trans-unit>
        <trans-unit id="5b6a96371479cd831de3c86df48d3f84797d4f2d" translate="yes" xml:space="preserve">
          <source>Asynchronous functions are designed to work with promises such that throwing an error will cause a promise's rejection handler (such as &lt;code&gt;catch()&lt;/code&gt;) to be called. For example:</source>
          <target state="translated">非同期関数は、エラーをスローするとプロミスの拒否ハンドラー（ &lt;code&gt;catch()&lt;/code&gt; など）が呼び出されるようにプロミスと連動するように設計されています。例えば：</target>
        </trans-unit>
        <trans-unit id="5d9edce612edcef785910f3d8c06b7cc17be832d" translate="yes" xml:space="preserve">
          <source>Asynchronous functions in JavaScript behave differently than other functions in two important ways:</source>
          <target state="translated">JavaScriptの非同期関数は、2つの重要な方法で他の関数とは異なる振る舞いをします。</target>
        </trans-unit>
        <trans-unit id="d07b283087747dcb783d2c5638a96fb74be3a055" translate="yes" xml:space="preserve">
          <source>Asynchronous functions that don't use &lt;code&gt;await&lt;/code&gt; might not need to be asynchronous functions and could be the unintentional result of refactoring.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; を使用しない非同期関数は、非同期関数である必要がなく、リファクタリングの意図しない結果である可能性があります。</target>
        </trans-unit>
        <trans-unit id="495cf70b3cb0e5d5ab7aca92fdf16ff61b730e2a" translate="yes" xml:space="preserve">
          <source>At a high level, there are a few key parts to ESLint:</source>
          <target state="translated">高いレベルでは、ESLintにはいくつかの重要な部分があります。</target>
        </trans-unit>
        <trans-unit id="621a7b37086b2293090e367d567f731b096f33e9" translate="yes" xml:space="preserve">
          <source>At least one pattern that should &lt;strong&gt;not&lt;/strong&gt; be flagged as a warning.</source>
          <target state="translated">警告としてフラグを立ててはなら&lt;strong&gt;ない&lt;/strong&gt;少なくとも1つのパターン。</target>
        </trans-unit>
        <trans-unit id="ceaa0640f64b301c62702fc1f3dbd78d5989a7d3" translate="yes" xml:space="preserve">
          <source>At the end of a line, describing the code before it.</source>
          <target state="translated">行の最後に、その前のコードを記述します。</target>
        </trans-unit>
        <trans-unit id="72ebf06181ae179602daa4a6f7199df15311cc04" translate="yes" xml:space="preserve">
          <source>Atom: &lt;a href=&quot;https://atom.io/packages/linter-eslint&quot;&gt;linter-eslint&lt;/a&gt;</source>
          <target state="translated">Atom：&lt;a href=&quot;https://atom.io/packages/linter-eslint&quot;&gt;linter-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abe4bd9fe57b0bcc1427ef624d7c93cec300a520" translate="yes" xml:space="preserve">
          <source>Autofix</source>
          <target state="translated">Autofix</target>
        </trans-unit>
        <trans-unit id="d4cddfb1d29a73864682c265654bb0f2ef5476d3" translate="yes" xml:space="preserve">
          <source>Avoid any fixes that could change the runtime behavior of code and cause it to stop working.</source>
          <target state="translated">コードの実行時の動作を変更したり、動作を停止させたりする可能性のある修正は避けてください。</target>
        </trans-unit>
        <trans-unit id="306c84fc19df225b2358435f3ea8025274a539d7" translate="yes" xml:space="preserve">
          <source>BackboneJS</source>
          <target state="translated">BackboneJS</target>
        </trans-unit>
        <trans-unit id="590c11c93648fb5d0c4b013203880b1158db402c" translate="yes" xml:space="preserve">
          <source>Backreference to a group from within the same group, e.g., &lt;code&gt;/(\1)/&lt;/code&gt;. Similar to the previous, the group hasn't captured anything yet, and ECMAScript doesn't support nested references.</source>
          <target state="translated">同じグループ内からのグループへの逆参照 &lt;code&gt;/(\1)/&lt;/code&gt; 例：/（\ 1）/）。前と同様に、グループはまだ何もキャプチャしておらず、ECMAScriptはネストされた参照をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="4bd3636861a32e20874263ba25f0f171e88a0d76" translate="yes" xml:space="preserve">
          <source>Backreference to a group that appears later in the pattern, e.g., &lt;code&gt;/\1(a)/&lt;/code&gt;. The group hasn't captured anything yet, and ECMAScript doesn't support forward references. Inside lookbehinds, which match backward, the opposite applies and this rule disallows backreference to a group that appears before in the same lookbehind, e.g., &lt;code&gt;/(?&amp;lt;=(a)\1)b/&lt;/code&gt;.</source>
          <target state="translated">パターンの後半に表示されるグループへの逆参照 &lt;code&gt;/\1(a)/&lt;/code&gt; 例：/ \ 1（a）/）。グループはまだ何もキャプチャしておらず、ECMAScriptは前方参照をサポートしていません。後方に一致するルックビハインド内では、反対のことが適用され、このルールは、同じルックビハインドで以前に表示されたグループへの後方参照を許可しません &lt;code&gt;/(?&amp;lt;=(a)\1)b/&lt;/code&gt; 例：/（？&amp;lt;=（a）\ 1）b /）。</target>
        </trans-unit>
        <trans-unit id="92e943b647b931d1ccec99195421ca827319d339" translate="yes" xml:space="preserve">
          <source>Backreference to a group that is in a negative lookaround, if the backreference isn't in the same negative lookaround, e.g., &lt;code&gt;/a(?!(b)).\1/&lt;/code&gt;. A negative lookaround (lookahead or lookbehind) succeeds only if its pattern cannot match, meaning that the group has failed.</source>
          <target state="translated">/ a（ &lt;code&gt;/a(?!(b)).\1/&lt;/code&gt; 。\ 1 /のように、逆参照が同じ負のルックアラウンドにない場合は、負のルックアラウンドにあるグループへの逆参照。ネガティブルックアラウンド（ルックアヘッドまたはルックビハインド）は、そのパターンが一致しない場合、つまりグループが失敗した場合にのみ成功します。</target>
        </trans-unit>
        <trans-unit id="08aa1ad19911ad4486a39d4abbd123879c9f3022" translate="yes" xml:space="preserve">
          <source>Backreference to a group that is in another alternative, e.g., &lt;code&gt;/(a)|\1b/&lt;/code&gt;. In such constructed regular expression, the backreference is expected to match what's been captured in, at that point, a non-participating group.</source>
          <target state="translated">別の選択肢にあるグループへの逆参照 &lt;code&gt;/(a)|\1b/&lt;/code&gt; 例：/（a）| \ 1b /）。このように構築された正規表現では、後方参照は、その時点で参加していないグループでキャプチャされたものと一致することが期待されます。</target>
        </trans-unit>
        <trans-unit id="35805296cd7728ff114fb76bd6eaa3846c07df85" translate="yes" xml:space="preserve">
          <source>Backreferences that always successfully match zero-length and cannot match anything else are useless. They are basically ignored and can be removed without changing the behavior of the regular expression.</source>
          <target state="translated">常にゼロ長にマッチし、それ以外のものにはマッチしない後方参照は意味がありません。これらは基本的に無視され、正規表現の動作を変更することなく削除することができます。</target>
        </trans-unit>
        <trans-unit id="29f6864f9d968127a39d6137bd517abb38085639" translate="yes" xml:space="preserve">
          <source>Bad Parts: Appendix B - JavaScript: The Good Parts by Douglas Crockford</source>
          <target state="translated">バッドパーツ。付録B-JavaScript.ダグラス・クロックフォードによる良い部分</target>
        </trans-unit>
        <trans-unit id="9d235dc23d56ee7523bf4a3040b040809b5d9d05" translate="yes" xml:space="preserve">
          <source>Bad names can lead to hard-to-decipher code. Generic names, such as &lt;code&gt;data&lt;/code&gt;, don't infer much about the code and the values it receives. This rule allows you to configure a blacklist of bad identifier names, that you don't want to see in your code.</source>
          <target state="translated">悪い名前は、解読が困難なコードにつながる可能性があります。 &lt;code&gt;data&lt;/code&gt; などの総称名は、コードとコードが受け取る値についてあまり推論しません。このルールを使用すると、コードに表示したくない不正な識別子名のブラックリストを設定できます。</target>
        </trans-unit>
        <trans-unit id="45e3efa2edac0571ee67321d4540c6b50542b0b5" translate="yes" xml:space="preserve">
          <source>Balancing the trade-offs of improving a tool and the frustration these changes can cause is a difficult task. One key area in which this affects our users is in the removal of rules.</source>
          <target state="translated">ツールを改善することによるトレードオフと、これらの変更が引き起こす可能性のあるフラストレーションのバランスをとるのは難しい作業です。これがユーザーに影響を与える重要な領域の一つは、ルールの削除にあります。</target>
        </trans-unit>
        <trans-unit id="0a6c27b74b2f0cc0a381a8c3c2e72f8e524c139f" translate="yes" xml:space="preserve">
          <source>Base config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;error&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="translated">基本構成： &lt;code&gt;&quot;eqeqeq&quot;: [&quot;error&quot;, &quot;allow-null&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9860705f28896b947024df2984725f09dd6c922e" translate="yes" xml:space="preserve">
          <source>Base config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;, &quot;avoid-escape&quot;]&lt;/code&gt;</source>
          <target state="translated">基本構成： &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;, &quot;avoid-escape&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36c41688b96ebca8546b978b079367e1aa359e74" translate="yes" xml:space="preserve">
          <source>Basic configuration</source>
          <target state="translated">基本的な設定</target>
        </trans-unit>
        <trans-unit id="01687ec15ad6446d986f944c334f8c817b38eb6c" translate="yes" xml:space="preserve">
          <source>Basically, this rule checks whether or not a function containing &lt;code&gt;this&lt;/code&gt; keyword is a constructor or a method.</source>
          <target state="translated">基本的に、このルールは、 &lt;code&gt;this&lt;/code&gt; キーワードを含む関数がコンストラクタまたはメソッドであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="af7d13a9632df81e6cb39ca5e79cc4662290eec7" translate="yes" xml:space="preserve">
          <source>Be general enough so as to apply for a large number of developers.</source>
          <target state="translated">多くの開発者に適用できるように、十分に一般的であること。</target>
        </trans-unit>
        <trans-unit id="79bbf1337c47348353685759495b7a45014d286e" translate="yes" xml:space="preserve">
          <source>Be important enough that rule is deemed incomplete without this change</source>
          <target state="translated">この変更なしではルールが不完全とみなされることを十分に重要であること</target>
        </trans-unit>
        <trans-unit id="5a54350365702eabd89e1fe99647f988f3033e85" translate="yes" xml:space="preserve">
          <source>Be related to an ECMAScript feature that has reached stage 4 in the preceding 12 months</source>
          <target state="translated">過去12ヶ月間にステージ4に達したECMAScript機能に関連していること</target>
        </trans-unit>
        <trans-unit id="f4b55e25ea090a046d084a971240dfd3507ebe89" translate="yes" xml:space="preserve">
          <source>Be sure to replace &lt;code&gt;eslint-config-myconfig&lt;/code&gt; with the actual name of your module.</source>
          <target state="translated">&lt;code&gt;eslint-config-myconfig&lt;/code&gt; を実際のモジュールの名前に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="1ea22322c908aaf33db86bfe16cff237c8212ad5" translate="yes" xml:space="preserve">
          <source>Be sure to replace the value of &lt;code&gt;&quot;no-with&quot;&lt;/code&gt; with your rule's ID. There are plenty of examples in the &lt;code&gt;tests/lib/rules/&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;&quot;no-with&quot;&lt;/code&gt; の値をルールのID に置き換えてください。 &lt;code&gt;tests/lib/rules/&lt;/code&gt; ディレクトリにはたくさんの例があります。</target>
        </trans-unit>
        <trans-unit id="18aedaaa28198e2a59dec8437406e3c102dd1605" translate="yes" xml:space="preserve">
          <source>Be sure to run this after making changes and before sending a pull request with your changes.</source>
          <target state="translated">変更を行った後、変更内容のプルリクエストを送信する前に必ず実行してください。</target>
        </trans-unit>
        <trans-unit id="51bc61c6b074f9a10af3f6c5c9591384318e3d81" translate="yes" xml:space="preserve">
          <source>Be very important for ESLint users because it either catches a serious problem or allows styling of code in accordance with a popular style guide</source>
          <target state="translated">ESLintユーザーにとって非常に重要な機能です。重大な問題を検出したり、一般的なスタイルガイドに沿ったコードのスタイリングを可能にします。</target>
        </trans-unit>
        <trans-unit id="810e6eb159bb09246263948760aa70f2100cfe2c" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;NaN&lt;/code&gt; is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to &lt;code&gt;NaN&lt;/code&gt; are confusing:</source>
          <target state="translated">ので &lt;code&gt;NaN&lt;/code&gt; はとの比較の結果、自身を含めて、何に等しいないことによって、JavaScriptでユニークである &lt;code&gt;NaN&lt;/code&gt; で混乱しています：</target>
        </trans-unit>
        <trans-unit id="5df824196b86c8adee95b01269bc5eeb40dedbe4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;let a&lt;/code&gt; and &lt;code&gt;let b&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement are before the declarations in the outer scope, they are correct.</source>
          <target state="translated">ので &lt;code&gt;let a&lt;/code&gt; と &lt;code&gt;let b&lt;/code&gt; で &lt;code&gt;if&lt;/code&gt; 、外側のスコープで宣言の前にある文を、彼らは正しいです。</target>
        </trans-unit>
        <trans-unit id="5f0497ce3d58dfa25f479c41ca69d85c12b0f4d4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;let a&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement is before the &lt;em&gt;variable&lt;/em&gt; declaration in the outer scope, it is correct.</source>
          <target state="translated">ので &lt;code&gt;let a&lt;/code&gt; で &lt;code&gt;if&lt;/code&gt; 文が前にある&lt;em&gt;変数の&lt;/em&gt;外側のスコープで宣言、それは正しいです。</target>
        </trans-unit>
        <trans-unit id="01b065ee83f0fe8d1c0b2ce8c11b0d2e7f30c46b" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;undefined&lt;/code&gt; can be overwritten or shadowed, reading &lt;code&gt;undefined&lt;/code&gt; can give an unexpected value. (This is not the case for &lt;code&gt;null&lt;/code&gt;, which is a keyword that always produces the same value.) To guard against this, you can avoid all uses of &lt;code&gt;undefined&lt;/code&gt;, which is what some style guides recommend and what this rule enforces. Those style guides then also recommend:</source>
          <target state="translated">ので &lt;code&gt;undefined&lt;/code&gt; 上書きすることができ、または影に、読書 &lt;code&gt;undefined&lt;/code&gt; 予期しない値を与えることができます。（これは、常に同じ値を生成するキーワードである &lt;code&gt;null&lt;/code&gt; には当てはまりません。）これを防ぐために、 &lt;code&gt;undefined&lt;/code&gt; のすべての使用を回避できます。これは、一部のスタイルガイドが推奨し、このルールが適用するものです。これらのスタイルガイドは、次のことも推奨しています。</target>
        </trans-unit>
        <trans-unit id="8a6961b1fc4ead961a35ac6fe169d9c4f639c4f8" translate="yes" xml:space="preserve">
          <source>Because ESLint knows to look for packages beginning with &lt;code&gt;eslint-formatter-&lt;/code&gt; when the specified formatter doesn't begin with a dot, there is no need to type &lt;code&gt;eslint-formatter-&lt;/code&gt; when using a packaged custom formatter.</source>
          <target state="translated">ESLintは &lt;code&gt;eslint-formatter-&lt;/code&gt; で始まるパッケージを探すことを知っているため、指定されたフォーマッターがドットで始まらない場合、パッケージ化されたカスタムフォーマッターを使用するときに &lt;code&gt;eslint-formatter-&lt;/code&gt; を入力する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4fc7dc53a3528436b27976bf4104d8d5429b3eba" translate="yes" xml:space="preserve">
          <source>Because empty character classes in regular expressions do not match anything, they might be typing mistakes.</source>
          <target state="translated">正規表現の空文字クラスは何もマッチしないので、入力ミスかもしれません。</target>
        </trans-unit>
        <trans-unit id="193c90e929807d2fbef26a901a7c3ae14756f0af" translate="yes" xml:space="preserve">
          <source>Because it is difficult to understand the meaning of a program through static analysis, this rule has limitations:</source>
          <target state="translated">静的解析ではプログラムの意味を理解することが難しいため、このルールでは限界があります。</target>
        </trans-unit>
        <trans-unit id="fa8356d791c997a2386c33d523d57552d8123e0b" translate="yes" xml:space="preserve">
          <source>Because of historical reason, JavaScript regular expressions are tolerant of syntax errors. For example, &lt;code&gt;/\w{1, 2/&lt;/code&gt; is a syntax error, but JavaScript doesn't throw the error. It matches strings such as &lt;code&gt;&quot;a{1, 2&quot;&lt;/code&gt; instead. Such a recovering logic is defined in Annex B.</source>
          <target state="translated">歴史的な理由により、JavaScript正規表現は構文エラーを許容します。たとえば、 &lt;code&gt;/\w{1, 2/&lt;/code&gt; は構文エラーですが、JavaScriptはエラーをスローしません。代わりに &lt;code&gt;&quot;a{1, 2&quot;&lt;/code&gt; などの文字列に一致します。このような回復ロジックは、付録Bで定義されています。</target>
        </trans-unit>
        <trans-unit id="829485c20f3847468a65057a424a82114baf209a" translate="yes" xml:space="preserve">
          <source>Because of this ambiguity, it's considered a best practice to not use assignment in &lt;code&gt;return&lt;/code&gt; statements.</source>
          <target state="translated">このあいまいさのため、 &lt;code&gt;return&lt;/code&gt; ステートメントで代入を使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6bdcdf38242a7e8f4d4fcd5fc5368730a95fbd82" translate="yes" xml:space="preserve">
          <source>Because of this line, all of the rules marked &quot;&quot; on the &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules page&lt;/a&gt; will be turned on. Alternatively, you can use configurations that others have created by searching for &quot;eslint-config&quot; on &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-config&quot;&gt;npmjs.com&lt;/a&gt;. ESLint will not lint your code unless you extend from a shared configuration or explicitly turn rules on in your configuration.</source>
          <target state="translated">この行があるため、&lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;ルールページで&lt;/a&gt;「」とマークされているすべてのルールがオンになります。また、あなたは他の人が上で「eslint-config設定」を検索することにより、作成した構成で使用することができ&lt;a href=&quot;https://www.npmjs.com/search?q=eslint-config&quot;&gt;npmjs.comを&lt;/a&gt;。ESLintは、共有構成から拡張するか、構成でルールを明示的にオンにしない限り、コードをlintしません。</target>
        </trans-unit>
        <trans-unit id="c58cd425c976939ecd82b2995c639212a60ad578" translate="yes" xml:space="preserve">
          <source>Because rules are highly personal (and therefore very contentious), accepted rules should:</source>
          <target state="translated">ルールは非常に個人的なものであるため(したがって、非常に論争の多いものである)、受け入れられたルールは、そうあるべきです。</target>
        </trans-unit>
        <trans-unit id="54ee4e3ecc629da796061aa811a204b0d0ede953" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; statements unconditionally exit a block of code, any statements after them cannot be executed. Unreachable statements are usually a mistake.</source>
          <target state="translated">そのため &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、および &lt;code&gt;continue&lt;/code&gt; 文は無条件にコードのブロックを終了し、それらの後に、任意の文を実行することができません。到達できないステートメントは通常、間違いです。</target>
        </trans-unit>
        <trans-unit id="96acc830fffba196b06148e83e6c35be6a3547ca" translate="yes" xml:space="preserve">
          <source>Because the default formatter does not output the fixed code, you'll have to use another one (e.g. &lt;code&gt;json&lt;/code&gt;) to get the fixes. Here's an example of this pattern:</source>
          <target state="translated">デフォルトのフォーマッタは修正されたコードを出力しないため、修正を取得するには別のフォーマッタ（たとえば &lt;code&gt;json&lt;/code&gt; ）を使用する必要があります。このパターンの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="2268244767d0a8979d97ea56564f6062501bc559" translate="yes" xml:space="preserve">
          <source>Because the leading zero which identifies an octal literal has been a source of confusion and error in JavaScript code, ECMAScript 5 deprecates the use of octal numeric literals.</source>
          <target state="translated">8 進数リテラルを識別する先頭のゼロは、JavaScript コードの混乱とエラーの原因となっていたため、ECMAScript 5 では 8 進数リテラルの使用を推奨していません。</target>
        </trans-unit>
        <trans-unit id="8c82248abc6dfee06debb73cfce89a8e4f795a1b" translate="yes" xml:space="preserve">
          <source>Because the unary &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code.</source>
          <target state="translated">単項の &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt; 演算子はセミコロンの自動挿入の影響を受けるため、空白の違いによりソースコードのセマンティクスが変わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f604fe978a15911ed565d1015ff35e244c161a38" translate="yes" xml:space="preserve">
          <source>Before ES2015, one must use &lt;code&gt;Function.prototype.apply()&lt;/code&gt; to call variadic functions.</source>
          <target state="translated">ES2015より前のバージョンでは、 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; を使用して可変関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="04d85842fb0b6614fec5658d9178bccc19435047" translate="yes" xml:space="preserve">
          <source>Before a multi-line or single-line comment</source>
          <target state="translated">複数行または1行コメントの前に</target>
        </trans-unit>
        <trans-unit id="6a8fc4a82c425da02c6e46947503f16797bbd31e" translate="yes" xml:space="preserve">
          <source>Before beginning the process of migrating to ESLint, it's helpful to understand some of the terminology that ESLint uses and how it relates to terminology that JSCS uses.</source>
          <target state="translated">ESLintへの移行を始める前に、ESLintが使用している用語やJSCSが使用している用語との関係を理解しておくと便利です。</target>
        </trans-unit>
        <trans-unit id="793c8c352b760ab25f360bc8326c9bc71cd0b225" translate="yes" xml:space="preserve">
          <source>Before using the plugin, you have to install it using npm.</source>
          <target state="translated">プラグインを使う前に、npmを使ってインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="6e511de50956811edeb578d59a0804fbfbe8dea8" translate="yes" xml:space="preserve">
          <source>Before you can get started developing, you'll need to have a couple of things installed:</source>
          <target state="translated">開発を始める前に、いくつかのものをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="0130cfac353bfd32d8fda0c8f1e2c0f0eea17e6d" translate="yes" xml:space="preserve">
          <source>Before you can get started, you'll need to get a copy of the ESLint source code. This section explains how to do that and a little about the source code structure.</source>
          <target state="translated">始める前に、ESLintのソースコードを入手する必要があります。このセクションではその方法とソースコードの構造について少し説明します。</target>
        </trans-unit>
        <trans-unit id="995b6b46a3656fa3fd0e18ff29db167a9a0ad968" translate="yes" xml:space="preserve">
          <source>Before you send the pull request, be sure to rebase onto the upstream source. This ensures your code is running on the latest available code.</source>
          <target state="translated">プルリクエストを送信する前に、必ずアップストリームのソースにリベースしてください。これにより、あなたのコードが最新の利用可能なコードで実行されていることを保証します。</target>
        </trans-unit>
        <trans-unit id="992e83579bc6ea6859e6f627be4f4eab97b057be" translate="yes" xml:space="preserve">
          <source>Behind the scenes in this example, a &lt;code&gt;String&lt;/code&gt; object is constructed. The &lt;code&gt;substring()&lt;/code&gt; method exists on &lt;code&gt;String.prototype&lt;/code&gt; and so is accessible to the string instance.</source>
          <target state="translated">この例の舞台裏では、 &lt;code&gt;String&lt;/code&gt; オブジェクトが作成されています。 &lt;code&gt;substring()&lt;/code&gt; メソッドは、上に存在 &lt;code&gt;String.prototype&lt;/code&gt; ので、文字列インスタンスにアクセス可能です。</target>
        </trans-unit>
        <trans-unit id="36de90e22d47f94d755a4b1bb70aaddc1bb47593" translate="yes" xml:space="preserve">
          <source>Best Practices</source>
          <target state="translated">ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="338ee79beaaaf18126ed94b8ed03f554024e0cfd" translate="yes" xml:space="preserve">
          <source>Best practices for fixes:</source>
          <target state="translated">修正のベストプラクティス。</target>
        </trans-unit>
        <trans-unit id="adf5c01b97b20119b71324bd7d7da5f8f31c07c4" translate="yes" xml:space="preserve">
          <source>Best practices for suggestions:</source>
          <target state="translated">提案のためのベストプラクティス。</target>
        </trans-unit>
        <trans-unit id="4386a3199d49f37540036167c2bb082a887d89c5" translate="yes" xml:space="preserve">
          <source>Between class and interface definitions</source>
          <target state="translated">クラスとインターフェースの定義の間</target>
        </trans-unit>
        <trans-unit id="e4f1e78655d2e55a66e32e73e443e9bfa69aad3b" translate="yes" xml:space="preserve">
          <source>Between logical sections inside a method to improve readability</source>
          <target state="translated">読みやすさを向上させるためのメソッド内の論理セクション間</target>
        </trans-unit>
        <trans-unit id="6d933ad8020c5b55ee20e6d8689eedf9c5360026" translate="yes" xml:space="preserve">
          <source>Between methods</source>
          <target state="translated">メソッド間</target>
        </trans-unit>
        <trans-unit id="ef7e5a6d3249c554a4ce807b393edf17264edfd6" translate="yes" xml:space="preserve">
          <source>Between sections of a source file</source>
          <target state="translated">ソースファイルのセクション間</target>
        </trans-unit>
        <trans-unit id="c6cc8a57f3e58d7cd4de8dbcbc697d3180b54db0" translate="yes" xml:space="preserve">
          <source>Between the local variables in a method and its first statement</source>
          <target state="translated">メソッド内のローカル変数とその最初のステートメントの間で</target>
        </trans-unit>
        <trans-unit id="bbf1b9521b28972220cbf79325e2c20617b6b053" translate="yes" xml:space="preserve">
          <source>Bitwise Operators: &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt;, &lt;code&gt;&quot;|&quot;&lt;/code&gt;, &lt;code&gt;&quot;^&quot;&lt;/code&gt;, &lt;code&gt;&quot;~&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">ビット演算子： &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;|&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;^&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;~&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e13b68b58d811fab318ca729a8f17b37d477b3d3" translate="yes" xml:space="preserve">
          <source>Blank lines improve readability by setting off sections of code that are logically related.</source>
          <target state="translated">空白行は、論理的に関連するコードのセクションをオフにすることで、可読性を向上させます。</target>
        </trans-unit>
        <trans-unit id="8cd96bd62f5564682b84ba6192bf191b1be28b43" translate="yes" xml:space="preserve">
          <source>Blank spaces should be used in the following circumstances:</source>
          <target state="translated">空白は以下の場合に使用してください。</target>
        </trans-unit>
        <trans-unit id="81e3cc1d3b5e5b1c0ad4b801e19204c1fb3921fc" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;path.join()&lt;/code&gt; and &lt;code&gt;path.resolve()&lt;/code&gt; are suitable replacements for string concatenation wherever file or directory paths are being created.</source>
          <target state="translated">&lt;code&gt;path.join()&lt;/code&gt; と &lt;code&gt;path.resolve()&lt;/code&gt; はどちらも、ファイルまたはディレクトリのパスが作成されている場合は常に、文字列連結の適切な置き換えです。</target>
        </trans-unit>
        <trans-unit id="fc21e1e88cd5040eb200959e21d74c582122508b" translate="yes" xml:space="preserve">
          <source>Both JSCS and ESLint have command line arguments corresponding to many of their configuration options. The following are the ESLint equivalents of JSCS command line options.</source>
          <target state="translated">JSCS と ESLint はどちらも多くの設定オプションに対応するコマンドライン引数を持っています。以下は JSCS のコマンドラインオプションの ESLint と同等のものです。</target>
        </trans-unit>
        <trans-unit id="097359be4adea4dcbabe6e8d3e40261ed26fa3b4" translate="yes" xml:space="preserve">
          <source>Both JSCS and ESLint use comments inside of files to disable rules around certain parts of your code. The following table lists out the JSCS inline configuration comments and their ESLint equivalents.</source>
          <target state="translated">JSCS と ESLint は、ファイル内のコメントを使用して、コードの特定の部分のルールを無効にします。次の表はJSCSのインライン設定コメントとESLintの同等のものを示しています。</target>
        </trans-unit>
        <trans-unit id="fcd59eef72f9e0322f0828949f6c01aa1aa8058e" translate="yes" xml:space="preserve">
          <source>Both flags are also supported by ESLint:</source>
          <target state="translated">どちらのフラグもESLintでサポートされています。</target>
        </trans-unit>
        <trans-unit id="7eb400d0db2fc241e32273e1dc9da88bebb4f838" translate="yes" xml:space="preserve">
          <source>Both the JSON and YAML configuration file formats support comments (&lt;code&gt;package.json&lt;/code&gt; files should not include them). You can use JavaScript-style comments or YAML-style comments in either type of file and ESLint will safely ignore them. This allows your configuration files to be more human-friendly. For example:</source>
          <target state="translated">JSONとYAMLの両方の構成ファイル形式でコメントがサポートされます（ &lt;code&gt;package.json&lt;/code&gt; ファイルにはコメントを含めないでください）。JavaScriptスタイルのコメントまたはYAMLスタイルのコメントをどちらのタイプのファイルでも使用でき、ESLintはそれらを安全に無視します。これにより、構成ファイルをより人間に優しくすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="7ca62df9fb4211495bebeb6ed476dbf24104a6bf" translate="yes" xml:space="preserve">
          <source>Brace style is closely related to &lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style&quot;&gt;indent style&lt;/a&gt; in programming and describes the placement of braces relative to their control statement and body. There are probably a dozen, if not more, brace styles in the world.</source>
          <target state="translated">ブレーススタイルは、プログラミングの&lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style&quot;&gt;インデント&lt;/a&gt;スタイルと密接に関連しており、制御ステートメントと本文に対するブレースの配置を記述します。世界には、おそらく12以上のブレーススタイルがあります。</target>
        </trans-unit>
        <trans-unit id="e376515dc59aa7f7420b054f55c95a72840be55b" translate="yes" xml:space="preserve">
          <source>Braces are used around all statements, even single statements, when they are part of a control structure, such as a &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; statement. This makes it easier to add statements without accidentally introducing bugs due to forgetting to add braces.</source>
          <target state="translated">中括弧は、 &lt;code&gt;if&lt;/code&gt; ステートメントや &lt;code&gt;for&lt;/code&gt; ステートメントなどの制御構造の一部である場合、すべてのステートメント（単一のステートメントを含む）の前後に使用されます。これにより、中括弧の追加を忘れたことによるバグを誤って発生させることなく、ステートメントを簡単に追加できます。</target>
        </trans-unit>
        <trans-unit id="6530074f50b1f9635a7588144e97521fd80531e4" translate="yes" xml:space="preserve">
          <source>Brackets: Included and &lt;a href=&quot;https://github.com/brackets-userland/brackets-eslint&quot;&gt;Brackets ESLint&lt;/a&gt;</source>
          <target state="translated">ブラケット：付属および&lt;a href=&quot;https://github.com/brackets-userland/brackets-eslint&quot;&gt;ブラケットESLint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="340cf97750d96a23ba91ddb2d90b8154b27637af" translate="yes" xml:space="preserve">
          <source>Breaking changes for integration developers</source>
          <target state="translated">統合開発者のための変更点</target>
        </trans-unit>
        <trans-unit id="d1041ecb62f259c55530b03bbc69965e7c82761b" translate="yes" xml:space="preserve">
          <source>Breaking changes for plugin developers</source>
          <target state="translated">プラグイン開発者のための変更点</target>
        </trans-unit>
        <trans-unit id="79e8db2e0b61dbfeb71d434b83b7fdf1e8353e53" translate="yes" xml:space="preserve">
          <source>Breaking changes for plugin/custom rule developers</source>
          <target state="translated">プラグイン/カスタムルール開発者のための変更点</target>
        </trans-unit>
        <trans-unit id="0fbc2bcadf39845db18cc44b3b7cc8416c784aea" translate="yes" xml:space="preserve">
          <source>Breaking changes for users</source>
          <target state="translated">ユーザーのための変化を壊す</target>
        </trans-unit>
        <trans-unit id="18e01f9cc8e37b9339253d5f02203a453a4b8b23" translate="yes" xml:space="preserve">
          <source>Broccoli: &lt;a href=&quot;https://www.npmjs.com/package/broccoli-eslint&quot;&gt;broccoli-eslint&lt;/a&gt;</source>
          <target state="translated">ブロッコリー：&lt;a href=&quot;https://www.npmjs.com/package/broccoli-eslint&quot;&gt;ブロッコリーエスリント&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="77fdd4bc652997ceee49d1ddc76041c440aafb4d" translate="yes" xml:space="preserve">
          <source>Browser-specific code is necessary but not obvious.</source>
          <target state="translated">ブラウザ固有のコードは必要ですが、自明ではありません。</target>
        </trans-unit>
        <trans-unit id="13842e2cda464c6e5b2211b8fc003ba47776341d" translate="yes" xml:space="preserve">
          <source>Browserify: &lt;a href=&quot;https://www.npmjs.com/package/eslintify&quot;&gt;eslintify&lt;/a&gt;</source>
          <target state="translated">Browserify：&lt;a href=&quot;https://www.npmjs.com/package/eslintify&quot;&gt;eslintify&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ba1c2edbe22a1404f5105d58fea00b02f1cef470" translate="yes" xml:space="preserve">
          <source>Brunch: &lt;a href=&quot;https://www.npmjs.com/package/eslint-brunch&quot;&gt;eslint-brunch&lt;/a&gt;</source>
          <target state="translated">ブランチ：&lt;a href=&quot;https://www.npmjs.com/package/eslint-brunch&quot;&gt;eslint-brunch&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ad4810417150ac15e14a03f28bd425d2a3d5e0b" translate="yes" xml:space="preserve">
          <source>Buffer API documentation</source>
          <target state="translated">バッファ API ドキュメント</target>
        </trans-unit>
        <trans-unit id="2c2ba055cfeabd97664f95c9afa9c9b3b42743eb" translate="yes" xml:space="preserve">
          <source>Buffer(number) is unsafe</source>
          <target state="translated">バッファ(番号)が安全でない</target>
        </trans-unit>
        <trans-unit id="cb16822f3ab4a4b7c7befbf6b7a12d0f7072950e" translate="yes" xml:space="preserve">
          <source>Bug Reporting</source>
          <target state="translated">バグ報告</target>
        </trans-unit>
        <trans-unit id="dec3feb7fd8b128570af46d194a8fd5cfea9b359" translate="yes" xml:space="preserve">
          <source>Build Next</source>
          <target state="translated">ビルドネクスト</target>
        </trans-unit>
        <trans-unit id="822264b557dcda455c20fd570787ede9d1be28be" translate="yes" xml:space="preserve">
          <source>Build Scripts</source>
          <target state="translated">ビルドスクリプト</target>
        </trans-unit>
        <trans-unit id="2764e7dc64a6afa8f6572a70be9cc2ef88d207b2" translate="yes" xml:space="preserve">
          <source>Build tools</source>
          <target state="translated">ビルドツール</target>
        </trans-unit>
        <trans-unit id="2d3d56e9ff9b13595d5908c502bfb869204bdf51" translate="yes" xml:space="preserve">
          <source>Built-In Global Variables</source>
          <target state="translated">組み込みのグローバル変数</target>
        </trans-unit>
        <trans-unit id="d23289056db225350425b91c74287655e2695db4" translate="yes" xml:space="preserve">
          <source>But the modification is a mistake in most cases.</source>
          <target state="translated">しかし、改造はほとんどの場合間違いです。</target>
        </trans-unit>
        <trans-unit id="c65cb686f365d97cef1431d92333403c589534f2" translate="yes" xml:space="preserve">
          <source>But this one, will only produce one:</source>
          <target state="translated">しかし、この1つは、1つしか生まれない。</target>
        </trans-unit>
        <trans-unit id="2faa4f26619721a43dbbcab57f8867c25e859b14" translate="yes" xml:space="preserve">
          <source>But until 1.x, the following variables and references had the wrong value (empty) in those properties:</source>
          <target state="translated">しかし、1.xまでは、以下の変数や参照は、それらのプロパティの中で間違った値(空)を持っていました。</target>
        </trans-unit>
        <trans-unit id="a0a6bac896190981738cec1ee713180ff3599d1f" translate="yes" xml:space="preserve">
          <source>By activating the option &lt;code&gt;getWithoutSet&lt;/code&gt; it enforces the presence of a setter for every property which has a getter defined.</source>
          <target state="translated">オプション &lt;code&gt;getWithoutSet&lt;/code&gt; をアクティブにすることで、ゲッターが定義されているすべてのプロパティにセッターの存在を強制します。</target>
        </trans-unit>
        <trans-unit id="53edaff02bbaaf04f6f1ca246edc0a309d984524" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;{ &quot;allowNamedFunctions&quot;: false }&lt;/code&gt;, this &lt;code&gt;boolean&lt;/code&gt; option prohibits using named functions as callbacks or function arguments.</source>
          <target state="translated">デフォルトでは &lt;code&gt;{ &quot;allowNamedFunctions&quot;: false }&lt;/code&gt; 、この &lt;code&gt;boolean&lt;/code&gt; オプションは、名前付き関数をコールバックまたは関数引数として使用することを禁止しています。</target>
        </trans-unit>
        <trans-unit id="142bee28961c86e6edb34112baf458575b649ec3" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;{ &quot;allowUnboundThis&quot;: true }&lt;/code&gt;, this &lt;code&gt;boolean&lt;/code&gt; option allows function expressions containing &lt;code&gt;this&lt;/code&gt; to be used as callbacks, as long as the function in question has not been explicitly bound.</source>
          <target state="translated">デフォルトでは &lt;code&gt;{ &quot;allowUnboundThis&quot;: true }&lt;/code&gt; 、この &lt;code&gt;boolean&lt;/code&gt; オプションでは、問題の関数が明示的にバインドされていない限り、 &lt;code&gt;this&lt;/code&gt; を含む関数式をコールバックとして使用できます。</target>
        </trans-unit>
        <trans-unit id="a9064adcb0fa99df7486883b2e36cc34c841823b" translate="yes" xml:space="preserve">
          <source>By default this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;, &lt;code&gt;falls through&lt;/code&gt;. An alternative regular expression can be provided.</source>
          <target state="translated">デフォルトでは、このルールは次の単語で始まるコメントを無視します： &lt;code&gt;eslint&lt;/code&gt; 、 &lt;code&gt;jshint&lt;/code&gt; 、 &lt;code&gt;jslint&lt;/code&gt; 、 &lt;code&gt;istanbul&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、 &lt;code&gt;exported&lt;/code&gt; 、 &lt;code&gt;jscs&lt;/code&gt; 、fall &lt;code&gt;falls through&lt;/code&gt; 。別の正規表現を指定できます。</target>
        </trans-unit>
        <trans-unit id="75f81ef36c9ff48cc1d11f83611fc3688316cd07" translate="yes" xml:space="preserve">
          <source>By default this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;. An alternative regular expression can be provided.</source>
          <target state="translated">デフォルトでは、このルールは次の単語で始まるコメントを無視します： &lt;code&gt;eslint&lt;/code&gt; 、 &lt;code&gt;jshint&lt;/code&gt; 、 &lt;code&gt;jslint&lt;/code&gt; 、 &lt;code&gt;istanbul&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、 &lt;code&gt;exported&lt;/code&gt; 、 &lt;code&gt;jscs&lt;/code&gt; 。別の正規表現を指定できます。</target>
        </trans-unit>
        <trans-unit id="85f3d7dcb470f23f669e925692e8b09340b505aa" translate="yes" xml:space="preserve">
          <source>By default this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;. To ignore more comments in addition to the defaults, set the &lt;code&gt;ignorePattern&lt;/code&gt; option to a string pattern that will be passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt; constructor&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、このルールは次の単語で始まるコメントを無視します： &lt;code&gt;eslint&lt;/code&gt; 、 &lt;code&gt;jshint&lt;/code&gt; 、 &lt;code&gt;jslint&lt;/code&gt; 、 &lt;code&gt;istanbul&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、 &lt;code&gt;exported&lt;/code&gt; 、 &lt;code&gt;jscs&lt;/code&gt; 。デフォルトに加えてさらにコメントを無視するには、 &lt;code&gt;ignorePattern&lt;/code&gt; オプションを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; コンストラクターに&lt;/a&gt;渡される文字列パターンに設定します。</target>
        </trans-unit>
        <trans-unit id="b090fa11c439d6a006cf50f9adb2d2cad2b33cde" translate="yes" xml:space="preserve">
          <source>By default this rule is enabled with &lt;code&gt;all&lt;/code&gt; option for variables and &lt;code&gt;after-used&lt;/code&gt; for arguments.</source>
          <target state="translated">デフォルトでは、このルールは変数の &lt;code&gt;all&lt;/code&gt; オプションで有効になっており、引数には &lt;code&gt;after-used&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="810c57ecacff43e1120c95269231677bb6903a5a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;&quot;always&quot;&lt;/code&gt; does not allow newlines. To permit newlines when in &lt;code&gt;&quot;always&quot;&lt;/code&gt; mode, set the &lt;code&gt;allowNewlines&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;. Newlines are never required.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; は改行を許可しません。 &lt;code&gt;&quot;always&quot;&lt;/code&gt; モードのときに改行を許可するには、 &lt;code&gt;allowNewlines&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定します。改行は必要ありません。</target>
        </trans-unit>
        <trans-unit id="8149432d30bea2fb7ccff7235a0e92b208229579" translate="yes" xml:space="preserve">
          <source>By default, ESLint uses &lt;a href=&quot;https://github.com/eslint/espree&quot;&gt;Espree&lt;/a&gt; as its parser. You can optionally specify that a different parser should be used in your configuration file so long as the parser meets the following requirements:</source>
          <target state="translated">デフォルトでは、ESLintは&lt;a href=&quot;https://github.com/eslint/espree&quot;&gt;Espree&lt;/a&gt;をパーサーとして使用します。オプションで、パーサーが次の要件を満たしている限り、構成ファイルで別のパーサーを使用するように指定できます。</target>
        </trans-unit>
        <trans-unit id="9577e9a635e28c68c848f26eabef31dbaa320c91" translate="yes" xml:space="preserve">
          <source>By default, ESLint will look for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, place &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; inside the &lt;code&gt;eslintConfig&lt;/code&gt; field of the &lt;code&gt;package.json&lt;/code&gt; file or in the &lt;code&gt;.eslintrc.*&lt;/code&gt; file at your project's root level. ESLint will stop looking in parent folders once it finds a configuration with &lt;code&gt;&quot;root&quot;: true&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、ESLintはルートディレクトリまでのすべての親フォルダーで構成ファイルを検索します。これは、すべてのプロジェクトを特定の規則に従う場合に役立ちますが、予期しない結果になる場合があります。 ESLintを特定のプロジェクトに制限するには、 &lt;code&gt;package.json&lt;/code&gt; ファイルの &lt;code&gt;eslintConfig&lt;/code&gt; フィールド内またはプロジェクトのルートレベルの &lt;code&gt;.eslintrc.*&lt;/code&gt; ファイルに &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; を配置します。 ESLintは、 &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; 設定が見つかると、親フォルダーの検索を停止します。</target>
        </trans-unit>
        <trans-unit id="d3d5e5b4f445e783b9f14a4ed45e390a3c7a870a" translate="yes" xml:space="preserve">
          <source>By default, ESLint will not perform autofixes when a processor is used, even when the &lt;code&gt;--fix&lt;/code&gt; flag is enabled on the command line. To allow ESLint to autofix code when using your processor, you should take the following additional steps:</source>
          <target state="translated">デフォルトでは、ESLintは、コマンドラインで &lt;code&gt;--fix&lt;/code&gt; フラグが有効になっている場合でも、プロセッサが使用されている場合は自動修正を実行しません。ESLintがプロセッサの使用時にコードを自動修正できるようにするには、次の追加手順を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="642f4676bf0bdf93c93b4f8b0ebfa00e1a8aab5a" translate="yes" xml:space="preserve">
          <source>By default, all options are set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、すべてのオプションが &lt;code&gt;false&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="328d8066eb8920bc57166e2447115dae7191b68f" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../rules/no-multi-spaces&quot;&gt;&lt;code&gt;no-multi-spaces&lt;/code&gt;&lt;/a&gt; rule will now disallow multiple spaces before comments at the end of a line. Previously, the rule did not check this case.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../rules/no-multi-spaces&quot;&gt; &lt;code&gt;no-multi-spaces&lt;/code&gt; &lt;/a&gt;ルールは、行末のコメントの前に複数のスペースを許可しません。以前は、ルールはこのケースをチェックしませんでした。</target>
        </trans-unit>
        <trans-unit id="3ead8bee8725b19464565c53ddd55a35932fff07" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../rules/padded-blocks&quot;&gt;&lt;code&gt;padded-blocks&lt;/code&gt;&lt;/a&gt; rule will now enforce padding in class bodies and switch statements. Previously, the rule would ignore these cases unless the user opted into enforcing them.</source>
          <target state="translated">デフォルトで、&lt;a href=&quot;../rules/padded-blocks&quot;&gt; &lt;code&gt;padded-blocks&lt;/code&gt; &lt;/a&gt;ルールはクラス本体とswitchステートメントにパディングを適用するようになりました。以前は、ユーザーが強制することを選択しない限り、ルールはこれらのケースを無視していました。</target>
        </trans-unit>
        <trans-unit id="cb25911cbcc93e8fb7965ef138c4639fb91fdaa5" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../rules/space-before-function-paren&quot;&gt;&lt;code&gt;space-before-function-paren&lt;/code&gt;&lt;/a&gt; rule will now enforce spacing for async arrow functions. Previously, the rule would ignore these cases unless the user opted into enforcing them.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../rules/space-before-function-paren&quot;&gt; &lt;code&gt;space-before-function-paren&lt;/code&gt; &lt;/a&gt;ルールは非同期矢印関数の間隔を強制するようになりました。以前は、ユーザーが強制することを選択しない限り、ルールはこれらのケースを無視していました。</target>
        </trans-unit>
        <trans-unit id="40a5c9e45294a4926d673ca17be828f827737310" translate="yes" xml:space="preserve">
          <source>By default, this method uses the configuration that applies to files in the current working directory (the &lt;code&gt;cwd&lt;/code&gt; constructor option). If you want to use a different configuration, pass &lt;code&gt;options.filePath&lt;/code&gt;, and ESLint will load the same configuration that &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; would use for a file at &lt;code&gt;options.filePath&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、このメソッドは現在の作業ディレクトリ内のファイルに適用される構成を使用します（ &lt;code&gt;cwd&lt;/code&gt; コンストラクターオプション）。別の構成を使用する場合は、 &lt;code&gt;options.filePath&lt;/code&gt; を渡すと、ESLintは&lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;options.filePath&lt;/code&gt; のファイルに使用するのと同じ構成をロードします。</target>
        </trans-unit>
        <trans-unit id="299d530060273666dadde871098da08bda8d3120" translate="yes" xml:space="preserve">
          <source>By default, this rule always allows the use of &lt;code&gt;this&lt;/code&gt; in functions which name starts with an uppercase and anonymous functions that are assigned to a variable which name starts with an uppercase, assuming that those functions are used as constructor functions.</source>
          <target state="translated">デフォルトでは、このルールは常に使用可能にする &lt;code&gt;this&lt;/code&gt; これらの関数は、コンストラクタ関数として使用されていると仮定し、大文字で始まる名前の変数に代入され、大文字と無名関数で始まる名前の関数に。</target>
        </trans-unit>
        <trans-unit id="dcebc7dd5e599c1fa7a260257a99e17c1b7b4f41" translate="yes" xml:space="preserve">
          <source>By default, this rule checks only object literals and property descriptors. If you want this rule to also check class declarations and class expressions, activate the option &lt;code&gt;enforceForClassMembers&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、このルールはオブジェクトリテラルとプロパティ記述子のみをチェックします。このルールでクラス宣言とクラス式もチェックする場合は、オプション &lt;code&gt;enforceForClassMembers&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="ac583d46910ce2df6b784c5422f86d84784d80b9" translate="yes" xml:space="preserve">
          <source>By default, this rule does not check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations.</source>
          <target state="translated">デフォルトでは、このルールは &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、および &lt;code&gt;class&lt;/code&gt; 宣言をチェックしません。</target>
        </trans-unit>
        <trans-unit id="d26744eeae2a34bc64432a235df5802392705e54" translate="yes" xml:space="preserve">
          <source>By default, this rule does not check class declarations and class expressions, as the default value for &lt;code&gt;enforceForClassMembers&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;enforceForClassMembers&lt;/code&gt; のデフォルト値が &lt;code&gt;false&lt;/code&gt; であるため、このルールはクラス宣言とクラス式をチェックしません。</target>
        </trans-unit>
        <trans-unit id="13b530f087cdcc901afdd2f0a3e8affc01b112e8" translate="yes" xml:space="preserve">
          <source>By default, this rule does not enforce getter/setter pairs in class declarations and class expressions, as the default value for &lt;code&gt;enforceForClassMembers&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;enforceForClassMembers&lt;/code&gt; のデフォルト値が &lt;code&gt;false&lt;/code&gt; であるため、このルールはクラス宣言とクラス式でゲッター/セッターのペアを強制しません。</target>
        </trans-unit>
        <trans-unit id="cf0a6e019c5801a980d6436f9683c62ae6bbbd9c" translate="yes" xml:space="preserve">
          <source>By default, this rule doesn&amp;rsquo;t check when a regex literal is unnecessarily wrapped in a &lt;code&gt;RegExp&lt;/code&gt; constructor call. When the option &lt;code&gt;disallowRedundantWrapping&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the rule will also disallow such unnecessary patterns.</source>
          <target state="translated">デフォルトでは、このルールは、正規表現リテラルが &lt;code&gt;RegExp&lt;/code&gt; コンストラクター呼び出しで不必要にラップされている場合はチェックしません。オプション &lt;code&gt;disallowRedundantWrapping&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合、ルールはそのような不要なパターンも許可しません。</target>
        </trans-unit>
        <trans-unit id="e27fcc3f97514713049fe16f11ccfb4bb182ebfc" translate="yes" xml:space="preserve">
          <source>By default, this rule doesn't disallow any names. Only the names you specify in the configuration will be disallowed.</source>
          <target state="translated">既定では、このルールはいかなる名前も許可しません。設定で指定した名前のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="046441d01afdaf53feee5d9148871aec290a8572" translate="yes" xml:space="preserve">
          <source>By default, this rule warns whenever &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; are used without block statements as their body. However, you can specify that block statements should be used only when there are multiple statements in the block and warn when there is only one statement in the block.</source>
          <target state="translated">デフォルトでは、このルールは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、または &lt;code&gt;do&lt;/code&gt; が本体としてブロックステートメントなしで使用されたときに警告します。ただし、ブロックステートメントがブロック内に複数のステートメントがある場合にのみ使用し、ブロック内にステートメントが1つしかない場合に警告するように指定できます。</target>
        </trans-unit>
        <trans-unit id="f9fcf545318b2ef2da7a24419f1e2ac87e444cd1" translate="yes" xml:space="preserve">
          <source>By default, this rule will require a non-lowercase letter at the beginning of comments.</source>
          <target state="translated">デフォルトでは、この規則ではコメントの最初に小文字以外の文字が必要になります。</target>
        </trans-unit>
        <trans-unit id="4fd88b17a75d3b42b61d5a58892ebee38099ead2" translate="yes" xml:space="preserve">
          <source>By design, this rule doesn't disallow &lt;code&gt;export default&lt;/code&gt; declarations. If you configure &lt;code&gt;&quot;default&quot;&lt;/code&gt; as a restricted name, that restriction will apply only to named export declarations.</source>
          <target state="translated">設計上、このルールは &lt;code&gt;export default&lt;/code&gt; 宣言を禁止していません。 &lt;code&gt;&quot;default&quot;&lt;/code&gt; を制限付きの名前として構成した場合、その制限は名前付きエクスポート宣言にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="e639e134609ba9a5912a4df329720272faeac3e0" translate="yes" xml:space="preserve">
          <source>By the ECMAScript specification, all backreferences listed above are valid, always succeed to match zero-length, and cannot match anything else. Consequently, they don't produce parsing or runtime errors, but also don't affect the behavior of their regular expressions. They are syntactically valid but useless.</source>
          <target state="translated">ECMAScript の仕様では、上記のすべての後方参照は有効であり、常にゼロ長との一致に成功し、それ以外のものとは一致しません。その結果、これらのバックリファレンスは解析や実行時のエラーを発生させず、正規表現の動作にも影響を与えません。これらは構文的には有効ですが、役に立たないものです。</target>
        </trans-unit>
        <trans-unit id="b4eeaf5a9cfbd492c09302efd0a7e6ded91be252" translate="yes" xml:space="preserve">
          <source>By throwing an error in this way, other parts of the application have an opportunity to handle the error rather than stopping the application altogether. If the error bubbles all the way up to the process without being handled, then the process will exit and a non-zero exit code will returned, so the end result is the same.</source>
          <target state="translated">このようにしてエラーを投げることで、アプリケーションの他の部分はアプリケーションを完全に停止させるのではなく、エラーを処理する機会を得ます。エラーが処理されずにプロセスに至るまで発生した場合、プロセスは終了し、ゼロではない終了コードが返されるので、最終的な結果は同じです。</target>
        </trans-unit>
        <trans-unit id="39a10e6844263ca8909b3bbe0de5a3537cac5758" translate="yes" xml:space="preserve">
          <source>By using the module name:</source>
          <target state="translated">モジュール名を使うことで</target>
        </trans-unit>
        <trans-unit id="ee2345f2e860e68629829d65710dd0df3385db35" translate="yes" xml:space="preserve">
          <source>CLIEngine</source>
          <target state="translated">CLIEngine</target>
        </trans-unit>
        <trans-unit id="fa84c30b67500e79c26e8f7e089f568a07247b99" translate="yes" xml:space="preserve">
          <source>CLIEngine (deprecated)</source>
          <target state="translated">クリエンジン</target>
        </trans-unit>
        <trans-unit id="39f0383de17763d08ff9f37db2edc301741ecfbc" translate="yes" xml:space="preserve">
          <source>CLIEngine#addPlugin()</source>
          <target state="translated">CLIEngine#addPlugin()</target>
        </trans-unit>
        <trans-unit id="a22267246c77d6f4c878ebd617018969e47dd10a" translate="yes" xml:space="preserve">
          <source>CLIEngine#executeOnFiles()</source>
          <target state="translated">CLIEngine#executeOnFiles()</target>
        </trans-unit>
        <trans-unit id="8aaf006cc9141b559c5c527aa262abaa02da9a68" translate="yes" xml:space="preserve">
          <source>CLIEngine#executeOnText()</source>
          <target state="translated">CLIEngine#executeOnText()</target>
        </trans-unit>
        <trans-unit id="5119e7a9a0f06a066d338a2a5227f1de3f2a3ba8" translate="yes" xml:space="preserve">
          <source>CLIEngine#getConfigForFile()</source>
          <target state="translated">CLIEngine#getConfigForFile()</target>
        </trans-unit>
        <trans-unit id="f248c6ca75d279906a5e83e020e644d56c01bcb3" translate="yes" xml:space="preserve">
          <source>CLIEngine#getErrorResults()</source>
          <target state="translated">CLIEngine#getErrorResults()</target>
        </trans-unit>
        <trans-unit id="33e37a3ba68b62fd095c124f08a8da94d579dc5e" translate="yes" xml:space="preserve">
          <source>CLIEngine#getFormatter()</source>
          <target state="translated">CLIEngine#getFormatter()</target>
        </trans-unit>
        <trans-unit id="f3f32f607dc57705731e718beaa6e7541390ea19" translate="yes" xml:space="preserve">
          <source>CLIEngine#getRules()</source>
          <target state="translated">CLIEngine#getRules()</target>
        </trans-unit>
        <trans-unit id="f5d91f42db796ef9fccb3113c5f1b379eee1985b" translate="yes" xml:space="preserve">
          <source>CLIEngine#isPathIgnored()</source>
          <target state="translated">CLIEngine#isPathIgnored()</target>
        </trans-unit>
        <trans-unit id="2c38fe2163d1a1410cce4874628be155c5420a54" translate="yes" xml:space="preserve">
          <source>CLIEngine#outputFixes()</source>
          <target state="translated">CLIEngine#outputFixes()</target>
        </trans-unit>
        <trans-unit id="64fe410eb3907152812ba29b988371e8c10c7930" translate="yes" xml:space="preserve">
          <source>CLIEngine#resolveFileGlobPatterns()</source>
          <target state="translated">CLIEngine#resolveFileGlobPatterns()</target>
        </trans-unit>
        <trans-unit id="4bec04eda41c2467258cf63a83bbcc00c182f096" translate="yes" xml:space="preserve">
          <source>CLIEngine.version</source>
          <target state="translated">CLIEngine.version</target>
        </trans-unit>
        <trans-unit id="f8afe6bb118117d4b5d879f4d42f4e3d845f343e" translate="yes" xml:space="preserve">
          <source>Cache-related</source>
          <target state="translated">Cache-related</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="cef5cdfb0c3e16bdf7d599da18abc72413e061a5" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;console.log()&lt;/code&gt; or any other similar method</source>
          <target state="translated">&lt;code&gt;console.log()&lt;/code&gt; または他の同様のメソッドを呼び出します</target>
        </trans-unit>
        <trans-unit id="84a75cd5066765fb2d890a1abed4765af529054c" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;process.exit()&lt;/code&gt; directly</source>
          <target state="translated">&lt;code&gt;process.exit()&lt;/code&gt; を直接呼び出す</target>
        </trans-unit>
        <trans-unit id="8bc7444f8724edf2b88bce5ed493cab18f0f53e6" translate="yes" xml:space="preserve">
          <source>CallExpression</source>
          <target state="translated">CallExpression</target>
        </trans-unit>
        <trans-unit id="c9e282305742d4307b1579b438b6b7173c0418e7" translate="yes" xml:space="preserve">
          <source>Can be rewritten as:</source>
          <target state="translated">と書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="b517ab5d1cd37a417d38a4cf65c412ff68fbe5e1" translate="yes" xml:space="preserve">
          <source>Can't find just the right rule? Make your own &lt;a href=&quot;developer-guide/working-with-rules&quot;&gt;custom rule&lt;/a&gt;.</source>
          <target state="translated">適切なルールを見つけることができませんか？独自の&lt;a href=&quot;developer-guide/working-with-rules&quot;&gt;カスタムルール&lt;/a&gt;を作成します。</target>
        </trans-unit>
        <trans-unit id="e0f4ec3146a0731b4e0f2d9473519c2a5b1a229e" translate="yes" xml:space="preserve">
          <source>Care should be taken to name variables and functions properly. Names should be limited to alphanumeric characters and, in some cases, the underscore character. Do not use the dollar sign (&lt;code&gt;$&lt;/code&gt;) or back slash (&lt;code&gt;\&lt;/code&gt;) characters in any names.</source>
          <target state="translated">変数と関数に適切に名前を付けるように注意する必要があります。名前は英数字と、場合によってはアンダースコア文字に制限する必要があります。名前にドル記号（ &lt;code&gt;$&lt;/code&gt; ）またはバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）文字を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="9a7ca4c1fab7a8bdcf5fbc36f2e29b71084829bd" translate="yes" xml:space="preserve">
          <source>Certain properties on objects may be disallowed in a codebase. This is useful for deprecating an API or restricting usage of a module's methods. For example, you may want to disallow using &lt;code&gt;describe.only&lt;/code&gt; when using Mocha or telling people to use &lt;code&gt;Object.assign&lt;/code&gt; instead of &lt;code&gt;_.extend&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの特定のプロパティは、コードベースでは許可されない場合があります。これは、APIを非推奨にしたり、モジュールのメソッドの使用を制限したりするのに役立ちます。たとえば、Mocha を使用して &lt;code&gt;describe.only&lt;/code&gt; 場合、または &lt;code&gt;Object.assign&lt;/code&gt; 代わりに &lt;code&gt;_.extend&lt;/code&gt; を使用するように指示している場合は、describe.onlyの使用を禁止することができます。</target>
        </trans-unit>
        <trans-unit id="d641a78fe9f4d6c7cfe86253552245024f63f5eb" translate="yes" xml:space="preserve">
          <source>Chained method calls on a single line without line breaks are harder to read, so some developers place a newline character after each method call in the chain to make it more readable and easy to maintain.</source>
          <target state="translated">改行のない一行でのメソッド呼び出しは読みづらいので、チェーンの各メソッド呼び出しの後に改行文字を入れることで、より読みやすく、メンテナンスしやすいようにしている開発者もいます。</target>
        </trans-unit>
        <trans-unit id="d9c4b291d717c5eaf1d0d316458e1b370d150f8f" translate="yes" xml:space="preserve">
          <source>Chaining the assignment of variables can lead to unexpected results and be difficult to read.</source>
          <target state="translated">変数の代入を連鎖させると、予想外の結果になったり、読みにくくなったりすることがあります。</target>
        </trans-unit>
        <trans-unit id="af9a9fa473109c352185514e7756f6ec081ef71e" translate="yes" xml:space="preserve">
          <source>Change Requests</source>
          <target state="translated">変更要求</target>
        </trans-unit>
        <trans-unit id="b6cf5afac16871b650ff6a87357172efdfa460a8" translate="yes" xml:space="preserve">
          <source>Changes the folder where plugins are resolved from. By default, plugins are resolved from the current working directory. This option should be used when plugins were installed by someone other than the end user. It should be set to the project directory of the project that has a dependency on the necessary plugins. For example:</source>
          <target state="translated">プラグインが解決されるフォルダを変更します。デフォルトでは、プラグインは現在の作業ディレクトリから解決されます。このオプションは、プラグインがエンドユーザー以外の人によってインストールされた場合に使用する必要があります。必要なプラグインに依存するプロジェクトのプロジェクトディレクトリに設定する必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1ab7e9a4540dddf2bc3e6493f496e69ddbf71e09" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 変更</target>
        </trans-unit>
        <trans-unit id="afb36713f70f34ba6d1fb8bd99cb3672abc0961e" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; の変更</target>
        </trans-unit>
        <trans-unit id="095447aabddeac0d8a7df16e693b732d5fea7565" translate="yes" xml:space="preserve">
          <source>Changing this value to &lt;code&gt;true&lt;/code&gt; will reverse this option's behavior by allowing use of named functions without restriction.</source>
          <target state="translated">この値を &lt;code&gt;true&lt;/code&gt; に変更すると、名前付き関数を制限なしで使用できるようになるため、このオプションの動作が逆になります。</target>
        </trans-unit>
        <trans-unit id="040ad6ac92ed227db6349ec645d53783b624cd42" translate="yes" xml:space="preserve">
          <source>Checking if a value is &lt;code&gt;undefined&lt;/code&gt; should be done with &lt;code&gt;typeof&lt;/code&gt;.</source>
          <target state="translated">値が &lt;code&gt;undefined&lt;/code&gt; かどうかの確認は、 &lt;code&gt;typeof&lt;/code&gt; を使用して行う必要があります。</target>
        </trans-unit>
        <trans-unit id="f92028ad17322f48fc90b63d905521dc748be675" translate="yes" xml:space="preserve">
          <source>Checks code coverage targets</source>
          <target state="translated">コードカバレッジターゲットのチェック</target>
        </trans-unit>
        <trans-unit id="94ecadd605f6e4c20f69369c8c791bbdde62d160" translate="yes" xml:space="preserve">
          <source>Checks if a given path is ignored by ESLint.</source>
          <target state="translated">与えられたパスがESLintによって無視されるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="66c89bace5c803e88659649c37de3028b2ac5e3c" translate="yes" xml:space="preserve">
          <source>Class declarations and class expressions.</source>
          <target state="translated">クラス宣言とクラス式。</target>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="translated">Classes</target>
        </trans-unit>
        <trans-unit id="f380e5d07ded1620db47a5ed2708b79c5a047d0a" translate="yes" xml:space="preserve">
          <source>Click on Profiles</source>
          <target state="translated">プロファイルをクリック</target>
        </trans-unit>
        <trans-unit id="0bfa56b6c32ec5c8d0cf77f1a810aef94408d0da" translate="yes" xml:space="preserve">
          <source>Coalesce Operator: &lt;code&gt;&quot;??&quot;&lt;/code&gt;</source>
          <target state="translated">合体演算子： &lt;code&gt;&quot;??&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c1683105284987a3ae83b25ff1f118eb7bdf7595" translate="yes" xml:space="preserve">
          <source>Code Climate CLI</source>
          <target state="translated">コード 気候CLI</target>
        </trans-unit>
        <trans-unit id="e7dc1f58b1ebed71fbca665be08411c0b9cacaab" translate="yes" xml:space="preserve">
          <source>Code Conventions</source>
          <target state="translated">コード規約</target>
        </trans-unit>
        <trans-unit id="e574f8f018ffa16527ccc1b75d7fb58fb118883c" translate="yes" xml:space="preserve">
          <source>Code Path Analysis Details</source>
          <target state="translated">コードパス解析の詳細</target>
        </trans-unit>
        <trans-unit id="580546c9363cde6a5b33a366bcefc914f6ff2498" translate="yes" xml:space="preserve">
          <source>Code Path Examples</source>
          <target state="translated">コードパスの例</target>
        </trans-unit>
        <trans-unit id="647c6137a359d2959ee6cdb4a5286bf7116ae92a" translate="yes" xml:space="preserve">
          <source>Code is difficult to understand.</source>
          <target state="translated">コードがわかりにくい。</target>
        </trans-unit>
        <trans-unit id="e909b7052999369ed0534cff25d0dc0b37c6d995" translate="yes" xml:space="preserve">
          <source>Column Numbers are 1-based</source>
          <target state="translated">列番号は1ベース</target>
        </trans-unit>
        <trans-unit id="dad481f8d97686324bbafc62077e08ab2a687407" translate="yes" xml:space="preserve">
          <source>Comma First style, in which commas are placed at the start of the next line</source>
          <target state="translated">カンマファーストスタイル</target>
        </trans-unit>
        <trans-unit id="39dd3cc04c40c9a332158c95e35269c0929ad6af" translate="yes" xml:space="preserve">
          <source>Comma style (comma-style)</source>
          <target state="translated">コンマスタイル</target>
        </trans-unit>
        <trans-unit id="14c818412d017dcc7f2635ecf050b64a83410b23" translate="yes" xml:space="preserve">
          <source>Command Line Interface</source>
          <target state="translated">コマンドラインインタフェース</target>
        </trans-unit>
        <trans-unit id="4b91918e82d5cef17a745f0886369f20996ba6c7" translate="yes" xml:space="preserve">
          <source>Command Line Options</source>
          <target state="translated">コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="1876987fa1a8f54ef9b28b3c2b0111b8b2e44d4a" translate="yes" xml:space="preserve">
          <source>Command Line Tools</source>
          <target state="translated">コマンドラインツール</target>
        </trans-unit>
        <trans-unit id="0592b972c380e7e606d0a53966b0ff68a0453c1c" translate="yes" xml:space="preserve">
          <source>Command line options (or CLIEngine equivalents):</source>
          <target state="translated">コマンドラインオプション(またはCLIEngineと同等のもの)。</target>
        </trans-unit>
        <trans-unit id="e9303a3a7c7daf4c09eae8de6d13d8d831541fc8" translate="yes" xml:space="preserve">
          <source>Comment Annotations</source>
          <target state="translated">アノテーションの方法</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="5fe0316b6ae9d702e7dbf115bb378278ffbaddd1" translate="yes" xml:space="preserve">
          <source>Comments are useful for leaving information for future developers. In order for that information to be useful and not distracting, it is sometimes desirable for comments to follow a particular style. One element of comment formatting styles is whether the first word of a comment should be capitalized or lowercase.</source>
          <target state="translated">コメントは、将来の開発者のために情報を残すのに便利です。その情報が有用で気を散らさないようにするために、コメントは特定のスタイルに従うことが望ましい場合があります。コメントのフォーマットスタイルの一つの要素は、コメントの最初の単語を大文字にするか小文字にするかということです。</target>
        </trans-unit>
        <trans-unit id="7f06b20dcab0aff5704c842c598f9dfcd0455108" translate="yes" xml:space="preserve">
          <source>Comments in Configuration Files</source>
          <target state="translated">設定ファイルのコメント</target>
        </trans-unit>
        <trans-unit id="f0357ca1de3a2c1e41b225072c3ae58e313abf79" translate="yes" xml:space="preserve">
          <source>Comments inside the curly braces in JSX are allowed to be on the same line as the braces, but only if they are not on the same line with other code, and the braces do not enclose an actual expression.</source>
          <target state="translated">JSX の中括弧内のコメントは中括弧と同じ行に入れることができますが、他のコードと同じ行に入っておらず、中括弧が実際の式を囲んでいない場合に限ります。</target>
        </trans-unit>
        <trans-unit id="43c575a09fdacd956bc014b783c194f0a5c82e44" translate="yes" xml:space="preserve">
          <source>Comments may be used to annotate pieces of code with additional information. These annotations take the form of a single word followed by a colon. The acceptable annotations are:</source>
          <target state="translated">コメントは、コードの一部に追加情報を付与するために使用することができます。これらの注釈は、単一の単語の後にコロンが続く形になります。使用できる注釈は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="703eaaa66145aebfc6fb9e2dcf0469112d69267d" translate="yes" xml:space="preserve">
          <source>Comments on a line directly after var statements are treated like additional var statements.</source>
          <target state="translated">var文の直後の行のコメントは、追加のvar文のように扱われます。</target>
        </trans-unit>
        <trans-unit id="c25c0b311a5988d7e130f54f188163a4ce9f26bd" translate="yes" xml:space="preserve">
          <source>Comparing a variable against itself is usually an error, either a typo or refactoring error. It is confusing to the reader and may potentially introduce a runtime error.</source>
          <target state="translated">変数とそれ自身を比較することは、通常、タイプミスかリファクタリングエラーのどちらかのエラーです。これは読者を混乱させ、潜在的にランタイムエラーを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="27bbabf9863dade6459d7cd65d288d55ad523bf4" translate="yes" xml:space="preserve">
          <source>Comparing against &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; との比較</target>
        </trans-unit>
        <trans-unit id="3cbfe191b44761abe72c903dc68c5c8bcdebdb77" translate="yes" xml:space="preserve">
          <source>Comparing to &lt;code&gt;null&lt;/code&gt; without a type-checking operator (&lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;), can have unintended results as the comparison will evaluate to true when comparing to not just a &lt;code&gt;null&lt;/code&gt;, but also an &lt;code&gt;undefined&lt;/code&gt; value.</source>
          <target state="translated">型チェック演算子（ &lt;code&gt;==&lt;/code&gt; または &lt;code&gt;!=&lt;/code&gt; ）を使用せずに &lt;code&gt;null&lt;/code&gt; と比較すると、比較は &lt;code&gt;null&lt;/code&gt; だけでなく &lt;code&gt;undefined&lt;/code&gt; 値も比較するとtrueと評価されるため、意図しない結果になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2d2f123387a2c9f00c23c76c07b00b0297d1dd1f" translate="yes" xml:space="preserve">
          <source>Comparing two literal values</source>
          <target state="translated">2つのリテラル値を比較する</target>
        </trans-unit>
        <trans-unit id="6a123b6cd74bccf28ec149c293edc9ff8bb839df" translate="yes" xml:space="preserve">
          <source>Comparison Operators: &lt;code&gt;&quot;==&quot;&lt;/code&gt;, &lt;code&gt;&quot;!=&quot;&lt;/code&gt;, &lt;code&gt;&quot;===&quot;&lt;/code&gt;, &lt;code&gt;&quot;!==&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt;</source>
          <target state="translated">比較演算子： &lt;code&gt;&quot;==&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;!=&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;===&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;!==&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="5e22de54c6c14d3c1fd6b16beef446d0ab100418" translate="yes" xml:space="preserve">
          <source>Complex Argument Passing</source>
          <target state="translated">複雑な引数の通過</target>
        </trans-unit>
        <trans-unit id="59d9cf15f81bf409cdf559aa0a58b6382ca48d87" translate="yes" xml:space="preserve">
          <source>Complexity Analysis of JavaScript Code</source>
          <target state="translated">JavaScriptコードの複雑性分析</target>
        </trans-unit>
        <trans-unit id="fb6884eb8992b62c7c1af30d600b40339c50155a" translate="yes" xml:space="preserve">
          <source>Compound Statements</source>
          <target state="translated">複合文</target>
        </trans-unit>
        <trans-unit id="c70714def24eed02c974f5065578085314290afa" translate="yes" xml:space="preserve">
          <source>Compound statements are lists of statements enclosed inside of braces.</source>
          <target state="translated">複合文とは、中括弧で囲まれた文のリストです。</target>
        </trans-unit>
        <trans-unit id="2a731acf571864648fe825ad7f41f467ee967a7f" translate="yes" xml:space="preserve">
          <source>Concretely, the following function should be refactored as shown:</source>
          <target state="translated">具体的には、以下の関数を以下のようにリファクタリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="9ce36b3146d830ed2f9929916e1077a0694b8641" translate="yes" xml:space="preserve">
          <source>Configs in Plugins</source>
          <target state="translated">プラグインの設定</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="d08f9a283e38a276a0427e713b7b70848f862614" translate="yes" xml:space="preserve">
          <source>Configuration Based on Glob Patterns</source>
          <target state="translated">Globパターンに基づく構成</target>
        </trans-unit>
        <trans-unit id="054d13d110e94c15fda09fa3b87ba15c0ffb578c" translate="yes" xml:space="preserve">
          <source>Configuration Cascading Changes</source>
          <target state="translated">構成のカスケード変更</target>
        </trans-unit>
        <trans-unit id="637a597497ad1278a75e9c3cc4a37f73445fc358" translate="yes" xml:space="preserve">
          <source>Configuration Cascading and Hierarchy</source>
          <target state="translated">構成のカスケードと階層</target>
        </trans-unit>
        <trans-unit id="3367a800fa7c45bf91e141f3b7a7690040cb711f" translate="yes" xml:space="preserve">
          <source>Configuration File Formats</source>
          <target state="translated">設定ファイルのフォーマット</target>
        </trans-unit>
        <trans-unit id="8d7918432f45ce1b5b9c42fe241fd155b57d3095" translate="yes" xml:space="preserve">
          <source>Configuration comments can include descriptions to explain why the comment is necessary. The description must occur after the configuration and is separated from the configuration by two or more consecutive &lt;code&gt;-&lt;/code&gt; characters. For example:</source>
          <target state="translated">構成コメントには、コメントが必要な理由を説明する説明を含めることができます。説明は構成後に行う必要があり、2つ以上の連続する &lt;code&gt;-&lt;/code&gt; 文字で構成から分離されます。例えば：</target>
        </trans-unit>
        <trans-unit id="2f4c393af0aa056c49bfb2d354d625be1439feed" translate="yes" xml:space="preserve">
          <source>Configuration files (&lt;code&gt;.eslintrc.*&lt;/code&gt;)</source>
          <target state="translated">構成ファイル（ &lt;code&gt;.eslintrc.*&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="f888285484327e1b26802fdfc517a3cdc283a16a" translate="yes" xml:space="preserve">
          <source>Configuration options passed on the command line using &lt;code&gt;--rule&lt;/code&gt; (or to CLIEngine using &lt;code&gt;rules&lt;/code&gt;).</source>
          <target state="translated">設定オプションは、使用してコマンドラインに渡さ &lt;code&gt;--rule&lt;/code&gt; （またはCLIEngineに使用して &lt;code&gt;rules&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4040faa0c40248a65b81d9d52f5e239c41634760" translate="yes" xml:space="preserve">
          <source>Configuration values for globals are now validated</source>
          <target state="translated">グローバルの構成値が検証されるようになりました。</target>
        </trans-unit>
        <trans-unit id="32bc3c22148beccab28adad18f452f24bed405a4" translate="yes" xml:space="preserve">
          <source>Configuring</source>
          <target state="translated">Configuring</target>
        </trans-unit>
        <trans-unit id="b14e099732b8bf6338cd1082d4971a5345420749" translate="yes" xml:space="preserve">
          <source>Configuring ESLint</source>
          <target state="translated">ESLintの設定</target>
        </trans-unit>
        <trans-unit id="90aee3621dbd643b7a1e7615a22bd29a1bf4fa46" translate="yes" xml:space="preserve">
          <source>Configuring Inline Comment Behaviors</source>
          <target state="translated">インラインコメントの動作を設定する</target>
        </trans-unit>
        <trans-unit id="ac9cfd78cf61a7fad9eac13d10a069961ae79993" translate="yes" xml:space="preserve">
          <source>Configuring Plugins</source>
          <target state="translated">プラグインの設定</target>
        </trans-unit>
        <trans-unit id="4bf4a45b927dfcce828ce6776ec3d92df65de710" translate="yes" xml:space="preserve">
          <source>Configuring Rules</source>
          <target state="translated">ルールの設定</target>
        </trans-unit>
        <trans-unit id="f110a7ccdd4b47d412214514a5686b597e3f8569" translate="yes" xml:space="preserve">
          <source>Configuring this rule with one boolean option &lt;code&gt;true&lt;/code&gt; is deprecated.</source>
          <target state="translated">このルールを1つのブールオプション &lt;code&gt;true&lt;/code&gt; で構成することは非推奨です。</target>
        </trans-unit>
        <trans-unit id="ff58770cc1aa1258af1958af9c810dd60ffec1b2" translate="yes" xml:space="preserve">
          <source>Consider another scenario where you may want to run ESLint on a specific Dotfile or Dotfolder, but have forgotten to specifically allow those files in your &lt;code&gt;.eslintignore&lt;/code&gt; file. You would run something like this:</source>
          <target state="translated">特定のDotfileまたはDotfolderでESLintを実行したいが、 &lt;code&gt;.eslintignore&lt;/code&gt; ファイルでそれらのファイルを明確に許可するのを忘れた別のシナリオを考えてみます。次のようなものを実行します。</target>
        </trans-unit>
        <trans-unit id="b4647e6ee60c305c9dabe8168f89b6e60301a075" translate="yes" xml:space="preserve">
          <source>Consistency in placing a newline before or after the dot can greatly increase readability.</source>
          <target state="translated">ドットの前後に改行を入れることで、可読性を大幅に向上させることができます。</target>
        </trans-unit>
        <trans-unit id="503aca9c53d9e27038ee3763f8c6a91d3531b09a" translate="yes" xml:space="preserve">
          <source>Consistency is an important part of any style guide. While it is a personal preference where to put the opening brace of blocks, it should be consistent across a whole project. Having an inconsistent style distracts the reader from seeing the important parts of the code.</source>
          <target state="translated">一貫性は、任意のスタイルガイドの重要な部分です。ブロックの最初のブレースをどこに置くかは個人的な好みですが、プロジェクト全体で一貫性があるべきです。一貫性のないスタイルを持つことは、コードの重要な部分を見ることから読者の注意をそらすことになります。</target>
        </trans-unit>
        <trans-unit id="8c039d9f3cbca82ba5423ca0597e4fd0200e8a7a" translate="yes" xml:space="preserve">
          <source>Constructor functions, those functions used with the &lt;code&gt;new&lt;/code&gt; operator to create new objects, should be formatted in camel case but must begin with an uppercase letter. Constructor function names should begin with a non-verb because &lt;code&gt;new&lt;/code&gt; is the action of creating an object instance.</source>
          <target state="translated">新しいオブジェクトを作成するために &lt;code&gt;new&lt;/code&gt; 演算子で使用されるコンストラクター関数は、キャメルケースでフォーマットする必要がありますが、大文字で始める必要があります。 &lt;code&gt;new&lt;/code&gt; はオブジェクトインスタンスを作成するアクションであるため、コンストラクター関数名は動詞以外で始まる必要があります。</target>
        </trans-unit>
        <trans-unit id="f1d09586ea37267aa69ef76a9f7c8bc0e29a0c72" translate="yes" xml:space="preserve">
          <source>Constructors of derived classes must call &lt;code&gt;super()&lt;/code&gt;. Constructors of non derived classes must not call &lt;code&gt;super()&lt;/code&gt;. If this is not observed, the JavaScript engine will raise a runtime error.</source>
          <target state="translated">派生クラスのコンストラクターは、 &lt;code&gt;super()&lt;/code&gt; を呼び出す必要があります。非派生クラスのコンストラクターは、 &lt;code&gt;super()&lt;/code&gt; を呼び出さないでください。これが守られない場合、JavaScriptエンジンは実行時エラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="1a1d18554936cd6e2390743e62910a063c5aa483" translate="yes" xml:space="preserve">
          <source>Continue searching for &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files in ancestor directories (parent has highest precedence, then grandparent, etc.), up to and including the root directory or until a config with &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; is found.</source>
          <target state="translated">祖先ディレクトリ（親が最も優先度が高く、次に祖父母など）で &lt;code&gt;.eslintrc&lt;/code&gt; ファイルと &lt;code&gt;package.json&lt;/code&gt; ファイルの検索を続けます。ルートディレクトリまで、または &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; が見つかるまで続けます。</target>
        </trans-unit>
        <trans-unit id="527a09bcae64352259e895e37521e34bfd9a2d4c" translate="yes" xml:space="preserve">
          <source>Contribute code to ESLint</source>
          <target state="translated">ESLintにコードを提供する</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="d2b869a4fc5ecdb32995495586ade690a4e7f25f" translate="yes" xml:space="preserve">
          <source>Control Flow in Node</source>
          <target state="translated">ノードの制御フロー</target>
        </trans-unit>
        <trans-unit id="7d140e2dddfcbb8e672ff8053b01675a57d0ec7c" translate="yes" xml:space="preserve">
          <source>Control Flow in Node Part II</source>
          <target state="translated">ノード内の制御フロー その2</target>
        </trans-unit>
        <trans-unit id="35139eebf1ac066c1555c9bf6199c9f7eac4d85d" translate="yes" xml:space="preserve">
          <source>Control characters are special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings so a regular expression containing these characters is most likely a mistake.</source>
          <target state="translated">制御文字は、ASCIIの範囲0~31の特殊で目に見えない文字です。これらの文字は JavaScript の文字列ではほとんど使われないので、これらの文字を含む正規表現は間違いである可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="d0d571b1e9881fd0cf888f79914fb5ebfcbf482a" translate="yes" xml:space="preserve">
          <source>Control flow in Node.js</source>
          <target state="translated">Node.jsでの制御フロー</target>
        </trans-unit>
        <trans-unit id="afccb006c330732e4cff61f99359749160440bba" translate="yes" xml:space="preserve">
          <source>Convert Configuration Files Using Polyjuice</source>
          <target state="translated">Polyjuice を使用して設定ファイルを変換する</target>
        </trans-unit>
        <trans-unit id="ab58181014d84731967f50b05ed7c496f31e1d2a" translate="yes" xml:space="preserve">
          <source>Converting Presets</source>
          <target state="translated">プリセットの変換</target>
        </trans-unit>
        <trans-unit id="6a3a7d8e52a6d2e6a4f18d3e7ab1334f3cd4d5b6" translate="yes" xml:space="preserve">
          <source>Core Rule Guidelines</source>
          <target state="translated">コアルールガイドライン</target>
        </trans-unit>
        <trans-unit id="b3de192a6a07e167ef31fbab7ac9622023130027" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;../user-guide/configuring&quot;&gt;configuration file&lt;/a&gt; and specify your rule ID error level under the &lt;code&gt;rules&lt;/code&gt; key. Your rule will not run unless it has a value of &lt;code&gt;&quot;warn&quot;&lt;/code&gt; or &lt;code&gt;&quot;error&quot;&lt;/code&gt; in the configuration file.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/configuring&quot;&gt;構成ファイル&lt;/a&gt;を作成し、 &lt;code&gt;rules&lt;/code&gt; キーの下にルールIDエラーレベルを指定します。構成ファイルに &lt;code&gt;&quot;warn&quot;&lt;/code&gt; または &lt;code&gt;&quot;error&quot;&lt;/code&gt; 値が含まれていない限り、ルールは実行されません。</target>
        </trans-unit>
        <trans-unit id="95be29707180faf07146d398de09a6c4200d5320" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;../user-guide/configuring&quot;&gt;configuration file&lt;/a&gt; and specify your rule ID error level under the &lt;code&gt;rules&lt;/code&gt; key. Your rule will not run unless it has a value of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; in the configuration file.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/configuring&quot;&gt;構成ファイル&lt;/a&gt;を作成し、 &lt;code&gt;rules&lt;/code&gt; キーの下にルールIDエラーレベルを指定します。構成ファイルの値が &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;2&lt;/code&gt; でない限り、ルールは実行されません。</target>
        </trans-unit>
        <trans-unit id="9f3cb20251d79f003cd52ffc32fabdac22ef9f06" translate="yes" xml:space="preserve">
          <source>Create a Plugin</source>
          <target state="translated">プラグインの作成</target>
        </trans-unit>
        <trans-unit id="784442c08b8848bdf9bb4551c61da1d1ee40bcf5" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;ESLint&lt;/code&gt; instance.</source>
          <target state="translated">新しい &lt;code&gt;ESLint&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="6bd3ef2d8c97297fd3ac40631a5866542c068428" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;index.js&lt;/code&gt; file and export an object containing your settings:</source>
          <target state="translated">新しい &lt;code&gt;index.js&lt;/code&gt; ファイルを作成し、設定を含むオブジェクトをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="11b24d2d7edb54bbd46ce7884ebad9bcadbb5e97" translate="yes" xml:space="preserve">
          <source>Create a new branch</source>
          <target state="translated">新しいブランチを作成する</target>
        </trans-unit>
        <trans-unit id="d22b463025ed1c1b87b33c315b932364a70efd63" translate="yes" xml:space="preserve">
          <source>Create their own rules for ESLint</source>
          <target state="translated">ESLint用の独自のルールを作成する</target>
        </trans-unit>
        <trans-unit id="a7a39d699ab72906f03ebeffbc60ea2aa1b3eeed" translate="yes" xml:space="preserve">
          <source>Creating a New Configuration From Scratch</source>
          <target state="translated">スクラッチからの新しい設定の作成</target>
        </trans-unit>
        <trans-unit id="1bd92f8ba24ec7ef01b8b29783834176b3963fb9" translate="yes" xml:space="preserve">
          <source>Creating a Shareable Config</source>
          <target state="translated">共有可能な設定を作成する</target>
        </trans-unit>
        <trans-unit id="482f648a7c151a3d617c673a13dd07998e557076" translate="yes" xml:space="preserve">
          <source>Creating an AST for the code</source>
          <target state="translated">コードのASTの作成</target>
        </trans-unit>
        <trans-unit id="733e449fda546e3a8b129948f856e5d4cfc8e56b" translate="yes" xml:space="preserve">
          <source>Currently the sole method for telling ESLint which file extensions to lint is by specifying a comma separated list of extensions using the &lt;a href=&quot;command-line-interface#ext&quot;&gt;&lt;code&gt;--ext&lt;/code&gt;&lt;/a&gt; command line option. Note this flag only takes effect in conjunction with directories, and will be ignored if used with filenames or glob patterns.</source>
          <target state="translated">現在、ESLintにlintのファイル拡張子を伝える唯一の方法は、&lt;a href=&quot;command-line-interface#ext&quot;&gt; &lt;code&gt;--ext&lt;/code&gt; &lt;/a&gt;コマンドラインオプションを使用して、拡張子のコンマ区切りリストを指定することです。このフラグはディレクトリと組み合わせた場合にのみ有効であり、ファイル名またはグロブパターンとともに使用した場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="d177cd85e91a4c278affcb9cde0b2fe2b8377110" translate="yes" xml:space="preserve">
          <source>Custom formatters can also be distributed through npm packages. To do so, create an npm package with a name in the format of &lt;code&gt;eslint-formatter-*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is the name of your formatter (such as &lt;code&gt;eslint-formatter-awesome&lt;/code&gt;). Projects should then install the package and can use the custom formatter with the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--format&lt;/code&gt;) flag like this:</source>
          <target state="translated">カスタムフォーマッターは、npmパッケージを介して配布することもできます。これを行うには、 &lt;code&gt;eslint-formatter-*&lt;/code&gt; の形式の名前でnpmパッケージを作成します。ここで、 &lt;code&gt;*&lt;/code&gt; はフォーマッターの名前です（ &lt;code&gt;eslint-formatter-awesome&lt;/code&gt; など）。次に、プロジェクトはパッケージをインストールし、次のように &lt;code&gt;-f&lt;/code&gt; （または &lt;code&gt;--format&lt;/code&gt; ）フラグを指定してカスタムフォーマッターを使用できます。</target>
        </trans-unit>
        <trans-unit id="09fdbd253240e582c58bf7112d231f0aea07470b" translate="yes" xml:space="preserve">
          <source>Custom formatters can also be distributed through npm packages. To do so, create an npm package with a name in the format of &lt;code&gt;eslint-formatter-*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is the name of your formatter (such as &lt;code&gt;eslint-formatter-awesome&lt;/code&gt;). Projects should then install the package and can use the custom formatter with the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--formatter&lt;/code&gt;) flag like this:</source>
          <target state="translated">カスタムフォーマッタは、npmパッケージを通じて配布することもできます。これを行うには、 &lt;code&gt;eslint-formatter-*&lt;/code&gt; という形式の名前でnpmパッケージを作成します。ここで、 &lt;code&gt;*&lt;/code&gt; はフォーマッターの名前（ &lt;code&gt;eslint-formatter-awesome&lt;/code&gt; など）です。プロジェクトはパッケージをインストールし、次のように &lt;code&gt;-f&lt;/code&gt; （または &lt;code&gt;--formatter&lt;/code&gt; ）フラグを指定してカスタムフォーマッターを使用できます。</target>
        </trans-unit>
        <trans-unit id="a49ca4f33339169f36b15576df0f6a281afa0ea0" translate="yes" xml:space="preserve">
          <source>Custom formatters have access to environment variables and so can change their behavior based on environment variable data. Here's an example that uses a &lt;code&gt;AF_SKIP_WARNINGS&lt;/code&gt; environment variable to determine whether or not to show warnings in the results:</source>
          <target state="translated">カスタムフォーマッタは環境変数にアクセスできるため、環境変数データに基づいて動作を変更できます。以下は、 &lt;code&gt;AF_SKIP_WARNINGS&lt;/code&gt; 環境変数を使用して、結果に警告を表示するかどうかを決定する例です。</target>
        </trans-unit>
        <trans-unit id="7ff15870ecf0785cf1ed6f565432cb4eab789c25" translate="yes" xml:space="preserve">
          <source>Customizing RuleTester</source>
          <target state="translated">ルールテスターのカスタマイズ</target>
        </trans-unit>
        <trans-unit id="828863d4cbf7b3824c5a65d94542f5b6e50c30c6" translate="yes" xml:space="preserve">
          <source>Cyclomatic Complexity</source>
          <target state="translated">環状複雑性</target>
        </trans-unit>
        <trans-unit id="380d9bc0a9b56d3d4830a8ed4465765522454a9e" translate="yes" xml:space="preserve">
          <source>Cyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.</source>
          <target state="translated">サイクロマチック複雑度は、プログラムのソースコードを通る直線的に独立したパスの数を測定します。このルールでは、サイクロマチック複雑度のしきい値を設定することができます。</target>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="translated">Debugger</target>
        </trans-unit>
        <trans-unit id="3eff362745911d820434d922e99ea187252312d8" translate="yes" xml:space="preserve">
          <source>Declarations that create one or more variables in the global scope.</source>
          <target state="translated">グローバルスコープに1つ以上の変数を作成する宣言。</target>
        </trans-unit>
        <trans-unit id="ae36edf0e14affd7d5d4b81d1097df1dbe09bdac" translate="yes" xml:space="preserve">
          <source>Default Changes When Using &lt;code&gt;eslint:recommended&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;eslint:recommended&lt;/code&gt; 使用時のデフォルトの変更</target>
        </trans-unit>
        <trans-unit id="cc5b08caa16422344217917ff185d24cf8e1bd8a" translate="yes" xml:space="preserve">
          <source>Default callback names</source>
          <target state="translated">デフォルトのコールバック名</target>
        </trans-unit>
        <trans-unit id="967dd37853ad5171b91867584cc350ce812dd723" translate="yes" xml:space="preserve">
          <source>Default exports</source>
          <target state="translated">デフォルトのエクスポート</target>
        </trans-unit>
        <trans-unit id="d593d0478aa303348496061be603076710abf565" translate="yes" xml:space="preserve">
          <source>Default ignore patterns are applied even when &lt;code&gt;ignorePattern&lt;/code&gt; is provided. If you want to omit default patterns, set this option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ignorePattern&lt;/code&gt; が指定されている場合でも、デフォルトの無視パターンが適用されます。デフォルトのパターンを省略したい場合は、このオプションを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
