<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="f29d5f2d3c95a36ee2b0ea46a567a632aaf41a04" translate="yes" xml:space="preserve">
          <source>MDN switch statement</source>
          <target state="translated">エムディーエヌスイッチ文</target>
        </trans-unit>
        <trans-unit id="a2193d22aa101ed468111273da4fc9a8ff26cb08" translate="yes" xml:space="preserve">
          <source>MDN: &lt;code&gt;typeof&lt;/code&gt; documentation</source>
          <target state="translated">MDN： &lt;code&gt;typeof&lt;/code&gt; ドキュメント</target>
        </trans-unit>
        <trans-unit id="94dc241af5d9eb0a680088ee20211bc0c0311d3c" translate="yes" xml:space="preserve">
          <source>MDN: Functions getter</source>
          <target state="translated">MDN:関数ゲッター</target>
        </trans-unit>
        <trans-unit id="afae02907d2f28836e8ebcf79b528469165b5953" translate="yes" xml:space="preserve">
          <source>MDN: Operator Precedence</source>
          <target state="translated">MDN:オペレータ優先</target>
        </trans-unit>
        <trans-unit id="40980a42cc4812dad76a30f975d0ecb98f42a1d9" translate="yes" xml:space="preserve">
          <source>MDN: RegExp Constructor</source>
          <target state="translated">MDN:RegExp コンストラクタ</target>
        </trans-unit>
        <trans-unit id="b2777e08fa18d849dfd73d3f3047a7b8ba8d3042" translate="yes" xml:space="preserve">
          <source>MDN: Regular Expressions</source>
          <target state="translated">MDN:正規表現</target>
        </trans-unit>
        <trans-unit id="09d82cc59ea6b15487145efc5860cbacae4c5187" translate="yes" xml:space="preserve">
          <source>Make ESLint even better by &lt;a href=&quot;developer-guide/contributing/index&quot;&gt;contributing&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;developer-guide/contributing/index&quot;&gt;貢献する&lt;/a&gt;ことにより、ESLintをさらに改善します。</target>
        </trans-unit>
        <trans-unit id="08102ad0462aa310615f1de442b43a80696f3f09" translate="yes" xml:space="preserve">
          <source>Make fixes as small as possible. Fixes that are unnecessarily large could conflict with other fixes, and prevent them from being applied.</source>
          <target state="translated">修正はできるだけ小さくしてください。不必要に大きい修正は、他の修正と衝突して適用できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="49ba3a90310eda05b6222d40e80f85b80ab264cc" translate="yes" xml:space="preserve">
          <source>Make fixes that are as small as possible. Anything more than a single character is risky and could prevent other, simpler fixes from being made.</source>
          <target state="translated">できるだけ小さな修正をしてください。単一のキャラクター以上のものはリスクが高く、他のよりシンプルな修正ができなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="003acc6ee30f8dfe6d64cbf566782eadf992c2a5" translate="yes" xml:space="preserve">
          <source>Make frequent use of comments to aid others in understanding your code. Use comments when:</source>
          <target state="translated">他の人が自分のコードを理解するのに役立つように、コメントを頻繁に使用しましょう。コメントを使用する際には、コメントを使用してください。</target>
        </trans-unit>
        <trans-unit id="48605054d2a26e6ebeb6461152bd41032c424c7e" translate="yes" xml:space="preserve">
          <source>Make separate pull requests for unrelated changes. Large pull requests with multiple unrelated changes may be closed without merging.</source>
          <target state="translated">関係のない変更に対しては、別々のプルリクエストを作成します。複数の無関係な変更を含む大規模なプルリクエストは、マージせずに閉じられることがあります。</target>
        </trans-unit>
        <trans-unit id="66052a8bb781ea4c3486f29d92fd4d76dd3b173b" translate="yes" xml:space="preserve">
          <source>Make sure your commit is formatted correctly.</source>
          <target state="translated">コミットが正しくフォーマットされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="2294106611bb7be36ee5d5d272a03c7e228c69ec" translate="yes" xml:space="preserve">
          <source>Make the changes to the code and tests, following the &lt;a href=&quot;../code-conventions&quot;&gt;code conventions&lt;/a&gt; as you go. Once you have finished, commit the changes to your branch:</source>
          <target state="translated">&lt;a href=&quot;../code-conventions&quot;&gt;コードの規則&lt;/a&gt;に従って、コードとテストに変更を加えます。完了したら、変更をブランチにコミットします。</target>
        </trans-unit>
        <trans-unit id="4b6914f73852714eeda13d3e462e3d5fdef8f379" translate="yes" xml:space="preserve">
          <source>Make your changes</source>
          <target state="translated">変更を加える</target>
        </trans-unit>
        <trans-unit id="bae6e15f8b41918cf92f172d566b4d738bc07054" translate="yes" xml:space="preserve">
          <source>Managing the execution environment for &lt;code&gt;Linter&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; の実行環境の管理</target>
        </trans-unit>
        <trans-unit id="d0373508bebe8dbaeab01855b2503dec101737d8" translate="yes" xml:space="preserve">
          <source>Many JavaScript libraries use the callback pattern to manage asynchronous operations. A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.</source>
          <target state="translated">多くのJavaScriptライブラリでは、非同期操作を管理するためにコールバックパターンを使用しています。どんなに複雑なプログラムでも、様々なレベルの同時実行でいくつかの非同期操作を管理する必要があるでしょう。よくある落とし穴としては、コールバックを入れ子にしてしまうことが挙げられます。</target>
        </trans-unit>
        <trans-unit id="f31b27c63c34d0475df6058a328447b442261068" translate="yes" xml:space="preserve">
          <source>Many codebases require strings to be defined in a consistent manner.</source>
          <target state="translated">多くのコードベースでは、文字列を一貫した方法で定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="3f3335e45cb0fe011f2c670521d47c996929538a" translate="yes" xml:space="preserve">
          <source>Many developers consider code difficult to read if blocks are nested beyond a certain depth.</source>
          <target state="translated">多くの開発者は、ブロックが一定の深さを超えて入れ子になっているとコードが読みにくいと考えています。</target>
        </trans-unit>
        <trans-unit id="ec6dcf6f91e26c974d5a7820b7cb35c058c70329" translate="yes" xml:space="preserve">
          <source>Many people enjoy a terser code style and don't mind comments bumping up against code. If you fall into that category this rule is not for you.</source>
          <target state="translated">多くの人は、ターサースタイルのコードスタイルを楽しみ、コメントがコードにぶつかっても気にしません。もしあなたがそのカテゴリに当てはまるならば、このルールはあなたのためのものではありません。</target>
        </trans-unit>
        <trans-unit id="30142d0203615d41e1641b80d943d73cc5ab1f7d" translate="yes" xml:space="preserve">
          <source>Many style guides require a particular style for comments that span multiple lines. For example, some style guides prefer the use of a single block comment for multiline comments, whereas other style guides prefer consecutive line comments.</source>
          <target state="translated">多くのスタイルガイドでは、複数行にまたがるコメントに対して特定のスタイルを要求しています。例えば、スタイルガイドの中には、複数行のコメントには単一のブロックコメントを使用することを好むものがありますが、他のスタイルガイドでは連続した行のコメントを好むものもあります。</target>
        </trans-unit>
        <trans-unit id="1b81db8af58d6a82844c2a7f8a0fb423a248acad" translate="yes" xml:space="preserve">
          <source>Many style guides require empty lines before or after comments. The primary goal of these rules is to make the comments easier to read and improve readability of the code.</source>
          <target state="translated">多くのスタイルガイドでは、コメントの前後に空行を要求しています。これらの規則の第一の目的は、コメントを読みやすくし、コードの可読性を向上させることです。</target>
        </trans-unit>
        <trans-unit id="65510d0ed7112a32a93fbfa0f852ca9727017a1d" translate="yes" xml:space="preserve">
          <source>Many style guides require or disallow newlines inside of function parentheses.</source>
          <target state="translated">多くのスタイルガイドでは、関数括弧内の改行を要求したり、禁止したりしています。</target>
        </trans-unit>
        <trans-unit id="0ed12807412804e8c761c63c5aafe1b92dde8f29" translate="yes" xml:space="preserve">
          <source>Many users found this behavior confusing, because if they made a typo in a filename, ESLint would appear to lint that file successfully while actually not linting anything.</source>
          <target state="translated">多くのユーザーがこの動作を混乱させていました。なぜならば、ファイル名にタイプミスがあった場合、ESLint はそのファイルを正しくリントしているように見えるのに、実際には何もリントしていないからです。</target>
        </trans-unit>
        <trans-unit id="75eae4786a36e18e4c433733218135d176e49561" translate="yes" xml:space="preserve">
          <source>Many versioning systems (like git and subversion) can automatically ensure the correct ending. However to cover all contingencies, you can activate this rule.</source>
          <target state="translated">多くのバージョン管理システム (git や subversion など)は、正しい結末を自動的に保証してくれます。しかし、すべての不測の事態をカバーするために、このルールを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="d43df01241be64a2f04e14f16ff54fa881de6350" translate="yes" xml:space="preserve">
          <source>Medium - Runs ESLint on jQuery</source>
          <target state="translated">Medium-jQuery上でESLintを実行します。</target>
        </trans-unit>
        <trans-unit id="08da200116809cb87f9df70d5b14e0b115e836c5" translate="yes" xml:space="preserve">
          <source>MemberExpression</source>
          <target state="translated">MemberExpression</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="78327bd6b1c4878fa59ed96c8e3108c92ded9378" translate="yes" xml:space="preserve">
          <source>Migrating</source>
          <target state="translated">Migrating</target>
        </trans-unit>
        <trans-unit id="f19f19cf7d792e42d3a20e6c6066ddb485e88b86" translate="yes" xml:space="preserve">
          <source>Migrating from JSCS</source>
          <target state="translated">JSCSからの移行</target>
        </trans-unit>
        <trans-unit id="f4cc004b36f93dc98ec6cb8cdd988862d89b0841" translate="yes" xml:space="preserve">
          <source>Migrating to v1.0.0</source>
          <target state="translated">v1.0.0への移行</target>
        </trans-unit>
        <trans-unit id="207ad564379ab84e0bd1d9f94528cf475fccedfe" translate="yes" xml:space="preserve">
          <source>Migrating to v2.0.0</source>
          <target state="translated">v2.0.0への移行</target>
        </trans-unit>
        <trans-unit id="6996ff0c977043ad7b164e529401b9633d67d887" translate="yes" xml:space="preserve">
          <source>Migrating to v3.0.0</source>
          <target state="translated">v3.0.0への移行</target>
        </trans-unit>
        <trans-unit id="b7e113904f56ea23562186c3f481bcb45dd5dd88" translate="yes" xml:space="preserve">
          <source>Migrating to v4.0.0</source>
          <target state="translated">v4.0.0への移行</target>
        </trans-unit>
        <trans-unit id="3a672cb43559c6811fe6c8d12f1ff180dd8516ab" translate="yes" xml:space="preserve">
          <source>Migrating to v5.0.0</source>
          <target state="translated">v5.0.0.0への移行</target>
        </trans-unit>
        <trans-unit id="519f16166bf3e002d2ccde6246ebacf01cc0a2bb" translate="yes" xml:space="preserve">
          <source>Migrating to v6.0.0</source>
          <target state="translated">v6.0.0への移行</target>
        </trans-unit>
        <trans-unit id="d246782d0c4e2e56023b3b51f8f80bebc4084244" translate="yes" xml:space="preserve">
          <source>Migrating to v7.0.0</source>
          <target state="translated">v7.0.0への移行</target>
        </trans-unit>
        <trans-unit id="528b503f97c282e46488116b7644afc7003a7185" translate="yes" xml:space="preserve">
          <source>Mimosa: &lt;a href=&quot;https://www.npmjs.com/package/mimosa-eslint&quot;&gt;mimosa-eslint&lt;/a&gt;</source>
          <target state="translated">ミモザ：&lt;a href=&quot;https://www.npmjs.com/package/mimosa-eslint&quot;&gt;mimosa-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="99c887ad129c82e774781a1e88541c3f8352bfe0" translate="yes" xml:space="preserve">
          <source>Mocha.js: &lt;a href=&quot;https://www.npmjs.com/package/mocha-eslint&quot;&gt;mocha-eslint&lt;/a&gt;</source>
          <target state="translated">Mocha.js：&lt;a href=&quot;https://www.npmjs.com/package/mocha-eslint&quot;&gt;mocha-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d7a3d6a2ddcd05134bdb5c8786e8cf510ba6fd1" translate="yes" xml:space="preserve">
          <source>Modern terminals like &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; or &lt;a href=&quot;http://guake-project.org/&quot;&gt;Guake&lt;/a&gt; expect a specific results format to automatically open filenames when they are clicked. Most terminals support this format for that purpose:</source>
          <target state="translated">&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;や&lt;a href=&quot;http://guake-project.org/&quot;&gt;Guake&lt;/a&gt;などの最新の端末では、特定の結果形式をクリックすると、ファイル名が自動的に開かれることが期待されています。ほとんどの端末は、この目的でこの形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="3846ef909df0be6113f867ef70064e247aabbd00" translate="yes" xml:space="preserve">
          <source>Monitor the status of the Travis CI build for your pull request. If it fails, please investigate why. We cannot merge pull requests that fail Travis for any reason.</source>
          <target state="translated">プルリクエストのTravis CIビルドの状態を監視します。失敗した場合は、その理由を調査してください。いかなる理由であっても、Travisに失敗したプルリクエストをマージすることはできません。</target>
        </trans-unit>
        <trans-unit id="0dc20fad549e82acb25baf9beda60f2ad6f4782b" translate="yes" xml:space="preserve">
          <source>More Control on Unit Testing</source>
          <target state="translated">ユニットテストの制御性を高める</target>
        </trans-unit>
        <trans-unit id="8985cd96f1b823aecfe823a7ea114c4ab4c77f3f" translate="yes" xml:space="preserve">
          <source>More about Complexity in JavaScript</source>
          <target state="translated">JavaScriptの複雑さの詳細</target>
        </trans-unit>
        <trans-unit id="cf861d594fba09fdccc03924cfd4dbfa37e34457" translate="yes" xml:space="preserve">
          <source>More clear:</source>
          <target state="translated">もっとはっきりと。</target>
        </trans-unit>
        <trans-unit id="f9a9f89b9373f2be282736f322c949e24ac40fdf" translate="yes" xml:space="preserve">
          <source>More on ES6 arrow functions</source>
          <target state="translated">ES6 の矢印関数の詳細</target>
        </trans-unit>
        <trans-unit id="b4a364a72443f90f75eadeb97e6069788cc6ba06" translate="yes" xml:space="preserve">
          <source>More report messages now have full location ranges</source>
          <target state="translated">より多くのレポートメッセージに完全な場所の範囲が追加されました</target>
        </trans-unit>
        <trans-unit id="6e669deb33d5dab4d7c948c39f7c25a8a1410c31" translate="yes" xml:space="preserve">
          <source>Most code conventions require either tabs or spaces be used for indentation. As such, it's usually an error if a single line of code is indented with both tabs and spaces.</source>
          <target state="translated">ほとんどのコード規約では、インデントにはタブかスペースのどちらかを使用する必要があります。そのため、1 行のコードがタブとスペースの両方でインデントされていると、通常はエラーになります。</target>
        </trans-unit>
        <trans-unit id="d26ee49c9e2ae7e618cb4f098141d60255bb1c01" translate="yes" xml:space="preserve">
          <source>Most of the installers already come with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; but if for some reason npm doesn't work on your system, you can install it manually using the instructions on the site.</source>
          <target state="translated">ほとんどのインストーラーにはすでに&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;が付属していますが、何らかの理由でnpmがシステムで機能しない場合は、サイトの手順を使用して手動でインストールできます。</target>
        </trans-unit>
        <trans-unit id="cda170b39a2aee0a27ca48dc565c4de1f9771f33" translate="yes" xml:space="preserve">
          <source>Most of the installers come with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; already installed, but if for some reason it doesn't work on your system, you can install it manually using the instructions on the site.</source>
          <target state="translated">ほとんどのインストーラーには&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmが&lt;/a&gt;すでにインストールされていますが、何らかの理由でシステムで動作しない場合は、サイトの指示に従って手動でインストールできます。</target>
        </trans-unit>
        <trans-unit id="c0c042b4288a4f46ee5fbcb5a35c3c86ee3a0aa9" translate="yes" xml:space="preserve">
          <source>Most parts of ESLint have unit tests associated with them. Unit tests are written using &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; and are required when making contributions to ESLint. You'll find all of the unit tests in the &lt;code&gt;tests&lt;/code&gt; directory.</source>
          <target state="translated">ESLintのほとんどの部分には、ユニットテストが関連付けられています。単体テストは&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;を使用して記述されており、ESLintに貢献するときに必要です。単体テストはすべて、 &lt;code&gt;tests&lt;/code&gt; ディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="fde66fa86f8517d887e54616bf1fb31656fc7f81" translate="yes" xml:space="preserve">
          <source>Motivations</source>
          <target state="translated">Motivations</target>
        </trans-unit>
        <trans-unit id="cd847d892e51c9af96a07d5f1327caaaa74f5961" translate="yes" xml:space="preserve">
          <source>Mozilla Developer Network</source>
          <target state="translated">Mozilla Developer Network</target>
        </trans-unit>
        <trans-unit id="1717de09461ac8ad667382f9284cc154ed5fcf13" translate="yes" xml:space="preserve">
          <source>Multi-Line Comments</source>
          <target state="translated">複数行コメント</target>
        </trans-unit>
        <trans-unit id="50ffbaa596feb6c3fce6a0ab79b26de80c0fc9ad" translate="yes" xml:space="preserve">
          <source>Multi-line &lt;code&gt;eslint-disable-line&lt;/code&gt; directives are now reported as problems</source>
          <target state="translated">複数行の &lt;code&gt;eslint-disable-line&lt;/code&gt; ディレクティブが問題として報告されるようになりました</target>
        </trans-unit>
        <trans-unit id="ebd80a2db4954a31bc8bbc5ce38618ea3077ca04" translate="yes" xml:space="preserve">
          <source>Multi-line comments should be used to document code that requires more explanation. Each multi-line comment should have at least three lines:</source>
          <target state="translated">複数行コメントは、より多くの説明を必要とするコードを文書化するために使用しなければなりません。各複数行コメントは、少なくとも3行以上でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b97cd68ceb9fb3aefd437fb8bac6c169f39dc7ef" translate="yes" xml:space="preserve">
          <source>Multiline Properties</source>
          <target state="translated">マルチラインプロパティ</target>
        </trans-unit>
        <trans-unit id="25384bc20fcb587fe7b1a27bd9646bb5677ec5ce" translate="yes" xml:space="preserve">
          <source>Multiple glob patterns can be provided within a single override block. A file must match at least one of the supplied patterns for the configuration to apply.</source>
          <target state="translated">1 つのオーバーライド・ブロック内に複数のグロブ・パターンを指定できます。設定を適用するには、指定されたパターンのうち少なくとも 1 つとファイルが一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="75af35131e430e8f953818ff04be0c62dc2c9f54" translate="yes" xml:space="preserve">
          <source>Multiple object/property values can be disallowed, and you can specify an optional message:</source>
          <target state="translated">複数のオブジェクト/プロパティ値を無効にすることができ、オプションでメッセージを指定することができます。</target>
        </trans-unit>
        <trans-unit id="ce6c9b518828a9995fa8b5eaa2bb15a280c804ca" translate="yes" xml:space="preserve">
          <source>Multiple properties with the same key in object literals can cause unexpected behavior in your application.</source>
          <target state="translated">オブジェクトリテラルで同じキーを持つ複数のプロパティを使用すると、アプリケーションで予期せぬ動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="2ea30e5e8aba10118d84047ac8d06b2fb97d351e" translate="yes" xml:space="preserve">
          <source>Multiple spaces in a row that are not used for indentation are typically mistakes. For example:</source>
          <target state="translated">インデントに使用されていない行内の複数のスペースは、典型的には間違いです。例えば</target>
        </trans-unit>
        <trans-unit id="fe7b50504e864db175792f08ac3122cab2513fc4" translate="yes" xml:space="preserve">
          <source>Multiple var statements in JavaScript, not superfluous</source>
          <target state="translated">JavaScriptの複数のvar文、余分なものではありません</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="45b150c33703661a4e069fa3f97c482cd27685ef" translate="yes" xml:space="preserve">
          <source>Naming Convention</source>
          <target state="translated">命名規約</target>
        </trans-unit>
        <trans-unit id="4a1334b26c176a4a0cf6f3310906a31587677f7c" translate="yes" xml:space="preserve">
          <source>Naming things consistently in a project is an often underestimated aspect of code creation. When done correctly, it can save your team hours of unnecessary head scratching and misdirections. This rule allows you to precisely define and enforce the variables and function names on your team should use. No more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!</source>
          <target state="translated">プロジェクト内で一貫して物事に名前を付けることは、コード作成において過小評価されることが多いです。正しく行えば、チームが不必要に頭を掻いたり、方向を間違えたりする時間を節約することができます。このルールでは、チームが使用すべき変数名や関数名を正確に定義し、強制することができます。もうキャメルケース、スネークケース、パスカルケース、ハンガリー記法などに限定する必要はありません。Id-matchはあなたのニーズをすべてカバーしています。</target>
        </trans-unit>
        <trans-unit id="f9c51726a21f2c071e2eaecdc1f58e85c2e063e9" translate="yes" xml:space="preserve">
          <source>Negated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.</source>
          <target state="translated">否定された条件はより理解しにくい。代わりに条件を反転させることで、コードをより読みやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="e4be93dc7bf3a2d0c376b542c46f2be17b015f34" translate="yes" xml:space="preserve">
          <source>Nested &lt;code&gt;overrides&lt;/code&gt; setting will be applied only if the glob patterns of both of the parent config and the child config matched. This is the same when the extended configs have &lt;code&gt;overrides&lt;/code&gt; setting.</source>
          <target state="translated">ネストされた &lt;code&gt;overrides&lt;/code&gt; 設定は、親構成と子構成の両方のglobパターンが一致した場合にのみ適用されます。これは、拡張構成に &lt;code&gt;overrides&lt;/code&gt; 設定がある場合も同じです。</target>
        </trans-unit>
        <trans-unit id="bba2cf8efb9ea175365987d5e97406eab0eb07ac" translate="yes" xml:space="preserve">
          <source>Nested long method chains like the below example are often broken onto separate lines for readability:</source>
          <target state="translated">以下の例のようなネストされた長いメソッドチェーンは、読みやすくするために別の行に分割されていることが多いです。</target>
        </trans-unit>
        <trans-unit id="0f7143e0984fd302373a44b923b04ef166d1d6d4" translate="yes" xml:space="preserve">
          <source>Nesting ternary expressions can make code more difficult to understand.</source>
          <target state="translated">三項式を入れ子にすると、コードを理解するのが難しくなります。</target>
        </trans-unit>
        <trans-unit id="e868c2d163da18b704134c91dfe580b7476d872b" translate="yes" xml:space="preserve">
          <source>Never use &lt;code&gt;eval()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval()&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="17303bc383f07ad6ca5f1e713ad09a8e4c5aceb1" translate="yes" xml:space="preserve">
          <source>Never use the &lt;code&gt;with&lt;/code&gt; statement. This statement isn't available in strict mode and likely won't be available in future ECMAScript editions.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; ステートメントは使用しないでください。このステートメントはストリクトモードでは使用できず、今後のECMAScriptエディションでは使用できなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ccd1fb39539ac8b89e4d82497beb7205dfc545dc" translate="yes" xml:space="preserve">
          <source>Never use the primitive wrapper types, such as &lt;code&gt;String&lt;/code&gt;, to create new objects.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; などのプリミティブラッパータイプを使用して新しいオブジェクトを作成しないでください。</target>
        </trans-unit>
        <trans-unit id="b8fd74418c174fa1a6547580b4f9d50c65e103b2" translate="yes" xml:space="preserve">
          <source>Never use the special value &lt;code&gt;undefined&lt;/code&gt;. To see if a variable has been defined, use the &lt;code&gt;typeof&lt;/code&gt; operator:</source>
          <target state="translated">特別な値 &lt;code&gt;undefined&lt;/code&gt; を使用しないでください。変数が定義されているかどうかを確認するには、 &lt;code&gt;typeof&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="e29869dc1c4b4ed49384ced7f3787145a78ff2a6" translate="yes" xml:space="preserve">
          <source>Never.</source>
          <target state="translated">Never.</target>
        </trans-unit>
        <trans-unit id="a5f5c5a26121891aea3614a5ee0763dc3b389722" translate="yes" xml:space="preserve">
          <source>Nevertheless, the ECMAScript specification treats &lt;code&gt;\8&lt;/code&gt; and &lt;code&gt;\9&lt;/code&gt; in string literals as a legacy feature. This syntax is optional if the ECMAScript host is not a web browser. Browsers still have to support it, but only in non-strict mode.</source>
          <target state="translated">それにもかかわらず、ECMAScript仕様では、文字列リテラルの &lt;code&gt;\8&lt;/code&gt; と &lt;code&gt;\9&lt;/code&gt; をレガシー機能として扱います。ECMAScriptホストがWebブラウザーでない場合、この構文はオプションです。ブラウザは引き続きそれをサポートする必要がありますが、非厳密モードでのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="c7c2bffc4ed85d835ff90e67b6700b9717359c25" translate="yes" xml:space="preserve">
          <source>New Rules</source>
          <target state="translated">新しいルール</target>
        </trans-unit>
        <trans-unit id="b90e91c1c9b0532e10c8d94b3242c03a7c521d78" translate="yes" xml:space="preserve">
          <source>New Rules in &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 新しいルール</target>
        </trans-unit>
        <trans-unit id="098b5a1915693dd6ff64ee239f651997dde49e83" translate="yes" xml:space="preserve">
          <source>New rules have been added to &lt;code&gt;eslint:recommended&lt;/code&gt;</source>
          <target state="translated">新しいルールが &lt;code&gt;eslint:recommended&lt;/code&gt; に追加されました</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="f76dd91a3359617271ed7ffd8b7df9bbc0c954e1" translate="yes" xml:space="preserve">
          <source>Next, push your changes to your clone:</source>
          <target state="translated">次に、変更した内容をクローンにプッシュします。</target>
        </trans-unit>
        <trans-unit id="432bb6269b57474b24c9803b75937c68ef4b90c5" translate="yes" xml:space="preserve">
          <source>No Longer Exporting cli</source>
          <target state="translated">クリの輸出は終了しました。</target>
        </trans-unit>
        <trans-unit id="6fe37c89ea3654de81c59847379a8780e76d887e" translate="yes" xml:space="preserve">
          <source>No one will blame you for backing out of an issue if you are unable to complete it. We just want to keep the process moving along as efficiently as possible.</source>
          <target state="translated">問題を完成できなかったとしても、誰もあなたが手を引いたことを責めることはありません。私たちは、プロセスをできるだけ効率的に進めていきたいと考えています。</target>
        </trans-unit>
        <trans-unit id="015936150c4240bf1685a0beae94734e5c0fd2e7" translate="yes" xml:space="preserve">
          <source>No rules are enabled by default. The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a &lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;configuration file&lt;/a&gt; enables rules that report common problems, which have a check mark  below.</source>
          <target state="translated">デフォルトでは有効になっているルールはありません。&lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;構成ファイル&lt;/a&gt;の &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; プロパティは、以下のチェックマークがある一般的な問題を報告するルールを有効にします。</target>
        </trans-unit>
        <trans-unit id="43b56bdc9a2f449dd95a29cc4403aabc8d987dfc" translate="yes" xml:space="preserve">
          <source>Node.JS</source>
          <target state="translated">Node.JS</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="7c492f9c09c9ff17a16de6ed9c821ef76255da51" translate="yes" xml:space="preserve">
          <source>Node.js 10 (10.13.0 and above)</source>
          <target state="translated">Node.js 10 (10.13.0以上)</target>
        </trans-unit>
        <trans-unit id="4ea1289b9b156c25356b48232636d10ae1337444" translate="yes" xml:space="preserve">
          <source>Node.js 10 (&lt;code&gt;10.12.0&lt;/code&gt; and above)</source>
          <target state="translated">Node.js 10（ &lt;code&gt;10.12.0&lt;/code&gt; 以降）</target>
        </trans-unit>
        <trans-unit id="cabb72478afd730580cf0fbc94ae9ad267b59b6d" translate="yes" xml:space="preserve">
          <source>Node.js 12 and above</source>
          <target state="translated">Node.js 12以上</target>
        </trans-unit>
        <trans-unit id="90d89d5227cc3415b0eef08538029343dc658ba6" translate="yes" xml:space="preserve">
          <source>Node.js 4 is no longer supported</source>
          <target state="translated">Node.js 4がサポートされなくなった</target>
        </trans-unit>
        <trans-unit id="5a40f605ee0fd0ee1b8acb34f313bb0a19612661" translate="yes" xml:space="preserve">
          <source>Node.js 6 (6.14.0 and above)</source>
          <target state="translated">Node.js 6 (6.14.0以上)</target>
        </trans-unit>
        <trans-unit id="e90914a7b373d6529d8a016e66f5135b658d37af" translate="yes" xml:space="preserve">
          <source>Node.js 6 is no longer supported</source>
          <target state="translated">Node.js 6がサポートされなくなった</target>
        </trans-unit>
        <trans-unit id="2ceb71f6fc886f72cd41914593a377d2331bca2a" translate="yes" xml:space="preserve">
          <source>Node.js 8 (8.10.0 and above)</source>
          <target state="translated">Node.js 8 (8.10.0以上)</target>
        </trans-unit>
        <trans-unit id="d141eed305b5a0817124be433bc810afd24f5cf0" translate="yes" xml:space="preserve">
          <source>Node.js 8 is no longer supported</source>
          <target state="translated">Node.js 8がサポートされなくなった</target>
        </trans-unit>
        <trans-unit id="8b609a3673d2801930c52c7f60a09dbfa6895105" translate="yes" xml:space="preserve">
          <source>Node.js 8 reached EOL in December 2019, and we are officially dropping support for it in this release. ESLint now supports the following versions of Node.js:</source>
          <target state="translated">Node.js 8は2019年12月にEOLに達し、今回のリリースで正式にサポートを終了しました。ESLintは現在、以下のバージョンのNode.jsをサポートしています。</target>
        </trans-unit>
        <trans-unit id="8b8214b8e226c143da7ac208d7ccfff6ed28e492" translate="yes" xml:space="preserve">
          <source>Node.js API</source>
          <target state="translated">Node.js API</target>
        </trans-unit>
        <trans-unit id="04fbd93b23e439f6b5bdb44a7ebe23e14c1d9127" translate="yes" xml:space="preserve">
          <source>Node.js and CommonJS</source>
          <target state="translated">Node.jsとCommonJS</target>
        </trans-unit>
        <trans-unit id="cf4ef447c1c3a6af00c6d095f16e14a9b1f54259" translate="yes" xml:space="preserve">
          <source>Node.js/CommonJS rules are deprecated</source>
          <target state="translated">Node.js/CommonJSルールは非推奨です。</target>
        </trans-unit>
        <trans-unit id="9d679929ff239f3cfca986b3e50f54d4f9910b67" translate="yes" xml:space="preserve">
          <source>Node.js/CommonJS rules have been deprecated</source>
          <target state="translated">Node.js/CommonJSルールは非推奨となりました。</target>
        </trans-unit>
        <trans-unit id="e3f2bdd6d137ca1e9a98351c023627cbde0cec9c" translate="yes" xml:space="preserve">
          <source>Nodejitsu: What are the error conventions?</source>
          <target state="translated">Nodejitsuです。エラーの規約を教えてください。</target>
        </trans-unit>
        <trans-unit id="40b5e952bb48a49486eed3f9c7473ff77e065932" translate="yes" xml:space="preserve">
          <source>Normally, if ESLint runs and finds no errors (only warnings), it will exit with a success exit status. However, if &lt;code&gt;--max-warnings&lt;/code&gt; is specified and the total warning count is greater than the specified threshold, ESLint will exit with an error status. Specifying a threshold of &lt;code&gt;-1&lt;/code&gt; or omitting this option will prevent this behavior.</source>
          <target state="translated">通常、ESLintが実行され、エラー（警告のみ）が見つからない場合、ESLintは正常終了ステータスで終了します。ただし、 &lt;code&gt;--max-warnings&lt;/code&gt; が指定されていて、警告の総数が指定されたしきい値より大きい場合、ESLintはエラーステータスで終了します。しきい値を &lt;code&gt;-1&lt;/code&gt; に指定するか、このオプションを省略すると、この動作が防止されます。</target>
        </trans-unit>
        <trans-unit id="b25fdf6d849a83c39bb3f295e2b8c788a05b6b0d" translate="yes" xml:space="preserve">
          <source>Not be library-specific.</source>
          <target state="translated">図書館に特化したものではありません。</target>
        </trans-unit>
        <trans-unit id="35e36fc0294abf8492a00a6146dff86e708f4159" translate="yes" xml:space="preserve">
          <source>Not be the opposite of an existing rule.</source>
          <target state="translated">既存のルールの逆にならないこと。</target>
        </trans-unit>
        <trans-unit id="fad574db66b94391e41eddfcd296f39d4f94404a" translate="yes" xml:space="preserve">
          <source>Not overlap with an existing rule.</source>
          <target state="translated">既存のルールと重複しない。</target>
        </trans-unit>
        <trans-unit id="9029138548f2a9fdd23c03ef55efcf761ab4cfd0" translate="yes" xml:space="preserve">
          <source>Not specifying this rule is equivalent of assigning it to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">このルールを指定しないことは、それを &lt;code&gt;none&lt;/code&gt; に割り当てることと同じです。</target>
        </trans-unit>
        <trans-unit id="4861a0142b65983913e9d41b8290eade0ea43067" translate="yes" xml:space="preserve">
          <source>Notations</source>
          <target state="translated">Notations</target>
        </trans-unit>
        <trans-unit id="9b7b918044536aa7a7deb04ec10c32265cca907c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&quot;always&quot;&lt;/code&gt; has a special case where &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt; are not considered problems.</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; は、 &lt;code&gt;{}&lt;/code&gt; と &lt;code&gt;[]&lt;/code&gt; が問題と見なされない特別なケースがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b8542e39cfc8468ccf1b75f31ccc5f6beca12d4a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;/* exported */&lt;/code&gt; has no effect for any of the following:</source>
          <target state="translated">&lt;code&gt;/* exported */&lt;/code&gt; は、次のいずれにも影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="aca84c496113223feba48b89954e9ed6a64416c1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;defaultAssignment: false&lt;/code&gt; still allows expressions of the form &lt;code&gt;x ? expr : x&lt;/code&gt; (where the identifier is on the right hand side of the ternary).</source>
          <target state="translated">&lt;code&gt;defaultAssignment: false&lt;/code&gt; でも、 &lt;code&gt;x ? expr : x&lt;/code&gt; の形式の式が許可されることに注意してください。expr：x（ここで、識別子は三項の右側にあります）。</target>
        </trans-unit>
        <trans-unit id="9b7f17dafb1fc2ac631526c6b46f9a1d8ffa8e3b" translate="yes" xml:space="preserve">
          <source>Note that at least one of &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;loc&lt;/code&gt; is required.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; または &lt;code&gt;loc&lt;/code&gt; の少なくとも1つが必要であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3f74885501a3e7134a66bf3df8110995866d5416" translate="yes" xml:space="preserve">
          <source>Note that configuration comments and comments which start with URLs are never reported.</source>
          <target state="translated">URL で始まる設定コメントやコメントは報告されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c2f78d136a146a36971c9e8628e71d64cc1bd5ef" translate="yes" xml:space="preserve">
          <source>Note that even with these compatibilities, there are no guarantees that an external parser will work correctly with ESLint and ESLint will not fix bugs related to incompatibilities with other parsers.</source>
          <target state="translated">これらの互換性があっても、外部パーサーがESLintで正しく動作する保証はありませんし、ESLintは他のパーサーとの互換性のないバグを修正することはありません。</target>
        </trans-unit>
        <trans-unit id="bfc76a3bf8f752b8b71cfd21bce6317dc0eb6d26" translate="yes" xml:space="preserve">
          <source>Note that every &lt;code&gt;getter&lt;/code&gt; is expected to return a value.</source>
          <target state="translated">すべての &lt;code&gt;getter&lt;/code&gt; が値を返すことが期待されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="973ad8dc3ee2a30a3d4c6e8e9554560da150053f" translate="yes" xml:space="preserve">
          <source>Note that leading and trailing whitespace is optional in message parameters.</source>
          <target state="translated">メッセージパラメータでは、先頭と末尾の空白はオプションであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8c038f50e970ff4a6c263baef88671b9b6797c2c" translate="yes" xml:space="preserve">
          <source>Note that one or more string expression statements (with or without semi-colons) will only be considered as unused if they are not in the beginning of a script, module, or function (alone and uninterrupted by other statements). Otherwise, they will be treated as part of a &quot;directive prologue&quot;, a section potentially usable by JavaScript engines. This includes &quot;strict mode&quot; directives.</source>
          <target state="translated">1つ以上の文字列表現文(セミコロンの有無にかかわらず)は、スクリプト、モジュール、関数の先頭にない場合(単独で他の文に邪魔されない場合)にのみ、未使用とみなされることに注意してください。そうでない場合は、JavaScript エンジンが使用できる可能性のあるセクションである &quot;ディレクティブプロローグ&quot; の一部として扱われます。これには &quot;strict mode&quot; ディレクティブも含まれます。</target>
        </trans-unit>
        <trans-unit id="14eabcc20ca1ae6d595dd0146dacc275446c2785" translate="yes" xml:space="preserve">
          <source>Note that operator &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;allow&lt;/code&gt; list would allow &lt;code&gt;+foo&lt;/code&gt; (number coercion) as well as &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; (string coercion).</source>
          <target state="translated">オペレータのことを注意 &lt;code&gt;+&lt;/code&gt; で &lt;code&gt;allow&lt;/code&gt; リストができるようになる &lt;code&gt;+foo&lt;/code&gt; の（数の強制）だけでなく、 &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; （文字列の強制を）。</target>
        </trans-unit>
        <trans-unit id="a2ea103023fbbea878ee580810efa43b1ce5e514" translate="yes" xml:space="preserve">
          <source>Note that simply checking &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; is likely to cause an error in some cases; see &lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtins&lt;/a&gt;.</source>
          <target state="translated">単に &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; をチェックすると、場合によってはエラーが発生する可能性があることに注意してください。&lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtinsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="da8f31abf81fd1530a65a1c89cbaf28a84d87fe4" translate="yes" xml:space="preserve">
          <source>Note that the following words are always ignored by this rule: &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt;.</source>
          <target state="translated">このルールでは常に次の単語は無視されることに注意してください： &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92871ffd4aceb2bd3a9e8edec06e56e2e05d821f" translate="yes" xml:space="preserve">
          <source>Note that the last &lt;code&gt;case&lt;/code&gt; statement in these examples does not cause a warning because there is nothing to fall through into.</source>
          <target state="translated">これらの例の最後の &lt;code&gt;case&lt;/code&gt; ステートメントは、該当するものがないため、警告を発生させないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="9fe60f0778016b7de275c5c3433b4ff7fcd68bdb" translate="yes" xml:space="preserve">
          <source>Note that the patterns considered problems are &lt;strong&gt;not&lt;/strong&gt; flagged by the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">パターンとみなさ問題がされていることに注意してください&lt;strong&gt;ない&lt;/strong&gt;でフラグを立て&lt;a href=&quot;semi&quot;&gt;半&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="649f078207c83d3aa9f8117c4caa24a177fa6e14" translate="yes" xml:space="preserve">
          <source>Note that this also affects the &lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt;&lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">これは&lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt; &lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt; &lt;/a&gt; APIにも影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="4e1fc0ebbd12c442e0e5e74e0e029ef6f09efa61" translate="yes" xml:space="preserve">
          <source>Note that this also enables parsing for other features from ES2018, such as &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;async iteration&lt;/a&gt;. When using ESLint v5 with the default parser, it is no longer possible to toggle syntax support for object rest/spread independently of other features.</source>
          <target state="translated">これにより、&lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;非同期反復&lt;/a&gt;など、ES2018の他の機能の解析も有効になることに注意してください。ESLint v5をデフォルトのパーサーで使用する場合、他の機能とは無関係にオブジェクトのレスト/スプレッドの構文サポートを切り替えることができなくなりました。</target>
        </trans-unit>
        <trans-unit id="82d62f793b20020481672da21ac064b568a683e5" translate="yes" xml:space="preserve">
          <source>Note that this rule does not disallow assignments to read-only global variables. See &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; if you also want to disallow those assignments.</source>
          <target state="translated">このルールは、読み取り専用のグローバル変数への割り当てを許可しないことに注意してください。これらの割り当ても禁止する場合は、&lt;a href=&quot;no-global-assign&quot;&gt;no-global-assignを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a5a9767c41439a621031ba6529109fef573ecf23" translate="yes" xml:space="preserve">
          <source>Note that this rule does not enforce the usage of single-line statements in general. If you would like to disallow single-line statements, use the &lt;a href=&quot;curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; rule instead.</source>
          <target state="translated">この規則は、一般的に単一行ステートメントの使用を強制しないことに注意してください。1行のステートメントを許可しない場合は、代わりに&lt;a href=&quot;curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt;ルールを使用します。</target>
        </trans-unit>
        <trans-unit id="d826b4d17235a608a3c9cd20c92fa11e3d5d2e94" translate="yes" xml:space="preserve">
          <source>Note that this rule only enforces spacing within parentheses; it does not check spacing within curly or square brackets, but will enforce or disallow spacing of those brackets if and only if they are adjacent to an opening or closing parenthesis.</source>
          <target state="translated">この規則は括弧内のスペーシングのみを強制することに注意してください。 巻き括弧や角括弧内のスペーシングはチェックしませんが、それらの括弧が開括弧や閉括弧に隣接している場合にのみ、それらの括弧のスペーシングを強制したり禁止したりします。</target>
        </trans-unit>
        <trans-unit id="347d91e7a5b838e6bcb85cf66bf52f2d967e3ca1" translate="yes" xml:space="preserve">
          <source>Note that when using the &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;commonjs&lt;/code&gt; environments (or &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt;, if using the default parser), the top scope of a program is not actually the global scope, but rather a &quot;module&quot; scope. When this is the case, declaring a variable named after a builtin global is not a redeclaration, but rather a shadowing of the global variable. In that case, the &lt;a href=&quot;no-shadow&quot;&gt;&lt;code&gt;no-shadow&lt;/code&gt;&lt;/a&gt; rule with the &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option should be used.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; または &lt;code&gt;commonjs&lt;/code&gt; 環境（またはデフォルトのパーサーを使用する場合は &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt; ）を使用する場合、プログラムのトップスコープは実際にはグローバルスコープではなく、「モジュール」スコープであることに注意してください。この場合、組み込みグローバルにちなんで名前が付けられた変数を宣言することは、再宣言ではなく、グローバル変数のシャドウイングです。その場合、 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; オプションを使用した&lt;a href=&quot;no-shadow&quot;&gt; &lt;code&gt;no-shadow&lt;/code&gt; &lt;/a&gt;ルールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1125aced35499b31bb41c702c9945c7bd12e9b07" translate="yes" xml:space="preserve">
          <source>Note that you can leave off the &lt;code&gt;.js&lt;/code&gt; from the filename. In this way, you can add as many additional configs to your package as you'd like.</source>
          <target state="translated">ファイル名から &lt;code&gt;.js&lt;/code&gt; を省略できることに注意してください。このようにして、パッケージに必要な数だけ追加の構成を追加できます。</target>
        </trans-unit>
        <trans-unit id="76aa0f033fd5d1d41d32bcaf6fd648d73e33b956" translate="yes" xml:space="preserve">
          <source>Note that, as with core rules and plugin rules, you still need to enable the rules in configuration or via the &lt;code&gt;--rule&lt;/code&gt; CLI option in order to actually run those rules during linting. Specifying a rules directory with &lt;code&gt;--rulesdir&lt;/code&gt; does not automatically enable the rules within that directory.</source>
          <target state="translated">&lt;code&gt;--rule&lt;/code&gt; やプラグインルールと同様に、リンティング中にこれらのルールを実際に実行するには、構成でルールを有効にするか、-rule CLIオプションを使用する必要があります。 &lt;code&gt;--rulesdir&lt;/code&gt; でルールディレクトリを指定しても、そのディレクトリ内のルールが自動的に有効になるわけではありません。</target>
        </trans-unit>
        <trans-unit id="e9b6296c44a9bc30cef358e801b33c46b39d24f5" translate="yes" xml:space="preserve">
          <source>Note the use of a semicolon as the final part of this statement. There should be a space before and after the &lt;code&gt;while&lt;/code&gt; keyword.</source>
          <target state="translated">このステートメントの最後の部分としてセミコロンを使用していることに注意してください。 &lt;code&gt;while&lt;/code&gt; キーワードの前後にスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="cc6c88398cdded8def6acc02b6ff7133a562ee36" translate="yes" xml:space="preserve">
          <source>Note when using a custom parser, the &lt;code&gt;parserOptions&lt;/code&gt; configuration property is still required for ESLint to work properly with features not in ECMAScript 5 by default. Parsers are all passed &lt;code&gt;parserOptions&lt;/code&gt; and may or may not use them to determine which features to enable.</source>
          <target state="translated">カスタムパーサーを使用する場合、 &lt;code&gt;parserOptions&lt;/code&gt; がデフォルトでECMAScript 5にない機能を適切に動作させるには、parserOptions構成プロパティが引き続き必要です。パーサーにはすべて &lt;code&gt;parserOptions&lt;/code&gt; が渡され、それらを使用して、有効にする機能を決定する場合としない場合があります。</target>
        </trans-unit>
        <trans-unit id="50c39afa03191645dbc4d28c7d2359af7e538e42" translate="yes" xml:space="preserve">
          <source>Note: Currently &lt;code&gt;CLIEngine&lt;/code&gt; does not validate options passed to it, but may start doing so in the future.</source>
          <target state="translated">注：現在、 &lt;code&gt;CLIEngine&lt;/code&gt; は渡されたオプションを検証しませんが、将来的に検証を開始する可能性があります。</target>
        </trans-unit>
        <trans-unit id="984b1133cbe92feba750f10ab3475f0c23c1b51a" translate="yes" xml:space="preserve">
          <source>Note: For a rule preventing deletion of variables, see &lt;a href=&quot;no-delete-var&quot;&gt;no-delete-var instead&lt;/a&gt;</source>
          <target state="translated">注：変数の削除を防ぐルールについては、&lt;a href=&quot;no-delete-var&quot;&gt;代わりにno-delete-varを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="d25aa0b7adae8f5ed33576b5806bc8d4bbf49549" translate="yes" xml:space="preserve">
          <source>Note: Formatting for Terminals</source>
          <target state="translated">注:端末の書式設定</target>
        </trans-unit>
        <trans-unit id="be22f31f5831c296a952cd7a2998bc8d390f968e" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolons. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">注意:サジェスチョンは、マルチパス修正をトリガーすることなく、単独の変更として適用されます。各提案は、コード内の単一の変更に焦点を当てるべきであり、ユーザ定義のスタイルに準拠しようとするべきではありません。例えば、提案がコードベースに新しい文を追加する場合、正しいインデントに合わせようとしたり、セミコロンの有無に関するユーザの好みを確認したりしてはいけません。これらはすべて、ユーザが自動修正機能を起動したときにマルチパス自動修正機能で修正することができます。</target>
        </trans-unit>
        <trans-unit id="094162498ea0d1d13c56050f15e2107cd8551770" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolumns. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">注意:サジェスチョンは、マルチパス修正をトリガーすることなく、単独の変更として適用されます。各提案は、コード内の単一の変更に焦点を当てるべきであり、ユーザ定義のスタイルに準拠しようとするべきではありません。例えば、提案がコードベースに新しい文を追加する場合、正しいインデントに合わせようとしたり、セミカラムの有無に関するユーザの好みを確認しようとしたりしてはいけません。これらのことはすべて、ユーザが自動修正をトリガーしたときにマルチパス自動修正で修正できます。</target>
        </trans-unit>
        <trans-unit id="7a96d12cefbf530755a3476759379971f31c30b2" translate="yes" xml:space="preserve">
          <source>Note: This API is deprecated as of 4.0.0.</source>
          <target state="translated">注:このAPIは4.0.0.0時点で非推奨です。</target>
        </trans-unit>
        <trans-unit id="0f4d27cca8900b2f84cb2149ba7b39507829e56c" translate="yes" xml:space="preserve">
          <source>Note: this rule ignores async generator functions. This is because generators yield rather than return a value and async generators might yield all the values of another async generator without ever actually needing to use await.</source>
          <target state="translated">注意:このルールは非同期ジェネレータ関数を無視します。ジェネレータは値を返すのではなく、値を返すからです。非同期ジェネレータは、実際に await を使う必要がなくても、別の非同期ジェネレータのすべての値を返すかもしれないからです。</target>
        </trans-unit>
        <trans-unit id="24de5bcbd5c3607fa22b1b0d298fae9fdf45a3ea" translate="yes" xml:space="preserve">
          <source>Now here are ES6 equivalents:</source>
          <target state="translated">さて、ここでES6に相当するものを紹介します。</target>
        </trans-unit>
        <trans-unit id="87fe1cc3d574f9be3c85d698f90d866c75ac44a8" translate="yes" xml:space="preserve">
          <source>Now inside your &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</source>
          <target state="translated">今すぐあなたの内側 &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35e2195ff597916ba2ef234cdbb68bdf57b69342" translate="yes" xml:space="preserve">
          <source>Now inside your package you have &lt;code&gt;/lib/defaults.js&lt;/code&gt;, which contains:</source>
          <target state="translated">これで、パッケージ内に &lt;code&gt;/lib/defaults.js&lt;/code&gt; があり、これには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="4137e109ac15d620738ab61f944d78dc01861a63" translate="yes" xml:space="preserve">
          <source>Now it is very clear that three spaces are expected to be matched.</source>
          <target state="translated">これで、3つのスペースが一致することが予想されることが非常に明確になりました。</target>
        </trans-unit>
        <trans-unit id="5bca21c074e0d721a5fd90d89b255318c8ce0216" translate="yes" xml:space="preserve">
          <source>Now when you run &lt;code&gt;eslint&lt;/code&gt;, it will be running your local copy and showing your changes.</source>
          <target state="translated">&lt;code&gt;eslint&lt;/code&gt; を実行すると、ローカルコピーが実行され、変更が表示されます。</target>
        </trans-unit>
        <trans-unit id="57c585f4798ef4591adf413472a8e4f97e198bfd" translate="yes" xml:space="preserve">
          <source>Now you're ready to send the pull request. Go to your ESLint fork and then follow the &lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHub documentation&lt;/a&gt; on how to send a pull request.</source>
          <target state="translated">これでプルリクエストを送信する準備が整いました。ESLintフォークに移動し、プルリクエストの送信方法に関する&lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHubのドキュメント&lt;/a&gt;に従ってください。</target>
        </trans-unit>
        <trans-unit id="20482a66574043c6f07e88950af557ca9ba4cb34" translate="yes" xml:space="preserve">
          <source>Now, consider the following group configuration: &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt;. There are 2 groups specified in this configuration: bitwise operators and logical operators. This rule checks if the operators belong to the same group only. In this case, this rule checks if bitwise operators and logical operators are mixed, but ignores all other operators.</source>
          <target state="translated">ここで、次のグループ構成を検討してください： &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt; 。この構成では、ビット演算子と論理演算子の2つのグループが指定されています。このルールは、オペレーターが同じグループにのみ属しているかどうかをチェックします。この場合、このルールはビット演算子と論理演算子が混在しているかどうかをチェックしますが、他のすべての演算子は無視します。</target>
        </trans-unit>
        <trans-unit id="b4992572eba9e898e29cdb06f84784a8f96e8a75" translate="yes" xml:space="preserve">
          <source>Now, the remote &lt;code&gt;upstream&lt;/code&gt; points to the upstream source.</source>
          <target state="translated">これで、リモート &lt;code&gt;upstream&lt;/code&gt; はアップストリームソースをポイントします。</target>
        </trans-unit>
        <trans-unit id="8dad4f5a3bcf9c3bffdb2bf8a3903f51188938d6" translate="yes" xml:space="preserve">
          <source>Now, those variables and references have correct values in these properties.</source>
          <target state="translated">これで、これらの変数と参照は、これらのプロパティで正しい値を持つようになりました。</target>
        </trans-unit>
        <trans-unit id="b69cceaa39cc9827d135c31a0a311643f64c4242" translate="yes" xml:space="preserve">
          <source>Numbers should be written as decimal integers, e-notation integers, hexadecimal integers or floating-point decimals with at least one digit before and one digit after the decimal point. Never use octal literals.</source>
          <target state="translated">数字は、10進数の整数、e-ノテーションの整数、16進数の整数、または浮動小数点の小数で、小数点の前に少なくとも1桁、小数点の後に少なくとも1桁の数字を書く必要があります。8進数リテラルは絶対に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="afb8e044bcdc5720b645f5bad798ce2422b144b7" translate="yes" xml:space="preserve">
          <source>Object Getters</source>
          <target state="translated">オブジェクトゲッター</target>
        </trans-unit>
        <trans-unit id="bff5a67a67ce40c0fd925410f2eb22f8e622ed24" translate="yes" xml:space="preserve">
          <source>Object Literals</source>
          <target state="translated">オブジェクトリテラル</target>
        </trans-unit>
        <trans-unit id="8c039bd2c30b64d60bbf9c614cffee3af09daea6" translate="yes" xml:space="preserve">
          <source>Object Rest/Spread Properties for ECMAScript</source>
          <target state="translated">ECMAScript のオブジェクトレスト/スプレッドプロパティ</target>
        </trans-unit>
        <trans-unit id="5b78ac9af4a56a7e0611f75dde6336ad4efc93cf" translate="yes" xml:space="preserve">
          <source>Object Setters</source>
          <target state="translated">オブジェクトセッター</target>
        </trans-unit>
        <trans-unit id="4671b195767e872ed26e93314009bf9a02b4925b" translate="yes" xml:space="preserve">
          <source>Object initializer - MDN</source>
          <target state="translated">オブジェクトのイニシャライザ-MDN</target>
        </trans-unit>
        <trans-unit id="ffa631f7811b9675c18511c35ebd3c5888d3c693" translate="yes" xml:space="preserve">
          <source>Object literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:</source>
          <target state="translated">オブジェクトリテラルのプロパティ名は、リテラルを使用する方法と文字列を使用する方法の2つの方法で定義することができます。例えば、これら2つのオブジェクトは等価です。</target>
        </trans-unit>
        <trans-unit id="01a531c72bfc336c6dd4074ad4379fdce5371193" translate="yes" xml:space="preserve">
          <source>Object literals should have the following format:</source>
          <target state="translated">オブジェクトリテラルは、以下の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="593c1a9b247ae9203d0656b7697e245c92cca212" translate="yes" xml:space="preserve">
          <source>Object literals.</source>
          <target state="translated">オブジェクトリテラル。</target>
        </trans-unit>
        <trans-unit id="d0906ffdbaac63ebcdad566357ec1fa32b660ce9" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;always&quot;&lt;/code&gt;):</source>
          <target state="translated">オブジェクトオプション（ &lt;code&gt;&quot;always&quot;&lt;/code&gt; 場合）：</target>
        </trans-unit>
        <trans-unit id="ac9c86f6b8a7b6cb8ef56a7d1efe7d9ef0bb7e18" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;never&quot;&lt;/code&gt;):</source>
          <target state="translated">オブジェクトオプション（ &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合）：</target>
        </trans-unit>
        <trans-unit id="f8eb5265b464019bacbbf51d8d1ff30364921024" translate="yes" xml:space="preserve">
          <source>Object option:</source>
          <target state="translated">オブジェクトオプション。</target>
        </trans-unit>
        <trans-unit id="149ecb5e6d435ef3f0c0b95567c172606e31d857" translate="yes" xml:space="preserve">
          <source>Object properties follow the same naming conventions as variables. Object methods follow the same naming conventions as functions. If a property or method is meant to be private, then it should be prefixed with an underscore character.</source>
          <target state="translated">オブジェクトのプロパティは、変数と同じ命名規則に従います。オブジェクトのメソッドは、関数と同じ命名規則に従います。プロパティやメソッドがプライベートであることを意味する場合は、プレフィックスにアンダースコアを付けなければなりません。</target>
        </trans-unit>
        <trans-unit id="07cc26cad16fa208535abacfadeea81f2c8f08d7" translate="yes" xml:space="preserve">
          <source>Object properties for variants of the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; オプションのバリアントのオブジェクトプロパティ：</target>
        </trans-unit>
        <trans-unit id="c4dfaa986b5d14c627c83c972171a7941c5b7be6" translate="yes" xml:space="preserve">
          <source>Object rest/spread is now an official part of the JavaScript language, so our support for it is no longer experimental. In both ESLint v4 and ESLint v5, object rest/spread can now be enabled with the &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; option:</source>
          <target state="translated">オブジェクトのレスト/スプレッドは、JavaScript言語の公式部分になりました。そのため、サポートはまだ実験段階ではありません。ESLint v4とESLint v5の両方で、 &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; オプションを使用してオブジェクトのレスト/スプレッドを有効にできるようになりました。</target>
        </trans-unit>
        <trans-unit id="11a92c8196539fdab3857b1551dea0f331c775a8" translate="yes" xml:space="preserve">
          <source>Object.getPrototypeOf</source>
          <target state="translated">Object.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="fa8ae9f7df131e038e636e584d189c8515f58a8c" translate="yes" xml:space="preserve">
          <source>ObjectExpression</source>
          <target state="translated">ObjectExpression</target>
        </trans-unit>
        <trans-unit id="793061db282a75e8ed5dcc678e2f977602f536e5" translate="yes" xml:space="preserve">
          <source>ObjectExpression and ObjectPattern</source>
          <target state="translated">オブジェクト式とオブジェクトパターン</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="79c19740aba487d5c36feef2d71ebeab770748e7" translate="yes" xml:space="preserve">
          <source>Occasionally, a core ESLint rule needs to be changed. This is not necessarily a bug, but rather, an enhancement that makes a rule more configurable. In those situations, we will consider making changes to rules.</source>
          <target state="translated">時々、ESLintのコアルールを変更する必要があります。これは必ずしもバグではなく、ルールをより設定しやすくするための機能強化です。そのような状況では、ルールの変更を検討します。</target>
        </trans-unit>
        <trans-unit id="503c1e8b34ff2b306e45ab8d949857759bce53e9" translate="yes" xml:space="preserve">
          <source>Octal literals are numerals that begin with a leading zero, such as:</source>
          <target state="translated">八進数リテラルとは、例えば、先頭のゼロから始まる数字のことです。</target>
        </trans-unit>
        <trans-unit id="5270a8f48af0485d13759bcff94f40182ae7fbe6" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces around keywords.</source>
          <target state="translated">もちろん、キーワードの周りにスペースを入れないようにするスタイルガイドもあります。</target>
        </trans-unit>
        <trans-unit id="1125ca598816239bf6b761a79b64ee161ec9a9d7" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces before keywords.</source>
          <target state="translated">もちろん、キーワードの前にスペースを入れないスタイルガイドもあります。</target>
        </trans-unit>
        <trans-unit id="c141537fefa1f7236bb95371a0c1823cf3d5a82a" translate="yes" xml:space="preserve">
          <source>Of particular note is that like &lt;code&gt;.gitignore&lt;/code&gt; files, all paths used as patterns for both &lt;code&gt;.eslintignore&lt;/code&gt; and &lt;code&gt;--ignore-pattern&lt;/code&gt; must use forward slashes as their path separators.</source>
          <target state="translated">特に注目すべきは、 &lt;code&gt;.gitignore&lt;/code&gt; ファイルと同様に、 &lt;code&gt;.eslintignore&lt;/code&gt; と &lt;code&gt;--ignore-pattern&lt;/code&gt; の両方のパターンとして使用されるすべてのパスは、パスの区切り文字としてスラッシュを使用する必要があることです。</target>
        </trans-unit>
        <trans-unit id="051c540be9962a7623f661578a805c175aaad210" translate="yes" xml:space="preserve">
          <source>On a separate line, describing the code beneath it.</source>
          <target state="translated">別の行で、その下のコードを記述します。</target>
        </trans-unit>
        <trans-unit id="41a98baf04faa90e085c1d5b39d3f2303b09a371" translate="yes" xml:space="preserve">
          <source>On multiple lines, to comment out sections of code.</source>
          <target state="translated">複数行で、コードのセクションをコメントアウトします。</target>
        </trans-unit>
        <trans-unit id="dd6bc408351897c37ede1ee1ad09032dd8381b52" translate="yes" xml:space="preserve">
          <source>On the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.</source>
          <target state="translated">最初の行では、JavaScriptエンジンは自動的にセミコロンを挿入するので、これは構文エラーとはみなされません。JavaScriptエンジンはまだその行を解釈する方法を知っており、行末が文の終わりを示していることを知っています。</target>
        </trans-unit>
        <trans-unit id="be62b8888255b7d5db97a2146275b0a473a3cd7f" translate="yes" xml:space="preserve">
          <source>On the other hand, if the code is targeting only ES5-compliant environments passing the radix &lt;code&gt;10&lt;/code&gt; may be redundant. In such a case you might want to disallow using such a radix.</source>
          <target state="translated">一方、コードがES5準拠の環境のみを対象にしている場合、基数 &lt;code&gt;10&lt;/code&gt; を渡すことは冗長になる可能性があります。そのような場合、そのような基数の使用を禁止することができます。</target>
        </trans-unit>
        <trans-unit id="54325008781cc6962735603ca0f94ac6486bda16" translate="yes" xml:space="preserve">
          <source>On the other side of the argument are those who say that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:</source>
          <target state="translated">反対に、セミコロンは自動的に挿入されるので、セミコロンは任意であり、手動で挿入する必要はないという意見もあります。しかし、ASIの仕組みはセミコロンを使わない人にとっても厄介なものです。例えば、次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="96134602d9113347d1bc859098545b8dd3e69676" translate="yes" xml:space="preserve">
          <source>Once again, the intent here is to show that the developer intended for there to be no default behavior.</source>
          <target state="translated">繰り返しになりますが、ここでの意図は、開発者がデフォルトの動作がないことを意図していることを示すことです。</target>
        </trans-unit>
        <trans-unit id="c1de3fc4cbdd3e50999095504fb8e328eb84c3d2" translate="yes" xml:space="preserve">
          <source>Once npm is installed, run the following</source>
          <target state="translated">npmをインストールしたら、次のように実行します。</target>
        </trans-unit>
        <trans-unit id="c04fc496076254cace10e1520cd55bfc500cbbe1" translate="yes" xml:space="preserve">
          <source>Once the AST is available, &lt;code&gt;estraverse&lt;/code&gt; is used to traverse the AST from top to bottom. At each node, the &lt;code&gt;Linter&lt;/code&gt; object emits an event that has the same name as the node type (i.e., &quot;Identifier&quot;, &quot;WithStatement&quot;, etc.). On the way back up the subtree, an event is emitted with the AST type name and suffixed with &quot;:exit&quot;, such as &quot;Identifier:exit&quot; - this allows rules to take action both on the way down and on the way up in the traversal. Each event is emitted with the appropriate AST node available.</source>
          <target state="translated">ASTが利用可能になると、 &lt;code&gt;estraverse&lt;/code&gt; を使用してASTを上から下にトラバースします。各ノードで、 &lt;code&gt;Linter&lt;/code&gt; オブジェクトはノードタイプと同じ名前（つまり、「識別子」、「WithStatement」など）を持つイベントを発行します。サブツリーに戻る途中で、イベントはASTタイプ名と &quot;：exit&quot;のサフィックスが付いたイベント（ &quot;Identifier：exit&quot;など）で発行されます-これにより、ルールは下りと上りの両方でアクションを実行できますトラバーサル。各イベントは、使用可能な適切なASTノードとともに発行されます。</target>
        </trans-unit>
        <trans-unit id="64e40e04906a03b72ac5f6ed6329c5032886299c" translate="yes" xml:space="preserve">
          <source>Once you get a report object, it's up to you to determine how to output the results. Fixes will not be automatically applied to the files, even if you set &lt;code&gt;fix: true&lt;/code&gt; when constructing the &lt;code&gt;CLIEngine&lt;/code&gt; instance. To apply fixes to the files, call &lt;a href=&quot;#cliengineoutputfixes&quot;&gt;&lt;code&gt;outputFixes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">レポートオブジェクトを取得したら、結果を出力する方法を決定する必要があります。 &lt;code&gt;CLIEngine&lt;/code&gt; インスタンスの構築時に &lt;code&gt;fix: true&lt;/code&gt; を設定しても、修正はファイルに自動的に適用されません。ファイルに修正を適用するには、&lt;a href=&quot;#cliengineoutputfixes&quot;&gt; &lt;code&gt;outputFixes&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="b58e4b61287e965d92e76370ea203cbb83aba778" translate="yes" xml:space="preserve">
          <source>Once you have a local copy and have Node.JS and npm installed, you'll need to install the ESLint dependencies:</source>
          <target state="translated">ローカルコピーを用意し、Node.JSとnpmをインストールしたら、ESLintの依存関係をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="e7288581c9fd0f9fb86a36a0098329661fafddf0" translate="yes" xml:space="preserve">
          <source>Once you have an instance of &lt;code&gt;SourceCode&lt;/code&gt;, you can use the methods on it to work with the code:</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; のインスタンスを取得したら、そのインスタンスのメソッドを使用してコードを操作できます。</target>
        </trans-unit>
        <trans-unit id="c35dc0ae3fcf2f907c56b8a61b2d1c1013797195" translate="yes" xml:space="preserve">
          <source>Once you have the configuration information, you can pass it into the &lt;code&gt;linter&lt;/code&gt; object:</source>
          <target state="translated">構成情報を取得したら、それを &lt;code&gt;linter&lt;/code&gt; オブジェクトに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b5819a1bbc0e4af2eebf7583e7e5176671549350" translate="yes" xml:space="preserve">
          <source>Once you have your development environment installed, you can make and submit changes to the ESLint source files. Doing this successfully requires careful adherence to our &lt;a href=&quot;contributing/pull-requests&quot;&gt;pull-request submission workflow&lt;/a&gt;.</source>
          <target state="translated">開発環境をインストールしたら、ESLintソースファイルに変更を加えて送信できます。これを正常に行うには、&lt;a href=&quot;contributing/pull-requests&quot;&gt;プルリクエスト送信ワークフローを&lt;/a&gt;注意深く遵守する必要があります。</target>
        </trans-unit>
        <trans-unit id="df1fc06bd4ba0916a355e415a08d9ac385fc744f" translate="yes" xml:space="preserve">
          <source>Once you've cloned the repository, run &lt;code&gt;npm install&lt;/code&gt; to get all the necessary dependencies:</source>
          <target state="translated">リポジトリのクローンを作成したら、 &lt;code&gt;npm install&lt;/code&gt; を実行して、必要なすべての依存関係を取得します。</target>
        </trans-unit>
        <trans-unit id="a952bd0499233ed62352245dbdd816bb714cb93a" translate="yes" xml:space="preserve">
          <source>Once you've got ESLint running, you'll probably want to adjust the configuration to better suit your project. This section explains all the different ways you can configure ESLint.</source>
          <target state="translated">ESLintを起動したら、あなたのプロジェクトに合わせて設定を調整することになるでしょう。このセクションではESLintの設定方法を説明します。</target>
        </trans-unit>
        <trans-unit id="80320c8df4e958c73560fc248b42aa546a052559" translate="yes" xml:space="preserve">
          <source>Once you've made changes that you want to share with the community, the next step is to submit those changes back via a pull request.</source>
          <target state="translated">コミュニティで共有したい変更を行ったら、次のステップでは、プルリクエストを使って変更内容を提出します。</target>
        </trans-unit>
        <trans-unit id="73e73f412681c6b3c636b32c5dd0a954ee56c9f0" translate="yes" xml:space="preserve">
          <source>Once your pull request is sent, it's time for the team to review it. As such, please make sure to:</source>
          <target state="translated">プルリクエストが送信されたら、チームがそれをレビューする時間です。そのため、以下のようにしてください。</target>
        </trans-unit>
        <trans-unit id="461bb8bc5f902440c44a097ed81d4ff591b9129d" translate="yes" xml:space="preserve">
          <source>Once your shareable config is ready, you can &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;publish to npm&lt;/a&gt; to share with others. We recommend using the &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;eslintconfig&lt;/code&gt; keywords so others can easily find your module.</source>
          <target state="translated">共有可能な構成の準備ができたら、&lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;npm&lt;/a&gt;に公開して他のユーザーと共有できます。 &lt;code&gt;eslint&lt;/code&gt; および &lt;code&gt;eslintconfig&lt;/code&gt; キーワードを使用して、他の人が簡単にモジュールを見つけられるようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="968cb18b99b4f357f4169659789d6d35558a5b6b" translate="yes" xml:space="preserve">
          <source>One blank line should always be used in the following circumstances:</source>
          <target state="translated">以下のような場合は、必ず空欄1行を使用してください。</target>
        </trans-unit>
        <trans-unit id="6e05f3f48106cca4c55183384c239e9f6781eecf" translate="yes" xml:space="preserve">
          <source>One common variant of one true brace style is called Stroustrup, in which the &lt;code&gt;else&lt;/code&gt; statements in an &lt;code&gt;if-else&lt;/code&gt; construct, as well as &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt;, must be on its own line after the preceding closing brace. For example:</source>
          <target state="translated">1つの真のブレーススタイルの1つの一般的なバリアントはStroustrupと呼ばれます。この &lt;code&gt;if-else&lt;/code&gt; 、if-else構文の &lt;code&gt;else&lt;/code&gt; ステートメントと &lt;code&gt;catch&lt;/code&gt; および &lt;code&gt;finally&lt;/code&gt; は、前の右中括弧の後に独自の行になければなりません。例えば：</target>
        </trans-unit>
        <trans-unit id="074902a0b6265654f7818885f2c699f282da2808" translate="yes" xml:space="preserve">
          <source>One key is &lt;code&gt;VariableDeclarator&lt;/code&gt; and the other is &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to control the destructuring requirement for each of those types independently. Each property accepts an object that accepts two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to control the destructuring requirement for each of &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; independently for variable declarations and assignment expressions. By default, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; are set to true for both &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;.</source>
          <target state="translated">1つのキーは &lt;code&gt;VariableDeclarator&lt;/code&gt; で、もう1つは &lt;code&gt;AssignmentExpression&lt;/code&gt; です。これを使用して、これらの各タイプの個別化の要件を個別に制御できます。各プロパティは、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 2つのプロパティを受け入れるオブジェクトを受け入れます。これを使用して、変数の宣言と代入式に対して、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; それぞれの破壊要件を個別に制御できます。デフォルトでは、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; は、 &lt;code&gt;VariableDeclarator&lt;/code&gt; と &lt;code&gt;AssignmentExpression&lt;/code&gt; の両方でtrueに設定されています。</target>
        </trans-unit>
        <trans-unit id="7b40cc8090e56f00ece04fc448cb76c1a5545421" translate="yes" xml:space="preserve">
          <source>One of benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">このオプションの利点の1つは、条件式で矢印関数を誤って使用しないようにすることです。</target>
        </trans-unit>
        <trans-unit id="91d4f19646312c60afdd6cb23f93395bc802b054" translate="yes" xml:space="preserve">
          <source>One of the benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">このオプションの利点の1つは、条件式で矢印関数を誤って使用しないようにすることです。</target>
        </trans-unit>
        <trans-unit id="93a084e0710ce98d42a3b6895d5f4238168d8a76" translate="yes" xml:space="preserve">
          <source>One of the great things about open source projects is that anyone can contribute in any number of meaningful ways. ESLint couldn't exist without the help of the many contributors it's had since the project began, and we want you to feel like you can contribute and make a difference as well.</source>
          <target state="translated">オープンソースプロジェクトの素晴らしい点の一つは、誰もが意味のある方法で貢献できることです。プロジェクトが始まって以来、多くの貢献者の助けがなければESLintは存在できませんでした。</target>
        </trans-unit>
        <trans-unit id="8fe321b030cabb7b6a56d2b3c7ba46379fd8d541" translate="yes" xml:space="preserve">
          <source>One of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a &lt;code&gt;return&lt;/code&gt; statement. For example:</source>
          <target state="translated">JavaScriptの興味深い、そして時には混乱を招く側面の1つは、ほとんどすべての時点で割り当てが発生する可能性があることです。このため、真の意図が比較を行うことであった場合に、誤った等号が割り当てを引き起こす可能性があります。これは、特に &lt;code&gt;return&lt;/code&gt; ステートメントを使用する場合に当てはまります。例えば：</target>
        </trans-unit>
        <trans-unit id="dc2c724cf22353a00eb4d8e0b5ec68baf78eb5ec" translate="yes" xml:space="preserve">
          <source>One of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.</source>
          <target state="translated">カンマ・ファースト・スタイルを使用する正当な理由の一つは、カンマの欠落や末尾のカンマを追跡するのに役立つということです。変数宣言のカンマの欠落はグローバル変数の漏洩につながり、末尾のカンマは古いバージョンのIEではエラーにつながる可能性があるため、これらは問題です。</target>
        </trans-unit>
        <trans-unit id="43739dc5f4290e33b069d3cbfc858a0190a0b218" translate="yes" xml:space="preserve">
          <source>One way to fix this issue would be to ensure that &lt;code&gt;totalLength&lt;/code&gt; is read at the same time as it's updated, like this:</source>
          <target state="translated">この問題を修正する1つの方法は、 &lt;code&gt;totalLength&lt;/code&gt; ように、totalLengthが更新と同時に読み取られるようにすることです。</target>
        </trans-unit>
        <trans-unit id="82d457ac979b2d749bfa1fff14b37ecb16e90d1f" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;return&lt;/code&gt; without a value is allowed, as it's a control flow statement.</source>
          <target state="translated">制御フローステートメントであるため、値なしでの &lt;code&gt;return&lt;/code&gt; のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="865b1b6e5f709be37accdd161c63ae845508b783" translate="yes" xml:space="preserve">
          <source>Only make one fix per message. This is enforced because you must return the result of the fixer operation from &lt;code&gt;fix()&lt;/code&gt;.</source>
          <target state="translated">メッセージごとに1つの修正のみを行います。 &lt;code&gt;fix()&lt;/code&gt; からフィクサー操作の結果を返す必要があるため、これが強制されます。</target>
        </trans-unit>
        <trans-unit id="651a50a7f66b3213d4ddbca3f4a04a538e94dae9" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;Property&lt;/code&gt; node type is ignored by default, because for the &lt;a href=&quot;key-spacing&quot;&gt;key-spacing&lt;/a&gt; rule some alignment options require multiple spaces in properties of object literals.</source>
          <target state="translated">&lt;a href=&quot;key-spacing&quot;&gt;キー間隔&lt;/a&gt;ルールの場合、一部の配置オプションではオブジェクトリテラルのプロパティに複数のスペースが必要になるため、デフォルトでは &lt;code&gt;Property&lt;/code&gt; ノードタイプのみが無視されます。</target>
        </trans-unit>
        <trans-unit id="29e0482fd1761fdd60ab2cbaa6f30278bf01c57e" translate="yes" xml:space="preserve">
          <source>Open up developer tools</source>
          <target state="translated">開発者ツールを開く</target>
        </trans-unit>
        <trans-unit id="528fa3274e8f2faac58c536989703b2a7691898b" translate="yes" xml:space="preserve">
          <source>Operator Spacing</source>
          <target state="translated">オペレータの間隔</target>
        </trans-unit>
        <trans-unit id="f31ac1bc0518dff16e20d2bee973046b839b0d11" translate="yes" xml:space="preserve">
          <source>Operators with two operands must be preceded and followed by a single space to make the expression clear. Operators include assignments and logical operators.</source>
          <target state="translated">2つのオペランドを持つ演算子の前には、式を明確にするためにスペースを1つ入れなければなりません。演算子には、代入演算子と論理演算子があります。</target>
        </trans-unit>
        <trans-unit id="5cf9f8318f166d81f0832974953640e35cb76c75" translate="yes" xml:space="preserve">
          <source>Opponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn't outweigh the readability hit the code takes while using Yoda conditions.</source>
          <target state="translated">ヨーダ条件の反対者は、ツールが &lt;code&gt;==&lt;/code&gt; の代わりに &lt;code&gt;=&lt;/code&gt; の誤った使用をキャッチするため（ESLintがこれをキャッチするため）、ツールによってプログラマーが改善されたと指摘しています。したがって、パターンの有用性は、ヨーダ条件を使用しているときにコードが読み取る可読性を上回らないと主張しています。</target>
        </trans-unit>
        <trans-unit id="cc2f1a7f94147f105a8901b8c9bb3f24406fa1ff" translate="yes" xml:space="preserve">
          <source>Optional Exception</source>
          <target state="translated">オプションの例外</target>
        </trans-unit>
        <trans-unit id="a89a55547173e68a8fb3ba71bad23165f06ceb9e" translate="yes" xml:space="preserve">
          <source>Optional. If &lt;code&gt;true&lt;/code&gt; is present and the &lt;code&gt;options.filePath&lt;/code&gt; is a file ESLint should ignore, this method returns a lint result contains a warning message.</source>
          <target state="translated">オプション。場合は &lt;code&gt;true&lt;/code&gt; 存在し、 &lt;code&gt;options.filePath&lt;/code&gt; がESLintは無視すべきファイルで、この方法では、糸くずの結果は、警告メッセージが含まれて返されます。</target>
        </trans-unit>
        <trans-unit id="f8431df7be1c6293b85fd6c46fb7d73eae65d45c" translate="yes" xml:space="preserve">
          <source>Optional. The path to the file of the source code text. If omitted, the &lt;code&gt;result.filePath&lt;/code&gt; becomes the string &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">オプション。ソースコードテキストのファイルへのパス。省略した場合、 &lt;code&gt;result.filePath&lt;/code&gt; は文字列 &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="4f2085951383e2cdbc090c9683b06731c8ef7ac4" translate="yes" xml:space="preserve">
          <source>Optionally, this rule can also enforce consistent order (&lt;code&gt;getBeforeSet&lt;/code&gt; or &lt;code&gt;setBeforeGet&lt;/code&gt;).</source>
          <target state="translated">オプションで、このルールは一貫した順序を適用することもできます（ &lt;code&gt;getBeforeSet&lt;/code&gt; または &lt;code&gt;setBeforeGet&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3f583032cbdd550a2873302394f975358318e3c2" translate="yes" xml:space="preserve">
          <source>Optionally, you may specify a &lt;code&gt;max&lt;/code&gt; object property:</source>
          <target state="translated">オプションで、 &lt;code&gt;max&lt;/code&gt; オブジェクトプロパティを指定できます。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="babf5970a0d99737bb086b6569f51b231437e499" translate="yes" xml:space="preserve">
          <source>Options Schemas</source>
          <target state="translated">オプションスキーマ</target>
        </trans-unit>
        <trans-unit id="125e188e5c535aba49305bcd42d96422853718e3" translate="yes" xml:space="preserve">
          <source>Options that accept array values can be specified by repeating the option or with a comma-delimited list (other than &lt;code&gt;--ignore-pattern&lt;/code&gt; which does not allow the second style).</source>
          <target state="translated">配列の値を受け入れるオプションは、オプションを繰り返すか、コンマ区切りのリストを使用して指定できます（2番目のスタイルを許可しない &lt;code&gt;--ignore-pattern&lt;/code&gt; を除く）。</target>
        </trans-unit>
        <trans-unit id="cc6d4354c518051842952b8b24cff75c301ac9bd" translate="yes" xml:space="preserve">
          <source>Or an object option (Requires line breaks if any of properties is satisfied. Otherwise, disallows line breaks):</source>
          <target state="translated">またはオブジェクトオプシ ョ ン (いずれかのプ ロ パテ ィ が満たされていれば改行が必要です。それ以外の場合は改行を無効にします)。</target>
        </trans-unit>
        <trans-unit id="48fb5dcfee6b391a00a0d645f582f3d72542e395" translate="yes" xml:space="preserve">
          <source>Or an object option:</source>
          <target state="translated">またはオブジェクトオプション。</target>
        </trans-unit>
        <trans-unit id="8e04bc60d27598107203a60a335ed572e88264d3" translate="yes" xml:space="preserve">
          <source>Or for non-iterable 'array-like' objects:</source>
          <target state="translated">あるいは、文字化不可能な「配列のような」オブジェクトのために。</target>
        </trans-unit>
        <trans-unit id="8b117f5f38fcd06ba55849762c28b3c6a4df0d38" translate="yes" xml:space="preserve">
          <source>Or for tabbed indentation:</source>
          <target state="translated">または、タブ付きインデントの場合。</target>
        </trans-unit>
        <trans-unit id="534b36ed6d3baf1cd0fb88cab59bd33364f67414" translate="yes" xml:space="preserve">
          <source>Or in a &lt;code&gt;package.json&lt;/code&gt; file</source>
          <target state="translated">または &lt;code&gt;package.json&lt;/code&gt; ファイルで</target>
        </trans-unit>
        <trans-unit id="983504f1db047b4a14f090593364eea27f5c86b0" translate="yes" xml:space="preserve">
          <source>Or you can enforce that calls to &lt;code&gt;setTimeout&lt;/code&gt; always have two arguments:</source>
          <target state="translated">または、 &lt;code&gt;setTimeout&lt;/code&gt; の呼び出しに常に2つの引数があることを強制できます。</target>
        </trans-unit>
        <trans-unit id="2349626c15ba88b850dda985180df347efff61da" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;Variable&lt;/code&gt; objects and &lt;code&gt;Reference&lt;/code&gt; objects refer each other:</source>
          <target state="translated">元々、 &lt;code&gt;Variable&lt;/code&gt; オブジェクトと &lt;code&gt;Reference&lt;/code&gt; オブジェクトは相互に参照しています。</target>
        </trans-unit>
        <trans-unit id="0c7f2d70c0ac6c087885c2e18648286544190997" translate="yes" xml:space="preserve">
          <source>Other Integration Lists</source>
          <target state="translated">その他の統合リスト</target>
        </trans-unit>
        <trans-unit id="121423f7955be6f99034dbe35e9109d534d3bb31" translate="yes" xml:space="preserve">
          <source>Other code conventions allow you to skip the &lt;code&gt;default&lt;/code&gt; case so long as there is a comment indicating the omission is intentional, such as:</source>
          <target state="translated">以下のように、省略が意図的なものであることを示すコメントがある限り、他のコード規則では &lt;code&gt;default&lt;/code&gt; ケースをスキップできます。</target>
        </trans-unit>
        <trans-unit id="c413664d095ba6eda32b2e5180bd3f63ad775b0e" translate="yes" xml:space="preserve">
          <source>Others prefer to declare one var per line.</source>
          <target state="translated">1 行に 1 つの var を宣言することを好む人もいます。</target>
        </trans-unit>
        <trans-unit id="777e3867f41cdcbbc95d8a27831735e4439631d1" translate="yes" xml:space="preserve">
          <source>Otherwise are considered problems.</source>
          <target state="translated">それ以外は問題視されています。</target>
        </trans-unit>
        <trans-unit id="8f226c4b9fa003489fea8332ce25c85c4ade2f50" translate="yes" xml:space="preserve">
          <source>Otherwise the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option. Note that if &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; is explicitly specified in the configuration, the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option will correspond to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option regardless of the specified environment.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;&quot;safe&quot;&lt;/code&gt; オプションは &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションに対応します。 &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; が構成で明示的に指定されている場合、 &lt;code&gt;&quot;safe&quot;&lt;/code&gt; オプションは、指定された環境に関係なく &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションに対応することに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b2741d82e791a60bad1a8621fcdbf97b20d60b3" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;RuleTester#run&lt;/code&gt; will simply execute all of the tests in sequence, and will throw an error if one of them fails. This means you can simply execute a test file that calls &lt;code&gt;RuleTester.run&lt;/code&gt; using &lt;code&gt;node&lt;/code&gt;, without needing a testing framework.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;RuleTester#run&lt;/code&gt; は単純にすべてのテストを順番に実行し、テストの1つが失敗するとエラーをスローします。この手段は、単に呼び出してテストファイルを実行することができます &lt;code&gt;RuleTester.run&lt;/code&gt; を使用して &lt;code&gt;node&lt;/code&gt; テストフレームワークを必要とせずに、。</target>
        </trans-unit>
        <trans-unit id="da453deb49d685f98fdc9eee6730a3db89861b4f" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; are present as globals, &lt;code&gt;RuleTester&lt;/code&gt; will use &lt;code&gt;global.describe&lt;/code&gt; and &lt;code&gt;global.it&lt;/code&gt; to run tests. This allows &lt;code&gt;RuleTester&lt;/code&gt; to work when using frameworks like &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; without any additional configuration.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;describe&lt;/code&gt; 、 &lt;code&gt;it&lt;/code&gt; がグローバルとして存在する場合、 &lt;code&gt;RuleTester&lt;/code&gt; は &lt;code&gt;global.describe&lt;/code&gt; および &lt;code&gt;global.it&lt;/code&gt; を使用してテストを実行します。これにより、追加設定なしで&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;などのフレームワークを使用するときに &lt;code&gt;RuleTester&lt;/code&gt; が機能します。</target>
        </trans-unit>
        <trans-unit id="f111dde36a2183fb8b31d84bb35478c7ad28ae40" translate="yes" xml:space="preserve">
          <source>Otherwise, if the node does not declare any variables, an empty array is returned.</source>
          <target state="translated">そうでなければ、ノードが変数を宣言していない場合、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="112f84fde1efd0a6b137f4ef4aeed3c549b08bd5" translate="yes" xml:space="preserve">
          <source>Our commit message format is as follows:</source>
          <target state="translated">コミットメッセージのフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="874ef7e39663f7db82348ed922daa965002f8637" translate="yes" xml:space="preserve">
          <source>Our public &lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;issues tracker&lt;/a&gt; lists all of the things we plan on doing as well as suggestions from the community. Before starting to work on an issue, be sure you read through the rest of this page.</source>
          <target state="translated">私たちの公開&lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;問題トラッカー&lt;/a&gt;は、私たちが計画しているすべてのことやコミュニティからの提案を一覧表示します。問題に取り掛かる前に、このページの残りの部分を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="50d578ebf4e00d8649eb4f95a59bf792edcd3b16" translate="yes" xml:space="preserve">
          <source>Output Examples</source>
          <target state="translated">出力例</target>
        </trans-unit>
        <trans-unit id="f721699fc008a02ac10d406435648374991b8df2" translate="yes" xml:space="preserve">
          <source>Output object from this method:</source>
          <target state="translated">このメソッドからの出力オブジェクト。</target>
        </trans-unit>
        <trans-unit id="2ae3c877f13160bf4fb915afd2aa35c94e464b88" translate="yes" xml:space="preserve">
          <source>Output to the console</source>
          <target state="translated">コンソールへの出力</target>
        </trans-unit>
        <trans-unit id="afb6b4b6cae2618f58f61a3533c0fccfc233090f" translate="yes" xml:space="preserve">
          <source>Outputting to the console</source>
          <target state="translated">コンソールへの出力</target>
        </trans-unit>
        <trans-unit id="afdf6e15c0ce33e13907329dd18f3fa61951053c" translate="yes" xml:space="preserve">
          <source>Outputting to the filesystem</source>
          <target state="translated">ファイルシステムへの出力</target>
        </trans-unit>
        <trans-unit id="744acdca9924738f6ba20a057659f4dab8956cfb" translate="yes" xml:space="preserve">
          <source>Over the past several releases, we have been deprecating rules and introducing new rules to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">過去数回のリリースの間に、ルールを非推奨にし、その代わりに新しいルールを導入してきました。以下は、削除されたルールとその代替ルールのリストです。</target>
        </trans-unit>
        <trans-unit id="f15e25b67d56c0b50f6e65a89912cb8c44445c60" translate="yes" xml:space="preserve">
          <source>Overall Performance</source>
          <target state="translated">総合的なパフォーマンス</target>
        </trans-unit>
        <trans-unit id="bed3eb091eb6a1e8a3c68cc9f2b8cad9f0ea7e35" translate="yes" xml:space="preserve">
          <source>Override blocks can also specify patterns to exclude from matches. If a file matches any of the excluded patterns, the configuration won't apply.</source>
          <target state="translated">オーバーライド ブロックでは、マッチから除外するパターンを指定することもできます。ファイルが除外されたパターンのいずれかにマッチした場合、設定は適用されません。</target>
        </trans-unit>
        <trans-unit id="d65d233ad72a12dd5f816f689346ed699f068f74" translate="yes" xml:space="preserve">
          <source>Overrides in a config file can now match dotfiles</source>
          <target state="translated">設定ファイル内のオーバーライドが dotfiles にマッチするようになりました。</target>
        </trans-unit>
        <trans-unit id="c7279b45cea6645bd003b55c34e4e0b68128806b" translate="yes" xml:space="preserve">
          <source>Overrides in an extended config file can now be overridden by a parent config file</source>
          <target state="translated">拡張コンフィグファイル内のオーバーライドを親コンフィグファイルでオーバーライドできるようになりました。</target>
        </trans-unit>
        <trans-unit id="84e380bd7906ce369799455bb337baa4a7e912c3" translate="yes" xml:space="preserve">
          <source>Packaging the Custom Formatter</source>
          <target state="translated">カスタムフォーマッタのパッケージング</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="0a0e056314281df7ebe5bff4801d78e2bcb2e0da" translate="yes" xml:space="preserve">
          <source>Parentheses Spacing</source>
          <target state="translated">括弧の間隔</target>
        </trans-unit>
        <trans-unit id="8b047ea57f8d4953d13e87c42cd0dfbacf8b9d4e" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Formatters</source>
          <target state="translated">フォーマッタへの引数の渡し方</target>
        </trans-unit>
        <trans-unit id="bbad3fbb9280e935e855b557b50f0feb18c726b1" translate="yes" xml:space="preserve">
          <source>Passing the callback by reference</source>
          <target state="translated">参照によるコールバックの受け渡し</target>
        </trans-unit>
        <trans-unit id="866764460d5b328ce01c5d25fea87d4f72c58d7e" translate="yes" xml:space="preserve">
          <source>Path to the cache file. If none specified &lt;code&gt;.eslintcache&lt;/code&gt; will be used. The file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed. &lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;code&gt;--cache-location&lt;/code&gt; instead.</source>
          <target state="translated">キャッシュファイルへのパス。指定がない場合は、 &lt;code&gt;.eslintcache&lt;/code&gt; が使用されます。ファイルは、 &lt;code&gt;eslint&lt;/code&gt; コマンドが実行されるディレクトリに作成されます。&lt;strong&gt;非推奨&lt;/strong&gt;：代わりに &lt;code&gt;--cache-location&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="1a4f2472b12ffd8aaa283f1912f4a749bb112a9e" translate="yes" xml:space="preserve">
          <source>Path to the cache location. Can be a file or a directory. If no location is specified, &lt;code&gt;.eslintcache&lt;/code&gt; will be used. In that case, the file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed.</source>
          <target state="translated">キャッシュの場所へのパス。ファイルまたはディレクトリを指定できます。場所が指定されていない場合は、 &lt;code&gt;.eslintcache&lt;/code&gt; が使用されます。その場合、 &lt;code&gt;eslint&lt;/code&gt; コマンドを実行したディレクトリにファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="9cf1a4ce359a6f23066671fb0ce9dcb0cf168d6e" translate="yes" xml:space="preserve">
          <source>Paths are relative to &lt;code&gt;.eslintignore&lt;/code&gt; location or the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">パスは、 &lt;code&gt;.eslintignore&lt;/code&gt; の場所または現在の作業ディレクトリからの相対パスです。これは、-- &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;コマンドを&lt;/a&gt;介して渡されるパスにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="be2e483ed2197aec27cb04e7cf1f6436f2920c5c" translate="yes" xml:space="preserve">
          <source>Paths are relative to the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">パスは、現在の作業ディレクトリからの相対パスです。これは、 &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;コマンドを&lt;/a&gt;介して渡されるパスにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="0493aae6aa03f23cee93bbaad9b496620e893832" translate="yes" xml:space="preserve">
          <source>Peer Dependency</source>
          <target state="translated">ピア依存性</target>
        </trans-unit>
        <trans-unit id="d4a170a4c994882082963476d79b1a77b04c7ae7" translate="yes" xml:space="preserve">
          <source>Per-rule Performance</source>
          <target state="translated">ルールごとの性能</target>
        </trans-unit>
        <trans-unit id="ed363adcc6ae50f9e2d44c956c484ce493017156" translate="yes" xml:space="preserve">
          <source>Perform any asynchronous operations</source>
          <target state="translated">任意の非同期操作を実行する</target>
        </trans-unit>
        <trans-unit id="9b69332b09b8aef3669c8068b4744d1b0de90bdd" translate="yes" xml:space="preserve">
          <source>Performance Testing</source>
          <target state="translated">性能試験</target>
        </trans-unit>
        <trans-unit id="be4da6f0c7a2438c9087ddd0f224ce1c2084f2f0" translate="yes" xml:space="preserve">
          <source>Performing an operation on each element of an iterable is a common task. However, performing an &lt;code&gt;await&lt;/code&gt; as part of each operation is an indication that the program is not taking full advantage of the parallelization benefits of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">イテラブルの各要素に対して操作を実行することは、一般的なタスクです。ただし、各操作の一部として &lt;code&gt;await&lt;/code&gt; を実行することは、プログラムが &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; 並列化の利点を十分に活用していないことを示しています。</target>
        </trans-unit>
        <trans-unit id="95901ce3386d6d8922a77162d48436823c7874d9" translate="yes" xml:space="preserve">
          <source>Personal Configuration File (deprecated)</source>
          <target state="translated">個人設定ファイル (非推奨)</target>
        </trans-unit>
        <trans-unit id="f11e03ac0806752483bf14b215cdf12352c57130" translate="yes" xml:space="preserve">
          <source>Personal config files have been deprecated since &lt;a href=&quot;https://eslint.org/blog/2019/11/eslint-v6.7.0-released&quot;&gt;v6.7.0&lt;/a&gt;. ESLint v7.0.0 will start printing runtime deprecation warnings. It will print a warning for the following situations:</source>
          <target state="translated">個人用設定ファイルは&lt;a href=&quot;https://eslint.org/blog/2019/11/eslint-v6.7.0-released&quot;&gt;v6.7.0&lt;/a&gt;以降非推奨になりました。ESLint v7.0.0は、実行時の非推奨警告の印刷を開始します。次の状況で警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="df4e75f6b932e3d5f6b66dcca11234789a64b98d" translate="yes" xml:space="preserve">
          <source>Piping Code Into ESLint</source>
          <target state="translated">コードをESLintにパイプする</target>
        </trans-unit>
        <trans-unit id="06f50881a755583b161af4399bd829f0111ebe4f" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (e.g., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">すべてのランタイムルールを同じディレクトリに配置します（例： &lt;code&gt;eslint_rules&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="31ccc366a57c10600d02a87ddb1627ad8fcf83e4" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (i.e., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">すべてのランタイムルールを同じディレクトリに配置します（つまり、 &lt;code&gt;eslint_rules&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="92009e0d6a0520471a107f4e981c2e736fb0840b" translate="yes" xml:space="preserve">
          <source>Placeholders in suggestion messages</source>
          <target state="translated">提案メッセージのプレースホルダ</target>
        </trans-unit>
        <trans-unit id="e51396525bede24fbfd195365328421b2712f903" translate="yes" xml:space="preserve">
          <source>Please include as much detail as possible to help us properly address your issue. If we need to triage issues and constantly ask people for more detail, that's time taken away from actually fixing issues. Help us be as efficient as possible by including a lot of detail in your issues.</source>
          <target state="translated">お客様の問題に適切に対処するために、できるだけ詳細な情報を記載してください。問題をトリアージし、常に詳細を尋ねる必要がある場合、実際に問題を解決するための時間が削られてしまいます。あなたの課題に多くの詳細を含めることで、できるだけ効率的に問題を解決できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="8fe040cc7654341f94ac91393bb05581350df1ab" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;&quot;always&quot;&lt;/code&gt; and &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; require function expressions and function declarations in &lt;code&gt;export default&lt;/code&gt; declarations to have a name.</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; と &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 、 &lt;code&gt;export default&lt;/code&gt; 宣言で関数式と関数宣言に名前を付ける必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="58942fbcaefe941982699b63620879d5c168e499" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;data&lt;/code&gt; in a test case does not assert &lt;code&gt;data&lt;/code&gt; passed to &lt;code&gt;context.report&lt;/code&gt;. Instead, it is used to form the expected message text which is then compared with the received &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">それに注意してください &lt;code&gt;data&lt;/code&gt; アサートしないテストケースで &lt;code&gt;data&lt;/code&gt; に渡さ &lt;code&gt;context.report&lt;/code&gt; 。代わりに、受信した &lt;code&gt;message&lt;/code&gt; と比較される期待されるメッセージテキストを形成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a2dd72b1131b99a3809611bb27561465f891b142" translate="yes" xml:space="preserve">
          <source>Please note that most editors show an additional empty line at the end if the file ends with a line break. This rule does not count that extra line.</source>
          <target state="translated">ほとんどのエディタでは、ファイルが改行で終わっている場合、最後に空行が追加されていることに注意してください。このルールでは、その余分な行はカウントされません。</target>
        </trans-unit>
        <trans-unit id="cd6cb4e45c0a145bc991dcd0e8f4ab88f39165d4" translate="yes" xml:space="preserve">
          <source>Please note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; if you are using React and want React semantics. By the same token, supporting ES6 syntax is not the same as supporting new ES6 globals (e.g., new types such as &lt;code&gt;Set&lt;/code&gt;). For ES6 syntax, use &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt;; for new ES6 global variables, use &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt;. &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; enables ES6 syntax automatically, but &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; does not enable ES6 globals automatically. Parser options are set in your &lt;code&gt;.eslintrc.*&lt;/code&gt; file by using the &lt;code&gt;parserOptions&lt;/code&gt; property. The available options are:</source>
          <target state="translated">JSX構文のサポートはReactのサポートと同じではないことに注意してください。 Reactは、ESLintが認識しない特定のセマンティクスをJSX構文に適用します。Reactを使用していて、Reactセマンティクスが必要な場合は、&lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-reactの&lt;/a&gt;使用をお勧めします。同様に、ES6構文のサポートは、新しいES6グローバル（たとえば、 &lt;code&gt;Set&lt;/code&gt; などの新しい型）のサポートと同じではありません。 ES6構文では、 &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; ます。新しいES6グローバル変数の場合は、 &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; ます。 &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; はES6構文を自動的に有効にしますが、 &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; はES6グローバルを自動的に有効にしません。パーサーオプションは &lt;code&gt;.eslintrc.*&lt;/code&gt; &lt;code&gt;parserOptions&lt;/code&gt; プロパティを使用してファイル。使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="caa1e575508ae90c0c1f3ba9cbc5f1d6c3021954" translate="yes" xml:space="preserve">
          <source>Please note that the following methods have been deprecated and will be removed in a future version of ESLint:</source>
          <target state="translated">以下のメソッドは非推奨となっており、ESLintの将来のバージョンでは削除されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="32dcca51ba22590cfb1a0282165e0b20b80790ba" translate="yes" xml:space="preserve">
          <source>Please note that this option applies only to identifiers inside destructuring patterns. It doesn't additionally allow any particular use of the created variables later in the code apart from the use that is already allowed by default or by other options.</source>
          <target state="translated">このオプションは、破壊パターン内の識別子にのみ適用されることに注意してください。このオプションは、デフォルトや他のオプションで既に許可されている使用以外に、コードの後半で作成された変数を特別に使用することを許可しません。</target>
        </trans-unit>
        <trans-unit id="af6c838d3e272ac0343544e6baa570e2ff52feda" translate="yes" xml:space="preserve">
          <source>Please note that this rule does not aim to detect and disallow a potentially erroneous use of backreference syntax in regular expressions, like the use in character classes or an attempt to reference a group that doesn't exist. Depending on the context, a &lt;code&gt;\1&lt;/code&gt;...&lt;code&gt;\9&lt;/code&gt; sequence that is not a syntactically valid backreference may produce syntax error, or be parsed as something else (e.g., as a legacy octal escape sequence).</source>
          <target state="translated">このルールは、文字クラスでの使用や存在しないグループの参照の試みなど、正規表現での後方参照構文の潜在的に誤った使用を検出して禁止することを目的としていないことに注意してください。コンテキストによっては、構文的に有効な後方参照ではない &lt;code&gt;\1&lt;/code&gt; ... &lt;code&gt;\9&lt;/code&gt; シーケンスは、構文エラーを生成したり、別のものとして解析されたりする場合があります（たとえば、従来の8進エスケープシーケンスとして）。</target>
        </trans-unit>
        <trans-unit id="2d2fdf1d62a3776fdec8b729a28be6e793bf8d2a" translate="yes" xml:space="preserve">
          <source>Please note that this rule does not compare conditions from the chain with conditions inside statements, and will not warn in the cases such as follows:</source>
          <target state="translated">このルールでは、チェーンからの条件とステートメント内の条件を比較することはなく、以下のような場合は警告しませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="2c0f066535f2bcba0c175ddc973c5549691cce2c" translate="yes" xml:space="preserve">
          <source>Please note that this rule is not designed to check loop conditions, and will not warn in cases such as the following examples.</source>
          <target state="translated">このルールはループ状態を確認するためのものではなく、以下の例のような場合は警告しませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="970fbd12b618363bade0db3e52057a632da36216" translate="yes" xml:space="preserve">
          <source>Please note that when passing a glob as a parameter, it will be expanded by your shell. The results of the expansion can vary depending on your shell, and its configuration. If you want to use node &lt;code&gt;glob&lt;/code&gt; syntax, you have to quote your parameter (using double quotes if you need it to run in Windows), as follows:</source>
          <target state="translated">グロブをパラメーターとして渡すと、シェルによって展開されることに注意してください。拡張の結果は、シェルとその構成によって異なります。 &lt;code&gt;glob&lt;/code&gt; 構文を使用する場合は、次のようにパラメーターを引用符で囲む必要があります（Windowsで実行する必要がある場合は二重引用符を使用します）。</target>
        </trans-unit>
        <trans-unit id="7e110a34a2db33270f753e46f8b7ab8a3821147b" translate="yes" xml:space="preserve">
          <source>Please note that you can either use the top-level options or the grouped options (&lt;code&gt;singleLine&lt;/code&gt; and &lt;code&gt;multiLine&lt;/code&gt;) but not both.</source>
          <target state="translated">最上位オプションまたはグループ化されたオプション（ &lt;code&gt;singleLine&lt;/code&gt; および &lt;code&gt;multiLine&lt;/code&gt; ）のいずれかを使用できますが、両方は使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a115fb1f05052d949674b5ad9f4dd54cca5e205b" translate="yes" xml:space="preserve">
          <source>Please note that you have to provide &lt;code&gt;data&lt;/code&gt; on the suggestion's object. Suggestion messages cannot use properties from the overall error's &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">提案のオブジェクトに関する &lt;code&gt;data&lt;/code&gt; を提供する必要があることに注意してください。提案メッセージでは、全体的なエラーの &lt;code&gt;data&lt;/code&gt; プロパティを使用できません。</target>
        </trans-unit>
        <trans-unit id="8131e2054fa3d6ce5d0136ddb8d6ac107226cb3a" translate="yes" xml:space="preserve">
          <source>Please read the user guide's section on &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuring parser options&lt;/a&gt; to learn more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;パーサーオプションの設定&lt;/a&gt;に関するユーザーガイドのセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4e9e14b73e813f94faf81a7bf4b8e790aeed433c" translate="yes" xml:space="preserve">
          <source>Please see &lt;code&gt;.gitignore&lt;/code&gt;'s specification for further examples of valid syntax.</source>
          <target state="translated">有効な構文の例については、 &lt;code&gt;.gitignore&lt;/code&gt; の仕様をご覧ください。</target>
        </trans-unit>
        <trans-unit id="910be8bbebe15605e3211e93adb45fe019aed843" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;generator documentation&lt;/a&gt; for instructions on how to use it.</source>
          <target state="translated">使用方法については、&lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;ジェネレーターのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2c576146a981b5faae12b330f7bab5f655d4de92" translate="yes" xml:space="preserve">
          <source>Plugin authors may need to update installation instructions</source>
          <target state="translated">プラグインの作者は、インストール手順を更新する必要があるかもしれません</target>
        </trans-unit>
        <trans-unit id="e3b560171bc6f34e81c89e0ab2f15568841517f3" translate="yes" xml:space="preserve">
          <source>Plugin environments can define the following objects:</source>
          <target state="translated">プラグイン環境では、以下のオブジェクトを定義することができます。</target>
        </trans-unit>
        <trans-unit id="58e21bcc42d158dabd7ff055ec27d67cd4db039a" translate="yes" xml:space="preserve">
          <source>Plugin resolution has been updated</source>
          <target state="translated">プラグインの解像度を更新しました</target>
        </trans-unit>
        <trans-unit id="0fbbbaf384cbc0ee72d4f8c606fcf5d504bca04e" translate="yes" xml:space="preserve">
          <source>Plugins No Longer Have Default Configurations</source>
          <target state="translated">プラグインはデフォルト設定を持たなくなりました</target>
        </trans-unit>
        <trans-unit id="7b2f2b7399c496bf73ff7e69192e8907b6ce6f81" translate="yes" xml:space="preserve">
          <source>Plugins and shareable configs are no longer affected by ESLint's location</source>
          <target state="translated">プラグインと共有可能な設定はESLintのロケーションの影響を受けなくなりました。</target>
        </trans-unit>
        <trans-unit id="6b2a2fcf74ee4cecce3ba1b5cd83e800b49e72b4" translate="yes" xml:space="preserve">
          <source>Plugins are resolved relative to the config file. In other words, ESLint will load the plugin as a user would obtain by running &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; in the config file.</source>
          <target state="translated">プラグインは、構成ファイルに関連して解決されます。言い換えると、ESLintは、ユーザーが構成ファイルで &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; を実行して取得するのと同じようにプラグインをロードします。</target>
        </trans-unit>
        <trans-unit id="ee9003d71c823216744370af56f21413e11f9752" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional environments for use in ESLint. To do so, the plugin must export an &lt;code&gt;environments&lt;/code&gt; object. The keys of the &lt;code&gt;environments&lt;/code&gt; object are the names of the different environments provided and the values are the environment settings. For example:</source>
          <target state="translated">プラグインは、ESLintで使用する追加の環境を公開できます。そのためには、プラグインが &lt;code&gt;environments&lt;/code&gt; オブジェクトをエクスポートする必要があります。 &lt;code&gt;environments&lt;/code&gt; オブジェクトのキーは、提供されるさまざまな環境の名前であり、値は環境設定です。例えば：</target>
        </trans-unit>
        <trans-unit id="dec281e97d018cacc13382cfc427e305389a0405" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional rules for use in ESLint. To do so, the plugin must export a &lt;code&gt;rules&lt;/code&gt; object containing a key-value mapping of rule ID to rule. The rule ID does not have to follow any naming convention (so it can just be &lt;code&gt;dollar-sign&lt;/code&gt;, for instance).</source>
          <target state="translated">プラグインは、ESLintで使用する追加のルールを公開できます。そのためには、プラグインは、ルールIDのルールへのキー値マッピングを含む &lt;code&gt;rules&lt;/code&gt; オブジェクトをエクスポートする必要があります。ルールIDは、命名規則に従う必要はありません（したがって、たとえば、 &lt;code&gt;dollar-sign&lt;/code&gt; にすることができます）。</target>
        </trans-unit>
        <trans-unit id="b69b69c3f7bf908cf04b17050967f012181e0472" translate="yes" xml:space="preserve">
          <source>Plugins in scoped packages are now resolvable in configs</source>
          <target state="translated">スコープされたパッケージのプラグインは、configs で解決できるようになりました。</target>
        </trans-unit>
        <trans-unit id="06ed5affa3a994c517d473c69ea0a4badefd02a1" translate="yes" xml:space="preserve">
          <source>Plugins in the base configuration (loaded by &lt;code&gt;extends&lt;/code&gt; setting) are relative to the derived config file. For example, if &lt;code&gt;./.eslintrc&lt;/code&gt; has &lt;code&gt;extends: [&quot;foo&quot;]&lt;/code&gt; and the &lt;code&gt;eslint-config-foo&lt;/code&gt; has &lt;code&gt;plugins: [&quot;bar&quot;]&lt;/code&gt;, ESLint finds the &lt;code&gt;eslint-plugin-bar&lt;/code&gt; from &lt;code&gt;./node_modules/&lt;/code&gt; (rather than &lt;code&gt;./node_modules/eslint-config-foo/node_modules/&lt;/code&gt;) or ancestor directories. Thus every plugin in the config file and base configurations is resolved uniquely.</source>
          <target state="translated">基本構成（ &lt;code&gt;extends&lt;/code&gt; 設定によってロードされる）のプラグインは、派生構成ファイルに関連しています。たとえば、。 &lt;code&gt;./.eslintrc&lt;/code&gt; に &lt;code&gt;extends: [&quot;foo&quot;]&lt;/code&gt; あり、 &lt;code&gt;eslint-config-foo&lt;/code&gt; に &lt;code&gt;plugins: [&quot;bar&quot;]&lt;/code&gt; 場合、ESLintは &lt;code&gt;eslint-plugin-bar&lt;/code&gt; から（ &lt;code&gt;./node_modules/eslint-config-foo/node_modules/&lt;/code&gt; ではなく）eslint-plugin-barを &lt;code&gt;./node_modules/&lt;/code&gt; ます。node_modules / eslint-config-foo / node_modules /）または祖先ディレクトリ。したがって、構成ファイルと基本構成内のすべてのプラグインは一意に解決されます。</target>
        </trans-unit>
        <trans-unit id="f9ec5b88d6b7fe33abdb0cd312d875b7aee0a01e" translate="yes" xml:space="preserve">
          <source>Plugins may provide processors. Processors can extract JavaScript code from another kind of files, then lets ESLint lint the JavaScript code. Or processors can convert JavaScript code in preprocessing for some purpose.</source>
          <target state="translated">プラグインはプロセッサを提供することができます。プロセッサーは別の種類のファイルから JavaScript コードを抽出し、ESLint に JavaScript コードをリントさせることができます。あるいは、プロセッサは JavaScript コードを何らかの目的のために前処理で変換することができます。</target>
        </trans-unit>
        <trans-unit id="04de60818b1275febaa49d420056bd8ab7e76e8e" translate="yes" xml:space="preserve">
          <source>Polyjuice works with JSON configuration files, so if you're using a JavaScript or YAML JSCS configuration file, you should first convert it into a JSON configuration file.</source>
          <target state="translated">PolyjuiceはJSON設定ファイルで動作するので、JavaScriptやYAMLのJSCS設定ファイルを使用している場合は、まずJSON設定ファイルに変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db8807336771db69984fb33e2ecb89b2b778d76" translate="yes" xml:space="preserve">
          <source>Possible Errors</source>
          <target state="translated">考えられるエラー</target>
        </trans-unit>
        <trans-unit id="51e379f50f0321cddf83015a5392ece47d742feb" translate="yes" xml:space="preserve">
          <source>Prefer destructuring from arrays and objects (prefer-destructuring)</source>
          <target state="translated">配列やオブジェクトからのデストラクチャリングを優先する(prefer-destructuring)</target>
        </trans-unit>
        <trans-unit id="c228b3216b65c6046a15d3f0b6ae1deea05d3ecb" translate="yes" xml:space="preserve">
          <source>Prefer use of an object spread over &lt;code&gt;Object.assign&lt;/code&gt; (prefer-object-spread)</source>
          <target state="translated">&lt;code&gt;Object.assign&lt;/code&gt; （prefer-object-spread）よりもオブジェクトスプレッドの使用を優先する</target>
        </trans-unit>
        <trans-unit id="ad7e776a42690874c6d781cece37cffe753da846" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^10.12.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=12.0.0&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">前提条件：SSLサポートで構築された&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;（ &lt;code&gt;^10.12.0&lt;/code&gt; 、または &lt;code&gt;&amp;gt;=12.0.0&lt;/code&gt; 12.0.0）。（公式のNode.jsディストリビューションを使用している場合、SSLは常に組み込まれています。）</target>
        </trans-unit>
        <trans-unit id="82062f1465f3be0589e9c94efa76e989985103e4" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^8.10.0&lt;/code&gt;, &lt;code&gt;^10.13.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">前提条件：SSLサポートを使用して構築された&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;（ &lt;code&gt;^8.10.0&lt;/code&gt; 、 &lt;code&gt;^10.13.0&lt;/code&gt; 、または &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt; ）。（公式のNode.jsディストリビューションを使用している場合、SSLは常に組み込まれています。）</target>
        </trans-unit>
        <trans-unit id="2a14e1b8f5938872ffc8263a306ac7453d0b08cd" translate="yes" xml:space="preserve">
          <source>Previous versions of ESLint silently ignored any nonexistent files and globs provided on the command line:</source>
          <target state="translated">以前のバージョンのESLintでは、コマンドラインで提供された存在しないファイルやグロブを無視するようになりました。</target>
        </trans-unit>
        <trans-unit id="76163b1a220d26d8c656f8c6db9cb83328c660ff" translate="yes" xml:space="preserve">
          <source>Previously to v7.0.0, ESLint would only lint files with a &lt;code&gt;.js&lt;/code&gt; extension by default if you give directories like &lt;code&gt;eslint src&lt;/code&gt;.</source>
          <target state="translated">v7.0.0より前は、 &lt;code&gt;eslint src&lt;/code&gt; のようなディレクトリを指定した場合、ESLintはデフォルトで拡張子が &lt;code&gt;.js&lt;/code&gt; のファイルのみをlintしていました。</target>
        </trans-unit>
        <trans-unit id="861eb458285d7d2f2e5428c183895fe75d599908" translate="yes" xml:space="preserve">
          <source>Previously, &lt;code&gt;RuleTester&lt;/code&gt; used loose equality when making some of its assertions. For example, if a rule produced the string &lt;code&gt;&quot;7&quot;&lt;/code&gt; as a result of autofixing, &lt;code&gt;RuleTester&lt;/code&gt; would allow the number &lt;code&gt;7&lt;/code&gt; in an &lt;code&gt;output&lt;/code&gt; assertion, rather than the string &lt;code&gt;&quot;7&quot;&lt;/code&gt;. In ESLint v5, comparisons from &lt;code&gt;RuleTester&lt;/code&gt; use strict equality, so an assertion like this will no longer pass.</source>
          <target state="translated">以前は、 &lt;code&gt;RuleTester&lt;/code&gt; はそのアサーションの一部を作成するときに緩やかな等式を使用していました。たとえば、ルールが自動修正の結果として文字列 &lt;code&gt;&quot;7&quot;&lt;/code&gt; を生成した場合、 &lt;code&gt;RuleTester&lt;/code&gt; は文字列 &lt;code&gt;&quot;7&quot;&lt;/code&gt; ではなく、 &lt;code&gt;output&lt;/code&gt; アサーションで数値 &lt;code&gt;7&lt;/code&gt; を許可します。 ESLint v5では、 &lt;code&gt;RuleTester&lt;/code&gt; からの比較で厳密な等価性が使用されるため、このようなアサーションは渡されなくなります。</target>
        </trans-unit>
        <trans-unit id="3f50639030ce290e0b2d963a0feb9b72be44a4b6" translate="yes" xml:space="preserve">
          <source>Previously, ESLint loaded plugins relative to the location of the ESLint package itself. As a result, we suggested that users with global ESLint installations should also install plugins globally, and users with local ESLint installations should install plugins locally. However, due to a design bug, this strategy caused ESLint to randomly fail to load plugins and shareable configs under certain circumstances, particularly when using package management tools like &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;&lt;code&gt;lerna&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n' Play&lt;/a&gt;.</source>
          <target state="translated">以前は、ESLintは、ESLintパッケージ自体の場所を基準にしてプラグインをロードしていました。その結果、ESLintをグローバルにインストールしたユーザーはプラグインもグローバルにインストールし、ESLintをローカルにインストールしたユーザーはプラグインをローカルにインストールすることをお勧めします。ただし、設計上のバグが原因で、特に&lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt; &lt;code&gt;lerna&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n 'Play&lt;/a&gt;などのパッケージ管理ツールを使用している場合、この戦略により、ESLintは特定の状況下でプラグインと共有可能な設定をランダムにロードできなくなりました。</target>
        </trans-unit>
        <trans-unit id="e5a31efe99bb4ae0265c26c456f8708e8b3abad7" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would add an &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; property to &lt;code&gt;Variable&lt;/code&gt; objects in scope analysis to indicate that a variable was introduced as a result of a &lt;code&gt;/* global */&lt;/code&gt; comment. This property was undocumented, and the ESLint team was unable to find any usage of the property outside of ESLint core. The property has been removed in ESLint v6, and replaced with the &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; property, which can contain a list of all &lt;code&gt;/* global */&lt;/code&gt; comments if a variable was declared with more than one of them.</source>
          <target state="translated">以前は、ESLintはスコープ分析の &lt;code&gt;Variable&lt;/code&gt; オブジェクトに &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; プロパティを追加して、変数が &lt;code&gt;/* global */&lt;/code&gt; コメントの結果として導入されたことを示していました。このプロパティは文書化されておらず、ESLintチームはESLintコアの外部でプロパティの使用法を見つけることができませんでした。このプロパティはESLint v6で削除され、 &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; プロパティに置き換えられました。このプロパティには、変数が複数指定されている場合にすべての &lt;code&gt;/* global */&lt;/code&gt; コメントのリストを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a1d351994dd8ff11b19e958c9018b81f03cb97ca" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would ignore these malformed directive comments. ESLint v5 will report an error when it sees a problem like this, so that the issue can be more easily corrected.</source>
          <target state="translated">以前は、ESLint はこれらの不正なディレクティブコメントを無視していました。ESLint v5では、このような問題を見つけたときにエラーを報告するようになり、問題をより簡単に修正できるようになりました。</target>
        </trans-unit>
        <trans-unit id="d6b010cfb49c2bd7324d04fb33de705502ddf710" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would set the &lt;code&gt;parent&lt;/code&gt; property on each AST node immediately before running rule listeners for that node. This caused some confusion for rule authors, because the &lt;code&gt;parent&lt;/code&gt; property would not initially be present on any nodes, and it was sometimes necessary to complicate the structure of a rule to ensure that the &lt;code&gt;parent&lt;/code&gt; property of a given node would be available when needed.</source>
          <target state="translated">以前は、ESLintはそのノードのルールリスナーを実行する直前に、各ASTノードの &lt;code&gt;parent&lt;/code&gt; プロパティを設定していました。これにより、ルールの作成者に混乱が生じました。 &lt;code&gt;parent&lt;/code&gt; プロパティは最初はどのノードにも存在しないため、ルールの構造を複雑にして、必要なときに特定のノードの &lt;code&gt;parent&lt;/code&gt; プロパティを確実に使用できるようにする必要がある場合がありました。</target>
        </trans-unit>
        <trans-unit id="2efde3c7b07c84bb2b96e4b7cf3ee1a328ba78ff" translate="yes" xml:space="preserve">
          <source>Previously, it was possible for rules to report AST nodes without providing a report message. This was not intended behavior, and as a result the default formatter would crash if a rule omitted a message. However, it was possible to avoid a crash when using a non-default formatter, such as &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="translated">以前は、ルールがレポートメッセージを提供せずにASTノードをレポートすることが可能でした。これは意図された動作ではなく、その結果、ルールがメッセージを省略した場合、デフォルトのフォーマッタがクラッシュしました。ただし、 &lt;code&gt;json&lt;/code&gt; などのデフォルト以外のフォーマッターを使用すると、クラッシュを回避できました。</target>
        </trans-unit>
        <trans-unit id="665203081aa657ef14f3fd259bc736ff48eade7a" translate="yes" xml:space="preserve">
          <source>Previously, rule context objects had an undocumented &lt;code&gt;_linter&lt;/code&gt; property, which was used internally within ESLint to process reports from rules. Some rules used this property to achieve functionality that was not intended to be possible for rules. For example, several plugins used the &lt;code&gt;_linter&lt;/code&gt; property in a rule to monitor reports from other rules, for the purpose of checking for unused &lt;code&gt;/* eslint-disable */&lt;/code&gt; directive comments. Although this functionality was useful for users, it could also cause stability problems for projects using ESLint. For example, an upgrade to a rule in one plugin could unexpectedly cause a rule in another plugin to start reporting errors.</source>
          <target state="translated">以前は、ルールコンテキストオブジェクトには、ドキュメント化されていない &lt;code&gt;_linter&lt;/code&gt; プロパティがありました。これは、ESLint内でルールからのレポートを処理するために使用されていました。一部のルールは、このプロパティを使用して、ルールで可能ではない機能を実現しました。たとえば、いくつかのプラグインは、未使用の &lt;code&gt;/* eslint-disable */&lt;/code&gt; ディレクティブコメントをチェックする目的で、ルールで &lt;code&gt;_linter&lt;/code&gt; プロパティを使用して他のルールからのレポートを監視しました。この機能はユーザーにとっては便利ですが、ESLintを使用するプロジェクトの安定性の問題を引き起こす可能性もあります。たとえば、あるプラグインのルールをアップグレードすると、別のプラグインのルールが予期せずエラーを報告する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7ad7f54686fbe669487e9816787f55d0683c5950" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/comma-dangle&quot;&gt;&lt;code&gt;comma-dangle&lt;/code&gt;&lt;/a&gt; rule would ignore trailing function arguments and parameters, unless explicitly configured to check for function commas. In ESLint v6, function commas are treated the same way as other types of trailing commas.</source>
          <target state="translated">以前は、関数のコンマをチェックするように明示的に構成されていない限り、&lt;a href=&quot;../rules/comma-dangle&quot;&gt; &lt;code&gt;comma-dangle&lt;/code&gt; &lt;/a&gt;ルールは後続の関数引数とパラメーターを無視していました。ESLint v6では、関数コンマは他のタイプの後続コンマと同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="bb4d9004d86d873bce13da59ea0da1efcb652b6e" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/indent&quot;&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/a&gt; rule was fairly lenient about checking indentation; there were many code patterns where indentation was not validated by the rule. This caused confusion for users, because they were accidentally writing code with incorrect indentation, and they expected ESLint to catch the issues.</source>
          <target state="translated">以前は、&lt;a href=&quot;../rules/indent&quot;&gt; &lt;code&gt;indent&lt;/code&gt; &lt;/a&gt;ルールはインデントのチェックについてかなり寛大でした。インデントがルールによって検証されなかった多くのコードパターンがありました。これは、ユーザーが誤ったインデントでコードを誤って記述していたため、ユーザーに混乱を引き起こし、ESLintが問題を検出することを期待していました。</target>
        </trans-unit>
        <trans-unit id="cac4dad357054ea6ee0c7634c9a4e7c59614fbef" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;context.getScope()&lt;/code&gt; method changed its behavior based on the &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; property. However, this could cause confusing behavior when using a parser that doesn't respond to the &lt;code&gt;ecmaVersion&lt;/code&gt; option, such as &lt;code&gt;babel-eslint&lt;/code&gt;.</source>
          <target state="translated">以前は、 &lt;code&gt;context.getScope()&lt;/code&gt; メソッドは、 &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; プロパティに基づいてその動作を変更していました。ただし、 &lt;code&gt;babel-eslint&lt;/code&gt; などの &lt;code&gt;ecmaVersion&lt;/code&gt; オプションに応答しないパーサーを使用すると、混乱を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="40450d3f81bf0c288fef5278f775f18d1a6902ca" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;linter.verify()&lt;/code&gt; API accepted a &lt;code&gt;global&lt;/code&gt; config option, which was a synonym for the documented &lt;code&gt;globals&lt;/code&gt; property. The &lt;code&gt;global&lt;/code&gt; option was never documented or officially supported, and did not work in config files. It has been removed in 4.0.</source>
          <target state="translated">以前は、 &lt;code&gt;linter.verify()&lt;/code&gt; APIは、ドキュメント化された &lt;code&gt;globals&lt;/code&gt; プロパティの同義語であった &lt;code&gt;global&lt;/code&gt; オプションを受け入れました。 &lt;code&gt;global&lt;/code&gt; オプションは、文書化されていないか、正式にサポートされ、設定ファイルでは動作しませんでしたでした。4.0で削除されました。</target>
        </trans-unit>
        <trans-unit id="759b8740ec08f1087d9d1461adf3e37a3bf5b531" translate="yes" xml:space="preserve">
          <source>Previously, when configuring a set of global variables with an object, it was possible to use anything as the values of the object. An unknown value would be treated the same as &lt;code&gt;&quot;writable&quot;&lt;/code&gt;.</source>
          <target state="translated">以前は、オブジェクトを使用して一連のグローバル変数を構成する場合、オブジェクトの値として何でも使用できました。不明な値は &lt;code&gt;&quot;writable&quot;&lt;/code&gt; と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="d7b32ac883bfc23aab343c6372688bec1c7d6449" translate="yes" xml:space="preserve">
          <source>Previously, when linting code with a parser that had not been previously defined, the &lt;code&gt;Linter&lt;/code&gt; API would attempt to load the parser from the filesystem. However, this behavior was confusing because &lt;code&gt;Linter&lt;/code&gt; never access the filesystem in any other cases, and it was difficult to ensure that the correct parser would be found when loading the parser from the filesystem.</source>
          <target state="translated">以前は、以前に定義されていないパーサーでコードを &lt;code&gt;Linter&lt;/code&gt; すると、Linter APIはファイルシステムからパーサーをロードしようとしました。ただし、 &lt;code&gt;Linter&lt;/code&gt; が他のケースではファイルシステムにアクセスしないため、この動作は混乱を招き、ファイルシステムからパーサーをロードするときに正しいパーサーが確実に見つかるようにすることは困難でした。</target>
        </trans-unit>
        <trans-unit id="8a3ba3b815ccf0fde610368afb8b3a032a9740a4" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const foo = {...data}&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; spread element.</source>
          <target state="translated">以前は、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを有効にして &lt;code&gt;const foo = {...data}&lt;/code&gt; ようなJSコードを解析すると、デフォルトのパーサーは &lt;code&gt;...data&lt;/code&gt; スプレッド要素の &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; ノードタイプを生成しました。</target>
        </trans-unit>
        <trans-unit id="3572fe8f9bf308c3f1c32a5c5c8ecf7ade2e2992" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; rest element.</source>
          <target state="translated">以前のようにJSコードを解析するとき &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; と &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; のオプションはデフォルトのパーサが生成する、有効 &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; のためのノードタイプ &lt;code&gt;...data&lt;/code&gt; 残り要素。</target>
        </trans-unit>
        <trans-unit id="ac97c7d1bc4493830e4f2c35fbc7b98e9d1581e8" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser it was possible to use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable support for &lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest/spread properties&lt;/a&gt;, as follows:</source>
          <target state="translated">以前は、デフォルトのパーサーを使用する場合、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを使用して、次のように&lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest / spreadプロパティの&lt;/a&gt;サポートを有効にすることができました。</target>
        </trans-unit>
        <trans-unit id="393a7447e4d30c62abea4ddc9f0d3dfc3e208e74" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser, a config could use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable parsing support for object rest/spread properties:</source>
          <target state="translated">以前は、デフォルトのパーサーを使用する場合、configは &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションを使用して、オブジェクトレスト/スプレッドプロパティの解析サポートを有効にすることができました。</target>
        </trans-unit>
        <trans-unit id="6c1fec0a04a3eab043ee811142120d57785cfef0" translate="yes" xml:space="preserve">
          <source>Primitive Literals</source>
          <target state="translated">原始文字</target>
        </trans-unit>
        <trans-unit id="8c8f400f7e3e42d398c134471b34479ab1e3ff12" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, if a directory contained both an &lt;code&gt;.eslintrc&lt;/code&gt; file and a &lt;code&gt;package.json&lt;/code&gt; file with ESLint configuration information, the settings from the two files would be merged together. In 2.0.0, only the settings from the &lt;code&gt;.eslintrc.*&lt;/code&gt; file are used and the ones in &lt;code&gt;package.json&lt;/code&gt; are ignored when both are present. Otherwise, &lt;code&gt;package.json&lt;/code&gt; can still be used with ESLint configuration, but only if no other &lt;code&gt;.eslintrc.*&lt;/code&gt; files are present.</source>
          <target state="translated">2.0.0より前の &lt;code&gt;.eslintrc&lt;/code&gt; 、ディレクトリに.eslintrcファイルとESLint構成情報を含む &lt;code&gt;package.json&lt;/code&gt; ファイルの両方が含まれていた場合、2つのファイルの設定がマージされていました。2.0.0では、 &lt;code&gt;.eslintrc.*&lt;/code&gt; ファイルの設定のみが使用され、 &lt;code&gt;package.json&lt;/code&gt; の設定は両方が存在する場合は無視されます。それ以外の場合は、他の &lt;code&gt;.eslintrc.*&lt;/code&gt; ファイルが存在しない場合にのみ、 &lt;code&gt;package.json&lt;/code&gt; をESLint構成で使用できます。</target>
        </trans-unit>
        <trans-unit id="bacbbe4722ec9b78f85bdddd7ed97a705ae7d9fe" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, new global variables that were standardized as part of ES6 such as &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt; were included in the built-in global environment. This could lead to potential issues when, for example, &lt;code&gt;no-undef&lt;/code&gt; permitted use of the &lt;code&gt;Promise&lt;/code&gt; constructor even in ES5 code where promises are unavailable. In 2.0.0, the built-in environment only includes the standard ES5 global variables, and the new ES6 global variables have been moved to the &lt;code&gt;es6&lt;/code&gt; environment.</source>
          <target state="translated">2.0.0より前のバージョンでは、 &lt;code&gt;Promise&lt;/code&gt; 、 &lt;code&gt;Map&lt;/code&gt; 、 &lt;code&gt;Set&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; など、ES6の一部として標準化された新しいグローバル変数が組み込みグローバル環境に含まれていました。これにより、たとえば、 &lt;code&gt;Promise&lt;/code&gt; が使用できないES5コードでも、un &lt;code&gt;no-undef&lt;/code&gt; がPromiseコンストラクターの使用を許可した場合に、潜在的な問題が発生する可能性があります。2.0.0では、組み込み環境には標準のES5グローバル変数のみが含まれ、新しいES6グローバル変数は &lt;code&gt;es6&lt;/code&gt; 環境に移動されました。</target>
        </trans-unit>
        <trans-unit id="ea53a76cd88b434dcfaff09ec72ada7ae7831a08" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, the way to enable language options was by using &lt;code&gt;ecmaFeatures&lt;/code&gt; in your configuration. In 2.0.0:</source>
          <target state="translated">2.0.0より前の &lt;code&gt;ecmaFeatures&lt;/code&gt; では、言語オプションを有効にする方法は、設定でecmaFeaturesを使用することでした。2.0.0の場合：</target>
        </trans-unit>
        <trans-unit id="6b9f0362f6ea97fabedbee28f3e42f7c63d479c2" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, ESLint required parsers to implement comment attachment, a process where AST nodes would gain additional properties corresponding to their leading and trailing comments in the source file. This made it difficult for users to develop custom parsers, because they would have to replicate the confusing comment attachment semantics required by ESLint.</source>
          <target state="translated">4.0以前のESLintでは、ASTノードがソースファイルの先頭と末尾のコメントに対応したプロパティを取得するために、パーサーはコメント添付を実装する必要がありました。このため、ユーザーがカスタムパーサーを開発するのは難しく、ESLintで必要とされている紛らわしいコメント添付のセマンティクスを再現しなければなりませんでした。</target>
        </trans-unit>
        <trans-unit id="5e3d392b20fe6d9664c81b4a65c6b601daf8e9bf" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, shebang comments in a source file would not appear in the output of &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; or &lt;code&gt;sourceCode.getComments()&lt;/code&gt;, but they would appear in the output of &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; as line comments. This inconsistency led to some confusion for rule developers.</source>
          <target state="translated">4.0前に、ソースファイル内のシェバングコメントの出力には表示されません &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; または &lt;code&gt;sourceCode.getComments()&lt;/code&gt; 、しかし、彼らはの出力に現れる &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; 行コメントとして。この不整合により、ルール開発者は混乱を招きました。</target>
        </trans-unit>
        <trans-unit id="b3be15561d5151f64c56456dc30fa7cef13a71e7" translate="yes" xml:space="preserve">
          <source>Prior to v0.16.0 this rule also enforced that there was only a single line at the end of the file. If you still want this behavior, consider enabling &lt;a href=&quot;no-multiple-empty-lines&quot;&gt;no-multiple-empty-lines&lt;/a&gt; with &lt;code&gt;maxEOF&lt;/code&gt; and/or &lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spaces&lt;/a&gt;.</source>
          <target state="translated">v0.16.0より前のバージョンでは、このルールにより、ファイルの最後に1行のみが存在することが強制されていました。それでもこの動作が必要な場合は、 &lt;code&gt;maxEOF&lt;/code&gt; または&lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spacesで&lt;/a&gt;&lt;a href=&quot;no-multiple-empty-lines&quot;&gt;no-multiple-empty-lines&lt;/a&gt;を有効にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="af52f1493bafbe39bd3dae2bc861bf916727dd6e" translate="yes" xml:space="preserve">
          <source>Prior to v2.0.0, plugins could specify a &lt;code&gt;rulesConfig&lt;/code&gt; for the plugin. The &lt;code&gt;rulesConfig&lt;/code&gt; would automatically be applied whenever someone uses the plugin, which is the opposite of what ESLint does in every other situation (where nothing is on by default). To bring plugins behavior in line, we have removed support for &lt;code&gt;rulesConfig&lt;/code&gt; in plugins.</source>
          <target state="translated">v2.0.0より前のバージョンでは、プラグインはプラグインの &lt;code&gt;rulesConfig&lt;/code&gt; を指定できました。 &lt;code&gt;rulesConfig&lt;/code&gt; は、誰かがESLintは（何もデフォルトでオンになっていない）他のすべての状況で何をするかの反対側にあるプラグインを使用したときに自動的に適用されます。プラグインの動作を一致させるために、プラグインでの &lt;code&gt;rulesConfig&lt;/code&gt; のサポートを削除しました。</target>
        </trans-unit>
        <trans-unit id="692a54c10f74d805a38453bd22bb1d25068c3ba0" translate="yes" xml:space="preserve">
          <source>Processors in Plugins</source>
          <target state="translated">プラグインのプロセッサ</target>
        </trans-unit>
        <trans-unit id="ee555673e8664c98d4ada2d762c610f965ba2a31" translate="yes" xml:space="preserve">
          <source>Processors may make named code blocks such as &lt;code&gt;0.js&lt;/code&gt; and &lt;code&gt;1.js&lt;/code&gt;. ESLint handles such a named code block as a child file of the original file. You can specify additional configurations for named code blocks in the &lt;code&gt;overrides&lt;/code&gt; section of the config. For example, the following disables &lt;code&gt;strict&lt;/code&gt; rule for the named code blocks which end with &lt;code&gt;.js&lt;/code&gt; in markdown files.</source>
          <target state="translated">プロセッサは、 &lt;code&gt;0.js&lt;/code&gt; や &lt;code&gt;1.js&lt;/code&gt; などの名前付きコードブロックを作成できます。ESLintは、このような名前付きコードブロックを元のファイルの子ファイルとして扱います。構成の &lt;code&gt;overrides&lt;/code&gt; セクションで、名前付きコードブロックの追加構成を指定できます。たとえば、次の例では、マークダウンファイルで &lt;code&gt;.js&lt;/code&gt; で終わる名前付きコードブロックの &lt;code&gt;strict&lt;/code&gt; ルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="f32c5098fb499f12ad76958c7a61d5b8091f9763" translate="yes" xml:space="preserve">
          <source>Program is expressed with several code paths. A code path is expressed with objects of two kinds: &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt;.</source>
          <target state="translated">プログラムはいくつかのコードパスで表現されます。コードパスは、 &lt;code&gt;CodePath&lt;/code&gt; と &lt;code&gt;CodePathSegment&lt;/code&gt; の 2種類のオブジェクトで表されます。</target>
        </trans-unit>
        <trans-unit id="42fa885d13da97a910ec7164bf19b94acb08d0f0" translate="yes" xml:space="preserve">
          <source>Programming language style guides are important for the long-term maintainability of software. This guide is based on the &lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;Code Conventions for the Java Programming Language&lt;/a&gt; and &lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;Douglas Crockford's Code Conventions for the JavaScript Programming Language&lt;/a&gt;. Modifications have been made due to my personal experience and preferences.</source>
          <target state="translated">プログラミング言語スタイルガイドは、ソフトウェアの長期保守性にとって重要です。このガイドは&lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;、Javaプログラミング言語&lt;/a&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;のコード規約&lt;/a&gt;とDouglas CrockfordのJavaScriptプログラミング言語のコード規約に基づいています。私の個人的な経験と好みにより、変更が加えられました。</target>
        </trans-unit>
        <trans-unit id="43f3ace69f2fe7131543d9052cb08b303ff904e4" translate="yes" xml:space="preserve">
          <source>Project-level configuration:</source>
          <target state="translated">プロジェクトレベルの設定。</target>
        </trans-unit>
        <trans-unit id="33fb62ee4504c98b469fcbf6c4712f39685712fe" translate="yes" xml:space="preserve">
          <source>Property descriptors in &lt;code&gt;Object.create&lt;/code&gt;, &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and &lt;code&gt;Reflect.defineProperty&lt;/code&gt; methods of the global objects.</source>
          <target state="translated">グローバルオブジェクトの &lt;code&gt;Object.create&lt;/code&gt; 、 &lt;code&gt;Object.defineProperty&lt;/code&gt; 、 &lt;code&gt;Object.defineProperties&lt;/code&gt; 、および &lt;code&gt;Reflect.defineProperty&lt;/code&gt; メソッドのプロパティ記述子。</target>
        </trans-unit>
        <trans-unit id="b5e66a1596415565d4a94aaddcf8bb5751542451" translate="yes" xml:space="preserve">
          <source>Proponents of Yoda conditions highlight that it is impossible to mistakenly use &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.</source>
          <target state="translated">ヨーダ条件の支持者は、リテラル値に割り当てることができないため、 &lt;code&gt;==&lt;/code&gt; の代わりに &lt;code&gt;=&lt;/code&gt; を誤って使用することは不可能であることを強調しています。これを行うと構文エラーが発生し、早い段階で間違いが通知されます。したがって、この方法は、ツールがまだ利用できない初期のプログラミングでは非常に一般的でした。</target>
        </trans-unit>
        <trans-unit id="d36f5aee868ae6db86c6284531cdd8f72d77db1c" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;new-rules&quot;&gt;New Rule&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;new-rules&quot;&gt;新しいルールの&lt;/a&gt;提案</target>
        </trans-unit>
        <trans-unit id="ecaeee3736f17c6a22f424961f98b463abcd212d" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;rule-changes&quot;&gt;Rule Change&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;rule-changes&quot;&gt;ルール変更の&lt;/a&gt;提案</target>
        </trans-unit>
        <trans-unit id="8fde9b438a1e10afec4812ddd08e7722642dc36e" translate="yes" xml:space="preserve">
          <source>Proposing a Rule</source>
          <target state="translated">規則の提案</target>
        </trans-unit>
        <trans-unit id="341849141f80cca77602012c6f342ce4742319fd" translate="yes" xml:space="preserve">
          <source>Proposing a Rule Change</source>
          <target state="translated">ルール変更の提案</target>
        </trans-unit>
        <trans-unit id="86ee7e213745f3cf674455c23534700070da7b53" translate="yes" xml:space="preserve">
          <source>Provide as many unit tests as possible. Your pull request will never be turned down for having too many tests submitted with it!</source>
          <target state="translated">できるだけ多くのユニットテストを提供してください。あなたのプルリクエストは、提出されたテストが多すぎても断られることはありません!</target>
        </trans-unit>
        <trans-unit id="4ffdc87852320c6294c2b02843d1425e91d10cfc" translate="yes" xml:space="preserve">
          <source>Providing Suggestions</source>
          <target state="translated">提案の提供</target>
        </trans-unit>
        <trans-unit id="5591bbc620225df439fe2bdef9369c8238d4af8c" translate="yes" xml:space="preserve">
          <source>Publishing a Shareable Config</source>
          <target state="translated">共有可能な設定の公開</target>
        </trans-unit>
        <trans-unit id="30ab8d084e2209d47a1dc198c8de1e251f390a94" translate="yes" xml:space="preserve">
          <source>Pull Requests</source>
          <target state="translated">プルリクエスト</target>
        </trans-unit>
        <trans-unit id="8317963e9e1ff1e717106bf4888341b278d74c92" translate="yes" xml:space="preserve">
          <source>Push your changes</source>
          <target state="translated">変更を押す</target>
        </trans-unit>
        <trans-unit id="8c720088282bb804281d4141100281d68e2719bb" translate="yes" xml:space="preserve">
          <source>Putting default parameter at last allows function calls to omit optional tail arguments.</source>
          <target state="translated">デフォルトのパラメータを最後に置くことで、関数呼び出しでオプションの末尾引数を省略することができます。</target>
        </trans-unit>
        <trans-unit id="289df8885d703027d487fef77d56fc52e316d891" translate="yes" xml:space="preserve">
          <source>Rather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; node types. For example, a function declaration is represented by &lt;code&gt;FunctionDeclaration&lt;/code&gt; and the &lt;code&gt;with&lt;/code&gt; statement is represented by &lt;code&gt;WithStatement&lt;/code&gt;. You may find the full list of AST node names you can use &lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;on GitHub&lt;/a&gt; and use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser to see what type of nodes your code consists of.</source>
          <target state="translated">オフにする言語機能ごとに個別のルールを作成するのではなく、このルールを使用すると、使用を制限する構文要素を構成できます。これらの要素は、&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;ノードタイプによって表されます。たとえば、関数宣言は &lt;code&gt;FunctionDeclaration&lt;/code&gt; で表され、 &lt;code&gt;with&lt;/code&gt; ステートメントは &lt;code&gt;WithStatement&lt;/code&gt; で表されます。&lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;GitHub&lt;/a&gt;で使用できるASTノード名の完全なリストを見つけ、espreeパーサーで&lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt;を使用して、コードが構成するノードのタイプを確認できます。</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="9ee3f643952093b19948a020203596de344dc34f" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://eslint.org/conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://eslint.org/conduct&quot;&gt;行動規範&lt;/a&gt;を読む</target>
        </trans-unit>
        <trans-unit id="8bf3ca1af55a4ac765bcc067d56c1abf4201ae04" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;行動規範&lt;/a&gt;を読む</target>
        </trans-unit>
        <trans-unit id="3c28870b2e40bf75ddc825d7f6ccf7aef23e7e4b" translate="yes" xml:space="preserve">
          <source>Read-only global variables</source>
          <target state="translated">読み取り専用のグローバル変数</target>
        </trans-unit>
        <trans-unit id="f7f699bcbeea4f59d35cf84d686c1fe9d26c6cd2" translate="yes" xml:space="preserve">
          <source>Reading configuration information from config files (including &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt;)</source>
          <target state="translated">構成ファイル（ &lt;code&gt;.eslintrc&lt;/code&gt; および &lt;code&gt;package.json&lt;/code&gt; を含む）から構成情報を読み取る</target>
        </trans-unit>
        <trans-unit id="c503dd1f9c9f723f78d9b1e948ede74c06ed1112" translate="yes" xml:space="preserve">
          <source>Reading from the file system</source>
          <target state="translated">ファイルシステムからの読み込み</target>
        </trans-unit>
        <trans-unit id="256ac291cd34fa721dc7063e9c7a456d831fad1e" translate="yes" xml:space="preserve">
          <source>Rebase onto upstream</source>
          <target state="translated">上流にリベース</target>
        </trans-unit>
        <trans-unit id="3636419e1cfae4b85f914484288a2e7b2429d45d" translate="yes" xml:space="preserve">
          <source>Rebasing</source>
          <target state="translated">Rebasing</target>
        </trans-unit>
        <trans-unit id="15bc3424085a46a8b413590042e27673eda36b4b" translate="yes" xml:space="preserve">
          <source>Recommended keywords:</source>
          <target state="translated">おすすめのキーワードです。</target>
        </trans-unit>
        <trans-unit id="8532988ca58a814f1543477fc268a1acefe668d0" translate="yes" xml:space="preserve">
          <source>Redeclarations of read-only global variables and assignments to read-only global variables.</source>
          <target state="translated">読み取り専用グローバル変数の再宣言と、読み取り専用グローバル変数への代入。</target>
        </trans-unit>
        <trans-unit id="4462d29bec3d07aaf9a71ae4d7273bee7d450028" translate="yes" xml:space="preserve">
          <source>Reference Information</source>
          <target state="translated">参考情報</target>
        </trans-unit>
        <trans-unit id="df9e76446650cac75008b6bf87079e749a453bdb" translate="yes" xml:space="preserve">
          <source>Reference interface</source>
          <target state="translated">参照インタフェース</target>
        </trans-unit>
        <trans-unit id="53c2a1c2bb6e1d4d8148660156aec1a0a17d24a8" translate="yes" xml:space="preserve">
          <source>ReferenceError: assignment to undeclared variable</source>
          <target state="translated">ReferenceError:定義されていない変数への代入</target>
        </trans-unit>
        <trans-unit id="eb264a799738b600bd47d5135f4fc05dfcd5b1d5" translate="yes" xml:space="preserve">
          <source>References to scoped plugins in config files are now required to include the scope</source>
          <target state="translated">コンフィグファイル内のスコープ付きプラグインへの参照は、スコープを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="e4409d5bd36638733bfa9227649affbe8de8da69" translate="yes" xml:space="preserve">
          <source>Reflect.apply</source>
          <target state="translated">Reflect.apply</target>
        </trans-unit>
        <trans-unit id="f2f9fd068e4242fbb4c065fab823928d6658dcc6" translate="yes" xml:space="preserve">
          <source>Reflect.defineProperty</source>
          <target state="translated">Reflect.defineProperty</target>
        </trans-unit>
        <trans-unit id="d9c40e72ed42277e621938140990fecec31860d2" translate="yes" xml:space="preserve">
          <source>Reflect.deleteProperty</source>
          <target state="translated">Reflect.deleteProperty</target>
        </trans-unit>
        <trans-unit id="dca299dec7c4b27406c99a9db8613312969fc8ef" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyDescriptor</source>
          <target state="translated">Reflect.getOwnPropertyDescriptor</target>
        </trans-unit>
        <trans-unit id="9e55b43471522e73de67aec1ebffc5cdb9fa1436" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyNames</source>
          <target state="translated">Reflect.getOwnPropertyNames</target>
        </trans-unit>
        <trans-unit id="c4ccc5cd40402aca6f2327273b607a16273c4cf3" translate="yes" xml:space="preserve">
          <source>Reflect.getPrototypeOf</source>
          <target state="translated">Reflect.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="67b946573d9e6181078c2c26d4ca78a319f779cb" translate="yes" xml:space="preserve">
          <source>Reflect.isExtensible</source>
          <target state="translated">Reflect.isExtensible</target>
        </trans-unit>
        <trans-unit id="9578443035eb8705bd126e9acab6f34b58453535" translate="yes" xml:space="preserve">
          <source>Reflect.preventExtensions</source>
          <target state="translated">Reflect.preventExtensions</target>
        </trans-unit>
        <trans-unit id="a5a0796157a708b39407cdcc3b1149e74aa1ba55" translate="yes" xml:space="preserve">
          <source>Reflect.setPrototypeOf</source>
          <target state="translated">Reflect.setPrototypeOf</target>
        </trans-unit>
        <trans-unit id="5a1a35c83df714211f74bb546dc5facc26363344" translate="yes" xml:space="preserve">
          <source>RegExp &lt;code&gt;u&lt;/code&gt; flag has two effects:</source>
          <target state="translated">RegExp &lt;code&gt;u&lt;/code&gt; フラグには2つの効果があります。</target>
        </trans-unit>
        <trans-unit id="bc019f867ae1e63caad1e171c9ac68f393022fd6" translate="yes" xml:space="preserve">
          <source>RegExp literals such as &lt;code&gt;(/abc/).test(var)&lt;/code&gt; to avoid conflicts with the &lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt; rule</source>
          <target state="translated">&lt;code&gt;(/abc/).test(var)&lt;/code&gt; などのRegExpリテラルは、&lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt;ルールとの競合を回避します</target>
        </trans-unit>
        <trans-unit id="9082bde09754114a75d35ae7be3e2cf1598e0128" translate="yes" xml:space="preserve">
          <source>Regardless of your targeted environment, these escape sequences shouldn't be used when writing new code.</source>
          <target state="translated">対象とする環境に関わらず、新しいコードを書く際には、これらのエスケープシーケンスを使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="7114653a737d7346ec01e388401a05144edff375" translate="yes" xml:space="preserve">
          <source>Regular expression literals, e.g., &lt;code&gt;/abc/u&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/abc/u&lt;/code&gt; などの正規表現リテラル。</target>
        </trans-unit>
        <trans-unit id="a0ccd845025a375ba8f53989cf7554162e8cbfee" translate="yes" xml:space="preserve">
          <source>Regular expressions can be very complex and difficult to understand, which is why it's important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:</source>
          <target state="translated">正規表現は非常に複雑で理解するのが難しい場合があるので、ミスを避けるためにはできるだけシンプルにしておくことが重要です。正規表現で間違いやすいことの1つは、次のように複数のスペースを使用することです。</target>
        </trans-unit>
        <trans-unit id="73df01ef95fe676ecd6771adb485003ded6e2733" translate="yes" xml:space="preserve">
          <source>Related Rules</source>
          <target state="translated">関連ルール</target>
        </trans-unit>
        <trans-unit id="33749d1fd374471a64ca2130b8acf29edc1c7f83" translate="yes" xml:space="preserve">
          <source>Related rules</source>
          <target state="translated">関連ルール</target>
        </trans-unit>
        <trans-unit id="c8ca31e64125f97916f5430dc1a846a8fb66cb93" translate="yes" xml:space="preserve">
          <source>Relational Operators: &lt;code&gt;&quot;in&quot;&lt;/code&gt;, &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</source>
          <target state="translated">関係演算子： &lt;code&gt;&quot;in&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e4f647ac04e2d41dbb5b8e09ff6b1cdb35b950d" translate="yes" xml:space="preserve">
          <source>Relative glob patterns</source>
          <target state="translated">相対的なグロブパターン</target>
        </trans-unit>
        <trans-unit id="e67d73e5c8870b0aee2e6a5b9e1177d2a9866243" translate="yes" xml:space="preserve">
          <source>Remember that ESLint is completely pluggable, which means you can create your own rules and distribute them using plugins. We did this on purpose because we don't want to be the gatekeepers for all possible rules. Even if we don't accept a rule into the core, that doesn't mean you can't have the exact rule that you want. See the &lt;a href=&quot;../working-with-rules&quot;&gt;working with rules&lt;/a&gt; and &lt;a href=&quot;../working-with-plugins&quot;&gt;working with plugins&lt;/a&gt; documentation for more information.</source>
          <target state="translated">ESLintは完全にプラグイン可能です。つまり、独自のルールを作成し、プラグインを使用してそれらを配布できます。これは、可能なすべてのルールのゲートキーパーになりたくないためです。コアへのルールを受け入れない場合でも、必要なルールを正確に設定できないというわけではありません。詳細については&lt;a href=&quot;../working-with-rules&quot;&gt;、ルールの操作&lt;/a&gt;と&lt;a href=&quot;../working-with-plugins&quot;&gt;プラグインの操作の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="960f6a4b27df973ccb71be9fd4f6a93b7639f03e" translate="yes" xml:space="preserve">
          <source>Remove the severity from the schema</source>
          <target state="translated">スキーマから深刻度を削除する</target>
        </trans-unit>
        <trans-unit id="b5e77c5c02a90c01b16fea8f21a1083425ebe0e0" translate="yes" xml:space="preserve">
          <source>Removed</source>
          <target state="translated">Removed</target>
        </trans-unit>
        <trans-unit id="546fa02adabca3448dcb8a362469072d1db5cf13" translate="yes" xml:space="preserve">
          <source>Removed Rules</source>
          <target state="translated">削除されたルール</target>
        </trans-unit>
        <trans-unit id="9e30b455061dff243e207fa18925b8c54a0ca2ad" translate="yes" xml:space="preserve">
          <source>Removed rule</source>
          <target state="translated">ルールの削除</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="c385e347b2af0a4d67c9b1c9902c4b0b140d1abd" translate="yes" xml:space="preserve">
          <source>Replacement</source>
          <target state="translated">Replacement</target>
        </trans-unit>
        <trans-unit id="8ada39071f07cad84f271436e272e3f53d42073a" translate="yes" xml:space="preserve">
          <source>Report Unused &lt;code&gt;eslint-disable&lt;/code&gt; Comments</source>
          <target state="translated">未使用の &lt;code&gt;eslint-disable&lt;/code&gt; コメントを報告する</target>
        </trans-unit>
        <trans-unit id="a5bb62e8d7d2cc84df075be591e2610b579c891d" translate="yes" xml:space="preserve">
          <source>Reported problems have the following location information:</source>
          <target state="translated">報告された問題は、以下の位置情報を持っています。</target>
        </trans-unit>
        <trans-unit id="2c54bc0da768d4c877c77485784187863c28ad3c" translate="yes" xml:space="preserve">
          <source>Reporting Bugs</source>
          <target state="translated">バグの報告</target>
        </trans-unit>
        <trans-unit id="e73f2c6a276df317f0e8251b594b9c3a7772ea2d" translate="yes" xml:space="preserve">
          <source>Reporting a security vulnerability</source>
          <target state="translated">セキュリティ上の脆弱性を報告</target>
        </trans-unit>
        <trans-unit id="4ba09f6e2cd39c11132e45ba62fe27e6d6484469" translate="yes" xml:space="preserve">
          <source>Reporting back the results of the execution</source>
          <target state="translated">実行結果の報告</target>
        </trans-unit>
        <trans-unit id="7fb8531d32f9fc2cf4e7e644d67cb16c9b2b084a" translate="yes" xml:space="preserve">
          <source>Reporting warnings when certain patterns are found</source>
          <target state="translated">特定のパターンが見つかった場合の警告の報告</target>
        </trans-unit>
        <trans-unit id="924d4980aa5047bdf606a251026020006a83efbe" translate="yes" xml:space="preserve">
          <source>Requesting a &lt;a href=&quot;changes&quot;&gt;Change&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;changes&quot;&gt;変更を&lt;/a&gt;リクエストする</target>
        </trans-unit>
        <trans-unit id="9670695fdbad92ea104f8e7230b9955bfb27da6e" translate="yes" xml:space="preserve">
          <source>Require === and !== (eqeqeq)</source>
          <target state="translated">必要なもの ===and !==(eqeqeq)</target>
        </trans-unit>
        <trans-unit id="c9f4e2dc2e937fe6aab7b4d4c5b9b14070f93f68" translate="yes" xml:space="preserve">
          <source>Require Brace Style (brace-style)</source>
          <target state="translated">必要なブレーススタイル(ブレーススタイル</target>
        </trans-unit>
        <trans-unit id="29f8a3517efa09985e94aaa3daa4acd42449e8f9" translate="yes" xml:space="preserve">
          <source>Require CamelCase (camelcase)</source>
          <target state="translated">キャメルケース(キャメルケース)を必要とする</target>
        </trans-unit>
        <trans-unit id="e6c502a34157a55662fdb96c649dfac3dca1c26c" translate="yes" xml:space="preserve">
          <source>Require Consistent This (consistent-this)</source>
          <target state="translated">一貫性のあるこれを要求する</target>
        </trans-unit>
        <trans-unit id="32bfc48d08ec21670f3f949a648100cdfb446f0d" translate="yes" xml:space="preserve">
          <source>Require Default Case in Switch Statements (default-case)</source>
          <target state="translated">スイッチ文でデフォルトの大文字小文字を要求する (default-case)</target>
        </trans-unit>
        <trans-unit id="c4bf33ba1bc063ecb08ea78c74d6e52247e78f9e" translate="yes" xml:space="preserve">
          <source>Require Dot Notation (dot-notation)</source>
          <target state="translated">必要なドット記法</target>
        </trans-unit>
        <trans-unit id="a3af1a645caf25364b15e6b49f5552b803adff40" translate="yes" xml:space="preserve">
          <source>Require Following Curly Brace Conventions (curly)</source>
          <target state="translated">カーリーブレースの規則に従うことを要求する(カーリー</target>
        </trans-unit>
        <trans-unit id="11631863fa9bc606f91797315db692789e0485a5" translate="yes" xml:space="preserve">
          <source>Require Guarding for-in (guard-for-in)</source>
          <target state="translated">要求ガードフォーイン(ガードフォーイン</target>
        </trans-unit>
        <trans-unit id="ad26fbff7070e7dd41742c51df353b22c939a838" translate="yes" xml:space="preserve">
          <source>Require IIFEs to be Wrapped (wrap-iife)</source>
          <target state="translated">IIFEにラッピングを求める(ラップアイフ</target>
        </trans-unit>
        <trans-unit id="eedd486c2cd16ec02fb12f728bf82116a2f3dc18" translate="yes" xml:space="preserve">
          <source>Require Object Literal Shorthand Syntax (object-shorthand)</source>
          <target state="translated">要求オブジェクトリテラル短縮構文</target>
        </trans-unit>
        <trans-unit id="0f941f716fc3ec6b74fefe19704d5a768596d353" translate="yes" xml:space="preserve">
          <source>Require Or Disallow Space Before Blocks (space-before-blocks)</source>
          <target state="translated">ブロックの前のスペースを必要とするか否か (スペース-ブロックの前のスペースを必要とするか否か)</target>
        </trans-unit>
        <trans-unit id="ba41a13b01bc7714d82241f45ba769d95682a9b8" translate="yes" xml:space="preserve">
          <source>Require Radix Parameter (radix)</source>
          <target state="translated">必要な Radix パラメータ (radix)</target>
        </trans-unit>
        <trans-unit id="4649036a73fddd6b7bf8df27f93ba7f530bd0494" translate="yes" xml:space="preserve">
          <source>Require Regex Literals to be Wrapped (wrap-regex)</source>
          <target state="translated">Regex リテラルがラップされることを要求する (wrap-regex)</target>
        </trans-unit>
        <trans-unit id="7b4e071d32a73a0c6741662339d8cb1bea0829d1" translate="yes" xml:space="preserve">
          <source>Require Variable Declarations to be at the top of their scope (vars-on-top)</source>
          <target state="translated">変数宣言がスコープの先頭にあることを要求する (vars-on-top)</target>
        </trans-unit>
        <trans-unit id="c6b80ff02932afc7cc099abcdbfedd2d3d1808fb" translate="yes" xml:space="preserve">
          <source>Require braces in arrow function body (arrow-body-style)</source>
          <target state="translated">矢印関数の本体に中括弧を必要とする(矢印ボディスタイル)。</target>
        </trans-unit>
        <trans-unit id="5f98bbcd6bc31019c27bf6149a981097646acd25" translate="yes" xml:space="preserve">
          <source>Require grouped accessor pairs in object literals and classes (grouped-accessor-pairs)</source>
          <target state="translated">オブジェクトリテラルとクラスでグループ化されたアクセサペアを要求する (grouped-accessor-pairs)</target>
        </trans-unit>
        <trans-unit id="be3fbbc21cd8535fe4650e22a2253265af6b017c" translate="yes" xml:space="preserve">
          <source>Require or disallow Yoda Conditions (yoda)</source>
          <target state="translated">ヨーダの条件を要求する・しない(ヨーダ)</target>
        </trans-unit>
        <trans-unit id="3150215ce32a56ca1cf1f6ef2c30ca41b3749bd6" translate="yes" xml:space="preserve">
          <source>Require or disallow a space before function parenthesis (space-before-function-paren)</source>
          <target state="translated">関数括弧の前にスペースを要求するか否か (space-before-function-paren)</target>
        </trans-unit>
        <trans-unit id="5b30f13883fdda696fb76a56e4bd8aac05c52c33" translate="yes" xml:space="preserve">
          <source>Require or disallow named &lt;code&gt;function&lt;/code&gt; expressions (func-names)</source>
          <target state="translated">名前 &lt;code&gt;function&lt;/code&gt; 式（関数名）を要求または禁止する</target>
        </trans-unit>
        <trans-unit id="6923954808ca2c5768d91fe26208484172008328" translate="yes" xml:space="preserve">
          <source>Require or disallow padding lines between statements (padding-line-between-statements)</source>
          <target state="translated">ステートメント間のパディング行を要求するか否か (padding-line-between-statements)</target>
        </trans-unit>
        <trans-unit id="64d620bf8940dde332be8b599fc3f3b67a15d6b1" translate="yes" xml:space="preserve">
          <source>Require or disallow spaces before/after unary operators (space-unary-ops)</source>
          <target state="translated">単項演算子(スペース-単項演算子)の前後にスペースを必要とするか否か。</target>
        </trans-unit>
        <trans-unit id="2e4ed016a312c06b04085359a4f3ce7e5514db8a" translate="yes" xml:space="preserve">
          <source>Require or disallow spacing between template tags and their literals (template-tag-spacing)</source>
          <target state="translated">テンプレートタグとそのリテラルの間の間隔を要求するか否か (template-tag-spacing)</target>
        </trans-unit>
        <trans-unit id="9a6d4f3d8ac0a43fa465b1bfeb17312af22eec9d" translate="yes" xml:space="preserve">
          <source>Require or disallow the Unicode Byte Order Mark (BOM) (unicode-bom)</source>
          <target state="translated">ユニコード・バイト・オーダー・マーク(BOM)(unicode-bom)を要求するか否か。</target>
        </trans-unit>
        <trans-unit id="5414253a02d05bc00109d790a3a30b0adf3a9258" translate="yes" xml:space="preserve">
          <source>Require parens in arrow function arguments (arrow-parens)</source>
          <target state="translated">矢印関数の引数にパーレンを要求する(arrow-parens</target>
        </trans-unit>
        <trans-unit id="6c6d01b7d910c82fc9e7e87b504603648dc910c7" translate="yes" xml:space="preserve">
          <source>Require regex literals to escape division operators.</source>
          <target state="translated">除算演算子をエスケープするために正規表現リテラルを必要とする。</target>
        </trans-unit>
        <trans-unit id="c6c78079204bca77a98f474edfbb061ab779251e" translate="yes" xml:space="preserve">
          <source>Require space before/after arrow function's arrow (arrow-spacing)</source>
          <target state="translated">矢印関数の矢印の前後にスペースを必要とする(矢印間隔)</target>
        </trans-unit>
        <trans-unit id="3d1e419b6e19b50c4107c427e372b159f6aa3f96" translate="yes" xml:space="preserve">
          <source>Require spaces following &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, and &lt;code&gt;case&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; の後にスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="2aa899302df0644585abff63972bace73e121583" translate="yes" xml:space="preserve">
          <source>Require spaces following unary word operators.</source>
          <target state="translated">単項演算子の後にスペースを必要とします。</target>
        </trans-unit>
        <trans-unit id="72a6e138634f7c51472518cc96850ccfd3e29b3f" translate="yes" xml:space="preserve">
          <source>Require using arrow functions for callbacks (prefer-arrow-callback)</source>
          <target state="translated">コールバックに矢印関数を使用することを必須とします。</target>
        </trans-unit>
        <trans-unit id="1d4909a86e26429441b20437aa655cdf89900831" translate="yes" xml:space="preserve">
          <source>Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)</source>
          <target state="translated">コメント (スペース付きコメント)の最初に空白 (スペースまたはタブ)を必要とするかどうか。</target>
        </trans-unit>
        <trans-unit id="76af06a553a0453a9044a446da55d272ab01d8fe" translate="yes" xml:space="preserve">
          <source>Requires that every file have a top-level &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statement.</source>
          <target state="translated">すべてのファイルに最上位の &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ステートメントが必要です。</target>
        </trans-unit>
        <trans-unit id="e58d216d4c343337c98dbf82f961ebd1b1a6fd84" translate="yes" xml:space="preserve">
          <source>Requiring Configuration to Run</source>
          <target state="translated">実行するための設定が必要</target>
        </trans-unit>
        <trans-unit id="a190ae07585f55210601db70caeb73d10cf5a08d" translate="yes" xml:space="preserve">
          <source>Reserved words as property names</source>
          <target state="translated">プロパティ名としての予約語</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="787f008daf743bf86dcef2a2f647bc232a0260e8" translate="yes" xml:space="preserve">
          <source>Respond to comments left on the pull request from team members. Remember, we want to help you land your code, so please be receptive to our feedback.</source>
          <target state="translated">チームメンバーからのプルリクエストに残されたコメントに反応してください。私たちはあなたのコードを着地させる手助けをしたいと考えていますので、私たちのフィードバックを受け止めてください。</target>
        </trans-unit>
        <trans-unit id="5e8db4f15f13d726195782f734cfad7c22163767" translate="yes" xml:space="preserve">
          <source>Restrict what can be thrown as an exception (no-throw-literal)</source>
          <target state="translated">例外として投げられるものを制限する (スローリテラルではない)</target>
        </trans-unit>
        <trans-unit id="d0dfe217a11c007cdb80ffac3d869a5f9a91d024" translate="yes" xml:space="preserve">
          <source>Restricting syntax with selectors</source>
          <target state="translated">セレクタで構文を制限する</target>
        </trans-unit>
        <trans-unit id="0cde1762953d450159956d185082cff8d76cd6b3" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="translated">結果の実際の構成： &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="637d7bf830d8b7c31d75616f1f6184a3ad69451f" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</source>
          <target state="translated">結果の実際の構成： &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b969c8dc0ad380e6594b1beedc5370d8f8a5d756" translate="yes" xml:space="preserve">
          <source>Retrieves a formatter, which you can then use to format a report object. The argument is either the name of a built-in formatter:</source>
          <target state="translated">フォーマッタを取得し、それを使用してレポートオブジェクトをフォーマットすることができます。引数には、組み込みのフォーマッタの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="426dd4f5734405b3041af3bb0cf97c4f743e8aa6" translate="yes" xml:space="preserve">
          <source>Returning the correct exit code</source>
          <target state="translated">正しい終了コードを返す</target>
        </trans-unit>
        <trans-unit id="a8af8ce64c5e78a1bab5c7411bdc15d47c7d3cee" translate="yes" xml:space="preserve">
          <source>Rollup: &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</source>
          <target state="translated">ロールアップ：&lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee3c4356687403593882e1c450ecd5fa91ef9176" translate="yes" xml:space="preserve">
          <source>Rule Acceptance Criteria</source>
          <target state="translated">ルールの受け入れ基準</target>
        </trans-unit>
        <trans-unit id="4fea3171fe249e115dde51b612942d51ff597112" translate="yes" xml:space="preserve">
          <source>Rule Basics</source>
          <target state="translated">ルールの基本</target>
        </trans-unit>
        <trans-unit id="58f4d8dcadb0bda6b1de9bc0a5d352f60cf07234" translate="yes" xml:space="preserve">
          <source>Rule Changes</source>
          <target state="translated">ルールの変更</target>
        </trans-unit>
        <trans-unit id="7fd1351f99409305b16b0a09a4498bd284b5d93e" translate="yes" xml:space="preserve">
          <source>Rule Deprecation</source>
          <target state="translated">ルール非推奨</target>
        </trans-unit>
        <trans-unit id="2f74fe952a58aefbda52fe4dd186b37f5595f912" translate="yes" xml:space="preserve">
          <source>Rule Details</source>
          <target state="translated">ルールの詳細</target>
        </trans-unit>
        <trans-unit id="a6cbaaefbab1ddfd94efe95cec74c44f36be693f" translate="yes" xml:space="preserve">
          <source>Rule Naming Conventions</source>
          <target state="translated">ルールの命名規則</target>
        </trans-unit>
        <trans-unit id="3183951c7dd470388a3c3557d1a5436eae05d87f" translate="yes" xml:space="preserve">
          <source>Rule Schema Changes</source>
          <target state="translated">ルールスキーマの変更</target>
        </trans-unit>
        <trans-unit id="793bcb95f3d538bb319a28344fffc4123fe887c4" translate="yes" xml:space="preserve">
          <source>Rule Unit Tests</source>
          <target state="translated">ルールユニットテスト</target>
        </trans-unit>
        <trans-unit id="ebc497fdd0042b59fbb043aa6dad9e62ad6aaedd" translate="yes" xml:space="preserve">
          <source>Rule configuration are validated more strictly</source>
          <target state="translated">ルール設定の検証はより厳密に</target>
        </trans-unit>
        <trans-unit id="b423a892d42c8b952873772e3d160731bd071f84" translate="yes" xml:space="preserve">
          <source>Rule source</source>
          <target state="translated">ルールソース</target>
        </trans-unit>
        <trans-unit id="c79090f879452ce67b81c8904f848b8ac0346c07" translate="yes" xml:space="preserve">
          <source>Rule to disallow a duplicate case label (no-duplicate-case)</source>
          <target state="translated">重複した大文字小文字のラベルを許可しないルール (重複しない大文字小文字)</target>
        </trans-unit>
        <trans-unit id="a6dc24b3b766471c01f26defe2df961bd51fa80c" translate="yes" xml:space="preserve">
          <source>RuleTester</source>
          <target state="translated">RuleTester</target>
        </trans-unit>
        <trans-unit id="bb11a8e3f8712e36e7cd9d1c615a4e3dbb03336a" translate="yes" xml:space="preserve">
          <source>Rules</source>
          <target state="translated">Rules</target>
        </trans-unit>
        <trans-unit id="8af516527308d5f596f472b28e50707a3c2ec990" translate="yes" xml:space="preserve">
          <source>Rules are now required to provide messages along with reports</source>
          <target state="translated">レポートと一緒にメッセージを提供することが求められるようになりました。</target>
        </trans-unit>
        <trans-unit id="c130e2f455ef978067c1ba9937f4a4b55ad9b4d6" translate="yes" xml:space="preserve">
          <source>Rules in ESLint are grouped by category to help you understand their purpose.</source>
          <target state="translated">ESLintのルールはカテゴリーごとにグループ化されており、目的を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a375a11830a6fc15a9c077874fa2553a5e211c2a" translate="yes" xml:space="preserve">
          <source>Rules in Plugins</source>
          <target state="translated">プラグインのルール</target>
        </trans-unit>
        <trans-unit id="6012963a27096009406f4a3e3efbeb71a5dd3e0c" translate="yes" xml:space="preserve">
          <source>Rules like &lt;a href=&quot;../rules/max-len&quot;&gt;&lt;code&gt;max-len&lt;/code&gt;&lt;/a&gt; accept a string option which is interpreted as a regular expression. In ESLint v6.0.0, these regular expressions are interpreted with the &lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode flag&lt;/a&gt;, which should exhibit more reasonable behavior when matching characters like astral symbols. Unicode regexes also validate escape sequences more strictly than non-unicode regexes.</source>
          <target state="translated">&lt;a href=&quot;../rules/max-len&quot;&gt; &lt;code&gt;max-len&lt;/code&gt; の&lt;/a&gt;ようなルールは、正規表現として解釈される文字列オプションを受け入れます。ESLint v6.0.0では、これらの正規表現は&lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicodeフラグ&lt;/a&gt;で解釈されます。これにより、アストラルシンボルなどの文字を照合するときに、より合理的な動作が示されます。Unicode正規表現は、非Unicode正規表現よりも厳密にエスケープシーケンスを検証します。</target>
        </trans-unit>
        <trans-unit id="ce446a008739b0122bfbf913623e68d18926810d" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="translated">ルールは &lt;code&gt;schema&lt;/code&gt; プロパティをエクスポートする場合があります。これは、ESLintが構成オプションを検証し、 &lt;code&gt;context.options&lt;/code&gt; でルールに渡される前に無効または予期しない入力を防ぐために使用されるルールのオプションの&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSONスキーマ&lt;/a&gt;形式の説明です。</target>
        </trans-unit>
        <trans-unit id="e1d45be617bb66d659fc889df5d9d9e9f2f9e9e4" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="translated">ルールは &lt;code&gt;schema&lt;/code&gt; プロパティをエクスポートできます。これは、ESLintが構成オプションを検証し、 &lt;code&gt;context.options&lt;/code&gt; でルールに渡される前に無効または予期しない入力を防ぐために使用される、ルールのオプションの&lt;a href=&quot;https://json-schema.org/&quot;&gt;JSONスキーマ&lt;/a&gt;形式の説明です。</target>
        </trans-unit>
        <trans-unit id="93c2759fe03a902a67d153b036b0d4f1c07d1f3c" translate="yes" xml:space="preserve">
          <source>Rules will be deprecated as needed, and marked as such in all documentation.</source>
          <target state="translated">ルールは必要に応じて非推奨とし、すべてのドキュメントにそのようにマークします。</target>
        </trans-unit>
        <trans-unit id="e93f0f77000adc61fb508077599d138239b58cd6" translate="yes" xml:space="preserve">
          <source>Rules will never be removed from ESLint.</source>
          <target state="translated">ルールがESLintから削除されることはありません。</target>
        </trans-unit>
        <trans-unit id="3d27ff71d65030f0e00381932a052d2a17b92776" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;command line interface&lt;/a&gt; using the &lt;code&gt;--rulesdir&lt;/code&gt; option to specify the location of your runtime rules.</source>
          <target state="translated">&lt;code&gt;--rulesdir&lt;/code&gt; オプションを使用して&lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;コマンドラインインターフェース&lt;/a&gt;を実行し、ランタイムルールの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="95227c2b581e8476ae8110dc2d62c41753abc92b" translate="yes" xml:space="preserve">
          <source>Run the tests</source>
          <target state="translated">テストの実行</target>
        </trans-unit>
        <trans-unit id="82584eccefdf0e64733530fb7b37a5c4e7baadbe" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;eslint&lt;/code&gt; with the previous custom formatter,</source>
          <target state="translated">以前のカスタムフォーマッタで &lt;code&gt;eslint&lt;/code&gt; を実行すると、</target>
        </trans-unit>
        <trans-unit id="cc4ca7c771cd08213f4b8be7b584910f7669bad1" translate="yes" xml:space="preserve">
          <source>Running Individual Tests</source>
          <target state="translated">個別テストの実行</target>
        </trans-unit>
        <trans-unit id="441a534445ce234b3c86dbe18e6044480f3bedfd" translate="yes" xml:space="preserve">
          <source>Running individual tests is useful when you're working on a specific bug and iterating on the solution. You should be sure to run &lt;code&gt;npm test&lt;/code&gt; before submitting a pull request.</source>
          <target state="translated">個々のテストを実行することは、特定のバグに取り組み、ソリューションを反復するときに役立ちます。プルリクエストを送信する前に、必ず &lt;code&gt;npm test&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="5d976eb8e273ca6d6ba9fdfa6ef367a56a3b6ffd" translate="yes" xml:space="preserve">
          <source>Running the tests is the best way to ensure you have correctly set up your development environment. Make sure you're in the &lt;code&gt;eslint&lt;/code&gt; directory and run:</source>
          <target state="translated">テストを実行することは、開発環境を正しく設定したことを確認するための最良の方法です。 &lt;code&gt;eslint&lt;/code&gt; ディレクトリにいることを確認して実行します。</target>
        </trans-unit>
        <trans-unit id="d106aea3ee94c9ea07b2d08364473f5561ff6c88" translate="yes" xml:space="preserve">
          <source>Runs a subset of tests in PhantomJS</source>
          <target state="translated">PhantomJSでテストのサブセットを実行する</target>
        </trans-unit>
        <trans-unit id="3a49577a7bd2d4bd0341a073ea8ac28454947600" translate="yes" xml:space="preserve">
          <source>Runs all tests on Node.js</source>
          <target state="translated">すべてのテストをNode.js上で実行する</target>
        </trans-unit>
        <trans-unit id="2242ca7138a532d29176cff8e842e87d6315b52e" translate="yes" xml:space="preserve">
          <source>Runs just the JavaScript and JSON linting on the repository</source>
          <target state="translated">リポジトリ上でJavaScriptとJSONのリンティングだけを実行します。</target>
        </trans-unit>
        <trans-unit id="16d64887294214d8ed081b14945edfe9e11fdda5" translate="yes" xml:space="preserve">
          <source>Runtime Rules</source>
          <target state="translated">ランタイムルール</target>
        </trans-unit>
        <trans-unit id="7f506fb7f4c5e2c0e5cf2c5fa73b92aa33edf743" translate="yes" xml:space="preserve">
          <source>Runtime deprecation warnings for &lt;code&gt;~/.eslintrc.*&lt;/code&gt; config files</source>
          <target state="translated">&lt;code&gt;~/.eslintrc.*&lt;/code&gt; ファイルのランタイム非推奨警告</target>
        </trans-unit>
        <trans-unit id="735c74977973d2da5bffd227fd5f002279654583" translate="yes" xml:space="preserve">
          <source>Runtime rules are written in the same format as all other rules. Create your rule as you would any other and then follow these steps:</source>
          <target state="translated">ランタイム ルールは、他のすべてのルールと同じ形式で記述されます。他のルールと同様にルールを作成し、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="d4a37f09fbd0b4d14017c11606211cf2ba713d3b" translate="yes" xml:space="preserve">
          <source>Sails.js: &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;sails-hook-lint&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</source>
          <target state="translated">Sails.js：sails &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;-hook-lint&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09d7f145b9b7e1d0c79daf58a80e9abbdc849945" translate="yes" xml:space="preserve">
          <source>Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).</source>
          <target state="translated">上の指摘と同じ理由です。あまり頻繁に使用される用語を設定すべきではありません(コメントで使用されている母国語の中心部分など)。</target>
        </trans-unit>
        <trans-unit id="7c671e8c47943a8c325952dde1f0ea58ab681314" translate="yes" xml:space="preserve">
          <source>Scope Analysis Changes</source>
          <target state="translated">スコープ分析の変更</target>
        </trans-unit>
        <trans-unit id="36ab5b6d2a8bb7e55f7b1d6b39e4e5ce11688937" translate="yes" xml:space="preserve">
          <source>Scope Type</source>
          <target state="translated">スコープタイプ</target>
        </trans-unit>
        <trans-unit id="1ababc4ffaa5b7bdf69961b71c11caa9ddda5aef" translate="yes" xml:space="preserve">
          <source>Scope interface</source>
          <target state="translated">スコープインターフェース</target>
        </trans-unit>
        <trans-unit id="0a313e66995747d51d210db31cc5a359aecf5923" translate="yes" xml:space="preserve">
          <source>ScopeManager</source>
          <target state="translated">ScopeManager</target>
        </trans-unit>
        <trans-unit id="f83f415575654aec918367fa7b4efd53484afeb7" translate="yes" xml:space="preserve">
          <source>ScopeManager interface</source>
          <target state="translated">スコープマネージャインタフェース</target>
        </trans-unit>
        <trans-unit id="9f61e165e4f63a9799a4482983a897b3c392fb00" translate="yes" xml:space="preserve">
          <source>Second option</source>
          <target state="translated">2つ目のオプション</target>
        </trans-unit>
        <trans-unit id="37b1dc04082b220b42be965eea192bef3c547ba5" translate="yes" xml:space="preserve">
          <source>Second, it advances to &lt;code&gt;ForStatement.body&lt;/code&gt;. Of course the &lt;code&gt;body&lt;/code&gt; segment is preceded by the &lt;code&gt;test&lt;/code&gt; segment. It keeps the &lt;code&gt;update&lt;/code&gt; segment hovering.</source>
          <target state="translated">次に、 &lt;code&gt;ForStatement.body&lt;/code&gt; に進みます。もちろん、 &lt;code&gt;body&lt;/code&gt; 部分の前に &lt;code&gt;test&lt;/code&gt; 部分があります。 &lt;code&gt;update&lt;/code&gt; セグメントがホバリングし続けます。</target>
        </trans-unit>
        <trans-unit id="8323971eba037489129f23f49f88dde8358fa8ad" translate="yes" xml:space="preserve">
          <source>Second, it creates the looping path. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">次に、ループパスを作成します。現時点では、次のセグメントはすでに存在しているため、 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; イベントは発生しません。それは発火 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="5b4acc9dc16ce636a836361190495f1196e2d6f8" translate="yes" xml:space="preserve">
          <source>Section 1: Get the &lt;a href=&quot;source-code&quot;&gt;Source Code&lt;/a&gt;</source>
          <target state="translated">セクション1：&lt;a href=&quot;source-code&quot;&gt;ソースコードを&lt;/a&gt;入手する</target>
        </trans-unit>
        <trans-unit id="3b1637242cb5f4b3e36d4492cd36c48e74446f57" translate="yes" xml:space="preserve">
          <source>Section 2: Set up a &lt;a href=&quot;development-environment&quot;&gt;Development Environment&lt;/a&gt;</source>
          <target state="translated">セクション2：&lt;a href=&quot;development-environment&quot;&gt;開発環境の&lt;/a&gt;セットアップ</target>
        </trans-unit>
        <trans-unit id="78f0e7c8b704185ecfe739a5f8c33c68a075ef9e" translate="yes" xml:space="preserve">
          <source>Section 3: Run the &lt;a href=&quot;unit-tests&quot;&gt;Unit Tests&lt;/a&gt;</source>
          <target state="translated">セクション3：&lt;a href=&quot;unit-tests&quot;&gt;単体テストの&lt;/a&gt;実行</target>
        </trans-unit>
        <trans-unit id="d3b79d5d78e14a8c4b0ba5bc3059259a23cad08b" translate="yes" xml:space="preserve">
          <source>Section 4: &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt;</source>
          <target state="translated">セクション4：&lt;a href=&quot;working-with-rules&quot;&gt;ルールの操作&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03c3cb69551b14b8df9cb910afaab136f027242f" translate="yes" xml:space="preserve">
          <source>Section 5: &lt;a href=&quot;working-with-plugins&quot;&gt;Working with Plugins&lt;/a&gt;</source>
          <target state="translated">セクション5：&lt;a href=&quot;working-with-plugins&quot;&gt;プラグインの操作&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b994bfa5badb9f811f171491ad2085ca2163162" translate="yes" xml:space="preserve">
          <source>Section 6: &lt;a href=&quot;working-with-custom-parsers&quot;&gt;Working with Custom Parsers&lt;/a&gt;</source>
          <target state="translated">セクション6：&lt;a href=&quot;working-with-custom-parsers&quot;&gt;カスタムパーサーの操作&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cef9b81d7487df40316eccfb3ac59bb6e5049a8" translate="yes" xml:space="preserve">
          <source>Section 7: &lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</source>
          <target state="translated">セクション7：&lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b89f1494eec98976470a195404c75143a7d87a8b" translate="yes" xml:space="preserve">
          <source>Section 8: &lt;a href=&quot;contributing/index&quot;&gt;Contributing&lt;/a&gt;</source>
          <target state="translated">セクション8：&lt;a href=&quot;contributing/index&quot;&gt;貢献&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a36f58a29f1275ec5d968141f07cf060b746bc67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;Specifying Processor&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;プロセッサの指定&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b6969594f8da02157a002f4a80fcf1d497e64bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt; if you also want to disallow duplicate names in class definitions.</source>
          <target state="translated">クラス定義で名前の重複を許可しない場合は、&lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-membersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b75b5956411bc41a59d15e137400fe418c3a0502" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt; if you also want to disallow duplicate keys in object literals.</source>
          <target state="translated">オブジェクトリテラルの重複キーも許可しない場合は、&lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keysを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="2601bab23f6d6b7f8c2a0b4d06f87b74ca15b5fc" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f2f2da9007ba35b167fb5fbeeeef552aaaf5204" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5475994619c5659ff506420bcda0f2341a59e086" translate="yes" xml:space="preserve">
          <source>See all &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;formatters on npm&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;npmの&lt;/a&gt;すべてのフォーマッターを参照してください。</target>
        </trans-unit>
        <trans-unit id="d711728163616d324e06d612e575de7b428f280d" translate="yes" xml:space="preserve">
          <source>See also: the &lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;full diff&lt;/a&gt; where the defaults were changed.</source>
          <target state="translated">参照：デフォルトが変更された&lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;完全な差分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="ba1dd4d24595765d36380d449f2f63da8783485e" translate="yes" xml:space="preserve">
          <source>Selectors are not limited to matching against single node types. For example, the selector &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes that have a &lt;code&gt;VariableDeclarator&lt;/code&gt; as a direct parent. In the program above, this will match the node for &lt;code&gt;foo&lt;/code&gt;, but not the nodes for &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">セレクターは、単一ノードタイプとの照合に限定されません。たとえば、セレクター &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; は、 &lt;code&gt;VariableDeclarator&lt;/code&gt; を直接の親として持つすべての &lt;code&gt;Identifier&lt;/code&gt; ノードと一致します。上記のプログラムでは、これは &lt;code&gt;foo&lt;/code&gt; のノードと一致しますが、 &lt;code&gt;bar&lt;/code&gt; と &lt;code&gt;baz&lt;/code&gt; のノードとは一致しません。</target>
        </trans-unit>
        <trans-unit id="52a3f1908b1bbd91b0b9259682b062315f687ab1" translate="yes" xml:space="preserve">
          <source>Self assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.</source>
          <target state="translated">自己課題は何の効果もないので、リファクタリングが不完全なためのエラーでしょう。これらは、やるべきことがまだ残っていることを示しています。</target>
        </trans-unit>
        <trans-unit id="f7959cd9f43abd1103f282c5754afbee5224b16f" translate="yes" xml:space="preserve">
          <source>Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">セミコロンの自動挿入（ASI）のため、セミコロンは通常JavaScriptではオプションです。あなたはとセミコロンを必要とするか、または禁止でき&lt;a href=&quot;semi&quot;&gt;セミ&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="7ef827951df1f89ec5fb16c5c417655c418fa285" translate="yes" xml:space="preserve">
          <source>Sequence expressions (those using a comma, such as &lt;code&gt;a = 1, b = 2&lt;/code&gt;) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.</source>
          <target state="translated">シーケンス式（ &lt;code&gt;a = 1, b = 2&lt;/code&gt; などのコンマを使用するもの）は、戻り値が条件評価で割り当てられたり使用されたりするか、シーケンス式の値を使用して関数呼び出しが行われない限り、常に未使用と見なされます。</target>
        </trans-unit>
        <trans-unit id="a171fcac3dd876a9a68a177995635a2d7e821db8" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want those functions to be treated as 'regular' functions.</source>
          <target state="translated">これらの関数を「通常の」関数として扱う場合は、 &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c0180f010e4da395331d6d54df6959189e9dae8b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;indexOf(NaN)&lt;/code&gt; and &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; method calls.</source>
          <target state="translated">このルールで &lt;code&gt;indexOf(NaN)&lt;/code&gt; および &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; メソッドの呼び出しをレポートする &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="618ceba957897722ae596312a10c551288948191" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;case NaN&lt;/code&gt; and &lt;code&gt;switch(NaN)&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">このルールで &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;case NaN&lt;/code&gt; および &lt;code&gt;switch(NaN)&lt;/code&gt; をレポートする場合は、 &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="fa3491e34539a3ccbb31246fccfeafd612faa9f3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations as well.</source>
          <target state="translated">このルールで &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、および &lt;code&gt;class&lt;/code&gt; 宣言もチェックする場合は、 &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="faf94416ab2a050dcb6bbfd98218d385084c3972" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowKeywords&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.</source>
          <target state="translated">ECMAScriptバージョン3互換のスタイルに従うには、 &lt;code&gt;allowKeywords&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; （デフォルトは &lt;code&gt;true&lt;/code&gt; ）に設定して、予約語プロパティのドット表記を回避します。</target>
        </trans-unit>
        <trans-unit id="be2fe335d32f03aea39945e0531758a541f8d75d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowPattern&lt;/code&gt; option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).</source>
          <target state="translated">パターンに一致するプロパティ名のブラケット表記を許可するには、 &lt;code&gt;allowPattern&lt;/code&gt; オプションを正規表現文字列に設定します（デフォルトでは、パターンはテストされません）。</target>
        </trans-unit>
        <trans-unit id="1c81c3037407b2aa16474a63ef04fe8a38928ef4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the default &lt;code&gt;/^no default$/i&lt;/code&gt; comment test pattern</source>
          <target state="translated">デフォルトの &lt;code&gt;/^no default$/i&lt;/code&gt; コメントテストパターンを変更するには、 &lt;code&gt;commentPattern&lt;/code&gt; オプションを正規表現文字列に設定します</target>
        </trans-unit>
        <trans-unit id="0013f5c88955deac87e1686900438d34e9741c2d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the test for intentional fallthrough comment</source>
          <target state="translated">意図的なフォールスルーコメントのテストを変更するには、 &lt;code&gt;commentPattern&lt;/code&gt; オプションを正規表現文字列に設定します</target>
        </trans-unit>
        <trans-unit id="68ce687ddf0f134fff7cf81f9dc938e6b3878d8a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;int32Hint&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;) to allow write &lt;code&gt;a|0&lt;/code&gt; without space.</source>
          <target state="translated">設定し &lt;code&gt;int32Hint&lt;/code&gt; のにオプションを &lt;code&gt;true&lt;/code&gt; （デフォルトは &lt;code&gt;false&lt;/code&gt; を書き込みできるようにする） &lt;code&gt;a|0&lt;/code&gt; スペースなし。</target>
        </trans-unit>
        <trans-unit id="3134ee2112bdc78853bd1511d97b31e6159ccb88" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; by default. Setting this option to &lt;code&gt;false&lt;/code&gt; allows constant expressions in loops.</source>
          <target state="translated">デフォルトでは &lt;code&gt;true&lt;/code&gt; に設定されています。このオプションを &lt;code&gt;false&lt;/code&gt; に設定すると、ループで定数式が許可されます。</target>
        </trans-unit>
        <trans-unit id="70eda033c7f0c498a86724919e7320f305b80b0d" translate="yes" xml:space="preserve">
          <source>Set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../development-environment&quot;&gt;開発環境を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="f8322127967adf862ac72c512b139ae1854bca05" translate="yes" xml:space="preserve">
          <source>Setters cannot return values.</source>
          <target state="translated">セッターは値を返すことができません。</target>
        </trans-unit>
        <trans-unit id="c9c749d001ff268cbeb4ea4c24c216a86d9a6a4d" translate="yes" xml:space="preserve">
          <source>Setting parser options helps ESLint determine what is a parsing error. All language options are &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">パーサーオプションを設定すると、ESLintが解析エラーを特定するのに役立ちます。デフォルトでは、すべての言語オプションは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="37c53c1b3fac94914ae01b6fca4c4e53991f792a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;ignoreInlineComments&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.</source>
          <target state="translated">&lt;code&gt;ignoreInlineComments&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定すると、コードの途中のコメント（コメントの最初と同じ行にトークンがあり、コメントの最後と同じ行に別のトークンがある）は、このルールによって報告されません。 。</target>
        </trans-unit>
        <trans-unit id="2cb3483662622664036fa4200b1ad6fc9357335b" translate="yes" xml:space="preserve">
          <source>Several rules have been enhanced and now report additional errors:</source>
          <target state="translated">いくつかのルールが強化され、追加のエラーが報告されるようになりました。</target>
        </trans-unit>
        <trans-unit id="7b975340ecb92f51d1355c1bc6f74105b9ac0d69" translate="yes" xml:space="preserve">
          <source>Several rules have been updated to cover more cases</source>
          <target state="translated">いくつかのルールが更新され、より多くのケースをカバーするようになりました。</target>
        </trans-unit>
        <trans-unit id="7a21f615bd35450d045383608de1e8b616f708b6" translate="yes" xml:space="preserve">
          <source>Shadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:</source>
          <target state="translated">シャドウイングとは、ローカル変数がそのスコープ内の変数と同じ名前を共有するプロセスです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6bf3b29e45e3e5e600d18ebc1d069a9b49cb2211" translate="yes" xml:space="preserve">
          <source>Share Plugins</source>
          <target state="translated">共有プラグイン</target>
        </trans-unit>
        <trans-unit id="d411f634d35296374dbb079a9b10699e721c60b8" translate="yes" xml:space="preserve">
          <source>Shareable Configs</source>
          <target state="translated">共有可能な設定</target>
        </trans-unit>
        <trans-unit id="f7728f13ff64a72cf6ff58838bc2cf984afc2062" translate="yes" xml:space="preserve">
          <source>Shareable configs are designed to work with the &lt;code&gt;extends&lt;/code&gt; feature of &lt;code&gt;.eslintrc&lt;/code&gt; files. Instead of using a file path for the value of &lt;code&gt;extends&lt;/code&gt;, use your module name. For example:</source>
          <target state="translated">共有可能な構成は、 &lt;code&gt;.eslintrc&lt;/code&gt; ファイルの &lt;code&gt;extends&lt;/code&gt; 機能と連携するように設計されています。 &lt;code&gt;extends&lt;/code&gt; の値にファイルパスを使用する代わりに、モジュール名を使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="ac98661439154e24e66154b8b56ea65970febcd8" translate="yes" xml:space="preserve">
          <source>Shareable configs are simply npm packages that export a configuration object. To start, &lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;create a Node.js module&lt;/a&gt; like you normally would. Make sure the module name begins with &lt;code&gt;eslint-config-&lt;/code&gt;, such as &lt;code&gt;eslint-config-myconfig&lt;/code&gt;.</source>
          <target state="translated">共有可能な構成は、単に構成オブジェクトをエクスポートするnpmパッケージです。まず、通常どおりに&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;Node.jsモジュールを作成し&lt;/a&gt;ます。確認してくださいモジュール名はで始まる &lt;code&gt;eslint-config-&lt;/code&gt; など、 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5de27ab2273537b3d6d14a587e6661a643b307d7" translate="yes" xml:space="preserve">
          <source>Sharing Multiple Configs</source>
          <target state="translated">複数の設定を共有する</target>
        </trans-unit>
        <trans-unit id="8fc88f1b91b2fde5e1092771afaef36f9a2e347a" translate="yes" xml:space="preserve">
          <source>Shebangs are now returned from comment APIs</source>
          <target state="translated">コメントAPIからシェバングが返ってくるようになりました。</target>
        </trans-unit>
        <trans-unit id="7017708c1c06a3f1e90941c34316e9d4607c7d9c" translate="yes" xml:space="preserve">
          <source>Shebangs are represented by tokens of type &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt;. They are treated as comments and can be accessed by the methods outlined above.</source>
          <target state="translated">シバンは、 &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt; シバン」タイプのトークンで表されます。これらはコメントとして扱われ、上記の方法でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="23210f846566656bab3b173307947416d7f3ca0b" translate="yes" xml:space="preserve">
          <source>Sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;.</source>
          <target state="translated">私たちのサイン&lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;コントリビュータライセンス契約を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2be01717d65543f816e780251a90121cfccc7576" translate="yes" xml:space="preserve">
          <source>Signing the CLA</source>
          <target state="translated">CLAへのサイン</target>
        </trans-unit>
        <trans-unit id="0ec28340f6b30cc1ce90c43020055c994f7d5efb" translate="yes" xml:space="preserve">
          <source>Similar to the valid cases, you can also specify &lt;code&gt;options&lt;/code&gt; to be passed to the rule:</source>
          <target state="translated">有効なケースと同様に、ルールに渡す &lt;code&gt;options&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="83f59937d173df040577971290f0e1cacd671a9c" translate="yes" xml:space="preserve">
          <source>Simple Statements</source>
          <target state="translated">シンプルなステートメント</target>
        </trans-unit>
        <trans-unit id="24da9670085c68ec6aa7a55a98200997a7091b66" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;context.options&lt;/code&gt; is just an array, you can use it to determine how many options have been passed as well as retrieving the actual options themselves. Keep in mind that the error level is not part of &lt;code&gt;context.options&lt;/code&gt;, as the error level cannot be known or modified from inside a rule.</source>
          <target state="translated">以来 &lt;code&gt;context.options&lt;/code&gt; は単なる配列である、あなたは実際のオプションに自分自身を取得するだけでなく、渡されたどのように多くの選択肢を決定するためにそれを使用することができます。エラーレベルは、ルール内からは確認または変更できないため、 &lt;code&gt;context.options&lt;/code&gt; の一部ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3dec31ada8554ba1a6a6debc16cb59773af96567" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;index.js&lt;/code&gt; is just JavaScript, you can optionally read these settings from a file or generate them dynamically.</source>
          <target state="translated">以来 &lt;code&gt;index.js&lt;/code&gt; はただのJavaScriptで、必要に応じてファイルからこれらの設定を読み込むか、動的に生成することができます。</target>
        </trans-unit>
        <trans-unit id="48bb4d613279d48459f21ef7090afc2c9bd1a5ba" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;require()&lt;/code&gt; does a synchronous load, it can cause performance problems when used in other locations.</source>
          <target state="translated">以来 &lt;code&gt;require()&lt;/code&gt; 同期ロードを行い、他の場所で使用する場合、それはパフォーマンス上の問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="9b146ffe6d582fd6188c56da94a8eb3d6c952c6f" translate="yes" xml:space="preserve">
          <source>Since ECMAScript 2021, these escape sequences are specified as &lt;a href=&quot;https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalEscapeSequence&quot;&gt;non-octal decimal escape sequences&lt;/a&gt;, retaining the same behavior.</source>
          <target state="translated">ECMAScript 2021以降、これらのエスケープシーケンスは、&lt;a href=&quot;https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalEscapeSequence&quot;&gt;8進数以外の10進数のエスケープシーケンス&lt;/a&gt;として指定されており、同じ動作を維持しています。</target>
        </trans-unit>
        <trans-unit id="c4072153bf32cdf523ee16f38e671d010ceab044" translate="yes" xml:space="preserve">
          <source>Since ESLint v5, &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; has been equivalent to &lt;code&gt;ecmaVersion: 2018&lt;/code&gt;, and has also emitted a deprecation warning. In ESLint v6, the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; feature has been removed entirely and has no effect. If your config was relying on &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; to enable ES2018 parsing, you might start seeing parsing errors for recent syntax.</source>
          <target state="translated">ESLint v5以降、 &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; は &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; と同等であり、非推奨の警告を発しました。ESLint v6では、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 機能が完全に削除され、効果はありません。ES2018解析を有効にするために構成が &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; に依存していた場合、最近の構文の解析エラーが表示されるようになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d13ae6387ed366be6d8b805801c5cfb3cfb9ad21" translate="yes" xml:space="preserve">
          <source>Since all rules are run again after the initial round of fixes is applied, it's not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.</source>
          <target state="translated">すべてのルールは最初の修正のラウンドが適用された後に再び実行されるので、修正のコードスタイルが別のルールでエラーが報告される原因になるかどうかをチェックする必要はありません。</target>
        </trans-unit>
        <trans-unit id="18fb1e3007320b11f3d7fd9d833d2b32f18f24bd" translate="yes" xml:space="preserve">
          <source>Since deprecated rules will never be removed, you can continue to use them indefinitely if they are working for you. However, keep in mind that deprecated rules will effectively be unmaintained.</source>
          <target state="translated">非推奨のルールが削除されることはないので、そのルールが自分のために機能しているのであれば、無期限で使い続けることができます。しかし、非推奨のルールは事実上メンテナンスされていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b45593d5f75200b1272e2e445af7ba7a6ca42cb" translate="yes" xml:space="preserve">
          <source>Since it's good to have a consistent code style, you should either always write padded blocks or never do it.</source>
          <target state="translated">コードスタイルが一貫しているのは良いことなので、常にパッド付きブロックを書くか、絶対に書かないかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="20e1b60daaa62f4d5667736af96bfb991b249553" translate="yes" xml:space="preserve">
          <source>Single-Line Comments</source>
          <target state="translated">一行コメント</target>
        </trans-unit>
        <trans-unit id="56f06f07d3754fea01009119715bfd5517b24da3" translate="yes" xml:space="preserve">
          <source>Single-line comments should be used to document one line of code or a group of related lines of code. A single-line comment may be used in three ways:</source>
          <target state="translated">一行コメントは、1つのコード行または関連するコード行のグループを文書化するために使用しなければなりません。一行コメントは3つの方法で使用することができます。</target>
        </trans-unit>
        <trans-unit id="d5725de7b903a8b05de6ad0470647699fe07e580" translate="yes" xml:space="preserve">
          <source>Small - Runs ESLint on KnockoutJS</source>
          <target state="translated">Small-KnockoutJS上でESLintを実行</target>
        </trans-unit>
        <trans-unit id="8a314d2e7d6188c8847f81a281bc5f5ae16c1c06" translate="yes" xml:space="preserve">
          <source>Smart Tabs</source>
          <target state="translated">スマートタブ</target>
        </trans-unit>
        <trans-unit id="f4e452300a2b0f07b41745625016cd897fb85bfe" translate="yes" xml:space="preserve">
          <source>So running &lt;code&gt;eslint&lt;/code&gt; with this custom formatter:</source>
          <target state="translated">したがって、このカスタムフォーマッタで &lt;code&gt;eslint&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="65f774dd6ab39438c5f5df28e0b861b09e448b2d" translate="yes" xml:space="preserve">
          <source>So the second argument &lt;code&gt;ast&lt;/code&gt; also should be parsed from stripped text.</source>
          <target state="translated">したがって、2番目の引数 &lt;code&gt;ast&lt;/code&gt; も、ストリップされたテキストから解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="31a71f85cf4f793cf2a2e4f0097c3f2e95ba388a" translate="yes" xml:space="preserve">
          <source>Software Module size and file size</source>
          <target state="translated">ソフトウェアモジュールのサイズとファイルサイズ</target>
        </trans-unit>
        <trans-unit id="be134f7c50807cfb772cbc0bcb5081b5a12c45d8" translate="yes" xml:space="preserve">
          <source>Some code conventions require that all &lt;code&gt;switch&lt;/code&gt; statements have a &lt;code&gt;default&lt;/code&gt; case, even if the default case is empty, such as:</source>
          <target state="translated">一部のコード規則では、次のように、デフォルトの大文字小文字が空の場合でも、すべての &lt;code&gt;switch&lt;/code&gt; ステートメントに &lt;code&gt;default&lt;/code&gt; 大文字小文字が必要です。</target>
        </trans-unit>
        <trans-unit id="c8b6c94f005c780b423c192df3948fbf6b0bc032" translate="yes" xml:space="preserve">
          <source>Some code styles prohibit &lt;code&gt;void&lt;/code&gt; operator, marking it as non-obvious and hard to read.</source>
          <target state="translated">一部のコードスタイルは &lt;code&gt;void&lt;/code&gt; 演算子を禁止し、それを非自明で読みにくいものとしてマークします。</target>
        </trans-unit>
        <trans-unit id="5c5510f077de709ac2acb2de150530c1a834f95a" translate="yes" xml:space="preserve">
          <source>Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.</source>
          <target state="translated">これは、後に形式化されただけのJavaScriptの非文書化された機能であったため、悪い習慣であると考える人もいます。</target>
        </trans-unit>
        <trans-unit id="5c13b92416e3720dc9efdcd598e2b13bb218f8f0" translate="yes" xml:space="preserve">
          <source>Some developers declare multiple var statements on the same line:</source>
          <target state="translated">開発者の中には、同一行に複数の var 文を宣言している人もいます。</target>
        </trans-unit>
        <trans-unit id="88fde2b94b3e6e7f06f28f5ca48809414c632781" translate="yes" xml:space="preserve">
          <source>Some developers find that placing operators at the beginning of the line makes the code more readable.</source>
          <target state="translated">演算子を行頭に配置するとコードが読みやすくなることに気づく開発者もいます。</target>
        </trans-unit>
        <trans-unit id="da83d59be8d3c1fa61746c9667b3e144b3b46f21" translate="yes" xml:space="preserve">
          <source>Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.</source>
          <target state="translated">複数の空白行を削除することを好む開発者もいれば、可読性の向上に役立つと感じる開発者もいます。空白はコードの論理的なセクションを区切るのに便利ですが、過剰な空白は画面の多くを占めます。</target>
        </trans-unit>
        <trans-unit id="319b3df86b7ba843599bf2b2dd9f3af029a3c402" translate="yes" xml:space="preserve">
          <source>Some exposed APIs are now ES2015 classes</source>
          <target state="translated">一部の公開APIはES2015のクラスになりました</target>
        </trans-unit>
        <trans-unit id="70eec175aefc8c0ac35582826149396333b51a6a" translate="yes" xml:space="preserve">
          <source>Some global variables have been deprecated or removed for code running in Node.js, browsers, and Jest. (For example, browsers used to expose an &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; global variable to JavaScript code, but this global has been removed from web standards and is no longer present in browsers.) As a result, we have removed these globals from the corresponding &lt;code&gt;eslint&lt;/code&gt; environments, so use of these globals will trigger an error when using rules such as &lt;a href=&quot;../rules/no-undef&quot;&gt;&lt;code&gt;no-undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Node.js、ブラウザー、およびJestで実行されるコードでは、一部のグローバル変数が非推奨または削除されています。（たとえば、ブラウザは &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; グローバル変数をJavaScriptコードに公開するために使用されていましたが、このグローバルはWeb標準から削除され、ブラウザには存在しなくなりました。）その結果、これらのグローバルを対応する &lt;code&gt;eslint&lt;/code&gt; 環境から削除しました。これらのグローバルを使用すると、&lt;a href=&quot;../rules/no-undef&quot;&gt; &lt;code&gt;no-undef&lt;/code&gt; &lt;/a&gt;などのルールを使用するときにエラーがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="f062f278fdeadb9e299ef656855a628748c5bb85" translate="yes" xml:space="preserve">
          <source>Some imports might not make sense in a particular environment. For example, Node.js' &lt;code&gt;fs&lt;/code&gt; module would not make sense in an environment that didn't have a file system.</source>
          <target state="translated">一部のインポートは、特定の環境では意味をなさない場合があります。たとえば、Node.jsの &lt;code&gt;fs&lt;/code&gt; モジュールは、ファイルシステムがない環境では意味がありません。</target>
        </trans-unit>
        <trans-unit id="8a1845bade3c1e32522c230c7fd34c3040711d50" translate="yes" xml:space="preserve">
          <source>Some issues have had monetary rewards attached to them. Those are labeled &lt;code&gt;bounty&lt;/code&gt;. Bounties are assigned via &lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;.</source>
          <target state="translated">一部の問題には金銭的報酬が付いています。それらは &lt;code&gt;bounty&lt;/code&gt; と表示されています。&lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;バウンティはBountySource&lt;/a&gt;を介して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="cc97f15ec33a8fb0d8f181362b5bbc40bdbb948d" translate="yes" xml:space="preserve">
          <source>Some modules provide similar or identical functionality, think &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt;. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.</source>
          <target state="translated">一部のモジュールは類似または同一の機能を提供します &lt;code&gt;lodash&lt;/code&gt; および &lt;code&gt;underscore&lt;/code&gt; と考えてください。プロジェクトはモジュールで標準化されている可能性があります。他の代替案が使用されていないことを確認する必要があります。これを行うと、プロジェクトが不必要に肥大化し、依存関係が1つあれば十分な場合に、2つの依存関係の保守コストが高くなります。</target>
        </trans-unit>
        <trans-unit id="264939a2d43fd66c197012a9cf9648b42c36337b" translate="yes" xml:space="preserve">
          <source>Some modules return a constructor which can potentially lead to code such as:</source>
          <target state="translated">モジュールの中には、コンストラクタを返すものもあります。</target>
        </trans-unit>
        <trans-unit id="29ba1427e8c92e96a16255e3f6eb4ecbfabc34f6" translate="yes" xml:space="preserve">
          <source>Some people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what's going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.</source>
          <target state="translated">大きなファイルはコードの匂いだと考える人もいます。大きなファイルは多くのことを行う傾向があり、何が起こっているのかを理解するのが難しくなることがあります。ファイル内で許容されると考えられる行数の客観的な最大値はありませんが、ほとんどの人は数千行にすべきではないということに同意するでしょう。推奨される行数は通常100~500行です。</target>
        </trans-unit>
        <trans-unit id="a357eb75979b31ab9472de29b249e979f6b6b141" translate="yes" xml:space="preserve">
          <source>Some people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what's going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.</source>
          <target state="translated">大規模な関数をコードの匂いだと考える人もいます。大きな関数は多くのことを行う傾向があり、何が起こっているのかを理解するのが難しくなることがあります。多くのコーディングスタイルガイドでは、関数が構成できる行数の制限を規定しています。このルールは、そのスタイルを強制するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b516222d790d0bfe6d8641c249e0071402e077c0" translate="yes" xml:space="preserve">
          <source>Some rules and APIs allow the use of selectors to query an AST. This page is intended to:</source>
          <target state="translated">いくつかのルールやAPIでは、セレクタを使ってASTを問い合わせることができます。このページはそのためのものです。</target>
        </trans-unit>
        <trans-unit id="d46d7f40436527e02e15f42c4b8e72f68eaadfc8" translate="yes" xml:space="preserve">
          <source>Some rules require options in order to function correctly. These options appear in configuration (&lt;code&gt;.eslintrc&lt;/code&gt;, command line, or in comments). For example:</source>
          <target state="translated">一部のルールでは、正しく機能するためにオプションが必要です。これらのオプションは、構成（ &lt;code&gt;.eslintrc&lt;/code&gt; 、コマンドライン、またはコメント）に表示されます。例えば：</target>
        </trans-unit>
        <trans-unit id="00275b3b345f6b9172064ad3c4803175ae258c34" translate="yes" xml:space="preserve">
          <source>Some style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line. On the other hand, it is sometimes faster and more obvious to put comments immediately following code.</source>
          <target state="translated">スタイルガイドの中には、コードと同じ行のコメントを禁止しているものがあります。コードと同じ行にコメントがすぐに続くと、コードが読みにくくなることがあります。一方で、コードのすぐ後にコメントをつけた方が速くてわかりやすい場合もあります。</target>
        </trans-unit>
        <trans-unit id="1849aab38ed123bdc6d7b029034a46313136fc00" translate="yes" xml:space="preserve">
          <source>Some style guides don't allow the use of tab characters at all, including within comments.</source>
          <target state="translated">スタイルガイドによっては、コメント内を含め、タブ文字の使用を全く許可していないものもあります。</target>
        </trans-unit>
        <trans-unit id="2244458667f3ce520967956eda4ce510fbeed0c1" translate="yes" xml:space="preserve">
          <source>Some style guides may require a consistent spacing for function names.</source>
          <target state="translated">スタイルガイドによっては、関数名に一貫したスペーシングが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="030befb9cb1b6a4b5dacb92a3f92d4b8ba5e2c62" translate="yes" xml:space="preserve">
          <source>Some style guides require JSDoc comments for all functions as a way of explaining function behavior.</source>
          <target state="translated">スタイルガイドの中には、関数の動作を説明する方法として、すべての関数に対してJSDocのコメントを要求するものがあります。</target>
        </trans-unit>
        <trans-unit id="dc237e4772e0207c27c1e378f2525052a1ff94c6" translate="yes" xml:space="preserve">
          <source>Some style guides require block statements to start and end with blank lines. The goal is to improve readability by visually separating the block content and the surrounding code.</source>
          <target state="translated">スタイルガイドの中には、ブロック文の開始と終了を空行で行うことを要求するものがあります。これは、ブロックの内容と周囲のコードを視覚的に分離することで可読性を向上させることを目的としています。</target>
        </trans-unit>
        <trans-unit id="201550e6abc7ddd420de4b881ba83ce28f29f0b9" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; of a line comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">一部のスタイルガイドでは、行コメントの最初の &lt;code&gt;//&lt;/code&gt; の直後に空白を必要とするか禁止します。 &lt;code&gt;//&lt;/code&gt; の後の空白は、コメント内のテキストを読みやすくします。一方、 &lt;code&gt;//&lt;/code&gt; の直後に空白を置かなくても、コードをコメントアウトする方が簡単です。</target>
        </trans-unit>
        <trans-unit id="a1c5fdd2ea4191bb42ab7f9fca487d91da02843c" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; of a comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;.</source>
          <target state="translated">一部のスタイルガイドでは、コメントの最初の &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/*&lt;/code&gt; の直後に空白が必要または禁止されています。 &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/*&lt;/code&gt; の後の空白は、コメント内のテキストを読みやすくします。一方、 &lt;code&gt;//&lt;/code&gt; や &lt;code&gt;/*&lt;/code&gt; の直後に空白を置かなくても、コードをコメントアウトする方が簡単です。</target>
        </trans-unit>
        <trans-unit id="9568a858ccab377c3f347cbea8a8037f371d4712" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.</source>
          <target state="translated">スタイルガイドの中には、単項演算子の前後にスペースを必要とするものや認めないものがあります。これは主にスタイルの問題ですが、JavaScript の式の中にはスペースを入れずに書くことができるものもあり、これは読みにくく、メンテナンスが難しくなります。</target>
        </trans-unit>
        <trans-unit id="1cd1de3034a3fc730da0bea8dd9b8d360a4330f4" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces inside of parentheses:</source>
          <target state="translated">スタイルガイドの中には、括弧内のスペースを必要としたり、許可しなかったりするものがあります。</target>
        </trans-unit>
        <trans-unit id="c3070c75d033320e5f7ebe414b6237a3ba652bf4" translate="yes" xml:space="preserve">
          <source>Some style guides will require or disallow spaces following the certain keywords.</source>
          <target state="translated">スタイルガイドの中には、特定のキーワードに続くスペースを要求したり、禁止したりするものがあります。</target>
        </trans-unit>
        <trans-unit id="c4be317e60f6aa965f4ab059cd2ad659412f195d" translate="yes" xml:space="preserve">
          <source>Some tests require that a certain parser configuration must be used. This can be specified in test specifications via the &lt;code&gt;parserOptions&lt;/code&gt; setting.</source>
          <target state="translated">一部のテストでは、特定のパーサー構成を使用する必要があります。これは、 &lt;code&gt;parserOptions&lt;/code&gt; 設定を介してテスト仕様で指定できます。</target>
        </trans-unit>
        <trans-unit id="838af6a85f479a1fedfe1a6da00a3f1b6a2a4200" translate="yes" xml:space="preserve">
          <source>Sometimes (especially in big projects) the name of the error variable is not consistent across the project, so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</source>
          <target state="translated">(特に大規模なプロジェクトでは)エラー変数の名前がプロジェクト全体で一貫していないことがあります。そのため、ルールが処理されていないエラーをすべて報告するようにするには、より柔軟な設定が必要になります。</target>
        </trans-unit>
        <trans-unit id="50c696bd306a1b3a43860828cc49620093926e56" translate="yes" xml:space="preserve">
          <source>Sometimes during the course of code maintenance, the &lt;code&gt;this&lt;/code&gt; value is removed from the function body. In that case, you can end up with a call to &lt;code&gt;bind()&lt;/code&gt; that doesn't accomplish anything:</source>
          <target state="translated">コードのメンテナンス中に、 &lt;code&gt;this&lt;/code&gt; 値が関数本体から削除されることがあります。その場合、何も実行しない &lt;code&gt;bind()&lt;/code&gt; の呼び出しで終わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e1239a4ef3312baebd03a9fadd3dc1da7a196cfc" translate="yes" xml:space="preserve">
          <source>Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.</source>
          <target state="translated">ファイルを編集していると、行末に余分な空白ができてしまうことがあります。このような空白の違いはソース管理システムに拾われて diff としてフラグが立てられ、開発者のフラストレーションの原因になります。この余分な空白があっても機能的には問題ありませんが、多くのコード規約ではチェックイン前に末尾の空白を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">ソースコード</target>
        </trans-unit>
        <trans-unit id="f13b901ad76229dac734487a39808cdde93abfe1" translate="yes" xml:space="preserve">
          <source>Source Control</source>
          <target state="translated">ソース制御</target>
        </trans-unit>
        <trans-unit id="d7f23e409b1f9d227333564c23108a422010e901" translate="yes" xml:space="preserve">
          <source>SourceCode</source>
          <target state="translated">SourceCode</target>
        </trans-unit>
        <trans-unit id="bce4c495898f1faddcaa7c35b37ab4481ede3b00" translate="yes" xml:space="preserve">
          <source>SourceCode constructor (Node API) changes</source>
          <target state="translated">SourceCode コンストラクタ(Node API)の変更</target>
        </trans-unit>
        <trans-unit id="4295a0eca57863562626d681cbe158963892a6fd" translate="yes" xml:space="preserve">
          <source>SourceCode#splitLines()</source>
          <target state="translated">SourceCode#splitLines()</target>
        </trans-unit>
        <trans-unit id="db40a182aaf7dc66373c8652a068c39e88c92f7e" translate="yes" xml:space="preserve">
          <source>Space issues can also cause code to look inconsistent and harder to read.</source>
          <target state="translated">スペースの問題は、コードが一貫性のないものに見えたり、読みにくくなったりする原因にもなります。</target>
        </trans-unit>
        <trans-unit id="9b903a63fa074533e05ee538bb400f7ae7d25ae0" translate="yes" xml:space="preserve">
          <source>Spacing around colons improves readability of &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses.</source>
          <target state="translated">コロンの周りの間隔は、 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 句の読みやすさを向上させます。</target>
        </trans-unit>
        <trans-unit id="bee60614d09a5dc287b728aa03f9ca804bb2765e" translate="yes" xml:space="preserve">
          <source>Spacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.</source>
          <target state="translated">カンマの周りのスペースは、項目のリストの可読性を向上させます。言語のスタイルガイドラインのほとんどは、コンマの後にスペースを追加し、コンマの前にはスペースを追加しないことを規定していますが、それはプロジェクトの好みによる主観的なものです。</target>
        </trans-unit>
        <trans-unit id="85517ae7d9ab81a8dc4d785d38d52af351849a64" translate="yes" xml:space="preserve">
          <source>Sparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:</source>
          <target state="translated">疎な配列には空のスロットが含まれており、配列リテラルの中で複数のカンマが使用されていることが原因であることが多いです。</target>
        </trans-unit>
        <trans-unit id="0b7e749be12e1d4e6f29f80172dc19cac2d01996" translate="yes" xml:space="preserve">
          <source>Specifying Environments</source>
          <target state="translated">環境の指定</target>
        </trans-unit>
        <trans-unit id="056af97903e3dc6e6f43b88d96ae94278918b7f2" translate="yes" xml:space="preserve">
          <source>Specifying File extensions to Lint</source>
          <target state="translated">Lintにファイル拡張子を指定する</target>
        </trans-unit>
        <trans-unit id="42e1afab26529373a5755f37ed73c9992e7a1f27" translate="yes" xml:space="preserve">
          <source>Specifying Globals</source>
          <target state="translated">グローバルの指定</target>
        </trans-unit>
        <trans-unit id="615655edaa8435cea59ad96bf63fd800fe901df4" translate="yes" xml:space="preserve">
          <source>Specifying Parser</source>
          <target state="translated">パーサの指定</target>
        </trans-unit>
        <trans-unit id="3fdf1ff8c15b6bfb3e42d6729c40289a364a0934" translate="yes" xml:space="preserve">
          <source>Specifying Parser Options</source>
          <target state="translated">パーサオプションの指定</target>
        </trans-unit>
        <trans-unit id="a5dba7920ee9d85457d6a302a8028c1f41b8cc64" translate="yes" xml:space="preserve">
          <source>Specifying Processor</source>
          <target state="translated">プロセッサの指定</target>
        </trans-unit>
        <trans-unit id="ec5cdef761600831584f51b13c5e7e1af51231d0" translate="yes" xml:space="preserve">
          <source>Specifying Processor in Config Files</source>
          <target state="translated">設定ファイルでプロセッサを指定する</target>
        </trans-unit>
        <trans-unit id="dd101a9b3761464c88a971471d60c8157de97419" translate="yes" xml:space="preserve">
          <source>Specifying Target Files to Lint</source>
          <target state="translated">Lint の対象ファイルを指定する</target>
        </trans-unit>
        <trans-unit id="fd3a805a25d509c02dbba7487be2139a847549f5" translate="yes" xml:space="preserve">
          <source>Specifying rules and plugins</source>
          <target state="translated">ルールとプラグインの指定</target>
        </trans-unit>
        <trans-unit id="96c2be7c78e35ecedf2f6d32e197f0983c7d3765" translate="yes" xml:space="preserve">
          <source>Start Developing</source>
          <target state="translated">開発開始</target>
        </trans-unit>
        <trans-unit id="d5ebef5b5d844222a804e3497fcaed1e87e4a705" translate="yes" xml:space="preserve">
          <source>Start: &lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@start/plugin-lib-eslint&lt;/a&gt;</source>
          <target state="translated">開始：&lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@ start / plugin-lib-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67086f02eed6ec69807b5ddb9e07150ee0b0c38d" translate="yes" xml:space="preserve">
          <source>Starting Work</source>
          <target state="translated">仕事始め</target>
        </trans-unit>
        <trans-unit id="91b0ca4a9a5191f5469dcbd23531b6ea8254d67c" translate="yes" xml:space="preserve">
          <source>Starting in 3.1.0, rules have been able to specify the &lt;em&gt;end&lt;/em&gt; location of a reported problem, in addition to the start location, by explicitly specifying an end location in the &lt;code&gt;report&lt;/code&gt; call. This is useful for tools like editor integrations, which can use the range to precisely display where a reported problem occurs. Starting in 4.0, if a &lt;em&gt;node&lt;/em&gt; is reported rather than a location, the end location of the range will automatically be inferred from the end location of the node. As a result, many more reported problems will have end locations.</source>
          <target state="translated">3.1.0以降、ルールは、 &lt;code&gt;report&lt;/code&gt; 呼び出しで終了場所を明示的に指定することにより、開始場所に加えて、報告された問題の&lt;em&gt;終了&lt;/em&gt;場所を指定できるようになりました。これは、範囲を使用して、報告された問題が発生した場所を正確に表示できるエディター統合などのツールに役立ちます。4.0以降、場所ではなく&lt;em&gt;ノード&lt;/em&gt;が報告される場合、範囲の終了場所はノードの終了場所から自動的に推測されます。その結果、より多くの報告された問題には最終的な場所があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f2ecf2f7eb4335fbd187d0845b33268b44df84a" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComments&lt;/code&gt; events will not be emitted during AST traversal. There are two reasons for this:</source>
          <target state="translated">4.0以降、ASTトラバーサル中に &lt;code&gt;LineComment&lt;/code&gt; および &lt;code&gt;BlockComments&lt;/code&gt; イベントが発行されなくなりました。これには2つの理由があります。</target>
        </trans-unit>
        <trans-unit id="4a9fefe6ba1eb3abeeec5967b3b58b648a035245" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, the &lt;code&gt;RuleTester&lt;/code&gt; utility will validate properties of test case objects, and an error will be thrown if an unknown property is encountered. This change was added because we found that it was relatively common for developers to make typos in rule tests, often invalidating the assertions that the test cases were trying to make.</source>
          <target state="translated">4.0以降、 &lt;code&gt;RuleTester&lt;/code&gt; ユーティリティはテストケースオブジェクトのプロパティを検証し、不明なプロパティが検出されるとエラーがスローされます。この変更が追加されたのは、ルールテストでタイプミスをすることが開発者にとって比較的一般的であり、テストケースが作成しようとしたアサーションを無効にすることが多いためです。</target>
        </trans-unit>
        <trans-unit id="5836540c848187e8316d3af4bef63d2382012f09" translate="yes" xml:space="preserve">
          <source>Starting in ESLint v7.0.0, &lt;code&gt;plugins&lt;/code&gt; are resolved relative to the directory path of the &lt;em&gt;entry&lt;/em&gt; configuration file.</source>
          <target state="translated">ESLint v7.0.0以降、 &lt;code&gt;plugins&lt;/code&gt; は&lt;em&gt;エントリ&lt;/em&gt;構成ファイルのディレクトリパスを基準にして解決されます。</target>
        </trans-unit>
        <trans-unit id="d04d68fcfe6276090301ad5e7e04bbd6aa6916dc" translate="yes" xml:space="preserve">
          <source>Starting in ESLint v7.0.0, configuration files and ignore files passed to ESLint using the &lt;code&gt;--config path/to/a-config&lt;/code&gt; and &lt;code&gt;--ignore-path path/to/a-ignore&lt;/code&gt; CLI flags, respectively, will resolve from the current working directory rather than the file location. This allows for users to utilize shared plugins without having to install them directly in their project.</source>
          <target state="translated">ESLint v7.0.0以降、-config &lt;code&gt;--config path/to/a-config&lt;/code&gt; &lt;code&gt;--ignore-path path/to/a-ignore&lt;/code&gt; と--ignore-pathpath / to / a- ignoreCLIフラグをそれぞれ使用してESLintに渡された構成ファイルと無視ファイルは現在のCLIフラグから解決されます。ファイルの場所ではなく、作業ディレクトリ。これにより、ユーザーは共有プラグインをプロジェクトに直接インストールしなくても利用できます。</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="6a5813201a4580fe5f1fbb25f1a522d4d505bf2d" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
          <target state="translated">静的メソッド</target>
        </trans-unit>
        <trans-unit id="a7493a3592ca8e6e6a83cb0baa71e9ef4d283b40" translate="yes" xml:space="preserve">
          <source>Static code path analysis, in general, does not evaluate conditions. Due to this fact, this rule might miss reporting cases such as the following:</source>
          <target state="translated">静的コードパス解析は、一般的に条件を評価しません。このため、このルールは以下のようなケースを報告しないことがあります。</target>
        </trans-unit>
        <trans-unit id="633c64990d0fd3fb0088750ad9faa31590a9c3f0" translate="yes" xml:space="preserve">
          <source>Step 1: Create a new branch</source>
          <target state="translated">ステップ1:新しいブランチを作成する</target>
        </trans-unit>
        <trans-unit id="c743a1387584019a5b9e49c171021066a9274bbd" translate="yes" xml:space="preserve">
          <source>Step 1: Install Node.js</source>
          <target state="translated">ステップ1:Node.jsをインストールする</target>
        </trans-unit>
        <trans-unit id="ebb615d0e8fbd3bc64c658bdeea517e1be8a7501" translate="yes" xml:space="preserve">
          <source>Step 2: Fork and checkout your own ESLint repository</source>
          <target state="translated">ステップ2:自分のESLintリポジトリをフォークしてチェックアウトする</target>
        </trans-unit>
        <trans-unit id="4b277bac8f09c41a896b5778dc93caf8cea1b8d1" translate="yes" xml:space="preserve">
          <source>Step 2: Make your changes</source>
          <target state="translated">ステップ2:変更を加える</target>
        </trans-unit>
        <trans-unit id="162e5376e301468cf0fb8feee5902817e041ced1" translate="yes" xml:space="preserve">
          <source>Step 3: Add the upstream source</source>
          <target state="translated">ステップ3:上流のソースを追加</target>
        </trans-unit>
        <trans-unit id="c69e88aa3310028acfe11e07da987e642ed7401d" translate="yes" xml:space="preserve">
          <source>Step 3: Rebase onto upstream</source>
          <target state="translated">ステップ3:上流にリベース</target>
        </trans-unit>
        <trans-unit id="11d3053005d884cc0baea0d55f626ee5d58a2a6e" translate="yes" xml:space="preserve">
          <source>Step 4: Install the Yeoman Generator</source>
          <target state="translated">ステップ 4:Yeoman ジェネレーターのインストール</target>
        </trans-unit>
        <trans-unit id="d2be3c72779cd587be34e70421fd2467e7894ea1" translate="yes" xml:space="preserve">
          <source>Step 4: Run the tests</source>
          <target state="translated">ステップ4:テストの実行</target>
        </trans-unit>
        <trans-unit id="e9fd76aa2302af763cd9bb123a722b970152c5fc" translate="yes" xml:space="preserve">
          <source>Step 5: Double check your submission</source>
          <target state="translated">ステップ5:提出物をダブルチェック</target>
        </trans-unit>
        <trans-unit id="1c864ce6457173a3a941ae978f55091a735f72c1" translate="yes" xml:space="preserve">
          <source>Step 5: Run the tests</source>
          <target state="translated">ステップ5:テストの実行</target>
        </trans-unit>
        <trans-unit id="b96518c7b052df6c7c228843ed78292c66a91d9a" translate="yes" xml:space="preserve">
          <source>Step 6: Push your changes</source>
          <target state="translated">ステップ6:変更点をプッシュする</target>
        </trans-unit>
        <trans-unit id="baa82a802e0780c46eb5d8b0c851c905af055f75" translate="yes" xml:space="preserve">
          <source>Step 7: Send the pull request</source>
          <target state="translated">ステップ7:プルリクエストの送信</target>
        </trans-unit>
        <trans-unit id="f1823ff4064066ec41c29ab620ef5de461f12793" translate="yes" xml:space="preserve">
          <source>Store the info about processed files in order to only operate on the changed ones. The cache is stored in &lt;code&gt;.eslintcache&lt;/code&gt; by default. Enabling this option can dramatically improve ESLint's running time by ensuring that only changed files are linted.</source>
          <target state="translated">変更されたファイルのみを操作するために、処理されたファイルに関する情報を保存します。キャッシュはデフォルトで &lt;code&gt;.eslintcache&lt;/code&gt; に保存されます。このオプションを有効にすると、変更されたファイルのみがリントされるようにすることで、ESLintの実行時間を劇的に改善できます。</target>
        </trans-unit>
        <trans-unit id="040fdcc5343129a76b072a4ce16081703504850c" translate="yes" xml:space="preserve">
          <source>Storing Node.js application config data - Ben Hall's blog</source>
          <target state="translated">Node.jsアプリケーションの設定データを保存する-Ben Hallさんのブログ</target>
        </trans-unit>
        <trans-unit id="7c183131363f4251f89993f5090afc10d8f0caad" translate="yes" xml:space="preserve">
          <source>Strict Mode</source>
          <target state="translated">厳格なモード</target>
        </trans-unit>
        <trans-unit id="10944d62374d1d35c0aa7618089752217945a8f3" translate="yes" xml:space="preserve">
          <source>Strict mode is enabled by using the following pragma in your code:</source>
          <target state="translated">Strictモードを有効にするには、コード内で以下のpragmaを使用します。</target>
        </trans-unit>
        <trans-unit id="4c2e19e5bce9b19bbc0b58f76bc3e3dfe6a9b44a" translate="yes" xml:space="preserve">
          <source>Strict mode should be used in all modules, specified below the file overview comment and above everything else:</source>
          <target state="translated">Strict モードはすべてのモジュールで使用されるべきであり、ファイル概要コメントの下と他のすべてのものの上に指定されています。</target>
        </trans-unit>
        <trans-unit id="3c519ccf5be0c1f36a3bbdf75106a4c822cfcb9f" translate="yes" xml:space="preserve">
          <source>String option:</source>
          <target state="translated">文字列オプション。</target>
        </trans-unit>
        <trans-unit id="7c0095620910afa8aafa46572a5f1abcd3e6d132" translate="yes" xml:space="preserve">
          <source>String options are:</source>
          <target state="translated">文字列のオプションは</target>
        </trans-unit>
        <trans-unit id="219423ce2478de8f7bc615787c69eeec3ac8cfbb" translate="yes" xml:space="preserve">
          <source>Strings should always use double quotes (never single quotes) and should always appear on a single line. Never use a slash to create a new line in a string.</source>
          <target state="translated">文字列は常に二重引用符を使用し(単一引用符は使用しないでください)、常に一行で記述してください。文字列の改行にスラッシュを使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="2bd1e348298a2cd13100d6cde33eeacf35aa2449" translate="yes" xml:space="preserve">
          <source>Style guides may require a space after the &lt;code&gt;function&lt;/code&gt; keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.</source>
          <target state="translated">スタイルガイドでは、無名関数の &lt;code&gt;function&lt;/code&gt; キーワードの後にスペースが必要な場合がありますが、空白を指定しないものもあります。同様に、関数名の後のスペースは必要な場合と必要でない場合があります。</target>
        </trans-unit>
        <trans-unit id="d2602aec88a266da02fb6e6a39ad0ff098e617d0" translate="yes" xml:space="preserve">
          <source>Stylistic Issues</source>
          <target state="translated">スタイルの問題</target>
        </trans-unit>
        <trans-unit id="ff5943f72b414aaa4a17049e5bbb2634c96a77ee" translate="yes" xml:space="preserve">
          <source>Sublime Text 3:</source>
          <target state="translated">崇高なテキスト 3.</target>
        </trans-unit>
        <trans-unit id="030c1749f522d7238c0443341747221266a4ca54" translate="yes" xml:space="preserve">
          <source>SublimeLinter-eslint</source>
          <target state="translated">SublimeLinter-eslint</target>
        </trans-unit>
        <trans-unit id="6ecdca9060c4831fb381d364edb6e63d253d9af3" translate="yes" xml:space="preserve">
          <source>Submit the pull request</source>
          <target state="translated">プルリクエストを送信</target>
        </trans-unit>
        <trans-unit id="583b503cc37a3a03e3fd4c13e083b2095261ea25" translate="yes" xml:space="preserve">
          <source>Submitting a &lt;a href=&quot;pull-requests&quot;&gt;Pull Request&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;pull-requests&quot;&gt;プルリクエストの&lt;/a&gt;送信</target>
        </trans-unit>
        <trans-unit id="0198b462f882ff4a84867d9897d73f6245ad627e" translate="yes" xml:space="preserve">
          <source>Such as:</source>
          <target state="translated">などなど。</target>
        </trans-unit>
        <trans-unit id="3374f6918890228b021e90be8c3993cedad5f95b" translate="yes" xml:space="preserve">
          <source>Suggest using &lt;code&gt;const&lt;/code&gt; (prefer-const)</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; （prefer-const）の使用を提案する</target>
        </trans-unit>
        <trans-unit id="d7fda7e48105f11ea112f4b9190ecb9e41f8c30a" translate="yes" xml:space="preserve">
          <source>Suggest using Reflect methods where applicable (prefer-reflect)</source>
          <target state="translated">該当する場合はReflectメソッドを使用することを提案します。</target>
        </trans-unit>
        <trans-unit id="73a842e9ea440efda64fd80635a0d7967bf45ec9" translate="yes" xml:space="preserve">
          <source>Suggest using named capture group in regular expression (prefer-named-capture-group)</source>
          <target state="translated">正規表現で名前付きキャプチャグループを使用することを提案する (prefer-named-capture-group)</target>
        </trans-unit>
        <trans-unit id="28675d097f0b67789bcf9a4622cdbd9ec701d7ad" translate="yes" xml:space="preserve">
          <source>Suggest using spread syntax instead of &lt;code&gt;.apply()&lt;/code&gt;. (prefer-spread)</source>
          <target state="translated">&lt;code&gt;.apply()&lt;/code&gt; の代わりにスプレッド構文の使用を提案します。（優先スプレッド）</target>
        </trans-unit>
        <trans-unit id="3ff97015207b9f4a9f111ed9aa1e794add36b5bd" translate="yes" xml:space="preserve">
          <source>Suggest using template literals instead of string concatenation. (prefer-template)</source>
          <target state="translated">文字列の連結の代わりにテンプレートリテラルを使うことを提案します。(テンプレートを好む)</target>
        </trans-unit>
        <trans-unit id="73db0ab9a4b1b8fe9efa5f9e4facb96f6382eb3d" translate="yes" xml:space="preserve">
          <source>Suggest using the rest parameters instead of &lt;code&gt;arguments&lt;/code&gt; (prefer-rest-params)</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; （prefer-rest-params）の代わりに残りのパラメーターの使用を提案する</target>
        </trans-unit>
        <trans-unit id="2eb3a8ff27b81cae5e0a8c513b02aac9cbb867f5" translate="yes" xml:space="preserve">
          <source>Suggestion &lt;code&gt;messageId&lt;/code&gt;s</source>
          <target state="translated">提案 &lt;code&gt;messageId&lt;/code&gt; 秒</target>
        </trans-unit>
        <trans-unit id="18e9be223aea66671eb28836cf2ba42607386bfd" translate="yes" xml:space="preserve">
          <source>Suggestions are intended to provide fixes. ESLint will automatically remove the whole suggestion from the linting output if the suggestion's &lt;code&gt;fix&lt;/code&gt; function returned &lt;code&gt;null&lt;/code&gt; or an empty array/sequence.</source>
          <target state="translated">提案は修正を提供することを目的としています。ESLintは、提案の &lt;code&gt;fix&lt;/code&gt; 関数が &lt;code&gt;null&lt;/code&gt; または空の配列/シーケンスを返した場合、提案全体をlinting出力から自動的に削除します。</target>
        </trans-unit>
        <trans-unit id="f7db9952d2964aa65b756b67c22f5246a1c46374" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional):</source>
          <target state="translated">提案は、エラーオブジェクトに &lt;code&gt;suggestions&lt;/code&gt; キーを定義することでテストできます。提案を確認するためのオプションは次のとおりです（すべてオプションです）。</target>
        </trans-unit>
        <trans-unit id="c916d9f4a8ffd629b95d93d9124a2f7c4e41d96c" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional): * &lt;code&gt;desc&lt;/code&gt; (string): The suggestion &lt;code&gt;desc&lt;/code&gt; value * &lt;code&gt;messageId&lt;/code&gt; (string): The suggestion &lt;code&gt;messageId&lt;/code&gt; value for suggestions that use &lt;code&gt;messageId&lt;/code&gt;s * &lt;code&gt;output&lt;/code&gt; (string): A code string representing the result of applying the suggestion fix to the input code</source>
          <target state="translated">エラーオブジェクトに &lt;code&gt;suggestions&lt;/code&gt; キーを定義することで、提案をテストできます。 （すべてはオプションです）、次のされている提案をチェックするためのオプション：* &lt;code&gt;desc&lt;/code&gt; （文字列）：提案 &lt;code&gt;desc&lt;/code&gt; 値* &lt;code&gt;messageId&lt;/code&gt; です（文字列）：提案の &lt;code&gt;messageId&lt;/code&gt; の提案のための値を使用すること &lt;code&gt;messageId&lt;/code&gt; S * &lt;code&gt;output&lt;/code&gt; Aコード：（文字列）入力コードに提案修正を適用した結果を表す文字列</target>
        </trans-unit>
        <trans-unit id="3e50b8781a635b4ef2043bf1c55b61ebd430b444" translate="yes" xml:space="preserve">
          <source>Summary formatter</source>
          <target state="translated">サマリーフォーマッタ</target>
        </trans-unit>
        <trans-unit id="f728bb607703d5d8840e57203c2748461be1c478" translate="yes" xml:space="preserve">
          <source>Supplied callback names</source>
          <target state="translated">供給されたコールバック名</target>
        </trans-unit>
        <trans-unit id="9e4bceec48f473d3d0d75720f392d38042d15367" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;scopeManager&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;scopeManager&lt;/code&gt; will provide an &lt;code&gt;eslintScopeManager: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">&lt;code&gt;scopeManager&lt;/code&gt; のサポートは、ESLint v4.14.0で追加されました。サポートESLintバージョン &lt;code&gt;scopeManager&lt;/code&gt; が提供されます &lt;code&gt;eslintScopeManager: true&lt;/code&gt; でプロパティ &lt;code&gt;parserOptions&lt;/code&gt; 、特徴検出のために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d3be2b0d911459b5814d53e32d33fa047f7443bd" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;visitorKeys&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;visitorKeys&lt;/code&gt; will provide an &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">&lt;code&gt;visitorKeys&lt;/code&gt; のサポートはESLint v4.14.0で追加されました。サポートESLintバージョン &lt;code&gt;visitorKeys&lt;/code&gt; が提供されます &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; の不動産 &lt;code&gt;parserOptions&lt;/code&gt; 特徴検出のために使用することができ、。</target>
        </trans-unit>
        <trans-unit id="998fadcd171167b554bf2c08de343941a1465d16" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="translated">SwitchCase</target>
        </trans-unit>
        <trans-unit id="3253b8236b095baad85b618af991aec7e4b807ea" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification</source>
          <target state="translated">シンボルオブジェクト仕様</target>
        </trans-unit>
        <trans-unit id="4b8745ced25b460b42f0ffff119fb7e742454610" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification: Symbol description</source>
          <target state="translated">シンボルオブジェクトの仕様。シンボルの説明</target>
        </trans-unit>
        <trans-unit id="5c1a0f585424dee7b8554275b5954f6b460c63ba" translate="yes" xml:space="preserve">
          <source>Syntastic</source>
          <target state="translated">Syntastic</target>
        </trans-unit>
        <trans-unit id="9d22b24463f2b7e050a7de4a58d0cc4b507e094e" translate="yes" xml:space="preserve">
          <source>Table of Content</source>
          <target state="translated">コンテンツの目次</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">目次</target>
        </trans-unit>
        <trans-unit id="1bb44ac0ce6df50699361a74b6a78b3bcf6d27e3" translate="yes" xml:space="preserve">
          <source>Tabs: jQuery</source>
          <target state="translated">タブ:jQuery</target>
        </trans-unit>
        <trans-unit id="b56e0af9912b57fe07bd022ded51e9d34177d6b8" translate="yes" xml:space="preserve">
          <source>Template literals (MDN)</source>
          <target state="translated">テンプレートリテラル(MDN</target>
        </trans-unit>
        <trans-unit id="3760c9870e77d722186e405789b255d1fc4397f6" translate="yes" xml:space="preserve">
          <source>Temporal Dead Zone</source>
          <target state="translated">時間的不感帯</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="40735bc727ae1db7f555635000520d9343037f8c" translate="yes" xml:space="preserve">
          <source>Ternary Operator</source>
          <target state="translated">三項演算子</target>
        </trans-unit>
        <trans-unit id="73ae0e17a1d0167b6266afc4c66bc3cd1157963b" translate="yes" xml:space="preserve">
          <source>Ternary Operator: &lt;code&gt;?:&lt;/code&gt;</source>
          <target state="translated">三項演算子： &lt;code&gt;?:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="aa91a5a624af7d8296afa52521f68fe2c22fbe6f" translate="yes" xml:space="preserve">
          <source>Testing Suggestions</source>
          <target state="translated">テストの提案</target>
        </trans-unit>
        <trans-unit id="fac2d0573011312ce352636a228659611db6e134" translate="yes" xml:space="preserve">
          <source>Testing errors with &lt;code&gt;messageId&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;messageId&lt;/code&gt; を使用したエラーのテスト</target>
        </trans-unit>
        <trans-unit id="d720305ae3061bec3ca536cef916c4141b41323c" translate="yes" xml:space="preserve">
          <source>TextMate 2:</source>
          <target state="translated">TextMate 2.</target>
        </trans-unit>
        <trans-unit id="9d341ea56c03bc023005aac875b425f57d6428b2" translate="yes" xml:space="preserve">
          <source>That works fine when you don't want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It's considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the &lt;code&gt;/falls?\s?through/i&lt;/code&gt; regular expression:</source>
          <target state="translated">フォールスルーが不要な場合は問題ありませんが、フォールスルーが意図的なものである場合、言語でそれを示す方法はありません。 &lt;code&gt;/falls?\s?through/i&lt;/code&gt; 正規表現に一致するコメントを使用して、フォールスルーが意図的であることを常に示すことがベストプラクティスと見なされています。</target>
        </trans-unit>
        <trans-unit id="6ae09c7ad75a7a8f54ad7a675b476d63d3d4806c" translate="yes" xml:space="preserve">
          <source>The &quot;max&quot; object property is optional (default: 1).</source>
          <target state="translated">max &quot;オブジェクトプロパティはオプションです(デフォルトは1)。</target>
        </trans-unit>
        <trans-unit id="dbb58b13b991ead49bcb9152b87b31df2d758c54" translate="yes" xml:space="preserve">
          <source>The 1-based column number of the begin point of this message.</source>
          <target state="translated">このメッセージの開始点の1ベースのカラム番号。</target>
        </trans-unit>
        <trans-unit id="77bfab5d4b122d435b42f1cc6e25f3b15431c3ba" translate="yes" xml:space="preserve">
          <source>The 1-based column number of the end point of this message. This property is undefined if this message is not a range.</source>
          <target state="translated">このメッセージの終了点の1ベースの列番号。このプロパティは、このメッセージが範囲でない場合は未定義です。</target>
        </trans-unit>
        <trans-unit id="1bfeaeabc605c8970a4e9a4943be75663e3151fb" translate="yes" xml:space="preserve">
          <source>The 1-based line number of the begin point of this message.</source>
          <target state="translated">このメッセージの開始点の1ベースの行番号。</target>
        </trans-unit>
        <trans-unit id="217ce3c9eec171b0c8f48cc98ef0326f12fd81a8" translate="yes" xml:space="preserve">
          <source>The 1-based line number of the end point of this message. This property is undefined if this message is not a range.</source>
          <target state="translated">このメッセージの終了点の1ベースの行番号。このプロパティは、このメッセージが範囲でない場合は未定義です。</target>
        </trans-unit>
        <trans-unit id="b16353fd54f2f4a9ee74c0161bfe191f44ad0ae0" translate="yes" xml:space="preserve">
          <source>The 1st option is &lt;code&gt;&quot;asc&quot;&lt;/code&gt; or &lt;code&gt;&quot;desc&quot;&lt;/code&gt;.</source>
          <target state="translated">最初のオプションは &lt;code&gt;&quot;asc&quot;&lt;/code&gt; または &lt;code&gt;&quot;desc&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="45905a15b4e98684c96286c7a579ca2e9122122b" translate="yes" xml:space="preserve">
          <source>The 2nd option is an object which has 3 properties.</source>
          <target state="translated">2つ目のオプションは、3つのプロパティを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="9a3b916c01c8581fb8b9ca9adec25cef6c29aac2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; object of autofix. This property is undefined if this message is not fixable.</source>
          <target state="translated">&lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfoの&lt;/a&gt;自動修正の対象。このメッセージを修正できない場合、このプロパティは未定義です。</target>
        </trans-unit>
        <trans-unit id="a7ca023748464e13f90714830960ee50f938ef1e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to filter.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResultは、&lt;/a&gt;フィルターにオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b70253817a5926115cf28ddc0ea4683ac9393e08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to write.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResultは&lt;/a&gt;、書き込みに反対します。</target>
        </trans-unit>
        <trans-unit id="29ce05a67597e0643fcdc8100c44eaa9d1419d89" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#using-rule-metadata&quot;&gt;Using Rule metadata&lt;/a&gt; example shows how to use the &lt;code&gt;data&lt;/code&gt; object in a custom formatter. See the &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt; page for more information about rules.</source>
          <target state="translated">&lt;a href=&quot;#using-rule-metadata&quot;&gt;ルールのメタデータ&lt;/a&gt;の使用例は、カスタムフォーマッタで &lt;code&gt;data&lt;/code&gt; オブジェクトを使用する方法を示しています。&lt;a href=&quot;working-with-rules&quot;&gt;ルールの&lt;/a&gt;詳細については、「ルールの使用」ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="4353f66bb2c82dd7f9dd9e432acc290e40026470" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../developer-guide/nodejs-api#cliengine&quot;&gt;&lt;code&gt;CLIEngine&lt;/code&gt; class&lt;/a&gt; has been deprecated and replaced by the new &lt;a href=&quot;../developer-guide/nodejs-api#eslint-class&quot;&gt;&lt;code&gt;ESLint&lt;/code&gt; class&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../developer-guide/nodejs-api#cliengine&quot;&gt; &lt;code&gt;CLIEngine&lt;/code&gt; のクラスは&lt;/a&gt;非推奨となり、新しいによって置き換えられました&lt;a href=&quot;../developer-guide/nodejs-api#eslint-class&quot;&gt; &lt;code&gt;ESLint&lt;/code&gt; のクラス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5b1896cdaec6c51ba10667d39b756eedd5551922" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../rules/no-undef&quot;&gt;no-undef&lt;/a&gt; rule will warn on variables that are accessed but not defined within the same file. If you are using global variables inside of a file then it's worthwhile to define those globals so that ESLint will not warn about their usage. You can define global variables either using comments inside of a file or in the configuration file.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-undef&quot;&gt;無undefを&lt;/a&gt;ルールにアクセスしても同じファイル内で定義されていない変数に警告します。ファイル内でグローバル変数を使用している場合、ESLintがその使用について警告しないように、それらのグローバルを定義することは価値があります。ファイル内または構成ファイル内のコメントを使用して、グローバル変数を定義できます。</target>
        </trans-unit>
        <trans-unit id="047eac5397259d4ad14b6243aa57de4dae1a614d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript 5 specification&lt;/a&gt; makes it clear that both &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">&lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScriptの5仕様では、&lt;/a&gt;それは両方のことが明らかになり &lt;code&gt;Math&lt;/code&gt; と &lt;code&gt;JSON&lt;/code&gt; を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="1a35e82f6be72b6be61cd4a886d86c858f228012" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript 2015 specification&lt;/a&gt; makes it clear that &lt;code&gt;Reflect&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScriptの2015仕様では、&lt;/a&gt;それがあることが明らかになり &lt;code&gt;Reflect&lt;/code&gt; 呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="81c1cb58f2de5577eeb597a1918e8584414249b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;always&quot;&lt;/code&gt; option (default) enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; in every situation (except when you opt-in to more specific handling of &lt;code&gt;null&lt;/code&gt; [see below]).</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; オプション（デフォルト）の使用強制 &lt;code&gt;===&lt;/code&gt; と &lt;code&gt;!==&lt;/code&gt; （あなたがオプトインする際の取り扱いがより具体的に除いて、すべての状況で &lt;code&gt;null&lt;/code&gt; [下記参照]）。</target>
        </trans-unit>
        <trans-unit id="0234b9d3610f2d5c0d1890c03b252abd7cefab7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; rule is directly inspired by the Airbnb &lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS Style Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; ルールは直接Airbnbに触発された&lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JSスタイルガイド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d82ce97069386b44a427b995707c718f99559346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option will check for redeclaration of built-in globals in global scope.</source>
          <target state="translated">&lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; オプションは、組み込みのグローバルグローバルスコープでの再宣言をチェックします。</target>
        </trans-unit>
        <trans-unit id="258321fe90655819f22eef5ffbb3f4fe1c32eec4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.</source>
          <target state="translated">&lt;code&gt;&quot;empty&quot;&lt;/code&gt; の例外懸念空の括弧、とは、最初のオプションを反転、他の例外と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="3b02d6c73ff7b77ebcbfdce42ad57c73245465b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; configuration contains many of the same default rule settings from 0.x, but not all. These rules are no longer on by default, so you should review your settings to ensure they are still as you expect:</source>
          <target state="translated">&lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 設定がすべてではありませんが、0.xであるから、同じデフォルトルールの設定の多くが含まれています。これらのルールはデフォルトでは無効になっているため、設定を見直して、期待どおりであることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="5913f4b04b709c4a37956c8f0a355bb3e59d6045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; の値は、規則の例外と見なされる文字列パターンの配列です。最初の引数が &lt;code&gt;&quot;never&quot;&lt;/code&gt; の場合、例外は無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe039a59a04c46fd505176d921318453636d178a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line or &lt;code&gt;*/&lt;/code&gt; if the comment is a single line comment. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; の値は、規則の例外と見なされる文字列パターンの配列です。パターンがコメントの先頭から始まり、行の終わりまで繰り返される場合、またはコメントが1行のコメントの場合は &lt;code&gt;*/&lt;/code&gt; の場合、ルールは警告しません。最初の引数が &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、例外は無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e34f8d72a6e0abd2b6cd46f7f53eb977a9c25ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a configuration file enables this rule.</source>
          <target state="translated">構成ファイルの &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; プロパティは、このルールを有効にします。</target>
        </trans-unit>
        <trans-unit id="ec76be0c108097d6838a0ac4fbb38e16745647e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; value is an array of string patterns which are considered markers for docblock-style comments, such as an additional &lt;code&gt;/&lt;/code&gt;, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters. The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; array will apply regardless of the value of the first argument, e.g. &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;markers&quot;&lt;/code&gt; 値は、そのような追加などのdocblockスタイルのコメントのマーカー、と考えられている文字列パターンの配列である &lt;code&gt;/&lt;/code&gt; 追加文字を持たなければならないdoxygenは、vsdoc、等によって読み取ら示す資料を用い、。 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; 配列は、例えば、関係なく、最初の引数の値の適用されないだろう &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5df38b7cf9b33c3fdba20972fad0ce2f4e5d6596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;never&quot;&lt;/code&gt; option ignores &lt;code&gt;const&lt;/code&gt; variable initializations.</source>
          <target state="translated">&lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションは無視 &lt;code&gt;const&lt;/code&gt; 変数の初期化を。</target>
        </trans-unit>
        <trans-unit id="665c133a9b40f2ee21d1a8c214ccb5968d500388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;property&quot;&lt;/code&gt; option requires the dot to be on the same line as the property.</source>
          <target state="translated">&lt;code&gt;&quot;property&quot;&lt;/code&gt; オプションでは、プロパティと同じライン上にあるように、ドットが必要です。</target>
        </trans-unit>
        <trans-unit id="a8917282c9e6924d8221f022d420501eebe8dd61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;global&quot;&lt;/code&gt; option if ESLint considers a file to be a &lt;strong&gt;Node.js&lt;/strong&gt; or &lt;strong&gt;CommonJS&lt;/strong&gt; module because the configuration specifies either of the following:</source>
          <target state="translated">&lt;code&gt;&quot;safe&quot;&lt;/code&gt; へのオプション対応 &lt;code&gt;&quot;global&quot;&lt;/code&gt; ESLintがするファイルを考えればオプション&lt;strong&gt;のNode.js&lt;/strong&gt;や&lt;strong&gt;CommonJS&lt;/strong&gt;モジュールために以下のいずれかの設定を指定：</target>
        </trans-unit>
        <trans-unit id="335d3d2aadf4b8cd6d235ef1c1ab85d30c55e2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;smart&quot;&lt;/code&gt; option enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; except for these cases:</source>
          <target state="translated">&lt;code&gt;&quot;smart&quot;&lt;/code&gt; オプションは使用強制 &lt;code&gt;===&lt;/code&gt; と &lt;code&gt;!==&lt;/code&gt; これらのケースを除いては。</target>
        </trans-unit>
        <trans-unit id="757da32c45a012c497f6f5b85d15dfd792bd342d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive applies to the scope in which it appears and all inner scopes contained within that scope. Therefore, using the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in one of these inner scopes is unnecessary.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; ディレクティブは、それが出現するスコープと、そのスコープ内に含まれるすべての内部スコープに適用されます。そのため、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; これらの内部スコープのいずれかにあるディレクティブは不要です。</target>
        </trans-unit>
        <trans-unit id="34c46639b01057382b6b9a17c0ce73084f411d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixed problems reported by this rule.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;の &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告された問題を自動的に修正しました。</target>
        </trans-unit>
        <trans-unit id="5b8b6136da33c3a25813fde1f0b5cd20a7b643a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;の &lt;code&gt;--fix&lt;/code&gt; オプションは、下にレンチがあるルールによって報告された問題（現在はほとんど空白）を自動的に修正します。</target>
        </trans-unit>
        <trans-unit id="8c7a3a09ba8e134da02e62a2b097beafa2f467a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;command line&lt;/a&gt; can automatically fix some of the problems reported by this rule.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;コマンドライン&lt;/a&gt;の &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告された問題の一部を自動的に修正できます。</target>
        </trans-unit>
        <trans-unit id="1ad561df4151ebb76e63f840b52ab0f6ae886e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a &lt;code&gt;typeof&lt;/code&gt; expression, or if both operands are literals with the same type.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告されたいくつかの問題を自動的に修正します。オペランドの1つが &lt;code&gt;typeof&lt;/code&gt; 式である場合、または両方のオペランドが同じタイプのリテラルである場合にのみ、問題が修正されます。</target>
        </trans-unit>
        <trans-unit id="cfc6a5d47bc7a83b2362366b0d3b2b186202a528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; is corrected to &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt;), but multiple lines are not reordered.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告されたいくつかの問題を自動的に修正します &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; 行の複数のメンバーは自動的にソートされます（たとえば、 'foo.js'からのインポート{b、a}は &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt; 修正されます'foo.js'から）、ただし複数行は並べ替えられません。</target>
        </trans-unit>
        <trans-unit id="6ee7ab0d0ef494b690762e7c764488b7d5a3c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line does not insert new &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but only removes unneeded statements.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、新しい &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ステートメントを挿入せず、不要なステートメントのみを削除します。</target>
        </trans-unit>
        <trans-unit id="3d24607e46229c7268d72a682e31b53d3099f57e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line fixes only problems reported in variable declarations, and among them only those that fall under the category &lt;code&gt;object&lt;/code&gt; destructuring. Furthermore, the name of the declared variable has to be the same as the name used for non-computed member access in the initializer. For example, &lt;code&gt;var foo = object.foo&lt;/code&gt; can be automatically fixed by this rule. Problems that involve computed member access (e.g., &lt;code&gt;var foo = object[foo]&lt;/code&gt;) or renamed properties (e.g., &lt;code&gt;var foo = object.bar&lt;/code&gt;) are not automatically fixed.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、変数宣言で報告された問題のみを修正し、その中で、カテゴリ &lt;code&gt;object&lt;/code&gt; 破壊に該当する問題のみを修正します。さらに、宣言された変数の名前は、初期化子で計算されていないメンバーのアクセスに使用される名前と同じである必要があります。たとえば、 &lt;code&gt;var foo = object.foo&lt;/code&gt; は、このルールによって自動的に修正できます。計算されたメンバーアクセス（例： &lt;code&gt;var foo = object[foo]&lt;/code&gt; ）または名前が変更されたプロパティ（例： &lt;code&gt;var foo = object.bar&lt;/code&gt; ）に関連する問題は自動的に修正されません。</target>
        </trans-unit>
        <trans-unit id="651165c0cfafa6ed91a01ff2f3a275112628a26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; field gives you credit for having created the file.</source>
          <target state="translated">&lt;code&gt;@author&lt;/code&gt; のフィールドには、ファイルを作成したために、あなたに信用を与えます。</target>
        </trans-unit>
        <trans-unit id="8d050940abfee32adbac0c6eb00b3c5418a91500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method has changed to work more like &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt;. In v2.x, &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; warned about ignored files by default and didn't have a way to opt-out of those warnings whereas &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; did not warn about ignored files by default and allowed you to opt-in to warning about them. The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method now also does not warn about ignored files by default and allows you to opt-in with a new, third argument (a boolean, &lt;code&gt;true&lt;/code&gt; to warn about ignored files and &lt;code&gt;false&lt;/code&gt; to not warn).</source>
          <target state="translated">&lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; メソッドは、より多くのように動作するように変更されました &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; 。 v2.xでは、 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; はデフォルトで無視されたファイルについて警告し、それらの警告をオプトアウトする方法がありませんでしたが、 &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; はデフォルトで無視されたファイルについて警告せず、ユーザーがそれらについて警告します。 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; メソッドは、現在もデフォルトで無視されたファイルについて警告とすることができますしませんオプトイン（ブール、新しい、第三引数を持つ &lt;code&gt;true&lt;/code&gt; 無視されたファイルとについて警告する &lt;code&gt;false&lt;/code&gt; 警告しないように）。</target>
        </trans-unit>
        <trans-unit id="b443b18f5fe8c1198515e5121d1eb8b90810b7eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; class has been deprecated</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; のクラスが廃止されました</target>
        </trans-unit>
        <trans-unit id="e3237aa6952ebde13c8b884eaae887809df08c16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; class provides a synchronous API that is blocking the implementation of features such as parallel linting, supporting ES modules in shareable configs/parsers/plugins/formatters, and adding the ability to visually display the progress of linting runs. The new &lt;code&gt;ESLint&lt;/code&gt; class provides an asynchronous API that ESLint core will now using going forward. &lt;code&gt;CLIEngine&lt;/code&gt; will remain in core for the foreseeable future but may be removed in a future major version.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; のクラスは、このような並列リンティングなどの機能の実現を阻止する共有可能コンフィグ/パーサ/プラグイン/フォーマッタでESモジュールを支持し、そして視覚的にランをリンティングの進行状況を表示する機能を追加して同期APIを提供します。新しい &lt;code&gt;ESLint&lt;/code&gt; クラスは、ESLintコアが今後使用する非同期APIを提供します。 &lt;code&gt;CLIEngine&lt;/code&gt; は当面の間コアのままですが、将来のメジャーバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="cd01e52d3805d8a62d247b8499d65fa83701f436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; は、コンストラクタで、あなたが使用するオプションに渡すことによって、新しいインスタンスを作成することができます。使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="36a91b8e915150c788d9aa4f17ae522dfcd51ab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; のオブジェクト</target>
        </trans-unit>
        <trans-unit id="cb04e559741ded700b750c763c58609e67280d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; type represents the core functionality of the CLI except that it reads nothing from the command line and doesn't output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the &lt;code&gt;Linter&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; のタイプは、コマンドラインから何も読まないと、デフォルトでは何も出力しないことを除き、CLIのコア機能を表します。代わりに、CLIに渡される引数の多く（すべてではない）を受け入れます。構成ファイルとソースファイルの両方を読み取り、 &lt;code&gt;Linter&lt;/code&gt; オブジェクトに渡される環境を管理します。</target>
        </trans-unit>
        <trans-unit id="7c04bc333459294a802b327b5827d0068e581953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt;, &lt;code&gt;SourceCode&lt;/code&gt;, and &lt;code&gt;RuleTester&lt;/code&gt; modules from ESLint's Node.js API are now ES2015 classes. This will not break any documented behavior, but it does have some observable effects (for example, the methods on &lt;code&gt;CLIEngine.prototype&lt;/code&gt; are now non-enumerable).</source>
          <target state="translated">ESLintのNode.js API の &lt;code&gt;CLIEngine&lt;/code&gt; 、 &lt;code&gt;SourceCode&lt;/code&gt; 、および &lt;code&gt;RuleTester&lt;/code&gt; モジュールがES2015クラスになりました。これにより、文書化された動作が中断されることはありませんが、目に &lt;code&gt;CLIEngine.prototype&lt;/code&gt; 影響がいくつかあります（たとえば、CLIEngine.prototypeのメソッドは列挙できない）。</target>
        </trans-unit>
        <trans-unit id="8dff6f94cd40c096f350e419d585278490290c3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ESLint&lt;/code&gt; class is the primary class to use in Node.js applications.</source>
          <target state="translated">&lt;code&gt;ESLint&lt;/code&gt; のクラスは、Node.jsのアプリケーションで使用するための主要なクラスです。</target>
        </trans-unit>
        <trans-unit id="448de94e4a5c6b54e20b7d92beb049e1353254ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ESLint&lt;/code&gt; constructor takes an &lt;code&gt;options&lt;/code&gt; object. If you omit the &lt;code&gt;options&lt;/code&gt; object then it uses default values for all options. The &lt;code&gt;options&lt;/code&gt; object has the following properties.</source>
          <target state="translated">&lt;code&gt;ESLint&lt;/code&gt; のコンストラクタは、かかる &lt;code&gt;options&lt;/code&gt; オブジェクトを。 &lt;code&gt;options&lt;/code&gt; オブジェクトを省略すると、すべてのオプションにデフォルト値が使用されます。 &lt;code&gt;options&lt;/code&gt; オブジェクトは、次の特性を持っています。</target>
        </trans-unit>
        <trans-unit id="cb55f87af3939b8a26c09301489c8b88cb0d4b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EditInfo&lt;/code&gt; value is information to edit text. The &lt;code&gt;fix&lt;/code&gt; and &lt;code&gt;suggestions&lt;/code&gt; properties of &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; type contain it. It has following properties:</source>
          <target state="translated">&lt;code&gt;EditInfo&lt;/code&gt; の値は、エディットテキストへの情報です。&lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt;タイプの &lt;code&gt;fix&lt;/code&gt; および &lt;code&gt;suggestions&lt;/code&gt; プロパティにはそれが含まれています。次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="bc6ee1cbc4284429934a86ecac444fe81dc04e8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt; value is the object to convert the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to text. The &lt;a href=&quot;#-eslintloadformatternameorpath&quot;&gt;eslint.loadFormatter()&lt;/a&gt; method returns it. It has the following method:</source>
          <target state="translated">&lt;code&gt;Formatter&lt;/code&gt; 値は、変換することが目的である&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResultの&lt;/a&gt;テキストにオブジェクトを。&lt;a href=&quot;#-eslintloadformatternameorpath&quot;&gt;eslint.loadFormatter（）&lt;/a&gt;メソッドは、それを返します。次の方法があります。</target>
        </trans-unit>
        <trans-unit id="10215453b4d9e38705bc6510ce93465250bda0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LintMessage&lt;/code&gt; value is the information of each linting error. The &lt;code&gt;messages&lt;/code&gt; property of the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; type contains it. It has the following properties:</source>
          <target state="translated">&lt;code&gt;LintMessage&lt;/code&gt; の値は、各リンティングエラーの情報です。&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;タイプの &lt;code&gt;messages&lt;/code&gt; プロパティにはそれが含まれています。次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="80d5223bd532c8881ed7de1546fb3c0c20284147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LintResult&lt;/code&gt; value is the information of the linting result of each file. The &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt;&lt;code&gt;eslint.lintText()&lt;/code&gt;&lt;/a&gt; methods return it. It has the following properties:</source>
          <target state="translated">&lt;code&gt;LintResult&lt;/code&gt; 値は、各ファイルのリンティング結果の情報です。&lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt; &lt;code&gt;eslint.lintText()&lt;/code&gt; &lt;/a&gt;メソッドは、それを返します。次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="5c9b20fb5b6252830eb519435c0219003fa37dba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="1d37bb325bb6d585cfb9ad4d89a7dcea80388f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object does the actual evaluation of the JavaScript code. It doesn't do any filesystem operations, it simply parses and reports on the code. In particular, the &lt;code&gt;Linter&lt;/code&gt; object does not process configuration objects or files. The &lt;code&gt;Linter&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; オブジェクトは、JavaScriptコードの実際の評価を行います。ファイルシステムの操作は行わず、単にコードを解析して報告します。特に、 &lt;code&gt;Linter&lt;/code&gt; オブジェクトは構成オブジェクトまたはファイルを処理しません。 &lt;code&gt;Linter&lt;/code&gt; 、コンストラクタで、あなたが使用するオプションに渡すことによって、新しいインスタンスを作成することができます。使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6b3697f8c0f76c13f38759df3544e6dd3e1c83db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node must have &lt;code&gt;raw&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;Literal&lt;/code&gt; ノードが持っている必要があり &lt;code&gt;raw&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="6199c13da52a235cf644776c5b0a32c08d65bf50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node:</source>
          <target state="translated">&lt;code&gt;Literal&lt;/code&gt; ノード：</target>
        </trans-unit>
        <trans-unit id="b0e719a9b8eee0a7e784f9393820037edebb8384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor is used to create new generic objects in JavaScript, such as:</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; コンストラクタは、次のようなJavaScriptで新しい汎用オブジェクトを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="26fa98a82c9b4be9d13ddb25b7b39470825fc8b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node must have &lt;code&gt;tokens&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; properties. Both properties are an array of the below Token interface.</source>
          <target state="translated">&lt;code&gt;Program&lt;/code&gt; ノードが持っている必要があり &lt;code&gt;tokens&lt;/code&gt; と &lt;code&gt;comments&lt;/code&gt; プロパティを。両方のプロパティは、以下のトークンインターフェイスの配列です。</target>
        </trans-unit>
        <trans-unit id="bcf1f4affa5a7dea7c1e9653f4ab221ce29cdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node:</source>
          <target state="translated">&lt;code&gt;Program&lt;/code&gt; ノード：</target>
        </trans-unit>
        <trans-unit id="70ccd03ac71f531e40460156a41567e273392912" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor function, e.g., &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; or &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトのコンストラクタ関数、例えば、 &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; または &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18ac7817ce0d8138e79809c23852f9087177a2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester#run()&lt;/code&gt; method is used to run the tests. It should be passed the following arguments:</source>
          <target state="translated">&lt;code&gt;RuleTester#run()&lt;/code&gt; メソッドは、テストを実行するために使用されます。次の引数を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e3f4c9bab5a0c5a3adc959e3a3fdfbbb58b5ebf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; constructor accepts an optional object argument, which can be used to specify defaults for your test cases. For example, if all of your test cases use ES2015, you can set it as a default:</source>
          <target state="translated">&lt;code&gt;RuleTester&lt;/code&gt; のコンストラクタは、テストケースのデフォルトを指定するために使用できるオプションのオブジェクト引数を受け付けます。たとえば、すべてのテストケースでES2015を使用している場合、それをデフォルトとして設定できます。</target>
        </trans-unit>
        <trans-unit id="6c8764a4c51cc41689c63fe6e9375e5151a9b01d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; now validates the following:</source>
          <target state="translated">&lt;code&gt;RuleTester&lt;/code&gt; は今、次のことを検証します。</target>
        </trans-unit>
        <trans-unit id="3a5077bac9449562ad14f14c5e522a6fd8f8637a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor strips Unicode BOM. Please note the AST also should be parsed from stripped text.</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; コンストラクタは、UnicodeのBOMを取り除きます。ASTも、ストリップされたテキストから解析する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="db75fab00b139e2cb8ebf27b845a2a26e0849306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor throws an error if the AST is missing any of the required information.</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; ASTは、必要な情報のいずれかが欠落している場合は、コンストラクタでエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1218e56286f97f65b8425325264eb5a0d40ee097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; object is the main object for getting more information about the source code being linted. You can retrieve the &lt;code&gt;SourceCode&lt;/code&gt; object at any time by using the &lt;code&gt;getSourceCode()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; オブジェクトはLINTEDされるソースコードに関する詳細情報を取得するための主な目的です。 &lt;code&gt;getSourceCode()&lt;/code&gt; メソッドを使用すると、いつでも &lt;code&gt;SourceCode&lt;/code&gt; オブジェクトを取得できます。</target>
        </trans-unit>
        <trans-unit id="479675aca73cae5c11d5d90c4454a08ce8e61d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; type represents the parsed source code that ESLint executes on. It's used internally in ESLint and is also available so that already-parsed code can be used. You can create a new instance of &lt;code&gt;SourceCode&lt;/code&gt; by passing in the text string representing the code and an abstract syntax tree (AST) in &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; format (including location information, range information, comments, and tokens):</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; 種類はESLintがオン実行する解析されたソースコードを表します。これはESLintの内部で使用され、すでに解析済みのコードを使用できるようにすることもできます。コードを表すテキスト文字列と&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;形式の抽象構文ツリー（AST）（場所情報、範囲情報、コメント、トークンを含む）を渡すことで、 &lt;code&gt;SourceCode&lt;/code&gt; の新しいインスタンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="0f460ba3a888cb7885538cd22b45cfa2e1993d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol&lt;/code&gt; function may have an optional description:</source>
          <target state="translated">&lt;code&gt;Symbol&lt;/code&gt; 機能は、オプションの説明を持っていることがあります。</target>
        </trans-unit>
        <trans-unit id="2d21736c63a542408cd25bebb0064399dafd3380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tag&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Tag&lt;/code&gt; 、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="4017431bd4ca04209028b2fd7c8155020d0e96be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__iterator__&lt;/code&gt; property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's &lt;code&gt;for in&lt;/code&gt; and &lt;code&gt;for each&lt;/code&gt; constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:</source>
          <target state="translated">&lt;code&gt;__iterator__&lt;/code&gt; プロパティには、JavaScriptのと互換性のあるカスタムイテレータ作成するために使用することができJavaScriptにSpiderMonkeyの延長だっ &lt;code&gt;for in&lt;/code&gt; と &lt;code&gt;for each&lt;/code&gt; 構造を。ただし、このプロパティは廃止されたため、使用しないでください。これがどのように機能したかの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="5c5ed6ba19e731544b6cd87b09fe8abbca32c289" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property has been removed in ESLint v5.0, so it is no longer possible to implement rules with this functionality. However, the &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;&lt;code&gt;--report-unused-disable-directives&lt;/code&gt;&lt;/a&gt; CLI flag can be used to flag unused directive comments.</source>
          <target state="translated">&lt;code&gt;_linter&lt;/code&gt; のこの機能でルールを実装することはもはや不可能であるので、プロパティは、ESLintのV5.0で削除されていません。ただし、&lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt; &lt;code&gt;--report-unused-disable-directives&lt;/code&gt; &lt;/a&gt; CLIフラグを使用して、未使用のディレクティブコメントにフラグを付けることができます。</target>
        </trans-unit>
        <trans-unit id="e9b2ca0a9deb95b8d07936a6b72107ed5085c1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property on rule context objects has been removed</source>
          <target state="translated">ルールコンテキストオブジェクトの &lt;code&gt;_linter&lt;/code&gt; プロパティが削除されました</target>
        </trans-unit>
        <trans-unit id="1540bf038d822cce14da545ed574c51549eac1e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; option can take additional configuration through the &lt;code&gt;beforeColon&lt;/code&gt;, &lt;code&gt;afterColon&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;on&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; オプションはを通じて、追加の構成を取ることができ &lt;code&gt;beforeColon&lt;/code&gt; 、 &lt;code&gt;afterColon&lt;/code&gt; 、 &lt;code&gt;mode&lt;/code&gt; 、および &lt;code&gt;on&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="d05ba21959dd3bd33b13539a51873b945545c638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow&lt;/code&gt; option is an array of identifier names for which shadowing is allowed. For example, &lt;code&gt;&quot;resolve&quot;&lt;/code&gt;, &lt;code&gt;&quot;reject&quot;&lt;/code&gt;, &lt;code&gt;&quot;done&quot;&lt;/code&gt;, &lt;code&gt;&quot;cb&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;allow&lt;/code&gt; オプションがシャドーイングが許可された識別子名の配列です。たとえば、 &lt;code&gt;&quot;resolve&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;reject&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;done&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;cb&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a3afd6725b2244693e0d6e156a1e44afd3600d41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option has three settings:</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; オプションには3つの設定があります。</target>
        </trans-unit>
        <trans-unit id="4cadc8103349def3aa303140050911f6d8949c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.</source>
          <target state="translated">&lt;code&gt;argsIgnorePattern&lt;/code&gt; オプションを指定例外が使用されていることをチェックしない：名前引数が正規表現パターンに一致します。たとえば、名前がアンダースコアで始まる変数。</target>
        </trans-unit>
        <trans-unit id="6bb74f27a7dcda830e7e3515e710fd44a61861b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind()&lt;/code&gt; method is used to create functions with specific &lt;code&gt;this&lt;/code&gt; values and, optionally, binds arguments to specific values. When used to specify the value of &lt;code&gt;this&lt;/code&gt;, it's important that the function actually uses &lt;code&gt;this&lt;/code&gt; in its function body. For example:</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; メソッドは特定して関数を作成するために使用され &lt;code&gt;this&lt;/code&gt; 値と、必要に応じて、特定の値に引数を結合します。 &lt;code&gt;this&lt;/code&gt; の値を指定するために使用する場合、関数が実際に &lt;code&gt;this&lt;/code&gt; を関数本体で使用することが重要です。例えば：</target>
        </trans-unit>
        <trans-unit id="23c983ff96826f2c7de4f17b4756b8bba9663c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block-scoped-var&lt;/code&gt; rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.</source>
          <target state="translated">&lt;code&gt;block-scoped-var&lt;/code&gt; 変数は、それらが定義されたブロックの外側を使用する場合のルールは、警告を生成します。これは、Cスタイルのブロックスコープをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="53bdd73b3413849fa66b3556c625138c24847f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break outer&lt;/code&gt; statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the &lt;code&gt;outer&lt;/code&gt; label was applied. If this statement was changed to be just &lt;code&gt;break&lt;/code&gt;, control would flow back to the outer &lt;code&gt;while&lt;/code&gt; statement and an infinite loop would result.</source>
          <target state="translated">&lt;code&gt;break outer&lt;/code&gt; のブレークステートメントは、 &lt;code&gt;outer&lt;/code&gt; ラベルが適用された後に制御が次のステートメントに返されるため、このコードが無限ループにならないようにします。このステートメントが単に &lt;code&gt;break&lt;/code&gt; に変更された場合、制御は外側の &lt;code&gt;while&lt;/code&gt; ステートメントに戻り、無限ループが発生します。</target>
        </trans-unit>
        <trans-unit id="e35e957bc5c45db7810cd6dc9b85c777f96b5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browser&lt;/code&gt; environment has many built-in global variables (for example, &lt;code&gt;top&lt;/code&gt;). Some of built-in global variables cannot be redeclared.</source>
          <target state="translated">&lt;code&gt;browser&lt;/code&gt; 環境は、多く組み込まれている（例えば、グローバル変数 &lt;code&gt;top&lt;/code&gt; ）。一部の組み込みグローバル変数は再宣言できません。</target>
        </trans-unit>
        <trans-unit id="9c91130ea2cd4ecd093fc52993fc6956e053783c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;builtinGlobals&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; by default. If it is &lt;code&gt;true&lt;/code&gt;, the rule prevents shadowing of built-in global variables: &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;builtinGlobals&lt;/code&gt; のオプションがある &lt;code&gt;false&lt;/code&gt; デフォルトでは。もしそうであれば &lt;code&gt;true&lt;/code&gt; 、ルールの防止は、シャドウイングのビルトイングローバル変数： &lt;code&gt;Object&lt;/code&gt; 、 &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; ように、と。</target>
        </trans-unit>
        <trans-unit id="2e369ffae5876263cbc79c574ac64d2933232f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/apply/bind&lt;/code&gt; method of the function is called directly.</source>
          <target state="translated">関数の &lt;code&gt;call/apply/bind&lt;/code&gt; メソッドが直接呼び出されます。</target>
        </trans-unit>
        <trans-unit id="980901839cc98d894fc636088c44f1085352a1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrors&lt;/code&gt; option is used for &lt;code&gt;catch&lt;/code&gt; block arguments validation.</source>
          <target state="translated">&lt;code&gt;caughtErrors&lt;/code&gt; オプションが使用され &lt;code&gt;catch&lt;/code&gt; ブロック引数の検証。</target>
        </trans-unit>
        <trans-unit id="ce4f2ac1f670fbb48541447196e9d9315225fdf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.</source>
          <target state="translated">&lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; の名前が正規表現パターンに一致キャッチ引数：オプションを指定例外が使用されていることをチェックすることではありません。たとえば、名前が文字列 'ignore'で始まる変数。</target>
        </trans-unit>
        <trans-unit id="8b0cd31aec7aa29af2f5a3abfb81a77e7a641899" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;cli&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="6a94eb63df1e6ac352e9b186b0e6694f22a6e525" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object is the API for the command line interface. Literally, the &lt;code&gt;bin/eslint.js&lt;/code&gt; file simply passes arguments to the &lt;code&gt;cli&lt;/code&gt; object and then sets &lt;code&gt;process.exitCode&lt;/code&gt; to the returned exit code.</source>
          <target state="translated">&lt;code&gt;cli&lt;/code&gt; オブジェクトは、コマンドライン・インタフェースのためのAPIです。文字通り、 &lt;code&gt;bin/eslint.js&lt;/code&gt; ファイルは単に &lt;code&gt;cli&lt;/code&gt; オブジェクトに引数を渡し &lt;code&gt;process.exitCode&lt;/code&gt; から、process.exitCodeを返された終了コードに設定します。</target>
        </trans-unit>
        <trans-unit id="cdf300be717f0ef1b9048b6ac9761ea3a6565f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;comma-dangle&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">&lt;code&gt;comma-dangle&lt;/code&gt; ルールは現在、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="b16f7c12a77c8c69c18c6cd7c66a8ffbf55f6b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context.getScope()&lt;/code&gt; method now returns more proper scopes</source>
          <target state="translated">&lt;code&gt;context.getScope()&lt;/code&gt; メソッドは現在、より適切なスコープを返します。</target>
        </trans-unit>
        <trans-unit id="922325a01666733ad05e06be2a7e01ae31e121a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object contains additional functionality that is helpful for rules to do their jobs. As the name implies, the &lt;code&gt;context&lt;/code&gt; object contains information that is relevant to the context of the rule. The &lt;code&gt;context&lt;/code&gt; object has the following properties:</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; オブジェクトは、自分の仕事をするためのルールのために有用である追加機能が含まれています。名前が示すように、 &lt;code&gt;context&lt;/code&gt; オブジェクトには、ルールのコンテキストに関連する情報が含まれています。 &lt;code&gt;context&lt;/code&gt; オブジェクトは、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="42b1848493047b28e69ceb4cc9991185d8cabd5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as &lt;code&gt;if&lt;/code&gt; should be used instead.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; ステートメントは、現在またはラベル付きループの現在の反復でのステートメントの実行を終了し、次の反復でループの実行を継続します。誤って使用すると、コードのテストや読み取り、保守が難しくなります。 &lt;code&gt;if&lt;/code&gt; などの構造化制御フローステートメントを代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b85184b855dad09a62d467252a42e39fc124a249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; Argument</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 引数</target>
        </trans-unit>
        <trans-unit id="78eb3b7cfb10f4790691c3c7134c3e3e580dff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debugger&lt;/code&gt; statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain &lt;code&gt;debugger&lt;/code&gt;, as it will cause the browser to stop executing code and open an appropriate debugger.</source>
          <target state="translated">&lt;code&gt;debugger&lt;/code&gt; 文は実行を停止し、コード内の現在のポイントでデバッガを起動するために実行するJavaScript環境を伝えるために使用されています。これは、最新のデバッグおよび開発ツールの登場により、良い習慣としては支持されなくなりました。ブラウザーでコードの実行が停止され、適切なデバッガーが開かれるため、本番用コードには &lt;code&gt;debugger&lt;/code&gt; を含めないでください。</target>
        </trans-unit>
        <trans-unit id="64766836102f731f14e0abe461d47d745b9f3795" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 文のクラスには、次の形式を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="0d9bf1e7a06807b0d9dd6dee731608e28dac63d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; flag has been replaced by a &lt;code&gt;sourceType&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; which can be set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; for ES6 modules.</source>
          <target state="translated">&lt;code&gt;ecmaFeatures.modules&lt;/code&gt; のフラグに置き換えられてい &lt;code&gt;sourceType&lt;/code&gt; 下プロパティ &lt;code&gt;parserOptions&lt;/code&gt; に設定することができ &lt;code&gt;&quot;script&quot;&lt;/code&gt; （デフォルト）または &lt;code&gt;&quot;module&quot;&lt;/code&gt; ES6モジュール用。</target>
        </trans-unit>
        <trans-unit id="114daf2c10a876d1a0119d1127fb9645cebbe320" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures&lt;/code&gt; property is now under a top-level &lt;code&gt;parserOptions&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;ecmaFeatures&lt;/code&gt; のプロパティは、トップレベルの下に今ある &lt;code&gt;parserOptions&lt;/code&gt; のプロパティ。</target>
        </trans-unit>
        <trans-unit id="e77d2b26470f6a64bf6847f6dfa1ccf21481c369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaVersion&lt;/code&gt; parser option is set to something other than a number, such as the string &lt;code&gt;&quot;2015&quot;&lt;/code&gt;. (Previously, a non-number option would simply be ignored.)</source>
          <target state="translated">&lt;code&gt;ecmaVersion&lt;/code&gt; のパーサのオプションは、文字列として、数以外の何かに設定されている &lt;code&gt;&quot;2015&quot;&lt;/code&gt; 。（以前は、非数値オプションは単に無視されていました。）</target>
        </trans-unit>
        <trans-unit id="e8001be05979a363d68c0b97cd9a4ec677d66ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend a popular style guide (for example, &lt;code&gt;eslint-config-standard&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;eslint --init&lt;/code&gt; あなたは人気のスタイルガイド（例えば、拡張することができますので、コマンドは、コンフィギュレーションを作成することができます &lt;code&gt;eslint-config-standard&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="76fc19e1d805a61118a2c1a81a45040f447d9365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend the recommended rules.</source>
          <target state="translated">&lt;code&gt;eslint --init&lt;/code&gt; あなたが推奨ルールを拡張することができるようにコマンドは、コンフィギュレーションを作成することができます。</target>
        </trans-unit>
        <trans-unit id="c4229b7a6eefed924206c9eb78fcfba7b8bfcf1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted for non-scoped packages</source>
          <target state="translated">&lt;code&gt;eslint-plugin-&lt;/code&gt; プレフィックスは、非スコープのパッケージのために省略することができます</target>
        </trans-unit>
        <trans-unit id="61707a8cc213e8d436fdfb7b834fbdfa71c295b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-tester&lt;/code&gt; module, which has long been the primary tester for ESLint rules, has now been moved into the &lt;code&gt;eslint&lt;/code&gt; module. This was the result of a difficult relationship between these two modules that created circular dependencies and was causing a lot of problems in rule tests. Moving the tester into the &lt;code&gt;eslint&lt;/code&gt; module fixed a lot of those issues.</source>
          <target state="translated">&lt;code&gt;eslint-tester&lt;/code&gt; 長いESLintルールの主要テスターされているモジュールは、現在に移動された &lt;code&gt;eslint&lt;/code&gt; のモジュール。これは、循環依存関係を作成し、ルールテストで多くの問題を引き起こしていた、これら2つのモジュール間の困難な関係の結果でした。テスターを &lt;code&gt;eslint&lt;/code&gt; モジュールに移動すると、これらの問題の多くが修正されました。</target>
        </trans-unit>
        <trans-unit id="8900c3358f2163358ec0b84e6c957c7b7bbbb087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; object (deprecated) is an instance of the &lt;code&gt;Linter&lt;/code&gt; class as defined &lt;a href=&quot;#linter&quot;&gt;above&lt;/a&gt;. &lt;code&gt;eslint.linter&lt;/code&gt; exists for backwards compatibility, but we do not recommend using it because any mutations to it are shared among every module that uses &lt;code&gt;eslint&lt;/code&gt;. Instead, please create your own instance of &lt;code&gt;eslint.Linter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eslint.linter&lt;/code&gt; のオブジェクト（非推奨）のインスタンスである &lt;code&gt;Linter&lt;/code&gt; 定義されるようなクラス&lt;a href=&quot;#linter&quot;&gt;の上&lt;/a&gt;。 &lt;code&gt;eslint.linter&lt;/code&gt; は下位互換性のために存在しますが、これに対する変更は &lt;code&gt;eslint&lt;/code&gt; を使用するすべてのモジュール間で共有されるため、使用はお勧めしません。代わりに、 &lt;code&gt;eslint.Linter&lt;/code&gt; の独自のインスタンスを作成してください。</target>
        </trans-unit>
        <trans-unit id="d379a4d77b2607390afe7d33df57381bc7286ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; property is now non-enumerable</source>
          <target state="translated">&lt;code&gt;eslint.linter&lt;/code&gt; のプロパティは現在、非可算であります</target>
        </trans-unit>
        <trans-unit id="a9a4221ba818f86c812a9ad87857f70725c68eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; scope analysis property has been removed</source>
          <target state="translated">&lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; スコープ解析プロパティが削除されました</target>
        </trans-unit>
        <trans-unit id="127d896dfbc583589aff8498ff51854129f845e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptMethods&lt;/code&gt; option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use &lt;code&gt;this&lt;/code&gt; inside the function body. In this case, you can add that method to ignore in the warnings.</source>
          <target state="translated">&lt;code&gt;exceptMethods&lt;/code&gt; のオプションでは、警告を無視したい対象のメソッド名の配列を渡すことができます。たとえば、メソッドを（静的メソッドとしてではなく）通常の関数として上書きする必要があり、関数本体内で &lt;code&gt;this&lt;/code&gt; を使用しない外部ライブラリの仕様がある場合があります。この場合、警告で無視するメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="8077695416ecc34868ba7b9a8633341faa182787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptions&lt;/code&gt; option allows you to pass an array of methods names you'd like to continue to use in the old style.</source>
          <target state="translated">&lt;code&gt;exceptions&lt;/code&gt; オプションでは、古いスタイルで使い続けたいメソッド名の配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="252d44a66cbab7b2a0ad26d5562589f321a9a54d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been deprecated</source>
          <target state="translated">&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; のオプションは廃止されました</target>
        </trans-unit>
        <trans-unit id="837260e2c2d2bb0e44d170f7a8580e9382461154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; to enable all core rules in the currently installed version of ESLint. The set of core rules can change at any minor or major version of ESLint.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティ値があることができる &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; ESLintの現在インストールされているバージョンですべてのコア・ルールを有効にします。コアルールのセットは、ESLintのマイナーバージョンまたはメジャーバージョンで変更できます。</target>
        </trans-unit>
        <trans-unit id="6b1c15d923b6c7281b7fb8242da0395d1224b9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be an absolute or relative path to a base &lt;a href=&quot;#using-configuration-files&quot;&gt;configuration file&lt;/a&gt;. ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値は、ベースへの絶対または相対パスとすることができる&lt;a href=&quot;#using-configuration-files&quot;&gt;構成ファイル&lt;/a&gt;。ESLintは、ベース構成ファイルへの相対パスを、それを使用する構成ファイルへの相対パスで解決します。</target>
        </trans-unit>
        <trans-unit id="5fa785db2037479c7f03a5b52934be5b58f71e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can consist of:</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値は、で構成されます。</target>
        </trans-unit>
        <trans-unit id="003522290cdebe1b2fbd30a1f0cbdc59c0904961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値を省略することができます &lt;code&gt;eslint-config-&lt;/code&gt; パッケージ名の接頭辞を。</target>
        </trans-unit>
        <trans-unit id="0a2b44eee9bddc2d60e480fea08a5f4ceb3bdae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value is either:</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値がいずれかです：</target>
        </trans-unit>
        <trans-unit id="1cb5e8d9c216034fade7c978ad13805a9c312bc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixer&lt;/code&gt; object has the following methods:</source>
          <target state="translated">&lt;code&gt;fixer&lt;/code&gt; オブジェクトは、次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="a3edba7f97a325dd3428ee6498ff770178efa766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; の文のクラスは次の形式を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="d49f70042d3e336aa930fa3d8a67c5746bfb590f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property in the &lt;code&gt;linter.verify()&lt;/code&gt; API is no longer supported</source>
          <target state="translated">&lt;code&gt;linter.verify()&lt;/code&gt; API の &lt;code&gt;global&lt;/code&gt; プロパティはサポートされなくなりました</target>
        </trans-unit>
        <trans-unit id="21aab0ed37e0be4d941cff2e17dc050a87694419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hoist&lt;/code&gt; option has three settings:</source>
          <target state="translated">&lt;code&gt;hoist&lt;/code&gt; オプションには3つの設定があります。</target>
        </trans-unit>
        <trans-unit id="462609b8b9ea4983f2b2d00bf8596dc0d30d89b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;if&lt;/code&gt; クラスは次の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="0d8118a2bec951d156bb19df18c746496e386f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePattern&lt;/code&gt; object takes a string value, which is used as a regular expression applied to the first word of a comment.</source>
          <target state="translated">&lt;code&gt;ignorePattern&lt;/code&gt; オブジェクトは、コメントの最初の単語に適用される正規表現として使用される文字列の値をとります。</target>
        </trans-unit>
        <trans-unit id="ae972c6712702d048215995c50a75a39891b07a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePatterns&lt;/code&gt; property affects only the directory that the config file placed.</source>
          <target state="translated">&lt;code&gt;ignorePatterns&lt;/code&gt; のプロパティは、設定ファイルが置かれていることのみディレクトリに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="b5e9061da183286584b4711c4a63bfba8da71be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreRestSiblings&lt;/code&gt; option is a boolean (default: &lt;code&gt;false&lt;/code&gt;). Using a &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest Property&lt;/a&gt; it is possible to &quot;omit&quot; properties from an object, but by default the sibling properties are marked as &quot;unused&quot;. With this option enabled the rest property's siblings are ignored.</source>
          <target state="translated">&lt;code&gt;ignoreRestSiblings&lt;/code&gt; のオプションがブール値（デフォルトで &lt;code&gt;false&lt;/code&gt; ）。&lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Restプロパティ&lt;/a&gt;を使用すると、オブジェクトからプロパティを「省略する」ことができますが、デフォルトでは兄弟のプロパティは「未使用」としてマークされます。このオプションを有効にすると、残りのプロパティの兄弟は無視されます。</target>
        </trans-unit>
        <trans-unit id="85cb7a860cbd820f9d90f12cf28b759ca78ece90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indent&lt;/code&gt; rule is more strict</source>
          <target state="translated">&lt;code&gt;indent&lt;/code&gt; ルールがより厳格です</target>
        </trans-unit>
        <trans-unit id="7da93c489e9178d0f216041fee0bdfd9d92b14f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; entry should be the JavaScript file implementing your custom formatter.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; エントリは、カスタムフォーマッタを実装するJavaScriptファイルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b638eabe7da26a08a3d704c7037df4934e4bc5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max-statements&lt;/code&gt; rule allows you to specify the maximum number of statements allowed in a function.</source>
          <target state="translated">&lt;code&gt;max-statements&lt;/code&gt; ルールは、関数内で許可される文の最大数を指定することができます。</target>
        </trans-unit>
        <trans-unit id="a13c3e797d7391ff2cce66ebe8056f876d975eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="7cfb0e1495e0c320f6699634a8ccde094dae7f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiLine&lt;/code&gt; and &lt;code&gt;align&lt;/code&gt; options can differ, which allows for fine-tuned control over the &lt;code&gt;key-spacing&lt;/code&gt; of your files. &lt;code&gt;align&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; inherit from &lt;code&gt;multiLine&lt;/code&gt; if &lt;code&gt;align&lt;/code&gt; is configured as an object.</source>
          <target state="translated">&lt;code&gt;multiLine&lt;/code&gt; と &lt;code&gt;align&lt;/code&gt; オプションはオーバー微調整制御を可能にする、異なる可能性があり &lt;code&gt;key-spacing&lt;/code&gt; 、ファイルの。 &lt;code&gt;align&lt;/code&gt; がオブジェクトとして構成されている場合、 &lt;code&gt;align&lt;/code&gt; は &lt;code&gt;multiLine&lt;/code&gt; から継承し&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="aa2c39f5693dcfe067810121d7a32dcd1b1e4f58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts a single argument, called an &lt;em&gt;executor&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;new Promise&lt;/code&gt; コンストラクタが呼ばれる単一の引数、受け入れ&lt;em&gt;executorを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d09e48c81deff2fe74829687d8d386203bf2e1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts an &lt;em&gt;executor&lt;/em&gt; function as an argument, which has &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; parameters that can be used to control the state of the created Promise. For example:</source>
          <target state="translated">&lt;code&gt;new Promise&lt;/code&gt; コンストラクタは受け付け&lt;em&gt;キュータの&lt;/em&gt;持つ引数としての機能 &lt;code&gt;resolve&lt;/code&gt; し、 &lt;code&gt;reject&lt;/code&gt; 作成した約束の状態を制御するために使用することができるパラメータを。例えば：</target>
        </trans-unit>
        <trans-unit id="098f4a5cbac65ca4cffcaba3c9ba560edcebc8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that &lt;code&gt;new&lt;/code&gt; is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.</source>
          <target state="translated">JavaScript の &lt;code&gt;new&lt;/code&gt; 演算子は、特定のタイプのオブジェクトの新しいインスタンスを作成します。そのタイプのオブジェクトは、コンストラクター関数によって表されます。コンストラクター関数は単なる通常の関数であるため、唯一の定義上の特徴は、呼び出しの一部として &lt;code&gt;new&lt;/code&gt; が使用されていることです。ネイティブJavaScript関数は、コンストラクターとして使用される関数と使用されない関数を区別するために、大文字で始まります。多くのスタイルガイドでは、コンストラクターとして使用する関数をより簡単に決定するために、このパターンに従うことを推奨しています。</target>
        </trans-unit>
        <trans-unit id="4b9844e9b711c0c78b88e1df4f24b4e7ffcc90b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-confusing-arrow&lt;/code&gt; rule is now more lenient by default</source>
          <target state="translated">&lt;code&gt;no-confusing-arrow&lt;/code&gt; ルールは現在、デフォルトでは、より寛大です</target>
        </trans-unit>
        <trans-unit id="6d1a64da4353dccbefcdf2ee522647ae870b3b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-eq-null&lt;/code&gt; rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to &lt;code&gt;null&lt;/code&gt; only match &lt;code&gt;null&lt;/code&gt;, and not also &lt;code&gt;undefined&lt;/code&gt;. As such it will flag comparisons to null when using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no-eq-null&lt;/code&gt; 規則の目的はとの比較ことを確実にすることにより、潜在的なバグや不要な行動を減らす &lt;code&gt;null&lt;/code&gt; は唯一の一致 &lt;code&gt;null&lt;/code&gt; 、ともない &lt;code&gt;undefined&lt;/code&gt; 。そのため、 &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; を使用すると、比較にnullのフラグが付けられます。</target>
        </trans-unit>
        <trans-unit id="2cf7599f9ca5e81f4584651a246f272a61b94bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-magic-numbers&lt;/code&gt; rule aims to make code more readable and refactoring easier by ensuring that special numbers are declared as constants to make their meaning explicit.</source>
          <target state="translated">&lt;code&gt;no-magic-numbers&lt;/code&gt; 特別な数字は、その意味を明示的にするために、定数として宣言されていることを確実にすることによって、より簡単に、コードをより読みやすく、リファクタリングにする目標を支配します。</target>
        </trans-unit>
        <trans-unit id="584d3863241e3dd7bef2bc890fe46f1e0dacede5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-multi-spaces&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;no-multi-spaces&lt;/code&gt; ルールは、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="22f51e16b3d2fa232175e558615aef4ba7d91884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-nested-ternary&lt;/code&gt; rule disallows nested ternary expressions.</source>
          <target state="translated">&lt;code&gt;no-nested-ternary&lt;/code&gt; 三項式をネストされたルール禁止します。</target>
        </trans-unit>
        <trans-unit id="116b22d947fe1ce535309217a88923e033d53bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-redeclare&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">&lt;code&gt;no-redeclare&lt;/code&gt; ルールは現在、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="0aeabea2c1edc1a249245bfe09f229e42dd63ee8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm run perf&lt;/code&gt; command gives a high-level overview of ESLint running time with default rules (&lt;code&gt;eslint:recommended&lt;/code&gt;) enabled.</source>
          <target state="translated">&lt;code&gt;npm run perf&lt;/code&gt; コマンドは、デフォルトのルールとの時間を実行しているESLintの高レベルの概要（提供します &lt;code&gt;eslint:recommended&lt;/code&gt; 有効）。</target>
        </trans-unit>
        <trans-unit id="02b6ae240bb49fb262b6c6c5aa5ce3a0f704dc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onlyEquality&lt;/code&gt; option allows a superset of the exceptions which &lt;code&gt;exceptRange&lt;/code&gt; allows, thus both options are not useful together.</source>
          <target state="translated">&lt;code&gt;onlyEquality&lt;/code&gt; のオプションは、例外のスーパーセットできます &lt;code&gt;exceptRange&lt;/code&gt; はので、両方のオプションが一緒に有用ではない、ことができますが。</target>
        </trans-unit>
        <trans-unit id="3664b7a3e8295f10c165e69c19822430ecc4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property must be an array of options. This gets passed through to &lt;code&gt;context.options&lt;/code&gt; in the rule.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; プロパティには、オプションの配列でなければなりません。これは、ルールの &lt;code&gt;context.options&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="138b40a2090025ead37bb2b810503f00fc28051a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padded-blocks&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;padded-blocks&lt;/code&gt; ルールは、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="8d637daeacbd8ce09ca4965da79910941e8f067c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of AST nodes is now set before rules start running</source>
          <target state="translated">ルールの実行が開始される前に、ASTノードの &lt;code&gt;parent&lt;/code&gt; プロパティが設定されるようになりました</target>
        </trans-unit>
        <trans-unit id="ac6604963767894ebe97a28abec444c272e929c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewritable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">すべてのノードの &lt;code&gt;parent&lt;/code&gt; プロパティは書き換え可能である必要があります。ESLintは、ルールがASTにアクセスする前に、トラバース中に各ノードの &lt;code&gt;parent&lt;/code&gt; プロパティをその親ノードに設定します。</target>
        </trans-unit>
        <trans-unit id="853c13962a666c12683d5753aa639223e6ad5a5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewriteable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">すべてのノードの &lt;code&gt;parent&lt;/code&gt; プロパティは書き換え可能でなければなりません。ESLintは、すべてのルールがASTにアクセスする前に、トラバース中に各ノードの &lt;code&gt;parent&lt;/code&gt; プロパティをその親ノードに設定します。</target>
        </trans-unit>
        <trans-unit id="944a63b184acd73eda9811179639d595d02aa85d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt()&lt;/code&gt; and &lt;code&gt;Number.parseInt()&lt;/code&gt; functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parseInt()&lt;/code&gt; および &lt;code&gt;Number.parseInt()&lt;/code&gt; 関数は、整数に2進、8進、16進文字列を有効に使用することができます。ES6では2進数、8進数、16進数のリテラルがサポートされているため、このルールにより、 &lt;code&gt;parseInt()&lt;/code&gt; または &lt;code&gt;Number.parseInt()&lt;/code&gt; の代わりにこれらの数値リテラルを使用することが推奨されます。</target>
        </trans-unit>
        <trans-unit id="a6a8b14c45ea844b14e7b8898d1ed3a957925154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt;&lt;a href=&quot;#configuring-plugins&quot;&gt;property value&lt;/a&gt; can omit the &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; &lt;a href=&quot;#configuring-plugins&quot;&gt;プロパティ値は&lt;/a&gt;省略でき &lt;code&gt;eslint-plugin-&lt;/code&gt; パッケージ名の接頭辞を。</target>
        </trans-unit>
        <trans-unit id="379ae11932b2a6155c0dd857a96208194dd56ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; option has two settings:</source>
          <target state="translated">&lt;code&gt;position&lt;/code&gt; オプションは、2つの設定があります。</target>
        </trans-unit>
        <trans-unit id="c999b4122281345d94d147575183f7bf02e84b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it's another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.</source>
          <target state="translated">Node.js の &lt;code&gt;process.env&lt;/code&gt; オブジェクトは、デプロイメント/構成パラメーターを格納するために使用されます。プロジェクト全体に散らかると、別の種類のグローバルな依存関係になるため、メンテナンスの問題が発生する可能性があります。そのため、マルチユーザーセットアップでのマージの競合や、マルチサーバーセットアップでの展開の問題につながる可能性があります。代わりに、ベストプラクティスの1つは、プロジェクト全体からアクセスできる単一の構成/設定ファイルでこれらのすべてのパラメーターを定義することです。</target>
        </trans-unit>
        <trans-unit id="53444e809ed43079efe95348d4604d7a24ea38a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:</source>
          <target state="translated">Node.js の &lt;code&gt;process.exit()&lt;/code&gt; メソッドは、Node.jsプロセスを即座に停止して終了するために使用されます。これは、どのメソッドでもいつでも発生する可能性があり、エラーが発生したときにNode.jsアプリケーションを完全に停止させる可能性があるため、危険な操作です。例えば：</target>
        </trans-unit>
        <trans-unit id="00253dead4a64430ced775a37d1801dbac8821d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;2&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">この例の &lt;code&gt;quotes&lt;/code&gt; ルールには、 &lt;code&gt;&quot;double&quot;&lt;/code&gt; オプションが1つあります（ &lt;code&gt;2&lt;/code&gt; はエラーレベルです）。ルールの設定済みオプションをすべて含む配列である &lt;code&gt;context.options&lt;/code&gt; を使用して、ルールのオプションを取得できます。この場合、 &lt;code&gt;context.options[0]&lt;/code&gt; には &lt;code&gt;&quot;double&quot;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="15bbabad9361578bf4fae1f2a49b29be60fa376b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;error&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">この例の &lt;code&gt;quotes&lt;/code&gt; ルールには、 &lt;code&gt;&quot;double&quot;&lt;/code&gt; 1つのオプションがあります（ &lt;code&gt;error&lt;/code&gt; はエラーレベルです）。ルールの設定済みオプションをすべて含む配列である &lt;code&gt;context.options&lt;/code&gt; を使用して、ルールのオプションを取得できます。この場合、 &lt;code&gt;context.options[0]&lt;/code&gt; には &lt;code&gt;&quot;double&quot;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="472145e67d0e65f7aa06bad378cebc04916b8bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; property contains two indexes in the code, referring to the start and end location of a contiguous section of text that will be replaced. The &lt;code&gt;text&lt;/code&gt; property refers to the text that will replace the given range.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; プロパティが置換されるテキストの連続するセクションの開始及び終了位置を参照して、コード内の2つのインデックスを含んでいます。 &lt;code&gt;text&lt;/code&gt; プロパティは、指定された範囲を置換するテキストを指します。</target>
        </trans-unit>
        <trans-unit id="e4064f447f590c1765f1771747724c820f183198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; returned from &lt;code&gt;executeOnText()&lt;/code&gt; is in the same format as from &lt;code&gt;executeOnFiles()&lt;/code&gt;, but there is only ever one result in &lt;code&gt;report.results&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;report&lt;/code&gt; から返さ &lt;code&gt;executeOnText()&lt;/code&gt; と同じ形式である &lt;code&gt;executeOnFiles()&lt;/code&gt; しかし、中にしかつの結果があり &lt;code&gt;report.results&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="92953a45beba64856673b9e8fbcb1ed126d0847b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; function is used to include modules that exist in separate files, such as:</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 機能は、次のような別のファイルに存在するモジュールを含むために使用されます。</target>
        </trans-unit>
        <trans-unit id="064be5c0f666fc3e35b5524048c68a20f53a49bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;result&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="9af8b29a9523a61b024585850f17334d070e6e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;results&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="61d30c932bc83cd2faa8787d31852a2a495de05f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; object passed into a formatter is an array of objects containing the lint results for individual files. Here's some example output:</source>
          <target state="translated">&lt;code&gt;results&lt;/code&gt; フォーマッタに渡されたオブジェクトは、個々のファイルのリント結果を含むオブジェクトの配列です。次に出力例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="3993cb0067ab7703186a7c2f2b6970449e1be544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rules&lt;/code&gt; property can do any of the following to extend (or override) the set of rules:</source>
          <target state="translated">&lt;code&gt;rules&lt;/code&gt; プロパティには、ルールのセットを拡張（またはオーバーライド）し、次のいずれかの操作を行うことができます。</target>
        </trans-unit>
        <trans-unit id="561e9293e5a8d3ad27376df8faff3ae931698040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property is no longer available on individual linting messages</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; プロパティは、個々のリンティングメッセージで使用できなくなりました</target>
        </trans-unit>
        <trans-unit id="0a93eec94b022c4aa2a02db660060ca362fa877f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; parser option is set while &lt;code&gt;ecmaVersion&lt;/code&gt; is set to &lt;code&gt;5&lt;/code&gt; or left unspecified. (Previously, setting &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; would implicitly cause &lt;code&gt;ecmaVersion&lt;/code&gt; to be set to a minimum of 2015, which could be surprising.)</source>
          <target state="translated">&lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; しながら、パーサのオプションが設定されている &lt;code&gt;ecmaVersion&lt;/code&gt; がに設定されている &lt;code&gt;5&lt;/code&gt; または未指定のまま。（以前は、 &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; を設定すると、 &lt;code&gt;ecmaVersion&lt;/code&gt; が暗黙的に2015年以上に設定されていましたが、これは驚くべきことでした。）</target>
        </trans-unit>
        <trans-unit id="4c9529163ca9cdfc78596b70a0088a17d7d3a0b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType&lt;/code&gt; is set to anything other than &lt;code&gt;&quot;script&quot;&lt;/code&gt; or &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sourceType&lt;/code&gt; 以外に設定されている &lt;code&gt;&quot;script&quot;&lt;/code&gt; または &lt;code&gt;&quot;module&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77552117314df4545a21208d082a3e6e878f860f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space-before-function-paren&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;space-before-function-paren&lt;/code&gt; のルールは、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="3f8f7815159b1b5e0f229864128c1f7bd11839da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;switch&lt;/code&gt; クラスは次の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e7bd19d734e1f9c5b8f9f98d650cecfc8c20f132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to &quot;fall through&quot; from one &lt;code&gt;case&lt;/code&gt; to the next. For example:</source>
          <target state="translated">JavaScript の &lt;code&gt;switch&lt;/code&gt; ステートメントは、ある &lt;code&gt;case&lt;/code&gt; から次のケースに「フォールスルー」する機能のおかげで、言語のエラーが発生しやすい構成要素の1つです。例えば：</target>
        </trans-unit>
        <trans-unit id="b828067e8b794059a7226d1fb4af5dcfec1299b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement internally uses the &lt;code&gt;===&lt;/code&gt; comparison to match the expression's value to a case clause. Therefore, it can never match &lt;code&gt;case NaN&lt;/code&gt;. Also, &lt;code&gt;switch(NaN)&lt;/code&gt; can never match a case clause.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; ステートメントは、内部的に使用しています &lt;code&gt;===&lt;/code&gt; ケース句に式の値と一致するように比較を。したがって、 &lt;code&gt;case NaN&lt;/code&gt; 一致することはありません。また、 &lt;code&gt;switch(NaN)&lt;/code&gt; がcase句と一致することはありません。</target>
        </trans-unit>
        <trans-unit id="2ada90da9d605eb89fdcd67423cc995f53e41596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;try&lt;/code&gt; クラスの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8692ce1aa1a507fdbc0506510178169257caaf18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;the strict mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; フラグは、付属書Bは、定義された回復ロジックを無効にします。その結果、エラーを早期に見つけることができます。これは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;、strictモードに&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="c13131f24eb9329164eba24a2cd91b75577b1971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undefined&lt;/code&gt; variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of &lt;code&gt;undefined&lt;/code&gt;. While ECMAScript 5 disallows overwriting &lt;code&gt;undefined&lt;/code&gt;, it's still possible to shadow &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">JavaScript の &lt;code&gt;undefined&lt;/code&gt; 変数は、実際にはグローバルオブジェクトのプロパティです。そのため、ECMAScript 3では、 &lt;code&gt;undefined&lt;/code&gt; の値を上書きすることが可能でした。ECMAScript 5は &lt;code&gt;undefined&lt;/code&gt; の上書きを許可していませんが、以下のように &lt;code&gt;undefined&lt;/code&gt; をシャドウイングすることは依然として可能です。</target>
        </trans-unit>
        <trans-unit id="e4e9951e2f561acaf841dbfd8453226510314be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars-on-top&lt;/code&gt; rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (&amp;ldquo;hoisted&amp;rdquo;) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.</source>
          <target state="translated">&lt;code&gt;vars-on-top&lt;/code&gt; 変数宣言、関数スコープの上部またはプログラムの先頭で連続使用されていない場合、ルールは、警告を生成します。デフォルトでは、変数宣言はJavaScriptインタープリターによって常にそれらを含むスコープの最上部に見えないように移動（「巻き上げ」）されます。このルールにより、プログラマーは、変数宣言をその包含スコープの最上部に手動で移動することにより、その動作を強制的に表現します。</target>
        </trans-unit>
        <trans-unit id="8437526de99e51c9af62b182483b3c46ca377dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; option has two settings:</source>
          <target state="translated">&lt;code&gt;vars&lt;/code&gt; のオプションは、2つの設定があります。</target>
        </trans-unit>
        <trans-unit id="7f313683e74a50e68d4d012882437f3a941bbebc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;varsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain &lt;code&gt;ignored&lt;/code&gt; or &lt;code&gt;Ignored&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;varsIgnorePattern&lt;/code&gt; のオプションは、例外の使用をチェックしない：名前が正規表現パターンに一致する変数。たとえば、名前に &lt;code&gt;ignored&lt;/code&gt; または &lt;code&gt;Ignored&lt;/code&gt; が含まれる変数。</target>
        </trans-unit>
        <trans-unit id="c6c8741b7358a7fc6ab1d9e9c87df7567465e2dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify()&lt;/code&gt; method returns an array of objects containing information about the linting warnings and errors. Here's an example:</source>
          <target state="translated">&lt;code&gt;verify()&lt;/code&gt; メソッドは、リンティング警告およびエラーに関する情報を含むオブジェクトの配列を返します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="8f646bffb41dff01a7acc0aab19c45366759c6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator takes an operand and returns &lt;code&gt;undefined&lt;/code&gt;: &lt;code&gt;void expression&lt;/code&gt; will evaluate &lt;code&gt;expression&lt;/code&gt; and return &lt;code&gt;undefined&lt;/code&gt;. It can be used to ignore any side effects &lt;code&gt;expression&lt;/code&gt; may produce:</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 演算子は、オペランドとリターンを取る &lt;code&gt;undefined&lt;/code&gt; ： &lt;code&gt;void expression&lt;/code&gt; 評価され &lt;code&gt;expression&lt;/code&gt; とリターン &lt;code&gt;undefined&lt;/code&gt; 。これは、 &lt;code&gt;expression&lt;/code&gt; が生成する可能性のある副作用を無視するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2556ce629f24ecc77f8ee75b29af595f5d1ce4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;while&lt;/code&gt; クラスは、次の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="16267e1a7f6497f96f435d3ed8e9d95c9f05b4e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.</source>
          <target state="translated">それはそれは不可能ブロック内の変数が実際に参照するものを伝えるために作り、現在のスコープにオブジェクトのメンバを追加するためのステートメントは、潜在的に問題です。 &lt;code&gt;with&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23d60138df9b187d83c9c312e2d8240dbd86a484" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;one true brace style&lt;/em&gt; is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:</source>
          <target state="translated">&lt;em&gt;真&lt;/em&gt;の&lt;em&gt;1つのブレーススタイル&lt;/em&gt;は、JavaScriptで最も一般的なブレーススタイルの1つであり、ブロックの開始ブレースは、対応するステートメントまたは宣言と同じ行に配置されます。例えば：</target>
        </trans-unit>
        <trans-unit id="318db8bc3442a0b948f2278731ddfaa2b3371483" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository that active development happens on. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">&lt;em&gt;上流のソースは、&lt;/em&gt;活発に開発がで発生することを主ESLintリポジトリです。アップストリームへのプッシュアクセスはありませんが、プルアクセスがあり、いつでも最新のコードをプルできます。</target>
        </trans-unit>
        <trans-unit id="985796a6dfb39061b3806f06ead742513b9f7132" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository where active development happens. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">&lt;em&gt;上流のソースは、&lt;/em&gt;活発に開発が起こる主ESLintリポジトリです。アップストリームへのプッシュアクセスはありませんが、プルアクセスが可能であり、いつでも最新のコードをプルできます。</target>
        </trans-unit>
        <trans-unit id="00a652484a4e470b827e739fbc799706911bd125" translate="yes" xml:space="preserve">
          <source>The AST specification</source>
          <target state="translated">AST仕様</target>
        </trans-unit>
        <trans-unit id="e60cbbce8f620754c9d5e236855c0dfac9399492" translate="yes" xml:space="preserve">
          <source>The AST that custom parsers should create is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The AST requires some additional properties about detail information of the source code.</source>
          <target state="translated">カスタムパーサーが作成するASTは&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTreeに&lt;/a&gt;基づいています。ASTには、ソースコードの詳細情報に関するいくつかの追加プロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="d12093d685b556a69445173fd5520486f1407941" translate="yes" xml:space="preserve">
          <source>The Art Of Node: Callbacks</source>
          <target state="translated">The Art Of Node.コールバック</target>
        </trans-unit>
        <trans-unit id="dc42f36cf4efb4177d2faa05bda904369e189f7a" translate="yes" xml:space="preserve">
          <source>The Atomics object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Atomics object as a function.</source>
          <target state="translated">Atomicsオブジェクトには &lt;code&gt;[[Call]]&lt;/code&gt; 内部メソッドはありません。Atomicsオブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="121e8d7f53d94f39796abb445eea1ec6c84df947" translate="yes" xml:space="preserve">
          <source>The Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:</source>
          <target state="translated">カンマスタイルルールは、カンマで区切られたリストのスタイルを強制します。主にJavaScriptで使用されるカンマスタイルは2つあります。</target>
        </trans-unit>
        <trans-unit id="751c7e36741c66d3a05895481f8942a38ca2dce1" translate="yes" xml:space="preserve">
          <source>The Context Object</source>
          <target state="translated">コンテキストオブジェクト</target>
        </trans-unit>
        <trans-unit id="699ac6d6b4ec2baa85b4732c274fadb3ca039ae9" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 Annotated Specification - Strict Mode</source>
          <target state="translated">ECMAScript 5 注釈付き仕様書-厳密なモード</target>
        </trans-unit>
        <trans-unit id="80e0be2b0df7dc0f52165f27603e2898ae8a5e99" translate="yes" xml:space="preserve">
          <source>The ES6 Reflect API comes with a handful of methods which somewhat deprecate methods on old constructors:</source>
          <target state="translated">ES6 の Reflect API には、古いコンストラクタ上のメソッドをやや非推奨にするメソッドがいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="66003f739f69d29de4ae86e20e78496ebb3153ae" translate="yes" xml:space="preserve">
          <source>The ESLint directory and file structure is as follows:</source>
          <target state="translated">ESLintのディレクトリとファイル構造は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d93e8b36b02e3c814ab20860021ac1e2f00ac494" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement new rules that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule is accepted, you are responsible for implementing and documenting the rule. You may, alternately, recruit another person to help you implement the rule. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLintチームは人数が限られており、全体のロードマップに集中する必要があるため、ユーザーから提案された新しいルールを実装しません。ルールが承認されたら、そのルールを実装し、文書化する責任があります。代わりに、ルールの実装を手伝ってくれる人を募集することもできます。ルールを承認したESLintチームのメンバーは、このプロセスの残りの部分をガイドしてくれます。</target>
        </trans-unit>
        <trans-unit id="0c711d16f14ea7343d52f05830b40ccdb9522bc8" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement rule changes that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule change is accepted, you are responsible for implementing and documenting it. You may, alternately, recruit another person to help you. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLintチームはユーザーから提案されたルール変更を実装しません。ルール変更が承認されたら、あなたはそれを実装し、文書化する責任があります。代わりに、他の人に手伝ってもらうこともできます。ルールを支持したESLintチームのメンバーは、このプロセスの残りの部分をガイドしてくれます。</target>
        </trans-unit>
        <trans-unit id="aeda0c340295fff5de3b84af83b961b23c1f657b" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. This section outlines the guidelines the team has set in place for the deprecation of rules in future releases.</source>
          <target state="translated">ESLintチームはアップグレードをできるだけ簡単で苦痛のないものにしたいと考えています。このセクションでは、今後のリリースにおけるルールの非推奨化のためにチームが設定したガイドラインの概要を説明します。</target>
        </trans-unit>
        <trans-unit id="42ccbdbc3911d666627517f8ffa3964275678b01" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. To that end, the team has agreed upon the following set of guidelines for deprecating rules in the future. The goal of these guidelines is to allow for improvements and changes to be made without breaking existing configurations.</source>
          <target state="translated">ESLintチームはアップグレードを可能な限り簡単で苦痛のないものにしたいと考えています。そのために、チームは将来的に非推奨となるルールのガイドラインに合意しました。これらのガイドラインの目的は、既存の設定を壊さずに改善や変更ができるようにすることです。</target>
        </trans-unit>
        <trans-unit id="d4e733f98b935c588d211926e08fdfd98589d4ae" translate="yes" xml:space="preserve">
          <source>The JSCS &lt;code&gt;--auto-configure&lt;/code&gt; option created a configuration based on what it found in a given file:</source>
          <target state="translated">JSCS &lt;code&gt;--auto-configure&lt;/code&gt; オプションは、特定のファイルで見つかったものに基づいて構成を作成しました。</target>
        </trans-unit>
        <trans-unit id="fa1c39fed1338615abafccd715f9a9ceec0208c2" translate="yes" xml:space="preserve">
          <source>The Math Object</source>
          <target state="translated">数学オブジェクト</target>
        </trans-unit>
        <trans-unit id="9459a63048e2fc499f7aeacaa3d20ab484e34e90" translate="yes" xml:space="preserve">
          <source>The Math object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal property; it is not possible to invoke the Math object as a function.</source>
          <target state="translated">Mathオブジェクトには &lt;code&gt;[[Call]]&lt;/code&gt; 内部プロパティはありません。Mathオブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="03344790500f2127bf5b89f81cc0b7f1bd8cbe99" translate="yes" xml:space="preserve">
          <source>The Reflect object also does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Reflect object as a function.</source>
          <target state="translated">Reflectオブジェクトには、 &lt;code&gt;[[Call]]&lt;/code&gt; 内部メソッドもありません。Reflectオブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="d8e01d191666fc3fab613c0e7605b0dd8117adb5" translate="yes" xml:space="preserve">
          <source>The Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian. That is, whether the most significant or least significant bytes come first. UTF-8 does not require a BOM because byte ordering does not matter when characters are a single byte. Since UTF-8 is the dominant encoding of the web, we make &lt;code&gt;&quot;never&quot;&lt;/code&gt; the default option.</source>
          <target state="translated">Unicode Byte Order Mark（BOM）は、コード単位がビッグエンディアンかリトルエンディアンかを指定するために使用されます。つまり、最上位バイトと最下位バイトのどちらが最初に来るかです。文字がシングルバイトの場合、バイトの順序は関係ないため、UTF-8ではBOMは必要ありません。UTF-8はWebの主要なエンコーディングなので、デフォルトのオプションは &lt;code&gt;&quot;never&quot;&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="dee0f2bfcb123659c532724653e8c4e345e84a42" translate="yes" xml:space="preserve">
          <source>The `--fix` option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;の `--fix`オプションは、下にレンチがあるルールによって報告された問題（現在はほとんどが空白）を自動的に修正します。</target>
        </trans-unit>
        <trans-unit id="db8728aed09dfa6de429370be79c24bb69a35744" translate="yes" xml:space="preserve">
          <source>The above can be rewritten as the following to improve readability and more clearly delineate the operands:</source>
          <target state="translated">上記を以下のように書き換えることで、可読性を向上させ、オペランドの区切りをより明確にすることができます。</target>
        </trans-unit>
        <trans-unit id="65f3cb6e1b55fcacecc756bb976bc88a3674a7e6" translate="yes" xml:space="preserve">
          <source>The above methods return a &lt;code&gt;fixing&lt;/code&gt; object. The &lt;code&gt;fix()&lt;/code&gt; function can return the following values:</source>
          <target state="translated">上記のメソッドは &lt;code&gt;fixing&lt;/code&gt; オブジェクトを返します。 &lt;code&gt;fix()&lt;/code&gt; 関数は次の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="9907806cacfab0036e1c3174ec8f1e3740b6c513" translate="yes" xml:space="preserve">
          <source>The absolute path to the file of this result. This is the string &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; if the file path is unknown (when you didn't pass the &lt;code&gt;options.filePath&lt;/code&gt; option to the &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt;&lt;code&gt;eslint.lintText()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">この結果のファイルへの絶対パス。これは、ファイルパスが不明な場合（ &lt;code&gt;options.filePath&lt;/code&gt; オプションを&lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt; &lt;code&gt;eslint.lintText()&lt;/code&gt; &lt;/a&gt;メソッドに渡さなかった場合）の文字列 &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="534b2fcf7f67846ee9ee4948ebf52bf0568bd28a" translate="yes" xml:space="preserve">
          <source>The array can contain values of &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; types. If it's a string, the text must be parsed as &lt;code&gt;bigint&lt;/code&gt; literal (e.g., &lt;code&gt;&quot;100n&quot;&lt;/code&gt;).</source>
          <target state="translated">配列は、の値が含まれている可能 &lt;code&gt;number&lt;/code&gt; や &lt;code&gt;string&lt;/code&gt; の種類を。文字列の場合、テキストは &lt;code&gt;bigint&lt;/code&gt; リテラル（ &lt;code&gt;&quot;100n&quot;&lt;/code&gt; ）として解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="b83b06a5a4117b1ebec2ee0a831243105811ba6c" translate="yes" xml:space="preserve">
          <source>The array of &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt;オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="8040e15fea18e7a920143bf6b7ff7f7861d4d533" translate="yes" xml:space="preserve">
          <source>The base path of &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;ignorePatterns&lt;/code&gt; has changed when using the &lt;code&gt;--config&lt;/code&gt;/&lt;code&gt;--ignore-path&lt;/code&gt; options</source>
          <target state="translated">&lt;code&gt;--config&lt;/code&gt; / &lt;code&gt;--ignore-path&lt;/code&gt; オプションを使用すると、 &lt;code&gt;overrides&lt;/code&gt; と &lt;code&gt;ignorePatterns&lt;/code&gt; のベースパスが変更されました</target>
        </trans-unit>
        <trans-unit id="de6742db80aaba960ead5e3b3f95edb42af07948" translate="yes" xml:space="preserve">
          <source>The base path of &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;ignorePatterns&lt;/code&gt; is changed if the config file is given by the &lt;code&gt;--config&lt;/code&gt;/&lt;code&gt;--ignore-path&lt;/code&gt; options</source>
          <target state="translated">設定ファイルが &lt;code&gt;--config&lt;/code&gt; / &lt;code&gt;--ignore-path&lt;/code&gt; オプションで指定されている場合、 &lt;code&gt;overrides&lt;/code&gt; と &lt;code&gt;ignorePatterns&lt;/code&gt; のベースパスが変更されます</target>
        </trans-unit>
        <trans-unit id="0c94f2b50ef7b0d53ba00f8a03e35b8008133138" translate="yes" xml:space="preserve">
          <source>The basic pattern for a rule unit test file is:</source>
          <target state="translated">ルール単位のテストファイルの基本パターンです。</target>
        </trans-unit>
        <trans-unit id="56d7ca1af2103271f042bd642392c591643ab810" translate="yes" xml:space="preserve">
          <source>The best practice is to always use a function for the first argument of &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; (and avoid &lt;code&gt;execScript()&lt;/code&gt;).</source>
          <target state="translated">ベストプラクティスは、常に &lt;code&gt;setTimeout()&lt;/code&gt; および &lt;code&gt;setInterval()&lt;/code&gt; の最初の引数に関数を使用することです（そして &lt;code&gt;execScript()&lt;/code&gt; を避けます）。</target>
        </trans-unit>
        <trans-unit id="1e8c340ffa3f95f2957d6bb3facc83797eb47d1e" translate="yes" xml:space="preserve">
          <source>The built-in formatter options are:</source>
          <target state="translated">ビルトインのフォーマッタオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f4a074b29cc31436f926afa21bd394791fa680f4" translate="yes" xml:space="preserve">
          <source>The callback pattern is at the heart of most I/O and event-driven programming in JavaScript.</source>
          <target state="translated">コールバックパターンは、JavaScript のほとんどの I/O やイベント駆動型プログラミングの中心となっています。</target>
        </trans-unit>
        <trans-unit id="17cf8e65252c53144326fa3b3cb3dee6a9c49a73" translate="yes" xml:space="preserve">
          <source>The change introduces no functional regression. Be sure to run &lt;code&gt;npm test&lt;/code&gt; to verify your changes before submitting a pull request.</source>
          <target state="translated">この変更により、機能が低下することはありません。プルリクエストを送信する前に、必ず &lt;code&gt;npm test&lt;/code&gt; を実行して変更を確認してください。</target>
        </trans-unit>
        <trans-unit id="95b1da556ce89be353ded0ac57710b104d6f438e" translate="yes" xml:space="preserve">
          <source>The closing brace should be on a separate line.</source>
          <target state="translated">クロージングブレースは別ラインにしてください。</target>
        </trans-unit>
        <trans-unit id="0e877e0656f0ec69724c1b6cc3a12731f64fac75" translate="yes" xml:space="preserve">
          <source>The code above creates an object with just a setter for the property &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="translated">上記のコードは、プロパティ &lt;code&gt;&quot;a&quot;&lt;/code&gt; のセッターのみを持つオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="7d7fe0fd83bc9845d159f7bbddda58e021a2af8e" translate="yes" xml:space="preserve">
          <source>The code can be rewritten as:</source>
          <target state="translated">というようにコードを書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="eae223ac7cf3bcd6d761f22884ef878f4080872a" translate="yes" xml:space="preserve">
          <source>The code might be mistaken for an error.</source>
          <target state="translated">コードがエラーになっている可能性があります。</target>
        </trans-unit>
        <trans-unit id="07b81fa2d7c3787fd397d4cedde653ceddf32951" translate="yes" xml:space="preserve">
          <source>The combining characters are characters which belong to one of &lt;code&gt;Mc&lt;/code&gt;, &lt;code&gt;Me&lt;/code&gt;, and &lt;code&gt;Mn&lt;/code&gt;&lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode general categories&lt;/a&gt;.</source>
          <target state="translated">結合文字は、 &lt;code&gt;Mc&lt;/code&gt; 、 &lt;code&gt;Me&lt;/code&gt; 、および &lt;code&gt;Mn&lt;/code&gt; &lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode一般カテゴリの&lt;/a&gt;いずれかに属する文字です。</target>
        </trans-unit>
        <trans-unit id="73d750e0d0367037fdad99a42bc958f0afea170d" translate="yes" xml:space="preserve">
          <source>The comma and any whitespace that delimit property specifications are not considered parts of them. Therefore, the rule permits both of these formats:</source>
          <target state="translated">プロパティ指定を区切るカンマと空白は、それらの一部とはみなされません。したがって、このルールでは、これらの形式の両方を許可します。</target>
        </trans-unit>
        <trans-unit id="d9368f1df7787717cd62dddc2cb7c148f9058bfd" translate="yes" xml:space="preserve">
          <source>The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:</source>
          <target state="translated">カンマ演算子には、1つだけが期待される複数の式が含まれています。これは各オペランドを左から右に評価し、最後のオペランドの値を返します。しかし、これは副作用を不明瞭にすることが多く、その使用はしばしば事故となります。シーケンスの例をいくつか挙げてみます。</target>
        </trans-unit>
        <trans-unit id="6cbddd96542ae6a1209e95d3af05dcfc89e192c0" translate="yes" xml:space="preserve">
          <source>The command line utility has several options. You can view the options by running &lt;code&gt;eslint -h&lt;/code&gt;.</source>
          <target state="translated">コマンドラインユーティリティにはいくつかのオプションがあります。 &lt;code&gt;eslint -h&lt;/code&gt; を実行すると、オプションを表示できます。</target>
        </trans-unit>
        <trans-unit id="9c80af650686399cb1e0e7040218608587eb5be3" translate="yes" xml:space="preserve">
          <source>The commit message format is important because these messages are used to create a changelog for each release. The tag and issue number help to create more consistent and useful changelogs.</source>
          <target state="translated">コミットメッセージのフォーマットは、各リリースの変更履歴を作成するために使用されるため、重要です。タグと課題番号は、より一貫性のある有用な変更ログを作成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a8123064f7d126e4a3b589e9af343947dfe7c445" translate="yes" xml:space="preserve">
          <source>The commit message is properly formatted.</source>
          <target state="translated">コミットメッセージは適切にフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="e4677fbe3218552fdaa136e42baa9d0c902d41ca" translate="yes" xml:space="preserve">
          <source>The common case of using &lt;code&gt;void&lt;/code&gt; operator is to get a &quot;pure&quot; &lt;code&gt;undefined&lt;/code&gt; value as prior to ES5 the &lt;code&gt;undefined&lt;/code&gt; variable was mutable:</source>
          <target state="translated">ES5より前の &lt;code&gt;undefined&lt;/code&gt; 変数は変更可能だったため、 &lt;code&gt;void&lt;/code&gt; 演算子を使用する一般的なケースは、「純粋な」 &lt;code&gt;undefined&lt;/code&gt; 値を取得することです。</target>
        </trans-unit>
        <trans-unit id="affdad1a3137988828bd199a2283a60df1bc5075" translate="yes" xml:space="preserve">
          <source>The complete configuration hierarchy, from highest precedence to lowest precedence, is as follows:</source>
          <target state="translated">優先順位の高いものから低いものまで、完全な構成階層は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7505181a37b9fb762478197cf4096ed5622b8d1b" translate="yes" xml:space="preserve">
          <source>The config in &lt;code&gt;app/.eslintrc.json&lt;/code&gt; defines the glob pattern &lt;code&gt;**/*Spec.js&lt;/code&gt;. This pattern is relative to the base directory of &lt;code&gt;app/.eslintrc.json&lt;/code&gt;. So, this pattern would match &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; and &lt;code&gt;app/components/barSpec.js&lt;/code&gt; but &lt;strong&gt;NOT&lt;/strong&gt;&lt;code&gt;server/serverSpec.js&lt;/code&gt;. If you defined the same pattern in the &lt;code&gt;.eslintrc.json&lt;/code&gt; file within in the &lt;code&gt;project-root&lt;/code&gt; folder, it would match all three of the &lt;code&gt;*Spec&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;app/.eslintrc.json&lt;/code&gt; の設定は、globパターン &lt;code&gt;**/*Spec.js&lt;/code&gt; を定義します。このパターンは、 &lt;code&gt;app/.eslintrc.json&lt;/code&gt; のベースディレクトリを基準にしています。したがって、このパターンは &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; および &lt;code&gt;app/components/barSpec.js&lt;/code&gt; と一致し &lt;code&gt;server/serverSpec.js&lt;/code&gt; が、server / serverSpec.jsとは一致し&lt;strong&gt;ません&lt;/strong&gt;。 &lt;code&gt;project-root&lt;/code&gt; フォルダー内の &lt;code&gt;.eslintrc.json&lt;/code&gt; ファイルで同じパターンを定義した場合、それは3つの &lt;code&gt;*Spec&lt;/code&gt; ファイルすべてに一致します。</target>
        </trans-unit>
        <trans-unit id="761a0c741d5f1588ef78c2680d748e9585f5469d" translate="yes" xml:space="preserve">
          <source>The configuration cascade works by using the closest &lt;code&gt;.eslintrc&lt;/code&gt; file to the file being linted as the highest priority, then any configuration files in the parent directory, and so on. When you run ESLint on this project, all files in &lt;code&gt;lib/&lt;/code&gt; will use the &lt;code&gt;.eslintrc&lt;/code&gt; file at the root of the project as their configuration. When ESLint traverses into the &lt;code&gt;tests/&lt;/code&gt; directory, it will then use &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; in addition to &lt;code&gt;your-project/.eslintrc&lt;/code&gt;. So &lt;code&gt;your-project/tests/test.js&lt;/code&gt; is linted based on the combination of the two &lt;code&gt;.eslintrc&lt;/code&gt; files in its directory hierarchy, with the closest one taking priority. In this way, you can have project-level ESLint settings and also have directory-specific overrides.</source>
          <target state="translated">構成カスケードは、 &lt;code&gt;.eslintrc&lt;/code&gt; されているファイルに最も近い.eslintrcファイルを最高の優先順位として使用し、次に親ディレクトリ内の構成ファイルを使用することで機能します。あなたはこのプロジェクトにESLintを実行すると、内のすべてのファイル &lt;code&gt;lib/&lt;/code&gt; 使用されます &lt;code&gt;.eslintrc&lt;/code&gt; その構成として、プロジェクトのルートにファイルを。 ESLintが &lt;code&gt;tests/&lt;/code&gt; ディレクトリに移動すると、 &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; に加えて &lt;code&gt;your-project/.eslintrc&lt;/code&gt; tests / .eslintrcが使用されます。したがって &lt;code&gt;your-project/tests/test.js&lt;/code&gt; は、2つの &lt;code&gt;.eslintrc&lt;/code&gt; の組み合わせに基づいてリンクされますディレクトリ階層内のファイル。最も近いファイルが優先されます。このようにして、プロジェクトレベルのESLint設定とディレクトリ固有のオーバーライドを設定できます。</target>
        </trans-unit>
        <trans-unit id="dcdf3251f61da2ed7fea4070dd8de83ac8b210fc" translate="yes" xml:space="preserve">
          <source>The configuration that you have in your &lt;code&gt;.eslintrc&lt;/code&gt; file is an important part of your project, and as such, you may want to share it with other projects or people. Shareable configs allow you to publish your configuration settings on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and have others download and use it in their ESLint projects.</source>
          <target state="translated">あなたの中に持っていることを設定 &lt;code&gt;.eslintrc&lt;/code&gt; ファイルは、プロジェクトの重要な部分であり、そのように、あなたは他のプロジェクトや人々とそれを共有することができます。共有可能な構成を使用すると、&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmで&lt;/a&gt;構成設定を公開し、他の人にダウンロードしてESLintプロジェクトで使用させることができます。</target>
        </trans-unit>
        <trans-unit id="32170e7d3eae30d6911a8ee9094599efb5b60bbf" translate="yes" xml:space="preserve">
          <source>The confusion around sparse arrays defined in this manner is enough that it's recommended to avoid using them unless you are certain that they are useful in your code.</source>
          <target state="translated">このように定義された疎な配列をめぐる混乱は、コードの中で有用であると確信している場合を除き、使用を避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="84a32a3cbfb78fbed02519d25670fc0e1cc660ca" translate="yes" xml:space="preserve">
          <source>The constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments.</source>
          <target state="translated">コンストラクタ関数は文字列の引数を取るので、パターンを動的に生成したい場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="1c3dff42ca3b1d5caf72f42e977b149fee7f9002" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;if&lt;/code&gt; statement is an arrow function, not a comparison.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ステートメントの内容は、比較ではなく矢印関数です。</target>
        </trans-unit>
        <trans-unit id="dc960e48baa84799c5c10650483220ba5c93ce2e" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular import may match more than one pattern.</source>
          <target state="translated">カスタムメッセージは、デフォルトのエラーメッセージに追加されます。特定のインポートが複数のパターンにマッチする可能性があるため、制限されたパターンに対してカスタムエラーメッセージを指定することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="02091995aebc0237ea1f370d1e9e697cb283fce5" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular module may match more than one pattern.</source>
          <target state="translated">カスタムメッセージはデフォルトのエラーメッセージに追加されます。特定のモジュールが複数のパターンにマッチする可能性があるため、制限されたパターンに対してカスタムエラーメッセージを指定することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2db40330539be8a023ce70cd6de477ff5ec12779" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option can have exception options in an object literal:</source>
          <target state="translated">デフォルトの &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションは、オブジェクトリテラルに例外オプションを持つことができます。</target>
        </trans-unit>
        <trans-unit id="aad36d23c9c66cf621dc65a4fdf5357b747ebf25" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;object&quot;&lt;/code&gt; option requires the dot to be on the same line as the object.</source>
          <target state="translated">デフォルトの &lt;code&gt;&quot;object&quot;&lt;/code&gt; オプションでは、ドットがオブジェクトと同じ行にある必要があります。</target>
        </trans-unit>
        <trans-unit id="eb214d0a96891b20944eb86c406846b8c0682ec0" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</source>
          <target state="translated">デフォルトの構成は &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="796093e436a921806e600ed6ffc0bb010636d015" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">デフォルトの構成は &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ffd96c78ae8b308cef5ee180c2cafbcfe74c3226" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d709b74ae2cf658c17f26fdf6ce2c1bfe069742" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="535a63e8e2a6cdd1ad85243a0f44cac231300bc7" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="baa5bd9ea8cd406c936d48459561cdc0703e1522" translate="yes" xml:space="preserve">
          <source>The default option (that is, no string option specified) for this rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0. The &lt;code&gt;&quot;function&quot;&lt;/code&gt; option is most similar to the removed option.</source>
          <target state="translated">このルールのデフォルトオプション（つまり、文字列オプションが指定されていない）は、ESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れました。 &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションが削除オプションに最も類似しています。</target>
        </trans-unit>
        <trans-unit id="ea560e9329be81e2a97fb02fb917528a08a7dfda" translate="yes" xml:space="preserve">
          <source>The default options for some rules have changed</source>
          <target state="translated">いくつかのルールのデフォルトオプションが変更されました。</target>
        </trans-unit>
        <trans-unit id="e1b30fc08a505ea690637325f1e931c67ab9c7ce" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt;&lt;code&gt;no-confusing-arrow&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ allowParens: false }&lt;/code&gt; to &lt;code&gt;{ allowParens: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt; &lt;code&gt;no-confusing-arrow&lt;/code&gt; &lt;/a&gt;ルールのデフォルトのオプションが &lt;code&gt;{ allowParens: false }&lt;/code&gt; から &lt;code&gt;{ allowParens: true }&lt;/code&gt; 変更されました。</target>
        </trans-unit>
        <trans-unit id="544468a6bb41999c9c49e104c2162d56de2501c3" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-redeclare&quot;&gt;&lt;code&gt;no-redeclare&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; to &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt;. Additionally, the &lt;code&gt;no-redeclare&lt;/code&gt; rule will now report an error for globals enabled by comments like &lt;code&gt;/* global foo */&lt;/code&gt; if those globals were already enabled through configuration anyway.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-redeclare&quot;&gt; &lt;code&gt;no-redeclare&lt;/code&gt; &lt;/a&gt; &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; ルールのデフォルトオプションは、{builtinGlobals：false}から &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt; 変更されました。さらに、これらのグローバルが構成によってすでに有効になっている場合、 &lt;code&gt;/* global foo */&lt;/code&gt; などのコメントによって有効にされたグローバルのエラーを &lt;code&gt;no-redeclare&lt;/code&gt; ルールが報告するようになりました。</target>
        </trans-unit>
        <trans-unit id="4b68ac7ed408d41719943a7ec2a3599de96e8bf8" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/object-curly-newline&quot;&gt;&lt;code&gt;object-curly-newline&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ multiline: true }&lt;/code&gt; to &lt;code&gt;{ consistent: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/object-curly-newline&quot;&gt; &lt;code&gt;object-curly-newline&lt;/code&gt; &lt;/a&gt;ルールのデフォルトオプションは、 &lt;code&gt;{ multiline: true }&lt;/code&gt; から &lt;code&gt;{ consistent: true }&lt;/code&gt; 変更されました。</target>
        </trans-unit>
        <trans-unit id="5b7ab1e46a9e7c204637eb33434f00becfe8a66d" translate="yes" xml:space="preserve">
          <source>The default options object for the &lt;a href=&quot;../rules/no-self-assign&quot;&gt;&lt;code&gt;no-self-assign&lt;/code&gt;&lt;/a&gt; rule has changed from &lt;code&gt;{ props: false }&lt;/code&gt; to &lt;code&gt;{ props: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-self-assign&quot;&gt; &lt;code&gt;no-self-assign&lt;/code&gt; &lt;/a&gt;ルールのデフォルトのオプションオブジェクトが &lt;code&gt;{ props: false }&lt;/code&gt; から &lt;code&gt;{ props: true }&lt;/code&gt; 変更されました。</target>
        </trans-unit>
        <trans-unit id="f7d8ef8740358e7014a22b0fc66ddeed7cc30fcc" translate="yes" xml:space="preserve">
          <source>The default parser now validates options more strictly</source>
          <target state="translated">デフォルトのパーサがオプションをより厳密に検証するようになりました。</target>
        </trans-unit>
        <trans-unit id="cb91917a4ee5c4169d24eee0779ed1f5fecc0213" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been removed</source>
          <target state="translated">非推奨の &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションが削除されました</target>
        </trans-unit>
        <trans-unit id="417c3b37d6ea8d516aaec94e4251e5a47c517230" translate="yes" xml:space="preserve">
          <source>The difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas exceptions can occur anywhere in the comment string.</source>
          <target state="translated">マーカーと例外の違いは、マーカーはコメントの先頭にしか現れないのに対し、例外はコメント文字列のどこにでも現れる可能性があるということです。</target>
        </trans-unit>
        <trans-unit id="be6b4fc0012e62a768e63daa1d092d896e9cd14d" translate="yes" xml:space="preserve">
          <source>The difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.</source>
          <target state="translated">この2つのパターンの違いは微妙で、特に問題のある空のパターンはオブジェクトリテラルと同じように見えるからです。</target>
        </trans-unit>
        <trans-unit id="5f8c988db3120f6ad6d74976827259fee73007f6" translate="yes" xml:space="preserve">
          <source>The easiest way to start creating a plugin is to use the &lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman generator&lt;/a&gt;. The generator will guide you through setting up the skeleton of a plugin.</source>
          <target state="translated">プラグインの作成を開始する最も簡単な方法は、&lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeomanジェネレーター&lt;/a&gt;を使用することです。ジェネレーターは、プラグインのスケルトンのセットアップをガイドします。</target>
        </trans-unit>
        <trans-unit id="43705ef6db2efcf221d0e395d353b64954c6c747" translate="yes" xml:space="preserve">
          <source>The enclosed statements should be indented one more level than the compound statement.</source>
          <target state="translated">同封されている文は、複合文よりも1段多くインデントされている必要があります。</target>
        </trans-unit>
        <trans-unit id="b118bf659a71ae3c29fa483a5256dbcff0e3c82c" translate="yes" xml:space="preserve">
          <source>The end of the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; ブロックの終わり。</target>
        </trans-unit>
        <trans-unit id="4a0628012c2d77c4a62f2562528b964f8e826cdc" translate="yes" xml:space="preserve">
          <source>The error message.</source>
          <target state="translated">エラーメッセージが出ています。</target>
        </trans-unit>
        <trans-unit id="8db72bff78f8373ee30f8c8fd310da3156ec6caa" translate="yes" xml:space="preserve">
          <source>The executor function can also be an &lt;code&gt;async function&lt;/code&gt;. However, this is usually a mistake, for a few reasons:</source>
          <target state="translated">executor関数は、 &lt;code&gt;async function&lt;/code&gt; にすることもできます。ただし、これは通常、いくつかの理由で間違いです。</target>
        </trans-unit>
        <trans-unit id="747871d96446f5608c3230dad0216525a21179fa" translate="yes" xml:space="preserve">
          <source>The executor function usually initiates some asynchronous operation. Once it is finished, the executor should call &lt;code&gt;resolve&lt;/code&gt; with the result, or &lt;code&gt;reject&lt;/code&gt; if an error occurred.</source>
          <target state="translated">エグゼキュータ関数は通常、非同期操作を開始します。終了したら、エグゼキュータは結果を使用して &lt;code&gt;resolve&lt;/code&gt; を呼び出すか、エラーが発生 &lt;code&gt;reject&lt;/code&gt; 場合は拒否する必要があります。</target>
        </trans-unit>
        <trans-unit id="67f85a36ed894f5ee40529023db3887ad5bbee0c" translate="yes" xml:space="preserve">
          <source>The exported function receives an optional second argument named &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; object provides extended information related to the analysis results. Currently, the &lt;code&gt;data&lt;/code&gt; object consists of a single property named &lt;code&gt;rulesMeta&lt;/code&gt;. This property is a dictionary of rule metadata, keyed with &lt;code&gt;ruleId&lt;/code&gt;. The value for each entry is the &lt;code&gt;meta&lt;/code&gt; property from the corresponding rule object. The dictionary contains an entry for each rule that was run during the analysis.</source>
          <target state="translated">エクスポートされた関数は、 &lt;code&gt;data&lt;/code&gt; という名前のオプションの2番目の引数を受け取ります。 &lt;code&gt;data&lt;/code&gt; オブジェクトは、分析結果に関連する拡張情報を提供します。現在、 &lt;code&gt;data&lt;/code&gt; オブジェクトは &lt;code&gt;rulesMeta&lt;/code&gt; という名前の単一のプロパティで構成されています。このプロパティは、ルールメタデータのディクショナリであり、 &lt;code&gt;ruleId&lt;/code&gt; をキーとします。各エントリの値は、対応するルールオブジェクトの &lt;code&gt;meta&lt;/code&gt; プロパティです。ディクショナリには、分析中に実行された各ルールのエントリが含まれています。</target>
        </trans-unit>
        <trans-unit id="10638ad26a2336c237513cb7fa8ba9e360e6572f" translate="yes" xml:space="preserve">
          <source>The expressions in a &lt;code&gt;for&lt;/code&gt; statement should be separated by blank spaces. Blank spaces should only be used after semicolons, not before.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ステートメントの式は、空白で区切る必要があります。空白は、セミコロンの前ではなく、後にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc9043ab9742cf8199292ae41ac858900ddd79ad" translate="yes" xml:space="preserve">
          <source>The filtered &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects.</source>
          <target state="translated">フィルタリングされた&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0857209508949425ce9520e024dc97908dd75683" translate="yes" xml:space="preserve">
          <source>The first is a string which be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">1つ目は、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; 常に」の文字列です。デフォルトは &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6c11e634588bcc74080a015687bda5aa0bfac1d9" translate="yes" xml:space="preserve">
          <source>The first is using &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt; (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:</source>
          <target state="translated">1つ目は、 &lt;code&gt;setTimeout()&lt;/code&gt; 、 &lt;code&gt;setInterval()&lt;/code&gt; または &lt;code&gt;execScript()&lt;/code&gt; （Internet Explorerのみ）を使用する方法です。これらはすべて、最初の引数としてJavaScriptコードの文字列を受け入れることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="6d4bbf2fb18f805ebaadc20bfc29b2a73d3969ac" translate="yes" xml:space="preserve">
          <source>The first line contains only the &lt;code&gt;/*&lt;/code&gt; comment opening. No further text is allowed on this line.</source>
          <target state="translated">最初の行には、 &lt;code&gt;/*&lt;/code&gt; コメントの開始部分のみが含まれています。この行にそれ以上のテキストは許可されません。</target>
        </trans-unit>
        <trans-unit id="6154e02adfa070a6b3e169f562e328e046578b3d" translate="yes" xml:space="preserve">
          <source>The first line of multi-comments should be indented to the same level as the code it describes. Each subsequent line should have the same indentation plus one space (for proper alignment of the &lt;code&gt;*&lt;/code&gt; characters). Each multi-line comment should be preceded by one empty line.</source>
          <target state="translated">マルチコメントの最初の行は、それが説明するコードと同じレベルにインデントする必要があります。後続の各行には、同じインデントと1つのスペースが必要です（ &lt;code&gt;*&lt;/code&gt; 文字を適切に配置するため）。各複数行コメントの前には、1行の空行が必要です。</target>
        </trans-unit>
        <trans-unit id="5072260dd42b4b3af826cc62dd8fbb33239f1233" translate="yes" xml:space="preserve">
          <source>The first line of the commit message (the summary) must have a specific format. This format is checked by our build tools.</source>
          <target state="translated">コミットメッセージの最初の行 (サマリー)は、特定のフォーマットでなければなりません。このフォーマットはビルドツールによってチェックされます。</target>
        </trans-unit>
        <trans-unit id="eaba518aba6a1d6f3d301b713e35495cf26fd58b" translate="yes" xml:space="preserve">
          <source>The first problem is that primitive wrapper objects are, in fact, objects. That means &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;&quot;object&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, or &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;. The second problem comes with boolean objects. Every object is truthy, that means an instance of &lt;code&gt;Boolean&lt;/code&gt; always resolves to &lt;code&gt;true&lt;/code&gt; even when its actual value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">最初の問題は、プリミティブラッパーオブジェクトが実際にはオブジェクトであることです。つまり、 &lt;code&gt;typeof&lt;/code&gt; は、 &lt;code&gt;&quot;string&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;number&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;object&quot;&lt;/code&gt; を返します。2番目の問題は、ブール型オブジェクトで発生します。すべてのオブジェクトは真実です。つまり、 &lt;code&gt;Boolean&lt;/code&gt; インスタンスは、実際の値が &lt;code&gt;false&lt;/code&gt; であっても常に &lt;code&gt;true&lt;/code&gt; に解決されます。</target>
        </trans-unit>
        <trans-unit id="984bf5268b0ddf754b28d771410a618bd31b5080" translate="yes" xml:space="preserve">
          <source>The first step to sending a pull request is to create a new branch in your ESLint fork. Give the branch a descriptive name that describes what it is you're fixing, such as:</source>
          <target state="translated">プルリクエストを送る最初のステップは、ESLint フォークに新しいブランチを作成することです。ブランチには何を修正しているのかを説明する名前をつけてください。</target>
        </trans-unit>
        <trans-unit id="89a5d6f7116af9ee2720543818896897a369050f" translate="yes" xml:space="preserve">
          <source>The first throwable node (e.g. a function call) in the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; ブロックの最初のスロー可能なノード（関数呼び出しなど）。</target>
        </trans-unit>
        <trans-unit id="d71475a3d6080cbad00254ef62ed2324f9e45663" translate="yes" xml:space="preserve">
          <source>The first way to use configuration files is via &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (unless &lt;code&gt;root: true&lt;/code&gt; is specified). This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.</source>
          <target state="translated">構成ファイルを使用する最初の方法は、 &lt;code&gt;.eslintrc.*&lt;/code&gt; および &lt;code&gt;package.json&lt;/code&gt; ファイルを使用することです。ESLintは自動的にそれらがlintedされるファイルのディレクトリで、そしてファイルシステムのルートディレクトリに至るまで連続した親ディレクトリで検索します（ &lt;code&gt;root: true&lt;/code&gt; が指定されている場合を除く）。このオプションは、プロジェクトのさまざまな部分に異なる構成が必要な場合、または構成ファイルを渡さなくても他のユーザーがESLintを直接使用できるようにする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cc7819bcb56a4f8a3f4c63d8cc7e3fc0c5244e52" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;--ignore-pattern&lt;/code&gt; is also equivalent:</source>
          <target state="translated">次の &lt;code&gt;--ignore-pattern&lt;/code&gt; も同等です。</target>
        </trans-unit>
        <trans-unit id="7899f93b94b39beef8a71db444282ddbbd5e7124" translate="yes" xml:space="preserve">
          <source>The following configuration ignores indentation in the body of IIFEs.</source>
          <target state="translated">以下の設定では、IIFEの本文のインデントを無視します。</target>
        </trans-unit>
        <trans-unit id="41c40b6e586fc5cb09bbc72af12c8f09e123d736" translate="yes" xml:space="preserve">
          <source>The following configuration ignores the indentation of &lt;code&gt;ConditionalExpression&lt;/code&gt; (&quot;ternary expression&quot;) nodes:</source>
          <target state="translated">次の構成では、 &lt;code&gt;ConditionalExpression&lt;/code&gt; （「3次式」）ノードのインデントは無視されます。</target>
        </trans-unit>
        <trans-unit id="d5fa8b20b228bdd086131e38e40e897cbd6cbf7a" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will not&lt;/strong&gt; be flagged:</source>
          <target state="translated">次の例&lt;strong&gt;には&lt;/strong&gt;フラグが付けられ&lt;strong&gt;ませ&lt;/strong&gt;ん。</target>
        </trans-unit>
        <trans-unit id="f5287d99a37de7104aa2ed235baa902a0ec5078d" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will&lt;/strong&gt; be flagged:</source>
          <target state="translated">次の例では&lt;strong&gt;します&lt;/strong&gt;フラグを立てること。</target>
        </trans-unit>
        <trans-unit id="c14ba9c0ea8a095e66d6957614fae22fac370baf" translate="yes" xml:space="preserve">
          <source>The following exceptions are available:</source>
          <target state="translated">以下のような例外があります。</target>
        </trans-unit>
        <trans-unit id="cf3496b833b4ce7626fcd6541bf610fb0c36af11" translate="yes" xml:space="preserve">
          <source>The following exceptions are available: &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt;.</source>
          <target state="translated">次の例外が利用可能です： &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc06f672c1606cd07e74f3dea672e030eb3b9e95" translate="yes" xml:space="preserve">
          <source>The following is another example of this behavior:</source>
          <target state="translated">この動作の別の例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="2a56e159d769ca06392168750d10004a388bb2d2" translate="yes" xml:space="preserve">
          <source>The following methods internally use the &lt;code&gt;===&lt;/code&gt; comparison to match the given value with an array element:</source>
          <target state="translated">次のメソッドは、内部で &lt;code&gt;===&lt;/code&gt; 比較を使用して、指定された値を配列要素と照合します。</target>
        </trans-unit>
        <trans-unit id="5d5534fd1ddcbfd687919d332b483e9a80e0f5bb" translate="yes" xml:space="preserve">
          <source>The following operators can be used in &lt;code&gt;groups&lt;/code&gt; option:</source>
          <target state="translated">次の演算子は &lt;code&gt;groups&lt;/code&gt; オプションで使用できます。</target>
        </trans-unit>
        <trans-unit id="6b976bf24d5d6d504746e7c6ab5309ec8057839f" translate="yes" xml:space="preserve">
          <source>The following parsers are compatible with ESLint:</source>
          <target state="translated">以下のパーサーはESLintと互換性があります。</target>
        </trans-unit>
        <trans-unit id="0d78993759d70053fb65fd89fcd97c00ecd762fb" translate="yes" xml:space="preserve">
          <source>The following pattern is under strict mode globally and is considered valid with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option and a warning with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option.</source>
          <target state="translated">次のパターンは、グローバルstrictモードの下にあるとして有効であると考えられる &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションとして警告 &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="d729325dfb7e6f59aa92e87801a3213c9448843d" translate="yes" xml:space="preserve">
          <source>The following patterns apply strict mode only to functions so are valid with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option but are problems with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option.</source>
          <target state="translated">次のパターンはストリクトモードを関数にのみ適用するため、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションで有効ですが、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションでは問題があります。</target>
        </trans-unit>
        <trans-unit id="4c8beda3159d864bcb7168811d6ca919b1da89c2" translate="yes" xml:space="preserve">
          <source>The following rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">次のルールが&lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; 構成に&lt;/a&gt;追加されました。</target>
        </trans-unit>
        <trans-unit id="43d343a3ec041d356d216b275ad524155322bd82" translate="yes" xml:space="preserve">
          <source>The following rules have been deprecated with new rules created to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">以下のルールは廃止され、代わりに新しいルールが作成されました。以下は、削除されたルールとその代替ルールのリストです。</target>
        </trans-unit>
        <trans-unit id="fd8fba26361e9e9eea3de62de397689436cfaa0d" translate="yes" xml:space="preserve">
          <source>The following rules were modified:</source>
          <target state="translated">以下のルールを修正しました。</target>
        </trans-unit>
        <trans-unit id="cbf28d7aa679ef7fb32bcf23869dde2a833ca6c5" translate="yes" xml:space="preserve">
          <source>The following rules were removed from &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">次のルールが &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; から削除されました。</target>
        </trans-unit>
        <trans-unit id="4b1c496bbd734835e82ecba2dcd535dd72437441" translate="yes" xml:space="preserve">
          <source>The following selectors are supported:</source>
          <target state="translated">以下のセレクタに対応しています。</target>
        </trans-unit>
        <trans-unit id="50fe0ca19519467513afe9de899977912a5dca9e" translate="yes" xml:space="preserve">
          <source>The function declaration portion rule will be rendered obsolete when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;block-scoped functions&lt;/a&gt; land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using &lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt; or if declaring variables in nested blocks is acceptable despite hoisting.</source>
          <target state="translated">関数宣言部分のルールは、ES6 に&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;ブロックスコープの関数&lt;/a&gt;が含まれている場合は廃止されますが、それまでは有効な構文を適用するためにそのままにしておく必要があります。&lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-varを&lt;/a&gt;使用する場合、またはホイストしてもネストされたブロックで変数を宣言できる場合は、変数宣言のチェックを無効にします。</target>
        </trans-unit>
        <trans-unit id="db3dccfd930abb34e566f04f78fc9ed70b467b0b" translate="yes" xml:space="preserve">
          <source>The function has &lt;code&gt;@this&lt;/code&gt; tag in its JSDoc comment.</source>
          <target state="translated">関数のJSDocコメントに &lt;code&gt;@this&lt;/code&gt; タグがあります。</target>
        </trans-unit>
        <trans-unit id="5620d241e1ebd93a4e8ac57b317c474f477713ad" translate="yes" xml:space="preserve">
          <source>The function invocation can be written by &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;. But &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; are slower than the normal function invocation.</source>
          <target state="translated">関数の呼び出しは、 &lt;code&gt;Function.prototype.call()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; で記述できます。ただし、 &lt;code&gt;Function.prototype.call()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; は、通常の関数呼び出しよりも低速です。</target>
        </trans-unit>
        <trans-unit id="a5351ac484a8bf3cb3ea45d7dd69d4667a894926" translate="yes" xml:space="preserve">
          <source>The function is a callback of array methods (such as &lt;code&gt;.forEach()&lt;/code&gt;) if &lt;code&gt;thisArg&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; が指定されている場合、関数は配列メソッド（ &lt;code&gt;.forEach()&lt;/code&gt; など）のコールバックです。</target>
        </trans-unit>
        <trans-unit id="deb40c3066f6e38deb8139ba56f87dc333a2a42d" translate="yes" xml:space="preserve">
          <source>The function is a constructor of ES2015 Classes.</source>
          <target state="translated">この関数はES2015クラスのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="de02b593b295da2bc2bad8e8f15be1427537b0d8" translate="yes" xml:space="preserve">
          <source>The function is a method/getter/setter of ES2015 Classes. (excepts static methods)</source>
          <target state="translated">この関数はES2015クラスのメソッド/ゲッター/セッターです。(静的メソッドを除く)</target>
        </trans-unit>
        <trans-unit id="58b8b313fb5fc9cea0cb6de31e257ad439368b79" translate="yes" xml:space="preserve">
          <source>The function is assigned to a property.</source>
          <target state="translated">プロパティに関数が割り当てられています。</target>
        </trans-unit>
        <trans-unit id="1ec2f55a7c94721043c141bc1c6ef3a223affda5" translate="yes" xml:space="preserve">
          <source>The function is assigned to a variable which starts with an uppercase letter.</source>
          <target state="translated">大文字で始まる変数に関数を代入します。</target>
        </trans-unit>
        <trans-unit id="f1a468e18550838069874f9e16dfdc8a15a09a28" translate="yes" xml:space="preserve">
          <source>The function is on an object literal.</source>
          <target state="translated">関数はオブジェクトリテラル上にあります。</target>
        </trans-unit>
        <trans-unit id="24287496e1c3d7550a774298bb9d98fa77335f61" translate="yes" xml:space="preserve">
          <source>The function's</source>
          <target state="translated">関数の</target>
        </trans-unit>
        <trans-unit id="aeaafe54aaf295b5e3e4fde9b2befddf145018a6" translate="yes" xml:space="preserve">
          <source>The get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:</source>
          <target state="translated">get 構文は、オブジェクトのプロパティを、そのプロパティが検索されたときに呼び出される関数にバインドします。これは ECMAScript 5 で初めて導入されました。</target>
        </trans-unit>
        <trans-unit id="5303cca7341f758ff7259b4665508fac4ca8d017" translate="yes" xml:space="preserve">
          <source>The global's</source>
          <target state="translated">グローバルの</target>
        </trans-unit>
        <trans-unit id="cd1ea1f16f00e056aa55de069fc2ba6f16e8946b" translate="yes" xml:space="preserve">
          <source>The goal of using &lt;code&gt;new&lt;/code&gt; with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</source>
          <target state="translated">使用の目的 &lt;code&gt;new&lt;/code&gt; コンストラクタでは、次のような、特定の種類のオブジェクトを作成し、変数にそのオブジェクトを保存するために、典型的です。</target>
        </trans-unit>
        <trans-unit id="acac3d2c78a0442ff5e1d6b8f826069158684f0b" translate="yes" xml:space="preserve">
          <source>The implementation is not aware of any local functions with the name &lt;code&gt;require&lt;/code&gt; that may shadow Node.js' global &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">実装は、Node.jsのグローバルな &lt;code&gt;require&lt;/code&gt; をシャドウする可能性がある &lt;code&gt;require&lt;/code&gt; という名前のローカル関数を認識していません。</target>
        </trans-unit>
        <trans-unit id="032f95f2ad52750fe42b95d8612f0f3b8a88f333" translate="yes" xml:space="preserve">
          <source>The import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.</source>
          <target state="translated">import文は、エクスポートされたバインディングを使わずにモジュールをインポートすることもできます。モジュールが何もエクスポートせずに独自のコードを実行したり、グローバルコンテキストオブジェクトを変更したりする場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="0eeaf642c54558bc59a95b083b854c711c38cc2b" translate="yes" xml:space="preserve">
          <source>The import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:</source>
          <target state="translated">import 文は、外部モジュールからエクスポートされたメンバ (関数、オブジェクト、またはプリミティブ)をインポートするために使用します。特定のメンバ構文を使用します。</target>
        </trans-unit>
        <trans-unit id="828330981111cc0aaf5513c653c9b3ff72d6b8c6" translate="yes" xml:space="preserve">
          <source>The information about the deprecated rules that were used to check this file.</source>
          <target state="translated">このファイルをチェックするために使用された非推奨ルールの情報です。</target>
        </trans-unit>
        <trans-unit id="4a80f2125f069a5f1c92caf6dad61a91aa823038" translate="yes" xml:space="preserve">
          <source>The information available for each linting message is:</source>
          <target state="translated">リンティングメッセージごとに利用可能な情報があります。</target>
        </trans-unit>
        <trans-unit id="7675327e3125cbdffe94a48f7416e4309f48e134" translate="yes" xml:space="preserve">
          <source>The information available is:</source>
          <target state="translated">入手可能な情報は</target>
        </trans-unit>
        <trans-unit id="026fee076803b9a433c8e9acb756fb2b3e489841" translate="yes" xml:space="preserve">
          <source>The kind of the way to address variables in destructuring. There are 2 values:</source>
          <target state="translated">デストラクチャリングでの変数のアドレスの取り方の種類。値は2つあります。</target>
        </trans-unit>
        <trans-unit id="c38f57d73e2ff10d4366adce9c62d418943b8650" translate="yes" xml:space="preserve">
          <source>The last line has the &lt;code&gt;*/&lt;/code&gt; comment opening aligned with the preceding lines. No other text is allowed on this line.</source>
          <target state="translated">最後の行には、前の行と揃えて &lt;code&gt;*/&lt;/code&gt; コメントの開始があります。この行に他のテキストを入力することはできません。</target>
        </trans-unit>
        <trans-unit id="cf2418cd74bfe3b3574af71ae7e2102cc8457373" translate="yes" xml:space="preserve">
          <source>The line comment &lt;code&gt;// exported variableName&lt;/code&gt; will not work as &lt;code&gt;exported&lt;/code&gt; is not line-specific.</source>
          <target state="translated">行コメント &lt;code&gt;// exported variableName&lt;/code&gt; は、 &lt;code&gt;exported&lt;/code&gt; が行固有ではないため機能しません。</target>
        </trans-unit>
        <trans-unit id="dd3923f68fea3cc32c62bea7c26b00e55243f62f" translate="yes" xml:space="preserve">
          <source>The line is &lt;code&gt;--&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt; (in which case it will decrement/increment the next token.)</source>
          <target state="translated">行は &lt;code&gt;--&lt;/code&gt; または &lt;code&gt;++&lt;/code&gt; です（この場合、次のトークンが減分/増分されます）。</target>
        </trans-unit>
        <trans-unit id="8fc6d3dc22f28ddac02852365e2f486c4a9fbcb1" translate="yes" xml:space="preserve">
          <source>The linebreaks (new lines) used in windows operating system are usually &lt;em&gt;carriage returns&lt;/em&gt; (CR) followed by a &lt;em&gt;line feed&lt;/em&gt; (LF) making it a &lt;em&gt;carriage return line feed&lt;/em&gt; (CRLF) whereas Linux and Unix use a simple &lt;em&gt;line feed&lt;/em&gt; (LF). The corresponding &lt;em&gt;control sequences&lt;/em&gt; are &lt;code&gt;&quot;\n&quot;&lt;/code&gt; (for LF) and &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; for (CRLF).</source>
          <target state="translated">Windowsオペレーティングシステムで使用される改行（改行）は通常、&lt;em&gt;キャリッジリターン&lt;/em&gt;（CR）の後に&lt;em&gt;ラインフィード&lt;/em&gt;（LF）が続き、&lt;em&gt;キャリッジリターンラインフィード&lt;/em&gt;（CRLF）になりますが、LinuxおよびUnixは単純な&lt;em&gt;ラインフィード&lt;/em&gt;（LF）を使用します。対応する&lt;em&gt;制御シーケンス&lt;/em&gt;は、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; （LFの場合）および &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; （CRLF）です。</target>
        </trans-unit>
        <trans-unit id="26d7358730984ec96df0ef330056949a6cca706a" translate="yes" xml:space="preserve">
          <source>The lint target files. This can contain any of file paths, directory paths, and glob patterns.</source>
          <target state="translated">lint の対象となるファイル。これには、ファイルパス、ディレクトリパス、グロブパターンのいずれかを含めることができます。</target>
        </trans-unit>
        <trans-unit id="6ba0efe7b079abf8625759c3ee06d0fef820cbba" translate="yes" xml:space="preserve">
          <source>The list of suggestions. Each suggestion is the pair of a description and an &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; object to fix code. API users such as editor integrations can choose one of them to fix the problem of this message. This property is undefined if this message doesn't have any suggestions.</source>
          <target state="translated">提案のリスト。各提案は、コードを修正するための説明と&lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt;オブジェクトのペアです。エディタ統合などのAPIユーザーは、そのうちの1つを選択して、このメッセージの問題を修正できます。このメッセージに提案がない場合、このプロパティは未定義です。</target>
        </trans-unit>
        <trans-unit id="2201d7d5091e9b276f0386c81e6c9e6b5aad5f13" translate="yes" xml:space="preserve">
          <source>The lists below are ordered roughly by the number of users each change is expected to affect, where the first items are expected to affect the most users.</source>
          <target state="translated">以下のリストは、各変更が影響を与えると予想されるユーザー数の多い順に大まかに並べられており、最初の項目が最も多くのユーザーに影響を与えると予想されています。</target>
        </trans-unit>
        <trans-unit id="cd5ba3dd3a61a71ce3c2df5c8c27632dbb8e611b" translate="yes" xml:space="preserve">
          <source>The main method is &lt;code&gt;cli.execute()&lt;/code&gt;, which accepts an array of strings that represent the command line options (as if &lt;code&gt;process.argv&lt;/code&gt; were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then &lt;code&gt;cli&lt;/code&gt; is the object to use.</source>
          <target state="translated">主なメソッドは &lt;code&gt;cli.execute()&lt;/code&gt; で、コマンドラインオプションを表す文字列の配列を受け入れます（まるで、最初の2つの引数なしで &lt;code&gt;process.argv&lt;/code&gt; が渡されたかのように）。別のプログラムの内部からESLintを実行し、それをCLIのように動作させる場合、 &lt;code&gt;cli&lt;/code&gt; は使用するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="82c7fc418c96dfe485b72e97d5785c7b1f84d1d1" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;CLIEngine&lt;/code&gt; is &lt;code&gt;executeOnFiles()&lt;/code&gt;, which accepts an array of file and directory names to run the linter on.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; の主なメソッドは &lt;code&gt;executeOnFiles()&lt;/code&gt; です。これは、リンターを実行するファイルおよびディレクトリ名の配列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="aa5cd71ecca317561d0f3120437420e4eb266e86" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;Linter&lt;/code&gt; object is &lt;code&gt;verify()&lt;/code&gt; and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with &lt;code&gt;espree&lt;/code&gt; (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; オブジェクトのメインメソッドは &lt;code&gt;verify()&lt;/code&gt; であり、2つの引数を受け入れます。検証するソーステキストと構成オブジェクト（指定された構成ファイルのベイクされた構成とコマンドラインオプション）です。このメソッドは最初に、指定されたテキストを &lt;code&gt;espree&lt;/code&gt; （または構成済みのパーサーが何であれ）で解析し、ASTを取得します。ASTは、行/列と範囲の両方の場所で生成されます。これは、問題の場所のレポートとASTノードに関連するソーステキストの取得にそれぞれ役立ちます。</target>
        </trans-unit>
        <trans-unit id="b71267395abe4b458e8e16055642b9f1606731d6" translate="yes" xml:space="preserve">
          <source>The main method you'll use is &lt;code&gt;context.report()&lt;/code&gt;, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties:</source>
          <target state="translated">使用する主なメソッドは &lt;code&gt;context.report()&lt;/code&gt; で、警告またはエラーを発行します（使用されている構成によって異なります）。このメソッドは、次のプロパティを含むオブジェクトである単一の引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2aa043d4f97cda6b2c4e5a4d1829ce7593f304b2" translate="yes" xml:space="preserve">
          <source>The message summary should be a one-sentence description of the change, and it must be 72 characters in length or shorter. If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use &lt;code&gt;(refs #1234)&lt;/code&gt; instead of &lt;code&gt;(fixes #1234)&lt;/code&gt;.</source>
          <target state="translated">メッセージの要約は、変更を1文で説明したもので、長さは72文字以下である必要があります。プルリクエストが問題に対処する場合、問題番号を最後に記載する必要があります。コミットで問題が完全に解決しない場合は、 &lt;code&gt;(refs #1234)&lt;/code&gt; 代わりに &lt;code&gt;(fixes #1234)&lt;/code&gt; refs＃1234）を使用します。</target>
        </trans-unit>
        <trans-unit id="6fc4e5ab9c1873762f005496619a765f850f8b95" translate="yes" xml:space="preserve">
          <source>The method to convert the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to text.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;オブジェクトをテキストに変換するメソッド。</target>
        </trans-unit>
        <trans-unit id="447ba6b4ad05e52da0b122358fe9cf1656020fec" translate="yes" xml:space="preserve">
          <source>The modification does not depend on whether the object option is set to &lt;code&gt;true&lt;/code&gt;. In other words, ESLint never collects all the property specifications onto a single line, even when the object option would permit that.</source>
          <target state="translated">変更は、オブジェクトオプションが &lt;code&gt;true&lt;/code&gt; に設定されているかどうかには依存しません。つまり、ESLintは、オブジェクトオプションで許可されている場合でも、すべてのプロパティ仕様を1行に収集することはありません。</target>
        </trans-unit>
        <trans-unit id="928b12c02eeb60a25ebbe56b73b080bf2235439f" translate="yes" xml:space="preserve">
          <source>The modified source code text. This property is undefined if any fixable messages didn't exist.</source>
          <target state="translated">修正されたソースコードのテキスト。修正可能なメッセージが存在しなかった場合、このプロパティは未定義です。</target>
        </trans-unit>
        <trans-unit id="d8b8c078bf2e1f6851bd595f2c2f5cc6bbf13048" translate="yes" xml:space="preserve">
          <source>The module name can also be customized, just note that when using &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped modules&lt;/a&gt; it is not possible to omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix. Doing so would result in package naming conflicts, and thus in resolution errors in most of cases. For example a package named &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; vs &lt;code&gt;@scope/my-config&lt;/code&gt;, since both are valid scoped package names, the configuration should be specified as:</source>
          <target state="translated">モジュール名もカスタマイズでき&lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;ます。スコープモジュール&lt;/a&gt;を使用する場合は、 &lt;code&gt;eslint-config-&lt;/code&gt; プレフィックスを省略できないことに注意してください。これを行うと、パッケージの名前が競合し、ほとんどの場合、解決エラーが発生します。たとえば、 &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; と &lt;code&gt;@scope/my-config&lt;/code&gt; という名前のパッケージの場合、どちらも有効なスコープパッケージ名であるため、構成は次のように指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="391d507111f772a5e622a4978aa02bebdf000901" translate="yes" xml:space="preserve">
          <source>The most important difference in v1.0.0 is that all rules are off by default. We made this change after numerous requests to allow turning off the default rules from within configuration files. While that wasn't technically feasible, it was feasible to have all rules off by default and then re-enable rules in configuration files using &lt;code&gt;extends&lt;/code&gt;. As such, we've made the &lt;code&gt;--reset&lt;/code&gt; behavior the default and removed this command line option.</source>
          <target state="translated">v1.0.0の最も重要な違いは、すべてのルールがデフォルトでオフになっていることです。この変更は、構成ファイル内からデフォルトルールをオフにできるようにするための多数のリクエストの後に行われました。これは技術的に実現可能ではありませんでしたが、デフォルトですべてのルールをオフにしてから、 &lt;code&gt;extends&lt;/code&gt; を使用して設定ファイルでルールを再度有効にすることも可能でした。そのため、 &lt;code&gt;--reset&lt;/code&gt; 動作をデフォルトにして、このコマンドラインオプションを削除しました。</target>
        </trans-unit>
        <trans-unit id="2981f174eb319000ec7b9dc71dff618ba3924b94" translate="yes" xml:space="preserve">
          <source>The most important method on &lt;code&gt;Linter&lt;/code&gt; is &lt;code&gt;verify()&lt;/code&gt;, which initiates linting of the given text. This method accepts three arguments:</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; で最も重要なメソッドは &lt;code&gt;verify()&lt;/code&gt; です。これは、指定されたテキストのリンティングを開始します。このメソッドは3つの引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2d9309f4804540bc446c7db5a5a0e204ff20ebd8" translate="yes" xml:space="preserve">
          <source>The name of the function starts with uppercase.</source>
          <target state="translated">関数名は大文字から始まります。</target>
        </trans-unit>
        <trans-unit id="c187d7bc3b11447dcbf3b003402ff51671b83ee4" translate="yes" xml:space="preserve">
          <source>The name of the rule (string)</source>
          <target state="translated">ルールの名前(文字列</target>
        </trans-unit>
        <trans-unit id="3d05f85495e18f50c10102d3389fcbc9d5973e21" translate="yes" xml:space="preserve">
          <source>The names &lt;code&gt;&quot;semi&quot;&lt;/code&gt; and &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; are the names of &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules&lt;/a&gt; in ESLint. The first value is the error level of the rule and can be one of these values:</source>
          <target state="translated">名称 &lt;code&gt;&quot;semi&quot;&lt;/code&gt; と &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; の名で&lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;ルール&lt;/a&gt; ESLintインチ 最初の値はルールのエラーレベルで、次のいずれかの値になります。</target>
        </trans-unit>
        <trans-unit id="03f1e3c6076e63d911680ce1f195f2b2861a99e5" translate="yes" xml:space="preserve">
          <source>The next line starts with &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, or some other binary operator that can only be found between two tokens in a single expression.</source>
          <target state="translated">次の行で始まる &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、、 &lt;code&gt;,&lt;/code&gt; 。 &lt;code&gt;.&lt;/code&gt; または単一の式で2つのトークンの間に見つけることができるいくつかの他のバイナリ演算子。</target>
        </trans-unit>
        <trans-unit id="ed3de168e4acf1680325d171a28dd7b74b024412" translate="yes" xml:space="preserve">
          <source>The next line(s) have a &lt;code&gt;*&lt;/code&gt; aligned with the &lt;code&gt;*&lt;/code&gt; in the first line. Text is allowed on these lines.</source>
          <target state="translated">次の行（複数可）は &lt;code&gt;*&lt;/code&gt; と整列 &lt;code&gt;*&lt;/code&gt; 最初の行です。これらの行にはテキストを入力できます。</target>
        </trans-unit>
        <trans-unit id="00194fc1917a102824f66484638b388a032a7482" translate="yes" xml:space="preserve">
          <source>The node contains all of the information necessary to figure out the line and column number of the offending text as well the source text representing the node.</source>
          <target state="translated">ノードには、そのノードを表すソーステキストだけでなく、違反テキストの行番号と列番号を把握するために必要なすべての情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="b4ed3f78adad10420e57b7e0edb1eca371c23d68" translate="yes" xml:space="preserve">
          <source>The number of errors that can be fixed automatically by the &lt;code&gt;fix&lt;/code&gt; constructor option.</source>
          <target state="translated">コンストラクターの &lt;code&gt;fix&lt;/code&gt; オプションによって自動的に修正できるエラーの数。</target>
        </trans-unit>
        <trans-unit id="6d50e11c18c94c2f0420745923f450c9aeb9f0a2" translate="yes" xml:space="preserve">
          <source>The number of errors. This includes fixable errors.</source>
          <target state="translated">エラーの数です。これには修正可能なエラーも含まれます。</target>
        </trans-unit>
        <trans-unit id="ba2a30d0b9505f420e855f975645b4c8a258575c" translate="yes" xml:space="preserve">
          <source>The number of warnings that can be fixed automatically by the &lt;code&gt;fix&lt;/code&gt; constructor option.</source>
          <target state="translated">コンストラクターの &lt;code&gt;fix&lt;/code&gt; オプションによって自動的に修正できる警告の数。</target>
        </trans-unit>
        <trans-unit id="91ed0bffbaeedc91108fa8391d7c91ea93e12b94" translate="yes" xml:space="preserve">
          <source>The number of warnings. This includes fixable warnings.</source>
          <target state="translated">警告の数。これには固定可能な警告も含まれます。</target>
        </trans-unit>
        <trans-unit id="d45e635828bcb31db112256ea444b8c6bf3fd18e" translate="yes" xml:space="preserve">
          <source>The only acceptable time to have multiple single-line comments on successive lines is to comment out large sections of code. Multi-line comments should not be used for this purpose.</source>
          <target state="translated">連続した行に複数の一行コメントをつけることが許されるのは、コードの大きなセクションをコメントアウトするときだけです。複数行コメントはこの目的には使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6a644e143491953839301b85bb8b200e474de5ab" translate="yes" xml:space="preserve">
          <source>The only time you would compare a variable against itself is when you are testing for &lt;code&gt;NaN&lt;/code&gt;. However, it is far more appropriate to use &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015 function&lt;/a&gt; for that use case rather than leaving the reader of the code to determine the intent of self comparison.</source>
          <target state="translated">変数をそれ自体と比較するのは、 &lt;code&gt;NaN&lt;/code&gt; をテストするときだけです。ただし、コードのリーダーを離れて自己比較の目的を決定するよりも、そのユースケースでは &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015関数&lt;/a&gt;を使用する方がはるかに適切です。</target>
        </trans-unit>
        <trans-unit id="fae2f2bc90a52f0d6909f6ceb19aaafac0a26360" translate="yes" xml:space="preserve">
          <source>The opening brace should be at the end of the line that begins the compound statement; the closing brace should begin a line and be indented to the beginning of the compound statement.</source>
          <target state="translated">開始波括弧は複合文を開始する行の末尾に、終了波括弧は行を開始し、複合文の先頭にインデントされている必要があります。</target>
        </trans-unit>
        <trans-unit id="abfabb83ce95a74f0937675f7094af1e6695a2c0" translate="yes" xml:space="preserve">
          <source>The opening brace should be on the same line as the containing statement.</source>
          <target state="translated">開始波括弧は、含まれる文と同じ行にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9b551f3ef4076d91cd7f96a1f41ae4787a40977" translate="yes" xml:space="preserve">
          <source>The option also has a string shorthand:</source>
          <target state="translated">このオプションには文字列の短縮形もあります。</target>
        </trans-unit>
        <trans-unit id="49d9e0bb541ca2b3e87c88ba870eb3e86a03122a" translate="yes" xml:space="preserve">
          <source>The optional chaining (&lt;code&gt;?.&lt;/code&gt;) expression can short-circuit with a return value of &lt;code&gt;undefined&lt;/code&gt;. Therefore, treating an evaluated optional chaining expression as a function, object, number, etc., can cause TypeError or unexpected results. For example:</source>
          <target state="translated">オプションの連鎖（ &lt;code&gt;?.&lt;/code&gt; ）式は、 &lt;code&gt;undefined&lt;/code&gt; 戻り値で短絡する可能性があります。したがって、評価されたオプションの連鎖式を関数、オブジェクト、数値などとして扱うと、TypeErrorまたは予期しない結果が発生する可能性があります。例えば：</target>
        </trans-unit>
        <trans-unit id="de7031af6085176060b0ac36063990d91e8f177b" translate="yes" xml:space="preserve">
          <source>The optional exception does not excuse this case, because the entire collection of property specifications spans 4 lines, not 1.</source>
          <target state="translated">プロパティの仕様書のコレクション全体が1行ではなく4行にまたがっているため、オプションの例外はこのケースを言い訳にしていません。</target>
        </trans-unit>
        <trans-unit id="dcedceca0a5fbd9f7abfd655550b7f46c22973d8" translate="yes" xml:space="preserve">
          <source>The options allow labels with loop or switch statements:</source>
          <target state="translated">オプションでは、ループ文やスイッチ文を含むラベルを許可しています。</target>
        </trans-unit>
        <trans-unit id="cf49b44308f034d8aba18fe071fc2b7ec04bd224" translate="yes" xml:space="preserve">
          <source>The options available and the expected syntax for &lt;code&gt;parserOptions&lt;/code&gt; is the same as those used in &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">使用可能なオプションと &lt;code&gt;parserOptions&lt;/code&gt; に期待される構文は、&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;構成で&lt;/a&gt;使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="c4af5a293dd844cadf7c1778b14e98c1b7daf5ee" translate="yes" xml:space="preserve">
          <source>The original source code text. This property is undefined if any messages didn't exist or the &lt;code&gt;output&lt;/code&gt; property exists.</source>
          <target state="translated">元のソースコードテキスト。メッセージが存在しない場合、または &lt;code&gt;output&lt;/code&gt; プロパティが存在する場合、このプロパティは未定義です。</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">出力されるのは</target>
        </trans-unit>
        <trans-unit id="f4dc89186e373e825b6dfa59c8110b3946aeee21" translate="yes" xml:space="preserve">
          <source>The output would be:</source>
          <target state="translated">出力されるのは</target>
        </trans-unit>
        <trans-unit id="c021a3a657e4f53d4e449ea1c6f0c78f48d2adfc" translate="yes" xml:space="preserve">
          <source>The pair of 0-based indices in source code text to remove.</source>
          <target state="translated">削除するソースコードテキストの0ベースのインデックスのペア。</target>
        </trans-unit>
        <trans-unit id="046ede3288f3c1cadbd2cfefc7b488c9fd37084c" translate="yes" xml:space="preserve">
          <source>The path to the file whose configuration you would like to calculate. Directory paths are forbidden because ESLint cannot handle the &lt;code&gt;overrides&lt;/code&gt; setting.</source>
          <target state="translated">構成を計算するファイルへのパス。ESLintは &lt;code&gt;overrides&lt;/code&gt; 設定を処理できないため、ディレクトリパスは禁止されています。</target>
        </trans-unit>
        <trans-unit id="0831c2dd23b6e63812d13e269c384cd1d40181e7" translate="yes" xml:space="preserve">
          <source>The path to the file you want to check.</source>
          <target state="translated">チェックしたいファイルのパス。</target>
        </trans-unit>
        <trans-unit id="cd939e136292c4dcd7638cc19ed24250e2872fad" translate="yes" xml:space="preserve">
          <source>The path to the file you want to check. The following values are allowed:</source>
          <target state="translated">チェックしたいファイルへのパスです。以下の値が許可されています。</target>
        </trans-unit>
        <trans-unit id="9789ff50f50df37207f7264a43f1a689f0688f0a" translate="yes" xml:space="preserve">
          <source>The patterns are applied against the file path relative to the directory of the config file. For example, if your config file has the path &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; and the file you want to lint has the path &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt;, then the pattern provided in &lt;code&gt;.eslintrc.js&lt;/code&gt; will be executed against the relative path &lt;code&gt;lib/util.js&lt;/code&gt;.</source>
          <target state="translated">パターンは、設定ファイルのディレクトリを基準にしたファイルパスに対して適用されます。たとえば、設定ファイルのパスが &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; で、lintするファイルのパスが &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt; 場合、 &lt;code&gt;.eslintrc.js&lt;/code&gt; で提供されるパターンは、相対パス &lt;code&gt;lib/util.js&lt;/code&gt; に対して実行されます。</target>
        </trans-unit>
        <trans-unit id="d7c7d55489a5efe043679a245ed2e68741b450b6" translate="yes" xml:space="preserve">
          <source>The pitfalls of using objects as maps in JavaScript</source>
          <target state="translated">JavaScriptでオブジェクトをマップとして使うことの落とし穴</target>
        </trans-unit>
        <trans-unit id="708371015401d250d46270e090e4dfae9df78014" translate="yes" xml:space="preserve">
          <source>The place where ESLint loads plugins from is changed</source>
          <target state="translated">ESLintがプラグインをロードする場所を変更しました。</target>
        </trans-unit>
        <trans-unit id="05157eccd9a4d06e6ff4c2778c2a6f7b853c19e7" translate="yes" xml:space="preserve">
          <source>The prefer-reflect rule will flag usage of any older method, suggesting to instead use the newer Reflect version.</source>
          <target state="translated">prefer-reflect ルールは、古いメソッドの使用にフラグを立て、代わりに新しい Reflect のバージョンを使用することを提案します。</target>
        </trans-unit>
        <trans-unit id="019176c59859ffc7e6915010bb0d29fc4116cb11" translate="yes" xml:space="preserve">
          <source>The primary Node.js API is &lt;code&gt;CLIEngine&lt;/code&gt;, which is the underlying utility that runs the ESLint command line interface. This object will read the filesystem for configuration and file information but will not output any results. Instead, it allows you direct access to the important information so you can deal with the output yourself.</source>
          <target state="translated">主要なNode.js APIは &lt;code&gt;CLIEngine&lt;/code&gt; です。これは、ESLintコマンドラインインターフェースを実行する基本的なユーティリティです。このオブジェクトは、構成とファイル情報についてファイルシステムを読み取りますが、結果を出力しません。代わりに、重要な情報に直接アクセスできるため、出力を自分で処理できます。</target>
        </trans-unit>
        <trans-unit id="c476b276186c6fb97acc415f8441c0d6359f3d36" translate="yes" xml:space="preserve">
          <source>The primary difference between &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function expressions&lt;/code&gt; is that declarations are &lt;em&gt;hoisted&lt;/em&gt; to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 宣言と &lt;code&gt;function expressions&lt;/code&gt; の主な違いは、宣言はそれらが定義されているスコープの最上位に&lt;em&gt;引き上げ&lt;/em&gt;られるため、宣言の前に関数を使用するコードを記述できることです。例えば：</target>
        </trans-unit>
        <trans-unit id="cc5cca2ea790657770c377a55c8c2c9d38976e25" translate="yes" xml:space="preserve">
          <source>The primary reason to use asynchronous functions is typically to use the &lt;code&gt;await&lt;/code&gt; operator, such as this:</source>
          <target state="translated">非同期関数を使用する主な理由は、通常、次のような &lt;code&gt;await&lt;/code&gt; 演算子を使用するためです。</target>
        </trans-unit>
        <trans-unit id="27f63a6807abd8b3bd2aa20888273f48ea3fa67c" translate="yes" xml:space="preserve">
          <source>The primary script to use is &lt;code&gt;npm test&lt;/code&gt;, which does several things:</source>
          <target state="translated">使用する主要なスクリプトは &lt;code&gt;npm test&lt;/code&gt; で、いくつかのことを行います。</target>
        </trans-unit>
        <trans-unit id="88571aeb3633660582e146f8ca69889ac98fb83d" translate="yes" xml:space="preserve">
          <source>The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements. It helps the code to look consistent across the entire project.</source>
          <target state="translated">問題は、これらの開発者がプロ​​ジェクトで一緒に作業する場合です。このルールは、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;const&lt;/code&gt; ステートメントの後に空の改行が許可または禁止されるコーディングスタイルを適用します。これにより、コードがプロジェクト全体で一貫して見えるようになります。</target>
        </trans-unit>
        <trans-unit id="c7abf9c98248c9d5e551542e1f7cf64b22ee6b71" translate="yes" xml:space="preserve">
          <source>The problem you want to solve.</source>
          <target state="translated">あなたが解決したい問題</target>
        </trans-unit>
        <trans-unit id="fbe43fced48ce154fc594e0d7efd5a4fe22b0e58" translate="yes" xml:space="preserve">
          <source>The process of submitting a pull request is fairly straightforward and generally follows the same pattern each time:</source>
          <target state="translated">プルリクエストを提出するプロセスはかなり簡単で、一般的には毎回同じパターンに従います。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
