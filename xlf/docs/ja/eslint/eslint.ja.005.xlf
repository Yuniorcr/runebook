<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="546fa02adabca3448dcb8a362469072d1db5cf13" translate="yes" xml:space="preserve">
          <source>Removed Rules</source>
          <target state="translated">削除されたルール</target>
        </trans-unit>
        <trans-unit id="9e30b455061dff243e207fa18925b8c54a0ca2ad" translate="yes" xml:space="preserve">
          <source>Removed rule</source>
          <target state="translated">ルールの削除</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="8ada39071f07cad84f271436e272e3f53d42073a" translate="yes" xml:space="preserve">
          <source>Report Unused &lt;code&gt;eslint-disable&lt;/code&gt; Comments</source>
          <target state="translated">未使用の &lt;code&gt;eslint-disable&lt;/code&gt; コメントを報告する</target>
        </trans-unit>
        <trans-unit id="a5bb62e8d7d2cc84df075be591e2610b579c891d" translate="yes" xml:space="preserve">
          <source>Reported problems have the following location information:</source>
          <target state="translated">報告された問題は、以下の位置情報を持っています。</target>
        </trans-unit>
        <trans-unit id="2c54bc0da768d4c877c77485784187863c28ad3c" translate="yes" xml:space="preserve">
          <source>Reporting Bugs</source>
          <target state="translated">バグの報告</target>
        </trans-unit>
        <trans-unit id="e73f2c6a276df317f0e8251b594b9c3a7772ea2d" translate="yes" xml:space="preserve">
          <source>Reporting a security vulnerability</source>
          <target state="translated">セキュリティ上の脆弱性を報告</target>
        </trans-unit>
        <trans-unit id="4ba09f6e2cd39c11132e45ba62fe27e6d6484469" translate="yes" xml:space="preserve">
          <source>Reporting back the results of the execution</source>
          <target state="translated">実行結果の報告</target>
        </trans-unit>
        <trans-unit id="7fb8531d32f9fc2cf4e7e644d67cb16c9b2b084a" translate="yes" xml:space="preserve">
          <source>Reporting warnings when certain patterns are found</source>
          <target state="translated">特定のパターンが見つかった場合の警告の報告</target>
        </trans-unit>
        <trans-unit id="924d4980aa5047bdf606a251026020006a83efbe" translate="yes" xml:space="preserve">
          <source>Requesting a &lt;a href=&quot;changes&quot;&gt;Change&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;changes&quot;&gt;変更を&lt;/a&gt;リクエストする</target>
        </trans-unit>
        <trans-unit id="9670695fdbad92ea104f8e7230b9955bfb27da6e" translate="yes" xml:space="preserve">
          <source>Require === and !== (eqeqeq)</source>
          <target state="translated">必要なもの ===and !==(eqeqeq)</target>
        </trans-unit>
        <trans-unit id="c9f4e2dc2e937fe6aab7b4d4c5b9b14070f93f68" translate="yes" xml:space="preserve">
          <source>Require Brace Style (brace-style)</source>
          <target state="translated">必要なブレーススタイル(ブレーススタイル</target>
        </trans-unit>
        <trans-unit id="29f8a3517efa09985e94aaa3daa4acd42449e8f9" translate="yes" xml:space="preserve">
          <source>Require CamelCase (camelcase)</source>
          <target state="translated">キャメルケース(キャメルケース)を必要とする</target>
        </trans-unit>
        <trans-unit id="e6c502a34157a55662fdb96c649dfac3dca1c26c" translate="yes" xml:space="preserve">
          <source>Require Consistent This (consistent-this)</source>
          <target state="translated">一貫性のあるこれを要求する</target>
        </trans-unit>
        <trans-unit id="32bfc48d08ec21670f3f949a648100cdfb446f0d" translate="yes" xml:space="preserve">
          <source>Require Default Case in Switch Statements (default-case)</source>
          <target state="translated">スイッチ文でデフォルトの大文字小文字を要求する (default-case)</target>
        </trans-unit>
        <trans-unit id="c4bf33ba1bc063ecb08ea78c74d6e52247e78f9e" translate="yes" xml:space="preserve">
          <source>Require Dot Notation (dot-notation)</source>
          <target state="translated">必要なドット記法</target>
        </trans-unit>
        <trans-unit id="a3af1a645caf25364b15e6b49f5552b803adff40" translate="yes" xml:space="preserve">
          <source>Require Following Curly Brace Conventions (curly)</source>
          <target state="translated">カーリーブレースの規則に従うことを要求する(カーリー</target>
        </trans-unit>
        <trans-unit id="11631863fa9bc606f91797315db692789e0485a5" translate="yes" xml:space="preserve">
          <source>Require Guarding for-in (guard-for-in)</source>
          <target state="translated">要求ガードフォーイン(ガードフォーイン</target>
        </trans-unit>
        <trans-unit id="ad26fbff7070e7dd41742c51df353b22c939a838" translate="yes" xml:space="preserve">
          <source>Require IIFEs to be Wrapped (wrap-iife)</source>
          <target state="translated">IIFEにラッピングを求める(ラップアイフ</target>
        </trans-unit>
        <trans-unit id="eedd486c2cd16ec02fb12f728bf82116a2f3dc18" translate="yes" xml:space="preserve">
          <source>Require Object Literal Shorthand Syntax (object-shorthand)</source>
          <target state="translated">要求オブジェクトリテラル短縮構文</target>
        </trans-unit>
        <trans-unit id="0f941f716fc3ec6b74fefe19704d5a768596d353" translate="yes" xml:space="preserve">
          <source>Require Or Disallow Space Before Blocks (space-before-blocks)</source>
          <target state="translated">ブロックの前のスペースを必要とするか否か (スペース-ブロックの前のスペースを必要とするか否か)</target>
        </trans-unit>
        <trans-unit id="ba41a13b01bc7714d82241f45ba769d95682a9b8" translate="yes" xml:space="preserve">
          <source>Require Radix Parameter (radix)</source>
          <target state="translated">必要な Radix パラメータ (radix)</target>
        </trans-unit>
        <trans-unit id="4649036a73fddd6b7bf8df27f93ba7f530bd0494" translate="yes" xml:space="preserve">
          <source>Require Regex Literals to be Wrapped (wrap-regex)</source>
          <target state="translated">Regex リテラルがラップされることを要求する (wrap-regex)</target>
        </trans-unit>
        <trans-unit id="7b4e071d32a73a0c6741662339d8cb1bea0829d1" translate="yes" xml:space="preserve">
          <source>Require Variable Declarations to be at the top of their scope (vars-on-top)</source>
          <target state="translated">変数宣言がスコープの先頭にあることを要求する (vars-on-top)</target>
        </trans-unit>
        <trans-unit id="c6b80ff02932afc7cc099abcdbfedd2d3d1808fb" translate="yes" xml:space="preserve">
          <source>Require braces in arrow function body (arrow-body-style)</source>
          <target state="translated">矢印関数の本体に中括弧を必要とする(矢印ボディスタイル)。</target>
        </trans-unit>
        <trans-unit id="5f98bbcd6bc31019c27bf6149a981097646acd25" translate="yes" xml:space="preserve">
          <source>Require grouped accessor pairs in object literals and classes (grouped-accessor-pairs)</source>
          <target state="translated">オブジェクトリテラルとクラスでグループ化されたアクセサペアを要求する (grouped-accessor-pairs)</target>
        </trans-unit>
        <trans-unit id="be3fbbc21cd8535fe4650e22a2253265af6b017c" translate="yes" xml:space="preserve">
          <source>Require or disallow Yoda Conditions (yoda)</source>
          <target state="translated">ヨーダの条件を要求する・しない(ヨーダ)</target>
        </trans-unit>
        <trans-unit id="3150215ce32a56ca1cf1f6ef2c30ca41b3749bd6" translate="yes" xml:space="preserve">
          <source>Require or disallow a space before function parenthesis (space-before-function-paren)</source>
          <target state="translated">関数括弧の前にスペースを要求するか否か (space-before-function-paren)</target>
        </trans-unit>
        <trans-unit id="5b30f13883fdda696fb76a56e4bd8aac05c52c33" translate="yes" xml:space="preserve">
          <source>Require or disallow named &lt;code&gt;function&lt;/code&gt; expressions (func-names)</source>
          <target state="translated">名前 &lt;code&gt;function&lt;/code&gt; 式（関数名）を要求または禁止する</target>
        </trans-unit>
        <trans-unit id="6923954808ca2c5768d91fe26208484172008328" translate="yes" xml:space="preserve">
          <source>Require or disallow padding lines between statements (padding-line-between-statements)</source>
          <target state="translated">ステートメント間のパディング行を要求するか否か (padding-line-between-statements)</target>
        </trans-unit>
        <trans-unit id="64d620bf8940dde332be8b599fc3f3b67a15d6b1" translate="yes" xml:space="preserve">
          <source>Require or disallow spaces before/after unary operators (space-unary-ops)</source>
          <target state="translated">単項演算子(スペース-単項演算子)の前後にスペースを必要とするか否か。</target>
        </trans-unit>
        <trans-unit id="2e4ed016a312c06b04085359a4f3ce7e5514db8a" translate="yes" xml:space="preserve">
          <source>Require or disallow spacing between template tags and their literals (template-tag-spacing)</source>
          <target state="translated">テンプレートタグとそのリテラルの間の間隔を要求するか否か (template-tag-spacing)</target>
        </trans-unit>
        <trans-unit id="9a6d4f3d8ac0a43fa465b1bfeb17312af22eec9d" translate="yes" xml:space="preserve">
          <source>Require or disallow the Unicode Byte Order Mark (BOM) (unicode-bom)</source>
          <target state="translated">ユニコード・バイト・オーダー・マーク(BOM)(unicode-bom)を要求するか否か。</target>
        </trans-unit>
        <trans-unit id="5414253a02d05bc00109d790a3a30b0adf3a9258" translate="yes" xml:space="preserve">
          <source>Require parens in arrow function arguments (arrow-parens)</source>
          <target state="translated">矢印関数の引数にパーレンを要求する(arrow-parens</target>
        </trans-unit>
        <trans-unit id="6c6d01b7d910c82fc9e7e87b504603648dc910c7" translate="yes" xml:space="preserve">
          <source>Require regex literals to escape division operators.</source>
          <target state="translated">除算演算子をエスケープするために正規表現リテラルを必要とする。</target>
        </trans-unit>
        <trans-unit id="c6c78079204bca77a98f474edfbb061ab779251e" translate="yes" xml:space="preserve">
          <source>Require space before/after arrow function's arrow (arrow-spacing)</source>
          <target state="translated">矢印関数の矢印の前後にスペースを必要とする(矢印間隔)</target>
        </trans-unit>
        <trans-unit id="3d1e419b6e19b50c4107c427e372b159f6aa3f96" translate="yes" xml:space="preserve">
          <source>Require spaces following &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, and &lt;code&gt;case&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; の後にスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="2aa899302df0644585abff63972bace73e121583" translate="yes" xml:space="preserve">
          <source>Require spaces following unary word operators.</source>
          <target state="translated">単項演算子の後にスペースを必要とします。</target>
        </trans-unit>
        <trans-unit id="72a6e138634f7c51472518cc96850ccfd3e29b3f" translate="yes" xml:space="preserve">
          <source>Require using arrow functions for callbacks (prefer-arrow-callback)</source>
          <target state="translated">コールバックに矢印関数を使用することを必須とします。</target>
        </trans-unit>
        <trans-unit id="1d4909a86e26429441b20437aa655cdf89900831" translate="yes" xml:space="preserve">
          <source>Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)</source>
          <target state="translated">コメント (スペース付きコメント)の最初に空白 (スペースまたはタブ)を必要とするかどうか。</target>
        </trans-unit>
        <trans-unit id="76af06a553a0453a9044a446da55d272ab01d8fe" translate="yes" xml:space="preserve">
          <source>Requires that every file have a top-level &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statement.</source>
          <target state="translated">すべてのファイルに最上位の &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ステートメントが必要です。</target>
        </trans-unit>
        <trans-unit id="e58d216d4c343337c98dbf82f961ebd1b1a6fd84" translate="yes" xml:space="preserve">
          <source>Requiring Configuration to Run</source>
          <target state="translated">実行するための設定が必要</target>
        </trans-unit>
        <trans-unit id="a190ae07585f55210601db70caeb73d10cf5a08d" translate="yes" xml:space="preserve">
          <source>Reserved words as property names</source>
          <target state="translated">プロパティ名としての予約語</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="787f008daf743bf86dcef2a2f647bc232a0260e8" translate="yes" xml:space="preserve">
          <source>Respond to comments left on the pull request from team members. Remember, we want to help you land your code, so please be receptive to our feedback.</source>
          <target state="translated">チームメンバーからのプルリクエストに残されたコメントに反応してください。私たちはあなたのコードを着地させる手助けをしたいと考えていますので、私たちのフィードバックを受け止めてください。</target>
        </trans-unit>
        <trans-unit id="5e8db4f15f13d726195782f734cfad7c22163767" translate="yes" xml:space="preserve">
          <source>Restrict what can be thrown as an exception (no-throw-literal)</source>
          <target state="translated">例外として投げられるものを制限する (スローリテラルではない)</target>
        </trans-unit>
        <trans-unit id="d0dfe217a11c007cdb80ffac3d869a5f9a91d024" translate="yes" xml:space="preserve">
          <source>Restricting syntax with selectors</source>
          <target state="translated">セレクタで構文を制限する</target>
        </trans-unit>
        <trans-unit id="0cde1762953d450159956d185082cff8d76cd6b3" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="translated">結果の実際の構成： &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="637d7bf830d8b7c31d75616f1f6184a3ad69451f" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</source>
          <target state="translated">結果の実際の構成： &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b969c8dc0ad380e6594b1beedc5370d8f8a5d756" translate="yes" xml:space="preserve">
          <source>Retrieves a formatter, which you can then use to format a report object. The argument is either the name of a built-in formatter:</source>
          <target state="translated">フォーマッタを取得し、それを使用してレポートオブジェクトをフォーマットすることができます。引数には、組み込みのフォーマッタの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="426dd4f5734405b3041af3bb0cf97c4f743e8aa6" translate="yes" xml:space="preserve">
          <source>Returning the correct exit code</source>
          <target state="translated">正しい終了コードを返す</target>
        </trans-unit>
        <trans-unit id="a8af8ce64c5e78a1bab5c7411bdc15d47c7d3cee" translate="yes" xml:space="preserve">
          <source>Rollup: &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</source>
          <target state="translated">ロールアップ：&lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee3c4356687403593882e1c450ecd5fa91ef9176" translate="yes" xml:space="preserve">
          <source>Rule Acceptance Criteria</source>
          <target state="translated">ルールの受け入れ基準</target>
        </trans-unit>
        <trans-unit id="4fea3171fe249e115dde51b612942d51ff597112" translate="yes" xml:space="preserve">
          <source>Rule Basics</source>
          <target state="translated">ルールの基本</target>
        </trans-unit>
        <trans-unit id="58f4d8dcadb0bda6b1de9bc0a5d352f60cf07234" translate="yes" xml:space="preserve">
          <source>Rule Changes</source>
          <target state="translated">ルールの変更</target>
        </trans-unit>
        <trans-unit id="7fd1351f99409305b16b0a09a4498bd284b5d93e" translate="yes" xml:space="preserve">
          <source>Rule Deprecation</source>
          <target state="translated">ルール非推奨</target>
        </trans-unit>
        <trans-unit id="2f74fe952a58aefbda52fe4dd186b37f5595f912" translate="yes" xml:space="preserve">
          <source>Rule Details</source>
          <target state="translated">ルールの詳細</target>
        </trans-unit>
        <trans-unit id="a6cbaaefbab1ddfd94efe95cec74c44f36be693f" translate="yes" xml:space="preserve">
          <source>Rule Naming Conventions</source>
          <target state="translated">ルールの命名規則</target>
        </trans-unit>
        <trans-unit id="3183951c7dd470388a3c3557d1a5436eae05d87f" translate="yes" xml:space="preserve">
          <source>Rule Schema Changes</source>
          <target state="translated">ルールスキーマの変更</target>
        </trans-unit>
        <trans-unit id="793bcb95f3d538bb319a28344fffc4123fe887c4" translate="yes" xml:space="preserve">
          <source>Rule Unit Tests</source>
          <target state="translated">ルールユニットテスト</target>
        </trans-unit>
        <trans-unit id="ebc497fdd0042b59fbb043aa6dad9e62ad6aaedd" translate="yes" xml:space="preserve">
          <source>Rule configuration are validated more strictly</source>
          <target state="translated">ルール設定の検証はより厳密に</target>
        </trans-unit>
        <trans-unit id="b423a892d42c8b952873772e3d160731bd071f84" translate="yes" xml:space="preserve">
          <source>Rule source</source>
          <target state="translated">ルールソース</target>
        </trans-unit>
        <trans-unit id="c79090f879452ce67b81c8904f848b8ac0346c07" translate="yes" xml:space="preserve">
          <source>Rule to disallow a duplicate case label (no-duplicate-case)</source>
          <target state="translated">重複した大文字小文字のラベルを許可しないルール (重複しない大文字小文字)</target>
        </trans-unit>
        <trans-unit id="a6dc24b3b766471c01f26defe2df961bd51fa80c" translate="yes" xml:space="preserve">
          <source>RuleTester</source>
          <target state="translated">RuleTester</target>
        </trans-unit>
        <trans-unit id="bb11a8e3f8712e36e7cd9d1c615a4e3dbb03336a" translate="yes" xml:space="preserve">
          <source>Rules</source>
          <target state="translated">Rules</target>
        </trans-unit>
        <trans-unit id="8af516527308d5f596f472b28e50707a3c2ec990" translate="yes" xml:space="preserve">
          <source>Rules are now required to provide messages along with reports</source>
          <target state="translated">レポートと一緒にメッセージを提供することが求められるようになりました。</target>
        </trans-unit>
        <trans-unit id="c130e2f455ef978067c1ba9937f4a4b55ad9b4d6" translate="yes" xml:space="preserve">
          <source>Rules in ESLint are grouped by category to help you understand their purpose.</source>
          <target state="translated">ESLintのルールはカテゴリーごとにグループ化されており、目的を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a375a11830a6fc15a9c077874fa2553a5e211c2a" translate="yes" xml:space="preserve">
          <source>Rules in Plugins</source>
          <target state="translated">プラグインのルール</target>
        </trans-unit>
        <trans-unit id="6012963a27096009406f4a3e3efbeb71a5dd3e0c" translate="yes" xml:space="preserve">
          <source>Rules like &lt;a href=&quot;../rules/max-len&quot;&gt;&lt;code&gt;max-len&lt;/code&gt;&lt;/a&gt; accept a string option which is interpreted as a regular expression. In ESLint v6.0.0, these regular expressions are interpreted with the &lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode flag&lt;/a&gt;, which should exhibit more reasonable behavior when matching characters like astral symbols. Unicode regexes also validate escape sequences more strictly than non-unicode regexes.</source>
          <target state="translated">&lt;a href=&quot;../rules/max-len&quot;&gt; &lt;code&gt;max-len&lt;/code&gt; の&lt;/a&gt;ようなルールは、正規表現として解釈される文字列オプションを受け入れます。ESLint v6.0.0では、これらの正規表現は&lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicodeフラグ&lt;/a&gt;で解釈されます。これにより、アストラルシンボルなどの文字を照合するときに、より合理的な動作が示されます。Unicode正規表現は、非Unicode正規表現よりも厳密にエスケープシーケンスを検証します。</target>
        </trans-unit>
        <trans-unit id="ce446a008739b0122bfbf913623e68d18926810d" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="translated">ルールは &lt;code&gt;schema&lt;/code&gt; プロパティをエクスポートする場合があります。これは、ESLintが構成オプションを検証し、 &lt;code&gt;context.options&lt;/code&gt; でルールに渡される前に無効または予期しない入力を防ぐために使用されるルールのオプションの&lt;a href=&quot;http://json-schema.org/&quot;&gt;JSONスキーマ&lt;/a&gt;形式の説明です。</target>
        </trans-unit>
        <trans-unit id="93c2759fe03a902a67d153b036b0d4f1c07d1f3c" translate="yes" xml:space="preserve">
          <source>Rules will be deprecated as needed, and marked as such in all documentation.</source>
          <target state="translated">ルールは必要に応じて非推奨とし、すべてのドキュメントにそのようにマークします。</target>
        </trans-unit>
        <trans-unit id="e93f0f77000adc61fb508077599d138239b58cd6" translate="yes" xml:space="preserve">
          <source>Rules will never be removed from ESLint.</source>
          <target state="translated">ルールがESLintから削除されることはありません。</target>
        </trans-unit>
        <trans-unit id="3d27ff71d65030f0e00381932a052d2a17b92776" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;command line interface&lt;/a&gt; using the &lt;code&gt;--rulesdir&lt;/code&gt; option to specify the location of your runtime rules.</source>
          <target state="translated">&lt;code&gt;--rulesdir&lt;/code&gt; オプションを使用して&lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;コマンドラインインターフェース&lt;/a&gt;を実行し、ランタイムルールの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="95227c2b581e8476ae8110dc2d62c41753abc92b" translate="yes" xml:space="preserve">
          <source>Run the tests</source>
          <target state="translated">テストの実行</target>
        </trans-unit>
        <trans-unit id="82584eccefdf0e64733530fb7b37a5c4e7baadbe" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;eslint&lt;/code&gt; with the previous custom formatter,</source>
          <target state="translated">以前のカスタムフォーマッタで &lt;code&gt;eslint&lt;/code&gt; を実行すると、</target>
        </trans-unit>
        <trans-unit id="cc4ca7c771cd08213f4b8be7b584910f7669bad1" translate="yes" xml:space="preserve">
          <source>Running Individual Tests</source>
          <target state="translated">個別テストの実行</target>
        </trans-unit>
        <trans-unit id="441a534445ce234b3c86dbe18e6044480f3bedfd" translate="yes" xml:space="preserve">
          <source>Running individual tests is useful when you're working on a specific bug and iterating on the solution. You should be sure to run &lt;code&gt;npm test&lt;/code&gt; before submitting a pull request.</source>
          <target state="translated">個々のテストを実行することは、特定のバグに取り組み、ソリューションを反復するときに役立ちます。プルリクエストを送信する前に、必ず &lt;code&gt;npm test&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="5d976eb8e273ca6d6ba9fdfa6ef367a56a3b6ffd" translate="yes" xml:space="preserve">
          <source>Running the tests is the best way to ensure you have correctly set up your development environment. Make sure you're in the &lt;code&gt;eslint&lt;/code&gt; directory and run:</source>
          <target state="translated">テストを実行することは、開発環境を正しく設定したことを確認するための最良の方法です。 &lt;code&gt;eslint&lt;/code&gt; ディレクトリにいることを確認して実行します。</target>
        </trans-unit>
        <trans-unit id="d106aea3ee94c9ea07b2d08364473f5561ff6c88" translate="yes" xml:space="preserve">
          <source>Runs a subset of tests in PhantomJS</source>
          <target state="translated">PhantomJSでテストのサブセットを実行する</target>
        </trans-unit>
        <trans-unit id="3a49577a7bd2d4bd0341a073ea8ac28454947600" translate="yes" xml:space="preserve">
          <source>Runs all tests on Node.js</source>
          <target state="translated">すべてのテストをNode.js上で実行する</target>
        </trans-unit>
        <trans-unit id="2242ca7138a532d29176cff8e842e87d6315b52e" translate="yes" xml:space="preserve">
          <source>Runs just the JavaScript and JSON linting on the repository</source>
          <target state="translated">リポジトリ上でJavaScriptとJSONのリンティングだけを実行します。</target>
        </trans-unit>
        <trans-unit id="16d64887294214d8ed081b14945edfe9e11fdda5" translate="yes" xml:space="preserve">
          <source>Runtime Rules</source>
          <target state="translated">ランタイムルール</target>
        </trans-unit>
        <trans-unit id="735c74977973d2da5bffd227fd5f002279654583" translate="yes" xml:space="preserve">
          <source>Runtime rules are written in the same format as all other rules. Create your rule as you would any other and then follow these steps:</source>
          <target state="translated">ランタイム ルールは、他のすべてのルールと同じ形式で記述されます。他のルールと同様にルールを作成し、以下の手順に従ってください。</target>
        </trans-unit>
        <trans-unit id="d4a37f09fbd0b4d14017c11606211cf2ba713d3b" translate="yes" xml:space="preserve">
          <source>Sails.js: &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;sails-hook-lint&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</source>
          <target state="translated">Sails.js：sails &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;-hook-lint&lt;/a&gt;、&lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09d7f145b9b7e1d0c79daf58a80e9abbdc849945" translate="yes" xml:space="preserve">
          <source>Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).</source>
          <target state="translated">上の指摘と同じ理由です。あまり頻繁に使用される用語を設定すべきではありません(コメントで使用されている母国語の中心部分など)。</target>
        </trans-unit>
        <trans-unit id="7c671e8c47943a8c325952dde1f0ea58ab681314" translate="yes" xml:space="preserve">
          <source>Scope Analysis Changes</source>
          <target state="translated">スコープ分析の変更</target>
        </trans-unit>
        <trans-unit id="36ab5b6d2a8bb7e55f7b1d6b39e4e5ce11688937" translate="yes" xml:space="preserve">
          <source>Scope Type</source>
          <target state="translated">スコープタイプ</target>
        </trans-unit>
        <trans-unit id="1ababc4ffaa5b7bdf69961b71c11caa9ddda5aef" translate="yes" xml:space="preserve">
          <source>Scope interface</source>
          <target state="translated">スコープインターフェース</target>
        </trans-unit>
        <trans-unit id="0a313e66995747d51d210db31cc5a359aecf5923" translate="yes" xml:space="preserve">
          <source>ScopeManager</source>
          <target state="translated">ScopeManager</target>
        </trans-unit>
        <trans-unit id="f83f415575654aec918367fa7b4efd53484afeb7" translate="yes" xml:space="preserve">
          <source>ScopeManager interface</source>
          <target state="translated">スコープマネージャインタフェース</target>
        </trans-unit>
        <trans-unit id="9f61e165e4f63a9799a4482983a897b3c392fb00" translate="yes" xml:space="preserve">
          <source>Second option</source>
          <target state="translated">2つ目のオプション</target>
        </trans-unit>
        <trans-unit id="37b1dc04082b220b42be965eea192bef3c547ba5" translate="yes" xml:space="preserve">
          <source>Second, it advances to &lt;code&gt;ForStatement.body&lt;/code&gt;. Of course the &lt;code&gt;body&lt;/code&gt; segment is preceded by the &lt;code&gt;test&lt;/code&gt; segment. It keeps the &lt;code&gt;update&lt;/code&gt; segment hovering.</source>
          <target state="translated">次に、 &lt;code&gt;ForStatement.body&lt;/code&gt; に進みます。もちろん、 &lt;code&gt;body&lt;/code&gt; 部分の前に &lt;code&gt;test&lt;/code&gt; 部分があります。 &lt;code&gt;update&lt;/code&gt; セグメントがホバリングし続けます。</target>
        </trans-unit>
        <trans-unit id="8323971eba037489129f23f49f88dde8358fa8ad" translate="yes" xml:space="preserve">
          <source>Second, it creates the looping path. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">次に、ループパスを作成します。現時点では、次のセグメントはすでに存在しているため、 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; イベントは発生しません。それは発火 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="5b4acc9dc16ce636a836361190495f1196e2d6f8" translate="yes" xml:space="preserve">
          <source>Section 1: Get the &lt;a href=&quot;source-code&quot;&gt;Source Code&lt;/a&gt;</source>
          <target state="translated">セクション1：&lt;a href=&quot;source-code&quot;&gt;ソースコードを&lt;/a&gt;入手する</target>
        </trans-unit>
        <trans-unit id="3b1637242cb5f4b3e36d4492cd36c48e74446f57" translate="yes" xml:space="preserve">
          <source>Section 2: Set up a &lt;a href=&quot;development-environment&quot;&gt;Development Environment&lt;/a&gt;</source>
          <target state="translated">セクション2：&lt;a href=&quot;development-environment&quot;&gt;開発環境の&lt;/a&gt;セットアップ</target>
        </trans-unit>
        <trans-unit id="78f0e7c8b704185ecfe739a5f8c33c68a075ef9e" translate="yes" xml:space="preserve">
          <source>Section 3: Run the &lt;a href=&quot;unit-tests&quot;&gt;Unit Tests&lt;/a&gt;</source>
          <target state="translated">セクション3：&lt;a href=&quot;unit-tests&quot;&gt;単体テストの&lt;/a&gt;実行</target>
        </trans-unit>
        <trans-unit id="d3b79d5d78e14a8c4b0ba5bc3059259a23cad08b" translate="yes" xml:space="preserve">
          <source>Section 4: &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt;</source>
          <target state="translated">セクション4：&lt;a href=&quot;working-with-rules&quot;&gt;ルールの操作&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03c3cb69551b14b8df9cb910afaab136f027242f" translate="yes" xml:space="preserve">
          <source>Section 5: &lt;a href=&quot;working-with-plugins&quot;&gt;Working with Plugins&lt;/a&gt;</source>
          <target state="translated">セクション5：&lt;a href=&quot;working-with-plugins&quot;&gt;プラグインの操作&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b994bfa5badb9f811f171491ad2085ca2163162" translate="yes" xml:space="preserve">
          <source>Section 6: &lt;a href=&quot;working-with-custom-parsers&quot;&gt;Working with Custom Parsers&lt;/a&gt;</source>
          <target state="translated">セクション6：&lt;a href=&quot;working-with-custom-parsers&quot;&gt;カスタムパーサーの操作&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cef9b81d7487df40316eccfb3ac59bb6e5049a8" translate="yes" xml:space="preserve">
          <source>Section 7: &lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</source>
          <target state="translated">セクション7：&lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b89f1494eec98976470a195404c75143a7d87a8b" translate="yes" xml:space="preserve">
          <source>Section 8: &lt;a href=&quot;contributing/index&quot;&gt;Contributing&lt;/a&gt;</source>
          <target state="translated">セクション8：&lt;a href=&quot;contributing/index&quot;&gt;貢献&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a36f58a29f1275ec5d968141f07cf060b746bc67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;Specifying Processor&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;プロセッサの指定&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b6969594f8da02157a002f4a80fcf1d497e64bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt; if you also want to disallow duplicate names in class definitions.</source>
          <target state="translated">クラス定義で名前の重複を許可しない場合は、&lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-membersを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b75b5956411bc41a59d15e137400fe418c3a0502" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt; if you also want to disallow duplicate keys in object literals.</source>
          <target state="translated">オブジェクトリテラルの重複キーも許可しない場合は、&lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keysを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="2601bab23f6d6b7f8c2a0b4d06f87b74ca15b5fc" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f2f2da9007ba35b167fb5fbeeeef552aaaf5204" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;、&lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5475994619c5659ff506420bcda0f2341a59e086" translate="yes" xml:space="preserve">
          <source>See all &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;formatters on npm&lt;/a&gt;;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;npmの&lt;/a&gt;すべてのフォーマッターを参照してください。</target>
        </trans-unit>
        <trans-unit id="d711728163616d324e06d612e575de7b428f280d" translate="yes" xml:space="preserve">
          <source>See also: the &lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;full diff&lt;/a&gt; where the defaults were changed.</source>
          <target state="translated">参照：デフォルトが変更された&lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;完全な差分&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="ba1dd4d24595765d36380d449f2f63da8783485e" translate="yes" xml:space="preserve">
          <source>Selectors are not limited to matching against single node types. For example, the selector &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes that have a &lt;code&gt;VariableDeclarator&lt;/code&gt; as a direct parent. In the program above, this will match the node for &lt;code&gt;foo&lt;/code&gt;, but not the nodes for &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">セレクターは、単一ノードタイプとの照合に限定されません。たとえば、セレクター &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; は、 &lt;code&gt;VariableDeclarator&lt;/code&gt; を直接の親として持つすべての &lt;code&gt;Identifier&lt;/code&gt; ノードと一致します。上記のプログラムでは、これは &lt;code&gt;foo&lt;/code&gt; のノードと一致しますが、 &lt;code&gt;bar&lt;/code&gt; と &lt;code&gt;baz&lt;/code&gt; のノードとは一致しません。</target>
        </trans-unit>
        <trans-unit id="52a3f1908b1bbd91b0b9259682b062315f687ab1" translate="yes" xml:space="preserve">
          <source>Self assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.</source>
          <target state="translated">自己課題は何の効果もないので、リファクタリングが不完全なためのエラーでしょう。これらは、やるべきことがまだ残っていることを示しています。</target>
        </trans-unit>
        <trans-unit id="f7959cd9f43abd1103f282c5754afbee5224b16f" translate="yes" xml:space="preserve">
          <source>Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">セミコロンの自動挿入（ASI）のため、セミコロンは通常JavaScriptではオプションです。あなたはとセミコロンを必要とするか、または禁止でき&lt;a href=&quot;semi&quot;&gt;セミ&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="7ef827951df1f89ec5fb16c5c417655c418fa285" translate="yes" xml:space="preserve">
          <source>Sequence expressions (those using a comma, such as &lt;code&gt;a = 1, b = 2&lt;/code&gt;) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.</source>
          <target state="translated">シーケンス式（ &lt;code&gt;a = 1, b = 2&lt;/code&gt; などのコンマを使用するもの）は、戻り値が条件評価で割り当てられたり使用されたりするか、シーケンス式の値を使用して関数呼び出しが行われない限り、常に未使用と見なされます。</target>
        </trans-unit>
        <trans-unit id="a171fcac3dd876a9a68a177995635a2d7e821db8" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want those functions to be treated as 'regular' functions.</source>
          <target state="translated">これらの関数を「通常の」関数として扱う場合は、 &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c0180f010e4da395331d6d54df6959189e9dae8b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;indexOf(NaN)&lt;/code&gt; and &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; method calls.</source>
          <target state="translated">このルールで &lt;code&gt;indexOf(NaN)&lt;/code&gt; および &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; メソッドの呼び出しをレポートする &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="618ceba957897722ae596312a10c551288948191" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;case NaN&lt;/code&gt; and &lt;code&gt;switch(NaN)&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">このルールで &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;case NaN&lt;/code&gt; および &lt;code&gt;switch(NaN)&lt;/code&gt; をレポートする場合は、 &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="fa3491e34539a3ccbb31246fccfeafd612faa9f3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations as well.</source>
          <target state="translated">このルールで &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、および &lt;code&gt;class&lt;/code&gt; 宣言もチェックする場合は、 &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="faf94416ab2a050dcb6bbfd98218d385084c3972" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowKeywords&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.</source>
          <target state="translated">ECMAScriptバージョン3互換のスタイルに従うには、 &lt;code&gt;allowKeywords&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; （デフォルトは &lt;code&gt;true&lt;/code&gt; ）に設定して、予約語プロパティのドット表記を回避します。</target>
        </trans-unit>
        <trans-unit id="be2fe335d32f03aea39945e0531758a541f8d75d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowPattern&lt;/code&gt; option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).</source>
          <target state="translated">パターンに一致するプロパティ名のブラケット表記を許可するには、 &lt;code&gt;allowPattern&lt;/code&gt; オプションを正規表現文字列に設定します（デフォルトでは、パターンはテストされません）。</target>
        </trans-unit>
        <trans-unit id="1c81c3037407b2aa16474a63ef04fe8a38928ef4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the default &lt;code&gt;/^no default$/i&lt;/code&gt; comment test pattern</source>
          <target state="translated">デフォルトの &lt;code&gt;/^no default$/i&lt;/code&gt; コメントテストパターンを変更するには、 &lt;code&gt;commentPattern&lt;/code&gt; オプションを正規表現文字列に設定します</target>
        </trans-unit>
        <trans-unit id="0013f5c88955deac87e1686900438d34e9741c2d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the test for intentional fallthrough comment</source>
          <target state="translated">意図的なフォールスルーコメントのテストを変更するには、 &lt;code&gt;commentPattern&lt;/code&gt; オプションを正規表現文字列に設定します</target>
        </trans-unit>
        <trans-unit id="68ce687ddf0f134fff7cf81f9dc938e6b3878d8a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;int32Hint&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;) to allow write &lt;code&gt;a|0&lt;/code&gt; without space.</source>
          <target state="translated">設定し &lt;code&gt;int32Hint&lt;/code&gt; のにオプションを &lt;code&gt;true&lt;/code&gt; （デフォルトは &lt;code&gt;false&lt;/code&gt; を書き込みできるようにする） &lt;code&gt;a|0&lt;/code&gt; スペースなし。</target>
        </trans-unit>
        <trans-unit id="3134ee2112bdc78853bd1511d97b31e6159ccb88" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; by default. Setting this option to &lt;code&gt;false&lt;/code&gt; allows constant expressions in loops.</source>
          <target state="translated">デフォルトでは &lt;code&gt;true&lt;/code&gt; に設定されています。このオプションを &lt;code&gt;false&lt;/code&gt; に設定すると、ループで定数式が許可されます。</target>
        </trans-unit>
        <trans-unit id="70eda033c7f0c498a86724919e7320f305b80b0d" translate="yes" xml:space="preserve">
          <source>Set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../development-environment&quot;&gt;開発環境を&lt;/a&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="f8322127967adf862ac72c512b139ae1854bca05" translate="yes" xml:space="preserve">
          <source>Setters cannot return values.</source>
          <target state="translated">セッターは値を返すことができません。</target>
        </trans-unit>
        <trans-unit id="c9c749d001ff268cbeb4ea4c24c216a86d9a6a4d" translate="yes" xml:space="preserve">
          <source>Setting parser options helps ESLint determine what is a parsing error. All language options are &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">パーサーオプションを設定すると、ESLintが解析エラーを特定するのに役立ちます。デフォルトでは、すべての言語オプションは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="37c53c1b3fac94914ae01b6fca4c4e53991f792a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;ignoreInlineComments&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.</source>
          <target state="translated">&lt;code&gt;ignoreInlineComments&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定すると、コードの途中のコメント（コメントの最初と同じ行にトークンがあり、コメントの最後と同じ行に別のトークンがある）は、このルールによって報告されません。 。</target>
        </trans-unit>
        <trans-unit id="7a21f615bd35450d045383608de1e8b616f708b6" translate="yes" xml:space="preserve">
          <source>Shadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:</source>
          <target state="translated">シャドウイングとは、ローカル変数がそのスコープ内の変数と同じ名前を共有するプロセスです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6bf3b29e45e3e5e600d18ebc1d069a9b49cb2211" translate="yes" xml:space="preserve">
          <source>Share Plugins</source>
          <target state="translated">共有プラグイン</target>
        </trans-unit>
        <trans-unit id="d411f634d35296374dbb079a9b10699e721c60b8" translate="yes" xml:space="preserve">
          <source>Shareable Configs</source>
          <target state="translated">共有可能な設定</target>
        </trans-unit>
        <trans-unit id="f7728f13ff64a72cf6ff58838bc2cf984afc2062" translate="yes" xml:space="preserve">
          <source>Shareable configs are designed to work with the &lt;code&gt;extends&lt;/code&gt; feature of &lt;code&gt;.eslintrc&lt;/code&gt; files. Instead of using a file path for the value of &lt;code&gt;extends&lt;/code&gt;, use your module name. For example:</source>
          <target state="translated">共有可能な構成は、 &lt;code&gt;.eslintrc&lt;/code&gt; ファイルの &lt;code&gt;extends&lt;/code&gt; 機能と連携するように設計されています。 &lt;code&gt;extends&lt;/code&gt; の値にファイルパスを使用する代わりに、モジュール名を使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="ac98661439154e24e66154b8b56ea65970febcd8" translate="yes" xml:space="preserve">
          <source>Shareable configs are simply npm packages that export a configuration object. To start, &lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;create a Node.js module&lt;/a&gt; like you normally would. Make sure the module name begins with &lt;code&gt;eslint-config-&lt;/code&gt;, such as &lt;code&gt;eslint-config-myconfig&lt;/code&gt;.</source>
          <target state="translated">共有可能な構成は、単に構成オブジェクトをエクスポートするnpmパッケージです。まず、通常どおりに&lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;Node.jsモジュールを作成し&lt;/a&gt;ます。確認してくださいモジュール名はで始まる &lt;code&gt;eslint-config-&lt;/code&gt; など、 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5de27ab2273537b3d6d14a587e6661a643b307d7" translate="yes" xml:space="preserve">
          <source>Sharing Multiple Configs</source>
          <target state="translated">複数の設定を共有する</target>
        </trans-unit>
        <trans-unit id="8fc88f1b91b2fde5e1092771afaef36f9a2e347a" translate="yes" xml:space="preserve">
          <source>Shebangs are now returned from comment APIs</source>
          <target state="translated">コメントAPIからシェバングが返ってくるようになりました。</target>
        </trans-unit>
        <trans-unit id="7017708c1c06a3f1e90941c34316e9d4607c7d9c" translate="yes" xml:space="preserve">
          <source>Shebangs are represented by tokens of type &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt;. They are treated as comments and can be accessed by the methods outlined above.</source>
          <target state="translated">シバンは、 &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt; シバン」タイプのトークンで表されます。これらはコメントとして扱われ、上記の方法でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="23210f846566656bab3b173307947416d7f3ca0b" translate="yes" xml:space="preserve">
          <source>Sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;.</source>
          <target state="translated">私たちのサイン&lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;コントリビュータライセンス契約を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2be01717d65543f816e780251a90121cfccc7576" translate="yes" xml:space="preserve">
          <source>Signing the CLA</source>
          <target state="translated">CLAへのサイン</target>
        </trans-unit>
        <trans-unit id="0ec28340f6b30cc1ce90c43020055c994f7d5efb" translate="yes" xml:space="preserve">
          <source>Similar to the valid cases, you can also specify &lt;code&gt;options&lt;/code&gt; to be passed to the rule:</source>
          <target state="translated">有効なケースと同様に、ルールに渡す &lt;code&gt;options&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="83f59937d173df040577971290f0e1cacd671a9c" translate="yes" xml:space="preserve">
          <source>Simple Statements</source>
          <target state="translated">シンプルなステートメント</target>
        </trans-unit>
        <trans-unit id="24da9670085c68ec6aa7a55a98200997a7091b66" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;context.options&lt;/code&gt; is just an array, you can use it to determine how many options have been passed as well as retrieving the actual options themselves. Keep in mind that the error level is not part of &lt;code&gt;context.options&lt;/code&gt;, as the error level cannot be known or modified from inside a rule.</source>
          <target state="translated">以来 &lt;code&gt;context.options&lt;/code&gt; は単なる配列である、あなたは実際のオプションに自分自身を取得するだけでなく、渡されたどのように多くの選択肢を決定するためにそれを使用することができます。エラーレベルは、ルール内からは確認または変更できないため、 &lt;code&gt;context.options&lt;/code&gt; の一部ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3dec31ada8554ba1a6a6debc16cb59773af96567" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;index.js&lt;/code&gt; is just JavaScript, you can optionally read these settings from a file or generate them dynamically.</source>
          <target state="translated">以来 &lt;code&gt;index.js&lt;/code&gt; はただのJavaScriptで、必要に応じてファイルからこれらの設定を読み込むか、動的に生成することができます。</target>
        </trans-unit>
        <trans-unit id="48bb4d613279d48459f21ef7090afc2c9bd1a5ba" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;require()&lt;/code&gt; does a synchronous load, it can cause performance problems when used in other locations.</source>
          <target state="translated">以来 &lt;code&gt;require()&lt;/code&gt; 同期ロードを行い、他の場所で使用する場合、それはパフォーマンス上の問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="c4072153bf32cdf523ee16f38e671d010ceab044" translate="yes" xml:space="preserve">
          <source>Since ESLint v5, &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; has been equivalent to &lt;code&gt;ecmaVersion: 2018&lt;/code&gt;, and has also emitted a deprecation warning. In ESLint v6, the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; feature has been removed entirely and has no effect. If your config was relying on &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; to enable ES2018 parsing, you might start seeing parsing errors for recent syntax.</source>
          <target state="translated">ESLint v5以降、 &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; は &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; と同等であり、非推奨の警告を発しました。ESLint v6では、 &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; 機能が完全に削除され、効果はありません。ES2018解析を有効にするために構成が &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; に依存していた場合、最近の構文の解析エラーが表示されるようになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d13ae6387ed366be6d8b805801c5cfb3cfb9ad21" translate="yes" xml:space="preserve">
          <source>Since all rules are run again after the initial round of fixes is applied, it's not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.</source>
          <target state="translated">すべてのルールは最初の修正のラウンドが適用された後に再び実行されるので、修正のコードスタイルが別のルールでエラーが報告される原因になるかどうかをチェックする必要はありません。</target>
        </trans-unit>
        <trans-unit id="18fb1e3007320b11f3d7fd9d833d2b32f18f24bd" translate="yes" xml:space="preserve">
          <source>Since deprecated rules will never be removed, you can continue to use them indefinitely if they are working for you. However, keep in mind that deprecated rules will effectively be unmaintained.</source>
          <target state="translated">非推奨のルールが削除されることはないので、そのルールが自分のために機能しているのであれば、無期限で使い続けることができます。しかし、非推奨のルールは事実上メンテナンスされていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b45593d5f75200b1272e2e445af7ba7a6ca42cb" translate="yes" xml:space="preserve">
          <source>Since it's good to have a consistent code style, you should either always write padded blocks or never do it.</source>
          <target state="translated">コードスタイルが一貫しているのは良いことなので、常にパッド付きブロックを書くか、絶対に書かないかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="20e1b60daaa62f4d5667736af96bfb991b249553" translate="yes" xml:space="preserve">
          <source>Single-Line Comments</source>
          <target state="translated">一行コメント</target>
        </trans-unit>
        <trans-unit id="56f06f07d3754fea01009119715bfd5517b24da3" translate="yes" xml:space="preserve">
          <source>Single-line comments should be used to document one line of code or a group of related lines of code. A single-line comment may be used in three ways:</source>
          <target state="translated">一行コメントは、1つのコード行または関連するコード行のグループを文書化するために使用しなければなりません。一行コメントは3つの方法で使用することができます。</target>
        </trans-unit>
        <trans-unit id="d5725de7b903a8b05de6ad0470647699fe07e580" translate="yes" xml:space="preserve">
          <source>Small - Runs ESLint on KnockoutJS</source>
          <target state="translated">Small-KnockoutJS上でESLintを実行</target>
        </trans-unit>
        <trans-unit id="8a314d2e7d6188c8847f81a281bc5f5ae16c1c06" translate="yes" xml:space="preserve">
          <source>Smart Tabs</source>
          <target state="translated">スマートタブ</target>
        </trans-unit>
        <trans-unit id="f4e452300a2b0f07b41745625016cd897fb85bfe" translate="yes" xml:space="preserve">
          <source>So running &lt;code&gt;eslint&lt;/code&gt; with this custom formatter:</source>
          <target state="translated">したがって、このカスタムフォーマッタで &lt;code&gt;eslint&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="65f774dd6ab39438c5f5df28e0b861b09e448b2d" translate="yes" xml:space="preserve">
          <source>So the second argument &lt;code&gt;ast&lt;/code&gt; also should be parsed from stripped text.</source>
          <target state="translated">したがって、2番目の引数 &lt;code&gt;ast&lt;/code&gt; も、ストリップされたテキストから解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="31a71f85cf4f793cf2a2e4f0097c3f2e95ba388a" translate="yes" xml:space="preserve">
          <source>Software Module size and file size</source>
          <target state="translated">ソフトウェアモジュールのサイズとファイルサイズ</target>
        </trans-unit>
        <trans-unit id="be134f7c50807cfb772cbc0bcb5081b5a12c45d8" translate="yes" xml:space="preserve">
          <source>Some code conventions require that all &lt;code&gt;switch&lt;/code&gt; statements have a &lt;code&gt;default&lt;/code&gt; case, even if the default case is empty, such as:</source>
          <target state="translated">一部のコード規則では、次のように、デフォルトの大文字小文字が空の場合でも、すべての &lt;code&gt;switch&lt;/code&gt; ステートメントに &lt;code&gt;default&lt;/code&gt; 大文字小文字が必要です。</target>
        </trans-unit>
        <trans-unit id="c8b6c94f005c780b423c192df3948fbf6b0bc032" translate="yes" xml:space="preserve">
          <source>Some code styles prohibit &lt;code&gt;void&lt;/code&gt; operator, marking it as non-obvious and hard to read.</source>
          <target state="translated">一部のコードスタイルは &lt;code&gt;void&lt;/code&gt; 演算子を禁止し、それを非自明で読みにくいものとしてマークします。</target>
        </trans-unit>
        <trans-unit id="5c5510f077de709ac2acb2de150530c1a834f95a" translate="yes" xml:space="preserve">
          <source>Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.</source>
          <target state="translated">これは、後に形式化されただけのJavaScriptの非文書化された機能であったため、悪い習慣であると考える人もいます。</target>
        </trans-unit>
        <trans-unit id="5c13b92416e3720dc9efdcd598e2b13bb218f8f0" translate="yes" xml:space="preserve">
          <source>Some developers declare multiple var statements on the same line:</source>
          <target state="translated">開発者の中には、同一行に複数の var 文を宣言している人もいます。</target>
        </trans-unit>
        <trans-unit id="88fde2b94b3e6e7f06f28f5ca48809414c632781" translate="yes" xml:space="preserve">
          <source>Some developers find that placing operators at the beginning of the line makes the code more readable.</source>
          <target state="translated">演算子を行頭に配置するとコードが読みやすくなることに気づく開発者もいます。</target>
        </trans-unit>
        <trans-unit id="da83d59be8d3c1fa61746c9667b3e144b3b46f21" translate="yes" xml:space="preserve">
          <source>Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.</source>
          <target state="translated">複数の空白行を削除することを好む開発者もいれば、可読性の向上に役立つと感じる開発者もいます。空白はコードの論理的なセクションを区切るのに便利ですが、過剰な空白は画面の多くを占めます。</target>
        </trans-unit>
        <trans-unit id="319b3df86b7ba843599bf2b2dd9f3af029a3c402" translate="yes" xml:space="preserve">
          <source>Some exposed APIs are now ES2015 classes</source>
          <target state="translated">一部の公開APIはES2015のクラスになりました</target>
        </trans-unit>
        <trans-unit id="70eec175aefc8c0ac35582826149396333b51a6a" translate="yes" xml:space="preserve">
          <source>Some global variables have been deprecated or removed for code running in Node.js, browsers, and Jest. (For example, browsers used to expose an &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; global variable to JavaScript code, but this global has been removed from web standards and is no longer present in browsers.) As a result, we have removed these globals from the corresponding &lt;code&gt;eslint&lt;/code&gt; environments, so use of these globals will trigger an error when using rules such as &lt;a href=&quot;../rules/no-undef&quot;&gt;&lt;code&gt;no-undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Node.js、ブラウザー、およびJestで実行されるコードでは、一部のグローバル変数が非推奨または削除されています。（たとえば、ブラウザは &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; グローバル変数をJavaScriptコードに公開するために使用されていましたが、このグローバルはWeb標準から削除され、ブラウザには存在しなくなりました。）その結果、これらのグローバルを対応する &lt;code&gt;eslint&lt;/code&gt; 環境から削除しました。これらのグローバルを使用すると、&lt;a href=&quot;../rules/no-undef&quot;&gt; &lt;code&gt;no-undef&lt;/code&gt; &lt;/a&gt;などのルールを使用するときにエラーがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="f062f278fdeadb9e299ef656855a628748c5bb85" translate="yes" xml:space="preserve">
          <source>Some imports might not make sense in a particular environment. For example, Node.js' &lt;code&gt;fs&lt;/code&gt; module would not make sense in an environment that didn't have a file system.</source>
          <target state="translated">一部のインポートは、特定の環境では意味をなさない場合があります。たとえば、Node.jsの &lt;code&gt;fs&lt;/code&gt; モジュールは、ファイルシステムがない環境では意味がありません。</target>
        </trans-unit>
        <trans-unit id="8a1845bade3c1e32522c230c7fd34c3040711d50" translate="yes" xml:space="preserve">
          <source>Some issues have had monetary rewards attached to them. Those are labeled &lt;code&gt;bounty&lt;/code&gt;. Bounties are assigned via &lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;.</source>
          <target state="translated">一部の問題には金銭的報酬が付いています。それらは &lt;code&gt;bounty&lt;/code&gt; と表示されています。&lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;バウンティはBountySource&lt;/a&gt;を介して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="cc97f15ec33a8fb0d8f181362b5bbc40bdbb948d" translate="yes" xml:space="preserve">
          <source>Some modules provide similar or identical functionality, think &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt;. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.</source>
          <target state="translated">一部のモジュールは類似または同一の機能を提供します &lt;code&gt;lodash&lt;/code&gt; および &lt;code&gt;underscore&lt;/code&gt; と考えてください。プロジェクトはモジュールで標準化されている可能性があります。他の代替案が使用されていないことを確認する必要があります。これを行うと、プロジェクトが不必要に肥大化し、依存関係が1つあれば十分な場合に、2つの依存関係の保守コストが高くなります。</target>
        </trans-unit>
        <trans-unit id="264939a2d43fd66c197012a9cf9648b42c36337b" translate="yes" xml:space="preserve">
          <source>Some modules return a constructor which can potentially lead to code such as:</source>
          <target state="translated">モジュールの中には、コンストラクタを返すものもあります。</target>
        </trans-unit>
        <trans-unit id="29ba1427e8c92e96a16255e3f6eb4ecbfabc34f6" translate="yes" xml:space="preserve">
          <source>Some people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what's going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.</source>
          <target state="translated">大きなファイルはコードの匂いだと考える人もいます。大きなファイルは多くのことを行う傾向があり、何が起こっているのかを理解するのが難しくなることがあります。ファイル内で許容されると考えられる行数の客観的な最大値はありませんが、ほとんどの人は数千行にすべきではないということに同意するでしょう。推奨される行数は通常100~500行です。</target>
        </trans-unit>
        <trans-unit id="a357eb75979b31ab9472de29b249e979f6b6b141" translate="yes" xml:space="preserve">
          <source>Some people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what's going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.</source>
          <target state="translated">大規模な関数をコードの匂いだと考える人もいます。大きな関数は多くのことを行う傾向があり、何が起こっているのかを理解するのが難しくなることがあります。多くのコーディングスタイルガイドでは、関数が構成できる行数の制限を規定しています。このルールは、そのスタイルを強制するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b516222d790d0bfe6d8641c249e0071402e077c0" translate="yes" xml:space="preserve">
          <source>Some rules and APIs allow the use of selectors to query an AST. This page is intended to:</source>
          <target state="translated">いくつかのルールやAPIでは、セレクタを使ってASTを問い合わせることができます。このページはそのためのものです。</target>
        </trans-unit>
        <trans-unit id="d46d7f40436527e02e15f42c4b8e72f68eaadfc8" translate="yes" xml:space="preserve">
          <source>Some rules require options in order to function correctly. These options appear in configuration (&lt;code&gt;.eslintrc&lt;/code&gt;, command line, or in comments). For example:</source>
          <target state="translated">一部のルールでは、正しく機能するためにオプションが必要です。これらのオプションは、構成（ &lt;code&gt;.eslintrc&lt;/code&gt; 、コマンドライン、またはコメント）に表示されます。例えば：</target>
        </trans-unit>
        <trans-unit id="00275b3b345f6b9172064ad3c4803175ae258c34" translate="yes" xml:space="preserve">
          <source>Some style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line. On the other hand, it is sometimes faster and more obvious to put comments immediately following code.</source>
          <target state="translated">スタイルガイドの中には、コードと同じ行のコメントを禁止しているものがあります。コードと同じ行にコメントがすぐに続くと、コードが読みにくくなることがあります。一方で、コードのすぐ後にコメントをつけた方が速くてわかりやすい場合もあります。</target>
        </trans-unit>
        <trans-unit id="1849aab38ed123bdc6d7b029034a46313136fc00" translate="yes" xml:space="preserve">
          <source>Some style guides don't allow the use of tab characters at all, including within comments.</source>
          <target state="translated">スタイルガイドによっては、コメント内を含め、タブ文字の使用を全く許可していないものもあります。</target>
        </trans-unit>
        <trans-unit id="2244458667f3ce520967956eda4ce510fbeed0c1" translate="yes" xml:space="preserve">
          <source>Some style guides may require a consistent spacing for function names.</source>
          <target state="translated">スタイルガイドによっては、関数名に一貫したスペーシングが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="030befb9cb1b6a4b5dacb92a3f92d4b8ba5e2c62" translate="yes" xml:space="preserve">
          <source>Some style guides require JSDoc comments for all functions as a way of explaining function behavior.</source>
          <target state="translated">スタイルガイドの中には、関数の動作を説明する方法として、すべての関数に対してJSDocのコメントを要求するものがあります。</target>
        </trans-unit>
        <trans-unit id="dc237e4772e0207c27c1e378f2525052a1ff94c6" translate="yes" xml:space="preserve">
          <source>Some style guides require block statements to start and end with blank lines. The goal is to improve readability by visually separating the block content and the surrounding code.</source>
          <target state="translated">スタイルガイドの中には、ブロック文の開始と終了を空行で行うことを要求するものがあります。これは、ブロックの内容と周囲のコードを視覚的に分離することで可読性を向上させることを目的としています。</target>
        </trans-unit>
        <trans-unit id="201550e6abc7ddd420de4b881ba83ce28f29f0b9" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; of a line comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">一部のスタイルガイドでは、行コメントの最初の &lt;code&gt;//&lt;/code&gt; の直後に空白を必要とするか禁止します。 &lt;code&gt;//&lt;/code&gt; の後の空白は、コメント内のテキストを読みやすくします。一方、 &lt;code&gt;//&lt;/code&gt; の直後に空白を置かなくても、コードをコメントアウトする方が簡単です。</target>
        </trans-unit>
        <trans-unit id="a1c5fdd2ea4191bb42ab7f9fca487d91da02843c" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; of a comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;.</source>
          <target state="translated">一部のスタイルガイドでは、コメントの最初の &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/*&lt;/code&gt; の直後に空白が必要または禁止されています。 &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/*&lt;/code&gt; の後の空白は、コメント内のテキストを読みやすくします。一方、 &lt;code&gt;//&lt;/code&gt; や &lt;code&gt;/*&lt;/code&gt; の直後に空白を置かなくても、コードをコメントアウトする方が簡単です。</target>
        </trans-unit>
        <trans-unit id="9568a858ccab377c3f347cbea8a8037f371d4712" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.</source>
          <target state="translated">スタイルガイドの中には、単項演算子の前後にスペースを必要とするものや認めないものがあります。これは主にスタイルの問題ですが、JavaScript の式の中にはスペースを入れずに書くことができるものもあり、これは読みにくく、メンテナンスが難しくなります。</target>
        </trans-unit>
        <trans-unit id="1cd1de3034a3fc730da0bea8dd9b8d360a4330f4" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces inside of parentheses:</source>
          <target state="translated">スタイルガイドの中には、括弧内のスペースを必要としたり、許可しなかったりするものがあります。</target>
        </trans-unit>
        <trans-unit id="c3070c75d033320e5f7ebe414b6237a3ba652bf4" translate="yes" xml:space="preserve">
          <source>Some style guides will require or disallow spaces following the certain keywords.</source>
          <target state="translated">スタイルガイドの中には、特定のキーワードに続くスペースを要求したり、禁止したりするものがあります。</target>
        </trans-unit>
        <trans-unit id="c4be317e60f6aa965f4ab059cd2ad659412f195d" translate="yes" xml:space="preserve">
          <source>Some tests require that a certain parser configuration must be used. This can be specified in test specifications via the &lt;code&gt;parserOptions&lt;/code&gt; setting.</source>
          <target state="translated">一部のテストでは、特定のパーサー構成を使用する必要があります。これは、 &lt;code&gt;parserOptions&lt;/code&gt; 設定を介してテスト仕様で指定できます。</target>
        </trans-unit>
        <trans-unit id="838af6a85f479a1fedfe1a6da00a3f1b6a2a4200" translate="yes" xml:space="preserve">
          <source>Sometimes (especially in big projects) the name of the error variable is not consistent across the project, so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</source>
          <target state="translated">(特に大規模なプロジェクトでは)エラー変数の名前がプロジェクト全体で一貫していないことがあります。そのため、ルールが処理されていないエラーをすべて報告するようにするには、より柔軟な設定が必要になります。</target>
        </trans-unit>
        <trans-unit id="50c696bd306a1b3a43860828cc49620093926e56" translate="yes" xml:space="preserve">
          <source>Sometimes during the course of code maintenance, the &lt;code&gt;this&lt;/code&gt; value is removed from the function body. In that case, you can end up with a call to &lt;code&gt;bind()&lt;/code&gt; that doesn't accomplish anything:</source>
          <target state="translated">コードのメンテナンス中に、 &lt;code&gt;this&lt;/code&gt; 値が関数本体から削除されることがあります。その場合、何も実行しない &lt;code&gt;bind()&lt;/code&gt; の呼び出しで終わる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e1239a4ef3312baebd03a9fadd3dc1da7a196cfc" translate="yes" xml:space="preserve">
          <source>Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.</source>
          <target state="translated">ファイルを編集していると、行末に余分な空白ができてしまうことがあります。このような空白の違いはソース管理システムに拾われて diff としてフラグが立てられ、開発者のフラストレーションの原因になります。この余分な空白があっても機能的には問題ありませんが、多くのコード規約ではチェックイン前に末尾の空白を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">ソースコード</target>
        </trans-unit>
        <trans-unit id="f13b901ad76229dac734487a39808cdde93abfe1" translate="yes" xml:space="preserve">
          <source>Source Control</source>
          <target state="translated">ソース制御</target>
        </trans-unit>
        <trans-unit id="d7f23e409b1f9d227333564c23108a422010e901" translate="yes" xml:space="preserve">
          <source>SourceCode</source>
          <target state="translated">SourceCode</target>
        </trans-unit>
        <trans-unit id="bce4c495898f1faddcaa7c35b37ab4481ede3b00" translate="yes" xml:space="preserve">
          <source>SourceCode constructor (Node API) changes</source>
          <target state="translated">SourceCode コンストラクタ(Node API)の変更</target>
        </trans-unit>
        <trans-unit id="4295a0eca57863562626d681cbe158963892a6fd" translate="yes" xml:space="preserve">
          <source>SourceCode#splitLines()</source>
          <target state="translated">SourceCode#splitLines()</target>
        </trans-unit>
        <trans-unit id="db40a182aaf7dc66373c8652a068c39e88c92f7e" translate="yes" xml:space="preserve">
          <source>Space issues can also cause code to look inconsistent and harder to read.</source>
          <target state="translated">スペースの問題は、コードが一貫性のないものに見えたり、読みにくくなったりする原因にもなります。</target>
        </trans-unit>
        <trans-unit id="9b903a63fa074533e05ee538bb400f7ae7d25ae0" translate="yes" xml:space="preserve">
          <source>Spacing around colons improves readability of &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses.</source>
          <target state="translated">コロンの周りの間隔は、 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 句の読みやすさを向上させます。</target>
        </trans-unit>
        <trans-unit id="bee60614d09a5dc287b728aa03f9ca804bb2765e" translate="yes" xml:space="preserve">
          <source>Spacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.</source>
          <target state="translated">カンマの周りのスペースは、項目のリストの可読性を向上させます。言語のスタイルガイドラインのほとんどは、コンマの後にスペースを追加し、コンマの前にはスペースを追加しないことを規定していますが、それはプロジェクトの好みによる主観的なものです。</target>
        </trans-unit>
        <trans-unit id="85517ae7d9ab81a8dc4d785d38d52af351849a64" translate="yes" xml:space="preserve">
          <source>Sparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:</source>
          <target state="translated">疎な配列には空のスロットが含まれており、配列リテラルの中で複数のカンマが使用されていることが原因であることが多いです。</target>
        </trans-unit>
        <trans-unit id="0b7e749be12e1d4e6f29f80172dc19cac2d01996" translate="yes" xml:space="preserve">
          <source>Specifying Environments</source>
          <target state="translated">環境の指定</target>
        </trans-unit>
        <trans-unit id="056af97903e3dc6e6f43b88d96ae94278918b7f2" translate="yes" xml:space="preserve">
          <source>Specifying File extensions to Lint</source>
          <target state="translated">Lintにファイル拡張子を指定する</target>
        </trans-unit>
        <trans-unit id="42e1afab26529373a5755f37ed73c9992e7a1f27" translate="yes" xml:space="preserve">
          <source>Specifying Globals</source>
          <target state="translated">グローバルの指定</target>
        </trans-unit>
        <trans-unit id="615655edaa8435cea59ad96bf63fd800fe901df4" translate="yes" xml:space="preserve">
          <source>Specifying Parser</source>
          <target state="translated">パーサの指定</target>
        </trans-unit>
        <trans-unit id="3fdf1ff8c15b6bfb3e42d6729c40289a364a0934" translate="yes" xml:space="preserve">
          <source>Specifying Parser Options</source>
          <target state="translated">パーサオプションの指定</target>
        </trans-unit>
        <trans-unit id="a5dba7920ee9d85457d6a302a8028c1f41b8cc64" translate="yes" xml:space="preserve">
          <source>Specifying Processor</source>
          <target state="translated">プロセッサの指定</target>
        </trans-unit>
        <trans-unit id="ec5cdef761600831584f51b13c5e7e1af51231d0" translate="yes" xml:space="preserve">
          <source>Specifying Processor in Config Files</source>
          <target state="translated">設定ファイルでプロセッサを指定する</target>
        </trans-unit>
        <trans-unit id="fd3a805a25d509c02dbba7487be2139a847549f5" translate="yes" xml:space="preserve">
          <source>Specifying rules and plugins</source>
          <target state="translated">ルールとプラグインの指定</target>
        </trans-unit>
        <trans-unit id="96c2be7c78e35ecedf2f6d32e197f0983c7d3765" translate="yes" xml:space="preserve">
          <source>Start Developing</source>
          <target state="translated">開発開始</target>
        </trans-unit>
        <trans-unit id="d5ebef5b5d844222a804e3497fcaed1e87e4a705" translate="yes" xml:space="preserve">
          <source>Start: &lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@start/plugin-lib-eslint&lt;/a&gt;</source>
          <target state="translated">開始：&lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@ start / plugin-lib-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67086f02eed6ec69807b5ddb9e07150ee0b0c38d" translate="yes" xml:space="preserve">
          <source>Starting Work</source>
          <target state="translated">仕事始め</target>
        </trans-unit>
        <trans-unit id="91b0ca4a9a5191f5469dcbd23531b6ea8254d67c" translate="yes" xml:space="preserve">
          <source>Starting in 3.1.0, rules have been able to specify the &lt;em&gt;end&lt;/em&gt; location of a reported problem, in addition to the start location, by explicitly specifying an end location in the &lt;code&gt;report&lt;/code&gt; call. This is useful for tools like editor integrations, which can use the range to precisely display where a reported problem occurs. Starting in 4.0, if a &lt;em&gt;node&lt;/em&gt; is reported rather than a location, the end location of the range will automatically be inferred from the end location of the node. As a result, many more reported problems will have end locations.</source>
          <target state="translated">3.1.0以降、ルールは、 &lt;code&gt;report&lt;/code&gt; 呼び出しで終了場所を明示的に指定することにより、開始場所に加えて、報告された問題の&lt;em&gt;終了&lt;/em&gt;場所を指定できるようになりました。これは、範囲を使用して、報告された問題が発生した場所を正確に表示できるエディター統合などのツールに役立ちます。4.0以降、場所ではなく&lt;em&gt;ノード&lt;/em&gt;が報告される場合、範囲の終了場所はノードの終了場所から自動的に推測されます。その結果、より多くの報告された問題には最終的な場所があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5f2ecf2f7eb4335fbd187d0845b33268b44df84a" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComments&lt;/code&gt; events will not be emitted during AST traversal. There are two reasons for this:</source>
          <target state="translated">4.0以降、ASTトラバーサル中に &lt;code&gt;LineComment&lt;/code&gt; および &lt;code&gt;BlockComments&lt;/code&gt; イベントが発行されなくなりました。これには2つの理由があります。</target>
        </trans-unit>
        <trans-unit id="4a9fefe6ba1eb3abeeec5967b3b58b648a035245" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, the &lt;code&gt;RuleTester&lt;/code&gt; utility will validate properties of test case objects, and an error will be thrown if an unknown property is encountered. This change was added because we found that it was relatively common for developers to make typos in rule tests, often invalidating the assertions that the test cases were trying to make.</source>
          <target state="translated">4.0以降、 &lt;code&gt;RuleTester&lt;/code&gt; ユーティリティはテストケースオブジェクトのプロパティを検証し、不明なプロパティが検出されるとエラーがスローされます。この変更が追加されたのは、ルールテストでタイプミスをすることが開発者にとって比較的一般的であり、テストケースが作成しようとしたアサーションを無効にすることが多いためです。</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="6a5813201a4580fe5f1fbb25f1a522d4d505bf2d" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
          <target state="translated">静的メソッド</target>
        </trans-unit>
        <trans-unit id="633c64990d0fd3fb0088750ad9faa31590a9c3f0" translate="yes" xml:space="preserve">
          <source>Step 1: Create a new branch</source>
          <target state="translated">ステップ1:新しいブランチを作成する</target>
        </trans-unit>
        <trans-unit id="c743a1387584019a5b9e49c171021066a9274bbd" translate="yes" xml:space="preserve">
          <source>Step 1: Install Node.js</source>
          <target state="translated">ステップ1:Node.jsをインストールする</target>
        </trans-unit>
        <trans-unit id="ebb615d0e8fbd3bc64c658bdeea517e1be8a7501" translate="yes" xml:space="preserve">
          <source>Step 2: Fork and checkout your own ESLint repository</source>
          <target state="translated">ステップ2:自分のESLintリポジトリをフォークしてチェックアウトする</target>
        </trans-unit>
        <trans-unit id="4b277bac8f09c41a896b5778dc93caf8cea1b8d1" translate="yes" xml:space="preserve">
          <source>Step 2: Make your changes</source>
          <target state="translated">ステップ2:変更を加える</target>
        </trans-unit>
        <trans-unit id="162e5376e301468cf0fb8feee5902817e041ced1" translate="yes" xml:space="preserve">
          <source>Step 3: Add the upstream source</source>
          <target state="translated">ステップ3:上流のソースを追加</target>
        </trans-unit>
        <trans-unit id="c69e88aa3310028acfe11e07da987e642ed7401d" translate="yes" xml:space="preserve">
          <source>Step 3: Rebase onto upstream</source>
          <target state="translated">ステップ3:上流にリベース</target>
        </trans-unit>
        <trans-unit id="11d3053005d884cc0baea0d55f626ee5d58a2a6e" translate="yes" xml:space="preserve">
          <source>Step 4: Install the Yeoman Generator</source>
          <target state="translated">ステップ 4:Yeoman ジェネレーターのインストール</target>
        </trans-unit>
        <trans-unit id="d2be3c72779cd587be34e70421fd2467e7894ea1" translate="yes" xml:space="preserve">
          <source>Step 4: Run the tests</source>
          <target state="translated">ステップ4:テストの実行</target>
        </trans-unit>
        <trans-unit id="e9fd76aa2302af763cd9bb123a722b970152c5fc" translate="yes" xml:space="preserve">
          <source>Step 5: Double check your submission</source>
          <target state="translated">ステップ5:提出物をダブルチェック</target>
        </trans-unit>
        <trans-unit id="1c864ce6457173a3a941ae978f55091a735f72c1" translate="yes" xml:space="preserve">
          <source>Step 5: Run the tests</source>
          <target state="translated">ステップ5:テストの実行</target>
        </trans-unit>
        <trans-unit id="b96518c7b052df6c7c228843ed78292c66a91d9a" translate="yes" xml:space="preserve">
          <source>Step 6: Push your changes</source>
          <target state="translated">ステップ6:変更点をプッシュする</target>
        </trans-unit>
        <trans-unit id="baa82a802e0780c46eb5d8b0c851c905af055f75" translate="yes" xml:space="preserve">
          <source>Step 7: Send the pull request</source>
          <target state="translated">ステップ7:プルリクエストの送信</target>
        </trans-unit>
        <trans-unit id="f1823ff4064066ec41c29ab620ef5de461f12793" translate="yes" xml:space="preserve">
          <source>Store the info about processed files in order to only operate on the changed ones. The cache is stored in &lt;code&gt;.eslintcache&lt;/code&gt; by default. Enabling this option can dramatically improve ESLint's running time by ensuring that only changed files are linted.</source>
          <target state="translated">変更されたファイルのみを操作するために、処理されたファイルに関する情報を保存します。キャッシュはデフォルトで &lt;code&gt;.eslintcache&lt;/code&gt; に保存されます。このオプションを有効にすると、変更されたファイルのみがリントされるようにすることで、ESLintの実行時間を劇的に改善できます。</target>
        </trans-unit>
        <trans-unit id="040fdcc5343129a76b072a4ce16081703504850c" translate="yes" xml:space="preserve">
          <source>Storing Node.js application config data - Ben Hall's blog</source>
          <target state="translated">Node.jsアプリケーションの設定データを保存する-Ben Hallさんのブログ</target>
        </trans-unit>
        <trans-unit id="7c183131363f4251f89993f5090afc10d8f0caad" translate="yes" xml:space="preserve">
          <source>Strict Mode</source>
          <target state="translated">厳格なモード</target>
        </trans-unit>
        <trans-unit id="10944d62374d1d35c0aa7618089752217945a8f3" translate="yes" xml:space="preserve">
          <source>Strict mode is enabled by using the following pragma in your code:</source>
          <target state="translated">Strictモードを有効にするには、コード内で以下のpragmaを使用します。</target>
        </trans-unit>
        <trans-unit id="4c2e19e5bce9b19bbc0b58f76bc3e3dfe6a9b44a" translate="yes" xml:space="preserve">
          <source>Strict mode should be used in all modules, specified below the file overview comment and above everything else:</source>
          <target state="translated">Strict モードはすべてのモジュールで使用されるべきであり、ファイル概要コメントの下と他のすべてのものの上に指定されています。</target>
        </trans-unit>
        <trans-unit id="3c519ccf5be0c1f36a3bbdf75106a4c822cfcb9f" translate="yes" xml:space="preserve">
          <source>String option:</source>
          <target state="translated">文字列オプション。</target>
        </trans-unit>
        <trans-unit id="7c0095620910afa8aafa46572a5f1abcd3e6d132" translate="yes" xml:space="preserve">
          <source>String options are:</source>
          <target state="translated">文字列のオプションは</target>
        </trans-unit>
        <trans-unit id="219423ce2478de8f7bc615787c69eeec3ac8cfbb" translate="yes" xml:space="preserve">
          <source>Strings should always use double quotes (never single quotes) and should always appear on a single line. Never use a slash to create a new line in a string.</source>
          <target state="translated">文字列は常に二重引用符を使用し(単一引用符は使用しないでください)、常に一行で記述してください。文字列の改行にスラッシュを使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="2bd1e348298a2cd13100d6cde33eeacf35aa2449" translate="yes" xml:space="preserve">
          <source>Style guides may require a space after the &lt;code&gt;function&lt;/code&gt; keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.</source>
          <target state="translated">スタイルガイドでは、無名関数の &lt;code&gt;function&lt;/code&gt; キーワードの後にスペースが必要な場合がありますが、空白を指定しないものもあります。同様に、関数名の後のスペースは必要な場合と必要でない場合があります。</target>
        </trans-unit>
        <trans-unit id="d2602aec88a266da02fb6e6a39ad0ff098e617d0" translate="yes" xml:space="preserve">
          <source>Stylistic Issues</source>
          <target state="translated">スタイルの問題</target>
        </trans-unit>
        <trans-unit id="ff5943f72b414aaa4a17049e5bbb2634c96a77ee" translate="yes" xml:space="preserve">
          <source>Sublime Text 3:</source>
          <target state="translated">崇高なテキスト 3.</target>
        </trans-unit>
        <trans-unit id="030c1749f522d7238c0443341747221266a4ca54" translate="yes" xml:space="preserve">
          <source>SublimeLinter-eslint</source>
          <target state="translated">SublimeLinter-eslint</target>
        </trans-unit>
        <trans-unit id="6ecdca9060c4831fb381d364edb6e63d253d9af3" translate="yes" xml:space="preserve">
          <source>Submit the pull request</source>
          <target state="translated">プルリクエストを送信</target>
        </trans-unit>
        <trans-unit id="583b503cc37a3a03e3fd4c13e083b2095261ea25" translate="yes" xml:space="preserve">
          <source>Submitting a &lt;a href=&quot;pull-requests&quot;&gt;Pull Request&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;pull-requests&quot;&gt;プルリクエストの&lt;/a&gt;送信</target>
        </trans-unit>
        <trans-unit id="0198b462f882ff4a84867d9897d73f6245ad627e" translate="yes" xml:space="preserve">
          <source>Such as:</source>
          <target state="translated">などなど。</target>
        </trans-unit>
        <trans-unit id="3374f6918890228b021e90be8c3993cedad5f95b" translate="yes" xml:space="preserve">
          <source>Suggest using &lt;code&gt;const&lt;/code&gt; (prefer-const)</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; （prefer-const）の使用を提案する</target>
        </trans-unit>
        <trans-unit id="d7fda7e48105f11ea112f4b9190ecb9e41f8c30a" translate="yes" xml:space="preserve">
          <source>Suggest using Reflect methods where applicable (prefer-reflect)</source>
          <target state="translated">該当する場合はReflectメソッドを使用することを提案します。</target>
        </trans-unit>
        <trans-unit id="73a842e9ea440efda64fd80635a0d7967bf45ec9" translate="yes" xml:space="preserve">
          <source>Suggest using named capture group in regular expression (prefer-named-capture-group)</source>
          <target state="translated">正規表現で名前付きキャプチャグループを使用することを提案する (prefer-named-capture-group)</target>
        </trans-unit>
        <trans-unit id="28675d097f0b67789bcf9a4622cdbd9ec701d7ad" translate="yes" xml:space="preserve">
          <source>Suggest using spread syntax instead of &lt;code&gt;.apply()&lt;/code&gt;. (prefer-spread)</source>
          <target state="translated">&lt;code&gt;.apply()&lt;/code&gt; の代わりにスプレッド構文の使用を提案します。（優先スプレッド）</target>
        </trans-unit>
        <trans-unit id="3ff97015207b9f4a9f111ed9aa1e794add36b5bd" translate="yes" xml:space="preserve">
          <source>Suggest using template literals instead of string concatenation. (prefer-template)</source>
          <target state="translated">文字列の連結の代わりにテンプレートリテラルを使うことを提案します。(テンプレートを好む)</target>
        </trans-unit>
        <trans-unit id="73db0ab9a4b1b8fe9efa5f9e4facb96f6382eb3d" translate="yes" xml:space="preserve">
          <source>Suggest using the rest parameters instead of &lt;code&gt;arguments&lt;/code&gt; (prefer-rest-params)</source>
          <target state="translated">&lt;code&gt;arguments&lt;/code&gt; （prefer-rest-params）の代わりに残りのパラメーターの使用を提案する</target>
        </trans-unit>
        <trans-unit id="2eb3a8ff27b81cae5e0a8c513b02aac9cbb867f5" translate="yes" xml:space="preserve">
          <source>Suggestion &lt;code&gt;messageId&lt;/code&gt;s</source>
          <target state="translated">提案 &lt;code&gt;messageId&lt;/code&gt; 秒</target>
        </trans-unit>
        <trans-unit id="c916d9f4a8ffd629b95d93d9124a2f7c4e41d96c" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional): * &lt;code&gt;desc&lt;/code&gt; (string): The suggestion &lt;code&gt;desc&lt;/code&gt; value * &lt;code&gt;messageId&lt;/code&gt; (string): The suggestion &lt;code&gt;messageId&lt;/code&gt; value for suggestions that use &lt;code&gt;messageId&lt;/code&gt;s * &lt;code&gt;output&lt;/code&gt; (string): A code string representing the result of applying the suggestion fix to the input code</source>
          <target state="translated">エラーオブジェクトに &lt;code&gt;suggestions&lt;/code&gt; キーを定義することで、提案をテストできます。 （すべてはオプションです）、次のされている提案をチェックするためのオプション：* &lt;code&gt;desc&lt;/code&gt; （文字列）：提案 &lt;code&gt;desc&lt;/code&gt; 値* &lt;code&gt;messageId&lt;/code&gt; です（文字列）：提案の &lt;code&gt;messageId&lt;/code&gt; の提案のための値を使用すること &lt;code&gt;messageId&lt;/code&gt; S * &lt;code&gt;output&lt;/code&gt; Aコード：（文字列）入力コードに提案修正を適用した結果を表す文字列</target>
        </trans-unit>
        <trans-unit id="3e50b8781a635b4ef2043bf1c55b61ebd430b444" translate="yes" xml:space="preserve">
          <source>Summary formatter</source>
          <target state="translated">サマリーフォーマッタ</target>
        </trans-unit>
        <trans-unit id="f728bb607703d5d8840e57203c2748461be1c478" translate="yes" xml:space="preserve">
          <source>Supplied callback names</source>
          <target state="translated">供給されたコールバック名</target>
        </trans-unit>
        <trans-unit id="9e4bceec48f473d3d0d75720f392d38042d15367" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;scopeManager&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;scopeManager&lt;/code&gt; will provide an &lt;code&gt;eslintScopeManager: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">&lt;code&gt;scopeManager&lt;/code&gt; のサポートは、ESLint v4.14.0で追加されました。サポートESLintバージョン &lt;code&gt;scopeManager&lt;/code&gt; が提供されます &lt;code&gt;eslintScopeManager: true&lt;/code&gt; でプロパティ &lt;code&gt;parserOptions&lt;/code&gt; 、特徴検出のために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d3be2b0d911459b5814d53e32d33fa047f7443bd" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;visitorKeys&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;visitorKeys&lt;/code&gt; will provide an &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">&lt;code&gt;visitorKeys&lt;/code&gt; のサポートはESLint v4.14.0で追加されました。サポートESLintバージョン &lt;code&gt;visitorKeys&lt;/code&gt; が提供されます &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; の不動産 &lt;code&gt;parserOptions&lt;/code&gt; 特徴検出のために使用することができ、。</target>
        </trans-unit>
        <trans-unit id="998fadcd171167b554bf2c08de343941a1465d16" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="translated">SwitchCase</target>
        </trans-unit>
        <trans-unit id="3253b8236b095baad85b618af991aec7e4b807ea" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification</source>
          <target state="translated">シンボルオブジェクト仕様</target>
        </trans-unit>
        <trans-unit id="4b8745ced25b460b42f0ffff119fb7e742454610" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification: Symbol description</source>
          <target state="translated">シンボルオブジェクトの仕様。シンボルの説明</target>
        </trans-unit>
        <trans-unit id="5c1a0f585424dee7b8554275b5954f6b460c63ba" translate="yes" xml:space="preserve">
          <source>Syntastic</source>
          <target state="translated">Syntastic</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb44ac0ce6df50699361a74b6a78b3bcf6d27e3" translate="yes" xml:space="preserve">
          <source>Tabs: jQuery</source>
          <target state="translated">タブ:jQuery</target>
        </trans-unit>
        <trans-unit id="b56e0af9912b57fe07bd022ded51e9d34177d6b8" translate="yes" xml:space="preserve">
          <source>Template literals (MDN)</source>
          <target state="translated">テンプレートリテラル(MDN</target>
        </trans-unit>
        <trans-unit id="3760c9870e77d722186e405789b255d1fc4397f6" translate="yes" xml:space="preserve">
          <source>Temporal Dead Zone</source>
          <target state="translated">時間的不感帯</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="40735bc727ae1db7f555635000520d9343037f8c" translate="yes" xml:space="preserve">
          <source>Ternary Operator</source>
          <target state="translated">三項演算子</target>
        </trans-unit>
        <trans-unit id="73ae0e17a1d0167b6266afc4c66bc3cd1157963b" translate="yes" xml:space="preserve">
          <source>Ternary Operator: &lt;code&gt;?:&lt;/code&gt;</source>
          <target state="translated">三項演算子： &lt;code&gt;?:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="aa91a5a624af7d8296afa52521f68fe2c22fbe6f" translate="yes" xml:space="preserve">
          <source>Testing Suggestions</source>
          <target state="translated">テストの提案</target>
        </trans-unit>
        <trans-unit id="d720305ae3061bec3ca536cef916c4141b41323c" translate="yes" xml:space="preserve">
          <source>TextMate 2:</source>
          <target state="translated">TextMate 2.</target>
        </trans-unit>
        <trans-unit id="9d341ea56c03bc023005aac875b425f57d6428b2" translate="yes" xml:space="preserve">
          <source>That works fine when you don't want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It's considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the &lt;code&gt;/falls?\s?through/i&lt;/code&gt; regular expression:</source>
          <target state="translated">フォールスルーが不要な場合は問題ありませんが、フォールスルーが意図的なものである場合、言語でそれを示す方法はありません。 &lt;code&gt;/falls?\s?through/i&lt;/code&gt; 正規表現に一致するコメントを使用して、フォールスルーが意図的であることを常に示すことがベストプラクティスと見なされています。</target>
        </trans-unit>
        <trans-unit id="6ae09c7ad75a7a8f54ad7a675b476d63d3d4806c" translate="yes" xml:space="preserve">
          <source>The &quot;max&quot; object property is optional (default: 1).</source>
          <target state="translated">max &quot;オブジェクトプロパティはオプションです(デフォルトは1)。</target>
        </trans-unit>
        <trans-unit id="b16353fd54f2f4a9ee74c0161bfe191f44ad0ae0" translate="yes" xml:space="preserve">
          <source>The 1st option is &lt;code&gt;&quot;asc&quot;&lt;/code&gt; or &lt;code&gt;&quot;desc&quot;&lt;/code&gt;.</source>
          <target state="translated">最初のオプションは &lt;code&gt;&quot;asc&quot;&lt;/code&gt; または &lt;code&gt;&quot;desc&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="45905a15b4e98684c96286c7a579ca2e9122122b" translate="yes" xml:space="preserve">
          <source>The 2nd option is an object which has 3 properties.</source>
          <target state="translated">2つ目のオプションは、3つのプロパティを持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="29ce05a67597e0643fcdc8100c44eaa9d1419d89" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#using-rule-metadata&quot;&gt;Using Rule metadata&lt;/a&gt; example shows how to use the &lt;code&gt;data&lt;/code&gt; object in a custom formatter. See the &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt; page for more information about rules.</source>
          <target state="translated">&lt;a href=&quot;#using-rule-metadata&quot;&gt;ルールのメタデータ&lt;/a&gt;の使用例は、カスタムフォーマッタで &lt;code&gt;data&lt;/code&gt; オブジェクトを使用する方法を示しています。&lt;a href=&quot;working-with-rules&quot;&gt;ルールの&lt;/a&gt;詳細については、「ルールの使用」ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="5b1896cdaec6c51ba10667d39b756eedd5551922" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../rules/no-undef&quot;&gt;no-undef&lt;/a&gt; rule will warn on variables that are accessed but not defined within the same file. If you are using global variables inside of a file then it's worthwhile to define those globals so that ESLint will not warn about their usage. You can define global variables either using comments inside of a file or in the configuration file.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-undef&quot;&gt;無undefを&lt;/a&gt;ルールにアクセスしても同じファイル内で定義されていない変数に警告します。ファイル内でグローバル変数を使用している場合、ESLintがその使用について警告しないように、それらのグローバルを定義することは価値があります。ファイル内または構成ファイル内のコメントを使用して、グローバル変数を定義できます。</target>
        </trans-unit>
        <trans-unit id="047eac5397259d4ad14b6243aa57de4dae1a614d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript 5 specification&lt;/a&gt; makes it clear that both &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">&lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScriptの5仕様では、&lt;/a&gt;それは両方のことが明らかになり &lt;code&gt;Math&lt;/code&gt; と &lt;code&gt;JSON&lt;/code&gt; を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="1a35e82f6be72b6be61cd4a886d86c858f228012" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript 2015 specification&lt;/a&gt; makes it clear that &lt;code&gt;Reflect&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">&lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScriptの2015仕様では、&lt;/a&gt;それがあることが明らかになり &lt;code&gt;Reflect&lt;/code&gt; 呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="81c1cb58f2de5577eeb597a1918e8584414249b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;always&quot;&lt;/code&gt; option (default) enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; in every situation (except when you opt-in to more specific handling of &lt;code&gt;null&lt;/code&gt; [see below]).</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; オプション（デフォルト）の使用強制 &lt;code&gt;===&lt;/code&gt; と &lt;code&gt;!==&lt;/code&gt; （あなたがオプトインする際の取り扱いがより具体的に除いて、すべての状況で &lt;code&gt;null&lt;/code&gt; [下記参照]）。</target>
        </trans-unit>
        <trans-unit id="0234b9d3610f2d5c0d1890c03b252abd7cefab7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; rule is directly inspired by the Airbnb &lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS Style Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; ルールは直接Airbnbに触発された&lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JSスタイルガイド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d82ce97069386b44a427b995707c718f99559346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option will check for redeclaration of built-in globals in global scope.</source>
          <target state="translated">&lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; オプションは、組み込みのグローバルグローバルスコープでの再宣言をチェックします。</target>
        </trans-unit>
        <trans-unit id="258321fe90655819f22eef5ffbb3f4fe1c32eec4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.</source>
          <target state="translated">&lt;code&gt;&quot;empty&quot;&lt;/code&gt; の例外懸念空の括弧、とは、最初のオプションを反転、他の例外と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="3b02d6c73ff7b77ebcbfdce42ad57c73245465b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; configuration contains many of the same default rule settings from 0.x, but not all. These rules are no longer on by default, so you should review your settings to ensure they are still as you expect:</source>
          <target state="translated">&lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; 設定がすべてではありませんが、0.xであるから、同じデフォルトルールの設定の多くが含まれています。これらのルールはデフォルトでは無効になっているため、設定を見直して、期待どおりであることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="5913f4b04b709c4a37956c8f0a355bb3e59d6045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; の値は、規則の例外と見なされる文字列パターンの配列です。最初の引数が &lt;code&gt;&quot;never&quot;&lt;/code&gt; の場合、例外は無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e34f8d72a6e0abd2b6cd46f7f53eb977a9c25ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a configuration file enables this rule.</source>
          <target state="translated">構成ファイルの &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; プロパティは、このルールを有効にします。</target>
        </trans-unit>
        <trans-unit id="ec76be0c108097d6838a0ac4fbb38e16745647e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; value is an array of string patterns which are considered markers for docblock-style comments, such as an additional &lt;code&gt;/&lt;/code&gt;, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters. The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; array will apply regardless of the value of the first argument, e.g. &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;markers&quot;&lt;/code&gt; 値は、そのような追加などのdocblockスタイルのコメントのマーカー、と考えられている文字列パターンの配列である &lt;code&gt;/&lt;/code&gt; 追加文字を持たなければならないdoxygenは、vsdoc、等によって読み取ら示す資料を用い、。 &lt;code&gt;&quot;markers&quot;&lt;/code&gt; 配列は、例えば、関係なく、最初の引数の値の適用されないだろう &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5df38b7cf9b33c3fdba20972fad0ce2f4e5d6596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;never&quot;&lt;/code&gt; option ignores &lt;code&gt;const&lt;/code&gt; variable initializations.</source>
          <target state="translated">&lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションは無視 &lt;code&gt;const&lt;/code&gt; 変数の初期化を。</target>
        </trans-unit>
        <trans-unit id="665c133a9b40f2ee21d1a8c214ccb5968d500388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;property&quot;&lt;/code&gt; option requires the dot to be on the same line as the property.</source>
          <target state="translated">&lt;code&gt;&quot;property&quot;&lt;/code&gt; オプションでは、プロパティと同じライン上にあるように、ドットが必要です。</target>
        </trans-unit>
        <trans-unit id="a8917282c9e6924d8221f022d420501eebe8dd61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;global&quot;&lt;/code&gt; option if ESLint considers a file to be a &lt;strong&gt;Node.js&lt;/strong&gt; or &lt;strong&gt;CommonJS&lt;/strong&gt; module because the configuration specifies either of the following:</source>
          <target state="translated">&lt;code&gt;&quot;safe&quot;&lt;/code&gt; へのオプション対応 &lt;code&gt;&quot;global&quot;&lt;/code&gt; ESLintがするファイルを考えればオプション&lt;strong&gt;のNode.js&lt;/strong&gt;や&lt;strong&gt;CommonJS&lt;/strong&gt;モジュールために以下のいずれかの設定を指定：</target>
        </trans-unit>
        <trans-unit id="335d3d2aadf4b8cd6d235ef1c1ab85d30c55e2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;smart&quot;&lt;/code&gt; option enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; except for these cases:</source>
          <target state="translated">&lt;code&gt;&quot;smart&quot;&lt;/code&gt; オプションは使用強制 &lt;code&gt;===&lt;/code&gt; と &lt;code&gt;!==&lt;/code&gt; これらのケースを除いては。</target>
        </trans-unit>
        <trans-unit id="757da32c45a012c497f6f5b85d15dfd792bd342d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive applies to the scope in which it appears and all inner scopes contained within that scope. Therefore, using the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in one of these inner scopes is unnecessary.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; ディレクティブは、それが出現するスコープと、そのスコープ内に含まれるすべての内部スコープに適用されます。そのため、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; これらの内部スコープのいずれかにあるディレクティブは不要です。</target>
        </trans-unit>
        <trans-unit id="34c46639b01057382b6b9a17c0ce73084f411d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixed problems reported by this rule.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;の &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告された問題を自動的に修正しました。</target>
        </trans-unit>
        <trans-unit id="8c7a3a09ba8e134da02e62a2b097beafa2f467a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;command line&lt;/a&gt; can automatically fix some of the problems reported by this rule.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;コマンドライン&lt;/a&gt;の &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告された問題の一部を自動的に修正できます。</target>
        </trans-unit>
        <trans-unit id="1ad561df4151ebb76e63f840b52ab0f6ae886e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a &lt;code&gt;typeof&lt;/code&gt; expression, or if both operands are literals with the same type.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告されたいくつかの問題を自動的に修正します。オペランドの1つが &lt;code&gt;typeof&lt;/code&gt; 式である場合、または両方のオペランドが同じタイプのリテラルである場合にのみ、問題が修正されます。</target>
        </trans-unit>
        <trans-unit id="cfc6a5d47bc7a83b2362366b0d3b2b186202a528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; is corrected to &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt;), but multiple lines are not reordered.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、このルールによって報告されたいくつかの問題を自動的に修正します &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; 行の複数のメンバーは自動的にソートされます（たとえば、 'foo.js'からのインポート{b、a}は &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt; 修正されます'foo.js'から）、ただし複数行は並べ替えられません。</target>
        </trans-unit>
        <trans-unit id="6ee7ab0d0ef494b690762e7c764488b7d5a3c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line does not insert new &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but only removes unneeded statements.</source>
          <target state="translated">コマンドラインの &lt;code&gt;--fix&lt;/code&gt; オプションは、新しい &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ステートメントを挿入せず、不要なステートメントのみを削除します。</target>
        </trans-unit>
        <trans-unit id="651165c0cfafa6ed91a01ff2f3a275112628a26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; field gives you credit for having created the file.</source>
          <target state="translated">&lt;code&gt;@author&lt;/code&gt; のフィールドには、ファイルを作成したために、あなたに信用を与えます。</target>
        </trans-unit>
        <trans-unit id="8d050940abfee32adbac0c6eb00b3c5418a91500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method has changed to work more like &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt;. In v2.x, &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; warned about ignored files by default and didn't have a way to opt-out of those warnings whereas &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; did not warn about ignored files by default and allowed you to opt-in to warning about them. The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method now also does not warn about ignored files by default and allows you to opt-in with a new, third argument (a boolean, &lt;code&gt;true&lt;/code&gt; to warn about ignored files and &lt;code&gt;false&lt;/code&gt; to not warn).</source>
          <target state="translated">&lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; メソッドは、より多くのように動作するように変更されました &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; 。 v2.xでは、 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; はデフォルトで無視されたファイルについて警告し、それらの警告をオプトアウトする方法がありませんでしたが、 &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; はデフォルトで無視されたファイルについて警告せず、ユーザーがそれらについて警告します。 &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; メソッドは、現在もデフォルトで無視されたファイルについて警告とすることができますしませんオプトイン（ブール、新しい、第三引数を持つ &lt;code&gt;true&lt;/code&gt; 無視されたファイルとについて警告する &lt;code&gt;false&lt;/code&gt; 警告しないように）。</target>
        </trans-unit>
        <trans-unit id="cd01e52d3805d8a62d247b8499d65fa83701f436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; は、コンストラクタで、あなたが使用するオプションに渡すことによって、新しいインスタンスを作成することができます。使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="36a91b8e915150c788d9aa4f17ae522dfcd51ab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; のオブジェクト</target>
        </trans-unit>
        <trans-unit id="cb04e559741ded700b750c763c58609e67280d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; type represents the core functionality of the CLI except that it reads nothing from the command line and doesn't output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the &lt;code&gt;Linter&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; のタイプは、コマンドラインから何も読まないと、デフォルトでは何も出力しないことを除き、CLIのコア機能を表します。代わりに、CLIに渡される引数の多く（すべてではない）を受け入れます。構成ファイルとソースファイルの両方を読み取り、 &lt;code&gt;Linter&lt;/code&gt; オブジェクトに渡される環境を管理します。</target>
        </trans-unit>
        <trans-unit id="7c04bc333459294a802b327b5827d0068e581953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt;, &lt;code&gt;SourceCode&lt;/code&gt;, and &lt;code&gt;RuleTester&lt;/code&gt; modules from ESLint's Node.js API are now ES2015 classes. This will not break any documented behavior, but it does have some observable effects (for example, the methods on &lt;code&gt;CLIEngine.prototype&lt;/code&gt; are now non-enumerable).</source>
          <target state="translated">ESLintのNode.js API の &lt;code&gt;CLIEngine&lt;/code&gt; 、 &lt;code&gt;SourceCode&lt;/code&gt; 、および &lt;code&gt;RuleTester&lt;/code&gt; モジュールがES2015クラスになりました。これにより、文書化された動作が中断されることはありませんが、目に &lt;code&gt;CLIEngine.prototype&lt;/code&gt; 影響がいくつかあります（たとえば、CLIEngine.prototypeのメソッドは列挙できない）。</target>
        </trans-unit>
        <trans-unit id="5c9b20fb5b6252830eb519435c0219003fa37dba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="1d37bb325bb6d585cfb9ad4d89a7dcea80388f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object does the actual evaluation of the JavaScript code. It doesn't do any filesystem operations, it simply parses and reports on the code. In particular, the &lt;code&gt;Linter&lt;/code&gt; object does not process configuration objects or files. The &lt;code&gt;Linter&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; オブジェクトは、JavaScriptコードの実際の評価を行います。ファイルシステムの操作は行わず、単にコードを解析して報告します。特に、 &lt;code&gt;Linter&lt;/code&gt; オブジェクトは構成オブジェクトまたはファイルを処理しません。 &lt;code&gt;Linter&lt;/code&gt; 、コンストラクタで、あなたが使用するオプションに渡すことによって、新しいインスタンスを作成することができます。使用可能なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6b3697f8c0f76c13f38759df3544e6dd3e1c83db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node must have &lt;code&gt;raw&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;Literal&lt;/code&gt; ノードが持っている必要があり &lt;code&gt;raw&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="6199c13da52a235cf644776c5b0a32c08d65bf50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node:</source>
          <target state="translated">&lt;code&gt;Literal&lt;/code&gt; ノード：</target>
        </trans-unit>
        <trans-unit id="b0e719a9b8eee0a7e784f9393820037edebb8384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor is used to create new generic objects in JavaScript, such as:</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; コンストラクタは、次のようなJavaScriptで新しい汎用オブジェクトを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="26fa98a82c9b4be9d13ddb25b7b39470825fc8b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node must have &lt;code&gt;tokens&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; properties. Both properties are an array of the below Token interface.</source>
          <target state="translated">&lt;code&gt;Program&lt;/code&gt; ノードが持っている必要があり &lt;code&gt;tokens&lt;/code&gt; と &lt;code&gt;comments&lt;/code&gt; プロパティを。両方のプロパティは、以下のトークンインターフェイスの配列です。</target>
        </trans-unit>
        <trans-unit id="bcf1f4affa5a7dea7c1e9653f4ab221ce29cdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node:</source>
          <target state="translated">&lt;code&gt;Program&lt;/code&gt; ノード：</target>
        </trans-unit>
        <trans-unit id="70ccd03ac71f531e40460156a41567e273392912" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor function, e.g., &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; or &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RegExp&lt;/code&gt; オブジェクトのコンストラクタ関数、例えば、 &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; または &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18ac7817ce0d8138e79809c23852f9087177a2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester#run()&lt;/code&gt; method is used to run the tests. It should be passed the following arguments:</source>
          <target state="translated">&lt;code&gt;RuleTester#run()&lt;/code&gt; メソッドは、テストを実行するために使用されます。次の引数を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e3f4c9bab5a0c5a3adc959e3a3fdfbbb58b5ebf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; constructor accepts an optional object argument, which can be used to specify defaults for your test cases. For example, if all of your test cases use ES2015, you can set it as a default:</source>
          <target state="translated">&lt;code&gt;RuleTester&lt;/code&gt; のコンストラクタは、テストケースのデフォルトを指定するために使用できるオプションのオブジェクト引数を受け付けます。たとえば、すべてのテストケースでES2015を使用している場合、それをデフォルトとして設定できます。</target>
        </trans-unit>
        <trans-unit id="3a5077bac9449562ad14f14c5e522a6fd8f8637a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor strips Unicode BOM. Please note the AST also should be parsed from stripped text.</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; コンストラクタは、UnicodeのBOMを取り除きます。ASTも、ストリップされたテキストから解析する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="db75fab00b139e2cb8ebf27b845a2a26e0849306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor throws an error if the AST is missing any of the required information.</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; ASTは、必要な情報のいずれかが欠落している場合は、コンストラクタでエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1218e56286f97f65b8425325264eb5a0d40ee097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; object is the main object for getting more information about the source code being linted. You can retrieve the &lt;code&gt;SourceCode&lt;/code&gt; object at any time by using the &lt;code&gt;getSourceCode()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; オブジェクトはLINTEDされるソースコードに関する詳細情報を取得するための主な目的です。 &lt;code&gt;getSourceCode()&lt;/code&gt; メソッドを使用すると、いつでも &lt;code&gt;SourceCode&lt;/code&gt; オブジェクトを取得できます。</target>
        </trans-unit>
        <trans-unit id="479675aca73cae5c11d5d90c4454a08ce8e61d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; type represents the parsed source code that ESLint executes on. It's used internally in ESLint and is also available so that already-parsed code can be used. You can create a new instance of &lt;code&gt;SourceCode&lt;/code&gt; by passing in the text string representing the code and an abstract syntax tree (AST) in &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; format (including location information, range information, comments, and tokens):</source>
          <target state="translated">&lt;code&gt;SourceCode&lt;/code&gt; 種類はESLintがオン実行する解析されたソースコードを表します。これはESLintの内部で使用され、すでに解析済みのコードを使用できるようにすることもできます。コードを表すテキスト文字列と&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;形式の抽象構文ツリー（AST）（場所情報、範囲情報、コメント、トークンを含む）を渡すことで、 &lt;code&gt;SourceCode&lt;/code&gt; の新しいインスタンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="0f460ba3a888cb7885538cd22b45cfa2e1993d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol&lt;/code&gt; function may have an optional description:</source>
          <target state="translated">&lt;code&gt;Symbol&lt;/code&gt; 機能は、オプションの説明を持っていることがあります。</target>
        </trans-unit>
        <trans-unit id="2d21736c63a542408cd25bebb0064399dafd3380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tag&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Tag&lt;/code&gt; 、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="4017431bd4ca04209028b2fd7c8155020d0e96be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__iterator__&lt;/code&gt; property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's &lt;code&gt;for in&lt;/code&gt; and &lt;code&gt;for each&lt;/code&gt; constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:</source>
          <target state="translated">&lt;code&gt;__iterator__&lt;/code&gt; プロパティには、JavaScriptのと互換性のあるカスタムイテレータ作成するために使用することができJavaScriptにSpiderMonkeyの延長だっ &lt;code&gt;for in&lt;/code&gt; と &lt;code&gt;for each&lt;/code&gt; 構造を。ただし、このプロパティは廃止されたため、使用しないでください。これがどのように機能したかの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="5c5ed6ba19e731544b6cd87b09fe8abbca32c289" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property has been removed in ESLint v5.0, so it is no longer possible to implement rules with this functionality. However, the &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;&lt;code&gt;--report-unused-disable-directives&lt;/code&gt;&lt;/a&gt; CLI flag can be used to flag unused directive comments.</source>
          <target state="translated">&lt;code&gt;_linter&lt;/code&gt; のこの機能でルールを実装することはもはや不可能であるので、プロパティは、ESLintのV5.0で削除されていません。ただし、&lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt; &lt;code&gt;--report-unused-disable-directives&lt;/code&gt; &lt;/a&gt; CLIフラグを使用して、未使用のディレクティブコメントにフラグを付けることができます。</target>
        </trans-unit>
        <trans-unit id="e9b2ca0a9deb95b8d07936a6b72107ed5085c1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property on rule context objects has been removed</source>
          <target state="translated">ルールコンテキストオブジェクトの &lt;code&gt;_linter&lt;/code&gt; プロパティが削除されました</target>
        </trans-unit>
        <trans-unit id="1540bf038d822cce14da545ed574c51549eac1e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; option can take additional configuration through the &lt;code&gt;beforeColon&lt;/code&gt;, &lt;code&gt;afterColon&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;on&lt;/code&gt; options.</source>
          <target state="translated">&lt;code&gt;align&lt;/code&gt; オプションはを通じて、追加の構成を取ることができ &lt;code&gt;beforeColon&lt;/code&gt; 、 &lt;code&gt;afterColon&lt;/code&gt; 、 &lt;code&gt;mode&lt;/code&gt; 、および &lt;code&gt;on&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="d05ba21959dd3bd33b13539a51873b945545c638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow&lt;/code&gt; option is an array of identifier names for which shadowing is allowed. For example, &lt;code&gt;&quot;resolve&quot;&lt;/code&gt;, &lt;code&gt;&quot;reject&quot;&lt;/code&gt;, &lt;code&gt;&quot;done&quot;&lt;/code&gt;, &lt;code&gt;&quot;cb&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;allow&lt;/code&gt; オプションがシャドーイングが許可された識別子名の配列です。たとえば、 &lt;code&gt;&quot;resolve&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;reject&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;done&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;cb&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a3afd6725b2244693e0d6e156a1e44afd3600d41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option has three settings:</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; オプションには3つの設定があります。</target>
        </trans-unit>
        <trans-unit id="4cadc8103349def3aa303140050911f6d8949c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.</source>
          <target state="translated">&lt;code&gt;argsIgnorePattern&lt;/code&gt; オプションを指定例外が使用されていることをチェックしない：名前引数が正規表現パターンに一致します。たとえば、名前がアンダースコアで始まる変数。</target>
        </trans-unit>
        <trans-unit id="6bb74f27a7dcda830e7e3515e710fd44a61861b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind()&lt;/code&gt; method is used to create functions with specific &lt;code&gt;this&lt;/code&gt; values and, optionally, binds arguments to specific values. When used to specify the value of &lt;code&gt;this&lt;/code&gt;, it's important that the function actually uses &lt;code&gt;this&lt;/code&gt; in its function body. For example:</source>
          <target state="translated">&lt;code&gt;bind()&lt;/code&gt; メソッドは特定して関数を作成するために使用され &lt;code&gt;this&lt;/code&gt; 値と、必要に応じて、特定の値に引数を結合します。 &lt;code&gt;this&lt;/code&gt; の値を指定するために使用する場合、関数が実際に &lt;code&gt;this&lt;/code&gt; を関数本体で使用することが重要です。例えば：</target>
        </trans-unit>
        <trans-unit id="23c983ff96826f2c7de4f17b4756b8bba9663c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block-scoped-var&lt;/code&gt; rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.</source>
          <target state="translated">&lt;code&gt;block-scoped-var&lt;/code&gt; 変数は、それらが定義されたブロックの外側を使用する場合のルールは、警告を生成します。これは、Cスタイルのブロックスコープをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="53bdd73b3413849fa66b3556c625138c24847f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break outer&lt;/code&gt; statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the &lt;code&gt;outer&lt;/code&gt; label was applied. If this statement was changed to be just &lt;code&gt;break&lt;/code&gt;, control would flow back to the outer &lt;code&gt;while&lt;/code&gt; statement and an infinite loop would result.</source>
          <target state="translated">&lt;code&gt;break outer&lt;/code&gt; のブレークステートメントは、 &lt;code&gt;outer&lt;/code&gt; ラベルが適用された後に制御が次のステートメントに返されるため、このコードが無限ループにならないようにします。このステートメントが単に &lt;code&gt;break&lt;/code&gt; に変更された場合、制御は外側の &lt;code&gt;while&lt;/code&gt; ステートメントに戻り、無限ループが発生します。</target>
        </trans-unit>
        <trans-unit id="e35e957bc5c45db7810cd6dc9b85c777f96b5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browser&lt;/code&gt; environment has many built-in global variables (for example, &lt;code&gt;top&lt;/code&gt;). Some of built-in global variables cannot be redeclared.</source>
          <target state="translated">&lt;code&gt;browser&lt;/code&gt; 環境は、多く組み込まれている（例えば、グローバル変数 &lt;code&gt;top&lt;/code&gt; ）。一部の組み込みグローバル変数は再宣言できません。</target>
        </trans-unit>
        <trans-unit id="9c91130ea2cd4ecd093fc52993fc6956e053783c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;builtinGlobals&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; by default. If it is &lt;code&gt;true&lt;/code&gt;, the rule prevents shadowing of built-in global variables: &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;builtinGlobals&lt;/code&gt; のオプションがある &lt;code&gt;false&lt;/code&gt; デフォルトでは。もしそうであれば &lt;code&gt;true&lt;/code&gt; 、ルールの防止は、シャドウイングのビルトイングローバル変数： &lt;code&gt;Object&lt;/code&gt; 、 &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; ように、と。</target>
        </trans-unit>
        <trans-unit id="2e369ffae5876263cbc79c574ac64d2933232f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/apply/bind&lt;/code&gt; method of the function is called directly.</source>
          <target state="translated">関数の &lt;code&gt;call/apply/bind&lt;/code&gt; メソッドが直接呼び出されます。</target>
        </trans-unit>
        <trans-unit id="980901839cc98d894fc636088c44f1085352a1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrors&lt;/code&gt; option is used for &lt;code&gt;catch&lt;/code&gt; block arguments validation.</source>
          <target state="translated">&lt;code&gt;caughtErrors&lt;/code&gt; オプションが使用され &lt;code&gt;catch&lt;/code&gt; ブロック引数の検証。</target>
        </trans-unit>
        <trans-unit id="ce4f2ac1f670fbb48541447196e9d9315225fdf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.</source>
          <target state="translated">&lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; の名前が正規表現パターンに一致キャッチ引数：オプションを指定例外が使用されていることをチェックすることではありません。たとえば、名前が文字列 'ignore'で始まる変数。</target>
        </trans-unit>
        <trans-unit id="8b0cd31aec7aa29af2f5a3abfb81a77e7a641899" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;cli&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="6a94eb63df1e6ac352e9b186b0e6694f22a6e525" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object is the API for the command line interface. Literally, the &lt;code&gt;bin/eslint.js&lt;/code&gt; file simply passes arguments to the &lt;code&gt;cli&lt;/code&gt; object and then sets &lt;code&gt;process.exitCode&lt;/code&gt; to the returned exit code.</source>
          <target state="translated">&lt;code&gt;cli&lt;/code&gt; オブジェクトは、コマンドライン・インタフェースのためのAPIです。文字通り、 &lt;code&gt;bin/eslint.js&lt;/code&gt; ファイルは単に &lt;code&gt;cli&lt;/code&gt; オブジェクトに引数を渡し &lt;code&gt;process.exitCode&lt;/code&gt; から、process.exitCodeを返された終了コードに設定します。</target>
        </trans-unit>
        <trans-unit id="cdf300be717f0ef1b9048b6ac9761ea3a6565f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;comma-dangle&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">&lt;code&gt;comma-dangle&lt;/code&gt; ルールは現在、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="b16f7c12a77c8c69c18c6cd7c66a8ffbf55f6b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context.getScope()&lt;/code&gt; method now returns more proper scopes</source>
          <target state="translated">&lt;code&gt;context.getScope()&lt;/code&gt; メソッドは現在、より適切なスコープを返します。</target>
        </trans-unit>
        <trans-unit id="922325a01666733ad05e06be2a7e01ae31e121a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object contains additional functionality that is helpful for rules to do their jobs. As the name implies, the &lt;code&gt;context&lt;/code&gt; object contains information that is relevant to the context of the rule. The &lt;code&gt;context&lt;/code&gt; object has the following properties:</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; オブジェクトは、自分の仕事をするためのルールのために有用である追加機能が含まれています。名前が示すように、 &lt;code&gt;context&lt;/code&gt; オブジェクトには、ルールのコンテキストに関連する情報が含まれています。 &lt;code&gt;context&lt;/code&gt; オブジェクトは、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="42b1848493047b28e69ceb4cc9991185d8cabd5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as &lt;code&gt;if&lt;/code&gt; should be used instead.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; ステートメントは、現在またはラベル付きループの現在の反復でのステートメントの実行を終了し、次の反復でループの実行を継続します。誤って使用すると、コードのテストや読み取り、保守が難しくなります。 &lt;code&gt;if&lt;/code&gt; などの構造化制御フローステートメントを代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b85184b855dad09a62d467252a42e39fc124a249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; Argument</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 引数</target>
        </trans-unit>
        <trans-unit id="78eb3b7cfb10f4790691c3c7134c3e3e580dff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debugger&lt;/code&gt; statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain &lt;code&gt;debugger&lt;/code&gt;, as it will cause the browser to stop executing code and open an appropriate debugger.</source>
          <target state="translated">&lt;code&gt;debugger&lt;/code&gt; 文は実行を停止し、コード内の現在のポイントでデバッガを起動するために実行するJavaScript環境を伝えるために使用されています。これは、最新のデバッグおよび開発ツールの登場により、良い習慣としては支持されなくなりました。ブラウザーでコードの実行が停止され、適切なデバッガーが開かれるため、本番用コードには &lt;code&gt;debugger&lt;/code&gt; を含めないでください。</target>
        </trans-unit>
        <trans-unit id="64766836102f731f14e0abe461d47d745b9f3795" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 文のクラスには、次の形式を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="0d9bf1e7a06807b0d9dd6dee731608e28dac63d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; flag has been replaced by a &lt;code&gt;sourceType&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; which can be set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; for ES6 modules.</source>
          <target state="translated">&lt;code&gt;ecmaFeatures.modules&lt;/code&gt; のフラグに置き換えられてい &lt;code&gt;sourceType&lt;/code&gt; 下プロパティ &lt;code&gt;parserOptions&lt;/code&gt; に設定することができ &lt;code&gt;&quot;script&quot;&lt;/code&gt; （デフォルト）または &lt;code&gt;&quot;module&quot;&lt;/code&gt; ES6モジュール用。</target>
        </trans-unit>
        <trans-unit id="114daf2c10a876d1a0119d1127fb9645cebbe320" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures&lt;/code&gt; property is now under a top-level &lt;code&gt;parserOptions&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;ecmaFeatures&lt;/code&gt; のプロパティは、トップレベルの下に今ある &lt;code&gt;parserOptions&lt;/code&gt; のプロパティ。</target>
        </trans-unit>
        <trans-unit id="e77d2b26470f6a64bf6847f6dfa1ccf21481c369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaVersion&lt;/code&gt; parser option is set to something other than a number, such as the string &lt;code&gt;&quot;2015&quot;&lt;/code&gt;. (Previously, a non-number option would simply be ignored.)</source>
          <target state="translated">&lt;code&gt;ecmaVersion&lt;/code&gt; のパーサのオプションは、文字列として、数以外の何かに設定されている &lt;code&gt;&quot;2015&quot;&lt;/code&gt; 。（以前は、非数値オプションは単に無視されていました。）</target>
        </trans-unit>
        <trans-unit id="e8001be05979a363d68c0b97cd9a4ec677d66ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend a popular style guide (for example, &lt;code&gt;eslint-config-standard&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;eslint --init&lt;/code&gt; あなたは人気のスタイルガイド（例えば、拡張することができますので、コマンドは、コンフィギュレーションを作成することができます &lt;code&gt;eslint-config-standard&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="76fc19e1d805a61118a2c1a81a45040f447d9365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend the recommended rules.</source>
          <target state="translated">&lt;code&gt;eslint --init&lt;/code&gt; あなたが推奨ルールを拡張することができるようにコマンドは、コンフィギュレーションを作成することができます。</target>
        </trans-unit>
        <trans-unit id="c4229b7a6eefed924206c9eb78fcfba7b8bfcf1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted for non-scoped packages</source>
          <target state="translated">&lt;code&gt;eslint-plugin-&lt;/code&gt; プレフィックスは、非スコープのパッケージのために省略することができます</target>
        </trans-unit>
        <trans-unit id="61707a8cc213e8d436fdfb7b834fbdfa71c295b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-tester&lt;/code&gt; module, which has long been the primary tester for ESLint rules, has now been moved into the &lt;code&gt;eslint&lt;/code&gt; module. This was the result of a difficult relationship between these two modules that created circular dependencies and was causing a lot of problems in rule tests. Moving the tester into the &lt;code&gt;eslint&lt;/code&gt; module fixed a lot of those issues.</source>
          <target state="translated">&lt;code&gt;eslint-tester&lt;/code&gt; 長いESLintルールの主要テスターされているモジュールは、現在に移動された &lt;code&gt;eslint&lt;/code&gt; のモジュール。これは、循環依存関係を作成し、ルールテストで多くの問題を引き起こしていた、これら2つのモジュール間の困難な関係の結果でした。テスターを &lt;code&gt;eslint&lt;/code&gt; モジュールに移動すると、これらの問題の多くが修正されました。</target>
        </trans-unit>
        <trans-unit id="8900c3358f2163358ec0b84e6c957c7b7bbbb087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; object (deprecated) is an instance of the &lt;code&gt;Linter&lt;/code&gt; class as defined &lt;a href=&quot;#linter&quot;&gt;above&lt;/a&gt;. &lt;code&gt;eslint.linter&lt;/code&gt; exists for backwards compatibility, but we do not recommend using it because any mutations to it are shared among every module that uses &lt;code&gt;eslint&lt;/code&gt;. Instead, please create your own instance of &lt;code&gt;eslint.Linter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eslint.linter&lt;/code&gt; のオブジェクト（非推奨）のインスタンスである &lt;code&gt;Linter&lt;/code&gt; 定義されるようなクラス&lt;a href=&quot;#linter&quot;&gt;の上&lt;/a&gt;。 &lt;code&gt;eslint.linter&lt;/code&gt; は下位互換性のために存在しますが、これに対する変更は &lt;code&gt;eslint&lt;/code&gt; を使用するすべてのモジュール間で共有されるため、使用はお勧めしません。代わりに、 &lt;code&gt;eslint.Linter&lt;/code&gt; の独自のインスタンスを作成してください。</target>
        </trans-unit>
        <trans-unit id="d379a4d77b2607390afe7d33df57381bc7286ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; property is now non-enumerable</source>
          <target state="translated">&lt;code&gt;eslint.linter&lt;/code&gt; のプロパティは現在、非可算であります</target>
        </trans-unit>
        <trans-unit id="a9a4221ba818f86c812a9ad87857f70725c68eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; scope analysis property has been removed</source>
          <target state="translated">&lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; スコープ解析プロパティが削除されました</target>
        </trans-unit>
        <trans-unit id="127d896dfbc583589aff8498ff51854129f845e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptMethods&lt;/code&gt; option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use &lt;code&gt;this&lt;/code&gt; inside the function body. In this case, you can add that method to ignore in the warnings.</source>
          <target state="translated">&lt;code&gt;exceptMethods&lt;/code&gt; のオプションでは、警告を無視したい対象のメソッド名の配列を渡すことができます。たとえば、メソッドを（静的メソッドとしてではなく）通常の関数として上書きする必要があり、関数本体内で &lt;code&gt;this&lt;/code&gt; を使用しない外部ライブラリの仕様がある場合があります。この場合、警告で無視するメソッドを追加できます。</target>
        </trans-unit>
        <trans-unit id="8077695416ecc34868ba7b9a8633341faa182787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptions&lt;/code&gt; option allows you to pass an array of methods names you'd like to continue to use in the old style.</source>
          <target state="translated">&lt;code&gt;exceptions&lt;/code&gt; オプションでは、古いスタイルで使い続けたいメソッド名の配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="252d44a66cbab7b2a0ad26d5562589f321a9a54d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been deprecated</source>
          <target state="translated">&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; のオプションは廃止されました</target>
        </trans-unit>
        <trans-unit id="837260e2c2d2bb0e44d170f7a8580e9382461154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; to enable all core rules in the currently installed version of ESLint. The set of core rules can change at any minor or major version of ESLint.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティ値があることができる &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; ESLintの現在インストールされているバージョンですべてのコア・ルールを有効にします。コアルールのセットは、ESLintのマイナーバージョンまたはメジャーバージョンで変更できます。</target>
        </trans-unit>
        <trans-unit id="6b1c15d923b6c7281b7fb8242da0395d1224b9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be an absolute or relative path to a base &lt;a href=&quot;#using-configuration-files&quot;&gt;configuration file&lt;/a&gt;. ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値は、ベースへの絶対または相対パスとすることができる&lt;a href=&quot;#using-configuration-files&quot;&gt;構成ファイル&lt;/a&gt;。ESLintは、ベース構成ファイルへの相対パスを、それを使用する構成ファイルへの相対パスで解決します。</target>
        </trans-unit>
        <trans-unit id="5fa785db2037479c7f03a5b52934be5b58f71e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can consist of:</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値は、で構成されます。</target>
        </trans-unit>
        <trans-unit id="003522290cdebe1b2fbd30a1f0cbdc59c0904961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値を省略することができます &lt;code&gt;eslint-config-&lt;/code&gt; パッケージ名の接頭辞を。</target>
        </trans-unit>
        <trans-unit id="0a2b44eee9bddc2d60e480fea08a5f4ceb3bdae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value is either:</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; プロパティの値がいずれかです：</target>
        </trans-unit>
        <trans-unit id="1cb5e8d9c216034fade7c978ad13805a9c312bc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixer&lt;/code&gt; object has the following methods:</source>
          <target state="translated">&lt;code&gt;fixer&lt;/code&gt; オブジェクトは、次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="a3edba7f97a325dd3428ee6498ff770178efa766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; の文のクラスは次の形式を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="d49f70042d3e336aa930fa3d8a67c5746bfb590f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property in the &lt;code&gt;linter.verify()&lt;/code&gt; API is no longer supported</source>
          <target state="translated">&lt;code&gt;linter.verify()&lt;/code&gt; API の &lt;code&gt;global&lt;/code&gt; プロパティはサポートされなくなりました</target>
        </trans-unit>
        <trans-unit id="21aab0ed37e0be4d941cff2e17dc050a87694419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hoist&lt;/code&gt; option has three settings:</source>
          <target state="translated">&lt;code&gt;hoist&lt;/code&gt; オプションには3つの設定があります。</target>
        </trans-unit>
        <trans-unit id="462609b8b9ea4983f2b2d00bf8596dc0d30d89b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;if&lt;/code&gt; クラスは次の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="0d8118a2bec951d156bb19df18c746496e386f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePattern&lt;/code&gt; object takes a string value, which is used as a regular expression applied to the first word of a comment.</source>
          <target state="translated">&lt;code&gt;ignorePattern&lt;/code&gt; オブジェクトは、コメントの最初の単語に適用される正規表現として使用される文字列の値をとります。</target>
        </trans-unit>
        <trans-unit id="ae972c6712702d048215995c50a75a39891b07a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePatterns&lt;/code&gt; property affects only the directory that the config file placed.</source>
          <target state="translated">&lt;code&gt;ignorePatterns&lt;/code&gt; のプロパティは、設定ファイルが置かれていることのみディレクトリに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="b5e9061da183286584b4711c4a63bfba8da71be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreRestSiblings&lt;/code&gt; option is a boolean (default: &lt;code&gt;false&lt;/code&gt;). Using a &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest Property&lt;/a&gt; it is possible to &quot;omit&quot; properties from an object, but by default the sibling properties are marked as &quot;unused&quot;. With this option enabled the rest property's siblings are ignored.</source>
          <target state="translated">&lt;code&gt;ignoreRestSiblings&lt;/code&gt; のオプションがブール値（デフォルトで &lt;code&gt;false&lt;/code&gt; ）。&lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Restプロパティ&lt;/a&gt;を使用すると、オブジェクトからプロパティを「省略する」ことができますが、デフォルトでは兄弟のプロパティは「未使用」としてマークされます。このオプションを有効にすると、残りのプロパティの兄弟は無視されます。</target>
        </trans-unit>
        <trans-unit id="85cb7a860cbd820f9d90f12cf28b759ca78ece90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indent&lt;/code&gt; rule is more strict</source>
          <target state="translated">&lt;code&gt;indent&lt;/code&gt; ルールがより厳格です</target>
        </trans-unit>
        <trans-unit id="7da93c489e9178d0f216041fee0bdfd9d92b14f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; entry should be the JavaScript file implementing your custom formatter.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; エントリは、カスタムフォーマッタを実装するJavaScriptファイルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b638eabe7da26a08a3d704c7037df4934e4bc5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max-statements&lt;/code&gt; rule allows you to specify the maximum number of statements allowed in a function.</source>
          <target state="translated">&lt;code&gt;max-statements&lt;/code&gt; ルールは、関数内で許可される文の最大数を指定することができます。</target>
        </trans-unit>
        <trans-unit id="a13c3e797d7391ff2cce66ebe8056f876d975eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="7cfb0e1495e0c320f6699634a8ccde094dae7f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiLine&lt;/code&gt; and &lt;code&gt;align&lt;/code&gt; options can differ, which allows for fine-tuned control over the &lt;code&gt;key-spacing&lt;/code&gt; of your files. &lt;code&gt;align&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; inherit from &lt;code&gt;multiLine&lt;/code&gt; if &lt;code&gt;align&lt;/code&gt; is configured as an object.</source>
          <target state="translated">&lt;code&gt;multiLine&lt;/code&gt; と &lt;code&gt;align&lt;/code&gt; オプションはオーバー微調整制御を可能にする、異なる可能性があり &lt;code&gt;key-spacing&lt;/code&gt; 、ファイルの。 &lt;code&gt;align&lt;/code&gt; がオブジェクトとして構成されている場合、 &lt;code&gt;align&lt;/code&gt; は &lt;code&gt;multiLine&lt;/code&gt; から継承し&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d09e48c81deff2fe74829687d8d386203bf2e1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts an &lt;em&gt;executor&lt;/em&gt; function as an argument, which has &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; parameters that can be used to control the state of the created Promise. For example:</source>
          <target state="translated">&lt;code&gt;new Promise&lt;/code&gt; コンストラクタは受け付け&lt;em&gt;キュータの&lt;/em&gt;持つ引数としての機能 &lt;code&gt;resolve&lt;/code&gt; し、 &lt;code&gt;reject&lt;/code&gt; 作成した約束の状態を制御するために使用することができるパラメータを。例えば：</target>
        </trans-unit>
        <trans-unit id="098f4a5cbac65ca4cffcaba3c9ba560edcebc8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that &lt;code&gt;new&lt;/code&gt; is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.</source>
          <target state="translated">JavaScript の &lt;code&gt;new&lt;/code&gt; 演算子は、特定のタイプのオブジェクトの新しいインスタンスを作成します。そのタイプのオブジェクトは、コンストラクター関数によって表されます。コンストラクター関数は単なる通常の関数であるため、唯一の定義上の特徴は、呼び出しの一部として &lt;code&gt;new&lt;/code&gt; が使用されていることです。ネイティブJavaScript関数は、コンストラクターとして使用される関数と使用されない関数を区別するために、大文字で始まります。多くのスタイルガイドでは、コンストラクターとして使用する関数をより簡単に決定するために、このパターンに従うことを推奨しています。</target>
        </trans-unit>
        <trans-unit id="4b9844e9b711c0c78b88e1df4f24b4e7ffcc90b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-confusing-arrow&lt;/code&gt; rule is now more lenient by default</source>
          <target state="translated">&lt;code&gt;no-confusing-arrow&lt;/code&gt; ルールは現在、デフォルトでは、より寛大です</target>
        </trans-unit>
        <trans-unit id="6d1a64da4353dccbefcdf2ee522647ae870b3b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-eq-null&lt;/code&gt; rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to &lt;code&gt;null&lt;/code&gt; only match &lt;code&gt;null&lt;/code&gt;, and not also &lt;code&gt;undefined&lt;/code&gt;. As such it will flag comparisons to null when using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no-eq-null&lt;/code&gt; 規則の目的はとの比較ことを確実にすることにより、潜在的なバグや不要な行動を減らす &lt;code&gt;null&lt;/code&gt; は唯一の一致 &lt;code&gt;null&lt;/code&gt; 、ともない &lt;code&gt;undefined&lt;/code&gt; 。そのため、 &lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; を使用すると、比較にnullのフラグが付けられます。</target>
        </trans-unit>
        <trans-unit id="2cf7599f9ca5e81f4584651a246f272a61b94bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-magic-numbers&lt;/code&gt; rule aims to make code more readable and refactoring easier by ensuring that special numbers are declared as constants to make their meaning explicit.</source>
          <target state="translated">&lt;code&gt;no-magic-numbers&lt;/code&gt; 特別な数字は、その意味を明示的にするために、定数として宣言されていることを確実にすることによって、より簡単に、コードをより読みやすく、リファクタリングにする目標を支配します。</target>
        </trans-unit>
        <trans-unit id="584d3863241e3dd7bef2bc890fe46f1e0dacede5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-multi-spaces&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;no-multi-spaces&lt;/code&gt; ルールは、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="22f51e16b3d2fa232175e558615aef4ba7d91884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-nested-ternary&lt;/code&gt; rule disallows nested ternary expressions.</source>
          <target state="translated">&lt;code&gt;no-nested-ternary&lt;/code&gt; 三項式をネストされたルール禁止します。</target>
        </trans-unit>
        <trans-unit id="116b22d947fe1ce535309217a88923e033d53bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-redeclare&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">&lt;code&gt;no-redeclare&lt;/code&gt; ルールは現在、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="0aeabea2c1edc1a249245bfe09f229e42dd63ee8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm run perf&lt;/code&gt; command gives a high-level overview of ESLint running time with default rules (&lt;code&gt;eslint:recommended&lt;/code&gt;) enabled.</source>
          <target state="translated">&lt;code&gt;npm run perf&lt;/code&gt; コマンドは、デフォルトのルールとの時間を実行しているESLintの高レベルの概要（提供します &lt;code&gt;eslint:recommended&lt;/code&gt; 有効）。</target>
        </trans-unit>
        <trans-unit id="02b6ae240bb49fb262b6c6c5aa5ce3a0f704dc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onlyEquality&lt;/code&gt; option allows a superset of the exceptions which &lt;code&gt;exceptRange&lt;/code&gt; allows, thus both options are not useful together.</source>
          <target state="translated">&lt;code&gt;onlyEquality&lt;/code&gt; のオプションは、例外のスーパーセットできます &lt;code&gt;exceptRange&lt;/code&gt; はので、両方のオプションが一緒に有用ではない、ことができますが。</target>
        </trans-unit>
        <trans-unit id="3664b7a3e8295f10c165e69c19822430ecc4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property must be an array of options. This gets passed through to &lt;code&gt;context.options&lt;/code&gt; in the rule.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; プロパティには、オプションの配列でなければなりません。これは、ルールの &lt;code&gt;context.options&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="138b40a2090025ead37bb2b810503f00fc28051a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padded-blocks&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;padded-blocks&lt;/code&gt; ルールは、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="8d637daeacbd8ce09ca4965da79910941e8f067c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of AST nodes is now set before rules start running</source>
          <target state="translated">ルールの実行が開始される前に、ASTノードの &lt;code&gt;parent&lt;/code&gt; プロパティが設定されるようになりました</target>
        </trans-unit>
        <trans-unit id="853c13962a666c12683d5753aa639223e6ad5a5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewriteable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">すべてのノードの &lt;code&gt;parent&lt;/code&gt; プロパティは書き換え可能でなければなりません。ESLintは、すべてのルールがASTにアクセスする前に、トラバース中に各ノードの &lt;code&gt;parent&lt;/code&gt; プロパティをその親ノードに設定します。</target>
        </trans-unit>
        <trans-unit id="944a63b184acd73eda9811179639d595d02aa85d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt()&lt;/code&gt; and &lt;code&gt;Number.parseInt()&lt;/code&gt; functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parseInt()&lt;/code&gt; および &lt;code&gt;Number.parseInt()&lt;/code&gt; 関数は、整数に2進、8進、16進文字列を有効に使用することができます。ES6では2進数、8進数、16進数のリテラルがサポートされているため、このルールにより、 &lt;code&gt;parseInt()&lt;/code&gt; または &lt;code&gt;Number.parseInt()&lt;/code&gt; の代わりにこれらの数値リテラルを使用することが推奨されます。</target>
        </trans-unit>
        <trans-unit id="a6a8b14c45ea844b14e7b8898d1ed3a957925154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt;&lt;a href=&quot;#configuring-plugins&quot;&gt;property value&lt;/a&gt; can omit the &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; &lt;a href=&quot;#configuring-plugins&quot;&gt;プロパティ値は&lt;/a&gt;省略でき &lt;code&gt;eslint-plugin-&lt;/code&gt; パッケージ名の接頭辞を。</target>
        </trans-unit>
        <trans-unit id="379ae11932b2a6155c0dd857a96208194dd56ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; option has two settings:</source>
          <target state="translated">&lt;code&gt;position&lt;/code&gt; オプションは、2つの設定があります。</target>
        </trans-unit>
        <trans-unit id="c999b4122281345d94d147575183f7bf02e84b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it's another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.</source>
          <target state="translated">Node.js の &lt;code&gt;process.env&lt;/code&gt; オブジェクトは、デプロイメント/構成パラメーターを格納するために使用されます。プロジェクト全体に散らかると、別の種類のグローバルな依存関係になるため、メンテナンスの問題が発生する可能性があります。そのため、マルチユーザーセットアップでのマージの競合や、マルチサーバーセットアップでの展開の問題につながる可能性があります。代わりに、ベストプラクティスの1つは、プロジェクト全体からアクセスできる単一の構成/設定ファイルでこれらのすべてのパラメーターを定義することです。</target>
        </trans-unit>
        <trans-unit id="53444e809ed43079efe95348d4604d7a24ea38a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:</source>
          <target state="translated">Node.js の &lt;code&gt;process.exit()&lt;/code&gt; メソッドは、Node.jsプロセスを即座に停止して終了するために使用されます。これは、どのメソッドでもいつでも発生する可能性があり、エラーが発生したときにNode.jsアプリケーションを完全に停止させる可能性があるため、危険な操作です。例えば：</target>
        </trans-unit>
        <trans-unit id="00253dead4a64430ced775a37d1801dbac8821d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;2&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">この例の &lt;code&gt;quotes&lt;/code&gt; ルールには、 &lt;code&gt;&quot;double&quot;&lt;/code&gt; オプションが1つあります（ &lt;code&gt;2&lt;/code&gt; はエラーレベルです）。ルールの設定済みオプションをすべて含む配列である &lt;code&gt;context.options&lt;/code&gt; を使用して、ルールのオプションを取得できます。この場合、 &lt;code&gt;context.options[0]&lt;/code&gt; には &lt;code&gt;&quot;double&quot;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="15bbabad9361578bf4fae1f2a49b29be60fa376b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;error&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">この例の &lt;code&gt;quotes&lt;/code&gt; ルールには、 &lt;code&gt;&quot;double&quot;&lt;/code&gt; 1つのオプションがあります（ &lt;code&gt;error&lt;/code&gt; はエラーレベルです）。ルールの設定済みオプションをすべて含む配列である &lt;code&gt;context.options&lt;/code&gt; を使用して、ルールのオプションを取得できます。この場合、 &lt;code&gt;context.options[0]&lt;/code&gt; には &lt;code&gt;&quot;double&quot;&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="472145e67d0e65f7aa06bad378cebc04916b8bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; property contains two indexes in the code, referring to the start and end location of a contiguous section of text that will be replaced. The &lt;code&gt;text&lt;/code&gt; property refers to the text that will replace the given range.</source>
          <target state="translated">&lt;code&gt;range&lt;/code&gt; プロパティが置換されるテキストの連続するセクションの開始及び終了位置を参照して、コード内の2つのインデックスを含んでいます。 &lt;code&gt;text&lt;/code&gt; プロパティは、指定された範囲を置換するテキストを指します。</target>
        </trans-unit>
        <trans-unit id="e4064f447f590c1765f1771747724c820f183198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; returned from &lt;code&gt;executeOnText()&lt;/code&gt; is in the same format as from &lt;code&gt;executeOnFiles()&lt;/code&gt;, but there is only ever one result in &lt;code&gt;report.results&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;report&lt;/code&gt; から返さ &lt;code&gt;executeOnText()&lt;/code&gt; と同じ形式である &lt;code&gt;executeOnFiles()&lt;/code&gt; しかし、中にしかつの結果があり &lt;code&gt;report.results&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="92953a45beba64856673b9e8fbcb1ed126d0847b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; function is used to include modules that exist in separate files, such as:</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 機能は、次のような別のファイルに存在するモジュールを含むために使用されます。</target>
        </trans-unit>
        <trans-unit id="064be5c0f666fc3e35b5524048c68a20f53a49bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;result&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="9af8b29a9523a61b024585850f17334d070e6e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;results&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="61d30c932bc83cd2faa8787d31852a2a495de05f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; object passed into a formatter is an array of objects containing the lint results for individual files. Here's some example output:</source>
          <target state="translated">&lt;code&gt;results&lt;/code&gt; フォーマッタに渡されたオブジェクトは、個々のファイルのリント結果を含むオブジェクトの配列です。次に出力例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="3993cb0067ab7703186a7c2f2b6970449e1be544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rules&lt;/code&gt; property can do any of the following to extend (or override) the set of rules:</source>
          <target state="translated">&lt;code&gt;rules&lt;/code&gt; プロパティには、ルールのセットを拡張（またはオーバーライド）し、次のいずれかの操作を行うことができます。</target>
        </trans-unit>
        <trans-unit id="561e9293e5a8d3ad27376df8faff3ae931698040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property is no longer available on individual linting messages</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; プロパティは、個々のリンティングメッセージで使用できなくなりました</target>
        </trans-unit>
        <trans-unit id="0a93eec94b022c4aa2a02db660060ca362fa877f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; parser option is set while &lt;code&gt;ecmaVersion&lt;/code&gt; is set to &lt;code&gt;5&lt;/code&gt; or left unspecified. (Previously, setting &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; would implicitly cause &lt;code&gt;ecmaVersion&lt;/code&gt; to be set to a minimum of 2015, which could be surprising.)</source>
          <target state="translated">&lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; しながら、パーサのオプションが設定されている &lt;code&gt;ecmaVersion&lt;/code&gt; がに設定されている &lt;code&gt;5&lt;/code&gt; または未指定のまま。（以前は、 &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; を設定すると、 &lt;code&gt;ecmaVersion&lt;/code&gt; が暗黙的に2015年以上に設定されていましたが、これは驚くべきことでした。）</target>
        </trans-unit>
        <trans-unit id="4c9529163ca9cdfc78596b70a0088a17d7d3a0b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType&lt;/code&gt; is set to anything other than &lt;code&gt;&quot;script&quot;&lt;/code&gt; or &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sourceType&lt;/code&gt; 以外に設定されている &lt;code&gt;&quot;script&quot;&lt;/code&gt; または &lt;code&gt;&quot;module&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77552117314df4545a21208d082a3e6e878f860f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space-before-function-paren&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;space-before-function-paren&lt;/code&gt; のルールは、デフォルトでは、より厳格です</target>
        </trans-unit>
        <trans-unit id="3f8f7815159b1b5e0f229864128c1f7bd11839da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;switch&lt;/code&gt; クラスは次の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e7bd19d734e1f9c5b8f9f98d650cecfc8c20f132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to &quot;fall through&quot; from one &lt;code&gt;case&lt;/code&gt; to the next. For example:</source>
          <target state="translated">JavaScript の &lt;code&gt;switch&lt;/code&gt; ステートメントは、ある &lt;code&gt;case&lt;/code&gt; から次のケースに「フォールスルー」する機能のおかげで、言語のエラーが発生しやすい構成要素の1つです。例えば：</target>
        </trans-unit>
        <trans-unit id="b828067e8b794059a7226d1fb4af5dcfec1299b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement internally uses the &lt;code&gt;===&lt;/code&gt; comparison to match the expression's value to a case clause. Therefore, it can never match &lt;code&gt;case NaN&lt;/code&gt;. Also, &lt;code&gt;switch(NaN)&lt;/code&gt; can never match a case clause.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; ステートメントは、内部的に使用しています &lt;code&gt;===&lt;/code&gt; ケース句に式の値と一致するように比較を。したがって、 &lt;code&gt;case NaN&lt;/code&gt; 一致することはありません。また、 &lt;code&gt;switch(NaN)&lt;/code&gt; がcase句と一致することはありません。</target>
        </trans-unit>
        <trans-unit id="2ada90da9d605eb89fdcd67423cc995f53e41596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;try&lt;/code&gt; クラスの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8692ce1aa1a507fdbc0506510178169257caaf18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;the strict mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; フラグは、付属書Bは、定義された回復ロジックを無効にします。その結果、エラーを早期に見つけることができます。これは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;、strictモードに&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="c13131f24eb9329164eba24a2cd91b75577b1971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undefined&lt;/code&gt; variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of &lt;code&gt;undefined&lt;/code&gt;. While ECMAScript 5 disallows overwriting &lt;code&gt;undefined&lt;/code&gt;, it's still possible to shadow &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">JavaScript の &lt;code&gt;undefined&lt;/code&gt; 変数は、実際にはグローバルオブジェクトのプロパティです。そのため、ECMAScript 3では、 &lt;code&gt;undefined&lt;/code&gt; の値を上書きすることが可能でした。ECMAScript 5は &lt;code&gt;undefined&lt;/code&gt; の上書きを許可していませんが、以下のように &lt;code&gt;undefined&lt;/code&gt; をシャドウイングすることは依然として可能です。</target>
        </trans-unit>
        <trans-unit id="e4e9951e2f561acaf841dbfd8453226510314be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars-on-top&lt;/code&gt; rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (&amp;ldquo;hoisted&amp;rdquo;) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.</source>
          <target state="translated">&lt;code&gt;vars-on-top&lt;/code&gt; 変数宣言、関数スコープの上部またはプログラムの先頭で連続使用されていない場合、ルールは、警告を生成します。デフォルトでは、変数宣言はJavaScriptインタープリターによって常にそれらを含むスコープの最上部に見えないように移動（「巻き上げ」）されます。このルールにより、プログラマーは、変数宣言をその包含スコープの最上部に手動で移動することにより、その動作を強制的に表現します。</target>
        </trans-unit>
        <trans-unit id="8437526de99e51c9af62b182483b3c46ca377dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; option has two settings:</source>
          <target state="translated">&lt;code&gt;vars&lt;/code&gt; のオプションは、2つの設定があります。</target>
        </trans-unit>
        <trans-unit id="7f313683e74a50e68d4d012882437f3a941bbebc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;varsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain &lt;code&gt;ignored&lt;/code&gt; or &lt;code&gt;Ignored&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;varsIgnorePattern&lt;/code&gt; のオプションは、例外の使用をチェックしない：名前が正規表現パターンに一致する変数。たとえば、名前に &lt;code&gt;ignored&lt;/code&gt; または &lt;code&gt;Ignored&lt;/code&gt; が含まれる変数。</target>
        </trans-unit>
        <trans-unit id="c6c8741b7358a7fc6ab1d9e9c87df7567465e2dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify()&lt;/code&gt; method returns an array of objects containing information about the linting warnings and errors. Here's an example:</source>
          <target state="translated">&lt;code&gt;verify()&lt;/code&gt; メソッドは、リンティング警告およびエラーに関する情報を含むオブジェクトの配列を返します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="8f646bffb41dff01a7acc0aab19c45366759c6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator takes an operand and returns &lt;code&gt;undefined&lt;/code&gt;: &lt;code&gt;void expression&lt;/code&gt; will evaluate &lt;code&gt;expression&lt;/code&gt; and return &lt;code&gt;undefined&lt;/code&gt;. It can be used to ignore any side effects &lt;code&gt;expression&lt;/code&gt; may produce:</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; 演算子は、オペランドとリターンを取る &lt;code&gt;undefined&lt;/code&gt; ： &lt;code&gt;void expression&lt;/code&gt; 評価され &lt;code&gt;expression&lt;/code&gt; とリターン &lt;code&gt;undefined&lt;/code&gt; 。これは、 &lt;code&gt;expression&lt;/code&gt; が生成する可能性のある副作用を無視するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2556ce629f24ecc77f8ee75b29af595f5d1ce4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">ステートメントの &lt;code&gt;while&lt;/code&gt; クラスは、次の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="16267e1a7f6497f96f435d3ed8e9d95c9f05b4e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.</source>
          <target state="translated">それはそれは不可能ブロック内の変数が実際に参照するものを伝えるために作り、現在のスコープにオブジェクトのメンバを追加するためのステートメントは、潜在的に問題です。 &lt;code&gt;with&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23d60138df9b187d83c9c312e2d8240dbd86a484" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;one true brace style&lt;/em&gt; is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:</source>
          <target state="translated">&lt;em&gt;真&lt;/em&gt;の&lt;em&gt;1つのブレーススタイル&lt;/em&gt;は、JavaScriptで最も一般的なブレーススタイルの1つであり、ブロックの開始ブレースは、対応するステートメントまたは宣言と同じ行に配置されます。例えば：</target>
        </trans-unit>
        <trans-unit id="318db8bc3442a0b948f2278731ddfaa2b3371483" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository that active development happens on. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">&lt;em&gt;上流のソースは、&lt;/em&gt;活発に開発がで発生することを主ESLintリポジトリです。アップストリームへのプッシュアクセスはありませんが、プルアクセスがあり、いつでも最新のコードをプルできます。</target>
        </trans-unit>
        <trans-unit id="00a652484a4e470b827e739fbc799706911bd125" translate="yes" xml:space="preserve">
          <source>The AST specification</source>
          <target state="translated">AST仕様</target>
        </trans-unit>
        <trans-unit id="e60cbbce8f620754c9d5e236855c0dfac9399492" translate="yes" xml:space="preserve">
          <source>The AST that custom parsers should create is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The AST requires some additional properties about detail information of the source code.</source>
          <target state="translated">カスタムパーサーが作成するASTは&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTreeに&lt;/a&gt;基づいています。ASTには、ソースコードの詳細情報に関するいくつかの追加プロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="d12093d685b556a69445173fd5520486f1407941" translate="yes" xml:space="preserve">
          <source>The Art Of Node: Callbacks</source>
          <target state="translated">The Art Of Node.コールバック</target>
        </trans-unit>
        <trans-unit id="dc42f36cf4efb4177d2faa05bda904369e189f7a" translate="yes" xml:space="preserve">
          <source>The Atomics object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Atomics object as a function.</source>
          <target state="translated">Atomicsオブジェクトには &lt;code&gt;[[Call]]&lt;/code&gt; 内部メソッドはありません。Atomicsオブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="121e8d7f53d94f39796abb445eea1ec6c84df947" translate="yes" xml:space="preserve">
          <source>The Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:</source>
          <target state="translated">カンマスタイルルールは、カンマで区切られたリストのスタイルを強制します。主にJavaScriptで使用されるカンマスタイルは2つあります。</target>
        </trans-unit>
        <trans-unit id="751c7e36741c66d3a05895481f8942a38ca2dce1" translate="yes" xml:space="preserve">
          <source>The Context Object</source>
          <target state="translated">コンテキストオブジェクト</target>
        </trans-unit>
        <trans-unit id="699ac6d6b4ec2baa85b4732c274fadb3ca039ae9" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 Annotated Specification - Strict Mode</source>
          <target state="translated">ECMAScript 5 注釈付き仕様書-厳密なモード</target>
        </trans-unit>
        <trans-unit id="80e0be2b0df7dc0f52165f27603e2898ae8a5e99" translate="yes" xml:space="preserve">
          <source>The ES6 Reflect API comes with a handful of methods which somewhat deprecate methods on old constructors:</source>
          <target state="translated">ES6 の Reflect API には、古いコンストラクタ上のメソッドをやや非推奨にするメソッドがいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="66003f739f69d29de4ae86e20e78496ebb3153ae" translate="yes" xml:space="preserve">
          <source>The ESLint directory and file structure is as follows:</source>
          <target state="translated">ESLintのディレクトリとファイル構造は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d93e8b36b02e3c814ab20860021ac1e2f00ac494" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement new rules that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule is accepted, you are responsible for implementing and documenting the rule. You may, alternately, recruit another person to help you implement the rule. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLintチームは人数が限られており、全体のロードマップに集中する必要があるため、ユーザーから提案された新しいルールを実装しません。ルールが承認されたら、そのルールを実装し、文書化する責任があります。代わりに、ルールの実装を手伝ってくれる人を募集することもできます。ルールを承認したESLintチームのメンバーは、このプロセスの残りの部分をガイドしてくれます。</target>
        </trans-unit>
        <trans-unit id="0c711d16f14ea7343d52f05830b40ccdb9522bc8" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement rule changes that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule change is accepted, you are responsible for implementing and documenting it. You may, alternately, recruit another person to help you. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">ESLintチームはユーザーから提案されたルール変更を実装しません。ルール変更が承認されたら、あなたはそれを実装し、文書化する責任があります。代わりに、他の人に手伝ってもらうこともできます。ルールを支持したESLintチームのメンバーは、このプロセスの残りの部分をガイドしてくれます。</target>
        </trans-unit>
        <trans-unit id="aeda0c340295fff5de3b84af83b961b23c1f657b" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. This section outlines the guidelines the team has set in place for the deprecation of rules in future releases.</source>
          <target state="translated">ESLintチームはアップグレードをできるだけ簡単で苦痛のないものにしたいと考えています。このセクションでは、今後のリリースにおけるルールの非推奨化のためにチームが設定したガイドラインの概要を説明します。</target>
        </trans-unit>
        <trans-unit id="42ccbdbc3911d666627517f8ffa3964275678b01" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. To that end, the team has agreed upon the following set of guidelines for deprecating rules in the future. The goal of these guidelines is to allow for improvements and changes to be made without breaking existing configurations.</source>
          <target state="translated">ESLintチームはアップグレードを可能な限り簡単で苦痛のないものにしたいと考えています。そのために、チームは将来的に非推奨となるルールのガイドラインに合意しました。これらのガイドラインの目的は、既存の設定を壊さずに改善や変更ができるようにすることです。</target>
        </trans-unit>
        <trans-unit id="d4e733f98b935c588d211926e08fdfd98589d4ae" translate="yes" xml:space="preserve">
          <source>The JSCS &lt;code&gt;--auto-configure&lt;/code&gt; option created a configuration based on what it found in a given file:</source>
          <target state="translated">JSCS &lt;code&gt;--auto-configure&lt;/code&gt; オプションは、特定のファイルで見つかったものに基づいて構成を作成しました。</target>
        </trans-unit>
        <trans-unit id="fa1c39fed1338615abafccd715f9a9ceec0208c2" translate="yes" xml:space="preserve">
          <source>The Math Object</source>
          <target state="translated">数学オブジェクト</target>
        </trans-unit>
        <trans-unit id="9459a63048e2fc499f7aeacaa3d20ab484e34e90" translate="yes" xml:space="preserve">
          <source>The Math object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal property; it is not possible to invoke the Math object as a function.</source>
          <target state="translated">Mathオブジェクトには &lt;code&gt;[[Call]]&lt;/code&gt; 内部プロパティはありません。Mathオブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="03344790500f2127bf5b89f81cc0b7f1bd8cbe99" translate="yes" xml:space="preserve">
          <source>The Reflect object also does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Reflect object as a function.</source>
          <target state="translated">Reflectオブジェクトには、 &lt;code&gt;[[Call]]&lt;/code&gt; 内部メソッドもありません。Reflectオブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="d8e01d191666fc3fab613c0e7605b0dd8117adb5" translate="yes" xml:space="preserve">
          <source>The Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian. That is, whether the most significant or least significant bytes come first. UTF-8 does not require a BOM because byte ordering does not matter when characters are a single byte. Since UTF-8 is the dominant encoding of the web, we make &lt;code&gt;&quot;never&quot;&lt;/code&gt; the default option.</source>
          <target state="translated">Unicode Byte Order Mark（BOM）は、コード単位がビッグエンディアンかリトルエンディアンかを指定するために使用されます。つまり、最上位バイトと最下位バイトのどちらが最初に来るかです。文字がシングルバイトの場合、バイトの順序は関係ないため、UTF-8ではBOMは必要ありません。UTF-8はWebの主要なエンコーディングなので、デフォルトのオプションは &lt;code&gt;&quot;never&quot;&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="dee0f2bfcb123659c532724653e8c4e345e84a42" translate="yes" xml:space="preserve">
          <source>The `--fix` option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;コマンドライン&lt;/a&gt;の `--fix`オプションは、下にレンチがあるルールによって報告された問題（現在はほとんどが空白）を自動的に修正します。</target>
        </trans-unit>
        <trans-unit id="db8728aed09dfa6de429370be79c24bb69a35744" translate="yes" xml:space="preserve">
          <source>The above can be rewritten as the following to improve readability and more clearly delineate the operands:</source>
          <target state="translated">上記を以下のように書き換えることで、可読性を向上させ、オペランドの区切りをより明確にすることができます。</target>
        </trans-unit>
        <trans-unit id="65f3cb6e1b55fcacecc756bb976bc88a3674a7e6" translate="yes" xml:space="preserve">
          <source>The above methods return a &lt;code&gt;fixing&lt;/code&gt; object. The &lt;code&gt;fix()&lt;/code&gt; function can return the following values:</source>
          <target state="translated">上記のメソッドは &lt;code&gt;fixing&lt;/code&gt; オブジェクトを返します。 &lt;code&gt;fix()&lt;/code&gt; 関数は次の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="0c94f2b50ef7b0d53ba00f8a03e35b8008133138" translate="yes" xml:space="preserve">
          <source>The basic pattern for a rule unit test file is:</source>
          <target state="translated">ルール単位のテストファイルの基本パターンです。</target>
        </trans-unit>
        <trans-unit id="56d7ca1af2103271f042bd642392c591643ab810" translate="yes" xml:space="preserve">
          <source>The best practice is to always use a function for the first argument of &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; (and avoid &lt;code&gt;execScript()&lt;/code&gt;).</source>
          <target state="translated">ベストプラクティスは、常に &lt;code&gt;setTimeout()&lt;/code&gt; および &lt;code&gt;setInterval()&lt;/code&gt; の最初の引数に関数を使用することです（そして &lt;code&gt;execScript()&lt;/code&gt; を避けます）。</target>
        </trans-unit>
        <trans-unit id="1e8c340ffa3f95f2957d6bb3facc83797eb47d1e" translate="yes" xml:space="preserve">
          <source>The built-in formatter options are:</source>
          <target state="translated">ビルトインのフォーマッタオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f4a074b29cc31436f926afa21bd394791fa680f4" translate="yes" xml:space="preserve">
          <source>The callback pattern is at the heart of most I/O and event-driven programming in JavaScript.</source>
          <target state="translated">コールバックパターンは、JavaScript のほとんどの I/O やイベント駆動型プログラミングの中心となっています。</target>
        </trans-unit>
        <trans-unit id="17cf8e65252c53144326fa3b3cb3dee6a9c49a73" translate="yes" xml:space="preserve">
          <source>The change introduces no functional regression. Be sure to run &lt;code&gt;npm test&lt;/code&gt; to verify your changes before submitting a pull request.</source>
          <target state="translated">この変更により、機能が低下することはありません。プルリクエストを送信する前に、必ず &lt;code&gt;npm test&lt;/code&gt; を実行して変更を確認してください。</target>
        </trans-unit>
        <trans-unit id="95b1da556ce89be353ded0ac57710b104d6f438e" translate="yes" xml:space="preserve">
          <source>The closing brace should be on a separate line.</source>
          <target state="translated">クロージングブレースは別ラインにしてください。</target>
        </trans-unit>
        <trans-unit id="0e877e0656f0ec69724c1b6cc3a12731f64fac75" translate="yes" xml:space="preserve">
          <source>The code above creates an object with just a setter for the property &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="translated">上記のコードは、プロパティ &lt;code&gt;&quot;a&quot;&lt;/code&gt; のセッターのみを持つオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="7d7fe0fd83bc9845d159f7bbddda58e021a2af8e" translate="yes" xml:space="preserve">
          <source>The code can be rewritten as:</source>
          <target state="translated">というようにコードを書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="eae223ac7cf3bcd6d761f22884ef878f4080872a" translate="yes" xml:space="preserve">
          <source>The code might be mistaken for an error.</source>
          <target state="translated">コードがエラーになっている可能性があります。</target>
        </trans-unit>
        <trans-unit id="07b81fa2d7c3787fd397d4cedde653ceddf32951" translate="yes" xml:space="preserve">
          <source>The combining characters are characters which belong to one of &lt;code&gt;Mc&lt;/code&gt;, &lt;code&gt;Me&lt;/code&gt;, and &lt;code&gt;Mn&lt;/code&gt;&lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode general categories&lt;/a&gt;.</source>
          <target state="translated">結合文字は、 &lt;code&gt;Mc&lt;/code&gt; 、 &lt;code&gt;Me&lt;/code&gt; 、および &lt;code&gt;Mn&lt;/code&gt; &lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode一般カテゴリの&lt;/a&gt;いずれかに属する文字です。</target>
        </trans-unit>
        <trans-unit id="73d750e0d0367037fdad99a42bc958f0afea170d" translate="yes" xml:space="preserve">
          <source>The comma and any whitespace that delimit property specifications are not considered parts of them. Therefore, the rule permits both of these formats:</source>
          <target state="translated">プロパティ指定を区切るカンマと空白は、それらの一部とはみなされません。したがって、このルールでは、これらの形式の両方を許可します。</target>
        </trans-unit>
        <trans-unit id="d9368f1df7787717cd62dddc2cb7c148f9058bfd" translate="yes" xml:space="preserve">
          <source>The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:</source>
          <target state="translated">カンマ演算子には、1つだけが期待される複数の式が含まれています。これは各オペランドを左から右に評価し、最後のオペランドの値を返します。しかし、これは副作用を不明瞭にすることが多く、その使用はしばしば事故となります。シーケンスの例をいくつか挙げてみます。</target>
        </trans-unit>
        <trans-unit id="6cbddd96542ae6a1209e95d3af05dcfc89e192c0" translate="yes" xml:space="preserve">
          <source>The command line utility has several options. You can view the options by running &lt;code&gt;eslint -h&lt;/code&gt;.</source>
          <target state="translated">コマンドラインユーティリティにはいくつかのオプションがあります。 &lt;code&gt;eslint -h&lt;/code&gt; を実行すると、オプションを表示できます。</target>
        </trans-unit>
        <trans-unit id="9c80af650686399cb1e0e7040218608587eb5be3" translate="yes" xml:space="preserve">
          <source>The commit message format is important because these messages are used to create a changelog for each release. The tag and issue number help to create more consistent and useful changelogs.</source>
          <target state="translated">コミットメッセージのフォーマットは、各リリースの変更履歴を作成するために使用されるため、重要です。タグと課題番号は、より一貫性のある有用な変更ログを作成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="a8123064f7d126e4a3b589e9af343947dfe7c445" translate="yes" xml:space="preserve">
          <source>The commit message is properly formatted.</source>
          <target state="translated">コミットメッセージは適切にフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="e4677fbe3218552fdaa136e42baa9d0c902d41ca" translate="yes" xml:space="preserve">
          <source>The common case of using &lt;code&gt;void&lt;/code&gt; operator is to get a &quot;pure&quot; &lt;code&gt;undefined&lt;/code&gt; value as prior to ES5 the &lt;code&gt;undefined&lt;/code&gt; variable was mutable:</source>
          <target state="translated">ES5より前の &lt;code&gt;undefined&lt;/code&gt; 変数は変更可能だったため、 &lt;code&gt;void&lt;/code&gt; 演算子を使用する一般的なケースは、「純粋な」 &lt;code&gt;undefined&lt;/code&gt; 値を取得することです。</target>
        </trans-unit>
        <trans-unit id="affdad1a3137988828bd199a2283a60df1bc5075" translate="yes" xml:space="preserve">
          <source>The complete configuration hierarchy, from highest precedence to lowest precedence, is as follows:</source>
          <target state="translated">優先順位の高いものから低いものまで、完全な構成階層は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7505181a37b9fb762478197cf4096ed5622b8d1b" translate="yes" xml:space="preserve">
          <source>The config in &lt;code&gt;app/.eslintrc.json&lt;/code&gt; defines the glob pattern &lt;code&gt;**/*Spec.js&lt;/code&gt;. This pattern is relative to the base directory of &lt;code&gt;app/.eslintrc.json&lt;/code&gt;. So, this pattern would match &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; and &lt;code&gt;app/components/barSpec.js&lt;/code&gt; but &lt;strong&gt;NOT&lt;/strong&gt;&lt;code&gt;server/serverSpec.js&lt;/code&gt;. If you defined the same pattern in the &lt;code&gt;.eslintrc.json&lt;/code&gt; file within in the &lt;code&gt;project-root&lt;/code&gt; folder, it would match all three of the &lt;code&gt;*Spec&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;app/.eslintrc.json&lt;/code&gt; の設定は、globパターン &lt;code&gt;**/*Spec.js&lt;/code&gt; を定義します。このパターンは、 &lt;code&gt;app/.eslintrc.json&lt;/code&gt; のベースディレクトリを基準にしています。したがって、このパターンは &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; および &lt;code&gt;app/components/barSpec.js&lt;/code&gt; と一致し &lt;code&gt;server/serverSpec.js&lt;/code&gt; が、server / serverSpec.jsとは一致し&lt;strong&gt;ません&lt;/strong&gt;。 &lt;code&gt;project-root&lt;/code&gt; フォルダー内の &lt;code&gt;.eslintrc.json&lt;/code&gt; ファイルで同じパターンを定義した場合、それは3つの &lt;code&gt;*Spec&lt;/code&gt; ファイルすべてに一致します。</target>
        </trans-unit>
        <trans-unit id="761a0c741d5f1588ef78c2680d748e9585f5469d" translate="yes" xml:space="preserve">
          <source>The configuration cascade works by using the closest &lt;code&gt;.eslintrc&lt;/code&gt; file to the file being linted as the highest priority, then any configuration files in the parent directory, and so on. When you run ESLint on this project, all files in &lt;code&gt;lib/&lt;/code&gt; will use the &lt;code&gt;.eslintrc&lt;/code&gt; file at the root of the project as their configuration. When ESLint traverses into the &lt;code&gt;tests/&lt;/code&gt; directory, it will then use &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; in addition to &lt;code&gt;your-project/.eslintrc&lt;/code&gt;. So &lt;code&gt;your-project/tests/test.js&lt;/code&gt; is linted based on the combination of the two &lt;code&gt;.eslintrc&lt;/code&gt; files in its directory hierarchy, with the closest one taking priority. In this way, you can have project-level ESLint settings and also have directory-specific overrides.</source>
          <target state="translated">構成カスケードは、 &lt;code&gt;.eslintrc&lt;/code&gt; されているファイルに最も近い.eslintrcファイルを最高の優先順位として使用し、次に親ディレクトリ内の構成ファイルを使用することで機能します。あなたはこのプロジェクトにESLintを実行すると、内のすべてのファイル &lt;code&gt;lib/&lt;/code&gt; 使用されます &lt;code&gt;.eslintrc&lt;/code&gt; その構成として、プロジェクトのルートにファイルを。 ESLintが &lt;code&gt;tests/&lt;/code&gt; ディレクトリに移動すると、 &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; に加えて &lt;code&gt;your-project/.eslintrc&lt;/code&gt; tests / .eslintrcが使用されます。したがって &lt;code&gt;your-project/tests/test.js&lt;/code&gt; は、2つの &lt;code&gt;.eslintrc&lt;/code&gt; の組み合わせに基づいてリンクされますディレクトリ階層内のファイル。最も近いファイルが優先されます。このようにして、プロジェクトレベルのESLint設定とディレクトリ固有のオーバーライドを設定できます。</target>
        </trans-unit>
        <trans-unit id="dcdf3251f61da2ed7fea4070dd8de83ac8b210fc" translate="yes" xml:space="preserve">
          <source>The configuration that you have in your &lt;code&gt;.eslintrc&lt;/code&gt; file is an important part of your project, and as such, you may want to share it with other projects or people. Shareable configs allow you to publish your configuration settings on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and have others download and use it in their ESLint projects.</source>
          <target state="translated">あなたの中に持っていることを設定 &lt;code&gt;.eslintrc&lt;/code&gt; ファイルは、プロジェクトの重要な部分であり、そのように、あなたは他のプロジェクトや人々とそれを共有することができます。共有可能な構成を使用すると、&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmで&lt;/a&gt;構成設定を公開し、他の人にダウンロードしてESLintプロジェクトで使用させることができます。</target>
        </trans-unit>
        <trans-unit id="32170e7d3eae30d6911a8ee9094599efb5b60bbf" translate="yes" xml:space="preserve">
          <source>The confusion around sparse arrays defined in this manner is enough that it's recommended to avoid using them unless you are certain that they are useful in your code.</source>
          <target state="translated">このように定義された疎な配列をめぐる混乱は、コードの中で有用であると確信している場合を除き、使用を避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="84a32a3cbfb78fbed02519d25670fc0e1cc660ca" translate="yes" xml:space="preserve">
          <source>The constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments.</source>
          <target state="translated">コンストラクタ関数は文字列の引数を取るので、パターンを動的に生成したい場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="1c3dff42ca3b1d5caf72f42e977b149fee7f9002" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;if&lt;/code&gt; statement is an arrow function, not a comparison.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ステートメントの内容は、比較ではなく矢印関数です。</target>
        </trans-unit>
        <trans-unit id="dc960e48baa84799c5c10650483220ba5c93ce2e" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular import may match more than one pattern.</source>
          <target state="translated">カスタムメッセージは、デフォルトのエラーメッセージに追加されます。特定のインポートが複数のパターンにマッチする可能性があるため、制限されたパターンに対してカスタムエラーメッセージを指定することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="02091995aebc0237ea1f370d1e9e697cb283fce5" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular module may match more than one pattern.</source>
          <target state="translated">カスタムメッセージはデフォルトのエラーメッセージに追加されます。特定のモジュールが複数のパターンにマッチする可能性があるため、制限されたパターンに対してカスタムエラーメッセージを指定することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2db40330539be8a023ce70cd6de477ff5ec12779" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option can have exception options in an object literal:</source>
          <target state="translated">デフォルトの &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションは、オブジェクトリテラルに例外オプションを持つことができます。</target>
        </trans-unit>
        <trans-unit id="aad36d23c9c66cf621dc65a4fdf5357b747ebf25" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;object&quot;&lt;/code&gt; option requires the dot to be on the same line as the object.</source>
          <target state="translated">デフォルトの &lt;code&gt;&quot;object&quot;&lt;/code&gt; オプションでは、ドットがオブジェクトと同じ行にある必要があります。</target>
        </trans-unit>
        <trans-unit id="eb214d0a96891b20944eb86c406846b8c0682ec0" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</source>
          <target state="translated">デフォルトの構成は &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="796093e436a921806e600ed6ffc0bb010636d015" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">デフォルトの構成は &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ffd96c78ae8b308cef5ee180c2cafbcfe74c3226" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d709b74ae2cf658c17f26fdf6ce2c1bfe069742" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="535a63e8e2a6cdd1ad85243a0f44cac231300bc7" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="baa5bd9ea8cd406c936d48459561cdc0703e1522" translate="yes" xml:space="preserve">
          <source>The default option (that is, no string option specified) for this rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0. The &lt;code&gt;&quot;function&quot;&lt;/code&gt; option is most similar to the removed option.</source>
          <target state="translated">このルールのデフォルトオプション（つまり、文字列オプションが指定されていない）は、ESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れました。 &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションが削除オプションに最も類似しています。</target>
        </trans-unit>
        <trans-unit id="ea560e9329be81e2a97fb02fb917528a08a7dfda" translate="yes" xml:space="preserve">
          <source>The default options for some rules have changed</source>
          <target state="translated">いくつかのルールのデフォルトオプションが変更されました。</target>
        </trans-unit>
        <trans-unit id="e1b30fc08a505ea690637325f1e931c67ab9c7ce" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt;&lt;code&gt;no-confusing-arrow&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ allowParens: false }&lt;/code&gt; to &lt;code&gt;{ allowParens: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt; &lt;code&gt;no-confusing-arrow&lt;/code&gt; &lt;/a&gt;ルールのデフォルトのオプションが &lt;code&gt;{ allowParens: false }&lt;/code&gt; から &lt;code&gt;{ allowParens: true }&lt;/code&gt; 変更されました。</target>
        </trans-unit>
        <trans-unit id="544468a6bb41999c9c49e104c2162d56de2501c3" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-redeclare&quot;&gt;&lt;code&gt;no-redeclare&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; to &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt;. Additionally, the &lt;code&gt;no-redeclare&lt;/code&gt; rule will now report an error for globals enabled by comments like &lt;code&gt;/* global foo */&lt;/code&gt; if those globals were already enabled through configuration anyway.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-redeclare&quot;&gt; &lt;code&gt;no-redeclare&lt;/code&gt; &lt;/a&gt; &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; ルールのデフォルトオプションは、{builtinGlobals：false}から &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt; 変更されました。さらに、これらのグローバルが構成によってすでに有効になっている場合、 &lt;code&gt;/* global foo */&lt;/code&gt; などのコメントによって有効にされたグローバルのエラーを &lt;code&gt;no-redeclare&lt;/code&gt; ルールが報告するようになりました。</target>
        </trans-unit>
        <trans-unit id="4b68ac7ed408d41719943a7ec2a3599de96e8bf8" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/object-curly-newline&quot;&gt;&lt;code&gt;object-curly-newline&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ multiline: true }&lt;/code&gt; to &lt;code&gt;{ consistent: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/object-curly-newline&quot;&gt; &lt;code&gt;object-curly-newline&lt;/code&gt; &lt;/a&gt;ルールのデフォルトオプションは、 &lt;code&gt;{ multiline: true }&lt;/code&gt; から &lt;code&gt;{ consistent: true }&lt;/code&gt; 変更されました。</target>
        </trans-unit>
        <trans-unit id="5b7ab1e46a9e7c204637eb33434f00becfe8a66d" translate="yes" xml:space="preserve">
          <source>The default options object for the &lt;a href=&quot;../rules/no-self-assign&quot;&gt;&lt;code&gt;no-self-assign&lt;/code&gt;&lt;/a&gt; rule has changed from &lt;code&gt;{ props: false }&lt;/code&gt; to &lt;code&gt;{ props: true }&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-self-assign&quot;&gt; &lt;code&gt;no-self-assign&lt;/code&gt; &lt;/a&gt;ルールのデフォルトのオプションオブジェクトが &lt;code&gt;{ props: false }&lt;/code&gt; から &lt;code&gt;{ props: true }&lt;/code&gt; 変更されました。</target>
        </trans-unit>
        <trans-unit id="f7d8ef8740358e7014a22b0fc66ddeed7cc30fcc" translate="yes" xml:space="preserve">
          <source>The default parser now validates options more strictly</source>
          <target state="translated">デフォルトのパーサがオプションをより厳密に検証するようになりました。</target>
        </trans-unit>
        <trans-unit id="cb91917a4ee5c4169d24eee0779ed1f5fecc0213" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been removed</source>
          <target state="translated">非推奨の &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; オプションが削除されました</target>
        </trans-unit>
        <trans-unit id="417c3b37d6ea8d516aaec94e4251e5a47c517230" translate="yes" xml:space="preserve">
          <source>The difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas exceptions can occur anywhere in the comment string.</source>
          <target state="translated">マーカーと例外の違いは、マーカーはコメントの先頭にしか現れないのに対し、例外はコメント文字列のどこにでも現れる可能性があるということです。</target>
        </trans-unit>
        <trans-unit id="be6b4fc0012e62a768e63daa1d092d896e9cd14d" translate="yes" xml:space="preserve">
          <source>The difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.</source>
          <target state="translated">この2つのパターンの違いは微妙で、特に問題のある空のパターンはオブジェクトリテラルと同じように見えるからです。</target>
        </trans-unit>
        <trans-unit id="5f8c988db3120f6ad6d74976827259fee73007f6" translate="yes" xml:space="preserve">
          <source>The easiest way to start creating a plugin is to use the &lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman generator&lt;/a&gt;. The generator will guide you through setting up the skeleton of a plugin.</source>
          <target state="translated">プラグインの作成を開始する最も簡単な方法は、&lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeomanジェネレーター&lt;/a&gt;を使用することです。ジェネレーターは、プラグインのスケルトンのセットアップをガイドします。</target>
        </trans-unit>
        <trans-unit id="43705ef6db2efcf221d0e395d353b64954c6c747" translate="yes" xml:space="preserve">
          <source>The enclosed statements should be indented one more level than the compound statement.</source>
          <target state="translated">同封されている文は、複合文よりも1段多くインデントされている必要があります。</target>
        </trans-unit>
        <trans-unit id="b118bf659a71ae3c29fa483a5256dbcff0e3c82c" translate="yes" xml:space="preserve">
          <source>The end of the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; ブロックの終わり。</target>
        </trans-unit>
        <trans-unit id="8db72bff78f8373ee30f8c8fd310da3156ec6caa" translate="yes" xml:space="preserve">
          <source>The executor function can also be an &lt;code&gt;async function&lt;/code&gt;. However, this is usually a mistake, for a few reasons:</source>
          <target state="translated">executor関数は、 &lt;code&gt;async function&lt;/code&gt; にすることもできます。ただし、これは通常、いくつかの理由で間違いです。</target>
        </trans-unit>
        <trans-unit id="67f85a36ed894f5ee40529023db3887ad5bbee0c" translate="yes" xml:space="preserve">
          <source>The exported function receives an optional second argument named &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; object provides extended information related to the analysis results. Currently, the &lt;code&gt;data&lt;/code&gt; object consists of a single property named &lt;code&gt;rulesMeta&lt;/code&gt;. This property is a dictionary of rule metadata, keyed with &lt;code&gt;ruleId&lt;/code&gt;. The value for each entry is the &lt;code&gt;meta&lt;/code&gt; property from the corresponding rule object. The dictionary contains an entry for each rule that was run during the analysis.</source>
          <target state="translated">エクスポートされた関数は、 &lt;code&gt;data&lt;/code&gt; という名前のオプションの2番目の引数を受け取ります。 &lt;code&gt;data&lt;/code&gt; オブジェクトは、分析結果に関連する拡張情報を提供します。現在、 &lt;code&gt;data&lt;/code&gt; オブジェクトは &lt;code&gt;rulesMeta&lt;/code&gt; という名前の単一のプロパティで構成されています。このプロパティは、ルールメタデータのディクショナリであり、 &lt;code&gt;ruleId&lt;/code&gt; をキーとします。各エントリの値は、対応するルールオブジェクトの &lt;code&gt;meta&lt;/code&gt; プロパティです。ディクショナリには、分析中に実行された各ルールのエントリが含まれています。</target>
        </trans-unit>
        <trans-unit id="10638ad26a2336c237513cb7fa8ba9e360e6572f" translate="yes" xml:space="preserve">
          <source>The expressions in a &lt;code&gt;for&lt;/code&gt; statement should be separated by blank spaces. Blank spaces should only be used after semicolons, not before.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ステートメントの式は、空白で区切る必要があります。空白は、セミコロンの前ではなく、後にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0857209508949425ce9520e024dc97908dd75683" translate="yes" xml:space="preserve">
          <source>The first is a string which be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">1つ目は、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; 常に」の文字列です。デフォルトは &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6c11e634588bcc74080a015687bda5aa0bfac1d9" translate="yes" xml:space="preserve">
          <source>The first is using &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt; (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:</source>
          <target state="translated">1つ目は、 &lt;code&gt;setTimeout()&lt;/code&gt; 、 &lt;code&gt;setInterval()&lt;/code&gt; または &lt;code&gt;execScript()&lt;/code&gt; （Internet Explorerのみ）を使用する方法です。これらはすべて、最初の引数としてJavaScriptコードの文字列を受け入れることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="6d4bbf2fb18f805ebaadc20bfc29b2a73d3969ac" translate="yes" xml:space="preserve">
          <source>The first line contains only the &lt;code&gt;/*&lt;/code&gt; comment opening. No further text is allowed on this line.</source>
          <target state="translated">最初の行には、 &lt;code&gt;/*&lt;/code&gt; コメントの開始部分のみが含まれています。この行にそれ以上のテキストは許可されません。</target>
        </trans-unit>
        <trans-unit id="6154e02adfa070a6b3e169f562e328e046578b3d" translate="yes" xml:space="preserve">
          <source>The first line of multi-comments should be indented to the same level as the code it describes. Each subsequent line should have the same indentation plus one space (for proper alignment of the &lt;code&gt;*&lt;/code&gt; characters). Each multi-line comment should be preceded by one empty line.</source>
          <target state="translated">マルチコメントの最初の行は、それが説明するコードと同じレベルにインデントする必要があります。後続の各行には、同じインデントと1つのスペースが必要です（ &lt;code&gt;*&lt;/code&gt; 文字を適切に配置するため）。各複数行コメントの前には、1行の空行が必要です。</target>
        </trans-unit>
        <trans-unit id="5072260dd42b4b3af826cc62dd8fbb33239f1233" translate="yes" xml:space="preserve">
          <source>The first line of the commit message (the summary) must have a specific format. This format is checked by our build tools.</source>
          <target state="translated">コミットメッセージの最初の行 (サマリー)は、特定のフォーマットでなければなりません。このフォーマットはビルドツールによってチェックされます。</target>
        </trans-unit>
        <trans-unit id="eaba518aba6a1d6f3d301b713e35495cf26fd58b" translate="yes" xml:space="preserve">
          <source>The first problem is that primitive wrapper objects are, in fact, objects. That means &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;&quot;object&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, or &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;. The second problem comes with boolean objects. Every object is truthy, that means an instance of &lt;code&gt;Boolean&lt;/code&gt; always resolves to &lt;code&gt;true&lt;/code&gt; even when its actual value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">最初の問題は、プリミティブラッパーオブジェクトが実際にはオブジェクトであることです。つまり、 &lt;code&gt;typeof&lt;/code&gt; は、 &lt;code&gt;&quot;string&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;number&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; ではなく &lt;code&gt;&quot;object&quot;&lt;/code&gt; を返します。2番目の問題は、ブール型オブジェクトで発生します。すべてのオブジェクトは真実です。つまり、 &lt;code&gt;Boolean&lt;/code&gt; インスタンスは、実際の値が &lt;code&gt;false&lt;/code&gt; であっても常に &lt;code&gt;true&lt;/code&gt; に解決されます。</target>
        </trans-unit>
        <trans-unit id="984bf5268b0ddf754b28d771410a618bd31b5080" translate="yes" xml:space="preserve">
          <source>The first step to sending a pull request is to create a new branch in your ESLint fork. Give the branch a descriptive name that describes what it is you're fixing, such as:</source>
          <target state="translated">プルリクエストを送る最初のステップは、ESLint フォークに新しいブランチを作成することです。ブランチには何を修正しているのかを説明する名前をつけてください。</target>
        </trans-unit>
        <trans-unit id="89a5d6f7116af9ee2720543818896897a369050f" translate="yes" xml:space="preserve">
          <source>The first throwable node (e.g. a function call) in the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; ブロックの最初のスロー可能なノード（関数呼び出しなど）。</target>
        </trans-unit>
        <trans-unit id="d71475a3d6080cbad00254ef62ed2324f9e45663" translate="yes" xml:space="preserve">
          <source>The first way to use configuration files is via &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (unless &lt;code&gt;root: true&lt;/code&gt; is specified). This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.</source>
          <target state="translated">構成ファイルを使用する最初の方法は、 &lt;code&gt;.eslintrc.*&lt;/code&gt; および &lt;code&gt;package.json&lt;/code&gt; ファイルを使用することです。ESLintは自動的にそれらがlintedされるファイルのディレクトリで、そしてファイルシステムのルートディレクトリに至るまで連続した親ディレクトリで検索します（ &lt;code&gt;root: true&lt;/code&gt; が指定されている場合を除く）。このオプションは、プロジェクトのさまざまな部分に異なる構成が必要な場合、または構成ファイルを渡さなくても他のユーザーがESLintを直接使用できるようにする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="7899f93b94b39beef8a71db444282ddbbd5e7124" translate="yes" xml:space="preserve">
          <source>The following configuration ignores indentation in the body of IIFEs.</source>
          <target state="translated">以下の設定では、IIFEの本文のインデントを無視します。</target>
        </trans-unit>
        <trans-unit id="41c40b6e586fc5cb09bbc72af12c8f09e123d736" translate="yes" xml:space="preserve">
          <source>The following configuration ignores the indentation of &lt;code&gt;ConditionalExpression&lt;/code&gt; (&quot;ternary expression&quot;) nodes:</source>
          <target state="translated">次の構成では、 &lt;code&gt;ConditionalExpression&lt;/code&gt; （「3次式」）ノードのインデントは無視されます。</target>
        </trans-unit>
        <trans-unit id="d5fa8b20b228bdd086131e38e40e897cbd6cbf7a" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will not&lt;/strong&gt; be flagged:</source>
          <target state="translated">次の例&lt;strong&gt;には&lt;/strong&gt;フラグが付けられ&lt;strong&gt;ませ&lt;/strong&gt;ん。</target>
        </trans-unit>
        <trans-unit id="f5287d99a37de7104aa2ed235baa902a0ec5078d" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will&lt;/strong&gt; be flagged:</source>
          <target state="translated">次の例では&lt;strong&gt;します&lt;/strong&gt;フラグを立てること。</target>
        </trans-unit>
        <trans-unit id="c14ba9c0ea8a095e66d6957614fae22fac370baf" translate="yes" xml:space="preserve">
          <source>The following exceptions are available:</source>
          <target state="translated">以下のような例外があります。</target>
        </trans-unit>
        <trans-unit id="cf3496b833b4ce7626fcd6541bf610fb0c36af11" translate="yes" xml:space="preserve">
          <source>The following exceptions are available: &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt;.</source>
          <target state="translated">次の例外が利用可能です： &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc06f672c1606cd07e74f3dea672e030eb3b9e95" translate="yes" xml:space="preserve">
          <source>The following is another example of this behavior:</source>
          <target state="translated">この動作の別の例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="2a56e159d769ca06392168750d10004a388bb2d2" translate="yes" xml:space="preserve">
          <source>The following methods internally use the &lt;code&gt;===&lt;/code&gt; comparison to match the given value with an array element:</source>
          <target state="translated">次のメソッドは、内部で &lt;code&gt;===&lt;/code&gt; 比較を使用して、指定された値を配列要素と照合します。</target>
        </trans-unit>
        <trans-unit id="5d5534fd1ddcbfd687919d332b483e9a80e0f5bb" translate="yes" xml:space="preserve">
          <source>The following operators can be used in &lt;code&gt;groups&lt;/code&gt; option:</source>
          <target state="translated">次の演算子は &lt;code&gt;groups&lt;/code&gt; オプションで使用できます。</target>
        </trans-unit>
        <trans-unit id="6b976bf24d5d6d504746e7c6ab5309ec8057839f" translate="yes" xml:space="preserve">
          <source>The following parsers are compatible with ESLint:</source>
          <target state="translated">以下のパーサーはESLintと互換性があります。</target>
        </trans-unit>
        <trans-unit id="0d78993759d70053fb65fd89fcd97c00ecd762fb" translate="yes" xml:space="preserve">
          <source>The following pattern is under strict mode globally and is considered valid with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option and a warning with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option.</source>
          <target state="translated">次のパターンは、グローバルstrictモードの下にあるとして有効であると考えられる &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションとして警告 &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="d729325dfb7e6f59aa92e87801a3213c9448843d" translate="yes" xml:space="preserve">
          <source>The following patterns apply strict mode only to functions so are valid with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option but are problems with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option.</source>
          <target state="translated">次のパターンはストリクトモードを関数にのみ適用するため、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションで有効ですが、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションでは問題があります。</target>
        </trans-unit>
        <trans-unit id="4c8beda3159d864bcb7168811d6ca919b1da89c2" translate="yes" xml:space="preserve">
          <source>The following rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">次のルールが&lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; 構成に&lt;/a&gt;追加されました。</target>
        </trans-unit>
        <trans-unit id="43d343a3ec041d356d216b275ad524155322bd82" translate="yes" xml:space="preserve">
          <source>The following rules have been deprecated with new rules created to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">以下のルールは廃止され、代わりに新しいルールが作成されました。以下は、削除されたルールとその代替ルールのリストです。</target>
        </trans-unit>
        <trans-unit id="fd8fba26361e9e9eea3de62de397689436cfaa0d" translate="yes" xml:space="preserve">
          <source>The following rules were modified:</source>
          <target state="translated">以下のルールを修正しました。</target>
        </trans-unit>
        <trans-unit id="cbf28d7aa679ef7fb32bcf23869dde2a833ca6c5" translate="yes" xml:space="preserve">
          <source>The following rules were removed from &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">次のルールが &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; から削除されました。</target>
        </trans-unit>
        <trans-unit id="4b1c496bbd734835e82ecba2dcd535dd72437441" translate="yes" xml:space="preserve">
          <source>The following selectors are supported:</source>
          <target state="translated">以下のセレクタに対応しています。</target>
        </trans-unit>
        <trans-unit id="50fe0ca19519467513afe9de899977912a5dca9e" translate="yes" xml:space="preserve">
          <source>The function declaration portion rule will be rendered obsolete when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;block-scoped functions&lt;/a&gt; land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using &lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt; or if declaring variables in nested blocks is acceptable despite hoisting.</source>
          <target state="translated">関数宣言部分のルールは、ES6 に&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;ブロックスコープの関数&lt;/a&gt;が含まれている場合は廃止されますが、それまでは有効な構文を適用するためにそのままにしておく必要があります。&lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-varを&lt;/a&gt;使用する場合、またはホイストしてもネストされたブロックで変数を宣言できる場合は、変数宣言のチェックを無効にします。</target>
        </trans-unit>
        <trans-unit id="db3dccfd930abb34e566f04f78fc9ed70b467b0b" translate="yes" xml:space="preserve">
          <source>The function has &lt;code&gt;@this&lt;/code&gt; tag in its JSDoc comment.</source>
          <target state="translated">関数のJSDocコメントに &lt;code&gt;@this&lt;/code&gt; タグがあります。</target>
        </trans-unit>
        <trans-unit id="5620d241e1ebd93a4e8ac57b317c474f477713ad" translate="yes" xml:space="preserve">
          <source>The function invocation can be written by &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;. But &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; are slower than the normal function invocation.</source>
          <target state="translated">関数の呼び出しは、 &lt;code&gt;Function.prototype.call()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; で記述できます。ただし、 &lt;code&gt;Function.prototype.call()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; は、通常の関数呼び出しよりも低速です。</target>
        </trans-unit>
        <trans-unit id="a5351ac484a8bf3cb3ea45d7dd69d4667a894926" translate="yes" xml:space="preserve">
          <source>The function is a callback of array methods (such as &lt;code&gt;.forEach()&lt;/code&gt;) if &lt;code&gt;thisArg&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;thisArg&lt;/code&gt; が指定されている場合、関数は配列メソッド（ &lt;code&gt;.forEach()&lt;/code&gt; など）のコールバックです。</target>
        </trans-unit>
        <trans-unit id="deb40c3066f6e38deb8139ba56f87dc333a2a42d" translate="yes" xml:space="preserve">
          <source>The function is a constructor of ES2015 Classes.</source>
          <target state="translated">この関数はES2015クラスのコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="de02b593b295da2bc2bad8e8f15be1427537b0d8" translate="yes" xml:space="preserve">
          <source>The function is a method/getter/setter of ES2015 Classes. (excepts static methods)</source>
          <target state="translated">この関数はES2015クラスのメソッド/ゲッター/セッターです。(静的メソッドを除く)</target>
        </trans-unit>
        <trans-unit id="58b8b313fb5fc9cea0cb6de31e257ad439368b79" translate="yes" xml:space="preserve">
          <source>The function is assigned to a property.</source>
          <target state="translated">プロパティに関数が割り当てられています。</target>
        </trans-unit>
        <trans-unit id="1ec2f55a7c94721043c141bc1c6ef3a223affda5" translate="yes" xml:space="preserve">
          <source>The function is assigned to a variable which starts with an uppercase letter.</source>
          <target state="translated">大文字で始まる変数に関数を代入します。</target>
        </trans-unit>
        <trans-unit id="f1a468e18550838069874f9e16dfdc8a15a09a28" translate="yes" xml:space="preserve">
          <source>The function is on an object literal.</source>
          <target state="translated">関数はオブジェクトリテラル上にあります。</target>
        </trans-unit>
        <trans-unit id="24287496e1c3d7550a774298bb9d98fa77335f61" translate="yes" xml:space="preserve">
          <source>The function's</source>
          <target state="translated">関数の</target>
        </trans-unit>
        <trans-unit id="aeaafe54aaf295b5e3e4fde9b2befddf145018a6" translate="yes" xml:space="preserve">
          <source>The get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:</source>
          <target state="translated">get 構文は、オブジェクトのプロパティを、そのプロパティが検索されたときに呼び出される関数にバインドします。これは ECMAScript 5 で初めて導入されました。</target>
        </trans-unit>
        <trans-unit id="5303cca7341f758ff7259b4665508fac4ca8d017" translate="yes" xml:space="preserve">
          <source>The global's</source>
          <target state="translated">グローバルの</target>
        </trans-unit>
        <trans-unit id="cd1ea1f16f00e056aa55de069fc2ba6f16e8946b" translate="yes" xml:space="preserve">
          <source>The goal of using &lt;code&gt;new&lt;/code&gt; with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</source>
          <target state="translated">使用の目的 &lt;code&gt;new&lt;/code&gt; コンストラクタでは、次のような、特定の種類のオブジェクトを作成し、変数にそのオブジェクトを保存するために、典型的です。</target>
        </trans-unit>
        <trans-unit id="acac3d2c78a0442ff5e1d6b8f826069158684f0b" translate="yes" xml:space="preserve">
          <source>The implementation is not aware of any local functions with the name &lt;code&gt;require&lt;/code&gt; that may shadow Node.js' global &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">実装は、Node.jsのグローバルな &lt;code&gt;require&lt;/code&gt; をシャドウする可能性がある &lt;code&gt;require&lt;/code&gt; という名前のローカル関数を認識していません。</target>
        </trans-unit>
        <trans-unit id="032f95f2ad52750fe42b95d8612f0f3b8a88f333" translate="yes" xml:space="preserve">
          <source>The import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.</source>
          <target state="translated">import文は、エクスポートされたバインディングを使わずにモジュールをインポートすることもできます。モジュールが何もエクスポートせずに独自のコードを実行したり、グローバルコンテキストオブジェクトを変更したりする場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="0eeaf642c54558bc59a95b083b854c711c38cc2b" translate="yes" xml:space="preserve">
          <source>The import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:</source>
          <target state="translated">import 文は、外部モジュールからエクスポートされたメンバ (関数、オブジェクト、またはプリミティブ)をインポートするために使用します。特定のメンバ構文を使用します。</target>
        </trans-unit>
        <trans-unit id="4a80f2125f069a5f1c92caf6dad61a91aa823038" translate="yes" xml:space="preserve">
          <source>The information available for each linting message is:</source>
          <target state="translated">リンティングメッセージごとに利用可能な情報があります。</target>
        </trans-unit>
        <trans-unit id="7675327e3125cbdffe94a48f7416e4309f48e134" translate="yes" xml:space="preserve">
          <source>The information available is:</source>
          <target state="translated">入手可能な情報は</target>
        </trans-unit>
        <trans-unit id="026fee076803b9a433c8e9acb756fb2b3e489841" translate="yes" xml:space="preserve">
          <source>The kind of the way to address variables in destructuring. There are 2 values:</source>
          <target state="translated">デストラクチャリングでの変数のアドレスの取り方の種類。値は2つあります。</target>
        </trans-unit>
        <trans-unit id="c38f57d73e2ff10d4366adce9c62d418943b8650" translate="yes" xml:space="preserve">
          <source>The last line has the &lt;code&gt;*/&lt;/code&gt; comment opening aligned with the preceding lines. No other text is allowed on this line.</source>
          <target state="translated">最後の行には、前の行と揃えて &lt;code&gt;*/&lt;/code&gt; コメントの開始があります。この行に他のテキストを入力することはできません。</target>
        </trans-unit>
        <trans-unit id="cf2418cd74bfe3b3574af71ae7e2102cc8457373" translate="yes" xml:space="preserve">
          <source>The line comment &lt;code&gt;// exported variableName&lt;/code&gt; will not work as &lt;code&gt;exported&lt;/code&gt; is not line-specific.</source>
          <target state="translated">行コメント &lt;code&gt;// exported variableName&lt;/code&gt; は、 &lt;code&gt;exported&lt;/code&gt; が行固有ではないため機能しません。</target>
        </trans-unit>
        <trans-unit id="dd3923f68fea3cc32c62bea7c26b00e55243f62f" translate="yes" xml:space="preserve">
          <source>The line is &lt;code&gt;--&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt; (in which case it will decrement/increment the next token.)</source>
          <target state="translated">行は &lt;code&gt;--&lt;/code&gt; または &lt;code&gt;++&lt;/code&gt; です（この場合、次のトークンが減分/増分されます）。</target>
        </trans-unit>
        <trans-unit id="8fc6d3dc22f28ddac02852365e2f486c4a9fbcb1" translate="yes" xml:space="preserve">
          <source>The linebreaks (new lines) used in windows operating system are usually &lt;em&gt;carriage returns&lt;/em&gt; (CR) followed by a &lt;em&gt;line feed&lt;/em&gt; (LF) making it a &lt;em&gt;carriage return line feed&lt;/em&gt; (CRLF) whereas Linux and Unix use a simple &lt;em&gt;line feed&lt;/em&gt; (LF). The corresponding &lt;em&gt;control sequences&lt;/em&gt; are &lt;code&gt;&quot;\n&quot;&lt;/code&gt; (for LF) and &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; for (CRLF).</source>
          <target state="translated">Windowsオペレーティングシステムで使用される改行（改行）は通常、&lt;em&gt;キャリッジリターン&lt;/em&gt;（CR）の後に&lt;em&gt;ラインフィード&lt;/em&gt;（LF）が続き、&lt;em&gt;キャリッジリターンラインフィード&lt;/em&gt;（CRLF）になりますが、LinuxおよびUnixは単純な&lt;em&gt;ラインフィード&lt;/em&gt;（LF）を使用します。対応する&lt;em&gt;制御シーケンス&lt;/em&gt;は、 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; （LFの場合）および &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; （CRLF）です。</target>
        </trans-unit>
        <trans-unit id="2201d7d5091e9b276f0386c81e6c9e6b5aad5f13" translate="yes" xml:space="preserve">
          <source>The lists below are ordered roughly by the number of users each change is expected to affect, where the first items are expected to affect the most users.</source>
          <target state="translated">以下のリストは、各変更が影響を与えると予想されるユーザー数の多い順に大まかに並べられており、最初の項目が最も多くのユーザーに影響を与えると予想されています。</target>
        </trans-unit>
        <trans-unit id="cd5ba3dd3a61a71ce3c2df5c8c27632dbb8e611b" translate="yes" xml:space="preserve">
          <source>The main method is &lt;code&gt;cli.execute()&lt;/code&gt;, which accepts an array of strings that represent the command line options (as if &lt;code&gt;process.argv&lt;/code&gt; were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then &lt;code&gt;cli&lt;/code&gt; is the object to use.</source>
          <target state="translated">主なメソッドは &lt;code&gt;cli.execute()&lt;/code&gt; で、コマンドラインオプションを表す文字列の配列を受け入れます（まるで、最初の2つの引数なしで &lt;code&gt;process.argv&lt;/code&gt; が渡されたかのように）。別のプログラムの内部からESLintを実行し、それをCLIのように動作させる場合、 &lt;code&gt;cli&lt;/code&gt; は使用するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="82c7fc418c96dfe485b72e97d5785c7b1f84d1d1" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;CLIEngine&lt;/code&gt; is &lt;code&gt;executeOnFiles()&lt;/code&gt;, which accepts an array of file and directory names to run the linter on.</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; の主なメソッドは &lt;code&gt;executeOnFiles()&lt;/code&gt; です。これは、リンターを実行するファイルおよびディレクトリ名の配列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="aa5cd71ecca317561d0f3120437420e4eb266e86" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;Linter&lt;/code&gt; object is &lt;code&gt;verify()&lt;/code&gt; and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with &lt;code&gt;espree&lt;/code&gt; (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; オブジェクトのメインメソッドは &lt;code&gt;verify()&lt;/code&gt; であり、2つの引数を受け入れます。検証するソーステキストと構成オブジェクト（指定された構成ファイルのベイクされた構成とコマンドラインオプション）です。このメソッドは最初に、指定されたテキストを &lt;code&gt;espree&lt;/code&gt; （または構成済みのパーサーが何であれ）で解析し、ASTを取得します。ASTは、行/列と範囲の両方の場所で生成されます。これは、問題の場所のレポートとASTノードに関連するソーステキストの取得にそれぞれ役立ちます。</target>
        </trans-unit>
        <trans-unit id="b71267395abe4b458e8e16055642b9f1606731d6" translate="yes" xml:space="preserve">
          <source>The main method you'll use is &lt;code&gt;context.report()&lt;/code&gt;, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties:</source>
          <target state="translated">使用する主なメソッドは &lt;code&gt;context.report()&lt;/code&gt; で、警告またはエラーを発行します（使用されている構成によって異なります）。このメソッドは、次のプロパティを含むオブジェクトである単一の引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2aa043d4f97cda6b2c4e5a4d1829ce7593f304b2" translate="yes" xml:space="preserve">
          <source>The message summary should be a one-sentence description of the change, and it must be 72 characters in length or shorter. If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use &lt;code&gt;(refs #1234)&lt;/code&gt; instead of &lt;code&gt;(fixes #1234)&lt;/code&gt;.</source>
          <target state="translated">メッセージの要約は、変更を1文で説明したもので、長さは72文字以下である必要があります。プルリクエストが問題に対処する場合、問題番号を最後に記載する必要があります。コミットで問題が完全に解決しない場合は、 &lt;code&gt;(refs #1234)&lt;/code&gt; 代わりに &lt;code&gt;(fixes #1234)&lt;/code&gt; refs＃1234）を使用します。</target>
        </trans-unit>
        <trans-unit id="447ba6b4ad05e52da0b122358fe9cf1656020fec" translate="yes" xml:space="preserve">
          <source>The modification does not depend on whether the object option is set to &lt;code&gt;true&lt;/code&gt;. In other words, ESLint never collects all the property specifications onto a single line, even when the object option would permit that.</source>
          <target state="translated">変更は、オブジェクトオプションが &lt;code&gt;true&lt;/code&gt; に設定されているかどうかには依存しません。つまり、ESLintは、オブジェクトオプションで許可されている場合でも、すべてのプロパティ仕様を1行に収集することはありません。</target>
        </trans-unit>
        <trans-unit id="d8b8c078bf2e1f6851bd595f2c2f5cc6bbf13048" translate="yes" xml:space="preserve">
          <source>The module name can also be customized, just note that when using &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped modules&lt;/a&gt; it is not possible to omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix. Doing so would result in package naming conflicts, and thus in resolution errors in most of cases. For example a package named &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; vs &lt;code&gt;@scope/my-config&lt;/code&gt;, since both are valid scoped package names, the configuration should be specified as:</source>
          <target state="translated">モジュール名もカスタマイズでき&lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;ます。スコープモジュール&lt;/a&gt;を使用する場合は、 &lt;code&gt;eslint-config-&lt;/code&gt; プレフィックスを省略できないことに注意してください。これを行うと、パッケージの名前が競合し、ほとんどの場合、解決エラーが発生します。たとえば、 &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; と &lt;code&gt;@scope/my-config&lt;/code&gt; という名前のパッケージの場合、どちらも有効なスコープパッケージ名であるため、構成は次のように指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="391d507111f772a5e622a4978aa02bebdf000901" translate="yes" xml:space="preserve">
          <source>The most important difference in v1.0.0 is that all rules are off by default. We made this change after numerous requests to allow turning off the default rules from within configuration files. While that wasn't technically feasible, it was feasible to have all rules off by default and then re-enable rules in configuration files using &lt;code&gt;extends&lt;/code&gt;. As such, we've made the &lt;code&gt;--reset&lt;/code&gt; behavior the default and removed this command line option.</source>
          <target state="translated">v1.0.0の最も重要な違いは、すべてのルールがデフォルトでオフになっていることです。この変更は、構成ファイル内からデフォルトルールをオフにできるようにするための多数のリクエストの後に行われました。これは技術的に実現可能ではありませんでしたが、デフォルトですべてのルールをオフにしてから、 &lt;code&gt;extends&lt;/code&gt; を使用して設定ファイルでルールを再度有効にすることも可能でした。そのため、 &lt;code&gt;--reset&lt;/code&gt; 動作をデフォルトにして、このコマンドラインオプションを削除しました。</target>
        </trans-unit>
        <trans-unit id="2981f174eb319000ec7b9dc71dff618ba3924b94" translate="yes" xml:space="preserve">
          <source>The most important method on &lt;code&gt;Linter&lt;/code&gt; is &lt;code&gt;verify()&lt;/code&gt;, which initiates linting of the given text. This method accepts three arguments:</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; で最も重要なメソッドは &lt;code&gt;verify()&lt;/code&gt; です。これは、指定されたテキストのリンティングを開始します。このメソッドは3つの引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2d9309f4804540bc446c7db5a5a0e204ff20ebd8" translate="yes" xml:space="preserve">
          <source>The name of the function starts with uppercase.</source>
          <target state="translated">関数名は大文字から始まります。</target>
        </trans-unit>
        <trans-unit id="c187d7bc3b11447dcbf3b003402ff51671b83ee4" translate="yes" xml:space="preserve">
          <source>The name of the rule (string)</source>
          <target state="translated">ルールの名前(文字列</target>
        </trans-unit>
        <trans-unit id="3d05f85495e18f50c10102d3389fcbc9d5973e21" translate="yes" xml:space="preserve">
          <source>The names &lt;code&gt;&quot;semi&quot;&lt;/code&gt; and &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; are the names of &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules&lt;/a&gt; in ESLint. The first value is the error level of the rule and can be one of these values:</source>
          <target state="translated">名称 &lt;code&gt;&quot;semi&quot;&lt;/code&gt; と &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; の名で&lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;ルール&lt;/a&gt; ESLintインチ 最初の値はルールのエラーレベルで、次のいずれかの値になります。</target>
        </trans-unit>
        <trans-unit id="03f1e3c6076e63d911680ce1f195f2b2861a99e5" translate="yes" xml:space="preserve">
          <source>The next line starts with &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, or some other binary operator that can only be found between two tokens in a single expression.</source>
          <target state="translated">次の行で始まる &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、、 &lt;code&gt;,&lt;/code&gt; 。 &lt;code&gt;.&lt;/code&gt; または単一の式で2つのトークンの間に見つけることができるいくつかの他のバイナリ演算子。</target>
        </trans-unit>
        <trans-unit id="ed3de168e4acf1680325d171a28dd7b74b024412" translate="yes" xml:space="preserve">
          <source>The next line(s) have a &lt;code&gt;*&lt;/code&gt; aligned with the &lt;code&gt;*&lt;/code&gt; in the first line. Text is allowed on these lines.</source>
          <target state="translated">次の行（複数可）は &lt;code&gt;*&lt;/code&gt; と整列 &lt;code&gt;*&lt;/code&gt; 最初の行です。これらの行にはテキストを入力できます。</target>
        </trans-unit>
        <trans-unit id="00194fc1917a102824f66484638b388a032a7482" translate="yes" xml:space="preserve">
          <source>The node contains all of the information necessary to figure out the line and column number of the offending text as well the source text representing the node.</source>
          <target state="translated">ノードには、そのノードを表すソーステキストだけでなく、違反テキストの行番号と列番号を把握するために必要なすべての情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="d45e635828bcb31db112256ea444b8c6bf3fd18e" translate="yes" xml:space="preserve">
          <source>The only acceptable time to have multiple single-line comments on successive lines is to comment out large sections of code. Multi-line comments should not be used for this purpose.</source>
          <target state="translated">連続した行に複数の一行コメントをつけることが許されるのは、コードの大きなセクションをコメントアウトするときだけです。複数行コメントはこの目的には使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6a644e143491953839301b85bb8b200e474de5ab" translate="yes" xml:space="preserve">
          <source>The only time you would compare a variable against itself is when you are testing for &lt;code&gt;NaN&lt;/code&gt;. However, it is far more appropriate to use &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015 function&lt;/a&gt; for that use case rather than leaving the reader of the code to determine the intent of self comparison.</source>
          <target state="translated">変数をそれ自体と比較するのは、 &lt;code&gt;NaN&lt;/code&gt; をテストするときだけです。ただし、コードのリーダーを離れて自己比較の目的を決定するよりも、そのユースケースでは &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015関数&lt;/a&gt;を使用する方がはるかに適切です。</target>
        </trans-unit>
        <trans-unit id="fae2f2bc90a52f0d6909f6ceb19aaafac0a26360" translate="yes" xml:space="preserve">
          <source>The opening brace should be at the end of the line that begins the compound statement; the closing brace should begin a line and be indented to the beginning of the compound statement.</source>
          <target state="translated">開始波括弧は複合文を開始する行の末尾に、終了波括弧は行を開始し、複合文の先頭にインデントされている必要があります。</target>
        </trans-unit>
        <trans-unit id="abfabb83ce95a74f0937675f7094af1e6695a2c0" translate="yes" xml:space="preserve">
          <source>The opening brace should be on the same line as the containing statement.</source>
          <target state="translated">開始波括弧は、含まれる文と同じ行にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9b551f3ef4076d91cd7f96a1f41ae4787a40977" translate="yes" xml:space="preserve">
          <source>The option also has a string shorthand:</source>
          <target state="translated">このオプションには文字列の短縮形もあります。</target>
        </trans-unit>
        <trans-unit id="de7031af6085176060b0ac36063990d91e8f177b" translate="yes" xml:space="preserve">
          <source>The optional exception does not excuse this case, because the entire collection of property specifications spans 4 lines, not 1.</source>
          <target state="translated">プロパティの仕様書のコレクション全体が1行ではなく4行にまたがっているため、オプションの例外はこのケースを言い訳にしていません。</target>
        </trans-unit>
        <trans-unit id="dcedceca0a5fbd9f7abfd655550b7f46c22973d8" translate="yes" xml:space="preserve">
          <source>The options allow labels with loop or switch statements:</source>
          <target state="translated">オプションでは、ループ文やスイッチ文を含むラベルを許可しています。</target>
        </trans-unit>
        <trans-unit id="cf49b44308f034d8aba18fe071fc2b7ec04bd224" translate="yes" xml:space="preserve">
          <source>The options available and the expected syntax for &lt;code&gt;parserOptions&lt;/code&gt; is the same as those used in &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">使用可能なオプションと &lt;code&gt;parserOptions&lt;/code&gt; に期待される構文は、&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;構成で&lt;/a&gt;使用されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">出力されるのは</target>
        </trans-unit>
        <trans-unit id="f4dc89186e373e825b6dfa59c8110b3946aeee21" translate="yes" xml:space="preserve">
          <source>The output would be:</source>
          <target state="translated">出力されるのは</target>
        </trans-unit>
        <trans-unit id="9789ff50f50df37207f7264a43f1a689f0688f0a" translate="yes" xml:space="preserve">
          <source>The patterns are applied against the file path relative to the directory of the config file. For example, if your config file has the path &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; and the file you want to lint has the path &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt;, then the pattern provided in &lt;code&gt;.eslintrc.js&lt;/code&gt; will be executed against the relative path &lt;code&gt;lib/util.js&lt;/code&gt;.</source>
          <target state="translated">パターンは、設定ファイルのディレクトリを基準にしたファイルパスに対して適用されます。たとえば、設定ファイルのパスが &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; で、lintするファイルのパスが &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt; 場合、 &lt;code&gt;.eslintrc.js&lt;/code&gt; で提供されるパターンは、相対パス &lt;code&gt;lib/util.js&lt;/code&gt; に対して実行されます。</target>
        </trans-unit>
        <trans-unit id="d7c7d55489a5efe043679a245ed2e68741b450b6" translate="yes" xml:space="preserve">
          <source>The pitfalls of using objects as maps in JavaScript</source>
          <target state="translated">JavaScriptでオブジェクトをマップとして使うことの落とし穴</target>
        </trans-unit>
        <trans-unit id="05157eccd9a4d06e6ff4c2778c2a6f7b853c19e7" translate="yes" xml:space="preserve">
          <source>The prefer-reflect rule will flag usage of any older method, suggesting to instead use the newer Reflect version.</source>
          <target state="translated">prefer-reflect ルールは、古いメソッドの使用にフラグを立て、代わりに新しい Reflect のバージョンを使用することを提案します。</target>
        </trans-unit>
        <trans-unit id="019176c59859ffc7e6915010bb0d29fc4116cb11" translate="yes" xml:space="preserve">
          <source>The primary Node.js API is &lt;code&gt;CLIEngine&lt;/code&gt;, which is the underlying utility that runs the ESLint command line interface. This object will read the filesystem for configuration and file information but will not output any results. Instead, it allows you direct access to the important information so you can deal with the output yourself.</source>
          <target state="translated">主要なNode.js APIは &lt;code&gt;CLIEngine&lt;/code&gt; です。これは、ESLintコマンドラインインターフェースを実行する基本的なユーティリティです。このオブジェクトは、構成とファイル情報についてファイルシステムを読み取りますが、結果を出力しません。代わりに、重要な情報に直接アクセスできるため、出力を自分で処理できます。</target>
        </trans-unit>
        <trans-unit id="c476b276186c6fb97acc415f8441c0d6359f3d36" translate="yes" xml:space="preserve">
          <source>The primary difference between &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function expressions&lt;/code&gt; is that declarations are &lt;em&gt;hoisted&lt;/em&gt; to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 宣言と &lt;code&gt;function expressions&lt;/code&gt; の主な違いは、宣言はそれらが定義されているスコープの最上位に&lt;em&gt;引き上げ&lt;/em&gt;られるため、宣言の前に関数を使用するコードを記述できることです。例えば：</target>
        </trans-unit>
        <trans-unit id="cc5cca2ea790657770c377a55c8c2c9d38976e25" translate="yes" xml:space="preserve">
          <source>The primary reason to use asynchronous functions is typically to use the &lt;code&gt;await&lt;/code&gt; operator, such as this:</source>
          <target state="translated">非同期関数を使用する主な理由は、通常、次のような &lt;code&gt;await&lt;/code&gt; 演算子を使用するためです。</target>
        </trans-unit>
        <trans-unit id="27f63a6807abd8b3bd2aa20888273f48ea3fa67c" translate="yes" xml:space="preserve">
          <source>The primary script to use is &lt;code&gt;npm test&lt;/code&gt;, which does several things:</source>
          <target state="translated">使用する主要なスクリプトは &lt;code&gt;npm test&lt;/code&gt; で、いくつかのことを行います。</target>
        </trans-unit>
        <trans-unit id="88571aeb3633660582e146f8ca69889ac98fb83d" translate="yes" xml:space="preserve">
          <source>The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements. It helps the code to look consistent across the entire project.</source>
          <target state="translated">問題は、これらの開発者がプロ​​ジェクトで一緒に作業する場合です。このルールは、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;const&lt;/code&gt; ステートメントの後に空の改行が許可または禁止されるコーディングスタイルを適用します。これにより、コードがプロジェクト全体で一貫して見えるようになります。</target>
        </trans-unit>
        <trans-unit id="c7abf9c98248c9d5e551542e1f7cf64b22ee6b71" translate="yes" xml:space="preserve">
          <source>The problem you want to solve.</source>
          <target state="translated">あなたが解決したい問題</target>
        </trans-unit>
        <trans-unit id="fbe43fced48ce154fc594e0d7efd5a4fe22b0e58" translate="yes" xml:space="preserve">
          <source>The process of submitting a pull request is fairly straightforward and generally follows the same pattern each time:</source>
          <target state="translated">プルリクエストを提出するプロセスはかなり簡単で、一般的には毎回同じパターンに従います。</target>
        </trans-unit>
        <trans-unit id="c3bb0c19b313c5a8f9e87aaba0c7d42779858d8a" translate="yes" xml:space="preserve">
          <source>The proponents of these extra spaces believe it make the code easier to read and can more easily highlight potential errors, such as:</source>
          <target state="translated">これらの余分なスペースの支持者は、コードを読みやすくし、以下のような潜在的なエラーをより簡単に強調することができると考えています。</target>
        </trans-unit>
        <trans-unit id="842b4413185a6f29a14a60bf357af03cfc8c67fc" translate="yes" xml:space="preserve">
          <source>The pull request must have a description. The description should explain what you did and how its effects can be seen.</source>
          <target state="translated">プルリクエストには説明文が必要です。説明文は何をしたのか、その効果がどのように見えるのかを説明しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9f51bbd346695224f5a3bba69d99964bfc48d685" translate="yes" xml:space="preserve">
          <source>The purpose is to avoid expressions such as &lt;code&gt;! a &amp;lt; b&lt;/code&gt; (which is equivalent to &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt;) when what is really intended is &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt;.</source>
          <target state="translated">目的は、 &lt;code&gt;! a &amp;lt; b&lt;/code&gt; などの表現を避けることです。a &amp;lt;b（これは &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt; と同等）であり、実際に意図したものは &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d6c661a567da1e6f27caf7616e695a2df7785021" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;code&gt;delete&lt;/code&gt; operator is to remove a property from an object. Using the &lt;code&gt;delete&lt;/code&gt; operator on a variable might lead to unexpected behavior.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 演算子の目的は、オブジェクトからプロパティを削除することです。変数で &lt;code&gt;delete&lt;/code&gt; 演算子を使用すると、予期しない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8dc19192de8fb3195f72308a36d5ed027027af0b" translate="yes" xml:space="preserve">
          <source>The range indexes of all tokens and comments must not overlap with the range of other tokens and comments.</source>
          <target state="translated">すべてのトークンとコメントの範囲インデックスは、他のトークンとコメントの範囲と重なってはならない。</target>
        </trans-unit>
        <trans-unit id="b0a76dd0dfcefbc58816ee112b837c5543da7412" translate="yes" xml:space="preserve">
          <source>The reason for this is that &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; do type coercion which follows the rather obscure &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt;. For instance, the following statements are all considered &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">この理由は、 &lt;code&gt;==&lt;/code&gt; と &lt;code&gt;!=&lt;/code&gt; が、型の強制を行っているためです。これは、あいまいな&lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象等値比較アルゴリズムに&lt;/a&gt;従っています。たとえば、次のステートメントはすべて &lt;code&gt;true&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="01205e0f79602a8ffcecdc5bb5ff7825b476d8a2" translate="yes" xml:space="preserve">
          <source>The replacement for &lt;code&gt;eslint-tester&lt;/code&gt; is called &lt;code&gt;RuleTester&lt;/code&gt;. It's a simplified version of &lt;code&gt;ESLintTester&lt;/code&gt; that's designed to work with any testing framework. This object is exposed by the package.</source>
          <target state="translated">&lt;code&gt;eslint-tester&lt;/code&gt; の代替はRuleTesterと呼ばれ &lt;code&gt;RuleTester&lt;/code&gt; 。これは、あらゆるテストフレームワークで動作するように設計された &lt;code&gt;ESLintTester&lt;/code&gt; の簡易バージョンです。このオブジェクトはパッケージによって公開されます。</target>
        </trans-unit>
        <trans-unit id="ec0504699dd72d01190815f60c9e51a4931c510f" translate="yes" xml:space="preserve">
          <source>The resulting configuration file will be created in the current directory.</source>
          <target state="translated">結果の設定ファイルは、カレントディレクトリに作成されます。</target>
        </trans-unit>
        <trans-unit id="e5b1d156a93c697ddb2fcff08bf4e5ddbeae4405" translate="yes" xml:space="preserve">
          <source>The return value is always a &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">戻り値は常に &lt;code&gt;Promise&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fed8bcfb8b284135209f390faca018017c1afbc2" translate="yes" xml:space="preserve">
          <source>The return value is an object containing the results of the linting operation. Here's an example of a report object:</source>
          <target state="translated">戻り値は、リンティング操作の結果を含むオブジェクトです。以下にレポートオブジェクトの例を示します。</target>
        </trans-unit>
        <trans-unit id="66df5448c616e295ecb49452adc535d44bedae83" translate="yes" xml:space="preserve">
          <source>The returned value is a &lt;a href=&quot;scope-manager-interface&quot;&gt;&lt;code&gt;Scope&lt;/code&gt; object&lt;/a&gt; defined by the &lt;code&gt;eslint-scope&lt;/code&gt; package. The &lt;code&gt;Variable&lt;/code&gt; objects of global variables have some additional properties.</source>
          <target state="translated">戻り値は、 &lt;code&gt;eslint-scope&lt;/code&gt; パッケージで定義された&lt;a href=&quot;scope-manager-interface&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; オブジェクト&lt;/a&gt;です。グローバル変数の &lt;code&gt;Variable&lt;/code&gt; オブジェクトには、いくつかの追加のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="5fb2e185527cd54c372b96c8a8cf85ca7037ac9b" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;func-style&lt;/code&gt; has a default configuration of &lt;code&gt;&quot;expression&quot;&lt;/code&gt;, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, &lt;code&gt;eslint:recommended&lt;/code&gt; defaulted it to &lt;code&gt;&quot;declaration&quot;&lt;/code&gt;.</source>
          <target state="translated">ルール &lt;code&gt;func-style&lt;/code&gt; のデフォルト構成は &lt;code&gt;&quot;expression&quot;&lt;/code&gt; ですが、ESLint &lt;code&gt;1.x&lt;/code&gt; では、 &lt;code&gt;eslint:recommended&lt;/code&gt; がデフォルトで &lt;code&gt;&quot;declaration&quot;&lt;/code&gt; に設定しています。</target>
        </trans-unit>
        <trans-unit id="21a84406c09ff8a1049a29b0ba218718b7bf5a81" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; has no default exceptions, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, a default from &lt;code&gt;eslint:recommended&lt;/code&gt; was applied such that a maximum of two empty lines would be permitted.</source>
          <target state="translated">ルール &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; にはデフォルトの例外はありませんが、ESLint &lt;code&gt;1.x&lt;/code&gt; では、最大2つの空行が許可されるように &lt;code&gt;eslint:recommended&lt;/code&gt; のデフォルトが適用されました。</target>
        </trans-unit>
        <trans-unit id="7adf5f9d34968505ac2e7499ab22de53834a46bf" translate="yes" xml:space="preserve">
          <source>The rule always ignores directive comments such as &lt;code&gt;/* eslint-disable */&lt;/code&gt;. Additionally, unless the mode is &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt;, the rule ignores JSDoc comments.</source>
          <target state="translated">このルールは、 &lt;code&gt;/* eslint-disable */&lt;/code&gt; などのディレクティブコメントを常に無視します。さらに、モードが &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt; でない限り、ルールはJSDocコメントを無視します。</target>
        </trans-unit>
        <trans-unit id="1171a6f455e8b040c25a7ba3151c5477780f5c03" translate="yes" xml:space="preserve">
          <source>The rule can also be configured to discourage the use of parens when they are not required:</source>
          <target state="translated">また、パーレンが不要な場合には、パーレンの使用を禁止するようにルールを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="f8d163ee49a74afcc2907a73bba3064a962e824c" translate="yes" xml:space="preserve">
          <source>The rule cannot easily verify that the assignment is safe (e.g. if an assigned variable is local and would not be readable from anywhere else while the function is paused).</source>
          <target state="translated">このルールでは、代入が安全であることを簡単に検証することはできません(例えば、代入された変数がローカルであり、関数が一時停止されている間は他のどこからも読み取れない場合など)。</target>
        </trans-unit>
        <trans-unit id="4e9a5ee2475613eb335126f52cf5aaa9b33b67b5" translate="yes" xml:space="preserve">
          <source>The rule disallows octal literals.</source>
          <target state="translated">このルールでは、8進数リテラルを禁止しています。</target>
        </trans-unit>
        <trans-unit id="bed31bfa847f3bb2487f9e377612a105ec30b864" translate="yes" xml:space="preserve">
          <source>The rule does not disallow all use of the &lt;code&gt;RegExp&lt;/code&gt; constructor. It should be still used for dynamically generated regular expressions.</source>
          <target state="translated">このルールでは、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターのすべての使用が禁止されているわけではありません。動的に生成される正規表現には引き続き使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="888d43f5f339c3eab2911b0abe2728f2ab5aeaab" translate="yes" xml:space="preserve">
          <source>The rule has a second object with a single key, &lt;code&gt;enforceForRenamedProperties&lt;/code&gt;, which determines whether the &lt;code&gt;object&lt;/code&gt; destructuring applies to renamed variables.</source>
          <target state="translated">このルールには、単一のキーを &lt;code&gt;enforceForRenamedProperties&lt;/code&gt; 持つ2番目のオブジェクトがあり、 &lt;code&gt;object&lt;/code&gt; が名前変更された変数に適用されるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="ac3e6cce45a94e0899d9d17de8ece5be87643b66" translate="yes" xml:space="preserve">
          <source>The rule naming conventions for ESLint are fairly simple:</source>
          <target state="translated">ESLintのルールの命名規則はとてもシンプルです。</target>
        </trans-unit>
        <trans-unit id="6a2d5c1c9e0896db23badf6274b8965eaac23cce" translate="yes" xml:space="preserve">
          <source>The rule object itself (see &lt;a href=&quot;working-with-rules&quot;&gt;&quot;working with rules&quot;&lt;/a&gt;)</source>
          <target state="translated">ルールオブジェクト自体（&lt;a href=&quot;working-with-rules&quot;&gt;「ルールの操作」を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="573e671e86a4cf56bbe5f205a42e8701c29ec3d5" translate="yes" xml:space="preserve">
          <source>The rule offers one object option, &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; (a deprecated synonym is &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt;). If you set it to &lt;code&gt;true&lt;/code&gt;, object literals such as the first two above, with all property specifications on the same line, will be permitted, but one like</source>
          <target state="translated">このルールは、1つのオブジェクトオプションである &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; を提供します（非推奨の同義語は &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt; です）。 &lt;code&gt;true&lt;/code&gt; に設定すると、上記の最初の2つなどのオブジェクトリテラルがすべて同じプロパティ行で許可されますが、</target>
        </trans-unit>
        <trans-unit id="eb4b25449f8d19c4a4b92c230c486f587789325f" translate="yes" xml:space="preserve">
          <source>The rule prohibits the colocation on any line of at least 1 character of one property specification with at least 1 character of any other property specification. For example, the rule prohibits</source>
          <target state="translated">このルールは、1つのプロパティ指定の少なくとも1文字と他のプロパティ指定の少なくとも1文字との任意の行上でのコロケーションを禁止します。例えば、このルールでは</target>
        </trans-unit>
        <trans-unit id="bdcc4c0ed6a72ea505652fd2189129b9ba9488a3" translate="yes" xml:space="preserve">
          <source>The rule should warn against code that tries to compare against -0, since that will not work as intended. That is, code like x === -0 will pass for both +0 and -0. The author probably intended Object.is(x, -0).</source>
          <target state="translated">このルールは、-0 と比較しようとするコードに対して警告すべきです。つまり、x ===-0 のようなコードは +0 と -0 の両方をパスします。 作者はおそらく Object.is(x,-0)を意図していたのでしょう。</target>
        </trans-unit>
        <trans-unit id="9b89d3d9863252a32c9946759fd7f3504dc7b79d" translate="yes" xml:space="preserve">
          <source>The rule takes a single option - an array of possible callback names - which may include object methods. The default callback names are &lt;code&gt;callback&lt;/code&gt;, &lt;code&gt;cb&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">ルールは1つのオプション（可能なコールバック名の配列）を受け取ります。これには、オブジェクトメソッドを含めることができます。デフォルトのコールバック名は、 &lt;code&gt;callback&lt;/code&gt; 、 &lt;code&gt;cb&lt;/code&gt; 、 &lt;code&gt;next&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e78c1edcadc43d22698299cf6fb661f963ea1c1d" translate="yes" xml:space="preserve">
          <source>The rule takes a single string option: the name of the error parameter. The default is &lt;code&gt;&quot;err&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、単一の文字列オプション（エラーパラメータの名前）を取ります。デフォルトは &lt;code&gt;&quot;err&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="73945e310046d0fe600a76487db931bee8eb7989" translate="yes" xml:space="preserve">
          <source>The rule takes an option which specifies when it should be applied. It can be set to one of the following values:</source>
          <target state="translated">ルールは、いつ適用されるかを指定するオプションを取ります。以下の値のいずれかを設定することができます。</target>
        </trans-unit>
        <trans-unit id="c17458aebea2edf7596655f8173de5c166baa09e" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string, which must contain one of the following values:</source>
          <target state="translated">このルールは1つのオプション、文字列を取り、以下の値のいずれかを含む必要があります。</target>
        </trans-unit>
        <trans-unit id="1f25147392b3d78c1603fd60eeee2d70ca798f11" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string:</source>
          <target state="translated">このルールは、1つのオプション、文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="742233dad80fe18547618108d6a2b86bff76a785" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ルールは一つの選択肢、2つのキーを持つオブジェクト、受け取り &lt;code&gt;before&lt;/code&gt; と &lt;code&gt;after&lt;/code&gt; ブール値を持つ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="827020a96c9caecec65cc7a0552676f015b27688" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;before&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced before semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed before semicolons. If &lt;code&gt;after&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced after semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed after semicolons. The &lt;code&gt;after&lt;/code&gt; option will be only applied if a semicolon is not at the end of line.</source>
          <target state="translated">ルールは一つの選択肢、2つのキーを持つオブジェクト、受け取り &lt;code&gt;before&lt;/code&gt; と &lt;code&gt;after&lt;/code&gt; ブール値を持つ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。場合 &lt;code&gt;before&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、スペースがセミコロンの前に施行され、それはだ場合 &lt;code&gt;false&lt;/code&gt; 、スペースはセミコロンの前に許可されていません。場合は &lt;code&gt;after&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、スペースがセミコロンの後に施行されると、それはだ場合 &lt;code&gt;false&lt;/code&gt; 、スペースはセミコロンの後に許可されていません。 &lt;code&gt;after&lt;/code&gt; セミコロンは、行の終わりではない場合にのみオプションが適用されます。</target>
        </trans-unit>
        <trans-unit id="96c7f241e413db9d83cd41a7c8e69e1a5a46c14d" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted identifiers.</source>
          <target state="translated">このルールは、1 つ以上の文字列をオプションとして受け取ります:制限された識別子の名前。</target>
        </trans-unit>
        <trans-unit id="4375aa6346f33b27f068e7c881fdcd22248263e0" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted modules.</source>
          <target state="translated">このルールは、1つ以上の文字列をオプションとして受け取ります:制限されたモジュールの名前。</target>
        </trans-unit>
        <trans-unit id="a9cca4aaa304d533ffa99e0d4d45692dc6af248a" translate="yes" xml:space="preserve">
          <source>The rule takes one or two options. The first is a string, which can be:</source>
          <target state="translated">ルールは1つか2つのオプションを取ります。1つ目は文字列で、これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2047f79a374a9de4c018efebf01b37f2c42427b1" translate="yes" xml:space="preserve">
          <source>The rule takes two options.</source>
          <target state="translated">ルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="47e30af986fb27902392df154c435e433c1df14f" translate="yes" xml:space="preserve">
          <source>The rule takes two options:</source>
          <target state="translated">ルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="8014e10667a7389e5554d8b3b067d38491926c25" translate="yes" xml:space="preserve">
          <source>The rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, &lt;strong&gt;except&lt;/strong&gt; where one of the following is true:</source>
          <target state="translated">ASIのルールは比較的単純です。IsaacSchlueterが一度説明したように、改行文字は、次のいずれかに該当する場合&lt;strong&gt;を除いて&lt;/strong&gt;、セミコロンと同じように常にステートメントを終了します。</target>
        </trans-unit>
        <trans-unit id="031820acd6f073ce407b24b6015d596945b36976" translate="yes" xml:space="preserve">
          <source>The rules in your custom rules directory must follow the same format as bundled rules to work properly. You can also specify multiple locations for custom rules by including multiple &lt;code&gt;--rulesdir&lt;/code&gt; options:</source>
          <target state="translated">カスタムルールディレクトリ内のルールは、バンドルされたルールと同じ形式で正しく動作する必要があります。複数の &lt;code&gt;--rulesdir&lt;/code&gt; オプションを含めることで、カスタムルールの複数の場所を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="4f407752be68d13cfd5b93589acf43759c14d2f6" translate="yes" xml:space="preserve">
          <source>The same rule does apply to scoped packages:</source>
          <target state="translated">スコープされたパッケージにも同じルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="bfddd41eadd81befb51598e392aaccc185efc70f" translate="yes" xml:space="preserve">
          <source>The second argument is an object with one key, &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt;. The value is an array of string patterns which are considered exceptions to the rule. It is important to note that the exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;. Exceptions cannot be mixed.</source>
          <target state="translated">2番目の引数は、 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 1つのキーを持つオブジェクトです。値は、ルールの例外と見なされる文字列パターンの配列です。最初の引数が &lt;code&gt;&quot;never&quot;&lt;/code&gt; の場合、例外は無視されることに注意することが重要です。例外を混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="2e888e2ddf0328509e3f74a9a7c6bebd8faf02e4" translate="yes" xml:space="preserve">
          <source>The second is to save the file wherever you would like and pass its location to the CLI using the &lt;code&gt;-c&lt;/code&gt; option, such as:</source>
          <target state="translated">2つ目は、ファイルを好きな場所に保存し、 &lt;code&gt;-c&lt;/code&gt; オプションを使用してその場所をCLIに渡す方法です。</target>
        </trans-unit>
        <trans-unit id="414ed43decb6eceb64655ac8086b20e4b3916b91" translate="yes" xml:space="preserve">
          <source>The second one is an object for more fine-grained configuration when the first option is &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt;. Currently, the only available option is &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt;, a boolean property. It's &lt;code&gt;false&lt;/code&gt; by default. If set to &lt;code&gt;true&lt;/code&gt;, it requires braces and an explicit return for object literals.</source>
          <target state="translated">2番目のオプションは、最初のオプションが &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 場合の、よりきめの細かい構成のためのオブジェクトです。現在、使用できるオプションは、ブール型プロパティである &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt; のみです。それはです &lt;code&gt;false&lt;/code&gt; デフォルトで。 &lt;code&gt;true&lt;/code&gt; に設定した場合、中括弧とオブジェクトリテラルの明示的な戻りが必要です。</target>
        </trans-unit>
        <trans-unit id="13894c1b5ba8814ae6cea3f9f081dfbf8a0d8858" translate="yes" xml:space="preserve">
          <source>The selector &quot;&lt;code&gt;Identifier&lt;/code&gt;&quot; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes in the program. In this case, the selector will match the nodes for &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">セレクタ「 &lt;code&gt;Identifier&lt;/code&gt; 」は、プログラム内のすべての &lt;code&gt;Identifier&lt;/code&gt; ノードに一致します。この場合、セレクターは &lt;code&gt;foo&lt;/code&gt; 、 &lt;code&gt;bar&lt;/code&gt; 、および &lt;code&gt;baz&lt;/code&gt; のノードと一致します。</target>
        </trans-unit>
        <trans-unit id="8edd9e143d8665e59cc0b39cb5fd1623512f2c40" translate="yes" xml:space="preserve">
          <source>The shortened object literal syntax for generators is not affected by this rule.</source>
          <target state="translated">ジェネレータの短縮オブジェクトリテラル構文は、このルールの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="05a4cde718543d121082d5debd9a3bdb1d814202" translate="yes" xml:space="preserve">
          <source>The simplest example is to use just &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="translated">最も単純な例は、 &lt;code&gt;node&lt;/code&gt; と &lt;code&gt;message&lt;/code&gt; のみを使用することです。</target>
        </trans-unit>
        <trans-unit id="58e6895bfed7fd7cc1d658c75e9fdd7ba3d0ec89" translate="yes" xml:space="preserve">
          <source>The simplest selector is just a node type. A node type selector will match all nodes with the given type. For example, consider the following program:</source>
          <target state="translated">最も単純なセレクタは、単にノードタイプです。ノード型セレクタは、与えられた型を持つすべてのノードにマッチします。例えば、次のプログラムを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="62b57f47427459031359008bfc01d02938d4e4ea" translate="yes" xml:space="preserve">
          <source>The single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all &lt;code&gt;var&lt;/code&gt; statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.</source>
          <target state="translated">単一宣言の考え方は、ECMAScript 6以前の動作に基づいており、ブロックスコープなどはなく、関数スコープのみがありました。とにかく、すべての &lt;code&gt;var&lt;/code&gt; ステートメントは関数の最上部まで引き上げられるため、関数の最上部で1つの宣言ですべての変数を宣言すると、スコープルールに関する混乱がなくなると考える人もいます。</target>
        </trans-unit>
        <trans-unit id="98081cf0b97551ce142d7f451c1b647ed7d9f73b" translate="yes" xml:space="preserve">
          <source>The source file for a rule exports an object with the following properties.</source>
          <target state="translated">ルールのソース ファイルは、以下のプロパティを持つオブジェクトをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="13c2d1557a31408916c7784e491c197a095f73af" translate="yes" xml:space="preserve">
          <source>The spacing after the semicolon if it is the first token in the line.</source>
          <target state="translated">行内の最初のトークンの場合は、セミコロンの後の間隔。</target>
        </trans-unit>
        <trans-unit id="cb8aafac65e7fc97800fb3d3dac293cf6812e694" translate="yes" xml:space="preserve">
          <source>The spacing around the semicolon in a for loop with an empty condition (&lt;code&gt;for(;;)&lt;/code&gt;).</source>
          <target state="translated">空の条件（ &lt;code&gt;for(;;)&lt;/code&gt; ）を持つforループでのセミコロンの周りの間隔。</target>
        </trans-unit>
        <trans-unit id="e3e73e8052d68647147779e7d358e891ec3d4c7d" translate="yes" xml:space="preserve">
          <source>The spacing before the semicolon if it is after an opening parenthesis (&lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;), or the spacing after the semicolon if it is before a closing parenthesis (&lt;code&gt;)&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;). That spacing is checked by &lt;code&gt;space-in-parens&lt;/code&gt; or &lt;code&gt;block-spacing&lt;/code&gt;.</source>
          <target state="translated">セミ括弧の前のスペースが開き括弧の後（ &lt;code&gt;(&lt;/code&gt; または &lt;code&gt;{&lt;/code&gt; ）の場合、またはセミコロンの後のスペースが閉じ括弧の前（ &lt;code&gt;)&lt;/code&gt; または &lt;code&gt;}&lt;/code&gt; の場合）。その間隔は &lt;code&gt;space-in-parens&lt;/code&gt; &lt;code&gt;block-spacing&lt;/code&gt; またはブロック間隔によってチェックされます。</target>
        </trans-unit>
        <trans-unit id="115bcb8edde69d7ab538f77d4ffd79b7c96251f6" translate="yes" xml:space="preserve">
          <source>The special value &lt;code&gt;null&lt;/code&gt; should be used only in the following situations:</source>
          <target state="translated">特別な値 &lt;code&gt;null&lt;/code&gt; は、次の状況でのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="55d71491bd24bf8e9266ef7d9b3ed94580c8ef81" translate="yes" xml:space="preserve">
          <source>The standard style, in which commas are placed at the end of the current line</source>
          <target state="translated">カンマが現在の行の最後に置かれる標準スタイル</target>
        </trans-unit>
        <trans-unit id="66b17246512ea6227166b244bbc0ac43dcd2b7c9" translate="yes" xml:space="preserve">
          <source>The statement beginning keyword, such as &lt;code&gt;if&lt;/code&gt;, should be followed by one space and the opening brace should be preceded by a space.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; などのステートメント開始キーワードの後には1つのスペースが続き、左中括弧の前にはスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="940d15ed0a28b1df513a69296639eec227beace3" translate="yes" xml:space="preserve">
          <source>The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;.)</source>
          <target state="translated">ステートメントに閉じられていない括弧、配列リテラル、またはオブジェクトリテラルがあるか、ステートメントを終了する有効な方法ではない他の方法で終了しています。（たとえば、 &lt;code&gt;.&lt;/code&gt; または &lt;code&gt;,&lt;/code&gt; 終わる。）</target>
        </trans-unit>
        <trans-unit id="ad8b8f54b2a420ddeed65e63d39098cd71d92cbc" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback from within a nested function or an immediately-invoked function expression (IIFE).</source>
          <target state="translated">このルールの静的解析では、プログラムが入れ子になった関数内からコールバックを呼び出していることや、すぐに呼び出された関数式 (IIFE)からコールバックを呼び出していることは検出されません。</target>
        </trans-unit>
        <trans-unit id="f3fcd362b8cea026256d5c99fc33540bb48255c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback if it is an argument of a function (for example, &lt;code&gt;setTimeout&lt;/code&gt;).</source>
          <target state="translated">このルールの静的分析は、関数の引数（たとえば、 &lt;code&gt;setTimeout&lt;/code&gt; ）の場合、プログラムがコールバックを呼び出すことを検出しません。</target>
        </trans-unit>
        <trans-unit id="b0d50eb0c6a5a75a5254c188fa79ce03846654c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback only one time in each branch of an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">このルールの静的分析は、プログラムが &lt;code&gt;if&lt;/code&gt; ステートメントの各ブランチで1回だけコールバックを呼び出すことを検出しません。</target>
        </trans-unit>
        <trans-unit id="2f6cfcf93f0774ec1b281ebd4cefac2327a634e4" translate="yes" xml:space="preserve">
          <source>The string and object formats can be freely mixed in the configuration as needed.</source>
          <target state="translated">文字列形式とオブジェクト形式は必要に応じて自由に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="dd57f78073587288601a6f8bd191a69e0806d4ed" translate="yes" xml:space="preserve">
          <source>The string option does not check async arrow function expressions for backward compatibility.</source>
          <target state="translated">string オプションは、非同期矢印関数式の後方互換性をチェックしません。</target>
        </trans-unit>
        <trans-unit id="311d87885350cd8d74996d157aa1c8fa01351e72" translate="yes" xml:space="preserve">
          <source>The syntax for AST selectors is similar to the syntax for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selectors&lt;/a&gt;. If you've used CSS selectors before, the syntax for AST selectors should be easy to understand.</source>
          <target state="translated">ASTセレクターの構文は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSSセレクターの&lt;/a&gt;構文に似ています。以前にCSSセレクターを使用したことがある場合、ASTセレクターの構文は理解しやすいはずです。</target>
        </trans-unit>
        <trans-unit id="224d6b2ad3ce554f3d0f9f8c4d66cbd9efd8197b" translate="yes" xml:space="preserve">
          <source>The syntax to specify restricted imports looks like this:</source>
          <target state="translated">制限付き輸入を指定する構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b7efceeec030359c477714b00506090fb8984485" translate="yes" xml:space="preserve">
          <source>The ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.</source>
          <target state="translated">三項演算子は、変数に条件付きで値を代入するために使用されます。三項演算子を使用するとコードが不明確になるという意見もあります。</target>
        </trans-unit>
        <trans-unit id="d10f8a42895796da61c03baea8c9b4879c335514" translate="yes" xml:space="preserve">
          <source>The ternary operator should be used only for assigning values conditionally and never as a shortcut for an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">三項演算子は、条件付きで値を割り当てる場合にのみ使用し、 &lt;code&gt;if&lt;/code&gt; ステートメントのショートカットとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="f096cdc8dc30e248084bfa4304f67adc152c3c50" translate="yes" xml:space="preserve">
          <source>The testing takes a few minutes to complete. If any tests fail, that likely means one or more parts of the environment setup didn't complete correctly. The upstream tests always pass.</source>
          <target state="translated">テストは数分で完了します。テストが失敗した場合は、環境設定の1つ以上の部分が正しく完了していない可能性が高いです。上流側のテストは常に合格します。</target>
        </trans-unit>
        <trans-unit id="7bbb1f82d6c0a19e1279187e629a297da44271f1" translate="yes" xml:space="preserve">
          <source>The thing that makes ESLint different from other linters is the ability to define custom rules at runtime. This is perfect for rules that are specific to your project or company and wouldn't make sense for ESLint to ship with. With runtime rules, you don't have to wait for the next version of ESLint or be disappointed that your rule isn't general enough to apply to the larger JavaScript community, just write your rules and include them at runtime.</source>
          <target state="translated">ESLintが他のリンターと違う点は、実行時にカスタムルールを定義できることです。これはプロジェクトや会社固有のルールで、ESLintには搭載されていないルールを定義するのに最適です。ランタイムルールがあれば、ESLintの次のバージョンを待ったり、自分のルールがより大きなJavaScriptコミュニティに適用できるような一般的なルールではないことにがっかりしたりする必要はありません。</target>
        </trans-unit>
        <trans-unit id="aeba12234ad663f0a0ec6980e71a7b41b7d994ef" translate="yes" xml:space="preserve">
          <source>The thinking is that it's better to always explicitly state what the default behavior should be so that it's clear whether or not the developer forgot to include the default behavior by mistake.</source>
          <target state="translated">開発者が誤ってデフォルトの動作を入れ忘れたのかどうかが明確になるように、デフォルトの動作がどうあるべきかを常に明示しておいた方が良いという考え方です。</target>
        </trans-unit>
        <trans-unit id="da7d071d3f4e1e51df3ea8518936e97a10e59509" translate="yes" xml:space="preserve">
          <source>The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the &lt;a href=&quot;user-guide/configuring&quot;&gt;configuration docs&lt;/a&gt;).</source>
          <target state="translated">3つのエラーレベルにより、ESLintがルールを適用する方法をきめ細かく制御できます（構成オプションと詳細については、&lt;a href=&quot;user-guide/configuring&quot;&gt;構成ドキュメントを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="41d769ab16b1f7f3308de0b859c5b9860b2b26e5" translate="yes" xml:space="preserve">
          <source>The top-level report object also has &lt;code&gt;errorCount&lt;/code&gt; and &lt;code&gt;warningCount&lt;/code&gt; which give the exact number of errors and warnings respectively on all the files. Additionally, &lt;code&gt;usedDeprecatedRules&lt;/code&gt; signals any deprecated rules used and their replacement (if available). Specifically, it is array of objects with properties like so:</source>
          <target state="translated">トップレベルのレポートオブジェクトには、すべてのファイルのエラーと警告の正確な数をそれぞれ &lt;code&gt;errorCount&lt;/code&gt; と &lt;code&gt;warningCount&lt;/code&gt; もあります。さらに、 &lt;code&gt;usedDeprecatedRules&lt;/code&gt; は、使用されている非推奨のルールとその置き換え（可能な場合）を通知します。具体的には、次のようなプロパティを持つオブジェクトの配列です。</target>
        </trans-unit>
        <trans-unit id="df600fd43354fe093f2997a1e86f286e369b6a13" translate="yes" xml:space="preserve">
          <source>The top-level report object has a &lt;code&gt;results&lt;/code&gt; array containing all linting results for files that had warnings or errors (any files that did not produce a warning or error are omitted). Each file result includes:</source>
          <target state="translated">トップレベルのレポートオブジェクトには、警告またはエラーがあったファイルのすべてのリンティング結果を含む &lt;code&gt;results&lt;/code&gt; 配列があります（警告またはエラーを生成しなかったファイルは省略されます）。各ファイルの結果には以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="594a7b21bd7855de18adf0c69dd40a240b1def08" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;. By default, all values are true.</source>
          <target state="translated">&lt;code&gt;VariableDeclarator&lt;/code&gt; と &lt;code&gt;AssignmentExpression&lt;/code&gt; の2つのプロパティ。これらは、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 破壊要件をオンまたはオフにするために使用できます。デフォルトでは、すべての値がtrueです。</target>
        </trans-unit>
        <trans-unit id="e8bf7a9dd0b016497dca472797a392ec1424c8b6" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">2つのプロパティ &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; を使用して、これらの各タイプの個別化の要件を個別にオンまたはオフにすることができます。デフォルトでは、どちらもtrueです。</target>
        </trans-unit>
        <trans-unit id="d35a58b0a18350e1534de85ad73ac8b06f837e84" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">2つのプロパティ、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 。これらのタイプを使用して、これらの各タイプの破壊要件を個別にオンまたはオフにできます。デフォルトでは、どちらもtrueです。</target>
        </trans-unit>
        <trans-unit id="4f16a3bf5e4813936b00b45e231c747c7726a1d4" translate="yes" xml:space="preserve">
          <source>The updates of imported bindings by ES Modules cause runtime errors.</source>
          <target state="translated">ESモジュールによるインポートされたバインディングの更新により、ランタイムエラーが発生する。</target>
        </trans-unit>
        <trans-unit id="5514e8b27889c92b548abd8ebff5998bdf418288" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.</source>
          <target state="translated">&lt;code&gt;arguments.caller&lt;/code&gt; および &lt;code&gt;arguments.callee&lt;/code&gt; を使用すると、いくつかのコード最適化が不可能になります。これらはJavaScriptの将来のバージョンでは非推奨になり、厳密モードのECMAScript 5では使用できません。</target>
        </trans-unit>
        <trans-unit id="2924f354dcd960a1ab58164e2009cd5c61e0aa99" translate="yes" xml:space="preserve">
          <source>The use of bitwise operators in JavaScript is very rare and often &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; is simply a mistyped &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, which will lead to unexpected behavior.</source>
          <target state="translated">JavaScriptでのビットごとの演算子の使用は非常にまれで、多くの場合 &lt;code&gt;&amp;amp;&lt;/code&gt; または &lt;code&gt;|&lt;/code&gt; 単にタイプミスした &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; または &lt;code&gt;||&lt;/code&gt; 、予期しない動作につながります。</target>
        </trans-unit>
        <trans-unit id="e8c966ed7def78def5c80c88dca826c0a9cd55fd" translate="yes" xml:space="preserve">
          <source>The version of ESLint you are using.</source>
          <target state="translated">使用しているESLintのバージョン。</target>
        </trans-unit>
        <trans-unit id="eac9f3d4f7ff9fa27be37b9559de95a3dfd24dc8" translate="yes" xml:space="preserve">
          <source>Then any code used within the same scope would not get the global &lt;code&gt;undefined&lt;/code&gt;, but rather the local version with a very different meaning.</source>
          <target state="translated">次に、同じスコープ内で使用されるコードは、グローバル &lt;code&gt;undefined&lt;/code&gt; ではなく、非常に異なる意味を持つローカルバージョンを取得します。</target>
        </trans-unit>
        <trans-unit id="91dec8db4a7ce736df71ea88ef47e6b7cca8d86f" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;array&lt;/code&gt; part of this rule is not recommended, as destructuring does not match this use case very well.</source>
          <target state="translated">その場合、このルールの &lt;code&gt;array&lt;/code&gt; 部分はお勧めできません。これは、構造化がこのユースケースとあまり一致しないためです。</target>
        </trans-unit>
        <trans-unit id="1e7df54ba4b2f3d2b8de3ddfb22cf55076b84b07" translate="yes" xml:space="preserve">
          <source>Then you can change to:</source>
          <target state="translated">ならば、それに変えればいいのです。</target>
        </trans-unit>
        <trans-unit id="6ece258a004458918b4a9b465e59a062ce1c5448" translate="yes" xml:space="preserve">
          <source>Then you should enable ES6 using &lt;code&gt;ecmaVersion&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;ecmaVersion&lt;/code&gt; を使用してES6を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="99179c89c62e68c70478cf6465b8ea928c3d5143" translate="yes" xml:space="preserve">
          <source>Then you should move &lt;code&gt;ecmaFeatures&lt;/code&gt; under &lt;code&gt;parserOptions&lt;/code&gt;:</source>
          <target state="translated">その後、移動する必要があり &lt;code&gt;ecmaFeatures&lt;/code&gt; を下 &lt;code&gt;parserOptions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3039d0ca1aa2f7e206fbb9a1bd4f394c4c999ec2" translate="yes" xml:space="preserve">
          <source>Then, assuming you're using the package name &lt;code&gt;eslint-config-myconfig&lt;/code&gt;, you can access the additional config via:</source>
          <target state="translated">次に、パッケージ名 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; を使用しているとすると、次のようにして追加の構成にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f25801971afeae4363e40fabd963bdc80f985e55" translate="yes" xml:space="preserve">
          <source>Then, in your project that wants to use your shareable config, type:</source>
          <target state="translated">そして、共有可能な設定を使いたいプロジェクトで、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="353db37a3c8a86c69c78b807d1c427cfb81575aa" translate="yes" xml:space="preserve">
          <source>Then, you can install the ESLint Yeoman generator:</source>
          <target state="translated">そして、ESLint Yeomanジェネレーターをインストールします。</target>
        </trans-unit>
        <trans-unit id="7429e55770a7db6e1f799e481661c23075ea68a0" translate="yes" xml:space="preserve">
          <source>There are a lot of command line flags for ESLint and this section explains what they do.</source>
          <target state="translated">ESLintにはたくさんのコマンドラインフラグがあります。</target>
        </trans-unit>
        <trans-unit id="80da262ce40592a7a4ec9cf4f30bca5562293bb5" translate="yes" xml:space="preserve">
          <source>There are a lot of unit tests included with ESLint to make sure that we're keeping on top of code quality. This section explains how to run the unit tests.</source>
          <target state="translated">コードの品質を維持するためにESLintに含まれるユニットテストはたくさんあります。ここでは、ユニットテストの実行方法を説明します。</target>
        </trans-unit>
        <trans-unit id="cdec16b05bc1e8b3e8a535ea7297a5e3f4035c95" translate="yes" xml:space="preserve">
          <source>There are also cases where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; can be ambiguous and should be rewritten to more clearly show the author's intent:</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; の使用法があいまいで、作成者の意図をより明確に示すように書き直す必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="320a38d150f5e795565c18aa62c12c2350485cbd" translate="yes" xml:space="preserve">
          <source>There are also some properties you can access:</source>
          <target state="translated">また、アクセスできる物件もあります。</target>
        </trans-unit>
        <trans-unit id="6665f51b7045a2fee788e7afb911686880b53609" translate="yes" xml:space="preserve">
          <source>There are cases where it may be safe for your application to ignore errors, however only ignore errors if you are confident that some other form of monitoring will help you catch the problem.</source>
          <target state="translated">アプリケーションがエラーを無視しても問題ない場合もありますが、他のモニタリング方法で問題を検出できると確信している場合にのみ、エラーを無視してください。</target>
        </trans-unit>
        <trans-unit id="77159dc5778802775842bc1ad78d4c7a0b0534fa" translate="yes" xml:space="preserve">
          <source>There are five events related to code paths, and you can define event handlers in rules.</source>
          <target state="translated">コードパスに関連するイベントは5つあり、ルールでイベントハンドラを定義することができます。</target>
        </trans-unit>
        <trans-unit id="e2c161633c01783c2c492dc2f82954fa87f98f0e" translate="yes" xml:space="preserve">
          <source>There are four different styles and the default member syntax sort order is:</source>
          <target state="translated">4 つの異なるスタイルがあり、既定のメンバー構文のソート順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="73182a6c9f6d8f8a463d75ad9c8c1f7a1954215f" translate="yes" xml:space="preserve">
          <source>There are many commonly used aliases for &lt;code&gt;this&lt;/code&gt; such as &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;me&lt;/code&gt;. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.</source>
          <target state="translated">以下のための多くの一般的に使用される別名があります &lt;code&gt;this&lt;/code&gt; ような &lt;code&gt;that&lt;/code&gt; 、 &lt;code&gt;self&lt;/code&gt; または &lt;code&gt;me&lt;/code&gt; 。チームが同意するエイリアスがアプリケーション全体で一貫して使用されるようにすることが望ましいです。</target>
        </trans-unit>
        <trans-unit id="778d71a993fc4934f67d793df316de2759b96d65" translate="yes" xml:space="preserve">
          <source>There are rest parameters in ES2015. We can use that feature for variadic functions instead of the &lt;code&gt;arguments&lt;/code&gt; variable.</source>
          <target state="translated">ES2015には残りのパラメーターがあります。 &lt;code&gt;arguments&lt;/code&gt; 変数の代わりに、可変長関数にその機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="117709bbbf6fc954ac87eb9e1642b49467ac9606" translate="yes" xml:space="preserve">
          <source>There are several common guidelines which require specific indentation of nested blocks and statements, like:</source>
          <target state="translated">のように、入れ子になったブロックや文を特定のインデントを必要とするいくつかの一般的なガイドラインがあります。</target>
        </trans-unit>
        <trans-unit id="09bf0b1004131d5cbb653018ebf059cb68d11044" translate="yes" xml:space="preserve">
          <source>There are several pieces of information that can be configured:</source>
          <target state="translated">設定できる情報はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="1c953a0cd08a66ee80bdb67484900a4f8c19fb94" translate="yes" xml:space="preserve">
          <source>There are shareable configs available for most JSCS presets. The equivalent shareable configs for each JSCS preset are listed in the following table:</source>
          <target state="translated">ほとんどの JSCS プリセットには共有可能な設定があります。各 JSCS プリセットに対応する共有可能なコンフィグを以下の表に示します。</target>
        </trans-unit>
        <trans-unit id="7939cad36b767508efc1de1d7ff66357f07843a6" translate="yes" xml:space="preserve">
          <source>There are some cases where you might want to call a callback function more than once. In those cases this rule may lead to incorrect behavior. In those cases you may want to reserve a special name for those callbacks and not include that in the list of callbacks that trigger warnings.</source>
          <target state="translated">コールバック関数を複数回呼び出したい場合があります。そのような場合は、このルールが正しく動作しない可能性があります。そのような場合は、コールバック関数に特別な名前をつけておき、警告を発生させるコールバック関数のリストには含めないようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="8dbaf6481b7dab508d130fe84b6a20188b6da785" translate="yes" xml:space="preserve">
          <source>There are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt;, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:</source>
          <target state="translated">JavaScriptには、ラッパーオブジェクトを持つプリミティブ型が3つあります。文字列、数値、ブールです。これらは、コンストラクタ &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、および &lt;code&gt;Boolean&lt;/code&gt; によってそれぞれ表されます。プリミティブラッパータイプは、これらのプリミティブ値の1つが読み込まれるたびに使用され、メソッドなどのオブジェクトのような機能を提供します。背後では、関連するラッパータイプのオブジェクトが作成されてから破棄されます。そのため、次のようなプリミティブ値でメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="09b78e56913ec7f5884521cf5e33b733c08a8425" translate="yes" xml:space="preserve">
          <source>There are two formats for a rule's exported &lt;code&gt;schema&lt;/code&gt;. The first is a full JSON Schema object describing all possible options the rule accepts, including the rule's error level as the first argument and any optional arguments thereafter.</source>
          <target state="translated">ルールのエクスポートされた &lt;code&gt;schema&lt;/code&gt; は2つの形式があります。1つ目は、最初の引数としてのルールのエラーレベルとその後のオプションの引数を含む、ルールが受け入れるすべての可能なオプションを説明する完全なJSONスキーマオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="6e4161ef27c6d8d2328512ff0c53aa33ebb66d6d" translate="yes" xml:space="preserve">
          <source>There are two options for this rule:</source>
          <target state="translated">このルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="c5b03151c21194f8185c6c4c16037975222ef285" translate="yes" xml:space="preserve">
          <source>There are two schools of thought in this regard:</source>
          <target state="translated">この点については、2つの考え方があります。</target>
        </trans-unit>
        <trans-unit id="187de8e977c674d5524ac7c3cf7fd7ff80275095" translate="yes" xml:space="preserve">
          <source>There are two ways of defining functions in JavaScript: &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function&lt;/code&gt; expressions. Declarations contain the &lt;code&gt;function&lt;/code&gt; keyword first, followed by a name and then its arguments and the function body, for example:</source>
          <target state="translated">JavaScriptで関数を定義するには、 &lt;code&gt;function&lt;/code&gt; 宣言と &lt;code&gt;function&lt;/code&gt; 式の2つの方法があります。宣言には、最初に &lt;code&gt;function&lt;/code&gt; キーワードが含まれ、次に名前、次にその引数と関数本体が含まれます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1e031938fbb5ab85e074efc0c3921234cc1f1c89" translate="yes" xml:space="preserve">
          <source>There are two ways to create a regular expression:</source>
          <target state="translated">正規表現を作るには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d52e9915f94a31af6aaead1be831dbb80f676371" translate="yes" xml:space="preserve">
          <source>There are two ways to use configuration files.</source>
          <target state="translated">設定ファイルを使用する方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="d1a8bd447439a90516a50974c91e0f6c8ad77c25" translate="yes" xml:space="preserve">
          <source>There are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.</source>
          <target state="translated">条件文で代入演算子を使用する正当な理由があります。しかし、特定の代入が意図的に行われたものかどうかを見分けるのは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="4715777b3c61a89e3562896681adc37a424d282e" translate="yes" xml:space="preserve">
          <source>There are, however, some occasions when you must use quotes:</source>
          <target state="translated">しかし、引用符を使わなければならない場面もあります。</target>
        </trans-unit>
        <trans-unit id="eb6f41837f8cfadd5c03780bba3f02ff7b3c971d" translate="yes" xml:space="preserve">
          <source>There are, however, some who prefer to only use braces when there is more than one statement to be executed.</source>
          <target state="translated">しかし、実行される文が複数ある場合には中括弧のみを使用することを好む人もいます。</target>
        </trans-unit>
        <trans-unit id="342cd48e476dc7314107f25dac7c78229501f3ce" translate="yes" xml:space="preserve">
          <source>There is actually a long history of using dangling underscores to indicate &quot;private&quot; members of objects in JavaScript (though JavaScript doesn't have truly private members, this convention served as a warning). This began with SpiderMonkey adding nonstandard methods such as &lt;code&gt;__defineGetter__()&lt;/code&gt;. The intent with the underscores was to make it obvious that this method was special in some way. Since that time, using a single underscore prefix has become popular as a way to indicate &quot;private&quot; members of objects.</source>
          <target state="translated">実際には、ダングリングアンダースコアを使用してJavaScriptのオブジェクトの「プライベート」メンバーを示す長い歴史があります（JavaScriptには本当にプライベートメンバーはありませんが、この規則は警告として機能しました）。これは、SpiderMonkeyが &lt;code&gt;__defineGetter__()&lt;/code&gt; などの非標準のメソッドを追加することから始まりました。アンダースコアの目的は、この方法が何らかの点で特別であることを明確にすることでした。それ以降、オブジェクトの「プライベート」メンバーを示す方法として、単一の下線プレフィックスを使用することが一般的になりました。</target>
        </trans-unit>
        <trans-unit id="4a96991a903b3e1ff68ea9a24be9b087a375a49f" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;Linter.version&lt;/code&gt; property that you can read without instantiating &lt;code&gt;Linter&lt;/code&gt;:</source>
          <target state="translated">あり &lt;code&gt;Linter.version&lt;/code&gt; のあなたはインスタンス化せずに読むことができるという性質 &lt;code&gt;Linter&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="871b96618532f5a624a5eebc653ef9799b4af97b" translate="yes" xml:space="preserve">
          <source>There is an explicit way to create a global variable when needed, by assigning to a property of the global object.</source>
          <target state="translated">必要に応じて、グローバルオブジェクトのプロパティに代入することで、グローバル変数を作成する明示的な方法があります。</target>
        </trans-unit>
        <trans-unit id="a847459418c85beaf5623fd3b6978b33df19c866" translate="yes" xml:space="preserve">
          <source>There is no hard and fast rule about whether empty lines should precede &lt;code&gt;return&lt;/code&gt; statements in JavaScript. However, clearly delineating where a function is returning can greatly increase the readability and clarity of the code. For example:</source>
          <target state="translated">JavaScriptの &lt;code&gt;return&lt;/code&gt; ステートメントの前に空の行を置くかどうかについては、厳格な規則はありません。ただし、関数が返す場所を明確に示すと、コードの可読性と明確性が大幅に向上します。例えば：</target>
        </trans-unit>
        <trans-unit id="7c688c9ecfeeb2e718d9853398cce5aa37907224" translate="yes" xml:space="preserve">
          <source>There is one situation where initializing to &lt;code&gt;undefined&lt;/code&gt; behaves differently than omitting the initialization, and that's when a &lt;code&gt;var&lt;/code&gt; declaration occurs inside of a loop. For example:</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; への初期化が初期化の省略とは異なる動作をする1つの状況があり、それは &lt;code&gt;var&lt;/code&gt; 宣言がループ内で発生したときです。例えば：</target>
        </trans-unit>
        <trans-unit id="f393cd7001d9c02a6a4db52334b4f6aa81c0dd84" translate="yes" xml:space="preserve">
          <source>There may be a part of a Node.js application that is responsible for determining the correct exit code to return upon exiting. In that case, you should turn this rule off to allow proper handling of the exit code.</source>
          <target state="translated">Node.jsアプリケーションの中には、終了時に返すべき正しい終了コードを決定する役割を担っている部分があるかもしれません。その場合は、このルールをオフにして終了コードを適切に処理できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="3f8f96957f0116bd3dee02cc31450b17131c06e6" translate="yes" xml:space="preserve">
          <source>There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.</source>
          <target state="translated">関数内のすべての変数に対して、1つの変数宣言があるはずです。この宣言は通常、関数の先頭に表示されます。</target>
        </trans-unit>
        <trans-unit id="af6c3ae1870f67e9ba1a6645267df7a0ed8e6f39" translate="yes" xml:space="preserve">
          <source>There's a &lt;code&gt;jquery&lt;/code&gt; environment defined in this plugin. To use the environment in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the environment name. So if this plugin were named &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt;, then you would set the environment in your configuration to be &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt;.</source>
          <target state="translated">このプラグインには &lt;code&gt;jquery&lt;/code&gt; 環境が定義されています。ESLintで環境を使用するには、接頭辞のないプラグイン名、スラッシュ、環境名の順に使用します。したがって、このプラグインの名前が &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; の場合、構成の環境を &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="4649a897c49ce8c22f4047b05ff4f46b049d69e6" translate="yes" xml:space="preserve">
          <source>Therefore, for any array &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; and &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; will always return &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">したがって、配列 &lt;code&gt;foo&lt;/code&gt; の場合、 &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; および &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; は常に &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ee735b7f7a5f024f90771cc2fdec6e27abf7cb89" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;code&gt;u&lt;/code&gt; flag lets us work better with regular expressions.</source>
          <target state="translated">したがって、 &lt;code&gt;u&lt;/code&gt; フラグを使用すると、正規表現をより適切に処理できます。</target>
        </trans-unit>
        <trans-unit id="772ede07a4703392f30e23da9503d4982ba7ac6d" translate="yes" xml:space="preserve">
          <source>Therefore, use &lt;code&gt;Number.isNaN()&lt;/code&gt; or global &lt;code&gt;isNaN()&lt;/code&gt; functions to test whether a value is &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;Number.isNaN()&lt;/code&gt; 関数またはグローバル &lt;code&gt;isNaN()&lt;/code&gt; 関数を使用して、値が &lt;code&gt;NaN&lt;/code&gt; かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="201cc4664da2bdb9c50a7d4f0ca2e44472bb57f6" translate="yes" xml:space="preserve">
          <source>These annotations may be used with either single-line or multi-line comments and should follow the same formatting rules as the general comment type. Examples:</source>
          <target state="translated">これらの注釈は、一行または複数行のコメントと一緒に使用することができ、一般的なコメントタイプと同じ書式規則に従う必要があります。例。</target>
        </trans-unit>
        <trans-unit id="4c52137db447105931b557eed8e46933af4bdec4" translate="yes" xml:space="preserve">
          <source>These are the most common scenarios recommended in different style guides:</source>
          <target state="translated">これらは、異なるスタイルガイドで推奨される最も一般的なシナリオです。</target>
        </trans-unit>
        <trans-unit id="acdb0470966c593cea7812a42d4a917d42c23356" translate="yes" xml:space="preserve">
          <source>These can be combined as much as you like. To make all methods exceptions (thereby rendering this rule useless), use &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</source>
          <target state="translated">これらは好きなだけ組み合わせることができます。すべてのメソッドを例外にする（それにより、このルールを無効にする）には、 &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16b0a2f3a34d0787ea10fc5517dc6d1c9a76c309" translate="yes" xml:space="preserve">
          <source>These environments are not mutually exclusive, so you can define more than one at a time.</source>
          <target state="translated">これらの環境は相互に排他的ではないので、一度に複数の環境を定義することができます。</target>
        </trans-unit>
        <trans-unit id="2e07ccde13ac7d3cc1e366526a62fc1dd9f6bdde" translate="yes" xml:space="preserve">
          <source>These examples allow &lt;code&gt;var1&lt;/code&gt; to be overwritten in your code, but disallow it for &lt;code&gt;var2&lt;/code&gt;.</source>
          <target state="translated">これらの例では、コードで &lt;code&gt;var1&lt;/code&gt; を上書きできますが、 &lt;code&gt;var2&lt;/code&gt; は許可しません。</target>
        </trans-unit>
        <trans-unit id="5b4016a79f53202f5d9431f3853fbef74d3b8610" translate="yes" xml:space="preserve">
          <source>These methods return an array of comments that appear directly before, directly after, and inside nodes, respectively. They are useful for rules that need to check comments in relation to a given node or token.</source>
          <target state="translated">これらのメソッドは、それぞれノードの直前、直後、内部に現れるコメントの配列を返します。これらのメソッドは、与えられたノードやトークンに関連してコメントをチェックする必要があるルールに便利です。</target>
        </trans-unit>
        <trans-unit id="9ebcefc4be23db9deefd68d4795e030b4db83239" translate="yes" xml:space="preserve">
          <source>These objects may not:</source>
          <target state="translated">これらのオブジェクトはそうではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="b293d56025264cb725163337a97e77e49487f3f5" translate="yes" xml:space="preserve">
          <source>These objects' responsibilities are:</source>
          <target state="translated">これらのオブジェクトの責任は</target>
        </trans-unit>
        <trans-unit id="dd3da68786bd031bdc775145f224453e0dd6417c" translate="yes" xml:space="preserve">
          <source>These options allow unused expressions &lt;em&gt;only if all&lt;/em&gt; of the code paths either directly change the state (for example, assignment statement) or could have &lt;em&gt;side effects&lt;/em&gt; (for example, function call).</source>
          <target state="translated">これらのオプションは、&lt;em&gt;すべて&lt;/em&gt;のコードパスが状態を直接変更する（たとえば、代入ステートメント）か、&lt;em&gt;副作用&lt;/em&gt;（たとえば、関数呼び出し）を持つ可能性がある&lt;em&gt;場合にのみ&lt;/em&gt;、未使用の式を許可します。</target>
        </trans-unit>
        <trans-unit id="d4ca9fe55e32c924b83ce46d998ac795270b1873" translate="yes" xml:space="preserve">
          <source>These rules from older versions of ESLint (before the [deprecation policy](/docs/user-guide/rule-deprecation) existed) have been replaced by newer rules:</source>
          <target state="translated">これらのESLintの古いバージョン([deprecation policy](/docs/user-guide/rule-deprecation)が存在する前)のルールは新しいルールに置き換えられています。</target>
        </trans-unit>
        <trans-unit id="1c10097ffacc1c485ac6032b4e5f64b78ed11f9f" translate="yes" xml:space="preserve">
          <source>These rules have been deprecated in accordance with the [deprecation policy](/docs/user-guide/rule-deprecation), and replaced by newer rules:</source>
          <target state="translated">これらのルールは、[deprecation policy](/docs/user-guide/rule-deprecation)に従って非推奨となり、新しいルールに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="5b4a9c4f9cab970df6595988dd4e0581f563d2df" translate="yes" xml:space="preserve">
          <source>These rules relate to ES6, also known as ES2015:</source>
          <target state="translated">これらのルールは、ES2015とも呼ばれるES6に関するものです。</target>
        </trans-unit>
        <trans-unit id="94068d755b38f00b794f755ab1776f6ba8d5af3d" translate="yes" xml:space="preserve">
          <source>These rules relate to better ways of doing things to help you avoid problems:</source>
          <target state="translated">これらのルールは、あなたが問題を回避するためのより良い方法に関連しています。</target>
        </trans-unit>
        <trans-unit id="6407bf99d5998c9e0fef54717f8eb0ec5ebfd745" translate="yes" xml:space="preserve">
          <source>These rules relate to code running in Node.js, or in browsers with CommonJS:</source>
          <target state="translated">これらのルールは、Node.jsやCommonJSを搭載したブラウザで実行されるコードに関連しています。</target>
        </trans-unit>
        <trans-unit id="2c800b49f52cfb2c02793919534a03b1de5ad3a3" translate="yes" xml:space="preserve">
          <source>These rules relate to possible syntax or logic errors in JavaScript code:</source>
          <target state="translated">これらのルールは、JavaScript コードで起こりうる構文エラーやロジックエラーに関連しています。</target>
        </trans-unit>
        <trans-unit id="7d762fa25dfbf7bdd07460cee8d398e88a51d344" translate="yes" xml:space="preserve">
          <source>These rules relate to strict mode directives:</source>
          <target state="translated">これらの規則は、厳格なモードディレクティブに関連しています。</target>
        </trans-unit>
        <trans-unit id="c8321a3f35b15048cb55738fb106514521cfe231" translate="yes" xml:space="preserve">
          <source>These rules relate to style guidelines, and are therefore quite subjective:</source>
          <target state="translated">これらのルールは、スタイルガイドラインに関連するものであり、したがって、非常に主観的なものです。</target>
        </trans-unit>
        <trans-unit id="0d081ea96820ff5654d3db473d43162f105b1f8c" translate="yes" xml:space="preserve">
          <source>These rules relate to variable declarations:</source>
          <target state="translated">これらの規則は、変数の宣言に関するものです。</target>
        </trans-unit>
        <trans-unit id="cfba5d7e75af3b7e2807c06e5034c9af4096fa98" translate="yes" xml:space="preserve">
          <source>Things to Avoid</source>
          <target state="translated">避けるべきこと</target>
        </trans-unit>
        <trans-unit id="1988fde0b51715dd909d42c7a4aa01100331ad2f" translate="yes" xml:space="preserve">
          <source>Think you found a problem? We'd love to hear about it. This section explains how to submit a bug, the type of information we need to properly verify it, and the overall process.</source>
          <target state="translated">何か問題が見つかりましたか?ぜひお聞かせください。このセクションでは、バグの提出方法、適切に検証するために必要な情報の種類、全体的なプロセスについて説明します。</target>
        </trans-unit>
        <trans-unit id="f06f2b5e218ca06ae1bd67c1145935c9e1aabdba" translate="yes" xml:space="preserve">
          <source>Thinking of comments in the context of tokens is more predictable and easier to reason about than thinking about comment tokens in the context of AST nodes</source>
          <target state="translated">トークンのコンテキストでコメントを考える方が、ASTノードのコンテキストでコメントトークンを考えるよりも予測しやすく、推論しやすいです。</target>
        </trans-unit>
        <trans-unit id="2050eef925ba3c231aec703d38a33757acef6aa9" translate="yes" xml:space="preserve">
          <source>Third, it creates the looping path from &lt;code&gt;body&lt;/code&gt; segment to &lt;code&gt;update&lt;/code&gt; segment. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">3番目に、 &lt;code&gt;body&lt;/code&gt; セグメントから &lt;code&gt;update&lt;/code&gt; セグメントへのループパスを作成します。現時点では、次のセグメントはすでに存在しているため、 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; イベントは発生しません。それは発火 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="415be4f10478e1046c67a83032a6f4a8f849fe2a" translate="yes" xml:space="preserve">
          <source>This allows you to avoid retyping error messages. It also prevents errors reported in different sections of your rule from having out-of-date messages.</source>
          <target state="translated">これにより、エラーメッセージの再入力を避けることができます。また、ルールの異なるセクションで報告されたエラーが古いメッセージになるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="13fa28b1d868c6cd569942c00fe12d33c91d2c69" translate="yes" xml:space="preserve">
          <source>This automatically starts Mocha and runs all tests in the &lt;code&gt;tests&lt;/code&gt; directory. You need only add yours and it will automatically be picked up when running tests.</source>
          <target state="translated">これにより、Mochaが自動的に起動し、 &lt;code&gt;tests&lt;/code&gt; ディレクトリ内のすべてのテストが実行されます。あなたはあなたのものを追加するだけでよく、テストの実行時に自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="cb4bd44fc1b6c85e9764f5ab63ec69c2b7dbea0b" translate="yes" xml:space="preserve">
          <source>This behavior was relying on comment attachment happening at the parser level, which does not happen anymore, to ensure that all comments would be accounted for</source>
          <target state="translated">この動作は、コメントの添付がパーサレベルで行われることに依存していましたが、現在は行われていません。</target>
        </trans-unit>
        <trans-unit id="f18fe7d0f8dbbc8445c9163810cbe362da97229f" translate="yes" xml:space="preserve">
          <source>This change was made to help new ESLint users who are frequently confused that ESLint does nothing by default besides reporting parser errors. We anticipate this change will have minimal impact on most established users because you're more likely to have configuration files already.</source>
          <target state="translated">この変更は、ESLintがパーサエラーを報告する以外にデフォルトでは何もしないことに混乱している新しいESLintユーザーを助けるために行われました。すでに設定ファイルを持っている可能性が高いので、この変更はほとんどの既存のユーザーには影響がないと予想しています。</target>
        </trans-unit>
        <trans-unit id="bc26638966505856d54d65c1178254da87bced09" translate="yes" xml:space="preserve">
          <source>This code could appear in any module and will stop the entire application when &lt;code&gt;somethingBadHappened&lt;/code&gt; is truthy. This doesn't give the application any chance to respond to the error. It's usually better to throw an error and allow the application to handle it appropriately:</source>
          <target state="translated">このコードはどのモジュールにも現れる可能性があり、 &lt;code&gt;somethingBadHappened&lt;/code&gt; が真実である場合にアプリケーション全体を停止します。これは、アプリケーションがエラーに応答する機会を与えません。通常は、エラーをスローして、アプリケーションで適切に処理できるようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a1a606524e7605868cb030ae98dda8a50f6c11c" translate="yes" xml:space="preserve">
          <source>This code is an example of a good use of &lt;code&gt;bind()&lt;/code&gt; for setting the value of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;this&lt;/code&gt; の値を設定 &lt;code&gt;bind()&lt;/code&gt; ためのbind（）の適切な使用例です。</target>
        </trans-unit>
        <trans-unit id="188ba6fbc8e6fe291e33a72f0675afd9594eb52a" translate="yes" xml:space="preserve">
          <source>This code is equivalent to:</source>
          <target state="translated">このコードはこれに相当します。</target>
        </trans-unit>
        <trans-unit id="753da87c758e9ab0fcb2b2a117dfb70f5117fba4" translate="yes" xml:space="preserve">
          <source>This code is likely the result of refactoring where a variable was removed from the concatenation (such as &lt;code&gt;&quot;a&quot; + b + &quot;b&quot;&lt;/code&gt;). In such a case, the concatenation isn't important and the code can be rewritten as:</source>
          <target state="translated">このコードは、変数が連結から削除されたリファクタリングの結果である可能性があります（ &lt;code&gt;&quot;a&quot; + b + &quot;b&quot;&lt;/code&gt; ）。そのような場合、連結は重要ではなく、コードは次のように書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="9f3828fead792474a4d824e09a1e9cb9a66c9622" translate="yes" xml:space="preserve">
          <source>This code looks like it will sum the results of calling &lt;code&gt;getPageLength(1)&lt;/code&gt; and &lt;code&gt;getPageLength(2)&lt;/code&gt;, but in reality the final value of &lt;code&gt;totalLength&lt;/code&gt; will only be the length of one of the two pages. The bug is in the statement &lt;code&gt;totalLength += await getPageLength(pageNum);&lt;/code&gt;. This statement first reads an initial value of &lt;code&gt;totalLength&lt;/code&gt;, then calls &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; and waits for that Promise to fulfill. Finally, it sets the value of &lt;code&gt;totalLength&lt;/code&gt; to the sum of &lt;code&gt;await getPageLength(pageNum)&lt;/code&gt; and the &lt;em&gt;initial&lt;/em&gt; value of &lt;code&gt;totalLength&lt;/code&gt;. If the &lt;code&gt;totalLength&lt;/code&gt; variable is updated in a separate function call during the time that the &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; Promise is pending, that update will be lost because the new value is overwritten without being read.</source>
          <target state="translated">このコードは、 &lt;code&gt;getPageLength(1)&lt;/code&gt; および &lt;code&gt;getPageLength(2)&lt;/code&gt; を呼び出した結果を合計するように見えますが、実際には、 &lt;code&gt;totalLength&lt;/code&gt; の最終値は、2ページのうちの1つのページの長さのみになります。バグはステートメント &lt;code&gt;totalLength += await getPageLength(pageNum);&lt;/code&gt; 。このステートメントは、最初に &lt;code&gt;totalLength&lt;/code&gt; の初期値を読み取り、次に &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; を呼び出し、そのPromiseが満たされるのを待ちます。最後に、 &lt;code&gt;totalLength&lt;/code&gt; の値を &lt;code&gt;await getPageLength(pageNum)&lt;/code&gt; とtotalLengthの&lt;em&gt;初期&lt;/em&gt;値の &lt;code&gt;totalLength&lt;/code&gt; ます。もし &lt;code&gt;totalLength&lt;/code&gt; 変数は、 &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; プロミスが保留されている間に別の関数呼び出しで更新されます。新しい値が読み取られずに上書きされるため、その更新は失われます。</target>
        </trans-unit>
        <trans-unit id="684f202df475b56b50fb6fd729383d048e7a34fd" translate="yes" xml:space="preserve">
          <source>This command is used for intensive profiling of ESLint using Chrome Developer Tools. It starts a development server that runs through three profiles:</source>
          <target state="translated">このコマンドは、Chrome Developer Toolsを使用してESLintを集中的にプロファイリングするために使用します。3つのプロファイルを介して実行される開発サーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="ad05d4ce57e7c2b8d71120892681f0fd7b8a2986" translate="yes" xml:space="preserve">
          <source>This comment specifies the &quot;double&quot; option for the &lt;a href=&quot;../rules/quotes&quot;&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/a&gt; rule. The first item in the array is always the rule severity (number or string).</source>
          <target state="translated">このコメントは、&lt;a href=&quot;../rules/quotes&quot;&gt; &lt;code&gt;quotes&lt;/code&gt; &lt;/a&gt;ルールの「ダブル」オプションを指定します。配列の最初の項目は常にルールの重要度（数値または文字列）です。</target>
        </trans-unit>
        <trans-unit id="c7f36a8542f8ca497d5ce67e7924c214e3e2553a" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines after all directive prologues, like the &lt;a href=&quot;lines-around-directive&quot;&gt;lines-around-directive&lt;/a&gt; rule.</source>
          <target state="translated">この構成では、&lt;a href=&quot;lines-around-directive&quot;&gt;lines-around-directive&lt;/a&gt;ルールのように、すべてのディレクティブプロローグの後に空白行が必要です。</target>
        </trans-unit>
        <trans-unit id="9dbff86ed4fd7400b47ff47a0dd5eda756a4d90b" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines after every sequence of variable declarations, like the &lt;a href=&quot;newline-after-var&quot;&gt;newline-after-var&lt;/a&gt; rule.</source>
          <target state="translated">この構成では、&lt;a href=&quot;newline-after-var&quot;&gt;newline-after-var&lt;/a&gt;ルールのように、一連の変数宣言の後に空白行が必要になります。</target>
        </trans-unit>
        <trans-unit id="1e26ce16017121a05fb352bf06244e7be23d0979" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines before all &lt;code&gt;return&lt;/code&gt; statements, like the &lt;a href=&quot;newline-before-return&quot;&gt;newline-before-return&lt;/a&gt; rule.</source>
          <target state="translated">この構成では、&lt;a href=&quot;newline-before-return&quot;&gt;newline-before-return&lt;/a&gt;ルールのように、すべての &lt;code&gt;return&lt;/code&gt; ステートメントの前に空白行が必要です。</target>
        </trans-unit>
        <trans-unit id="6b66a4e4cfa3e14529aa4fa898e5f7863716da98" translate="yes" xml:space="preserve">
          <source>This confusion led to the suggestion that you always use the radix parameter to &lt;code&gt;parseInt()&lt;/code&gt; to eliminate unintended consequences. So instead of doing this:</source>
          <target state="translated">この混乱により、意図せず結果を排除するために常にradixパラメーターを &lt;code&gt;parseInt()&lt;/code&gt; に使用するように提案されました。したがって、これを行う代わりに：</target>
        </trans-unit>
        <trans-unit id="83e16d377b13bc51965962233959b781d483d56b" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;.eslintrc.json&lt;/code&gt; with the equivalent rules from &lt;code&gt;.jscsrc.json&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;.eslintrc.json&lt;/code&gt; の同等のルールを使用して.eslintrc.jsonが作成され &lt;code&gt;.jscsrc.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35b6118aa09ead4292a552cdefd4bf660c36121a" translate="yes" xml:space="preserve">
          <source>This defines two global variables, &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt;. If you want to optionally specify that these global variables can be written to (rather than only being read), then you can set each with a &lt;code&gt;&quot;writable&quot;&lt;/code&gt; flag:</source>
          <target state="translated">これは2つのグローバル変数 &lt;code&gt;var1&lt;/code&gt; と &lt;code&gt;var2&lt;/code&gt; を定義します。これらのグローバル変数を（読み取るだけでなく）書き込むことができるようにオプションで指定したい場合は、それぞれに &lt;code&gt;&quot;writable&quot;&lt;/code&gt; フラグを設定できます。</target>
        </trans-unit>
        <trans-unit id="3ca397cac4d7710b96570663c5edc9bb83de7535" translate="yes" xml:space="preserve">
          <source>This document was written based on the implementation of &lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;, a fork of &lt;a href=&quot;https://github.com/estools/escope&quot;&gt;escope&lt;/a&gt;, and deprecates some members ESLint is not using.</source>
          <target state="translated">この文書はの実装に基づいて書かれていた&lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslintスコープ&lt;/a&gt;のフォーク&lt;a href=&quot;https://github.com/estools/escope&quot;&gt;escope&lt;/a&gt;、およびESLintが使用されていない一部のメンバーを非難します。</target>
        </trans-unit>
        <trans-unit id="2b59eaeb1ba84dbe4d0f62e580e35a843870fadf" translate="yes" xml:space="preserve">
          <source>This does not apply to ES modules since the module code is implicitly in &lt;code&gt;strict&lt;/code&gt; mode.</source>
          <target state="translated">モジュールコードは暗黙的に &lt;code&gt;strict&lt;/code&gt; モードであるため、これはESモジュールには適用されません。</target>
        </trans-unit>
        <trans-unit id="fb51c33d469f4a38ec64dfb8e217007e9ea2b0d3" translate="yes" xml:space="preserve">
          <source>This enables Node.js and Mocha environments.</source>
          <target state="translated">これにより、Node.jsやMocha環境が可能になります。</target>
        </trans-unit>
        <trans-unit id="96d81fc1760eedae232eea6c704c64e8eb216135" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.</source>
          <target state="translated">このエラーは、期待した通りに動作しない可能性のあるコードを強調するために発生します。このエラーを修正しなければ、あなたのコードは問題なく動作するかもしれませんが、状況によっては予期せぬ動作をする可能性があります。</target>
        </trans-unit>
        <trans-unit id="1319046b42ad8a423f26271e5a8f9e3897afb48f" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.</source>
          <target state="translated">このエラーは、潜在的に混乱を招く可能性のある、無意味なコードの一部を強調するために発生します。何かをそれ自身と比較する必要がある状況はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="e531d4e1a4e5ab163fb0aa73581a1e29f4d1b370" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the &lt;code&gt;eval&lt;/code&gt; function.</source>
          <target state="translated">このエラーは、悪い習慣の使用を強調するために発生します。関数コンストラクターに文字列を渡すことにより、 &lt;code&gt;eval&lt;/code&gt; 関数を呼び出すときに必要な方法でエンジンがその文字列を解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2f1895eb1d8a20e008d9ead1693d3546a812ebc" translate="yes" xml:space="preserve">
          <source>This error occurs when a label is used to mark a statement that is not an iteration or switch</source>
          <target state="translated">このエラーは、ラベルが反復やスイッチではない文をマークするために使用された場合に発生します。</target>
        </trans-unit>
        <trans-unit id="0066921471bb97a77df66b0fbbcd0a1701ecc926" translate="yes" xml:space="preserve">
          <source>This event is always fired when the next segment has existed already. That timing is the end of loops mainly.</source>
          <target state="translated">このイベントは、すでに次のセグメントが存在しているときに必ず発生します。このタイミングは、主にループの終了時です。</target>
        </trans-unit>
        <trans-unit id="bb4b12cc9ff8e27a5e1e8dc331ee5e01a59914a3" translate="yes" xml:space="preserve">
          <source>This example doesn't need to include separators as &lt;code&gt;path.join()&lt;/code&gt; will do it in the most appropriate manner. Alternately, you can use &lt;code&gt;path.resolve()&lt;/code&gt; to retrieve the fully-qualified path:</source>
          <target state="translated">&lt;code&gt;path.join()&lt;/code&gt; が最も適切な方法で行うため、この例ではセパレータを含める必要はありません。または、 &lt;code&gt;path.resolve()&lt;/code&gt; を使用して完全修飾パスを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="a1489f70baffad0b363356684d7ebc01fe6e95fe" translate="yes" xml:space="preserve">
          <source>This example is checking whether or not the parameter &lt;code&gt;cb&lt;/code&gt; is called in every path. Instances of &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt; are shared to every rule. So a rule must not modify those instances. Please use a map of information instead.</source>
          <target state="translated">この例では、すべてのパスでパラメーター &lt;code&gt;cb&lt;/code&gt; が呼び出されているかどうかを確認しています。 &lt;code&gt;CodePath&lt;/code&gt; および &lt;code&gt;CodePathSegment&lt;/code&gt; のインスタンスは、すべてのルールで共有されます。したがって、ルールはそれらのインスタンスを変更してはなりません。代わりに情報のマップを使用してください。</target>
        </trans-unit>
        <trans-unit id="6b1cbc4d68b7ab7330711ad6c1fdf27c26b1979f" translate="yes" xml:space="preserve">
          <source>This example is the same as the last example, only it uses the numeric codes instead of the string values. The &lt;code&gt;eqeqeq&lt;/code&gt; rule is off and the &lt;code&gt;curly&lt;/code&gt; rule is set to be an error.</source>
          <target state="translated">この例は前の例と同じですが、文字列値の代わりに数値コードを使用しています。 &lt;code&gt;eqeqeq&lt;/code&gt; のルールがオフで、 &lt;code&gt;curly&lt;/code&gt; ルールがエラーに設定されています。</target>
        </trans-unit>
        <trans-unit id="5b80ceb7cc1a3b04b54119a40781bdb6e7bf6522" translate="yes" xml:space="preserve">
          <source>This example uses the configuration file at &lt;code&gt;~/my-eslint.json&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;~/my-eslint.json&lt;/code&gt; ある構成ファイルを使用しています。</target>
        </trans-unit>
        <trans-unit id="5750c517a5090dcd054e93a3ee543572116cb885" translate="yes" xml:space="preserve">
          <source>This fixer can just select a quote type arbitrarily. If it guesses wrong, the resulting code will be automatically reported and fixed by the &lt;a href=&quot;../rules/quotes&quot;&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/a&gt; rule.</source>
          <target state="translated">このフィクサーは、見積もりタイプを任意に選択できます。推測が間違っている場合、結果のコードは自動的に報告され、&lt;a href=&quot;../rules/quotes&quot;&gt; &lt;code&gt;quotes&lt;/code&gt; &lt;/a&gt;ルールによって修正されます。</target>
        </trans-unit>
        <trans-unit id="72e5ad7dfae2aad2273d8fb43485335becf7a8e7" translate="yes" xml:space="preserve">
          <source>This flag can be useful for integrations (e.g. editor plugins) which need to autofix text from the command line without saving it to the filesystem.</source>
          <target state="translated">このフラグは、ファイルシステムに保存せずにコマンドラインからテキストを自動修正する必要がある統合(エディタ・プラグインなど)に便利です。</target>
        </trans-unit>
        <trans-unit id="157309b8637b779bbae6ea2553e72ed4cf1ac2da" translate="yes" xml:space="preserve">
          <source>This guide is intended for anyone who wants to contribute to an ESLint project. Please read it carefully as it answers a lot of the questions many newcomers have when first working with our projects.</source>
          <target state="translated">このガイドはESLintプロジェクトに貢献したい人のためのものです。初めてESLintプロジェクトに参加する人が疑問に思うことの多くが書かれていますので、よく読んでください。</target>
        </trans-unit>
        <trans-unit id="253a5fabdebd34fd1ff274b7348e9288f83d7161" translate="yes" xml:space="preserve">
          <source>This guide is intended for those who wish to use ESLint as an end-user. If you're looking for how to extend ESLint or work with the ESLint source code, please see the &lt;a href=&quot;../developer-guide&quot;&gt;Developer Guide&lt;/a&gt;.</source>
          <target state="translated">このガイドは、ESLintをエンドユーザーとして使用したいユーザーを対象としています。ESLintの拡張方法やESLintソースコードの操作方法をお探しの場合は、&lt;a href=&quot;../developer-guide&quot;&gt;デベロッパーガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="473f2b9ad42cc05ec316de78004da7a5bf503dd5" translate="yes" xml:space="preserve">
          <source>This guide is intended for those who wish to:</source>
          <target state="translated">このガイドは、そんな方を対象にしています。</target>
        </trans-unit>
        <trans-unit id="9ce127fc5333e8fad7ca9180cee5cf2786869645" translate="yes" xml:space="preserve">
          <source>This installs the ESLint CLI from the npm repository. To run ESLint, use the following format:</source>
          <target state="translated">これはnpmリポジトリからESLint CLIをインストールします。ESLintを実行するには、以下のフォーマットを使用します。</target>
        </trans-unit>
        <trans-unit id="6d6a6a6ef3fa256f73c341751311b151c76aafa7" translate="yes" xml:space="preserve">
          <source>This is a convenience method similar to &lt;code&gt;Linter#defineRule&lt;/code&gt;, except that it allows you to define many rules at once using an object.</source>
          <target state="translated">これは、オブジェクトを使用して一度に多くのルールを定義できることを除いて、 &lt;code&gt;Linter#defineRule&lt;/code&gt; に似た便利なメソッドです。</target>
        </trans-unit>
        <trans-unit id="11670f5644a3f050b8ea016868b68ee8847819a8" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;CLIEngine&lt;/code&gt; that is used to output fixes from &lt;code&gt;report&lt;/code&gt; to disk. It does by looking for files that have an &lt;code&gt;output&lt;/code&gt; property in their results. Here's an example:</source>
          <target state="translated">これは &lt;code&gt;CLIEngine&lt;/code&gt; の静的関数で、 &lt;code&gt;report&lt;/code&gt; からディスクに修正を出力するために使用されます。結果に &lt;code&gt;output&lt;/code&gt; プロパティが含まれているファイルを検索することで実行します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1adc98f9996e37b1c7669ea22572879ca414a9b1" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;CLIEngine&lt;/code&gt;. It can be used to filter out all the non error messages from the report object.</source>
          <target state="translated">これは &lt;code&gt;CLIEngine&lt;/code&gt; の静的関数です。レポートオブジェクトからエラー以外のすべてのメッセージを除外するために使用できます。</target>
        </trans-unit>
        <trans-unit id="411339a1879450f98c5e40e4c8f17c9ae2ac5b07" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;SourceCode&lt;/code&gt; that is used to split the source code text into an array of lines.</source>
          <target state="translated">これは、ソースコードテキストを行の配列に分割するために使用される &lt;code&gt;SourceCode&lt;/code&gt; の静的関数です。</target>
        </trans-unit>
        <trans-unit id="5c6b39c351ca401855c1034cdb4244faf9090c89" translate="yes" xml:space="preserve">
          <source>This is also valid:</source>
          <target state="translated">これも有効です。</target>
        </trans-unit>
        <trans-unit id="05cabcf8fe7c5a7502ad5f2210a082e0f0df43f2" translate="yes" xml:space="preserve">
          <source>This is an option to avoid conflicting with &lt;code&gt;no-use-before-define&lt;/code&gt; rule (without &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; option). If &lt;code&gt;true&lt;/code&gt; is specified, this rule will ignore variables that are read between the declaration and the first assignment. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;no-use-before-define&lt;/code&gt; ルールとの競合を回避するためのオプションです（ &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; オプションなし）。 &lt;code&gt;true&lt;/code&gt; が指定されている場合、このルールは宣言と最初の割り当ての間で読み取られる変数を無視します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0f2e67931876380560ac0e1af9b3fd1d55a7d952" translate="yes" xml:space="preserve">
          <source>This is called a Yoda condition because it reads as, &quot;if red equals the color&quot;, similar to the way the Star Wars character Yoda speaks. Compare to the other way of arranging the operands:</source>
          <target state="translated">これは、スターウォーズのキャラクターヨーダの話し方に似ていて、「赤が色に等しい場合」と読めるので、ヨーダ条件と呼ばれています。オペランドを配置する他の方法と比較してみてください。</target>
        </trans-unit>
        <trans-unit id="f9f1cbf0a10293e94b068250d8c44dd714c9617f" translate="yes" xml:space="preserve">
          <source>This is considered an implied &lt;code&gt;eval()&lt;/code&gt; because a string of JavaScript code is passed in to be interpreted. The same can be done with &lt;code&gt;setInterval()&lt;/code&gt; and &lt;code&gt;execScript()&lt;/code&gt;. Both interpret the JavaScript code in the global scope. For both &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt;, the first argument can also be a function, and that is considered safer and is more performant:</source>
          <target state="translated">JavaScriptコードの文字列が渡されて解釈されるため、これは暗黙の &lt;code&gt;eval()&lt;/code&gt; と見なされます。 &lt;code&gt;setInterval()&lt;/code&gt; および &lt;code&gt;execScript()&lt;/code&gt; でも同じことができます。どちらもグローバルスコープのJavaScriptコードを解釈します。 &lt;code&gt;setTimeout()&lt;/code&gt; と &lt;code&gt;setInterval()&lt;/code&gt; の両方で、最初の引数を関数にすることもできます。これは、より安全でパフォーマンスが高いと見なされています。</target>
        </trans-unit>
        <trans-unit id="885353f2c68ea0bab26fa60d3a09af64f1ec283e" translate="yes" xml:space="preserve">
          <source>This is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.</source>
          <target state="translated">このような機能をデバッグしたり、読み込んだりすることが困難なために、悪習とされることが多いと考えられています。</target>
        </trans-unit>
        <trans-unit id="71789ba820d3432452cd5210c7e76d1350d5fa8c" translate="yes" xml:space="preserve">
          <source>This is not expected to cause breakage. However, it will likely result in larger report locations than before. For example, if a rule reports the root node of the AST, the reported problem's range will be the entire program. In some integrations, this could result in a poor user experience (e.g. if the entire program is highlighted to indicate an error).</source>
          <target state="translated">これにより、破損することはないと思われます。しかし、以前よりも報告される場所が大きくなる可能性が高いです。例えば、あるルールがASTのルートノードをレポートする場合、レポートされる問題の範囲はプログラム全体になります。いくつかの統合では、この結果、ユーザーエクスペリエンスが悪くなる可能性があります(例えば、エラーを示すためにプログラム全体がハイライトされている場合など)。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">これはデフォルトのオプションです。</target>
        </trans-unit>
        <trans-unit id="d56606d1292924eedc2be3d66c63677095b21441" translate="yes" xml:space="preserve">
          <source>This is the default option. It disallows assignments unless they are enclosed in parentheses.</source>
          <target state="translated">これはデフォルトのオプションです。括弧で囲まれていない限り、割り当てを無効にします。</target>
        </trans-unit>
        <trans-unit id="9ee2c2a8cccc55fcecc1d76de320e24ae82e812d" translate="yes" xml:space="preserve">
          <source>This is the default option. It enforces spacing after semicolons and disallows spacing before semicolons.</source>
          <target state="translated">これはデフォルトのオプションです。セミコロンの後の間隔を強制し、セミコロンの前の間隔を無効にします。</target>
        </trans-unit>
        <trans-unit id="8c3fab8ba68001a6f97fcb8826756ef27d34444f" translate="yes" xml:space="preserve">
          <source>This is used to disambiguate the division operator to not confuse users.</source>
          <target state="translated">これは、ユーザーを混乱させないために、分割演算子の曖昧性を解消するために使用されます。</target>
        </trans-unit>
        <trans-unit id="34f305c3c8978f968bfdd0149b0fd14a4716185a" translate="yes" xml:space="preserve">
          <source>This is used to disambiguate the slash operator and facilitates more readable code.</source>
          <target state="translated">これは、スラッシュ演算子の曖昧さを解消し、より読みやすいコードを容易にするために使用されます。</target>
        </trans-unit>
        <trans-unit id="8bd301643debec8b3d995a82000f4930e1a7b0d5" translate="yes" xml:space="preserve">
          <source>This is valid as well:</source>
          <target state="translated">これも有効です。</target>
        </trans-unit>
        <trans-unit id="3cad551b2177908dacdd49bf4d5fd3dc7d354609" translate="yes" xml:space="preserve">
          <source>This may look alright at first sight, but this code in fact throws a syntax error in ECMAScript 5 strict mode. This happens because &lt;code&gt;1e2&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; are coerced into strings before getting used as the property name. Both &lt;code&gt;String(1e2)&lt;/code&gt; and &lt;code&gt;String(100)&lt;/code&gt; happen to be equal to &lt;code&gt;&quot;100&quot;&lt;/code&gt;, which causes the &quot;Duplicate data property in object literal not allowed in strict mode&quot; error. Issues like that can be tricky to debug, so some prefer to require quotes around all property names.</source>
          <target state="translated">これは一見大丈夫に見えるかもしれませんが、実際にはこのコードはECMAScript 5 strictモードで構文エラーをスローします。これは、 &lt;code&gt;1e2&lt;/code&gt; と &lt;code&gt;100&lt;/code&gt; がプロパティ名として使用される前に文字列に強制変換されるために発生します。 &lt;code&gt;String(1e2)&lt;/code&gt; と &lt;code&gt;String(100)&lt;/code&gt; はどちらも &lt;code&gt;&quot;100&quot;&lt;/code&gt; に等しいため、「オブジェクトリテラルのデータプロパティの重複は、厳密モードでは許可されていません」というエラーが発生します。このような問題はデバッグが難しいため、すべてのプロパティ名を引用符で囲む必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="5f324b335e29b3bc2325916661c3691bcbdcc494" translate="yes" xml:space="preserve">
          <source>This may look like a &lt;code&gt;return&lt;/code&gt; statement that returns an object literal, however, the JavaScript engine will interpret this code as:</source>
          <target state="translated">これはオブジェクトリテラルを返す &lt;code&gt;return&lt;/code&gt; ステートメントのように見えますが、JavaScriptエンジンはこのコードを次のように解釈します。</target>
        </trans-unit>
        <trans-unit id="9469e264aeefd6b881ec26f4966d916d417a81b0" translate="yes" xml:space="preserve">
          <source>This message occurs because ESLint is unsure if you wanted to actually lint the file or not. As the message indicates, you can use &lt;code&gt;--no-ignore&lt;/code&gt; to omit using the ignore rules.</source>
          <target state="translated">このメッセージは、ESLintが実際にファイルをlintしたいかどうか不明なために発生します。メッセージが示すように、 &lt;code&gt;--no-ignore&lt;/code&gt; を使用して、無視ルールの使用を省略できます。</target>
        </trans-unit>
        <trans-unit id="9acfa8cb4bab952e8f358b4acdd87a3e87086a7e" translate="yes" xml:space="preserve">
          <source>This method is similar to verify except that it also runs autofixing logic, similar to the &lt;code&gt;--fix&lt;/code&gt; flag on the command line. The result object will contain the autofixed code, along with any remaining linting messages for the code that were not autofixed.</source>
          <target state="translated">このメソッドは、コマンドラインの &lt;code&gt;--fix&lt;/code&gt; フラグと同様に自動修正ロジックも実行することを除いて、verifyに似ています。結果オブジェクトには、自動修正されたコードと、自動修正されなかった残りのコードメッセージが含まれます。</target>
        </trans-unit>
        <trans-unit id="6e28456cfd122c5d695be0c36d1639aa0cd9e8fd" translate="yes" xml:space="preserve">
          <source>This method returns a map of all loaded rules.</source>
          <target state="translated">このメソッドは、ロードされたすべてのルールのマップを返します。</target>
        </trans-unit>
        <trans-unit id="96118f25ecbb0711c0de11b20891644868f6d5a0" translate="yes" xml:space="preserve">
          <source>This method returns a map of all loaded rules. Under the hood, it calls &lt;a href=&quot;#lintergetrules&quot;&gt;Linter#getRules&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、ロードされたすべてのルールのマップを返します。&lt;a href=&quot;#lintergetrules&quot;&gt;内部的&lt;/a&gt;には、Linter＃getRulesを呼び出します。</target>
        </trans-unit>
        <trans-unit id="750daf348b86f808d9b8eaf3ba8fb5c90d1422b3" translate="yes" xml:space="preserve">
          <source>This method returns an array of all the comments found in the program. This is useful for rules that need to check all comments regardless of location.</source>
          <target state="translated">このメソッドは、プログラム内で見つかったすべてのコメントの配列を返します。これは、場所に関係なくすべてのコメントをチェックする必要があるルールに便利です。</target>
        </trans-unit>
        <trans-unit id="cf8d820e1cad68596ca7105185382c1dd8c45533" translate="yes" xml:space="preserve">
          <source>This method returns the scope which has the following types:</source>
          <target state="translated">このメソッドは、以下の型を持つスコープを返します。</target>
        </trans-unit>
        <trans-unit id="dbe677f233ad08e453df8fbf6a0cc972e5133856" translate="yes" xml:space="preserve">
          <source>This object may not:</source>
          <target state="translated">このオブジェクトはそうではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="07af4924baef123f1b198a3210ee8db9f97b124a" translate="yes" xml:space="preserve">
          <source>This object's responsibilities include:</source>
          <target state="translated">このオブジェクトの責任は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e8c3a3349dc261fe599ac47a9d7990013dfe7db9" translate="yes" xml:space="preserve">
          <source>This option allows you to disable reporting on warnings. If you enable this option, only errors are reported by ESLint.</source>
          <target state="translated">このオプションは警告の報告を無効にします。このオプションを有効にすると、ESLint はエラーのみを報告します。</target>
        </trans-unit>
        <trans-unit id="85dd27a30c2a375f5a8fd794ae0e7f82e1be6296" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a filename to process STDIN as. This is useful when processing files from STDIN and you have rules which depend on the filename.</source>
          <target state="translated">このオプションでは、STDIN を処理するファイル名を指定することができます。これは、STDIN からファイルを処理する際に、ファイル名に依存するルールがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="186734fe42d275a33186e1772b91f3f61e44c344" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a parser to be used by ESLint. By default, &lt;code&gt;espree&lt;/code&gt; will be used.</source>
          <target state="translated">このオプションを使用すると、ESLintで使用するパーサーを指定できます。デフォルトでは、 &lt;code&gt;espree&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="74b60e3e65cac66b94ee54882199faebdc7d7526" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a warning threshold, which can be used to force ESLint to exit with an error status if there are too many warning-level rule violations in your project.</source>
          <target state="translated">このオプションは警告のしきい値を指定することができ、プロジェクト内で警告レベルのルール違反が多すぎる場合にESLintをエラー状態で終了させることができます。</target>
        </trans-unit>
        <trans-unit id="d9cfbfc188b072be5cf23949f06fff9feb06dd57" translate="yes" xml:space="preserve">
          <source>This option allows you to specify an additional configuration file for ESLint (see &lt;a href=&quot;configuring&quot;&gt;Configuring ESLint&lt;/a&gt; for more).</source>
          <target state="translated">このオプションは、（参照ESLintのための追加設定ファイルを指定することを可能にする&lt;a href=&quot;configuring&quot;&gt;設定ESLintを&lt;/a&gt;多くのため）。</target>
        </trans-unit>
        <trans-unit id="d39ed50a5fad1fe2517fc4c0e41bff667e641b14" translate="yes" xml:space="preserve">
          <source>This option allows you to specify another directory from which to load rules files. This allows you to dynamically load new rules at run time. This is useful when you have custom rules that aren't suitable for being bundled with ESLint.</source>
          <target state="translated">このオプションでは、ルールファイルをロードする別のディレクトリを指定することができます。これにより、実行時に新しいルールを動的にロードすることができます。これはESLintにバンドルされていないカスタムルールがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1b65a3229193445946c07836b34241f12c03d02d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify parser options to be used by ESLint. Note that the available parser options are determined by the parser being used.</source>
          <target state="translated">このオプションはESLintで使用するパーサオプションを指定することができます。使用できるパーサオプションは使用するパーサによって決まります。</target>
        </trans-unit>
        <trans-unit id="106d9c8368dbe004a8c5fe9daebbd29c87af1e91" translate="yes" xml:space="preserve">
          <source>This option allows you to specify patterns of files to ignore (in addition to those in &lt;code&gt;.eslintignore&lt;/code&gt;). You can repeat the option to provide multiple patterns. The supported syntax is the same as for &lt;code&gt;.eslintignore&lt;/code&gt;&lt;a href=&quot;configuring#.eslintignore&quot;&gt;files&lt;/a&gt;, which use the same patterns as the &lt;code&gt;.gitignore&lt;/code&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;specification&lt;/a&gt;. You should quote your patterns in order to avoid shell interpretation of glob patterns.</source>
          <target state="translated">このオプションを使用すると、無視するファイルのパターンを指定できます（ &lt;code&gt;.eslintignore&lt;/code&gt; のパターンに加えて）。複数のパターンを提供するオプションを繰り返すことができます。サポートされている構文は、 &lt;code&gt;.gitignore&lt;/code&gt; &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;仕様&lt;/a&gt;と同じパターンを使用する &lt;code&gt;.eslintignore&lt;/code&gt; &lt;a href=&quot;configuring#.eslintignore&quot;&gt;ファイル&lt;/a&gt;と同じです。シェルがグロブパターンを解釈しないように、パターンを引用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4e1a28f3ded9a3b9eb6475943dff5e4939f78ddd" translate="yes" xml:space="preserve">
          <source>This option allows you to specify the file to use as your &lt;code&gt;.eslintignore&lt;/code&gt;. By default, ESLint looks in the current working directory for &lt;code&gt;.eslintignore&lt;/code&gt;. You can override this behavior by providing a path to a different file.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;.eslintignore&lt;/code&gt; として使用するファイルを指定できます。デフォルトでは、ESLintは現在の作業ディレクトリで &lt;code&gt;.eslintignore&lt;/code&gt; を探します。別のファイルへのパスを指定することで、この動作をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c32bf7172dd146fc567e0246ac0c8ff17f262721" translate="yes" xml:space="preserve">
          <source>This option allows you to specify the type of fixes to apply when using either &lt;code&gt;--fix&lt;/code&gt; or &lt;code&gt;--fix-dry-run&lt;/code&gt;. The three types of fixes are:</source>
          <target state="translated">このオプションは、次のいずれかを使用するときに適用する修正のタイプを指定することができます &lt;code&gt;--fix&lt;/code&gt; または &lt;code&gt;--fix-dry-run&lt;/code&gt; 。修正には次の3つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="c914fe341609fcaa321048e85e99b3c111eac45d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify which file extensions ESLint will use when searching for JavaScript files in the directories you specify. By default, it uses &lt;code&gt;.js&lt;/code&gt; as the only file extension.</source>
          <target state="translated">このオプションを使用すると、指定したディレクトリでJavaScriptファイルを検索するときにESLintが使用するファイル拡張子を指定できます。デフォルトでは、唯一のファイル拡張子として &lt;code&gt;.js&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5cefe1392a8f9c174c272d0205d79e85976936f0" translate="yes" xml:space="preserve">
          <source>This option causes ESLint to report directive comments like &lt;code&gt;// eslint-disable-line&lt;/code&gt; when no errors would have been reported on that line anyway. This can be useful to prevent future errors from unexpectedly being suppressed, by cleaning up old &lt;code&gt;eslint-disable&lt;/code&gt; comments which are no longer applicable.</source>
          <target state="translated">このオプションを使用すると、ESLintは &lt;code&gt;// eslint-disable-line&lt;/code&gt; などのディレクティブコメントを報告しますが、その行でエラーが報告されていなかった場合。これは、適用されなくなった古い &lt;code&gt;eslint-disable&lt;/code&gt; コメントをクリーンアップすることにより、将来のエラーが予期せず抑制されるのを防ぐのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c661c2f3569528801054ee87219857863dcf11b9" translate="yes" xml:space="preserve">
          <source>This option checks methods with the given names, &lt;em&gt;even if&lt;/em&gt; the object which has the method is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">このオプションは、メソッドを持つオブジェクトが配列で&lt;em&gt;ない&lt;/em&gt;&lt;em&gt;場合でも&lt;/em&gt;、指定された名前のメソッドをチェックします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fccdeab5132a30722aca041dac694817c9dc5d44" translate="yes" xml:space="preserve">
          <source>This option defines global variables so that they will not be flagged as undefined by the &lt;code&gt;no-undef&lt;/code&gt; rule. Any specified global variables are assumed to be read-only by default, but appending &lt;code&gt;:true&lt;/code&gt; to a variable's name ensures that &lt;code&gt;no-undef&lt;/code&gt; will also allow writes. To specify multiple global variables, separate them using commas, or use the option multiple times.</source>
          <target state="translated">このオプションはグローバル変数を定義するため、 &lt;code&gt;no-undef&lt;/code&gt; ルールによって未定義としてフラグが立てられることはありません。指定されたグローバル変数はすべてデフォルトで読み取り専用であると見なされますが、変数の名前に &lt;code&gt;:true&lt;/code&gt; を追加すると、 &lt;code&gt;no-undef&lt;/code&gt; でも書き込みが許可されます。複数のグローバル変数を指定するには、それらをコンマで区切るか、オプションを複数回使用します。</target>
        </trans-unit>
        <trans-unit id="8ba2372568bac2be3ed8079d1b145a3ad1c564b1" translate="yes" xml:space="preserve">
          <source>This option disallows all assignments in &lt;code&gt;return&lt;/code&gt; statements. All assignments are treated as problems.</source>
          <target state="translated">このオプションは、 &lt;code&gt;return&lt;/code&gt; ステートメントでのすべての割り当てを禁止します。すべての割り当ては問題として扱われます。</target>
        </trans-unit>
        <trans-unit id="c64a3a7bb5ddd0c764741c6306006a0d08071747" translate="yes" xml:space="preserve">
          <source>This option enables specific environments. Details about the global variables defined by each environment are available on the &lt;a href=&quot;configuring&quot;&gt;configuration&lt;/a&gt; documentation. This option only enables environments; it does not disable environments set in other configuration files. To specify multiple environments, separate them using commas, or use the option multiple times.</source>
          <target state="translated">このオプションは、特定の環境を有効にします。各環境で定義されたグローバル変数の詳細は、&lt;a href=&quot;configuring&quot;&gt;構成&lt;/a&gt;ドキュメントに記載されています。このオプションは環境のみを有効にします。他の構成ファイルで設定された環境は無効になりません。複数の環境を指定するには、コンマを使用してそれらを分離するか、オプションを複数回使用します。</target>
        </trans-unit>
        <trans-unit id="ea6b9d897dea32cb3a7adac81f91222a4f84f0b0" translate="yes" xml:space="preserve">
          <source>This option enforces spacing before semicolons and disallows spacing after semicolons.</source>
          <target state="translated">このオプシ ョ ンは、 セミコロンの前の間隔を強制 し 、 セミコロンの後の間隔を無効に し ます。</target>
        </trans-unit>
        <trans-unit id="de4b303d3dec233dfe8862afdb1eb4eeb8a2fe5e" translate="yes" xml:space="preserve">
          <source>This option ensures that all function bodies are strict mode code, while global code is not. Particularly if a build step concatenates multiple scripts, a strict mode directive in global code of one script could unintentionally enable strict mode in another script that was not intended to be strict code.</source>
          <target state="translated">このオプションを指定すると、すべての関数本体が厳密モードコードであることを保証し、グローバルコードは厳密モードコードではないことを保証します。特に、ビルドステップで複数のスクリプトを連結している場合、あるスクリプトのグローバルコードで strict mode ディレクティブを使用すると、意図せずして別のスクリプトで strict mode を有効にしてしまい、 strict code にすることを意図していなかったことがあります。</target>
        </trans-unit>
        <trans-unit id="e647d69856373f96f3407afed5013f48346bdfe2" translate="yes" xml:space="preserve">
          <source>This option ensures that all functions are executed in strict mode. A strict mode directive must be present in global code or in every top-level function declaration or expression. It does not concern itself with unnecessary strict mode directives in nested functions that are already strict, nor with multiple strict mode directives at the same level.</source>
          <target state="translated">このオプションを指定すると、すべての関数が厳密モードで実行されるようになります。strict mode ディレクティブは、グローバルコード、あるいはトップレベルの関数宣言や式の中に存在しなければなりません。これは、既に strict である入れ子になっている関数の不要な strict モードディレクティブや、同一レベルでの複数の strict モードディレクティブを気にすることはありません。</target>
        </trans-unit>
        <trans-unit id="aa35f1a43f3c3018915a36e743fa5634d8ffb97c" translate="yes" xml:space="preserve">
          <source>This option forces the enabling/disabling of colorized output. You can use this to override the default behavior, which is to enable colorized output unless no TTY is detected, such as when piping &lt;code&gt;eslint&lt;/code&gt; through &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">このオプションは、カラー化された出力の有効化/無効化を強制します。これを使用して、デフォルトの動作を上書きできます。 &lt;code&gt;eslint&lt;/code&gt; を &lt;code&gt;cat&lt;/code&gt; または &lt;code&gt;less&lt;/code&gt; にパイプする場合など、TTYが検出されない限り、カラー出力を有効にします。</target>
        </trans-unit>
        <trans-unit id="4aca571b443c66494cfaa66d1259c007fcbd6a87" translate="yes" xml:space="preserve">
          <source>This option has no effect on code that uses a processor, unless the processor opts into allowing autofixes.</source>
          <target state="translated">このオプションは、プロセッサが自動修正を許可しない限り、プロセッサを使用するコードには影響しません。</target>
        </trans-unit>
        <trans-unit id="930e8c0ad2927b8cda5d231d103927440d79a6ec" translate="yes" xml:space="preserve">
          <source>This option has the same effect as &lt;code&gt;--fix&lt;/code&gt; with one difference: the fixes are not saved to the file system. This makes it possible to fix code from &lt;code&gt;stdin&lt;/code&gt; (when used with the &lt;code&gt;--stdin&lt;/code&gt; flag).</source>
          <target state="translated">このオプションは &lt;code&gt;--fix&lt;/code&gt; と同じ効果がありますが、1つ異なる点があります。修正はファイルシステムに保存されません。これにより、 &lt;code&gt;stdin&lt;/code&gt; からのコードを修正できます（ &lt;code&gt;--stdin&lt;/code&gt; フラグと併用した場合）。</target>
        </trans-unit>
        <trans-unit id="9e29912dbfa3dcdc6bb50600a52b9ed9b3d16f1d" translate="yes" xml:space="preserve">
          <source>This option instructs ESLint to try to fix as many issues as possible. The fixes are made to the actual files themselves and only the remaining unfixed issues are output. Not all problems are fixable using this option, and the option does not work in these situations:</source>
          <target state="translated">このオプションはESLintに可能な限り多くの問題を修正するように指示します。修正は実際のファイル自体に行われ、未修正の問題だけが出力されます。このオプションですべての問題が修正できるわけではなく、このオプションはこのような状況では機能しません。</target>
        </trans-unit>
        <trans-unit id="a3916f03fe6ee5dfd351fc13d5bd08fbc91a2d7e" translate="yes" xml:space="preserve">
          <source>This option is an object that expects property names to be AST node types as defined by &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The easiest way to determine the node types for &lt;code&gt;exceptions&lt;/code&gt; is to use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser.</source>
          <target state="translated">このオプションは、プロパティ名が&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTreeで&lt;/a&gt;定義されているASTノードタイプであることを期待するオブジェクトです。 &lt;code&gt;exceptions&lt;/code&gt; のノードタイプを判別する最も簡単な方法は、eSpreeパーサーで&lt;a href=&quot;https://astexplorer.net/&quot;&gt;ASTエクスプローラー&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="159d5bb23b26711ee83d3678da55988d09236463" translate="yes" xml:space="preserve">
          <source>This option is helpful if you are using another program to format your code but you would still like ESLint to apply other types of fixes.</source>
          <target state="translated">このオプションは、他のプログラムを使ってコードをフォーマットしているが、ESLintで他のタイプの修正を適用したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="989aa7bf5f70f7e2a3435a849e6284b29b04f576" translate="yes" xml:space="preserve">
          <source>This option is only applicable when used in conjunction with the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option.</source>
          <target state="translated">このオプションは、 &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; オプションと組み合わせて使用​​した場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="e46b21d025dfd75b6276b72215872d951e5d3ce7" translate="yes" xml:space="preserve">
          <source>This option outputs debugging information to the console. This information is useful when you're seeing a problem and having a hard time pinpointing it. The ESLint team may ask for this debugging information to help solve bugs.</source>
          <target state="translated">このオプションは、デバッグ情報をコンソールに出力します。この情報は問題が発生したときに、それを特定するのに苦労しているときに便利です。ESLint チームはバグを解決するためにこのデバッグ情報を要求することがあります。</target>
        </trans-unit>
        <trans-unit id="85f6c4676d557f8e8848d9f14da2b55b5cf4fe52" translate="yes" xml:space="preserve">
          <source>This option outputs information about the execution environment, including the version of Node, npm, and local and global installations of ESLint. The ESLint team may ask for this information to help solve bugs.</source>
          <target state="translated">このオプションは、Nodeのバージョン、npm、ESLintのローカルおよびグローバルインストールを含む実行環境の情報を出力します。ESLintチームはバグを解決するためにこの情報を要求することがあります。</target>
        </trans-unit>
        <trans-unit id="79b6e22672dda2878136d9153ec178619788c515" translate="yes" xml:space="preserve">
          <source>This option outputs the configuration to be used for the file passed. When present, no linting is performed and only config-related options are valid.</source>
          <target state="translated">このオプションは、渡されたファイルで使用する設定を出力します。このオプションがある場合、リンティングは行われず、設定関連のオプションのみが有効となります。</target>
        </trans-unit>
        <trans-unit id="4561c938534c79e5470a90cddc468484882c9f8a" translate="yes" xml:space="preserve">
          <source>This option outputs the current ESLint version onto the console. All other options are ignored when this is present.</source>
          <target state="translated">このオプションは現在のESLintのバージョンをコンソールに出力します。このオプションがある場合、他のすべてのオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="65771294e9a528c9fae00635bda7f17cf756ffd2" translate="yes" xml:space="preserve">
          <source>This option outputs the help menu, displaying all of the available options. All other options are ignored when this is present.</source>
          <target state="translated">このオプシ ョ ンは、 利用可能なすべてのオプシ ョ ンを表示 し て、 ヘルプ メ ニ ュ ーを出力 し ます。このオプションがある場合、他のすべてのオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="014a955006c294dba1206349cb62b15f2fa55f4b" translate="yes" xml:space="preserve">
          <source>This option prevents errors when a quoted glob pattern or &lt;code&gt;--ext&lt;/code&gt; is unmatched. This will not prevent errors when your shell can't match a glob.</source>
          <target state="translated">このオプションは、引用符で囲まれたグロブパターンまたは &lt;code&gt;--ext&lt;/code&gt; が一致しない場合のエラーを防止します。これは、シェルがグロブと一致しない場合のエラーを防ぎません。</target>
        </trans-unit>
        <trans-unit id="cf662cff85e17bdc6570d9489d7e4f778a8da7a6" translate="yes" xml:space="preserve">
          <source>This option prevents inline comments like &lt;code&gt;/*eslint-disable*/&lt;/code&gt; or &lt;code&gt;/*global foo*/&lt;/code&gt; from having any effect. This allows you to set an ESLint config without files modifying it. All inline config comments are ignored, e.g.:</source>
          <target state="translated">このオプションは、 &lt;code&gt;/*eslint-disable*/&lt;/code&gt; や &lt;code&gt;/*global foo*/&lt;/code&gt; のようなインラインコメントが影響を与えないようにします。これにより、ファイルを変更せずにESLint構成を設定できます。インライン構成コメントはすべて無視されます。例：</target>
        </trans-unit>
        <trans-unit id="09d5ab8aec2ed9eac65dc2e722437afabedfeeda" translate="yes" xml:space="preserve">
          <source>This option specifies a plugin to load. You can omit the prefix &lt;code&gt;eslint-plugin-&lt;/code&gt; from the plugin name.</source>
          <target state="translated">このオプションは、ロードするプラグインを指定します。プラグイン名から接頭辞 &lt;code&gt;eslint-plugin-&lt;/code&gt; を省略できます。</target>
        </trans-unit>
        <trans-unit id="ecc4f96fd72856887578c22e2739205f34b01a7f" translate="yes" xml:space="preserve">
          <source>This option specifies rules to be used. These rules will be merged with any rules specified with configuration files. (You can use &lt;code&gt;--no-eslintrc&lt;/code&gt; to change that behavior.) To define multiple rules, separate them using commas, or use the option multiple times. The &lt;a href=&quot;https://github.com/gkz/levn#levn--&quot;&gt;levn&lt;/a&gt; format is used for specifying the rules.</source>
          <target state="translated">このオプションは、使用するルールを指定します。これらのルールは、構成ファイルで指定されたすべてのルールとマージされます。（その動作を変更するには、 &lt;code&gt;--no-eslintrc&lt;/code&gt; を使用できます。）複数のルールを定義するには、コンマを使用してそれらを区切るか、オプションを複数回使用します。&lt;a href=&quot;https://github.com/gkz/levn#levn--&quot;&gt;levnの&lt;/a&gt;フォーマットルールを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="05912c8c31018cfdeb17e60450fe0d50675682cf" translate="yes" xml:space="preserve">
          <source>This option specifies the output format for the console. Possible formats are:</source>
          <target state="translated">このオプションは、コンソールの出力フォーマットを指定します。可能な形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="38e0c8b514c59731527607b405cb80b1143de6b5" translate="yes" xml:space="preserve">
          <source>This option tells ESLint to read and lint source code from STDIN instead of from files. You can use this to pipe code to ESLint.</source>
          <target state="translated">このオプションは、ESLint がファイルからではなく STDIN からソースコードを読み込んでリントするようにします。これを使ってコードをESLintにパイプすることができます。</target>
        </trans-unit>
        <trans-unit id="eedfdca0c59f3541f1d00d88f1dc3ea700e5c34e" translate="yes" xml:space="preserve">
          <source>This option throws an error when code is piped to ESLint.</source>
          <target state="translated">このオプションは、コードがESLintにパイプされたときにエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="cc2ef91e90fb16bf6596a58b63c2929f9ada53cb" translate="yes" xml:space="preserve">
          <source>This option will start config initialization wizard. It's designed to help new users quickly create .eslintrc file by answering a few questions, choosing a popular style guide, or inspecting your source files and attempting to automatically generate a suitable configuration.</source>
          <target state="translated">このオプションは、設定の初期化ウィザードを開始します。これは、いくつかの質問に答えたり、人気のあるスタイルガイドを選択したり、ソースファイルを検査して適切な設定を自動的に生成しようとしたりすることで、新しいユーザーが素早く.eslintrcファイルを作成するのに役立つように設計されています。</target>
        </trans-unit>
        <trans-unit id="3538e1fc4e1c6f22a20277c44b5ede4d53eb3ec8" translate="yes" xml:space="preserve">
          <source>This produces a different outcome than defining &lt;code&gt;var x = undefined&lt;/code&gt; in the loop, as &lt;code&gt;x&lt;/code&gt; is no longer reset to &lt;code&gt;undefined&lt;/code&gt; each time through the loop.</source>
          <target state="translated">これにより、ループで &lt;code&gt;var x = undefined&lt;/code&gt; 定義する場合とは異なる結果が生成されます。これは、 &lt;code&gt;x&lt;/code&gt; がループを通過するたびに &lt;code&gt;undefined&lt;/code&gt; にリセットされなくなったためです。</target>
        </trans-unit>
        <trans-unit id="24feca745e6bc0163194940d4e596f152f9004dc" translate="yes" xml:space="preserve">
          <source>This rule &lt;em&gt;does not&lt;/em&gt; report any of the following less obvious approaches to modify the prototype of builtin objects:</source>
          <target state="translated">このルール&lt;em&gt;は&lt;/em&gt;、組み込みオブジェクトのプロトタイプを変更するための、以下のそれほど明確でないアプローチを報告&lt;em&gt;しません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6e2c9a67c2f55b28f4688bb17e111a3bc3326b22" translate="yes" xml:space="preserve">
          <source>This rule accepts &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; string as an option. &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; is the same as &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">このルールは、オプションとして &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; 文字列を受け入れます。 &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; は &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true }&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b8239df1c5225b6270e03ba8dacfb109fb9d7ed5" translate="yes" xml:space="preserve">
          <source>This rule accepts a single options argument with the following defaults:</source>
          <target state="translated">このルールは、以下のデフォルト値を持つ単一のオプション引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="28da8e87fba0048902246ac61ce6db8b783253e1" translate="yes" xml:space="preserve">
          <source>This rule accepts a single options argument:</source>
          <target state="translated">このルールは、単一のオプション引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="036f5a811a913e4a7dcd75bca8c0f804ba9473c6" translate="yes" xml:space="preserve">
          <source>This rule accepts a string option:</source>
          <target state="translated">このルールは、文字列オプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="9343f1b69e9de70215bc3d173faca7334f9fc04a" translate="yes" xml:space="preserve">
          <source>This rule accepts an &lt;code&gt;exceptions&lt;/code&gt; option, which can be used to specify a list of builtins for which extensions will be allowed.</source>
          <target state="translated">このルールは、拡張オプションが許可される組み込みのリストを指定するために使用できる &lt;code&gt;exceptions&lt;/code&gt; オプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="2c4f097e6d73193e66a7d59e690145b7eda43865" translate="yes" xml:space="preserve">
          <source>This rule accepts an &lt;code&gt;exceptions&lt;/code&gt; option, which can be used to specify a list of builtins for which reassignments will be allowed:</source>
          <target state="translated">このルールは、再割り当てを許可する組み込みのリストを指定するために使用できる &lt;code&gt;exceptions&lt;/code&gt; オプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5c4d59be86b758fee018aea0cff47e0cb013368c" translate="yes" xml:space="preserve">
          <source>This rule accepts an object with its properties as</source>
          <target state="translated">このルールは、プロパティを持つオブジェクトを</target>
        </trans-unit>
        <trans-unit id="2b8ef0c60ad3557c3f770d7f127c29c889a75bc2" translate="yes" xml:space="preserve">
          <source>This rule aims to bring consistency to variable initializations and declarations.</source>
          <target state="translated">この規則は、変数の初期化と宣言に一貫性を持たせることを目的としています。</target>
        </trans-unit>
        <trans-unit id="fdf2ca3bdb84cdf7771de92d50733bd97f5e3a66" translate="yes" xml:space="preserve">
          <source>This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.</source>
          <target state="translated">このルールは、スコープ内の変数と名前を共有するラベルを作成するという悪習を禁止することで、より明確なコードを作成することを目的としています。</target>
        </trans-unit>
        <trans-unit id="082b8455e1ec0b9e8221bb19258d9bf25d7fc205" translate="yes" xml:space="preserve">
          <source>This rule aims to disallow async Promise executor functions.</source>
          <target state="translated">このルールは、非同期のプロミス実行関数を使用できないようにすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="1ab33d4820af7bc07046f46739d6891755a40cd3" translate="yes" xml:space="preserve">
          <source>This rule aims to disallow multiple whitespace around logical expressions, conditional expressions, declarations, array elements, object properties, sequences and function parameters.</source>
          <target state="translated">この規則は、論理式、条件式、宣言、配列要素、オブジェクトのプロパティ、シーケンス、関数のパラメータの周囲の複数の空白を禁止することを目的としています。</target>
        </trans-unit>
        <trans-unit id="5bdbb4fae36aec73469b0df2d2cfda42e720c8a1" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate assignments from &lt;code&gt;return&lt;/code&gt; statements. As such, it will warn whenever an assignment is found as part of &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;return&lt;/code&gt; ステートメントからの割り当てを排除することを目的としています。そのため、 &lt;code&gt;return&lt;/code&gt; の一部として割り当てが見つかると、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="60c130e79350c186199b9fd520e4228357e4b0c5" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate implied &lt;code&gt;eval()&lt;/code&gt; through the use of &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt;. As such, it will warn when either function is used with a string as the first argument.</source>
          <target state="translated">このルールは、 &lt;code&gt;setTimeout()&lt;/code&gt; 、 &lt;code&gt;setInterval()&lt;/code&gt; 、または &lt;code&gt;execScript()&lt;/code&gt; を使用して暗黙の &lt;code&gt;eval()&lt;/code&gt; を排除することを目的としています。そのため、どちらかの関数が文字列を最初の引数として使用されると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="ee8e3a04c82e7ee5427ed1829b4dacbec3fd6b59" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate shadowed variable declarations.</source>
          <target state="translated">このルールは、シャドウイングされた変数宣言を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="48d4ea04200e208a668599befd84b34f6eb5dfe7" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt; with the &lt;code&gt;new&lt;/code&gt; operator. As such, it warns whenever it sees &lt;code&gt;new String&lt;/code&gt;, &lt;code&gt;new Number&lt;/code&gt;, or &lt;code&gt;new Boolean&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;new&lt;/code&gt; 演算子での &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、および &lt;code&gt;Boolean&lt;/code&gt; の使用を排除することを目的としています。そのため、 &lt;code&gt;new String&lt;/code&gt; 、 &lt;code&gt;new Number&lt;/code&gt; 、または &lt;code&gt;new Boolean&lt;/code&gt; 見つかると警告します。</target>
        </trans-unit>
        <trans-unit id="1ceaffe704a185e71600f586cd092634bbdc428f" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of &lt;code&gt;undefined&lt;/code&gt;, and as such, generates a warning whenever it is used.</source>
          <target state="translated">このルールは、 &lt;code&gt;undefined&lt;/code&gt; の使用を排除することを目的としているため、使用されるたびに警告を生成します。</target>
        </trans-unit>
        <trans-unit id="4a1e90a159c38bcad9dbea6c4a3426a3c8fe82df" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; are used with a label.</source>
          <target state="translated">このルールは、JavaScriptでのラベル付きステートメントの使用を排除することを目的としています。ラベル付きのステートメントが検出されたとき、およびラベルで &lt;code&gt;break&lt;/code&gt; または &lt;code&gt;continue&lt;/code&gt; が使用されたときはいつでも警告します。</target>
        </trans-unit>
        <trans-unit id="fbf95a07c8896cae54c5b32fab00ac676fef5a06" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.</source>
          <target state="translated">このルールは、スクリプトの最上位レベルや他のブロック内の不要で混乱を招く可能性のあるブロックを排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="7428d8b9c63ecd07f513e4d208a88842d2ea4291" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate unused expressions which have no effect on the state of the program.</source>
          <target state="translated">このルールは、プログラムの状態に影響を与えない未使用の式を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="f4592be8513a34c0ee9c31116baf895be639d00d" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate use of the &lt;code&gt;new require&lt;/code&gt; expression.</source>
          <target state="translated">このルールは、 &lt;code&gt;new require&lt;/code&gt; 式の使用を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="5c45676927d70f598783253e0bea435ad66234ed" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate use of void operator.</source>
          <target state="translated">この規則は、void演算子の使用を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="48d1f57364c5256d0ae461b9199819e3a8b9a78b" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate variable declarations that initialize to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;undefined&lt;/code&gt; に初期化される変数宣言を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="fbcce07eac2aa6192b1ddc51290a27b70c2f04eb" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent location for an arrow function containing an implicit return.</source>
          <target state="translated">このルールは、暗黙の戻り値を含む矢印関数の一貫した位置を強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="eb1977fa84b455feda9d85eeaa544101fd9f3fbf" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent location for single-line statements.</source>
          <target state="translated">この規則は、一行ステートメントの一貫した位置を強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="b867f1fa85c3f2e39f5c14f4c8ac390156b6d095" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent spacing after function names. It takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then all function names must be followed by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no spaces between the name and the parameter list. The default is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、関数名の後に一貫した間隔を強制することを目的としています。引数は1つです。それがある場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; そして、すべての関数名は、少なくとも1つのスペースが続かなければなりません。 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、名前とパラメータリストの間にスペースを入れないでください。デフォルトは &lt;code&gt;&quot;never&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e1a6efa92543cd5aa3a3a596f4883486404ece7e" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.</source>
          <target state="translated">このルールは、コードベース全体でコメントの一貫したスタイルを強制することを目的としており、特にコメントの最初の単語として大文字を要求したり禁止したりします。このルールでは、大文字以外の文字が使用された場合には警告を発しません。</target>
        </trans-unit>
        <trans-unit id="e791249ab8dca492c1f2141589f3eb6bc72cf3c8" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a particular style for multiline comments.</source>
          <target state="translated">この規則は、複数行コメントに対して特定のスタイルを強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6262c51d84ae60e80179b10f10d0c494db5871ba" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn't match the preferences specified.</source>
          <target state="translated">このルールは、関数の括弧の前に一貫した間隔を確保することを目的としており、空白が指定された環境設定と一致しない場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="4b6f5f82c41166d5305feac3b424a64f24ec2de7" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent spacing between rest and spread operators and their expressions. The rule also supports object rest and spread properties in ES2018:</source>
          <target state="translated">このルールは、rest および spread 演算子とその式の間の一貫した間隔を強制することを目的としています。また、このルールはES2018でオブジェクトのレストとスプレッドのプロパティをサポートしています。</target>
        </trans-unit>
        <trans-unit id="4f731649e3b7f7e5efcc5565b59ac49bf339b9bd" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent style of conditions which compare a variable to a literal value.</source>
          <target state="translated">この規則は、変数とリテラル値を比較する条件の一貫したスタイルを強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="2b6b2668cbac3cad09e1c9734a8a1441d9917508" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce newline consistency in member expressions. This rule prevents the use of mixed newlines around the dot in a member expression.</source>
          <target state="translated">この規則は、メンバ式での改行の一貫性を強制することを目的としています。このルールは、メンバ式でドットの周りに混在する改行を使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="2cffeea6a2a1e0f1c63e68ad1fed69c744d4cd42" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.</source>
          <target state="translated">この規則は、セミコロンの周りのスペースを強制することを目的としています。この規則は、式でセミコロンの前にスペースを使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="b22c8565bc9c79a0eb4dd976c541072f09cd27cb" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce spacing around the &lt;code&gt;*&lt;/code&gt; of generator functions.</source>
          <target state="translated">このルールは、ジェネレーター関数の &lt;code&gt;*&lt;/code&gt; の周囲にスペースを強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="c6c8cae0c3746b9ee1294846ab4deb169a03fb7e" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce the use of &lt;code&gt;u&lt;/code&gt; flag on regular expressions.</source>
          <target state="translated">このルールは、正規表現での &lt;code&gt;u&lt;/code&gt; フラグの使用を強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="b724413bbc7774cb9e7213cadf0d9d98737efe2e" translate="yes" xml:space="preserve">
          <source>This rule aims to ensure that Promises are only rejected with &lt;code&gt;Error&lt;/code&gt; objects.</source>
          <target state="translated">このルールは、Promiseが &lt;code&gt;Error&lt;/code&gt; オブジェクトでのみ拒否されることを保証することを目的としています。</target>
        </trans-unit>
        <trans-unit id="2d2be7aea466d03ae53aad72ce5fdd33c3645ba7" translate="yes" xml:space="preserve">
          <source>This rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.</source>
          <target state="translated">このルールは、破壊されたオブジェクトや配列内の空のパターンにフラグを立てることを目的としています。</target>
        </trans-unit>
        <trans-unit id="a592c858175b10142eb43e999ebc64a50dcfe373" translate="yes" xml:space="preserve">
          <source>This rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.</source>
          <target state="translated">このルールは、2つのリテラルを連結して1つのリテラルにすることができる場合にフラグを立てることを目的としています。リテラルは文字列かテンプレートリテラルにすることができます。</target>
        </trans-unit>
        <trans-unit id="214fb7b3fd0b5bc6164a95a24b81675437853823" translate="yes" xml:space="preserve">
          <source>This rule aims to flag usage of &lt;code&gt;this&lt;/code&gt; keywords outside of classes or class-like objects.</source>
          <target state="translated">このルールは、クラスまたはクラスのようなオブジェクトの外部での &lt;code&gt;this&lt;/code&gt; キーワードの使用にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="24c3e70e3fae7f58f9b980f59921f130b41ed78b" translate="yes" xml:space="preserve">
          <source>This rule aims to keep all variable declarations in the leading series of statements. Allowing multiple declarations helps promote maintainability and is thus allowed.</source>
          <target state="translated">この規則は、すべての変数宣言をステートメントの先頭の系列に保つことを目的としています。複数の宣言を許可することは、保守性を促進するのに役立ちますので、このように許可されています。</target>
        </trans-unit>
        <trans-unit id="71e5f7302fd24c06c3efb5405b78c57959dcce5f" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing between template tag functions and their template literals.</source>
          <target state="translated">この規則は、テンプレートタグ関数とそのテンプレートリテラル間の間隔の一貫性を維持することを目的としています。</target>
        </trans-unit>
        <trans-unit id="150c5f9e13764b9a65e880ca75d609ec9ecae313" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing inside of square brackets, either by disallowing spaces inside of brackets between the brackets and other tokens or enforcing spaces. Brackets that are separated from the adjacent value by a new line are excepted from this rule, as this is a common pattern. Object literals that are used as the first or last element in an array are also ignored.</source>
          <target state="translated">この規則は、 大括弧と他のトークンとの間の大括弧内のスペースを禁止するか、またはスペースを強制することで、大括弧内の間隔の一貫性を維持することを目的としています。隣接する値から改行で区切られた大括弧は、これが一般的なパターンであるため、この規則からは除外されます。配列の最初または最後の要素として使われるオブジェクトリテラルも無視されます。</target>
        </trans-unit>
        <trans-unit id="36eab5f56c34b2954c3d688b8b69b5773b3b090b" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing inside of template literals.</source>
          <target state="translated">このルールは、テンプレートリテラル内の間隔の一貫性を維持することを目的としています。</target>
        </trans-unit>
        <trans-unit id="30783eb72cfbe7fb69dfa6cec962580e1d72bd33" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent a likely common performance hazard due to a lack of understanding of the semantics of &lt;code&gt;async function&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;async function&lt;/code&gt; セマンティクスを理解していないために発生する可能性のある一般的なパフォーマンスの危険を防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="5e1ef57685846ed4d51c42c899ec1fd92fafeff6" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.</source>
          <target state="translated">この規則は、初期化されていない語彙バインディングへのアクセスや、大文字小文字の節をまたいでのホイスト関数へのアクセスを防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="6e5eb8f772bf314b89f7928efd7b90f261f03737" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent string concatenation of directory paths in Node.js</source>
          <target state="translated">このルールは、Node.js のディレクトリパスの文字列連結を防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="cf1c4fed65963f6d5de090064570d7556a966719" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent the use of &lt;code&gt;process.exit()&lt;/code&gt; in Node.js JavaScript. As such, it warns whenever &lt;code&gt;process.exit()&lt;/code&gt; is found in code.</source>
          <target state="translated">このルールは、Node.js JavaScript での &lt;code&gt;process.exit()&lt;/code&gt; の使用を防ぐことを目的としています。そのため、コード内で &lt;code&gt;process.exit()&lt;/code&gt; が見つかると警告します。</target>
        </trans-unit>
        <trans-unit id="409f6777783015e5d446da7aabb24274cd2af6bc" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.</source>
          <target state="translated">この規則は、関数パラメータの変更や再割り当てによる意図しない動作を防止することを目的としています。</target>
        </trans-unit>
        <trans-unit id="e3d17d4fab4db7dafa21d53edc13a12c25850ade" translate="yes" xml:space="preserve">
          <source>This rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.</source>
          <target state="translated">このルールは、コードを読み進める際に必要なスクロールを減らすことを目的としています。空行の最大量を超えた場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="1f6fbb75638c174bd1e172892eb514a0a34a8d3f" translate="yes" xml:space="preserve">
          <source>This rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.</source>
          <target state="translated">この規則は、バインディングコンテキスト外での変数の使用を減らし、他の言語の伝統的なブロックスコープをエミュレートすることを目的としています。これは、この言語を初めて使う人が、変数の巻き上げによる困難なバグを回避するのを助けるためです。</target>
        </trans-unit>
        <trans-unit id="b539890ebe3260afc1fcb09ef9f086c07d001574" translate="yes" xml:space="preserve">
          <source>This rule aims to report assignments to variables or properties where all of the following are true:</source>
          <target state="translated">このルールは、以下のすべてが真である変数またはプロパティへの代入を報告することを目的としています。</target>
        </trans-unit>
        <trans-unit id="93abe223f86c93c950b6940428eb85c499aebf5e" translate="yes" xml:space="preserve">
          <source>This rule aims to report redundant &lt;code&gt;return&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、冗長な &lt;code&gt;return&lt;/code&gt; ステートメントを報告することを目的としています。</target>
        </trans-unit>
        <trans-unit id="d867bee8c0ef9d1755baf36ec331ce21d92cfc42" translate="yes" xml:space="preserve">
          <source>This rule aims to require &lt;code&gt;default&lt;/code&gt; case in &lt;code&gt;switch&lt;/code&gt; statements. You may optionally include a &lt;code&gt;// no default&lt;/code&gt; after the last &lt;code&gt;case&lt;/code&gt; if there is no &lt;code&gt;default&lt;/code&gt; case. The comment may be in any desired case, such as &lt;code&gt;// No Default&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントで &lt;code&gt;default&lt;/code&gt; ケースを要求することを目的としています。 &lt;code&gt;default&lt;/code&gt; ケースがない &lt;code&gt;case&lt;/code&gt; 、最後のケースの後にオプションで &lt;code&gt;// no default&lt;/code&gt; 含めることができます。コメントは、 &lt;code&gt;// No Default&lt;/code&gt; など、必要な場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="9d516ffc4d6d0f8cdf67c20a1d6d200eecd43071" translate="yes" xml:space="preserve">
          <source>This rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal placeholder (&lt;code&gt;${something}&lt;/code&gt;) that uses either &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; for the quotes.</source>
          <target state="translated">このルールは、通常の文字列にテンプレートリテラルプレースホルダーのように見えるものが含まれている場合に警告することを目的としています。引用符に &lt;code&gt;&quot;&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; を使用するテンプレートリテラルプレースホルダー（ &lt;code&gt;${something}&lt;/code&gt; ）を含む文字列が見つかると警告します。</target>
        </trans-unit>
        <trans-unit id="d19a577c19b7a34026fabd0b591e6e9b824b7cea" translate="yes" xml:space="preserve">
          <source>This rule allows for more fine-grained control with the following options:</source>
          <target state="translated">このルールでは、以下のオプションでより細かい制御が可能になります。</target>
        </trans-unit>
        <trans-unit id="f0c570d2beef2d1b384161fc0c0365ad5078f12d" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify global variable names that you don't want to use in your application.</source>
          <target state="translated">このルールでは、アプリケーションで使用したくないグローバル変数名を指定することができます。</target>
        </trans-unit>
        <trans-unit id="1581ab10c7b99d0115b10189be184f7f111ada69" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify imports that you don't want to use in your application.</source>
          <target state="translated">このルールでは、アプリケーションで使用したくないインポートを指定することができます。</target>
        </trans-unit>
        <trans-unit id="223ddf28af7da49a479aa6ebab902a45d421b7b1" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify modules that you don&amp;rsquo;t want to use in your application.</source>
          <target state="translated">このルールにより、アプリケーションで使用したくないモジュールを指定できます。</target>
        </trans-unit>
        <trans-unit id="4008a4cdc8168bfe31edc5e762d717e7f1530720" translate="yes" xml:space="preserve">
          <source>This rule also accepts an additional &lt;code&gt;exceptions&lt;/code&gt; object:</source>
          <target state="translated">このルールは、追加の &lt;code&gt;exceptions&lt;/code&gt; オブジェクトも受け入れます。</target>
        </trans-unit>
        <trans-unit id="7455ce82eafb5ac293e4c9c4e5d678aaa1247cb6" translate="yes" xml:space="preserve">
          <source>This rule also disallows redeclarations of read-only global variables and assigments to read-only global variables.</source>
          <target state="translated">このルールでは、読み取り専用のグローバル変数の再宣言や読み取り専用のグローバル変数への代入も禁止されています。</target>
        </trans-unit>
        <trans-unit id="8debc519e6ab3a215045f322d1aa6bee8909f42e" translate="yes" xml:space="preserve">
          <source>This rule also disallows the use of the &lt;code&gt;RegExp&lt;/code&gt; constructor function with template literals without expressions and &lt;code&gt;String.raw&lt;/code&gt; tagged template literals without expressions.</source>
          <target state="translated">このルールは、式のないテンプレートリテラルおよび式のない &lt;code&gt;String.raw&lt;/code&gt; タグ付きテンプレートリテラルでの &lt;code&gt;RegExp&lt;/code&gt; コンストラクター関数の使用も禁止します。</target>
        </trans-unit>
        <trans-unit id="ff184a54582c14a5cd4c91bd6524497a01429bba" translate="yes" xml:space="preserve">
          <source>This rule also does not disallow redeclarations of global variables. See &lt;a href=&quot;no-redeclare&quot;&gt;no-redeclare&lt;/a&gt; if you also want to disallow those redeclarations.</source>
          <target state="translated">このルールでは、グローバル変数の再宣言も禁止されていません。これらの再宣言も禁止する場合は、&lt;a href=&quot;no-redeclare&quot;&gt;no-redeclareを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="379f7d883e132f615627eab94e7212c5b2fb0fc7" translate="yes" xml:space="preserve">
          <source>This rule always ignores extra parentheses around the following:</source>
          <target state="translated">このルールでは、以下の周りの余分な括弧は常に無視されます。</target>
        </trans-unit>
        <trans-unit id="5ecf4c66ad5afb41dab6fa8f725a959d53498d0b" translate="yes" xml:space="preserve">
          <source>This rule analyzes code statically to check whether or not the &lt;code&gt;this&lt;/code&gt; argument is changed. So, if the &lt;code&gt;this&lt;/code&gt; argument is computed in a dynamic expression, this rule cannot detect a violation.</source>
          <target state="translated">このルールはコードを静的に分析して、 &lt;code&gt;this&lt;/code&gt; 引数が変更されているかどうかを確認します。したがって、 &lt;code&gt;this&lt;/code&gt; 引数が動的な式で計算される場合、このルールは違反を検出できません。</target>
        </trans-unit>
        <trans-unit id="6772ffa8e5405f66988ea470070e631ecb94f272" translate="yes" xml:space="preserve">
          <source>This rule applies &lt;strong&gt;only&lt;/strong&gt; in strict mode. With &lt;code&gt;&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }&lt;/code&gt; in the ESLint configuration, your code is in strict mode even without a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive.</source>
          <target state="translated">このルールは、厳密モードで&lt;strong&gt;のみ&lt;/strong&gt;適用されます。 &lt;code&gt;&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }&lt;/code&gt; ESLint構成で、コードもなしに厳密モードである &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="42e1226e4e68a477056e8578613cfc2481a8ae2b" translate="yes" xml:space="preserve">
          <source>This rule applies equally to all property specifications, regardless of notation, including:</source>
          <target state="translated">この規則は、表記に関係なく、すべてのプロパティの仕様に等しく適用されます。</target>
        </trans-unit>
        <trans-unit id="fb5fdaa6a9ac15d93f4b4688421cd1224351eea5" translate="yes" xml:space="preserve">
          <source>This rule can also detect some cases where the conditions are not identical, but the branch can never execute due to the logic of &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators.</source>
          <target state="translated">このルールは、条件が同一でない一部のケースも検出できますが、 &lt;code&gt;||&lt;/code&gt; のロジックのため、ブランチは実行できません。および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子。</target>
        </trans-unit>
        <trans-unit id="1dd21d49f84a0e870fa7e592ae681de4ba00ad77" translate="yes" xml:space="preserve">
          <source>This rule can also take a 2nd option, an object with any of the following keys: &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; and &lt;code&gt;&quot;markers&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、2番目のオプション、 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; と &lt;code&gt;&quot;markers&quot;&lt;/code&gt; いずれかのキーを持つオブジェクトを取ることもできます。</target>
        </trans-unit>
        <trans-unit id="47163ca8b37e69af3ca7c7a8ac2331145d34d560" translate="yes" xml:space="preserve">
          <source>This rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.</source>
          <target state="translated">このルールは、関数のパラメータが変更されたときに失敗するように設定することもできます。パラメータに副作用があると、直感に反する実行フローが発生し、エラーの追跡が困難になることがあります。</target>
        </trans-unit>
        <trans-unit id="6917cbcfe667e9bff37ed7e0213d14fa5f09907e" translate="yes" xml:space="preserve">
          <source>This rule can be disabled if you do not care about the grammatical style of comments in your codebase.</source>
          <target state="translated">このルールは、コードベースのコメントの文法的なスタイルを気にしない場合に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c86802043e5a42d0c87e5c400fd976b6b831fe79" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow parentheses when invoking a constructor with no arguments using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">このルールは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して引数なしでコンストラクターを呼び出すときに、括弧を強制または禁止できます。</target>
        </trans-unit>
        <trans-unit id="fab043e44497127c421694342c9535fb8be7bb47" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow the use of braces around arrow function body.</source>
          <target state="translated">この規則は、矢印関数本体の周りの中括弧の使用を強制したり、禁止したりすることができます。</target>
        </trans-unit>
        <trans-unit id="04625714952245a68d2406a7a314170f11304da3" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow the use of named function expressions.</source>
          <target state="translated">このルールは、名前付き関数式の使用を強制したり、禁止したりすることができます。</target>
        </trans-unit>
        <trans-unit id="c5ec60f85149782200572716052f0148287ff833" translate="yes" xml:space="preserve">
          <source>This rule can force usage of spacing &lt;em&gt;within&lt;/em&gt; the curly brace pair according to style guides.</source>
          <target state="translated">このルールは、スタイルガイドに従って、中括弧ペア&lt;em&gt;内&lt;/em&gt;の間隔の使用を強制できます。</target>
        </trans-unit>
        <trans-unit id="5044b90d330e4e48276fdf6f62933ee1db236245" translate="yes" xml:space="preserve">
          <source>This rule can have an object literal option whose two properties have &lt;code&gt;false&lt;/code&gt; values by default.</source>
          <target state="translated">このルールには、2つのプロパティがデフォルトで &lt;code&gt;false&lt;/code&gt; 値を持つオブジェクトリテラルオプションを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a683a6bea35295324d7b11ea6967959e557b903b" translate="yes" xml:space="preserve">
          <source>This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the &lt;code&gt;var&lt;/code&gt; keyword in a &lt;code&gt;for&lt;/code&gt; loop initializer).</source>
          <target state="translated">このルールは、変数名やパラメーター名のスペルミス、または偶発的な暗黙的グローバル（たとえば、 &lt;code&gt;for&lt;/code&gt; ループ初期化子での &lt;code&gt;var&lt;/code&gt; キーワードの忘れ）に起因する潜在的なReferenceErrorsを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0e588784adf09e4f19f68f57898d33838bc7a949" translate="yes" xml:space="preserve">
          <source>This rule can safely be turned off if your project does not care about enforcing a consistent comma style.</source>
          <target state="translated">プロジェクトが一貫したカンマスタイルの適用を気にしない場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="319f5e934b81217bc9c29599abc76f7283906fd1" translate="yes" xml:space="preserve">
          <source>This rule can safely be turned off if your project does not care about enforcing a consistent style for spacing within function calls.</source>
          <target state="translated">プロジェクトが関数呼び出し内のスペーシングの一貫したスタイルを適用することを気にしない場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="83ca1852fd5b5577b23f89ba764e415c41463351" translate="yes" xml:space="preserve">
          <source>This rule can take a string option:</source>
          <target state="translated">このルールは文字列オプションを取ることができます。</target>
        </trans-unit>
        <trans-unit id="8d302b0d1a764b90336232c3d99344f4fdc595cc" translate="yes" xml:space="preserve">
          <source>This rule cannot catch renaming the global object. Such as:</source>
          <target state="translated">このルールでは、グローバルオブジェクトの名前を変更することはできません。例えば</target>
        </trans-unit>
        <trans-unit id="b042ff6c22a4f912b8710d8d89d471d2c64a9753" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;BinaryExpression&lt;/code&gt;, &lt;code&gt;LogicalExpression&lt;/code&gt; and &lt;code&gt;ConditionalExpression&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;BinaryExpression&lt;/code&gt; 、 &lt;code&gt;LogicalExpression&lt;/code&gt; 、および &lt;code&gt;ConditionalExpression&lt;/code&gt; をチェックします。</target>
        </trans-unit>
        <trans-unit id="552d53bde16bdfdc088eecfad939881ac483a06e" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; keywords in constructors, then reports those that are before &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">このルールは、コンストラクターの &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; キーワードをチェックしてから、 &lt;code&gt;super()&lt;/code&gt; の前にあるものを報告します。</target>
        </trans-unit>
        <trans-unit id="aa2a356daedef6b25dafdb09f404f4d9d7c534d7" translate="yes" xml:space="preserve">
          <source>This rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.</source>
          <target state="translated">このルールは、すべてのインポート宣言をチェックし、すべてのインポートが最初に使用されるメンバーの構文でソートされ、次に最初のメンバーまたはエイリアス名でアルファベット順にソートされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="6681e24fe3cd4462b2847bf209c235fc7c6d321d" translate="yes" xml:space="preserve">
          <source>This rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.</source>
          <target state="translated">このルールは、オブジェクト式のすべてのプロパティ定義をチェックし、すべての変数がアルファベット順にソートされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="53d282e2a6aaf0156f34e994a7a84c5ab9a8a2e9" translate="yes" xml:space="preserve">
          <source>This rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically. The default configuration of the rule is case-sensitive.</source>
          <target state="translated">このルールは、すべての変数宣言ブロックをチェックし、すべての変数がアルファベット順にソートされていることを確認します。ルールのデフォルトの設定は、大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="8a9d030c6f262c0eb05f86406da9ee712e2a4036" translate="yes" xml:space="preserve">
          <source>This rule checks callback functions of methods with the given names, &lt;em&gt;even if&lt;/em&gt; the object which has the method is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">このルールは、メソッドを持つオブジェクトが配列で&lt;em&gt;ない&lt;/em&gt;&lt;em&gt;場合でも&lt;/em&gt;、指定された名前のメソッドのコールバック関数をチェックします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="811ae4bbbf023aea470d76c49787ebc765fdeff0" translate="yes" xml:space="preserve">
          <source>This rule checks setters in:</source>
          <target state="translated">このルールでは、セッターをチェックします。</target>
        </trans-unit>
        <trans-unit id="d7892d555202afc91fa47f11f40a615394d6c548" translate="yes" xml:space="preserve">
          <source>This rule checks whether or not there is a valid &lt;code&gt;super()&lt;/code&gt; call.</source>
          <target state="translated">このルールは、有効な &lt;code&gt;super()&lt;/code&gt; 呼び出しがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="54a78dbb7a9691a20f2fe781235eea5e6e80464a" translate="yes" xml:space="preserve">
          <source>This rule compares code statically to check whether or not &lt;code&gt;thisArg&lt;/code&gt; is changed. So if the code about &lt;code&gt;thisArg&lt;/code&gt; is a dynamic expression, this rule cannot judge correctly.</source>
          <target state="translated">このルールは、コードを静的に比較して、 &lt;code&gt;thisArg&lt;/code&gt; が変更されているかどうかを確認します。したがって、 &lt;code&gt;thisArg&lt;/code&gt; に関するコードが動的な式である場合、このルールは正しく判断できません。</target>
        </trans-unit>
        <trans-unit id="d720df68abbde6371ccb336cb5b04c0b024bfcbe" translate="yes" xml:space="preserve">
          <source>This rule controls spacing around colons of &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; clauses in &lt;code&gt;switch&lt;/code&gt; statements. This rule does the check only if the consecutive tokens exist on the same line.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;case&lt;/code&gt; と &lt;code&gt;default&lt;/code&gt; 句のコロンの周りの間隔を制御します。このルールは、連続するトークンが同じ行に存在する場合にのみチェックを行います。</target>
        </trans-unit>
        <trans-unit id="b65c5e0660507bcb1cbffa479d53cf9ef3130bb7" translate="yes" xml:space="preserve">
          <source>This rule disallow ternary operators when simpler alternatives exist.</source>
          <target state="translated">この規則は、より単純な代替案が存在する場合には、三項演算子を許可しません。</target>
        </trans-unit>
        <trans-unit id="66c64e243d9c8b7f3d32d22b51791322b59152e1" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;Array&lt;/code&gt; constructors.</source>
          <target state="translated">このルールは、 &lt;code&gt;Array&lt;/code&gt; コンストラクターを許可しません。</target>
        </trans-unit>
        <trans-unit id="2d7b39e2d83b5189ce3fccae2add0fbca28323bd" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;Object&lt;/code&gt; constructors.</source>
          <target state="translated">このルールは、 &lt;code&gt;Object&lt;/code&gt; コンストラクターを許可しません。</target>
        </trans-unit>
        <trans-unit id="ba886c3768e8d461d7e6410ed45538405491259c" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;continue&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;continue&lt;/code&gt; ステートメントを許可しません。</target>
        </trans-unit>
        <trans-unit id="28e2d778ae331adafff9240ccbc8541573b702e3" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;debugger&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;debugger&lt;/code&gt; ステートメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="77ecd18c853e79ca97242bc0e014a3d48e6bd0bf" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;if&lt;/code&gt; statements as the only statement in &lt;code&gt;else&lt;/code&gt; blocks.</source>
          <target state="translated">このルールでは、 &lt;code&gt;if&lt;/code&gt; ステートメントが &lt;code&gt;else&lt;/code&gt; ブロック内の唯一のステートメントとして許可されません。</target>
        </trans-unit>
        <trans-unit id="8b411438723201d602af01f2fac9be049875e964" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; statements inside &lt;code&gt;finally&lt;/code&gt; blocks. It allows indirect usages, such as in &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; definitions.</source>
          <target state="translated">このルールは、 &lt;code&gt;finally&lt;/code&gt; ブロック内の &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、および &lt;code&gt;continue&lt;/code&gt; ステートメントを許可しません。 &lt;code&gt;function&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; 定義など、間接的に使用できます。</target>
        </trans-unit>
        <trans-unit id="aa3287e2e1ed725bd09a2a525b1226c93b3ee9a9" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.</source>
          <target state="translated">このルールは、トップレベルのスクリプトスコープでの &lt;code&gt;var&lt;/code&gt; および &lt;code&gt;function&lt;/code&gt; 宣言を禁止します。ESおよびCommonJSモジュールにはモジュールスコープがあるため、これは適用されません。</target>
        </trans-unit>
        <trans-unit id="0accaadfc826cb02b40dc54ab44d8ca54d788318" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;with&lt;/code&gt; statements.</source>
          <target state="translated">このルールは &lt;code&gt;with&lt;/code&gt; ステートメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="d0816a4406a52dfe53dd2f26aaa6a218737e2e84" translate="yes" xml:space="preserve">
          <source>This rule disallows ambiguous assignment operators in test conditions of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;do...while&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、および &lt;code&gt;do...while&lt;/code&gt; ステートメントのテスト条件でのあいまいな代入演算子を許可しません。</target>
        </trans-unit>
        <trans-unit id="8677bdc954fa1f2eeec9ca7775cb8ed54d1de3dd" translate="yes" xml:space="preserve">
          <source>This rule disallows any function within a loop that contains unsafe references (e.g. to modified variables from the outer scope).</source>
          <target state="translated">このルールは、ループ内の関数で安全でない参照(外部スコープからの変更された変数への参照など)を含むものはすべて無効にします。</target>
        </trans-unit>
        <trans-unit id="757cbcf1d8da92458af55b0e8fce5ca71f270395" translate="yes" xml:space="preserve">
          <source>This rule disallows bitwise operators.</source>
          <target state="translated">この規則では、ビット演算子を無効にします。</target>
        </trans-unit>
        <trans-unit id="2ba2e62f9853d2df763ddb95470409d3d5dadb00" translate="yes" xml:space="preserve">
          <source>This rule disallows calling and constructing the &lt;code&gt;Buffer()&lt;/code&gt; constructor.</source>
          <target state="translated">このルールは、 &lt;code&gt;Buffer()&lt;/code&gt; コンストラクターの呼び出しと構築を禁止します。</target>
        </trans-unit>
        <trans-unit id="d28eb4a3b01fbca8d586fe789a603987455b25ef" translate="yes" xml:space="preserve">
          <source>This rule disallows calling some &lt;code&gt;Object.prototype&lt;/code&gt; methods directly on object instances.</source>
          <target state="translated">このルールでは、オブジェクトインスタンスで直接一部の &lt;code&gt;Object.prototype&lt;/code&gt; メソッドを呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="a65487f41b142bfc3ef920b6e2e939a9693a4060" translate="yes" xml:space="preserve">
          <source>This rule disallows calling the &lt;code&gt;Math&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;Reflect&lt;/code&gt; and &lt;code&gt;Atomics&lt;/code&gt; objects as functions.</source>
          <target state="translated">このルールでは、 &lt;code&gt;Math&lt;/code&gt; 、 &lt;code&gt;JSON&lt;/code&gt; 、 &lt;code&gt;Reflect&lt;/code&gt; および &lt;code&gt;Atomics&lt;/code&gt; オブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="66519fe1823542f5bbdaf98053217a17d3a936db" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to &lt;code&gt;Math.pow&lt;/code&gt; and suggests using the &lt;code&gt;**&lt;/code&gt; operator instead.</source>
          <target state="translated">このルールは、 &lt;code&gt;Math.pow&lt;/code&gt; の呼び出しを禁止し、代わりに &lt;code&gt;**&lt;/code&gt; 演算子の使用を提案します。</target>
        </trans-unit>
        <trans-unit id="453af8a6b147940c91cf3d0f0f14518fdb22e680" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt; if called with two arguments: a string; and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).</source>
          <target state="translated">このルールは、2つの引数を指定して呼び出された場合、 &lt;code&gt;parseInt()&lt;/code&gt; または &lt;code&gt;Number.parseInt()&lt;/code&gt; の呼び出しを許可しません。2（バイナリ）、8（8進数）、または16（16進数）の基数オプション。</target>
        </trans-unit>
        <trans-unit id="7c11518d5e9e53024b9db23ee18938c322abe1b8" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to methods of the &lt;code&gt;console&lt;/code&gt; object.</source>
          <target state="translated">このルールは、 &lt;code&gt;console&lt;/code&gt; オブジェクトのメソッドの呼び出しを禁止します。</target>
        </trans-unit>
        <trans-unit id="d9bf728f0d60d2ad1835867b881b066d84cc1a83" translate="yes" xml:space="preserve">
          <source>This rule disallows comments on the same line as code.</source>
          <target state="translated">このルールは、コードと同じ行のコメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="38acad92db5b12384568aaa44ce71bc077d91438" translate="yes" xml:space="preserve">
          <source>This rule disallows comparisons to 'NaN'.</source>
          <target state="translated">このルールでは、「NaN」との比較はできません。</target>
        </trans-unit>
        <trans-unit id="6722af39ecadc9275de7d7950f1755fc3e1dc8a8" translate="yes" xml:space="preserve">
          <source>This rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.</source>
          <target state="translated">このルールは、改行が文の最後にあるように見えても、そうではない場合に、混乱を招く複数行の式を無効にします。</target>
        </trans-unit>
        <trans-unit id="258e15022990886cfb026d905dee4f4fa111f95d" translate="yes" xml:space="preserve">
          <source>This rule disallows constant expressions in the test condition of:</source>
          <target state="translated">のテスト条件での定数式の使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="dd02e357765e8264ac8375fa6dba2d3a0f5d12e6" translate="yes" xml:space="preserve">
          <source>This rule disallows control characters in regular expressions.</source>
          <target state="translated">この規則は、正規表現での制御文字を無効にします。</target>
        </trans-unit>
        <trans-unit id="d97267969958c3f085ea967e53b75c11c0399d94" translate="yes" xml:space="preserve">
          <source>This rule disallows dangling underscores in identifiers.</source>
          <target state="translated">このルールでは、識別子にアンダースコアがぶら下がることを禁止します。</target>
        </trans-unit>
        <trans-unit id="9d7d30df17bc6a3759d4ec6107bf1a14e2331472" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate conditions in the same &lt;code&gt;if-else-if&lt;/code&gt; chain.</source>
          <target state="translated">このルールは、同じ &lt;code&gt;if-else-if&lt;/code&gt; チェーンでの重複した条件を許可しません。</target>
        </trans-unit>
        <trans-unit id="669e6f096d22a6e0869257835432438a35f77244" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate keys in object literals.</source>
          <target state="translated">このルールは、オブジェクトリテラル内のキーの重複を禁止します。</target>
        </trans-unit>
        <trans-unit id="7636a3a8325f2f3b942229d4314412e8c9fe4000" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.</source>
          <target state="translated">このルールは、関数の宣言または式でのパラメータ名の重複を禁止します。パーサがエラーを報告するため、矢印関数やクラスメソッドには適用されません。</target>
        </trans-unit>
        <trans-unit id="6c9a23985ede32b78311a6130f5daa7b5a0e5c70" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate test expressions in &lt;code&gt;case&lt;/code&gt; clauses of &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;case&lt;/code&gt; 節でのテスト式の重複を許可しません。</target>
        </trans-unit>
        <trans-unit id="11a8595e3b7ff0becb4aa44a6f814356743892d7" translate="yes" xml:space="preserve">
          <source>This rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty &lt;code&gt;catch&lt;/code&gt; or &lt;code&gt;finally&lt;/code&gt; block of a &lt;code&gt;try&lt;/code&gt; statement to indicate that execution should continue regardless of errors).</source>
          <target state="translated">このルールは、空のブロックステートメントを許可しません。このルールは、コメントを含むブロックステートメントを無視します（たとえば、空の &lt;code&gt;catch&lt;/code&gt; 内、または &lt;code&gt;try&lt;/code&gt; ステートメントの &lt;code&gt;finally&lt;/code&gt; ブロック内で、エラーに関係なく実行を継続する必要があることを示します）。</target>
        </trans-unit>
        <trans-unit id="2d86de4594606a9cd31df77cbc4cb951b0fa98e7" translate="yes" xml:space="preserve">
          <source>This rule disallows empty character classes in regular expressions.</source>
          <target state="translated">この規則は、正規表現での空の文字クラスを無効にします。</target>
        </trans-unit>
        <trans-unit id="694dfe25fef30c26f5a1d76ea280c630e2f2d505" translate="yes" xml:space="preserve">
          <source>This rule disallows invalid regular expression strings in &lt;code&gt;RegExp&lt;/code&gt; constructors.</source>
          <target state="translated">このルールは、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターで無効な正規表現文字列を許可しません。</target>
        </trans-unit>
        <trans-unit id="5714adb7d09b1a0bd6d25baa62df73e6d30886dd" translate="yes" xml:space="preserve">
          <source>This rule disallows lexical declarations (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) in &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses. The reason is that the lexical declaration is visible in the entire switch block but it only gets initialized when it is assigned, which will only happen if the case where it is defined is reached.</source>
          <target state="translated">このルールは、 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 句での字句宣言（ &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; および &lt;code&gt;class&lt;/code&gt; ）を許可しません。その理由は、字句宣言はスイッチブロック全体で表示されますが、割り当てられたときにのみ初期化されます。これは、定義されているケースに達した場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="cba35921de730b64544fac2a4ad17c9226505407" translate="yes" xml:space="preserve">
          <source>This rule disallows mixed spaces and tabs for indentation.</source>
          <target state="translated">この規則では、インデントのためのスペースとタブの混在を禁止しています。</target>
        </trans-unit>
        <trans-unit id="3cfcfa6c88ec162c7f3d854aa2225d063abfb9d3" translate="yes" xml:space="preserve">
          <source>This rule disallows modifications to read-only global variables.</source>
          <target state="translated">このルールは、読み取り専用のグローバル変数の変更を禁止します。</target>
        </trans-unit>
        <trans-unit id="4703c528be92a0741324e06b06061b7ee7cce8b0" translate="yes" xml:space="preserve">
          <source>This rule disallows multiple spaces in regular expression literals.</source>
          <target state="translated">このルールは、正規表現リテラル内の複数のスペースを禁止します。</target>
        </trans-unit>
        <trans-unit id="a1a3b7b955c9a74f52aa8e49d111ff25d49f9646" translate="yes" xml:space="preserve">
          <source>This rule disallows negated conditions in either of the following:</source>
          <target state="translated">この規則は、以下のいずれかの否定条件を無効にします。</target>
        </trans-unit>
        <trans-unit id="2f9f8d13d0c314cf76143475b6613aba5359fcaa" translate="yes" xml:space="preserve">
          <source>This rule disallows negating the left operand in &lt;code&gt;in&lt;/code&gt; expressions.</source>
          <target state="translated">このルールで &lt;code&gt;in&lt;/code&gt; 式内の左のオペランドを否定することはできません。</target>
        </trans-unit>
        <trans-unit id="2c4f50e13ddde727f6bc3fd3a0d4f4a043473808" translate="yes" xml:space="preserve">
          <source>This rule disallows negating the left operand of the following relational operators:</source>
          <target state="translated">この規則は、以下の関係演算子の左オペランドを否定することを禁止します。</target>
        </trans-unit>
        <trans-unit id="740b99aac0bd437017d6910a9ae782e1f9212ca6" translate="yes" xml:space="preserve">
          <source>This rule disallows octal escape sequences in string literals.</source>
          <target state="translated">このルールは、文字列リテラル内の8進数エスケープシーケンスを無効にします。</target>
        </trans-unit>
        <trans-unit id="4bcfc1a7a7b96bced57ff984ffc562561897447d" translate="yes" xml:space="preserve">
          <source>This rule disallows reassigning &lt;code&gt;function&lt;/code&gt; declarations.</source>
          <target state="translated">このルールは、 &lt;code&gt;function&lt;/code&gt; 宣言の再割り当てを禁止します。</target>
        </trans-unit>
        <trans-unit id="c91a55b890383ea5bda5e176f1ddc75d172d67fc" translate="yes" xml:space="preserve">
          <source>This rule disallows reassigning exceptions in &lt;code&gt;catch&lt;/code&gt; clauses.</source>
          <target state="translated">このルールは、 &lt;code&gt;catch&lt;/code&gt; 句での例外の再割り当てを禁止します。</target>
        </trans-unit>
        <trans-unit id="78996379b2829ba6163762ae3d6f36e1875d3851" translate="yes" xml:space="preserve">
          <source>This rule disallows return statements in the constructor of a class. Note that returning nothing with flow control is allowed.</source>
          <target state="translated">このルールでは、クラスのコンストラクタでのリターン・ステートメントを禁止します。フロー制御では何も返さないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a4bc5ad478a3d1d339c1f1e60883a910aec68e9f" translate="yes" xml:space="preserve">
          <source>This rule disallows returning values from setters and reports &lt;code&gt;return&lt;/code&gt; statements in setter functions.</source>
          <target state="translated">このルールは、セッターからの戻り値を許可せず、セッター関数の &lt;code&gt;return&lt;/code&gt; ステートメントを報告します。</target>
        </trans-unit>
        <trans-unit id="12bb6672210db1555632eb13b90c2f0873ddab24" translate="yes" xml:space="preserve">
          <source>This rule disallows spacing between function identifiers and their applications.</source>
          <target state="translated">このルールでは、関数識別子とそのアプリケーション間の間隔を空けないようにします。</target>
        </trans-unit>
        <trans-unit id="21051882fd62b760206518e138fc00d233c6d34d" translate="yes" xml:space="preserve">
          <source>This rule disallows sparse array literals which have &quot;holes&quot; where commas are not preceded by elements. It does not apply to a trailing comma following the last element.</source>
          <target state="translated">このルールは、カンマが要素の前にない「穴」を持つ疎な配列リテラルを無効にします。これは、最後の要素の後に続くカンマには適用されません。</target>
        </trans-unit>
        <trans-unit id="3e0f2dd02ecc28b0aedee1775ef621f78fda1928" translate="yes" xml:space="preserve">
          <source>This rule disallows specified (that is, user-defined) syntax.</source>
          <target state="translated">このルールは、指定された (つまりユーザー定義の)構文を無効にします。</target>
        </trans-unit>
        <trans-unit id="63c9ec1dc80420a119d382ef172cf2b9504b6a24" translate="yes" xml:space="preserve">
          <source>This rule disallows specified identifiers in assignments and &lt;code&gt;function&lt;/code&gt; definitions.</source>
          <target state="translated">このルールは、割り当ておよび &lt;code&gt;function&lt;/code&gt; 定義で指定された識別子を許可しません。</target>
        </trans-unit>
        <trans-unit id="1d519e0d0176940478dbf4f9f334aba740ff368c" translate="yes" xml:space="preserve">
          <source>This rule disallows strict mode directives, no matter which option is specified, if ESLint configuration specifies either of the following as &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;parser options&lt;/a&gt;:</source>
          <target state="translated">ESLint構成が&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;パーサーオプション&lt;/a&gt;として次のいずれかを指定している場合、このルールは、どのオプションが指定されていても、厳密モードディレクティブを許可しません。</target>
        </trans-unit>
        <trans-unit id="1a70b94ae9b04895e4ea44427ce5ab6dcdea44b0" translate="yes" xml:space="preserve">
          <source>This rule disallows strict mode directives, no matter which option is specified, in functions with non-simple parameter lists (for example, parameter lists with default parameter values) because that is a syntax error in &lt;strong&gt;ECMAScript 2016&lt;/strong&gt; and later. See the examples of the &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt; option.</source>
          <target state="translated">このルールは、&lt;strong&gt;ECMAScript 2016&lt;/strong&gt;以降の構文エラーであるため、単純なパラメーターリスト（たとえば、デフォルトのパラメーター値を持つパラメーターリスト）を持つ関数では、どのオプションが指定されていても、厳密モードディレクティブを許可しません。&lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt;オプションの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="0cdffcec301f66189ef3b947a2a41598b9b0919b" translate="yes" xml:space="preserve">
          <source>This rule disallows ternary operators.</source>
          <target state="translated">この規則は三項演算子を禁止します。</target>
        </trans-unit>
        <trans-unit id="83d62ca0b0fcaa5de115aa302c9698e355c71269" translate="yes" xml:space="preserve">
          <source>This rule disallows the following characters except where the options allow:</source>
          <target state="translated">このルールでは、オプションで許可されている場合を除き、以下の文字を禁止します。</target>
        </trans-unit>
        <trans-unit id="7fe71ef647822616e6e09c0fbddfc5ff073d456e" translate="yes" xml:space="preserve">
          <source>This rule disallows the following:</source>
          <target state="translated">このルールでは、以下のことを禁止しています。</target>
        </trans-unit>
        <trans-unit id="96600cfbb07e22bbb8ea489b40ead855d9df0a5e" translate="yes" xml:space="preserve">
          <source>This rule disallows the renaming of import, export, and destructured assignments to the same name.</source>
          <target state="translated">このルールは、インポート、エクスポート、および破壊された代入の名前を同じ名前に変更することを禁止します。</target>
        </trans-unit>
        <trans-unit id="150e05b85ffac58a6b096426b18dc0b52ef5c458" translate="yes" xml:space="preserve">
          <source>This rule disallows the unary operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">この規則は、単項演算子 &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt; 許可しません。</target>
        </trans-unit>
        <trans-unit id="2bb380ce8cb89a6cae85669483c509be1106c5e2" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of &lt;code&gt;await&lt;/code&gt; within loop bodies.</source>
          <target state="translated">このルールでは、ループ本体内で &lt;code&gt;await&lt;/code&gt; を使用できません。</target>
        </trans-unit>
        <trans-unit id="a9f30ad1084b430f3c2c865d41a7bfcba40d9b5c" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of the &lt;code&gt;RegExp&lt;/code&gt; constructor function with string literals as its arguments.</source>
          <target state="translated">このルールは、文字列リテラルを引数として使用する &lt;code&gt;RegExp&lt;/code&gt; コンストラクター関数の使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="63d0dd8fef754a025cbe22a509125657519bf520" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of the &lt;code&gt;delete&lt;/code&gt; operator on variables.</source>
          <target state="translated">このルールは、変数での &lt;code&gt;delete&lt;/code&gt; 演算子の使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="263c02405afaf24815681f5c6d01741fdc2585e9" translate="yes" xml:space="preserve">
          <source>This rule disallows trailing whitespace (spaces, tabs, and other Unicode whitespace characters) at the end of lines.</source>
          <target state="translated">この規則は、行末にある末尾の空白 (スペース ・ タブ ・ その他の Unicode 空白キ ャ ラ ク タ)を無効に し ます。</target>
        </trans-unit>
        <trans-unit id="a7a7d428483dbf516170f0e6ac300fb053cdd144" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary boolean casts.</source>
          <target state="translated">このルールは、不要なブーリアンキャストを無効にします。</target>
        </trans-unit>
        <trans-unit id="9db8d010e4b21df44b098f694c42f2dd4eab415c" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary semicolons.</source>
          <target state="translated">この規則では、不要なセミコロンを禁止します。</target>
        </trans-unit>
        <trans-unit id="d9ecfca8a1a798c2905361902e770ebaaeebbbf4" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary usage of computed property keys.</source>
          <target state="translated">このルールは、計算されたプロパティ・キーの不要な使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="6a19f5c8490d1ba026ed2c643c3a4351a202d08f" translate="yes" xml:space="preserve">
          <source>This rule disallows unreachable code after &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、および &lt;code&gt;break&lt;/code&gt; ステートメントの後に到達できないコードを許可しません。</target>
        </trans-unit>
        <trans-unit id="e63d4f3884bfa8fa4f27ddb207b05212dad647be" translate="yes" xml:space="preserve">
          <source>This rule disallows using multiple assignments within a single statement.</source>
          <target state="translated">このルールでは、1つのステートメント内で複数の割り当てを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="25bf4d847dfa2ff4961c001bb9780bc07382514c" translate="yes" xml:space="preserve">
          <source>This rule disallows whitespace around the dot or before the opening bracket before properties of objects if they are on the same line. This rule allows whitespace when the object and property are on separate lines, as it is common to add newlines to longer chains of properties:</source>
          <target state="translated">こ の規則は、 オブジ ェ ク ト のプ ロ パテ ィ が同一行上にあ る 場合には、 ドットの周りやプ ロ パテ ィ の前の大括弧の前には空白を入れません。この規則は、オブジェクトとプロパティが別々の行にある場合に空白を許容します。</target>
        </trans-unit>
        <trans-unit id="9e9a9afc266a9f1caa2064407f3d3f1037d9fe0e" translate="yes" xml:space="preserve">
          <source>This rule distinguishes between six kinds of variable declaration types:</source>
          <target state="translated">この規則は、6種類の変数宣言型を区別します。</target>
        </trans-unit>
        <trans-unit id="cdbb91e3e92f7914450202f6764f5b77ba2a26f1" translate="yes" xml:space="preserve">
          <source>This rule does not apply in an &lt;code&gt;ArrayExpression&lt;/code&gt; or &lt;code&gt;ArrayPattern&lt;/code&gt; in either of the following cases:</source>
          <target state="translated">このルールは、次のいずれかの場合の &lt;code&gt;ArrayExpression&lt;/code&gt; または &lt;code&gt;ArrayPattern&lt;/code&gt; には適用されません。</target>
        </trans-unit>
        <trans-unit id="203d845e651b402a1ac8edc950ecd9464c5828ae" translate="yes" xml:space="preserve">
          <source>This rule does not apply in either of the following cases:</source>
          <target state="translated">以下のいずれかに該当する場合は、この規定は適用されません。</target>
        </trans-unit>
        <trans-unit id="3f490639d9b5cca1ffe33a6bc2bbf099505645ed" translate="yes" xml:space="preserve">
          <source>This rule does not apply to directives (which are in the form of literal string expressions such as &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; at the beginning of a script, module, or function).</source>
          <target state="translated">この規則は、ディレクティブ（ &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; などのリテラル文字列式の形式で、スクリプト、モジュール、または関数の先頭）には適用されません。</target>
        </trans-unit>
        <trans-unit id="74c73caf5eb1d682942527e0676b6230a86733fc" translate="yes" xml:space="preserve">
          <source>This rule does not apply to function calls or constructor calls with the &lt;code&gt;new&lt;/code&gt; operator, because they could have &lt;em&gt;side effects&lt;/em&gt; on the state of the program.</source>
          <target state="translated">この規則は、 &lt;code&gt;new&lt;/code&gt; 演算子を使用した関数呼び出しまたはコンストラクター呼び出しには適用されません。プログラムの状態に&lt;em&gt;副作用&lt;/em&gt;がある可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="3ad5609fd443c44c12476d22f78115240259d7d6" translate="yes" xml:space="preserve">
          <source>This rule does not enforce the existence of the pair for a getter or a setter. See &lt;a href=&quot;accessor-pairs&quot;&gt;accessor-pairs&lt;/a&gt; if you also want to enforce getter/setter pairs.</source>
          <target state="translated">このルールは、ゲッターまたはセッターのペアの存在を強制しません。ゲッター/セッターのペアも適用したい場合は、&lt;a href=&quot;accessor-pairs&quot;&gt;アクセサーペアを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="854c2eba272fbba2377e73728b6e8e8a5ab8a7c8" translate="yes" xml:space="preserve">
          <source>This rule does not flag arrow functions inside of object literals. The following will &lt;em&gt;not&lt;/em&gt; warn:</source>
          <target state="translated">このルールは、オブジェクトリテラル内の矢印関数にフラグを立てません。以下は警告し&lt;em&gt;ません&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="86d082160176ea469e94732a9224b99947a25f26" translate="yes" xml:space="preserve">
          <source>This rule does not report empty character classes in the string argument of calls to the &lt;code&gt;RegExp&lt;/code&gt; constructor.</source>
          <target state="translated">このルールは、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターへの呼び出しの文字列引数に空の文字クラスを報告しません。</target>
        </trans-unit>
        <trans-unit id="d27117920d1a4c3661be108f7fc91787931c11a3" translate="yes" xml:space="preserve">
          <source>This rule does not report missing JSDoc comments for classes, functions, or methods.</source>
          <target state="translated">このルールでは、クラス、関数、メソッドのJSDocコメントの欠落を報告しません。</target>
        </trans-unit>
        <trans-unit id="329e07b776a9b047bbee9ba7aeb1d91f67a6f539" translate="yes" xml:space="preserve">
          <source>This rule does nothing if no configurations are provided.</source>
          <target state="translated">このルールは、設定が提供されていない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="e35b9e62ac94294420d469553afbaf12b36ac992" translate="yes" xml:space="preserve">
          <source>This rule doesn't check spacing in the following cases:</source>
          <target state="translated">このルールでは、以下のような場合には間隔をチェックしません。</target>
        </trans-unit>
        <trans-unit id="ed6ace70b69e1bae1fbb742835f6e9d160caa326" translate="yes" xml:space="preserve">
          <source>This rule enforce consistent comma style in array literals, object literals, and variable declarations.</source>
          <target state="translated">この規則は、配列リテラル、オブジェクトリテラル、変数宣言において、一貫したカンマのスタイルを強制します。</target>
        </trans-unit>
        <trans-unit id="5ee5487658a78c52a1bdf48fa389ad64744891d9" translate="yes" xml:space="preserve">
          <source>This rule enforces a coding style where empty lines are required or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements to achieve a consistent coding style across the project.</source>
          <target state="translated">このルールは、プロジェクト全体で一貫したコーディングスタイルを実現するために、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;const&lt;/code&gt; ステートメントの後に空行が必要または禁止されているコーディングスタイルを適用します。</target>
        </trans-unit>
        <trans-unit id="b3a30607c883a5da29ceb97f5b29fe497063b7f4" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent indentation style. The default style is &lt;code&gt;4 spaces&lt;/code&gt;.</source>
          <target state="translated">このルールは、一貫したインデントスタイルを適用します。デフォルトのスタイルは &lt;code&gt;4 spaces&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="053d9249665cec6c7a51225c330deea8b4d964fe" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent linebreak style for operators.</source>
          <target state="translated">この規則は、演算子に一貫した改行スタイルを強制します。</target>
        </trans-unit>
        <trans-unit id="2dc207f7c0cdd5ec6f45d65ca43e291f84147958" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent newlines around variable declarations. This rule ignores variable declarations inside &lt;code&gt;for&lt;/code&gt; loop conditionals.</source>
          <target state="translated">このルールは、変数宣言の周りに一貫した改行を適用します。このルールは &lt;code&gt;for&lt;/code&gt; ループ条件の内部の変数宣言を無視します。</target>
        </trans-unit>
        <trans-unit id="84f0362da7498b4295196fca6493ae7190176738" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum depth that blocks can be nested to reduce code complexity.</source>
          <target state="translated">このルールは、コードの複雑さを軽減するために、ブロックを入れ子にできる最大の深さを強制します。</target>
        </trans-unit>
        <trans-unit id="4335e81d4479cc83b3771caa8aa5dff2eb5111a3" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum depth that callbacks can be nested to increase code clarity.</source>
          <target state="translated">このルールは、コードの明瞭性を高めるために、コールバックを入れ子にできる最大の深さを強制します。</target>
        </trans-unit>
        <trans-unit id="4cfe7ab9be0d3cf7c4bd26c43cf9d145739278f3" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.</source>
          <target state="translated">この規則は、コードの可読性と保守性を高めるために、最大行長を強制します。行の長さは、行内のUnicode文字数として定義されます。</target>
        </trans-unit>
        <trans-unit id="ec9c52da0098b06b0b6d8526eddee3dc69ce058a" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.</source>
          <target state="translated">このルールは、保守性を助け、複雑さを軽減するために、1ファイルあたりの最大行数を強制します。</target>
        </trans-unit>
        <trans-unit id="88b1bf1896fc036cbc88285ee2b031a3838d7474" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of lines per function, in order to aid in maintainability and reduce complexity.</source>
          <target state="translated">このルールは、保守性を助け、複雑さを軽減するために、関数あたりの最大行数を強制します。</target>
        </trans-unit>
        <trans-unit id="44007589ecb2a4769b62fe380270b72abb99231d" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of parameters allowed in function definitions.</source>
          <target state="translated">この規則は、関数定義で許可されるパラメータの最大数を強制します。</target>
        </trans-unit>
        <trans-unit id="101841de9bcf819f5ed87d837a7ea9eda3cccdfb" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of statements allowed in function blocks.</source>
          <target state="translated">この規則は、関数ブロックで許可されるステートメントの最大数を強制します。</target>
        </trans-unit>
        <trans-unit id="f803854de3d5f4eb6dba4c3bad230da6dbe1073d" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of statements allowed per line.</source>
          <target state="translated">この規則は、1行あたりに許可されるステートメントの最大数を強制します。</target>
        </trans-unit>
        <trans-unit id="a08a080563efd2eec379c0e949b7107a0946a1c4" translate="yes" xml:space="preserve">
          <source>This rule enforces a minimum and/or maximum identifier length convention.</source>
          <target state="translated">この規則は、最小および/または最大の識別子の長さの規則を適用する。</target>
        </trans-unit>
        <trans-unit id="a12ae4058804b73570753830d04876debfe743a7" translate="yes" xml:space="preserve">
          <source>This rule enforces a nearly universal stylistic concern. That being said, this rule may be disabled if the constructor style is preferred.</source>
          <target state="translated">このルールは、ほぼ普遍的なスタイルに関する懸念を強制します。コンストラクタのスタイルが望ましい場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="f0177a6b9f488d9007a94ed192deb1738ff81f54" translate="yes" xml:space="preserve">
          <source>This rule enforces a particular type of &lt;code&gt;function&lt;/code&gt; style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.</source>
          <target state="translated">このルールは、宣言または式のいずれかで、JavaScriptファイル全体に特定のタイプの &lt;code&gt;function&lt;/code&gt; スタイルを適用します。どちらを設定するかを指定できます。</target>
        </trans-unit>
        <trans-unit id="7c62d8b9628e4222ce0de1cda323d56688f112a7" translate="yes" xml:space="preserve">
          <source>This rule enforces a style where it requires to have a getter for every property which has a setter defined.</source>
          <target state="translated">このルールは、セッターが定義されているすべてのプロパティに対してゲッターを持つことを要求するスタイルを強制します。</target>
        </trans-unit>
        <trans-unit id="99a6b55cecafcb07815b6ce6b225784a37946856" translate="yes" xml:space="preserve">
          <source>This rule enforces at least one newline (or absence thereof) at the end of non-empty files.</source>
          <target state="translated">この規則は、空ではないファイルの最後に少なくとも1つの改行(または改行がないこと)を強制します。</target>
        </trans-unit>
        <trans-unit id="c0f61cc113b072060777fa670e84b19c62761cb8" translate="yes" xml:space="preserve">
          <source>This rule enforces comparing &lt;code&gt;typeof&lt;/code&gt; expressions to valid string literals.</source>
          <target state="translated">このルールは、 &lt;code&gt;typeof&lt;/code&gt; 式を有効な文字列リテラルと比較することを強制します。</target>
        </trans-unit>
        <trans-unit id="0d29e3bc583262a92e61b0df65bf87b587bc1245" translate="yes" xml:space="preserve">
          <source>This rule enforces consistency regarding the spaces after &lt;code&gt;words&lt;/code&gt; unary operators and after/before &lt;code&gt;nonwords&lt;/code&gt; unary operators.</source>
          <target state="translated">この規則は、後にスペースに関する一貫性を強制し &lt;code&gt;words&lt;/code&gt; の前に単項演算子および/後 &lt;code&gt;nonwords&lt;/code&gt; 単項演算子。</target>
        </trans-unit>
        <trans-unit id="4656356c361a67b0d4161201f70a8dde34f8fa7c" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent brace style for blocks.</source>
          <target state="translated">この規則は、ブロックに対して一貫したブレーススタイルを強制する。</target>
        </trans-unit>
        <trans-unit id="c589693beabba7d58bd598910df76da4e9f1a779" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent empty line padding within blocks.</source>
          <target state="translated">こ の規則は、 ブ ロ ッ ク 内の空行のパ ッ ド を一貫して強制 し ます。</target>
        </trans-unit>
        <trans-unit id="595c763433e0de8f23a77358f7e01894f4ce51bb" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line breaks inside braces of object literals or destructuring assignments.</source>
          <target state="translated">この規則は、オブジェクトリテラルまたは破壊的代入の中括弧内での一貫した改行を強制します。</target>
        </trans-unit>
        <trans-unit id="dc1f9f7d14d39f611230db49960fece58ed587b8" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line breaks inside parentheses of function parameters or arguments.</source>
          <target state="translated">この規則は、関数のパラメータや引数の括弧内での一貫した改行を強制します。</target>
        </trans-unit>
        <trans-unit id="cc3d5861ecc6d2c3252bac7222aab4bc2ecdea0d" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line endings independent of operating system, VCS, or editor used across your codebase.</source>
          <target state="translated">このルールは、コードベース全体で使用されるオペレーティングシステム、VCS、またはエディタに依存しない一貫した行末を強制します。</target>
        </trans-unit>
        <trans-unit id="3e6898a2307cfec7882640002567d17f03515ad3" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;, &lt;code&gt;falls through&lt;/code&gt;.</source>
          <target state="translated">このルールは、行コメントの一貫した位置を強制します。ブロックコメントはこのルールの影響を受けません。デフォルトでは、このルールは次の単語で始まるコメントを無視します： &lt;code&gt;eslint&lt;/code&gt; 、 &lt;code&gt;jshint&lt;/code&gt; 、 &lt;code&gt;jslint&lt;/code&gt; 、 &lt;code&gt;istanbul&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、 &lt;code&gt;exported&lt;/code&gt; 、 &lt;code&gt;jscs&lt;/code&gt; 、fall &lt;code&gt;falls through&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa1bfb395be1412e1e3fa7972879d7328ba00c44" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing around keywords and keyword-like tokens: &lt;code&gt;as&lt;/code&gt; (in module declarations), &lt;code&gt;async&lt;/code&gt; (of async functions), &lt;code&gt;await&lt;/code&gt; (of await expressions), &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;debugger&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt; (in module declarations), &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; (of getters), &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;instanceof&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;of&lt;/code&gt; (in for-of statements), &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; (of setters), &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.</source>
          <target state="translated">このルールは、キーワードとキーワードのようなトークンの周囲に一貫した間隔を適用します： &lt;code&gt;as&lt;/code&gt; （モジュール宣言内）、 &lt;code&gt;async&lt;/code&gt; （async関数の）、 &lt;code&gt;await&lt;/code&gt; （await式の）、 &lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;debugger&lt;/code&gt; 、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;export&lt;/code&gt; 、 &lt;code&gt;extends&lt;/code&gt; 、 &lt;code&gt;finally&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;from&lt;/code&gt; （モジュール宣言内）、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; （ofゲッター）、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;import&lt;/code&gt; 、 &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;instanceof&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;of&lt;/code&gt; （for-ofステートメント）、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; （ofセッター）、 &lt;code&gt;static&lt;/code&gt; 、 &lt;code&gt;super&lt;/code&gt; 、 &lt;code&gt;switch&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;typeof&lt;/code&gt; 、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;void&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; 、および &lt;code&gt;yield&lt;/code&gt; 。このルールは、他の間隔ルールと競合しないように注意深く設計されています。他のルールが問題を報告する間隔には適用されません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
