<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="a05409697e85649207fda3ec4adf2978841d64e9" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled after all files are written.</source>
          <target state="translated">全てのファイルが書き込まれた後に成就する約束。</target>
        </trans-unit>
        <trans-unit id="2a2cd5efb0c948ebdbe12aabca7fbb672ea3acab" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with a &lt;a href=&quot;#-formatter-type&quot;&gt;Formatter&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;#-formatter-type&quot;&gt;Formatter&lt;/a&gt;オブジェクトで実現される約束。</target>
        </trans-unit>
        <trans-unit id="478dfcc83dc754277166d46e9b3d38e748913611" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with a configuration object.</source>
          <target state="translated">設定オブジェクトで実現される約束。</target>
        </trans-unit>
        <trans-unit id="c0fc0e0cd457cdd25ed6e640cda0efc522fcc0b6" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with an array of &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;オブジェクトの配列で実現される約束。</target>
        </trans-unit>
        <trans-unit id="aa291d0f16227cc6e0c9871b3f5369125da25d86" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with an array of &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects. This is an array (despite there being only one lint result) in order to keep the interfaces between this and the &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; method similar.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt;オブジェクトの配列で実現される約束。これは、これと&lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt;メソッドの間のインターフェイスを同様に保つための配列です（lintの結果は1つだけですが）。</target>
        </trans-unit>
        <trans-unit id="8a5e3b16efbb634d1ac4a691dd800a96c5e8a3a4" translate="yes" xml:space="preserve">
          <source>The promise that will be fulfilled with whether the file is ignored or not. If the file is ignored, then it will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ファイルが無視されるかどうかで果たされる約束。ファイルが無視されると、 &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c3bb0c19b313c5a8f9e87aaba0c7d42779858d8a" translate="yes" xml:space="preserve">
          <source>The proponents of these extra spaces believe it make the code easier to read and can more easily highlight potential errors, such as:</source>
          <target state="translated">これらの余分なスペースの支持者は、コードを読みやすくし、以下のような潜在的なエラーをより簡単に強調することができると考えています。</target>
        </trans-unit>
        <trans-unit id="842b4413185a6f29a14a60bf357af03cfc8c67fc" translate="yes" xml:space="preserve">
          <source>The pull request must have a description. The description should explain what you did and how its effects can be seen.</source>
          <target state="translated">プルリクエストには説明文が必要です。説明文は何をしたのか、その効果がどのように見えるのかを説明しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9f51bbd346695224f5a3bba69d99964bfc48d685" translate="yes" xml:space="preserve">
          <source>The purpose is to avoid expressions such as &lt;code&gt;! a &amp;lt; b&lt;/code&gt; (which is equivalent to &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt;) when what is really intended is &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt;.</source>
          <target state="translated">目的は、 &lt;code&gt;! a &amp;lt; b&lt;/code&gt; などの表現を避けることです。a &amp;lt;b（これは &lt;code&gt;(a ? 0 : 1) &amp;lt; b&lt;/code&gt; と同等）であり、実際に意図したものは &lt;code&gt;!(a &amp;lt; b)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d6c661a567da1e6f27caf7616e695a2df7785021" translate="yes" xml:space="preserve">
          <source>The purpose of the &lt;code&gt;delete&lt;/code&gt; operator is to remove a property from an object. Using the &lt;code&gt;delete&lt;/code&gt; operator on a variable might lead to unexpected behavior.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 演算子の目的は、オブジェクトからプロパティを削除することです。変数で &lt;code&gt;delete&lt;/code&gt; 演算子を使用すると、予期しない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8dc19192de8fb3195f72308a36d5ed027027af0b" translate="yes" xml:space="preserve">
          <source>The range indexes of all tokens and comments must not overlap with the range of other tokens and comments.</source>
          <target state="translated">すべてのトークンとコメントの範囲インデックスは、他のトークンとコメントの範囲と重なってはならない。</target>
        </trans-unit>
        <trans-unit id="b0a76dd0dfcefbc58816ee112b837c5543da7412" translate="yes" xml:space="preserve">
          <source>The reason for this is that &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; do type coercion which follows the rather obscure &lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;Abstract Equality Comparison Algorithm&lt;/a&gt;. For instance, the following statements are all considered &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">この理由は、 &lt;code&gt;==&lt;/code&gt; と &lt;code&gt;!=&lt;/code&gt; が、型の強制を行っているためです。これは、あいまいな&lt;a href=&quot;https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&quot;&gt;抽象等値比較アルゴリズムに&lt;/a&gt;従っています。たとえば、次のステートメントはすべて &lt;code&gt;true&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="01205e0f79602a8ffcecdc5bb5ff7825b476d8a2" translate="yes" xml:space="preserve">
          <source>The replacement for &lt;code&gt;eslint-tester&lt;/code&gt; is called &lt;code&gt;RuleTester&lt;/code&gt;. It's a simplified version of &lt;code&gt;ESLintTester&lt;/code&gt; that's designed to work with any testing framework. This object is exposed by the package.</source>
          <target state="translated">&lt;code&gt;eslint-tester&lt;/code&gt; の代替はRuleTesterと呼ばれ &lt;code&gt;RuleTester&lt;/code&gt; 。これは、あらゆるテストフレームワークで動作するように設計された &lt;code&gt;ESLintTester&lt;/code&gt; の簡易バージョンです。このオブジェクトはパッケージによって公開されます。</target>
        </trans-unit>
        <trans-unit id="ec0504699dd72d01190815f60c9e51a4931c510f" translate="yes" xml:space="preserve">
          <source>The resulting configuration file will be created in the current directory.</source>
          <target state="translated">結果の設定ファイルは、カレントディレクトリに作成されます。</target>
        </trans-unit>
        <trans-unit id="e5b1d156a93c697ddb2fcff08bf4e5ddbeae4405" translate="yes" xml:space="preserve">
          <source>The return value is always a &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">戻り値は常に &lt;code&gt;Promise&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fed8bcfb8b284135209f390faca018017c1afbc2" translate="yes" xml:space="preserve">
          <source>The return value is an object containing the results of the linting operation. Here's an example of a report object:</source>
          <target state="translated">戻り値は、リンティング操作の結果を含むオブジェクトです。以下にレポートオブジェクトの例を示します。</target>
        </trans-unit>
        <trans-unit id="5b239408a9248b22ceeef20494942f4aa29a953c" translate="yes" xml:space="preserve">
          <source>The return value of the executor is ignored. Returning a value from an executor function is a possible error because the returned value cannot be used and it doesn't affect the promise in any way.</source>
          <target state="translated">実行子の戻り値は無視されます。実行者関数から値を返すと、返された値は使用できず、プロミスには何ら影響を与えないため、エラーになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="66df5448c616e295ecb49452adc535d44bedae83" translate="yes" xml:space="preserve">
          <source>The returned value is a &lt;a href=&quot;scope-manager-interface&quot;&gt;&lt;code&gt;Scope&lt;/code&gt; object&lt;/a&gt; defined by the &lt;code&gt;eslint-scope&lt;/code&gt; package. The &lt;code&gt;Variable&lt;/code&gt; objects of global variables have some additional properties.</source>
          <target state="translated">戻り値は、 &lt;code&gt;eslint-scope&lt;/code&gt; パッケージで定義された&lt;a href=&quot;scope-manager-interface&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; オブジェクト&lt;/a&gt;です。グローバル変数の &lt;code&gt;Variable&lt;/code&gt; オブジェクトには、いくつかの追加のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="5fb2e185527cd54c372b96c8a8cf85ca7037ac9b" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;func-style&lt;/code&gt; has a default configuration of &lt;code&gt;&quot;expression&quot;&lt;/code&gt;, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, &lt;code&gt;eslint:recommended&lt;/code&gt; defaulted it to &lt;code&gt;&quot;declaration&quot;&lt;/code&gt;.</source>
          <target state="translated">ルール &lt;code&gt;func-style&lt;/code&gt; のデフォルト構成は &lt;code&gt;&quot;expression&quot;&lt;/code&gt; ですが、ESLint &lt;code&gt;1.x&lt;/code&gt; では、 &lt;code&gt;eslint:recommended&lt;/code&gt; がデフォルトで &lt;code&gt;&quot;declaration&quot;&lt;/code&gt; に設定しています。</target>
        </trans-unit>
        <trans-unit id="21a84406c09ff8a1049a29b0ba218718b7bf5a81" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; has no default exceptions, but in ESLint &lt;code&gt;1.x&lt;/code&gt;, a default from &lt;code&gt;eslint:recommended&lt;/code&gt; was applied such that a maximum of two empty lines would be permitted.</source>
          <target state="translated">ルール &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; にはデフォルトの例外はありませんが、ESLint &lt;code&gt;1.x&lt;/code&gt; では、最大2つの空行が許可されるように &lt;code&gt;eslint:recommended&lt;/code&gt; のデフォルトが適用されました。</target>
        </trans-unit>
        <trans-unit id="7adf5f9d34968505ac2e7499ab22de53834a46bf" translate="yes" xml:space="preserve">
          <source>The rule always ignores directive comments such as &lt;code&gt;/* eslint-disable */&lt;/code&gt;. Additionally, unless the mode is &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt;, the rule ignores JSDoc comments.</source>
          <target state="translated">このルールは、 &lt;code&gt;/* eslint-disable */&lt;/code&gt; などのディレクティブコメントを常に無視します。さらに、モードが &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt; でない限り、ルールはJSDocコメントを無視します。</target>
        </trans-unit>
        <trans-unit id="a5ddf9fff8f7365d084f3f3463580ae57890e091" translate="yes" xml:space="preserve">
          <source>The rule applies to the operators listed in the above table. It does not report the logical assignment operators &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, and &lt;code&gt;??=&lt;/code&gt; because their short-circuiting behavior is different from the other assignment operators.</source>
          <target state="translated">このルールは、上記の表にリストされている演算子に適用されます。論理代入演算子 &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt; 、 &lt;code&gt;||=&lt;/code&gt; 、および &lt;code&gt;??=&lt;/code&gt; は、他の代入演算子とは短絡動作が異なるため、報告されません。</target>
        </trans-unit>
        <trans-unit id="1171a6f455e8b040c25a7ba3151c5477780f5c03" translate="yes" xml:space="preserve">
          <source>The rule can also be configured to discourage the use of parens when they are not required:</source>
          <target state="translated">また、パーレンが不要な場合には、パーレンの使用を禁止するようにルールを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="f8d163ee49a74afcc2907a73bba3064a962e824c" translate="yes" xml:space="preserve">
          <source>The rule cannot easily verify that the assignment is safe (e.g. if an assigned variable is local and would not be readable from anywhere else while the function is paused).</source>
          <target state="translated">このルールでは、代入が安全であることを簡単に検証することはできません(例えば、代入された変数がローカルであり、関数が一時停止されている間は他のどこからも読み取れない場合など)。</target>
        </trans-unit>
        <trans-unit id="4e9a5ee2475613eb335126f52cf5aaa9b33b67b5" translate="yes" xml:space="preserve">
          <source>The rule disallows octal literals.</source>
          <target state="translated">このルールでは、8進数リテラルを禁止しています。</target>
        </trans-unit>
        <trans-unit id="bed31bfa847f3bb2487f9e377612a105ec30b864" translate="yes" xml:space="preserve">
          <source>The rule does not disallow all use of the &lt;code&gt;RegExp&lt;/code&gt; constructor. It should be still used for dynamically generated regular expressions.</source>
          <target state="translated">このルールでは、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターのすべての使用が禁止されているわけではありません。動的に生成される正規表現には引き続き使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="888d43f5f339c3eab2911b0abe2728f2ab5aeaab" translate="yes" xml:space="preserve">
          <source>The rule has a second object with a single key, &lt;code&gt;enforceForRenamedProperties&lt;/code&gt;, which determines whether the &lt;code&gt;object&lt;/code&gt; destructuring applies to renamed variables.</source>
          <target state="translated">このルールには、単一のキーを &lt;code&gt;enforceForRenamedProperties&lt;/code&gt; 持つ2番目のオブジェクトがあり、 &lt;code&gt;object&lt;/code&gt; が名前変更された変数に適用されるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="3437f8bb30162415e42db275afc1baef0285612b" translate="yes" xml:space="preserve">
          <source>The rule name that generates this lint message. If this message is generated by the ESLint core rather than rules, this is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このlintメッセージを生成するルール名。このメッセージがルールではなくESLintコアによって生成された場合、これは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ac3e6cce45a94e0899d9d17de8ece5be87643b66" translate="yes" xml:space="preserve">
          <source>The rule naming conventions for ESLint are fairly simple:</source>
          <target state="translated">ESLintのルールの命名規則はとてもシンプルです。</target>
        </trans-unit>
        <trans-unit id="6a2d5c1c9e0896db23badf6274b8965eaac23cce" translate="yes" xml:space="preserve">
          <source>The rule object itself (see &lt;a href=&quot;working-with-rules&quot;&gt;&quot;working with rules&quot;&lt;/a&gt;)</source>
          <target state="translated">ルールオブジェクト自体（&lt;a href=&quot;working-with-rules&quot;&gt;「ルールの操作」を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="573e671e86a4cf56bbe5f205a42e8701c29ec3d5" translate="yes" xml:space="preserve">
          <source>The rule offers one object option, &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; (a deprecated synonym is &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt;). If you set it to &lt;code&gt;true&lt;/code&gt;, object literals such as the first two above, with all property specifications on the same line, will be permitted, but one like</source>
          <target state="translated">このルールは、1つのオブジェクトオプションである &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; を提供します（非推奨の同義語は &lt;code&gt;allowMultiplePropertiesPerLine&lt;/code&gt; です）。 &lt;code&gt;true&lt;/code&gt; に設定すると、上記の最初の2つなどのオブジェクトリテラルがすべて同じプロパティ行で許可されますが、</target>
        </trans-unit>
        <trans-unit id="eb4b25449f8d19c4a4b92c230c486f587789325f" translate="yes" xml:space="preserve">
          <source>The rule prohibits the colocation on any line of at least 1 character of one property specification with at least 1 character of any other property specification. For example, the rule prohibits</source>
          <target state="translated">このルールは、1つのプロパティ指定の少なくとも1文字と他のプロパティ指定の少なくとも1文字との任意の行上でのコロケーションを禁止します。例えば、このルールでは</target>
        </trans-unit>
        <trans-unit id="bdcc4c0ed6a72ea505652fd2189129b9ba9488a3" translate="yes" xml:space="preserve">
          <source>The rule should warn against code that tries to compare against -0, since that will not work as intended. That is, code like x === -0 will pass for both +0 and -0. The author probably intended Object.is(x, -0).</source>
          <target state="translated">このルールは、-0 と比較しようとするコードに対して警告すべきです。つまり、x ===-0 のようなコードは +0 と -0 の両方をパスします。 作者はおそらく Object.is(x,-0)を意図していたのでしょう。</target>
        </trans-unit>
        <trans-unit id="9b89d3d9863252a32c9946759fd7f3504dc7b79d" translate="yes" xml:space="preserve">
          <source>The rule takes a single option - an array of possible callback names - which may include object methods. The default callback names are &lt;code&gt;callback&lt;/code&gt;, &lt;code&gt;cb&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">ルールは1つのオプション（可能なコールバック名の配列）を受け取ります。これには、オブジェクトメソッドを含めることができます。デフォルトのコールバック名は、 &lt;code&gt;callback&lt;/code&gt; 、 &lt;code&gt;cb&lt;/code&gt; 、 &lt;code&gt;next&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e78c1edcadc43d22698299cf6fb661f963ea1c1d" translate="yes" xml:space="preserve">
          <source>The rule takes a single string option: the name of the error parameter. The default is &lt;code&gt;&quot;err&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、単一の文字列オプション（エラーパラメータの名前）を取ります。デフォルトは &lt;code&gt;&quot;err&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="73945e310046d0fe600a76487db931bee8eb7989" translate="yes" xml:space="preserve">
          <source>The rule takes an option which specifies when it should be applied. It can be set to one of the following values:</source>
          <target state="translated">ルールは、いつ適用されるかを指定するオプションを取ります。以下の値のいずれかを設定することができます。</target>
        </trans-unit>
        <trans-unit id="c17458aebea2edf7596655f8173de5c166baa09e" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string, which must contain one of the following values:</source>
          <target state="translated">このルールは1つのオプション、文字列を取り、以下の値のいずれかを含む必要があります。</target>
        </trans-unit>
        <trans-unit id="1f25147392b3d78c1603fd60eeee2d70ca798f11" translate="yes" xml:space="preserve">
          <source>The rule takes one option, a string:</source>
          <target state="translated">このルールは、1つのオプション、文字列を取ります。</target>
        </trans-unit>
        <trans-unit id="742233dad80fe18547618108d6a2b86bff76a785" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ルールは一つの選択肢、2つのキーを持つオブジェクト、受け取り &lt;code&gt;before&lt;/code&gt; と &lt;code&gt;after&lt;/code&gt; ブール値を持つ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="827020a96c9caecec65cc7a0552676f015b27688" translate="yes" xml:space="preserve">
          <source>The rule takes one option, an object, which has two keys &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; having boolean values &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;before&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced before semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed before semicolons. If &lt;code&gt;after&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, space is enforced after semicolons and if it's &lt;code&gt;false&lt;/code&gt;, space is disallowed after semicolons. The &lt;code&gt;after&lt;/code&gt; option will be only applied if a semicolon is not at the end of line.</source>
          <target state="translated">ルールは一つの選択肢、2つのキーを持つオブジェクト、受け取り &lt;code&gt;before&lt;/code&gt; と &lt;code&gt;after&lt;/code&gt; ブール値を持つ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。場合 &lt;code&gt;before&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、スペースがセミコロンの前に施行され、それはだ場合 &lt;code&gt;false&lt;/code&gt; 、スペースはセミコロンの前に許可されていません。場合は &lt;code&gt;after&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、スペースがセミコロンの後に施行されると、それはだ場合 &lt;code&gt;false&lt;/code&gt; 、スペースはセミコロンの後に許可されていません。 &lt;code&gt;after&lt;/code&gt; セミコロンは、行の終わりではない場合にのみオプションが適用されます。</target>
        </trans-unit>
        <trans-unit id="96c7f241e413db9d83cd41a7c8e69e1a5a46c14d" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted identifiers.</source>
          <target state="translated">このルールは、1 つ以上の文字列をオプションとして受け取ります:制限された識別子の名前。</target>
        </trans-unit>
        <trans-unit id="4375aa6346f33b27f068e7c881fdcd22248263e0" translate="yes" xml:space="preserve">
          <source>The rule takes one or more strings as options: the names of restricted modules.</source>
          <target state="translated">このルールは、1つ以上の文字列をオプションとして受け取ります:制限されたモジュールの名前。</target>
        </trans-unit>
        <trans-unit id="a9cca4aaa304d533ffa99e0d4d45692dc6af248a" translate="yes" xml:space="preserve">
          <source>The rule takes one or two options. The first is a string, which can be:</source>
          <target state="translated">ルールは1つか2つのオプションを取ります。1つ目は文字列で、これは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2047f79a374a9de4c018efebf01b37f2c42427b1" translate="yes" xml:space="preserve">
          <source>The rule takes two options.</source>
          <target state="translated">ルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="47e30af986fb27902392df154c435e433c1df14f" translate="yes" xml:space="preserve">
          <source>The rule takes two options:</source>
          <target state="translated">ルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="8014e10667a7389e5554d8b3b067d38491926c25" translate="yes" xml:space="preserve">
          <source>The rules for ASI are relatively straightforward: As once described by Isaac Schlueter, a newline character always ends a statement, just like a semicolon, &lt;strong&gt;except&lt;/strong&gt; where one of the following is true:</source>
          <target state="translated">ASIのルールは比較的単純です。IsaacSchlueterが一度説明したように、改行文字は、次のいずれかに該当する場合&lt;strong&gt;を除いて&lt;/strong&gt;、セミコロンと同じように常にステートメントを終了します。</target>
        </trans-unit>
        <trans-unit id="031820acd6f073ce407b24b6015d596945b36976" translate="yes" xml:space="preserve">
          <source>The rules in your custom rules directory must follow the same format as bundled rules to work properly. You can also specify multiple locations for custom rules by including multiple &lt;code&gt;--rulesdir&lt;/code&gt; options:</source>
          <target state="translated">カスタムルールディレクトリ内のルールは、バンドルされたルールと同じ形式で正しく動作する必要があります。複数の &lt;code&gt;--rulesdir&lt;/code&gt; オプションを含めることで、カスタムルールの複数の場所を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="4f407752be68d13cfd5b93589acf43759c14d2f6" translate="yes" xml:space="preserve">
          <source>The same rule does apply to scoped packages:</source>
          <target state="translated">スコープされたパッケージにも同じルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="bfddd41eadd81befb51598e392aaccc185efc70f" translate="yes" xml:space="preserve">
          <source>The second argument is an object with one key, &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt;. The value is an array of string patterns which are considered exceptions to the rule. It is important to note that the exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;. Exceptions cannot be mixed.</source>
          <target state="translated">2番目の引数は、 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 1つのキーを持つオブジェクトです。値は、ルールの例外と見なされる文字列パターンの配列です。最初の引数が &lt;code&gt;&quot;never&quot;&lt;/code&gt; の場合、例外は無視されることに注意することが重要です。例外を混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="2e888e2ddf0328509e3f74a9a7c6bebd8faf02e4" translate="yes" xml:space="preserve">
          <source>The second is to save the file wherever you would like and pass its location to the CLI using the &lt;code&gt;-c&lt;/code&gt; option, such as:</source>
          <target state="translated">2つ目は、ファイルを好きな場所に保存し、 &lt;code&gt;-c&lt;/code&gt; オプションを使用してその場所をCLIに渡す方法です。</target>
        </trans-unit>
        <trans-unit id="414ed43decb6eceb64655ac8086b20e4b3916b91" translate="yes" xml:space="preserve">
          <source>The second one is an object for more fine-grained configuration when the first option is &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt;. Currently, the only available option is &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt;, a boolean property. It's &lt;code&gt;false&lt;/code&gt; by default. If set to &lt;code&gt;true&lt;/code&gt;, it requires braces and an explicit return for object literals.</source>
          <target state="translated">2番目のオプションは、最初のオプションが &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; 場合の、よりきめの細かい構成のためのオブジェクトです。現在、使用できるオプションは、ブール型プロパティである &lt;code&gt;requireReturnForObjectLiteral&lt;/code&gt; のみです。それはです &lt;code&gt;false&lt;/code&gt; デフォルトで。 &lt;code&gt;true&lt;/code&gt; に設定した場合、中括弧とオブジェクトリテラルの明示的な戻りが必要です。</target>
        </trans-unit>
        <trans-unit id="6fa0c837ba16265ad24b0a06aa85ae08d877f9ec" translate="yes" xml:space="preserve">
          <source>The second parameter &lt;code&gt;options&lt;/code&gt; is omittable.</source>
          <target state="translated">2番目のパラメーター &lt;code&gt;options&lt;/code&gt; は省略可能です。</target>
        </trans-unit>
        <trans-unit id="13894c1b5ba8814ae6cea3f9f081dfbf8a0d8858" translate="yes" xml:space="preserve">
          <source>The selector &quot;&lt;code&gt;Identifier&lt;/code&gt;&quot; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes in the program. In this case, the selector will match the nodes for &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt;, and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">セレクタ「 &lt;code&gt;Identifier&lt;/code&gt; 」は、プログラム内のすべての &lt;code&gt;Identifier&lt;/code&gt; ノードに一致します。この場合、セレクターは &lt;code&gt;foo&lt;/code&gt; 、 &lt;code&gt;bar&lt;/code&gt; 、および &lt;code&gt;baz&lt;/code&gt; のノードと一致します。</target>
        </trans-unit>
        <trans-unit id="d627846098bcddfc8705e956620c4e04bad2e321" translate="yes" xml:space="preserve">
          <source>The severity of this message. &lt;code&gt;1&lt;/code&gt; means warning and &lt;code&gt;2&lt;/code&gt; means error.</source>
          <target state="translated">このメッセージの重大度。 &lt;code&gt;1&lt;/code&gt; は警告を意味し、 &lt;code&gt;2&lt;/code&gt; はエラーを意味します。</target>
        </trans-unit>
        <trans-unit id="8edd9e143d8665e59cc0b39cb5fd1623512f2c40" translate="yes" xml:space="preserve">
          <source>The shortened object literal syntax for generators is not affected by this rule.</source>
          <target state="translated">ジェネレータの短縮オブジェクトリテラル構文は、このルールの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="05a4cde718543d121082d5debd9a3bdb1d814202" translate="yes" xml:space="preserve">
          <source>The simplest example is to use just &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="translated">最も単純な例は、 &lt;code&gt;node&lt;/code&gt; と &lt;code&gt;message&lt;/code&gt; のみを使用することです。</target>
        </trans-unit>
        <trans-unit id="58e6895bfed7fd7cc1d658c75e9fdd7ba3d0ec89" translate="yes" xml:space="preserve">
          <source>The simplest selector is just a node type. A node type selector will match all nodes with the given type. For example, consider the following program:</source>
          <target state="translated">最も単純なセレクタは、単にノードタイプです。ノード型セレクタは、与えられた型を持つすべてのノードにマッチします。例えば、次のプログラムを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="62b57f47427459031359008bfc01d02938d4e4ea" translate="yes" xml:space="preserve">
          <source>The single-declaration school of thought is based in pre-ECMAScript 6 behaviors, where there was no such thing as block scope, only function scope. Since all &lt;code&gt;var&lt;/code&gt; statements are hoisted to the top of the function anyway, some believe that declaring all variables in a single declaration at the top of the function removes confusion around scoping rules.</source>
          <target state="translated">単一宣言の考え方は、ECMAScript 6以前の動作に基づいており、ブロックスコープなどはなく、関数スコープのみがありました。とにかく、すべての &lt;code&gt;var&lt;/code&gt; ステートメントは関数の最上部まで引き上げられるため、関数の最上部で1つの宣言ですべての変数を宣言すると、スコープルールに関する混乱がなくなると考える人もいます。</target>
        </trans-unit>
        <trans-unit id="3f23c0f8e2212324dafb94566a41cfac12779d1c" translate="yes" xml:space="preserve">
          <source>The source code text to check.</source>
          <target state="translated">チェックするソースコードのテキスト。</target>
        </trans-unit>
        <trans-unit id="98081cf0b97551ce142d7f451c1b647ed7d9f73b" translate="yes" xml:space="preserve">
          <source>The source file for a rule exports an object with the following properties.</source>
          <target state="translated">ルールのソース ファイルは、以下のプロパティを持つオブジェクトをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="13c2d1557a31408916c7784e491c197a095f73af" translate="yes" xml:space="preserve">
          <source>The spacing after the semicolon if it is the first token in the line.</source>
          <target state="translated">行内の最初のトークンの場合は、セミコロンの後の間隔。</target>
        </trans-unit>
        <trans-unit id="cb8aafac65e7fc97800fb3d3dac293cf6812e694" translate="yes" xml:space="preserve">
          <source>The spacing around the semicolon in a for loop with an empty condition (&lt;code&gt;for(;;)&lt;/code&gt;).</source>
          <target state="translated">空の条件（ &lt;code&gt;for(;;)&lt;/code&gt; ）を持つforループでのセミコロンの周りの間隔。</target>
        </trans-unit>
        <trans-unit id="e3e73e8052d68647147779e7d358e891ec3d4c7d" translate="yes" xml:space="preserve">
          <source>The spacing before the semicolon if it is after an opening parenthesis (&lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt;), or the spacing after the semicolon if it is before a closing parenthesis (&lt;code&gt;)&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt;). That spacing is checked by &lt;code&gt;space-in-parens&lt;/code&gt; or &lt;code&gt;block-spacing&lt;/code&gt;.</source>
          <target state="translated">セミ括弧の前のスペースが開き括弧の後（ &lt;code&gt;(&lt;/code&gt; または &lt;code&gt;{&lt;/code&gt; ）の場合、またはセミコロンの後のスペースが閉じ括弧の前（ &lt;code&gt;)&lt;/code&gt; または &lt;code&gt;}&lt;/code&gt; の場合）。その間隔は &lt;code&gt;space-in-parens&lt;/code&gt; &lt;code&gt;block-spacing&lt;/code&gt; またはブロック間隔によってチェックされます。</target>
        </trans-unit>
        <trans-unit id="115bcb8edde69d7ab538f77d4ffd79b7c96251f6" translate="yes" xml:space="preserve">
          <source>The special value &lt;code&gt;null&lt;/code&gt; should be used only in the following situations:</source>
          <target state="translated">特別な値 &lt;code&gt;null&lt;/code&gt; は、次の状況でのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="55d71491bd24bf8e9266ef7d9b3ed94580c8ef81" translate="yes" xml:space="preserve">
          <source>The standard style, in which commas are placed at the end of the current line</source>
          <target state="translated">カンマが現在の行の最後に置かれる標準スタイル</target>
        </trans-unit>
        <trans-unit id="66b17246512ea6227166b244bbc0ac43dcd2b7c9" translate="yes" xml:space="preserve">
          <source>The statement beginning keyword, such as &lt;code&gt;if&lt;/code&gt;, should be followed by one space and the opening brace should be preceded by a space.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; などのステートメント開始キーワードの後には1つのスペースが続き、左中括弧の前にはスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="940d15ed0a28b1df513a69296639eec227beace3" translate="yes" xml:space="preserve">
          <source>The statement has an unclosed paren, array literal, or object literal or ends in some other way that is not a valid way to end a statement. (For instance, ending with &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;.)</source>
          <target state="translated">ステートメントに閉じられていない括弧、配列リテラル、またはオブジェクトリテラルがあるか、ステートメントを終了する有効な方法ではない他の方法で終了しています。（たとえば、 &lt;code&gt;.&lt;/code&gt; または &lt;code&gt;,&lt;/code&gt; 終わる。）</target>
        </trans-unit>
        <trans-unit id="ad8b8f54b2a420ddeed65e63d39098cd71d92cbc" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback from within a nested function or an immediately-invoked function expression (IIFE).</source>
          <target state="translated">このルールの静的解析では、プログラムが入れ子になった関数内からコールバックを呼び出していることや、すぐに呼び出された関数式 (IIFE)からコールバックを呼び出していることは検出されません。</target>
        </trans-unit>
        <trans-unit id="f3fcd362b8cea026256d5c99fc33540bb48255c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback if it is an argument of a function (for example, &lt;code&gt;setTimeout&lt;/code&gt;).</source>
          <target state="translated">このルールの静的分析は、関数の引数（たとえば、 &lt;code&gt;setTimeout&lt;/code&gt; ）の場合、プログラムがコールバックを呼び出すことを検出しません。</target>
        </trans-unit>
        <trans-unit id="b0d50eb0c6a5a75a5254c188fa79ce03846654c4" translate="yes" xml:space="preserve">
          <source>The static analysis of this rule does not detect that the program calls the callback only one time in each branch of an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">このルールの静的分析は、プログラムが &lt;code&gt;if&lt;/code&gt; ステートメントの各ブランチで1回だけコールバックを呼び出すことを検出しません。</target>
        </trans-unit>
        <trans-unit id="2f6cfcf93f0774ec1b281ebd4cefac2327a634e4" translate="yes" xml:space="preserve">
          <source>The string and object formats can be freely mixed in the configuration as needed.</source>
          <target state="translated">文字列形式とオブジェクト形式は必要に応じて自由に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="dd57f78073587288601a6f8bd191a69e0806d4ed" translate="yes" xml:space="preserve">
          <source>The string option does not check async arrow function expressions for backward compatibility.</source>
          <target state="translated">string オプションは、非同期矢印関数式の後方互換性をチェックしません。</target>
        </trans-unit>
        <trans-unit id="311d87885350cd8d74996d157aa1c8fa01351e72" translate="yes" xml:space="preserve">
          <source>The syntax for AST selectors is similar to the syntax for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selectors&lt;/a&gt;. If you've used CSS selectors before, the syntax for AST selectors should be easy to understand.</source>
          <target state="translated">ASTセレクターの構文は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSSセレクターの&lt;/a&gt;構文に似ています。以前にCSSセレクターを使用したことがある場合、ASTセレクターの構文は理解しやすいはずです。</target>
        </trans-unit>
        <trans-unit id="224d6b2ad3ce554f3d0f9f8c4d66cbd9efd8197b" translate="yes" xml:space="preserve">
          <source>The syntax to specify restricted imports looks like this:</source>
          <target state="translated">制限付き輸入を指定する構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5e449fa639405ca5c2bae839b4eb0df0f9b6a757" translate="yes" xml:space="preserve">
          <source>The ten Node.js/CommonJS rules in core have been deprecated and moved to the &lt;a href=&quot;https://github.com/mysticatea/eslint-plugin-node&quot;&gt;eslint-plugin-node&lt;/a&gt; plugin.</source>
          <target state="translated">コアの10個のNode.js / CommonJSルールは非推奨になり、&lt;a href=&quot;https://github.com/mysticatea/eslint-plugin-node&quot;&gt;eslint-plugin-node&lt;/a&gt;プラグインに移動されました。</target>
        </trans-unit>
        <trans-unit id="b7efceeec030359c477714b00506090fb8984485" translate="yes" xml:space="preserve">
          <source>The ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.</source>
          <target state="translated">三項演算子は、変数に条件付きで値を代入するために使用されます。三項演算子を使用するとコードが不明確になるという意見もあります。</target>
        </trans-unit>
        <trans-unit id="d10f8a42895796da61c03baea8c9b4879c335514" translate="yes" xml:space="preserve">
          <source>The ternary operator should be used only for assigning values conditionally and never as a shortcut for an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">三項演算子は、条件付きで値を割り当てる場合にのみ使用し、 &lt;code&gt;if&lt;/code&gt; ステートメントのショートカットとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="f096cdc8dc30e248084bfa4304f67adc152c3c50" translate="yes" xml:space="preserve">
          <source>The testing takes a few minutes to complete. If any tests fail, that likely means one or more parts of the environment setup didn't complete correctly. The upstream tests always pass.</source>
          <target state="translated">テストは数分で完了します。テストが失敗した場合は、環境設定の1つ以上の部分が正しく完了していない可能性が高いです。上流側のテストは常に合格します。</target>
        </trans-unit>
        <trans-unit id="aa432e2f60af21e69cfa908f06604c8b4d0ae385" translate="yes" xml:space="preserve">
          <source>The text to add.</source>
          <target state="translated">追加するテキスト。</target>
        </trans-unit>
        <trans-unit id="7bbb1f82d6c0a19e1279187e629a297da44271f1" translate="yes" xml:space="preserve">
          <source>The thing that makes ESLint different from other linters is the ability to define custom rules at runtime. This is perfect for rules that are specific to your project or company and wouldn't make sense for ESLint to ship with. With runtime rules, you don't have to wait for the next version of ESLint or be disappointed that your rule isn't general enough to apply to the larger JavaScript community, just write your rules and include them at runtime.</source>
          <target state="translated">ESLintが他のリンターと違う点は、実行時にカスタムルールを定義できることです。これはプロジェクトや会社固有のルールで、ESLintには搭載されていないルールを定義するのに最適です。ランタイムルールがあれば、ESLintの次のバージョンを待ったり、自分のルールがより大きなJavaScriptコミュニティに適用できるような一般的なルールではないことにがっかりしたりする必要はありません。</target>
        </trans-unit>
        <trans-unit id="aeba12234ad663f0a0ec6980e71a7b41b7d994ef" translate="yes" xml:space="preserve">
          <source>The thinking is that it's better to always explicitly state what the default behavior should be so that it's clear whether or not the developer forgot to include the default behavior by mistake.</source>
          <target state="translated">開発者が誤ってデフォルトの動作を入れ忘れたのかどうかが明確になるように、デフォルトの動作がどうあるべきかを常に明示しておいた方が良いという考え方です。</target>
        </trans-unit>
        <trans-unit id="da7d071d3f4e1e51df3ea8518936e97a10e59509" translate="yes" xml:space="preserve">
          <source>The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the &lt;a href=&quot;user-guide/configuring&quot;&gt;configuration docs&lt;/a&gt;).</source>
          <target state="translated">3つのエラーレベルにより、ESLintがルールを適用する方法をきめ細かく制御できます（構成オプションと詳細については、&lt;a href=&quot;user-guide/configuring&quot;&gt;構成ドキュメントを&lt;/a&gt;参照してください）。</target>
        </trans-unit>
        <trans-unit id="df9af8c915bee6673ff22d532ac03047c8960a90" translate="yes" xml:space="preserve">
          <source>The top-level report object also has &lt;code&gt;errorCount&lt;/code&gt; and &lt;code&gt;warningCount&lt;/code&gt; which give the exact number of errors and warnings respectively on all the files. Additionally, &lt;code&gt;usedDeprecatedRules&lt;/code&gt; signals any deprecated rules used and their replacement (if available). Specifically, it is an array of objects with properties like so:</source>
          <target state="translated">トップレベルのレポートオブジェクトには &lt;code&gt;errorCount&lt;/code&gt; と &lt;code&gt;warningCount&lt;/code&gt; もあり、すべてのファイルのエラーと警告の正確な数をそれぞれ示します。さらに、 &lt;code&gt;usedDeprecatedRules&lt;/code&gt; は、使用されている非推奨のルールとその置換（使用可能な場合）を通知します。具体的には、次のようなプロパティを持つオブジェクトの配列です。</target>
        </trans-unit>
        <trans-unit id="41d769ab16b1f7f3308de0b859c5b9860b2b26e5" translate="yes" xml:space="preserve">
          <source>The top-level report object also has &lt;code&gt;errorCount&lt;/code&gt; and &lt;code&gt;warningCount&lt;/code&gt; which give the exact number of errors and warnings respectively on all the files. Additionally, &lt;code&gt;usedDeprecatedRules&lt;/code&gt; signals any deprecated rules used and their replacement (if available). Specifically, it is array of objects with properties like so:</source>
          <target state="translated">トップレベルのレポートオブジェクトには、すべてのファイルのエラーと警告の正確な数をそれぞれ &lt;code&gt;errorCount&lt;/code&gt; と &lt;code&gt;warningCount&lt;/code&gt; もあります。さらに、 &lt;code&gt;usedDeprecatedRules&lt;/code&gt; は、使用されている非推奨のルールとその置き換え（可能な場合）を通知します。具体的には、次のようなプロパティを持つオブジェクトの配列です。</target>
        </trans-unit>
        <trans-unit id="df600fd43354fe093f2997a1e86f286e369b6a13" translate="yes" xml:space="preserve">
          <source>The top-level report object has a &lt;code&gt;results&lt;/code&gt; array containing all linting results for files that had warnings or errors (any files that did not produce a warning or error are omitted). Each file result includes:</source>
          <target state="translated">トップレベルのレポートオブジェクトには、警告またはエラーがあったファイルのすべてのリンティング結果を含む &lt;code&gt;results&lt;/code&gt; 配列があります（警告またはエラーを生成しなかったファイルは省略されます）。各ファイルの結果には以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="594a7b21bd7855de18adf0c69dd40a240b1def08" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;. By default, all values are true.</source>
          <target state="translated">&lt;code&gt;VariableDeclarator&lt;/code&gt; と &lt;code&gt;AssignmentExpression&lt;/code&gt; の2つのプロパティ。これらは、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 破壊要件をオンまたはオフにするために使用できます。デフォルトでは、すべての値がtrueです。</target>
        </trans-unit>
        <trans-unit id="e8bf7a9dd0b016497dca472797a392ec1424c8b6" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">2つのプロパティ &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; を使用して、これらの各タイプの個別化の要件を個別にオンまたはオフにすることができます。デフォルトでは、どちらもtrueです。</target>
        </trans-unit>
        <trans-unit id="d35a58b0a18350e1534de85ad73ac8b06f837e84" translate="yes" xml:space="preserve">
          <source>The two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to turn on or off the destructuring requirement for each of those types independently. By default, both are true.</source>
          <target state="translated">2つのプロパティ、 &lt;code&gt;array&lt;/code&gt; と &lt;code&gt;object&lt;/code&gt; 。これらのタイプを使用して、これらの各タイプの破壊要件を個別にオンまたはオフにできます。デフォルトでは、どちらもtrueです。</target>
        </trans-unit>
        <trans-unit id="4f16a3bf5e4813936b00b45e231c747c7726a1d4" translate="yes" xml:space="preserve">
          <source>The updates of imported bindings by ES Modules cause runtime errors.</source>
          <target state="translated">ESモジュールによるインポートされたバインディングの更新により、ランタイムエラーが発生する。</target>
        </trans-unit>
        <trans-unit id="5514e8b27889c92b548abd8ebff5998bdf418288" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; make several code optimizations impossible. They have been deprecated in future versions of JavaScript and their use is forbidden in ECMAScript 5 while in strict mode.</source>
          <target state="translated">&lt;code&gt;arguments.caller&lt;/code&gt; および &lt;code&gt;arguments.callee&lt;/code&gt; を使用すると、いくつかのコード最適化が不可能になります。これらはJavaScriptの将来のバージョンでは非推奨になり、厳密モードのECMAScript 5では使用できません。</target>
        </trans-unit>
        <trans-unit id="2924f354dcd960a1ab58164e2009cd5c61e0aa99" translate="yes" xml:space="preserve">
          <source>The use of bitwise operators in JavaScript is very rare and often &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;|&lt;/code&gt; is simply a mistyped &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;, which will lead to unexpected behavior.</source>
          <target state="translated">JavaScriptでのビットごとの演算子の使用は非常にまれで、多くの場合 &lt;code&gt;&amp;amp;&lt;/code&gt; または &lt;code&gt;|&lt;/code&gt; 単にタイプミスした &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; または &lt;code&gt;||&lt;/code&gt; 、予期しない動作につながります。</target>
        </trans-unit>
        <trans-unit id="e8c966ed7def78def5c80c88dca826c0a9cd55fd" translate="yes" xml:space="preserve">
          <source>The version of ESLint you are using.</source>
          <target state="translated">使用しているESLintのバージョン。</target>
        </trans-unit>
        <trans-unit id="1f352eb6a0dacd48f9b129fd6892459730a9afd3" translate="yes" xml:space="preserve">
          <source>The version string of ESLint. E.g. &lt;code&gt;&quot;7.0.0&quot;&lt;/code&gt;.</source>
          <target state="translated">ESLintのバージョン文字列。例： &lt;code&gt;&quot;7.0.0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eac9f3d4f7ff9fa27be37b9559de95a3dfd24dc8" translate="yes" xml:space="preserve">
          <source>Then any code used within the same scope would not get the global &lt;code&gt;undefined&lt;/code&gt;, but rather the local version with a very different meaning.</source>
          <target state="translated">次に、同じスコープ内で使用されるコードは、グローバル &lt;code&gt;undefined&lt;/code&gt; ではなく、非常に異なる意味を持つローカルバージョンを取得します。</target>
        </trans-unit>
        <trans-unit id="91dec8db4a7ce736df71ea88ef47e6b7cca8d86f" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;array&lt;/code&gt; part of this rule is not recommended, as destructuring does not match this use case very well.</source>
          <target state="translated">その場合、このルールの &lt;code&gt;array&lt;/code&gt; 部分はお勧めできません。これは、構造化がこのユースケースとあまり一致しないためです。</target>
        </trans-unit>
        <trans-unit id="1e7df54ba4b2f3d2b8de3ddfb22cf55076b84b07" translate="yes" xml:space="preserve">
          <source>Then you can change to:</source>
          <target state="translated">ならば、それに変えればいいのです。</target>
        </trans-unit>
        <trans-unit id="6ece258a004458918b4a9b465e59a062ce1c5448" translate="yes" xml:space="preserve">
          <source>Then you should enable ES6 using &lt;code&gt;ecmaVersion&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;ecmaVersion&lt;/code&gt; を使用してES6を有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="99179c89c62e68c70478cf6465b8ea928c3d5143" translate="yes" xml:space="preserve">
          <source>Then you should move &lt;code&gt;ecmaFeatures&lt;/code&gt; under &lt;code&gt;parserOptions&lt;/code&gt;:</source>
          <target state="translated">その後、移動する必要があり &lt;code&gt;ecmaFeatures&lt;/code&gt; を下 &lt;code&gt;parserOptions&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="3039d0ca1aa2f7e206fbb9a1bd4f394c4c999ec2" translate="yes" xml:space="preserve">
          <source>Then, assuming you're using the package name &lt;code&gt;eslint-config-myconfig&lt;/code&gt;, you can access the additional config via:</source>
          <target state="translated">次に、パッケージ名 &lt;code&gt;eslint-config-myconfig&lt;/code&gt; を使用しているとすると、次のようにして追加の構成にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f25801971afeae4363e40fabd963bdc80f985e55" translate="yes" xml:space="preserve">
          <source>Then, in your project that wants to use your shareable config, type:</source>
          <target state="translated">そして、共有可能な設定を使いたいプロジェクトで、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="353db37a3c8a86c69c78b807d1c427cfb81575aa" translate="yes" xml:space="preserve">
          <source>Then, you can install the ESLint Yeoman generator:</source>
          <target state="translated">そして、ESLint Yeomanジェネレーターをインストールします。</target>
        </trans-unit>
        <trans-unit id="32c357211ab9b4b485ca19fa3a0a2b2bd4c1fa46" translate="yes" xml:space="preserve">
          <source>There are a few reasons you might want to turn this rule off:</source>
          <target state="translated">このルールをオフにした方がいい理由はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="7429e55770a7db6e1f799e481661c23075ea68a0" translate="yes" xml:space="preserve">
          <source>There are a lot of command line flags for ESLint and this section explains what they do.</source>
          <target state="translated">ESLintにはたくさんのコマンドラインフラグがあります。</target>
        </trans-unit>
        <trans-unit id="80da262ce40592a7a4ec9cf4f30bca5562293bb5" translate="yes" xml:space="preserve">
          <source>There are a lot of unit tests included with ESLint to make sure that we're keeping on top of code quality. This section explains how to run the unit tests.</source>
          <target state="translated">コードの品質を維持するためにESLintに含まれるユニットテストはたくさんあります。ここでは、ユニットテストの実行方法を説明します。</target>
        </trans-unit>
        <trans-unit id="cdec16b05bc1e8b3e8a535ea7297a5e3f4035c95" translate="yes" xml:space="preserve">
          <source>There are also cases where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; can be ambiguous and should be rewritten to more clearly show the author's intent:</source>
          <target state="translated">&lt;code&gt;=&amp;gt;&lt;/code&gt; の使用法があいまいで、作成者の意図をより明確に示すように書き直す必要がある場合もあります。</target>
        </trans-unit>
        <trans-unit id="7ecd3fd5720fb4421416968b3c583504ac473a76" translate="yes" xml:space="preserve">
          <source>There are also some exceptions to these rules:</source>
          <target state="translated">また、これらのルールには例外もあります。</target>
        </trans-unit>
        <trans-unit id="320a38d150f5e795565c18aa62c12c2350485cbd" translate="yes" xml:space="preserve">
          <source>There are also some properties you can access:</source>
          <target state="translated">また、アクセスできる物件もあります。</target>
        </trans-unit>
        <trans-unit id="6665f51b7045a2fee788e7afb911686880b53609" translate="yes" xml:space="preserve">
          <source>There are cases where it may be safe for your application to ignore errors, however only ignore errors if you are confident that some other form of monitoring will help you catch the problem.</source>
          <target state="translated">アプリケーションがエラーを無視しても問題ない場合もありますが、他のモニタリング方法で問題を検出できると確信している場合にのみ、エラーを無視してください。</target>
        </trans-unit>
        <trans-unit id="77159dc5778802775842bc1ad78d4c7a0b0534fa" translate="yes" xml:space="preserve">
          <source>There are five events related to code paths, and you can define event handlers in rules.</source>
          <target state="translated">コードパスに関連するイベントは5つあり、ルールでイベントハンドラを定義することができます。</target>
        </trans-unit>
        <trans-unit id="e2c161633c01783c2c492dc2f82954fa87f98f0e" translate="yes" xml:space="preserve">
          <source>There are four different styles and the default member syntax sort order is:</source>
          <target state="translated">4 つの異なるスタイルがあり、既定のメンバー構文のソート順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="73182a6c9f6d8f8a463d75ad9c8c1f7a1954215f" translate="yes" xml:space="preserve">
          <source>There are many commonly used aliases for &lt;code&gt;this&lt;/code&gt; such as &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;me&lt;/code&gt;. It is desirable to ensure that whichever alias the team agrees upon is used consistently throughout the application.</source>
          <target state="translated">以下のための多くの一般的に使用される別名があります &lt;code&gt;this&lt;/code&gt; ような &lt;code&gt;that&lt;/code&gt; 、 &lt;code&gt;self&lt;/code&gt; または &lt;code&gt;me&lt;/code&gt; 。チームが同意するエイリアスがアプリケーション全体で一貫して使用されるようにすることが望ましいです。</target>
        </trans-unit>
        <trans-unit id="778d71a993fc4934f67d793df316de2759b96d65" translate="yes" xml:space="preserve">
          <source>There are rest parameters in ES2015. We can use that feature for variadic functions instead of the &lt;code&gt;arguments&lt;/code&gt; variable.</source>
          <target state="translated">ES2015には残りのパラメーターがあります。 &lt;code&gt;arguments&lt;/code&gt; 変数の代わりに、可変長関数にその機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="117709bbbf6fc954ac87eb9e1642b49467ac9606" translate="yes" xml:space="preserve">
          <source>There are several common guidelines which require specific indentation of nested blocks and statements, like:</source>
          <target state="translated">のように、入れ子になったブロックや文を特定のインデントを必要とするいくつかの一般的なガイドラインがあります。</target>
        </trans-unit>
        <trans-unit id="09bf0b1004131d5cbb653018ebf059cb68d11044" translate="yes" xml:space="preserve">
          <source>There are several pieces of information that can be configured:</source>
          <target state="translated">設定できる情報はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="1c953a0cd08a66ee80bdb67484900a4f8c19fb94" translate="yes" xml:space="preserve">
          <source>There are shareable configs available for most JSCS presets. The equivalent shareable configs for each JSCS preset are listed in the following table:</source>
          <target state="translated">ほとんどの JSCS プリセットには共有可能な設定があります。各 JSCS プリセットに対応する共有可能なコンフィグを以下の表に示します。</target>
        </trans-unit>
        <trans-unit id="7939cad36b767508efc1de1d7ff66357f07843a6" translate="yes" xml:space="preserve">
          <source>There are some cases where you might want to call a callback function more than once. In those cases this rule may lead to incorrect behavior. In those cases you may want to reserve a special name for those callbacks and not include that in the list of callbacks that trigger warnings.</source>
          <target state="translated">コールバック関数を複数回呼び出したい場合があります。そのような場合は、このルールが正しく動作しない可能性があります。そのような場合は、コールバック関数に特別な名前をつけておき、警告を発生させるコールバック関数のリストには含めないようにするとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="8dbaf6481b7dab508d130fe84b6a20188b6da785" translate="yes" xml:space="preserve">
          <source>There are three primitive types in JavaScript that have wrapper objects: string, number, and boolean. These are represented by the constructors &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt;, respectively. The primitive wrapper types are used whenever one of these primitive values is read, providing them with object-like capabilities such as methods. Behind the scenes, an object of the associated wrapper type is created and then destroyed, which is why you can call methods on primitive values, such as:</source>
          <target state="translated">JavaScriptには、ラッパーオブジェクトを持つプリミティブ型が3つあります。文字列、数値、ブールです。これらは、コンストラクタ &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、および &lt;code&gt;Boolean&lt;/code&gt; によってそれぞれ表されます。プリミティブラッパータイプは、これらのプリミティブ値の1つが読み込まれるたびに使用され、メソッドなどのオブジェクトのような機能を提供します。背後では、関連するラッパータイプのオブジェクトが作成されてから破棄されます。そのため、次のようなプリミティブ値でメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="09b78e56913ec7f5884521cf5e33b733c08a8425" translate="yes" xml:space="preserve">
          <source>There are two formats for a rule's exported &lt;code&gt;schema&lt;/code&gt;. The first is a full JSON Schema object describing all possible options the rule accepts, including the rule's error level as the first argument and any optional arguments thereafter.</source>
          <target state="translated">ルールのエクスポートされた &lt;code&gt;schema&lt;/code&gt; は2つの形式があります。1つ目は、最初の引数としてのルールのエラーレベルとその後のオプションの引数を含む、ルールが受け入れるすべての可能なオプションを説明する完全なJSONスキーマオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="6e4161ef27c6d8d2328512ff0c53aa33ebb66d6d" translate="yes" xml:space="preserve">
          <source>There are two options for this rule:</source>
          <target state="translated">このルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="c5b03151c21194f8185c6c4c16037975222ef285" translate="yes" xml:space="preserve">
          <source>There are two schools of thought in this regard:</source>
          <target state="translated">この点については、2つの考え方があります。</target>
        </trans-unit>
        <trans-unit id="187de8e977c674d5524ac7c3cf7fd7ff80275095" translate="yes" xml:space="preserve">
          <source>There are two ways of defining functions in JavaScript: &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function&lt;/code&gt; expressions. Declarations contain the &lt;code&gt;function&lt;/code&gt; keyword first, followed by a name and then its arguments and the function body, for example:</source>
          <target state="translated">JavaScriptで関数を定義するには、 &lt;code&gt;function&lt;/code&gt; 宣言と &lt;code&gt;function&lt;/code&gt; 式の2つの方法があります。宣言には、最初に &lt;code&gt;function&lt;/code&gt; キーワードが含まれ、次に名前、次にその引数と関数本体が含まれます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1e031938fbb5ab85e074efc0c3921234cc1f1c89" translate="yes" xml:space="preserve">
          <source>There are two ways to create a regular expression:</source>
          <target state="translated">正規表現を作るには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d52e9915f94a31af6aaead1be831dbb80f676371" translate="yes" xml:space="preserve">
          <source>There are two ways to use configuration files.</source>
          <target state="translated">設定ファイルを使用する方法は2つあります。</target>
        </trans-unit>
        <trans-unit id="d1a8bd447439a90516a50974c91e0f6c8ad77c25" translate="yes" xml:space="preserve">
          <source>There are valid reasons to use assignment operators in conditional statements. However, it can be difficult to tell whether a specific assignment was intentional.</source>
          <target state="translated">条件文で代入演算子を使用する正当な理由があります。しかし、特定の代入が意図的に行われたものかどうかを見分けるのは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="4715777b3c61a89e3562896681adc37a424d282e" translate="yes" xml:space="preserve">
          <source>There are, however, some occasions when you must use quotes:</source>
          <target state="translated">しかし、引用符を使わなければならない場面もあります。</target>
        </trans-unit>
        <trans-unit id="eb6f41837f8cfadd5c03780bba3f02ff7b3c971d" translate="yes" xml:space="preserve">
          <source>There are, however, some who prefer to only use braces when there is more than one statement to be executed.</source>
          <target state="translated">しかし、実行される文が複数ある場合には中括弧のみを使用することを好む人もいます。</target>
        </trans-unit>
        <trans-unit id="342cd48e476dc7314107f25dac7c78229501f3ce" translate="yes" xml:space="preserve">
          <source>There is actually a long history of using dangling underscores to indicate &quot;private&quot; members of objects in JavaScript (though JavaScript doesn't have truly private members, this convention served as a warning). This began with SpiderMonkey adding nonstandard methods such as &lt;code&gt;__defineGetter__()&lt;/code&gt;. The intent with the underscores was to make it obvious that this method was special in some way. Since that time, using a single underscore prefix has become popular as a way to indicate &quot;private&quot; members of objects.</source>
          <target state="translated">実際には、ダングリングアンダースコアを使用してJavaScriptのオブジェクトの「プライベート」メンバーを示す長い歴史があります（JavaScriptには本当にプライベートメンバーはありませんが、この規則は警告として機能しました）。これは、SpiderMonkeyが &lt;code&gt;__defineGetter__()&lt;/code&gt; などの非標準のメソッドを追加することから始まりました。アンダースコアの目的は、この方法が何らかの点で特別であることを明確にすることでした。それ以降、オブジェクトの「プライベート」メンバーを示す方法として、単一の下線プレフィックスを使用することが一般的になりました。</target>
        </trans-unit>
        <trans-unit id="4a96991a903b3e1ff68ea9a24be9b087a375a49f" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;Linter.version&lt;/code&gt; property that you can read without instantiating &lt;code&gt;Linter&lt;/code&gt;:</source>
          <target state="translated">あり &lt;code&gt;Linter.version&lt;/code&gt; のあなたはインスタンス化せずに読むことができるという性質 &lt;code&gt;Linter&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="871b96618532f5a624a5eebc653ef9799b4af97b" translate="yes" xml:space="preserve">
          <source>There is an explicit way to create a global variable when needed, by assigning to a property of the global object.</source>
          <target state="translated">必要に応じて、グローバルオブジェクトのプロパティに代入することで、グローバル変数を作成する明示的な方法があります。</target>
        </trans-unit>
        <trans-unit id="a847459418c85beaf5623fd3b6978b33df19c866" translate="yes" xml:space="preserve">
          <source>There is no hard and fast rule about whether empty lines should precede &lt;code&gt;return&lt;/code&gt; statements in JavaScript. However, clearly delineating where a function is returning can greatly increase the readability and clarity of the code. For example:</source>
          <target state="translated">JavaScriptの &lt;code&gt;return&lt;/code&gt; ステートメントの前に空の行を置くかどうかについては、厳格な規則はありません。ただし、関数が返す場所を明確に示すと、コードの可読性と明確性が大幅に向上します。例えば：</target>
        </trans-unit>
        <trans-unit id="7c688c9ecfeeb2e718d9853398cce5aa37907224" translate="yes" xml:space="preserve">
          <source>There is one situation where initializing to &lt;code&gt;undefined&lt;/code&gt; behaves differently than omitting the initialization, and that's when a &lt;code&gt;var&lt;/code&gt; declaration occurs inside of a loop. For example:</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; への初期化が初期化の省略とは異なる動作をする1つの状況があり、それは &lt;code&gt;var&lt;/code&gt; 宣言がループ内で発生したときです。例えば：</target>
        </trans-unit>
        <trans-unit id="f393cd7001d9c02a6a4db52334b4f6aa81c0dd84" translate="yes" xml:space="preserve">
          <source>There may be a part of a Node.js application that is responsible for determining the correct exit code to return upon exiting. In that case, you should turn this rule off to allow proper handling of the exit code.</source>
          <target state="translated">Node.jsアプリケーションの中には、終了時に返すべき正しい終了コードを決定する役割を担っている部分があるかもしれません。その場合は、このルールをオフにして終了コードを適切に処理できるようにしてください。</target>
        </trans-unit>
        <trans-unit id="3f8f96957f0116bd3dee02cc31450b17131c06e6" translate="yes" xml:space="preserve">
          <source>There should be just one variable declaration for all variables in the function. That declaration typically appears at the top of the function.</source>
          <target state="translated">関数内のすべての変数に対して、1つの変数宣言があるはずです。この宣言は通常、関数の先頭に表示されます。</target>
        </trans-unit>
        <trans-unit id="af6c3ae1870f67e9ba1a6645267df7a0ed8e6f39" translate="yes" xml:space="preserve">
          <source>There's a &lt;code&gt;jquery&lt;/code&gt; environment defined in this plugin. To use the environment in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the environment name. So if this plugin were named &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt;, then you would set the environment in your configuration to be &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt;.</source>
          <target state="translated">このプラグインには &lt;code&gt;jquery&lt;/code&gt; 環境が定義されています。ESLintで環境を使用するには、接頭辞のないプラグイン名、スラッシュ、環境名の順に使用します。したがって、このプラグインの名前が &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; の場合、構成の環境を &lt;code&gt;&quot;myplugin/jquery&quot;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="4649a897c49ce8c22f4047b05ff4f46b049d69e6" translate="yes" xml:space="preserve">
          <source>Therefore, for any array &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; and &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; will always return &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">したがって、配列 &lt;code&gt;foo&lt;/code&gt; の場合、 &lt;code&gt;foo.indexOf(NaN)&lt;/code&gt; および &lt;code&gt;foo.lastIndexOf(NaN)&lt;/code&gt; は常に &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ee735b7f7a5f024f90771cc2fdec6e27abf7cb89" translate="yes" xml:space="preserve">
          <source>Therefore, the &lt;code&gt;u&lt;/code&gt; flag lets us work better with regular expressions.</source>
          <target state="translated">したがって、 &lt;code&gt;u&lt;/code&gt; フラグを使用すると、正規表現をより適切に処理できます。</target>
        </trans-unit>
        <trans-unit id="772ede07a4703392f30e23da9503d4982ba7ac6d" translate="yes" xml:space="preserve">
          <source>Therefore, use &lt;code&gt;Number.isNaN()&lt;/code&gt; or global &lt;code&gt;isNaN()&lt;/code&gt; functions to test whether a value is &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;Number.isNaN()&lt;/code&gt; 関数またはグローバル &lt;code&gt;isNaN()&lt;/code&gt; 関数を使用して、値が &lt;code&gt;NaN&lt;/code&gt; かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="201cc4664da2bdb9c50a7d4f0ca2e44472bb57f6" translate="yes" xml:space="preserve">
          <source>These annotations may be used with either single-line or multi-line comments and should follow the same formatting rules as the general comment type. Examples:</source>
          <target state="translated">これらの注釈は、一行または複数行のコメントと一緒に使用することができ、一般的なコメントタイプと同じ書式規則に従う必要があります。例。</target>
        </trans-unit>
        <trans-unit id="4c52137db447105931b557eed8e46933af4bdec4" translate="yes" xml:space="preserve">
          <source>These are the most common scenarios recommended in different style guides:</source>
          <target state="translated">これらは、異なるスタイルガイドで推奨される最も一般的なシナリオです。</target>
        </trans-unit>
        <trans-unit id="acdb0470966c593cea7812a42d4a917d42c23356" translate="yes" xml:space="preserve">
          <source>These can be combined as much as you like. To make all methods exceptions (thereby rendering this rule useless), use &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</source>
          <target state="translated">これらは好きなだけ組み合わせることができます。すべてのメソッドを例外にする（それにより、このルールを無効にする）には、 &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;, &quot;call&quot;, &quot;defineProperty&quot;, &quot;getOwnPropertyDescriptor&quot;, &quot;getPrototypeOf&quot;, &quot;setPrototypeOf&quot;, &quot;isExtensible&quot;, &quot;getOwnPropertyNames&quot;, &quot;preventExtensions&quot;, &quot;delete&quot;] }]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16b0a2f3a34d0787ea10fc5517dc6d1c9a76c309" translate="yes" xml:space="preserve">
          <source>These environments are not mutually exclusive, so you can define more than one at a time.</source>
          <target state="translated">これらの環境は相互に排他的ではないので、一度に複数の環境を定義することができます。</target>
        </trans-unit>
        <trans-unit id="2e07ccde13ac7d3cc1e366526a62fc1dd9f6bdde" translate="yes" xml:space="preserve">
          <source>These examples allow &lt;code&gt;var1&lt;/code&gt; to be overwritten in your code, but disallow it for &lt;code&gt;var2&lt;/code&gt;.</source>
          <target state="translated">これらの例では、コードで &lt;code&gt;var1&lt;/code&gt; を上書きできますが、 &lt;code&gt;var2&lt;/code&gt; は許可しません。</target>
        </trans-unit>
        <trans-unit id="5b4016a79f53202f5d9431f3853fbef74d3b8610" translate="yes" xml:space="preserve">
          <source>These methods return an array of comments that appear directly before, directly after, and inside nodes, respectively. They are useful for rules that need to check comments in relation to a given node or token.</source>
          <target state="translated">これらのメソッドは、それぞれノードの直前、直後、内部に現れるコメントの配列を返します。これらのメソッドは、与えられたノードやトークンに関連してコメントをチェックする必要があるルールに便利です。</target>
        </trans-unit>
        <trans-unit id="9ebcefc4be23db9deefd68d4795e030b4db83239" translate="yes" xml:space="preserve">
          <source>These objects may not:</source>
          <target state="translated">これらのオブジェクトはそうではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="b293d56025264cb725163337a97e77e49487f3f5" translate="yes" xml:space="preserve">
          <source>These objects' responsibilities are:</source>
          <target state="translated">これらのオブジェクトの責任は</target>
        </trans-unit>
        <trans-unit id="dd3da68786bd031bdc775145f224453e0dd6417c" translate="yes" xml:space="preserve">
          <source>These options allow unused expressions &lt;em&gt;only if all&lt;/em&gt; of the code paths either directly change the state (for example, assignment statement) or could have &lt;em&gt;side effects&lt;/em&gt; (for example, function call).</source>
          <target state="translated">これらのオプションは、&lt;em&gt;すべて&lt;/em&gt;のコードパスが状態を直接変更する（たとえば、代入ステートメント）か、&lt;em&gt;副作用&lt;/em&gt;（たとえば、関数呼び出し）を持つ可能性がある&lt;em&gt;場合にのみ&lt;/em&gt;、未使用の式を許可します。</target>
        </trans-unit>
        <trans-unit id="94897999a480e4ff48d62e51753e5de1561ff443" translate="yes" xml:space="preserve">
          <source>These rules from older versions of ESLint (before the &lt;a href=&quot;../user-guide/rule-deprecation&quot;&gt;deprecation policy&lt;/a&gt; existed) have been replaced by newer rules:</source>
          <target state="translated">古いバージョンのESLint（&lt;a href=&quot;../user-guide/rule-deprecation&quot;&gt;非推奨ポリシーが&lt;/a&gt;存在する前）のこれらのルールは、新しいルールに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="d4ca9fe55e32c924b83ce46d998ac795270b1873" translate="yes" xml:space="preserve">
          <source>These rules from older versions of ESLint (before the [deprecation policy](/docs/user-guide/rule-deprecation) existed) have been replaced by newer rules:</source>
          <target state="translated">これらのESLintの古いバージョン([deprecation policy](/docs/user-guide/rule-deprecation)が存在する前)のルールは新しいルールに置き換えられています。</target>
        </trans-unit>
        <trans-unit id="65d41d4fc89b05eb3f426d905efb451686afc534" translate="yes" xml:space="preserve">
          <source>These rules have been deprecated in accordance with the &lt;a href=&quot;../user-guide/rule-deprecation&quot;&gt;deprecation policy&lt;/a&gt;, and replaced by newer rules:</source>
          <target state="translated">これらのルールは、&lt;a href=&quot;../user-guide/rule-deprecation&quot;&gt;非推奨ポリシー&lt;/a&gt;に従って非推奨になり、新しいルールに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="1c10097ffacc1c485ac6032b4e5f64b78ed11f9f" translate="yes" xml:space="preserve">
          <source>These rules have been deprecated in accordance with the [deprecation policy](/docs/user-guide/rule-deprecation), and replaced by newer rules:</source>
          <target state="translated">これらのルールは、[deprecation policy](/docs/user-guide/rule-deprecation)に従って非推奨となり、新しいルールに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="5b4a9c4f9cab970df6595988dd4e0581f563d2df" translate="yes" xml:space="preserve">
          <source>These rules relate to ES6, also known as ES2015:</source>
          <target state="translated">これらのルールは、ES2015とも呼ばれるES6に関するものです。</target>
        </trans-unit>
        <trans-unit id="94068d755b38f00b794f755ab1776f6ba8d5af3d" translate="yes" xml:space="preserve">
          <source>These rules relate to better ways of doing things to help you avoid problems:</source>
          <target state="translated">これらのルールは、あなたが問題を回避するためのより良い方法に関連しています。</target>
        </trans-unit>
        <trans-unit id="6407bf99d5998c9e0fef54717f8eb0ec5ebfd745" translate="yes" xml:space="preserve">
          <source>These rules relate to code running in Node.js, or in browsers with CommonJS:</source>
          <target state="translated">これらのルールは、Node.jsやCommonJSを搭載したブラウザで実行されるコードに関連しています。</target>
        </trans-unit>
        <trans-unit id="2c800b49f52cfb2c02793919534a03b1de5ad3a3" translate="yes" xml:space="preserve">
          <source>These rules relate to possible syntax or logic errors in JavaScript code:</source>
          <target state="translated">これらのルールは、JavaScript コードで起こりうる構文エラーやロジックエラーに関連しています。</target>
        </trans-unit>
        <trans-unit id="7d762fa25dfbf7bdd07460cee8d398e88a51d344" translate="yes" xml:space="preserve">
          <source>These rules relate to strict mode directives:</source>
          <target state="translated">これらの規則は、厳格なモードディレクティブに関連しています。</target>
        </trans-unit>
        <trans-unit id="c8321a3f35b15048cb55738fb106514521cfe231" translate="yes" xml:space="preserve">
          <source>These rules relate to style guidelines, and are therefore quite subjective:</source>
          <target state="translated">これらのルールは、スタイルガイドラインに関連するものであり、したがって、非常に主観的なものです。</target>
        </trans-unit>
        <trans-unit id="0d081ea96820ff5654d3db473d43162f105b1f8c" translate="yes" xml:space="preserve">
          <source>These rules relate to variable declarations:</source>
          <target state="translated">これらの規則は、変数の宣言に関するものです。</target>
        </trans-unit>
        <trans-unit id="cfba5d7e75af3b7e2807c06e5034c9af4096fa98" translate="yes" xml:space="preserve">
          <source>Things to Avoid</source>
          <target state="translated">避けるべきこと</target>
        </trans-unit>
        <trans-unit id="1988fde0b51715dd909d42c7a4aa01100331ad2f" translate="yes" xml:space="preserve">
          <source>Think you found a problem? We'd love to hear about it. This section explains how to submit a bug, the type of information we need to properly verify it, and the overall process.</source>
          <target state="translated">何か問題が見つかりましたか?ぜひお聞かせください。このセクションでは、バグの提出方法、適切に検証するために必要な情報の種類、全体的なプロセスについて説明します。</target>
        </trans-unit>
        <trans-unit id="f06f2b5e218ca06ae1bd67c1145935c9e1aabdba" translate="yes" xml:space="preserve">
          <source>Thinking of comments in the context of tokens is more predictable and easier to reason about than thinking about comment tokens in the context of AST nodes</source>
          <target state="translated">トークンのコンテキストでコメントを考える方が、ASTノードのコンテキストでコメントトークンを考えるよりも予測しやすく、推論しやすいです。</target>
        </trans-unit>
        <trans-unit id="2050eef925ba3c231aec703d38a33757acef6aa9" translate="yes" xml:space="preserve">
          <source>Third, it creates the looping path from &lt;code&gt;body&lt;/code&gt; segment to &lt;code&gt;update&lt;/code&gt; segment. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">3番目に、 &lt;code&gt;body&lt;/code&gt; セグメントから &lt;code&gt;update&lt;/code&gt; セグメントへのループパスを作成します。現時点では、次のセグメントはすでに存在しているため、 &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; イベントは発生しません。それは発火 &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; 代わりに。</target>
        </trans-unit>
        <trans-unit id="415be4f10478e1046c67a83032a6f4a8f849fe2a" translate="yes" xml:space="preserve">
          <source>This allows you to avoid retyping error messages. It also prevents errors reported in different sections of your rule from having out-of-date messages.</source>
          <target state="translated">これにより、エラーメッセージの再入力を避けることができます。また、ルールの異なるセクションで報告されたエラーが古いメッセージになるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="13fa28b1d868c6cd569942c00fe12d33c91d2c69" translate="yes" xml:space="preserve">
          <source>This automatically starts Mocha and runs all tests in the &lt;code&gt;tests&lt;/code&gt; directory. You need only add yours and it will automatically be picked up when running tests.</source>
          <target state="translated">これにより、Mochaが自動的に起動し、 &lt;code&gt;tests&lt;/code&gt; ディレクトリ内のすべてのテストが実行されます。あなたはあなたのものを追加するだけでよく、テストの実行時に自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="cb4bd44fc1b6c85e9764f5ab63ec69c2b7dbea0b" translate="yes" xml:space="preserve">
          <source>This behavior was relying on comment attachment happening at the parser level, which does not happen anymore, to ensure that all comments would be accounted for</source>
          <target state="translated">この動作は、コメントの添付がパーサレベルで行われることに依存していましたが、現在は行われていません。</target>
        </trans-unit>
        <trans-unit id="f18fe7d0f8dbbc8445c9163810cbe362da97229f" translate="yes" xml:space="preserve">
          <source>This change was made to help new ESLint users who are frequently confused that ESLint does nothing by default besides reporting parser errors. We anticipate this change will have minimal impact on most established users because you're more likely to have configuration files already.</source>
          <target state="translated">この変更は、ESLintがパーサエラーを報告する以外にデフォルトでは何もしないことに混乱している新しいESLintユーザーを助けるために行われました。すでに設定ファイルを持っている可能性が高いので、この変更はほとんどの既存のユーザーには影響がないと予想しています。</target>
        </trans-unit>
        <trans-unit id="eea20aaf3851e50d7d18c459c1d15f06a9f1fe7e" translate="yes" xml:space="preserve">
          <source>This class depends on the Node.js &lt;code&gt;fs&lt;/code&gt; module and the file system, so you cannot use it in browsers. If you want to lint code on browsers, use the &lt;a href=&quot;#linter&quot;&gt;Linter&lt;/a&gt; class instead.</source>
          <target state="translated">このクラスは &lt;code&gt;fs&lt;/code&gt; モジュールとファイルシステムに依存しているため、ブラウザーで使用することはできません。ブラウザでコードをリントしたい場合は、代わりに&lt;a href=&quot;#linter&quot;&gt;Linter&lt;/a&gt;クラスを使用してください。</target>
        </trans-unit>
        <trans-unit id="bc26638966505856d54d65c1178254da87bced09" translate="yes" xml:space="preserve">
          <source>This code could appear in any module and will stop the entire application when &lt;code&gt;somethingBadHappened&lt;/code&gt; is truthy. This doesn't give the application any chance to respond to the error. It's usually better to throw an error and allow the application to handle it appropriately:</source>
          <target state="translated">このコードはどのモジュールにも現れる可能性があり、 &lt;code&gt;somethingBadHappened&lt;/code&gt; が真実である場合にアプリケーション全体を停止します。これは、アプリケーションがエラーに応答する機会を与えません。通常は、エラーをスローして、アプリケーションで適切に処理できるようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a1a606524e7605868cb030ae98dda8a50f6c11c" translate="yes" xml:space="preserve">
          <source>This code is an example of a good use of &lt;code&gt;bind()&lt;/code&gt; for setting the value of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">このコードは、 &lt;code&gt;this&lt;/code&gt; の値を設定 &lt;code&gt;bind()&lt;/code&gt; ためのbind（）の適切な使用例です。</target>
        </trans-unit>
        <trans-unit id="188ba6fbc8e6fe291e33a72f0675afd9594eb52a" translate="yes" xml:space="preserve">
          <source>This code is equivalent to:</source>
          <target state="translated">このコードはこれに相当します。</target>
        </trans-unit>
        <trans-unit id="753da87c758e9ab0fcb2b2a117dfb70f5117fba4" translate="yes" xml:space="preserve">
          <source>This code is likely the result of refactoring where a variable was removed from the concatenation (such as &lt;code&gt;&quot;a&quot; + b + &quot;b&quot;&lt;/code&gt;). In such a case, the concatenation isn't important and the code can be rewritten as:</source>
          <target state="translated">このコードは、変数が連結から削除されたリファクタリングの結果である可能性があります（ &lt;code&gt;&quot;a&quot; + b + &quot;b&quot;&lt;/code&gt; ）。そのような場合、連結は重要ではなく、コードは次のように書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="9f3828fead792474a4d824e09a1e9cb9a66c9622" translate="yes" xml:space="preserve">
          <source>This code looks like it will sum the results of calling &lt;code&gt;getPageLength(1)&lt;/code&gt; and &lt;code&gt;getPageLength(2)&lt;/code&gt;, but in reality the final value of &lt;code&gt;totalLength&lt;/code&gt; will only be the length of one of the two pages. The bug is in the statement &lt;code&gt;totalLength += await getPageLength(pageNum);&lt;/code&gt;. This statement first reads an initial value of &lt;code&gt;totalLength&lt;/code&gt;, then calls &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; and waits for that Promise to fulfill. Finally, it sets the value of &lt;code&gt;totalLength&lt;/code&gt; to the sum of &lt;code&gt;await getPageLength(pageNum)&lt;/code&gt; and the &lt;em&gt;initial&lt;/em&gt; value of &lt;code&gt;totalLength&lt;/code&gt;. If the &lt;code&gt;totalLength&lt;/code&gt; variable is updated in a separate function call during the time that the &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; Promise is pending, that update will be lost because the new value is overwritten without being read.</source>
          <target state="translated">このコードは、 &lt;code&gt;getPageLength(1)&lt;/code&gt; および &lt;code&gt;getPageLength(2)&lt;/code&gt; を呼び出した結果を合計するように見えますが、実際には、 &lt;code&gt;totalLength&lt;/code&gt; の最終値は、2ページのうちの1つのページの長さのみになります。バグはステートメント &lt;code&gt;totalLength += await getPageLength(pageNum);&lt;/code&gt; 。このステートメントは、最初に &lt;code&gt;totalLength&lt;/code&gt; の初期値を読み取り、次に &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; を呼び出し、そのPromiseが満たされるのを待ちます。最後に、 &lt;code&gt;totalLength&lt;/code&gt; の値を &lt;code&gt;await getPageLength(pageNum)&lt;/code&gt; とtotalLengthの&lt;em&gt;初期&lt;/em&gt;値の &lt;code&gt;totalLength&lt;/code&gt; ます。もし &lt;code&gt;totalLength&lt;/code&gt; 変数は、 &lt;code&gt;getPageLength(pageNum)&lt;/code&gt; プロミスが保留されている間に別の関数呼び出しで更新されます。新しい値が読み取られずに上書きされるため、その更新は失われます。</target>
        </trans-unit>
        <trans-unit id="684f202df475b56b50fb6fd729383d048e7a34fd" translate="yes" xml:space="preserve">
          <source>This command is used for intensive profiling of ESLint using Chrome Developer Tools. It starts a development server that runs through three profiles:</source>
          <target state="translated">このコマンドは、Chrome Developer Toolsを使用してESLintを集中的にプロファイリングするために使用します。3つのプロファイルを介して実行される開発サーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="ad05d4ce57e7c2b8d71120892681f0fd7b8a2986" translate="yes" xml:space="preserve">
          <source>This comment specifies the &quot;double&quot; option for the &lt;a href=&quot;../rules/quotes&quot;&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/a&gt; rule. The first item in the array is always the rule severity (number or string).</source>
          <target state="translated">このコメントは、&lt;a href=&quot;../rules/quotes&quot;&gt; &lt;code&gt;quotes&lt;/code&gt; &lt;/a&gt;ルールの「ダブル」オプションを指定します。配列の最初の項目は常にルールの重要度（数値または文字列）です。</target>
        </trans-unit>
        <trans-unit id="c7f36a8542f8ca497d5ce67e7924c214e3e2553a" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines after all directive prologues, like the &lt;a href=&quot;lines-around-directive&quot;&gt;lines-around-directive&lt;/a&gt; rule.</source>
          <target state="translated">この構成では、&lt;a href=&quot;lines-around-directive&quot;&gt;lines-around-directive&lt;/a&gt;ルールのように、すべてのディレクティブプロローグの後に空白行が必要です。</target>
        </trans-unit>
        <trans-unit id="9dbff86ed4fd7400b47ff47a0dd5eda756a4d90b" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines after every sequence of variable declarations, like the &lt;a href=&quot;newline-after-var&quot;&gt;newline-after-var&lt;/a&gt; rule.</source>
          <target state="translated">この構成では、&lt;a href=&quot;newline-after-var&quot;&gt;newline-after-var&lt;/a&gt;ルールのように、一連の変数宣言の後に空白行が必要になります。</target>
        </trans-unit>
        <trans-unit id="1e26ce16017121a05fb352bf06244e7be23d0979" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines before all &lt;code&gt;return&lt;/code&gt; statements, like the &lt;a href=&quot;newline-before-return&quot;&gt;newline-before-return&lt;/a&gt; rule.</source>
          <target state="translated">この構成では、&lt;a href=&quot;newline-before-return&quot;&gt;newline-before-return&lt;/a&gt;ルールのように、すべての &lt;code&gt;return&lt;/code&gt; ステートメントの前に空白行が必要です。</target>
        </trans-unit>
        <trans-unit id="edd29e3ad0ea0fd7c3b1da1138e750163dfb1aad" translate="yes" xml:space="preserve">
          <source>This configuration would require blank lines between clauses in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">この構成では、 &lt;code&gt;switch&lt;/code&gt; ステートメントの句の間に空白行が必要になります。</target>
        </trans-unit>
        <trans-unit id="6b66a4e4cfa3e14529aa4fa898e5f7863716da98" translate="yes" xml:space="preserve">
          <source>This confusion led to the suggestion that you always use the radix parameter to &lt;code&gt;parseInt()&lt;/code&gt; to eliminate unintended consequences. So instead of doing this:</source>
          <target state="translated">この混乱により、意図せず結果を排除するために常にradixパラメーターを &lt;code&gt;parseInt()&lt;/code&gt; に使用するように提案されました。したがって、これを行う代わりに：</target>
        </trans-unit>
        <trans-unit id="83e16d377b13bc51965962233959b781d483d56b" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;.eslintrc.json&lt;/code&gt; with the equivalent rules from &lt;code&gt;.jscsrc.json&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;.eslintrc.json&lt;/code&gt; の同等のルールを使用して.eslintrc.jsonが作成され &lt;code&gt;.jscsrc.json&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35b6118aa09ead4292a552cdefd4bf660c36121a" translate="yes" xml:space="preserve">
          <source>This defines two global variables, &lt;code&gt;var1&lt;/code&gt; and &lt;code&gt;var2&lt;/code&gt;. If you want to optionally specify that these global variables can be written to (rather than only being read), then you can set each with a &lt;code&gt;&quot;writable&quot;&lt;/code&gt; flag:</source>
          <target state="translated">これは2つのグローバル変数 &lt;code&gt;var1&lt;/code&gt; と &lt;code&gt;var2&lt;/code&gt; を定義します。これらのグローバル変数を（読み取るだけでなく）書き込むことができるようにオプションで指定したい場合は、それぞれに &lt;code&gt;&quot;writable&quot;&lt;/code&gt; フラグを設定できます。</target>
        </trans-unit>
        <trans-unit id="3ca397cac4d7710b96570663c5edc9bb83de7535" translate="yes" xml:space="preserve">
          <source>This document was written based on the implementation of &lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;, a fork of &lt;a href=&quot;https://github.com/estools/escope&quot;&gt;escope&lt;/a&gt;, and deprecates some members ESLint is not using.</source>
          <target state="translated">この文書はの実装に基づいて書かれていた&lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslintスコープ&lt;/a&gt;のフォーク&lt;a href=&quot;https://github.com/estools/escope&quot;&gt;escope&lt;/a&gt;、およびESLintが使用されていない一部のメンバーを非難します。</target>
        </trans-unit>
        <trans-unit id="2b59eaeb1ba84dbe4d0f62e580e35a843870fadf" translate="yes" xml:space="preserve">
          <source>This does not apply to ES modules since the module code is implicitly in &lt;code&gt;strict&lt;/code&gt; mode.</source>
          <target state="translated">モジュールコードは暗黙的に &lt;code&gt;strict&lt;/code&gt; モードであるため、これはESモジュールには適用されません。</target>
        </trans-unit>
        <trans-unit id="98630f364b82526bebf7c8f187b15017bce5bf8a" translate="yes" xml:space="preserve">
          <source>This edit information means replacing the range of the &lt;code&gt;range&lt;/code&gt; property by the &lt;code&gt;text&lt;/code&gt; property value. It's like &lt;code&gt;sourceCodeText.slice(0, edit.range[0]) + edit.text + sourceCodeText.slice(edit.range[1])&lt;/code&gt;. Therefore, it's an add if the &lt;code&gt;range[0]&lt;/code&gt; and &lt;code&gt;range[1]&lt;/code&gt; property values are the same value, and it's removal if the &lt;code&gt;text&lt;/code&gt; property value is empty string.</source>
          <target state="translated">この編集情報は、 &lt;code&gt;range&lt;/code&gt; プロパティの範囲を &lt;code&gt;text&lt;/code&gt; プロパティ値に置き換えることを意味します。これは、 &lt;code&gt;sourceCodeText.slice(0, edit.range[0]) + edit.text + sourceCodeText.slice(edit.range[1])&lt;/code&gt; です。したがって、 &lt;code&gt;range[0]&lt;/code&gt; プロパティ値と &lt;code&gt;range[1]&lt;/code&gt; プロパティ値が同じ値の場合は追加であり、 &lt;code&gt;text&lt;/code&gt; プロパティ値が空の文字列の場合は削除されます。</target>
        </trans-unit>
        <trans-unit id="fb51c33d469f4a38ec64dfb8e217007e9ea2b0d3" translate="yes" xml:space="preserve">
          <source>This enables Node.js and Mocha environments.</source>
          <target state="translated">これにより、Node.jsやMocha環境が可能になります。</target>
        </trans-unit>
        <trans-unit id="96d81fc1760eedae232eea6c704c64e8eb216135" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.</source>
          <target state="translated">このエラーは、期待した通りに動作しない可能性のあるコードを強調するために発生します。このエラーを修正しなければ、あなたのコードは問題なく動作するかもしれませんが、状況によっては予期せぬ動作をする可能性があります。</target>
        </trans-unit>
        <trans-unit id="1319046b42ad8a423f26271e5a8f9e3897afb48f" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.</source>
          <target state="translated">このエラーは、潜在的に混乱を招く可能性のある、無意味なコードの一部を強調するために発生します。何かをそれ自身と比較する必要がある状況はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="e531d4e1a4e5ab163fb0aa73581a1e29f4d1b370" translate="yes" xml:space="preserve">
          <source>This error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the &lt;code&gt;eval&lt;/code&gt; function.</source>
          <target state="translated">このエラーは、悪い習慣の使用を強調するために発生します。関数コンストラクターに文字列を渡すことにより、 &lt;code&gt;eval&lt;/code&gt; 関数を呼び出すときに必要な方法でエンジンがその文字列を解析する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2f1895eb1d8a20e008d9ead1693d3546a812ebc" translate="yes" xml:space="preserve">
          <source>This error occurs when a label is used to mark a statement that is not an iteration or switch</source>
          <target state="translated">このエラーは、ラベルが反復やスイッチではない文をマークするために使用された場合に発生します。</target>
        </trans-unit>
        <trans-unit id="0066921471bb97a77df66b0fbbcd0a1701ecc926" translate="yes" xml:space="preserve">
          <source>This event is always fired when the next segment has existed already. That timing is the end of loops mainly.</source>
          <target state="translated">このイベントは、すでに次のセグメントが存在しているときに必ず発生します。このタイミングは、主にループの終了時です。</target>
        </trans-unit>
        <trans-unit id="bb4b12cc9ff8e27a5e1e8dc331ee5e01a59914a3" translate="yes" xml:space="preserve">
          <source>This example doesn't need to include separators as &lt;code&gt;path.join()&lt;/code&gt; will do it in the most appropriate manner. Alternately, you can use &lt;code&gt;path.resolve()&lt;/code&gt; to retrieve the fully-qualified path:</source>
          <target state="translated">&lt;code&gt;path.join()&lt;/code&gt; が最も適切な方法で行うため、この例ではセパレータを含める必要はありません。または、 &lt;code&gt;path.resolve()&lt;/code&gt; を使用して完全修飾パスを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="a1489f70baffad0b363356684d7ebc01fe6e95fe" translate="yes" xml:space="preserve">
          <source>This example is checking whether or not the parameter &lt;code&gt;cb&lt;/code&gt; is called in every path. Instances of &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt; are shared to every rule. So a rule must not modify those instances. Please use a map of information instead.</source>
          <target state="translated">この例では、すべてのパスでパラメーター &lt;code&gt;cb&lt;/code&gt; が呼び出されているかどうかを確認しています。 &lt;code&gt;CodePath&lt;/code&gt; および &lt;code&gt;CodePathSegment&lt;/code&gt; のインスタンスは、すべてのルールで共有されます。したがって、ルールはそれらのインスタンスを変更してはなりません。代わりに情報のマップを使用してください。</target>
        </trans-unit>
        <trans-unit id="6b1cbc4d68b7ab7330711ad6c1fdf27c26b1979f" translate="yes" xml:space="preserve">
          <source>This example is the same as the last example, only it uses the numeric codes instead of the string values. The &lt;code&gt;eqeqeq&lt;/code&gt; rule is off and the &lt;code&gt;curly&lt;/code&gt; rule is set to be an error.</source>
          <target state="translated">この例は前の例と同じですが、文字列値の代わりに数値コードを使用しています。 &lt;code&gt;eqeqeq&lt;/code&gt; のルールがオフで、 &lt;code&gt;curly&lt;/code&gt; ルールがエラーに設定されています。</target>
        </trans-unit>
        <trans-unit id="5b80ceb7cc1a3b04b54119a40781bdb6e7bf6522" translate="yes" xml:space="preserve">
          <source>This example uses the configuration file at &lt;code&gt;~/my-eslint.json&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;~/my-eslint.json&lt;/code&gt; ある構成ファイルを使用しています。</target>
        </trans-unit>
        <trans-unit id="5750c517a5090dcd054e93a3ee543572116cb885" translate="yes" xml:space="preserve">
          <source>This fixer can just select a quote type arbitrarily. If it guesses wrong, the resulting code will be automatically reported and fixed by the &lt;a href=&quot;../rules/quotes&quot;&gt;&lt;code&gt;quotes&lt;/code&gt;&lt;/a&gt; rule.</source>
          <target state="translated">このフィクサーは、見積もりタイプを任意に選択できます。推測が間違っている場合、結果のコードは自動的に報告され、&lt;a href=&quot;../rules/quotes&quot;&gt; &lt;code&gt;quotes&lt;/code&gt; &lt;/a&gt;ルールによって修正されます。</target>
        </trans-unit>
        <trans-unit id="72e5ad7dfae2aad2273d8fb43485335becf7a8e7" translate="yes" xml:space="preserve">
          <source>This flag can be useful for integrations (e.g. editor plugins) which need to autofix text from the command line without saving it to the filesystem.</source>
          <target state="translated">このフラグは、ファイルシステムに保存せずにコマンドラインからテキストを自動修正する必要がある統合(エディタ・プラグインなど)に便利です。</target>
        </trans-unit>
        <trans-unit id="157309b8637b779bbae6ea2553e72ed4cf1ac2da" translate="yes" xml:space="preserve">
          <source>This guide is intended for anyone who wants to contribute to an ESLint project. Please read it carefully as it answers a lot of the questions many newcomers have when first working with our projects.</source>
          <target state="translated">このガイドはESLintプロジェクトに貢献したい人のためのものです。初めてESLintプロジェクトに参加する人が疑問に思うことの多くが書かれていますので、よく読んでください。</target>
        </trans-unit>
        <trans-unit id="253a5fabdebd34fd1ff274b7348e9288f83d7161" translate="yes" xml:space="preserve">
          <source>This guide is intended for those who wish to use ESLint as an end-user. If you're looking for how to extend ESLint or work with the ESLint source code, please see the &lt;a href=&quot;../developer-guide&quot;&gt;Developer Guide&lt;/a&gt;.</source>
          <target state="translated">このガイドは、ESLintをエンドユーザーとして使用したいユーザーを対象としています。ESLintの拡張方法やESLintソースコードの操作方法をお探しの場合は、&lt;a href=&quot;../developer-guide&quot;&gt;デベロッパーガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="473f2b9ad42cc05ec316de78004da7a5bf503dd5" translate="yes" xml:space="preserve">
          <source>This guide is intended for those who wish to:</source>
          <target state="translated">このガイドは、そんな方を対象にしています。</target>
        </trans-unit>
        <trans-unit id="9ce127fc5333e8fad7ca9180cee5cf2786869645" translate="yes" xml:space="preserve">
          <source>This installs the ESLint CLI from the npm repository. To run ESLint, use the following format:</source>
          <target state="translated">これはnpmリポジトリからESLint CLIをインストールします。ESLintを実行するには、以下のフォーマットを使用します。</target>
        </trans-unit>
        <trans-unit id="6d6a6a6ef3fa256f73c341751311b151c76aafa7" translate="yes" xml:space="preserve">
          <source>This is a convenience method similar to &lt;code&gt;Linter#defineRule&lt;/code&gt;, except that it allows you to define many rules at once using an object.</source>
          <target state="translated">これは、オブジェクトを使用して一度に多くのルールを定義できることを除いて、 &lt;code&gt;Linter#defineRule&lt;/code&gt; に似た便利なメソッドです。</target>
        </trans-unit>
        <trans-unit id="11670f5644a3f050b8ea016868b68ee8847819a8" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;CLIEngine&lt;/code&gt; that is used to output fixes from &lt;code&gt;report&lt;/code&gt; to disk. It does by looking for files that have an &lt;code&gt;output&lt;/code&gt; property in their results. Here's an example:</source>
          <target state="translated">これは &lt;code&gt;CLIEngine&lt;/code&gt; の静的関数で、 &lt;code&gt;report&lt;/code&gt; からディスクに修正を出力するために使用されます。結果に &lt;code&gt;output&lt;/code&gt; プロパティが含まれているファイルを検索することで実行します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1adc98f9996e37b1c7669ea22572879ca414a9b1" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;CLIEngine&lt;/code&gt;. It can be used to filter out all the non error messages from the report object.</source>
          <target state="translated">これは &lt;code&gt;CLIEngine&lt;/code&gt; の静的関数です。レポートオブジェクトからエラー以外のすべてのメッセージを除外するために使用できます。</target>
        </trans-unit>
        <trans-unit id="411339a1879450f98c5e40e4c8f17c9ae2ac5b07" translate="yes" xml:space="preserve">
          <source>This is a static function on &lt;code&gt;SourceCode&lt;/code&gt; that is used to split the source code text into an array of lines.</source>
          <target state="translated">これは、ソースコードテキストを行の配列に分割するために使用される &lt;code&gt;SourceCode&lt;/code&gt; の静的関数です。</target>
        </trans-unit>
        <trans-unit id="5fdecc207ab12083b97a7f33edbcb0861fcaf254" translate="yes" xml:space="preserve">
          <source>This is a static method.</source>
          <target state="translated">これは静的メソッドです。</target>
        </trans-unit>
        <trans-unit id="9e3f9a85b2f15c8a384321357b89de4db88c52fb" translate="yes" xml:space="preserve">
          <source>This is a static property.</source>
          <target state="translated">これは静的なプロパティです。</target>
        </trans-unit>
        <trans-unit id="5c6b39c351ca401855c1034cdb4244faf9090c89" translate="yes" xml:space="preserve">
          <source>This is also valid:</source>
          <target state="translated">これも有効です。</target>
        </trans-unit>
        <trans-unit id="05cabcf8fe7c5a7502ad5f2210a082e0f0df43f2" translate="yes" xml:space="preserve">
          <source>This is an option to avoid conflicting with &lt;code&gt;no-use-before-define&lt;/code&gt; rule (without &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; option). If &lt;code&gt;true&lt;/code&gt; is specified, this rule will ignore variables that are read between the declaration and the first assignment. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;no-use-before-define&lt;/code&gt; ルールとの競合を回避するためのオプションです（ &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; オプションなし）。 &lt;code&gt;true&lt;/code&gt; が指定されている場合、このルールは宣言と最初の割り当ての間で読み取られる変数を無視します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0f2e67931876380560ac0e1af9b3fd1d55a7d952" translate="yes" xml:space="preserve">
          <source>This is called a Yoda condition because it reads as, &quot;if red equals the color&quot;, similar to the way the Star Wars character Yoda speaks. Compare to the other way of arranging the operands:</source>
          <target state="translated">これは、スターウォーズのキャラクターヨーダの話し方に似ていて、「赤が色に等しい場合」と読めるので、ヨーダ条件と呼ばれています。オペランドを配置する他の方法と比較してみてください。</target>
        </trans-unit>
        <trans-unit id="f9f1cbf0a10293e94b068250d8c44dd714c9617f" translate="yes" xml:space="preserve">
          <source>This is considered an implied &lt;code&gt;eval()&lt;/code&gt; because a string of JavaScript code is passed in to be interpreted. The same can be done with &lt;code&gt;setInterval()&lt;/code&gt; and &lt;code&gt;execScript()&lt;/code&gt;. Both interpret the JavaScript code in the global scope. For both &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt;, the first argument can also be a function, and that is considered safer and is more performant:</source>
          <target state="translated">JavaScriptコードの文字列が渡されて解釈されるため、これは暗黙の &lt;code&gt;eval()&lt;/code&gt; と見なされます。 &lt;code&gt;setInterval()&lt;/code&gt; および &lt;code&gt;execScript()&lt;/code&gt; でも同じことができます。どちらもグローバルスコープのJavaScriptコードを解釈します。 &lt;code&gt;setTimeout()&lt;/code&gt; と &lt;code&gt;setInterval()&lt;/code&gt; の両方で、最初の引数を関数にすることもできます。これは、より安全でパフォーマンスが高いと見なされています。</target>
        </trans-unit>
        <trans-unit id="885353f2c68ea0bab26fa60d3a09af64f1ec283e" translate="yes" xml:space="preserve">
          <source>This is considered by many to be a bad practice due to the difficulty in debugging and reading these types of functions.</source>
          <target state="translated">このような機能をデバッグしたり、読み込んだりすることが困難なために、悪習とされることが多いと考えられています。</target>
        </trans-unit>
        <trans-unit id="71789ba820d3432452cd5210c7e76d1350d5fa8c" translate="yes" xml:space="preserve">
          <source>This is not expected to cause breakage. However, it will likely result in larger report locations than before. For example, if a rule reports the root node of the AST, the reported problem's range will be the entire program. In some integrations, this could result in a poor user experience (e.g. if the entire program is highlighted to indicate an error).</source>
          <target state="translated">これにより、破損することはないと思われます。しかし、以前よりも報告される場所が大きくなる可能性が高いです。例えば、あるルールがASTのルートノードをレポートする場合、レポートされる問題の範囲はプログラム全体になります。いくつかの統合では、この結果、ユーザーエクスペリエンスが悪くなる可能性があります(例えば、エラーを示すためにプログラム全体がハイライトされている場合など)。</target>
        </trans-unit>
        <trans-unit id="09772e314d49341cf87eb2642be70a9dc5fc7d9f" translate="yes" xml:space="preserve">
          <source>This is the default option.</source>
          <target state="translated">これはデフォルトのオプションです。</target>
        </trans-unit>
        <trans-unit id="d56606d1292924eedc2be3d66c63677095b21441" translate="yes" xml:space="preserve">
          <source>This is the default option. It disallows assignments unless they are enclosed in parentheses.</source>
          <target state="translated">これはデフォルトのオプションです。括弧で囲まれていない限り、割り当てを無効にします。</target>
        </trans-unit>
        <trans-unit id="9ee2c2a8cccc55fcecc1d76de320e24ae82e812d" translate="yes" xml:space="preserve">
          <source>This is the default option. It enforces spacing after semicolons and disallows spacing before semicolons.</source>
          <target state="translated">これはデフォルトのオプションです。セミコロンの後の間隔を強制し、セミコロンの前の間隔を無効にします。</target>
        </trans-unit>
        <trans-unit id="8c3fab8ba68001a6f97fcb8826756ef27d34444f" translate="yes" xml:space="preserve">
          <source>This is used to disambiguate the division operator to not confuse users.</source>
          <target state="translated">これは、ユーザーを混乱させないために、分割演算子の曖昧性を解消するために使用されます。</target>
        </trans-unit>
        <trans-unit id="34f305c3c8978f968bfdd0149b0fd14a4716185a" translate="yes" xml:space="preserve">
          <source>This is used to disambiguate the slash operator and facilitates more readable code.</source>
          <target state="translated">これは、スラッシュ演算子の曖昧さを解消し、より読みやすいコードを容易にするために使用されます。</target>
        </trans-unit>
        <trans-unit id="8bd301643debec8b3d995a82000f4930e1a7b0d5" translate="yes" xml:space="preserve">
          <source>This is valid as well:</source>
          <target state="translated">これも有効です。</target>
        </trans-unit>
        <trans-unit id="3cad551b2177908dacdd49bf4d5fd3dc7d354609" translate="yes" xml:space="preserve">
          <source>This may look alright at first sight, but this code in fact throws a syntax error in ECMAScript 5 strict mode. This happens because &lt;code&gt;1e2&lt;/code&gt; and &lt;code&gt;100&lt;/code&gt; are coerced into strings before getting used as the property name. Both &lt;code&gt;String(1e2)&lt;/code&gt; and &lt;code&gt;String(100)&lt;/code&gt; happen to be equal to &lt;code&gt;&quot;100&quot;&lt;/code&gt;, which causes the &quot;Duplicate data property in object literal not allowed in strict mode&quot; error. Issues like that can be tricky to debug, so some prefer to require quotes around all property names.</source>
          <target state="translated">これは一見大丈夫に見えるかもしれませんが、実際にはこのコードはECMAScript 5 strictモードで構文エラーをスローします。これは、 &lt;code&gt;1e2&lt;/code&gt; と &lt;code&gt;100&lt;/code&gt; がプロパティ名として使用される前に文字列に強制変換されるために発生します。 &lt;code&gt;String(1e2)&lt;/code&gt; と &lt;code&gt;String(100)&lt;/code&gt; はどちらも &lt;code&gt;&quot;100&quot;&lt;/code&gt; に等しいため、「オブジェクトリテラルのデータプロパティの重複は、厳密モードでは許可されていません」というエラーが発生します。このような問題はデバッグが難しいため、すべてのプロパティ名を引用符で囲む必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="5f324b335e29b3bc2325916661c3691bcbdcc494" translate="yes" xml:space="preserve">
          <source>This may look like a &lt;code&gt;return&lt;/code&gt; statement that returns an object literal, however, the JavaScript engine will interpret this code as:</source>
          <target state="translated">これはオブジェクトリテラルを返す &lt;code&gt;return&lt;/code&gt; ステートメントのように見えますが、JavaScriptエンジンはこのコードを次のように解釈します。</target>
        </trans-unit>
        <trans-unit id="881bb06811a5f34f6a9728c5b4c76cb2e343d9cc" translate="yes" xml:space="preserve">
          <source>This means that if you are using a config file from a shared location via &lt;code&gt;--config&lt;/code&gt; option, the plugins that the config file declare will be loaded from the shared config file location.</source>
          <target state="translated">これは、 &lt;code&gt;--config&lt;/code&gt; オプションを使用して共有の場所から構成ファイルを使用している場合、構成ファイルが宣言するプラグインが共有の構成ファイルの場所からロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="9469e264aeefd6b881ec26f4966d916d417a81b0" translate="yes" xml:space="preserve">
          <source>This message occurs because ESLint is unsure if you wanted to actually lint the file or not. As the message indicates, you can use &lt;code&gt;--no-ignore&lt;/code&gt; to omit using the ignore rules.</source>
          <target state="translated">このメッセージは、ESLintが実際にファイルをlintしたいかどうか不明なために発生します。メッセージが示すように、 &lt;code&gt;--no-ignore&lt;/code&gt; を使用して、無視ルールの使用を省略できます。</target>
        </trans-unit>
        <trans-unit id="7ed6656e46098c1897ba8527d403fd684c0380f1" translate="yes" xml:space="preserve">
          <source>This messages occurs because, normally, this file would be ignored by ESLint's implicit ignore rules (as mentioned above). A negated ignore rule in your &lt;code&gt;.eslintignore&lt;/code&gt; file would override the implicit rule and reinclude this file for linting. Additionally, in this specific case, &lt;code&gt;--no-ignore&lt;/code&gt; could be used to lint the file as well.</source>
          <target state="translated">このメッセージは、通常、このファイルがESLintの暗黙的な無視ルール（上記のとおり）によって無視されるために発生します。 &lt;code&gt;.eslintignore&lt;/code&gt; ファイル内の否定された無視ルールは、暗黙のルールをオーバーライドし、リンティングのためにこのファイルを再インクルードします。さらに、この特定のケースでは、 &lt;code&gt;--no-ignore&lt;/code&gt; を使用してファイルをリントすることもできます。</target>
        </trans-unit>
        <trans-unit id="f867c366ca9a1bb334663562667053f7de2a0669" translate="yes" xml:space="preserve">
          <source>This method calculates the configuration for a given file, which can be useful for debugging purposes.</source>
          <target state="translated">このメソッドは、指定されたファイルの設定を計算します。</target>
        </trans-unit>
        <trans-unit id="a7dd3396c1130d34c892b1e3d8bacb6965d2065b" translate="yes" xml:space="preserve">
          <source>This method checks if a given file is ignored by your configuration.</source>
          <target state="translated">このメソッドは、指定されたファイルが設定によって無視されるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="109e1593c69f07fac48037663698a5106e5a31cb" translate="yes" xml:space="preserve">
          <source>This method copies the given results and removes warnings. The returned value contains only errors.</source>
          <target state="translated">このメソッドは、与えられた結果をコピーし、警告を削除します。返される値にはエラーのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="9acfa8cb4bab952e8f358b4acdd87a3e87086a7e" translate="yes" xml:space="preserve">
          <source>This method is similar to verify except that it also runs autofixing logic, similar to the &lt;code&gt;--fix&lt;/code&gt; flag on the command line. The result object will contain the autofixed code, along with any remaining linting messages for the code that were not autofixed.</source>
          <target state="translated">このメソッドは、コマンドラインの &lt;code&gt;--fix&lt;/code&gt; フラグと同様に自動修正ロジックも実行することを除いて、verifyに似ています。結果オブジェクトには、自動修正されたコードと、自動修正されなかった残りのコードメッセージが含まれます。</target>
        </trans-unit>
        <trans-unit id="8bededf08e4fa23aa4f897b18009383e1a17507e" translate="yes" xml:space="preserve">
          <source>This method lints the files that match the glob patterns and then returns the results.</source>
          <target state="translated">このメソッドは、グロブ・パターンに一致するファイルをリントし、結果を返します。</target>
        </trans-unit>
        <trans-unit id="cad535c45bf2ff2094ab71adf2177547066cf4c7" translate="yes" xml:space="preserve">
          <source>This method lints the given source code text and then returns the results.</source>
          <target state="translated">このメソッドは、与えられたソースコードのテキストをリントし、結果を返します。</target>
        </trans-unit>
        <trans-unit id="3d0bfb45ed00f594f3627eb7b50b9004b42dfee5" translate="yes" xml:space="preserve">
          <source>This method loads a formatter. Formatters convert lint results to a human- or machine-readable string.</source>
          <target state="translated">このメソッドは,フォーマッタをロードします.フォーマッタは lint の結果を人間が読める文字列または機械が読める文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="6e28456cfd122c5d695be0c36d1639aa0cd9e8fd" translate="yes" xml:space="preserve">
          <source>This method returns a map of all loaded rules.</source>
          <target state="translated">このメソッドは、ロードされたすべてのルールのマップを返します。</target>
        </trans-unit>
        <trans-unit id="96118f25ecbb0711c0de11b20891644868f6d5a0" translate="yes" xml:space="preserve">
          <source>This method returns a map of all loaded rules. Under the hood, it calls &lt;a href=&quot;#lintergetrules&quot;&gt;Linter#getRules&lt;/a&gt;.</source>
          <target state="translated">このメソッドは、ロードされたすべてのルールのマップを返します。&lt;a href=&quot;#lintergetrules&quot;&gt;内部的&lt;/a&gt;には、Linter＃getRulesを呼び出します。</target>
        </trans-unit>
        <trans-unit id="750daf348b86f808d9b8eaf3ba8fb5c90d1422b3" translate="yes" xml:space="preserve">
          <source>This method returns an array of all the comments found in the program. This is useful for rules that need to check all comments regardless of location.</source>
          <target state="translated">このメソッドは、プログラム内で見つかったすべてのコメントの配列を返します。これは、場所に関係なくすべてのコメントをチェックする必要があるルールに便利です。</target>
        </trans-unit>
        <trans-unit id="cf8d820e1cad68596ca7105185382c1dd8c45533" translate="yes" xml:space="preserve">
          <source>This method returns the scope which has the following types:</source>
          <target state="translated">このメソッドは、以下の型を持つスコープを返します。</target>
        </trans-unit>
        <trans-unit id="f42d076bb44d47d2f4da5ac68aa78fc1e1a6605c" translate="yes" xml:space="preserve">
          <source>This method writes code modified by ESLint's autofix feature into its respective file. If any of the modified files don't exist, this method does nothing.</source>
          <target state="translated">このメソッドはESLintのautofix機能で修正されたコードをそれぞれのファイルに書き込みます。修正されたファイルが存在しない場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="6cc5da084279273de8034a217a287499cc69f86a" translate="yes" xml:space="preserve">
          <source>This might be surprising to developers coming from other languages where some of these backreferences can be used in a meaningful way.</source>
          <target state="translated">これは他の言語から来た開発者にとっては驚くべきことかもしれません。</target>
        </trans-unit>
        <trans-unit id="dbe677f233ad08e453df8fbf6a0cc972e5133856" translate="yes" xml:space="preserve">
          <source>This object may not:</source>
          <target state="translated">このオブジェクトはそうではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="07af4924baef123f1b198a3210ee8db9f97b124a" translate="yes" xml:space="preserve">
          <source>This object's responsibilities include:</source>
          <target state="translated">このオブジェクトの責任は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="00ba367d9f14ddd30b21a382dcdfd9d0529fef21" translate="yes" xml:space="preserve">
          <source>This option allows only valid array indexes: numbers that will be coerced to one of &lt;code&gt;&quot;0&quot;&lt;/code&gt;, &lt;code&gt;&quot;1&quot;&lt;/code&gt;, &lt;code&gt;&quot;2&quot;&lt;/code&gt; ... &lt;code&gt;&quot;4294967294&quot;&lt;/code&gt;.</source>
          <target state="translated">このオプションでは、有効な配列インデックス（ &lt;code&gt;&quot;0&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;1&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;2&quot;&lt;/code&gt; ... &lt;code&gt;&quot;4294967294&quot;&lt;/code&gt; いずれかに強制変換される番号）のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="ddb66475e59df0061ea6486916187732183c2c35" translate="yes" xml:space="preserve">
          <source>This option allows references to function declarations. For function expressions and arrow functions, please see the &lt;a href=&quot;#variables&quot;&gt;&lt;code&gt;variables&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">このオプションを使用すると、関数宣言を参照できます。関数式と矢印関数については、&lt;a href=&quot;#variables&quot;&gt; &lt;code&gt;variables&lt;/code&gt; &lt;/a&gt;オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e8c3a3349dc261fe599ac47a9d7990013dfe7db9" translate="yes" xml:space="preserve">
          <source>This option allows you to disable reporting on warnings. If you enable this option, only errors are reported by ESLint.</source>
          <target state="translated">このオプションは警告の報告を無効にします。このオプションを有効にすると、ESLint はエラーのみを報告します。</target>
        </trans-unit>
        <trans-unit id="85dd27a30c2a375f5a8fd794ae0e7f82e1be6296" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a filename to process STDIN as. This is useful when processing files from STDIN and you have rules which depend on the filename.</source>
          <target state="translated">このオプションでは、STDIN を処理するファイル名を指定することができます。これは、STDIN からファイルを処理する際に、ファイル名に依存するルールがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="186734fe42d275a33186e1772b91f3f61e44c344" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a parser to be used by ESLint. By default, &lt;code&gt;espree&lt;/code&gt; will be used.</source>
          <target state="translated">このオプションを使用すると、ESLintで使用するパーサーを指定できます。デフォルトでは、 &lt;code&gt;espree&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="74b60e3e65cac66b94ee54882199faebdc7d7526" translate="yes" xml:space="preserve">
          <source>This option allows you to specify a warning threshold, which can be used to force ESLint to exit with an error status if there are too many warning-level rule violations in your project.</source>
          <target state="translated">このオプションは警告のしきい値を指定することができ、プロジェクト内で警告レベルのルール違反が多すぎる場合にESLintをエラー状態で終了させることができます。</target>
        </trans-unit>
        <trans-unit id="d9cfbfc188b072be5cf23949f06fff9feb06dd57" translate="yes" xml:space="preserve">
          <source>This option allows you to specify an additional configuration file for ESLint (see &lt;a href=&quot;configuring&quot;&gt;Configuring ESLint&lt;/a&gt; for more).</source>
          <target state="translated">このオプションは、（参照ESLintのための追加設定ファイルを指定することを可能にする&lt;a href=&quot;configuring&quot;&gt;設定ESLintを&lt;/a&gt;多くのため）。</target>
        </trans-unit>
        <trans-unit id="d39ed50a5fad1fe2517fc4c0e41bff667e641b14" translate="yes" xml:space="preserve">
          <source>This option allows you to specify another directory from which to load rules files. This allows you to dynamically load new rules at run time. This is useful when you have custom rules that aren't suitable for being bundled with ESLint.</source>
          <target state="translated">このオプションでは、ルールファイルをロードする別のディレクトリを指定することができます。これにより、実行時に新しいルールを動的にロードすることができます。これはESLintにバンドルされていないカスタムルールがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="1b65a3229193445946c07836b34241f12c03d02d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify parser options to be used by ESLint. Note that the available parser options are determined by the parser being used.</source>
          <target state="translated">このオプションはESLintで使用するパーサオプションを指定することができます。使用できるパーサオプションは使用するパーサによって決まります。</target>
        </trans-unit>
        <trans-unit id="106d9c8368dbe004a8c5fe9daebbd29c87af1e91" translate="yes" xml:space="preserve">
          <source>This option allows you to specify patterns of files to ignore (in addition to those in &lt;code&gt;.eslintignore&lt;/code&gt;). You can repeat the option to provide multiple patterns. The supported syntax is the same as for &lt;code&gt;.eslintignore&lt;/code&gt;&lt;a href=&quot;configuring#.eslintignore&quot;&gt;files&lt;/a&gt;, which use the same patterns as the &lt;code&gt;.gitignore&lt;/code&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;specification&lt;/a&gt;. You should quote your patterns in order to avoid shell interpretation of glob patterns.</source>
          <target state="translated">このオプションを使用すると、無視するファイルのパターンを指定できます（ &lt;code&gt;.eslintignore&lt;/code&gt; のパターンに加えて）。複数のパターンを提供するオプションを繰り返すことができます。サポートされている構文は、 &lt;code&gt;.gitignore&lt;/code&gt; &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;仕様&lt;/a&gt;と同じパターンを使用する &lt;code&gt;.eslintignore&lt;/code&gt; &lt;a href=&quot;configuring#.eslintignore&quot;&gt;ファイル&lt;/a&gt;と同じです。シェルがグロブパターンを解釈しないように、パターンを引用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4e1a28f3ded9a3b9eb6475943dff5e4939f78ddd" translate="yes" xml:space="preserve">
          <source>This option allows you to specify the file to use as your &lt;code&gt;.eslintignore&lt;/code&gt;. By default, ESLint looks in the current working directory for &lt;code&gt;.eslintignore&lt;/code&gt;. You can override this behavior by providing a path to a different file.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;.eslintignore&lt;/code&gt; として使用するファイルを指定できます。デフォルトでは、ESLintは現在の作業ディレクトリで &lt;code&gt;.eslintignore&lt;/code&gt; を探します。別のファイルへのパスを指定することで、この動作をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c32bf7172dd146fc567e0246ac0c8ff17f262721" translate="yes" xml:space="preserve">
          <source>This option allows you to specify the type of fixes to apply when using either &lt;code&gt;--fix&lt;/code&gt; or &lt;code&gt;--fix-dry-run&lt;/code&gt;. The three types of fixes are:</source>
          <target state="translated">このオプションは、次のいずれかを使用するときに適用する修正のタイプを指定することができます &lt;code&gt;--fix&lt;/code&gt; または &lt;code&gt;--fix-dry-run&lt;/code&gt; 。修正には次の3つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="c914fe341609fcaa321048e85e99b3c111eac45d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify which file extensions ESLint will use when searching for JavaScript files in the directories you specify. By default, it uses &lt;code&gt;.js&lt;/code&gt; as the only file extension.</source>
          <target state="translated">このオプションを使用すると、指定したディレクトリでJavaScriptファイルを検索するときにESLintが使用するファイル拡張子を指定できます。デフォルトでは、唯一のファイル拡張子として &lt;code&gt;.js&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="087953b73d82f7e89cdb39f3d87a42f93a84d83d" translate="yes" xml:space="preserve">
          <source>This option allows you to specify which file extensions ESLint will use when searching for target files in the directories you specify. By default, ESLint lints &lt;code&gt;*.js&lt;/code&gt; files and the files that match the &lt;code&gt;overrides&lt;/code&gt; entries of your configuration.</source>
          <target state="translated">このオプションを使用すると、指定したディレクトリでターゲットファイルを検索するときにESLintが使用するファイル拡張子を指定できます。デフォルトでは、ESLintは &lt;code&gt;*.js&lt;/code&gt; ファイルと構成の &lt;code&gt;overrides&lt;/code&gt; エントリに一致するファイルをリンクします。</target>
        </trans-unit>
        <trans-unit id="5cefe1392a8f9c174c272d0205d79e85976936f0" translate="yes" xml:space="preserve">
          <source>This option causes ESLint to report directive comments like &lt;code&gt;// eslint-disable-line&lt;/code&gt; when no errors would have been reported on that line anyway. This can be useful to prevent future errors from unexpectedly being suppressed, by cleaning up old &lt;code&gt;eslint-disable&lt;/code&gt; comments which are no longer applicable.</source>
          <target state="translated">このオプションを使用すると、ESLintは &lt;code&gt;// eslint-disable-line&lt;/code&gt; などのディレクティブコメントを報告しますが、その行でエラーが報告されていなかった場合。これは、適用されなくなった古い &lt;code&gt;eslint-disable&lt;/code&gt; コメントをクリーンアップすることにより、将来のエラーが予期せず抑制されるのを防ぐのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c661c2f3569528801054ee87219857863dcf11b9" translate="yes" xml:space="preserve">
          <source>This option checks methods with the given names, &lt;em&gt;even if&lt;/em&gt; the object which has the method is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">このオプションは、メソッドを持つオブジェクトが配列で&lt;em&gt;ない&lt;/em&gt;&lt;em&gt;場合でも&lt;/em&gt;、指定された名前のメソッドをチェックします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fccdeab5132a30722aca041dac694817c9dc5d44" translate="yes" xml:space="preserve">
          <source>This option defines global variables so that they will not be flagged as undefined by the &lt;code&gt;no-undef&lt;/code&gt; rule. Any specified global variables are assumed to be read-only by default, but appending &lt;code&gt;:true&lt;/code&gt; to a variable's name ensures that &lt;code&gt;no-undef&lt;/code&gt; will also allow writes. To specify multiple global variables, separate them using commas, or use the option multiple times.</source>
          <target state="translated">このオプションはグローバル変数を定義するため、 &lt;code&gt;no-undef&lt;/code&gt; ルールによって未定義としてフラグが立てられることはありません。指定されたグローバル変数はすべてデフォルトで読み取り専用であると見なされますが、変数の名前に &lt;code&gt;:true&lt;/code&gt; を追加すると、 &lt;code&gt;no-undef&lt;/code&gt; でも書き込みが許可されます。複数のグローバル変数を指定するには、それらをコンマで区切るか、オプションを複数回使用します。</target>
        </trans-unit>
        <trans-unit id="8ba2372568bac2be3ed8079d1b145a3ad1c564b1" translate="yes" xml:space="preserve">
          <source>This option disallows all assignments in &lt;code&gt;return&lt;/code&gt; statements. All assignments are treated as problems.</source>
          <target state="translated">このオプションは、 &lt;code&gt;return&lt;/code&gt; ステートメントでのすべての割り当てを禁止します。すべての割り当ては問題として扱われます。</target>
        </trans-unit>
        <trans-unit id="c64a3a7bb5ddd0c764741c6306006a0d08071747" translate="yes" xml:space="preserve">
          <source>This option enables specific environments. Details about the global variables defined by each environment are available on the &lt;a href=&quot;configuring&quot;&gt;configuration&lt;/a&gt; documentation. This option only enables environments; it does not disable environments set in other configuration files. To specify multiple environments, separate them using commas, or use the option multiple times.</source>
          <target state="translated">このオプションは、特定の環境を有効にします。各環境で定義されたグローバル変数の詳細は、&lt;a href=&quot;configuring&quot;&gt;構成&lt;/a&gt;ドキュメントに記載されています。このオプションは環境のみを有効にします。他の構成ファイルで設定された環境は無効になりません。複数の環境を指定するには、コンマを使用してそれらを分離するか、オプションを複数回使用します。</target>
        </trans-unit>
        <trans-unit id="ea6b9d897dea32cb3a7adac81f91222a4f84f0b0" translate="yes" xml:space="preserve">
          <source>This option enforces spacing before semicolons and disallows spacing after semicolons.</source>
          <target state="translated">このオプシ ョ ンは、 セミコロンの前の間隔を強制 し 、 セミコロンの後の間隔を無効に し ます。</target>
        </trans-unit>
        <trans-unit id="de4b303d3dec233dfe8862afdb1eb4eeb8a2fe5e" translate="yes" xml:space="preserve">
          <source>This option ensures that all function bodies are strict mode code, while global code is not. Particularly if a build step concatenates multiple scripts, a strict mode directive in global code of one script could unintentionally enable strict mode in another script that was not intended to be strict code.</source>
          <target state="translated">このオプションを指定すると、すべての関数本体が厳密モードコードであることを保証し、グローバルコードは厳密モードコードではないことを保証します。特に、ビルドステップで複数のスクリプトを連結している場合、あるスクリプトのグローバルコードで strict mode ディレクティブを使用すると、意図せずして別のスクリプトで strict mode を有効にしてしまい、 strict code にすることを意図していなかったことがあります。</target>
        </trans-unit>
        <trans-unit id="e647d69856373f96f3407afed5013f48346bdfe2" translate="yes" xml:space="preserve">
          <source>This option ensures that all functions are executed in strict mode. A strict mode directive must be present in global code or in every top-level function declaration or expression. It does not concern itself with unnecessary strict mode directives in nested functions that are already strict, nor with multiple strict mode directives at the same level.</source>
          <target state="translated">このオプションを指定すると、すべての関数が厳密モードで実行されるようになります。strict mode ディレクティブは、グローバルコード、あるいはトップレベルの関数宣言や式の中に存在しなければなりません。これは、既に strict である入れ子になっている関数の不要な strict モードディレクティブや、同一レベルでの複数の strict モードディレクティブを気にすることはありません。</target>
        </trans-unit>
        <trans-unit id="aa35f1a43f3c3018915a36e743fa5634d8ffb97c" translate="yes" xml:space="preserve">
          <source>This option forces the enabling/disabling of colorized output. You can use this to override the default behavior, which is to enable colorized output unless no TTY is detected, such as when piping &lt;code&gt;eslint&lt;/code&gt; through &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="translated">このオプションは、カラー化された出力の有効化/無効化を強制します。これを使用して、デフォルトの動作を上書きできます。 &lt;code&gt;eslint&lt;/code&gt; を &lt;code&gt;cat&lt;/code&gt; または &lt;code&gt;less&lt;/code&gt; にパイプする場合など、TTYが検出されない限り、カラー出力を有効にします。</target>
        </trans-unit>
        <trans-unit id="4aca571b443c66494cfaa66d1259c007fcbd6a87" translate="yes" xml:space="preserve">
          <source>This option has no effect on code that uses a processor, unless the processor opts into allowing autofixes.</source>
          <target state="translated">このオプションは、プロセッサが自動修正を許可しない限り、プロセッサを使用するコードには影響しません。</target>
        </trans-unit>
        <trans-unit id="930e8c0ad2927b8cda5d231d103927440d79a6ec" translate="yes" xml:space="preserve">
          <source>This option has the same effect as &lt;code&gt;--fix&lt;/code&gt; with one difference: the fixes are not saved to the file system. This makes it possible to fix code from &lt;code&gt;stdin&lt;/code&gt; (when used with the &lt;code&gt;--stdin&lt;/code&gt; flag).</source>
          <target state="translated">このオプションは &lt;code&gt;--fix&lt;/code&gt; と同じ効果がありますが、1つ異なる点があります。修正はファイルシステムに保存されません。これにより、 &lt;code&gt;stdin&lt;/code&gt; からのコードを修正できます（ &lt;code&gt;--stdin&lt;/code&gt; フラグと併用した場合）。</target>
        </trans-unit>
        <trans-unit id="9e29912dbfa3dcdc6bb50600a52b9ed9b3d16f1d" translate="yes" xml:space="preserve">
          <source>This option instructs ESLint to try to fix as many issues as possible. The fixes are made to the actual files themselves and only the remaining unfixed issues are output. Not all problems are fixable using this option, and the option does not work in these situations:</source>
          <target state="translated">このオプションはESLintに可能な限り多くの問題を修正するように指示します。修正は実際のファイル自体に行われ、未修正の問題だけが出力されます。このオプションですべての問題が修正できるわけではなく、このオプションはこのような状況では機能しません。</target>
        </trans-unit>
        <trans-unit id="a3916f03fe6ee5dfd351fc13d5bd08fbc91a2d7e" translate="yes" xml:space="preserve">
          <source>This option is an object that expects property names to be AST node types as defined by &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The easiest way to determine the node types for &lt;code&gt;exceptions&lt;/code&gt; is to use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser.</source>
          <target state="translated">このオプションは、プロパティ名が&lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTreeで&lt;/a&gt;定義されているASTノードタイプであることを期待するオブジェクトです。 &lt;code&gt;exceptions&lt;/code&gt; のノードタイプを判別する最も簡単な方法は、eSpreeパーサーで&lt;a href=&quot;https://astexplorer.net/&quot;&gt;ASTエクスプローラー&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="159d5bb23b26711ee83d3678da55988d09236463" translate="yes" xml:space="preserve">
          <source>This option is helpful if you are using another program to format your code but you would still like ESLint to apply other types of fixes.</source>
          <target state="translated">このオプションは、他のプログラムを使ってコードをフォーマットしているが、ESLintで他のタイプの修正を適用したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="989aa7bf5f70f7e2a3435a849e6284b29b04f576" translate="yes" xml:space="preserve">
          <source>This option is only applicable when used in conjunction with the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option.</source>
          <target state="translated">このオプションは、 &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; オプションと組み合わせて使用​​した場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="e46b21d025dfd75b6276b72215872d951e5d3ce7" translate="yes" xml:space="preserve">
          <source>This option outputs debugging information to the console. This information is useful when you're seeing a problem and having a hard time pinpointing it. The ESLint team may ask for this debugging information to help solve bugs.</source>
          <target state="translated">このオプションは、デバッグ情報をコンソールに出力します。この情報は問題が発生したときに、それを特定するのに苦労しているときに便利です。ESLint チームはバグを解決するためにこのデバッグ情報を要求することがあります。</target>
        </trans-unit>
        <trans-unit id="85f6c4676d557f8e8848d9f14da2b55b5cf4fe52" translate="yes" xml:space="preserve">
          <source>This option outputs information about the execution environment, including the version of Node, npm, and local and global installations of ESLint. The ESLint team may ask for this information to help solve bugs.</source>
          <target state="translated">このオプションは、Nodeのバージョン、npm、ESLintのローカルおよびグローバルインストールを含む実行環境の情報を出力します。ESLintチームはバグを解決するためにこの情報を要求することがあります。</target>
        </trans-unit>
        <trans-unit id="79b6e22672dda2878136d9153ec178619788c515" translate="yes" xml:space="preserve">
          <source>This option outputs the configuration to be used for the file passed. When present, no linting is performed and only config-related options are valid.</source>
          <target state="translated">このオプションは、渡されたファイルで使用する設定を出力します。このオプションがある場合、リンティングは行われず、設定関連のオプションのみが有効となります。</target>
        </trans-unit>
        <trans-unit id="4561c938534c79e5470a90cddc468484882c9f8a" translate="yes" xml:space="preserve">
          <source>This option outputs the current ESLint version onto the console. All other options are ignored when this is present.</source>
          <target state="translated">このオプションは現在のESLintのバージョンをコンソールに出力します。このオプションがある場合、他のすべてのオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="65771294e9a528c9fae00635bda7f17cf756ffd2" translate="yes" xml:space="preserve">
          <source>This option outputs the help menu, displaying all of the available options. All other options are ignored when this is present.</source>
          <target state="translated">このオプシ ョ ンは、 利用可能なすべてのオプシ ョ ンを表示 し て、 ヘルプ メ ニ ュ ーを出力 し ます。このオプションがある場合、他のすべてのオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="014a955006c294dba1206349cb62b15f2fa55f4b" translate="yes" xml:space="preserve">
          <source>This option prevents errors when a quoted glob pattern or &lt;code&gt;--ext&lt;/code&gt; is unmatched. This will not prevent errors when your shell can't match a glob.</source>
          <target state="translated">このオプションは、引用符で囲まれたグロブパターンまたは &lt;code&gt;--ext&lt;/code&gt; が一致しない場合のエラーを防止します。これは、シェルがグロブと一致しない場合のエラーを防ぎません。</target>
        </trans-unit>
        <trans-unit id="cf662cff85e17bdc6570d9489d7e4f778a8da7a6" translate="yes" xml:space="preserve">
          <source>This option prevents inline comments like &lt;code&gt;/*eslint-disable*/&lt;/code&gt; or &lt;code&gt;/*global foo*/&lt;/code&gt; from having any effect. This allows you to set an ESLint config without files modifying it. All inline config comments are ignored, e.g.:</source>
          <target state="translated">このオプションは、 &lt;code&gt;/*eslint-disable*/&lt;/code&gt; や &lt;code&gt;/*global foo*/&lt;/code&gt; のようなインラインコメントが影響を与えないようにします。これにより、ファイルを変更せずにESLint構成を設定できます。インライン構成コメントはすべて無視されます。例：</target>
        </trans-unit>
        <trans-unit id="09d5ab8aec2ed9eac65dc2e722437afabedfeeda" translate="yes" xml:space="preserve">
          <source>This option specifies a plugin to load. You can omit the prefix &lt;code&gt;eslint-plugin-&lt;/code&gt; from the plugin name.</source>
          <target state="translated">このオプションは、ロードするプラグインを指定します。プラグイン名から接頭辞 &lt;code&gt;eslint-plugin-&lt;/code&gt; を省略できます。</target>
        </trans-unit>
        <trans-unit id="ecc4f96fd72856887578c22e2739205f34b01a7f" translate="yes" xml:space="preserve">
          <source>This option specifies rules to be used. These rules will be merged with any rules specified with configuration files. (You can use &lt;code&gt;--no-eslintrc&lt;/code&gt; to change that behavior.) To define multiple rules, separate them using commas, or use the option multiple times. The &lt;a href=&quot;https://github.com/gkz/levn#levn--&quot;&gt;levn&lt;/a&gt; format is used for specifying the rules.</source>
          <target state="translated">このオプションは、使用するルールを指定します。これらのルールは、構成ファイルで指定されたすべてのルールとマージされます。（その動作を変更するには、 &lt;code&gt;--no-eslintrc&lt;/code&gt; を使用できます。）複数のルールを定義するには、コンマを使用してそれらを区切るか、オプションを複数回使用します。&lt;a href=&quot;https://github.com/gkz/levn#levn--&quot;&gt;levnの&lt;/a&gt;フォーマットルールを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="05912c8c31018cfdeb17e60450fe0d50675682cf" translate="yes" xml:space="preserve">
          <source>This option specifies the output format for the console. Possible formats are:</source>
          <target state="translated">このオプションは、コンソールの出力フォーマットを指定します。可能な形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="38e0c8b514c59731527607b405cb80b1143de6b5" translate="yes" xml:space="preserve">
          <source>This option tells ESLint to read and lint source code from STDIN instead of from files. You can use this to pipe code to ESLint.</source>
          <target state="translated">このオプションは、ESLint がファイルからではなく STDIN からソースコードを読み込んでリントするようにします。これを使ってコードをESLintにパイプすることができます。</target>
        </trans-unit>
        <trans-unit id="eedfdca0c59f3541f1d00d88f1dc3ea700e5c34e" translate="yes" xml:space="preserve">
          <source>This option throws an error when code is piped to ESLint.</source>
          <target state="translated">このオプションは、コードがESLintにパイプされたときにエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="cc2ef91e90fb16bf6596a58b63c2929f9ada53cb" translate="yes" xml:space="preserve">
          <source>This option will start config initialization wizard. It's designed to help new users quickly create .eslintrc file by answering a few questions, choosing a popular style guide, or inspecting your source files and attempting to automatically generate a suitable configuration.</source>
          <target state="translated">このオプションは、設定の初期化ウィザードを開始します。これは、いくつかの質問に答えたり、人気のあるスタイルガイドを選択したり、ソースファイルを検査して適切な設定を自動的に生成しようとしたりすることで、新しいユーザーが素早く.eslintrcファイルを作成するのに役立つように設計されています。</target>
        </trans-unit>
        <trans-unit id="3538e1fc4e1c6f22a20277c44b5ede4d53eb3ec8" translate="yes" xml:space="preserve">
          <source>This produces a different outcome than defining &lt;code&gt;var x = undefined&lt;/code&gt; in the loop, as &lt;code&gt;x&lt;/code&gt; is no longer reset to &lt;code&gt;undefined&lt;/code&gt; each time through the loop.</source>
          <target state="translated">これにより、ループで &lt;code&gt;var x = undefined&lt;/code&gt; 定義する場合とは異なる結果が生成されます。これは、 &lt;code&gt;x&lt;/code&gt; がループを通過するたびに &lt;code&gt;undefined&lt;/code&gt; にリセットされなくなったためです。</target>
        </trans-unit>
        <trans-unit id="24feca745e6bc0163194940d4e596f152f9004dc" translate="yes" xml:space="preserve">
          <source>This rule &lt;em&gt;does not&lt;/em&gt; report any of the following less obvious approaches to modify the prototype of builtin objects:</source>
          <target state="translated">このルール&lt;em&gt;は&lt;/em&gt;、組み込みオブジェクトのプロトタイプを変更するための、以下のそれほど明確でないアプローチを報告&lt;em&gt;しません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6e2c9a67c2f55b28f4688bb17e111a3bc3326b22" translate="yes" xml:space="preserve">
          <source>This rule accepts &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; string as an option. &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; is the same as &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">このルールは、オプションとして &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; 文字列を受け入れます。 &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; は &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true }&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="3d75185fcdd7fbc883b44ec2081157a43a2a98b9" translate="yes" xml:space="preserve">
          <source>This rule accepts &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; string as an option. &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; is the same as &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true, &quot;variables&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">このルールは、オプションとして &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; 文字列を受け入れます。 &lt;code&gt;&quot;nofunc&quot;&lt;/code&gt; は &lt;code&gt;{ &quot;functions&quot;: false, &quot;classes&quot;: true, &quot;variables&quot;: true }&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="06fc11c1fc9b22860393f1a9540cdc85723d2901" translate="yes" xml:space="preserve">
          <source>This rule accepts a configuration object with two options:</source>
          <target state="translated">このルールは、2つのオプションを持つ設定オブジェクトを受け入れます。</target>
        </trans-unit>
        <trans-unit id="b8239df1c5225b6270e03ba8dacfb109fb9d7ed5" translate="yes" xml:space="preserve">
          <source>This rule accepts a single options argument with the following defaults:</source>
          <target state="translated">このルールは、以下のデフォルト値を持つ単一のオプション引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="28da8e87fba0048902246ac61ce6db8b783253e1" translate="yes" xml:space="preserve">
          <source>This rule accepts a single options argument:</source>
          <target state="translated">このルールは、単一のオプション引数を受け付けます。</target>
        </trans-unit>
        <trans-unit id="036f5a811a913e4a7dcd75bca8c0f804ba9473c6" translate="yes" xml:space="preserve">
          <source>This rule accepts a string option:</source>
          <target state="translated">このルールは、文字列オプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="9343f1b69e9de70215bc3d173faca7334f9fc04a" translate="yes" xml:space="preserve">
          <source>This rule accepts an &lt;code&gt;exceptions&lt;/code&gt; option, which can be used to specify a list of builtins for which extensions will be allowed.</source>
          <target state="translated">このルールは、拡張オプションが許可される組み込みのリストを指定するために使用できる &lt;code&gt;exceptions&lt;/code&gt; オプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="2c4f097e6d73193e66a7d59e690145b7eda43865" translate="yes" xml:space="preserve">
          <source>This rule accepts an &lt;code&gt;exceptions&lt;/code&gt; option, which can be used to specify a list of builtins for which reassignments will be allowed:</source>
          <target state="translated">このルールは、再割り当てを許可する組み込みのリストを指定するために使用できる &lt;code&gt;exceptions&lt;/code&gt; オプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5c4d59be86b758fee018aea0cff47e0cb013368c" translate="yes" xml:space="preserve">
          <source>This rule accepts an object with its properties as</source>
          <target state="translated">このルールは、プロパティを持つオブジェクトを</target>
        </trans-unit>
        <trans-unit id="2b8ef0c60ad3557c3f770d7f127c29c889a75bc2" translate="yes" xml:space="preserve">
          <source>This rule aims to bring consistency to variable initializations and declarations.</source>
          <target state="translated">この規則は、変数の初期化と宣言に一貫性を持たせることを目的としています。</target>
        </trans-unit>
        <trans-unit id="fdf2ca3bdb84cdf7771de92d50733bd97f5e3a66" translate="yes" xml:space="preserve">
          <source>This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.</source>
          <target state="translated">このルールは、スコープ内の変数と名前を共有するラベルを作成するという悪習を禁止することで、より明確なコードを作成することを目的としています。</target>
        </trans-unit>
        <trans-unit id="e2b4353e0847866d6010e4430a830e44cc62a277" translate="yes" xml:space="preserve">
          <source>This rule aims to detect and disallow loops that can have at most one iteration, by performing static code path analysis on loop bodies.</source>
          <target state="translated">このルールは、ループ本体に対して静的なコードパス解析を行うことで、最大で1回の反復を持つことができるループを検出し、それを許可しないようにすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="45ac56bf1397dedb0a834b1a656e6426031a4e1a" translate="yes" xml:space="preserve">
          <source>This rule aims to detect and disallow the following backreferences in regular expression:</source>
          <target state="translated">この規則は、正規表現中の以下の後方参照を検出して不許可にすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="b405686f1a926b33e37bdc4ba5829424c61f9a8e" translate="yes" xml:space="preserve">
          <source>This rule aims to detect some cases where the use of optional chaining doesn't prevent runtime errors. In particular, it flags optional chaining expressions in positions where short-circuiting to &lt;code&gt;undefined&lt;/code&gt; causes throwing a TypeError afterward.</source>
          <target state="translated">このルールは、オプションのチェーンを使用してもランタイムエラーを防止できない場合を検出することを目的としています。特に、 &lt;code&gt;undefined&lt;/code&gt; への短絡によって後でTypeErrorがスローされる位置で、オプションの連鎖式にフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="082b8455e1ec0b9e8221bb19258d9bf25d7fc205" translate="yes" xml:space="preserve">
          <source>This rule aims to disallow async Promise executor functions.</source>
          <target state="translated">このルールは、非同期のプロミス実行関数を使用できないようにすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="1ab33d4820af7bc07046f46739d6891755a40cd3" translate="yes" xml:space="preserve">
          <source>This rule aims to disallow multiple whitespace around logical expressions, conditional expressions, declarations, array elements, object properties, sequences and function parameters.</source>
          <target state="translated">この規則は、論理式、条件式、宣言、配列要素、オブジェクトのプロパティ、シーケンス、関数のパラメータの周囲の複数の空白を禁止することを目的としています。</target>
        </trans-unit>
        <trans-unit id="5bdbb4fae36aec73469b0df2d2cfda42e720c8a1" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate assignments from &lt;code&gt;return&lt;/code&gt; statements. As such, it will warn whenever an assignment is found as part of &lt;code&gt;return&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;return&lt;/code&gt; ステートメントからの割り当てを排除することを目的としています。そのため、 &lt;code&gt;return&lt;/code&gt; の一部として割り当てが見つかると、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="60c130e79350c186199b9fd520e4228357e4b0c5" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate implied &lt;code&gt;eval()&lt;/code&gt; through the use of &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt;. As such, it will warn when either function is used with a string as the first argument.</source>
          <target state="translated">このルールは、 &lt;code&gt;setTimeout()&lt;/code&gt; 、 &lt;code&gt;setInterval()&lt;/code&gt; 、または &lt;code&gt;execScript()&lt;/code&gt; を使用して暗黙の &lt;code&gt;eval()&lt;/code&gt; を排除することを目的としています。そのため、どちらかの関数が文字列を最初の引数として使用されると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="ee8e3a04c82e7ee5427ed1829b4dacbec3fd6b59" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate shadowed variable declarations.</source>
          <target state="translated">このルールは、シャドウイングされた変数宣言を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="48d4ea04200e208a668599befd84b34f6eb5dfe7" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt; with the &lt;code&gt;new&lt;/code&gt; operator. As such, it warns whenever it sees &lt;code&gt;new String&lt;/code&gt;, &lt;code&gt;new Number&lt;/code&gt;, or &lt;code&gt;new Boolean&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;new&lt;/code&gt; 演算子での &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; 、および &lt;code&gt;Boolean&lt;/code&gt; の使用を排除することを目的としています。そのため、 &lt;code&gt;new String&lt;/code&gt; 、 &lt;code&gt;new Number&lt;/code&gt; 、または &lt;code&gt;new Boolean&lt;/code&gt; 見つかると警告します。</target>
        </trans-unit>
        <trans-unit id="1ceaffe704a185e71600f586cd092634bbdc428f" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of &lt;code&gt;undefined&lt;/code&gt;, and as such, generates a warning whenever it is used.</source>
          <target state="translated">このルールは、 &lt;code&gt;undefined&lt;/code&gt; の使用を排除することを目的としているため、使用されるたびに警告を生成します。</target>
        </trans-unit>
        <trans-unit id="4a1e90a159c38bcad9dbea6c4a3426a3c8fe82df" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; are used with a label.</source>
          <target state="translated">このルールは、JavaScriptでのラベル付きステートメントの使用を排除することを目的としています。ラベル付きのステートメントが検出されたとき、およびラベルで &lt;code&gt;break&lt;/code&gt; または &lt;code&gt;continue&lt;/code&gt; が使用されたときはいつでも警告します。</target>
        </trans-unit>
        <trans-unit id="fbf95a07c8896cae54c5b32fab00ac676fef5a06" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.</source>
          <target state="translated">このルールは、スクリプトの最上位レベルや他のブロック内の不要で混乱を招く可能性のあるブロックを排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="7428d8b9c63ecd07f513e4d208a88842d2ea4291" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate unused expressions which have no effect on the state of the program.</source>
          <target state="translated">このルールは、プログラムの状態に影響を与えない未使用の式を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="f4592be8513a34c0ee9c31116baf895be639d00d" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate use of the &lt;code&gt;new require&lt;/code&gt; expression.</source>
          <target state="translated">このルールは、 &lt;code&gt;new require&lt;/code&gt; 式の使用を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="5c45676927d70f598783253e0bea435ad66234ed" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate use of void operator.</source>
          <target state="translated">この規則は、void演算子の使用を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="48d1f57364c5256d0ae461b9199819e3a8b9a78b" translate="yes" xml:space="preserve">
          <source>This rule aims to eliminate variable declarations that initialize to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;undefined&lt;/code&gt; に初期化される変数宣言を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="fbcce07eac2aa6192b1ddc51290a27b70c2f04eb" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent location for an arrow function containing an implicit return.</source>
          <target state="translated">このルールは、暗黙の戻り値を含む矢印関数の一貫した位置を強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="eb1977fa84b455feda9d85eeaa544101fd9f3fbf" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent location for single-line statements.</source>
          <target state="translated">この規則は、一行ステートメントの一貫した位置を強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="b867f1fa85c3f2e39f5c14f4c8ac390156b6d095" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent spacing after function names. It takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then all function names must be followed by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no spaces between the name and the parameter list. The default is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、関数名の後に一貫した間隔を強制することを目的としています。引数は1つです。それがある場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; そして、すべての関数名は、少なくとも1つのスペースが続かなければなりません。 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、名前とパラメータリストの間にスペースを入れないでください。デフォルトは &lt;code&gt;&quot;never&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e1a6efa92543cd5aa3a3a596f4883486404ece7e" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.</source>
          <target state="translated">このルールは、コードベース全体でコメントの一貫したスタイルを強制することを目的としており、特にコメントの最初の単語として大文字を要求したり禁止したりします。このルールでは、大文字以外の文字が使用された場合には警告を発しません。</target>
        </trans-unit>
        <trans-unit id="e791249ab8dca492c1f2141589f3eb6bc72cf3c8" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce a particular style for multiline comments.</source>
          <target state="translated">この規則は、複数行コメントに対して特定のスタイルを強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6262c51d84ae60e80179b10f10d0c494db5871ba" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn't match the preferences specified.</source>
          <target state="translated">このルールは、関数の括弧の前に一貫した間隔を確保することを目的としており、空白が指定された環境設定と一致しない場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="4b6f5f82c41166d5305feac3b424a64f24ec2de7" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent spacing between rest and spread operators and their expressions. The rule also supports object rest and spread properties in ES2018:</source>
          <target state="translated">このルールは、rest および spread 演算子とその式の間の一貫した間隔を強制することを目的としています。また、このルールはES2018でオブジェクトのレストとスプレッドのプロパティをサポートしています。</target>
        </trans-unit>
        <trans-unit id="4f731649e3b7f7e5efcc5565b59ac49bf339b9bd" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce consistent style of conditions which compare a variable to a literal value.</source>
          <target state="translated">この規則は、変数とリテラル値を比較する条件の一貫したスタイルを強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="2b6b2668cbac3cad09e1c9734a8a1441d9917508" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce newline consistency in member expressions. This rule prevents the use of mixed newlines around the dot in a member expression.</source>
          <target state="translated">この規則は、メンバ式での改行の一貫性を強制することを目的としています。このルールは、メンバ式でドットの周りに混在する改行を使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="2cffeea6a2a1e0f1c63e68ad1fed69c744d4cd42" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.</source>
          <target state="translated">この規則は、セミコロンの周りのスペースを強制することを目的としています。この規則は、式でセミコロンの前にスペースを使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="b22c8565bc9c79a0eb4dd976c541072f09cd27cb" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce spacing around the &lt;code&gt;*&lt;/code&gt; of generator functions.</source>
          <target state="translated">このルールは、ジェネレーター関数の &lt;code&gt;*&lt;/code&gt; の周囲にスペースを強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="c6c8cae0c3746b9ee1294846ab4deb169a03fb7e" translate="yes" xml:space="preserve">
          <source>This rule aims to enforce the use of &lt;code&gt;u&lt;/code&gt; flag on regular expressions.</source>
          <target state="translated">このルールは、正規表現での &lt;code&gt;u&lt;/code&gt; フラグの使用を強制することを目的としています。</target>
        </trans-unit>
        <trans-unit id="b724413bbc7774cb9e7213cadf0d9d98737efe2e" translate="yes" xml:space="preserve">
          <source>This rule aims to ensure that Promises are only rejected with &lt;code&gt;Error&lt;/code&gt; objects.</source>
          <target state="translated">このルールは、Promiseが &lt;code&gt;Error&lt;/code&gt; オブジェクトでのみ拒否されることを保証することを目的としています。</target>
        </trans-unit>
        <trans-unit id="2d2be7aea466d03ae53aad72ce5fdd33c3645ba7" translate="yes" xml:space="preserve">
          <source>This rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.</source>
          <target state="translated">このルールは、破壊されたオブジェクトや配列内の空のパターンにフラグを立てることを目的としています。</target>
        </trans-unit>
        <trans-unit id="a592c858175b10142eb43e999ebc64a50dcfe373" translate="yes" xml:space="preserve">
          <source>This rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.</source>
          <target state="translated">このルールは、2つのリテラルを連結して1つのリテラルにすることができる場合にフラグを立てることを目的としています。リテラルは文字列かテンプレートリテラルにすることができます。</target>
        </trans-unit>
        <trans-unit id="214fb7b3fd0b5bc6164a95a24b81675437853823" translate="yes" xml:space="preserve">
          <source>This rule aims to flag usage of &lt;code&gt;this&lt;/code&gt; keywords outside of classes or class-like objects.</source>
          <target state="translated">このルールは、クラスまたはクラスのようなオブジェクトの外部での &lt;code&gt;this&lt;/code&gt; キーワードの使用にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="24c3e70e3fae7f58f9b980f59921f130b41ed78b" translate="yes" xml:space="preserve">
          <source>This rule aims to keep all variable declarations in the leading series of statements. Allowing multiple declarations helps promote maintainability and is thus allowed.</source>
          <target state="translated">この規則は、すべての変数宣言をステートメントの先頭の系列に保つことを目的としています。複数の宣言を許可することは、保守性を促進するのに役立ちますので、このように許可されています。</target>
        </trans-unit>
        <trans-unit id="71e5f7302fd24c06c3efb5405b78c57959dcce5f" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing between template tag functions and their template literals.</source>
          <target state="translated">この規則は、テンプレートタグ関数とそのテンプレートリテラル間の間隔の一貫性を維持することを目的としています。</target>
        </trans-unit>
        <trans-unit id="150c5f9e13764b9a65e880ca75d609ec9ecae313" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing inside of square brackets, either by disallowing spaces inside of brackets between the brackets and other tokens or enforcing spaces. Brackets that are separated from the adjacent value by a new line are excepted from this rule, as this is a common pattern. Object literals that are used as the first or last element in an array are also ignored.</source>
          <target state="translated">この規則は、 大括弧と他のトークンとの間の大括弧内のスペースを禁止するか、またはスペースを強制することで、大括弧内の間隔の一貫性を維持することを目的としています。隣接する値から改行で区切られた大括弧は、これが一般的なパターンであるため、この規則からは除外されます。配列の最初または最後の要素として使われるオブジェクトリテラルも無視されます。</target>
        </trans-unit>
        <trans-unit id="36eab5f56c34b2954c3d688b8b69b5773b3b090b" translate="yes" xml:space="preserve">
          <source>This rule aims to maintain consistency around the spacing inside of template literals.</source>
          <target state="translated">このルールは、テンプレートリテラル内の間隔の一貫性を維持することを目的としています。</target>
        </trans-unit>
        <trans-unit id="30783eb72cfbe7fb69dfa6cec962580e1d72bd33" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent a likely common performance hazard due to a lack of understanding of the semantics of &lt;code&gt;async function&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;async function&lt;/code&gt; セマンティクスを理解していないために発生する可能性のある一般的なパフォーマンスの危険を防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="5e1ef57685846ed4d51c42c899ec1fd92fafeff6" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.</source>
          <target state="translated">この規則は、初期化されていない語彙バインディングへのアクセスや、大文字小文字の節をまたいでのホイスト関数へのアクセスを防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="6e5eb8f772bf314b89f7928efd7b90f261f03737" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent string concatenation of directory paths in Node.js</source>
          <target state="translated">このルールは、Node.js のディレクトリパスの文字列連結を防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="cf1c4fed65963f6d5de090064570d7556a966719" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent the use of &lt;code&gt;process.exit()&lt;/code&gt; in Node.js JavaScript. As such, it warns whenever &lt;code&gt;process.exit()&lt;/code&gt; is found in code.</source>
          <target state="translated">このルールは、Node.js JavaScript での &lt;code&gt;process.exit()&lt;/code&gt; の使用を防ぐことを目的としています。そのため、コード内で &lt;code&gt;process.exit()&lt;/code&gt; が見つかると警告します。</target>
        </trans-unit>
        <trans-unit id="409f6777783015e5d446da7aabb24274cd2af6bc" translate="yes" xml:space="preserve">
          <source>This rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.</source>
          <target state="translated">この規則は、関数パラメータの変更や再割り当てによる意図しない動作を防止することを目的としています。</target>
        </trans-unit>
        <trans-unit id="e3d17d4fab4db7dafa21d53edc13a12c25850ade" translate="yes" xml:space="preserve">
          <source>This rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.</source>
          <target state="translated">このルールは、コードを読み進める際に必要なスクロールを減らすことを目的としています。空行の最大量を超えた場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="1f6fbb75638c174bd1e172892eb514a0a34a8d3f" translate="yes" xml:space="preserve">
          <source>This rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.</source>
          <target state="translated">この規則は、バインディングコンテキスト外での変数の使用を減らし、他の言語の伝統的なブロックスコープをエミュレートすることを目的としています。これは、この言語を初めて使う人が、変数の巻き上げによる困難なバグを回避するのを助けるためです。</target>
        </trans-unit>
        <trans-unit id="b539890ebe3260afc1fcb09ef9f086c07d001574" translate="yes" xml:space="preserve">
          <source>This rule aims to report assignments to variables or properties where all of the following are true:</source>
          <target state="translated">このルールは、以下のすべてが真である変数またはプロパティへの代入を報告することを目的としています。</target>
        </trans-unit>
        <trans-unit id="93abe223f86c93c950b6940428eb85c499aebf5e" translate="yes" xml:space="preserve">
          <source>This rule aims to report redundant &lt;code&gt;return&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、冗長な &lt;code&gt;return&lt;/code&gt; ステートメントを報告することを目的としています。</target>
        </trans-unit>
        <trans-unit id="d867bee8c0ef9d1755baf36ec331ce21d92cfc42" translate="yes" xml:space="preserve">
          <source>This rule aims to require &lt;code&gt;default&lt;/code&gt; case in &lt;code&gt;switch&lt;/code&gt; statements. You may optionally include a &lt;code&gt;// no default&lt;/code&gt; after the last &lt;code&gt;case&lt;/code&gt; if there is no &lt;code&gt;default&lt;/code&gt; case. The comment may be in any desired case, such as &lt;code&gt;// No Default&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントで &lt;code&gt;default&lt;/code&gt; ケースを要求することを目的としています。 &lt;code&gt;default&lt;/code&gt; ケースがない &lt;code&gt;case&lt;/code&gt; 、最後のケースの後にオプションで &lt;code&gt;// no default&lt;/code&gt; 含めることができます。コメントは、 &lt;code&gt;// No Default&lt;/code&gt; など、必要な場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="9d516ffc4d6d0f8cdf67c20a1d6d200eecd43071" translate="yes" xml:space="preserve">
          <source>This rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal placeholder (&lt;code&gt;${something}&lt;/code&gt;) that uses either &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; for the quotes.</source>
          <target state="translated">このルールは、通常の文字列にテンプレートリテラルプレースホルダーのように見えるものが含まれている場合に警告することを目的としています。引用符に &lt;code&gt;&quot;&lt;/code&gt; または &lt;code&gt;'&lt;/code&gt; を使用するテンプレートリテラルプレースホルダー（ &lt;code&gt;${something}&lt;/code&gt; ）を含む文字列が見つかると警告します。</target>
        </trans-unit>
        <trans-unit id="d19a577c19b7a34026fabd0b591e6e9b824b7cea" translate="yes" xml:space="preserve">
          <source>This rule allows for more fine-grained control with the following options:</source>
          <target state="translated">このルールでは、以下のオプションでより細かい制御が可能になります。</target>
        </trans-unit>
        <trans-unit id="f0c570d2beef2d1b384161fc0c0365ad5078f12d" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify global variable names that you don't want to use in your application.</source>
          <target state="translated">このルールでは、アプリケーションで使用したくないグローバル変数名を指定することができます。</target>
        </trans-unit>
        <trans-unit id="1581ab10c7b99d0115b10189be184f7f111ada69" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify imports that you don't want to use in your application.</source>
          <target state="translated">このルールでは、アプリケーションで使用したくないインポートを指定することができます。</target>
        </trans-unit>
        <trans-unit id="223ddf28af7da49a479aa6ebab902a45d421b7b1" translate="yes" xml:space="preserve">
          <source>This rule allows you to specify modules that you don&amp;rsquo;t want to use in your application.</source>
          <target state="translated">このルールにより、アプリケーションで使用したくないモジュールを指定できます。</target>
        </trans-unit>
        <trans-unit id="4008a4cdc8168bfe31edc5e762d717e7f1530720" translate="yes" xml:space="preserve">
          <source>This rule also accepts an additional &lt;code&gt;exceptions&lt;/code&gt; object:</source>
          <target state="translated">このルールは、追加の &lt;code&gt;exceptions&lt;/code&gt; オブジェクトも受け入れます。</target>
        </trans-unit>
        <trans-unit id="7455ce82eafb5ac293e4c9c4e5d678aaa1247cb6" translate="yes" xml:space="preserve">
          <source>This rule also disallows redeclarations of read-only global variables and assigments to read-only global variables.</source>
          <target state="translated">このルールでは、読み取り専用のグローバル変数の再宣言や読み取り専用のグローバル変数への代入も禁止されています。</target>
        </trans-unit>
        <trans-unit id="c1110648e756cad3c8745838275d01ef12a73315" translate="yes" xml:space="preserve">
          <source>This rule also disallows redeclarations of read-only global variables and assignments to read-only global variables.</source>
          <target state="translated">このルールでは、読み取り専用のグローバル変数の再宣言や読み取り専用のグローバル変数への代入も禁止されています。</target>
        </trans-unit>
        <trans-unit id="8debc519e6ab3a215045f322d1aa6bee8909f42e" translate="yes" xml:space="preserve">
          <source>This rule also disallows the use of the &lt;code&gt;RegExp&lt;/code&gt; constructor function with template literals without expressions and &lt;code&gt;String.raw&lt;/code&gt; tagged template literals without expressions.</source>
          <target state="translated">このルールは、式のないテンプレートリテラルおよび式のない &lt;code&gt;String.raw&lt;/code&gt; タグ付きテンプレートリテラルでの &lt;code&gt;RegExp&lt;/code&gt; コンストラクター関数の使用も禁止します。</target>
        </trans-unit>
        <trans-unit id="c4110644eef0e8575815d6b80c2512c44f922c3c" translate="yes" xml:space="preserve">
          <source>This rule also disallows using these objects as constructors with the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">このルールでは、これらのオブジェクトを &lt;code&gt;new&lt;/code&gt; 演算子のコンストラクターとして使用することも許可されていません。</target>
        </trans-unit>
        <trans-unit id="ff184a54582c14a5cd4c91bd6524497a01429bba" translate="yes" xml:space="preserve">
          <source>This rule also does not disallow redeclarations of global variables. See &lt;a href=&quot;no-redeclare&quot;&gt;no-redeclare&lt;/a&gt; if you also want to disallow those redeclarations.</source>
          <target state="translated">このルールでは、グローバル変数の再宣言も禁止されていません。これらの再宣言も禁止する場合は、&lt;a href=&quot;no-redeclare&quot;&gt;no-redeclareを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3960514471b8fdf632ccf99556046a71676b91a2" translate="yes" xml:space="preserve">
          <source>This rule always checks object literals and property descriptors. By default, it also checks class declarations and class expressions.</source>
          <target state="translated">このルールは常にオブジェクトリテラルとプロパティ記述子をチェックします。デフォルトでは、クラス宣言とクラス式もチェックします。</target>
        </trans-unit>
        <trans-unit id="379f7d883e132f615627eab94e7212c5b2fb0fc7" translate="yes" xml:space="preserve">
          <source>This rule always ignores extra parentheses around the following:</source>
          <target state="translated">このルールでは、以下の周りの余分な括弧は常に無視されます。</target>
        </trans-unit>
        <trans-unit id="5ecf4c66ad5afb41dab6fa8f725a959d53498d0b" translate="yes" xml:space="preserve">
          <source>This rule analyzes code statically to check whether or not the &lt;code&gt;this&lt;/code&gt; argument is changed. So, if the &lt;code&gt;this&lt;/code&gt; argument is computed in a dynamic expression, this rule cannot detect a violation.</source>
          <target state="translated">このルールはコードを静的に分析して、 &lt;code&gt;this&lt;/code&gt; 引数が変更されているかどうかを確認します。したがって、 &lt;code&gt;this&lt;/code&gt; 引数が動的な式で計算される場合、このルールは違反を検出できません。</target>
        </trans-unit>
        <trans-unit id="6772ffa8e5405f66988ea470070e631ecb94f272" translate="yes" xml:space="preserve">
          <source>This rule applies &lt;strong&gt;only&lt;/strong&gt; in strict mode. With &lt;code&gt;&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }&lt;/code&gt; in the ESLint configuration, your code is in strict mode even without a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; directive.</source>
          <target state="translated">このルールは、厳密モードで&lt;strong&gt;のみ&lt;/strong&gt;適用されます。 &lt;code&gt;&quot;parserOptions&quot;: { &quot;sourceType&quot;: &quot;module&quot; }&lt;/code&gt; ESLint構成で、コードもなしに厳密モードである &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="42e1226e4e68a477056e8578613cfc2481a8ae2b" translate="yes" xml:space="preserve">
          <source>This rule applies equally to all property specifications, regardless of notation, including:</source>
          <target state="translated">この規則は、表記に関係なく、すべてのプロパティの仕様に等しく適用されます。</target>
        </trans-unit>
        <trans-unit id="fb5fdaa6a9ac15d93f4b4688421cd1224351eea5" translate="yes" xml:space="preserve">
          <source>This rule can also detect some cases where the conditions are not identical, but the branch can never execute due to the logic of &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators.</source>
          <target state="translated">このルールは、条件が同一でない一部のケースも検出できますが、 &lt;code&gt;||&lt;/code&gt; のロジックのため、ブランチは実行できません。および &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 演算子。</target>
        </trans-unit>
        <trans-unit id="1dd21d49f84a0e870fa7e592ae681de4ba00ad77" translate="yes" xml:space="preserve">
          <source>This rule can also take a 2nd option, an object with any of the following keys: &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; and &lt;code&gt;&quot;markers&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、2番目のオプション、 &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; と &lt;code&gt;&quot;markers&quot;&lt;/code&gt; いずれかのキーを持つオブジェクトを取ることもできます。</target>
        </trans-unit>
        <trans-unit id="47163ca8b37e69af3ca7c7a8ac2331145d34d560" translate="yes" xml:space="preserve">
          <source>This rule can be also configured to fail when function parameters are modified. Side effects on parameters can cause counter-intuitive execution flow and make errors difficult to track down.</source>
          <target state="translated">このルールは、関数のパラメータが変更されたときに失敗するように設定することもできます。パラメータに副作用があると、直感に反する実行フローが発生し、エラーの追跡が困難になることがあります。</target>
        </trans-unit>
        <trans-unit id="6917cbcfe667e9bff37ed7e0213d14fa5f09907e" translate="yes" xml:space="preserve">
          <source>This rule can be disabled if you do not care about the grammatical style of comments in your codebase.</source>
          <target state="translated">このルールは、コードベースのコメントの文法的なスタイルを気にしない場合に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c86802043e5a42d0c87e5c400fd976b6b831fe79" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow parentheses when invoking a constructor with no arguments using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="translated">このルールは、 &lt;code&gt;new&lt;/code&gt; キーワードを使用して引数なしでコンストラクターを呼び出すときに、括弧を強制または禁止できます。</target>
        </trans-unit>
        <trans-unit id="fab043e44497127c421694342c9535fb8be7bb47" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow the use of braces around arrow function body.</source>
          <target state="translated">この規則は、矢印関数本体の周りの中括弧の使用を強制したり、禁止したりすることができます。</target>
        </trans-unit>
        <trans-unit id="04625714952245a68d2406a7a314170f11304da3" translate="yes" xml:space="preserve">
          <source>This rule can enforce or disallow the use of named function expressions.</source>
          <target state="translated">このルールは、名前付き関数式の使用を強制したり、禁止したりすることができます。</target>
        </trans-unit>
        <trans-unit id="c5ec60f85149782200572716052f0148287ff833" translate="yes" xml:space="preserve">
          <source>This rule can force usage of spacing &lt;em&gt;within&lt;/em&gt; the curly brace pair according to style guides.</source>
          <target state="translated">このルールは、スタイルガイドに従って、中括弧ペア&lt;em&gt;内&lt;/em&gt;の間隔の使用を強制できます。</target>
        </trans-unit>
        <trans-unit id="5044b90d330e4e48276fdf6f62933ee1db236245" translate="yes" xml:space="preserve">
          <source>This rule can have an object literal option whose two properties have &lt;code&gt;false&lt;/code&gt; values by default.</source>
          <target state="translated">このルールには、2つのプロパティがデフォルトで &lt;code&gt;false&lt;/code&gt; 値を持つオブジェクトリテラルオプションを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a683a6bea35295324d7b11ea6967959e557b903b" translate="yes" xml:space="preserve">
          <source>This rule can help you locate potential ReferenceErrors resulting from misspellings of variable and parameter names, or accidental implicit globals (for example, from forgetting the &lt;code&gt;var&lt;/code&gt; keyword in a &lt;code&gt;for&lt;/code&gt; loop initializer).</source>
          <target state="translated">このルールは、変数名やパラメーター名のスペルミス、または偶発的な暗黙的グローバル（たとえば、 &lt;code&gt;for&lt;/code&gt; ループ初期化子での &lt;code&gt;var&lt;/code&gt; キーワードの忘れ）に起因する潜在的なReferenceErrorsを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0e588784adf09e4f19f68f57898d33838bc7a949" translate="yes" xml:space="preserve">
          <source>This rule can safely be turned off if your project does not care about enforcing a consistent comma style.</source>
          <target state="translated">プロジェクトが一貫したカンマスタイルの適用を気にしない場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="319f5e934b81217bc9c29599abc76f7283906fd1" translate="yes" xml:space="preserve">
          <source>This rule can safely be turned off if your project does not care about enforcing a consistent style for spacing within function calls.</source>
          <target state="translated">プロジェクトが関数呼び出し内のスペーシングの一貫したスタイルを適用することを気にしない場合は、このルールをオフにしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="83ca1852fd5b5577b23f89ba764e415c41463351" translate="yes" xml:space="preserve">
          <source>This rule can take a string option:</source>
          <target state="translated">このルールは文字列オプションを取ることができます。</target>
        </trans-unit>
        <trans-unit id="8d302b0d1a764b90336232c3d99344f4fdc595cc" translate="yes" xml:space="preserve">
          <source>This rule cannot catch renaming the global object. Such as:</source>
          <target state="translated">このルールでは、グローバルオブジェクトの名前を変更することはできません。例えば</target>
        </trans-unit>
        <trans-unit id="b042ff6c22a4f912b8710d8d89d471d2c64a9753" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;BinaryExpression&lt;/code&gt;, &lt;code&gt;LogicalExpression&lt;/code&gt; and &lt;code&gt;ConditionalExpression&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;BinaryExpression&lt;/code&gt; 、 &lt;code&gt;LogicalExpression&lt;/code&gt; 、および &lt;code&gt;ConditionalExpression&lt;/code&gt; をチェックします。</target>
        </trans-unit>
        <trans-unit id="552d53bde16bdfdc088eecfad939881ac483a06e" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; keywords in constructors, then reports those that are before &lt;code&gt;super()&lt;/code&gt;.</source>
          <target state="translated">このルールは、コンストラクターの &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; キーワードをチェックしてから、 &lt;code&gt;super()&lt;/code&gt; の前にあるものを報告します。</target>
        </trans-unit>
        <trans-unit id="140842abda10f068ecc4a16f946e3022406cf444" translate="yes" xml:space="preserve">
          <source>This rule checks &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;for-in&lt;/code&gt; and &lt;code&gt;for-of&lt;/code&gt; loops. You can optionally disable checks for each of these constructs.</source>
          <target state="translated">このルールは &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;do-while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;for-in&lt;/code&gt; 、および &lt;code&gt;for-of&lt;/code&gt; ループをチェックします。オプションで、これらの各構成のチェックを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="aa2a356daedef6b25dafdb09f404f4d9d7c534d7" translate="yes" xml:space="preserve">
          <source>This rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.</source>
          <target state="translated">このルールは、すべてのインポート宣言をチェックし、すべてのインポートが最初に使用されるメンバーの構文でソートされ、次に最初のメンバーまたはエイリアス名でアルファベット順にソートされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="6681e24fe3cd4462b2847bf209c235fc7c6d321d" translate="yes" xml:space="preserve">
          <source>This rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.</source>
          <target state="translated">このルールは、オブジェクト式のすべてのプロパティ定義をチェックし、すべての変数がアルファベット順にソートされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="53d282e2a6aaf0156f34e994a7a84c5ab9a8a2e9" translate="yes" xml:space="preserve">
          <source>This rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically. The default configuration of the rule is case-sensitive.</source>
          <target state="translated">このルールは、すべての変数宣言ブロックをチェックし、すべての変数がアルファベット順にソートされていることを確認します。ルールのデフォルトの設定は、大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="8a9d030c6f262c0eb05f86406da9ee712e2a4036" translate="yes" xml:space="preserve">
          <source>This rule checks callback functions of methods with the given names, &lt;em&gt;even if&lt;/em&gt; the object which has the method is &lt;em&gt;not&lt;/em&gt; an array.</source>
          <target state="translated">このルールは、メソッドを持つオブジェクトが配列で&lt;em&gt;ない&lt;/em&gt;&lt;em&gt;場合でも&lt;/em&gt;、指定された名前のメソッドのコールバック関数をチェックします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="811ae4bbbf023aea470d76c49787ebc765fdeff0" translate="yes" xml:space="preserve">
          <source>This rule checks setters in:</source>
          <target state="translated">このルールでは、セッターをチェックします。</target>
        </trans-unit>
        <trans-unit id="d7892d555202afc91fa47f11f40a615394d6c548" translate="yes" xml:space="preserve">
          <source>This rule checks whether or not there is a valid &lt;code&gt;super()&lt;/code&gt; call.</source>
          <target state="translated">このルールは、有効な &lt;code&gt;super()&lt;/code&gt; 呼び出しがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="54a78dbb7a9691a20f2fe781235eea5e6e80464a" translate="yes" xml:space="preserve">
          <source>This rule compares code statically to check whether or not &lt;code&gt;thisArg&lt;/code&gt; is changed. So if the code about &lt;code&gt;thisArg&lt;/code&gt; is a dynamic expression, this rule cannot judge correctly.</source>
          <target state="translated">このルールは、コードを静的に比較して、 &lt;code&gt;thisArg&lt;/code&gt; が変更されているかどうかを確認します。したがって、 &lt;code&gt;thisArg&lt;/code&gt; に関するコードが動的な式である場合、このルールは正しく判断できません。</target>
        </trans-unit>
        <trans-unit id="d720df68abbde6371ccb336cb5b04c0b024bfcbe" translate="yes" xml:space="preserve">
          <source>This rule controls spacing around colons of &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; clauses in &lt;code&gt;switch&lt;/code&gt; statements. This rule does the check only if the consecutive tokens exist on the same line.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;case&lt;/code&gt; と &lt;code&gt;default&lt;/code&gt; 句のコロンの周りの間隔を制御します。このルールは、連続するトークンが同じ行に存在する場合にのみチェックを行います。</target>
        </trans-unit>
        <trans-unit id="b65c5e0660507bcb1cbffa479d53cf9ef3130bb7" translate="yes" xml:space="preserve">
          <source>This rule disallow ternary operators when simpler alternatives exist.</source>
          <target state="translated">この規則は、より単純な代替案が存在する場合には、三項演算子を許可しません。</target>
        </trans-unit>
        <trans-unit id="66c64e243d9c8b7f3d32d22b51791322b59152e1" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;Array&lt;/code&gt; constructors.</source>
          <target state="translated">このルールは、 &lt;code&gt;Array&lt;/code&gt; コンストラクターを許可しません。</target>
        </trans-unit>
        <trans-unit id="2d7b39e2d83b5189ce3fccae2add0fbca28323bd" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;Object&lt;/code&gt; constructors.</source>
          <target state="translated">このルールは、 &lt;code&gt;Object&lt;/code&gt; コンストラクターを許可しません。</target>
        </trans-unit>
        <trans-unit id="74fb7c97aec96dab204a94dea71d29bb3c9aa5ba" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;\8&lt;/code&gt; and &lt;code&gt;\9&lt;/code&gt; escape sequences in string literals.</source>
          <target state="translated">このルールは、文字列リテラルの &lt;code&gt;\8&lt;/code&gt; および &lt;code&gt;\9&lt;/code&gt; エスケープシーケンスを許可しません。</target>
        </trans-unit>
        <trans-unit id="ba886c3768e8d461d7e6410ed45538405491259c" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;continue&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;continue&lt;/code&gt; ステートメントを許可しません。</target>
        </trans-unit>
        <trans-unit id="28e2d778ae331adafff9240ccbc8541573b702e3" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;debugger&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;debugger&lt;/code&gt; ステートメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="77ecd18c853e79ca97242bc0e014a3d48e6bd0bf" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;if&lt;/code&gt; statements as the only statement in &lt;code&gt;else&lt;/code&gt; blocks.</source>
          <target state="translated">このルールでは、 &lt;code&gt;if&lt;/code&gt; ステートメントが &lt;code&gt;else&lt;/code&gt; ブロック内の唯一のステートメントとして許可されません。</target>
        </trans-unit>
        <trans-unit id="8b411438723201d602af01f2fac9be049875e964" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; statements inside &lt;code&gt;finally&lt;/code&gt; blocks. It allows indirect usages, such as in &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; definitions.</source>
          <target state="translated">このルールは、 &lt;code&gt;finally&lt;/code&gt; ブロック内の &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、および &lt;code&gt;continue&lt;/code&gt; ステートメントを許可しません。 &lt;code&gt;function&lt;/code&gt; や &lt;code&gt;class&lt;/code&gt; 定義など、間接的に使用できます。</target>
        </trans-unit>
        <trans-unit id="aa3287e2e1ed725bd09a2a525b1226c93b3ee9a9" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.</source>
          <target state="translated">このルールは、トップレベルのスクリプトスコープでの &lt;code&gt;var&lt;/code&gt; および &lt;code&gt;function&lt;/code&gt; 宣言を禁止します。ESおよびCommonJSモジュールにはモジュールスコープがあるため、これは適用されません。</target>
        </trans-unit>
        <trans-unit id="0accaadfc826cb02b40dc54ab44d8ca54d788318" translate="yes" xml:space="preserve">
          <source>This rule disallows &lt;code&gt;with&lt;/code&gt; statements.</source>
          <target state="translated">このルールは &lt;code&gt;with&lt;/code&gt; ステートメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="d0816a4406a52dfe53dd2f26aaa6a218737e2e84" translate="yes" xml:space="preserve">
          <source>This rule disallows ambiguous assignment operators in test conditions of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, and &lt;code&gt;do...while&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、および &lt;code&gt;do...while&lt;/code&gt; ステートメントのテスト条件でのあいまいな代入演算子を許可しません。</target>
        </trans-unit>
        <trans-unit id="8677bdc954fa1f2eeec9ca7775cb8ed54d1de3dd" translate="yes" xml:space="preserve">
          <source>This rule disallows any function within a loop that contains unsafe references (e.g. to modified variables from the outer scope).</source>
          <target state="translated">このルールは、ループ内の関数で安全でない参照(外部スコープからの変更された変数への参照など)を含むものはすべて無効にします。</target>
        </trans-unit>
        <trans-unit id="757cbcf1d8da92458af55b0e8fce5ca71f270395" translate="yes" xml:space="preserve">
          <source>This rule disallows bitwise operators.</source>
          <target state="translated">この規則では、ビット演算子を無効にします。</target>
        </trans-unit>
        <trans-unit id="2ba2e62f9853d2df763ddb95470409d3d5dadb00" translate="yes" xml:space="preserve">
          <source>This rule disallows calling and constructing the &lt;code&gt;Buffer()&lt;/code&gt; constructor.</source>
          <target state="translated">このルールは、 &lt;code&gt;Buffer()&lt;/code&gt; コンストラクターの呼び出しと構築を禁止します。</target>
        </trans-unit>
        <trans-unit id="d28eb4a3b01fbca8d586fe789a603987455b25ef" translate="yes" xml:space="preserve">
          <source>This rule disallows calling some &lt;code&gt;Object.prototype&lt;/code&gt; methods directly on object instances.</source>
          <target state="translated">このルールでは、オブジェクトインスタンスで直接一部の &lt;code&gt;Object.prototype&lt;/code&gt; メソッドを呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="a65487f41b142bfc3ef920b6e2e939a9693a4060" translate="yes" xml:space="preserve">
          <source>This rule disallows calling the &lt;code&gt;Math&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;Reflect&lt;/code&gt; and &lt;code&gt;Atomics&lt;/code&gt; objects as functions.</source>
          <target state="translated">このルールでは、 &lt;code&gt;Math&lt;/code&gt; 、 &lt;code&gt;JSON&lt;/code&gt; 、 &lt;code&gt;Reflect&lt;/code&gt; および &lt;code&gt;Atomics&lt;/code&gt; オブジェクトを関数として呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="66519fe1823542f5bbdaf98053217a17d3a936db" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to &lt;code&gt;Math.pow&lt;/code&gt; and suggests using the &lt;code&gt;**&lt;/code&gt; operator instead.</source>
          <target state="translated">このルールは、 &lt;code&gt;Math.pow&lt;/code&gt; の呼び出しを禁止し、代わりに &lt;code&gt;**&lt;/code&gt; 演算子の使用を提案します。</target>
        </trans-unit>
        <trans-unit id="453af8a6b147940c91cf3d0f0f14518fdb22e680" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt; if called with two arguments: a string; and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).</source>
          <target state="translated">このルールは、2つの引数を指定して呼び出された場合、 &lt;code&gt;parseInt()&lt;/code&gt; または &lt;code&gt;Number.parseInt()&lt;/code&gt; の呼び出しを許可しません。2（バイナリ）、8（8進数）、または16（16進数）の基数オプション。</target>
        </trans-unit>
        <trans-unit id="7c11518d5e9e53024b9db23ee18938c322abe1b8" translate="yes" xml:space="preserve">
          <source>This rule disallows calls to methods of the &lt;code&gt;console&lt;/code&gt; object.</source>
          <target state="translated">このルールは、 &lt;code&gt;console&lt;/code&gt; オブジェクトのメソッドの呼び出しを禁止します。</target>
        </trans-unit>
        <trans-unit id="d9bf728f0d60d2ad1835867b881b066d84cc1a83" translate="yes" xml:space="preserve">
          <source>This rule disallows comments on the same line as code.</source>
          <target state="translated">このルールは、コードと同じ行のコメントを禁止します。</target>
        </trans-unit>
        <trans-unit id="38acad92db5b12384568aaa44ce71bc077d91438" translate="yes" xml:space="preserve">
          <source>This rule disallows comparisons to 'NaN'.</source>
          <target state="translated">このルールでは、「NaN」との比較はできません。</target>
        </trans-unit>
        <trans-unit id="6722af39ecadc9275de7d7950f1755fc3e1dc8a8" translate="yes" xml:space="preserve">
          <source>This rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.</source>
          <target state="translated">このルールは、改行が文の最後にあるように見えても、そうではない場合に、混乱を招く複数行の式を無効にします。</target>
        </trans-unit>
        <trans-unit id="258e15022990886cfb026d905dee4f4fa111f95d" translate="yes" xml:space="preserve">
          <source>This rule disallows constant expressions in the test condition of:</source>
          <target state="translated">のテスト条件での定数式の使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="dd02e357765e8264ac8375fa6dba2d3a0f5d12e6" translate="yes" xml:space="preserve">
          <source>This rule disallows control characters in regular expressions.</source>
          <target state="translated">この規則は、正規表現での制御文字を無効にします。</target>
        </trans-unit>
        <trans-unit id="d97267969958c3f085ea967e53b75c11c0399d94" translate="yes" xml:space="preserve">
          <source>This rule disallows dangling underscores in identifiers.</source>
          <target state="translated">このルールでは、識別子にアンダースコアがぶら下がることを禁止します。</target>
        </trans-unit>
        <trans-unit id="9d7d30df17bc6a3759d4ec6107bf1a14e2331472" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate conditions in the same &lt;code&gt;if-else-if&lt;/code&gt; chain.</source>
          <target state="translated">このルールは、同じ &lt;code&gt;if-else-if&lt;/code&gt; チェーンでの重複した条件を許可しません。</target>
        </trans-unit>
        <trans-unit id="669e6f096d22a6e0869257835432438a35f77244" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate keys in object literals.</source>
          <target state="translated">このルールは、オブジェクトリテラル内のキーの重複を禁止します。</target>
        </trans-unit>
        <trans-unit id="7636a3a8325f2f3b942229d4314412e8c9fe4000" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.</source>
          <target state="translated">このルールは、関数の宣言または式でのパラメータ名の重複を禁止します。パーサがエラーを報告するため、矢印関数やクラスメソッドには適用されません。</target>
        </trans-unit>
        <trans-unit id="6c9a23985ede32b78311a6130f5daa7b5a0e5c70" translate="yes" xml:space="preserve">
          <source>This rule disallows duplicate test expressions in &lt;code&gt;case&lt;/code&gt; clauses of &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;case&lt;/code&gt; 節でのテスト式の重複を許可しません。</target>
        </trans-unit>
        <trans-unit id="11a8595e3b7ff0becb4aa44a6f814356743892d7" translate="yes" xml:space="preserve">
          <source>This rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty &lt;code&gt;catch&lt;/code&gt; or &lt;code&gt;finally&lt;/code&gt; block of a &lt;code&gt;try&lt;/code&gt; statement to indicate that execution should continue regardless of errors).</source>
          <target state="translated">このルールは、空のブロックステートメントを許可しません。このルールは、コメントを含むブロックステートメントを無視します（たとえば、空の &lt;code&gt;catch&lt;/code&gt; 内、または &lt;code&gt;try&lt;/code&gt; ステートメントの &lt;code&gt;finally&lt;/code&gt; ブロック内で、エラーに関係なく実行を継続する必要があることを示します）。</target>
        </trans-unit>
        <trans-unit id="2d86de4594606a9cd31df77cbc4cb951b0fa98e7" translate="yes" xml:space="preserve">
          <source>This rule disallows empty character classes in regular expressions.</source>
          <target state="translated">この規則は、正規表現での空の文字クラスを無効にします。</target>
        </trans-unit>
        <trans-unit id="694dfe25fef30c26f5a1d76ea280c630e2f2d505" translate="yes" xml:space="preserve">
          <source>This rule disallows invalid regular expression strings in &lt;code&gt;RegExp&lt;/code&gt; constructors.</source>
          <target state="translated">このルールは、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターで無効な正規表現文字列を許可しません。</target>
        </trans-unit>
        <trans-unit id="5714adb7d09b1a0bd6d25baa62df73e6d30886dd" translate="yes" xml:space="preserve">
          <source>This rule disallows lexical declarations (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt;) in &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses. The reason is that the lexical declaration is visible in the entire switch block but it only gets initialized when it is assigned, which will only happen if the case where it is defined is reached.</source>
          <target state="translated">このルールは、 &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; 句での字句宣言（ &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; および &lt;code&gt;class&lt;/code&gt; ）を許可しません。その理由は、字句宣言はスイッチブロック全体で表示されますが、割り当てられたときにのみ初期化されます。これは、定義されているケースに達した場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="cba35921de730b64544fac2a4ad17c9226505407" translate="yes" xml:space="preserve">
          <source>This rule disallows mixed spaces and tabs for indentation.</source>
          <target state="translated">この規則では、インデントのためのスペースとタブの混在を禁止しています。</target>
        </trans-unit>
        <trans-unit id="3cfcfa6c88ec162c7f3d854aa2225d063abfb9d3" translate="yes" xml:space="preserve">
          <source>This rule disallows modifications to read-only global variables.</source>
          <target state="translated">このルールは、読み取り専用のグローバル変数の変更を禁止します。</target>
        </trans-unit>
        <trans-unit id="4703c528be92a0741324e06b06061b7ee7cce8b0" translate="yes" xml:space="preserve">
          <source>This rule disallows multiple spaces in regular expression literals.</source>
          <target state="translated">このルールは、正規表現リテラル内の複数のスペースを禁止します。</target>
        </trans-unit>
        <trans-unit id="a1a3b7b955c9a74f52aa8e49d111ff25d49f9646" translate="yes" xml:space="preserve">
          <source>This rule disallows negated conditions in either of the following:</source>
          <target state="translated">この規則は、以下のいずれかの否定条件を無効にします。</target>
        </trans-unit>
        <trans-unit id="2f9f8d13d0c314cf76143475b6613aba5359fcaa" translate="yes" xml:space="preserve">
          <source>This rule disallows negating the left operand in &lt;code&gt;in&lt;/code&gt; expressions.</source>
          <target state="translated">このルールで &lt;code&gt;in&lt;/code&gt; 式内の左のオペランドを否定することはできません。</target>
        </trans-unit>
        <trans-unit id="2c4f50e13ddde727f6bc3fd3a0d4f4a043473808" translate="yes" xml:space="preserve">
          <source>This rule disallows negating the left operand of the following relational operators:</source>
          <target state="translated">この規則は、以下の関係演算子の左オペランドを否定することを禁止します。</target>
        </trans-unit>
        <trans-unit id="740b99aac0bd437017d6910a9ae782e1f9212ca6" translate="yes" xml:space="preserve">
          <source>This rule disallows octal escape sequences in string literals.</source>
          <target state="translated">このルールは、文字列リテラル内の8進数エスケープシーケンスを無効にします。</target>
        </trans-unit>
        <trans-unit id="4bcfc1a7a7b96bced57ff984ffc562561897447d" translate="yes" xml:space="preserve">
          <source>This rule disallows reassigning &lt;code&gt;function&lt;/code&gt; declarations.</source>
          <target state="translated">このルールは、 &lt;code&gt;function&lt;/code&gt; 宣言の再割り当てを禁止します。</target>
        </trans-unit>
        <trans-unit id="c91a55b890383ea5bda5e176f1ddc75d172d67fc" translate="yes" xml:space="preserve">
          <source>This rule disallows reassigning exceptions in &lt;code&gt;catch&lt;/code&gt; clauses.</source>
          <target state="translated">このルールは、 &lt;code&gt;catch&lt;/code&gt; 句での例外の再割り当てを禁止します。</target>
        </trans-unit>
        <trans-unit id="78996379b2829ba6163762ae3d6f36e1875d3851" translate="yes" xml:space="preserve">
          <source>This rule disallows return statements in the constructor of a class. Note that returning nothing with flow control is allowed.</source>
          <target state="translated">このルールでは、クラスのコンストラクタでのリターン・ステートメントを禁止します。フロー制御では何も返さないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b12c264662f50e33088dca91dd93387c7211faee" translate="yes" xml:space="preserve">
          <source>This rule disallows returning values from Promise executor functions.</source>
          <target state="translated">このルールは、プロミス実行関数から値を返すことを禁止します。</target>
        </trans-unit>
        <trans-unit id="a4bc5ad478a3d1d339c1f1e60883a910aec68e9f" translate="yes" xml:space="preserve">
          <source>This rule disallows returning values from setters and reports &lt;code&gt;return&lt;/code&gt; statements in setter functions.</source>
          <target state="translated">このルールは、セッターからの戻り値を許可せず、セッター関数の &lt;code&gt;return&lt;/code&gt; ステートメントを報告します。</target>
        </trans-unit>
        <trans-unit id="12bb6672210db1555632eb13b90c2f0873ddab24" translate="yes" xml:space="preserve">
          <source>This rule disallows spacing between function identifiers and their applications.</source>
          <target state="translated">このルールでは、関数識別子とそのアプリケーション間の間隔を空けないようにします。</target>
        </trans-unit>
        <trans-unit id="21051882fd62b760206518e138fc00d233c6d34d" translate="yes" xml:space="preserve">
          <source>This rule disallows sparse array literals which have &quot;holes&quot; where commas are not preceded by elements. It does not apply to a trailing comma following the last element.</source>
          <target state="translated">このルールは、カンマが要素の前にない「穴」を持つ疎な配列リテラルを無効にします。これは、最後の要素の後に続くカンマには適用されません。</target>
        </trans-unit>
        <trans-unit id="3e0f2dd02ecc28b0aedee1775ef621f78fda1928" translate="yes" xml:space="preserve">
          <source>This rule disallows specified (that is, user-defined) syntax.</source>
          <target state="translated">このルールは、指定された (つまりユーザー定義の)構文を無効にします。</target>
        </trans-unit>
        <trans-unit id="63c9ec1dc80420a119d382ef172cf2b9504b6a24" translate="yes" xml:space="preserve">
          <source>This rule disallows specified identifiers in assignments and &lt;code&gt;function&lt;/code&gt; definitions.</source>
          <target state="translated">このルールは、割り当ておよび &lt;code&gt;function&lt;/code&gt; 定義で指定された識別子を許可しません。</target>
        </trans-unit>
        <trans-unit id="6592cd98f698c52f30414212c3df9d633af9c0bc" translate="yes" xml:space="preserve">
          <source>This rule disallows specified names from being used as exported names.</source>
          <target state="translated">このルールは、指定された名前をエクスポート名として使用できないようにします。</target>
        </trans-unit>
        <trans-unit id="1d519e0d0176940478dbf4f9f334aba740ff368c" translate="yes" xml:space="preserve">
          <source>This rule disallows strict mode directives, no matter which option is specified, if ESLint configuration specifies either of the following as &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;parser options&lt;/a&gt;:</source>
          <target state="translated">ESLint構成が&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;パーサーオプション&lt;/a&gt;として次のいずれかを指定している場合、このルールは、どのオプションが指定されていても、厳密モードディレクティブを許可しません。</target>
        </trans-unit>
        <trans-unit id="1a70b94ae9b04895e4ea44427ce5ab6dcdea44b0" translate="yes" xml:space="preserve">
          <source>This rule disallows strict mode directives, no matter which option is specified, in functions with non-simple parameter lists (for example, parameter lists with default parameter values) because that is a syntax error in &lt;strong&gt;ECMAScript 2016&lt;/strong&gt; and later. See the examples of the &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt; option.</source>
          <target state="translated">このルールは、&lt;strong&gt;ECMAScript 2016&lt;/strong&gt;以降の構文エラーであるため、単純なパラメーターリスト（たとえば、デフォルトのパラメーター値を持つパラメーターリスト）を持つ関数では、どのオプションが指定されていても、厳密モードディレクティブを許可しません。&lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt;オプションの例を参照してください。</target>
        </trans-unit>
        <trans-unit id="0cdffcec301f66189ef3b947a2a41598b9b0919b" translate="yes" xml:space="preserve">
          <source>This rule disallows ternary operators.</source>
          <target state="translated">この規則は三項演算子を禁止します。</target>
        </trans-unit>
        <trans-unit id="83d62ca0b0fcaa5de115aa302c9698e355c71269" translate="yes" xml:space="preserve">
          <source>This rule disallows the following characters except where the options allow:</source>
          <target state="translated">このルールでは、オプションで許可されている場合を除き、以下の文字を禁止します。</target>
        </trans-unit>
        <trans-unit id="7fe71ef647822616e6e09c0fbddfc5ff073d456e" translate="yes" xml:space="preserve">
          <source>This rule disallows the following:</source>
          <target state="translated">このルールでは、以下のことを禁止しています。</target>
        </trans-unit>
        <trans-unit id="96600cfbb07e22bbb8ea489b40ead855d9df0a5e" translate="yes" xml:space="preserve">
          <source>This rule disallows the renaming of import, export, and destructured assignments to the same name.</source>
          <target state="translated">このルールは、インポート、エクスポート、および破壊された代入の名前を同じ名前に変更することを禁止します。</target>
        </trans-unit>
        <trans-unit id="150e05b85ffac58a6b096426b18dc0b52ef5c458" translate="yes" xml:space="preserve">
          <source>This rule disallows the unary operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt;.</source>
          <target state="translated">この規則は、単項演算子 &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt; 許可しません。</target>
        </trans-unit>
        <trans-unit id="2bb380ce8cb89a6cae85669483c509be1106c5e2" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of &lt;code&gt;await&lt;/code&gt; within loop bodies.</source>
          <target state="translated">このルールでは、ループ本体内で &lt;code&gt;await&lt;/code&gt; を使用できません。</target>
        </trans-unit>
        <trans-unit id="a9f30ad1084b430f3c2c865d41a7bfcba40d9b5c" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of the &lt;code&gt;RegExp&lt;/code&gt; constructor function with string literals as its arguments.</source>
          <target state="translated">このルールは、文字列リテラルを引数として使用する &lt;code&gt;RegExp&lt;/code&gt; コンストラクター関数の使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="63d0dd8fef754a025cbe22a509125657519bf520" translate="yes" xml:space="preserve">
          <source>This rule disallows the use of the &lt;code&gt;delete&lt;/code&gt; operator on variables.</source>
          <target state="translated">このルールは、変数での &lt;code&gt;delete&lt;/code&gt; 演算子の使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="263c02405afaf24815681f5c6d01741fdc2585e9" translate="yes" xml:space="preserve">
          <source>This rule disallows trailing whitespace (spaces, tabs, and other Unicode whitespace characters) at the end of lines.</source>
          <target state="translated">この規則は、行末にある末尾の空白 (スペース ・ タブ ・ その他の Unicode 空白キ ャ ラ ク タ)を無効に し ます。</target>
        </trans-unit>
        <trans-unit id="a7a7d428483dbf516170f0e6ac300fb053cdd144" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary boolean casts.</source>
          <target state="translated">このルールは、不要なブーリアンキャストを無効にします。</target>
        </trans-unit>
        <trans-unit id="9db8d010e4b21df44b098f694c42f2dd4eab415c" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary semicolons.</source>
          <target state="translated">この規則では、不要なセミコロンを禁止します。</target>
        </trans-unit>
        <trans-unit id="d9ecfca8a1a798c2905361902e770ebaaeebbbf4" translate="yes" xml:space="preserve">
          <source>This rule disallows unnecessary usage of computed property keys.</source>
          <target state="translated">このルールは、計算されたプロパティ・キーの不要な使用を禁止します。</target>
        </trans-unit>
        <trans-unit id="6a19f5c8490d1ba026ed2c643c3a4351a202d08f" translate="yes" xml:space="preserve">
          <source>This rule disallows unreachable code after &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, and &lt;code&gt;break&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、および &lt;code&gt;break&lt;/code&gt; ステートメントの後に到達できないコードを許可しません。</target>
        </trans-unit>
        <trans-unit id="e63d4f3884bfa8fa4f27ddb207b05212dad647be" translate="yes" xml:space="preserve">
          <source>This rule disallows using multiple assignments within a single statement.</source>
          <target state="translated">このルールでは、1つのステートメント内で複数の割り当てを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="25bf4d847dfa2ff4961c001bb9780bc07382514c" translate="yes" xml:space="preserve">
          <source>This rule disallows whitespace around the dot or before the opening bracket before properties of objects if they are on the same line. This rule allows whitespace when the object and property are on separate lines, as it is common to add newlines to longer chains of properties:</source>
          <target state="translated">こ の規則は、 オブジ ェ ク ト のプ ロ パテ ィ が同一行上にあ る 場合には、 ドットの周りやプ ロ パテ ィ の前の大括弧の前には空白を入れません。この規則は、オブジェクトとプロパティが別々の行にある場合に空白を許容します。</target>
        </trans-unit>
        <trans-unit id="9e9a9afc266a9f1caa2064407f3d3f1037d9fe0e" translate="yes" xml:space="preserve">
          <source>This rule distinguishes between six kinds of variable declaration types:</source>
          <target state="translated">この規則は、6種類の変数宣言型を区別します。</target>
        </trans-unit>
        <trans-unit id="cdbb91e3e92f7914450202f6764f5b77ba2a26f1" translate="yes" xml:space="preserve">
          <source>This rule does not apply in an &lt;code&gt;ArrayExpression&lt;/code&gt; or &lt;code&gt;ArrayPattern&lt;/code&gt; in either of the following cases:</source>
          <target state="translated">このルールは、次のいずれかの場合の &lt;code&gt;ArrayExpression&lt;/code&gt; または &lt;code&gt;ArrayPattern&lt;/code&gt; には適用されません。</target>
        </trans-unit>
        <trans-unit id="203d845e651b402a1ac8edc950ecd9464c5828ae" translate="yes" xml:space="preserve">
          <source>This rule does not apply in either of the following cases:</source>
          <target state="translated">以下のいずれかに該当する場合は、この規定は適用されません。</target>
        </trans-unit>
        <trans-unit id="3f490639d9b5cca1ffe33a6bc2bbf099505645ed" translate="yes" xml:space="preserve">
          <source>This rule does not apply to directives (which are in the form of literal string expressions such as &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; at the beginning of a script, module, or function).</source>
          <target state="translated">この規則は、ディレクティブ（ &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; などのリテラル文字列式の形式で、スクリプト、モジュール、または関数の先頭）には適用されません。</target>
        </trans-unit>
        <trans-unit id="74c73caf5eb1d682942527e0676b6230a86733fc" translate="yes" xml:space="preserve">
          <source>This rule does not apply to function calls or constructor calls with the &lt;code&gt;new&lt;/code&gt; operator, because they could have &lt;em&gt;side effects&lt;/em&gt; on the state of the program.</source>
          <target state="translated">この規則は、 &lt;code&gt;new&lt;/code&gt; 演算子を使用した関数呼び出しまたはコンストラクター呼び出しには適用されません。プログラムの状態に&lt;em&gt;副作用&lt;/em&gt;がある可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="10dccdc3372172d5fbe80fac6a6517ad1abb02e8" translate="yes" xml:space="preserve">
          <source>This rule does not enforce the existence of &lt;code&gt;default&lt;/code&gt; clauses. See &lt;a href=&quot;default-case&quot;&gt;default-case&lt;/a&gt; if you also want to enforce the existence of &lt;code&gt;default&lt;/code&gt; clauses in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;default&lt;/code&gt; 句の存在を強制しません。 &lt;code&gt;switch&lt;/code&gt; ステートメントに &lt;code&gt;default&lt;/code&gt; 句の存在を強制する&lt;a href=&quot;default-case&quot;&gt;場合は&lt;/a&gt;、default-caseを参照してください。</target>
        </trans-unit>
        <trans-unit id="3ad5609fd443c44c12476d22f78115240259d7d6" translate="yes" xml:space="preserve">
          <source>This rule does not enforce the existence of the pair for a getter or a setter. See &lt;a href=&quot;accessor-pairs&quot;&gt;accessor-pairs&lt;/a&gt; if you also want to enforce getter/setter pairs.</source>
          <target state="translated">このルールは、ゲッターまたはセッターのペアの存在を強制しません。ゲッター/セッターのペアも適用したい場合は、&lt;a href=&quot;accessor-pairs&quot;&gt;アクセサーペアを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="854c2eba272fbba2377e73728b6e8e8a5ab8a7c8" translate="yes" xml:space="preserve">
          <source>This rule does not flag arrow functions inside of object literals. The following will &lt;em&gt;not&lt;/em&gt; warn:</source>
          <target state="translated">このルールは、オブジェクトリテラル内の矢印関数にフラグを立てません。以下は警告し&lt;em&gt;ません&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="86d082160176ea469e94732a9224b99947a25f26" translate="yes" xml:space="preserve">
          <source>This rule does not report empty character classes in the string argument of calls to the &lt;code&gt;RegExp&lt;/code&gt; constructor.</source>
          <target state="translated">このルールは、 &lt;code&gt;RegExp&lt;/code&gt; コンストラクターへの呼び出しの文字列引数に空の文字クラスを報告しません。</target>
        </trans-unit>
        <trans-unit id="d27117920d1a4c3661be108f7fc91787931c11a3" translate="yes" xml:space="preserve">
          <source>This rule does not report missing JSDoc comments for classes, functions, or methods.</source>
          <target state="translated">このルールでは、クラス、関数、メソッドのJSDocコメントの欠落を報告しません。</target>
        </trans-unit>
        <trans-unit id="329e07b776a9b047bbee9ba7aeb1d91f67a6f539" translate="yes" xml:space="preserve">
          <source>This rule does nothing if no configurations are provided.</source>
          <target state="translated">このルールは、設定が提供されていない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="e35b9e62ac94294420d469553afbaf12b36ac992" translate="yes" xml:space="preserve">
          <source>This rule doesn't check spacing in the following cases:</source>
          <target state="translated">このルールでは、以下のような場合には間隔をチェックしません。</target>
        </trans-unit>
        <trans-unit id="95b5ae67ba69fa9b6a39cae94daaff212d1d5bea" translate="yes" xml:space="preserve">
          <source>This rule doesn't inspect the content of source modules in re-export declarations. In particular, if you are re-exporting everything from another module's export, that export may include a restricted name. This rule cannot detect such cases.</source>
          <target state="translated">このルールは、再輸出宣言におけるソースモジュールの内容を検査しません。特に、別のモジュールのエクスポートからすべてを再エクスポートしている場合、そのエクスポートには制限された名前が含まれている可能性があります。このルールはそのようなケースを検出できません。</target>
        </trans-unit>
        <trans-unit id="ed6ace70b69e1bae1fbb742835f6e9d160caa326" translate="yes" xml:space="preserve">
          <source>This rule enforce consistent comma style in array literals, object literals, and variable declarations.</source>
          <target state="translated">この規則は、配列リテラル、オブジェクトリテラル、変数宣言において、一貫したカンマのスタイルを強制します。</target>
        </trans-unit>
        <trans-unit id="655472c411270872a45d50fed1d9af2d0cdb45ab" translate="yes" xml:space="preserve">
          <source>This rule enforces &lt;code&gt;default&lt;/code&gt; clauses in &lt;code&gt;switch&lt;/code&gt; statements to be last.</source>
          <target state="translated">このルールは、 &lt;code&gt;switch&lt;/code&gt; ステートメントの &lt;code&gt;default&lt;/code&gt; 句が最後になるように強制します。</target>
        </trans-unit>
        <trans-unit id="5ee5487658a78c52a1bdf48fa389ad64744891d9" translate="yes" xml:space="preserve">
          <source>This rule enforces a coding style where empty lines are required or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements to achieve a consistent coding style across the project.</source>
          <target state="translated">このルールは、プロジェクト全体で一貫したコーディングスタイルを実現するために、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;const&lt;/code&gt; ステートメントの後に空行が必要または禁止されているコーディングスタイルを適用します。</target>
        </trans-unit>
        <trans-unit id="b3a30607c883a5da29ceb97f5b29fe497063b7f4" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent indentation style. The default style is &lt;code&gt;4 spaces&lt;/code&gt;.</source>
          <target state="translated">このルールは、一貫したインデントスタイルを適用します。デフォルトのスタイルは &lt;code&gt;4 spaces&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="053d9249665cec6c7a51225c330deea8b4d964fe" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent linebreak style for operators.</source>
          <target state="translated">この規則は、演算子に一貫した改行スタイルを強制します。</target>
        </trans-unit>
        <trans-unit id="2dc207f7c0cdd5ec6f45d65ca43e291f84147958" translate="yes" xml:space="preserve">
          <source>This rule enforces a consistent newlines around variable declarations. This rule ignores variable declarations inside &lt;code&gt;for&lt;/code&gt; loop conditionals.</source>
          <target state="translated">このルールは、変数宣言の周りに一貫した改行を適用します。このルールは &lt;code&gt;for&lt;/code&gt; ループ条件の内部の変数宣言を無視します。</target>
        </trans-unit>
        <trans-unit id="84f0362da7498b4295196fca6493ae7190176738" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum depth that blocks can be nested to reduce code complexity.</source>
          <target state="translated">このルールは、コードの複雑さを軽減するために、ブロックを入れ子にできる最大の深さを強制します。</target>
        </trans-unit>
        <trans-unit id="4335e81d4479cc83b3771caa8aa5dff2eb5111a3" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum depth that callbacks can be nested to increase code clarity.</source>
          <target state="translated">このルールは、コードの明瞭性を高めるために、コールバックを入れ子にできる最大の深さを強制します。</target>
        </trans-unit>
        <trans-unit id="4cfe7ab9be0d3cf7c4bd26c43cf9d145739278f3" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.</source>
          <target state="translated">この規則は、コードの可読性と保守性を高めるために、最大行長を強制します。行の長さは、行内のUnicode文字数として定義されます。</target>
        </trans-unit>
        <trans-unit id="ec9c52da0098b06b0b6d8526eddee3dc69ce058a" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.</source>
          <target state="translated">このルールは、保守性を助け、複雑さを軽減するために、1ファイルあたりの最大行数を強制します。</target>
        </trans-unit>
        <trans-unit id="88b1bf1896fc036cbc88285ee2b031a3838d7474" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of lines per function, in order to aid in maintainability and reduce complexity.</source>
          <target state="translated">このルールは、保守性を助け、複雑さを軽減するために、関数あたりの最大行数を強制します。</target>
        </trans-unit>
        <trans-unit id="44007589ecb2a4769b62fe380270b72abb99231d" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of parameters allowed in function definitions.</source>
          <target state="translated">この規則は、関数定義で許可されるパラメータの最大数を強制します。</target>
        </trans-unit>
        <trans-unit id="101841de9bcf819f5ed87d837a7ea9eda3cccdfb" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of statements allowed in function blocks.</source>
          <target state="translated">この規則は、関数ブロックで許可されるステートメントの最大数を強制します。</target>
        </trans-unit>
        <trans-unit id="f803854de3d5f4eb6dba4c3bad230da6dbe1073d" translate="yes" xml:space="preserve">
          <source>This rule enforces a maximum number of statements allowed per line.</source>
          <target state="translated">この規則は、1行あたりに許可されるステートメントの最大数を強制します。</target>
        </trans-unit>
        <trans-unit id="a08a080563efd2eec379c0e949b7107a0946a1c4" translate="yes" xml:space="preserve">
          <source>This rule enforces a minimum and/or maximum identifier length convention.</source>
          <target state="translated">この規則は、最小および/または最大の識別子の長さの規則を適用する。</target>
        </trans-unit>
        <trans-unit id="a12ae4058804b73570753830d04876debfe743a7" translate="yes" xml:space="preserve">
          <source>This rule enforces a nearly universal stylistic concern. That being said, this rule may be disabled if the constructor style is preferred.</source>
          <target state="translated">このルールは、ほぼ普遍的なスタイルに関する懸念を強制します。コンストラクタのスタイルが望ましい場合は、このルールを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="f0177a6b9f488d9007a94ed192deb1738ff81f54" translate="yes" xml:space="preserve">
          <source>This rule enforces a particular type of &lt;code&gt;function&lt;/code&gt; style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.</source>
          <target state="translated">このルールは、宣言または式のいずれかで、JavaScriptファイル全体に特定のタイプの &lt;code&gt;function&lt;/code&gt; スタイルを適用します。どちらを設定するかを指定できます。</target>
        </trans-unit>
        <trans-unit id="7c62d8b9628e4222ce0de1cda323d56688f112a7" translate="yes" xml:space="preserve">
          <source>This rule enforces a style where it requires to have a getter for every property which has a setter defined.</source>
          <target state="translated">このルールは、セッターが定義されているすべてのプロパティに対してゲッターを持つことを要求するスタイルを強制します。</target>
        </trans-unit>
        <trans-unit id="99a6b55cecafcb07815b6ce6b225784a37946856" translate="yes" xml:space="preserve">
          <source>This rule enforces at least one newline (or absence thereof) at the end of non-empty files.</source>
          <target state="translated">この規則は、空ではないファイルの最後に少なくとも1つの改行(または改行がないこと)を強制します。</target>
        </trans-unit>
        <trans-unit id="c0f61cc113b072060777fa670e84b19c62761cb8" translate="yes" xml:space="preserve">
          <source>This rule enforces comparing &lt;code&gt;typeof&lt;/code&gt; expressions to valid string literals.</source>
          <target state="translated">このルールは、 &lt;code&gt;typeof&lt;/code&gt; 式を有効な文字列リテラルと比較することを強制します。</target>
        </trans-unit>
        <trans-unit id="0d29e3bc583262a92e61b0df65bf87b587bc1245" translate="yes" xml:space="preserve">
          <source>This rule enforces consistency regarding the spaces after &lt;code&gt;words&lt;/code&gt; unary operators and after/before &lt;code&gt;nonwords&lt;/code&gt; unary operators.</source>
          <target state="translated">この規則は、後にスペースに関する一貫性を強制し &lt;code&gt;words&lt;/code&gt; の前に単項演算子および/後 &lt;code&gt;nonwords&lt;/code&gt; 単項演算子。</target>
        </trans-unit>
        <trans-unit id="4656356c361a67b0d4161201f70a8dde34f8fa7c" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent brace style for blocks.</source>
          <target state="translated">この規則は、ブロックに対して一貫したブレーススタイルを強制する。</target>
        </trans-unit>
        <trans-unit id="c589693beabba7d58bd598910df76da4e9f1a779" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent empty line padding within blocks.</source>
          <target state="translated">こ の規則は、 ブ ロ ッ ク 内の空行のパ ッ ド を一貫して強制 し ます。</target>
        </trans-unit>
        <trans-unit id="595c763433e0de8f23a77358f7e01894f4ce51bb" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line breaks inside braces of object literals or destructuring assignments.</source>
          <target state="translated">この規則は、オブジェクトリテラルまたは破壊的代入の中括弧内での一貫した改行を強制します。</target>
        </trans-unit>
        <trans-unit id="dc1f9f7d14d39f611230db49960fece58ed587b8" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line breaks inside parentheses of function parameters or arguments.</source>
          <target state="translated">この規則は、関数のパラメータや引数の括弧内での一貫した改行を強制します。</target>
        </trans-unit>
        <trans-unit id="cc3d5861ecc6d2c3252bac7222aab4bc2ecdea0d" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent line endings independent of operating system, VCS, or editor used across your codebase.</source>
          <target state="translated">このルールは、コードベース全体で使用されるオペレーティングシステム、VCS、またはエディタに依存しない一貫した行末を強制します。</target>
        </trans-unit>
        <trans-unit id="3e6898a2307cfec7882640002567d17f03515ad3" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;, &lt;code&gt;falls through&lt;/code&gt;.</source>
          <target state="translated">このルールは、行コメントの一貫した位置を強制します。ブロックコメントはこのルールの影響を受けません。デフォルトでは、このルールは次の単語で始まるコメントを無視します： &lt;code&gt;eslint&lt;/code&gt; 、 &lt;code&gt;jshint&lt;/code&gt; 、 &lt;code&gt;jslint&lt;/code&gt; 、 &lt;code&gt;istanbul&lt;/code&gt; 、 &lt;code&gt;global&lt;/code&gt; 、 &lt;code&gt;exported&lt;/code&gt; 、 &lt;code&gt;jscs&lt;/code&gt; 、fall &lt;code&gt;falls through&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa1bfb395be1412e1e3fa7972879d7328ba00c44" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing around keywords and keyword-like tokens: &lt;code&gt;as&lt;/code&gt; (in module declarations), &lt;code&gt;async&lt;/code&gt; (of async functions), &lt;code&gt;await&lt;/code&gt; (of await expressions), &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;debugger&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt; (in module declarations), &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; (of getters), &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, &lt;code&gt;instanceof&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;of&lt;/code&gt; (in for-of statements), &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; (of setters), &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;super&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, and &lt;code&gt;yield&lt;/code&gt;. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.</source>
          <target state="translated">このルールは、キーワードとキーワードのようなトークンの周囲に一貫した間隔を適用します： &lt;code&gt;as&lt;/code&gt; （モジュール宣言内）、 &lt;code&gt;async&lt;/code&gt; （async関数の）、 &lt;code&gt;await&lt;/code&gt; （await式の）、 &lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;debugger&lt;/code&gt; 、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;export&lt;/code&gt; 、 &lt;code&gt;extends&lt;/code&gt; 、 &lt;code&gt;finally&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;from&lt;/code&gt; （モジュール宣言内）、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; （ofゲッター）、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;import&lt;/code&gt; 、 &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;instanceof&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;of&lt;/code&gt; （for-ofステートメント）、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; （ofセッター）、 &lt;code&gt;static&lt;/code&gt; 、 &lt;code&gt;super&lt;/code&gt; 、 &lt;code&gt;switch&lt;/code&gt; 、 &lt;code&gt;this&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;typeof&lt;/code&gt; 、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;void&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; 、および &lt;code&gt;yield&lt;/code&gt; 。このルールは、他の間隔ルールと競合しないように注意深く設計されています。他のルールが問題を報告する間隔には適用されません。</target>
        </trans-unit>
        <trans-unit id="98df4bc6fa104f9bb3d9aa58f24400b4ed78fce2" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing before and after commas in variable declarations, array literals, object literals, function parameters, and sequences.</source>
          <target state="translated">この規則は、変数宣言、配列リテラル、オブジェクトリテラル、関数パラメータ、およびシーケンスにおいて、カンマの前後に一貫した間隔を確保します。</target>
        </trans-unit>
        <trans-unit id="0169481661b301da11577f8f07f4bc6e9cbac18b" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing between keys and values in object literal properties. In the case of long lines, it is acceptable to add a new line wherever whitespace is allowed.</source>
          <target state="translated">この規則は、オブジェクトリテラルプロパティ内のキーと値の間に一貫した間隔を強制します。長い行の場合は、空白が許されている場所であれば改行しても構いません。</target>
        </trans-unit>
        <trans-unit id="c0f2ba86bbe27d84065f88fc40130b40923b309e" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line.</source>
          <target state="translated">この規則は、開いているブロックトークンと同じ行の次のトークンとの間に一貫した間隔を適用します。このルールはまた、閉じたブロックトークンと同じ行の前のトークンの中での一貫した間隔を強制します。</target>
        </trans-unit>
        <trans-unit id="2f13854e69ca2deaa522c152aaf7bd0dd0713f47" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside array brackets.</source>
          <target state="translated">この規則は、配列の大括弧内での一貫した間隔を強制します。</target>
        </trans-unit>
        <trans-unit id="0c0ca4e3390fdfbc5ad1498ea9a232e65edb5d66" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside braces of object literals, destructuring assignments, and import/export specifiers.</source>
          <target state="translated">このルールは、オブジェクトリテラル、デストラクチャリング代入、およびインポート/エクスポート指定子の中括弧内での一貫した間隔を強制します。</target>
        </trans-unit>
        <trans-unit id="6d043db0d1826295530e2f014a6d61ea421394ad" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside computed property brackets.</source>
          <target state="translated">この規則は、計算されたプロパティの括弧内での一貫した間隔を強制します。</target>
        </trans-unit>
        <trans-unit id="96c5f8bf2c347a8c17cc9bc88351a31a250cb1dd" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent use of semicolons.</source>
          <target state="translated">この規則は、セミコロンの一貫した使用を強制します。</target>
        </trans-unit>
        <trans-unit id="a59f3959596b245a73594e6be551df468e1d0019" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent use of trailing commas in object and array literals.</source>
          <target state="translated">この規則では、オブジェクトと配列リテラルでの末尾のカンマの一貫した使用を強制します。</target>
        </trans-unit>
        <trans-unit id="531a02291fc6e588ae212b7576b1a3890024effd" translate="yes" xml:space="preserve">
          <source>This rule enforces default parameters to be the last of parameters.</source>
          <target state="translated">このルールは、デフォルトのパラメータがパラメータの最後になるように強制します。</target>
        </trans-unit>
        <trans-unit id="5db3f9b56f56672b9a3126a59dac7ef87bdfc4fe" translate="yes" xml:space="preserve">
          <source>This rule enforces line breaks after opening and before closing array brackets.</source>
          <target state="translated">この規則は、配列の大括弧を開いた後、閉じる前に改行を強制します。</target>
        </trans-unit>
        <trans-unit id="f2049a535cbc77192d993c38ebac6ec6175c4b5c" translate="yes" xml:space="preserve">
          <source>This rule enforces line breaks between arguments of a function call.</source>
          <target state="translated">この規則は、関数呼び出しの引数間の改行を強制します。</target>
        </trans-unit>
        <trans-unit id="e7ac9021b1e0472e05a8e46e25b3636bcc7f0646" translate="yes" xml:space="preserve">
          <source>This rule enforces line breaks between array elements.</source>
          <target state="translated">この規則は、配列要素間の改行を強制します。</target>
        </trans-unit>
        <trans-unit id="1c720f0d003344dc99467c044b35512793450286" translate="yes" xml:space="preserve">
          <source>This rule enforces or disallows newlines between operands of a ternary expression. Note: The location of the operators is not enforced by this rule. Please see the &lt;a href=&quot;operator-linebreak&quot;&gt;operator-linebreak&lt;/a&gt; rule if you are interested in enforcing the location of the operators themselves.</source>
          <target state="translated">このルールは、3項式のオペランド間の改行を強制または禁止します。注：オペレーターの場所は、このルールによって強制されません。演算子自体の場所を強制したい場合は、&lt;a href=&quot;operator-linebreak&quot;&gt;演算子改行&lt;/a&gt;規則を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ded924af44d0b97c4617f94c5ba97a87c7c8944" translate="yes" xml:space="preserve">
          <source>This rule enforces parentheses around arrow function parameters regardless of arity. For example:</source>
          <target state="translated">この規則は、arityに関係なく、矢印関数のパラメータの周りの括弧を強制します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="bebe56e90b7c07354c98262213dfb3c803ec31b1" translate="yes" xml:space="preserve">
          <source>This rule enforces spacing around the &lt;code&gt;*&lt;/code&gt; in &lt;code&gt;yield*&lt;/code&gt; expressions.</source>
          <target state="translated">このルールは、 &lt;code&gt;*&lt;/code&gt; in &lt;code&gt;yield*&lt;/code&gt; 式の周囲にスペースを適用します。</target>
        </trans-unit>
        <trans-unit id="9f888babe47c50998c63a687a9d3e9e18eafd108" translate="yes" xml:space="preserve">
          <source>This rule enforces spacing around the colon in object literal properties. It can verify each property individually, or it can ensure horizontal alignment of adjacent properties in an object literal.</source>
          <target state="translated">この規則は、オブジェクトリテラルプロパティのコロンの周りの間隔を強制します。これは、各プロパティを個別に検証したり、オブジェクトリテラル内の隣接するプロパティの水平方向の整列を保証したりすることができます。</target>
        </trans-unit>
        <trans-unit id="032e73c7fd1f30f1da604d9f589b30f380222412" translate="yes" xml:space="preserve">
          <source>This rule enforces that a return statement is present in property getters.</source>
          <target state="translated">このルールは、プロパティゲッターにreturn文が存在することを強制します。</target>
        </trans-unit>
        <trans-unit id="ac3a9a1350618d263f65980c27c390928db1e9dd" translate="yes" xml:space="preserve">
          <source>This rule enforces that each file may contain only a particular number of classes and no more.</source>
          <target state="translated">このルールは、各ファイルが特定の数のクラスのみを含むことができ、それ以上のクラスを含むことはできないことを強制します。</target>
        </trans-unit>
        <trans-unit id="83dae79a63a7a63a48d5387400e7d317de58b017" translate="yes" xml:space="preserve">
          <source>This rule enforces that the &lt;code&gt;*&lt;/code&gt; is either placed next to the &lt;code&gt;function&lt;/code&gt; keyword or the name of the function. The single option for this rule is a string specifying the placement of the asterisk. For this option you may pass &lt;code&gt;&quot;start&quot;&lt;/code&gt;, &lt;code&gt;&quot;middle&quot;&lt;/code&gt; or &lt;code&gt;&quot;end&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;end&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;*&lt;/code&gt; が &lt;code&gt;function&lt;/code&gt; キーワードまたは関数の名前の横に配置されることを強制します。このルールの単一のオプションは、アスタリスクの配置を指定する文字列です。このオプションでは、 &lt;code&gt;&quot;middle&quot;&lt;/code&gt; &lt;code&gt;&quot;start&quot;&lt;/code&gt; 、「middle」、または &lt;code&gt;&quot;end&quot;&lt;/code&gt; 渡すことができます。デフォルトは &lt;code&gt;&quot;end&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f15cceed3a9ebc006b6f485b6d91b005b23ab944" translate="yes" xml:space="preserve">
          <source>This rule enforces the consistent use of either backticks, double, or single quotes.</source>
          <target state="translated">この規則は、バックトーク、ダブルクォーテーション、シングルクォーテーションのいずれかを一貫して使用することを強制します。</target>
        </trans-unit>
        <trans-unit id="47d291563f5b8d3c1ba3c39163caddeb773cd7b3" translate="yes" xml:space="preserve">
          <source>This rule enforces the consistent use of either double or single quotes in JSX attributes.</source>
          <target state="translated">この規則は、JSX属性の中でダブルクォーテーションとシングルクォーテーションを一貫して使用することを強制します。</target>
        </trans-unit>
        <trans-unit id="73b3cab87eff32518800f9ef2b81d5e396da2f90" translate="yes" xml:space="preserve">
          <source>This rule enforces the use of the shorthand syntax. This applies to all methods (including generators) defined in object literals and any properties defined where the key name matches name of the assigned variable.</source>
          <target state="translated">このルールは、短縮構文の使用を強制します。これは、オブジェクトリテラルで定義されたすべてのメソッド(ジェネレータを含む)と、キー名が代入された変数の名前と一致するプロパティに定義されたすべてのメソッドに適用されます。</target>
        </trans-unit>
        <trans-unit id="63e2f1f4c345ee69dced3e8e0c71c623687568b8" translate="yes" xml:space="preserve">
          <source>This rule enforces two things about variables with the designated alias names for &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">このルールは、 &lt;code&gt;this&lt;/code&gt; ために指定されたエイリアス名を持つ変数について2つのことを実施します。</target>
        </trans-unit>
        <trans-unit id="444d122a441ceea0b5a30eb297b723a3dc9f2033" translate="yes" xml:space="preserve">
          <source>This rule enforces usage of &lt;code&gt;return&lt;/code&gt; statement in callbacks of array's methods.</source>
          <target state="translated">このルールは、配列のメソッドのコールバックで &lt;code&gt;return&lt;/code&gt; ステートメントの使用を強制します。</target>
        </trans-unit>
        <trans-unit id="2d6e06e2a0cfada8309f5c13c8d158db7197aa95" translate="yes" xml:space="preserve">
          <source>This rule enforces usage of &lt;code&gt;return&lt;/code&gt; statement in callbacks of array's methods. Additionally, it may also enforce the &lt;code&gt;forEach&lt;/code&gt; array method callback to &lt;strong&gt;not&lt;/strong&gt; return a value by using the &lt;code&gt;checkForEach&lt;/code&gt; option.</source>
          <target state="translated">このルールは、配列のメソッドのコールバックで &lt;code&gt;return&lt;/code&gt; ステートメントの使用を強制します。さらに、 &lt;code&gt;checkForEach&lt;/code&gt; オプションを使用して、 &lt;code&gt;forEach&lt;/code&gt; 配列メソッドのコールバックが値を返さ&lt;strong&gt;ない&lt;/strong&gt;ようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="238a9c1c0e3410b1c4e383ab10436cb8d26cbdb6" translate="yes" xml:space="preserve">
          <source>This rule enforces valid and consistent JSDoc comments. It reports any of the following problems:</source>
          <target state="translated">この規則は、有効で一貫性のある JSDoc コメントを適用します。このルールは、以下の問題のいずれかを報告します。</target>
        </trans-unit>
        <trans-unit id="f9d94e7695ada004444bae53825e6f669fd2ed50" translate="yes" xml:space="preserve">
          <source>This rule enforces variables to be declared either together or separately per function ( for &lt;code&gt;var&lt;/code&gt;) or block (for &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;) scope.</source>
          <target state="translated">このルールは、変数（ &lt;code&gt;var&lt;/code&gt; の場合）またはブロック（ &lt;code&gt;let&lt;/code&gt; および &lt;code&gt;const&lt;/code&gt; の場合）のスコープごとに変数を一緒にまたは別々に宣言することを強制します。</target>
        </trans-unit>
        <trans-unit id="18088de0cb810de950375f85f0f09acbaedce552" translate="yes" xml:space="preserve">
          <source>This rule expects that when you're using the callback pattern in Node.js you'll handle the error.</source>
          <target state="translated">このルールは、Node.jsでコールバックパターンを使用しているときにエラーを処理することを想定しています。</target>
        </trans-unit>
        <trans-unit id="6d08f014599aaed138d7f0531cd956e14e5af7cf" translate="yes" xml:space="preserve">
          <source>This rule finds callback functions of the following methods, then checks usage of &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">このルールは、次のメソッドのコールバック関数を見つけ、 &lt;code&gt;return&lt;/code&gt; ステートメントの使用をチェックします。</target>
        </trans-unit>
        <trans-unit id="4de015a86c0eeee96f453acb9aeb00629487256a" translate="yes" xml:space="preserve">
          <source>This rule finds references which are inside of loop conditions, then checks the variables of those references are modified in the loop.</source>
          <target state="translated">このルールは、ループ条件の中にある参照を見つけ、それらの参照の変数がループ内で変更されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="7dc5c04a1930c4229e3eef900e2e631d84f34e42" translate="yes" xml:space="preserve">
          <source>This rule flags class constructors that can be safely removed without changing how the class works.</source>
          <target state="translated">このルールは、クラスの動作を変更せずに安全に削除できるクラスのコンストラクタにフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="5d5510d64b1f962d0f715e17acd7b01cdebbb284" translate="yes" xml:space="preserve">
          <source>This rule flags escapes that can be safely removed without changing behavior.</source>
          <target state="translated">このルールは、動作を変更せずに安全に削除できるエスケープにフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="66515436d54a3d03c45800e5600fc63e0c805a04" translate="yes" xml:space="preserve">
          <source>This rule forbids the use of the comma operator, with the following exceptions:</source>
          <target state="translated">この規則では、以下の例外を除いてカンマ演算子の使用を禁止しています。</target>
        </trans-unit>
        <trans-unit id="752f68160927832b760bc0ca5bf1d1b31d519295" translate="yes" xml:space="preserve">
          <source>This rule generates warnings for generator functions that do not have the &lt;code&gt;yield&lt;/code&gt; keyword.</source>
          <target state="translated">このルールは、 &lt;code&gt;yield&lt;/code&gt; キーワードを持たないジェネレーター関数に対して警告を生成します。</target>
        </trans-unit>
        <trans-unit id="6e4baecfeba69217207c672a7f95b5eb1b32dcb2" translate="yes" xml:space="preserve">
          <source>This rule has 2 options that are boolean value.</source>
          <target state="translated">このルールには、ブール値の2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="9b81f45580b708ab900651667d8eac17ae2aa1cd" translate="yes" xml:space="preserve">
          <source>This rule has 2 options.</source>
          <target state="translated">このルールには2つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="7f7a94f6d0862ad4b541f1ff11cc9e1506acb8a8" translate="yes" xml:space="preserve">
          <source>This rule has a mixed option:</source>
          <target state="translated">このルールにはオプションが混在しています。</target>
        </trans-unit>
        <trans-unit id="3a7b49741fdcbe3227285811a2145a024828ed28" translate="yes" xml:space="preserve">
          <source>This rule has a number or object option:</source>
          <target state="translated">このルールには、数値またはオブジェクトのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="bfc55f7c0830b8711cbf13cef899c1b734bd5933" translate="yes" xml:space="preserve">
          <source>This rule has a numeric option (defaulted to 1) to specify the maximum number of classes.</source>
          <target state="translated">このルールには、クラスの最大数を指定するための数値オプションがあります (デフォルトは 1)。</target>
        </trans-unit>
        <trans-unit id="29f7ddc0e749392a26648c1cf72ed0933f445be7" translate="yes" xml:space="preserve">
          <source>This rule has a shorthand integer option for the &lt;code&gt;&quot;min&quot;&lt;/code&gt; object property.</source>
          <target state="translated">このルールには、 &lt;code&gt;&quot;min&quot;&lt;/code&gt; オブジェクトプロパティの短縮整数オプションがあります。</target>
        </trans-unit>
        <trans-unit id="f9b6b247413500cee0268031ac478171284bc1b7" translate="yes" xml:space="preserve">
          <source>This rule has a single object option:</source>
          <target state="translated">このルールには、単一のオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="f9cb8fc4aaf5947c491c622a34259791e36e56d8" translate="yes" xml:space="preserve">
          <source>This rule has a single option, which can either be a string or an object.</source>
          <target state="translated">このルールは単一のオプションを持ち、文字列かオブジェクトのどちらかを指定します。</target>
        </trans-unit>
        <trans-unit id="5f94691796172a25ab21a96670f27f9ad03de85a" translate="yes" xml:space="preserve">
          <source>This rule has a single string option:</source>
          <target state="translated">このルールには、1つの文字列オプションがあります。</target>
        </trans-unit>
        <trans-unit id="b3f7cb49c96b78d738e5570bbaae300561ede995" translate="yes" xml:space="preserve">
          <source>This rule has a string option and an object one.</source>
          <target state="translated">このルールには、文字列オプションとオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="1fdc543f514a45dc35817bd8a107deb20cf43858" translate="yes" xml:space="preserve">
          <source>This rule has a string option and an object option.</source>
          <target state="translated">このルールには、文字列オプションとオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="15009c7b86491fb0cd854bebe75b417b85f21787" translate="yes" xml:space="preserve">
          <source>This rule has a string option for the specified regular expression.</source>
          <target state="translated">このルールは、指定された正規表現に対して文字列オプションを持ちます。</target>
        </trans-unit>
        <trans-unit id="3c64e7764e3d5fce1031ea6e079ec3342bb3b38a" translate="yes" xml:space="preserve">
          <source>This rule has a string option or an object option:</source>
          <target state="translated">このルールには、文字列オプションまたはオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="ba5afeca0a5893f9126d0d008ac1c37a6ccd0f8d" translate="yes" xml:space="preserve">
          <source>This rule has a string option, which can have one of the following values:</source>
          <target state="translated">このルールには文字列オプションがあり、以下の値のいずれかを持つことができます。</target>
        </trans-unit>
        <trans-unit id="852afef235e861cde6503e9fa9f341ee032a0b57" translate="yes" xml:space="preserve">
          <source>This rule has a string option.</source>
          <target state="translated">このルールには文字列オプションがあります。</target>
        </trans-unit>
        <trans-unit id="f5bd93375b385530c03b8ebc157178d8d07f7212" translate="yes" xml:space="preserve">
          <source>This rule has a string option:</source>
          <target state="translated">このルールには文字列オプションがあります。</target>
        </trans-unit>
        <trans-unit id="9c39a55484c4b84bf6dfa5df5e0e53f6063212c9" translate="yes" xml:space="preserve">
          <source>This rule has an object option for an exception:</source>
          <target state="translated">このルールには、例外のためのオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="52dd73bca8602fba0879d49a6e8fc4a2cfb3821b" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions to the &lt;code&gt;&quot;all&quot;&lt;/code&gt; option:</source>
          <target state="translated">このルールには、 &lt;code&gt;&quot;all&quot;&lt;/code&gt; オプションの例外のオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="e70c4892dedde6b638785b6c88fe4c0813afdf96" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions to the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option:</source>
          <target state="translated">このルールには、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションの例外のオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="7201dcd2e7cfa36533a6e34dae235405ca73e080" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions to the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option:</source>
          <target state="translated">このルールには、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションの例外のオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="d9872be98d82a692df5d8a8b8578d4914805a58a" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions:</source>
          <target state="translated">このルールには、例外のためのオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="82ca18776efa4316bf999374dc6d7106d4b5ba56" translate="yes" xml:space="preserve">
          <source>This rule has an object option with one option:</source>
          <target state="translated">このルールは、1つのオプションを持つオブジェクトオプションを持っています。</target>
        </trans-unit>
        <trans-unit id="6ad6fdc3c949dd957b61f76666484f847e8b4368" translate="yes" xml:space="preserve">
          <source>This rule has an object option, with one option:</source>
          <target state="translated">このルールには、オブジェクトオプションが1つあります。</target>
        </trans-unit>
        <trans-unit id="2f67df2ade235e8d54be3342c40546c77988ff4f" translate="yes" xml:space="preserve">
          <source>This rule has an object option, with two options:</source>
          <target state="translated">このルールにはオブジェクトオプションがあり、2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="3094029c213ee787cfbe2e63d5f34735e9fe502c" translate="yes" xml:space="preserve">
          <source>This rule has an object option.</source>
          <target state="translated">このルールにはオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="951c0d8fb3776e9f35405a503895842b0d422784" translate="yes" xml:space="preserve">
          <source>This rule has an object option:</source>
          <target state="translated">このルールにはオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="c4ac31fc845cd8efe5c02ca16935752b2eb4fa4a" translate="yes" xml:space="preserve">
          <source>This rule has an option to allow indirect calls to &lt;code&gt;eval&lt;/code&gt;. Indirect calls to &lt;code&gt;eval&lt;/code&gt; are less dangerous than direct calls to &lt;code&gt;eval&lt;/code&gt; because they cannot dynamically change the scope. Because of this, they also will not negatively impact performance to the degree of direct &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">このルールには、 &lt;code&gt;eval&lt;/code&gt; への間接呼び出しを許可するオプションがあります。 &lt;code&gt;eval&lt;/code&gt; の間接呼び出しは、スコープを動的に変更できないため、 &lt;code&gt;eval&lt;/code&gt; の直接呼び出しよりも危険性が低くなります。このため、直接 &lt;code&gt;eval&lt;/code&gt; 程度までパフォーマンスに悪影響を与えることもありません。</target>
        </trans-unit>
        <trans-unit id="ee5a0d877127f98f1f5190f49af0d5113ae140d3" translate="yes" xml:space="preserve">
          <source>This rule has an option to allow specific kinds of functions to be empty.</source>
          <target state="translated">このルールは、特定の種類の関数を空にすることを許可するオプションを持っています。</target>
        </trans-unit>
        <trans-unit id="eebb9041a17bd060368074b436e2c4a3d528bc12" translate="yes" xml:space="preserve">
          <source>This rule has an option.</source>
          <target state="translated">このルールにはオプションがあります。</target>
        </trans-unit>
        <trans-unit id="48d1c64d5495a2e99f48e9b8332c8af255d85c2a" translate="yes" xml:space="preserve">
          <source>This rule has an optional object option &lt;code&gt;{ allowAtRootLevel: &amp;lt;boolean&amp;gt; }&lt;/code&gt;, which determines whether synchronous methods should be allowed at the top level of a file, outside of any functions. This option defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このルールには、オプションのオブジェクトオプション &lt;code&gt;{ allowAtRootLevel: &amp;lt;boolean&amp;gt; }&lt;/code&gt; があります。これは、関数の外で、ファイルのトップレベルで同期メソッドを許可するかどうかを決定します。このオプションのデフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="21b2603628fe9561d676f4902dfce22ac9deade7" translate="yes" xml:space="preserve">
          <source>This rule has an optional object option with the following properties:</source>
          <target state="translated">このルールには、以下のプロパティを持つオプションのオブジェクトオプションがあります。</target>
        </trans-unit>
        <trans-unit id="ced4a1d3ef7275e0df77c251e97ec06ab62b39ab" translate="yes" xml:space="preserve">
          <source>This rule has an options object literal:</source>
          <target state="translated">このルールはオプションオブジェクトリテラルを持っています。</target>
        </trans-unit>
        <trans-unit id="d9e92c652ae0840e9d1a6ab9c4c2631180da05c6" translate="yes" xml:space="preserve">
          <source>This rule has built-in exceptions:</source>
          <target state="translated">このルールには例外が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="c1e899620d824db9c2de90df8c792d8a678b20fc" translate="yes" xml:space="preserve">
          <source>This rule has either a string option:</source>
          <target state="translated">このルールには、文字列オプションがあります。</target>
        </trans-unit>
        <trans-unit id="7e832ec5ce4347a640ccca3da541ebc06af56135" translate="yes" xml:space="preserve">
          <source>This rule has one option which has either &lt;code&gt;&quot;never&quot;&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt; as value.</source>
          <target state="translated">このルールには、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; または &lt;code&gt;&quot;always&quot;&lt;/code&gt; いずれかの値を持つオプションが1つあります。</target>
        </trans-unit>
        <trans-unit id="434cbdea5a2d3771f19900bdf532b25ee6bd3b10" translate="yes" xml:space="preserve">
          <source>This rule has one option whose value can be set to &lt;code&gt;&quot;never&quot;&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt;</source>
          <target state="translated">このルールには1つのオプションがあり、その値は &lt;code&gt;&quot;never&quot;&lt;/code&gt; または &lt;code&gt;&quot;always&quot;&lt;/code&gt; 設定できます</target>
        </trans-unit>
        <trans-unit id="9e5d3d8052d8d8f494f663e4fb4fa9e96f6509e0" translate="yes" xml:space="preserve">
          <source>This rule has one option, which can be a string option or an object option.</source>
          <target state="translated">このルールには1つのオプションがあり、文字列オプションかオブジェクトオプションにすることができます。</target>
        </trans-unit>
        <trans-unit id="c84c9d52925fbbf04d2847bdd02983266eac0f1d" translate="yes" xml:space="preserve">
          <source>This rule has one option. It can either be a string or an object:</source>
          <target state="translated">このルールには1つのオプションがあります。文字列かオブジェクトのどちらかを指定します。</target>
        </trans-unit>
        <trans-unit id="a85aef4180d14627deda0141bfb2f37cfa9a170f" translate="yes" xml:space="preserve">
          <source>This rule has one or more string options:</source>
          <target state="translated">このルールには、1つ以上の文字列オプションがあります。</target>
        </trans-unit>
        <trans-unit id="fa0560ddbbfcd6c046cd8119f1d093fe1c4a3718" translate="yes" xml:space="preserve">
          <source>This rule has the following options that can be specified using an object:</source>
          <target state="translated">このルールには、オブジェクトを使用して指定できる以下のオプションがあります。</target>
        </trans-unit>
        <trans-unit id="933ccefd6eed6377af78dae0c80dd63dbc4981c2" translate="yes" xml:space="preserve">
          <source>This rule has the option to check properties as well.</source>
          <target state="translated">このルールには、プロパティをチェックするオプションもあります。</target>
        </trans-unit>
        <trans-unit id="2f294aaaed5cde3a854dbd6565794eac6902bde5" translate="yes" xml:space="preserve">
          <source>This rule has three main options and one override option to allow some coercions as required.</source>
          <target state="translated">このルールには主に3つのオプションがあり、必要に応じてある程度の強要を許可するためのオーバーライドオプションが1つあります。</target>
        </trans-unit>
        <trans-unit id="22b034be676241194793c07307d1b26caa995f81" translate="yes" xml:space="preserve">
          <source>This rule has three options:</source>
          <target state="translated">このルールには3つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="9cc484d75588b2521efd443a2fa950909fe567b8" translate="yes" xml:space="preserve">
          <source>This rule has two options, a string option and an object option.</source>
          <target state="translated">このルールには、文字列オプションとオブジェクトオプションの2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="ef2597dc19602c27c52cc77ab6d3826ed3d8ce10" translate="yes" xml:space="preserve">
          <source>This rule has two options, the first one can be a string option or an object option. The second one is an object option, it can allow exceptions.</source>
          <target state="translated">このルールには2つのオプションがあり、最初のオプションは文字列オプションかオブジェクトオプションになります。2 番目のオプションはオブジェクトオプションで、例外を許可することができます。</target>
        </trans-unit>
        <trans-unit id="3f09a11456419342935fa96016d35ce66287c118" translate="yes" xml:space="preserve">
          <source>This rule has two options: a string value &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt; which determines whether capitalization of the first word of a comment should be required or forbidden, and optionally an object containing more configuration parameters for the rule.</source>
          <target state="translated">このルールには2つのオプションがあります。コメントの最初の単語の大文字化を必須にするか禁止するかを決定する文字列値 &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; と、オプションでルールの構成パラメーターをさらに含むオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="6367078058884cd6b4661c5442744bde3aaff215" translate="yes" xml:space="preserve">
          <source>This rule ignores spacing which is between &lt;code&gt;=&amp;gt;&lt;/code&gt; and a block. The spacing is handled by the &lt;code&gt;arrow-spacing&lt;/code&gt; rule.</source>
          <target state="translated">このルールは、 &lt;code&gt;=&amp;gt;&lt;/code&gt; とブロックの間の間隔を無視します。間隔は、 &lt;code&gt;arrow-spacing&lt;/code&gt; ルールによって処理されます。</target>
        </trans-unit>
        <trans-unit id="bca8e8fa94e09adcc696245c84caed302ba5ef5c" translate="yes" xml:space="preserve">
          <source>This rule ignores spacing which is between a keyword and a block. The spacing is handled by the &lt;code&gt;keyword-spacing&lt;/code&gt; rule.</source>
          <target state="translated">このルールは、キーワードとブロックの間のスペースを無視します。間隔は、 &lt;code&gt;keyword-spacing&lt;/code&gt; ルールによって処理されます。</target>
        </trans-unit>
        <trans-unit id="c18caf633548258ef7489062bbf1f1475035babe" translate="yes" xml:space="preserve">
          <source>This rule improves readability by enforcing lines between class members. It will not check empty lines before the first member and after the last member, since that is already taken care of by padded-blocks.</source>
          <target state="translated">このルールは、クラスのメンバ間の行を強制することで可読性を向上させます。最初のメンバの前と最後のメンバの後の空行をチェックすることはありません。</target>
        </trans-unit>
        <trans-unit id="067b8ac57f499b00eba00dc6f549da0fd318c726" translate="yes" xml:space="preserve">
          <source>This rule is a formatting preference and not following it won't negatively affect the quality of your code. If alphabetizing imports isn't a part of your coding standards, then you can leave this rule disabled.</source>
          <target state="translated">このルールは書式設定の優先順位であり、これに従わなくてもコードの品質に悪影響を与えることはありません。インポートのアルファベット表記がコーディング標準の一部ではない場合は、このルールを無効にしておくことができます。</target>
        </trans-unit>
        <trans-unit id="e13e8e8f93d2b3049fe0f98cc456cd8cb2c4c64a" translate="yes" xml:space="preserve">
          <source>This rule is a formatting preference and not following it won't negatively affect the quality of your code. If you alphabetizing variables isn't a part of your coding standards, then you can leave this rule off.</source>
          <target state="translated">このルールはフォーマットの好みであり、これに従わないことでコードの品質に悪影響を及ぼすことはありません。変数のアルファベット表記がコーディング標準の一部ではない場合は、このルールを省略しても構いません。</target>
        </trans-unit>
        <trans-unit id="589d22b24ac15f05d684de370251ff86eab8c597" translate="yes" xml:space="preserve">
          <source>This rule is aimed at avoiding the unnecessary use of &lt;code&gt;bind()&lt;/code&gt; and as such will warn whenever an immediately-invoked function expression (IIFE) is using &lt;code&gt;bind()&lt;/code&gt; and doesn't have an appropriate &lt;code&gt;this&lt;/code&gt; value. This rule won't flag usage of &lt;code&gt;bind()&lt;/code&gt; that includes function argument binding.</source>
          <target state="translated">このルールは、 &lt;code&gt;bind()&lt;/code&gt; の不必要な使用を回避することを目的としているため、即時に呼び出される関数式（IIFE）が &lt;code&gt;bind()&lt;/code&gt; を使用していて、適切な &lt;code&gt;this&lt;/code&gt; 値がない場合は常に警告します。このルールは、関数引数バインディングを含む &lt;code&gt;bind()&lt;/code&gt; の使用にフラグを立てません。</target>
        </trans-unit>
        <trans-unit id="8c70a2058d99c61f3b70746e9dac986e9a136f11" translate="yes" xml:space="preserve">
          <source>This rule is aimed at catching debugging code that should be removed and popup UI elements that should be replaced with less obtrusive, custom UIs. As such, it will warn when it encounters &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;prompt&lt;/code&gt;, and &lt;code&gt;confirm&lt;/code&gt; function calls which are not shadowed.</source>
          <target state="translated">このルールは、削除する必要があるデバッグコードと、目立たないカスタムUIに置き換える必要があるポップアップUI要素をキャッチすることを目的としています。したがって、シャドウされていない &lt;code&gt;alert&lt;/code&gt; 、 &lt;code&gt;prompt&lt;/code&gt; 、および &lt;code&gt;confirm&lt;/code&gt; 関数呼び出しが発生すると、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="7bfb43ff0ffe91b368f21ec10e26cfeec43d8538" translate="yes" xml:space="preserve">
          <source>This rule is aimed at catching invalid whitespace that is not a normal tab and space. Some of these characters may cause issues in modern browsers and others will be a debugging issue to spot.</source>
          <target state="translated">このルールは、通常のタブやスペース以外の無効な空白をキャッチすることを目的としています。これらの文字の中には、最近のブラウザで問題を引き起こす可能性があるものもあれば、 デバッグの際に問題となるものもあります。</target>
        </trans-unit>
        <trans-unit id="2b634aa750ad9f7595ca71468ab4512d71e09bfc" translate="yes" xml:space="preserve">
          <source>This rule is aimed at detecting trailing commas in object literals. As such, it will warn whenever it encounters a trailing comma in an object literal.</source>
          <target state="translated">このルールは、オブジェクトリテラルの末尾にあるカンマを検出することを目的としています。そのため、オブジェクトリテラルの中で末尾のカンマに遭遇した場合はいつでも警告を発します。</target>
        </trans-unit>
        <trans-unit id="0e496dc6e0f7ecfc75282e800ae44b3ae2d20c0d" translate="yes" xml:space="preserve">
          <source>This rule is aimed at discouraging the use of &lt;code&gt;var&lt;/code&gt; and encouraging the use of &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; instead.</source>
          <target state="translated">このルールは、 &lt;code&gt;var&lt;/code&gt; の使用を推奨 &lt;code&gt;let&lt;/code&gt; ず、代わりに &lt;code&gt;const&lt;/code&gt; またはletの使用を推奨することを目的としています。</target>
        </trans-unit>
        <trans-unit id="00e21f6b57d9223f33575e542a471d9015cb9895" translate="yes" xml:space="preserve">
          <source>This rule is aimed at discouraging the use of deprecated and sub-optimal code by disallowing the use of &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt;. As such, it will warn when &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; are used.</source>
          <target state="translated">このルールは、 &lt;code&gt;arguments.caller&lt;/code&gt; および &lt;code&gt;arguments.callee&lt;/code&gt; の使用を禁止することにより、非推奨の次善のコードの使用を阻止することを目的としています。そのため、 &lt;code&gt;arguments.caller&lt;/code&gt; と &lt;code&gt;arguments.callee&lt;/code&gt; が使用されると警告します。</target>
        </trans-unit>
        <trans-unit id="fe7262e8e2a0e5d4d25bce407d84657aee9eb731" translate="yes" xml:space="preserve">
          <source>This rule is aimed at discouraging use of &lt;code&gt;process.env&lt;/code&gt; to avoid global dependencies. As such, it will warn whenever &lt;code&gt;process.env&lt;/code&gt; is used.</source>
          <target state="translated">このルールは、グローバルな依存関係を回避するために &lt;code&gt;process.env&lt;/code&gt; の使用を推奨しないことを目的としています。そのため、 &lt;code&gt;process.env&lt;/code&gt; が使用されるたびに警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="f38d792a703ef9f9d6a2c68f162519eb9d489852" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating empty functions. A function will not be considered a problem if it contains a comment.</source>
          <target state="translated">この規則は、空の関数を排除することを目的としています。関数がコメントを含んでいる場合は問題とはみなされません。</target>
        </trans-unit>
        <trans-unit id="86048b16ce9efe6aadc447d1d1b69731d9850583" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating floating decimal points and will warn whenever a numeric value has a decimal point but is missing a number either before or after it.</source>
          <target state="translated">この規則は浮動小数点を排除することを目的としており、数値が小数点を持っていてもその前後の数値が欠落している場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="90246f5410906fbbdf2c6d7d267c1e4dfbcaa5ca" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating self assignments.</source>
          <target state="translated">このルールは、自己課題をなくすことを目的としています。</target>
        </trans-unit>
        <trans-unit id="a3d8ced820518227c86205cea7adabb8486f2d45" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating the type-unsafe equality operators.</source>
          <target state="translated">この規則は、型安全でない等号演算子を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="fd707f1fffe20cc0665053f189146e3082919d53" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating the use of ECMAScript 3 keywords and reserved words as object literal keys. As such, it warns whenever an object key would throw an error in an ECMAScript 3 environment.</source>
          <target state="translated">このルールは、ECMAScript 3 のキーワードや予約語をオブジェクトリテラルキーとして使用しないことを目的としています。そのため、ECMAScript 3 環境でオブジェクトキーがエラーをスローする場合はいつでも警告します。</target>
        </trans-unit>
        <trans-unit id="6434e742662f465f2c60b84d6a9c01051ea938fa" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unintentional fallthrough of one case to the other. As such, it flags any fallthrough scenarios that are not marked by a comment.</source>
          <target state="translated">このルールは、あるケースから他のケースへの意図しないフォールスルーを排除することを目的としています。そのため、コメントでマークされていないフォールスルーシナリオにフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="260f2ba586d82725492f572de36fdd4d41d3910e" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unnecessary labels.</source>
          <target state="translated">このルールは、不要なラベルを排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="0366528693bff0ad732982de9702f6b7dc5b293b" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unused labels.</source>
          <target state="translated">このルールは、未使用のラベルを排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="da7670eae14b162ea5192dc3ed57dd1608fe62e7" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unused variables, functions, and function parameters.</source>
          <target state="translated">このルールは、使われていない変数、関数、関数のパラメータを排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="02bb0cbd9de5fa8c51ec9d1f97a95452b48e34b0" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating variables that have multiple declarations in the same scope.</source>
          <target state="translated">このルールは、同じスコープ内で複数の宣言を持つ変数を排除することを目的としています。</target>
        </trans-unit>
        <trans-unit id="0c05a6e7ca0dd2fe40b3e1941f532a5f5cf4d6e3" translate="yes" xml:space="preserve">
          <source>This rule is aimed at enforcing or eliminating variable initializations during declaration. For example, in the following code, &lt;code&gt;foo&lt;/code&gt; is initialized during declaration, while &lt;code&gt;bar&lt;/code&gt; is not.</source>
          <target state="translated">このルールは、宣言時に変数の初期化を強制または削除することを目的としています。たとえば、次のコードでは、宣言時に &lt;code&gt;foo&lt;/code&gt; が初期化され &lt;code&gt;bar&lt;/code&gt; が、barは初期化されません。</target>
        </trans-unit>
        <trans-unit id="e2ec8ee15749e494465ab5b3d55baddc7a16afc4" translate="yes" xml:space="preserve">
          <source>This rule is aimed at ensuring that callbacks used outside of the main function block are always part-of or immediately preceding a &lt;code&gt;return&lt;/code&gt; statement. This rule decides what is a callback based on the name of the function being called.</source>
          <target state="translated">このルールは、メイン関数ブロックの外部で使用されるコールバックが常に &lt;code&gt;return&lt;/code&gt; ステートメントの一部または直前にあることを保証することを目的としています。このルールは、呼び出される関数の名前に基づいて、コールバックを決定します。</target>
        </trans-unit>
        <trans-unit id="12fc4b12ff585b13beb05aab3ac97951c7198eea" translate="yes" xml:space="preserve">
          <source>This rule is aimed at ensuring there are spaces around infix operators.</source>
          <target state="translated">この規則は、インフィックス演算子の周囲にスペースを確保することを目的としています。</target>
        </trans-unit>
        <trans-unit id="1a6387de3f3ea21e60c53ce842aae405efa22996" translate="yes" xml:space="preserve">
          <source>This rule is aimed at flagging variables that are declared using &lt;code&gt;let&lt;/code&gt; keyword, but never reassigned after the initial assignment.</source>
          <target state="translated">このルールは、 &lt;code&gt;let&lt;/code&gt; キーワードを使用して宣言されたが、最初の割り当て後に再割り当てされない変数にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="6b1b96aa79a5746db0fddb54574f83ee098c170e" translate="yes" xml:space="preserve">
          <source>This rule is aimed at highlighting an unnecessary block of code following an &lt;code&gt;if&lt;/code&gt; containing a return statement. As such, it will warn when it encounters an &lt;code&gt;else&lt;/code&gt; following a chain of &lt;code&gt;if&lt;/code&gt;s, all of them containing a &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">このルールは、 &lt;code&gt;if&lt;/code&gt; ステートメントが含まれている場合に続くコードの不要なブロックを強調表示することを目的としています。そのため、 &lt;code&gt;if&lt;/code&gt; のチェーンに続く &lt;code&gt;else&lt;/code&gt; に遭遇すると警告し、それらすべてに &lt;code&gt;return&lt;/code&gt; ステートメントが含まれます。</target>
        </trans-unit>
        <trans-unit id="3c125b77e2053954512dc9e0da4e09f674ed2077" translate="yes" xml:space="preserve">
          <source>This rule is aimed at highlighting possible typos and unexpected behavior in regular expressions which may arise from the use of empty character classes.</source>
          <target state="translated">この規則は、空文字クラスの使用から生じる可能性のあるタイプミスや正規表現の予期せぬ動作を強調することを目的としています。</target>
        </trans-unit>
        <trans-unit id="8ce587787a5ec83605d0f57bdc841448b1724a7b" translate="yes" xml:space="preserve">
          <source>This rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.</source>
          <target state="translated">この規則は、可能な限りドット表記スタイルの使用を奨励することで、コードの一貫性を維持し、コードの可読性を向上させることを目的としています。そのため、四角括弧表記の不必要な使用に遭遇した場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="c85cc225ae8c575af3c27684f51644a15dda6865" translate="yes" xml:space="preserve">
          <source>This rule is aimed at maintaining consistency and convention by disallowing constructor calls using the &lt;code&gt;new&lt;/code&gt; keyword that do not assign the resulting object to a variable.</source>
          <target state="translated">このルールは、結果のオブジェクトを変数に割り当てない &lt;code&gt;new&lt;/code&gt; キーワードを使用したコンストラクター呼び出しを禁止することにより、一貫性と規則を維持することを目的としています。</target>
        </trans-unit>
        <trans-unit id="c7f71b3a65be1d97541f2cb6028ca8b6ae826b20" translate="yes" xml:space="preserve">
          <source>This rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">このルールは、 &lt;code&gt;Error&lt;/code&gt; オブジェクトになり得ないリテラルやその他の式のスローを禁止することにより、例外をスローするときに一貫性を維持することを目的としています。</target>
        </trans-unit>
        <trans-unit id="cf77e127446fb71dc0302c64127a5f9f047d3592" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing bugs and increasing code clarity by ensuring that block statements are wrapped in curly braces. It will warn when it encounters blocks that omit curly braces.</source>
          <target state="translated">このルールは、ブロック文が中括弧で包まれるようにすることでバグを防ぎ、コードの明瞭性を高めることを目的としています。中括弧を省略したブロックに遭遇した場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="cc37a51fc3258e58ad6da2d081ed52d7b851fde8" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing errors that may arise from using the &lt;code&gt;__iterator__&lt;/code&gt; property, which is not implemented in several browsers. As such, it will warn whenever it encounters the &lt;code&gt;__iterator__&lt;/code&gt; property.</source>
          <target state="translated">このルールは、 &lt;code&gt;__iterator__&lt;/code&gt; プロパティの使用によって発生する可能性のあるエラーを防ぐことを目的としています。これは、いくつかのブラウザーには実装されていません。そのため、 &lt;code&gt;__iterator__&lt;/code&gt; プロパティが検出されると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="560f64042b31848c0a3db333f58d5b5e2588f733" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing potentially dangerous, unnecessary, and slow code by disallowing the use of the &lt;code&gt;eval()&lt;/code&gt; function. As such, it will warn whenever the &lt;code&gt;eval()&lt;/code&gt; function is used.</source>
          <target state="translated">このルールは、 &lt;code&gt;eval()&lt;/code&gt; 関数の使用を禁止することにより、潜在的に危険で不要な低速コードを防止することを目的としています。そのため、 &lt;code&gt;eval()&lt;/code&gt; 関数が使用されるたびに警告します。</target>
        </trans-unit>
        <trans-unit id="adf6b0cc4e71f7b12f6baf1f1a566a2f78392cec" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing synchronous methods from being called in Node.js. It looks specifically for the method suffix &quot;&lt;code&gt;Sync&lt;/code&gt;&quot; (as is the convention with Node.js operations).</source>
          <target state="translated">このルールは、Node.jsで同期メソッドが呼び出されないようにすることを目的としています。これは、特にメソッドのサフィックス「 &lt;code&gt;Sync&lt;/code&gt; 」を探します（Node.js操作の規則と同様）。</target>
        </trans-unit>
        <trans-unit id="7540a244d6ef1b536d6c740e84f0c2c02785e878" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing the accidental calling of &lt;code&gt;Symbol&lt;/code&gt; with the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">このルールは、 &lt;code&gt;new&lt;/code&gt; オペレーターが誤って &lt;code&gt;Symbol&lt;/code&gt; を呼び出すのを防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="469e6a65fc6fd9de2ace34ba2b94e32a85a0ef7a" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing the unintended conversion of a string to a number of a different base than intended or at preventing the redundant &lt;code&gt;10&lt;/code&gt; radix if targeting modern environments only.</source>
          <target state="translated">このルールは、意図しないストリングの意図しない別のベースへの変換を防止すること、または現代の環境のみを対象とする場合の冗長な &lt;code&gt;10&lt;/code&gt; 基数を防止することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6082ce56b65e7772c7b223e16d93e46ed1bfc67b" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing the use of multiline strings.</source>
          <target state="translated">このルールは、複数行文字列の使用を防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="33ac7800e287b6d68c276fe31df41e059176f86f" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing unexpected behavior in your program that may arise from a bug in IE 8 and earlier, in which the catch clause parameter can leak into outer scopes. This rule will warn whenever it encounters a catch clause parameter that has the same name as a variable in an outer scope.</source>
          <target state="translated">このルールは、IE 8 以前のバグに起因するプログラムの予期せぬ動作を防ぐことを目的としています。このルールは、外部スコープ内の変数と同じ名前の catch 節パラメータに遭遇した場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="0dbcaf4d0178e2b4de696fe49e174ac1200fc1b2" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing unexpected behavior that could arise from using a &lt;code&gt;for in&lt;/code&gt; loop without filtering the results in the loop. As such, it will warn when &lt;code&gt;for in&lt;/code&gt; loops do not filter their results with an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">このルールは、ループ内の結果をフィルタリングせずに &lt;code&gt;for in&lt;/code&gt; ループを使用することで発生する可能性のある予期しない動作を防ぐことを目的としています。そのため、 &lt;code&gt;for in&lt;/code&gt; ループが &lt;code&gt;if&lt;/code&gt; ステートメントで結果をフィルタリングしない場合に警告します。</target>
        </trans-unit>
        <trans-unit id="3a93186eda9fc1ad5e2354c3aec9e22d64effac0" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing unnecessary &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directives. As such, it will warn when it encounters a &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive when already in strict mode.</source>
          <target state="translated">このルールは、不要な &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; を防ぐことを目的としています。ディレクティブ。そのため、 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; に遭遇すると警告します。すでに厳密モードの場合のディレクティブ。</target>
        </trans-unit>
        <trans-unit id="c75e9e0cef10da3b36758024c4ec0b7ab60d8f61" translate="yes" xml:space="preserve">
          <source>This rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is &lt;code&gt;20&lt;/code&gt;).</source>
          <target state="translated">このルールは、プログラムで許容される循環的複雑度の量を制限することにより、コードの複雑度を低減することを目的としています。そのため、循環的複雑度が構成されたしきい値（デフォルトは &lt;code&gt;20&lt;/code&gt; ）を超えると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="1c9f3c003687bf5a00c45b29be601579c09529f1" translate="yes" xml:space="preserve">
          <source>This rule is aimed at using named capture groups instead of numbered capture groups in regular expressions.</source>
          <target state="translated">この規則は、正規表現で番号付きのキャプチャグループの代わりに名前付きのキャプチャグループを使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="e1f61236848decd6fad6b255224627f388f6ef5c" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; keywords before &lt;code&gt;super()&lt;/code&gt; callings.</source>
          <target state="translated">このルールは、 &lt;code&gt;super()&lt;/code&gt; 呼び出しの前に &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; キーワードにフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="fbd358e28b01f27d52086bb527fafa61ec2d4f7f" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag class methods that do not use &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">この規則は使用しないフラグのクラスメソッドに向けられ &lt;code&gt;this&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac40186b374e32b3e6012af68a62e2a5191a2d9a" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag invalid/missing &lt;code&gt;super()&lt;/code&gt; calls.</source>
          <target state="translated">このルールは、無効または欠落している &lt;code&gt;super()&lt;/code&gt; 呼び出しにフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="6c08c2c004052d5b64c974234aa06e6ffef93c62" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag modifying variables of class declarations.</source>
          <target state="translated">このルールは、クラス宣言の変数を変更することにフラグを立てることを目的としています。</target>
        </trans-unit>
        <trans-unit id="dfd92744aabb4c3693bd07a9fcd78bf0a22ec16d" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag modifying variables that are declared using &lt;code&gt;const&lt;/code&gt; keyword.</source>
          <target state="translated">このルールは、 &lt;code&gt;const&lt;/code&gt; キーワードを使用して宣言された変更変数にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="a3a1f9f8c364f4f2d38823a7ebaee68b7abc1d93" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag shorter notations for the type conversion, then suggest a more self-explanatory notation.</source>
          <target state="translated">この規則は,型変換のための短い記法にフラグを立て,より分かりやすい記法を提案することを目的としています。</target>
        </trans-unit>
        <trans-unit id="0d483a51695be57209456cbf5a63f44d433ef8fd" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag the use of duplicate names in class members.</source>
          <target state="translated">このルールは、クラス・メンバーでの重複した名前の使用にフラグを立てることを目的としています。</target>
        </trans-unit>
        <trans-unit id="d6c794328277f0807f621415f1e32fb251dcbe5a" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;+&lt;/code&gt; operators with strings.</source>
          <target state="translated">このルールは、 &lt;code&gt;+&lt;/code&gt; 演算子の使用に文字列でフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="d2bbde19885322cbe4381d2e3df23145f2d289db" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;Function.prototype.apply()&lt;/code&gt; in situations where spread syntax could be used instead.</source>
          <target state="translated">このルールは、代わりにスプレッド構文を使用できる状況で、 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; の使用にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="47e32fce626be8349cd3c6fcec19ea5364150d08" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; that can be replaced with the normal function invocation.</source>
          <target state="translated">このルールは、通常の関数呼び出しで置き換えることができる &lt;code&gt;Function.prototype.call()&lt;/code&gt; および &lt;code&gt;Function.prototype.apply()&lt;/code&gt; の使用にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="a84766a7048c8e0f0348021406e6bb0ead824db7" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;arguments&lt;/code&gt; variables.</source>
          <target state="translated">このルールは、 &lt;code&gt;arguments&lt;/code&gt; 変数の使用にフラグを付けることを目的としています。</target>
        </trans-unit>
        <trans-unit id="4c28d58028a6eec8a28d1185085e8ddf141802b5" translate="yes" xml:space="preserve">
          <source>This rule is mostly useful for browser scripts. Top-level declarations in ES modules and CommonJS modules create module-scoped variables. ES modules also have implicit &lt;code&gt;strict&lt;/code&gt; mode, which prevents global variable leaks.</source>
          <target state="translated">このルールは、ブラウザスクリプトで主に役立ちます。ESモジュールおよびCommonJSモジュールの最上位の宣言により、モジュールスコープの変数が作成されます。ESモジュールには暗黙の &lt;code&gt;strict&lt;/code&gt; モードもあり、グローバル変数のリークを防ぎます。</target>
        </trans-unit>
        <trans-unit id="8cd3bc81b47b2e4d1e8c9005b39185071a1dbee0" translate="yes" xml:space="preserve">
          <source>This rule is warning every &lt;code&gt;eval()&lt;/code&gt; even if the &lt;code&gt;eval&lt;/code&gt; is not global's. This behavior is in order to detect calls of direct &lt;code&gt;eval&lt;/code&gt;. Such as:</source>
          <target state="translated">このルールは、 &lt;code&gt;eval&lt;/code&gt; がグローバルのものでない場合でも、すべての &lt;code&gt;eval()&lt;/code&gt; に警告します。この動作は、ダイレクト &lt;code&gt;eval&lt;/code&gt; の呼び出しを検出するためです。といった：</target>
        </trans-unit>
        <trans-unit id="8a92f926f4ed7ce1fe6115db133b5a9bbf22e1b4" translate="yes" xml:space="preserve">
          <source>This rule judges from following conditions whether or not the function is a constructor:</source>
          <target state="translated">このルールは、以下の条件から関数がコンストラクタであるかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="fc898e9b4c8ea102c28b80e26d75de9f92115480" translate="yes" xml:space="preserve">
          <source>This rule judges from following conditions whether or not the function is a method:</source>
          <target state="translated">本規則は、以下の条件から、その関数がメソッドであるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="6343f914f331a1a209ff6afd1ff389afe41cd1b8" translate="yes" xml:space="preserve">
          <source>This rule locates function expressions used as callbacks or function arguments. An error will be produced for any that could be replaced by an arrow function without changing the result.</source>
          <target state="translated">このルールは、コールバックまたは関数引数として使用される関数式を検索します。結果を変更せずに矢印関数に置き換えることができた場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6ece644467d2a9c81b29d68c0b7edf838ce2a95c" translate="yes" xml:space="preserve">
          <source>This rule looks for accessing a given property key on a given object name, either when reading the property's value or invoking it as a function. You may specify an optional message to indicate an alternative API or a reason for the restriction.</source>
          <target state="translated">このルールは、プロパティの値を読み込むとき、または関数として呼び出すときに、指定されたオブジェクト名で指定されたプロパティキーにアクセスするかどうかを調べます。オプションのメッセージを指定して、代替の API や制限の理由を示すことができます。</target>
        </trans-unit>
        <trans-unit id="aaf2ff078c424bc14e83623d32e969252a2c3994" translate="yes" xml:space="preserve">
          <source>This rule looks for any underscores (&lt;code&gt;_&lt;/code&gt;) located within the source code. It ignores leading and trailing underscores and only checks those in the middle of a variable name. If ESLint decides that the variable is a constant (all uppercase), then no warning will be thrown. Otherwise, a warning will be thrown. This rule only flags definitions and assignments but not function calls. In case of ES6 &lt;code&gt;import&lt;/code&gt; statements, this rule only targets the name of the variable that will be imported into the local module scope.</source>
          <target state="translated">このルールは、ソースコード内にあるアンダースコア（ &lt;code&gt;_&lt;/code&gt; ）を探します。先頭と末尾のアンダースコアは無視され、変数名の途中のアンダースコアのみがチェックされます。ESLintが変数が定数（すべて大文字）であると判断した場合、警告はスローされません。そうしないと、警告がスローされます。このルールは、定義と割り当てにのみフラグを付け、関数呼び出しにはフラグを付けません。ES6 &lt;code&gt;import&lt;/code&gt; ステートメントの場合、このルールは、ローカルモジュールスコープにインポートされる変数の名前のみをターゲットにします。</target>
        </trans-unit>
        <trans-unit id="e0626c81467713cb589ff34f137e8fb8cfd1e940" translate="yes" xml:space="preserve">
          <source>This rule looks for tabs anywhere inside a file: code, comments or anything else.</source>
          <target state="translated">このルールは、ファイル内の任意の場所にあるタブを探します。</target>
        </trans-unit>
        <trans-unit id="fe6d5bb22323ad5d5647f61d91ef52f3f08fa9fe" translate="yes" xml:space="preserve">
          <source>This rule makes it possible to ensure, as some style guides require, that property specifications appear on separate lines for better readability. For example, you can prohibit all of these:</source>
          <target state="translated">この規則は、いくつかのスタイルガイドが要求しているように、読みやすさを向上させるためにプロパティの指定を別の行で表示することを確実にすることを可能にします。例えば、これらをすべて禁止することができます。</target>
        </trans-unit>
        <trans-unit id="e6c6fd0d733257023837aabbd888ed65fb93bb96" translate="yes" xml:space="preserve">
          <source>This rule may conflict with &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule. If you use both this and &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule together, you need to use the &lt;code&gt;nestedBinaryExpressions&lt;/code&gt; option of &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule.</source>
          <target state="translated">このルールは&lt;a href=&quot;no-extra-parens&quot;&gt;、追加の括弧なしの&lt;/a&gt;ルールと競合する可能性があります。このルールと&lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt;ルールの両方を一緒に使用する場合は、&lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt;ルールの &lt;code&gt;nestedBinaryExpressions&lt;/code&gt; オプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8037ce93151914686c514294bbb5a47669603902" translate="yes" xml:space="preserve">
          <source>This rule normalize style of spacing before/after an arrow function's arrow(&lt;code&gt;=&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">このルールは、アロー関数のarrow（ &lt;code&gt;=&amp;gt;&lt;/code&gt; ）の前後の間隔のスタイルを正規化します。</target>
        </trans-unit>
        <trans-unit id="464d96f575968e66e1eb040bc112bd7c57f4d84f" translate="yes" xml:space="preserve">
          <source>This rule optionally takes a second argument, which should be an object with the following supported properties:</source>
          <target state="translated">このルールはオプションで第二引数を取ります。</target>
        </trans-unit>
        <trans-unit id="9baace629bb134edd43e4c5267c9efc7ed36c31e" translate="yes" xml:space="preserve">
          <source>This rule permits you to restrict the locations of property specifications in object literals. You may prohibit any part of any property specification from appearing on the same line as any part of any other property specification. You may make this prohibition absolute, or, by invoking an object option, you may allow an exception, permitting an object literal to have all parts of all of its property specifications on a single line.</source>
          <target state="translated">このルールでは、オブジェクトリテラル内のプロパティ指定の位置を制限することができます。プロパティ指定のいずれかの部分が、他のプロパティ指定のいずれかの部分と同じ行に現れることを禁止することができます。この禁止を絶対とすることもできますし、オブジェクトオプションを呼び出すことで、例外を許可して、オブジェクトリテラルがそのプロパティ指定のすべての部分を一行に持つことを許可することもできます。</target>
        </trans-unit>
        <trans-unit id="42e1fb9cb344e3a8741f57ed93b48a730c10e3e8" translate="yes" xml:space="preserve">
          <source>This rule prevents the use of spaces before a semicolon in expressions.</source>
          <target state="translated">この規則は、式でセミコロンの前にスペースを使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="9344d4181d9d19d2241916e31b569c7283b76ebe" translate="yes" xml:space="preserve">
          <source>This rule provides compatibility with treatment of global variables in &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; and &lt;a href=&quot;http://www.jslint.com&quot;&gt;JSLint&lt;/a&gt;.</source>
          <target state="translated">このルールは、&lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt;および&lt;a href=&quot;http://www.jslint.com&quot;&gt;JSLint&lt;/a&gt;でのグローバル変数の扱いとの互換性を提供します。</target>
        </trans-unit>
        <trans-unit id="9b214579f0990ddb2ff473b51002db1c7d40b204" translate="yes" xml:space="preserve">
          <source>This rule reports &lt;code&gt;catch&lt;/code&gt; clauses that only &lt;code&gt;throw&lt;/code&gt; the caught error.</source>
          <target state="translated">このルールは、 &lt;code&gt;catch&lt;/code&gt; れたエラーのみを &lt;code&gt;throw&lt;/code&gt; するcatch句を報告します。</target>
        </trans-unit>
        <trans-unit id="86ccc54835bd27114caf48473e26f3403799e952" translate="yes" xml:space="preserve">
          <source>This rule reports comments that include any of the predefined terms specified in its configuration.</source>
          <target state="translated">このルールは、その構成で指定された事前定義済みの用語を含むコメントを報告します。</target>
        </trans-unit>
        <trans-unit id="7203ab3e2552fc284d4c7e35257ffb49ab0e5bda" translate="yes" xml:space="preserve">
          <source>This rule reports line terminators around semicolons.</source>
          <target state="translated">このルールでは、セミコロンの周りの行末を報告します。</target>
        </trans-unit>
        <trans-unit id="c31d1fb3de11835c7945c7c990282db76d0347ec" translate="yes" xml:space="preserve">
          <source>This rule reports the regular expressions which include multiple code point characters in character class syntax.</source>
          <target state="translated">この規則は、文字クラス構文に複数のコードポイント文字を含む正規表現を報告します。</target>
        </trans-unit>
        <trans-unit id="3dcc1bc4f904048de1bf50d6256dfff027039954" translate="yes" xml:space="preserve">
          <source>This rule reports the regular expressions which include multiple code point characters in character class syntax. This rule considers the following characters as multiple code point characters.</source>
          <target state="translated">この規則は、文字クラス構文に複数のコードポイント文字を含む正規表現を報告します。この規則では、以下の文字を複数のコードポイント文字とみなします。</target>
        </trans-unit>
        <trans-unit id="341b6ded2aa352fc643dd7e057d61170be9ad829" translate="yes" xml:space="preserve">
          <source>This rule requires &lt;code&gt;return&lt;/code&gt; statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the &lt;code&gt;new&lt;/code&gt; operator) return the instantiated object implicitly if they do not return another object explicitly.</source>
          <target state="translated">このルールでは、 &lt;code&gt;return&lt;/code&gt; ステートメントで常に値を指定するか、値を指定しないようにする必要があります。このルールは、名前が大文字で始まる関数定義を無視します。コンストラクター（ &lt;code&gt;new&lt;/code&gt; 演算子で呼び出された場合）は、明示的に別のオブジェクトを返さない場合、インスタンス化されたオブジェクトを暗黙的に返すためです。</target>
        </trans-unit>
        <trans-unit id="ee3453de508c549ff19a5f0b11826be286a05d96" translate="yes" xml:space="preserve">
          <source>This rule requires JSDoc comments for specified nodes. Supported nodes:</source>
          <target state="translated">このルールでは、指定されたノードに対して JSDoc のコメントが必要です。サポートされているノード。</target>
        </trans-unit>
        <trans-unit id="cec9a26dc266b4eb2c9c2da3663bcc6a85dec09a" translate="yes" xml:space="preserve">
          <source>This rule requires a newline after each call in a method chain or deep member access. Computed property accesses such as &lt;code&gt;instance[something]&lt;/code&gt; are excluded.</source>
          <target state="translated">このルールでは、メソッドチェーンの各呼び出しまたはディープメンバーアクセスの後に改行が必要です。 &lt;code&gt;instance[something]&lt;/code&gt; などの計算されたプロパティアクセスは除外されます。</target>
        </trans-unit>
        <trans-unit id="f95ad21be29bb1ede776ca2426d292d0dd3966e4" translate="yes" xml:space="preserve">
          <source>This rule requires all calls to &lt;code&gt;require()&lt;/code&gt; to be at the top level of the module, similar to ES6 &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements, which also can occur only at the top level.</source>
          <target state="translated">このルールでは、ES6の &lt;code&gt;import&lt;/code&gt; および &lt;code&gt;export&lt;/code&gt; ステートメントと同様に、 &lt;code&gt;require()&lt;/code&gt; へのすべての呼び出しがモジュールの最上位にある必要があり、これも最上位でのみ発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0177d9705774367a5c4aa0718fbbf2bd9ba69779" translate="yes" xml:space="preserve">
          <source>This rule requires all immediately-invoked function expressions to be wrapped in parentheses.</source>
          <target state="translated">この規則では、即座に呼び出されたすべての関数式を括弧で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="e9e72f8218177dd1f7a1a226aff9535bffa2d8f5" translate="yes" xml:space="preserve">
          <source>This rule requires an empty line before &lt;code&gt;return&lt;/code&gt; statements to increase code clarity, except when the &lt;code&gt;return&lt;/code&gt; is alone inside a statement group (such as an if statement). In the latter case, the &lt;code&gt;return&lt;/code&gt; statement does not need to be delineated by virtue of it being alone. Comments are ignored and do not count as empty lines.</source>
          <target state="translated">このルールでは、 &lt;code&gt;return&lt;/code&gt; がステートメントグループ内にある場合（ifステートメントなど）を除いて、コードを明確にするために、 &lt;code&gt;return&lt;/code&gt; ステートメントの前に空行が必要です。後者の場合、 &lt;code&gt;return&lt;/code&gt; ステートメントは、それが単独であることによって輪郭を描く必要はありません。コメントは無視され、空行としてカウントされません。</target>
        </trans-unit>
        <trans-unit id="bf9d62bda82c79ce01bd453293ce707585038d1f" translate="yes" xml:space="preserve">
          <source>This rule requires constructor names to begin with a capital letter. Certain built-in identifiers are exempt from this rule. These identifiers are:</source>
          <target state="translated">この規則では、コンストラクタ名を大文字で始める必要があります。特定の組み込み識別子は、この規則の対象外となります。これらの識別子は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9b1667cd42998acba334e40e3675461c6f6ea647" translate="yes" xml:space="preserve">
          <source>This rule requires empty lines before and/or after comments. It can be enabled separately for both block (&lt;code&gt;/*&lt;/code&gt;) and line (&lt;code&gt;//&lt;/code&gt;) comments. This rule does not apply to comments that appear on the same line as code and does not require empty lines at the beginning or end of a file.</source>
          <target state="translated">このルールでは、コメントの前後に空の行が必要です。ブロック（ &lt;code&gt;/*&lt;/code&gt; ）コメントと行（ &lt;code&gt;//&lt;/code&gt; ）コメントの両方に対して個別に有効にすることができます。このルールは、コードと同じ行に表示されるコメントには適用されず、ファイルの先頭または末尾に空の行を必要としません。</target>
        </trans-unit>
        <trans-unit id="8b344cf66704dc0e8c5d9619033160b8935d092d" translate="yes" xml:space="preserve">
          <source>This rule requires function names to match the name of the variable or property to which they are assigned. The rule will ignore property assignments where the property name is a literal that is not a valid identifier in the ECMAScript version specified in your configuration (default ES5).</source>
          <target state="translated">このルールでは、関数名は、それらが割り当てられている変数またはプロパティの名前と一致する必要があります。このルールは、プロパティ名が、構成で指定された ECMAScript のバージョン(デフォルト ES5)で有効な識別子ではないリテラルである場合のプロパティの代入を無視します。</target>
        </trans-unit>
        <trans-unit id="8e3ecea5100b9cfb30c6850203c63a3e999ae46a" translate="yes" xml:space="preserve">
          <source>This rule requires grouped definitions of accessor functions for the same property in object literals, class declarations and class expressions.</source>
          <target state="translated">この規則では、オブジェクトリテラル、クラス宣言、およびクラス式において、同じプロパティに対するアクセサ関数をグループ化して定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="c6f6a421235f2b2c80fa80eed59abe0f68217d99" translate="yes" xml:space="preserve">
          <source>This rule requires identifiers in assignments and &lt;code&gt;function&lt;/code&gt; definitions to match a specified regular expression.</source>
          <target state="translated">このルールでは、指定された正規表現に一致するように、割り当てと &lt;code&gt;function&lt;/code&gt; 定義の識別子が必要です。</target>
        </trans-unit>
        <trans-unit id="6c51336293652cc83ca8728f02c79367cda21e9d" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows assignment operator shorthand where possible.</source>
          <target state="translated">このルールでは、可能な場合には代入演算子の短縮形を要求したり、禁止したりします。</target>
        </trans-unit>
        <trans-unit id="22f10b36cba6586758eaf8ebcdbe60c0ebb48fbd" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows blank lines between the given 2 kinds of statements. Properly blank lines help developers to understand the code.</source>
          <target state="translated">この規則は、与えられた2種類の文の間の空行を要求したり、禁止したりします。適切な空行は、開発者がコードを理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5c859565f0d1ede643bfaafb3ac34fd0dc296134" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows blank newlines around directive prologues. This rule does not enforce any conventions about blank newlines between the individual directives. In addition, it does not require blank newlines before directive prologues unless they are preceded by a comment. Please use the &lt;a href=&quot;padded-blocks&quot;&gt;padded-blocks&lt;/a&gt; rule if this is a style you would like to enforce.</source>
          <target state="translated">このルールは、ディレクティブのプロローグの周りの空白の改行を要求または禁止します。この規則では、個々のディレクティブ間の空白改行に関する規則は適用されません。さらに、コメントの前にない限り、ディレクティブのプロローグの前に空白の改行は必要ありません。これが適用したいスタイルである場合は、&lt;a href=&quot;padded-blocks&quot;&gt;padded-blocks&lt;/a&gt;ルールを使用してください。</target>
        </trans-unit>
        <trans-unit id="36f7341079241df9a4b2bc7451566985affaf21d" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows global strict mode invoked by a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; pragma in the global scope.</source>
          <target state="translated">このルールは、グローバルスコープの &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; プラグマによって呼び出されるグローバルstrictモードを要求または禁止します。</target>
        </trans-unit>
        <trans-unit id="1fc8f67c63328a85e17bae0b63d1e86f046a16cd" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows spaces between the function name and the opening parenthesis that calls it.</source>
          <target state="translated">このルールでは、関数名と、それを呼び出す最初の括弧との間にスペースを必要とするかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="0ab58631693b6855e4a8251c15c028da7aefe4d3" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows strict mode directives.</source>
          <target state="translated">このルールは、厳密なモードディレクティブを要求したり、禁止したりします。</target>
        </trans-unit>
        <trans-unit id="57f0399ff9843ec83d529b9015c1a7cc83634568" translate="yes" xml:space="preserve">
          <source>This rule requires quotes around object literal property names.</source>
          <target state="translated">このルールでは、オブジェクトリテラルのプロパティ名の周りに引用符を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="4ff93f7cafef4d6cf7e4c4ed239aaafdf010c4c0" translate="yes" xml:space="preserve">
          <source>This rule requires that all imports from a single module exists in a single &lt;code&gt;import&lt;/code&gt; statement.</source>
          <target state="translated">このルールでは、単一モジュールからのすべてのインポートが単一の &lt;code&gt;import&lt;/code&gt; 文に存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e8edba64ba736d9f931bbdd0fd29d127cce08a0" translate="yes" xml:space="preserve">
          <source>This rule requires that function declarations and, optionally, variable declarations be in the root of a program or the body of a function.</source>
          <target state="translated">このルールでは、関数の宣言と、オプションで変数の宣言がプログラムのルートまたは関数のボディにあることを要求します。</target>
        </trans-unit>
        <trans-unit id="53cfd9d729e8a263c0ddf818bb9f5eab7ee800a9" translate="yes" xml:space="preserve">
          <source>This rule restricts the use of parentheses to only where they are necessary.</source>
          <target state="translated">このルールでは、括弧の使用を必要なところだけに制限しています。</target>
        </trans-unit>
        <trans-unit id="cef2b23a2f6a1633d7f45584fec2639671e225c6" translate="yes" xml:space="preserve">
          <source>This rule restricts what can be thrown as an exception. When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">このルールは、例外としてスローできるものを制限します。最初に作成されたときは、リテラルがスローされないように（したがって名前が）防止されていましたが、現在は拡張されて、 &lt;code&gt;Error&lt;/code&gt; オブジェクトである可能性のある式のみが許可されています。</target>
        </trans-unit>
        <trans-unit id="c24e65c6fcdc1b378a60d46be96c51dbb547de6d" translate="yes" xml:space="preserve">
          <source>This rule should not be used in ES3/5 environments.</source>
          <target state="translated">このルールはES3/5環境では使用しないでください。</target>
        </trans-unit>
        <trans-unit id="24acb5e74167bd0bbfd66efd587e2707275f2d12" translate="yes" xml:space="preserve">
          <source>This rule should not be used in ES3/5 environments. In addition, this rule can be safely turned off if you don't want to enforce presence of &lt;code&gt;description&lt;/code&gt; when creating Symbols.</source>
          <target state="translated">このルールはES3 / 5環境では使用しないでください。さらに、シンボルの作成時に &lt;code&gt;description&lt;/code&gt; 存在を強制したくない場合は、このルールを安全にオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="151c41d8b4dc7702d9553b44714eec4695467e52" translate="yes" xml:space="preserve">
          <source>This rule should not be used unless ES2016 is supported in your codebase.</source>
          <target state="translated">このルールは、コードベースでES2016がサポートされていない限り、使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="0a5f78acac29dc36cd309e293b513159ad726d5a" translate="yes" xml:space="preserve">
          <source>This rule should not be used unless ES2018 is supported in your codebase.</source>
          <target state="translated">このルールは、コードベースでES2018がサポートされていない限り、使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="ba5e010c2d80cf6332f4d78e262ee0df96cd6c16" translate="yes" xml:space="preserve">
          <source>This rule takes a list of objects, where the object name and property names are specified:</source>
          <target state="translated">このルールは、オブジェクト名とプロパティ名が指定されたオブジェクトのリストを受け取ります。</target>
        </trans-unit>
        <trans-unit id="0b02f979bb1e5b0404a2b2da410003ab016f4ebd" translate="yes" xml:space="preserve">
          <source>This rule takes a list of strings, where each string is a global to be restricted:</source>
          <target state="translated">このルールは文字列のリストを取り、各文字列は制限されるグローバルです。</target>
        </trans-unit>
        <trans-unit id="b201ae39f465f167a6f7078200eb2b3626059f5e" translate="yes" xml:space="preserve">
          <source>This rule takes a list of strings, where each string is an AST selector:</source>
          <target state="translated">このルールは文字列のリストを受け取ります。</target>
        </trans-unit>
        <trans-unit id="82b286a5fe6ed277f08bedb934e5ba7461eea738" translate="yes" xml:space="preserve">
          <source>This rule takes an object argument with &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; properties, each with a Boolean value.</source>
          <target state="translated">このルールは、それぞれブール値を持つ &lt;code&gt;before&lt;/code&gt; プロパティと &lt;code&gt;after&lt;/code&gt; プロパティを持つオブジェクト引数を取ります。</target>
        </trans-unit>
        <trans-unit id="ef7b35502490d4261fd8713f1ba41161625386de" translate="yes" xml:space="preserve">
          <source>This rule takes an optional string of &quot;always&quot; or &quot;never&quot; (when omitted, it defaults to &quot;always&quot;), and an optional options object with two properties &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; and &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt;.</source>
          <target state="translated">このルールは、「常に」または「決して」のオプションの文字列を取ります（「常に」に、デフォルトを省略する場合）、およびオプションの選択肢は二つのプロパティを持つオブジェクト &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; と &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d95c86b835fd844af2faf1d625ccd11d336d790a" translate="yes" xml:space="preserve">
          <source>This rule takes one argument which can be a string or an object. The string settings are the same as those of the &lt;code&gt;vars&lt;/code&gt; property (explained below).</source>
          <target state="translated">このルールは、文字列またはオブジェクトの引数を1つ取ります。文字列の設定は、 &lt;code&gt;vars&lt;/code&gt; プロパティの設定と同じです（以下で説明）。</target>
        </trans-unit>
        <trans-unit id="61b52a64cc80497d13bf1f5087459fd9bf4f1964" translate="yes" xml:space="preserve">
          <source>This rule takes one argument, which can be a string or an object. The string settings are the same as those of the &lt;code&gt;position&lt;/code&gt; property (explained below). The object option has the following properties:</source>
          <target state="translated">このルールは、文字列またはオブジェクトである1つの引数を取ります。文字列の設定は、 &lt;code&gt;position&lt;/code&gt; プロパティの設定と同じです（以下で説明）。オブジェクトオプションには、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="925c4aa1d0ad97e0afc5d3f1b41b3689f8b6569a" translate="yes" xml:space="preserve">
          <source>This rule takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then blocks must always have at least one preceding space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then all blocks should never have any preceding space. If different spacing is desired for function blocks, keyword blocks and classes, an optional configuration object can be passed as the rule argument to configure the cases separately. If any value in the configuration object is &lt;code&gt;&quot;off&quot;&lt;/code&gt;, then neither style will be enforced for blocks of that kind.</source>
          <target state="translated">このルールは1つの引数を取ります。それがある場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; そして、ブロックは常に少なくとも一つの前のスペースを持っている必要があります。 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、すべてのブロックに先行スペースがあってはなりません。ファンクションブロック、キーワードブロック、クラスに異なる間隔が必要な場合は、オプションの設定オブジェクトをルール引数として渡して、ケースを個別に設定できます。構成オブジェクトのいずれかの値が &lt;code&gt;&quot;off&quot;&lt;/code&gt; の場合、その種類のブロックにはどちらのスタイルも適用されません。</target>
        </trans-unit>
        <trans-unit id="0963778e2c1dedb94b331c8f2a270bc4d32e65ac" translate="yes" xml:space="preserve">
          <source>This rule takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the keywords must be followed by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no spaces following. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは1つの引数を取ります。それがある場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; 、その後のキーワードは、少なくとも1つのスペースが続かなければなりません。 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、その後にスペースを入れないでください。デフォルトは &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="68e6e197c434d48e169b6986c95cbf5d52592e92" translate="yes" xml:space="preserve">
          <source>This rule takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt;, which is the default option, all named functions and anonymous functions must have space before function parentheses. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then all named functions and anonymous functions must not have space before function parentheses. If you want different spacing for named and anonymous functions you can pass a configuration object as the rule argument to configure those separately (e. g. &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;}&lt;/code&gt;).</source>
          <target state="translated">このルールは1つの引数を取ります。それがある場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; デフォルトのオプションである、すべての名前付き関数と匿名関数は、関数の括弧の前にスペースを持っている必要があります。場合は &lt;code&gt;&quot;never&quot;&lt;/code&gt; その後、すべての名前付き関数と匿名関数は、関数の括弧の前にスペースがあってはなりません。名前付き関数と匿名関数の間隔を変えたい場合は、ルール引数として構成オブジェクトを渡して、それらを個別に構成できます（例： &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3b267efe65f4c6431cd77e4ab353be6801239914" translate="yes" xml:space="preserve">
          <source>This rule takes one argument: &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. If &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the keywords must be preceded by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then no spaces will be allowed before the keywords &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; (do...while), &lt;code&gt;finally&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. The default value is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;&quot;always&quot;&lt;/code&gt; または &lt;code&gt;&quot;never&quot;&lt;/code&gt; の 1つの引数を取ります。場合は &lt;code&gt;&quot;always&quot;&lt;/code&gt; 、その後のキーワードは、少なくとも一つのスペースが先行されなければなりません。場合は &lt;code&gt;&quot;never&quot;&lt;/code&gt; 、その後何のスペースは、キーワードの前に許可されません &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; （やる...しばらく）、 &lt;code&gt;finally&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; 。デフォルト値は &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="921f45928af93ba562b5555f1761103f8b63f93f" translate="yes" xml:space="preserve">
          <source>This rule takes one option, an object, with a boolean property &lt;code&gt;&quot;props&quot;&lt;/code&gt;, and arrays &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; and &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt;. &lt;code&gt;&quot;props&quot;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; by default. If &lt;code&gt;&quot;props&quot;&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, this rule warns against the modification of parameter properties unless they're included in &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; or &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt;, which is an empty array by default.</source>
          <target state="translated">このルールは、ブールプロパティ &lt;code&gt;&quot;props&quot;&lt;/code&gt; と配列 &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; および &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt; を持つオブジェクトという1つのオプションを取ります。 &lt;code&gt;&quot;props&quot;&lt;/code&gt; はデフォルトでは &lt;code&gt;false&lt;/code&gt; です。場合は &lt;code&gt;&quot;props&quot;&lt;/code&gt; に設定されている &lt;code&gt;true&lt;/code&gt; 彼らはに含まれている場合を除き、この規則は、パラメータ・プロパティの変更に対して警告し &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; または &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt; デフォルトでは空の配列です。</target>
        </trans-unit>
        <trans-unit id="1989e383b52a7c0690147a9f6a24292bd5b350e0" translate="yes" xml:space="preserve">
          <source>This rule takes one option, an object, with properties &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt;, &lt;code&gt;&quot;hoist&quot;&lt;/code&gt; and &lt;code&gt;&quot;allow&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;hoist&quot;&lt;/code&gt; hoist&quot;、および &lt;code&gt;&quot;allow&quot;&lt;/code&gt; のプロパティを持つオブジェクトという1つのオプションを取ります。</target>
        </trans-unit>
        <trans-unit id="55cdaee2a0575694fdbef7580c26fdd32501b02c" translate="yes" xml:space="preserve">
          <source>This rule takes one option.</source>
          <target state="translated">このルールは1つの選択肢を取ります。</target>
        </trans-unit>
        <trans-unit id="d772fa94c11bdcbaaf11da3960b9dad0c56b7287" translate="yes" xml:space="preserve">
          <source>This rule takes one option: a string with the value of &lt;code&gt;&quot;never&quot;&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt;. The default value is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;&quot;never&quot;&lt;/code&gt; または &lt;code&gt;&quot;always&quot;&lt;/code&gt; 値を持つ文字列という1つのオプションを取ります。デフォルト値は &lt;code&gt;&quot;never&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b91a4819236a2c8058289db3743ecb12444e779b" translate="yes" xml:space="preserve">
          <source>This rule takes one optional argument, an object with a boolean property &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt;. It defaults to &lt;code&gt;true&lt;/code&gt;. If set to &lt;code&gt;true&lt;/code&gt;, this rule also checks redeclaration of built-in globals, such as &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;...</source>
          <target state="translated">このルールは、1つのオプションの引数、ブールプロパティ &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; を持つオブジェクトを取ります。デフォルトは &lt;code&gt;true&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; に設定されている場合、このルールは &lt;code&gt;Object&lt;/code&gt; 、 &lt;code&gt;Array&lt;/code&gt; 、 &lt;code&gt;Number&lt;/code&gt; ... などの組み込みグローバルの再宣言もチェックします。</target>
        </trans-unit>
        <trans-unit id="b9cbcc761c175da60e181849bac41abcfeb1eb54" translate="yes" xml:space="preserve">
          <source>This rule takes one optional argument, an object with a single key, &lt;code&gt;includeExports&lt;/code&gt; which is a &lt;code&gt;boolean&lt;/code&gt;. It defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このルールは、1つのオプションの引数、単一のキーを持つオブジェクト、 &lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;includeExports&lt;/code&gt; を取ります。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0b153c32b894cc5b1df1b907a860983e5820083f" translate="yes" xml:space="preserve">
          <source>This rule takes one optional object argument:</source>
          <target state="translated">このルールは、オプションのオブジェクト引数を1つ取ります。</target>
        </trans-unit>
        <trans-unit id="30aa84ef31b2b0e9486effe6efc775992ca799f6" translate="yes" xml:space="preserve">
          <source>This rule takes two arguments. If the first is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the &lt;code&gt;//&lt;/code&gt; must be followed by at least once whitespace. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no whitespace following. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">このルールは2つの引数を取ります。最初が &lt;code&gt;&quot;always&quot;&lt;/code&gt; 場合、 &lt;code&gt;//&lt;/code&gt; の後には少なくとも1回空白を続ける必要があります。 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 場合、後続の空白はありません。デフォルトは &lt;code&gt;&quot;always&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="84d96e23bd49ca68e511d1e5e897131b026bcb0a" translate="yes" xml:space="preserve">
          <source>This rule takes two sets of configuration objects. The first object parameter determines what types of destructuring the rule applies to.</source>
          <target state="translated">このルールは、2 つの構成オブジェクトのセットを取ります。最初のオブジェクト・パラメータは、ルールが適用するデストラクチャリングのタイプを決定します。</target>
        </trans-unit>
        <trans-unit id="ae727accc6952dffe9642e70d5d9f54ce013860e" translate="yes" xml:space="preserve">
          <source>This rule warns async functions which have no &lt;code&gt;await&lt;/code&gt; expression.</source>
          <target state="translated">このルールは、 &lt;code&gt;await&lt;/code&gt; 式がない非同期関数に警告します。</target>
        </trans-unit>
        <trans-unit id="74dd1649a62b8563503acf05aa42a909078345bb" translate="yes" xml:space="preserve">
          <source>This rule warns if setters are defined without getters. Using an option &lt;code&gt;getWithoutSet&lt;/code&gt;, it will warn if you have a getter without a setter also.</source>
          <target state="translated">このルールは、セッターがゲッターなしで定義されている場合に警告します。オプション &lt;code&gt;getWithoutSet&lt;/code&gt; を使用すると、セッターなしのゲッターがある場合にも警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="1569e1ee08e710a201d5fae646056142b968ec87" translate="yes" xml:space="preserve">
          <source>This rule warns the assignments, increments, and decrements of imported bindings.</source>
          <target state="translated">このルールは、インポートされたバインディングの代入、増分、減分を警告します。</target>
        </trans-unit>
        <trans-unit id="b525b7aa7a74d04de20905491b2a8c8941e9d6ab" translate="yes" xml:space="preserve">
          <source>This rule was &lt;a href=&quot;https://eslint.org/blog/2018/11/jsdoc-end-of-life&quot;&gt;&lt;strong&gt;deprecated&lt;/strong&gt;&lt;/a&gt; in ESLint v5.10.0.</source>
          <target state="translated">このルールはESLint v5.10.0で&lt;a href=&quot;https://eslint.org/blog/2018/11/jsdoc-end-of-life&quot;&gt;&lt;strong&gt;廃止さ&lt;/strong&gt;&lt;/a&gt;れました。</target>
        </trans-unit>
        <trans-unit id="97dcd4f368c345500c003b3e841d0a8400962324" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.3.0 and replaced by the &lt;a href=&quot;func-call-spacing&quot;&gt;func-call-spacing&lt;/a&gt; rule.</source>
          <target state="translated">この規則は、された&lt;strong&gt;非推奨&lt;/strong&gt; ESLintのV3.3.0にと置き換えられ&lt;a href=&quot;func-call-spacing&quot;&gt;FUNC-コール間隔&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="8ff1d82e180ba1773cb4a72ab00704f0010e710d" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.3.0 and replaced by the &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; rule.</source>
          <target state="translated">この規則は、された&lt;strong&gt;非推奨&lt;/strong&gt; ESLintのV3.3.0にと置き換えられ&lt;a href=&quot;no-global-assign&quot;&gt;ていないグローバルアサイン&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="1fb4dbae98047dd2a77e76468bbbd39dfc1c4441" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.3.0 and replaced by the &lt;a href=&quot;no-unsafe-negation&quot;&gt;no-unsafe-negation&lt;/a&gt; rule.</source>
          <target state="translated">この規則は、された&lt;strong&gt;非推奨&lt;/strong&gt; ESLintのV3.3.0にと置き換えられ&lt;a href=&quot;no-unsafe-negation&quot;&gt;ていない危険な-否定&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="6ba68fa34738bb389e81154d113b01d469e1d65a" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.9.0 and will not be replaced. The original intent of this rule now seems misguided as we have come to understand that &lt;code&gt;Reflect&lt;/code&gt; methods are not actually intended to replace the &lt;code&gt;Object&lt;/code&gt; counterparts the rule suggests, but rather exist as low-level primitives to be used with proxies in order to replicate the default behavior of various previously existing functionality.</source>
          <target state="translated">このルールはESLint v3.9.0で&lt;strong&gt;廃止され&lt;/strong&gt;、置き換えられません。このルールの元の意図は、 &lt;code&gt;Reflect&lt;/code&gt; メソッドが実際にルールが提案する &lt;code&gt;Object&lt;/code&gt; 対応物を置き換えることを意図しておらず、デフォルトを複製するためにプロキシで使用される低レベルのプリミティブとして存在することを理解するようになったため、現在は見当違いであるようです以前から存在していたさまざまな機能の動作。</target>
        </trans-unit>
        <trans-unit id="ce83f16eb6dd78df693370a9b8ab5161bcba25c0" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v4.0.0 and replaced by the &lt;a href=&quot;padding-line-between-statements&quot;&gt;padding-line-between-statements&lt;/a&gt; rule.</source>
          <target state="translated">この規則は、された&lt;strong&gt;非推奨&lt;/strong&gt; ESLintのv4.0.0にと置き換えられ&lt;a href=&quot;padding-line-between-statements&quot;&gt;パディング・ラインとの間に-ステートメント&lt;/a&gt;ルール。</target>
        </trans-unit>
        <trans-unit id="595a0b53c9e454f2413cf7e2261c656c0f5d6fdb" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v5.1.0.</source>
          <target state="translated">このルールはESLint v5.1.0で&lt;strong&gt;廃止さ&lt;/strong&gt;れました。</target>
        </trans-unit>
        <trans-unit id="5181dc7122d7d894602629de38f3da4418e3353f" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v7.0.0. Please use the corresponding rule in &lt;a href=&quot;https://github.com/mysticatea/eslint-plugin-node&quot;&gt;&lt;code&gt;eslint-plugin-node&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このルールはESLintv7.0.0で&lt;strong&gt;非推奨&lt;/strong&gt;になりました。&lt;a href=&quot;https://github.com/mysticatea/eslint-plugin-node&quot;&gt; &lt;code&gt;eslint-plugin-node&lt;/code&gt; &lt;/a&gt;の対応するルールを使用してください。</target>
        </trans-unit>
        <trans-unit id="ac5a312f0cda349b78539a394ba1c7fd59148665" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v0.10.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;space-unary-ops&quot;&gt;space-unary-ops&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v0.10.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;space-unary-ops&quot;&gt;space-unary-ops&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="7acd7fc95d09451c1a526d7f453870f07f1aac69" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;comma-dangle&quot;&gt;comma-dangle&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;comma-dangle&quot;&gt;コンマダングル&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="9fea70d644ca508ec2677a3f96f76959ba74e28c" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;generator-star-spacing&quot;&gt;generator-star-spacing&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;generator-star-spacing&quot;&gt;generator-star-spacing&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="454a8fed474e9b1a63295584bcba33699571409b" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;no-empty-character-class&quot;&gt;no-empty-character-class&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除され&lt;/strong&gt;、空文字&lt;a href=&quot;no-empty-character-class&quot;&gt;クラスなし&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="3a4df1f13d548677fdf37e3b26d0ecaaf861ecd9" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule. The &lt;code&gt;&quot;functions&quot;&lt;/code&gt; option in the new rule is equivalent to the removed rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。新しいルールの &lt;code&gt;&quot;functions&quot;&lt;/code&gt; オプションは、削除されたルールと同等です。</target>
        </trans-unit>
        <trans-unit id="a5b108031efa91ff62ed16986898b592f2099523" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;object-curly-spacing&quot;&gt;object-curly-spacing&lt;/a&gt; and &lt;a href=&quot;array-bracket-spacing&quot;&gt;array-bracket-spacing&lt;/a&gt; rules.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;object-curly-spacing&quot;&gt;object-curly-spacing&lt;/a&gt;および&lt;a href=&quot;array-bracket-spacing&quot;&gt;array-bracket-spacing&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="15310b4262bdc098c85186e1c940ab4bc35713bd" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;quote-props&quot;&gt;quote-props&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;quote-props&quot;&gt;quote-props&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="806e99ea6529d453ff4fea7b67ef7d9411e7fc0b" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;semi-spacing&quot;&gt;semi-spacing&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;semi-spacing&quot;&gt;セミスペース&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="1433b9d464125b94ed46f2687a9a766095f2913f" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="bfdf120e55f7a281a7a557f08326c688dd338dfd" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt; rule. The name of the rule changed from &quot;parentheses&quot; to &quot;paren&quot; for consistency with the names of other rules.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。ルールの名前は、他のルールの名前との一貫性を保つために、「括弧」から「括弧」に変更されました。</target>
        </trans-unit>
        <trans-unit id="86775760ef9fb1f3cfe8506df115fa50fad7b3da" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;spaced-comment&quot;&gt;spaced-comment&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;spaced-comment&quot;&gt;スペースコメント&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="4d22e86fae8a14e5447a82e7f0330e058279ab58" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt; rule. The &lt;code&gt;&quot;global&quot;&lt;/code&gt; option in the new rule is most similar to the removed rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;strict&quot;&gt;厳密な&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。新しいルールの &lt;code&gt;&quot;global&quot;&lt;/code&gt; オプションは、削除されたルールに最も似ています。</target>
        </trans-unit>
        <trans-unit id="9100ed1e2a807ef9327b2f5d35415892fa86cb22" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt; rule. The &lt;code&gt;&quot;global&quot;&lt;/code&gt; or &lt;code&gt;&quot;function&quot;&lt;/code&gt; options in the new rule are similar to the removed rule.</source>
          <target state="translated">このルールはESLint v1.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;strict&quot;&gt;厳密な&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。新しいルールの &lt;code&gt;&quot;global&quot;&lt;/code&gt; または &lt;code&gt;&quot;function&quot;&lt;/code&gt; オプションは、削除されたルールに似ています。</target>
        </trans-unit>
        <trans-unit id="9f89e766710bf630ced43da3e69bce3992f2c41b" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and &lt;strong&gt;replaced&lt;/strong&gt; by a combination of the &lt;a href=&quot;no-confusing-arrow&quot;&gt;no-confusing-arrow&lt;/a&gt; and &lt;a href=&quot;no-constant-condition&quot;&gt;no-constant-condition&lt;/a&gt; rules.</source>
          <target state="translated">このルールはESLint v2.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;no-confusing-arrow&quot;&gt;no-confusing-arrow&lt;/a&gt;ルールと&lt;a href=&quot;no-constant-condition&quot;&gt;no-constant-condition&lt;/a&gt;ルールの組み合わせに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="cda6801a02eb11d54e527ccd127c09f626d0664d" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;keyword-spacing&quot;&gt;keyword-spacing&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v2.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;keyword-spacing&quot;&gt;キーワード間隔&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="b6bce407af2413b5937a155c9cf8c389ed6b52d2" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;no-labels&quot;&gt;no-labels&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v2.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;no-labels&quot;&gt;no-labels&lt;/a&gt;ルールに&lt;strong&gt;置き換えられ&lt;/strong&gt;ました。</target>
        </trans-unit>
        <trans-unit id="c97ed5e1976f6e59cbc5958266519e944e1e11e9" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and replaced by the &lt;a href=&quot;keyword-spacing&quot;&gt;keyword-spacing&lt;/a&gt; rule.</source>
          <target state="translated">このルールはESLint v2.0で&lt;strong&gt;削除さ&lt;/strong&gt;れ、&lt;a href=&quot;keyword-spacing&quot;&gt;キーワード間隔&lt;/a&gt;ルールに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7acf56d92530caa8171a9b77894e82f22211e06d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.2.</source>
          <target state="translated">このルールはESLint 0.0.2で導入されました。</target>
        </trans-unit>
        <trans-unit id="d56f12d0cea2af7dab30391b1c91a8c5e8611ab7" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.3-0.</source>
          <target state="translated">このルールはESLint 0.0.3-0で導入されました。</target>
        </trans-unit>
        <trans-unit id="9f77090708a85102cf4f6ae95b7446a35a7e8831" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.5.</source>
          <target state="translated">このルールはESLint 0.0.5で導入されました。</target>
        </trans-unit>
        <trans-unit id="f63ca588b6adc8183fd416864c5b42f2c04e1cbe" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.6.</source>
          <target state="translated">このルールはESLint 0.0.6で導入されました。</target>
        </trans-unit>
        <trans-unit id="ee648d4cb2a57db16db2921c9d0df6db93140ef1" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.7.</source>
          <target state="translated">このルールはESLint 0.0.7で導入されました。</target>
        </trans-unit>
        <trans-unit id="7be8f0d556f11e7552c5d03d635e15e1e2586501" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.9 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.0.9で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="991259711e9ffad37f494b317dc6ae1354d1cdec" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.9 and removed in 2.0.0-rc.0.</source>
          <target state="translated">このルールはESLint 0.0.9で導入され、2.0.0-rc.0で削除されました。</target>
        </trans-unit>
        <trans-unit id="3826e79f1a573577ff21706cad07239818dc97a8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.9.</source>
          <target state="translated">このルールはESLint 0.0.9で導入されました。</target>
        </trans-unit>
        <trans-unit id="104ee87c3025112a05265a39971ed20f008801f6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.0.</source>
          <target state="translated">このルールはESLint 0.1.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="6841448b528ccb28441ee5853c18598a8bae3314" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.2.</source>
          <target state="translated">このルールはESLint 0.1.2で導入されました。</target>
        </trans-unit>
        <trans-unit id="cc3311c1a58d2304884d53ec00bc0893123240e0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.4 and removed in 0.10.0.</source>
          <target state="translated">このルールはESLint 0.1.4で導入され、0.10.0で削除されました。</target>
        </trans-unit>
        <trans-unit id="9cd085f82a271e1296933b1d84ab883da8dc5fdc" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.4 and removed in 2.0.0-beta.3.</source>
          <target state="translated">このルールはESLint 0.1.4で導入され、2.0.0-beta.3で削除されました。</target>
        </trans-unit>
        <trans-unit id="35169537b6d06f161ebb07cee67997ec7015db46" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.4.</source>
          <target state="translated">このルールはESLint 0.1.4で導入されました。</target>
        </trans-unit>
        <trans-unit id="f5f9cd2f36d4e67d1494162223864c9bde274c44" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.10.0.</source>
          <target state="translated">このルールはESLint 0.10.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="6e464e7cf6aff81ac969bfa7300628a1595dbcbc" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.11.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.11.0で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="f5e4e0c1277e58cff65243fba140eefd9e2dd691" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.12.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.12.0で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="8e1016eb2eb9e5e64bc0b0dd57ca31abaa8b284d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.12.0.</source>
          <target state="translated">このルールはESLint 0.12.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="ec82419ed7cd6cb2cf32d689705adcf1ef19580d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.14.0.</source>
          <target state="translated">このルールはESLint 0.14.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="b4c7ed1964bbb84cf265249574359050ead50197" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.15.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.15.0で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="022a60c1b9ae595ba84589e32239b3cc1abe85c0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.15.0.</source>
          <target state="translated">このルールはESLint 0.15.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="44b7c4a1ff6984989e180005d65c9ff021838b2b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.16.0.</source>
          <target state="translated">このルールはESLint 0.16.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="99811d057622f118ff8e5e3027a5aa79e7b5a1f8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.17.0.</source>
          <target state="translated">このルールはESLint 0.17.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="a24ab8acce4089e462954a9a8d11f04ed7e83d14" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.18.0.</source>
          <target state="translated">このルールはESLint 0.18.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="22a4e79e1a7c4b86ae960caf61411eedb0cd54fe" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.19.0.</source>
          <target state="translated">このルールはESLint 0.19.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="3d144e044cff9cede85dd4fb4692a332f5a8c611" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.2.0.</source>
          <target state="translated">このルールはESLint 0.2.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d1d0165d60b8c8a9fcebfd14fbf09279a7f3f639" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.20.0.</source>
          <target state="translated">このルールはESLint 0.20.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="a2f350314ced59a62892af55c83b424897809d53" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.21.0.</source>
          <target state="translated">このルールはESLint 0.21.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="ab2dc7a9090814ada544a547dc63e19480771694" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.22.0.</source>
          <target state="translated">このルールはESLint 0.22.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="5e9ad892054ec8fd2a9b5a3d99565c92ebc8faa8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.23.0.</source>
          <target state="translated">このルールはESLint 0.23.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="a15cf25a65f1772b83540ce070583db9f0bea046" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.24.0.</source>
          <target state="translated">このルールはESLint 0.24.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="4eb90bb8e8d0e4862e4c3c2110f52eabd22c5d95" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.3.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.3.0で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="d534051e14d0ae5f4e8d170369285c7a7a833d72" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.0.</source>
          <target state="translated">このルールはESLint 0.4.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="319d2d39aa4de595f2f2c47bce15edc744470e07" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.1 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.4.1で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="690f00bbc758ba76165c1909c568ddef3d528500" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.1.</source>
          <target state="translated">このルールはESLint 0.4.1で導入されました。</target>
        </trans-unit>
        <trans-unit id="695fb83fb1f76ea78bd579fd8234746aef2c134b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.3 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.4.3で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="2104f264de79647569d42ba63afe56f30aaf6f4a" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.4.</source>
          <target state="translated">このルールはESLint 0.4.4で導入されました。</target>
        </trans-unit>
        <trans-unit id="1e6ec86f8fa1f44a023019cea42bc0bc4e88bfe9" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.5.</source>
          <target state="translated">このルールはESLint 0.4.5で導入されました。</target>
        </trans-unit>
        <trans-unit id="8f8be4f8a8eac1609244f86feda1f955f3651f40" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.5.0.</source>
          <target state="translated">このルールはESLint 0.5.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="b5bd41becec94711e7ccb19f43f55a58cb3e3dfa" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.5.1.</source>
          <target state="translated">このルールはESLint 0.5.1で導入されました。</target>
        </trans-unit>
        <trans-unit id="6054666decb9a65e302b946e91edb674546d155d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.6.0 and removed in 2.0.0-beta.3.</source>
          <target state="translated">このルールはESLint 0.6.0で導入され、2.0.0-beta.3で削除されました。</target>
        </trans-unit>
        <trans-unit id="fca55944c7f00c80eb956197f3f3aa9e06639fe8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.6.0.</source>
          <target state="translated">このルールはESLint 0.6.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="612fad62eb56b4b3e86c60586d0f3c1dd4590c31" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.7.1.</source>
          <target state="translated">このルールはESLint 0.7.1で導入されました。</target>
        </trans-unit>
        <trans-unit id="7f6b3af67baac6593755ed43d947a149ef34dbd3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.8.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.8.0で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="9205461b44607eff74d1a2a6b6df2c77e39d4ef6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.8.0 and removed in 1.0.0.</source>
          <target state="translated">このルールはESLint 0.8.0で導入され、1.0.0で削除されました。</target>
        </trans-unit>
        <trans-unit id="2e0b51fe679fd742117998eff735fd41d10c73b5" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.8.0.</source>
          <target state="translated">このルールはESLint 0.8.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="24474dd83f68e5a7f601af202c31fa078bd00972" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.9.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 0.9.0で導入され、1.0.0-rc-1で削除されました。</target>
        </trans-unit>
        <trans-unit id="3f7b8b50cfbe149b58d16cd8e4f33ca11306175f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.9.0.</source>
          <target state="translated">このルールはESLint 0.9.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="253a90a08f1d4c26446ac375c0c3081ea7dfdee7" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.0.0-rc-1.</source>
          <target state="translated">このルールはESLint 1.0.0-rc-1で導入されました。</target>
        </trans-unit>
        <trans-unit id="0fae837ec3710a78127e4c46d18775e05d83bfab" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.0.0-rc-2.</source>
          <target state="translated">このルールはESLint 1.0.0-rc-2で導入されました。</target>
        </trans-unit>
        <trans-unit id="e6d687a3ec8e9e5e2c006bebf2c6d39a9b9e193f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.0.0.</source>
          <target state="translated">このルールはESLint 1.0.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="fdd4dd0af0c7ac98b3bc3458e813f63eda54538b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.2.0.</source>
          <target state="translated">このルールはESLint 1.2.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="6f9dca1480d72ed30fc7619ba2113159d7cd78bd" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.3.0.</source>
          <target state="translated">このルールはESLint 1.3.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="cd566e50179c8aa41da415f9330a418b9f8fffa3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.4.0 and removed in 2.0.0-beta.3.</source>
          <target state="translated">このルールはESLint 1.4.0で導入され、2.0.0-beta.3で削除されました。</target>
        </trans-unit>
        <trans-unit id="8a4e16aa119e73b5bbc5848edd61c1a62e29fd1a" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.4.0.</source>
          <target state="translated">このルールはESLint 1.4.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="76a5946c97a32256435372bd726587b5ede25a95" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.6.0.</source>
          <target state="translated">このルールはESLint 1.6.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="7464555ca2178196c3754e81bf1f843e65019ee6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.7.0.</source>
          <target state="translated">このルールはESLint 1.7.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="06c23ddc2b85915de8efc2547e0828ccb7698482" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.8.0 and removed in 2.0.0-beta.3.</source>
          <target state="translated">このルールはESLint 1.8.0で導入され、2.0.0-beta.3で削除されました。</target>
        </trans-unit>
        <trans-unit id="ecb498aeb472146953cb795acce90ce8cfbe658b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.8.0.</source>
          <target state="translated">このルールはESLint 1.8.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d71bdb52847cd69a78bae99762742e55d3654047" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.9.0.</source>
          <target state="translated">このルールはESLint 1.9.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="0846ea821f6cedd21e94c7e12adca7ddb223fafa" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-alpha-1.</source>
          <target state="translated">このルールはESLint 2.0.0-alpha-1で導入されました。</target>
        </trans-unit>
        <trans-unit id="c712a022971ad200dbe8c004c2be62c0b4e0b00f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-alpha-2.</source>
          <target state="translated">このルールはESLint 2.0.0-alpha-2で導入されました。</target>
        </trans-unit>
        <trans-unit id="564f72fdde7e54d0c7b589c84bb0dd7853800b72" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-beta.1.</source>
          <target state="translated">このルールはESLint 2.0.0-beta.1で導入されました。</target>
        </trans-unit>
        <trans-unit id="94d6b360cd9ef42b0e62eaf087979490427823aa" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-beta.2.</source>
          <target state="translated">このルールはESLint 2.0.0-beta.2で導入されました。</target>
        </trans-unit>
        <trans-unit id="9649c1088345801ecd6f589d52de6c1232d6307d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-beta.3.</source>
          <target state="translated">このルールはESLint 2.0.0-beta.3で導入されました。</target>
        </trans-unit>
        <trans-unit id="5d680d77d0beed833592689309422ca3ce2d7e21" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-rc.0.</source>
          <target state="translated">このルールはESLint 2.0.0-rc.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="66dbbf4920030e8d0cefe80a34b176ce05b61df0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0.</source>
          <target state="translated">このルールはESLint 2.0.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="b71385ef3c3e927c991a219f64384c985c1fcf90" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.10.0.</source>
          <target state="translated">このルールはESLint 2.10.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="da405f0ddea9153a0ac587fe4e9d8164d01b0c16" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.11.0.</source>
          <target state="translated">このルールはESLint 2.11.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="60862391299a40ab31b71b4b297983dc0f6e212b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.12.0.</source>
          <target state="translated">このルールはESLint 2.12.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d03b31c8000a442f60231fc039e08815e8282c25" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.3.0.</source>
          <target state="translated">このルールはESLint 2.3.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="7f16b8950c0bde6bb34ed5b7207fdc0b738fb630" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.5.0.</source>
          <target state="translated">このルールはESLint 2.5.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="3f8a58c3d4da99f78398d3b64a91632e74df4c87" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.9.0.</source>
          <target state="translated">このルールはESLint 2.9.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="a434d13be726419640646ee9cfdb8bd1785581c4" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.1.0.</source>
          <target state="translated">このルールはESLint 3.1.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="858b084f5692784698710e54970501ccf2defec3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.10.0.</source>
          <target state="translated">このルールはESLint 3.10.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="36cd7ddeb04a21f5897e3d4b76cce15e87b7993f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.11.0.</source>
          <target state="translated">このルールはESLint 3.11.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="661306b0ad7d6ddb13c6aa40cfdba38f3593d8f0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.12.0.</source>
          <target state="translated">このルールはESLint 3.12.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d6cb22ee8de2bdb3f0e4c59288bcbc8a30e84670" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.13.0.</source>
          <target state="translated">このルールはESLint 3.13.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="015933b00ddaf61622019f00b91df5be845849c0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.14.0.</source>
          <target state="translated">このルールはESLint 3.14.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="c7d64c709b1b89ba9e136d3032dd0f5798649309" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.15.0.</source>
          <target state="translated">このルールはESLint 3.15.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="27e706065fbfda963ea99d5bd446422094fd7668" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.17.0.</source>
          <target state="translated">このルールはESLint 3.17.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="e09ff4e9278081df15e096fbf4e58b20f023a5ba" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.2.0.</source>
          <target state="translated">このルールはESLint 3.2.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="a85d7cc0623d3501b8bca704f4e41164c09a7508" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.3.0.</source>
          <target state="translated">このルールはESLint 3.3.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="b3fdf6d7d417b00e1c641b827ad2d5a23756333b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.4.0.</source>
          <target state="translated">このルールはESLint 3.4.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="081f1321385ea2db9cfc13a7ef6150816e60cfdf" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.5.0.</source>
          <target state="translated">このルールはESLint 3.5.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="249f7539fd800e4a3448bebbb2a5d06ae7bdfbb1" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.8.0.</source>
          <target state="translated">このルールはESLint 3.8.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="1d3a88f535dd46014212822bfcdb7b92057ec03c" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.9.0.</source>
          <target state="translated">このルールはESLint 3.9.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="bc1167ff56b2f569216be1b53cbdda085c3f5925" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-alpha.0.</source>
          <target state="translated">このルールはESLint 4.0.0-alpha.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="8e66018d7d2a9d9a93f9a651e08a252a3934f02b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-alpha.1.</source>
          <target state="translated">このルールはESLint 4.0.0-alpha.1で導入されました。</target>
        </trans-unit>
        <trans-unit id="2d0c5eb6d6e8a9c24913bcf68ed584d5108017be" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-beta.0.</source>
          <target state="translated">このルールはESLint 4.0.0-beta.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="4075da4b266c0716bb2a3425d000c5bcda9eba92" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-rc.0.</source>
          <target state="translated">このルールはESLint 4.0.0-rc.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="263b2d3768d21d7440422e01223bff30dee0ef66" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.10.0.</source>
          <target state="translated">このルールはESLint 4.10.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="23dfe0c95b1e5f030da59fd3fd60ce2334cd60e3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.12.0.</source>
          <target state="translated">このルールはESLint 4.12.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d18235d7263ad097b73fc8033aad8ae250ea0e30" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.2.0.</source>
          <target state="translated">このルールはESLint 4.2.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="4fcbf3e8c966c03a80f69bd99dc0d87087516dc6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.6.0.</source>
          <target state="translated">このルールはESLint 4.6.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="c29a10377df13f0c37ec8db63b847477502e584e" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.9.0.</source>
          <target state="translated">このルールはESLint 4.9.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="f8550879bfc78f693f7b041484cf06a1cd547e0e" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.0.0-alpha.3.</source>
          <target state="translated">このルールはESLint 5.0.0-alpha.3で導入されました。</target>
        </trans-unit>
        <trans-unit id="418915a53d81a096edd9d904f41083006c174930" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.0.0.</source>
          <target state="translated">このルールはESLint 5.0.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="8778f2ba95f794b36174b055c644cc679c9917a0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.11.0.</source>
          <target state="translated">このルールはESLint 5.11.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="1254815cfd5ae6a3473c9ae4729105dfd35da19f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.15.0.</source>
          <target state="translated">このルールはESLint 5.15.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="30dee8cf16e05b494ff0f1c742f6ab52422c2d28" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.3.0.</source>
          <target state="translated">このルールはESLint 5.3.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="56ed5ba939eaef08ee30a77ef55edc5b4b03b38e" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 6.2.0.</source>
          <target state="translated">このルールはESLint 6.2.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="f164dff149cab207f752d65fc42fa78c1b1bf72c" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 6.4.0.</source>
          <target state="translated">このルールはESLint 6.4.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="6d5ce8145cb2e6d14c5a11d1bd60fe572558217d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 6.7.0.</source>
          <target state="translated">このルールはESLint 6.7.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="c86d188cfefc7bd6c39b01dcfa55e30450e14943" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 7.0.0-alpha.0.</source>
          <target state="translated">このルールはESLint 7.0.0-alpha.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="5ca0f30b64975e1b1c782fab9b22d3a12f0dc017" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 7.1.0.</source>
          <target state="translated">このルールはESLint 7.1.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="df0a5d4e99faf112f820ad6c8f88bae6141d4201" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 7.14.0.</source>
          <target state="translated">このルールはESLint 7.14.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="05492ef0011bfd0908a0fc97667c6bbe2839056d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 7.15.0.</source>
          <target state="translated">このルールはESLint 7.15.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d189cbd0a8452997a98b997ab6f161ad5393f36a" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 7.3.0.</source>
          <target state="translated">このルールはESLint 7.3.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="0272b678588e3464f83ebf3e50c047cd7c4566bf" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 7.4.0.</source>
          <target state="translated">このルールはESLint 7.4.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="505fc61fb68ad7eac9fbf317a8b027ff98db1afe" translate="yes" xml:space="preserve">
          <source>This rule will allow keywords to be preceded by an opening curly brace (&lt;code&gt;{&lt;/code&gt;). If you wish to alter this behavior, consider using the &lt;a href=&quot;block-spacing&quot;&gt;block-spacing&lt;/a&gt; rule.</source>
          <target state="translated">このルールでは、キーワードの前に左中括弧（ &lt;code&gt;{&lt;/code&gt; ）を付けることができます。この動作を変更する場合は、&lt;a href=&quot;block-spacing&quot;&gt;ブロック間隔&lt;/a&gt;ルールの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="20fe84960dba868b1bee83459ec26e8090b503b5" translate="yes" xml:space="preserve">
          <source>This rule will catch blacklisted identifiers that are:</source>
          <target state="translated">このルールは、ブラックリストに登録されている識別子のうち、以下のものを捕捉します。</target>
        </trans-unit>
        <trans-unit id="ace2e020df045c4b4290430e5453d75040eb46e7" translate="yes" xml:space="preserve">
          <source>This rule will catch disallowed identifiers that are:</source>
          <target state="translated">このルールは、許可されていない識別子をキャッチします。</target>
        </trans-unit>
        <trans-unit id="7eb5eed91214ac1aae94e16a4b651e906d0ad590" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing after the keywords &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, and &lt;code&gt;with&lt;/code&gt;.</source>
          <target state="translated">このルールは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;switch&lt;/code&gt; 、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;finally&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; の各キーワードの後のスペースの一貫性を強制します。</target>
        </trans-unit>
        <trans-unit id="dcfcc88f46e54dda18d566394faa28bc296e5fe2" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing after the start of a comment &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;. It also provides several exceptions for various documentation styles.</source>
          <target state="translated">このルールは、コメント &lt;code&gt;//&lt;/code&gt; または &lt;code&gt;/*&lt;/code&gt; の開始後の間隔の一貫性を強制します。また、さまざまなドキュメントスタイルにいくつかの例外があります。</target>
        </trans-unit>
        <trans-unit id="8dfa11618d345f13d6dcd12dcc9d86af2a778106" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing after the start of a line comment &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">このルールは、行コメント &lt;code&gt;//&lt;/code&gt; の開始後の間隔の一貫性を強制します。</target>
        </trans-unit>
        <trans-unit id="f5a3463495b63cee8f00d005edffd52a371dbf7b" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing before blocks. It is only applied on blocks that don&amp;rsquo;t begin on a new line.</source>
          <target state="translated">このルールは、ブロック前の間隔の一貫性を強制します。新しい行で始まらないブロックにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="899e832f0bb86e89cde9cb92bf01264670a49390" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing before the keywords &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; and variable declarations (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;) and label statements.</source>
          <target state="translated">このルールは、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;do&lt;/code&gt; 、 &lt;code&gt;switch&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; 、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;finally&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; 、 &lt;code&gt;break&lt;/code&gt; 、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;yield&lt;/code&gt; 、 &lt;code&gt;class&lt;/code&gt; 、およびvariable宣言（ &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、 &lt;code&gt;var&lt;/code&gt; ）およびlabelステートメント。</target>
        </trans-unit>
        <trans-unit id="7ab2ddd96883c5601a31a0952609e729f28ed8c7" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistent spacing directly inside of parentheses, by disallowing or requiring one or more spaces to the right of &lt;code&gt;(&lt;/code&gt; and to the left of &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">このルールは、括弧の内側に一定の間隔を強制します。これは、右側 &lt;code&gt;(&lt;/code&gt; および左側 &lt;code&gt;)&lt;/code&gt; に 1つ以上のスペースを許可しないか、または必須にすることによって行われます。</target>
        </trans-unit>
        <trans-unit id="64502d44699c8fd75b6ff60a9772a5b144874128" translate="yes" xml:space="preserve">
          <source>This rule will raise a warning when it encounters a function expression wrapped in parentheses with no following invoking parentheses.</source>
          <target state="translated">このルールは、カッコで括られた関数式が、カッコの後に続く呼び出しカッコがない場合に警告を発します。</target>
        </trans-unit>
        <trans-unit id="3643c6350c621113de6e30185b7a4873c306ccc3" translate="yes" xml:space="preserve">
          <source>This rule will warn when it encounters a reference to an identifier that has not yet been declared.</source>
          <target state="translated">このルールは、まだ宣言されていない識別子への参照に遭遇した場合に警告します。</target>
        </trans-unit>
        <trans-unit id="deee32f0052a6211108d2a8cf31e11f7d7368c97" translate="yes" xml:space="preserve">
          <source>This rule would disallow the use of number literals that immediately lose precision at runtime when converted to a JS &lt;code&gt;Number&lt;/code&gt; due to 64-bit floating-point rounding.</source>
          <target state="translated">このルールでは、64ビット浮動小数点の丸めが原因でJS &lt;code&gt;Number&lt;/code&gt; に変換されると、実行時にすぐに精度が失われる数値リテラルの使用が許可されません。</target>
        </trans-unit>
        <trans-unit id="1aac283a5c8db3e909affa821ed372fee55531f6" translate="yes" xml:space="preserve">
          <source>This rule's configuration consists of an object with the following properties:</source>
          <target state="translated">このルールの設定は、以下のプロパティを持つオブジェクトで構成されています。</target>
        </trans-unit>
        <trans-unit id="686680eef8d702bbfccdffade327d244725c31c8" translate="yes" xml:space="preserve">
          <source>This rule, in its default state, does not require any arguments. If you would like to enable one or more of the following you may pass an object with the options set as follows:</source>
          <target state="translated">このルールは、デフォルトの状態では引数を必要としません。以下のうちの1つ以上を有効にしたい場合は、以下のようにオプションを設定したオブジェクトを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f76749baa8bcf932d6af226607a409b5f06928d1" translate="yes" xml:space="preserve">
          <source>This rules requires a description when creating symbols.</source>
          <target state="translated">このルールでは、シンボルを作成する際に記述が必要です。</target>
        </trans-unit>
        <trans-unit id="c0dfaa172d2d0fbecfbe10aea7c7cfdfe5fbe4fb" translate="yes" xml:space="preserve">
          <source>This saves the output into the &lt;code&gt;results.txt&lt;/code&gt; file.</source>
          <target state="translated">これにより、 &lt;code&gt;results.txt&lt;/code&gt; ファイルに保存されます。</target>
        </trans-unit>
        <trans-unit id="3b159541e2337ac35e2095ddbe914c9d67ebbf08" translate="yes" xml:space="preserve">
          <source>This setting is similar to &lt;a href=&quot;command-line-interface#--no-inline-config&quot;&gt;--no-inline-config&lt;/a&gt; CLI option.</source>
          <target state="translated">この設定は、&lt;a href=&quot;command-line-interface#--no-inline-config&quot;&gt;-no-inline-config&lt;/a&gt; CLIオプションに似ています。</target>
        </trans-unit>
        <trans-unit id="70f0b4c78e3353c2cf50cf6616c689f7ee16a770" translate="yes" xml:space="preserve">
          <source>This setting is similar to &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;--report-unused-disable-directives&lt;/a&gt; CLI option, but doesn't fail linting (reports as &lt;code&gt;&quot;warn&quot;&lt;/code&gt; severity).</source>
          <target state="translated">この設定は&lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;--report-unused-disable-directives&lt;/a&gt; CLIオプションに似ていますが、リンティングに失敗しません（ &lt;code&gt;&quot;warn&quot;&lt;/code&gt; 重大度を警告」としてレポートします）。</target>
        </trans-unit>
        <trans-unit id="46894218d56351684b5188fefa742063dbd6acee" translate="yes" xml:space="preserve">
          <source>This setting mimics some of the default behavior from 0.x, but not all. If you don't want to use any of the recommended rules, you can delete this line.</source>
          <target state="translated">この設定は、0.xからのデフォルトの動作の一部を模倣していますが、すべてではありません。推奨されるルールを使用したくない場合は、この行を削除してください。</target>
        </trans-unit>
        <trans-unit id="875fb57cf6d00cd8167af70a6cec4b5baceb791b" translate="yes" xml:space="preserve">
          <source>This should be rewritten like so:</source>
          <target state="translated">このように書き換えるべきです。</target>
        </trans-unit>
        <trans-unit id="22d329895d12968d8e388d4a016d9447d24df47a" translate="yes" xml:space="preserve">
          <source>This syntax is very powerful, and can be used to precisely select many syntactic patterns in your code.</source>
          <target state="translated">この構文は非常に強力で、コード内の多くの構文パターンを正確に選択するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="c6fa14f74ba5c7c56fcdcd75a3d2c3a227de8b5a" translate="yes" xml:space="preserve">
          <source>This throws a &lt;code&gt;TypeError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;TypeError&lt;/code&gt; 例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7bf06011358f7568e5271850e42bc163cc698e3e" translate="yes" xml:space="preserve">
          <source>This typically reads, &quot;if the color equals red&quot;, which is arguably a more natural way to describe the comparison.</source>
          <target state="translated">これは通常、「色が赤に等しい場合」と読みますが、これは間違いなく、比較を説明するためのより自然な方法です。</target>
        </trans-unit>
        <trans-unit id="f9a598ad54e5a40cedb347d08b1cc89bf10028a9" translate="yes" xml:space="preserve">
          <source>This was a roundabout way to find the variable because it was added after the fact by ESLint. The &lt;code&gt;window&lt;/code&gt; variable was in &lt;code&gt;Scope#through&lt;/code&gt; because the definition couldn't be found.</source>
          <target state="translated">これは、ESLintによって事実の後に追加されたため、変数を見つけるための回り道でした。 &lt;code&gt;window&lt;/code&gt; 変数はにあった &lt;code&gt;Scope#through&lt;/code&gt; 定義が見つかりませんでしたので。</target>
        </trans-unit>
        <trans-unit id="b95c2d2d9ce069899ffb2f9324062dd0c340f08c" translate="yes" xml:space="preserve">
          <source>This was confusing to rule developers as it seemed that rules shouldn't be in charge of validating their own severity. In 2.0.0, rules no longer need to check their own severity.</source>
          <target state="translated">これはルール開発者を混乱させるものでした。2.0.0.0では、ルールは自分の深刻度をチェックする必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="6a0a2571f7edd8fae2645c0661fe251dab9d8a80" translate="yes" xml:space="preserve">
          <source>This will affect you if you are extending from &lt;code&gt;eslint:recommended&lt;/code&gt;, and are enabling &lt;a href=&quot;../rules/no-multiple-empty-lines&quot;&gt;&lt;code&gt;no-multiple-empty-lines&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../rules/func-style&quot;&gt;&lt;code&gt;func-style&lt;/code&gt;&lt;/a&gt; with only a severity, such as:</source>
          <target state="translated">これは、 &lt;code&gt;eslint:recommended&lt;/code&gt; から拡張していて、&lt;a href=&quot;../rules/no-multiple-empty-lines&quot;&gt; &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../rules/func-style&quot;&gt; &lt;code&gt;func-style&lt;/code&gt; を&lt;/a&gt;有効にしている場合に影響します。、次のように重大度のみを指定してを。</target>
        </trans-unit>
        <trans-unit id="ebd11a6343dc87d82fcd72aea0d593b42d7170c0" translate="yes" xml:space="preserve">
          <source>This will not change anything in most cases. If a configuration file in a subdirectory has &lt;code&gt;plugins&lt;/code&gt; defined, the plugins will be loaded from the subdirectory (or ancestor directories that include the current working directory if not found).</source>
          <target state="translated">ほとんどの場合、これによって何も変更されません。サブディレクトリ内の構成ファイルに &lt;code&gt;plugins&lt;/code&gt; 定義されている場合、プラグインはサブディレクトリ（または、見つからない場合は現在の作業ディレクトリを含む祖先ディレクトリ）からロードされます。</target>
        </trans-unit>
        <trans-unit id="7922d7623662d9c671198216874744cb22441012" translate="yes" xml:space="preserve">
          <source>This will open up your editor so you can make changes. After that, you'll need to do a forced push to your branch:</source>
          <target state="translated">これでエディタが開き、変更が可能になります。その後、あなたのブランチに強制的にプッシュする必要があります。</target>
        </trans-unit>
        <trans-unit id="1e28b901c4ec23e324d1147022a9ffd9c884507c" translate="yes" xml:space="preserve">
          <source>Those can be replaced with the following code:</source>
          <target state="translated">これらは以下のコードで置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="b8fc349a6394c8ce4c8dac8225a5cc00409443c4" translate="yes" xml:space="preserve">
          <source>Those members are defined but not used in ESLint.</source>
          <target state="translated">これらのメンバーはESLintでは定義されていますが、使用されていません。</target>
        </trans-unit>
        <trans-unit id="208bdfdfa90cddc8a730aad0e918ccd51152a8d2" translate="yes" xml:space="preserve">
          <source>Three new rules have been enabled in the &lt;code&gt;eslint:recommended&lt;/code&gt; preset.</source>
          <target state="translated">&lt;code&gt;eslint:recommended&lt;/code&gt; プリセットで3つの新しいルールが有効になりました。</target>
        </trans-unit>
        <trans-unit id="79219f954c37e740f44b8eeedc1672e971acb7f4" translate="yes" xml:space="preserve">
          <source>Thus, the rule (without the object option) prohibits both of these:</source>
          <target state="translated">したがって、ルール(オブジェクトオプションなし)では、これらの両方を禁止しています。</target>
        </trans-unit>
        <trans-unit id="92dfc8d078c02dadc9f36bf0c250a63d56acd93a" translate="yes" xml:space="preserve">
          <source>Tips for &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">のヒント &lt;code&gt;package.json&lt;/code&gt; の：</target>
        </trans-unit>
        <trans-unit id="12248fedc6e3a517137e5a922a0d0e1269b1fca7" translate="yes" xml:space="preserve">
          <source>To add the upstream source for ESLint, run the following in your repository:</source>
          <target state="translated">ESLintのアップストリームソースを追加するには、リポジトリで以下を実行します。</target>
        </trans-unit>
        <trans-unit id="ab36771ca63c56e5d4a1ce88f90d00d60aeb3342" translate="yes" xml:space="preserve">
          <source>To allow for the colocation of comments that provide context with the directive, ESLint v7.0.0 adds the ability to append arbitrary text in directive comments by ignoring text following &lt;code&gt;--&lt;/code&gt; surrounded by whitespace. For example:</source>
          <target state="translated">ディレクティブでコンテキストを提供するコメントのコロケーションを可能にするために、ESLint v7.0.0は、空白で囲まれた &lt;code&gt;--&lt;/code&gt; 続くテキストを無視することにより、ディレクティブコメントに任意のテキストを追加する機能を追加します。例えば：</target>
        </trans-unit>
        <trans-unit id="e12adbc2086a36a101b25ac6980400eced9fc9c9" translate="yes" xml:space="preserve">
          <source>To avoid conflicts between rules, this rule does not report non-error values used in &lt;code&gt;throw&lt;/code&gt; statements in async functions, even though these lead to Promise rejections. To lint for these cases, use the &lt;a href=&quot;no-throw-literal&quot;&gt;&lt;code&gt;no-throw-literal&lt;/code&gt;&lt;/a&gt; rule.</source>
          <target state="translated">ルール間の競合を回避するために、このルールは非同期関数の &lt;code&gt;throw&lt;/code&gt; ステートメントで使用されるエラー以外の値を報告しませんが、これらはPromiseの拒否につながります。これらのケースを糸くずさせるには、&lt;a href=&quot;no-throw-literal&quot;&gt; &lt;code&gt;no-throw-literal&lt;/code&gt; &lt;/a&gt;ルールを使用します。</target>
        </trans-unit>
        <trans-unit id="538f66a6468f3d6c647b9926379987f5a2085e2e" translate="yes" xml:space="preserve">
          <source>To avoid contradictions with other rules that require multiple spaces, this rule has an &lt;code&gt;exceptions&lt;/code&gt; option to ignore certain nodes.</source>
          <target state="translated">複数のスペースを必要とする他のルールとの矛盾を避けるために、このルールには特定のノードを無視する &lt;code&gt;exceptions&lt;/code&gt; オプションがあります。</target>
        </trans-unit>
        <trans-unit id="e5398e44e4a94ea4634ab5e90d6cb035b83c3671" translate="yes" xml:space="preserve">
          <source>To avoid subtle bugs like this, it's better to always call these methods from &lt;code&gt;Object.prototype&lt;/code&gt;. For example, &lt;code&gt;foo.hasOwnProperty(&quot;bar&quot;)&lt;/code&gt; should be replaced with &lt;code&gt;Object.prototype.hasOwnProperty.call(foo, &quot;bar&quot;)&lt;/code&gt;.</source>
          <target state="translated">このような微妙なバグを回避するには、これらのメソッドを常に &lt;code&gt;Object.prototype&lt;/code&gt; から呼び出すことをお勧めします。たとえば、 &lt;code&gt;foo.hasOwnProperty(&quot;bar&quot;)&lt;/code&gt; は &lt;code&gt;Object.prototype.hasOwnProperty.call(foo, &quot;bar&quot;)&lt;/code&gt; 置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="58dc0124f1404afc0ef74d2cf10ed37334f28828" translate="yes" xml:space="preserve">
          <source>To avoid this ambiguity, in 4.0 references to scoped plugins must include the scope. The config from above should be fixed to:</source>
          <target state="translated">この曖昧さを避けるために、4.0ではスコープ付きプラグインへの参照はスコープを含めなければなりません。上からのコンフィグは固定されているはずです。</target>
        </trans-unit>
        <trans-unit id="ee30a5b5044b5098a2eec0a3715fc0eeef745ddd" translate="yes" xml:space="preserve">
          <source>To avoid this issue, one might require all single-line &lt;code&gt;if&lt;/code&gt; statements to appear directly after the conditional, without a linebreak:</source>
          <target state="translated">この問題を回避するには、改行なしで条件の直後にすべての単一行の &lt;code&gt;if&lt;/code&gt; ステートメントを表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="aac8c73ad1cc50758b5de5f9a9bdff0e8124c6f3" translate="yes" xml:space="preserve">
          <source>To catch config errors earlier, ESLint v6 will report a linting error if you are trying to configure a non-existent rule.</source>
          <target state="translated">設定エラーを早くキャッチするために、ESLint v6 は存在しないルールを設定しようとすると linting エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="cb843e3d53981deb8abc7dc005824cdecd1ade2e" translate="yes" xml:space="preserve">
          <source>To check state of a code path</source>
          <target state="translated">コードパスの状態を確認するには</target>
        </trans-unit>
        <trans-unit id="4ff92f7a6568bfcddaebb533847e4e8212496d5a" translate="yes" xml:space="preserve">
          <source>To check whether or not this is reachable</source>
          <target state="translated">これが到達可能かどうかを確認するには</target>
        </trans-unit>
        <trans-unit id="3a959c0a9d587954730ee7b4356f17c6e132b1a2" translate="yes" xml:space="preserve">
          <source>To compare against an initialized variable that may or may not have an object value.</source>
          <target state="translated">初期化された変数で、オブジェクトの値を持っていてもいなくてもよい変数と比較すること。</target>
        </trans-unit>
        <trans-unit id="62c512b7180a7c74f351c08380b6705d3c61abc0" translate="yes" xml:space="preserve">
          <source>To configure a rule which is defined within a plugin you have to prefix the rule ID with the plugin name and a &lt;code&gt;/&lt;/code&gt;. For example:</source>
          <target state="translated">プラグイン内で定義されたルールを設定するには、ルールIDの前にプラグイン名と &lt;code&gt;/&lt;/code&gt; を付ける必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="31d56a381f7ad5b91ad260fe2d353e306ee0ccb3" translate="yes" xml:space="preserve">
          <source>To configure global variables inside of a configuration file, set the &lt;code&gt;globals&lt;/code&gt; configuration property to an object containing keys named for each of the global variables you want to use. For each global variable key, set the corresponding value equal to &lt;code&gt;&quot;writable&quot;&lt;/code&gt; to allow the variable to be overwritten or &lt;code&gt;&quot;readonly&quot;&lt;/code&gt; to disallow overwriting. For example:</source>
          <target state="translated">構成ファイル内でグローバル変数を構成するには、 &lt;code&gt;globals&lt;/code&gt; 構成プロパティを、使用するグローバル変数ごとに名前が付けられたキーを含むオブジェクトに設定します。グローバル変数キーごとに、対応する値を &lt;code&gt;&quot;writable&quot;&lt;/code&gt; に設定して、変数を上書きできるようにするか、 &lt;code&gt;&quot;readonly&quot;&lt;/code&gt; に設定して上書きを禁止します。例えば：</target>
        </trans-unit>
        <trans-unit id="038570de33ddc446fb32433dab83190e57eb2224" translate="yes" xml:space="preserve">
          <source>To configure plugins inside of a configuration file, use the &lt;code&gt;plugins&lt;/code&gt; key, which contains a list of plugin names. The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted from the plugin name.</source>
          <target state="translated">設定ファイル内でプラグインを設定するには、 &lt;code&gt;plugins&lt;/code&gt; イン名のリストを含むpluginsキーを使用します。 &lt;code&gt;eslint-plugin-&lt;/code&gt; プレフィックスは、プラグイン名から省略することができます。</target>
        </trans-unit>
        <trans-unit id="f6b6a8aa347c25fe69bff51062679d168f8ac129" translate="yes" xml:space="preserve">
          <source>To configure rules inside of a configuration file, use the &lt;code&gt;rules&lt;/code&gt; key along with an error level and any options you want to use. For example:</source>
          <target state="translated">設定ファイル内でルールを設定するには、エラーレベルと使用するオプションとともに &lt;code&gt;rules&lt;/code&gt; キーを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="4ebbfe48acca16cf580ee75882233871cf409bb0" translate="yes" xml:space="preserve">
          <source>To configure rules inside of a file using configuration comments, use a comment in the following format:</source>
          <target state="translated">設定コメントを使用してファイル内のルールを設定するには、以下の形式のコメントを使用します。</target>
        </trans-unit>
        <trans-unit id="4290412e19f3d42c2eb3bae9e46c3533963451fd" translate="yes" xml:space="preserve">
          <source>To convert your configuration file, pass in the location of your &lt;code&gt;.jscs.json&lt;/code&gt; file using the &lt;code&gt;--jscs&lt;/code&gt; flag:</source>
          <target state="translated">構成ファイルを変換するには、 &lt;code&gt;--jscs&lt;/code&gt; フラグを使用して &lt;code&gt;.jscs.json&lt;/code&gt; ファイルの場所を渡します。</target>
        </trans-unit>
        <trans-unit id="77785dc236e7b19dd9bed6daf0cc68f44f276c56" translate="yes" xml:space="preserve">
          <source>To create a new configuration, use &lt;code&gt;eslint --init&lt;/code&gt;.</source>
          <target state="translated">新しい構成を作成するには、 &lt;code&gt;eslint --init&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ce6ce0f45296644008f861b43c9c686e0dc163fc" translate="yes" xml:space="preserve">
          <source>To disable a specific rule on a specific line:</source>
          <target state="translated">特定の行の特定のルールを無効にするには</target>
        </trans-unit>
        <trans-unit id="0ac11ab6485b3bd3365938c2c8119a6d129eca53" translate="yes" xml:space="preserve">
          <source>To disable all inline config comments, use &lt;code&gt;noInlineConfig&lt;/code&gt; setting. For example:</source>
          <target state="translated">すべてのインライン構成コメントを無効にするには、 &lt;code&gt;noInlineConfig&lt;/code&gt; 設定を使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="03e0c39d9d8219c16b6cbcfc45577e3c33b02ebf" translate="yes" xml:space="preserve">
          <source>To disable all rules on a specific line, use a line or block comment in one of the following formats:</source>
          <target state="translated">特定の行のすべてのルールを無効にするには、以下の形式のいずれかの行またはブロックコメントを使用します。</target>
        </trans-unit>
        <trans-unit id="271e327f6c0834035985f27ecece143d28b8459e" translate="yes" xml:space="preserve">
          <source>To disable multiple rules on a specific line:</source>
          <target state="translated">特定の行で複数のルールを無効にするには</target>
        </trans-unit>
        <trans-unit id="683c891a847acfa4dba3ef3ecf6ed604bdc365ca" translate="yes" xml:space="preserve">
          <source>To disable rule warnings in an entire file, put a &lt;code&gt;/* eslint-disable */&lt;/code&gt; block comment at the top of the file:</source>
          <target state="translated">ファイル全体でルール警告を無効にするには、ファイルの上部に &lt;code&gt;/* eslint-disable */&lt;/code&gt; ブロックコメントを配置します。</target>
        </trans-unit>
        <trans-unit id="f1745e3074c16577eb0d3188a55a10e1b867a9cd" translate="yes" xml:space="preserve">
          <source>To disable rules inside of a configuration file for a group of files, use the &lt;code&gt;overrides&lt;/code&gt; key along with a &lt;code&gt;files&lt;/code&gt; key. For example:</source>
          <target state="translated">ファイルのグループの構成ファイル内のルールを無効にするには、 &lt;code&gt;files&lt;/code&gt; キーと共に &lt;code&gt;overrides&lt;/code&gt; キーを使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="b8f1f08d11bea7b02e90495a32037848c60c55f9" translate="yes" xml:space="preserve">
          <source>To ensure that the lexical declaration only applies to the current case clause wrap your clauses in blocks.</source>
          <target state="translated">辞書的宣言が現在の case 節にのみ適用されるようにするには、節をブロックで囲みます。</target>
        </trans-unit>
        <trans-unit id="203499bc397be69d693c53db5b7bda7324e98567" translate="yes" xml:space="preserve">
          <source>To indicate the npm module to use as your parser, specify it using the &lt;code&gt;parser&lt;/code&gt; option in your &lt;code&gt;.eslintrc&lt;/code&gt; file. For example, the following specifies to use Esprima instead of Espree:</source>
          <target state="translated">パーサーとして使用するnpmモジュールを指定するには、 &lt;code&gt;.eslintrc&lt;/code&gt; ファイルの &lt;code&gt;parser&lt;/code&gt; オプションを使用して指定します。たとえば、次はEspreeではなくEsprimaを使用することを指定しています。</target>
        </trans-unit>
        <trans-unit id="f1585cd31339333c37b0e7c375bfef062803fc36" translate="yes" xml:space="preserve">
          <source>To initialize a variable that may later be assign an object value.</source>
          <target state="translated">後でオブジェクトの値を代入する可能性のある変数を初期化します。</target>
        </trans-unit>
        <trans-unit id="d4f82ac6eaff3a37fd353e8d075c1052823073fd" translate="yes" xml:space="preserve">
          <source>To install Polyjuice:</source>
          <target state="translated">Polyjuiceをインストールするには。</target>
        </trans-unit>
        <trans-unit id="89616f5d48bf864dd46150c58347b2c372b8b623" translate="yes" xml:space="preserve">
          <source>To keep a sense of consistency when using generators this rule enforces a single position for the &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">ジェネレーターを使用するときに一貫性を保つために、このルールは &lt;code&gt;*&lt;/code&gt; に単一の位置を適用します。</target>
        </trans-unit>
        <trans-unit id="014798f51883ce0b4cab2a7f0b2665430ff5f4e4" translate="yes" xml:space="preserve">
          <source>To keep the linting process efficient and unobtrusive, it is useful to verify the performance impact of new rules or modifications to existing rules.</source>
          <target state="translated">リンティングプロセスを効率的で目立たないものにするためには、新しいルールや既存のルールを変更した場合のパフォーマンスへの影響を検証することが有用です。</target>
        </trans-unit>
        <trans-unit id="7d2dc22ac67dd4ce52516c75cdd733df869e84d8" translate="yes" xml:space="preserve">
          <source>To learn more about JSON Schema, we recommend looking at some &lt;a href=&quot;http://json-schema.org/examples.html&quot;&gt;examples&lt;/a&gt; to start, and also reading &lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;Understanding JSON Schema&lt;/a&gt; (a free ebook).</source>
          <target state="translated">JSONスキーマの詳細については、いくつかの&lt;a href=&quot;http://json-schema.org/examples.html&quot;&gt;例&lt;/a&gt;を参考にして、&lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;JSONスキーマの理解&lt;/a&gt;（無料の電子ブック）もお読みください。</target>
        </trans-unit>
        <trans-unit id="79796a3f8f6c8d8fb890e20aed0a655344148bba" translate="yes" xml:space="preserve">
          <source>To learn more about JSON Schema, we recommend looking at some examples in &lt;a href=&quot;http://json-schema.org/learn/&quot;&gt;website&lt;/a&gt; to start, and also reading &lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;Understanding JSON Schema&lt;/a&gt; (a free ebook).</source>
          <target state="translated">JSONスキーマの詳細については、&lt;a href=&quot;http://json-schema.org/learn/&quot;&gt;Webサイトの&lt;/a&gt;いくつかの例を参考にして、&lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;JSONスキーマの理解&lt;/a&gt;（無料の電子ブック）を読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ca9e344882212af185031bbdbaff4610a2de8177" translate="yes" xml:space="preserve">
          <source>To learn more about JSON Schema, we recommend looking at some examples in &lt;a href=&quot;https://json-schema.org/learn/&quot;&gt;website&lt;/a&gt; to start, and also reading &lt;a href=&quot;https://json-schema.org/understanding-json-schema/&quot;&gt;Understanding JSON Schema&lt;/a&gt; (a free ebook).</source>
          <target state="translated">JSONスキーマの詳細については、&lt;a href=&quot;https://json-schema.org/learn/&quot;&gt;Webサイトの&lt;/a&gt;いくつかの例を参照して開始することをお勧めし&lt;a href=&quot;https://json-schema.org/understanding-json-schema/&quot;&gt;ます。&lt;/a&gt;また、JSONスキーマについて（無料の電子書籍）も読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3d8f5c39c2c8d40a0e743e69935a37baafecadf9" translate="yes" xml:space="preserve">
          <source>To make clear that the plugin requires ESLint to work correctly you have to declare ESLint as a &lt;code&gt;peerDependency&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;. The plugin support was introduced in ESLint version &lt;code&gt;0.8.0&lt;/code&gt;. Ensure the &lt;code&gt;peerDependency&lt;/code&gt; points to ESLint &lt;code&gt;0.8.0&lt;/code&gt; or later.</source>
          <target state="translated">プラグインがESLintを正しく機能させる必要があることを明確にするには、 &lt;code&gt;package.json&lt;/code&gt; で &lt;code&gt;peerDependency&lt;/code&gt; をpeerDependencyとして宣言する必要があります。プラグインのサポートは、ESLintバージョン &lt;code&gt;0.8.0&lt;/code&gt; で導入されました。 &lt;code&gt;peerDependency&lt;/code&gt; がESLint &lt;code&gt;0.8.0&lt;/code&gt; 以降を指していることを確認します。</target>
        </trans-unit>
        <trans-unit id="7f0072825b5e8b7c9c452a6d4e5adffbaf9e06d2" translate="yes" xml:space="preserve">
          <source>To make the upgrade process easier, we've introduced the &lt;a href=&quot;../rules/indent-legacy&quot;&gt;&lt;code&gt;indent-legacy&lt;/code&gt;&lt;/a&gt; rule as a snapshot of the &lt;code&gt;indent&lt;/code&gt; rule from 3.x. If you run into issues from the &lt;code&gt;indent&lt;/code&gt; rule when you upgrade, you should be able to use the &lt;code&gt;indent-legacy&lt;/code&gt; rule to replicate the 3.x behavior. However, the &lt;code&gt;indent-legacy&lt;/code&gt; rule is deprecated and will not receive bugfixes or improvements in the future, so you should eventually switch back to the &lt;code&gt;indent&lt;/code&gt; rule.</source>
          <target state="translated">アップグレードプロセスを簡単にするために、3.xからの &lt;code&gt;indent&lt;/code&gt; ルールのスナップショットとして&lt;a href=&quot;../rules/indent-legacy&quot;&gt; &lt;code&gt;indent-legacy&lt;/code&gt; &lt;/a&gt;ルールを導入しました。アップグレード時に &lt;code&gt;indent&lt;/code&gt; ルールの問題が発生した場合は、 &lt;code&gt;indent-legacy&lt;/code&gt; ルールを使用して3.xの動作を複製できるはずです。ただし、 &lt;code&gt;indent-legacy&lt;/code&gt; ルールは廃止されており、今後バグ修正や改善は行われないため、最終的には &lt;code&gt;indent&lt;/code&gt; ルールに戻す必要があります。</target>
        </trans-unit>
        <trans-unit id="06b4a6393df43365fbe0ff6d73f66711fea04a4b" translate="yes" xml:space="preserve">
          <source>To make this rule ignore specific comments, set the &lt;code&gt;ignorePattern&lt;/code&gt; option to a string pattern that will be passed to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt; constructor&lt;/a&gt;.</source>
          <target state="translated">このルールで特定のコメントを無視するようにするには、 &lt;code&gt;ignorePattern&lt;/code&gt; オプションを、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; コンストラクターに&lt;/a&gt;渡される文字列パターンに設定します。</target>
        </trans-unit>
        <trans-unit id="c45b0a04793c13b7a0abac51b4665eb87ba73c97" translate="yes" xml:space="preserve">
          <source>To pass into a function where an object is expected.</source>
          <target state="translated">オブジェクトが期待される関数に渡すこと。</target>
        </trans-unit>
        <trans-unit id="83e3945e063cd92d025529797a0272c100afe72e" translate="yes" xml:space="preserve">
          <source>To prevent calling the callback multiple times it is important to &lt;code&gt;return&lt;/code&gt; anytime the callback is triggered outside of the main function body. Neglecting this technique often leads to issues where you do something more than once. For example, in the case of an HTTP request, you may try to send HTTP headers more than once leading Node.js to &lt;code&gt;throw&lt;/code&gt; a &lt;code&gt;Can't render headers after they are sent to the client.&lt;/code&gt; error.</source>
          <target state="translated">コールバックが複数回呼び出されないようにするには、コールバックがメイン関数本体の外でトリガーされた &lt;code&gt;return&lt;/code&gt; いつでも戻ることが重要です。この手法を怠ると、多くの場合、何かを複数回実行するという問題が発生します。たとえば、HTTPリクエストの場合、HTTPヘッダーを複数回送信して、Node.js &lt;code&gt;Can't render headers after they are sent to the client.&lt;/code&gt; を &lt;code&gt;throw&lt;/code&gt; するようにすることができます。エラー。</target>
        </trans-unit>
        <trans-unit id="a0be1e74e739008ed7d10977cc1e906c88cb6fa1" translate="yes" xml:space="preserve">
          <source>To programmatically set &lt;code&gt;.eslintrc.*&lt;/code&gt; options not supported above (such as &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;settings&lt;/code&gt;), define them in a config object passed to &lt;code&gt;baseConfig&lt;/code&gt; instead.</source>
          <target state="translated">上記でサポートされていない &lt;code&gt;.eslintrc.*&lt;/code&gt; オプション（ &lt;code&gt;extends&lt;/code&gt; 、 &lt;code&gt;overrides&lt;/code&gt; 、 &lt;code&gt;settings&lt;/code&gt; など）をプログラムで設定するには、代わりに &lt;code&gt;baseConfig&lt;/code&gt; に渡される構成オブジェクトでそれらを定義します。</target>
        </trans-unit>
        <trans-unit id="201bfabb446b5a5e524d44ebbd491ddebd41f0f7" translate="yes" xml:space="preserve">
          <source>To propose a change to an existing rule, &lt;a href=&quot;pull-requests&quot;&gt;create a pull request&lt;/a&gt; or &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=RULE_CHANGE.md&quot;&gt;new issue&lt;/a&gt; and fill out the template.</source>
          <target state="translated">既存のルールの変更を提案するには&lt;a href=&quot;pull-requests&quot;&gt;、プルリクエスト&lt;/a&gt;または&lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=RULE_CHANGE.md&quot;&gt;新しい問題&lt;/a&gt;を作成し、テンプレートに入力します。</target>
        </trans-unit>
        <trans-unit id="e83198b0a74df694fcf2b005dd304829d6849799" translate="yes" xml:space="preserve">
          <source>To report a security vulnerability in ESLint, please use our &lt;a href=&quot;https://hackerone.com/eslint&quot;&gt;HackerOne program&lt;/a&gt;.</source>
          <target state="translated">ESLintのセキュリティの脆弱性を報告するには、&lt;a href=&quot;https://hackerone.com/eslint&quot;&gt;HackerOneプログラム&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="b567fa067e888b6361b686f01a36f861a714890e" translate="yes" xml:space="preserve">
          <source>To report unused &lt;code&gt;eslint-disable&lt;/code&gt; comments, use &lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; setting. For example:</source>
          <target state="translated">未使用の &lt;code&gt;eslint-disable&lt;/code&gt; コメントを報告するには、 &lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; 設定を使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="43674a214ae4f8884b5b999f624a4924ae51e2e3" translate="yes" xml:space="preserve">
          <source>To restore the previous behavior of a string option like &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt;, replace &lt;code&gt;&quot;never&quot;&lt;/code&gt; with &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; in the example above.</source>
          <target state="translated">&lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; のような文字列オプションの以前の動作を復元するには、上の例で &lt;code&gt;&quot;never&quot;&lt;/code&gt; を &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="93f41caa6af8c347bb85a914ee52d8627febd940" translate="yes" xml:space="preserve">
          <source>To restore the previous options for the rule, you can configure it as follows:</source>
          <target state="translated">ルールの以前のオプションを復元するには、以下のように設定します。</target>
        </trans-unit>
        <trans-unit id="a1bd13d216162d39f3a12526c2dd871cd53799b1" translate="yes" xml:space="preserve">
          <source>To restrict the use of all Node.js core imports (via https://github.com/nodejs/node/tree/master/lib):</source>
          <target state="translated">すべてのNode.jsコアのインポートを制限するには (https://github.com/nodejs/node/tree/master/lib を参照)。</target>
        </trans-unit>
        <trans-unit id="1c78dcabe0d43517abe82ce3e2716690299693b6" translate="yes" xml:space="preserve">
          <source>To restrict the use of all Node.js core modules (via https://github.com/nodejs/node/tree/master/lib):</source>
          <target state="translated">すべてのNode.jsコアモジュールの使用を制限するには(https://github.com/nodejs/node/tree/master/lib経由)。</target>
        </trans-unit>
        <trans-unit id="c55df0a6472dd4b4e66373936e321df946ca7541" translate="yes" xml:space="preserve">
          <source>To return from a function where an object is expected.</source>
          <target state="translated">オブジェクトが期待される関数から戻ること。</target>
        </trans-unit>
        <trans-unit id="721ccdb4417d969301a1c4093826c5db56bffc2f" translate="yes" xml:space="preserve">
          <source>To run ESLint on Node.js, you must have npm installed. If npm is not installed, follow the instructions here: https://www.npmjs.com/</source>
          <target state="translated">Node.js上でESLintを実行するには、npmがインストールされている必要があります。npmがインストールされていない場合は、以下の手順に従ってください:https://www.npmjs.com/</target>
        </trans-unit>
        <trans-unit id="5f23973ffba8e1e7876140b6ac9341e6c0d2443f" translate="yes" xml:space="preserve">
          <source>To run ESLint with this formatter, you can use the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--format&lt;/code&gt;) command line flag:</source>
          <target state="translated">このフォーマッタでESLintを実行するには、 &lt;code&gt;-f&lt;/code&gt; （または &lt;code&gt;--format&lt;/code&gt; ）コマンドラインフラグを使用できます。</target>
        </trans-unit>
        <trans-unit id="7ef00b1683cdab559312cccf7254b9d3cdecbcf2" translate="yes" xml:space="preserve">
          <source>To run ESLint with this formatter, you can use the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--formatter&lt;/code&gt;) command line flag:</source>
          <target state="translated">このフォーマッターでESLintを実行するには、 &lt;code&gt;-f&lt;/code&gt; （または &lt;code&gt;--formatter&lt;/code&gt; ）コマンドラインフラグを使用できます。</target>
        </trans-unit>
        <trans-unit id="609fc520c5dbe052bd07c90db967ce8109decb8f" translate="yes" xml:space="preserve">
          <source>To see a longer list of results (more than 10), set the environment variable to another value such as &lt;code&gt;TIMING=50&lt;/code&gt; or &lt;code&gt;TIMING=all&lt;/code&gt;.</source>
          <target state="translated">結果のより長いリスト（10を超える）を表示するには、環境変数を &lt;code&gt;TIMING=50&lt;/code&gt; や &lt;code&gt;TIMING=all&lt;/code&gt; などの別の値に設定します。</target>
        </trans-unit>
        <trans-unit id="a03320f309e4584fa0a9625239401ea837f08db0" translate="yes" xml:space="preserve">
          <source>To specify environments in a configuration file, use the &lt;code&gt;env&lt;/code&gt; key and specify which environments you want to enable by setting each to &lt;code&gt;true&lt;/code&gt;. For example, the following enables the browser and Node.js environments:</source>
          <target state="translated">構成ファイルで環境を指定するには、 &lt;code&gt;env&lt;/code&gt; キーを使用し、それぞれを &lt;code&gt;true&lt;/code&gt; に設定して、有効にする環境を指定します。たとえば、次はブラウザとNode.js環境を有効にします。</target>
        </trans-unit>
        <trans-unit id="495e8e76dc85c614865914b900b3e79f15c83ac1" translate="yes" xml:space="preserve">
          <source>To specify environments using a comment inside of your JavaScript file, use the following format:</source>
          <target state="translated">JavaScriptファイル内のコメントを使用して環境を指定するには、以下の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="871bade776d5dd80ffa710cb32ea4c1f403ba185" translate="yes" xml:space="preserve">
          <source>To specify globals using a comment inside of your JavaScript file, use the following format:</source>
          <target state="translated">JavaScript ファイル内のコメントを使用してグローバルを指定するには、以下の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="4d99775a8ebadc5b547b76108d1fcd2ee02b18da" translate="yes" xml:space="preserve">
          <source>To specify processors for a specific kind of files, use the combination of the &lt;code&gt;overrides&lt;/code&gt; key and the &lt;code&gt;processor&lt;/code&gt; key. For example, the following uses the processor &lt;code&gt;a-plugin/markdown&lt;/code&gt; for &lt;code&gt;*.md&lt;/code&gt; files.</source>
          <target state="translated">特定の種類のファイルのプロセッサを指定するには、 &lt;code&gt;overrides&lt;/code&gt; キーと &lt;code&gt;processor&lt;/code&gt; キーの組み合わせを使用します。例えば、以下の用途プロセッサ &lt;code&gt;a-plugin/markdown&lt;/code&gt; のための &lt;code&gt;*.md&lt;/code&gt; ファイル。</target>
        </trans-unit>
        <trans-unit id="151531400cce4c0ae71fe4f4c92832cb966d2c79" translate="yes" xml:space="preserve">
          <source>To specify processors for specific kinds of files, use the combination of the &lt;code&gt;overrides&lt;/code&gt; key and the &lt;code&gt;processor&lt;/code&gt; key. For example, the following uses the processor &lt;code&gt;a-plugin/markdown&lt;/code&gt; for &lt;code&gt;*.md&lt;/code&gt; files.</source>
          <target state="translated">特定の種類のファイルのプロセッサを指定するには、 &lt;code&gt;overrides&lt;/code&gt; キーと &lt;code&gt;processor&lt;/code&gt; キーの組み合わせを使用します。たとえば、次の例では、 &lt;code&gt;*.md&lt;/code&gt; 。mdファイルにプロセッサ &lt;code&gt;a-plugin/markdown&lt;/code&gt; markdownを使用しています。</target>
        </trans-unit>
        <trans-unit id="723b7b22d828cba77882c9fa33c876e8ac01c597" translate="yes" xml:space="preserve">
          <source>To specify processors in a configuration file, use the &lt;code&gt;processor&lt;/code&gt; key with the concatenated string of a plugin name and a processor name by a slash. For example, the following enables the processor &lt;code&gt;a-processor&lt;/code&gt; that the plugin &lt;code&gt;a-plugin&lt;/code&gt; provided:</source>
          <target state="translated">構成ファイルでプロセッサを指定するには、プラグイン名とプロセッサ名をスラッシュで連結した文字列を含む &lt;code&gt;processor&lt;/code&gt; キーを使用します。たとえば、以下はプラグイン &lt;code&gt;a-plugin&lt;/code&gt; が提供したプロセッサー &lt;code&gt;a-processor&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="67c36e41c644a39ed1cc6fc2e78067a36986c4cc" translate="yes" xml:space="preserve">
          <source>To temporarily disable rule warnings in your file, use block comments in the following format:</source>
          <target state="translated">ファイル内のルール警告を一時的に無効にするには、以下の形式でブロックコメントを使用します。</target>
        </trans-unit>
        <trans-unit id="eb0874bfc2758468b0b50d63606f56c7bf6e56d2" translate="yes" xml:space="preserve">
          <source>To test one rule explicitly, combine the &lt;code&gt;--no-eslintrc&lt;/code&gt;, and &lt;code&gt;--rule&lt;/code&gt; options:</source>
          <target state="translated">1つのルールを明示的にテストするには、 &lt;code&gt;--no-eslintrc&lt;/code&gt; と &lt;code&gt;--rule&lt;/code&gt; オプションを組み合わせます。</target>
        </trans-unit>
        <trans-unit id="891f46c7dc6414e9bb18032c28d627aeff17b6b1" translate="yes" xml:space="preserve">
          <source>To use a processor, add its ID to a &lt;code&gt;processor&lt;/code&gt; section in the config file. Processor ID is a concatenated string of plugin name and processor name with a slash as a separator. This can also be added to a &lt;code&gt;overrides&lt;/code&gt; section of the config, to specify which processors should handle which files.</source>
          <target state="translated">プロセッサを使用するには、そのIDを構成ファイルの &lt;code&gt;processor&lt;/code&gt; セクションに追加します。プロセッサーIDは、プラグイン名とプロセッサー名をスラッシュで区切った文字列を連結したものです。これは、構成の &lt;code&gt;overrides&lt;/code&gt; セクションに追加して、どのプロセッサがどのファイルを処理するかを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="6c4e8891d882a51f0c8905192b3c8f74ba87a214" translate="yes" xml:space="preserve">
          <source>To use custom parsers in tests, we could use &lt;code&gt;parser&lt;/code&gt; property with a package name or file path. However, if a package name was given, it's unclear where the tester should load the parser package from because the tester doesn't know which files are running the tester. In ESLint v6.0.0, &lt;code&gt;RuleTester&lt;/code&gt; disallows &lt;code&gt;parser&lt;/code&gt; property with a package name.</source>
          <target state="translated">テストでカスタムパーサーを使用するには、パッケージ名またはファイルパスで &lt;code&gt;parser&lt;/code&gt; プロパティを使用できます。ただし、パッケージ名が指定されている場合、テスターはどのファイルがテスターを実行しているのかわからないため、テスターがどこからパーサーパッケージをロードする必要があるかは不明です。ESLint v6.0.0では、 &lt;code&gt;RuleTester&lt;/code&gt; はパッケージ名を持つ &lt;code&gt;parser&lt;/code&gt; プロパティを許可しません。</target>
        </trans-unit>
        <trans-unit id="e57cc33fc747f8014fd7902fcb60a357b4a1a111" translate="yes" xml:space="preserve">
          <source>To use the rule in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the rule name. So if this plugin were named &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt;, then in your configuration you'd refer to the rule by the name &lt;code&gt;myplugin/dollar-sign&lt;/code&gt;. Example: &lt;code&gt;&quot;rules&quot;: {&quot;myplugin/dollar-sign&quot;: 2}&lt;/code&gt;.</source>
          <target state="translated">ESLintでルールを使用するには、接頭辞のないプラグイン名、スラッシュ、ルール名の順に使用します。したがって、このプラグインの名前が &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; の場合、構成では &lt;code&gt;myplugin/dollar-sign&lt;/code&gt; という名前でルールを参照します。例： &lt;code&gt;&quot;rules&quot;: {&quot;myplugin/dollar-sign&quot;: 2}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff0243bfd180221afc684bd012fe971d219f3914" translate="yes" xml:space="preserve">
          <source>To use this rule you either need to &lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;use the &lt;code&gt;es6&lt;/code&gt; environment&lt;/a&gt; or &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;set &lt;code&gt;ecmaVersion&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt; in &lt;code&gt;parserOptions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">あなたのためのいずれかの必要性このルールを使用するには、&lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;使用 &lt;code&gt;es6&lt;/code&gt; 環境&lt;/a&gt;や&lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;セット &lt;code&gt;ecmaVersion&lt;/code&gt; をする &lt;code&gt;6&lt;/code&gt; で &lt;code&gt;parserOptions&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f00b91a2a4b27b5dd6a4d6851934df0ad3c4918" translate="yes" xml:space="preserve">
          <source>Token traversal methods</source>
          <target state="translated">トークントラバーサル方式</target>
        </trans-unit>
        <trans-unit id="f588750190bb407612d4d3cc95313c9f0366ef4b" translate="yes" xml:space="preserve">
          <source>Trailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec, however IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.</source>
          <target state="translated">オブジェクトリテラルの末尾のカンマは ECMAScript 5 (および ECMAScript 3 も!)の仕様に従って有効ですが、IE8 (IE8 のドキュメントモードではない場合)以下では、JavaScript の末尾のカンマに遭遇した場合にエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="a5e53b1f9f6188b4f85c8629c6f48dab687880d7" translate="yes" xml:space="preserve">
          <source>Trailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.</source>
          <target state="translated">オブジェクトリテラルの末尾のカンマは、ECMAScript 5 (およびECMAScript 3も!)の仕様に従って有効です。しかし、IE8 (IE8 ドキュメントモードではない場合)以下では、JavaScript の末尾のカンマに遭遇した場合にエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="42f8e54908dd12f18038e48f38d2a5fc210a145c" translate="yes" xml:space="preserve">
          <source>Trailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched. Another argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:</source>
          <target state="translated">オブジェクトや配列への項目の追加や削除は、変更する行にのみ触れる必要があるため、末尾のカンマを使用すると簡単になります。オブジェクトや配列に項目が追加されたり削除されたりしたときの diff のわかりやすさを向上させるというのも、末尾のカンマを支持するもう一つの理由です。</target>
        </trans-unit>
        <trans-unit id="1e1791fddec4ea7e52795883f2a6849c505d7048" translate="yes" xml:space="preserve">
          <source>Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts.</source>
          <target state="translated">空ではないファイルに改行をつけることは、UNIX の一般的な慣用句です。改行を引きずることの利点は、シェルプロンプトを妨げることなくファイルを連結したり、ファイルに追加したり、ターミナルにファイルを出力したりすることができることです。</target>
        </trans-unit>
        <trans-unit id="e53d9b4b888b92bc998ba043c0f679b9430de24e" translate="yes" xml:space="preserve">
          <source>Treat var as Block Scoped (block-scoped-var)</source>
          <target state="translated">varをBlock Scopedとして扱う (block-scoped-var)</target>
        </trans-unit>
        <trans-unit id="4f3d6d9d6adfe503a76d26f73c73b70e417c1fa1" translate="yes" xml:space="preserve">
          <source>Triggering the callback within a nested function</source>
          <target state="translated">ネストされた関数内でコールバックをトリガする</target>
        </trans-unit>
        <trans-unit id="d6036734261e1407ac1587614623993db6543f63" translate="yes" xml:space="preserve">
          <source>Turn this rule off if you do not care about allowing whitespace around the dot or before the opening bracket before properties of objects if they are on the same line.</source>
          <target state="translated">ドットの周りや、オブジェクトが同じ行にある場合にプロパティの前にある開括弧の前の空白を気にしない場合は、このルールをオフにします。</target>
        </trans-unit>
        <trans-unit id="a6fb61d5bdbd5563cef73b185d48d5a12fd87675" translate="yes" xml:space="preserve">
          <source>Two blank lines should always be used in the following circumstances:</source>
          <target state="translated">以下の場合は、必ず空欄2行を使用してください。</target>
        </trans-unit>
        <trans-unit id="23543bb6cae6e3faed2a4ea7359e13f3351fb804" translate="yes" xml:space="preserve">
          <source>Two identical test conditions in the same chain are almost always a mistake in the code. Unless there are side effects in the expressions, a duplicate will evaluate to the same &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value as the identical expression earlier in the chain, meaning that its branch can never execute.</source>
          <target state="translated">同じチェーン内の2つの同一のテスト条件は、ほとんど常にコードの誤りです。式に副作用がない限り、複製はチェーンの最初の同一の式と同じ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 値に評価されます。つまり、その分岐は決して実行できません。</target>
        </trans-unit>
        <trans-unit id="6af0c5213fca9f8826d4d810bb2b07a12f3adeda" translate="yes" xml:space="preserve">
          <source>Two new rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">&lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; &lt;/a&gt;設定に2つの新しいルールが追加されました：</target>
        </trans-unit>
        <trans-unit id="89012465840cf6a663f53d89d53a93ba89e2ab72" translate="yes" xml:space="preserve">
          <source>Two spaces, not longer and no tabs: Google, npm, Node.js, Idiomatic, Felix</source>
          <target state="translated">スペースが2つ、長くない、タブがない。Google、npm、Node.js、Idiomatic、Felix</target>
        </trans-unit>
        <trans-unit id="91d3d6d9190bf1f4632f0830dbb8f846ba8033ea" translate="yes" xml:space="preserve">
          <source>Typing mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.</source>
          <target state="translated">セミコロンが必要な場所についての入力ミスや誤解は、不要なセミコロンにつながる可能性があります。技術的にはエラーではありませんが、余分なセミコロンはコードを読む際に混乱を招く可能性があります。</target>
        </trans-unit>
        <trans-unit id="c262f4ef00e7b518727dd018478998b99f6f627d" translate="yes" xml:space="preserve">
          <source>Unary operators: &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;</source>
          <target state="translated">単項演算子： &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b03881360fb7fb50c7b50f0425294244e2ef376" translate="yes" xml:space="preserve">
          <source>Under non ES2015 environment, it might be ignored merely.</source>
          <target state="translated">ES2015以外の環境では、単に無視される可能性があります。</target>
        </trans-unit>
        <trans-unit id="6117511d586c10e8d8d5e71cb63042e9de4e8759" translate="yes" xml:space="preserve">
          <source>Under the strict mode, &lt;code&gt;this&lt;/code&gt; keywords outside of classes or class-like objects might be &lt;code&gt;undefined&lt;/code&gt; and raise a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">strictモードでは、クラスまたはクラスのようなオブジェクトの外部にある &lt;code&gt;this&lt;/code&gt; キーワードは &lt;code&gt;undefined&lt;/code&gt; あり、 &lt;code&gt;TypeError&lt;/code&gt; を送出する可能性があります。</target>
        </trans-unit>
        <trans-unit id="435196d8251f5646211334f3e3f54b6b93ccb010" translate="yes" xml:space="preserve">
          <source>Understanding ES6: Accessor Properties</source>
          <target state="translated">ES6 を理解する:アクセッサーのプロパティ</target>
        </trans-unit>
        <trans-unit id="83561aad3017c9c3ace3fd6ce8b94644c28a5684" translate="yes" xml:space="preserve">
          <source>Understanding ES6: Generators</source>
          <target state="translated">ES6を理解する:発電機</target>
        </trans-unit>
        <trans-unit id="ab72f7b4a6ebe0315e7168be210b1247953821fe" translate="yes" xml:space="preserve">
          <source>Understanding JavaScript&amp;rsquo;s &amp;lsquo;undefined&amp;rsquo; | JavaScript, JavaScript...</source>
          <target state="translated">JavaScriptの「未定義」を理解する| JavaScript、JavaScript ...</target>
        </trans-unit>
        <trans-unit id="35bb1c8bbba51795c3d24686d2f47445bc17d0b6" translate="yes" xml:space="preserve">
          <source>Understanding JavaScript's Function.prototype.bind</source>
          <target state="translated">JavaScriptのFunction.prototype.bindを理解する</target>
        </trans-unit>
        <trans-unit id="bb8b88dbe8776e9f43a70c7c21cdbf0f5fb1ce3a" translate="yes" xml:space="preserve">
          <source>Unfortunately, this introduces a high potential for confusion since the code author likely meant to write:</source>
          <target state="translated">残念ながら、これはコード作者が書くことを意図している可能性が高いため、混乱を招く可能性が高いことを紹介しています。</target>
        </trans-unit>
        <trans-unit id="d48b11fe7b81214ca619d17883fb3645e879279b" translate="yes" xml:space="preserve">
          <source>Unicode includes the characters which are made with multiple code points. RegExp character class syntax (&lt;code&gt;/[abc]/&lt;/code&gt;) cannot handle characters which are made by multiple code points as a character; those characters will be dissolved to each code point. For example, &lt;code&gt;❇️&lt;/code&gt; is made by &lt;code&gt;❇&lt;/code&gt; (&lt;code&gt;U+2747&lt;/code&gt;) and VARIATION SELECTOR-16 (&lt;code&gt;U+FE0F&lt;/code&gt;). If this character is in RegExp character class, it will match to either &lt;code&gt;❇&lt;/code&gt; (&lt;code&gt;U+2747&lt;/code&gt;) or VARIATION SELECTOR-16 (&lt;code&gt;U+FE0F&lt;/code&gt;) rather than &lt;code&gt;❇️&lt;/code&gt;.</source>
          <target state="translated">Unicodeには、複数のコードポイントで作成された文字が含まれています。 RegExp文字クラス構文（ &lt;code&gt;/[abc]/&lt;/code&gt; ）は、複数のコードポイントによって作成された文字を文字として処理できません。それらの文字は各コードポイントに分解されます。たとえば、 &lt;code&gt;❇️&lt;/code&gt; は &lt;code&gt;❇&lt;/code&gt; （ &lt;code&gt;U+2747&lt;/code&gt; ）とVARIATION &lt;code&gt;U+FE0F&lt;/code&gt; -16（U + FE0F）によって作成されます。この文字は、正規表現の文字クラス内にある場合、それはどちらかに一致します &lt;code&gt;❇&lt;/code&gt; （ &lt;code&gt;U+2747&lt;/code&gt; ）またはVARIATION SELECTOR-16（ &lt;code&gt;U+FE0F&lt;/code&gt; ）ではなく &lt;code&gt;❇️&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">ユニットテスト</target>
        </trans-unit>
        <trans-unit id="ed268ddbd2a8fdb80c5132135ac42034d7585ab8" translate="yes" xml:space="preserve">
          <source>Unlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.</source>
          <target state="translated">関数が指定された型の値を返すことを強制する静的型付け言語とは異なり、JavaScriptでは、関数内の異なるコードパスが異なる型の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="e8255c66699d44e4e1f6dce4f3bf4faf99e81e92" translate="yes" xml:space="preserve">
          <source>Unlike string literals in JavaScript, string literals within JSX attributes can&amp;rsquo;t contain escaped quotes. If you want to have e.g. a double quote within a JSX attribute value, you have to use single quotes as string delimiter.</source>
          <target state="translated">JavaScriptの文字列リテラルとは異なり、JSX属性内の文字列リテラルには、エスケープされた引用符を含めることができません。たとえば、JSX属性値内に二重引用符が必要な場合は、文字列の区切り文字として一重引用符を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="61fa2bfb22938ebb5c32094dc4ee0f186aaf0a6b" translate="yes" xml:space="preserve">
          <source>Unquoted property names / object keys in JavaScript</source>
          <target state="translated">JavaScriptでの引用符なしのプロパティ名/オブジェクトキー</target>
        </trans-unit>
        <trans-unit id="7ff0c77b350a5aadeaa42ace88086b4b816bf51c" translate="yes" xml:space="preserve">
          <source>Unrecognized properties in config files now cause a fatal error</source>
          <target state="translated">設定ファイルで認識されていないプロパティが致命的なエラーを発生するようになりました。</target>
        </trans-unit>
        <trans-unit id="c6b529fb98699d6aa6137219a8f553527e34bcea" translate="yes" xml:space="preserve">
          <source>Up until now, ESLint has ignored the following files by default:</source>
          <target state="translated">これまでESLintは以下のファイルをデフォルトで無視していました。</target>
        </trans-unit>
        <trans-unit id="c4e7eac40b9e4375a3173106eced6219a9686a47" translate="yes" xml:space="preserve">
          <source>Up until now, ESLint has resolved the following paths relative to the directory path of the &lt;em&gt;entry&lt;/em&gt; configuration file:</source>
          <target state="translated">これまで、ESLintは、&lt;em&gt;エントリ&lt;/em&gt;構成ファイルのディレクトリパスに関連する次のパスを解決しました。</target>
        </trans-unit>
        <trans-unit id="bac9e5ab73111bc19c6b0aa90418a5f77b3cb1e5" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;postprocess&lt;/code&gt; method to additionally transform the &lt;code&gt;fix&lt;/code&gt; property of reported problems. All autofixable problems will have a &lt;code&gt;fix&lt;/code&gt; property, which is an object with the following schema:</source>
          <target state="translated">&lt;code&gt;postprocess&lt;/code&gt; メソッドを更新して、報告された問題の &lt;code&gt;fix&lt;/code&gt; プロパティをさらに変換します。自動 &lt;code&gt;fix&lt;/code&gt; 可能なすべての問題には、次のスキーマを持つオブジェクトである修正プロパティがあります。</target>
        </trans-unit>
        <trans-unit id="f19b54eaec0be934d9ffb5d7c086f2c3d8bbf5d2" translate="yes" xml:space="preserve">
          <source>Updating the Code</source>
          <target state="translated">コードの更新</target>
        </trans-unit>
        <trans-unit id="0081f6b97ccbd31d4c40065dd8731e13aa80ae30" translate="yes" xml:space="preserve">
          <source>Updating the Commit Message</source>
          <target state="translated">コミットメッセージの更新</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="ef470880f7ed6bef65c435b54eee6bca41e5a18b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;. This avoids type coercion errors.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; および &lt;code&gt;!=&lt;/code&gt; の代わりに &lt;code&gt;===&lt;/code&gt; および &lt;code&gt;!==&lt;/code&gt; を使用します。これにより、型強制エラーが回避されます。</target>
        </trans-unit>
        <trans-unit id="011ef28ad58486d3ab69359c58102b7363b2266a" translate="yes" xml:space="preserve">
          <source>Use Node.js-specific features</source>
          <target state="translated">Node.jsに特化した機能を使う</target>
        </trans-unit>
        <trans-unit id="ff690daa270b01343fad8ceed7486bec02ce4b10" translate="yes" xml:space="preserve">
          <source>Use a Plugin</source>
          <target state="translated">プラグインを使う</target>
        </trans-unit>
        <trans-unit id="835f0fad91a05bc46b363064581ce1b2272a0c54" translate="yes" xml:space="preserve">
          <source>Use a formatter</source>
          <target state="translated">フォーマッタを使用する</target>
        </trans-unit>
        <trans-unit id="19d3d762409d13fdb5e17c521bdcc191df2d866e" translate="yes" xml:space="preserve">
          <source>Use dashes between words.</source>
          <target state="translated">単語と単語の間にはダッシュを使いましょう。</target>
        </trans-unit>
        <trans-unit id="7b394f6356786472bb5d094c3bc4c3f3a803fefd" translate="yes" xml:space="preserve">
          <source>Use formatters</source>
          <target state="translated">フォーマッタを使用する</target>
        </trans-unit>
        <trans-unit id="9066ba971418973fca320cd33a59b04d2bf395e0" translate="yes" xml:space="preserve">
          <source>Use of operator assignment shorthand is a stylistic choice. Leaving this rule turned off would allow developers to choose which style is more readable on a case-by-case basis.</source>
          <target state="translated">演算子の割り当ての速記法の使用はスタイルの選択です。このルールをオフにしておくと、開発者はケースバイケースでどのスタイルがより読みやすいかを選択できるようになります。</target>
        </trans-unit>
        <trans-unit id="b86bbb341b0e64d3538dc061bfeb6f85388244ee" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;Array&lt;/code&gt; constructor to construct a new array is generally discouraged in favor of array literal notation because of the single-argument pitfall and because the &lt;code&gt;Array&lt;/code&gt; global may be redefined. The exception is when the Array constructor is used to intentionally create sparse arrays of a specified size by giving the constructor a single numeric argument.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; コンストラクターを使用して新しい配列を作成することは、単一引数の落とし穴と &lt;code&gt;Array&lt;/code&gt; グローバルが再定義される可能性があるため、配列リテラル表記を優先して、通常は推奨されません。例外は、Arrayコンストラクターを使用して、コンストラクターに単一の数値引数を与えることにより、指定されたサイズのスパース配列を意図的に作成する場合です。</target>
        </trans-unit>
        <trans-unit id="26a7add0d95cdf823b32ae21e2e3c0d2f08e62bf" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;working-on-issues#issue-labels&quot;&gt;labels of the issue you are working on&lt;/a&gt; to determine the best tag.</source>
          <target state="translated">&lt;a href=&quot;working-on-issues#issue-labels&quot;&gt;取り組んでいる問題&lt;/a&gt;のラベルを使用して、最適なタグを決定します。</target>
        </trans-unit>
        <trans-unit id="1cfc5a59f9b895a45cc3cf53842207d4f3bebd6d" translate="yes" xml:space="preserve">
          <source>Useless backreference is a possible error in the code. It usually indicates that the regular expression does not work as intended.</source>
          <target state="translated">役に立たない後方参照は、コード内の可能性のあるエラーです。これは通常、正規表現が意図した通りに動作しないことを示します。</target>
        </trans-unit>
        <trans-unit id="bec249e659662f7d5947bf09a1ea1d4a552885b0" translate="yes" xml:space="preserve">
          <source>User Guide</source>
          <target state="translated">ユーザーガイド</target>
        </trans-unit>
        <trans-unit id="5ca23839cda095745735c75553a12cf7908955e0" translate="yes" xml:space="preserve">
          <source>User-provided regular expressions in rule options are parsed with the unicode flag</source>
          <target state="translated">ルールオプシ ョ ン内のユーザーが与えた正規表現は、 unicode フラグで解析されます。</target>
        </trans-unit>
        <trans-unit id="7fd4dcddd3c0916bd4f60e031948757e96a9d5fb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; を使用する</target>
        </trans-unit>
        <trans-unit id="b1bfa835d3b3d9b6466c63ac32420431a606ac4b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="translated">使用方法 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2ba04df69fc28f857795f88a23c9275ba3ebf7e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;allow&lt;/code&gt; list, we can override and allow specific operators.</source>
          <target state="translated">&lt;code&gt;allow&lt;/code&gt; リストを使用して、特定の演算子をオーバーライドおよび許可できます。</target>
        </trans-unit>
        <trans-unit id="c928729edb2b2cddd950bdbb1bdc2400601f8027" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;description&lt;/code&gt; promotes easier debugging: when a symbol is logged the description is used:</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt; を使用すると、デバッグが容易になります。シンボルがログに記録されると、説明が使用されます。</target>
        </trans-unit>
        <trans-unit id="20bce9c62cd08c2e7b72a20378cd436bb7459b13" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;javascript:&lt;/code&gt; URLs is considered by some as a form of &lt;code&gt;eval&lt;/code&gt;. Code passed in &lt;code&gt;javascript:&lt;/code&gt; URLs has to be parsed and evaluated by the browser in the same way that &lt;code&gt;eval&lt;/code&gt; is processed.</source>
          <target state="translated">&lt;code&gt;javascript:&lt;/code&gt; URLの使用は、 &lt;code&gt;eval&lt;/code&gt; の形式と見なされる場合があります。 &lt;code&gt;javascript:&lt;/code&gt; URLで渡されたコードは、 &lt;code&gt;eval&lt;/code&gt; が処理されるのと同じ方法で、ブラウザによって解析および評価される必要があります。</target>
        </trans-unit>
        <trans-unit id="7d3ca8cf5331a50fc0f41fdb41e8a387c87ec5d1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;return await&lt;/code&gt; inside an &lt;code&gt;async function&lt;/code&gt; keeps the current function in the call stack until the Promise that is being awaited has resolved, at the cost of an extra microtask before resolving the outer Promise. &lt;code&gt;return await&lt;/code&gt; can also be used in a try/catch statement to catch errors from another function that returns a Promise.</source>
          <target state="translated">使用して &lt;code&gt;return await&lt;/code&gt; 内部で &lt;code&gt;async function&lt;/code&gt; 待望されている約束が解決するまで、外側の約束を解決する前に、余分なマイクロタスクのコストで、コールスタック内の現在の機能を保持します。 &lt;code&gt;return await&lt;/code&gt; は、try / catchステートメントで使用して、Promiseを返す別の関数からのエラーをキャッチすることもできます。</target>
        </trans-unit>
        <trans-unit id="7736010ecd5cb06e1bd0f2122d0622ef44859f84" translate="yes" xml:space="preserve">
          <source>Using Configuration Comments</source>
          <target state="translated">設定コメントの使用</target>
        </trans-unit>
        <trans-unit id="dbd293c2b3a5260fa83b1710464219faa5a14998" translate="yes" xml:space="preserve">
          <source>Using Configuration Files</source>
          <target state="translated">設定ファイルの使用</target>
        </trans-unit>
        <trans-unit id="5dc143959128e38d9a55d127c3233709b9ccb511" translate="yes" xml:space="preserve">
          <source>Using Different Options for Line and Block Comments</source>
          <target state="translated">行コメントとブロックコメントの異なるオプションの使用</target>
        </trans-unit>
        <trans-unit id="eeb7f893b5d295199ac44ad44dd9b3270246f3bd" translate="yes" xml:space="preserve">
          <source>Using Environment Variables</source>
          <target state="translated">環境変数の使用</target>
        </trans-unit>
        <trans-unit id="b302e76ff285b7e457c22f8d88c69b64b865b32c" translate="yes" xml:space="preserve">
          <source>Using a Shareable Config</source>
          <target state="translated">共有可能な設定を使用する</target>
        </trans-unit>
        <trans-unit id="e0c468455ec70051b77f083d9eccde45f228ea57" translate="yes" xml:space="preserve">
          <source>Using a configuration file</source>
          <target state="translated">設定ファイルの使用</target>
        </trans-unit>
        <trans-unit id="2cc5fc29ca8bb9b59b9fff0159b64a0e0aa2b748" translate="yes" xml:space="preserve">
          <source>Using a shareable configuration package</source>
          <target state="translated">共有可能な設定パッケージの使用</target>
        </trans-unit>
        <trans-unit id="619cd389a4db55eac7086b03b5cfa54636ecf9b8" translate="yes" xml:space="preserve">
          <source>Using a single &lt;code&gt;import&lt;/code&gt; statement per module will make the code clearer because you can see everything being imported from that module on one line.</source>
          <target state="translated">モジュールごとに単一の &lt;code&gt;import&lt;/code&gt; ステートメントを使用すると、そのモジュールからインポートされているすべてのものが1行で表示できるため、コードがより明確になります。</target>
        </trans-unit>
        <trans-unit id="e6fa437c6c23d5b7b45da7a2e2a1d10e28a8688b" translate="yes" xml:space="preserve">
          <source>Using an Alternate File</source>
          <target state="translated">代替ファイルの使用</target>
        </trans-unit>
        <trans-unit id="586259f4885483121f27c4e9aa07069bd6c9cda2" translate="yes" xml:space="preserve">
          <source>Using eslintIgnore in package.json</source>
          <target state="translated">package.json で eslintIgnore を使う</target>
        </trans-unit>
        <trans-unit id="1b207cb89b9319ffb89553d14d6cf162c46b7f56" translate="yes" xml:space="preserve">
          <source>Using message placeholders</source>
          <target state="translated">メッセージプレースホルダの使用</target>
        </trans-unit>
        <trans-unit id="3e16a605232a4a1c356a288a74f6943a34b8ae6f" translate="yes" xml:space="preserve">
          <source>Using selectors in the &lt;code&gt;no-restricted-syntax&lt;/code&gt; rule can give you a lot of control over problematic patterns in your codebase, without needing to write custom rules to detect each pattern.</source>
          <target state="translated">&lt;code&gt;no-restricted-syntax&lt;/code&gt; ルールでセレクターを使用すると、各パターンを検出するカスタムルールを記述する必要なく、コードベースの問題のあるパターンを大幅に制御できます。</target>
        </trans-unit>
        <trans-unit id="accb6ab3309644f22a59e564f296b91db2b9ed86" translate="yes" xml:space="preserve">
          <source>Using stdin</source>
          <target state="translated">標準入力を使用する</target>
        </trans-unit>
        <trans-unit id="8ce680923ed405f0b52194a8fd5d25c5e6caea79" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option means that this rule will report any comments which start with a lowercase letter. This is the default configuration for this rule.</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; オプションを使用すると、このルールは小文字で始まるコメントを報告します。これは、このルールのデフォルト構成です。</target>
        </trans-unit>
        <trans-unit id="96d576d0cd2c820dcea748257a03f18a8f838d88" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option means that this rule will report any comments which start with an uppercase letter.</source>
          <target state="translated">&lt;code&gt;&quot;never&quot;&lt;/code&gt; オプションを使用すると、このルールは大文字で始まるコメントを報告します。</target>
        </trans-unit>
        <trans-unit id="d2998154fd0b30ddea4d0f0a30a540b6234a2665" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;void&lt;/code&gt; operator to generate the value of &lt;code&gt;undefined&lt;/code&gt; if necessary.</source>
          <target state="translated">必要に応じて、 &lt;code&gt;void&lt;/code&gt; 演算子を使用して &lt;code&gt;undefined&lt;/code&gt; の値を生成します。</target>
        </trans-unit>
        <trans-unit id="44db3e7e42ba5ebb8bf1cf0e5de90b5c7351d5d0" translate="yes" xml:space="preserve">
          <source>Using the configuration from a plugin</source>
          <target state="translated">プラグインからの設定を使用する</target>
        </trans-unit>
        <trans-unit id="d8a14a71e022c4c1cc64b31add3a38d0148f7afa" translate="yes" xml:space="preserve">
          <source>Using this rule with version control systems</source>
          <target state="translated">バージョン管理システムでこのルールを使用する</target>
        </trans-unit>
        <trans-unit id="8ca2c430d89057de6cb5c35279ea3569d34d0136" translate="yes" xml:space="preserve">
          <source>Usually, the code should be refactored to create all the promises at once, then get access to the results using &lt;code&gt;Promise.all()&lt;/code&gt;. Otherwise, each successive operation will not start until the previous one has completed.</source>
          <target state="translated">通常、すべての &lt;code&gt;Promise.all()&lt;/code&gt; を一度に作成するためにコードをリファクタリングし、Promise.all（）を使用して結果にアクセスする必要があります。そうでない場合、前の操作が完了するまで、連続する各操作は開始されません。</target>
        </trans-unit>
        <trans-unit id="cb8af0b089c8e16de1808bbf42dbab1812ea017b" translate="yes" xml:space="preserve">
          <source>Valid Code</source>
          <target state="translated">有効なコード</target>
        </trans-unit>
        <trans-unit id="532e17316f9909fba79f94428471eb6888d1b255" translate="yes" xml:space="preserve">
          <source>Variable Declarations</source>
          <target state="translated">変数宣言</target>
        </trans-unit>
        <trans-unit id="6d5e51d3d0dfe28a6c4746735fcea731cc9e3349" translate="yes" xml:space="preserve">
          <source>Variable Shadowing</source>
          <target state="translated">可変シャドウイング</target>
        </trans-unit>
        <trans-unit id="f34af863a0250ddb43caba08acbf9b7f07738053" translate="yes" xml:space="preserve">
          <source>Variable Sorting (sort-vars)</source>
          <target state="translated">変数ソート (sort-vars)</target>
        </trans-unit>
        <trans-unit id="2bd0e8a368c0c0738f15dfd8df4c9fa0b30a21c3" translate="yes" xml:space="preserve">
          <source>Variable interface</source>
          <target state="translated">可変インターフェイス</target>
        </trans-unit>
        <trans-unit id="6d8103227eb16ff6b41d4c197ddfa518ef072c15" translate="yes" xml:space="preserve">
          <source>Variable names should be formatted in camel case with the first letter being lowercase and the first letter of each subsequent word being uppercase. The first word of a variable name should be a noun (not a verb) to avoid confusion with functions. Do not use underscore for variable names.</source>
          <target state="translated">変数名はキャメルケースで、最初の文字を小文字にして、それ以降の単語の最初の文字を大文字にします。関数との混同を避けるため、変数名の最初の単語は動詞ではなく名詞にしてください。変数名にはアンダースコアを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="3944885d1531d2b22b8820788659f91568e08837" translate="yes" xml:space="preserve">
          <source>VariableDeclarator</source>
          <target state="translated">VariableDeclarator</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="85379bf6ac3527cdbeb09a4791aad3097a8d3c57" translate="yes" xml:space="preserve">
          <source>Variables can be declared at any point in JavaScript code using &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt;. There are many styles and preferences related to the declaration of variables, and one of those is deciding on how many variable declarations should be allowed in a single function.</source>
          <target state="translated">変数は、 &lt;code&gt;var&lt;/code&gt; 、 &lt;code&gt;let&lt;/code&gt; 、または &lt;code&gt;const&lt;/code&gt; を使用してJavaScriptコードの任意の時点で宣言できます。変数の宣言に関連する多くのスタイルと設定があり、それらの1つは、1つの関数で許可される変数宣言の数を決定しています。</target>
        </trans-unit>
        <trans-unit id="b737513f2b96c7e55dfed83a96a4d58ff87a2661" translate="yes" xml:space="preserve">
          <source>Variables defined in &lt;code&gt;/* global */&lt;/code&gt; comments.</source>
          <target state="translated">&lt;code&gt;/* global */&lt;/code&gt; コメントで定義された変数。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
