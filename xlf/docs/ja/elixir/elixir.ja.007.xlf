<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="1ac07c5c5d769c317e4ee149161ad79dd547886a" translate="yes" xml:space="preserve">
          <source>Function specifications</source>
          <target state="translated">機能仕様</target>
        </trans-unit>
        <trans-unit id="b1d1d233c6e9151086e11b68520f3c88ddfbfd71" translate="yes" xml:space="preserve">
          <source>FunctionClauseError</source>
          <target state="translated">FunctionClauseError</target>
        </trans-unit>
        <trans-unit id="59d46903ce38ffaa562b785d06c23f1fe1bd7e8e" translate="yes" xml:space="preserve">
          <source>FunctionClauseError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">FunctionClauseError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="92264e6f77844330da044c87077edfa8088c62f8" translate="yes" xml:space="preserve">
          <source>Functionality to capture IO for testing.</source>
          <target state="translated">テスト用のIOをキャプチャする機能</target>
        </trans-unit>
        <trans-unit id="cd8664fa33698f4f620c47642dfd3e7413d9d1ec" translate="yes" xml:space="preserve">
          <source>Functionality to capture logs for testing.</source>
          <target state="translated">テスト用のログをキャプチャする機能</target>
        </trans-unit>
        <trans-unit id="981f29fc45464a2117ff8d90e767ed44d91b4bb6" translate="yes" xml:space="preserve">
          <source>Functionality to render ANSI escape sequences.</source>
          <target state="translated">ANSIエスケープシーケンスをレンダリングする機能</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="e331cf0e4275fe631ca417060a2f8f10e15a256d" translate="yes" xml:space="preserve">
          <source>Functions as keys</source>
          <target state="translated">キーとしての機能</target>
        </trans-unit>
        <trans-unit id="89eb4f89d38ca8beda2b5a23ae39ddc79a7e20dc" translate="yes" xml:space="preserve">
          <source>Functions defined with &lt;a href=&quot;#defdelegate/2&quot;&gt;&lt;code&gt;defdelegate/2&lt;/code&gt;&lt;/a&gt; are public and can be invoked from outside the module they're defined in, as if they were defined using &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt;. Therefore, &lt;a href=&quot;#defdelegate/2&quot;&gt;&lt;code&gt;defdelegate/2&lt;/code&gt;&lt;/a&gt; is about extending the current module's public API. If what you want is to invoke a function defined in another module without using its full module name, then use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#alias/2&quot;&gt;&lt;code&gt;alias/2&lt;/code&gt;&lt;/a&gt; to shorten the module name or use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#import/2&quot;&gt;&lt;code&gt;import/2&lt;/code&gt;&lt;/a&gt; to be able to invoke the function without the module name altogether.</source>
          <target state="translated">&lt;a href=&quot;#defdelegate/2&quot;&gt; &lt;code&gt;defdelegate/2&lt;/code&gt; で&lt;/a&gt;定義された関数はパブリックであり、&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;を使用して定義されたかのように、定義されたモジュールの外部から呼び出すことができます。したがって、&lt;a href=&quot;#defdelegate/2&quot;&gt; &lt;code&gt;defdelegate/2&lt;/code&gt; &lt;/a&gt;は、現在のモジュールのパブリックAPIを拡張することを目的としています。完全なモジュール名を使用せずに別のモジュールで定義された関数を呼び出す場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#alias/2&quot;&gt; &lt;code&gt;alias/2&lt;/code&gt; &lt;/a&gt;を使用してモジュール名を短縮するか、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#import/2&quot;&gt; &lt;code&gt;import/2&lt;/code&gt; &lt;/a&gt;を使用してモジュール名をまったく使用せずに関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5b08dda4461297f97d2d935f4b6c312c57879282" translate="yes" xml:space="preserve">
          <source>Functions defined with &lt;a href=&quot;#defdelegate/2&quot;&gt;&lt;code&gt;defdelegate/2&lt;/code&gt;&lt;/a&gt; are public and can be invoked from outside the module they're defined in, as if they were defined using &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt;. Therefore, &lt;a href=&quot;#defdelegate/2&quot;&gt;&lt;code&gt;defdelegate/2&lt;/code&gt;&lt;/a&gt; is about extending the current module's public API. If what you want is to invoke a function defined in another module without using its full module name, then use &lt;a href=&quot;kernel.specialforms#alias/2&quot;&gt;&lt;code&gt;alias/2&lt;/code&gt;&lt;/a&gt; to shorten the module name or use &lt;a href=&quot;kernel.specialforms#import/2&quot;&gt;&lt;code&gt;import/2&lt;/code&gt;&lt;/a&gt; to be able to invoke the function without the module name altogether.</source>
          <target state="translated">&lt;a href=&quot;#defdelegate/2&quot;&gt; &lt;code&gt;defdelegate/2&lt;/code&gt; で&lt;/a&gt;定義された関数はパブリックであり、&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;を使用して定義されているかのように、それらが定義されているモジュールの外部から呼び出すことができます。したがって、&lt;a href=&quot;#defdelegate/2&quot;&gt; &lt;code&gt;defdelegate/2&lt;/code&gt; &lt;/a&gt;は、現在のモジュールのパブリックAPIを拡張することです。完全なモジュール名を使用せずに別のモジュールで定義された関数を呼び出す場合は、&lt;a href=&quot;kernel.specialforms#alias/2&quot;&gt; &lt;code&gt;alias/2&lt;/code&gt; &lt;/a&gt;を使用してモジュール名を短くするか、&lt;a href=&quot;kernel.specialforms#import/2&quot;&gt; &lt;code&gt;import/2&lt;/code&gt; &lt;/a&gt;を使用してモジュール名なしで関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="5339f05867719070151c5f9212ec9691343c3dfd" translate="yes" xml:space="preserve">
          <source>Functions for creating and composing streams.</source>
          <target state="translated">ストリームを作成・合成するための関数。</target>
        </trans-unit>
        <trans-unit id="a92a126ef94a3c0fc6addeadb2500f9ae863a5be" translate="yes" xml:space="preserve">
          <source>Functions for interacting with the external world through ports.</source>
          <target state="translated">ポートを介して外部の世界と対話するための関数。</target>
        </trans-unit>
        <trans-unit id="595e959d0a21e0d09abbd2c4fba3e39601ca613b" translate="yes" xml:space="preserve">
          <source>Functions for parsing and matching versions against requirements.</source>
          <target state="translated">要件に対するバージョンの解析やマッチングを行う関数です。</target>
        </trans-unit>
        <trans-unit id="3f33806c59ce33f63b6d6eac23d2c5c308d0f02e" translate="yes" xml:space="preserve">
          <source>Functions for parsing command line arguments.</source>
          <target state="translated">コマンドライン引数を解析するための関数です。</target>
        </trans-unit>
        <trans-unit id="be344dfaebcc716a7113914fb8d65d65aad9cdfb" translate="yes" xml:space="preserve">
          <source>Functions for working with floating-point numbers.</source>
          <target state="translated">浮動小数点数を扱うための関数.</target>
        </trans-unit>
        <trans-unit id="4581129055260f253b0f9a10ce8940c3ae082007" translate="yes" xml:space="preserve">
          <source>Functions for working with integers.</source>
          <target state="translated">整数を扱うための関数。</target>
        </trans-unit>
        <trans-unit id="ac038c429b16ac4da6a1c54de055fde121e86832" translate="yes" xml:space="preserve">
          <source>Functions for working with tuples.</source>
          <target state="translated">タプルを扱うための関数。</target>
        </trans-unit>
        <trans-unit id="b012c35607b405f40246b484e5594c562e5fd7b1" translate="yes" xml:space="preserve">
          <source>Functions handling input/output (IO).</source>
          <target state="translated">入出力(IO)を扱う関数。</target>
        </trans-unit>
        <trans-unit id="120d9dcde7287a0528aec2f3d5f7e2e3f5cd376a" translate="yes" xml:space="preserve">
          <source>Functions in Elixir are identified by both their name and their arity. The arity of a function describes the number of arguments that the function takes. From this point on we will use both the function name and its arity to describe functions throughout the documentation. &lt;code&gt;round/1&lt;/code&gt; identifies the function which is named &lt;code&gt;round&lt;/code&gt; and takes &lt;code&gt;1&lt;/code&gt; argument, whereas &lt;code&gt;round/2&lt;/code&gt; identifies a different (nonexistent) function with the same name but with an arity of &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">Elixirの関数は、名前とアリティの両方で識別されます。関数のアリティは、関数が取る引数の数を表します。この時点から、関数名とそのアリティの両方を使用して、ドキュメント全体で関数を説明します。 &lt;code&gt;round/1&lt;/code&gt; は、 &lt;code&gt;round&lt;/code&gt; という名前で &lt;code&gt;1&lt;/code&gt; つの引数を取る関数を識別します。一方、 &lt;code&gt;round/2&lt;/code&gt; は、名前が同じでアリティが &lt;code&gt;2&lt;/code&gt; の異なる（存在しない）関数を識別します。</target>
        </trans-unit>
        <trans-unit id="25a36a956214e3716b0faa690578d88a7316d2d1" translate="yes" xml:space="preserve">
          <source>Functions may be called when defining a module attribute, e.g.</source>
          <target state="translated">モジュール属性を定義する際に関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="18780274d7513230569a4133845253288a279bc6" translate="yes" xml:space="preserve">
          <source>Functions related to VM nodes.</source>
          <target state="translated">VMノードに関連する機能。</target>
        </trans-unit>
        <trans-unit id="2ecc259041cce0328acd0d9abf2a78e6d378235f" translate="yes" xml:space="preserve">
          <source>Functions that return a boolean are named with a trailing question mark.</source>
          <target state="translated">ブール値を返す関数は、最後にクエスチョンマークを付けて名前を付けます。</target>
        </trans-unit>
        <trans-unit id="3abac8dc3938de4ae338c2914b66903b6d6216cf" translate="yes" xml:space="preserve">
          <source>Functions that work on (linked) lists.</source>
          <target state="translated">(リンクされた)リストで動作する関数。</target>
        </trans-unit>
        <trans-unit id="d6d5cb54b94547b27cdb53ea8f156b69b0e891a7" translate="yes" xml:space="preserve">
          <source>Functions that work on sets.</source>
          <target state="translated">セットで動作する関数。</target>
        </trans-unit>
        <trans-unit id="c2171b2fcb9b756c41905c9675c92ab582aa67f4" translate="yes" xml:space="preserve">
          <source>Functions to format throw/catch/exit and exceptions.</source>
          <target state="translated">throw/catch/exitや例外をフォーマットする関数。</target>
        </trans-unit>
        <trans-unit id="ec2268c82bc8b73813924087eddf93b3d9fbf05d" translate="yes" xml:space="preserve">
          <source>Further information</source>
          <target state="translated">その他の情報</target>
        </trans-unit>
        <trans-unit id="5d853e3f857a73da9a233be532bd545c49917d50" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;a href=&quot;#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; may fail with one of the POSIX reasons detailed below:</source>
          <target state="translated">さらに、&lt;a href=&quot;#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;は、以下に詳述するPOSIXの理由の1つで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="287db3c111ae0a4e9243da5209d0af176dba1c2f" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; allows messages sent by Erlang to be translated into an Elixir format via translators. Translators can be added at any time with the &lt;a href=&quot;#add_translator/1&quot;&gt;&lt;code&gt;add_translator/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#remove_translator/1&quot;&gt;&lt;code&gt;remove_translator/1&lt;/code&gt;&lt;/a&gt; APIs. Check &lt;a href=&quot;https://hexdocs.pm/logger/Logger.Translator.html&quot;&gt;&lt;code&gt;Logger.Translator&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">さらに、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; を&lt;/a&gt;使用すると、Erlangから送信されたメッセージをトランスレータを介してElixir形式に変換できます。翻訳者は、&lt;a href=&quot;#add_translator/1&quot;&gt; &lt;code&gt;add_translator/1&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#remove_translator/1&quot;&gt; &lt;code&gt;remove_translator/1&lt;/code&gt; &lt;/a&gt;1APIを使用していつでも追加できます。詳細&lt;a href=&quot;https://hexdocs.pm/logger/Logger.Translator.html&quot;&gt; &lt;code&gt;Logger.Translator&lt;/code&gt; &lt;/a&gt;、Logger.Translatorを確認してください。</target>
        </trans-unit>
        <trans-unit id="6d6208ba2074c10f21b8ca78cfba95b5238a4367" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; allows messages sent by Erlang to be translated into an Elixir format via translators. Translators can be added at any time with the &lt;a href=&quot;#add_translator/1&quot;&gt;&lt;code&gt;add_translator/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#remove_translator/1&quot;&gt;&lt;code&gt;remove_translator/1&lt;/code&gt;&lt;/a&gt; APIs. Check &lt;a href=&quot;logger.translator&quot;&gt;&lt;code&gt;Logger.Translator&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">さらに、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;は、Erlangから送信されたメッセージを、トランスレーターを介してElixir形式に変換できます。トランスレーターは、&lt;a href=&quot;#add_translator/1&quot;&gt; &lt;code&gt;add_translator/1&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#remove_translator/1&quot;&gt; &lt;code&gt;remove_translator/1&lt;/code&gt; &lt;/a&gt; APIを使用していつでも追加できます。詳細&lt;a href=&quot;logger.translator&quot;&gt; &lt;code&gt;Logger.Translator&lt;/code&gt; &lt;/a&gt;、Logger.Translatorを確認してください。</target>
        </trans-unit>
        <trans-unit id="f484c5ceae64ae91667e53e8fabec77fcc0eab91" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;a href=&quot;system#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; may fail with one of the POSIX reasons detailed below:</source>
          <target state="translated">さらに、&lt;a href=&quot;system#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;は、以下に詳述するPOSIXの理由の1つで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="186edc3e57a9d838cd0ada8549562af323cf60a5" translate="yes" xml:space="preserve">
          <source>Furthermore, a &lt;code&gt;:suspend&lt;/code&gt; call must always be followed by another call, eventually halting or continuing until the end.</source>
          <target state="translated">さらに、 &lt;code&gt;:suspend&lt;/code&gt; 呼び出しの後には必ず別の呼び出しが続き、最終的には停止するか、最後まで続行する必要があります。</target>
        </trans-unit>
        <trans-unit id="c260bcd5ae1bdde9983d663eb92d5fcd82188b68" translate="yes" xml:space="preserve">
          <source>Furthermore, all applications listed in the &lt;code&gt;:applications&lt;/code&gt; key must be explicitly started before this application is. If not, &lt;code&gt;{:error, {:not_started, app}}&lt;/code&gt; is returned, where &lt;code&gt;app&lt;/code&gt; is the name of the missing application.</source>
          <target state="translated">さらに、このアプリケーションを起動する前に、 &lt;code&gt;:applications&lt;/code&gt; キーにリストされているすべてのアプリケーションを明示的に起動する必要があります。そうでない場合、 &lt;code&gt;{:error, {:not_started, app}}&lt;/code&gt; が返されます。ここで、 &lt;code&gt;app&lt;/code&gt; は不足しているアプリケーションの名前です。</target>
        </trans-unit>
        <trans-unit id="26e72ab288d2e99c66734f21d67d33280ac839df" translate="yes" xml:space="preserve">
          <source>Furthermore, backends can be configured via the &lt;a href=&quot;#configure_backend/2&quot;&gt;&lt;code&gt;configure_backend/2&lt;/code&gt;&lt;/a&gt; function which requires event handlers to handle calls of the following format:</source>
          <target state="translated">さらに、バックエンドは&lt;a href=&quot;#configure_backend/2&quot;&gt; &lt;code&gt;configure_backend/2&lt;/code&gt; &lt;/a&gt;関数を介して構成できます。これには、次の形式の呼び出しを処理するためのイベントハンドラーが必要です。</target>
        </trans-unit>
        <trans-unit id="03045b903b2a4efd2fad95378e0e7416cbdc8700" translate="yes" xml:space="preserve">
          <source>Furthermore, because the state returned by &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; can be written to text-based config files, it should be restricted only to simple data types, such as integers, strings, atoms, tuples, maps, and lists. Entries such as PIDs, references, and functions cannot be serialized.</source>
          <target state="translated">さらに、&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;によって返される状態はテキストベースの構成ファイルに書き込むことができるため、整数、文字列、アトム、タプル、マップ、リストなどの単純なデータ型のみに制限する必要があります。PID、参照、関数などのエントリはシリアル化できません。</target>
        </trans-unit>
        <trans-unit id="e12a025bc34e52444d91865482fafd1b4bcb1476" translate="yes" xml:space="preserve">
          <source>Furthermore, if there is a failure when dispatching, due to a bad registration, dispatching will always fail and the registered process will not be notified. Therefore let's make sure we at least wrap and report those errors:</source>
          <target state="translated">さらに、登録不良などで派遣時に失敗があった場合、派遣は必ず失敗し、登録されたプロセスには通知されません。そのため、せめてそれらのエラーをラップして報告するようにしましょう。</target>
        </trans-unit>
        <trans-unit id="3528255d6bac578fd573ffc86dde48159bf06389" translate="yes" xml:space="preserve">
          <source>Furthermore, metadata can be set per process with &lt;a href=&quot;#metadata/1&quot;&gt;&lt;code&gt;Logger.metadata/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さらに、メタデータは&lt;a href=&quot;#metadata/1&quot;&gt; &lt;code&gt;Logger.metadata/1&lt;/code&gt; &lt;/a&gt;を使用してプロセスごとに設定できます。</target>
        </trans-unit>
        <trans-unit id="42529d32de08bd15f27eb4312be9cc48b68c13b2" translate="yes" xml:space="preserve">
          <source>Furthermore, they are composable because we can pipe many stream operations:</source>
          <target state="translated">さらに、多くのストリーム操作をパイプすることができるため、コンポーザブルである。</target>
        </trans-unit>
        <trans-unit id="3381a6c76f92b142faec11ca6cffe41f63f7d1f2" translate="yes" xml:space="preserve">
          <source>Furthermore, this module also presents the concept of grapheme cluster (from now on referenced as graphemes). Graphemes can consist of multiple code points that may be perceived as a single character by readers. For example, &quot;&amp;eacute;&quot; can be represented either as a single &quot;e with acute&quot; code point or as the letter &quot;e&quot; followed by a &quot;combining acute accent&quot; (two code points):</source>
          <target state="translated">さらに、このモジュールは、書記素クラスター（今後は書記素と呼ばれます）の概念も示します。書記素は、読者が単一の文字として認識する複数のコードポイントで構成できます。たとえば、「&amp;eacute;」は単一の「eとアキュート」コードポイント、または文字「e」とその後に続く「結合アキュートアクセント」（2つのコードポイント）のいずれかとして表すことができます。</target>
        </trans-unit>
        <trans-unit id="e25c00dc3897c6883dc4fe0f27096add3cc899e4" translate="yes" xml:space="preserve">
          <source>Furthermore, while &lt;code&gt;vm.args&lt;/code&gt; is static, you can use &lt;code&gt;env.sh&lt;/code&gt; and &lt;code&gt;env.bat&lt;/code&gt; to dynamically set VM options. For example, if you want to make sure the Erlang Distribution listens only on a given port known at runtime, you can set the following:</source>
          <target state="translated">さらに、 &lt;code&gt;vm.args&lt;/code&gt; は静的ですが、 &lt;code&gt;env.sh&lt;/code&gt; および &lt;code&gt;env.bat&lt;/code&gt; を使用してVMオプションを動的に設定できます。たとえば、アーラン分布が実行時に認識されている特定のポートでのみリッスンするようにする場合は、次のように設定できます。</target>
        </trans-unit>
        <trans-unit id="5c727a56b05e846df29f24d1daf2419df88964fa" translate="yes" xml:space="preserve">
          <source>Furthermore, with &lt;code&gt;@impl&lt;/code&gt; you can also make sure that you are implementing the &lt;strong&gt;correct&lt;/strong&gt; callbacks from the given behaviour in an explicit manner. For example, the following parser implements both &lt;code&gt;parse&lt;/code&gt; and &lt;code&gt;extensions&lt;/code&gt;, however thanks to a typo, &lt;code&gt;BADParser&lt;/code&gt; is implementing &lt;code&gt;parse/0&lt;/code&gt; instead of &lt;code&gt;parse/1&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;@impl&lt;/code&gt; を使用すると、特定の動作からの&lt;strong&gt;正しい&lt;/strong&gt;コールバックを明示的に実装していることを確認することもできます。例えば、以下のパーサ実装の両方の &lt;code&gt;parse&lt;/code&gt; 及び &lt;code&gt;extensions&lt;/code&gt; 、しかし、入力ミスのおかげで、 &lt;code&gt;BADParser&lt;/code&gt; が実装されている &lt;code&gt;parse/0&lt;/code&gt; の代わりに &lt;code&gt;parse/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae57bdba0f435d58b5575a45dc3b5fb6eb566cf8" translate="yes" xml:space="preserve">
          <source>Furthermore, you can see that ExUnit prints a dot for each successful test and automatically randomizes tests too. Let&amp;rsquo;s make the test fail on purpose and see what happens.</source>
          <target state="translated">さらに、ExUnitが成功したテストごとにドットを印刷し、テストも自動的にランダム化することがわかります。わざとテストを失敗させ、何が起こるか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="26e2a4f823a98eca42ddcd53fd08f4fc5631d231" translate="yes" xml:space="preserve">
          <source>GenEvent</source>
          <target state="translated">GenEvent</target>
        </trans-unit>
        <trans-unit id="52f5451d0a005c032b5bd9e0f39e525431bee3e4" translate="yes" xml:space="preserve">
          <source>GenEvent &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">GenEventの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f1f7460d4b0df6c99ec51f3b8a78fab0ab241364" translate="yes" xml:space="preserve">
          <source>GenServer</source>
          <target state="translated">GenServer</target>
        </trans-unit>
        <trans-unit id="c41a8053324929c4122055404c6f497f28026d3e" translate="yes" xml:space="preserve">
          <source>GenServer - Elixir's Getting Started Guide</source>
          <target state="translated">GenServer-Elixirの入門ガイド</target>
        </trans-unit>
        <trans-unit id="eca82733cdfcb3649b72cda06a30a922552032d8" translate="yes" xml:space="preserve">
          <source>GenServer &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">GenServerの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6b938fbce44ec15ef7cf28460d3d3a0b7b6e45c7" translate="yes" xml:space="preserve">
          <source>GenServer callbacks</source>
          <target state="translated">GenServer コールバック</target>
        </trans-unit>
        <trans-unit id="60a02fde0f842f29309800909cd00e720e3567d0" translate="yes" xml:space="preserve">
          <source>GenServers, as &lt;a href=&quot;http://erlang.org/doc/design_principles/spec_proc.html&quot;&gt;special processes&lt;/a&gt;, can be debugged using the &lt;a href=&quot;http://www.erlang.org/doc/man/sys.html&quot;&gt;&lt;code&gt;:sys&lt;/code&gt; module&lt;/a&gt;. Through various hooks, this module allows developers to introspect the state of the process and trace system events that happen during its execution, such as received messages, sent replies and state changes.</source>
          <target state="translated">GenServerは、&lt;a href=&quot;http://erlang.org/doc/design_principles/spec_proc.html&quot;&gt;特別なプロセス&lt;/a&gt;として、&lt;a href=&quot;http://www.erlang.org/doc/man/sys.html&quot;&gt; &lt;code&gt;:sys&lt;/code&gt; モジュール&lt;/a&gt;を使用してデバッグできます。このモジュールを使用すると、開発者はさまざまなフックを使用して、プロセスの状態をイントロスペクトし、受信メッセージ、送信された応答、状態変化など、実行中に発生するシステムイベントを追跡できます。</target>
        </trans-unit>
        <trans-unit id="8e2323fdcd5a3410a0abfe44a2176b41a6905683" translate="yes" xml:space="preserve">
          <source>GenStage</source>
          <target state="translated">GenStage</target>
        </trans-unit>
        <trans-unit id="92fde6e5cdcf695869dd7ece8642757211b43eff" translate="yes" xml:space="preserve">
          <source>General operators</source>
          <target state="translated">一般的なオペレータ</target>
        </trans-unit>
        <trans-unit id="26811be9b4758ef85d12185318d245ac23863706" translate="yes" xml:space="preserve">
          <source>Generally speaking, filenames follow the &lt;code&gt;snake_case&lt;/code&gt; convention of the module they define. For example, &lt;code&gt;MyApp&lt;/code&gt; should be defined inside the &lt;code&gt;my_app.ex&lt;/code&gt; file. However, this is only a convention. At the end of the day, any filename can be used as they do not affect the compiled code in any way.</source>
          <target state="translated">一般的に、ファイル名は、定義するモジュールの &lt;code&gt;snake_case&lt;/code&gt; 規則に従います。たとえば、 &lt;code&gt;MyApp&lt;/code&gt; は &lt;code&gt;my_app.ex&lt;/code&gt; ファイル内で定義する必要があります。ただし、これは慣例にすぎません。結局のところ、コンパイルされたコードにまったく影響を与えないため、任意のファイル名を使用できます。</target>
        </trans-unit>
        <trans-unit id="c4e59b7746a9b324c29c497d15613e18d32b2ec0" translate="yes" xml:space="preserve">
          <source>Generally speaking, the VM provides three time measurements:</source>
          <target state="translated">一般的に、VMは3つの時間計測を提供します。</target>
        </trans-unit>
        <trans-unit id="ca8af8a9659e59f74154d217723284164924d905" translate="yes" xml:space="preserve">
          <source>Generally speaking, the following files are available for customizing and configuring the running system:</source>
          <target state="translated">一般的に、実行システムのカスタマイズや設定には以下のファイルが利用できます。</target>
        </trans-unit>
        <trans-unit id="3853e87a8cfcd1a2826b60877e31dac6ddc354ee" translate="yes" xml:space="preserve">
          <source>Generally speaking, the following module:</source>
          <target state="translated">一般的には、以下のようなモジュールがあります。</target>
        </trans-unit>
        <trans-unit id="061ef8a9ec07ec601a5d20eb32a7f1c44a8e42be" translate="yes" xml:space="preserve">
          <source>Generates AST nodes for a given number of required argument variables using &lt;a href=&quot;#var/2&quot;&gt;&lt;code&gt;Macro.var/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#var/2&quot;&gt; &lt;code&gt;Macro.var/2&lt;/code&gt; &lt;/a&gt;を使用して、指定された数の必要な引数変数のASTノードを生成します。</target>
        </trans-unit>
        <trans-unit id="bc78aa7ca2c1bb33572b17a7f6a38317ada6e607" translate="yes" xml:space="preserve">
          <source>Generates AST nodes for a given number of required argument variables using &lt;a href=&quot;macro#var/2&quot;&gt;&lt;code&gt;Macro.var/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;macro#var/2&quot;&gt; &lt;code&gt;Macro.var/2&lt;/code&gt; &lt;/a&gt;を使用して、指定された数の必要な引数変数のASTノードを生成します。</target>
        </trans-unit>
        <trans-unit id="7914afeb7e94d7ae59d1fa355821ee7cf902a612" translate="yes" xml:space="preserve">
          <source>Generates a function definition from the file contents.</source>
          <target state="translated">ファイルの内容から関数定義を生成します。</target>
        </trans-unit>
        <trans-unit id="6f28a47721aec6c56f1e4f3f4b046459fb2d421f" translate="yes" xml:space="preserve">
          <source>Generates a function definition from the string.</source>
          <target state="translated">文字列から関数定義を生成します。</target>
        </trans-unit>
        <trans-unit id="3ed0a940ace5bee6a5a44c402162f201a0b4df48" translate="yes" xml:space="preserve">
          <source>Generates a macro suitable for use in guard expressions.</source>
          <target state="translated">ガード式での使用に適したマクロを生成します。</target>
        </trans-unit>
        <trans-unit id="f89a805aedce9f9ff7961406995dc39283b2ba6f" translate="yes" xml:space="preserve">
          <source>Generates a private macro suitable for use in guard expressions.</source>
          <target state="translated">ガード式での使用に適したプライベートマクロを生成します。</target>
        </trans-unit>
        <trans-unit id="d022a23ab156502d4cd22511016df2db248a08d8" translate="yes" xml:space="preserve">
          <source>Generates an AST node representing the variable given by the atoms &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">アトム &lt;code&gt;var&lt;/code&gt; および &lt;code&gt;context&lt;/code&gt; で指定された変数を表すASTノードを生成します。</target>
        </trans-unit>
        <trans-unit id="39399ecc6eafac75945962b0e75d0ddca1662821" translate="yes" xml:space="preserve">
          <source>Generates and returns an integer that is unique in the current runtime instance.</source>
          <target state="translated">現在のランタイムインスタンスで一意な整数を生成して返します。</target>
        </trans-unit>
        <trans-unit id="1ad2ad1cc4377f21a03bdbb978029bcfeb4b2be2" translate="yes" xml:space="preserve">
          <source>Generates sample files for releases.</source>
          <target state="translated">リリース用のサンプルファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="5539e5b1ece965094ab6defc81d9ab18e23afa6b" translate="yes" xml:space="preserve">
          <source>Generator expressions also support pattern matching on their left-hand side; all non-matching patterns are &lt;em&gt;ignored&lt;/em&gt;. Imagine that, instead of a range, we have a keyword list where the key is the atom &lt;code&gt;:good&lt;/code&gt; or &lt;code&gt;:bad&lt;/code&gt; and we only want to compute the square of the &lt;code&gt;:good&lt;/code&gt; values:</source>
          <target state="translated">ジェネレータ式は、左側でのパターンマッチングもサポートしています。一致しないすべてのパターンは&lt;em&gt;無視され&lt;/em&gt;ます。範囲の代わりに、キーがアトム &lt;code&gt;:good&lt;/code&gt; または &lt;code&gt;:bad&lt;/code&gt; であるキーワードリストがあり、 &lt;code&gt;:good&lt;/code&gt; 値の二乗のみを計算したいとします。</target>
        </trans-unit>
        <trans-unit id="191fe63ca19d74852f4f8e0438c53a7c9f2fad58" translate="yes" xml:space="preserve">
          <source>Generators and filters</source>
          <target state="translated">ジェネレータとフィルタ</target>
        </trans-unit>
        <trans-unit id="b0f6dc9f4ecd590c4554fad6675925837bd4c03b" translate="yes" xml:space="preserve">
          <source>Generators can also be used to filter as it removes any value that doesn't match the pattern on the left side of &lt;code&gt;&amp;lt;-&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&amp;lt;-&lt;/code&gt; の左側のパターンに一致しない値を削除するため、ジェネレーターを使用してフィルターをかけることもできます。</target>
        </trans-unit>
        <trans-unit id="6a24751485eed378e568d03e0c111b00b1ca2106" translate="yes" xml:space="preserve">
          <source>Generic API for dictionaries.</source>
          <target state="translated">辞書のための汎用API。</target>
        </trans-unit>
        <trans-unit id="f74ee225a82269c197985a3a933abeea994529f8" translate="yes" xml:space="preserve">
          <source>Generic API for sets.</source>
          <target state="translated">セットのための汎用API。</target>
        </trans-unit>
        <trans-unit id="342a929853c668da7bea5b8678d33654ddad6c44" translate="yes" xml:space="preserve">
          <source>Get all keys in the registry.</source>
          <target state="translated">レジストリ内のすべてのキーを取得します。</target>
        </trans-unit>
        <trans-unit id="15d4328951079f5b0c0d666980c03b21bfcda99d" translate="yes" xml:space="preserve">
          <source>Gets a &lt;code&gt;filename&lt;/code&gt; and evaluate the values using the &lt;code&gt;bindings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; を取得し、 &lt;code&gt;bindings&lt;/code&gt; を使用して値を評価します。</target>
        </trans-unit>
        <trans-unit id="e09423213d70047599b0fbcfb55a1d216ed0bceb" translate="yes" xml:space="preserve">
          <source>Gets a &lt;code&gt;filename&lt;/code&gt; and generate a quoted expression that can be evaluated by Elixir or compiled to a function.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; を取得し、Elixirで評価したり、関数にコンパイルできる引用符付きの式を生成します。</target>
        </trans-unit>
        <trans-unit id="11ce297c5b4ae23b4a6d01356ff4f29ad16e92ef" translate="yes" xml:space="preserve">
          <source>Gets a number of bytes from IO device &lt;code&gt;:stdio&lt;/code&gt;.</source>
          <target state="translated">IOデバイス &lt;code&gt;:stdio&lt;/code&gt; からバイト数を取得します。</target>
        </trans-unit>
        <trans-unit id="aef78a3cc35c0eec4a213bb06eb18783344f5a30" translate="yes" xml:space="preserve">
          <source>Gets a number of bytes from the IO &lt;code&gt;device&lt;/code&gt;.</source>
          <target state="translated">IO &lt;code&gt;device&lt;/code&gt; からバイト数を取得します。</target>
        </trans-unit>
        <trans-unit id="464c10475e938f50f88715c59eebddca575584e5" translate="yes" xml:space="preserve">
          <source>Gets a string &lt;code&gt;source&lt;/code&gt; and evaluate the values using the &lt;code&gt;bindings&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;source&lt;/code&gt; を取得し、 &lt;code&gt;bindings&lt;/code&gt; を使用して値を評価します。</target>
        </trans-unit>
        <trans-unit id="dce9c015f4c3caacfed76da20580dc567b349125" translate="yes" xml:space="preserve">
          <source>Gets a string &lt;code&gt;source&lt;/code&gt; and generate a quoted expression that can be evaluated by Elixir or compiled to a function.</source>
          <target state="translated">文字列 &lt;code&gt;source&lt;/code&gt; を取得し、Elixirで評価したり、関数にコンパイルしたりできる引用符付きの式を生成します。</target>
        </trans-unit>
        <trans-unit id="77a47a00f7c2dc7431f1fd26f1f6a07c0721fc92" translate="yes" xml:space="preserve">
          <source>Gets a value and updates a nested data structure via the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">値を取得し、指定された &lt;code&gt;path&lt;/code&gt; 介してネストされたデータ構造を更新します。</target>
        </trans-unit>
        <trans-unit id="197bee8d14aabe7ecd2c0b8cae48772622a49701" translate="yes" xml:space="preserve">
          <source>Gets a value and updates a nested structure.</source>
          <target state="translated">値を取得し、入れ子になった構造体を更新します。</target>
        </trans-unit>
        <trans-unit id="24fc43c308b364700a4a6b0c3e1ab5a6e0a34321" translate="yes" xml:space="preserve">
          <source>Gets a value from a nested structure.</source>
          <target state="translated">入れ子になった構造体から値を取得します。</target>
        </trans-unit>
        <trans-unit id="d58fdd9b7ac3d94d847bf7aa9396d3dd171627fa" translate="yes" xml:space="preserve">
          <source>Gets all compilation options from the code server.</source>
          <target state="translated">コードサーバからすべてのコンパイルオプションを取得します。</target>
        </trans-unit>
        <trans-unit id="9024c31b7473f5071a19da2642c254ca64dc5dcc" translate="yes" xml:space="preserve">
          <source>Gets all out of date dependencies, i.e. dependencies that are not available or have an invalid lock.</source>
          <target state="translated">古い依存関係、つまり利用できない依存関係や無効なロックを持つ依存関係をすべて取得します。</target>
        </trans-unit>
        <trans-unit id="234783729be10591273a98e34996adf814d0af2b" translate="yes" xml:space="preserve">
          <source>Gets all values for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; すべての値を取得します。</target>
        </trans-unit>
        <trans-unit id="337ee14d7455079870c96913a5344151625e3a44" translate="yes" xml:space="preserve">
          <source>Gets an agent value via the given anonymous function.</source>
          <target state="translated">与えられた匿名関数を介してエージェントの値を取得します。</target>
        </trans-unit>
        <trans-unit id="cc4728d1ab03bf9e6b17772b1edd930d1db3e60f" translate="yes" xml:space="preserve">
          <source>Gets an agent value via the given function.</source>
          <target state="translated">与えられた関数を介してエージェントの値を取得します。</target>
        </trans-unit>
        <trans-unit id="7ccc56cd7cf9a38cdbce42e3b62827d91b072aca" translate="yes" xml:space="preserve">
          <source>Gets and updates the agent state in one operation via the given anonymous function.</source>
          <target state="translated">与えられた匿名関数を介して、一回の操作でエージェントの状態を取得し、更新します。</target>
        </trans-unit>
        <trans-unit id="8e2c80c38d6dbae8b378d7ea7441399c6dccc722" translate="yes" xml:space="preserve">
          <source>Gets and updates the agent state in one operation via the given function.</source>
          <target state="translated">与えられた関数を介して、一回の操作でエージェントの状態を取得・更新します。</target>
        </trans-unit>
        <trans-unit id="096ecee5005ebff9401bca63004bd1e4271d321f" translate="yes" xml:space="preserve">
          <source>Gets and updates the given key in a &lt;code&gt;container&lt;/code&gt; (a map, a keyword list, a struct that implements the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; behaviour).</source>
          <target state="translated">&lt;code&gt;container&lt;/code&gt; （マップ、キーワードリスト、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;動作を実装する構造体）内の指定されたキーを取得および更新します。</target>
        </trans-unit>
        <trans-unit id="3045c9e659f40b430ef7ec7c9aeaf689166b9794" translate="yes" xml:space="preserve">
          <source>Gets logging level for given module.</source>
          <target state="translated">指定されたモジュールのログレベルを取得します。</target>
        </trans-unit>
        <trans-unit id="87f10d7ccf1593e9cf40f6046fb73ed64260d10f" translate="yes" xml:space="preserve">
          <source>Gets preferred CLI environment for the task.</source>
          <target state="translated">タスクに適したCLI環境を取得します。</target>
        </trans-unit>
        <trans-unit id="7ae776c4b4f195b1f36b2be173094733049a81b3" translate="yes" xml:space="preserve">
          <source>Gets the application for the given module.</source>
          <target state="translated">指定したモジュールのアプリケーションを取得します。</target>
        </trans-unit>
        <trans-unit id="a3186207a243a3a8619e9edb98a5c2ef194e1cbc" translate="yes" xml:space="preserve">
          <source>Gets the compilation options from the code server.</source>
          <target state="translated">コードサーバからコンパイルオプションを取得します。</target>
        </trans-unit>
        <trans-unit id="224e4a732cfad5d058a4b2c327797e2a8a3c70d9" translate="yes" xml:space="preserve">
          <source>Gets the current time zone database.</source>
          <target state="translated">現在のタイムゾーンデータベースを取得します。</target>
        </trans-unit>
        <trans-unit id="1f02096a4a7d41ef362ad56dd8a049be60b3048f" translate="yes" xml:space="preserve">
          <source>Gets the current working directory.</source>
          <target state="translated">現在の作業ディレクトリを取得します。</target>
        </trans-unit>
        <trans-unit id="8890fe17865bc33bcf4596b3f99ac374608009ec" translate="yes" xml:space="preserve">
          <source>Gets the directory for app.</source>
          <target state="translated">アプリのディレクトリを取得します。</target>
        </trans-unit>
        <trans-unit id="a0d384aa0e95a00ba787ac060a94eb0ed4d124ec" translate="yes" xml:space="preserve">
          <source>Gets the element at the zero-based &lt;code&gt;index&lt;/code&gt; in &lt;code&gt;tuple&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tuple&lt;/code&gt; のゼロから始まる &lt;code&gt;index&lt;/code&gt; にある要素を取得します。</target>
        </trans-unit>
        <trans-unit id="ff598d3e96b472f599f3428af98b3592d274ed04" translate="yes" xml:space="preserve">
          <source>Gets the given attribute from a module.</source>
          <target state="translated">モジュールから指定された属性を取得します。</target>
        </trans-unit>
        <trans-unit id="c8c63585e58950af32a8c183dc234c637dbaf32b" translate="yes" xml:space="preserve">
          <source>Gets the list of requirements for the given task.</source>
          <target state="translated">指定したタスクの要件のリストを取得します。</target>
        </trans-unit>
        <trans-unit id="d86f7fa0e05aedae7d11fde1051d7047e16a9a64" translate="yes" xml:space="preserve">
          <source>Gets the message for an &lt;code&gt;exception&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exception&lt;/code&gt; のメッセージを取得します。</target>
        </trans-unit>
        <trans-unit id="d01b62b32cf43c3c1a84005842e75a1a8e58e56a" translate="yes" xml:space="preserve">
          <source>Gets the moduledoc for the given task &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="translated">指定されたタスク &lt;code&gt;module&lt;/code&gt; moduledocを取得します。</target>
        </trans-unit>
        <trans-unit id="b0dee9f2cb9d3796fb7a48d547b0b2fb9dd7e266" translate="yes" xml:space="preserve">
          <source>Gets the representation of any expression.</source>
          <target state="translated">任意の式の表現を取得します。</target>
        </trans-unit>
        <trans-unit id="aacf11051abfff1af3276a82387ff290a1040ef2" translate="yes" xml:space="preserve">
          <source>Gets the shortdoc for the given task &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="translated">指定されたタスク &lt;code&gt;module&lt;/code&gt; shortdocを取得します。</target>
        </trans-unit>
        <trans-unit id="985fa8a31c64d1abf929750e6b62fcffb66d5d21" translate="yes" xml:space="preserve">
          <source>Gets the value for a specific &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; の特定の &lt;code&gt;key&lt;/code&gt; 値を取得します。</target>
        </trans-unit>
        <trans-unit id="c2670bc6c3a1d135ba35e9b1dd103fad35687d05" translate="yes" xml:space="preserve">
          <source>Gets the value for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; 値を取得します。</target>
        </trans-unit>
        <trans-unit id="cd6a6dd9113df059c87999c56f37603a31759691" translate="yes" xml:space="preserve">
          <source>Gets the value for the given key in a container (a map, keyword list, or struct that implements the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; behaviour).</source>
          <target state="translated">コンテナ（マップ、キーワードリスト、または&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;動作を実装する構造体）内の指定されたキーの値を取得します。</target>
        </trans-unit>
        <trans-unit id="8bbd7b83737713a8cdf97c7e1c36926c053390c6" translate="yes" xml:space="preserve">
          <source>Gets the value from &lt;code&gt;key&lt;/code&gt; and updates it, all in one pass.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; から値を取得し、すべて1回のパスで更新します。</target>
        </trans-unit>
        <trans-unit id="fb3ccba9209e0ea1faa8f2431f64136954cd5182" translate="yes" xml:space="preserve">
          <source>Gets the value from &lt;code&gt;key&lt;/code&gt; and updates it, all in one pass. Raises if there is no &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; から値を取得して更新します。すべて1回のパスで行われます。 &lt;code&gt;key&lt;/code&gt; がない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="eb0a567720e720098dfad63e9f3f00ec9b4e381f" translate="yes" xml:space="preserve">
          <source>Gets the value from &lt;code&gt;key&lt;/code&gt; and updates it. Raises if there is no &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; から値を取得して更新します。 &lt;code&gt;key&lt;/code&gt; がない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="efe79cf11081ba631fe2c7b862ea12b5382475d7" translate="yes" xml:space="preserve">
          <source>Getting started guide</source>
          <target state="translated">スタートアップガイド</target>
        </trans-unit>
        <trans-unit id="621916a4cc49b2e7a0bda3364f0574a16aa3088a" translate="yes" xml:space="preserve">
          <source>Getting the head or the tail of an empty list throws an error:</source>
          <target state="translated">空のリストの先頭または末尾を取得するとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e8fbc4cd9319e626e1ccf7f2fcd4c822c8a5bcbe" translate="yes" xml:space="preserve">
          <source>Git options (&lt;code&gt;:git&lt;/code&gt;)</source>
          <target state="translated">Gitオプション（ &lt;code&gt;:git&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="37a8f2d730b24d981ab8fef7024613f2ad9ff494" translate="yes" xml:space="preserve">
          <source>Given a query string in the form of &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt;, this function inserts each key-value pair in the query string as one entry in the given &lt;code&gt;map&lt;/code&gt;. Keys and values in the resulting map will be binaries. Keys and values will be percent-unescaped.</source>
          <target state="translated">&lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; の形式のクエリ文字列を指定すると、この関数は、クエリ文字列の各キーと値のペアを、指定された &lt;code&gt;map&lt;/code&gt; 1つのエントリとして挿入します。結果のマップのキーと値はバイナリになります。キーと値はパーセントでエスケープされません。</target>
        </trans-unit>
        <trans-unit id="681fb9c4d5bed925cb73d7a24ad5b09e42d58e91" translate="yes" xml:space="preserve">
          <source>Given an &lt;code&gt;enumerable&lt;/code&gt;, it drops elements right before element &lt;code&gt;start_index&lt;/code&gt;, then takes &lt;code&gt;amount&lt;/code&gt; of elements, returning as many elements as possible if there are not enough elements.</source>
          <target state="translated">与えられた &lt;code&gt;enumerable&lt;/code&gt; 、それは右の要素の前に要素をドロップ &lt;code&gt;start_index&lt;/code&gt; 、その後、かかる &lt;code&gt;amount&lt;/code&gt; の十分な要素が存在しない場合は、できるだけ多くの要素として返す、要素のを。</target>
        </trans-unit>
        <trans-unit id="9abc0837abc465b4295e2cadea49184fb4cb4c6a" translate="yes" xml:space="preserve">
          <source>Given an enumerable of enumerables, concatenates the &lt;code&gt;enumerables&lt;/code&gt; into a single list.</source>
          <target state="translated">enumerableのenumerableを指定すると、 &lt;code&gt;enumerables&lt;/code&gt; を単一のリストに連結します。</target>
        </trans-unit>
        <trans-unit id="bae6dae6fe4dd518a111019522e41b9338d8da6a" translate="yes" xml:space="preserve">
          <source>Given charlists are represented as a list of integers, one can also perform prefix matches on charlists using the list concatenation operator (&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#++/2&quot;&gt;&lt;code&gt;++&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">文字リストが整数のリストとして表されている場合、リスト連結演算子（&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#++/2&quot;&gt; &lt;code&gt;++&lt;/code&gt; &lt;/a&gt;）を使用して文字リストのプレフィックス一致を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="318c3f40bcb691337e3daedb3433d603c4f8eada" translate="yes" xml:space="preserve">
          <source>Given items in an async stream are processed concurrently, doing &lt;code&gt;async_stream&lt;/code&gt; followed by &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#take/2&quot;&gt;&lt;code&gt;Enum.take/2&lt;/code&gt;&lt;/a&gt; may cause more items than requested to be processed. Let's see an example:</source>
          <target state="translated">非同期ストリーム内のアイテムが同時に処理される場合、 &lt;code&gt;async_stream&lt;/code&gt; の後に&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#take/2&quot;&gt; &lt;code&gt;Enum.take/2&lt;/code&gt; を実行&lt;/a&gt;すると、要求されたよりも多くのアイテムが処理される可能性があります。例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="6c7afd283b9c25ebdc6e3a55a4b68a33a103e346" translate="yes" xml:space="preserve">
          <source>Given ordering is not guaranteed, it is not recommended to pattern match on keyword lists either. For example, a function such as:</source>
          <target state="translated">与えられた順序が保証されているわけではないので、キーワードリストでのパターンマッチも推奨されていません。例えば、次のような関数があります。</target>
        </trans-unit>
        <trans-unit id="b078a81a2e280f99fedc2be9c6836b96581c1c0d" translate="yes" xml:space="preserve">
          <source>Given that strings are binaries, we can also pattern match on strings:</source>
          <target state="translated">文字列がバイナリであることを考えると、文字列のパターンマッチも可能です。</target>
        </trans-unit>
        <trans-unit id="f3677630682772650b101e7db35f800ba5311f07" translate="yes" xml:space="preserve">
          <source>Given the anonymous function:</source>
          <target state="translated">匿名関数を与えられた</target>
        </trans-unit>
        <trans-unit id="36db5dd9f19115507b73ab3e8430b31b4965279c" translate="yes" xml:space="preserve">
          <source>Given this function halts compilation, use it carefully. In particular, avoid using it to guess which modules are in the system. Overuse of this function can also lead to deadlocks, where two modules check at the same time if the other is compiled. This returns a specific unavailable error code, where we cannot successfully verify a module is available or not.</source>
          <target state="translated">この関数がコンパイルを停止することを考えると、慎重に使用してください。特に、どのモジュールがシステムにあるかを推測するために使うのは避けてください。また、この関数を使いすぎると、2つのモジュールが同時にもう1つのモジュールがコンパイルされているかどうかをチェックするというデッドロックにつながる可能性があります。これは、モジュールが利用可能かどうかを正常に検証できない、特定の利用不可エラーコードを返します。</target>
        </trans-unit>
        <trans-unit id="41535529b54e3895b904cb50fa535652b69f1b5f" translate="yes" xml:space="preserve">
          <source>Given this is the default calendar used by Elixir, it has one difference compared to the ISO8601 specification in that it allows a whitespace instead of &lt;code&gt;T&lt;/code&gt; as a seperator between date and times both when parsing and formatting. Strict formatting can be done by using the &lt;code&gt;to_iso8601&lt;/code&gt; found in &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これがElixirで使用されるデフォルトのカレンダーであるため、ISO8601仕様と比較すると、解析とフォーマットの両方で日付と時刻の区切り文字として &lt;code&gt;T&lt;/code&gt; の代わりに空白を使用できるという点で1つの違いがあります。厳格な書式設定は、使用して行うことができます &lt;code&gt;to_iso8601&lt;/code&gt; で見つかった&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cd1d5229cdbf0e79ed32d47a41c7e0424cb85df8" translate="yes" xml:space="preserve">
          <source>Given three vertices, find the shortest path from the first to the last.</source>
          <target state="translated">3つの頂点があるとき,最初の頂点から最後の頂点までの最短経路を求めよ.</target>
        </trans-unit>
        <trans-unit id="6e14f8c349b7ea44c21dc9a2bb0f69f3be68850a" translate="yes" xml:space="preserve">
          <source>Giving a path is useful to let Elixir know that only certain paths in a large configuration are compile time dependent.</source>
          <target state="translated">パスを与えることは、大規模な設定の中の特定のパスだけがコンパイル時に依存していることをElixirに知らせるのに便利です。</target>
        </trans-unit>
        <trans-unit id="eb698f945d96926994811a109269c63fcc2c2588" translate="yes" xml:space="preserve">
          <source>Giving an argument that does not match any of the clauses raises an error.</source>
          <target state="translated">どの条項にも一致しない議論をするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="6962fecddec56252c7eb488f5a99ecedf3c0d3ff" translate="yes" xml:space="preserve">
          <source>Glues two documents (&lt;code&gt;doc1&lt;/code&gt; and &lt;code&gt;doc2&lt;/code&gt;) inserting a &lt;a href=&quot;#flex_break/1&quot;&gt;&lt;code&gt;flex_break/1&lt;/code&gt;&lt;/a&gt; given by &lt;code&gt;break_string&lt;/code&gt; between them.</source>
          <target state="translated">2つのドキュメント（ &lt;code&gt;doc1&lt;/code&gt; と &lt;code&gt;doc2&lt;/code&gt; ）を &lt;code&gt;break_string&lt;/code&gt; 、それらの間にbreak_stringで指定された&lt;a href=&quot;#flex_break/1&quot;&gt; &lt;code&gt;flex_break/1&lt;/code&gt; を&lt;/a&gt;挿入します。</target>
        </trans-unit>
        <trans-unit id="5a76459e82605f9a2f2ab9a4295c080bd4d42cf0" translate="yes" xml:space="preserve">
          <source>Glues two documents (&lt;code&gt;doc1&lt;/code&gt; and &lt;code&gt;doc2&lt;/code&gt;) inserting the given break &lt;code&gt;break_string&lt;/code&gt; between them.</source>
          <target state="translated">2つのドキュメント（ &lt;code&gt;doc1&lt;/code&gt; および &lt;code&gt;doc2&lt;/code&gt; ）を接着し、指定されたブレーク &lt;code&gt;break_string&lt;/code&gt; をそれらの間に挿入します。</target>
        </trans-unit>
        <trans-unit id="c91ff6d61d31b9a76a19683905991f494f51c9d2" translate="yes" xml:space="preserve">
          <source>Good! Now &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; requests are all routed to the approriate node. Let&amp;rsquo;s also make sure that when a new bucket is created it ends up on the correct node. Replace the &lt;code&gt;run/1&lt;/code&gt; function in &lt;code&gt;KVServer.Command&lt;/code&gt;, the one that matches the &lt;code&gt;:create&lt;/code&gt; command, with the following:</source>
          <target state="translated">良い！これで、 &lt;code&gt;GET&lt;/code&gt; 、 &lt;code&gt;PUT&lt;/code&gt; 、および &lt;code&gt;DELETE&lt;/code&gt; 要求はすべて適切なノードにルーティングされます。また、新しいバケットが作成されたときに、それが正しいノードに配置されることを確認しましょう。 &lt;code&gt;KVServer.Command&lt;/code&gt; の &lt;code&gt;run/1&lt;/code&gt; 関数（ &lt;code&gt;:create&lt;/code&gt; コマンドに一致する関数）を次のように置き換えます。</target>
        </trans-unit>
        <trans-unit id="8bb7c805f7de70037ed1803ff9f5f16721be43e5" translate="yes" xml:space="preserve">
          <source>Graphemes can also be two characters that are interpreted as one by some languages. For example, some languages may consider &quot;ch&quot; as a single character. However, since this information depends on the locale, it is not taken into account by this module.</source>
          <target state="translated">また、いくつかの言語では、2 つの文字が 1 つの文字として解釈されることもあります。例えば、言語によっては &quot;ch &quot;を1つの文字とみなすこともあります。しかし、この情報はロケールに依存するので、このモジュールでは考慮しません。</target>
        </trans-unit>
        <trans-unit id="e786d50d22654cd173f8d3b62a2460772b2e8c56" translate="yes" xml:space="preserve">
          <source>Greater-than operator.</source>
          <target state="translated">オペレーターより大きい。</target>
        </trans-unit>
        <trans-unit id="7dae2a91a27873b3eab21af62f86fd6dd15e3eeb" translate="yes" xml:space="preserve">
          <source>Greater-than or equal to operator.</source>
          <target state="translated">演算子と同じかそれ以上。</target>
        </trans-unit>
        <trans-unit id="d6bc40a0f5a48e1cfea2b0fd464f5f6f31570bd2" translate="yes" xml:space="preserve">
          <source>Guard clauses can also be given to the match:</source>
          <target state="translated">ガード節は試合に与えることもできます。</target>
        </trans-unit>
        <trans-unit id="67de3c63a9bd94b74bfc86944368ab7bcdf6d849" translate="yes" xml:space="preserve">
          <source>Guards</source>
          <target state="translated">Guards</target>
        </trans-unit>
        <trans-unit id="142ddd2f53edae494acde2b741cff19a0327b789" translate="yes" xml:space="preserve">
          <source>Guards are a way to augment pattern matching with more complex checks. They are allowed in a predefined set of constructs where pattern matching is allowed, such as function definitions, case clauses, and others.</source>
          <target state="translated">ガードは、パターン・マッチングをより複雑なチェックで強化する方法です。これは、関数定義や大文字小文字の節など、パターン・マッチングが許可されている構造体の事前定義済みセットで許可されています。</target>
        </trans-unit>
        <trans-unit id="cd32950893cbba732683c916fdaa3f7721bfbc75" translate="yes" xml:space="preserve">
          <source>Guards are a way to augment pattern matching with more complex checks. They are allowed in a predefined set of constructs where pattern matching is allowed.</source>
          <target state="translated">ガードは、パターン・マッチングをより複雑なチェックで強化する方法です。ガードは、パターンマッチングが許可されている定義済みのコンストラクトのセットで許可されています。</target>
        </trans-unit>
        <trans-unit id="f51e7c885b3316cf13c1a89511ab0220e376f9ff" translate="yes" xml:space="preserve">
          <source>Guards can be used in patterns as well:</source>
          <target state="translated">ガードはパターンでも使用できます。</target>
        </trans-unit>
        <trans-unit id="da2c059bdbc9e50988efa18e14c41ef3278c8017" translate="yes" xml:space="preserve">
          <source>Guards can be used to restrict type variables given as arguments to the function.</source>
          <target state="translated">ガードを使用して、関数の引数として与えられる型変数を制限することができます。</target>
        </trans-unit>
        <trans-unit id="3d4e06fce5066ed597d68206744c09c068cc26cf" translate="yes" xml:space="preserve">
          <source>Guards start with the &lt;code&gt;when&lt;/code&gt; keyword, which is followed by a boolean expression (we will define the grammar of guards more formally later on).</source>
          <target state="translated">ガードは &lt;code&gt;when&lt;/code&gt; キーワードで始まり、その後にブール式が続きます（後でより正式にガードの文法を定義します）。</target>
        </trans-unit>
        <trans-unit id="00d836e676cdbf32c1fff6bdfc1dd47899a371d2" translate="yes" xml:space="preserve">
          <source>Guards start with the &lt;code&gt;when&lt;/code&gt; operator, followed by a guard expression. The clause will be executed if and only if the guard expression returns &lt;code&gt;true&lt;/code&gt;. Multiple boolean conditions can be combined with the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#and/2&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#or/2&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; operators.</source>
          <target state="translated">ガードは &lt;code&gt;when&lt;/code&gt; 演算子で始まり、その後にガード式が続きます。この句は、ガード式が &lt;code&gt;true&lt;/code&gt; を返した場合にのみ実行されます。複数のブール条件は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#and/2&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#or/2&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;演算子と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="d645d6ef806b49668fa2c86b98204a1d0cbd439f" translate="yes" xml:space="preserve">
          <source>Guide: Metaprogramming</source>
          <target state="translated">ガイド。メタプログラミング</target>
        </trans-unit>
        <trans-unit id="fc6d12560c986e5d173ff3f215b4fdc7dd78c449" translate="yes" xml:space="preserve">
          <source>Guide: Mix &amp;amp; OTP</source>
          <target state="translated">ガイド：ミックス＆OTP</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="1e562d47149e19ed5cad18f5c03b2789d427f02b" translate="yes" xml:space="preserve">
          <source>Handles assigns in quoted expressions.</source>
          <target state="translated">引用符で囲まれた式の代入を処理します。</target>
        </trans-unit>
        <trans-unit id="ddf833f3c5194a503cfbad70c99e1db7094771aa" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~C&lt;/code&gt; for charlists.</source>
          <target state="translated">ハンドル印章 &lt;code&gt;~C&lt;/code&gt; charlistsため。</target>
        </trans-unit>
        <trans-unit id="fb3ba3c1a95dbc32cd091a7bf8625e909b666103" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~D&lt;/code&gt; for dates.</source>
          <target state="translated">日付のシギル &lt;code&gt;~D&lt;/code&gt; を処理します。</target>
        </trans-unit>
        <trans-unit id="982325391ef0142622780269edf1546f73b262a3" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~N&lt;/code&gt; for naive date times.</source>
          <target state="translated">ハンドル印章 &lt;code&gt;~N&lt;/code&gt; ナイーブ日付回。</target>
        </trans-unit>
        <trans-unit id="61bcb2084c564ad8723451ec89fc1bbe6d5b39d6" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~R&lt;/code&gt; for regular expressions.</source>
          <target state="translated">正規表現のシギル &lt;code&gt;~R&lt;/code&gt; を処理します。</target>
        </trans-unit>
        <trans-unit id="ee65de02481e36f7795050fdcbac43c76b0097f0" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~S&lt;/code&gt; for strings.</source>
          <target state="translated">文字列のシギル &lt;code&gt;~S&lt;/code&gt; を処理します。</target>
        </trans-unit>
        <trans-unit id="021700491c061be385dd02126ab31483e68097c1" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~T&lt;/code&gt; for times.</source>
          <target state="translated">時々シジル &lt;code&gt;~T&lt;/code&gt; を扱います。</target>
        </trans-unit>
        <trans-unit id="2b0a2c1b8e946dd36ec07ae3f98021a22faab492" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~U&lt;/code&gt; to create a UTC &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">印章ハンドル &lt;code&gt;~U&lt;/code&gt; UTC作成するため&lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="edea9c3c145eb520a4b09a9b6e8ef37e6cb7464e" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~U&lt;/code&gt; to create a UTC &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">印章ハンドル &lt;code&gt;~U&lt;/code&gt; UTC作成するため&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f52b59decaffdf3dbd50c018dec832cff60ddfc" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~W&lt;/code&gt; for list of words.</source>
          <target state="translated">単語のリストのシギル &lt;code&gt;~W&lt;/code&gt; を処理します。</target>
        </trans-unit>
        <trans-unit id="3f9e6bb6b9375b71e2dd3e6c31781d8b7de4f2bc" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~c&lt;/code&gt; for charlists.</source>
          <target state="translated">ハンドル印章 &lt;code&gt;~c&lt;/code&gt; charlistsのために。</target>
        </trans-unit>
        <trans-unit id="e93b408b9addb240b0d8fec06f1cc6fd6483cad8" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~r&lt;/code&gt; for regular expressions.</source>
          <target state="translated">ハンドル印章 &lt;code&gt;~r&lt;/code&gt; 正規表現のために。</target>
        </trans-unit>
        <trans-unit id="5c8529f6bd35c204f46a458ef8fe33f88fe57b75" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~s&lt;/code&gt; for strings.</source>
          <target state="translated">ハンドル印章 &lt;code&gt;~s&lt;/code&gt; 文字列に。</target>
        </trans-unit>
        <trans-unit id="812d965b782f5a4cdb2aa6ca4e03193e8426a888" translate="yes" xml:space="preserve">
          <source>Handles the sigil &lt;code&gt;~w&lt;/code&gt; for list of words.</source>
          <target state="translated">印章ハンドル &lt;code&gt;~w&lt;/code&gt; 単語のリストのために。</target>
        </trans-unit>
        <trans-unit id="7849ebf167a97ce455aff4c671cafc34086c2adc" translate="yes" xml:space="preserve">
          <source>Happy coding!</source>
          <target state="translated">コーデが楽しくなる!</target>
        </trans-unit>
        <trans-unit id="e74fbc6484fa15dc5415ec3ea61b85c17ae16042" translate="yes" xml:space="preserve">
          <source>HashDict</source>
          <target state="translated">HashDict</target>
        </trans-unit>
        <trans-unit id="cac17f9bdb6febebe0052a72f2ab8a6828d20944" translate="yes" xml:space="preserve">
          <source>HashSet</source>
          <target state="translated">HashSet</target>
        </trans-unit>
        <trans-unit id="b4f9c2553efc8e434d9a14c06152b8e6c5d5f2d5" translate="yes" xml:space="preserve">
          <source>Help for all of those functions can be consulted directly from the command line using the &lt;a href=&quot;#h/1&quot;&gt;&lt;code&gt;h/1&lt;/code&gt;&lt;/a&gt; helper itself. Try:</source>
          <target state="translated">これらすべての機能のヘルプは、&lt;a href=&quot;#h/1&quot;&gt; &lt;code&gt;h/1&lt;/code&gt; &lt;/a&gt;ヘルパー自体を使用してコマンドラインから直接参照できます。試してください：</target>
        </trans-unit>
        <trans-unit id="3dc137e03814f2f8c65320b0dffc705dd74522ae" translate="yes" xml:space="preserve">
          <source>Helper functions for formatting and the formatting protocols.</source>
          <target state="translated">フォーマットとフォーマットプロトコルのためのヘルパー関数です。</target>
        </trans-unit>
        <trans-unit id="6807f0882791439924cfe88b4665c74673dc2b7c" translate="yes" xml:space="preserve">
          <source>Helper module</source>
          <target state="translated">ヘルパーモジュール</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="c42a25368aea44b1d8b6e2caeca032b5ca554730" translate="yes" xml:space="preserve">
          <source>Helpers for defining test cases.</source>
          <target state="translated">テストケースを定義するためのヘルパーです。</target>
        </trans-unit>
        <trans-unit id="d5c884b844c2ebd809f20b51b9edc72b238135da" translate="yes" xml:space="preserve">
          <source>Hence the name &quot;flex&quot;. they are more flexible when it comes to the document fitting. On the other hand, they are more expensive since each break needs to be re-evaluated.</source>
          <target state="translated">それゆえに「フレックス」という名前がついています。一方で、各休憩を再評価する必要があるので、彼らはより高価です。</target>
        </trans-unit>
        <trans-unit id="b1aef6d0ceaad34efbe32b0b7338abfa12a31756" translate="yes" xml:space="preserve">
          <source>Here are some examples of working with different types and modifiers:</source>
          <target state="translated">ここでは、さまざまなタイプと修飾子を使った作業の例を紹介します。</target>
        </trans-unit>
        <trans-unit id="42db1d3d86baee9f18579aec4c71f6475b37d168" translate="yes" xml:space="preserve">
          <source>Here are some invalid ones:</source>
          <target state="translated">以下、無効なものを紹介します。</target>
        </trans-unit>
        <trans-unit id="11442cf4a8b2c1cb2e42c80414e3bc9baaa0cb80" translate="yes" xml:space="preserve">
          <source>Here are some valid paths:</source>
          <target state="translated">ここにいくつかの有効なパスがあります。</target>
        </trans-unit>
        <trans-unit id="352db02f68b7960ade3f7f5b302deb2325291825" translate="yes" xml:space="preserve">
          <source>Here is a better implementation of our Stack module:</source>
          <target state="translated">ここでは、Stackモジュールのより良い実装を紹介します。</target>
        </trans-unit>
        <trans-unit id="d3dfbcd6177f2eeaaed92da7d1fa4ce5d577524c" translate="yes" xml:space="preserve">
          <source>Here is a rundown of the life-cycle of the test process:</source>
          <target state="translated">ここでは、試験プロセスのライフサイクルの概要をご紹介します。</target>
        </trans-unit>
        <trans-unit id="8b69e6d654ffc481049b79c6ad68ac13e993788a" translate="yes" xml:space="preserve">
          <source>Here is an example of a &lt;code&gt;.formatter.exs&lt;/code&gt; file that works as a starting point:</source>
          <target state="translated">開始点として機能する &lt;code&gt;.formatter.exs&lt;/code&gt; ファイルの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="b7fa9405686c3918f67bf3e27b8a6096e14cbe20" translate="yes" xml:space="preserve">
          <source>Here is an example of how to configure the &lt;code&gt;:console&lt;/code&gt; backend in a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">次に、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルで &lt;code&gt;:console&lt;/code&gt; バックエンドを構成する方法の例を示します。</target>
        </trans-unit>
        <trans-unit id="b3a43eba555f0c13a34172cd9439caffcb152633" translate="yes" xml:space="preserve">
          <source>Here is an example on how we mimic an echo server from the command line:</source>
          <target state="translated">ここでは、コマンドラインからエコーサーバの真似をする例を示します。</target>
        </trans-unit>
        <trans-unit id="3edae206369380098d80617af169ddbd0abfffd5" translate="yes" xml:space="preserve">
          <source>Here is an example that traverses the list dropping even numbers and multiplying odd numbers by 2:</source>
          <target state="translated">偶数を落として奇数に2を掛けてリストを横断する例を示します。</target>
        </trans-unit>
        <trans-unit id="719c74f661d33fc8656d2bb7f5d2aed1ea13f147" translate="yes" xml:space="preserve">
          <source>Here is an example where all keys match:</source>
          <target state="translated">ここでは、すべてのキーが一致する例を示します。</target>
        </trans-unit>
        <trans-unit id="050a27ec30c2a26d404808ec75322f708750e58e" translate="yes" xml:space="preserve">
          <source>Here is the full echo server implementation:</source>
          <target state="translated">ここにエコーサーバの完全な実装があります。</target>
        </trans-unit>
        <trans-unit id="6f777b3d9caee14d91c8f30553a83cea3e2dc561" translate="yes" xml:space="preserve">
          <source>Here is the updated code for the &lt;code&gt;TestCase&lt;/code&gt; module:</source>
          <target state="translated">&lt;code&gt;TestCase&lt;/code&gt; モジュールの更新されたコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a22b63cc9c9e1b1cf8079d3829c10b45935571fc" translate="yes" xml:space="preserve">
          <source>Here is when a subset of the keys match:</source>
          <target state="translated">ここでは、キーのサブセットが一致する場合を示します。</target>
        </trans-unit>
        <trans-unit id="84bb9c9b475cb5ae8d6aa130c97b79761a44437b" translate="yes" xml:space="preserve">
          <source>Here we have used recursion to traverse a list, doubling each element and returning a new list. The process of taking a list and &lt;em&gt;mapping&lt;/em&gt; over it is known as a &lt;em&gt;map algorithm&lt;/em&gt;.</source>
          <target state="translated">ここでは、再帰を使用してリストを走査し、各要素を2倍にし、新しいリストを返しています。リストを取得してそれを&lt;em&gt;マッピング&lt;/em&gt;するプロセスは、&lt;em&gt;マップアルゴリズム&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5c22f5f67bc89de4473d36dd5d40a24915681d3c" translate="yes" xml:space="preserve">
          <source>Here we will use Agents, and create a module named &lt;code&gt;KV.Bucket&lt;/code&gt;, responsible for storing our key-value entries in a way that allows them to be read and modified by other processes.</source>
          <target state="translated">ここでは、エージェントを使用して &lt;code&gt;KV.Bucket&lt;/code&gt; という名前のモジュールを作成します。このモジュールは、他のプロセスによる読み取りと変更を可能にする方法でキーと値のエントリを格納します。</target>
        </trans-unit>
        <trans-unit id="3e5a3bc41bc733073ea1b7c356d6fc16ff9a31eb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s how we could write the same &lt;code&gt;Utility.type/1&lt;/code&gt; functionality as a protocol:</source>
          <target state="translated">プロトコルと同じ &lt;code&gt;Utility.type/1&lt;/code&gt; 機能を作成する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4a4f491539740358c0862f6ed0caff8dd3eb4c91" translate="yes" xml:space="preserve">
          <source>Here, 257 in base 2 would be represented as &lt;code&gt;100000001&lt;/code&gt;, but since we have reserved only 8 bits for its representation (by default), the left-most bit is ignored and the value becomes truncated to &lt;code&gt;00000001&lt;/code&gt;, or simply &lt;code&gt;1&lt;/code&gt; in decimal.</source>
          <target state="translated">ここでは、基数2の257は &lt;code&gt;100000001&lt;/code&gt; として表されますが、その表現用に8ビットのみを予約しているため（デフォルト）、左端のビットは無視され、値は &lt;code&gt;00000001&lt;/code&gt; 、つまり10進数で &lt;code&gt;1&lt;/code&gt; に切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="bbd25c9ac39901e5a89af9e9cc14cd5e96101d55" translate="yes" xml:space="preserve">
          <source>Here, the arrow (&lt;code&gt;&amp;lt;--&lt;/code&gt;) indicates the &lt;strong&gt;marked&lt;/strong&gt; function - the function described by this paragraph. You also see its immediate callers (above) and called functions (below).</source>
          <target state="translated">ここで、矢印（ &lt;code&gt;&amp;lt;--&lt;/code&gt; ）は&lt;strong&gt;マーク&lt;/strong&gt;された関数（この段落で説明されている関数）を示します。また、直接の呼び出し元（上）と呼び出された関数（下）も表示されます。</target>
        </trans-unit>
        <trans-unit id="f90a2dd87f0e0e5b3fc18bbdd374ab3f255b75b6" translate="yes" xml:space="preserve">
          <source>Hex options (&lt;code&gt;:hex&lt;/code&gt;)</source>
          <target state="translated">16進オプション（ &lt;code&gt;:hex&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="778ad2f9bcae03814f9abdf00cda4d6b0dd5b58c" translate="yes" xml:space="preserve">
          <source>Hexadecimals and Unicode code points will be escaped if the map function returns &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;?x&lt;/code&gt;. Unicode code points if the map function returns &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;?u&lt;/code&gt;.</source>
          <target state="translated">16進数とUnicodeコードポイントは、map関数が &lt;code&gt;?x&lt;/code&gt; に対して &lt;code&gt;true&lt;/code&gt; を返す場合、エスケープされます。map関数が &lt;code&gt;?u&lt;/code&gt; に対して &lt;code&gt;true&lt;/code&gt; を返す場合、Unicodeコードがポイントします。</target>
        </trans-unit>
        <trans-unit id="26e85f63826bec68a04b03d81896950af6108f8b" translate="yes" xml:space="preserve">
          <source>Hibernating should not be used aggressively as too much time could be spent garbage collecting. Normally it should only be used when a message is not expected soon and minimising the memory of the process is shown to be beneficial.</source>
          <target state="translated">あまりにも多くの時間がゴミ収集に費やされる可能性があるため、ハイバネーションは積極的に使用すべきではありません。通常は、メッセージがすぐに予想されない場合にのみ使用し、プロセスのメモリを最小化することが有益であることが示されています。</target>
        </trans-unit>
        <trans-unit id="86c45c0195b718d67c0a438292af56b71a044d2f" translate="yes" xml:space="preserve">
          <source>Hiding Internal Modules and Functions</source>
          <target state="translated">内部モジュールと機能の非表示</target>
        </trans-unit>
        <trans-unit id="0ea7288fabe36d1374b87e85268bd81849d9bced" translate="yes" xml:space="preserve">
          <source>History size</source>
          <target state="translated">歴史の大きさ</target>
        </trans-unit>
        <trans-unit id="d5f481ffbf704bd71ae3b341524ffae254c4f8b3" translate="yes" xml:space="preserve">
          <source>Hot Code Upgrades</source>
          <target state="translated">ホットコードアップグレード</target>
        </trans-unit>
        <trans-unit id="fc314201ff6cdd49c00bb54c2d3a38dc7360de1d" translate="yes" xml:space="preserve">
          <source>Hot code swapping</source>
          <target state="translated">ホットコードスワッピング</target>
        </trans-unit>
        <trans-unit id="5a2b9c570ab736a0a992067e06ddc44051493496" translate="yes" xml:space="preserve">
          <source>Hour using a 12-hour clock</source>
          <target state="translated">12時間時計を使った1時間</target>
        </trans-unit>
        <trans-unit id="0b231acab966b52e86353b589bad7d81125cc30e" translate="yes" xml:space="preserve">
          <source>Hour using a 24-hour clock</source>
          <target state="translated">24時間時計を使用した時間</target>
        </trans-unit>
        <trans-unit id="3935f3cf215c2daeec7c25cef51c0a03f6190f58" translate="yes" xml:space="preserve">
          <source>How can this line fail if we just created the bucket in the previous line?</source>
          <target state="translated">前の行でバケツを作っただけなのに、どうしてこの行は失敗するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="04ccc44e58210facfedf9edfba2604fce3cfc2e4" translate="yes" xml:space="preserve">
          <source>How to supervise</source>
          <target state="translated">監督の仕方</target>
        </trans-unit>
        <trans-unit id="7cdfd34c64026a6f64366847c32473d397480980" translate="yes" xml:space="preserve">
          <source>However Elixir introduces a syntax sugar where the keywords above may be written as follows:</source>
          <target state="translated">しかし、Elixirは、上記のキーワードを以下のように書くことができる構文糖を導入しています。</target>
        </trans-unit>
        <trans-unit id="7d4e3b65932901a80bd0c8daa5e66bd16aedca07" translate="yes" xml:space="preserve">
          <source>However, a quoted variable is represented as:</source>
          <target state="translated">ただし、引用された変数は次のように表されます。</target>
        </trans-unit>
        <trans-unit id="057b67626d2f5f52a384b7c48714343f2812737b" translate="yes" xml:space="preserve">
          <source>However, after our project is compiled using a tool like Mix, we know all modules that have been defined, including protocols and their implementations. This way, the protocol can be consolidated into a very simple and fast dispatch module.</source>
          <target state="translated">しかし、私たちのプロジェクトがMixのようなツールを使ってコンパイルされた後は、プロトコルとその実装を含む、定義されたすべてのモジュールを知ることができます。このようにして、プロトコルを非常にシンプルで高速なディスパッチモジュールにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="30b8c9087b77b2def4f60524eab486ec77b7882f" translate="yes" xml:space="preserve">
          <source>However, do not provide &lt;code&gt;__using__/1&lt;/code&gt; if all it does is to import, alias or require the module itself. For example, avoid this:</source>
          <target state="translated">ただし、インポート、エイリアス、またはモジュール自体が必要な場合は、 &lt;code&gt;__using__/1&lt;/code&gt; しないでください。たとえば、これは避けてください。</target>
        </trans-unit>
        <trans-unit id="ca0de7a0e18a5854d7abeb96c012e778937c81fc" translate="yes" xml:space="preserve">
          <source>However, for the tests in &lt;code&gt;KV.RouterTest&lt;/code&gt;, we effectively need two nodes in our routing table. To do so, we will write a setup block that runs before all tests in that file. The setup block will change the application environment and revert it back once we are done, like this:</source>
          <target state="translated">ただし、 &lt;code&gt;KV.RouterTest&lt;/code&gt; のテストでは、ルーティングテーブルに2つのノードが事実上必要です。そのために、そのファイル内のすべてのテストの前に実行されるセットアップブロックを記述します。セットアップブロックは、アプリケーション環境を変更し、完了したら次のように元に戻します。</target>
        </trans-unit>
        <trans-unit id="82776ff5a87946e16cbe8e021db6c7eca6df82eb" translate="yes" xml:space="preserve">
          <source>However, functions that return booleans and are valid in guards follow another convention, described next.</source>
          <target state="translated">しかし、ブール値を返し、ガード内で有効な関数は、次に説明する別の規約に従っています。</target>
        </trans-unit>
        <trans-unit id="e2f8333bf85aa3e6557d871123f4e54aa89129c2" translate="yes" xml:space="preserve">
          <source>However, if &quot;&amp;eacute;&quot; is represented by the single character &quot;e with acute&quot; accent, then it will return &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">ただし、「&amp;eacute;」がアクセント記号付きの「e」という1文字で表されている場合、 &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="2dea6b01d6679272ba037abafc94d5ec1f3a1e91" translate="yes" xml:space="preserve">
          <source>However, if &quot;&amp;eacute;&quot; is represented by the single character &quot;e with acute&quot; accent, then it will split the string into just one part:</source>
          <target state="translated">ただし、「&amp;eacute;」が単一文字「アキュート」のアクセント記号で表される場合、文字列は1つの部分に分割されます。</target>
        </trans-unit>
        <trans-unit id="43d541b3bc1e148da1c64ef9ffa0bbfd2e7364f7" translate="yes" xml:space="preserve">
          <source>However, if flex breaks are used, then each break is re-evaluated when rendered, so the document could be possible rendered as:</source>
          <target state="translated">しかし、フレックスブレークが使用されている場合は、レンダリング時に各ブレークが再評価されるため、ドキュメントは次のようにレンダリングされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e59920d8100c9a8114a12d93422f9d86a0ab473f" translate="yes" xml:space="preserve">
          <source>However, if there is a need to access the user variable, nil can be given:</source>
          <target state="translated">ただし、ユーザ変数にアクセスする必要がある場合は、nilを与えることができます。</target>
        </trans-unit>
        <trans-unit id="ebac26b5b96f39c6c425c9f7338b33aa11d33d44" translate="yes" xml:space="preserve">
          <source>However, if we use &lt;code&gt;string&lt;/code&gt;, then the string length is used, instead of byte size, correctly fitting:</source>
          <target state="translated">ただし、 &lt;code&gt;string&lt;/code&gt; を使用する場合、バイトサイズの代わりに文字列の長さが使用され、正しく適合します。</target>
        </trans-unit>
        <trans-unit id="163ec0dc8d44d05de91c4d5e307d82258afc33ad" translate="yes" xml:space="preserve">
          <source>However, if you expect the file to be there, the bang variation is more useful as it raises a meaningful error message. Avoid writing:</source>
          <target state="translated">しかし、ファイルがあることを期待している場合は、意味のあるエラーメッセージが出るので、bangのバリエーションの方が便利です。書き込みは避けましょう。</target>
        </trans-unit>
        <trans-unit id="b26ef74513acb14878e64cf7d06f11768d520400" translate="yes" xml:space="preserve">
          <source>However, if you expect the outcome to always to be successful (e.g. if you expect the file always to exist), the bang variation can be more convenient and will raise a more helpful error message (than a failed pattern match) on failure.</source>
          <target state="translated">しかし、結果が常に成功することを期待している場合(例:ファイルが常に存在することを期待している場合)、bangバリエーションはより便利で、失敗時には(パターンマッチに失敗した場合よりも)より有用なエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="f76bd9d28fa6001b9c29fd594f3da25de0125efb" translate="yes" xml:space="preserve">
          <source>However, if you expect the outcome to always to be successful (for instance, if you expect the file always to exist), the bang variation can be more convenient and will raise a more helpful error message (than a failed pattern match) on failure.</source>
          <target state="translated">しかし、結果が常に成功することを期待している場合(例えば、ファイルが常に存在することを期待している場合)、bangバリエーションはより便利で、失敗時には(パターンマッチに失敗した場合よりも)より有用なエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="12f2ae0ce38b2739810767448aba2df24da58505" translate="yes" xml:space="preserve">
          <source>However, if you push every application as a separate project to a Git repository, your projects may become very hard to maintain as you will spend a lot of time managing those Git repositories rather than writing your code.</source>
          <target state="translated">しかし、すべてのアプリケーションを別のプロジェクトとして Git リポジトリにプッシュしてしまうと、コードを書くことよりも Git リポジトリの管理に多くの時間を費やすことになり、プロジェクトを維持するのが非常に困難になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="c4db01e79b2e5a22ecea1d3f50d5983cb25a53b4" translate="yes" xml:space="preserve">
          <source>However, if you want to invoke a specific module, function and arguments, or give the task process a name, you need to define the task in its own module:</source>
          <target state="translated">しかし、特定のモジュールや関数、引数を呼び出したり、タスクプロセスに名前をつけたりしたい場合は、タスクを独自のモジュールで定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d300780723b1e1d9cb8cf90e34f684379371fda8" translate="yes" xml:space="preserve">
          <source>However, if you want to re-use the sigil character itself on the string, you need to escape it:</source>
          <target state="translated">ただし、シグル文字そのものを文字列に再利用したい場合はエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="9832e5845d5128f4155ac9809559b224c95909bd" translate="yes" xml:space="preserve">
          <source>However, if your guard has multiple conditions, such as checking for tuples or maps, it is best to call type-check functions like &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_tuple/1&quot;&gt;&lt;code&gt;is_tuple/1&lt;/code&gt;&lt;/a&gt; before &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt;&lt;code&gt;tuple_size/1&lt;/code&gt;&lt;/a&gt;, otherwise the whole guard will fail if a tuple is not given. Alternatively your function clause can use multiple guards as shown in the following section.</source>
          <target state="translated">ただし、ガードにタプルやマップのチェックなどの複数の条件がある場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_tuple/1&quot;&gt; &lt;code&gt;is_tuple/1&lt;/code&gt; &lt;/a&gt;前に&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt; &lt;code&gt;tuple_size/1&lt;/code&gt; &lt;/a&gt;などのタイプチェック関数を呼び出すことをお勧めします。そうしないと、タプルが指定されていない場合、ガード全体が失敗します。または、次のセクションに示すように、関数句で複数のガードを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="bbb15fb0156049fcce5c409f89352f9b00a36988" translate="yes" xml:space="preserve">
          <source>However, implementation-wise, they have the following differences:</source>
          <target state="translated">しかし、実装的には以下のような違いがあります。</target>
        </trans-unit>
        <trans-unit id="ab714719ee8f889dd923393f22c68b77c2b16ffe" translate="yes" xml:space="preserve">
          <source>However, in some cases it may be desired to associate a value to the process using the alternate &lt;code&gt;{:via, Registry, {registry, key, value}}&lt;/code&gt; tuple:</source>
          <target state="translated">ただし、場合によっては、代替の &lt;code&gt;{:via, Registry, {registry, key, value}}&lt;/code&gt; タプルを使用して値をプロセスに関連付けることが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="d4761ed59b0d1afa93377c7f7b363dfb8fb4fda3" translate="yes" xml:space="preserve">
          <source>However, in some situations, it is useful to match against an existing value, instead of rebinding. This can be done with the &lt;code&gt;^&lt;/code&gt; special form, colloquially known as the pin operator:</source>
          <target state="translated">ただし、状況によっては、再バインドするのではなく、既存の値と照合すると便利です。これは、通称「ピン演算子」として知られる &lt;code&gt;^&lt;/code&gt; 特殊な形式で実行できます。</target>
        </trans-unit>
        <trans-unit id="96e149dd0b884d4a6fa96fb42e3515395245b191" translate="yes" xml:space="preserve">
          <source>However, in the majority of cases, you want to add the task supervisor to your supervision tree:</source>
          <target state="translated">しかし、大抵の場合、タスクのスーパーバイザーをスーパービジョンツリーに追加したいと思います。</target>
        </trans-unit>
        <trans-unit id="dba0c307e5ca681865cce6227a859a96ae9a11f3" translate="yes" xml:space="preserve">
          <source>However, instead of adding more code to the &lt;code&gt;kv&lt;/code&gt; application, we are going to build the TCP server as another application that is a client of the &lt;code&gt;kv&lt;/code&gt; application. Since the whole runtime and Elixir ecosystem are geared towards applications, it makes sense to break our projects into smaller applications that work together rather than building a big, monolithic app.</source>
          <target state="translated">しかし、代わりに多くのコードを追加するの &lt;code&gt;kv&lt;/code&gt; アプリケーション、我々はクライアントである別のアプリケーションとしてTCPサーバーを構築しようとしている &lt;code&gt;kv&lt;/code&gt; アプリケーション。ランタイム全体とElixirエコシステムはアプリケーションを対象としているため、プロジェクトを大きなモノリシックなアプリを構築するのではなく、連携して動作する小さなアプリケーションに分割することは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="d0b1ff55d618bd8bbea3c57925ed60e856baa189" translate="yes" xml:space="preserve">
          <source>However, instead of modifying those files after the release is built, the simplest way to customize those files is by running &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.Init.html&quot;&gt;&lt;code&gt;mix release.init&lt;/code&gt;&lt;/a&gt;. The Mix task will copy custom &lt;code&gt;rel/vm.args.eex&lt;/code&gt;, &lt;code&gt;rel/env.sh.eex&lt;/code&gt;, and &lt;code&gt;rel/env.bat.eex&lt;/code&gt; files to your project root. You can modify those files and they will be evaluated every time you perform a new release. Those files are regular EEx templates and they have a single assign, called &lt;code&gt;@release&lt;/code&gt;, with the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Release.html&quot;&gt;&lt;code&gt;Mix.Release&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">ただし、リリースのビルド後にこれらのファイルを変更する代わりに、これらのファイルをカスタマイズする最も簡単な方法は、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.Init.html&quot;&gt; &lt;code&gt;mix release.init&lt;/code&gt; &lt;/a&gt;実行することです。混合タスクは、カスタム &lt;code&gt;rel/vm.args.eex&lt;/code&gt; 、 &lt;code&gt;rel/env.sh.eex&lt;/code&gt; 、および &lt;code&gt;rel/env.bat.eex&lt;/code&gt; ファイルをプロジェクトルートにコピーします。これらのファイルは変更でき、新しいリリースを実行するたびに評価されます。これらのファイルは、通常のEEXテンプレートであり、彼らはと呼ばれる単一のアサイン、持って &lt;code&gt;@release&lt;/code&gt; と、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Release.html&quot;&gt; &lt;code&gt;Mix.Release&lt;/code&gt; の&lt;/a&gt;構造体を。</target>
        </trans-unit>
        <trans-unit id="1f2acb719b57d971a999b6feb20a4c47ae5bfcf5" translate="yes" xml:space="preserve">
          <source>However, keep in mind that adding &lt;code&gt;@doc false&lt;/code&gt; does not make the function private. The function above can still be invoked as &lt;code&gt;MyApp.Sample.add(1, 2)&lt;/code&gt;. Not only that, if &lt;code&gt;MyApp.Sample&lt;/code&gt; is imported, the &lt;code&gt;add/2&lt;/code&gt; function will also be imported into the caller. For those reasons, be cautious when adding &lt;code&gt;@doc false&lt;/code&gt; to functions, instead use one of these two options:</source>
          <target state="translated">ただし、 &lt;code&gt;@doc false&lt;/code&gt; を追加しても、関数はプライベートになりません。上記の関数は、 &lt;code&gt;MyApp.Sample.add(1, 2)&lt;/code&gt; として呼び出すことができます。それだけでなく、 &lt;code&gt;MyApp.Sample&lt;/code&gt; がインポートされると、 &lt;code&gt;add/2&lt;/code&gt; 関数も呼び出し元にインポートされます。これらの理由により、 &lt;code&gt;@doc false&lt;/code&gt; を関数に追加するときは注意してください。代わりに、次の2つのオプションのいずれかを使用してください。</target>
        </trans-unit>
        <trans-unit id="ce1e4503150dc2f3049f826f979cbe9905825d87" translate="yes" xml:space="preserve">
          <source>However, keep in mind that by making the test distributed, we will likely run it less frequently, since we may not do the distributed setup on every test run.</source>
          <target state="translated">しかし、テストを分散化することで、テスト実行のたびに分散セットアップを行うとは限らないので、テストの実行頻度が減ることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="3693f464a1590f76c7a514020cc3b6b0e554bf8d" translate="yes" xml:space="preserve">
          <source>However, keep in mind those cases are typically not an issue. After all, a process referenced by a PID may crash at any time, including between getting the value from the registry and sending it a message. Many parts of the standard library are designed to cope with that, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Process.html#monitor/1&quot;&gt;&lt;code&gt;Process.monitor/1&lt;/code&gt;&lt;/a&gt; which will deliver the &lt;code&gt;:DOWN&lt;/code&gt; message immediately if the monitored process is already dead and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#send/2&quot;&gt;&lt;code&gt;Kernel.send/2&lt;/code&gt;&lt;/a&gt; which acts as a no-op for dead processes.</source>
          <target state="translated">ただし、これらのケースは通常問題ではないことに注意してください。結局のところ、PIDによって参照されるプロセスは、レジストリから値を取得してからメッセージを送信するまでの間を含め、いつでもクラッシュする可能性があります。標準ライブラリの多くの部分は、次のような、それに対処するように設計されている&lt;a href=&quot;https://hexdocs.pm/elixir/Process.html#monitor/1&quot;&gt; &lt;code&gt;Process.monitor/1&lt;/code&gt; &lt;/a&gt;お届けします &lt;code&gt;:DOWN&lt;/code&gt; 監視対象のプロセスがすでに死んでいるとあれば、すぐにメッセージを&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#send/2&quot;&gt; &lt;code&gt;Kernel.send/2&lt;/code&gt; &lt;/a&gt;死者のための無操作として働きプロセス。</target>
        </trans-unit>
        <trans-unit id="f5ae69f63821cec3eb4f2016854327b6c5df477d" translate="yes" xml:space="preserve">
          <source>However, keep in mind those cases are typically not an issue. After all, a process referenced by a PID may crash at any time, including between getting the value from the registry and sending it a message. Many parts of the standard library are designed to cope with that, such as &lt;a href=&quot;process#monitor/1&quot;&gt;&lt;code&gt;Process.monitor/1&lt;/code&gt;&lt;/a&gt; which will deliver the &lt;code&gt;:DOWN&lt;/code&gt; message immediately if the monitored process is already dead and &lt;a href=&quot;kernel#send/2&quot;&gt;&lt;code&gt;Kernel.send/2&lt;/code&gt;&lt;/a&gt; which acts as a no-op for dead processes.</source>
          <target state="translated">ただし、これらのケースは通常問題ではないことに注意してください。結局のところ、PIDによって参照されるプロセスは、レジストリから値を取得してからメッセージを送信するまでの間を含め、いつでもクラッシュする可能性があります。標準ライブラリの多くの部分は、それを処理するように設計されています。たとえば、監視対象プロセスがすでに&lt;a href=&quot;kernel#send/2&quot;&gt; &lt;code&gt;Kernel.send/2&lt;/code&gt; &lt;/a&gt;ている場合に &lt;code&gt;:DOWN&lt;/code&gt; メッセージを即座に配信する&lt;a href=&quot;process#monitor/1&quot;&gt; &lt;code&gt;Process.monitor/1&lt;/code&gt; &lt;/a&gt;や、停止のノーオペレーションとして機能するKernel.send / 2などです。プロセス。</target>
        </trans-unit>
        <trans-unit id="ea02d735a03ee13559ceb754eeca6008810c2c76" translate="yes" xml:space="preserve">
          <source>However, many other enumerables exist in the language, such as &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;s and the data type returned by &lt;a href=&quot;https://hexdocs.pm/elixir/File.html#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt; which allows a file to be traversed as if it was an enumerable.</source>
          <target state="translated">ただし、&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://hexdocs.pm/elixir/File.html#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt;によって返されるデータ型など、他の多くの列挙可能ファイルが言語に存在します。これにより、ファイルを列挙可能であるかのようにトラバースできます。</target>
        </trans-unit>
        <trans-unit id="9a395466f1651904a7d0044a0e96b1a814183371" translate="yes" xml:space="preserve">
          <source>However, many other enumerables exist in the language, such as &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;s and the data type returned by &lt;a href=&quot;file#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt; which allows a file to be traversed as if it was an enumerable.</source>
          <target state="translated">ただし、&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;file#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt;によって返されるデータ型など、他の多くの列挙型が言語に存在し、列挙型であるかのようにファイルをたどることができます。</target>
        </trans-unit>
        <trans-unit id="1b496aae43041f07a94c194092a1ee0cf80d4eec" translate="yes" xml:space="preserve">
          <source>However, naming dynamic processes with atoms is a terrible idea! If we use atoms, we would need to convert the bucket name (often received from an external client) to atoms, and &lt;strong&gt;we should never convert user input to atoms&lt;/strong&gt;. This is because atoms are not garbage collected. Once an atom is created, it is never reclaimed. Generating atoms from user input would mean the user can inject enough different names to exhaust our system memory!</source>
          <target state="translated">しかし、アトムを使って動的プロセスに名前を付けるのはひどい考えです！アトムを使用する場合、バケット名（外部クライアントから受信されることが多い）をアトムに&lt;strong&gt;変換する必要があり、ユーザー入力をアトムに変換してはなりません&lt;/strong&gt;。これは、原子がガベージコレクションされないためです。アトムが作成されると、再利用されることはありません。ユーザー入力から原子を生成することは、ユーザーがシステムメモリを使い果たすのに十分な異なる名前を注入できることを意味します！</target>
        </trans-unit>
        <trans-unit id="df3b6ab895dd3f7bd985857fc1933851a28e562b" translate="yes" xml:space="preserve">
          <source>However, remember that binary pattern matching works on &lt;em&gt;bytes&lt;/em&gt;, so matching on the string like &amp;ldquo;&amp;uuml;ber&amp;rdquo; with multibyte characters won&amp;rsquo;t match on the &lt;em&gt;character&lt;/em&gt;, it will match on the &lt;em&gt;first byte of that character&lt;/em&gt;:</source>
          <target state="translated">しかし、バイナリパターンマッチングが上で動作することを覚えている&lt;em&gt;バイト&lt;/em&gt;のマルチバイト文字を含む「ユーバー」のような文字列のマッチングが上一致しませんので、&lt;em&gt;文字&lt;/em&gt;、それは上で一致する&lt;em&gt;その文字の最初のバイト&lt;/em&gt;：</target>
        </trans-unit>
        <trans-unit id="77afe59f2cf778e4ba45a1656955754632ba1dec" translate="yes" xml:space="preserve">
          <source>However, should we be fine with the implementation for &lt;code&gt;Any&lt;/code&gt;, in order to use such implementation we would need to tell our struct to explicitly derive the &lt;code&gt;Size&lt;/code&gt; protocol:</source>
          <target state="translated">ただし、 &lt;code&gt;Any&lt;/code&gt; の実装に問題がなければ、そのような実装を使用するために、 &lt;code&gt;Size&lt;/code&gt; プロトコルを明示的に導出するように構造体に指示する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f35366701d4be066fddfcbe4789ab0e44ff649f" translate="yes" xml:space="preserve">
          <source>However, since &lt;code&gt;KV.Registry.create/2&lt;/code&gt; is a cast operation, the command will return before we actually write to the table! In other words, this is happening:</source>
          <target state="translated">ただし、 &lt;code&gt;KV.Registry.create/2&lt;/code&gt; はキャストオペレーションであるため、実際にテーブルに書き込む前にコマンドが返されます。言い換えれば、これは起こっています：</target>
        </trans-unit>
        <trans-unit id="b607bf41eed0b7acedbf1d601f4e6081a4cb7cfb" translate="yes" xml:space="preserve">
          <source>However, since structs are just maps, they work with the functions from the &lt;code&gt;Map&lt;/code&gt; module:</source>
          <target state="translated">ただし、構造体は単なるマップであるため、 &lt;code&gt;Map&lt;/code&gt; モジュールの関数で機能します。</target>
        </trans-unit>
        <trans-unit id="e7b768f9063dad4bbd7d785c035b8dad45c243ae" translate="yes" xml:space="preserve">
          <source>However, specifying the child specification for each child as a map can be quite error prone, as we may change the Stack implementation and forget to update its specification. That's why Elixir allows you to pass a tuple with the module name and the &lt;code&gt;start_link&lt;/code&gt; argument instead of the specification:</source>
          <target state="translated">ただし、各子の子仕様をマップとして指定すると、Stackの実装を変更して仕様の更新を忘れる可能性があるため、エラーが発生しやすくなります。そのため、Elixirでは、仕様の代わりにモジュール名と &lt;code&gt;start_link&lt;/code&gt; 引数を含むタプルを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="496f233e2f16ce1ec282e5a3228096d9e60212a4" translate="yes" xml:space="preserve">
          <source>However, strings are just part of the story. If a string is a binary, and we have used the &lt;code&gt;is_binary/1&lt;/code&gt; function, Elixir must have an underlying type empowering strings. And it does! Let&amp;rsquo;s talk about binaries.</source>
          <target state="translated">ただし、弦は物語の一部にすぎません。文字列がバイナリであり、 &lt;code&gt;is_binary/1&lt;/code&gt; 関数を使用した場合、Elixirは文字列に権限を与える基になる型を持つ必要があります。そしてそうです！バイナリについて話しましょう。</target>
        </trans-unit>
        <trans-unit id="dd71889ec3595479588d8ca1a2ca3333e184a132" translate="yes" xml:space="preserve">
          <source>However, the capturing of any other named device, such as &lt;code&gt;:stderr&lt;/code&gt;, happens globally and persists until the function has ended. While this means it is safe to run your tests with &lt;code&gt;async: true&lt;/code&gt; in many cases, captured output may include output from a different test and care must be taken when using &lt;code&gt;capture_io&lt;/code&gt; with a named process asynchronously.</source>
          <target state="translated">ただし、 &lt;code&gt;:stderr&lt;/code&gt; などの他の名前付きデバイスのキャプチャはグローバルに行われ、関数が終了するまで持続します。これは、 &lt;code&gt;async: true&lt;/code&gt; テストを実行しても安全であることを意味します。多くの場合、キャプチャされた出力には別のテストからの出力が含まれる可能性があるため、名前付きプロセスで &lt;code&gt;capture_io&lt;/code&gt; を非同期で使用する場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="82b09700b9bf9936f190f1106abb6ccb1f220f41" translate="yes" xml:space="preserve">
          <source>However, the code below would work as long as &lt;code&gt;:option_parser_example&lt;/code&gt; atom is used at some point later (or earlier) &lt;strong&gt;in the same module&lt;/strong&gt;. For example:</source>
          <target state="translated">ただし、以下のコードは、 &lt;code&gt;:option_parser_example&lt;/code&gt; アトムが&lt;strong&gt;同じモジュール内の&lt;/strong&gt;どこか（またはそれ以前）&lt;strong&gt;に&lt;/strong&gt;使用されている限り機能し&lt;strong&gt;ます&lt;/strong&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="b357c81b8f132fc24fbf479211e75b269f8fae9b" translate="yes" xml:space="preserve">
          <source>However, the size cannot be defined in the match outside the binary/bitstring match:</source>
          <target state="translated">ただし、バイナリ/ビット列マッチ以外のマッチではサイズを定義することはできません。</target>
        </trans-unit>
        <trans-unit id="c0f50242052626c017e46fce09925693cd1c9dd3" translate="yes" xml:space="preserve">
          <source>However, there are times when we don&amp;rsquo;t want variables to be rebound.</source>
          <target state="translated">ただし、変数をリバウンドさせたくない場合があります。</target>
        </trans-unit>
        <trans-unit id="88399305a4f17930e312791fc1d3a07b6c89a0a2" translate="yes" xml:space="preserve">
          <source>However, there is a bug in our stack server. If we call &lt;code&gt;:pop&lt;/code&gt; and the stack is empty, it is going to crash because no clause matches:</source>
          <target state="translated">ただし、スタックサーバーにはバグがあります。 &lt;code&gt;:pop&lt;/code&gt; を呼び出し、スタックが空の場合、一致する句がないため、スタックがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="6b30a9e6e90f8ae42f6ce5f8d5d4ee4d68edc7af" translate="yes" xml:space="preserve">
          <source>However, there is still one concern left, which are the restart strategies. Tasks, by default, have the &lt;code&gt;:restart&lt;/code&gt; value set to &lt;code&gt;:temporary&lt;/code&gt;, which means they are not restarted. This is an excellent default for the connections started via the &lt;code&gt;Task.Supervisor&lt;/code&gt;, as it makes no sense to restart a failed connection, but it is a bad choice for the acceptor. If the acceptor crashes, we want to bring the acceptor up and running again.</source>
          <target state="translated">ただし、残っている懸念事項が1つ残っています。それは再起動戦略です。デフォルトでは、タスクの &lt;code&gt;:restart&lt;/code&gt; 値は &lt;code&gt;:temporary&lt;/code&gt; に設定されています。つまり、タスクは再起動されません。これは、失敗した接続を再開する意味がないので、 &lt;code&gt;Task.Supervisor&lt;/code&gt; を介して開始された接続の優れたデフォルトですが、アクセプターにとっては悪い選択です。アクセプターがクラッシュした場合は、アクセプターを再起動して実行します。</target>
        </trans-unit>
        <trans-unit id="2654066a02c149d51e371eeaac885d94072a55a8" translate="yes" xml:space="preserve">
          <source>However, this module returns the proper length:</source>
          <target state="translated">しかし、このモジュールは適切な長さを返します。</target>
        </trans-unit>
        <trans-unit id="0458a5b82cdaf306b947332bf064e36f033492d1" translate="yes" xml:space="preserve">
          <source>However, this option can be expensive if you have multiple production nodes or if the release assembling process is a long one, as each node needs to individually assemble the release.</source>
          <target state="translated">しかし、複数のプロダクションノードがある場合や、リリースのアセンブルプロセスが長い場合には、各ノードが個別にリリースをアセンブルする必要があるため、このオプションは高価になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="41d8fdc77d8f21adeb6b27918df1a329fe13ff18" translate="yes" xml:space="preserve">
          <source>However, using lists in IO operations requires some attention. A list may represent either a bunch of bytes or a bunch of characters and which one to use depends on the encoding of the IO device. If the file is opened without encoding, the file is expected to be in raw mode, and the functions in the &lt;code&gt;IO&lt;/code&gt; module starting with &lt;code&gt;bin*&lt;/code&gt; must be used. Those functions expect an &lt;code&gt;iodata&lt;/code&gt; as an argument; i.e., they expect a list of integers representing bytes or binaries to be given.</source>
          <target state="translated">ただし、IO操作でリストを使用するには、注意が必要です。リストは、一連のバイトまたは一連の文字のいずれかを表す場合があり、どちらを使用するかは、IOデバイスのエンコーディングによって異なります。エンコードせずにファイルを開く場合、ファイルはrawモードであることが想定されており、 &lt;code&gt;bin*&lt;/code&gt; 始まる &lt;code&gt;IO&lt;/code&gt; モジュールの関数を使用する必要があります。これらの関数は、引数として &lt;code&gt;iodata&lt;/code&gt; を想定しています。つまり、バイトまたはバイナリを表す整数のリストが与えられることを期待しています。</target>
        </trans-unit>
        <trans-unit id="b77af23f35c905af8889b972cb68357936576822" translate="yes" xml:space="preserve">
          <source>However, variables assigned in the match will not be available outside of the function call (unlike regular pattern matching with the &lt;code&gt;=&lt;/code&gt; operator):</source>
          <target state="translated">ただし、一致で割り当てられた変数は、（ &lt;code&gt;=&lt;/code&gt; 演算子を使用した通常のパターンマッチングとは異なり）関数呼び出し以外では使用できません。</target>
        </trans-unit>
        <trans-unit id="5c24fd6169426183241dcc9a0bdf50f1c21b8290" translate="yes" xml:space="preserve">
          <source>However, variables explicitly bound in the clause &quot;body&quot; are accessible from the outer context:</source>
          <target state="translated">しかし、&quot;body &quot;節で明示的にバインドされた変数は、外部コンテキストからアクセス可能です。</target>
        </trans-unit>
        <trans-unit id="a2b5a965ef9a419fe17594f66438c5b71c746d05" translate="yes" xml:space="preserve">
          <source>However, we can connect to the other shell remotely. Open up the &lt;code&gt;User switch command&lt;/code&gt; prompt (Ctrl+G) and type:</source>
          <target state="translated">ただし、他のシェルにリモートで接続できます。 &lt;code&gt;User switch command&lt;/code&gt; プロンプト（Ctrl + G）を開き、次のように入力します。</target>
        </trans-unit>
        <trans-unit id="b76f1491e39a30e4f05d47d9af534982461917de" translate="yes" xml:space="preserve">
          <source>However, we can spawn a new process on &lt;code&gt;foo@computer-name&lt;/code&gt; from &lt;code&gt;bar@computer-name&lt;/code&gt;! Let&amp;rsquo;s give it a try (where &lt;code&gt;@computer-name&lt;/code&gt; is the one you see locally):</source>
          <target state="translated">ただし、 &lt;code&gt;foo@computer-name&lt;/code&gt; に &lt;code&gt;bar@computer-name&lt;/code&gt; から新しいプロセスを生成できます。試してみましょう（ &lt;code&gt;@computer-name&lt;/code&gt; はローカルで表示されるものです）：</target>
        </trans-unit>
        <trans-unit id="f37bd2760f0cfed52b63715c0c0ee324352998b9" translate="yes" xml:space="preserve">
          <source>However, we can't invoke it as follows:</source>
          <target state="translated">しかし、以下のように呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="693f31cc1e3b5ed02531511f77198af8ecfd7ceb" translate="yes" xml:space="preserve">
          <source>However, when an &lt;code&gt;else&lt;/code&gt; clause is present but the result of the expression does not match any of the patterns then an exception will be raised. This exception will not be caught by a &lt;code&gt;catch&lt;/code&gt; or &lt;code&gt;rescue&lt;/code&gt; in the same &lt;code&gt;try&lt;/code&gt;:</source>
          <target state="translated">ただし、 &lt;code&gt;else&lt;/code&gt; 句が存在しても、式の結果がどのパターンとも一致しない場合は、例外が発生します。この例外は、同じ &lt;code&gt;try&lt;/code&gt; で &lt;code&gt;catch&lt;/code&gt; または &lt;code&gt;rescue&lt;/code&gt; によってキャッチされません。</target>
        </trans-unit>
        <trans-unit id="4c77097fa9973bf214463e34dd009d5f8b620b4e" translate="yes" xml:space="preserve">
          <source>However, when the supervisor restarts the new bucket, the registry does not know about it. So we will have an empty bucket in the supervisor that nobody can access! To solve this, we want to say that buckets are actually temporary. If they crash, regardless of the reason, they should not be restarted.</source>
          <target state="translated">しかし、スーパバイザが新しいバケットを再起動しても、レジストリはそのことを知りません。そのため、スーパーバイザには誰もアクセスできない空のバケットが存在することになります。これを解決するために、バケットは実際には一時的なものだと言いたいのです。もしバケットがクラッシュした場合は、理由の如何に関わらず、再起動すべきではありません。</target>
        </trans-unit>
        <trans-unit id="aaa0ec2494f85dbc09c2cf136ebd0615520b8aec" translate="yes" xml:space="preserve">
          <source>However, when used in guards, the corresponding clause simply fails to match:</source>
          <target state="translated">しかし、ガードで使用すると、対応する節が単に一致しません。</target>
        </trans-unit>
        <trans-unit id="194ca3b5d1e99777f19c355cce6d59f573e1d740" translate="yes" xml:space="preserve">
          <source>However, when used in guards, the corresponding clause will fail to match instead of raising an error:</source>
          <target state="translated">しかし、ガードで使用された場合、対応する句はエラーを発生させる代わりにマッチに失敗します。</target>
        </trans-unit>
        <trans-unit id="659be2322a62899199e6224a02bca5b99ed29e51" translate="yes" xml:space="preserve">
          <source>However, you may not always want to pay the price for this abstraction. In such cases, a file can be opened in &lt;code&gt;:raw&lt;/code&gt; mode. The options &lt;code&gt;:read_ahead&lt;/code&gt; and &lt;code&gt;:delayed_write&lt;/code&gt; are also useful when operating on large files or working with files in tight loops.</source>
          <target state="translated">ただし、この抽象化の代価を常に支払う必要があるとは限りません。このような場合、ファイルは &lt;code&gt;:raw&lt;/code&gt; モードで開くことができます。オプション &lt;code&gt;:read_ahead&lt;/code&gt; と &lt;code&gt;:delayed_write&lt;/code&gt; は、大きなファイルを操作する場合や、タイトループでファイルを操作する場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="f893640c0df5ffde8dd2c6fee00f09a1846f23f1" translate="yes" xml:space="preserve">
          <source>However, your production environments may have specific needs. For example, right now we are hardcoding the routing table, but in production, you may need to read the routing table from disk, from another service, or even reach out to your orchestration tool, like Kubernetes. This can be done by adding a &lt;code&gt;config/releases.exs&lt;/code&gt;. As the name says, this file runs every time the release starts. For instance, you could do:</source>
          <target state="translated">ただし、実稼働環境には特定のニーズがある場合があります。たとえば、現在ルーティングテーブルをハードコーディングしていますが、本番環境では、ディスクから、別のサービスからルーティングテーブルを読み取るか、Kubernetesなどのオーケストレーションツールに問い合わせる必要がある場合もあります。これは &lt;code&gt;config/releases.exs&lt;/code&gt; を追加することで実行できます。名前が示すように、このファイルはリリースが開始するたびに実行されます。たとえば、次のことができます。</target>
        </trans-unit>
        <trans-unit id="edea2ca00218d63cdd854e8d487aa95dfd59b53c" translate="yes" xml:space="preserve">
          <source>However, your production environments may have specific needs. For example, right now we are hardcoding the routing table, but in production, you may need to read the routing table from disk, from another service, or even reach out to your orchestration tool, like Kubernetes. This can be done by adding a &lt;code&gt;config/releases.exs&lt;/code&gt;. As the name says, this file runs every time the release starts. For instance, you could make the &lt;code&gt;KVServer&lt;/code&gt; port configurable, and the value for the port is only given at runtime:</source>
          <target state="translated">ただし、実稼働環境には特定のニーズがある場合があります。たとえば、現在、ルーティングテーブルをハードコーディングしていますが、本番環境では、ディスクや別のサービスからルーティングテーブルを読み取る必要がある場合や、Kubernetesなどのオーケストレーションツールにアクセスする必要がある場合があります。これは、 &lt;code&gt;config/releases.exs&lt;/code&gt; 追加することで実行できます。名前が示すように、このファイルはリリースが開始されるたびに実行されます。たとえば、 &lt;code&gt;KVServer&lt;/code&gt; ポートを構成可能にすることができ、ポートの値は実行時にのみ指定されます。</target>
        </trans-unit>
        <trans-unit id="5ff8ae7f9913820c4cc328c8f087e28f17634493" translate="yes" xml:space="preserve">
          <source>Hygiene in aliases</source>
          <target state="translated">エイリアスの衛生状態</target>
        </trans-unit>
        <trans-unit id="93c4bc3fa55a161e49f6a7b16214db78fe9e8cb2" translate="yes" xml:space="preserve">
          <source>Hygiene in imports</source>
          <target state="translated">輸入品の衛生管理</target>
        </trans-unit>
        <trans-unit id="2569893e8a4ee578273b8aabe0ac087b41daa61c" translate="yes" xml:space="preserve">
          <source>Hygiene in variables</source>
          <target state="translated">変数の衛生状態</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="a8882cab0a9a900efc9a6181ff8e693783509bb4" translate="yes" xml:space="preserve">
          <source>IANA provides time zone data that includes data about different UTC offsets and standard offsets for time zones.</source>
          <target state="translated">IANAは、異なるUTCオフセットとタイムゾーンの標準オフセットに関するデータを含むタイムゾーンデータを提供しています。</target>
        </trans-unit>
        <trans-unit id="c31397c072d7bdb4a10bd53b1d1d02f67a9c1ce2" translate="yes" xml:space="preserve">
          <source>ID_Start characters, plus characters having the Unicode General Category of nonspacing marks, spacing combining marks, decimal number, connector punctuation, plus &lt;code&gt;Other_ID_Continue&lt;/code&gt;, minus &lt;code&gt;Pattern_Syntax&lt;/code&gt; and &lt;code&gt;Pattern_White_Space&lt;/code&gt; code points.</source>
          <target state="translated">ID_Start文字、およびUnicodeの一般カテゴリの非スペースマーク、スペース結合マーク、10進数、コネクタの句読点を &lt;code&gt;Other_ID_Continue&lt;/code&gt; 、プラスOther_ID_Continue、マイナス &lt;code&gt;Pattern_Syntax&lt;/code&gt; および &lt;code&gt;Pattern_White_Space&lt;/code&gt; コードポイント。</target>
        </trans-unit>
        <trans-unit id="c2ad7abf6ecd35c09ec969d6e5c5f626d2f547e0" translate="yes" xml:space="preserve">
          <source>IEx</source>
          <target state="translated">IEx</target>
        </trans-unit>
        <trans-unit id="bfd7d496a0b2c2b60b82d2300407f3ae22ad37d7" translate="yes" xml:space="preserve">
          <source>IEx allows you to connect to another node in two fashions. First of all, we can only connect to a shell if we give names both to the current shell and the shell we want to connect to.</source>
          <target state="translated">IExでは、2つの方法で別のノードに接続することができます。まず、現在のシェルと接続したいシェルの両方に名前をつけないとシェルに接続できません。</target>
        </trans-unit>
        <trans-unit id="8d4f60e469c0e609dec1269dbd88a28be0de6f53" translate="yes" xml:space="preserve">
          <source>IEx also has the ability to set breakpoints on Elixir code and &quot;pry&quot; into running processes. This allows the developer to have an IEx session run inside a given function.</source>
          <target state="translated">IEx には、Elixir コードにブレークポイントを設定したり、実行中のプロセスを「詮索」したりする機能もあります。これにより、開発者は任意の関数内で IEx セッションを実行することができます。</target>
        </trans-unit>
        <trans-unit id="de2b6b57cb35a438bfce75b9ed0826e918fad577" translate="yes" xml:space="preserve">
          <source>IEx evaluates its input line by line in an eagerly fashion which means that if at the end of a line the code seen so far is a complete expression IEx will evaluate it at that point. This behaviour may produce errors for expressions that have been formatted across multiple lines which is often the case for piped expressions. Consider the following expression using the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%257C%253E/2&quot;&gt;&lt;code&gt;|&amp;gt;/2&lt;/code&gt;&lt;/a&gt; operator:</source>
          <target state="translated">IExは、入力を行ごとに熱心に評価します。つまり、行末でこれまでに見たコードが完全な式である場合、IExはその時点でそれを評価します。この動作により、複数の行にまたがってフォーマットされた式でエラーが発生する場合があります。これは、パイプ式の場合によく見られます。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%257C%253E/2&quot;&gt; &lt;code&gt;|&amp;gt;/2&lt;/code&gt; &lt;/a&gt;演算子を使用した次の式について考えます。</target>
        </trans-unit>
        <trans-unit id="33ef030b61ea454aec0cec73bb460dee37b9c1bf" translate="yes" xml:space="preserve">
          <source>IEx evaluates its input line by line in an eagerly fashion which means that if at the end of a line the code seen so far is a complete expression IEx will evaluate it at that point. This behaviour may produce errors for expressions that have been formatted across multiple lines which is often the case for piped expressions. Consider the following expression using the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2&quot;&gt;&lt;code&gt;|&amp;gt;/2&lt;/code&gt;&lt;/a&gt; operator:</source>
          <target state="translated">IExは、入力を1行ずつ熱心に評価します。つまり、行の終わりにこれまでに表示されたコードが完全な式である場合、IExはその時点でそれを評価します。この動作により、複数行にまたがってフォーマットされた式でエラーが発生する場合があります。これは、パイプ式でよくあることです。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2&quot;&gt; &lt;code&gt;|&amp;gt;/2&lt;/code&gt; &lt;/a&gt;演算子を使用した次の式について考えてみます。</target>
        </trans-unit>
        <trans-unit id="54729610ac51af0b9971d9467c379b62a1eb9d65" translate="yes" xml:space="preserve">
          <source>IEx helpers includes many conveniences related to breakpoints. Below they are listed with the full module, such as &lt;a href=&quot;https://hexdocs.pm/iex/IEx.Helpers.html#breaks/0&quot;&gt;&lt;code&gt;IEx.Helpers.breaks/0&lt;/code&gt;&lt;/a&gt;, but remember it can be called directly as &lt;code&gt;breaks()&lt;/code&gt; inside IEx. They are:</source>
          <target state="translated">IExヘルパーには、ブレークポイントに関連する多くの便利な機能が含まれています。以下に、&lt;a href=&quot;https://hexdocs.pm/iex/IEx.Helpers.html#breaks/0&quot;&gt; &lt;code&gt;IEx.Helpers.breaks/0&lt;/code&gt; &lt;/a&gt;などの完全なモジュールとともにリストされていますが、IEx内で &lt;code&gt;breaks()&lt;/code&gt; として直接呼び出すことができることを覚えておいてください。彼らです：</target>
        </trans-unit>
        <trans-unit id="64c5dfd453f493f03e877d65639ce61fedbb37bc" translate="yes" xml:space="preserve">
          <source>IEx helpers includes many conveniences related to breakpoints. Below they are listed with the full module, such as &lt;a href=&quot;iex.helpers#breaks/0&quot;&gt;&lt;code&gt;IEx.Helpers.breaks/0&lt;/code&gt;&lt;/a&gt;, but remember it can be called directly as &lt;code&gt;breaks()&lt;/code&gt; inside IEx. They are:</source>
          <target state="translated">IExヘルパーには、ブレークポイントに関連する多くの便利な機能が含まれています。以下は、&lt;a href=&quot;iex.helpers#breaks/0&quot;&gt; &lt;code&gt;IEx.Helpers.breaks/0&lt;/code&gt; &lt;/a&gt;などの完全なモジュールとともにリストされていますが、IEx内で &lt;code&gt;breaks()&lt;/code&gt; として直接呼び出すことができることを覚えておいてください。彼らです：</target>
        </trans-unit>
        <trans-unit id="8f54609a357af7036d3341f02f1a23c3b68eda40" translate="yes" xml:space="preserve">
          <source>IEx provides a bunch of helpers. They can be accessed by typing &lt;code&gt;h()&lt;/code&gt; into the shell or as a documentation for the &lt;a href=&quot;https://hexdocs.pm/iex/IEx.Helpers.html&quot;&gt;&lt;code&gt;IEx.Helpers&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">IExはたくさんのヘルパーを提供します。これらには、シェルに &lt;code&gt;h()&lt;/code&gt; と入力するか、&lt;a href=&quot;https://hexdocs.pm/iex/IEx.Helpers.html&quot;&gt; &lt;code&gt;IEx.Helpers&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントとしてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0c364f03a852b53d4a7a502b57654a110b1cce03" translate="yes" xml:space="preserve">
          <source>IEx provides a bunch of helpers. They can be accessed by typing &lt;code&gt;h()&lt;/code&gt; into the shell or as a documentation for the &lt;a href=&quot;iex.helpers&quot;&gt;&lt;code&gt;IEx.Helpers&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">IExは多数のヘルパーを提供します。シェルに &lt;code&gt;h()&lt;/code&gt; と入力するか、&lt;a href=&quot;iex.helpers&quot;&gt; &lt;code&gt;IEx.Helpers&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントとしてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9fbe836e228d1004a30dd6875de1a22111586f81" translate="yes" xml:space="preserve">
          <source>IEx will also color inspected expressions using the &lt;code&gt;:syntax_colors&lt;/code&gt; option. Such can be disabled with:</source>
          <target state="translated">&lt;code&gt;:syntax_colors&lt;/code&gt; は、：syntax_colorsオプションを使用して、検査された式に色を付けます。これは次のようにして無効にできます：</target>
        </trans-unit>
        <trans-unit id="f04ddcbeb347ea8a966dd445a3b79f8b70364e41" translate="yes" xml:space="preserve">
          <source>IEx.Helpers</source>
          <target state="translated">IEx.Helpers</target>
        </trans-unit>
        <trans-unit id="c73133afe4ab05b736cba2f1d5c857bb84e93876" translate="yes" xml:space="preserve">
          <source>IEx.Info</source>
          <target state="translated">IEx.Info</target>
        </trans-unit>
        <trans-unit id="569138c9005aad9a2a791088d7d0e2cc45e36512" translate="yes" xml:space="preserve">
          <source>IEx.Info &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">IEx.Info&lt;small&gt;プロトコル&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="40b4a890c64ba73558ed867016246c3ef597f257" translate="yes" xml:space="preserve">
          <source>IEx.Info.info (1)</source>
          <target state="translated">IEx.Info.info (1)</target>
        </trans-unit>
        <trans-unit id="5cbc0090e36bb601365004561eedb21e95b78b48" translate="yes" xml:space="preserve">
          <source>IEx.Info.t (0)</source>
          <target state="translated">IEx.Info.t (0)</target>
        </trans-unit>
        <trans-unit id="17bd8ed5133e3af7e767eaf3cc19dbec1b565da7" translate="yes" xml:space="preserve">
          <source>IEx.Pry</source>
          <target state="translated">IEx.Pry</target>
        </trans-unit>
        <trans-unit id="785a031a616ad88bcb1b2cd5dbbc60681be53958" translate="yes" xml:space="preserve">
          <source>IEx.Server</source>
          <target state="translated">IEx.Server</target>
        </trans-unit>
        <trans-unit id="9d8fb39373007c2c84580d473e2a6e10a1f4c15d" translate="yes" xml:space="preserve">
          <source>IO</source>
          <target state="translated">IO</target>
        </trans-unit>
        <trans-unit id="5b2f49f5a657a5ef736fa25eed6851c434d0dac3" translate="yes" xml:space="preserve">
          <source>IO and the file system</source>
          <target state="translated">IOとファイルシステム</target>
        </trans-unit>
        <trans-unit id="bbc4e8881ad6a75f10bb6ea9bff4b74783ee6ecc" translate="yes" xml:space="preserve">
          <source>IO data</source>
          <target state="translated">入出力データ</target>
        </trans-unit>
        <trans-unit id="ec099c7a428e418929af391ebb305d925a77dc9c" translate="yes" xml:space="preserve">
          <source>IO data exists because often you need to do many append operations on smaller chunks of binaries in order to create a bigger binary. However, in Erlang and Elixir concatenating binaries will copy the concatenated binaries into a new binary.</source>
          <target state="translated">IOデータが存在するのは、より大きなバイナリを作るためにバイナリの小さな塊に対して多くの追加操作をする必要があるからです。しかし、ErlangやElixirではバイナリを連結すると連結されたバイナリが新しいバイナリにコピーされます。</target>
        </trans-unit>
        <trans-unit id="9d9b6408eac92df9305226b9c32fd45d1762d634" translate="yes" xml:space="preserve">
          <source>IO data is a data type that can be used as a more efficient alternative to binaries in certain situations.</source>
          <target state="translated">IOデータは、特定の状況でバイナリのより効率的な代替として使用できるデータ型です。</target>
        </trans-unit>
        <trans-unit id="370428fc749a05dd70935487b7d4064e7d83c3fb" translate="yes" xml:space="preserve">
          <source>IO devices</source>
          <target state="translated">アイオーデバイス</target>
        </trans-unit>
        <trans-unit id="d2ef1a7a2a7b43d0fc955e96e915a7dad9160987" translate="yes" xml:space="preserve">
          <source>IO devices maintain their position, which means subsequent calls to any reading or writing functions will start from the place where the device was last accessed. The position of files can be changed using the &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#position-2&quot;&gt;&lt;code&gt;:file.position/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">IOデバイスはその位置を維持します。つまり、以降の読み取りまたは書き込み機能の呼び出しは、デバイスが最後にアクセスされた場所から開始されます。ファイルの位置は、&lt;a href=&quot;http://www.erlang.org/doc/man/file.html#position-2&quot;&gt; &lt;code&gt;:file.position/2&lt;/code&gt; &lt;/a&gt;関数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="b5cbeaffeb75ad57a2191d67bc818e573faa6d01" translate="yes" xml:space="preserve">
          <source>IO.ANSI</source>
          <target state="translated">IO.ANSI</target>
        </trans-unit>
        <trans-unit id="0089fd381dd7dfd8d488c15134d255be01885915" translate="yes" xml:space="preserve">
          <source>IO.Stream</source>
          <target state="translated">IO.Stream</target>
        </trans-unit>
        <trans-unit id="8139a358a2645d3cf610141a9bce4c7312be5781" translate="yes" xml:space="preserve">
          <source>IO.StreamError</source>
          <target state="translated">IO.StreamError</target>
        </trans-unit>
        <trans-unit id="3d7d3441a8eff66aaa0f0faa36a8a05b3a785de8" translate="yes" xml:space="preserve">
          <source>IO.StreamError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">IO.StreamError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="77802d65267b1d073f6e93dafd03f4d02d064153" translate="yes" xml:space="preserve">
          <source>IO.inspect/2</source>
          <target state="translated">IO.inspect/2</target>
        </trans-unit>
        <trans-unit id="c1f9284c3367b68f5c96129104a3a9d0f4c9d187" translate="yes" xml:space="preserve">
          <source>Identifiers in Elixir are case sensitive.</source>
          <target state="translated">Elixirの識別子は大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="057deff008e9d8f83cd686c8b17c3d4c02169546" translate="yes" xml:space="preserve">
          <source>Identifying functions and documentation</source>
          <target state="translated">機能の特定と文書化</target>
        </trans-unit>
        <trans-unit id="537a4055c25749aea0df46647a3ecdd449be90bb" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#after_suite/1&quot;&gt;&lt;code&gt;after_suite/1&lt;/code&gt;&lt;/a&gt; is called multiple times, the callbacks will be called in reverse order. In other words, the last callback set will be the first to be called.</source>
          <target state="translated">&lt;a href=&quot;#after_suite/1&quot;&gt; &lt;code&gt;after_suite/1&lt;/code&gt; &lt;/a&gt;が複数回呼び出された場合、コールバックは逆の順序で呼び出されます。つまり、最後のコールバックセットが最初に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c2d101d3a59aa29536cff11d9f78612ab949d729" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#c:code_change/3&quot;&gt;&lt;code&gt;code_change/3&lt;/code&gt;&lt;/a&gt; raises the code change fails and the loop will continue with its previous state. Therefore this callback does not usually contain side effects.</source>
          <target state="translated">&lt;a href=&quot;#c:code_change/3&quot;&gt; &lt;code&gt;code_change/3&lt;/code&gt; &lt;/a&gt;が発生した場合、コードの変更は失敗し、ループは以前の状態で続行されます。したがって、このコールバックには通常、副作用は含まれていません。</target>
        </trans-unit>
        <trans-unit id="50441c2fc5e3f35b8a96fa96c6320ab57738cfc1" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt; is invoked and there are no names, a release using the application name and default values is assembled.</source>
          <target state="translated">場合&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;呼び出されるとは名前がない、アプリケーション名とデフォルト値を使用してリリースが組み立てられています。</target>
        </trans-unit>
        <trans-unit id="eea2e17ca11f5963667c13624c09484704b91de8" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt;, without a name, is invoked and there are multiple names, an error will be raised unless you set &lt;code&gt;default_release: NAME&lt;/code&gt; at the root of your project configuration.</source>
          <target state="translated">場合&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;、名前なしで、呼び出され、複数の名前を使用すると、設定しない限り、エラーが発生します、あります &lt;code&gt;default_release: NAME&lt;/code&gt; あなたのプロジェクト構成のルートに。</target>
        </trans-unit>
        <trans-unit id="1f1a0f874c702790d228021c47f6f58e4a98062d" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;#put_env/4&quot;&gt;&lt;code&gt;put_env/4&lt;/code&gt;&lt;/a&gt; is called before the application is loaded, the application environment values specified in the &lt;code&gt;.app&lt;/code&gt; file will override the ones previously set.</source>
          <target state="translated">アプリケーションがロードされる前に&lt;a href=&quot;#put_env/4&quot;&gt; &lt;code&gt;put_env/4&lt;/code&gt; &lt;/a&gt;が呼び出された場合、 &lt;code&gt;.app&lt;/code&gt; ファイルで指定されたアプリケーション環境値は、以前に設定されたものを上書きします。</target>
        </trans-unit>
        <trans-unit id="9f537d260ef97992e561be1422ea408f4c00b527" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:abort&lt;/code&gt;, the runtime system aborts producing a core dump, if that is enabled in the operating system.</source>
          <target state="translated">もし &lt;code&gt;:abort&lt;/code&gt; 、それは、オペレーティングシステムで有効になっている場合、コアダンプを生成するランタイムシステムのアボート。</target>
        </trans-unit>
        <trans-unit id="e351673ad711ca575120b265bcb522e29ffb1ff8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:all&lt;/code&gt; is given, &lt;code&gt;:eof&lt;/code&gt; is never returned, but an empty string in case the device has reached EOF.</source>
          <target state="translated">&lt;code&gt;:all&lt;/code&gt; が指定されている場合、 &lt;code&gt;:eof&lt;/code&gt; は返されませんが、デバイスがEOFに達した場合は空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="664fc2657c2121b52010aad0e4fd4b13a3191a1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:build_per_environment&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, it will create a new build per environment:</source>
          <target state="translated">場合 &lt;code&gt;:build_per_environment&lt;/code&gt; がに設定されている &lt;code&gt;true&lt;/code&gt; 、それは環境ごとに新しいビルドを作成します。</target>
        </trans-unit>
        <trans-unit id="1cd0a5e0adcba1255cdaf72cd16d9cb0159c0426" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:discard&lt;/code&gt; is given in &lt;code&gt;leftover&lt;/code&gt;, the last chunk is discarded unless it has exactly &lt;code&gt;count&lt;/code&gt; elements.</source>
          <target state="translated">場合 &lt;code&gt;:discard&lt;/code&gt; で与えられている &lt;code&gt;leftover&lt;/code&gt; 、それは正確にしていない限り、最後のチャンクは破棄され &lt;code&gt;count&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="4ad666f68aa0c1c3e9b90d4547788465ffe950b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;:stdio&lt;/code&gt; is a Unicode device, &lt;code&gt;count&lt;/code&gt; implies the number of Unicode code points to be retrieved. Otherwise, &lt;code&gt;count&lt;/code&gt; is the number of raw bytes to be retrieved.</source>
          <target state="translated">場合 &lt;code&gt;:stdio&lt;/code&gt; Unicodeの装置であり、 &lt;code&gt;count&lt;/code&gt; 取得するUnicodeコードポイントの数を意味しています。それ以外の場合、 &lt;code&gt;count&lt;/code&gt; は取得される未加工のバイト数です。</target>
        </trans-unit>
        <trans-unit id="1c37a0fde2ecc757cae6c2a1e1d8b99469865d32" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;@behaviour&lt;/code&gt; has been defined, &lt;code&gt;defoverridable&lt;/code&gt; can also be called with a module as an argument. All implemented callbacks from the behaviour above the call to &lt;code&gt;defoverridable&lt;/code&gt; will be marked as overridable.</source>
          <target state="translated">&lt;code&gt;@behaviour&lt;/code&gt; が定義されている場合、モジュールを引数として &lt;code&gt;defoverridable&lt;/code&gt; を呼び出すこともできます。 &lt;code&gt;defoverridable&lt;/code&gt; の呼び出しより上の動作から実装されたすべてのコールバックは、オーバーライド可能としてマークされます。</target>
        </trans-unit>
        <trans-unit id="0535dd7868286893881566e917783949810a614d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;count&lt;/code&gt; is a negative number, it starts counting from the back to the beginning of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; が負の数の場合は、 &lt;code&gt;enumerable&lt;/code&gt; 後ろから最初に向かってカウントを開始します。</target>
        </trans-unit>
        <trans-unit id="128e0031d4c1374c0210ba717199fde5a91caf98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;count&lt;/code&gt; is greater than the size of the rest of the &lt;code&gt;enumerable&lt;/code&gt;, then this function will reverse the rest of the enumerable.</source>
          <target state="translated">場合は &lt;code&gt;count&lt;/code&gt; 残りのサイズよりも大きい &lt;code&gt;enumerable&lt;/code&gt; 、この関数は、列挙の残りの部分が逆になります。</target>
        </trans-unit>
        <trans-unit id="64a4a2dc00ee57596c01d8e55272d16ee1731764" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;default&lt;/code&gt; is not provided, &lt;code&gt;nil&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; が指定されていない場合は、 &lt;code&gt;nil&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="4804fe88251de4efebed7a3b7f7ec9b900a0c7af" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dest&lt;/code&gt; is a PID, it must be the PID of a local process, dead or alive. If &lt;code&gt;dest&lt;/code&gt; is an atom, it must be the name of a registered process which is looked up at the time of delivery. No error is produced if the name does not refer to a process.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; がPIDの場合、それはローカルプロセスのPID（デッドオアライブ）でなければなりません。 &lt;code&gt;dest&lt;/code&gt; がアトムの場合は、配信時に検索される登録済みプロセスの名前でなければなりません。名前がプロセスを参照していない場合、エラーは生成されません。</target>
        </trans-unit>
        <trans-unit id="2650eb70496be023811483cdbe9dcf267336d48b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, monitoring is turned on. If &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, monitoring is turned off.</source>
          <target state="translated">場合は &lt;code&gt;flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、監視がオンになっています。 &lt;code&gt;flag&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、監視はオフになります。</target>
        </trans-unit>
        <trans-unit id="f1c832ccf95731edf1d63b91b33e2d1fe522cd25" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fun&lt;/code&gt; returns &lt;code&gt;{:halt, acc}&lt;/code&gt; the reduction is halted and the function returns &lt;code&gt;acc&lt;/code&gt;. Otherwise, if the enumerable is exhausted, the function returns the accumulator of the last &lt;code&gt;{:cont, acc}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が &lt;code&gt;{:halt, acc}&lt;/code&gt; 返す場合、削減は停止され、関数は &lt;code&gt;acc&lt;/code&gt; を返します。それ以外の場合、列挙型が使い尽くされると、関数は最後の &lt;code&gt;{:cont, acc}&lt;/code&gt; のアキュムレータを返します。</target>
        </trans-unit>
        <trans-unit id="448b014151f38127b8e5f6db3c5223d75cfbeb82" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;index_range.last&lt;/code&gt; is out of bounds, then it is assigned as the index of the last element.</source>
          <target state="translated">場合 &lt;code&gt;index_range.last&lt;/code&gt; が範囲外である、それは最後の要素のインデックスとして割り当てられています。</target>
        </trans-unit>
        <trans-unit id="f65e2abd74ff7207f89b8e63ffae32b6537b7ff2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;joiner&lt;/code&gt; is not passed at all, it defaults to an empty string.</source>
          <target state="translated">&lt;code&gt;joiner&lt;/code&gt; がまったく渡されない場合、デフォルトで空の文字列になります。</target>
        </trans-unit>
        <trans-unit id="44dafce589cc2560c530b258260863b84a7ad4e5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;joiner&lt;/code&gt; is not passed at all, it defaults to the empty binary.</source>
          <target state="translated">&lt;code&gt;joiner&lt;/code&gt; がまったく渡されない場合、デフォルトで空のバイナリが使用されます。</target>
        </trans-unit>
        <trans-unit id="3055a00c41cda5c6ac1a36cb205d2baa4d5b0fc8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; does not exist, a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない場合、&lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 例外が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="a91338d96953ddc227939bd5311d00c34a7770ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; does not exist, a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない場合、&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 例外が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="9e25538be406057a69443efa5940b2d432b4b6cc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; does not exist, lazily evaluates &lt;code&gt;fun&lt;/code&gt; and returns its result.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない、なまけ評価 &lt;code&gt;fun&lt;/code&gt; し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="0a81a69a6fcff94ffbea2c950485431c58d11511" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; does not exist, return the default value (&lt;code&gt;nil&lt;/code&gt; if no default value).</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が存在しない場合は、デフォルト値を返します（デフォルト値がない場合は &lt;code&gt;nil&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="670e493657f6e1800d6af7018ec7631dafc42777" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;keywords&lt;/code&gt;, a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が &lt;code&gt;keywords&lt;/code&gt; に存在しない場合、&lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="ab5d096dab446f6e25ac353134ecfc0c4cc20f01" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;keywords&lt;/code&gt;, a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;keywords&lt;/code&gt; &lt;code&gt;key&lt;/code&gt; が存在しない場合、&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="0aa66d148b2ac7a0571085f5d2ee7a7853bca2a8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; に存在しない場合、&lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b02bea90648629b86487eddfaee7cd58979250c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; に存在しない場合、&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="0ec4f9859acc852c12bc2e32bac9f65f8ba4fa9d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then its value &lt;code&gt;value&lt;/code&gt; is returned. Otherwise, &lt;code&gt;default&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; 存在する場合、その値の &lt;code&gt;value&lt;/code&gt; が返されます。それ以外の場合は、 &lt;code&gt;default&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c0f7c37563cdb97d23ddfed9427894d235eabfd3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then its value &lt;code&gt;value&lt;/code&gt; is returned. Otherwise, &lt;code&gt;fun&lt;/code&gt; is evaluated and its result is returned.</source>
          <target state="translated">If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then its value &lt;code&gt;value&lt;/code&gt; is returned. Otherwise, &lt;code&gt;fun&lt;/code&gt; is evaluated and its result is returned.</target>
        </trans-unit>
        <trans-unit id="fb8ab7d4cb46594f50af6648151d0e98d320b934" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then the existing value is passed to &lt;code&gt;fun&lt;/code&gt; and its result is used as the updated value of &lt;code&gt;key&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt; is inserted as the value of &lt;code&gt;key&lt;/code&gt;. The default value will not be passed through the update function.</source>
          <target state="translated">If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then the existing value is passed to &lt;code&gt;fun&lt;/code&gt; and its result is used as the updated value of &lt;code&gt;key&lt;/code&gt; . If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt; , &lt;code&gt;default&lt;/code&gt; is inserted as the value of &lt;code&gt;key&lt;/code&gt; . The default value will not be passed through the update function.</target>
        </trans-unit>
        <trans-unit id="d36aa454c42946e2c34ba9f399b287cb43ac6ce3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then the existing value is passed to &lt;code&gt;fun&lt;/code&gt; and its result is used as the updated value of &lt;code&gt;key&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; then the existing value is passed to &lt;code&gt;fun&lt;/code&gt; and its result is used as the updated value of &lt;code&gt;key&lt;/code&gt; . If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt; , a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt; exception is raised.</target>
        </trans-unit>
        <trans-unit id="d4150f660167317dcaba9e8183ce3412c0294207" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;fun&lt;/code&gt; is invoked with argument &lt;code&gt;value&lt;/code&gt; and its result is used as the new value of &lt;code&gt;key&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt; is inserted as the value of &lt;code&gt;key&lt;/code&gt;. The initial value will not be passed through the update function.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 中に存在する &lt;code&gt;map&lt;/code&gt; の値を持つ &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;fun&lt;/code&gt; 、引数で呼び出され &lt;code&gt;value&lt;/code&gt; とその結果は、新しい値として使用される &lt;code&gt;key&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; に存在しない場合、キーの値として &lt;code&gt;initial&lt;/code&gt; が挿入され &lt;code&gt;key&lt;/code&gt; 。初期値は更新関数を介して渡されません。</target>
        </trans-unit>
        <trans-unit id="75a038e3ca604bf73652a1d5909bc26acc1aa307" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;fun&lt;/code&gt; is invoked with argument &lt;code&gt;value&lt;/code&gt; and its result is used as the new value of &lt;code&gt;key&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 中に存在する &lt;code&gt;map&lt;/code&gt; の値を持つ &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;fun&lt;/code&gt; 、引数で呼び出され &lt;code&gt;value&lt;/code&gt; とその結果は、新しい値として使用される &lt;code&gt;key&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; に存在しない場合、&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="15c9a821a2b57a999e05676dbebd003979e0547e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;{value, new_map}&lt;/code&gt; is returned where &lt;code&gt;new_map&lt;/code&gt; is the result of removing &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;{default, map}&lt;/code&gt; is returned.</source>
          <target state="translated">場合 &lt;code&gt;key&lt;/code&gt; 中に存在する &lt;code&gt;map&lt;/code&gt; 値を持つ &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;{value, new_map}&lt;/code&gt; ここで返される &lt;code&gt;new_map&lt;/code&gt; を除去した結果である &lt;code&gt;key&lt;/code&gt; から &lt;code&gt;map&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; に存在しない場合、 &lt;code&gt;{default, map}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="9a0d4a917aec182ae2652ab6e3733862784d7df3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;{value, new_map}&lt;/code&gt; is returned where &lt;code&gt;new_map&lt;/code&gt; is the result of removing &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;{fun_result, map}&lt;/code&gt; is returned, where &lt;code&gt;fun_result&lt;/code&gt; is the result of applying &lt;code&gt;fun&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;key&lt;/code&gt; 中に存在する &lt;code&gt;map&lt;/code&gt; 値を持つ &lt;code&gt;value&lt;/code&gt; 、 &lt;code&gt;{value, new_map}&lt;/code&gt; ここで返される &lt;code&gt;new_map&lt;/code&gt; を除去した結果である &lt;code&gt;key&lt;/code&gt; から &lt;code&gt;map&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map&lt;/code&gt; に存在しない場合、 &lt;code&gt;{fun_result, map}&lt;/code&gt; が返されます &lt;code&gt;fun_result&lt;/code&gt; は &lt;code&gt;fun&lt;/code&gt; を適用した結果です。</target>
        </trans-unit>
        <trans-unit id="be3edc2b3eeca76a785d6024f2cdb09fb2dfde07" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, then &lt;code&gt;value&lt;/code&gt; is returned. Otherwise, &lt;code&gt;default&lt;/code&gt; is returned.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 中に存在する &lt;code&gt;map&lt;/code&gt; の値を持つ &lt;code&gt;value&lt;/code&gt; は、 &lt;code&gt;value&lt;/code&gt; 返されます。それ以外の場合は、 &lt;code&gt;default&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="57db7be79a09b897065af1bdf410edac419b10e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, then &lt;code&gt;value&lt;/code&gt; is returned. Otherwise, &lt;code&gt;fun&lt;/code&gt; is evaluated and its result is returned.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 中に存在する &lt;code&gt;map&lt;/code&gt; の値を持つ &lt;code&gt;value&lt;/code&gt; は、 &lt;code&gt;value&lt;/code&gt; 返されます。それ以外の場合、 &lt;code&gt;fun&lt;/code&gt; が評価され、その結果が返されます。</target>
        </trans-unit>
        <trans-unit id="bd7fdb0ce9bd64671ab1efe4609aaa8d9539ced9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt;, it returns &lt;code&gt;{value, new_map}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value of the key and &lt;code&gt;new_map&lt;/code&gt; is the result of removing &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;{default, map}&lt;/code&gt; is returned.</source>
          <target state="translated">If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; , it returns &lt;code&gt;{value, new_map}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value of the key and &lt;code&gt;new_map&lt;/code&gt; is the result of removing &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt; . If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt; , &lt;code&gt;{default, map}&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="6833696c36f33582651db81f8d535239158d24e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt;, it returns &lt;code&gt;{value, new_map}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value of the key and &lt;code&gt;new_map&lt;/code&gt; is the result of removing &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;{fun_result, map}&lt;/code&gt; is returned, where &lt;code&gt;fun_result&lt;/code&gt; is the result of applying &lt;code&gt;fun&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;key&lt;/code&gt; is present in &lt;code&gt;map&lt;/code&gt; , it returns &lt;code&gt;{value, new_map}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value of the key and &lt;code&gt;new_map&lt;/code&gt; is the result of removing &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt; . If &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt; , &lt;code&gt;{fun_result, map}&lt;/code&gt; is returned, where &lt;code&gt;fun_result&lt;/code&gt; is the result of applying &lt;code&gt;fun&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="022b1446733b2fda7810ec19631252125e1aa84b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keys&lt;/code&gt; contains keys that are not in &lt;code&gt;map&lt;/code&gt;, they're simply ignored.</source>
          <target state="translated">&lt;code&gt;keys&lt;/code&gt; に &lt;code&gt;map&lt;/code&gt; にないキーが含まれている場合、それらは単に無視されます。</target>
        </trans-unit>
        <trans-unit id="9ec06751513a7783f95f06711b8c297f9eb8290a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keywords2&lt;/code&gt; has duplicate keys, the given function will be invoked for each matching pair in &lt;code&gt;keywords1&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;keywords2&lt;/code&gt; が重複キーを有し、所与の機能は、各マッチングペアに対して呼び出される &lt;code&gt;keywords1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cda0fc7deb1f2ca2778dbdfbc7cd47a0b34753a5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;{:EXIT, pid}&lt;/code&gt;, it does not generate a stacktrace, as such exits are retrieved as messages without stacktraces.</source>
          <target state="translated">場合 &lt;code&gt;kind&lt;/code&gt; ある &lt;code&gt;{:EXIT, pid}&lt;/code&gt; このような出口はスタックトレースせずにメッセージとして検索されるように、それは、スタックトレースを生成しません。</target>
        </trans-unit>
        <trans-unit id="bfc34d2fd024a4826aee6c45876a01c2984997a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;left&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, returns &lt;code&gt;false&lt;/code&gt;; otherwise returns &lt;code&gt;right&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、falseを返し &lt;code&gt;false&lt;/code&gt; 。それ以外の場合は &lt;code&gt;right&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4bbd966d4ee1229ab0c4a3f43a8067bf69d0b551" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;left&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt;; otherwise returns &lt;code&gt;right&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;left&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、返す &lt;code&gt;true&lt;/code&gt; 。それ以外の場合は &lt;code&gt;right&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6e10ea7dbc53bb25e7807935c07de908ca7820b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;level&lt;/code&gt; is an integer, that's the indentation appended to line breaks whenever they occur. If the level is &lt;code&gt;:cursor&lt;/code&gt;, the current position of the &quot;cursor&quot; in the document becomes the nesting. If the level is &lt;code&gt;:reset&lt;/code&gt;, it is set back to 0.</source>
          <target state="translated">場合は &lt;code&gt;level&lt;/code&gt; 整数である、それは彼らが発生するたびに改行に追加インデントです。レベルが &lt;code&gt;:cursor&lt;/code&gt; の場合、ドキュメント内の「カーソル」の現在の位置がネストになります。レベルが &lt;code&gt;:reset&lt;/code&gt; の場合は、0に戻されます。</target>
        </trans-unit>
        <trans-unit id="b432fb4f2fd1db528a9d6842cc318272507dcd19" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;map&lt;/code&gt; contains &lt;code&gt;key&lt;/code&gt;, the corresponding value is returned. If &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;, a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">If &lt;code&gt;map&lt;/code&gt; contains &lt;code&gt;key&lt;/code&gt; , the corresponding value is returned. If &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt; , a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt; exception is raised.</target>
        </trans-unit>
        <trans-unit id="1bef2ee214360ef957032a298b1eb3e6a4177ceb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;map&lt;/code&gt; contains the given &lt;code&gt;key&lt;/code&gt; then its value is returned in the shape of &lt;code&gt;{:ok, value}&lt;/code&gt;. If &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;:error&lt;/code&gt; is returned.</source>
          <target state="translated">If &lt;code&gt;map&lt;/code&gt; contains the given &lt;code&gt;key&lt;/code&gt; then its value is returned in the shape of &lt;code&gt;{:ok, value}&lt;/code&gt; . If &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;:error&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="167313c87cdf050139328eaa55e0c8e46388fa2b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;map&lt;/code&gt; contains the given &lt;code&gt;key&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, then &lt;code&gt;{:ok, value}&lt;/code&gt; is returned. If &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;:error&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; に値 &lt;code&gt;value&lt;/code&gt; の指定された &lt;code&gt;key&lt;/code&gt; が含まれている場合、 &lt;code&gt;{:ok, value}&lt;/code&gt; が返されます。 &lt;code&gt;map&lt;/code&gt; &lt;code&gt;key&lt;/code&gt; が含まれていない場合、 &lt;code&gt;:error&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c6733d65c27213cccbcddb83b9fc95fccaae0b10" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;map&lt;/code&gt; contains the given &lt;code&gt;key&lt;/code&gt;, the corresponding value is returned. If &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;, a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; が指定された &lt;code&gt;key&lt;/code&gt; を含む場合、対応する値が返されます。 &lt;code&gt;map&lt;/code&gt; &lt;code&gt;key&lt;/code&gt; が含まれていない場合、&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="35d7fd154ea4c9faf69570f99b8c5aa4a3ac9ae1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;match&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, this function raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception: this happens because this function replaces &lt;strong&gt;all&lt;/strong&gt; the occurrences of &lt;code&gt;match&lt;/code&gt; at the beginning of &lt;code&gt;string&lt;/code&gt;, and it's impossible to replace &quot;multiple&quot; occurrences of &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;match&lt;/code&gt; ある &lt;code&gt;&quot;&quot;&lt;/code&gt; 、この機能は提起&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;：この関数は置き換えられているため、この問題が発生した例外を&lt;strong&gt;すべて&lt;/strong&gt;の出現 &lt;code&gt;match&lt;/code&gt; の先頭に &lt;code&gt;string&lt;/code&gt; 複数の「の出現を、そして交換することは不可能です」 &lt;code&gt;&quot;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9b141a234955b46f94cdff6fb97f75b39d6831d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;match&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, this function raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception: this happens because this function replaces &lt;strong&gt;all&lt;/strong&gt; the occurrences of &lt;code&gt;match&lt;/code&gt; at the end of &lt;code&gt;string&lt;/code&gt;, and it's impossible to replace &quot;multiple&quot; occurrences of &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;match&lt;/code&gt; ある &lt;code&gt;&quot;&quot;&lt;/code&gt; 、この機能は提起&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;：この関数は置き換えられているため、この問題が発生した例外を&lt;strong&gt;すべて&lt;/strong&gt;の出現 &lt;code&gt;match&lt;/code&gt; の末尾に &lt;code&gt;string&lt;/code&gt; 複数の「の出現を、そして交換することは不可能です」 &lt;code&gt;&quot;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb0185f097241d680d296e419b968e47a3c5201c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;match&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, this function raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception: this happens because this function replaces &lt;strong&gt;all&lt;/strong&gt; the occurrences of &lt;code&gt;match&lt;/code&gt; at the beginning of &lt;code&gt;string&lt;/code&gt;, and it's impossible to replace &quot;multiple&quot; occurrences of &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;match&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt; , this function raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; exception: this happens because this function replaces &lt;strong&gt;all&lt;/strong&gt; the occurrences of &lt;code&gt;match&lt;/code&gt; at the beginning of &lt;code&gt;string&lt;/code&gt; , and it's impossible to replace &quot;multiple&quot; occurrences of &lt;code&gt;&quot;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e72270cb672e9e4c9f071af85be8440eb64c674" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;match&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt;, this function raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception: this happens because this function replaces &lt;strong&gt;all&lt;/strong&gt; the occurrences of &lt;code&gt;match&lt;/code&gt; at the end of &lt;code&gt;string&lt;/code&gt;, and it's impossible to replace &quot;multiple&quot; occurrences of &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;match&lt;/code&gt; is &lt;code&gt;&quot;&quot;&lt;/code&gt; , this function raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; exception: this happens because this function replaces &lt;strong&gt;all&lt;/strong&gt; the occurrences of &lt;code&gt;match&lt;/code&gt; at the end of &lt;code&gt;string&lt;/code&gt; , and it's impossible to replace &quot;multiple&quot; occurrences of &lt;code&gt;&quot;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f9bdc0c8aedc4a0581ea9ca9cb9ad9a4fe54a0d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;modifiers&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;, then a unique integer (that can be positive or negative) is returned. Other modifiers can be passed to change the properties of the returned integer:</source>
          <target state="translated">&lt;code&gt;modifiers&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; の場合、一意の整数（正または負にすることができます）が返されます。他の修飾子を渡して、返される整数のプロパティを変更できます。</target>
        </trans-unit>
        <trans-unit id="ad9eab2323c428de698fefc4bfc22b40c45681ad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;module&lt;/code&gt; is an Erlang module (as opposed to an Elixir module), this function always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; が（Elixirモジュールではなく）Erlangモジュールの場合、この関数は常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0de03926a3208aa38b1bdc68fa4dd867a9992c7a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;monitor_ref&lt;/code&gt; is a reference which the calling process obtained by calling &lt;a href=&quot;#monitor/1&quot;&gt;&lt;code&gt;monitor/1&lt;/code&gt;&lt;/a&gt;, that monitoring is turned off. If the monitoring is already turned off, nothing happens.</source>
          <target state="translated">&lt;code&gt;monitor_ref&lt;/code&gt; が、呼び出しプロセスが&lt;a href=&quot;#monitor/1&quot;&gt; &lt;code&gt;monitor/1&lt;/code&gt; を&lt;/a&gt;呼び出して取得した参照である場合、その監視はオフになります。監視がすでにオフになっている場合、何も起こりません。</target>
        </trans-unit>
        <trans-unit id="a32f1f48118a9d4a2686cda59499e6684c476f2c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;msg&lt;/code&gt; is an atom, it just calls &lt;a href=&quot;#raise/2&quot;&gt;&lt;code&gt;raise/2&lt;/code&gt;&lt;/a&gt; with the atom as the first argument and &lt;code&gt;[]&lt;/code&gt; as the second argument.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; がアトムの場合、アトムを最初の引数として、 &lt;code&gt;[]&lt;/code&gt; を2番目の引数として、&lt;a href=&quot;#raise/2&quot;&gt; &lt;code&gt;raise/2&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e2591f3e8296742e9e675974bb3bfcb35d27b411" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;msg&lt;/code&gt; is an exception struct, it is raised as is.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; が例外構造体の場合、そのまま発生します。</target>
        </trans-unit>
        <trans-unit id="cefdb1ca1740aca5f5451a4dad984640e42d15f5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;msg&lt;/code&gt; is anything else, &lt;code&gt;raise&lt;/code&gt; will fail with an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; がそれ以外の場合、 &lt;code&gt;raise&lt;/code&gt; は&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="2f440776b416dcca31a3b5404a0ec8e4143798ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;msg&lt;/code&gt; is anything else, &lt;code&gt;raise&lt;/code&gt; will fail with an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">If &lt;code&gt;msg&lt;/code&gt; is anything else, &lt;code&gt;raise&lt;/code&gt; will fail with an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; exception.</target>
        </trans-unit>
        <trans-unit id="737a631e71f8710e641fef02c56115e74ed17ea3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, an empty list is returned.</source>
          <target state="translated">場合は &lt;code&gt;n&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; 、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="bc62758814a2f1d1d281641eed97d732d6ff6ae5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;node&lt;/code&gt; does not exist, a useless PID is returned.</source>
          <target state="translated">場合は &lt;code&gt;node&lt;/code&gt; 存在しない、役に立たないPIDが返されます。</target>
        </trans-unit>
        <trans-unit id="63d9a61082e21b3845e40428cb3a08f3ea73ce2e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;nth&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, then &lt;code&gt;enumerable&lt;/code&gt; is directly converted to a list, without &lt;code&gt;fun&lt;/code&gt; being ever applied.</source>
          <target state="translated">場合は &lt;code&gt;nth&lt;/code&gt; ある &lt;code&gt;0&lt;/code&gt; 、その後、 &lt;code&gt;enumerable&lt;/code&gt; 直接せずに、リストに変換され、 &lt;code&gt;fun&lt;/code&gt; 、これまで適用されています。</target>
        </trans-unit>
        <trans-unit id="2840ae873ffd42facf8e147450543acef64559c5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path&lt;/code&gt; exists and is a symlink, returns &lt;code&gt;{:ok, target}&lt;/code&gt;, otherwise returns &lt;code&gt;{:error, reason}&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;path&lt;/code&gt; 存在し、シンボリックリンクであり、戻り &lt;code&gt;{:ok, target}&lt;/code&gt; 、そうでなければ戻り &lt;code&gt;{:error, reason}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f340b85ba7c5a6e0ec3e07ae4245f7c6097e6db" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path&lt;/code&gt; is a string, then it will be used as the path inside &lt;a href=&quot;#app_dir/1&quot;&gt;&lt;code&gt;app_dir/1&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is a list of strings, it will be joined (see &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#join/1&quot;&gt;&lt;code&gt;Path.join/1&lt;/code&gt;&lt;/a&gt;) and the result will be used as the path inside &lt;a href=&quot;#app_dir/1&quot;&gt;&lt;code&gt;app_dir/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If &lt;code&gt;path&lt;/code&gt; is a string, then it will be used as the path inside &lt;a href=&quot;#app_dir/1&quot;&gt; &lt;code&gt;app_dir/1&lt;/code&gt; &lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is a list of strings, it will be joined (see &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#join/1&quot;&gt; &lt;code&gt;Path.join/1&lt;/code&gt; &lt;/a&gt;) and the result will be used as the path inside &lt;a href=&quot;#app_dir/1&quot;&gt; &lt;code&gt;app_dir/1&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6c154c595d1b4a01fb083386caa6ace778641f9e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path&lt;/code&gt; is a string, then it will be used as the path inside &lt;a href=&quot;#app_dir/1&quot;&gt;&lt;code&gt;app_dir/1&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;path&lt;/code&gt; is a list of strings, it will be joined (see &lt;a href=&quot;path#join/1&quot;&gt;&lt;code&gt;Path.join/1&lt;/code&gt;&lt;/a&gt;) and the result will be used as the path inside &lt;a href=&quot;#app_dir/1&quot;&gt;&lt;code&gt;app_dir/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; が文字列の場合は、&lt;a href=&quot;#app_dir/1&quot;&gt; &lt;code&gt;app_dir/1&lt;/code&gt; &lt;/a&gt;内のパスとして使用されます。 &lt;code&gt;path&lt;/code&gt; が文字列のリストの場合、それは結合され（&lt;a href=&quot;path#join/1&quot;&gt; &lt;code&gt;Path.join/1&lt;/code&gt; を&lt;/a&gt;参照）、結果は&lt;a href=&quot;#app_dir/1&quot;&gt; &lt;code&gt;app_dir/1&lt;/code&gt; &lt;/a&gt;内のパスとして使用されます。</target>
        </trans-unit>
        <trans-unit id="30981afdf653766b4f2d8e17a8e76f8900fd6c71" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path&lt;/code&gt; is already an absolute path, &lt;code&gt;relative_to&lt;/code&gt; is ignored. See also &lt;a href=&quot;#relative_to/2&quot;&gt;&lt;code&gt;relative_to/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;path&lt;/code&gt; すでに絶対パスで、 &lt;code&gt;relative_to&lt;/code&gt; は無視されます。&lt;a href=&quot;#relative_to/2&quot;&gt; &lt;code&gt;relative_to/2&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="4964bfcbfec35a641632c64af60eb6aaa93a561b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path&lt;/code&gt; points to a file, prints its full path.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; がファイルを指している場合、その完全パスを出力します。</target>
        </trans-unit>
        <trans-unit id="4b1a93e9b2e0e773dda7a088ec139c68425c9cc5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path_or_wildcard&lt;/code&gt; is a wildcard, then all the files matching that wildcard will be imported; if no file matches the wildcard, no errors are raised. If &lt;code&gt;path_or_wildcard&lt;/code&gt; is not a wildcard but a path to a single file, then that file is imported; in case the file doesn't exist, an error is raised.</source>
          <target state="translated">If &lt;code&gt;path_or_wildcard&lt;/code&gt; is a wildcard, then all the files matching that wildcard will be imported; if no file matches the wildcard, no errors are raised. If &lt;code&gt;path_or_wildcard&lt;/code&gt; is not a wildcard but a path to a single file, then that file is imported; in case the file doesn't exist, an error is raised.</target>
        </trans-unit>
        <trans-unit id="4ed36549216e7c96c0405d66d46c768efd40ee4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pid&lt;/code&gt; is not trapping exits, &lt;code&gt;pid&lt;/code&gt; will exit with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; が出口をトラップしていない場合、 &lt;code&gt;pid&lt;/code&gt; は指定された &lt;code&gt;reason&lt;/code&gt; 終了します。</target>
        </trans-unit>
        <trans-unit id="633950331a76abae7c27012953c6b5ce717504f2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;pid&lt;/code&gt; is trapping exits, the exit signal is transformed into a message &lt;code&gt;{:EXIT, from, reason}&lt;/code&gt; and delivered to the message queue of &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;pid&lt;/code&gt; 終了トラップされ、終了信号は、メッセージに変換される &lt;code&gt;{:EXIT, from, reason}&lt;/code&gt; とのメッセージキューに配信 &lt;code&gt;pid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edb5e8ad174fd02444bbcb56b3f2079cf73580c0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;prefix&lt;/code&gt; is an empty list, it returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;prefix&lt;/code&gt; 空のリストである、それが返されます &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26bd0886bea64b0650f1573c9fd139f06c9e5d37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reason&lt;/code&gt; is neither &lt;code&gt;:normal&lt;/code&gt;, &lt;code&gt;:shutdown&lt;/code&gt;, nor &lt;code&gt;{:shutdown, term}&lt;/code&gt; an error is logged.</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; が &lt;code&gt;:normal&lt;/code&gt; 、 &lt;code&gt;:shutdown&lt;/code&gt; 、または &lt;code&gt;{:shutdown, term}&lt;/code&gt; いずれでもない場合、エラーがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="5c120fe241858b080c2215e59c9d1dfe3c97d43f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reason&lt;/code&gt; is the atom &lt;code&gt;:kill&lt;/code&gt;, that is if &lt;code&gt;Process.exit(pid, :kill)&lt;/code&gt; is called, an untrappable exit signal is sent to &lt;code&gt;pid&lt;/code&gt; which will unconditionally exit with reason &lt;code&gt;:killed&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;reason&lt;/code&gt; 原子である &lt;code&gt;:kill&lt;/code&gt; あれば、それはされ &lt;code&gt;Process.exit(pid, :kill)&lt;/code&gt; 呼ばれ、untrappable終了信号がに送信され &lt;code&gt;pid&lt;/code&gt; 無条件理由で終了します &lt;code&gt;:killed&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c72ae981d0ae09b809a5b5a5aa46cd4ec885a9e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reason&lt;/code&gt; is the atom &lt;code&gt;:normal&lt;/code&gt;, &lt;code&gt;pid&lt;/code&gt; will not exit (unless &lt;code&gt;pid&lt;/code&gt; is the calling process, in which case it will exit with the reason &lt;code&gt;:normal&lt;/code&gt;). If it is trapping exits, the exit signal is transformed into a message &lt;code&gt;{:EXIT, from, :normal}&lt;/code&gt; and delivered to its message queue.</source>
          <target state="translated">場合は &lt;code&gt;reason&lt;/code&gt; 原子である &lt;code&gt;:normal&lt;/code&gt; 、 &lt;code&gt;pid&lt;/code&gt; は（しない限り、終了しません &lt;code&gt;pid&lt;/code&gt; はそれが理由で終了します。その場合には呼び出したプロセスである &lt;code&gt;:normal&lt;/code&gt; ）。出口をトラップしている場合、出口信号はメッセージ &lt;code&gt;{:EXIT, from, :normal}&lt;/code&gt; 変換され、そのメッセージキューに配信されます。</target>
        </trans-unit>
        <trans-unit id="0983db92616650bea49a21e4bb3960c0964601e9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;right&lt;/code&gt; is a regular expression, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;left&lt;/code&gt; matches right.</source>
          <target state="translated">If &lt;code&gt;right&lt;/code&gt; is a regular expression, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;left&lt;/code&gt; matches right.</target>
        </trans-unit>
        <trans-unit id="d39df5af32cb5fb2bbe1045964270d68e1f1f5a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;right&lt;/code&gt; is a string, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;left&lt;/code&gt; contains &lt;code&gt;right&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;right&lt;/code&gt; is a string, returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;left&lt;/code&gt; contains &lt;code&gt;right&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="def9dbc5ab56f1b825b6729ff4b5f2b1cf2751f1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;setup_all&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; return a keyword list, a map, or &lt;code&gt;{:ok, keywords | map}&lt;/code&gt;, the keyword list or map will be merged into the current context and will be available in all subsequent &lt;code&gt;setup_all&lt;/code&gt;, &lt;code&gt;setup&lt;/code&gt;, and the &lt;code&gt;test&lt;/code&gt; itself.</source>
          <target state="translated">&lt;code&gt;setup_all&lt;/code&gt; または &lt;code&gt;setup&lt;/code&gt; がキーワードリスト、マップ、または &lt;code&gt;{:ok, keywords | map}&lt;/code&gt; 返す場合 map}、キーワードリストまたはマップは現在のコンテキストにマージされ、以降のすべての &lt;code&gt;setup_all&lt;/code&gt; 、 &lt;code&gt;setup&lt;/code&gt; 、および &lt;code&gt;test&lt;/code&gt; 自体で使用できます。</target>
        </trans-unit>
        <trans-unit id="427abb795faa00170a2a73c64fef9d4e09adf4d0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;setup_all&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; return a keyword list, a map, or a tuple in the shape of &lt;code&gt;{:ok, keyword() | map()}&lt;/code&gt;, the keyword list or map will be merged into the current context and will be available in all subsequent &lt;code&gt;setup_all&lt;/code&gt;, &lt;code&gt;setup&lt;/code&gt;, and the &lt;code&gt;test&lt;/code&gt; itself.</source>
          <target state="translated">If &lt;code&gt;setup_all&lt;/code&gt; or &lt;code&gt;setup&lt;/code&gt; return a keyword list, a map, or a tuple in the shape of &lt;code&gt;{:ok, keyword() | map()}&lt;/code&gt; , the keyword list or map will be merged into the current context and will be available in all subsequent &lt;code&gt;setup_all&lt;/code&gt; , &lt;code&gt;setup&lt;/code&gt; , and the &lt;code&gt;test&lt;/code&gt; itself.</target>
        </trans-unit>
        <trans-unit id="977e9939903f7075b75909cc132a74bc274c1bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is a directory, or a symbolic link to it, then &lt;code&gt;destination&lt;/code&gt; must be an existent &lt;code&gt;directory&lt;/code&gt; or a symbolic link to one, or a path to a non-existent directory.</source>
          <target state="translated">場合は &lt;code&gt;source&lt;/code&gt; 、ディレクトリ、またはそれへのシンボリックリンクになって、それから &lt;code&gt;destination&lt;/code&gt; 存在しなければなりません &lt;code&gt;directory&lt;/code&gt; または1つ、または存在しないディレクトリへのパスへのシンボリックリンク。</target>
        </trans-unit>
        <trans-unit id="1031bcdd561dcecee641f002ce883c7af7e61139" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is a file or a symbolic link to it, &lt;code&gt;destination&lt;/code&gt; must be a path to an existent file, a symbolic link to one, or a path to a non-existent file.</source>
          <target state="translated">場合は &lt;code&gt;source&lt;/code&gt; ファイルまたはそれへのシンボリックリンクがあり、 &lt;code&gt;destination&lt;/code&gt; 存在しないファイルへのパス、1へのシンボリックリンク、または存在しないファイルへのパスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="e57c5ea9358fe4a917bdf2d9fa6f002a7ca491dc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; reference in any way outside the binary, an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">場合 &lt;code&gt;start&lt;/code&gt; または &lt;code&gt;length&lt;/code&gt; 基準バイナリ外部任意の方法で、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="fc6be87bc2a88ec11feb6fb3046cd38c5b7a4a35" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; reference in any way outside the binary, an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">If &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; reference in any way outside the binary, an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; exception is raised.</target>
        </trans-unit>
        <trans-unit id="148baaf20a5501cf402aa842127aa44f861d748c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string&lt;/code&gt; is an invalid requirement, a &lt;a href=&quot;https://hexdocs.pm/elixir/Version.InvalidRequirementError.html&quot;&gt;&lt;code&gt;Version.InvalidRequirementError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">If &lt;code&gt;string&lt;/code&gt; is an invalid requirement, a &lt;a href=&quot;https://hexdocs.pm/elixir/Version.InvalidRequirementError.html&quot;&gt; &lt;code&gt;Version.InvalidRequirementError&lt;/code&gt; &lt;/a&gt; is raised.</target>
        </trans-unit>
        <trans-unit id="bd707d6ea9c236adf3d2d26891903697d910f532" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string&lt;/code&gt; is an invalid requirement, a &lt;a href=&quot;version.invalidrequirementerror&quot;&gt;&lt;code&gt;Version.InvalidRequirementError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">場合は &lt;code&gt;string&lt;/code&gt; 無効な要件である、&lt;a href=&quot;version.invalidrequirementerror&quot;&gt; &lt;code&gt;Version.InvalidRequirementError&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="a8f525d0b692b55f071ed6b31ea8e88fb78dc738" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string&lt;/code&gt; is an invalid version, a &lt;a href=&quot;https://hexdocs.pm/elixir/Version.InvalidVersionError.html&quot;&gt;&lt;code&gt;Version.InvalidVersionError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">If &lt;code&gt;string&lt;/code&gt; is an invalid version, a &lt;a href=&quot;https://hexdocs.pm/elixir/Version.InvalidVersionError.html&quot;&gt; &lt;code&gt;Version.InvalidVersionError&lt;/code&gt; &lt;/a&gt; is raised.</target>
        </trans-unit>
        <trans-unit id="b6f9f03b1dcc9dbff5dcc7644074dd977a2959ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;string&lt;/code&gt; is an invalid version, a &lt;a href=&quot;version.invalidversionerror&quot;&gt;&lt;code&gt;Version.InvalidVersionError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">場合は &lt;code&gt;string&lt;/code&gt; 無効なバージョンである、&lt;a href=&quot;version.invalidversionerror&quot;&gt; &lt;code&gt;Version.InvalidVersionError&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="9a1f85d96ca473515ee41dccc4b5c470d6806e79" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;target&lt;/code&gt; already exists and the contents are not the same, it asks for user confirmation.</source>
          <target state="translated">If &lt;code&gt;target&lt;/code&gt; already exists and the contents are not the same, it asks for user confirmation.</target>
        </trans-unit>
        <trans-unit id="ae363da5635ac26a38468a274fa68594bffd7223" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;term&lt;/code&gt; is already a list, it returns the list. If &lt;code&gt;term&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, it returns an empty list.</source>
          <target state="translated">場合は &lt;code&gt;term&lt;/code&gt; すでにリストである、それはリストを返します。 &lt;code&gt;term&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c189d5b72f733627440a207910c642f9ff77e60b" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;%URI{}&lt;/code&gt; struct is given to this function, this function returns it unmodified.</source>
          <target state="translated">場合 &lt;code&gt;%URI{}&lt;/code&gt; 構造体は、この関数に与えられ、この関数は、それが未修飾返します。</target>
        </trans-unit>
        <trans-unit id="abcc9ba322766c6ecd47929cf37e2de456cad2b7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;:skip&lt;/code&gt; tag is found in &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;{:skipped, message}&lt;/code&gt; is returned if the test has been left after the &lt;code&gt;exclude&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt; filters. Otherwise &lt;code&gt;{:exclude, message}&lt;/code&gt; is returned.</source>
          <target state="translated">If a &lt;code&gt;:skip&lt;/code&gt; tag is found in &lt;code&gt;tags&lt;/code&gt; , &lt;code&gt;{:skipped, message}&lt;/code&gt; is returned if the test has been left after the &lt;code&gt;exclude&lt;/code&gt; and &lt;code&gt;include&lt;/code&gt; filters. Otherwise &lt;code&gt;{:exclude, message}&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="ae7e1652eb18779b4dcf4919c203ef71000bcfb9" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;config/runtime.exs&lt;/code&gt; exists, it will be copied to your release and executed early in the boot process, when only Elixir and Erlang's main applications have been started. Once the configuration is loaded, the Erlang system will be restarted (within the same Operating System process) and the new configuration will take place.</source>
          <target state="translated">If a &lt;code&gt;config/runtime.exs&lt;/code&gt; exists, it will be copied to your release and executed early in the boot process, when only Elixir and Erlang's main applications have been started. Once the configuration is loaded, the Erlang system will be restarted (within the same Operating System process) and the new configuration will take place.</target>
        </trans-unit>
        <trans-unit id="9cb5769774bfa8aa4c65da1e51375f078f53a47d" translate="yes" xml:space="preserve">
          <source>If a byte has 8 bits, what happens if we pass a size of 1 bit?</source>
          <target state="translated">バイトが8ビットの場合、1ビットのサイズを渡すとどうなるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="0ac581e270299e95270be44edc11d5d78635bdbb" translate="yes" xml:space="preserve">
          <source>If a callback is given, it is invoked for each received message.</source>
          <target state="translated">コールバックが与えられた場合は、受信したメッセージごとに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9510d4ce0d205517cf9f92994b15bfbfe1510aa1" translate="yes" xml:space="preserve">
          <source>If a callback module that implements a given behaviour doesn't export all the functions and macros defined by that behaviour, the user will be notified through warnings during the compilation process (no errors will happen).</source>
          <target state="translated">与えられたビヘイビアを実装したコールバックモジュールが、そのビヘイビアで定義されたすべての関数とマクロをエクスポートしない場合、コンパイル処理中に警告を通じてユーザーに通知されます(エラーは発生しません)。</target>
        </trans-unit>
        <trans-unit id="69b52804cd17d7f8a0689854f3222713a2e4c149" translate="yes" xml:space="preserve">
          <source>If a child specification with the specified ID already exists, &lt;code&gt;child_spec&lt;/code&gt; is discarded and this function returns an error with &lt;code&gt;:already_started&lt;/code&gt; or &lt;code&gt;:already_present&lt;/code&gt; if the corresponding child process is running or not, respectively.</source>
          <target state="translated">指定したIDの子仕様がすでに存在する場合、 &lt;code&gt;child_spec&lt;/code&gt; は破棄され、対応する子プロセスが実行中かどうかに応じて、この関数は &lt;code&gt;:already_started&lt;/code&gt; または &lt;code&gt;:already_present&lt;/code&gt; のエラーをそれぞれ返します。</target>
        </trans-unit>
        <trans-unit id="624738a0046889600ef5bfdcc03d5da8090ab0e9" translate="yes" xml:space="preserve">
          <source>If a cookie option was given, we compare it with the contents of the file (if any), and ask the user if they want to override.</source>
          <target state="translated">クッキーのオプションが与えられていた場合は、ファイルの内容と比較し(もしあれば)、上書きするかどうかをユーザに尋ねます。</target>
        </trans-unit>
        <trans-unit id="4e2890f26410463009016ad753f613992362cbef" translate="yes" xml:space="preserve">
          <source>If a file already exists in the destination, it invokes &lt;code&gt;callback&lt;/code&gt;. &lt;code&gt;callback&lt;/code&gt; must be a function that takes two arguments: &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt;. The callback should return &lt;code&gt;true&lt;/code&gt; if the existing file should be overwritten and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">ファイルが宛先にすでに存在する場合は、 &lt;code&gt;callback&lt;/code&gt; を呼び出します。 &lt;code&gt;callback&lt;/code&gt; は、 &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;destination&lt;/code&gt; の 2つの引数を取る関数でなければなりません。コールバックは、既存のファイルを上書きする必要が &lt;code&gt;true&lt;/code&gt; 場合はtrueを返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cabdc7b8c3d548d6762d990a45e3c0db4093b48f" translate="yes" xml:space="preserve">
          <source>If a file already exists in the destination, it invokes a callback which should return &lt;code&gt;true&lt;/code&gt; if the existing file should be overwritten, &lt;code&gt;false&lt;/code&gt; otherwise. The callback defaults to return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ファイルが宛先にすでに存在する場合、既存のファイルを上書きする必要が &lt;code&gt;true&lt;/code&gt; 場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返すコールバックを呼び出します。コールバックはデフォルトで &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1f5282b08680f8cf98b1cf98c1763e902d8a8cf1" translate="yes" xml:space="preserve">
          <source>If a function is provided, the device will be created and sent to the function. When the function returns, the device will be closed. The final result will be a tuple with &lt;code&gt;:ok&lt;/code&gt; and the result of the function.</source>
          <target state="translated">関数が提供されている場合、デバイスが作成され、関数に送信されます。関数が戻ると、デバイスは閉じられます。最終結果は、 &lt;code&gt;:ok&lt;/code&gt; と関数の結果を持つタプルになります。</target>
        </trans-unit>
        <trans-unit id="d38f06a2f29af4b9a58ad54b574b4b65c78e3313" translate="yes" xml:space="preserve">
          <source>If a function with default values has multiple clauses, it is required to create a function head (without an actual body) for declaring defaults:</source>
          <target state="translated">デフォルト値を持つ関数が複数の節を持つ場合、デフォルト値を宣言するための関数ヘッド(実際のボディを持たない)を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="000c898cfeca7c250248fbd1fa1ca561171bdc1f" translate="yes" xml:space="preserve">
          <source>If a given line starts a &lt;code&gt;describe&lt;/code&gt; block, that line filter runs all tests in it. Otherwise, it runs the closest test on or before the given line number.</source>
          <target state="translated">特定の行が &lt;code&gt;describe&lt;/code&gt; ブロックを開始する場合、その行フィルターはその中のすべてのテストを実行します。それ以外の場合は、指定された行番号以前の最も近いテストを実行します。</target>
        </trans-unit>
        <trans-unit id="d537fdd4d0b14a07a0a04df5203e5b0b7c078fd6" translate="yes" xml:space="preserve">
          <source>If a key in the pattern is not available in the map, then they won't match:</source>
          <target state="translated">パターン内のキーがマップ内にない場合は一致しません。</target>
        </trans-unit>
        <trans-unit id="79925800db01e377c0a45bd22e7acc683fbfbe07" translate="yes" xml:space="preserve">
          <source>If a key is a function, the function will be invoked passing three arguments:</source>
          <target state="translated">キーが関数の場合は、3つの引数を渡して関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="29fd70a945f925cf23cc7e6f8035b1a44027a7d0" translate="yes" xml:space="preserve">
          <source>If a list is made of non-negative integers, where each integer represents a Unicode code point, the list can also be called a charlist. These integers must:</source>
          <target state="translated">リ ス ト が非負の整数で構成 さ れてお り 、 各整数が Unicode コ ー ド 点を表 し てい る と き は、 その リ ス ト は charlist と 呼ぶ こ と も で き ます。これらの整数は必須です。</target>
        </trans-unit>
        <trans-unit id="459ad8c7d2d4dfeac7cad82c1512116c71e69047" translate="yes" xml:space="preserve">
          <source>If a list of dependencies is given, Mix will attempt to compile them as is. For example, if project &lt;code&gt;a&lt;/code&gt; depends on &lt;code&gt;b&lt;/code&gt;, calling &lt;code&gt;mix deps.compile a&lt;/code&gt; will compile &lt;code&gt;a&lt;/code&gt; even if &lt;code&gt;b&lt;/code&gt; is out of date. This is to allow parts of the dependency tree to be recompiled without propagating those changes upstream. To ensure &lt;code&gt;b&lt;/code&gt; is included in the compilation step, pass &lt;code&gt;--include-children&lt;/code&gt;.</source>
          <target state="translated">If a list of dependencies is given, Mix will attempt to compile them as is. For example, if project &lt;code&gt;a&lt;/code&gt; depends on &lt;code&gt;b&lt;/code&gt; , calling &lt;code&gt;mix deps.compile a&lt;/code&gt; will compile &lt;code&gt;a&lt;/code&gt; even if &lt;code&gt;b&lt;/code&gt; is out of date. This is to allow parts of the dependency tree to be recompiled without propagating those changes upstream. To ensure &lt;code&gt;b&lt;/code&gt; is included in the compilation step, pass &lt;code&gt;--include-children&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b421abd37694bae36c7d25d86ffa518fdbbea4dd" translate="yes" xml:space="preserve">
          <source>If a module adopting a given behaviour doesn&amp;rsquo;t implement one of the callbacks required by that behaviour, a compile-time warning will be generated.</source>
          <target state="translated">特定の動作を採用しているモジュールがその動作に必要なコールバックの1つを実装していない場合、コンパイル時の警告が生成されます。</target>
        </trans-unit>
        <trans-unit id="883d15353620b14cbb9c9d5a06e95f6b6c4d20b6" translate="yes" xml:space="preserve">
          <source>If a negative &lt;code&gt;amount&lt;/code&gt; is given, the &lt;code&gt;amount&lt;/code&gt; of elements will be taken from the end. The &lt;code&gt;enumerable&lt;/code&gt; will be enumerated once to retrieve the proper index and the remaining calculation is performed from the end.</source>
          <target state="translated">負の場合 &lt;code&gt;amount&lt;/code&gt; 与えられ、 &lt;code&gt;amount&lt;/code&gt; 要素のエンドから取得されます。 &lt;code&gt;enumerable&lt;/code&gt; 適切なインデックスを取得するために、一度列挙され、残りの計算は、端部から行われます。</target>
        </trans-unit>
        <trans-unit id="6cc671d5a37ef968ded5582cc81fb0522d873170" translate="yes" xml:space="preserve">
          <source>If a negative &lt;code&gt;amount&lt;/code&gt; is given, the &lt;code&gt;amount&lt;/code&gt; of last values will be dropped. The &lt;code&gt;enumerable&lt;/code&gt; will be enumerated once to retrieve the proper index and the remaining calculation is performed from the end.</source>
          <target state="translated">負の場合は &lt;code&gt;amount&lt;/code&gt; 与えられ、 &lt;code&gt;amount&lt;/code&gt; 最後の値はドロップされます。 &lt;code&gt;enumerable&lt;/code&gt; 適切なインデックスを取得するために、一度列挙され、残りの計算は、端部から行われます。</target>
        </trans-unit>
        <trans-unit id="59caaee16729c3dbee5fe847e2d7d4842c9c683a" translate="yes" xml:space="preserve">
          <source>If a negative &lt;code&gt;count&lt;/code&gt; is given, the last &lt;code&gt;count&lt;/code&gt; values will be taken. For such, the collection is fully enumerated keeping up to &lt;code&gt;2 * count&lt;/code&gt; elements in memory. Once the end of the collection is reached, the last &lt;code&gt;count&lt;/code&gt; elements will be executed. Therefore, using a negative &lt;code&gt;count&lt;/code&gt; on an infinite collection will never return.</source>
          <target state="translated">負の &lt;code&gt;count&lt;/code&gt; が指定された場合、最後の &lt;code&gt;count&lt;/code&gt; 値が取得されます。そのため、コレクションは完全に列挙され、最大 &lt;code&gt;2 * count&lt;/code&gt; 要素をメモリに保持します。コレクションの終わりに達すると、最後の &lt;code&gt;count&lt;/code&gt; 要素が実行されます。したがって、無限のコレクションで負の &lt;code&gt;count&lt;/code&gt; を使用すると、戻りません。</target>
        </trans-unit>
        <trans-unit id="f69e4dbe00c1ada199c059c775f25efeb8310586" translate="yes" xml:space="preserve">
          <source>If a negative &lt;code&gt;n&lt;/code&gt; is given, it will drop the last &lt;code&gt;n&lt;/code&gt; elements from the collection. Note that the mechanism by which this is implemented will delay the emission of any element until &lt;code&gt;n&lt;/code&gt; additional elements have been emitted by the enum.</source>
          <target state="translated">負の &lt;code&gt;n&lt;/code&gt; を指定すると、コレクションから最後の &lt;code&gt;n&lt;/code&gt; 個の要素が削除されます。これが実装されるメカニズムは、 &lt;code&gt;n&lt;/code&gt; 個の追加の要素が列挙型によって発行されるまで、要素の発行を遅らせることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1945f4f47fb811a9fdec36bceacc04e13f4b23dd" translate="yes" xml:space="preserve">
          <source>If a non-unique registry is given, an error is raised.</source>
          <target state="translated">一意ではないレジストリが与えられた場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="7fe100a04f7f3c2228565ba1dad4a516ece48f3e" translate="yes" xml:space="preserve">
          <source>If a positive &lt;code&gt;amount&lt;/code&gt; is given, it takes the &lt;code&gt;amount&lt;/code&gt; elements from the beginning of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">正の &lt;code&gt;amount&lt;/code&gt; が指定されている場合、それは &lt;code&gt;enumerable&lt;/code&gt; の最初から &lt;code&gt;amount&lt;/code&gt; 要素を取ります。</target>
        </trans-unit>
        <trans-unit id="273c42e7694ef6f6a0ae619fbbe7e5dc6c7edfb5" translate="yes" xml:space="preserve">
          <source>If a previous value is already stored, all entries are removed and the value is overridden.</source>
          <target state="translated">前の値がすでに格納されている場合は、すべてのエントリが削除され、値が上書きされます。</target>
        </trans-unit>
        <trans-unit id="44015a59f9f7a33ffc75deedd1425577f41943be" translate="yes" xml:space="preserve">
          <source>If a protocol implementation is not found for a given type, invoking the protocol will raise unless it is configured to fall back to &lt;code&gt;Any&lt;/code&gt;. Conveniences for building implementations on top of existing ones are also available, look at &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; for more information about deriving protocols.</source>
          <target state="translated">If a protocol implementation is not found for a given type, invoking the protocol will raise unless it is configured to fall back to &lt;code&gt;Any&lt;/code&gt; . Conveniences for building implementations on top of existing ones are also available, look at &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt; for more information about deriving protocols.</target>
        </trans-unit>
        <trans-unit id="43fc3383844fcfe72ece54d10710bd0bd9f25337" translate="yes" xml:space="preserve">
          <source>If a protocol implementation is not found for a given type, invoking the protocol will raise unless it is configured to fall back to &lt;code&gt;Any&lt;/code&gt;. Conveniences for building implementations on top of existing ones are also available, look at &lt;a href=&quot;kernel#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; for more information about deriving protocols.</source>
          <target state="translated">特定のタイプのプロトコル実装が見つからない場合、 &lt;code&gt;Any&lt;/code&gt; にフォールバックするように構成されていない限り、プロトコルを呼び出すと発生します。既存の実装の上に実装を構築するための便利な機能も利用できます。プロトコルの派生の詳細については、&lt;a href=&quot;kernel#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a016d1410ce73603f7d41b32703713ab6681b5cb" translate="yes" xml:space="preserve">
          <source>If a range is passed into the function, this function will pick a random value between the range limits, without traversing the whole range (thus executing in constant time and constant memory).</source>
          <target state="translated">関数に範囲が渡された場合、この関数は範囲全体を横断することなく、範囲の限界値の間のランダムな値を選択します(このようにして、一定の時間と一定のメモリで実行されます)。</target>
        </trans-unit>
        <trans-unit id="4e6fe5e08b24cf20a9c0798353e64ac83dfa14b4" translate="yes" xml:space="preserve">
          <source>If a record defines an anonymous function in the default values, an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; will be raised. This can happen unintentionally when defining a record after extracting it from an Erlang library that uses anonymous functions for defaults.</source>
          <target state="translated">レコードがデフォルト値で無名関数を定義している場合、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;が発生します。これは、デフォルトの匿名関数を使用するErlangライブラリからレコードを抽出した後でレコードを定義するときに、意図せずに発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7d5db183ff92e0f2a4bace49c1074a0f1a8e87bc" translate="yes" xml:space="preserve">
          <source>If a record defines an anonymous function in the default values, an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; will be raised. This can happen unintentionally when defining a record after extracting it from an Erlang library that uses anonymous functions for defaults.</source>
          <target state="translated">If a record defines an anonymous function in the default values, an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; will be raised. This can happen unintentionally when defining a record after extracting it from an Erlang library that uses anonymous functions for defaults.</target>
        </trans-unit>
        <trans-unit id="a6abb6313f6cc1303f397ef517fbdc8da84732e6" translate="yes" xml:space="preserve">
          <source>If a string, an Erlang crash dump is produced with status as slogan, and then the runtime system exits with status code 1.</source>
          <target state="translated">文字列の場合、Erlangのクラッシュダンプがステータスをsloganとして生成され、ランタイムシステムはステータスコード1で終了します。</target>
        </trans-unit>
        <trans-unit id="126afd1abf58596ead958f3fd3541d1004b086cc" translate="yes" xml:space="preserve">
          <source>If a switch can't be parsed according to the given type, it is returned in the invalid options list.</source>
          <target state="translated">与えられた型に従ってスイッチを解析できない場合は、無効なオプションリストで返されます。</target>
        </trans-unit>
        <trans-unit id="2b1173f30bab1103a16e4d18afe172d1cf1918aa" translate="yes" xml:space="preserve">
          <source>If a tag is given more than once, the last value wins.</source>
          <target state="translated">タグが複数回与えられた場合は、最後の値が勝ちます。</target>
        </trans-unit>
        <trans-unit id="25bcdf5eebbd3c58586886d967dc6654eabd51f6" translate="yes" xml:space="preserve">
          <source>If a task crashes, the callers field is included as part of the log message metadata under the &lt;code&gt;:callers&lt;/code&gt; key.</source>
          <target state="translated">If a task crashes, the callers field is included as part of the log message metadata under the &lt;code&gt;:callers&lt;/code&gt; key.</target>
        </trans-unit>
        <trans-unit id="83f25a0e999e5079ecb734e6ae102d4bb2431a7f" translate="yes" xml:space="preserve">
          <source>If a task has requirements, they can be listed using the &lt;code&gt;@requirements&lt;/code&gt; attribute. For example:</source>
          <target state="translated">If a task has requirements, they can be listed using the &lt;code&gt;@requirements&lt;/code&gt; attribute. For example:</target>
        </trans-unit>
        <trans-unit id="05107c81774e13529708289068c52809a60e340f" translate="yes" xml:space="preserve">
          <source>If a task requires a project to be defined or needs to access a special function within the project, the task can call &lt;a href=&quot;#get!/0&quot;&gt;&lt;code&gt;Mix.Project.get!/0&lt;/code&gt;&lt;/a&gt; which fails with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.NoProjectError.html&quot;&gt;&lt;code&gt;Mix.NoProjectError&lt;/code&gt;&lt;/a&gt; in the case a project is not defined.</source>
          <target state="translated">If a task requires a project to be defined or needs to access a special function within the project, the task can call &lt;a href=&quot;#get!/0&quot;&gt; &lt;code&gt;Mix.Project.get!/0&lt;/code&gt; &lt;/a&gt; which fails with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.NoProjectError.html&quot;&gt; &lt;code&gt;Mix.NoProjectError&lt;/code&gt; &lt;/a&gt; in the case a project is not defined.</target>
        </trans-unit>
        <trans-unit id="30a9473b0d912205c959737a706b0e7ee4a0ec9d" translate="yes" xml:space="preserve">
          <source>If a task requires a project to be defined or needs to access a special function within the project, the task can call &lt;a href=&quot;mix.project#get!/0&quot;&gt;&lt;code&gt;Mix.Project.get!/0&lt;/code&gt;&lt;/a&gt; which fails with &lt;a href=&quot;mix.noprojecterror&quot;&gt;&lt;code&gt;Mix.NoProjectError&lt;/code&gt;&lt;/a&gt; in the case a project is not defined.</source>
          <target state="translated">タスクでプロジェクトの定義が必要な場合、またはプロジェクト内の特別な関数にアクセスする必要がある場合、タスクは&lt;a href=&quot;mix.project#get!/0&quot;&gt; &lt;code&gt;Mix.Project.get!/0&lt;/code&gt; &lt;/a&gt;を呼び出すことができ、プロジェクトが定義されていない場合は&lt;a href=&quot;mix.noprojecterror&quot;&gt; &lt;code&gt;Mix.NoProjectError&lt;/code&gt; &lt;/a&gt;で失敗します。</target>
        </trans-unit>
        <trans-unit id="c67bc32edf1527e959986e52e98d4224edd81679" translate="yes" xml:space="preserve">
          <source>If a task's monitor has already been demonitored or received and there is not a response waiting in the message queue this function will return &lt;code&gt;{:exit, :noproc}&lt;/code&gt; as the result or exit reason can not be determined.</source>
          <target state="translated">タスクのモニターがすでに監視解除または受信されており、メッセージキューで待機中の応答がない場合、結果または終了理由を特定できないため、この関数は &lt;code&gt;{:exit, :noproc}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1a77a9db2807ea258346d1c8035a43bea2a0103f" translate="yes" xml:space="preserve">
          <source>If a variable is mentioned more than once in a pattern, all references should bind to the same pattern:</source>
          <target state="translated">パターンの中で変数が複数回言及された場合、すべての参照は同じパターンにバインドされなければなりません。</target>
        </trans-unit>
        <trans-unit id="8341a6ce2bd527f498f269d473191d8c74061cd6" translate="yes" xml:space="preserve">
          <source>If a variable is mentioned more than once in a pattern, all references should bind to the same value:</source>
          <target state="translated">パターン内で変数が複数回言及された場合、すべての参照は同じ値にバインドされなければなりません。</target>
        </trans-unit>
        <trans-unit id="2d5176a6bc70715553073a28b4fe06e7f78373b7" translate="yes" xml:space="preserve">
          <source>If all clauses match, the &lt;code&gt;do&lt;/code&gt; block is executed, returning its result. Otherwise the chain is aborted and the non-matched value is returned:</source>
          <target state="translated">すべての句が一致すると、 &lt;code&gt;do&lt;/code&gt; ブロックが実行され、その結果が返されます。それ以外の場合、チェーンは中止され、一致しない値が返されます。</target>
        </trans-unit>
        <trans-unit id="e9c4638272580cddbbaefbc10d002d4b066670b8" translate="yes" xml:space="preserve">
          <source>If all of the conditions return &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, an error (&lt;code&gt;CondClauseError&lt;/code&gt;) is raised. For this reason, it may be necessary to add a final condition, equal to &lt;code&gt;true&lt;/code&gt;, which will always match:</source>
          <target state="translated">すべての条件が &lt;code&gt;nil&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返す場合、エラー（ &lt;code&gt;CondClauseError&lt;/code&gt; ）が発生します。このため、常に一致する &lt;code&gt;true&lt;/code&gt; に等しい最終条件を追加する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="1ce3955a535274dbe7df8b09ce910f413bd1bd52" translate="yes" xml:space="preserve">
          <source>If amount is &lt;code&gt;0&lt;/code&gt;, it returns &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">金額が &lt;code&gt;0&lt;/code&gt; の場合は、 &lt;code&gt;[]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="195d921f30b7ca6822ad57816fd9a2da342da9c2" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;else&lt;/code&gt; block is present, it will match on the results of the &lt;code&gt;try&lt;/code&gt; block whenever the &lt;code&gt;try&lt;/code&gt; block finishes without a throw or an error.</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; ブロックが存在する場合、 &lt;code&gt;try&lt;/code&gt; ブロックがスローまたはエラーなしで終了すると、 &lt;code&gt;try&lt;/code&gt; ブロックの結果と一致します。</target>
        </trans-unit>
        <trans-unit id="678b2cde87bb40ee90e01daea6daabd5a152129d" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;else&lt;/code&gt; block is used and there are no matching clauses, a &lt;a href=&quot;https://hexdocs.pm/elixir/WithClauseError.html&quot;&gt;&lt;code&gt;WithClauseError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">If an &lt;code&gt;else&lt;/code&gt; block is used and there are no matching clauses, a &lt;a href=&quot;https://hexdocs.pm/elixir/WithClauseError.html&quot;&gt; &lt;code&gt;WithClauseError&lt;/code&gt; &lt;/a&gt; exception is raised.</target>
        </trans-unit>
        <trans-unit id="570f497970d66b8882cf83a80169ce5e7a3f4622" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;else&lt;/code&gt; block is used and there are no matching clauses, a &lt;a href=&quot;withclauseerror&quot;&gt;&lt;code&gt;WithClauseError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">場合は &lt;code&gt;else&lt;/code&gt; ブロックが使用され、一致する句が存在しない、&lt;a href=&quot;withclauseerror&quot;&gt; &lt;code&gt;WithClauseError&lt;/code&gt; の&lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="de3cca2420a70cac7a0a92d8ce5ec9857a32f5c0" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;else&lt;/code&gt; clause is not present and no exceptions are raised, the result of the expression will be returned:</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; 節が存在せず、例外が発生しない場合、式の結果が返されます。</target>
        </trans-unit>
        <trans-unit id="e2d3671c086be455d33d12466d3540943c7f121c" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;offset&lt;/code&gt; is given, we will index from the given offset instead of from zero.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; が指定されている場合、ゼロからではなく、指定されたオフセットからインデックスを作成します。</target>
        </trans-unit>
        <trans-unit id="0a648b7fb5579eaba477422e6520374ab96f3bbc" translate="yes" xml:space="preserve">
          <source>If an application has included applications, they are also loaded. And the procedure recurses if they in turn have included applications. Included applications are unrelated to applications in Mix umbrella projects, they are an Erlang/OTP concept that has to do with coordinated starts.</source>
          <target state="translated">アプリケーションがインクルードされている場合は、それらもロードされます。もしアプリケーションがインクルードアプリケーションを持っていれば、それらもロードされます。インクルードされたアプリケーションはMIXアンブレラプロジェクトのアプリケーションとは関係ありません。</target>
        </trans-unit>
        <trans-unit id="c19cd9003fb6605f04e0b314c975e08d6865c82c" translate="yes" xml:space="preserve">
          <source>If an argument is provided, it should be a local path to a prebuilt archive, a Git repository, a GitHub repository, or a Hex package.</source>
          <target state="translated">引数を指定した場合は、ビルド済みのアーカイブ、Git リポジトリ、GitHub リポジトリ、あるいは Hex パッケージへのローカルパスを指定します。</target>
        </trans-unit>
        <trans-unit id="8777f1d4410c11fe781472a9996f7abc7e9d0ee1" translate="yes" xml:space="preserve">
          <source>If an argument is provided, it should be a local path to a prebuilt escript, a Git repository, a GitHub repository, or a Hex package.</source>
          <target state="translated">引数を指定した場合は、ビルド済みの escript、Git リポジトリ、GitHub リポジトリ、または Hex パッケージへのローカルパスを指定します。</target>
        </trans-unit>
        <trans-unit id="346e510adb982fcdef487692a01e3558f4f43dd0" translate="yes" xml:space="preserve">
          <source>If an atom is given, it is assumed to be an Elixir module, so it is converted to a binary and then processed.</source>
          <target state="translated">原子が与えられている場合は、Elixirモジュールであることを前提としているので、バイナリに変換して処理します。</target>
        </trans-unit>
        <trans-unit id="1dd9c12e4c69c00fd419e79703f50c2f1eb25bbf" translate="yes" xml:space="preserve">
          <source>If an empty string is given, returns an empty list.</source>
          <target state="translated">空の文字列が与えられた場合、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="b8c7e22d59114292a3302ce7be80d94101c6ff48" translate="yes" xml:space="preserve">
          <source>If an integer, the runtime system exits with the integer value which is returned to the operating system.</source>
          <target state="translated">整数の場合、ランタイムシステムはオペレーティングシステムに返される整数値で終了します。</target>
        </trans-unit>
        <trans-unit id="7d3f5440412ded7562694390034be201abb74a66" translate="yes" xml:space="preserve">
          <source>If an umbrella project reenables a task, it is reenabled for all child projects.</source>
          <target state="translated">アンブレラプロジェクトがタスクを再有効化すると、すべての子プロジェクトで再有効化されます。</target>
        </trans-unit>
        <trans-unit id="a96ebc73b0c26a7d76054b4183ec0b8df86f83ca" translate="yes" xml:space="preserve">
          <source>If any of the &lt;code&gt;--check-*&lt;/code&gt; options are given and a check fails, the formatted contents won't be written to disk nor printed to standard output.</source>
          <target state="translated">If any of the &lt;code&gt;--check-*&lt;/code&gt; options are given and a check fails, the formatted contents won't be written to disk nor printed to standard output.</target>
        </trans-unit>
        <trans-unit id="642cb4f6ac7d478befb880a0aa0031be148b3d13" translate="yes" xml:space="preserve">
          <source>If any of the files is &lt;code&gt;-&lt;/code&gt;, then the output is read from stdin and written to stdout.</source>
          <target state="translated">If any of the files is &lt;code&gt;-&lt;/code&gt; , then the output is read from stdin and written to stdout.</target>
        </trans-unit>
        <trans-unit id="f55410e6ca8aea2aa1012bcfa7157dec87ff1c3f" translate="yes" xml:space="preserve">
          <source>If any of the task processes dies, the current process will exit with the same reason as that task.</source>
          <target state="translated">いずれかのタスクプロセスが死亡した場合、現在のプロセスはそのタスクと同じ理由で終了します。</target>
        </trans-unit>
        <trans-unit id="ea3148cc3562102872f247d7ecd3f95cbb26a611" translate="yes" xml:space="preserve">
          <source>If any of the values are &lt;code&gt;nil&lt;/code&gt;, they are omitted.</source>
          <target state="translated">If any of the values are &lt;code&gt;nil&lt;/code&gt; , they are omitted.</target>
        </trans-unit>
        <trans-unit id="033137dbcc6d7e358cdff1f234f1f034d23cee4d" translate="yes" xml:space="preserve">
          <source>If anything had to be compiled, you see some informative text, and get the &lt;code&gt;:ok&lt;/code&gt; atom back, otherwise the function is silent, and returns &lt;code&gt;:noop&lt;/code&gt;.</source>
          <target state="translated">何かをコンパイルする必要がある場合、有益なテキストが表示され、 &lt;code&gt;:ok&lt;/code&gt; アトムが返されます。そうでない場合、関数はサイレントで、 &lt;code&gt;:noop&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f9330902fc087c329eff5fc5f2a0eba15cfef47c" translate="yes" xml:space="preserve">
          <source>If both options are set, &lt;code&gt;--force&lt;/code&gt; takes precedence.</source>
          <target state="translated">If both options are set, &lt;code&gt;--force&lt;/code&gt; takes precedence.</target>
        </trans-unit>
        <trans-unit id="7b4dc8078aeab160f01342b984c42012d0bb7fb7" translate="yes" xml:space="preserve">
          <source>If data is sent to a file in a format that cannot be converted to the UTF-8 or if data is read by a function that returns data in a format that cannot cope with the character range of the data, an error occurs and the file will be closed.</source>
          <target state="translated">UTF-8に変換できない形式でファイルにデータを送信した場合や、データの文字範囲に対応できない形式のデータを返す関数でデータを読み込んだ場合、エラーが発生してファイルが閉じられてしまいます。</target>
        </trans-unit>
        <trans-unit id="9cb11ee612f8a6fa1dc16b1180f3c60b5d1e6218" translate="yes" xml:space="preserve">
          <source>If desired, you could come up with your own semantics for the size of your struct. Not only that, you could use structs to build more robust data types, like queues, and implement all relevant protocols, such as &lt;code&gt;Enumerable&lt;/code&gt; and possibly &lt;code&gt;Size&lt;/code&gt;, for this data type.</source>
          <target state="translated">必要に応じて、構造体のサイズについて独自のセマンティクスを考え出すことができます。それだけでなく、構造体を使用して、キューなどのより堅牢なデータ型を構築し、このデータ型に &lt;code&gt;Enumerable&lt;/code&gt; や、場合によっては &lt;code&gt;Size&lt;/code&gt; などのすべての関連プロトコルを実装できます。</target>
        </trans-unit>
        <trans-unit id="ea1cd1f61403fdf9495800bfd2ea11cb562ca0b5" translate="yes" xml:space="preserve">
          <source>If duplicated entries exist, the first one is returned. Use &lt;a href=&quot;#get_values/2&quot;&gt;&lt;code&gt;get_values/2&lt;/code&gt;&lt;/a&gt; to retrieve all entries.</source>
          <target state="translated">重複するエントリが存在する場合は、最初のエントリが返されます。使用&lt;a href=&quot;#get_values/2&quot;&gt; &lt;code&gt;get_values/2&lt;/code&gt; &lt;/a&gt;すべてのエントリを取得します。</target>
        </trans-unit>
        <trans-unit id="0b592a69d9d8fd53bf0bd9cbfc055db4e81ec7c8" translate="yes" xml:space="preserve">
          <source>If each guard expression always returns a boolean, the two forms are equivalent. However, recall that if any function call in a guard raises an exception, the entire guard fails. So this function will not detect empty tuples:</source>
          <target state="translated">各ガード式が常にブール値を返す場合、2つの形式は等価です。しかし、ガード内の関数呼び出しで例外が発生した場合、ガード全体が失敗することを思い出してください。そのため、この関数は空のタプルを検出しません。</target>
        </trans-unit>
        <trans-unit id="5c3eed1e3cb4bd53836b71d67f974f0d1ba37310" translate="yes" xml:space="preserve">
          <source>If each guard expression always returns a boolean, the two forms are equivalent. However, recall that if any function call in a guard raises an exception, the entire guard fails. To illustrate this, the following function will not detect empty tuples:</source>
          <target state="translated">各ガード式が常にブール値を返す場合、2つの形式は等価です。しかし、ガード内の関数呼び出しで例外が発生した場合、ガード全体が失敗することを思い出してください。これを説明するために、以下の関数は空のタプルを検出しません。</target>
        </trans-unit>
        <trans-unit id="dbe27cd775ccec3c6324b3d4efb95e206746dc7f" translate="yes" xml:space="preserve">
          <source>If file &lt;code&gt;destination&lt;/code&gt; already exists, it is overwritten by the contents in &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">ファイルの &lt;code&gt;destination&lt;/code&gt; すでに存在する場合は、 &lt;code&gt;source&lt;/code&gt; の内容で上書きされます。</target>
        </trans-unit>
        <trans-unit id="fdc28a9b8dcfe0a11c8bac1e062e822f6767ef47" translate="yes" xml:space="preserve">
          <source>If file is a relative, it will be expanded relatively to the directory the current configuration file is in.</source>
          <target state="translated">ファイルが相対ファイルの場合は、現在の設定ファイルがあるディレクトリに相対的に展開されます。</target>
        </trans-unit>
        <trans-unit id="42ddc2f0c1e4117e2bba8be8a09c43a0ea2ed1bd" translate="yes" xml:space="preserve">
          <source>If for some reason the application needs to be configured before it is started, the &lt;code&gt;--no-start&lt;/code&gt; option can be used and you are then responsible for starting all applications by using functions such as &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#ensure_all_started/1&quot;&gt;&lt;code&gt;Application.ensure_all_started/1&lt;/code&gt;&lt;/a&gt;. For more information about the application life-cycle and dynamically configuring applications, see the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">何らかの理由でアプリケーションを起動する前に設定する必要がある場合は、 &lt;code&gt;--no-start&lt;/code&gt; オプションを使用できます。その後、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#ensure_all_started/1&quot;&gt; &lt;code&gt;Application.ensure_all_started/1&lt;/code&gt; &lt;/a&gt;などの関数を使用してすべてのアプリケーションを起動する必要があります。アプリケーションのライフサイクルとアプリケーションの動的構成の詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="52856e4d7670b4aabed44c6b796ec0f3b6c2451e" translate="yes" xml:space="preserve">
          <source>If for some reason you cannot take the elements before hand, you can use &lt;code&gt;:max_concurrency&lt;/code&gt; to limit how many elements may be over processed at the cost of reducing concurrency.</source>
          <target state="translated">If for some reason you cannot take the elements before hand, you can use &lt;code&gt;:max_concurrency&lt;/code&gt; to limit how many elements may be over processed at the cost of reducing concurrency.</target>
        </trans-unit>
        <trans-unit id="8fe39f85acaae7d9c0b9ede161359eb45dcac7a2" translate="yes" xml:space="preserve">
          <source>If injection is suddenly interrupted, &lt;code&gt;:halt&lt;/code&gt; is passed and the function can return any value as it won't be used.</source>
          <target state="translated">注入が突然中断された場合、 &lt;code&gt;:halt&lt;/code&gt; が渡され、関数は使用されないため任意の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="2208d456a668339c9192b6d6af5ff93f1cbc3d73" translate="yes" xml:space="preserve">
          <source>If installing a precompiled Hex does not work, you can compile and install Hex directly with this command:</source>
          <target state="translated">プリコンパイルされたHexをインストールしてもうまくいかない場合は、このコマンドで直接Hexをコンパイルしてインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="e605c80e2a0c34a8e797284924c7ad11db4e6147" translate="yes" xml:space="preserve">
          <source>If instead you want a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; for the same point time in a different time zone see the &lt;a href=&quot;#shift_zone/3&quot;&gt;&lt;code&gt;DateTime.shift_zone/3&lt;/code&gt;&lt;/a&gt; function which would convert 2018-08-24 10:00:00 in Copenhagen to 2018-08-24 08:00:00 in UTC.</source>
          <target state="translated">If instead you want a &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; for the same point time in a different time zone see the &lt;a href=&quot;#shift_zone/3&quot;&gt; &lt;code&gt;DateTime.shift_zone/3&lt;/code&gt; &lt;/a&gt; function which would convert 2018-08-24 10:00:00 in Copenhagen to 2018-08-24 08:00:00 in UTC.</target>
        </trans-unit>
        <trans-unit id="6ef0c2aa8f05db2c984cf1df62ac6db58c68621a" translate="yes" xml:space="preserve">
          <source>If instead you want a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; for the same point time in a different time zone see the &lt;a href=&quot;datetime#shift_zone/3&quot;&gt;&lt;code&gt;DateTime.shift_zone/3&lt;/code&gt;&lt;/a&gt; function which would convert 2018-08-24 10:00:00 in Copenhagen to 2018-08-24 08:00:00 in UTC.</source>
          <target state="translated">代わりに、異なるタイムゾーンの同じポイントタイムの&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が必要な場合は、コペンハーゲンの2018-08-24 10:00:00を2018-08-24 08:00:00に変換する&lt;a href=&quot;datetime#shift_zone/3&quot;&gt; &lt;code&gt;DateTime.shift_zone/3&lt;/code&gt; &lt;/a&gt;関数を参照してください。UTC。</target>
        </trans-unit>
        <trans-unit id="d54c8e6a4382ff70ea26a411e39ab67c3f015ec3" translate="yes" xml:space="preserve">
          <source>If invalid arguments are given, &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; is raised by &lt;a href=&quot;system#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;system#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; also expects a strict set of options and will raise if unknown or invalid options are given.</source>
          <target state="translated">無効な引数が指定された場合、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;が&lt;a href=&quot;system#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;によって発生します。&lt;a href=&quot;system#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;も厳密なオプションのセットを想定しており、不明または無効なオプションが指定された場合に発生します。</target>
        </trans-unit>
        <trans-unit id="f63070ccfff8927ca91b04ed194217d21f1511af" translate="yes" xml:space="preserve">
          <source>If invalid arguments are given, &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; is raised by &lt;a href=&quot;#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; also expects a strict set of options and will raise if unknown or invalid options are given.</source>
          <target state="translated">If invalid arguments are given, &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; is raised by &lt;a href=&quot;#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt; also expects a strict set of options and will raise if unknown or invalid options are given.</target>
        </trans-unit>
        <trans-unit id="d184a96a7452ebbaa15d901cdfcd5646962e673b" translate="yes" xml:space="preserve">
          <source>If it is not possible to convert unambiguously between the calendars (see &lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt;&lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt;&lt;/a&gt;), an &lt;code&gt;{:error, :incompatible_calendars}&lt;/code&gt; tuple is returned.</source>
          <target state="translated">カレンダー間で明確に変換できない場合（&lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt; &lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt; を&lt;/a&gt;参照）、 &lt;code&gt;{:error, :incompatible_calendars}&lt;/code&gt; タプルが返されます。</target>
        </trans-unit>
        <trans-unit id="bf2413d6f2f1077cec728a8783f14bba8e944a5b" translate="yes" xml:space="preserve">
          <source>If it is not possible to convert unambiguously between the calendars (see &lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt;&lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt;&lt;/a&gt;), an ArgumentError is raised.</source>
          <target state="translated">カレンダー間を明確に変換できない場合（&lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt; &lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt; を&lt;/a&gt;参照）、ArgumentErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="ecfddb3c801b4fad8012305968cb8bcbecf6fa13" translate="yes" xml:space="preserve">
          <source>If it is not possible to convert unambiguously between the calendars (see &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#compatible_calendars?/2&quot;&gt;&lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt;&lt;/a&gt;), an &lt;code&gt;{:error, :incompatible_calendars}&lt;/code&gt; tuple is returned.</source>
          <target state="translated">If it is not possible to convert unambiguously between the calendars (see &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#compatible_calendars?/2&quot;&gt; &lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt; &lt;/a&gt;), an &lt;code&gt;{:error, :incompatible_calendars}&lt;/code&gt; tuple is returned.</target>
        </trans-unit>
        <trans-unit id="87471401848a097556118fe83e0d5466a1656985" translate="yes" xml:space="preserve">
          <source>If it is not possible to convert unambiguously between the calendars (see &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#compatible_calendars?/2&quot;&gt;&lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt;&lt;/a&gt;), an ArgumentError is raised.</source>
          <target state="translated">If it is not possible to convert unambiguously between the calendars (see &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#compatible_calendars?/2&quot;&gt; &lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt; &lt;/a&gt;), an ArgumentError is raised.</target>
        </trans-unit>
        <trans-unit id="1b73ba22cd3093f832e74a316d5262bd0f987e0a" translate="yes" xml:space="preserve">
          <source>If it succeeds in loading the module, it returns &lt;code&gt;{:module, module}&lt;/code&gt;. If not, returns &lt;code&gt;{:error, reason}&lt;/code&gt; with the error reason.</source>
          <target state="translated">モジュールのロードに成功すると、 &lt;code&gt;{:module, module}&lt;/code&gt; 返します。そうでない場合は、エラーの理由とともに &lt;code&gt;{:error, reason}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="375e4e6baa78eec72e85f76cd1b054d6bf11d173" translate="yes" xml:space="preserve">
          <source>If it succeeds opening the file, it returns the &lt;code&gt;function&lt;/code&gt; result on the IO device.</source>
          <target state="translated">ファイルのオープンに成功すると、IOデバイスに &lt;code&gt;function&lt;/code&gt; 結果が返されます。</target>
        </trans-unit>
        <trans-unit id="f34822921b36640bca1582de43cfc049c94f2bdc" translate="yes" xml:space="preserve">
          <source>If last is larger than first, the range will be increasing from first to last. If first is larger than last, the range will be decreasing from first to last. If first is equal to last, the range will contain one element, which is the number itself.</source>
          <target state="translated">last が first よりも大きい場合、範囲は first から last に向かって増加します。firstがlastより大きい場合、範囲は最初から最後まで減少します。firstがlastと等しい場合、範囲は1つの要素を含み、それは数値そのものです。</target>
        </trans-unit>
        <trans-unit id="235b771916ee54b0bdf0b8ac1f7f9a8b762d39f4" translate="yes" xml:space="preserve">
          <source>If module has &lt;code&gt;@compile {:autoload, false}&lt;/code&gt;, &lt;code&gt;__mix_recompile__?/0&lt;/code&gt; will not be used.</source>
          <target state="translated">If module has &lt;code&gt;@compile {:autoload, false}&lt;/code&gt; , &lt;code&gt;__mix_recompile__?/0&lt;/code&gt; will not be used.</target>
        </trans-unit>
        <trans-unit id="73ef68acbf89df4484fb1238776c874300f89fd7" translate="yes" xml:space="preserve">
          <source>If multiple elements are considered maximal or minimal, the first one that was found is returned.</source>
          <target state="translated">複数の要素が最大または最小とみなされた場合、最初に見つかったものが返されます。</target>
        </trans-unit>
        <trans-unit id="1368a6e71ce1bea12a85b30b7509f054b5bc170d" translate="yes" xml:space="preserve">
          <source>If multiple elements are considered maximal, the first one that was found is returned.</source>
          <target state="translated">複数の要素が最大とみなされた場合、最初に見つかったものが返されます。</target>
        </trans-unit>
        <trans-unit id="c6a9685a98347f5efadc0b8611df565d7f389d71" translate="yes" xml:space="preserve">
          <source>If multiple elements are considered minimal, the first one that was found is returned.</source>
          <target state="translated">複数の要素が最小とみなされた場合、最初に見つかったものが返されます。</target>
        </trans-unit>
        <trans-unit id="24628e265ef0842d90b32f3fc25fbf2867904597" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;rebar&lt;/code&gt; or &lt;code&gt;rebar3&lt;/code&gt; are specified, both versions will be fetched.</source>
          <target state="translated">If neither &lt;code&gt;rebar&lt;/code&gt; or &lt;code&gt;rebar3&lt;/code&gt; are specified, both versions will be fetched.</target>
        </trans-unit>
        <trans-unit id="3bba7183a7cbe4b26185332d90ef3cedae8fff5f" translate="yes" xml:space="preserve">
          <source>If nil is returned, it means no lock information is available.</source>
          <target state="translated">nil が返された場合は、ロック情報が利用できないことを意味します。</target>
        </trans-unit>
        <trans-unit id="038bfba61cc7a83ddd7d63b5a01873632ce42b48" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt; exists, returns the keyword list unchanged.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 持つ &lt;code&gt;key&lt;/code&gt; が存在しない場合、キーワードリストを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="f84d674ad0c66434da7d8901f73f91feb00f3a76" translate="yes" xml:space="preserve">
          <source>If no application is given, it uses the current application defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</source>
          <target state="translated">If no application is given, it uses the current application defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</target>
        </trans-unit>
        <trans-unit id="7c893bf9fd681a7f7a6fb13527c0cc5dfde15e8a" translate="yes" xml:space="preserve">
          <source>If no argument is given, the value of the previous expression is used.</source>
          <target state="translated">引数が与えられない場合は、前の式の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="44e1f09935bd0cbe5978c5fb2f1f11d782328422" translate="yes" xml:space="preserve">
          <source>If no argument is supplied but there is an archive in the project's root directory (created with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html&quot;&gt;&lt;code&gt;mix archive.build&lt;/code&gt;&lt;/a&gt;), then the archive will be installed locally. For example:</source>
          <target state="translated">If no argument is supplied but there is an archive in the project's root directory (created with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html&quot;&gt; &lt;code&gt;mix archive.build&lt;/code&gt; &lt;/a&gt;), then the archive will be installed locally. For example:</target>
        </trans-unit>
        <trans-unit id="1e6b21b04e9206b421a7dd9fd273e8d10651e36e" translate="yes" xml:space="preserve">
          <source>If no argument is supplied but there is an escript in the project's root directory (created with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html&quot;&gt;&lt;code&gt;mix escript.build&lt;/code&gt;&lt;/a&gt;), then the escript will be installed locally. For example:</source>
          <target state="translated">If no argument is supplied but there is an escript in the project's root directory (created with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html&quot;&gt; &lt;code&gt;mix escript.build&lt;/code&gt; &lt;/a&gt;), then the escript will be installed locally. For example:</target>
        </trans-unit>
        <trans-unit id="1b6cea41585ef2678e551c971ce31fe417d9dd88" translate="yes" xml:space="preserve">
          <source>If no clause matches, an error is raised. For this reason, it may be necessary to add a final catch-all clause (like &lt;code&gt;_&lt;/code&gt;) which will always match.</source>
          <target state="translated">一致する句がない場合、エラーが発生します。このため、常に一致する最後のキャッチオール節（ &lt;code&gt;_&lt;/code&gt; など）を追加する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="fc7cd6fb4c53519f3c55037a05bd9ecc868e4492" translate="yes" xml:space="preserve">
          <source>If no configuration file is given, it loads the project's configuration file, &quot;config/config.exs&quot;, if it exists. Keep in mind that the &quot;config/config.exs&quot; file is always loaded by the CLI and invoking it is only required in cases you are starting Mix manually.</source>
          <target state="translated">設定ファイルが指定されていない場合、プロジェクトの設定ファイルである &quot;config/config.exs &quot;が存在する場合、それをロードします。config/config.exs &quot;ファイルは常にCLIによってロードされ、手動でMixを起動する場合にのみ必要となることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="b7eed02542b79da944224ca91fcc920777715fa8" translate="yes" xml:space="preserve">
          <source>If no configuration is given, the one for the current project is used.</source>
          <target state="translated">設定が指定されていない場合は、現在のプロジェクトの設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="87546bcf9e4f94845bd9b4719319d8f898876f32" translate="yes" xml:space="preserve">
          <source>If no configuration is given, the one for the current project will be used.</source>
          <target state="translated">設定が与えられていない場合は、現在のプロジェクトのものが使用されます。</target>
        </trans-unit>
        <trans-unit id="7b738bcb5763933041a695931c6cb78b2d2ed70e" translate="yes" xml:space="preserve">
          <source>If no dependency is given, it uses the tree defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</source>
          <target state="translated">If no dependency is given, it uses the tree defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</target>
        </trans-unit>
        <trans-unit id="8420e9f0ced4b5e2305fa85af7c948aac181698b" translate="yes" xml:space="preserve">
          <source>If no function is given, the truthiness of each element is checked during iteration. When an element has a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) iteration stops immediately and &lt;code&gt;false&lt;/code&gt; is returned. In all other cases &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">関数が指定されていない場合は、反復中に各要素の真偽がチェックされます。要素に &lt;code&gt;false&lt;/code&gt; 値（falseまたは &lt;code&gt;nil&lt;/code&gt; ）がある場合、反復は直ちに停止し、 &lt;code&gt;false&lt;/code&gt; が返されます。その他の場合はすべて &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="af73d9c2f1028c805fc39df68dad67f7b564dd8d" translate="yes" xml:space="preserve">
          <source>If no function is given, the truthiness of each element is checked during iteration. When an element has a truthy value (neither &lt;code&gt;false&lt;/code&gt; nor &lt;code&gt;nil&lt;/code&gt;) iteration stops immediately and &lt;code&gt;true&lt;/code&gt; is returned. In all other cases &lt;code&gt;false&lt;/code&gt; is returned.</source>
          <target state="translated">関数が指定されていない場合は、反復中に各要素の真偽がチェックされます。要素に真の値（ &lt;code&gt;false&lt;/code&gt; も &lt;code&gt;nil&lt;/code&gt; もない）がある場合、反復はすぐに停止し、 &lt;code&gt;true&lt;/code&gt; が返されます。その他の場合はすべて &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="99cc65b0a766a1d7c750735c04a6ce040c2ecd5f" translate="yes" xml:space="preserve">
          <source>If no matching tuple is found, &lt;code&gt;default&lt;/code&gt; is returned.</source>
          <target state="translated">一致するタプルが見つからない場合、 &lt;code&gt;default&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="db86456e3e6a45125baab8b1b669e7d382cc2ad8" translate="yes" xml:space="preserve">
          <source>If none of the clauses match, an error is raised:</source>
          <target state="translated">どの節も一致しない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="e2a4d7b7ce6ed34ac382f69616d43a496e285e59" translate="yes" xml:space="preserve">
          <source>If one does not exist, it will abort since there was no shell process inputs given. &lt;code&gt;value&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">存在しない場合は、シェルプロセス入力が指定されていないため、中止されます。 &lt;code&gt;value&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3b534d3078a1eaf21555f5ec72f4135c6d9a40dd" translate="yes" xml:space="preserve">
          <source>If one does not exist, it will abort since there was no shell process inputs given. &lt;code&gt;value&lt;/code&gt; must be a string.</source>
          <target state="translated">存在しない場合は、シェルプロセス入力が指定されていないため、中止されます。 &lt;code&gt;value&lt;/code&gt; は文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bccd76edbf5bdad5646dc98c00f42c25e3b6a1a0" translate="yes" xml:space="preserve">
          <source>If one is already registered, it is replaced.</source>
          <target state="translated">既に登録されている場合は入れ替わります。</target>
        </trans-unit>
        <trans-unit id="6d6821d80cd7273e1c9f60ea9b9bf87af913648b" translate="yes" xml:space="preserve">
          <source>If one is not registered, returns the word appended with an &quot;s&quot;.</source>
          <target state="translated">登録されていない場合は、&quot;s &quot;を付加した単語を返します。</target>
        </trans-unit>
        <trans-unit id="2a2ad82fe5366a9ffae6d450da5ae29fe95a85f3" translate="yes" xml:space="preserve">
          <source>If options are provided, the result will be &lt;code&gt;{:ok, pid}&lt;/code&gt;, returning the IO device created. The option &lt;code&gt;:capture_prompt&lt;/code&gt;, when set to &lt;code&gt;true&lt;/code&gt;, causes prompts (which are specified as arguments to &lt;code&gt;IO.get*&lt;/code&gt; functions) to be included in the device's output.</source>
          <target state="translated">オプションを指定すると、結果は &lt;code&gt;{:ok, pid}&lt;/code&gt; 、作成されたIOデバイスが返されます。オプション &lt;code&gt;:capture_prompt&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、プロンプト（ &lt;code&gt;IO.get*&lt;/code&gt; 関数への引数として指定される）がデバイスの出力に含まれます。</target>
        </trans-unit>
        <trans-unit id="3b66a164bf9c0ed9cfb3107b0900a5b27ed87c86" translate="yes" xml:space="preserve">
          <source>If part of a supervision tree, a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; will receive an exit signal when the tree is shutting down. The exit signal is based on the shutdown strategy in the child's specification, where this value can be:</source>
          <target state="translated">監視ツリーの一部である場合、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;は、ツリーのシャットダウン時に終了信号を受け取ります。終了信号は、子の仕様のシャットダウン戦略に基づいています。この値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="c9b86f1b45462784068301d1b6133eb9cbdf0f18" translate="yes" xml:space="preserve">
          <source>If partitioning is enabled and &lt;code&gt;--cover&lt;/code&gt; is used, no cover reports are generated, as they only contain a subset of the coverage data. Instead, the coverage data is exported to files such as &lt;code&gt;cover/MIX_TEST_PARTITION.coverdata&lt;/code&gt;. Once you have the results of all partitions inside &lt;code&gt;cover/&lt;/code&gt;, you can run &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.Coverage.html&quot;&gt;&lt;code&gt;mix test.coverage&lt;/code&gt;&lt;/a&gt; to get the unified report.</source>
          <target state="translated">If partitioning is enabled and &lt;code&gt;--cover&lt;/code&gt; is used, no cover reports are generated, as they only contain a subset of the coverage data. Instead, the coverage data is exported to files such as &lt;code&gt;cover/MIX_TEST_PARTITION.coverdata&lt;/code&gt; . Once you have the results of all partitions inside &lt;code&gt;cover/&lt;/code&gt; , you can run &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.Coverage.html&quot;&gt; &lt;code&gt;mix test.coverage&lt;/code&gt; &lt;/a&gt; to get the unified report.</target>
        </trans-unit>
        <trans-unit id="ee772fad171fd1b86c1fbf91441e33291245e16b" translate="yes" xml:space="preserve">
          <source>If path/wildcard is a relative path/wildcard, it will be expanded relatively to the directory the current configuration file is in.</source>
          <target state="translated">path/wildcardが相対パス/ワイルドカードの場合、現在の設定ファイルがあるディレクトリに相対的に展開されます。</target>
        </trans-unit>
        <trans-unit id="2c9a282865b6fe4119e199b1b0847cbb6040e103" translate="yes" xml:space="preserve">
          <source>If present, invoke the optional callback &lt;a href=&quot;#c:prep_stop/1&quot;&gt;&lt;code&gt;prep_stop/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">存在する場合は、オプションのコールバック&lt;a href=&quot;#c:prep_stop/1&quot;&gt; &lt;code&gt;prep_stop/1&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="f857961c6609ab2fd7dcb4f431f75616d71eb634" translate="yes" xml:space="preserve">
          <source>If successful, returns a tuple in the form of &lt;code&gt;{float, remainder_of_binary}&lt;/code&gt;; when the binary cannot be coerced into a valid float, the atom &lt;code&gt;:error&lt;/code&gt; is returned.</source>
          <target state="translated">成功した場合、タプルを &lt;code&gt;{float, remainder_of_binary}&lt;/code&gt; 形式で返します。バイナリを有効なfloatに強制できない場合、アトム &lt;code&gt;:error&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b120927e219fe332092528639b692b8090eba7eb" translate="yes" xml:space="preserve">
          <source>If successful, returns a tuple in the form of &lt;code&gt;{integer, remainder_of_binary}&lt;/code&gt;. Otherwise &lt;code&gt;:error&lt;/code&gt;.</source>
          <target state="translated">成功した場合、タプルを &lt;code&gt;{integer, remainder_of_binary}&lt;/code&gt; 形式で返します。そうでなければ &lt;code&gt;:error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6b18774208db640d57cda0a230752786cd8f12b4" translate="yes" xml:space="preserve">
          <source>If successful, this function returns &lt;code&gt;:ok&lt;/code&gt;. If there is no child specification for the given child ID, this function returns &lt;code&gt;{:error, :not_found}&lt;/code&gt;.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;:ok&lt;/code&gt; を返します。指定された子IDの子仕様がない場合、この関数は &lt;code&gt;{:error, :not_found}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b3f06ad98d27407a8302c766c4bf1a51ac8c90c4" translate="yes" xml:space="preserve">
          <source>If successful, this function returns &lt;code&gt;:ok&lt;/code&gt;. If there is no process with the given PID, this function returns &lt;code&gt;{:error, :not_found}&lt;/code&gt;.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;:ok&lt;/code&gt; を返します。指定されたPIDのプロセスがない場合、この関数は &lt;code&gt;{:error, :not_found}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b49684fdd544a95c54cc6ece8ce5787754e9bca3" translate="yes" xml:space="preserve">
          <source>If successful, this function returns &lt;code&gt;:ok&lt;/code&gt;. This function may return an error with an appropriate error tuple if the &lt;code&gt;child_id&lt;/code&gt; is not found, or if the current process is running or being restarted.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;:ok&lt;/code&gt; を返します。 &lt;code&gt;child_id&lt;/code&gt; が見つからない場合、または現在のプロセスが実行中または再起動中の場合、この関数は適切なエラータプルを含むエラーを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="94de3ea42072866e8652cd6fca38378bad81898f" translate="yes" xml:space="preserve">
          <source>If such a link exists already, this function does nothing since there can only be one link between two given processes. If a process tries to create a link to itself, nothing will happen.</source>
          <target state="translated">このようなリンクが既に存在する場合、与えられた2つのプロセス間には1つのリンクしか存在しないので、この関数は何もしません。プロセスが自分自身へのリンクを作成しようとした場合、何も起こりません。</target>
        </trans-unit>
        <trans-unit id="82ad4a438a65f14d6cc2e31d27dc219d76d8743c" translate="yes" xml:space="preserve">
          <source>If such a tuple is not found, &lt;code&gt;nil&lt;/code&gt; will be returned.</source>
          <target state="translated">そのようなタプルが見つからない場合、 &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="481e39df28a67eb2b33dd5d88bf3b6bd30ab02a5" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback fails with &lt;code&gt;reason&lt;/code&gt;, this function returns &lt;code&gt;{:error, reason}&lt;/code&gt;. Otherwise, if it returns &lt;code&gt;{:stop, reason}&lt;/code&gt; or &lt;code&gt;:ignore&lt;/code&gt;, the process is terminated and this function returns &lt;code&gt;{:error, reason}&lt;/code&gt; or &lt;code&gt;:ignore&lt;/code&gt;, respectively.</source>
          <target state="translated">場合&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックで失敗し &lt;code&gt;reason&lt;/code&gt; は、この関数が返す &lt;code&gt;{:error, reason}&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;{:stop, reason}&lt;/code&gt; または &lt;code&gt;:ignore&lt;/code&gt; を返すと、プロセスは終了し、この関数はそれぞれ &lt;code&gt;{:error, reason}&lt;/code&gt; または &lt;code&gt;:ignore&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dbcf489afc8a98baffdf14a35b5948b139352b97" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback returns &lt;code&gt;:ignore&lt;/code&gt;, this function returns &lt;code&gt;:ignore&lt;/code&gt; as well and the supervisor terminates with reason &lt;code&gt;:normal&lt;/code&gt;. If it fails or returns an incorrect value, this function returns &lt;code&gt;{:error, term}&lt;/code&gt; where &lt;code&gt;term&lt;/code&gt; is a term with information about the error, and the supervisor terminates with reason &lt;code&gt;term&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックが &lt;code&gt;:ignore&lt;/code&gt; を返す場合、この関数も &lt;code&gt;:ignore&lt;/code&gt; を返し、スーパーバイザは理由 &lt;code&gt;:normal&lt;/code&gt; で終了します。失敗した場合、または誤った値を返した場合、この関数は &lt;code&gt;{:error, term}&lt;/code&gt; 返します。ここで、 &lt;code&gt;term&lt;/code&gt; はエラーに関する情報を含む項であり、スーパーバイザーはreason &lt;code&gt;term&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="71d6d6b5b64b37312988e1b6e5df55a665e7fb1a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; receives an exit signal (that is not &lt;code&gt;:normal&lt;/code&gt;) from any process when it is not trapping exits it will exit abruptly with the same reason and so not call &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt;. Note that a process does &lt;em&gt;NOT&lt;/em&gt; trap exits by default and an exit signal is sent when a linked process exits or its node is disconnected.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;が終了をトラップしていないときに、プロセスから終了信号（つまり &lt;code&gt;:normal&lt;/code&gt; ではない）を受信した場合、同じ理由で突然終了するため、&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; を&lt;/a&gt;呼び出さない。注プロセスがないことを&lt;em&gt;しないで&lt;/em&gt;、デフォルトではトラップ終了し、リンクされたプロセスが終了するか、またはそのノードが切断されたときに終了信号が送信されます。</target>
        </trans-unit>
        <trans-unit id="6f9052b50ac29d05b6aa3acc2ac9400b5beedce0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--label compile&lt;/code&gt; flag is given with &lt;code&gt;--sink&lt;/code&gt;, then &lt;code&gt;lib/c.ex&lt;/code&gt; won't be shown, because no module has a compile time dependency on &lt;code&gt;lib/c.ex&lt;/code&gt; but &lt;code&gt;lib/a.ex&lt;/code&gt; still has an indirect compile time dependency on &lt;code&gt;lib/c.ex&lt;/code&gt; via &lt;code&gt;lib/b.ex&lt;/code&gt;:</source>
          <target state="translated">If the &lt;code&gt;--label compile&lt;/code&gt; flag is given with &lt;code&gt;--sink&lt;/code&gt; , then &lt;code&gt;lib/c.ex&lt;/code&gt; won't be shown, because no module has a compile time dependency on &lt;code&gt;lib/c.ex&lt;/code&gt; but &lt;code&gt;lib/a.ex&lt;/code&gt; still has an indirect compile time dependency on &lt;code&gt;lib/c.ex&lt;/code&gt; via &lt;code&gt;lib/b.ex&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f3eabf6d5616bb794992bd7e46ea46c1c3f02463" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;:capture_prompt&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;, prompts (specified as arguments to &lt;code&gt;IO.get*&lt;/code&gt; functions) are captured in the output.</source>
          <target state="translated">場合 &lt;code&gt;:capture_prompt&lt;/code&gt; オプションがに設定されている &lt;code&gt;true&lt;/code&gt; 、（引数として指定されたプロンプト &lt;code&gt;IO.get*&lt;/code&gt; 機能）が出力でキャプチャされています。</target>
        </trans-unit>
        <trans-unit id="e863cbc73eabe13e90d2206b9738ad4d5bc8e2e6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;:debug&lt;/code&gt; option is present, the corresponding function in the &lt;a href=&quot;http://www.erlang.org/doc/man/sys.html&quot;&gt;&lt;code&gt;:sys&lt;/code&gt; module&lt;/a&gt; will be invoked.</source>
          <target state="translated">場合は &lt;code&gt;:debug&lt;/code&gt; オプションが存在し、中に対応する機能&lt;a href=&quot;http://www.erlang.org/doc/man/sys.html&quot;&gt; &lt;code&gt;:sys&lt;/code&gt; モジュールが&lt;/a&gt;呼び出されます。</target>
        </trans-unit>
        <trans-unit id="20dea358c75a21f536924752c1d8661c6611e5a7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;:spawn_opt&lt;/code&gt; option is present, its value will be passed as options to the underlying process as in &lt;a href=&quot;https://hexdocs.pm/elixir/Process.html#spawn/4&quot;&gt;&lt;code&gt;Process.spawn/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If the &lt;code&gt;:spawn_opt&lt;/code&gt; option is present, its value will be passed as options to the underlying process as in &lt;a href=&quot;https://hexdocs.pm/elixir/Process.html#spawn/4&quot;&gt; &lt;code&gt;Process.spawn/4&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0cc9742b5fac276e3c5db68eba998892b5d16666" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;:spawn_opt&lt;/code&gt; option is present, its value will be passed as options to the underlying process as in &lt;a href=&quot;process#spawn/4&quot;&gt;&lt;code&gt;Process.spawn/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;:spawn_opt&lt;/code&gt; オプションが存在している場合、その値は、のように基本的なプロセスへのオプションとして渡されます&lt;a href=&quot;process#spawn/4&quot;&gt; &lt;code&gt;Process.spawn/4&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a17a9b3957177b112bf526bb40068d405551156b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;:timeout&lt;/code&gt; option is present, the agent is allowed to spend at most the given number of milliseconds on initialization or it will be terminated and the start function will return &lt;code&gt;{:error, :timeout}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:timeout&lt;/code&gt; オプションが存在する場合、エージェントは最大で指定されたミリ秒数を初期化に費やすことができます。そうでない場合、エージェントは終了し、開始関数は &lt;code&gt;{:error, :timeout}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cb098adf69499ff7a9f9cec625ec93553830b541" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Foo.Bar&lt;/code&gt; module is moved somewhere else, the references to &lt;code&gt;Bar&lt;/code&gt; in the &lt;code&gt;Foo&lt;/code&gt; module need to be updated to the fully-qualified name (&lt;code&gt;Foo.Bar&lt;/code&gt;) or an alias has to be explicitly set in the &lt;code&gt;Foo&lt;/code&gt; module with the help of &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#alias/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.alias/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If the &lt;code&gt;Foo.Bar&lt;/code&gt; module is moved somewhere else, the references to &lt;code&gt;Bar&lt;/code&gt; in the &lt;code&gt;Foo&lt;/code&gt; module need to be updated to the fully-qualified name ( &lt;code&gt;Foo.Bar&lt;/code&gt; ) or an alias has to be explicitly set in the &lt;code&gt;Foo&lt;/code&gt; module with the help of &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#alias/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.alias/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="14ac11fca560d2d149b007098ce38791dba90a1b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Foo.Bar&lt;/code&gt; module is moved somewhere else, the references to &lt;code&gt;Bar&lt;/code&gt; in the &lt;code&gt;Foo&lt;/code&gt; module need to be updated to the fully-qualified name (&lt;code&gt;Foo.Bar&lt;/code&gt;) or an alias has to be explicitly set in the &lt;code&gt;Foo&lt;/code&gt; module with the help of &lt;a href=&quot;kernel.specialforms#alias/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.alias/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Foo.Bar&lt;/code&gt; のモジュールがどこか別の場所に移動され、への参照 &lt;code&gt;Bar&lt;/code&gt; で &lt;code&gt;Foo&lt;/code&gt; 完全修飾名（に更新するためのモジュールの必要性 &lt;code&gt;Foo.Bar&lt;/code&gt; ）またはエイリアスを明示的に設定する必要がある &lt;code&gt;Foo&lt;/code&gt; の助けを借りて、モジュール&lt;a href=&quot;kernel.specialforms#alias/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.alias/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a6368961da467df03a853267f8beaa74f1276b2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;app&lt;/code&gt; is not loaded, the application will first be loaded using &lt;a href=&quot;#load/1&quot;&gt;&lt;code&gt;load/1&lt;/code&gt;&lt;/a&gt;. Any included application, defined in the &lt;code&gt;:included_applications&lt;/code&gt; key of the &lt;code&gt;.app&lt;/code&gt; file will also be loaded, but they won't be started.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; が読み込まれていない場合、アプリケーションはまず&lt;a href=&quot;#load/1&quot;&gt; &lt;code&gt;load/1&lt;/code&gt; &lt;/a&gt;を使用して読み込まれます。 &lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;:included_applications&lt;/code&gt; キーで定義されているインクルードアプリケーションも読み込まれますが、起動されません。</target>
        </trans-unit>
        <trans-unit id="0c322faf190500e641ef7c48d9a94611219b9f07" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;debugger&lt;/code&gt; does not start, here is what may have happened: some package managers default to installing a minimized Erlang without WX bindings for GUI support. In some package managers, you may be able to replace the headless Erlang with a more complete package (look for packages named &lt;code&gt;erlang&lt;/code&gt; vs &lt;code&gt;erlang-nox&lt;/code&gt; on Debian/Ubuntu/Arch). In others managers, you may need to install a separate &lt;code&gt;erlang-wx&lt;/code&gt; (or similarly named) package.</source>
          <target state="translated">&lt;code&gt;debugger&lt;/code&gt; が起動しない場合は、次のことが考えられます。一部のパッケージマネージャーは、GUIサポート用のWXバインディングなしで最小化されたErlangをデフォルトでインストールします。一部のパッケージマネージャーでは、ヘッドレスErlangをより完全なパッケージに置き換えることができる場合があります（Debian / Ubuntu / Archで &lt;code&gt;erlang&lt;/code&gt; vs &lt;code&gt;erlang-nox&lt;/code&gt; という名前のパッケージを探します）。他のマネージャーでは、別の &lt;code&gt;erlang-wx&lt;/code&gt; （または同様の名前の）パッケージをインストールする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="cbb1dfcd54340620db2a4b1be8a4677dcef95965" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;element&lt;/code&gt; occurs more than once in the &lt;code&gt;list&lt;/code&gt;, just the first occurrence is removed.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; が &lt;code&gt;list&lt;/code&gt; で複数回出現する場合、最初の出現のみが削除されます。</target>
        </trans-unit>
        <trans-unit id="c08aca5a16d9dc35535dd8000df0a013cccceba1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, inserts the given &lt;code&gt;initial&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が存在しない場合は、指定された &lt;code&gt;initial&lt;/code&gt; 値を挿入します。</target>
        </trans-unit>
        <trans-unit id="51a63ed6ff743b76fcc933f16622e3ae8d826e4a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, it inserts the given &lt;code&gt;default&lt;/code&gt; value.</source>
          <target state="translated">If the &lt;code&gt;key&lt;/code&gt; does not exist, it inserts the given &lt;code&gt;default&lt;/code&gt; value.</target>
        </trans-unit>
        <trans-unit id="8ce0dac723ef05f760f8c9731a754923353ba4a5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, raises &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If the &lt;code&gt;key&lt;/code&gt; does not exist, raises &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1b90b4077be865683040b57e9dd5a794351c1f57" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, raises &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない、上げる&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 例外を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9bce3fad01881435afa04eb9438e26f3f17ad50a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, returns &lt;code&gt;:error&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 、リターンが存在しない &lt;code&gt;:error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1dbc4c11a6c23bf2afb4e21b6579dc04b19c27e5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, returns &lt;code&gt;map&lt;/code&gt; unchanged.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない場合、返品は &lt;code&gt;map&lt;/code&gt; 変わりません。</target>
        </trans-unit>
        <trans-unit id="f3debd0c004b80e32f0db2e8ec25052d54f08cfa" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, returns the keyword list unchanged.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない場合、キーワードリストをそのまま返します。</target>
        </trans-unit>
        <trans-unit id="62f2f316a709eec98605c56cf7264dcfb2bde687" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; does not exist, returns the keyword list unchanged. Use &lt;a href=&quot;#delete_first/2&quot;&gt;&lt;code&gt;delete_first/2&lt;/code&gt;&lt;/a&gt; to delete just the first entry in case of duplicated keys.</source>
          <target state="translated">場合は &lt;code&gt;key&lt;/code&gt; 存在しない場合、キーワードリストをそのまま返します。キーが重複している場合に、最初のエントリだけを削除するには、&lt;a href=&quot;#delete_first/2&quot;&gt; &lt;code&gt;delete_first/2&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="d0667a096bf26c8f0e621f049599d4e22e6ac8ad" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;module&lt;/code&gt; is not instrumented or if the given &lt;code&gt;function&lt;/code&gt; does not have a breakpoint, it is a no-op and it returns &lt;code&gt;:not_found&lt;/code&gt;. Otherwise it returns &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">If the &lt;code&gt;module&lt;/code&gt; is not instrumented or if the given &lt;code&gt;function&lt;/code&gt; does not have a breakpoint, it is a no-op and it returns &lt;code&gt;:not_found&lt;/code&gt; . Otherwise it returns &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03691d0408ebea241da0941314a2772b60f2370b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;right&lt;/code&gt; operand is not a proper list, it returns an improper list. If the &lt;code&gt;left&lt;/code&gt; operand is not a proper list, it raises &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">場合は &lt;code&gt;right&lt;/code&gt; オペランドが適切なリストではありません、それが不適切なリストを返します。 &lt;code&gt;left&lt;/code&gt; オペランドが適切なリストでない場合は、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6016e2f55c427f96fc5e301fda4f933dcb7f84cb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;right&lt;/code&gt; operand is not a proper list, it returns an improper list. If the &lt;code&gt;left&lt;/code&gt; operand is not a proper list, it raises &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If the &lt;code&gt;right&lt;/code&gt; operand is not a proper list, it returns an improper list. If the &lt;code&gt;left&lt;/code&gt; operand is not a proper list, it raises &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="37bfbc1115f3a777b2fb554294a534e238eccc25" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unescape_map/1&lt;/code&gt; function returns &lt;code&gt;false&lt;/code&gt;, the char is not escaped and the backslash is kept in the string.</source>
          <target state="translated">場合 &lt;code&gt;unescape_map/1&lt;/code&gt; 関数が返すの &lt;code&gt;false&lt;/code&gt; 、charがエスケープされず、バックスラッシュは文字列に保存されます。</target>
        </trans-unit>
        <trans-unit id="001e53accbd81c0682a50b72be746960fd2af2c9" translate="yes" xml:space="preserve">
          <source>If the IO &lt;code&gt;device&lt;/code&gt; is a Unicode device, &lt;code&gt;count&lt;/code&gt; implies the number of Unicode code points to be retrieved. Otherwise, &lt;code&gt;count&lt;/code&gt; is the number of raw bytes to be retrieved.</source>
          <target state="translated">IO &lt;code&gt;device&lt;/code&gt; がUnicodeデバイスの場合、 &lt;code&gt;count&lt;/code&gt; は取得されるUnicodeコードポイントの数を意味します。それ以外の場合、 &lt;code&gt;count&lt;/code&gt; は取得される未加工のバイト数です。</target>
        </trans-unit>
        <trans-unit id="8bc76fe61e905f5e8cd97c93427f5f8a0776bded" translate="yes" xml:space="preserve">
          <source>If the VM terminates programmatically, via &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;System.stop/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#halt/1&quot;&gt;&lt;code&gt;System.halt/1&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#at_exit/1&quot;&gt;&lt;code&gt;at_exit/1&lt;/code&gt;&lt;/a&gt; callbacks are not executed.</source>
          <target state="translated">If the VM terminates programmatically, via &lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;System.stop/1&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#halt/1&quot;&gt; &lt;code&gt;System.halt/1&lt;/code&gt; &lt;/a&gt;, the &lt;a href=&quot;#at_exit/1&quot;&gt; &lt;code&gt;at_exit/1&lt;/code&gt; &lt;/a&gt; callbacks are not executed.</target>
        </trans-unit>
        <trans-unit id="00f4455df1d117303f7b4dec1a8e7c59907ae6e0" translate="yes" xml:space="preserve">
          <source>If the alias was not referenced yet, fails with &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;. It handles charlists, binaries and atoms.</source>
          <target state="translated">エイリアスがまだ参照されていない場合、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;で失敗します。チャーリスト、バイナリ、アトムを処理します。</target>
        </trans-unit>
        <trans-unit id="75f023f5a8fb5579a176722fb1ddcce792e96e4e" translate="yes" xml:space="preserve">
          <source>If the alias was not referenced yet, fails with &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;. It handles charlists, binaries and atoms.</source>
          <target state="translated">If the alias was not referenced yet, fails with &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;. It handles charlists, binaries and atoms.</target>
        </trans-unit>
        <trans-unit id="066a1698eac217d09441d2b5fb8b66f936f99de7" translate="yes" xml:space="preserve">
          <source>If the application does not have a callback module configured, starting is done at this point. Otherwise, its &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback if invoked. The PID of the top-level supervisor returned by this function is stored by the runtime for later use, and the returned application state is saved too, if any.</source>
          <target state="translated">アプリケーションにコールバックモジュールが構成されていない場合、この時点で起動が行われます。それ以外の場合、呼び出された場合はその&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;コールバック。この関数によって返されたトップレベルスーパーバイザのPIDは、後で使用するためにランタイムによって格納され、返されたアプリケーションの状態も保存されます。</target>
        </trans-unit>
        <trans-unit id="e0a3a0af1299b136f054ee1bd9b8c1968e181e7d" translate="yes" xml:space="preserve">
          <source>If the application does not have a callback module configured, starting is done at this point. Otherwise, its &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback is invoked. The PID of the top-level supervisor returned by this function is stored by the runtime for later use, and the returned application state is saved too, if any.</source>
          <target state="translated">If the application does not have a callback module configured, starting is done at this point. Otherwise, its &lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; callback is invoked. The PID of the top-level supervisor returned by this function is stored by the runtime for later use, and the returned application state is saved too, if any.</target>
        </trans-unit>
        <trans-unit id="562962b2b4cc24713b05513158139365a944c86f" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;msg&lt;/code&gt; is a binary, it raises a &lt;a href=&quot;https://hexdocs.pm/elixir/RuntimeError.html&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; exception using the given argument as message.</source>
          <target state="translated">If the argument &lt;code&gt;msg&lt;/code&gt; is a binary, it raises a &lt;a href=&quot;https://hexdocs.pm/elixir/RuntimeError.html&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt; exception using the given argument as message.</target>
        </trans-unit>
        <trans-unit id="df94a702176ed26ed614862093d3a9baa0557531" translate="yes" xml:space="preserve">
          <source>If the argument &lt;code&gt;msg&lt;/code&gt; is a binary, it raises a &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; exception using the given argument as message.</source>
          <target state="translated">引数 &lt;code&gt;msg&lt;/code&gt; がバイナリの場合、指定された引数をメッセージとして使用して、&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="7fd89e207521cfe8f1ffff76704430fa5d151c3b" translate="yes" xml:space="preserve">
          <source>If the attribute was marked with &lt;code&gt;accumulate&lt;/code&gt; with &lt;a href=&quot;#register_attribute/3&quot;&gt;&lt;code&gt;Module.register_attribute/3&lt;/code&gt;&lt;/a&gt;, a list is always returned. &lt;code&gt;nil&lt;/code&gt; is returned if the attribute has not been marked with &lt;code&gt;accumulate&lt;/code&gt; and has not been set to any value.</source>
          <target state="translated">If the attribute was marked with &lt;code&gt;accumulate&lt;/code&gt; with &lt;a href=&quot;#register_attribute/3&quot;&gt; &lt;code&gt;Module.register_attribute/3&lt;/code&gt; &lt;/a&gt;, a list is always returned. &lt;code&gt;nil&lt;/code&gt; is returned if the attribute has not been marked with &lt;code&gt;accumulate&lt;/code&gt; and has not been set to any value.</target>
        </trans-unit>
        <trans-unit id="71a4ad2c3571e6dc0648a7ce18db0a118f1fca6f" translate="yes" xml:space="preserve">
          <source>If the attribute was marked with &lt;code&gt;accumulate&lt;/code&gt; with &lt;a href=&quot;module#register_attribute/3&quot;&gt;&lt;code&gt;Module.register_attribute/3&lt;/code&gt;&lt;/a&gt;, a list is always returned. &lt;code&gt;nil&lt;/code&gt; is returned if the attribute has not been marked with &lt;code&gt;accumulate&lt;/code&gt; and has not been set to any value.</source>
          <target state="translated">属性が&lt;a href=&quot;module#register_attribute/3&quot;&gt; &lt;code&gt;Module.register_attribute/3&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;accumulate&lt;/code&gt; とマークされている場合、リストは常に返されます。属性が &lt;code&gt;accumulate&lt;/code&gt; でマークされておらず、値が設定されていない場合は、 &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="adaf0c8947d55853c9d373e226af8475042db2c9" translate="yes" xml:space="preserve">
          <source>If the behaviour changes or &lt;code&gt;URI.HTTP&lt;/code&gt; does not implement one of the callbacks, a warning will be raised.</source>
          <target state="translated">動作が変更されるか、 &lt;code&gt;URI.HTTP&lt;/code&gt; がコールバックの1つを実装しない場合、警告が発生します。</target>
        </trans-unit>
        <trans-unit id="99a1391ef43bb72cc7d48f8ee9698b12d1d27ff4" translate="yes" xml:space="preserve">
          <source>If the child process is not trapping exits, it will shutdown immediately when it receives the first exit signal. If the child process is trapping exits, then the &lt;code&gt;terminate&lt;/code&gt; callback is invoked, and the child process must terminate in a reasonable time interval before being abruptly terminated by the supervisor.</source>
          <target state="translated">子プロセスが出口をトラップしていない場合は、最初の出口シグナルを受信するとすぐにシャットダウンします。子プロセスが出口をトラップしている場合、 &lt;code&gt;terminate&lt;/code&gt; コールバックが呼び出され、子プロセスはスーパーバイザによって突然終了される前に、適切な時間間隔で終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="05268b70bba2052aa1ccd1488036cae6ea1aa300" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;:ignore&lt;/code&gt;, the PID remains set to &lt;code&gt;:undefined&lt;/code&gt; and this function returns &lt;code&gt;{:ok, :undefined}&lt;/code&gt;.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;:ignore&lt;/code&gt; を返す場合、PIDは &lt;code&gt;:undefined&lt;/code&gt; に設定されたままで、この関数は &lt;code&gt;{:ok, :undefined}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="e5c9cb2d2a33379f64c647839b2a1ab4dbc13e8f" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;:ignore&lt;/code&gt;, the child specification is added to the supervisor, the PID is set to &lt;code&gt;:undefined&lt;/code&gt; and this function returns &lt;code&gt;{:ok, :undefined}&lt;/code&gt;.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;:ignore&lt;/code&gt; を返す場合、子の仕様がスーパーバイザーに追加され、PIDが &lt;code&gt;:undefined&lt;/code&gt; に設定され、この関数は &lt;code&gt;{:ok, :undefined}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ef45b4e1f4c05bc44ee03bd5bad1f5e5a9ba93ef" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;:ignore&lt;/code&gt;, then no child is added to the supervision tree and this function returns &lt;code&gt;:ignore&lt;/code&gt; too.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;:ignore&lt;/code&gt; を返す場合、監視ツリーに子は追加されず、この関数も &lt;code&gt;:ignore&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="93487fcca765523c971b5da517cfe6d46d7ca27a" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;{:ok, child}&lt;/code&gt; or &lt;code&gt;{:ok, child, info}&lt;/code&gt;, the PID is added to the supervisor and this function returns the same value.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;{:ok, child}&lt;/code&gt; または &lt;code&gt;{:ok, child, info}&lt;/code&gt; 返す場合、PIDがスーパーバイザーに追加され、この関数は同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="92f41de707f645e7e03c7c77ffbddced905df221" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;{:ok, child}&lt;/code&gt; or &lt;code&gt;{:ok, child, info}&lt;/code&gt;, then child specification and PID are added to the supervisor and this function returns the same value.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;{:ok, child}&lt;/code&gt; または &lt;code&gt;{:ok, child, info}&lt;/code&gt; 返す場合、子の仕様とPIDがスーパーバイザーに追加され、この関数は同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="8a7852d163c87ef12689fc28578feaecfcacfb9c" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, the child specification is discarded and this function returns &lt;code&gt;{:error, error}&lt;/code&gt; where &lt;code&gt;error&lt;/code&gt; is a term containing information about the error and child specification.</source>
          <target state="translated">子プロセスの開始関数がエラータプルまたは誤った値を返した場合、または失敗した場合、子の指定は破棄され、この関数は &lt;code&gt;{:error, error}&lt;/code&gt; 返します。ここで、 &lt;code&gt;error&lt;/code&gt; は、エラーと子の指定に関する情報を含む用語です。</target>
        </trans-unit>
        <trans-unit id="971c2677787cebeaf5076ea02ea7abe46523d9e1" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, the child specification is discarded and this function returns &lt;code&gt;{:error, error}&lt;/code&gt; where &lt;code&gt;error&lt;/code&gt; is the error or erroneous value returned from child process start function, or failure reason if it fails.</source>
          <target state="translated">子プロセスの開始関数がエラータプルまたは誤った値を返した場合、または失敗した場合、子の指定は破棄され、この関数は &lt;code&gt;{:error, error}&lt;/code&gt; 返します。ここで、 &lt;code&gt;error&lt;/code&gt; は、子プロセスの開始関数から返されたエラーまたは誤った値です。失敗した場合は失敗の理由。</target>
        </trans-unit>
        <trans-unit id="4ed3068726af85a0584fbeb7b657ccca120db122" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, this function returns &lt;code&gt;{:error, error}&lt;/code&gt;.</source>
          <target state="translated">子プロセスの開始関数がエラータプルまたは誤った値を返した場合、または失敗した場合、この関数は &lt;code&gt;{:error, error}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="3e556a251ad20ce02002d9e36048516e94aeb978" translate="yes" xml:space="preserve">
          <source>If the colon is immediately followed by a pair of double- or single-quotes surrounding the atom name, the atom is considered quoted. In contrast with an unquoted atom, this one can be made of any Unicode character (not only letters), such as &lt;code&gt;:'🌢 Elixir'&lt;/code&gt;, &lt;code&gt;:&quot;++ol&amp;aacute;++&quot;&lt;/code&gt;, and &lt;code&gt;:&quot;123&quot;&lt;/code&gt;.</source>
          <target state="translated">コロンの直後に、アトム名を囲む二重引用符または単一引用符のペアが続く場合、アトムは引用符で囲まれていると見なされます。引用符で囲まれていない原子とは対照的に、この1のような、任意のUnicode文字（だけではなく文字）で作ることができる &lt;code&gt;:'🌢 Elixir'&lt;/code&gt; 、 &lt;code&gt;:&quot;++ol&amp;aacute;++&quot;&lt;/code&gt; 、および &lt;code&gt;:&quot;123&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8941e9716f24149ae17a893ee971b4de7ba5c0c1" translate="yes" xml:space="preserve">
          <source>If the compiler uses manifest files to track stale sources, it should define &lt;code&gt;manifests/0&lt;/code&gt;, and if it writes any output to disk it should also define &lt;code&gt;clean/0&lt;/code&gt;.</source>
          <target state="translated">If the compiler uses manifest files to track stale sources, it should define &lt;code&gt;manifests/0&lt;/code&gt; , and if it writes any output to disk it should also define &lt;code&gt;clean/0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56beff3afd9994ddacaef88c1f904aa35af05474" translate="yes" xml:space="preserve">
          <source>If the condition given to &lt;code&gt;if/2&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;, the body given between &lt;code&gt;do/end&lt;/code&gt; is not executed and instead it returns &lt;code&gt;nil&lt;/code&gt;. The opposite happens with &lt;code&gt;unless/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if/2&lt;/code&gt; に指定された条件が &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を返す場合、 &lt;code&gt;do/end&lt;/code&gt; の間に指定された本体は実行されず、代わりに &lt;code&gt;nil&lt;/code&gt; を返します。逆の場合は、 &lt;code&gt;unless/2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="99b59e29ecc1dff1755220f8555df92bd2b4fe3f" translate="yes" xml:space="preserve">
          <source>If the configuration parameter does not exist, raises &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構成パラメーターが存在しない場合は、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="90ee89304a582019b79109925a1ae106da1b349f" translate="yes" xml:space="preserve">
          <source>If the configuration parameter does not exist, raises &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If the configuration parameter does not exist, raises &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8b800c2816d5b5f752096a4e8e30fb37f2f59391" translate="yes" xml:space="preserve">
          <source>If the configuration parameter does not exist, the function returns &lt;code&gt;:error&lt;/code&gt;.</source>
          <target state="translated">構成パラメーターが存在しない場合、関数は &lt;code&gt;:error&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a592ffaee07d8c5f17b9ba6b9f33ed8e98c54d6f" translate="yes" xml:space="preserve">
          <source>If the configuration parameter does not exist, the function returns the &lt;code&gt;default&lt;/code&gt; value.</source>
          <target state="translated">構成パラメーターが存在しない場合、関数は &lt;code&gt;default&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="6759e47fd880f62f176d9957b609a75b5cf78194" translate="yes" xml:space="preserve">
          <source>If the day is already the first day of the week, it returns the day itself. For the built-in ISO calendar, the week starts on Monday. A weekday rather than &lt;code&gt;:default&lt;/code&gt; can be given as &lt;code&gt;starting_on&lt;/code&gt;.</source>
          <target state="translated">If the day is already the first day of the week, it returns the day itself. For the built-in ISO calendar, the week starts on Monday. A weekday rather than &lt;code&gt;:default&lt;/code&gt; can be given as &lt;code&gt;starting_on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7fc25fab05e3574194267d1e7b17bc5554868b2" translate="yes" xml:space="preserve">
          <source>If the day is already the last day of the week, it returns the day itself. For the built-in ISO calendar, the week ends on Sunday. A weekday rather than &lt;code&gt;:default&lt;/code&gt; can be given as &lt;code&gt;starting_on&lt;/code&gt;.</source>
          <target state="translated">If the day is already the last day of the week, it returns the day itself. For the built-in ISO calendar, the week ends on Sunday. A weekday rather than &lt;code&gt;:default&lt;/code&gt; can be given as &lt;code&gt;starting_on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c3cb9f3017a3cd59ff39001a965e946f4fe46ba2" translate="yes" xml:space="preserve">
          <source>If the dependency is locked, a lock is received in &lt;code&gt;opts&lt;/code&gt; and the repository must be check out at the lock. Otherwise, no lock is given and the repository can be checked out to the latest version.</source>
          <target state="translated">If the dependency is locked, a lock is received in &lt;code&gt;opts&lt;/code&gt; and the repository must be check out at the lock. Otherwise, no lock is given and the repository can be checked out to the latest version.</target>
        </trans-unit>
        <trans-unit id="8f7a6151093f7c2a971f2852905fc785857fff18" translate="yes" xml:space="preserve">
          <source>If the element does not exist, it is added to the end of the &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="translated">要素が存在しない場合は、 &lt;code&gt;list&lt;/code&gt; 最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="3834eb098b76c8c7be976a57156c5a8c5b9abc11" translate="yes" xml:space="preserve">
          <source>If the enumerable is empty, the provided &lt;code&gt;empty_fallback&lt;/code&gt; is called. The default &lt;code&gt;empty_fallback&lt;/code&gt; raises &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.EmptyError.html&quot;&gt;&lt;code&gt;Enum.EmptyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If the enumerable is empty, the provided &lt;code&gt;empty_fallback&lt;/code&gt; is called. The default &lt;code&gt;empty_fallback&lt;/code&gt; raises &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.EmptyError.html&quot;&gt; &lt;code&gt;Enum.EmptyError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9a1b44730d66c61b1f7aa74b49b7cfff54912615" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code&gt;varname&lt;/code&gt; is set, then &lt;code&gt;{:ok, value}&lt;/code&gt; is returned where &lt;code&gt;value&lt;/code&gt; is a string. If &lt;code&gt;varname&lt;/code&gt; is not set, &lt;code&gt;:error&lt;/code&gt; is returned.</source>
          <target state="translated">環境変数場合 &lt;code&gt;varname&lt;/code&gt; 設定され、その後 &lt;code&gt;{:ok, value}&lt;/code&gt; ここで返される &lt;code&gt;value&lt;/code&gt; 文字列です。 &lt;code&gt;varname&lt;/code&gt; が設定されていない場合、 &lt;code&gt;:error&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ea743105c28535da020399869c10ba09ded50b63" translate="yes" xml:space="preserve">
          <source>If the exception module implements the optional &lt;a href=&quot;#c:blame/2&quot;&gt;&lt;code&gt;blame/2&lt;/code&gt;&lt;/a&gt; callback, it will be invoked to perform the computation.</source>
          <target state="translated">例外モジュールがオプションの&lt;a href=&quot;#c:blame/2&quot;&gt; &lt;code&gt;blame/2&lt;/code&gt; &lt;/a&gt;コールバックを実装している場合は、それが呼び出されて計算が実行されます。</target>
        </trans-unit>
        <trans-unit id="6ba3395fcc44d77deb4fad259828439fe83f301c" translate="yes" xml:space="preserve">
          <source>If the exit reason is not &lt;code&gt;:normal&lt;/code&gt;, all the processes linked to the process that exited will crash (unless they are trapping exits).</source>
          <target state="translated">終了理由が &lt;code&gt;:normal&lt;/code&gt; ではない場合、終了したプロセスにリンクされているすべてのプロセスがクラッシュします（出口をトラップしていない場合）。</target>
        </trans-unit>
        <trans-unit id="69bc5d1890437acbe1c535fa849ec2779651267d" translate="yes" xml:space="preserve">
          <source>If the expression cannot be expanded, it returns the expression itself. This function does not traverse the AST, only the root node is expanded.</source>
          <target state="translated">展開できなかった場合は,式そのものを返します.この関数はASTをトラバースせず,ルートノードのみを展開します.</target>
        </trans-unit>
        <trans-unit id="1d5138f099eddbd71facd7cd878f3e30168acb4c" translate="yes" xml:space="preserve">
          <source>If the external resource does not exist, the module still has a dependency on it, causing the module be recompiled as soon as the file is added.</source>
          <target state="translated">外部リソースが存在しない場合、モジュールはまだそのリソースに依存しており、ファイルが追加されるとすぐにモジュールが再コンパイルされます。</target>
        </trans-unit>
        <trans-unit id="9daaa1fc9c23e088e0d8755d3c8c12ee8baa78ff" translate="yes" xml:space="preserve">
          <source>If the file already exists and the contents are not the same, it asks for user confirmation.</source>
          <target state="translated">ファイルが既に存在していて、内容が異なる場合は、ユーザーの確認を求めます。</target>
        </trans-unit>
        <trans-unit id="dd469ee5a62e6b5a80b7c5e501b5ee43bbcd856c" translate="yes" xml:space="preserve">
          <source>If the file does exists, and if write is not combined with read, the file will be truncated.</source>
          <target state="translated">ファイルが存在していて、書き込みと読み込みが結合されていない場合、ファイルは切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="4a926f33aaf552a1fcd49d45cc93ae59488a7d3e" translate="yes" xml:space="preserve">
          <source>If the file has been required, it returns &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="translated">ファイルが必要な場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d5c19fb123316598a0d9b3638a762db6e8c9b35b" translate="yes" xml:space="preserve">
          <source>If the file has not been required, it returns the list of modules:</source>
          <target state="translated">ファイルが必要とされていない場合は、モジュールのリストを返します。</target>
        </trans-unit>
        <trans-unit id="f8fd33f5966315da13c7c5967bb4b7033821bc3d" translate="yes" xml:space="preserve">
          <source>If the function does not return &lt;code&gt;true&lt;/code&gt; for equal values, the sorting is not stable and the order of equal terms may be shuffled. For example:</source>
          <target state="translated">関数が等しい値に対して &lt;code&gt;true&lt;/code&gt; を返さない場合、並べ替えは安定せず、等しい項の順序が入れ替わることがあります。例えば：</target>
        </trans-unit>
        <trans-unit id="46872c4f6b3b3d53e570bd775f9872272859aad0" translate="yes" xml:space="preserve">
          <source>If the function/macro being defined has multiple clauses, the hook will be called for each clause.</source>
          <target state="translated">定義されている関数/マクロが複数の節を持つ場合、フックは各節ごとに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="49c229dbf0034a08eae6f9a0c1010fd39f336907" translate="yes" xml:space="preserve">
          <source>If the given &lt;code&gt;context&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; (by default it is), the binding for the current context is returned.</source>
          <target state="translated">指定された &lt;code&gt;context&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; （デフォルトではnil）の場合、現在のコンテキストのバインディングが返されます。</target>
        </trans-unit>
        <trans-unit id="6978259d37eaf03d5b3cc55b25024a1b3148e5a5" translate="yes" xml:space="preserve">
          <source>If the given function callback fails, the function returns &lt;code&gt;{:error, reason}&lt;/code&gt;.</source>
          <target state="translated">指定された関数のコールバックが失敗した場合、関数は &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="f6ebfab2382584c9b3958f6f2fa9de700377fed5" translate="yes" xml:space="preserve">
          <source>If the given name does not exist, an error is raised.</source>
          <target state="translated">与えられた名前が存在しない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3af8970b7302792aa5fbcf15bf7d3816a9358c60" translate="yes" xml:space="preserve">
          <source>If the given project configuration does not identify an umbrella project, &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="translated">指定されたプロジェクト構成がアンブレラプロジェクトを識別しない場合、 &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="46533ec867c9435d899cb6828abb727c8f1630e2" translate="yes" xml:space="preserve">
          <source>If the given project configuration identifies an umbrella project, the return value is a map of &lt;code&gt;app =&amp;gt; path&lt;/code&gt; where &lt;code&gt;app&lt;/code&gt; is a child app of the umbrella and &lt;code&gt;path&lt;/code&gt; is its path relative to the root of the umbrella project.</source>
          <target state="translated">指定されたプロジェクト構成がアンブレラプロジェクトを識別する場合、戻り値は &lt;code&gt;app =&amp;gt; path&lt;/code&gt; マップです。ここで、 &lt;code&gt;app&lt;/code&gt; はアンブレラの子アプリであり、 &lt;code&gt;path&lt;/code&gt; はアンブレラプロジェクトのルートに対する相対パスです。</target>
        </trans-unit>
        <trans-unit id="1a1e4f0e379f9bd60165b52c832ccce09165194e" translate="yes" xml:space="preserve">
          <source>If the given string is empty, an empty list is returned.</source>
          <target state="translated">与えられた文字列が空の場合は、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="b5fa7671aa9ac1c4f631b6b91cdd66f8be6d72c5" translate="yes" xml:space="preserve">
          <source>If the last argument is a data structure, such as maps and lists, and the beginning of the data structure fits on the same line as the function call, then no indentation happens, this allows code like this:</source>
          <target state="translated">最後の引数がマップやリストなどのデータ構造体で、データ構造体の先頭が関数呼び出しと同じ行に収まる場合、インデントが発生しないので、このようなコードが可能になります。</target>
        </trans-unit>
        <trans-unit id="78f6031137384aa25684e5873b8f78717fddd500" translate="yes" xml:space="preserve">
          <source>If the last chunk does not have &lt;code&gt;count&lt;/code&gt; elements to fill the chunk, elements are taken from &lt;code&gt;leftover&lt;/code&gt; to fill in the chunk. If &lt;code&gt;leftover&lt;/code&gt; does not have enough elements to fill the chunk, then a partial chunk is returned with less than &lt;code&gt;count&lt;/code&gt; elements.</source>
          <target state="translated">最後のチャンクにチャンクを埋める &lt;code&gt;count&lt;/code&gt; 個の要素がない場合、要素は &lt;code&gt;leftover&lt;/code&gt; から取られてチャンクを埋めます。 &lt;code&gt;leftover&lt;/code&gt; チャンクを満たすのに十分な要素がない場合は、 &lt;code&gt;count&lt;/code&gt; 要素未満の部分チャンクが返されます。</target>
        </trans-unit>
        <trans-unit id="6d2f647fee30ac3b21a14f06f704594c6fc607f3" translate="yes" xml:space="preserve">
          <source>If the matching entry points to the node evaluating the request, then we&amp;rsquo;ve finished routing, and this node will perform the requested operation. If the matching entry points to a different node, we&amp;rsquo;ll pass the request to this node, which will look at its own routing table (which may be different from the one in the first node) and act accordingly. If no entry matches, an error will be raised.</source>
          <target state="translated">一致するエントリがリクエストを評価するノードを指している場合、ルーティングは完了しており、このノードはリクエストされたオペレーションを実行します。一致するエントリが別のノードを指している場合は、このノードにリクエストを渡します。このノードは独自のルーティングテーブル（最初のノードとは異なる場合があります）を調べ、それに応じて動作します。一致するエントリがない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="0e8da94808be345264b3caf7126393ed8c8b9f07" translate="yes" xml:space="preserve">
          <source>If the module being checked is currently in a compiler deadlock, this function returns &lt;code&gt;{:error, :unavailable}&lt;/code&gt;. Unavailable doesn't necessarily mean the module doesn't exist, just that it is not currently available, but it (or may not) become available in the future.</source>
          <target state="translated">If the module being checked is currently in a compiler deadlock, this function returns &lt;code&gt;{:error, :unavailable}&lt;/code&gt; . Unavailable doesn't necessarily mean the module doesn't exist, just that it is not currently available, but it (or may not) become available in the future.</target>
        </trans-unit>
        <trans-unit id="52158ebe3b1b3c65fb9901ffb1a952d081b6bc67" translate="yes" xml:space="preserve">
          <source>If the module being checked is currently in a compiler deadlock, this functions returns &lt;code&gt;{:error, :nofile}&lt;/code&gt;.</source>
          <target state="translated">チェックされるモジュールが現在コンパイラのデッドロックにある場合、この関数は &lt;code&gt;{:error, :nofile}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="6d2912dbde0fc1cf3c15e41a6a7b770a6ace8e7a" translate="yes" xml:space="preserve">
          <source>If the module is already loaded, it works as no-op. If the module was not compiled yet, &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; halts the compilation of the caller until the module given to &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; becomes available or all files for the current project have been compiled. If compilation finishes and the module is not available, an error tuple is returned.</source>
          <target state="translated">If the module is already loaded, it works as no-op. If the module was not compiled yet, &lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt; halts the compilation of the caller until the module given to &lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt; becomes available or all files for the current project have been compiled. If compilation finishes and the module is not available, an error tuple is returned.</target>
        </trans-unit>
        <trans-unit id="4057f0905e6629307a032b9c000b6e956f9d35d4" translate="yes" xml:space="preserve">
          <source>If the module is already loaded, it works as no-op. If the module was not loaded yet, it checks if it needs to be compiled first and then tries to load it.</source>
          <target state="translated">モジュールが既にロードされている場合は、no-opとして動作します。モジュールがまだロードされていない場合は、最初にコンパイルする必要があるかどうかをチェックしてからロードしようとします。</target>
        </trans-unit>
        <trans-unit id="e5e8ed6a3a6371fcd484a0f8c9f4271b4ee45925" translate="yes" xml:space="preserve">
          <source>If the module is already loaded, this works as no-op. If the module was not yet loaded, it tries to load it.</source>
          <target state="translated">モジュールが既にロードされている場合、これはno-opとして動作します。モジュールがまだロードされていない場合は、モジュールをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="a53b9d6b0418ab1b2e4ace2c2f0d58e6dbe324b3" translate="yes" xml:space="preserve">
          <source>If the module is not instrumented or if the given function does not have a breakpoint, it is a no-op and it returns &lt;code&gt;:not_found&lt;/code&gt;. Otherwise it returns &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">モジュールがインストルメント化されていない場合、または指定された関数にブレークポイントがない場合、それはノーオペレーションであり、 &lt;code&gt;:not_found&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b54c97a0a75e51befdfd85bfe55c94a87325400a" translate="yes" xml:space="preserve">
          <source>If the module you want to invoke a function on has a long name, such as &lt;code&gt;SomeLibrary.Namespace.MyLib&lt;/code&gt;, and you find it verbose, you can leverage the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#alias/2&quot;&gt;&lt;code&gt;alias/2&lt;/code&gt;&lt;/a&gt; special form and still refer to the module as &lt;code&gt;MyLib&lt;/code&gt;.</source>
          <target state="translated">If the module you want to invoke a function on has a long name, such as &lt;code&gt;SomeLibrary.Namespace.MyLib&lt;/code&gt; , and you find it verbose, you can leverage the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#alias/2&quot;&gt; &lt;code&gt;alias/2&lt;/code&gt; &lt;/a&gt; special form and still refer to the module as &lt;code&gt;MyLib&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b3287b87c75de3c7f69ccf215597988b7b4d5d83" translate="yes" xml:space="preserve">
          <source>If the module you want to invoke a function on has a long name, such as &lt;code&gt;SomeLibrary.Namespace.MyLib&lt;/code&gt;, and you find it verbose, you can leverage the &lt;a href=&quot;kernel.specialforms#alias/2&quot;&gt;&lt;code&gt;alias/2&lt;/code&gt;&lt;/a&gt; special form and still refer to the module as &lt;code&gt;MyLib&lt;/code&gt;.</source>
          <target state="translated">関数を呼び出したいモジュールの名前が &lt;code&gt;SomeLibrary.Namespace.MyLib&lt;/code&gt; などの長い名前であり、その名前が冗長であることがわかった場合は、&lt;a href=&quot;kernel.specialforms#alias/2&quot;&gt; &lt;code&gt;alias/2&lt;/code&gt; &lt;/a&gt;特殊形式を利用しても、モジュールを &lt;code&gt;MyLib&lt;/code&gt; として参照できます。</target>
        </trans-unit>
        <trans-unit id="80bfedd28d224208419788d64b48145856d28f2e" translate="yes" xml:space="preserve">
          <source>If the normalized &lt;code&gt;index_range.first&lt;/code&gt; is out of bounds of the given &lt;code&gt;enumerable&lt;/code&gt;, or this one is greater than the normalized &lt;code&gt;index_range.last&lt;/code&gt;, then &lt;code&gt;[]&lt;/code&gt; is returned.</source>
          <target state="translated">正規化した場合 &lt;code&gt;index_range.first&lt;/code&gt; 所与の範囲外であり、 &lt;code&gt;enumerable&lt;/code&gt; 、またはこの1つは正規より大きい &lt;code&gt;index_range.last&lt;/code&gt; 、次に &lt;code&gt;[]&lt;/code&gt; 戻されます。</target>
        </trans-unit>
        <trans-unit id="08e33554a9805c7015a58e968e41eb7b15679006" translate="yes" xml:space="preserve">
          <source>If the number is equidistant to the two nearest integers, rounds away from zero.</source>
          <target state="translated">数字が最も近い2つの整数と等距離にある場合は、0から丸めます。</target>
        </trans-unit>
        <trans-unit id="1ada57e8ed2825b579416e3a51bc87db286561fd" translate="yes" xml:space="preserve">
          <source>If the offset is greater than string length, then it returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">オフセットが文字列の長さより大きい場合、 &lt;code&gt;&quot;&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6e14dbb4189c408fd4ca75086bfd71c426f435db" translate="yes" xml:space="preserve">
          <source>If the passed function returns &lt;code&gt;:pop&lt;/code&gt;, the return value of this callback must be &lt;code&gt;{value, new_data}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value under &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if not present) and &lt;code&gt;new_data&lt;/code&gt; is &lt;code&gt;data&lt;/code&gt; without &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">渡された関数が返す場合 &lt;code&gt;:pop&lt;/code&gt; 、このコールバック関数の戻り値でなければならない &lt;code&gt;{value, new_data}&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 下の値である &lt;code&gt;key&lt;/code&gt; （または &lt;code&gt;nil&lt;/code&gt; でない場合に存在する）と &lt;code&gt;new_data&lt;/code&gt; ある &lt;code&gt;data&lt;/code&gt; なし &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff09001e9ce2d8278137d1ce993917e82be4cb26" translate="yes" xml:space="preserve">
          <source>If the passed function returns &lt;code&gt;{get_value, update_value}&lt;/code&gt;, the return value of this callback should be &lt;code&gt;{get_value, new_data}&lt;/code&gt;, where:</source>
          <target state="translated">渡された関数が &lt;code&gt;{get_value, update_value}&lt;/code&gt; を返す場合、このコールバックの戻り値は &lt;code&gt;{get_value, new_data}&lt;/code&gt; でなければなりません。ここで、</target>
        </trans-unit>
        <trans-unit id="f3dea051cec0438020d90f4862f83ccd43c6add8" translate="yes" xml:space="preserve">
          <source>If the path given to &lt;code&gt;File.read/1&lt;/code&gt; exists, it returns a tuple with the atom &lt;code&gt;:ok&lt;/code&gt; as the first element and the file contents as the second. Otherwise, it returns a tuple with &lt;code&gt;:error&lt;/code&gt; and the error description.</source>
          <target state="translated">&lt;code&gt;File.read/1&lt;/code&gt; に指定されたパスが存在する場合、最初の要素としてアトム &lt;code&gt;:ok&lt;/code&gt; 、2番目の要素としてファイルの内容を含むタプルを返します。それ以外の場合は、 &lt;code&gt;:error&lt;/code&gt; とエラーの説明を含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="53bd7b87b61d322c4fd45f7642221fa6272a8869" translate="yes" xml:space="preserve">
          <source>If the path is already an absolute path, &lt;code&gt;relative_to&lt;/code&gt; is ignored.</source>
          <target state="translated">パスがすでに絶対パスの場合、 &lt;code&gt;relative_to&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="4146f9776d17822883d0a24f1d05b48694b8cdc9" translate="yes" xml:space="preserve">
          <source>If the previous value before invoking the function is &lt;code&gt;nil&lt;/code&gt;, the function &lt;em&gt;will&lt;/em&gt; receive &lt;code&gt;nil&lt;/code&gt; as a value and must handle it accordingly (be it by failing or providing a sane default).</source>
          <target state="translated">関数を呼び出す前の以前の値が &lt;code&gt;nil&lt;/code&gt; の場合、関数&lt;em&gt;は&lt;/em&gt;値として &lt;code&gt;nil&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;受け取り、それに応じて（失敗するか、まともなデフォルトを提供することによって）処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="4dbd652e27d03f3eda58f1454adbcc277b1cf2a2" translate="yes" xml:space="preserve">
          <source>If the previous value before invoking the function is &lt;code&gt;nil&lt;/code&gt;, the function &lt;em&gt;will&lt;/em&gt; receive &lt;code&gt;nil&lt;/code&gt; as a value and must handle it accordingly.</source>
          <target state="translated">関数を呼び出す前の以前の値が &lt;code&gt;nil&lt;/code&gt; の場合、関数&lt;em&gt;は&lt;/em&gt;値として &lt;code&gt;nil&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;受け取り、それに応じて処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="c374c88228928cded93b273d043b81d7a9e4db50" translate="yes" xml:space="preserve">
          <source>If the process has no messages waiting when the timeout is set and the number of given milliseconds pass without any message arriving, then &lt;code&gt;handle_info/2&lt;/code&gt; will be called with &lt;code&gt;:timeout&lt;/code&gt; as the first argument. The timeout is cleared if any message is waiting or arrives before the given timeout.</source>
          <target state="translated">タイムアウトが設定されているときにプロセスに待機中のメッセージがなく、メッセージが到着せずに指定されたミリ秒数が経過した場合、最初の引数として &lt;code&gt;:timeout&lt;/code&gt; を使用して &lt;code&gt;handle_info/2&lt;/code&gt; が呼び出されます。指定されたタイムアウトの前にメッセージが待機中または到着した場合、タイムアウトはクリアされます。</target>
        </trans-unit>
        <trans-unit id="029b68fe64722c4e17e93dd0458f45ae756acd0b" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;pid&lt;/code&gt; is alive (that is, it's not exiting and has not exited yet) than this function returns &lt;code&gt;true&lt;/code&gt;. Otherwise, it returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; で識別されたプロセスが生きている（つまり、終了しておらず、まだ終了していない）場合、この関数は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4f04e984ddcea311ccb003e5103d4ca1f57a069c" translate="yes" xml:space="preserve">
          <source>If the process is already dead when calling &lt;a href=&quot;#monitor/1&quot;&gt;&lt;code&gt;Process.monitor/1&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;:DOWN&lt;/code&gt; message is delivered immediately.</source>
          <target state="translated">If the process is already dead when calling &lt;a href=&quot;#monitor/1&quot;&gt; &lt;code&gt;Process.monitor/1&lt;/code&gt; &lt;/a&gt;, a &lt;code&gt;:DOWN&lt;/code&gt; message is delivered immediately.</target>
        </trans-unit>
        <trans-unit id="69f0fc29573a8d218a644c814446337651d8b2a1" translate="yes" xml:space="preserve">
          <source>If the process is already dead when calling &lt;a href=&quot;process#monitor/1&quot;&gt;&lt;code&gt;Process.monitor/1&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;:DOWN&lt;/code&gt; message is delivered immediately.</source>
          <target state="translated">&lt;a href=&quot;process#monitor/1&quot;&gt; &lt;code&gt;Process.monitor/1&lt;/code&gt; の&lt;/a&gt;呼び出し時にプロセスがすでに停止している場合は、 &lt;code&gt;:DOWN&lt;/code&gt; メッセージがすぐに配信されます。</target>
        </trans-unit>
        <trans-unit id="25b64d8d09022ae8fa6be42d0e689d9f55f93a0d" translate="yes" xml:space="preserve">
          <source>If the registry has duplicate keys, multiple registrations from the current process under the same key are allowed.</source>
          <target state="translated">レジストリに重複したキーがある場合、同じキーの下で現在のプロセスから複数の登録が許可されます。</target>
        </trans-unit>
        <trans-unit id="296325dc97cde1334962459eb9c5ec5273a16093" translate="yes" xml:space="preserve">
          <source>If the registry has unique keys, it will return &lt;code&gt;{:ok, owner}&lt;/code&gt; unless the key is already associated to a PID, in which case it returns &lt;code&gt;{:error, {:already_registered, pid}}&lt;/code&gt;.</source>
          <target state="translated">レジストリに一意のキーがある場合、キーがすでにPIDに関連付けられている場合を除き、レジストリは &lt;code&gt;{:ok, owner}&lt;/code&gt; 返します。その場合、 &lt;code&gt;{:error, {:already_registered, pid}}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="86406b94fdf6d0355c113c51cd4e50d8ab966009" translate="yes" xml:space="preserve">
          <source>If the registry is partitioned, the callback is invoked multiple times per partition. If the registry is partitioned and &lt;code&gt;parallel: true&lt;/code&gt; is given as an option, the dispatching happens in parallel. In both cases, the callback is only invoked if there are entries for that partition.</source>
          <target state="translated">レジストリがパーティション化されている場合、コールバックはパーティションごとに複数回呼び出されます。レジストリがパーティション分割されており、 &lt;code&gt;parallel: true&lt;/code&gt; がオプションとして指定されている場合、ディスパッチは並行して行われます。どちらの場合も、そのパーティションのエントリがある場合にのみコールバックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ee4f792d4247d36f7519cbe4df3f7c9194b0d6d3" translate="yes" xml:space="preserve">
          <source>If the registry is unique, the keys are unique. Otherwise they may contain duplicates if the process was registered under the same key multiple times. The list will be empty if the process is dead or it has no keys in this registry.</source>
          <target state="translated">レジストリが一意であれば、キーは一意です。そうでない場合は、プロセスが同じキーで複数回登録されている場合、重複したキーが含まれている可能性があります。プロセスが死んでいる場合や、このレジストリにキーがない場合は、リストは空になります。</target>
        </trans-unit>
        <trans-unit id="cc9c622905709241fd4a039cba6efcb68b163916" translate="yes" xml:space="preserve">
          <source>If the repository is private though, you may need to specify the private URL &lt;code&gt;git@github.com:YOUR_ACCOUNT/kv.git&lt;/code&gt;. In any case, Mix will be able to fetch it for you as long as you have the proper credentials.</source>
          <target state="translated">ただし、リポジトリがプライベートの場合は、プライベートURL &lt;code&gt;git@github.com:YOUR_ACCOUNT/kv.git&lt;/code&gt; を指定する必要があります。いずれにしても、適切な資格情報を持っている限り、Mixはそれをフェッチできます。</target>
        </trans-unit>
        <trans-unit id="8f88ca4263ab5c36582e4eb171ede7757f5a8977" translate="yes" xml:space="preserve">
          <source>If the running process terminates, a new IEx session is started.</source>
          <target state="translated">実行中のプロセスが終了すると、新しい IEx セッションが開始されます。</target>
        </trans-unit>
        <trans-unit id="85e3fc96a9666ea6c8e81e1cf2be2da940abf807" translate="yes" xml:space="preserve">
          <source>If the same key is set via &lt;code&gt;@tag&lt;/code&gt;, the &lt;code&gt;@tag&lt;/code&gt; value has higher precedence.</source>
          <target state="translated">同じ &lt;code&gt;@tag&lt;/code&gt; を介して設定されている場合、 &lt;code&gt;@tag&lt;/code&gt; 値の方が優先されます。</target>
        </trans-unit>
        <trans-unit id="bba8e4c316db50e3c886fad2f7191375910352b7" translate="yes" xml:space="preserve">
          <source>If the same variable appears twice in the same pattern, then they must be bound to the same value:</source>
          <target state="translated">同じ変数が同じパターンで2回出現する場合、それらは同じ値にバインドされなければなりません。</target>
        </trans-unit>
        <trans-unit id="c381bd34f0f516da0adf5a6559d1022816298c76" translate="yes" xml:space="preserve">
          <source>If the scheme is unknown to the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; module, this function returns &lt;code&gt;nil&lt;/code&gt;. The default port for any scheme can be configured globally via &lt;a href=&quot;#default_port/2&quot;&gt;&lt;code&gt;default_port/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スキームが&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;URI&lt;/code&gt; &lt;/a&gt;モジュールに未知の場合、この関数は &lt;code&gt;nil&lt;/code&gt; を返します。任意のスキームのデフォルトポートは、&lt;a href=&quot;#default_port/2&quot;&gt; &lt;code&gt;default_port/2&lt;/code&gt; を&lt;/a&gt;介してグローバルに設定できます。</target>
        </trans-unit>
        <trans-unit id="1cf20abb00a9c7eb91eeec27cb0a3c2044ccf845" translate="yes" xml:space="preserve">
          <source>If the server is successfully created and initialized, the function returns &lt;code&gt;{:ok, pid}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the server. If an agent with the specified name already exists, the function returns &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; with the PID of that process.</source>
          <target state="translated">サーバーが正常に作成および初期化されると、関数は &lt;code&gt;{:ok, pid}&lt;/code&gt; 返します。ここで、 &lt;code&gt;pid&lt;/code&gt; はサーバーのPIDです。指定された名前のエージェントがすでに存在する場合、関数はそのプロセスのPIDとともに &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6ae18b173fd4f257f191d68374b82b3609576f9a" translate="yes" xml:space="preserve">
          <source>If the server is successfully created and initialized, this function returns &lt;code&gt;{:ok, pid}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the server. If a process with the specified server name already exists, this function returns &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; with the PID of that process.</source>
          <target state="translated">サーバーが正常に作成および初期化されると、この関数は &lt;code&gt;{:ok, pid}&lt;/code&gt; 返します。ここで、 &lt;code&gt;pid&lt;/code&gt; はサーバーのPIDです。指定されたサーバー名のプロセスが既に存在する場合、この関数はそのプロセスのPIDとともに &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9c79dacc73fa9835dcb970cb3bd153402ac7a2c0" translate="yes" xml:space="preserve">
          <source>If the sigil letter is in uppercase, no interpolation is allowed in the sigil, otherwise its contents may be dynamic. Compare the results of the sigils below for more information:</source>
          <target state="translated">シギルの文字が大文字の場合、シギルでは補間はできませんが、そうでない場合は内容が動的なものになる可能性があります。詳細は以下のシグルの結果を比較してみてください。</target>
        </trans-unit>
        <trans-unit id="f0d8fa47818ba024a0ca6635125390659b191c06" translate="yes" xml:space="preserve">
          <source>If the size of float exceeds the maximum size of &lt;code&gt;1.7976931348623157e+308&lt;/code&gt;, the &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">floatのサイズが &lt;code&gt;1.7976931348623157e+308&lt;/code&gt; の最大サイズを超えると、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="afe9e25d91e6b6ca076f9ab983498ce202d449f4" translate="yes" xml:space="preserve">
          <source>If the size of float exceeds the maximum size of &lt;code&gt;1.7976931348623157e+308&lt;/code&gt;, the &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">If the size of float exceeds the maximum size of &lt;code&gt;1.7976931348623157e+308&lt;/code&gt; , the &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; exception is raised.</target>
        </trans-unit>
        <trans-unit id="1f18c5146917295cd360116e64980d6814f74742" translate="yes" xml:space="preserve">
          <source>If the source is a file, it copies &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;. If the &lt;code&gt;source&lt;/code&gt; is a directory, it copies the contents inside source into the &lt;code&gt;destination&lt;/code&gt; directory.</source>
          <target state="translated">ソースファイル、それをコピーしている場合は &lt;code&gt;source&lt;/code&gt; に &lt;code&gt;destination&lt;/code&gt; 。 &lt;code&gt;source&lt;/code&gt; がディレクトリの場合、ソース内のコンテンツを &lt;code&gt;destination&lt;/code&gt; ディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="d79c1221466668c8f2fb37f46a9b0c4eff50c912" translate="yes" xml:space="preserve">
          <source>If the start function of any of the child processes fails or returns an error tuple or an erroneous value, the supervisor first terminates with reason &lt;code&gt;:shutdown&lt;/code&gt; all the child processes that have already been started, and then terminates itself and returns &lt;code&gt;{:error, {:shutdown, reason}}&lt;/code&gt;.</source>
          <target state="translated">いずれかの子プロセスの開始関数が失敗するか、エラーのタプルまたは誤った値を返す場合、スーパーバイザーはまず理由 &lt;code&gt;:shutdown&lt;/code&gt; で終了し、すでに開始されているすべての子プロセスを終了してから終了し、 &lt;code&gt;{:error, {:shutdown, reason}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95311d242d980eca3e042ab39a6d275172dd2491" translate="yes" xml:space="preserve">
          <source>If the start of the range is not a valid offset for the given string or if the range is in reverse order, returns &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">範囲の先頭が指定された文字列の有効なオフセットでない場合、または範囲が逆順の場合、 &lt;code&gt;&quot;&quot;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fdd805e8128eab933d8276c52b9cb625ab5fad9b" translate="yes" xml:space="preserve">
          <source>If the start or end of the range is negative, the whole string is traversed first in order to convert the negative indices into positive ones.</source>
          <target state="translated">範囲の開始または終了が負の場合、負のインデックスを正のインデックスに変換するために、文字列全体が最初に走査されます。</target>
        </trans-unit>
        <trans-unit id="fa648af6a9f14eed70d03b7bbaf8c1091284802b" translate="yes" xml:space="preserve">
          <source>If the supervisor already has N children in a way that N exceeds the amount of &lt;code&gt;:max_children&lt;/code&gt; set on the supervisor initialization (see &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;), then this function returns &lt;code&gt;{:error, :max_children}&lt;/code&gt;.</source>
          <target state="translated">Nがスーパーバイザの初期化で設定された &lt;code&gt;:max_children&lt;/code&gt; の量（&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; を&lt;/a&gt;参照）を超えるようにスーパーバイザがすでにN個の子を持っている場合、この関数は &lt;code&gt;{:error, :max_children}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ab3a50abd31e0fe599ff965258406372848105a0" translate="yes" xml:space="preserve">
          <source>If the supervisor and its child processes are successfully spawned (if the start function of each child process returns &lt;code&gt;{:ok, child}&lt;/code&gt;, &lt;code&gt;{:ok, child, info}&lt;/code&gt;, or &lt;code&gt;:ignore&lt;/code&gt;) this function returns &lt;code&gt;{:ok, pid}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the supervisor. If the supervisor is given a name and a process with the specified name already exists, the function returns &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of that process.</source>
          <target state="translated">スーパーバイザとその子プロセスが正常に生成された場合（各子プロセスの開始関数が &lt;code&gt;{:ok, child}&lt;/code&gt; 、 &lt;code&gt;{:ok, child, info}&lt;/code&gt; 、または &lt;code&gt;:ignore&lt;/code&gt; を返した場合）、この関数は &lt;code&gt;{:ok, pid}&lt;/code&gt; 返します。ここで、 &lt;code&gt;pid&lt;/code&gt; はスーパーバイザのPIDです。スーパーバイザに名前が付けられ、指定された名前のプロセスがすでに存在する場合、関数は &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; 返します。ここで、 &lt;code&gt;pid&lt;/code&gt; はそのプロセスのPIDです。</target>
        </trans-unit>
        <trans-unit id="ba930cdc55e703dfc4d9bcd1944d94e721ba5186" translate="yes" xml:space="preserve">
          <source>If the supervisor is successfully spawned, this function returns &lt;code&gt;{:ok, pid}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the supervisor. If the supervisor is given a name and a process with the specified name already exists, the function returns &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of that process.</source>
          <target state="translated">スーパーバイザが正常に生成されると、この関数は &lt;code&gt;{:ok, pid}&lt;/code&gt; 返します。ここで、 &lt;code&gt;pid&lt;/code&gt; はスーパーバイザのPIDです。スーパーバイザに名前が付けられ、指定された名前のプロセスがすでに存在する場合、関数は &lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; 返します。ここで、 &lt;code&gt;pid&lt;/code&gt; はそのプロセスのPIDです。</target>
        </trans-unit>
        <trans-unit id="a58325ece0282e34604d2c42efce1f2775632579" translate="yes" xml:space="preserve">
          <source>If the task or alias has already been invoked, subsequent calls to &lt;a href=&quot;#run/2&quot;&gt;&lt;code&gt;run/2&lt;/code&gt;&lt;/a&gt; will &lt;em&gt;abort&lt;/em&gt; without executing and return &lt;code&gt;:noop&lt;/code&gt;.</source>
          <target state="translated">If the task or alias has already been invoked, subsequent calls to &lt;a href=&quot;#run/2&quot;&gt; &lt;code&gt;run/2&lt;/code&gt; &lt;/a&gt; will &lt;em&gt;abort&lt;/em&gt; without executing and return &lt;code&gt;:noop&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e53af2f1716d98281bb0f2f71d348e2e0b0ca4dd" translate="yes" xml:space="preserve">
          <source>If the task or alias were already invoked, it does not run them again and simply aborts with &lt;code&gt;:noop&lt;/code&gt;.</source>
          <target state="translated">タスクまたはエイリアスがすでに呼び出されている場合、それらは再度実行されず、単に &lt;code&gt;:noop&lt;/code&gt; で中止されます。</target>
        </trans-unit>
        <trans-unit id="bdd5aaa87ae18322d70f284e647adedce16eae03" translate="yes" xml:space="preserve">
          <source>If the task was not yet invoked, it runs the task and returns the result.</source>
          <target state="translated">タスクがまだ起動されていない場合は、タスクを実行して結果を返します。</target>
        </trans-unit>
        <trans-unit id="1ffe14eba0b86eb2256ef62d3f747347750fc072" translate="yes" xml:space="preserve">
          <source>If the terms compare equal, the first one is returned.</source>
          <target state="translated">条件が等しい場合は、最初のものが返されます。</target>
        </trans-unit>
        <trans-unit id="76f5c2bf2f306f61b2cf3e6037db4001b825a0db" translate="yes" xml:space="preserve">
          <source>If the use case where you were using GenEvent requires more complex logic, &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt; provides a great alternative. GenStage is an external Elixir library maintained by the Elixir team; it provides a tool to implement systems that exchange events in a demand-driven way with built-in support for backpressure. See the &lt;a href=&quot;https://hexdocs.pm/gen_stage&quot;&gt;GenStage documentation&lt;/a&gt; for more information.</source>
          <target state="translated">GenEventを使用していたユースケースでより複雑なロジックが必要な場合、&lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt;は優れた代替手段を提供します。GenStageは、Elixirチームが管理する外部のElixirライブラリです。これは、バックプレッシャーの組み込みサポートを備えた、需要主導の方法でイベントを交換するシステムを実装するためのツールを提供します。詳細については、&lt;a href=&quot;https://hexdocs.pm/gen_stage&quot;&gt;GenStageのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dea741f0a7bd15d40b84d96d22a4ee172da3fb54" translate="yes" xml:space="preserve">
          <source>If the use of this module were confined to your own project, you would be able to keep defining new &lt;code&gt;type/1&lt;/code&gt; functions for each new data type. However, this code could be problematic if it were shared as a dependency by multiple apps because there would be no easy way to extend its functionality.</source>
          <target state="translated">If the use of this module were confined to your own project, you would be able to keep defining new &lt;code&gt;type/1&lt;/code&gt; functions for each new data type. However, this code could be problematic if it were shared as a dependency by multiple apps because there would be no easy way to extend its functionality.</target>
        </trans-unit>
        <trans-unit id="a623a53d8f71f4bfc3e91a4b2fa820b73e9de973" translate="yes" xml:space="preserve">
          <source>If there are config providers, then a value is injected into the &lt;code&gt;:elixir&lt;/code&gt; application configuration in &lt;code&gt;sys_config&lt;/code&gt; to be read during boot and trigger the providers.</source>
          <target state="translated">If there are config providers, then a value is injected into the &lt;code&gt;:elixir&lt;/code&gt; application configuration in &lt;code&gt;sys_config&lt;/code&gt; to be read during boot and trigger the providers.</target>
        </trans-unit>
        <trans-unit id="0f3ba34b6884281919234bd65a5c27e05d943121" translate="yes" xml:space="preserve">
          <source>If there are duplicated keys, they are all removed and only the first one is updated.</source>
          <target state="translated">重複した鍵がある場合はすべて削除され、最初の鍵のみが更新されます。</target>
        </trans-unit>
        <trans-unit id="4cc5164cbf429134f06fc3a42dc1c775490799c5" translate="yes" xml:space="preserve">
          <source>If there are no errors, returns a &lt;code&gt;{parsed, rest}&lt;/code&gt; tuple where:</source>
          <target state="translated">エラーがない場合は、 &lt;code&gt;{parsed, rest}&lt;/code&gt; タプルを返します。</target>
        </trans-unit>
        <trans-unit id="5f562d79d2233001e164c67b307f491a4295de9f" translate="yes" xml:space="preserve">
          <source>If there are no newlines around the brackets, then the formatter will try to fit everything on a single line, such that the snippet below</source>
          <target state="translated">括弧の周りに改行がない場合、フォーマッタはすべてを一行にまとめようとします。</target>
        </trans-unit>
        <trans-unit id="ec750b5e724607eb9b83c43fb0d225987965cd76" translate="yes" xml:space="preserve">
          <source>If there exists a task matching the given task name and it has not yet been invoked, this will run the task with the given &lt;code&gt;args&lt;/code&gt; and return the result.</source>
          <target state="translated">If there exists a task matching the given task name and it has not yet been invoked, this will run the task with the given &lt;code&gt;args&lt;/code&gt; and return the result.</target>
        </trans-unit>
        <trans-unit id="21bb1c823fd135c98a6434a0ecb8b17912934fc2" translate="yes" xml:space="preserve">
          <source>If there is an &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#module-aliases&quot;&gt;alias&lt;/a&gt; defined for the given task name, the alias will be invoked instead of the original task.</source>
          <target state="translated">If there is an &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#module-aliases&quot;&gt;alias&lt;/a&gt; defined for the given task name, the alias will be invoked instead of the original task.</target>
        </trans-unit>
        <trans-unit id="8e379b9421d0be8405c193a1a3a55eda70ffe92a" translate="yes" xml:space="preserve">
          <source>If there is an alias with the same name, the alias will be invoked instead of the original task.</source>
          <target state="translated">同じ名前のエイリアスがある場合は、元のタスクの代わりにエイリアスが起動されます。</target>
        </trans-unit>
        <trans-unit id="b8c630c661fb48b6b67b3b3185448712f080b96d" translate="yes" xml:space="preserve">
          <source>If there is an interest to register dynamic names locally, do not use atoms, as atoms are never garbage-collected and therefore dynamically generated atoms won't be garbage-collected. For such cases, you can set up your own local registry by using the &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;&lt;code&gt;Registry&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">If there is an interest to register dynamic names locally, do not use atoms, as atoms are never garbage-collected and therefore dynamically generated atoms won't be garbage-collected. For such cases, you can set up your own local registry by using the &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt; &lt;code&gt;Registry&lt;/code&gt; &lt;/a&gt; module.</target>
        </trans-unit>
        <trans-unit id="742d780da366c9749e094a3e2601e05af9f19b1c" translate="yes" xml:space="preserve">
          <source>If there is an interest to register dynamic names locally, do not use atoms, as atoms are never garbage-collected and therefore dynamically generated atoms won't be garbage-collected. For such cases, you can set up your own local registry by using the &lt;a href=&quot;registry&quot;&gt;&lt;code&gt;Registry&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">動的な名前をローカルに登録することに関心がある場合は、アトムを使用しないでください。アトムはガベージコレクションされないため、動的に生成されたアトムはガベージコレクションされません。このような場合、&lt;a href=&quot;registry&quot;&gt; &lt;code&gt;Registry&lt;/code&gt; &lt;/a&gt;モジュールを使用して独自のローカルレジストリを設定できます。</target>
        </trans-unit>
        <trans-unit id="09ae9d40e8862f6952cd3759209cd2022fc6c81a" translate="yes" xml:space="preserve">
          <source>If there is an invalid dependency, its status is printed before aborting.</source>
          <target state="translated">無効な依存関係がある場合は、その状態が表示されてからアボートします。</target>
        </trans-unit>
        <trans-unit id="1e0688b7a0e6bd6041bf3e04042b749415e0032c" translate="yes" xml:space="preserve">
          <source>If there is no current project, &lt;code&gt;nil&lt;/code&gt; is returned. This may happen in cases there is no &lt;code&gt;mix.exs&lt;/code&gt; in the current directory.</source>
          <target state="translated">現在のプロジェクトがない場合は、 &lt;code&gt;nil&lt;/code&gt; が返されます。これは、現在のディレクトリに &lt;code&gt;mix.exs&lt;/code&gt; がない場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c639ca5dfec4193385c0f9daeb2b1d4be710cc52" translate="yes" xml:space="preserve">
          <source>If there is no message in the mailbox matching any of the patterns, the current process will wait until a matching message arrives. A timeout can also be specified:</source>
          <target state="translated">メールボックス内にどのパターンにも一致するメッセージがない場合、現在のプロセスは一致するメッセージが到着するまで待ちます。タイムアウトを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="1cbcac0d0378ca0df3e990fb1469a678a45c89ea" translate="yes" xml:space="preserve">
          <source>If there is no option, we generate a random one the first time.</source>
          <target state="translated">選択肢がない場合は、最初にランダムなものを生成します。</target>
        </trans-unit>
        <trans-unit id="8408450afd5b2f3e9042d1b8c13e9f58240f928f" translate="yes" xml:space="preserve">
          <source>If there is no project defined, it still returns a keyword list with default values. This allows many Mix tasks to work without the need for an underlying project.</source>
          <target state="translated">プロジェクトが定義されていない場合でも、デフォルト値のキーワードリストを返します。これにより、多くの Mix タスクが、基礎となるプロジェクトを必要とせずに動作するようになります。</target>
        </trans-unit>
        <trans-unit id="6b4a62bcf57109f5efa07a74f29988033109640c" translate="yes" xml:space="preserve">
          <source>If there is no such link, this function does nothing. If &lt;code&gt;pid_or_port&lt;/code&gt; does not exist, this function does not produce any errors and simply does nothing.</source>
          <target state="translated">そのようなリンクがない場合、この関数は何もしません。場合 &lt;code&gt;pid_or_port&lt;/code&gt; が存在しない場合、この機能はすべてのエラーを生成し、単に何もしませんしません。</target>
        </trans-unit>
        <trans-unit id="690bb679a1fa855e4e7e99b242998643c82b454f" translate="yes" xml:space="preserve">
          <source>If there is only a single possible period for the provided &lt;code&gt;datetime&lt;/code&gt;, the a tuple with &lt;code&gt;:single&lt;/code&gt; and the &lt;code&gt;time_zone_period&lt;/code&gt; is returned.</source>
          <target state="translated">指定された &lt;code&gt;datetime&lt;/code&gt; に可能な期間が1つしかない場合、 &lt;code&gt;:single&lt;/code&gt; と &lt;code&gt;time_zone_period&lt;/code&gt; を含むタプルが返されます。</target>
        </trans-unit>
        <trans-unit id="517af2219a54d5ffad122594bfbc6b466e49d962" translate="yes" xml:space="preserve">
          <source>If there is only a single possible period for the provided &lt;code&gt;datetime&lt;/code&gt;, then a tuple with &lt;code&gt;:ok&lt;/code&gt; and the &lt;code&gt;time_zone_period&lt;/code&gt; is returned.</source>
          <target state="translated">If there is only a single possible period for the provided &lt;code&gt;datetime&lt;/code&gt; , then a tuple with &lt;code&gt;:ok&lt;/code&gt; and the &lt;code&gt;time_zone_period&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="f87cf65c1843c87f5a9fb595853f1c2faf34fb20" translate="yes" xml:space="preserve">
          <source>If this function receives a binary, the same binary is returned.</source>
          <target state="translated">この関数がバイナリを受け取ると、同じバイナリが返されます。</target>
        </trans-unit>
        <trans-unit id="8ec445d356d6135c24d3babce972b050d1a27a32" translate="yes" xml:space="preserve">
          <source>If this is not desired, use &lt;a href=&quot;#start/1&quot;&gt;&lt;code&gt;Task.start/1&lt;/code&gt;&lt;/a&gt; or consider starting the task under a &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;async_nolink&lt;/code&gt; or &lt;code&gt;start_child&lt;/code&gt;.</source>
          <target state="translated">If this is not desired, use &lt;a href=&quot;#start/1&quot;&gt; &lt;code&gt;Task.start/1&lt;/code&gt; &lt;/a&gt; or consider starting the task under a &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt; using &lt;code&gt;async_nolink&lt;/code&gt; or &lt;code&gt;start_child&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="722410509d91a2ea35d8481e8dcb2edd1a9471e8" translate="yes" xml:space="preserve">
          <source>If this is not desired, use &lt;a href=&quot;task#start/1&quot;&gt;&lt;code&gt;Task.start/1&lt;/code&gt;&lt;/a&gt; or consider starting the task under a &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;async_nolink&lt;/code&gt; or &lt;code&gt;start_child&lt;/code&gt;.</source>
          <target state="translated">これが望ましくない場合は、使用&lt;a href=&quot;task#start/1&quot;&gt; &lt;code&gt;Task.start/1&lt;/code&gt; &lt;/a&gt;または下のタスクの開始を検討&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; を&lt;/a&gt;使用して &lt;code&gt;async_nolink&lt;/code&gt; か &lt;code&gt;start_child&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="885b568a39d2f2144bcbdbe9f088220630bb0f55" translate="yes" xml:space="preserve">
          <source>If those conditions are not met, the behaviour is undefined (on Erlang/OTP 21 and earlier) or will raise (on Erlang/OTP 22 and later).</source>
          <target state="translated">これらの条件が満たされていない場合、動作は未定義(Erlang/OTP 21以前)かレイズ(Erlang/OTP 22以降)になります。</target>
        </trans-unit>
        <trans-unit id="c532c9eeb04daa8871cfe8c245158904c23d03c5" translate="yes" xml:space="preserve">
          <source>If two calendars are not compatible, we can only convert datetimes and times between them. If they are compatible, this means that we can also convert dates as well as naive datetimes between them.</source>
          <target state="translated">2つのカレンダーが互換性がない場合は、それらの間で日付と時刻を変換することしかできません。互換性がある場合は、日付と時刻の変換だけでなく、それらの間の素朴な日付も変換できることを意味します。</target>
        </trans-unit>
        <trans-unit id="6230d8e63d2f6528e6ac7ed7bd4bbeed089d2da9" translate="yes" xml:space="preserve">
          <source>If two modules &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are imported and they both contain a &lt;code&gt;foo&lt;/code&gt; function with an arity of &lt;code&gt;1&lt;/code&gt;, an error is only emitted if an ambiguous call to &lt;code&gt;foo/1&lt;/code&gt; is actually made; that is, the errors are emitted lazily, not eagerly.</source>
          <target state="translated">2つのモジュール &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; がインポートされ、両方にアリティが &lt;code&gt;1&lt;/code&gt; の &lt;code&gt;foo&lt;/code&gt; 関数が含まれている場合、 &lt;code&gt;foo/1&lt;/code&gt; へのあいまいな呼び出しが実際に行われた場合にのみエラーが発生します。つまり、エラーは熱心にではなく、遅延して出力されます。</target>
        </trans-unit>
        <trans-unit id="55cdfd10bc87ea7561c4ad8cc479f9faf3b27132" translate="yes" xml:space="preserve">
          <source>If uppercase characters are present, they are not modified in any way as a mechanism to preserve acronyms:</source>
          <target state="translated">大文字が存在する場合は、頭字語を保持するための仕組みとして、いかなる方法でも変更されません。</target>
        </trans-unit>
        <trans-unit id="1343958b023308460ee2f6f5daf43ba1fb660edd" translate="yes" xml:space="preserve">
          <source>If we save the code above in a file named &amp;ldquo;concat.ex&amp;rdquo; and compile it, Elixir will emit the following warning:</source>
          <target state="translated">上記のコードを「concat.ex」という名前のファイルに保存してコンパイルすると、Elixirは次の警告を出します。</target>
        </trans-unit>
        <trans-unit id="8fc6b97491613a1b35780efb44cacd0f0d9099d1" translate="yes" xml:space="preserve">
          <source>If we start our server, we can now send commands to it. For now, we will get two different responses: &amp;ldquo;OK&amp;rdquo; when the command is known and &amp;ldquo;UNKNOWN COMMAND&amp;rdquo; otherwise:</source>
          <target state="translated">サーバーを起動すると、コマンドをサーバーに送信できるようになります。ここでは、2つの異なる応答を取得します。コマンドが既知の場合は「OK」、それ以外の場合は「UNKNOWN COMMAND」です。</target>
        </trans-unit>
        <trans-unit id="74591893e85cc364e81b230bedab46ae114fe665" translate="yes" xml:space="preserve">
          <source>If we try to dispatch to &lt;code&gt;Hello.world&lt;/code&gt;, it won't be available as it was defined only in the other shell:</source>
          <target state="translated">&lt;code&gt;Hello.world&lt;/code&gt; にディスパッチしようとすると、他のシェルでのみ定義されていたため使用できません。</target>
        </trans-unit>
        <trans-unit id="51c60bac3d7f07a69c2caf5416fb9b2fa0580339" translate="yes" xml:space="preserve">
          <source>If we use chardata instead, it will work as expected:</source>
          <target state="translated">代わりにカルダタを使えば、期待通りに動作します。</target>
        </trans-unit>
        <trans-unit id="5c38beec4d9e8627a3718fd3acf1efdd27ca154a" translate="yes" xml:space="preserve">
          <source>If we were to use &lt;code&gt;:into&lt;/code&gt;, we would need a data type that computes the frequency of each element it holds. While there is no such data type in Elixir, you could implement one yourself.</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; を使用する場合、保持する各要素の頻度を計算するデータ型が必要になります。Elixirにはそのようなデータ型はありませんが、自分で実装することができます。</target>
        </trans-unit>
        <trans-unit id="6b4e1d5251f6539ac9cb9db6500f4e6878385d0e" translate="yes" xml:space="preserve">
          <source>If you alias a module and you don't use the alias, Elixir is going to issue a warning implying the alias is not being used.</source>
          <target state="translated">モジュールにエイリアスを付けてもエイリアスを使用しない場合、Elixirはエイリアスが使用されていないことを示唆する警告を発行します。</target>
        </trans-unit>
        <trans-unit id="353408b9f20e6cd80af272ea14032adbf9497508" translate="yes" xml:space="preserve">
          <source>If you are connected to remote shell, it remains alive after disconnection.</source>
          <target state="translated">リモートシェルに接続している場合は、切断後も生きています。</target>
        </trans-unit>
        <trans-unit id="6de1badf3f486dd7b08674c46aeede1396ae7af3" translate="yes" xml:space="preserve">
          <source>If you are interested in implementing an event manager, please read the &quot;Alternatives&quot; section below. If you have to implement an event handler to integrate with an existing system, such as Elixir's Logger, please use &lt;a href=&quot;https://erlang.org/doc/man/gen_event.html&quot;&gt;&lt;code&gt;:gen_event&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">If you are interested in implementing an event manager, please read the &quot;Alternatives&quot; section below. If you have to implement an event handler to integrate with an existing system, such as Elixir's Logger, please use &lt;a href=&quot;https://erlang.org/doc/man/gen_event.html&quot;&gt; &lt;code&gt;:gen_event&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="efc5604d31d0bf68a1f19a9b171547de1fbb3007" translate="yes" xml:space="preserve">
          <source>If you are interested in implementing an event manager, please read the &quot;Alternatives&quot; section below. If you have to implement an event handler to integrate with an existing system, such as Elixir's Logger, please use &lt;code&gt;:gen_event&lt;/code&gt; instead.</source>
          <target state="translated">イベントマネージャの実装に関心がある場合は、以下の「代替案」セクションをお読みください。ElixirのLoggerなどの既存のシステムと統合するためにイベントハンドラーを実装する必要がある場合は、代わりに &lt;code&gt;:gen_event&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="51ef50c4ad529792706bf2b89ce565387c1909b0" translate="yes" xml:space="preserve">
          <source>If you are looking for a distributed key-value store to use in production, you should definitely look into &lt;a href=&quot;http://basho.com/products/riak-kv/&quot;&gt;Riak&lt;/a&gt;, which also runs in the Erlang</source>
          <target state="translated">本番環境で使用する分散型Key-Valueストアを探している場合は、&lt;a href=&quot;http://basho.com/products/riak-kv/&quot;&gt;Riak&lt;/a&gt;も確認する必要があります。RiakもErlangで実行されます</target>
        </trans-unit>
        <trans-unit id="1c8bab3f8a9ae8447c6ed759b9dc3262c1eec9de" translate="yes" xml:space="preserve">
          <source>If you are on Windows, you will have to open up &lt;code&gt;rel/env.bat.eex&lt;/code&gt;, where you will find this:</source>
          <target state="translated">Windowsを使用している場合は、 &lt;code&gt;rel/env.bat.eex&lt;/code&gt; を開く必要があります。</target>
        </trans-unit>
        <trans-unit id="44c91ebf5be7f8382f751128810946bd95b4f4b2" translate="yes" xml:space="preserve">
          <source>If you are planning to write your first library for other developers to use, don&amp;rsquo;t forget to read our &lt;a href=&quot;https://hexdocs.pm/elixir/library-guidelines.html&quot;&gt;Library Guidelines&lt;/a&gt;.</source>
          <target state="translated">他の開発者が使用する最初のライブラリを作成する場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/library-guidelines.html&quot;&gt;ライブラリガイドライン&lt;/a&gt;を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="f27d0db77231a9a9fe1e42f70173831ee041fc6d" translate="yes" xml:space="preserve">
          <source>If you are setting a &lt;code&gt;@moduletag&lt;/code&gt; or &lt;code&gt;@describetag&lt;/code&gt; attribute, you must set them after your call to &lt;code&gt;use ExUnit.Case&lt;/code&gt; otherwise you will see compilation errors.</source>
          <target state="translated">If you are setting a &lt;code&gt;@moduletag&lt;/code&gt; or &lt;code&gt;@describetag&lt;/code&gt; attribute, you must set them after your call to &lt;code&gt;use ExUnit.Case&lt;/code&gt; otherwise you will see compilation errors.</target>
        </trans-unit>
        <trans-unit id="2b2be79d72180600413436f842949c96ba6fb15b" translate="yes" xml:space="preserve">
          <source>If you are setting a &lt;code&gt;@moduletag&lt;/code&gt;, you must set that after your call to &lt;code&gt;use ExUnit.Case&lt;/code&gt; otherwise you will see compilation errors.</source>
          <target state="translated">&lt;code&gt;@moduletag&lt;/code&gt; を設定する場合は、呼び出し後に &lt;code&gt;use ExUnit.Case&lt;/code&gt; を使用するように設定する必要があります。そうしないと、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5362f8df1641dd054f73093e43438bbe86931ff4" translate="yes" xml:space="preserve">
          <source>If you are setting this option manually, we recommend the cookie option to be a long and randomly generated string, such as: &lt;code&gt;Base.url_encode64(:crypto.strong_rand_bytes(40))&lt;/code&gt;. We also recommend to restrict the characters in the cookie to the subset returned by &lt;a href=&quot;https://hexdocs.pm/elixir/Base.html#url_encode64/1&quot;&gt;&lt;code&gt;Base.url_encode64/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If you are setting this option manually, we recommend the cookie option to be a long and randomly generated string, such as: &lt;code&gt;Base.url_encode64(:crypto.strong_rand_bytes(40))&lt;/code&gt; . We also recommend to restrict the characters in the cookie to the subset returned by &lt;a href=&quot;https://hexdocs.pm/elixir/Base.html#url_encode64/1&quot;&gt; &lt;code&gt;Base.url_encode64/1&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="84977d9680ddbf5de974cbe18e56c1d8e5ed315c" translate="yes" xml:space="preserve">
          <source>If you are using alternative calendars, any representation can be used as long as you follow the representation by a single space and the calendar name:</source>
          <target state="translated">代替カレンダーを使用している場合は、1つのスペースとカレンダー名で表現を追いかける限り、どのような表現を使用しても構いません。</target>
        </trans-unit>
        <trans-unit id="7fff90eb4ac49dc35b69d8799d504d16e31937d0" translate="yes" xml:space="preserve">
          <source>If you are using async tasks, you &lt;strong&gt;must await&lt;/strong&gt; a reply as they are &lt;em&gt;always&lt;/em&gt; sent. If you are not expecting a reply, consider using &lt;a href=&quot;#start_link/1&quot;&gt;&lt;code&gt;Task.start_link/1&lt;/code&gt;&lt;/a&gt; detailed below.</source>
          <target state="translated">If you are using async tasks, you &lt;strong&gt;must await&lt;/strong&gt; a reply as they are &lt;em&gt;always&lt;/em&gt; sent. If you are not expecting a reply, consider using &lt;a href=&quot;#start_link/1&quot;&gt; &lt;code&gt;Task.start_link/1&lt;/code&gt; &lt;/a&gt; detailed below.</target>
        </trans-unit>
        <trans-unit id="e14a93bec8f9e7583ef7d4636212d137d7df029a" translate="yes" xml:space="preserve">
          <source>If you are using async tasks, you &lt;strong&gt;must await&lt;/strong&gt; a reply as they are &lt;em&gt;always&lt;/em&gt; sent. If you are not expecting a reply, consider using &lt;a href=&quot;task#start_link/1&quot;&gt;&lt;code&gt;Task.start_link/1&lt;/code&gt;&lt;/a&gt; detailed below.</source>
          <target state="translated">非同期タスクを使用している&lt;em&gt;場合&lt;/em&gt;は、&lt;em&gt;常に&lt;/em&gt;送信される&lt;strong&gt;ため&lt;/strong&gt;、返信を&lt;strong&gt;待つ必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。返信がない場合は、下記の&lt;a href=&quot;task#start_link/1&quot;&gt; &lt;code&gt;Task.start_link/1&lt;/code&gt; の&lt;/a&gt;使用を検討してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f469101752f119e7e176bed241907b041da8adaa" translate="yes" xml:space="preserve">
          <source>If you are using releases, see &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt;, there another configuration file called &lt;code&gt;config/releases.exs&lt;/code&gt;. While &lt;code&gt;config/config.exs&lt;/code&gt; and friends mentioned in the previous section are executed whenever you run a Mix command, including when you assemble a release, &lt;code&gt;config/releases.exs&lt;/code&gt; is execute every time your production system boots. Since Mix is not available in a production system, &lt;code&gt;config/releases.exs&lt;/code&gt; must not use any of the functions from Mix.</source>
          <target state="translated">リリースを使用している場合は、「&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;リリース」を参照してください &lt;code&gt;config/releases.exs&lt;/code&gt; という別の構成ファイルがあります。一方で &lt;code&gt;config/config.exs&lt;/code&gt; や友人は、前のセクションで述べたあなたがミックスのコマンドを実行するたびに、リリースを組み立てる際に、含めて、実行されている &lt;code&gt;config/releases.exs&lt;/code&gt; 本番システムが起動するたびに実行されます。Mixは本番システムでは使用できないため、 &lt;code&gt;config/releases.exs&lt;/code&gt; はMixの関数を使用してはなりません。</target>
        </trans-unit>
        <trans-unit id="9e377e363c18762d6989f073da394e35ff6a1d87" translate="yes" xml:space="preserve">
          <source>If you are using several functions from a given module, you can import those functions and reference them as local functions, for example:</source>
          <target state="translated">与えられたモジュールから複数の関数を使用している場合は、それらの関数をインポートしてローカル関数として参照することができます。</target>
        </trans-unit>
        <trans-unit id="d9f991b27b559271b270b3fbea782f7486b09a69" translate="yes" xml:space="preserve">
          <source>If you attempt to define a module that already exists, you will get a warning saying that a module has been redefined.</source>
          <target state="translated">既に存在するモジュールを定義しようとすると、モジュールが再定義されたという警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="8adfc9342331c8cadc540a2cd5ed23c3faf380ba" translate="yes" xml:space="preserve">
          <source>If you connect to localhost once again and perform another request, now everything should work, as long as the routing table contains the correct node names. Outstanding!</source>
          <target state="translated">もう一度ローカルホストに接続して別のリクエストを実行すれば、ルーティングテーブルに正しいノード名が含まれている限り、すべてが動作するはずです。素晴らしい!</target>
        </trans-unit>
        <trans-unit id="9a27ffb13441db905f42c43f88d86b47f09d7485" translate="yes" xml:space="preserve">
          <source>If you create a task using &lt;code&gt;async_nolink&lt;/code&gt; inside an OTP behaviour like &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, you should match on the message coming from the task inside your &lt;a href=&quot;genserver#c:handle_info/2&quot;&gt;&lt;code&gt;GenServer.handle_info/2&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">あなたが使用してタスクを作成する場合 &lt;code&gt;async_nolink&lt;/code&gt; をのようなOTP行動の内側&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;、あなたの内部タスクからのメッセージに一致している必要があり&lt;a href=&quot;genserver#c:handle_info/2&quot;&gt; &lt;code&gt;GenServer.handle_info/2&lt;/code&gt; &lt;/a&gt;コールバック。</target>
        </trans-unit>
        <trans-unit id="7afc1a9d68fb426d62d00d555f8cf086c3ea70ff" translate="yes" xml:space="preserve">
          <source>If you create a task using &lt;code&gt;async_nolink&lt;/code&gt; inside an OTP behaviour like &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, you should match on the message coming from the task inside your &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2&quot;&gt;&lt;code&gt;GenServer.handle_info/2&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">If you create a task using &lt;code&gt;async_nolink&lt;/code&gt; inside an OTP behaviour like &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;, you should match on the message coming from the task inside your &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2&quot;&gt; &lt;code&gt;GenServer.handle_info/2&lt;/code&gt; &lt;/a&gt; callback.</target>
        </trans-unit>
        <trans-unit id="55b7d0164ac505a2fe344467d02c4867bf511345" translate="yes" xml:space="preserve">
          <source>If you desire to execute a trusted command inside a shell, with pipes, redirecting and so on, please check &lt;a href=&quot;http://www.erlang.org/doc/man/os.html#cmd-1&quot;&gt;&lt;code&gt;:os.cmd/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パイプやリダイレクトなどを使用してシェル内で信頼できるコマンドを実行したい場合は、&lt;a href=&quot;http://www.erlang.org/doc/man/os.html#cmd-1&quot;&gt; &lt;code&gt;:os.cmd/1&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="0c4ee42b2a872c035a26a259f3f919efaaede387" translate="yes" xml:space="preserve">
          <source>If you do not care about the results of the computation, you can run the stream with &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#run/1&quot;&gt;&lt;code&gt;Stream.run/1&lt;/code&gt;&lt;/a&gt;. Also set &lt;code&gt;ordered: false&lt;/code&gt;, as you don't care about the order of the results either:</source>
          <target state="translated">If you do not care about the results of the computation, you can run the stream with &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#run/1&quot;&gt; &lt;code&gt;Stream.run/1&lt;/code&gt; &lt;/a&gt;. Also set &lt;code&gt;ordered: false&lt;/code&gt; , as you don't care about the order of the results either:</target>
        </trans-unit>
        <trans-unit id="a07182ef0f8b88c81a61025e684458268493b23a" translate="yes" xml:space="preserve">
          <source>If you do not care about the results of the computation, you can run the stream with &lt;a href=&quot;stream#run/1&quot;&gt;&lt;code&gt;Stream.run/1&lt;/code&gt;&lt;/a&gt;. Also set &lt;code&gt;ordered: false&lt;/code&gt;, as you don't care about the order of the results either:</source>
          <target state="translated">計算結果を気にしない場合は、&lt;a href=&quot;stream#run/1&quot;&gt; &lt;code&gt;Stream.run/1&lt;/code&gt; を使用し&lt;/a&gt;てストリームを実行できます。また、 &lt;code&gt;ordered: false&lt;/code&gt; 設定します。結果の順序も気にしないからです。</target>
        </trans-unit>
        <trans-unit id="368841cd2351fb8c28d9325238a5752ebba7a138" translate="yes" xml:space="preserve">
          <source>If you do want to parse unknown switches, remember that Elixir converts switches to atoms. Since atoms are not garbage-collected, OptionParser will only parse switches that translate to atoms used by the runtime to avoid leaking atoms. For instance, the code below will discard the &lt;code&gt;--option-parser-example&lt;/code&gt; switch because the &lt;code&gt;:option_parser_example&lt;/code&gt; atom is never used anywhere:</source>
          <target state="translated">未知のスイッチを解析したい場合は、Elixirがスイッチをアトムに変換することを覚えておいてください。アトムはガベージコレクションされないため、OptionParserは、ランタイムによって使用されるアトムに変換されるスイッチのみを解析して、アトムのリークを回避します。たとえば、 &lt;code&gt;:option_parser_example&lt;/code&gt; アトムはどこでも使用されないため、以下のコードは &lt;code&gt;--option-parser-example&lt;/code&gt; スイッチを破棄します。</target>
        </trans-unit>
        <trans-unit id="bb3116d6b170b69080991a7150c103095c5454b2" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have any use for the error, you don&amp;rsquo;t have to provide it:</source>
          <target state="translated">エラーを使用する必要がない場合は、提供する必要はありません。</target>
        </trans-unit>
        <trans-unit id="c77ad5b32204a8ca68d3f5ddb986c84f0f9228ac" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t specify a default key value when defining a struct, &lt;code&gt;nil&lt;/code&gt; will be assumed:</source>
          <target state="translated">構造体を定義するときにデフォルトのキー値を指定しない場合、 &lt;code&gt;nil&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="2c6d6c827a17a1772b5dade87fd7f321c6f06b85" translate="yes" xml:space="preserve">
          <source>If you don't need a process, then you don't need a process. Use processes only to model runtime properties, such as mutable state, concurrency and failures, never for code organization.</source>
          <target state="translated">プロセスが必要ないのであれば、プロセスは必要ありません。プロセスはランタイムプロパティのモデル化にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="c5e7f3f6aaa70bf2b4b5317311d23bff5dd41301" translate="yes" xml:space="preserve">
          <source>If you don't want to assert for every result in a doctest, you can omit the result. You can do so between expressions:</source>
          <target state="translated">doctestのすべての結果に対してアサートしたくない場合は、結果を省略することができます。これは式の間で行うことができます。</target>
        </trans-unit>
        <trans-unit id="55f782e4dd6bf586b9ca7b60f48c228585b2ac7c" translate="yes" xml:space="preserve">
          <source>If you don't want to import a function or macro from &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;, use the &lt;code&gt;:except&lt;/code&gt; option and then list the function/macro by arity:</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;から関数またはマクロをインポートしたくない場合は、 &lt;code&gt;:except&lt;/code&gt; オプションを使用して、関数/マクロをアリティ別にリストします。</target>
        </trans-unit>
        <trans-unit id="b4113a290da07af08fe359b9ce4d7fc5b55806b8" translate="yes" xml:space="preserve">
          <source>If you don't want to link the caller to the task, then you must use a supervised task with &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; and call &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html#async_nolink/2&quot;&gt;&lt;code&gt;Task.Supervisor.async_nolink/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">If you don't want to link the caller to the task, then you must use a supervised task with &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt; and call &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html#async_nolink/2&quot;&gt; &lt;code&gt;Task.Supervisor.async_nolink/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b0fdad62ae1fb19bf40fae581950eb21ad57ac2c" translate="yes" xml:space="preserve">
          <source>If you don't want to link the caller to the task, then you must use a supervised task with &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; and call &lt;a href=&quot;task.supervisor#async_nolink/2&quot;&gt;&lt;code&gt;Task.Supervisor.async_nolink/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">呼び出し元をタスクにリンクしたくない場合は、&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; で&lt;/a&gt;監視対象タスクを使用し、&lt;a href=&quot;task.supervisor#async_nolink/2&quot;&gt; &lt;code&gt;Task.Supervisor.async_nolink/2&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="a8b7f3eba3dd98ca6590eeed6ea68a53ee96f3d2" translate="yes" xml:space="preserve">
          <source>If you don't want to remove all the entries associated with &lt;code&gt;key&lt;/code&gt; use &lt;a href=&quot;#pop_first/3&quot;&gt;&lt;code&gt;pop_first/3&lt;/code&gt;&lt;/a&gt; instead, that function will remove only the first entry.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 関連付けられているすべてのエントリを削除したくない場合は、代わりに&lt;a href=&quot;#pop_first/3&quot;&gt; &lt;code&gt;pop_first/3&lt;/code&gt; を&lt;/a&gt;使用すると、その関数は最初のエントリのみを削除します。</target>
        </trans-unit>
        <trans-unit id="296ef732a2b3390cd10f991ad01cb9a80eb4f583" translate="yes" xml:space="preserve">
          <source>If you expect a project to be defined, i.e., it is a requirement of the current task, you should call &lt;a href=&quot;#get!/0&quot;&gt;&lt;code&gt;get!/0&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">プロジェクトの定義が必要な場合、つまり、現在のタスクの要件である場合は、代わりに&lt;a href=&quot;#get!/0&quot;&gt; &lt;code&gt;get!/0&lt;/code&gt; を&lt;/a&gt;呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="05da62df25733918acb3c100ca6eefcc7e8a9a05" translate="yes" xml:space="preserve">
          <source>If you find any errors in the tutorial or on the website, &lt;a href=&quot;https://github.com/elixir-lang/elixir-lang.github.com&quot;&gt;please report a bug or send a pull request to our issue tracker&lt;/a&gt;.</source>
          <target state="translated">チュートリアルまたはWebサイトでエラーを見つけた場合は&lt;a href=&quot;https://github.com/elixir-lang/elixir-lang.github.com&quot;&gt;、バグを報告するか、プルリクエストをIssue Trackerに送信してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3352da2349194da360a70c60c5b2d7bfce63e72d" translate="yes" xml:space="preserve">
          <source>If you find yourself in a position where you want to use different configurations in each application for the same dependency or use different dependency versions, then it is likely your codebase has grown beyond what umbrellas can provide.</source>
          <target state="translated">もしあなた自身が、同じ依存関係に対して各アプリケーションで異なる設定を使用したり、異なる依存関係のバージョンを使用したりしたいと考えているのであれば、あなたのコードベースがアンブレラが提供できる以上に成長している可能性が高いでしょう。</target>
        </trans-unit>
        <trans-unit id="966f4145842556d60eacaa5cb05900d76971a573" translate="yes" xml:space="preserve">
          <source>If you find yourself trapping exits to handle exits inside the async stream, consider using &lt;a href=&quot;#async_stream_nolink/6&quot;&gt;&lt;code&gt;async_stream_nolink/6&lt;/code&gt;&lt;/a&gt; to start tasks that are not linked to the calling process.</source>
          <target state="translated">非同期ストリーム内の出口を処理するために出口をトラップしている場合は、&lt;a href=&quot;#async_stream_nolink/6&quot;&gt; &lt;code&gt;async_stream_nolink/6&lt;/code&gt; &lt;/a&gt;を使用して、呼び出しプロセスにリンクされていないタスクを開始することを検討してください。</target>
        </trans-unit>
        <trans-unit id="4197dd8400c648df18d603e11d970a3cb8836276" translate="yes" xml:space="preserve">
          <source>If you forget to escape it, Elixir will raise an error when compiling the code.</source>
          <target state="translated">エスケープを忘れた場合、Elixirはコードをコンパイルする際にエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="56efc6ca629edeb2fce03d19b2bc73e5833972b7" translate="yes" xml:space="preserve">
          <source>If you have a file that needs to compile other modules in parallel, the spawned processes need to be aware of the compiler environment. This function allows a developer to create a task that is aware of those environments.</source>
          <target state="translated">他のモジュールを並行してコンパイルする必要があるファイルがある場合、スポーンされるプロセスはコンパイラ環境を意識する必要があります。この関数を使うことで、開発者はそれらの環境を意識したタスクを作成することができます。</target>
        </trans-unit>
        <trans-unit id="c5adbe460020f7a732f72beadb2bbe1b2658c06f" translate="yes" xml:space="preserve">
          <source>If you have a struct and you would like to merge a set of keys into the struct, do not use this function, as it would merge all keys on the right side into the struct, even if the key is not part of the struct. Instead, use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#struct/2&quot;&gt;&lt;code&gt;Kernel.struct/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構造体があり、キーのセットを構造体にマージする場合は、この関数を使用しないでください。キーが構造体の一部でなくても、右側のすべてのキーが構造体にマージされます。代わりに、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#struct/2&quot;&gt; &lt;code&gt;Kernel.struct/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="772ddb24d9ed2ed3cd849be346856ed163202199" translate="yes" xml:space="preserve">
          <source>If you have a struct and you would like to merge a set of keys into the struct, do not use this function, as it would merge all keys on the right side into the struct, even if the key is not part of the struct. Instead, use &lt;a href=&quot;kernel#struct/2&quot;&gt;&lt;code&gt;Kernel.struct/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構造体があり、キーのセットを構造体にマージする場合は、この関数を使用しないでください。キーが構造体の一部でなくても、右側のすべてのキーが構造体にマージされます。代わりに、&lt;a href=&quot;kernel#struct/2&quot;&gt; &lt;code&gt;Kernel.struct/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="02d90c57cd4c0d17ad045bc9f12b98eb64e0aa31" translate="yes" xml:space="preserve">
          <source>If you have an internal dependency, Mix supports two methods to work with them: Git repositories or umbrella projects.</source>
          <target state="translated">内部に依存関係がある場合、Mixはそれらを扱うための2つの方法をサポートしています。Git リポジトリかアンブレラプロジェクトです。</target>
        </trans-unit>
        <trans-unit id="4e035a407e624050895eb31725f1748d9f855294" translate="yes" xml:space="preserve">
          <source>If you have another computer on the same network with both Erlang and Elixir installed, you can start another shell on it. If you don&amp;rsquo;t, you can start another IEx session in another terminal. In either case, give it the short name of &lt;code&gt;bar&lt;/code&gt;:</source>
          <target state="translated">ErlangとElixirの両方がインストールされている同じネットワーク上に別のコンピューターがある場合は、そのコンピューターで別のシェルを起動できます。そうでない場合は、別の端末で別のIExセッションを開始できます。どちらの場合も、短い名前の &lt;code&gt;bar&lt;/code&gt; を付けます。</target>
        </trans-unit>
        <trans-unit id="91e486a025ad182f48607bffbb20dc17512610a7" translate="yes" xml:space="preserve">
          <source>If you have any questions or improvements to the guide, please reach discussion channels such as the &lt;a href=&quot;https://elixirforum.com&quot;&gt;Elixir Forum&lt;/a&gt; or the &lt;a href=&quot;https://github.com/elixir-lang/elixir-lang.github.com/issues&quot;&gt;issues tracker&lt;/a&gt;. Your input is really important to help us guarantee the guides are accessible and up to date!</source>
          <target state="translated">このガイドについて質問や改善がある場合は、&lt;a href=&quot;https://elixirforum.com&quot;&gt;Elixirフォーラム&lt;/a&gt;や&lt;a href=&quot;https://github.com/elixir-lang/elixir-lang.github.com/issues&quot;&gt;問題トラッカー&lt;/a&gt;などのディスカッションチャネルにアクセスしてください。あなたの入力は、ガイドがアクセス可能で最新であることを保証するために本当に重要です！</target>
        </trans-unit>
        <trans-unit id="aab49794b532da97c155763d4fee42c69953f3cd" translate="yes" xml:space="preserve">
          <source>If you have prior programming experience, you may be wondering: &amp;ldquo;could we just guarantee the bucket does not crash in the first place?&amp;rdquo;. As we will see, Elixir developers tend to refer to those practices as &amp;ldquo;defensive programming&amp;rdquo;. That&amp;rsquo;s because a live production system has dozens of different reasons why something can go wrong. The disk can fail, memory can be corrupted, bugs, the network may stop working for a second, etc. If we were to write software that attempted to protect or circumvent all of those errors, we would spend more time handling failures than writing our own software!</source>
          <target state="translated">以前にプログラミングの経験がある場合は、「バケットが最初からクラッシュしないことを保証できますか？」と疑問に思われるかもしれません。後で見るように、Elixir開発者はそれらのプラクティスを「防御的プログラミング」と呼ぶ傾向があります。これは、ライブプロダクションシステムには、何かがうまくいかない理由が多数あるためです。ディスクに障害が発生したり、メモリが破損したり、バグが発生したり、ネットワークが1秒間機能しなくなったりする場合があります。これらのエラーをすべて保護または回避しようとするソフトウェアを作成した場合、独自のソフトウェア！</target>
        </trans-unit>
        <trans-unit id="4ff3bc0809c7cb590dd86540f6bc9220ad4b14e5" translate="yes" xml:space="preserve">
          <source>If you have skipped the Getting Started guide or read it long ago, be sure to re-read the &lt;a href=&quot;../processes&quot;&gt;Processes&lt;/a&gt; chapter. We will use it as a starting point.</source>
          <target state="translated">入門ガイドをスキップしたり、ずっと前に読んだりした場合は、必ず「&lt;a href=&quot;../processes&quot;&gt;プロセス」の&lt;/a&gt;章をもう一度読んでください。出発点として使用します。</target>
        </trans-unit>
        <trans-unit id="d5e749fd5e08cb28911eb18410413620f0bb3b45" translate="yes" xml:space="preserve">
          <source>If you have to, you can think of behaviours like interfaces in object oriented languages like Java: a set of function signatures that a module has to implement.</source>
          <target state="translated">必要であれば、Javaのようなオブジェクト指向言語のインターフェースのような振る舞いを考えることができます:モジュールが実装しなければならない関数シグネチャのセット。</target>
        </trans-unit>
        <trans-unit id="775881310bd0276caea4cdc0616b4fb21efd691c" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t yet installed Elixir, visit our &lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;installation page&lt;/a&gt;. Once you are done, you can run &lt;code&gt;elixir --version&lt;/code&gt; to get the current Elixir version.</source>
          <target state="translated">Elixirをまだインストールしていない場合は、&lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;インストールページ&lt;/a&gt;にアクセスしてください。完了したら、 &lt;code&gt;elixir --version&lt;/code&gt; を実行して、現在のElixirバージョンを取得できます。</target>
        </trans-unit>
        <trans-unit id="68dc8f62a9e86b3efbf7155da89ee4b3f7fa0def" translate="yes" xml:space="preserve">
          <source>If you import a module and you don't use any of the imported functions or macros from this module, Elixir is going to issue a warning implying the import is not being used.</source>
          <target state="translated">モジュールをインポートしても、そのモジュールからインポートした関数やマクロを使用しない場合、Elixirはインポートが使用されていないことを示唆する警告を発行します。</target>
        </trans-unit>
        <trans-unit id="dd8b4968a8e609a12b5b450ac372d4f06174ea20" translate="yes" xml:space="preserve">
          <source>If you intend to shut the task down if it has not responded within &lt;code&gt;timeout&lt;/code&gt; milliseconds, you should chain this together with &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt;, like so:</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; ミリ秒以内に応答がない場合にタスクをシャットダウンする場合は、次のように&lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt;と一緒にチェーンする必要があります。</target>
        </trans-unit>
        <trans-unit id="d30e514f11705943605d282b2e9e021b246888e0" translate="yes" xml:space="preserve">
          <source>If you introduce custom keys into the AST metadata, please make sure to prefix them with the name of your library or application, so that they will not conflict with keys that could potentially be introduced by the compiler in the future.</source>
          <target state="translated">ASTのメタデータにカスタムキーを導入する場合は、ライブラリやアプリケーションの名前を前置してください。</target>
        </trans-unit>
        <trans-unit id="35ca2c3b656fa7f282e972b00616f04b656b2e75" translate="yes" xml:space="preserve">
          <source>If you know you are running on a different system than the current one and you are doing multiple matches with the regex, you can manually invoke &lt;a href=&quot;#recompile/1&quot;&gt;&lt;code&gt;Regex.recompile/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#recompile!/1&quot;&gt;&lt;code&gt;Regex.recompile!/1&lt;/code&gt;&lt;/a&gt; to perform a runtime version check and recompile the regex if necessary.</source>
          <target state="translated">現在のシステムとは異なるシステムで実行していて、正規表現と複数の一致を行っていることがわかっている場合は、手動で&lt;a href=&quot;#recompile/1&quot;&gt; &lt;code&gt;Regex.recompile/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#recompile!/1&quot;&gt; &lt;code&gt;Regex.recompile!/1&lt;/code&gt; &lt;/a&gt;を呼び出して、ランタイムバージョンチェックを実行し、正規表現を再コンパイルできます。必要ならば。</target>
        </trans-unit>
        <trans-unit id="83089d9b73e4091162a26829945c724a24daa00a" translate="yes" xml:space="preserve">
          <source>If you know you are running on a different system that the current one and you are doing multiple matches with the regex, you can manually invoke &lt;a href=&quot;regex#recompile/1&quot;&gt;&lt;code&gt;Regex.recompile/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;regex#recompile!/1&quot;&gt;&lt;code&gt;Regex.recompile!/1&lt;/code&gt;&lt;/a&gt; to perform a runtime version check and recompile the regex if necessary.</source>
          <target state="translated">現在のシステムとは異なるシステムで実行していて、正規表現と複数の一致を行っていることがわかっている場合は、手動で&lt;a href=&quot;regex#recompile/1&quot;&gt; &lt;code&gt;Regex.recompile/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;regex#recompile!/1&quot;&gt; &lt;code&gt;Regex.recompile!/1&lt;/code&gt; &lt;/a&gt;を呼び出して、ランタイムバージョンチェックを実行し、正規表現を再コンパイルできます。必要であれば。</target>
        </trans-unit>
        <trans-unit id="5923e8f45f692122d1145ed7532ef3732f1c075a" translate="yes" xml:space="preserve">
          <source>If you need a general dictionary, use the &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module. If you need to manipulate keyword lists, use &lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般的な辞書が必要な場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。キーワードリストを操作する必要がある場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="3c864040fa40407fd79ba39543ee8e3143a0a20c" translate="yes" xml:space="preserve">
          <source>If you need a general dictionary, use the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module. If you need to manipulate keyword lists, use &lt;a href=&quot;keyword&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般的な辞書が必要な場合は、&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。キーワードリストを操作する必要がある場合は、&lt;a href=&quot;keyword&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="681b1d87291217ee1d95dbf7ef258360d3658bf7" translate="yes" xml:space="preserve">
          <source>If you need to convert a tuple or a module child specification to a map or modify a child specification, you can use the &lt;a href=&quot;#child_spec/2&quot;&gt;&lt;code&gt;Supervisor.child_spec/2&lt;/code&gt;&lt;/a&gt; function. For example, to run the stack with a different &lt;code&gt;:id&lt;/code&gt; and a &lt;code&gt;:shutdown&lt;/code&gt; value of 10 seconds (10_000 milliseconds):</source>
          <target state="translated">タプルまたはモジュールの子仕様をマップに変換したり、子仕様を変更したりする必要がある場合は、&lt;a href=&quot;#child_spec/2&quot;&gt; &lt;code&gt;Supervisor.child_spec/2&lt;/code&gt; &lt;/a&gt;関数を使用できます。たとえば、異なる &lt;code&gt;:id&lt;/code&gt; と10秒（10_000ミリ秒）の： &lt;code&gt;:shutdown&lt;/code&gt; 値を使用してスタックを実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="89167dae9b93318185a943b4d7ef66af8fd1ecaf" translate="yes" xml:space="preserve">
          <source>If you need to convert a tuple or a module child specification to a map or modify a child specification, you can use the &lt;a href=&quot;supervisor#child_spec/2&quot;&gt;&lt;code&gt;Supervisor.child_spec/2&lt;/code&gt;&lt;/a&gt; function. For example, to run the stack with a different &lt;code&gt;:id&lt;/code&gt; and a &lt;code&gt;:shutdown&lt;/code&gt; value of 10 seconds (10_000 milliseconds):</source>
          <target state="translated">タプルまたはモジュールの子仕様をマップに変換する必要がある場合、または子仕様を変更する必要がある場合は、&lt;a href=&quot;supervisor#child_spec/2&quot;&gt; &lt;code&gt;Supervisor.child_spec/2&lt;/code&gt; &lt;/a&gt;関数を使用できます。たとえば、異なる &lt;code&gt;:id&lt;/code&gt; と10秒（10_000ミリ秒）の： &lt;code&gt;:shutdown&lt;/code&gt; 値でスタックを実行するには：</target>
        </trans-unit>
        <trans-unit id="5ad76921951319e02147caba8a55f21b979bd0dc" translate="yes" xml:space="preserve">
          <source>If you need to pass options to the Elixir executable at the same time you use &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt;, it can be done as follows:</source>
          <target state="translated">Elixir実行可能ファイルにオプションを渡すと同時に&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt;を使用する必要がある場合は、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="f6c0541d61f0fa3dc5971ad5a9aedc3239c20f25" translate="yes" xml:space="preserve">
          <source>If you open up &lt;code&gt;rel/env.sh.eex&lt;/code&gt;, you will see:</source>
          <target state="translated">あなたが開く場合 &lt;code&gt;rel/env.sh.eex&lt;/code&gt; 、あなたが表示されます。</target>
        </trans-unit>
        <trans-unit id="54dbe001cacf2c5ab7935d57b0759fa2b1d3fbe5" translate="yes" xml:space="preserve">
          <source>If you partition your tests across multiple runs, you can unify the report as shown below:</source>
          <target state="translated">複数の実行でテストを分割した場合、以下のようにレポートを統一することができます。</target>
        </trans-unit>
        <trans-unit id="13001202c030e74a6a243756fd13162b4aa903b4" translate="yes" xml:space="preserve">
          <source>If you pass &lt;code&gt;:trim_bom&lt;/code&gt; in the modes parameter, the stream will trim UTF-8, UTF-16 and UTF-32 byte order marks when reading from file.</source>
          <target state="translated">モードパラメータで &lt;code&gt;:trim_bom&lt;/code&gt; を渡すと、ストリームはファイルから読み取るときにUTF-8、UTF-16、およびUTF-32バイトオーダーマークをトリムします。</target>
        </trans-unit>
        <trans-unit id="ca5840e930e22f09ee97165c990a4a919232564f" translate="yes" xml:space="preserve">
          <source>If you plan to compare multiple strings, multiple times in a row, you may normalize them upfront and compare them directly to avoid multiple normalization passes.</source>
          <target state="translated">複数の文字列を複数回連続して比較する予定の場合は、前もって正規化しておき、複数回の正規化パスを避けるために直接比較してもよいでしょう。</target>
        </trans-unit>
        <trans-unit id="728af62f46ec9153dd25f06ee03542653209b55d" translate="yes" xml:space="preserve">
          <source>If you prefer to use only operators or skip them, you can pass the following options:</source>
          <target state="translated">演算子のみを使用したい場合や、演算子をスキップしたい場合は、以下のオプションを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="ced663b6bbb3741a07875a23a42c76c24864c77e" translate="yes" xml:space="preserve">
          <source>If you prefer, you can also compile the release to a separate directory, so you can erase all source after the release is assembled:</source>
          <target state="translated">ご希望であれば、リリースを別のディレクトリにコンパイルすることもできますので、リリースを組み立てた後にソースをすべて消去することができます。</target>
        </trans-unit>
        <trans-unit id="cd3676cec1bf0b821202c618090e6007102597bd" translate="yes" xml:space="preserve">
          <source>If you revisit the &lt;code&gt;KV.Registry.start_link/1&lt;/code&gt; implementation, you will remember it simply passes the options to GenServer:</source>
          <target state="translated">あなたが再訪した場合 &lt;code&gt;KV.Registry.start_link/1&lt;/code&gt; の実装を、あなたはそれが単にGenServerにオプションを渡し覚えているでしょう。</target>
        </trans-unit>
        <trans-unit id="c5a45f99d559f9a09020a743643928ce3b42a8da" translate="yes" xml:space="preserve">
          <source>If you run &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix test.coverage&lt;/code&gt;&lt;/a&gt; inside an umbrella, it will automatically gather exported cover results from all umbrella children - as long as the coverage results have been exported, like this:</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix test.coverage&lt;/code&gt; &lt;/a&gt;内でmixtest.coverageを実行すると、次のようにカバレッジ結果がエクスポートされている限り、すべてのアンブレラの子からエクスポートされたカバー結果が自動的に収集されます。</target>
        </trans-unit>
        <trans-unit id="c5d6222828dfd649eaac97782a9142f48d5d1965" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;bin/foo start&lt;/code&gt;, it will start the system using a short name (&lt;code&gt;--sname&lt;/code&gt;) equal to the release name, which in this case is &lt;code&gt;foo&lt;/code&gt;. The next step is to start a system named &lt;code&gt;bar&lt;/code&gt;, so we can connect &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; together, like we did in the previous chapter. But before we achieve this, let&amp;rsquo;s talk a bit about the benefits of releases.</source>
          <target state="translated">&lt;code&gt;bin/foo start&lt;/code&gt; を実行すると、リリース名（この場合は &lt;code&gt;foo&lt;/code&gt; ）と同じ短い名前（ &lt;code&gt;--sname&lt;/code&gt; ）を使用してシステムが起動します。次のステップは、システムの名前を開始することである &lt;code&gt;bar&lt;/code&gt; 我々が接続できるように、 &lt;code&gt;foo&lt;/code&gt; し、 &lt;code&gt;bar&lt;/code&gt; 、我々は前の章で行ったように、一緒に。しかし、これを達成する前に、リリースの利点について少し話しましょう。</target>
        </trans-unit>
        <trans-unit id="b99f38f9001edc5d832c83870cb64c18a6a5f599" translate="yes" xml:space="preserve">
          <source>If you start &lt;code&gt;bar&lt;/code&gt; while &lt;code&gt;foo&lt;/code&gt; is still running, you will see an error like the error below happen 5 times, before the application finally shuts down:</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; の実行中に &lt;code&gt;bar&lt;/code&gt; を開始すると、アプリケーションが最終的にシャットダウンする前に、以下のエラーのようなエラーが5回発生します。</target>
        </trans-unit>
        <trans-unit id="b481bb0915de73d372e211939b206d16352c309c" translate="yes" xml:space="preserve">
          <source>If you supply &lt;code&gt;message&lt;/code&gt;, information about the values will automatically be appended to it.</source>
          <target state="translated">ユーザーが指定する場合は &lt;code&gt;message&lt;/code&gt; 、値に関する情報が自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="f285809f1a4da78d4627f76c40391bd1d6265ba1" translate="yes" xml:space="preserve">
          <source>If you try to match on such an expression, &lt;code&gt;doctest&lt;/code&gt; will fail to compile. There are two ways to resolve this.</source>
          <target state="translated">このような式を照合しようとすると、 &lt;code&gt;doctest&lt;/code&gt; はコンパイルに失敗します。これを解決するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="b5d18cb7539ec0d5066e34df4b08df26b2985b68" translate="yes" xml:space="preserve">
          <source>If you try to run our new macro, you will notice it won't even compile, complaining that the variables &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; do not exist. This is because of the ambiguity: &lt;code&gt;unquote(k)&lt;/code&gt; can either be an unquote fragment, as previously, or a regular unquote as in &lt;code&gt;unquote(kv)&lt;/code&gt;.</source>
          <target state="translated">新しいマクロを実行しようとすると、コンパイルされず、変数 &lt;code&gt;k&lt;/code&gt; と &lt;code&gt;v&lt;/code&gt; が存在しないと不平を言うことに気付くでしょう。これはあいまいさのためです &lt;code&gt;unquote(k)&lt;/code&gt; は、以前のように非引用フラグメントであるか、 &lt;code&gt;unquote(kv)&lt;/code&gt; のように通常の非引用である可能性があります。</target>
        </trans-unit>
        <trans-unit id="d19c103426cd0a9b9cd1e418473a1f010bac3593" translate="yes" xml:space="preserve">
          <source>If you try to use &lt;a href=&quot;#iodata_to_binary/1&quot;&gt;&lt;code&gt;iodata_to_binary/1&lt;/code&gt;&lt;/a&gt; on chardata, it will result in an argument error. For example, let's try to put a code point that is not representable with one byte, like &lt;code&gt;?&amp;pi;&lt;/code&gt;, inside IO data:</source>
          <target state="translated">&lt;a href=&quot;#iodata_to_binary/1&quot;&gt; &lt;code&gt;iodata_to_binary/1&lt;/code&gt; &lt;/a&gt;を使用しようとすると、引数エラーが発生します。たとえば、IOデータ内に &lt;code&gt;?&amp;pi;&lt;/code&gt; のように1バイトで表現できないコードポイントを配置してみましょう。</target>
        </trans-unit>
        <trans-unit id="3166b78eca5a26a7eac84dac5d70e8123ee75f4d" translate="yes" xml:space="preserve">
          <source>If you try to use &lt;a href=&quot;#iodata_to_binary/1&quot;&gt;&lt;code&gt;iodata_to_binary/1&lt;/code&gt;&lt;/a&gt; on chardata, it will result in an argument error. For example, let's try to put a codepoint that is not representable with one byte, like &lt;code&gt;?&amp;pi;&lt;/code&gt;, inside IO data:</source>
          <target state="translated">&lt;a href=&quot;#iodata_to_binary/1&quot;&gt; &lt;code&gt;iodata_to_binary/1&lt;/code&gt; &lt;/a&gt;を使用しようとすると、引数エラーが発生します。たとえば、 &lt;code&gt;?&amp;pi;&lt;/code&gt; のように1バイトで表現できないコードポイントをIOデータ内に配置してみましょう。</target>
        </trans-unit>
        <trans-unit id="6388f463dc6fcda17ad270beeb69b562f1892d55" translate="yes" xml:space="preserve">
          <source>If you want the task to always be restarted:</source>
          <target state="translated">タスクを常に再起動させたい場合。</target>
        </trans-unit>
        <trans-unit id="2e6f3a865c14b0ab4a00bc5b2ae75499da91323c" translate="yes" xml:space="preserve">
          <source>If you want to capture a function from a module, you can do &lt;code&gt;&amp;amp;Module.function()&lt;/code&gt;:</source>
          <target state="translated">モジュールから関数をキャプチャしたい場合は、 &lt;code&gt;&amp;amp;Module.function()&lt;/code&gt; を実行できます：</target>
        </trans-unit>
        <trans-unit id="6595a62e94b4f38dca60f0418e3d52b457c3e382" translate="yes" xml:space="preserve">
          <source>If you want to change the &lt;a href=&quot;https://repo.hex.pm&quot;&gt;default mirror&lt;/a&gt; to use for fetching &lt;code&gt;rebar&lt;/code&gt; please set the &lt;code&gt;HEX_MIRROR&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;rebar&lt;/code&gt; フェッチに使用する&lt;a href=&quot;https://repo.hex.pm&quot;&gt;デフォルトのミラー&lt;/a&gt;を変更する場合は、 &lt;code&gt;HEX_MIRROR&lt;/code&gt; 環境変数を設定してください。</target>
        </trans-unit>
        <trans-unit id="6a8e46bf39b1daac7b96bda2ca9dc8fc521a77c9" translate="yes" xml:space="preserve">
          <source>If you want to change the &lt;a href=&quot;https://repo.hex.pm&quot;&gt;default mirror&lt;/a&gt; used for fetching Hex, set the &lt;code&gt;HEX_MIRROR&lt;/code&gt; environment variable.</source>
          <target state="translated">Hexのフェッチに使用される&lt;a href=&quot;https://repo.hex.pm&quot;&gt;デフォルトのミラー&lt;/a&gt;を変更する場合は、 &lt;code&gt;HEX_MIRROR&lt;/code&gt; 環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="f2cc4b639048c80880ba05a591eea3c58b3d29d6" translate="yes" xml:space="preserve">
          <source>If you want to convert a string-formatted float directly to a float, &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#to_float/1&quot;&gt;&lt;code&gt;String.to_float/1&lt;/code&gt;&lt;/a&gt; can be used instead.</source>
          <target state="translated">文字列形式のfloatを直接floatに変換する場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#to_float/1&quot;&gt; &lt;code&gt;String.to_float/1&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="3f5f07477ffa4335e8ddfc815683832c8430bb08" translate="yes" xml:space="preserve">
          <source>If you want to convert a string-formatted float directly to a float, &lt;a href=&quot;string#to_float/1&quot;&gt;&lt;code&gt;String.to_float/1&lt;/code&gt;&lt;/a&gt; can be used instead.</source>
          <target state="translated">文字列形式の浮動小数点数を直接浮動小数点数に変換する場合は、&lt;a href=&quot;string#to_float/1&quot;&gt; &lt;code&gt;String.to_float/1&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="08564e879edc0764f4906097067da72ec6372ab3" translate="yes" xml:space="preserve">
          <source>If you want to convert a string-formatted integer directly to an integer, &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#to_integer/1&quot;&gt;&lt;code&gt;String.to_integer/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#to_integer/2&quot;&gt;&lt;code&gt;String.to_integer/2&lt;/code&gt;&lt;/a&gt; can be used instead.</source>
          <target state="translated">文字列形式の整数を直接整数に変換する場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#to_integer/1&quot;&gt; &lt;code&gt;String.to_integer/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#to_integer/2&quot;&gt; &lt;code&gt;String.to_integer/2&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="f1f915523fedc99105cfc5944c2a0f3c36308efa" translate="yes" xml:space="preserve">
          <source>If you want to convert a string-formatted integer directly to an integer, &lt;a href=&quot;string#to_integer/1&quot;&gt;&lt;code&gt;String.to_integer/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;string#to_integer/2&quot;&gt;&lt;code&gt;String.to_integer/2&lt;/code&gt;&lt;/a&gt; can be used instead.</source>
          <target state="translated">文字列形式の整数を直接整数に変換する場合は、&lt;a href=&quot;string#to_integer/1&quot;&gt; &lt;code&gt;String.to_integer/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;string#to_integer/2&quot;&gt; &lt;code&gt;String.to_integer/2&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="fea9eb1c1234b827775e497ef0f42a61c69dfa13" translate="yes" xml:space="preserve">
          <source>If you want to copy contents from an IO device to another device or do a straight copy from a source to a destination without preserving modes, check &lt;a href=&quot;#copy/3&quot;&gt;&lt;code&gt;copy/3&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">コンテンツをIOデバイスから別のデバイスにコピーする場合、またはモードを維持せずにソースから宛先に直接コピーする場合は、代わりに&lt;a href=&quot;#copy/3&quot;&gt; &lt;code&gt;copy/3&lt;/code&gt; を&lt;/a&gt;オンにします。</target>
        </trans-unit>
        <trans-unit id="b19bfe43f6139c3e91cf27f55ce846cdfcd3e3c1" translate="yes" xml:space="preserve">
          <source>If you want to customize formatting through a custom formatter, you can pass a &lt;code&gt;{module, function}&lt;/code&gt; tuple as the &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">カスタムフォーマッタを使用してフォーマットをカスタマイズする場合は、 &lt;code&gt;{module, function}&lt;/code&gt; タプルを &lt;code&gt;pattern&lt;/code&gt; として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="65bb6ace50313174bd1da312015129749bbdebb7" translate="yes" xml:space="preserve">
          <source>If you want to denote that keys that were not previously defined in the map are allowed, it is common to end a map type with &lt;code&gt;optional(any) =&amp;gt; any&lt;/code&gt;.</source>
          <target state="translated">以前にマップで定義されていなかったキーが許可されることを示す場合は、 &lt;code&gt;optional(any) =&amp;gt; any&lt;/code&gt; マップタイプをoptional（any）=&amp;gt; anyで終了するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="bc7ce43a44c457f071e6a594b6c6aad38b49f886" translate="yes" xml:space="preserve">
          <source>If you want to get the current time in Unix seconds, do not do &lt;code&gt;DateTime.utc_now() |&amp;gt; DateTime.to_unix()&lt;/code&gt;. Simply call &lt;code&gt;System.os_time(:second)&lt;/code&gt; instead.</source>
          <target state="translated">現在の時刻をUnix秒で取得する場合は、 &lt;code&gt;DateTime.utc_now() |&amp;gt; DateTime.to_unix()&lt;/code&gt; 実行しないでください。代わりに &lt;code&gt;System.os_time(:second)&lt;/code&gt; を呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="5ffb28d4834a320bc72469ce99b22a133a75bf2e" translate="yes" xml:space="preserve">
          <source>If you want to invoke specific modules and functions in your release, you can do so in two ways: using &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;rpc&lt;/code&gt;.</source>
          <target state="translated">リリースで特定のモジュールと関数を呼び出す場合は、 &lt;code&gt;eval&lt;/code&gt; または &lt;code&gt;rpc&lt;/code&gt; を使用する2つの方法で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d5f2868ad75122ea25c9841323d0bc939ec4c117" translate="yes" xml:space="preserve">
          <source>If you want to keep a custom type private, you can use the &lt;code&gt;@typep&lt;/code&gt; attribute instead of &lt;code&gt;@type&lt;/code&gt;. The visibility also affects whether or not documentation will be generated by tools like &lt;a href=&quot;https://hexdocs.pm/ex_doc/readme.html&quot;&gt;ExDoc&lt;/a&gt;, Elixir&amp;rsquo;s documentation generator.</source>
          <target state="translated">カスタムタイプをプライベートにしておきたい場合は、 &lt;code&gt;@typep&lt;/code&gt; 代わりに &lt;code&gt;@type&lt;/code&gt; p属性を使用できます。可視性は、ドキュメントがElixirのドキュメントジェネレータである&lt;a href=&quot;https://hexdocs.pm/ex_doc/readme.html&quot;&gt;ExDoc&lt;/a&gt;などのツールによって生成されるかどうかにも影響します。</target>
        </trans-unit>
        <trans-unit id="c535a2a3105fc470fcf848d917b271f0d69918bc" translate="yes" xml:space="preserve">
          <source>If you want to keep a custom type private, you can use the &lt;code&gt;@typep&lt;/code&gt; directive instead of &lt;code&gt;@type&lt;/code&gt;.</source>
          <target state="translated">カスタムタイプをプライベートにしたい場合は、 &lt;code&gt;@typep&lt;/code&gt; 代わりに &lt;code&gt;@type&lt;/code&gt; pディレクティブを使用できます。</target>
        </trans-unit>
        <trans-unit id="bcbbba3c1ea50cbcd365e262b9d60f2feb2c65ed" translate="yes" xml:space="preserve">
          <source>If you want to keep any two tests separate, add an empty line between them:</source>
          <target state="translated">2つのテストを別々にしたい場合は、テストの間に空行を追加します。</target>
        </trans-unit>
        <trans-unit id="6270ce3f8ed8957cf75b8c1784c6e548f99f8963" translate="yes" xml:space="preserve">
          <source>If you want to pattern match against an existing variable, you need to use the &lt;a href=&quot;#%255E/1&quot;&gt;&lt;code&gt;^/1&lt;/code&gt;&lt;/a&gt; operator:</source>
          <target state="translated">既存の変数に対してパターンマッチングを行う場合は、&lt;a href=&quot;#%255E/1&quot;&gt; &lt;code&gt;^/1&lt;/code&gt; &lt;/a&gt;演算子を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8e1b5f66c0b107ff181c4a336661c05c7509728" translate="yes" xml:space="preserve">
          <source>If you want to pattern match against an existing variable, you need to use the &lt;a href=&quot;#%5E/1&quot;&gt;&lt;code&gt;^/1&lt;/code&gt;&lt;/a&gt; operator:</source>
          <target state="translated">既存の変数に対してパターンマッチングを行う場合は、&lt;a href=&quot;#%5E/1&quot;&gt; &lt;code&gt;^/1&lt;/code&gt; &lt;/a&gt;演算子を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0120649e8c4e2ba95fe6dca09a77ff652ec92d44" translate="yes" xml:space="preserve">
          <source>If you want to pattern match against an existing variable, you need to use the &lt;code&gt;^&lt;/code&gt; operator:</source>
          <target state="translated">既存の変数に対してパターンマッチングを行う場合は、 &lt;code&gt;^&lt;/code&gt; 演算子を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8611f45920c0ede3319c28e69a832c8f54905818" translate="yes" xml:space="preserve">
          <source>If you want to perform ceil operation on other decimal places, use &lt;a href=&quot;float#ceil/2&quot;&gt;&lt;code&gt;Float.ceil/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">他の小数位でceil演算を実行する場合は、代わりに&lt;a href=&quot;float#ceil/2&quot;&gt; &lt;code&gt;Float.ceil/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="006d429609c2e4b18605e6317262f44f76104754" translate="yes" xml:space="preserve">
          <source>If you want to perform ceil operation on other decimal places, use &lt;a href=&quot;https://hexdocs.pm/elixir/Float.html#ceil/2&quot;&gt;&lt;code&gt;Float.ceil/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">他の小数点以下の桁数でceil操作を実行する場合は、代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Float.html#ceil/2&quot;&gt; &lt;code&gt;Float.ceil/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="f71b7086446556c1e0c878a9ce96ae97c6d27fc0" translate="yes" xml:space="preserve">
          <source>If you want to perform floor operation on other decimal places, use &lt;a href=&quot;float#floor/2&quot;&gt;&lt;code&gt;Float.floor/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">他の小数位でフロア演算を実行する場合は、代わりに&lt;a href=&quot;float#floor/2&quot;&gt; &lt;code&gt;Float.floor/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="da1610c8254e7b523adf724249920d8824d70e09" translate="yes" xml:space="preserve">
          <source>If you want to perform floor operation on other decimal places, use &lt;a href=&quot;https://hexdocs.pm/elixir/Float.html#floor/2&quot;&gt;&lt;code&gt;Float.floor/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">他の小数点以下の桁数でフロア操作を実行する場合は、代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Float.html#floor/2&quot;&gt; &lt;code&gt;Float.floor/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="6176e9f771080616be12747b7598ac40675af864" translate="yes" xml:space="preserve">
          <source>If you want to perform floored integer division (rounding towards negative infinity), use &lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#floor_div/2&quot;&gt;&lt;code&gt;Integer.floor_div/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">フロア整数除算（負の無限大に向かって丸める）を実行する場合は、代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#floor_div/2&quot;&gt; &lt;code&gt;Integer.floor_div/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="e7d23f8f45e8ee5b1da8fce75c5c1d7be726d5c9" translate="yes" xml:space="preserve">
          <source>If you want to perform floored integer division (rounding towards negative infinity), use &lt;a href=&quot;integer#floor_div/2&quot;&gt;&lt;code&gt;Integer.floor_div/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">フロア整数除算（負の無限大に丸める）を実行する場合は、代わりに&lt;a href=&quot;integer#floor_div/2&quot;&gt; &lt;code&gt;Integer.floor_div/2&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="ea950ebad1bc7656ae137230492317baa7c6a6f0" translate="yes" xml:space="preserve">
          <source>If you want to perform truncated integer division (rounding towards zero), use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#div/2&quot;&gt;&lt;code&gt;Kernel.div/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">切り捨てられた整数除算（ゼロに丸める）を実行する場合は、代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#div/2&quot;&gt; &lt;code&gt;Kernel.div/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="7d5cba5ee293ef2a94c294f0400855682db25758" translate="yes" xml:space="preserve">
          <source>If you want to perform truncated integer division (rounding towards zero), use &lt;a href=&quot;kernel#div/2&quot;&gt;&lt;code&gt;Kernel.div/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">切り捨てられた整数除算（ゼロに向かって丸める）を実行する場合は、代わりに&lt;a href=&quot;kernel#div/2&quot;&gt; &lt;code&gt;Kernel.div/2&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="097c0e312bb8668d5ea944da5700770a1becb6c4" translate="yes" xml:space="preserve">
          <source>If you want to purge all log calls from an application named &lt;code&gt;:foo&lt;/code&gt; and only keep errors from &lt;code&gt;Bar.foo/3&lt;/code&gt;, you can set up two different matches:</source>
          <target state="translated">&lt;code&gt;:foo&lt;/code&gt; という名前のアプリケーションからのすべてのログ呼び出しをパージし、 &lt;code&gt;Bar.foo/3&lt;/code&gt; /3 からのエラーのみを保持する場合は、2つの異なる一致を設定できます。</target>
        </trans-unit>
        <trans-unit id="1d73b5161b517adda283c3e0c50a4ecfba748837" translate="yes" xml:space="preserve">
          <source>If you want to recompile an existing module, check &lt;a href=&quot;#r/1&quot;&gt;&lt;code&gt;r/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">既存のモジュールを再コンパイルする場合は、代わりに&lt;a href=&quot;#r/1&quot;&gt; &lt;code&gt;r/1&lt;/code&gt; を&lt;/a&gt;チェックしてください。</target>
        </trans-unit>
        <trans-unit id="1770175208fe6cb10e9c451baa7570e45537e962" translate="yes" xml:space="preserve">
          <source>If you want to reload a single module, consider using &lt;code&gt;r(ModuleName)&lt;/code&gt; instead.</source>
          <target state="translated">単一のモジュールを再ロードする場合は、代わりに &lt;code&gt;r(ModuleName)&lt;/code&gt; の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="22937dca14ad8e678a5773e217bdaf60e9e08640" translate="yes" xml:space="preserve">
          <source>If you want to remove all duplicated elements, regardless of order, see &lt;a href=&quot;#uniq/1&quot;&gt;&lt;code&gt;uniq/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">順序に関係なく、重複する要素をすべて削除する場合は、&lt;a href=&quot;#uniq/1&quot;&gt; &lt;code&gt;uniq/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1ac9b92a3ff486c5ca2aa293f505af60c2ce005a" translate="yes" xml:space="preserve">
          <source>If you want to run tests manually, you can set the &lt;code&gt;:autorun&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; and use &lt;a href=&quot;#run/0&quot;&gt;&lt;code&gt;run/0&lt;/code&gt;&lt;/a&gt; to run tests.</source>
          <target state="translated">テストを手動で実行する場合は、 &lt;code&gt;:autorun&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定し、&lt;a href=&quot;#run/0&quot;&gt; &lt;code&gt;run/0&lt;/code&gt; &lt;/a&gt;を使用してテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="d9cfb2104d8a7fbed8970b4e565fd893c81bbbd7" translate="yes" xml:space="preserve">
          <source>If you want to search for both &lt;code&gt;.beam&lt;/code&gt; and &lt;code&gt;.app&lt;/code&gt; files, you could do:</source>
          <target state="translated">&lt;code&gt;.beam&lt;/code&gt; ファイルと &lt;code&gt;.app&lt;/code&gt; ファイルの両方を検索する場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e842c7452c7ee7f8cc32ceae58854550ca1826ee" translate="yes" xml:space="preserve">
          <source>If you want to specify extra overlay directories, you can do so with the &lt;code&gt;:overlays&lt;/code&gt; option. If you need to copy files dynamically, see the &quot;Steps&quot; section.</source>
          <target state="translated">追加のオーバーレイディレクトリを指定する場合は、 &lt;code&gt;:overlays&lt;/code&gt; オプションを使用して指定できます。ファイルを動的にコピーする必要がある場合は、「手順」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e20d3f7642e2bc2878445510d6350ffeaed9f321" translate="yes" xml:space="preserve">
          <source>If you want to specify more than one variable, you separate them by a comma.</source>
          <target state="translated">複数の変数を指定したい場合は、カンマで区切ります。</target>
        </trans-unit>
        <trans-unit id="982a9cb228f92f03ac85417af3f281e259a660c2" translate="yes" xml:space="preserve">
          <source>If you want to unquote a value that is not a quoted expression, such as a map, you need to call &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#escape/1&quot;&gt;&lt;code&gt;Macro.escape/1&lt;/code&gt;&lt;/a&gt; before:</source>
          <target state="translated">マップなど、引用符で囲まれた式ではない値の引用符を解除する場合は、次の前に&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#escape/1&quot;&gt; &lt;code&gt;Macro.escape/1&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1680d4186a75a98ad990b5523a395b408476ac2a" translate="yes" xml:space="preserve">
          <source>If you want to unquote a value that is not a quoted expression, such as a map, you need to call &lt;a href=&quot;macro#escape/1&quot;&gt;&lt;code&gt;Macro.escape/1&lt;/code&gt;&lt;/a&gt; before:</source>
          <target state="translated">マップなど、引用された式ではない値の引用符を外したい場合は、前に&lt;a href=&quot;macro#escape/1&quot;&gt; &lt;code&gt;Macro.escape/1&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="bc958b979665c9c17d7950e0854fbc66f8ee61bb" translate="yes" xml:space="preserve">
          <source>If you were to perform a hot code upgrade in such an application, it would crash, because in the initial version the state was just a counter but in the new version the state is a tuple. Furthermore, you changed the format of the &lt;code&gt;call&lt;/code&gt; message from &lt;code&gt;:bump&lt;/code&gt; to &lt;code&gt;{:bump, by}&lt;/code&gt; and the process may have both old and new messages temporarily mixed, so we need to handle both. The final version would be:</source>
          <target state="translated">このようなアプリケーションでホットコードアップグレードを実行すると、クラッシュします。これは、初期バージョンでは状態が単なるカウンターでしたが、新しいバージョンでは状態がタプルであるためです。さらに、 &lt;code&gt;call&lt;/code&gt; メッセージの形式を &lt;code&gt;:bump&lt;/code&gt; から &lt;code&gt;{:bump, by}&lt;/code&gt; した場合、プロセスで古いメッセージと新しいメッセージの両方が一時的に混在する可能性があるため、両方を処理する必要があります。最終バージョンは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b27dac4f0c111d42a9f9a5c0743a540f0cc92e81" translate="yes" xml:space="preserve">
          <source>If you wish to find out more about GenServers, the Elixir Getting Started guide provides a tutorial-like introduction. The documentation and links in Erlang can also provide extra insight.</source>
          <target state="translated">GenServersについてもっと知りたい場合は、Elixir Getting Startedガイドがチュートリアルのような紹介をしています。Erlangのドキュメントやリンクもさらに詳しい情報を提供してくれます。</target>
        </trans-unit>
        <trans-unit id="b974f9968697c318d27fe1bd482bc9d5a128ec60" translate="yes" xml:space="preserve">
          <source>If you wish to inspect the code points in a single-quoted literal, you can force this by passing the &lt;code&gt;charlists&lt;/code&gt; option to &lt;code&gt;IO.inspect/2&lt;/code&gt;:</source>
          <target state="translated">一重引用符で囲まれたリテラルのコードポイントを検査する場合は、 &lt;code&gt;charlists&lt;/code&gt; オプションを &lt;code&gt;IO.inspect/2&lt;/code&gt; に渡すことでこれを強制できます。</target>
        </trans-unit>
        <trans-unit id="416d7a121c99b25e16e84560ead7cb67296777e6" translate="yes" xml:space="preserve">
          <source>If you wish to use another value for the accumulator, use &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;Enum.reduce/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アキュムレータに別の値を使用する場合は、&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;Enum.reduce/3&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="8d47bd8dadb23934d4b2666cf77ccc81ac30266c" translate="yes" xml:space="preserve">
          <source>If you wish to use another value for the accumulator, use &lt;a href=&quot;enum#reduce/3&quot;&gt;&lt;code&gt;Enum.reduce/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アキュムレータに別の値を使用する場合は、&lt;a href=&quot;enum#reduce/3&quot;&gt; &lt;code&gt;Enum.reduce/3&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="0943f45dd0efc661e7f07bd6255b9ee24dc17524" translate="yes" xml:space="preserve">
          <source>If you would like to get the result of evaluating file rather than the modules defined in it, see &lt;a href=&quot;#eval_file/2&quot;&gt;&lt;code&gt;eval_file/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイルで定義されているモジュールではなく、ファイルの評価結果を取得したい場合は、&lt;a href=&quot;#eval_file/2&quot;&gt; &lt;code&gt;eval_file/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fe37a76c869eaf7d64eb125b004dacbfd79cc33b" translate="yes" xml:space="preserve">
          <source>If you would rather enable it on your system as a whole, you can use the &lt;code&gt;ERL_AFLAGS&lt;/code&gt; environment variable and make sure that it is set accordingly on your terminal/shell configuration.</source>
          <target state="translated">システム全体で有効にする場合は、 &lt;code&gt;ERL_AFLAGS&lt;/code&gt; 環境変数を使用して、端末/シェル構成でそれに応じて設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="31456477d49264f6615f64085ad9c83e259679bd" translate="yes" xml:space="preserve">
          <source>If your Git repository requires authentication, such as basic username:password HTTP authentication via URLs, it can be achieved via Git configuration, keeping the access rules outside of source control.</source>
          <target state="translated">Git リポジトリで認証が必要な場合、たとえば URL を経由した基本的な username:password HTTP 認証のような認証が必要な場合は、Git の設定でアクセスルールをソース管理の外に置いておきます。</target>
        </trans-unit>
        <trans-unit id="c5250542055685fe9ce8faf48f1dcf6cf349fd3b" translate="yes" xml:space="preserve">
          <source>If your application does not have a supervision tree, one can be added by changing &lt;code&gt;def application&lt;/code&gt; inside &lt;code&gt;mix.exs&lt;/code&gt; to include a &lt;code&gt;:mod&lt;/code&gt; key with the application callback name:</source>
          <target state="translated">アプリケーションに監視ツリーがない場合は、 &lt;code&gt;mix.exs&lt;/code&gt; 内の &lt;code&gt;def application&lt;/code&gt; を変更して、アプリケーションコールバック名に： &lt;code&gt;:mod&lt;/code&gt; キーを含めることで、ツリーを追加できます。</target>
        </trans-unit>
        <trans-unit id="79acd423fb1e6c91580bcc6a424e71a397cbe715" translate="yes" xml:space="preserve">
          <source>If your implementation passes options or if you are generating custom code based on the struct, you will also need to implement a macro defined as &lt;code&gt;__deriving__(module, struct, options)&lt;/code&gt; to get the options that were passed.</source>
          <target state="translated">実装がオプションを渡す場合、または構造体に基づいてカスタムコードを生成する場合は、 &lt;code&gt;__deriving__(module, struct, options)&lt;/code&gt; として定義されたマクロを実装して、渡されたオプションを取得する必要もあります。</target>
        </trans-unit>
        <trans-unit id="1087391025d5c5314dde0fa06b5f87e55efb46aa" translate="yes" xml:space="preserve">
          <source>If your use case requires exactly what GenEvent provided, or you have to integrate with an existing &lt;code&gt;:gen_event&lt;/code&gt;-based system, you can still use the &lt;a href=&quot;http://erlang.org/doc/man/gen_event.html&quot;&gt;&lt;code&gt;:gen_event&lt;/code&gt;&lt;/a&gt; Erlang module.</source>
          <target state="translated">ユースケースでGenEventが提供するものを正確に必要とする場合、または既存の &lt;code&gt;:gen_event&lt;/code&gt; ベースのシステムと統合する必要がある場合でも、&lt;a href=&quot;http://erlang.org/doc/man/gen_event.html&quot;&gt; &lt;code&gt;:gen_event&lt;/code&gt; &lt;/a&gt; Erlangモジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="6ef21699df7b35a736d32d74888718170a41c693" translate="yes" xml:space="preserve">
          <source>If, for some reason, the current working directory cannot be retrieved, this function returns the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">何らかの理由で現在の作業ディレクトリを取得できない場合、この関数は指定された &lt;code&gt;path&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b3de6ae0bb7f57a373dcca73d61975801fe3edfc" translate="yes" xml:space="preserve">
          <source>If, for some reason, you must read the application environment at compile time, use &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#compile_env/2&quot;&gt;&lt;code&gt;Application.compile_env/2&lt;/code&gt;&lt;/a&gt;. Read &lt;a href=&quot;application#module-compile-time-environment&quot;&gt;the &quot;Compile-time environment&quot; section of the Application docs&lt;/a&gt; for more information.</source>
          <target state="translated">何らかの理由で、コンパイル時にアプリケーション環境を読み取る必要がある場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#compile_env/2&quot;&gt; &lt;code&gt;Application.compile_env/2&lt;/code&gt; を&lt;/a&gt;使用します。詳細&lt;a href=&quot;application#module-compile-time-environment&quot;&gt;については、アプリケーションドキュメントの「コンパイル時環境」セクションを&lt;/a&gt;お読みください。</target>
        </trans-unit>
        <trans-unit id="7f29cc51be005a79b079e12bf1ac5f22f7d2dcb7" translate="yes" xml:space="preserve">
          <source>If, in your Calendar, a new day starts at midnight, return {0, 1}.</source>
          <target state="translated">カレンダーで新しい日が真夜中に始まる場合、{0,1}を返します。</target>
        </trans-unit>
        <trans-unit id="41c5fa5884384a5740f83d50fb3866ac1d3665b0" translate="yes" xml:space="preserve">
          <source>If, in your Calendar, a new day starts at noon, return {1, 2}.</source>
          <target state="translated">カレンダーで新しい日が正午から始まる場合、{1,2}を返します。</target>
        </trans-unit>
        <trans-unit id="8f85da886f46e171f187e86eea72582fd0f8930c" translate="yes" xml:space="preserve">
          <source>If, in your Calendar, a new day starts at sunrise, return {1, 4}.</source>
          <target state="translated">カレンダーで新しい日が日の出から始まる場合は、{1,4}を返します。</target>
        </trans-unit>
        <trans-unit id="0d2c4953da7d60583c85fece795d7ebe8ed34cb1" translate="yes" xml:space="preserve">
          <source>If, in your Calendar, a new day starts at sunset, return {3, 4}.</source>
          <target state="translated">カレンダーで新しい日が日没から始まる場合は、{3,4}を返します。</target>
        </trans-unit>
        <trans-unit id="10cb7a9f4dc8fd31623acf09d7d8af1483fab624" translate="yes" xml:space="preserve">
          <source>If, later, the &lt;code&gt;Bar&lt;/code&gt; module is moved outside the &lt;code&gt;Foo&lt;/code&gt; module definition, it must be referenced by its full name (&lt;code&gt;Foo.Bar&lt;/code&gt;) or an alias must be set using the &lt;code&gt;alias&lt;/code&gt; directive discussed above.</source>
          <target state="translated">後で、 &lt;code&gt;Bar&lt;/code&gt; モジュールが &lt;code&gt;Foo&lt;/code&gt; モジュール定義の外に移動された場合、そのフルネーム（ &lt;code&gt;Foo.Bar&lt;/code&gt; ）で参照するか、上記の &lt;code&gt;alias&lt;/code&gt; ディレクティブを使用してエイリアスを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5aadcd56db1850d0771fc6771663e100003c9ea8" translate="yes" xml:space="preserve">
          <source>If, while the code is executing, the system clock changes, some code that executed in 1 second may be reported as taking over 1 hour! To address such concerns, the VM provides a monotonic time via &lt;a href=&quot;#monotonic_time/0&quot;&gt;&lt;code&gt;System.monotonic_time/0&lt;/code&gt;&lt;/a&gt; which never decreases and does not leap:</source>
          <target state="translated">コードの実行中にシステムクロックが変更された場合、1秒で実行されたコードの中には、1時間以上かかると報告される場合があります。このような懸念に対処するために、VMは&lt;a href=&quot;#monotonic_time/0&quot;&gt; &lt;code&gt;System.monotonic_time/0&lt;/code&gt; &lt;/a&gt;を介して単調な時間を提供します。これは決して減少せず、跳躍しません。</target>
        </trans-unit>
        <trans-unit id="d7beb7df4077fd4d4544fa6a837476c871ba893d" translate="yes" xml:space="preserve">
          <source>If, while the code is executing, the system clock changes, some code that executed in 1 second may be reported as taking over 1 hour! To address such concerns, the VM provides a monotonic time via &lt;a href=&quot;system#monotonic_time/0&quot;&gt;&lt;code&gt;System.monotonic_time/0&lt;/code&gt;&lt;/a&gt; which never decreases and does not leap:</source>
          <target state="translated">コードの実行中にシステムクロックが変更されると、1秒で実行された一部のコードが1時間以上かかると報告される場合があります。このような懸念に対処するために、VMは&lt;a href=&quot;system#monotonic_time/0&quot;&gt; &lt;code&gt;System.monotonic_time/0&lt;/code&gt; &lt;/a&gt;を介して単調な時間を提供します。これは決して減少せず、跳躍しません。</target>
        </trans-unit>
        <trans-unit id="acce89fb4ebef796946f7cb6a71ce1c0793fa8d9" translate="yes" xml:space="preserve">
          <source>Image: negative. Swap foreground and background.</source>
          <target state="translated">画像:ネガティブ。前景と背景を入れ替える。</target>
        </trans-unit>
        <trans-unit id="2554c2edabb99cac5d1195a237820679f650e785" translate="yes" xml:space="preserve">
          <source>Image: positive. Normal foreground and background.</source>
          <target state="translated">画像:正。通常の前景と背景。</target>
        </trans-unit>
        <trans-unit id="b4974ec0729731cbfc104f4eeb6f171651724046" translate="yes" xml:space="preserve">
          <source>Imagine a module uses a specialized list implemented in &lt;code&gt;Math.List&lt;/code&gt;. The &lt;code&gt;alias&lt;/code&gt; directive allows referring to &lt;code&gt;Math.List&lt;/code&gt; just as &lt;code&gt;List&lt;/code&gt; within the module definition:</source>
          <target state="translated">モジュールが &lt;code&gt;Math.List&lt;/code&gt; に実装された特殊なリストを使用するとします。 &lt;code&gt;alias&lt;/code&gt; ディレクティブは、を参照することができます &lt;code&gt;Math.List&lt;/code&gt; 同じように &lt;code&gt;List&lt;/code&gt; モジュール定義内：</target>
        </trans-unit>
        <trans-unit id="0c6d0807e9d9e68c71a2dfa2e6c744532d48a480" translate="yes" xml:space="preserve">
          <source>Imagine someone implements &lt;code&gt;Calendar.Holocene&lt;/code&gt;, a calendar based on the Gregorian calendar that adds exactly 10,000 years to the current Gregorian year:</source>
          <target state="translated">誰かが &lt;code&gt;Calendar.Holocene&lt;/code&gt; を実装するとします。これは、現在のグレゴリオ年にちょうど10,000年を追加する、グレゴリオ暦に基づくカレンダーです。</target>
        </trans-unit>
        <trans-unit id="ae47eabc88af2ef4455eb932e8ea60f7ae332748" translate="yes" xml:space="preserve">
          <source>Imagine the given &quot;old&quot; code:</source>
          <target state="translated">与えられた &quot;古い &quot;コードを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="52ac66ba0efe559bd54e9f534310fa769ff5fac4" translate="yes" xml:space="preserve">
          <source>Imagine the situation you have a quoted expression and you want to inject it inside some quote. The first attempt would be:</source>
          <target state="translated">引用符で囲まれた式を持っていて、それを引用符の中に挿入したい場合を想像してみてください。最初の試みは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f60dc9c31d90f01f4ada0187787c8518ff7e6336" translate="yes" xml:space="preserve">
          <source>Imagine you have a directory called &lt;code&gt;projects&lt;/code&gt; with three Elixir projects inside of it: &lt;code&gt;elixir&lt;/code&gt;, &lt;code&gt;ex_doc&lt;/code&gt;, and &lt;code&gt;plug&lt;/code&gt;. You can find all &lt;code&gt;.beam&lt;/code&gt; files inside the &lt;code&gt;ebin&lt;/code&gt; directory of each project as follows:</source>
          <target state="translated">&lt;code&gt;projects&lt;/code&gt; と呼ばれるディレクトリがあり、その中に3つのElixirプロジェクト（ &lt;code&gt;elixir&lt;/code&gt; 、 &lt;code&gt;ex_doc&lt;/code&gt; 、および &lt;code&gt;plug&lt;/code&gt; )があるとします。次のように、各プロジェクトの &lt;code&gt;ebin&lt;/code&gt; ディレクトリ内のすべての &lt;code&gt;.beam&lt;/code&gt; ファイルを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="bbd38c599b5ec1ff1edb2d327d81cfb6d57d0ae9" translate="yes" xml:space="preserve">
          <source>Imagine you have a map that contains a MapSet and is printed as:</source>
          <target state="translated">MapSet を含むマップを持っていて、MapSet として印刷されていると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="78e853aca214a1bc65ac8ef6110f03573d680e17" translate="yes" xml:space="preserve">
          <source>Imagine you have the following structure:</source>
          <target state="translated">以下のような構造になっていると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="e874a03e71d708ca4e25914c4864e7d0682296da" translate="yes" xml:space="preserve">
          <source>Immediately halts the Erlang runtime system.</source>
          <target state="translated">Erlangランタイムシステムを即座に停止させます。</target>
        </trans-unit>
        <trans-unit id="81ebe12aa11cc123fdb7f8c88133ffaff6347b23" translate="yes" xml:space="preserve">
          <source>Implementation details</source>
          <target state="translated">実施内容</target>
        </trans-unit>
        <trans-unit id="1ef5a932d18820b4b0e243f0726d914bc0a7ff10" translate="yes" xml:space="preserve">
          <source>Implementing &lt;code&gt;Any&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Any&lt;/code&gt; 実装</target>
        </trans-unit>
        <trans-unit id="5796eba4ad579f1726f97515a9ac4256c827ceb8" translate="yes" xml:space="preserve">
          <source>Implementing behaviours</source>
          <target state="translated">行動の実装</target>
        </trans-unit>
        <trans-unit id="4d98cf2da4c3ebd35020a6022935dad49c5720d8" translate="yes" xml:space="preserve">
          <source>Implementing functions like &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;map/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#filter/2&quot;&gt;&lt;code&gt;filter/2&lt;/code&gt;&lt;/a&gt; and others are a good exercise for understanding the power behind &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;Enum.reduce/3&lt;/code&gt;&lt;/a&gt;. When an operation cannot be expressed by any of the functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module, developers will most likely resort to &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;reduce/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;map/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#filter/2&quot;&gt; &lt;code&gt;filter/2&lt;/code&gt; &lt;/a&gt;などの関数を実装することは、&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;Enum.reduce/3&lt;/code&gt; の&lt;/a&gt;背後にある力を理解するための良い演習です。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールのどの関数でも操作を表現できない場合、開発者はおそらく&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;reduce/3&lt;/code&gt; に&lt;/a&gt;頼るでしょう。</target>
        </trans-unit>
        <trans-unit id="b465297e29160eecd675375f9f56fd85c2f30272" translate="yes" xml:space="preserve">
          <source>Implementing functions like &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;map/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#filter/2&quot;&gt;&lt;code&gt;filter/2&lt;/code&gt;&lt;/a&gt; and others are a good exercise for understanding the power behind &lt;a href=&quot;enum#reduce/3&quot;&gt;&lt;code&gt;Enum.reduce/3&lt;/code&gt;&lt;/a&gt;. When an operation cannot be expressed by any of the functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module, developers will most likely resort to &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;reduce/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;enum#reduce/3&quot;&gt; &lt;code&gt;Enum.reduce/3&lt;/code&gt; の&lt;/a&gt;背後にある力を理解するには、&lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;map/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#filter/2&quot;&gt; &lt;code&gt;filter/2&lt;/code&gt; &lt;/a&gt;などの関数を実装することをお勧めします。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールのどの関数でも操作を表現できない場合、開発者はおそらく&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;reduce/3&lt;/code&gt; を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ad3e95d8cf32f54c45a81b4f1a57f15494498570" translate="yes" xml:space="preserve">
          <source>Implenting the behaviour explicitly without calling &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#super/1&quot;&gt;&lt;code&gt;super/1&lt;/code&gt;&lt;/a&gt; (v1.0)</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#super/1&quot;&gt; &lt;code&gt;super/1&lt;/code&gt; &lt;/a&gt;（v1.0）を呼び出さずに動作を明示的に強制する</target>
        </trans-unit>
        <trans-unit id="a11cbfe39e0739e620b6472396d552890b65f2b5" translate="yes" xml:space="preserve">
          <source>Implenting the behaviour explicitly without calling &lt;a href=&quot;kernel.specialforms#super/1&quot;&gt;&lt;code&gt;super/1&lt;/code&gt;&lt;/a&gt; (v1.0)</source>
          <target state="translated">&lt;a href=&quot;kernel.specialforms#super/1&quot;&gt; &lt;code&gt;super/1&lt;/code&gt; &lt;/a&gt;（v1.0）を呼び出さずに動作を明示的に示す</target>
        </trans-unit>
        <trans-unit id="6ee8b57e8a1146e8195323d5ab0ac1b28d4bf4d5" translate="yes" xml:space="preserve">
          <source>Important: do &lt;strong&gt;not&lt;/strong&gt; use this function on IO devices in Unicode mode as it will write the wrong data. In particular, the standard IO device is set to Unicode by default, so writing to stdio with this function will likely result in the wrong data being sent down the wire.</source>
          <target state="translated">重要：誤ったデータを書き込むため、この関数をUnicodeモードのIOデバイスで使用し&lt;strong&gt;ないで&lt;/strong&gt;ください。特に、標準IOデバイスはデフォルトでUnicodeに設定されているため、この関数を使用してstdioに書き込むと、間違ったデータがネットワークに送信される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bdee98dcb44004b1533b9be7b352b94b0439a6f5" translate="yes" xml:space="preserve">
          <source>Importing dependencies configuration</source>
          <target state="translated">依存関係の設定のインポート</target>
        </trans-unit>
        <trans-unit id="3e99e591c470385409fd87d84f7ea0fdc9e8826b" translate="yes" xml:space="preserve">
          <source>Imports configuration from the given file or files.</source>
          <target state="translated">指定されたファイルまたはファイルから設定をインポートします。</target>
        </trans-unit>
        <trans-unit id="5ee893c3406c5d187c4ad8d2a37d2b2305b2b378" translate="yes" xml:space="preserve">
          <source>Imports configuration from the given file.</source>
          <target state="translated">指定されたファイルから設定をインポートします。</target>
        </trans-unit>
        <trans-unit id="82d4e22f3ba03649c647ac0cbd6a6f1c75820475" translate="yes" xml:space="preserve">
          <source>Imports functions and macros from other modules.</source>
          <target state="translated">他のモジュールから関数やマクロをインポートします。</target>
        </trans-unit>
        <trans-unit id="bb0b9afcb24ddc9f67176eeec399cead058aa4a9" translate="yes" xml:space="preserve">
          <source>Imports: new functions may be added to the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module, which is auto-imported. They may collide with local functions defined in your modules. Collisions can be resolved in a backwards compatible fashion using &lt;code&gt;import Kernel, except: [...]&lt;/code&gt; with a list of all functions you don't want to be imported from &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;. We reserve the right to do such additions.</source>
          <target state="translated">インポート：自動インポートされる&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールに新しい関数を追加できます。モジュールで定義されているローカル関数と衝突する可能性があります。衝突は &lt;code&gt;import Kernel, except: [...]&lt;/code&gt; を使用して下位互換性のある方法で解決できます。ただし、[...] &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;からインポートしたくないすべての関数のリストがあります。当社はそのような追加を行う権利を留保します。</target>
        </trans-unit>
        <trans-unit id="ce9dd8afb038714101f1fa2419f409800104c52e" translate="yes" xml:space="preserve">
          <source>Imports: new functions may be added to the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module, which is auto-imported. They may collide with local functions defined in your modules. Collisions can be resolved in a backwards compatible fashion using &lt;code&gt;import Kernel, except: [...]&lt;/code&gt; with a list of all functions you don't want to be imported from &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;. We reserve the right to do such additions.</source>
          <target state="translated">インポート：新しい関数が&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールに追加され、自動インポートされます。モジュールで定義されたローカル関数と衝突する可能性があります。衝突は &lt;code&gt;import Kernel, except: [...]&lt;/code&gt; を使用して下位互換性のある方法で解決できますが、次の場合を除きます：[...] &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;からインポートしたくないすべての関数のリスト。そのような追加を行う権利を留保します。</target>
        </trans-unit>
        <trans-unit id="6e98571e8ce38e7d695efe3ecee0b6e80bc755f3" translate="yes" xml:space="preserve">
          <source>Improper lists are never deemed as charlists.</source>
          <target state="translated">不適切なリストは決してチャーリストとはみなされません。</target>
        </trans-unit>
        <trans-unit id="fee52b5aef3534510640142b73884d80c6b12f47" translate="yes" xml:space="preserve">
          <source>Improper lists are not printable, even if made only of ASCII characters:</source>
          <target state="translated">不適切なリストは、ASCII文字だけで作っても印刷できません。</target>
        </trans-unit>
        <trans-unit id="1651a35afb019627c0965d85cc4992b58cfbc54d" translate="yes" xml:space="preserve">
          <source>In &amp;ldquo;Basic types&amp;rdquo;, we learned a little bit about strings and we used the &lt;code&gt;is_binary/1&lt;/code&gt; function for checks:</source>
          <target state="translated">「基本タイプ」では、文字列について少し学び、チェックに &lt;code&gt;is_binary/1&lt;/code&gt; 関数を使用しました。</target>
        </trans-unit>
        <trans-unit id="c0d4390b7f52bc3219b6b297954aa2698cd9b21f" translate="yes" xml:space="preserve">
          <source>In &amp;ldquo;Basic types&amp;rdquo;, we learned about strings and used the &lt;code&gt;is_binary/1&lt;/code&gt; function for checks:</source>
          <target state="translated">「基本タイプ」では、文字列について学び、チェックに &lt;code&gt;is_binary/1&lt;/code&gt; 関数を使用しました。</target>
        </trans-unit>
        <trans-unit id="96d506b973cc16f3c887c604680a4f164c5bcb6d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;keywords-and-maps&quot;&gt;chapter 7&lt;/a&gt; we learned about maps:</source>
          <target state="translated">では&lt;a href=&quot;keywords-and-maps&quot;&gt;第7章&lt;/a&gt;私たちは、マップについて学びました。</target>
        </trans-unit>
        <trans-unit id="b97f6da29f9d3821af09c9644f82422d41ba54db" translate="yes" xml:space="preserve">
          <source>In Elixir we group several functions into modules. We&amp;rsquo;ve already used many different modules in the previous chapters such as &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;the &lt;code&gt;String&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">Elixirでは、いくつかの関数をモジュールにグループ化します。前の章では&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;、 &lt;code&gt;String&lt;/code&gt; モジュール&lt;/a&gt;など、さまざまなモジュールをすでに使用しています。</target>
        </trans-unit>
        <trans-unit id="f34428000982ff1805aac800f0ebed47748f3ab4" translate="yes" xml:space="preserve">
          <source>In Elixir you can use a &lt;code&gt;?&lt;/code&gt; in front of a character literal to reveal its code point:</source>
          <target state="translated">Elixirでは &lt;code&gt;?&lt;/code&gt; を使用できます コードポイントを明らかにするための文字リテラルの前：</target>
        </trans-unit>
        <trans-unit id="8852e2c2070399b66b8e6aac0c4ebb222e49ff1d" translate="yes" xml:space="preserve">
          <source>In Elixir, &lt;code&gt;Integer.is_odd/1&lt;/code&gt; is defined as a macro so that it can be used as a guard. This means that, in order to invoke &lt;code&gt;Integer.is_odd/1&lt;/code&gt;, we need to first require the &lt;code&gt;Integer&lt;/code&gt; module.</source>
          <target state="translated">Elixirでは、 &lt;code&gt;Integer.is_odd/1&lt;/code&gt; はマクロとして定義されているため、ガードとして使用できます。つまり、 &lt;code&gt;Integer.is_odd/1&lt;/code&gt; を呼び出すには、まず &lt;code&gt;Integer&lt;/code&gt; モジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="84a15dcd0ed954400244a91382ebe28f35c7326d" translate="yes" xml:space="preserve">
          <source>In Elixir, a value can be thrown and later be caught. &lt;code&gt;throw&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; are reserved for situations where it is not possible to retrieve a value unless by using &lt;code&gt;throw&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">エリクサーでは、値をスローして後でキャッチすることができます。 &lt;code&gt;throw&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; は、 &lt;code&gt;throw&lt;/code&gt; と &lt;code&gt;catch&lt;/code&gt; を使用しないと値を取得できない場合のために予約されています。</target>
        </trans-unit>
        <trans-unit id="0f7dc2374bd2e474c5f95f1dc00588968670f4e9" translate="yes" xml:space="preserve">
          <source>In Elixir, all code runs inside processes. Processes are isolated from each other, run concurrent to one another and communicate via message passing. Processes are not only the basis for concurrency in Elixir, but they also provide the means for building distributed and fault-tolerant programs.</source>
          <target state="translated">Elixirでは、すべてのコードはプロセスの中で実行されます。プロセスは互いに分離されており、互いに並行して実行され、メッセージパッシングを介して通信します。プロセスは、Elixirの同時実行の基礎となるだけでなく、分散型でフォールトトレラントなプログラムを構築するための手段でもあります。</target>
        </trans-unit>
        <trans-unit id="fcd7da208c379530ff673f8c5363361cec7ce112" translate="yes" xml:space="preserve">
          <source>In Elixir, an enumerable is any data type that implements the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol. &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;s (&lt;code&gt;[1, 2, 3]&lt;/code&gt;), &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;s (&lt;code&gt;%{foo: 1, bar: 2}&lt;/code&gt;) and &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;s (&lt;code&gt;1..3&lt;/code&gt;) are common data types used as enumerables:</source>
          <target state="translated">エリクサーでは、列挙は、任意のデータ型実装していることで&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコル。&lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt; s（ &lt;code&gt;[1, 2, 3]&lt;/code&gt; ）、&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; s（ &lt;code&gt;%{foo: 1, bar: 2}&lt;/code&gt; ）および&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt; s（ &lt;code&gt;1..3&lt;/code&gt; ）は、列挙可能として使用される一般的なデータ型です。</target>
        </trans-unit>
        <trans-unit id="a207968d5a8dba5d6352c7b46008a0e1ddc8ec1d" translate="yes" xml:space="preserve">
          <source>In Elixir, an enumerable is any data type that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol. &lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;s (&lt;code&gt;[1, 2, 3]&lt;/code&gt;), &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;s (&lt;code&gt;%{foo: 1, bar: 2}&lt;/code&gt;) and &lt;a href=&quot;https://hexdocs.pm/elixir/Range.html&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;s (&lt;code&gt;1..3&lt;/code&gt;) are common data types used as enumerables:</source>
          <target state="translated">エリクサーでは、列挙は、任意のデータ型実装していることで&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコル。&lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;[1, 2, 3]&lt;/code&gt; ）、&lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;%{foo: 1, bar: 2}&lt;/code&gt; ）、および&lt;a href=&quot;https://hexdocs.pm/elixir/Range.html&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;1..3&lt;/code&gt; ）は、列挙可能オブジェクトとして使用される一般的なデータ型です。</target>
        </trans-unit>
        <trans-unit id="ad60a1595fcaea2abc6cfb534bb59968e6aa0a7d" translate="yes" xml:space="preserve">
          <source>In Elixir, code organization is done by modules and functions, processes are not necessary. For example, imagine you are implementing a calculator and you decide to put all the calculator operations behind a &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Elixirでは、コード編成はモジュールと関数によって行われ、プロセスは必要ありません。たとえば、電卓を実装していて、すべての電卓操作を&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;背後に置くことにしたとします。</target>
        </trans-unit>
        <trans-unit id="7900ac30a1169c9e2266c3344cde6f7b66b7bf2b" translate="yes" xml:space="preserve">
          <source>In Elixir, code organization is done by modules and functions, processes are not necessary. For example, imagine you are implementing a calculator and you decide to put all the calculator operations behind a &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Elixirでは、コードの編成はモジュールと関数によって行われ、プロセスは必要ありません。たとえば、電卓を実装していて、すべての電卓操作を&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;背後に置くことにしたとします。</target>
        </trans-unit>
        <trans-unit id="aa0691e43ac9902c05a55318172be1be3b51602d" translate="yes" xml:space="preserve">
          <source>In Elixir, code organization is done by modules and functions, processes are not necessary. For example, imagine you are implementing a calculator and you decide to put all the calculator operations behind a GenServer:</source>
          <target state="translated">Elixirでは、コードの整理はモジュールと関数で行い、プロセスは必要ありません。例えば、電卓を実装していて、電卓の操作をすべてGenServerの後ろに置くことにしたとします。</target>
        </trans-unit>
        <trans-unit id="1a65801df985cbe3e3c9ee19ff7e4341c68a0a15" translate="yes" xml:space="preserve">
          <source>In Elixir, different data types can be compared using comparison operators:</source>
          <target state="translated">Elixirでは、比較演算子を使用して異なるデータ型を比較することができます。</target>
        </trans-unit>
        <trans-unit id="3ef291ece743ba126271fab00a84b2bf1cd10359" translate="yes" xml:space="preserve">
          <source>In Elixir, it is common to loop over an Enumerable, often filtering out some results and mapping values into another list. Comprehensions are syntactic sugar for such constructs: they group those common tasks into the &lt;code&gt;for&lt;/code&gt; special form.</source>
          <target state="translated">Elixirでは、Enumerableをループして、一部の結果を除外し、値を別のリストにマッピングすることがよくあります。内包表記は、そのような構成要素の構文糖衣です。それらは、これらの一般的なタスクを &lt;code&gt;for&lt;/code&gt; 特殊形式にグループ化します。</target>
        </trans-unit>
        <trans-unit id="92fa98b368b718157a766ec2a187b1b728ee06ed" translate="yes" xml:space="preserve">
          <source>In Elixir, records are used mostly in two situations:</source>
          <target state="translated">Elixirでは、レコードは主に2つの状況で使用されます。</target>
        </trans-unit>
        <trans-unit id="19e018a4aa4ddd6ea9b4d083bf7991661ac6f619" translate="yes" xml:space="preserve">
          <source>In Elixir, the &lt;code&gt;=&lt;/code&gt; operator is actually called &lt;em&gt;the match operator&lt;/em&gt;. Let&amp;rsquo;s see why:</source>
          <target state="translated">Elixirでは、 &lt;code&gt;=&lt;/code&gt; 演算子は実際に&lt;em&gt;は一致演算子&lt;/em&gt;と呼ばれ&lt;em&gt;てい&lt;/em&gt;ます。その理由を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="482c60a7cfc2af43cfa398215016e9bcabca31ff" translate="yes" xml:space="preserve">
          <source>In Elixir, this is done by a Supervisor. A Supervisor is a process that supervises other processes and restarts them whenever they crash. To do so, Supervisors manage the whole life-cycle of any supervised processes, including startup and shutdown.</source>
          <target state="translated">Elixirでは、これはSupervisorによって行われます。スーパーバイザは、他のプロセスを監視し、クラッシュした場合にはいつでも再起動するプロセスです。そのために、スーパーバイザは、起動とシャットダウンを含む、監督されたプロセスのライフサイクル全体を管理します。</target>
        </trans-unit>
        <trans-unit id="c6d542894f9023e77ee4252a95cfc7fdde16bf1f" translate="yes" xml:space="preserve">
          <source>In Elixir, we avoid using &lt;code&gt;try/rescue&lt;/code&gt; because &lt;strong&gt;we don&amp;rsquo;t use errors for control flow&lt;/strong&gt;. We take errors literally: they are reserved for unexpected and/or exceptional situations. In case you actually need flow control constructs, &lt;em&gt;throws&lt;/em&gt; should be used. That&amp;rsquo;s what we are going to see next.</source>
          <target state="translated">Elixirでは、&lt;strong&gt;制御フローにエラーを使用しない&lt;/strong&gt;ため、 &lt;code&gt;try/rescue&lt;/code&gt; の使用を避けて&lt;strong&gt;います&lt;/strong&gt;。私たちは文字通りエラーを受け取ります：それらは予期しないおよび/または例外的な状況のために予約されています。実際にフロー制御構造が必要な場合は、&lt;em&gt;スロー&lt;/em&gt;を使用する必要があります。それが次に見るものです。</target>
        </trans-unit>
        <trans-unit id="b26350d75961840721899e4e896ada8152ee4ff0" translate="yes" xml:space="preserve">
          <source>In Elixir, we can compare two different data types:</source>
          <target state="translated">Elixirでは、2つの異なるデータ型を比較することができます。</target>
        </trans-unit>
        <trans-unit id="99415fb48cc7bcce7ee941711b73cb718fae4683" translate="yes" xml:space="preserve">
          <source>In Elixir, we have two idioms for checking how many items there are in a data structure: &lt;code&gt;length&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;. &lt;code&gt;length&lt;/code&gt; means the information must be computed. For example, &lt;code&gt;length(list)&lt;/code&gt; needs to traverse the whole list to calculate its length. On the other hand, &lt;code&gt;tuple_size(tuple)&lt;/code&gt; and &lt;code&gt;byte_size(binary)&lt;/code&gt; do not depend on the tuple and binary size as the size information is pre-computed in the data structure.</source>
          <target state="translated">Elixirでは、データ構造にあるアイテムの数をチェックするための2つのイディオムがあります： &lt;code&gt;length&lt;/code&gt; と &lt;code&gt;size&lt;/code&gt; です。 &lt;code&gt;length&lt;/code&gt; は、情報を計算する必要があることを意味します。たとえば、 &lt;code&gt;length(list)&lt;/code&gt; はその長さを計算するためにリスト全体をトラバースする必要があります。一方、 &lt;code&gt;tuple_size(tuple)&lt;/code&gt; と &lt;code&gt;byte_size(binary)&lt;/code&gt; は、サイズ情報がデータ構造で事前に計算されるため、タプルとバイナリのサイズに依存しません。</target>
        </trans-unit>
        <trans-unit id="f3be4753dceb5fddab1fdca38953766786eecc42" translate="yes" xml:space="preserve">
          <source>In Elixir, we have two main associative data structures: keyword lists and maps. It&amp;rsquo;s time to learn more about them!</source>
          <target state="translated">Elixirには、キーワードリストとマップという2つの主な関連データ構造があります。それらについてもっと学ぶ時が来ました！</target>
        </trans-unit>
        <trans-unit id="6cb8d41ba02e8fc631535705b4f2e08988507e70" translate="yes" xml:space="preserve">
          <source>In Elixir, we have two verbs for checking how many items there are in a data structure: &lt;code&gt;length&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;. &lt;code&gt;length&lt;/code&gt; means the information must be computed. For example, &lt;code&gt;length(list)&lt;/code&gt; needs to traverse the whole list to calculate its length. On the other hand, &lt;code&gt;tuple_size(tuple)&lt;/code&gt; and &lt;code&gt;byte_size(binary)&lt;/code&gt; do not depend on the tuple and binary size as the size information is precomputed in the data structure.</source>
          <target state="translated">Elixirには、データ構造内にあるアイテムの数を確認するための2つの動詞があり &lt;code&gt;size&lt;/code&gt; 。 &lt;code&gt;length&lt;/code&gt; とサイズです。 &lt;code&gt;length&lt;/code&gt; は、情報を計算する必要があることを意味します。たとえば、 &lt;code&gt;length(list)&lt;/code&gt; はその長さを計算するためにリスト全体をトラバースする必要があります。一方、 &lt;code&gt;tuple_size(tuple)&lt;/code&gt; と &lt;code&gt;byte_size(binary)&lt;/code&gt; は、サイズ情報がデータ構造で事前に計算されるため、タプルとバイナリのサイズに依存しません。</target>
        </trans-unit>
        <trans-unit id="3e9adf90c14fca15cafcd8d80e7a0e62f3c9bd2b" translate="yes" xml:space="preserve">
          <source>In Elixir, you can define a binary using &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">Elixirでは、 &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; を使用してバイナリを定義できます。</target>
        </trans-unit>
        <trans-unit id="3508879bcb04190c581cc69dedcf57a9400be46d" translate="yes" xml:space="preserve">
          <source>In Erlang, this struct is represented by a &lt;code&gt;:file_info&lt;/code&gt; record. Therefore this module also provides functions for converting between the Erlang record and the Elixir struct.</source>
          <target state="translated">Erlangでは、この構造体は &lt;code&gt;:file_info&lt;/code&gt; レコードで表されます。したがって、このモジュールは、ErlangレコードとElixir構造体の間の変換機能も提供します。</target>
        </trans-unit>
        <trans-unit id="19ae95f1d5cbc8f9036da514524bab95b3e8521e" translate="yes" xml:space="preserve">
          <source>In Mix projects this function returns the environment this configuration file is executed on. In releases, the environment when &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt; ran.</source>
          <target state="translated">Mixプロジェクトでは、この関数はこの構成ファイルが実行される環境を返します。リリースでは、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;実行されたときの環境。</target>
        </trans-unit>
        <trans-unit id="e341b5436849e02ad44c7ab5cb526b1b7ab5e415" translate="yes" xml:space="preserve">
          <source>In Mix projects, the environment of the application and its dependencies can be overridden via the &lt;code&gt;config/config.exs&lt;/code&gt; file. For example, someone using your application can override its &lt;code&gt;:db_host&lt;/code&gt; environment variable as follows:</source>
          <target state="translated">Mixプロジェクトでは、アプリケーションの環境とその依存関係は、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルを介してオーバーライドできます。たとえば、アプリケーションを使用している人は、次のように： &lt;code&gt;:db_host&lt;/code&gt; 環境変数をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="08902136d46a0efffdb0a07180738ce463f3cf44" translate="yes" xml:space="preserve">
          <source>In Mix projects, the environment of the application and its dependencies can be overridden via the &lt;code&gt;config/config.exs&lt;/code&gt; file. If you start the application with Mix, that configuration is available at compile time, and at runtime too, but take into account it is not included in the generated application resource file, and it is not available if you start the application without Mix.</source>
          <target state="translated">Mixプロジェクトでは、アプリケーションの環境とその依存関係は、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルを使用してオーバーライドできます。Mixを使用してアプリケーションを開始する場合、その構成はコンパイル時および実行時にも使用できますが、生成されたアプリケーションリソースファイルには含まれず、Mixなしでアプリケーションを開始した場合は使用できません。</target>
        </trans-unit>
        <trans-unit id="9174170a472a8f04a70eb2658745c2e8ceaf3c42" translate="yes" xml:space="preserve">
          <source>In Unix-like systems, changing the modification time may require you to be either &lt;code&gt;root&lt;/code&gt; or the owner of the file. Having write access may not be enough. In those cases, touching the file the first time (to create it) will succeed, but touching an existing file with fail with &lt;code&gt;{:error, :eperm}&lt;/code&gt;.</source>
          <target state="translated">Unixライクなシステムでは、変更時刻を変更するには、 &lt;code&gt;root&lt;/code&gt; またはファイルの所有者である必要があります。書き込みアクセス権があるだけでは不十分な場合があります。これらの場合、ファイルを最初に（作成するために）タッチすることは成功しますが、既存のファイルをタッチすると &lt;code&gt;{:error, :eperm}&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="0de5ec7fc6835af5a7c8c3ee0628180b848d8db4" translate="yes" xml:space="preserve">
          <source>In a GenServer, the code above would be two separate functions, roughly like this:</source>
          <target state="translated">GenServerでは、上記のコードは大体次のような2つの別々の関数になります。</target>
        </trans-unit>
        <trans-unit id="bcadbac52f644d8178e01dd98a388d6072c88e19" translate="yes" xml:space="preserve">
          <source>In a distributed setup with multiple nodes, the API that accepts anonymous functions only works if the caller (client) and the agent have the same version of the caller module.</source>
          <target state="translated">複数のノードを持つ分散設定では、匿名関数を受け付けるAPIは、呼び出し元(クライアント)とエージェントが同じバージョンの呼び出し元モジュールを持っている場合にのみ動作します。</target>
        </trans-unit>
        <trans-unit id="0fe49527fc564fb18ae1d9b47c99a05222fe3f97" translate="yes" xml:space="preserve">
          <source>In a hot code upgrade, you want to update a node from version A to version B. To do so, the first step is to write recipes for every application that changed between those two releases, telling exactly how the application changed between versions, those recipes are called &lt;code&gt;.appup&lt;/code&gt; files. While some of the steps in building &lt;code&gt;.appup&lt;/code&gt; files can be automated, not all of them can. Furthermore, each process in the application needs to be explicitly coded with hot code upgrades in mind. Let's see an example. Imagine your application has a counter process as a GenServer:</source>
          <target state="translated">ホットコードアップグレードでは、ノードをバージョンAからバージョンBに更新する必要があります。そのための最初のステップは、これら2つのリリース間で変更されたすべてのアプリケーションのレシピを記述し、アプリケーションがバージョン間でどのように変更されたかを正確に伝えることです。レシピは &lt;code&gt;.appup&lt;/code&gt; ファイルと呼ばれます。 &lt;code&gt;.appup&lt;/code&gt; ファイルを作成する手順の一部は自動化できますが、すべてが自動化できるわけではありません。さらに、アプリケーションの各プロセスは、ホットコードのアップグレードを念頭に置いて明示的にコーディングする必要があります。例を見てみましょう。アプリケーションにGenServerとしてのカウンタープロセスがあると想像してください。</target>
        </trans-unit>
        <trans-unit id="93de78b9e89412d553d71ba4abbfe5315731105f" translate="yes" xml:space="preserve">
          <source>In a nutshell, a version is represented by three numbers:</source>
          <target state="translated">一言で言えば、バージョンは3つの数字で表されます。</target>
        </trans-unit>
        <trans-unit id="4de3e72994971159efbbfa51adb4f6daeb251a7f" translate="yes" xml:space="preserve">
          <source>In a nutshell, an application consists of all of the modules defined in the &lt;code&gt;.app&lt;/code&gt; file, including the &lt;code&gt;.app&lt;/code&gt; file itself. An application has generally only two directories: &lt;code&gt;ebin&lt;/code&gt;, for Elixir artefacts, such as &lt;code&gt;.beam&lt;/code&gt; and &lt;code&gt;.app&lt;/code&gt; files, and &lt;code&gt;priv&lt;/code&gt;, with any other artefact or asset you may need in your application.</source>
          <target state="translated">一言で言えば、アプリケーションは、で定義されたすべてのモジュールから構成 &lt;code&gt;.app&lt;/code&gt; 含むファイル、 &lt;code&gt;.app&lt;/code&gt; ファイル自体。通常、アプリケーションには2つのディレクトリしかありません &lt;code&gt;.beam&lt;/code&gt; や &lt;code&gt;.app&lt;/code&gt; ファイルなどのElixirアーティファクトの場合は &lt;code&gt;ebin&lt;/code&gt; 、アプリケーションで必要になる可能性のある他のアーティファクトやアセットの場合は &lt;code&gt;priv&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8a78c9d971b121556059db385274a3963a89d465" translate="yes" xml:space="preserve">
          <source>In a nutshell, the first must be used when you want to keep track of the files handled by the system, to avoid the same file from being compiled multiple times. This is common in scripts.</source>
          <target state="translated">一言で言えば、同じファイルが何度もコンパイルされるのを避けるために、システムが扱うファイルを把握しておきたいときに、最初のものを使わなければなりません。これはスクリプトではよくあることです。</target>
        </trans-unit>
        <trans-unit id="ba31b6b4506414b36091cbb58f049c0003b3112c" translate="yes" xml:space="preserve">
          <source>In a regular project, we can assemble a release by simply running &lt;code&gt;mix release&lt;/code&gt;. However, we have an umbrella project, and in such cases Elixir requires some extra input from us. Let&amp;rsquo;s see what is necessary:</source>
          <target state="translated">通常のプロジェクトでは、 &lt;code&gt;mix release&lt;/code&gt; 実行するだけでリリースを組み立てることができます。ただし、包括的プロジェクトがあり、そのような場合、Elixirからの追加の入力が必要です。何が必要か見てみましょう：</target>
        </trans-unit>
        <trans-unit id="2066279752953073a6aab2adcefe389056d45238" translate="yes" xml:space="preserve">
          <source>In addition to matching the target triple, it is also important that the target has all of the system packages that your application will need at runtime. A common one is the need for OpenSSL when building an application that uses &lt;code&gt;:crypto&lt;/code&gt; or &lt;code&gt;:ssl&lt;/code&gt;, which is dynamically linked to ERTS. The other common source for native dependencies like this comes from dependencies containing NIFs (natively-implemented functions) which may expect to dynamically link to libraries they use.</source>
          <target state="translated">ターゲットトリプルを一致させることに加えて、アプリケーションが実行時に必要となるすべてのシステムパッケージをターゲットに含めることも重要です。一般的なものは、ERTSに動的にリンクされている &lt;code&gt;:crypto&lt;/code&gt; または &lt;code&gt;:ssl&lt;/code&gt; を使用するアプリケーションを構築するときにOpenSSLが必要になることです。このようなネイティブ依存関係の他の一般的なソースは、使用するライブラリに動的にリンクすることを期待できるNIF（ネイティブに実装された関数）を含む依存関係から来ています。</target>
        </trans-unit>
        <trans-unit id="a9421fd8baf899a704905f1b7b921c58ff7bb458" translate="yes" xml:space="preserve">
          <source>In addition to the Elixir file extension &lt;code&gt;.ex&lt;/code&gt;, Elixir also supports &lt;code&gt;.exs&lt;/code&gt; files for scripting. Elixir treats both files exactly the same way, the only difference is in intention. &lt;code&gt;.ex&lt;/code&gt; files are meant to be compiled while &lt;code&gt;.exs&lt;/code&gt; files are used for scripting. When executed, both extensions compile and load their modules into memory, although only &lt;code&gt;.ex&lt;/code&gt; files write their bytecode to disk in the format of &lt;code&gt;.beam&lt;/code&gt; files.</source>
          <target state="translated">Elixirファイル拡張子 &lt;code&gt;.ex&lt;/code&gt; に加えて、Elixir はスクリプト用の &lt;code&gt;.exs&lt;/code&gt; ファイルもサポートしています。Elixirは両方のファイルをまったく同じ方法で扱います。唯一の違いは意図です。 &lt;code&gt;.ex&lt;/code&gt; ファイルはスクリプト用に使用されますが、 &lt;code&gt;.exs&lt;/code&gt; ファイルはコンパイルされることを意図しています。実行すると、両方の拡張機能は、コンパイルとだけが、メモリにそのモジュールをロード &lt;code&gt;.ex&lt;/code&gt; ファイルはの形式でディスクに自分のバイトコードを書く &lt;code&gt;.beam&lt;/code&gt; のファイル。</target>
        </trans-unit>
        <trans-unit id="11490d624ce7faa621bf11120bfb3fc20a3be0c2" translate="yes" xml:space="preserve">
          <source>In addition to the built-in attributes outlined above, custom attributes may also be added. Custom attributes are expressed using the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#@/1&quot;&gt;&lt;code&gt;@/1&lt;/code&gt;&lt;/a&gt; operator followed by a valid variable name. The value given to the custom attribute must be a valid Elixir value:</source>
          <target state="translated">上で概説した組み込み属性に加えて、カスタム属性も追加できます。カスタム属性は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#@/1&quot;&gt; &lt;code&gt;@/1&lt;/code&gt; &lt;/a&gt;演算子とそれに続く有効な変数名を使用して表されます。カスタム属性に指定する値は、有効なElixir値である必要があります。</target>
        </trans-unit>
        <trans-unit id="96148bc0703e1fb4ea78297b10992f7426df74e8" translate="yes" xml:space="preserve">
          <source>In addition to the built-in attributes outlined above, custom attributes may also be added. Custom attributes are expressed using the &lt;a href=&quot;kernel#@/1&quot;&gt;&lt;code&gt;@/1&lt;/code&gt;&lt;/a&gt; operator followed by a valid variable name. The value given to the custom attribute must be a valid Elixir value:</source>
          <target state="translated">上記の組み込み属性に加えて、カスタム属性も追加できます。カスタム属性は、&lt;a href=&quot;kernel#@/1&quot;&gt; &lt;code&gt;@/1&lt;/code&gt; &lt;/a&gt;演算子とそれに続く有効な変数名を使用して表されます。カスタム属性に指定する値は、有効なElixir値である必要があります：</target>
        </trans-unit>
        <trans-unit id="3dfd563836d0d4567f592fdf1b54449f8fc77413" translate="yes" xml:space="preserve">
          <source>In addition to the keys provided by the user via &lt;a href=&quot;logger#metadata/1&quot;&gt;&lt;code&gt;Logger.metadata/1&lt;/code&gt;&lt;/a&gt;, the following extra keys are available to the &lt;code&gt;:metadata&lt;/code&gt; list:</source>
          <target state="translated">&lt;a href=&quot;logger#metadata/1&quot;&gt; &lt;code&gt;Logger.metadata/1&lt;/code&gt; &lt;/a&gt;を介してユーザーが提供するキーに加えて、次の追加のキーを &lt;code&gt;:metadata&lt;/code&gt; リストで使用できます。</target>
        </trans-unit>
        <trans-unit id="f1d0e9c42e96c43f7a51f23eb3e0a63cd08fcabb" translate="yes" xml:space="preserve">
          <source>In addition to those, a double quote inside a double-quoted string needs to be escaped as &lt;code&gt;\&quot;&lt;/code&gt;, and, analogously, a single quote inside a single-quoted char list needs to be escaped as &lt;code&gt;\'&lt;/code&gt;. Nevertheless, it is better style to change delimiters as seen above than to escape them.</source>
          <target state="translated">これらに加えて、二重引用符で囲まれた文字列内の二重引用符は &lt;code&gt;\&quot;&lt;/code&gt; としてエスケープする必要があり、同様に、単一引用符で囲まれた文字リスト内の単一引用符は &lt;code&gt;\'&lt;/code&gt; としてエスケープする必要があります。それでも、スタイルの方が優れていますデリミタをエスケープするよりも、上記のように変更します。</target>
        </trans-unit>
        <trans-unit id="2b2826ef1e2ef7d4eb0ba033cc662710c67d0f81" translate="yes" xml:space="preserve">
          <source>In addition, every protocol implementation module contains the &lt;code&gt;__impl__/1&lt;/code&gt; function. The function takes one of the following atoms:</source>
          <target state="translated">さらに、すべてのプロトコル実装モジュールには &lt;code&gt;__impl__/1&lt;/code&gt; 関数が含まれています。この関数は、次のいずれかのアトムを取ります。</target>
        </trans-unit>
        <trans-unit id="81e21312ebc75f6d03fffd3a474b80ff1f053e1d" translate="yes" xml:space="preserve">
          <source>In all of the examples above, we used binaries when writing to files. In the chapter &lt;a href=&quot;binaries-strings-and-char-lists&quot;&gt;&amp;ldquo;Binaries, strings, and charlists&amp;rdquo;&lt;/a&gt;, we mentioned how strings are made of bytes while charlists are lists with Unicode codepoints.</source>
          <target state="translated">上記のすべての例では、ファイルに書き込むときにバイナリを使用しました。&lt;a href=&quot;binaries-strings-and-char-lists&quot;&gt;「バイナリ、文字列、および文字リスト」&lt;/a&gt;の章では、文字列がバイトで構成される方法について説明しましたが、文字リストはUnicodeコードポイントを持つリストです。</target>
        </trans-unit>
        <trans-unit id="8e799b4247b90ad4aaf06f6677263f125c9b2f4f" translate="yes" xml:space="preserve">
          <source>In any case, avoid any of the following:</source>
          <target state="translated">いずれにしても、以下のようなことは避けましょう。</target>
        </trans-unit>
        <trans-unit id="1589dd45f78cf7266ba6322f20d21e370ee7f5aa" translate="yes" xml:space="preserve">
          <source>In both cases, &lt;code&gt;Stack.start_link/1&lt;/code&gt; is always invoked.</source>
          <target state="translated">どちらの場合も、 &lt;code&gt;Stack.start_link/1&lt;/code&gt; は常に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0ea2013003c5c58a5c3f717cccfc60a91074f95a" translate="yes" xml:space="preserve">
          <source>In both cases, the command-line arguments for the script or expression are available in &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#argv/0&quot;&gt;&lt;code&gt;System.argv/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">どちらの場合も、スクリプトまたは式のコマンドライン引数は&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#argv/0&quot;&gt; &lt;code&gt;System.argv/0&lt;/code&gt; で&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="91806a81fe43b48626fc4b371025096ff818c577" translate="yes" xml:space="preserve">
          <source>In case ANSI is disabled, the ANSI escape sequences are simply discarded.</source>
          <target state="translated">ANSIが無効化されている場合、ANSIエスケープシーケンスは単純に破棄されます。</target>
        </trans-unit>
        <trans-unit id="6d33c9b688f2fa1ee1c39e6a6ee8a9eef85fb236" translate="yes" xml:space="preserve">
          <source>In case a &lt;a href=&quot;#t:reducer/0&quot;&gt;&lt;code&gt;reducer/0&lt;/code&gt;&lt;/a&gt; function returns a &lt;code&gt;:suspend&lt;/code&gt; accumulator, it must be explicitly handled by the caller and never leak.</source>
          <target state="translated">&lt;a href=&quot;#t:reducer/0&quot;&gt; &lt;code&gt;reducer/0&lt;/code&gt; &lt;/a&gt;関数が &lt;code&gt;:suspend&lt;/code&gt; アキュムレーターを返す場合、それは呼び出し元によって明示的に処理され、リークすることはありません。</target>
        </trans-unit>
        <trans-unit id="02f1586eeab6e7c0484c69613b04bc3194eb4e79" translate="yes" xml:space="preserve">
          <source>In case a &lt;a href=&quot;#t:reducer/0&quot;&gt;&lt;code&gt;reducer/0&lt;/code&gt;&lt;/a&gt; function returns the &lt;code&gt;:suspend&lt;/code&gt; accumulator, the &lt;code&gt;:suspended&lt;/code&gt; tuple must be explicitly handled by the caller and never leak. In practice, this means regular enumeration functions just need to be concerned about &lt;code&gt;:done&lt;/code&gt; and &lt;code&gt;:halted&lt;/code&gt; results.</source>
          <target state="translated">&lt;a href=&quot;#t:reducer/0&quot;&gt; &lt;code&gt;reducer/0&lt;/code&gt; &lt;/a&gt;関数が &lt;code&gt;:suspend&lt;/code&gt; アキュムレーターを返す場合、 &lt;code&gt;:suspended&lt;/code&gt; タプルは呼び出し元によって明示的に処理され、リークしないようにする必要があります。実際には、これは通常の列挙関数が &lt;code&gt;:done&lt;/code&gt; と &lt;code&gt;:halted&lt;/code&gt; の結果を気にする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="3377f61918ce91a5a78e38bc72a8ef4ed3572f98" translate="yes" xml:space="preserve">
          <source>In case a direct relative path cannot be found, it returns the original path.</source>
          <target state="translated">直接の相対パスが見つからない場合は、元のパスを返します。</target>
        </trans-unit>
        <trans-unit id="6c9cc568db359a5124dd032595b36cc1734cb7b5" translate="yes" xml:space="preserve">
          <source>In case a single file is being tested, it is possible to pass one or more specific line numbers to run only those given tests:</source>
          <target state="translated">一つのファイルがテストされている場合、与えられたテストだけを実行するために、一つ以上の特定の行番号を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e8071ad6cb618eac03347482224d3c6ae15920db" translate="yes" xml:space="preserve">
          <source>In case a string must have a double-quote in itself, the double quotes must be escaped with a backslash, for example: &lt;code&gt;&quot;this is a string with \&quot;double quotes\&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">文字列自体に二重引用符が必要な場合は、二重引用符をバックスラッシュでエスケープする必要があります（例： &lt;code&gt;&quot;this is a string with \&quot;double quotes\&quot;&quot;&lt;/code&gt; です」）。</target>
        </trans-unit>
        <trans-unit id="702e65eacb180decf2c9dac0a4fdd10013882322" translate="yes" xml:space="preserve">
          <source>In case a switch &lt;code&gt;SWITCH&lt;/code&gt; is specified to have type &lt;code&gt;:boolean&lt;/code&gt;, it may be passed as &lt;code&gt;--no-SWITCH&lt;/code&gt; as well which will set the option to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">スイッチ &lt;code&gt;SWITCH&lt;/code&gt; がタイプ &lt;code&gt;:boolean&lt;/code&gt; を持つように指定されている場合、 &lt;code&gt;--no-SWITCH&lt;/code&gt; としても渡され、オプションが &lt;code&gt;false&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="888f992f5fc265705743ba6ca955221f42ebdba1" translate="yes" xml:space="preserve">
          <source>In case any entry returns &lt;code&gt;nil&lt;/code&gt;, its key will be removed and the deletion will be considered a success.</source>
          <target state="translated">エントリが &lt;code&gt;nil&lt;/code&gt; を返す場合、そのキーは削除され、削除は成功と見なされます。</target>
        </trans-unit>
        <trans-unit id="a72e1cfffefe65681b735eb6f7dbafbbce0c5ef9" translate="yes" xml:space="preserve">
          <source>In case any of the entries in the middle returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; will be returned as per the &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">任意の中間戻りのエントリの場合に &lt;code&gt;nil&lt;/code&gt; 、 &lt;code&gt;nil&lt;/code&gt; の通りに返される&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュール。</target>
        </trans-unit>
        <trans-unit id="de3e20065397014cb42d9b910dde02ad6289d161" translate="yes" xml:space="preserve">
          <source>In case any of the entries in the middle returns &lt;code&gt;nil&lt;/code&gt;, an error will be raised when trying to access it next.</source>
          <target state="translated">途中のエントリのいずれかが &lt;code&gt;nil&lt;/code&gt; を返した場合、次にアクセスしようとするとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="14f58659a0439f1a109167c635ebf2ecb21a5dc3" translate="yes" xml:space="preserve">
          <source>In case any of the keys returns &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; will be returned:</source>
          <target state="translated">任意のキーを返しますの場合 &lt;code&gt;nil&lt;/code&gt; 、 &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ffe6dece0fc6fa31895ca4664fd38ac481329ebd" translate="yes" xml:space="preserve">
          <source>In case it does exist, it is a no-op. Otherwise, it is built.</source>
          <target state="translated">存在している場合は、それがない場合です。それ以外の場合はビルドされます。</target>
        </trans-unit>
        <trans-unit id="75a8464fb2113eaca41fdf083e397d6efb34f66b" translate="yes" xml:space="preserve">
          <source>In case one wants to access the original &lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt;, it can be done by accessing &lt;code&gt;Elixir&lt;/code&gt;:</source>
          <target state="translated">元の&lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;にアクセスしたい場合は、 &lt;code&gt;Elixir&lt;/code&gt; にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="fe785d8d01b549120d0fdba2f98502200395bc4b" translate="yes" xml:space="preserve">
          <source>In case one wants to access the original &lt;a href=&quot;keyword&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt;, it can be done by accessing &lt;code&gt;Elixir&lt;/code&gt;:</source>
          <target state="translated">元の&lt;a href=&quot;keyword&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;にアクセスしたい場合は、 &lt;code&gt;Elixir&lt;/code&gt; にアクセスしてください：</target>
        </trans-unit>
        <trans-unit id="a3773025824eaaa4fbaabc9e17eece745001ea94" translate="yes" xml:space="preserve">
          <source>In case something goes wrong, you can also use &lt;a href=&quot;#exit/1&quot;&gt;&lt;code&gt;exit/1&lt;/code&gt;&lt;/a&gt; with a different reason:</source>
          <target state="translated">何か問題が発生した場合は、別の理由で&lt;a href=&quot;#exit/1&quot;&gt; &lt;code&gt;exit/1&lt;/code&gt; &lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="2fa86b82adf3327a6ba51dace9ac5f0221aed458" translate="yes" xml:space="preserve">
          <source>In case the alias is generated automatically by a macro, Elixir won't emit any warnings though, since the alias was not explicitly defined.</source>
          <target state="translated">マクロによってエイリアスが自動的に生成された場合、エイリアスが明示的に定義されていないため、Elixirは警告を発しません。</target>
        </trans-unit>
        <trans-unit id="2b98ade5811cd318aeee5332f266a7b7225f7348" translate="yes" xml:space="preserve">
          <source>In case the conversion fails, it raises an &lt;a href=&quot;https://hexdocs.pm/elixir/UnicodeConversionError.html&quot;&gt;&lt;code&gt;UnicodeConversionError&lt;/code&gt;&lt;/a&gt;. If a string is given, it returns the string itself.</source>
          <target state="translated">変換が失敗した場合、&lt;a href=&quot;https://hexdocs.pm/elixir/UnicodeConversionError.html&quot;&gt; &lt;code&gt;UnicodeConversionError&lt;/code&gt; &lt;/a&gt;が発生します。文字列が指定されている場合は、文字列自体を返します。</target>
        </trans-unit>
        <trans-unit id="c438ea8f1248a5429d6990102993e9d6dbcfa2ca" translate="yes" xml:space="preserve">
          <source>In case the conversion fails, it raises an &lt;a href=&quot;unicodeconversionerror&quot;&gt;&lt;code&gt;UnicodeConversionError&lt;/code&gt;&lt;/a&gt;. If a string is given, it returns the string itself.</source>
          <target state="translated">変換が失敗した場合は、&lt;a href=&quot;unicodeconversionerror&quot;&gt; &lt;code&gt;UnicodeConversionError&lt;/code&gt; &lt;/a&gt;が発生します。文字列を指定すると、文字列自体が返されます。</target>
        </trans-unit>
        <trans-unit id="a15baa5f03723748dcf10b5cb52af46c921885dc" translate="yes" xml:space="preserve">
          <source>In case the file doesn't exist, an error is raised.</source>
          <target state="translated">ファイルが存在しない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="9aefc659b37d49c39922094af9efb51756248b09" translate="yes" xml:space="preserve">
          <source>In case the import is generated automatically by a macro, Elixir won't emit any warnings though, since the import was not explicitly defined.</source>
          <target state="translated">マクロによってインポートが自動的に生成された場合、インポートが明示的に定義されていないため、Elixirは警告を発しません。</target>
        </trans-unit>
        <trans-unit id="8f7982ac3a103bc11a1e2ceb070d36fd43cc0956" translate="yes" xml:space="preserve">
          <source>In case the task process dies, the current process will exit with the same reason as the task.</source>
          <target state="translated">タスクプロセスが終了した場合、現在のプロセスはタスクと同じ理由で終了します。</target>
        </trans-unit>
        <trans-unit id="5028298a69062b4bcef1005e365f72fcb9b4bd2c" translate="yes" xml:space="preserve">
          <source>In case the test crashes, you will see a report as follows:</source>
          <target state="translated">テストがクラッシュした場合、以下のようなレポートが表示されます。</target>
        </trans-unit>
        <trans-unit id="899b34a899719bbd8b066e45019119b52779572b" translate="yes" xml:space="preserve">
          <source>In case the value you want to interpolate cannot be converted to a string, because it doesn't have an human textual representation, a protocol error will be raised.</source>
          <target state="translated">補間したい値が文字列に変換できない場合、人間のテキスト表現がないため、プロトコルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="94805569146261c99e1aba00cef7b14d9f604927" translate="yes" xml:space="preserve">
          <source>In case there are no config providers, it doesn't change &lt;code&gt;sys_config&lt;/code&gt;.</source>
          <target state="translated">構成プロバイダーがない場合、 &lt;code&gt;sys_config&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="63f761d55661dfac505485cc96ef395b1517c85a" translate="yes" xml:space="preserve">
          <source>In case there is an error while your structure is being inspected, Elixir will raise an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; error and will automatically fall back to a raw representation for printing the structure.</source>
          <target state="translated">構造の検査中にエラーが発生した場合、Elixirは&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;エラーを発生させ、構造を印刷するための生の表現に自動的にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="fd386531e2486b3f99bcfc36b0d8da5b224c20a5" translate="yes" xml:space="preserve">
          <source>In case there is an error while your structure is being inspected, Elixir will raise an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; error and will automatically fall back to a raw representation for printing the structure.</source>
          <target state="translated">構造の検査中にエラーが発生した場合、Elixirは&lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;エラーを発生させ、構造を印刷するための生の表現に自動的にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="05066096207f29449b516520b228a698f4b4f25c" translate="yes" xml:space="preserve">
          <source>In case there is no such message, the current process hangs until a message arrives or waits until a given timeout value.</source>
          <target state="translated">そのようなメッセージがない場合、メッセージが到着するまで現在のプロセスはハングアップするか、指定されたタイムアウト値まで待ちます。</target>
        </trans-unit>
        <trans-unit id="4d02c8c3170ba0952169ceddc222a7d17ada7459" translate="yes" xml:space="preserve">
          <source>In case things are not working as expected, please include as much information as you can in your report, for example: your Elixir version, the code snippet and the error message alongside the error stacktrace. Use sites like &lt;a href=&quot;https://gist.github.com/&quot;&gt;Gist&lt;/a&gt; to paste this information.</source>
          <target state="translated">期待どおりに機能しない場合は、レポートにできる限り多くの情報を含めてください。たとえば、Elixirのバージョン、コードスニペット、エラーメッセージ、エラースタックトレースのほかに、&lt;a href=&quot;https://gist.github.com/&quot;&gt;Gist&lt;/a&gt;などのサイトを使用して、この情報を貼り付けます。</target>
        </trans-unit>
        <trans-unit id="2d3cb03ba7258afff951799e09542865bc33c540" translate="yes" xml:space="preserve">
          <source>In case you are manually compiling protocols or building releases, you need to take the generated protocols into account. This can be done with:</source>
          <target state="translated">手動でプロトコルをコンパイルしたり、リリースをビルドしたりする場合は、生成されたプロトコルを考慮に入れる必要があります。これは以下の方法で行うことができます。</target>
        </trans-unit>
        <trans-unit id="03bcf5fae6ba2e97dc4c9b6b526c4e8e1ed5a2fc" translate="yes" xml:space="preserve">
          <source>In case you need to configure a process, the options should be passed when starting that process.</source>
          <target state="translated">プロセスを設定する必要がある場合は、そのプロセスを起動する際にオプションを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="402b42bb4e09e34f8b56390600a6d4385db6ff6a" translate="yes" xml:space="preserve">
          <source>In case you need to work with bytes, take a look at the &lt;a href=&quot;http://www.erlang.org/doc/man/binary.html&quot;&gt;&lt;code&gt;:binary&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">バイトで作業する必要がある場合は、&lt;a href=&quot;http://www.erlang.org/doc/man/binary.html&quot;&gt; &lt;code&gt;:binary&lt;/code&gt; モジュールをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ccc59a70627542b407463a1a5ab11815a7059a36" translate="yes" xml:space="preserve">
          <source>In case you want to automatically load &lt;strong&gt;and start&lt;/strong&gt; all of &lt;code&gt;app&lt;/code&gt;'s dependencies, see &lt;a href=&quot;#ensure_all_started/2&quot;&gt;&lt;code&gt;ensure_all_started/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; のすべての依存関係を自動的にロード&lt;strong&gt;して開始&lt;/strong&gt;する場合は、&lt;a href=&quot;#ensure_all_started/2&quot;&gt; &lt;code&gt;ensure_all_started/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f681ed2c3aa6661367fb62449b5900050c12c47" translate="yes" xml:space="preserve">
          <source>In case you want to provide some existing functionality to the user module, please define it in a module which will be imported accordingly; for example, &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; doesn't define the &lt;code&gt;test/3&lt;/code&gt; macro in the module that calls &lt;code&gt;use ExUnit.Case&lt;/code&gt;, but it defines &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html#test/3&quot;&gt;&lt;code&gt;ExUnit.Case.test/3&lt;/code&gt;&lt;/a&gt; and just imports that into the caller when used.</source>
          <target state="translated">ユーザーモジュールに既存の機能を提供する場合は、それに応じてインポートされるモジュールで定義してください。例えば、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; は&lt;/a&gt;定義していない &lt;code&gt;test/3&lt;/code&gt; コールがそのモジュール内のマクロを &lt;code&gt;use ExUnit.Case&lt;/code&gt; 、それは定義&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html#test/3&quot;&gt; &lt;code&gt;ExUnit.Case.test/3&lt;/code&gt; &lt;/a&gt;使用発信者へことだけ輸入。</target>
        </trans-unit>
        <trans-unit id="8e67d2f3d283f6f03fc8ad3aba714edbb893d393" translate="yes" xml:space="preserve">
          <source>In case you were using the deprecated &lt;code&gt;:simple_one_for_one&lt;/code&gt; strategy from the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module, you can migrate to the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; in few steps.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールから非推奨の &lt;code&gt;:simple_one_for_one&lt;/code&gt; ストラテジーを使用していた場合は、いくつかの手順で&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;に移行できます。</target>
        </trans-unit>
        <trans-unit id="3ff348aca712691651b4c435346c7c87f48a03c6" translate="yes" xml:space="preserve">
          <source>In case you were using the deprecated &lt;code&gt;:simple_one_for_one&lt;/code&gt; strategy from the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module, you can migrate to the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; in few steps.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールから非推奨の &lt;code&gt;:simple_one_for_one&lt;/code&gt; 戦略を使用していた場合は、いくつかの手順で&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;に移行できます。</target>
        </trans-unit>
        <trans-unit id="aec959cd2637331d18fa672f762e0b85e128fa1c" translate="yes" xml:space="preserve">
          <source>In code, function specs are written with the &lt;code&gt;@spec&lt;/code&gt; attribute, typically placed immediately before the function definition. Specs can describe both public and private functions. The function name and the number of arguments used in the &lt;code&gt;@spec&lt;/code&gt; attribute must match the function it describes.</source>
          <target state="translated">コードでは、関数仕様は &lt;code&gt;@spec&lt;/code&gt; 属性を使用して記述され、通常は関数定義の直前に配置されます。仕様では、パブリック関数とプライベート関数の両方を記述できます。 &lt;code&gt;@spec&lt;/code&gt; 属性で使用される関数名と引数の数は、それが記述する関数と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3fa04a38e1468a79c7262b85ac96321cc9efef6" translate="yes" xml:space="preserve">
          <source>In contrast to keyword lists, maps are very useful with pattern matching. When a map is used in a pattern, it will always match on a subset of the given value:</source>
          <target state="translated">キーワードリストとは対照的に、マップはパターンマッチングで非常に便利です。マップがパターンで使用されると、マップは常に指定された値のサブセットにマッチします。</target>
        </trans-unit>
        <trans-unit id="1a0cd3de6db0a42db7660ce1f70c833f42728634" translate="yes" xml:space="preserve">
          <source>In contrast, the values for the called functions describe those functions, but in the context of the marked function. For example, the last row means that &lt;code&gt;Mod.called2/0&lt;/code&gt; was called once by &lt;code&gt;Mod.some_function/0&lt;/code&gt;, and in that case the total time spent in the function was 50ms.</source>
          <target state="translated">対照的に、呼び出された関数の値はそれらの関数を説明しますが、マークされた関数のコンテキスト内です。たとえば、最後の行は &lt;code&gt;Mod.called2/0&lt;/code&gt; がMod.some_function / 0によって一度呼び出されたことを意味し、その場合、関数で費やされた合計時間は &lt;code&gt;Mod.some_function/0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1bd204212246b87557a18b94547a4a49f3e0882e" translate="yes" xml:space="preserve">
          <source>In daemon mode, the system is started on the background via &lt;a href=&quot;http://erlang.org/doc/man/run_erl.html&quot;&gt;run_erl&lt;/a&gt;. You may also want to enable &lt;a href=&quot;http://erlang.org/doc/man/heart.html&quot;&gt;heart&lt;/a&gt; in daemon mode so it automatically restarts the system in case of crashes. See the generated &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; file.</source>
          <target state="translated">デーモンモードでは、システムは&lt;a href=&quot;http://erlang.org/doc/man/run_erl.html&quot;&gt;run_erl&lt;/a&gt;を介してバックグラウンドで起動されます。デーモンモードで&lt;a href=&quot;http://erlang.org/doc/man/heart.html&quot;&gt;heart&lt;/a&gt;を有効にして、クラッシュした場合にシステムを自動的に再起動することもできます。生成された &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="fc4add0dde66d9d0296a0654de0562024d8f9f79" translate="yes" xml:space="preserve">
          <source>In fact, &lt;a href=&quot;erlangerror&quot;&gt;&lt;code&gt;ErlangError&lt;/code&gt;&lt;/a&gt; can be used to rescue any error that is not a proper Elixir error. For example, it can be used to rescue the earlier &lt;code&gt;:badarg&lt;/code&gt; error too, prior to transformation:</source>
          <target state="translated">実際、&lt;a href=&quot;erlangerror&quot;&gt; &lt;code&gt;ErlangError&lt;/code&gt; &lt;/a&gt;は、適切なElixirエラーではないエラーを救うために使用できます。たとえば、変換の前に、以前の &lt;code&gt;:badarg&lt;/code&gt; エラーも救うために使用できます。</target>
        </trans-unit>
        <trans-unit id="3fc62d3ceab839ba2b910c33a7d8e5bd0aaee7f5" translate="yes" xml:space="preserve">
          <source>In fact, &lt;a href=&quot;https://hexdocs.pm/elixir/ErlangError.html&quot;&gt;&lt;code&gt;ErlangError&lt;/code&gt;&lt;/a&gt; can be used to rescue any error that is not a proper Elixir error. For example, it can be used to rescue the earlier &lt;code&gt;:badarg&lt;/code&gt; error too, prior to transformation:</source>
          <target state="translated">実際、&lt;a href=&quot;https://hexdocs.pm/elixir/ErlangError.html&quot;&gt; &lt;code&gt;ErlangError&lt;/code&gt; &lt;/a&gt;は、適切なElixirエラーではないエラーをレスキューするために使用できます。たとえば、変換前に、以前の &lt;code&gt;:badarg&lt;/code&gt; エラーをレスキューするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="0899943a58fd70e4f3d0ccf56e136c5b02dd5f31" translate="yes" xml:space="preserve">
          <source>In fact, connecting to remote shells is so common that we provide a shortcut via the command line as well:</source>
          <target state="translated">実際、リモートシェルへの接続は非常に一般的なので、コマンドラインからのショートカットも提供しています。</target>
        </trans-unit>
        <trans-unit id="86d8ddd11e7d11d4d1da78d64c3d55a307dc74a3" translate="yes" xml:space="preserve">
          <source>In fact, let&amp;rsquo;s open up &lt;code&gt;lib/kv_server/application.ex&lt;/code&gt;:</source>
          <target state="translated">実際、 &lt;code&gt;lib/kv_server/application.ex&lt;/code&gt; を開いてみましょう：</target>
        </trans-unit>
        <trans-unit id="61139d4b1bbde59322a4c8bca7a0561709d9841c" translate="yes" xml:space="preserve">
          <source>In fact, the &lt;code&gt;:bind_quoted&lt;/code&gt; option is recommended every time one desires to inject a value into the quote.</source>
          <target state="translated">実際、 &lt;code&gt;:bind_quoted&lt;/code&gt; オプションは、クォートに値を挿入したいときは常に推奨されます。</target>
        </trans-unit>
        <trans-unit id="e63bd9e9e19b982359b9cda4d5fcbeea34909a27" translate="yes" xml:space="preserve">
          <source>In fact, this pattern is so common that most of the times you will want to use the &lt;code&gt;bind_quoted&lt;/code&gt; option with &lt;a href=&quot;#quote/2&quot;&gt;&lt;code&gt;quote/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">実際、このパターンは非常に一般的であるため、ほとんどの場合、 &lt;code&gt;bind_quoted&lt;/code&gt; &lt;a href=&quot;#quote/2&quot;&gt; &lt;code&gt;quote/2&lt;/code&gt; &lt;/a&gt; bind_quotedオプションを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="be090f2c7b49fa10f6982f61cbff56e2c1ea6990" translate="yes" xml:space="preserve">
          <source>In general, &lt;code&gt;underscore&lt;/code&gt; can be thought of as the reverse of &lt;code&gt;camelize&lt;/code&gt;, however, in some cases formatting may be lost:</source>
          <target state="translated">一般的に、 &lt;code&gt;underscore&lt;/code&gt; は &lt;code&gt;camelize&lt;/code&gt; の逆と考えることができますが、場合によってはフォーマットが失われることがあります。</target>
        </trans-unit>
        <trans-unit id="6a3e2a29096c65e2eb89f937c17a4004e7ef7444" translate="yes" xml:space="preserve">
          <source>In general, a developer should use the former in case they want to react if the file does not exist. The latter should be used when the developer expects their software to fail in case the file cannot be read (i.e. it is literally an exception).</source>
          <target state="translated">一般的に、開発者はファイルが存在しない場合に対応したい場合に前者を使うべきです。後者は、ファイルが読めない場合にソフトウェアが失敗することを想定している場合に使用するべきです (つまり、文字通り例外です)。</target>
        </trans-unit>
        <trans-unit id="d16c9ac73c5397997e3e76ab325334e002852804" translate="yes" xml:space="preserve">
          <source>In general, a developer will want to use the general &lt;code&gt;assert&lt;/code&gt; macro in tests. This macro introspects your code and provides good reporting whenever there is a failure. For example, &lt;code&gt;assert some_fun() == 10&lt;/code&gt; will fail (assuming &lt;code&gt;some_fun()&lt;/code&gt; returns &lt;code&gt;13&lt;/code&gt;):</source>
          <target state="translated">一般に、開発者はテストで一般的な &lt;code&gt;assert&lt;/code&gt; マクロを使用する必要があります。このマクロはコードをイントロスペクトし、障害が発生した場合はいつでも適切なレポートを提供します。たとえば、 &lt;code&gt;assert some_fun() == 10&lt;/code&gt; をアサートすると失敗し &lt;code&gt;some_fun()&lt;/code&gt; が &lt;code&gt;13&lt;/code&gt; を返すと仮定）。</target>
        </trans-unit>
        <trans-unit id="9be20cb8cf2a5e21e25e5b415ec975c67912ed9d" translate="yes" xml:space="preserve">
          <source>In general, doctests are not recommended when your code examples contain side effects. For example, if a doctest prints to standard output, doctest will not try to capture the output.</source>
          <target state="translated">一般的に、doctestはコード例に副作用がある場合にはお勧めできません。例えば、doctestが標準出力に出力する場合、doctestは出力をキャプチャしようとしません。</target>
        </trans-unit>
        <trans-unit id="c3d41e104bfcea8fdabed0cd450572fc2e4bac9f" translate="yes" xml:space="preserve">
          <source>In general, the functions in this module rely on the Unicode Standard, but do not contain any of the locale specific behaviour.</source>
          <target state="translated">一般的に、このモジュールの関数は Unicode 標準に依存していますが、ロケール固有の動作は含まれていません。</target>
        </trans-unit>
        <trans-unit id="1b51681509b0cc1251035f9253bdae711f905e3e" translate="yes" xml:space="preserve">
          <source>In general, the functions in this module rely on the Unicode Standard, but do not contain any of the locale specific behaviour. More information about graphemes can be found in the &lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex #29&lt;/a&gt;.</source>
          <target state="translated">一般に、このモジュールの関数はUnicode標準に依存していますが、ロケール固有の動作は含まれていません。書記素の詳細については、&lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex＃29を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9c9716a12a8a55aca30fe284f4ffccd27a063bec" translate="yes" xml:space="preserve">
          <source>In general, the tuples above are structured according to the following format:</source>
          <target state="translated">一般的に、上記のタプルは、以下のような形式で構成されています。</target>
        </trans-unit>
        <trans-unit id="6de751c2f24f5d6947a334c2b635bc5f4ec33c5a" translate="yes" xml:space="preserve">
          <source>In general, when the keyword list is the last argument of a function, the square brackets are optional.</source>
          <target state="translated">一般に、キーワードリストが関数の最後の引数である場合、角括弧はオプションです。</target>
        </trans-unit>
        <trans-unit id="aa567762586986c74d465d0aa8d43a9b014b6cd4" translate="yes" xml:space="preserve">
          <source>In guards, when functions would normally raise exceptions, they cause the guard to fail instead.</source>
          <target state="translated">ガードでは、関数が通常例外を発生させるときに、代わりにガードが失敗する原因となります。</target>
        </trans-unit>
        <trans-unit id="6bab1cb15297331e40b3f50701fea2260e1dfe89" translate="yes" xml:space="preserve">
          <source>In guards, when functions would normally raise exceptions, they cause the guard to fail instead. For example, the &lt;a href=&quot;kernel#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; function only works with lists. If we use it with anything else, a runtime error is raised:</source>
          <target state="translated">ガードでは、関数が通常は例外を発生させると、代わりにガードが失敗します。たとえば、&lt;a href=&quot;kernel#length/1&quot;&gt; &lt;code&gt;length/1&lt;/code&gt; &lt;/a&gt;関数はリストでのみ機能します。それ以外のものと一緒に使用すると、ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a530de2468aeae84b5f9a5ab3d0835429e502343" translate="yes" xml:space="preserve">
          <source>In light of this observation, we should consider moving to another supervision strategy. The two other candidates are &lt;code&gt;:one_for_all&lt;/code&gt; and &lt;code&gt;:rest_for_one&lt;/code&gt;. A supervisor using the &lt;code&gt;:rest_for_one&lt;/code&gt; strategy will kill and restart child processes which were started &lt;em&gt;after&lt;/em&gt; the crashed child. In this case, we would want &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; to terminate if &lt;code&gt;KV.Registry&lt;/code&gt; terminates. This would require the bucket supervisor to be placed after the registry which violates the ordering constraints we have established two paragraphs above.</source>
          <target state="translated">この観察に照らして、別の監督戦略への移行を検討する必要があります。他の2つの候補は &lt;code&gt;:one_for_all&lt;/code&gt; と &lt;code&gt;:rest_for_one&lt;/code&gt; です。 &lt;code&gt;:rest_for_one&lt;/code&gt; 戦略を使用するスーパーバイザは、クラッシュした子の&lt;em&gt;後&lt;/em&gt;に開始さ&lt;em&gt;れ&lt;/em&gt;た子プロセスを強制終了して再起動します。この場合、 &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; が終了した場合に &lt;code&gt;KV.Registry&lt;/code&gt; を終了する必要があります。これには、上記の2つの段落で設定した順序の制約に違反するレジストリの後にバケット監視プログラムを配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="505de6a8a3338b2af34fda74ec05eeff90a625d9" translate="yes" xml:space="preserve">
          <source>In macro code, the bang on &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#alias!/1&quot;&gt;&lt;code&gt;Kernel.alias!/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#var!/2&quot;&gt;&lt;code&gt;Kernel.var!/2&lt;/code&gt;&lt;/a&gt; signifies that &lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html#macro-hygiene&quot;&gt;macro hygiene&lt;/a&gt; is set aside.</source>
          <target state="translated">マクロコードでは、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#alias!/1&quot;&gt; &lt;code&gt;Kernel.alias!/1&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#var!/2&quot;&gt; &lt;code&gt;Kernel.var!/2&lt;/code&gt; &lt;/a&gt;の強打は、&lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html#macro-hygiene&quot;&gt;マクロの衛生状態&lt;/a&gt;が確保されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="287c5e7fdc75892fe61a19be625743d753001a1c" translate="yes" xml:space="preserve">
          <source>In macro code, the bang on &lt;a href=&quot;kernel#alias!/1&quot;&gt;&lt;code&gt;Kernel.alias!/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#var!/2&quot;&gt;&lt;code&gt;Kernel.var!/2&lt;/code&gt;&lt;/a&gt; signifies that &lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html#macros-hygiene&quot;&gt;macro hygiene&lt;/a&gt; is set aside.</source>
          <target state="translated">マクロコードでは、&lt;a href=&quot;kernel#alias!/1&quot;&gt; &lt;code&gt;Kernel.alias!/1&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;kernel#var!/2&quot;&gt; &lt;code&gt;Kernel.var!/2&lt;/code&gt; &lt;/a&gt;の強打は、&lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html#macros-hygiene&quot;&gt;マクロの衛生状態&lt;/a&gt;が回避されていることを示します。</target>
        </trans-unit>
        <trans-unit id="32bcee841524dde12cdf73859245e9378a9b1abe" translate="yes" xml:space="preserve">
          <source>In many cases it is more convenient to pass the expected value to &lt;a href=&quot;#raise/2&quot;&gt;&lt;code&gt;raise/2&lt;/code&gt;&lt;/a&gt; and generate the message in the &lt;a href=&quot;exception#c:exception/1&quot;&gt;&lt;code&gt;Exception.exception/1&lt;/code&gt;&lt;/a&gt; callback:</source>
          <target state="translated">多くの場合、期待される値を&lt;a href=&quot;#raise/2&quot;&gt; &lt;code&gt;raise/2&lt;/code&gt; &lt;/a&gt;に渡し、&lt;a href=&quot;exception#c:exception/1&quot;&gt; &lt;code&gt;Exception.exception/1&lt;/code&gt; &lt;/a&gt;コールバックでメッセージを生成する方が便利です。</target>
        </trans-unit>
        <trans-unit id="b6d866c1d491de63fc794b51b1fe651b6b2cf7a2" translate="yes" xml:space="preserve">
          <source>In many cases it is more convenient to pass the expected value to &lt;a href=&quot;#raise/2&quot;&gt;&lt;code&gt;raise/2&lt;/code&gt;&lt;/a&gt; and generate the message in the &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:exception/1&quot;&gt;&lt;code&gt;Exception.exception/1&lt;/code&gt;&lt;/a&gt; callback:</source>
          <target state="translated">多くの場合、期待値を&lt;a href=&quot;#raise/2&quot;&gt; &lt;code&gt;raise/2&lt;/code&gt; &lt;/a&gt;に渡して、&lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html#c:exception/1&quot;&gt; &lt;code&gt;Exception.exception/1&lt;/code&gt; &lt;/a&gt;コールバックでメッセージを生成する方が便利です。</target>
        </trans-unit>
        <trans-unit id="19dc1fd7cd1d8b39b9ff5dace65dcd36cc88f10b" translate="yes" xml:space="preserve">
          <source>In many cases, we can take advantage of this. In the code above, we used &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt;&lt;code&gt;tuple_size/1&lt;/code&gt;&lt;/a&gt; to both check that the given value is a tuple &lt;em&gt;and&lt;/em&gt; check its size (instead of using &lt;code&gt;is_tuple(something) and tuple_size(something) == 2&lt;/code&gt;).</source>
          <target state="translated">多くの場合、これを利用できます。上記のコードでは、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt; &lt;code&gt;tuple_size/1&lt;/code&gt; &lt;/a&gt;を使用して、指定された値がタプルであること&lt;em&gt;を&lt;/em&gt;確認し、そのサイズ&lt;em&gt;を&lt;/em&gt;確認しました（ &lt;code&gt;is_tuple(something) and tuple_size(something) == 2&lt;/code&gt; を使用する代わりに）。</target>
        </trans-unit>
        <trans-unit id="f3a407dd1ba9629c2d87378f7214d938dbbf397b" translate="yes" xml:space="preserve">
          <source>In many cases, we can take advantage of this. In the code above, we used &lt;a href=&quot;kernel#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; to both check that the given thing is a list &lt;em&gt;and&lt;/em&gt; check some properties of its length (instead of using &lt;code&gt;is_list(something) and length(something) &amp;gt; 0&lt;/code&gt;).</source>
          <target state="translated">多くの場合、これを利用できます。上記のコードでは、&lt;a href=&quot;kernel#length/1&quot;&gt; &lt;code&gt;length/1&lt;/code&gt; &lt;/a&gt;を使用して、指定されたものがリストであること&lt;em&gt;を&lt;/em&gt;確認し、その長さのいくつかのプロパティを確認し &lt;code&gt;is_list(something) and length(something) &amp;gt; 0&lt;/code&gt; を使用する代わりに）。</target>
        </trans-unit>
        <trans-unit id="1718d61cb1f8d442d32bbf909dd936aa49ffeb46" translate="yes" xml:space="preserve">
          <source>In many functional programming languages, it is common to use a list of 2-item tuples as the representation of a key-value data structure. In Elixir, when we have a list of tuples and the first item of the tuple (i.e. the key) is an atom, we call it a keyword list:</source>
          <target state="translated">多くの関数型プログラミング言語では、2項目のタプルのリストをキー値データ構造の表現として使用するのが一般的です。Elixirでは、タプルのリストがあり、タプルの最初の項目(キー)がアトムである場合、これをキーワードリストと呼びます。</target>
        </trans-unit>
        <trans-unit id="68e23cbb5429660e2faf1806ef4a612c49708bf4" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt; is enough. &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; must be used in rare cases, usually involving macros that need to invoke a module for callback information.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;で十分です。&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;は、通常、コールバック情報のためにモジュールを呼び出す必要があるマクロを含む、まれなケースで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="423cb3333a43148ea91fc3b7a37efcd42c886681" translate="yes" xml:space="preserve">
          <source>In order for the cache mechanism to work, the created ETS table needs to have access &lt;code&gt;:protected&lt;/code&gt; (the default), so all clients can read from it, while only the &lt;code&gt;KV.Registry&lt;/code&gt; process writes to it. We have also set &lt;code&gt;read_concurrency: true&lt;/code&gt; when starting the table, optimizing the table for the common scenario of concurrent read operations.</source>
          <target state="translated">キャッシュメカニズムを機能させるには、作成されたETSテーブルに &lt;code&gt;:protected&lt;/code&gt; （デフォルト）のアクセス権が必要です。これにより、すべてのクライアントがテーブルから読み取ることができ、 &lt;code&gt;KV.Registry&lt;/code&gt; プロセスのみが書き込みを行うことができます。また、テーブルの開始時に &lt;code&gt;read_concurrency: true&lt;/code&gt; 設定し、同時読み取り操作の一般的なシナリオに合わせてテーブルを最適化します。</target>
        </trans-unit>
        <trans-unit id="c81c6a20ae394a892047f71306226257ed4ae14b" translate="yes" xml:space="preserve">
          <source>In order to be loaded, an &lt;code&gt;.app&lt;/code&gt; file must be in the load paths. All &lt;code&gt;:included_applications&lt;/code&gt; will also be loaded.</source>
          <target state="translated">ロードするには、 &lt;code&gt;.app&lt;/code&gt; ファイルがロードパスにある必要があります。すべての &lt;code&gt;:included_applications&lt;/code&gt; もロードされます。</target>
        </trans-unit>
        <trans-unit id="0ce310cabbc38fde237e6f7456d065921f47f408" translate="yes" xml:space="preserve">
          <source>In order to better understand how macros work, let&amp;rsquo;s create a new module where we are going to implement &lt;code&gt;unless&lt;/code&gt;, which does the opposite of &lt;code&gt;if&lt;/code&gt;, as a macro and as a function:</source>
          <target state="translated">より良い方法をマクロの仕事を理解するためには、我々が実装しようとしている新しいモジュールを作成しましょう &lt;code&gt;unless&lt;/code&gt; の反対行い、 &lt;code&gt;if&lt;/code&gt; 、マクロとして機能などを：</target>
        </trans-unit>
        <trans-unit id="167262643fd2c56cb15474799a3fefbbc20d320a" translate="yes" xml:space="preserve">
          <source>In order to build a variable, a context is expected. Most of the times, in order to preserve hygiene, the context must be &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">変数を作成するには、コンテキストが必要です。ほとんどの場合、衛生状態を維持するために、コンテキストは&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="98bbe9c7dc0c95fe1893b767af4a2559d441e9f7" translate="yes" xml:space="preserve">
          <source>In order to build a variable, a context is expected. Most of the times, in order to preserve hygiene, the context must be &lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">変数を作成するには、コンテキストが必要です。ほとんどの場合、衛生状態を維持するには、コンテキストは&lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="09c48209d831c8b2ec6ba4ec948897b23f18046a" translate="yes" xml:space="preserve">
          <source>In order to build our key-value application, we are going to use three main tools:</source>
          <target state="translated">キーバリューアプリケーションを構築するために、3つの主要なツールを使用します。</target>
        </trans-unit>
        <trans-unit id="9a8e911427746c64d6627a4cd13981382e8cbad5" translate="yes" xml:space="preserve">
          <source>In order to compare more than two clauses, the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#cond/1&quot;&gt;&lt;code&gt;cond/1&lt;/code&gt;&lt;/a&gt; macro has to be used.</source>
          <target state="translated">3つ以上の句を比較するには、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#cond/1&quot;&gt; &lt;code&gt;cond/1&lt;/code&gt; &lt;/a&gt;マクロを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="db1ca29d2377c1f8fa9329bcdb6aca022dc1f156" translate="yes" xml:space="preserve">
          <source>In order to compare more than two clauses, the &lt;a href=&quot;kernel.specialforms#cond/1&quot;&gt;&lt;code&gt;cond/1&lt;/code&gt;&lt;/a&gt; macro has to be used.</source>
          <target state="translated">3つ以上の句を比較するには、&lt;a href=&quot;kernel.specialforms#cond/1&quot;&gt; &lt;code&gt;cond/1&lt;/code&gt; &lt;/a&gt;マクロを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bdbf00ad68adfada8cf0d80c6af387a4904e12d" translate="yes" xml:space="preserve">
          <source>In order to configure Mix, the module that &lt;code&gt;use&lt;/code&gt;s &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Mix.Project&lt;/code&gt;&lt;/a&gt; should export a &lt;code&gt;project/0&lt;/code&gt; function that returns a keyword list representing configuration for the project.</source>
          <target state="translated">Mixを構成するには、s &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Mix.Project&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;use&lt;/code&gt; するモジュールが、プロジェクトの構成を表すキーワードリストを返す &lt;code&gt;project/0&lt;/code&gt; 関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="6eb392bb5990ef3fcaeb5fa0f99e17c04d60d3ab" translate="yes" xml:space="preserve">
          <source>In order to continue evolving the language without introducing breaking changes, Elixir will rely on deprecations to demote certain practices and promote new ones. Our deprecation policy is outlined in the &lt;a href=&quot;#deprecations&quot;&gt;&quot;Deprecations&quot; section&lt;/a&gt;.</source>
          <target state="translated">Elixirは、重大な変更を導入せずに言語を進化させ続けるために、非推奨に依存して特定のプラクティスを降格し、新しいプラクティスを推進します。Googleのサポート終了ポリシーについては、&lt;a href=&quot;#deprecations&quot;&gt;「&lt;/a&gt;サポート終了」セクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="642f4f188110996b3a0b6c3fdce8b893ead2d9fa" translate="yes" xml:space="preserve">
          <source>In order to cope with code loading in development, protocols in Elixir provide a slow implementation of protocol dispatching specific to development.</source>
          <target state="translated">開発時のコードロードに対処するために、Elixirのプロトコルは開発に特化したプロトコルディスパッチの遅い実装を提供しています。</target>
        </trans-unit>
        <trans-unit id="6a2b5841e9d7864def29c3c36d34a45ef5565969" translate="yes" xml:space="preserve">
          <source>In order to create our own modules in Elixir, we use the &lt;code&gt;defmodule&lt;/code&gt; macro. We use the &lt;code&gt;def&lt;/code&gt; macro to define functions in that module:</source>
          <target state="translated">Elixirで独自のモジュールを作成するには、 &lt;code&gt;defmodule&lt;/code&gt; マクロを使用します。 &lt;code&gt;def&lt;/code&gt; マクロを使用して、そのモジュールで関数を定義します。</target>
        </trans-unit>
        <trans-unit id="2db428412e028f480fb253824aa4dbe3e8772fd9" translate="yes" xml:space="preserve">
          <source>In order to facilitate meaningful communication between computers across multiple languages, a standard is required so that the ones and zeros on one machine mean the same thing when they are transmitted to another. The &lt;a href=&quot;https://unicode.org/standard/standard.html&quot;&gt;Unicode Standard&lt;/a&gt; acts as an official registry of virtually all the characters we know: this includes characters from classical and historical texts, emoji, and formatting and control characters as well.</source>
          <target state="translated">複数の言語にわたるコンピューター間の有意義な通信を容易にするために、あるマシンの1と0が別のマシンに送信されるときに同じことを意味するように、標準が必要です。&lt;a href=&quot;https://unicode.org/standard/standard.html&quot;&gt;Unicode標準は、&lt;/a&gt;私たちが知っている事実上すべての文字の正式なレジストリとして機能：これは、同様に、古典的、歴史的なテキストから文字、絵文字、および書式設定や制御文字が含まれています。</target>
        </trans-unit>
        <trans-unit id="4adfde6fe98ff6cd24536d794e886a1f37546977" translate="yes" xml:space="preserve">
          <source>In order to facilitate software reuse, Elixir provides three directives (&lt;code&gt;alias&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt;) plus a macro called &lt;code&gt;use&lt;/code&gt; summarized below:</source>
          <target state="translated">ソフトウェアの再利用を容易にするために、Elixirは3つのディレクティブ（ &lt;code&gt;alias&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; および &lt;code&gt;import&lt;/code&gt; ）と、以下に要約されている &lt;code&gt;use&lt;/code&gt; というマクロを提供しています。</target>
        </trans-unit>
        <trans-unit id="06a700b11907ab62d5a4a0a6df97c7759ea5d0ae" translate="yes" xml:space="preserve">
          <source>In order to finish our &lt;code&gt;TestCase&lt;/code&gt; implementation, we need to be able to access all defined test cases. One way of doing this is by retrieving the tests at runtime via &lt;code&gt;__MODULE__.__info__(:functions)&lt;/code&gt;, which returns a list of all functions in a given module. However, considering that we may want to store more information about each test besides the test name, a more flexible approach is required.</source>
          <target state="translated">&lt;code&gt;TestCase&lt;/code&gt; の実装を完了するには、定義されたすべてのテストケースにアクセスできる必要があります。これを行う1つの方法は、 &lt;code&gt;__MODULE__.__info__(:functions)&lt;/code&gt; を介して実行時にテストを取得することです。これは、指定されたモジュール内のすべての関数のリストを返します。ただし、テスト名の他に、各テストに関するより多くの情報を保存する場合があることを考えると、より柔軟なアプローチが必要です。</target>
        </trans-unit>
        <trans-unit id="c5a3e4590add882007f47566c77c18638d716efc" translate="yes" xml:space="preserve">
          <source>In order to fix the failing test, let&amp;rsquo;s create a file at &lt;code&gt;lib/kv/bucket.ex&lt;/code&gt; with the contents below. Feel free to give a try at implementing the &lt;code&gt;KV.Bucket&lt;/code&gt; module yourself using agents before peeking at the implementation below.</source>
          <target state="translated">失敗したテストを修正するために、 &lt;code&gt;lib/kv/bucket.ex&lt;/code&gt; に以下の内容のファイルを作成しましょう。以下の実装を覗く前に、エージェントを使用して自分で &lt;code&gt;KV.Bucket&lt;/code&gt; モジュールを実装してみてください。</target>
        </trans-unit>
        <trans-unit id="fc7b18c46cad921ea2c996d18c66b0c78849816d" translate="yes" xml:space="preserve">
          <source>In order to fix this bug, we need the registry to monitor every bucket it spawns. Once we set up a monitor, the registry will receive a notification every time a bucket process exits, allowing us to clean the registry up.</source>
          <target state="translated">このバグを修正するには、レジストリがバケットを生成するたびに監視する必要があります。モニターを設定すると、バケットプロセスが終了するたびにレジストリに通知が届くようになり、レジストリをクリーンアップできるようになります。</target>
        </trans-unit>
        <trans-unit id="62bd04dae1b62f0c9a990b148f9408c4a2843b61" translate="yes" xml:space="preserve">
          <source>In order to generate the &lt;code&gt;.app&lt;/code&gt; file, Mix expects your project to have both &lt;code&gt;:app&lt;/code&gt; and &lt;code&gt;:version&lt;/code&gt; keys. Furthermore, you can configure the generated application by defining an &lt;code&gt;application/0&lt;/code&gt; function in your &lt;code&gt;mix.exs&lt;/code&gt; that returns a keyword list.</source>
          <target state="translated">Mixは、 &lt;code&gt;.app&lt;/code&gt; ファイルを生成するために、プロジェクトに &lt;code&gt;:app&lt;/code&gt; キーと &lt;code&gt;:version&lt;/code&gt; キーの両方があることを想定しています。さらに、キーワードリストを返す &lt;code&gt;mix.exs&lt;/code&gt; で &lt;code&gt;application/0&lt;/code&gt; 関数を定義することにより、生成されたアプリケーションを構成できます。</target>
        </trans-unit>
        <trans-unit id="5a956c6b95ce875304570bf71071ca672fa7f12b" translate="yes" xml:space="preserve">
          <source>In order to get your first project started, Elixir ships with a build tool called Mix. You can get your new project started by running:</source>
          <target state="translated">最初のプロジェクトを始めるために、ElixirにはMixというビルドツールが同梱されています。を実行することで、新しいプロジェクトを開始することができます。</target>
        </trans-unit>
        <trans-unit id="017fd6a1081d196daafbd3b60fc590b568ac6071" translate="yes" xml:space="preserve">
          <source>In order to help IEx understand that an expression consists of multiple lines we can wrap it into parentheses:</source>
          <target state="translated">式が複数行で構成されていることを IEx に理解させるために、式を括弧で囲むことができます。</target>
        </trans-unit>
        <trans-unit id="06a43dffd10b2bfa3f19eb38d062aa6b636e0e88" translate="yes" xml:space="preserve">
          <source>In order to import configuration, &lt;code&gt;my_app&lt;/code&gt;'s &lt;code&gt;.formatter.exs&lt;/code&gt; would look like this:</source>
          <target state="translated">構成をインポートするために、 &lt;code&gt;my_app&lt;/code&gt; の &lt;code&gt;.formatter.exs&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a957b1a9d6df7d7ce8fa55bcc89ebc9a60d14634" translate="yes" xml:space="preserve">
          <source>In order to invoke the callbacks above, we need to go through the corresponding &lt;code&gt;GenServer&lt;/code&gt; functions. Let&amp;rsquo;s start a registry, create a named bucket, and then look it up:</source>
          <target state="translated">上記のコールバックを呼び出すには、対応する &lt;code&gt;GenServer&lt;/code&gt; 関数を通過する必要があります。レジストリを起動して、名前付きバケットを作成し、それを調べてみましょう。</target>
        </trans-unit>
        <trans-unit id="af452841dd75bb4a44c38345c300f4a14d20c04a" translate="yes" xml:space="preserve">
          <source>In order to make our server handle simultaneous connections, we need to have one process working as an acceptor that spawns other processes to serve requests. One solution would be to change:</source>
          <target state="translated">サーバーが同時接続を扱えるようにするためには、1つのプロセスがアクセプタとして動作し、リクエストを処理するために他のプロセスをスポーンする必要があります。一つの解決策は、以下のように変更することです。</target>
        </trans-unit>
        <trans-unit id="e3a8a476eb42420a16666c234250ab684a970ce4" translate="yes" xml:space="preserve">
          <source>In order to manipulate keyword lists, Elixir provides &lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html&quot;&gt;the &lt;code&gt;Keyword&lt;/code&gt; module&lt;/a&gt;. Remember, though, keyword lists are simply lists, and as such they provide the same linear performance characteristics as lists. The longer the list, the longer it will take to find a key, to count the number of items, and so on. For this reason, keyword lists are used in Elixir mainly for passing optional values. If you need to store many items or guarantee one-key associates with at maximum one-value, you should use maps instead.</source>
          <target state="translated">Elixirは&lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html&quot;&gt;、 &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;キーワードリストを操作するために、キーワードモジュールを提供しています。ただし、キーワードリストは単なるリストであるため、リストと同じ線形のパフォーマンス特性を提供します。リストが長いほど、キーの検索、アイテム数のカウントなどにかかる時間が長くなります。このため、キーワードリストは主にオプションの値を渡すためにElixirで使用されます。多くのアイテムを保存する必要がある場合、または1つのキーの関連付けを最大1つの値で保証する必要がある場合は、代わりにマップを使用してください。</target>
        </trans-unit>
        <trans-unit id="af5b1e73788ff17dca0429ef7ffa66ff44df9939" translate="yes" xml:space="preserve">
          <source>In order to run distributed code, we need to start the</source>
          <target state="translated">分散コードを実行するためには</target>
        </trans-unit>
        <trans-unit id="62c900a7e8363bd8d8183eca353b3f640ed385cc" translate="yes" xml:space="preserve">
          <source>In order to run the first test, we need to have two nodes running. Move into &lt;code&gt;apps/kv&lt;/code&gt; and let&amp;rsquo;s restart the node named &lt;code&gt;bar&lt;/code&gt; which is going to be used by tests.</source>
          <target state="translated">最初のテストを実行するには、2つのノードを実行する必要があります。 &lt;code&gt;apps/kv&lt;/code&gt; に移動して、テストで使用される &lt;code&gt;bar&lt;/code&gt; という名前のノードを再起動します。</target>
        </trans-unit>
        <trans-unit id="e8a55d2f768aa9a90c3e47bbc22675a61941f5a4" translate="yes" xml:space="preserve">
          <source>In order to speed up dispatching in production environments, where all implementations are known up-front, Elixir provides a feature called &lt;em&gt;protocol consolidation&lt;/em&gt;. Consolidation directly links protocols to their implementations in a way that invoking a function from a consolidated protocol is equivalent to invoking two remote functions.</source>
          <target state="translated">すべての実装が事前にわかっている実稼働環境でのディスパッチを高速化するために、Elixirは&lt;em&gt;プロトコル統合&lt;/em&gt;と呼ばれる機能を提供します。統合は、統合されたプロトコルから関数を呼び出すことは2つのリモート関数を呼び出すことと同等であるように、プロトコルをそれらの実装に直接リンクします。</target>
        </trans-unit>
        <trans-unit id="64a048080239b32ae9270b349a43b94c3e07e07c" translate="yes" xml:space="preserve">
          <source>In order to speed up dispatching in production environments, where all implementations are known up-front, Elixir provides a feature called protocol consolidation. Consolidation directly links protocols to their implementations in a way that invoking a function from a consolidated protocol is equivalent to invoking two remote functions.</source>
          <target state="translated">すべての実装が事前にわかっている本番環境でのディスパッチを高速化するために、Elixirはプロトコル統合と呼ばれる機能を提供しています。コンソリデーションは、コンソリデーションされたプロトコルから関数を呼び出すことが、2つのリモート関数を呼び出すことと同等になるように、プロトコルをその実装に直接リンクさせます。</target>
        </trans-unit>
        <trans-unit id="8d8b39acde42481af0b84b36b66305d49c434a4a" translate="yes" xml:space="preserve">
          <source>In order to start a supervisor, we need to first define a child process that will be supervised. As an example, we will define a GenServer that represents a stack:</source>
          <target state="translated">スーパバイザを開始するためには、まず、スーパバイザとなる子プロセスを定義する必要があります。例として、スタックを表す GenServer を定義します。</target>
        </trans-unit>
        <trans-unit id="0dc599f69280e0654d0ad9b6739bad7864211d7c" translate="yes" xml:space="preserve">
          <source>In order to understand the underlying code, we&amp;rsquo;d need macros, so we will revisit this pattern in the meta-programming guide and learn how to use module attributes as storage to allow developers to create DSLs.</source>
          <target state="translated">基礎となるコードを理解するにはマクロが必要なので、メタプログラミングガイドでこのパターンを再検討し、モジュール属性をストレージとして使用して開発者がDSLを作成できるようにする方法を学習します。</target>
        </trans-unit>
        <trans-unit id="656310fbcb50af634eac84272798b02ab00dba6a" translate="yes" xml:space="preserve">
          <source>In order to understand the underlying code, we&amp;rsquo;d need macros, so we will revisit this pattern in the meta-programming guide. However, the focus here is on how using module attributes as storage allows developers to create DSLs.</source>
          <target state="translated">基礎となるコードを理解するには、マクロが必要なので、メタプログラミングガイドでこのパターンを再検討します。ただし、ここでは、モジュール属性をストレージとして使用して開発者がDSLを作成する方法に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="1ca6c027f8dcdd141de11fbd20d5f0afb503fc0f" translate="yes" xml:space="preserve">
          <source>In order to use dependencies, you need to add a &lt;code&gt;:deps&lt;/code&gt; key to your project configuration. We often extract the list of dependencies into its own function:</source>
          <target state="translated">依存関係を使用するには、プロジェクト構成に &lt;code&gt;:deps&lt;/code&gt; キーを追加する必要があります。多くの場合、依存関係のリストを独自の関数に抽出します。</target>
        </trans-unit>
        <trans-unit id="ea5cbfc0efc9a5e4905ac0bfbf89bf8917d5354f" translate="yes" xml:space="preserve">
          <source>In order to use the application environment in our code, we need to replace &lt;code&gt;KV.Router.table/0&lt;/code&gt; with the definition below:</source>
          <target state="translated">コードでアプリケーション環境を使用するには、 &lt;code&gt;KV.Router.table/0&lt;/code&gt; を以下の定義に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="0e357d261c32f760a30d8b31568d4778e3817d29" translate="yes" xml:space="preserve">
          <source>In order to write and read files, one must use the functions in the &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module. By default, a file is opened in &lt;code&gt;:binary&lt;/code&gt; mode, which requires the functions &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binread/2&quot;&gt;&lt;code&gt;IO.binread/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binwrite/2&quot;&gt;&lt;code&gt;IO.binwrite/2&lt;/code&gt;&lt;/a&gt; to interact with the file. A developer may pass &lt;code&gt;:utf8&lt;/code&gt; as an option when opening the file and then all other functions from &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; are available, since they work directly with Unicode data.</source>
          <target state="translated">ファイルの書き込みと読み取りを行うには、&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;モジュールの関数を使用する必要があります。デフォルトでは、ファイルは &lt;code&gt;:binary&lt;/code&gt; モードで開かれます。このモードでは、ファイルと対話するために関数&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binread/2&quot;&gt; &lt;code&gt;IO.binread/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binwrite/2&quot;&gt; &lt;code&gt;IO.binwrite/2&lt;/code&gt; &lt;/a&gt;が必要です。開発者は、ファイルを開くときにオプションとして &lt;code&gt;:utf8&lt;/code&gt; を渡すと、Unicodeデータを直接処理するため、&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; の&lt;/a&gt;他のすべての関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="579dc3768627dbc4d67a1e0757b95afdfeb30685" translate="yes" xml:space="preserve">
          <source>In order to write and read files, one must use the functions in the &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module. By default, a file is opened in binary mode, which requires the functions &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binread/2&quot;&gt;&lt;code&gt;IO.binread/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binwrite/2&quot;&gt;&lt;code&gt;IO.binwrite/2&lt;/code&gt;&lt;/a&gt; to interact with the file. A developer may pass &lt;code&gt;:utf8&lt;/code&gt; as an option when opening the file, then the slower &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#read/2&quot;&gt;&lt;code&gt;IO.read/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#write/2&quot;&gt;&lt;code&gt;IO.write/2&lt;/code&gt;&lt;/a&gt; functions must be used as they are responsible for doing the proper conversions and providing the proper data guarantees.</source>
          <target state="translated">ファイルの書き込みと読み取りを行うには、&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;モジュールの関数を使用する必要があります。デフォルトでは、ファイルはバイナリモードで開かれ、ファイルと&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binread/2&quot;&gt; &lt;code&gt;IO.binread/2&lt;/code&gt; &lt;/a&gt;するには関数IO.binread / 2および&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binwrite/2&quot;&gt; &lt;code&gt;IO.binwrite/2&lt;/code&gt; &lt;/a&gt;が必要です。開発者が通過してもよい &lt;code&gt;:utf8&lt;/code&gt; オプションとして、ファイルを開くときに、より遅い&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#read/2&quot;&gt; &lt;code&gt;IO.read/2&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#write/2&quot;&gt; &lt;code&gt;IO.write/2&lt;/code&gt; &lt;/a&gt;、彼らは適切な変換を行うと、適切なデータの保証を提供する責任があるなどの機能を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dcd42d7d1276fbdd4330c63012ce7d34e85da421" translate="yes" xml:space="preserve">
          <source>In order to write and read files, one must use the functions in the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module. By default, a file is opened in &lt;code&gt;:binary&lt;/code&gt; mode, which requires the functions &lt;a href=&quot;io#binread/2&quot;&gt;&lt;code&gt;IO.binread/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#binwrite/2&quot;&gt;&lt;code&gt;IO.binwrite/2&lt;/code&gt;&lt;/a&gt; to interact with the file. A developer may pass &lt;code&gt;:utf8&lt;/code&gt; as an option when opening the file and then all other functions from &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; are available, since they work directly with Unicode data.</source>
          <target state="translated">ファイルを読み書きするには、&lt;a href=&quot;io&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;モジュールの関数を使用する必要があります。デフォルトでは、ファイルは &lt;code&gt;:binary&lt;/code&gt; モードで開かれます。これには、ファイルを操作するために関数&lt;a href=&quot;io#binread/2&quot;&gt; &lt;code&gt;IO.binread/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#binwrite/2&quot;&gt; &lt;code&gt;IO.binwrite/2&lt;/code&gt; &lt;/a&gt;が必要です。開発者は、ファイルを開くときにオプションとして &lt;code&gt;:utf8&lt;/code&gt; を渡すことができます。これにより、&lt;a href=&quot;io&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;からの他のすべての関数を使用できます。これらの関数はUnicodeデータを直接処理するためです。</target>
        </trans-unit>
        <trans-unit id="82ce7a0943dbb663e7fc6760db6023cf3368a14d" translate="yes" xml:space="preserve">
          <source>In order to write and read files, one must use the functions in the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module. By default, a file is opened in binary mode, which requires the functions &lt;a href=&quot;io#binread/2&quot;&gt;&lt;code&gt;IO.binread/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#binwrite/2&quot;&gt;&lt;code&gt;IO.binwrite/2&lt;/code&gt;&lt;/a&gt; to interact with the file. A developer may pass &lt;code&gt;:utf8&lt;/code&gt; as an option when opening the file, then the slower &lt;a href=&quot;io#read/2&quot;&gt;&lt;code&gt;IO.read/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#write/2&quot;&gt;&lt;code&gt;IO.write/2&lt;/code&gt;&lt;/a&gt; functions must be used as they are responsible for doing the proper conversions and providing the proper data guarantees.</source>
          <target state="translated">ファイルの書き込みと読み取りを行うには、&lt;a href=&quot;io&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;モジュールの関数を使用する必要があります。デフォルトでは、ファイルはバイナリモードで開かれます。ファイルを操作するには、関数&lt;a href=&quot;io#binread/2&quot;&gt; &lt;code&gt;IO.binread/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#binwrite/2&quot;&gt; &lt;code&gt;IO.binwrite/2&lt;/code&gt; &lt;/a&gt;が必要です。開発者は、ファイルを開くときにオプションとして &lt;code&gt;:utf8&lt;/code&gt; を渡すことができます。適切な変換を実行し、適切なデータ保証を提供する必要があるため、遅い&lt;a href=&quot;io#read/2&quot;&gt; &lt;code&gt;IO.read/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#write/2&quot;&gt; &lt;code&gt;IO.write/2&lt;/code&gt; &lt;/a&gt;関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="545dafe5c1ee7a1449e5b9b98c6c6db53caaf9f3" translate="yes" xml:space="preserve">
          <source>In other words, &lt;a href=&quot;#use/2&quot;&gt;&lt;code&gt;use/2&lt;/code&gt;&lt;/a&gt; translates to:</source>
          <target state="translated">言い換えると、&lt;a href=&quot;#use/2&quot;&gt; &lt;code&gt;use/2&lt;/code&gt; は次のように&lt;/a&gt;変換されます。</target>
        </trans-unit>
        <trans-unit id="31ee06abc4e001e3f6a5b13f3dfe4953038e624e" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;&amp;amp;(&amp;amp;1 * 2)&lt;/code&gt; is equivalent to &lt;code&gt;fn x -&amp;gt; x * 2 end&lt;/code&gt;.</source>
          <target state="translated">つまり、 &lt;code&gt;&amp;amp;(&amp;amp;1 * 2)&lt;/code&gt; は &lt;code&gt;fn x -&amp;gt; x * 2 end&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="886ca2f2765b1ff87730f7dc9a052f3a738d7792" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;&amp;lt;%= @foo %&amp;gt;&lt;/code&gt; translates to:</source>
          <target state="translated">つまり、 &lt;code&gt;&amp;lt;%= @foo %&amp;gt;&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="93125c6aa3c9fdcea503c87c1c3998ce536dbba7" translate="yes" xml:space="preserve">
          <source>In other words, &lt;strong&gt;do not&lt;/strong&gt;:</source>
          <target state="translated">つまり、次の&lt;strong&gt;ことをしない&lt;/strong&gt;で&lt;strong&gt;ください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c7679a9328277147beb719edbd3a5a83c335113c" translate="yes" xml:space="preserve">
          <source>In other words, Elixir supports rebinding. In case you don't want the value of a variable to change, you can use the pin operator (&lt;code&gt;^&lt;/code&gt;):</source>
          <target state="translated">言い換えれば、Elixirは再バインドをサポートしています。変数の値を変更したくない場合は、ピン演算子（ &lt;code&gt;^&lt;/code&gt; ）を使用できます。</target>
        </trans-unit>
        <trans-unit id="6d77f8954062d90a90e9c6b5408cf752db4ed5cd" translate="yes" xml:space="preserve">
          <source>In other words, Elixir will only parse options that are used by the runtime, ignoring all others. If you would like to parse all switches, regardless if they exist or not, you can force creation of atoms by passing &lt;code&gt;allow_nonexistent_atoms: true&lt;/code&gt; as option. Use this option with care. It is only useful when you are building command-line applications that receive dynamically-named arguments and must be avoided in long-running systems.</source>
          <target state="translated">つまり、Elixirはランタイムで使用されるオプションのみを解析し、他のオプションはすべて無視します。スイッチが存在するかどうかに関係なく、すべてのスイッチを解析する場合は、オプションとして &lt;code&gt;allow_nonexistent_atoms: true&lt;/code&gt; を渡すことで、アトムを強制的に作成できます。このオプションは注意して使用してください。これは、動的に名前が付けられた引数を受け取り、実行時間の長いシステムでは回避する必要があるコマンドラインアプリケーションを構築する場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="38fe91f6b4425a57a05293a344c316d610b9df57" translate="yes" xml:space="preserve">
          <source>In other words, functions using the word &quot;size&quot; in its name will take the same amount of time whether the data structure is tiny or huge. Conversely, functions having &quot;length&quot; in its name will take more time as the data structure grows in size.</source>
          <target state="translated">つまり、名前に「サイズ」という言葉が付いている関数は、データ構造が小さくても大きくても同じ時間がかかります。逆に、名前に「長さ」を持つ関数は、データ構造体が大きくなるほど時間がかかります。</target>
        </trans-unit>
        <trans-unit id="60a4e6e4835459586a75795caa4bfdc4a5131e02" translate="yes" xml:space="preserve">
          <source>In other words, if it is important that a process cleans after itself when your application or the supervision tree is shutting down, then this process must trap exits and its child specification should specify the proper &lt;code&gt;:shutdown&lt;/code&gt; value, ensuring it terminates within a reasonable interval.</source>
          <target state="translated">言い換えると、アプリケーションまたは監視ツリーのシャットダウン時にプロセスが自動的にクリーンアップすることが重要である場合、このプロセスは出口をトラップする必要があり、その子仕様は適切な &lt;code&gt;:shutdown&lt;/code&gt; 値を指定して、妥当な間隔内で終了することを保証する必要があります。</target>
        </trans-unit>
        <trans-unit id="62c93298d745ed7ef2d4717535ac947d098645b2" translate="yes" xml:space="preserve">
          <source>In other words, if your configuration does something like:</source>
          <target state="translated">言い換えれば、あなたの設定が次のようなことをしている場合。</target>
        </trans-unit>
        <trans-unit id="1f496a7679d30119adb2cc52d4073c178807ab2e" translate="yes" xml:space="preserve">
          <source>In other words, it is important to make a distinction between a regular Elixir value (like a list, a map, a process, a reference, etc) and a quoted expression. Some values, such as integers, atoms, and strings, have a quoted expression equal to the value itself. Other values, like maps, need to be explicitly converted. Finally, values like functions and references cannot be converted to a quoted expression at all.</source>
          <target state="translated">つまり、通常のElixirの値(リスト、マップ、プロセス、参照など)と引用符で囲まれた式を区別することが重要です。整数、アトム、文字列などの値の中には、値自体と等しい引用符で囲まれた式を持つものがあります。マップのような他の値は、明示的に変換する必要があります。最後に、関数や参照のような値は引用符付き式に変換することはできません。</target>
        </trans-unit>
        <trans-unit id="8ea1895411f30c25b0c4e8a493357838af36b14b" translate="yes" xml:space="preserve">
          <source>In other words, patterns are allowed only on the left side of &lt;code&gt;=&lt;/code&gt;. The right side of &lt;code&gt;=&lt;/code&gt; follows the regular evaluation semantics of the language.</source>
          <target state="translated">つまり、パターンは &lt;code&gt;=&lt;/code&gt; の左側でのみ許可されます。 &lt;code&gt;=&lt;/code&gt; の右側は、言語の通常の評価セマンティクスに従います。</target>
        </trans-unit>
        <trans-unit id="6de004f8f04712ff0ec3d814c33ef7cd9f1fbc8d" translate="yes" xml:space="preserve">
          <source>In other words, the atom &lt;code&gt;:jos&amp;eacute;&lt;/code&gt; can only be written with the code points &lt;code&gt;006A 006F 0073 00E9&lt;/code&gt;. Using another normalization form will lead to a tokenizer error. On the other hand, &lt;code&gt;:&quot;jos&amp;eacute;&quot;&lt;/code&gt; may be written as &lt;code&gt;006A 006F 0073 00E9&lt;/code&gt; or &lt;code&gt;006A 006F 0073 0065 0301&lt;/code&gt;, since it is written between quotes.</source>
          <target state="translated">つまり、アトム &lt;code&gt;:jos&amp;eacute;&lt;/code&gt; は、コードポイント &lt;code&gt;006A 006F 0073 00E9&lt;/code&gt; でのみ記述できます。別の正規化形式を使用すると、トークナイザーエラーが発生します。一方、 &lt;code&gt;:&quot;jos&amp;eacute;&quot;&lt;/code&gt; は、引用符で &lt;code&gt;006A 006F 0073 00E9&lt;/code&gt; れているため、006A 006F 0073 00E9または &lt;code&gt;006A 006F 0073 0065 0301&lt;/code&gt; と記述できます。</target>
        </trans-unit>
        <trans-unit id="c5f854e2205df45f6200d8840717b4a209cfb3ea" translate="yes" xml:space="preserve">
          <source>In other words, the environment key &lt;code&gt;:db_host&lt;/code&gt; for application &lt;code&gt;:my_app&lt;/code&gt; will only be read when &lt;code&gt;MyApp.DBClient&lt;/code&gt; effectively starts. While reading the application environment at runtime is the preferred approach, in some rare occasions you may want to use the application environment to configure the compilation of a certain project. This is often done by calling &lt;a href=&quot;#get_env/3&quot;&gt;&lt;code&gt;get_env/3&lt;/code&gt;&lt;/a&gt; outside of a function:</source>
          <target state="translated">つまり、アプリケーション &lt;code&gt;:my_app&lt;/code&gt; の環境キー &lt;code&gt;:db_host&lt;/code&gt; は、 &lt;code&gt;MyApp.DBClient&lt;/code&gt; が効果的に起動したときにのみ読み取られます。実行時にアプリケーション環境を読み取ることをお勧めしますが、まれに、アプリケーション環境を使用して特定のプロジェクトのコンパイルを構成したい場合があります。これは多くの場合、関数の外部で&lt;a href=&quot;#get_env/3&quot;&gt; &lt;code&gt;get_env/3&lt;/code&gt; を&lt;/a&gt;呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="a46592ea6e94de48f6246d5ad4aa9e7f178675e1" translate="yes" xml:space="preserve">
          <source>In other words, the expression above simply translates to:</source>
          <target state="translated">つまり、上記の表現は単純に訳すと</target>
        </trans-unit>
        <trans-unit id="39fc76a1a41dfb78eff4ab58bbe78f4df61a48df" translate="yes" xml:space="preserve">
          <source>In other words, there are multiple ways systems can be deployed and releases can be automated and incorporated into all of them as long as you remember to build the system in the same target triple.</source>
          <target state="translated">つまり、システムの展開方法は複数あり、同じターゲットトリプルでシステムを構築することを覚えていれば、リリースは自動化され、すべてに組み込まれます。</target>
        </trans-unit>
        <trans-unit id="cf94a3991ed1b9e98b23fc9feebaf13e89fbcbfd" translate="yes" xml:space="preserve">
          <source>In other words, this function tries to strip the &lt;code&gt;from&lt;/code&gt; prefix from &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">つまり、この関数は、 &lt;code&gt;from&lt;/code&gt; 接頭辞を &lt;code&gt;path&lt;/code&gt; から削除しようとします。</target>
        </trans-unit>
        <trans-unit id="44dd0ca7035bd0b6e8100243c91751e16aa983c2" translate="yes" xml:space="preserve">
          <source>In other words, this module expects invalid data to be detected elsewhere, usually when retrieving data from the external source. For example, a driver that reads strings from a database will be responsible to check the validity of the encoding. &lt;a href=&quot;#chunk/2&quot;&gt;&lt;code&gt;String.chunk/2&lt;/code&gt;&lt;/a&gt; can be used for breaking a string into valid and invalid parts.</source>
          <target state="translated">言い換えると、このモジュールは、通常は外部ソースからデータを取得するときに、無効なデータが他の場所で検出されることを想定しています。たとえば、データベースから文字列を読み取るドライバは、エンコーディングの有効性をチェックする責任があります。&lt;a href=&quot;#chunk/2&quot;&gt; &lt;code&gt;String.chunk/2&lt;/code&gt; &lt;/a&gt;は、文字列を有効な部分と無効な部分に分割するために使用できます。</target>
        </trans-unit>
        <trans-unit id="05304a75e275a349e9ffa834cabff9641ce49488" translate="yes" xml:space="preserve">
          <source>In other words, this module expects invalid data to be detected elsewhere, usually when retrieving data from the external source. For example, a driver that reads strings from a database will be responsible to check the validity of the encoding. &lt;a href=&quot;string#chunk/2&quot;&gt;&lt;code&gt;String.chunk/2&lt;/code&gt;&lt;/a&gt; can be used for breaking a string into valid and invalid parts.</source>
          <target state="translated">つまり、このモジュールは、通常は外部ソースからデータを取得するときに、無効なデータが他の場所で検出されることを期待します。たとえば、データベースから文字列を読み取るドライバーは、エンコーディングの有効性をチェックする必要があります。&lt;a href=&quot;string#chunk/2&quot;&gt; &lt;code&gt;String.chunk/2&lt;/code&gt; &lt;/a&gt;は、文字列を有効な部分と無効な部分に分割するために使用できます。</target>
        </trans-unit>
        <trans-unit id="558d46588b101dc23bc0d5fd0f4acaf2b4c0f74f" translate="yes" xml:space="preserve">
          <source>In other words, we converted each expression given to &lt;code&gt;case/2&lt;/code&gt; as a step in &lt;code&gt;with&lt;/code&gt;. As soon as any of the steps return something that does not match &lt;code&gt;{:ok, x}&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt; aborts, and returns the non-matching value.</source>
          <target state="translated">つまり、でのステップインとして、 &lt;code&gt;case/2&lt;/code&gt; に与えられた各式を変換し &lt;code&gt;with&lt;/code&gt; 。すぐにステップのいずれかと一致していない何かを返す &lt;code&gt;{:ok, x}&lt;/code&gt; 、 &lt;code&gt;with&lt;/code&gt; アボート、非マッチング値を返しています。</target>
        </trans-unit>
        <trans-unit id="9b5785a062ee13450968c9614ec6ca20310e34ad" translate="yes" xml:space="preserve">
          <source>In other words, we want the registry to keep on running even if a bucket crashes. Let&amp;rsquo;s write a new registry test:</source>
          <target state="translated">つまり、バケットがクラッシュしても、レジストリを実行し続ける必要があります。新しいレジストリテストを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="eae49db7d30fd64b6cfb19732b20c2216ea90d4c" translate="yes" xml:space="preserve">
          <source>In other words, what we would expect to be a single character, such as &lt;code&gt;&amp;eacute;&lt;/code&gt; or &lt;code&gt;ł&lt;/code&gt;, can in practice be multiple characters, each represented by potentially multiple bytes. Consider the following:</source>
          <target state="translated">言い換えると、 &lt;code&gt;&amp;eacute;&lt;/code&gt; や &lt;code&gt;ł&lt;/code&gt; などの単一の文字であると予想されるものは、実際には複数の文字であり、それぞれが潜在的に複数のバイトで表されます。次のことを考慮してください。</target>
        </trans-unit>
        <trans-unit id="32be3988a4bf49863fd56d4a7249dcf02990b46b" translate="yes" xml:space="preserve">
          <source>In other words, when invoked as:</source>
          <target state="translated">として呼び出されたとき、言い換えれば</target>
        </trans-unit>
        <trans-unit id="e8d6c41a56de39aca9e7a91aac78285a5e2f3f02" translate="yes" xml:space="preserve">
          <source>In other words:</source>
          <target state="translated">言い換えれば</target>
        </trans-unit>
        <trans-unit id="49d20f893de0acff7f5dc08503dbde4a71a0e1bc" translate="yes" xml:space="preserve">
          <source>In particular, charlists will be printed back by default in single quotes if they contain only printable ASCII characters:</source>
          <target state="translated">特に、文字列が印刷可能なASCII文字のみを含む場合、デフォルトでは単一引用符で印刷されます。</target>
        </trans-unit>
        <trans-unit id="3467114e6e90f4dae7f2e188d401c44475293e7c" translate="yes" xml:space="preserve">
          <source>In practice, charlists are used mostly when interfacing with Erlang, in particular old libraries that do not accept binaries as arguments. You can convert a charlist to a string and back by using the &lt;code&gt;to_string/1&lt;/code&gt; and &lt;code&gt;to_charlist/1&lt;/code&gt; functions:</source>
          <target state="translated">実際には、charlistは、Erlangとのインターフェース時に主に使用されます。特に、バイナリを引数として受け入れない古いライブラリは使用されます。 &lt;code&gt;to_string/1&lt;/code&gt; および &lt;code&gt;to_charlist/1&lt;/code&gt; 関数を使用して、charlistを文字列に変換したり、逆に変換したりできます。</target>
        </trans-unit>
        <trans-unit id="b004abb70250b3f1e68f41dcfedc223284b584eb" translate="yes" xml:space="preserve">
          <source>In practice, however, Elixir developers rarely use the &lt;code&gt;try/rescue&lt;/code&gt; construct. For example, many languages would force you to rescue an error when a file cannot be opened successfully. Elixir instead provides a &lt;code&gt;File.read/1&lt;/code&gt; function which returns a tuple containing information about whether the file was opened successfully:</source>
          <target state="translated">ただし、実際には、Elixir開発者が &lt;code&gt;try/rescue&lt;/code&gt; コンストラクトを使用することはほとんどありません。たとえば、多くの言語では、ファイルを正常に開くことができない場合にエラーを救済する必要があります。代わりに、Elixirは &lt;code&gt;File.read/1&lt;/code&gt; 関数を提供し、ファイルが正常に開かれたかどうかに関する情報を含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="8e292cda7fd341df2ad10ad68515a260c1f9ceca" translate="yes" xml:space="preserve">
          <source>In practice, if you find yourself in a position where you need a process registry for dynamic processes, you should use &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;the &lt;code&gt;Registry&lt;/code&gt; module&lt;/a&gt; provided as part of Elixir. It provides functionality similar to the one we have built using a GenServer + &lt;code&gt;:ets&lt;/code&gt; while also being able to perform both writes and reads concurrently. &lt;a href=&quot;https://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/&quot;&gt;It has been benchmarked to scale across all cores even on machines with 40 cores&lt;/a&gt;.</source>
          <target state="translated">実際には、動的プロセスのプロセスレジストリが必要な場合は、Elixirの一部として提供されて&lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;いる &lt;code&gt;Registry&lt;/code&gt; モジュール&lt;/a&gt;を使用する必要があります。GenServer + &lt;code&gt;:ets&lt;/code&gt; を使用して構築した機能と同様の機能を提供すると同時に、書き込みと読み取りの両方を同時に実行することもできます。&lt;a href=&quot;https://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/&quot;&gt;40コアのマシンでも、すべてのコアにまたがってスケーリングするようにベンチマークされています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1db0e725bf7fce8e6792fe7c1b5f4904976e1c8d" translate="yes" xml:space="preserve">
          <source>In practice, it is common to have both server and client functions in the same module. If the server and/or client implementations are growing complex, you may want to have them in different modules.</source>
          <target state="translated">実際には、サーバとクライアントの両方の機能を同じモジュールに入れるのが一般的です。サーバやクライアントの実装が複雑になってきた場合は、それらを別のモジュールに入れたいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="70101e1c300d630f1ea86765138df21a3dc6ed93" translate="yes" xml:space="preserve">
          <source>In practice, it is more likely you will reach the Erlang</source>
          <target state="translated">実際には、Erlangの</target>
        </trans-unit>
        <trans-unit id="cafbb493cd44c8e665619ace61e6011a8cdce243" translate="yes" xml:space="preserve">
          <source>In practice, our tools always start our applications for us, but there is an API available if you need fine-grained control.</source>
          <target state="translated">実際には、私たちのツールは常に私たちのためにアプリケーションを起動しますが、細かい制御が必要な場合はAPIが利用できます。</target>
        </trans-unit>
        <trans-unit id="c83f942e405f3eb5ce3163220a02a8f1db134d20" translate="yes" xml:space="preserve">
          <source>In practice, we are not expecting the processes working as buckets to fail. But, if it does happen, for whatever reason, we can rest assured that our system will continue to work as intended.</source>
          <target state="translated">実際には、バケットとして動作しているプロセスが故障することは想定していません。しかし、何らかの理由で障害が発生した場合でも、システムは意図した通りに動作し続けるので安心してください。</target>
        </trans-unit>
        <trans-unit id="bcd76319c1bff6236a950ae66cde047b189b7040" translate="yes" xml:space="preserve">
          <source>In practice, you rarely load applications by hand because that is part of the start process, explained next.</source>
          <target state="translated">実際には、アプリケーションを手でロードすることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="719d5c0677afb6db6737335d9338844042ab8998" translate="yes" xml:space="preserve">
          <source>In rare circumstances, this function can fail on Unix-like systems. It may happen if read permissions do not exist for the parent directories of the current directory. For this reason, returns &lt;code&gt;{:ok, cwd}&lt;/code&gt; in case of success, &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">まれに、この関数がUnixライクなシステムで失敗することがあります。現在のディレクトリの親ディレクトリに読み取り権限が存在しない場合に発生する可能性があります。このため、成功した場合は &lt;code&gt;{:ok, cwd}&lt;/code&gt; を返し &lt;code&gt;{:error, reason}&lt;/code&gt; それ以外の場合は{：error、reason}を返します。</target>
        </trans-unit>
        <trans-unit id="b81ae9e0c2bb006469e999756d7c827614795f38" translate="yes" xml:space="preserve">
          <source>In rare circumstances, this function can fail on Unix. It may happen if read permissions do not exist for the parent directories of the current directory. For this reason, returns &lt;code&gt;{:ok, cwd}&lt;/code&gt; in case of success, &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">まれに、この関数がUnixで失敗することがあります。現在のディレクトリの親ディレクトリに読み取り権限がない場合に発生することがあります。このため、成功した場合は &lt;code&gt;{:ok, cwd}&lt;/code&gt; を返し &lt;code&gt;{:error, reason}&lt;/code&gt; それ以外の場合は{：error、reason}を返します。</target>
        </trans-unit>
        <trans-unit id="acd5d3b4600c9d05bb359546d1009f1e407c770b" translate="yes" xml:space="preserve">
          <source>In set notation: &lt;code&gt;[\p{ID_Start}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Other_ID_Continue}-\p{Pattern_Syntax}-\p{Pattern_White_Space}]&lt;/code&gt;</source>
          <target state="translated">セット表記： &lt;code&gt;[\p{ID_Start}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Other_ID_Continue}-\p{Pattern_Syntax}-\p{Pattern_White_Space}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f49cbc94b22c26f24f368405117b1889a3c176b" translate="yes" xml:space="preserve">
          <source>In set notation: &lt;code&gt;[\p{L}\p{Nl}\p{Other_ID_Start}-\p{Pattern_Syntax}-\p{Pattern_White_Space}]&lt;/code&gt;</source>
          <target state="translated">セット表記： &lt;code&gt;[\p{L}\p{Nl}\p{Other_ID_Start}-\p{Pattern_Syntax}-\p{Pattern_White_Space}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2ccee93d894b5296828c59c78b91159cd164712" translate="yes" xml:space="preserve">
          <source>In some cases, it may be convenient to provide a default implementation for all types. This can be achieved by setting the &lt;code&gt;@fallback_to_any&lt;/code&gt; attribute to &lt;code&gt;true&lt;/code&gt; in the protocol definition:</source>
          <target state="translated">場合によっては、すべてのタイプにデフォルトの実装を提供すると便利です。これは、プロトコル定義で &lt;code&gt;@fallback_to_any&lt;/code&gt; 属性を &lt;code&gt;true&lt;/code&gt; に設定することで実現できます。</target>
        </trans-unit>
        <trans-unit id="371305821a86a1fd6063efb5d024b0464bdede1a" translate="yes" xml:space="preserve">
          <source>In some cases, it may be necessary to inject many values inside a list. For example, imagine you have a list containing &lt;code&gt;[1, 2, 6]&lt;/code&gt; and we want to inject &lt;code&gt;[3, 4, 5]&lt;/code&gt; into it. Using &lt;code&gt;unquote&lt;/code&gt; won&amp;rsquo;t yield the desired result:</source>
          <target state="translated">場合によっては、リスト内に多くの値を挿入する必要があります。たとえば、 &lt;code&gt;[1, 2, 6]&lt;/code&gt; 1、2、6 ]を含むリストがあり、それに &lt;code&gt;[3, 4, 5]&lt;/code&gt; ]を挿入したいとします。 &lt;code&gt;unquote&lt;/code&gt; を使用しても、望ましい結果は得られません。</target>
        </trans-unit>
        <trans-unit id="606ff8e75aa81c7c8c049f5b60f58898dddc0286" translate="yes" xml:space="preserve">
          <source>In some cases, this may lead to undesired formatting. Therefore, &lt;strong&gt;some code generated by the formatter may not be aesthetically pleasing and may require explicit intervention from the developer&lt;/strong&gt;. That's why we do not recommend to run the formatter blindly in an existing codebase. Instead you should format and sanity check each formatted file.</source>
          <target state="translated">場合によっては、これは望ましくないフォーマットにつながる可能性があります。したがって、&lt;strong&gt;フォーマッタによって生成された一部のコードは、見た目が美しくなく、開発者による明示的な介入が必要になる場合があり&lt;/strong&gt;ます。そのため、既存のコードベースで盲目的にフォーマッターを実行することはお勧めしません。代わりに、フォーマットされた各ファイルをフォーマットして健全性チェックを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="e9e037bc0aa6cd7738573dffae9758c75aa58f06" translate="yes" xml:space="preserve">
          <source>In some cases, you don&amp;rsquo;t care about a particular value in a pattern. It is a common practice to bind those values to the underscore, &lt;code&gt;_&lt;/code&gt;. For example, if only the head of the list matters to us, we can assign the tail to underscore:</source>
          <target state="translated">場合によっては、パターン内の特定の値を気にする必要はありません。これらの値をアンダースコア &lt;code&gt;_&lt;/code&gt; にバインドするのが一般的な方法です。たとえば、リストの先頭のみが重要な場合は、アンダースコアに末尾を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="4bf473ae676eadb3b6d9002d5044ddc6e88467a0" translate="yes" xml:space="preserve">
          <source>In some cases, you may need to inject such &lt;em&gt;values&lt;/em&gt; into &lt;em&gt;quoted expressions&lt;/em&gt;. To do that, we need to first escape those values into quoted expressions with the help of &lt;code&gt;Macro.escape/1&lt;/code&gt;:</source>
          <target state="translated">場合によっては、そのような&lt;em&gt;値&lt;/em&gt;を&lt;em&gt;引用符付きの式&lt;/em&gt;に挿入する必要があります。これを行うには、まず &lt;code&gt;Macro.escape/1&lt;/code&gt; を使用して、これらの値を引用符付きの式にエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="f72fba3c3196c1696a309102e4d11fa8e7e9ddc2" translate="yes" xml:space="preserve">
          <source>In some cases, you want to access an alias or a module defined in the caller. For such, you can use the &lt;code&gt;alias!&lt;/code&gt; macro:</source>
          <target state="translated">場合によっては、呼び出し元で定義されたエイリアスまたはモジュールにアクセスする必要があります。そのためには、 &lt;code&gt;alias!&lt;/code&gt; を使用できます！大きい：</target>
        </trans-unit>
        <trans-unit id="ba5d8febe75db79d78b1632bb42524ac427524c5" translate="yes" xml:space="preserve">
          <source>In some situations, you can use the fact the formatter does not generate elegant code as a hint for refactoring. Take this code:</source>
          <target state="translated">状況によっては、フォーマッタがエレガントなコードを生成しないという事実をリファクタリングのヒントとして使うことができます。このコードを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="fa2a12aa6aedffdc527ed2aeaa4a499eafdd3bd3" translate="yes" xml:space="preserve">
          <source>In such cases, developers should instead import or alias the module directly, so that they can customize those as they wish, without the indirection behind &lt;a href=&quot;#use/2&quot;&gt;&lt;code&gt;use/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このような場合、開発者は代わりにモジュールを直接インポートまたはエイリアス化する必要があります。これにより、&lt;a href=&quot;#use/2&quot;&gt; &lt;code&gt;use/2&lt;/code&gt; の&lt;/a&gt;間接参照なしで、必要に応じてモジュールをカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="459d38c03bf669f90bbbe671db50188607d62696" translate="yes" xml:space="preserve">
          <source>In such cases, using the capture operator is no different than using &lt;code&gt;fn&lt;/code&gt;.</source>
          <target state="translated">このような場合、キャプチャ演算子を使用することは &lt;code&gt;fn&lt;/code&gt; を使用することと同じです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
