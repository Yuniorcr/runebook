<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="f248a387f0f37e77ff666c2a85a59f7074c24d85" translate="yes" xml:space="preserve">
          <source>Currently &lt;code&gt;@deprecated&lt;/code&gt; only supports functions and macros. However you can use the &lt;code&gt;:deprecated&lt;/code&gt; key in the annotation metadata to annotate the docs of modules, types and callbacks too.</source>
          <target state="translated">現在 &lt;code&gt;@deprecated&lt;/code&gt; は関数とマクロのみをサポートしています。ただし、アノテーションメタデータで &lt;code&gt;:deprecated&lt;/code&gt; キーを使用して、モジュール、タイプ、およびコールバックのドキュメントにアノテーションを付けることもできます。</target>
        </trans-unit>
        <trans-unit id="51f90102aa9d37408ac2a331660c80b3de845ceb" translate="yes" xml:space="preserve">
          <source>Currently it defines types and the minimal implementation for a calendar behaviour in Elixir. The goal of the Calendar features in Elixir is to provide a base for interoperability instead of full-featured datetime API.</source>
          <target state="translated">現在のところ、Elixirにおけるカレンダーの動作のための型と最低限の実装を定義しています。ElixirのCalendar機能の目標は、フル機能を備えたデータタイムAPIではなく、相互運用性のための基盤を提供することです。</target>
        </trans-unit>
        <trans-unit id="58e947fb9b58beb32c0020272eaa3d95ced9ee44" translate="yes" xml:space="preserve">
          <source>Currently the only accepted PID is &lt;code&gt;self()&lt;/code&gt;.</source>
          <target state="translated">現在受け入れられている唯一のPIDは &lt;code&gt;self()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="63f26076c7ac35014e638bc9d9a7df511fa73b4d" translate="yes" xml:space="preserve">
          <source>Currently we have two tests tagged with &lt;code&gt;@tag :distributed&lt;/code&gt;. The &amp;ldquo;server interaction&amp;rdquo; test in &lt;code&gt;KVServerTest&lt;/code&gt;, and the &amp;ldquo;route requests across nodes&amp;rdquo; in &lt;code&gt;KV.RouterTest&lt;/code&gt;. Both tests are failing since they require a routing table, which is currently empty.</source>
          <target state="translated">現在、 &lt;code&gt;@tag :distributed&lt;/code&gt; タグ付けされた2つのテストがあります。で、「サーバの対話」テスト &lt;code&gt;KVServerTest&lt;/code&gt; 、との「ノード間でルート要求」 &lt;code&gt;KV.RouterTest&lt;/code&gt; 。現在空のルーティングテーブルが必要なため、どちらのテストも失敗しています。</target>
        </trans-unit>
        <trans-unit id="fb478f5ec7bb7da049009c9e3df88349c2f53b74" translate="yes" xml:space="preserve">
          <source>Currently, there is no official way to cross-compile a release from one target triple to another, due to the complexities involved in the process.</source>
          <target state="translated">現在のところ、プロセスが複雑なため、あるターゲットトリプルから別のターゲットトリプルへのリリースをクロスコンパイルする公式な方法はありません。</target>
        </trans-unit>
        <trans-unit id="5bdaaebe2bbb603df00e4573b0900ccd99aa7d09" translate="yes" xml:space="preserve">
          <source>Custom Sigils</source>
          <target state="translated">カスタムサイン</target>
        </trans-unit>
        <trans-unit id="d797cab8a29cd6c10dc9372d1ab9213b989caf7f" translate="yes" xml:space="preserve">
          <source>Custom and overridden operators</source>
          <target state="translated">カスタムおよびオーバーライドされた演算子</target>
        </trans-unit>
        <trans-unit id="00146f5b748062fe67c9600ecfcdf444284e0bcf" translate="yes" xml:space="preserve">
          <source>Custom attributes</source>
          <target state="translated">カスタム属性</target>
        </trans-unit>
        <trans-unit id="e3fd71a31afaaf057b0fedc28ba72336f1780a64" translate="yes" xml:space="preserve">
          <source>Custom backends</source>
          <target state="translated">カスタムバックエンド</target>
        </trans-unit>
        <trans-unit id="abe70270d1f6e2920fe2d28c23289b5295fb962a" translate="yes" xml:space="preserve">
          <source>Custom configuration</source>
          <target state="translated">カスタム設定</target>
        </trans-unit>
        <trans-unit id="170bc5dc5f750c41d4def27ed27eed6bf3c468fb" translate="yes" xml:space="preserve">
          <source>Custom editors are supported by using the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt; notations, for example:</source>
          <target state="translated">カスタムエディタは、 &lt;code&gt;__FILE__&lt;/code&gt; および &lt;code&gt;__LINE__&lt;/code&gt; 表記を使用してサポートされます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="642fb7c499e4524f98e2922e90ae2a2b071cfd52" translate="yes" xml:space="preserve">
          <source>Custom formatting</source>
          <target state="translated">カスタムフォーマット</target>
        </trans-unit>
        <trans-unit id="cfa121c3915c8b4ef6e8270f4ee6bf76b09bdab9" translate="yes" xml:space="preserve">
          <source>Custom patterns and guards expressions</source>
          <target state="translated">カスタムパターンとガード表現</target>
        </trans-unit>
        <trans-unit id="8eb31d3e78f5111c059041eed039c75877655487" translate="yes" xml:space="preserve">
          <source>Custom sigils</source>
          <target state="translated">カスタムサイン</target>
        </trans-unit>
        <trans-unit id="39876974b7f78aa10c505abd0ccf4a46df612fca" translate="yes" xml:space="preserve">
          <source>Custom types defined through &lt;code&gt;@type&lt;/code&gt; are exported and are available outside the module they&amp;rsquo;re defined in:</source>
          <target state="translated">&lt;code&gt;@type&lt;/code&gt; で定義されたカスタムタイプはエクスポートされ、それらが定義されているモジュールの外部で使用できます。</target>
        </trans-unit>
        <trans-unit id="b447a4b2b4a5635d3f0dd6f81cbcc0d90e8e4a6d" translate="yes" xml:space="preserve">
          <source>Custom types defined through &lt;code&gt;@type&lt;/code&gt; are exported and available outside the module they&amp;rsquo;re defined in:</source>
          <target state="translated">&lt;code&gt;@type&lt;/code&gt; で定義されたカスタム型はエクスポートされ、それらが定義されているモジュールの外部で使用できます。</target>
        </trans-unit>
        <trans-unit id="d7f0ac9e007291a6ccc21d036f4711505ad9d0b1" translate="yes" xml:space="preserve">
          <source>Customization</source>
          <target state="translated">Customization</target>
        </trans-unit>
        <trans-unit id="a43ab69a51d511753170a537818f222e76faeaa7" translate="yes" xml:space="preserve">
          <source>Customization and configuration summary</source>
          <target state="translated">カスタマイズと設定のまとめ</target>
        </trans-unit>
        <trans-unit id="8b25d03b9dabe02b1fafe8ede605cce72a76c6c5" translate="yes" xml:space="preserve">
          <source>Customization per environment can be done by accessing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;the &lt;code&gt;Mix.env&lt;/code&gt; function&lt;/a&gt; in your &lt;code&gt;mix.exs&lt;/code&gt; file, which returns the current environment as an atom. That&amp;rsquo;s what we have used in the &lt;code&gt;:start_permanent&lt;/code&gt; options:</source>
          <target state="translated">環境ごとのカスタマイズがアクセスすることによって行うことができます&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt; &lt;code&gt;Mix.env&lt;/code&gt; の&lt;/a&gt;機能をお使いに &lt;code&gt;mix.exs&lt;/code&gt; 原子として現在の環境を返すファイル、。これが &lt;code&gt;:start_permanent&lt;/code&gt; オプションで使用したものです。</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="6908397a2d8b0784b2ec70f0d5374964dc182a77" translate="yes" xml:space="preserve">
          <source>Daemon mode (Unix-like)</source>
          <target state="translated">デーモンモード</target>
        </trans-unit>
        <trans-unit id="303c85db56e6f90f1fcaafbed47e91067f22fbe9" translate="yes" xml:space="preserve">
          <source>Data structures</source>
          <target state="translated">データ構造</target>
        </trans-unit>
        <trans-unit id="696ae3d17016ea7046f1ce357ae0b1f6103499a3" translate="yes" xml:space="preserve">
          <source>Data structures such as lists, tuples, and binaries are marked respectively by the delimiters &lt;code&gt;[...]&lt;/code&gt;, &lt;code&gt;{...}&lt;/code&gt;, and &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;. Each element is separated by comma. A trailing comma is also allowed, such as in &lt;code&gt;[1, 2, 3,]&lt;/code&gt;.</source>
          <target state="translated">リスト、タプル、バイナリなどのデータ構造は、それぞれ区切り文字 &lt;code&gt;[...]&lt;/code&gt; 、 &lt;code&gt;{...}&lt;/code&gt; 、および &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; でマークされます。各要素はカンマで区切られます。 &lt;code&gt;[1, 2, 3,]&lt;/code&gt; ように、末尾にコンマを付けることもできます。</target>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="904c0db9491168bf7b0f96a8127a1e2e956e54ec" translate="yes" xml:space="preserve">
          <source>Date.Range</source>
          <target state="translated">Date.Range</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="067497ecd979a531adeb039b5c57048e6702a8f2" translate="yes" xml:space="preserve">
          <source>Day of the month</source>
          <target state="translated">月日</target>
        </trans-unit>
        <trans-unit id="a2dfedeffd1ead187411349e305b1fe627303452" translate="yes" xml:space="preserve">
          <source>Day of the week</source>
          <target state="translated">曜日</target>
        </trans-unit>
        <trans-unit id="7c9881c0cb27c6197626d060644aab99eb05aa54" translate="yes" xml:space="preserve">
          <source>Day of the year</source>
          <target state="translated">年の日</target>
        </trans-unit>
        <trans-unit id="d0c32ae37c8ec0c5b70c6fbada27ade3b4484def" translate="yes" xml:space="preserve">
          <source>Debug options supported by the &lt;code&gt;start*&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;start*&lt;/code&gt; 関数でサポートされるデバッグオプション</target>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="translated">Debugger</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="4dbfbf2c1ca5c9cbf7ff86eebf9f1e60dfaae3c2" translate="yes" xml:space="preserve">
          <source>Debugging with the :sys module</source>
          <target state="translated">sys モジュールでのデバッグ</target>
        </trans-unit>
        <trans-unit id="49bac63211bb6e767f6bd201454a7033e302753a" translate="yes" xml:space="preserve">
          <source>Decodes &lt;code&gt;string&lt;/code&gt; as &quot;x-www-form-urlencoded&quot;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; を「x-www-form-urlencoded」としてデコードします。</target>
        </trans-unit>
        <trans-unit id="f7d7142bd19e1c0ea0198316fec06393f6cb0ea2" translate="yes" xml:space="preserve">
          <source>Decodes a base 16 encoded string into a binary string.</source>
          <target state="translated">ベース 16 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="fb034015ded81968d20fd5f7e210338ebd758879" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string into a binary string.</source>
          <target state="translated">ベース 32 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="885c7e9658ad97e9a9af45bd4781416e206a6334" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string with extended hexadecimal alphabet into a binary string.</source>
          <target state="translated">16 進数のアルファベットを拡張したベース 32 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="4b608e75a46b84e1feb5de2f9f73f4f8523e9f1d" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string into a binary string.</source>
          <target state="translated">ベース 64 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="b945eb1852da433ae69fcf285b6a56aed338e16f" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string with URL and filename safe alphabet into a binary string.</source>
          <target state="translated">URL とファイル名の安全なアルファベットを含むベース 64 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="12cd61b38813ead53840f88994a5a092cca61e7f" translate="yes" xml:space="preserve">
          <source>Decodes a query string into a map.</source>
          <target state="translated">クエリ文字列をマップにデコードします。</target>
        </trans-unit>
        <trans-unit id="624612278a208a23a0e8ccd36697aaa475bd3192" translate="yes" xml:space="preserve">
          <source>Decomposes a local or remote call into its remote part (when provided), function name and argument list.</source>
          <target state="translated">ローカルまたはリモートの呼び出しを、そのリモート部分 (提供されている場合)、関数名、および引数リストに分解します。</target>
        </trans-unit>
        <trans-unit id="7151035c3114809bda0193c2a85fa1a470935213" translate="yes" xml:space="preserve">
          <source>Default Unit</source>
          <target state="translated">デフォルトの単位</target>
        </trans-unit>
        <trans-unit id="6bcca2541d3f4eb99df509a0ef05a98d2f536b6d" translate="yes" xml:space="preserve">
          <source>Default arguments</source>
          <target state="translated">デフォルトの引数</target>
        </trans-unit>
        <trans-unit id="6593ff7fb992a5e5072fa654c1b194d94010d120" translate="yes" xml:space="preserve">
          <source>Default background color.</source>
          <target state="translated">デフォルトの背景色。</target>
        </trans-unit>
        <trans-unit id="6e98c72a394abdbcd4b12051bb239d5b6259e9ce" translate="yes" xml:space="preserve">
          <source>Default text color.</source>
          <target state="translated">デフォルトのテキスト色。</target>
        </trans-unit>
        <trans-unit id="89487e7c33b83cf47b069ff9b1fec8587ba1c7a6" translate="yes" xml:space="preserve">
          <source>Default translation for Erlang log messages.</source>
          <target state="translated">Erlangのログメッセージのデフォルトの翻訳。</target>
        </trans-unit>
        <trans-unit id="e19bd89011e61a7bb0e77dd718395ff863fa6b57" translate="yes" xml:space="preserve">
          <source>Default values and required keys</source>
          <target state="translated">デフォルト値と必須キー</target>
        </trans-unit>
        <trans-unit id="0b6846959c6ecef6294ea2738ab118ae06eb0104" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; for Elixir projects, &lt;code&gt;false&lt;/code&gt; for Erlang projects.</source>
          <target state="translated">Elixirプロジェクトのデフォルトは &lt;code&gt;true&lt;/code&gt; 、Erlangプロジェクトのデフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="86bc280a68c01f58573355e9cc73f727e31ec7ae" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; for Elixir projects, &lt;code&gt;false&lt;/code&gt; for Erlang projects. Note: if you set this to &lt;code&gt;false&lt;/code&gt; for an Elixir project, you will have to add paths to Elixir's &lt;code&gt;ebin&lt;/code&gt; directories to &lt;code&gt;ERL_LIBS&lt;/code&gt; environment variable when running the resulting escript, in order for the code loader to be able to find &lt;code&gt;:elixir&lt;/code&gt; application and its children applications (if they are used).</source>
          <target state="translated">Elixirプロジェクトの &lt;code&gt;true&lt;/code&gt; はデフォルトでtrue、Erlangプロジェクトの場合は &lt;code&gt;false&lt;/code&gt; です。注：Elixirプロジェクトでこれを &lt;code&gt;false&lt;/code&gt; に設定した場合、コードローダーが &lt;code&gt;:elixir&lt;/code&gt; アプリケーションとその子を検出できるようにするには、結果の &lt;code&gt;ERL_LIBS&lt;/code&gt; 実行するときに、Elixirの &lt;code&gt;ebin&lt;/code&gt; ディレクトリへのパスをERL_LIBS環境変数に追加する必要があります。アプリケーション（使用されている場合）。</target>
        </trans-unit>
        <trans-unit id="9d8d69c2362401ce4e3ef9f4dba08bffc1bb4866" translate="yes" xml:space="preserve">
          <source>Define a function from a string (&lt;a href=&quot;#function_from_string/5&quot;&gt;&lt;code&gt;function_from_string/5&lt;/code&gt;&lt;/a&gt;) or a file (&lt;a href=&quot;#function_from_file/5&quot;&gt;&lt;code&gt;function_from_file/5&lt;/code&gt;&lt;/a&gt;). This allows you to embed the template as a function inside a module which will then be compiled. This is the preferred API if you have access to the template at compilation time.</source>
          <target state="translated">文字列（&lt;a href=&quot;#function_from_string/5&quot;&gt; &lt;code&gt;function_from_string/5&lt;/code&gt; &lt;/a&gt;）またはファイル（&lt;a href=&quot;#function_from_file/5&quot;&gt; &lt;code&gt;function_from_file/5&lt;/code&gt; &lt;/a&gt;）から関数を定義します。これにより、テンプレートを関数としてモジュール内に埋め込み、モジュールをコンパイルすることができます。コンパイル時にテンプレートにアクセスできる場合は、これが推奨されるAPIです。</target>
        </trans-unit>
        <trans-unit id="d3da7d067c0e2af23683cd3618963a0c016ef27c" translate="yes" xml:space="preserve">
          <source>Define a function from a string (&lt;code&gt;function_from_string&lt;/code&gt;) or a file (&lt;code&gt;function_from_file&lt;/code&gt;). This allows you to embed the template as a function inside a module which will then be compiled. This is the preferred API if you have access to the template at compilation time.</source>
          <target state="translated">文字列（ &lt;code&gt;function_from_string&lt;/code&gt; ）またはファイル（ &lt;code&gt;function_from_file&lt;/code&gt; ）から関数を定義します。これにより、テンプレートを関数としてモジュール内に埋め込むことができます。モジュールはコンパイルされます。これは、コンパイル時にテンプレートにアクセスできる場合に推奨されるAPIです。</target>
        </trans-unit>
        <trans-unit id="02454c3ef87373b5da454ba33a54d81ec93d84e1" translate="yes" xml:space="preserve">
          <source>Define the &lt;code&gt;@shortdoc&lt;/code&gt; attribute if you wish to make the task publicly visible on &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt;. Omit this attribute if you do not want your task to be listed via &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;タスクを公開する場合は、 &lt;code&gt;@shortdoc&lt;/code&gt; 属性を定義します。&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;を介してタスクを一覧表示したくない場合は、この属性を省略してください。</target>
        </trans-unit>
        <trans-unit id="7af570fa4ced5be1c1e832e70770e29cb3378f42" translate="yes" xml:space="preserve">
          <source>Define the function explicitly (v1.0)</source>
          <target state="translated">関数を明示的に定義する (v1.0)</target>
        </trans-unit>
        <trans-unit id="bc125b89387e69b38c0b71432e6451758cd10e9b" translate="yes" xml:space="preserve">
          <source>Define the rollover moment for the given calendar.</source>
          <target state="translated">指定されたカレンダーのロールオーバーモーメントを定義します。</target>
        </trans-unit>
        <trans-unit id="cdc8ce38051bdb795b598be018ffa7c0e1241cd3" translate="yes" xml:space="preserve">
          <source>Defined as</source>
          <target state="translated">として定義されています。</target>
        </trans-unit>
        <trans-unit id="0e6d691613c83b20a4bdec6dda26151ba97d0294" translate="yes" xml:space="preserve">
          <source>Defines &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Mix.Shell&lt;/code&gt;&lt;/a&gt; contract.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Mix.Shell&lt;/code&gt; &lt;/a&gt;コントラクトを定義します。</target>
        </trans-unit>
        <trans-unit id="2c159947b8552c14519d220c3a6ddfaa0e00eeec" translate="yes" xml:space="preserve">
          <source>Defines ExUnit callbacks.</source>
          <target state="translated">ExUnit のコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="3fba28715c151409c38236ee7000eb4ed16c82f1" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;file#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;file#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt;によって返される&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stream&lt;/code&gt; &lt;/a&gt;構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="83a9409d00bd2dad95a1afabb5663ee3e1f46569" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;https://hexdocs.pm/elixir/File.html#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/File.html#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt;によって返される&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stream&lt;/code&gt; &lt;/a&gt;構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="718b6b621786a1acc4c26d42dbc485e26faf7eec" translate="yes" xml:space="preserve">
          <source>Defines a callback that runs once the test exits.</source>
          <target state="translated">テストが終了したら実行するコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="9200a3742bfb9e88c562c9f6f3ed2f69e18c6f67" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before all tests in a case.</source>
          <target state="translated">ケース内のすべてのテストの前に実行されるコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="4b6166591f75c5a4bf0202583ee95cba035668e8" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before each test in a case.</source>
          <target state="translated">ケース内の各テストの前に実行されるコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="d5bc2aab7b6f9616afc524a405cb7757608452d9" translate="yes" xml:space="preserve">
          <source>Defines a function callback according to the given type specification.</source>
          <target state="translated">指定された型指定に従って関数のコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="c5db38a50b427e41d0ad25365053a42c56f8a1f7" translate="yes" xml:space="preserve">
          <source>Defines a function that delegates to another module.</source>
          <target state="translated">他のモジュールにデリゲートする関数を定義します。</target>
        </trans-unit>
        <trans-unit id="307e106c43982d5b12630cb72b848406b819c6c6" translate="yes" xml:space="preserve">
          <source>Defines a function with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つ関数を定義します。</target>
        </trans-unit>
        <trans-unit id="f063e0d1325de98da63498e5fe376536a4c88d2c" translate="yes" xml:space="preserve">
          <source>Defines a macro callback according to the given type specification.</source>
          <target state="translated">指定された型指定に従ってマクロのコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="d1bdce6fb82524ea6dca239a6d1b4282ce120736" translate="yes" xml:space="preserve">
          <source>Defines a macro with the given name and body.</source>
          <target state="translated">指定された名前とボディを持つマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="45436ad823527d91893ee57c61d5208fd54f8f28" translate="yes" xml:space="preserve">
          <source>Defines a module given by name with the given contents.</source>
          <target state="translated">名前で与えられたモジュールを、与えられた内容で定義します。</target>
        </trans-unit>
        <trans-unit id="2b7b7c71d4c9f86dc9189095ea6eb365a7951119" translate="yes" xml:space="preserve">
          <source>Defines a module template to be used throughout your test suite.</source>
          <target state="translated">テストスイート全体で使用するモジュールテンプレートを定義します。</target>
        </trans-unit>
        <trans-unit id="cf550b43951705ff60d293e8451b26e72a1b3d68" translate="yes" xml:space="preserve">
          <source>Defines a new bitstring.</source>
          <target state="translated">新しいビット文字列を定義します。</target>
        </trans-unit>
        <trans-unit id="5e5448d0355663eca910a26c7f674b96bdfb1318" translate="yes" xml:space="preserve">
          <source>Defines a not implemented test with a string.</source>
          <target state="translated">実装されていないテストを文字列で定義します。</target>
        </trans-unit>
        <trans-unit id="3c2d3289caf113cf07d04f07d984ecc30b13bea4" translate="yes" xml:space="preserve">
          <source>Defines a private function with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つプライベート関数を定義します。</target>
        </trans-unit>
        <trans-unit id="08a09270f00cde41495279c24131c417ef5be1db" translate="yes" xml:space="preserve">
          <source>Defines a private macro with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つプライベートマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="234e236e77f17928fa5de859398ddc5049a5ff60" translate="yes" xml:space="preserve">
          <source>Defines a protocol.</source>
          <target state="translated">プロトコルを定義します。</target>
        </trans-unit>
        <trans-unit id="49de89ada1df4216656fd082e602510e9a3bfba6" translate="yes" xml:space="preserve">
          <source>Defines a public function with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つ公開関数を定義します。</target>
        </trans-unit>
        <trans-unit id="eb0c62dc473198ec220624054b59c8e5facbee00" translate="yes" xml:space="preserve">
          <source>Defines a public macro with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つパブリックマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="cf0422852f7761d300210619550ed122f7749dee" translate="yes" xml:space="preserve">
          <source>Defines a range.</source>
          <target state="translated">範囲を定義します。</target>
        </trans-unit>
        <trans-unit id="84d0bf0e5d21a052c34ad1cf8cc4fd2c0b2d922d" translate="yes" xml:space="preserve">
          <source>Defines a remote call, a call to an anonymous function, or an alias.</source>
          <target state="translated">リモート呼び出し、匿名関数への呼び出し、またはエイリアスを定義します。</target>
        </trans-unit>
        <trans-unit id="148ce01689924171178db559eb8519855c18cbf6" translate="yes" xml:space="preserve">
          <source>Defines a set of macros to create, access, and pattern match on a record.</source>
          <target state="translated">レコードの作成、アクセス、およびパターンマッチを行うためのマクロのセットを定義します。</target>
        </trans-unit>
        <trans-unit id="d43aa789386d3da190d548740ece58b49c1b5c28" translate="yes" xml:space="preserve">
          <source>Defines a struct.</source>
          <target state="translated">構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="e8fc9a0e945bdfdd9fe422d72e6867459e1dd52d" translate="yes" xml:space="preserve">
          <source>Defines a test with &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; を使用してテストを定義します。</target>
        </trans-unit>
        <trans-unit id="6ff008b3bfc5f520079685bb6518c7f8c263c332" translate="yes" xml:space="preserve">
          <source>Defines a test with a string.</source>
          <target state="translated">文字列でテストを定義します。</target>
        </trans-unit>
        <trans-unit id="e440b3cbec6e05424773317aba5a8cdb773dabba" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#stream/2&quot;&gt;&lt;code&gt;IO.stream/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">定義&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; が&lt;/a&gt;で返される構造体&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#stream/2&quot;&gt; &lt;code&gt;IO.stream/2&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81a4f177d77d4b3501935507c322bb13c914958e" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;io#stream/2&quot;&gt;&lt;code&gt;IO.stream/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;io#stream/2&quot;&gt; &lt;code&gt;IO.stream/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt;によって返される&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; &lt;/a&gt;構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="61d9e7c667e3e371baebf26eb4a1e174baee751d" translate="yes" xml:space="preserve">
          <source>Defines an anonymous function.</source>
          <target state="translated">匿名関数を定義します。</target>
        </trans-unit>
        <trans-unit id="1f336908a8420d524aec43e1dfa0a8c9f56be6ac" translate="yes" xml:space="preserve">
          <source>Defines an exception.</source>
          <target state="translated">例外を定義します。</target>
        </trans-unit>
        <trans-unit id="47c4eab1a12c9a4e9e5bfc15095c4f5f1e7f8420" translate="yes" xml:space="preserve">
          <source>Defines an implementation for the given protocol.</source>
          <target state="translated">指定したプロトコルの実装を定義します。</target>
        </trans-unit>
        <trans-unit id="7574e6578cdcbcf5986b0221d662d60206450586" translate="yes" xml:space="preserve">
          <source>Defines and manipulates Mix projects.</source>
          <target state="translated">Mixプロジェクトを定義して操作します。</target>
        </trans-unit>
        <trans-unit id="c87324807b8cf7ca458804ea8ef4c07d69ba7fe6" translate="yes" xml:space="preserve">
          <source>Defines options for module compilation. This is used to configure both Elixir and Erlang compilers, as any other compilation pass added by external tools. For example:</source>
          <target state="translated">モジュールのコンパイルオプションを定義します。これはElixirとErlangの両方のコンパイラを設定するために使われます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="51d68b5790fad1de6d84cef24485698c5aa44718" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a supervisor which will be started with the given arguments.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; を、指定された引数で開始されるスーパーバイザとして定義します。</target>
        </trans-unit>
        <trans-unit id="a74b181531a071dccf103975ef9b5f457594135a" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a worker which will be started with the given arguments.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; を、指定された引数で開始されるワーカーとして定義します。</target>
        </trans-unit>
        <trans-unit id="5ba739f06f65411df500be4fe361a087cd34108a" translate="yes" xml:space="preserve">
          <source>Defines the options used by the &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルで使用されるオプションを定義します。</target>
        </trans-unit>
        <trans-unit id="1e7e7a56a0498c33eb4666ce267e88fdd0443785" translate="yes" xml:space="preserve">
          <source>Defines the options used by the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルで使用されるオプションを定義します。</target>
        </trans-unit>
        <trans-unit id="706e656786be6150857ba9d00e3f4736e1b09e1e" translate="yes" xml:space="preserve">
          <source>Defines the release structure and convenience for assembling releases.</source>
          <target state="translated">リリースを組み立てる際のリリース構造と利便性を定義します。</target>
        </trans-unit>
        <trans-unit id="f752321778df74391c3378581723efb4dca5e78b" translate="yes" xml:space="preserve">
          <source>Defines warnings to request or suppress when using a version of &lt;code&gt;:dialyzer&lt;/code&gt; that supports module attributes.</source>
          <target state="translated">モジュール属性をサポートする &lt;code&gt;:dialyzer&lt;/code&gt; のバージョンを使用するときに要求または抑制する警告を定義します。</target>
        </trans-unit>
        <trans-unit id="99cdfc3cbea74f1f4372e3c3f255ee42a2f77809" translate="yes" xml:space="preserve">
          <source>Defining a protocol automatically defines a type named &lt;code&gt;t&lt;/code&gt;, which can be used as follows:</source>
          <target state="translated">プロトコルを定義すると、 &lt;code&gt;t&lt;/code&gt; という名前のタイプが自動的に定義されます。これは、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="eed610b2a524f1fea8a5a11a6b90ab2b660a40c7" translate="yes" xml:space="preserve">
          <source>Defining a specification</source>
          <target state="translated">仕様の定義</target>
        </trans-unit>
        <trans-unit id="375bfa92ccfe2bd509e0a5a5c9ecb19ed5761bbc" translate="yes" xml:space="preserve">
          <source>Defining behaviours</source>
          <target state="translated">行動の定義</target>
        </trans-unit>
        <trans-unit id="1ea27e7345dd55520e1c3fd955a1961190ab35d0" translate="yes" xml:space="preserve">
          <source>Defining custom guard expressions</source>
          <target state="translated">カスタムガード式の定義</target>
        </trans-unit>
        <trans-unit id="67ee31ce55d3432708e003e7896d5c65897de368" translate="yes" xml:space="preserve">
          <source>Defining custom operators</source>
          <target state="translated">カスタム演算子の定義</target>
        </trans-unit>
        <trans-unit id="88f1538130a6f0b0a36142a4e1e014b6b0b27ac0" translate="yes" xml:space="preserve">
          <source>Defining custom types</source>
          <target state="translated">カスタムタイプの定義</target>
        </trans-unit>
        <trans-unit id="fbb6738813740f5989865f0caccc2aedd14ecd4c" translate="yes" xml:space="preserve">
          <source>Defining custom types can help communicate the intention of your code and increase its readability. Custom types can be defined within modules via the &lt;code&gt;@type&lt;/code&gt; attribute.</source>
          <target state="translated">カスタムタイプを定義すると、コードの意図を伝え、読みやすさを向上させることができます。カスタムタイプは、 &lt;code&gt;@type&lt;/code&gt; 属性を介してモジュール内で定義できます。</target>
        </trans-unit>
        <trans-unit id="da279c1a631ba36a0429ee2b6ef866ee7c040663" translate="yes" xml:space="preserve">
          <source>Defining extracted records with anonymous functions in the values</source>
          <target state="translated">抽出されたレコードを匿名関数で値に定義する</target>
        </trans-unit>
        <trans-unit id="d271da3ed06fd6bd866bb6e79184abd537c3512e" translate="yes" xml:space="preserve">
          <source>Defining function specs this way works, but it quickly becomes annoying since we&amp;rsquo;re repeating the type &lt;code&gt;{number, String.t}&lt;/code&gt; over and over. We can use the &lt;code&gt;@type&lt;/code&gt; directive in order to declare our own custom type.</source>
          <target state="translated">このように関数仕様を定義すると機能しますが、タイプ &lt;code&gt;{number, String.t}&lt;/code&gt; を何度も繰り返しているため、すぐに煩わしくなります。 &lt;code&gt;@type&lt;/code&gt; ディレクティブを使用して、独自のカスタムタイプを宣言できます。</target>
        </trans-unit>
        <trans-unit id="0b772a8609651705eb8dde2b64b91c2000ee893a" translate="yes" xml:space="preserve">
          <source>Defining function specs this way works, but we end up repeating the type &lt;code&gt;{number, String.t}&lt;/code&gt; over and over. We can use the &lt;code&gt;@type&lt;/code&gt; attribute to declare our own custom type and cut down on the repetition.</source>
          <target state="translated">この方法で関数仕様を定義することはできますが、タイプ &lt;code&gt;{number, String.t}&lt;/code&gt; を何度も繰り返すことになります。 &lt;code&gt;@type&lt;/code&gt; 属性を使用して、独自のカスタムタイプを宣言し、繰り返しを減らすことができます。</target>
        </trans-unit>
        <trans-unit id="9fec1dfeb38c397bddde90cce354ec968be3e685" translate="yes" xml:space="preserve">
          <source>Defining structs</source>
          <target state="translated">構造体の定義</target>
        </trans-unit>
        <trans-unit id="ac3516b411710c30e4cd006454c7f1994a4da34a" translate="yes" xml:space="preserve">
          <source>Delegation only works with functions; delegating macros is not supported.</source>
          <target state="translated">委任は関数でのみ機能し、マクロの委任はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e726a77011c0fe0cd388991d477e194ae9fd7af2" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;value&lt;/code&gt; from &lt;code&gt;map_set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_set&lt;/code&gt; から &lt;code&gt;value&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="7197d992ec2d7887544bc401d08055b1f065eeeb" translate="yes" xml:space="preserve">
          <source>Deletes a path from the Erlang VM code path list. This is the list of directories the Erlang VM uses for finding module code.</source>
          <target state="translated">Erlang VMのコードパスリストからパスを削除します。これはErlang VMがモジュールコードを見つけるのに使うディレクトリのリストです。</target>
        </trans-unit>
        <trans-unit id="23800ac90aacec2911367a4560daa8ed5fec9cb1" translate="yes" xml:space="preserve">
          <source>Deletes an environment variable.</source>
          <target state="translated">環境変数を削除します。</target>
        </trans-unit>
        <trans-unit id="28cada09dd4174a63836f40b25ecf14ff7e1c534" translate="yes" xml:space="preserve">
          <source>Deletes generated application files.</source>
          <target state="translated">生成されたアプリケーションファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="e6a3899638112ac7460e060d887ef65128ba4bb0" translate="yes" xml:space="preserve">
          <source>Deletes logging level for all modules to primary level</source>
          <target state="translated">すべてのモジュールのロギングレベルをプライマリレベルに削除します。</target>
        </trans-unit>
        <trans-unit id="e51596caccd970cb4a08314add121664dd042408" translate="yes" xml:space="preserve">
          <source>Deletes logging level for given module to primary level.</source>
          <target state="translated">指定されたモジュールのロギング・レベルをプライマリ・レベルに削除します。</target>
        </trans-unit>
        <trans-unit id="666b6e6f3ed57f226d5de485fc7c0243f6bedb5a" translate="yes" xml:space="preserve">
          <source>Deletes registry metadata for the given &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt;.</source>
          <target state="translated">レジストリ内の指定された &lt;code&gt;key&lt;/code&gt; レジストリメタデータを削除し &lt;code&gt;registry&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6511b55cc1b351a9cd395e58f52ffa508ee0de39" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;code&gt;key&lt;/code&gt; from the given &lt;code&gt;app&lt;/code&gt; environment.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; 環境から &lt;code&gt;key&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="cda458e47c2adb906a94c0b5117cdc3d628bc0de" translate="yes" xml:space="preserve">
          <source>Deletes the child specification identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;child_id&lt;/code&gt; で識別される子仕様を削除します。</target>
        </trans-unit>
        <trans-unit id="06519f5a98d8a9576fa45c95f0c76ae133cbfd51" translate="yes" xml:space="preserve">
          <source>Deletes the element at the given &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;tuple&lt;/code&gt;. Raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is negative or greater than or equal to the length of &lt;code&gt;tuple&lt;/code&gt;. Index is zero-based.</source>
          <target state="translated">&lt;code&gt;tuple&lt;/code&gt; から指定された &lt;code&gt;index&lt;/code&gt; 要素を削除します。上昇させる&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;場合 &lt;code&gt;index&lt;/code&gt; 負またはより大きいであるかの長さに等しい &lt;code&gt;tuple&lt;/code&gt; 。インデックスはゼロベースです。</target>
        </trans-unit>
        <trans-unit id="fd3c9b264d49ac26b30c967deba1cf019e912877" translate="yes" xml:space="preserve">
          <source>Deletes the element at the given &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;tuple&lt;/code&gt;. Raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is negative or greater than or equal to the length of &lt;code&gt;tuple&lt;/code&gt;. Index is zero-based.</source>
          <target state="translated">指定された &lt;code&gt;index&lt;/code&gt; 要素を &lt;code&gt;tuple&lt;/code&gt; から削除します。 &lt;code&gt;index&lt;/code&gt; が負であるか、 &lt;code&gt;tuple&lt;/code&gt; の長さ以上の場合、&lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; を発生&lt;/a&gt;させます。インデックスはゼロベースです。</target>
        </trans-unit>
        <trans-unit id="768479db33c4ea83d038f3e75c0b46d08cfff3a1" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; を持つ &lt;code&gt;key&lt;/code&gt; キーワードリストのエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="30f8ea2c4a41f9ff990549664a0c3e8cc979a2f3" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; キーワードリストのエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="e356fc985f5b4c45501dcdd4bf05b2d169dc820a" translate="yes" xml:space="preserve">
          <source>Deletes the entry in &lt;code&gt;map&lt;/code&gt; for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; &lt;code&gt;map&lt;/code&gt; 内のエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="84bf7f6c44bf7d1a25fea2eb0b485822b94e4057" translate="yes" xml:space="preserve">
          <source>Deletes the first entry in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; キーワードリストの最初のエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="f8205134472497de5f123b07ed4ca04623561776" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;element&lt;/code&gt; from the &lt;code&gt;list&lt;/code&gt;. Returns a new list without the element.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; から指定された &lt;code&gt;element&lt;/code&gt; を削除します。要素なしの新しいリストを返します。</target>
        </trans-unit>
        <trans-unit id="6931640e5585d21423be80c31e8281e15f83ebe2" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;key&lt;/code&gt; from the process dictionary.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; をプロセスディクショナリから削除します。</target>
        </trans-unit>
        <trans-unit id="96c74c6ec914e8875fe5447015216dd83996fdd6" translate="yes" xml:space="preserve">
          <source>Deletes the given dependencies' files, including build artifacts and fetched sources.</source>
          <target state="translated">ビルド成果物やフェッチされたソースを含む、指定された依存関係のファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="241d39fd9168ac37f5f1398b699e96cae08161ab" translate="yes" xml:space="preserve">
          <source>Deletes the module attribute that matches the given key.</source>
          <target state="translated">指定されたキーに一致するモジュール属性を削除します。</target>
        </trans-unit>
        <trans-unit id="a7699468279a4b12f6e55a5ad1b8c725c2c3ca8c" translate="yes" xml:space="preserve">
          <source>Demonitors the monitor identified by the given &lt;code&gt;reference&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reference&lt;/code&gt; によって識別されるモニターを監視解除します。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="ca0bdefd221fdbfd10bc0f3013fa9c019ef6808e" translate="yes" xml:space="preserve">
          <source>Dependencies and umbrella projects</source>
          <target state="translated">依存関係とアンブレラプロジェクト</target>
        </trans-unit>
        <trans-unit id="a491fbe030b9498ae78cd8f4bbd75506aa4b23b5" translate="yes" xml:space="preserve">
          <source>Dependencies are loaded again, now with an updated env environment</source>
          <target state="translated">依存関係が再びロードされ、環境が更新されました。</target>
        </trans-unit>
        <trans-unit id="0aeab4e8a30c470967346544f8d2eeabc88b3b63" translate="yes" xml:space="preserve">
          <source>Dependencies between applications in an umbrella project must still be explicitly defined and Mix makes it easy to do so. Open up &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; and change the &lt;code&gt;deps/0&lt;/code&gt; function to the following:</source>
          <target state="translated">アンブレラプロジェクトのアプリケーション間の依存関係は明示的に定義する必要があり、Mixを使用すると簡単に定義できます。 &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; を開き、 &lt;code&gt;deps/0&lt;/code&gt; 関数を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="20c4e61613e0bb2759ad45cedce4f0b014181be0" translate="yes" xml:space="preserve">
          <source>Dependencies must be specified in the &lt;code&gt;mix.exs&lt;/code&gt; file in one of the following formats:</source>
          <target state="translated">依存関係は、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルで次のいずれかの形式で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="fc73fac5fc75582095a6f843e32787bf5448edd3" translate="yes" xml:space="preserve">
          <source>Dependencies types</source>
          <target state="translated">依存関係の種類</target>
        </trans-unit>
        <trans-unit id="1313d46d93e4456c33c34bdf877a2b31296e6f6b" translate="yes" xml:space="preserve">
          <source>Dependencies within an umbrella project</source>
          <target state="translated">アンブレラプロジェクト内の依存関係</target>
        </trans-unit>
        <trans-unit id="2ae4f4df59c1f88916b85e951202eefbff4c7b68" translate="yes" xml:space="preserve">
          <source>Dependency definition options</source>
          <target state="translated">依存関係定義オプション</target>
        </trans-unit>
        <trans-unit id="8ef7583b0e7ed117ec9a27cd09f5e8d10632bf4f" translate="yes" xml:space="preserve">
          <source>Depending on the accumulator value, the result returned by &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt; will change. Please check the &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; type documentation for more information.</source>
          <target state="translated">アキュムレータの値に応じて、&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; &lt;/a&gt;によって返される結果が変わります。詳細については、&lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt;タイプのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="ac1bc59655cdca7840ee9bf9d55721f13ebb7a55" translate="yes" xml:space="preserve">
          <source>Depending on the accumulator value, the result returned by &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt; will change. Please check the &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; type documentation for more information.</source>
          <target state="translated">アキュムレータの値に応じて、&lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; &lt;/a&gt;によって返される結果は変化します。詳細については、&lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt;タイプのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="8d458ed0bd596292bbe634a9b96cac2cab2e4961" translate="yes" xml:space="preserve">
          <source>Deployments</source>
          <target state="translated">Deployments</target>
        </trans-unit>
        <trans-unit id="4962f760a0cc6ed936dcedffadba8733dd81e124" translate="yes" xml:space="preserve">
          <source>Deploys a given module's BEAM code to a list of nodes.</source>
          <target state="translated">与えられたモジュールのBEAMコードをノードのリストにデプロイします。</target>
        </trans-unit>
        <trans-unit id="f6ef72731d9f2999dced5cdda829d282f60229ed" translate="yes" xml:space="preserve">
          <source>Deprecated feature</source>
          <target state="translated">非推奨機能</target>
        </trans-unit>
        <trans-unit id="e5135ac9aa0f3adf0ead688638a7cada98f65645" translate="yes" xml:space="preserve">
          <source>Deprecated function to retrieve old documentation format.</source>
          <target state="translated">古いドキュメントフォーマットを取得するための機能が廃止されました。</target>
        </trans-unit>
        <trans-unit id="355cf2e1caeb8e5de974f3e0ee6f449e9a16967c" translate="yes" xml:space="preserve">
          <source>Deprecated mechanism to retrieve the last exception stacktrace.</source>
          <target state="translated">最後の例外のスタックトレースを取得するための非推奨のメカニズム。</target>
        </trans-unit>
        <trans-unit id="34730e9bbd5c0ba7b7655973316eed44e39da85f" translate="yes" xml:space="preserve">
          <source>Deprecations</source>
          <target state="translated">Deprecations</target>
        </trans-unit>
        <trans-unit id="8189415262d9b40fadd78cc759dd14fdb9868384" translate="yes" xml:space="preserve">
          <source>Deps task</source>
          <target state="translated">デプスタスク</target>
        </trans-unit>
        <trans-unit id="1751cb6240f8427862c44d9fda1a1acebc588f2b" translate="yes" xml:space="preserve">
          <source>Derives the &lt;code&gt;protocol&lt;/code&gt; for &lt;code&gt;module&lt;/code&gt; with the given options.</source>
          <target state="translated">指定されたオプションで &lt;code&gt;module&lt;/code&gt; の &lt;code&gt;protocol&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="b1f507cfab066377ebfd776c06ce8c6ae1d1dfae" translate="yes" xml:space="preserve">
          <source>Deriving</source>
          <target state="translated">Deriving</target>
        </trans-unit>
        <trans-unit id="469b2320b22b8de425b1224d561debab3b7e4eec" translate="yes" xml:space="preserve">
          <source>Describes tests together.</source>
          <target state="translated">テストを一緒に記述します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="373b67a9ef6e15b48984d2e64ecfb18feb928f40" translate="yes" xml:space="preserve">
          <source>Design principles</source>
          <target state="translated">設計原理</target>
        </trans-unit>
        <trans-unit id="9c5959e7ab4938c2e1595e724f3e5f686f3d536b" translate="yes" xml:space="preserve">
          <source>Destructures two lists, assigning each term in the right one to the matching term in the left one.</source>
          <target state="translated">2つのリストを分解し、右のリストの各項を左のリストの一致する項に代入します。</target>
        </trans-unit>
        <trans-unit id="55519a961a5691717096efcabf1914eee5dab5a5" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;integer&lt;/code&gt; is odd.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; が奇数かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="026e5ca0dfda1ad25fabda732fd35af3e32e25b5" translate="yes" xml:space="preserve">
          <source>Determines if an &lt;code&gt;integer&lt;/code&gt; is even.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; が偶数かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="ada7ef5eac5cda7b071d8c84d536d21adaaabe11" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;enumerable&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; が空かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="240590c512304822fc6f9051f63c5097957b51d1" translate="yes" xml:space="preserve">
          <source>Determines if the date given is valid according to the proleptic Gregorian calendar.</source>
          <target state="translated">指定した日付がプロレプティック・グレゴリオ暦に基づいて有効かどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="76efef7f9a49f47616dc673a59a2c3e837af4cb0" translate="yes" xml:space="preserve">
          <source>Determines whether a given file path (supplied to ExUnit/Mix as arguments on the command line) includes a line number filter, and if so returns the appropriate ExUnit configuration options.</source>
          <target state="translated">指定したファイルパス (コマンドラインで引数として ExUnit/Mix に渡したもの)に行番号フィルタが含まれているかどうかを調べ、含まれている場合は適切な ExUnit の設定オプションを返します。</target>
        </trans-unit>
        <trans-unit id="8ecb9b726f00ef60a6a7e35454782b134568f041" translate="yes" xml:space="preserve">
          <source>Developers can also use &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt; to build &lt;strong&gt;releases&lt;/strong&gt;. Releases are able to package all of your source code as well as the Erlang VM into a single directory. Releases also give you explicit control over how each application is started and in which order. They also provide a more streamlined mechanism for starting and stopping systems, debugging, logging, as well as system monitoring.</source>
          <target state="translated">開発者は、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;を使用してリリースをビルドすることもでき&lt;strong&gt;ます&lt;/strong&gt;。リリースでは、すべてのソースコードとErlangVMを1つのディレクトリにパッケージ化できます。リリースでは、各アプリケーションの起動方法と順序を明示的に制御することもできます。また、システムの起動と停止、デバッグ、ロギング、およびシステム監視のためのより合理化されたメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="b906ed370d76a314f78611272f97a7c5324fbfb8" translate="yes" xml:space="preserve">
          <source>Developers can also use tools like &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt; that build &lt;strong&gt;releases&lt;/strong&gt;. Releases are able to package all of your source code as well as the Erlang VM into a single directory. Releases also give you explicit control over how each application is started and in which order. They also provide a more streamlined mechanism for starting and stopping systems, debugging, logging, as well as system monitoring.</source>
          <target state="translated">開発者は、&lt;strong&gt;リリース&lt;/strong&gt;をビルドする&lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt;などのツールを使用することもでき&lt;strong&gt;ます&lt;/strong&gt;。リリースでは、すべてのソースコードとErlang VMを単一のディレクトリにパッケージ化できます。リリースでは、各アプリケーションの起動方法と順序を明示的に制御することもできます。また、システムの起動と停止、デバッグ、ロギング、およびシステム監視のためのより合理化されたメカニズムも提供します。</target>
        </trans-unit>
        <trans-unit id="17f25608342d4ab77bb1907f884cfe439bc54de0" translate="yes" xml:space="preserve">
          <source>Developers may also implement their own backends, an option that is explored in more detail below.</source>
          <target state="translated">開発者は独自のバックエンドを実装することもできます。</target>
        </trans-unit>
        <trans-unit id="0f26c5755a434f3e16da5992d7fb7b82ce5cc7eb" translate="yes" xml:space="preserve">
          <source>Developers may also use umbrella projects to break large business domains apart. The caution here is to make sure the domains don&amp;rsquo;t depend on each other (also known as cyclic dependencies). If you run into such situations, it means those applications are not as isolated from each other as you originally thought, and you have architectural and design issues to solve.</source>
          <target state="translated">開発者は、大規模なビジネスドメインを分割するために包括的なプロジェクトを使用することもできます。ここでの注意は、ドメインが互いに依存しないようにすることです（循環依存とも呼ばれます）。このような状況に遭遇した場合は、それらのアプリケーションが当初考えていたほど相互に分離されておらず、解決すべきアーキテクチャと設計の問題があることを意味します。</target>
        </trans-unit>
        <trans-unit id="f8e1b365eba8e74b8bfe96cbfcdf64fb1b529aa8" translate="yes" xml:space="preserve">
          <source>Developers may want to customize the VM flags and environment variables given when the release starts. This is typically done by customizing two files inside your release: &lt;code&gt;releases/RELEASE_VSN/vm.args&lt;/code&gt; and &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; (or &lt;code&gt;env.bat&lt;/code&gt; on Windows).</source>
          <target state="translated">開発者は、リリースの開始時に指定されるVMフラグと環境変数をカスタマイズすることをお勧めします。これは通常、リリース内の2つのファイル &lt;code&gt;releases/RELEASE_VSN/vm.args&lt;/code&gt; と &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; （またはWindowsの場合は &lt;code&gt;env.bat&lt;/code&gt; ）をカスタマイズすることによって行われます。</target>
        </trans-unit>
        <trans-unit id="b4df092ce16103b5263190978f954da4abebc038" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; struct directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;構造体を直接作成しないでください。代わりに、このモジュールによって提供される関数とサードパーティのカレンダーライブラリの関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9399f0af7289ccae2bbfba26b54d6beaa45eceaa" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Date structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、Date 構造体を直接作成することは避け、代わりにこのモジュールが提供する関数やサードパーティのカレンダー・ライブラリの関数に依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="372765583e2c62003b134d7cd14c816d752b1af8" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the NaiveDateTime structs directly and instead, rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、NaiveDateTime構造体を直接作成することは避け、代わりに、このモジュールが提供する関数やサードパーティのカレンダー・ライブラリの関数に依存するようにしてください。</target>
        </trans-unit>
        <trans-unit id="055215a2dc231830ec70e2ea3ed245f009feefc1" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Time structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、Time 構造体を直接作成することは避け、このモジュールが提供する関数やサードパーティのカレンダー・ライブラリの関数に頼るようにしてください。</target>
        </trans-unit>
        <trans-unit id="9189bcb16b1c4a850379e209c0a8399dce99e6b1" translate="yes" xml:space="preserve">
          <source>Developers typically interact with the application environment and its callback module. Therefore those will be the topics we will cover first before jumping into details about the application resource file and life-cycle.</source>
          <target state="translated">開発者は通常、アプリケーション環境とそのコールバックモジュールと対話します。そのため、アプリケーションのリソースファイルやライフサイクルの詳細に飛び込む前に、最初にこれらのトピックを取り上げます。</target>
        </trans-unit>
        <trans-unit id="99b414f7b11d4d2f5dc034b2a293c66c101f5ce2" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">開発者は通常、initコールバックの最後に&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; &lt;/a&gt;を呼び出して、適切な監視フラグを返します。</target>
        </trans-unit>
        <trans-unit id="49670694b8769b5d39822cc3c17e46c76506631f" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">開発者は通常、initコールバックの最後に&lt;a href=&quot;#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; &lt;/a&gt;を呼び出して、適切な監視フラグを返します。</target>
        </trans-unit>
        <trans-unit id="a0f9f33bf587fbe7754189054b93906eb196c38a" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">開発者は通常、initコールバックの最後に&lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; &lt;/a&gt;を呼び出して、適切な監視フラグを返します。</target>
        </trans-unit>
        <trans-unit id="c23ae07b94722ec4976e1fcb3346ba8a18a11515" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;supervisor#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">開発者は通常、initコールバックの最後に&lt;a href=&quot;supervisor#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; &lt;/a&gt;を呼び出して、適切な監視フラグを返します。</target>
        </trans-unit>
        <trans-unit id="c943b3eb860130726114a82a12d17559028bcef9" translate="yes" xml:space="preserve">
          <source>Developing in Elixir does not make your code free of race conditions. However, Elixir&amp;rsquo;s abstractions where nothing is shared by default make it easier to spot a race condition&amp;rsquo;s root cause.</source>
          <target state="translated">Elixirで開発しても、コードが競合状態から解放されるわけではありません。ただし、デフォルトでは何も共有されないエリクサーの抽象化により、競合状態の根本原因を特定しやすくなります。</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="6b689de83c32738e6559500bab1e32306f72a975" translate="yes" xml:space="preserve">
          <source>Diagnostic information such as a warning or compilation error.</source>
          <target state="translated">警告やコンパイルエラーなどの診断情報。</target>
        </trans-unit>
        <trans-unit id="3550a4a38c380e14df95457cd13d6dabbd0c0b20" translate="yes" xml:space="preserve">
          <source>Dict</source>
          <target state="translated">Dict</target>
        </trans-unit>
        <trans-unit id="28a9d7ddb98e082ecef8831bdb74b74701f20d77" translate="yes" xml:space="preserve">
          <source>Differences from &lt;code&gt;defmodule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;defmodule&lt;/code&gt; との違い</target>
        </trans-unit>
        <trans-unit id="951f149c561762e46794ae9088e9246ba02fb48d" translate="yes" xml:space="preserve">
          <source>Differences to &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt;違い/ 1</target>
        </trans-unit>
        <trans-unit id="5d20542733f8e0c7eb21a37d3a9649be5cfd67f9" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows. You may call &lt;a href=&quot;#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; to normalize the path before invoking this function.</source>
          <target state="translated">ディレクトリ区切り文字は、Windowsでも、常に &lt;code&gt;/&lt;/code&gt; として記述する必要があります。この関数を呼び出す前に、&lt;a href=&quot;#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; &lt;/a&gt;を呼び出してパスを正規化することができます。</target>
        </trans-unit>
        <trans-unit id="7664bc212e56811cb62a63d951c16c5ee311e137" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows. You may call &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; to normalize the path before invoking this function.</source>
          <target state="translated">Windowsであっても、ディレクトリセパレータは常に &lt;code&gt;/&lt;/code&gt; として記述する必要があります。あなたは呼び出すこと&lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; を&lt;/a&gt;、この関数を呼び出す前にパスを正規化します。</target>
        </trans-unit>
        <trans-unit id="07461fdd8bbd77721cfe447edf9e4bd20cbd0023" translate="yes" xml:space="preserve">
          <source>Directory structure</source>
          <target state="translated">ディレクトリ構造</target>
        </trans-unit>
        <trans-unit id="5095c2a8d43020f623949798775e0dea6df3427e" translate="yes" xml:space="preserve">
          <source>Disables logging for the current process.</source>
          <target state="translated">現在のプロセスのロギングを無効にします。</target>
        </trans-unit>
        <trans-unit id="3243542aa799d7700902fa9d17f21c898a51bd23" translate="yes" xml:space="preserve">
          <source>Dispatching happens in the process that calls &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; either serially or concurrently in case of multiple partitions (via spawned tasks). The registered processes are not involved in dispatching unless involving them is done explicitly (for example, by sending them a message in the callback).</source>
          <target state="translated">ディスパッチは、（生成されたタスクを介して）複数のパーティションの場合に、&lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; を&lt;/a&gt;シリアルまたは同時に呼び出すプロセスで発生します。登録されたプロセスは、明示的に（たとえば、コールバックでメッセージを送信することによって）実行されない限り、ディスパッチに関与しません。</target>
        </trans-unit>
        <trans-unit id="129dd56090745e370bed845813615f5c08f21b2a" translate="yes" xml:space="preserve">
          <source>Distributed tasks</source>
          <target state="translated">分散タスク</target>
        </trans-unit>
        <trans-unit id="aef0124ef44afd7de1feb0a9b09b0c6ee2798fe2" translate="yes" xml:space="preserve">
          <source>Distributed tasks and tags</source>
          <target state="translated">分散タスクとタグ</target>
        </trans-unit>
        <trans-unit id="b4c7a18ac5c24ec1029c892a8a7fb3fbcc59af1d" translate="yes" xml:space="preserve">
          <source>Distributed tasks are exactly the same as supervised tasks. The only difference is that we pass the node name when spawning the task on the supervisor. Open up &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; from the &lt;code&gt;:kv&lt;/code&gt; application. Let&amp;rsquo;s add a task supervisor as the last child of the tree:</source>
          <target state="translated">分散タスクは、監視対象タスクとまったく同じです。唯一の違いは、スーパーバイザーでタスクを起動するときにノード名を渡すことです。 &lt;code&gt;:kv&lt;/code&gt; アプリケーションから &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; を開きます。ツリーの最後の子としてタスクスーパーバイザーを追加します。</target>
        </trans-unit>
        <trans-unit id="98348afa0d882c80ed7d05917265b30ff93c136a" translate="yes" xml:space="preserve">
          <source>Divides a string into parts based on a pattern.</source>
          <target state="translated">パターンに基づいて文字列を分割します。</target>
        </trans-unit>
        <trans-unit id="4f19d3c5ba97dc473a0dd975ca453b2aa1eeca76" translate="yes" xml:space="preserve">
          <source>Divides a string into substrings at each Unicode whitespace occurrence with leading and trailing whitespace ignored. Groups of whitespace are treated as a single occurrence. Divisions do not occur on non-breaking whitespace.</source>
          <target state="translated">文字列を、先頭と末尾の空白を無視して Unicode の空白が出現するたびに部分文字列に分割します。空白のグループは、単一の出現として扱われます。分割は、改行していない空白には発生しません。</target>
        </trans-unit>
        <trans-unit id="d81ee0347de2d9ae77f2a442736c72a2f69253b7" translate="yes" xml:space="preserve">
          <source>Do not call this function at the tail of another function. Due to tail call optimization, a stacktrace entry would not be added and the stacktrace would be incorrectly trimmed. Therefore make sure at least one expression (or an atom such as &lt;code&gt;:ok&lt;/code&gt;) follows the &lt;a href=&quot;#warn/1&quot;&gt;&lt;code&gt;IO.warn/1&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">この関数を別の関数の末尾で呼び出さないでください。末尾呼び出しの最適化により、スタックトレースエントリは追加されず、スタックトレースは正しくトリミングされませんでした。したがって、少なくとも1つの式（または &lt;code&gt;:ok&lt;/code&gt; などのアトム）が&lt;a href=&quot;#warn/1&quot;&gt; &lt;code&gt;IO.warn/1&lt;/code&gt; &lt;/a&gt;呼び出しの後に続くことを確認してください。</target>
        </trans-unit>
        <trans-unit id="6e4d17c0fddf7977be47a1ef9b14e7b1d0cef265" translate="yes" xml:space="preserve">
          <source>Do not rely on the particular format returned by the &lt;code&gt;format*&lt;/code&gt; functions in this module. They may be changed in future releases in order to better suit Elixir's tool chain. In other words, by using the functions in this module it is guaranteed you will format exceptions as in the current Elixir version being used.</source>
          <target state="translated">このモジュールの &lt;code&gt;format*&lt;/code&gt; 関数によって返される特定の形式に依存しないでください。Elixirのツールチェーンにより適合するように、将来のリリースで変更される可能性があります。つまり、このモジュールの関数を使用することにより、使用されている現在のElixirバージョンのように例外をフォーマットすることが保証されます。</target>
        </trans-unit>
        <trans-unit id="7ed32458ab08d1762c48c121c3b7d606e8351db4" translate="yes" xml:space="preserve">
          <source>Do not rely on them as they may change or be fully removed in future versions of the language. They are often used by &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;quote/2&lt;/code&gt;&lt;/a&gt; and the compiler to provide features like hygiene, better error messages, and so forth.</source>
          <target state="translated">それらは言語の将来のバージョンで変更または完全に削除される可能性があるため、それらに依存しないでください。これらは、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt; &lt;code&gt;quote/2&lt;/code&gt; &lt;/a&gt;およびコンパイラーによって、衛生状態、より優れたエラーメッセージなどの機能を提供するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="cc7bc96b42e95f7c693c3ce91032568e412218c3" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt; to find the runtime configuration. Use it only to configure aspects of your project (like compilation directories) and not your application runtime.</source>
          <target state="translated">&lt;a href=&quot;#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt;を使用してランタイム構成を検索しないでください。これは、アプリケーションのランタイムではなく、プロジェクトの側面（コンパイルディレクトリなど）を構成するためにのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="9f4fd1f0a9baed4ec08ef8c1f9bda3731a7c9d57" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C=/2&quot;&gt;&lt;code&gt;&amp;lt;=/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3E=/2&quot;&gt;&lt;code&gt;&amp;gt;=/2&lt;/code&gt;&lt;/a&gt; and friends when sorting structs. That's because the built-in operators above perform structural comparison and not a semantic one. Imagine we sort the following list of dates:</source>
          <target state="translated">構造体をソートするときは、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C=/2&quot;&gt; &lt;code&gt;&amp;lt;=/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3E=/2&quot;&gt; &lt;code&gt;&amp;gt;=/2&lt;/code&gt; &lt;/a&gt;などを使用しないでください。これは、上記の組み込み演算子がセマンティック比較ではなく構造比較を実行するためです。次の日付のリストを並べ替えるとします。</target>
        </trans-unit>
        <trans-unit id="5be89a1272cff39c64911be3f9a33057d2a2263c" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;mix.project#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt; to find the runtime configuration. Use it only to configure aspects of your project (like compilation directories) and not your application runtime.</source>
          <target state="translated">ランタイム構成を見つけるために&lt;a href=&quot;mix.project#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt;を使用しないでください。これは、アプリケーションのランタイムではなく、プロジェクトの要素（コンパイルディレクトリなど）の構成にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="a8d3dcf5e3a5a8a9d6963913c532d9b07e33dbf9" translate="yes" xml:space="preserve">
          <source>Do not use special match variables &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; and &lt;code&gt;:&quot;$$&quot;&lt;/code&gt;, because they might not work as expected.</source>
          <target state="translated">特殊な一致変数 &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; および &lt;code&gt;:&quot;$$&quot;&lt;/code&gt; を使用しないでください。これらは期待どおりに機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="9078c7f338a72de9ec9a277913417c733a31c6ad" translate="yes" xml:space="preserve">
          <source>Do not use this function to generate a sequence of numbers. If blocking the caller process is not necessary, use &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; instead.</source>
          <target state="translated">この関数を使用して一連の数値を生成しないでください。呼び出し元プロセスをブロックする必要がない場合は、 &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="3c967365f49cb78e9480b70b6bc54898d3348c0d" translate="yes" xml:space="preserve">
          <source>Doctest will looking for a line starting with &lt;code&gt;** (&lt;/code&gt; and it will parse it accordingly to extract the exception name and message. The exception parser will consider all following lines part of the exception message until there is an empty line or there is a new expression prefixed with &lt;code&gt;iex&amp;gt;&lt;/code&gt;. Therefore, it is possible to match on multiline messages as long as there are no empty lines on the message itself.</source>
          <target state="translated">Doctestは、 &lt;code&gt;** (&lt;/code&gt; 始まる行を探します（それに応じて解析し、例外名とメッセージを抽出します。例外パーサーは、空の行が存在するか、新しい式が存在するまで、後続のすべての行を例外メッセージの一部と見なします。プレフィックスは &lt;code&gt;iex&amp;gt;&lt;/code&gt; です。したがって、メッセージ自体に空の行がない限り、複数行のメッセージで一致させることができます。</target>
        </trans-unit>
        <trans-unit id="5e01c221d853296d84e769113c74b2df4ca129d1" translate="yes" xml:space="preserve">
          <source>Doctests</source>
          <target state="translated">Doctests</target>
        </trans-unit>
        <trans-unit id="54cc8e778254d8263003ab87576a482705e9e652" translate="yes" xml:space="preserve">
          <source>Doctests allow us to generate tests from code examples found in &lt;code&gt;@moduledoc&lt;/code&gt; and &lt;code&gt;@doc&lt;/code&gt; attributes. To do this, invoke the &lt;a href=&quot;#doctest/1&quot;&gt;&lt;code&gt;doctest/1&lt;/code&gt;&lt;/a&gt; macro from within your test case and ensure your code examples are written according to the syntax and guidelines below.</source>
          <target state="translated">doctestのは、私たちがで見つかったコードの例からテストを生成することができ &lt;code&gt;@moduledoc&lt;/code&gt; と &lt;code&gt;@doc&lt;/code&gt; 属性を。これを行うには、テストケース内から&lt;a href=&quot;#doctest/1&quot;&gt; &lt;code&gt;doctest/1&lt;/code&gt; &lt;/a&gt;マクロを呼び出し、コード例が以下の構文とガイドラインに従って記述されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="fd6f84b7484c0cf7709bebbb23583c23abf1b083" translate="yes" xml:space="preserve">
          <source>Doctests are specified by an indentation of four spaces followed by the &lt;code&gt;iex&amp;gt;&lt;/code&gt; prompt in a documentation string. If a command spans multiple lines, you can use &lt;code&gt;...&amp;gt;&lt;/code&gt;, as in IEx. The expected result should start at the next line after &lt;code&gt;iex&amp;gt;&lt;/code&gt; or &lt;code&gt;...&amp;gt;&lt;/code&gt; line(s) and is terminated either by a newline or a new &lt;code&gt;iex&amp;gt;&lt;/code&gt; prefix.</source>
          <target state="translated">doctestは、4つのスペースのインデントとそれに続く &lt;code&gt;iex&amp;gt;&lt;/code&gt; プロンプトによって説明されています。コマンドが複数行にわたる場合は、IExのように &lt;code&gt;...&amp;gt;&lt;/code&gt; を使用できます。期待される結果は、 &lt;code&gt;iex&amp;gt;&lt;/code&gt; または &lt;code&gt;...&amp;gt;&lt;/code&gt; 行の次の行で始まり、改行または新しい &lt;code&gt;iex&amp;gt;&lt;/code&gt; 接頭辞で終了します。</target>
        </trans-unit>
        <trans-unit id="acfc0021db2710ad6e5c5976444819b508e6a8e7" translate="yes" xml:space="preserve">
          <source>Doctests, patterns and with</source>
          <target state="translated">Doctests、パターンと</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="dbeb3b73b289a45968e86a1c4e28757eddbb7b21" translate="yes" xml:space="preserve">
          <source>Documentation != Code comments</source>
          <target state="translated">ドキュメント !=コードコメント</target>
        </trans-unit>
        <trans-unit id="dc66ec30a9e7992a7f99224cd60ef6a9e6f7c515" translate="yes" xml:space="preserve">
          <source>Documentation in Elixir is usually attached to module attributes. Let's see an example:</source>
          <target state="translated">Elixirのドキュメントは通常、モジュールの属性に添付されています。例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d46677a0ad1e404b917f0ea8b3b31b80c34ffa5f" translate="yes" xml:space="preserve">
          <source>Documentation metadata</source>
          <target state="translated">ドキュメントのメタデータ</target>
        </trans-unit>
        <trans-unit id="fcb85c951e6d656fcd603d110a64fcd8866200d9" translate="yes" xml:space="preserve">
          <source>Documents in a group are attempted to be rendered together to the best of the renderer ability.</source>
          <target state="translated">グループ内のドキュメントは、レンダラーの能力が最大限に発揮されるように一緒にレンダリングされようとします。</target>
        </trans-unit>
        <trans-unit id="e86919b582b64b77ec53c038e64ee362a74d9398" translate="yes" xml:space="preserve">
          <source>Does not include fractional seconds.</source>
          <target state="translated">端数秒は含まれません。</target>
        </trans-unit>
        <trans-unit id="7bd6d91ba0fc6656f3596671325c2a8e0bccb23f" translate="yes" xml:space="preserve">
          <source>Does not load any of the implementations.</source>
          <target state="translated">いずれの実装もロードしません。</target>
        </trans-unit>
        <trans-unit id="e1c5568ff1b2696956a80de3fbdad95c454b1c9a" translate="yes" xml:space="preserve">
          <source>Does not load any of the protocols.</source>
          <target state="translated">プロトコルをロードしません。</target>
        </trans-unit>
        <trans-unit id="c263be485f93e4de275853028d24c5388efd78f6" translate="yes" xml:space="preserve">
          <source>Doing 0.1 * 0.1 should return 0.01, but because 0.1 is actually 0.1000000014, the result is 0.010000000000000002, and because this is not the closest representable number to 0.01, you'll get the wrong result for this operation</source>
          <target state="translated">0.1*0.1 を実行すると 0.01 が返されるはずですが、0.1 は実際には 0.1000000014 なので、結果は 0.010000000000000002 となり、これは 0.01 に最も近い表現可能な数ではないので、この操作では間違った結果が得られます。</target>
        </trans-unit>
        <trans-unit id="576aa93d193455e3276b07f4cd2af71d8167c617" translate="yes" xml:space="preserve">
          <source>Doing it in reverse order will raise a syntax error:</source>
          <target state="translated">逆順に行うと構文エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a56ad56b6280b6eca6747cdcbe707267d3443caf" translate="yes" xml:space="preserve">
          <source>Domain-specific languages</source>
          <target state="translated">ドメイン固有の言語</target>
        </trans-unit>
        <trans-unit id="e6ab4e40cdc60406c301246d5709b2813b1c0221" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t drink the kool aid</source>
          <target state="translated">クールエイドを飲まない</target>
        </trans-unit>
        <trans-unit id="bfd4ab20e5eed869032f79c7d0b2472213257269" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that you can also check the &lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;source code of Elixir itself&lt;/a&gt;, which is mostly written in Elixir (mainly the &lt;code&gt;lib&lt;/code&gt; directory), or &lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;explore Elixir&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">ほとんどがElixir（主に &lt;code&gt;lib&lt;/code&gt; ディレクトリ）で記述されている&lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;Elixir自体のソースコードを&lt;/a&gt;チェックしたり&lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;、Elixirのドキュメントを調べ&lt;/a&gt;たりすることもできます。</target>
        </trans-unit>
        <trans-unit id="5db8bef0a01561d7d57f3c78471d1ef61330dd5e" translate="yes" xml:space="preserve">
          <source>Dot operator. Defines a remote call, a call to an anonymous function, or an alias.</source>
          <target state="translated">ドット演算子。リモート呼び出し、匿名関数への呼び出し、またはエイリアスを定義します。</target>
        </trans-unit>
        <trans-unit id="8e3dff4b81533f75ceec6a97ebb6191aa309061e" translate="yes" xml:space="preserve">
          <source>Drops elements at the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が真の値を返す間、 &lt;code&gt;enumerable&lt;/code&gt; 要素の先頭に要素をドロップします。</target>
        </trans-unit>
        <trans-unit id="594f287d9f0bd3fb9ea891584418c737436dd38e" translate="yes" xml:space="preserve">
          <source>Drops the &lt;code&gt;amount&lt;/code&gt; of elements from the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; から要素の &lt;code&gt;amount&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="ab32b2e5c71cd1c17d36b26a0d25edc63a27b074" translate="yes" xml:space="preserve">
          <source>Drops the given &lt;code&gt;keys&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;keys&lt;/code&gt; を &lt;code&gt;map&lt;/code&gt; から削除します。</target>
        </trans-unit>
        <trans-unit id="cdb8b8343fe7d1adbf36b056e528d2571ea6a12c" translate="yes" xml:space="preserve">
          <source>Drops the given keys from the keyword list.</source>
          <target state="translated">指定したキーをキーワードリストから削除します。</target>
        </trans-unit>
        <trans-unit id="69c0475e80c404bbdc2d49a7a643fb10c6ace760" translate="yes" xml:space="preserve">
          <source>Due to immutability, loops in Elixir (as in any functional programming language) are written differently from imperative languages. For example, in an imperative language like C, one would write:</source>
          <target state="translated">不変性のため、Elixirのループは(他の関数型プログラミング言語と同様に)命令型言語とは異なる書き方をします。例えば、C言語のような命令型言語では、次のように書きます。</target>
        </trans-unit>
        <trans-unit id="5cf07ff6fe7f2d796d09183c5eda29bcd66f1127" translate="yes" xml:space="preserve">
          <source>Due to their cons cell based representation, prepending an element to a list is always fast (constant time), while appending becomes slower as the list grows in size (linear time):</source>
          <target state="translated">consセルベースの表現のため、リストへの要素の前置は常に高速(一定時間)ですが、リストのサイズが大きくなるにつれて追記は遅くなります(線形時間)。</target>
        </trans-unit>
        <trans-unit id="4f1ef09b3bb7845a809a8a0e2e38529155ed603e" translate="yes" xml:space="preserve">
          <source>Due to their laziness, streams are useful when working with large (or even infinite) collections. When chaining many operations with &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, intermediate lists are created, while &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; creates a recipe of computations that are executed at a later moment. Let's see another example:</source>
          <target state="translated">ストリームは遅延があるため、大規模な（または無限の）コレクションを扱う場合に役立ちます。&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; を使用して&lt;/a&gt;多くの操作をチェーンすると、中間リストが作成され、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;は後で実行される計算のレシピを作成します。別の例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="bb320794ee00a758f7983100b77521dd3b189d58" translate="yes" xml:space="preserve">
          <source>Due to their laziness, streams are useful when working with large (or even infinite) collections. When chaining many operations with &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, intermediate lists are created, while &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; creates a recipe of computations that are executed at a later moment. Let's see another example:</source>
          <target state="translated">ストリームは怠惰であるため、大規模な（または無限の）コレクションを操作するときに役立ちます。&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; を使用して&lt;/a&gt;多くの操作を連鎖させると、中間リストが作成されますが、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;は、後で実行される計算のレシピを作成します。別の例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="1d4a3188c65902a880f35052cd6e431c13b80b5a" translate="yes" xml:space="preserve">
          <source>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the &lt;code&gt;__foo__&lt;/code&gt; format. For example, every module in Elixir has an &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#c:__info__/1&quot;&gt;&lt;code&gt;__info__/1&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このプロパティにより、Elixirはアンダースコアで始まる関数に依存して、コンパイル時のメタデータをモジュールにアタッチします。このような関数は、ほとんどの場合 &lt;code&gt;__foo__&lt;/code&gt; 形式です。たとえば、Elixirのすべてのモジュールには&lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#c:__info__/1&quot;&gt; &lt;code&gt;__info__/1&lt;/code&gt; &lt;/a&gt;関数があります。</target>
        </trans-unit>
        <trans-unit id="9895fb241f7b45a9dc3e35cea835d242910bcea5" translate="yes" xml:space="preserve">
          <source>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the &lt;code&gt;__foo__&lt;/code&gt; format. For example, every module in Elixir has an &lt;a href=&quot;module#c:__info__/1&quot;&gt;&lt;code&gt;__info__/1&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">このプロパティのため、Elixirはモジュールにコンパイル時メタデータを添付するためにアンダースコアで始まる関数に依存しています。そのような関数は、ほとんどの場合 &lt;code&gt;__foo__&lt;/code&gt; 形式です。たとえば、Elixirのすべてのモジュールには&lt;a href=&quot;module#c:__info__/1&quot;&gt; &lt;code&gt;__info__/1&lt;/code&gt; &lt;/a&gt;関数があります。</target>
        </trans-unit>
        <trans-unit id="e98f40360712c64e6a04a39d7c38770f1fe9b496" translate="yes" xml:space="preserve">
          <source>Duplicate keys and ordering</source>
          <target state="translated">合鍵と注文</target>
        </trans-unit>
        <trans-unit id="7d17d072820769c205a9be99134b8181cc1f8d63" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">重複したエントリは削除され、最新のエントリが優先されます。 &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt; とは異なり、 &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; はキーが一意であることを保証します。</target>
        </trans-unit>
        <trans-unit id="076f63ae0f418e3862988b172f7c4cc5852450a8" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">重複したエントリは削除され、最新のエントリが優先されます。 &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt; とは異なり、 &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; はキーが一意であることを保証します。</target>
        </trans-unit>
        <trans-unit id="64aa4fe0da505292ed7a57df0b239e0d4183ccec" translate="yes" xml:space="preserve">
          <source>Duplicated keys appear duplicated in the final list of keys.</source>
          <target state="translated">重複した鍵は、最終的な鍵のリストに重複して表示されます。</target>
        </trans-unit>
        <trans-unit id="efdd2fd6681b594f9b79a82e9b5aa48b4fbf5e9b" translate="yes" xml:space="preserve">
          <source>Duplicated keys are not removed.</source>
          <target state="translated">重複したキーは削除されません。</target>
        </trans-unit>
        <trans-unit id="ac53e68a8e0e729bf98aeec7ce7b6340de177d35" translate="yes" xml:space="preserve">
          <source>Duplicated keys are preserved in the new keyword list.</source>
          <target state="translated">重複したキーは、新しいキーワードリストに保存されます。</target>
        </trans-unit>
        <trans-unit id="b3b6f1eeffe99ed90517ec6eae526962d142636d" translate="yes" xml:space="preserve">
          <source>Duplicated keys are removed; the latest one prevails.</source>
          <target state="translated">重複したキーは削除され、最新のものが優先される。</target>
        </trans-unit>
        <trans-unit id="9ba8d07a9bc46aeb1c779fab12a8b4dd715ff170" translate="yes" xml:space="preserve">
          <source>Duplicates the given element &lt;code&gt;n&lt;/code&gt; times in a list.</source>
          <target state="translated">リスト内の指定された要素を &lt;code&gt;n&lt;/code&gt; 回複製します。</target>
        </trans-unit>
        <trans-unit id="612d35050e691a1a2b9f22fe6b8f2fde9cb8f9d1" translate="yes" xml:space="preserve">
          <source>Dynamic dispatch</source>
          <target state="translated">ダイナミックディスパッチ</target>
        </trans-unit>
        <trans-unit id="edd7dafc098b4b13db6ad466bd4e821198c0337f" translate="yes" xml:space="preserve">
          <source>Dynamic names</source>
          <target state="translated">動的な名前</target>
        </trans-unit>
        <trans-unit id="46d2782a295d697a8b9e27c2d91c25f66bfd854d" translate="yes" xml:space="preserve">
          <source>Dynamic supervisors</source>
          <target state="translated">動的スーパーバイザ</target>
        </trans-unit>
        <trans-unit id="3aa9130077fcc44c7eb24ab3a909359998b572f0" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor</source>
          <target state="translated">DynamicSupervisor</target>
        </trans-unit>
        <trans-unit id="4981d257018e7d749e02934b79c0b6bdb94f8f95" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">DynamicSupervisorの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7ba279830cac8f3b7ac440b34f16c258d525250e" translate="yes" xml:space="preserve">
          <source>Dynamically adds a child specification to &lt;code&gt;supervisor&lt;/code&gt; and starts that child.</source>
          <target state="translated">子仕様を &lt;code&gt;supervisor&lt;/code&gt; 動的に追加し、その子を開始します。</target>
        </trans-unit>
        <trans-unit id="887cf55c60fc1c9af6689bd5e2a2c3b3766133c3" translate="yes" xml:space="preserve">
          <source>Dynamically supervised tasks</source>
          <target state="translated">動的に管理されたタスク</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="5b16ec2483e166fe049f665c022763eabe66f30f" translate="yes" xml:space="preserve">
          <source>EEx</source>
          <target state="translated">EEx</target>
        </trans-unit>
        <trans-unit id="af3993684170f3f24c787f9d7ffb881775da9c68" translate="yes" xml:space="preserve">
          <source>EEx has the concept of engines which allows you to modify or transform the code extracted from the given string or file.</source>
          <target state="translated">EExにはエンジンという概念があり、与えられた文字列やファイルから抽出されたコードを変更したり、変換したりすることができます。</target>
        </trans-unit>
        <trans-unit id="818fc332cfd248836c5442317677dfe04bdbbd73" translate="yes" xml:space="preserve">
          <source>EEx stands for Embedded Elixir. It allows you to embed Elixir code inside a string in a robust way.</source>
          <target state="translated">EExはEmbedded Elixirの略です。これにより、Elixirのコードを文字列の中に堅牢な方法で埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="22a24f67ecb347cc9015ff6237454fdbf0669653" translate="yes" xml:space="preserve">
          <source>EEx.Engine &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">EEx.Engineの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eebf2acaee05e7c09c816457012d68bbfc96c6f3" translate="yes" xml:space="preserve">
          <source>EEx.SmartEngine</source>
          <target state="translated">EEx.SmartEngine</target>
        </trans-unit>
        <trans-unit id="674e9c18d21c34b87c83982cf9afa4d95159a4be" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError</source>
          <target state="translated">EEx.SyntaxError</target>
        </trans-unit>
        <trans-unit id="49bba56082c8e3c9fff304ab7864ed3cb3a25fb5" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">EEx.SyntaxError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="98d18c239604c617df6f8788536838fd25d8c03d" translate="yes" xml:space="preserve">
          <source>EEx: &lt;code&gt;&amp;lt;%=&lt;/code&gt; in middle and end expressions</source>
          <target state="translated">EEx：中間式と終了式の &lt;code&gt;&amp;lt;%=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1b4d835a11a6493d1e10defe1536a05fda39d532" translate="yes" xml:space="preserve">
          <source>ELixir tracks three types of dependencies between modules: compile, exports, and runtime. If a module has a compile time dependency on another module, the caller module has to be recompiled whenever the callee changes. Compile-time dependencies are typically added when using macros or when invoking functions in the module body (outside of functions).</source>
          <target state="translated">ELixirはモジュール間の3種類の依存関係を追跡します:コンパイル、エクスポート、ランタイムです。あるモジュールが他のモジュールにコンパイル時依存性を持つ場合、呼び出し元のモジュールは呼び出し元が変更されるたびに再コンパイルしなければなりません。コンパイル時の依存関係は、通常、マクロを使用するときや、モジュール本体の中で関数を呼び出すときに追加されます(関数の外側)。</target>
        </trans-unit>
        <trans-unit id="7eceb14d6ed554f3e39c3487db659c8d63e28acd" translate="yes" xml:space="preserve">
          <source>ETS</source>
          <target state="translated">ETS</target>
        </trans-unit>
        <trans-unit id="1500176ef8cc8bfbbaf08eb4c1316bcf890f3395" translate="yes" xml:space="preserve">
          <source>ETS (Erlang Term Storage)</source>
          <target state="translated">ETS (Erlang Term Storage)</target>
        </trans-unit>
        <trans-unit id="4f5a2cc3fa91eb59c67ada064593bcea69c5e3b4" translate="yes" xml:space="preserve">
          <source>ETS allows us to store any Elixir term in an in-memory table. Working with ETS tables is done via &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlang&amp;rsquo;s &lt;code&gt;:ets&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">ETSを使用すると、Elixir用語をメモリ内のテーブルに保存できます。ETSテーブルの操作は、&lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlangの &lt;code&gt;:ets&lt;/code&gt; モジュールを&lt;/a&gt;介して行われます。</target>
        </trans-unit>
        <trans-unit id="8e8dd8378100a7f6cf535d73f581bb5835a296a0" translate="yes" xml:space="preserve">
          <source>ETS as a cache</source>
          <target state="translated">キャッシュとしてのETS</target>
        </trans-unit>
        <trans-unit id="0c6b672feadc74b2fa303a786fd5682cec52505f" translate="yes" xml:space="preserve">
          <source>ETS lets you create a table containing tuples. By default, ETS tables are protected, which means only the owner process may write to the table but any other process can read. ETS has some functionality to allow a table to be used as a simple database, a key-value store or as a cache mechanism.</source>
          <target state="translated">ETS を使用すると、タプルを含むテーブルを作成することができます。デフォルトでは、ETS のテーブルは保護されています。つまり、所有者のプロセスだけがテーブルに書き込むことができますが、他のプロセスは読み取ることができます。ETSには、テーブルを単純なデータベース、キー値ストア、キャッシュメカニズムとして使用するための機能があります。</target>
        </trans-unit>
        <trans-unit id="52adb6284390fce5741221672f061e71df403d05" translate="yes" xml:space="preserve">
          <source>ETS tables can also be named, allowing us to access them by a given name:</source>
          <target state="translated">ETSテーブルには名前を付けることもでき、与えられた名前でアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="362cea4d522d64f424e9ad3e438c8000b26fb5c9" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;enumerable&lt;/code&gt; element is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be linked to the current process, similarly to &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 各要素は、引数として与えられた関数 &lt;code&gt;fun&lt;/code&gt; に渡され、独自のタスクによって処理されます。タスクは&lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt;と同様に現在のプロセスにリンクされます。</target>
        </trans-unit>
        <trans-unit id="c70223b508f5fb20c656733438516d9c4a38e207" translate="yes" xml:space="preserve">
          <source>Each application has an environment that stores the application&amp;rsquo;s specific configuration by key. For example, we could store the routing table in the &lt;code&gt;:kv&lt;/code&gt; application environment, giving it a default value and allowing other applications to change the table as needed.</source>
          <target state="translated">各アプリケーションには、アプリケーションの特定の構成をキー別に格納する環境があります。たとえば、ルーティングテーブルを &lt;code&gt;:kv&lt;/code&gt; アプリケーション環境に格納して、デフォルト値を指定し、他のアプリケーションが必要に応じてテーブルを変更できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="3405035bc16c9169ba3e4eb3a0b15b99fd33b0e0" translate="yes" xml:space="preserve">
          <source>Each application has its own environment. The environment is a keyword list that maps atoms to terms. Note that this environment is unrelated to the operating system environment.</source>
          <target state="translated">各アプリケーションはそれぞれ独自の環境を持っています。環境は、アトムを用語にマッピングするキーワードリストです。この環境はオペレーティング・システム環境とは無関係であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="30b77596010e1d94e168b64218473fa0c4476548" translate="yes" xml:space="preserve">
          <source>Each application in our system can be started and stopped. The rules for starting and stopping an application are also defined in the &lt;code&gt;.app&lt;/code&gt; file. When we invoke &lt;code&gt;iex -S mix&lt;/code&gt;, Mix compiles our application and then starts it.</source>
          <target state="translated">システム内の各アプリケーションは、開始および停止できます。アプリケーションの起動と停止のルールも &lt;code&gt;.app&lt;/code&gt; ファイルで定義されています。 &lt;code&gt;iex -S mix&lt;/code&gt; を呼び出すと、Mixはアプリケーションをコンパイルしてから起動します。</target>
        </trans-unit>
        <trans-unit id="6ee7cee4e35c13e97e0b113c7ad93de2b2e9f9ff" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/2&quot;&gt;&lt;code&gt;async/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、与えられた関数 &lt;code&gt;fun&lt;/code&gt; に引数として渡され、独自のタスクによって処理されます。タスクは、&lt;a href=&quot;#async/2&quot;&gt; &lt;code&gt;async/2&lt;/code&gt; &lt;/a&gt;と同様に、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、現在のプロセスにリンクされます。</target>
        </trans-unit>
        <trans-unit id="0bff2b054449ef93f88ae378fceaa7c3773b512d" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、与えられた関数 &lt;code&gt;fun&lt;/code&gt; に引数として渡され、独自のタスクによって処理されます。タスクは、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、&lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt;と同様に、現在のプロセスにリンクされません。</target>
        </trans-unit>
        <trans-unit id="f8ff31374c6e0e1792073cfd7bf59921a2ee8196" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/4&quot;&gt;&lt;code&gt;async_nolink/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、指定された &lt;code&gt;args&lt;/code&gt; 前に追加され、独自のタスクによって処理されます。タスクは、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、&lt;a href=&quot;#async_nolink/4&quot;&gt; &lt;code&gt;async_nolink/4&lt;/code&gt; &lt;/a&gt;と同様に現在のプロセスにリンクされません。</target>
        </trans-unit>
        <trans-unit id="3e074b39ec3a1ed372a909c0a3201829b19421e8" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be linked to an intermediate process that is then linked to the current process. This means a failure in a task terminates the current process and a failure in the current process terminates all tasks.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、指定された &lt;code&gt;args&lt;/code&gt; 前に追加され、独自のタスクによって処理されます。タスクは、現在のプロセスにリンクされている中間プロセスにリンクされます。つまり、タスクの失敗により現在のプロセスが終了し、現在のプロセスの失敗によりすべてのタスクが終了します。</target>
        </trans-unit>
        <trans-unit id="ea81b39bec07b5eca51e7cb8e73b08cc88b185e5" translate="yes" xml:space="preserve">
          <source>Each element will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/4&quot;&gt;&lt;code&gt;async/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各要素は指定された &lt;code&gt;args&lt;/code&gt; 前に追加され、独自のタスクによって処理されます。タスクは、&lt;a href=&quot;#async/4&quot;&gt; &lt;code&gt;async/4&lt;/code&gt; &lt;/a&gt;と同様に、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、現在のプロセスにリンクされます。</target>
        </trans-unit>
        <trans-unit id="d6a3bdb3211b725603f1e420065f9f512a455e5f" translate="yes" xml:space="preserve">
          <source>Each entry in the registry is associated to the process that has registered the key. If the process crashes, the keys associated to that process are automatically removed. All key comparisons in the registry are done using the match operation (&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">レジストリの各エントリは、キーを登録したプロセスに関連付けられています。プロセスがクラッシュした場合、そのプロセスに関連付けられているキーは自動的に削除されます。レジストリ内のすべてのキー比較は、一致操作（&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;）を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="77459e85ee4402d66fd92ef0b7844cafe8faeccd" translate="yes" xml:space="preserve">
          <source>Each entry in the registry is associated to the process that has registered the key. If the process crashes, the keys associated to that process are automatically removed. All key comparisons in the registry are done using the match operation (&lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">レジストリの各エントリは、キーを登録したプロセスに関連付けられています。プロセスがクラッシュすると、そのプロセスに関連付けられたキーは自動的に削除されます。レジストリ内のすべてのキー比較は、一致操作（&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;）を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="f51dcc2b38618bcc3fe87f6cb31bfc9d58a91577" translate="yes" xml:space="preserve">
          <source>Each item in the list is a map with the following keys:</source>
          <target state="translated">リストの各項目は、以下のキーを持つマップです。</target>
        </trans-unit>
        <trans-unit id="532f0099dc0a59c8142722d964bd46289ef70cfc" translate="yes" xml:space="preserve">
          <source>Each key-value pair in the map is converted to a two-element tuple &lt;code&gt;{key, value}&lt;/code&gt; in the resulting list.</source>
          <target state="translated">マップ内の各キーと値のペアは、結果のリストで2要素のタプル &lt;code&gt;{key, value}&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="4934170f741619738531430df9405d17c3b39b24" translate="yes" xml:space="preserve">
          <source>Each module can be decorated with one or more attributes. The following ones are currently defined by Elixir:</source>
          <target state="translated">各モジュールは、1つ以上の属性で装飾することができます。現在Elixirでは以下のものが定義されています。</target>
        </trans-unit>
        <trans-unit id="9ac8e172618067a3e6bc12be54b49bfe15535ac3" translate="yes" xml:space="preserve">
          <source>Each module gets an &lt;code&gt;__info__/1&lt;/code&gt; function when it's compiled. The function takes one of the following items:</source>
          <target state="translated">各モジュールは、コンパイル時に &lt;code&gt;__info__/1&lt;/code&gt; 関数を取得します。この関数は次のいずれかの項目を取ります。</target>
        </trans-unit>
        <trans-unit id="e4ebc93808a7013b1682e04607e3d5c0727d33dc" translate="yes" xml:space="preserve">
          <source>Each number given to a binary is meant to represent a byte and therefore must go up to 255. Binaries allow modifiers to be given to store numbers bigger than 255 or to convert a code point to its UTF-8 representation:</source>
          <target state="translated">バイナリに与えられる各数値はバイトを表すものであるため、255までの数値を表す必要があります。バイナリでは、255よりも大きな数値を格納したり、コードポイントをUTF-8表現に変換したりするための修飾子を与えることができます。</target>
        </trans-unit>
        <trans-unit id="86d9329e1ed2a43e214726a374900569c7bc6fae" translate="yes" xml:space="preserve">
          <source>Each process started with the application must be listed as a child under the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; above. We call those &quot;static processes&quot; because they are known upfront. For handling dynamic processes, such as the ones started during requests and other user inputs, look at the &lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">アプリケーションで開始された各プロセスは、上記の&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;下に子としてリストされている必要があります。これらは事前にわかっているため、「静的プロセス」と呼びます。要求やその他のユーザー入力中に開始されるような動的プロセスの処理については、&lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="372725c1f82abeb98e09b054fcea454db1d9af25" translate="yes" xml:space="preserve">
          <source>Each process started with the application must be listed as a child under the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; above. We call those &quot;static processes&quot; because they are known upfront. For handling dynamic processes, such as the ones started during requests and other user inputs, look at the &lt;a href=&quot;dynamicsupervisor&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">アプリケーションで開始された各プロセスは、上記の&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;下に子としてリストされている必要があります。それらは前もって知られているため、これらを「静的プロセス」と呼びます。リクエストやその他のユーザー入力中に開始されたプロセスなどの動的プロセスの処理については、&lt;a href=&quot;dynamicsupervisor&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;モジュールをご覧ください。</target>
        </trans-unit>
        <trans-unit id="b076bdb70baef474140c948c212f1de89050946f" translate="yes" xml:space="preserve">
          <source>Each registered SCM will be asked if they consume this dependency, receiving &lt;code&gt;[github: &quot;foo/bar&quot;]&lt;/code&gt; as argument. Since this option makes sense for the Git SCM, it will return an update list of options while other SCMs would simply return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">登録された各SCMは、引数として &lt;code&gt;[github: &quot;foo/bar&quot;]&lt;/code&gt; を受け取り、この依存関係を消費するかどうかを尋ねられます。このオプションはGitSCMにとって意味があるため、オプションの更新リストを返しますが、他のSCMは単に &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0c52364e96da340fb31c3249f2e8693baeb5686f" translate="yes" xml:space="preserve">
          <source>Each task has its own options and sometimes specific configuration to be defined in the &lt;code&gt;project/0&lt;/code&gt; function. You can use &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; to list all available tasks and &lt;code&gt;mix help NAME&lt;/code&gt; to show help for a particular task.</source>
          <target state="translated">各タスクには独自のオプションがあり、 &lt;code&gt;project/0&lt;/code&gt; 関数で定義される特定の構成がある場合もあります。&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;を使用して使用可能なすべてのタスクを一覧表示し、 &lt;code&gt;mix help NAME&lt;/code&gt; を使用して特定のタスクのヘルプを表示できます。</target>
        </trans-unit>
        <trans-unit id="a1a597396bbd78d869061e9cc988eca475a9257e" translate="yes" xml:space="preserve">
          <source>Each task has its own options and sometimes specific configuration to be defined in the &lt;code&gt;project/0&lt;/code&gt; function. You can use &lt;a href=&quot;mix.tasks.help&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; to list all available tasks and &lt;code&gt;mix help NAME&lt;/code&gt; to show help for a particular task.</source>
          <target state="translated">各タスクには独自のオプションがあり、 &lt;code&gt;project/0&lt;/code&gt; 関数で定義される特定の構成が含まれる場合もあります。&lt;a href=&quot;mix.tasks.help&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;を使用して、使用可能なすべてのタスクをリストし、 &lt;code&gt;mix help NAME&lt;/code&gt; を使用して特定のタスクのヘルプを表示できます。</target>
        </trans-unit>
        <trans-unit id="bcac1b6f9d120c9722086c7e508489b0226da684" translate="yes" xml:space="preserve">
          <source>Each variable is identified by a tuple of two elements, where the first element is the variable name as an atom and the second element is its context, which may be an atom or an integer.</source>
          <target state="translated">各変数は2つの要素のタプルで識別され、第1の要素は原子としての変数名であり、第2の要素はそのコンテキストであり、原子でも整数でもよい。</target>
        </trans-unit>
        <trans-unit id="68310c7d97bd5e9d47967e9e9edcb285e94d70ff" translate="yes" xml:space="preserve">
          <source>Eager to learn more? Keep reading!</source>
          <target state="translated">もっと知りたいですか?読み続けてください</target>
        </trans-unit>
        <trans-unit id="773015863b8b24712e29c53fe98994b9728f6381" translate="yes" xml:space="preserve">
          <source>Eager vs Lazy</source>
          <target state="translated">熱心さと怠惰さ</target>
        </trans-unit>
        <trans-unit id="28ac06af2cb7839cf14f9821c41dfad421032a0a" translate="yes" xml:space="preserve">
          <source>Echo server</source>
          <target state="translated">エコーサーバー</target>
        </trans-unit>
        <trans-unit id="eeccb169551120a3e6a633e63e844185e028c154" translate="yes" xml:space="preserve">
          <source>Edit the file at &lt;code&gt;lib/kv/registry.ex&lt;/code&gt;, filling in the blanks for the client API:</source>
          <target state="translated">&lt;code&gt;lib/kv/registry.ex&lt;/code&gt; にあるファイルを編集し、クライアントAPIの空白を埋めます。</target>
        </trans-unit>
        <trans-unit id="ddd5726bf13c26ce5252aef42e6ba8f0c851bd53" translate="yes" xml:space="preserve">
          <source>Elements are compared using &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素は&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="25857c2157bff6e7a9f798c89b04873173125f2d" translate="yes" xml:space="preserve">
          <source>Elements are compared using &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素は&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="b1bc7fb1f226e6f6f3ef7ee47c49d49289229118" translate="yes" xml:space="preserve">
          <source>Elements are only emitted when &lt;code&gt;fun&lt;/code&gt; returns a new value or the &lt;code&gt;enum&lt;/code&gt; finishes.</source>
          <target state="translated">要素は、 &lt;code&gt;fun&lt;/code&gt; が新しい値を返すか、 &lt;code&gt;enum&lt;/code&gt; 終了したときにのみ発行されます。</target>
        </trans-unit>
        <trans-unit id="a38ddcfce78b5b0835df229de1f7e325877919bd" translate="yes" xml:space="preserve">
          <source>Elements can be inserted using &lt;a href=&quot;#put/2&quot;&gt;&lt;code&gt;MapSet.put/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">要素は、&lt;a href=&quot;#put/2&quot;&gt; &lt;code&gt;MapSet.put/2&lt;/code&gt; &lt;/a&gt;を使用して挿入できます。</target>
        </trans-unit>
        <trans-unit id="9167aadfec3df02db420d4d2b50af0ffd51604f5" translate="yes" xml:space="preserve">
          <source>Elements in a set don't have to be of the same type and they can be populated from an &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html#t:t/0&quot;&gt;enumerable&lt;/a&gt; using &lt;a href=&quot;#new/1&quot;&gt;&lt;code&gt;MapSet.new/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">セット内の要素は同じタイプである必要はなく、&lt;a href=&quot;#new/1&quot;&gt; &lt;code&gt;MapSet.new/1&lt;/code&gt; &lt;/a&gt; / 1を使用して&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html#t:t/0&quot;&gt;列挙可能なもの&lt;/a&gt;から入力できます。</target>
        </trans-unit>
        <trans-unit id="c0c7bf14304705b88f3bf9ecdfcf919293c76e53" translate="yes" xml:space="preserve">
          <source>Elixir</source>
          <target state="translated">Elixir</target>
        </trans-unit>
        <trans-unit id="e5c4daa79e73a93f8dc527746d72ef1e1f99e8dd" translate="yes" xml:space="preserve">
          <source>Elixir 1.5.0 onwards</source>
          <target state="translated">エリクサー1.5.0以降</target>
        </trans-unit>
        <trans-unit id="67dd209de0ff8f0eac333c13b028cb684c348812" translate="yes" xml:space="preserve">
          <source>Elixir 1.9.0 onwards</source>
          <target state="translated">Elixir 1.9.0以降</target>
        </trans-unit>
        <trans-unit id="bff9443fa7cf4ae0bab8d5c8f1f4dab57c2d5acf" translate="yes" xml:space="preserve">
          <source>Elixir Forum</source>
          <target state="translated">エリクサーフォーラム</target>
        </trans-unit>
        <trans-unit id="de61752fa33c065b078b47c60fdefbfedf94b579" translate="yes" xml:space="preserve">
          <source>Elixir allows developers to attach arbitrary metadata to the documentation. This is done by passing a keyword list to the relevant attribute (such as &lt;code&gt;@moduledoc&lt;/code&gt;, &lt;code&gt;@typedoc&lt;/code&gt;, and &lt;code&gt;@doc&lt;/code&gt;). A commonly used metadata is &lt;code&gt;:since&lt;/code&gt;, which annotates in which version that particular module, function, type, or callback was added, as shown in the example above.</source>
          <target state="translated">Elixirを使用すると、開発者はドキュメントに任意のメタデータを添付できます。これは、（のような関連する属性にキーワードリストを渡すことによって行われ &lt;code&gt;@moduledoc&lt;/code&gt; 、 &lt;code&gt;@typedoc&lt;/code&gt; 、および &lt;code&gt;@doc&lt;/code&gt; ）。上記の例に示すように、一般的に使用されるメタデータは &lt;code&gt;:since&lt;/code&gt; で、特定のモジュール、関数、タイプ、またはコールバックが追加されたバージョンに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="3c0ee4efd422df64d926e1699ce27c5bdf0b25e6" translate="yes" xml:space="preserve">
          <source>Elixir allows integers to contain &lt;code&gt;_&lt;/code&gt; to separate digits and provides conveniences to represent integers in other bases:</source>
          <target state="translated">エリクサーでは、整数に &lt;code&gt;_&lt;/code&gt; を含めて数字を区切ることができ、整数を他の底で表すのに便利です。</target>
        </trans-unit>
        <trans-unit id="f75c26877ef871217ff6769618e4b459e83b4aa9" translate="yes" xml:space="preserve">
          <source>Elixir allows us to derive a protocol implementation based on the &lt;code&gt;Any&lt;/code&gt; implementation. Let&amp;rsquo;s first implement &lt;code&gt;Any&lt;/code&gt; as follows:</source>
          <target state="translated">Elixirを使用すると、 &lt;code&gt;Any&lt;/code&gt; 実装に基づいてプロトコル実装を導出できます。まず &lt;code&gt;Any&lt;/code&gt; を次のように実装しましょう：</target>
        </trans-unit>
        <trans-unit id="83c382416abbdb750f7a0b52274c72d3eeffa512" translate="yes" xml:space="preserve">
          <source>Elixir allows variables to be rebound via static single assignment:</source>
          <target state="translated">Elixirでは、静的な単一代入で変数をリバウンドさせることができます。</target>
        </trans-unit>
        <trans-unit id="0e0d77b67e657e2b9066c1ff6972927494c31617" translate="yes" xml:space="preserve">
          <source>Elixir allows you to skip the leading &lt;code&gt;:&lt;/code&gt; for the atoms &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">エリクサーはあなたがリードをスキップすることができます &lt;code&gt;:&lt;/code&gt; 原子のための &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="413742c1494e68731a98eab50395aa0ab07b3d83" translate="yes" xml:space="preserve">
          <source>Elixir allows you to skip the leading &lt;code&gt;:&lt;/code&gt; for the atoms &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">エリクサーはあなたがリードをスキップすることができます &lt;code&gt;:&lt;/code&gt; 原子のための &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、および &lt;code&gt;nil&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="39ff842a6a4a3cf98a11fae4fd4498e3695c470e" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code.&lt;/strong&gt;</source>
          <target state="translated">Elixirはすでに、そのデータ構造と関数を使用して、シンプルで読みやすい方法で日常のコードを作成するメカニズムを提供しています。マクロは最後の手段としてのみ使用してください。&lt;strong&gt;暗黙的よりも明示的の方が優れ&lt;/strong&gt;ていること&lt;strong&gt;に&lt;/strong&gt;注意してください。&lt;strong&gt;明確なコードは簡潔なコードよりも優れています。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3c84bd869e800cf00a0f15faeb1fec6f09ff020" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code&lt;/strong&gt;.</source>
          <target state="translated">Elixirはすでに、そのデータ構造と関数を使用して、シンプルで読みやすい方法で日常のコードを作成するメカニズムを提供しています。マクロは最後の手段としてのみ使用してください。&lt;strong&gt;暗黙的よりも明示的の方が優れ&lt;/strong&gt;ていること&lt;strong&gt;に&lt;/strong&gt;注意してください。&lt;strong&gt;明確なコードは簡潔なコードよりも優れています&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="04d508ddfa3159bfde64248d0cbc115d950cb551" translate="yes" xml:space="preserve">
          <source>Elixir also accepts by default the segment to be a literal string or a literal charlist, which are by default expanded to integers:</source>
          <target state="translated">Elixirは、セグメントをリテラル文字列またはリテラル文字列にすることもできます。</target>
        </trans-unit>
        <trans-unit id="738cbc7a97733fcad20b5d4c9dce828da97453d5" translate="yes" xml:space="preserve">
          <source>Elixir also allows developers to enforce certain keys must always be given when building the struct:</source>
          <target state="translated">Elixirでは、構造体を構築する際に必ず与えなければならない特定のキーを強制することもできます。</target>
        </trans-unit>
        <trans-unit id="b2aeb44fb689a73ee1106300bdf2d7f03241fd14" translate="yes" xml:space="preserve">
          <source>Elixir also contains an &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; function that is a superset of &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エリキシル剤はまた、含ま&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;のスーパーセットである機能&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ca22ed394bb9b18d990dbe14484b3d50b19e9ce" translate="yes" xml:space="preserve">
          <source>Elixir also has special forms that are always imported and cannot be skipped. These are described in &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html&quot;&gt;&lt;code&gt;Kernel.SpecialForms&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Elixirには、常にインポートされ、スキップできない特別なフォームもあります。これらは&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html&quot;&gt; &lt;code&gt;Kernel.SpecialForms&lt;/code&gt; で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="9bac89af66dd6a427b4aa3efe3deb03cf5a1fe14" translate="yes" xml:space="preserve">
          <source>Elixir also has special forms that are always imported and cannot be skipped. These are described in &lt;a href=&quot;kernel.specialforms&quot;&gt;&lt;code&gt;Kernel.SpecialForms&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Elixirには、常にインポートされ、スキップできない特別な形式もあります。これらは&lt;a href=&quot;kernel.specialforms&quot;&gt; &lt;code&gt;Kernel.SpecialForms&lt;/code&gt; で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="d27fae45dd0d77eb7585ffc475445da313d3682e" translate="yes" xml:space="preserve">
          <source>Elixir also includes five special forms that follow the double underscore format: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt; retrieve compile-time information about the current environment, while &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt; retrieves the stacktrace for the current exception.</source>
          <target state="translated">エリクサーはまた、二重のアンダースコア形式に従って5つの特殊な形式が含まれます。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;一方で、現在の環境に関するコンパイル時の情報を取得&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__STACKTRACE__/0&quot;&gt; &lt;code&gt;__STACKTRACE__/0&lt;/code&gt; &lt;/a&gt;を取り出し、現在の例外のスタックトレース。</target>
        </trans-unit>
        <trans-unit id="f6faa91bfb900d671613a6ab47e73da0ae09fa34" translate="yes" xml:space="preserve">
          <source>Elixir also includes five special forms that follow the double underscore format: &lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;and &lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt; retrieve compile-time information about the current environment, while &lt;a href=&quot;kernel.specialforms#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt; retrieves the stacktrace for the current exception.</source>
          <target state="translated">エリクサーはまた、二重のアンダースコア形式に従って5つの特殊な形式が含まれます。&lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;一方で、現在の環境に関するコンパイル時の情報を取得&lt;a href=&quot;kernel.specialforms#__STACKTRACE__/0&quot;&gt; &lt;code&gt;__STACKTRACE__/0&lt;/code&gt; &lt;/a&gt;を取り出し、現在の例外のスタックトレース。</target>
        </trans-unit>
        <trans-unit id="243375bae75a446726d90d677eb7c983b489e516" translate="yes" xml:space="preserve">
          <source>Elixir also leverages pattern matching and guards in function clauses to provide clear error messages in case invalid arguments are given.</source>
          <target state="translated">Elixirはまた、パターンマッチングと関数節のガードを活用して、無効な引数が与えられた場合に明確なエラーメッセージを提供しています。</target>
        </trans-unit>
        <trans-unit id="e898bf471d8f0d3097ac913073c090b0a995d7eb" translate="yes" xml:space="preserve">
          <source>Elixir also provides &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; to manipulate lists:</source>
          <target state="translated">Elixirは、リストを操作するための &lt;code&gt;++&lt;/code&gt; および &lt;code&gt;--&lt;/code&gt; も提供しています。</target>
        </trans-unit>
        <trans-unit id="ac31c787a75befbe1897dbbb6fdd942221f00c86" translate="yes" xml:space="preserve">
          <source>Elixir also provides &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; as comparison operators:</source>
          <target state="translated">Elixirは、比較演算子として &lt;code&gt;==&lt;/code&gt; 、 &lt;code&gt;!=&lt;/code&gt; 、 &lt;code&gt;===&lt;/code&gt; 、 &lt;code&gt;!==&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; および &lt;code&gt;&amp;gt;&lt;/code&gt; も提供しています。</target>
        </trans-unit>
        <trans-unit id="969c208849fcc11446141a26b255b57b75a2b0ba" translate="yes" xml:space="preserve">
          <source>Elixir also provides &lt;code&gt;Port&lt;/code&gt;, &lt;code&gt;Reference&lt;/code&gt;, and &lt;code&gt;PID&lt;/code&gt; as data types (usually used in process communication), and we will take a quick look at them when talking about processes. For now, let&amp;rsquo;s take a look at some of the basic operators that go with our basic types.</source>
          <target state="translated">Elixirはまた、 &lt;code&gt;Port&lt;/code&gt; 、 &lt;code&gt;Reference&lt;/code&gt; 、および &lt;code&gt;PID&lt;/code&gt; をデータ型として提供し（通常はプロセス通信で使用されます）、プロセスについて説明するときに、それらを簡単に見ていきます。とりあえず、基本型に対応する基本演算子のいくつかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="dd8a8082108a2f1897c7e7583cc32113fdc162fe" translate="yes" xml:space="preserve">
          <source>Elixir also provides anonymous functions. Anonymous functions allow us to store and pass executable code around as if it was an integer or a string. They are delimited by the keywords &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;:</source>
          <target state="translated">Elixirは匿名関数も提供します。匿名関数を使用すると、整数または文字列であるかのように実行可能コードを格納して渡すことができます。これらはキーワード &lt;code&gt;fn&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; で区切られています。</target>
        </trans-unit>
        <trans-unit id="f6f4bfc221320e14428c9be4379f06c74f568d51" translate="yes" xml:space="preserve">
          <source>Elixir also provides other data types that are built on top of the types listed above. Some of them are:</source>
          <target state="translated">Elixirは、上記の型の上に構築された他のデータ型も提供しています。そのうちのいくつかをご紹介します。</target>
        </trans-unit>
        <trans-unit id="9cf0686be60034d3cedafe5362a85407c3741f2a" translate="yes" xml:space="preserve">
          <source>Elixir also provides ranges:</source>
          <target state="translated">エリクサーはレンジも提供しています。</target>
        </trans-unit>
        <trans-unit id="5fcce84b0f48ff34d06fe32176864fe647eb61ef" translate="yes" xml:space="preserve">
          <source>Elixir also provides three boolean operators: &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;. These operators are strict in the sense that they expect something that evaluates to a boolean (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) as their first argument:</source>
          <target state="translated">エリクサーはまた、3つのブール演算子が用意されています &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;and&lt;/code&gt; して &lt;code&gt;not&lt;/code&gt; 。これらの演算子は、ブール値（ &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; ）に評価されるものを最初の引数として期待するという意味で厳密です。</target>
        </trans-unit>
        <trans-unit id="8d3fab2e2b3e4ed4bda1748059118a3b75cf1e13" translate="yes" xml:space="preserve">
          <source>Elixir also supports &lt;code&gt;left not in right&lt;/code&gt;, which evaluates to &lt;code&gt;not(left in right)&lt;/code&gt;:</source>
          <target state="translated">Elixirはまた、 &lt;code&gt;not(left in right)&lt;/code&gt; と評価される &lt;code&gt;left not in right&lt;/code&gt; サポートします：</target>
        </trans-unit>
        <trans-unit id="5a36737e425de601f0dbbe73bf7e68eed9cd0ed3" translate="yes" xml:space="preserve">
          <source>Elixir also supports Unicode in identifiers since Elixir v1.5, as defined in the &lt;a href=&quot;https://unicode.org/reports/tr31/&quot;&gt;Unicode Annex #31&lt;/a&gt;. The focus of this document is to describe how Elixir implements the requirements outlined in the Unicode Annex. These requirements are referred to as R1, R6 and so on.</source>
          <target state="translated">Elixirは、&lt;a href=&quot;https://unicode.org/reports/tr31/&quot;&gt;Unicode Annex＃31で&lt;/a&gt;定義されているように、Elixir v1.5以降の識別子でUnicodeもサポートしています。このドキュメントの焦点は、ElixirがUnicode Annexで概説されている要件をどのように実装するかを説明することです。これらの要件は、R1、R6などと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="831831bd1adbcc4e3da08a8f57e2923a4e93799a" translate="yes" xml:space="preserve">
          <source>Elixir also supports a syntax where if the last argument of a call is a keyword list then the square brackets can be skipped. This means that the following:</source>
          <target state="translated">Elixirは、呼び出しの最後の引数がキーワードリストの場合、角括弧をスキップできる構文もサポートしています。つまり、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e5d64f0301ab6ac559b63f1c82cbf0dfd37dce82" translate="yes" xml:space="preserve">
          <source>Elixir also supports formatting Erlang reports using Elixir syntax. This can be controlled with two configurations:</source>
          <target state="translated">ElixirはElixirの構文を使ったErlangレポートのフォーマットもサポートしています。これは2つの設定で制御できます。</target>
        </trans-unit>
        <trans-unit id="51de5cd58455d962f06640f299cca5e324e9a622" translate="yes" xml:space="preserve">
          <source>Elixir also supports private macros via &lt;code&gt;defmacrop&lt;/code&gt;. As private functions, these macros are only available inside the module that defines them, and only at compilation time.</source>
          <target state="translated">Elixirは &lt;code&gt;defmacrop&lt;/code&gt; を介してプライベートマクロもサポートします。プライベート関数として、これらのマクロは、それらを定義するモジュール内で、コンパイル時にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="f11824c210053777bec7ddf3a89c32be210d45f2" translate="yes" xml:space="preserve">
          <source>Elixir also supports shortcut notations for entering binary, octal, and hexadecimal numbers:</source>
          <target state="translated">Elixirは、2進数、8進数、16進数を入力するためのショートカット表記もサポートしています。</target>
        </trans-unit>
        <trans-unit id="6b48fb3c07925bbce80ec4c8c677ff0705ab892b" translate="yes" xml:space="preserve">
          <source>Elixir also supports string interpolation:</source>
          <target state="translated">Elixirは文字列補間もサポートしています。</target>
        </trans-unit>
        <trans-unit id="f27c2220090ae1ef4a23c356a5a485deee8ca35d" translate="yes" xml:space="preserve">
          <source>Elixir applies bug fixes only to the latest minor branch. Security patches are available for the last 5 minor branches:</source>
          <target state="translated">Elixir は最新のマイナーブランチにのみバグフィックスを適用します。セキュリティパッチは直近の 5 つのマイナーブランチで利用可能です。</target>
        </trans-unit>
        <trans-unit id="cda5c07ad4a993425301fa7396f1616f92211ddb" translate="yes" xml:space="preserve">
          <source>Elixir backends can be configured directly under the &lt;code&gt;:logger&lt;/code&gt; application in your &lt;code&gt;config/config.exs&lt;/code&gt;:</source>
          <target state="translated">Elixirバックエンドは、 &lt;code&gt;config/config.exs&lt;/code&gt; の： &lt;code&gt;:logger&lt;/code&gt; アプリケーションの直下で構成できます。</target>
        </trans-unit>
        <trans-unit id="e561bb8baee392958755d80698909955398d5251" translate="yes" xml:space="preserve">
          <source>Elixir backends run in a separate process which comes with overload protection. However, because this process is a single GenEvent, any long running action should be avoided, as it can lead to bottlenecks in the system</source>
          <target state="translated">Elixirのバックエンドは、過負荷保護機能を備えた別のプロセスで実行されます。しかし、このプロセスは単一の GenEvent であるため、システムのボトルネックにつながる可能性があるため、長時間実行されるアクションは避けるべきです。</target>
        </trans-unit>
        <trans-unit id="1480fcb21427da507d41fe00e9730d3102cc1601" translate="yes" xml:space="preserve">
          <source>Elixir brings the concept of module attributes from Erlang. For example:</source>
          <target state="translated">ElixirはErlangからモジュール属性の概念を持ってきました。例えば</target>
        </trans-unit>
        <trans-unit id="f52903a1f8e7fe32784dca96bfb06586e6419189" translate="yes" xml:space="preserve">
          <source>Elixir build information.</source>
          <target state="translated">エリクサーのビルド情報。</target>
        </trans-unit>
        <trans-unit id="b2a6e08225deb1351d7c526d4a6fc2d20b9e7df8" translate="yes" xml:space="preserve">
          <source>Elixir comes with a notation for declaring types and specifications. Elixir is a dynamically typed language, and as such, type specifications are never used by the compiler to optimize or modify code. Still, using type specifications is useful because:</source>
          <target state="translated">Elixirには、型と仕様を宣言するための記法が付属しています。Elixirは動的型付け言語なので、コンパイラがコードを最適化したり修正したりするために型指定が使われることはありません。しかし、型指定を使うことは便利です。</target>
        </trans-unit>
        <trans-unit id="93e98cb33410c274eb01c0b51b9f879f209f597d" translate="yes" xml:space="preserve">
          <source>Elixir converts switches to underscored atoms, so &lt;code&gt;--source-path&lt;/code&gt; becomes &lt;code&gt;:source_path&lt;/code&gt;. This is done to better suit Elixir conventions. However, this means that switches can't contain underscores and switches that do contain underscores are always returned in the list of invalid switches.</source>
          <target state="translated">Elixirはスイッチを下線付きのアトムに変換するため、 &lt;code&gt;--source-path&lt;/code&gt; &lt;code&gt;:source_path&lt;/code&gt; -pathは：source_pathになります。これは、Elixirの慣例によりよく適合するように行われます。ただし、これは、スイッチに下線を含めることができず、下線を含むスイッチは常に無効なスイッチのリストに返されることを意味します。</target>
        </trans-unit>
        <trans-unit id="0c34f7340cb61df5785bd5c3a3996417777eeba7" translate="yes" xml:space="preserve">
          <source>Elixir custom backends</source>
          <target state="translated">Elixirカスタムバックエンド</target>
        </trans-unit>
        <trans-unit id="515cdde695b80400042e85d03697fe8c3de3f321" translate="yes" xml:space="preserve">
          <source>Elixir deprecations happen in 3 steps:</source>
          <target state="translated">Elixirの非推奨化は3つのステップで行われます。</target>
        </trans-unit>
        <trans-unit id="408fc2d27b6f9604c990c32c8ff3bc032eba3849" translate="yes" xml:space="preserve">
          <source>Elixir developers must use &lt;code&gt;snake_case&lt;/code&gt; when defining variables, function names, module attributes, and the like:</source>
          <target state="translated">Elixir開発者は、変数、関数名、モジュール属性などを定義するときに &lt;code&gt;snake_case&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7ea52283db054d97df43a259e29d9ebc73278a8f" translate="yes" xml:space="preserve">
          <source>Elixir developers must use &lt;code&gt;snake_case&lt;/code&gt; when defining variables, function names, module attributes, etc.:</source>
          <target state="translated">Elixir開発者は、変数、関数名、モジュール属性などを定義するときに &lt;code&gt;snake_case&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fdde18bd0e2fa1e6f5b249dcbd96934a496c8e2" translate="yes" xml:space="preserve">
          <source>Elixir developers often use module attributes when they wish to make a value more visible or reusable:</source>
          <target state="translated">Elixirの開発者は、値をより目に見えるようにしたり、再利用可能にしたりしたい場合に、モジュール属性をよく使います。</target>
        </trans-unit>
        <trans-unit id="67460a48d2b2975fa71d28207c9deda3618cb78d" translate="yes" xml:space="preserve">
          <source>Elixir developers typically prefer to use the &lt;code&gt;map.field&lt;/code&gt; syntax and pattern matching instead of the functions in the &lt;code&gt;Map&lt;/code&gt; module when working with maps because they lead to an assertive style of programming. &lt;a href=&quot;http://blog.plataformatec.com.br/2014/09/writing-assertive-code-with-elixir/&quot;&gt;This blog post&lt;/a&gt; provides insight and examples on how you get more concise and faster software by writing assertive code in Elixir.</source>
          <target state="translated">Elixirの開発者は、 &lt;code&gt;Map&lt;/code&gt; するときに、断定的なプログラミングスタイルにつながるため、通常、Mapモジュールの関数ではなく、 &lt;code&gt;map.field&lt;/code&gt; 構文とパターンマッチングを使用することを好みます。&lt;a href=&quot;http://blog.plataformatec.com.br/2014/09/writing-assertive-code-with-elixir/&quot;&gt;このブログ投稿で&lt;/a&gt;は、Elixirでアサーションコードを記述して、より簡潔で高速なソフトウェアを入手する方法についての洞察と例を提供しています。</target>
        </trans-unit>
        <trans-unit id="a06f21bbf8d0fbad80b3654800782c5ec40cbcc7" translate="yes" xml:space="preserve">
          <source>Elixir developers typically prefer to use the &lt;code&gt;map.field&lt;/code&gt; syntax and pattern matching instead of the functions in the &lt;code&gt;Map&lt;/code&gt; module when working with maps because they lead to an assertive style of programming. &lt;a href=&quot;https://dashbit.co/blog/writing-assertive-code-with-elixir&quot;&gt;This blog post by Jos&amp;eacute; Valim&lt;/a&gt; provides insight and examples on how you get more concise and faster software by writing assertive code in Elixir.</source>
          <target state="translated">Elixir開発者は通常、 &lt;code&gt;Map&lt;/code&gt; するときに、Mapモジュールの関数ではなく、 &lt;code&gt;map.field&lt;/code&gt; 構文とパターンマッチングを使用することを好みます。これは、アサーティブなプログラミングスタイルにつながるためです。&lt;a href=&quot;https://dashbit.co/blog/writing-assertive-code-with-elixir&quot;&gt;Jos&amp;eacute;Valimによるこのブログ投稿で&lt;/a&gt;は、Elixirで断定的なコードを記述して、より簡潔で高速なソフトウェアを入手する方法についての洞察と例を紹介しています。</target>
        </trans-unit>
        <trans-unit id="c6ccd31147a48e978a78387a61b5eaefec5c15c1" translate="yes" xml:space="preserve">
          <source>Elixir developers will often use module attributes as constants:</source>
          <target state="translated">Elixirの開発者は、モジュールの属性を定数として使用することがよくあります。</target>
        </trans-unit>
        <trans-unit id="7edf337af4809fac0491b9f969182b600dc4a216" translate="yes" xml:space="preserve">
          <source>Elixir discourages the use of the &lt;code&gt;string()&lt;/code&gt; type. The &lt;code&gt;string()&lt;/code&gt; type refers to Erlang strings, which are known as &quot;charlists&quot; in Elixir. They do not refer to Elixir strings, which are UTF-8 encoded binaries. To avoid confusion, if you attempt to use the type &lt;code&gt;string()&lt;/code&gt;, Elixir will emit a warning. You should use &lt;code&gt;charlist()&lt;/code&gt;, &lt;code&gt;nonempty_charlist()&lt;/code&gt;, &lt;code&gt;binary()&lt;/code&gt; or &lt;code&gt;String.t()&lt;/code&gt; accordingly, or any of the several literal representations for these types.</source>
          <target state="translated">Elixirは &lt;code&gt;string()&lt;/code&gt; 型の使用を推奨していません。 &lt;code&gt;string()&lt;/code&gt; タイプエリクシールにおける「charlists」として知られているErlangの文字列を指します。それらは、UTF-8でエンコードされたバイナリであるElixir文字列を参照しません。混乱を避けるために、タイプ &lt;code&gt;string()&lt;/code&gt; を使用しようとすると、Elixirは警告を発します。あなたは使用する必要があります &lt;code&gt;charlist()&lt;/code&gt; 、 &lt;code&gt;nonempty_charlist()&lt;/code&gt; 、 &lt;code&gt;binary()&lt;/code&gt; または &lt;code&gt;String.t()&lt;/code&gt; に応じて、またはこれらのタイプのいくつかのリテラル表現のいずれかを。</target>
        </trans-unit>
        <trans-unit id="d6df36f3b70e0d4fb5ddb48d10dbf25423b1cc5a" translate="yes" xml:space="preserve">
          <source>Elixir documentation also includes supporting documents under the &quot;Pages&quot; section. Those are:</source>
          <target state="translated">Elixirのドキュメントには、「ページ」セクションの下にあるサポートドキュメントも含まれています。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="dfbdabad266a6ed24abe7282e3054447cc34c95a" translate="yes" xml:space="preserve">
          <source>Elixir documentation is written using Markdown. There are plenty of guides on Markdown online, we recommend the ones available at GitHub as a getting started point:</source>
          <target state="translated">ElixirのドキュメントはMarkdownを使って書かれています。Markdownのオンラインガイドがたくさんありますが、スタート地点としてGitHubで利用可能なものをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b8ad464d7c3f98c28d6c1301d748b4474f625349" translate="yes" xml:space="preserve">
          <source>Elixir does not allow the use of ZWJ or ZWNJ in identifiers and therefore does not implement R1a. R1b is guaranteed for backwards compatibility purposes.</source>
          <target state="translated">Elixirは、識別子にZWJやZWNJを使用することを許可していないため、R1aを実装していません。R1bは下位互換性のために保証されています。</target>
        </trans-unit>
        <trans-unit id="d746cd61df3db6f2fe47fafb3741869cc1431ba6" translate="yes" xml:space="preserve">
          <source>Elixir does not contain a function similar to &lt;code&gt;printf&lt;/code&gt; found in C and other languages. Luckily, the Erlang standard library functions &lt;code&gt;:io.format/2&lt;/code&gt; and &lt;code&gt;:io_lib.format/2&lt;/code&gt; may be used. The first formats to terminal output, while the second formats to an iolist. The format specifiers differ from &lt;code&gt;printf&lt;/code&gt;, &lt;a href=&quot;http://erlang.org/doc/man/io.html#format-1&quot;&gt;refer to the Erlang documentation for details&lt;/a&gt;.</source>
          <target state="translated">Elixirには、Cおよび他の言語で見られる &lt;code&gt;printf&lt;/code&gt; に類似した関数は含まれていません。幸いにも、Erlangの標準ライブラリ関数 &lt;code&gt;:io.format/2&lt;/code&gt; および &lt;code&gt;:io_lib.format/2&lt;/code&gt; を使用できます。最初の形式は端末出力にフォーマットされ、2番目の形式はiolistにフォーマットされます。形式指定子は &lt;code&gt;printf&lt;/code&gt; と&lt;a href=&quot;http://erlang.org/doc/man/io.html#format-1&quot;&gt;は&lt;/a&gt;異なります。詳細については、Erlangのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="979dd9d85c61d8b521a5dc2ef6b2263883c16c08" translate="yes" xml:space="preserve">
          <source>Elixir has a handful of reserved attributes. Here are a few of them, the most commonly used ones:</source>
          <target state="translated">エリクサーには一握りの予約属性がある。ここではそのうちのいくつか、最も一般的に使用されるものを紹介します。</target>
        </trans-unit>
        <trans-unit id="da143eaa5f18150282df48049071c1cc1a0e242a" translate="yes" xml:space="preserve">
          <source>Elixir has functions, like &lt;a href=&quot;#and/2&quot;&gt;&lt;code&gt;and/2&lt;/code&gt;&lt;/a&gt;, that &lt;em&gt;only&lt;/em&gt; work with booleans, but also functions that work with these truthy/falsy values, like &lt;a href=&quot;#&amp;amp;&amp;amp;/2&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#!/1&quot;&gt;&lt;code&gt;!/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エリクサーのような機能を、持っている&lt;a href=&quot;#and/2&quot;&gt; &lt;code&gt;and/2&lt;/code&gt; &lt;/a&gt;、その&lt;em&gt;唯一の&lt;/em&gt;これらtruthy / falsy値を持つ仕事、のようなことをブール値で作業するだけでなく、機能を&lt;a href=&quot;#&amp;amp;&amp;amp;/2&quot;&gt; &lt;code&gt;&amp;amp;&amp;amp;/2&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#!/1&quot;&gt; &lt;code&gt;!/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88f2b25faa45986049480c976c00dd5855a6e36c" translate="yes" xml:space="preserve">
          <source>Elixir has three error mechanisms: errors, throws, and exits. In this chapter, we will explore each of them and include remarks about when each should be used.</source>
          <target state="translated">Elixirには3つのエラーメカニズムがあります。この章では、それぞれのエラーメカニズムを調べ、どのような場合に使用すべきかについての注意点も含めて説明します。</target>
        </trans-unit>
        <trans-unit id="0713d95ea58614452d3bd4a78be0cb70359f5d00" translate="yes" xml:space="preserve">
          <source>Elixir has three options for endianness: &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;little&lt;/code&gt;, and &lt;code&gt;native&lt;/code&gt;. The default is &lt;code&gt;big&lt;/code&gt;:</source>
          <target state="translated">Elixirにはエンディアンのオプションが3つあります： &lt;code&gt;big&lt;/code&gt; 、 &lt;code&gt;little&lt;/code&gt; 、および &lt;code&gt;native&lt;/code&gt; 。デフォルトは &lt;code&gt;big&lt;/code&gt; です：</target>
        </trans-unit>
        <trans-unit id="fe30cf194fcc420b9fc8698a6260db192b62dfe9" translate="yes" xml:space="preserve">
          <source>Elixir has two syntaxes for function calls. With parens and no parens. By default, Elixir will add parens to all calls except for:</source>
          <target state="translated">Elixirには、関数呼び出しのための2つの構文があります。パレンありとパレンなしです。デフォルトでは、Elixirは以下を除くすべての呼び出しにパーレンを追加します。</target>
        </trans-unit>
        <trans-unit id="9c36cafc5f1778cc6d258e84e87e60d138fd12a4" translate="yes" xml:space="preserve">
          <source>Elixir is a dynamically typed language, so all types in Elixir are checked at runtime. Nonetheless, Elixir comes with &lt;strong&gt;typespecs&lt;/strong&gt;, which are a notation used for:</source>
          <target state="translated">Elixirは動的に型付けされた言語であるため、Elixirのすべての型が実行時にチェックされます。それにもかかわらず、Elixirには&lt;strong&gt;typespec&lt;/strong&gt;が付属して&lt;strong&gt;おり&lt;/strong&gt;、これは&lt;strong&gt;次の目的&lt;/strong&gt;で使用される表記法です。</target>
        </trans-unit>
        <trans-unit id="5ea9e99a9db02305c5b70e98171ae53976e93c92" translate="yes" xml:space="preserve">
          <source>Elixir is a dynamically typed language, so all types in Elixir are inferred by the runtime. Nonetheless, Elixir comes with &lt;strong&gt;typespecs&lt;/strong&gt;, which are a notation used for:</source>
          <target state="translated">Elixirは動的に型付けされた言語であるため、Elixirのすべての型はランタイムによって推論されます。それにもかかわらず、Elixirには&lt;strong&gt;typespecs&lt;/strong&gt;が付属しています。</target>
        </trans-unit>
        <trans-unit id="e56a48282c5929f27448e4f74f02e189acbe3204" translate="yes" xml:space="preserve">
          <source>Elixir is an extensible and very customizable programming language thanks to its meta-programming support. Most meta-programming in Elixir is done through macros, which are very useful in several situations, especially for writing DSLs. We have written a short guide that explains the basic mechanisms behind macros, shows how to write macros, and how to use macros to create DSLs:</source>
          <target state="translated">Elixirは、メタプログラミングをサポートしているため、拡張性が高く、非常にカスタマイズ可能なプログラミング言語です。Elixirのメタプログラミングのほとんどはマクロを使って行われますが、これはいくつかの状況、特にDSLを書くときに非常に便利です。ここでは、マクロの背後にある基本的な仕組み、マクロの書き方、DSLを作成するためのマクロの使い方を説明する短いガイドを書きました。</target>
        </trans-unit>
        <trans-unit id="63771eaf5ff6c9a6bd6258b28e240e5f31e971be" translate="yes" xml:space="preserve">
          <source>Elixir is an immutable language where nothing is shared by default. If we want to share information, which can be read and modified from multiple places, we have two main options in Elixir:</source>
          <target state="translated">Elixirはデフォルトでは何も共有されない不変の言語です。複数の場所から読み取ったり変更したりできる情報を共有したい場合、Elixirには主に2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="52c491dbf300477fadaef34d4fecd5fbbc6358fa" translate="yes" xml:space="preserve">
          <source>Elixir is capable of parsing a predefined set of operators; this means that it's not possible to define new operators (like one could do in Haskell, for example). However, not all operators that Elixir can parse are &lt;em&gt;used&lt;/em&gt; by Elixir: for example, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are used by Elixir for addition and boolean &lt;em&gt;or&lt;/em&gt;, but &lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt; is not used (but valid).</source>
          <target state="translated">Elixirは、事前定義されたオペレーターのセットを解析できます。つまり、新しい演算子を定義することはできません（たとえば、Haskellで行うことができます）。ただし、Elixirが解析できるすべての演算子がElixirで&lt;em&gt;使用さ&lt;/em&gt;れるわけではありません。たとえば、 &lt;code&gt;+&lt;/code&gt; や &lt;code&gt;||&lt;/code&gt; などです。Elixirは、追加およびブール値&lt;em&gt;or&lt;/em&gt;に使用されますが、 &lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt; は使用されません（ただし有効です）。</target>
        </trans-unit>
        <trans-unit id="119a6b69354b723a3119d7eb9b274e46b1a606de" translate="yes" xml:space="preserve">
          <source>Elixir is currently at major version v1. A new backwards compatible minor release happens every 6 months. Patch releases are not scheduled and are made whenever there are bug fixes or security patches.</source>
          <target state="translated">Elixirは現在メジャーバージョンv1で、6ヶ月に一度、後方互換性のある新しいマイナーリリースが行われています。パッチリリースは予定されておらず、バグフィックスやセキュリティパッチがあるときに行われます。</target>
        </trans-unit>
        <trans-unit id="5569a08dfbe33692762e6efedcb5c7ea0454136a" translate="yes" xml:space="preserve">
          <source>Elixir is smart enough to delay the resolution to the latest possible moment. So, if you call &lt;code&gt;length([1, 2, 3])&lt;/code&gt; inside quote, but no &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; function is available, it is then expanded in the caller:</source>
          <target state="translated">Elixirは、解決を可能な限り最新の瞬間に遅らせるのに十分賢いです。したがって、quote内で &lt;code&gt;length([1, 2, 3])&lt;/code&gt; を呼び出したが、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt; &lt;code&gt;length/1&lt;/code&gt; &lt;/a&gt;関数が使用できない場合は、呼び出し元で展開されます。</target>
        </trans-unit>
        <trans-unit id="92e6a9f7e2024169f36143b3110efa2bf4ec167a" translate="yes" xml:space="preserve">
          <source>Elixir is smart enough to delay the resolution to the latest possible moment. So, if you call &lt;code&gt;length([1, 2, 3])&lt;/code&gt; inside quote, but no &lt;a href=&quot;kernel#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; function is available, it is then expanded in the caller:</source>
          <target state="translated">Elixirは、解決を可能な限り最新のタイミングまで遅らせるのに十分スマートです。したがって、引用符の中で &lt;code&gt;length([1, 2, 3])&lt;/code&gt; を呼び出しても、&lt;a href=&quot;kernel#length/1&quot;&gt; &lt;code&gt;length/1&lt;/code&gt; &lt;/a&gt;関数が使用できない場合は、呼び出し元で展開されます。</target>
        </trans-unit>
        <trans-unit id="94be6db8aa623aad96175d2a4f009eb3d49d1f72" translate="yes" xml:space="preserve">
          <source>Elixir is smart enough to recompile only files that have changed and their dependencies. This means if &lt;code&gt;lib/a.ex&lt;/code&gt; is invoking a function defined over &lt;code&gt;lib/b.ex&lt;/code&gt;, whenever &lt;code&gt;lib/b.ex&lt;/code&gt; changes, &lt;code&gt;lib/a.ex&lt;/code&gt; is also recompiled.</source>
          <target state="translated">Elixirは、変更されたファイルとその依存関係のみを再コンパイルするのに十分なほどスマートです。この手段があれば &lt;code&gt;lib/a.ex&lt;/code&gt; 以上の定義された関数を呼び出している &lt;code&gt;lib/b.ex&lt;/code&gt; 、いつでも &lt;code&gt;lib/b.ex&lt;/code&gt; 変更、 &lt;code&gt;lib/a.ex&lt;/code&gt; ISも再コンパイル。</target>
        </trans-unit>
        <trans-unit id="a352a9b0a3e5c7519c223a1075bc3428e61e0561" translate="yes" xml:space="preserve">
          <source>Elixir is versioned according to a vMAJOR.MINOR.PATCH schema.</source>
          <target state="translated">ElixirはvMAJOR.MINOR.PATCHスキーマに従ってバージョン管理されています。</target>
        </trans-unit>
        <trans-unit id="d990d24327822ea7a421e913e80e0202d0dfa1bb" translate="yes" xml:space="preserve">
          <source>Elixir macros have late resolution. This guarantees that a variable defined inside a quote won&amp;rsquo;t conflict with a variable defined in the context where that macro is expanded. For example:</source>
          <target state="translated">Elixirマクロは解決が遅い。これにより、引用内で定義された変数が、そのマクロが展開されているコンテキストで定義された変数と競合しないことが保証されます。例えば：</target>
        </trans-unit>
        <trans-unit id="6c0929a451e1f448275dcbe066bf77535364105c" translate="yes" xml:space="preserve">
          <source>Elixir minor and patch releases are backwards compatible: well-defined behaviours and documented APIs in a given version will continue working on future versions.</source>
          <target state="translated">Elixirのマイナーリリースとパッチリリースは下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="f4a72643c7a8a6ed5341995de6e14044af2a034d" translate="yes" xml:space="preserve">
          <source>Elixir module names can be dynamically generated. This is very useful when working with macros. For instance, one could write:</source>
          <target state="translated">Elixirのモジュール名は動的に生成することができます。これはマクロを扱う際に非常に便利です。例えば、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="3135e8d914a8aafb03877d33ea9a4b0de24e09f7" translate="yes" xml:space="preserve">
          <source>Elixir offers several sigils to deal with various flavors of times and dates.</source>
          <target state="translated">エリクシールでは、様々なフレーバーの時間や日付に対応できるように、いくつかの紋章をご用意しています。</target>
        </trans-unit>
        <trans-unit id="e063af00bef300726332e4ffbf98de73c83bdc5a" translate="yes" xml:space="preserve">
          <source>Elixir on Discord</source>
          <target state="translated">Elixir on Discord</target>
        </trans-unit>
        <trans-unit id="005e7c25a3d3787c9fd9aad492021fe09a8bd012" translate="yes" xml:space="preserve">
          <source>Elixir on Slack</source>
          <target state="translated">Elixir on Slack</target>
        </trans-unit>
        <trans-unit id="6ec353d0b43e8fcc2bae198d8d18d71fc59a96c0" translate="yes" xml:space="preserve">
          <source>Elixir programs should prefer to validate data as close to the end user as possible, so the errors are easy to locate and fix. This practice also saves you from writing defensive code in the internals of the library.</source>
          <target state="translated">Elixirプログラムは、できるだけエンドユーザーに近いところでデータを検証することを好むべきです。この方法は、ライブラリの内部に防御的なコードを書く手間を省くことにもつながります。</target>
        </trans-unit>
        <trans-unit id="34badf132890db803056b8a329274a11ed6c00d4" translate="yes" xml:space="preserve">
          <source>Elixir projects are usually organized into three directories:</source>
          <target state="translated">Elixirプロジェクトは通常、3つのディレクトリに整理されています。</target>
        </trans-unit>
        <trans-unit id="bd498b5c0b475852faf005a008b3295d3968391d" translate="yes" xml:space="preserve">
          <source>Elixir promotes the use of Markdown with heredocs to write readable documentation. Heredocs are multi-line strings, they start and end with triple double-quotes, keeping the formatting of the inner text. We can access the documentation of any compiled module directly from IEx:</source>
          <target state="translated">Elixirは、読みやすいドキュメントを書くために、Markdownとheredocsの使用を促進します。ヘレドクは複数行の文字列で、最初と最後はトリプルダブルクォートで始まり、内部のテキストの書式を維持します。IExからコンパイルされたモジュールのドキュメントに直接アクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="8cd089c42b27bd178061d32f4f832a4a6ee4ad2d" translate="yes" xml:space="preserve">
          <source>Elixir provides Perl-compatible regular expressions (regexes), as implemented by the &lt;a href=&quot;http://www.pcre.org/&quot;&gt;PCRE&lt;/a&gt; library. Regexes also support modifiers. For example, the &lt;code&gt;i&lt;/code&gt; modifier makes a regular expression case insensitive:</source>
          <target state="translated">Elixirは、&lt;a href=&quot;http://www.pcre.org/&quot;&gt;PCRE&lt;/a&gt;ライブラリによって実装されているように、Perl互換の正規表現（正規表現）を提供します。正規表現は修飾子もサポートします。たとえば、 &lt;code&gt;i&lt;/code&gt; 修飾子は正規表現の大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="ea04f299ea8e7d138416f7682d04dace2f8332f3" translate="yes" xml:space="preserve">
          <source>Elixir provides a bunch of predicate functions to check for a value type. For example, the &lt;code&gt;is_boolean/1&lt;/code&gt; function can be used to check if a value is a boolean or not:</source>
          <target state="translated">Elixirは、値の型をチェックするための一連の述語関数を提供します。たとえば、 &lt;code&gt;is_boolean/1&lt;/code&gt; 関数を使用して、値がブール値であるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="f9d0324f32083b4357effd55af42179e669e80ba" translate="yes" xml:space="preserve">
          <source>Elixir provides a special and more concise syntax for keyword lists that looks like this:</source>
          <target state="translated">Elixirは、以下のようなキーワードリストのための特別で簡潔な構文を提供しています。</target>
        </trans-unit>
        <trans-unit id="3fb7d8bf0ef1942795033493f666d84321055fe3" translate="yes" xml:space="preserve">
          <source>Elixir provides excellent interoperability with Erlang libraries. In fact, Elixir discourages simply wrapping Erlang libraries in favor of directly interfacing with Erlang code. In this section, we will present some of the most common and useful Erlang functionality that is not found in Elixir.</source>
          <target state="translated">ElixirはErlangライブラリとの優れた相互運用性を提供します。実際、Elixirは単純にErlangライブラリをラップしてErlangコードと直接インタフェイスすることを推奨していません。このセクションでは、Elixirにはない最も一般的で便利なErlangの機能を紹介します。</target>
        </trans-unit>
        <trans-unit id="b3b982e7fff9bd521206b036c548d296e906492a" translate="yes" xml:space="preserve">
          <source>Elixir provides macros as a mechanism for meta-programming (writing code that generates code). Macros are expanded at compile time.</source>
          <target state="translated">Elixirは、メタプログラミング(コードを生成するコードを書くこと)の仕組みとしてマクロを提供しています。マクロはコンパイル時に展開されます。</target>
        </trans-unit>
        <trans-unit id="449df725d4d68a46665d86a115b480918573511c" translate="yes" xml:space="preserve">
          <source>Elixir provides many &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;built-in types&lt;/a&gt;, such as &lt;code&gt;integer&lt;/code&gt; or &lt;code&gt;pid&lt;/code&gt;, that can be used to document function signatures. For example, the &lt;code&gt;round/1&lt;/code&gt; function, which rounds a number to its nearest integer. As you can see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;in its documentation&lt;/a&gt;, &lt;code&gt;round/1&lt;/code&gt;&amp;rsquo;s typed signature is written as:</source>
          <target state="translated">Elixirは、 &lt;code&gt;integer&lt;/code&gt; や &lt;code&gt;pid&lt;/code&gt; など、関数のシグネチャを文書化するために使用できる多くの&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;組み込み型を&lt;/a&gt;提供します。たとえば、数値を最も近い整数に丸める &lt;code&gt;round/1&lt;/code&gt; 関数。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;ドキュメント&lt;/a&gt;でわかるように、 &lt;code&gt;round/1&lt;/code&gt; の型付き署名は次のように記述されています。</target>
        </trans-unit>
        <trans-unit id="2c38afe5476b8521de1ce73619db182fce82f5c4" translate="yes" xml:space="preserve">
          <source>Elixir provides many conveniences for working with ports and some drawbacks. We will explore those below.</source>
          <target state="translated">Elixirはポートを扱うために多くの便利な機能を提供していますが、いくつかの欠点もあります。以下ではそれらの欠点を探っていきます。</target>
        </trans-unit>
        <trans-unit id="86797814ddc42c874f88a51b77e92d177f55b7bc" translate="yes" xml:space="preserve">
          <source>Elixir provides optional parentheses for non-qualified and qualified calls.</source>
          <target state="translated">Elixirは、非適格コールと適格コールのためのオプションの括弧を提供します。</target>
        </trans-unit>
        <trans-unit id="1d9a8b35858a0497976075a187083dacc1314354" translate="yes" xml:space="preserve">
          <source>Elixir provides pattern matching, which allows us to assert on the shape or extract values from data-structures. Patterns are often augmented with guards, which give developers the ability to perform more complex checks, albeit limited.</source>
          <target state="translated">Elixirはパターンマッチングを提供しており、形状をアサートしたり、データ構造から値を抽出したりすることができます。パターンはしばしばガードで補強されており、開発者は限定的ではありますが、より複雑なチェックを実行できるようになります。</target>
        </trans-unit>
        <trans-unit id="ab1e334b03a647f5918bb69c761fab411cd3e870" translate="yes" xml:space="preserve">
          <source>Elixir provides similar mechanisms for imports and aliases too. This guarantees that a macro will behave as specified by its source module rather than conflicting with the target module where the macro is expanded. Hygiene can be bypassed under specific situations by using macros like &lt;code&gt;var!/2&lt;/code&gt; and &lt;code&gt;alias!/1&lt;/code&gt;, although one must be careful when using those as they directly change the user environment.</source>
          <target state="translated">Elixirはインポートとエイリアスに対しても同様のメカニズムを提供します。これにより、マクロが展開されるターゲットモジュールと競合するのではなく、ソースモジュールで指定されたとおりにマクロが動作することが保証されます。特定の状況では、 &lt;code&gt;var!/2&lt;/code&gt; や &lt;code&gt;alias!/1&lt;/code&gt; などのマクロを使用することにより、衛生状態を回避できますが、ユーザー環境を直接変更するため、これらを使用する場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="7ee83992e184ceb0497492aa46813f6e12944aa3" translate="yes" xml:space="preserve">
          <source>Elixir provides the concept of enumerables and &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;the &lt;code&gt;Enum&lt;/code&gt; module&lt;/a&gt; to work with them. We have already learned two enumerables: lists and maps.</source>
          <target state="translated">Elixirは、&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;概念と、列挙型で動作するEnumモジュールを提供します。リストとマップの2つの列挙型を既に学習しました。</target>
        </trans-unit>
        <trans-unit id="56408c183550d2230f17bffa1fd59dd5a2aa2dd3" translate="yes" xml:space="preserve">
          <source>Elixir provides the following built-in comparison operators (all of which can be used in guards):</source>
          <target state="translated">Elixirは以下のビルトイン比較演算子を提供しています(すべてガードで使用できます)。</target>
        </trans-unit>
        <trans-unit id="c38b66bd0f1f07df9af68419dad5d7545d3eb5b0" translate="yes" xml:space="preserve">
          <source>Elixir provides the following built-in comparison operators:</source>
          <target state="translated">Elixirには以下の比較演算子が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="a073541c1c4061c5b62e401a691e0182a896f380" translate="yes" xml:space="preserve">
          <source>Elixir provides the following built-in operators that are defined as functions that can be overridden:</source>
          <target state="translated">Elixirには、オーバーライド可能な関数として定義されている以下の組み込み演算子が用意されています。</target>
        </trans-unit>
        <trans-unit id="ac046d5521e866f330d69759ab8c6306ded55946" translate="yes" xml:space="preserve">
          <source>Elixir quote/unquote mechanisms provide a functionality called unquote fragments. Unquote fragments provide an easy way to generate functions on the fly. Consider this example:</source>
          <target state="translated">Elixirのquote/unquoteメカニズムは、unquote fragmentsと呼ばれる機能を提供しています。unquote フラグメントは、その場で関数を生成する簡単な方法を提供します。この例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="8d30f35ec7987f572743e95ef255bb1ce5bee72e" translate="yes" xml:space="preserve">
          <source>Elixir relies on underscores in different situations.</source>
          <target state="translated">エリクサーは様々な状況でアンダースコアに依存しています。</target>
        </trans-unit>
        <trans-unit id="ecffee7d986ded673e3f20c49d26acf93d1febaf" translate="yes" xml:space="preserve">
          <source>Elixir represents &lt;code&gt;Foo.Bar&lt;/code&gt; as &lt;code&gt;__aliases__&lt;/code&gt; so calls can be unambiguously identified by the operator &lt;code&gt;:.&lt;/code&gt;. For example:</source>
          <target state="translated">Elixirは &lt;code&gt;Foo.Bar&lt;/code&gt; を__aliases__として &lt;code&gt;__aliases__&lt;/code&gt; ため、呼び出しは演算子 &lt;code&gt;:.&lt;/code&gt; 明確に識別できます。。例えば：</target>
        </trans-unit>
        <trans-unit id="e6bdbab87b861494b0b9df9b50e56bb5cc5d2563" translate="yes" xml:space="preserve">
          <source>Elixir requires all atoms and variables to be in NFC form. Any other form will fail with a relevant error message. Quoted-atoms and strings can, however, be in any form and are not verified by the parser.</source>
          <target state="translated">Elixir は、すべての原子と変数が NFC 形式であることを要求します。それ以外の形式は関連するエラーメッセージで失敗します。しかし、引用原子と文字列はどのような形式であってもよく、パーサによって検証されません。</target>
        </trans-unit>
        <trans-unit id="edacc18f14ad696b0fd9cee85daa785d105406a3" translate="yes" xml:space="preserve">
          <source>Elixir reserves the following module names: &lt;code&gt;Elixir&lt;/code&gt;, &lt;code&gt;Any&lt;/code&gt;, &lt;code&gt;BitString&lt;/code&gt;, &lt;code&gt;PID&lt;/code&gt;, and &lt;code&gt;Reference&lt;/code&gt;.</source>
          <target state="translated">Elixirは次のモジュール名を予約しています： &lt;code&gt;Elixir&lt;/code&gt; 、 &lt;code&gt;Any&lt;/code&gt; 、 &lt;code&gt;BitString&lt;/code&gt; 、 &lt;code&gt;PID&lt;/code&gt; 、および &lt;code&gt;Reference&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a2a631e623ec7dcc0aeb7c643dc24be890d814b" translate="yes" xml:space="preserve">
          <source>Elixir runs on the Erlang Virtual Machine and, sooner or later, an Elixir developer will want to interface with existing Erlang libraries. Here&amp;rsquo;s a list of online resources that cover Erlang&amp;rsquo;s fundamentals and its more advanced features:</source>
          <target state="translated">ElixirはErlang仮想マシンで実行され、遅かれ早かれ、Elixir開発者は既存のErlangライブラリとのインターフェースを必要とするでしょう。Erlangの基礎とそのより高度な機能をカバーするオンラインリソースのリストを次に示します。</target>
        </trans-unit>
        <trans-unit id="4a5fefa1f8798cec1647f9fe4a71993a0c63afa5" translate="yes" xml:space="preserve">
          <source>Elixir sees the right-hand side is a function call and pipes to it. This means that, if you want to pipe to an anonymous or captured function, it must also be explicitly called.</source>
          <target state="translated">Elixirは右側が関数呼び出しであると見て、それにパイプします。つまり、匿名関数やキャプチャされた関数にパイプしたい場合は、明示的に呼び出されている必要があります。</target>
        </trans-unit>
        <trans-unit id="a8974a1be92f4c12c0a0c52c8b32e2ca1e35088a" translate="yes" xml:space="preserve">
          <source>Elixir ships with facilities to connect nodes and exchange information between them. In fact, we use the same concepts of processes, message passing and receiving messages when working in a distributed environment because Elixir processes are &lt;em&gt;location transparent&lt;/em&gt;. This means that when sending a message, it doesn&amp;rsquo;t matter if the recipient process is on the same node or on another node, the</source>
          <target state="translated">Elixirには、ノードを接続してノード間で情報を交換する機能が付属しています。実際、エリクサーのプロセスは&lt;em&gt;場所の透過性&lt;/em&gt;があるため、分散環境で作業する場合、プロセス、メッセージの受け渡し、メッセージの受信という同じ概念を使用します。つまり、メッセージを送信する場合、受信者プロセスが同じノード上にあるか別のノード上にあるかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="5c11d827abbb7cde35b0a581d6299d5d74cd7a62" translate="yes" xml:space="preserve">
          <source>Elixir ships with some built-in protocols. In previous chapters, we have discussed the &lt;code&gt;Enum&lt;/code&gt; module which provides many functions that work with any data structure that implements the &lt;code&gt;Enumerable&lt;/code&gt; protocol:</source>
          <target state="translated">Elixirには、いくつかの組み込みプロトコルが付属しています。前の章では、 &lt;code&gt;Enumerable&lt;/code&gt; プロトコルを実装する任意のデータ構造で機能する多くの関数を提供する &lt;code&gt;Enum&lt;/code&gt; モジュールについて説明しました：</target>
        </trans-unit>
        <trans-unit id="dd2cbcbe1872ea6a04fdc11aaa0e830351ff7c7a" translate="yes" xml:space="preserve">
          <source>Elixir spawned a process on another node and returned its pid. The code then executed on the other node where the &lt;code&gt;Hello.world/0&lt;/code&gt; function exists and invoked that function. Note that the result of &amp;ldquo;hello world&amp;rdquo; was printed on the current node &lt;code&gt;bar&lt;/code&gt; and not on &lt;code&gt;foo&lt;/code&gt;. In other words, the message to be printed was sent back from &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;. This happens because the process spawned on the other node (&lt;code&gt;foo&lt;/code&gt;) knows all of the output should be sent back to the original node!</source>
          <target state="translated">Elixirは別のノードでプロセスを生成し、そのpidを返しました。次に、 &lt;code&gt;Hello.world/0&lt;/code&gt; 関数が存在する他のノードでコードが実行され、その関数が呼び出されました。 「こんにちは世界」の結果が現在のノードに印刷されたことを注意 &lt;code&gt;bar&lt;/code&gt; やないで &lt;code&gt;foo&lt;/code&gt; 。つまり、出力されるメッセージは &lt;code&gt;foo&lt;/code&gt; から &lt;code&gt;bar&lt;/code&gt; に返送されました。これは、他のノード（ &lt;code&gt;foo&lt;/code&gt; ）で生成されたプロセスが、すべての出力を元のノードに送り返す必要があることを認識しているために発生します。</target>
        </trans-unit>
        <trans-unit id="8d3a064f8543389f89760aca91a7bf4bd3fe1730" translate="yes" xml:space="preserve">
          <source>Elixir spawned a process on another node and returned its pid. The code then executed on the other node where the &lt;code&gt;Hello.world/0&lt;/code&gt; function exists and invoked that function. Note that the result of &amp;ldquo;hello world&amp;rdquo; was printed on the current node &lt;code&gt;bar&lt;/code&gt; and not on &lt;code&gt;foo&lt;/code&gt;. In other words, the message to be printed was sent back from &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;. This happens because the process spawned on the other node (&lt;code&gt;foo&lt;/code&gt;) still has the group leader of the current node (&lt;code&gt;bar&lt;/code&gt;). We have briefly talked about group leaders in the &lt;a href=&quot;../io-and-the-file-system#processes-and-group-leaders&quot;&gt;IO chapter&lt;/a&gt;.</source>
          <target state="translated">Elixirは別のノードでプロセスを生成し、そのpidを返しました。次に、コードは &lt;code&gt;Hello.world/0&lt;/code&gt; 関数が存在する他のノードで実行され、その関数を呼び出しました。 「hello world」の結果は &lt;code&gt;foo&lt;/code&gt; ではなく、現在のノード &lt;code&gt;bar&lt;/code&gt; に出力されたことに注意してください。つまり、出力されるメッセージは &lt;code&gt;foo&lt;/code&gt; から &lt;code&gt;bar&lt;/code&gt; に送り返されました。これは、他のノード（ &lt;code&gt;foo&lt;/code&gt; ）で生成されたプロセスが現在のノード（ &lt;code&gt;bar&lt;/code&gt; ）のグループリーダーをまだ持っているために発生します。グループリーダーについては、&lt;a href=&quot;../io-and-the-file-system#processes-and-group-leaders&quot;&gt;IOの章&lt;/a&gt;で簡単に説明しました。</target>
        </trans-unit>
        <trans-unit id="cdde1bffc734f7ff0a1635ad03d752544e76408f" translate="yes" xml:space="preserve">
          <source>Elixir stores documentation inside pre-defined chunks in the bytecode. It can be accessed from Elixir by using the &lt;a href=&quot;code#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; function. This also means documentation is only accessed when required and not when modules are loaded by the Virtual Machine. The only downside is that modules defined in-memory, like the ones defined in IEx, cannot have their documentation accessed as they do not have their bytecode written to disk.</source>
          <target state="translated">Elixirは、ドキュメントをバイトコードの事前定義されたチャンク内に格納します。Elixirから&lt;a href=&quot;code#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; &lt;/a&gt;関数を使用してアクセスできます。これは、ドキュメントが必要なときにのみアクセスされ、モジュールが仮想マシンによってロードされたときではないことも意味します。唯一の欠点は、IExで定義されたモジュールのようにメモリで定義されたモジュールは、ディスクにバイトコードが書き込まれていないため、ドキュメントにアクセスできないことです。</target>
        </trans-unit>
        <trans-unit id="73308596a035e74f58128367e181ad0b11e8c767" translate="yes" xml:space="preserve">
          <source>Elixir stores documentation inside pre-defined chunks in the bytecode. It can be accessed from Elixir by using the &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; function. This also means documentation is only accessed when required and not when modules are loaded by the Virtual Machine. The only downside is that modules defined in-memory, like the ones defined in IEx, cannot have their documentation accessed as they do not have their bytecode written to disk.</source>
          <target state="translated">Elixirは、ドキュメントをバイトコードの事前定義されたチャンク内に格納します。&lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; &lt;/a&gt;関数を使用して、Elixirからアクセスできます。これは、ドキュメントが必要な場合にのみアクセスされ、モジュールが仮想マシンによってロードされた場合にはアクセスされないことも意味します。唯一の欠点は、IExで定義されているモジュールのように、メモリ内で定義されているモジュールは、バイトコードがディスクに書き込まれていないため、ドキュメントにアクセスできないことです。</target>
        </trans-unit>
        <trans-unit id="ba4784f8c761fcb64ca50be28ca3ee0726dd1e34" translate="yes" xml:space="preserve">
          <source>Elixir supports &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; as booleans:</source>
          <target state="translated">Elixirはブール値として &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; をサポートします：</target>
        </trans-unit>
        <trans-unit id="c1fca4af1967c47f797a528ad384a0b6142eeed4" translate="yes" xml:space="preserve">
          <source>Elixir supports Unicode throughout the language.</source>
          <target state="translated">Elixirは言語全体でUnicodeをサポートしています。</target>
        </trans-unit>
        <trans-unit id="6e32af56db37e615dec6eaffbd92d992d378d08f" translate="yes" xml:space="preserve">
          <source>Elixir supports compilation tracers, which allows modules to observe constructs handled by the Elixir compiler when compiling files. A tracer is a module that implements the &lt;code&gt;trace/2&lt;/code&gt; function. The function receives the event name as first argument and &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; as second and it must return &lt;code&gt;:ok&lt;/code&gt;. It is very important for a tracer to do as little work as possible synchronously and dispatch the bulk of the work to a separate process. &lt;strong&gt;Slow tracers will slow down compilation&lt;/strong&gt;.</source>
          <target state="translated">Elixirはコンパイルトレーサーをサポートしています。これにより、モジュールはファイルをコンパイルするときにElixirコンパイラーによって処理される構造を監視できます。トレーサーは、 &lt;code&gt;trace/2&lt;/code&gt; 機能を実装するモジュールです。この関数は、最初の引数としてイベント名を受け取り、2番目の引数として&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt;を受け取り、 &lt;code&gt;:ok&lt;/code&gt; を返す必要があります。トレーサーが同期的に実行する作業をできるだけ少なくし、作業の大部分を別のプロセスにディスパッチすることが非常に重要です。&lt;strong&gt;トレーサーが遅いと、コンパイルが遅くなり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="649a2834ec800cb52f399145f24bccb3f23afbc9" translate="yes" xml:space="preserve">
          <source>Elixir supports compound types as well. For example, a list of integers has type &lt;code&gt;[integer]&lt;/code&gt;, or maps that define keys and types (see the example below).</source>
          <target state="translated">Elixirは複合タイプもサポートしています。たとえば、整数のリストには、タイプ &lt;code&gt;[integer]&lt;/code&gt; 、またはキーとタイプを定義するマップがあります（以下の例を参照）。</target>
        </trans-unit>
        <trans-unit id="1f173b2bc2f5965b36c7172e06c818c7bd04ae05" translate="yes" xml:space="preserve">
          <source>Elixir supports compound types as well. For example, a list of integers has type &lt;code&gt;[integer]&lt;/code&gt;. You can see all the built-in types provided by Elixir &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html&quot;&gt;in the typespecs docs&lt;/a&gt;.</source>
          <target state="translated">Elixirは複合型もサポートしています。たとえば、整数のリストのタイプは &lt;code&gt;[integer]&lt;/code&gt; です。Elixir &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html&quot;&gt;が&lt;/a&gt;提供するすべての組み込み型をtypespecs docsで確認できます。</target>
        </trans-unit>
        <trans-unit id="96cc8eea24e4342cdb1b99a08ca9183edff74d45" translate="yes" xml:space="preserve">
          <source>Elixir supports conversions from charlists which contains any Unicode code point.</source>
          <target state="translated">Elixirは、任意のUnicodeコードポイントを含む文字列からの変換をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c47342d7972fff0f119dd077cbc8a84f69c35e4d" translate="yes" xml:space="preserve">
          <source>Elixir supports only code points &lt;code&gt;\t&lt;/code&gt; (0009), &lt;code&gt;\n&lt;/code&gt; (000A), &lt;code&gt;\r&lt;/code&gt; (000D) and &lt;code&gt;\s&lt;/code&gt; (0020) as whitespace and therefore does not follow requirement R3. R3 requires a wider variety of whitespace and syntax characters to be supported.</source>
          <target state="translated">Elixirは空白としてコードポイント &lt;code&gt;\t&lt;/code&gt; （0009）、 &lt;code&gt;\n&lt;/code&gt; （000A）、 &lt;code&gt;\r&lt;/code&gt; （000D）、および &lt;code&gt;\s&lt;/code&gt; （0020）のみをサポートしているため、要件R3に従いません。R3では、サポートするさまざまな空白文字と構文文字が必要です。</target>
        </trans-unit>
        <trans-unit id="01176f0775592b687fb8331c0702b3ffd6028d87" translate="yes" xml:space="preserve">
          <source>Elixir supports some sigil variants to deal with escaping characters and interpolation. In particular, uppercase letters sigils do not perform interpolation nor escaping. For example, although both &lt;code&gt;~s&lt;/code&gt; and &lt;code&gt;~S&lt;/code&gt; will return strings, the former allows escape codes and interpolation while the latter does not:</source>
          <target state="translated">Elixirは、エスケープ文字と補間を処理するために、いくつかのsigilバリアントをサポートしています。特に、大文字のシジルは補間もエスケープも実行しません。例えば、両方が &lt;code&gt;~s&lt;/code&gt; と &lt;code&gt;~S&lt;/code&gt; 、後者はそうではない文字列が返されます、前者はエスケープコードおよび補間することができます：</target>
        </trans-unit>
        <trans-unit id="310bbc013224b7904b922e667f4bf7001bdc5fa3" translate="yes" xml:space="preserve">
          <source>Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST). Elixir's AST is a regular Elixir data structure composed of the following elements:</source>
          <target state="translated">Elixirの構文は、抽象構文木(AST)に簡単に変換できるように設計されています。ElixirのASTは、以下の要素で構成される通常のElixirデータ構造です。</target>
        </trans-unit>
        <trans-unit id="ff71b1cca0c9586eb958681a7c3aaf58f79bc884" translate="yes" xml:space="preserve">
          <source>Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST). This means the Elixir syntax is mostly uniform with a handful of &quot;syntax sugar&quot; constructs to reduce the noise in common Elixir idioms.</source>
          <target state="translated">Elixirの構文は、抽象構文木(AST)に簡単に変換できるように設計されています。つまり、Elixirの構文は、Elixirの一般的なイディオムのノイズを減らすために、一握りの「シンタックスシュガー」構文でほとんど統一されています。</target>
        </trans-unit>
        <trans-unit id="ce4861615a3c3b43c097938810a51ecb7a613f3a" translate="yes" xml:space="preserve">
          <source>Elixir treats documentation and code comments as different concepts. Documentation is an explicit contract between you and users of your Application Programming Interface (API), be them third-party developers, co-workers, or your future self. Modules and functions must always be documented if they are part of your API.</source>
          <target state="translated">Elixirでは、ドキュメントとコードコメントを別の概念として扱います。ドキュメントは、サードパーティの開発者であれ、同僚であれ、将来の自分であれ、アプリケーション・プログラミング・インターフェース(API)のユーザーとの間で交わされる明示的な契約です。モジュールや関数がAPIの一部である場合は、常にドキュメントを作成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="94ab78733fcffaa0c8d9d75151f47ea7434ea05a" translate="yes" xml:space="preserve">
          <source>Elixir treats documentation as a first-class citizen. This means documentation should be easy to write and easy to read. In this document you will learn how to write documentation in Elixir, covering constructs like module attributes, style practices and doctests.</source>
          <target state="translated">Elixirは、ドキュメントを一等市民として扱います。つまり、ドキュメントは書きやすく、読みやすいものでなければなりません。このドキュメントでは、モジュールの属性、スタイルプラクティス、doctestsのような構造をカバーしながら、Elixirでのドキュメントの書き方を学びます。</target>
        </trans-unit>
        <trans-unit id="3977a0d710ac9b9b84f6c1288fefa9a0d84df520" translate="yes" xml:space="preserve">
          <source>Elixir uses UTF-8 to encode its strings, which means that code points are encoded as a series of 8-bit bytes. UTF-8 is a &lt;strong&gt;variable width&lt;/strong&gt; character encoding that uses one to four bytes to store each code point; it is capable of encoding all valid Unicode code points.</source>
          <target state="translated">ElixirはUTF-8を使用して文字列をエンコードします。つまり、コードポイントは一連の8ビットバイトとしてエンコードされます。UTF-8は、1〜4バイトを使用して各コードポイントを格納する&lt;strong&gt;可変幅の&lt;/strong&gt;文字エンコードです。すべての有効なUnicodeコードポイントをエンコードできます。</target>
        </trans-unit>
        <trans-unit id="c067ad566a52ceb3738f6cd14c05e81b89ddb512" translate="yes" xml:space="preserve">
          <source>Elixir uses curly brackets to define tuples. Like lists, tuples can hold any value:</source>
          <target state="translated">Elixirは中括弧を使ってタプルを定義します。リストと同様に、タプルは任意の値を保持することができます。</target>
        </trans-unit>
        <trans-unit id="b7437bc89e4d7cd42e4777ca92ac246386afa15d" translate="yes" xml:space="preserve">
          <source>Elixir uses single quotes to define charlists:</source>
          <target state="translated">Elixirはシングルクォートを使ってチャリストを定義しています。</target>
        </trans-unit>
        <trans-unit id="0a0c9ca226ff9075b8b4027dc040b09a7fc4c136" translate="yes" xml:space="preserve">
          <source>Elixir uses square brackets to specify a list of values. Values can be of any type:</source>
          <target state="translated">Elixirは角括弧を使用して値のリストを指定します。値は任意のタイプを指定することができます。</target>
        </trans-unit>
        <trans-unit id="1ca97f233cf2ddf0b1c0bf0e2277569cae997e55" translate="yes" xml:space="preserve">
          <source>Elixir v1.7 adopts &lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt; which is a new documentation format meant to be shared across all BEAM languages. The old format, used by &lt;a href=&quot;#get_docs/2&quot;&gt;&lt;code&gt;Code.get_docs/2&lt;/code&gt;&lt;/a&gt;, is no longer available, and therefore this function always returns &lt;code&gt;nil&lt;/code&gt;. Use &lt;a href=&quot;#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">エリクシールv1.7デベロッパーが採用&lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt;すべてBEAM言語間で共有されることを意味し、新たなドキュメント形式です。&lt;a href=&quot;#get_docs/2&quot;&gt; &lt;code&gt;Code.get_docs/2&lt;/code&gt; &lt;/a&gt;で使用されていた古い形式は使用できなくなったため、この関数は常に &lt;code&gt;nil&lt;/code&gt; を返します。代わりに&lt;a href=&quot;#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="7410ee1b8baed2ca63c0da7fbd59f8909583c454" translate="yes" xml:space="preserve">
          <source>Elixir v1.7 adopts &lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt; which is a new documentation format meant to be shared across all BEAM languages. The old format, used by &lt;a href=&quot;code#get_docs/2&quot;&gt;&lt;code&gt;Code.get_docs/2&lt;/code&gt;&lt;/a&gt;, is no longer available, and therefore this function always returns &lt;code&gt;nil&lt;/code&gt;. Use &lt;a href=&quot;code#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Elixir v1.7 は&lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt;を採用しています。これは、すべてのBEAM言語で共有される新しいドキュメント形式です。&lt;a href=&quot;code#get_docs/2&quot;&gt; &lt;code&gt;Code.get_docs/2&lt;/code&gt; &lt;/a&gt;で使用されていた古い形式は使用できなくなったため、この関数は常に &lt;code&gt;nil&lt;/code&gt; を返します。代わりに&lt;a href=&quot;code#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="e2c8e7ddf395da597d9d7092789c372c5e9cb894" translate="yes" xml:space="preserve">
          <source>Elixir version</source>
          <target state="translated">エリクサーバージョン</target>
        </trans-unit>
        <trans-unit id="3ef1a22d73c732ddfb0e37deb22c5920363b7ef9" translate="yes" xml:space="preserve">
          <source>Elixir version information.</source>
          <target state="translated">エリクサーのバージョン情報です。</target>
        </trans-unit>
        <trans-unit id="2d1a3e13eeda4320739159e4214187b33436ad5e" translate="yes" xml:space="preserve">
          <source>Elixir will accept any module name as long as the expression passed as the first argument to &lt;a href=&quot;#defmodule/2&quot;&gt;&lt;code&gt;defmodule/2&lt;/code&gt;&lt;/a&gt; evaluates to an atom. Note that, when a dynamic name is used, Elixir won't nest the name under the current module nor automatically set up an alias.</source>
          <target state="translated">Elixirは、&lt;a href=&quot;#defmodule/2&quot;&gt; &lt;code&gt;defmodule/2&lt;/code&gt; の&lt;/a&gt;最初の引数として渡された式がアトムに評価される限り、任意のモジュール名を受け入れます。動的な名前が使用されている場合、Elixirは現在のモジュールの下に名前をネストせず、エイリアスを自動的に設定しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0c3a96ef15c7b10a131a32d7fe611882ee9f141c" translate="yes" xml:space="preserve">
          <source>Elixir will automatically wrap the function body in a &lt;code&gt;try&lt;/code&gt; whenever one of &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; is specified.</source>
          <target state="translated">Elixirは、 &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;rescue&lt;/code&gt; 、または &lt;code&gt;catch&lt;/code&gt; のいずれかが指定されている場合は常に、関数本体を &lt;code&gt;try&lt;/code&gt; で自動的にラップします。</target>
        </trans-unit>
        <trans-unit id="a85970e0faad243447c5114389dcdeb0a39d337f" translate="yes" xml:space="preserve">
          <source>Elixir&amp;rsquo;s processes should not be confused with operating system processes. Processes in Elixir are extremely lightweight in terms of memory and CPU (even compared to threads as used in many other programming languages). Because of this, it is not uncommon to have tens or even hundreds of thousands of processes running simultaneously.</source>
          <target state="translated">Elixirのプロセスをオペレーティングシステムのプロセスと混同しないでください。Elixirのプロセスは、メモリとCPUの点で非常に軽量です（他の多くのプログラミング言語で使用されているスレッドと比較しても）。このため、数万または数十万のプロセスが同時に実行されることも珍しくありません。</target>
        </trans-unit>
        <trans-unit id="74afface970af5cae73731659047f9af84feb478" translate="yes" xml:space="preserve">
          <source>Elixir's AST (Abstract Syntax Tree)</source>
          <target state="translated">エリクサーのAST(抽象構文木</target>
        </trans-unit>
        <trans-unit id="ce6d269d872319624d23c6d1f8a1436923e77f5d" translate="yes" xml:space="preserve">
          <source>Elixir's interactive shell.</source>
          <target state="translated">Elixirの対話型シェル。</target>
        </trans-unit>
        <trans-unit id="b500d25431abdc8af2398b8e041e9fe8f8aee8f4" translate="yes" xml:space="preserve">
          <source>Elixir's standard library contains a few frequently used behaviours such as &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;application&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Elixirの標準ライブラリには、&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;application&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;など、頻繁に使用されるいくつかの動作が含まれています。</target>
        </trans-unit>
        <trans-unit id="9b38f6b406adad2c4ad9a3c750691827797402b8" translate="yes" xml:space="preserve">
          <source>Elixir's standard library contains a few frequently used behaviours such as &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Elixirの標準ライブラリには、&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;などの頻繁に使用される動作がいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="a9c075ef1bb96e78c3aeb788db6fdaa2ad6900d8" translate="yes" xml:space="preserve">
          <source>Else</source>
          <target state="translated">Else</target>
        </trans-unit>
        <trans-unit id="a956e2fd0a59819b9e171fd2f4db600228e545a0" translate="yes" xml:space="preserve">
          <source>Embeds a template given by &lt;code&gt;contents&lt;/code&gt; into the current module.</source>
          <target state="translated">&lt;code&gt;contents&lt;/code&gt; 指定されたテンプレートを現在のモジュールに埋め込みます。</target>
        </trans-unit>
        <trans-unit id="e3fd52b24df6fd39026fb28f8524cf6ca06d78cf" translate="yes" xml:space="preserve">
          <source>Embeds a text given by &lt;code&gt;contents&lt;/code&gt; into the current module.</source>
          <target state="translated">&lt;code&gt;contents&lt;/code&gt; によって指定されたテキストを現在のモジュールに埋め込みます。</target>
        </trans-unit>
        <trans-unit id="5b3a40099a2074128eab39c61a99ee9cc8c97d42" translate="yes" xml:space="preserve">
          <source>Emits a sequence of values for the given accumulator.</source>
          <target state="translated">指定されたアキュムレータの値のシーケンスを出力します。</target>
        </trans-unit>
        <trans-unit id="13f5c3f168a677e832d55a71220e8084e5ebb435" translate="yes" xml:space="preserve">
          <source>Emits a sequence of values for the given resource.</source>
          <target state="translated">与えられたリソースの値のシーケンスを出力します。</target>
        </trans-unit>
        <trans-unit id="ee36a1b257d40c27de1319e9f52bd4df213a780a" translate="yes" xml:space="preserve">
          <source>Emits a sequence of values, starting with &lt;code&gt;start_value&lt;/code&gt;. Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; on the previous value.</source>
          <target state="translated">&lt;code&gt;start_value&lt;/code&gt; で始まる一連の値を発行します。前の値に対して &lt;code&gt;next_fun&lt;/code&gt; を呼び出すことにより、連続する値が生成されます。</target>
        </trans-unit>
        <trans-unit id="c167634bd4b2e54cc64b0ca7da7acd698bd3f926" translate="yes" xml:space="preserve">
          <source>Empty list elements are discarded.</source>
          <target state="translated">空のリスト要素は破棄されます。</target>
        </trans-unit>
        <trans-unit id="2965dae66a63ca2f32957370b2d3c71d31f0404a" translate="yes" xml:space="preserve">
          <source>Empty list elements from &lt;code&gt;list&lt;/code&gt; are discarded, but not the ones from &lt;code&gt;tail&lt;/code&gt;.</source>
          <target state="translated">listの空のリスト要素は破棄され &lt;code&gt;list&lt;/code&gt; が、 &lt;code&gt;tail&lt;/code&gt; の要素は破棄されません。</target>
        </trans-unit>
        <trans-unit id="e62ffd3f17608b67830975574d7151f053f3b91e" translate="yes" xml:space="preserve">
          <source>Empty strings are only removed from the result if the &lt;code&gt;:trim&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">空の文字列は、 &lt;code&gt;:trim&lt;/code&gt; オプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合にのみ結果から削除されます。</target>
        </trans-unit>
        <trans-unit id="55e69718479729085dd821e5465e25f44c0324fa" translate="yes" xml:space="preserve">
          <source>Enables logging for the current process.</source>
          <target state="translated">現在のプロセスのロギングを有効にします。</target>
        </trans-unit>
        <trans-unit id="e2d19b78121686bc349ccaa09a8452830a7f9140" translate="yes" xml:space="preserve">
          <source>Encircled.</source>
          <target state="translated">Encircled.</target>
        </trans-unit>
        <trans-unit id="c616c5fe7020dabc2f93906e0a5f2e05bdc7d8a9" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;string&lt;/code&gt; as &quot;x-www-form-urlencoded&quot;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; を「x-www-form-urlencoded」としてエンコードします。</target>
        </trans-unit>
        <trans-unit id="89ea780eda521b71e81ed735656c9b61d9499afc" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 16 encoded string.</source>
          <target state="translated">バイナリ文字列をベース 16 エンコードされた文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="b7e8311ecf9de60bb4c8128af17fdd4f6e19c5bd" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 32 encoded string with an extended hexadecimal alphabet.</source>
          <target state="translated">バイナリ文字列を、拡張された16進数のアルファベットでベース32のエンコードされた文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="36e80d95ff066a33ec7f84aa78c9dbee7b1c006d" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 32 encoded string.</source>
          <target state="translated">バイナリ文字列をベース 32 エンコードされた文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="02f9836e91d8d8f20631bf25f980c01911623202" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 64 encoded string with URL and filename safe alphabet.</source>
          <target state="translated">バイナリ文字列を、URL とファイル名の安全なアルファベットでベース 64 エンコードされた文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="598559f4be54955449341d6458c6b1bc5c089d2a" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 64 encoded string.</source>
          <target state="translated">バイナリ文字列をベース 64 エンコードされた文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="669885d2c33e97774bece663078c5982ab0c0947" translate="yes" xml:space="preserve">
          <source>Encodes an enumerable into a query string.</source>
          <target state="translated">列挙可能な文字列をクエリ文字列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="2ea89f176d80e61e2fa991e7665230fc139bc40d" translate="yes" xml:space="preserve">
          <source>Enforcing keys</source>
          <target state="translated">キーの強制</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="428bd921a8f300c3b20c8266821204a755c68434" translate="yes" xml:space="preserve">
          <source>Ensures the given &lt;code&gt;app&lt;/code&gt; and its applications are started.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; とそのアプリケーションが開始されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="555514beae7482d6d57cd04de49cfc7d3710c06c" translate="yes" xml:space="preserve">
          <source>Ensures the given &lt;code&gt;app&lt;/code&gt; is loaded.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; がロードされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="5fb7dedc1a9428584a4069438797a9ae78f66928" translate="yes" xml:space="preserve">
          <source>Ensures the given &lt;code&gt;app&lt;/code&gt; is started.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; が確実に起動されるようにします。</target>
        </trans-unit>
        <trans-unit id="23ee0124a924556d787c30d38fea8fafda3318c2" translate="yes" xml:space="preserve">
          <source>Ensures the given module is compiled and loaded.</source>
          <target state="translated">指定したモジュールがコンパイルされてロードされることを確認します。</target>
        </trans-unit>
        <trans-unit id="c639ba03accf3baf6f605c3c0a367752ac1ba4b8" translate="yes" xml:space="preserve">
          <source>Ensures the given module is loaded.</source>
          <target state="translated">指定されたモジュールがロードされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="02d3338a85e66444166e14ec820ab3f756bc5765" translate="yes" xml:space="preserve">
          <source>Ensures the project structure for the given project exists.</source>
          <target state="translated">指定されたプロジェクトのプロジェクト構造が存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="dd06dfc909fbc0c4ad3d2dc1fed376ba517fa970" translate="yes" xml:space="preserve">
          <source>Entries with duplicated keys end up in the same keyword list.</source>
          <target state="translated">キーが重複しているエントリは、同じキーワードリストで終了します。</target>
        </trans-unit>
        <trans-unit id="20588ae8e5c269292d35f9dfffa8f2eb3fd3c259" translate="yes" xml:space="preserve">
          <source>Enum</source>
          <target state="translated">Enum</target>
        </trans-unit>
        <trans-unit id="44a9d3cb7758b69424c29688d3733784f2d7beb8" translate="yes" xml:space="preserve">
          <source>Enum.EmptyError</source>
          <target state="translated">Enum.EmptyError</target>
        </trans-unit>
        <trans-unit id="203f8ecd57ba73b4d911d61ce2b2e0bbecd88546" translate="yes" xml:space="preserve">
          <source>Enum.EmptyError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">Enum.EmptyError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="92ff846ccb27bb1237f0fe73dffd1111a34febfd" translate="yes" xml:space="preserve">
          <source>Enum.OutOfBoundsError</source>
          <target state="translated">Enum.OutOfBoundsError</target>
        </trans-unit>
        <trans-unit id="64fce429b4436d311f9ed265caf9dbd13748ca8e" translate="yes" xml:space="preserve">
          <source>Enum.OutOfBoundsError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">Enum.OutOfBoundsError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="83df7a7ef8fa21dd3116045758d3e9407ca3149d" translate="yes" xml:space="preserve">
          <source>Enumerable</source>
          <target state="translated">Enumerable</target>
        </trans-unit>
        <trans-unit id="a8bd4b8016c41ed593121704b28a0f638927292f" translate="yes" xml:space="preserve">
          <source>Enumerable &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">列挙可能な&lt;small&gt;プロトコル&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d949b006b0cb6700716702ddad84d81584b294d8" translate="yes" xml:space="preserve">
          <source>Enumerable keys in &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#drop/2&quot;&gt;&lt;code&gt;Map.drop/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#split/2&quot;&gt;&lt;code&gt;Map.split/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#take/2&quot;&gt;&lt;code&gt;Map.take/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#drop/2&quot;&gt; &lt;code&gt;Map.drop/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#split/2&quot;&gt; &lt;code&gt;Map.split/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#take/2&quot;&gt; &lt;code&gt;Map.take/2&lt;/code&gt; の列挙可能な&lt;/a&gt;キー</target>
        </trans-unit>
        <trans-unit id="f5c0dbf914d64832e2d144e52e6254adb376dd46" translate="yes" xml:space="preserve">
          <source>Enumerable keys in &lt;a href=&quot;map#drop/2&quot;&gt;&lt;code&gt;Map.drop/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;map#split/2&quot;&gt;&lt;code&gt;Map.split/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;map#take/2&quot;&gt;&lt;code&gt;Map.take/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;map#drop/2&quot;&gt; &lt;code&gt;Map.drop/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;map#split/2&quot;&gt; &lt;code&gt;Map.split/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;map#take/2&quot;&gt; &lt;code&gt;Map.take/2&lt;/code&gt; の列挙可能な&lt;/a&gt;キー</target>
        </trans-unit>
        <trans-unit id="140efbf707d0a7d6c39e74eac70140aecd0e5c56" translate="yes" xml:space="preserve">
          <source>Enumerable protocol used by &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールで使用される列挙可能なプロトコル。</target>
        </trans-unit>
        <trans-unit id="a08785570fea867f5f88ca2ee2af7ae3e1313ca0" translate="yes" xml:space="preserve">
          <source>Enumerable protocol used by &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールと&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールで使用される列挙可能なプロトコル。</target>
        </trans-unit>
        <trans-unit id="d50ecedb47e87b1d9271881d5fe0a9349ed165af" translate="yes" xml:space="preserve">
          <source>Enumerable.acc (0)</source>
          <target state="translated">Enumerable.acc (0)</target>
        </trans-unit>
        <trans-unit id="165c38b0e896ed9f5159922dce36f171ef2320bb" translate="yes" xml:space="preserve">
          <source>Enumerable.continuation (0)</source>
          <target state="translated">Enumerable.continuation (0)</target>
        </trans-unit>
        <trans-unit id="ba612d94bc0277c74713f344be3f6d833e339b91" translate="yes" xml:space="preserve">
          <source>Enumerable.count (1)</source>
          <target state="translated">Enumerable.count (1)</target>
        </trans-unit>
        <trans-unit id="c8a16ef4893a246c5d44ffbd9b826395af284553" translate="yes" xml:space="preserve">
          <source>Enumerable.member? (2)</source>
          <target state="translated">Enumerable.member? (2)</target>
        </trans-unit>
        <trans-unit id="a9bae250bd6ab01ed637153931cbca7969a9d2fd" translate="yes" xml:space="preserve">
          <source>Enumerable.reduce (3)</source>
          <target state="translated">Enumerable.reduce (3)</target>
        </trans-unit>
        <trans-unit id="ee6aa06bf997d33de46b0f36134133d251942cde" translate="yes" xml:space="preserve">
          <source>Enumerable.reducer (0)</source>
          <target state="translated">Enumerable.reducer (0)</target>
        </trans-unit>
        <trans-unit id="642806a29777279924e9371db22138badd652470" translate="yes" xml:space="preserve">
          <source>Enumerable.result (0)</source>
          <target state="translated">Enumerable.result (0)</target>
        </trans-unit>
        <trans-unit id="67feaa35a2d44a604538ef39106d006cede14270" translate="yes" xml:space="preserve">
          <source>Enumerable.slice (1)</source>
          <target state="translated">Enumerable.slice (1)</target>
        </trans-unit>
        <trans-unit id="976e95d4d549c47ec6aacfa3aeb87430d06ae485" translate="yes" xml:space="preserve">
          <source>Enumerable.slicing_fun (0)</source>
          <target state="translated">Enumerable.slicing_fun (0)</target>
        </trans-unit>
        <trans-unit id="8099438503374b0f111ad8c4312c5674efd4704f" translate="yes" xml:space="preserve">
          <source>Enumerable.t (0)</source>
          <target state="translated">Enumerable.t (0)</target>
        </trans-unit>
        <trans-unit id="7d2e28d9448f286359bfee7b46440bedbb9fdf58" translate="yes" xml:space="preserve">
          <source>Enumerables</source>
          <target state="translated">Enumerables</target>
        </trans-unit>
        <trans-unit id="1dc0acb1a8bb4c81550d3ac71c2122f2718c66f7" translate="yes" xml:space="preserve">
          <source>Enumerables and Streams</source>
          <target state="translated">エヌメラーブルとストリーム</target>
        </trans-unit>
        <trans-unit id="30d600c6cc439356af01777f989e3d24add2e962" translate="yes" xml:space="preserve">
          <source>Enumerates the &lt;code&gt;enumerable&lt;/code&gt;, by removing the elements for which function &lt;code&gt;fun&lt;/code&gt; returned duplicate elements.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; が重複した要素を返した要素を削除することにより、 &lt;code&gt;enumerable&lt;/code&gt; を列挙します。</target>
        </trans-unit>
        <trans-unit id="0710d3c7a9e2c2a7ab19f785bc7e4ac156c8c8ae" translate="yes" xml:space="preserve">
          <source>Enumerates the &lt;code&gt;enumerable&lt;/code&gt;, removing all duplicated elements.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; を列挙し、重複する要素をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="d63d851ffe5d4b54e805b90b32ec2610b7cdc775" translate="yes" xml:space="preserve">
          <source>Enumerates the &lt;code&gt;enumerable&lt;/code&gt;, returning a list where all consecutive duplicated elements are collapsed to a single element.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; を列挙し、すべての連続する重複要素が単一の要素に折りたたまれているリストを返します。</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="e22b06d69ee07489bc27f1054e5551d2fb3ffec1" translate="yes" xml:space="preserve">
          <source>Environment variables that are not meant to hold a value (and act basically as flags) should be set to either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;, for example:</source>
          <target state="translated">値を保持することを意図していない（そして基本的にフラグとして機能する）環境変数は、 &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;true&lt;/code&gt; に設定する必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="017b53c42e43b39e1f5aabf6f7280c2f777243a2" translate="yes" xml:space="preserve">
          <source>Environments</source>
          <target state="translated">Environments</target>
        </trans-unit>
        <trans-unit id="8263704ec4e031f9cd98ed43d056f7db9e2fa14d" translate="yes" xml:space="preserve">
          <source>Equal to operator. Returns &lt;code&gt;true&lt;/code&gt; if the two terms are equal.</source>
          <target state="translated">演算子と同じです。2つの項が等しい場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5d9ca98304ae0b29eb5edae09971f0cda610aca2" translate="yes" xml:space="preserve">
          <source>Erlang Term Storage</source>
          <target state="translated">Erlang項ストレージ</target>
        </trans-unit>
        <trans-unit id="873eaae56cb75c28c82e887676a81c9c926d3d76" translate="yes" xml:space="preserve">
          <source>Erlang VM process identifier.</source>
          <target state="translated">Erlang VM のプロセス識別子。</target>
        </trans-unit>
        <trans-unit id="0f56eeaacbf7d4f4fe215cd958650ad712192183" translate="yes" xml:space="preserve">
          <source>Erlang and Elixir also have the idea of &lt;a href=&quot;#t:chardata/0&quot;&gt;&lt;code&gt;chardata/0&lt;/code&gt;&lt;/a&gt;. Chardata is very similar to IO data: the only difference is that integers in IO data represent bytes while integers in chardata represent Unicode code points. Bytes (&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;byte/0&lt;/code&gt;&lt;/a&gt;) are integers in the &lt;code&gt;0..255&lt;/code&gt; range, while Unicode code points (&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;char/0&lt;/code&gt;&lt;/a&gt;) are integers in the range &lt;code&gt;0..0x10FFFF&lt;/code&gt;. The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides the &lt;a href=&quot;#chardata_to_string/1&quot;&gt;&lt;code&gt;chardata_to_string/1&lt;/code&gt;&lt;/a&gt; function for chardata as the &quot;counter-part&quot; of the &lt;a href=&quot;#iodata_to_binary/1&quot;&gt;&lt;code&gt;iodata_to_binary/1&lt;/code&gt;&lt;/a&gt; function for IO data.</source>
          <target state="translated">ErlangとElixirにも&lt;a href=&quot;#t:chardata/0&quot;&gt; &lt;code&gt;chardata/0&lt;/code&gt; の&lt;/a&gt;アイデアがあります。 ChardataはIOデータと非常によく似ています。唯一の違いは、IOデータの整数がバイトを表すのに対し、chardataの整数はUnicodeコードポイントを表すことです。バイト（&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt; &lt;code&gt;byte/0&lt;/code&gt; &lt;/a&gt;）は &lt;code&gt;0..255&lt;/code&gt; の範囲の整数であり、Unicodeコードポイント（&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt; &lt;code&gt;char/0&lt;/code&gt; &lt;/a&gt;）は &lt;code&gt;0..0x10FFFF&lt;/code&gt; の範囲の整数です。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;モジュールが提供&lt;a href=&quot;#chardata_to_string/1&quot;&gt; &lt;code&gt;chardata_to_string/1&lt;/code&gt; &lt;/a&gt;の「カウンターパート」としてCHARDATA機能を&lt;a href=&quot;#iodata_to_binary/1&quot;&gt; &lt;code&gt;iodata_to_binary/1&lt;/code&gt; &lt;/a&gt; IOデータの関数。</target>
        </trans-unit>
        <trans-unit id="5d81fb4bfd2d9c41c1a7ce9b604e0403471792c0" translate="yes" xml:space="preserve">
          <source>Erlang and Elixir also have the idea of &lt;a href=&quot;#t:chardata/0&quot;&gt;&lt;code&gt;chardata/0&lt;/code&gt;&lt;/a&gt;. Chardata is very similar to IO data: the only difference is that integers in IO data represent bytes while integers in chardata represent Unicode codepoints. Bytes (&lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;byte/0&lt;/code&gt;&lt;/a&gt;) are integers in the &lt;code&gt;0..255&lt;/code&gt; range, while Unicode codepoints (&lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;char/0&lt;/code&gt;&lt;/a&gt;) are integers in the range &lt;code&gt;0..0x10FFFF&lt;/code&gt;. The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides the &lt;a href=&quot;#chardata_to_string/1&quot;&gt;&lt;code&gt;chardata_to_string/1&lt;/code&gt;&lt;/a&gt; function for chardata as the &quot;counter-part&quot; of the &lt;a href=&quot;#iodata_to_binary/1&quot;&gt;&lt;code&gt;iodata_to_binary/1&lt;/code&gt;&lt;/a&gt; function for IO data.</source>
          <target state="translated">ErlangとElixirも&lt;a href=&quot;#t:chardata/0&quot;&gt; &lt;code&gt;chardata/0&lt;/code&gt; の&lt;/a&gt;考え方を持っています。ChardataはIOデータと非常によく似ています。唯一の違いは、IOデータの整数はバイトを表し、chardataの整数はUnicodeコードポイントを表すことです。バイト（&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;byte/0&lt;/code&gt; &lt;/a&gt;）は &lt;code&gt;0..255&lt;/code&gt; の範囲の整数ですが、Unicodeコードポイント（&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;char/0&lt;/code&gt; &lt;/a&gt;）は &lt;code&gt;0..0x10FFFF&lt;/code&gt; の範囲の整数です。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;モジュールが提供&lt;a href=&quot;#chardata_to_string/1&quot;&gt; &lt;code&gt;chardata_to_string/1&lt;/code&gt; &lt;/a&gt;の「カウンターパート」としてCHARDATA機能を&lt;a href=&quot;#iodata_to_binary/1&quot;&gt; &lt;code&gt;iodata_to_binary/1&lt;/code&gt; &lt;/a&gt; IOデータの関数。</target>
        </trans-unit>
        <trans-unit id="257cd41d0a52105a1f464fecff0c7474573eaa0b" translate="yes" xml:space="preserve">
          <source>Erlang and Elixir are sometimes known for the capability of upgrading a node that is running in production without shutting down that node. However, this feature is not supported out of the box by Elixir releases.</source>
          <target state="translated">ErlangとElixirは、運用中のノードをシャットダウンせずにアップグレードできることで知られています。しかし、この機能はElixirのリリースではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2ad841c6351d40f6ce14b1c3365f66f45cf90f9a" translate="yes" xml:space="preserve">
          <source>Erlang configuration - options that handle integration with Erlang's logging facilities</source>
          <target state="translated">Erlang設定-Erlangのロギング機能との統合を扱うオプション</target>
        </trans-unit>
        <trans-unit id="dcdbc42e4590fc1cd5b2780008879d7043463df9" translate="yes" xml:space="preserve">
          <source>Erlang errors</source>
          <target state="translated">エラーの取得</target>
        </trans-unit>
        <trans-unit id="afd9042ead7605c46c0058e1b4e52ac063ec4da4" translate="yes" xml:space="preserve">
          <source>Erlang errors are transformed into Elixir ones when rescuing:</source>
          <target state="translated">Erlangのエラーは救出時にElixirのエラーに変換されます。</target>
        </trans-unit>
        <trans-unit id="ef09a5110ea182804c30762b32ada9f7c5b439dd" translate="yes" xml:space="preserve">
          <source>Erlang handlers run in the same process as the process logging the message/event. This gives developers more flexibility but they should avoid performing any long running action in such handlers, as it may slow down the action being executed considerably. At the moment, there is no built-in overload protection for Erlang handlers, so it is your responsibility to implement it</source>
          <target state="translated">Erlangのハンドラはメッセージやイベントをロギングするプロセスと同じプロセスで実行されます。これは開発者に柔軟性を与えますが、このようなハンドラで長時間実行されるアクションを実行するのは避けた方がいいでしょう。今のところ、Erlangハンドラには組み込みのオーバーロード保護機能はありませんので、実装するのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="80e47b987c75aeed2cf56f80f3a45202d7a9cade" translate="yes" xml:space="preserve">
          <source>Erlang has two modes to load code: interactive and embedded.</source>
          <target state="translated">Erlangにはコードをロードするための2つのモードがあります:対話型と埋め込み型です。</target>
        </trans-unit>
        <trans-unit id="c4aea0a9415c252cca77b12b8e68bf25c0600b44" translate="yes" xml:space="preserve">
          <source>Erlang libraries</source>
          <target state="translated">Erlang ライブラリ</target>
        </trans-unit>
        <trans-unit id="947adf59db0f5074b68cab24e83d10f84084f65d" translate="yes" xml:space="preserve">
          <source>Erlang projects</source>
          <target state="translated">Erlang プロジェクト</target>
        </trans-unit>
        <trans-unit id="353a427c9c3948990fb1397e32a17449450dd341" translate="yes" xml:space="preserve">
          <source>Erlang&amp;rsquo;s official website has a short &lt;a href=&quot;http://www.erlang.org/course/concurrent_programming.html&quot;&gt;tutorial&lt;/a&gt; with pictures that briefly describe Erlang&amp;rsquo;s primitives for concurrent programming.</source>
          <target state="translated">Erlangの公式Webサイトには、並行プログラミングのためのErlangのプリミティブを簡単に説明する写真付きの短い&lt;a href=&quot;http://www.erlang.org/course/concurrent_programming.html&quot;&gt;チュートリアル&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="2924249c9d3eeb99cc39153818164a0a08c129f2" translate="yes" xml:space="preserve">
          <source>Erlang&amp;rsquo;s official website has a short &lt;a href=&quot;https://www.erlang.org/course&quot;&gt;tutorial&lt;/a&gt;. There is chapter with pictures briefly describing Erlang&amp;rsquo;s primitives for &lt;a href=&quot;https://www.erlang.org/course/concurrent_programming.html&quot;&gt;concurrent programming&lt;/a&gt;.</source>
          <target state="translated">Erlangの公式ウェブサイトには短い&lt;a href=&quot;https://www.erlang.org/course&quot;&gt;チュートリアルがあり&lt;/a&gt;ます。&lt;a href=&quot;https://www.erlang.org/course/concurrent_programming.html&quot;&gt;並行プログラミングの&lt;/a&gt;ためのErlangのプリミティブを簡単に説明する写真付きの章があります。</target>
        </trans-unit>
        <trans-unit id="64b602b5d1c8c7cedbd11a4c46c7bec0f2ef6328" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 19 onwards</source>
          <target state="translated">Erlang/OTP 19 以降</target>
        </trans-unit>
        <trans-unit id="9f3b0640f155508325d5fd627bb055c21f7b1145" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 20 onwards</source>
          <target state="translated">Erlang/OTP 20以降</target>
        </trans-unit>
        <trans-unit id="3c959257e030332549e20072b5db96d3e0320669" translate="yes" xml:space="preserve">
          <source>Erlang/OTP handlers</source>
          <target state="translated">Erlang/OTP ハンドラ</target>
        </trans-unit>
        <trans-unit id="e3d3ba354eaa3fdf7c394b986d2d13ceb0a09b7f" translate="yes" xml:space="preserve">
          <source>Erlang/OTP handlers must be listed under your own application:</source>
          <target state="translated">Erlang/OTPハンドラはあなた自身のアプリケーションの下にリストアップされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="e20c6b34c6701bebbb6bc88a9d6f49d957b3f1ee" translate="yes" xml:space="preserve">
          <source>Erlang/OTP integration</source>
          <target state="translated">Erlang/OTP の統合</target>
        </trans-unit>
        <trans-unit id="0240f7d16642d7d18aa4135e9508d4430ca6ed28" translate="yes" xml:space="preserve">
          <source>Erlang/OTP versioning is independent from the versioning of Elixir. Each version of Elixir supports a specific range of Erlang/OTP versions. The compatibility table is shown below.</source>
          <target state="translated">Erlang/OTPのバージョニングはElixirのバージョニングとは独立しています。Elixirの各バージョンは特定の範囲のErlang/OTPバージョンをサポートしています。互換性の表を以下に示します。</target>
        </trans-unit>
        <trans-unit id="95b539190ee1df5b25c9d30c7a60632c2c6242b6" translate="yes" xml:space="preserve">
          <source>ErlangError</source>
          <target state="translated">ErlangError</target>
        </trans-unit>
        <trans-unit id="eb887d05f639b63c61d49ed79af8fbf4426605b6" translate="yes" xml:space="preserve">
          <source>ErlangError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ErlangError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="6a37b79ee438a25b4b00f639862f12f01079bb8d" translate="yes" xml:space="preserve">
          <source>Error logger configuration</source>
          <target state="translated">エラーロガーの設定</target>
        </trans-unit>
        <trans-unit id="9497fa3a6a15769b096afdea76d16a9bb93c4394" translate="yes" xml:space="preserve">
          <source>Error reasons</source>
          <target state="translated">エラーの理由</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="e4b51562d8691be50e95ec4d102a96ec94cfc7fc" translate="yes" xml:space="preserve">
          <source>Errors (or &lt;em&gt;exceptions&lt;/em&gt;) are used when exceptional things happen in the code. A sample error can be retrieved by trying to add a number into an atom:</source>
          <target state="translated">エラー（または&lt;em&gt;例外&lt;/em&gt;）は、コードで例外的なことが発生したときに使用されます。アトムに数値を追加しようとすると、サンプルエラーを取得できます。</target>
        </trans-unit>
        <trans-unit id="1e769d29496e91df4803194e858296cef49f583c" translate="yes" xml:space="preserve">
          <source>Errors can be &lt;strong&gt;rescued&lt;/strong&gt; using the &lt;code&gt;try/rescue&lt;/code&gt; construct:</source>
          <target state="translated">エラーは、 &lt;code&gt;try/rescue&lt;/code&gt; 構文を使用して&lt;strong&gt;救出&lt;/strong&gt;できます。</target>
        </trans-unit>
        <trans-unit id="ace44333765fe041260545be00bfe6b34903e900" translate="yes" xml:space="preserve">
          <source>Errors in guards</source>
          <target state="translated">警備員のミス</target>
        </trans-unit>
        <trans-unit id="6d7f25adbd68385b52715a0e769e2e3468d082ed" translate="yes" xml:space="preserve">
          <source>Escape characters</source>
          <target state="translated">脱出キャラクター</target>
        </trans-unit>
        <trans-unit id="7cf06e4f5765ec1423667355b26bedd03532387d" translate="yes" xml:space="preserve">
          <source>Escapes a string to be literally matched in a regex.</source>
          <target state="translated">文字列をエスケープして正規表現にマッチさせます。</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="7e30234707fb1dda8ea3159dd78fbf5f465fb228" translate="yes" xml:space="preserve">
          <source>Escripts are installed at &lt;code&gt;~/.mix/escripts&lt;/code&gt;. Add that path to your &lt;code&gt;PATH&lt;/code&gt; environment variable to be able to run installed escripts from any directory.</source>
          <target state="translated">&lt;code&gt;~/.mix/escripts&lt;/code&gt; は〜/ .mix / escriptsにインストールされます。そのパスを &lt;code&gt;PATH&lt;/code&gt; 環境変数に追加して、インストールされたescriptを任意のディレクトリから実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="cfc5f1f3afc3241e14ccf2fda82512fad9553a23" translate="yes" xml:space="preserve">
          <source>Escripts should be used as a mechanism to share scripts between developers and not as a deployment mechanism. For running live systems, consider using &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt; or building releases. See the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; module for more information on systems life-cycles.</source>
          <target state="translated">Escriptsは、デプロイメントメカニズムとしてではなく、開発者間でスクリプトを共有するメカニズムとして使用する必要があります。ライブシステムを&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt;場合は、ミックスランまたはビルドリリースの使用を検討してください。システムのライフサイクルの詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="ef08760354a34230fab73487dfba3c92eef3db07" translate="yes" xml:space="preserve">
          <source>Escripts should be used as a mechanism to share scripts between developers and not as a deployment mechanism. For running live systems, consider using &lt;a href=&quot;mix.tasks.run&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt; or building releases. See the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; module for more information on systems life-cycles.</source>
          <target state="translated">スクリプトは、デプロイメントメカニズムとしてではなく、開発者間でスクリプトを共有するためのメカニズムとして使用する必要があります。ライブシステムを&lt;a href=&quot;mix.tasks.run&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt;場合は、混合実行またはビルドリリースの使用を検討してください。システムのライフサイクルの詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="9a5a63b505c94b9715c6cb22738effadf43970a2" translate="yes" xml:space="preserve">
          <source>Establishes a connection to &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; への接続を確立します。</target>
        </trans-unit>
        <trans-unit id="5197d13a701e91968e7385a64eaafa020ebb9b3e" translate="yes" xml:space="preserve">
          <source>Evals the given file.</source>
          <target state="translated">与えられたファイルを検証します。</target>
        </trans-unit>
        <trans-unit id="a80e33a10ee3ca88cd7700527b66fae439803baa" translate="yes" xml:space="preserve">
          <source>Evaluate a string (&lt;a href=&quot;#eval_string/3&quot;&gt;&lt;code&gt;eval_string/3&lt;/code&gt;&lt;/a&gt;) or a file (&lt;a href=&quot;#eval_file/3&quot;&gt;&lt;code&gt;eval_file/3&lt;/code&gt;&lt;/a&gt;) directly. This is the simplest API to use but also the slowest, since the code is evaluated and not compiled before.</source>
          <target state="translated">文字列（&lt;a href=&quot;#eval_string/3&quot;&gt; &lt;code&gt;eval_string/3&lt;/code&gt; &lt;/a&gt;）またはファイル（&lt;a href=&quot;#eval_file/3&quot;&gt; &lt;code&gt;eval_file/3&lt;/code&gt; &lt;/a&gt;）を直接評価します。これは使用するのに最も簡単なAPIですが、コードが評価され、以前にコンパイルされていないため、最も低速です。</target>
        </trans-unit>
        <trans-unit id="c61e6ac1811baae3135839c7b54f099f020838b7" translate="yes" xml:space="preserve">
          <source>Evaluate a string (&lt;code&gt;eval_string&lt;/code&gt;) or a file (&lt;code&gt;eval_file&lt;/code&gt;) directly. This is the simplest API to use but also the slowest, since the code is evaluated and not compiled before.</source>
          <target state="translated">文字列（ &lt;code&gt;eval_string&lt;/code&gt; ）またはファイル（ &lt;code&gt;eval_file&lt;/code&gt; ）を直接評価します。これは、使用する最も単純なAPIですが、コードが評価され、以前にコンパイルされていないため、最も時間がかかります。</target>
        </trans-unit>
        <trans-unit id="b6b73d4e37c0e2fc6bcd10607ad1cdb1b13313ab" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;fun&lt;/code&gt; and puts the result under &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; unless &lt;code&gt;key&lt;/code&gt; is already present.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; を評価し、 &lt;code&gt;key&lt;/code&gt; が既に存在しない限り、結果を &lt;code&gt;map&lt;/code&gt; &lt;code&gt;key&lt;/code&gt; 下に配置します。</target>
        </trans-unit>
        <trans-unit id="47fea9e50d94c5ba5334f9182ab4da272971ff69" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;fun&lt;/code&gt; and puts the result under &lt;code&gt;key&lt;/code&gt; in keyword list unless &lt;code&gt;key&lt;/code&gt; is already present.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; を評価し、 &lt;code&gt;key&lt;/code&gt; が既に存在しない限り、キーワードリストの &lt;code&gt;key&lt;/code&gt; 下に結果を配置します。</target>
        </trans-unit>
        <trans-unit id="378c49e24c10c27a713c2ca33d351716056ef24a" translate="yes" xml:space="preserve">
          <source>Evaluates and copy templates at &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">テンプレートを評価し、 &lt;code&gt;source&lt;/code&gt; から &lt;code&gt;target&lt;/code&gt; コピーします。</target>
        </trans-unit>
        <trans-unit id="40a2755ea234063a3a9b34d6399df316742199aa" translate="yes" xml:space="preserve">
          <source>Evaluates the &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; filters against the given &lt;code&gt;tags&lt;/code&gt; to determine if tests should be skipped or excluded.</source>
          <target state="translated">指定された &lt;code&gt;tags&lt;/code&gt; に対して &lt;code&gt;exclude&lt;/code&gt; フィルターと除外フィルターを評価して &lt;code&gt;include&lt;/code&gt; テストをスキップするか除外するかを決定します。</target>
        </trans-unit>
        <trans-unit id="a872b79753ae8c15cc036688d28a6487ac1713c4" translate="yes" xml:space="preserve">
          <source>Evaluates the configuration &lt;code&gt;contents&lt;/code&gt; for the given &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;file&lt;/code&gt; 構成 &lt;code&gt;contents&lt;/code&gt; を評価します。</target>
        </trans-unit>
        <trans-unit id="6d2ad4fd562a8770695759664566e68c79e896d7" translate="yes" xml:space="preserve">
          <source>Evaluates the contents given by &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; で指定された内容を評価します。</target>
        </trans-unit>
        <trans-unit id="3f66e28bdcb030fa5267d28739b480d4ccf00895" translate="yes" xml:space="preserve">
          <source>Evaluates the expression corresponding to the first clause that evaluates to a truthy value.</source>
          <target state="translated">真偽値として評価される最初の節に対応する式を評価します。</target>
        </trans-unit>
        <trans-unit id="1ba5f7241081077b03b80183e469003ca9d8656f" translate="yes" xml:space="preserve">
          <source>Evaluates the given configuration file.</source>
          <target state="translated">与えられた設定ファイルを評価します。</target>
        </trans-unit>
        <trans-unit id="f9da9d74593adcfa13d94962a59c2dd76ee78247" translate="yes" xml:space="preserve">
          <source>Evaluates the given expressions and handles any error, exit, or throw that may have happened.</source>
          <target state="translated">与えられた式を評価し、発生した可能性のあるエラー、終了、またはスローを処理します。</target>
        </trans-unit>
        <trans-unit id="8c971533ea3061f79d23aaa5efa90e539f841e09" translate="yes" xml:space="preserve">
          <source>Evaluates the quoted contents in the given module's context.</source>
          <target state="translated">与えられたモジュールのコンテキストで引用された内容を評価します。</target>
        </trans-unit>
        <trans-unit id="faed542c6d7a022474593aebff34b62313141b57" translate="yes" xml:space="preserve">
          <source>Evaluates the quoted contents.</source>
          <target state="translated">引用した内容を評価します。</target>
        </trans-unit>
        <trans-unit id="211455d468ff468d1666caa77c6ea4a591130f77" translate="yes" xml:space="preserve">
          <source>Evaluating configuration</source>
          <target state="translated">構成の評価</target>
        </trans-unit>
        <trans-unit id="af2f0cacf83a79f7f113163a613ddccc7608558d" translate="yes" xml:space="preserve">
          <source>Even a map is represented as a call to &lt;code&gt;%{}&lt;/code&gt;:</source>
          <target state="translated">マップも &lt;code&gt;%{}&lt;/code&gt; の呼び出しとして表されます。</target>
        </trans-unit>
        <trans-unit id="9379ba740718a45c562052c55dae060f6e11aa7a" translate="yes" xml:space="preserve">
          <source>Even if the timer had expired and the message was sent, this function does not tell you if the timeout message has arrived at its destination yet.</source>
          <target state="translated">タイマーが切れてメッセージが送信された場合でも、タイムアウトメッセージが送信先に到着しているかどうかはわかりません。</target>
        </trans-unit>
        <trans-unit id="27ed9c8d1ab5b1899cff5f812cb51b56f1af0736" translate="yes" xml:space="preserve">
          <source>Even if we have type-specific functions for getting the size built into Elixir (such as &lt;code&gt;tuple_size/1&lt;/code&gt;), we could implement a generic &lt;code&gt;Size&lt;/code&gt; protocol that all data structures for which size is pre-computed would implement.</source>
          <target state="translated">Elixirに組み込まれたサイズを取得するためのタイプ固有の関数（ &lt;code&gt;tuple_size/1&lt;/code&gt; など）がある場合でも、サイズが事前に計算されたすべてのデータ構造が実装する汎用の &lt;code&gt;Size&lt;/code&gt; プロトコルを実装できます。</target>
        </trans-unit>
        <trans-unit id="9d8348e73cb5ab059583fd7f108ed8a332dfe09b" translate="yes" xml:space="preserve">
          <source>Even though Elixir attempts its best to provide a safe environment for macros, the major responsibility of writing clean code with macros falls on developers. Macros are harder to write than ordinary Elixir functions and it&amp;rsquo;s considered to be bad style to use them when they&amp;rsquo;re not necessary. So write macros responsibly.</source>
          <target state="translated">Elixirはマクロに安全な環境を提供するために最善を尽くしますが、マクロを使用してクリーンなコードを作成する主な責任は開発者にあります。マクロは通常のElixir関数よりも書くのが難しく、必要のないときに使用するのは悪いスタイルだと考えられています。責任を持ってマクロを記述してください。</target>
        </trans-unit>
        <trans-unit id="52a8ac08291fe93f3d696a3c45b1d1387494b7dc" translate="yes" xml:space="preserve">
          <source>Even though Elixir attempts its best to provide a safe environment for macros, the major responsibility of writing clean code with macros falls on developers. Macros are harder to write than ordinary Elixir functions and it's considered to be bad style to use them when they're not necessary. So write macros responsibly.</source>
          <target state="translated">Elixirはマクロの安全な環境を提供するために最善を尽くしていますが、マクロを使ってクリーンなコードを書くという大きな責任は開発者にあります。マクロは通常のElixirの関数よりも書くのが難しく、必要のないときにマクロを使うのは悪いスタイルだと考えられています。ですから、マクロは責任を持って書くようにしましょう。</target>
        </trans-unit>
        <trans-unit id="b287135931c568aaa11f51a4123249a43f85f9eb" translate="yes" xml:space="preserve">
          <source>Even though lists preserve the user ordering, the functions in &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; do not guarantee any ordering. For example, if you invoke &lt;code&gt;Keyword.put(opts, new_key, new_value)&lt;/code&gt;, there is no guarantee to where &lt;code&gt;new_key&lt;/code&gt; will be added (to the front, to the end, or anywhere else).</source>
          <target state="translated">リストはユーザーの順序を保持しますが、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;の関数は順序を保証しません。たとえば、呼び出します場合 &lt;code&gt;Keyword.put(opts, new_key, new_value)&lt;/code&gt; 、どこに保証するものではありません &lt;code&gt;new_key&lt;/code&gt; は（最後に、前に、またはどこか他の）追加されますが。</target>
        </trans-unit>
        <trans-unit id="028b9d4259c03a084cc43fe3d1014cc325f783d4" translate="yes" xml:space="preserve">
          <source>Even though the directory is empty and there is no &lt;code&gt;.app&lt;/code&gt; file it is considered the application directory based on the name &quot;foo/ebin&quot;. The name may contain a dash &lt;code&gt;-&lt;/code&gt; which is considered to be the app version and it is removed for the lookup purposes:</source>
          <target state="translated">ディレクトリが空で &lt;code&gt;.app&lt;/code&gt; ファイルがない場合でも、「foo / ebin」という名前に基づいてアプリケーションディレクトリと見なされます。名前にはダッシュを含めることができます &lt;code&gt;-&lt;/code&gt; ダッシュはアプリのバージョンと見なされ、検索の目的で削除されます：</target>
        </trans-unit>
        <trans-unit id="c198b47773d307f8ee645f6d155cb12a7d81efef" translate="yes" xml:space="preserve">
          <source>Even though the head of the list is not &lt;code&gt;nil&lt;/code&gt;, the first clause for &lt;code&gt;not_nil_head?/1&lt;/code&gt; fails because the expression does not evaluate to &lt;code&gt;true&lt;/code&gt;, but to &lt;code&gt;&quot;some_value&quot;&lt;/code&gt;, therefore triggering the second clause which returns &lt;code&gt;false&lt;/code&gt;. To make the guard behave correctly, you must ensure that the guard evaluates to &lt;code&gt;true&lt;/code&gt;, like so:</source>
          <target state="translated">リストの先頭が &lt;code&gt;nil&lt;/code&gt; ではない場合でも、 &lt;code&gt;not_nil_head?/1&lt;/code&gt; の最初の句は、式が &lt;code&gt;true&lt;/code&gt; ではなく &lt;code&gt;&quot;some_value&quot;&lt;/code&gt; に評価されるため失敗し、 &lt;code&gt;false&lt;/code&gt; を返す2番目の句がトリガーされます。ガードを正しく動作させるには、次のように、ガードが &lt;code&gt;true&lt;/code&gt; と評価されることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="0521395297ab7a58030d272e2c72be5c8cdef7df" translate="yes" xml:space="preserve">
          <source>Even though the match works, &lt;code&gt;assert&lt;/code&gt; still expects a truth value. In such cases, simply use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#==/2&quot;&gt;&lt;code&gt;Kernel.==/2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#match?/2&quot;&gt;&lt;code&gt;Kernel.match?/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一致は機能しますが、 &lt;code&gt;assert&lt;/code&gt; は真理値を期待しています。このような場合は、単に&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#==/2&quot;&gt; &lt;code&gt;Kernel.==/2&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#match?/2&quot;&gt; &lt;code&gt;Kernel.match?/2&lt;/code&gt; を使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e115b0b23e56d703ace76f71257a63ef9824a34f" translate="yes" xml:space="preserve">
          <source>Even though the representation changed, the raw data does remain a list of numbers, which can be handled as such:</source>
          <target state="translated">表現が変わっても、生データは数字のリストのままなので、そのように扱うことができます。</target>
        </trans-unit>
        <trans-unit id="84e3c9de2ccf9da0f358458d3784bc3f849f3c2c" translate="yes" xml:space="preserve">
          <source>Even though we haven't specified &lt;code&gt;--debug&lt;/code&gt; in the list of switches, it is part of the returned options. This would also work:</source>
          <target state="translated">スイッチのリストで &lt;code&gt;--debug&lt;/code&gt; を指定していませんが、返されるオプションの一部です。これも機能します：</target>
        </trans-unit>
        <trans-unit id="7cb4e4b7449c91102c58fcbb978127750613197b" translate="yes" xml:space="preserve">
          <source>Even with such guarantees, the developer plays a big role when writing macros responsibly. If you are confident you need to resort to macros, remember that macros are not your API. Keep your macro definitions short, including their quoted contents. For example, instead of writing a macro like this:</source>
          <target state="translated">このような保証があっても、責任を持ってマクロを書くときには開発者が大きな役割を果たします。マクロを使用する必要があると確信している場合は、マクロはあなたのAPIではないことを覚えておいてください。マクロの定義は、引用された内容を含めて短くしてください。例えば、次のようなマクロを書くのではなく、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f153167a1bbb1f584f7f422c6cb126c95946d20e" translate="yes" xml:space="preserve">
          <source>Every describe block receives a name which is used as prefix for upcoming tests. Inside a block, &lt;a href=&quot;exunit.callbacks#setup/1&quot;&gt;&lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt;&lt;/a&gt; may be invoked and it will define a setup callback to run only for the current block. The describe name is also added as a tag, allowing developers to run tests for specific blocks.</source>
          <target state="translated">すべての記述ブロックは、今後のテストの接頭辞として使用される名前を受け取ります。ブロック内で、&lt;a href=&quot;exunit.callbacks#setup/1&quot;&gt; &lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt; &lt;/a&gt;が呼び出され、現在のブロックに対してのみ実行されるセットアップコールバックを定義します。記述名もタグとして追加されるため、開発者は特定のブロックのテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="a46c9a7fca545c132d8df109dd8dcaca95a3c354" translate="yes" xml:space="preserve">
          <source>Every describe block receives a name which is used as prefix for upcoming tests. Inside a block, &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#setup/1&quot;&gt;&lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt;&lt;/a&gt; may be invoked and it will define a setup callback to run only for the current block. The describe name is also added as a tag, allowing developers to run tests for specific blocks.</source>
          <target state="translated">すべてのdescribeブロックは、今後のテストのプレフィックスとして使用される名前を受け取ります。ブロック内では、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#setup/1&quot;&gt; &lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt; &lt;/a&gt;が呼び出され、現在のブロックに対してのみ実行されるセットアップコールバックが定義されます。説明名もタグとして追加され、開発者が特定のブロックのテストを実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="6ef3d6f408824f6647a6e0d3de1a30549693b5c2" translate="yes" xml:space="preserve">
          <source>Every function clause dispatches the appropriate command to the &lt;code&gt;KV.Registry&lt;/code&gt; server that we registered during the &lt;code&gt;:kv&lt;/code&gt; application startup. Since our &lt;code&gt;:kv_server&lt;/code&gt; depends on the &lt;code&gt;:kv&lt;/code&gt; application, it is completely fine to depend on the services it provides.</source>
          <target state="translated">すべてのfunction句は、 &lt;code&gt;:kv&lt;/code&gt; アプリケーションの起動時に登録した &lt;code&gt;KV.Registry&lt;/code&gt; サーバーに適切なコマンドをディスパッチします。当社以来 &lt;code&gt;:kv_server&lt;/code&gt; によって異なります &lt;code&gt;:kv&lt;/code&gt; アプリケーション、提供するサービスに依存するように完全に罰金です。</target>
        </trans-unit>
        <trans-unit id="40baf8ceb490ed83843fc93e589192534f9511aa" translate="yes" xml:space="preserve">
          <source>Every new test starts on a new line, with an &lt;code&gt;iex&amp;gt;&lt;/code&gt; prefix. Multiline expressions can be used by prefixing subsequent lines with either &lt;code&gt;...&amp;gt;&lt;/code&gt; (recommended) or &lt;code&gt;iex&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">すべての新しいテストは、 &lt;code&gt;iex&amp;gt;&lt;/code&gt; プレフィックスが付いた新しい行から始まります。複数行の式は、後続の行の前に &lt;code&gt;...&amp;gt;&lt;/code&gt; （推奨）または &lt;code&gt;iex&amp;gt;&lt;/code&gt; のいずれかを付けることで使用できます。</target>
        </trans-unit>
        <trans-unit id="76e353e9635feb9762b1896c7c1b95987d4b25d4" translate="yes" xml:space="preserve">
          <source>Every project has a &lt;code&gt;mix.exs&lt;/code&gt; file, with instructions on how to build, compile, run tests, and so on. Libraries commonly have a &lt;code&gt;lib&lt;/code&gt; directory, which includes Elixir source code, and a &lt;code&gt;test&lt;/code&gt; directory. A &lt;code&gt;src&lt;/code&gt; directory may also exist for Erlang sources.</source>
          <target state="translated">すべてのプロジェクトには、テストのビルド、コンパイル、実行などの手順が記載された &lt;code&gt;mix.exs&lt;/code&gt; ファイルがあります。ライブラリには通常、Elixirソースコードを含む &lt;code&gt;lib&lt;/code&gt; ディレクトリと &lt;code&gt;test&lt;/code&gt; ディレクトリがあります。 &lt;code&gt;src&lt;/code&gt; ディレクトリには、Erlangのソースのために存在してもよいです。</target>
        </trans-unit>
        <trans-unit id="02a22b2e5fd456a7ae0a76d486db20f724d54096" translate="yes" xml:space="preserve">
          <source>Every release contains an environment file, named &lt;code&gt;env.sh&lt;/code&gt; on Unix-like systems and &lt;code&gt;env.bat&lt;/code&gt; on Windows machines, that executes before the Elixir system starts. In this file, you can execute any OS-level code, such as invoke other applications, set environment variables and so on. Some of those environment variables can even configure how the release itself runs.</source>
          <target state="translated">すべてのリリースには、名前の環境ファイルが含ま &lt;code&gt;env.sh&lt;/code&gt; Unixライクなシステムとの &lt;code&gt;env.bat&lt;/code&gt; ファイルエリクサーシステムが起動する前に、Windowsマシン上で、それが実行します。このファイルでは、他のアプリケーションの呼び出し、環境変数の設定など、OSレベルのコードを実行できます。これらの環境変数の一部は、リリース自体の実行方法を構成することもできます。</target>
        </trans-unit>
        <trans-unit id="b3ec0c5ca215e236f63402da7cfee38e03a48ba1" translate="yes" xml:space="preserve">
          <source>Every time a file is opened, Elixir spawns a new process. Writing to a file is equivalent to sending messages to the process that writes to the file descriptor.</source>
          <target state="translated">ファイルを開くたびに、Elixirは新しいプロセスを生成します。ファイルへの書き込みは、ファイル記述子に書き込むプロセスにメッセージを送信することと同じです。</target>
        </trans-unit>
        <trans-unit id="d10c5b0b93979a90184cbb51fe0a0e036d577833" translate="yes" xml:space="preserve">
          <source>Every time an attribute is read inside a function, a snapshot of its current value is taken. In other words, the value is read at compilation time and not at runtime. As we are going to see, this also makes attributes useful as storage during module compilation.</source>
          <target state="translated">属性が関数内で読み込まれるたびに、現在の値のスナップショットが取得されます。言い換えれば、値はコンパイル時に読み込まれ、実行時には読み込まれません。これから見るように、これはモジュールのコンパイル時のストレージとしても役立ちます。</target>
        </trans-unit>
        <trans-unit id="8195a151075d5ab9fbd9a600b260682c39388d0f" translate="yes" xml:space="preserve">
          <source>Every time an attribute is read inside a function, a snapshot of its current value is taken. In other words, the value is read at compilation time and not at runtime. As we are going to see, this also makes attributes useful to be used as storage during module compilation.</source>
          <target state="translated">属性が関数内で読み込まれるたびに、現在の値のスナップショットが取得されます。言い換えれば、値はコンパイル時に読み込まれ、実行時には読み込まれません。これから見るように、これはモジュールのコンパイル時にストレージとして使用するのにも便利です。</target>
        </trans-unit>
        <trans-unit id="78b99dda1ab8cad5aa5dc088e4709cd8ffa9a689" translate="yes" xml:space="preserve">
          <source>Every time we need to look up a bucket, we need to send a message to the registry. In case our registry is being accessed concurrently by multiple processes, the registry may become a bottleneck!</source>
          <target state="translated">バケットを検索するたびに、レジストリにメッセージを送信する必要があります。レジストリが複数のプロセスから同時にアクセスされている場合、レジストリがボトルネックになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="62cee6babe5c5a8fa4e03c567fac109731766e5f" translate="yes" xml:space="preserve">
          <source>Every time you add a new child to a supervisor, it is important to evaluate if the supervisor strategy is correct as well as the order of child processes. In this case, we are using &lt;code&gt;:one_for_one&lt;/code&gt; and the &lt;code&gt;KV.Registry&lt;/code&gt; is started before &lt;code&gt;KV.BucketSupervisor&lt;/code&gt;.</source>
          <target state="translated">スーパーバイザに新しい子を追加するたびに、スーパーバイザの戦略と子プロセスの順序が正しいかどうかを評価することが重要です。この場合、 &lt;code&gt;:one_for_one&lt;/code&gt; を使用しており、 &lt;code&gt;KV.Registry&lt;/code&gt; 前に &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; が開始されています。</target>
        </trans-unit>
        <trans-unit id="b446cdb18e309af06e8229f9b0fda9244ac6da3e" translate="yes" xml:space="preserve">
          <source>Every time you concatenate binaries or use interpolation (&lt;code&gt;#{}&lt;/code&gt;) you are making copies of those binaries. However, in many cases you don't need the complete binary while you create it, but only at the end to print it out or send it somewhere. In such cases, you can construct the binary by creating IO data:</source>
          <target state="translated">バイナリを連結したり、補間（ &lt;code&gt;#{}&lt;/code&gt; ）を使用するたびに、それらのバイナリのコピーを作成します。ただし、多くの場合、作成時に完全なバイナリは必要ありませんが、最後に印刷またはどこかに送信する必要があります。このような場合は、IOデータを作成してバイナリを構築できます。</target>
        </trans-unit>
        <trans-unit id="ed798ff113b14474967cd268a8bbd91a2314f668" translate="yes" xml:space="preserve">
          <source>Every time you do a &lt;a href=&quot;#call/3&quot;&gt;&lt;code&gt;GenServer.call/3&lt;/code&gt;&lt;/a&gt;, the client will send a message that must be handled by the &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; callback in the GenServer. A &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt; message must be handled by &lt;a href=&quot;#c:handle_cast/2&quot;&gt;&lt;code&gt;handle_cast/2&lt;/code&gt;&lt;/a&gt;. There are 7 possible callbacks to be implemented when you use a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;. The only required callback is &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#call/3&quot;&gt; &lt;code&gt;GenServer.call/3&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt;を実行するたびに、クライアントは、GenServerのhandle_call / 3コールバックによって処理する必要があるメッセージを送信します。&lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt;のメッセージを処理する必要があり&lt;a href=&quot;#c:handle_cast/2&quot;&gt; &lt;code&gt;handle_cast/2&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;を使用するときに実装される可能性のあるコールバックは7つあります。必要なコールバックは&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;のみです。</target>
        </trans-unit>
        <trans-unit id="962675beca29d3a850376db901731b3eb3593d3c" translate="yes" xml:space="preserve">
          <source>Every time you do a &lt;a href=&quot;genserver#call/3&quot;&gt;&lt;code&gt;GenServer.call/3&lt;/code&gt;&lt;/a&gt;, the client will send a message that must be handled by the &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; callback in the GenServer. A &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt; message must be handled by &lt;a href=&quot;#c:handle_cast/2&quot;&gt;&lt;code&gt;handle_cast/2&lt;/code&gt;&lt;/a&gt;. There are 7 possible callbacks to be implemented when you use a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;. The only required callback is &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;genserver#call/3&quot;&gt; &lt;code&gt;GenServer.call/3&lt;/code&gt; &lt;/a&gt;を実行するたびに、クライアントはGenServerの&lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt;コールバックで処理する必要があるメッセージを送信します。&lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt;のメッセージを処理する必要があり&lt;a href=&quot;#c:handle_cast/2&quot;&gt; &lt;code&gt;handle_cast/2&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;を使用する場合、実装できるコールバックは7つあります。唯一必要なコールバックは&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3205df423b3d81a662d949f234ea958bc947b117" translate="yes" xml:space="preserve">
          <source>Every value in the map is a string, and these are:</source>
          <target state="translated">マップ内のすべての値は文字列であり、これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bd021f13376bc32f27e40804859460a61c19bc80" translate="yes" xml:space="preserve">
          <source>Everything that is inside the function we passed to the agent happens in the agent process. In this case, since the agent process is the one receiving and responding to our messages, we say the agent process is the server. Everything outside the function is happening in the client.</source>
          <target state="translated">エージェントに渡した関数の中にあるすべてのことは、エージェント・プロセスの中で起こります。この場合、私たちのメッセージを受信して応答するのはエージェント・プロセスなので、エージェント・プロセスがサーバであると言えます。関数の外にあるものはすべてクライアントの中で発生します。</target>
        </trans-unit>
        <trans-unit id="1cf46969c22298bcd54d98e6e2c526dc85b4471b" translate="yes" xml:space="preserve">
          <source>Everything we have done so far could have been implemented with an &lt;code&gt;Agent&lt;/code&gt;. In this section, we will see one of many things that we can achieve with a GenServer that is not possible with an Agent.</source>
          <target state="translated">これまでに行ったことはすべて、 &lt;code&gt;Agent&lt;/code&gt; て実装することができました。このセクションでは、エージェントでは不可能な、GenServerで実現できる多くのことの1つを見ていきます。</target>
        </trans-unit>
        <trans-unit id="76820f41cc3743792e89eb2f8f24b62c9538f00b" translate="yes" xml:space="preserve">
          <source>ExUnit</source>
          <target state="translated">ExUnit</target>
        </trans-unit>
        <trans-unit id="5c93a2b236252a89748bc06f469e33d5dc2f6a4b" translate="yes" xml:space="preserve">
          <source>ExUnit automatically creates a temporary directory for tests tagged with &lt;code&gt;:tmp_dir&lt;/code&gt; and puts the path to that directory into the test context. The directory is removed before being created to ensure we start with a blank slate.</source>
          <target state="translated">ExUnitは、 &lt;code&gt;:tmp_dir&lt;/code&gt; でタグ付けされたテスト用の一時ディレクトリを自動的に作成し、そのディレクトリへのパスをテストコンテキストに配置します。白紙の状態から始めるために、ディレクトリは作成される前に削除されます。</target>
        </trans-unit>
        <trans-unit id="b0bdc79e9fc2af1de5a45467b3f1630138afbfe1" translate="yes" xml:space="preserve">
          <source>ExUnit can optionally suppress printing of log messages that are generated during a test. Log messages generated while running a test are captured and only if the test fails are they printed to aid with debugging.</source>
          <target state="translated">ExUnit は、テスト中に生成されたログメッセージを印刷しないようにすることもできます。テスト実行中に生成されたログメッセージをキャプチャし、テストに失敗したときにのみ印刷してデバッグの助けにします。</target>
        </trans-unit>
        <trans-unit id="c48c9be568f6b4c0f2e197839d3d8f36c2515f00" translate="yes" xml:space="preserve">
          <source>ExUnit provides tags and filtering functionality that allow developers to select which tests to run. The most common functionality is to exclude some particular tests from running by default in your test helper file:</source>
          <target state="translated">ExUnit にはタグやフィルタリング機能があり、 開発者が実行するテストを選択できるようになっています。最も一般的な機能は、テストヘルパーファイルで特定のテストをデフォルトで実行しないようにすることです。</target>
        </trans-unit>
        <trans-unit id="745dfe2a60f037338c2fefadc9162188f364f731" translate="yes" xml:space="preserve">
          <source>ExUnit supports the following options:</source>
          <target state="translated">ExUnit は以下のオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="2a6345907bef5ae0698454dc9d06ee0ed677f2c2" translate="yes" xml:space="preserve">
          <source>ExUnit.AssertionError</source>
          <target state="translated">ExUnit.AssertionError</target>
        </trans-unit>
        <trans-unit id="7bca0a1e09b5a1e6a12113e9ce6109c131e65f8d" translate="yes" xml:space="preserve">
          <source>ExUnit.AssertionError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.AssertionError&lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f25c6298726d908d1e5e794bcc788478aa5fad10" translate="yes" xml:space="preserve">
          <source>ExUnit.Assertions</source>
          <target state="translated">ExUnit.Assertions</target>
        </trans-unit>
        <trans-unit id="57cef9f68db32989085431b21b29a52b82750643" translate="yes" xml:space="preserve">
          <source>ExUnit.Callbacks</source>
          <target state="translated">ExUnit.Callbacks</target>
        </trans-unit>
        <trans-unit id="b3d66fa6516f4ac426d6095179546b33f36c0614" translate="yes" xml:space="preserve">
          <source>ExUnit.CaptureIO</source>
          <target state="translated">ExUnit.CaptureIO</target>
        </trans-unit>
        <trans-unit id="2ad208584040b9fe065269a5120b26089443ba8f" translate="yes" xml:space="preserve">
          <source>ExUnit.CaptureLog</source>
          <target state="translated">ExUnit.CaptureLog</target>
        </trans-unit>
        <trans-unit id="b2783ae3bb7e24c853deac54a917d583149053c2" translate="yes" xml:space="preserve">
          <source>ExUnit.Case</source>
          <target state="translated">ExUnit.Case</target>
        </trans-unit>
        <trans-unit id="987b4f38599b32760dd676508e3a70f39b41abee" translate="yes" xml:space="preserve">
          <source>ExUnit.CaseTemplate</source>
          <target state="translated">ExUnit.CaseTemplate</target>
        </trans-unit>
        <trans-unit id="53d1f918a06cc534372a86260796a2d4c309360f" translate="yes" xml:space="preserve">
          <source>ExUnit.DocTest</source>
          <target state="translated">ExUnit.DocTest</target>
        </trans-unit>
        <trans-unit id="d9999b4f8af1e866e1f0ea61762d5c1cc8ad2341" translate="yes" xml:space="preserve">
          <source>ExUnit.DocTest.Error</source>
          <target state="translated">ExUnit.DocTest.Error</target>
        </trans-unit>
        <trans-unit id="67f2a3042727823ccf7dbd9817c09cbbb8efa9a4" translate="yes" xml:space="preserve">
          <source>ExUnit.DocTest.Error &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.DocTest.Error&lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="704ab5cbebf8d2029c97c7f45718c1bb4afd3696" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateDescribeError</source>
          <target state="translated">ExUnit.DuplicateDescribeError</target>
        </trans-unit>
        <trans-unit id="aa1d2c3323c831aec609875e9f0efa265c871e03" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateDescribeError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.DuplicateDescribeError&lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1405ead3862a5cfca420a49f538bc241594f997e" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateTestError</source>
          <target state="translated">ExUnit.DuplicateTestError</target>
        </trans-unit>
        <trans-unit id="2a268d99fb56998619707be3b9214a541f86d7ab" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateTestError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.DuplicateTestError&lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d7bd9d677f0a9c6dc45310d081af8fcc4ca6e2ec" translate="yes" xml:space="preserve">
          <source>ExUnit.Filters</source>
          <target state="translated">ExUnit.Filters</target>
        </trans-unit>
        <trans-unit id="f8206f0d81a07fa8af2ac0840c2bae2ed2f08165" translate="yes" xml:space="preserve">
          <source>ExUnit.Formatter</source>
          <target state="translated">ExUnit.Formatter</target>
        </trans-unit>
        <trans-unit id="229fc09a3b8e6efa5ac9d2ca8a11a9f502333ec1" translate="yes" xml:space="preserve">
          <source>ExUnit.MultiError</source>
          <target state="translated">ExUnit.MultiError</target>
        </trans-unit>
        <trans-unit id="735227bd3ecbb542e7953b335de901a172e5d02e" translate="yes" xml:space="preserve">
          <source>ExUnit.MultiError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.MultiError&lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c5c72bd93dc7e3f0a7d2fffbd54cf9bb0f675038" translate="yes" xml:space="preserve">
          <source>ExUnit.Test</source>
          <target state="translated">ExUnit.Test</target>
        </trans-unit>
        <trans-unit id="97bb13a74b9a963a04a1d616ace7b7ad0af2e626" translate="yes" xml:space="preserve">
          <source>ExUnit.TestModule</source>
          <target state="translated">ExUnit.TestModule</target>
        </trans-unit>
        <trans-unit id="f755d37b9e89df3ed4f26779dc2f46df095cbb0b" translate="yes" xml:space="preserve">
          <source>ExUnit.TimeoutError</source>
          <target state="translated">ExUnit.TimeoutError</target>
        </trans-unit>
        <trans-unit id="0eb19ea70731acc4546a8736af6c56cc94e70fc3" translate="yes" xml:space="preserve">
          <source>ExUnit.TimeoutError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.TimeoutError&lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="2e4ccc244461fd2a12825ef96a60da2329e2ce3c" translate="yes" xml:space="preserve">
          <source>Example output:</source>
          <target state="translated">出力例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="d26b3d4470724ac05d7c9da540813fd9a38a03b8" translate="yes" xml:space="preserve">
          <source>Example: aggregating coverage reports from all umbrella children</source>
          <target state="translated">例:すべての傘の子供からのカバレッジレポートの集計</target>
        </trans-unit>
        <trans-unit id="c74c91815529047b04fef7063d238333584897a5" translate="yes" xml:space="preserve">
          <source>Example: aggregating partitioned runs</source>
          <target state="translated">例:パーティショニングされたランの集約</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="25122b962e79de0ee8a27ce3b5647bd4c01ca409" translate="yes" xml:space="preserve">
          <source>Examples (in ISO)</source>
          <target state="translated">例(ISOでの例</target>
        </trans-unit>
        <trans-unit id="0d3f1fb4ead37a9ebada8ba4792a85c60fc239e8" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#is_even/1&quot;&gt;&lt;code&gt;Integer.is_even/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_list/1&quot;&gt;&lt;code&gt;Kernel.is_list/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#is_even/1&quot;&gt; &lt;code&gt;Integer.is_even/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_list/1&quot;&gt; &lt;code&gt;Kernel.is_list/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36164a25cdcc73cd1cf8d728f5b2f50878a4ec40" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt;&lt;code&gt;Kernel.length/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt; &lt;code&gt;Kernel.length/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c5fda773f78bb26a8e1303d5c85d69d871488af" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#map_size/1&quot;&gt;&lt;code&gt;Kernel.map_size/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt;&lt;code&gt;Kernel.tuple_size/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#map_size/1&quot;&gt; &lt;code&gt;Kernel.map_size/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt; &lt;code&gt;Kernel.tuple_size/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad9928fd1db4bd5dbdaaf41bf03f0e344ec8d2e7" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html#keyword?/1&quot;&gt;&lt;code&gt;Keyword.keyword?/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt;&lt;code&gt;Mix.debug?/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#contains?/2&quot;&gt;&lt;code&gt;String.contains?/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html#keyword?/1&quot;&gt; &lt;code&gt;Keyword.keyword?/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt; &lt;code&gt;Mix.debug?/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#contains?/2&quot;&gt; &lt;code&gt;String.contains?/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b67cde3e2893f45e1d2342cc89a6c494050168c1" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;integer#is_even/1&quot;&gt;&lt;code&gt;Integer.is_even/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#is_list/1&quot;&gt;&lt;code&gt;Kernel.is_list/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;integer#is_even/1&quot;&gt; &lt;code&gt;Integer.is_even/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#is_list/1&quot;&gt; &lt;code&gt;Kernel.is_list/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fba0066e54914f2c201f52bafe91a91ee882db71" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;kernel#length/1&quot;&gt;&lt;code&gt;Kernel.length/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;string#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;kernel#length/1&quot;&gt; &lt;code&gt;Kernel.length/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;string#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59e48be0f15bfe533102ec4eff7ccf70153ea050" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;kernel#map_size/1&quot;&gt;&lt;code&gt;Kernel.map_size/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#tuple_size/1&quot;&gt;&lt;code&gt;Kernel.tuple_size/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;kernel#map_size/1&quot;&gt; &lt;code&gt;Kernel.map_size/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#tuple_size/1&quot;&gt; &lt;code&gt;Kernel.tuple_size/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8894d30453776d313609dc175c436a396fe228a1" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;keyword#keyword?/1&quot;&gt;&lt;code&gt;Keyword.keyword?/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt;&lt;code&gt;Mix.debug?/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;string#contains?/2&quot;&gt;&lt;code&gt;String.contains?/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">例：&lt;a href=&quot;keyword#keyword?/1&quot;&gt; &lt;code&gt;Keyword.keyword?/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt; &lt;code&gt;Mix.debug?/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;string#contains?/2&quot;&gt; &lt;code&gt;String.contains?/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="80519cae3a2fe4f658e3d881595a3f1c8312fcf3" translate="yes" xml:space="preserve">
          <source>Excellent!</source>
          <target state="translated">Excellent!</target>
        </trans-unit>
        <trans-unit id="60ec7b5f4ed1c9f91fe92c8f85e12cb5b5d0e653" translate="yes" xml:space="preserve">
          <source>Excellent! A release was assembled in &lt;code&gt;_build/prod/rel/foo&lt;/code&gt;. Inside the release, there will be a &lt;code&gt;bin/foo&lt;/code&gt; file which is the entry point to your system. It supports multiple commands, such as:</source>
          <target state="translated">優れた！リリースは &lt;code&gt;_build/prod/rel/foo&lt;/code&gt; にアセンブルされました。リリース内には、システムへのエントリポイントである &lt;code&gt;bin/foo&lt;/code&gt; ファイルがあります。次のような複数のコマンドをサポートしています。</target>
        </trans-unit>
        <trans-unit id="20049bc069b0a04404c23d571b5e0b56f0660c02" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="translated">Exception</target>
        </trans-unit>
        <trans-unit id="44e97cbdae038c2c5424f2954134819fe68f1b89" translate="yes" xml:space="preserve">
          <source>Exception &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">例外&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="3d517d7c8883cc469bb6f0690fb53e26f6870d0a" translate="yes" xml:space="preserve">
          <source>Exceptions are structs backed by a module that implements the &lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour. The &lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour requires two functions to be implemented:</source>
          <target state="translated">例外は、&lt;a href=&quot;exception&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt;振る舞いを実装するモジュールによってサポートされる構造体です。&lt;a href=&quot;exception&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt;振る舞いを実装するために2つの機能が必要です。</target>
        </trans-unit>
        <trans-unit id="8e51b2994e896de8ce300f36d4a22aa73a3be30a" translate="yes" xml:space="preserve">
          <source>Exceptions are structs backed by a module that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour. The &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour requires two functions to be implemented:</source>
          <target state="translated">例外は、&lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt;動作を実装するモジュールによってサポートされる構造体です。&lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt;振る舞いを実装するために2つの機能が必要です。</target>
        </trans-unit>
        <trans-unit id="f5f7c811b0be5635dd0fe494c23bb6038a54a491" translate="yes" xml:space="preserve">
          <source>Exceptions in the &lt;code&gt;else&lt;/code&gt; block are not caught. If no pattern inside the &lt;code&gt;else&lt;/code&gt; block matches, an exception will be raised; this exception is not caught by the current &lt;code&gt;try/catch/rescue/after&lt;/code&gt; block.</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; ブロックの例外はキャッチされません。 &lt;code&gt;else&lt;/code&gt; ブロック内のパターンが一致しない場合、例外が発生します。この例外は、現在の &lt;code&gt;try/catch/rescue/after&lt;/code&gt; ブロックではキャッチされません。</target>
        </trans-unit>
        <trans-unit id="ea74b62ed292a57db053839d4dd2cfb1e0f29152" translate="yes" xml:space="preserve">
          <source>Excluded (via :exclude filters)</source>
          <target state="translated">除外された(:exclude フィルタを介して)</target>
        </trans-unit>
        <trans-unit id="3341b34959d98dd397fee5b24380ce422a7f718a" translate="yes" xml:space="preserve">
          <source>Executes the given &lt;code&gt;command&lt;/code&gt; as a shell command and invokes the &lt;code&gt;callback&lt;/code&gt; for the streamed response.</source>
          <target state="translated">指定された &lt;code&gt;command&lt;/code&gt; をシェルコマンドとして実行し、ストリーミングされた応答の &lt;code&gt;callback&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="70a317365d7713ea507b0cb5d939c290a69f7da8" translate="yes" xml:space="preserve">
          <source>Executes the given &lt;code&gt;command&lt;/code&gt; with &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; で指定された &lt;code&gt;command&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="8de8bb94364b91423f5a970361d0ca351b0ec3d4" translate="yes" xml:space="preserve">
          <source>Executes the given command and forwards its messages to the current process.</source>
          <target state="translated">与えられたコマンドを実行し、そのメッセージを現在のプロセスに転送します。</target>
        </trans-unit>
        <trans-unit id="c1372af04a9efd8163a10572859082b925f8dafa" translate="yes" xml:space="preserve">
          <source>Executes the given command and prints its output to stdout as it comes.</source>
          <target state="translated">与えられたコマンドを実行し、その出力を標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="a75d5012d51d09974229d69b19fd7d7622bdc109" translate="yes" xml:space="preserve">
          <source>Executes the given command and returns its exit status.</source>
          <target state="translated">与えられたコマンドを実行し、その終了ステータスを返します。</target>
        </trans-unit>
        <trans-unit id="7c07c6d426de3d265c77a3c160b7a3bafe862b2c" translate="yes" xml:space="preserve">
          <source>Executes the given command quietly without outputting anything.</source>
          <target state="translated">与えられたコマンドを何も出力せずに静かに実行します。</target>
        </trans-unit>
        <trans-unit id="4004d7a200a9edc8cf038043abae23d5809c733f" translate="yes" xml:space="preserve">
          <source>Executes the given command.</source>
          <target state="translated">与えられたコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="55f164b4c64455051e302faf23d4842520137933" translate="yes" xml:space="preserve">
          <source>Executes the given function for each element.</source>
          <target state="translated">各要素に対して与えられた関数を実行します。</target>
        </trans-unit>
        <trans-unit id="b5ce416e76da997843fde479e97ac42967b3d692" translate="yes" xml:space="preserve">
          <source>Executes the tasks separated by comma.</source>
          <target state="translated">カンマで区切られたタスクを実行します。</target>
        </trans-unit>
        <trans-unit id="7ac90140fbd596d3f7878d936c650ac9466a6ee5" translate="yes" xml:space="preserve">
          <source>Exit reasons and restarts</source>
          <target state="translated">終了理由と再起動</target>
        </trans-unit>
        <trans-unit id="53b33039635fa494645e1b43b50ac67531129d6a" translate="yes" xml:space="preserve">
          <source>Exiting the shell</source>
          <target state="translated">シェルの終了</target>
        </trans-unit>
        <trans-unit id="f45e71feb97fe698bfbbe5199dddf26ea61ae573" translate="yes" xml:space="preserve">
          <source>Exiting with any other reason is considered abnormal and treated as a crash. This means the default supervisor behaviour kicks in, error reports are emitted, and so forth.</source>
          <target state="translated">他の理由で終了すると異常とみなされ、クラッシュとして扱われます。これは、デフォルトのスーパバイザの動作が開始されたり、エラーレポートが出力されたりすることを意味します。</target>
        </trans-unit>
        <trans-unit id="31a12820b55617ff15b68585a3da10bfbeb53dca" translate="yes" xml:space="preserve">
          <source>Exiting with any other reason is considered abnormal and treated as a crash. This means the default supervisor behaviour kicks in, error reports are emitted, etc.</source>
          <target state="translated">他の理由で終了すると異常とみなされ、クラッシュとして扱われます。これは、デフォルトのスーパバイザの動作が開始され、エラーレポートが出力されることを意味します。</target>
        </trans-unit>
        <trans-unit id="d71626cd31b069ac3980d7ed6a6abb80f71225a3" translate="yes" xml:space="preserve">
          <source>Exits</source>
          <target state="translated">Exits</target>
        </trans-unit>
        <trans-unit id="7977d0a8642620960ce842afec7459a90da93ce6" translate="yes" xml:space="preserve">
          <source>Exits are used by the OTP to determine if a process exited abnormally or not. The following exits are considered &quot;normal&quot;:</source>
          <target state="translated">終了は、プロセスが異常終了したかどうかを判断するために OTP が使用します。以下の出口は「正常」とみなされます。</target>
        </trans-unit>
        <trans-unit id="d2a34bd07d0e86299a6bc287e4921ca1aef50681" translate="yes" xml:space="preserve">
          <source>Expands the path relative to the path given as the second argument expanding any &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; characters.</source>
          <target state="translated">2番目の引数として指定されたパスを基準にしてパスを展開します &lt;code&gt;.&lt;/code&gt; および &lt;code&gt;..&lt;/code&gt; 文字。</target>
        </trans-unit>
        <trans-unit id="56faca74d01072fe618cfc8860e3704b0f548536" translate="yes" xml:space="preserve">
          <source>Expands the struct given by &lt;code&gt;module&lt;/code&gt; in the given &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;env&lt;/code&gt; 内の &lt;code&gt;module&lt;/code&gt; によって指定された構造体を展開します。</target>
        </trans-unit>
        <trans-unit id="a58d845ac21beded647c9679bfd179b6ae8af84c" translate="yes" xml:space="preserve">
          <source>Expands to something akin to:</source>
          <target state="translated">似たようなものに拡張します。</target>
        </trans-unit>
        <trans-unit id="4ae47f3ad3318c24412abe41c786c7c08970f0f5" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;date&lt;/code&gt; if each entry fits its appropriate range, raises if the date is invalid.</source>
          <target state="translated">すべての値が整数であることが期待されます。各エントリが適切な範囲に収まる場合は &lt;code&gt;date&lt;/code&gt; 返し、日付が無効な場合は上げます。</target>
        </trans-unit>
        <trans-unit id="13b37db6b572edb898a47a3bd0fb0e8a7a11988b" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;naive_datetime&lt;/code&gt; if each entry fits its appropriate range, raises if time or date is invalid.</source>
          <target state="translated">すべての値が整数であることが期待されます。各エントリが適切な範囲に収まる場合は &lt;code&gt;naive_datetime&lt;/code&gt; を返し、時刻または日付が無効な場合は発生します。</target>
        </trans-unit>
        <trans-unit id="bcd459526f4b99811c8fbb63304ea87ace873e34" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;time&lt;/code&gt; if each entry fits its appropriate range, raises if the time is invalid.</source>
          <target state="translated">すべての値が整数であることが期待されます。各エントリが適切な範囲に収まる場合は &lt;code&gt;time&lt;/code&gt; 返し、時間が無効な場合は時間を上げます。</target>
        </trans-unit>
        <trans-unit id="91a8dae3c7e0a7461d109ccac314fd3b05583329" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;{:ok, date}&lt;/code&gt; if each entry fits its appropriate range, returns &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">すべての値が整数であることを期待します。戻り値 &lt;code&gt;{:ok, date}&lt;/code&gt; 各エントリは、その適切な範囲に収まる場合、戻り &lt;code&gt;{:error, reason}&lt;/code&gt; さもなければ。</target>
        </trans-unit>
        <trans-unit id="36147c4004a324e8f3e4b2ea0f84715a379f133f" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;{:ok, naive_datetime}&lt;/code&gt; if each entry fits its appropriate range, returns &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">すべての値が整数であることを期待します。戻り値 &lt;code&gt;{:ok, naive_datetime}&lt;/code&gt; 各エントリは、その適切な範囲に収まる場合、戻り &lt;code&gt;{:error, reason}&lt;/code&gt; さもなければ。</target>
        </trans-unit>
        <trans-unit id="b1f148de03b18e5985298d31921d5f1111620987" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;{:ok, time}&lt;/code&gt; if each entry fits its appropriate range, returns &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">すべての値が整数であることを期待します。戻り値 &lt;code&gt;{:ok, time}&lt;/code&gt; の各エントリは、その適切な範囲に収まる場合、戻り &lt;code&gt;{:error, reason}&lt;/code&gt; さもなければ。</target>
        </trans-unit>
        <trans-unit id="1387b27163a391ef8f7a170807b6e12dfd7c742a" translate="yes" xml:space="preserve">
          <source>Expects the same command line options as &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt;&lt;code&gt;mix compile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">mixcompileと同じコマンドラインオプションが&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt; &lt;code&gt;mix compile&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6d58782f27892aec9906a2b37b517051b421e83e" translate="yes" xml:space="preserve">
          <source>Expects the same command line options as &lt;a href=&quot;mix.tasks.compile&quot;&gt;&lt;code&gt;mix compile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;mix.tasks.compile&quot;&gt; &lt;code&gt;mix compile&lt;/code&gt; &lt;/a&gt;と同じコマンドラインオプションが必要です。</target>
        </trans-unit>
        <trans-unit id="8185e179a98e4c14d7d2dc6601e54859946ed332" translate="yes" xml:space="preserve">
          <source>Explicit derivations can now be called via &lt;code&gt;__deriving__&lt;/code&gt;:</source>
          <target state="translated">明示的な派生は、 &lt;code&gt;__deriving__&lt;/code&gt; を介して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1af430d5daa7566a82be8754e90eab91a53418f6" translate="yes" xml:space="preserve">
          <source>Explicitly convert to string with &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; (v1.0)</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;（v1.0）を使用して明示的に文字列に変換する</target>
        </trans-unit>
        <trans-unit id="a311e0f546569e17c6cb9a033783cc3c973c3f50" translate="yes" xml:space="preserve">
          <source>Exploring</source>
          <target state="translated">Exploring</target>
        </trans-unit>
        <trans-unit id="17144cbaf80b5556f57bcc08120468f882fb7da0" translate="yes" xml:space="preserve">
          <source>Exports dependencies are compile time dependencies on the module API, namely structs and its public definitions. For example, if you import a module but only use its functions, it is an export dependency. If you use a struct, it is an export dependency too. Export dependencies are only recompiled if the module API changes. Note, however, that compile time dependencies have higher precedence than exports. Therefore if you import a module and use its macros, it is a compile time dependency.</source>
          <target state="translated">エクスポート依存関係は、モジュール API、すなわち struct とその公開定義に対するコンパイル時の依存関係です。例えば、モジュールをインポートしてその関数だけを使用する場合、それはエクスポート依存関係になります。構造体を使用する場合も、エクスポート依存関係になります。エクスポート依存関係が再コンパイルされるのは、モジュールの API が変更された場合のみです。ただし、コンパイル時の依存関係はエクスポートよりも優先度が高いことに注意してください。したがって、モジュールをインポートしてそのマクロを使用する場合は、コンパイル時依存関係になります。</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="bd636ca0127e991954457d5520bc826a5790bde1" translate="yes" xml:space="preserve">
          <source>Expressions in IEx</source>
          <target state="translated">IExでの式</target>
        </trans-unit>
        <trans-unit id="ee1891c8d113531de2d0f468e0034dd1a97f49a7" translate="yes" xml:space="preserve">
          <source>Expressions on multiple lines are also supported:</source>
          <target state="translated">複数行の表現にも対応しています。</target>
        </trans-unit>
        <trans-unit id="96e930ee8659a5428bf86a0d55155d9541ab8120" translate="yes" xml:space="preserve">
          <source>Extension point for precompiling dependencies.</source>
          <target state="translated">依存関係をプリコンパイルするための拡張ポイント。</target>
        </trans-unit>
        <trans-unit id="8fdb5d77c0ea69e962db331c0331d4ccd1f6e481" translate="yes" xml:space="preserve">
          <source>External dependencies</source>
          <target state="translated">外部依存関係</target>
        </trans-unit>
        <trans-unit id="ecfbef1298f91628d1f080163cdf6946c9def817" translate="yes" xml:space="preserve">
          <source>External dependencies are the ones not tied to your business domain. For example, if you need an HTTP API for your distributed KV application, you can use the &lt;a href=&quot;https://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt; project as an external dependency.</source>
          <target state="translated">外部依存関係は、ビジネスドメインに関連付けられていない依存関係です。たとえば、分散KVアプリケーションにHTTP APIが必要な場合、&lt;a href=&quot;https://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt;プロジェクトを外部依存関係として使用できます。</target>
        </trans-unit>
        <trans-unit id="c150e0ee17017b4793bcf0b0cc69d4046c404195" translate="yes" xml:space="preserve">
          <source>Extract test cases from the documentation.</source>
          <target state="translated">ドキュメントからテストケースを抽出します。</target>
        </trans-unit>
        <trans-unit id="95e8ae6e88b22e27a03f7d64d058e8d835494561" translate="yes" xml:space="preserve">
          <source>Extracts all protocols from the given paths.</source>
          <target state="translated">与えられたパスからすべてのプロトコルを抽出します。</target>
        </trans-unit>
        <trans-unit id="6672f515f4795b7a00946cd73a72fe3b0d731698" translate="yes" xml:space="preserve">
          <source>Extracts all records information from an Erlang file.</source>
          <target state="translated">Erlangファイルからすべてのレコード情報を抽出します。</target>
        </trans-unit>
        <trans-unit id="0aa4ae6318b818f36730be7bf017b931ef4ea73b" translate="yes" xml:space="preserve">
          <source>Extracts all types implemented for the given protocol from the given paths.</source>
          <target state="translated">与えられたパスから、与えられたプロトコルに実装されているすべての型を抽出します。</target>
        </trans-unit>
        <trans-unit id="fe0c75ba33dd78a4066417d5f149fc1b26fb8202" translate="yes" xml:space="preserve">
          <source>Extracts record information from an Erlang file.</source>
          <target state="translated">Erlangファイルからレコード情報を抽出します。</target>
        </trans-unit>
        <trans-unit id="574d59827e0eb28bc33410c7d28d8d1801cae6ee" translate="yes" xml:space="preserve">
          <source>Extracts the part of the binary starting at &lt;code&gt;start&lt;/code&gt; with length &lt;code&gt;length&lt;/code&gt;. Binaries are zero-indexed.</source>
          <target state="translated">でバイナリ出発の一部を抽出 &lt;code&gt;start&lt;/code&gt; の長さと &lt;code&gt;length&lt;/code&gt; 。バイナリはインデックスがゼロです。</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="09fef5d8d9a3c86b2523fef60d512606e7fe0003" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>
        </trans-unit>
        <trans-unit id="96fff357d65451f89027b22467cd65b418ae720a" translate="yes" xml:space="preserve">
          <source>Failing guards</source>
          <target state="translated">失敗したガード</target>
        </trans-unit>
        <trans-unit id="1652d7e1326512444d5398f784563f91db27adf9" translate="yes" xml:space="preserve">
          <source>Failing to specify the size for the non-last causes compilation to fail:</source>
          <target state="translated">ラスト以外のサイズを指定しないとコンパイルに失敗します。</target>
        </trans-unit>
        <trans-unit id="a8f785f9330c1e75e28a2a7140d3aec99d182b95" translate="yes" xml:space="preserve">
          <source>Fails with &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the name is not registered to any PID or port.</source>
          <target state="translated">名前がどのPIDまたはポートにも登録されていない場合、&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; で&lt;/a&gt;失敗します。</target>
        </trans-unit>
        <trans-unit id="0ccdf9c4d16331f9f9a7885177207e85c8dc38a3" translate="yes" xml:space="preserve">
          <source>Fails with &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the name is not registered to any PID or port.</source>
          <target state="translated">名前がどのPIDまたはポートにも登録されていない場合、&lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; で&lt;/a&gt;失敗します。</target>
        </trans-unit>
        <trans-unit id="a6d0b09e283994372eb19fd9e9acdd66b7d8a5ff" translate="yes" xml:space="preserve">
          <source>Fails with a message.</source>
          <target state="translated">メッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="d98c0b711b96d90c648aa1ba79214b16cf3c847f" translate="yes" xml:space="preserve">
          <source>Faint (decreased intensity). Not widely supported.</source>
          <target state="translated">淡い(強度低下)。広くサポートされていない。</target>
        </trans-unit>
        <trans-unit id="80eafe8c844b802892eae9dec9a932d3aae704a2" translate="yes" xml:space="preserve">
          <source>Fallback to &lt;code&gt;Any&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Any&lt;/code&gt; へのフォールバック</target>
        </trans-unit>
        <trans-unit id="e83224357f427a57043b90f12511c5e7c2761fe6" translate="yes" xml:space="preserve">
          <source>Falsy values (of which there are exactly two):</source>
          <target state="translated">虚偽の値(そのうち正確には2つ)。</target>
        </trans-unit>
        <trans-unit id="84961cf65129825950c4fb505dbebfa0af3c33d5" translate="yes" xml:space="preserve">
          <source>Feel free to go ahead and do the changes above and write some unit tests. The idea is that your tests will start an instance of the &lt;code&gt;KV.Registry&lt;/code&gt; and pass it as an argument to &lt;code&gt;run/2&lt;/code&gt; instead of relying on the global &lt;code&gt;KV.Registry&lt;/code&gt;. This has the advantage of keeping our tests asynchronous as there is no shared state.</source>
          <target state="translated">自由に先に進んで、上記の変更を行い、いくつかの単体テストを書いてください。アイデアは、テストが &lt;code&gt;KV.Registry&lt;/code&gt; のインスタンスを開始し、グローバル &lt;code&gt;KV.Registry&lt;/code&gt; に依存する代わりに、引数として &lt;code&gt;run/2&lt;/code&gt; に渡すというものです。これには、共有状態がないため、テストを非同期に保つという利点があります。</target>
        </trans-unit>
        <trans-unit id="4e9eab4f18f16e5a9faaa07931254d91146148ac" translate="yes" xml:space="preserve">
          <source>Fetches a copy of &lt;code&gt;rebar&lt;/code&gt; or &lt;code&gt;rebar3&lt;/code&gt; from the given path or URL.</source>
          <target state="translated">コピーを取得 &lt;code&gt;rebar&lt;/code&gt; や &lt;code&gt;rebar3&lt;/code&gt; を与えられたパスまたはURLから。</target>
        </trans-unit>
        <trans-unit id="6ce2d20bef71f0063b999c8745340e3f56b5a4aa" translate="yes" xml:space="preserve">
          <source>Fetches the test supervisor for the current test.</source>
          <target state="translated">現在のテストのテストスーパーバイザーを取得します。</target>
        </trans-unit>
        <trans-unit id="c0e97bf839fe5fe85207b4a9d492c885c7fec652" translate="yes" xml:space="preserve">
          <source>Fetches the value for a specific &lt;code&gt;key&lt;/code&gt; and returns it in a tuple.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; 値をフェッチし、タプルで返します。</target>
        </trans-unit>
        <trans-unit id="e51d5ee9800fb6a00e8f93feaec0009d2b77b447" translate="yes" xml:space="preserve">
          <source>Fetches the value for a specific &lt;code&gt;key&lt;/code&gt; in the given &lt;code&gt;map&lt;/code&gt;, erroring out if &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;map&lt;/code&gt; 内の特定の &lt;code&gt;key&lt;/code&gt; 値をフェッチし &lt;code&gt;key&lt;/code&gt; 。 &lt;code&gt;map&lt;/code&gt; キーが含まれていない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="a43e0afb7d744e48d3c341e4b08f1f780c55b575" translate="yes" xml:space="preserve">
          <source>Fetches the value for a specific &lt;code&gt;key&lt;/code&gt; in the given &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;map&lt;/code&gt; 特定の &lt;code&gt;key&lt;/code&gt; 値を取得します。</target>
        </trans-unit>
        <trans-unit id="e32be0757ce9c975d2425bacc76ae29c90d94cf3" translate="yes" xml:space="preserve">
          <source>Fetches the value for specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; の値を取得します。</target>
        </trans-unit>
        <trans-unit id="f5f8f513b41db299570bc23df8a5cd56d7a7348b" translate="yes" xml:space="preserve">
          <source>Fetches the value for the given key in a container (a map, keyword list, or struct that implements the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; behaviour).</source>
          <target state="translated">コンテナ（マップ、キーワードリスト、または&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; の&lt;/a&gt;動作を実装する構造体）内の指定されたキーの値をフェッチします。</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="31798ce3f2f936a238f0a2c5ab7cdb503c7ea839" translate="yes" xml:space="preserve">
          <source>File permissions are specified by adding together the following octal modes:</source>
          <target state="translated">ファイルのパーミッションは、以下の八進数モードを足し合わせて指定します。</target>
        </trans-unit>
        <trans-unit id="e9762f0351951cf7ed47c0893d9de2c36796a05d" translate="yes" xml:space="preserve">
          <source>File.CopyError</source>
          <target state="translated">File.CopyError</target>
        </trans-unit>
        <trans-unit id="7b57f930765dd268a9cde88eaefc8e395b0beb29" translate="yes" xml:space="preserve">
          <source>File.CopyError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.CopyError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="27e1fc83e1258e80dfd4127d0a4ce93324162992" translate="yes" xml:space="preserve">
          <source>File.Error</source>
          <target state="translated">File.Error</target>
        </trans-unit>
        <trans-unit id="8354290eb6b6ea2cbcbaa3bd4c48c21f5649591a" translate="yes" xml:space="preserve">
          <source>File.Error &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.Error &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5561cc6859be7830bb0219495771f2109757df2e" translate="yes" xml:space="preserve">
          <source>File.LinkError</source>
          <target state="translated">File.LinkError</target>
        </trans-unit>
        <trans-unit id="ff963e9e333fceee8593af446c12736218860d8a" translate="yes" xml:space="preserve">
          <source>File.LinkError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.LinkError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34595af71c483f8de72a2abf0c30fcef3475a04a" translate="yes" xml:space="preserve">
          <source>File.RenameError</source>
          <target state="translated">File.RenameError</target>
        </trans-unit>
        <trans-unit id="918afebd70d1938336f0bcc22b61603501a5ef93" translate="yes" xml:space="preserve">
          <source>File.RenameError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.RenameError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="26a6590f983813e802ea4c694400ea32fe379883" translate="yes" xml:space="preserve">
          <source>File.Stat</source>
          <target state="translated">File.Stat</target>
        </trans-unit>
        <trans-unit id="665c1dadb9609c9481c5f8ebc57dca4f06031e23" translate="yes" xml:space="preserve">
          <source>File.Stream</source>
          <target state="translated">File.Stream</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="e4b01a2510691aed09a9f3e1dbbc4fcd455e3aee" translate="yes" xml:space="preserve">
          <source>Filters can also be given:</source>
          <target state="translated">また、フィルターを付けることもできます。</target>
        </trans-unit>
        <trans-unit id="2503811e18a88c94424e3c46d73925ff58ba8899" translate="yes" xml:space="preserve">
          <source>Filters can either be a regular expression or any data structure that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/String.Chars.html&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol, which is invoked before comparing the filter with the &lt;code&gt;:tag&lt;/code&gt; value.</source>
          <target state="translated">フィルタは、正規表現、またはフィルタを &lt;code&gt;:tag&lt;/code&gt; 値と比較する前に呼び出される&lt;a href=&quot;https://hexdocs.pm/elixir/String.Chars.html&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルを実装する任意のデータ構造のいずれかです。</target>
        </trans-unit>
        <trans-unit id="8e53af0e96b0cc30e1acdc06f0e1e173375388aa" translate="yes" xml:space="preserve">
          <source>Filters the &lt;code&gt;enumerable&lt;/code&gt;, i.e. returns only those elements for which &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">フィルタ &lt;code&gt;enumerable&lt;/code&gt; 、すなわち返します対象の要素のみ &lt;code&gt;fun&lt;/code&gt; truthy値を返します。</target>
        </trans-unit>
        <trans-unit id="38e91ba97986e6ce700c58bdd7ad300d67734ab8" translate="yes" xml:space="preserve">
          <source>Final note</source>
          <target state="translated">最後の注意事項</target>
        </trans-unit>
        <trans-unit id="35edd1c925c63232dc7f42b120954fad87230406" translate="yes" xml:space="preserve">
          <source>Finally note all protocols are compiled with &lt;code&gt;debug_info&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, regardless of the option set by &lt;code&gt;elixirc&lt;/code&gt; compiler. The debug info is used for consolidation and it may be removed after consolidation.</source>
          <target state="translated">最後に、 &lt;code&gt;elixirc&lt;/code&gt; コンパイラーによって設定されたオプションに関係なく、すべてのプロトコルが &lt;code&gt;debug_info&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定してコンパイルされることに注意してください。デバッグ情報は統合に使用され、統合後に削除される場合があります。</target>
        </trans-unit>
        <trans-unit id="04fdf1c25fdd5f8a57c6967c66cfb3a7de5f847e" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;setup_all&lt;/code&gt; callbacks run in a separate process per module, while all &lt;code&gt;setup&lt;/code&gt; callbacks run in the same process as the test itself. &lt;a href=&quot;#on_exit/2&quot;&gt;&lt;code&gt;on_exit/2&lt;/code&gt;&lt;/a&gt; callbacks always run in a separate process, as implied by their name. The test process always exits with reason &lt;code&gt;:shutdown&lt;/code&gt;, which means any process linked to the test process will also exit, although asynchronously. Therefore it is preferred to use &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt; to guarantee synchronous termination.</source>
          <target state="translated">最後に、 &lt;code&gt;setup_all&lt;/code&gt; コールバックはモジュールごとに別のプロセスで実行されますが、すべての &lt;code&gt;setup&lt;/code&gt; コールバックはテスト自体と同じプロセスで実行されます。&lt;a href=&quot;#on_exit/2&quot;&gt; &lt;code&gt;on_exit/2&lt;/code&gt; &lt;/a&gt;コールバックは、その名前が示すとおり、常に別のプロセスで実行されます。テストプロセスは常に理由 &lt;code&gt;:shutdown&lt;/code&gt; で終了します。つまり、テストプロセスにリンクされているプロセスも非同期ですが終了します。したがって、同期終了を保証するには、&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4a48b23e11b49db2f57e13074e7a2452579f61b9" translate="yes" xml:space="preserve">
          <source>Finally, Elixir has a construct called aliases which we will explore later. Aliases start in upper case and are also atoms:</source>
          <target state="translated">最後に、Elixirにはエイリアスと呼ばれる構成要素があります。エイリアスは大文字で始まり、アトムでもあります。</target>
        </trans-unit>
        <trans-unit id="f1f7036035e55443b9fb00eab5b0f156761b7796" translate="yes" xml:space="preserve">
          <source>Finally, Elixir provides tools such as escripts and archives, which are different mechanisms for packaging your application. Those are typically used when tools must be shared between developers and not as deployment options. See &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html&quot;&gt;&lt;code&gt;mix help archive.build&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html&quot;&gt;&lt;code&gt;mix help escript.build&lt;/code&gt;&lt;/a&gt; for more detail.</source>
          <target state="translated">最後に、Elixirはescriptやアーカイブなどのツールを提供します。これらは、アプリケーションをパッケージ化するためのさまざまなメカニズムです。これらは通常、ツールを開発者間で共有する必要がある場合に使用され、展開オプションとしては使用されません。詳細については、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html&quot;&gt; &lt;code&gt;mix help archive.build&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html&quot;&gt; &lt;code&gt;mix help escript.build&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="51f5f67bdc287fa28acb4c9223c262389c58e3ea" translate="yes" xml:space="preserve">
          <source>Finally, aliases can also be used to augment existing tasks. Let's suppose you want to augment &lt;a href=&quot;mix.tasks.clean&quot;&gt;&lt;code&gt;mix clean&lt;/code&gt;&lt;/a&gt; to clean another directory Mix does not know about:</source>
          <target state="translated">最後に、エイリアスを使用して既存のタスクを強化することもできます。あなたが&lt;a href=&quot;mix.tasks.clean&quot;&gt; &lt;code&gt;mix clean&lt;/code&gt; &lt;/a&gt;を拡張して別のディレクトリをクリーンアップしたいとしましょう。</target>
        </trans-unit>
        <trans-unit id="191e1198a5b11d86c8e069a1379cf393ac7fbbc2" translate="yes" xml:space="preserve">
          <source>Finally, anonymous functions are also closures and as such they can access variables that are in scope when the function is defined. Let&amp;rsquo;s define a new anonymous function that uses the &lt;code&gt;add&lt;/code&gt; anonymous function we have previously defined:</source>
          <target state="translated">最後に、無名関数もクロージャであり、関数の定義時にスコープ内の変数にアクセスできます。以前に定義した無名関数の &lt;code&gt;add&lt;/code&gt; を使用する新しい無名関数を定義してみましょう。</target>
        </trans-unit>
        <trans-unit id="1877a861abfea57d3175dd4ec2545e64bd06b283" translate="yes" xml:space="preserve">
          <source>Finally, as discussed in the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; documentation, remember that the initial context metadata can also be set via &lt;code&gt;@tag&lt;/code&gt;s, which can then be accessed in the &lt;code&gt;setup&lt;/code&gt; block:</source>
          <target state="translated">最後に、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; の&lt;/a&gt;ドキュメントで説明されているように、初期コンテキストメタデータは &lt;code&gt;@tag&lt;/code&gt; を介して設定することもでき、 &lt;code&gt;setup&lt;/code&gt; ブロックでアクセスできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4f8f9ee80a4128eebbd8b8d0785f0bf4b51354e3" translate="yes" xml:space="preserve">
          <source>Finally, attributes can also be read inside functions:</source>
          <target state="translated">最後に、属性は関数の内部で読み込むこともできます。</target>
        </trans-unit>
        <trans-unit id="668fb656f73feadaab2b70bd66310c5a6a4ae07c" translate="yes" xml:space="preserve">
          <source>Finally, beware of redundant code comments, such as the ones describing the exact same that the code does:</source>
          <target state="translated">最後に、コードと全く同じことを記述しているような冗長なコードコメントに注意してください。</target>
        </trans-unit>
        <trans-unit id="7b06c2901c51b502cac134085935b1c4ea9f9da4" translate="yes" xml:space="preserve">
          <source>Finally, check &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; for other supported operations.</source>
          <target state="translated">最後に、他のサポートされている操作について&lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt;を確認します。</target>
        </trans-unit>
        <trans-unit id="1083a91a64ef83410037ffb35fd49e9fb40c270f" translate="yes" xml:space="preserve">
          <source>Finally, check &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; for other supported operations.</source>
          <target state="translated">最後に、&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt;でその他のサポートされている操作を確認します。</target>
        </trans-unit>
        <trans-unit id="f726a5d73225d60359e8c4f7a62c08247c5e3152" translate="yes" xml:space="preserve">
          <source>Finally, copy the &lt;code&gt;kv&lt;/code&gt; application we have built so far to the &lt;code&gt;apps&lt;/code&gt; directory in our new umbrella project. The final directory structure should match the structure we mentioned earlier:</source>
          <target state="translated">最後に、これまでに作成した &lt;code&gt;kv&lt;/code&gt; アプリケーションを、新しいアンブレラプロジェクトの &lt;code&gt;apps&lt;/code&gt; ディレクトリにコピーします。最終的なディレクトリ構造は、前述の構造と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="fab90ae3564b828d174f4a1339c23b2f23ef10c1" translate="yes" xml:space="preserve">
          <source>Finally, developers should also avoid defining functions inside the &lt;code&gt;__using__/1&lt;/code&gt; callback, unless those functions are the default implementation of a previously defined &lt;code&gt;@callback&lt;/code&gt; or are functions meant to be overridden (see &lt;a href=&quot;#defoverridable/1&quot;&gt;&lt;code&gt;defoverridable/1&lt;/code&gt;&lt;/a&gt;). Even in these cases, defining functions should be seen as a &quot;last resort&quot;.</source>
          <target state="translated">最後に、これらの関数が以前に定義された &lt;code&gt;@callback&lt;/code&gt; のデフォルト実装であるか、オーバーライドされることを意図した関数（&lt;a href=&quot;#defoverridable/1&quot;&gt; &lt;code&gt;defoverridable/1&lt;/code&gt; を&lt;/a&gt;参照）でない限り、開発者は &lt;code&gt;__using__/1&lt;/code&gt; コールバック内の関数の定義も避ける必要があります。これらの場合でも、関数の定義は「最後の手段」と見なされます。</target>
        </trans-unit>
        <trans-unit id="0a5904f73dbbcd0930c32f8ef2421f6ebf86cef4" translate="yes" xml:space="preserve">
          <source>Finally, different from the other callbacks, we have defined a &amp;ldquo;catch-all&amp;rdquo; clause for &lt;code&gt;handle_info/2&lt;/code&gt; that discards any unknown message. To understand why, let&amp;rsquo;s move on to the next section.</source>
          <target state="translated">最後に、他のコールバックとは異なり、不明なメッセージを破棄する「catch-all」句を &lt;code&gt;handle_info/2&lt;/code&gt; に定義しました。理由を理解するために、次のセクションに進みましょう。</target>
        </trans-unit>
        <trans-unit id="2dca70c0e3d6a9acaabab7bc96177fe2d9c44844" translate="yes" xml:space="preserve">
          <source>Finally, do not use this function on IO devices in Unicode mode as it will return the wrong result.</source>
          <target state="translated">最後に、間違った結果を返すので、ユニコードモードのIOデバイスではこの関数を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="5d1ed29b60633fb5430adba7b8757ea6539225e2" translate="yes" xml:space="preserve">
          <source>Finally, if you don't want to raise on empty enumerables, you can pass the empty fallback:</source>
          <target state="translated">最後に、空のenumerablesでレイズしたくない場合は、空のフォールバックを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8e8ca83f100555992c56e00e0551b89ee834e2cb" translate="yes" xml:space="preserve">
          <source>Finally, in order for runtime configuration to work properly (as well as any other &quot;Config provider&quot; as defined next), it needs to be able to persist the newly computed configuration to disk. The computed config file will be written to &quot;tmp&quot; directory inside the release every time the system boots. You can configure the &quot;tmp&quot; directory by setting the &lt;code&gt;RELEASE_TMP&lt;/code&gt; environment variable, either explicitly or inside your &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; (or &lt;code&gt;env.bat&lt;/code&gt; on Windows).</source>
          <target state="translated">最後に、ランタイム構成が正しく機能するためには（および次に定義する他の「構成プロバイダー」）、新しく計算された構成をディスクに永続化できる必要があります。計算された設定ファイルは、システムが起動するたびにリリース内の「tmp」ディレクトリに書き込まれます。 「tmp」ディレクトリを構成するには、 &lt;code&gt;RELEASE_TMP&lt;/code&gt; 環境変数を明示的に設定するか、 &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; （またはWindowsの場合は &lt;code&gt;env.bat&lt;/code&gt; ）内に設定します。</target>
        </trans-unit>
        <trans-unit id="b0a0fcc78d43cdb2d5efe08a2aa140520d91d3bf" translate="yes" xml:space="preserve">
          <source>Finally, it also documents two special forms, &lt;a href=&quot;#__block__/1&quot;&gt;&lt;code&gt;__block__/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#__aliases__/1&quot;&gt;&lt;code&gt;__aliases__/1&lt;/code&gt;&lt;/a&gt;, which are not intended to be called directly by the developer but they appear in quoted contents since they are essential in Elixir's constructs.</source>
          <target state="translated">最後に、2つの特別な形式&lt;a href=&quot;#__block__/1&quot;&gt; &lt;code&gt;__block__/1&lt;/code&gt; &lt;/a&gt;と__aliases __ / 1も&lt;a href=&quot;#__aliases__/1&quot;&gt; &lt;code&gt;__aliases__/1&lt;/code&gt; &lt;/a&gt;されています。これらは開発者が直接呼び出すことを意図していませんが、Elixirの構成に不可欠であるため、引用されたコンテンツに表示されます。</target>
        </trans-unit>
        <trans-unit id="f74f8991d0d3c9a479fe59d35b99b4abf4e6cf52" translate="yes" xml:space="preserve">
          <source>Finally, it's advised to profile your program with the &lt;code&gt;prod&lt;/code&gt; environment, since this should provide more realistic insights into bottlenecks.</source>
          <target state="translated">最後に、 &lt;code&gt;prod&lt;/code&gt; 環境でプログラムをプロファイルすることをお勧めします。これにより、ボトルネックに対するより現実的な洞察が得られるはずです。</target>
        </trans-unit>
        <trans-unit id="e7d511ddfbac4fd8a034329e957061520ac4e991" translate="yes" xml:space="preserve">
          <source>Finally, keep in mind it is not required for you to assemble the release from the umbrella root. You can also assemble the release from each child application individually. Doing it from the root, however, allows you to include two applications that do not depend on each other as part of the same release.</source>
          <target state="translated">最後に、アンブレラルートからリリースをアセンブルする必要はないことを覚えておいてください。各子アプリケーションから個別にリリースをアセンブルすることもできます。しかし、ルートから行うことで、お互いに依存しない2つのアプリケーションを同じリリースの一部として含めることができます。</target>
        </trans-unit>
        <trans-unit id="04258f441df3a0685acf7dc84f54350179d26c35" translate="yes" xml:space="preserve">
          <source>Finally, keep in mind that applications in an umbrella project all share the same configurations and dependencies. If two applications in your umbrella need to configure the same dependency in drastically different ways or even use different versions, you have probably outgrown the benefits brought by umbrellas. Remember you can break the umbrella and still leverage the benefits behind &amp;ldquo;mono-repos&amp;rdquo;.</source>
          <target state="translated">最後に、アンブレラプロジェクトのアプリケーションはすべて同じ構成と依存関係を共有していることに注意してください。アンブレラ内の2つのアプリケーションが、同じ依存関係を大幅に異なる方法で構成する必要がある場合、または異なるバージョンを使用する必要がある場合でも、アンブレラによってもたらされるメリットを上回っています。傘を壊しても、「モノリポジトリ」の背後にある利点を活用できることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="b17d2e9b41800db01905629d7c64202ebf54e9fc" translate="yes" xml:space="preserve">
          <source>Finally, keep in mind that variable assignments inside the comprehension, be it in generators, filters or inside the block, are not reflected outside of the comprehension.</source>
          <target state="translated">最後に、内包物内での変数の代入は、ジェネレータ、フィルタ、ブロック内であれ、内包物の外部には反映されないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="7b0dc026cfea9e2e7b1becee88cabf1eed936967" translate="yes" xml:space="preserve">
          <source>Finally, note &lt;code&gt;cond&lt;/code&gt; considers any value besides &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; to be true:</source>
          <target state="translated">最後に、 &lt;code&gt;cond&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; 以外のすべての値をtrue と見なします。</target>
        </trans-unit>
        <trans-unit id="1e8a25344ef8715d7cecfc3690b780ce1c60f07c" translate="yes" xml:space="preserve">
          <source>Finally, note all protocols are compiled with &lt;code&gt;debug_info&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, regardless of the option set by the &lt;code&gt;elixirc&lt;/code&gt; compiler. The debug info is used for consolidation and it is removed after consolidation unless globally set.</source>
          <target state="translated">最後に、 &lt;code&gt;elixirc&lt;/code&gt; コンパイラによって設定されたオプションに関係なく、すべてのプロトコルが &lt;code&gt;debug_info&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定してコンパイルされることに注意してください。デバッグ情報は統合に使用され、グローバルに設定されていない限り、統合後に削除されます。</target>
        </trans-unit>
        <trans-unit id="7a86bfddfc1fd1f3cd3bcab92a5988d59aa4d019" translate="yes" xml:space="preserve">
          <source>Finally, note it is also possible to simply pass the &lt;code&gt;Stack&lt;/code&gt; module as a child:</source>
          <target state="translated">最後に、単に &lt;code&gt;Stack&lt;/code&gt; モジュールを子として渡すことも可能であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b5e8ec2ca3602b6bc2810511f915ff11214b601b" translate="yes" xml:space="preserve">
          <source>Finally, note map keys in patterns must always be literals or previously bound variables matched with the pin operator.</source>
          <target state="translated">最後に、パターン内のマップキーは常にリテラルか、以前にバインドされた変数を pin 演算子でマッチさせなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ddefd09be238de8fef0e43712279c903c785e333" translate="yes" xml:space="preserve">
          <source>Finally, note strings themselves are valid algebra documents that keep their formatting when pretty printed. This means your &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; implementation may simply return a string, although that will devoid it of any pretty-printing.</source>
          <target state="translated">最後に、音符文字列自体は有効な代数文書であり、きれいに印刷されたときにフォーマットを維持します。これは、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;実装が単純に文字列を返す可能性があることを意味しますが、プリティプリントはありません。</target>
        </trans-unit>
        <trans-unit id="7e168ab8bcfeb48be21d768c678e77ae94e3845d" translate="yes" xml:space="preserve">
          <source>Finally, note that attributes can also be read inside functions:</source>
          <target state="translated">最後に、属性は関数の内部でも読み込むことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="525d826b02e67b29a0d7a1fb2bd96144f8ca9ed8" translate="yes" xml:space="preserve">
          <source>Finally, note the coverage itself is not measured across the projects themselves. For example, if project B depends on A, and if there is code in A that is only executed from project B, those lines will not be marked as covered, which is important, as those projects should be developed and tested in isolation.</source>
          <target state="translated">最後に、カバレッジ自体はプロジェクト全体では測定されないことに注意してください。例えば、プロジェクトBがAに依存していて、AにプロジェクトBからのみ実行されるコードがある場合、それらの行はカバレッジとしてマークされません。</target>
        </trans-unit>
        <trans-unit id="d4f7dd24a40c84b2db68e974eaff07a24dba709d" translate="yes" xml:space="preserve">
          <source>Finally, note the functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module are eager: they will traverse the enumerable as soon as they are invoked. This is particularly dangerous when working with infinite enumerables. In such cases, you should use the &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module, which allows you to lazily express computations, without traversing collections, and work with possibly infinite collections. See the &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module for examples and documentation.</source>
          <target state="translated">最後に、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールの関数は熱心であることに注意してください。呼び出されるとすぐに列挙型をトラバースします。これは、無限の列挙可能オブジェクトを操作する場合に特に危険です。このような場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールを使用する必要があります。これにより、コレクションをトラバースせずに計算を遅延表現し、場合によっては無限のコレクションを処理できます。例とドキュメントについては、&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="60bc3c90be2296af6dc74f8ac6ed31dee639afd7" translate="yes" xml:space="preserve">
          <source>Finally, note the functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module are eager: they will traverse the enumerable as soon as they are invoked. This is particularly dangerous when working with infinite enumerables. In such cases, you should use the &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module, which allows you to lazily express computations, without traversing collections, and work with possibly infinite collections. See the &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module for examples and documentation.</source>
          <target state="translated">最後に、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールの関数は熱心であることに注意してください。これらの関数は、呼び出されるとすぐに列挙可能オブジェクトを走査します。これは、無限の列挙型を扱う場合に特に危険です。このような場合は、&lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールを使用する必要があります。これにより、コレクションを走査せずに計算を遅延して表現し、無限のコレクションを処理できます。例とドキュメントについては、&lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="12f0160206d216529166c8634dc691e626760b5b" translate="yes" xml:space="preserve">
          <source>Finally, notice that attributes can also be read inside functions:</source>
          <target state="translated">最後に、属性は関数の内部でも読み込めることに注目してください。</target>
        </trans-unit>
        <trans-unit id="989e69e0609a31b9b4fe9f32b562a703b9696c7b" translate="yes" xml:space="preserve">
          <source>Finally, remember that strings in Elixir are UTF-8 encoded binaries. This means that, similar to charlists, prefix matches on strings are also possible with the binary concatenation operator (&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C%3E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">最後に、Elixirの文字列はUTF-8でエンコードされたバイナリであることを忘れないでください。これは、charlistと同様に、文字列のプレフィックス一致もバイナリ連結演算子（&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C%3E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;/a&gt;）で可能であることを意味します。</target>
        </trans-unit>
        <trans-unit id="232829bb783ca862d2a7fbdd06c1982a8e6d4a55" translate="yes" xml:space="preserve">
          <source>Finally, remember you can also get a mini-overview of the runtime info by calling &lt;code&gt;runtime_info/0&lt;/code&gt; directly in IEx.</source>
          <target state="translated">最後に、 &lt;code&gt;runtime_info/0&lt;/code&gt; 直接呼び出すことで、ランタイム情報のミニ概要を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="3d4e093b24b7868fdbb88889dcf9d11e7ebbe5c8" translate="yes" xml:space="preserve">
          <source>Finally, the line &lt;code&gt;import_config &quot;#{Mix.env()}.exs&quot;&lt;/code&gt; will import other config files, based on the current Mix environment, such as &lt;code&gt;config/dev.exs&lt;/code&gt; and &lt;code&gt;config/test.exs&lt;/code&gt;.</source>
          <target state="translated">最後に、行 &lt;code&gt;import_config &quot;#{Mix.env()}.exs&quot;&lt;/code&gt; は、 &lt;code&gt;config/dev.exs&lt;/code&gt; や &lt;code&gt;config/test.exs&lt;/code&gt; などの現在のMix環境に基づいて、他の構成ファイルをインポートします。</target>
        </trans-unit>
        <trans-unit id="b6807f6f10cbe61d66aff585c4548460bfb9b94d" translate="yes" xml:space="preserve">
          <source>Finally, the line &lt;code&gt;import_config &quot;#{config_env()}.exs&quot;&lt;/code&gt; will import other config files based on the current configuration environment, such as &lt;code&gt;config/dev.exs&lt;/code&gt; and &lt;code&gt;config/test.exs&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;import_config &quot;#{config_env()}.exs&quot;&lt;/code&gt; 行は、 &lt;code&gt;config/test.exs&lt;/code&gt; &lt;code&gt;config/dev.exs&lt;/code&gt; やconfig / test.exsなど、現在の構成環境に基づいて他の構成ファイルをインポートします。</target>
        </trans-unit>
        <trans-unit id="321ba25e566c212d784496c47ffc76a0ad896628" translate="yes" xml:space="preserve">
          <source>Finally, the stacktrace relates to the failure itself, giving information about the test and often the place the failure was generated from within the source files.</source>
          <target state="translated">最後に、スタックトレースは失敗そのものに関連しており、テストに関する情報や、ソースファイルの中で失敗が発生した場所の情報を提供します。</target>
        </trans-unit>
        <trans-unit id="924ac30e08d7b545eac852afc656f22c82661634" translate="yes" xml:space="preserve">
          <source>Finally, these operators appear in the precedence table above but are only meaningful within certain constructs:</source>
          <target state="translated">最後に、これらの演算子は上記の優先順位表に登場しますが、特定の構成要素の中でのみ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="3f56c580dd08d36a6b47e54333acfe9e1d8d30e4" translate="yes" xml:space="preserve">
          <source>Finally, this module also contains Elixir related functions, a bit tied to Elixir formatting, such as &lt;a href=&quot;#to_doc/2&quot;&gt;&lt;code&gt;to_doc/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最後に、このモジュールにはElixir関連の関数も含まれています。これは、&lt;a href=&quot;#to_doc/2&quot;&gt; &lt;code&gt;to_doc/2&lt;/code&gt; &lt;/a&gt;などのElixirのフォーマットに少し関連しています。</target>
        </trans-unit>
        <trans-unit id="9005decc18b830a894ffeaad85db25d6cd8463cf" translate="yes" xml:space="preserve">
          <source>Finally, to convert a String into a list of integer code points, known as &quot;charlists&quot; in Elixir, you can call &lt;code&gt;String.to_charlist&lt;/code&gt;:</source>
          <target state="translated">最後に、エリクサーで「charlists」として知られる整数コード・ポイントのリストに文字列を変換するために、あなたが呼び出すことができ &lt;code&gt;String.to_charlist&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="29c7d0203ff19b759dff9a8dcf709329c059ef93" translate="yes" xml:space="preserve">
          <source>Finally, you may have observed that each doctest corresponds to a different test in our suite, which now reports a total of 7 doctests. That is because ExUnit considers the following to define two different doctests:</source>
          <target state="translated">最後に、各 doctest がスイート内の異なるテストに対応していることに気づいたかもしれませんが、 これで合計 7 つの doctest が報告されることになります。これは、ExUnit が次のように考えているからです。</target>
        </trans-unit>
        <trans-unit id="82318fe7e7a021f4fa35e9409276a28582c98da1" translate="yes" xml:space="preserve">
          <source>Find more about the pipe operator &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2&quot;&gt;by reading its documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2&quot;&gt;ドキュメントを読んで&lt;/a&gt;、パイプオペレーターの詳細を確認してください。</target>
        </trans-unit>
        <trans-unit id="d473a61a8edc12c54afe46832414dc97879d0388" translate="yes" xml:space="preserve">
          <source>Finds a template path for the release.</source>
          <target state="translated">リリースのテンプレートパスを見つけます。</target>
        </trans-unit>
        <trans-unit id="e44a6c20b46b4eb7ebeba1748cd0e7795b1fd20f" translate="yes" xml:space="preserve">
          <source>Finds the &lt;code&gt;{pid, value}&lt;/code&gt; pair for the given &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt; in no particular order.</source>
          <target state="translated">&lt;code&gt;registry&lt;/code&gt; で指定された &lt;code&gt;key&lt;/code&gt; の &lt;code&gt;{pid, value}&lt;/code&gt; ペアを特定の順序で検索します。</target>
        </trans-unit>
        <trans-unit id="d980122971e9d4fe80a33e7b799338a83929abd3" translate="yes" xml:space="preserve">
          <source>Finds the element at the given &lt;code&gt;index&lt;/code&gt; (zero-based).</source>
          <target state="translated">指定された &lt;code&gt;index&lt;/code&gt; （ゼロベース）で要素を検索します。</target>
        </trans-unit>
        <trans-unit id="fdbbbf2a367be4fcd9eca718811c5a61aea8c66b" translate="yes" xml:space="preserve">
          <source>First of all, since we generated this project inside &lt;code&gt;kv_umbrella/apps&lt;/code&gt;, Mix automatically detected the umbrella structure and added four lines to the project definition:</source>
          <target state="translated">まず、このプロジェクトを &lt;code&gt;kv_umbrella/apps&lt;/code&gt; 内に生成したので、Mixは傘の構造を自動的に検出し、プロジェクト定義に4行を追加しました。</target>
        </trans-unit>
        <trans-unit id="21e0a6d768daca714108b3a36ec6e2151c3c1139" translate="yes" xml:space="preserve">
          <source>First this task guarantees that all dependencies are in place and that the current project has been compiled. Then the current application is started as a temporary application, unless &lt;code&gt;:start_permanent&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in your project configuration or the &lt;code&gt;--permanent&lt;/code&gt; option is given, then it's started as permanent, which guarantees the node will shut down if the application crashes permanently.</source>
          <target state="translated">まず、このタスクは、すべての依存関係が適切に配置され、現在のプロジェクトがコンパイルされていることを保証します。次に、現在のアプリケーションは一時的なアプリケーションとして開始されます。ただし、プロジェクト構成で &lt;code&gt;:start_permanent&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されているか、 &lt;code&gt;--permanent&lt;/code&gt; オプションが指定されていない限り、永続的なものとして開始されます。これにより、アプリケーションが永続的にクラッシュした場合にノードがシャットダウンすることが保証されます。</target>
        </trans-unit>
        <trans-unit id="0b225f4fd1da05fdbc3ee99a9f166606b1d95c47" translate="yes" xml:space="preserve">
          <source>First, if the routing tables are the opposite of each other, such as &lt;code&gt;[{?a..?m, :&quot;foo@computer-name&quot;}, {?n..?z, :&quot;bar@computer-name&quot;}]&lt;/code&gt; in one node and &lt;code&gt;[{?a..?m, :&quot;bar@computer-name&quot;}, {?n..?z, :&quot;foo@computer-name&quot;}]&lt;/code&gt; in the other, you can have a routing request that will run recursively in the cluster infinitely. This can be tackled at the application level by making sure you pass a list of seen nodes when we route, such as &lt;code&gt;KV.Router.route(bucket, mod, fun, args, seen_nodes)&lt;/code&gt;. Then by checking if the node being dispatched to was already visited, we can avoid the cycle. Implementing and testing this functionality will be left as an exercise.</source>
          <target state="translated">最初に、 &lt;code&gt;[{?a..?m, :&quot;foo@computer-name&quot;}, {?n..?z, :&quot;bar@computer-name&quot;}]&lt;/code&gt; ように、ルーティングテーブルが互いに逆である場合}]を1つのノードに、 &lt;code&gt;[{?a..?m, :&quot;bar@computer-name&quot;}, {?n..?z, :&quot;foo@computer-name&quot;}]&lt;/code&gt; を別のノードに置くと、クラスタ内で無限に再帰的に実行されるルーティング要求。これは、 &lt;code&gt;KV.Router.route(bucket, mod, fun, args, seen_nodes)&lt;/code&gt; ように、ルーティング時に見られるノードのリストを確実に渡すことで、アプリケーションレベルで取り組むことができます。次に、ディスパッチされているノードがすでにアクセスされているかどうかを確認することで、このサイクルを回避できます。この機能の実装とテストは演習として残します。</target>
        </trans-unit>
        <trans-unit id="fe6a7fa579eecc0b0104d2aa94bc63bd9d9aa9d6" translate="yes" xml:space="preserve">
          <source>First, the &lt;code&gt;request&lt;/code&gt; is sent to every node in &lt;code&gt;nodes&lt;/code&gt;; then, the caller waits for the replies. This function returns a two-element tuple &lt;code&gt;{replies, bad_nodes}&lt;/code&gt; where:</source>
          <target state="translated">最初に、 &lt;code&gt;request&lt;/code&gt; は、 &lt;code&gt;nodes&lt;/code&gt; 内のすべてのノードに送信されます。次に、呼び出し元は応答を待ちます。この関数は、2要素のタプル &lt;code&gt;{replies, bad_nodes}&lt;/code&gt; 返します。ここで、</target>
        </trans-unit>
        <trans-unit id="60398b803dd263be0dc63a6c96308aea282994d5" translate="yes" xml:space="preserve">
          <source>First, the formatter never changes the semantics of the code by default. This means the input AST and the output AST are equivalent. Optional behaviour, such as &lt;code&gt;:rename_deprecated_at&lt;/code&gt;, is allowed to break this guarantee.</source>
          <target state="translated">まず、フォーマッタは、デフォルトではコードのセマンティクスを変更しません。つまり、入力ASTと出力ASTは同等です。 &lt;code&gt;:rename_deprecated_at&lt;/code&gt; などのオプションの動作は、この保証を破ることができます。</target>
        </trans-unit>
        <trans-unit id="761d6955efc7722bb7c5e17c7ad9ae6eee0e3a82" translate="yes" xml:space="preserve">
          <source>Flattens the given &lt;code&gt;list&lt;/code&gt; of nested lists.</source>
          <target state="translated">ネストされたリストの指定された &lt;code&gt;list&lt;/code&gt; をフラット化します。</target>
        </trans-unit>
        <trans-unit id="384278e07033851614565e0c9f8e0ea314279560" translate="yes" xml:space="preserve">
          <source>Flattens the given &lt;code&gt;list&lt;/code&gt; of nested lists. The list &lt;code&gt;tail&lt;/code&gt; will be added at the end of the flattened list.</source>
          <target state="translated">ネストされたリストの指定された &lt;code&gt;list&lt;/code&gt; をフラット化します。リストの &lt;code&gt;tail&lt;/code&gt; は、フラット化されたリストの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="64435fd82de7b1d614dfb9844848a48b14c6cd2c" translate="yes" xml:space="preserve">
          <source>Float</source>
          <target state="translated">Float</target>
        </trans-unit>
        <trans-unit id="e0ed30f7614c69e32cbce2c9fd0bd8fcaa7586e6" translate="yes" xml:space="preserve">
          <source>Float numbers require a dot followed by at least one digit and also support &lt;code&gt;e&lt;/code&gt; for scientific notation:</source>
          <target state="translated">浮動小数点数には、ドットとそれに続く少なくとも1桁の数字が必要であり、科学表記法の &lt;code&gt;e&lt;/code&gt; もサポートしています。</target>
        </trans-unit>
        <trans-unit id="a4495969af61f575a24ee4711fa76dfaafb26d0e" translate="yes" xml:space="preserve">
          <source>Floats in Elixir are 64-bit double precision.</source>
          <target state="translated">Elixirのフロートは64ビットの倍精度です。</target>
        </trans-unit>
        <trans-unit id="9ee393efb1b19d0c371e21c8a5d6360e13a111b0" translate="yes" xml:space="preserve">
          <source>Flushes all &lt;code&gt;:mix_shell&lt;/code&gt; and &lt;code&gt;:mix_shell_input&lt;/code&gt; messages from the current process.</source>
          <target state="translated">現在のプロセスからの &lt;code&gt;:mix_shell&lt;/code&gt; および &lt;code&gt;:mix_shell_input&lt;/code&gt; メッセージをすべてフラッシュします。</target>
        </trans-unit>
        <trans-unit id="1f37e32316ff57285093c07bcc6fa68a47a4a700" translate="yes" xml:space="preserve">
          <source>Flushes the logger.</source>
          <target state="translated">ロガーをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="d44af71a2582a2b67261bbce0307838133bc552a" translate="yes" xml:space="preserve">
          <source>Flushes the output buffer and returns its current contents.</source>
          <target state="translated">出力バッファをフラッシュし、現在の内容を返します。</target>
        </trans-unit>
        <trans-unit id="1fd9c42d3180adcefdbd370b8adb9856f5a36877" translate="yes" xml:space="preserve">
          <source>Folds (reduces) the given list from the left with a function. Requires an accumulator.</source>
          <target state="translated">与えられたリストを左から関数で折りたたむ(縮小する)。アキュムレータが必要です。</target>
        </trans-unit>
        <trans-unit id="569c663a35f673e18e4fd8649f95dd98dfc6e9c3" translate="yes" xml:space="preserve">
          <source>Folds (reduces) the given list from the right with a function. Requires an accumulator.</source>
          <target state="translated">与えられたリストを右から関数で折りたたむ(縮小する)。アキュムレータが必要です。</target>
        </trans-unit>
        <trans-unit id="2fa0635488dcee65136d608f773cf5f9ef5e7acf" translate="yes" xml:space="preserve">
          <source>Folds a list of documents into a document using the given folder function.</source>
          <target state="translated">与えられたフォルダ機能を使用して、文書のリストを文書に折りたたむ。</target>
        </trans-unit>
        <trans-unit id="708d44cdbbf26cc5087abdc9244c378da50e27f8" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;call/2&lt;/code&gt; requests, we implement a &lt;code&gt;handle_call/3&lt;/code&gt; callback that receives the &lt;code&gt;request&lt;/code&gt;, the process from which we received the request (&lt;code&gt;_from&lt;/code&gt;), and the current server state (&lt;code&gt;names&lt;/code&gt;). The &lt;code&gt;handle_call/3&lt;/code&gt; callback returns a tuple in the format &lt;code&gt;{:reply, reply, new_state}&lt;/code&gt;. The first element of the tuple, &lt;code&gt;:reply&lt;/code&gt;, indicates that the server should send a reply back to the client. The second element, &lt;code&gt;reply&lt;/code&gt;, is what will be sent to the client while the third, &lt;code&gt;new_state&lt;/code&gt; is the new server state.</source>
          <target state="translated">ための &lt;code&gt;call/2&lt;/code&gt; 要求、我々は、実施 &lt;code&gt;handle_call/3&lt;/code&gt; 受信コールバック &lt;code&gt;request&lt;/code&gt; 、我々は要求（受信し、そこからプロセス &lt;code&gt;_from&lt;/code&gt; ）、および現在のサーバの状態（ &lt;code&gt;names&lt;/code&gt; ）。 &lt;code&gt;handle_call/3&lt;/code&gt; コールバック形式のタプルを返す &lt;code&gt;{:reply, reply, new_state}&lt;/code&gt; 。タプルの最初の要素である &lt;code&gt;:reply&lt;/code&gt; は、サーバーがクライアントに応答を返す必要があることを示します。2番目の要素の &lt;code&gt;reply&lt;/code&gt; はクライアントに送信されるもので、3 番目の要素 &lt;code&gt;new_state&lt;/code&gt; は新しいサーバーの状態です。</target>
        </trans-unit>
        <trans-unit id="85fe9a9b5eab6f7837fd7ce17f20db0e36c96d5e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;cast/2&lt;/code&gt; requests, we implement a &lt;code&gt;handle_cast/2&lt;/code&gt; callback that receives the &lt;code&gt;request&lt;/code&gt; and the current server state (&lt;code&gt;names&lt;/code&gt;). The &lt;code&gt;handle_cast/2&lt;/code&gt; callback returns a tuple in the format &lt;code&gt;{:noreply, new_state}&lt;/code&gt;. Note that in a real application we would have probably implemented the callback for &lt;code&gt;:create&lt;/code&gt; with a synchronous call instead of an asynchronous cast. We are doing it this way to illustrate how to implement a cast callback.</source>
          <target state="translated">以下のため &lt;code&gt;cast/2&lt;/code&gt; 要求、我々は実装 &lt;code&gt;handle_cast/2&lt;/code&gt; を受信するコールバック &lt;code&gt;request&lt;/code&gt; と現在のサーバの状態（ &lt;code&gt;names&lt;/code&gt; ）。 &lt;code&gt;handle_cast/2&lt;/code&gt; コールバック形式のタプルを返す &lt;code&gt;{:noreply, new_state}&lt;/code&gt; 。実際のアプリケーションでは、非同期キャストではなく同期呼び出しで &lt;code&gt;:create&lt;/code&gt; のコールバックを実装した可能性があることに注意してください。キャストコールバックを実装する方法を説明するために、このようにしています。</target>
        </trans-unit>
        <trans-unit id="3c507ce5e858adfd9920b90e4c749fbfaa148e35" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt;&lt;code&gt;:compile.file/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプションの完全なリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt; &lt;code&gt;:compile.file/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9b0f265cab36385ed743f3055c68d076ae6c612a" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt;&lt;code&gt;:compile.file/2&lt;/code&gt;&lt;/a&gt;. The option &lt;code&gt;:debug_info&lt;/code&gt; is always added to the end of it. You can disable that using:</source>
          <target state="translated">オプションの完全なリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt; &lt;code&gt;:compile.file/2&lt;/code&gt; を&lt;/a&gt;参照してください。オプション &lt;code&gt;:debug_info&lt;/code&gt; は常にその最後に追加されます。以下を使用して無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="40b1a5cb3bd304af286350dbfa2dd4e5a7bde159" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/leex.html#file-2&quot;&gt;&lt;code&gt;:leex.file/2&lt;/code&gt;&lt;/a&gt;. Note that the &lt;code&gt;:report&lt;/code&gt;, &lt;code&gt;:return_errors&lt;/code&gt;, and &lt;code&gt;:return_warnings&lt;/code&gt; options are overridden by this compiler, thus setting them has no effect.</source>
          <target state="translated">オプションの完全なリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/leex.html#file-2&quot;&gt; &lt;code&gt;:leex.file/2&lt;/code&gt; を&lt;/a&gt;参照してください。 &lt;code&gt;:report&lt;/code&gt; 、 &lt;code&gt;:return_errors&lt;/code&gt; 、および &lt;code&gt;:return_warnings&lt;/code&gt; オプションはこのコンパイラーによってオーバーライドされるため、これらを設定しても効果がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3e1748b035236f7578aca77841e51909dcda09f3" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/yecc.html#file-1&quot;&gt;&lt;code&gt;:yecc.file/1&lt;/code&gt;&lt;/a&gt;. Note that the &lt;code&gt;:report&lt;/code&gt;, &lt;code&gt;:return_errors&lt;/code&gt;, and &lt;code&gt;:return_warnings&lt;/code&gt; options are overridden by this compiler, thus setting them has no effect.</source>
          <target state="translated">オプションの完全なリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/yecc.html#file-1&quot;&gt; &lt;code&gt;:yecc.file/1&lt;/code&gt; を&lt;/a&gt;参照してください。 &lt;code&gt;:report&lt;/code&gt; 、 &lt;code&gt;:return_errors&lt;/code&gt; 、および &lt;code&gt;:return_warnings&lt;/code&gt; オプションはこのコンパイラによってオーバーライドされるため、これらのオプションを設定しても効果がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cbadcbaa533f681fcd43632a6b2da738e09b45d0" translate="yes" xml:space="preserve">
          <source>For a description of all options, see &lt;a href=&quot;#put_compiler_option/2&quot;&gt;&lt;code&gt;put_compiler_option/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのオプションの説明については、&lt;a href=&quot;#put_compiler_option/2&quot;&gt; &lt;code&gt;put_compiler_option/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5de5c09f365a342ca1f4adef5fcae8f98c944b89" translate="yes" xml:space="preserve">
          <source>For a detailed explanation it's worth reading the analysis in &lt;a href=&quot;http://www.erlang.org/doc/man/fprof.html#analysis&quot;&gt;Erlang/OTP documentation for fprof&lt;/a&gt;.</source>
          <target state="translated">詳細な説明については&lt;a href=&quot;http://www.erlang.org/doc/man/fprof.html#analysis&quot;&gt;、fprofのErlang / OTPドキュメントの&lt;/a&gt;分析を読む価値があります。</target>
        </trans-unit>
        <trans-unit id="b520e99e07d5ece73b44be8ccfff4f1b35fe3ab3" translate="yes" xml:space="preserve">
          <source>For a machine with 8 cores, the above will process 16 items instead of 10. The reason is that &lt;a href=&quot;#async_stream/5&quot;&gt;&lt;code&gt;async_stream/5&lt;/code&gt;&lt;/a&gt; always have 8 elements processing at once. So by the time &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; says it got all elements it needed, there are still 6 elements left to be processed.</source>
          <target state="translated">8コアのマシンの場合、上記は10ではなく16のアイテムを処理します。その理由は、&lt;a href=&quot;#async_stream/5&quot;&gt; &lt;code&gt;async_stream/5&lt;/code&gt; では&lt;/a&gt;常に8つの要素が同時に処理されるためです。したがって、&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;が必要なすべての要素を取得したと言うまでに、処理する必要のある要素はまだ6つ残っています。</target>
        </trans-unit>
        <trans-unit id="455bca35994e1d4d5c63a42b082bcc28685c8fab" translate="yes" xml:space="preserve">
          <source>For a more complete rundown on the VM support for different times, see the &lt;a href=&quot;http://www.erlang.org/doc/apps/erts/time_correction.html&quot;&gt;chapter on time and time correction&lt;/a&gt; in the Erlang docs.</source>
          <target state="translated">さまざまな時間のVMサポートのより完全な概要については、Erlangドキュメントの&lt;a href=&quot;http://www.erlang.org/doc/apps/erts/time_correction.html&quot;&gt;時間と時間の修正に関する章を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ad3bd05a62d0ba912c71da5b141b89b54b65bc7" translate="yes" xml:space="preserve">
          <source>For a more complete understanding of the exit reasons and their impact, see the &quot;Exit reasons and restarts&quot; section.</source>
          <target state="translated">終了理由とその影響をより完全に理解するには、「終了理由と再起動」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="28d7d5e1dc06aba969a0b236e650a8f1ae4054d6" translate="yes" xml:space="preserve">
          <source>For a more in-depth explanation, please read the &quot;Shutdown values (:shutdown)&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">より詳細な説明については、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールの「シャットダウン値（：shutdown）」セクションをお読みください。</target>
        </trans-unit>
        <trans-unit id="282328027889720b4154eca4c4806b544bc3a754" translate="yes" xml:space="preserve">
          <source>For a more in-depth explanation, please read the &quot;Shutdown values (:shutdown)&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールの「シャットダウン値（：shutdown）」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="37b344bcdc0c7b8779f65785a14e8c7aa3e5ded0" translate="yes" xml:space="preserve">
          <source>For accessing atom keys, one may also &lt;code&gt;map.key&lt;/code&gt;. Note that while &lt;code&gt;map[key]&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;map.key&lt;/code&gt; will raise if &lt;code&gt;map&lt;/code&gt; doesn't contain the key &lt;code&gt;:key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map.key&lt;/code&gt; アクセスするには、map.keyを使用することもできます。 &lt;code&gt;map[key]&lt;/code&gt; は、 &lt;code&gt;map&lt;/code&gt; &lt;code&gt;key&lt;/code&gt; が含まれていない場合は &lt;code&gt;nil&lt;/code&gt; を返しますが、 &lt;code&gt;map&lt;/code&gt; がkey &lt;code&gt;:key&lt;/code&gt; が含まれていない場合は &lt;code&gt;map.key&lt;/code&gt; が発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="57b9d70004f10cc3b53d8d1fb3e515752a611d21" translate="yes" xml:space="preserve">
          <source>For all other time zones, it returns &lt;code&gt;{:error, :utc_only_time_zone_database}&lt;/code&gt;.</source>
          <target state="translated">他のすべてのタイムゾーンでは、 &lt;code&gt;{:error, :utc_only_time_zone_database}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="f912dfac4d0836d413b5ac057a2a5efa533103ff" translate="yes" xml:space="preserve">
          <source>For all remaining scenarios, libraries should not force their users to use the application environment for configuration. If the user of a library believes that certain parameter should be configured globally, then they can wrap the library functionality with their own application environment configuration.</source>
          <target state="translated">残りのすべてのシナリオについて、ライブラリはユーザに設定のためにアプリケーション環境を使用することを強制すべきではありません。ライブラリのユーザが、あるパラメータがグローバルに設定されるべきだと考えている場合、ライブラリの機能を独自のアプリケーション環境の設定でラップさせることができます。</target>
        </trans-unit>
        <trans-unit id="5c0878fd6cedf49cadfbc1ce37dc2efcc64e9280" translate="yes" xml:space="preserve">
          <source>For anonymous functions, there is also information about any of the atoms &lt;code&gt;:index&lt;/code&gt;, &lt;code&gt;:new_index&lt;/code&gt;, &lt;code&gt;:new_uniq&lt;/code&gt;, &lt;code&gt;:uniq&lt;/code&gt;, and &lt;code&gt;:pid&lt;/code&gt;. For a named function, the value of any of these items is always the atom &lt;code&gt;:undefined&lt;/code&gt;.</source>
          <target state="translated">無名関数の場合、アトム &lt;code&gt;:index&lt;/code&gt; 、 &lt;code&gt;:new_index&lt;/code&gt; 、 &lt;code&gt;:new_uniq&lt;/code&gt; 、 &lt;code&gt;:uniq&lt;/code&gt; 、および &lt;code&gt;:pid&lt;/code&gt; のいずれかに関する情報もあります。名前付き関数の場合、これらの項目の値は常にアトム &lt;code&gt;:undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4b4ad9d30cceadfeb05cba1ddc74ec23c371587e" translate="yes" xml:space="preserve">
          <source>For any function, the information asked for can be any of the atoms &lt;code&gt;:module&lt;/code&gt;, &lt;code&gt;:name&lt;/code&gt;, &lt;code&gt;:arity&lt;/code&gt;, &lt;code&gt;:env&lt;/code&gt;, or &lt;code&gt;:type&lt;/code&gt;.</source>
          <target state="translated">どの関数でも、要求される情報は、アトム &lt;code&gt;:module&lt;/code&gt; 、 &lt;code&gt;:name&lt;/code&gt; 、 &lt;code&gt;:arity&lt;/code&gt; 、 &lt;code&gt;:env&lt;/code&gt; 、または &lt;code&gt;:type&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="19051a75616b4ec98796f8226da734aa9dd4e72d" translate="yes" xml:space="preserve">
          <source>For binaries, the default is the size of the binary. Only the last binary in a match can use the default size. All others must have their size specified explicitly, even if the match is unambiguous. For example:</source>
          <target state="translated">バイナリの場合、デフォルトではバイナリのサイズが使用されます。デフォルトのサイズを使用できるのは、マッチした最後のバイナリだけです。他のすべてのバイナリは、たとえマッチが曖昧でない場合でも、明示的にサイズを指定しなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b53d094e78539531bab25286f248fcbe76cc3712" translate="yes" xml:space="preserve">
          <source>For cases like the one above, &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#await/2&quot;&gt;&lt;code&gt;Task.await/2&lt;/code&gt;&lt;/a&gt; are preferred.</source>
          <target state="translated">上記のような場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#await/2&quot;&gt; &lt;code&gt;Task.await/2&lt;/code&gt; &lt;/a&gt;が優先されます。</target>
        </trans-unit>
        <trans-unit id="bee446e092800012625413c21226bed4c6f88b01" translate="yes" xml:space="preserve">
          <source>For cases like the one above, &lt;a href=&quot;task#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;task#await/2&quot;&gt;&lt;code&gt;Task.await/2&lt;/code&gt;&lt;/a&gt; are preferred.</source>
          <target state="translated">上記のような場合、&lt;a href=&quot;task#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;task#await/2&quot;&gt; &lt;code&gt;Task.await/2&lt;/code&gt; &lt;/a&gt;が推奨されます。</target>
        </trans-unit>
        <trans-unit id="4bcf46e59d6f52359a868d6e88a0b7c5725001a1" translate="yes" xml:space="preserve">
          <source>For companies and teams, we recommend developers to run &lt;code&gt;mix format --check-formatted&lt;/code&gt; on their continuous integration servers, ensuring all current and future code follows the standard.</source>
          <target state="translated">企業やチームの場合、継続的インテグレーションサーバーで &lt;code&gt;mix format --check-formatted&lt;/code&gt; を実行して、現在および将来のすべてのコードが標準に準拠するようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="57326dd8df98d78d81aebf773cf3bf48a345cefe" translate="yes" xml:space="preserve">
          <source>For compiling many files concurrently, see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.ParallelCompiler.html#compile/2&quot;&gt;&lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">多くのファイルを同時にコンパイルするには、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.ParallelCompiler.html#compile/2&quot;&gt; &lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5b735130a48640def7fafe41aafe71355bd32d99" translate="yes" xml:space="preserve">
          <source>For compiling many files concurrently, see &lt;a href=&quot;kernel.parallelcompiler#compile/2&quot;&gt;&lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">多くのファイルを同時にコンパイルするには、&lt;a href=&quot;kernel.parallelcompiler#compile/2&quot;&gt; &lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="22400dc268fe8a7d24bf1a85c2d093a54cf84f6d" translate="yes" xml:space="preserve">
          <source>For convenience, consider adding &lt;code&gt;~/.mix/escripts&lt;/code&gt; directory to your &lt;code&gt;PATH&lt;/code&gt; environment variable. For more information, check the wikipedia article on PATH: &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;https://en.wikipedia.org/wiki/PATH_(variable)&lt;/a&gt;</source>
          <target state="translated">便宜上、 &lt;code&gt;PATH&lt;/code&gt; 環境変数に &lt;code&gt;~/.mix/escripts&lt;/code&gt; ディレクトリを追加することを検討してください。詳細については、PATHに関するウィキペディアの記事を確認して&lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;ください&lt;/a&gt;：https：//en.wikipedia.org/wiki/PATH_（variable）</target>
        </trans-unit>
        <trans-unit id="dfd371e570b65e572a1bfac8fa45fb1789e4dcde" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all imports, requires and aliases defined in the current environment will be automatically carried over:</source>
          <target state="translated">便宜上、 &lt;code&gt;opts&lt;/code&gt; 引数として&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;を渡すことができ、現在の環境で定義されているすべてのインポート、要件、およびエイリアスは自動的に引き継がれます。</target>
        </trans-unit>
        <trans-unit id="d8d23e5be0a4ca18d043f1de42dd2f9c986db30d" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all options will be automatically extracted from the current environment:</source>
          <target state="translated">便宜上、 &lt;code&gt;opts&lt;/code&gt; 引数として&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;を渡すことができ、すべてのオプションが現在の環境から自動的に抽出されます。</target>
        </trans-unit>
        <trans-unit id="fc1c26fa0cb08e8439005305225bde72db303603" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all imports, requires and aliases defined in the current environment will be automatically carried over:</source>
          <target state="translated">便宜上、 &lt;code&gt;opts&lt;/code&gt; 引数として&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;を渡すと、現在の環境で定義されているすべてのインポート、要求、エイリアスが自動的に引き継がれます。</target>
        </trans-unit>
        <trans-unit id="98082b67d38ae575b213c7f51ae3f6f67492121c" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all options will be automatically extracted from the current environment:</source>
          <target state="translated">便宜上、 &lt;code&gt;opts&lt;/code&gt; 引数として&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;を渡すと、すべてのオプションが現在の環境から自動的に抽出されます。</target>
        </trans-unit>
        <trans-unit id="44989465a60239ad9d5198d147baa434ebc38464" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass any &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;, as the first argument or as options. Both the module and all options will be automatically extracted from the environment:</source>
          <target state="translated">便宜上、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;などの任意の&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt;構造体を最初の引数またはオプションとして渡すことができます。モジュールとすべてのオプションの両方が環境から自動的に抽出されます。</target>
        </trans-unit>
        <trans-unit id="54af569b6a029610c5091d98fd6f8fdc1073fe13" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass any &lt;a href=&quot;macro.env&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;, as the first argument or as options. Both the module and all options will be automatically extracted from the environment:</source>
          <target state="translated">便宜上、&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;などの任意の&lt;a href=&quot;macro.env&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt;構造体を最初の引数またはオプションとして渡すことができます。モジュールとすべてのオプションの両方が環境から自動的に抽出されます。</target>
        </trans-unit>
        <trans-unit id="74cba56f60db3c6914d9e9b93e9bb138f70a33f1" translate="yes" xml:space="preserve">
          <source>For converting a binary to a different encoding and for Unicode normalization mechanisms, see Erlang's &lt;code&gt;:unicode&lt;/code&gt; module.</source>
          <target state="translated">バイナリを別のエンコーディングに変換する方法とUnicode正規化メカニズムについては、Erlangの &lt;code&gt;:unicode&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="6add89b99abcbf70ca9badb7516b8595c553f524" translate="yes" xml:space="preserve">
          <source>For debugging complex systems, jumping at the code is not enough. It is necessary to have an understanding of the whole virtual machine, processes, applications, as well as set up tracing mechanisms. Luckily this can be achieved in Erlang with &lt;code&gt;:observer&lt;/code&gt;. In your application:</source>
          <target state="translated">複雑なシステムをデバッグするには、コードにジャンプするだけでは不十分です。仮想マシン全体、プロセス、アプリケーション、およびトレースメカニズムの設定について理解する必要があります。幸いにも、これはErlangで &lt;code&gt;:observer&lt;/code&gt; を使用して実現できます。アプリケーションで：</target>
        </trans-unit>
        <trans-unit id="5a06afd6a1e3c7ee6cdc0611f593f11b1bb1243b" translate="yes" xml:space="preserve">
          <source>For defining your own guards, Elixir even provides conveniences in &lt;code&gt;defguard&lt;/code&gt; and &lt;code&gt;defguardp&lt;/code&gt;. Let's look at a quick case study: we want to check whether an argument is an even or an odd integer. With pattern matching this is impossible because there is an infinite number of integers, and therefore we can't pattern match on every single one of them. Therefore we must use guards. We will just focus on checking for even numbers since checking for the odd ones is almost identical.</source>
          <target state="translated">独自のガードを定義するために、Elixirは &lt;code&gt;defguard&lt;/code&gt; と &lt;code&gt;defguardp&lt;/code&gt; の便利ささえ提供します。簡単なケーススタディを見てみましょう。引数が偶数か奇数かを確認したいと思います。パターンマッチングでは、整数の数が無限であるため、これは不可能です。したがって、すべての整数でパターンマッチングを行うことはできません。したがって、ガードを使用する必要があります。奇数のチェックはほとんど同じなので、偶数のチェックに焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="cb347f81732d219e27a511b076553d17de737f2a" translate="yes" xml:space="preserve">
          <source>For detailed documentation, see the &lt;a href=&quot;typespecs&quot;&gt;typespec documentation&lt;/a&gt;.</source>
          <target state="translated">詳細なドキュメントについては、&lt;a href=&quot;typespecs&quot;&gt;typespecのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c3a098e863f08842ff154a18684a91f2e51c3a25" translate="yes" xml:space="preserve">
          <source>For detailed documentation, see the &lt;a href=&quot;typespecs#behaviours&quot;&gt;behaviour typespec documentation&lt;/a&gt;.</source>
          <target state="translated">詳細なドキュメントについては、&lt;a href=&quot;typespecs#behaviours&quot;&gt;動作typespecのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="312205920e8b42c10300fdc1c0d355fb769ce4d0" translate="yes" xml:space="preserve">
          <source>For details about code points and graphemes, see the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; module documentation.</source>
          <target state="translated">コードポイントと書記素の詳細については、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0f4a8cd91cf5db5cd126fba13df45a267644abde" translate="yes" xml:space="preserve">
          <source>For duplicate registries:</source>
          <target state="translated">重複登録の場合。</target>
        </trans-unit>
        <trans-unit id="72d0f0434fbcec9eb207f396a9fc529d7587b375" translate="yes" xml:space="preserve">
          <source>For dynamically logging messages, see &lt;a href=&quot;#bare_log/3&quot;&gt;&lt;code&gt;bare_log/3&lt;/code&gt;&lt;/a&gt;. But note that &lt;a href=&quot;#bare_log/3&quot;&gt;&lt;code&gt;bare_log/3&lt;/code&gt;&lt;/a&gt; always evaluates its arguments (unless the argument is an anonymous function).</source>
          <target state="translated">動的にログを記録するメッセージについては、&lt;a href=&quot;#bare_log/3&quot;&gt; &lt;code&gt;bare_log/3&lt;/code&gt; を&lt;/a&gt;参照してください。ただし、&lt;a href=&quot;#bare_log/3&quot;&gt; &lt;code&gt;bare_log/3&lt;/code&gt; は&lt;/a&gt;常に引数を評価することに注意してください（引数が無名関数でない限り）。</target>
        </trans-unit>
        <trans-unit id="1a7f7d68ad358e0a245cd7d3ae221748af013919" translate="yes" xml:space="preserve">
          <source>For each failure, ExUnit prints a detailed report, containing the test name with the test case, the code that failed and the values for the left side and right side (rhs) of the &lt;code&gt;==&lt;/code&gt; operator.</source>
          <target state="translated">失敗ごとに、ExUnitはテストケースのテスト名、失敗したコード、および &lt;code&gt;==&lt;/code&gt; 演算子の左側と右側（rhs）の値を含む詳細レポートを出力します。</target>
        </trans-unit>
        <trans-unit id="9e3caa2dc1d9000c1cebb47a719b8e0066b5bd2d" translate="yes" xml:space="preserve">
          <source>For each protocol in the &lt;code&gt;@derive&lt;/code&gt; list, Elixir will assert the protocol has been implemented for &lt;code&gt;Any&lt;/code&gt;. If the &lt;code&gt;Any&lt;/code&gt; implementation defines a &lt;code&gt;__deriving__/3&lt;/code&gt; callback, the callback will be invoked and it should define the implementation module. Otherwise an implementation that simply points to the &lt;code&gt;Any&lt;/code&gt; implementation is automatically derived. For more information on the &lt;code&gt;__deriving__/3&lt;/code&gt; callback, see &lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html#derive/3&quot;&gt;&lt;code&gt;Protocol.derive/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@derive&lt;/code&gt; リストの各プロトコルについて、Elixirはプロトコルが &lt;code&gt;Any&lt;/code&gt; に実装されていることを表明します。 &lt;code&gt;Any&lt;/code&gt; 実装が &lt;code&gt;__deriving__/3&lt;/code&gt; コールバックを定義している場合、コールバックが呼び出され、実装モジュールを定義する必要があります。それ以外の場合は、 &lt;code&gt;Any&lt;/code&gt; 実装を単に指す実装が自動的に派生します。詳細については &lt;code&gt;__deriving__/3&lt;/code&gt; コールバック、参照&lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html#derive/3&quot;&gt; &lt;code&gt;Protocol.derive/3&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0fb1546f77232688d241d37ca1d325018f6f776" translate="yes" xml:space="preserve">
          <source>For each protocol in the &lt;code&gt;@derive&lt;/code&gt; list, Elixir will assert the protocol has been implemented for &lt;code&gt;Any&lt;/code&gt;. If the &lt;code&gt;Any&lt;/code&gt; implementation defines a &lt;code&gt;__deriving__/3&lt;/code&gt; callback, the callback will be invoked and it should define the implementation module. Otherwise an implementation that simply points to the &lt;code&gt;Any&lt;/code&gt; implementation is automatically derived. For more information on the &lt;code&gt;__deriving__/3&lt;/code&gt; callback, see &lt;a href=&quot;protocol#derive/3&quot;&gt;&lt;code&gt;Protocol.derive/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@derive&lt;/code&gt; リストのプロトコルごとに、Elixirはプロトコルが &lt;code&gt;Any&lt;/code&gt; に実装されていることをアサートします。 &lt;code&gt;Any&lt;/code&gt; 実装が &lt;code&gt;__deriving__/3&lt;/code&gt; コールバックを定義する場合、コールバックが呼び出され、実装モジュールを定義する必要があります。それ以外の場合は、 &lt;code&gt;Any&lt;/code&gt; 実装を単に指す実装が自動的に導出されます。詳細については &lt;code&gt;__deriving__/3&lt;/code&gt; コールバック、参照&lt;a href=&quot;protocol#derive/3&quot;&gt; &lt;code&gt;Protocol.derive/3&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25c946451972c973e2251bc9392dd413447e547a" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt; will take longer as the input grows. On the other hand, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#byte_size/1&quot;&gt;&lt;code&gt;Kernel.byte_size/1&lt;/code&gt;&lt;/a&gt; always runs in constant time (i.e. regardless of the input size).</source>
          <target state="translated">たとえば、&lt;a href=&quot;#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;は、入力が大きくなるにつれて時間がかかります。一方、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#byte_size/1&quot;&gt; &lt;code&gt;Kernel.byte_size/1&lt;/code&gt; は&lt;/a&gt;常に一定の時間で実行されます（つまり、入力サイズに関係なく）。</target>
        </trans-unit>
        <trans-unit id="1ce575e007b24aad8c7c6a66939213cc21ace30a" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;the Ecto library&lt;/a&gt; makes use of these features to provide an elegant DSL for writing database queries:</source>
          <target state="translated">たとえば&lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;、Ectoライブラリ&lt;/a&gt;はこれらの機能を利用して、データベースクエリを作成するためのエレガントなDSLを提供します。</target>
        </trans-unit>
        <trans-unit id="72de0d4d0cc3d700aee14fc5035d60936c6b125d" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;keyword#get/3&quot;&gt;&lt;code&gt;Keyword.get/3&lt;/code&gt;&lt;/a&gt; will get the first entry matching the given key, regardless if duplicated entries exist. Similarly, &lt;a href=&quot;keyword#put/3&quot;&gt;&lt;code&gt;Keyword.put/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;keyword#delete/3&quot;&gt;&lt;code&gt;Keyword.delete/3&lt;/code&gt;&lt;/a&gt; ensure all duplicated entries for a given key are removed when invoked. Note that operations that require keys to be found in the keyword list (like &lt;a href=&quot;keyword#get/3&quot;&gt;&lt;code&gt;Keyword.get/3&lt;/code&gt;&lt;/a&gt;) need to traverse the list in order to find keys, so these operations may be slower than their map counterparts.</source>
          <target state="translated">たとえば、&lt;a href=&quot;keyword#get/3&quot;&gt; &lt;code&gt;Keyword.get/3&lt;/code&gt; &lt;/a&gt;は、重複するエントリが存在するかどうかに関係なく、指定されたキーに一致する最初のエントリを取得します。同様に、&lt;a href=&quot;keyword#put/3&quot;&gt; &lt;code&gt;Keyword.put/3&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;keyword#delete/3&quot;&gt; &lt;code&gt;Keyword.delete/3&lt;/code&gt; &lt;/a&gt;は、特定のキーの重複したエントリが呼び出されたときに確実に削除されるようにします。キーワードリストでキーを見つける必要がある操作（&lt;a href=&quot;keyword#get/3&quot;&gt; &lt;code&gt;Keyword.get/3&lt;/code&gt; など&lt;/a&gt;）は、キーを見つけるためにリストをトラバースする必要があるため、これらの操作は対応するマップよりも遅い場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0e6838c5c681ffb29b6c7310ee5d238a1c820319" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;string#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt; will take longer as the input grows. On the other hand, &lt;a href=&quot;kernel#byte_size/1&quot;&gt;&lt;code&gt;Kernel.byte_size/1&lt;/code&gt;&lt;/a&gt; always runs in constant time (i.e. regardless of the input size).</source>
          <target state="translated">たとえば、&lt;a href=&quot;string#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;は、入力が大きくなるにつれて時間がかかります。一方、&lt;a href=&quot;kernel#byte_size/1&quot;&gt; &lt;code&gt;Kernel.byte_size/1&lt;/code&gt; は&lt;/a&gt;常に（つまり、入力サイズに関係なく）一定の時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="26266e605a5c6ee91c1509624141ef8292746ecc" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;:info&lt;/code&gt; takes precedence over &lt;code&gt;:debug&lt;/code&gt;. If your log level is set to &lt;code&gt;:info&lt;/code&gt; then all &lt;code&gt;:info&lt;/code&gt;, &lt;code&gt;:notice&lt;/code&gt; and above will be passed to backends. If your log level is set to &lt;code&gt;:alert&lt;/code&gt;, only &lt;code&gt;:alert&lt;/code&gt; and &lt;code&gt;:emergency&lt;/code&gt; will be printed.</source>
          <target state="translated">たとえば、 &lt;code&gt;:info&lt;/code&gt; は &lt;code&gt;:debug&lt;/code&gt; よりも優先されます。ログレベルが &lt;code&gt;:info&lt;/code&gt; に設定されている場合、 &lt;code&gt;:info&lt;/code&gt; 、 &lt;code&gt;:notice&lt;/code&gt; 以上のすべてがバックエンドに渡されます。ログレベルが &lt;code&gt;:alert&lt;/code&gt; に設定されている場合、 &lt;code&gt;:alert&lt;/code&gt; と &lt;code&gt;:emergency&lt;/code&gt; のみが出力されます。</target>
        </trans-unit>
        <trans-unit id="c8c117e3a1a342b1f8160acdddadbc25ed7792af" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;:info&lt;/code&gt; takes precedence over &lt;code&gt;:debug&lt;/code&gt;. If your log level is set to &lt;code&gt;:info&lt;/code&gt;, &lt;code&gt;:info&lt;/code&gt;, &lt;code&gt;:warn&lt;/code&gt;, and &lt;code&gt;:error&lt;/code&gt; will be printed to the console. If your log level is set to &lt;code&gt;:warn&lt;/code&gt;, only &lt;code&gt;:warn&lt;/code&gt; and &lt;code&gt;:error&lt;/code&gt; will be printed.</source>
          <target state="translated">たとえば、 &lt;code&gt;:info&lt;/code&gt; は &lt;code&gt;:debug&lt;/code&gt; よりも優先されます。ログレベルが &lt;code&gt;:info&lt;/code&gt; 、 &lt;code&gt;:info&lt;/code&gt; 、 &lt;code&gt;:warn&lt;/code&gt; 、および &lt;code&gt;:error&lt;/code&gt; に設定されている場合、コンソールに出力されます。ログレベルが &lt;code&gt;:warn&lt;/code&gt; に設定されている場合、 &lt;code&gt;:warn&lt;/code&gt; と &lt;code&gt;:error&lt;/code&gt; のみが出力されます。</target>
        </trans-unit>
        <trans-unit id="852751a1fe78b13274da6029c51675b7e90dcb56" translate="yes" xml:space="preserve">
          <source>For example, Nerves uses this function to force all dependencies to be reloaded after it updates the system environment. It goes roughly like this:</source>
          <target state="translated">例えば、Nervesはこの関数を使用して、システム環境を更新した後にすべての依存関係を強制的にリロードします。大まかには次のようになります。</target>
        </trans-unit>
        <trans-unit id="4af1c4caff42157f9481064fecc0d437c1cbd415" translate="yes" xml:space="preserve">
          <source>For example, a bitstring generator can be used with the &lt;code&gt;:into&lt;/code&gt; option in order to easily remove all spaces in a string:</source>
          <target state="translated">たとえば、ビット列ジェネレータを &lt;code&gt;:into&lt;/code&gt; オプションとともに使用して、文字列内のすべてのスペースを簡単に削除できます。</target>
        </trans-unit>
        <trans-unit id="e07fb9806a4d8ebf20cacc02e52f4a77448a86cc" translate="yes" xml:space="preserve">
          <source>For example, a value that is not meant to be used must be assigned to &lt;code&gt;_&lt;/code&gt; or to a variable starting with underscore:</source>
          <target state="translated">たとえば、使用することを意図していない値は、アンダースコアで始まる &lt;code&gt;_&lt;/code&gt; または変数に割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="4d8801f0d497391a5a53cac45037cd40a678af92" translate="yes" xml:space="preserve">
          <source>For example, although the code point &quot;&amp;eacute;&quot; is a single character, its underlying representation uses two bytes:</source>
          <target state="translated">たとえば、コードポイント「&amp;eacute;」は1文字ですが、その基になる表現は2バイトを使用します。</target>
        </trans-unit>
        <trans-unit id="fc12bb8ea1c91096d68d9eef9815101e3f31bcef" translate="yes" xml:space="preserve">
          <source>For example, consider you have a project called &lt;code&gt;my_app&lt;/code&gt; that depends on another one called &lt;code&gt;my_dep&lt;/code&gt;. &lt;code&gt;my_dep&lt;/code&gt; wants to export some configuration, so &lt;code&gt;my_dep/.formatter.exs&lt;/code&gt; would look like this:</source>
          <target state="translated">たとえば、あなたが持っているというプロジェクトを検討 &lt;code&gt;my_app&lt;/code&gt; と呼ばれる別の1に依存 &lt;code&gt;my_dep&lt;/code&gt; を。 &lt;code&gt;my_dep&lt;/code&gt; はいくつかの構成をエクスポートしたいので、 &lt;code&gt;my_dep/.formatter.exs&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bafc7c87cc4324b3f378e1b55b1f860c335be286" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol we have:</source>
          <target state="translated">たとえば、&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルの場合：</target>
        </trans-unit>
        <trans-unit id="d0a61e8f663dab72d666aa99d7d8392df6e2866f" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol we have:</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルの場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="10d10d9aafa7b7150f21f408c108aefffcb399e3" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;code&gt;MyBehaviour&lt;/code&gt; module defined in &quot;Optional callbacks&quot; above:</source>
          <target state="translated">たとえば、上記の「オプションのコールバック」で定義されている &lt;code&gt;MyBehaviour&lt;/code&gt; モジュールの場合：</target>
        </trans-unit>
        <trans-unit id="8cdbd82ecc31ecfa904887629dd77138df5f318e" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;args&lt;/code&gt; in the above &lt;code&gt;echo&lt;/code&gt; task were inspected, you might see something like this:</source>
          <target state="translated">たとえば、上記の &lt;code&gt;echo&lt;/code&gt; タスクの &lt;code&gt;args&lt;/code&gt; を調べた場合、次のように表示される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8306be9b21cc2aa72f1fd185081e1e544776e5ce" translate="yes" xml:space="preserve">
          <source>For example, if we want to use the &lt;code&gt;duplicate/2&lt;/code&gt; function from the &lt;code&gt;List&lt;/code&gt; module several times, we can import it:</source>
          <target state="translated">たとえば、 &lt;code&gt;List&lt;/code&gt; モジュールの &lt;code&gt;duplicate/2&lt;/code&gt; 関数を複数回使用する場合は、次のようにインポートできます。</target>
        </trans-unit>
        <trans-unit id="9f456eb16f2bcd93d7684bd1cc3f45a1a1b9a12d" translate="yes" xml:space="preserve">
          <source>For example, if you are waiting for a process to perform some action, it is better to communicate the progress of such action with messages.</source>
          <target state="translated">例えば、何かのアクションを実行するためのプロセスを待っている場合、そのようなアクションの進行状況をメッセージで伝えるのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="dcc71fade44be2f0b07fe15278a544d60b766461" translate="yes" xml:space="preserve">
          <source>For example, if you expect the target system to have a config file in an absolute path, you can configure your &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt; as:</source>
          <target state="translated">たとえば、ターゲットシステムの絶対パスに構成ファイルがあると予想される場合は、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;を次のように構成できます。</target>
        </trans-unit>
        <trans-unit id="d7c6d734ff451f6956c6aacbeccd9d4fdd938f74" translate="yes" xml:space="preserve">
          <source>For example, if you have a release named &lt;code&gt;demo&lt;/code&gt;, you can install the service and then start it from the release root as follows:</source>
          <target state="translated">たとえば、 &lt;code&gt;demo&lt;/code&gt; という名前のリリースがある場合、サービスをインストールしてから、次のようにリリースルートから開始できます。</target>
        </trans-unit>
        <trans-unit id="3fcebcea9fb6c7cf3c366b1c527f43067e4ff086" translate="yes" xml:space="preserve">
          <source>For example, if you push the &lt;code&gt;kv&lt;/code&gt; project to a Git repository, you&amp;rsquo;ll need to list it in your deps code in order to use it:</source>
          <target state="translated">たとえば、 &lt;code&gt;kv&lt;/code&gt; プロジェクトをGitリポジトリにプッシュする場合、それを使用するには、プロジェクトをdepsコードにリストする必要があります。</target>
        </trans-unit>
        <trans-unit id="f3f65aca3ddc3c99d917b0c1b11f664e45fbabf4" translate="yes" xml:space="preserve">
          <source>For example, imagine a function that checks that the head of a list is not &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="translated">たとえば、リストの先頭が &lt;code&gt;nil&lt;/code&gt; でないことをチェックする関数を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="aa3f335cc98a4af2b77268595737e5b7b1ed0489" translate="yes" xml:space="preserve">
          <source>For example, imagine that you have a binary with letters where you want to count how many times each lowercase letter happens, ignoring all uppercase ones. For instance, for the string &lt;code&gt;&quot;AbCabCABc&quot;&lt;/code&gt;, we want to return the map &lt;code&gt;%{&quot;a&quot; =&amp;gt; 1, &quot;b&quot; =&amp;gt; 2, &quot;c&quot; =&amp;gt; 1}&lt;/code&gt;.</source>
          <target state="translated">たとえば、すべての大文字を無視して、各小文字が何回発生するかを数えたい文字があるバイナリがあるとします。たとえば、文字列 &lt;code&gt;&quot;AbCabCABc&quot;&lt;/code&gt; の場合、マップ &lt;code&gt;%{&quot;a&quot; =&amp;gt; 1, &quot;b&quot; =&amp;gt; 2, &quot;c&quot; =&amp;gt; 1}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c8f71ae8328569a71678b0be29a48fd915491141" translate="yes" xml:space="preserve">
          <source>For example, imagine the following configuration:</source>
          <target state="translated">例えば、以下のような構成を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="92738f48db6bf8520616d3f910c86cb70b6a91a2" translate="yes" xml:space="preserve">
          <source>For example, imagine we want to implement a Validator module which provides a data validation domain-specific language. We could implement it using data structures, functions or macros. Let&amp;rsquo;s see what those different DSLs would look like:</source>
          <target state="translated">たとえば、データ検証ドメイン固有の言語を提供するValidatorモジュールを実装するとします。データ構造、関数、またはマクロを使用して実装できます。それらの異なるDSLがどのようになるか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="2ea959d5faa9cf257e82d7007ec084b4f335c593" translate="yes" xml:space="preserve">
          <source>For example, imagine you have a variable &lt;code&gt;number&lt;/code&gt; which contains the number you want to inject inside a quoted expression.</source>
          <target state="translated">たとえば、引用符で囲まれた式の中に注入する &lt;code&gt;number&lt;/code&gt; を含む変数番号があるとします。</target>
        </trans-unit>
        <trans-unit id="a2be4f8e8e8f8a802e09e5114bdae52f10f3c768" translate="yes" xml:space="preserve">
          <source>For example, imagine you have an API that receives a filename as a binary. At some point you will want to write to this file. You could have a function like this:</source>
          <target state="translated">例えば、ファイル名をバイナリとして受け取るAPIがあるとします。ある時点で、このファイルに書き込みたいと思うでしょう。このような関数があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="36f70d74391e0cf5d436981e9565a03fd1f683a6" translate="yes" xml:space="preserve">
          <source>For example, imagine you need to load some configuration from a JSON file and load that into the system. Said configuration provider would look like:</source>
          <target state="translated">例えば、JSONファイルから設定をロードして、それをシステムにロードする必要があるとします。このような設定プロバイダは次のようになります。</target>
        </trans-unit>
        <trans-unit id="e595982d4d16b2fed73877c7eb51c758ba09c9f8" translate="yes" xml:space="preserve">
          <source>For example, imagine your computer, router, printer, or whatever device is not working properly. How do you often fix it? By restarting it. Once we restart the device, we reset the device back to its initial state, which is well-tested and guaranteed to work. In Elixir, we apply this same approach to software: whenever a process crashes, we start a new process to perform the same job as the crashed process.</source>
          <target state="translated">例えば、パソコンやルーター、プリンターなど、どんな機器でもうまく動作していない状態を想像してみてください。あなたはどのようにそれを修正することが多いですか?それを再起動することによってです。デバイスを再起動すると、デバイスを初期状態に戻します。Elixirでは、このアプローチをソフトウェアにも適用しています。プロセスがクラッシュすると、クラッシュしたプロセスと同じ仕事をするために新しいプロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="700e114b8e70a0f80ebb6154d773287b9067f337" translate="yes" xml:space="preserve">
          <source>For example, imagine your computer, router, printer, or whatever device is not working properly. How often do you fix it by restarting it? Once we restart the device, we reset the device back to its initial state, which is well-tested and guaranteed to work. In Elixir, we apply this same approach to software: whenever a process crashes, we start a new process to perform the same job as the crashed process.</source>
          <target state="translated">例えば、あなたのコンピュータ、ルーター、プリンター、またはどのようなデバイスが正常に動作していないと想像してみてください。再起動することで、どれくらいの頻度で直りますか?デバイスを再起動したら、デバイスを初期状態に戻します。Elixirでは、このアプローチをソフトウェアにも適用しています。プロセスがクラッシュすると、クラッシュしたプロセスと同じ仕事をするために新しいプロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="f3cd6f9b58acaa3e0524e83ef7217c631726de0e" translate="yes" xml:space="preserve">
          <source>For example, in &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;cond&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;case&lt;/code&gt; と &lt;code&gt;cond&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="5132419edebfb5538ebf32de072ef747449be00a" translate="yes" xml:space="preserve">
          <source>For example, in order to write test cases using the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; framework provided with Elixir, a developer should &lt;code&gt;use&lt;/code&gt; the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">たとえば、Elixirで提供される&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;フレームワークを使用してテストケースを作成するには、開発者は&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt;モジュールを &lt;code&gt;use&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="d7d72e926d93f3ca1c487388374604ee39ad35ad" translate="yes" xml:space="preserve">
          <source>For example, in order to write tests using the ExUnit framework, a developer should use the &lt;code&gt;ExUnit.Case&lt;/code&gt; module:</source>
          <target state="translated">たとえば、ExUnitフレームワークを使用してテストを作成するには、開発者は &lt;code&gt;ExUnit.Case&lt;/code&gt; モジュールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a8a1f3ca0f4f6e6f52cd5c38c70ee3321a7257d" translate="yes" xml:space="preserve">
          <source>For example, setting the mode &lt;code&gt;0o755&lt;/code&gt; gives it write, read and execute permission to the owner and both read and execute permission to group and others.</source>
          <target state="translated">たとえば、モード &lt;code&gt;0o755&lt;/code&gt; を設定すると、所有者には書き込み、読み取り、実行の権限が与えられ、グループやその他のユーザーには読み取りと実行の両方の権限が与えられます。</target>
        </trans-unit>
        <trans-unit id="aa476bb5aa4307e87b6892c3eef680e2a1027574" translate="yes" xml:space="preserve">
          <source>For example, someone using your application can override its &lt;code&gt;:redis_host&lt;/code&gt; environment variable as follows:</source>
          <target state="translated">たとえば、アプリケーションを使用しているユーザーは、次のようにその &lt;code&gt;:redis_host&lt;/code&gt; 環境変数をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c1f9245784df422bc589c02556ded2ebe4df04fc" translate="yes" xml:space="preserve">
          <source>For example, take a group document represented as &lt;code&gt;[1, 2, 3]&lt;/code&gt; where the space after every comma is a break. When the document above does not fit a single line, all breaks are enabled, causing the document to be rendered as:</source>
          <target state="translated">たとえば、 &lt;code&gt;[1, 2, 3]&lt;/code&gt; 表されるグループドキュメントを考えてみます。ここで、カンマごとのスペースは改行です。上記のドキュメントが1行に収まらない場合、すべての改行が有効になり、ドキュメントは次のようにレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="5d84b09dd24eed2b37c8292a1e28d040806e59c5" translate="yes" xml:space="preserve">
          <source>For example, take the following &lt;code&gt;.iex.exs&lt;/code&gt; file:</source>
          <target state="translated">たとえば、次の &lt;code&gt;.iex.exs&lt;/code&gt; ファイルを見てください。</target>
        </trans-unit>
        <trans-unit id="4d2ade3e7c04be9a767d2179941a1c0d02c356f6" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt;&lt;code&gt;tuple_size/1&lt;/code&gt;&lt;/a&gt; function only works with tuples. If we use it with anything else, an argument error is raised:</source>
          <target state="translated">たとえば、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt; &lt;code&gt;tuple_size/1&lt;/code&gt; &lt;/a&gt;関数はタプルでのみ機能します。他のものと一緒に使用すると、引数エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f77c979642e1a9533effb1fde71896e71b2b1b38" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;https://hexdocs.pm/elixir/Record.html&quot;&gt;&lt;code&gt;Record&lt;/code&gt;&lt;/a&gt; module in Elixir provides a series of macros to be used in patterns and guards that allows tuples to have named fields during compilation.</source>
          <target state="translated">たとえば、Elixirの&lt;a href=&quot;https://hexdocs.pm/elixir/Record.html&quot;&gt; &lt;code&gt;Record&lt;/code&gt; &lt;/a&gt;モジュールは、コンパイル中にタプルが名前付きフィールドを持つことを可能にするパターンとガードで使用される一連のマクロを提供します。</target>
        </trans-unit>
        <trans-unit id="dabd9937e48a29e73846df5608de823548c08b1e" translate="yes" xml:space="preserve">
          <source>For example, the code point &quot;&amp;eacute;&quot; is two bytes:</source>
          <target state="translated">たとえば、コードポイント「&amp;eacute;」は2バイトです。</target>
        </trans-unit>
        <trans-unit id="d6d855b74f3622b261e79dba8a4c6c84fa6807d2" translate="yes" xml:space="preserve">
          <source>For example, the decimal number &lt;code&gt;3&lt;/code&gt; when represented with 4 bits in base 2 would be &lt;code&gt;0011&lt;/code&gt;, which is equivalent to the values &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, each stored using 1 bit:</source>
          <target state="translated">たとえば、小数番号 &lt;code&gt;3&lt;/code&gt; ベース2に4ビットで表現される &lt;code&gt;0011&lt;/code&gt; の値に相当し、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; 、1ビットを使用して格納されている各。</target>
        </trans-unit>
        <trans-unit id="d5c30e8005c0c98d6e53ce8dd367db66742e7504" translate="yes" xml:space="preserve">
          <source>For example, the following agent implements a counter:</source>
          <target state="translated">例えば、以下のエージェントはカウンタを実装しています。</target>
        </trans-unit>
        <trans-unit id="f261112170af791387e9b66db2c2a75a6ec23785" translate="yes" xml:space="preserve">
          <source>For example, the following is a keyword list:</source>
          <target state="translated">例えば、以下のようなキーワードリストがあります。</target>
        </trans-unit>
        <trans-unit id="3df9b543906bfd5595a0cacf49aeb1e63c393e38" translate="yes" xml:space="preserve">
          <source>For example, the module implementing the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol for lists is &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.List.html&quot;&gt;&lt;code&gt;Enumerable.List&lt;/code&gt;&lt;/a&gt;. Therefore, we can invoke &lt;code&gt;__impl__/1&lt;/code&gt; on this module:</source>
          <target state="translated">たとえば、リストの&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルを実装するモジュールは&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.List.html&quot;&gt; &lt;code&gt;Enumerable.List&lt;/code&gt; &lt;/a&gt;です。したがって、このモジュールで &lt;code&gt;__impl__/1&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b821bcc62d19a98d61faaca345d43a31156e0565" translate="yes" xml:space="preserve">
          <source>For example, the numbers 0.1 and 0.01 are two of them, what means the result of squaring 0.1 does not give 0.01 neither the closest representable. Here is what happens in this case:</source>
          <target state="translated">例えば、0.1と0.01は2つの数字ですが、0.1の2乗の結果は0.01に最も近い表現ができないことを意味します。この場合はどうなるかというと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="3780e894751fdee43da26866cc6af18a271859a8" translate="yes" xml:space="preserve">
          <source>For example, to add multiple backends to your application, modify your configuration:</source>
          <target state="translated">例えば、アプリケーションに複数のバックエンドを追加するには、設定を変更します。</target>
        </trans-unit>
        <trans-unit id="4009f5a45e54514dcb5423e242c0ca43c71a40ed" translate="yes" xml:space="preserve">
          <source>For example, to configure &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; to redirect all Erlang messages using a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">たとえば、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルを使用してすべてのErlangメッセージをリダイレクトするように&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;を設定するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="97810dcc8560ef61b772f3bdcad87ca93ff037d4" translate="yes" xml:space="preserve">
          <source>For example, to configure the &lt;code&gt;:backends&lt;/code&gt; and purge all calls that happen at compile time with level lower than &lt;code&gt;:info&lt;/code&gt; in a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">例えば、設定するには &lt;code&gt;:backends&lt;/code&gt; とより低いレベルでコンパイル時に起こるすべてのコールパージ &lt;code&gt;:info&lt;/code&gt; 中 &lt;code&gt;config/config.exs&lt;/code&gt; ファイル：</target>
        </trans-unit>
        <trans-unit id="21a8e2abf86d2318a5a86e1829eeef5e5857c798" translate="yes" xml:space="preserve">
          <source>For example, to configure the &lt;code&gt;:level&lt;/code&gt; and &lt;code&gt;:truncate&lt;/code&gt; options in a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">たとえば、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルで： &lt;code&gt;:level&lt;/code&gt; および &lt;code&gt;:truncate&lt;/code&gt; オプションを構成するには：</target>
        </trans-unit>
        <trans-unit id="a0b9557028bd4e04dc9baddf4fcbc9b36f7fb55a" translate="yes" xml:space="preserve">
          <source>For example, to configure the &lt;code&gt;erlc_options&lt;/code&gt; for your Erlang project you may run:</source>
          <target state="translated">たとえば、Erlangプロジェクトの &lt;code&gt;erlc_options&lt;/code&gt; を構成するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="76a5d4e647864137abb48e20144e766fb0c89015" translate="yes" xml:space="preserve">
          <source>For example, to disable color, one may use the configuration:</source>
          <target state="translated">例えば、色を無効にするには、設定を使用することができます。</target>
        </trans-unit>
        <trans-unit id="a765ecc41513328acb3598f8f52b46ee7deada9a" translate="yes" xml:space="preserve">
          <source>For example, to lookup a server process, monitor it and send a cast to it:</source>
          <target state="translated">例えば、サーバープロセスを検索し、それを監視し、キャストを送信します。</target>
        </trans-unit>
        <trans-unit id="cabc9384ea2bf9af1b99579a392dfd97e82162f8" translate="yes" xml:space="preserve">
          <source>For example, to split a test suite into 4 partitions and run them, you would use the following commands:</source>
          <target state="translated">例えば、テストスイートを4つのパーティションに分割して実行するには、以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="49838731982f45b819651e28face607e270a0d83" translate="yes" xml:space="preserve">
          <source>For example, to update a map inside another map:</source>
          <target state="translated">例えば、別のマップの中でマップを更新する場合。</target>
        </trans-unit>
        <trans-unit id="f8d6f1962522c5a74c0c716a39923ef1c094d4d7" translate="yes" xml:space="preserve">
          <source>For example, to write test cases using the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; framework provided with Elixir, a developer should &lt;code&gt;use&lt;/code&gt; the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">たとえば、Elixirで提供される&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;フレームワークを使用してテストケースを作成 &lt;code&gt;use&lt;/code&gt; は、開発者は&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt;モジュールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="16fe3a971c511fed7157a7e0a03e09bb51dcfcf2" translate="yes" xml:space="preserve">
          <source>For example, we can configure IEx default prompt to another value. Just open &lt;code&gt;config/config.exs&lt;/code&gt; and add the following to the end:</source>
          <target state="translated">たとえば、IExデフォルトプロンプトを別の値に設定できます。 &lt;code&gt;config/config.exs&lt;/code&gt; を開き、以下を最後に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="3ad4f120b95aba025295d32b32cd84c67c8c60d6" translate="yes" xml:space="preserve">
          <source>For example, we can configure IEx default prompt to another value. Let&amp;rsquo;s create the &lt;code&gt;config/config.exs&lt;/code&gt; file with the following content:</source>
          <target state="translated">たとえば、IExのデフォルトプロンプトを別の値に設定できます。次の内容で &lt;code&gt;config/config.exs&lt;/code&gt; ファイルを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="65ea0a674f1ce41ff4c22e2d07ee72ff95421ac9" translate="yes" xml:space="preserve">
          <source>For example, we can map a list of integers into their squared values:</source>
          <target state="translated">例えば、整数のリストをその二乗値にマッピングすることができます。</target>
        </trans-unit>
        <trans-unit id="ecebd23ebfe4f1d1acd8ff8a2d9a8722555dc40b" translate="yes" xml:space="preserve">
          <source>For example, we can use bitstring generators with the &lt;code&gt;:into&lt;/code&gt; option to easily remove all spaces in a string:</source>
          <target state="translated">たとえば、ビット列ジェネレータを &lt;code&gt;:into&lt;/code&gt; オプションとともに使用して、文字列内のすべてのスペースを簡単に削除できます。</target>
        </trans-unit>
        <trans-unit id="825bc9fd2268ad4ced535baaab0a761647bf3261" translate="yes" xml:space="preserve">
          <source>For example, we could implement &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;map/2&lt;/code&gt;&lt;/a&gt; in terms of &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;reduce/3&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">たとえば、次のように&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;reduce/3&lt;/code&gt; の&lt;/a&gt;観点から&lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;map/2&lt;/code&gt; &lt;/a&gt;を実装できます。</target>
        </trans-unit>
        <trans-unit id="678b43ac2ccf82f31c5e6153c0e2834d16a5b6ca" translate="yes" xml:space="preserve">
          <source>For example, we could start and register our &lt;code&gt;Stack&lt;/code&gt; server locally as follows:</source>
          <target state="translated">たとえば、 &lt;code&gt;Stack&lt;/code&gt; サーバーをローカルで起動して登録するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="9a4ed3f8957553e26e0d94986089ddb6888e33a8" translate="yes" xml:space="preserve">
          <source>For example, we have used 4 counting functions so far: &lt;code&gt;byte_size/1&lt;/code&gt; (for the number of bytes in a string), &lt;code&gt;tuple_size/1&lt;/code&gt; (for tuple size), &lt;code&gt;length/1&lt;/code&gt; (for list length) and &lt;code&gt;String.length/1&lt;/code&gt; (for the number of graphemes in a string). We use &lt;code&gt;byte_size&lt;/code&gt; to get the number of bytes in a string &amp;ndash; a cheap operation. Retrieving the number of Unicode characters, on the other hand, uses &lt;code&gt;String.length&lt;/code&gt;, and may be expensive as it relies on a traversal of the entire string.</source>
          <target state="translated">たとえば、これまでに4つのカウント関数を使用しました： &lt;code&gt;byte_size/1&lt;/code&gt; （文字列のバイト数）、 &lt;code&gt;tuple_size/1&lt;/code&gt; （タプルサイズ）、 &lt;code&gt;length/1&lt;/code&gt; （リスト長）、 &lt;code&gt;String.length/1&lt;/code&gt; （文字列内の書記素の数）。 &lt;code&gt;byte_size&lt;/code&gt; を使用して文字列のバイト数を取得します。これは安価な操作です。一方、Unicode文字の数を取得するには &lt;code&gt;String.length&lt;/code&gt; を使用し、文字列全体のトラバーサルに依存しているため、コストがかかる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a856e5ee06c9349ef31043c8ece70cd8e13f1483" translate="yes" xml:space="preserve">
          <source>For example, we have used 4 counting functions so far: &lt;code&gt;byte_size/1&lt;/code&gt; (for the number of bytes in a string), &lt;code&gt;tuple_size/1&lt;/code&gt; (for tuple size), &lt;code&gt;length/1&lt;/code&gt; (for list length) and &lt;code&gt;String.length/1&lt;/code&gt; (for the number of graphemes in a string). We use &lt;code&gt;byte_size&lt;/code&gt; to get the number of bytes in a string &amp;ndash; a cheap operation. Retrieving the number of Unicode graphemes, on the other hand, uses &lt;code&gt;String.length&lt;/code&gt;, and may be expensive as it relies on a traversal of the entire string.</source>
          <target state="translated">たとえば、これまでに4つのカウント関数を使用しました： &lt;code&gt;byte_size/1&lt;/code&gt; （文字列のバイト数）、 &lt;code&gt;tuple_size/1&lt;/code&gt; （タプルサイズ）、 &lt;code&gt;length/1&lt;/code&gt; （リスト長）、 &lt;code&gt;String.length/1&lt;/code&gt; （文字列内のグラフの数）。 &lt;code&gt;byte_size&lt;/code&gt; を使用して、文字列のバイト数を取得します。これは安価な操作です。一方、Unicode書記素の数を取得するには、 &lt;code&gt;String.length&lt;/code&gt; を使用します。これは、文字列全体の走査に依存しているため、コストがかかる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e82002b46a7bc98e04a53b8f0787d96d507b69d" translate="yes" xml:space="preserve">
          <source>For example, we recommend developers to always start tasks under a supervisor. This provides more visibility and allows you to control how those tasks are terminated when a node shuts down. That might look something like &lt;code&gt;Task.Supervisor.start_child(MySupervisor, task_specification)&lt;/code&gt;. This means that, although your code is the one who invokes the task, the actual ancestor of the task is the supervisor, as the supervisor is the one effectively starting it.</source>
          <target state="translated">たとえば、開発者は常にスーパーバイザーの下でタスクを開始することをお勧めします。これにより、可視性が向上し、ノードのシャットダウン時にこれらのタスクを終了する方法を制御できます。これは &lt;code&gt;Task.Supervisor.start_child(MySupervisor, task_specification)&lt;/code&gt; ます。つまり、コードはタスクを呼び出すコードですが、タスクの実際の祖先はスーパーバイザーであるため、スーパーバイザーが効率的にタスクを開始します。</target>
        </trans-unit>
        <trans-unit id="0dcb9a644dbae1acdb996808b23645d55e2f6941" translate="yes" xml:space="preserve">
          <source>For example, when daylight saving changes are applied by a region, the clock typically moves forward or backward by one hour. This means certain datetimes never occur or may occur more than once. Since &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; is not validated against a time zone, such errors would go unnoticed.</source>
          <target state="translated">たとえば、夏時間の変更が地域によって適用されると、時計は通常、1時間進みまたは戻ります。これは、特定の日時が発生しないか、複数回発生する可能性があることを意味します。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;はタイムゾーンに対して検証されないため、このようなエラーは気付かれません。</target>
        </trans-unit>
        <trans-unit id="0134d97aaa5f44efc896482193ec373596c0207e" translate="yes" xml:space="preserve">
          <source>For example, you could specify a &lt;code&gt;URI.Parser&lt;/code&gt; behaviour as follows:</source>
          <target state="translated">たとえば、次のように &lt;code&gt;URI.Parser&lt;/code&gt; の動作を指定できます。</target>
        </trans-unit>
        <trans-unit id="80c725586e4c191211220e82dbb160afa5b6efb9" translate="yes" xml:space="preserve">
          <source>For example, you might wish to include a custom &lt;code&gt;:error_code&lt;/code&gt; metadata in your logs:</source>
          <target state="translated">たとえば、ログにカスタム &lt;code&gt;:error_code&lt;/code&gt; メタデータを含めることができます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="4e3a66cb565ce65f19a6ff578510f5919a4c4a12" translate="yes" xml:space="preserve">
          <source>For examples on how to use the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol and &lt;a href=&quot;#into/1&quot;&gt;&lt;code&gt;into/1&lt;/code&gt;&lt;/a&gt; see the module documentation.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;プロトコルと&lt;a href=&quot;#into/1&quot;&gt; &lt;code&gt;into/1&lt;/code&gt; の&lt;/a&gt;使用例については、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e4c21cf1cac5889764a4444020c6074013f406cd" translate="yes" xml:space="preserve">
          <source>For floats, it is 64. For floats, &lt;code&gt;size * unit&lt;/code&gt; must result in 32 or 64, corresponding to &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; binary32 and binary64, respectively.</source>
          <target state="translated">浮動小数点数の場合、それは64です。浮動小数点数の場合、 &lt;code&gt;size * unit&lt;/code&gt; は、&lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; binary32およびbinary64にそれぞれ対応する32または64になる必要があります。</target>
        </trans-unit>
        <trans-unit id="e0863812afa8bda24138da4ec3b1ecff0d4ecc46" translate="yes" xml:space="preserve">
          <source>For fun, let's define a simple module in this shell too:</source>
          <target state="translated">お楽しみのために、このシェルでもシンプルなモジュールを定義してみましょう。</target>
        </trans-unit>
        <trans-unit id="979ac34509c51f5dab54e261eec8b56be64ab620" translate="yes" xml:space="preserve">
          <source>For further details on applications please check the documentation of the &lt;a href=&quot;http://www.erlang.org/doc/man/application.html&quot;&gt;&lt;code&gt;application&lt;/code&gt;&lt;/a&gt; Erlang module, and the &lt;a href=&quot;http://www.erlang.org/doc/design_principles/applications.html&quot;&gt;Applications&lt;/a&gt; section of the &lt;a href=&quot;http://erlang.org/doc/design_principles/users_guide.html&quot;&gt;OTP Design Principles User's Guide&lt;/a&gt;.</source>
          <target state="translated">アプリケーションの詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/application.html&quot;&gt; &lt;code&gt;application&lt;/code&gt; &lt;/a&gt; Erlangモジュールのドキュメントと、&lt;a href=&quot;http://erlang.org/doc/design_principles/users_guide.html&quot;&gt;OTP設計原則ユーザーズガイドの&lt;/a&gt;&lt;a href=&quot;http://www.erlang.org/doc/design_principles/applications.html&quot;&gt;アプリケーション&lt;/a&gt;セクションを確認してください。</target>
        </trans-unit>
        <trans-unit id="f91858e05de05b595ba22a40c6d98a7a27a8e926" translate="yes" xml:space="preserve">
          <source>For grouping tests together, see &lt;a href=&quot;#describe/2&quot;&gt;&lt;code&gt;describe/2&lt;/code&gt;&lt;/a&gt; in this module.</source>
          <target state="translated">テストをグループ化するには、このモジュールの&lt;a href=&quot;#describe/2&quot;&gt; &lt;code&gt;describe/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="77ab7e6ee8d58a006653e5dfc1bb9f58088937ba" translate="yes" xml:space="preserve">
          <source>For instance one period could be the summer of 2018 in &quot;Europe/London&quot; where summer time / daylight saving time is in effect and lasts from spring to autumn. At autumn the &lt;code&gt;std_offset&lt;/code&gt; changes along with the &lt;code&gt;zone_abbr&lt;/code&gt; so a different period is needed during winter.</source>
          <target state="translated">たとえば、1つの期間は、夏時間/夏時間が有効であり、春から秋まで続く「ヨーロッパ/ロンドン」の2018年の夏になる可能性があります。秋には &lt;code&gt;std_offset&lt;/code&gt; はに伴って変化 &lt;code&gt;zone_abbr&lt;/code&gt; 異なる期間が冬の間に必要とされるように。</target>
        </trans-unit>
        <trans-unit id="e51496febe42a068541cd5f1776cfef4dbdc9e31" translate="yes" xml:space="preserve">
          <source>For instance, given a user map with the &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:languages&lt;/code&gt; keys, here is how to deeply traverse the map and convert all language names to uppercase:</source>
          <target state="translated">たとえば、 &lt;code&gt;:name&lt;/code&gt; キーと &lt;code&gt;:languages&lt;/code&gt; キーを持つユーザーマップがある場合、マップを深くたどってすべての言語名を大文字に変換する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="0fa8784dfc2e01f4f7777294a47b6dd71b0ca392" translate="yes" xml:space="preserve">
          <source>For instance, releases run using short-names (&lt;code&gt;--sname&lt;/code&gt;). However, if you want to actually run a distributed key-value store in production, you will need multiple nodes and start the release with the &lt;code&gt;--name&lt;/code&gt; option. We can achieve this by setting the &lt;code&gt;RELEASE_DISTRIBUTION&lt;/code&gt; environment variable inside the &lt;code&gt;env.sh&lt;/code&gt; and &lt;code&gt;env.bat&lt;/code&gt; files. Mix already has a template for said files which we can customize, so let&amp;rsquo;s ask Mix to copy them to our application:</source>
          <target state="translated">たとえば、リリースはショートネーム（ &lt;code&gt;--sname&lt;/code&gt; ）を使用して実行されます。ただし、本番 &lt;code&gt;--name&lt;/code&gt; 分散Key-Valueストアを実際に実行する場合は、複数のノードが必要で、-nameオプションを指定してリリースを開始します。これは、 &lt;code&gt;env.sh&lt;/code&gt; および &lt;code&gt;env.bat&lt;/code&gt; ファイル内の &lt;code&gt;RELEASE_DISTRIBUTION&lt;/code&gt; 環境変数を設定することで実現できます。Mixには、カスタマイズできる前述のファイルのテンプレートがすでにあるので、Mixにアプリケーションにコピーするように依頼してみましょう。</target>
        </trans-unit>
        <trans-unit id="098abe87bcf54674f294a660fdeca753e3973228" translate="yes" xml:space="preserve">
          <source>For instance, we can create a file called &lt;code&gt;math.exs&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;math.exs&lt;/code&gt; というファイルを作成できます。</target>
        </trans-unit>
        <trans-unit id="915841eb2ae9437182185facdb407e9c03dade23" translate="yes" xml:space="preserve">
          <source>For intensive workloads, the registry may also be partitioned (by specifying the &lt;code&gt;:partitions&lt;/code&gt; option). If partitioning is required then a good default is to set the number of partitions to the number of schedulers available:</source>
          <target state="translated">集中的なワークロードの場合、レジストリもパーティション化されることがあります（ &lt;code&gt;:partitions&lt;/code&gt; オプションを指定することにより）。パーティション化が必要な場合は、パーティションの数を使用可能なスケジューラーの数に設定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0be2313f13029f16466fa64d8d779bb84d194911" translate="yes" xml:space="preserve">
          <source>For maps, the first tuple element must be a &lt;code&gt;{key, value}&lt;/code&gt; tuple.</source>
          <target state="translated">マップの場合、最初のタプル要素は &lt;code&gt;{key, value}&lt;/code&gt; タプルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="9ef87b3ee1067750a0799faa766ca960ddec15e8" translate="yes" xml:space="preserve">
          <source>For maps, the function expects a key-value tuple.</source>
          <target state="translated">マップの場合、この関数はキーと値のタプルを期待します。</target>
        </trans-unit>
        <trans-unit id="2006fc3ed297a859555ea878c9cf50cc043d6a81" translate="yes" xml:space="preserve">
          <source>For monitoring status changes of all nodes, see &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-2&quot;&gt;&lt;code&gt;:net_kernel.monitor_nodes/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのノードのステータス変更の監視については、&lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-2&quot;&gt; &lt;code&gt;:net_kernel.monitor_nodes/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f65055eecdf00696b65a9b430fcafe6f22952a12" translate="yes" xml:space="preserve">
          <source>For monitoring status changes of all nodes, see &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-3&quot;&gt;&lt;code&gt;:net_kernel.monitor_nodes/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのノードのステータス変更の監視については、&lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-3&quot;&gt; &lt;code&gt;:net_kernel.monitor_nodes/3&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a50d8c364812d16e018ab6d0f72a5d0030e8481" translate="yes" xml:space="preserve">
          <source>For more advanced options available when defining custom attributes, see &lt;a href=&quot;#register_attribute/3&quot;&gt;&lt;code&gt;register_attribute/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">カスタム属性を定義するときに使用できるより高度なオプションについては、&lt;a href=&quot;#register_attribute/3&quot;&gt; &lt;code&gt;register_attribute/3&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="095613a0c71daec41f22ebf762f9ec5144c17212" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link-1&quot;&gt;&lt;code&gt;:file.read_link/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link-1&quot;&gt; &lt;code&gt;:file.read_link/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c85e5081a17eac440f3c5a413306106ced5d9c19" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link_info-2&quot;&gt;&lt;code&gt;:file.read_link_info/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link_info-2&quot;&gt; &lt;code&gt;:file.read_link_info/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="40801b427f30e76ede611926a90606441dd86a7c" translate="yes" xml:space="preserve">
          <source>For more in-depth information, please read the &quot;Charlists&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;モジュールの「Charlists」セクションをお読みください。</target>
        </trans-unit>
        <trans-unit id="c734b39d3add7d597fc3e2a0a8f87e008c1a861a" translate="yes" xml:space="preserve">
          <source>For more in-depth information, please read the &quot;Charlists&quot; section in the &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">詳細については、&lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;モジュールの「チャーリスト」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="95147adb3177256a490cdad3827bcc51779e68e4" translate="yes" xml:space="preserve">
          <source>For more information about IO data, see the &lt;a href=&quot;#module-io-data&quot;&gt;&quot;IO data&quot;&lt;/a&gt; section in the module documentation.</source>
          <target state="translated">IOデータの詳細については、モジュールのドキュメントの&lt;a href=&quot;#module-io-data&quot;&gt;「IOデータ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c3a9dad7c543d1c63c29b6ca8ca500c85b4a2b7" translate="yes" xml:space="preserve">
          <source>For more information about chardata, see the &lt;a href=&quot;#module-chardata&quot;&gt;&quot;Chardata&quot;&lt;/a&gt; section in the module documentation.</source>
          <target state="translated">chardataの詳細については、モジュールドキュメントの&lt;a href=&quot;#module-chardata&quot;&gt;「Chardata」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0541321f88f511fe94f622a2cb19777c006436cc" translate="yes" xml:space="preserve">
          <source>For more information about structs, please check &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%25/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構造体の詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%25/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="edd1a5e1d2ce7f216383d5f43648eb3d76f38089" translate="yes" xml:space="preserve">
          <source>For more information about structs, please check &lt;a href=&quot;kernel.specialforms#%2525/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構造体の詳細については、&lt;a href=&quot;kernel.specialforms#%2525/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="59d3cf884555506ee92cff193a1929009e874d1e" translate="yes" xml:space="preserve">
          <source>For more information about task aliasing, take a look at the &quot;Aliasing&quot; section in the docs for &lt;a href=&quot;mix&quot;&gt;&lt;code&gt;Mix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タスクのエイリアスの詳細については、&lt;a href=&quot;mix&quot;&gt; &lt;code&gt;Mix&lt;/code&gt; &lt;/a&gt;のドキュメントの「エイリアス」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="78f8e40c63b458c9fad682e6d3b6666a0f62cf7b" translate="yes" xml:space="preserve">
          <source>For more information about task aliasing, take a look at the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#module-aliases&quot;&gt;&quot;Aliases&quot;&lt;/a&gt; section in the docs for &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;&lt;code&gt;Mix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タスクのエイリアシングの詳細については、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt; &lt;code&gt;Mix&lt;/code&gt; &lt;/a&gt;のドキュメントの&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#module-aliases&quot;&gt;「エイリアス」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="da00729bbfd1619462b29a7b8fa0dab41f7868c6" translate="yes" xml:space="preserve">
          <source>For more information and the list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#open_port-2&quot;&gt;&lt;code&gt;:erlang.open_port/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細とオプションのリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#open_port-2&quot;&gt; &lt;code&gt;:erlang.open_port/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cc7ee954ed549f3663bd8fb004277a09d86223c0" translate="yes" xml:space="preserve">
          <source>For more information and to open any module or function, see &lt;a href=&quot;#open/1&quot;&gt;&lt;code&gt;open/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細およびモジュールまたは関数を&lt;a href=&quot;#open/1&quot;&gt; &lt;code&gt;open/1&lt;/code&gt; &lt;/a&gt;には、open / 1を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0b21c46bc07a705dfc9fb743eebf812b0cdc892" translate="yes" xml:space="preserve">
          <source>For more information on code paths, check the &lt;a href=&quot;code&quot;&gt;&lt;code&gt;Code&lt;/code&gt;&lt;/a&gt; module in Elixir and also Erlang's &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;&lt;code&gt;:code&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">コードパスの詳細については、Elixir の&lt;a href=&quot;code&quot;&gt; &lt;code&gt;Code&lt;/code&gt; &lt;/a&gt;モジュールとErlangの&lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt; &lt;code&gt;:code&lt;/code&gt; モジュールを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="9bd54480aa692a8df8b981b72aa444502ecc46ce" translate="yes" xml:space="preserve">
          <source>For more information on code paths, check the &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html&quot;&gt;&lt;code&gt;Code&lt;/code&gt;&lt;/a&gt; module in Elixir and also Erlang's &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;&lt;code&gt;:code&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">コードパスの詳細については、Elixirの&lt;a href=&quot;https://hexdocs.pm/elixir/Code.html&quot;&gt; &lt;code&gt;Code&lt;/code&gt; &lt;/a&gt;モジュールとErlangの&lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt; &lt;code&gt;:code&lt;/code&gt; モジュールを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="6bd6c86df060a9a0da50c17d815720a12995dd04" translate="yes" xml:space="preserve">
          <source>For more information on each of the possible returned values, see &lt;a href=&quot;#info/1&quot;&gt;&lt;code&gt;info/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返される可能性のある各値の詳細については、&lt;a href=&quot;#info/1&quot;&gt; &lt;code&gt;info/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8a372c9bd101c94685e235eb649743902f58f48c" translate="yes" xml:space="preserve">
          <source>For more information on how the break is inserted, see &lt;a href=&quot;#break/1&quot;&gt;&lt;code&gt;break/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ブレークの挿入方法の詳細については、&lt;a href=&quot;#break/1&quot;&gt; &lt;code&gt;break/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="65a28bc1907c5e0ff21b3bd1d4bbcdfcc5c5acaf" translate="yes" xml:space="preserve">
          <source>For more information on running your project, see the official &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;Mix &amp;amp; OTP guide&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;Mix documentation&lt;/a&gt;.</source>
          <target state="translated">プロジェクトの実行の詳細については、公式の&lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;Mix＆OTPガイド&lt;/a&gt;または&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;Mixのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="eff11d18fedd9846c96b5c225d02a932e7b86b50" translate="yes" xml:space="preserve">
          <source>For more information read the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Character_groups&quot;&gt;Character groups&lt;/a&gt; section in the Wikipedia article of the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; standard.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;標準のWikipediaの記事の「&lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Character_groups&quot;&gt;文字グループ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="5b003e6f0d5f3ad23f1b90e810d0b8f11ff3028f" translate="yes" xml:space="preserve">
          <source>For more information, check &lt;a href=&quot;https://hexdocs.pm/eex/EEx.SmartEngine.html&quot;&gt;&lt;code&gt;EEx.SmartEngine&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://hexdocs.pm/eex/EEx.SmartEngine.html&quot;&gt; &lt;code&gt;EEx.SmartEngine&lt;/code&gt; を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="c1311002c3a957f544a2fb2f22b854fa11815412" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#disconnect_node-1&quot;&gt;&lt;code&gt;:erlang.disconnect_node/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#disconnect_node-1&quot;&gt; &lt;code&gt;:erlang.disconnect_node/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0cd3be4a21a8ffdb5484f382332800faea93a58f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#halt-1&quot;&gt;&lt;code&gt;:erlang.halt/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#halt-1&quot;&gt; &lt;code&gt;:erlang.halt/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="48be8c3bec9fc07a6ce3cee60d8a8e670e70ad06" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-2&quot;&gt;&lt;code&gt;:erlang.monitor_node/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-2&quot;&gt; &lt;code&gt;:erlang.monitor_node/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cb3eefbbccd2c205683a61d85dab5af738a1f1d7" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-3&quot;&gt;&lt;code&gt;:erlang.monitor_node/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-3&quot;&gt; &lt;code&gt;:erlang.monitor_node/3&lt;/code&gt; &lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7c9d37564a53538860067ee2ce72a5278d51bbde" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#nodes-1&quot;&gt;&lt;code&gt;:erlang.nodes/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#nodes-1&quot;&gt; &lt;code&gt;:erlang.nodes/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2eb045622e309576ede0093587a78e27c6a80e60" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_close-1&quot;&gt;&lt;code&gt;:erlang.port_close/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_close-1&quot;&gt; &lt;code&gt;:erlang.port_close/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74569ddc9dafdb010b29df91efd894806768f74c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_command-2&quot;&gt;&lt;code&gt;:erlang.port_command/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_command-2&quot;&gt; &lt;code&gt;:erlang.port_command/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="db0e4c8249cd1b3c3788a38e7bf3c3b9d4b6ceab" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_connect-2&quot;&gt;&lt;code&gt;:erlang.port_connect/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_connect-2&quot;&gt; &lt;code&gt;:erlang.port_connect/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3ce86a1871484a9008f73d0c702d7521b667af6c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-1&quot;&gt;&lt;code&gt;:erlang.port_info/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-1&quot;&gt; &lt;code&gt;:erlang.port_info/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="80edbd442183f322a586734d8b1f7c8a23af48b7" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-2&quot;&gt;&lt;code&gt;:erlang.port_info/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-2&quot;&gt; &lt;code&gt;:erlang.port_info/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="82424b64f3a822c3b698f3418f074d1a59050668" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#connect_node-1&quot;&gt;&lt;code&gt;:net_kernel.connect_node/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#connect_node-1&quot;&gt; &lt;code&gt;:net_kernel.connect_node/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ef58581a2fb238d3165babba36ae1b31c20add22" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/os.html#getpid-0&quot;&gt;&lt;code&gt;:os.getpid/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/os.html#getpid-0&quot;&gt; &lt;code&gt;:os.getpid/0&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed8b5928b9cd599d88e9ffccabb9856023defc53" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#child_spec/2&quot;&gt;&lt;code&gt;Supervisor.child_spec/2&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#t:child_spec/0&quot;&gt;&lt;code&gt;Supervisor.child_spec/0&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュール、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#child_spec/2&quot;&gt; &lt;code&gt;Supervisor.child_spec/2&lt;/code&gt; &lt;/a&gt;関数、および&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#t:child_spec/0&quot;&gt; &lt;code&gt;Supervisor.child_spec/0&lt;/code&gt; &lt;/a&gt;タイプを参照してください。</target>
        </trans-unit>
        <trans-unit id="9ba2f8e0812ba8129e28893614e39bd76a33546b" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;supervisor#child_spec/2&quot;&gt;&lt;code&gt;Supervisor.child_spec/2&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;supervisor#t:child_spec/0&quot;&gt;&lt;code&gt;Supervisor.child_spec/0&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュール、&lt;a href=&quot;supervisor#child_spec/2&quot;&gt; &lt;code&gt;Supervisor.child_spec/2&lt;/code&gt; &lt;/a&gt;関数、および&lt;a href=&quot;supervisor#t:child_spec/0&quot;&gt; &lt;code&gt;Supervisor.child_spec/0&lt;/code&gt; &lt;/a&gt;タイプを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c2459bba39c2a32218e800abed73a1b40251809" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;git config&lt;/code&gt; documentation: &lt;a href=&quot;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&quot;&gt;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&lt;/a&gt;</source>
          <target state="translated">詳細については、 &lt;code&gt;git config&lt;/code&gt; のドキュメントを参照して&lt;a href=&quot;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&quot;&gt;ください&lt;/a&gt;：https：//git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf</target>
        </trans-unit>
        <trans-unit id="3d95ccf97994d2d052649c07b5320d1f38bf9f6a" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;git config&lt;/code&gt; documentation: https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf</source>
          <target state="translated">詳細については、 &lt;code&gt;git config&lt;/code&gt; ドキュメントを参照してください：https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf</target>
        </trans-unit>
        <trans-unit id="72d636c495936af4b6f2d13c4ec5f6492712b56a" translate="yes" xml:space="preserve">
          <source>For more options, keep an eye on the documentation for single Mix tasks; good examples are the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile&lt;/code&gt;&lt;/a&gt; task and all the specific compiler tasks (such as &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Elixir.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Erlang.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">その他のオプションについては、単一のMixタスクのドキュメントに注目してください。良い例は、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile&lt;/code&gt; &lt;/a&gt;タスクとすべての特定のコンパイラタスク（&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Elixir.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Erlang.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt; など&lt;/a&gt;）です。</target>
        </trans-unit>
        <trans-unit id="1db1a5e08950211f4efaa987901db5f4cb9b8017" translate="yes" xml:space="preserve">
          <source>For more options, keep an eye on the documentation for single Mix tasks; good examples are the &lt;a href=&quot;mix.tasks.compile&quot;&gt;&lt;code&gt;Mix.Tasks.Compile&lt;/code&gt;&lt;/a&gt; task and all the specific compiler tasks (such as &lt;a href=&quot;mix.tasks.compile.elixir&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;mix.tasks.compile.erlang&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">その他のオプションについては、単一のMixタスクのドキュメントに注意してください。良い例は、&lt;a href=&quot;mix.tasks.compile&quot;&gt; &lt;code&gt;Mix.Tasks.Compile&lt;/code&gt; &lt;/a&gt;タスクとすべての特定のコンパイラタスク（&lt;a href=&quot;mix.tasks.compile.elixir&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;mix.tasks.compile.erlang&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt; など&lt;/a&gt;）です。</target>
        </trans-unit>
        <trans-unit id="ab9291211cba201b17b9f64f55072345afbd7fc8" translate="yes" xml:space="preserve">
          <source>For most cases, use &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#now/2&quot;&gt;&lt;code&gt;DateTime.now/2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#utc_now/1&quot;&gt;&lt;code&gt;DateTime.utc_now/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">ほとんどの場合、使用&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#now/2&quot;&gt; &lt;code&gt;DateTime.now/2&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#utc_now/1&quot;&gt; &lt;code&gt;DateTime.utc_now/1&lt;/code&gt; を&lt;/a&gt;代わりに。</target>
        </trans-unit>
        <trans-unit id="df72e64eacb9e3850dc8419637a02be86b270033" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s move on and explore the world of I/O in Elixir.</source>
          <target state="translated">とりあえず、ElixirのI / Oの世界に進みましょう。</target>
        </trans-unit>
        <trans-unit id="9d92d262d1937649c7dcc6aa1826ed7218a816df" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s start by running &lt;code&gt;iex&lt;/code&gt; (or &lt;code&gt;iex.bat&lt;/code&gt; if you are on Windows PowerShell, where &lt;code&gt;iex&lt;/code&gt; is a PowerShell command) which stands for Interactive Elixir. In interactive mode, we can type any Elixir expression and get its result. Let&amp;rsquo;s warm up with some basic expressions.</source>
          <target state="translated">&lt;code&gt;iex.bat&lt;/code&gt; 、Interactive Elixirの略である &lt;code&gt;iex&lt;/code&gt; （またはWindows PowerShellを使用している場合は &lt;code&gt;iex&lt;/code&gt; .bat、iexはPowerShellコマンド）を実行することから始めましょう。インタラクティブモードでは、任意のElixir式を入力して、その結果を取得できます。基本的な表現でウォームアップしましょう。</target>
        </trans-unit>
        <trans-unit id="f53fcbcb4286cbc82f5367680ea1d01a64e91602" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s start by running &lt;code&gt;iex&lt;/code&gt; (or &lt;code&gt;iex.bat&lt;/code&gt; if you are on Windows) which stands for Interactive Elixir. In interactive mode, we can type any Elixir expression and get its result. Let&amp;rsquo;s warm up with some basic expressions.</source>
          <target state="translated">今のところ、Interactive Elixirを表す &lt;code&gt;iex&lt;/code&gt; （Windowsの場合は &lt;code&gt;iex.bat&lt;/code&gt; ）を実行することから始めましょう。インタラクティブモードでは、任意のElixir式を入力してその結果を取得できます。基本的な表現でウォームアップしましょう。</target>
        </trans-unit>
        <trans-unit id="8f7af079e462a2a151d8084f9a25584ba5fdb2e5" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s write some tests to guarantee our GenServer works as expected.</source>
          <target state="translated">とりあえず、GenServerが期待どおりに動作することを保証するためのテストを書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="148e18f793d17b1f034ccd4f65b51bd7c72b46fe" translate="yes" xml:space="preserve">
          <source>For now, there is a more important bug we need to fix: what happens if our TCP acceptor crashes? Since there is no supervision, the server dies and we won&amp;rsquo;t be able to serve more requests, because it won&amp;rsquo;t be restarted. That&amp;rsquo;s why we must move our server to a supervision tree.</source>
          <target state="translated">とりあえず、修正する必要のあるより重要なバグがあります。TCPアクセプターがクラッシュするとどうなりますか？監視機能がないため、サーバーが停止し、再起動されないため、これ以上リクエストを処理できなくなります。そのため、サーバーを監視ツリーに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="87f6316211bcc19e1a9eaf598a9dc404f5c35c3f" translate="yes" xml:space="preserve">
          <source>For now, we don&amp;rsquo;t have a mechanism to run tests, but we know that a function named &amp;ldquo;test hello&amp;rdquo; was defined behind the scenes. When we invoke it, it should fail:</source>
          <target state="translated">現時点では、テストを実行するメカニズムはありませんが、「test hello」という名前の関数がバックグラウンドで定義されていることがわかっています。これを呼び出すと、失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="c1b2f8891476cbc97734acacb2637f18c16dc0b0" translate="yes" xml:space="preserve">
          <source>For now, we will write only the server callbacks for our bucket registering logic, without providing a proper API, which we will do later.</source>
          <target state="translated">今のところ、適切な API を提供することなく、バケット登録ロジックのためのサーバーコールバックのみを記述します。</target>
        </trans-unit>
        <trans-unit id="dc972a5ae988c88cbdf8abf55ced2fc62781c361" translate="yes" xml:space="preserve">
          <source>For other nodes in the network, this is the same as the node going down. Only possible when the node was started with &lt;a href=&quot;#start/3&quot;&gt;&lt;code&gt;Node.start/3&lt;/code&gt;&lt;/a&gt;, otherwise returns &lt;code&gt;{:error, :not_allowed}&lt;/code&gt;. Returns &lt;code&gt;{:error, :not_found}&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">ネットワーク内の他のノードの場合、これはノードがダウンするのと同じです。ノードが&lt;a href=&quot;#start/3&quot;&gt; &lt;code&gt;Node.start/3&lt;/code&gt; &lt;/a&gt;で開始された場合にのみ可能であり、それ以外の場合は &lt;code&gt;{:error, :not_allowed}&lt;/code&gt; 返します。ローカルノードが生きていない場合は &lt;code&gt;{:error, :not_found}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="cdf1e2badff2fb623eee0d15afc921e9e14a706d" translate="yes" xml:space="preserve">
          <source>For other nodes in the network, this is the same as the node going down. Only possible when the node was started with &lt;a href=&quot;node#start/3&quot;&gt;&lt;code&gt;Node.start/3&lt;/code&gt;&lt;/a&gt;, otherwise returns &lt;code&gt;{:error, :not_allowed}&lt;/code&gt;. Returns &lt;code&gt;{:error, :not_found}&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">ネットワーク内の他のノードの場合、これはダウンしたノードと同じです。ノードが&lt;a href=&quot;node#start/3&quot;&gt; &lt;code&gt;Node.start/3&lt;/code&gt; &lt;/a&gt;で起動された場合のみ可能です。それ以外の場合は &lt;code&gt;{:error, :not_allowed}&lt;/code&gt; 返します。ローカルノードが &lt;code&gt;{:error, :not_found}&lt;/code&gt; でない場合は、{：error、：not_found}を返します。</target>
        </trans-unit>
        <trans-unit id="6dc55533805b090f117cb41ae2a4faf8a8f47746" translate="yes" xml:space="preserve">
          <source>For our routing layer, we are going to use tasks, but feel free to explore the other alternatives too.</source>
          <target state="translated">ルーティングレイヤーでは、タスクを使用しますが、他の選択肢も自由に検討してください。</target>
        </trans-unit>
        <trans-unit id="40e9bcfd5323b3ba76bb77edb0dbd378b076a7c8" translate="yes" xml:space="preserve">
          <source>For qualified calls, Elixir also allows the function name to be written between double- or single-quotes, allowing calls such as &lt;code&gt;Math.&quot;++add++&quot;(1, 2)&lt;/code&gt;. Operators can be used as qualified calls without a need for quote, such as &lt;code&gt;Kernel.+(1, 2)&lt;/code&gt;.</source>
          <target state="translated">修飾された呼び出しの場合、Elixirは二重引用符または単一引用符の間に関数名を書き込むこともでき、 &lt;code&gt;Math.&quot;++add++&quot;(1, 2)&lt;/code&gt; などの呼び出しを許可します。演算子は、 &lt;code&gt;Kernel.+(1, 2)&lt;/code&gt; ように、引用符を必要とせずに修飾呼び出しとして使用できます。</target>
        </trans-unit>
        <trans-unit id="42f87f4978894da77ca58ac8711d1cc43114d9dc" translate="yes" xml:space="preserve">
          <source>For reference information about operators (and ordering), check the &lt;a href=&quot;https://hexdocs.pm/elixir/operators.html&quot;&gt;reference page on operators&lt;/a&gt;.</source>
          <target state="translated">演算子（および順序）のリファレンス情報については、演算子の&lt;a href=&quot;https://hexdocs.pm/elixir/operators.html&quot;&gt;リファレンスページを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="45c16b662757456a064165b8b1b3ab76da91cf9d" translate="yes" xml:space="preserve">
          <source>For runtime configuration, you can use the &lt;code&gt;config/runtime.exs&lt;/code&gt; file. It is executed right before applications start in both Mix and releases (assembled with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">ランタイム構成には、 &lt;code&gt;config/runtime.exs&lt;/code&gt; ファイルを使用できます。ミックスとリリースの両方でアプリケーションが起動する直前に実行されます（&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;アセンブルされます）。</target>
        </trans-unit>
        <trans-unit id="cf040e76c44787262309528d14284c46bf630986" translate="yes" xml:space="preserve">
          <source>For selecting a maximum value out of two consider using &lt;a href=&quot;kernel#max/2&quot;&gt;&lt;code&gt;Kernel.max/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2つの中から最大値を選択するには、&lt;a href=&quot;kernel#max/2&quot;&gt; &lt;code&gt;Kernel.max/2&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="1562be9dbea9e9ca6fb9c201080d343b056ee54f" translate="yes" xml:space="preserve">
          <source>For selecting a minimal value out of two consider using &lt;a href=&quot;kernel#min/2&quot;&gt;&lt;code&gt;Kernel.min/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2つの中から最小値を選択するには、&lt;a href=&quot;kernel#min/2&quot;&gt; &lt;code&gt;Kernel.min/2&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="a4f8060b8066310c46625a879a6c7a04a6546c32" translate="yes" xml:space="preserve">
          <source>For simplicity, we will define a routing table that always points to the current node. That&amp;rsquo;s the table we will use for development and most of our tests. Back in &lt;code&gt;config/config.exs&lt;/code&gt;, add this line:</source>
          <target state="translated">簡単にするために、常に現在のノードを指すルーティングテーブルを定義します。これが、開発とほとんどのテストに使用するテーブルです。バックで &lt;code&gt;config/config.exs&lt;/code&gt; 、次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="57260814a626a0bc7ec7efb7558c4019fed8ea33" translate="yes" xml:space="preserve">
          <source>For such cases, there is a special break-trigger (&lt;code&gt;#iex:break&lt;/code&gt;) that when encountered on a line by itself will force the shell to break out of any pending expression and return to its normal state:</source>
          <target state="translated">このような場合のために、特別なブレークトリガー（ &lt;code&gt;#iex:break&lt;/code&gt; ）があり、それ自体が行で検出されると、シェルは保留中の式から抜け出して通常の状態に戻ります。</target>
        </trans-unit>
        <trans-unit id="b2bcf831b712f7880bfa8b2d774584d0dac9e8fa" translate="yes" xml:space="preserve">
          <source>For such, you can explicitly pass the current module scope as argument:</source>
          <target state="translated">そのためには、引数に現在のモジュールスコープを明示的に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f5574a61794819cd12b11f08763b8c0faad5bbf7" translate="yes" xml:space="preserve">
          <source>For the actual date, time and datetime structures, see &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際の日付、時刻、および日時構造については、&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b01361fded820f92aa3d34dea84f82e83756a312" translate="yes" xml:space="preserve">
          <source>For the actual date, time and datetime structures, see &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際の日付、時刻、および日時の構造については、&lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dd4507d56d8ae26835032192a96f8f942cf347e1" translate="yes" xml:space="preserve">
          <source>For the cases where you do expect a file to exist (and the lack of that file is truly an &lt;em&gt;error&lt;/em&gt;) you may use &lt;code&gt;File.read!/1&lt;/code&gt;:</source>
          <target state="translated">ファイルが存在することが予想される場合（およびそのファイルの欠如が本当に&lt;em&gt;エラーである場合&lt;/em&gt;）は、 &lt;code&gt;File.read!/1&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="feff331a64ed11f441e7848a674afa89ee8071f6" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-2&quot;&gt;&lt;code&gt;:erlang.spawn/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用可能なオプションのリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-2&quot;&gt; &lt;code&gt;:erlang.spawn/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6639a98f71e3255b9d9416659477b36d9f9e63f9" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-4&quot;&gt;&lt;code&gt;:erlang.spawn/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用可能なオプションのリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-4&quot;&gt; &lt;code&gt;:erlang.spawn/4&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d102dfda15fab2a12aecfca86ecdab6b9328f4c7" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-5&quot;&gt;&lt;code&gt;:erlang.spawn/5&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用可能なオプションのリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-5&quot;&gt; &lt;code&gt;:erlang.spawn/5&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="147c5308097c95403b6c3b710471092817aba390" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn_opt-3&quot;&gt;&lt;code&gt;:erlang.spawn_opt/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用可能なオプションのリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn_opt-3&quot;&gt; &lt;code&gt;:erlang.spawn_opt/3&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad4e9a7fc7900bbb60654000287c4ad75fc0eadd" translate="yes" xml:space="preserve">
          <source>For the list of supported warnings, see &lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt;&lt;code&gt;:dialyzer&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">サポートされている警告のリストについては、&lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt; &lt;code&gt;:dialyzer&lt;/code&gt; moduleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a293fce2f70fe18d9d7bb3411509a1883ca74c72" translate="yes" xml:space="preserve">
          <source>For this chapter, we will be using files instead of running code samples in IEx. That&amp;rsquo;s because the code samples will span multiple lines of code and typing them all in IEx can be counter-productive. You should be able to run the code samples by saving them into a &lt;code&gt;macros.exs&lt;/code&gt; file and running it with &lt;code&gt;elixir macros.exs&lt;/code&gt; or &lt;code&gt;iex macros.exs&lt;/code&gt;.</source>
          <target state="translated">この章では、IExでコードサンプルを実行する代わりにファイルを使用します。これは、コードサンプルが複数行のコードにまたがっており、それらすべてをIExに入力すると逆効果になる可能性があるためです。サンプルコードを &lt;code&gt;macros.exs&lt;/code&gt; ファイルに保存し、 &lt;code&gt;elixir macros.exs&lt;/code&gt; または &lt;code&gt;iex macros.exs&lt;/code&gt; で実行することで、コードサンプルを実行できるはずです。</target>
        </trans-unit>
        <trans-unit id="467f37cafc343b5dd34e43c5cc0cac653196e6ee" translate="yes" xml:space="preserve">
          <source>For this reason, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; supports partitioning the test files across different Elixir instances. This is done by setting the &lt;code&gt;--partitions&lt;/code&gt; option to an integer, with the number of partitions, and setting the &lt;code&gt;MIX_TEST_PARTITION&lt;/code&gt; environment variable to control which test partition that particular instance is running. This can also be useful if you want to distribute testing across multiple machines.</source>
          <target state="translated">このため、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;は、異なるElixirインスタンス間でのテストファイルのパーティション分割をサポートしています。これを行うには、 &lt;code&gt;--partitions&lt;/code&gt; オプションをパーティションの数を含む整数に設定し、 &lt;code&gt;MIX_TEST_PARTITION&lt;/code&gt; 環境変数を設定して、その特定のインスタンスが実行されているテストパーティションを制御します。これは、テストを複数のマシンに分散する場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="945a8597b683042909912d13ab0af0f05f4a1912" translate="yes" xml:space="preserve">
          <source>For this reason, Mix also provides an &lt;code&gt;--only&lt;/code&gt; option that excludes all tests and includes only the given ones:</source>
          <target state="translated">このため、Mixには、すべてのテストを除外し、指定されたテストのみを含める &lt;code&gt;--only&lt;/code&gt; オプションも用意されています。</target>
        </trans-unit>
        <trans-unit id="5942291bf8303552448ccf23f92c1cc85a264e74" translate="yes" xml:space="preserve">
          <source>For this reason, Mix supports &amp;ldquo;umbrella projects&amp;rdquo;. Umbrella projects are used to build applications that run together in a single repository. That is exactly the style we are going to explore in the next sections.</source>
          <target state="translated">このため、Mixは「傘プロジェクト」をサポートしています。Umbrellaプロジェクトは、単一のリポジトリで一緒に実行されるアプリケーションを構築するために使用されます。これは、次のセクションで説明するスタイルとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="c1c939e13c6bbd8a4d4a1a8b54e616c8009ed164" translate="yes" xml:space="preserve">
          <source>For this reason, most structs provide a &quot;compare&quot; function, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#compare/2&quot;&gt;&lt;code&gt;Date.compare/2&lt;/code&gt;&lt;/a&gt;, which receives two structs and returns &lt;code&gt;:lt&lt;/code&gt; (less-than), &lt;code&gt;:eq&lt;/code&gt; (equal to), and &lt;code&gt;:gt&lt;/code&gt; (greater-than). If you pass a module as the sorting function, Elixir will automatically use the &lt;code&gt;compare/2&lt;/code&gt; function of said module:</source>
          <target state="translated">このため、ほとんどの構造体は、&lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#compare/2&quot;&gt; &lt;code&gt;Date.compare/2&lt;/code&gt; &lt;/a&gt; / 2などの「比較」関数を提供します。この関数は、2つの構造体を受け取り、 &lt;code&gt;:lt&lt;/code&gt; （より小さい）、： &lt;code&gt;:eq&lt;/code&gt; （等しい）、および &lt;code&gt;:gt&lt;/code&gt; （より大きい）を返します。。モジュールを並べ替え関数として渡すと、Elixirはそのモジュールの &lt;code&gt;compare/2&lt;/code&gt; 関数を自動的に使用します。</target>
        </trans-unit>
        <trans-unit id="db439eca1a575baf9e479914a743abe4e55ae0ad" translate="yes" xml:space="preserve">
          <source>For this reason, the task touches your &lt;code&gt;:compile_path&lt;/code&gt; directory and sets the modification time to the current time and date at the end of each compilation. You can force compilation regardless of modification times by passing the &lt;code&gt;--force&lt;/code&gt; option.</source>
          <target state="translated">このため、タスクは &lt;code&gt;:compile_path&lt;/code&gt; ディレクトリにアクセスし、各コンパイルの最後に変更時刻を現在の日時に設定します。 &lt;code&gt;--force&lt;/code&gt; オプションを渡すことで、変更時刻に関係なくコンパイルを強制できます。</target>
        </trans-unit>
        <trans-unit id="32446efaffd01773633a5c5b128367d85e1cc28b" translate="yes" xml:space="preserve">
          <source>For those reasons, reading the application environment at runtime should be the first choice. However, if you really have to read the application environment during compilation, we recommend you to use &lt;a href=&quot;#compile_env/3&quot;&gt;&lt;code&gt;compile_env/3&lt;/code&gt;&lt;/a&gt; instead:</source>
          <target state="translated">これらの理由から、実行時にアプリケーション環境を読み取ることが最初の選択肢になるはずです。ただし、コンパイル中に本当にアプリケーション環境を読み取る必要がある場合は、代わりに&lt;a href=&quot;#compile_env/3&quot;&gt; &lt;code&gt;compile_env/3&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c4c8e038c25d83bf6d852a971892fb340f9e2eff" translate="yes" xml:space="preserve">
          <source>For those who enjoy breakpoints but are rather interested in a visual debugger, Erlang/OTP ships with a graphical debugger conveniently named &lt;code&gt;:debugger&lt;/code&gt;. Let&amp;rsquo;s define a module in a file named &lt;code&gt;example.ex&lt;/code&gt;:</source>
          <target state="translated">ブレークポイントを楽しんでいるがビジュアルデバッガーに興味がある人のために、Erlang / OTPには便利な名前のグラフィカルデバッガーが付属しています &lt;code&gt;:debugger&lt;/code&gt; 。 &lt;code&gt;example.ex&lt;/code&gt; という名前のファイルでモジュールを定義しましょう：</target>
        </trans-unit>
        <trans-unit id="cfae34045d5d895009311d2a2a010463848d8c45" translate="yes" xml:space="preserve">
          <source>For those who enjoy breakpoints but are rather interested in a visual debugger, Erlang/OTP ships with a graphical debugger conveniently named &lt;code&gt;:debugger&lt;/code&gt;. Let&amp;rsquo;s define a module:</source>
          <target state="translated">ブレークポイントを楽しんでいるが、ビジュアルデバッガに興味がある人のために、Erlang / OTPには、便利な &lt;code&gt;:debugger&lt;/code&gt; という名前のグラフィカルデバッガが同梱されています。モジュールを定義しましょう：</target>
        </trans-unit>
        <trans-unit id="bc2d3f32f1c4138eee3831b35b324f9d5504e4b5" translate="yes" xml:space="preserve">
          <source>For unique registries it can be used to conditionally unregister a key on the basis of whether or not it matches a particular value.</source>
          <target state="translated">一意の登録に対しては、特定の値に一致するかどうかに基づいて、条件付きでキーの登録を解除するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="14cd0b7637eff1b0c6bd870cfbdfa9301754b7b7" translate="yes" xml:space="preserve">
          <source>For unique registries, a single partition lookup is necessary. For duplicate registries, all partitions must be looked up.</source>
          <target state="translated">固有のレジストリの場合は、単一のパーティションのルックアップが必要です。重複するレジストリの場合は、すべてのパーティションを検索する必要があります。</target>
        </trans-unit>
        <trans-unit id="a33570d2441921e7831b3c41af0473896917c621" translate="yes" xml:space="preserve">
          <source>For unique registries:</source>
          <target state="translated">ユニークなレジストリのために。</target>
        </trans-unit>
        <trans-unit id="a494479b1595316138e63803f01b27c1d049ecb0" translate="yes" xml:space="preserve">
          <source>For variables, any identifier starting with an underscore should indicate an unused variable. For example:</source>
          <target state="translated">変数の場合、アンダースコアで始まる識別子は、使用されていない変数を示します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c93842334df0e58537ff9e4564650c5a06d71f1b" translate="yes" xml:space="preserve">
          <source>Forces the current group to be unfit.</source>
          <target state="translated">現在のグループを強制的に不適合にする。</target>
        </trans-unit>
        <trans-unit id="c5bf5789dde7373724874c65a12c156bc9c3ab1f" translate="yes" xml:space="preserve">
          <source>Forces the disconnection of a node.</source>
          <target state="translated">ノードを強制的に切断します。</target>
        </trans-unit>
        <trans-unit id="815a28d19a43ab21cf99300b9b2fd43fa459fe43" translate="yes" xml:space="preserve">
          <source>Forces the path to be a relative path.</source>
          <target state="translated">パスを強制的に相対パスにします。</target>
        </trans-unit>
        <trans-unit id="0a683f099c5cd32d972be2f3a92f5a845ceb5fd5" translate="yes" xml:space="preserve">
          <source>Foreword</source>
          <target state="translated">Foreword</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="5c35ec0ad733522cc571cfec85232066d155794d" translate="yes" xml:space="preserve">
          <source>Formats a chardata-like argument by converting named ANSI sequences into actual ANSI codes.</source>
          <target state="translated">名前付きANSIシーケンスを実際のANSIコードに変換することで、chardataのような引数をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="2207193e5d684c4dc9f415ae14757dea81eca345" translate="yes" xml:space="preserve">
          <source>Formats a file.</source>
          <target state="translated">ファイルをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="cafa245a564712637537f38b69c740ea4dde1a5f" translate="yes" xml:space="preserve">
          <source>Formats a given document for a given width.</source>
          <target state="translated">指定された幅のドキュメントをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="8dfa3afe7b66a75ca4db90cdffb1c56ec5f2cef4" translate="yes" xml:space="preserve">
          <source>Formats an exit. It returns a string.</source>
          <target state="translated">終了時の書式設定を行います。文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6efb90c18f18ca530ad6f75b186ea9a0dab0abb7" translate="yes" xml:space="preserve">
          <source>Formats and truncates messages on the client to avoid clogging &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; backends.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;バックエンドの詰まりを回避するために、クライアント上のメッセージをフォーマットして切り捨てます。</target>
        </trans-unit>
        <trans-unit id="56622496774bb19434d2ebee47141c996a87f22d" translate="yes" xml:space="preserve">
          <source>Formats date as chardata.</source>
          <target state="translated">日付を chardata でフォーマットします。</target>
        </trans-unit>
        <trans-unit id="027d7a70820717a59658836a98131d6522ec7975" translate="yes" xml:space="preserve">
          <source>Formats filters used to constrain cases to be run.</source>
          <target state="translated">実行されるケースを制約するために使用されるフィルタをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="8c5df1d8fe3d3f335538a7bdda896042d42452a8" translate="yes" xml:space="preserve">
          <source>Formats received datetime into a string.</source>
          <target state="translated">受信したdatetimeを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="aa53a753f568d1640d41923f79bf478cc8554997" translate="yes" xml:space="preserve">
          <source>Formats the error reason returned by &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ensure_started/2&quot;&gt;&lt;code&gt;ensure_started/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#load/1&quot;&gt;&lt;code&gt;load/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unload/1&quot;&gt;&lt;code&gt;unload/1&lt;/code&gt;&lt;/a&gt;, returns a string.</source>
          <target state="translated">&lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ensure_started/2&quot;&gt; &lt;code&gt;ensure_started/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#load/1&quot;&gt; &lt;code&gt;load/1&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#unload/1&quot;&gt; &lt;code&gt;unload/1&lt;/code&gt; &lt;/a&gt;によって返されるエラー理由をフォーマットし、文字列を返します。</target>
        </trans-unit>
        <trans-unit id="e18bb89882580c7f86301b123f406d45a0f80a81" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt; as shown in stacktraces.</source>
          <target state="translated">スタックトレースに示されているように、指定された &lt;code&gt;file&lt;/code&gt; と &lt;code&gt;line&lt;/code&gt; をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="7f7ec50c392208c557864813c0cfdc9b2645d9c5" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt; as shown in stacktraces. If any of the values are &lt;code&gt;nil&lt;/code&gt;, they are omitted.</source>
          <target state="translated">スタックトレースに示されているように、指定された &lt;code&gt;file&lt;/code&gt; と &lt;code&gt;line&lt;/code&gt; をフォーマットします。いずれかの値が &lt;code&gt;nil&lt;/code&gt; の場合、それらは省略されます。</target>
        </trans-unit>
        <trans-unit id="aa90b5e3e8aaedcbfa1f49413d30ef681c6976ab" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;column&lt;/code&gt; as shown in stacktraces.</source>
          <target state="translated">スタックトレースに示されているように、指定された &lt;code&gt;file&lt;/code&gt; 、 &lt;code&gt;line&lt;/code&gt; 、および &lt;code&gt;column&lt;/code&gt; をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="43daea1857449413e5d2961950390283bfbd89a9" translate="yes" xml:space="preserve">
          <source>Formats the given code &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">指定されたコード &lt;code&gt;string&lt;/code&gt; フォーマットします。</target>
        </trans-unit>
        <trans-unit id="4e9ff0af2c46ca0408f0eb37c63e3365599d3452" translate="yes" xml:space="preserve">
          <source>Formats the given files and patterns.</source>
          <target state="translated">与えられたファイルとパターンをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="60cbeba6574b12f984495c88bbbacdd53f31a94a" translate="yes" xml:space="preserve">
          <source>Formats the location for &lt;a href=&quot;#whereami/3&quot;&gt;&lt;code&gt;whereami/3&lt;/code&gt;&lt;/a&gt; prying.</source>
          <target state="translated">&lt;a href=&quot;#whereami/3&quot;&gt; &lt;code&gt;whereami/3&lt;/code&gt; の&lt;/a&gt;詮索好きな場所をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="095114a79701908ee2dfdcd7beb556b92bb7fa82" translate="yes" xml:space="preserve">
          <source>Formats the stacktrace.</source>
          <target state="translated">スタックトレースをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="bc17a3e28e6db9da82c06d3e64dd8f9133ab1362" translate="yes" xml:space="preserve">
          <source>Formats time as chardata.</source>
          <target state="translated">時間をカルダータとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="5fe0bd39dac4ab949c5775de27530dde1ae6b8b7" translate="yes" xml:space="preserve">
          <source>Formats time taken running the test suite.</source>
          <target state="translated">テストスイートを実行している時間をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="15bac6318ac5108c02b6ce4ab557e2ea1f9cdf7e" translate="yes" xml:space="preserve">
          <source>Formatted text output</source>
          <target state="translated">フォーマットされたテキスト出力</target>
        </trans-unit>
        <trans-unit id="c66bee8a4119b5327ef887f4d0279de0d7aa74f7" translate="yes" xml:space="preserve">
          <source>Formatters are &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;s specified during ExUnit configuration that receive a series of events as casts.</source>
          <target state="translated">フォーマッタは&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;キャストなどの一連のイベントを受け取るExUnit構成時に指定した秒。</target>
        </trans-unit>
        <trans-unit id="c4eab01558e7f8dfc62c9bd7e738281bda6c0c43" translate="yes" xml:space="preserve">
          <source>Formatting options</source>
          <target state="translated">書式設定オプション</target>
        </trans-unit>
        <trans-unit id="d313dfa968201dd94ad67d87fc3344bb38c0890c" translate="yes" xml:space="preserve">
          <source>Formatting syntax</source>
          <target state="translated">書式化構文</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="8b2cd2532672c31ff20ceae8b0d526cd937086f0" translate="yes" xml:space="preserve">
          <source>Forwards the error to the current process.</source>
          <target state="translated">エラーを現在のプロセスに転送します。</target>
        </trans-unit>
        <trans-unit id="9fdf06a3445d03e7647fe9c67a18a17eb8735986" translate="yes" xml:space="preserve">
          <source>Forwards the message to the current process.</source>
          <target state="translated">メッセージを現在のプロセスに転送します。</target>
        </trans-unit>
        <trans-unit id="39a119adde6f197e8aa3e8c2dbd49285e486f01b" translate="yes" xml:space="preserve">
          <source>Fractional second precision stays the same in a similar way to &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#add/2&quot;&gt;&lt;code&gt;NaiveDateTime.add/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#add/2&quot;&gt; &lt;code&gt;NaiveDateTime.add/2&lt;/code&gt; &lt;/a&gt;2番目の精度は、NaiveDateTime.add / 2と同様の方法で同じままです。</target>
        </trans-unit>
        <trans-unit id="addaa186164be6af6cfe3af8285a06cb4198e95d" translate="yes" xml:space="preserve">
          <source>Fractional second precision stays the same in a similar way to &lt;a href=&quot;naivedatetime#add/2&quot;&gt;&lt;code&gt;NaiveDateTime.add/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">小数秒の精度は、&lt;a href=&quot;naivedatetime#add/2&quot;&gt; &lt;code&gt;NaiveDateTime.add/2&lt;/code&gt; &lt;/a&gt;と同様に同じままです。</target>
        </trans-unit>
        <trans-unit id="4802179f7c5db9ab1d4360e530bc8c507bf436cc" translate="yes" xml:space="preserve">
          <source>Framed.</source>
          <target state="translated">Framed.</target>
        </trans-unit>
        <trans-unit id="61df51b01c40ba0a9247aa6363331261830b3b95" translate="yes" xml:space="preserve">
          <source>From Elixir v1.10, Elixir's Logger is fully integrated with Erlang's logger. They share the same &lt;a href=&quot;#level/0&quot;&gt;&lt;code&gt;Logger.level/0&lt;/code&gt;&lt;/a&gt;, any metadata set with &lt;a href=&quot;#metadata/1&quot;&gt;&lt;code&gt;Logger.metadata/1&lt;/code&gt;&lt;/a&gt; applies to both, and so on.</source>
          <target state="translated">Elixir v1.10以降、ElixirのロガーはErlangのロガーと完全に統合されています。それらは同じ&lt;a href=&quot;#level/0&quot;&gt; &lt;code&gt;Logger.level/0&lt;/code&gt; &lt;/a&gt;を共有し、&lt;a href=&quot;#metadata/1&quot;&gt; &lt;code&gt;Logger.metadata/1&lt;/code&gt; で&lt;/a&gt;設定されたメタデータは両方に適用されます。</target>
        </trans-unit>
        <trans-unit id="37cd4097eb3a24362095532952b9b30616bd33e9" translate="yes" xml:space="preserve">
          <source>From Elixir v1.2, it is possible to alias, import or require multiple modules at once. This is particularly useful once we start nesting modules, which is very common when building Elixir applications. For example, imagine you have an application where all modules are nested under &lt;code&gt;MyApp&lt;/code&gt;, you can alias the modules &lt;code&gt;MyApp.Foo&lt;/code&gt;, &lt;code&gt;MyApp.Bar&lt;/code&gt; and &lt;code&gt;MyApp.Baz&lt;/code&gt; at once as follows:</source>
          <target state="translated">Elixir v1.2から、複数のモジュールを一度にエイリアス、インポート、または要求することが可能です。これは、モジュールのネストを開始すると特に役立ちます。これは、Elixirアプリケーションの構築時に非常に一般的です。たとえば、すべてのモジュールが &lt;code&gt;MyApp&lt;/code&gt; の下にネストされているアプリケーションがある場合、次のように、モジュール &lt;code&gt;MyApp.Foo&lt;/code&gt; 、 &lt;code&gt;MyApp.Bar&lt;/code&gt; 、および &lt;code&gt;MyApp.Baz&lt;/code&gt; を一度にエイリアスできます。</target>
        </trans-unit>
        <trans-unit id="5f129d8dac3eb2b485d35cfaa8fcb065c8677f2f" translate="yes" xml:space="preserve">
          <source>From Elixir v1.2, protocol consolidation happens automatically for all projects. We will build our own project in the &lt;strong&gt;&lt;em&gt;Mix and OTP guide&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">Elixir v1.2以降、すべてのプロジェクトでプロトコルの統合が自動的に行われます。&lt;strong&gt;&lt;em&gt;MixとOTPガイド&lt;/em&gt;&lt;/strong&gt;で独自のプロジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="a9cab3793941ece60ffc8a0b775c34f6a348677a" translate="yes" xml:space="preserve">
          <source>From Erlang/OTP 21, &lt;code&gt;:handle_sasl_reports&lt;/code&gt; only has an effect if &lt;code&gt;:handle_otp_reports&lt;/code&gt; is true.</source>
          <target state="translated">Erlang / OTP 21以降、 &lt;code&gt;:handle_sasl_reports&lt;/code&gt; は、 &lt;code&gt;:handle_otp_reports&lt;/code&gt; がtrueの場合にのみ効果があります。</target>
        </trans-unit>
        <trans-unit id="1b5ac9d2f1ffaa0f16939a6691b3606f6f5495e8" translate="yes" xml:space="preserve">
          <source>From inside &lt;code&gt;bar@computer-name&lt;/code&gt;, we can now spawn a task directly on the other node via the supervisor:</source>
          <target state="translated">&lt;code&gt;bar@computer-name&lt;/code&gt; 内部から、スーパーバイザーを介して他のノードに直接タスクを生成できます。</target>
        </trans-unit>
        <trans-unit id="cee07fcd21c8e4081421ab00fc5d8c03d08b554f" translate="yes" xml:space="preserve">
          <source>From now on, ExUnit will not run any test that has the &lt;code&gt;:external&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. This behaviour can be reversed with the &lt;code&gt;:include&lt;/code&gt; option which is usually passed through the command line:</source>
          <target state="translated">今後、ExUnitは &lt;code&gt;:external&lt;/code&gt; オプションが &lt;code&gt;true&lt;/code&gt; に設定されているテストを実行しなくなります。この動作は、通常はコマンドラインから渡さ &lt;code&gt;:include&lt;/code&gt; オプションで元に戻すことができます。</target>
        </trans-unit>
        <trans-unit id="3c26276a10f65beef569c18570dfcc2f42f56636" translate="yes" xml:space="preserve">
          <source>From now on, we will be using the term &quot;event handler&quot; to refer to your custom backend, as we head into implementation details.</source>
          <target state="translated">今後は、実装の詳細を見ながら、カスタムバックエンドを参照するために「イベントハンドラ」という用語を使うことにします。</target>
        </trans-unit>
        <trans-unit id="938617f06857d43f6a085cfd6bce09c1655cac4a" translate="yes" xml:space="preserve">
          <source>From our quick exploration, we could conclude that we should use &lt;code&gt;Node.spawn_link/2&lt;/code&gt; to spawn processes on a remote node every time we need to do a distributed computation. However, we have learned throughout this guide that spawning processes outside of supervision trees should be avoided if possible, so we need to look for other options.</source>
          <target state="translated">簡単な調査から、分散計算を実行する必要があるたびに、 &lt;code&gt;Node.spawn_link/2&lt;/code&gt; を使用してリモートノードにプロセスを生成する必要があると結論付けることができます。ただし、このガイド全体を通して、可能な場合は監視ツリーの外でのプロセスの生成を回避する必要があることを学習したため、他のオプションを探す必要があります。</target>
        </trans-unit>
        <trans-unit id="4db16168eb1bd7c62518bc09890c1b7ba6baa6ce" translate="yes" xml:space="preserve">
          <source>From the printed information, we can see far fewer files are generated. The generated &lt;code&gt;mix.exs&lt;/code&gt; file is different too. Let&amp;rsquo;s take a look (comments have been removed):</source>
          <target state="translated">印刷された情報から、生成されるファイルがはるかに少ないことがわかります。生成された &lt;code&gt;mix.exs&lt;/code&gt; ファイルも異なります。見てみましょう（コメントは削除されました）：</target>
        </trans-unit>
        <trans-unit id="d86c7074fa10260d3d9ae0cadb6b7bff099b2b69" translate="yes" xml:space="preserve">
          <source>Full month name</source>
          <target state="translated">完全な月名</target>
        </trans-unit>
        <trans-unit id="2298064d1fda3e808dc04798e3aef0bd717a3cbf" translate="yes" xml:space="preserve">
          <source>Full name of day</source>
          <target state="translated">日のフルネーム</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="8e40024a6b83dbe7056d1e4a40db12942b440d4e" translate="yes" xml:space="preserve">
          <source>Function Arguments</source>
          <target state="translated">関数の引数</target>
        </trans-unit>
        <trans-unit id="bc1254dc5150511a2a061bfd2a8e778f130ed9a6" translate="yes" xml:space="preserve">
          <source>Function and variable names</source>
          <target state="translated">関数名と変数名</target>
        </trans-unit>
        <trans-unit id="83ade9ad4e94b4c5006286b88e8447b8a91c444a" translate="yes" xml:space="preserve">
          <source>Function and variable names have the following syntax: A &lt;em&gt;lowercase ASCII letter&lt;/em&gt; or an &lt;em&gt;underscore&lt;/em&gt;, followed by any number of &lt;em&gt;lowercase or uppercase ASCII letters&lt;/em&gt;, &lt;em&gt;numbers&lt;/em&gt;, or &lt;em&gt;underscores&lt;/em&gt;. Optionally they can end in either an &lt;em&gt;exclamation mark&lt;/em&gt; or a &lt;em&gt;question mark&lt;/em&gt;.</source>
          <target state="translated">関数と変数の名前の構文は次のとおりです。&lt;em&gt;小文字のASCII文字&lt;/em&gt;または&lt;em&gt;アンダースコア&lt;/em&gt;、その後に任意の数の&lt;em&gt;小文字または大文字のASCII文字&lt;/em&gt;、&lt;em&gt;数字&lt;/em&gt;、または&lt;em&gt;アンダー&lt;/em&gt;&lt;em&gt;スコア&lt;/em&gt;が続き&lt;em&gt;ます&lt;/em&gt;。必要に応じて、彼らはいずれかで終わることができ&lt;em&gt;感嘆符&lt;/em&gt;や&lt;em&gt;疑問符&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="317d75f3496ca96594673f20ba1da34b938abdcd" translate="yes" xml:space="preserve">
          <source>Function bodies support &lt;code&gt;rescue&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; as &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#try/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt;&lt;/a&gt; does (known as &quot;implicit try&quot;). For example, the following two functions are equivalent:</source>
          <target state="translated">関数本体がサポートして &lt;code&gt;rescue&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;after&lt;/code&gt; 、および &lt;code&gt;else&lt;/code&gt; よう&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#try/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt; &lt;/a&gt;（「暗黙の試み」として知られている）ん。たとえば、次の2つの関数は同等です。</target>
        </trans-unit>
        <trans-unit id="23cced316c3006e2ae03dfcedc7e3c98513a344d" translate="yes" xml:space="preserve">
          <source>Function bodies support &lt;code&gt;rescue&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; as &lt;a href=&quot;kernel.specialforms#try/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt;&lt;/a&gt; does. For example, the following two functions are equivalent:</source>
          <target state="translated">関数本体は、&lt;a href=&quot;kernel.specialforms#try/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt; &lt;/a&gt;と同様 &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;rescue&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、after、および &lt;code&gt;else&lt;/code&gt; をサポートしています。たとえば、次の2つの関数は同等です。</target>
        </trans-unit>
        <trans-unit id="a06abcd236c2b1c30e0ad208ebb8f15fa6b429ec" translate="yes" xml:space="preserve">
          <source>Function capturing</source>
          <target state="translated">機能キャプチャ</target>
        </trans-unit>
        <trans-unit id="f1329761aa64d73b0a0135229f12fe0d0ace1793" translate="yes" xml:space="preserve">
          <source>Function declarations also support guards and multiple clauses. If a function has several clauses, Elixir will try each clause until it finds one that matches. Here is an implementation of a function that checks if the given number is zero or not:</source>
          <target state="translated">関数宣言はガードと複数の節もサポートしています。関数に複数の節がある場合、Elixirはマッチする節が見つかるまで各節を試します。ここでは、与えられた数値がゼロかどうかをチェックする関数の実装を示します。</target>
        </trans-unit>
        <trans-unit id="2a8ac45592076c6753dc5eab45709c494a73fe32" translate="yes" xml:space="preserve">
          <source>Function names may also start with an underscore. Such functions are never imported by default:</source>
          <target state="translated">関数名はアンダースコアで始まることもあります。このような関数はデフォルトではインポートされません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
