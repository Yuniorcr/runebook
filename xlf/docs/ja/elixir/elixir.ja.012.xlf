<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="a4164178e5929ed3fb0cfbbf5db866fa640026ff" translate="yes" xml:space="preserve">
          <source>The returned value is a tuple with the current value returned by &lt;code&gt;fun&lt;/code&gt; and a new keyword list with the updated value under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;code&gt;fun&lt;/code&gt; によって返された現在の値を持つタプルと、 &lt;code&gt;key&lt;/code&gt; 下に更新された値を持つ新しいキーワードリストです。</target>
        </trans-unit>
        <trans-unit id="bcdf4e0951183ef655924f609aa3f331a6262b10" translate="yes" xml:space="preserve">
          <source>The returned value is a two-element tuple with the &quot;get&quot; value returned by &lt;code&gt;fun&lt;/code&gt; and a new container with the updated value under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;code&gt;fun&lt;/code&gt; によって返された「get」値と &lt;code&gt;key&lt;/code&gt; の下に更新された値を含む新しいコンテナを含む2要素のタプルです。</target>
        </trans-unit>
        <trans-unit id="0f9b50979454240749ecdc91833d5801c156188c" translate="yes" xml:space="preserve">
          <source>The returned value is a two-element tuple with the current value returned by &lt;code&gt;fun&lt;/code&gt; and a new map with the updated value under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;code&gt;fun&lt;/code&gt; によって返される現在の値を持つ2要素のタプルと、 &lt;code&gt;key&lt;/code&gt; 下に更新された値を持つ新しいマップです。</target>
        </trans-unit>
        <trans-unit id="4ee34714ba69b3d5a504684c39dd1f4988c4abdf" translate="yes" xml:space="preserve">
          <source>The returned value is a two-element tuple with the number of seconds and microseconds.</source>
          <target state="translated">返される値は、秒数とマイクロ秒の2つの要素を持つタプルです。</target>
        </trans-unit>
        <trans-unit id="7e65f7f051c44e5c9c75a8f2f854fabd880fc538" translate="yes" xml:space="preserve">
          <source>The returned value of the environment variable &lt;code&gt;varname&lt;/code&gt; is a string. If the environment variable is not set, returns the string specified in &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if none is specified.</source>
          <target state="translated">環境変数 &lt;code&gt;varname&lt;/code&gt; の戻り値は文字列です。環境変数が設定されていない場合は、で指定した文字列を返す &lt;code&gt;default&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を何も指定されていない場合は。</target>
        </trans-unit>
        <trans-unit id="0f847cce0d292ae271a717b61d78816a1f1ea3fd" translate="yes" xml:space="preserve">
          <source>The right path will always be expanded to its relative format and any trailing slash will be removed when joining.</source>
          <target state="translated">右側のパスは常に相対形式に展開され、結合時には末尾のスラッシュが削除されます。</target>
        </trans-unit>
        <trans-unit id="643a7d1289fc8c2df27def8f3faf469415ebab11" translate="yes" xml:space="preserve">
          <source>The right side of &lt;code&gt;.&lt;/code&gt; may be a word starting with an uppercase letter, which represents an alias, a word starting with lowercase or underscore, any valid language operator or any name wrapped in single- or double-quotes. Those are all valid examples:</source>
          <target state="translated">の右側 &lt;code&gt;.&lt;/code&gt; エイリアスを表す大文字で始まる単語、小文字またはアンダースコアで始まる単語、有効な言語演算子、または一重引用符または二重引用符で囲まれた任意の名前を指定できます。これらはすべて有効な例です。</target>
        </trans-unit>
        <trans-unit id="c04e1c8f69c2f1a88e36a20e9901940c66e8dcfe" translate="yes" xml:space="preserve">
          <source>The rounding direction always ties to half up. The operation is performed on the binary floating point, without a conversion to decimal.</source>
          <target state="translated">丸めの方向は常にハーフアップに結びます。演算は、10進数への変換を行わずに2進数の浮動小数点で行います。</target>
        </trans-unit>
        <trans-unit id="4144dd4219963dfd0900f8f0b48ec21d6f4d014e" translate="yes" xml:space="preserve">
          <source>The router will check the first byte of the bucket name against the table and dispatch to the appropriate node based on that. For example, a bucket starting with the letter &amp;ldquo;a&amp;rdquo; (&lt;code&gt;?a&lt;/code&gt; represents the Unicode codepoint of the letter &amp;ldquo;a&amp;rdquo;) will be dispatched to node &lt;code&gt;foo@computer-name&lt;/code&gt;.</source>
          <target state="translated">ルーターはバケット名の最初のバイトをテーブルと照合し、それに基づいて適切なノードにディスパッチします。たとえば、文字「a」で始まるバケット（ &lt;code&gt;?a&lt;/code&gt; は文字「a」のUnicodeコードポイントを表します）はノード &lt;code&gt;foo@computer-name&lt;/code&gt; ディスパッチされます。</target>
        </trans-unit>
        <trans-unit id="2ff8ac86ff623f4bf3fb0733f54cbe348a65e9dc" translate="yes" xml:space="preserve">
          <source>The routing layer will receive a routing table of the following format:</source>
          <target state="translated">ルーティング層は、以下の形式のルーティングテーブルを受信します。</target>
        </trans-unit>
        <trans-unit id="4c154bbe6784f06daaef10626cc0bf86a4376497" translate="yes" xml:space="preserve">
          <source>The same applies to duplicate registries:</source>
          <target state="translated">重複するレジストリについても同様です。</target>
        </trans-unit>
        <trans-unit id="8461a29f68bfc60f9acb948d5fe98c088c56fd3e" translate="yes" xml:space="preserve">
          <source>The same applies to maps where each pair is treated as a list of tuples with two elements:</source>
          <target state="translated">各ペアが2つの要素を持つタプルのリストとして扱われるマップにも同じことが当てはまります。</target>
        </trans-unit>
        <trans-unit id="b487f77f15de12365c59e270fe90d68cbbe73146" translate="yes" xml:space="preserve">
          <source>The same applies to qualified calls such as &lt;code&gt;Foo.bar(1, 2, 3)&lt;/code&gt;, which is the same as &lt;code&gt;Foo.bar 1, 2, 3&lt;/code&gt;. However, remember parentheses are not optional for non-qualified calls with no arguments, such as &lt;code&gt;sum()&lt;/code&gt;. Removing the parentheses for &lt;code&gt;sum&lt;/code&gt; causes it to be represented as the variable &lt;code&gt;sum&lt;/code&gt;, which means they would be no longer equivalent.</source>
          <target state="translated">同じのような修飾されたコールに適用 &lt;code&gt;Foo.bar(1, 2, 3)&lt;/code&gt; と同じであり、 &lt;code&gt;Foo.bar 1, 2, 3&lt;/code&gt; 。ただし、かっこは、 &lt;code&gt;sum()&lt;/code&gt; などの引数なしの非修飾呼び出しではオプションではありません。 &lt;code&gt;sum&lt;/code&gt; の括弧を削除すると、変数 &lt;code&gt;sum&lt;/code&gt; として表されます。つまり、それらは同等ではなくなります。</target>
        </trans-unit>
        <trans-unit id="47e032a5027ea138ef1f6dce21b412d852e000c1" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cd/1&quot;&gt;&lt;code&gt;cd/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails.</source>
          <target state="translated">&lt;a href=&quot;#cd/1&quot;&gt; &lt;code&gt;cd/1&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="4648fcff80dd7d416297fa509f0fce7c20f51db4" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cd/1&quot;&gt;&lt;code&gt;cd/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.Error.html&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails.</source>
          <target state="translated">&lt;a href=&quot;#cd/1&quot;&gt; &lt;code&gt;cd/1&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;https://hexdocs.pm/elixir/File.Error.html&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="18e01d0d75a4c60af88fee26dd31622d04f96a97" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#copy/3&quot;&gt;&lt;code&gt;copy/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.copyerror&quot;&gt;&lt;code&gt;File.CopyError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns the &lt;code&gt;bytes_copied&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#copy/3&quot;&gt; &lt;code&gt;copy/3&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.copyerror&quot;&gt; &lt;code&gt;File.CopyError&lt;/code&gt; &lt;/a&gt;例外を発生させます。それ以外の場合は、 &lt;code&gt;bytes_copied&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a58fcd56739bfa5248246728d465bb758d5e5ea2" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#copy/3&quot;&gt;&lt;code&gt;copy/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.CopyError.html&quot;&gt;&lt;code&gt;File.CopyError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns the &lt;code&gt;bytes_copied&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#copy/3&quot;&gt; &lt;code&gt;copy/3&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;https://hexdocs.pm/elixir/File.CopyError.html&quot;&gt; &lt;code&gt;File.CopyError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;bytes_copied&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2cf6de4f99822a7c8fe3b408ab5d4cf7f42930ca" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.copyerror&quot;&gt;&lt;code&gt;File.CopyError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.copyerror&quot;&gt; &lt;code&gt;File.CopyError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="696de6f1529a7a564fc637bc60de66470a73fed7" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.CopyError.html&quot;&gt;&lt;code&gt;File.CopyError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;https://hexdocs.pm/elixir/File.CopyError.html&quot;&gt; &lt;code&gt;File.CopyError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f92c875af9b9262d24ee988fee5dadfcecefeb5a" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cp_r/3&quot;&gt;&lt;code&gt;cp_r/3&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.copyerror&quot;&gt;&lt;code&gt;File.CopyError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns the list of copied files otherwise.</source>
          <target state="translated">&lt;a href=&quot;#cp_r/3&quot;&gt; &lt;code&gt;cp_r/3&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.copyerror&quot;&gt; &lt;code&gt;File.CopyError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は、コピーされたファイルのリストを返します。</target>
        </trans-unit>
        <trans-unit id="dced03231a36fd3a83cda83b79431542ee58a767" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cp_r/3&quot;&gt;&lt;code&gt;cp_r/3&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.CopyError.html&quot;&gt;&lt;code&gt;File.CopyError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns the list of copied files otherwise.</source>
          <target state="translated">&lt;a href=&quot;#cp_r/3&quot;&gt; &lt;code&gt;cp_r/3&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;https://hexdocs.pm/elixir/File.CopyError.html&quot;&gt; &lt;code&gt;File.CopyError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は、コピーされたファイルのリストを返します。</target>
        </trans-unit>
        <trans-unit id="f459fdf18e68c368ea8cc4aa8ed5c7cc8b9dd88a" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cwd/0&quot;&gt;&lt;code&gt;cwd/0&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails.</source>
          <target state="translated">&lt;a href=&quot;#cwd/0&quot;&gt; &lt;code&gt;cwd/0&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="0eee2e06aac8b82f8ed48294c71a788555a3adf5" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#cwd/0&quot;&gt;&lt;code&gt;cwd/0&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.Error.html&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails.</source>
          <target state="translated">&lt;a href=&quot;#cwd/0&quot;&gt; &lt;code&gt;cwd/0&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;https://hexdocs.pm/elixir/File.Error.html&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="fa8efe783d469a71d442d2785e538f32a3f185b8" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#eval!/2&quot;&gt;&lt;code&gt;eval!/2&lt;/code&gt;&lt;/a&gt; but only returns the configuration in the given file, without returning the imported paths.</source>
          <target state="translated">&lt;a href=&quot;#eval!/2&quot;&gt; &lt;code&gt;eval!/2&lt;/code&gt; &lt;/a&gt;と同じですが、インポートされたパスを返さずに、指定されたファイルの構成のみを返します。</target>
        </trans-unit>
        <trans-unit id="e983c20087a73c47c1b91cd7c2c300a823c39d00" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#ls/1&quot;&gt;&lt;code&gt;ls/1&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of an error.</source>
          <target state="translated">同じ&lt;a href=&quot;#ls/1&quot;&gt; &lt;code&gt;ls/1&lt;/code&gt; &lt;/a&gt;が、上昇させる&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; の&lt;/a&gt;エラーの場合に例外を。</target>
        </trans-unit>
        <trans-unit id="2619800bcffc51ddabf679c548f67d8d665df758" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#ls/1&quot;&gt;&lt;code&gt;ls/1&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.Error.html&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of an error.</source>
          <target state="translated">同じ&lt;a href=&quot;#ls/1&quot;&gt; &lt;code&gt;ls/1&lt;/code&gt; &lt;/a&gt;が、上昇させる&lt;a href=&quot;https://hexdocs.pm/elixir/File.Error.html&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; の&lt;/a&gt;エラーの場合に例外を。</target>
        </trans-unit>
        <trans-unit id="e26cc2d303c7d487aeb4684f8a5ec5296d428a79" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; but raises an &lt;a href=&quot;https://hexdocs.pm/elixir/OptionParser.ParseError.html&quot;&gt;&lt;code&gt;OptionParser.ParseError&lt;/code&gt;&lt;/a&gt; exception if any invalid options are given.</source>
          <target state="translated">&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt;と同じですが、無効なオプションが指定された場合、&lt;a href=&quot;https://hexdocs.pm/elixir/OptionParser.ParseError.html&quot;&gt; &lt;code&gt;OptionParser.ParseError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="94d50f21dfa011da9b3d948e9722047f3d7526a9" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; but raises an &lt;a href=&quot;optionparser.parseerror&quot;&gt;&lt;code&gt;OptionParser.ParseError&lt;/code&gt;&lt;/a&gt; exception if any invalid options are given.</source>
          <target state="translated">&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt;と同じですが、無効なオプションが指定されると&lt;a href=&quot;optionparser.parseerror&quot;&gt; &lt;code&gt;OptionParser.ParseError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="e2165b5941176ebd36f68f510b06c8757c380d9a" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#parse_head/2&quot;&gt;&lt;code&gt;parse_head/2&lt;/code&gt;&lt;/a&gt; but raises an &lt;a href=&quot;https://hexdocs.pm/elixir/OptionParser.ParseError.html&quot;&gt;&lt;code&gt;OptionParser.ParseError&lt;/code&gt;&lt;/a&gt; exception if any invalid options are given.</source>
          <target state="translated">&lt;a href=&quot;#parse_head/2&quot;&gt; &lt;code&gt;parse_head/2&lt;/code&gt; &lt;/a&gt;と同じですが、無効なオプションが指定された場合、&lt;a href=&quot;https://hexdocs.pm/elixir/OptionParser.ParseError.html&quot;&gt; &lt;code&gt;OptionParser.ParseError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a5050ef6fcebfe967949f495038b1cf5998440f0" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#parse_head/2&quot;&gt;&lt;code&gt;parse_head/2&lt;/code&gt;&lt;/a&gt; but raises an &lt;a href=&quot;optionparser.parseerror&quot;&gt;&lt;code&gt;OptionParser.ParseError&lt;/code&gt;&lt;/a&gt; exception if any invalid options are given.</source>
          <target state="translated">&lt;a href=&quot;#parse_head/2&quot;&gt; &lt;code&gt;parse_head/2&lt;/code&gt; &lt;/a&gt;と同じですが、無効なオプションが指定された場合、&lt;a href=&quot;optionparser.parseerror&quot;&gt; &lt;code&gt;OptionParser.ParseError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="44ad2c47fd323d50a1b7a9d773f54ea42bbc2572" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#read_imports!/2&quot;&gt;&lt;code&gt;read_imports!/2&lt;/code&gt;&lt;/a&gt; but only returns the configuration in the given file, without returning the imported paths.</source>
          <target state="translated">&lt;a href=&quot;#read_imports!/2&quot;&gt; &lt;code&gt;read_imports!/2&lt;/code&gt; &lt;/a&gt;と同じですが、インポートされたパスを返さずに、指定されたファイルの構成のみを返します。</target>
        </trans-unit>
        <trans-unit id="76551e442cf0920ecab6d0eb8ea56bcf94c15620" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#rename/2&quot;&gt;&lt;code&gt;rename/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.renameerror&quot;&gt;&lt;code&gt;File.RenameError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#rename/2&quot;&gt; &lt;code&gt;rename/2&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.renameerror&quot;&gt; &lt;code&gt;File.RenameError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="be26fa6408a4ea8bda26cf7e98b553592e7fd2e6" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#rename/2&quot;&gt;&lt;code&gt;rename/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;https://hexdocs.pm/elixir/File.RenameError.html&quot;&gt;&lt;code&gt;File.RenameError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#rename/2&quot;&gt; &lt;code&gt;rename/2&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;https://hexdocs.pm/elixir/File.RenameError.html&quot;&gt; &lt;code&gt;File.RenameError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ff7e3f389bbffc2c11af04820517b44446f5b5b0" translate="yes" xml:space="preserve">
          <source>The second approach uses function calls which better suits more complex APIs (for example, if you need to pass many options) and reads nicely in Elixir thanks to the pipe operator.</source>
          <target state="translated">2つ目のアプローチは、より複雑なAPI(例えば、多くのオプションを渡す必要がある場合など)に適した関数呼び出しを使用し、パイプ演算子のおかげでElixirでうまく読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="4989f7d201fe4b48e470058521e1ca80ae6c9569" translate="yes" xml:space="preserve">
          <source>The second argument is a keyword list of options:</source>
          <target state="translated">第2引数は、オプションのキーワードリストです。</target>
        </trans-unit>
        <trans-unit id="43642aa7f67e7784c0b111753a92ead35aec4a5a" translate="yes" xml:space="preserve">
          <source>The second argument is either a timeout or &lt;code&gt;:brutal_kill&lt;/code&gt;. In case of a timeout, a &lt;code&gt;:shutdown&lt;/code&gt; exit signal is sent to the task process and if it does not exit within the timeout, it is killed. With &lt;code&gt;:brutal_kill&lt;/code&gt; the task is killed straight away. In case the task terminates abnormally (possibly killed by another process), this function will exit with the same reason.</source>
          <target state="translated">2番目の引数は、タイムアウトまたは &lt;code&gt;:brutal_kill&lt;/code&gt; です。タイムアウトの場合、 &lt;code&gt;:shutdown&lt;/code&gt; 終了シグナルがタスクプロセスに送信され、タイムアウト内に終了しない場合は強制終了されます。 &lt;code&gt;:brutal_kill&lt;/code&gt; タスクはすぐに殺されます。タスクが異常終了した場合（別のプロセスによって強制終了された可能性があります）、この関数は同じ理由で終了します。</target>
        </trans-unit>
        <trans-unit id="fcb757bd7051270d8c819a13491903d89a8704fd" translate="yes" xml:space="preserve">
          <source>The second argument is first expanded to an absolute path.</source>
          <target state="translated">第2引数は、まず絶対パスに展開されます。</target>
        </trans-unit>
        <trans-unit id="524ef427f3aceff5423ab5acc031269f5e3169df" translate="yes" xml:space="preserve">
          <source>The second argument specifying every &lt;code&gt;nth&lt;/code&gt; element must be a non-negative integer.</source>
          <target state="translated">&lt;code&gt;nth&lt;/code&gt; ごとの要素を指定する2番目の引数は、負でない整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6a6d508d801e049e82fe48d35683e28b76dc2200" translate="yes" xml:space="preserve">
          <source>The second change is in the &lt;code&gt;application&lt;/code&gt; function inside &lt;code&gt;mix.exs&lt;/code&gt;:</source>
          <target state="translated">2番目の変更は、 &lt;code&gt;mix.exs&lt;/code&gt; 内の &lt;code&gt;application&lt;/code&gt; 関数にあります。</target>
        </trans-unit>
        <trans-unit id="36314cd4001b7103421433826074baa427430f61" translate="yes" xml:space="preserve">
          <source>The second concern is that, while using &lt;code&gt;mix run&lt;/code&gt; is completely fine to run our software in production, the command we use to start our services is getting increasingly more complex. For example, imagine we also want to &lt;code&gt;--preload-modules&lt;/code&gt;, to all code is loaded upfront, as well as set the &lt;code&gt;MIX_ENV=prod&lt;/code&gt; environment variable:</source>
          <target state="translated">2つ目の懸念事項は、本番環境でソフトウェアを実行するために &lt;code&gt;mix run&lt;/code&gt; を使用することは完全に問題ないのですが、サービスを開始するために使用するコマンドがますます複雑になっていることです。たとえば、-- &lt;code&gt;--preload-modules&lt;/code&gt; 、すべてのコードを事前にロードし、さらに &lt;code&gt;MIX_ENV=prod&lt;/code&gt; 環境変数を設定したいとします。</target>
        </trans-unit>
        <trans-unit id="59db642f7ebf3826674361ba0acf5de33120795d" translate="yes" xml:space="preserve">
          <source>The second definition matches the pattern and has no guard so it will be executed. It first prints our &lt;code&gt;msg&lt;/code&gt; and then calls itself passing &lt;code&gt;n - 1&lt;/code&gt; (&lt;code&gt;2&lt;/code&gt;) as the second argument.</source>
          <target state="translated">2番目の定義はパターンに一致し、ガードがないため、実行されます。最初に &lt;code&gt;msg&lt;/code&gt; を出力し、2番目の引数として &lt;code&gt;n - 1&lt;/code&gt; （ &lt;code&gt;2&lt;/code&gt; ）を渡して自分自身を呼び出します。</target>
        </trans-unit>
        <trans-unit id="dae9460a51adde13fd535bc1aee22f1354a6ed7b" translate="yes" xml:space="preserve">
          <source>The second element is a keyword list containing metadata, like numbers and contexts;</source>
          <target state="translated">2番目の要素は、数字やコンテキストなどのメタデータを含むキーワードリストです。</target>
        </trans-unit>
        <trans-unit id="21d656a71ac68bd8b82b5427ffa0a32c0e82e5b7" translate="yes" xml:space="preserve">
          <source>The second element of the tuple represents &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#t:metadata/0&quot;&gt;metadata&lt;/a&gt;.</source>
          <target state="translated">タプルの2番目の要素は、&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#t:metadata/0&quot;&gt;メタデータを&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="09930d4769fdab8c631461548dda5978d0ffac47" translate="yes" xml:space="preserve">
          <source>The second element of the tuple represents metadata.</source>
          <target state="translated">タプルの2番目の要素はメタデータを表します。</target>
        </trans-unit>
        <trans-unit id="49369ce9190f9083bafea50347ba1f7b69ded63d" translate="yes" xml:space="preserve">
          <source>The second flaw is related to the supervision strategy. If &lt;code&gt;KV.Registry&lt;/code&gt; dies, all information linking &lt;code&gt;KV.Bucket&lt;/code&gt; names to bucket processes is lost. Therefore the &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; and all children must terminate too - otherwise we will have orphan processes.</source>
          <target state="translated">第二の欠陥は監督戦略に関連しています。場合 &lt;code&gt;KV.Registry&lt;/code&gt; が死亡、リンクすべての情報 &lt;code&gt;KV.Bucket&lt;/code&gt; のバケットプロセスに名前が失われます。したがって、 &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; とすべての子も終了する必要があります。そうしないと、孤立したプロセスが発生します。</target>
        </trans-unit>
        <trans-unit id="1b27ec208e18d1eae9448f08cbc57e44112bc1f3" translate="yes" xml:space="preserve">
          <source>The second is to make sure your &lt;a href=&quot;#import_config/1&quot;&gt;&lt;code&gt;import_config/1&lt;/code&gt;&lt;/a&gt; calls do not have a wildcard character. If so, you need to perform the wildcard lookup manually. For example, if you did:</source>
          <target state="translated">2つ目は、&lt;a href=&quot;#import_config/1&quot;&gt; &lt;code&gt;import_config/1&lt;/code&gt; &lt;/a&gt;呼び出しにワイルドカード文字が含まれていないことを確認することです。その場合、ワイルドカード検索を手動で実行する必要があります。たとえば、次の場合：</target>
        </trans-unit>
        <trans-unit id="3f52940a3eb4585da7a86f017cdfc1095c4a0962" translate="yes" xml:space="preserve">
          <source>The second part, the guards, is a list of conditions that allow filtering the results. Each guard is a tuple, which describes checks that should be passed by assigned part of pattern. For example the &lt;code&gt;$1 &amp;gt; 1&lt;/code&gt; guard condition would be expressed as the &lt;code&gt;{:&amp;gt;, :&quot;$1&quot;, 1}&lt;/code&gt; tuple. Please note that guard conditions will work only for assigned variables like &lt;code&gt;:&quot;$1&quot;&lt;/code&gt;, &lt;code&gt;:&quot;$2&quot;&lt;/code&gt;, and so forth.</source>
          <target state="translated">2番目の部分であるガードは、結果のフィルタリングを可能にする条件のリストです。各ガードはタプルであり、パターンの割り当てられた部分が通過する必要のあるチェックを記述します。たとえば、 &lt;code&gt;$1 &amp;gt; 1&lt;/code&gt; ガード条件は、 &lt;code&gt;{:&amp;gt;, :&quot;$1&quot;, 1}&lt;/code&gt; タプルとして表されます。ガード条件は、 &lt;code&gt;:&quot;$1&quot;&lt;/code&gt; 、 &lt;code&gt;:&quot;$2&quot;&lt;/code&gt; などの割り当てられた変数に対してのみ機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="03c8c69c3a8917dcc36201eb8826bb675ed3a306" translate="yes" xml:space="preserve">
          <source>The second part, the guards, is a list of conditions that allow filtering the results. Each guard is a tuple, which describes checks that should be passed by assigned part of pattern. For example the &lt;code&gt;$1 &amp;gt; 1&lt;/code&gt; guard condition would be expressed as the &lt;code&gt;{:&amp;gt;, :&quot;$1&quot;, 1}&lt;/code&gt; tuple. Please note that guard conditions will work only for assigned variables like &lt;code&gt;:&quot;$1&quot;&lt;/code&gt;, &lt;code&gt;:&quot;$2&quot;&lt;/code&gt;, etc.</source>
          <target state="translated">2番目の部分であるガードは、結果のフィルタリングを可能にする条件のリストです。各ガードはタプルであり、パターンの割り当てられた部分が通過するチェックを記述します。たとえば、 &lt;code&gt;$1 &amp;gt; 1&lt;/code&gt; ガード条件は、 &lt;code&gt;{:&amp;gt;, :&quot;$1&quot;, 1}&lt;/code&gt; 、：&quot;$ 1&quot;、1}タプルとして表現されます。ノートでは、ガード条件は次のように割り当てられた変数に対してのみ動作しますしてくださいことを &lt;code&gt;:&quot;$1&quot;&lt;/code&gt; 、 &lt;code&gt;:&quot;$2&quot;&lt;/code&gt; 、など</target>
        </trans-unit>
        <trans-unit id="8279ae6c0770b2c5c483279a964f5a0fd686e18a" translate="yes" xml:space="preserve">
          <source>The second pitfall is that the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator works on calls. For example, when you write:</source>
          <target state="translated">2番目の落とし穴は、 &lt;code&gt;|&amp;gt;&lt;/code&gt; 演算子が呼び出しで機能することです。たとえば、次のように書いた場合：</target>
        </trans-unit>
        <trans-unit id="494117d2d88c4ce9741e6ac16716fddbb8f4cbe4" translate="yes" xml:space="preserve">
          <source>The second principle is to provide as little configuration as possible. This eases the formatter adoption by removing contention points while making sure a single style is followed consistently by the community as a whole.</source>
          <target state="translated">第二の原則は、可能な限り設定を少なくすることです。これは、コミュニティ全体で単一のスタイルが一貫して守られていることを確認しながら、競合点を取り除くことでフォーマッタの採用を容易にします。</target>
        </trans-unit>
        <trans-unit id="661a367f5412305ec9e82e19ba1e4e566dc26d28" translate="yes" xml:space="preserve">
          <source>The second test checks that the code raises for unknown entries.</source>
          <target state="translated">2 番目のテストでは、未知のエントリに対してコードが発生するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="8cd7d01257f835cc5a3247359bf87ad73936ce2f" translate="yes" xml:space="preserve">
          <source>The server is now running, and you will even notice the console is blocked. Let&amp;rsquo;s use &lt;a href=&quot;https://en.wikipedia.org/wiki/Telnet&quot;&gt;a &lt;code&gt;telnet&lt;/code&gt; client&lt;/a&gt; to access our server. There are clients available on most operating systems, and their command lines are generally similar:</source>
          <target state="translated">これでサーバーが実行され、コンソールがブロックされていることに気付くでしょう。レッツは、使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Telnet&quot;&gt; &lt;code&gt;telnet&lt;/code&gt; &lt;/a&gt;クライアントを当社のサーバーにアクセスします。ほとんどのオペレーティングシステムで利用可能なクライアントがあり、それらのコマンドラインは一般的に類似しています。</target>
        </trans-unit>
        <trans-unit id="fd585ae8b1d0205e194512ad32642a694a88c604" translate="yes" xml:space="preserve">
          <source>The server reference.</source>
          <target state="translated">サーバーの参照。</target>
        </trans-unit>
        <trans-unit id="d40bf167b8d71e1dda39cd357ab868e4586251d2" translate="yes" xml:space="preserve">
          <source>The server responsibilities include:</source>
          <target state="translated">サーバーの責任は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ff65793db264093aa3a7a1cf46e0cbfc1e4b8a04" translate="yes" xml:space="preserve">
          <source>The setup callbacks are defined via macros and each one can optionally receive a map with test state and metadata, usually referred to as &lt;code&gt;context&lt;/code&gt;. The context to be used in the tests can be optionally extended by the setup callbacks by returning a properly structured value (see below).</source>
          <target state="translated">セットアップコールバックはマクロを介して定義され、それぞれがオプションで、通常は &lt;code&gt;context&lt;/code&gt; と呼ばれるテスト状態とメタデータを含むマップを受け取ることができます。テストで使用されるコンテキストは、適切に構造化された値を返すことにより、セットアップコールバックによってオプションで拡張できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="beb94809dde5c8a8ccc0fe6fd795a37a627a36a9" translate="yes" xml:space="preserve">
          <source>The setup callbacks may be used to define &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_fixture#Software&quot;&gt;test fixtures&lt;/a&gt; and run any initialization code which help bring the system into a known state. They are defined via macros and each one can optionally receive a map with test state and metadata, usually referred to as the &lt;code&gt;context&lt;/code&gt;. Optionally, the context to be used in the tests can be extended by the setup callbacks by returning a properly structured value (see below).</source>
          <target state="translated">セットアップコールバックを使用して、&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_fixture#Software&quot;&gt;テストフィクスチャ&lt;/a&gt;を定義し、システムを既知の状態にするのに役立つ初期化コードを実行できます。それらはマクロを介して定義され、各マクロはオプションで、通常は &lt;code&gt;context&lt;/code&gt; と呼ばれるテスト状態とメタデータを含むマップを受け取ることができます。オプションで、テストで使用されるコンテキストは、適切に構造化された値を返すことにより、セットアップコールバックによって拡張できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="be70f07b576f3a68fa738cef7302c8e28346ebfb" translate="yes" xml:space="preserve">
          <source>The shutdown process happens in reverse order.</source>
          <target state="translated">シャットダウン処理は逆の順序で行われます。</target>
        </trans-unit>
        <trans-unit id="a344948a2691ee6269fc2879136d40e4dca1f373" translate="yes" xml:space="preserve">
          <source>The size can be a variable:</source>
          <target state="translated">サイズは変数にすることができます。</target>
        </trans-unit>
        <trans-unit id="8111a6aa75f3c6e4735d59b2e853a7faeadebe29" translate="yes" xml:space="preserve">
          <source>The size of a map is the number of key-value pairs that the map contains.</source>
          <target state="translated">マップのサイズは、マップに含まれるキーと値のペアの数です。</target>
        </trans-unit>
        <trans-unit id="0078ede4075127860c2ade218ba7d232c2981cd7" translate="yes" xml:space="preserve">
          <source>The snippet above only works because numbers implement the &lt;code&gt;String.Chars&lt;/code&gt; protocol. Passing a tuple, for example, will lead to an error:</source>
          <target state="translated">上記のスニペットは、数値が &lt;code&gt;String.Chars&lt;/code&gt; プロトコルを実装しているためにのみ機能します。たとえば、タプルを渡すとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6c615bba281ebbef820e4ccb712d2aa12dcf9a32" translate="yes" xml:space="preserve">
          <source>The solution here is to use &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#take/2&quot;&gt;&lt;code&gt;Stream.take/2&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#take/2&quot;&gt;&lt;code&gt;Enum.take/2&lt;/code&gt;&lt;/a&gt; to filter elements before-hand:</source>
          <target state="translated">ここでの解決策は、&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html#take/2&quot;&gt; &lt;code&gt;Stream.take/2&lt;/code&gt; &lt;/a&gt;代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#take/2&quot;&gt; &lt;code&gt;Enum.take/2&lt;/code&gt; &lt;/a&gt;を使用して、事前に要素をフィルタリングすることです。</target>
        </trans-unit>
        <trans-unit id="6272c1202f90648d2a2419029598638bd1dd5c26" translate="yes" xml:space="preserve">
          <source>The solution is to provide configuration as close as possible to where it is used and not via the application environment. In case of a function, you could expect keyword lists as a new argument:</source>
          <target state="translated">解決策は、アプリケーション環境を経由せず、できるだけ使用する場所に近い設定を提供することです。関数の場合、新しい引数としてキーワードリストが期待できます。</target>
        </trans-unit>
        <trans-unit id="2c2456d942f9ee207983a501b269e82c8ae7c4b6" translate="yes" xml:space="preserve">
          <source>The sorting algorithm will be stable as long as the given function returns &lt;code&gt;true&lt;/code&gt; for values considered equal:</source>
          <target state="translated">並べ替えアルゴリズムは、指定された関数が等しいと見なされる値に対して &lt;code&gt;true&lt;/code&gt; を返す限り、安定しています。</target>
        </trans-unit>
        <trans-unit id="972944894d27378714ceb941dffde3e2074c4f7f" translate="yes" xml:space="preserve">
          <source>The spec also provides a &lt;code&gt;&amp;lt;Medial&amp;gt;&lt;/code&gt; set but Elixir does not include any character on this set. Therefore the identifier rule has been simplified to consider this.</source>
          <target state="translated">仕様には &lt;code&gt;&amp;lt;Medial&amp;gt;&lt;/code&gt; セットも用意されていますが、Elixirにはこのセットの文字は含まれていません。したがって、識別子ルールはこれを考慮して簡略化されています。</target>
        </trans-unit>
        <trans-unit id="fc80cf8cc0e875b59d4cb7a74f58a13e82e8e79b" translate="yes" xml:space="preserve">
          <source>The stack is a small wrapper around lists. It allows us to put an element on the top of the stack, by prepending to the list, and to get the top of the stack by pattern matching.</source>
          <target state="translated">スタックはリストの小さなラッパーです。これにより、リストに前置して要素をスタックの先頭に置いたり、パターンマッチでスタックの先頭を取得したりすることができます。</target>
        </trans-unit>
        <trans-unit id="464d44c8fa9af2bc062b88f7cb6e09d51921375c" translate="yes" xml:space="preserve">
          <source>The standard library</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="c90a34e2afaa39e30146b58a596138ac46c6ee44" translate="yes" xml:space="preserve">
          <source>The steps necessary to work across nodes is already commented out as an example. You can enable full distribution by uncommenting the last two lines by removing the leading &lt;code&gt;# &lt;/code&gt;.</source>
          <target state="translated">ノード間で作業するために必要な手順は、例としてすでにコメントアウトされています。先頭の &lt;code&gt;# &lt;/code&gt; を削除して最後の2行のコメントを外すと、完全配布を有効にできます。</target>
        </trans-unit>
        <trans-unit id="6547b77a17d5ef12542c7afee97cc798fc8b1249" translate="yes" xml:space="preserve">
          <source>The stream implements both &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;collectable&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocols, which means it can be used both for read and write.</source>
          <target state="translated">ストリームは&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;collectable&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;プロトコルの両方を実装します。つまり、読み取りと書き込みの両方に使用できます。</target>
        </trans-unit>
        <trans-unit id="6ee85dc5e71fc294b36604877aa25393a7df8e42" translate="yes" xml:space="preserve">
          <source>The stream implements both &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocols, which means it can be used both for read and write.</source>
          <target state="translated">ストリームは、&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;プロトコルと収集可能プロトコルの両方を実装します。つまり、読み取りと書き込みの両方に使用できます。</target>
        </trans-unit>
        <trans-unit id="d0a2b7409cbfc04d5907be0d98cbcaddcde54753" translate="yes" xml:space="preserve">
          <source>The string between the parentheses in the prompt is the name of your node. We can retrieve it by calling the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#node/0&quot;&gt;&lt;code&gt;node/0&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">プロンプトの括弧内の文字列は、ノードの名前です。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#node/0&quot;&gt; &lt;code&gt;node/0&lt;/code&gt; &lt;/a&gt;関数を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="81e25ea527122c6269507a786b1fac990f5269a4" translate="yes" xml:space="preserve">
          <source>The string concatenation makes the code fit on a single line and also gives more options to the formatter.</source>
          <target state="translated">文字列を連結することで、コードが一行に収まるようになり、フォーマッタに多くのオプションを与えることができます。</target>
        </trans-unit>
        <trans-unit id="86cdec7e4462e9309a1a4eb1db8bbf7175736e0b" translate="yes" xml:space="preserve">
          <source>The string concatenation operation is actually a binary concatenation operator:</source>
          <target state="translated">文字列連結演算は、実際には二値連結演算子です。</target>
        </trans-unit>
        <trans-unit id="7f69f0cddd44731ccae3984440903fe5c39c51ec" translate="yes" xml:space="preserve">
          <source>The string concatenation operator &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; is actually a binary concatenation operator:</source>
          <target state="translated">文字列連結演算子 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; は、実際にはバイナリ連結演算子です。</target>
        </trans-unit>
        <trans-unit id="8259167cccd8df309147297c84a34df6a1de5df3" translate="yes" xml:space="preserve">
          <source>The string is split into as many parts as possible by default, but can be controlled via the &lt;code&gt;:parts&lt;/code&gt; option.</source>
          <target state="translated">文字列はデフォルトで可能な限り多くの部分に分割されますが、 &lt;code&gt;:parts&lt;/code&gt; オプションで制御できます。</target>
        </trans-unit>
        <trans-unit id="ff34135d2b9fe9bf18a8b4692de3737dabb31735" translate="yes" xml:space="preserve">
          <source>The struct fields are private and should not be accessed.</source>
          <target state="translated">構造体フィールドはプライベートであり、アクセスしてはいけません。</target>
        </trans-unit>
        <trans-unit id="571837e3b232d92d474e8917fdedc1786ba58276" translate="yes" xml:space="preserve">
          <source>The struct fields can be given when building the struct:</source>
          <target state="translated">構造体を構築する際に構造体フィールドを与えることができます。</target>
        </trans-unit>
        <trans-unit id="92bf51de3e3e5df1170754020b84a38130fd526e" translate="yes" xml:space="preserve">
          <source>The supervision strategy dictates what happens when one of the children crashes. &lt;code&gt;:one_for_one&lt;/code&gt; means that if a child dies, it will be the only one restarted. Since we have only one child now, that&amp;rsquo;s all we need. The &lt;code&gt;Supervisor&lt;/code&gt; behaviour supports many different strategies and we will discuss them in this chapter.</source>
          <target state="translated">監督戦略は、子供たちの1人が墜落したときに何が起こるかを指示します。 &lt;code&gt;:one_for_one&lt;/code&gt; は、子が死亡した場合、それが再起動される唯一の子になることを意味します。現在、子供は1人だけなので、それで十分です。 &lt;code&gt;Supervisor&lt;/code&gt; 挙動は、多くの異なる戦略をサポートし、我々は、この章でそれらを説明します。</target>
        </trans-unit>
        <trans-unit id="d45ea759f46bff3ba089e89707b504285b2e2aff" translate="yes" xml:space="preserve">
          <source>The supervisor flags returned on init</source>
          <target state="translated">initで返されるスーパバイザフラグ</target>
        </trans-unit>
        <trans-unit id="e3742ff69698c4acf77e80f28496fe07172ab4b1" translate="yes" xml:space="preserve">
          <source>The supervisor reference</source>
          <target state="translated">スーパーバイザーのリファレンス</target>
        </trans-unit>
        <trans-unit id="5aec5d17ff71d8a46be456b119441ed148f52e07" translate="yes" xml:space="preserve">
          <source>The supervisor specification</source>
          <target state="translated">スーパーバイザー仕様</target>
        </trans-unit>
        <trans-unit id="55243bfac4a971c230124af0cb70d274159f15f1" translate="yes" xml:space="preserve">
          <source>The supervisor will then invoke &lt;code&gt;Stack.child_spec([:hello])&lt;/code&gt; to retrieve a child specification. Now the &lt;code&gt;Stack&lt;/code&gt; module is responsible for building its own specification, for example, we could write:</source>
          <target state="translated">次に、スーパーバイザは &lt;code&gt;Stack.child_spec([:hello])&lt;/code&gt; を呼び出して、子の仕様を取得します。これで、 &lt;code&gt;Stack&lt;/code&gt; モジュールが独自の仕様を構築する責任を負います。たとえば、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="48df4bde49257478d542a437f9de2f0a2ea29a61" translate="yes" xml:space="preserve">
          <source>The supported class names are:</source>
          <target state="translated">サポートされているクラス名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2acb742979d49cdd1ce894f691b11d6c69ead543" translate="yes" xml:space="preserve">
          <source>The supported forms are:</source>
          <target state="translated">対応しているフォームは</target>
        </trans-unit>
        <trans-unit id="a8f9a7d8961a3767298fcfbab64cbbb6e0e6ee0b" translate="yes" xml:space="preserve">
          <source>The supported keys in the &lt;code&gt;:colors&lt;/code&gt; keyword list are:</source>
          <target state="translated">&lt;code&gt;:colors&lt;/code&gt; キーワードリストでサポートされているキーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3179160c7ddd0151d004050775f2d167fb2bf259" translate="yes" xml:space="preserve">
          <source>The supported levels, ordered by importance, are:</source>
          <target state="translated">重要度の高い順に、サポートされているレベルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b7878d33057652c5e4e57d591e83ecedf612c203" translate="yes" xml:space="preserve">
          <source>The supported levels, ordered by precedence, are:</source>
          <target state="translated">サポートされているレベルは、優先度の高い順に並んでいます。</target>
        </trans-unit>
        <trans-unit id="db2280a174b18020a2620736642518bf66a11dab" translate="yes" xml:space="preserve">
          <source>The supported options are:</source>
          <target state="translated">サポートされているオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a909fba4eceb102c979e5e9c2b15d4702c456bf4" translate="yes" xml:space="preserve">
          <source>The syntax Elixir provides for type specifications is similar to &lt;a href=&quot;http://www.erlang.org/doc/reference_manual/typespec.html&quot;&gt;the one in Erlang&lt;/a&gt;. Most of the built-in types provided in Erlang (for example, &lt;code&gt;pid()&lt;/code&gt;) are expressed in the same way: &lt;code&gt;pid()&lt;/code&gt; (or simply &lt;code&gt;pid&lt;/code&gt;). Parameterized types (such as &lt;code&gt;list(integer)&lt;/code&gt;) are supported as well and so are remote types (such as &lt;code&gt;Enum.t&lt;/code&gt;). Integers and atom literals are allowed as types (e.g., &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;:atom&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;). All other types are built out of unions of predefined types. Some shorthands are allowed, such as &lt;code&gt;[...]&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;{...}&lt;/code&gt;.</source>
          <target state="translated">Elixirが型指定に提供する構文は&lt;a href=&quot;http://www.erlang.org/doc/reference_manual/typespec.html&quot;&gt;、Erlang&lt;/a&gt;の構文に似ています。 Erlangで提供されるほとんどの組み込み型（たとえば、 &lt;code&gt;pid()&lt;/code&gt; ）は、同じ方法で表現されます： &lt;code&gt;pid()&lt;/code&gt; （または単に &lt;code&gt;pid&lt;/code&gt; ）。パラメータ化された型（ &lt;code&gt;list(integer)&lt;/code&gt; など）もサポートされており、リモート型（ &lt;code&gt;Enum.t&lt;/code&gt; など）もサポートされています。整数とアトムリテラルは型として許可されます（例 &lt;code&gt;:atom&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; 、：atom、または &lt;code&gt;false&lt;/code&gt; ）。他のすべてのタイプは、事前定義されたタイプの共用体から構築されます。 &lt;code&gt;[...]&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;{...}&lt;/code&gt; などの一部の省略表現が許可されています。</target>
        </trans-unit>
        <trans-unit id="11e8b05ebb02ab602f5c99e81c78f285a85d25bf" translate="yes" xml:space="preserve">
          <source>The syntax Elixir provides for type specifications is similar to &lt;a href=&quot;http://www.erlang.org/doc/reference_manual/typespec.html&quot;&gt;the one in Erlang&lt;/a&gt;. Most of the built-in types provided in Erlang (for example, &lt;code&gt;pid()&lt;/code&gt;) are expressed in the same way: &lt;code&gt;pid()&lt;/code&gt; (or simply &lt;code&gt;pid&lt;/code&gt;). Parameterized types (such as &lt;code&gt;list(integer)&lt;/code&gt;) are supported as well and so are remote types (such as &lt;code&gt;Enum.t&lt;/code&gt;). Integers and atom literals are allowed as types (for example, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;:atom&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt;). All other types are built out of unions of predefined types. Some shorthands are allowed, such as &lt;code&gt;[...]&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;{...}&lt;/code&gt;.</source>
          <target state="translated">Elixirが型指定のために提供する構文は&lt;a href=&quot;http://www.erlang.org/doc/reference_manual/typespec.html&quot;&gt;、Erlangのもの&lt;/a&gt;と似ています。 Erlangで提供される組み込み型のほとんど（たとえば、 &lt;code&gt;pid()&lt;/code&gt; ）は、同じ方法で表現されます： &lt;code&gt;pid()&lt;/code&gt; （または単に &lt;code&gt;pid&lt;/code&gt; ）。パラメータ化された型（ &lt;code&gt;list(integer)&lt;/code&gt; など）もサポートされており、リモート型（ &lt;code&gt;Enum.t&lt;/code&gt; など）もサポートされています。整数とアトムリテラルはタイプとして許可されます（たとえば、 &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;:atom&lt;/code&gt; 、または &lt;code&gt;false&lt;/code&gt; ）。他のすべてのタイプは、事前定義されたタイプの和集合から構築されます。 &lt;code&gt;[...]&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;{...}&lt;/code&gt; などの一部の省略形が許可されます。</target>
        </trans-unit>
        <trans-unit id="3d0036cfb43509daaf5a87c862104d3f9568ed85" translate="yes" xml:space="preserve">
          <source>The syntax above requires the given key to exist. It cannot be used to add new keys. For example, using it with the &lt;code&gt;:c&lt;/code&gt; key failed because there is no &lt;code&gt;:c&lt;/code&gt; in the map.</source>
          <target state="translated">上記の構文では、指定されたキーが存在する必要があります。新しいキーの追加には使用できません。たとえば、マップに &lt;code&gt;:c&lt;/code&gt; がないため、それを &lt;code&gt;:c&lt;/code&gt; キーで使用すると失敗しました。</target>
        </trans-unit>
        <trans-unit id="e74604ffed887af469a3ff79efc01a49993440e8" translate="yes" xml:space="preserve">
          <source>The syntax above will guarantee the given keys are valid at compilation time and it will guarantee at runtime the given argument is a struct, failing with &lt;a href=&quot;badstructerror&quot;&gt;&lt;code&gt;BadStructError&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">上記の構文は、指定されたキーがコンパイル時に有効であることを保証し、実行時に指定された引数が構造体であることを&lt;a href=&quot;badstructerror&quot;&gt; &lt;code&gt;BadStructError&lt;/code&gt; &lt;/a&gt;ます。それ以外の場合はBadStructErrorで失敗します。</target>
        </trans-unit>
        <trans-unit id="7180700097f6ff908399744578d9873946673ba9" translate="yes" xml:space="preserve">
          <source>The syntax above will guarantee the given keys are valid at compilation time and it will guarantee at runtime the given argument is a struct, failing with &lt;a href=&quot;https://hexdocs.pm/elixir/BadStructError.html&quot;&gt;&lt;code&gt;BadStructError&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">上記の構文は、指定されたキーがコンパイル時に有効であることを保証し、実行時に指定された引数が構造体であることを&lt;a href=&quot;https://hexdocs.pm/elixir/BadStructError.html&quot;&gt; &lt;code&gt;BadStructError&lt;/code&gt; &lt;/a&gt;ます。それ以外の場合はBadStructErrorで失敗します。</target>
        </trans-unit>
        <trans-unit id="3346ccb7be2d14285ad110f9bf13a253d6668e2a" translate="yes" xml:space="preserve">
          <source>The syntax is to put the function and its input on the left side of the &lt;code&gt;::&lt;/code&gt; and the return value&amp;rsquo;s type on the right side. Be aware that types &lt;em&gt;may&lt;/em&gt; omit parentheses.</source>
          <target state="translated">構文は、関数とその入力を &lt;code&gt;::&lt;/code&gt; の左側に配置し、戻り値の型を右側に配置することです。型&lt;em&gt;によって&lt;/em&gt;括弧&lt;em&gt;が&lt;/em&gt;省略される&lt;em&gt;場合がある&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b84a63985dcdfb17ccdca5bd58bdd7687878200d" translate="yes" xml:space="preserve">
          <source>The system sets different environment variables. The following variables are set early on and can only be read by &lt;code&gt;env.sh&lt;/code&gt; and &lt;code&gt;env.bat&lt;/code&gt;:</source>
          <target state="translated">システムはさまざまな環境変数を設定します。次の変数は早い段階で設定され、 &lt;code&gt;env.sh&lt;/code&gt; と &lt;code&gt;env.bat&lt;/code&gt; でのみ読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="15e9fc5e9c4c2be91d093aa25daa8c7249775f24" translate="yes" xml:space="preserve">
          <source>The tail elements of aliases are guaranteed to always be atoms.</source>
          <target state="translated">エイリアスの末尾要素は常にアトムであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="0bcdf2274bc91e89bdf8524fe117cd1e390a0aae" translate="yes" xml:space="preserve">
          <source>The task can now be invoked with &lt;code&gt;mix hello&lt;/code&gt;.</source>
          <target state="translated">これで、タスクは &lt;code&gt;mix hello&lt;/code&gt; で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2ca9f432a46eddec31b6e992a693b8edf32b4e5d" translate="yes" xml:space="preserve">
          <source>The template in &lt;code&gt;source&lt;/code&gt; is evaluated with the given &lt;code&gt;assigns&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 内のテンプレートは、指定された &lt;code&gt;assigns&lt;/code&gt; 評価されます。</target>
        </trans-unit>
        <trans-unit id="4fec88603f65815ad051446d1e908302ee019778" translate="yes" xml:space="preserve">
          <source>The temporary directory path is unique (includes the test module and test name) and thus appropriate for running tests concurrently. You can customize the path further by setting the tag to a string, e.g.: &lt;code&gt;tmp_dir: &quot;my_path&quot;&lt;/code&gt;, which would make the final path to be: &lt;code&gt;tmp/&amp;lt;module&amp;gt;/&amp;lt;test&amp;gt;/my_path&lt;/code&gt;.</source>
          <target state="translated">一時ディレクトリパスは一意であるため（テストモジュールとテスト名を含む）、テストを同時に実行するのに適しています。タグを文字列に設定することで、パスをさらにカスタマイズできます（例： &lt;code&gt;tmp_dir: &quot;my_path&quot;&lt;/code&gt; ）。これにより、最終パスは &lt;code&gt;tmp/&amp;lt;module&amp;gt;/&amp;lt;test&amp;gt;/my_path&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="60d7de295785ea0605333a1eba6bb25d621b6acc" translate="yes" xml:space="preserve">
          <source>The terms are only considered to be exactly equal if they have the same value and are of the same type. For example, &lt;code&gt;1 == 1.0&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, but since they are of different types, &lt;code&gt;1 === 1.0&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">用語は、それらが同じ値を持ち、同じタイプである場合にのみ、完全に等しいと見なされます。たとえば、 &lt;code&gt;1 == 1.0&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返しますが、型が異なるため、 &lt;code&gt;1 === 1.0&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="705df9c2e6adef6ee615fd1500b80411120b3a6b" translate="yes" xml:space="preserve">
          <source>The test above will fail on the last assertion as the bucket name remains in the registry even after we stop the bucket process.</source>
          <target state="translated">バケットプロセスを停止した後もバケット名がレジストリに残っているため、上記のテストは最後のアサーションで失敗します。</target>
        </trans-unit>
        <trans-unit id="c419758630890afee6c5cb360c0c3e39b020572b" translate="yes" xml:space="preserve">
          <source>The test files are sorted upfront in a round-robin fashion. Note the partition itself is given as an environment variable so it can be accessed in config files and test scripts. For example, it can be used to setup a different database instance per partition in &lt;code&gt;config/test.exs&lt;/code&gt;.</source>
          <target state="translated">テストファイルは、ラウンドロビン方式で事前に並べ替えられます。パーティション自体は環境変数として指定されているため、構成ファイルやテストスクリプトでアクセスできることに注意してください。たとえば、 &lt;code&gt;config/test.exs&lt;/code&gt; パーティションごとに異なるデータベースインスタンスを設定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2570223385e731ad04d7b7880f45f2e4a73c2ce4" translate="yes" xml:space="preserve">
          <source>The test is similar to &amp;ldquo;removes bucket on exit&amp;rdquo; except that we are being a bit more harsh by sending &lt;code&gt;:shutdown&lt;/code&gt; as the exit reason instead of &lt;code&gt;:normal&lt;/code&gt;. If a process terminates with a reason different than &lt;code&gt;:normal&lt;/code&gt;, all linked processes receive an EXIT signal, causing the linked process to also terminate unless it is trapping exits.</source>
          <target state="translated">このテストは、「終了時にバケットを削除する」に似ていますが、 &lt;code&gt;:normal&lt;/code&gt; ではなく、終了の理由として &lt;code&gt;:shutdown&lt;/code&gt; を送信することで、もう少し厳しくなっています。プロセスが &lt;code&gt;:normal&lt;/code&gt; とは異なる理由で終了した場合、リンクされたすべてのプロセスはEXITシグナルを受信し、リンクされたプロセスも終了をトラップしない限り終了します。</target>
        </trans-unit>
        <trans-unit id="80778ceb5bc9dd6da4a613a6cd5240315d4115bd" translate="yes" xml:space="preserve">
          <source>The test may also define a &lt;code&gt;var&lt;/code&gt;, which will pattern match on the test context. For more information on contexts, see &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html&quot;&gt;&lt;code&gt;ExUnit.Callbacks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストでは、テストコンテキストでパターンマッチングを行う &lt;code&gt;var&lt;/code&gt; を定義することもできます。コンテキストの詳細については、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html&quot;&gt; &lt;code&gt;ExUnit.Callbacks&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bdde6c13039b2d4b85652376fce95fabfa20deef" translate="yes" xml:space="preserve">
          <source>The test should pass.</source>
          <target state="translated">試験は合格するはずです。</target>
        </trans-unit>
        <trans-unit id="3bf29b425a5cead446e53e0022f0fce0236e0195" translate="yes" xml:space="preserve">
          <source>The test type will be converted to a string and pluralized for display. You can use &lt;a href=&quot;exunit#plural_rule/2&quot;&gt;&lt;code&gt;ExUnit.plural_rule/2&lt;/code&gt;&lt;/a&gt; to set a custom pluralization.</source>
          <target state="translated">テストタイプは文字列に変換され、複数形で表示されます。&lt;a href=&quot;exunit#plural_rule/2&quot;&gt; &lt;code&gt;ExUnit.plural_rule/2&lt;/code&gt; &lt;/a&gt;を使用して、カスタムの複数形を設定できます。</target>
        </trans-unit>
        <trans-unit id="04db17fea40288d1a870e2f7e8d0c93c33a565d3" translate="yes" xml:space="preserve">
          <source>The test type will be converted to a string and pluralized for display. You can use &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#plural_rule/2&quot;&gt;&lt;code&gt;ExUnit.plural_rule/2&lt;/code&gt;&lt;/a&gt; to set a custom pluralization.</source>
          <target state="translated">テストタイプは文字列に変換され、表示のために複数形になります。&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#plural_rule/2&quot;&gt; &lt;code&gt;ExUnit.plural_rule/2&lt;/code&gt; &lt;/a&gt;を使用して、カスタムの複数形を設定できます。</target>
        </trans-unit>
        <trans-unit id="a927d1705beb862013fa4736d80e7112683437e5" translate="yes" xml:space="preserve">
          <source>The third approach uses macros, and is by far the most complex. It will take more lines of code to implement, it is hard and expensive to test (compared to testing simple functions), and it limits how the user may use the library since all validations need to be defined inside a module.</source>
          <target state="translated">3番目のアプローチはマクロを使いますが、これが最も複雑です。実装するにはコード行数が多くなりますし、(単純な関数をテストするのに比べて)テストが難しく、コストがかかります。</target>
        </trans-unit>
        <trans-unit id="1d45004d92cd0fa8dd37a67dc40c34ac5fe7a8f6" translate="yes" xml:space="preserve">
          <source>The third argument given to &lt;a href=&quot;#register/3&quot;&gt;&lt;code&gt;register/3&lt;/code&gt;&lt;/a&gt; is a value associated to the current process. While in the previous section we used it when dispatching, in this particular example we are not interested in it, so we have set it to an empty list. You could store a more meaningful value if necessary.</source>
          <target state="translated">&lt;a href=&quot;#register/3&quot;&gt; &lt;code&gt;register/3&lt;/code&gt; に&lt;/a&gt;与えられる3番目の引数は、現在のプロセスに関連付けられた値です。前のセクションではディスパッチするときにそれを使用しましたが、この特定の例ではそれには興味がないので、空のリストに設定しました。必要に応じて、より意味のある値を保存できます。</target>
        </trans-unit>
        <trans-unit id="286a4f81139162ba612e0fc78d910245b92506ae" translate="yes" xml:space="preserve">
          <source>The third argument is the stacktrace which is used to enrich a normalized error with more information. It is only used when the kind is an error.</source>
          <target state="translated">3番目の引数はスタックトレースで、正規化されたエラーをより多くの情報で補完するために使用されます。これは種類がエラーの場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="b0469bb3fc164355009dcbe32b659229c5de7434" translate="yes" xml:space="preserve">
          <source>The third element is either a list of arguments for the function call or an atom. When this element is an atom, it means the tuple represents a variable.</source>
          <target state="translated">3番目の要素は、関数呼び出しの引数のリストかアトムです。この要素がアトムの場合、タプルが変数を表していることを意味します。</target>
        </trans-unit>
        <trans-unit id="61d0bd68d9312dd1a2b6bc353f3631650af592e9" translate="yes" xml:space="preserve">
          <source>The third element of the tuple are the arguments for the function call. The third argument may be an atom, which is usually a variable (or a local call).</source>
          <target state="translated">タプルの3番目の要素は、関数呼び出しの引数です。3番目の引数は、通常は変数(またはローカルコール)であるアトムである可能性があります。</target>
        </trans-unit>
        <trans-unit id="e03e20762e8bbf0a5e287057fa9da1be08a2ebb0" translate="yes" xml:space="preserve">
          <source>The third part, the body, is a list of shapes of the returned entries. Like guards, you have access to assigned variables like &lt;code&gt;:&quot;$1&quot;&lt;/code&gt;, which you can combine with hardcoded values to freely shape entries Note that tuples have to be wrapped in an additional tuple. To get a result format like &lt;code&gt;%{key: key, pid: pid, value: value}&lt;/code&gt;, assuming you bound those variables in order in the match part, you would provide a body like &lt;code&gt;[%{key: :&quot;$1&quot;, pid: :&quot;$2&quot;, value: :&quot;$3&quot;}]&lt;/code&gt;. Like guards, you can use some operations like &lt;code&gt;:element&lt;/code&gt; to modify the output format.</source>
          <target state="translated">3番目の部分であるボディは、返されたエントリの形状のリストです。ガードと同様に、 &lt;code&gt;:&quot;$1&quot;&lt;/code&gt; ような割り当てられた変数にアクセスできます。ハードコーディングされた値と組み合わせて、エントリを自由に形成できます。タプルは追加のタプルでラップする必要があります。 &lt;code&gt;%{key: key, pid: pid, value: value}&lt;/code&gt; ような結果形式を取得するには、一致部分でこれらの変数を順番にバインドしていると想定して、 &lt;code&gt;[%{key: :&quot;$1&quot;, pid: :&quot;$2&quot;, value: :&quot;$3&quot;}]&lt;/code&gt; 。ガードと同様に、 &lt;code&gt;:element&lt;/code&gt; などのいくつかの操作を使用して、出力形式を変更できます。</target>
        </trans-unit>
        <trans-unit id="dd8a93e3bf717eed4a2e3026f8f31870641fb464" translate="yes" xml:space="preserve">
          <source>The time functions in this module work in the &lt;code&gt;:native&lt;/code&gt; unit (unless specified otherwise), which is operating system dependent. Most of the time, all calculations are done in the &lt;code&gt;:native&lt;/code&gt; unit, to avoid loss of precision, with &lt;a href=&quot;#convert_time_unit/3&quot;&gt;&lt;code&gt;convert_time_unit/3&lt;/code&gt;&lt;/a&gt; being invoked at the end to convert to a specific time unit like &lt;code&gt;:millisecond&lt;/code&gt; or &lt;code&gt;:microsecond&lt;/code&gt;. See the &lt;a href=&quot;#t:time_unit/0&quot;&gt;&lt;code&gt;time_unit/0&lt;/code&gt;&lt;/a&gt; type for more information.</source>
          <target state="translated">このモジュールの時間関数は、オペレーティングシステムに依存する &lt;code&gt;:native&lt;/code&gt; ユニット（別段の指定がない限り）で機能します。ほとんどの場合、すべての計算は &lt;code&gt;:native&lt;/code&gt; 単位で行われ、精度の低下を回避し&lt;a href=&quot;#convert_time_unit/3&quot;&gt; &lt;code&gt;convert_time_unit/3&lt;/code&gt; &lt;/a&gt;最後にconvert_time_unit / 3が呼び出され、 &lt;code&gt;:millisecond&lt;/code&gt; や &lt;code&gt;:microsecond&lt;/code&gt; などの特定の時間単位に変換されます。詳細については、&lt;a href=&quot;#t:time_unit/0&quot;&gt; &lt;code&gt;time_unit/0&lt;/code&gt; &lt;/a&gt;タイプを参照してください。</target>
        </trans-unit>
        <trans-unit id="c81a5f56c30620f4ca3fdbd7994e540bcd3307ec" translate="yes" xml:space="preserve">
          <source>The time type returned in &lt;code&gt;atime&lt;/code&gt;, &lt;code&gt;mtime&lt;/code&gt;, and &lt;code&gt;ctime&lt;/code&gt; is dependent on the time type set in options. &lt;code&gt;{:time, type}&lt;/code&gt; where type can be &lt;code&gt;:local&lt;/code&gt;, &lt;code&gt;:universal&lt;/code&gt;, or &lt;code&gt;:posix&lt;/code&gt;. Default is &lt;code&gt;:universal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;atime&lt;/code&gt; 、 &lt;code&gt;mtime&lt;/code&gt; 、および &lt;code&gt;ctime&lt;/code&gt; で返される時間タイプは、オプションで設定された時間タイプに依存します。 &lt;code&gt;{:time, type}&lt;/code&gt; typeは &lt;code&gt;:local&lt;/code&gt; 、 &lt;code&gt;:universal&lt;/code&gt; 、または &lt;code&gt;:posix&lt;/code&gt; です。デフォルトは &lt;code&gt;:universal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6ccc7b51abb959b7b6a642bc36ea122d38002d9a" translate="yes" xml:space="preserve">
          <source>The time unit to be passed to functions like &lt;a href=&quot;#monotonic_time/1&quot;&gt;&lt;code&gt;monotonic_time/1&lt;/code&gt;&lt;/a&gt; and others.</source>
          <target state="translated">&lt;a href=&quot;#monotonic_time/1&quot;&gt; &lt;code&gt;monotonic_time/1&lt;/code&gt; &lt;/a&gt;などの関数に渡される時間単位。</target>
        </trans-unit>
        <trans-unit id="1bbd3b4515f159eff3b51909840a9c295b77b423" translate="yes" xml:space="preserve">
          <source>The time zone ID according to the IANA tz database (e.g. Europe/Zurich)</source>
          <target state="translated">IANA tzデータベースによるタイムゾーンID(例:ヨーロッパ/チューリッヒ</target>
        </trans-unit>
        <trans-unit id="9e127d4e3ff4d398a6cfe90803c629c4523b576a" translate="yes" xml:space="preserve">
          <source>The time zone ID according to the IANA tz database (for example, Europe/Zurich)</source>
          <target state="translated">IANA tz データベースに基づくタイムゾーン ID (例:Europe/Zurich)</target>
        </trans-unit>
        <trans-unit id="b125596c86be66bad3036f66746716d52648f027" translate="yes" xml:space="preserve">
          <source>The time zone UTC offset in seconds</source>
          <target state="translated">タイムゾーンのUTCオフセット(秒単位</target>
        </trans-unit>
        <trans-unit id="3df5c55c74cecebffe247785901344586d62d59b" translate="yes" xml:space="preserve">
          <source>The time zone UTC offset in seconds for standard time.</source>
          <target state="translated">標準時のタイムゾーンUTCオフセットを秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="4a33e0326e0255c69b66326b76b995f67cc50bc7" translate="yes" xml:space="preserve">
          <source>The time zone abbreviation (e.g. CET or CEST or BST etc.)</source>
          <target state="translated">タイムゾーンの略語(例:CET、CEST、BSTなど)。</target>
        </trans-unit>
        <trans-unit id="e483f17410a33eb44510ffea9561b18ac2cf91e9" translate="yes" xml:space="preserve">
          <source>The time zone abbreviation (for example, CET or CEST or BST, and such)</source>
          <target state="translated">タイムゾーンの略語(例えば、CETやCEST、BSTなど)。</target>
        </trans-unit>
        <trans-unit id="fcad795376e4abb458cc8e3841c41b9eba5c998c" translate="yes" xml:space="preserve">
          <source>The time zone standard offset in seconds (not zero in summer times)</source>
          <target state="translated">タイムゾーンの標準オフセットを秒単位で指定します(夏場はゼロではありません)。</target>
        </trans-unit>
        <trans-unit id="25fd14442f68de45c7fa315a32da5dbaeb94d1d8" translate="yes" xml:space="preserve">
          <source>The time zone standard offset in seconds (typically not zero in summer times).</source>
          <target state="translated">時間帯の標準的なオフセットを秒単位で表示します(通常、夏時間ではゼロではありません)。</target>
        </trans-unit>
        <trans-unit id="cce73f4a8a7c3c6d7d87f75bc5aa727351d2f2f2" translate="yes" xml:space="preserve">
          <source>The timer will be automatically canceled if the given &lt;code&gt;dest&lt;/code&gt; is a PID which is not alive or when the given PID exits. Note that timers will not be automatically canceled when &lt;code&gt;dest&lt;/code&gt; is an atom (as the atom resolution is done on delivery).</source>
          <target state="translated">指定された &lt;code&gt;dest&lt;/code&gt; がPIDが有効でない場合、または指定されたPIDが存在する場合、タイマーは自動的にキャンセルされます。 &lt;code&gt;dest&lt;/code&gt; がアトムの場合、タイマーは自動的にキャンセルされないことに注意してください（アトム解決は配信時に行われるため）。</target>
        </trans-unit>
        <trans-unit id="95f67c03b8dd416c9af30e47423ea3401d29e99a" translate="yes" xml:space="preserve">
          <source>The trait can be one of two options:</source>
          <target state="translated">形質は2つの選択肢のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="8c51e1e67805ed16c58e9c1e802e36335ea6aca4" translate="yes" xml:space="preserve">
          <source>The trouble with state</source>
          <target state="translated">国家をめぐるトラブル</target>
        </trans-unit>
        <trans-unit id="a1d02c2f92fc207d7072d19d88bfe702734e4f16" translate="yes" xml:space="preserve">
          <source>The tuple above represents a function call to &lt;code&gt;sum&lt;/code&gt; passing 1, 2 and 3 as arguments. The tuple elements are:</source>
          <target state="translated">上記のタプルは、1、2、3を引数として &lt;code&gt;sum&lt;/code&gt; を渡す関数呼び出しを表しています。タプル要素は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="88ca5571ed44473b8f3ce89710c5edfce0720f58" translate="yes" xml:space="preserve">
          <source>The two syntaxes are completely equivalent. Like atoms, keyword lists keys must be composed of Unicode characters such as letters, numbers, underscore, and &lt;code&gt;@&lt;/code&gt;. If the keyword has a character that does not belong to the category above, such as spaces, you can wrap it in quotes:</source>
          <target state="translated">2つの構文は完全に同等です。アトムと同様に、キーワードリストキーは、文字、数字、アンダースコア、 &lt;code&gt;@&lt;/code&gt; などのUnicode文字で構成されている必要があります。キーワードにスペースなど、上記のカテゴリに属さない文字が含まれている場合は、引用符で囲むことができます。</target>
        </trans-unit>
        <trans-unit id="0be32613fcd0e0034d6c53c421573b087961e380" translate="yes" xml:space="preserve">
          <source>The two syntaxes are completely equivalent. Like atoms, keywords must be composed of Unicode characters such as letters, numbers, underscore, and &lt;code&gt;@&lt;/code&gt;. If the keyword has a character that does not belong to the category above, such as spaces, you can wrap it in quotes:</source>
          <target state="translated">2つの構文は完全に同等です。アトムと同様に、キーワードは、文字、数字、アンダースコア、 &lt;code&gt;@&lt;/code&gt; などのUnicode文字で構成する必要があります。キーワードにスペースなど、上記のカテゴリに属さない文字が含まれている場合は、引用符で囲むことができます。</target>
        </trans-unit>
        <trans-unit id="c03fb1d89c3fb5cf593c60e9aa138dedff7e09ba" translate="yes" xml:space="preserve">
          <source>The two syntaxes for accessing keys reveal the dual nature of maps. The &lt;code&gt;map[key]&lt;/code&gt; syntax is used for dynamically created maps that may have any key, of any type. &lt;code&gt;map.key&lt;/code&gt; is used with maps that hold a predetermined set of atoms keys, which are expected to always be present. Structs, defined via &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt;, are one example of such &quot;static maps&quot;, where the keys can also be checked during compile time.</source>
          <target state="translated">キーにアクセスするための2つの構文は、マップの二重の性質を明らかにします。 &lt;code&gt;map[key]&lt;/code&gt; の構文は、任意のタイプのいずれかのキーを有していてもよい動的に作成されたマップのために使用されています。 &lt;code&gt;map.key&lt;/code&gt; は、常に存在すると予想されるアトムキーの所定のセットを保持するマップで使用されます。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;を介して定義された構造体は、そのような「静的マップ」の一例であり、コンパイル時にキーをチェックすることもできます。</target>
        </trans-unit>
        <trans-unit id="7bf824f894b5901f732af99ee1c6741c2c8f9460" translate="yes" xml:space="preserve">
          <source>The two syntaxes for accessing keys reveal the dual nature of maps. The &lt;code&gt;map[key]&lt;/code&gt; syntax is used for dynamically created maps that may have any key, of any type. &lt;code&gt;map.key&lt;/code&gt; is used with maps that hold a predetermined set of atoms keys, which are expected to always be present. Structs, defined via &lt;a href=&quot;kernel#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt;, are one example of such &quot;static maps&quot;, where the keys can also be checked during compile time.</source>
          <target state="translated">キーにアクセスするための2つの構文は、マップの二重の性質を明らかにします。 &lt;code&gt;map[key]&lt;/code&gt; の構文は、任意のタイプのいずれかのキーを有していてもよい動的に作成されたマップのために使用されています。 &lt;code&gt;map.key&lt;/code&gt; は、事前に定義された一連のアトムキーを保持するマップで使用されます。これらのキーは常に存在することが期待されています。&lt;a href=&quot;kernel#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;を介して定義される構造体は、そのような「静的マップ」の一例であり、コンパイル時にキーを確認することもできます。</target>
        </trans-unit>
        <trans-unit id="27b2df44172f3a57aa97a9d731e7cf407e529ef4" translate="yes" xml:space="preserve">
          <source>The type of keys allowed on registration</source>
          <target state="translated">登録時に許可される鍵の種類</target>
        </trans-unit>
        <trans-unit id="2981849bde4b665272891869623a6b0939beaaa5" translate="yes" xml:space="preserve">
          <source>The type of registry metadata keys</source>
          <target state="translated">レジストリのメタデータキーの種類</target>
        </trans-unit>
        <trans-unit id="1b222464dab205a6bd54b94d0bb3729d611af5dc" translate="yes" xml:space="preserve">
          <source>The type of registry metadata values</source>
          <target state="translated">レジストリのメタデータ値の種類</target>
        </trans-unit>
        <trans-unit id="1d6b108d320c16acf0d32c924ccacb139089d8c7" translate="yes" xml:space="preserve">
          <source>The type of the registry</source>
          <target state="translated">レジストリの種類</target>
        </trans-unit>
        <trans-unit id="53279e10023dca8a2288968b9bcf710b0c986964" translate="yes" xml:space="preserve">
          <source>The type of values allowed on registration</source>
          <target state="translated">登録時に許可される値の種類</target>
        </trans-unit>
        <trans-unit id="96d309a1ca8c9b49d61652c9574ee5761b49d46b" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;String.t()&lt;/code&gt; and &lt;code&gt;binary()&lt;/code&gt; are equivalent to analysis tools. Although, for those reading the documentation, &lt;code&gt;String.t()&lt;/code&gt; implies it is a UTF-8 encoded binary.</source>
          <target state="translated">タイプ &lt;code&gt;String.t()&lt;/code&gt; および &lt;code&gt;binary()&lt;/code&gt; は分析ツールと同等です。ドキュメントを読む人にとって、 &lt;code&gt;String.t()&lt;/code&gt; はそれがUTF-8エンコードされたバイナリであることを意味します。</target>
        </trans-unit>
        <trans-unit id="fd984a4e58cc83d476fe33ed807205982b711883" translate="yes" xml:space="preserve">
          <source>The types of the struct fields that are not included in &lt;code&gt;%User{}&lt;/code&gt; default to &lt;code&gt;term()&lt;/code&gt; (see &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;term/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;%User{}&lt;/code&gt; 含まれていない構造体フィールドのタイプは、デフォルトで &lt;code&gt;term()&lt;/code&gt; になります（&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt; &lt;code&gt;term/0&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="cb8c250a62b4261ebc510b4a71573c121311d0bb" translate="yes" xml:space="preserve">
          <source>The types of the struct fields that are not included in &lt;code&gt;%User{}&lt;/code&gt; default to &lt;code&gt;term()&lt;/code&gt; (see &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;term/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;%User{}&lt;/code&gt; 含まれていない構造体フィールドのタイプは、デフォルトで &lt;code&gt;term()&lt;/code&gt; になります（&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;term/0&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b4b4572dc37f28e7b3a1df4f6c8add52491639ae" translate="yes" xml:space="preserve">
          <source>The underscore variable (&lt;code&gt;_&lt;/code&gt;) has a special meaning as it can never be bound to any value. It is especially useful when you don't care about certain value in a pattern:</source>
          <target state="translated">アンダースコア変数（ &lt;code&gt;_&lt;/code&gt; ）は、どの値にもバインドできないため、特別な意味があります。パターン内の特定の値を気にしない場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="d2b5512b33fdcb38fab8fdf28a5c744cc440968f" translate="yes" xml:space="preserve">
          <source>The unit can also be an integer as in &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">単位は、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; の&lt;/a&gt;ように整数にすることもできます。</target>
        </trans-unit>
        <trans-unit id="8b47b534c105a2118838e65f4bd8f13e6c75b738" translate="yes" xml:space="preserve">
          <source>The unit can also be an integer as in &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">単位は&lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; の&lt;/a&gt;ように整数にすることもできます。</target>
        </trans-unit>
        <trans-unit id="a447ce422905d13f06edc954109b01bb1211f3ed" translate="yes" xml:space="preserve">
          <source>The unreachable and deprecated checks below happen every time your project is compiled via &lt;a href=&quot;mix.tasks.compile.xref&quot;&gt;&lt;code&gt;mix compile.xref&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;mix.tasks.compile.xref&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Xref&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">以下の到達不能で非推奨のチェックは、プロジェクトが&lt;a href=&quot;mix.tasks.compile.xref&quot;&gt; &lt;code&gt;mix compile.xref&lt;/code&gt; &lt;/a&gt;を介してコンパイルされるたびに発生します。詳細については、&lt;a href=&quot;mix.tasks.compile.xref&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Xref&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f350c7b62e10906702ea9465bc4c4e8ee009110d" translate="yes" xml:space="preserve">
          <source>The usage of &lt;code&gt;:ok&lt;/code&gt;/&lt;code&gt;:error&lt;/code&gt; tuples is about the domain that the function works on, in this case, file system access. Bad arguments, logical errors, invalid options should raise regardless of the function name. If in doubt, prefer to return tuples instead of raising, as users of your library can always match on the results and raise if necessary.</source>
          <target state="translated">&lt;code&gt;:ok&lt;/code&gt; / &lt;code&gt;:error&lt;/code&gt; タプルの使用法は、関数が機能するドメイン、この場合はファイルシステムアクセスに関するものです。不正な引数、論理エラー、無効なオプションは、関数名に関係なく発生するはずです。ライブラリーのユーザーは常に結果を照合し、必要に応じてレイズできるため、疑問がある場合は、レイズではなくタプルを返すことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f2761fc5ed5c6c550d3c3f11fa24ee7951107bd4" translate="yes" xml:space="preserve">
          <source>The user must press Enter or type one of &quot;y&quot;, &quot;yes&quot;, &quot;Y&quot;, &quot;YES&quot; or &quot;Yes&quot;.</source>
          <target state="translated">ユーザーは、Enterキーを押すか、「y」、「yes」、「Y」、「YES」、「YES」のいずれかを入力しなければならない。</target>
        </trans-unit>
        <trans-unit id="067adddb8899b26a44c6d119cc5060679343ac3f" translate="yes" xml:space="preserve">
          <source>The valid parameters you can use are:</source>
          <target state="translated">使用できる有効なパラメータは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="3e5fe130617142d21e815f74a253669918514b41" translate="yes" xml:space="preserve">
          <source>The value emitted is &lt;code&gt;0&lt;/code&gt;. This operation will block the caller by the given time until the element is streamed.</source>
          <target state="translated">放出される値は &lt;code&gt;0&lt;/code&gt; です。この操作は、要素がストリーミングされるまで、指定された時間までに呼び出し元をブロックします。</target>
        </trans-unit>
        <trans-unit id="d90bdb7c5d59a88b306900023f5ca84001349ca6" translate="yes" xml:space="preserve">
          <source>The value is a keyword list with two possible keys representing prompt types:</source>
          <target state="translated">値は、プロンプトタイプを表す2つの可能なキーを持つキーワードリストです。</target>
        </trans-unit>
        <trans-unit id="caa6577865e36568b3711626c14e00f9b424ae56" translate="yes" xml:space="preserve">
          <source>The value is no longer a binary, but a bitstring &amp;ndash; a bunch of bits! So a binary is a bitstring where the number of bits is divisible by 8.</source>
          <target state="translated">値はもはやバイナリではなく、ビット文字列&amp;ndash;ビットの束です。したがって、バイナリは、ビット数が8で割り切れるビット文字列です。</target>
        </trans-unit>
        <trans-unit id="3cc68a54cd0dbc959bc6164a6a2b53075dfa30ea" translate="yes" xml:space="preserve">
          <source>The values emitted are an increasing counter starting at &lt;code&gt;0&lt;/code&gt;. This operation will block the caller by the given interval every time a new element is streamed.</source>
          <target state="translated">出力される値は、 &lt;code&gt;0&lt;/code&gt; から始まる増加するカウンターです。この操作は、新しい要素がストリーミングされるたびに、指定された間隔で呼び出し元をブロックします。</target>
        </trans-unit>
        <trans-unit id="be1b57a18ace41fb8f93930afe8b1ad887b40d1d" translate="yes" xml:space="preserve">
          <source>The values for &lt;code&gt;:case&lt;/code&gt; can be:</source>
          <target state="translated">&lt;code&gt;:case&lt;/code&gt; の値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="3a8416871ca07e4a4f59fb2e54024c09ce510c3d" translate="yes" xml:space="preserve">
          <source>The values for &lt;code&gt;:padding&lt;/code&gt; can be:</source>
          <target state="translated">&lt;code&gt;:padding&lt;/code&gt; の値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="48b014b54ab14e39b32c6219693fd725eede8847" translate="yes" xml:space="preserve">
          <source>The values for &lt;code&gt;:time&lt;/code&gt; can be:</source>
          <target state="translated">&lt;code&gt;:time&lt;/code&gt; の値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="21f3f4f945d9026f4fff4e43f08cf7f4707e46e4" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;_&lt;/code&gt; is special in that it can never be read from. Trying to read from it gives a compile error:</source>
          <target state="translated">変数 &lt;code&gt;_&lt;/code&gt; は、読み取れないという点で特別です。そこから読み取ろうとすると、コンパイルエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="9e1be81239623e7fbf2a82d7e2a4f2b80599067d" translate="yes" xml:space="preserve">
          <source>The variables defined inside &lt;code&gt;quote&lt;/code&gt; won't be available during prying due to the hygiene mechanism in quoted expressions. The hygiene mechanism changes the variable names in quoted expressions so they don't collide with variables defined by the users of the macros. Therefore the original names are not available.</source>
          <target state="translated">&lt;code&gt;quote&lt;/code&gt; 内で定義された変数は、引用符で囲まれた式の衛生メカニズムのため、こじ開け中は使用できません。衛生メカニズムは、引用符で囲まれた式の変数名を変更して、マクロのユーザーによって定義された変数と衝突しないようにします。したがって、元の名前は使用できません。</target>
        </trans-unit>
        <trans-unit id="c8744b53eaf293e92df6d8b3f6054f83b09340e5" translate="yes" xml:space="preserve">
          <source>The version is represented by the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/a&gt; struct and fields are named according to SemVer 2.0: &lt;code&gt;:major&lt;/code&gt;, &lt;code&gt;:minor&lt;/code&gt;, &lt;code&gt;:patch&lt;/code&gt;, &lt;code&gt;:pre&lt;/code&gt;, and &lt;code&gt;:build&lt;/code&gt;.</source>
          <target state="translated">バージョンは&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Version&lt;/code&gt; &lt;/a&gt;構造体で表され、フィールドにはSemVer 2.0 &lt;code&gt;:major&lt;/code&gt; 、 &lt;code&gt;:minor&lt;/code&gt; 、 &lt;code&gt;:patch&lt;/code&gt; 、 &lt;code&gt;:pre&lt;/code&gt; 、および &lt;code&gt;:build&lt;/code&gt; に従って名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="1d0b621f78879c76c317ddf557989e7b4d0a18c9" translate="yes" xml:space="preserve">
          <source>The version is represented by the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/a&gt; struct and fields are named according to SemVer: &lt;code&gt;:major&lt;/code&gt;, &lt;code&gt;:minor&lt;/code&gt;, &lt;code&gt;:patch&lt;/code&gt;, &lt;code&gt;:pre&lt;/code&gt;, and &lt;code&gt;:build&lt;/code&gt;.</source>
          <target state="translated">バージョンは&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Version&lt;/code&gt; &lt;/a&gt;構造体で表され、フィールドにはSemVer &lt;code&gt;:major&lt;/code&gt; 、 &lt;code&gt;:minor&lt;/code&gt; 、 &lt;code&gt;:patch&lt;/code&gt; 、 &lt;code&gt;:pre&lt;/code&gt; 、および &lt;code&gt;:build&lt;/code&gt; に従って名前が付けられます。</target>
        </trans-unit>
        <trans-unit id="64e09f157d5e5070ea793feca6351f0810f54544" translate="yes" xml:space="preserve">
          <source>The version without &lt;code&gt;!&lt;/code&gt; is preferred when you want to handle different outcomes using pattern matching:</source>
          <target state="translated">なしバージョン &lt;code&gt;!&lt;/code&gt; パターンマッチングを使用してさまざまな結果を処理する場合に推奨されます。</target>
        </trans-unit>
        <trans-unit id="e2528fcfa71e426e6f186925ba5d183a72e0825f" translate="yes" xml:space="preserve">
          <source>The wildcard looks like an ordinary path, except that the following &quot;wildcard characters&quot; are interpreted in a special way:</source>
          <target state="translated">ワイルドカードは通常のパスと同じように見えますが、次の「ワイルドカード文字」が特殊な方法で解釈されることを除いては。</target>
        </trans-unit>
        <trans-unit id="0fcbc9b2e71d94abc862c5aacc86295bf5f87ef7" translate="yes" xml:space="preserve">
          <source>The year parsed by this function is limited to four digits and, while ISO 8601 allows datetimes to specify 24:00:00 as the zero hour of the next day, this notation is not supported by Elixir. Note leap seconds are not supported by the built-in Calendar.ISO.</source>
          <target state="translated">この関数で解析される年は4桁に制限されており、ISO 8601では翌日の0時を24:00:00に指定することができますが、Elixirではこの表記はサポートされていません。うるう秒は、組み込みのCalendar.ISOではサポートされていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="43359a56ca5b9f74f8ed54225f235a4eac841d33" translate="yes" xml:space="preserve">
          <source>The year parsed by this function is limited to four digits.</source>
          <target state="translated">この関数で解析された年は4桁に制限されています。</target>
        </trans-unit>
        <trans-unit id="42c8fd279491ba3a5a79a3fc57c18b896f2e8d7e" translate="yes" xml:space="preserve">
          <source>The zip and zlib modules</source>
          <target state="translated">zip と zlib モジュール</target>
        </trans-unit>
        <trans-unit id="a928b0d99e54733f051669ca9f28257ad67f0a00" translate="yes" xml:space="preserve">
          <source>The zipping finishes as soon as any enumerable completes.</source>
          <target state="translated">ジッパーは、任意の列挙が完了するとすぐに終了します。</target>
        </trans-unit>
        <trans-unit id="92c61e8c081422e6cb087e5091e2eef8743332a7" translate="yes" xml:space="preserve">
          <source>The zipping finishes as soon as any enumerable in the given collection completes.</source>
          <target state="translated">ジッパーは、与えられたコレクションのいずれかの列挙が完了した時点で終了します。</target>
        </trans-unit>
        <trans-unit id="5390d109c8d9531238497e8770981143c5154c71" translate="yes" xml:space="preserve">
          <source>The zipping finishes as soon as any list terminates.</source>
          <target state="translated">任意のリストが終了するとすぐにジッピングが終了します。</target>
        </trans-unit>
        <trans-unit id="b625dd872916e65cdac731dbaa58c2540d9b95a9" translate="yes" xml:space="preserve">
          <source>Then we define a &lt;code&gt;start_link/1&lt;/code&gt; function, which will effectively start the agent. It is a convention to define a &lt;code&gt;start_link/1&lt;/code&gt; function that always accepts a list of options. We don&amp;rsquo;t plan on using any options right now, but we might later on. We then proceed to call &lt;code&gt;Agent.start_link/1&lt;/code&gt;, which receives an anonymous function that returns the Agent&amp;rsquo;s initial state.</source>
          <target state="translated">次に、 &lt;code&gt;start_link/1&lt;/code&gt; 関数を定義します。これにより、エージェントが効果的に開始されます。これは、常にオプションのリストを受け入れる &lt;code&gt;start_link/1&lt;/code&gt; 関数を定義するための規約です。現在、オプションを使用する予定はありませんが、後で使用する可能性があります。次に、 &lt;code&gt;Agent.start_link/1&lt;/code&gt; の呼び出しに進みます。これは、エージェントの初期状態を返す匿名関数を受け取ります。</target>
        </trans-unit>
        <trans-unit id="87d5cb2e280470b50ded81bad6b2dc9e656de005" translate="yes" xml:space="preserve">
          <source>Then when specifying your release, you can specify the provider in the release configuration:</source>
          <target state="translated">そして、リリースを指定する際には、リリース設定でプロバイダを指定します。</target>
        </trans-unit>
        <trans-unit id="a9efffd6370bf177135cf0838aedef8c490edaff" translate="yes" xml:space="preserve">
          <source>Then when specifying your release, you can specify the provider:</source>
          <target state="translated">そして、リリースを指定する際にプロバイダを指定します。</target>
        </trans-unit>
        <trans-unit id="90be63383bb86c2a9b4266d11b3e7f59bb1305ef" translate="yes" xml:space="preserve">
          <source>Then, we add the head of the list to the accumulator &lt;code&gt;head + accumulator&lt;/code&gt; and call &lt;code&gt;sum_list&lt;/code&gt; again, recursively, passing the tail of the list as its first argument. The tail will once again match &lt;code&gt;[head | tail]&lt;/code&gt; until the list is empty, as seen below:</source>
          <target state="translated">次に、リストの先頭をアキュムレータの &lt;code&gt;head + accumulator&lt;/code&gt; に追加し、最初の引数としてリストの末尾を渡して、 &lt;code&gt;sum_list&lt;/code&gt; を再帰的に呼び出します。尾は再び一致します &lt;code&gt;[head | tail]&lt;/code&gt; の下に見られるようにリストされるまでは、空であります：</target>
        </trans-unit>
        <trans-unit id="6b87f84651e39aeea5d926774256f894a29c7180" translate="yes" xml:space="preserve">
          <source>Then, whenever desired, those tests could be included in the run via the &lt;code&gt;--include&lt;/code&gt; option:</source>
          <target state="translated">次に、必要に応じて、これらのテストを &lt;code&gt;--include&lt;/code&gt; オプションを介して実行に含めることができます。</target>
        </trans-unit>
        <trans-unit id="34c7a694bb4b3edc18ed538476727a5e7423da3d" translate="yes" xml:space="preserve">
          <source>There are a couple of ways to guarantee that a release is built on a host with the same properties as the target. A simple option is to fetch the source, compile the code and assemble the release on the target itself. It would be something like this:</source>
          <target state="translated">リリースがターゲットと同じプロパティを持つホスト上にビルドされていることを保証する方法がいくつかあります。シンプルなオプションは、ソースを取得してコードをコンパイルし、ターゲット自身でリリースをアセンブルすることです。これは次のようなものです。</target>
        </trans-unit>
        <trans-unit id="b194d7af362d9259824b1fbfd5de6ca884c3d2da" translate="yes" xml:space="preserve">
          <source>There are a couple of ways to retrieve a character integer code point. One may use the &lt;code&gt;?&lt;/code&gt; construct:</source>
          <target state="translated">文字整数コードポイントを取得するには、いくつかの方法があります。一つは使用することができますか &lt;code&gt;?&lt;/code&gt; 構成：</target>
        </trans-unit>
        <trans-unit id="fd47a0efe22eeb6657bd6cb7a37660028cc2160e" translate="yes" xml:space="preserve">
          <source>There are a couple of ways to retrieve the character code point. One may use the &lt;code&gt;?&lt;/code&gt; construct:</source>
          <target state="translated">文字コードポイントを取得するには、いくつかの方法があります。 &lt;code&gt;?&lt;/code&gt; を使用することができます 構成：</target>
        </trans-unit>
        <trans-unit id="d172ca4ba6fbab564abb0cac6cec14ca318e2156" translate="yes" xml:space="preserve">
          <source>There are a couple other modifiers that can be useful when doing pattern matches on binaries. The &lt;code&gt;binary-size(n)&lt;/code&gt; modifier will match &lt;code&gt;n&lt;/code&gt; bytes in a binary:</source>
          <target state="translated">バイナリでパターン一致を行うときに役立つ他の修飾子がいくつかあります。 &lt;code&gt;binary-size(n)&lt;/code&gt; 修飾子が一致する &lt;code&gt;n&lt;/code&gt; バイナリバイト。</target>
        </trans-unit>
        <trans-unit id="1fd8e7b8f98e5336f83be9a7d713b450297e94ab" translate="yes" xml:space="preserve">
          <source>There are a couple other options here. One option is to spawn the distributed node programmatically at the beginning of &lt;code&gt;test/test_helper.exs&lt;/code&gt;. Erlang/OTP does provide APIs for doing so, but they are non-trivial and therefore we won&amp;rsquo;t cover them here.</source>
          <target state="translated">ここには他にもいくつかのオプションがあります。1つのオプションは、 &lt;code&gt;test/test_helper.exs&lt;/code&gt; の先頭でプログラムによって分散ノードを生成することです。Erlang / OTPはそうするためのAPIを提供しますが、それらは自明ではないので、ここではそれらをカバーしません。</target>
        </trans-unit>
        <trans-unit id="b5c718f04d68cfff9168f654a99aa0bd9577e3dd" translate="yes" xml:space="preserve">
          <source>There are a couple ways in which developers can customize the generated artifacts inside a release.</source>
          <target state="translated">開発者がリリース内で生成された成果物をカスタマイズするには、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="c36172e9cd5c05c77e84149217392745df0757dd" translate="yes" xml:space="preserve">
          <source>There are a few attributes available in Mix tasks to configure them in Mix:</source>
          <target state="translated">Mixタスクで設定できる属性がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="29207daf154a421b800aeacb77caf5c5eb506793" translate="yes" xml:space="preserve">
          <source>There are a few suitable alternatives to replace GenEvent. Each of them can be the most beneficial based on the use case.</source>
          <target state="translated">GenEvent を置き換えるには、いくつかの適切な代替案があります。それぞれ、ユースケースに応じて最も有益なものになります。</target>
        </trans-unit>
        <trans-unit id="10bcc082a2d994b16cb89b80b77c2f9140673c29" translate="yes" xml:space="preserve">
          <source>There are a few ways to quit the IEx shell:</source>
          <target state="translated">IEx シェルを終了する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="622f4d4a041d29a7624f6c3efe7c38d00a98501a" translate="yes" xml:space="preserve">
          <source>There are a number of customization options provided by IEx. Take a look at the docs for the &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;IEx.configure/1&lt;/code&gt;&lt;/a&gt; function by typing &lt;code&gt;h IEx.configure/1&lt;/code&gt;.</source>
          <target state="translated">IExが提供するカスタマイズオプションは多数あります。 &lt;code&gt;h IEx.configure/1&lt;/code&gt; と入力して、&lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;IEx.configure/1&lt;/code&gt; &lt;/a&gt;関数のドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="7d8ce000a8dc139890c07c24e80b5de5ae99f4f0" translate="yes" xml:space="preserve">
          <source>There are a number of customization options provided by IEx. Take a look at the docs for the &lt;a href=&quot;iex#configure/1&quot;&gt;&lt;code&gt;IEx.configure/1&lt;/code&gt;&lt;/a&gt; function by typing &lt;code&gt;h IEx.configure/1&lt;/code&gt;.</source>
          <target state="translated">IExによって提供される多くのカスタマイズオプションがあります。 &lt;code&gt;h IEx.configure/1&lt;/code&gt; と入力して、&lt;a href=&quot;iex#configure/1&quot;&gt; &lt;code&gt;IEx.configure/1&lt;/code&gt; &lt;/a&gt;関数のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="09d8b4775b01e8f623175d798409cd369f28544b" translate="yes" xml:space="preserve">
          <source>There are a number of ways to debug code in Elixir. In this chapter we will cover some of the more common ways of doing so.</source>
          <target state="translated">Elixirでコードをデバッグする方法はいくつかあります。この章では、より一般的な方法をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="aa57737d9360fbe5afeae180cdd5ea0fce51697c" translate="yes" xml:space="preserve">
          <source>There are additional macros for other levels.</source>
          <target state="translated">他のレベル用のマクロが追加されています。</target>
        </trans-unit>
        <trans-unit id="a57a74b23748fb93cbfac3d76920a5b6c297f9f8" translate="yes" xml:space="preserve">
          <source>There are also other known problems like flooring or rounding numbers. See &lt;a href=&quot;#round/2&quot;&gt;&lt;code&gt;round/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#floor/2&quot;&gt;&lt;code&gt;floor/2&lt;/code&gt;&lt;/a&gt; for more details about them.</source>
          <target state="translated">フローリングや四捨五入のような他の既知の問題もあります。参照してください&lt;a href=&quot;#round/2&quot;&gt; &lt;code&gt;round/2&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#floor/2&quot;&gt; &lt;code&gt;floor/2&lt;/code&gt; &lt;/a&gt;それらの詳細については。</target>
        </trans-unit>
        <trans-unit id="5aa51c40876eefd1b0d73b2bb1e06b02c0333f56" translate="yes" xml:space="preserve">
          <source>There are also some non-paired functions, with no non-bang variant. The bang still signifies that it will raise an exception on failure. Example: &lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html#assert_protocol!/1&quot;&gt;&lt;code&gt;Protocol.assert_protocol!/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非対関数もいくつかあり、非バングバリアントはありません。強打は、失敗時に例外が発生することを意味します。例：&lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html#assert_protocol!/1&quot;&gt; &lt;code&gt;Protocol.assert_protocol!/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4e4e195bc2fdfc89b8bda777699ef0647f0c7ff7" translate="yes" xml:space="preserve">
          <source>There are also some non-paired functions, with no non-bang variant. The bang still signifies that it will raise an exception on failure. Example: &lt;a href=&quot;protocol#assert_protocol!/1&quot;&gt;&lt;code&gt;Protocol.assert_protocol!/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">対にならない関数もいくつかあり、非bangバリアントはありません。強打はまだ失敗時に例外を発生させることを意味します。例：&lt;a href=&quot;protocol#assert_protocol!/1&quot;&gt; &lt;code&gt;Protocol.assert_protocol!/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae5ae6e32d973b8c6e5e16938f53a6274e7ce3ca" translate="yes" xml:space="preserve">
          <source>There are currently no plans for a major v2 release.</source>
          <target state="translated">現在、v2のメジャーリリースの予定はありません。</target>
        </trans-unit>
        <trans-unit id="579246d0821bd1ab37dccebc3ea342f2ad2e0066" translate="yes" xml:space="preserve">
          <source>There are functions related to floating-point numbers on the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module too. Here is a list of them:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールには浮動小数点数に関連する関数もあります。それらのリストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="70fbc19347af9335ddb73d64b97e33f72c2ab414" translate="yes" xml:space="preserve">
          <source>There are functions related to floating-point numbers on the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module too. Here is a list of them:</source>
          <target state="translated">&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールには、浮動小数点数に関連する関数もあります。それらのリストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0447596598be1689749a73489423ead2b26c8b89" translate="yes" xml:space="preserve">
          <source>There are many functions in Elixir's standard library that return streams, some examples are:</source>
          <target state="translated">Elixirの標準ライブラリには、ストリームを返す関数がたくさんあります。</target>
        </trans-unit>
        <trans-unit id="87db69fabab6d8aebc72fcaa67f0f5d2378adab2" translate="yes" xml:space="preserve">
          <source>There are many other helpers available, here are some examples:</source>
          <target state="translated">他にも多くのヘルパーがありますが、ここではいくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="926409681cd9a91dbce4de89116e3485c968a501" translate="yes" xml:space="preserve">
          <source>There are many situations where using the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; module can be avoided in favor of binary functions or pattern matching. For example, imagine you have a string &lt;code&gt;prefix&lt;/code&gt; and you want to remove this prefix from another string named &lt;code&gt;full&lt;/code&gt;.</source>
          <target state="translated">バイナリ関数またはパターンマッチングを優先して、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;モジュールの使用を回避できる多くの状況があります。たとえば、文字列 &lt;code&gt;prefix&lt;/code&gt; あり、 &lt;code&gt;full&lt;/code&gt; という名前の別の文字列からこのプレフィックスを削除するとします。</target>
        </trans-unit>
        <trans-unit id="d8989cd7033f2099b81956882184639864ede98b" translate="yes" xml:space="preserve">
          <source>There are no guarantees about the order of keys in the returned keyword.</source>
          <target state="translated">返されたキーワードのキーの順番は保証されていません。</target>
        </trans-unit>
        <trans-unit id="54c0f70e4a42a4d0d67a77196f05623f3bcdb80e" translate="yes" xml:space="preserve">
          <source>There are other protocols in Elixir but this covers the most common ones.</source>
          <target state="translated">Elixirには他にもプロトコルがありますが、これは最も一般的なものをカバーしています。</target>
        </trans-unit>
        <trans-unit id="acb7aab73db89a3f93bdbd205b772057e9bacc95" translate="yes" xml:space="preserve">
          <source>There are other protocols in Elixir but this covers the most common ones. You can learn more about protocols and implementations in the &lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html&quot;&gt;&lt;code&gt;Protocol&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Elixirには他のプロトコルもありますが、これは最も一般的なプロトコルをカバーしています。プロトコルと実装について詳しくは、&lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html&quot;&gt; &lt;code&gt;Protocol&lt;/code&gt; &lt;/a&gt;モジュールをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3101471cbaca1a87da38ada818ec10b102a0a294" translate="yes" xml:space="preserve">
          <source>There are other tuple formats both &lt;code&gt;handle_call/3&lt;/code&gt; and &lt;code&gt;handle_cast/2&lt;/code&gt; callbacks may return. There are also other callbacks like &lt;code&gt;terminate/2&lt;/code&gt; and &lt;code&gt;code_change/3&lt;/code&gt; that we could implement. You are welcome to explore the &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;full GenServer documentation&lt;/a&gt; to learn more about those.</source>
          <target state="translated">&lt;code&gt;handle_call/3&lt;/code&gt; と &lt;code&gt;handle_cast/2&lt;/code&gt; の両方のコールバックが返す他のタプル形式があります。また、 &lt;code&gt;terminate/2&lt;/code&gt; や &lt;code&gt;code_change/3&lt;/code&gt; など、実装できる他のコールバックもあります。これらの詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;GenServer&lt;/a&gt;の完全なドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8c6bd7329e736075fbed60e12572ebdf4871cb55" translate="yes" xml:space="preserve">
          <source>There are probably many more to come too!</source>
          <target state="translated">まだまだ続くかもしれませんね~。</target>
        </trans-unit>
        <trans-unit id="eabb9c46f92e64d3211aa2057e1cb64ad70409b3" translate="yes" xml:space="preserve">
          <source>There are some modules that Elixir does not currently implement but it may be implement in the future. Those modules are reserved and defining them will result in a compilation error:</source>
          <target state="translated">Elixirが現在実装していないモジュールもありますが、将来的には実装されるかもしれません。これらのモジュールは予約されており、それらを定義するとコンパイルエラーになります。</target>
        </trans-unit>
        <trans-unit id="eb77960230e6dd3139afa82409f2f1ffc3a5c2e5" translate="yes" xml:space="preserve">
          <source>There are some very well known problems with floating-point numbers and arithmetics due to the fact most decimal fractions cannot be represented by a floating-point binary and most operations are not exact, but operate on approximations. Those issues are not specific to Elixir, they are a property of floating point representation itself.</source>
          <target state="translated">浮動小数点数や算術には、ほとんどの小数は浮動小数点2進数で表現できないという事実や、ほとんどの演算が正確ではなく近似に基づいて行われるという事実から、非常によく知られている問題があります。これらの問題は Elixir に特有のものではなく、浮動小数点表現そのものの特性です。</target>
        </trans-unit>
        <trans-unit id="e3154b8cdccf8ec261d752f5f3690d9739db0824" translate="yes" xml:space="preserve">
          <source>There are three better alternatives to &lt;code&gt;Node.spawn_link/2&lt;/code&gt; that we could use in our implementation:</source>
          <target state="translated">&lt;code&gt;Node.spawn_link/2&lt;/code&gt; には、実装で使用できる3つの優れた代替手段があります。</target>
        </trans-unit>
        <trans-unit id="0a011fd8fc19265bbdfa804b9e46482377afe2df" translate="yes" xml:space="preserve">
          <source>There are three callbacks that are invoked when functions are defined, as well as before and immediately after the module bytecode is generated.</source>
          <target state="translated">関数が定義されたとき、モジュールのバイトコードが生成される前と直後に呼び出されるコールバックが3つあります。</target>
        </trans-unit>
        <trans-unit id="f0cff0a96056604973d2ce970f4952a288926525" translate="yes" xml:space="preserve">
          <source>There are three main use cases for not replying using the return value:</source>
          <target state="translated">戻り値を利用して返信しない場合のユースケースは主に3つあります。</target>
        </trans-unit>
        <trans-unit id="adbd396ed0556c8293f2a87ae93d14c10746024c" translate="yes" xml:space="preserve">
          <source>There are two APIs for working with ports. It can be either asynchronous via message passing, as in the example above, or by calling the functions on this module.</source>
          <target state="translated">ports を扱うための API は 2 つあります。上の例のようにメッセージを渡すことで非同期に操作することもできますし、このモジュールの関数を呼び出すことで操作することもできます。</target>
        </trans-unit>
        <trans-unit id="701240237d3a52a3d32e044be779f88e8b80021f" translate="yes" xml:space="preserve">
          <source>There are two common pitfalls when using the pipe operator.</source>
          <target state="translated">パイプオペレーターを使用する際によくある落とし穴が2つあります。</target>
        </trans-unit>
        <trans-unit id="406dbf0d435a200ca4cabd1441349a8cdaeded38" translate="yes" xml:space="preserve">
          <source>There are two concerns in this approach.</source>
          <target state="translated">このアプローチには2つの懸念があります。</target>
        </trans-unit>
        <trans-unit id="5cac6c30b6750da044a369458652387600eab8a0" translate="yes" xml:space="preserve">
          <source>There are two data types without an accompanying module:</source>
          <target state="translated">付属モジュールのないデータ型は2つあります。</target>
        </trans-unit>
        <trans-unit id="b081e88ef54c7ae6048998f8dea958b729c0be39" translate="yes" xml:space="preserve">
          <source>There are two important things to consider when using &lt;code&gt;async&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; を使用する際に考慮すべき2つの重要な点があります。</target>
        </trans-unit>
        <trans-unit id="a03d1dfcb5538f40d22abd10d512a80d2c451bc1" translate="yes" xml:space="preserve">
          <source>There are two topics left before we move on to the next chapter.</source>
          <target state="translated">次の章に進む前に、2つのトピックが残っています。</target>
        </trans-unit>
        <trans-unit id="b6bcf7cf68be2f9527622d710936107d32e56ffb" translate="yes" xml:space="preserve">
          <source>There are two types of captured functions: &lt;strong&gt;external&lt;/strong&gt; and &lt;strong&gt;local&lt;/strong&gt;. External functions are functions residing in modules that are captured with &lt;a href=&quot;kernel.specialforms#&amp;amp;/1&quot;&gt;&lt;code&gt;&amp;amp;/1&lt;/code&gt;&lt;/a&gt;, such as &lt;code&gt;&amp;amp;String.length/1&lt;/code&gt;. Local functions are anonymous functions defined with &lt;a href=&quot;kernel.specialforms#fn/1&quot;&gt;&lt;code&gt;fn/1&lt;/code&gt;&lt;/a&gt; or with the capture operator &lt;a href=&quot;kernel.specialforms#&amp;amp;/1&quot;&gt;&lt;code&gt;&amp;amp;/1&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;&amp;amp;1&lt;/code&gt;, &lt;code&gt;&amp;amp;2&lt;/code&gt;, and so on as replacements.</source>
          <target state="translated">キャプチャーされる関数には、&lt;strong&gt;外部&lt;/strong&gt;と&lt;strong&gt;ローカルの&lt;/strong&gt; 2つのタイプがあります。外部関数は、 &lt;code&gt;&amp;amp;String.length/1&lt;/code&gt; のように&lt;a href=&quot;kernel.specialforms#&amp;amp;/1&quot;&gt; &lt;code&gt;&amp;amp;/1&lt;/code&gt; &lt;/a&gt;でキャプチャされたモジュールにある関数です。ローカル関数は、&lt;a href=&quot;kernel.specialforms#fn/1&quot;&gt; &lt;code&gt;fn/1&lt;/code&gt; 、&lt;/a&gt;または &lt;code&gt;&amp;amp;1&lt;/code&gt; 、 &lt;code&gt;&amp;amp;2&lt;/code&gt; などを代わりに使用してキャプチャー演算子&lt;a href=&quot;kernel.specialforms#&amp;amp;/1&quot;&gt; &lt;code&gt;&amp;amp;/1&lt;/code&gt; で&lt;/a&gt;定義された無名関数です。</target>
        </trans-unit>
        <trans-unit id="71487477c04c1e20b0a1c8eb6cde1dc3cb98c687" translate="yes" xml:space="preserve">
          <source>There are two types of requests you can send to a GenServer: calls and casts. Calls are synchronous and the server &lt;strong&gt;must&lt;/strong&gt; send a response back to such requests. While the server computes the response, the client is &lt;strong&gt;waiting&lt;/strong&gt;. Casts are asynchronous: the server won&amp;rsquo;t send a response back and therefore the client won&amp;rsquo;t wait for one. Both requests are messages sent to the server, and will be handled in sequence. In the above implementation, we pattern-match on the &lt;code&gt;:create&lt;/code&gt; messages, to be handled as cast, and on the &lt;code&gt;:lookup&lt;/code&gt; messages, to be handled as call.</source>
          <target state="translated">GenServerに送信できる要求には、呼び出しとキャストの2つのタイプがあります。呼び出しは同期的であり、サーバー&lt;strong&gt;は&lt;/strong&gt;そのような要求に対して応答を送信する&lt;strong&gt;必要があり&lt;/strong&gt;ます。サーバーが応答を計算している間、クライアントは&lt;strong&gt;待機してい&lt;/strong&gt;ます。キャストは非同期です。サーバーは応答を返さないため、クライアントは応答を待ちません。どちらのリクエストもサーバーに送信されるメッセージであり、順番に処理されます。上記の実装では、キャストとして処理される &lt;code&gt;:create&lt;/code&gt; メッセージと、呼び出しとして処理される &lt;code&gt;:lookup&lt;/code&gt; メッセージでパターンマッチングを行います。</target>
        </trans-unit>
        <trans-unit id="99e8c78e4095307ef4673f7069817242c3a373e9" translate="yes" xml:space="preserve">
          <source>There exists an additional way to simplify a chain of &lt;code&gt;or&lt;/code&gt; expressions in guards: Elixir supports writing &quot;multiple guards&quot; in the same clause. The following code:</source>
          <target state="translated">ガードのチェーン &lt;code&gt;or&lt;/code&gt; 式を単純化する追加の方法があります。Elixirは、同じ句に「複数のガード」を記述することをサポートしています。次のコード：</target>
        </trans-unit>
        <trans-unit id="3c9ea73ebc91f0affdf337778b29e743e68daec7" translate="yes" xml:space="preserve">
          <source>There exists an additional way to simplify a chain of &lt;code&gt;or&lt;/code&gt;s in guards: Elixir supports writing &quot;multiple guards&quot; in the same clause. This:</source>
          <target state="translated">ガードの &lt;code&gt;or&lt;/code&gt; のチェーンを簡略化する追加の方法が存在します。Elixirは、同じ句での「複数のガード」の記述をサポートしています。この：</target>
        </trans-unit>
        <trans-unit id="36182dc39abbf8ba08b014521f410bb7023fa49b" translate="yes" xml:space="preserve">
          <source>There is a sixth key, &lt;code&gt;:modules&lt;/code&gt;, that is rarely changed. It is set automatically based on the value in &lt;code&gt;:start&lt;/code&gt;.</source>
          <target state="translated">めったに変更されない6番目のキー &lt;code&gt;:modules&lt;/code&gt; があります。 &lt;code&gt;:start&lt;/code&gt; の値に基づいて自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="3abc172d49d7232eeddc547e457e9a9da963ba98" translate="yes" xml:space="preserve">
          <source>There is a sixth key, &lt;code&gt;:modules&lt;/code&gt;, which is optional and is rarely changed. It is set automatically based on the &lt;code&gt;:start&lt;/code&gt; value.</source>
          <target state="translated">6番目のキー &lt;code&gt;:modules&lt;/code&gt; があります。これはオプションであり、ほとんど変更されません。 &lt;code&gt;:start&lt;/code&gt; 値に基づいて自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="cacb5192e79338de26b6ff207a8ab99cd8a36150" translate="yes" xml:space="preserve">
          <source>There is also a deprecated strategy called &lt;code&gt;:simple_one_for_one&lt;/code&gt; which has been replaced by the &lt;a href=&quot;dynamicsupervisor&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;:simple_one_for_one&lt;/code&gt; supervisor was similar to &lt;code&gt;:one_for_one&lt;/code&gt; but suits better when dynamically attaching children. Many functions in this module behaved slightly differently when this strategy was used. See the &lt;a href=&quot;dynamicsupervisor&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module for more information and migration strategies.</source>
          <target state="translated">&lt;a href=&quot;dynamicsupervisor&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; に&lt;/a&gt;置き換えられた &lt;code&gt;:simple_one_for_one&lt;/code&gt; と呼ばれる非推奨の戦略もあります。 &lt;code&gt;:simple_one_for_one&lt;/code&gt; スーパーバイザは類似していた &lt;code&gt;:one_for_one&lt;/code&gt; 動的に子供を取り付ける際に、より良いけどスーツ。この戦略を使用した場合、このモジュールの多くの関数の動作は少し異なります。詳細および移行戦略については、&lt;a href=&quot;dynamicsupervisor&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="21605b424eea559d8c71a63a6ba5de9f7a6c7351" translate="yes" xml:space="preserve">
          <source>There is also a private function named &lt;code&gt;deps&lt;/code&gt;, which is invoked from the &lt;code&gt;project&lt;/code&gt; function, that defines our project dependencies. Defining &lt;code&gt;deps&lt;/code&gt; as a separate function is not required, but it helps keep the project configuration tidy.</source>
          <target state="translated">また、 &lt;code&gt;project&lt;/code&gt; 関数から呼び出される &lt;code&gt;deps&lt;/code&gt; というプライベート関数があり、プロジェクトの依存関係を定義します。 &lt;code&gt;deps&lt;/code&gt; を別の機能として定義する必要はありませんが、プロジェクト構成を整頓するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="bb7b6e86fbf7b732fa4c4c68a1745621601d30ca" translate="yes" xml:space="preserve">
          <source>There is more to learn about &lt;code&gt;put_in/2&lt;/code&gt; and &lt;code&gt;update_in/2&lt;/code&gt;, including the &lt;code&gt;get_and_update_in/2&lt;/code&gt; that allows us to extract a value and update the data structure at once. There are also &lt;code&gt;put_in/3&lt;/code&gt;, &lt;code&gt;update_in/3&lt;/code&gt; and &lt;code&gt;get_and_update_in/3&lt;/code&gt; which allow dynamic access into the data structure. &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;Check their respective documentation in the &lt;code&gt;Kernel&lt;/code&gt; module for more information&lt;/a&gt;.</source>
          <target state="translated">値を抽出してデータ構造を一度に更新できる &lt;code&gt;get_and_update_in/2&lt;/code&gt; を含め、 &lt;code&gt;put_in/2&lt;/code&gt; および &lt;code&gt;update_in/2&lt;/code&gt; についてさらに学ぶ必要があります。また、ある &lt;code&gt;put_in/3&lt;/code&gt; 、 &lt;code&gt;update_in/3&lt;/code&gt; 及び &lt;code&gt;get_and_update_in/3&lt;/code&gt; データ構造に動的にアクセスを許可します。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;詳細については、&lt;/a&gt; &lt;code&gt;Kernel&lt;/code&gt; モジュールのそれぞれのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="6b4424ea8037c81012b4a89fa0c4119c6711e1c4" translate="yes" xml:space="preserve">
          <source>There is much more to Mix, and we will continue to explore it as we build our project. A &lt;a href=&quot;https://hexdocs.pm/mix/&quot;&gt;general overview is available on the Mix documentation&lt;/a&gt;. Read &lt;a href=&quot;https://github.com/elixir-lang/elixir/tree/master/lib/mix&quot;&gt;the Mix source code here&lt;/a&gt;.</source>
          <target state="translated">Mixにはさらに多くの機能があり、プロジェクトを構築しながら、引き続き検討していきます。&lt;a href=&quot;https://hexdocs.pm/mix/&quot;&gt;一般的な概要は、ミックスのドキュメントで提供されています&lt;/a&gt;。&lt;a href=&quot;https://github.com/elixir-lang/elixir/tree/master/lib/mix&quot;&gt;ここでMixソースコード&lt;/a&gt;を読んでください。</target>
        </trans-unit>
        <trans-unit id="237778ff123bf6054865096a64c61845e79b8f82" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;try/rescue&lt;/code&gt; here. In case you want to handle multiple outcomes of opening a file, you can use pattern matching within the &lt;code&gt;case&lt;/code&gt; construct:</source>
          <target state="translated">ここには &lt;code&gt;try/rescue&lt;/code&gt; はありません。ファイルを開いた複数の結果を処理したい場合は、 &lt;code&gt;case&lt;/code&gt; 構成内でパターンマッチングを使用できます。</target>
        </trans-unit>
        <trans-unit id="f0bc74ac50000eb990e97f6493bd512424cfda40" translate="yes" xml:space="preserve">
          <source>There is one important difference between the &lt;code&gt;setup&lt;/code&gt; block we wrote for &lt;code&gt;KV.Registry&lt;/code&gt; and the one we wrote for &lt;code&gt;KV.Bucket&lt;/code&gt;. Instead of starting the registry by hand by calling &lt;code&gt;KV.Registry.start_link/1&lt;/code&gt;, we instead called &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#start_supervised/2&quot;&gt;the &lt;code&gt;start_supervised!/2&lt;/code&gt; function&lt;/a&gt;, passing the &lt;code&gt;KV.Registry&lt;/code&gt; module.</source>
          <target state="translated">間に1つの重要な違いがある &lt;code&gt;setup&lt;/code&gt; 、我々がために書いたブロック &lt;code&gt;KV.Registry&lt;/code&gt; と我々が書いた1 &lt;code&gt;KV.Bucket&lt;/code&gt; が。代わりに呼び出すことにより、手作業でレジストリを開始する &lt;code&gt;KV.Registry.start_link/1&lt;/code&gt; を、我々は代わりに呼ば&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised!/2&lt;/code&gt; &lt;/a&gt;機能を渡し、 &lt;code&gt;KV.Registry&lt;/code&gt; のモジュールを。</target>
        </trans-unit>
        <trans-unit id="02df8421114d1f579a4430e4f56430c17c3fdd06" translate="yes" xml:space="preserve">
          <source>There is one project-level option that affects how the escript is generated:</source>
          <target state="translated">escript の生成方法に影響を与えるプロジェクトレベルのオプションが 1 つあります。</target>
        </trans-unit>
        <trans-unit id="690ca402cdab5a8902f2e2787a305dd6116dc3d0" translate="yes" xml:space="preserve">
          <source>There is quite a bit more ceremony in the GenServer code but, as we will see, it brings some benefits too.</source>
          <target state="translated">GenServer コードにはかなり多くの儀式がありますが、我々が見るように、それはまた、いくつかの利点をもたらします。</target>
        </trans-unit>
        <trans-unit id="26cfa9d95846d7cc788a552bbc32762f5176596e" translate="yes" xml:space="preserve">
          <source>There isn't a comprehensive list of all the options that can be returned by &lt;code&gt;project/0&lt;/code&gt; since many Mix tasks define their own options that they read from this configuration. For example, look at the &quot;Configuration&quot; section in the documentation for the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile&lt;/code&gt;&lt;/a&gt; task.</source>
          <target state="translated">多くのMixタスクは、この構成から読み取る独自のオプションを定義しているため、 &lt;code&gt;project/0&lt;/code&gt; によって返されるすべてのオプションの包括的なリストはありません。たとえば、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile&lt;/code&gt; &lt;/a&gt;タスクのドキュメントの「構成」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="868c9d3de02a9c397e5804f3e5b1beeb25227226" translate="yes" xml:space="preserve">
          <source>There isn't a comprehensive list of all the options that can be returned by &lt;code&gt;project/0&lt;/code&gt; since many Mix tasks define their own options that they read from this configuration. For example, look at the &quot;Configuration&quot; section in the documentation for the &lt;a href=&quot;mix.tasks.compile&quot;&gt;&lt;code&gt;Mix.Tasks.Compile&lt;/code&gt;&lt;/a&gt; task.</source>
          <target state="translated">多くのMixタスクは、この構成から読み取る独自のオプションを定義しているため、 &lt;code&gt;project/0&lt;/code&gt; が返すことができるすべてのオプションの包括的なリストはありません。たとえば、&lt;a href=&quot;mix.tasks.compile&quot;&gt; &lt;code&gt;Mix.Tasks.Compile&lt;/code&gt; &lt;/a&gt;タスクのドキュメントの「構成」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="06cb32d59125a8444c6ab67709a472cedf77eb2d" translate="yes" xml:space="preserve">
          <source>There, &lt;code&gt;byte_size/1&lt;/code&gt; counts the underlying raw bytes, and &lt;code&gt;String.length/1&lt;/code&gt; counts characters.</source>
          <target state="translated">そこで、 &lt;code&gt;byte_size/1&lt;/code&gt; は基になる生のバイトをカウントし、 &lt;code&gt;String.length/1&lt;/code&gt; は文字をカウントします。</target>
        </trans-unit>
        <trans-unit id="4307601f224307e22cd02454aa0b8b4d5545438a" translate="yes" xml:space="preserve">
          <source>Therefore it is not guaranteed that &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt; is called when a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; exits. For such reasons, we usually recommend important clean-up rules to happen in separated processes either by use of monitoring or by links themselves. There is no cleanup needed when the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; controls a &lt;code&gt;port&lt;/code&gt; (e.g. &lt;code&gt;:gen_tcp.socket&lt;/code&gt;) or &lt;a href=&quot;file#t:io_device/0&quot;&gt;&lt;code&gt;File.io_device/0&lt;/code&gt;&lt;/a&gt;, because these will be closed on receiving a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;'s exit signal and do not need to be closed manually in &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">したがって、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;終了時に&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt;が呼び出されるとは限りません。このような理由から、通常は、監視を使用するかリンク自体を使用して、別個のプロセスで重要なクリーンアップルールを実行することをお勧めします。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;port&lt;/code&gt; （たとえば &lt;code&gt;:gen_tcp.socket&lt;/code&gt; ）または&lt;a href=&quot;file#t:io_device/0&quot;&gt; &lt;code&gt;File.io_device/0&lt;/code&gt; を&lt;/a&gt;制御する場合、クリーンアップは必要ありません。これらは&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;の終了信号を受信すると閉じられ、&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt;で手動で閉じる必要がないためです。。</target>
        </trans-unit>
        <trans-unit id="7f067dca9ef5e27637d0921507ba04af5a01c66e" translate="yes" xml:space="preserve">
          <source>Therefore it is not guaranteed that &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt; is called when a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; exits. For such reasons, we usually recommend important clean-up rules to happen in separated processes either by use of monitoring or by links themselves. There is no cleanup needed when the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; controls a &lt;code&gt;port&lt;/code&gt; (for example, &lt;code&gt;:gen_tcp.socket&lt;/code&gt;) or &lt;a href=&quot;https://hexdocs.pm/elixir/File.html#t:io_device/0&quot;&gt;&lt;code&gt;File.io_device/0&lt;/code&gt;&lt;/a&gt;, because these will be closed on receiving a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;'s exit signal and do not need to be closed manually in &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">したがって、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;終了時に&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt;が呼び出されることは保証されていません。このような理由から、通常、監視を使用するか、リンク自体によって、別々のプロセスで重要なクリーンアップルールを実行することをお勧めします。&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;port&lt;/code&gt; （たとえば、 &lt;code&gt;:gen_tcp.socket&lt;/code&gt; ）または&lt;a href=&quot;https://hexdocs.pm/elixir/File.html#t:io_device/0&quot;&gt; &lt;code&gt;File.io_device/0&lt;/code&gt; を&lt;/a&gt;制御する場合、これらは&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;の終了シグナルを受信すると閉じられ、&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt;手動で閉じる必要がないため、クリーンアップは必要ありません。/ 2。</target>
        </trans-unit>
        <trans-unit id="f4064ff8458c4f5d1958ee9109a3740ff3b2b0e6" translate="yes" xml:space="preserve">
          <source>Therefore, an Elixir developer prefers to &amp;ldquo;let it crash&amp;rdquo; or &amp;ldquo;fail fast&amp;rdquo;. And one of the most common ways we can recover from a failure is by restarting whatever part of the system crashed.</source>
          <target state="translated">したがって、Elixir開発者は「クラッシュさせる」または「すぐに失敗する」ことを好みます。また、障害から回復する最も一般的な方法の1つは、システムのクラッシュした部分を再起動することです。</target>
        </trans-unit>
        <trans-unit id="67da13e4777f268949639e3941225f274f61e540" translate="yes" xml:space="preserve">
          <source>Therefore, if you don&amp;rsquo;t want to handle the error outcomes, prefer using &lt;code&gt;File.read!/1&lt;/code&gt;.</source>
          <target state="translated">したがって、エラーの結果を処理したくない場合は、 &lt;code&gt;File.read!/1&lt;/code&gt; の使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="88ef416d8b169a4f47a3dda56e98187b8d57d742" translate="yes" xml:space="preserve">
          <source>Therefore, if you plan to compare multiple strings, multiple times in a row, you may normalize them upfront and compare them directly to avoid multiple normalization passes.</source>
          <target state="translated">そのため、複数の文字列を連続して複数回比較する予定の場合は、前もって正規化を行い、複数回の正規化パスを避けるために直接比較してもよいでしょう。</target>
        </trans-unit>
        <trans-unit id="5cb2ec194ba3355670294e9c457ea3adb567e875" translate="yes" xml:space="preserve">
          <source>Therefore, in order to minimize the distributed tests, let&amp;rsquo;s pick a routing table that does not require distribution. Then, for the distributed tests, we will programatically change the routing table. Back in &lt;code&gt;config/config.exs&lt;/code&gt;, add this line:</source>
          <target state="translated">したがって、分散テストを最小限に抑えるために、分散を必要としないルーティングテーブルを選択しましょう。次に、分散テストでは、ルーティングテーブルをプログラムで変更します。バックで &lt;code&gt;config/config.exs&lt;/code&gt; 、次の行を追加します。</target>
        </trans-unit>
        <trans-unit id="5587ebee880284a6f70ef3328784590a49e488e5" translate="yes" xml:space="preserve">
          <source>Therefore, this function is used to check if a module is loaded before using it and allows one to react accordingly. For example, the &lt;a href=&quot;https://hexdocs.pm/elixir/URI.html&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; module uses this function to check if a specific parser exists for a given URI scheme.</source>
          <target state="translated">したがって、この関数は、モジュールを使用する前にモジュールがロードされているかどうかを確認し、それに応じて反応できるようにするために使用されます。たとえば、&lt;a href=&quot;https://hexdocs.pm/elixir/URI.html&quot;&gt; &lt;code&gt;URI&lt;/code&gt; &lt;/a&gt;モジュールはこの関数を使用して、特定のURIスキームに特定のパーサーが存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="af72f8d5888562059c52cc4bad66a2a3aa2e8b0b" translate="yes" xml:space="preserve">
          <source>Therefore, this function is used to check if a module is loaded before using it and allows one to react accordingly. For example, the &lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; module uses this function to check if a specific parser exists for a given URI scheme.</source>
          <target state="translated">したがって、この関数は、使用する前にモジュールがロードされているかどうかを確認するために使用され、それに応じて反応することができます。たとえば、&lt;a href=&quot;uri&quot;&gt; &lt;code&gt;URI&lt;/code&gt; &lt;/a&gt;モジュールはこの関数を使用して、特定のURIスキームに特定のパーサーが存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="de86214129da9f1e44a45df425ff060e9ce48710" translate="yes" xml:space="preserve">
          <source>Therefore, using a combination of &lt;code&gt;--sink&lt;/code&gt; with &lt;code&gt;--label&lt;/code&gt; is useful to find all files that will change once the sink changes, alongside the transitive dependencies that will cause said recompilations.</source>
          <target state="translated">したがって、 &lt;code&gt;--sink&lt;/code&gt; と &lt;code&gt;--label&lt;/code&gt; の組み合わせを使用すると、シンクが変更されると変更されるすべてのファイルと、前述の再コンパイルを引き起こす推移的な依存関係を見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f4b754bf2a64e107bf9d3b99490d4c968dbf741e" translate="yes" xml:space="preserve">
          <source>Therefore, when pattern matching on strings, it is important to use the &lt;code&gt;utf8&lt;/code&gt; modifier:</source>
          <target state="translated">したがって、文字列のパターンマッチングを行う場合は、 &lt;code&gt;utf8&lt;/code&gt; 修飾子を使用することが重要です。</target>
        </trans-unit>
        <trans-unit id="d10b167c94497dff77b11dad17668b97ba38a48a" translate="yes" xml:space="preserve">
          <source>These are a few options that are not used by just one Mix task (and will thus be documented here):</source>
          <target state="translated">これらは、1つのMixタスクだけでは使用されないいくつかのオプションです(したがって、ここでは説明します)。</target>
        </trans-unit>
        <trans-unit id="41d198d3d66dfd7fa75bf909de01737698c3fc91" translate="yes" xml:space="preserve">
          <source>These are the reserved words in the Elixir language. They are detailed throughout this guide but summed up here for convenience:</source>
          <target state="translated">これらはElixir言語の予約語です。これらはこのガイドで詳しく説明されていますが、便宜上、ここにまとめてあります。</target>
        </trans-unit>
        <trans-unit id="c6ad74fbcf6aea4c5436fcd89c622233b6bfb3f0" translate="yes" xml:space="preserve">
          <source>These building blocks are defined in this module. Some of these special forms are lexical (such as &lt;a href=&quot;#alias/2&quot;&gt;&lt;code&gt;alias/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt;). The macros &lt;a href=&quot;#%7B%7D/1&quot;&gt;&lt;code&gt;{}/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#%3C%3C%3E%3E/1&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;/1&lt;/code&gt;&lt;/a&gt; are also special forms used to define tuple and binary data structures respectively.</source>
          <target state="translated">これらのビルディングブロックは、このモジュールで定義されています。これらの特殊な形式の一部は字句です（&lt;a href=&quot;#alias/2&quot;&gt; &lt;code&gt;alias/2&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; など&lt;/a&gt;）。マクロ&lt;a href=&quot;#%7B%7D/1&quot;&gt; &lt;code&gt;{}/1&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#%3C%3C%3E%3E/1&quot;&gt; &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;/1&lt;/code&gt; &lt;/a&gt;も、それぞれタプルとバイナリのデータ構造を定義するために使用される特殊な形式です。</target>
        </trans-unit>
        <trans-unit id="26cd6bcff6d81ebade774a0f501e5b9a49a3141c" translate="yes" xml:space="preserve">
          <source>These can be used anywhere you want to refer to a characters codepoint.</source>
          <target state="translated">これらは、文字のコードポイントを参照したい場所であればどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="c01193dcf91e904667491de473d13c72e0b284bc" translate="yes" xml:space="preserve">
          <source>These characteristics are what prompted keyword lists to be the default mechanism for passing options to functions in Elixir. In chapter 5, when we discussed the &lt;code&gt;if/2&lt;/code&gt; macro, we mentioned that the following syntax is supported:</source>
          <target state="translated">これらの特性は、キーワードリストがElixirの関数にオプションを渡すためのデフォルトのメカニズムになるように促したものです。第5章で、 &lt;code&gt;if/2&lt;/code&gt; マクロについて説明したときに、次の構文がサポートされていると述べました。</target>
        </trans-unit>
        <trans-unit id="a33f02a3cf972439fc9644228266bf6ac583f283" translate="yes" xml:space="preserve">
          <source>These characteristics are what prompted keyword lists to be the default mechanism for passing options to functions in Elixir. In chapter 5, when we discussed the &lt;code&gt;if/2&lt;/code&gt; macro, we mentioned the following syntax is supported:</source>
          <target state="translated">これらの特性は、キーワードリストをElixirの関数にオプションを渡すためのデフォルトのメカニズムとするものです。第5章では、 &lt;code&gt;if/2&lt;/code&gt; マクロについて説明したときに、次の構文がサポートされていることを説明しました。</target>
        </trans-unit>
        <trans-unit id="8fea9325510bd25065ba64a7fe2de349a02f06d3" translate="yes" xml:space="preserve">
          <source>These configurations can be set in the &lt;code&gt;def project&lt;/code&gt; section of your &lt;code&gt;mix.exs&lt;/code&gt;:</source>
          <target state="translated">これらの構成は、 &lt;code&gt;mix.exs&lt;/code&gt; の &lt;code&gt;def project&lt;/code&gt; セクションで設定できます。</target>
        </trans-unit>
        <trans-unit id="76567fa6ed57b5e28a73659cbd673c9a7f350853" translate="yes" xml:space="preserve">
          <source>These functions and macros follow the Erlang convention of an &lt;code&gt;is_&lt;/code&gt; prefix, instead of a trailing question mark, precisely to indicate that they are allowed in guard clauses.</source>
          <target state="translated">これらの関数とマクロは、末尾の疑問符ではなく、 &lt;code&gt;is_&lt;/code&gt; 接頭辞のErlang規則に従い、ガード節で許可されていることを正確に示します。</target>
        </trans-unit>
        <trans-unit id="add5b2dbfbafe6da3d0a22b6f870b2eed75d677f" translate="yes" xml:space="preserve">
          <source>These options are expected to be literals (including the binary values) at compile time.</source>
          <target state="translated">これらのオプションは、コンパイル時にリテラル(バイナリ値を含む)であることが期待されます。</target>
        </trans-unit>
        <trans-unit id="2ec1191cd2717326d5b2f8e25c4fb58ff593d194" translate="yes" xml:space="preserve">
          <source>These options are global since they are stored by Elixir's Code Server.</source>
          <target state="translated">これらのオプションは、Elixirのコードサーバーに保存されているため、グローバルです。</target>
        </trans-unit>
        <trans-unit id="626e3d5b2ff83140a65abc0074ea71a000293b27" translate="yes" xml:space="preserve">
          <source>These options are global since they are stored by Elixir's code server.</source>
          <target state="translated">これらのオプションは、Elixirのコードサーバーに保存されているため、グローバルです。</target>
        </trans-unit>
        <trans-unit id="8aca497f05ede32d92fad7a0a08861307fed5d02" translate="yes" xml:space="preserve">
          <source>These paths are based on the &lt;code&gt;:apps_path&lt;/code&gt; and &lt;code&gt;:apps&lt;/code&gt; configurations.</source>
          <target state="translated">これらのパスは、 &lt;code&gt;:apps_path&lt;/code&gt; および &lt;code&gt;:apps&lt;/code&gt; 構成に基づいています。</target>
        </trans-unit>
        <trans-unit id="90f90a0bd1abd66881352917a593420e21df4638" translate="yes" xml:space="preserve">
          <source>They also support &lt;code&gt;else&lt;/code&gt; blocks:</source>
          <target state="translated">また、 &lt;code&gt;else&lt;/code&gt; ブロックもサポートしています。</target>
        </trans-unit>
        <trans-unit id="c272e830fb2eeca6af73d25f9dc7ec1a9ffc0efc" translate="yes" xml:space="preserve">
          <source>They are discussed individually in the sections below.</source>
          <target state="translated">これらについては、以下のセクションで個別に説明します。</target>
        </trans-unit>
        <trans-unit id="d328fd2e41813b144fcdf9de5a1a99985a2c6ade" translate="yes" xml:space="preserve">
          <source>They are often useful to enumerate over distinct values, such as:</source>
          <target state="translated">のように、異なる値を列挙するのに便利です。</target>
        </trans-unit>
        <trans-unit id="d984bcb0628847679167196f524ecb516b6c251c" translate="yes" xml:space="preserve">
          <source>They serve to annotate the module, often with information to be used by the user or the</source>
          <target state="translated">これらはモジュールに注釈をつける役割を果たします。</target>
        </trans-unit>
        <trans-unit id="97ca407460ebb22e0ec5bdeff0b3e028c669bf37" translate="yes" xml:space="preserve">
          <source>They work as a temporary module storage to be used during compilation.</source>
          <target state="translated">これらは、コンパイル中に使用される一時的なモジュールストレージとして機能します。</target>
        </trans-unit>
        <trans-unit id="ee6dd5d64b66e821ff94c4d17d21b9f93db749f2" translate="yes" xml:space="preserve">
          <source>They work as constants.</source>
          <target state="translated">定数として動作します。</target>
        </trans-unit>
        <trans-unit id="e53339d9d0bc53c58fe8778d10ade8bb49736f46" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;https://elixir-lang.org/crash-course.html&quot;&gt;Erlang Syntax: A Crash Course&lt;/a&gt; provides a concise intro to Erlang&amp;rsquo;s syntax. Each code snippet is accompanied by equivalent code in Elixir. This is an opportunity for you to not only get some exposure to Erlang&amp;rsquo;s syntax but also review some of the things you have learned in this guide.</source>
          <target state="translated">この&lt;a href=&quot;https://elixir-lang.org/crash-course.html&quot;&gt;Erlang構文：クラッシュコースで&lt;/a&gt;は、Erlangの構文を簡潔に紹介します。各コードスニペットには、Elixirの同等のコードが付属しています。これは、Erlangの構文に触れるだけでなく、このガイドで学んだことのいくつかを復習する機会でもあります。</target>
        </trans-unit>
        <trans-unit id="c3d65d16574f84519ba2e69aa0d37e68059885e5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present) and must return a two-element tuple: the &quot;get&quot; value (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt;. The &lt;code&gt;fun&lt;/code&gt; may also return &lt;code&gt;:pop&lt;/code&gt;, implying the current value shall be removed from the keyword list and returned.</source>
          <target state="translated">この &lt;code&gt;fun&lt;/code&gt; 引数は、 &lt;code&gt;key&lt;/code&gt; の値（または &lt;code&gt;key&lt;/code&gt; が存在しない場合は &lt;code&gt;nil&lt;/code&gt; )を受け取り、2要素のタプルを返す必要があります。「get」値（返される前に操作できる取得値）と新しい値 &lt;code&gt;key&lt;/code&gt; 下に格納されます。 &lt;code&gt;fun&lt;/code&gt; も返すことがあり &lt;code&gt;:pop&lt;/code&gt; 、現在の値は、キーワードリストから削除され、返却されなければならない意味しています。</target>
        </trans-unit>
        <trans-unit id="7730fb9921d8f6aa0bc9c8111d351054831c02de" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present) and must return a two-element tuple: the current value (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt;. The &lt;code&gt;fun&lt;/code&gt; may also return &lt;code&gt;:pop&lt;/code&gt;, implying the current value shall be removed from the keyword list and returned.</source>
          <target state="translated">この &lt;code&gt;fun&lt;/code&gt; 引数は &lt;code&gt;key&lt;/code&gt; の値（または &lt;code&gt;key&lt;/code&gt; が存在しない場合は &lt;code&gt;nil&lt;/code&gt; )を受け取り、2要素のタプルを返す必要があります：現在の値（返される前に操作できる取得された値）と格納される新しい値 &lt;code&gt;key&lt;/code&gt; 下。 &lt;code&gt;fun&lt;/code&gt; も返すことがあり &lt;code&gt;:pop&lt;/code&gt; 、現在の値は、キーワードリストから削除され、返却されなければならない意味しています。</target>
        </trans-unit>
        <trans-unit id="21531bdd28fd8a4fab193e8f907a1304804427e8" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; and must return a two-element tuple: the &quot;get&quot; value (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;fun&lt;/code&gt; 引数は &lt;code&gt;key&lt;/code&gt; の値を受け取り、2要素のタプルを返す必要があります。「get」値（返される前に操作できる取得された値）と &lt;code&gt;key&lt;/code&gt; の下に格納される新しい値です。</target>
        </trans-unit>
        <trans-unit id="53bda49c2b15fa76b2cbd3fb19123910db00ced4" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; and must return a two-element tuple: the current value (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;fun&lt;/code&gt; 引数は &lt;code&gt;key&lt;/code&gt; の値を受け取り、2要素のタプルを返す必要があります。現在の値（取得された値。返される前に操作できます）と &lt;code&gt;key&lt;/code&gt; の下に格納される新しい値です。</target>
        </trans-unit>
        <trans-unit id="106724662d1a48acf5e96ebf33c77969eed35e72" translate="yes" xml:space="preserve">
          <source>This advice does not only apply to libraries but to any Elixir code. Every time you receive multiple options or work with external data, you should validate the data at the boundary and convert it to structured data. For example, if you provide a &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; that can be started with multiple options, you want to validate those options when the server starts and rely only on structured data throughout the process life cycle. Similarly, if a database or a socket gives you a map of strings, after you receive the data, you should validate it and potentially convert it to a struct or a map of atoms.</source>
          <target state="translated">このアドバイスは、ライブラリだけでなくElixirコードにも当てはまります。複数のオプションを受け取ったり、外部データを操作するたびに、境界でデータを検証し、構造化データに変換する必要があります。たとえば、複数のオプションで起動できる&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;を提供する場合、サーバーの起動時にそれらのオプションを検証し、プロセスライフサイクル全体で構造化データのみに依存する必要があります。同様に、データベースまたはソケットが文字列のマップを提供する場合、データを受け取った後、それを検証し、潜在的にそれを構造体またはアトムのマップに変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="1ca51ca3cb9bf6182cc66703ef3fbbdd192c7934" translate="yes" xml:space="preserve">
          <source>This advice does not only apply to libraries but to any Elixir code. Every time you receive multiple options or work with external data, you should validate the data at the boundary and convert it to structured data. For example, if you provide a &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; that can be started with multiple options, you want to validate those options when the server starts and rely only on structured data throughout the process life cycle. Similarly, if a database or a socket gives you a map of strings, after you receive the data, you should validate it and potentially convert it to a struct or a map of atoms.</source>
          <target state="translated">このアドバイスは、ライブラリだけでなく、すべてのElixirコードにも当てはまります。複数のオプションを受け取ったり、外部データを操作したりするたびに、境界でデータを検証し、構造化データに変換する必要があります。たとえば、複数のオプションで起動できる&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;を提供する場合、サーバーの起動時にそれらのオプションを検証し、プロセスのライフサイクル全体で構造化データのみに依存する必要があります。同様に、データベースまたはソケットが文字列のマップを提供する場合、データを受け取った後、それを検証し、潜在的に構造体またはアトムのマップに変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="38b51c7863a18d9dea71afde173bd863c4339d77" translate="yes" xml:space="preserve">
          <source>This also works with nested structs and the &lt;code&gt;struct.path.to.value&lt;/code&gt; way to specify paths:</source>
          <target state="translated">これは、ネストされた構造体および &lt;code&gt;struct.path.to.value&lt;/code&gt; の方法でも機能し、パスを指定します。</target>
        </trans-unit>
        <trans-unit id="35f4524e9d598f3528101bd75ddd379bcc553a48" translate="yes" xml:space="preserve">
          <source>This approach has one big limitation: if you change the value of the application environment after the code is compiled, the value used at runtime is not going to change! For example, if your &lt;code&gt;config/runtime.exs&lt;/code&gt; has:</source>
          <target state="translated">このアプローチには1つの大きな制限があります。コードのコンパイル後にアプリケーション環境の値を変更しても、実行時に使用される値は変更されません。たとえば、 &lt;code&gt;config/runtime.exs&lt;/code&gt; がある場合：</target>
        </trans-unit>
        <trans-unit id="0cc4748ce3f5882d3817d17380c6efaea1cbe2e2" translate="yes" xml:space="preserve">
          <source>This behaviour function checks out dependencies.</source>
          <target state="translated">このビヘイビア関数は、依存関係をチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="8063234c54496c74deb524505ab53e03e89b8cac" translate="yes" xml:space="preserve">
          <source>This behaviour function checks the status of the lock. In particular, it checks if the revision stored in the lock is the same as the repository it is currently in.</source>
          <target state="translated">このビヘイビア関数は、ロックの状態をチェックします。特に、ロックに保存されているリビジョンが現在のリポジトリと同じかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="d1a9f92cb4e97a9d75cd6dadc068bea5309a11a2" translate="yes" xml:space="preserve">
          <source>This behaviour function receives a keyword list of &lt;code&gt;opts&lt;/code&gt; and should return an updated list in case the SCM consumes the available options. For example, when a developer specifies a dependency</source>
          <target state="translated">This behaviour function receives a keyword list of &lt;code&gt;opts&lt;/code&gt; and should return an updated list in case the SCM consumes the available options. For example, when a developer specifies a dependency</target>
        </trans-unit>
        <trans-unit id="5b3cf369974ea57c7d2b5f2b67a09ff6bb9cb520" translate="yes" xml:space="preserve">
          <source>This behaviour function receives a keyword list of &lt;code&gt;opts&lt;/code&gt; and should return an updated list in case the SCM consumes the available options. For example, when a developer specifies a dependency:</source>
          <target state="translated">This behaviour function receives a keyword list of &lt;code&gt;opts&lt;/code&gt; and should return an updated list in case the SCM consumes the available options. For example, when a developer specifies a dependency:</target>
        </trans-unit>
        <trans-unit id="3e3e7ef108fbc0b5b099888c738ff953bc262988" translate="yes" xml:space="preserve">
          <source>This behaviour function returns a boolean if the dependency is available.</source>
          <target state="translated">このビヘイビア関数は、依存関係が利用可能な場合にブール値を返します。</target>
        </trans-unit>
        <trans-unit id="0b4620b1a57c643e178ccb4b09127ceadcd467a0" translate="yes" xml:space="preserve">
          <source>This behaviour function updates dependencies. It may be called by &lt;code&gt;deps.get&lt;/code&gt; or &lt;code&gt;deps.update&lt;/code&gt;.</source>
          <target state="translated">This behaviour function updates dependencies. It may be called by &lt;code&gt;deps.get&lt;/code&gt; or &lt;code&gt;deps.update&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c86b0384c6fa0ab23e023705951a2e26ece47398" translate="yes" xml:space="preserve">
          <source>This behaviour is deprecated. Use Erlang/OTP's :gen_event module instead.</source>
          <target state="translated">この動作は非推奨です。代わりにErlang/OTPの :gen_eventモジュールを使ってください。</target>
        </trans-unit>
        <trans-unit id="72f035035b3d70bcbf1171738b7f8c7d508d05aa" translate="yes" xml:space="preserve">
          <source>This behaviour is relied on in many different places. For example, &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; uses &lt;code&gt;exit(:shutdown)&lt;/code&gt; when exiting the test process to signal linked processes, supervision trees and so on to politely shut down too.</source>
          <target state="translated">この動作は多くの異なる場所で依存しています。たとえば、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;はテストプロセスを終了するときに &lt;code&gt;exit(:shutdown)&lt;/code&gt; を使用して、リンクされたプロセスや監視ツリーなどに信号を送り、丁寧にシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="c8eb2df7e5f6ba76a64892942e28c56d4c4a7f04" translate="yes" xml:space="preserve">
          <source>This break can be rendered as a linebreak or as the given &lt;code&gt;string&lt;/code&gt;, depending on the &lt;code&gt;mode&lt;/code&gt; of the chosen layout.</source>
          <target state="translated">この改行は、選択したレイアウトの &lt;code&gt;mode&lt;/code&gt; に応じて、改行または指定された &lt;code&gt;string&lt;/code&gt; としてレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="ab7ad5339c141f0de9e312dc2f25b5df3e7d8cb4" translate="yes" xml:space="preserve">
          <source>This breakpoint will never be reached, because a macro never receives a PID. Even if you call the macro as &lt;code&gt;MyModule.some_macro(self())&lt;/code&gt;, the macro will receive the AST representing the &lt;code&gt;self()&lt;/code&gt; call, and not the PID itself.</source>
          <target state="translated">マクロがPIDを受け取ることはないため、このブレークポイントには到達しません。マクロを &lt;code&gt;MyModule.some_macro(self())&lt;/code&gt; として呼び出しても、マクロはPID自体ではなく、 &lt;code&gt;self()&lt;/code&gt; 呼び出しを表すASTを受け取ります。</target>
        </trans-unit>
        <trans-unit id="8761ea35931ac08c3f3679fbf6f993fa3ef09746" translate="yes" xml:space="preserve">
          <source>This calendar implements the proleptic Gregorian calendar and is therefore compatible with the calendar used in most countries today. The proleptic means the Gregorian rules for leap years are applied for all time, consequently the dates give different results before the year 1583 from when the Gregorian calendar was adopted.</source>
          <target state="translated">このカレンダーは、プロレプティック・グレゴリオ暦を採用しており、現在のほとんどの国で使用されている暦と互換性があります。プロレプティックとは、うるう年のグレゴリオ暦のルールがすべての時間に適用されていることを意味し、その結果、グレゴリオ暦が採用された1583年以前とは異なる結果が得られます。</target>
        </trans-unit>
        <trans-unit id="7991ee0aa425c7d3f3afff7118c6225869810d3f" translate="yes" xml:space="preserve">
          <source>This call will setup a breakpoint that stops once. To set a breakpoint that will stop 10 times:</source>
          <target state="translated">この呼び出しは、1 回停止するブレークポイントを設定します。10回停止するブレークポイントを設定するには</target>
        </trans-unit>
        <trans-unit id="b325289ad4384d9c3ff3e14f0e004ec0fadc1690" translate="yes" xml:space="preserve">
          <source>This callback can be useful to control the &lt;em&gt;appearance&lt;/em&gt; of the status of the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;. For example, it can be used to return a compact representation of the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;'s state to avoid having large state terms printed.</source>
          <target state="translated">このコールバックは、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;ステータスの&lt;em&gt;外観&lt;/em&gt;を制御するのに役立ちます。たとえば、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;の状態のコンパクトな表現を返すために使用して、大きな状態の用語が印刷されるのを回避できます。</target>
        </trans-unit>
        <trans-unit id="1327f9cbc59e218b07255d5dfd814547d5d8807b" translate="yes" xml:space="preserve">
          <source>This callback is only supported on Erlang/OTP 21+.</source>
          <target state="translated">このコールバックは Erlang/OTP 21+でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="ee5f243ca65efd502d5c4c6af5c8cd9dfd5d476c" translate="yes" xml:space="preserve">
          <source>This callback is optional.</source>
          <target state="translated">このコールバックはオプションです。</target>
        </trans-unit>
        <trans-unit id="f2424dc84d136b7783611865075888a14d9c990b" translate="yes" xml:space="preserve">
          <source>This callback is optional. If one is not implemented, the received message will be logged.</source>
          <target state="translated">このコールバックはオプションです。実装されていない場合、受信したメッセージはログに記録されます。</target>
        </trans-unit>
        <trans-unit id="985bade6a0d966231f4d34d8934365d5ebe8193e" translate="yes" xml:space="preserve">
          <source>This callback is optional. If one is not implemented, the server will fail if a call is performed against it.</source>
          <target state="translated">このコールバックはオプションです。これが実装されていない場合、コールバックが実行されるとサーバは失敗します。</target>
        </trans-unit>
        <trans-unit id="f84f9f7a0fb58e5af47a01d8f797b8c62ea95537" translate="yes" xml:space="preserve">
          <source>This callback is optional. If one is not implemented, the server will fail if a cast is performed against it.</source>
          <target state="translated">このコールバックはオプションです。これが実装されていない場合、キャストが実行されるとサーバは失敗します。</target>
        </trans-unit>
        <trans-unit id="5a8f931c4cb12fef7b434a37af006aef2ba0d46a" translate="yes" xml:space="preserve">
          <source>This callback is optional. If one is not implemented, the server will fail if a continue instruction is used.</source>
          <target state="translated">このコールバックはオプションです。実装されていない場合、継続命令が使用されるとサーバは失敗します。</target>
        </trans-unit>
        <trans-unit id="ddfd8ff82f8cdfbfeb3d06aa0134b83f46048ef4" translate="yes" xml:space="preserve">
          <source>This can be added to any custom engine by invoking &lt;a href=&quot;#handle_assign/1&quot;&gt;&lt;code&gt;handle_assign/1&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#prewalk/2&quot;&gt;&lt;code&gt;Macro.prewalk/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">これは、&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#prewalk/2&quot;&gt; &lt;code&gt;Macro.prewalk/2&lt;/code&gt; &lt;/a&gt;でhandle_assign / &lt;a href=&quot;#handle_assign/1&quot;&gt; &lt;code&gt;handle_assign/1&lt;/code&gt; &lt;/a&gt;を呼び出すことにより、任意のカスタムエンジンに追加できます。</target>
        </trans-unit>
        <trans-unit id="9a48050cb80bb5c2bc634b01accf3b4f5bd8c332" translate="yes" xml:space="preserve">
          <source>This chapter is a quick introduction to input/output mechanisms and file-system-related tasks, as well as to related modules like &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この章では、入出力メカニズム、ファイルシステム関連のタスク、および&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;などの関連モジュールを簡単に紹介します。</target>
        </trans-unit>
        <trans-unit id="3b602041d24e676175f7fd300fe9987bf2555172" translate="yes" xml:space="preserve">
          <source>This chapter is part of the</source>
          <target state="translated">この章は</target>
        </trans-unit>
        <trans-unit id="d39494a06027e3ecee2968740895a5b78940cdae" translate="yes" xml:space="preserve">
          <source>This checks the version stored in the regular expression and recompiles the regex in case of version mismatch.</source>
          <target state="translated">これは正規表現に格納されているバージョンをチェックし、バージョンが不一致の場合は正規表現を再コンパイルします。</target>
        </trans-unit>
        <trans-unit id="9ba63be17004fe209fc861513a8577afc4eb4889" translate="yes" xml:space="preserve">
          <source>This code counts the number of files in a ZIP file:</source>
          <target state="translated">このコードは、ZIPファイル内のファイル数をカウントします。</target>
        </trans-unit>
        <trans-unit id="b9d6dcf55f45221cfb511f9790e81d0872563106" translate="yes" xml:space="preserve">
          <source>This code generates a warning letting you know that you are mistakenly implementing &lt;code&gt;parse/0&lt;/code&gt; instead of &lt;code&gt;parse/1&lt;/code&gt;. You can read more about &lt;code&gt;@impl&lt;/code&gt; in the &lt;a href=&quot;https://hexdocs.pm/elixir/master/Module.html#module-impl&quot;&gt;module documentation&lt;/a&gt;.</source>
          <target state="translated">このコードは、あなたが誤って実装していることを知らせる警告を生成し &lt;code&gt;parse/0&lt;/code&gt; の代わりに、 &lt;code&gt;parse/1&lt;/code&gt; 。あなたは、詳細については読むことができます &lt;code&gt;@impl&lt;/code&gt; における&lt;a href=&quot;https://hexdocs.pm/elixir/master/Module.html#module-impl&quot;&gt;モジュールのドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7461ed387e3c81526760cfc0eb288d63eeb1988f" translate="yes" xml:space="preserve">
          <source>This command deletes all build artifacts for the current project. Dependencies' sources and build files are cleaned only if the &lt;code&gt;--deps&lt;/code&gt; option is given.</source>
          <target state="translated">このコマンドは、現在のプロジェクトのすべてのビルドアーティファクトを削除します。依存関係のソースとビルドファイルは、 &lt;code&gt;--deps&lt;/code&gt; オプションが指定されている場合にのみクリーンアップされます。</target>
        </trans-unit>
        <trans-unit id="8e27e95f38d4b57c9fdf5d7529c98e07460e6cfe" translate="yes" xml:space="preserve">
          <source>This command only works inside a pry session started manually via &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; or a breakpoint set via &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt;. Calling this function during a regular &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html&quot;&gt;&lt;code&gt;IEx&lt;/code&gt;&lt;/a&gt; session will print an error.</source>
          <target state="translated">This command only works inside a pry session started manually via &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt; or a breakpoint set via &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt;. Calling this function during a regular &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html&quot;&gt; &lt;code&gt;IEx&lt;/code&gt; &lt;/a&gt; session will print an error.</target>
        </trans-unit>
        <trans-unit id="f03f46afb53748c93f12e42d7a94c9567ade9ff8" translate="yes" xml:space="preserve">
          <source>This command only works inside a pry session started manually via &lt;a href=&quot;iex#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; or a breakpoint set via &lt;a href=&quot;iex#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt;. Calling this function during a regular &lt;a href=&quot;iex&quot;&gt;&lt;code&gt;IEx&lt;/code&gt;&lt;/a&gt; session will print an error.</source>
          <target state="translated">このコマンドは、&lt;a href=&quot;iex#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt;を介して手動で開始されたpryセッション、または&lt;a href=&quot;iex#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; を&lt;/a&gt;介して設定されたブレークポイント内でのみ機能します。通常の&lt;a href=&quot;iex&quot;&gt; &lt;code&gt;IEx&lt;/code&gt; &lt;/a&gt;セッション中にこの関数を呼び出すと、エラーが出力されます。</target>
        </trans-unit>
        <trans-unit id="9a69791b2bccfac2d2c8e3aaab714d3c02736c70" translate="yes" xml:space="preserve">
          <source>This concludes our introduction to associative data structures in Elixir. You will find out that, given keyword lists and maps, you will always have the right tool to tackle problems that require associative data structures in Elixir.</source>
          <target state="translated">これでElixirの連想データ構造の紹介は終わりです。キーワードリストとマップがあれば、Elixirで連想データ構造を必要とする問題に取り組むための適切なツールが常に用意されていることがわかるでしょう。</target>
        </trans-unit>
        <trans-unit id="16f934bff72f27aaf7d700d67cebd5f253fc677d" translate="yes" xml:space="preserve">
          <source>This concludes our optimization chapter. We have used ETS as a cache mechanism where reads can happen from any processes but writes are still serialized through a single process. More importantly, we have also learned that once data can be read asynchronously, we need to be aware of the race conditions it might introduce.</source>
          <target state="translated">これで最適化の章を終了します。キャッシュメカニズムとして ETS を使用していますが、読み込みはどのプロセスからでも可能ですが、書き込みは単一のプロセスを介してシリアル化されます。さらに重要なことは、一度データを非同期的に読み込めるようになると、レース状態が発生する可能性があることに注意する必要があるということです。</target>
        </trans-unit>
        <trans-unit id="5688f14ee7763837295cf0cfb6c3645fbb0e591b" translate="yes" xml:space="preserve">
          <source>This configuration can be read using &lt;a href=&quot;#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt;. Note that &lt;a href=&quot;#config/0&quot;&gt;&lt;code&gt;config/0&lt;/code&gt;&lt;/a&gt; won't fail if a project is not defined; this allows many Mix tasks to work without a project.</source>
          <target state="translated">This configuration can be read using &lt;a href=&quot;#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt;. Note that &lt;a href=&quot;#config/0&quot;&gt; &lt;code&gt;config/0&lt;/code&gt; &lt;/a&gt; won't fail if a project is not defined; this allows many Mix tasks to work without a project.</target>
        </trans-unit>
        <trans-unit id="e537b568fbfe0eb80dc56346fdc7829c98d99600" translate="yes" xml:space="preserve">
          <source>This configuration can be read using &lt;a href=&quot;mix.project#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt;. Note that &lt;a href=&quot;#config/0&quot;&gt;&lt;code&gt;config/0&lt;/code&gt;&lt;/a&gt; won't fail if a project is not defined; this allows many Mix tasks to work without a project.</source>
          <target state="translated">この構成は&lt;a href=&quot;mix.project#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt;を使用して読み取ることができます。プロジェクトが定義されていなくても、&lt;a href=&quot;#config/0&quot;&gt; &lt;code&gt;config/0&lt;/code&gt; &lt;/a&gt;は失敗しないことに注意してください。これにより、多くのMixタスクがプロジェクトなしで機能します。</target>
        </trans-unit>
        <trans-unit id="a6e1f3335434ce7c6c1db9f585fc250ca17087fe" translate="yes" xml:space="preserve">
          <source>This configuration is split in three categories:</source>
          <target state="translated">この構成は3つに分かれています。</target>
        </trans-unit>
        <trans-unit id="50abf55bb08a41598a90aba43d936a7f680d70a0" translate="yes" xml:space="preserve">
          <source>This configures a routing table that always points to the current node. Now remove &lt;code&gt;@tag :distributed&lt;/code&gt; from the test in &lt;code&gt;test/kv_server_test.exs&lt;/code&gt; and run the suite, the test should now pass.</source>
          <target state="translated">これにより、常に現在のノードを指すルーティングテーブルが構成されます。ここで、 &lt;code&gt;test/kv_server_test.exs&lt;/code&gt; のテストから &lt;code&gt;@tag :distributed&lt;/code&gt; を削除してスイートを実行すると、テストに合格するはずです。</target>
        </trans-unit>
        <trans-unit id="300ecf84b2025cc5045f1e2f3e97de582fbc3fe7" translate="yes" xml:space="preserve">
          <source>This could be corrected by ensuring that no exception is raised, either via type checks like &lt;code&gt;is_map(val) and map_size(val) == 0&lt;/code&gt;, or by checking equality instead, like &lt;code&gt;val == %{}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;is_map(val) and map_size(val) == 0&lt;/code&gt; ような型チェックを介して、または &lt;code&gt;val == %{}&lt;/code&gt; ような等価性をチェックすることによって、例外が発生しないようにすることで修正できます。</target>
        </trans-unit>
        <trans-unit id="d60706226e387d43664cfb1abdf069dc132f410b" translate="yes" xml:space="preserve">
          <source>This could be corrected by ensuring that no exception is raised, either via type checks like &lt;code&gt;is_map(val) and map_size(val) == 0&lt;/code&gt;, or by using multiple guards, so that if an exception causes one guard to fail, the next one is evaluated.</source>
          <target state="translated">This could be corrected by ensuring that no exception is raised, either via type checks like &lt;code&gt;is_map(val) and map_size(val) == 0&lt;/code&gt; , or by using multiple guards, so that if an exception causes one guard to fail, the next one is evaluated.</target>
        </trans-unit>
        <trans-unit id="9c9bc7bb0b19c22166e70549a7bdc2d167883d30" translate="yes" xml:space="preserve">
          <source>This datetime can be seen as an ephemeral snapshot of a datetime at a given time zone. For such purposes, it also includes both UTC and Standard offsets, as well as the zone abbreviation field used exclusively for formatting purposes.</source>
          <target state="translated">この日付時刻は、あるタイムゾーンの時刻のスナップショットとして見ることができます。このような目的のために、これには UTC と Standard の両方のオフセットと、フォーマットの目的でのみ使用されるゾーンの略語フィールドも含まれています。</target>
        </trans-unit>
        <trans-unit id="025523ae9891a8ad2cd843de98bd87706ff12c27" translate="yes" xml:space="preserve">
          <source>This day fraction should be in its most simplified form possible, to make comparisons fast.</source>
          <target state="translated">この日の分数は、比較を迅速に行うために、可能な限り簡略化された形でなければなりません。</target>
        </trans-unit>
        <trans-unit id="99d3f98fe052dbacd8470e76a4e43e20ad18ae6f" translate="yes" xml:space="preserve">
          <source>This default can be overridden by &lt;code&gt;@tag capture_log: false&lt;/code&gt; or &lt;code&gt;@moduletag capture_log: false&lt;/code&gt;.</source>
          <target state="translated">このデフォルトは、 &lt;code&gt;@tag capture_log: false&lt;/code&gt; または &lt;code&gt;@moduletag capture_log: false&lt;/code&gt; によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="dc33441b7a8711ad3ca32a6f565dfd02fa511842" translate="yes" xml:space="preserve">
          <source>This dependency refers to the latest version of Plug in the 1.x.x version series that has been pushed to Hex. This is indicated by the &lt;code&gt;~&amp;gt;&lt;/code&gt; preceding the version number. For more information on specifying version requirements, see the &lt;a href=&quot;https://hexdocs.pm/elixir/Version.html&quot;&gt;documentation for the Version module&lt;/a&gt;.</source>
          <target state="translated">この依存関係は、Hexにプッシュされた1.xxバージョンシリーズのプラグインの最新バージョンを参照しています。これは、バージョン番号の前の &lt;code&gt;~&amp;gt;&lt;/code&gt; 示されます。バージョン要件の指定の詳細について&lt;a href=&quot;https://hexdocs.pm/elixir/Version.html&quot;&gt;は、バージョンモジュールのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b6c49f1989fcd795b139792169130547ab503617" translate="yes" xml:space="preserve">
          <source>This design is intentional. &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; was designed to support infinite collections, resources and other structures with fixed shape. For example, it doesn't make sense to insert values into a range, as it has a fixed shape where just the range limits are stored.</source>
          <target state="translated">このデザインは意図的なものです。&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;は、無限のコレクション、リソース、および固定形状のその他の構造をサポートするように設計されました。たとえば、値が範囲制限にのみ保存される固定形状であるため、値を範囲に挿入しても意味がありません。</target>
        </trans-unit>
        <trans-unit id="6e5cd48930bfba2e7e8edb59d564ea07b6d9edb0" translate="yes" xml:space="preserve">
          <source>This design is intentional. &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; was designed to support infinite collections, resources and other structures with fixed shape. For example, it doesn't make sense to insert values into a range, as it has a fixed shape where just the range limits are stored.</source>
          <target state="translated">This design is intentional. &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; was designed to support infinite collections, resources and other structures with fixed shape. For example, it doesn't make sense to insert values into a range, as it has a fixed shape where just the range limits are stored.</target>
        </trans-unit>
        <trans-unit id="7534091aa8dce080c878d8bf8e2b8c4a424f0e53" translate="yes" xml:space="preserve">
          <source>This difference is exclusive, so the test will fail if the difference and the delta are equal.</source>
          <target state="translated">この差は排他的なので、差とデルタが等しいとテストは失敗します。</target>
        </trans-unit>
        <trans-unit id="2dd776fd236b4c910c6f960d04bcbda080e07c54" translate="yes" xml:space="preserve">
          <source>This difference is inclusive, so the test will pass if the difference and the &lt;code&gt;delta&lt;/code&gt; are equal.</source>
          <target state="translated">この差は包括的であるため、差と &lt;code&gt;delta&lt;/code&gt; が等しい場合、テストは合格です。</target>
        </trans-unit>
        <trans-unit id="98215fb8db656d563463f8fe38acbb92d7848ad1" translate="yes" xml:space="preserve">
          <source>This distinction is important. If there are expensive actions to be done, you must consider if it will be better to perform these actions on the client or on the server. For example:</source>
          <target state="translated">この区別は重要です。実行するアクションが高価な場合、これらのアクションをクライアントで実行するのとサーバーで実行するのとでは、どちらが良いかを考えなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="df29062cd643c03ef91e3b2f35c7d26d81006829" translate="yes" xml:space="preserve">
          <source>This document covers all of Elixir syntax constructs as a reference and then discuss their exact AST representation.</source>
          <target state="translated">このドキュメントでは、参照としてElixirの構文構成のすべてをカバーし、その後、それらの正確なAST表現について議論します。</target>
        </trans-unit>
        <trans-unit id="5ca6dcbf01e5b678fc80bf68968384a6697f2309" translate="yes" xml:space="preserve">
          <source>This document covers operators in Elixir, how they are parsed, how they can be defined, and how they can be overridden.</source>
          <target state="translated">このドキュメントでは、Elixir の演算子、解析方法、定義方法、オーバーライド方法について説明します。</target>
        </trans-unit>
        <trans-unit id="76b6d6a8fc49e94c927ef5f992d5906c281ba114" translate="yes" xml:space="preserve">
          <source>This document covers some naming conventions in Elixir code, from casing to punctuation characters.</source>
          <target state="translated">このドキュメントでは、ケーシングから句読点まで、Elixir コードの命名規則をいくつか取り上げています。</target>
        </trans-unit>
        <trans-unit id="e522e86f1169f55700b99174079a5a7fddfa90ed" translate="yes" xml:space="preserve">
          <source>This document defines the commonly used base 16, base 32, and base 64 encoding schemes.</source>
          <target state="translated">このドキュメントでは、一般的に使用されているベース16、ベース32、およびベース64のエンコーディング方式を定義しています。</target>
        </trans-unit>
        <trans-unit id="d8780e3a54cb0fb8d842fe0203eab3683b262d16" translate="yes" xml:space="preserve">
          <source>This document outlines general guidelines, anti-patterns, and rules for those writing and publishing Elixir libraries meant to be consumed by other developers.</source>
          <target state="translated">この文書は、他の開発者が使用することを意図したElixirライブラリを書いて公開するための一般的なガイドライン、アンチパターン、ルールを概説しています。</target>
        </trans-unit>
        <trans-unit id="7635e286607ededea5965d1544a7717ea9ae091d" translate="yes" xml:space="preserve">
          <source>This document provides a reference to Elixir syntax, exploring its constructs and their AST equivalents.</source>
          <target state="translated">このドキュメントでは、Elixirの構文の参照を提供し、その構成要素とASTの等価物を調べます。</target>
        </trans-unit>
        <trans-unit id="36fa202c6f9b610fe0535f0fc2890016238cbe23" translate="yes" xml:space="preserve">
          <source>This documentation refers to implementing the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol for your own data structures. To learn more about using inspect, see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#inspect/2&quot;&gt;&lt;code&gt;Kernel.inspect/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#inspect/2&quot;&gt;&lt;code&gt;IO.inspect/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This documentation refers to implementing the &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; protocol for your own data structures. To learn more about using inspect, see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#inspect/2&quot;&gt; &lt;code&gt;Kernel.inspect/2&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#inspect/2&quot;&gt; &lt;code&gt;IO.inspect/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="cb11a86f08fe1f7ebc5f36609a52188a6715fc6d" translate="yes" xml:space="preserve">
          <source>This documentation refers to implementing the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol for your own data structures. To learn more about using inspect, see &lt;a href=&quot;kernel#inspect/2&quot;&gt;&lt;code&gt;Kernel.inspect/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#inspect/2&quot;&gt;&lt;code&gt;IO.inspect/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このドキュメントでは、独自のデータ構造に&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルを実装する方法について説明します。inspectの使用の詳細については、&lt;a href=&quot;kernel#inspect/2&quot;&gt; &lt;code&gt;Kernel.inspect/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#inspect/2&quot;&gt; &lt;code&gt;IO.inspect/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1eb21e9b605b4017af593e4546f378df0b372b6e" translate="yes" xml:space="preserve">
          <source>This effectively loads the non-instrumented version of currently instrumented modules into memory.</source>
          <target state="translated">これは、現在インストルメントされているモジュールの非インストルメントバージョンを効果的にメモリにロードします。</target>
        </trans-unit>
        <trans-unit id="1e8dce1c252882c1cf04fa14931f6945bcc1320f" translate="yes" xml:space="preserve">
          <source>This effectively loads the non-instrumented version of the module into memory.</source>
          <target state="translated">これは、モジュールの非インストルメント版を効果的にメモリにロードします。</target>
        </trans-unit>
        <trans-unit id="1c15107405a954dcb039847f9ffc0e90a3a08175" translate="yes" xml:space="preserve">
          <source>This example shows how to get everything from the registry.</source>
          <target state="translated">この例では、レジストリからすべてを取得する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="370c43dc94083c1b83066d682a8c408a4aa46d4b" translate="yes" xml:space="preserve">
          <source>This feature is considered experimental and may change in future releases.</source>
          <target state="translated">この機能は実験的なものであり、今後のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="91e35a46b080fba070b1bb9706d962577f541321" translate="yes" xml:space="preserve">
          <source>This file can be compiled using &lt;code&gt;elixirc&lt;/code&gt;:</source>
          <target state="translated">このファイルは &lt;code&gt;elixirc&lt;/code&gt; を使用してコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="b21275a067c181042b1ef479348b07d28e434640" translate="yes" xml:space="preserve">
          <source>This file contains Erlang terms (written using Erlang syntax). Even though we are not familiar with Erlang, it is easy to guess this file holds our application definition. It contains our application &lt;code&gt;version&lt;/code&gt;, all the modules defined by it, as well as a list of applications we depend on, like Erlang&amp;rsquo;s &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;elixir&lt;/code&gt; itself, and &lt;code&gt;logger&lt;/code&gt;.</source>
          <target state="translated">このファイルには、Erlangの用語が含まれています（Erlang構文を使用して記述）。Erlangに慣れていない場合でも、このファイルがアプリケーション定義を保持していると推測するのは簡単です。これには、アプリケーションの &lt;code&gt;version&lt;/code&gt; 、それによって定義されたすべてのモジュール、およびErlangの &lt;code&gt;kernel&lt;/code&gt; 、 &lt;code&gt;elixir&lt;/code&gt; 自体、 &lt;code&gt;logger&lt;/code&gt; など、依存するアプリケーションのリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="f3fde4ae93a3daf8d4be0e8acc8e91d708da691b" translate="yes" xml:space="preserve">
          <source>This file will be executed whenever your Mix project or your release starts.</source>
          <target state="translated">このファイルは、ミックスプロジェクトやリリースが開始されるたびに実行されます。</target>
        </trans-unit>
        <trans-unit id="d4e5090203b164b7b8cda10cfcc22848f5f4e098" translate="yes" xml:space="preserve">
          <source>This file will be required by Mix every time before we run our tests. We can run tests with &lt;code&gt;mix test&lt;/code&gt;:</source>
          <target state="translated">このファイルは、テストを実行する前に毎回Mixで必要になります。私たちは &lt;code&gt;mix test&lt;/code&gt; テストを実行できます：</target>
        </trans-unit>
        <trans-unit id="7951ed44572734ba9901e12d5c5112665c200cb8" translate="yes" xml:space="preserve">
          <source>This file will be required by Mix every time before we run our tests. We can run tests with:</source>
          <target state="translated">このファイルは、テストを実行する前に毎回必要になります。でテストを実行することができます。</target>
        </trans-unit>
        <trans-unit id="5c84c085804b613daf8adcad4e1c5bc2c3c89312" translate="yes" xml:space="preserve">
          <source>This finishes our introduction to &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;rescue&lt;/code&gt;. You will find they are used less frequently in Elixir than in other languages, although they may be handy in some situations where a library or some particular code is not playing &amp;ldquo;by the rules&amp;rdquo;.</source>
          <target state="translated">これで、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;rescue&lt;/code&gt; 紹介は終わりです。Elixirでは他の言語よりも使用頻度が低いことがわかりますが、ライブラリや特定のコードが「ルールに従って」再生されない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5e21f5a627b95129ae5af664e7fd87944d88dfd3" translate="yes" xml:space="preserve">
          <source>This finishes our introduction to pattern matching. As we will see in the next chapter, pattern matching is very common in many language constructs.</source>
          <target state="translated">これでパターンマッチングの紹介は終わりです。次の章で見るように、パターンマッチングは多くの言語構成で非常に一般的です。</target>
        </trans-unit>
        <trans-unit id="8a8c048ae2840f3778becb01897e7dcb0a936037" translate="yes" xml:space="preserve">
          <source>This finishes our short introduction to modules. In the next chapters, we will learn how to use named functions for recursion, explore Elixir lexical directives that can be used for importing functions from other modules and discuss module attributes.</source>
          <target state="translated">これでモジュールの簡単な紹介は終わりです。次の章では、再帰に名前付き関数を使う方法を学び、他のモジュールから関数をインポートするために使用できる Elixir の語彙ディレクティブを調べ、モジュールの属性について説明します。</target>
        </trans-unit>
        <trans-unit id="d37728bdb738ca01b9639cfc5853b77bca6e2f31" translate="yes" xml:space="preserve">
          <source>This finishes our tour of IO devices and IO related functionality. We have learned about four Elixir modules - &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/StringIO.html&quot;&gt;&lt;code&gt;StringIO&lt;/code&gt;&lt;/a&gt; - as well as how the</source>
          <target state="translated">これで、IOデバイスとIO関連機能のツアーは終了です。4つのElixirモジュール&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://hexdocs.pm/elixir/StringIO.html&quot;&gt; &lt;code&gt;StringIO&lt;/code&gt; -&lt;/a&gt;について学習しました。</target>
        </trans-unit>
        <trans-unit id="38be33edc941fc8a3ad680d80133cb5df88f95ae" translate="yes" xml:space="preserve">
          <source>This finishes our tour of IO devices and IO related functionality. We have learned about three Elixir modules - &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; - as well as how the</source>
          <target state="translated">This finishes our tour of IO devices and IO related functionality. We have learned about three Elixir modules - &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; - as well as how the</target>
        </trans-unit>
        <trans-unit id="8c32849fe51611a16560a9bffff17dd6edd351d8" translate="yes" xml:space="preserve">
          <source>This function accepts any map or struct that contains at least the same fields as a &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct. The most common example of that is a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. In this case the information about the time zone of that &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is completely ignored. This is the same principle as passing a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#to_iso8601/2&quot;&gt;&lt;code&gt;Date.to_iso8601/2&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#to_iso8601/2&quot;&gt;&lt;code&gt;Date.to_iso8601/2&lt;/code&gt;&lt;/a&gt; extracts only the date-specific fields (calendar, year, month and day) of the given structure and ignores all others.</source>
          <target state="translated">This function accepts any map or struct that contains at least the same fields as a &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt; struct. The most common example of that is a &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;. In this case the information about the time zone of that &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; is completely ignored. This is the same principle as passing a &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; to &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#to_iso8601/2&quot;&gt; &lt;code&gt;Date.to_iso8601/2&lt;/code&gt; &lt;/a&gt;. &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#to_iso8601/2&quot;&gt; &lt;code&gt;Date.to_iso8601/2&lt;/code&gt; &lt;/a&gt; extracts only the date-specific fields (calendar, year, month and day) of the given structure and ignores all others.</target>
        </trans-unit>
        <trans-unit id="4be537303d97003eb7a277c4a7ca1256fe24cb96" translate="yes" xml:space="preserve">
          <source>This function accepts any map or struct that contains at least the same fields as a &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct. The most common example of that is a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. In this case the information about the time zone of that &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is completely ignored. This is the same principle as passing a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;date#to_iso8601/2&quot;&gt;&lt;code&gt;Date.to_iso8601/2&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;date#to_iso8601/2&quot;&gt;&lt;code&gt;Date.to_iso8601/2&lt;/code&gt;&lt;/a&gt; extracts only the date-specific fields (calendar, year, month and day) of the given structure and ignores all others.</source>
          <target state="translated">この関数は、少なくとも&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;構造体と同じフィールドを含むマップまたは構造体を受け入れます。その最も一般的な例は&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;です。この場合、その&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; の&lt;/a&gt;タイムゾーンに関する情報は完全に無視されます。これは、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;date#to_iso8601/2&quot;&gt; &lt;code&gt;Date.to_iso8601/2&lt;/code&gt; に&lt;/a&gt;渡すのと同じ原理です。&lt;a href=&quot;date#to_iso8601/2&quot;&gt; &lt;code&gt;Date.to_iso8601/2&lt;/code&gt; &lt;/a&gt;は、指定された構造の日付固有のフィールド（カレンダー、年、月、日）のみを抽出し、他のすべてを無視します。</target>
        </trans-unit>
        <trans-unit id="5bf6aff9caccdb3a64ed2f33e59b9d34b47e60ba" translate="yes" xml:space="preserve">
          <source>This function accepts the &lt;code&gt;number&lt;/code&gt; measured according to &lt;a href=&quot;calendar.iso&quot;&gt;&lt;code&gt;Calendar.ISO&lt;/code&gt;&lt;/a&gt;. The time is returned in the same calendar as it was given in.</source>
          <target state="translated">この関数は、&lt;a href=&quot;calendar.iso&quot;&gt; &lt;code&gt;Calendar.ISO&lt;/code&gt; &lt;/a&gt;に従って測定された &lt;code&gt;number&lt;/code&gt; 受け入れます。時間は与えられたのと同じカレンダーで返されます。</target>
        </trans-unit>
        <trans-unit id="3e2dd6bd7df969320413c030c37f5eb3baf88d93" translate="yes" xml:space="preserve">
          <source>This function accepts the &lt;code&gt;number&lt;/code&gt; measured according to &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.ISO.html&quot;&gt;&lt;code&gt;Calendar.ISO&lt;/code&gt;&lt;/a&gt;. The time is returned in the same calendar as it was given in.</source>
          <target state="translated">This function accepts the &lt;code&gt;number&lt;/code&gt; measured according to &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.ISO.html&quot;&gt; &lt;code&gt;Calendar.ISO&lt;/code&gt; &lt;/a&gt;. The time is returned in the same calendar as it was given in.</target>
        </trans-unit>
        <trans-unit id="e2a89e508cd312bb2a9827f189a0607424832acb" translate="yes" xml:space="preserve">
          <source>This function accepts the following options, which are exclusive to each other (i.e., only one of them can be used in the same call):</source>
          <target state="translated">この関数は、以下のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="01d34bc3e6a8b2f03537e43d3d5e42ba54d0dddb" translate="yes" xml:space="preserve">
          <source>This function also accepts a &lt;code&gt;predicate&lt;/code&gt; function as an optional argument. If passed, this function will be called with each byte in &lt;code&gt;string&lt;/code&gt; as its argument and should return a truthy value (anything other than &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) if the given byte should be left as is, or return a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) if the character should be escaped.</source>
          <target state="translated">この関数は、オプションの引数として &lt;code&gt;predicate&lt;/code&gt; 関数も受け入れます。渡された場合、この関数は、各バイトと呼ばれる &lt;code&gt;string&lt;/code&gt; 引数としてとtruthy値（以外のものを返す必要があり &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を指定されたバイトがあるとして残し、またはfalsy値（返却する必要がある場合） &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を）文字をエスケープする必要がある場合。</target>
        </trans-unit>
        <trans-unit id="bc20380be19f829ddb16dcf0ed86935745a4613d" translate="yes" xml:space="preserve">
          <source>This function also accepts a &lt;code&gt;predicate&lt;/code&gt; function as an optional argument. If passed, this function will be called with each byte in &lt;code&gt;string&lt;/code&gt; as its argument and should return a truthy value (anything other than &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) if the given byte should be left as is, or return a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) if the character should be escaped. Defaults to &lt;a href=&quot;#char_unescaped?/1&quot;&gt;&lt;code&gt;URI.char_unescaped?/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This function also accepts a &lt;code&gt;predicate&lt;/code&gt; function as an optional argument. If passed, this function will be called with each byte in &lt;code&gt;string&lt;/code&gt; as its argument and should return a truthy value (anything other than &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; ) if the given byte should be left as is, or return a falsy value ( &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; ) if the character should be escaped. Defaults to &lt;a href=&quot;#char_unescaped?/1&quot;&gt; &lt;code&gt;URI.char_unescaped?/1&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="95e711242672aeb8dcafbe40b2392be2c750c645" translate="yes" xml:space="preserve">
          <source>This function also accepts all options accepted by &lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html#split/3&quot;&gt;&lt;code&gt;Regex.split/3&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;pattern&lt;/code&gt; is a regular expression.</source>
          <target state="translated">This function also accepts all options accepted by &lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html#split/3&quot;&gt; &lt;code&gt;Regex.split/3&lt;/code&gt; &lt;/a&gt; if &lt;code&gt;pattern&lt;/code&gt; is a regular expression.</target>
        </trans-unit>
        <trans-unit id="b98eb6f021aa33018c50a97a2ae82859d4b9d5d9" translate="yes" xml:space="preserve">
          <source>This function also accepts all options accepted by &lt;a href=&quot;regex#split/3&quot;&gt;&lt;code&gt;Regex.split/3&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;pattern&lt;/code&gt; is a regular expression.</source>
          <target state="translated">この関数は、 &lt;code&gt;pattern&lt;/code&gt; が正規表現の場合、&lt;a href=&quot;regex#split/3&quot;&gt; &lt;code&gt;Regex.split/3&lt;/code&gt; が&lt;/a&gt;受け入れるすべてのオプションも受け入れます。</target>
        </trans-unit>
        <trans-unit id="ac6f41672cc7456ee783ae52a0830c9c41b7db86" translate="yes" xml:space="preserve">
          <source>This function also notifies the compiler a warning was printed (in case --warnings-as-errors was enabled). It returns &lt;code&gt;:ok&lt;/code&gt; if it succeeds.</source>
          <target state="translated">この関数は、コンパイラに警告が出力されたことも通知します（--warnings-as-errorsが有効になっている場合）。成功すると &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f335fe1ab0a202ff3768395fb418ab92d63c45f8" translate="yes" xml:space="preserve">
          <source>This function always returns &lt;code&gt;:ok&lt;/code&gt; regardless of whether the destination &lt;code&gt;server&lt;/code&gt; (or node) exists. Therefore it is unknown whether the destination &lt;code&gt;server&lt;/code&gt; successfully handled the message.</source>
          <target state="translated">この関数は、宛先 &lt;code&gt;server&lt;/code&gt; （またはノード）が存在するかどうかに関係なく、常に &lt;code&gt;:ok&lt;/code&gt; を返します。したがって、宛先 &lt;code&gt;server&lt;/code&gt; がメッセージを正常に処理したかどうかは不明です。</target>
        </trans-unit>
        <trans-unit id="bc08e67f2fe286bbaa38c013f9a0710de372c88c" translate="yes" xml:space="preserve">
          <source>This function always returns &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">この関数は常に &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f38b1ffa237bfd139fe63c018eb6902804eab77a" translate="yes" xml:space="preserve">
          <source>This function always returns a float. &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#trunc/1&quot;&gt;&lt;code&gt;Kernel.trunc/1&lt;/code&gt;&lt;/a&gt; may be used instead to truncate the result to an integer afterwards.</source>
          <target state="translated">This function always returns a float. &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#trunc/1&quot;&gt; &lt;code&gt;Kernel.trunc/1&lt;/code&gt; &lt;/a&gt; may be used instead to truncate the result to an integer afterwards.</target>
        </trans-unit>
        <trans-unit id="440a46241c8ccf32d2a66af8c374d6f2f268c12c" translate="yes" xml:space="preserve">
          <source>This function always returns a float. &lt;a href=&quot;kernel#trunc/1&quot;&gt;&lt;code&gt;Kernel.trunc/1&lt;/code&gt;&lt;/a&gt; may be used instead to truncate the result to an integer afterwards.</source>
          <target state="translated">この関数は常に浮動小数点数を返します。&lt;a href=&quot;kernel#trunc/1&quot;&gt; &lt;code&gt;Kernel.trunc/1&lt;/code&gt; &lt;/a&gt;を使用して、結果を後で整数に切り捨てることができます。</target>
        </trans-unit>
        <trans-unit id="502243a350ea8c22efdb92a69f5b1758006a416e" translate="yes" xml:space="preserve">
          <source>This function always returns floats. &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#trunc/1&quot;&gt;&lt;code&gt;Kernel.trunc/1&lt;/code&gt;&lt;/a&gt; may be used instead to truncate the result to an integer afterwards.</source>
          <target state="translated">This function always returns floats. &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#trunc/1&quot;&gt; &lt;code&gt;Kernel.trunc/1&lt;/code&gt; &lt;/a&gt; may be used instead to truncate the result to an integer afterwards.</target>
        </trans-unit>
        <trans-unit id="57434e8d5ce39ceeb05917e87327e9180f6a8556" translate="yes" xml:space="preserve">
          <source>This function always returns floats. &lt;a href=&quot;kernel#trunc/1&quot;&gt;&lt;code&gt;Kernel.trunc/1&lt;/code&gt;&lt;/a&gt; may be used instead to truncate the result to an integer afterwards.</source>
          <target state="translated">この関数は常に浮動小数点数を返します。&lt;a href=&quot;kernel#trunc/1&quot;&gt; &lt;code&gt;Kernel.trunc/1&lt;/code&gt; &lt;/a&gt;を使用して、結果を後で整数に切り捨てることができます。</target>
        </trans-unit>
        <trans-unit id="0953d55a24fb80955003844da1bc3b8af51086cb" translate="yes" xml:space="preserve">
          <source>This function assumes the task's monitor is still active or the monitor's &lt;code&gt;:DOWN&lt;/code&gt; message is in the message queue. If it has been demonitored or the message already received, this function will wait for the duration of the timeout awaiting the message.</source>
          <target state="translated">この関数は、タスクのモニターがまだアクティブであるか、モニターの &lt;code&gt;:DOWN&lt;/code&gt; メッセージがメッセージキューにあることを前提としています。監視が解除されているか、メッセージがすでに受信されている場合、この関数は、メッセージを待機しているタイムアウトの間待機します。</target>
        </trans-unit>
        <trans-unit id="7b478825975b2adf1e339715031349cd41d1d953" translate="yes" xml:space="preserve">
          <source>This function assumes the task's monitor is still active or the monitor's &lt;code&gt;:DOWN&lt;/code&gt; message is in the message queue. If it has been demonitored, or the message already received, this function will wait for the duration of the timeout awaiting the message.</source>
          <target state="translated">この関数は、タスクのモニターがまだアクティブであるか、モニターの &lt;code&gt;:DOWN&lt;/code&gt; メッセージがメッセージキューにあることを前提としています。監視が解除されている場合、またはメッセージがすでに受信されている場合、この関数は、メッセージを待機するタイムアウトの期間待機します。</target>
        </trans-unit>
        <trans-unit id="61db13a99cd2b6f7c8e9e14b335594be40a81ac4" translate="yes" xml:space="preserve">
          <source>This function assumes the tasks' monitors are still active or the monitors' &lt;code&gt;:DOWN&lt;/code&gt; message is in the message queue. If any tasks have been demonitored, or the message already received, this function will wait for the duration of the timeout.</source>
          <target state="translated">This function assumes the tasks' monitors are still active or the monitors' &lt;code&gt;:DOWN&lt;/code&gt; message is in the message queue. If any tasks have been demonitored, or the message already received, this function will wait for the duration of the timeout.</target>
        </trans-unit>
        <trans-unit id="a19b113270ec008da90487c67a8732f8a8235703" translate="yes" xml:space="preserve">
          <source>This function behaves like &lt;a href=&quot;#pop/3&quot;&gt;&lt;code&gt;pop/3&lt;/code&gt;&lt;/a&gt;, but raises in cases the &lt;code&gt;key&lt;/code&gt; is not present in the given &lt;code&gt;keywords&lt;/code&gt;.</source>
          <target state="translated">This function behaves like &lt;a href=&quot;#pop/3&quot;&gt; &lt;code&gt;pop/3&lt;/code&gt; &lt;/a&gt;, but raises in cases the &lt;code&gt;key&lt;/code&gt; is not present in the given &lt;code&gt;keywords&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12bd78dfccf68211322b54eebf7d9f19fae21105" translate="yes" xml:space="preserve">
          <source>This function can also be used to compare a DateTime without the time zone information:</source>
          <target state="translated">この関数は、タイムゾーン情報を含まないDateTimeの比較にも使用できます。</target>
        </trans-unit>
        <trans-unit id="6685e43cbdb2479bfe075aeca3ae08082570222e" translate="yes" xml:space="preserve">
          <source>This function can also be used to compare across more complex calendar types by considering only the date fields:</source>
          <target state="translated">この関数は、日付フィールドのみを考慮して、より複雑なカレンダータイプ間で比較するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="abca05fe88ba596b97d33bdad630bb0ce33ca0d8" translate="yes" xml:space="preserve">
          <source>This function can also be used to compare across more complex calendar types by considering only the time fields:</source>
          <target state="translated">この関数は、時間フィールドのみを考慮して、より複雑なカレンダータイプ間で比較するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="50c88d683e6ca48ffff95675148916e0e611983e" translate="yes" xml:space="preserve">
          <source>This function can also be used to convert a DateTime to ISO 8601 without the time zone information:</source>
          <target state="translated">また、この機能を利用して、タイムゾーン情報を含まないDateTimeをISO 8601に変換することもできます。</target>
        </trans-unit>
        <trans-unit id="41a09a6604ea410d09611cc0508b8a9905bff4c2" translate="yes" xml:space="preserve">
          <source>This function can also be used to convert a DateTime to a erl format without the time zone information:</source>
          <target state="translated">この関数を使用して、DateTimeをタイムゾーン情報を含まないerl形式に変換することもできます。</target>
        </trans-unit>
        <trans-unit id="90561437b8e4f9d3679b45a602783e2cfc785f58" translate="yes" xml:space="preserve">
          <source>This function can also be used to convert a DateTime to a string without the time zone information:</source>
          <target state="translated">この関数を使用して、DateTimeをタイムゾーン情報を含まない文字列に変換することもできます。</target>
        </trans-unit>
        <trans-unit id="a058c913c46d45fd26854e6d03a3a8d889e6bda9" translate="yes" xml:space="preserve">
          <source>This function can also be used to convert a DateTime to an Erlang datetime tuple without the time zone information:</source>
          <target state="translated">この関数はDateTimeをタイムゾーン情報なしでErlangのdatetimeタプルに変換するのにも使えます。</target>
        </trans-unit>
        <trans-unit id="607aaac2692d9ae79c5be1d1f95f4b67e7e30692" translate="yes" xml:space="preserve">
          <source>This function can be seen as a combination of &lt;a href=&quot;#resource/3&quot;&gt;&lt;code&gt;Stream.resource/3&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;#transform/3&quot;&gt;&lt;code&gt;Stream.transform/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This function can be seen as a combination of &lt;a href=&quot;#resource/3&quot;&gt; &lt;code&gt;Stream.resource/3&lt;/code&gt; &lt;/a&gt; with &lt;a href=&quot;#transform/3&quot;&gt; &lt;code&gt;Stream.transform/3&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d7b8cf5df777bb4d4ddd30603ec1dffb30552797" translate="yes" xml:space="preserve">
          <source>This function can be seen as a combination of &lt;a href=&quot;stream#resource/3&quot;&gt;&lt;code&gt;Stream.resource/3&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;stream#transform/3&quot;&gt;&lt;code&gt;Stream.transform/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;stream#resource/3&quot;&gt; &lt;code&gt;Stream.resource/3&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;stream#transform/3&quot;&gt; &lt;code&gt;Stream.transform/3&lt;/code&gt; の&lt;/a&gt;組み合わせとして見ることができます。</target>
        </trans-unit>
        <trans-unit id="d8bf264a9f407b070cd0c90cff65f5b5b2f3cb5a" translate="yes" xml:space="preserve">
          <source>This function can be used to display what the time is right now for the time zone configuration that the machine happens to have. An example would be a desktop program displaying a clock to the user. For any other uses it is probably a bad idea to use this function.</source>
          <target state="translated">この機能を使用して、マシンがたまたま持っているタイムゾーン設定の現在の時刻を表示することができます。例としては、デスクトッププログラムがユーザーに時計を表示することが挙げられます。それ以外の用途では、この関数を使用するのはあまりお勧めできません。</target>
        </trans-unit>
        <trans-unit id="65aef6f44f45a3fc1e3176aa1c4a4acc551773fb" translate="yes" xml:space="preserve">
          <source>This function can be used to explicitly send a reply to a client that called &lt;a href=&quot;#call/3&quot;&gt;&lt;code&gt;call/3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#multi_call/4&quot;&gt;&lt;code&gt;multi_call/4&lt;/code&gt;&lt;/a&gt; when the reply cannot be specified in the return value of &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数を使用して、&lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; の&lt;/a&gt;戻り値で応答を指定できない場合に、&lt;a href=&quot;#call/3&quot;&gt; &lt;code&gt;call/3&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#multi_call/4&quot;&gt; &lt;code&gt;multi_call/4&lt;/code&gt; を&lt;/a&gt;呼び出したクライアントに明示的に応答を送信できます。</target>
        </trans-unit>
        <trans-unit id="e57ccc748f6208d195990a8cc4f2ec6d283e0449" translate="yes" xml:space="preserve">
          <source>This function can only be called once for any given task. If you want to be able to check multiple times if a long-running task has finished its computation, use &lt;a href=&quot;#yield/2&quot;&gt;&lt;code&gt;yield/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この関数は、特定のタスクに対して一度だけ呼び出すことができます。実行時間の長いタスクが計算を完了したかどうかを複数回確認できるようにするには、代わりに&lt;a href=&quot;#yield/2&quot;&gt; &lt;code&gt;yield/2&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="dbc62789df38c8a43882a7041f6f112d727b0b2b" translate="yes" xml:space="preserve">
          <source>This function can only be called once for any given task. If you want to be able to check multiple times if a long-running task has finished its computation, use &lt;a href=&quot;#yield_many/2&quot;&gt;&lt;code&gt;yield_many/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">This function can only be called once for any given task. If you want to be able to check multiple times if a long-running task has finished its computation, use &lt;a href=&quot;#yield_many/2&quot;&gt; &lt;code&gt;yield_many/2&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="1236468bd1c1382c4248a39818bd66a17820a8e1" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled.</source>
          <target state="translated">この関数は、まだコンパイルされていないモジュールでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="f3167d5a749467583b4064a26d582340a4353d73" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled. Use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#function_exported?/3&quot;&gt;&lt;code&gt;Kernel.function_exported?/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#macro_exported?/3&quot;&gt;&lt;code&gt;Kernel.macro_exported?/3&lt;/code&gt;&lt;/a&gt; to check for public functions and macros respectively in compiled modules.</source>
          <target state="translated">This function can only be used on modules that have not yet been compiled. Use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#function_exported?/3&quot;&gt; &lt;code&gt;Kernel.function_exported?/3&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#macro_exported?/3&quot;&gt; &lt;code&gt;Kernel.macro_exported?/3&lt;/code&gt; &lt;/a&gt; to check for public functions and macros respectively in compiled modules.</target>
        </trans-unit>
        <trans-unit id="98e8c080a62ccf76ac34e7992cc0abb94cb3247b" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled. Use &lt;a href=&quot;kernel#function_exported?/3&quot;&gt;&lt;code&gt;Kernel.function_exported?/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#macro_exported?/3&quot;&gt;&lt;code&gt;Kernel.macro_exported?/3&lt;/code&gt;&lt;/a&gt; to check for public functions and macros respectively in compiled modules.</source>
          <target state="translated">この関数は、まだコンパイルされていないモジュールでのみ使用できます。使用&lt;a href=&quot;kernel#function_exported?/3&quot;&gt; &lt;code&gt;Kernel.function_exported?/3&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;kernel#macro_exported?/3&quot;&gt; &lt;code&gt;Kernel.macro_exported?/3&lt;/code&gt; は、&lt;/a&gt;コンパイルされたモジュールで、それぞれのパブリック関数とマクロをチェックします。</target>
        </trans-unit>
        <trans-unit id="bf1f12a9ef0b2d87e6b97c45dc8af653b0c41485" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled. Use the &lt;a href=&quot;#c:__info__/1&quot;&gt;&lt;code&gt;Module.__info__/1&lt;/code&gt;&lt;/a&gt; callback to get all persisted attributes, or &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; to retrieve all documentation related attributes in compiled modules.</source>
          <target state="translated">This function can only be used on modules that have not yet been compiled. Use the &lt;a href=&quot;#c:__info__/1&quot;&gt; &lt;code&gt;Module.__info__/1&lt;/code&gt; &lt;/a&gt; callback to get all persisted attributes, or &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; &lt;/a&gt; to retrieve all documentation related attributes in compiled modules.</target>
        </trans-unit>
        <trans-unit id="fd3fe0cfc1b1ddd655c5e5aa49bdc3d3f6ab9cce" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled. Use the &lt;a href=&quot;#c:__info__/1&quot;&gt;&lt;code&gt;Module.__info__/1&lt;/code&gt;&lt;/a&gt; callback to get the public functions and macros in compiled modules.</source>
          <target state="translated">This function can only be used on modules that have not yet been compiled. Use the &lt;a href=&quot;#c:__info__/1&quot;&gt; &lt;code&gt;Module.__info__/1&lt;/code&gt; &lt;/a&gt; callback to get the public functions and macros in compiled modules.</target>
        </trans-unit>
        <trans-unit id="b999fb0a29efbf4b7d7e63844d3c5a01d70c5786" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled. Use the &lt;a href=&quot;module#c:__info__/1&quot;&gt;&lt;code&gt;Module.__info__/1&lt;/code&gt;&lt;/a&gt; callback to get all persisted attributes, or &lt;a href=&quot;code#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; to retrieve all documentation related attributes in compiled modules.</source>
          <target state="translated">この関数は、まだコンパイルされていないモジュールでのみ使用できます。&lt;a href=&quot;module#c:__info__/1&quot;&gt; &lt;code&gt;Module.__info__/1&lt;/code&gt; &lt;/a&gt;コールバックを使用して永続化されたすべての属性を取得するか、&lt;a href=&quot;code#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; &lt;/a&gt;を使用して、コンパイルされたモジュール内のすべてのドキュメント関連属性を取得します。</target>
        </trans-unit>
        <trans-unit id="8efbd3ec7525b3bf67461748ab16a84e708bda9c" translate="yes" xml:space="preserve">
          <source>This function can only be used on modules that have not yet been compiled. Use the &lt;a href=&quot;module#c:__info__/1&quot;&gt;&lt;code&gt;Module.__info__/1&lt;/code&gt;&lt;/a&gt; callback to get the public functions and macros in compiled modules.</source>
          <target state="translated">この関数は、まだコンパイルされていないモジュールでのみ使用できます。使用&lt;a href=&quot;module#c:__info__/1&quot;&gt; &lt;code&gt;Module.__info__/1&lt;/code&gt; &lt;/a&gt;コンパイルされたモジュールでのパブリック関数とマクロを取得するためにコールバックを。</target>
        </trans-unit>
        <trans-unit id="4d5f5ab7615681bbf6fd8b48511d63b244920517" translate="yes" xml:space="preserve">
          <source>This function changes the current working directory and loads the project at the given directory onto the project stack.</source>
          <target state="translated">この関数は、現在の作業ディレクトリを変更し、指定されたディレクトリのプロジェクトをプロジェクトスタックにロードします。</target>
        </trans-unit>
        <trans-unit id="8e3b67a18d5ef72f20a07d2887c95146e1126e8b" translate="yes" xml:space="preserve">
          <source>This function checks if &lt;code&gt;map_set1&lt;/code&gt; is a subset of &lt;code&gt;map_set2&lt;/code&gt;.</source>
          <target state="translated">この関数は、かどうかをチェックする &lt;code&gt;map_set1&lt;/code&gt; はのサブセットです &lt;code&gt;map_set2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2d91333f4d34514a5b0456ce852915cb7c3b1bf" translate="yes" xml:space="preserve">
          <source>This function could also receive &lt;code&gt;:restart&lt;/code&gt; and &lt;code&gt;:shutdown&lt;/code&gt; as options but those two options have been deprecated and it is now preferred to give them directly to &lt;code&gt;start_child&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt;.</source>
          <target state="translated">この関数は、オプションとして &lt;code&gt;:restart&lt;/code&gt; と &lt;code&gt;:shutdown&lt;/code&gt; を受け取ることもできますが、これらの2つのオプションは廃止されており、 &lt;code&gt;start_child&lt;/code&gt; と &lt;code&gt;async&lt;/code&gt; に直接指定することが推奨されています。</target>
        </trans-unit>
        <trans-unit id="ff81d1869547c10033febe62aa38e4cdb8f5c51e" translate="yes" xml:space="preserve">
          <source>This function discards all formatting of the original code.</source>
          <target state="translated">この関数は、元のコードのフォーマットをすべて破棄します。</target>
        </trans-unit>
        <trans-unit id="bc64919f284870e1f397d0b40b0bdb1f6bff9e2a" translate="yes" xml:space="preserve">
          <source>This function does not load the protocol at any point nor loads the new bytecode for the compiled module. However each implementation must be available and it will be loaded.</source>
          <target state="translated">この関数は、どの時点でもプロトコルをロードしたり、コンパイルされたモジュールの新しいバイトコードをロードしたりはしません。ただし、各実装が利用可能でなければならず、それがロードされます。</target>
        </trans-unit>
        <trans-unit id="5e9ba48e0ab714ebacb38f83050628f3e221fabd" translate="yes" xml:space="preserve">
          <source>This function does not query the file system, so it assumes no symlinks between the paths.</source>
          <target state="translated">この関数はファイルシステムへの問い合わせを行わないので、パス間にシンボリックリンクがないことを前提としています。</target>
        </trans-unit>
        <trans-unit id="352c8d36738c6dbc1f9234ecd7c20913e38da8c4" translate="yes" xml:space="preserve">
          <source>This function does not support regular expressions by design. When using regular expressions, it is often more efficient to have the regular expressions traverse the string at once than in parts, like this function does.</source>
          <target state="translated">この関数は設計上、正規表現をサポートしていません。正規表現を使用する場合、この関数のように文字列を部分的に移動させるよりも、正規表現を一度に移動させた方が効率的なことがよくあります。</target>
        </trans-unit>
        <trans-unit id="e8a6e9d8eb826748ee60c4f58dedbbe4f6cb4a1b" translate="yes" xml:space="preserve">
          <source>This function does nothing if the given directory already exists; in this case, it still logs the directory creation.</source>
          <target state="translated">この関数は、指定されたディレクトリが既に存在する場合には何もしません。</target>
        </trans-unit>
        <trans-unit id="36b23a290c43ebbc586e10e0e06f96b58b15d87c" translate="yes" xml:space="preserve">
          <source>This function expects a valid Elixir AST, also known as quoted expression, as argument. If you would like to &lt;code&gt;unquote&lt;/code&gt; any value, such as a map or a four-element tuple, you should call &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#escape/1&quot;&gt;&lt;code&gt;Macro.escape/1&lt;/code&gt;&lt;/a&gt; before unquoting.</source>
          <target state="translated">This function expects a valid Elixir AST, also known as quoted expression, as argument. If you would like to &lt;code&gt;unquote&lt;/code&gt; any value, such as a map or a four-element tuple, you should call &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#escape/1&quot;&gt; &lt;code&gt;Macro.escape/1&lt;/code&gt; &lt;/a&gt; before unquoting.</target>
        </trans-unit>
        <trans-unit id="df30bac7bb7c4cc8e50dfd93b53e8ccc88b71e0c" translate="yes" xml:space="preserve">
          <source>This function expects a valid Elixir AST, also known as quoted expression, as argument. If you would like to &lt;code&gt;unquote&lt;/code&gt; any value, such as a map or a four-element tuple, you should call &lt;a href=&quot;macro#escape/1&quot;&gt;&lt;code&gt;Macro.escape/1&lt;/code&gt;&lt;/a&gt; before unquoting.</source>
          <target state="translated">この関数は、引数として有効なElixir AST（引用符付き式とも呼ばれます）を予期しています。マップや4要素のタプルなど、値の &lt;code&gt;unquote&lt;/code&gt; を外したい場合は、引用を外す前にMacro.escape &lt;a href=&quot;macro#escape/1&quot;&gt; &lt;code&gt;Macro.escape/1&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9f41d20e5f7f0240b4127af0359d8f266f1d505e" translate="yes" xml:space="preserve">
          <source>This function expects the &lt;code&gt;id&lt;/code&gt; in the child specification. For example:</source>
          <target state="translated">この関数は、子仕様の &lt;code&gt;id&lt;/code&gt; を想定しています。例えば：</target>
        </trans-unit>
        <trans-unit id="0a24e422135d3a72abf7a20c0e4887299173a50a" translate="yes" xml:space="preserve">
          <source>This function expects the file to be closed with success, which is usually the case unless the &lt;code&gt;:delayed_write&lt;/code&gt; option is given. For this reason, we do not recommend passing &lt;code&gt;:delayed_write&lt;/code&gt; to this function.</source>
          <target state="translated">この関数は、ファイルが正常に閉じられることを期待します。これは通常、 &lt;code&gt;:delayed_write&lt;/code&gt; オプションが指定されていない場合に当てはまります。このため、この関数に &lt;code&gt;:delayed_write&lt;/code&gt; を渡すことはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="295cf4a022ae9886df00b43f0a66cd0e9487ce78" translate="yes" xml:space="preserve">
          <source>This function fails unless &lt;code&gt;enumerable&lt;/code&gt; is or can be converted into a list of tuples with &lt;em&gt;exactly&lt;/em&gt; two elements in each tuple.</source>
          <target state="translated">ない限り、この関数は失敗 &lt;code&gt;enumerable&lt;/code&gt; ある、または有するタプルのリストに変換することができ&lt;em&gt;、正確に&lt;/em&gt;各タプル内の2つの要素。</target>
        </trans-unit>
        <trans-unit id="2b4e5979f3e77e3276f95ef316da429597fdbf6e" translate="yes" xml:space="preserve">
          <source>This function follows symbolic links, so if a symbolic link points to a directory, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">この関数はシンボリックリンクをたどるので、シンボリックリンクがディレクトリを指す場合、 &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3644ab39c8ba48b5055b8839db30ad7f73881153" translate="yes" xml:space="preserve">
          <source>This function follows symbolic links, so if a symbolic link points to a regular file, &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">この関数はシンボリックリンクをたどるので、シンボリックリンクが通常のファイルを指している場合、 &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b2249c2f938c82b4201fa3098032739f601917fd" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; finishes but before &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; returns. It will be called once for every start phase defined in the application's (and any included applications') specification, in the order they are listed in.</source>
          <target state="translated">This function is called after &lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; finishes but before &lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt; returns. It will be called once for every start phase defined in the application's (and any included applications') specification, in the order they are listed in.</target>
        </trans-unit>
        <trans-unit id="ffa8e1b3e795c072d918d9fb7e14d1f0f556146a" translate="yes" xml:space="preserve">
          <source>This function is called after &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; finishes but before &lt;a href=&quot;application#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; returns. It will be called once for every start phase defined in the application's (and any included applications') specification, in the order they are listed in.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; が&lt;/a&gt;終了した後、&lt;a href=&quot;application#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt;が戻る前に呼び出されます。これは、アプリケーション（および含まれるアプリケーション）の仕様で定義されているすべての開始フェーズで、リストされている順に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="324f00c4d8269119ff0a84cb2a42e9f018297cf4" translate="yes" xml:space="preserve">
          <source>This function is called after an application has been stopped, i.e., after its supervision tree has been stopped. It should do the opposite of what the &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback did, and should perform any necessary cleanup. The return value of this callback is ignored.</source>
          <target state="translated">この関数は、アプリケーションが停止した後、つまりその管理ツリーが停止した後に呼び出されます。これは、&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;コールバックとは逆のことを行い、必要なクリーンアップを実行する必要があります。このコールバックの戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="d1e69bba301a1e9a02d953f1b325981a44e10b03" translate="yes" xml:space="preserve">
          <source>This function is called before the top-level supervisor is terminated. It receives the state returned by &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, if it did, or &lt;code&gt;[]&lt;/code&gt; otherwise. The return value is later passed to &lt;a href=&quot;#c:stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、トップレベルのスーパーバイザが終了する前に呼び出されます。受け取った場合は&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;によって返された状態を受け取り、受け取っていない場合は &lt;code&gt;[]&lt;/code&gt; を受け取ります。戻り値は後で&lt;a href=&quot;#c:stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;に渡されます。</target>
        </trans-unit>
        <trans-unit id="9100c3a64f894ac6d7e9c96487fe6fde6165a293" translate="yes" xml:space="preserve">
          <source>This function is called when an application is started using &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; (and functions on top of that, such as &lt;a href=&quot;#ensure_started/2&quot;&gt;&lt;code&gt;Application.ensure_started/2&lt;/code&gt;&lt;/a&gt;). This function should start the top-level process of the application (which should be the top supervisor of the application's supervision tree if the application follows the OTP design principles around supervision).</source>
          <target state="translated">This function is called when an application is started using &lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt; (and functions on top of that, such as &lt;a href=&quot;#ensure_started/2&quot;&gt; &lt;code&gt;Application.ensure_started/2&lt;/code&gt; &lt;/a&gt;). This function should start the top-level process of the application (which should be the top supervisor of the application's supervision tree if the application follows the OTP design principles around supervision).</target>
        </trans-unit>
        <trans-unit id="82b44336c3cb3815e176b242c09b89fad73c5747" translate="yes" xml:space="preserve">
          <source>This function is called when an application is started using &lt;a href=&quot;application#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; (and functions on top of that, such as &lt;a href=&quot;application#ensure_started/2&quot;&gt;&lt;code&gt;Application.ensure_started/2&lt;/code&gt;&lt;/a&gt;). This function should start the top-level process of the application (which should be the top supervisor of the application's supervision tree if the application follows the OTP design principles around supervision).</source>
          <target state="translated">アプリケーションを使用して開始されたときに、この関数が呼び出され&lt;a href=&quot;application#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt;（例えば、その上及び機能を&lt;a href=&quot;application#ensure_started/2&quot;&gt; &lt;code&gt;Application.ensure_started/2&lt;/code&gt; &lt;/a&gt;）。この関数は、アプリケーションの最上位プロセスを開始する必要があります（アプリケーションが監視に関するOTP設計原則に従っている場合、これはアプリケーションの監視ツリーの最上位のスーパーバイザーでなければなりません）。</target>
        </trans-unit>
        <trans-unit id="6397213a49d0900b8102d7287a15cef482e32621" translate="yes" xml:space="preserve">
          <source>This function is commonly used on sigil implementations (like &lt;code&gt;~r&lt;/code&gt;, &lt;code&gt;~s&lt;/code&gt; and others) which receive a raw, unescaped string.</source>
          <target state="translated">この機能は、一般的にシギルの実装に使用される（等 &lt;code&gt;~r&lt;/code&gt; 、 &lt;code&gt;~s&lt;/code&gt; など）生、エスケープ文字列を受け取ります。</target>
        </trans-unit>
        <trans-unit id="d995248df30d102cca47a9415c594b82af5a6b24" translate="yes" xml:space="preserve">
          <source>This function is deprecated in favor of register&lt;em&gt;test/6 which performs better under tight loops by avoiding `&lt;em&gt;_ENV&lt;/em&gt;&lt;/em&gt;`.</source>
          <target state="translated">This function is deprecated in favor of register&lt;em&gt;test/6 which performs better under tight loops by avoiding `&lt;em&gt;_ENV&lt;/em&gt;&lt;/em&gt;`.</target>
        </trans-unit>
        <trans-unit id="c1d006a8fc94dd9c7e1ba97fca6cd955efbe08aa" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Code.get_docs/2 always returns nil as its outdated documentation is no longer stored on BEAM files. Use Code.fetch_docs/1 instead.</source>
          <target state="translated">この関数は非推奨です。Code.get_docs/2は常にnilを返しますが、これは古いドキュメントがBEAMファイルに保存されなくなったためです。代わりにCode.fetch_docs/1を使用してください。</target>
        </trans-unit>
        <trans-unit id="d817e277c636af5ee8696b4df5a417a3f80ca798" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use :unicode.characters_to_nfc_binary/1 or :unicode.characters_to_nfd_binary/1 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに :unicode.characters_to_nfc_binary/1 または :unicode.characters_to_nfd_binary/1 を使用してください。</target>
        </trans-unit>
        <trans-unit id="60a45058b6790fa9239d39a09ba1cdda7435ef0c" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Application.put_all_env/2 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Application.put_all_env/2 を使用してください。</target>
        </trans-unit>
        <trans-unit id="0b23beae139d2fe3b8dd9e0473697f46a6bf3126" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Config.Reader.merge/2 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Config.Reader.merge/2 を使用してください。</target>
        </trans-unit>
        <trans-unit id="86105be5ebb65f8fc111c1f572d090b08b31bb9f" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Config.Reader.read!/2 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Config.Reader.read!/2 を使用してください。</target>
        </trans-unit>
        <trans-unit id="32063e9041204452ecaa501f77654e27a25810d5" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Config.Reader.read_imports!/2 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Config.Reader.read_imports!/2 を使用してください。</target>
        </trans-unit>
        <trans-unit id="6d197dc51c7a88c8b078c1ba4ae70a662b56ba4a" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use File.cwd!/0 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに File.cwd!/0 を使用してください。</target>
        </trans-unit>
        <trans-unit id="68131068aaa063f7af71e9caaedd8601eae221d0" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use File.cwd/0 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに File.cwd/0 を使用してください。</target>
        </trans-unit>
        <trans-unit id="0d830aeb45447ac17882f0a978208672f2f7513b" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Kernel.is_exception/1 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Kernel.is_exception/1 を使用してください。</target>
        </trans-unit>
        <trans-unit id="ad1c80a22d94657b35b167d9b5a2864907218fe0" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Kernel.is_struct/2 or pattern match on %Regex{} instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Kernel.is_struct/2 または %Regex{}のパターン一致を使用してください。</target>
        </trans-unit>
        <trans-unit id="d9e5b31b2e69678e54278c031112af02d71d6009" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use Mix.Project.compile_path/1 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに Mix.Project.compile_path/1 を使用してください。</target>
        </trans-unit>
        <trans-unit id="276ba4e5a68c3327954a5805cb6a3557ffa0219d" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use System.pid/0 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに System.pid/0 を使用してください。</target>
        </trans-unit>
        <trans-unit id="f81151223ea682b301965bb3a3e0dd982cec6acb" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use __STACKTRACE__ instead.</source>
          <target state="translated">この関数は非推奨です。代わりに __STACKTRACE__を使用してください。</target>
        </trans-unit>
        <trans-unit id="135f175d7851a47b5eed88f4c873758b05277e6c" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use compilation tracers described in the Code module.</source>
          <target state="translated">この関数は非推奨です。Codeモジュールで説明されているコンパイルトレーサーを使用してください。</target>
        </trans-unit>
        <trans-unit id="a03218696b1f2f17e92328d8d93708ef4f7e2fab" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use maps and the Map module instead.</source>
          <target state="translated">この関数は非推奨です。代わりにマップとマップモジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="5383727db2a4be3cae258dc51e6f2efc4de4ed67" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use register_test/6 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに register_test/6 を使用してください。</target>
        </trans-unit>
        <trans-unit id="294ad166bf50a35c62c560f0efcfd8102e974b3c" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use the Config module instead.</source>
          <target state="translated">この機能は非推奨です。代わりに Config モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="afca0b7ebdad39b2deed844f934a667e8bfea571" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use the Map module for working with maps or the Keyword module for working with keyword lists.</source>
          <target state="translated">この関数は非推奨です。マップを操作するには Map モジュールを、キーワード・リストを操作するには Keyword モジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="9a82ec0a465ee3ffdfcf230d76d58430e9467641" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use the MapSet module for working with sets.</source>
          <target state="translated">この関数は非推奨です。セットの操作には MapSet モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="01a53758d90cccf848faf6930295f5427dfb10e9" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use the MapSet module instead.</source>
          <target state="translated">この関数は非推奨です。代わりに MapSet モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="bc379a87241e5a13ab44a63bf4ea91b193d573b0" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use the new child specifications outlined in the Supervisor module instead.</source>
          <target state="translated">この機能は非推奨です。代わりに、スーパバイザモジュールで概説されている新しい子仕様を使用してください。</target>
        </trans-unit>
        <trans-unit id="03ea43b93839fafbcde7b68af462e5f9eed5a8d0" translate="yes" xml:space="preserve">
          <source>This function is meant to be used for development and debugging purposes. Do not depend on it in production code.</source>
          <target state="translated">この関数は、開発およびデバッグ目的で使用することを意図しています。プロダクションコードではこれに依存しないでください。</target>
        </trans-unit>
        <trans-unit id="a44ba9065763e466dc65d136dacf651b48b4c551" translate="yes" xml:space="preserve">
          <source>This function is often used to set an &lt;code&gt;:id&lt;/code&gt; option when the same module needs to be started multiple times in the supervision tree:</source>
          <target state="translated">この関数は、管理ツリーで同じモジュールを複数回起動する必要があるときに、 &lt;code&gt;:id&lt;/code&gt; オプションを設定するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="8b1fd4e59486849679c33280edfff500c42ca784" translate="yes" xml:space="preserve">
          <source>This function is often used with &lt;a href=&quot;#run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; since any evaluation is delayed until the stream is executed. See &lt;a href=&quot;#run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">この関数は、ストリームが実行されるまで評価が遅延するため、&lt;a href=&quot;#run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; で&lt;/a&gt;よく使用されます。例については、&lt;a href=&quot;#run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="35db107573e34332f733e95b887f5793867baa7f" translate="yes" xml:space="preserve">
          <source>This function is only available for modules being compiled.</source>
          <target state="translated">この関数はコンパイル中のモジュールに対してのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="104264e00ba2e4cbd7fe3847934c61231f453ccd" translate="yes" xml:space="preserve">
          <source>This function is rarely invoked in practice. Instead, nodes are named and started via the command line by using the &lt;code&gt;--sname&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; flags. If you need to use this function to dynamically name a node, please make sure the &lt;code&gt;epmd&lt;/code&gt; operating system process is running by calling &lt;code&gt;epmd -daemon&lt;/code&gt;.</source>
          <target state="translated">This function is rarely invoked in practice. Instead, nodes are named and started via the command line by using the &lt;code&gt;--sname&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; flags. If you need to use this function to dynamically name a node, please make sure the &lt;code&gt;epmd&lt;/code&gt; operating system process is running by calling &lt;code&gt;epmd -daemon&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6bf228951da57a994d903de6610ec9973c50adc" translate="yes" xml:space="preserve">
          <source>This function is used by &lt;a href=&quot;#container_doc/6&quot;&gt;&lt;code&gt;container_doc/6&lt;/code&gt;&lt;/a&gt; and friends to the maximum number of entries on the same line.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#container_doc/6&quot;&gt; &lt;code&gt;container_doc/6&lt;/code&gt; &lt;/a&gt;およびその仲間によって、同じ行のエントリの最大数まで使用されます。</target>
        </trans-unit>
        <trans-unit id="4934d4902c08909612efec0de002f5df60337c47" translate="yes" xml:space="preserve">
          <source>This function is useful for development and debugging when you have code that has been compiled or updated locally that you want to run on other nodes.</source>
          <target state="translated">この関数は、ローカルでコンパイルまたは更新されたコードを他のノードで実行したい場合の開発やデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="50108ad28c85db6aa26c7746481f7a06145abb10" translate="yes" xml:space="preserve">
          <source>This function is useful for dynamically creating and updating structs, as well as for converting maps to structs; in the latter case, just inserting the appropriate &lt;code&gt;:__struct__&lt;/code&gt; field into the map may not be enough and &lt;a href=&quot;#struct/2&quot;&gt;&lt;code&gt;struct/2&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">この関数は、構造体を動的に作成および更新したり、マップを構造体に変換したりするのに役立ちます。後者の場合、適切な &lt;code&gt;:__struct__&lt;/code&gt; フィールドをマップに挿入するだけでは不十分な場合があり、代わりに&lt;a href=&quot;#struct/2&quot;&gt; &lt;code&gt;struct/2&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c5385bb3c5cc1848788f9b3bfe82e294efa3644f" translate="yes" xml:space="preserve">
          <source>This function is useful in case you have templates but you want to precompile inside a module for speed.</source>
          <target state="translated">この関数はテンプレートがあるが、高速化のためにモジュール内でプリコンパイルしたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d4f1c9110eb148d436155bff7b34df88e2134afb" translate="yes" xml:space="preserve">
          <source>This function is useful in case you want to compute the value to put under &lt;code&gt;key&lt;/code&gt; only if &lt;code&gt;key&lt;/code&gt; is not already present (e.g., the value is expensive to calculate or generally difficult to setup and teardown again).</source>
          <target state="translated">この機能は、あなたが下に置くために値を計算したい場合に便利です &lt;code&gt;key&lt;/code&gt; 場合にのみ、 &lt;code&gt;key&lt;/code&gt; すでに存在していない（例えば、値が再びセットアップとティアダウンに計算することは、高価なまたは一般的に困難です）。</target>
        </trans-unit>
        <trans-unit id="e5bb11de88319e8025850f4eadfe13c588a0a62f" translate="yes" xml:space="preserve">
          <source>This function is useful in case you want to compute the value to put under &lt;code&gt;key&lt;/code&gt; only if &lt;code&gt;key&lt;/code&gt; is not already present, as for example, when the value is expensive to calculate or generally difficult to setup and teardown again.</source>
          <target state="translated">This function is useful in case you want to compute the value to put under &lt;code&gt;key&lt;/code&gt; only if &lt;code&gt;key&lt;/code&gt; is not already present, as for example, when the value is expensive to calculate or generally difficult to setup and teardown again.</target>
        </trans-unit>
        <trans-unit id="bf89a2dec2302779e475a219a3cc56e86137d9f9" translate="yes" xml:space="preserve">
          <source>This function is useful when there is a need to retrieve the current value (or something calculated in function of the current value) and update it at the same time. For example, it could be used to read the current age of a user while increasing it by one in one pass:</source>
          <target state="translated">この関数は、現在の値(または現在の値の関数で計算されたもの)を取得し、同時に更新する必要がある場合に便利です。例えば、ユーザーの現在の年齢を読み取ると同時に、1パスで1つずつ増やしていくことができます。</target>
        </trans-unit>
        <trans-unit id="68a1bac27fa5baaa472b5537d1c8fee1ec1e9478" translate="yes" xml:space="preserve">
          <source>This function is useful when you know the bytecode for module has been updated in the file system and you want to tell the VM to load it.</source>
          <target state="translated">この関数は、モジュールのバイトコードがファイルシステムで更新されていることを知っていて、それをロードするようにVMに指示したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="80a765f43bfbc2222f8ba2acffb613f97fc1ff91" translate="yes" xml:space="preserve">
          <source>This function is usually used in compilation tasks to trigger a full recompilation whenever such configuration files change.</source>
          <target state="translated">この関数は通常、コンパイルタスクで使用され、設定ファイルが変更されるたびに完全な再コンパイルを開始します。</target>
        </trans-unit>
        <trans-unit id="5161d32c18b7b4c986062d2c9d65d697f139b8ce" translate="yes" xml:space="preserve">
          <source>This function is usually used in compilation tasks to trigger a full recompilation whenever such configuration files change. For this reason, the mtime is cached to avoid file system lookups.</source>
          <target state="translated">この関数は通常、このような設定ファイルが変更されるたびに完全な再コンパイルをトリガするためにコンパイルタスクで使用されます。このため、ファイルシステムのルックアップを避けるために mtime がキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="79351219ceeb1dfd5ceb68c4d1517bb1d53f3be9" translate="yes" xml:space="preserve">
          <source>This function keeps OTP semantics regarding error reporting. If the reason is any other than &lt;code&gt;:normal&lt;/code&gt;, &lt;code&gt;:shutdown&lt;/code&gt; or &lt;code&gt;{:shutdown, _}&lt;/code&gt;, an error report is logged.</source>
          <target state="translated">この関数は、エラー報告に関するOTPセマンティクスを維持します。理由が &lt;code&gt;:normal&lt;/code&gt; 、 &lt;code&gt;:shutdown&lt;/code&gt; または &lt;code&gt;{:shutdown, _}&lt;/code&gt; 場合、エラーレポートがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="9fb9a7593d63fc692737aa5ebbecdecf78a06b53" translate="yes" xml:space="preserve">
          <source>This function keeps OTP semantics regarding error reporting. If the reason is any other than &lt;code&gt;:normal&lt;/code&gt;, &lt;code&gt;:shutdown&lt;/code&gt; or &lt;code&gt;{:shutdown, _}&lt;/code&gt;, an error report will be logged.</source>
          <target state="translated">この関数は、エラー報告に関するOTPセマンティクスを維持します。理由が &lt;code&gt;:normal&lt;/code&gt; 、 &lt;code&gt;:shutdown&lt;/code&gt; または &lt;code&gt;{:shutdown, _}&lt;/code&gt; 場合、エラーレポートがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="78ffeed4e3d53d08c6f8c5350cc948af11ad5cb9" translate="yes" xml:space="preserve">
          <source>This function looks up an executable program given its name using the environment variable PATH on Unix and Windows. It also considers the proper executable extension for each operating system, so for Windows it will try to lookup files with &lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.cmd&lt;/code&gt; or similar extensions.</source>
          <target state="translated">この関数は、UnixおよびWindowsの環境変数PATHを使用して、名前が指定された実行可能プログラムを検索します。また、各オペレーティングシステムの適切な実行可能拡張子も考慮されるため、Windowsの場合は、 &lt;code&gt;.com&lt;/code&gt; 、 &lt;code&gt;.cmd&lt;/code&gt; などの拡張子を持つファイルを検索しようとします。</target>
        </trans-unit>
        <trans-unit id="f333cc8d70b1f8c9b88e75ba1e997bdd40b786ac" translate="yes" xml:space="preserve">
          <source>This function looks up an executable program given its name using the environment variable PATH on Windows and Unix-like operating systems. It also considers the proper executable extension for each operating system, so for Windows it will try to lookup files with &lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.cmd&lt;/code&gt; or similar extensions.</source>
          <target state="translated">This function looks up an executable program given its name using the environment variable PATH on Windows and Unix-like operating systems. It also considers the proper executable extension for each operating system, so for Windows it will try to lookup files with &lt;code&gt;.com&lt;/code&gt; , &lt;code&gt;.cmd&lt;/code&gt; or similar extensions.</target>
        </trans-unit>
        <trans-unit id="5b2d601e721f14118337f53a36587c0e933c7a5a" translate="yes" xml:space="preserve">
          <source>This function maps each element of the &lt;code&gt;enumerable&lt;/code&gt; using the provided &lt;code&gt;mapper&lt;/code&gt; function. The enumerable is then sorted by the mapped elements using the &lt;code&gt;sorter&lt;/code&gt; function, which defaults to &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C=/2&quot;&gt;&lt;code&gt;Kernel.&amp;lt;=/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This function maps each element of the &lt;code&gt;enumerable&lt;/code&gt; using the provided &lt;code&gt;mapper&lt;/code&gt; function. The enumerable is then sorted by the mapped elements using the &lt;code&gt;sorter&lt;/code&gt; function, which defaults to &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C=/2&quot;&gt; &lt;code&gt;Kernel.&amp;lt;=/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="03c6c18f32c36e354994adeed127bb47604a29a4" translate="yes" xml:space="preserve">
          <source>This function maps each element of the &lt;code&gt;enumerable&lt;/code&gt; using the provided &lt;code&gt;mapper&lt;/code&gt; function. The enumerable is then sorted by the mapped elements using the &lt;code&gt;sorter&lt;/code&gt; function, which defaults to &lt;a href=&quot;kernel#%253C=/2&quot;&gt;&lt;code&gt;Kernel.&amp;lt;=/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、提供された &lt;code&gt;mapper&lt;/code&gt; 関数を使用して、 &lt;code&gt;enumerable&lt;/code&gt; 各要素をマップします。次に、列挙型は、デフォルトで&lt;a href=&quot;kernel#%253C=/2&quot;&gt; &lt;code&gt;Kernel.&amp;lt;=/2&lt;/code&gt; &lt;/a&gt;設定されている &lt;code&gt;sorter&lt;/code&gt; 関数を使用して、マップされた要素によってソートされます。</target>
        </trans-unit>
        <trans-unit id="23713134a12e3df672b0e8ed70b6c1e947176852" translate="yes" xml:space="preserve">
          <source>This function may fail while copying files, in such cases, it will leave the destination directory in a dirty state, where file which have already been copied won't be removed.</source>
          <target state="translated">この関数は、ファイルのコピー中に失敗することがあり、そのような場合、コピー先のディレクトリがダーティな状態になり、既にコピーされているファイルは削除されません。</target>
        </trans-unit>
        <trans-unit id="fc53ec83419111665403d3184c5309cb3ac3114b" translate="yes" xml:space="preserve">
          <source>This function may return an error with an appropriate error tuple if the &lt;code&gt;child_id&lt;/code&gt; is not found, or if the current process is running or being restarted.</source>
          <target state="translated">&lt;code&gt;child_id&lt;/code&gt; が見つからない場合、または現在のプロセスが実行中または再起動中の場合、この関数は適切なエラータプルを含むエラーを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="8ae84d6b7d02c1f5e4d3d90e843aa4994fe5afbb" translate="yes" xml:space="preserve">
          <source>This function merges two URIs as per &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-5.2&quot;&gt;RFC 3986, section 5.2&lt;/a&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-5.2&quot;&gt;、RFC 3986のセクション5.2&lt;/a&gt;に従って、2つのURIをマージします。</target>
        </trans-unit>
        <trans-unit id="37485440bd71be8d2898fa309650b1d1cd41ee6d" translate="yes" xml:space="preserve">
          <source>This function must be invoked passing a keyword list. Each key in the keyword list can be accessed in the template using the &lt;code&gt;@&lt;/code&gt; macro.</source>
          <target state="translated">This function must be invoked passing a keyword list. Each key in the keyword list can be accessed in the template using the &lt;code&gt;@&lt;/code&gt; macro.</target>
        </trans-unit>
        <trans-unit id="05add340c108b6747380b0569be39878bbcf49a1" translate="yes" xml:space="preserve">
          <source>This function mutes the &lt;code&gt;:console&lt;/code&gt; backend and captures any log messages sent to Logger from the calling processes. It is possible to ensure explicit log messages from other processes are captured by waiting for their exit or monitor signal.</source>
          <target state="translated">This function mutes the &lt;code&gt;:console&lt;/code&gt; backend and captures any log messages sent to Logger from the calling processes. It is possible to ensure explicit log messages from other processes are captured by waiting for their exit or monitor signal.</target>
        </trans-unit>
        <trans-unit id="590e88bd007ad46708757dcaddaef35962698f85" translate="yes" xml:space="preserve">
          <source>This function only accepts floats and always returns a float. Use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;&lt;code&gt;Kernel.round/1&lt;/code&gt;&lt;/a&gt; if you want a function that accepts both floats and integers and always returns an integer.</source>
          <target state="translated">This function only accepts floats and always returns a float. Use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt; &lt;code&gt;Kernel.round/1&lt;/code&gt; &lt;/a&gt; if you want a function that accepts both floats and integers and always returns an integer.</target>
        </trans-unit>
        <trans-unit id="7249b2b7e8627d3ee0f960577e5cfe5cf5a1c42f" translate="yes" xml:space="preserve">
          <source>This function only accepts floats and always returns a float. Use &lt;a href=&quot;kernel#round/1&quot;&gt;&lt;code&gt;Kernel.round/1&lt;/code&gt;&lt;/a&gt; if you want a function that accepts both floats and integers and always returns an integer.</source>
          <target state="translated">この関数は浮動小数点数のみを受け入れ、常に浮動小数点数を返します。浮動小数点数と整数の両方を受け入れ、常に整数を返す関数が必要な場合は、&lt;a href=&quot;kernel#round/1&quot;&gt; &lt;code&gt;Kernel.round/1&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="50d8af487774d9f7e007fed31c88d7f628e11c28" translate="yes" xml:space="preserve">
          <source>This function only ever needs to store the last emitted element.</source>
          <target state="translated">この関数は、最後に放出された要素を保存する必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="295eba0c064a53ae3a651500b18114cd09951154" translate="yes" xml:space="preserve">
          <source>This function only works if ANSI escape codes are enabled on the shell, which means this function is by default unavailable on Windows machines.</source>
          <target state="translated">この関数は、シェルでANSIエスケープコードが有効になっている場合にのみ動作します。</target>
        </trans-unit>
        <trans-unit id="f8e779fa093dd3331e4911e8f1f5e060533eb427" translate="yes" xml:space="preserve">
          <source>This function produces the same result as the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#++/2&quot;&gt;&lt;code&gt;Kernel.++/2&lt;/code&gt;&lt;/a&gt; operator for lists.</source>
          <target state="translated">This function produces the same result as the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#++/2&quot;&gt; &lt;code&gt;Kernel.++/2&lt;/code&gt; &lt;/a&gt; operator for lists.</target>
        </trans-unit>
        <trans-unit id="528389cc0cdba8ed58acc495892cfb708eb725e7" translate="yes" xml:space="preserve">
          <source>This function produces the same result as the &lt;a href=&quot;kernel#++/2&quot;&gt;&lt;code&gt;Kernel.++/2&lt;/code&gt;&lt;/a&gt; operator for lists.</source>
          <target state="translated">この関数は、リストの&lt;a href=&quot;kernel#++/2&quot;&gt; &lt;code&gt;Kernel.++/2&lt;/code&gt; &lt;/a&gt;演算子と同じ結果を生成します。</target>
        </trans-unit>
        <trans-unit id="2bd92c0ea07d00b8bd2fd96f2a2022d49efc3e5e" translate="yes" xml:space="preserve">
          <source>This function purges all modules currently kept by the compiler, allowing old compiler module names to be reused. If there are any processes running any code from such modules, they will be terminated too.</source>
          <target state="translated">この関数は、コンパイラが現在保持しているすべてのモジュールを削除し、古いコンパイラモジュール名を再利用できるようにします。そのようなモジュールからコードを実行しているプロセスがある場合は、それらも終了します。</target>
        </trans-unit>
        <trans-unit id="e3b8f5e13f2da9604ba811f1ee787c3cba445b85" translate="yes" xml:space="preserve">
          <source>This function receives a list of tasks and waits for their replies in the given time interval. It returns a list of the results, in the same order as the tasks supplied in the &lt;code&gt;tasks&lt;/code&gt; input argument.</source>
          <target state="translated">This function receives a list of tasks and waits for their replies in the given time interval. It returns a list of the results, in the same order as the tasks supplied in the &lt;code&gt;tasks&lt;/code&gt; input argument.</target>
        </trans-unit>
        <trans-unit id="0c8f05dda04bc767a1282d611e4af5dafdcb7b8d" translate="yes" xml:space="preserve">
          <source>This function receives a list of tasks and waits for their replies in the given time interval. It returns a list of two-element tuples, with the task as the first element and the yielded result as the second. The tasks in the returned list will be in the same order as the tasks supplied in the &lt;code&gt;tasks&lt;/code&gt; input argument.</source>
          <target state="translated">この関数は、タスクのリストを受け取り、指定された時間間隔でそれらの応答を待ちます。最初の要素としてタスクを、2番目の要素として生成された結果を使用して、2要素のタプルのリストを返します。返されたリストのタスクは、 &lt;code&gt;tasks&lt;/code&gt; 入力引数で指定されたタスクと同じ順序になります。</target>
        </trans-unit>
        <trans-unit id="66ca8de099428d7febba36a7eae6660d193647fb" translate="yes" xml:space="preserve">
          <source>This function reruns the given task; to do that, it first re-enables the task and then runs it as normal.</source>
          <target state="translated">この関数は、与えられたタスクを再実行します。そのために、まずタスクを再有効化してから通常通りに実行します。</target>
        </trans-unit>
        <trans-unit id="7f88acb523db6223367758a20b1546d9d8c207d7" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;{:ok, owner}&lt;/code&gt; or &lt;code&gt;{:error, reason}&lt;/code&gt;. The &lt;code&gt;owner&lt;/code&gt; is the PID in the registry partition responsible for the PID. The owner is automatically linked to the caller.</source>
          <target state="translated">この関数は、 &lt;code&gt;{:ok, owner}&lt;/code&gt; または &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。 &lt;code&gt;owner&lt;/code&gt; PIDを担当するレジストリパーティション内のPIDです。所有者は自動的に発信者にリンクされます。</target>
        </trans-unit>
        <trans-unit id="902dd92c08e25103df4b50bae4697cf10a6fc6fd" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;{:ok, pid}&lt;/code&gt; in case of success, otherwise it returns &lt;code&gt;{:error, reason}&lt;/code&gt;.</source>
          <target state="translated">この関数は、成功した場合は &lt;code&gt;{:ok, pid}&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="9f3353899fe4360fc7c94245abd3933c4141ee40" translate="yes" xml:space="preserve">
          <source>This function returns a list of &lt;code&gt;{id, child, type, modules}&lt;/code&gt; tuples, where:</source>
          <target state="translated">この関数は、 &lt;code&gt;{id, child, type, modules}&lt;/code&gt; タプルのリストを返します。ここで、</target>
        </trans-unit>
        <trans-unit id="c22e6a9591d2580a185def76ec2a7822b6c5d175" translate="yes" xml:space="preserve">
          <source>This function returns a list of tuples containing:</source>
          <target state="translated">この関数は、以下を含むタプルのリストを返します。</target>
        </trans-unit>
        <trans-unit id="4ffb7797732e8eabda6ec4358625e5d11748d93c" translate="yes" xml:space="preserve">
          <source>This function returns a new enumerable built by appending the result of invoking &lt;code&gt;fun&lt;/code&gt; on each element of &lt;code&gt;enumerable&lt;/code&gt; together; conceptually, this is similar to a combination of &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;map/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#concat/1&quot;&gt;&lt;code&gt;concat/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、呼び出した結果追加することによって構築された新しい列挙を返し &lt;code&gt;fun&lt;/code&gt; の各要素に &lt;code&gt;enumerable&lt;/code&gt; 一緒に。概念的には、これは&lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;map/2&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#concat/1&quot;&gt; &lt;code&gt;concat/1&lt;/code&gt; の&lt;/a&gt;組み合わせに似ています。</target>
        </trans-unit>
        <trans-unit id="a4c4692a1b2085c0d5c4c7060abeb21e5e80d789" translate="yes" xml:space="preserve">
          <source>This function returns a new stream built by appending the result of invoking &lt;code&gt;fun&lt;/code&gt; on each element of &lt;code&gt;enumerable&lt;/code&gt; together.</source>
          <target state="translated">この関数は、 &lt;code&gt;enumerable&lt;/code&gt; の各要素で &lt;code&gt;fun&lt;/code&gt; を呼び出した結果を一緒に追加することによって構築された新しいストリームを返します。</target>
        </trans-unit>
        <trans-unit id="9207161e31f07b71a8de0abeb84876a37ff477ac" translate="yes" xml:space="preserve">
          <source>This function returns a timer reference, which can be read with &lt;a href=&quot;#read_timer/1&quot;&gt;&lt;code&gt;read_timer/1&lt;/code&gt;&lt;/a&gt; or canceled with &lt;a href=&quot;#cancel_timer/1&quot;&gt;&lt;code&gt;cancel_timer/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数はタイマーリファレンスを返します。タイマーリファレンスは&lt;a href=&quot;#read_timer/1&quot;&gt; &lt;code&gt;read_timer/1&lt;/code&gt; で&lt;/a&gt;読み取るか、&lt;a href=&quot;#cancel_timer/1&quot;&gt; &lt;code&gt;cancel_timer/1&lt;/code&gt; で&lt;/a&gt;キャンセルできます。</target>
        </trans-unit>
        <trans-unit id="e3b4424c23b3b31b7bea686c83f6fbd90413317a" translate="yes" xml:space="preserve">
          <source>This function returns a tuple containing the collected result and the command exit status.</source>
          <target state="translated">この関数は、収集した結果とコマンドの終了ステータスを含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="1c1572156370222a67bdcd453345528785b5b103" translate="yes" xml:space="preserve">
          <source>This function returns a tuple containing the supervisor flags and child specifications.</source>
          <target state="translated">この関数は、スーパーバイザフラグと子指定を含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="a236219391c9665ab6cd417a5f529892164a5643" translate="yes" xml:space="preserve">
          <source>This function returns a tuple containing the supervisor options.</source>
          <target state="translated">この関数は、スーパバイザオプションを含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="f10657fb9f9d2dbe8abd5fb7b8f8b43416880ed5" translate="yes" xml:space="preserve">
          <source>This function returns an empty list when used at the root of an umbrella project because there is no compile manifest to extract the function call information from. To get the function calls of each child in an umbrella, execute the function at the root of each individual application.</source>
          <target state="translated">この関数は、アンブレラプロジェクトのルートで使用すると、関数呼び出し情報を抽出するためのコンパイルマニフェストがないため、空のリストを返します。アンブレラ内の各子の関数呼び出しを取得するには、各アプリケーションのルートでこの関数を実行します。</target>
        </trans-unit>
        <trans-unit id="a6fbf0f83b2acb02bb139f54eef721ae8347767a" translate="yes" xml:space="preserve">
          <source>This function returns either &lt;code&gt;{:ok, definition, clauses}&lt;/code&gt; or &lt;code&gt;:error&lt;/code&gt;. Where &lt;code&gt;definition&lt;/code&gt; is &lt;code&gt;:def&lt;/code&gt;, &lt;code&gt;:defp&lt;/code&gt;, &lt;code&gt;:defmacro&lt;/code&gt; or &lt;code&gt;:defmacrop&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;{:ok, definition, clauses}&lt;/code&gt; または &lt;code&gt;:error&lt;/code&gt; を返します。ここでの &lt;code&gt;definition&lt;/code&gt; は &lt;code&gt;:def&lt;/code&gt; 、 &lt;code&gt;:defp&lt;/code&gt; 、 &lt;code&gt;:defmacro&lt;/code&gt; または &lt;code&gt;:defmacrop&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5908984f567478e4a60e81ad1b7f0e0a95ff38d7" translate="yes" xml:space="preserve">
          <source>This function returns immediately and ignores nodes that do not exist, or where the server name does not exist.</source>
          <target state="translated">この関数は、存在しないノードやサーバ名が存在しないノードを無視して直ちに戻ります。</target>
        </trans-unit>
        <trans-unit id="3c26de55ed91737da0adcc687c60b204ef4f41f8" translate="yes" xml:space="preserve">
          <source>This function returns the breakpoint ID and will raise if there is an error setting up the breakpoint.</source>
          <target state="translated">この関数はブレークポイントIDを返し、ブレークポイントの設定にエラーがあった場合にレイズします。</target>
        </trans-unit>
        <trans-unit id="ac0ff9db2cb58b04d706d4d0f95101c014828e27" translate="yes" xml:space="preserve">
          <source>This function returns the current application name, but only if the application name should be printed.</source>
          <target state="translated">この関数は、現在のアプリケーション名を返しますが、アプリケーション名が印刷されるべきかどうかのみを返します。</target>
        </trans-unit>
        <trans-unit id="e9031a38e543bd6739ba00dbc5fed0a5a01f11ea" translate="yes" xml:space="preserve">
          <source>This function returns the difference in seconds where seconds are measured according to &lt;a href=&quot;calendar.iso&quot;&gt;&lt;code&gt;Calendar.ISO&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;calendar.iso&quot;&gt; &lt;code&gt;Calendar.ISO&lt;/code&gt; &lt;/a&gt;に従って秒が測定される秒単位の差を返します。</target>
        </trans-unit>
        <trans-unit id="f5af0f8f1d39fdde7d2176a52228d4efede75942" translate="yes" xml:space="preserve">
          <source>This function returns the difference in seconds where seconds are measured according to &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.ISO.html&quot;&gt;&lt;code&gt;Calendar.ISO&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This function returns the difference in seconds where seconds are measured according to &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.ISO.html&quot;&gt; &lt;code&gt;Calendar.ISO&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ef0ad46bb886f62fbf2201ba9b9f859d8daf73a5" translate="yes" xml:space="preserve">
          <source>This function returns:</source>
          <target state="translated">この関数は返します。</target>
        </trans-unit>
        <trans-unit id="dc16b8c0d60d4a66a61b6088df628cb2cdbe5f10" translate="yes" xml:space="preserve">
          <source>This function should be used to convert a list of paths to a path. Note that any trailing slash is removed when joining.</source>
          <target state="translated">この関数は、パスのリストをパスに変換するために使用します。結合時に末尾のスラッシュが削除されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f72643333bea463c7a8ea5767e80e22d1a7036bf" translate="yes" xml:space="preserve">
          <source>This function should be used to remove a specific extension which may or may not be there.</source>
          <target state="translated">この関数は、あるかもしれない、またはないかもしれない特定の拡張機能を削除するために使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1fc59171af9c1101b367bf06403fbdf95aa428ac" translate="yes" xml:space="preserve">
          <source>This function should either return &lt;code&gt;{:ok, pid}&lt;/code&gt; or &lt;code&gt;{:ok, pid, state}&lt;/code&gt; if startup is successful. &lt;code&gt;pid&lt;/code&gt; should be the PID of the top supervisor. &lt;code&gt;state&lt;/code&gt; can be an arbitrary term, and if omitted will default to &lt;code&gt;[]&lt;/code&gt;; if the application is later stopped, &lt;code&gt;state&lt;/code&gt; is passed to the &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; callback (see the documentation for the &lt;a href=&quot;#c:stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; callback for more information).</source>
          <target state="translated">起動が成功した場合 &lt;code&gt;{:ok, pid, state}&lt;/code&gt; この関数は &lt;code&gt;{:ok, pid}&lt;/code&gt; または{：ok、pid、state}を返す必要があります。 &lt;code&gt;pid&lt;/code&gt; は、トップのスーパーバイザのPIDである必要があります。 &lt;code&gt;state&lt;/code&gt; は任意の用語にすることができ、省略した場合のデフォルトは &lt;code&gt;[]&lt;/code&gt; になります。アプリケーションが後で停止した場合、 &lt;code&gt;state&lt;/code&gt; は&lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;コールバックに渡されます（詳細については、&lt;a href=&quot;#c:stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;コールバックのドキュメントを参照してください）。</target>
        </trans-unit>
        <trans-unit id="21a65796034b404efe85bb5cf745e9599f9e6028" translate="yes" xml:space="preserve">
          <source>This function should not be used at runtime in application code (as opposed to infrastructure and build code like Mix tasks). Mix is a build tool and may not be available after the code is compiled (for example in a release).</source>
          <target state="translated">この関数は、アプリケーションコードの実行時に使用すべきではありません(Mixタスクのようなインフラストラクチャやビルドコードとは対照的です)。Mixはビルドツールであり、コードがコンパイルされた後(リリース時など)には利用できない場合があります。</target>
        </trans-unit>
        <trans-unit id="7d9efdf471f60e2ed682dd93f955c9a027ea855c" translate="yes" xml:space="preserve">
          <source>This function should not be used at runtime in application code (see &lt;a href=&quot;#env/0&quot;&gt;&lt;code&gt;env/0&lt;/code&gt;&lt;/a&gt; for more information).</source>
          <target state="translated">この関数は、実行時にアプリケーションコードで使用しないでください（詳細については、&lt;a href=&quot;#env/0&quot;&gt; &lt;code&gt;env/0&lt;/code&gt; &lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="bf1fdd59778e871792165fd9cd597befae6dbe8a" translate="yes" xml:space="preserve">
          <source>This function should return &lt;code&gt;{:ok, value}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value under &lt;code&gt;key&lt;/code&gt; if the key exists in the term, or &lt;code&gt;:error&lt;/code&gt; if the key does not exist in the term.</source>
          <target state="translated">この関数は返すべき &lt;code&gt;{:ok, value}&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 下の値である &lt;code&gt;key&lt;/code&gt; のキー用語に存在する、または場合 &lt;code&gt;:error&lt;/code&gt; キー用語に存在しない場合。</target>
        </trans-unit>
        <trans-unit id="ec58ff70bd307ba9cba1f4ad5eec25344d58ad92" translate="yes" xml:space="preserve">
          <source>This function shouldn't be invoked directly, unless when implementing a custom &lt;code&gt;inspect_fun&lt;/code&gt; to be given to &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt;. Everywhere else, &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html#to_doc/2&quot;&gt;&lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt;&lt;/a&gt; should be preferred as it handles structs and exceptions.</source>
          <target state="translated">This function shouldn't be invoked directly, unless when implementing a custom &lt;code&gt;inspect_fun&lt;/code&gt; to be given to &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;. Everywhere else, &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html#to_doc/2&quot;&gt; &lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt; &lt;/a&gt; should be preferred as it handles structs and exceptions.</target>
        </trans-unit>
        <trans-unit id="4e0b499c79fbb5106ff12e9b189fd33d1ca2f878" translate="yes" xml:space="preserve">
          <source>This function shouldn't be invoked directly, unless when implementing a custom &lt;code&gt;inspect_fun&lt;/code&gt; to be given to &lt;a href=&quot;inspect.opts&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt;. Everywhere else, &lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt;&lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt;&lt;/a&gt; should be preferred as it handles structs and exceptions.</source>
          <target state="translated">カスタム実装する場合に限り、この関数は、直接呼び出すべきではありません &lt;code&gt;inspect_fun&lt;/code&gt; をに与えられる&lt;a href=&quot;inspect.opts&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;。それ以外の場所では、&lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt; &lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt; &lt;/a&gt;が構造体と例外を処理するため、推奨されます。</target>
        </trans-unit>
        <trans-unit id="7c7b31de7bb27ac0e240dd4370dcbe439841a348" translate="yes" xml:space="preserve">
          <source>This function simply reads the configuration value for &lt;code&gt;:ansi_enabled&lt;/code&gt; in the &lt;code&gt;:elixir&lt;/code&gt; application. The value is by default &lt;code&gt;false&lt;/code&gt; unless Elixir can detect during startup that both &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; are terminals.</source>
          <target state="translated">この関数は、単にのための設定値読み込み &lt;code&gt;:ansi_enabled&lt;/code&gt; で &lt;code&gt;:elixir&lt;/code&gt; アプリケーションを。Elixirが起動時に &lt;code&gt;stdout&lt;/code&gt; と &lt;code&gt;stderr&lt;/code&gt; の両方がターミナルであることを検出できない場合、値はデフォルトで &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="334f3d5e4471a23891371c10f4d6629f6f864306" translate="yes" xml:space="preserve">
          <source>This function spawns a process that is linked to and monitored by the caller process. The linking part is important because it aborts the task if the parent process dies. It also guarantees the code before async/await has the same properties after you add the async call. For example, imagine you have this:</source>
          <target state="translated">この関数は、呼び出し元のプロセスにリンクして監視するプロセスをスポーンします。親プロセスが死亡した場合にタスクを中止するので、リンクの部分は重要です。また、async/await の前のコードが、async 呼び出しを追加した後も同じプロパティを持つことを保証します。例えば、以下のようになると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="c734a84fb40ac9d66210c296db69e31b0a02eadc" translate="yes" xml:space="preserve">
          <source>This function splits the given &lt;code&gt;string&lt;/code&gt; into a list of strings in a similar way to many shells.</source>
          <target state="translated">この関数は、多くのシェルと同様の方法で、指定された &lt;code&gt;string&lt;/code&gt; のリストに分割します。</target>
        </trans-unit>
        <trans-unit id="ef2d261f9369eef612d3e5142c44d6cc0051a05a" translate="yes" xml:space="preserve">
          <source>This function takes the same options as &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#register_attribute/3&quot;&gt;&lt;code&gt;Module.register_attribute/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This function takes the same options as &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#register_attribute/3&quot;&gt; &lt;code&gt;Module.register_attribute/3&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2feb07f1ca6bdd2a159c3be3d1d2d967088b7ce0" translate="yes" xml:space="preserve">
          <source>This function uses &lt;a href=&quot;#expand_once/2&quot;&gt;&lt;code&gt;expand_once/2&lt;/code&gt;&lt;/a&gt; under the hood. Check it out for more information and examples.</source>
          <target state="translated">この関数は&lt;a href=&quot;#expand_once/2&quot;&gt; &lt;code&gt;expand_once/2&lt;/code&gt; &lt;/a&gt;使用します。詳細と例については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="6e2fc530fdd36a8deb023fe2c739cc5eac5cf4d5" translate="yes" xml:space="preserve">
          <source>This function uses Erlang's &lt;a href=&quot;http://www.erlang.org/doc/man/rand.html&quot;&gt;&lt;code&gt;:rand&lt;/code&gt; module&lt;/a&gt; to calculate the random value. Check its documentation for setting a different random algorithm or a different seed.</source>
          <target state="translated">この関数はErlangの&lt;a href=&quot;http://www.erlang.org/doc/man/rand.html&quot;&gt; &lt;code&gt;:rand&lt;/code&gt; モジュール&lt;/a&gt;を使用してランダムな値を計算します。別のランダムアルゴリズムまたは別のシードの設定については、そのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="97aac23199beb8d9422f08074a16068341921614" translate="yes" xml:space="preserve">
          <source>This function uses the &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function, which is detailed in a later section.</source>
          <target state="translated">この関数は、&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造を走査します。ただし、 &lt;code&gt;key&lt;/code&gt; が関数である場合を除きます。これについては、後のセクションで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="f5a185e1be937b1dd6a14d707efd0c65f663b9df" translate="yes" xml:space="preserve">
          <source>This function uses the &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function, which is detailed in a later section.</source>
          <target state="translated">This function uses the &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt; , unless the &lt;code&gt;key&lt;/code&gt; is a function, which is detailed in a later section.</target>
        </trans-unit>
        <trans-unit id="8aa0a6bd6b734aebad750c42bf0f37171db0b991" translate="yes" xml:space="preserve">
          <source>This function uses the &lt;code&gt;ELIXIR_EDITOR&lt;/code&gt; environment variable and falls back to &lt;code&gt;EDITOR&lt;/code&gt; if the former is not available.</source>
          <target state="translated">この関数は &lt;code&gt;ELIXIR_EDITOR&lt;/code&gt; 環境変数を使用し、前者が使用できない場合は &lt;code&gt;EDITOR&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="b61a016ed8075bfc5c39ffca808acebff61a6a18" translate="yes" xml:space="preserve">
          <source>This function uses the merge sort algorithm. Do not use this function to sort structs, see &lt;a href=&quot;#sort/2&quot;&gt;&lt;code&gt;sort/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">This function uses the merge sort algorithm. Do not use this function to sort structs, see &lt;a href=&quot;#sort/2&quot;&gt; &lt;code&gt;sort/2&lt;/code&gt; &lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="a8837dfaf4412802924cfa8f14dc7efe7bf20108" translate="yes" xml:space="preserve">
          <source>This function uses the merge sort algorithm. The given function should compare two arguments, and return &lt;code&gt;true&lt;/code&gt; if the first argument precedes or is in the same place as the second one.</source>
          <target state="translated">This function uses the merge sort algorithm. The given function should compare two arguments, and return &lt;code&gt;true&lt;/code&gt; if the first argument precedes or is in the same place as the second one.</target>
        </trans-unit>
        <trans-unit id="9cbfcbb53a61b66a747c2491e188753fa8068b44" translate="yes" xml:space="preserve">
          <source>This function uses the merge sort algorithm. The given function should compare two arguments, and return &lt;code&gt;true&lt;/code&gt; if the first argument precedes the second one.</source>
          <target state="translated">この関数は、マージソートアルゴリズムを使用します。与えられた関数は2つの引数を比較し、最初の引数が2番目の引数の前にある場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="862ee811fb4cabde3cfb7ab7a9097a9d6c254988" translate="yes" xml:space="preserve">
          <source>This function uses the parsing regular expression as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#appendix-B&quot;&gt;RFC 3986, Appendix B&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#appendix-B&quot;&gt;RFC 3986の付録Bで&lt;/a&gt;定義されている解析正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="d26051019e95731e1d7b99be08f5928a37367d27" translate="yes" xml:space="preserve">
          <source>This function was designed to camelize language identifiers/tokens, that's why it belongs to the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Macro&lt;/code&gt;&lt;/a&gt; module. Do not use it as a general mechanism for camelizing strings as it does not support Unicode or characters that are not valid in Elixir identifiers.</source>
          <target state="translated">この関数は、言語識別子/トークンをラクダ化するように設計されているため、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Macro&lt;/code&gt; &lt;/a&gt;モジュールに属しています。文字列をラクダ化するための一般的なメカニズムとして使用しないでください。これは、Elixir識別子では無効なUnicodeまたは文字をサポートしないためです。</target>
        </trans-unit>
        <trans-unit id="582211980e20afdfe93b93a25608463f5c56a8bf" translate="yes" xml:space="preserve">
          <source>This function was designed to underscore language identifiers/tokens, that's why it belongs to the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Macro&lt;/code&gt;&lt;/a&gt; module. Do not use it as a general mechanism for underscoring strings as it does not support Unicode or characters that are not valid in Elixir identifiers.</source>
          <target state="translated">この関数は、言語識別子/トークンを強調するために設計されたので、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Macro&lt;/code&gt; &lt;/a&gt;モジュールに属しています。Elixir識別子では無効なUnicodeまたは文字をサポートしていないため、文字列をアンダースコアリングするための一般的なメカニズムとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="ddcb598fb0ce62c01ead735edd62ec7ef5afb147" translate="yes" xml:space="preserve">
          <source>This function will instrument the given module and load a new version in memory with breakpoints at the given function and arity. If the module is recompiled, all breakpoints are lost.</source>
          <target state="translated">この関数は、指定されたモジュールを計測し、指定された関数とアリティのブレークポイントで新しいバージョンをメモリにロードします。モジュールが再コンパイルされると、すべてのブレークポイントは失われます。</target>
        </trans-unit>
        <trans-unit id="8b8f47c44e23aa37c7285c683f845cd5e9a96e09" translate="yes" xml:space="preserve">
          <source>This function will merge the given keyword list into the existing metadata, with the exception of setting a key to &lt;code&gt;nil&lt;/code&gt;, which will remove that key from the metadata.</source>
          <target state="translated">この関数は、指定されたキーワードリストを既存のメタデータにマージします。ただし、キーを &lt;code&gt;nil&lt;/code&gt; に設定すると、そのキーがメタデータから削除されます。</target>
        </trans-unit>
        <trans-unit id="11a397f1ed689beeb86c4bc32143ddefc115ba76" translate="yes" xml:space="preserve">
          <source>This function will raise &lt;a href=&quot;functionclauseerror&quot;&gt;&lt;code&gt;FunctionClauseError&lt;/code&gt;&lt;/a&gt; if the given &lt;code&gt;node&lt;/code&gt; is not alive.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;node&lt;/code&gt; が生きていない場合に&lt;a href=&quot;functionclauseerror&quot;&gt; &lt;code&gt;FunctionClauseError&lt;/code&gt; を発生さ&lt;/a&gt;せます。</target>
        </trans-unit>
        <trans-unit id="d3549fd2102012a4f6115406e1d4d00d9843abf5" translate="yes" xml:space="preserve">
          <source>This function will raise &lt;a href=&quot;https://hexdocs.pm/elixir/FunctionClauseError.html&quot;&gt;&lt;code&gt;FunctionClauseError&lt;/code&gt;&lt;/a&gt; if the given &lt;code&gt;node&lt;/code&gt; is not alive.</source>
          <target state="translated">This function will raise &lt;a href=&quot;https://hexdocs.pm/elixir/FunctionClauseError.html&quot;&gt; &lt;code&gt;FunctionClauseError&lt;/code&gt; &lt;/a&gt; if the given &lt;code&gt;node&lt;/code&gt; is not alive.</target>
        </trans-unit>
        <trans-unit id="e6b9fdfcab204aeb9ec68e1e7116d2ac8debacde" translate="yes" xml:space="preserve">
          <source>This function will retrieve the available clauses from bytecode and evaluate them against the given arguments. The clauses are returned as a list of &lt;code&gt;{args, guards}&lt;/code&gt; pairs where each argument and each top-level condition in a guard separated by &lt;code&gt;and&lt;/code&gt;/&lt;code&gt;or&lt;/code&gt; is wrapped in a tuple with blame metadata.</source>
          <target state="translated">この関数は、バイトコードから使用可能な句を取得し、指定された引数に対してそれらを評価します。句は、リストとして返される &lt;code&gt;{args, guards}&lt;/code&gt; 各引数とガードの各トップレベルの条件により分離ペア &lt;code&gt;and&lt;/code&gt; / &lt;code&gt;or&lt;/code&gt; 注釈メタデータタプルに包まれています。</target>
        </trans-unit>
        <trans-unit id="029c82ca4692615f6cc90f101026e01c3b5dc4e0" translate="yes" xml:space="preserve">
          <source>This functionality starts the &lt;code&gt;:net_kernel&lt;/code&gt; and other related processes.</source>
          <target state="translated">この機能は、 &lt;code&gt;:net_kernel&lt;/code&gt; およびその他の関連プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="a5c0fe11d15d66b3e64978f03cccbe68ad69f39c" translate="yes" xml:space="preserve">
          <source>This guarantees all messages sent to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; prior to this call will be processed. This is useful for testing and it should not be called in production code.</source>
          <target state="translated">これにより、この呼び出しの前に&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;に送信されたすべてのメッセージが処理されることが保証されます。これはテストに役立ち、実稼働コードでは呼び出さないでください。</target>
        </trans-unit>
        <trans-unit id="931eb8597cbb84926c09fb6a3b1aa749f547e621" translate="yes" xml:space="preserve">
          <source>This guide aims to introduce the meta-programming techniques available in Elixir. The ability to represent an Elixir program by its own data structures is at the heart of meta-programming. This chapter starts by exploring those structures and the associated &lt;code&gt;quote&lt;/code&gt; and &lt;code&gt;unquote&lt;/code&gt; constructs, so we can take a look at macros in the next chapter and finally build our own domain specific language.</source>
          <target state="translated">このガイドは、Elixirで利用可能なメタプログラミング手法を紹介することを目的としています。Elixirプログラムを独自のデータ構造で表現する機能は、メタプログラミングの中心です。この章では、まずこれらの構造とそれに関連する &lt;code&gt;quote&lt;/code&gt; および &lt;code&gt;unquote&lt;/code&gt; 構文を調べることから、次の章でマクロを見て、最後に独自のドメイン固有言語を構築します。</target>
        </trans-unit>
        <trans-unit id="217ac3dbe93c0cad13af56d1e1ef16871421d82f" translate="yes" xml:space="preserve">
          <source>This happens because the only place the formatter can introduce a new line without changing the code semantics is in the interpolation. In those scenarios, we recommend developers to directly adjust the code. Here we can use the binary concatenation operator &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C%3E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">This happens because the only place the formatter can introduce a new line without changing the code semantics is in the interpolation. In those scenarios, we recommend developers to directly adjust the code. Here we can use the binary concatenation operator &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C%3E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="5849b2456045ed3a32dde6f55db3e066f023528f" translate="yes" xml:space="preserve">
          <source>This happens because the only place the formatter can introduce a new line without changing the code semantics is in the interpolation. In those scenarios, we recommend developers to directly adjust the code. Here we can use the binary concatenation operator &lt;a href=&quot;kernel#%253C%253E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">これは、フォーマッタがコードセマンティクスを変更せずに新しい行を挿入できる唯一の場所が補間にあるために発生します。これらのシナリオでは、開発者にコードを直接調整することをお勧めします。ここでは、バイナリ連結演算子&lt;a href=&quot;kernel#%253C%253E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="ccb1f24686f9c6bcd91b3b281d116c9f04cb68f5" translate="yes" xml:space="preserve">
          <source>This helper only works when IEx is started with a Mix project, for example, &lt;code&gt;iex -S mix&lt;/code&gt;. The application is not restarted after compilation, which means any long running process may crash as any changed module will be temporarily removed and recompiled, without going through the proper code changes callback.</source>
          <target state="translated">このヘルパーは、 &lt;code&gt;iex -S mix&lt;/code&gt; Mixプロジェクト（iex -S mixなど）で開始された場合にのみ機能します。アプリケーションはコンパイル後に再起動されません。つまり、適切なコード変更コールバックを経由せずに、変更されたモジュールが一時的に削除および再コンパイルされるため、長時間実行されているプロセスがクラッシュする可能性があります。</target>
        </trans-unit>
        <trans-unit id="af9ea0d60815c82f22be854ae11982e7962bd190" translate="yes" xml:space="preserve">
          <source>This implementation also adds &lt;a href=&quot;#force_unfit/1&quot;&gt;&lt;code&gt;force_unfit/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#next_break_fits/2&quot;&gt;&lt;code&gt;next_break_fits/2&lt;/code&gt;&lt;/a&gt; which give more control over the document fitting.</source>
          <target state="translated">この実装では、&lt;a href=&quot;#force_unfit/1&quot;&gt; &lt;code&gt;force_unfit/1&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#next_break_fits/2&quot;&gt; &lt;code&gt;next_break_fits/2&lt;/code&gt; &lt;/a&gt;も追加され、ドキュメントのフィッティングをより詳細に制御できます。</target>
        </trans-unit>
        <trans-unit id="ecf1cb6c3f0131a137b0e41a93d52ab7359f8a7c" translate="yes" xml:space="preserve">
          <source>This implementation provides two types of breaks: &lt;code&gt;:strict&lt;/code&gt; and &lt;code&gt;:flex&lt;/code&gt;. When a group does not fit, all strict breaks are treated as newlines. Flex breaks however are re-evaluated on every occurrence and may still be rendered flat. See &lt;a href=&quot;#break/1&quot;&gt;&lt;code&gt;break/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#flex_break/1&quot;&gt;&lt;code&gt;flex_break/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">この実装では、 &lt;code&gt;:strict&lt;/code&gt; と &lt;code&gt;:flex&lt;/code&gt; の 2種類のブレークが提供されます。グループが適合しない場合、厳密な改行はすべて改行として扱われます。ただし、フレックスブレークは発生するたびに再評価され、引き続きフラットにレンダリングされる場合があります。詳細については、&lt;a href=&quot;#break/1&quot;&gt; &lt;code&gt;break/1&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#flex_break/1&quot;&gt; &lt;code&gt;flex_break/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc54167321bb690ef67cdb4d7c3892839915a92e" translate="yes" xml:space="preserve">
          <source>This information is returned based on the code path. Here is an example:</source>
          <target state="translated">この情報は、コードパスに基づいて返されます。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="b0ecce7e0d6c0fe3474303fad5ddb7ee794ff9c6" translate="yes" xml:space="preserve">
          <source>This interpretation is the same regardless if &lt;code&gt;--source&lt;/code&gt; or &lt;code&gt;--sink&lt;/code&gt; flags are used. For example, if we use the &lt;code&gt;--sink lib/c.ex&lt;/code&gt; flag, we would see the same tree:</source>
          <target state="translated">This interpretation is the same regardless if &lt;code&gt;--source&lt;/code&gt; or &lt;code&gt;--sink&lt;/code&gt; flags are used. For example, if we use the &lt;code&gt;--sink lib/c.ex&lt;/code&gt; flag, we would see the same tree:</target>
        </trans-unit>
        <trans-unit id="d91881e1d6ed1dd4db7e1e2c49686c721a6638ef" translate="yes" xml:space="preserve">
          <source>This is Mix's default shell when the &lt;code&gt;MIX_QUIET&lt;/code&gt; environment variable is set.</source>
          <target state="translated">This is Mix's default shell when the &lt;code&gt;MIX_QUIET&lt;/code&gt; environment variable is set.</target>
        </trans-unit>
        <trans-unit id="60031e59b55c11c2eb9a171c6db3ebaf52a6c050" translate="yes" xml:space="preserve">
          <source>This is Mix's default shell.</source>
          <target state="translated">これは Mix のデフォルトシェルです。</target>
        </trans-unit>
        <trans-unit id="5053391a8e72e9d443f680cf9656acc6cdd0a4d5" translate="yes" xml:space="preserve">
          <source>This is a bad idea, as we don&amp;rsquo;t want the registry to crash when a bucket crashes. The proper fix is to actually not link the bucket to the registry. Instead, we will link each bucket to a special type of process called Supervisors, which are explicitly designed to handle failures and crashes. We will learn more about them in the next chapter.</source>
          <target state="translated">バケットがクラッシュしたときにレジストリをクラッシュさせたくないので、これは悪い考えです。適切な修正は、実際にはバケットをレジストリにリンクしないことです。代わりに、各バケットをスーパーバイザと呼ばれる特別なタイプのプロセスにリンクします。スーパーバイザは、障害とクラッシュを処理するように明示的に設計されています。これらについては、次の章で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="9e5ab726c57b0fb6f6da70a28676a9b1f70f7bab" translate="yes" xml:space="preserve">
          <source>This is a hard-deprecation as it emits warnings and annotates the documentation as deprecated:</source>
          <target state="translated">これは警告を発し、ドキュメントに非推奨として注釈を付けるため、ハードディスクリネーションです。</target>
        </trans-unit>
        <trans-unit id="c34842432839543d617525657c5d1288600c6c0e" translate="yes" xml:space="preserve">
          <source>This is a soft-deprecation as it simply annotates the documentation as deprecated:</source>
          <target state="translated">これは、単にドキュメントに非推奨として注釈を付けるだけなので、ソフトなディスクリケーションです。</target>
        </trans-unit>
        <trans-unit id="9b525f4650716afc52d0be5f7a029605ace74f36" translate="yes" xml:space="preserve">
          <source>This is a task that can be aliased by projects that need to execute certain tasks before compiling dependencies:</source>
          <target state="translated">これは、依存関係をコンパイルする前に特定のタスクを実行する必要があるプロジェクトによってエイリアスされる可能性があるタスクです。</target>
        </trans-unit>
        <trans-unit id="77df0c1b4e2776653e0c5177f9ffa6268916531c" translate="yes" xml:space="preserve">
          <source>This is actually a common pitfall when developing macros. We are assuming a particular shape in the macro. We can work around it by unquoting the variable inside the quoted expression:</source>
          <target state="translated">これは実はマクロを開発する際によくある落とし穴です。マクロの中で特定の形を想定しています。これを回避するには、引用符で囲まれた式の中の変数の引用符を解除します。</target>
        </trans-unit>
        <trans-unit id="0dc899362b8fa129cf65071f623d739413cc73aa" translate="yes" xml:space="preserve">
          <source>This is all good and well, but we still want to offer our users an API that allows us to hide our implementation details.</source>
          <target state="translated">これは良いことですが、私たちは実装の詳細を隠すことができるAPIをユーザーに提供したいと考えています。</target>
        </trans-unit>
        <trans-unit id="f7b133b5999cc2d686bfdd612eea0550282bc0a5" translate="yes" xml:space="preserve">
          <source>This is also the syntax that Elixir uses to inspect keyword lists:</source>
          <target state="translated">これは、Elixirがキーワードリストを検査するために使用する構文でもあります。</target>
        </trans-unit>
        <trans-unit id="695d7b0825ac4fbdcbd163159a7fc336c49f943b" translate="yes" xml:space="preserve">
          <source>This is an anti-pattern not only because it convolutes the calculator logic but also because you put the calculator logic behind a single process that will potentially become a bottleneck in your system, especially as the number of calls grow. Instead just define the functions directly:</source>
          <target state="translated">これは、電卓ロジックを複雑にするだけでなく、電卓ロジックを単一のプロセスの後ろに置くことになるので、アンチパターンです。代わりに、関数を直接定義してください。</target>
        </trans-unit>
        <trans-unit id="9d1d1dd333c995d40a1c0f70de189cf4bf055fbb" translate="yes" xml:space="preserve">
          <source>This is an extension of &lt;a href=&quot;#myers_difference/2&quot;&gt;&lt;code&gt;myers_difference/2&lt;/code&gt;&lt;/a&gt; where a &lt;code&gt;diff_script&lt;/code&gt; function can be given in case it is desired to compute nested differences. The function may return a list with the inner edit script or &lt;code&gt;nil&lt;/code&gt; in case there is no such script. The returned inner edit script will be under the &lt;code&gt;:diff&lt;/code&gt; key.</source>
          <target state="translated">これは&lt;a href=&quot;#myers_difference/2&quot;&gt; &lt;code&gt;myers_difference/2&lt;/code&gt; の&lt;/a&gt;拡張で、ネストされた差分を計算する必要がある場合に備えて、 &lt;code&gt;diff_script&lt;/code&gt; 関数を指定できます。この関数は、内部編集スクリプトを含むリストを返すか、そのようなスクリプトがない場合は &lt;code&gt;nil&lt;/code&gt; を返します。返された内部編集スクリプトは &lt;code&gt;:diff&lt;/code&gt; キーの下にあります。</target>
        </trans-unit>
        <trans-unit id="1c0d7fab04e5bf783756a7f428e6b36128d23270" translate="yes" xml:space="preserve">
          <source>This is an optimization for &lt;code&gt;enumerable |&amp;gt; Enum.reverse() |&amp;gt; Enum.concat(tail)&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;enumerable |&amp;gt; Enum.reverse() |&amp;gt; Enum.concat(tail)&lt;/code&gt; 最適化です。</target>
        </trans-unit>
        <trans-unit id="b8a27bb1d6f71fa4c6c204cb8cc47805a7ed11d7" translate="yes" xml:space="preserve">
          <source>This is an option determining the prompt displayed to the user when awaiting input.</source>
          <target state="translated">これは、入力待ちの際にユーザーに表示されるプロンプトを決定するオプションです。</target>
        </trans-unit>
        <trans-unit id="aae1c3bc3412e0ceca9643bedadc02d43a2f03a1" translate="yes" xml:space="preserve">
          <source>This is because by the time Elixir starts, Erlang's kernel has already been started, which means the configuration above would have no effect.</source>
          <target state="translated">これはElixirが起動する頃にはErlangのカーネルはすでに起動しているため、上記の設定は何の効果もないということを意味します。</target>
        </trans-unit>
        <trans-unit id="d40bb6ddf99cda982a812b8ae52262c178bb85e3" translate="yes" xml:space="preserve">
          <source>This is because the macro is expecting its arguments to be a keyword list at &lt;strong&gt;compilation&lt;/strong&gt; time. Since in the example above we are passing the representation of the variable &lt;code&gt;kv&lt;/code&gt;, our code fails.</source>
          <target state="translated">これは、マクロがその引数を&lt;strong&gt;コンパイル&lt;/strong&gt;時にキーワードリストであると&lt;strong&gt;想定している&lt;/strong&gt;ためです。上記の例では変数 &lt;code&gt;kv&lt;/code&gt; の表現を渡しているため、コードは失敗します。</target>
        </trans-unit>
        <trans-unit id="69794bbecc9e248ec94d8fbad95cc7668576d9ad" translate="yes" xml:space="preserve">
          <source>This is done by loading &lt;code&gt;config/runtime.exs&lt;/code&gt; if one exists.</source>
          <target state="translated">This is done by loading &lt;code&gt;config/runtime.exs&lt;/code&gt; if one exists.</target>
        </trans-unit>
        <trans-unit id="21f107c1b12d2af11cc6fc5fce200280f5598e01" translate="yes" xml:space="preserve">
          <source>This is either a plain PID or a value representing a registered name. See the &quot;Name registration&quot; section of this document for more information.</source>
          <target state="translated">これは、プレーンPIDまたは登録された名前を表す値のいずれかです。詳細については、このドキュメントの「名前の登録」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="08a0e9ee70b7df166382e2da0f79cdb8aafbbed0" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;else if&lt;/code&gt; clauses in many imperative languages (although used much less frequently here).</source>
          <target state="translated">This is equivalent to &lt;code&gt;else if&lt;/code&gt; clauses in many imperative languages (although used much less frequently here).</target>
        </trans-unit>
        <trans-unit id="b9679cc98b384d2fae74f5c4e147d814a3605b34" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;else if&lt;/code&gt; clauses in many imperative languages (although used way less frequently here).</source>
          <target state="translated">これは、多くの命令型言語の &lt;code&gt;else if&lt;/code&gt; 句と同等です（ただし、ここでは使用頻度が低くなっています）。</target>
        </trans-unit>
        <trans-unit id="20b3f3a29153ddca60608cf1ff19217f8f298150" translate="yes" xml:space="preserve">
          <source>This is implemented as a macro so it can be used in guard clauses.</source>
          <target state="translated">これはマクロとして実装されているので、ガード句で使用することができます。</target>
        </trans-unit>
        <trans-unit id="b6ca1cc005536f5b89386dac5e9eaab2c71326b3" translate="yes" xml:space="preserve">
          <source>This is in contrast to &lt;a href=&quot;#split/3&quot;&gt;&lt;code&gt;split/3&lt;/code&gt;&lt;/a&gt; which splits the entire string upfront.</source>
          <target state="translated">これは、文字列全体を前もって分割する&lt;a href=&quot;#split/3&quot;&gt; &lt;code&gt;split/3&lt;/code&gt; &lt;/a&gt;とは対照的です。</target>
        </trans-unit>
        <trans-unit id="d6a69df7f8c6fe2ffd7e21f569ce958484e18a07" translate="yes" xml:space="preserve">
          <source>This is mainly useful in tests, allowing us to assert if given messages were received or not instead of performing checks on some captured IO. Since we need to guarantee a clean slate between tests, there is also a &lt;a href=&quot;#flush/1&quot;&gt;&lt;code&gt;flush/1&lt;/code&gt;&lt;/a&gt; function responsible for flushing all &lt;code&gt;:mix_shell&lt;/code&gt; related messages from the process inbox.</source>
          <target state="translated">これは主にテストで役立ち、キャプチャされたIOのチェックを実行する代わりに、特定のメッセージが受信されたかどうかをアサートできます。テスト間のクリーンなスレートを保証する必要があるため、プロセスの受信ボックスから &lt;code&gt;:mix_shell&lt;/code&gt; 関連のすべてのメッセージをフラッシュする責任がある&lt;a href=&quot;#flush/1&quot;&gt; &lt;code&gt;flush/1&lt;/code&gt; &lt;/a&gt;関数もあります。</target>
        </trans-unit>
        <trans-unit id="a0fa3a9b78fa54d020541ab16426b8460b60af20" translate="yes" xml:space="preserve">
          <source>This is most commonly used by shell implementations but can also be invoked directly.</source>
          <target state="translated">これはシェルの実装で最も一般的に使用されますが、直接呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="72d44ff95753d13859fe1556278fcc193088f3be" translate="yes" xml:space="preserve">
          <source>This is most often used to execute conditional code:</source>
          <target state="translated">これは、条件付きコードを実行するために最もよく使用されます。</target>
        </trans-unit>
        <trans-unit id="06d6ae37e05a3ae9f28e4ea5d06be5fb1cde0b89" translate="yes" xml:space="preserve">
          <source>This is often represented in the form of target triples, for example, &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;, &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt;, &lt;code&gt;x86_64-apple-darwin&lt;/code&gt;.</source>
          <target state="translated">This is often represented in the form of target triples, for example, &lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt; , &lt;code&gt;x86_64-unknown-linux-musl&lt;/code&gt; , &lt;code&gt;x86_64-apple-darwin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3cb696d174caaa2396a3c713ad639f81cfe5da1" translate="yes" xml:space="preserve">
          <source>This is often used to emulate configuration across environments:</source>
          <target state="translated">これは、環境間の設定をエミュレートするためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="58dabc93b2ce93a10dc83d366ab232e1eea3c140" translate="yes" xml:space="preserve">
          <source>This is often used to start the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; as part of a supervision tree.</source>
          <target state="translated">これは、監視ツリーの一部として&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;を起動するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="320f2d885658e9db2171a44a753f72f41faf6056" translate="yes" xml:space="preserve">
          <source>This is often used to start the agent as part of a supervision tree.</source>
          <target state="translated">これは、監督ツリーの一部としてエージェントを起動するためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="626d510108035955935a541c301f344a380255ad" translate="yes" xml:space="preserve">
          <source>This is often used to start the process as part of a supervision tree.</source>
          <target state="translated">これは、監督ツリーの一部としてプロセスを開始するために使用されることが多いです。</target>
        </trans-unit>
        <trans-unit id="71cf2a71b0daa952a75b8e9a75ad4350e4dc2204" translate="yes" xml:space="preserve">
          <source>This is often useful when used with &lt;a href=&quot;#prewalk/2&quot;&gt;&lt;code&gt;Macro.prewalk/2&lt;/code&gt;&lt;/a&gt; to remove information like lines and hygienic counters from the expression for either storage or comparison.</source>
          <target state="translated">This is often useful when used with &lt;a href=&quot;#prewalk/2&quot;&gt; &lt;code&gt;Macro.prewalk/2&lt;/code&gt; &lt;/a&gt; to remove information like lines and hygienic counters from the expression for either storage or comparison.</target>
        </trans-unit>
        <trans-unit id="30067513715299ced12cf77d1d47bd85e8cef7ec" translate="yes" xml:space="preserve">
          <source>This is often useful when used with &lt;a href=&quot;macro#prewalk/2&quot;&gt;&lt;code&gt;Macro.prewalk/2&lt;/code&gt;&lt;/a&gt; to remove information like lines and hygienic counters from the expression for either storage or comparison.</source>
          <target state="translated">これは&lt;a href=&quot;macro#prewalk/2&quot;&gt; &lt;code&gt;Macro.prewalk/2&lt;/code&gt; &lt;/a&gt;と一緒に使用して、保管や比較のために式から行や衛生カウンターなどの情報を削除する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="4240cfedebaf42c2fac3f95a041f2d57c453967e" translate="yes" xml:space="preserve">
          <source>This is only used when the task is used for side-effects (i.e. no interest in the returned result) and it should not be linked to the current process.</source>
          <target state="translated">これは、タスクが副作用のために使用される場合にのみ使用され(すなわち、返された結果に関心がない)、現在のプロセスにリンクされるべきではありません。</target>
        </trans-unit>
        <trans-unit id="077e7548b6aaec650e916de489ebe79d6d5f3c44" translate="yes" xml:space="preserve">
          <source>This is pretty much all we need to implement our echo server. Let&amp;rsquo;s give it a try!</source>
          <target state="translated">エコーサーバーを実装するために必要なのはこれだけです。やるだけやってみよう！</target>
        </trans-unit>
        <trans-unit id="6e08b933f971cdb50d5df304426433cd92e87e4c" translate="yes" xml:space="preserve">
          <source>This is reported as &quot;error&quot; in Elixir's logger backends for backwards compatibility reasons.</source>
          <target state="translated">これは後方互換性の理由から、Elixirのロガーバックエンドで「エラー」として報告されています。</target>
        </trans-unit>
        <trans-unit id="5ec5639249ca1a34b536a5264b41327593f5fb5f" translate="yes" xml:space="preserve">
          <source>This is reported as &quot;info&quot; in Elixir's logger backends for backwards compatibility reasons.</source>
          <target state="translated">これは後方互換性の理由から、Elixirのロガーバックエンドの「情報」として報告されています。</target>
        </trans-unit>
        <trans-unit id="a3346bf358b79fcbcf2b055d550e9935fe8f45fd" translate="yes" xml:space="preserve">
          <source>This is reported as &quot;warn&quot; in Elixir's logger backends for backwards compatibility reasons.</source>
          <target state="translated">これは後方互換性の理由から、Elixirのロガーバックエンドで「警告」として報告されています。</target>
        </trans-unit>
        <trans-unit id="81016b61e7a2b5883ac247d4885c2d149315bdb9" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;#get_and_update_in/3&quot;&gt;&lt;code&gt;get_and_update_in/3&lt;/code&gt;&lt;/a&gt;, except the path is extracted via a macro rather than passing a list. For example:</source>
          <target state="translated">これは&lt;a href=&quot;#get_and_update_in/3&quot;&gt; &lt;code&gt;get_and_update_in/3&lt;/code&gt; &lt;/a&gt;と似ていますが、パスがリストを渡すのではなくマクロを介して抽出される点が異なります。例えば：</target>
        </trans-unit>
        <trans-unit id="50c031832816906ca789ff0f4ad1f1b4dfcf5d4e" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;#pop_in/2&quot;&gt;&lt;code&gt;pop_in/2&lt;/code&gt;&lt;/a&gt;, except the path is extracted via a macro rather than passing a list. For example:</source>
          <target state="translated">これは&lt;a href=&quot;#pop_in/2&quot;&gt; &lt;code&gt;pop_in/2&lt;/code&gt; に&lt;/a&gt;似ていますが、パスがリストを渡すのではなくマクロを介して抽出される点が異なります。例えば：</target>
        </trans-unit>
        <trans-unit id="7523a1751f43741a0a08ddae723c5c9199fa87e6" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;#put_in/3&quot;&gt;&lt;code&gt;put_in/3&lt;/code&gt;&lt;/a&gt;, except the path is extracted via a macro rather than passing a list. For example:</source>
          <target state="translated">これは、パスがリストを渡すのではなくマクロを介して抽出されることを除いて、&lt;a href=&quot;#put_in/3&quot;&gt; &lt;code&gt;put_in/3&lt;/code&gt; に&lt;/a&gt;似ています。例えば：</target>
        </trans-unit>
        <trans-unit id="22e8ffb1e74ab770f905747e9a80ef5c0478eb99" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;#update_in/3&quot;&gt;&lt;code&gt;update_in/3&lt;/code&gt;&lt;/a&gt;, except the path is extracted via a macro rather than passing a list. For example:</source>
          <target state="translated">これは&lt;a href=&quot;#update_in/3&quot;&gt; &lt;code&gt;update_in/3&lt;/code&gt; に&lt;/a&gt;似ていますが、パスがリストを渡すのではなくマクロを介して抽出される点が異なります。例えば：</target>
        </trans-unit>
        <trans-unit id="08ab0b2ff940cf63760635df2e0fe23beb3cbaa7" translate="yes" xml:space="preserve">
          <source>This is similar to the mistake we made when we called &lt;code&gt;KV.Bucket.start_link/1&lt;/code&gt; straight from the registry. That meant a failure in any bucket would bring the whole registry down.</source>
          <target state="translated">これは、レジストリから &lt;code&gt;KV.Bucket.start_link/1&lt;/code&gt; を呼び出したときの間違いに似ています。つまり、どのバケットでも障害が発生すると、レジストリ全体がダウンします。</target>
        </trans-unit>
        <trans-unit id="3ba1fb1b640495bd967734dfd1acecd010aa5148" translate="yes" xml:space="preserve">
          <source>This is the default used by &lt;a href=&quot;#encode/2&quot;&gt;&lt;code&gt;URI.encode/2&lt;/code&gt;&lt;/a&gt; where both &lt;a href=&quot;#char_reserved?/1&quot;&gt;reserved&lt;/a&gt; and &lt;a href=&quot;#char_unreserved?/1&quot;&gt;unreserved characters&lt;/a&gt; are kept unescaped.</source>
          <target state="translated">This is the default used by &lt;a href=&quot;#encode/2&quot;&gt; &lt;code&gt;URI.encode/2&lt;/code&gt; &lt;/a&gt; where both &lt;a href=&quot;#char_reserved?/1&quot;&gt;reserved&lt;/a&gt; and &lt;a href=&quot;#char_unreserved?/1&quot;&gt;unreserved characters&lt;/a&gt; are kept unescaped.</target>
        </trans-unit>
        <trans-unit id="e61420057f50d9b6c715f4347be7ca8efd78730b" translate="yes" xml:space="preserve">
          <source>This is the default used by &lt;a href=&quot;uri#encode/2&quot;&gt;&lt;code&gt;URI.encode/2&lt;/code&gt;&lt;/a&gt; where both reserved and unreserved characters are kept unescaped.</source>
          <target state="translated">これは&lt;a href=&quot;uri#encode/2&quot;&gt; &lt;code&gt;URI.encode/2&lt;/code&gt; &lt;/a&gt;によって使用されるデフォルトであり、予約文字と非予約文字の両方がエスケープされずに保持されます。</target>
        </trans-unit>
        <trans-unit id="0dc79651e84bb5089915ce0f6bd2c110d8036119" translate="yes" xml:space="preserve">
          <source>This is the function invoked when there is string interpolation.</source>
          <target state="translated">文字列補間がある場合に呼び出される関数です。</target>
        </trans-unit>
        <trans-unit id="9b687c89eb6e152da4dd73f09f730d0ddb490ab0" translate="yes" xml:space="preserve">
          <source>This is the list of directories the Erlang VM uses for finding module code.</source>
          <target state="translated">これはErlang VMがモジュールコードを見つけるのに使うディレクトリのリストです。</target>
        </trans-unit>
        <trans-unit id="a08d7b564f58b24087fbb35fa3617eff44897de1" translate="yes" xml:space="preserve">
          <source>This is the moment, in your calendar, when the current day ends and the next day starts.</source>
          <target state="translated">これは、カレンダーの中で、現在の日が終わり、次の日が始まる瞬間のことです。</target>
        </trans-unit>
        <trans-unit id="9162b52e4ae81113f3c3ee3bea2997ff399ccecc" translate="yes" xml:space="preserve">
          <source>This is the number of days including the fractional part that has passed of the last day since 0000-01-01+00:00T00:00.000000 in ISO 8601 notation (also known as midnight 1 January BC 1 of the proleptic Gregorian calendar).</source>
          <target state="translated">これは、ISO 8601表記の0000-01-01+00:00T00:00:00.000000(プロレプト・グレゴリオ暦の紀元前1月1日午前0時とも呼ばれています)からの最終日の端数部分を含めた日数です。</target>
        </trans-unit>
        <trans-unit id="289ea50e9ca33fea490350d4d95a5411c3088228" translate="yes" xml:space="preserve">
          <source>This is the same AST as &lt;code&gt;not(left in right)&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;not(left in right)&lt;/code&gt; と同じAST です。</target>
        </trans-unit>
        <trans-unit id="e66f4430d7555e8a783dad322115e9a5ec53c0d1" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;a href=&quot;#compile_env/3&quot;&gt;&lt;code&gt;compile_env/3&lt;/code&gt;&lt;/a&gt; but it raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the configuration is not available.</source>
          <target state="translated">This is the same as &lt;a href=&quot;#compile_env/3&quot;&gt; &lt;code&gt;compile_env/3&lt;/code&gt; &lt;/a&gt; but it raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; if the configuration is not available.</target>
        </trans-unit>
        <trans-unit id="a74b9fe2a2d8c864a5673ce9cb8533effa232a81" translate="yes" xml:space="preserve">
          <source>This is the same supervisor as used by &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#start_supervised/2&quot;&gt;&lt;code&gt;ExUnit.Callbacks.start_supervised/2&lt;/code&gt;&lt;/a&gt; and similar, see &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html&quot;&gt;&lt;code&gt;ExUnit.Callbacks&lt;/code&gt;&lt;/a&gt; module documentation for more information.</source>
          <target state="translated">This is the same supervisor as used by &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#start_supervised/2&quot;&gt; &lt;code&gt;ExUnit.Callbacks.start_supervised/2&lt;/code&gt; &lt;/a&gt; and similar, see &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html&quot;&gt; &lt;code&gt;ExUnit.Callbacks&lt;/code&gt; &lt;/a&gt; module documentation for more information.</target>
        </trans-unit>
        <trans-unit id="b6d704491ec250974e27401b8e2b811c3f199e66" translate="yes" xml:space="preserve">
          <source>This is the same template generated by &lt;code&gt;mix new --sup&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;mix new --sup&lt;/code&gt; によって生成される同じテンプレートです。</target>
        </trans-unit>
        <trans-unit id="5580fdfd5d3be89e971bd5cfbc417edd38ca5b8e" translate="yes" xml:space="preserve">
          <source>This is the special form used whenever we have a block of expressions in Elixir. This special form is private and should not be invoked directly:</source>
          <target state="translated">これは、Elixirで式のブロックがあるときに使用される特殊なフォームです。この特殊なフォームはプライベートなものであり、直接呼び出されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="ac7417af7c2a4cf8300b3d4dd8d7d38b6e9711f6" translate="yes" xml:space="preserve">
          <source>This is the unescaping behaviour used by default in Elixir single- and double-quoted strings. Check &lt;a href=&quot;#unescape_string/2&quot;&gt;&lt;code&gt;unescape_string/2&lt;/code&gt;&lt;/a&gt; for information on how to customize the escaping map.</source>
          <target state="translated">これは、Elixirの一重引用符と二重引用符で囲まれた文字列でデフォルトで使用されるエスケープ解除動作です。&lt;a href=&quot;#unescape_string/2&quot;&gt; &lt;code&gt;unescape_string/2&lt;/code&gt; &lt;/a&gt;マップのカスタマイズ方法については、unescape_string / 2を確認してください。</target>
        </trans-unit>
        <trans-unit id="13cd7a952e7bcf9bdf6ec9068841b4aa1581c6f4" translate="yes" xml:space="preserve">
          <source>This is typically invoked at the end of the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback of module-based supervisors. See the &quot;Module-based supervisors&quot; section in the module documentation for more information.</source>
          <target state="translated">これは通常、モジュールベースのスーパーバイザの&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックの最後に呼び出されます。詳細については、モジュールのドキュメントの「モジュールベースのスーパーバイザ」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4c3451cd606049c68c6fdb6bd088a1087ca448fd" translate="yes" xml:space="preserve">
          <source>This is typically invoked at the end of the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback of module-based supervisors. See the sections &quot;Module-based supervisors&quot; and &quot;start_link/2, init/2, and strategies&quot; in the module documentation for more information.</source>
          <target state="translated">これは通常、モジュールベースのスーパーバイザの&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックの最後に呼び出されます。詳細については、モジュールのドキュメントの「モジュールベースの監視プログラム」および「start_link / 2、init / 2、および戦略」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="af7248045672bdf709fa9a7434ee693bbb5b3f33" translate="yes" xml:space="preserve">
          <source>This is used by Elixir's code formatter to avoid breaking code at some specific locations. For example, consider this code:</source>
          <target state="translated">これは、Elixirのコードフォーマッタが特定の場所でコードを壊さないようにするために使用します。例えば、次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b9e62f945dfe72ca17b7bcf35230b54a13d5ce33" translate="yes" xml:space="preserve">
          <source>This is used by third-party projects, like QuickCheck, to implement macros like &lt;code&gt;property/3&lt;/code&gt; that works like &lt;code&gt;test&lt;/code&gt; but instead defines a property. See &lt;a href=&quot;#test/3&quot;&gt;&lt;code&gt;test/3&lt;/code&gt;&lt;/a&gt; implementation for an example of invoking this function.</source>
          <target state="translated">これは、QuickCheckなどのサードパーティプロジェクトで、 &lt;code&gt;test&lt;/code&gt; ように機能するがプロパティを定義するproperty &lt;code&gt;property/3&lt;/code&gt; ようなマクロを実装するために使用されます。この関数の呼び出し例については、&lt;a href=&quot;#test/3&quot;&gt; &lt;code&gt;test/3&lt;/code&gt; の&lt;/a&gt;実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="37d46fa38c10dd65a76b1733d8c4d14f6e5122f5" translate="yes" xml:space="preserve">
          <source>This is useful for debugging a particular chunk of code when executed by a particular process. The process becomes the evaluator of IEx commands and is temporarily changed to have a custom group leader. Those values are reverted by calling &lt;a href=&quot;https://hexdocs.pm/iex/IEx.Helpers.html#respawn/0&quot;&gt;&lt;code&gt;IEx.Helpers.respawn/0&lt;/code&gt;&lt;/a&gt;, which starts a new IEx shell, freeing up the pried one.</source>
          <target state="translated">This is useful for debugging a particular chunk of code when executed by a particular process. The process becomes the evaluator of IEx commands and is temporarily changed to have a custom group leader. Those values are reverted by calling &lt;a href=&quot;https://hexdocs.pm/iex/IEx.Helpers.html#respawn/0&quot;&gt; &lt;code&gt;IEx.Helpers.respawn/0&lt;/code&gt; &lt;/a&gt;, which starts a new IEx shell, freeing up the pried one.</target>
        </trans-unit>
        <trans-unit id="7c60447d6bcf0312eb4c4e52c080f8e8aeffd1b2" translate="yes" xml:space="preserve">
          <source>This is useful for debugging a particular chunk of code when executed by a particular process. The process becomes the evaluator of IEx commands and is temporarily changed to have a custom group leader. Those values are reverted by calling &lt;a href=&quot;iex.helpers#respawn/0&quot;&gt;&lt;code&gt;IEx.Helpers.respawn/0&lt;/code&gt;&lt;/a&gt;, which starts a new IEx shell, freeing up the pried one.</source>
          <target state="translated">これは、特定のプロセスで実行されたときに特定のコードのチャンクをデバッグするのに役立ちます。プロセスはIExコマンドの評価者になり、カスタムグループリーダーを持つように一時的に変更されます。これらの値は、新しいIExシェルを開始する&lt;a href=&quot;iex.helpers#respawn/0&quot;&gt; &lt;code&gt;IEx.Helpers.respawn/0&lt;/code&gt; を&lt;/a&gt;呼び出すことによって元に戻され、プライドシェルが解放されます。</target>
        </trans-unit>
        <trans-unit id="aaba5c733f8e5f3a464f80421ccdf2cbfb12126e" translate="yes" xml:space="preserve">
          <source>This is useful if the default value is very expensive to calculate or generally difficult to setup and teardown again.</source>
          <target state="translated">これは、デフォルト値の計算が非常に高価な場合や、一般的にセットアップやティアダウンを再度行うことが困難な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="e90f6c096938c0c1b08fe0f1a4ed6112b1726e64" translate="yes" xml:space="preserve">
          <source>This is useful if the value is very expensive to calculate or generally difficult to setup and teardown again.</source>
          <target state="translated">これは、値を計算するのに非常に高価な場合や、一般的にセットアップやティアダウンを再度行うのが困難な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="c7ade3c8c2220433a36448cb76b4d6669b0207f9" translate="yes" xml:space="preserve">
          <source>This is useful in two cases:</source>
          <target state="translated">これは次の2つの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5a46a616db1ce450247219cde25e3ee509bdc87d" translate="yes" xml:space="preserve">
          <source>This is useful when a stream needs to be run, for side effects, and there is no interest in its return result.</source>
          <target state="translated">これは、副作用のために、ストリームを実行する必要があり、そのリターン結果に興味がない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="64ec9debc1653fe16f8858cb9974d03451f758f7" translate="yes" xml:space="preserve">
          <source>This is useful when a struct needs to be expanded at compilation time and the struct being expanded may or may not have been compiled. This function is also capable of expanding structs defined under the module being compiled.</source>
          <target state="translated">これは、コンパイル時に構造体を展開する必要があり、展開する構造体がコンパイルされていない場合もあります。この関数は、コンパイルされたモジュールの下で定義された構造体を展開することもできます。</target>
        </trans-unit>
        <trans-unit id="8454071c897ae3b3f6c5cf6b435c8859ed4d0efe" translate="yes" xml:space="preserve">
          <source>This is useful when a struct needs to be expanded at compilation time and the struct being expanded may or may not have been compiled. This function is even capable of expanding structs defined under the module being compiled.</source>
          <target state="translated">これは、コンパイル時に構造体を展開する必要があり、展開する構造体がコンパイルされていない場合もあります。この関数は、コンパイルされたモジュールの下で定義された構造体を展開することもできます。</target>
        </trans-unit>
        <trans-unit id="58f647f53c93e0adaedcaedcde7d2a04c6e11b1a" translate="yes" xml:space="preserve">
          <source>This is useful when the result is something variable (like a PID in the example above) or when the result is a complicated data structure and you don't want to show it all, but just parts of it or some of its properties.</source>
          <target state="translated">これは、結果が変数(上の例でいうPIDのようなもの)である場合や、結果が複雑なデータ構造で、すべてを表示せずにその一部やプロパティの一部だけを表示したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="42708290411e38f509da43bac650f9a95ec98921" translate="yes" xml:space="preserve">
          <source>This is useful when there are a set of setup callbacks or a set of functions that should be shared between test modules.</source>
          <target state="translated">これは、セットアップコールバックのセットや、テストモジュール間で共有すべき関数のセットがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="bca60e4733f4f8f89c26ce0231040f2ac6f94040" translate="yes" xml:space="preserve">
          <source>This is usually called by sessions started with &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt;. This allows the current process to execute until the next breakpoint, which will automatically yield control back to IEx without requesting permission to pry.</source>
          <target state="translated">This is usually called by sessions started with &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt;. This allows the current process to execute until the next breakpoint, which will automatically yield control back to IEx without requesting permission to pry.</target>
        </trans-unit>
        <trans-unit id="5765e6f4f6c943fc2869a6d958ffb07d4ecdc95a" translate="yes" xml:space="preserve">
          <source>This is usually called by sessions started with &lt;a href=&quot;iex#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;iex#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt;. This allows the current process to execute until the next breakpoint, which will automatically yield control back to IEx without requesting permission to pry.</source>
          <target state="translated">これは通常、&lt;a href=&quot;iex#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;iex#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; で&lt;/a&gt;開始されたセッションによって呼び出されます。これにより、次のブレークポイントまで現在のプロセスを実行できます。これにより、詮索する許可を要求せずに、自動的に制御をIExに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="9795df452756bfa4ad139a3e1454b0c1c3e19967" translate="yes" xml:space="preserve">
          <source>This is usually called by tasks that need additional functions on the project to be defined. Since such tasks usually depend on a project being defined, this function raises a &lt;a href=&quot;https://hexdocs.pm/mix/Mix.NoProjectError.html&quot;&gt;&lt;code&gt;Mix.NoProjectError&lt;/code&gt;&lt;/a&gt; exception in case no project is available.</source>
          <target state="translated">This is usually called by tasks that need additional functions on the project to be defined. Since such tasks usually depend on a project being defined, this function raises a &lt;a href=&quot;https://hexdocs.pm/mix/Mix.NoProjectError.html&quot;&gt; &lt;code&gt;Mix.NoProjectError&lt;/code&gt; &lt;/a&gt; exception in case no project is available.</target>
        </trans-unit>
        <trans-unit id="d5c28e5992d11ab017599cfba8c0660377868c31" translate="yes" xml:space="preserve">
          <source>This is usually called by tasks that need additional functions on the project to be defined. Since such tasks usually depend on a project being defined, this function raises a &lt;a href=&quot;mix.noprojecterror&quot;&gt;&lt;code&gt;Mix.NoProjectError&lt;/code&gt;&lt;/a&gt; exception in case no project is available.</source>
          <target state="translated">これは通常、定義するプロジェクトに追加の機能が必要なタスクによって呼び出されます。このようなタスクは通常、定義されているプロジェクトに依存するため、この関数は、プロジェクトが使用できない場合に&lt;a href=&quot;mix.noprojecterror&quot;&gt; &lt;code&gt;Mix.NoProjectError&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="70a55e5fc2aa3b9db64d4f94cf960265a3232cd2" translate="yes" xml:space="preserve">
          <source>This is where protocols can help us: protocols allow us to extend the original behavior for as many data types as we need. That&amp;rsquo;s because &lt;strong&gt;dispatching on a protocol is available to any data type that has implemented the protocol&lt;/strong&gt; and a protocol can be implemented by anyone, at any time.</source>
          <target state="translated">This is where protocols can help us: protocols allow us to extend the original behavior for as many data types as we need. That&amp;rsquo;s because &lt;strong&gt;dispatching on a protocol is available to any data type that has implemented the protocol&lt;/strong&gt; and a protocol can be implemented by anyone, at any time.</target>
        </trans-unit>
        <trans-unit id="b871a08121731acae06ea58fe3ca7e1bb16748e0" translate="yes" xml:space="preserve">
          <source>This keeps only significant chunks necessary for the VM operation, discarding documentation, debug info, compile information and others.</source>
          <target state="translated">これにより、ドキュメントやデバッグ情報、コンパイル情報などを破棄し、VMの動作に必要な重要なチャンクのみを保持します。</target>
        </trans-unit>
        <trans-unit id="89c99ecc9ec64bbd119250b6f605dbf4510f1e46" translate="yes" xml:space="preserve">
          <source>This key is optional, only needed for applications that start a supervision tree.</source>
          <target state="translated">このキーはオプションで、監視ツリーを開始するアプリケーションでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="29ecf7d31c543b3beaa11f8d6b32d12f2cddd50a" translate="yes" xml:space="preserve">
          <source>This lets you put imports in &lt;code&gt;.iex.exs&lt;/code&gt; files (including &lt;code&gt;~/.iex.exs&lt;/code&gt;) without getting compile errors if you open a console where the module is not available.</source>
          <target state="translated">これにより、モジュールが使用できないコンソールを開いた場合にコンパイルエラーが発生することなく、インポートを &lt;code&gt;.iex.exs&lt;/code&gt; ファイル（ &lt;code&gt;~/.iex.exs&lt;/code&gt; を含む）に配置できます。</target>
        </trans-unit>
        <trans-unit id="e5847e98d18087e669daaf541b861bb0616506ae" translate="yes" xml:space="preserve">
          <source>This lets you use the module in &lt;code&gt;.iex.exs&lt;/code&gt; files (including &lt;code&gt;~/.iex.exs&lt;/code&gt;) without getting compile errors if you open a console where the module is not available.</source>
          <target state="translated">これにより、モジュールが使用できないコンソールを開いた場合に、コンパイルエラーが発生することなく、モジュールを &lt;code&gt;.iex.exs&lt;/code&gt; ファイル（ &lt;code&gt;~/.iex.exs&lt;/code&gt; を含む）で使用できます。</target>
        </trans-unit>
        <trans-unit id="e593f23f33013dc92ddfcd3a9c60d10f99bd1858" translate="yes" xml:space="preserve">
          <source>This linear behaviour should also be expected on operations like &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#member?/2&quot;&gt;&lt;code&gt;member?/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#at/2&quot;&gt;&lt;code&gt;at/2&lt;/code&gt;&lt;/a&gt; and similar. While Elixir does allow data types to provide performant variants for such operations, you should not expect it to always be available, since the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module is meant to work with a large variety of data types and not all data types can provide optimized behaviour.</source>
          <target state="translated">この線形動作は、&lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#member?/2&quot;&gt; &lt;code&gt;member?/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#at/2&quot;&gt; &lt;code&gt;at/2&lt;/code&gt; &lt;/a&gt;などの操作でも期待されます。Elixirはデータ型がそのような操作に高性能のバリアントを提供することを許可していますが、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールは多種多様なデータ型で機能することを意図しており、すべてのデータ型が最適化された動作を提供できるわけではないため、データ型が常に利用可能であるとは期待できません。</target>
        </trans-unit>
        <trans-unit id="0519fbd8b9b5639ec90e00d83250f771f4f40453" translate="yes" xml:space="preserve">
          <source>This macro addresses this issue by checking if the file exists or not in behalf of the user.</source>
          <target state="translated">このマクロは、ユーザーに代わってファイルが存在するかどうかをチェックすることで、この問題に対処します。</target>
        </trans-unit>
        <trans-unit id="5cc6e8a94ed92b3b0f91dd0c407badd0f4cd9583" translate="yes" xml:space="preserve">
          <source>This macro defines a module with the given &lt;code&gt;alias&lt;/code&gt; as its name and with the given contents. It returns a tuple with four elements:</source>
          <target state="translated">このマクロは、指定された &lt;code&gt;alias&lt;/code&gt; を名前として、指定されたコンテンツを持つモジュールを定義します。4つの要素を持つタプルを返します。</target>
        </trans-unit>
        <trans-unit id="ba5022c9c8161864d7b55a2f306a7cb1932890b2" translate="yes" xml:space="preserve">
          <source>This macro evaluates and returns the &lt;code&gt;do&lt;/code&gt; block passed in as the second argument if &lt;code&gt;condition&lt;/code&gt; evaluates to a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;). Otherwise, it returns the value of the &lt;code&gt;else&lt;/code&gt; block if present or &lt;code&gt;nil&lt;/code&gt; if not.</source>
          <target state="translated">このマクロは、 &lt;code&gt;condition&lt;/code&gt; &lt;code&gt;false&lt;/code&gt; 値（falseまたは &lt;code&gt;nil&lt;/code&gt; ）と評価された場合、2番目の引数として渡された &lt;code&gt;do&lt;/code&gt; ブロックを評価して返します。それ以外の場合は、 &lt;code&gt;else&lt;/code&gt; ブロックが存在する場合はその値を返し、存在しない場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ed734b49c8a157748138d4db51538d7e06cee2ee" translate="yes" xml:space="preserve">
          <source>This macro expects a variable and it is typically invoked inside &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt; to mark that a variable should not be hygienized. See &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">This macro expects a variable and it is typically invoked inside &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt; to mark that a variable should not be hygienized. See &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="053dc4326086a38d85524369b85300ca1b5d0614" translate="yes" xml:space="preserve">
          <source>This macro expects the first argument to be a condition and the second argument to be a keyword list.</source>
          <target state="translated">このマクロは、第1引数に条件、第2引数にキーワードリストを想定しています。</target>
        </trans-unit>
        <trans-unit id="09100845f4d4f229d78b6113f1e6a5dce38e078d" translate="yes" xml:space="preserve">
          <source>This macro is auto-imported with every &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This macro is auto-imported with every &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="116b64f16c1348abfeaaf5c29004dd2cd4513959" translate="yes" xml:space="preserve">
          <source>This macro is deprecated in favour of &lt;a href=&quot;#warning/2&quot;&gt;&lt;code&gt;warning/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This macro is deprecated in favour of &lt;a href=&quot;#warning/2&quot;&gt; &lt;code&gt;warning/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1884b82116e213d51fde668f93db8aefff68f2db" translate="yes" xml:space="preserve">
          <source>This macro is deprecated. Use the Config module instead.</source>
          <target state="translated">このマクロは非推奨です。代わりに Config モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="fa58f8e50bd6c8d47ad7511ec3aec19833923a02" translate="yes" xml:space="preserve">
          <source>This macro is used to generate ExUnit test cases for doctests.</source>
          <target state="translated">このマクロは、doctests 用の ExUnit テストケースを生成するために使用します。</target>
        </trans-unit>
        <trans-unit id="b7318b11fdb5ce2984ea08a62c18118bc9d28bcc" translate="yes" xml:space="preserve">
          <source>This makes your code clearer and easier to test and maintain, as you can invoke and test &lt;code&gt;do_this_that_and_that/3&lt;/code&gt; directly. It also helps you design an actual API for developers that do not want to rely on macros.</source>
          <target state="translated">これにより、 &lt;code&gt;do_this_that_and_that/3&lt;/code&gt; を直接呼び出してテストできるため、コードがより明確になり、テストと保守が容易になります。また、マクロに依存したくない開発者向けの実際のAPIを設計するのにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="781a3479b6ef9afbd878f1e315bbde3afc7381db" translate="yes" xml:space="preserve">
          <source>This means &lt;a href=&quot;#get_and_update_in/3&quot;&gt;&lt;code&gt;get_and_update_in/3&lt;/code&gt;&lt;/a&gt; can be extended to provide custom lookups. The downside is that functions cannot be stored as keys in the accessed data structures.</source>
          <target state="translated">つまり、&lt;a href=&quot;#get_and_update_in/3&quot;&gt; &lt;code&gt;get_and_update_in/3&lt;/code&gt; &lt;/a&gt;を拡張して、カスタムルックアップを提供できます。欠点は、アクセスしたデータ構造に関数をキーとして格納できないことです。</target>
        </trans-unit>
        <trans-unit id="31c83c38260c43e23e00b1d110954e0ba5266ba4" translate="yes" xml:space="preserve">
          <source>This means &lt;a href=&quot;#get_in/2&quot;&gt;&lt;code&gt;get_in/2&lt;/code&gt;&lt;/a&gt; can be extended to provide custom lookups. In the example below, we use a function to get all the maps inside a list:</source>
          <target state="translated">This means &lt;a href=&quot;#get_in/2&quot;&gt; &lt;code&gt;get_in/2&lt;/code&gt; &lt;/a&gt; can be extended to provide custom lookups. In the example below, we use a function to get all the maps inside a list:</target>
        </trans-unit>
        <trans-unit id="cfd9674170ea7f680e0ec4f0f9ace7b923ad6168" translate="yes" xml:space="preserve">
          <source>This means &lt;a href=&quot;#get_in/2&quot;&gt;&lt;code&gt;get_in/2&lt;/code&gt;&lt;/a&gt; can be extended to provide custom lookups. The downside is that functions cannot be stored as keys in the accessed data structures.</source>
          <target state="translated">つまり、&lt;a href=&quot;#get_in/2&quot;&gt; &lt;code&gt;get_in/2&lt;/code&gt; &lt;/a&gt;を拡張して、カスタムルックアップを提供できます。欠点は、アクセスしたデータ構造に関数をキーとして格納できないことです。</target>
        </trans-unit>
        <trans-unit id="7a04c313f02da8b2b423b92a32377c49ecdd6219" translate="yes" xml:space="preserve">
          <source>This means files can be passed between nodes and message passing guarantees they can write to the same file in a network.</source>
          <target state="translated">これは、ノード間でファイルを渡すことができることを意味し、メッセージパッシングは、ネットワーク内の同じファイルに書き込むことができることを保証します。</target>
        </trans-unit>
        <trans-unit id="1e15019a33fea88c51d5e497980380e75ee3dd48" translate="yes" xml:space="preserve">
          <source>This means often there are performance costs in using the functions in this module, compared to the more low-level operations that work directly with binaries:</source>
          <target state="translated">これは、バイナリを直接扱う低レベルの操作に比べて、このモジュールの関数を使用する際にパフォーマンスコストがかかることが多いことを意味しています。</target>
        </trans-unit>
        <trans-unit id="8571bea1bef1bde6a2d1b2d12776f78df57e4340" translate="yes" xml:space="preserve">
          <source>This means our implementation is going in the correct direction, but it doesn&amp;rsquo;t look very elegant, does it?</source>
          <target state="translated">これは、実装が正しい方向に進んでいることを意味しますが、見た目はあまりエレガントではありませんか。</target>
        </trans-unit>
        <trans-unit id="64cb76e001bde4ce0c23b9ae9350ed13f2f87e6d" translate="yes" xml:space="preserve">
          <source>This means reserved characters, such as &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;, and the so-called unreserved characters, which have the same meaning both escaped and unescaped, won't be escaped by default.</source>
          <target state="translated">これは、 &lt;code&gt;:&lt;/code&gt; や &lt;code&gt;/&lt;/code&gt; などの予約文字と、エスケープとエスケープ解除の両方が同じ意味を持ついわゆる予約解除文字は、デフォルトではエスケープされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="466121cf36d188101adba56c09d86681a5f8592b" translate="yes" xml:space="preserve">
          <source>This means that when performing multiple operations with &lt;code&gt;Enum&lt;/code&gt;, each operation is going to generate an intermediate list until we reach the result:</source>
          <target state="translated">つまり、 &lt;code&gt;Enum&lt;/code&gt; で複数の操作を実行すると、結果に到達するまで各操作が中間リストを生成します。</target>
        </trans-unit>
        <trans-unit id="e439478d8b723981d4581d054a8682120535699c" translate="yes" xml:space="preserve">
          <source>This means the VM no longer needs to keep the stacktrace once inside an &lt;code&gt;else&lt;/code&gt; clause and so tail recursion is possible when using a &lt;code&gt;try&lt;/code&gt; with a tail call as the final call inside an &lt;code&gt;else&lt;/code&gt; clause. The same is true for &lt;code&gt;rescue&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; clauses.</source>
          <target state="translated">これは、VMが &lt;code&gt;else&lt;/code&gt; 句内でスタックトレースを1回保持する必要がなくなったことを意味します。そのため、 &lt;code&gt;else&lt;/code&gt; 句内の最後の呼び出しとして末尾呼び出しで &lt;code&gt;try&lt;/code&gt; を使用すると、末尾再帰が可能になります。同じことが、 &lt;code&gt;rescue&lt;/code&gt; 句と &lt;code&gt;catch&lt;/code&gt; 句にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="03cbb2743a8fea6a87cdaa1b5871df611958047b" translate="yes" xml:space="preserve">
          <source>This means we can also configure our &lt;code&gt;:routing_table&lt;/code&gt; directly in the &lt;code&gt;config/config.exs&lt;/code&gt; file. However, which configuration value should we use?</source>
          <target state="translated">つまり、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルで直接 &lt;code&gt;:routing_table&lt;/code&gt; を構成することもできます。ただし、どの構成値を使用する必要がありますか？</target>
        </trans-unit>
        <trans-unit id="d88b91b0ac64ad4e82abb4e5d0dae196f85569c8" translate="yes" xml:space="preserve">
          <source>This message was triggered by invoking the helper &lt;code&gt;h()&lt;/code&gt;, usually referred to as &lt;a href=&quot;#h/0&quot;&gt;&lt;code&gt;h/0&lt;/code&gt;&lt;/a&gt; (since it expects 0 arguments).</source>
          <target state="translated">このメッセージは、通常は&lt;a href=&quot;#h/0&quot;&gt; &lt;code&gt;h/0&lt;/code&gt; &lt;/a&gt;と呼ばれるヘルパー &lt;code&gt;h()&lt;/code&gt; を呼び出すことによってトリガーされました（引数が0であることを期待しているため）。</target>
        </trans-unit>
        <trans-unit id="0f38cc8ed71ef5111e6f4d0950287ab1718bd370" translate="yes" xml:space="preserve">
          <source>This module allows a developer to define a test case template to be used throughout their tests. This is useful when there are a set of functions that should be shared between tests or a set of setup callbacks.</source>
          <target state="translated">このモジュールは、開発者がテスト全体で使用するテストケーステンプレートを定義することを可能にします。これは、テスト間で共有しなければならない関数のセットや、 セットアップコールバックのセットがある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="29465ded0e12b42e58045ba6de87bf204437ce87" translate="yes" xml:space="preserve">
          <source>This module allows developers to specify a string that serves as template for log messages, for example:</source>
          <target state="translated">このモジュールでは、例えばログメッセージのテンプレートとなる文字列を指定することができます。</target>
        </trans-unit>
        <trans-unit id="4305f790d0ec82e224afef341de114e73b6a1e74" translate="yes" xml:space="preserve">
          <source>This module also documents macros that return information about Elixir's compilation environment, such as (&lt;a href=&quot;#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このモジュールには、（&lt;a href=&quot;#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;）などのElixirのコンパイル環境に関する情報を返すマクロも記載されています。</target>
        </trans-unit>
        <trans-unit id="3741d9dd92ba5c7f8bc185d6546445601bc27a51" translate="yes" xml:space="preserve">
          <source>This module also documents macros that return information about Elixir's compilation environment, such as (&lt;a href=&quot;#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">This module also documents macros that return information about Elixir's compilation environment, such as (&lt;a href=&quot;#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#__STACKTRACE__/0&quot;&gt; &lt;code&gt;__STACKTRACE__/0&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="d8c660841c33dff8911e93abdee348ab3a09d4db" translate="yes" xml:space="preserve">
          <source>This module also includes helpers for debugging purposes, see &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">This module also includes helpers for debugging purposes, see &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="b8d05e55cf46fce50db35799f75e85316f97b59d" translate="yes" xml:space="preserve">
          <source>This module also includes helpers for debugging purposes, see &lt;a href=&quot;iex#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">このモジュールには、デバッグ用のヘルパーも含まれています。詳細については、&lt;a href=&quot;iex#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ef6795d77de60f24997761f8faf2a5faa8a9879b" translate="yes" xml:space="preserve">
          <source>This module also provides low-level functions, such as &lt;a href=&quot;#next/2&quot;&gt;&lt;code&gt;next/2&lt;/code&gt;&lt;/a&gt;, for parsing switches manually, as well as &lt;a href=&quot;#split/1&quot;&gt;&lt;code&gt;split/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#to_argv/1&quot;&gt;&lt;code&gt;to_argv/1&lt;/code&gt;&lt;/a&gt; for parsing from and converting switches to strings.</source>
          <target state="translated">このモジュールはまた、スイッチを手動で解析するための&lt;a href=&quot;#next/2&quot;&gt; &lt;code&gt;next/2&lt;/code&gt; &lt;/a&gt;などの低レベルの関数と、スイッチを解析して文字列に変換するための&lt;a href=&quot;#split/1&quot;&gt; &lt;code&gt;split/1&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#to_argv/1&quot;&gt; &lt;code&gt;to_argv/1&lt;/code&gt; も&lt;/a&gt;提供します。</target>
        </trans-unit>
        <trans-unit id="5a3684a4a565b66b7520e22d3fbaa6d25f44fe28" translate="yes" xml:space="preserve">
          <source>This module also provides many convenience functions for creating streams, like &lt;a href=&quot;#cycle/1&quot;&gt;&lt;code&gt;Stream.cycle/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unfold/2&quot;&gt;&lt;code&gt;Stream.unfold/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#resource/3&quot;&gt;&lt;code&gt;Stream.resource/3&lt;/code&gt;&lt;/a&gt; and more.</source>
          <target state="translated">This module also provides many convenience functions for creating streams, like &lt;a href=&quot;#cycle/1&quot;&gt; &lt;code&gt;Stream.cycle/1&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#unfold/2&quot;&gt; &lt;code&gt;Stream.unfold/2&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#resource/3&quot;&gt; &lt;code&gt;Stream.resource/3&lt;/code&gt; &lt;/a&gt; and more.</target>
        </trans-unit>
        <trans-unit id="08818329b397b72cb93efb576183f5c8fee90efe" translate="yes" xml:space="preserve">
          <source>This module also provides many convenience functions for creating streams, like &lt;a href=&quot;stream#cycle/1&quot;&gt;&lt;code&gt;Stream.cycle/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stream#unfold/2&quot;&gt;&lt;code&gt;Stream.unfold/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stream#resource/3&quot;&gt;&lt;code&gt;Stream.resource/3&lt;/code&gt;&lt;/a&gt; and more.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;stream#cycle/1&quot;&gt; &lt;code&gt;Stream.cycle/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stream#unfold/2&quot;&gt; &lt;code&gt;Stream.unfold/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;stream#resource/3&quot;&gt; &lt;code&gt;Stream.resource/3&lt;/code&gt; &lt;/a&gt;など、ストリームを作成するための多くの便利な関数も提供します。</target>
        </trans-unit>
        <trans-unit id="ad2b3a4e9085aa555ad326d7ab4e688a30372b07" translate="yes" xml:space="preserve">
          <source>This module also provides other convenience functions like &lt;code&gt;assert_in_delta&lt;/code&gt; and &lt;code&gt;assert_raise&lt;/code&gt; to easily handle other common cases such as checking a floating-point number or handling exceptions.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;assert_in_delta&lt;/code&gt; や &lt;code&gt;assert_raise&lt;/code&gt; などの他の便利な関数も提供し、浮動小数点数のチェックや例外の処理など、他の一般的なケースを簡単に処理します。</target>
        </trans-unit>
        <trans-unit id="9e2d831a828a6863612cdac8824ced54a83aa6de" translate="yes" xml:space="preserve">
          <source>This module automatically includes all callbacks defined in &lt;a href=&quot;exunit.callbacks&quot;&gt;&lt;code&gt;ExUnit.Callbacks&lt;/code&gt;&lt;/a&gt;. See that module for more information on &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;start_supervised&lt;/code&gt;, &lt;code&gt;on_exit&lt;/code&gt; and the test process lifecycle.</source>
          <target state="translated">このモジュールには、&lt;a href=&quot;exunit.callbacks&quot;&gt; &lt;code&gt;ExUnit.Callbacks&lt;/code&gt; で&lt;/a&gt;定義されたすべてのコールバックが自動的に含まれます。 &lt;code&gt;setup&lt;/code&gt; 、 &lt;code&gt;start_supervised&lt;/code&gt; 、 &lt;code&gt;on_exit&lt;/code&gt; 、およびテストプロセスのライフサイクルの詳細については、そのモジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="be140f9c425b22d10787335e62d9c0f4bf2df955" translate="yes" xml:space="preserve">
          <source>This module automatically includes all callbacks defined in &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html&quot;&gt;&lt;code&gt;ExUnit.Callbacks&lt;/code&gt;&lt;/a&gt;. See that module for more information on &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;start_supervised&lt;/code&gt;, &lt;code&gt;on_exit&lt;/code&gt; and the test process life cycle.</source>
          <target state="translated">このモジュールには、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html&quot;&gt; &lt;code&gt;ExUnit.Callbacks&lt;/code&gt; で&lt;/a&gt;定義されているすべてのコールバックが自動的に含まれます。 &lt;code&gt;setup&lt;/code&gt; 、 &lt;code&gt;start_supervised&lt;/code&gt; 、 &lt;code&gt;on_exit&lt;/code&gt; 、およびテストプロセスのライフサイクルの詳細については、そのモジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="a6257d1fd58c649338860fae4d9c7189fabdb3f2" translate="yes" xml:space="preserve">
          <source>This module complements Erlang's &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;&lt;code&gt;:code&lt;/code&gt; module&lt;/a&gt; to add behaviour which is specific to Elixir. Almost all of the functions in this module have global side effects on the behaviour of Elixir.</source>
          <target state="translated">このモジュールは、Erlangの&lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt; &lt;code&gt;:code&lt;/code&gt; モジュール&lt;/a&gt;を補完して、Elixir固有の動作を追加します。このモジュールのほとんどすべての関数は、Elixirの動作にグローバルな副作用があります。</target>
        </trans-unit>
        <trans-unit id="653ac253ebf8eeb2f4ad27098db4993bb2625263" translate="yes" xml:space="preserve">
          <source>This module contains a set of assertion functions that are imported by default into your test cases.</source>
          <target state="translated">このモジュールには、テストケースにデフォルトでインポートされるアサーション関数のセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="922f087298c98adf032ad8b0ed4a5b0046285656" translate="yes" xml:space="preserve">
          <source>This module contains functions to manipulate files.</source>
          <target state="translated">このモジュールには、ファイルを操作するための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="999b5229e2658017fe9fe551f8ab83bda85a2221" translate="yes" xml:space="preserve">
          <source>This module contains three functions for compiling and evaluating files. Here is a summary of them and their behaviour:</source>
          <target state="translated">このモジュールには、ファイルをコンパイルして評価するための3つの関数が含まれています。以下にその概要と動作を示します。</target>
        </trans-unit>
        <trans-unit id="6edd43c8bb392184539818160b2c1a73b42dd599" translate="yes" xml:space="preserve">
          <source>This module defines a behaviour for providing time zone data.</source>
          <target state="translated">このモジュールは、タイムゾーンデータを提供するための動作を定義します。</target>
        </trans-unit>
        <trans-unit id="fc612a9ae903e6387df477d371e55523892dcb6f" translate="yes" xml:space="preserve">
          <source>This module defines a supervisor which can be used to dynamically supervise tasks.</source>
          <target state="translated">このモジュールは、タスクを動的に監督するために使用できるスーパバイザを定義します。</target>
        </trans-unit>
        <trans-unit id="ff54a5422bbcc14ae0339cf9003ae87e696322e7" translate="yes" xml:space="preserve">
          <source>This module defines the &lt;a href=&quot;#setup/1&quot;&gt;&lt;code&gt;setup/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#setup/2&quot;&gt;&lt;code&gt;setup/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#setup_all/1&quot;&gt;&lt;code&gt;setup_all/1&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#setup_all/2&quot;&gt;&lt;code&gt;setup_all/2&lt;/code&gt;&lt;/a&gt; callbacks, as well as the &lt;a href=&quot;#on_exit/2&quot;&gt;&lt;code&gt;on_exit/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;#setup/1&quot;&gt; &lt;code&gt;setup/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#setup/2&quot;&gt; &lt;code&gt;setup/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#setup_all/1&quot;&gt; &lt;code&gt;setup_all/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#setup_all/2&quot;&gt; &lt;code&gt;setup_all/2&lt;/code&gt; の&lt;/a&gt;コールバック、および&lt;a href=&quot;#on_exit/2&quot;&gt; &lt;code&gt;on_exit/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt;関数を定義します。</target>
        </trans-unit>
        <trans-unit id="7bb87d9bb4c75afab1fe54071112deb7c5a60247" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour for a Mix task that does compilation.</source>
          <target state="translated">このモジュールは、コンパイルを行う Mix タスクの動作を定義します。</target>
        </trans-unit>
        <trans-unit id="adca2c4f19b234afbf1c3981b55410081f195e79" translate="yes" xml:space="preserve">
          <source>This module defines the responsibilities for working with calendars, dates, times and datetimes in Elixir.</source>
          <target state="translated">このモジュールは、Elixirでカレンダー、日付、時刻、日付を操作するための責任を定義します。</target>
        </trans-unit>
        <trans-unit id="1b157bc741bdfd8ba6ae8d42ded3b63cf4cd77d7" translate="yes" xml:space="preserve">
          <source>This module implements the functionality described in &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200&quot;&gt;&quot;Strictly Pretty&quot; (2000) by Christian Lindig&lt;/a&gt; with small additions, like support for binary nodes and a break mode that maximises use of horizontal space.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200&quot;&gt;Christian Lindigによる &quot;Strictly Pretty&quot;（2000）で&lt;/a&gt;説明されている機能を実装しています。バイナリノードのサポートや水平スペースの使用を最大化するブレークモードなどの小さな追加が含まれています。</target>
        </trans-unit>
        <trans-unit id="112202a17c89837b3a647d3e666a456f2e4b078d" translate="yes" xml:space="preserve">
          <source>This module includes the built-in guards used by Elixir developers. They are a predefined set of functions and macros that augment pattern matching, typically invoked after the &lt;code&gt;when&lt;/code&gt; operator. For example:</source>
          <target state="translated">このモジュールには、Elixir開発者が使用する組み込みガードが含まれています。これらは、パターンマッチングを強化する定義済みの関数とマクロのセットであり、通常は &lt;code&gt;when&lt;/code&gt; 演算子の後に呼び出されます。例えば：</target>
        </trans-unit>
        <trans-unit id="cc9a3de9fefb0b3c084b5528aedf73062faf9707" translate="yes" xml:space="preserve">
          <source>This module is deprecated, use the &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="83714cee8828e8f9110c531415bac329978b2d35" translate="yes" xml:space="preserve">
          <source>This module is deprecated, use the &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="0495cc6d49a1f2bcfa929825091c762ee979f726" translate="yes" xml:space="preserve">
          <source>This module is deprecated, use the modules &lt;a href=&quot;https://hexdocs.pm/elixir/Config.html&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Config.Reader.html&quot;&gt;&lt;code&gt;Config.Reader&lt;/code&gt;&lt;/a&gt; from Elixir's standard library instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに、Elixirの標準ライブラリのモジュール&lt;a href=&quot;https://hexdocs.pm/elixir/Config.html&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/elixir/Config.Reader.html&quot;&gt; &lt;code&gt;Config.Reader&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="60fd8da7254ec766067fc2237c8a6fbc5505757a" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Instead of &lt;a href=&quot;#defcallback/1&quot;&gt;&lt;code&gt;defcallback/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#defmacrocallback/1&quot;&gt;&lt;code&gt;defmacrocallback/1&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;@callback&lt;/code&gt; and &lt;code&gt;@macrocallback&lt;/code&gt; module attributes can be used (respectively). See the documentation for &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt; for more information on these attributes.</source>
          <target state="translated">このモジュールは非推奨です。代わりの&lt;a href=&quot;#defcallback/1&quot;&gt; &lt;code&gt;defcallback/1&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#defmacrocallback/1&quot;&gt; &lt;code&gt;defmacrocallback/1&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;@callback&lt;/code&gt; 及び &lt;code&gt;@macrocallback&lt;/code&gt; モジュール属性が（それぞれ）を使用することができます。これらの属性の詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt; &lt;code&gt;Module&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="698253e94267be04646f8c090c390fb2cc54ab28" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Instead of &lt;a href=&quot;#defcallback/1&quot;&gt;&lt;code&gt;defcallback/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#defmacrocallback/1&quot;&gt;&lt;code&gt;defmacrocallback/1&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;@callback&lt;/code&gt; and &lt;code&gt;@macrocallback&lt;/code&gt; module attributes can be used (respectively). See the documentation for &lt;a href=&quot;module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt; for more information on these attributes.</source>
          <target state="translated">このモジュールは非推奨です。代わりの&lt;a href=&quot;#defcallback/1&quot;&gt; &lt;code&gt;defcallback/1&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#defmacrocallback/1&quot;&gt; &lt;code&gt;defmacrocallback/1&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;@callback&lt;/code&gt; 及び &lt;code&gt;@macrocallback&lt;/code&gt; モジュール属性が（それぞれ）を使用することができます。これらの属性の詳細については、&lt;a href=&quot;module&quot;&gt; &lt;code&gt;Module&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fdf2b70f41d95f88ee9e4aeda784850c33cb6114" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use @callback and @macrocallback attributes instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに @callback と @macrocallback 属性を使用してください。</target>
        </trans-unit>
        <trans-unit id="3d00a52e370b2dc890428ed554a01c357e7af552" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use Config and Config.Reader instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに Config と Config.Reader を使用してください。</target>
        </trans-unit>
        <trans-unit id="21c46dbb91fb819b2c0d1361c70dbb30920cffa0" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use Map instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに Map を使用してください。</target>
        </trans-unit>
        <trans-unit id="39e094eeeb209ce88d3bf96eb154f3cef16627e8" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use Map or Keyword modules instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに Map または Keyword モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="45cb95722786d1fc420f1550713942a3d2a40ee4" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use MapSet instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに MapSet を使用してください。</target>
        </trans-unit>
        <trans-unit id="8bfe2ac5b2ad8a73d077417b66f5ed47d757f034" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use the &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="46e498b026f4f6f31e26916a4df3d6d96afaccb2" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use the &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="b8d2e8897e9809b530aad6556d1d82b7d911062f" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="ff61ace86ab234eb7df8bf6ecf37e092b5b0882a" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use the &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt; module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="51805cd79a5e913405d55c2dfa613daced6e0652" translate="yes" xml:space="preserve">
          <source>This module is deprecated. Use the new child specifications outlined in the Supervisor module instead.</source>
          <target state="translated">このモジュールは非推奨です。代わりに Supervisor モジュールで概説されている新しい子の仕様を使用してください。</target>
        </trans-unit>
        <trans-unit id="090a0510a4b709bb729894c57c0c587dc11055ba" translate="yes" xml:space="preserve">
          <source>This module is most commonly used to define application configuration, typically in &lt;code&gt;config/config.exs&lt;/code&gt;:</source>
          <target state="translated">このモジュールは、アプリケーション構成を定義するために最も一般的に使用され、通常は &lt;code&gt;config/config.exs&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="2befac5116f60db9c19a013fd1aa9a67a87481ad" translate="yes" xml:space="preserve">
          <source>This module must be used in other modules as a way to configure and prepare them for testing.</source>
          <target state="translated">このモジュールは、他のモジュールを設定してテストの準備をする方法として、他のモジュールで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5b22afa6be61052c1f9cdf8dac15ff3c336d6750" translate="yes" xml:space="preserve">
          <source>This module provides 3 main APIs for you to use:</source>
          <target state="translated">このモジュールは、あなたが使用するための3つの主要なAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="769d078447abaa6265ad7bb0de8a70d942cff612" translate="yes" xml:space="preserve">
          <source>This module provides a Mix shell implementation that uses the current process mailbox for communication instead of IO.</source>
          <target state="translated">このモジュールは、IO の代わりに現在のプロセスのメールボックスを通信に使用する Mix シェルの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="97378d1871eb3d3c2cbd5fdcf8a5c1c351518c6d" translate="yes" xml:space="preserve">
          <source>This module provides convenience functions for traversing other structures, like tuples and lists. These functions can be used in all the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt;-related functions and macros in &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、タプルやリストなどの他の構造をトラバースするための便利な関数を提供します。これらの関数は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;内のすべての&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;関連の関数とマクロで使用できます。</target>
        </trans-unit>
        <trans-unit id="61d141fedc9a9bf97077c1d4c4dd489c9b785e1b" translate="yes" xml:space="preserve">
          <source>This module provides convenience functions for traversing other structures, like tuples and lists. These functions can be used in all the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt;-related functions and macros in &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、タプルやリストなどの他の構造をトラバースするための便利な関数を提供します。これらの関数は、&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;すべての&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;関連の関数とマクロで使用できます。</target>
        </trans-unit>
        <trans-unit id="782a5e74e17fd10ef3053ba12c4f6db6d729bfdd" translate="yes" xml:space="preserve">
          <source>This module provides conveniences for manipulating or retrieving file system paths.</source>
          <target state="translated">このモジュールは、ファイルシステムのパスを操作したり取得したりするための便利な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="da08bc2535ffa10b4ff19a553d1b9ea3a60095e8" translate="yes" xml:space="preserve">
          <source>This module provides conveniences for working with records at compilation time, where compile-time field names are used to manipulate the tuples, providing fast operations on top of the tuples' compact structure.</source>
          <target state="translated">このモジュールは、コンパイル時にレコードを操作するための便利な機能を提供します。コンパイル時のフィールド名がタプルの操作に使われ、タプルのコンパクトな構造の上に高速な操作を提供します。</target>
        </trans-unit>
        <trans-unit id="d8865f287fbd66961e8c5ed897c4cb1e98bb7854" translate="yes" xml:space="preserve">
          <source>This module provides data encoding and decoding functions according to &lt;a href=&quot;https://tools.ietf.org/html/rfc4648&quot;&gt;RFC 4648&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;https://tools.ietf.org/html/rfc4648&quot;&gt;RFC 4648に&lt;/a&gt;準拠したデータのエンコードおよびデコード機能を提供します。</target>
        </trans-unit>
        <trans-unit id="775daee9805ae8be33fdd0d2d338cd5f646e58b6" translate="yes" xml:space="preserve">
          <source>This module provides functions for working with URIs (for example, parsing URIs or encoding query strings). The functions in this module are implemented according to &lt;a href=&quot;https://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、URIを操作するための関数（たとえば、URIの解析やクエリ文字列のエンコード）を提供します。このモジュールの機能は&lt;a href=&quot;https://tools.ietf.org/html/rfc3986&quot;&gt;RFC 3986&lt;/a&gt;に従って実装されています。</target>
        </trans-unit>
        <trans-unit id="1925b1b9c75dedb57897285758fc633fa67f4392" translate="yes" xml:space="preserve">
          <source>This module provides helper functions and defines the behaviour required by any source code manager (SCM) used by Mix.</source>
          <target state="translated">このモジュールは、ヘルパー関数を提供し、Mixが使用するソースコードマネージャ(SCM)で必要とされる動作を定義します。</target>
        </trans-unit>
        <trans-unit id="975d761a831604643250ee0022304cbf208c888f" translate="yes" xml:space="preserve">
          <source>This module relies on this behaviour to ignore such invalid characters. For example, &lt;a href=&quot;#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; will return a correct result even if an invalid code point is fed into it.</source>
          <target state="translated">このモジュールは、この動作に依存して、このような無効な文字を無視します。たとえば、&lt;a href=&quot;#length/1&quot;&gt; &lt;code&gt;length/1&lt;/code&gt; &lt;/a&gt;は、無効なコードポイントが入力された場合でも正しい結果を返します。</target>
        </trans-unit>
        <trans-unit id="c0fcf25a6b73787d9a7e552929b18116ce2e70ec" translate="yes" xml:space="preserve">
          <source>This module uses the byte size to compute how much space there is left. If your document contains strings, then those need to be wrapped in &lt;a href=&quot;#string/1&quot;&gt;&lt;code&gt;string/1&lt;/code&gt;&lt;/a&gt;, which then relies on &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt; to precompute the document size.</source>
          <target state="translated">このモジュールは、バイトサイズを使用して、残りのスペースの量を計算します。ドキュメントに文字列が含まれている場合は、&lt;a href=&quot;#string/1&quot;&gt; &lt;code&gt;string/1&lt;/code&gt; &lt;/a&gt;でラップする必要があります。文字列は、&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;に依存してドキュメントサイズを事前計算します。</target>
        </trans-unit>
        <trans-unit id="a2a3fd3d8cfc91e72f80f4c370ccf8f3a32b7b9d" translate="yes" xml:space="preserve">
          <source>This module uses the byte size to compute how much space there is left. If your document contains strings, then those need to be wrapped in &lt;a href=&quot;#string/1&quot;&gt;&lt;code&gt;string/1&lt;/code&gt;&lt;/a&gt;, which then relies on &lt;a href=&quot;string#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt; to precompute the document size.</source>
          <target state="translated">このモジュールは、バイトサイズを使用して、残りのスペースを計算します。ドキュメントに文字列が含まれている場合、それらを&lt;a href=&quot;#string/1&quot;&gt; &lt;code&gt;string/1&lt;/code&gt; &lt;/a&gt;でラップする必要があります。これは、&lt;a href=&quot;string#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;に依存してドキュメントサイズを事前計算します。</target>
        </trans-unit>
        <trans-unit id="bf6c5bbe802615e0aa5a1527fbeb868a3dd4e46f" translate="yes" xml:space="preserve">
          <source>This operation happens in constant time.</source>
          <target state="translated">この操作は一定時間で行われます。</target>
        </trans-unit>
        <trans-unit id="0323d90aa13d0480aa31c479eb72ceeb1afc3cbd" translate="yes" xml:space="preserve">
          <source>This operation is meant to be used with &quot;raw&quot; devices that are started without an encoding. The given &lt;code&gt;iodata&lt;/code&gt; is written as is to the device, without conversion. For more information on IO data, see the &quot;IO data&quot; section in the module documentation.</source>
          <target state="translated">この操作は、エンコーディングなしで起動された「ロー」デバイスで使用することを目的としています。指定された &lt;code&gt;iodata&lt;/code&gt; は、変換されずにそのままデバイスに書き込まれます。IOデータの詳細については、モジュールのドキュメントの「IOデータ」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="caa455aca538782e938e4b888f46d0efc72ad432" translate="yes" xml:space="preserve">
          <source>This operation is not recursive.</source>
          <target state="translated">この操作は再帰的ではありません。</target>
        </trans-unit>
        <trans-unit id="6cf233431f4056abd018dbc95c859c52d627d1ab" translate="yes" xml:space="preserve">
          <source>This operation is potentially expensive, as it reads data from the file system, parses beam files, evaluates code and so on.</source>
          <target state="translated">この操作は、ファイルシステムからデータを読み込んだり、ビームファイルを解析したり、コードを評価したりするため、潜在的にコストがかかる。</target>
        </trans-unit>
        <trans-unit id="4ac87cbe297ccc151c1adeb864d9d02cdda18b09" translate="yes" xml:space="preserve">
          <source>This operator (which is a macro) simply translates to a call to &lt;a href=&quot;enum#member?/2&quot;&gt;&lt;code&gt;Enum.member?/2&lt;/code&gt;&lt;/a&gt;. The example above would translate to:</source>
          <target state="translated">この演算子（マクロ）は、単に&lt;a href=&quot;enum#member?/2&quot;&gt; &lt;code&gt;Enum.member?/2&lt;/code&gt; の&lt;/a&gt;呼び出しに変換されます。上記の例は次のように変換されます。</target>
        </trans-unit>
        <trans-unit id="dce7f3b5f6d1002f08c83e9f800ba97413046570" translate="yes" xml:space="preserve">
          <source>This operator (which is a macro) simply translates to a call to &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#member?/2&quot;&gt;&lt;code&gt;Enum.member?/2&lt;/code&gt;&lt;/a&gt;. The example above would translate to:</source>
          <target state="translated">この演算子（マクロ）は、単に&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#member?/2&quot;&gt; &lt;code&gt;Enum.member?/2&lt;/code&gt; の&lt;/a&gt;呼び出しに変換されます。上記の例は次のように変換されます。</target>
        </trans-unit>
        <trans-unit id="331fe094cd09d757ad66d6f225117b31c709d88f" translate="yes" xml:space="preserve">
          <source>This operator considers 1 and 1.0 to be equal. For match comparison, use &lt;a href=&quot;#!==/2&quot;&gt;&lt;code&gt;!==/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この演算子は、1と1.0が等しいと見なします。一致を比較するには、代わりに&lt;a href=&quot;#!==/2&quot;&gt; &lt;code&gt;!==/2&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="a93d5027785794a41da95cb35f0cd6d2acb007f9" translate="yes" xml:space="preserve">
          <source>This operator considers 1 and 1.0 to be equal. For stricter semantics, use &lt;a href=&quot;#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">この演算子は、1と1.0が等しいと見なします。より厳密なセマンティクスについては、代わりに&lt;a href=&quot;#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="9d9501c58df67371e18635ed16fc7a445f5df561" translate="yes" xml:space="preserve">
          <source>This operator introduces the expression on the left-hand side as the first argument to the function call on the right-hand side.</source>
          <target state="translated">この演算子は、左辺の式を右辺の関数呼び出しの第一引数として導入します。</target>
        </trans-unit>
        <trans-unit id="f341e422c93c5bb9c0446195cea1180bec59b5b7" translate="yes" xml:space="preserve">
          <source>This operator is used in two distinct occasions in Elixir. It is used in typespecs to specify the type of a variable, function or of a type itself:</source>
          <target state="translated">この演算子は、Elixirでは2つの異なる場面で使用されます。これは、変数、関数、あるいは型そのものの型を指定するために typespecs で使用されます。</target>
        </trans-unit>
        <trans-unit id="0255b05dbc6a872386af8aa97dc81394e15f507f" translate="yes" xml:space="preserve">
          <source>This page describes the semantics of patterns and guards, where they are all allowed, and how to extend them.</source>
          <target state="translated">このページでは、パターンとガードのセマンティクス、それらがすべて許可されている場所、そしてそれらを拡張する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="769404e29fd0d9c0c1b74fd982594f4931cda146" translate="yes" xml:space="preserve">
          <source>This protocol requires four functions to be implemented, &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;reduce/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#member?/2&quot;&gt;&lt;code&gt;member?/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#slice/1&quot;&gt;&lt;code&gt;slice/1&lt;/code&gt;&lt;/a&gt;. The core of the protocol is the &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;reduce/3&lt;/code&gt;&lt;/a&gt; function. All other functions exist as optimizations paths for data structures that can implement certain properties in better than linear time.</source>
          <target state="translated">このプロトコルでは、&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;reduce/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#member?/2&quot;&gt; &lt;code&gt;member?/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#slice/1&quot;&gt; &lt;code&gt;slice/1&lt;/code&gt; の&lt;/a&gt; 4つの関数を実装する必要があります。プロトコルの中核は、&lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;reduce/3&lt;/code&gt; &lt;/a&gt;関数です。他のすべての関数は、線形時間よりも優れた特定のプロパティを実装できるデータ構造の最適化パスとして存在します。</target>
        </trans-unit>
        <trans-unit id="fb7da1dc23c1e9f315adf4ca89a991f2f576c3b4" translate="yes" xml:space="preserve">
          <source>This protocol uses tagged tuples to exchange information between the reducer function and the data type that implements the protocol. This allows enumeration of resources, such as files, to be done efficiently while also guaranteeing the resource will be closed at the end of the enumeration. This protocol also allows suspension of the enumeration, which is useful when interleaving between many enumerables is required (as in the &lt;code&gt;zip/1&lt;/code&gt; and &lt;code&gt;zip/2&lt;/code&gt; functions).</source>
          <target state="translated">このプロトコルは、タグ付きタプルを使用して、レデューサー関数とプロトコルを実装するデータ型の間で情報を交換します。これにより、ファイルなどのリソースの列挙を効率的に行うことができると同時に、列挙の最後にリソースが閉じられることが保証されます。このプロトコルは、列挙の一時停止も可能にします。これは、多くの列挙可能なオブジェクト間のインターリーブが必要な場合に便利です（ &lt;code&gt;zip/1&lt;/code&gt; および &lt;code&gt;zip/2&lt;/code&gt; 関数など）。</target>
        </trans-unit>
        <trans-unit id="2a476c9109b8e7bd77f398d609ce8b45633486cf" translate="yes" xml:space="preserve">
          <source>This reads from the IO as UTF-8. Check out &lt;a href=&quot;#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt; to handle the IO as a raw binary.</source>
          <target state="translated">これはIOからUTF-8として読み取られます。&lt;a href=&quot;#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt;をチェックして、IOを生のバイナリとして処理します。</target>
        </trans-unit>
        <trans-unit id="0d2faccf1f4cab6a9360849e0c4b192286433613" translate="yes" xml:space="preserve">
          <source>This reads from the IO as UTF-8. Check out &lt;a href=&quot;io#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt; to handle the IO as a raw binary.</source>
          <target state="translated">これは、IOからUTF-8として読み取ります。IOをrawバイナリとして処理するには、&lt;a href=&quot;io#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="fb3289e1168d746e447207053b10b0f0b058ccb5" translate="yes" xml:space="preserve">
          <source>This returns true if a task is marked as recursive and it is being executed inside an umbrella project.</source>
          <target state="translated">タスクが再帰的とマークされていて、それがアンブレラプロジェクト内で実行されている場合、これは真を返します。</target>
        </trans-unit>
        <trans-unit id="ea9af91069aa4c9d64215d6cd9db073871191b73" translate="yes" xml:space="preserve">
          <source>This section covers built-in attributes. However, attributes can also be used by developers or extended by libraries to support custom behaviour.</source>
          <target state="translated">このセクションでは、組み込みの属性を扱います。しかし、属性は開発者によって使用されたり、ライブラリによって拡張されてカスタム動作をサポートしたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="cd8870a170daeec23154d49d471c2dd9485fac0a" translate="yes" xml:space="preserve">
          <source>This shortcut will be extremely useful as we build our project, allowing us to quickly iterate by running a single test.</source>
          <target state="translated">このショートカットは、プロジェクトを構築する際に非常に便利で、単一のテストを実行することで素早く反復処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="bd1e1ed3f015a12c58d63db1a9d93b599be9e3dd" translate="yes" xml:space="preserve">
          <source>This structure is enough to compile our project:</source>
          <target state="translated">この構造があれば、プロジェクトをコンパイルするのに十分です。</target>
        </trans-unit>
        <trans-unit id="5aeacadd2f95dc684bd082e5479290a732535d0b" translate="yes" xml:space="preserve">
          <source>This syntax is very convenient as it can be nested arbitrarily:</source>
          <target state="translated">この構文は、任意に入れ子にすることができるので非常に便利です。</target>
        </trans-unit>
        <trans-unit id="a3f217bb694fd565ea5471a5519af65161e8bfcb" translate="yes" xml:space="preserve">
          <source>This syntax reflects the fact the effective size is given by multiplying the size by the unit.</source>
          <target state="translated">この構文は、有効なサイズがサイズに単位を乗じて与えられるという事実を反映しています。</target>
        </trans-unit>
        <trans-unit id="d91886050dfd3b8b0ffcd36baeadec3113935150" translate="yes" xml:space="preserve">
          <source>This task also removes documentation and debugging chunks from the compiled &lt;code&gt;.beam&lt;/code&gt; files to reduce the size of the escript. If this is not desired, check the &lt;code&gt;:strip_beams&lt;/code&gt; option.</source>
          <target state="translated">このタスクでは、コンパイルされた &lt;code&gt;.beam&lt;/code&gt; ファイルからドキュメントとデバッグチャンクを削除して、escriptのサイズを小さくします。これが望ましくない場合は、 &lt;code&gt;:strip_beams&lt;/code&gt; オプションを確認してください。</target>
        </trans-unit>
        <trans-unit id="e372a4a60d70f77f44ec0d0a534418195e400445" translate="yes" xml:space="preserve">
          <source>This task attempts to detect if the project contains one of the following files and act accordingly:</source>
          <target state="translated">このタスクは、プロジェクトに以下のファイルのいずれかが含まれているかどうかを検出し、それに応じた処理を試みます。</target>
        </trans-unit>
        <trans-unit id="5435e4488fd4c9f6223b1ef1bcd4f2e99c900fe4" translate="yes" xml:space="preserve">
          <source>This task consolidates all protocols in the code path and outputs the new binary files to the given directory. Defaults to &quot;_build/MIX_ENV/lib/YOUR_APP/consolidated&quot; for regular apps and &quot;_build/MIX_ENV/consolidated&quot; in umbrella projects.</source>
          <target state="translated">このタスクは、コードパス内のすべてのプロトコルを統合し、新しいバイナリファイルを指定したディレクトリに出力します。デフォルトは、通常のアプリでは&quot;_build/MIX_ENV/lib/YOUR_APP/consolidated&quot;、アンブレラプロジェクトでは&quot;_build/MIX_ENV/consolidated &quot;です。</target>
        </trans-unit>
        <trans-unit id="1b4cda0b866fc4bd88710556e9ee176eb8201a71" translate="yes" xml:space="preserve">
          <source>This task guarantees the project and its dependencies are compiled and packages them inside an escript. Before invoking &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix escript.build&lt;/code&gt;&lt;/a&gt;, it is only necessary to define a &lt;code&gt;:escript&lt;/code&gt; key with a &lt;code&gt;:main_module&lt;/code&gt; option in your &lt;code&gt;mix.exs&lt;/code&gt; file:</source>
          <target state="translated">このタスクにより、プロジェクトとその依存関係がコンパイルされ、escript内にパッケージ化されることが保証されます。呼び出す前に&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix escript.build&lt;/code&gt; &lt;/a&gt;、定義することが必要なだけである &lt;code&gt;:escript&lt;/code&gt; とキー &lt;code&gt;:main_module&lt;/code&gt; あなたの中のオプション &lt;code&gt;mix.exs&lt;/code&gt; のファイルを：</target>
        </trans-unit>
        <trans-unit id="b4e94347be43d3ad1c1f8b54ecc6bc826651d565" translate="yes" xml:space="preserve">
          <source>This task guarantees this option is respected.</source>
          <target state="translated">このタスクは、このオプションが尊重されることを保証します。</target>
        </trans-unit>
        <trans-unit id="0d0f25b9bb663d2e0c92536a5493fa56feb94b3f" translate="yes" xml:space="preserve">
          <source>This task is automatically invoked unless the project disables the &lt;code&gt;:consolidate_protocols&lt;/code&gt; option in their configuration.</source>
          <target state="translated">プロジェクトが構成で &lt;code&gt;:consolidate_protocols&lt;/code&gt; オプションを無効にしない限り、このタスクは自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7b95bdbfd4b655866a594149ce367ef4e30f87be" translate="yes" xml:space="preserve">
          <source>This task is automatically reenabled, so it can be called multiple times to load different configs.</source>
          <target state="translated">このタスクは自動的に再有効化されるので、異なる設定をロードするために複数回呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="60b7baa6b3d14e1c34ecb1ce263c22e53b326d02" translate="yes" xml:space="preserve">
          <source>This task is automatically reenabled, so it can be called multiple times with different arguments.</source>
          <target state="translated">このタスクは自動的に再有効化されるので、異なる引数で複数回呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="26dd7e67f1b7b3ef5db86ff692753739683ca6d1" translate="yes" xml:space="preserve">
          <source>This task is automatically reenabled, so it can be called multiple times.</source>
          <target state="translated">このタスクは自動的に再有効化されるので、複数回呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ee1da0440bde8a127669b55f6844894777d90f76" translate="yes" xml:space="preserve">
          <source>This task is automatically reenabled, so you can perform multiple cross reference checks in the same Mix invocation.</source>
          <target state="translated">このタスクは自動的に再有効化されるので、同じMix呼び出しで複数のクロスリファレンスチェックを実行できます。</target>
        </trans-unit>
        <trans-unit id="83f0ea3aa09fb8c86fe400793e6f276b65a06e3e" translate="yes" xml:space="preserve">
          <source>This task is automatically reenabled, so you can print information multiple times in the same Mix invocation.</source>
          <target state="translated">このタスクは自動的に再有効化されるので、同じMIX呼び出しで複数回情報を印刷することができます。</target>
        </trans-unit>
        <trans-unit id="59102e430969db44aa9dbab5520c01e316dd3de5" translate="yes" xml:space="preserve">
          <source>This task is automatically reenabled, so you can profile multiple times in the same Mix invocation.</source>
          <target state="translated">このタスクは自動的に再有効化されるので、同じMix呼び出しで複数回プロファイルを行うことができます。</target>
        </trans-unit>
        <trans-unit id="092ef0d136b59efa09b303487e88d69e710c4f88" translate="yes" xml:space="preserve">
          <source>This task is never directly invoked from the command line, but it is rather used as building block by other tasks.</source>
          <target state="translated">このタスクはコマンドラインから直接呼び出されることはありませんが、他のタスクの構成要素として使用されます。</target>
        </trans-unit>
        <trans-unit id="25ec3e34affdc5b118add6428766793ecf3c3afd" translate="yes" xml:space="preserve">
          <source>This task starts the current application, loads up &lt;code&gt;test/test_helper.exs&lt;/code&gt; and then requires all files matching the &lt;code&gt;test/**/*_test.exs&lt;/code&gt; pattern in parallel.</source>
          <target state="translated">このタスクは現在のアプリケーションを起動し、 &lt;code&gt;test/test_helper.exs&lt;/code&gt; をロードしてから、 &lt;code&gt;test/**/*_test.exs&lt;/code&gt; パターンに一致するすべてのファイルを並列で要求します。</target>
        </trans-unit>
        <trans-unit id="1c60c4d233c9160c073150ba4ff8097d082b6e81" translate="yes" xml:space="preserve">
          <source>This task supports importing formatter configuration from dependencies.</source>
          <target state="translated">このタスクは、依存関係からのフォーマッタ設定のインポートをサポートします。</target>
        </trans-unit>
        <trans-unit id="b4d9fcf010b1211b86ea4237770d26b428fafb33" translate="yes" xml:space="preserve">
          <source>This time all tests passed and ExUnit warned us that distributed tests were being excluded. If you run tests with &lt;code&gt;$ elixir --sname foo -S mix test&lt;/code&gt;, one extra test should run and successfully pass as long as the &lt;code&gt;bar@computer-name&lt;/code&gt; node is available.</source>
          <target state="translated">今回はすべてのテストに合格し、ExUnitは分散テストが除外されていることを警告しました。あなたが持つテスト実行すると &lt;code&gt;$ elixir --sname foo -S mix test&lt;/code&gt; 、1つの余分テストが実行され、正常に限り渡す必要があり &lt;code&gt;bar@computer-name&lt;/code&gt; ノードが利用可能です。</target>
        </trans-unit>
        <trans-unit id="477d833785327cf68017043ef90fe5f9da786575" translate="yes" xml:space="preserve">
          <source>This time is monotonically increasing and starts in an unspecified point in time.</source>
          <target state="translated">この時間は単調に増加し、不特定の時点から始まります。</target>
        </trans-unit>
        <trans-unit id="d29fa001afdf2d6ca161492ebf202a329eec33bb" translate="yes" xml:space="preserve">
          <source>This time let&amp;rsquo;s add a &lt;code&gt;:distributed&lt;/code&gt; tag to &lt;code&gt;test/kv/router_test.exs&lt;/code&gt;:</source>
          <target state="translated">今回は &lt;code&gt;test/kv/router_test.exs&lt;/code&gt; に： &lt;code&gt;:distributed&lt;/code&gt; タグを追加しましょう：</target>
        </trans-unit>
        <trans-unit id="8a08500e8bc91707c167cbe26d52c3bd3806ea0d" translate="yes" xml:space="preserve">
          <source>This time may be adjusted forwards or backwards in time with no limitation and is not monotonic.</source>
          <target state="translated">この時間は、特に限定されず、時間的に前後に調整してもよく、単調ではない。</target>
        </trans-unit>
        <trans-unit id="6d3ccee502b139d7db4ac43bc5181f6363d2dc18" translate="yes" xml:space="preserve">
          <source>This time the supervisor started a named registry, allowing us to create buckets without having to explicitly fetch the PID from the supervisor. You should also know how to make the registry crash again, without looking up its PID: give it a try.</source>
          <target state="translated">今回はスーパーバイザが名前付きのレジストリを起動したので、明示的にスーパーバイザからPIDを取得しなくてもバケットを作成できるようになりました。また、PID を調べずにレジストリを再びクラッシュさせる方法も知っておくべきです。</target>
        </trans-unit>
        <trans-unit id="2674a77869b19062b86e06c05052e9cdedb0c192" translate="yes" xml:space="preserve">
          <source>This time, since our test relies on global data, we have not given &lt;code&gt;async: true&lt;/code&gt; to &lt;code&gt;use ExUnit.Case&lt;/code&gt;. Furthermore, in order to guarantee our test is always in a clean state, we stop and start the &lt;code&gt;:kv&lt;/code&gt; application before each test. In fact, stopping the &lt;code&gt;:kv&lt;/code&gt; application even prints a warning on the terminal:</source>
          <target state="translated">今回は、テストがグローバルデータに依存している &lt;code&gt;use ExUnit.Case&lt;/code&gt; を使用するために &lt;code&gt;async: true&lt;/code&gt; を指定していません。さらに、テストが常にクリーンな状態であることを保証するために、各テストの前に &lt;code&gt;:kv&lt;/code&gt; アプリケーションを停止して開始します。実際、 &lt;code&gt;:kv&lt;/code&gt; アプリケーションを停止すると、端末に警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="c22b7275344f29b83a9a0084e4877ef048fc7831" translate="yes" xml:space="preserve">
          <source>This time, we have joined two aliases, defining the final alias &lt;code&gt;Hello.World&lt;/code&gt;.</source>
          <target state="translated">今回は、2つのエイリアスを結合して、最終的なエイリアス &lt;code&gt;Hello.World&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="b92fdce12a5311e4693203aaafe3726c0337e1b5" translate="yes" xml:space="preserve">
          <source>This tree means that &lt;code&gt;lib/a.ex&lt;/code&gt; depends on &lt;code&gt;lib/b.ex&lt;/code&gt; at compile time which then depends on &lt;code&gt;lib/c.ex&lt;/code&gt; at runtime. This is often problematic because if &lt;code&gt;lib/c.ex&lt;/code&gt; changes, &lt;code&gt;lib/a.ex&lt;/code&gt; also has to recompile due to this indirect compile time dependency.</source>
          <target state="translated">この木手段 &lt;code&gt;lib/a.ex&lt;/code&gt; に依存 &lt;code&gt;lib/b.ex&lt;/code&gt; 、その後に依存してコンパイル時 &lt;code&gt;lib/c.ex&lt;/code&gt; 実行時に。 &lt;code&gt;lib/c.ex&lt;/code&gt; が変更された場合、この間接的なコンパイル時間の依存性のために &lt;code&gt;lib/a.ex&lt;/code&gt; も再コンパイルする必要があるため、これはしばしば問題になります。</target>
        </trans-unit>
        <trans-unit id="2295ba054b7587077fd7b62e8108fca19b1176d6" translate="yes" xml:space="preserve">
          <source>This tuple follows the general quoted expression structure in Elixir, with the name as first argument, some keyword list as metadata as second, and the list of arguments as third. In this case, the arguments are the alias &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and the atom &lt;code&gt;:downcase&lt;/code&gt;. The second argument in a remote call is &lt;strong&gt;always&lt;/strong&gt; an atom.</source>
          <target state="translated">このタプルは、Elixirの一般的な引用式の構造に従い、名前を最初の引数、いくつかのキーワードリストをメタデータ、2番目、引数のリストを3番目にします。この場合、引数はエイリアス&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;とアトム &lt;code&gt;:downcase&lt;/code&gt; です。リモート呼び出しの2番目の引数は、&lt;strong&gt;常に&lt;/strong&gt;アトムです。</target>
        </trans-unit>
        <trans-unit id="5f412811fd9f81fa6e535feea04f5cd402448c56" translate="yes" xml:space="preserve">
          <source>This tuple follows the general quoted expression structure in Elixir, with the name as first argument, some keyword list as metadata as second, and the list of arguments as third. In this case, the arguments are the alias &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and the atom &lt;code&gt;:downcase&lt;/code&gt;. The second argument in a remote call is &lt;strong&gt;always&lt;/strong&gt; an atom.</source>
          <target state="translated">このタプルは、最初の引数として名前、2番目のメタデータとしていくつかのキーワードリスト、3番目の引数リストで、Elixirの一般的な引用式構造に従います。この場合、引数はエイリアス&lt;a href=&quot;string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;とアトム &lt;code&gt;:downcase&lt;/code&gt; です。リモート呼び出しの2番目の引数は&lt;strong&gt;常に&lt;/strong&gt;アトムです。</target>
        </trans-unit>
        <trans-unit id="7ecec438aa5cf5d56bd4c9ece80a8b63bd733893" translate="yes" xml:space="preserve">
          <source>This value will have no effect as the code was compiled to connect to &quot;db.local&quot;, which is mostly likely unavailable in the production environment.</source>
          <target state="translated">この値は、コードが &quot;db.local &quot;に接続するためにコンパイルされたものであり、本番環境では利用できない可能性が高いため、影響はありません。</target>
        </trans-unit>
        <trans-unit id="09127719cfc463768ae7ae77dbace1cb3021f292" translate="yes" xml:space="preserve">
          <source>This way if you have a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; in one time zone, you can get the same wall time in another time zone. For instance if you have 2018-08-24 10:00:00 in Copenhagen and want a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; for 2018-08-24 10:00:00 in UTC you can do:</source>
          <target state="translated">このようにして、1つのタイムゾーンに&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;がある場合、別のタイムゾーンで同じ実時間を取得できます。たとえば、コペンハーゲンに2018-08-24 10:00:00があり、UTCに2018-08-24 10:00:00の&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が必要な場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="07671b087d75abe1588362cd61ce69e954d8e6a8" translate="yes" xml:space="preserve">
          <source>This will appear to the &lt;code&gt;node&lt;/code&gt; as if the local node has crashed. This function is mainly used in the Erlang network authentication protocols. Returns &lt;code&gt;true&lt;/code&gt; if disconnection succeeds, otherwise &lt;code&gt;false&lt;/code&gt;. If the local node is not alive, the function returns &lt;code&gt;:ignored&lt;/code&gt;.</source>
          <target state="translated">これは、ローカルノードがクラッシュしたかのように &lt;code&gt;node&lt;/code&gt; 表示されます。この関数は主にErlangネットワーク認証プロトコルで使用されます。切断が成功した場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。ローカルノードが生きていない場合、関数は &lt;code&gt;:ignored&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3db39e63e0c8d60956e47f7856c88ea07f5720f2" translate="yes" xml:space="preserve">
          <source>This will cause the operating system process to exit with the status given by &lt;code&gt;integer&lt;/code&gt; while signaling all linked Erlang processes to politely shut down.</source>
          <target state="translated">これにより、オペレーティングシステムプロセスは &lt;code&gt;integer&lt;/code&gt; 指定されたステータスで終了し、リンクされているすべてのErlangプロセスに丁寧にシャットダウンするように通知します。</target>
        </trans-unit>
        <trans-unit id="932ec01a6dc27cb0bacb799b1bb13427b2604043" translate="yes" xml:space="preserve">
          <source>This will generate a file named &lt;code&gt;Elixir.Math.beam&lt;/code&gt; containing the bytecode for the defined module. If we start &lt;code&gt;iex&lt;/code&gt; again, our module definition will be available (provided that &lt;code&gt;iex&lt;/code&gt; is started in the same directory the bytecode file is in):</source>
          <target state="translated">これにより、定義されたモジュールのバイトコードを含む &lt;code&gt;Elixir.Math.beam&lt;/code&gt; という名前のファイルが生成されます。 &lt;code&gt;iex&lt;/code&gt; を再度開始すると、モジュール定義が使用可能になります（ただし、バイトコードファイルが存在するのと同じディレクトリで &lt;code&gt;iex&lt;/code&gt; が開始されている場合）。</target>
        </trans-unit>
        <trans-unit id="8486c3ebf35a38d29570441bb6cd8b2ae73dbe68" translate="yes" xml:space="preserve">
          <source>This will take priority over the primary level set, so it can be used to increase or decrease verbosity of some parts of the project.</source>
          <target state="translated">これは一次レベルのセットよりも優先されるので、プロジェクトの一部の部分の冗長性を増減させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3e50caa68b186c476cfb0083912fddaf93761ce6" translate="yes" xml:space="preserve">
          <source>This won't work as it will rather try to invoke the local function &lt;code&gt;fun&lt;/code&gt;:</source>
          <target state="translated">ローカル関数 &lt;code&gt;fun&lt;/code&gt; を呼び出そうとするため、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="988a9f0b35eb11882e7b92d107c2e4d9a3c956cd" translate="yes" xml:space="preserve">
          <source>This works because accessing anything on a &lt;code&gt;nil&lt;/code&gt; value, returns &lt;code&gt;nil&lt;/code&gt; itself:</source>
          <target state="translated">これは、 &lt;code&gt;nil&lt;/code&gt; 値で何かにアクセスすると &lt;code&gt;nil&lt;/code&gt; 自体が返されるため機能します。</target>
        </trans-unit>
        <trans-unit id="504c9c579f50eb0d399c3090d69552f011806877" translate="yes" xml:space="preserve">
          <source>This works because the &lt;code&gt;--partitions&lt;/code&gt; option automatically exports the coverage results.</source>
          <target state="translated">これが機能するのは、 &lt;code&gt;--partitions&lt;/code&gt; オプションがカバレッジ結果を自動的にエクスポートするためです。</target>
        </trans-unit>
        <trans-unit id="a9ae4006317b94bfaa968ed593d618d9dbca367b" translate="yes" xml:space="preserve">
          <source>This works:</source>
          <target state="translated">これが功を奏した。</target>
        </trans-unit>
        <trans-unit id="35b2e50e251cc0ba39a82b26384abdc7366f7bc3" translate="yes" xml:space="preserve">
          <source>This would be repetitive to write every time we need this check, so, as mentioned at the beginning of this section, we can abstract this away using a macro. Remember that defining a function that performs this check wouldn't work because we can't use custom functions in guards. Use &lt;code&gt;defguard&lt;/code&gt; and &lt;code&gt;defguardp&lt;/code&gt; to create guard macros. Here's an example:</source>
          <target state="translated">これは、このチェックが必要になるたびに繰り返し書くため、このセクションの冒頭で述べたように、マクロを使用してこれを抽象化できます。ガードでカスタム関数を使用できないため、このチェックを実行する関数を定義しても機能しないことに注意してください。使用 &lt;code&gt;defguard&lt;/code&gt; と &lt;code&gt;defguardp&lt;/code&gt; はガードマクロを作成します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="e6043c141b8f19b7be4caf31617881f52b255da5" translate="yes" xml:space="preserve">
          <source>This would be the equivalent of getting all of the file contents and packing it all into a single line in IEx and executing it.</source>
          <target state="translated">これは、ファイルの内容をすべて取得して、それを IEx で 1 行にまとめて実行することに相当します。</target>
        </trans-unit>
        <trans-unit id="6ff1d4baf9340ffd06f6ffb996d0e212cbfa8737" translate="yes" xml:space="preserve">
          <source>Those are all protocols that ship with Elixir and they are being consolidated. Because a protocol can dispatch to any data type, the protocol must check on every call if an implementation for the given type exists. This may be expensive.</source>
          <target state="translated">これらはすべてElixirに搭載されているプロトコルで、現在は統合されています。プロトコルはどのようなデータ型にもディスパッチできるので、プロトコルは呼び出しのたびに、指定された型の実装が存在するかどうかをチェックしなければなりません。これにはコストがかかるかもしれません。</target>
        </trans-unit>
        <trans-unit id="20eb63dea1b46358d700b88edabba7314d37424c" translate="yes" xml:space="preserve">
          <source>Those constructs exist only at the syntax level. All of the examples above are represented as their underlying integers in the AST.</source>
          <target state="translated">これらの構文は,構文レベルでしか存在しません.上記のすべての例は,ASTではその基礎となる整数として表現されます.</target>
        </trans-unit>
        <trans-unit id="2a23b257e1a8396bae8e624da37c5fa4a14cd69d" translate="yes" xml:space="preserve">
          <source>Those files are compiled in parallel and can automatically detect dependencies between them. Once a dependency is found, the current file stops being compiled until the dependency is resolved.</source>
          <target state="translated">これらのファイルは並行してコンパイルされ、それらの間の依存関係を自動的に検出することができます。依存関係が見つかると、依存関係が解決されるまで現在のファイルのコンパイルを停止します。</target>
        </trans-unit>
        <trans-unit id="e697466781be26b9795959553f68c3100b1e1fc6" translate="yes" xml:space="preserve">
          <source>Those functions are optimized to deal with common epochs, such as the Unix Epoch above or the Gregorian Epoch (0000-01-01 00:00:00).</source>
          <target state="translated">これらの関数は、上記のUnixエポックやグレゴリオ暦エポック(0000-01-01 00:00:00)のような一般的なエポックに対応するように最適化されています。</target>
        </trans-unit>
        <trans-unit id="c4de8ddc259e007e8ba142a7f915e7b9f301d071" translate="yes" xml:space="preserve">
          <source>Those functions are optimized to deal with common epochs, such as the Unix Epoch above or the Gregorian Epoch (0000-01-01).</source>
          <target state="translated">これらの関数は、上記のUnixエポックやグレゴリオ暦エポック(0000-01-01)のような一般的なエポックに対応するように最適化されています。</target>
        </trans-unit>
        <trans-unit id="394d2aacfa0d4e93088c549af6bbb4449e2dc409" translate="yes" xml:space="preserve">
          <source>Those functions will be explicitly marked in their docs as &quot;inlined by the compiler&quot;.</source>
          <target state="translated">これらの関数のドキュメントでは、「コンパイラによってインライン化されている」と明示的にマークされています。</target>
        </trans-unit>
        <trans-unit id="63c1f7abeafa00aa21caec35b0a45a7d4562b860" translate="yes" xml:space="preserve">
          <source>Those options are shared across all modes:</source>
          <target state="translated">これらのオプションはすべてのモードで共有されています。</target>
        </trans-unit>
        <trans-unit id="d6d6ce8d2fc67ab737881fd056832c2d5309c627" translate="yes" xml:space="preserve">
          <source>Those options can be configured in your project configuration file or globally by calling &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;IEx.configure/1&lt;/code&gt;&lt;/a&gt; from your &lt;code&gt;~/.iex.exs&lt;/code&gt; file. For example:</source>
          <target state="translated">これらのオプションは、プロジェクト構成ファイルで構成することも、 &lt;code&gt;~/.iex.exs&lt;/code&gt; ファイルから&lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;IEx.configure/1&lt;/code&gt; &lt;/a&gt;を呼び出すことでグローバルに構成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="7600e9dc66e9f49a5eef98b40a90050ef4b71a9b" translate="yes" xml:space="preserve">
          <source>Those options can be configured in your project configuration file or globally by calling &lt;a href=&quot;iex#configure/1&quot;&gt;&lt;code&gt;IEx.configure/1&lt;/code&gt;&lt;/a&gt; from your &lt;code&gt;~/.iex.exs&lt;/code&gt; file. For example:</source>
          <target state="translated">これらのオプションは、プロジェクト構成ファイルで構成するか、 &lt;code&gt;~/.iex.exs&lt;/code&gt; ファイルから&lt;a href=&quot;iex#configure/1&quot;&gt; &lt;code&gt;IEx.configure/1&lt;/code&gt; &lt;/a&gt;を呼び出してグローバルに構成できます。例えば：</target>
        </trans-unit>
        <trans-unit id="74a14ac9f70e4b2f7b26991bd0d257ac84bd9ed1" translate="yes" xml:space="preserve">
          <source>Those options mean all dependencies will be checked out to &lt;code&gt;kv_umbrella/deps&lt;/code&gt;, and they will share the same build, config and lock files. We haven&amp;rsquo;t talked about configuration yet, but from here we can build the intuition that all configuration and dependencies are shared across all projects in an umbrella, and it is not per application.</source>
          <target state="translated">これらのオプションは、すべての依存関係が &lt;code&gt;kv_umbrella/deps&lt;/code&gt; にチェックアウトされ、同じビルド、構成、およびロックファイルを共有することを意味します。構成についてはまだ説明していませんが、ここから、すべての構成と依存関係がすべてのプロジェクトで包括的に共有され、アプリケーションごとではないという直感を構築できます。</target>
        </trans-unit>
        <trans-unit id="ff34978b55b28c6dbd12a23ca68d40a4861e6f90" translate="yes" xml:space="preserve">
          <source>Those performance characteristics dictate the usage of those data structures. One very common use case for tuples is to use them to return extra information from a function. For example, &lt;code&gt;File.read/1&lt;/code&gt; is a function that can be used to read file contents. It returns a tuple:</source>
          <target state="translated">これらのパフォーマンス特性は、それらのデータ構造の使用法を決定します。タプルの非常に一般的な使用例の1つは、タプルを使用して関数から追加情報を返すことです。たとえば、 &lt;code&gt;File.read/1&lt;/code&gt; は、ファイルの内容を読み取るために使用できる関数です。タプルを返します：</target>
        </trans-unit>
        <trans-unit id="c4f3c9a9eefe9427c2dedc41fe39d6f07ee20806" translate="yes" xml:space="preserve">
          <source>Those situations are quite uncommon in practice except when interfacing with libraries that do not provide a proper API. For example, let&amp;rsquo;s imagine the &lt;code&gt;Enum&lt;/code&gt; module did not provide any API for finding a value and that we needed to find the first multiple of 13 in a list of numbers:</source>
          <target state="translated">これらの状況は、適切なAPIを提供しないライブラリとインターフェースする場合を除いて、実際には非常にまれです。たとえば、 &lt;code&gt;Enum&lt;/code&gt; モジュールが値を見つけるためのAPIを提供しておらず、数値のリストから13の最初の倍数を見つける必要があると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="aad090c769c6e03a992f9e5138ceea80922ae0f4" translate="yes" xml:space="preserve">
          <source>Throughout the guide, we have built a very simple distributed key-value store as an opportunity to explore many constructs like generic servers, supervisors, tasks, agents, applications and more. Not only that, we have written tests for the whole application, got familiar with ExUnit, and learned how to use the Mix build tool to accomplish a wide range of tasks.</source>
          <target state="translated">このガイドでは、一般的なサーバ、スーパーバイザ、タスク、エージェント、アプリケーショ ンなどの多くの構成を探求する機会として、非常にシンプルな分散型キーバリューストアを構築してきました。それだけでなく、アプリケーション全体のテストを書いたり、ExUnit に慣れ親しんだり、 Mix ビルドツールを使ってさまざまなタスクをこなす方法を学んだりしました。</target>
        </trans-unit>
        <trans-unit id="d3b0d5df9824877f9b29731225c4ba90e068aada" translate="yes" xml:space="preserve">
          <source>Throughout the tutorial, we will talk a lot about the head and tail of a list. The head is the first element of a list and the tail is the remainder of the list. They can be retrieved with the functions &lt;code&gt;hd/1&lt;/code&gt; and &lt;code&gt;tl/1&lt;/code&gt;. Let&amp;rsquo;s assign a list to a variable and retrieve its head and tail:</source>
          <target state="translated">チュートリアル全体を通して、リストの先頭と末尾について多く話します。先頭はリストの最初の要素で、末尾はリストの残りの部分です。関数 &lt;code&gt;hd/1&lt;/code&gt; と &lt;code&gt;tl/1&lt;/code&gt; を使用して取得できます。リストを変数に割り当て、その頭と尾を取得しましょう：</target>
        </trans-unit>
        <trans-unit id="090c252d7880a95a839fb25bf07e4aad923532bf" translate="yes" xml:space="preserve">
          <source>Throughout this tutorial, we have been using the notation &lt;code&gt;name/arity&lt;/code&gt; to refer to functions. It happens that this notation can actually be used to retrieve a named function as a function type. Start &lt;code&gt;iex&lt;/code&gt;, running the &lt;code&gt;math.exs&lt;/code&gt; file defined above:</source>
          <target state="translated">このチュートリアルでは、関数を参照するのに表記 &lt;code&gt;name/arity&lt;/code&gt; を使用しています。この表記法は、実際には名前付き関数を関数型として取得するために使用できます。スタートは &lt;code&gt;iex&lt;/code&gt; 実行し、 &lt;code&gt;math.exs&lt;/code&gt; 上で定義されたファイルを：</target>
        </trans-unit>
        <trans-unit id="f9f4b0f30b3f06e61b21febef173645d29891305" translate="yes" xml:space="preserve">
          <source>Throws</source>
          <target state="translated">Throws</target>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="4dc17499006fce61c64e8dfd0c8c4c038df992f0" translate="yes" xml:space="preserve">
          <source>Time representations with reduced accuracy are not supported.</source>
          <target state="translated">精度を落とした時間表現はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c9e59bfbdd7898eae663b5796d19938441eff8ed" translate="yes" xml:space="preserve">
          <source>Time units in its plural form, such as: &lt;code&gt;:seconds&lt;/code&gt;, &lt;code&gt;:milliseconds&lt;/code&gt;, and the like</source>
          <target state="translated">次のようなその複数形で時間単位、 &lt;code&gt;:seconds&lt;/code&gt; 、 &lt;code&gt;:milliseconds&lt;/code&gt; 、など</target>
        </trans-unit>
        <trans-unit id="adb40cd5eccc115002264851e51de0dcee9fe00b" translate="yes" xml:space="preserve">
          <source>Time zone abbreviation (empty string if naive)</source>
          <target state="translated">タイムゾーンの省略形(素朴な場合は空文字列</target>
        </trans-unit>
        <trans-unit id="9452a856dc424a6f92632b47f9b6540703986d72" translate="yes" xml:space="preserve">
          <source>Time zone database</source>
          <target state="translated">タイムゾーンデータベース</target>
        </trans-unit>
        <trans-unit id="dad962fdacc68e64400f9f34e93f5814f862947c" translate="yes" xml:space="preserve">
          <source>Time zone offset may be included in the string but they will be simply discarded as such information is not included in naive date times.</source>
          <target state="translated">タイムゾーンオフセットは文字列に含まれているかもしれませんが、そのような情報はナイーブな日付時刻には含まれていないので、単に破棄されます。</target>
        </trans-unit>
        <trans-unit id="55ded65dce8b65205b0b4f7c820bffa416a68f37" translate="yes" xml:space="preserve">
          <source>Time zone offset may be included in the string but they will be simply discarded as such information is not included in times.</source>
          <target state="translated">タイムゾーンオフセットは文字列に含まれているかもしれませんが、そのような情報は時間には含まれていないので、単に破棄されます。</target>
        </trans-unit>
        <trans-unit id="f905b9189d8d13ac7a8491eceeb00e40cf5247c7" translate="yes" xml:space="preserve">
          <source>Time zone period for a point in time in UTC for a specific time zone.</source>
          <target state="translated">特定の時間帯のUTCでの時点のタイムゾーン期間。</target>
        </trans-unit>
        <trans-unit id="4ca2fde51c11eb446c9f4471c5d166e6cd917c52" translate="yes" xml:space="preserve">
          <source>Timeout is set to 0, so there is no waiting time.</source>
          <target state="translated">タイムアウトは0に設定されているので、待ち時間はありません。</target>
        </trans-unit>
        <trans-unit id="27a4f2c5a6aa7d957af2668e0ec53e32944aba26" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
          <target state="translated">Timeouts</target>
        </trans-unit>
        <trans-unit id="25e1a3000b3069b54f62fa349e25e048a6ebb374" translate="yes" xml:space="preserve">
          <source>Tmp Dir</source>
          <target state="translated">tmp Dir</target>
        </trans-unit>
        <trans-unit id="4b72f11edef4c0745d904f701fa487d703c27edf" translate="yes" xml:space="preserve">
          <source>To access atom keys, one may also use the &lt;code&gt;map.key&lt;/code&gt; notation. Note that &lt;code&gt;map.key&lt;/code&gt; will raise a &lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; if the &lt;code&gt;map&lt;/code&gt; doesn't contain the key &lt;code&gt;:key&lt;/code&gt;, compared to &lt;code&gt;map[:key]&lt;/code&gt;, that would return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map.key&lt;/code&gt; アクセスするには、map.key表記を使用することもできます。注意 &lt;code&gt;map.key&lt;/code&gt; が発生します&lt;a href=&quot;https://hexdocs.pm/elixir/KeyError.html&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 例外を&lt;/a&gt;場合 &lt;code&gt;map&lt;/code&gt; キーが含まれていません &lt;code&gt;:key&lt;/code&gt; 、と比較 &lt;code&gt;map[:key]&lt;/code&gt; 戻ってくる、 &lt;code&gt;nil&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="f1b3091799895b01e6aa24802a8c476d47d3c391" translate="yes" xml:space="preserve">
          <source>To act according to the Unicode Standard, many functions in this module run in linear time, as they need to traverse the whole string considering the proper Unicode code points.</source>
          <target state="translated">Unicode標準に従って動作するために、このモジュールの多くの関数は、適切なUnicodeコードポイントを考慮して文字列全体を横断する必要があるため、線形時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="ce008b888ee0241e97659cba8355716eba5bef7f" translate="yes" xml:space="preserve">
          <source>To add a new key:</source>
          <target state="translated">新しいキーを追加するには</target>
        </trans-unit>
        <trans-unit id="916b5fa900a6f384af0597e7d8f402a05c3c1c1f" translate="yes" xml:space="preserve">
          <source>To aid in the correct implementation of behaviours, you may optionally declare &lt;code&gt;@impl&lt;/code&gt; for implemented callbacks of a behaviour. This makes callbacks explicit and can help you to catch errors in your code. The compiler will warn in these cases:</source>
          <target state="translated">動作の正しい実装を支援するために、実装された動作のコールバックに対して &lt;code&gt;@impl&lt;/code&gt; をオプションで宣言できます。これにより、コールバックが明示的になり、コード内のエラーをキャッチするのに役立ちます。コンパイラーは次の場合に警告します。</target>
        </trans-unit>
        <trans-unit id="688d49bd28e977f5619e4299defc87b3580ff416" translate="yes" xml:space="preserve">
          <source>To assert exits from linked processes started from the test, trap exits with &lt;a href=&quot;https://hexdocs.pm/elixir/Process.html#flag/2&quot;&gt;&lt;code&gt;Process.flag/2&lt;/code&gt;&lt;/a&gt; and assert the exit message with &lt;a href=&quot;#assert_received/2&quot;&gt;&lt;code&gt;assert_received/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストから開始されたリンクされたプロセスからの出口をアサートするには、トラップが&lt;a href=&quot;https://hexdocs.pm/elixir/Process.html#flag/2&quot;&gt; &lt;code&gt;Process.flag/2&lt;/code&gt; で&lt;/a&gt;終了し、出口メッセージを&lt;a href=&quot;#assert_received/2&quot;&gt; &lt;code&gt;assert_received/2&lt;/code&gt; &lt;/a&gt;でアサートします。</target>
        </trans-unit>
        <trans-unit id="60dda8ca6a65152c1c53235c6221b24d765a7234" translate="yes" xml:space="preserve">
          <source>To avoid printing log messages during tests, ExUnit provides a neat feature called &lt;code&gt;:capture_log&lt;/code&gt;. By setting &lt;code&gt;@tag :capture_log&lt;/code&gt; before each test or &lt;code&gt;@moduletag :capture_log&lt;/code&gt; for the whole test case, ExUnit will automatically capture anything that is logged while the test runs. In case our test fails, the captured logs will be printed alongside the ExUnit report.</source>
          <target state="translated">テスト中にログメッセージが出力されないようにするため、ExUnitには &lt;code&gt;:capture_log&lt;/code&gt; という便利な機能が用意されています。各テストの前に &lt;code&gt;@tag :capture_log&lt;/code&gt; 設定するか、テストケース全体に対して &lt;code&gt;@moduletag :capture_log&lt;/code&gt; を設定すると、ExUnitはテストの実行中にログに記録されたものをすべて自動的にキャプチャします。テストが失敗した場合、キャプチャされたログはExUnitレポートと共に印刷されます。</target>
        </trans-unit>
        <trans-unit id="f974b60e8a8ca0fdff2c240dbeb8be96e5b7e1d4" translate="yes" xml:space="preserve">
          <source>To avoid that late answers (after the timeout) pollute the caller's message queue, a middleman process is used to do the actual calls. Late answers will then be discarded when they arrive to a terminated process.</source>
          <target state="translated">遅い応答(タイムアウト後)が発呼側のメッセージキューを汚染するのを避けるために、実際の呼び出しを行うためにミドルマンプロセスが使用されます。遅刻した応答は、終了したプロセスに到着したときに破棄されます。</target>
        </trans-unit>
        <trans-unit id="915324fb4db3a9cfde09b72fdeb57083f3b6ada4" translate="yes" xml:space="preserve">
          <source>To be converted to a string, a list must either be empty or only contain the following elements:</source>
          <target state="translated">文字列に変換するには、リストが空であるか、以下の要素のみを含む必要があります。</target>
        </trans-unit>
        <trans-unit id="e45579800e96aeff05376f3bbc05633e2fce0d09" translate="yes" xml:space="preserve">
          <source>To be precise, &lt;code&gt;nil&lt;/code&gt; is returned whenever a &lt;code&gt;pid&lt;/code&gt; or &lt;code&gt;{name, node}&lt;/code&gt; cannot be returned. Note there is no guarantee the returned &lt;code&gt;pid&lt;/code&gt; or &lt;code&gt;{name, node}&lt;/code&gt; is alive, as a process could terminate immediately after it is looked up.</source>
          <target state="translated">正確には、 &lt;code&gt;pid&lt;/code&gt; または &lt;code&gt;{name, node}&lt;/code&gt; を返すことができない場合は常に &lt;code&gt;nil&lt;/code&gt; が返されます。プロセスはルックアップされた直後に終了する可能性があるため、返された &lt;code&gt;pid&lt;/code&gt; または &lt;code&gt;{name, node}&lt;/code&gt; が生きているという保証はないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f3b6088332075b01c651b352f9aa53d48a4e4c87" translate="yes" xml:space="preserve">
          <source>To capture a definition within the current module, you can skip the module prefix, such as &lt;code&gt;&amp;amp;my_fun/2&lt;/code&gt;. In those cases, the captured function can be public (&lt;code&gt;def&lt;/code&gt;) or private (&lt;code&gt;defp&lt;/code&gt;).</source>
          <target state="translated">現在のモジュール内の定義をキャプチャするには、 &lt;code&gt;&amp;amp;my_fun/2&lt;/code&gt; などのモジュールプレフィックスをスキップできます。そのような場合、キャプチャされた関数はpublic（ &lt;code&gt;def&lt;/code&gt; ）またはprivate（ &lt;code&gt;defp&lt;/code&gt; ）になります。</target>
        </trans-unit>
        <trans-unit id="fc7a4b67b1cf2b13d1bec5831057b11f1a8ac991" translate="yes" xml:space="preserve">
          <source>To check the Unicode version of your current Elixir installation, run &lt;code&gt;String.Unicode.version()&lt;/code&gt;.</source>
          <target state="translated">現在のElixirインストールのUnicodeバージョンを確認するには、 &lt;code&gt;String.Unicode.version()&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="32741725588800279ae172b79b44e5964f47f63a" translate="yes" xml:space="preserve">
          <source>To convert maps into keywords and vice-versa, use the &lt;code&gt;new&lt;/code&gt; function in the respective modules.</source>
          <target state="translated">マップをキーワードに、またはその逆に変換するには、それぞれのモジュールで &lt;code&gt;new&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="90fe397a356898d27888dc41d52d7983ef57d2b2" translate="yes" xml:space="preserve">
          <source>To create a custom sigil, define a function with the name &lt;code&gt;sigil_{identifier}&lt;/code&gt; that takes two arguments. The first argument will be the string, the second will be a charlist containing any modifiers. If the sigil is lower case (such as &lt;code&gt;sigil_x&lt;/code&gt;) then the string argument will allow interpolation. If the sigil is upper case (such as &lt;code&gt;sigil_X&lt;/code&gt;) then the string will not be interpolated.</source>
          <target state="translated">カスタム &lt;code&gt;sigil_{identifier}&lt;/code&gt; を作成するには、2つの引数を取るsigil_ {identifier}という名前の関数を定義します。最初の引数は文字列、2番目の引数は修飾子を含む文字リストです。sigilが小文字の場合（ &lt;code&gt;sigil_x&lt;/code&gt; など）、文字列引数は補間を許可します。sigilが大文字の場合（ &lt;code&gt;sigil_X&lt;/code&gt; など）、文字列は補間されません。</target>
        </trans-unit>
        <trans-unit id="bb585bff51bf0b0752f3b9643ada939cb21bacf2" translate="yes" xml:space="preserve">
          <source>To define a behaviour module, it's enough to define one or more callbacks in that module. To define callbacks, the &lt;code&gt;@callback&lt;/code&gt; and &lt;code&gt;@macrocallback&lt;/code&gt; module attributes can be used (for function callbacks and macro callbacks respectively).</source>
          <target state="translated">動作モジュールを定義するには、そのモジュールで1つ以上のコールバックを定義するだけで十分です。コールバックを定義するには、 &lt;code&gt;@callback&lt;/code&gt; および &lt;code&gt;@macrocallback&lt;/code&gt; モジュール属性を使用できます（それぞれ関数コールバックおよびマクロコールバックに対して）。</target>
        </trans-unit>
        <trans-unit id="748c36f2db63d3a03dc4e6fadef52aac3b262d3c" translate="yes" xml:space="preserve">
          <source>To define a struct, a developer must define both &lt;code&gt;__struct__/0&lt;/code&gt; and &lt;code&gt;__struct__/1&lt;/code&gt; functions. &lt;a href=&quot;#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; is a convenience macro which defines such functions with some conveniences.</source>
          <target state="translated">構造体を定義するには、開発者は &lt;code&gt;__struct__/0&lt;/code&gt; 関数と &lt;code&gt;__struct__/1&lt;/code&gt; 関数の両方を定義する必要があります。&lt;a href=&quot;#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;は、いくつかの便利な機能を定義する便利なマクロです。</target>
        </trans-unit>
        <trans-unit id="5e46e68069cc59aab3678e72e8671077b9e1f5c1" translate="yes" xml:space="preserve">
          <source>To define a struct, the &lt;code&gt;defstruct&lt;/code&gt; construct is used:</source>
          <target state="translated">構造体を定義するには、 &lt;code&gt;defstruct&lt;/code&gt; 構造体を使用します。</target>
        </trans-unit>
        <trans-unit id="15c7a0bd6bb05c83760ad9659631936c1f603b9d" translate="yes" xml:space="preserve">
          <source>To define an operator, you can use the usual &lt;code&gt;def*&lt;/code&gt; constructs (&lt;code&gt;def&lt;/code&gt;, &lt;code&gt;defp&lt;/code&gt;, &lt;code&gt;defmacro&lt;/code&gt;, and so on) but with a syntax similar to how the operator is used:</source>
          <target state="translated">演算子を定義するには、通常の &lt;code&gt;def*&lt;/code&gt; 構文（ &lt;code&gt;def&lt;/code&gt; 、 &lt;code&gt;defp&lt;/code&gt; 、 &lt;code&gt;defmacro&lt;/code&gt; など）を使用できますが、構文は演算子の使用方法と似ています。</target>
        </trans-unit>
        <trans-unit id="97bc558ded88de997eb4b20c7b44aa7a1d127e07" translate="yes" xml:space="preserve">
          <source>To deploy straight from a host to a separate target without cross-compilation, the following must be the same between the host and the target:</source>
          <target state="translated">クロスコンパイルせずにホストから別のターゲットに直接デプロイするには、ホストとターゲットの間で以下が同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="b1416bbc268b001f44ff03e41dd657568db375a9" translate="yes" xml:space="preserve">
          <source>To determine how many seconds the &lt;code&gt;:native&lt;/code&gt; unit represents in your current runtime, you can can call this function to convert 1 second to the &lt;code&gt;:native&lt;/code&gt; time unit: &lt;code&gt;System.convert_time_unit(1, :second, :native)&lt;/code&gt;.</source>
          <target state="translated">現在のランタイムで &lt;code&gt;:native&lt;/code&gt; 単位が表す秒数を決定するには、この関数を呼び出して、1秒を &lt;code&gt;:native&lt;/code&gt; 時間単位に変換できます： &lt;code&gt;System.convert_time_unit(1, :second, :native)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb35bc4715abc885d6ad16dcca4ef00591e6ce0e" translate="yes" xml:space="preserve">
          <source>To differentiate the program behavior depending on the environment, it is recommended to use application environment through &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#get_env/3&quot;&gt;&lt;code&gt;Application.get_env/3&lt;/code&gt;&lt;/a&gt;. Proper configuration can be set in config files, often per-environment (see the &lt;a href=&quot;https://hexdocs.pm/elixir/Config.html&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module for more information).</source>
          <target state="translated">環境に応じてプログラムの動作を区別するには、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#get_env/3&quot;&gt; &lt;code&gt;Application.get_env/3&lt;/code&gt; を&lt;/a&gt;介してアプリケーション環境を使用することをお勧めします。適切な構成は、多くの場合環境ごとに構成ファイルで設定できます（詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Config.html&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt;モジュールを参照してください）。</target>
        </trans-unit>
        <trans-unit id="ade0297c81614f897441b308bffb7079cbf4b959" translate="yes" xml:space="preserve">
          <source>To discover a module's public functions or other modules, type the module name followed by a dot, then press tab to trigger autocomplete. For example:</source>
          <target state="translated">モジュールの公開関数や他のモジュールを検出するには、モジュール名の後にドットを入力し、タブを押してオートコンプリートを起動します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0f350e9537ca99b19347d61d7b15f4ba1b815fe4" translate="yes" xml:space="preserve">
          <source>To display &quot;What is your name?&quot; as a prompt and await user input:</source>
          <target state="translated">お名前は何ですか」をプロンプトとして表示し、ユーザーの入力を待ちます。</target>
        </trans-unit>
        <trans-unit id="9392c58481cde14e24d585ca66473875cbcb0d13" translate="yes" xml:space="preserve">
          <source>To drive the point home, imagine you want to validate a certain attribute only if a given condition is met. We could easily achieve it with the first solution, by manipulating the data structure accordingly, or with the second solution by using conditionals (if/else) before invoking the function. However, it is impossible to do so with the macros approach unless its DSL is augmented.</source>
          <target state="translated">要点を説明するために、ある条件が満たされた場合にのみ特定の属性を検証したいとします。最初の方法では、それに応じてデータ構造を操作することで簡単に実現できますし、2番目の方法では、関数を呼び出す前に条件式(if/else)を使用することで簡単に実現できます。しかし、マクロのDSLが拡張されていない限り、これは不可能です。</target>
        </trans-unit>
        <trans-unit id="691c11ca8ab2ebe304045dcb2e0736f03a5a8a17" translate="yes" xml:space="preserve">
          <source>To dynamically supervise children, see &lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">子を動的に監視するには、&lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0f7191bed803a12f545045cca3f35df2867866ca" translate="yes" xml:space="preserve">
          <source>To enable runtime configuration in your release, all you need to do is to create a file named &lt;code&gt;config/runtime.exs&lt;/code&gt;:</source>
          <target state="translated">リリースでランタイム構成を有効にするには、 &lt;code&gt;config/runtime.exs&lt;/code&gt; という名前のファイルを作成するだけです。</target>
        </trans-unit>
        <trans-unit id="f2fa53a2359799d77d9a3c808a0fe3f75458448c" translate="yes" xml:space="preserve">
          <source>To escape an EEx expression in EEx use &lt;code&gt;&amp;lt;%% content %&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="translated">EExでEEx式をエスケープするには、 &lt;code&gt;&amp;lt;%% content %&amp;gt;&lt;/code&gt; 使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="842501ce37fce5610a16f26dd98d6da220a3b08e" translate="yes" xml:space="preserve">
          <source>To exit a breakpoint, the developer can either invoke &lt;code&gt;continue()&lt;/code&gt;, which will block the shell until the next breakpoint is found or the process terminates, or invoke &lt;code&gt;respawn()&lt;/code&gt;, which starts a new IEx shell, freeing up the pried one.</source>
          <target state="translated">ブレークポイントを終了するには、開発者は、次のブレークポイントが見つかるかプロセスが終了するまでシェルをブロックする &lt;code&gt;continue()&lt;/code&gt; を呼び出すか、または新しいIExシェルを開始して優先されたシェルを解放するrespawn &lt;code&gt;respawn()&lt;/code&gt; 呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="77caae61840ab6ad348e3ba1e35de2b7d3be118d" translate="yes" xml:space="preserve">
          <source>To fix the failure we need to make &lt;code&gt;KV.Registry.create/2&lt;/code&gt; synchronous by using &lt;code&gt;call/2&lt;/code&gt; rather than &lt;code&gt;cast/2&lt;/code&gt;. This will guarantee that the client will only continue after changes have been made to the table. Let&amp;rsquo;s back to &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; and change the function and its callback as follows:</source>
          <target state="translated">失敗を修正するには、 &lt;code&gt;cast/2&lt;/code&gt; ではなく &lt;code&gt;call/2&lt;/code&gt; を使用して、 &lt;code&gt;KV.Registry.create/2&lt;/code&gt; を同期させる必要があります。これにより、テーブルに変更が加えられた後にのみクライアントが続行することが保証されます。 &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; 戻り、関数とそのコールバックを次のように変更しましょう。</target>
        </trans-unit>
        <trans-unit id="a3c693fb70a5169722986ac65b4c67dfb305f68f" translate="yes" xml:space="preserve">
          <source>To fix the failure we need to make &lt;code&gt;KV.Registry.create/2&lt;/code&gt; synchronous by using &lt;code&gt;call/2&lt;/code&gt; rather than &lt;code&gt;cast/2&lt;/code&gt;. This will guarantee that the client will only continue after changes have been made to the table. Let&amp;rsquo;s change the function and its callback as follows:</source>
          <target state="translated">失敗を修正するには、 &lt;code&gt;cast/2&lt;/code&gt; ではなく &lt;code&gt;call/2&lt;/code&gt; を使用して &lt;code&gt;KV.Registry.create/2&lt;/code&gt; を同期させる必要があります。これにより、テーブルが変更された後にのみクライアントが続行することが保証されます。関数とそのコールバックを次のように変更してみましょう。</target>
        </trans-unit>
        <trans-unit id="248a8954323fae01b279eb29892eb672151e34bd" translate="yes" xml:space="preserve">
          <source>To generate an app with a supervision tree and an application callback:</source>
          <target state="translated">監督ツリーとアプリケーションコールバックを持つアプリを生成する。</target>
        </trans-unit>
        <trans-unit id="57b84e64c358c14778edadcae30a553429d81661" translate="yes" xml:space="preserve">
          <source>To generate an umbrella application with sub applications:</source>
          <target state="translated">サブアプリケーションを含むアンブレラアプリケーションを生成する。</target>
        </trans-unit>
        <trans-unit id="1859a67f28b2dad5db51af942e1a02086e453015" translate="yes" xml:space="preserve">
          <source>To get individual options, see &lt;a href=&quot;#get_compiler_option/1&quot;&gt;&lt;code&gt;get_compiler_option/1&lt;/code&gt;&lt;/a&gt;. For a description of all options, see &lt;a href=&quot;#put_compiler_option/2&quot;&gt;&lt;code&gt;put_compiler_option/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">個々のオプションを取得するには、&lt;a href=&quot;#get_compiler_option/1&quot;&gt; &lt;code&gt;get_compiler_option/1&lt;/code&gt; を&lt;/a&gt;参照してください。すべてのオプションの説明については、&lt;a href=&quot;#put_compiler_option/2&quot;&gt; &lt;code&gt;put_compiler_option/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d939e666619b837bbfc72a19c0edb64540f7b914" translate="yes" xml:space="preserve">
          <source>To give the formatter a try, change a file in the &lt;code&gt;lib&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt; directories to include extra spaces or extra newlines, such as &lt;code&gt;def  hello  do&lt;/code&gt;, and then run &lt;code&gt;mix format&lt;/code&gt;.</source>
          <target state="translated">フォーマッタを試してみるには、 &lt;code&gt;lib&lt;/code&gt; または &lt;code&gt;test&lt;/code&gt; ディレクトリのファイルを変更して、余分なスペースや余分な改行（ &lt;code&gt;def hello do&lt;/code&gt; など）を含めてから、 &lt;code&gt;mix format&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="a15120dae8d76afe9639289d60fb9093810c397a" translate="yes" xml:space="preserve">
          <source>To help developers remember the differences between call, cast and info, the supported return values and more, we have a tiny &lt;a href=&quot;https://elixir-lang.org/cheatsheets/gen-server.pdf&quot;&gt;GenServer cheat sheet&lt;/a&gt;.</source>
          <target state="translated">開発者が呼び出し、キャスト、情報の違い、サポートされている戻り値などを覚えやすくするために、小さな&lt;a href=&quot;https://elixir-lang.org/cheatsheets/gen-server.pdf&quot;&gt;GenServerチートシートがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="555a879eb773cd3d2dff7da0f2a52cb90ca0b876" translate="yes" xml:space="preserve">
          <source>To implement the &lt;code&gt;Application&lt;/code&gt; behaviour, we have to &lt;code&gt;use Application&lt;/code&gt; and define a &lt;code&gt;start/2&lt;/code&gt; function. The goal of &lt;code&gt;start/2&lt;/code&gt; is to start a supervisor, which will then start any child services or execute any other code our application may need. Let&amp;rsquo;s use this opportunity to start the &lt;code&gt;KV.Supervisor&lt;/code&gt; we have implemented earlier in this chapter.</source>
          <target state="translated">&lt;code&gt;Application&lt;/code&gt; 動作を実装するには、アプリケーションを &lt;code&gt;use Application&lt;/code&gt; 、 &lt;code&gt;start/2&lt;/code&gt; 関数を定義する必要があります。 &lt;code&gt;start/2&lt;/code&gt; の目標は、スーパーバイザーを開始することです。スーパーバイザーは、子サービスを開始したり、アプリケーションに必要なその他のコードを実行したりします。この機会を利用して、この章の前半で実装した &lt;code&gt;KV.Supervisor&lt;/code&gt; を開始しましょう。</target>
        </trans-unit>
        <trans-unit id="4febdf906d953be4fd2821fd877395877b196fe9" translate="yes" xml:space="preserve">
          <source>To learn more about Elixir's AST and how to build them programmatically, see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;quote/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ElixirのASTとそれらをプログラムで構築する方法の詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt; &lt;code&gt;quote/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee64280d1fb25258cd437b5d0c77efe55acbd252" translate="yes" xml:space="preserve">
          <source>To learn more about IEx as a whole, type &lt;code&gt;h(IEx)&lt;/code&gt;.</source>
          <target state="translated">IEx全体の詳細については、 &lt;code&gt;h(IEx)&lt;/code&gt; と入力してください。</target>
        </trans-unit>
        <trans-unit id="699ef2c862a7af01ce3ea7b060fc68320ed60961" translate="yes" xml:space="preserve">
          <source>To learn more about floating-point arithmetic visit:</source>
          <target state="translated">浮動小数点演算の詳細については、こちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="101e8672c7193137af23129687e2ed29b0030ea4" translate="yes" xml:space="preserve">
          <source>To learn more about specific optimizations and performance considerations, check out &lt;a href=&quot;http://www.erlang.org/doc/efficiency_guide/binaryhandling.html&quot;&gt;Erlang's Efficiency Guide on handling binaries&lt;/a&gt;.</source>
          <target state="translated">特定の最適化とパフォーマンスの考慮事項の詳細については、&lt;a href=&quot;http://www.erlang.org/doc/efficiency_guide/binaryhandling.html&quot;&gt;バイナリの処理に関するErlangの効率ガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4a32f6bfbd0a46a1fe8412990dabfb9a92464fbb" translate="yes" xml:space="preserve">
          <source>To list all IEx helpers available, which is effectively all exports (functions and macros) in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IEx.Helpers&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">利用可能なすべてのIExヘルパーを一覧表示するには、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IEx.Helpers&lt;/code&gt; &lt;/a&gt;モジュールの実質的にすべてのエクスポート（関数とマクロ）です。</target>
        </trans-unit>
        <trans-unit id="93e48689655deecbe42b747b91efa43959aec278" translate="yes" xml:space="preserve">
          <source>To list all available keys showing the keys themselves:</source>
          <target state="translated">利用可能なすべてのキーを一覧表示するには、キー自体を表示します。</target>
        </trans-unit>
        <trans-unit id="77bfde2bf5fe079fb8473d1b45bac69e05a6486e" translate="yes" xml:space="preserve">
          <source>To list all available keys:</source>
          <target state="translated">利用可能なすべてのキーを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="97e7dd0dfd16f5649cf89b74d291b7e7a795f96b" translate="yes" xml:space="preserve">
          <source>To profile the code, you can use syntax similar to the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt; task:</source>
          <target state="translated">コードのプロファイリングには、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt;タスクと同様の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="34f6e4a2bb843898b6a1a63430d9ad523188262e" translate="yes" xml:space="preserve">
          <source>To profile the code, you can use syntax similar to the &lt;a href=&quot;mix.tasks.run&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt; task:</source>
          <target state="translated">コードのプロファイルを作成するには、&lt;a href=&quot;mix.tasks.run&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt;タスクと同様の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="b90e482b9b75d2e1ab9c0ff8e4d1e0e5aecc5f06" translate="yes" xml:space="preserve">
          <source>To quote &lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html&quot;&gt;the official guide on Macros&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://elixir-lang.org/getting-started/meta/macros.html&quot;&gt;マクロの公式ガイド&lt;/a&gt;を引用するには：</target>
        </trans-unit>
        <trans-unit id="e5139cf2a16e17732e5bda38b6b67324152e536b" translate="yes" xml:space="preserve">
          <source>To reply after returning from the callback because the response is not yet available.</source>
          <target state="translated">コールバックから返ってきた後に、レスポンスがまだないので返信すること。</target>
        </trans-unit>
        <trans-unit id="716f6562922e06c13563ae83ce61a300e8352363" translate="yes" xml:space="preserve">
          <source>To reply before returning from the callback because the response is known before calling a slow function.</source>
          <target state="translated">遅い関数を呼び出す前にレスポンスがわかっているので、コールバックから戻る前に返信すること。</target>
        </trans-unit>
        <trans-unit id="e57aadf0943d8ee32b1daf18536595cdf4b85435" translate="yes" xml:space="preserve">
          <source>To reply from another process, such as a task.</source>
          <target state="translated">タスクなど別のプロセスから返信すること。</target>
        </trans-unit>
        <trans-unit id="5ca8eab4577e8b135c578b17a24c88f164743db6" translate="yes" xml:space="preserve">
          <source>To retrieve all dates in descending order, you can wrap the module in a tuple with &lt;code&gt;:asc&lt;/code&gt; or &lt;code&gt;:desc&lt;/code&gt; as first element:</source>
          <target state="translated">すべての日付を降順で取得するには、最初の要素として &lt;code&gt;:asc&lt;/code&gt; または &lt;code&gt;:desc&lt;/code&gt; を使用してモジュールをタプルでラップします。</target>
        </trans-unit>
        <trans-unit id="07b5421b45e250d1129a17a5d3f7268bca4e4081" translate="yes" xml:space="preserve">
          <source>To retrieve code points in their natural integer representation, see &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt;. For details about code points and graphemes, see the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; module documentation.</source>
          <target state="translated">自然な整数表現でコードポイントを取得するには、&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; を&lt;/a&gt;参照してください。コードポイントと書記素の詳細については、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="aa09c7d0058c95fdae6640e10ab83ae7e2c7d29c" translate="yes" xml:space="preserve">
          <source>To retrieve the stacktrace of the current process, use &lt;code&gt;Process.info(self(), :current_stacktrace)&lt;/code&gt; instead.</source>
          <target state="translated">現在のプロセスのスタックトレースを取得するには、代わりに &lt;code&gt;Process.info(self(), :current_stacktrace)&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="c6478efdf0d6ae4efc7373afc872fb60986f2bb5" translate="yes" xml:space="preserve">
          <source>To run doctests include them in an ExUnit case with a &lt;code&gt;doctest&lt;/code&gt; macro:</source>
          <target state="translated">doctestを実行するには、 &lt;code&gt;doctest&lt;/code&gt; マクロを使用してExUnitケースにそれらを含めます。</target>
        </trans-unit>
        <trans-unit id="a9be81917be7c5a65d20c56cce5430337e7437a2" translate="yes" xml:space="preserve">
          <source>To run our doctests, we&amp;rsquo;ll create a file at &lt;code&gt;test/kv_server/command_test.exs&lt;/code&gt; and call &lt;code&gt;doctest KVServer.Command&lt;/code&gt; in the test case:</source>
          <target state="translated">doctestを実行するには、 &lt;code&gt;test/kv_server/command_test.exs&lt;/code&gt; にファイルを作成し、テストケースで &lt;code&gt;doctest KVServer.Command&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="c550ca70984ac8e2f646e72f7f0c9faa1dd704b7" translate="yes" xml:space="preserve">
          <source>To run the tests above, run the file using &lt;code&gt;elixir&lt;/code&gt; from the command line. Assuming you named the file &lt;code&gt;assertion_test.exs&lt;/code&gt;, you can run it as:</source>
          <target state="translated">上記のテストを実行するには、コマンドラインから &lt;code&gt;elixir&lt;/code&gt; を使用してファイルを実行します。ファイルに &lt;code&gt;assertion_test.exs&lt;/code&gt; という名前を付けたとすると、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="e079c912f8f4dac650321807cd475663a5b52c69" translate="yes" xml:space="preserve">
          <source>To see an example of using module attributes as for storage, look no further than Elixir&amp;rsquo;s unit test framework called &lt;a href=&quot;https://hexdocs.pm/ex_unit/&quot;&gt;ExUnit&lt;/a&gt;. ExUnit uses module attributes for multiple different purposes:</source>
          <target state="translated">ストレージに関してモジュール属性を使用する例を見るには、&lt;a href=&quot;https://hexdocs.pm/ex_unit/&quot;&gt;ExUnit&lt;/a&gt;と呼ばれるElixirのユニットテストフレームワークをご覧ください。ExUnitは、複数の異なる目的でモジュール属性を使用します。</target>
        </trans-unit>
        <trans-unit id="f88b35a6396b6373f09d679595715d5f894666f2" translate="yes" xml:space="preserve">
          <source>To see documentation for each specific compiler, you must invoke &lt;code&gt;help&lt;/code&gt; directly for the compiler command:</source>
          <target state="translated">特定のコンパイラごとのドキュメントを表示するには、コンパイラコマンドの &lt;code&gt;help&lt;/code&gt; 直接呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="7fcc2e5f60178276dfc7759916301cae9d1d546f" translate="yes" xml:space="preserve">
          <source>To show all entries, configure the limit to &lt;code&gt;:infinity&lt;/code&gt;:</source>
          <target state="translated">すべてのエントリを表示するには、制限を &lt;code&gt;:infinity&lt;/code&gt; に構成します。</target>
        </trans-unit>
        <trans-unit id="6d46460a95ec8fd91d8032b072da8de876729d16" translate="yes" xml:space="preserve">
          <source>To show how the protocol can be implemented, we can again look at the implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;. In this implementation &quot;collecting&quot; elements simply means inserting them in the set through &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html#put/2&quot;&gt;&lt;code&gt;MapSet.put/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プロトコルを実装する方法を示すために、&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;の実装をもう一度見てみましょう。この実装では、要素を「収集する」とは、&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html#put/2&quot;&gt; &lt;code&gt;MapSet.put/2&lt;/code&gt; を&lt;/a&gt;介して要素をセットに挿入することを意味します。</target>
        </trans-unit>
        <trans-unit id="b50964644227148ad32fc703cd3d520d71c70f6b" translate="yes" xml:space="preserve">
          <source>To show how the protocol can be implemented, we can take again a look at the implementation for &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;. In this implementation &quot;collecting&quot; elements simply means inserting them in the set through &lt;a href=&quot;mapset#put/2&quot;&gt;&lt;code&gt;MapSet.put/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プロトコルの実装方法を示すために、&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;の実装をもう一度見てみましょう。この実装では、要素を「収集」するということは、単に&lt;a href=&quot;mapset#put/2&quot;&gt; &lt;code&gt;MapSet.put/2&lt;/code&gt; &lt;/a&gt;を通じて要素をセットに挿入することを意味します。</target>
        </trans-unit>
        <trans-unit id="987c795e4ee5f17f665e41830d152e223b2b4556" translate="yes" xml:space="preserve">
          <source>To show how to manually use the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol, let's play with its implementation for &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;プロトコルを手動で使用する方法を示すために、&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; の&lt;/a&gt;実装を試してみましょう。</target>
        </trans-unit>
        <trans-unit id="6baefde74a3b1948259d37f28d66b2da3cc95503" translate="yes" xml:space="preserve">
          <source>To show how to manually use the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol, let's play with its implementation for &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;プロトコルを手動で使用する方法を示すために、&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; の&lt;/a&gt;実装を試してみましょう。</target>
        </trans-unit>
        <trans-unit id="5683b1948dc754efdfed9ba11dc087a421c0449e" translate="yes" xml:space="preserve">
          <source>To specify that a module implements a given behaviour, the &lt;code&gt;@behaviour&lt;/code&gt; attribute must be used:</source>
          <target state="translated">モジュールが特定の動作を実装することを指定するには、 &lt;code&gt;@behaviour&lt;/code&gt; 属性を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e0fee1e5263eb41b6e360a95cfaf76805e6190b5" translate="yes" xml:space="preserve">
          <source>To start the supervisor, the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback will be invoked in the given &lt;code&gt;module&lt;/code&gt;, with &lt;code&gt;arg&lt;/code&gt; as its argument. The &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback must return a supervisor specification which can be created with the help of the &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">スーパーバイザを開始するには、 &lt;code&gt;arg&lt;/code&gt; としてargを使用して、指定された &lt;code&gt;module&lt;/code&gt; で&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックを呼び出します。&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックはの助けを借りて作成することができ、スーパーバイザ仕様返さなければならない&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="340467355095ab2102cf53f317a261f28f43cfa1" translate="yes" xml:space="preserve">
          <source>To start the supervisor, the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback will be invoked in the given &lt;code&gt;module&lt;/code&gt;, with &lt;code&gt;init_arg&lt;/code&gt; as its argument. The &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback must return a supervisor specification which can be created with the help of the &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;init/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">スーパーバイザを開始するには、指定された &lt;code&gt;module&lt;/code&gt; で&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt; &lt;code&gt;init_arg&lt;/code&gt; コールバックが、引数としてinit_argを使用して呼び出されます。&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックはの助けを借りて作成することができ、スーパーバイザ仕様返さなければならない&lt;a href=&quot;#init/2&quot;&gt; &lt;code&gt;init/2&lt;/code&gt; &lt;/a&gt;機能を。</target>
        </trans-unit>
        <trans-unit id="ea3cc861aafddb9c5584732baff0a5d8fc163c1d" translate="yes" xml:space="preserve">
          <source>To store individual options, see &lt;a href=&quot;#put_compiler_option/2&quot;&gt;&lt;code&gt;put_compiler_option/2&lt;/code&gt;&lt;/a&gt;. For a description of all options, see &lt;a href=&quot;#put_compiler_option/2&quot;&gt;&lt;code&gt;put_compiler_option/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">個々のオプションを格納するには、&lt;a href=&quot;#put_compiler_option/2&quot;&gt; &lt;code&gt;put_compiler_option/2&lt;/code&gt; を&lt;/a&gt;参照してください。すべてのオプションの説明については、&lt;a href=&quot;#put_compiler_option/2&quot;&gt; &lt;code&gt;put_compiler_option/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6bd659c0fd4a88cb66bdff02f16f40278b81dd1f" translate="yes" xml:space="preserve">
          <source>To sum it up: since the formatter cannot change the semantics of your code, sometimes it is necessary to tweak or refactor the code to get optimal formatting. To help better understand how to control the formatter, we describe in the next sections the cases where the formatter keeps the user encoding and how to control multiline expressions.</source>
          <target state="translated">要約すると、フォーマッタはコードのセマンティクスを変えることができないので、最適なフォーマットを得るためにコードを微調整したり、リファクタリングしたりする必要があることがあります。フォーマッタの制御方法をよりよく理解するために、次のセクションではフォーマッタがユーザのエンコーディングを保持する場合と、複数行式を制御する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="dc5e717b9aecb2c9e25ade231bba83d35b0f1df7" translate="yes" xml:space="preserve">
          <source>To this point, we have been starting &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Registry&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;#start_link/1&quot;&gt;&lt;code&gt;start_link/1&lt;/code&gt;&lt;/a&gt;. Typically the registry is started as part of a supervision tree though:</source>
          <target state="translated">ここまでは、&lt;a href=&quot;#start_link/1&quot;&gt; &lt;code&gt;start_link/1&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Registry&lt;/code&gt; &lt;/a&gt;を起動してきました。通常、レジストリは監視ツリーの一部として開始されます。</target>
        </trans-unit>
        <trans-unit id="16500310cbb3ebb314cb2217a6e54228c69e7280" translate="yes" xml:space="preserve">
          <source>To track the relationship between your code and the task, we use the &lt;code&gt;$callers&lt;/code&gt; key in the process dictionary. Therefore, assuming the &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; call above, we have:</source>
          <target state="translated">コードとタスクの関係を追跡するために、プロセスディクショナリの &lt;code&gt;$callers&lt;/code&gt; キーを使用します。したがって、上記の&lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt;呼び出しを想定すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="f69493266441ce87de2c6a579e769590bf4ddfcf" translate="yes" xml:space="preserve">
          <source>To track the relationship between your code and the task, we use the &lt;code&gt;$callers&lt;/code&gt; key in the process dictionary. Therefore, assuming the &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; call above, we have:</source>
          <target state="translated">コードとタスクの関係を追跡するために、プロセスディクショナリの &lt;code&gt;$callers&lt;/code&gt; キーを使用します。したがって、上記の&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt;呼び出しを想定すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4d8cdd3c2f7959e04910020a7c04a125591711d6" translate="yes" xml:space="preserve">
          <source>To use &lt;a href=&quot;#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt; during tests, you need to run &lt;code&gt;mix&lt;/code&gt; inside the &lt;code&gt;iex&lt;/code&gt; command and pass the &lt;code&gt;--trace&lt;/code&gt; to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; to avoid running into timeouts:</source>
          <target state="translated">テスト中に&lt;a href=&quot;#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt;を使用するには、 &lt;code&gt;iex&lt;/code&gt; コマンド内で &lt;code&gt;mix&lt;/code&gt; を実行し、 &lt;code&gt;--trace&lt;/code&gt; to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;して、タイムアウトが発生しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="aac68b9ffcf6a8ac8be05349df7088ceecbb4122" translate="yes" xml:space="preserve">
          <source>To use &lt;a href=&quot;#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; during tests, you need to run &lt;code&gt;mix&lt;/code&gt; inside the &lt;code&gt;iex&lt;/code&gt; command and pass the &lt;code&gt;--trace&lt;/code&gt; to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; to avoid running into timeouts:</source>
          <target state="translated">テスト中に&lt;a href=&quot;#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt;を使用するには、 &lt;code&gt;iex&lt;/code&gt; コマンド内で &lt;code&gt;mix&lt;/code&gt; を実行し、 &lt;code&gt;--trace&lt;/code&gt; to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;して、タイムアウトが発生しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="97175bd03b3eda9bcbde862759fc67493bd67482" translate="yes" xml:space="preserve">
          <source>To use &lt;a href=&quot;iex#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt; during tests, you need to run &lt;code&gt;mix&lt;/code&gt; inside the &lt;code&gt;iex&lt;/code&gt; command and pass the &lt;code&gt;--trace&lt;/code&gt; to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; to avoid running into timeouts:</source>
          <target state="translated">テスト中に&lt;a href=&quot;iex#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt;を使用するには、 &lt;code&gt;iex&lt;/code&gt; コマンド内で &lt;code&gt;mix&lt;/code&gt; を実行し、-- &lt;code&gt;--trace&lt;/code&gt; を渡して&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;を実行し、タイムアウトの発生を回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="ad497a0e7b4707958b2bbdf25658f61ced2eef66" translate="yes" xml:space="preserve">
          <source>To use &lt;a href=&quot;iex#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; during tests, you need to run &lt;code&gt;mix&lt;/code&gt; inside the &lt;code&gt;iex&lt;/code&gt; command and pass the &lt;code&gt;--trace&lt;/code&gt; to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; to avoid running into timeouts:</source>
          <target state="translated">テスト中に&lt;a href=&quot;iex#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt;を使用するには、 &lt;code&gt;iex&lt;/code&gt; コマンド内で &lt;code&gt;mix&lt;/code&gt; を実行し、-- &lt;code&gt;--trace&lt;/code&gt; を渡して&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;を実行し、タイムアウトの発生を回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="525e76db8eaa15a02d475c0b25c1748678200a4e" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;:keep&lt;/code&gt; with a type other than &lt;code&gt;:string&lt;/code&gt;, use a list as the type for the switch. For example: &lt;code&gt;[foo: [:integer, :keep]]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:string&lt;/code&gt; 以外のタイプで &lt;code&gt;:keep&lt;/code&gt; を使用するには、スイッチのタイプとしてリストを使用します。例： &lt;code&gt;[foo: [:integer, :keep]]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b67f756b7a47a192314501d13fc2788976f1a9c" translate="yes" xml:space="preserve">
          <source>To use the newly defined operators, we &lt;strong&gt;have to&lt;/strong&gt; import the module that defines them:</source>
          <target state="translated">新しく定義された演算子を使用するには、それらを定義するモジュール&lt;strong&gt;を&lt;/strong&gt;インポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="2c8de6b1ffba1e94f756b45cb853dd0d24f391d0" translate="yes" xml:space="preserve">
          <source>To use them, first make sure it is added as a dependency in &lt;code&gt;mix.exs&lt;/code&gt;. It can then be configured either via configuration:</source>
          <target state="translated">それらを使用するには、まず、 &lt;code&gt;mix.exs&lt;/code&gt; に依存関係として追加されていることを確認してください。次に、構成を介して構成できます。</target>
        </trans-unit>
        <trans-unit id="f4e084ee0583dab5cdb8f2aaa6336b9ae8900f06" translate="yes" xml:space="preserve">
          <source>To work around this error, redefine the field with your own &amp;amp;M.f/a function, like so:</source>
          <target state="translated">このエラーを回避するには、次のように、独自の＆M.f / a関数を使用してフィールドを再定義します。</target>
        </trans-unit>
        <trans-unit id="123be2f9bdd25b0f49703cfe940d72bfca8fdce4" translate="yes" xml:space="preserve">
          <source>TokenMissingError</source>
          <target state="translated">TokenMissingError</target>
        </trans-unit>
        <trans-unit id="42d5db27696210e57467dc675285521f0930aa67" translate="yes" xml:space="preserve">
          <source>TokenMissingError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">TokenMissingError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4fc60ef5d69079c451ea67854c51808d9ec41c01" translate="yes" xml:space="preserve">
          <source>Tooling</source>
          <target state="translated">Tooling</target>
        </trans-unit>
        <trans-unit id="cd770bf19fa776a62cbc130cb90d8f5cd6a0b438" translate="yes" xml:space="preserve">
          <source>Tools like Mix may use this information to ensure the module is recompiled in case any of the external resources change.</source>
          <target state="translated">Mix のようなツールは、外部リソースが変更された場合にモジュールが再コンパイルされることを保証するために、この情報を使用することがあります。</target>
        </trans-unit>
        <trans-unit id="71f3b1bc352a87eabb6f98c3505cc5cd7766eaec" translate="yes" xml:space="preserve">
          <source>Tools may use this information to ensure the module is recompiled in case any of the external resources change, see for example: &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Elixir.html&quot;&gt;&lt;code&gt;mix compile.elixir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ツールはこの情報を使用して、外部リソースのいずれかが変更された場合にモジュールが再コンパイルされるようにすることができます。たとえば、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Elixir.html&quot;&gt; &lt;code&gt;mix compile.elixir&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="77431b38c8bb01a363da5bccdb519bd75745358b" translate="yes" xml:space="preserve">
          <source>Trailing bang (&lt;code&gt;foo!&lt;/code&gt;)</source>
          <target state="translated">トレーリングバン（ &lt;code&gt;foo!&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ff6cffeaff58c52204a5122da57dc4b26f381da0" translate="yes" xml:space="preserve">
          <source>Trailing question mark (&lt;code&gt;foo?&lt;/code&gt;)</source>
          <target state="translated">末尾の疑問符（ &lt;code&gt;foo?&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b7a933d6378a29d15a7b6795f6516bd8c8f0c0ab" translate="yes" xml:space="preserve">
          <source>Transforms an existing stream with function-based start and finish.</source>
          <target state="translated">既存のストリームを関数ベースの開始と終了で変換します。</target>
        </trans-unit>
        <trans-unit id="0183630f154b045739040c0a476db00c0d8d8489" translate="yes" xml:space="preserve">
          <source>Transforms an existing stream.</source>
          <target state="translated">既存のストリームを変換します。</target>
        </trans-unit>
        <trans-unit id="a0bf22bc28c174dfbe4750edd483edd80c1c1f1c" translate="yes" xml:space="preserve">
          <source>Translates to:</source>
          <target state="translated">翻訳すると</target>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="eb726f366153f5273c287e7afe4de066bacf45f4" translate="yes" xml:space="preserve">
          <source>Traverses paths according to the given &lt;code&gt;glob&lt;/code&gt; expression and returns a list of matches.</source>
          <target state="translated">指定された &lt;code&gt;glob&lt;/code&gt; 式に従ってパスをトラバースし、一致のリストを返します。</target>
        </trans-unit>
        <trans-unit id="2b9bae059da0df068a9a43bf70813a2cc0165c80" translate="yes" xml:space="preserve">
          <source>Tries to create the directory &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">ディレクトリ &lt;code&gt;path&lt;/code&gt; 作成を試みます。</target>
        </trans-unit>
        <trans-unit id="1274a0f5d2ed4698598c860012ff8d0e34e7aeca" translate="yes" xml:space="preserve">
          <source>Tries to delete the dir at &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のディレクトリを削除しようとします。</target>
        </trans-unit>
        <trans-unit id="79494b7d121b41ed702af12c8820f16d4b440ca4" translate="yes" xml:space="preserve">
          <source>Tries to delete the file &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;path&lt;/code&gt; 削除を試みます。</target>
        </trans-unit>
        <trans-unit id="7267f3b3b246e3958379e99f6b106bc8021e929a" translate="yes" xml:space="preserve">
          <source>Tries to set up a connection to node.</source>
          <target state="translated">ノードへの接続を設定しようとします。</target>
        </trans-unit>
        <trans-unit id="836d86c6c848f493d3ff2e48bb6f5f308c9c411f" translate="yes" xml:space="preserve">
          <source>Truthy and falsy values</source>
          <target state="translated">真実と偽りの価値観</target>
        </trans-unit>
        <trans-unit id="a0d62e00a429e56556bf1455c0175bc4654fbf2a" translate="yes" xml:space="preserve">
          <source>Truthy values:</source>
          <target state="translated">真実の価値観。</target>
        </trans-unit>
        <trans-unit id="ccf6e0cd6e8c63d5ae42d6c2569741d54c61f4d5" translate="yes" xml:space="preserve">
          <source>Try to connect two telnet clients at the same time. When you do so, you will notice that the second client doesn&amp;rsquo;t echo:</source>
          <target state="translated">2つのtelnetクライアントを同時に接続してみてください。そうすると、2番目のクライアントがエコーしないことに気づくでしょう。</target>
        </trans-unit>
        <trans-unit id="965b5b1e76f73cc1dd48f82e36854d491ebbe607" translate="yes" xml:space="preserve">
          <source>TryClauseError</source>
          <target state="translated">TryClauseError</target>
        </trans-unit>
        <trans-unit id="bb04413eca53d9d4f9ada422b12b458b1a19dc69" translate="yes" xml:space="preserve">
          <source>TryClauseError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">TryClauseError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f3d6d3a96a93234d43a687b1131b3901f142d46c" translate="yes" xml:space="preserve">
          <source>Trying to access an attribute that was not defined will print a warning:</source>
          <target state="translated">定義されていない属性にアクセスしようとすると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="c41a2be51027c17da2914785c19c9af65da7231f" translate="yes" xml:space="preserve">
          <source>Tuple</source>
          <target state="translated">Tuple</target>
        </trans-unit>
        <trans-unit id="dc4f3a01c46fc5525a4e91e907b957d6688cd48a" translate="yes" xml:space="preserve">
          <source>Tuple describing the client of a call request.</source>
          <target state="translated">呼び出しリクエストのクライアントを記述するタプル。</target>
        </trans-unit>
        <trans-unit id="eb4abd3a92bef73903da00d10d474ba4501f6bab" translate="yes" xml:space="preserve">
          <source>Tuple-based HashDict implementation.</source>
          <target state="translated">タプルベースのHashDictの実装。</target>
        </trans-unit>
        <trans-unit id="91c1b6c09400f880e21ca1e3d43c7f7b3443b423" translate="yes" xml:space="preserve">
          <source>Tuple-based HashSet implementation.</source>
          <target state="translated">タプルベースのHashSetの実装。</target>
        </trans-unit>
        <trans-unit id="538a8ce3fbdcaee00a14353bd57bcf3600c6e0d0" translate="yes" xml:space="preserve">
          <source>Tuples</source>
          <target state="translated">Tuples</target>
        </trans-unit>
        <trans-unit id="a76966417cbfeb7cb220fffc01419f6c11debbd2" translate="yes" xml:space="preserve">
          <source>Tuples are a compound type and each tuple is identified by the types inside it (in this case, a number and a string). To understand why &lt;code&gt;String.t&lt;/code&gt; is not written as &lt;code&gt;string&lt;/code&gt;, have another look at the &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#the-string-type&quot;&gt;typespecs docs&lt;/a&gt;.</source>
          <target state="translated">タプルは複合タイプであり、各タプルはその中のタイプ（この場合は数値と文字列）によって識別されます。 &lt;code&gt;String.t&lt;/code&gt; が &lt;code&gt;string&lt;/code&gt; として記述されていない理由を理解するには、&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#the-string-type&quot;&gt;typespecsのドキュメント&lt;/a&gt;をもう一度見てください。</target>
        </trans-unit>
        <trans-unit id="793259df3cfbea29ea94e801a3dc852ba0481364" translate="yes" xml:space="preserve">
          <source>Tuples are compared by size, then element by element.</source>
          <target state="translated">タプルはサイズで比較され、次に要素ごとに比較されます。</target>
        </trans-unit>
        <trans-unit id="cbb1dd7716c923dc57835e6545295dd3e5141a82" translate="yes" xml:space="preserve">
          <source>Tuples are denoted with curly braces:</source>
          <target state="translated">タプルは中括弧で表します。</target>
        </trans-unit>
        <trans-unit id="f9d295b48169d12e8a4a885f2969f7ebb5f288bf" translate="yes" xml:space="preserve">
          <source>Tuples are intended as fixed-size containers for multiple elements. To manipulate a collection of elements, use a list instead. &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; functions do not work on tuples.</source>
          <target state="translated">タプルは、複数の要素の固定サイズのコンテナーとして意図されています。要素のコレクションを操作するには、代わりにリストを使用します。&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;関数はタプルでは機能しません。</target>
        </trans-unit>
        <trans-unit id="9c44772da431d393d0ff2d0292ec743fdb504db7" translate="yes" xml:space="preserve">
          <source>Tuples are intended as fixed-size containers for multiple elements. To manipulate a collection of elements, use a list instead. &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; functions do not work on tuples.</source>
          <target state="translated">タプルは、複数の要素の固定サイズのコンテナーとして意図されています。要素のコレクションを操作するには、代わりにリストを使用します。&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;型関数はタプルでは機能しません。</target>
        </trans-unit>
        <trans-unit id="6007daf5620486dbca1cb7e87969100af322cc9f" translate="yes" xml:space="preserve">
          <source>Tuples are typically used either when a function has multiple return values or for error handling. &lt;a href=&quot;file#read/1&quot;&gt;&lt;code&gt;File.read/1&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;{:ok, contents}&lt;/code&gt; if reading the given file is successful, or else &lt;code&gt;{:error, reason}&lt;/code&gt; such as when the file does not exist.</source>
          <target state="translated">タプルは通常、関数に複数の戻り値がある場合、またはエラー処理に使用されます。&lt;a href=&quot;file#read/1&quot;&gt; &lt;code&gt;File.read/1&lt;/code&gt; &lt;/a&gt;は、指定されたファイルの読み取りが成功した場合は &lt;code&gt;{:ok, contents}&lt;/code&gt; 返し、そうでない場合は &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="c05d54cdc90ebeef0a2917964fc5bc31fa686547" translate="yes" xml:space="preserve">
          <source>Tuples are typically used either when a function has multiple return values or for error handling. &lt;a href=&quot;https://hexdocs.pm/elixir/File.html#read/1&quot;&gt;&lt;code&gt;File.read/1&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;{:ok, contents}&lt;/code&gt; if reading the given file is successful, or else &lt;code&gt;{:error, reason}&lt;/code&gt; such as when the file does not exist.</source>
          <target state="translated">タプルは通常、関数に複数の戻り値がある場合、またはエラー処理のために使用されます。&lt;a href=&quot;https://hexdocs.pm/elixir/File.html#read/1&quot;&gt; &lt;code&gt;File.read/1&lt;/code&gt; &lt;/a&gt;は、指定されたファイルの読み取りが成功した場合は &lt;code&gt;{:ok, contents}&lt;/code&gt; 返し、ファイルが存在しない場合などは &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="db66b3f610de5841b308865fc05862649e3b269d" translate="yes" xml:space="preserve">
          <source>Tuples have their own representation, except for two-element tuples, which are represented as themselves:</source>
          <target state="translated">タプルは、2つの要素を持つタプルを除いて、それ自身で表現されています。</target>
        </trans-unit>
        <trans-unit id="c8f2c5c5f76542db20a27b0649c5619472b41e0e" translate="yes" xml:space="preserve">
          <source>Tuples may appear in patterns using the curly brackets syntax (&lt;code&gt;{}&lt;/code&gt;). A tuple in a pattern will match only tuples of the same size, where each individual tuple element must also match:</source>
          <target state="translated">タプルは、中括弧構文（ &lt;code&gt;{}&lt;/code&gt; ）を使用してパターンで表示される場合があります。パターン内のタプルは、同じサイズのタプルにのみ一致します。個々のタプル要素も一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d23bff74f82a432abab310b02bda096c901d05c" translate="yes" xml:space="preserve">
          <source>Tuples store elements contiguously in memory. This means accessing a tuple element by index or getting the tuple size is a fast operation. Indexes start from zero:</source>
          <target state="translated">タプルはメモリ内の要素を連続して格納します。つまり、インデックスでタプルの要素にアクセスしたり、タプルのサイズを取得したりするのは高速な操作です。インデックスはゼロから始まります。</target>
        </trans-unit>
        <trans-unit id="4827be384e5b92dfa89593fd34e759c469d83f68" translate="yes" xml:space="preserve">
          <source>Tuples, on the other hand, are stored contiguously in memory. This means getting the tuple size or accessing an element by index is fast. However, updating or adding elements to tuples is expensive because it requires creating a new tuple in memory:</source>
          <target state="translated">一方、タプルはメモリ内に連続して格納されます。これは、タプルのサイズを取得したり、インデックスで要素にアクセスしたりするのが速いことを意味します。しかし、タプルの更新や要素の追加は、メモリ内で新たなタプルを作成する必要があるため、コストがかかります。</target>
        </trans-unit>
        <trans-unit id="c4eeec2166369454fe72d485310480999d9e41ff" translate="yes" xml:space="preserve">
          <source>Turns a distributed node into a non-distributed node.</source>
          <target state="translated">分散ノードを非分散ノードに変換します。</target>
        </trans-unit>
        <trans-unit id="78cb13dab8abb15c4418dcf574cee609f60fff10" translate="yes" xml:space="preserve">
          <source>Turns a non-distributed node into a distributed node.</source>
          <target state="translated">非分散ノードを分散ノードに変換します。</target>
        </trans-unit>
        <trans-unit id="0d200b5cca6122d2ea47ef95bc1ae207e6bed360" translate="yes" xml:space="preserve">
          <source>Two keywords are considered to be equal if they contain the same keys and those keys contain the same values.</source>
          <target state="translated">2つのキーワードが同じキーを含み、それらのキーが同じ値を含む場合、2つのキーワードは等しいとみなされます。</target>
        </trans-unit>
        <trans-unit id="ef661032731cfceb2a4bb6e8a73cfcacce40a182" translate="yes" xml:space="preserve">
          <source>Two lists can be concatenated and subtracted using the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#++/2&quot;&gt;&lt;code&gt;Kernel.++/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#--/2&quot;&gt;&lt;code&gt;Kernel.--/2&lt;/code&gt;&lt;/a&gt; operators:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#++/2&quot;&gt; &lt;code&gt;Kernel.++/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#--/2&quot;&gt; &lt;code&gt;Kernel.--/2&lt;/code&gt; &lt;/a&gt;演算子を使用して、2つのリストを連結および減算できます。</target>
        </trans-unit>
        <trans-unit id="fddf4faa5ad6ac7c7817431eda4bde5737ecc7a7" translate="yes" xml:space="preserve">
          <source>Two lists can be concatenated and subtracted using the &lt;a href=&quot;kernel#++/2&quot;&gt;&lt;code&gt;Kernel.++/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#--/2&quot;&gt;&lt;code&gt;Kernel.--/2&lt;/code&gt;&lt;/a&gt; operators:</source>
          <target state="translated">&lt;a href=&quot;kernel#++/2&quot;&gt; &lt;code&gt;Kernel.++/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;kernel#--/2&quot;&gt; &lt;code&gt;Kernel.--/2&lt;/code&gt; &lt;/a&gt;演算子を使用して、2つのリストを連結および減算できます。</target>
        </trans-unit>
        <trans-unit id="c6eb24ea9f355df425e35046856649369306137b" translate="yes" xml:space="preserve">
          <source>Two lists can be concatenated or subtracted using the &lt;code&gt;++/2&lt;/code&gt; and &lt;code&gt;--/2&lt;/code&gt; operators respectively:</source>
          <target state="translated">2つのリストは、それぞれ &lt;code&gt;++/2&lt;/code&gt; および &lt;code&gt;--/2&lt;/code&gt; 演算子を使用して連結または減算できます。</target>
        </trans-unit>
        <trans-unit id="28dd04de329219b61258e459b05052b6d195ed8c" translate="yes" xml:space="preserve">
          <source>Two maps are considered to be equal if they contain the same keys and those keys contain the same values.</source>
          <target state="translated">2 つのマップは、同じキーを含み、それらのキーに同じ値が含まれている場合、等しいとみなされます。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="130c35a2878e328189066b98bf54e31f721289db" translate="yes" xml:space="preserve">
          <source>Type &amp;ldquo;hello&amp;rdquo;, press enter, and you will get &amp;ldquo;hello&amp;rdquo; back. Excellent!</source>
          <target state="translated">「hello」と入力してEnterキーを押すと、「hello」が返されます。優れた！</target>
        </trans-unit>
        <trans-unit id="e252ef20859612096fbf35e99f3db43d0d903502" translate="yes" xml:space="preserve">
          <source>Type checks and other boolean checks that are allowed in guard clauses are named with an &lt;code&gt;is_&lt;/code&gt; prefix.</source>
          <target state="translated">ガード句で許可されている型チェックとその他のブール値チェックには、 &lt;code&gt;is_&lt;/code&gt; プレフィックスが付いています。</target>
        </trans-unit>
        <trans-unit id="63885d680ea99a25f2552e75b805c2d3723587d4" translate="yes" xml:space="preserve">
          <source>Type operator. Used by types and bitstrings to specify types.</source>
          <target state="translated">型演算子。型やビットストリングで型を指定する際に使用します。</target>
        </trans-unit>
        <trans-unit id="ce1a99d47d96ec4a8d262432fdeeb24d34842d1c" translate="yes" xml:space="preserve">
          <source>Type specifications (sometimes referred to as &lt;em&gt;typespecs&lt;/em&gt;) are defined in different contexts using the following attributes:</source>
          <target state="translated">タイプ仕様（&lt;em&gt;typespecs&lt;/em&gt;と呼ばれることもあり&lt;em&gt;ます&lt;/em&gt;）は、次の属性を使用してさまざまなコンテキストで定義されます。</target>
        </trans-unit>
        <trans-unit id="c6f295ce9af290691ba77bd28066b72b6d97e560" translate="yes" xml:space="preserve">
          <source>Type variables with no restriction can also be defined using &lt;code&gt;var&lt;/code&gt;.</source>
          <target state="translated">制限のない型変数も &lt;code&gt;var&lt;/code&gt; を使用して定義できます。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="9c292c75a9bfb2deb75a816df8b4fa93d8b86cdf" translate="yes" xml:space="preserve">
          <source>Types and specs</source>
          <target state="translated">種類と仕様</target>
        </trans-unit>
        <trans-unit id="cd76b0391fb1a7a64c931e4a4dc1d98639420e28" translate="yes" xml:space="preserve">
          <source>Types and their syntax</source>
          <target state="translated">型とその構文</target>
        </trans-unit>
        <trans-unit id="0bc4703b28f4924a9c44bceee00bf1363064b5ea" translate="yes" xml:space="preserve">
          <source>Types can be defined for tuples with the &lt;code&gt;record/2&lt;/code&gt; macro (only available in typespecs). This macro will expand to a tuple as seen in the example below:</source>
          <target state="translated">タプルのタイプは、 &lt;code&gt;record/2&lt;/code&gt; マクロで定義できます（typespecでのみ使用可能）。このマクロは、次の例に示すようにタプルに展開されます。</target>
        </trans-unit>
        <trans-unit id="aa2e6017cafdcec12ffadda705782bbfa3365007" translate="yes" xml:space="preserve">
          <source>Types can be parameterized by defining variables as parameters; these variables can then be used to define the type.</source>
          <target state="translated">型は、変数をパラメータとして定義することでパラメータ化することができます。</target>
        </trans-unit>
        <trans-unit id="9642fee222699c21f35d30c296f0220d194b3b26" translate="yes" xml:space="preserve">
          <source>Typespec attributes</source>
          <target state="translated">Typespec属性</target>
        </trans-unit>
        <trans-unit id="ec4586f03bdf53faaacd4a0a1f5bfd0f6c72e82a" translate="yes" xml:space="preserve">
          <source>Typespecs</source>
          <target state="translated">Typespecs</target>
        </trans-unit>
        <trans-unit id="12ee67883b50a8a9b8616d935b79570fd90fb391" translate="yes" xml:space="preserve">
          <source>Typespecs and behaviours</source>
          <target state="translated">タイプ別スペックと行動</target>
        </trans-unit>
        <trans-unit id="426efe2f128e5103f26a5651730adbe39dfe3a7f" translate="yes" xml:space="preserve">
          <source>Typespecs are not only useful to developers as additional documentation. The Erlang tool &lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt;Dialyzer&lt;/a&gt;, for example, uses typespecs in order to perform static analysis of code. That&amp;rsquo;s why, in the &lt;code&gt;QuietCalculator&lt;/code&gt; example, we wrote a spec for the &lt;code&gt;make_quiet/1&lt;/code&gt; function even though it was defined as a private function.</source>
          <target state="translated">Typespecは、追加のドキュメントとして開発者に役立つだけではありません。たとえば、Erlangツール&lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt;Dialyzerは&lt;/a&gt;、コードの静的分析を実行するためにtypespecsを使用します。そのため、 &lt;code&gt;QuietCalculator&lt;/code&gt; の例では、 &lt;code&gt;make_quiet/1&lt;/code&gt; 関数がプライベート関数として定義されていても、その仕様を作成しました。</target>
        </trans-unit>
        <trans-unit id="27a01a6204a37c38992dd52cc20fa3db2b61cbf1" translate="yes" xml:space="preserve">
          <source>Typical error reasons are the same as in &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#read/1&quot;&gt;&lt;code&gt;read/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#write/3&quot;&gt;&lt;code&gt;write/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般的なエラーの理由は、&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#read/1&quot;&gt; &lt;code&gt;read/1&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#write/3&quot;&gt; &lt;code&gt;write/3&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="67c8d97f0dcec5fe713e0be3b64521ea6acf59de" translate="yes" xml:space="preserve">
          <source>Typical error reasons are:</source>
          <target state="translated">代表的なエラーの理由は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2f629170b36b9e9384cae62822a95fe4136c915d" translate="yes" xml:space="preserve">
          <source>Typical error reasons:</source>
          <target state="translated">典型的なエラーの理由。</target>
        </trans-unit>
        <trans-unit id="29820537aaefd464fe53b0df62deac28df35005d" translate="yes" xml:space="preserve">
          <source>Typically called after formatting when the data cannot be printed.</source>
          <target state="translated">通常、データを印刷できない場合は、フォーマットの後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0018f0d1c5a28ac0ba1af21c25d258db67bae7ff" translate="yes" xml:space="preserve">
          <source>Typically developers do not use the &lt;code&gt;spawn&lt;/code&gt; functions, instead they use abstractions such as &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Agent.html&quot;&gt;&lt;code&gt;Agent&lt;/code&gt;&lt;/a&gt;, built on top of &lt;code&gt;spawn&lt;/code&gt;, that spawns processes with more conveniences in terms of introspection and debugging.</source>
          <target state="translated">通常、開発者は &lt;code&gt;spawn&lt;/code&gt; 関数を使用しません。代わりに、 &lt;code&gt;spawn&lt;/code&gt; 上に構築された&lt;a href=&quot;https://hexdocs.pm/elixir/Task.html&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Agent.html&quot;&gt; &lt;code&gt;Agent&lt;/code&gt; &lt;/a&gt;などの抽象化を使用します。これにより、イントロスペクションとデバッグの点でより便利なプロセスがスポーンされます。</target>
        </trans-unit>
        <trans-unit id="2ebdb0dbd819b614930942168eaeeb854d37cbf9" translate="yes" xml:space="preserve">
          <source>Typically developers do not use the &lt;code&gt;spawn&lt;/code&gt; functions, instead they use abstractions such as &lt;a href=&quot;task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;agent&quot;&gt;&lt;code&gt;Agent&lt;/code&gt;&lt;/a&gt;, built on top of &lt;code&gt;spawn&lt;/code&gt;, that spawns processes with more conveniences in terms of introspection and debugging.</source>
          <target state="translated">通常、開発者は &lt;code&gt;spawn&lt;/code&gt; 関数を使用しません。代わりに、 &lt;code&gt;spawn&lt;/code&gt; の上に構築された&lt;a href=&quot;task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;agent&quot;&gt; &lt;code&gt;Agent&lt;/code&gt; &lt;/a&gt;などの抽象化を使用します。これにより、イントロスペクションとデバッグに関してより便利なプロセスが生成されます。</target>
        </trans-unit>
        <trans-unit id="a41048f60fc8036bd19784fff24807617c9ba6f2" translate="yes" xml:space="preserve">
          <source>Typically, stable releases are pushed to Hex. If you want to depend on an external dependency still in development, Mix is able to manage Git dependencies too:</source>
          <target state="translated">通常、安定版のリリースは Hex にプッシュされます。開発中の外部依存関係に依存したい場合は、Mix は Git 依存関係も管理できます。</target>
        </trans-unit>
        <trans-unit id="e81c0c3d0d9554aaaa890589c591cb2c6de83b83" translate="yes" xml:space="preserve">
          <source>Typically, this is used when a process started from a certain shell should have a group leader other than &lt;code&gt;:init&lt;/code&gt;.</source>
          <target state="translated">通常、これは特定のシェルから開始されたプロセスに &lt;code&gt;:init&lt;/code&gt; 以外のグループリーダーが必要な場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="19526e6dfc6064b512194499eae8afdcd81dca35" translate="yes" xml:space="preserve">
          <source>Typically, you use &lt;a href=&quot;#async_nolink/3&quot;&gt;&lt;code&gt;async_nolink/3&lt;/code&gt;&lt;/a&gt; when there is a reasonable expectation that the task may fail, and you don't want it to take down the caller. Let's see an example where a &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; is meant to run a single task and track its status:</source>
          <target state="translated">通常、&lt;a href=&quot;#async_nolink/3&quot;&gt; &lt;code&gt;async_nolink/3&lt;/code&gt; &lt;/a&gt;は、タスクが失敗する可能性があると合理的に予想されており、呼び出し側を停止させたくない場合に使用します。&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;が単一のタスクを実行してそのステータスを追跡することを意図した例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="8798d630c8e10ea5c64e566bec0b0fe8e5e77e30" translate="yes" xml:space="preserve">
          <source>Typically, you use &lt;a href=&quot;#async_nolink/3&quot;&gt;&lt;code&gt;async_nolink/3&lt;/code&gt;&lt;/a&gt; when there is a reasonable expectation that the task may fail, and you don't want it to take down the caller. Let's see an example where a &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; is meant to run a single task and track its status:</source>
          <target state="translated">通常、タスクが失敗する可能性があると合理的に予想され、呼び出し元を停止させたくない場合は、&lt;a href=&quot;#async_nolink/3&quot;&gt; &lt;code&gt;async_nolink/3&lt;/code&gt; &lt;/a&gt;を使用します。&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;が単一のタスクを実行してそのステータスを追跡することを目的とした例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="cb371c93c5aa0e62198efd303ae2c17474416d1a" translate="yes" xml:space="preserve">
          <source>URI</source>
          <target state="translated">URI</target>
        </trans-unit>
        <trans-unit id="09f0409f5ecd55093b52d29617566df8dfd0cc27" translate="yes" xml:space="preserve">
          <source>UTF-8 and Encodings</source>
          <target state="translated">UTF-8とエンコーディング</target>
        </trans-unit>
        <trans-unit id="40d44fb77280648f021d454874b73243b9965e08" translate="yes" xml:space="preserve">
          <source>UTF-8 and Unicode</source>
          <target state="translated">UTF-8とユニコード</target>
        </trans-unit>
        <trans-unit id="93fa3107e0f78c4c5bf63b64e4e03caae13e12dc" translate="yes" xml:space="preserve">
          <source>UTF-8 requires one byte to represent the characters &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, and &lt;code&gt;o&lt;/code&gt;, but two bytes to represent &lt;code&gt;ł&lt;/code&gt;. In Elixir, you can get a character&amp;rsquo;s code point by using &lt;code&gt;?&lt;/code&gt;:</source>
          <target state="translated">UTF-8では、文字 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;e&lt;/code&gt; 、 &lt;code&gt;o&lt;/code&gt; を表すために1バイトが必要ですが、 &lt;code&gt;ł&lt;/code&gt; を表すために2バイトが必要です。エリクサーでは、 &lt;code&gt;?&lt;/code&gt; を使用してキャラクターのコードポイントを取得できます。：</target>
        </trans-unit>
        <trans-unit id="4ba0eecf4f2b37abbf01f86b85c444b51d79130b" translate="yes" xml:space="preserve">
          <source>Umbrella applications can also be used as a stepping stone for eventually extracting an application from your codebase. For example, imagine a web application that has to send &amp;ldquo;push notifications&amp;rdquo; to its users. The whole &amp;ldquo;push notifications system&amp;rdquo; can be developed as a separate application in the umbrella, with its own supervision tree and APIs. If you ever run into a situation where another project needs the push notifications system, the system can be moved to a private repository or a Hex package.</source>
          <target state="translated">アンブレラアプリケーションは、コードベースから最終的にアプリケーションを抽出するための足がかりとしても使用できます。たとえば、ユーザーに「プッシュ通知」を送信する必要があるWebアプリケーションを想像してみてください。「プッシュ通知システム」全体は、独自の監視ツリーとAPIを使用して、包括的に独立したアプリケーションとして開発できます。別のプロジェクトがプッシュ通知システムを必要とする状況に遭遇した場合、システムをプライベートリポジトリまたは16進パッケージに移動できます。</target>
        </trans-unit>
        <trans-unit id="851ed712aa0571dbe2c6f112b44c8797ec7c4c5e" translate="yes" xml:space="preserve">
          <source>Umbrella projects</source>
          <target state="translated">傘プロジェクト</target>
        </trans-unit>
        <trans-unit id="43c968179421920425ac688f848988a9c56a1013" translate="yes" xml:space="preserve">
          <source>Umbrella projects are a convenience to help you organize and manage multiple applications. While it provides a degree of separation between applications, those applications are not fully decoupled, as they share the same configuration and the same dependencies.</source>
          <target state="translated">アンブレラプロジェクトは、複数のアプリケーションを整理して管理するための便利なツールです。アプリケーション間にある程度の分離を提供しますが、同じ設定と同じ依存関係を共有しているため、それらのアプリケーションは完全に分離されているわけではありません。</target>
        </trans-unit>
        <trans-unit id="b04e40d6c4b172a53c1b297ef8e44dbbe21358ea" translate="yes" xml:space="preserve">
          <source>Umbrellas</source>
          <target state="translated">Umbrellas</target>
        </trans-unit>
        <trans-unit id="7d6b777bb78f858357184c0cf5af750b3f2ffa24" translate="yes" xml:space="preserve">
          <source>Unary</source>
          <target state="translated">Unary</target>
        </trans-unit>
        <trans-unit id="de5d06c8499ec2b6ae1a8811f2fac4af788e75b6" translate="yes" xml:space="preserve">
          <source>UndefinedFunctionError</source>
          <target state="translated">UndefinedFunctionError</target>
        </trans-unit>
        <trans-unit id="305519a8e77b6e01d180181d201634eba9423ae4" translate="yes" xml:space="preserve">
          <source>UndefinedFunctionError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">UndefinedFunctionError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="47bcfae4a535fdd5dc3c9474709313c0c05cda2a" translate="yes" xml:space="preserve">
          <source>Underline: none.</source>
          <target state="translated">下線:なし</target>
        </trans-unit>
        <trans-unit id="74cc1e1026bd71e93c70958a6c844e8826bbbfcc" translate="yes" xml:space="preserve">
          <source>Underline: single.</source>
          <target state="translated">下線:シングル。</target>
        </trans-unit>
        <trans-unit id="f97b844a47d0ddc9c28ad5334d4b5c8bebe7ba04" translate="yes" xml:space="preserve">
          <source>Underneath a struct is just a map with a &lt;code&gt;:__struct__&lt;/code&gt; key pointing to the &lt;code&gt;User&lt;/code&gt; module:</source>
          <target state="translated">構造体の下には、 &lt;code&gt;User&lt;/code&gt; モジュールを指す &lt;code&gt;:__struct__&lt;/code&gt; キーを持つ単なるマップがあります。</target>
        </trans-unit>
        <trans-unit id="8ecb7df30047a87c4fc859f515326bcb1df1fdc5" translate="yes" xml:space="preserve">
          <source>Underscore (&lt;code&gt;_foo&lt;/code&gt;)</source>
          <target state="translated">下線（ &lt;code&gt;_foo&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="860a89de764183b070c833d2c56a715407fdf5ae" translate="yes" xml:space="preserve">
          <source>Underscore functions</source>
          <target state="translated">アンダースコア関数</target>
        </trans-unit>
        <trans-unit id="07214c1f037134f45b6afd6fb6be34b85a19cbdd" translate="yes" xml:space="preserve">
          <source>Understanding Aliases</source>
          <target state="translated">エイリアスを理解する</target>
        </trans-unit>
        <trans-unit id="cf49459d86609fbaea12c1c990c331d67fab00b7" translate="yes" xml:space="preserve">
          <source>Understanding applications</source>
          <target state="translated">アプリケーションの理解</target>
        </trans-unit>
        <trans-unit id="a5d78374ca4469419766b74347b324cc8a588c26" translate="yes" xml:space="preserve">
          <source>Understanding the printed graph</source>
          <target state="translated">印刷されたグラフを理解する</target>
        </trans-unit>
        <trans-unit id="7e6e7909c64b19402a59c9e41bf6f2ead8be7854" translate="yes" xml:space="preserve">
          <source>Unescapes the given chars according to the map given.</source>
          <target state="translated">与えられたマップに従って与えられた文字をエスケープ解除します。</target>
        </trans-unit>
        <trans-unit id="17a4b21d25e341e163b3fc9fec0b7c0beae4ac5a" translate="yes" xml:space="preserve">
          <source>Unescapes the given chars.</source>
          <target state="translated">与えられた文字をエスケープします。</target>
        </trans-unit>
        <trans-unit id="4f4713c47fdabdbf578d4a71eec889931003b842" translate="yes" xml:space="preserve">
          <source>Unfortunately, similar to &lt;code&gt;IO.inspect/2&lt;/code&gt;, &lt;code&gt;IEx.pry/0&lt;/code&gt; also requires us to change the code we intend to debug. Luckily IEx also provides a &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/2&quot;&gt;&lt;code&gt;break!/2&lt;/code&gt;&lt;/a&gt; function which allows you set and manage breakpoints on any Elixir code without modifying its source:</source>
          <target state="translated">残念ながら、 &lt;code&gt;IO.inspect/2&lt;/code&gt; と同様に、 &lt;code&gt;IEx.pry/0&lt;/code&gt; もデバッグするコードを変更する必要があります。幸いにも、IExは、ソースを変更せずにElixirコードにブレークポイントを設定および管理できる&lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/2&quot;&gt; &lt;code&gt;break!/2&lt;/code&gt; &lt;/a&gt;関数も提供しています。</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="c9219d4bebf3a43b3cb39fddf36fce444eec5523" translate="yes" xml:space="preserve">
          <source>Unicode Syntax</source>
          <target state="translated">ユニコード構文</target>
        </trans-unit>
        <trans-unit id="0b474ff440f8ab612fe1e1943a887fd958d5ed36" translate="yes" xml:space="preserve">
          <source>Unicode and Code Points</source>
          <target state="translated">ユニコードとコードポイント</target>
        </trans-unit>
        <trans-unit id="9230bbe0897bd3834d6a401ee2097bdf85ecad8d" translate="yes" xml:space="preserve">
          <source>Unicode atoms in Elixir follow the identifier rule above with the following modifications:</source>
          <target state="translated">Elixir の Unicode アトムは上記の識別子ルールに従いますが、次のように修正しています。</target>
        </trans-unit>
        <trans-unit id="7372ec76fd7737f65218f4920228b83bfa1d58d4" translate="yes" xml:space="preserve">
          <source>Unicode organizes all of the characters in its repertoire into code charts, and each character is given a unique numerical index. This numerical index is known as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;Code Point&lt;/a&gt;.</source>
          <target state="translated">Unicodeは、レパートリー内のすべての文字をコードチャートに編成し、各文字には一意の数値インデックスが与えられます。この数値インデックスは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;コードポイント&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c1cd0bc55280570ee38ec7b425e9a53867a918b8" translate="yes" xml:space="preserve">
          <source>UnicodeConversionError</source>
          <target state="translated">UnicodeConversionError</target>
        </trans-unit>
        <trans-unit id="17431ce3c7303d531227e8a58c83d5667bb2fc09" translate="yes" xml:space="preserve">
          <source>UnicodeConversionError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">UnicodeConversionError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="39e7100b363b0c844d4355a58d8d2bcf3d045da9" translate="yes" xml:space="preserve">
          <source>Uninstalls local archives.</source>
          <target state="translated">ローカルアーカイブをアンインストールします。</target>
        </trans-unit>
        <trans-unit id="987e61e41c4febfea2dd5909d903f8a6923f84be" translate="yes" xml:space="preserve">
          <source>Uninstalls local escripts</source>
          <target state="translated">ローカルスクリプトのアンインストール</target>
        </trans-unit>
        <trans-unit id="6c7917e8b4eb34e9ee648bbddd83c2ea876861aa" translate="yes" xml:space="preserve">
          <source>Uninstalls local escripts:</source>
          <target state="translated">ローカルのスクリプトをアンインストールします。</target>
        </trans-unit>
        <trans-unit id="d24756b8871b9d0b4227e2aeadf94c161941dedb" translate="yes" xml:space="preserve">
          <source>Unit and Size</source>
          <target state="translated">単位とサイズ</target>
        </trans-unit>
        <trans-unit id="7476fffdc753c76439401e20c5fa467d3860aa0e" translate="yes" xml:space="preserve">
          <source>Unit testing framework for Elixir.</source>
          <target state="translated">Elixirのためのユニットテストフレームワーク。</target>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="cfbf337783a51f862d0cc59c306e1cd8f3532bc3" translate="yes" xml:space="preserve">
          <source>Unix times are always in UTC and therefore the DateTime will be returned in UTC.</source>
          <target state="translated">Unix の時刻は常に UTC であるため、DateTime は UTC で返されます。</target>
        </trans-unit>
        <trans-unit id="ada7bf7ca1b8ad5c554b83d4ab0831e359db85dc" translate="yes" xml:space="preserve">
          <source>Unix-like operating systems</source>
          <target state="translated">ユニックスライクなオペレーティングシステム</target>
        </trans-unit>
        <trans-unit id="37ac014f65a6115890eb6cc91e8f2865ac295f23" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#expand/2&quot;&gt;&lt;code&gt;expand/2&lt;/code&gt;&lt;/a&gt;, no attempt is made to resolve &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#expand/2&quot;&gt; &lt;code&gt;expand/2&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;..&lt;/code&gt; 、 &lt;code&gt;.&lt;/code&gt; を解決する試みは行われません。または &lt;code&gt;~&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e18509c97a5b05619653ea5f9061749ced83e99e" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;assert_received&lt;/code&gt;, it has a default &lt;code&gt;timeout&lt;/code&gt; of 100 milliseconds.</source>
          <target state="translated">&lt;code&gt;assert_received&lt;/code&gt; とは異なり、デフォルトの &lt;code&gt;timeout&lt;/code&gt; は100ミリ秒です。</target>
        </trans-unit>
        <trans-unit id="90388e527e157889a4f6398ea86608eb36a3d8e9" translate="yes" xml:space="preserve">
          <source>Unlike Erlang, such attributes are not stored in the module by default since it is common in Elixir to use custom attributes to store temporary data that will be available at compile-time. Custom attributes may be configured to behave closer to Erlang by using &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#register_attribute/3&quot;&gt;&lt;code&gt;Module.register_attribute/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Erlangとは異なり、Elixirではカスタム属性を使用してコンパイル時に使用できる一時データを保存するのが一般的であるため、このような属性はデフォルトではモジュールに保存されません。&lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#register_attribute/3&quot;&gt; &lt;code&gt;Module.register_attribute/3&lt;/code&gt; &lt;/a&gt;を使用して、カスタム属性をErlangの近くで動作するように構成できます。</target>
        </trans-unit>
        <trans-unit id="2436badc9eff92032ec9ac619271277eb100f7c7" translate="yes" xml:space="preserve">
          <source>Unlike Erlang, such attributes are not stored in the module by default since it is common in Elixir to use custom attributes to store temporary data that will be available at compile-time. Custom attributes may be configured to behave closer to Erlang by using &lt;a href=&quot;module#register_attribute/3&quot;&gt;&lt;code&gt;Module.register_attribute/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Erlangとは異なり、Elixirではカスタム属性を使用してコンパイル時に利用できる一時データを保存するのが一般的であるため、このような属性はデフォルトではモジュールに保存されません。&lt;a href=&quot;module#register_attribute/3&quot;&gt; &lt;code&gt;Module.register_attribute/3&lt;/code&gt; &lt;/a&gt;を使用して、カスタム属性をErlangに近い動作をするように構成できます。</target>
        </trans-unit>
        <trans-unit id="b56b7c857aa7ffa6e7b36170f0491a230a7cf9f0" translate="yes" xml:space="preserve">
          <source>Unlike other hooks, &lt;code&gt;@on_definition&lt;/code&gt; will only invoke functions and never macros. This is to avoid &lt;code&gt;@on_definition&lt;/code&gt; callbacks from redefining functions that have just been defined in favor of more explicit approaches.</source>
          <target state="translated">他のフックとは異なり、 &lt;code&gt;@on_definition&lt;/code&gt; は関数のみを呼び出し、マクロは呼び出しません。これは、 &lt;code&gt;@on_definition&lt;/code&gt; コールバックが、より明示的なアプローチのために定義されたばかりの関数を再定義しないようにするためです。</target>
        </trans-unit>
        <trans-unit id="94507a67a9f296aef298df58dcc28d14f54c548d" translate="yes" xml:space="preserve">
          <source>Unlike pattern matching via &lt;code&gt;=&lt;/code&gt;, if the sizes of the left and right lists don't match, destructuring simply stops instead of raising an error.</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; によるパターンマッチングとは異なり、左側と右側のリストのサイズが一致しない場合、構造化はエラーを発生させるのではなく単に停止します。</target>
        </trans-unit>
        <trans-unit id="d9890160c4982970542ec14738f7c0e637cd08c2" translate="yes" xml:space="preserve">
          <source>Unlinking the task process started with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;. If you unlink the processes and the task does not belong to any supervisor, you may leave dangling tasks in case the parent dies.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; で開始されたタスクプロセスのリンク解除。プロセスのリンクを解除し、タスクがどのスーパーバイザーにも属していない場合、親が死亡した場合に備えて、宙ぶらりんのタスクを残すことができます。</target>
        </trans-unit>
        <trans-unit id="11bf0305dcee4e7f1f93ac8f6d2c882005c71769" translate="yes" xml:space="preserve">
          <source>Unlinks and shuts down the task, and then checks for a reply.</source>
          <target state="translated">リンクを解除してタスクをシャットダウンし、返信を確認します。</target>
        </trans-unit>
        <trans-unit id="e12be5ddb337ed9c6e7cda41d5621c3350bb29f0" translate="yes" xml:space="preserve">
          <source>Unloads the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; アンロードします。</target>
        </trans-unit>
        <trans-unit id="91e4a94ba2bbaf79b224a6d7c13a57d58235dccd" translate="yes" xml:space="preserve">
          <source>Unlocks the given dependencies.</source>
          <target state="translated">与えられた依存関係のロックを解除します。</target>
        </trans-unit>
        <trans-unit id="4a00f27d2826c92443fcf4fb80f0a03b5f251cb2" translate="yes" xml:space="preserve">
          <source>Unquoted atoms start with a colon (&lt;code&gt;:&lt;/code&gt;) which must be immediately followed by an underscore or a Unicode letter. The atom may continue using a sequence of Unicode letters, numbers, underscores, and &lt;code&gt;@&lt;/code&gt;. Atoms may end in &lt;code&gt;!&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt;. See &lt;a href=&quot;unicode-syntax&quot;&gt;Unicode Syntax&lt;/a&gt; for a formal specification. Valid unquoted atoms are: &lt;code&gt;:ok&lt;/code&gt;, &lt;code&gt;:ISO8601&lt;/code&gt;, and &lt;code&gt;:integer?&lt;/code&gt;.</source>
          <target state="translated">（引用符で囲まれていない原子は、コロンで始まる &lt;code&gt;:&lt;/code&gt; ）直ちに下線またはUnicode文字が続かなければなりません。アトムは、Unicodeの文字、数字、アンダースコア、 &lt;code&gt;@&lt;/code&gt; のシーケンスを引き続き使用できます。原子はで終わる場合があり &lt;code&gt;!&lt;/code&gt; または &lt;code&gt;?&lt;/code&gt; 。形式的な仕様については、&lt;a href=&quot;unicode-syntax&quot;&gt;Unicode構文&lt;/a&gt;を参照してください。引用符で囲まれていない有効な原子は、 &lt;code&gt;:ISO8601&lt;/code&gt; &lt;code&gt;:ok&lt;/code&gt; 、：ISO8601、 &lt;code&gt;:integer?&lt;/code&gt; です。。</target>
        </trans-unit>
        <trans-unit id="9dac4c6b4443202cc8583016a137c1afc9253dd0" translate="yes" xml:space="preserve">
          <source>Unquotes the given expression inside a quoted expression.</source>
          <target state="translated">引用符で囲まれた式の中で、与えられた式の引用符を解除します。</target>
        </trans-unit>
        <trans-unit id="51a3755b8963981e97be12c3f11d259db2190b9a" translate="yes" xml:space="preserve">
          <source>Unquotes the given list expanding its arguments.</source>
          <target state="translated">与えられたリストの引数を展開して引用符を解除します。</target>
        </trans-unit>
        <trans-unit id="08053b86ce7b78d018827349dcd3d261a98511fd" translate="yes" xml:space="preserve">
          <source>Unquoting</source>
          <target state="translated">Unquoting</target>
        </trans-unit>
        <trans-unit id="3494d6cc701ad4351f6f7781151b09d2bb134df7" translate="yes" xml:space="preserve">
          <source>Unquoting is very useful when working with macros. When writing macros, developers are able to receive code chunks and inject them inside other code chunks, which can be used to transform code or write code that generates code during compilation.</source>
          <target state="translated">アンクォートは、マクロを扱う際に非常に便利です。マクロを書くときに、開発者はコードチャンクを受け取って他のコードチャンクの中に注入することができ、コードを変換したり、コンパイル中にコードを生成するコードを書いたりするのに使うことができます。</target>
        </trans-unit>
        <trans-unit id="70957cdc250ef56f1d10dffbca7af3e59a0b3d13" translate="yes" xml:space="preserve">
          <source>Unregister entries for a given key matching a pattern.</source>
          <target state="translated">パターンに一致するキーのエントリの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="e900939218e97f5edc5de0f78b18c10f6778936f" translate="yes" xml:space="preserve">
          <source>Unregisters all entries for the given &lt;code&gt;key&lt;/code&gt; associated to the current process in &lt;code&gt;registry&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;registry&lt;/code&gt; 内の現在のプロセスに関連付けられている特定の &lt;code&gt;key&lt;/code&gt; すべてのエントリを登録解除します。</target>
        </trans-unit>
        <trans-unit id="d8766d37827e5742cd1fbee4aed47607e97dcf45" translate="yes" xml:space="preserve">
          <source>Unregisters entries for keys matching a pattern associated to the current process in &lt;code&gt;registry&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;registry&lt;/code&gt; 内の現在のプロセスに関連付けられているパターンに一致するキーのエントリの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="872098875ed11d68f92691129750cd5f8910e31e" translate="yes" xml:space="preserve">
          <source>Updates &lt;code&gt;key&lt;/code&gt; with the given function.</source>
          <target state="translated">指定された関数で &lt;code&gt;key&lt;/code&gt; を更新します。</target>
        </trans-unit>
        <trans-unit id="bd67c840db661b5ff35c7988f0c313e081b6c4a7" translate="yes" xml:space="preserve">
          <source>Updates a key in a nested structure.</source>
          <target state="translated">ネストされた構造体のキーを更新します。</target>
        </trans-unit>
        <trans-unit id="913040a7783b16d3a66109d11466e1f3715b2f23" translate="yes" xml:space="preserve">
          <source>Updates a nested structure via the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; を介してネストされた構造を更新します。</target>
        </trans-unit>
        <trans-unit id="a6ff992d51a35ca8eeaea3b46d7a9f9c7a1d02bf" translate="yes" xml:space="preserve">
          <source>Updates modification time (mtime) and access time (atime) of the given file.</source>
          <target state="translated">与えられたファイルの修正時間(mtime)とアクセス時間(atime)を更新します。</target>
        </trans-unit>
        <trans-unit id="97ba8cd55c834ecfd3ee8f8cbce9327196d85da6" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;keywords&lt;/code&gt; with the given function.</source>
          <target state="translated">&lt;code&gt;keywords&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を指定された関数で更新します。</target>
        </trans-unit>
        <trans-unit id="b837a72c944278925f970add9604780f7fe0b85f" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; with the given function.</source>
          <target state="translated">指定された関数で &lt;code&gt;map&lt;/code&gt; 内の &lt;code&gt;key&lt;/code&gt; を更新します。</target>
        </trans-unit>
        <trans-unit id="37bc2bc502a7c11dcf205d8472d9e975015a6ad3" translate="yes" xml:space="preserve">
          <source>Updates the &lt;code&gt;key&lt;/code&gt; with the given function.</source>
          <target state="translated">指定された関数で &lt;code&gt;key&lt;/code&gt; を更新します。</target>
        </trans-unit>
        <trans-unit id="40277704761ae2f8a4bc8d33a1fd26a3d503725b" translate="yes" xml:space="preserve">
          <source>Updates the agent state via the given anonymous function.</source>
          <target state="translated">与えられた匿名関数を介してエージェントの状態を更新します。</target>
        </trans-unit>
        <trans-unit id="f8a3623b94bb3839740129bc6596f649a9a9ecf0" translate="yes" xml:space="preserve">
          <source>Updates the agent state via the given function.</source>
          <target state="translated">与えられた関数を介してエージェントの状態を更新します。</target>
        </trans-unit>
        <trans-unit id="9f675d5eaf4774279a670e6224dcc645e0067b54" translate="yes" xml:space="preserve">
          <source>Updates the given dependencies.</source>
          <target state="translated">与えられた依存関係を更新します。</target>
        </trans-unit>
        <trans-unit id="416682303e7f5a28e1fe42385084449506b18f32" translate="yes" xml:space="preserve">
          <source>Updates the value for &lt;code&gt;key&lt;/code&gt; for the current process in the unique &lt;code&gt;registry&lt;/code&gt;.</source>
          <target state="translated">一意の &lt;code&gt;registry&lt;/code&gt; 内の現在のプロセスの &lt;code&gt;key&lt;/code&gt; の値を更新します。</target>
        </trans-unit>
        <trans-unit id="8c9bcfae2fb3ebecd029c8eccc3ce697839499a2" translate="yes" xml:space="preserve">
          <source>Upgrading a dependency often requires the projects it depends on to upgrade too. If you would rather update a single dependency and not touch its children, you can explicitly unlock the single dependency and run &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html&quot;&gt;&lt;code&gt;mix deps.get&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">依存関係をアップグレードするには、依存するプロジェクトもアップグレードする必要があります。単一の依存関係を更新し、その子に触れたくない場合は、単一の依存関係のロックを明示的に解除して、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html&quot;&gt; &lt;code&gt;mix deps.get&lt;/code&gt; &lt;/a&gt;：を実行できます。</target>
        </trans-unit>
        <trans-unit id="e3b2c87fbdfa81069562e3801f3b834f583f3068" translate="yes" xml:space="preserve">
          <source>Usage would be:</source>
          <target state="translated">使用法はこうだろう。</target>
        </trans-unit>
        <trans-unit id="ad0ecf3efc2fafd77bbedf42c03404f90e27c42f" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#defines?/3&quot;&gt;&lt;code&gt;defines?/3&lt;/code&gt;&lt;/a&gt; to assert for a specific type.</source>
          <target state="translated">特定のタイプを表明するには、define &lt;a href=&quot;#defines?/3&quot;&gt; &lt;code&gt;defines?/3&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="787801e07ca737f4cd69bf93e70004cb3e751db3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#query_decoder/1&quot;&gt;&lt;code&gt;query_decoder/1&lt;/code&gt;&lt;/a&gt; if you want to iterate over each value manually.</source>
          <target state="translated">各値を手動で反復処理する場合は、&lt;a href=&quot;#query_decoder/1&quot;&gt; &lt;code&gt;query_decoder/1&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="3797a8276a8bc54fb5a97169a1b9a858a6ddd368" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#write/2&quot;&gt;&lt;code&gt;write/2&lt;/code&gt;&lt;/a&gt; for devices with encoding.</source>
          <target state="translated">エンコーディングを備えたデバイスには&lt;a href=&quot;#write/2&quot;&gt; &lt;code&gt;write/2&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="1b36f40ce27bbfefdab4f321df212af5d062ba4c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;enum#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt; to traverse over the arguments (v1.0)</source>
          <target state="translated">&lt;a href=&quot;enum#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; &lt;/a&gt;を使用して引数をトラバースします（v1.0）</target>
        </trans-unit>
        <trans-unit id="e5cf1dfe97340fea8a70dd96826ef4351d80ad46" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;http://www.erlang.org/doc/man/binary.html#replace-4&quot;&gt;&lt;code&gt;:binary.replace/4&lt;/code&gt;&lt;/a&gt; (v1.0)</source>
          <target state="translated">&lt;a href=&quot;http://www.erlang.org/doc/man/binary.html#replace-4&quot;&gt; &lt;code&gt;:binary.replace/4&lt;/code&gt; &lt;/a&gt;（v1.0）を使用してください</target>
        </trans-unit>
        <trans-unit id="b10d005a7cda664f5d2f9f25b76adbe1cd127651" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt; to traverse over the arguments (v1.0)</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; &lt;/a&gt;を使用して、引数をトラバースします（v1.0）</target>
        </trans-unit>
        <trans-unit id="14cd7437712581c1861b1448cca82e849c0c602e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#def/2&quot;&gt;public functions&lt;/a&gt; (v1.0)</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#def/2&quot;&gt;パブリック関数を&lt;/a&gt;使用する（v1.0）</target>
        </trans-unit>
        <trans-unit id="5b50f96a6422a56c25eb2e39a749132fd99302b1" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#pad_leading/3&quot;&gt;&lt;code&gt;String.pad_leading/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#pad_trailing/3&quot;&gt;&lt;code&gt;String.pad_trailing/3&lt;/code&gt;&lt;/a&gt; with a binary padding (v1.3)</source>
          <target state="translated">使用&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#pad_leading/3&quot;&gt; &lt;code&gt;String.pad_leading/3&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#pad_trailing/3&quot;&gt; &lt;code&gt;String.pad_trailing/3&lt;/code&gt; &lt;/a&gt;バイナリパディング（V1.3）と</target>
        </trans-unit>
        <trans-unit id="12d593b29c9401cb9ed1f77973372f98c62abba4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#trim_leading/2&quot;&gt;&lt;code&gt;String.trim_leading/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#trim_trailing/2&quot;&gt;&lt;code&gt;String.trim_trailing/2&lt;/code&gt;&lt;/a&gt; with a binary as second argument (v1.3)</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#trim_leading/2&quot;&gt; &lt;code&gt;String.trim_leading/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#trim_trailing/2&quot;&gt; &lt;code&gt;String.trim_trailing/2&lt;/code&gt; &lt;/a&gt;を、2番目の引数としてバイナリとともに使用します（v1.3）</target>
        </trans-unit>
        <trans-unit id="b4a9dd9a756931a4a385ac5c2dd7ee781d1b07f9" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;string#pad_leading/3&quot;&gt;&lt;code&gt;String.pad_leading/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;string#pad_trailing/3&quot;&gt;&lt;code&gt;String.pad_trailing/3&lt;/code&gt;&lt;/a&gt; with a binary padding (v1.3)</source>
          <target state="translated">使用&lt;a href=&quot;string#pad_leading/3&quot;&gt; &lt;code&gt;String.pad_leading/3&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;string#pad_trailing/3&quot;&gt; &lt;code&gt;String.pad_trailing/3&lt;/code&gt; &lt;/a&gt;バイナリパディング（V1.3）と</target>
        </trans-unit>
        <trans-unit id="20040427069949a8d4027129b310722c2c30b8ff" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;string#trim_leading/2&quot;&gt;&lt;code&gt;String.trim_leading/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;string#trim_trailing/2&quot;&gt;&lt;code&gt;String.trim_trailing/2&lt;/code&gt;&lt;/a&gt; with a binary as second argument (v1.3)</source>
          <target state="translated">2番目の引数としてバイナリを使用して&lt;a href=&quot;string#trim_leading/2&quot;&gt; &lt;code&gt;String.trim_leading/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;string#trim_trailing/2&quot;&gt; &lt;code&gt;String.trim_trailing/2&lt;/code&gt; &lt;/a&gt;を使用（v1.3）</target>
        </trans-unit>
        <trans-unit id="2f9b8c50f1c8c820e6db1607e6e6745fc6ae1b90" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;%&lt;/code&gt; (&lt;code&gt;&amp;lt;%=&lt;/code&gt; is allowed only in start expressions) (v1.0)</source>
          <target state="translated">使用 &lt;code&gt;&amp;lt;%&lt;/code&gt; （ &lt;code&gt;&amp;lt;%=&lt;/code&gt; は開始式でのみ許可されます）（v1.0）</target>
        </trans-unit>
        <trans-unit id="c58ca1ae3a377183620422c237e986e4c5bfdee5" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;%&lt;/code&gt; (&lt;code&gt;&amp;lt;%=&lt;/code&gt; is allowed only on start expressions) (v1.0)</source>
          <target state="translated">&lt;code&gt;&amp;lt;%&lt;/code&gt; を使用（ &lt;code&gt;&amp;lt;%=&lt;/code&gt; は開始式でのみ許可されます）（v1.0）</target>
        </trans-unit>
        <trans-unit id="ee94c06bb86bdaca513c3a62f49490454be42e9c" translate="yes" xml:space="preserve">
          <source>Use a map (v1.0)</source>
          <target state="translated">地図を使用してください (v1.0)</target>
        </trans-unit>
        <trans-unit id="4d74b43fbed5164c7d0cf7a52539703c48335b7c" translate="yes" xml:space="preserve">
          <source>Use an expression or explicitly return &lt;code&gt;nil&lt;/code&gt; (v1.0)</source>
          <target state="translated">式を使用するか、明示的に &lt;code&gt;nil&lt;/code&gt; を返します（v1.0）</target>
        </trans-unit>
        <trans-unit id="695acd02888c70a7bd24e240078a062e8cefd82c" translate="yes" xml:space="preserve">
          <source>Use cases for IO data</source>
          <target state="translated">IOデータのユースケース</target>
        </trans-unit>
        <trans-unit id="17ecf402c8b50a984590bda594e338082a23c4c0" translate="yes" xml:space="preserve">
          <source>Use direct message matching (v1.0)</source>
          <target state="translated">ダイレクトメッセージマッチングを使用する (v1.0)</target>
        </trans-unit>
        <trans-unit id="7d7bc258dd57ccdb77c4d94fa239755b4e4dbe79" translate="yes" xml:space="preserve">
          <source>Use parentheses (v1.0)</source>
          <target state="translated">括弧を使用する (v1.0)</target>
        </trans-unit>
        <trans-unit id="d1a132274b1eb6b7319062ced70e808cf7c404ca" translate="yes" xml:space="preserve">
          <source>Use processes only to model runtime properties, never for code organization. And even when you think something could be done in parallel with processes, often it is best to let the callers of your library decide how to parallelize, rather than impose a certain execution flow in users of your code.</source>
          <target state="translated">プロセスは実行時のプロパティをモデル化するためだけに使用し、決してコードを整理するためには使用しないでください。また、プロセスと並行して何かを行うことができそうだと思った場合でも、コードの利用者に特定の実行フローを課すよりも、ライブラリの呼び出し元に並列化の方法を決定させるのが最善の場合が多いです。</target>
        </trans-unit>
        <trans-unit id="72ac53e8279e1fbc4a4e474748dc78b85a97986e" translate="yes" xml:space="preserve">
          <source>Use public functions (v1.0)</source>
          <target state="translated">公開関数の使用 (v1.0)</target>
        </trans-unit>
        <trans-unit id="e7e9e97b63195c13fec074e748d6a1b624c2147f" translate="yes" xml:space="preserve">
          <source>Use single-letter aliases (v1.0)</source>
          <target state="translated">単一文字のエイリアスを使用する (v1.0)</target>
        </trans-unit>
        <trans-unit id="5d5567686d3e6ae0d4956f84da54e7d67f04b834" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;:since&lt;/code&gt; key in the documentation metadata to annotate whenever new functions or modules are added to your API.</source>
          <target state="translated">ドキュメントメタデータの &lt;code&gt;:since&lt;/code&gt; キーを使用して、新しい関数またはモジュールがAPIに追加されるたびに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="47f85339a5f0f7ba3fc69739fe71460337f1ced4" translate="yes" xml:space="preserve">
          <source>Use the pin operator &lt;code&gt;^&lt;/code&gt; when you want to pattern match against a variable&amp;rsquo;s &lt;em&gt;existing value&lt;/em&gt; rather than rebinding the variable.</source>
          <target state="translated">変数を再バインドするのではなく、変数の&lt;em&gt;既存の値&lt;/em&gt;に対してパターンマッチングを行う場合は、ピン演算子 &lt;code&gt;^&lt;/code&gt; を使用します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2fb9026bf683fe97be9805f8d4ee8da3a7030195" translate="yes" xml:space="preserve">
          <source>Use the pin operator &lt;code&gt;^&lt;/code&gt; when you want to pattern match against an existing variable&amp;rsquo;s value rather than rebinding the variable:</source>
          <target state="translated">変数を再バインドするのではなく、既存の変数の値に対してパターンマッチングを行う場合は、ピン演算子 &lt;code&gt;^&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="0b63a0f2b65fabcf35daab1c96a88a9c4182865a" translate="yes" xml:space="preserve">
          <source>Use the singular form, such as: &lt;code&gt;:second&lt;/code&gt;, &lt;code&gt;:millisecond&lt;/code&gt;, and so on (v1.4)</source>
          <target state="translated">&lt;code&gt;:second&lt;/code&gt; 、 &lt;code&gt;:millisecond&lt;/code&gt; などの単数形を使用します（v1.4）</target>
        </trans-unit>
        <trans-unit id="d62760f6801ea132b87f52fc490f15e5c30ebb87" translate="yes" xml:space="preserve">
          <source>Use this only for debugging information.</source>
          <target state="translated">デバッグ情報のみに使用してください。</target>
        </trans-unit>
        <trans-unit id="654833a705a392b91db5fb486d867850f6f6d4da" translate="yes" xml:space="preserve">
          <source>Used by helpers and it has a default maximum cap of 80 chars.</source>
          <target state="translated">ヘルパーによって使用され、デフォルトでは80文字の最大キャップを持っています。</target>
        </trans-unit>
        <trans-unit id="6f19f4b56cd4eb0479f604b05000a49967ca0779" translate="yes" xml:space="preserve">
          <source>Used by types and bitstrings to specify types.</source>
          <target state="translated">型やビットストリングで型を指定する際に使用します。</target>
        </trans-unit>
        <trans-unit id="27f134f77aed07ba771f04e70c26fcde14c293be" translate="yes" xml:space="preserve">
          <source>Used to combine matching clauses.</source>
          <target state="translated">一致する節を結合するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d3e14268db3616058b87c0710752c8757db571c3" translate="yes" xml:space="preserve">
          <source>Useful for adding side effects (like printing) to a stream.</source>
          <target state="translated">ストリームに副作用(印刷など)を追加するのに便利です。</target>
        </trans-unit>
        <trans-unit id="b4a25e416b54812cf786abc2853d57e8a5a5d837" translate="yes" xml:space="preserve">
          <source>Useful in umbrella applications to execute a command on each child app:</source>
          <target state="translated">アンブレラアプリで子アプリごとにコマンドを実行するのに便利です。</target>
        </trans-unit>
        <trans-unit id="ccd0085c486cb23718479523b31aac167b10d224" translate="yes" xml:space="preserve">
          <source>Useful when dependencies need to be reloaded due to change of global state.</source>
          <target state="translated">グローバル状態の変更により依存関係をリロードする必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="52dd4a7101ad34727c991e5c7418caedb4c5ab1e" translate="yes" xml:space="preserve">
          <source>User home directory, exception on error.</source>
          <target state="translated">ユーザのホームディレクトリ、エラー時に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="3b425e136b2a26688fb41476a54559087648780b" translate="yes" xml:space="preserve">
          <source>User home directory.</source>
          <target state="translated">ユーザーのホームディレクトリ。</target>
        </trans-unit>
        <trans-unit id="c0ef205df825ba4213dcb43cc225636454550c49" translate="yes" xml:space="preserve">
          <source>User-defined types</source>
          <target state="translated">ユーザー定義タイプ</target>
        </trans-unit>
        <trans-unit id="9718cbc91389f0a24d01843793c6b8f5bef22b1f" translate="yes" xml:space="preserve">
          <source>Users can read the documentation for public Mix tasks by running &lt;code&gt;mix help my_task&lt;/code&gt;. The documentation that will be shown is the &lt;code&gt;@moduledoc&lt;/code&gt; of the task's module.</source>
          <target state="translated">ユーザーは、 &lt;code&gt;mix help my_task&lt;/code&gt; 実行して、パブリックミックスタスクのドキュメントを読むことができます。表示されるドキュメントは、タスクのモジュールの &lt;code&gt;@moduledoc&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="30bca3fe935d22a9fb82d1874f535be3bcc5d54b" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function, which is detailed in a later section.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が関数である場合を除き、&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造をトラバースします。</target>
        </trans-unit>
        <trans-unit id="7504c890d2e677e3b9b91ddd28b0a2c13353b513" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function. If the key is a function, it will be invoked as specified in &lt;a href=&quot;#get_and_update_in/3&quot;&gt;&lt;code&gt;get_and_update_in/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が関数でない限り、&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造をトラバースします。キーが関数の場合は、&lt;a href=&quot;#get_and_update_in/3&quot;&gt; &lt;code&gt;get_and_update_in/3&lt;/code&gt; で&lt;/a&gt;指定されているように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cb5ab22fadbe3ddb46c966e8ef4864a52c44d738" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; protocol to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function. If the key is a function, it will be invoked as specified in &lt;a href=&quot;#get_and_update_in/3&quot;&gt;&lt;code&gt;get_and_update_in/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が関数でない限り、&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;プロトコルを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造をトラバースします。キーが関数の場合は、&lt;a href=&quot;#get_and_update_in/3&quot;&gt; &lt;code&gt;get_and_update_in/3&lt;/code&gt; で&lt;/a&gt;指定されているように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b648c806a5b72ce2e22dd69f6650416bf9c513d5" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function, which is detailed in a later section.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が関数である場合を除き、&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造をトラバースします。これについては、後のセクションで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="ccc9c406282a5ba917ce4d72d479e6ebb00bca8f" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function. If the key is a function, it will be invoked as specified in &lt;a href=&quot;#get_and_update_in/3&quot;&gt;&lt;code&gt;get_and_update_in/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が関数でない限り、&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造をトラバースします。キーが関数の場合、&lt;a href=&quot;#get_and_update_in/3&quot;&gt; &lt;code&gt;get_and_update_in/3&lt;/code&gt; で&lt;/a&gt;指定されているように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="649170178c35bb19e659a8d532a363cd019f5cd4" translate="yes" xml:space="preserve">
          <source>Uses the &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; protocol to traverse the structures according to the given &lt;code&gt;keys&lt;/code&gt;, unless the &lt;code&gt;key&lt;/code&gt; is a function. If the key is a function, it will be invoked as specified in &lt;a href=&quot;#get_and_update_in/3&quot;&gt;&lt;code&gt;get_and_update_in/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が関数でない限り、&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;プロトコルを使用して、指定された &lt;code&gt;keys&lt;/code&gt; に従って構造をトラバースします。キーが関数の場合、&lt;a href=&quot;#get_and_update_in/3&quot;&gt; &lt;code&gt;get_and_update_in/3&lt;/code&gt; で&lt;/a&gt;指定されているように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ef97952dc7c1cf9b1acf2d4929c04b260422cc0c" translate="yes" xml:space="preserve">
          <source>Uses the given module in the current context.</source>
          <target state="translated">現在のコンテキストで指定したモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="90cad9ec714dc9a102448582d410c612025f4e51" translate="yes" xml:space="preserve">
          <source>Uses the merge sort algorithm.</source>
          <target state="translated">マージソートアルゴリズムを使用します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
