<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="814c5f11fc85ecacb301d5d1ff7a5207b63cc546" translate="yes" xml:space="preserve">
          <source>Starts monitoring the given &lt;code&gt;port&lt;/code&gt; from the calling process.</source>
          <target state="translated">呼び出しプロセスから &lt;code&gt;port&lt;/code&gt; れたポートの監視を開始します。</target>
        </trans-unit>
        <trans-unit id="32f7fdf8c34390c9e691d76ef8c0ec7bd0d81af7" translate="yes" xml:space="preserve">
          <source>Starts the current application and runs code.</source>
          <target state="translated">現在のアプリケーションを起動し、コードを実行します。</target>
        </trans-unit>
        <trans-unit id="465701ca429a2dfabc3bc5f01a8bd60e3b9231c7" translate="yes" xml:space="preserve">
          <source>Starts the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; 起動します。</target>
        </trans-unit>
        <trans-unit id="e2271caeb4b7d5b3c207dd94c7b7c318ed2188f2" translate="yes" xml:space="preserve">
          <source>Starts the registry as a supervisor process.</source>
          <target state="translated">レジストリをスーパーバイザプロセスとして起動します。</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="a04227ba1319a1fad4347603729d051498bac906" translate="yes" xml:space="preserve">
          <source>Static code analysis</source>
          <target state="translated">静的コード解析</target>
        </trans-unit>
        <trans-unit id="cdde4f20ba31a24db2cc7ae71135c8353631907b" translate="yes" xml:space="preserve">
          <source>Steps</source>
          <target state="translated">Steps</target>
        </trans-unit>
        <trans-unit id="a62a6d902db47855d8f77112868e3787eabbca53" translate="yes" xml:space="preserve">
          <source>Stopping an application with a callback module has three steps:</source>
          <target state="translated">コールバックモジュールでアプリケーションを停止するには、3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="3753ad0cdb9c49b6498a88fe4f4514a2b9b36ece" translate="yes" xml:space="preserve">
          <source>Stopping an application without a callback module is defined, but except for some system tracing, it is in practice a no-op.</source>
          <target state="translated">コールバックモジュールを使わずにアプリケーションを停止することが定義されていますが、システムトレースを除いては、実際には何もしないことになっています。</target>
        </trans-unit>
        <trans-unit id="d5b2d506e52eb47a1075dbad242127c01e521df7" translate="yes" xml:space="preserve">
          <source>Stopping applications</source>
          <target state="translated">アプリケーションの停止</target>
        </trans-unit>
        <trans-unit id="16d9ee2c7e28df63e19079e90e7824e30d92fc9f" translate="yes" xml:space="preserve">
          <source>Stops a child process started via &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; &lt;/a&gt;によって開始された子プロセスを停止します。</target>
        </trans-unit>
        <trans-unit id="1d836dc29fd66efd06619857a7f3fbdbb2570615" translate="yes" xml:space="preserve">
          <source>Stops the IO device and returns the remaining input/output buffers.</source>
          <target state="translated">IOデバイスを停止し、残りの入出力バッファを返します。</target>
        </trans-unit>
        <trans-unit id="420cba62897b963528b14026eceb60569ceedeae" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the given reason.</source>
          <target state="translated">与えられた理由で呼び出したプロセスの実行を停止します。</target>
        </trans-unit>
        <trans-unit id="1b87ddfd2f0a1efe1c63c07d6457515d241e5a11" translate="yes" xml:space="preserve">
          <source>Stops the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; 停止します。</target>
        </trans-unit>
        <trans-unit id="9e5206ef2f4946342c59fa2df527c82ea74eb890" translate="yes" xml:space="preserve">
          <source>Stores a compilation option.</source>
          <target state="translated">コンパイルオプションを格納します。</target>
        </trans-unit>
        <trans-unit id="5e57817ff2a6b8e48e8d562b55890d766e0aa874" translate="yes" xml:space="preserve">
          <source>Stores all given compilation options.</source>
          <target state="translated">与えられたすべてのコンパイルオプションを格納します。</target>
        </trans-unit>
        <trans-unit id="7a8ca646fdc158d3d531a0223dadbec6991917ca" translate="yes" xml:space="preserve">
          <source>Stores registry metadata.</source>
          <target state="translated">レジストリのメタデータを格納します。</target>
        </trans-unit>
        <trans-unit id="486a63f10cb978abccfbd8ecf134b1efae0f41f9" translate="yes" xml:space="preserve">
          <source>Stores the given &lt;code&gt;key&lt;/code&gt;-&lt;code&gt;value&lt;/code&gt; pair in the process dictionary.</source>
          <target state="translated">店舗与えられた &lt;code&gt;key&lt;/code&gt; - &lt;code&gt;value&lt;/code&gt; プロセス辞書のペア。</target>
        </trans-unit>
        <trans-unit id="3a40588dab874cb0f15e4d524b5977f1cc44faf9" translate="yes" xml:space="preserve">
          <source>Storing information with attributes</source>
          <target state="translated">属性を使った情報の保存</target>
        </trans-unit>
        <trans-unit id="876f3e0202ca40dedf2e5ab6577eba1ae637fb53" translate="yes" xml:space="preserve">
          <source>Strategies</source>
          <target state="translated">Strategies</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="74985da267c6803b262f117de72af2d02e48029f" translate="yes" xml:space="preserve">
          <source>Streams</source>
          <target state="translated">Streams</target>
        </trans-unit>
        <trans-unit id="32937312f1205a985f371273166b0a08620a94b4" translate="yes" xml:space="preserve">
          <source>Streams are composable, lazy enumerables (for an introduction on enumerables, see the &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module). Any enumerable that generates elements one by one during enumeration is called a stream. For example, Elixir's &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is a stream:</source>
          <target state="translated">ストリームは、合成可能な遅延列挙型です（&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;については、Enumモジュールを参照してください）。列挙中に要素を1つずつ生成する列挙可能なものは、ストリームと呼ばれます。たとえば、エリクサーの&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;はストリームです。</target>
        </trans-unit>
        <trans-unit id="9c5426850f84369e2b7dbe33f323ee50c006981f" translate="yes" xml:space="preserve">
          <source>Streams are composable, lazy enumerables (for an introduction on enumerables, see the &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module). Any enumerable that generates elements one by one during enumeration is called a stream. For example, Elixir's &lt;a href=&quot;https://hexdocs.pm/elixir/Range.html&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is a stream:</source>
          <target state="translated">ストリームは、構成可能で遅延のある列挙型です（&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;については、Enumモジュールを参照してください）。列挙中に要素を1つずつ生成する列挙可能なものは、ストリームと呼ばれます。例えば、エリクサーの&lt;a href=&quot;https://hexdocs.pm/elixir/Range.html&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;ストリームです。</target>
        </trans-unit>
        <trans-unit id="4d05b9a39a36694d426084ba23a5f9e69c3f3e62" translate="yes" xml:space="preserve">
          <source>Streams are lazy, composable enumerables.</source>
          <target state="translated">ストリームは怠惰でコンポーザブルな列挙可能なものです。</target>
        </trans-unit>
        <trans-unit id="712809970aa25b88c8417d13c741aaaed8cdc5c7" translate="yes" xml:space="preserve">
          <source>Streams the enumerable in chunks, containing &lt;code&gt;count&lt;/code&gt; elements each, where each new chunk starts &lt;code&gt;step&lt;/code&gt; elements into the enumerable.</source>
          <target state="translated">enumerableをチャンク単位でストリーミングします。各 &lt;code&gt;count&lt;/code&gt; 要素が含まれ、新しいチャンクごとに &lt;code&gt;step&lt;/code&gt; 要素がenumerableに開始されます。</target>
        </trans-unit>
        <trans-unit id="c3766632b158ff372c632bd5e459fa938b757447" translate="yes" xml:space="preserve">
          <source>Strictly boolean &quot;and&quot; operator.</source>
          <target state="translated">厳密にはブール演算子の &quot;and &quot;演算子。</target>
        </trans-unit>
        <trans-unit id="a5a9a0e0f16ce8cccca691f5a88a387331ed3a60" translate="yes" xml:space="preserve">
          <source>Strictly boolean &quot;not&quot; operator.</source>
          <target state="translated">厳密にはブール値の &quot;not &quot;演算子。</target>
        </trans-unit>
        <trans-unit id="307c1d3f27f897db66810f52b5d24b80983a2d95" translate="yes" xml:space="preserve">
          <source>Strictly boolean &quot;or&quot; operator.</source>
          <target state="translated">厳密にはブール値の &quot;or &quot;演算子。</target>
        </trans-unit>
        <trans-unit id="1134f2ebe54abc3c1e5e36f6931e4a7294126534" translate="yes" xml:space="preserve">
          <source>Strictly equal to operator.</source>
          <target state="translated">厳密には演算子に等しい。</target>
        </trans-unit>
        <trans-unit id="30cf2e475f38e7c13632c86b9147ef4d7d19d6a3" translate="yes" xml:space="preserve">
          <source>Strictly not equal to operator.</source>
          <target state="translated">厳密には演算子と等しくない。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="642ccf43dc1d6fbbbae9dcb9d0b32837c15cd30f" translate="yes" xml:space="preserve">
          <source>String (binary) concatenation uses the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator but charlists use the lists concatenation operator &lt;code&gt;++&lt;/code&gt;:</source>
          <target state="translated">文字列（バイナリ）連結では &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子を使用しますが、文字リストではリスト連結演算子 &lt;code&gt;++&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7b412c0d58e5e7ad2aecfd7b3150626c2d9ea814" translate="yes" xml:space="preserve">
          <source>String (binary) concatenation uses the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator but charlists, being lists, use the list concatenation operator &lt;code&gt;++&lt;/code&gt;:</source>
          <target state="translated">文字列（バイナリ）連結では &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子を使用しますが、リストであるcharlistsではリスト連結演算子 &lt;code&gt;++&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="83229f3ff8f7ea7a043154af3b38efd4909e3589" translate="yes" xml:space="preserve">
          <source>String and binary operations</source>
          <target state="translated">文字列とバイナリ演算</target>
        </trans-unit>
        <trans-unit id="bd850015d8baaaed30b4f3d5a9c9529f30dc8015" translate="yes" xml:space="preserve">
          <source>String concatenation is done with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">文字列の連結は &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で行われます：</target>
        </trans-unit>
        <trans-unit id="d89992e6bf13c0c402335f758d9be996e2e01c23" translate="yes" xml:space="preserve">
          <source>String.Chars</source>
          <target state="translated">String.Chars</target>
        </trans-unit>
        <trans-unit id="34301512f5868a1de9803c4f3410c31c2c126816" translate="yes" xml:space="preserve">
          <source>String.Chars &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">String.Chars &lt;small&gt;プロトコル&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1c5c736c504b053727fd9efef0379fa8c75be99f" translate="yes" xml:space="preserve">
          <source>String.Chars.t (0)</source>
          <target state="translated">String.Chars.t (0)</target>
        </trans-unit>
        <trans-unit id="53d34343625f2871cea1abc24cdb3f39da79c324" translate="yes" xml:space="preserve">
          <source>String.Chars.to_string (1)</source>
          <target state="translated">String.Chars.to_string (1)</target>
        </trans-unit>
        <trans-unit id="71b9f81312a912f581ac74b4c41e1dabf6deb89c" translate="yes" xml:space="preserve">
          <source>StringIO</source>
          <target state="translated">StringIO</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="4e070c4fd19657d532bad6b50d3c0bc3ada85afa" translate="yes" xml:space="preserve">
          <source>Strings are always represented as themselves in the AST.</source>
          <target state="translated">ASTでは文字列は常にそれ自身で表現されます。</target>
        </trans-unit>
        <trans-unit id="9189545cce6b22534b68d2a8c78d66e2e097a67a" translate="yes" xml:space="preserve">
          <source>Strings can have line breaks in them. You can introduce them using escape sequences:</source>
          <target state="translated">文字列には改行を入れることができます。エスケープシーケンスを使って改行を導入することができます。</target>
        </trans-unit>
        <trans-unit id="8d0eb9bbaa9223ef9b42ad1496081c266e99b1dd" translate="yes" xml:space="preserve">
          <source>Strings in Elixir also support interpolation. This allows you to place some value in the middle of a string by using the &lt;code&gt;#{}&lt;/code&gt; syntax:</source>
          <target state="translated">Elixirの文字列も補間をサポートしています。これにより、 &lt;code&gt;#{}&lt;/code&gt; 構文を使用して、文字列の途中に値を配置できます。</target>
        </trans-unit>
        <trans-unit id="ca18cb73f9036b31075a45d8b8797d8a39e4a864" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are UTF-8 encoded binaries.</source>
          <target state="translated">Elixirの文字列はUTF-8でエンコードされたバイナリです。</target>
        </trans-unit>
        <trans-unit id="04815a1192ce7e3ea77d99b96198de07fc1d57e2" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are a sequence of Unicode characters, typically written between double quoted strings, such as &lt;code&gt;&quot;hello&quot;&lt;/code&gt; and &lt;code&gt;&quot;h&amp;eacute;ll&amp;ograve;&quot;&lt;/code&gt;.</source>
          <target state="translated">Elixirの文字列は、Unicode文字のシーケンスであり、通常、 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; や &lt;code&gt;&quot;h&amp;eacute;ll&amp;ograve;&quot;&lt;/code&gt; などの二重引用符で囲まれた文字列の間に記述されます。</target>
        </trans-unit>
        <trans-unit id="ca38f6c1fbddaf28313e82e08e3bdd20ed71adb5" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are delimited by double quotes, and they are encoded in UTF-8:</source>
          <target state="translated">Elixirの文字列は二重引用符で区切られ、UTF-8でエンコードされています。</target>
        </trans-unit>
        <trans-unit id="956ce6bc8b8fc3893f30f39eeac47f3c2031a779" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are represented internally by binaries which are sequences of bytes:</source>
          <target state="translated">Elixirの文字列は、内部的にはバイト列であるバイナリで表現されます。</target>
        </trans-unit>
        <trans-unit id="06c215a72c89446e5cfff5f5e5552a7f7dfcebc0" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are represented internally by contiguous sequences of bytes known as binaries:</source>
          <target state="translated">Elixir の文字列は、内部的にはバイナリと呼ばれる連続したバイト列で表現されます。</target>
        </trans-unit>
        <trans-unit id="949492a01a0acbead6a5b64c79b3a5208d1fa196" translate="yes" xml:space="preserve">
          <source>Strings, char lists, and word lists sigils</source>
          <target state="translated">文字列、文字列リスト、単語リストの記号</target>
        </trans-unit>
        <trans-unit id="b1b0c17e89281d54da848221c3d7d64fce387af1" translate="yes" xml:space="preserve">
          <source>Strings, charlists, atoms and sigils are kept as is. No character is automatically escaped or unescaped. The choice of delimiter is also respected from the input</source>
          <target state="translated">文字列、文字列、アトム、シグイルはそのまま保持されます。文字が自動的にエスケープされたり、エスケープされなかったりすることはありません。区切り文字の選択は入力からも尊重されます。</target>
        </trans-unit>
        <trans-unit id="5f59a80be2040336e52379484730e3abaf9c3bdf" translate="yes" xml:space="preserve">
          <source>Strips a beam file for a release.</source>
          <target state="translated">リリース用のビームファイルを剥ぎ取ります。</target>
        </trans-unit>
        <trans-unit id="a4ab848fe5c4b2e5f638f279c7f13cc481bac6da" translate="yes" xml:space="preserve">
          <source>Struct</source>
          <target state="translated">Struct</target>
        </trans-unit>
        <trans-unit id="21e310386df8cb3491068257a8769c52dadb5d7d" translate="yes" xml:space="preserve">
          <source>Struct fields are evaluated at compile-time, which allows them to be dynamic. In the example below, &lt;code&gt;10 + 11&lt;/code&gt; is evaluated at compile-time and the age field is stored with value &lt;code&gt;21&lt;/code&gt;:</source>
          <target state="translated">構造体フィールドはコンパイル時に評価されるため、動的にすることができます。以下の例では、 &lt;code&gt;10 + 11&lt;/code&gt; がコンパイル時に評価され、年齢フィールドが値 &lt;code&gt;21&lt;/code&gt; で格納されます。</target>
        </trans-unit>
        <trans-unit id="66b9bcf6fa135918752a0ac296373b9fc45c7435" translate="yes" xml:space="preserve">
          <source>Structs</source>
          <target state="translated">Structs</target>
        </trans-unit>
        <trans-unit id="e48092358ab469205143fa60ac35c7155aef2e05" translate="yes" xml:space="preserve">
          <source>Structs (see below)</source>
          <target state="translated">構造体(下記参照</target>
        </trans-unit>
        <trans-unit id="1fa66ef16d007913d84111c1caa8d36201a759a2" translate="yes" xml:space="preserve">
          <source>Structs alongside protocols provide one of the most important features for Elixir developers: data polymorphism. That&amp;rsquo;s what we will explore in the next chapter.</source>
          <target state="translated">プロトコルとともに構造体は、Elixir開発者にとって最も重要な機能の1つであるデータのポリモーフィズムを提供します。これは、次の章で説明します。</target>
        </trans-unit>
        <trans-unit id="906ed9113d865df8c36d98027adb8b4c438462a1" translate="yes" xml:space="preserve">
          <source>Structs also allow pattern matching on the struct name:</source>
          <target state="translated">構造体は、構造体名のパターン・マッチングも可能です。</target>
        </trans-unit>
        <trans-unit id="403a81b60bd1b9d08b2aba9ce6f1c1e83a0ae9bd" translate="yes" xml:space="preserve">
          <source>Structs are bare maps underneath</source>
          <target state="translated">構造体はその下にあるむき出しのマップ</target>
        </trans-unit>
        <trans-unit id="ef8a5b2279bd1fda0dd17b3e4b37d53f5cabffc3" translate="yes" xml:space="preserve">
          <source>Structs are extensions built on top of maps that provide compile-time checks and default values.</source>
          <target state="translated">構造体は、マップの上に構築された拡張機能で、コンパイル時のチェックやデフォルト値を提供します。</target>
        </trans-unit>
        <trans-unit id="b2f574270028afc6da451166304e7163b0e325d1" translate="yes" xml:space="preserve">
          <source>Structs are usually defined with the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&quot;&gt;&lt;code&gt;Kernel.defstruct/1&lt;/code&gt;&lt;/a&gt; macro:</source>
          <target state="translated">構造体は通常、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&quot;&gt; &lt;code&gt;Kernel.defstruct/1&lt;/code&gt; &lt;/a&gt;マクロで定義されます。</target>
        </trans-unit>
        <trans-unit id="57a5690039bdfaa887691c076af282fbfcd1e385" translate="yes" xml:space="preserve">
          <source>Structs are usually defined with the &lt;a href=&quot;kernel#defstruct/1&quot;&gt;&lt;code&gt;Kernel.defstruct/1&lt;/code&gt;&lt;/a&gt; macro:</source>
          <target state="translated">構造体は通常、&lt;a href=&quot;kernel#defstruct/1&quot;&gt; &lt;code&gt;Kernel.defstruct/1&lt;/code&gt; &lt;/a&gt;マクロで定義されます。</target>
        </trans-unit>
        <trans-unit id="abdab30b78e5e45d65ba3227273c7089180b1f6f" translate="yes" xml:space="preserve">
          <source>Structs built on the map syntax by passing the struct name between &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;{&lt;/code&gt;. For example, &lt;code&gt;%User{...}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; と &lt;code&gt;{&lt;/code&gt; の間に構造体名を渡すことにより、マップ構文に基づいて構築された構造体。たとえば、 &lt;code&gt;%User{...}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6ce56958d9176de03025283b3099e3721e59a8eb" translate="yes" xml:space="preserve">
          <source>Structs can also be used in pattern matching, both for matching on the value of specific keys as well as for ensuring that the matching value is a struct of the same type as the matched value.</source>
          <target state="translated">構造体は、パターン・マッチングでも使用できます。これは、特定のキーの値でのマッチングだけでなく、マッチング値がマッチング値と同じ型の構造体であることを確認するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="627a64dfd0ce65d3cdca0e3adc12f995862ee10f" translate="yes" xml:space="preserve">
          <source>Structs provide &lt;em&gt;compile-time&lt;/em&gt; guarantees that only the fields (and &lt;em&gt;all&lt;/em&gt; of them) defined through &lt;code&gt;defstruct&lt;/code&gt; will be allowed to exist in a struct:</source>
          <target state="translated">構造体が提供&lt;em&gt;コンパイル時の&lt;/em&gt;フィールドのみ（および保証&lt;em&gt;すべて&lt;/em&gt;で定義されたそれらの） &lt;code&gt;defstruct&lt;/code&gt; が構造体に存在することが許可されますが。</target>
        </trans-unit>
        <trans-unit id="9a421e5ee413973974fb1a4739a9e94164f81b8a" translate="yes" xml:space="preserve">
          <source>Structs take the name of the module they&amp;rsquo;re defined in. In the example above, we defined a struct named &lt;code&gt;User&lt;/code&gt;.</source>
          <target state="translated">構造体は、それらが定義されているモジュールの名前を取ります。上記の例では、 &lt;code&gt;User&lt;/code&gt; という名前の構造体を定義しました。</target>
        </trans-unit>
        <trans-unit id="4bcfdb993ad07d9903f21c6cf1477e9cf60ca26b" translate="yes" xml:space="preserve">
          <source>Structs whose internal structure is private to the local module (pattern matching them or directly accessing their fields should not be allowed) should use the &lt;code&gt;@opaque&lt;/code&gt; attribute. Structs whose internal structure is public should use &lt;code&gt;@type&lt;/code&gt;.</source>
          <target state="translated">内部構造がローカルモジュールに対してプライベートである構造体（それらと一致するパターンまたはフィールドに直接アクセスすることは許可されません）は、 &lt;code&gt;@opaque&lt;/code&gt; 属性を使用する必要があります。内部構造がpublicである構造体は &lt;code&gt;@type&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fdac6921d89e2c5b2bed6c0d9d18041f744d060" translate="yes" xml:space="preserve">
          <source>Subtracts &lt;code&gt;datetime2&lt;/code&gt; from &lt;code&gt;datetime1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;datetime2&lt;/code&gt; から &lt;code&gt;datetime1&lt;/code&gt; 減算します。</target>
        </trans-unit>
        <trans-unit id="01f386a46810771df7fb30922411804e63bbb211" translate="yes" xml:space="preserve">
          <source>Subtracts &lt;code&gt;naive_datetime2&lt;/code&gt; from &lt;code&gt;naive_datetime1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;naive_datetime2&lt;/code&gt; から &lt;code&gt;naive_datetime1&lt;/code&gt; 減算します。</target>
        </trans-unit>
        <trans-unit id="14da215035d163f8d2e9ac00ee5de927b8ce5918" translate="yes" xml:space="preserve">
          <source>Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; with the previous accumulator (the initial value being the result returned by &lt;code&gt;start_fun&lt;/code&gt;) and it must return a tuple containing a list of elements to be emitted and the next accumulator. The enumeration finishes if it returns &lt;code&gt;{:halt, acc}&lt;/code&gt;.</source>
          <target state="translated">連続する値は、前のアキュムレータ（初期値は &lt;code&gt;start_fun&lt;/code&gt; によって返された結果）で &lt;code&gt;next_fun&lt;/code&gt; を呼び出すことによって生成され、発行される要素のリストと次のアキュムレータを含むタプルを返す必要があります。列挙は、 &lt;code&gt;{:halt, acc}&lt;/code&gt; 返すと終了します。</target>
        </trans-unit>
        <trans-unit id="522311cdcaf7b3267814d3b09a19e47dea3c8a0f" translate="yes" xml:space="preserve">
          <source>Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; with the previous accumulator and it must return a tuple with the current value and next accumulator. The enumeration finishes if it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">連続する値は、前のアキュムレータで &lt;code&gt;next_fun&lt;/code&gt; を呼び出すことによって生成され、現在の値と次のアキュムレータを持つタプルを返す必要があります。列挙は、 &lt;code&gt;nil&lt;/code&gt; を返すと終了します。</target>
        </trans-unit>
        <trans-unit id="ec0597f1e250ca1cd4f549ebe479656572bafdd1" translate="yes" xml:space="preserve">
          <source>Such a guard would look like this:</source>
          <target state="translated">そんなガードはこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="53658e37fb70788364f35c3ef3e5d3ef21ca3b29" translate="yes" xml:space="preserve">
          <source>Such function calls are efficient memory-wise no matter the size of the range. The implementation of the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol uses logic based solely on the endpoints and does not materialize the whole list of integers.</source>
          <target state="translated">このような関数呼び出しは、範囲のサイズに関係なく、メモリの点で効率的です。&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルの実装は、エンドポイントのみに基づくロジックを使用し、整数のリスト全体を具体化しません。</target>
        </trans-unit>
        <trans-unit id="966ec8ae3fe9132ccbf00f8e3b57331123098390" translate="yes" xml:space="preserve">
          <source>Such function calls are efficient memory-wise no matter the size of the range. The implementation of the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol uses logic based solely on the endpoints and does not materialize the whole list of integers.</source>
          <target state="translated">このような関数呼び出しは、範囲のサイズに関係なく、メモリ的に効率的です。&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルの実装は、エンドポイントのみに基づくロジックを使用し、整数のリスト全体を具体化するわけではありません。</target>
        </trans-unit>
        <trans-unit id="413448cc1d1e59d4180a2c1df46d6b20fc8b2386" translate="yes" xml:space="preserve">
          <source>Such is also useful when using update functions, allowing us to introduce values as we traverse the data structure for updates:</source>
          <target state="translated">このような機能は、更新関数を使用する際にも便利で、更新のためにデータ構造をたどる際に値を導入することができます。</target>
        </trans-unit>
        <trans-unit id="f0c8c931aa883a1710a5641257d627e0b793426c" translate="yes" xml:space="preserve">
          <source>Such is possible for duplicate registries though:</source>
          <target state="translated">このようなことは、重複するレジストリに対しても可能です。</target>
        </trans-unit>
        <trans-unit id="af0451134f60a76766f000f3339e06b3c7fb942b" translate="yes" xml:space="preserve">
          <source>Suffix matches (&lt;code&gt;hello &amp;lt;&amp;gt; &quot; world&quot;&lt;/code&gt;) are not valid patterns.</source>
          <target state="translated">サフィックスの一致（ &lt;code&gt;hello &amp;lt;&amp;gt; &quot; world&quot;&lt;/code&gt; ）は有効なパターンではありません。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="9413f829dc8a9eeac79634a8fecd1c1711b00407" translate="yes" xml:space="preserve">
          <source>Summing up</source>
          <target state="translated">まとめ</target>
        </trans-unit>
        <trans-unit id="008681d0cf389abc8327426047cec2a8b18317d8" translate="yes" xml:space="preserve">
          <source>Supervised tasks</source>
          <target state="translated">監督されたタスク</target>
        </trans-unit>
        <trans-unit id="908fa8f422bcf3bb9ccc6611b5129caf568648d9" translate="yes" xml:space="preserve">
          <source>Supervision trees</source>
          <target state="translated">監修樹木</target>
        </trans-unit>
        <trans-unit id="2cd4fa195ed5b220930149c31cc72fbb131921db" translate="yes" xml:space="preserve">
          <source>Supervisor</source>
          <target state="translated">Supervisor</target>
        </trans-unit>
        <trans-unit id="e1ea02d7a77e7dff85d3adb88e64fc729ba83f91" translate="yes" xml:space="preserve">
          <source>Supervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">スーパーバイザの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d69abd18d455510b99f3ff0e898ca02a3c32b696" translate="yes" xml:space="preserve">
          <source>Supervisor and Application</source>
          <target state="translated">スーパーバイザーとアプリケーション</target>
        </trans-unit>
        <trans-unit id="def06f454fe2aafd60e9bf9113ffca345eac503e" translate="yes" xml:space="preserve">
          <source>Supervisor and GenServers</source>
          <target state="translated">スーパーバイザーとGenServers</target>
        </trans-unit>
        <trans-unit id="12010eabcaf19b4380edc62ef8ef7afae10e6caa" translate="yes" xml:space="preserve">
          <source>Supervisor and worker options</source>
          <target state="translated">監督者と労働者のオプション</target>
        </trans-unit>
        <trans-unit id="ef948fc60b8d6995f73a05206917fcdf6cd81c08" translate="yes" xml:space="preserve">
          <source>Supervisor.Spec</source>
          <target state="translated">Supervisor.Spec</target>
        </trans-unit>
        <trans-unit id="fb7cc714ff3123e658f82813b47d9835dd16af4d" translate="yes" xml:space="preserve">
          <source>Supervisors support different strategies; in the example above, we have chosen &lt;code&gt;:one_for_one&lt;/code&gt;. Furthermore, each supervisor can have many workers and/or supervisors as children, with each one having its own configuration (as outlined in the &quot;Child specification&quot; section).</source>
          <target state="translated">監督者はさまざまな戦略をサポートしています。上記の例では、 &lt;code&gt;:one_for_one&lt;/code&gt; を選択しています。さらに、各スーパーバイザーは多くのワーカーやスーパーバイザーを子として持つことができ、各スーパーバイザーには独自の構成があります（「子の仕様」セクションで概説されています）。</target>
        </trans-unit>
        <trans-unit id="0578994f188280cb99013a5c58ec4c81802bfe88" translate="yes" xml:space="preserve">
          <source>Supervisors support different supervision strategies (through the &lt;code&gt;:strategy&lt;/code&gt; option, as seen above):</source>
          <target state="translated">スーパーバイザは、さまざまな監督戦略をサポートしています（上記のように、 &lt;code&gt;:strategy&lt;/code&gt; オプションを使用）。</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">Support</target>
        </trans-unit>
        <trans-unit id="e6e1e0cd205858fc9432c841e89bbd6483ce3fe6" translate="yes" xml:space="preserve">
          <source>Support for making &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defp/2&quot;&gt;private functions&lt;/a&gt; overridable</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defp/2&quot;&gt;プライベート関数を&lt;/a&gt;オーバーライド可能にするためのサポート</target>
        </trans-unit>
        <trans-unit id="a4eab47f32a482fa6a57e7d78931eebd65984bbe" translate="yes" xml:space="preserve">
          <source>Support for making private functions overridable</source>
          <target state="translated">プライベート関数をオーバーライド可能にするサポート</target>
        </trans-unit>
        <trans-unit id="6afec07b7fa976af6cf8797ee913469e9babea8a" translate="yes" xml:space="preserve">
          <source>Supported Erlang/OTP versions</source>
          <target state="translated">サポートされている Erlang/OTP のバージョン</target>
        </trans-unit>
        <trans-unit id="cc98180ca761a9afbf85fc26a48b02b6e25dbae6" translate="yes" xml:space="preserve">
          <source>Supported ID values</source>
          <target state="translated">サポートされているID値</target>
        </trans-unit>
        <trans-unit id="59b7fd869e912d97d97078bf118935bf508cd7dc" translate="yes" xml:space="preserve">
          <source>Supported module values</source>
          <target state="translated">サポートされているモジュールの値</target>
        </trans-unit>
        <trans-unit id="4ce9ab2c76a64f3bead6b697086605679c05ba0b" translate="yes" xml:space="preserve">
          <source>Supported restart values</source>
          <target state="translated">サポートされている再起動値</target>
        </trans-unit>
        <trans-unit id="4754143afdbe77546c223d10dd545bf29beec5ec" translate="yes" xml:space="preserve">
          <source>Supported shutdown values</source>
          <target state="translated">サポートされているシャットダウンの値</target>
        </trans-unit>
        <trans-unit id="556737ead8feb164936eb5c9d04fdbaa68615120" translate="yes" xml:space="preserve">
          <source>Supported strategies</source>
          <target state="translated">サポートされている戦略</target>
        </trans-unit>
        <trans-unit id="011f076c3d846af2a7296431ecd45f9d0d9ceba4" translate="yes" xml:space="preserve">
          <source>Supported worker values</source>
          <target state="translated">サポートされているワーカーの価値観</target>
        </trans-unit>
        <trans-unit id="b1ffd261b167462587f7afeaf76db355c7359f62" translate="yes" xml:space="preserve">
          <source>Supporting documents</source>
          <target state="translated">補助書類</target>
        </trans-unit>
        <trans-unit id="5074c54fe3d2dada9edf83c0782274a9de618a17" translate="yes" xml:space="preserve">
          <source>Supports multiple backends which are automatically supervised when plugged into &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;に接続すると自動的に監視される複数のバックエンドをサポートします。</target>
        </trans-unit>
        <trans-unit id="63b71cb9682231a38f6cb8bfe3190bb22abb9ee8" translate="yes" xml:space="preserve">
          <source>Switch definitions</source>
          <target state="translated">スイッチの定義</target>
        </trans-unit>
        <trans-unit id="3b07b3e7fad246aad851785b8640c09bc790a0c6" translate="yes" xml:space="preserve">
          <source>Switches can be specified via one of two options:</source>
          <target state="translated">スイッチは2つのオプションのいずれかで指定することができます。</target>
        </trans-unit>
        <trans-unit id="10f820ab2456db02149e31f2047f0b2fc4844076" translate="yes" xml:space="preserve">
          <source>Switches can be specified with modifiers, which change how they behave. The following modifiers are supported:</source>
          <target state="translated">スイッチは修飾子で指定することができ、その動作を変更することができます。以下の修飾子がサポートされています。</target>
        </trans-unit>
        <trans-unit id="76095f9f5c83633412d257a75ee9b301147d2861" translate="yes" xml:space="preserve">
          <source>Switches followed by a value will be assigned the value, as a string. Switches without an argument will be set automatically to &lt;code&gt;true&lt;/code&gt;. Since we cannot assert the type of the switch value, it is preferred to use the &lt;code&gt;:strict&lt;/code&gt; option that accepts only known switches and always verify their types.</source>
          <target state="translated">スイッチの後に値が続く場合は、文字列として値が割り当てられます。引数のないスイッチは自動的に &lt;code&gt;true&lt;/code&gt; に設定されます。スイッチ値のタイプをアサートできないため、既知のスイッチのみを受け入れ、常にそのタイプを確認する &lt;code&gt;:strict&lt;/code&gt; オプションを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5845d5880bc5d8b451e5a4dd803aa622305d25f1" translate="yes" xml:space="preserve">
          <source>Switches parsed by &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; may take zero or one arguments.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;OptionParser&lt;/code&gt; &lt;/a&gt;によって解析されるスイッチは、0または1つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="3687a859d3cbb75ed3b6669b03cb32119eb5e843" translate="yes" xml:space="preserve">
          <source>Synchronously stops the agent with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; エージェントを同期的に停止します。</target>
        </trans-unit>
        <trans-unit id="83e327b0ee0a0791c10736b6ce6e0977e644efa8" translate="yes" xml:space="preserve">
          <source>Synchronously stops the given supervisor with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; 指定されたスーパーバイザを同期的に停止します。</target>
        </trans-unit>
        <trans-unit id="20daca0170b9cf17db723aa618e07ac24ddb1612" translate="yes" xml:space="preserve">
          <source>Synchronously stops the server with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; サーバーを同期的に停止します。</target>
        </trans-unit>
        <trans-unit id="f6ceae4e1810d086bda09a8ac74e9e1fae98d4f4" translate="yes" xml:space="preserve">
          <source>Syntactic sugar</source>
          <target state="translated">構文糖</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="8c15a6de8bd57bfcd07b3aef8fb9a4bc8f26c05e" translate="yes" xml:space="preserve">
          <source>Syntax reference</source>
          <target state="translated">構文参照</target>
        </trans-unit>
        <trans-unit id="de4af2ff6c0bd31526ce7f5f8ca08783d0cc5ed7" translate="yes" xml:space="preserve">
          <source>SyntaxError</source>
          <target state="translated">SyntaxError</target>
        </trans-unit>
        <trans-unit id="62e61480537cef04396517bf21f00631d5916b00" translate="yes" xml:space="preserve">
          <source>SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">SyntaxError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="15a3c2ea878a67e7f83b1e5350d3a1c397e6870e" translate="yes" xml:space="preserve">
          <source>System messages such as timer messages and monitoring events</source>
          <target state="translated">タイマーメッセージや監視イベントなどのシステムメッセージ</target>
        </trans-unit>
        <trans-unit id="629539f2b0b3c31f1b5b674c293fc529369d30a0" translate="yes" xml:space="preserve">
          <source>System modules</source>
          <target state="translated">システムモジュール</target>
        </trans-unit>
        <trans-unit id="e1f03c30c4ad532e4c164e6bd797580a623de00e" translate="yes" xml:space="preserve">
          <source>SystemLimitError</source>
          <target state="translated">SystemLimitError</target>
        </trans-unit>
        <trans-unit id="87d2f1faf999bf62e28a61deae6996346ba925b4" translate="yes" xml:space="preserve">
          <source>SystemLimitError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">SystemLimitError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="34fe46e18f0db15e3602c13218d0d43606ec62eb" translate="yes" xml:space="preserve">
          <source>Table of deprecations</source>
          <target state="translated">非推奨事項の一覧表</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b6178fb349e0b28eda375aea2c569cd350dc4da1" translate="yes" xml:space="preserve">
          <source>Tags are also very effective when used with case templates (&lt;a href=&quot;exunit.casetemplate&quot;&gt;&lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt;&lt;/a&gt;) allowing callbacks in the case template to customize the test behaviour.</source>
          <target state="translated">タグは、ケーステンプレート（&lt;a href=&quot;exunit.casetemplate&quot;&gt; &lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt; &lt;/a&gt;）と共に使用すると非常に効果的で、ケーステンプレートのコールバックでテストの動作をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="1e98eca58b343bf9eef58db2b4d0749342e87444" translate="yes" xml:space="preserve">
          <source>Tags are also very effective when used with case templates (&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaseTemplate.html&quot;&gt;&lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt;&lt;/a&gt;) allowing callbacks in the case template to customize the test behaviour.</source>
          <target state="translated">タグは、ケーステンプレート（&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaseTemplate.html&quot;&gt; &lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt; &lt;/a&gt;）とともに使用すると非常に効果的であり、ケーステンプレートのコールバックでテストの動作をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="fc249ccb61119dc450a78be8a81ac2c8c0e49629" translate="yes" xml:space="preserve">
          <source>Tags can also be used to identify specific tests, which can then be included or excluded using filters. The most common functionality is to exclude some particular tests from running, which can be done via &lt;a href=&quot;exunit#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">タグは、特定のテストを識別するためにも使用でき、フィルターを使用してこれを含めたり除外したりできます。最も一般的な機能は、特定のテストを実行から除外することです。これは&lt;a href=&quot;exunit#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; を&lt;/a&gt;介して実行できます。</target>
        </trans-unit>
        <trans-unit id="fbe21cac3f1b836469722d6aaccceafc7c70d983" translate="yes" xml:space="preserve">
          <source>Tags can also be used to identify specific tests, which can then be included or excluded using filters. The most common functionality is to exclude some particular tests from running, which can be done via &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">タグを使用して特定のテストを識別することもできます。テストは、フィルターを使用して含めたり除外したりできます。最も一般的な機能は、特定のテストを実行から除外することです。これは、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; を&lt;/a&gt;介して実行できます。</target>
        </trans-unit>
        <trans-unit id="8b6e5fd9a74ed5f0c910db816652873cf2d30599" translate="yes" xml:space="preserve">
          <source>Tags in ExUnit are used to annotate tests. Tags can be later used to filter tests. For example, you can avoid running external tests on your machine because they are slow and dependent on other services, while they can still be enabled in your build system.</source>
          <target state="translated">ExUnit のタグは、テストに注釈をつけるために使用します。タグは、後からテストのフィルタリングにも使えます。たとえば、他のサービスに依存していて遅いからといって外部テストをマシン上で実行しないようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="001aa408e4c6ef94853eea6d535dd0cd3f2d9ecb" translate="yes" xml:space="preserve">
          <source>Take note of the second argument to &lt;code&gt;Macro.var/2&lt;/code&gt;. This is the context being used and will determine hygiene as described in the next section.</source>
          <target state="translated">&lt;code&gt;Macro.var/2&lt;/code&gt; の2番目の引数に注意してください。これは使用されるコンテキストであり、次のセクションで説明するように衛生状態を決定します。</target>
        </trans-unit>
        <trans-unit id="396cb525a863762a0153f155bab5fa14c60b4b53" translate="yes" xml:space="preserve">
          <source>Take such cases as a suggestion that your code should be refactored:</source>
          <target state="translated">そのような場合は、あなたのコードをリファクタリングすべきだという提案として受け止めてください。</target>
        </trans-unit>
        <trans-unit id="0ec41530414c8186f413ef6553a9627c2edc74fd" translate="yes" xml:space="preserve">
          <source>Take the following &lt;code&gt;.iex.exs&lt;/code&gt; file:</source>
          <target state="translated">次の &lt;code&gt;.iex.exs&lt;/code&gt; ファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="3272b9a706ed0ca47f559e862d6dc2150998b033" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;count&lt;/code&gt; random elements from &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">とり &lt;code&gt;count&lt;/code&gt; からランダムな要素を &lt;code&gt;enumerable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff00a34c033bd6b414639eb45fc22dcd00b26ff3" translate="yes" xml:space="preserve">
          <source>Takes a compiled format and injects the level, timestamp, message, and metadata keyword list and returns a properly formatted string.</source>
          <target state="translated">コンパイルされた形式を取り、レベル、タイムスタンプ、メッセージ、およびメタデータのキーワード・リストを注入し、適切にフォーマットされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fc0be3a7f7029dd2d434cb9dc499906bd7070ad7" translate="yes" xml:space="preserve">
          <source>Takes a time zone name and a point in time for UTC and returns a &lt;code&gt;time_zone_period&lt;/code&gt; for that point in time.</source>
          <target state="translated">UTCのタイムゾーン名と &lt;code&gt;time_zone_period&lt;/code&gt; 時点を受け取り、その特定の時点のtime_zone_periodを返します。</target>
        </trans-unit>
        <trans-unit id="108613966b46cb41abd8d09ea8bc76b57d639cc0" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given &lt;code&gt;keys&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; and extracts them into a separate map.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 内の指定された &lt;code&gt;keys&lt;/code&gt; に対応するすべてのエントリを取得し、それらを別のマップに抽出します。</target>
        </trans-unit>
        <trans-unit id="a057f41d143426d964dc91f467aeae07be4b8c88" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given keys and extracts them into a separate keyword list.</source>
          <target state="translated">与えられたキーに対応するすべてのエントリを取得し、それらを別のキーワードリストに抽出します。</target>
        </trans-unit>
        <trans-unit id="22f2fcc0cd4b387311cd745e5116cafb06152b07" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given keys and returns them in a new keyword list.</source>
          <target state="translated">与えられたキーに対応するすべてのエントリを取得し、それを新しいキーワードリストで返します。</target>
        </trans-unit>
        <trans-unit id="f01e74291caa1b3fb31a76131a0358dad5dd2b3a" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;amount&lt;/code&gt; of elements from the beginning or the end of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の最初または最後から要素の &lt;code&gt;amount&lt;/code&gt; を取ります。</target>
        </trans-unit>
        <trans-unit id="1f1f6557000f60347445111652f8c88ca3309153" translate="yes" xml:space="preserve">
          <source>Takes an enumerable that enumerates as a list of two-element tuples (e.g., a map or a keyword list) and returns a string in the form of &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; where keys and values are URL encoded as per &lt;a href=&quot;#encode_www_form/1&quot;&gt;&lt;code&gt;encode_www_form/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2要素のタプルのリスト（たとえば、マップまたはキーワードリスト）として列挙する列挙可能なものを取り、 &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; の形式で文字列を返します。ここで、キーと値は、&lt;a href=&quot;#encode_www_form/1&quot;&gt; &lt;code&gt;encode_www_form/1&lt;/code&gt; &lt;/a&gt;に従ってURLエンコードされています。１。</target>
        </trans-unit>
        <trans-unit id="faa8eb6bc5f76dd6add111a9e6f96763d7be8a60" translate="yes" xml:space="preserve">
          <source>Takes an enumerable that enumerates as a list of two-element tuples (for instance, a map or a keyword list) and returns a string in the form of &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; where keys and values are URL encoded as per &lt;a href=&quot;#encode_www_form/1&quot;&gt;&lt;code&gt;encode_www_form/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2要素タプルのリスト（たとえば、マップまたはキーワードリスト）として列挙する列挙可能 &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; の形式で文字列を返します。ここで、キーと値は、&lt;a href=&quot;#encode_www_form/1&quot;&gt; &lt;code&gt;encode_www_form/1&lt;/code&gt; &lt;/a&gt;URLエンコードされます。/ 1。</target>
        </trans-unit>
        <trans-unit id="e45acfd4331b2440feb53de6fbc1560baa366e61" translate="yes" xml:space="preserve">
          <source>Takes an optional &lt;code&gt;character_limit&lt;/code&gt; as a second argument. If &lt;code&gt;character_limit&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, this function will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2番目の引数としてオプションの &lt;code&gt;character_limit&lt;/code&gt; を取ります。 &lt;code&gt;character_limit&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合、この関数は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="feadb0c8e9163376cb17aaa5d080783ed49a3087" translate="yes" xml:space="preserve">
          <source>Takes an optional &lt;code&gt;limit&lt;/code&gt; as a second argument. &lt;a href=&quot;#ascii_printable?/2&quot;&gt;&lt;code&gt;ascii_printable?/2&lt;/code&gt;&lt;/a&gt; only checks the printability of the list up to the &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;limit&lt;/code&gt; を2番目の引数として受け取ります。&lt;a href=&quot;#ascii_printable?/2&quot;&gt; &lt;code&gt;ascii_printable?/2&lt;/code&gt; &lt;/a&gt;は、リストの印刷可能性を &lt;code&gt;limit&lt;/code&gt; までチェックするだけです。</target>
        </trans-unit>
        <trans-unit id="b31890ea4f4df85c9832a1da5e1e6d04b9bbfbd0" translate="yes" xml:space="preserve">
          <source>Takes changes such as summer time/DST into account. This means that adding time can cause the wall time to &quot;go backwards&quot; during &quot;fall back&quot; during autumn. Adding just a few seconds to a datetime just before &quot;spring forward&quot; can cause wall time to increase by more than an hour.</source>
          <target state="translated">夏時間/DSTなどの変化を考慮に入れています。つまり、時間を追加することで、秋の「フォールバック」の間に壁の時間が「逆行」してしまうことがあります。春分前倒し」の直前の日付時間に数秒だけ時間を追加すると、壁の時間が1時間以上増加することがあります。</target>
        </trans-unit>
        <trans-unit id="fae8e01301c7e0feb68a23236a2c9b3567e8ae34" translate="yes" xml:space="preserve">
          <source>Takes the elements from the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が真の値を返す間、 &lt;code&gt;enumerable&lt;/code&gt; 要素の最初から要素を取得します。</target>
        </trans-unit>
        <trans-unit id="c5464b7fb8fc4c108c9bf24e8c373a4e9e4044e0" translate="yes" xml:space="preserve">
          <source>Takes the maximum width and a document to print as its arguments and returns an IO data representation of the best layout for the document to fit in the given width.</source>
          <target state="translated">最大幅と印刷する文書を引数として取り,与えられた幅に収まるように文書に最適なレイアウトのIOデータ表現を返します.</target>
        </trans-unit>
        <trans-unit id="8282e151892442f9f2cf52b76a916f132d30c0f4" translate="yes" xml:space="preserve">
          <source>Target ABI (for example, musl or gnu)</source>
          <target state="translated">ターゲット ABI (例:musl や gnu)</target>
        </trans-unit>
        <trans-unit id="9af45fd9ac96ee8998b351868ee1becb19e802d4" translate="yes" xml:space="preserve">
          <source>Target architecture (for example, x86_64 or ARM)</source>
          <target state="translated">ターゲットアーキテクチャ(例:x86_64またはARM</target>
        </trans-unit>
        <trans-unit id="8e253f67079c51fc720f2bde4e13e5c23c03b6de" translate="yes" xml:space="preserve">
          <source>Target vendor + operating system (for example, Windows, Linux, or Darwin/macOS)</source>
          <target state="translated">対象ベンダー+オペレーティングシステム(例:Windows、Linux、またはDarwin/macOS</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="7bb0ddf9221c03b806b03c209e8366000124aa15" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="translated">Task</target>
        </trans-unit>
        <trans-unit id="56913f440f346fedff0613f1a58aff47c8c81efb" translate="yes" xml:space="preserve">
          <source>Task and gen_tcp</source>
          <target state="translated">タスクとgen_tcp</target>
        </trans-unit>
        <trans-unit id="42d489b854c5dff6b39f3ae727392332235bf30a" translate="yes" xml:space="preserve">
          <source>Task supervisor</source>
          <target state="translated">タスクスーパーバイザー</target>
        </trans-unit>
        <trans-unit id="0590ada27ec6762e406a036264c8d3a5f2c7e027" translate="yes" xml:space="preserve">
          <source>Task-specific options</source>
          <target state="translated">タスク固有のオプション</target>
        </trans-unit>
        <trans-unit id="35a08efc9d440da7708c69812b0507ba330ba97d" translate="yes" xml:space="preserve">
          <source>Task.Supervisor</source>
          <target state="translated">Task.Supervisor</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="ba00cfab602d1779b811d576baf5eafe077e7cab" translate="yes" xml:space="preserve">
          <source>Tasks are processes meant to execute one particular action throughout their lifetime, often with little or no communication with other processes. The most common use case for tasks is to convert sequential code into concurrent code by computing a value asynchronously:</source>
          <target state="translated">タスクとは、その生涯を通じて特定のアクションを実行するためのプロセスで、他のプロセスとの通信はほとんどないか、あるいはほとんどないことが多いです。タスクの最も一般的な使用例は、値を非同期的に計算してシーケンシャルコードをコンカレントコードに変換することです。</target>
        </trans-unit>
        <trans-unit id="8a0db3194d6f9d766302e10355f2237684a84453" translate="yes" xml:space="preserve">
          <source>Tasks are what make Mix extensible.</source>
          <target state="translated">タスクはMixを拡張可能にするものです。</target>
        </trans-unit>
        <trans-unit id="a520f228dee983c80456da705995e99d0baf055b" translate="yes" xml:space="preserve">
          <source>Tasks build on top of the spawn functions to provide better error reports and introspection:</source>
          <target state="translated">タスクはスポーン機能の上に構築され、より良いエラーレポートとイントロスペクションを提供します。</target>
        </trans-unit>
        <trans-unit id="0d54343e18426db24d51d0ad44751f910be12ca3" translate="yes" xml:space="preserve">
          <source>Tasks spawned with &lt;code&gt;async&lt;/code&gt; can be awaited on by their caller process (and only their caller) as shown in the example above. They are implemented by spawning a process that sends a message to the caller once the given computation is performed.</source>
          <target state="translated">上記の例に示すように、 &lt;code&gt;async&lt;/code&gt; 生成されたタスクは、呼び出し元プロセス（および呼び出し元のみ）によって待機できます。これらは、特定の計算が実行されると、呼び出し元にメッセージを送信するプロセスを生成することによって実装されます。</target>
        </trans-unit>
        <trans-unit id="f19715ca7223bd4e0d3fbc34df5b7dcc7380e790" translate="yes" xml:space="preserve">
          <source>Tasks typically depend on the &lt;code&gt;&quot;app.config&quot;&lt;/code&gt; task, when they need to access code from the current project with all apps already configured, or the &quot;app.start&quot; task, when they also need those apps to be already started:</source>
          <target state="translated">タスクは、一般的に依存して &lt;code&gt;&quot;app.config&quot;&lt;/code&gt; 彼らはすでに構成されているすべてのアプリケーションと現在のプロジェクト、または「app.start」タスクからアクセスコードを必要とするとき、彼らはまた、それらのアプリはすでに開始する必要がある場合、タスク：</target>
        </trans-unit>
        <trans-unit id="0b4b058a048fc58f7cc9589f239b42e939508324" translate="yes" xml:space="preserve">
          <source>Techniques</source>
          <target state="translated">Techniques</target>
        </trans-unit>
        <trans-unit id="f36d34a8fff232dc61a718546ef8daf864665507" translate="yes" xml:space="preserve">
          <source>Tells whether the given process is alive on the local node.</source>
          <target state="translated">指定されたプロセスがローカルノード上で生きているかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="3c899cc5439be26f0cd7b582a42447cf769aca66" translate="yes" xml:space="preserve">
          <source>Temporarily blocks the current process waiting for a task reply.</source>
          <target state="translated">タスクの応答を待っている現在のプロセスを一時的にブロックします。</target>
        </trans-unit>
        <trans-unit id="d33ebb237e98c8b9d937b2d694b2c125b79ca66f" translate="yes" xml:space="preserve">
          <source>Term ordering</source>
          <target state="translated">用語の順序付け</target>
        </trans-unit>
        <trans-unit id="696845220c6e0a0d1e64cd82d61908625e60074a" translate="yes" xml:space="preserve">
          <source>Terminate the top-level supervisor.</source>
          <target state="translated">トップレベルの監督者を終了させる。</target>
        </trans-unit>
        <trans-unit id="37c2abf54c623c6250b581aced135fc94e351e86" translate="yes" xml:space="preserve">
          <source>Terminates the Erlang runtime system without properly shutting down applications and ports. Please see &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; for a careful shutdown of the system.</source>
          <target state="translated">アプリケーションとポートを適切にシャットダウンせずに、Erlangランタイムシステムを終了します。システムの注意深いシャットダウンについては、&lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3cd2179f3f59774aca5baa2c47c7a727d23960ae" translate="yes" xml:space="preserve">
          <source>Terminates the child with the given &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;pid&lt;/code&gt; で子を終了します。</target>
        </trans-unit>
        <trans-unit id="c4bb07a1089485a5deadcff889ffd042bd8e458f" translate="yes" xml:space="preserve">
          <source>Terminates the given child identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;child_id&lt;/code&gt; で識別される指定された子を終了します。</target>
        </trans-unit>
        <trans-unit id="a50fe58f5df366a9be1362e929ebd0084a28443a" translate="yes" xml:space="preserve">
          <source>Terminates the given child identified by &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; で識別される指定された子を終了します。</target>
        </trans-unit>
        <trans-unit id="a202094d471c445107dcaeee3f888512868cbcd8" translate="yes" xml:space="preserve">
          <source>Test filters and tags</source>
          <target state="translated">テストフィルタとタグ</target>
        </trans-unit>
        <trans-unit id="6259e4e6f0c5acd8366ddcebaae6c7f8a418bd4b" translate="yes" xml:space="preserve">
          <source>Test setup with ExUnit callbacks</source>
          <target state="translated">ExUnit コールバックによるテスト設定</target>
        </trans-unit>
        <trans-unit id="56c4fd8cce0fae76b0fc19e67eda41b7a30e0a0f" translate="yes" xml:space="preserve">
          <source>Testing a GenServer</source>
          <target state="translated">GenServerのテスト</target>
        </trans-unit>
        <trans-unit id="788b3affdeae419dc740b3f8cbcd405e20e4cc4b" translate="yes" xml:space="preserve">
          <source>Testing a GenServer is not much different from testing an agent. We will spawn the server on a setup callback and use it throughout our tests. Create a file at &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; with the following:</source>
          <target state="translated">GenServerのテストは、エージェントのテストと大差ありません。セットアップコールバックでサーバーを生成し、テスト全体で使用します。 &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; に次のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="187e41969f8b9137e679aa44737b6ab5557c6441" translate="yes" xml:space="preserve">
          <source>Tests are first excluded, then included, and then skipped (if any left).</source>
          <target state="translated">テストは最初に除外され、次に含まれ、次にスキップされます(残っている場合)。</target>
        </trans-unit>
        <trans-unit id="85b9fcfc0f6fc72610f7a98efec365df258038e3" translate="yes" xml:space="preserve">
          <source>Tests in umbrella projects can be run from the root by specifying the full suite path, including &lt;code&gt;apps/my_app/test&lt;/code&gt;, in which case recursive tests for other child apps will be skipped completely:</source>
          <target state="translated">アンブレラプロジェクトのテストは、 &lt;code&gt;apps/my_app/test&lt;/code&gt; を含む完全なスイートパスを指定することにより、ルートから実行できます。この場合、他の子アプリの再帰テストは完全にスキップされます。</target>
        </trans-unit>
        <trans-unit id="c876e9844d9fdc72e6da9216815faacf651f395c" translate="yes" xml:space="preserve">
          <source>Text-based match operator. Matches the term on the &lt;code&gt;left&lt;/code&gt; against the regular expression or string on the &lt;code&gt;right&lt;/code&gt;.</source>
          <target state="translated">テキストベースの一致演算子。 &lt;code&gt;left&lt;/code&gt; の用語を &lt;code&gt;right&lt;/code&gt; 正規表現または文字列と照合します。</target>
        </trans-unit>
        <trans-unit id="062dbf72aa69df4b2bf2e11e396bf97a679fa018" translate="yes" xml:space="preserve">
          <source>Thankfully, Elixir v1.2 introduced the &lt;code&gt;with&lt;/code&gt; construct, which allows you to simplify code like the above, replacing nested &lt;code&gt;case&lt;/code&gt; calls with a chain of matching clauses. Let&amp;rsquo;s rewrite the &lt;code&gt;serve/1&lt;/code&gt; function to use &lt;code&gt;with&lt;/code&gt;:</source>
          <target state="translated">ありがたいことに、Elixir v1.2は &lt;code&gt;with&lt;/code&gt; 構文を導入しました。これにより、上記のようなコードを単純化し、ネストされた &lt;code&gt;case&lt;/code&gt; 呼び出しを一連の一致する句で置き換えることができます。レッツ・リライトは &lt;code&gt;serve/1&lt;/code&gt; 使用する機能 &lt;code&gt;with&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="01e9b39e30c1a0e15112939ef1fff61fe4a3aa75" translate="yes" xml:space="preserve">
          <source>Thanks to the agent server process, the counter can be safely incremented concurrently.</source>
          <target state="translated">エージェント・サーバー・プロセスのおかげで、カウンタを安全に同時にインクリメントすることができます。</target>
        </trans-unit>
        <trans-unit id="fb4fefaf1d73585354762c2031b68d75737ffd24" translate="yes" xml:space="preserve">
          <source>That defines a release named &lt;code&gt;foo&lt;/code&gt; with both &lt;code&gt;kv_server&lt;/code&gt; and &lt;code&gt;kv&lt;/code&gt; applications. Their mode is set to &lt;code&gt;:permanent&lt;/code&gt;, which means that, if those applications crash, the whole node terminates. That&amp;rsquo;s reasonable since those applications are essential to our system.</source>
          <target state="translated">これは、 &lt;code&gt;kv_server&lt;/code&gt; アプリケーションと &lt;code&gt;kv&lt;/code&gt; アプリケーションの両方で &lt;code&gt;foo&lt;/code&gt; という名前のリリースを定義します。それらのモードは &lt;code&gt;:permanent&lt;/code&gt; に設定されています。これは、これらのアプリケーションがクラッシュした場合、ノード全体が終了することを意味します。これらのアプリケーションは私たちのシステムに不可欠であるため、これは合理的です。</target>
        </trans-unit>
        <trans-unit id="cdbd4eae22bceef6692b374955bde22d9b7d01d6" translate="yes" xml:space="preserve">
          <source>That defines a release named &lt;code&gt;foo&lt;/code&gt; with both &lt;code&gt;kv_server&lt;/code&gt; and &lt;code&gt;kv&lt;/code&gt; applications. Their mode is set to &lt;code&gt;:permanent&lt;/code&gt;, which means that, if those applications crash, the whole node terminates. That&amp;rsquo;s reasonable since those applications are essential to our system. With the configuration in place, let&amp;rsquo;s give another try at assembling the release:</source>
          <target state="translated">これは、 &lt;code&gt;kv_server&lt;/code&gt; および &lt;code&gt;kv&lt;/code&gt; アプリケーションの両方で &lt;code&gt;foo&lt;/code&gt; という名前のリリースを定義します。それらのモードは &lt;code&gt;:permanent&lt;/code&gt; に設定されています。つまり、これらのアプリケーションがクラッシュすると、ノード全体が終了します。これらのアプリケーションはシステムに不可欠であるため、これは合理的です。構成が整ったら、リリースの組み立てをもう一度試してみましょう。</target>
        </trans-unit>
        <trans-unit id="c0b2e0d9fe52f84cc809886b734e22953d615efa" translate="yes" xml:space="preserve">
          <source>That ensures that if the task completes after the &lt;code&gt;timeout&lt;/code&gt; but before &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt; has been called, you will still get the result, since &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt; is designed to handle this case and return the result.</source>
          <target state="translated">これにより、&lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt;はこのケースを処理して結果を返すように設計されているため、 &lt;code&gt;timeout&lt;/code&gt; 後、&lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt;が呼び出される前にタスクが完了した場合でも、結果が得られます。</target>
        </trans-unit>
        <trans-unit id="d1fc0fd9268067ed50e8dff689947fe93beb5673" translate="yes" xml:space="preserve">
          <source>That happens because the &lt;code&gt;IO&lt;/code&gt; module actually works with processes (see &lt;a href=&quot;processes&quot;&gt;chapter 11&lt;/a&gt;). Given a file is a process, when you write to a file that has been closed, you are actually sending a message to a process which has been terminated:</source>
          <target state="translated">これは、 &lt;code&gt;IO&lt;/code&gt; モジュールが実際にプロセスで動作するために発生します（&lt;a href=&quot;processes&quot;&gt;第11章を&lt;/a&gt;参照）。ファイルがプロセスの場合、閉じられたファイルに書き込むと、実際には、終了したプロセスにメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="897c7bf39cdf3d75952cff1b5ff6f99e7827d8f9" translate="yes" xml:space="preserve">
          <source>That is, if the node can be part of a distributed system.</source>
          <target state="translated">つまり、ノードが分散システムの一部になり得るかどうかです。</target>
        </trans-unit>
        <trans-unit id="8e363ec1e2d5f0647070623c22f89c8707555da9" translate="yes" xml:space="preserve">
          <source>That is, if the number of bits in &lt;code&gt;bitstring&lt;/code&gt; is not divisible by 8, the resulting number of bytes will be rounded up (by excess). This operation happens in constant time.</source>
          <target state="translated">つまり、 &lt;code&gt;bitstring&lt;/code&gt; 列のビット数が8で割り切れない場合、結果のバイト数は切り上げられます（超過分）。この操作は一定の時間で発生します。</target>
        </trans-unit>
        <trans-unit id="21fbb88b6f851991624fb5b17096150fe0715845" translate="yes" xml:space="preserve">
          <source>That said, there are still cases where using macros and modules to build domain-specific languages is useful. Since we have explored data structures and function definitions in the Getting Started guide, this chapter will explore how to use macros and module attributes to tackle more complex DSLs.</source>
          <target state="translated">とはいえ、マクロやモジュールを使用してドメイン固有の言語を構築することが有用な場合もあります。はじめに」でデータ構造と関数定義について説明したので、この章ではマクロとモジュール属性を使って、より複雑な DSL に取り組む方法を探っていきます。</target>
        </trans-unit>
        <trans-unit id="814b47f77dfc5a37096b4b03955d625f97a0e859" translate="yes" xml:space="preserve">
          <source>That said, we need to expand the aliases node above to an atom, so we can retrieve its length. Expanding the node is not straightforward because we also need to expand the caller aliases. For example:</source>
          <target state="translated">つまり、上記の aliases ノードをアトムに展開する必要があるので、その長さを取得することができます。呼び出し元のエイリアスも展開する必要があるので、ノードを展開するのは簡単ではありません。例えば</target>
        </trans-unit>
        <trans-unit id="4d3f07f40965deb2a6bdc254e2fe7db4fac694fb" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because an umbrella project gives us plenty of options when deploying the software. We can:</source>
          <target state="translated">それは、包括的プロジェクトがソフトウェアを展開するときに多くのオプションを提供するためです。私たちはできる：</target>
        </trans-unit>
        <trans-unit id="11e8efbea29607bc7f881559616858502e41b031" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because we were expecting data from &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; but the client closed the connection. We need to handle such cases better in future revisions of our server.</source>
          <target state="translated">これは、 &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; からのデータを予期していたが、クライアントが接続を閉じたためです。サーバーの将来のリビジョンでは、このようなケースをより適切に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c56715445461f557ef98a6e96f4646be8d6243e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s enough for our tests to pass but there is a resource leakage in our application. When a bucket terminates, the supervisor will start a new bucket in its place. After all, that&amp;rsquo;s the role of the supervisor!</source>
          <target state="translated">テストに合格するにはこれで十分ですが、アプリケーションにリソースリークがあります。バケットが終了すると、スーパーバイザーは代わりに新しいバケットを開始します。結局、それがスーパーバイザーの役割です！</target>
        </trans-unit>
        <trans-unit id="b7a0f3e3c150c923165c6e2a99dd197a0a28b7af" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s happening because the release &lt;code&gt;foo&lt;/code&gt; is already listening on port &lt;code&gt;4040&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; is trying to do the same! One option could be to move the &lt;code&gt;:port&lt;/code&gt; configuration to the application environment, like we did for the routing table. But let&amp;rsquo;s try something else. Let&amp;rsquo;s make it so the &lt;code&gt;bar&lt;/code&gt; release contains only the &lt;code&gt;:kv&lt;/code&gt; application. So it works as a storage but it won&amp;rsquo;t have a front-end. Change the &lt;code&gt;:bar&lt;/code&gt; information to this:</source>
          <target state="translated">これは、リリース &lt;code&gt;foo&lt;/code&gt; がすでにポート &lt;code&gt;4040&lt;/code&gt; でリッスンしていて、 &lt;code&gt;bar&lt;/code&gt; が同じことをしようとしているためです。1つのオプションは、ルーティングテーブルの場合と同様に、 &lt;code&gt;:port&lt;/code&gt; 構成をアプリケーション環境に移動することです。しかし、他のことを試してみましょう。 &lt;code&gt;bar&lt;/code&gt; リリースに &lt;code&gt;:kv&lt;/code&gt; アプリケーションのみが含まれるようにします。したがって、ストレージとして機能しますが、フロントエンドはありません。 &lt;code&gt;:bar&lt;/code&gt; 情報を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="728db93af19ad8ae8e28827f7df6fa0ee95b6c1b" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it for the client API. On the server side, we can implement a variety of callbacks to guarantee the server initialization, termination, and handling of requests. Those callbacks are optional and for now, we have only implemented the ones we care about. Let&amp;rsquo;s recap.</source>
          <target state="translated">クライアントAPIについては以上です。サーバー側では、サーバーの初期化、終了、リクエストの処理を保証するために、さまざまなコールバックを実装できます。これらのコールバックはオプションであり、現時点では、気になるコールバックのみを実装しています。まとめましょう。</target>
        </trans-unit>
        <trans-unit id="a3de339a8a8126c8176ac9eab07a22576517e36b" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s not what we wanted, since the value of the &lt;code&gt;number&lt;/code&gt; variable has not been injected and &lt;code&gt;number&lt;/code&gt; has been quoted in the expression. In order to inject the &lt;em&gt;value&lt;/em&gt; of the &lt;code&gt;number&lt;/code&gt; variable, &lt;code&gt;unquote&lt;/code&gt; has to be used inside the quoted representation:</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 変数の値が挿入されておらず、 &lt;code&gt;number&lt;/code&gt; が式で引用されているため、それは私たちが望んでいたことではありません。 &lt;code&gt;number&lt;/code&gt; 変数の&lt;em&gt;値&lt;/em&gt;を注入するには、引用符で囲まれた表現の内部で &lt;code&gt;unquote&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dcf68842185af09e3a0f9fe32163648242f47543" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s what macros are all about. They are about receiving quoted expressions and transforming them into something else. In fact, &lt;code&gt;unless/2&lt;/code&gt; in Elixir is implemented as a macro:</source>
          <target state="translated">それがマクロのすべてです。彼らは引用された表現を受け取り、それらを別のものに変換することについてです。実際、Elixirの &lt;code&gt;unless/2&lt;/code&gt; がマクロとして実装されていない限り：</target>
        </trans-unit>
        <trans-unit id="23bd0d6f40de4627ff508337339ea27a545beab3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s when &lt;code&gt;unquote_splicing&lt;/code&gt; becomes handy:</source>
          <target state="translated">それは &lt;code&gt;unquote_splicing&lt;/code&gt; が便利になるときです：</target>
        </trans-unit>
        <trans-unit id="21e361b399ff70e0ade5d247fbe5325383f22c2c" translate="yes" xml:space="preserve">
          <source>That's because by reading the application in the module body and storing it in a module attribute, we are effectively reading the configuration at compile-time, which may become an issue when configuring the system later.</source>
          <target state="translated">それは、アプリケーションをモジュール本体で読み込んでモジュール属性に格納することで、実質的にコンパイル時に設定を読み込んでいることになるので、後から設定を行う際に問題になる可能性があるからです。</target>
        </trans-unit>
        <trans-unit id="525c877e46b0705b116260fb28719a829fe1a18e" translate="yes" xml:space="preserve">
          <source>That's what we meant when we said earlier that streams are composable, lazy enumerables. Note that we could call &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;Stream.map/2&lt;/code&gt;&lt;/a&gt; multiple times, effectively composing the streams and keeping them lazy. The computations are only performed when you call a function from the &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">これは、ストリームは構成可能で怠惰な列挙可能であると以前に言ったときに意味したことです。&lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;Stream.map/2&lt;/code&gt; を&lt;/a&gt;複数回呼び出して、ストリームを効果的に構成し、それらを遅延状態に保つことができることに注意してください。計算は、&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールから関数を呼び出すときにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="dd53bd72aff61e4af823bbda7c24cb88da5c37ab" translate="yes" xml:space="preserve">
          <source>That's what we meant when we said earlier that streams are composable, lazy enumerables. Notice we could call &lt;a href=&quot;stream#map/2&quot;&gt;&lt;code&gt;Stream.map/2&lt;/code&gt;&lt;/a&gt; multiple times, effectively composing the streams and keeping them lazy. The computations are only performed when you call a function from the &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">先に言ったように、ストリームは構成可能で遅延可能な列挙型であると私たちは言っていました。&lt;a href=&quot;stream#map/2&quot;&gt; &lt;code&gt;Stream.map/2&lt;/code&gt; を&lt;/a&gt;複数回呼び出して、ストリームを効率的に構成し、遅延させておくことができます。計算は、&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールから関数を呼び出したときにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="09a6d160f8b301e17d705ee43757bf265bccdb38" translate="yes" xml:space="preserve">
          <source>The &quot;Current Era&quot; or the &quot;Common Era&quot; (CE) which starts in year &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;1&lt;/code&gt; 年目から始まる「現在の時代」または「西暦」（CE）。</target>
        </trans-unit>
        <trans-unit id="a59d1e1634f57e0cf851ffcf7499aa4351a17212" translate="yes" xml:space="preserve">
          <source>The &quot;file:line&quot; represents the file and line a call to a deprecated &quot;module.function/arity&quot; is made. This operation does not show deprecated local calls (a call to a deprecated function or macro in the same module) nor calls to deprecated functionality in Elixir itself.</source>
          <target state="translated">file:line」は、非推奨の「module.function/arity」への呼び出しが行われたファイルと行を表します。この操作では、非推奨のローカルコール(同じモジュール内の非推奨の関数やマクロへのコール)や、Elixir自身の非推奨機能へのコールは表示されません。</target>
        </trans-unit>
        <trans-unit id="826934dab44a7a099fc8b2a86a3c62e533cc4b2e" translate="yes" xml:space="preserve">
          <source>The &quot;file:line&quot; represents the file and line a call to an unknown &quot;module.function/arity&quot; is made.</source>
          <target state="translated">file:line」は、未知の「module.function/arity」への呼び出しが行われたファイルと行を表します。</target>
        </trans-unit>
        <trans-unit id="f23646193825ac71d9878bc225694b7560e701b8" translate="yes" xml:space="preserve">
          <source>The --stale option</source>
          <target state="translated">ステールオプション</target>
        </trans-unit>
        <trans-unit id="0c20b0f5fe22af74b9f5bd9023dad3c12944c0fd" translate="yes" xml:space="preserve">
          <source>The .iex.exs file</source>
          <target state="translated">.iex.exs ファイル</target>
        </trans-unit>
        <trans-unit id="f8308d6c331d75737fe1ed60777039be95e5626b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#%253C%253E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt; operator can also be used in pattern matching (and guard clauses) as long as the left argument is a literal binary:</source>
          <target state="translated">&lt;a href=&quot;#%253C%253E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;演算子も長い左引数がリテラルバイナリされるとパターンマッチング（及びガード句）で使用することができます。</target>
        </trans-unit>
        <trans-unit id="2522f291657c90a8970a25fc0f5c55b3b111e28a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#%3C%3E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt; operator can also be used in pattern matching (and guard clauses) as long as the left argument is a literal binary:</source>
          <target state="translated">&lt;a href=&quot;#%3C%3E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;演算子も長い左引数がリテラルバイナリされるとパターンマッチング（及びガード句）で使用することができます。</target>
        </trans-unit>
        <trans-unit id="3ea0da9cdd3dfdfb8c5593853f9e341b5464f742" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#--/2&quot;&gt;&lt;code&gt;--/2&lt;/code&gt;&lt;/a&gt; operator is right associative, meaning:</source>
          <target state="translated">&lt;a href=&quot;#--/2&quot;&gt; &lt;code&gt;--/2&lt;/code&gt; &lt;/a&gt;演算子は、意味、右結合であります：</target>
        </trans-unit>
        <trans-unit id="ae4a9ae0930f3e9d2c507d033d48dd4bf27477e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#add/2&quot;&gt;&lt;code&gt;add/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#diff/2&quot;&gt;&lt;code&gt;diff/2&lt;/code&gt;&lt;/a&gt; functions can be used for computing dates or retrieving the number of days between instants. For example, if there is an interest in computing the number of days from the Unix epoch (1970-01-01):</source>
          <target state="translated">&lt;a href=&quot;#add/2&quot;&gt; &lt;code&gt;add/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#diff/2&quot;&gt; &lt;code&gt;diff/2&lt;/code&gt; &lt;/a&gt;の関数は、日付を計算するか、瞬間の間の日数を取得するために使用することができます。たとえば、Unixエポック（1970-01-01）からの日数の計算に関心がある場合：</target>
        </trans-unit>
        <trans-unit id="9ee4b27e73fcd2815c54fe669288c51019f1a3b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#add/3&quot;&gt;&lt;code&gt;add/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#diff/3&quot;&gt;&lt;code&gt;diff/3&lt;/code&gt;&lt;/a&gt; functions can be used for computing with date times or retrieving the number of seconds between instants. For example, if there is an interest in computing the number of seconds from the Unix epoch (1970-01-01 00:00:00):</source>
          <target state="translated">&lt;a href=&quot;#add/3&quot;&gt; &lt;code&gt;add/3&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#diff/3&quot;&gt; &lt;code&gt;diff/3&lt;/code&gt; &lt;/a&gt;の機能は、日付と時刻の計算や瞬間の間の秒数を取得するために使用することができます。たとえば、Unixエポック（1970-01-01 00:00:00）からの秒数の計算に関心がある場合：</target>
        </trans-unit>
        <trans-unit id="a3dad105e7857da173ae25be4e7158181735facf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; function returns an atom indicating the status of the compilation, and optionally can also return a list of &quot;diagnostics&quot; such as warnings or compilation errors. Doing this enables code editors to display issues inline without having to analyze the command-line output.</source>
          <target state="translated">&lt;a href=&quot;#c:run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; &lt;/a&gt;関数はコンパイルの状態を示す原子を返し、必要に応じて、このような警告またはコンパイル・エラーとして「診断」のリストを返すことができます。これを行うと、コードエディターは、コマンドライン出力を分析しなくても問題をインラインで表示できます。</target>
        </trans-unit>
        <trans-unit id="43daa6aefdc5d7ab59c882f8c756868ab5825ba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback has to spawn and link a supervisor and return &lt;code&gt;{:ok, pid}&lt;/code&gt; or &lt;code&gt;{:ok, pid, state}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the supervisor, and &lt;code&gt;state&lt;/code&gt; is an optional application state. &lt;code&gt;args&lt;/code&gt; is the second element of the tuple given to the &lt;code&gt;:mod&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;コールバックはスポーンにあり、スーパーバイザーとリターンリンク &lt;code&gt;{:ok, pid}&lt;/code&gt; 又は &lt;code&gt;{:ok, pid, state}&lt;/code&gt; 、 &lt;code&gt;pid&lt;/code&gt; スーパバイザのPIDであり、 &lt;code&gt;state&lt;/code&gt; 、オプションのアプリケーションの状態です。 &lt;code&gt;args&lt;/code&gt; は、 &lt;code&gt;:mod&lt;/code&gt; オプションに指定されたタプルの2番目の要素です。</target>
        </trans-unit>
        <trans-unit id="ed55773b14c9f49b1e67866369426e97f1e28202" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt; callback of the given &lt;code&gt;server&lt;/code&gt; will be invoked before exiting. This function returns &lt;code&gt;:ok&lt;/code&gt; if the server terminates with the given reason; if it terminates with another reason, the call exits.</source>
          <target state="translated">&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt;前に、指定された &lt;code&gt;server&lt;/code&gt; のterminate / 2コールバックが呼び出されます。この関数は、サーバーが指定された理由で終了した場合、 &lt;code&gt;:ok&lt;/code&gt; を返します。別の理由で終了した場合、呼び出しは終了します。</target>
        </trans-unit>
        <trans-unit id="e5479aff7c9902d4559e5268eb0059ef6a88b9eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module defines a behaviour for dynamically accessing keys of any type in a data structure via the &lt;code&gt;data[key]&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールは、動的に介してデータ構造に、任意のタイプのキーにアクセスするための動作を定義する &lt;code&gt;data[key]&lt;/code&gt; シンタックス。</target>
        </trans-unit>
        <trans-unit id="22076bf07a81ed27164e331c5cdde4703e5883c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Agent&lt;/code&gt;&lt;/a&gt; module provides a basic server implementation that allows state to be retrieved and updated via a simple API.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Agent&lt;/code&gt; &lt;/a&gt;モジュールは、状態は、単純なAPIを介して検索して更新することを可能にする基本的なサーバの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="ab7d336fe7d0f927a59616b237afeff91face2e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; module was designed to fill the gap left by the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol. &lt;a href=&quot;collectable#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; can be seen as the opposite of &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt;. If the functions in &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; are about taking values out, then &lt;a href=&quot;collectable#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; is about collecting those values into a structure.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;モジュールによって残されたギャップを埋めるために設計された&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコル。&lt;a href=&quot;collectable#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; の&lt;/a&gt;反対と見なすことができます。&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;の関数が値を取り出すことである場合、&lt;a href=&quot;collectable#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt;はそれらの値を構造体に収集することです。</target>
        </trans-unit>
        <trans-unit id="b8288b2458a158037407e3018394c02df95a408e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; module was designed to fill the gap left by the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol. &lt;a href=&quot;#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; can be seen as the opposite of &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt;. If the functions in &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; are about taking values out, then &lt;a href=&quot;#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; is about collecting those values into a structure.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;モジュールによって残されたギャップを埋めるために設計された&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコル。&lt;a href=&quot;#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; の&lt;/a&gt;反対と見なすことができます。&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;の関数が値の取得に関するものである場合、&lt;a href=&quot;#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt;はそれらの値を構造体に収集することに関するものです。</target>
        </trans-unit>
        <trans-unit id="ba60445997acad418c74ca5920c2ffa31f99771e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Config&lt;/code&gt;&lt;/a&gt; module in Elixir was introduced in v1.9 as a replacement to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt;&lt;code&gt;Mix.Config&lt;/code&gt;&lt;/a&gt;, which was specific to Mix and has been deprecated.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Config&lt;/code&gt; &lt;/a&gt;エリクサーにおけるモジュールの代替としてV1.9で導入された&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt; &lt;code&gt;Mix.Config&lt;/code&gt; &lt;/a&gt;ミックスに特異的であり、廃止されました。</target>
        </trans-unit>
        <trans-unit id="abf8114bea9b602a6fa5cde26a4f28f20fe6f936" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; is disabled by configuration but might be enabled later.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; は&lt;/a&gt;設定で無効になっていますが、後で有効にすることがあります。</target>
        </trans-unit>
        <trans-unit id="6bff3abe60e151fca7d023800c126e733ac84e99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. This is especially useful for fields containing private information.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;、彼らがログインすると、検査し、類似したに表示されませんので、プロトコルは、構造体から特定のフィールドを非表示に導出することができます。これは、個人情報を含むフィールドで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8080f21d315b84058f54169b0d0e5acda5fedb17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol converts an Elixir data structure into an algebra document.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルは代数文書にエリクサーデータ構造を変換します。</target>
        </trans-unit>
        <trans-unit id="9574ae7fd608f87be01cc34283e1b30a27e28472" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Kernel.SpecialForms&lt;/code&gt;&lt;/a&gt; module consists solely of macros that can be invoked anywhere in Elixir code without the use of the &lt;code&gt;Kernel.SpecialForms.&lt;/code&gt; prefix. This is possible because they all have been automatically imported, in the same fashion as the functions and macros from the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Kernel.SpecialForms&lt;/code&gt; の&lt;/a&gt;モジュールは、もっぱらを使用せずにエリクサーコードのどこにでも呼び出すことができますマクロで構成されてい &lt;code&gt;Kernel.SpecialForms.&lt;/code&gt; プレフィックス。これが可能なのは、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールの関数やマクロと同じように、すべてが自動的にインポートされているためです。</target>
        </trans-unit>
        <trans-unit id="9b2d0f65323751f2d634dcefd3c1350838c93ed4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;List.Chars&lt;/code&gt;&lt;/a&gt; protocol is responsible for converting a structure to a charlist (only if applicable).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;List.Chars&lt;/code&gt; の&lt;/a&gt;プロトコルはCHARLIST（のみ該当する場合）に構造を変換するための責任があります。</target>
        </trans-unit>
        <trans-unit id="38d20b80dced22a569e8ce8dd2e2cb76ca007f43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; level can be changed via &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;configure/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;レベルを介して変更することができる&lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;configure/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49b1a8808d4938037f08f4bb6036b797cb46526f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol is responsible for converting a structure to a binary (only if applicable).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルは、バイナリ（のみ該当する場合）に構造を変換するための責任があります。</target>
        </trans-unit>
        <trans-unit id="3a7cc4ed1dd3a53a3c1622be5d60a8754eb496ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; module also provides functions that work with time, returning different times kept by the system with support for different time units.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;System&lt;/code&gt; &lt;/a&gt;モジュールは、異なる時間単位をサポートするシステムによって維持異なる時間を返す、経時的にその仕事関数を提供します。</target>
        </trans-unit>
        <trans-unit id="cb4a8417128c99dd0f8e923027d6accff8aed84b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; module provides functions that interact directly with the VM or the host system.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;System&lt;/code&gt; &lt;/a&gt;モジュールは、VMまたはホストシステムとの相互作用を直接機能を提供します。</target>
        </trans-unit>
        <trans-unit id="12062fd16ee7106907717a179dc3f0336ff014a0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#escape/2&quot;&gt;&lt;code&gt;escape/2&lt;/code&gt;&lt;/a&gt; function is sometimes confused with &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt;, because the above examples behave the same with both. The key difference is best illustrated when the value to escape is stored in a variable.</source>
          <target state="translated">&lt;a href=&quot;#escape/2&quot;&gt; &lt;code&gt;escape/2&lt;/code&gt; &lt;/a&gt;機能は、しばしば混同される&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt;上記の例は、両方のと同じように動作するので、。主な違いは、エスケープする値が変数に格納されている場合に最もよく示されます。</target>
        </trans-unit>
        <trans-unit id="809a6d9b2839f1f30bd03fe2ee9a26d931f04222" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#escape/2&quot;&gt;&lt;code&gt;escape/2&lt;/code&gt;&lt;/a&gt; function is sometimes confused with &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt;, because the above examples behave the same with both. The key difference is best illustrated when the value to escape is stored in a variable.</source>
          <target state="translated">&lt;a href=&quot;#escape/2&quot;&gt; &lt;code&gt;escape/2&lt;/code&gt; &lt;/a&gt;機能は、しばしば混同される&lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt;上記の例は、両方のと同じように動作するので、。主な違いは、エスケープする値が変数に格納されている場合に最もよくわかります。</target>
        </trans-unit>
        <trans-unit id="9c2c3fda2409ed0d9077f83013708c3d236d2331" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#in/2&quot;&gt;&lt;code&gt;in/2&lt;/code&gt;&lt;/a&gt; operator (as well as &lt;code&gt;not in&lt;/code&gt;) can be used in guard clauses as long as the right-hand side is a range or a list. In such cases, Elixir will expand the operator to a valid guard expression. For example:</source>
          <target state="translated">&lt;a href=&quot;#in/2&quot;&gt; &lt;code&gt;in/2&lt;/code&gt; &lt;/a&gt;演算子（ならびに &lt;code&gt;not in&lt;/code&gt; ）長い右側範囲またはリストされるとガード句で使用することができます。このような場合、Elixirは演算子を有効なガード式に展開します。例えば：</target>
        </trans-unit>
        <trans-unit id="12e9561355b5b7e730bdce33c0452a589a9f44d2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;Logger.info/2&lt;/code&gt;&lt;/a&gt; macro emits the provided message at the &lt;code&gt;:info&lt;/code&gt; level. Note the arguments given to &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;info/2&lt;/code&gt;&lt;/a&gt; will only be evaluated if a message is logged. For instance, if the Logger level is set to &lt;code&gt;:warning&lt;/code&gt;, &lt;code&gt;:info&lt;/code&gt; messages are never logged and therefore the arguments given above won't even be executed.</source>
          <target state="translated">&lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;Logger.info/2&lt;/code&gt; の&lt;/a&gt;マクロは、で提供されたメッセージを発する &lt;code&gt;:info&lt;/code&gt; レベル。&lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;info/2&lt;/code&gt; に&lt;/a&gt;与えられた引数は、メッセージがログに記録されている場合にのみ評価されることに注意してください。たとえば、ロガーレベルが &lt;code&gt;:warning&lt;/code&gt; に設定されている場合、 &lt;code&gt;:info&lt;/code&gt; メッセージはログに記録されないため、上記の引数は実行されません。</target>
        </trans-unit>
        <trans-unit id="64530a6b669b9204e5a94bb0898670f111e23370" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;inspect/2&lt;/code&gt;&lt;/a&gt; function receives the entity to be inspected followed by the inspecting options, represented by the struct &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt;. Building of the algebra document is done with &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;inspect/2&lt;/code&gt; &lt;/a&gt;機能は、エンティティが構造体によって表される検査オプション、続いて検査する受信&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;。代数ドキュメントの作成は、&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; を使用して&lt;/a&gt;行われます。</target>
        </trans-unit>
        <trans-unit id="1987eac8908bd887fd45fd0aa17e5d5cf4eae6f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;inspect/2&lt;/code&gt;&lt;/a&gt; function receives the entity to be inspected followed by the inspecting options, represented by the struct &lt;a href=&quot;inspect.opts&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt;. Building of the algebra document is done with &lt;a href=&quot;inspect.algebra&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;inspect/2&lt;/code&gt; &lt;/a&gt;機能は、エンティティが構造体によって表される検査オプション、続いて検査する受信&lt;a href=&quot;inspect.opts&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;。代数ドキュメントの構築は&lt;a href=&quot;inspect.algebra&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt;で行われます。</target>
        </trans-unit>
        <trans-unit id="134dffce704618fe41bc1a6ff89c996a1a5a5795" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#parse_head/2&quot;&gt;&lt;code&gt;parse_head/2&lt;/code&gt;&lt;/a&gt; function is an alternative to &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; which stops parsing as soon as it finds a value that is not a switch nor a value for a previous switch.</source>
          <target state="translated">&lt;a href=&quot;#parse_head/2&quot;&gt; &lt;code&gt;parse_head/2&lt;/code&gt; &lt;/a&gt;機能は、に代替され&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt;がスイッチも前スイッチの値ではない値を求めるとすぐに解析を停止します。</target>
        </trans-unit>
        <trans-unit id="697f7c6714240908cebb2f84042a4676fb351582" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#receive/1&quot;&gt;&lt;code&gt;receive/1&lt;/code&gt;&lt;/a&gt; special form handles variables exactly as the &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt; special macro. For more information, check the docs for &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#receive/1&quot;&gt; &lt;code&gt;receive/1&lt;/code&gt; &lt;/a&gt;とおりに特殊な形ハンドル変数を&lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; &lt;/a&gt;特殊マクロ。詳細については、ドキュメントで&lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="e0a73aff6dd1644a4fec2f0cc2e5b4cbf67e226d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; function will receive a list of all arguments passed to the command line.</source>
          <target state="translated">&lt;a href=&quot;#run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; &lt;/a&gt;関数は、コマンドラインに渡されるすべての引数のリストを受け取ります。</target>
        </trans-unit>
        <trans-unit id="d0035717d441177cdcf48958cde9b6d4cb1dceef" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; function will receive a list of all command line arguments passed, according to the user's terminal.</source>
          <target state="translated">&lt;a href=&quot;#run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; &lt;/a&gt;関数は、ユーザの端末に応じて、渡されたすべてのコマンドライン引数のリストを受け取ります。</target>
        </trans-unit>
        <trans-unit id="659e7f5a2f80c4b590db43cd2313e4b28833eba7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol.</source>
          <target state="translated">&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; &lt;/a&gt;によって自動的にインポート機能&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;このプロトコルを呼び出します。</target>
        </trans-unit>
        <trans-unit id="1acbbf7700e430d5e8a317ed727437d8f72605c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol.</source>
          <target state="translated">&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; &lt;/a&gt;によって自動的にインポート機能&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;このプロトコルを呼び出します。</target>
        </trans-unit>
        <trans-unit id="e73d8ea623f499f0cd55a3dd0c9f7d97f06db4b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol. String interpolation also invokes &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; in its arguments. For example, &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; is the same as &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;によって自動的にインポート機能&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;このプロトコルを呼び出します。文字列補間は、引数で&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;も呼び出します。たとえば、 &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; は &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="c9a742b2d1a9b66bf0c1dce63c60e9a1472deab1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol. String interpolation also invokes &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; in its arguments. For example, &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; is the same as &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;によって自動的にインポート機能&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;このプロトコルを呼び出します。文字列補間は、引数で&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;も呼び出します。たとえば、 &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; は &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="99cfcb046ece84f36691d25008fe9a0f03a6c335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module ships with many convenience accessor functions, like the &lt;code&gt;all&lt;/code&gt; anonymous function defined above. See &lt;a href=&quot;access#all/0&quot;&gt;&lt;code&gt;Access.all/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;access#key/2&quot;&gt;&lt;code&gt;Access.key/2&lt;/code&gt;&lt;/a&gt;, and others as examples.</source>
          <target state="translated">&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;のような多くの便利なアクセッサ関数とモジュールの船、 &lt;code&gt;all&lt;/code&gt; 上記で定義された匿名関数。例として&lt;a href=&quot;access#all/0&quot;&gt; &lt;code&gt;Access.all/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;access#key/2&quot;&gt; &lt;code&gt;Access.key/2&lt;/code&gt; &lt;/a&gt;などを参照してください。</target>
        </trans-unit>
        <trans-unit id="bf10aa8724a5861c9b7609f06466ac0092733d78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;enum#into/2&quot;&gt;&lt;code&gt;Enum.into/2&lt;/code&gt;&lt;/a&gt; function uses this protocol to insert an enumerable into a collection:</source>
          <target state="translated">&lt;a href=&quot;enum#into/2&quot;&gt; &lt;code&gt;Enum.into/2&lt;/code&gt; &lt;/a&gt;機能は、コレクションに列挙を挿入するには、このプロトコルを使用しています。</target>
        </trans-unit>
        <trans-unit id="fa114b12b62761d046798dab8cfd3d0e25686da7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol is useful to take values out of a collection. In order to support a wide range of values, the functions provided by the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol do not keep shape. For example, passing a map to &lt;a href=&quot;enum#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt; always returns a list.</source>
          <target state="translated">&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルは、コレクションから値を取ることに有用です。広範囲の値をサポートするために、&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルによって提供される関数は形を保持しません。たとえば、マップを&lt;a href=&quot;enum#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; に&lt;/a&gt;渡すと、常にリストが返されます。</target>
        </trans-unit>
        <trans-unit id="c6e919949e1cc4c7055aecf80d424e6c7c8e1be6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;exunit.assertions&quot;&gt;&lt;code&gt;ExUnit.Assertions&lt;/code&gt;&lt;/a&gt; module contains a set of macros to generate assertions with appropriate error messages.</source>
          <target state="translated">&lt;a href=&quot;exunit.assertions&quot;&gt; &lt;code&gt;ExUnit.Assertions&lt;/code&gt; の&lt;/a&gt;モジュールは、適切なエラーメッセージとアサーションを生成するために、マクロのセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="e06ff54ee1b695829bf1293f395bfa9eaf00995b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://erlang.org/doc/man/queue.html&quot;&gt;&lt;code&gt;queue&lt;/code&gt; is a data structure&lt;/a&gt; that implements (double-ended) FIFO (first-in first-out) queues efficiently:</source>
          <target state="translated">&lt;a href=&quot;http://erlang.org/doc/man/queue.html&quot;&gt; &lt;code&gt;queue&lt;/code&gt; データ構造であり、&lt;/a&gt;実装（ダブルエンド）FIFO（先入れ先出し）キューを効率的ということ：</target>
        </trans-unit>
        <trans-unit id="07ed121626ed7e8f632f13e54f94021e4c3eade3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module ships with many convenience accessor functions, like the &lt;code&gt;all&lt;/code&gt; anonymous function defined above. See &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#all/0&quot;&gt;&lt;code&gt;Access.all/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#key/2&quot;&gt;&lt;code&gt;Access.key/2&lt;/code&gt;&lt;/a&gt;, and others as examples.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;のような多くの便利なアクセッサ関数とモジュールの船、 &lt;code&gt;all&lt;/code&gt; 上記で定義された匿名関数。例として、&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#all/0&quot;&gt; &lt;code&gt;Access.all/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#key/2&quot;&gt; &lt;code&gt;Access.key/2&lt;/code&gt; &lt;/a&gt;などを参照してください。</target>
        </trans-unit>
        <trans-unit id="bdd1437c3341d1c07273b3f627a96d773e38e418" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt; module&lt;/a&gt;, which we&amp;rsquo;re going to see in the next chapter, already provides many conveniences for working with lists. For instance, the examples above could be written as:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; モジュール&lt;/a&gt;我々は次の章で見に行っている、すでにリストを操作するための多くの利便性を提供します。たとえば、上記の例は次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="61a11f1e7c47a4cc245aed3807805f29443ecca4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#into/2&quot;&gt;&lt;code&gt;Enum.into/2&lt;/code&gt;&lt;/a&gt; function uses this protocol to insert an enumerable into a collection:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#into/2&quot;&gt; &lt;code&gt;Enum.into/2&lt;/code&gt; &lt;/a&gt;機能は、コレクションに列挙を挿入するには、このプロトコルを使用しています。</target>
        </trans-unit>
        <trans-unit id="2f7b5a0e03b34766993d4d199617c0cbd0ae5332" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol is useful to take values out of a collection. In order to support a wide range of values, the functions provided by the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol do not keep shape. For example, passing a map to &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt; always returns a list.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルは、コレクションから値を取ることに有用です。幅広い値をサポートするために、&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルによって提供される関数は形を保ちません。たとえば、マップを&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; に&lt;/a&gt;渡すと、常にリストが返されます。</target>
        </trans-unit>
        <trans-unit id="a8c7834fd0c261cc1b5f7ce8f49f4c14a50c74c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; module contains functions that allow us to open files as IO devices. By default, files are opened in binary mode, which requires developers to use the specific &lt;code&gt;IO.binread/2&lt;/code&gt; and &lt;code&gt;IO.binwrite/2&lt;/code&gt; functions from the &lt;code&gt;IO&lt;/code&gt; module:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;モジュールは、私たちはIOデバイスとしてファイルを開くことができるような機能が含まれています。デフォルトでは、ファイルはバイナリモードで開かれ、開発者は &lt;code&gt;IO&lt;/code&gt; モジュールの特定の &lt;code&gt;IO.binread/2&lt;/code&gt; および &lt;code&gt;IO.binwrite/2&lt;/code&gt; 関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f10e5258e9f652f477ba9a6f2a826f10009c524a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module is the main mechanism in Elixir for reading and writing to standard input/output (&lt;code&gt;:stdio&lt;/code&gt;), standard error (&lt;code&gt;:stderr&lt;/code&gt;), files, and other IO devices. Usage of the module is pretty straightforward:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; の&lt;/a&gt;（モジュールは標準入力/出力への読み書きのためにエリクサーにおける主要なメカニズムである &lt;code&gt;:stdio&lt;/code&gt; ）、標準誤差（ &lt;code&gt;:stderr&lt;/code&gt; ）、ファイル、および他のIOデバイス。モジュールの使い方はかなり簡単です：</target>
        </trans-unit>
        <trans-unit id="cedaefb5f61468b8c215642cc99c539ddbc0a94c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides streams, that are both &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt;, here is an upcase echo server using comprehensions:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; の&lt;/a&gt;モジュールが共に流れ、提供&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;、ここで内包を用いUPCASEエコーサーバです。</target>
        </trans-unit>
        <trans-unit id="e868f828529603da9f63a81284af34a853bef03f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html#concat/1&quot;&gt;&lt;code&gt;concat/1&lt;/code&gt;&lt;/a&gt; function comes from &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt; and it concatenates algebra documents together. In the example above it is concatenating the string &lt;code&gt;&quot;#MapSet&amp;lt;&quot;&lt;/code&gt;, the document returned by &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html#to_doc/2&quot;&gt;&lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt;&lt;/a&gt;, and the final string &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;. We prefix the module name &lt;code&gt;#&lt;/code&gt; to denote the inspect presentation is not actually valid Elixir syntax.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html#concat/1&quot;&gt; &lt;code&gt;concat/1&lt;/code&gt; &lt;/a&gt;関数は、から来て&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt;、それは一緒に代数書類を連結します。上記の例では、文字列 &lt;code&gt;&quot;#MapSet&amp;lt;&quot;&lt;/code&gt; 、&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html#to_doc/2&quot;&gt; &lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt; &lt;/a&gt;によって返されるドキュメント、および最後の文字列 &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; を連結しています。モジュール名の前に &lt;code&gt;#&lt;/code&gt; を付けて、検査プレゼンテーションが実際には有効なElixir構文ではないことを示します。</target>
        </trans-unit>
        <trans-unit id="ae641337e01b9f93059a36e1a3ba275b039ee2b4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. See the &quot;Deriving&quot; section of the documentation of the &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol for more information.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;、彼らがログインすると、検査し、類似したに表示されませんので、プロトコルは、構造体から特定のフィールドを非表示に導出することができます。詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルのドキュメントの「派生」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1a28216d6e4672680d6eab32ae15b9eaaeac9554" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;%NaiveDateTime{}&lt;/a&gt; struct contains fields from both &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;Time&lt;/code&gt;. You can create one using the &lt;code&gt;~N&lt;/code&gt; sigil:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;％NaiveDateTime {}&lt;/a&gt;構造体は、両方のフィールド含ま &lt;code&gt;Date&lt;/code&gt; と &lt;code&gt;Time&lt;/code&gt; 。あなたは使用して作成することができます &lt;code&gt;~N&lt;/code&gt; 印章を：</target>
        </trans-unit>
        <trans-unit id="0707ff13aefb15f3954d547b10f3f7c1336b24c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;String module&lt;/a&gt; contains a bunch of functions that operate on strings as defined in the Unicode standard:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;文字列のモジュールは、&lt;/a&gt; Unicode標準で定義された文字列を操作する関数の束が含まれています。</target>
        </trans-unit>
        <trans-unit id="d8cf6fffff5672b5280f7c52df7e56e3e88d0bc7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module was designed to handle mostly static children that are started in the given order when the supervisor starts. A &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; starts with no children. Instead, children are started on demand via &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt;. When a dynamic supervisor terminates, all children are shut down at the same time, with no guarantee of ordering.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールは、スーパーバイザが開始したときに与えられた順序で開始され、主に静的な子供を扱うように設計されました。A &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; は&lt;/a&gt;子供がいないから始まります。代わりに、子は&lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; を&lt;/a&gt;介してオンデマンドで開始されます。動的スーパーバイザーが終了すると、すべての子が同時にシャットダウンされ、順序付けの保証はありません。</target>
        </trans-unit>
        <trans-unit id="3698c4ae0d236660076a5f1da19f774b16936015" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; module allows developers to dynamically create multiple supervised tasks.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; の&lt;/a&gt;モジュールは、開発者が動的に複数の教師タスクを作成することができます。</target>
        </trans-unit>
        <trans-unit id="bc49e09c4c997793290301e758bea0470f3d8f68" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;%Time{}&lt;/a&gt; struct contains the fields &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;microsecond&lt;/code&gt;, and &lt;code&gt;calendar&lt;/code&gt;. You can create one using the &lt;code&gt;~T&lt;/code&gt; sigil:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;％タイム{}&lt;/a&gt;構造体は、フィールド含ま &lt;code&gt;hour&lt;/code&gt; 、 &lt;code&gt;minute&lt;/code&gt; 、 &lt;code&gt;second&lt;/code&gt; 、 &lt;code&gt;microsecond&lt;/code&gt; 、および &lt;code&gt;calendar&lt;/code&gt; 。あなたは使用して作成することができます &lt;code&gt;~T&lt;/code&gt; 印章を：</target>
        </trans-unit>
        <trans-unit id="4e2e3efd9b70a9c902779bfbca4902214d293def" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Assertions.html&quot;&gt;&lt;code&gt;ExUnit.Assertions&lt;/code&gt;&lt;/a&gt; module contains a set of macros to generate assertions with appropriate error messages.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Assertions.html&quot;&gt; &lt;code&gt;ExUnit.Assertions&lt;/code&gt; の&lt;/a&gt;モジュールは、適切なエラーメッセージとアサーションを生成するために、マクロのセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="67af9d3d80d8598be47bff2ebf254dbbb32a0636" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.New.html&quot;&gt;&lt;code&gt;mix new&lt;/code&gt;&lt;/a&gt; command also allows the &lt;code&gt;--sup&lt;/code&gt; option to scaffold an application with a supervision tree out of the box. We talk about supervision trees later on when discussing one of the common anti-patterns when writing libraries.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.New.html&quot;&gt; &lt;code&gt;mix new&lt;/code&gt; &lt;/a&gt;コマンドも可能に &lt;code&gt;--sup&lt;/code&gt; ボックスのうち監督の木を使用してアプリケーションを足場にオプションを選択します。ライブラリを作成するときに一般的なアンチパターンの1つについて説明するときに、監視ツリーについて後で説明します。</target>
        </trans-unit>
        <trans-unit id="08414f62e4bbf9fd4d3ea08bc5b82b4c8e08abc1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. See the &quot;Deriving&quot; section of the documentation of the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol for more information.</source>
          <target state="translated">&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;、彼らがログインすると、検査し、類似したに表示されませんので、プロトコルは、構造体から特定のフィールドを非表示に導出することができます。詳細については、&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルのドキュメントの「派生」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="40361add3dfacd3a82f9de048a333c39b479ae30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inspect.algebra#concat/1&quot;&gt;&lt;code&gt;concat/1&lt;/code&gt;&lt;/a&gt; function comes from &lt;a href=&quot;inspect.algebra&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt; and it concatenates algebra documents together. In the example above, it is concatenating the string &lt;code&gt;&quot;MapSet&amp;lt;&quot;&lt;/code&gt; (all strings are valid algebra documents that keep their formatting when pretty printed), the document returned by &lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt;&lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt;&lt;/a&gt; and the other string &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;inspect.algebra#concat/1&quot;&gt; &lt;code&gt;concat/1&lt;/code&gt; &lt;/a&gt;関数は、から来て&lt;a href=&quot;inspect.algebra&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt;、それは一緒に代数書類を連結します。上記の例では、文字列 &lt;code&gt;&quot;MapSet&amp;lt;&quot;&lt;/code&gt; （すべての文字列は、きれいに印刷されてもフォーマットを維持する有効な代数ドキュメント）、&lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt; &lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt; &lt;/a&gt;によって返されるドキュメント、および他の文字列 &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; を連結しています。</target>
        </trans-unit>
        <trans-unit id="3e499fed5d9e082220ab4665ee83930202fbc216" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides streams, that are both &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;collectable&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt;, here is an upcase echo server using comprehensions:</source>
          <target state="translated">&lt;a href=&quot;io&quot;&gt; &lt;code&gt;IO&lt;/code&gt; の&lt;/a&gt;モジュールが共に流れ、提供&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;collectable&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;、ここで内包を用いUPCASEエコーサーバです。</target>
        </trans-unit>
        <trans-unit id="ef991dbc6590a70e7dc7792c1502faa5b82544ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;logger#info/2&quot;&gt;&lt;code&gt;Logger.info/2&lt;/code&gt;&lt;/a&gt; macro emits the provided message at the &lt;code&gt;:info&lt;/code&gt; level. Note the arguments given to &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;info/2&lt;/code&gt;&lt;/a&gt; will only be evaluated if a message is logged. For instance, if the Logger level is set to &lt;code&gt;:warn&lt;/code&gt;, &lt;code&gt;:info&lt;/code&gt; messages are never logged and therefore the arguments given above won't even be executed.</source>
          <target state="translated">&lt;a href=&quot;logger#info/2&quot;&gt; &lt;code&gt;Logger.info/2&lt;/code&gt; の&lt;/a&gt;マクロは、で提供されたメッセージを発する &lt;code&gt;:info&lt;/code&gt; レベル。&lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;info/2&lt;/code&gt; に&lt;/a&gt;指定された引数は、メッセージがログに記録された場合にのみ評価されることに注意してください。たとえば、ロガーレベルが &lt;code&gt;:warn&lt;/code&gt; に設定されている場合、 &lt;code&gt;:info&lt;/code&gt; メッセージはログに記録されないため、上記の引数は実行されません。</target>
        </trans-unit>
        <trans-unit id="3fb892be769329b47a3a72fea685384027a625eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module was designed to handle mostly static children that are started in the given order when the supervisor starts. A &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; starts with no children. Instead, children are started on demand via &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt;. When a dynamic supervisor terminates, all children are shut down at the same time, with no guarantee of ordering.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールは、スーパーバイザが開始したときに与えられた順序で開始され、主に静的な子供を扱うように設計されました。A &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; は&lt;/a&gt;子供がいないから始まります。代わりに、子は&lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; を&lt;/a&gt;介してオンデマンドで開始されます。ダイナミックスーパーバイザが終了すると、すべての子が同時にシャットダウンされ、順序付けは保証されません。</target>
        </trans-unit>
        <trans-unit id="26a12a273dc85b3ddb0a7cf7190ec7cccb61c0d5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; module allows developers to dynamically create multiple supervised tasks.</source>
          <target state="translated">&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; の&lt;/a&gt;モジュールは、開発者が動的に複数の教師タスクを作成することができます。</target>
        </trans-unit>
        <trans-unit id="9f3bcdc6b0dacd5812de01049f85ba71ec9d986e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;1&lt;/code&gt; represents the first argument passed into the function. &lt;code&gt;&amp;amp;(&amp;amp;1 + 1)&lt;/code&gt; above is exactly the same as &lt;code&gt;fn x -&amp;gt; x + 1 end&lt;/code&gt;. The syntax above is useful for short function definitions.</source>
          <target state="translated">&lt;code&gt;&amp;amp;1&lt;/code&gt; 関数に渡される最初の引数を表します。 &lt;code&gt;&amp;amp;(&amp;amp;1 + 1)&lt;/code&gt; は &lt;code&gt;fn x -&amp;gt; x + 1 end&lt;/code&gt; とまったく同じです。上記の構文は、短い関数定義に役立ちます。</target>
        </trans-unit>
        <trans-unit id="462dea57799a704e8bdaa1d60d5f41548cf0ff70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; operator can be used with more complex expressions:</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 演算子より複雑な式で使用することができます。</target>
        </trans-unit>
        <trans-unit id="8324a31beed435619f352d82babacf78e2ffed56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--source&lt;/code&gt; and &lt;code&gt;--sink&lt;/code&gt; options are particularly useful when trying to understand how the modules in a particular file interact with the whole system. You can combine those options with &lt;code&gt;--label&lt;/code&gt; and &lt;code&gt;--only-nodes&lt;/code&gt; to get all files that exhibit a certain property, for example:</source>
          <target state="translated">&lt;code&gt;--source&lt;/code&gt; と &lt;code&gt;--sink&lt;/code&gt; システム全体で特定のファイルの相互作用でどのようにモジュールを理解しようとする場合のオプションは特に有用です。これらのオプションを &lt;code&gt;--label&lt;/code&gt; および &lt;code&gt;--only-nodes&lt;/code&gt; と組み合わせて、特定のプロパティを示すすべてのファイルを取得できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="da8c5a69e634407470f64de131f93cd85b1c1054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stale&lt;/code&gt; command line option attempts to run only the test files which reference modules that have changed since the last time you ran this task with &lt;code&gt;--stale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--stale&lt;/code&gt; あなたがこのタスクを実行した最後の時間以降に変更された参照モジュールのみのテストファイルを実行するためのコマンドラインオプションの試み &lt;code&gt;--stale&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="27914fb6ca74f78b539d08d503dae1d70d9876c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stale&lt;/code&gt; command line option attempts to run only those test files which reference modules that have changed since the last time you ran this task with &lt;code&gt;--stale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--stale&lt;/code&gt; あなたがこのタスクを実行した最後の時間以降に変更された参照モジュールのみのテストファイルを実行するためのコマンドラインオプションの試み &lt;code&gt;--stale&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="df6e7ebae80eb329ea0918689120d554cb37f2c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stale&lt;/code&gt; option is extremely useful for software iteration, allowing you to run only the relevant tests as you perform changes to the codebase.</source>
          <target state="translated">&lt;code&gt;--stale&lt;/code&gt; オプションは、コードベースへの変更を行うと、あなたが唯一の関連テストを実行することができ、ソフトウェアの反復のために極めて有用です。</target>
        </trans-unit>
        <trans-unit id="08ab3c233377a6ec13838eb8f093fb564ec02061" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace&lt;/code&gt; option is useful when your tests are deadlocking or there are race conditions, as it runs all tests synchronously (&lt;code&gt;async: true&lt;/code&gt; has no effect) and shows detailed information about each test. If you run the tests multiple times you may see this intermittent failure:</source>
          <target state="translated">&lt;code&gt;--trace&lt;/code&gt; それは同期（すべてのテストを実行してオプションでは、あなたのテストがデッドロックされているか、競合状態がある場合に便利です &lt;code&gt;async: true&lt;/code&gt; やショーが各テストに関する詳細情報を何の効果もありません）。テストを複数回実行すると、次の断続的な失敗が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="70c59bbd77397d77a76b99b62c09d5b35df96a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace&lt;/code&gt; option is useful when your tests are deadlocking or there are race conditions, as it runs all tests synchronously (&lt;code&gt;async: true&lt;/code&gt; has no effect) and shows detailed information about each test. You may see one or two intermittent failures:</source>
          <target state="translated">&lt;code&gt;--trace&lt;/code&gt; それは同期（すべてのテストを実行してオプションでは、あなたのテストがデッドロックされているか、競合状態がある場合に便利です &lt;code&gt;async: true&lt;/code&gt; やショーが各テストに関する詳細情報を何の効果もありません）。1つまたは2つの断続的な障害が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="bac163fa8c2566f186b54fd07de5c6d65f93af5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:ascii&lt;/code&gt; mode ignores Unicode characters and provides a more performant implementation when you know the string contains only ASCII characters:</source>
          <target state="translated">&lt;code&gt;:ascii&lt;/code&gt; モードでは、Unicode文字を無視して、文字列はASCII文字のみが含まれている知っているときよりパフォーマンスの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="05564ea628704e49dd4cc09651f569d44c1a82ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:crypto&lt;/code&gt; module is not part of the Erlang standard library, but is included with the Erlang distribution. This means you must list &lt;code&gt;:crypto&lt;/code&gt; in your project&amp;rsquo;s applications list whenever you use it. To do this, edit your &lt;code&gt;mix.exs&lt;/code&gt; file to include:</source>
          <target state="translated">&lt;code&gt;:crypto&lt;/code&gt; モジュールは、Erlangの標準ライブラリの一部ではありませんが、Erlangのディストリビューションに含まれています。つまり、使用するときは常に、プロジェクトのアプリケーションリストに &lt;code&gt;:crypto&lt;/code&gt; をリストする必要があります。これを行うには、以下を含めるように &lt;code&gt;mix.exs&lt;/code&gt; ファイルを編集します。</target>
        </trans-unit>
        <trans-unit id="add3cf115e3a7915716bd93a5b79e1744ef2d173" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:fd&lt;/code&gt; name option allows developers to access &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; file descriptors used by the Erlang VM. You would use those only if you are reimplementing core part of the Runtime System, such as the &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:shell&lt;/code&gt; processes.</source>
          <target state="translated">&lt;code&gt;:fd&lt;/code&gt; nameオプションは、アクセスに開発を可能 &lt;code&gt;in&lt;/code&gt; し、 &lt;code&gt;out&lt;/code&gt; ErlangのVMが使用するファイルディスクリプタ。これらは、 &lt;code&gt;:user&lt;/code&gt; プロセスや &lt;code&gt;:shell&lt;/code&gt; プロセスなど、ランタイムシステムのコア部分を再実装する場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="3f6ac7a8b41e26b0d52e88d330fed22cf2cc2f20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:into&lt;/code&gt; and &lt;code&gt;:uniq&lt;/code&gt; options</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; と &lt;code&gt;:uniq&lt;/code&gt; のオプション</target>
        </trans-unit>
        <trans-unit id="0211bc3942dfba08cb46ef94332394518116ea6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:into&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="a3988e2dcd8f368dd88c8ea1b7ec2bcd3100e56a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:label&lt;/code&gt; option is especially useful with pipelines:</source>
          <target state="translated">&lt;code&gt;:label&lt;/code&gt; オプションは、パイプラインで特に便利です。</target>
        </trans-unit>
        <trans-unit id="d03df649244dc7c63287f31c15a54de9bf6e2182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:mod&lt;/code&gt; option specifies the &amp;ldquo;application callback module&amp;rdquo;, followed by the arguments to be passed on application start. The application callback module can be any module that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Application&lt;/a&gt; behaviour.</source>
          <target state="translated">&lt;code&gt;:mod&lt;/code&gt; オプションは、アプリケーションの起動時に渡される引数が続く「アプリケーションのコールバックモジュール」を指定します。アプリケーションコールバックモジュールは、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;アプリケーションの&lt;/a&gt;動作を実装する任意のモジュールです。</target>
        </trans-unit>
        <trans-unit id="ebc92fad8b6ff75a2a9c584dbe63fcee1353d021" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be given in order to register a supervisor name, the supported values are described in the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; オプションもスーパーバイザ名を登録するために与えることができ、サポートされる値は、で「名前登録」に記載されている&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;モジュールのドキュメント。</target>
        </trans-unit>
        <trans-unit id="869c20a77b331e475dc6550865b679c81c154f2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be given in order to register a supervisor name, the supported values are described in the &quot;Name registration&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; オプションもスーパーバイザ名を登録するために与えることができ、サポートされる値は、で「名前登録」に記載されている&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;モジュールのドキュメント。</target>
        </trans-unit>
        <trans-unit id="9dd616361d3877df539a2d092f8aadb9d1c83008" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be used to register a supervisor name. The supported values are described under the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; オプションは、スーパーバイザ名を登録するために使用することができます。サポートされている値は、&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;モジュールドキュメントの「名前の登録」セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="2ccfdad6d1a6ed0b138742630a980b7e627021ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be used to register a supervisor name. The supported values are described under the &quot;Name registration&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; オプションは、スーパーバイザ名を登録するために使用することができます。サポートされている値については、&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントの「名前の登録」セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="0be059e0f52bc117f0d9ac535f0ebaba535ffdbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option is used for registration as described in the module documentation.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; モジュールのマニュアルに記載されているオプションは、登録のために使用されています。</target>
        </trans-unit>
        <trans-unit id="9ae6a790ebfb15d6c60e22c6003dc079f27e1350" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:persistent&lt;/code&gt; option can be set to &lt;code&gt;true&lt;/code&gt; when there is a need to guarantee parameters set with this function will not be overridden by the ones defined in the application resource file on load. This means persistent values will stick after the application is loaded and also on application reload.</source>
          <target state="translated">&lt;code&gt;:persistent&lt;/code&gt; オプションは次のように設定することができ &lt;code&gt;true&lt;/code&gt; 負荷上のアプリケーションリソースファイルで定義されたもので上書きされなくなります。この機能で設定した保証パラメータに必要がある場合。これは、アプリケーションが読み込まれた後、およびアプリケーションの再読み込み時に永続的な値が残ることを意味します。</target>
        </trans-unit>
        <trans-unit id="f0d1fdc494208ae6f6f718ee89ecd443e0ecaf7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:reduce&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:reduce&lt;/code&gt; オプションを</target>
        </trans-unit>
        <trans-unit id="fb3b286cd086eae72642832fb5a362f5110c1af4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:restart&lt;/code&gt; option controls what the supervisor should consider to be a successful termination or not. If the termination is successful, the supervisor won't restart the child. If the child process crashed, the supervisor will start a new one.</source>
          <target state="translated">&lt;code&gt;:restart&lt;/code&gt; スーパーバイザが正常終了かどうかであることを考慮しなければならない事項を制御します。終了が成功した場合、スーパーバイザは子を再起動しません。子プロセスがクラッシュした場合、スーパーバイザは新しいプロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="21c211e6097ddfd5bc4a9bb4945fe2497ef06a6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:second&lt;/code&gt;, &lt;code&gt;:millisecond&lt;/code&gt;, &lt;code&gt;:microsecond&lt;/code&gt; and &lt;code&gt;:nanosecond&lt;/code&gt; time units controls the return value of the functions that accept a time unit.</source>
          <target state="translated">&lt;code&gt;:second&lt;/code&gt; 、 &lt;code&gt;:millisecond&lt;/code&gt; 、 &lt;code&gt;:microsecond&lt;/code&gt; および &lt;code&gt;:nanosecond&lt;/code&gt; 時間単位時間単位を受け入れる関数の戻り値を制御します。</target>
        </trans-unit>
        <trans-unit id="2027010005a9400e00a3f5e7626e15299c8de0f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:secret_key&lt;/code&gt; key under &lt;code&gt;:my_app&lt;/code&gt; will be computed on the host machine, whenever the release is built. Setting the &lt;code&gt;MY_APP_SECRET_KEY&lt;/code&gt; right before starting your release will have no effect.</source>
          <target state="translated">&lt;code&gt;:secret_key&lt;/code&gt; に下キー &lt;code&gt;:my_app&lt;/code&gt; リリースが構築されるたびに、ホストマシン上で計算されます。リリースを開始する直前に &lt;code&gt;MY_APP_SECRET_KEY&lt;/code&gt; を設定しても効果はありません。</target>
        </trans-unit>
        <trans-unit id="1fc77c6e40a992f998c561f03446c6642ec346ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:spawn&lt;/code&gt; tuple receives a binary that is going to be executed as a full invocation. For example, we can use it to invoke &quot;echo hello&quot; directly:</source>
          <target state="translated">&lt;code&gt;:spawn&lt;/code&gt; タプルは、完全な呼び出しとして実行されようとしているバイナリを受け取ります。たとえば、これを使用して「echo hello」を直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7b93bb4d3ff18560e52b37ae6c18a308889c8bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:static_atom_encoder&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;:static_atom_encoder&lt;/code&gt; の機能</target>
        </trans-unit>
        <trans-unit id="1e63d1877fcfa7f1cccde5219f1c0beb12c1d581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:static_atoms_encoder&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;:static_atoms_encoder&lt;/code&gt; の機能</target>
        </trans-unit>
        <trans-unit id="a4c229bf7cb4e00904018bc0adfca73eff22ebc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:steps&lt;/code&gt; option must be a list and it must always include the atom &lt;code&gt;:assemble&lt;/code&gt;, which does most of the release assembling. You can pass anonymous functions before and after the &lt;code&gt;:assemble&lt;/code&gt; to customize your release assembling pipeline. Those anonymous functions will receive a &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Release.html&quot;&gt;&lt;code&gt;Mix.Release&lt;/code&gt;&lt;/a&gt; struct and must return the same or an updated &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Release.html&quot;&gt;&lt;code&gt;Mix.Release&lt;/code&gt;&lt;/a&gt; struct. It is also possible to build a tarball of the release by passing the &lt;code&gt;:tar&lt;/code&gt; step anywhere after &lt;code&gt;:assemble&lt;/code&gt;. If the release &lt;code&gt;:path&lt;/code&gt; is not configured, the tarball is created in &lt;code&gt;_build/MIX_ENV/RELEASE_NAME-RELEASE_VSN.tar.gz&lt;/code&gt; Otherwise it is created inside the configured &lt;code&gt;:path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:steps&lt;/code&gt; オプションがリストでなければならず、それは常に原子含める必要があります &lt;code&gt;:assemble&lt;/code&gt; 、リリース組み立てのほとんどを行います。 &lt;code&gt;:assemble&lt;/code&gt; の前後に無名関数を渡して、リリースアセンブルパイプラインをカスタマイズできます。これらの無名関数は&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Release.html&quot;&gt; &lt;code&gt;Mix.Release&lt;/code&gt; &lt;/a&gt;構造体を受け取り、同じまたは更新された&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Release.html&quot;&gt; &lt;code&gt;Mix.Release&lt;/code&gt; &lt;/a&gt;構造体を返す必要があります。 &lt;code&gt;:assemble&lt;/code&gt; の後に： &lt;code&gt;:tar&lt;/code&gt; ステップを渡すことで、リリースのtarballを作成することもできます。 release &lt;code&gt;:path&lt;/code&gt; が構成されていない場合、tarballは &lt;code&gt;_build/MIX_ENV/RELEASE_NAME-RELEASE_VSN.tar.gz&lt;/code&gt; 作成されます。それ以外の場合は、構成済みの &lt;code&gt;:path&lt;/code&gt; 内に作成されます。</target>
        </trans-unit>
        <trans-unit id="7852e9b0f6e5ea07cd2dd1ac64030694b4b9d2d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; is a required option and the currently supported value is &lt;code&gt;:one_for_one&lt;/code&gt;. The remaining options can be found in the &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; docs.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; 必要なオプションであり、現在サポートされている値がある &lt;code&gt;:one_for_one&lt;/code&gt; 。残りのオプションは&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;ドキュメントにあります。</target>
        </trans-unit>
        <trans-unit id="3ecf2c76d0e93dbfb5af69dd0e723a8fce1f3ba3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; オプションが必要とされており、デフォルトで3回の再起動の最大は5秒以内に許可されています。利用可能な戦略の詳細については、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="39fdbe497bf489a09ea386b4627370ef6bf6b5e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; オプションが必要とされており、デフォルトで3回の再起動の最大は5秒以内に許可されています。使用可能な戦略の詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="4318a8c81e458ee0b9cf77340dadbaf79a290499" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; オプションが必要とされており、デフォルトで3回の再起動の最大は5秒以内に許可されています。利用可能な戦略の詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="6fd3d939dbec7e219780c6a3622d4fe572215853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_coverage&lt;/code&gt; configuration accepts the following options:</source>
          <target state="translated">&lt;code&gt;:test_coverage&lt;/code&gt; の構成は以下のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="ad9818925ace018f87e1927334e33ca1a365e0b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_type&lt;/code&gt; tag is automatically set by ExUnit, but is &lt;em&gt;not&lt;/em&gt; reserved. This tag is available for users to customize if they desire.</source>
          <target state="translated">&lt;code&gt;:test_type&lt;/code&gt; のタグが自動的にExUnitによって設定されますが、されて&lt;em&gt;いない&lt;/em&gt;予約済み。このタグは、ユーザーが必要に応じてカスタマイズできるようになっています。</target>
        </trans-unit>
        <trans-unit id="34f5e1a838ff9cda2c11258cd3b2a863cbdf176f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_type&lt;/code&gt; tag is automatically set by ExUnit, but is &lt;strong&gt;not&lt;/strong&gt; reserved. This tag is available for users to customize if they desire.</source>
          <target state="translated">&lt;code&gt;:test_type&lt;/code&gt; のタグが自動的にExUnitによって設定されますが、されて&lt;strong&gt;いない&lt;/strong&gt;予約済み。このタグは、ユーザーが必要に応じてカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="9ea129091dfbd99c2a530d95ef2783ebbf81e5ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:tracers&lt;/code&gt; compiler option can be combined with the &lt;code&gt;:parser_options&lt;/code&gt; compiler option to enrich the metadata of the traced events above.</source>
          <target state="translated">&lt;code&gt;:tracers&lt;/code&gt; コンパイラオプションを組み合わせることが可能で &lt;code&gt;:parser_options&lt;/code&gt; 上記のトレースされたイベントのメタデータを豊かにするコンパイラオプション。</target>
        </trans-unit>
        <trans-unit id="0bb936c2d2f36ac2f8066e21c586a6fb2a08b1b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;/code&gt; macro compiles to a call to this function. For example, the following code:</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; この関数の呼び出しにマクロをコンパイルします。たとえば、次のコード：</target>
        </trans-unit>
        <trans-unit id="4db7ff3247782ab9520366b88d96d14d1712fe6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@callback&lt;/code&gt; and &lt;code&gt;@optional_callbacks&lt;/code&gt; attributes are used to create a &lt;code&gt;behaviour_info/1&lt;/code&gt; function available on the defining module. This function can be used to retrieve the callbacks and optional callbacks defined by that module.</source>
          <target state="translated">&lt;code&gt;@callback&lt;/code&gt; と &lt;code&gt;@optional_callbacks&lt;/code&gt; 属性を作成するために使用され &lt;code&gt;behaviour_info/1&lt;/code&gt; 規定モジュール上で利用可能な機能。この関数は、そのモジュールによって定義されたコールバックとオプションのコールバックを取得するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5131f63d4a847e5310d4b0da9f690cbf2653c391" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@compile&lt;/code&gt; attribute accepts different options that are used by both Elixir and Erlang compilers. Some of the common use cases are documented below:</source>
          <target state="translated">&lt;code&gt;@compile&lt;/code&gt; 属性は、両方のElixirとErlangのコンパイラで使用されているさまざまなオプションを受け付けます。一般的な使用例の一部を以下に示します。</target>
        </trans-unit>
        <trans-unit id="9c96b72a2b5229c84ff37173dda7b65a784fe244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Supervisor&lt;/code&gt; will be attached to the generated &lt;code&gt;child_spec/1&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;use Supervisor&lt;/code&gt; 直前の &lt;code&gt;@doc&lt;/code&gt; アノテーションは、生成された &lt;code&gt;child_spec/1&lt;/code&gt; 関数に添付されます。</target>
        </trans-unit>
        <trans-unit id="c2548a73a793d075044328d72e23f487f2153196" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@moduledoc&lt;/code&gt; attribute is used to add documentation to the module. &lt;code&gt;@doc&lt;/code&gt; is used before a function to provide documentation for it. Besides the attributes above, &lt;code&gt;@typedoc&lt;/code&gt; can also be used to attach documentation to types defined as part of typespecs. Elixir also allows metadata to be attached to documentation, by passing a keyword list to &lt;code&gt;@doc&lt;/code&gt; and friends.</source>
          <target state="translated">&lt;code&gt;@moduledoc&lt;/code&gt; の属性は、モジュールにドキュメントを追加するために使用されます。 &lt;code&gt;@doc&lt;/code&gt; は、その前にドキュメントを提供するために使用されます。上記の属性の他に、 &lt;code&gt;@typedoc&lt;/code&gt; を使用して、typespecの一部として定義された型にドキュメントを添付することもできます。Elixirでは、 &lt;code&gt;@doc&lt;/code&gt; や友達にキーワードリストを渡すことで、ドキュメントにメタデータを添付することもできます。</target>
        </trans-unit>
        <trans-unit id="5c4c9561309d3048192c645c1b53867cd58046c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@spec&lt;/code&gt; above expresses that all types allowed to implement the given protocol are valid argument types for the given function.</source>
          <target state="translated">上記の &lt;code&gt;@spec&lt;/code&gt; は、特定のプロトコルを実装できるすべての型が、特定の関数の有効な引数型であることを表しています。</target>
        </trans-unit>
        <trans-unit id="4ecf8bb424c804cabf2a64179dad99d91c08aa50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@type&lt;/code&gt;, &lt;code&gt;@typep&lt;/code&gt;, and &lt;code&gt;@opaque&lt;/code&gt; module attributes can be used to define new types:</source>
          <target state="translated">&lt;code&gt;@type&lt;/code&gt; 、 &lt;code&gt;@typep&lt;/code&gt; 、および &lt;code&gt;@opaque&lt;/code&gt; モジュール属性は新しい型を定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="525e602ced98f13bd5ecaf2f8ae5f13ce9d11d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@typedoc&lt;/code&gt; attribute, similar to the &lt;code&gt;@doc&lt;/code&gt; and &lt;code&gt;@moduledoc&lt;/code&gt; attributes, is used to document custom types.</source>
          <target state="translated">&lt;code&gt;@typedoc&lt;/code&gt; のに似た属性、 &lt;code&gt;@doc&lt;/code&gt; と &lt;code&gt;@moduledoc&lt;/code&gt; 属性は、カスタムタイプを文書化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="923172e1b194c31095f6b50cc3fcf7cd6864f7d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@typedoc&lt;/code&gt; directive, similarly to the &lt;code&gt;@doc&lt;/code&gt; and &lt;code&gt;@moduledoc&lt;/code&gt; directives, is used to document custom types.</source>
          <target state="translated">&lt;code&gt;@typedoc&lt;/code&gt; のディレクティブは、同様に &lt;code&gt;@doc&lt;/code&gt; と &lt;code&gt;@moduledoc&lt;/code&gt; ディレクティブ、カスタムタイプを文書化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a562fb60ef30731bd3203cf4bbff217d46bc1362" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Agent.update/3&lt;/code&gt; function accepts as a second argument any function that receives one argument and returns a value:</source>
          <target state="translated">&lt;code&gt;Agent.update/3&lt;/code&gt; 機能は、2番目の引数として一つの引数を受け取り、値を返す任意の機能を受け付け。</target>
        </trans-unit>
        <trans-unit id="a63341783e3511427fe146f8a19ffd92af29382f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Agent.update/3&lt;/code&gt; function accepts as second argument any function that receives one argument and returns a value:</source>
          <target state="translated">&lt;code&gt;Agent.update/3&lt;/code&gt; 機能は、2番目の引数として一つの引数を受け取り、値を返す任意の機能を受け付け。</target>
        </trans-unit>
        <trans-unit id="7a655503d2990c75edcb4c8b8a481ab364d1c5d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Config&lt;/code&gt; module in Elixir was introduced in v1.9 as a replacement to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt;&lt;code&gt;Mix.Config&lt;/code&gt;&lt;/a&gt;, which was specific to Mix and has been deprecated.</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; エリクサーにおけるモジュールの代替としてV1.9で導入された&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt; &lt;code&gt;Mix.Config&lt;/code&gt; &lt;/a&gt;ミックスに特異的であり、廃止されました。</target>
        </trans-unit>
        <trans-unit id="e27fe58053aba859d0bb7d011fc28980f6e9c181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Enum&lt;/code&gt; module provides a huge range of functions to transform, sort, group, filter and retrieve items from enumerables. It is one of the modules developers use frequently in their Elixir code.</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; モジュールは、変換、ソート、グループ、フィルタおよびenumerablesからアイテムを取得するための機能の巨大な範囲を提供します。これは、開発者がElixirコードで頻繁に使用するモジュールの1つです。</target>
        </trans-unit>
        <trans-unit id="1d4fbc9808f8e26c00c234d6fa1459002dc186de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="e840334dc33e37be12e55cfa6bc3b7e8c169342a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IO&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="ef38704061a34457ddb379b41a2b80be49207a37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Inspect&lt;/code&gt; protocol is the protocol used to transform any data structure into a readable textual representation. This is what tools like IEx use to print results:</source>
          <target state="translated">&lt;code&gt;Inspect&lt;/code&gt; のプロトコルは、読みやすいテキスト表現に任意のデータ構造を変換するために使用されるプロトコルです。これは、IExのようなツールが結果を印刷するために使用するものです。</target>
        </trans-unit>
        <trans-unit id="867c539e4d21456c5aa36b2d220867f9a7212a1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KV.RouterTest&lt;/code&gt; truly has to be distributed, as its purpose is to test the distribution. However, the test in &lt;code&gt;KVServerTest&lt;/code&gt; was only made distributed because we had a hardcoded distributed routing table, which we couldn&amp;rsquo;t configure, but now we can!</source>
          <target state="translated">&lt;code&gt;KV.RouterTest&lt;/code&gt; は本当にその目的は、配布をテストすることであるように、分散されなければなりません。ただし、 &lt;code&gt;KVServerTest&lt;/code&gt; でのテストは、ハードコーディングされた分散ルーティングテーブルがあり、構成できなかったために配布されただけでしたが、現在は可能です！</target>
        </trans-unit>
        <trans-unit id="98cbbae17162ecee1b3987ff4642880f4c337dca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyApp&lt;/code&gt; module given to &lt;code&gt;:mod&lt;/code&gt; needs to implement the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; behaviour. This can be done by putting &lt;code&gt;use Application&lt;/code&gt; in that module and implementing the &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback, for example:</source>
          <target state="translated">&lt;code&gt;MyApp&lt;/code&gt; に与えられたモジュール &lt;code&gt;:mod&lt;/code&gt; ニーズが実装する&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;の挙動を。これを行うに &lt;code&gt;use Application&lt;/code&gt; 、そのモジュールにuse Applicationを配置し、&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;コールバックを実装します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="eb345c09eb20de824e9541a17d7bf17e012b4abc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="c334edecfba6073bd7010af2e40dba91546f5ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; protocol can now be implemented for &lt;code&gt;Any&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; プロトコルは、今のところ実装することができ &lt;code&gt;Any&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e306d6fedad75e62089879bf19da4f3ec37aa79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; protocol expects a function called &lt;code&gt;size&lt;/code&gt; that receives one argument (the data structure we want to know the size of) to be implemented. We can now implement this protocol for the data structures that would have a compliant implementation:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; プロトコルは、呼び出された関数を期待 &lt;code&gt;size&lt;/code&gt; に実装される1つの引数（私たちはの大きさを知りたいデータ構造）を受信します。これで、準拠した実装を持つデータ構造にこのプロトコルを実装できます。</target>
        </trans-unit>
        <trans-unit id="db5fefc34081f3a8d848c3114be6230d0555c05c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;User switch command&lt;/code&gt; can also be used to terminate an existing session, for example when the evaluator gets stuck in an infinite loop or when you are stuck typing an expression:</source>
          <target state="translated">&lt;code&gt;User switch command&lt;/code&gt; また、評価者が無限ループで立ち往生場合や、たとえば、既存のセッションを終了するために使用することができますあなたが立ち往生タイピング表現されているとき：</target>
        </trans-unit>
        <trans-unit id="7f41e81f3757a1435933e38bc5bfe28881ade0a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;User switch command&lt;/code&gt; menu also allows developers to connect to remote shells using the &lt;code&gt;r&lt;/code&gt; command. A topic which we will discuss next.</source>
          <target state="translated">&lt;code&gt;User switch command&lt;/code&gt; メニューには、開発者が使用してリモートシェルに接続することができます &lt;code&gt;r&lt;/code&gt; コマンドを。次に説明するトピック。</target>
        </trans-unit>
        <trans-unit id="57c1d154dd951f8282bee6bdc6065d02cb12023d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[head | tail]&lt;/code&gt; format is not only used on pattern matching but also for prepending items to a list:</source>
          <target state="translated">&lt;code&gt;[head | tail]&lt;/code&gt; 形式は、パターンマッチングで使用されるだけでなく、リストの前に項目を追加するためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="fd1f98818191e0504c9112dc757cd520cf41584f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after&lt;/code&gt; clause can be specified even if there are no match clauses. The timeout value given to &lt;code&gt;after&lt;/code&gt; can be any expression evaluating to one of the allowed values:</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 句は一致句がない場合でも指定することができます。 &lt;code&gt;after&lt;/code&gt; に与えられるタイムアウト値は、許容値の1つに評価される任意の式にすることができます。</target>
        </trans-unit>
        <trans-unit id="d4dc8c4ed1d9e88f4741236f5ec92ee315c9d28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after&lt;/code&gt; clause will be executed regardless of whether or not the tried block succeeds. Note, however, that if a linked process exits, this process will exit and the &lt;code&gt;after&lt;/code&gt; clause will not get run. Thus &lt;code&gt;after&lt;/code&gt; provides only a soft guarantee. Luckily, files in Elixir are also linked to the current processes and therefore they will always get closed if the current process crashes, independent of the &lt;code&gt;after&lt;/code&gt; clause. You will find the same to be true for other resources like ETS tables, sockets, ports and more.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 関わらず、試みブロックが成功したか否かの句が実行されます。ただし、リンクされたプロセスが終了すると、このプロセスは終了し、 &lt;code&gt;after&lt;/code&gt; 句は実行されないことに注意してください。したがって &lt;code&gt;after&lt;/code&gt; はソフト保証のみを提供します。幸いにも、Elixir内のファイルは現在のプロセスにもリンクされているため、現在のプロセスがクラッシュした場合、 &lt;code&gt;after&lt;/code&gt; 句に関係なく、常に閉じられます。ETSテーブル、ソケット、ポートなど、他のリソースについても同様です。</target>
        </trans-unit>
        <trans-unit id="522546706684271ab3f2efbb350890fbe1239f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assigns&lt;/code&gt; extension is useful when the number of variables required by the template is not specified at compilation time.</source>
          <target state="translated">&lt;code&gt;assigns&lt;/code&gt; テンプレートで必要な変数の数は、コンパイル時に指定されていない場合の拡張に便利です。</target>
        </trans-unit>
        <trans-unit id="20b542c507c9f404606e6129f6dd5795d8b21d4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binding&lt;/code&gt; argument is a keyword list of variable bindings. The &lt;code&gt;opts&lt;/code&gt; argument is a keyword list of environment options.</source>
          <target state="translated">&lt;code&gt;binding&lt;/code&gt; の引数は変数バインディングのキーワードリストです。 &lt;code&gt;opts&lt;/code&gt; 引数は、環境オプションのキーワードのリストです。</target>
        </trans-unit>
        <trans-unit id="f9ca71e42e6855918a8f26e42f0cc7edcc80187e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binding&lt;/code&gt; argument is a list of variable bindings. The &lt;code&gt;opts&lt;/code&gt; argument is a keyword list of environment options.</source>
          <target state="translated">&lt;code&gt;binding&lt;/code&gt; の引数は、変数バインディングのリストです。 &lt;code&gt;opts&lt;/code&gt; 引数は、環境オプションのキーワードのリストです。</target>
        </trans-unit>
        <trans-unit id="43af9d9f02afe40e3a624713286d4df36015f946" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause also supports &lt;code&gt;:error&lt;/code&gt; alongside &lt;code&gt;:exit&lt;/code&gt; and &lt;code&gt;:throw&lt;/code&gt; as in Erlang, although this is commonly avoided in favor of &lt;code&gt;raise&lt;/code&gt;/&lt;code&gt;rescue&lt;/code&gt; control mechanisms. One reason for this is that when catching &lt;code&gt;:error&lt;/code&gt;, the error is not automatically transformed into an Elixir error:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 句もサポートしてい &lt;code&gt;:error&lt;/code&gt; と並ん &lt;code&gt;:exit&lt;/code&gt; と &lt;code&gt;:throw&lt;/code&gt; アーランのように、これは一般的に有利に回避されたものの &lt;code&gt;raise&lt;/code&gt; / &lt;code&gt;rescue&lt;/code&gt; 制御機構。この理由の1つは、 &lt;code&gt;:error&lt;/code&gt; をキャッチしたときに、エラーが自動的にElixirエラーに変換されないためです。</target>
        </trans-unit>
        <trans-unit id="efeea9a7b42fc8c994bd1aa663c47cac8fa65f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause also supports catching exits and errors. To do that, it allows matching on both the &lt;em&gt;kind&lt;/em&gt; of the caught value as well as the value itself:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 句は、出口とエラーのキャッチもサポートします。これを行うには、キャッチされた値の&lt;em&gt;種類&lt;/em&gt;と値自体の両方でマッチングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="24330da6829bfcedd43d719e9d8c6b8cc77a9453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause can be used to catch thrown values, exits, and errors.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 節がスロー値、終了し、エラーをキャッチするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8d2397a8238f753aef5def5de423d0f7288e2079" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_spec/1&lt;/code&gt; function returns the child specification which describes how to start the process, if the process is a worker or a supervisor, if the process is temporary, transient or permanent and so on. The &lt;code&gt;child_spec/1&lt;/code&gt; function is automatically defined when we &lt;code&gt;use Agent&lt;/code&gt;, &lt;code&gt;use GenServer&lt;/code&gt;, &lt;code&gt;use Supervisor&lt;/code&gt;, etc. Let&amp;rsquo;s give it a try in the terminal with &lt;code&gt;iex -S mix&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;child_spec/1&lt;/code&gt; 関数は、プロセスが、一時的に一時的または恒久などである場合、プロセスは、労働者や監督者であれば、プロセスを開始する方法を説明した子の仕様を返します。 &lt;code&gt;child_spec/1&lt;/code&gt; 我々はときに関数を自動的に定義された &lt;code&gt;use Agent&lt;/code&gt; 、 &lt;code&gt;use GenServer&lt;/code&gt; 、 &lt;code&gt;use Supervisor&lt;/code&gt; それが持つ、端末で試してみましょうの弾力など、 &lt;code&gt;iex -S mix&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5076e4aa7f98418aab62c50ce92daa399ad148af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;datetime&lt;/code&gt; is expected to be using the ISO calendar with a year greater than or equal to 0.</source>
          <target state="translated">&lt;code&gt;datetime&lt;/code&gt; 年よりも大きいかまたは0に等しいとISOカレンダーを使用することが期待されます。</target>
        </trans-unit>
        <trans-unit id="a7470ce899e96bb2d28a9c1301a9927e4e0d7efa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of bytes or line by line if &lt;code&gt;:line&lt;/code&gt; is given. Alternatively, if &lt;code&gt;:all&lt;/code&gt; is given, then whole &lt;code&gt;device&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFバイトまたは行の所定数によって繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。または、 &lt;code&gt;:all&lt;/code&gt; を指定すると、 &lt;code&gt;device&lt;/code&gt; 全体が返されます。</target>
        </trans-unit>
        <trans-unit id="18926bc10cd79bf34225eb9fdce31365b1c6d418" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of bytes or line by line if &lt;code&gt;:line&lt;/code&gt; is given. This reads from the IO device as a raw binary.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFバイトまたは行の所定数によって繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。これは、IOデバイスからrawバイナリとして読み取ります。</target>
        </trans-unit>
        <trans-unit id="d123d0b725ad2bf46d13d4f89ecd59664f74da3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of characters or line by line if &lt;code&gt;:line&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFによって文字やラインの所定の数で繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。</target>
        </trans-unit>
        <trans-unit id="8d73a8d9622fd3342e8e37363bb8e4678e91ee6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of characters or line by line if &lt;code&gt;:line&lt;/code&gt; is given. Alternatively, if &lt;code&gt;:all&lt;/code&gt; is given, then whole &lt;code&gt;device&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFによって文字やラインの所定の数で繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。または、 &lt;code&gt;:all&lt;/code&gt; を指定すると、 &lt;code&gt;device&lt;/code&gt; 全体が返されます。</target>
        </trans-unit>
        <trans-unit id="bd6d16ba352ae3e2cd0c595b6f985cf5e9830dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do:&lt;/code&gt; and &lt;code&gt;else:&lt;/code&gt; pairs form a keyword list! In fact, the call above is equivalent to:</source>
          <target state="translated">&lt;code&gt;do:&lt;/code&gt; そして &lt;code&gt;else:&lt;/code&gt; ペアは、キーワードリストを形成します！実際、上記の呼び出しは次と同等です。</target>
        </trans-unit>
        <trans-unit id="814c3b44f539cbabd4a18b1a20149ed63266fd5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;doctest&lt;/code&gt; macro loops through all functions and macros defined in &lt;code&gt;MyModule&lt;/code&gt;, parsing their documentation in search of code examples.</source>
          <target state="translated">&lt;code&gt;doctest&lt;/code&gt; の中で定義されたすべての関数とマクロを介してマクロループ &lt;code&gt;MyModule&lt;/code&gt; というコード例の検索でそのドキュメントを解析、。</target>
        </trans-unit>
        <trans-unit id="c8fc7f9dce0c33872417dd46af42c25ac3d59fce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;env.sh&lt;/code&gt; and &lt;code&gt;env.bat&lt;/code&gt; is used to set environment variables. In there, you can set vars such as &lt;code&gt;RELEASE_NODE&lt;/code&gt;, &lt;code&gt;RELEASE_COOKIE&lt;/code&gt;, and &lt;code&gt;RELEASE_TMP&lt;/code&gt; to customize your node name, cookie and tmp directory respectively. Whenever &lt;code&gt;env.sh&lt;/code&gt; or &lt;code&gt;env.bat&lt;/code&gt; is invoked, the variables &lt;code&gt;RELEASE_ROOT&lt;/code&gt;, &lt;code&gt;RELEASE_NAME&lt;/code&gt;, &lt;code&gt;RELEASE_VSN&lt;/code&gt;, and &lt;code&gt;RELEASE_COMMAND&lt;/code&gt; have already been set, so you can rely on them. See the section on environment variables for more information.</source>
          <target state="translated">&lt;code&gt;env.sh&lt;/code&gt; と &lt;code&gt;env.bat&lt;/code&gt; ファイルを設定した環境変数に使用されています。そこでは、次のようなvarsの設定ができ &lt;code&gt;RELEASE_NODE&lt;/code&gt; 、 &lt;code&gt;RELEASE_COOKIE&lt;/code&gt; 、および &lt;code&gt;RELEASE_TMP&lt;/code&gt; それぞれ自分のノード名、クッキーとtmpディレクトリをカスタマイズします。 &lt;code&gt;env.sh&lt;/code&gt; または &lt;code&gt;env.bat&lt;/code&gt; が呼び出されるたびに、変数 &lt;code&gt;RELEASE_ROOT&lt;/code&gt; 、 &lt;code&gt;RELEASE_NAME&lt;/code&gt; 、 &lt;code&gt;RELEASE_VSN&lt;/code&gt; 、および &lt;code&gt;RELEASE_COMMAND&lt;/code&gt; がすでに設定されているため、これらを信頼できます。詳細については、環境変数のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d34a58294096caa28e71e9a15e38240b2916397f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eval&lt;/code&gt; command starts its own instance of the VM but without starting any of the applications in the release and without starting distribution. For example, if you need to do some prep work before running the actual system, like migrating your database, &lt;code&gt;eval&lt;/code&gt; can be a good fit. Just keep in mind any application you may use during eval has to be explicitly loaded and/or started.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; のコマンドは、VMの独自のインスタンスを起動しますが、リリースでは、アプリケーションのいずれかを起動せずと配布を起動せず。たとえば、データベースの移行など、実際のシステムを実行する前に準備作業を行う必要がある場合は、 &lt;code&gt;eval&lt;/code&gt; が適しています。eval中に使用する可能性のあるアプリケーションは、明示的にロードまたは開始する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d7d3bd404eb61a5ace38bb205d91cc9fe9dacd66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; argument is usually a keyword list with field names as atom keys and default values as corresponding values. &lt;a href=&quot;#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; also supports a list of atoms as its argument: in that case, the atoms in the list will be used as the struct's field names and they will all default to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 引数は、通常、原子のキーと対応する値として、デフォルト値としてフィールド名とキーワードのリストです。&lt;a href=&quot;#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;は、引数としてアトムのリストもサポートしています。その場合、リスト内のアトムは構造体のフィールド名として使用され、すべてデフォルトで &lt;code&gt;nil&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="5f8139dc2ac79685ca13901ec7c7e0bf0f70fcbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;container&lt;/code&gt;) and must return a two-element tuple &lt;code&gt;{get_value, update_value}&lt;/code&gt;: the &quot;get&quot; value &lt;code&gt;get_value&lt;/code&gt; (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt; (&lt;code&gt;update_value&lt;/code&gt;). &lt;code&gt;fun&lt;/code&gt; may also return &lt;code&gt;:pop&lt;/code&gt;, which means the current value should be removed from the container and returned.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 引数は、の値受信 &lt;code&gt;key&lt;/code&gt; （または &lt;code&gt;nil&lt;/code&gt; を場合 &lt;code&gt;key&lt;/code&gt; 中に存在しない &lt;code&gt;container&lt;/code&gt; ）と、2つの要素のタプルを返す必要があり &lt;code&gt;{get_value, update_value}&lt;/code&gt; ：「GET」値 &lt;code&gt;get_value&lt;/code&gt; 前に動作させることができる（検索された値を、返される）、 &lt;code&gt;key&lt;/code&gt; 下に格納される新しい値（ &lt;code&gt;update_value&lt;/code&gt; ）。 &lt;code&gt;fun&lt;/code&gt; は &lt;code&gt;:pop&lt;/code&gt; を返すこともあります。つまり、現在の値をコンテナから削除して返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ab82e984fadbbf0154d9f589974323854d91ddd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present) and must return one of the following values:</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 引数は、の値を受信 &lt;code&gt;key&lt;/code&gt; （または &lt;code&gt;nil&lt;/code&gt; を場合は &lt;code&gt;key&lt;/code&gt; 存在しない）と、次のいずれかの値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="15ae90181c3399df6f57363e86986a58cdd69c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspect/1&lt;/code&gt; function is used to convert a data structure&amp;rsquo;s internal representation into a string, typically for printing. Notice that when the &lt;code&gt;receive&lt;/code&gt; block gets executed the sender process we have spawned may already be dead, as its only instruction was to send a message.</source>
          <target state="translated">&lt;code&gt;inspect/1&lt;/code&gt; 機能は、典型的には、印刷するため、文字列にデータ構造の内部表現に変換するために使用されます。ことをお知らせ &lt;code&gt;receive&lt;/code&gt; ブロックは、その命令のみがメッセージを送信するためにあったように私たちが生み出してきた送信元プロセスはすでに、死んでも実行されます。</target>
        </trans-unit>
        <trans-unit id="409be34f87b611c8cf8263c5eb6c08385aeb1ddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; command must be executed as an administrator.</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; コマンドは、管理者として実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4ef8eb0a2e7ca9a57a606a0bc63171348ce16a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/kv.ex&lt;/code&gt; file was compiled, an application manifest named &lt;code&gt;kv.app&lt;/code&gt; was generated and &lt;a href=&quot;../protocols#protocol-consolidation&quot;&gt;all protocols were consolidated as described in the Getting Started guide&lt;/a&gt;. All compilation artifacts are placed inside the &lt;code&gt;_build&lt;/code&gt; directory using the options defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;lib/kv.ex&lt;/code&gt; ファイルは、コンパイルされたアプリケーションマニフェストの名前 &lt;code&gt;kv.app&lt;/code&gt; を発生させたと&lt;a href=&quot;../protocols#protocol-consolidation&quot;&gt;入門ガイドで説明したように、すべてのプロトコルが併合されました&lt;/a&gt;。すべてのコンパイルアーティファクトは、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルで定義されたオプションを使用して &lt;code&gt;_build&lt;/code&gt; ディレクトリ内に配置されます。</target>
        </trans-unit>
        <trans-unit id="afab5577848b6315338da48841f3a29c305f64dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/kv.ex&lt;/code&gt; file was compiled, an application manifest named &lt;code&gt;kv.app&lt;/code&gt; was generated. All compilation artifacts are placed inside the &lt;code&gt;_build&lt;/code&gt; directory using the options defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;lib/kv.ex&lt;/code&gt; ファイルは、名前のアプリケーションマニフェスト、コンパイルされた &lt;code&gt;kv.app&lt;/code&gt; が生成されました。すべてのコンパイルアーティファクトは、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルで定義されたオプションを使用して &lt;code&gt;_build&lt;/code&gt; ディレクトリ内に配置されます。</target>
        </trans-unit>
        <trans-unit id="fb93b5ae3cb838786493785c00bd4b6f99477ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;line_or_bytes&lt;/code&gt; argument configures how the file is read when streaming, by &lt;code&gt;:line&lt;/code&gt; (default) or by a given number of bytes.</source>
          <target state="translated">&lt;code&gt;line_or_bytes&lt;/code&gt; により、ストリーミング時にファイルが読み込まれるか、引数設定さを &lt;code&gt;:line&lt;/code&gt; （デフォルト）または指定されたバイト数だけ。</target>
        </trans-unit>
        <trans-unit id="fe606eea5a853797263dc491beb562e8cbcc73c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;logger&lt;/code&gt; application ships as part of Elixir. We stated that our application needs it by specifying it in the &lt;code&gt;:extra_applications&lt;/code&gt; list in &lt;code&gt;mix.exs&lt;/code&gt;. See the &lt;a href=&quot;https://hexdocs.pm/logger&quot;&gt;official docs&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;logger&lt;/code&gt; エリクサーの一環として、アプリケーション船。私たちはアプリケーションが &lt;code&gt;:extra_applications&lt;/code&gt; の：extra_applicationsリストでそれを指定することによってそれを必要とすると述べ &lt;code&gt;mix.exs&lt;/code&gt; 。詳細については、&lt;a href=&quot;https://hexdocs.pm/logger&quot;&gt;公式ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="54af23949bca7ed78e1b2333920d90c038af7ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mix test&lt;/code&gt; command also allows us to dynamically include and exclude tags. For example, we can run &lt;code&gt;$ mix test --include distributed&lt;/code&gt; to run distributed tests regardless of the value set in &lt;code&gt;test/test_helper.exs&lt;/code&gt;. We could also pass &lt;code&gt;--exclude&lt;/code&gt; to exclude a particular tag from the command line. Finally, &lt;code&gt;--only&lt;/code&gt; can be used to run only tests with a particular tag:</source>
          <target state="translated">&lt;code&gt;mix test&lt;/code&gt; コマンドも、私たちは、動的にタグを含めると除外することができます。たとえば、 &lt;code&gt;test/test_helper.exs&lt;/code&gt; に設定されている値に関係なく、 &lt;code&gt;$ mix test --include distributed&lt;/code&gt; を実行して分散テストを実行できます。 &lt;code&gt;--exclude&lt;/code&gt; を渡して、コマンドラインから特定のタグを除外することもできます。最後に、 &lt;code&gt;--only&lt;/code&gt; を使用して、特定のタグを持つテストのみを実行できます。</target>
        </trans-unit>
        <trans-unit id="75c3e7f0c2115829278fc15321400f8791e52369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; key of an application resource file configures an application callback module and start argument:</source>
          <target state="translated">アプリケーションリソースファイルの &lt;code&gt;mod&lt;/code&gt; キーは、アプリケーションコールバックモジュールと開始引数を構成します。</target>
        </trans-unit>
        <trans-unit id="9164f612584725a4293d48491d9ba4d200ea917a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; received by this function are also supported by &lt;a href=&quot;#start_link/1&quot;&gt;&lt;code&gt;start_link/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; この機能によって受信されたもでサポートされて&lt;a href=&quot;#start_link/1&quot;&gt; &lt;code&gt;start_link/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cefbaf0f99d8706ada7dd49301877753ff097956" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; received by this function are also supported by &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; この機能によって受信されたもでサポートされて&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64284a2724bf8bf1be42ef3f1c05bbea72ce9fee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; is not received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されません。</target>
        </trans-unit>
        <trans-unit id="306d8664f10996ce7979609652732704d345ac55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されます。</target>
        </trans-unit>
        <trans-unit id="e0b8cb821a5d5214e8e6bc4e51c9c7ff6f736aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; was not received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されませんでした。</target>
        </trans-unit>
        <trans-unit id="05af0549cba6832bb035eed4973d7149b45f6ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; was received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されました。</target>
        </trans-unit>
        <trans-unit id="df3b9d4931bcfe8e3dcb9ad739101300cbf08327" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; may be a string, a list of strings, a regular expression, or a compiled pattern.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 、文字列、文字列のリスト、正規表現、またはコンパイルパターンであってもよいです。</target>
        </trans-unit>
        <trans-unit id="9712132d8ecb090f4be0f4f06a8c889cede54cae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; may be a string, a regular expression, or a compiled pattern.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 、文字列、正規表現、またはコンパイルパターンであってもよいです。</target>
        </trans-unit>
        <trans-unit id="f1e822b0c23d86ef4a2e7320c3e2f68f5b6a5886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read_line/1&lt;/code&gt; implementation receives data from the socket using &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; and &lt;code&gt;write_line/2&lt;/code&gt; writes to the socket using &lt;code&gt;:gen_tcp.send/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read_line/1&lt;/code&gt; 実装が使用ソケットからデータを受信する &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; 及び &lt;code&gt;write_line/2&lt;/code&gt; 書き込み使用ソケットに &lt;code&gt;:gen_tcp.send/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4738ad60c532661639b80291c79bbfd95de51f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacement&lt;/code&gt; may be a string or a function that receives the matched pattern and must return the replacement as a string or iodata.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; 文字列または一致したパターンを受け取り、文字列またはiodataとして交換を返さなければならない機能であってもよいです。</target>
        </trans-unit>
        <trans-unit id="9c0458fa683a21c30d6bb8dd696e33377e0fc149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rescue&lt;/code&gt; clause is used to handle exceptions while the &lt;code&gt;catch&lt;/code&gt; clause can be used to catch thrown values and exits. The &lt;code&gt;else&lt;/code&gt; clause can be used to control flow based on the result of the expression. &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; clauses work based on pattern matching (similar to the &lt;code&gt;case&lt;/code&gt; special form).</source>
          <target state="translated">&lt;code&gt;rescue&lt;/code&gt; ながら句は、例外を処理するために使用される &lt;code&gt;catch&lt;/code&gt; 節がスローされた値と終了をキャッチするために使用することができます。 &lt;code&gt;else&lt;/code&gt; 句は、式の結果に基づいて、フローを制御するために使用することができます。 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;rescue&lt;/code&gt; 、および &lt;code&gt;else&lt;/code&gt; 句は、パターンマッチングに基づいて機能します（特殊な &lt;code&gt;case&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="8d1df58d3bea703fd1bbf8c012df285de49b968d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup_all&lt;/code&gt; callbacks are invoked only once per module, before any test is run. All &lt;code&gt;setup&lt;/code&gt; callbacks are run before each test. No callback is run if the test case has no tests or all tests have been filtered out.</source>
          <target state="translated">&lt;code&gt;setup_all&lt;/code&gt; 任意のテストが実行される前にコールバックは、一度だけモジュールごとに呼び出されます。すべての &lt;code&gt;setup&lt;/code&gt; コールバックは、各テストの前に実行されます。テストケースにテストがない場合、またはすべてのテストが除外されている場合、コールバックは実行されません。</target>
        </trans-unit>
        <trans-unit id="bd0f9431cca0c37985b6fe072752b25bee336f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; value returned by this function is used for boundary checks, therefore it is extremely important that this function only returns &lt;code&gt;:ok&lt;/code&gt; if retrieving the &lt;code&gt;size&lt;/code&gt; of the &lt;code&gt;enumerable&lt;/code&gt; is cheap, fast and takes constant time. Otherwise the simplest of operations, such as &lt;code&gt;Enum.at(enumerable, 0)&lt;/code&gt;, will become too expensive.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; この関数によって返される値は、したがって、それはこの機能だけを返すことが非常に重要である、境界チェックのために使用され &lt;code&gt;:ok&lt;/code&gt; 取り出す場合の &lt;code&gt;size&lt;/code&gt; の &lt;code&gt;enumerable&lt;/code&gt; 速く、安価でかつ一定の時間を要します。そうしないと、 &lt;code&gt;Enum.at(enumerable, 0)&lt;/code&gt; などの最も単純な操作が高額になります。</target>
        </trans-unit>
        <trans-unit id="c3101c570b674a9ec75b76ebada532649060afec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spec&lt;/code&gt; consists of a list of three part tuples, in the shape of &lt;code&gt;[{match_pattern, guards, body}]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spec&lt;/code&gt; の形で、3つの部分組のリストで構成 &lt;code&gt;[{match_pattern, guards, body}]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="135f720ae9d7a6885e26e8bce732a1ea91412353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; position is a number &lt;code&gt;&amp;gt;= 0&lt;/code&gt; and guaranteed to exist in the &lt;code&gt;enumerable&lt;/code&gt;. The length is a number &lt;code&gt;&amp;gt;= 1&lt;/code&gt; in a way that &lt;code&gt;start + length &amp;lt;= count&lt;/code&gt;, where &lt;code&gt;count&lt;/code&gt; is the maximum amount of elements in the enumerable.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 位置は、数ある &lt;code&gt;&amp;gt;= 0&lt;/code&gt; とに存在することが保証 &lt;code&gt;enumerable&lt;/code&gt; 。長さは、 &lt;code&gt;start + length &amp;lt;= count&lt;/code&gt; ように、 &lt;code&gt;&amp;gt;= 1&lt;/code&gt; 数値です。ここで、 &lt;code&gt;count&lt;/code&gt; は列挙可能な要素の最大数です。</target>
        </trans-unit>
        <trans-unit id="e168d9178d44f7f46283a9cdf56615be6a7637ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_link/1&lt;/code&gt; (or a custom) is then called for each child process. The &lt;code&gt;start_link/1&lt;/code&gt; function must return &lt;code&gt;{:ok, pid}&lt;/code&gt; where &lt;code&gt;pid&lt;/code&gt; is the process identifier of a new process that is linked to the supervisor. The child process usually starts its work by executing the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback. Generally speaking, the &lt;code&gt;init&lt;/code&gt; callback is where we initialize and configure the child process.</source>
          <target state="translated">次に、 &lt;code&gt;start_link/1&lt;/code&gt; （またはカスタム）が子プロセスごとに呼び出されます。 &lt;code&gt;start_link/1&lt;/code&gt; 関数が戻らなければならない &lt;code&gt;{:ok, pid}&lt;/code&gt; &lt;code&gt;pid&lt;/code&gt; 監督者にリンクされている新しいプロセスのプロセス識別子です。子プロセスは通常、&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックを実行することで作業を開始します。一般的に言って、 &lt;code&gt;init&lt;/code&gt; コールバックは、子プロセスを初期化して構成する場所です。</target>
        </trans-unit>
        <trans-unit id="a8a0cec068e183c964ba134c5b70d885df25681c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_supervised!&lt;/code&gt; function was injected into our test module by &lt;code&gt;use ExUnit.Case&lt;/code&gt;. It does the job of starting the &lt;code&gt;KV.Registry&lt;/code&gt; process, by calling its &lt;code&gt;start_link/1&lt;/code&gt; function. The advantage of using &lt;code&gt;start_supervised!&lt;/code&gt; is that ExUnit will guarantee that the registry process will be shutdown &lt;strong&gt;before&lt;/strong&gt; the next test starts. In other words, it helps guarantee that the state of one test is not going to interfere with the next one in case they depend on shared resources.</source>
          <target state="translated">&lt;code&gt;start_supervised!&lt;/code&gt; 関数は、 &lt;code&gt;use ExUnit.Case&lt;/code&gt; を使用してテストモジュールに挿入されました。これは、 &lt;code&gt;start_link/1&lt;/code&gt; 関数を呼び出すことにより、 &lt;code&gt;KV.Registry&lt;/code&gt; プロセスを開始するジョブを実行します。 &lt;code&gt;start_supervised!&lt;/code&gt; を使用する利点！ExUnitは、次のテストが始まる&lt;strong&gt;前に&lt;/strong&gt;レジストリプロセスがシャットダウンされることを保証します。つまり、共有リソースに依存している場合に、1つのテストの状態が次のテストに干渉しないことを保証するのに役立ちます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4592fb7e0957a1fc52071c848d5e17c99c69385" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;starting_on&lt;/code&gt; represents the starting day of the week. All calendars must support at least the &lt;code&gt;:default&lt;/code&gt; value. They may also support other values representing their days of the week.</source>
          <target state="translated">&lt;code&gt;starting_on&lt;/code&gt; は、週の開始日を表します。すべてのカレンダーは、少なくとも &lt;code&gt;:default&lt;/code&gt; 値をサポートする必要があります。また、曜日を表す他の値をサポートする場合もあります。</target>
        </trans-unit>
        <trans-unit id="7c3b0210439efc565cc631c8fa0e308643197cf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string()&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="61ebcef3a8537f672d50ed7bff3d6db73d860578" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; argument may be an atom (which defines &lt;code&gt;defstruct&lt;/code&gt;) or a &lt;code&gt;struct&lt;/code&gt; itself. The second argument is any &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; that emits two-element tuples (key-value pairs) during enumeration.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 引数は、（定義原子であってもよい &lt;code&gt;defstruct&lt;/code&gt; ）または &lt;code&gt;struct&lt;/code&gt; そのもの。2番目の引数は、列挙中に2要素のタプル（キーと値のペア）を発行する任意の&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="38386201665d1e0b386055fc8c5fb1dd196e0581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; argument may be an atom (which defines &lt;code&gt;defstruct&lt;/code&gt;) or a &lt;code&gt;struct&lt;/code&gt; itself. The second argument is any &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; that emits two-element tuples (key-value pairs) during enumeration.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 引数は、（定義原子であってもよい &lt;code&gt;defstruct&lt;/code&gt; ）または &lt;code&gt;struct&lt;/code&gt; そのもの。2番目の引数は、列挙中に2要素のタプル（キーと値のペア）を発行する任意の&lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3ca4af46f233ac35dc3b79485d62ec51b88145af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subject&lt;/code&gt; is always a string.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; 常に文字列です。</target>
        </trans-unit>
        <trans-unit id="bae6804f43f42b63c5528bcc2381471d0d39bad4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task will still be linked to the caller, see &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information and &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt; for a non-linked variant.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; で定義されるように参照でなければならない&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;。タスクがまだ呼び出し元にリンクされます、参照&lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; を&lt;/a&gt;より多くの情報とするために&lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt;非連結バリアントのため。</target>
        </trans-unit>
        <trans-unit id="08337e923feb72c49328d32727f3434709f1f848" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task won't be linked to the caller, see &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; で定義されるように参照でなければならない&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;。タスクは呼び出し元にリンクされません。詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fa2ecf30353c15851b99330eab13deee5216e86a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task will still be linked to the caller, see &lt;a href=&quot;task#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information and &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt; for a non-linked variant.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; で定義されるように参照でなければならない&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;。タスクは引き続き呼び出し元にリンクされます。詳細については&lt;a href=&quot;task#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt;を、リンクされていないバリアントについては&lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="549a87864f7a5407aab555d12f030b23c5278a92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task won't be linked to the caller, see &lt;a href=&quot;task#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; で定義されるように参照でなければならない&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;。タスクは呼び出し元にリンクされません。詳細については、&lt;a href=&quot;task#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc1957bc0923712dab3fe287b0e8df3bec3ec39a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; macro</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; マクロ</target>
        </trans-unit>
        <trans-unit id="6bf883ffd229719baaf3e026049bc07e3e3fdc26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument passed to &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; is usually &lt;code&gt;:normal&lt;/code&gt; unless in a distributed setup where application takeovers and failovers are configured. Distributed applications are beyond the scope of this documentation.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数がに渡さ&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;、通常 &lt;code&gt;:normal&lt;/code&gt; アプリケーション買収とフェイルオーバーが構成されている分散セットアップでない限り。分散アプリケーションは、このドキュメントの範囲外です。</target>
        </trans-unit>
        <trans-unit id="69149411f0751c47ab43a2cb8ee2352867ce8c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument specifies the type of the application:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数には、アプリケーションの種類を指定します。</target>
        </trans-unit>
        <trans-unit id="f6663df984e95662866d3ab67e965809a6b673af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_in/2&lt;/code&gt; macro is similar but allows us to pass a function that controls how the value changes. For example, let&amp;rsquo;s remove &amp;ldquo;Clojure&amp;rdquo; from Mary&amp;rsquo;s list of languages:</source>
          <target state="translated">&lt;code&gt;update_in/2&lt;/code&gt; マクロは同様であるが、制御方法値が変化することを私たちは機能を通過することを可能にします。たとえば、Maryの言語リストから「Clojure」を削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="8f6feff517dde91abd98ddcc94fc5f8ee947ce68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; macro is frequently used as an extension point. This means that, when you &lt;code&gt;use&lt;/code&gt; a module &lt;code&gt;FooBar&lt;/code&gt;, you allow that module to inject &lt;em&gt;any&lt;/em&gt; code in the current module, such as importing itself or other modules, defining new functions, setting a module state, etc.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; マクロはしばしば拡張ポイントとして使用されます。もし場合、この手段 &lt;code&gt;use&lt;/code&gt; モジュール &lt;code&gt;FooBar&lt;/code&gt; のを、あなたは、そのモジュールを注入することを可能にする&lt;em&gt;任意&lt;/em&gt;など、新しい機能を定義する、それ自体または他のモジュールをインポートするモジュールの状態を設定し、現在のモジュール内のコードを、</target>
        </trans-unit>
        <trans-unit id="443668287cbb8f84b2664ce3f01400a9552185b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8&lt;/code&gt;, &lt;code&gt;utf16&lt;/code&gt;, and &lt;code&gt;utf32&lt;/code&gt; types are for Unicode code points. They can also be applied to literal strings and charlists:</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; 、 &lt;code&gt;utf16&lt;/code&gt; 、および &lt;code&gt;utf32&lt;/code&gt; タイプは、Unicodeコードポイントのためのものです。それらは、リテラル文字列と文字リストにも適用できます。</target>
        </trans-unit>
        <trans-unit id="d593cc256ac243970966e445b59ce382b3d1c4ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vm.args&lt;/code&gt; file may contain any of the VM flags accepted by the &lt;a href=&quot;http://erlang.org/doc/man/erl.html&quot;&gt;&lt;code&gt;erl&lt;/code&gt; command&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;vm.args&lt;/code&gt; のファイルがで受け入れVMフラグのいずれか含まれていてもよい&lt;a href=&quot;http://erlang.org/doc/man/erl.html&quot;&gt; &lt;code&gt;erl&lt;/code&gt; コマンドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="766b25b711b24bf14734bf86264816b50201e5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xref&lt;/code&gt; task expects a mode as first argument:</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; タスクは、最初の引数としてのモードを想定しています。</target>
        </trans-unit>
        <trans-unit id="848f828061a57fea28024ac6791811ddcc578da8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{module, function}&lt;/code&gt; will be invoked with four arguments:</source>
          <target state="translated">&lt;code&gt;{module, function}&lt;/code&gt; 四つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6bb6f7b835bb4273bfb73268cdb830e1eaa1b0c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&amp;gt;&lt;/code&gt; operator is mostly useful when there is a desire to execute a series of operations resembling a pipeline:</source>
          <target state="translated">&lt;code&gt;|&amp;gt;&lt;/code&gt; パイプラインに似た一連の操作を実行したいがある場合に、オペレータは、主に便利です。</target>
        </trans-unit>
        <trans-unit id="e7c15f5a444d0eb501f58185ab4ff6cc148686d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol used in the snippet above is the &lt;strong&gt;pipe operator&lt;/strong&gt;: it takes the output from the expression on its left side and passes it as the first argument to the function call on its right side. It&amp;rsquo;s similar to the Unix &lt;code&gt;|&lt;/code&gt; operator. Its purpose is to highlight the data being transformed by a series of functions. To see how it can make the code cleaner, have a look at the example above rewritten without using the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;|&amp;gt;&lt;/code&gt; 上記のコードで使用される記号は、&lt;strong&gt;パイプ演算子&lt;/strong&gt;：それは、その左側の表現から出力を受け取り、その右側に関数呼び出しの最初の引数として渡します。Unixに似ています &lt;code&gt;|&lt;/code&gt; オペレーター。その目的は、一連の関数によって変換されるデータを強調表示することです。コードをよりクリーンにする方法を確認するには、 &lt;code&gt;|&amp;gt;&lt;/code&gt; 演算子を使用せずに上記の例を書き直してください。</target>
        </trans-unit>
        <trans-unit id="de83fadff1ba2a72273182089ea2a050990085bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~c&lt;/code&gt; sigil is useful for generating char lists that contain single quotes:</source>
          <target state="translated">&lt;code&gt;~c&lt;/code&gt; 印章は、単一引用符が含まれている文字のリストを生成するために有用です：</target>
        </trans-unit>
        <trans-unit id="281b4a2fc5fd64a2cedf95577018a34d44729cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~s&lt;/code&gt; sigil is used to generate strings, like double quotes are. The &lt;code&gt;~s&lt;/code&gt; sigil is useful when a string contains double quotes:</source>
          <target state="translated">&lt;code&gt;~s&lt;/code&gt; 二重引用符があるよう印章は、文字列を生成するために使用されます。 &lt;code&gt;~s&lt;/code&gt; 文字列は二重引用符が含まれている場合、印章は便利です。</target>
        </trans-unit>
        <trans-unit id="1b5ce296d52d56b387e6952a8ac2c01f7f747b55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~w&lt;/code&gt; sigil also accepts the &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; modifiers (for char lists, strings, and atoms, respectively), which specify the data type of the elements of the resulting list:</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; シギルも受け付け &lt;code&gt;c&lt;/code&gt; 、 &lt;code&gt;s&lt;/code&gt; 、および結果のリストの要素のデータ型を指定し、（それぞれチャーリスト、文字列、原子など）修飾子。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9578a70bcff0146fc766139c2fb2691deada995b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~w&lt;/code&gt; sigil is used to generate lists of words (&lt;em&gt;words&lt;/em&gt; are just regular strings). Inside the &lt;code&gt;~w&lt;/code&gt; sigil, words are separated by whitespace.</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; 印章は、単語のリストを（生成するために使用される&lt;em&gt;言葉は&lt;/em&gt;普通の文字列です）。内部 &lt;code&gt;~w&lt;/code&gt; 印章、単語は空白で区切られています。</target>
        </trans-unit>
        <trans-unit id="57c0bcba93565ebcb726bbcf9fe5e3a854d68664" translate="yes" xml:space="preserve">
          <source>The AST for a pipeline (a sequence of applications of &lt;code&gt;|&amp;gt;&lt;/code&gt;) is similar to the AST of a sequence of binary operators or function applications: the top-level expression is the right-most &lt;code&gt;:|&amp;gt;&lt;/code&gt; (which is the last one to be executed), and its left-hand and right-hand sides are its arguments:</source>
          <target state="translated">パイプラインのAST（一連の &lt;code&gt;|&amp;gt;&lt;/code&gt; のアプリケーション）は、一連の二項演算子または関数アプリケーションのASTに似ています。最上位の式は最も右の &lt;code&gt;:|&amp;gt;&lt;/code&gt; です（これは実行されます）、そしてその左側と右側はその引数です：</target>
        </trans-unit>
        <trans-unit id="22673f1e15930ac4a2bce8fc889928e4bf1f922d" translate="yes" xml:space="preserve">
          <source>The BREAK menu</source>
          <target state="translated">BREACKメニュー</target>
        </trans-unit>
        <trans-unit id="98504b06eb756100aa8d0fe1b8a5bed8131e1638" translate="yes" xml:space="preserve">
          <source>The Client API</source>
          <target state="translated">クライアントAPI</target>
        </trans-unit>
        <trans-unit id="de89441db4562cab93bdfbf9ab1875a33c2df7e4" translate="yes" xml:space="preserve">
          <source>The Date struct contains the fields year, month, day and calendar. New dates can be built with the &lt;a href=&quot;#new/3&quot;&gt;&lt;code&gt;new/3&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~D&lt;/code&gt; (see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_D/2&quot;&gt;&lt;code&gt;Kernel.sigil_D/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Date構造体には、フィールドyear、month、day、calendarが含まれています。新しい日付は、&lt;a href=&quot;#new/3&quot;&gt; &lt;code&gt;new/3&lt;/code&gt; &lt;/a&gt;関数または &lt;code&gt;~D&lt;/code&gt; （&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_D/2&quot;&gt; &lt;code&gt;Kernel.sigil_D/2&lt;/code&gt; を&lt;/a&gt;参照）sigilを使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="087349ac5d28e5bd9b6d72d6f50436cef7a3d724" translate="yes" xml:space="preserve">
          <source>The Date struct contains the fields year, month, day and calendar. New dates can be built with the &lt;a href=&quot;#new/3&quot;&gt;&lt;code&gt;new/3&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~D&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_D/2&quot;&gt;&lt;code&gt;Kernel.sigil_D/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Date構造体には、年、月、日、カレンダーのフィールドが含まれています。新しい日付は、&lt;a href=&quot;#new/3&quot;&gt; &lt;code&gt;new/3&lt;/code&gt; &lt;/a&gt;関数を使用して、または &lt;code&gt;~D&lt;/code&gt; （&lt;a href=&quot;kernel#sigil_D/2&quot;&gt; &lt;code&gt;Kernel.sigil_D/2&lt;/code&gt; を&lt;/a&gt;参照）sigil を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="60739ce280ae99907b36b37adf6ef92a05aaedd6" translate="yes" xml:space="preserve">
          <source>The Elixir AST</source>
          <target state="translated">エリクシールAST</target>
        </trans-unit>
        <trans-unit id="b354da44a5ccc03b14d8e9e9f977406245074d69" translate="yes" xml:space="preserve">
          <source>The Elixir guides are also available in EPUB format:</source>
          <target state="translated">エリクシールのガイドはEPUB形式でもご利用いただけます。</target>
        </trans-unit>
        <trans-unit id="3b3b88c39f2093f79b409f882370622044ce70ae" translate="yes" xml:space="preserve">
          <source>The Erlang compiler can provide a number of optimizations on binary creation and matching. To see optimization output, set the &lt;code&gt;bin_opt_info&lt;/code&gt; compiler option:</source>
          <target state="translated">Erlangコンパイラーは、バイナリーの作成とマッチングに関して多くの最適化を提供できます。最適化の出力を表示するには、 &lt;code&gt;bin_opt_info&lt;/code&gt; コンパイラー・オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="7953816f5ef9843a5ed4589ec36cf1a54fdf799d" translate="yes" xml:space="preserve">
          <source>The GenServer behaviour abstracts the common client-server interaction. Developers are only required to implement the callbacks and functionality they are interested in.</source>
          <target state="translated">GenServerのビヘイビアは、一般的なクライアントとサーバのインタラクションを抽象化しています。開発者は、興味のあるコールバックや機能を実装するだけでよいのです。</target>
        </trans-unit>
        <trans-unit id="3d66e19aeb4f8b03c43c83bf06d0a7f010db09c4" translate="yes" xml:space="preserve">
          <source>The GenServer name</source>
          <target state="translated">GenServer名</target>
        </trans-unit>
        <trans-unit id="4c83968c19110a694ab1613224a8a36aaf6e3f41" translate="yes" xml:space="preserve">
          <source>The IEx.Server.</source>
          <target state="translated">IEx.Serverを使用しています。</target>
        </trans-unit>
        <trans-unit id="06223706895cabbf123c8e779883d2c10704e930" translate="yes" xml:space="preserve">
          <source>The ISO calendar has two eras:</source>
          <target state="translated">ISOカレンダーには2つの時代があります。</target>
        </trans-unit>
        <trans-unit id="abfb693f46640a1c9464403f477ffc2622e7b611" translate="yes" xml:space="preserve">
          <source>The ISO calendar has two eras: the &quot;current era&quot; (CE) which starts in year &lt;code&gt;1&lt;/code&gt; and is defined as era &lt;code&gt;1&lt;/code&gt;. And &quot;before the current era&quot; (BCE) for those years less than &lt;code&gt;1&lt;/code&gt;, defined as era &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">ISOカレンダーには2つの時代があります。 &lt;code&gt;1&lt;/code&gt; 年目から始まり、時代 &lt;code&gt;1&lt;/code&gt; として定義される「現在の時代」（CE）です。そして、 &lt;code&gt;1&lt;/code&gt; 未満の年の「現在の時代の前」（BCE）、時代 &lt;code&gt;0&lt;/code&gt; として定義されます。</target>
        </trans-unit>
        <trans-unit id="25aef49825211907484d43e756114a0b1fa27f36" translate="yes" xml:space="preserve">
          <source>The ISO calendar has two eras: the current era which starts in year 1 and is defined as era &quot;1&quot;. And a second era for those years less than 1 defined as era &quot;0&quot;.</source>
          <target state="translated">ISO暦には2つの時代があり、1年目から始まる現在の時代を &quot;1 &quot;と定義しています。そして、1年未満の年を &quot;0 &quot;と定義した第2の時代です。</target>
        </trans-unit>
        <trans-unit id="1a856fcbbb476ea67477f19a707dbe002ca4c6dc" translate="yes" xml:space="preserve">
          <source>The Jaro distance metric is designed and best suited for short strings such as person names. Elixir itself uses this function to provide the &quot;did you mean?&quot; functionality. For instance, when you are calling a function in a module and you have a typo in the function name, we attempt to suggest the most similar function name available, if any, based on the &lt;a href=&quot;#jaro_distance/2&quot;&gt;&lt;code&gt;jaro_distance/2&lt;/code&gt;&lt;/a&gt; score.</source>
          <target state="translated">Jaro距離メトリックは、人名などの短い文字列に最適であり、設計されています。エリクサー自体はこの関数を使用して「もしかして？」機能性。たとえば、モジュールで関数を呼び出しているときに、関数名にタイプミスがある場合、&lt;a href=&quot;#jaro_distance/2&quot;&gt; &lt;code&gt;jaro_distance/2&lt;/code&gt; &lt;/a&gt;スコアに基づいて、使用可能な最も類似した関数名があれば提案します。</target>
        </trans-unit>
        <trans-unit id="2243840442a8f32a34eed8592db54cfe259c03b6" translate="yes" xml:space="preserve">
          <source>The Mix build tool automates most of the application management tasks. For example, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; automatically starts your application dependencies and your application itself before your test runs. &lt;code&gt;mix run --no-halt&lt;/code&gt; boots your current project and can be used to start a long running system. See &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix help run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Mixビルドツールは、ほとんどのアプリケーション管理タスクを自動化します。たとえば、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; は&lt;/a&gt;、テストが実行される前に、アプリケーションの依存関係とアプリケーション自体を自動的に開始します。 &lt;code&gt;mix run --no-halt&lt;/code&gt; は現在のプロジェクトを起動し、長時間実行されているシステムを起動するために使用できます。&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;mix help run&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="37173c596301d8be8275b8b1f500a183f87ab7fa" translate="yes" xml:space="preserve">
          <source>The Mix build tool can also be used to start your applications. For example, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; automatically starts your application dependencies and your application itself before your test runs. &lt;code&gt;mix run --no-halt&lt;/code&gt; boots your current project and can be used to start a long running system. See &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix help run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Mixビルドツールは、アプリケーションの起動にも使用できます。たとえば、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;、テストが実行される前に、アプリケーションの依存関係とアプリケーション自体が自動的に開始されます。 &lt;code&gt;mix run --no-halt&lt;/code&gt; は現在のプロジェクトを起動し、長時間実行されているシステムの起動に使用できます。&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;mix help run&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed1904da080bbb46fb65f0901cdd39a58e1d853d" translate="yes" xml:space="preserve">
          <source>The Mix compiler automatically looks for calls to deprecated modules and emit warnings during compilation, computed via &lt;code&gt;mix xref warnings&lt;/code&gt;.</source>
          <target state="translated">Mixコンパイラーは、非推奨のモジュールへの呼び出しを自動的に検索し、コンパイル時に &lt;code&gt;mix xref warnings&lt;/code&gt; を介して計算された警告を発行します。</target>
        </trans-unit>
        <trans-unit id="3d196736edd538da5aa685ff060f4fbf30705946" translate="yes" xml:space="preserve">
          <source>The Mix compiler automatically looks for calls to deprecated modules and emit warnings during compilation.</source>
          <target state="translated">Mix コンパイラは、コンパイル中に非推奨モジュールの呼び出しを自動的に探し、警告を発します。</target>
        </trans-unit>
        <trans-unit id="34452d9cfe86755e31b4602a825598bf680a2294" translate="yes" xml:space="preserve">
          <source>The Mix.Release struct has the following read-only fields</source>
          <target state="translated">Mix.Release 構造体には、以下の読み取り専用フィールドがあります。</target>
        </trans-unit>
        <trans-unit id="39b03d254e8865b80217130278011a49c00a226d" translate="yes" xml:space="preserve">
          <source>The Mix.Release struct has the following read-only fields:</source>
          <target state="translated">Mix.Release構造体には、以下の読み取り専用フィールドがあります。</target>
        </trans-unit>
        <trans-unit id="9dfe2774b7ab63b2ea9316075f485e26e6770c05" translate="yes" xml:space="preserve">
          <source>The NaiveDateTime struct contains the fields year, month, day, hour, minute, second, microsecond and calendar. New naive datetimes can be built with the &lt;a href=&quot;#new/2&quot;&gt;&lt;code&gt;new/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#new/8&quot;&gt;&lt;code&gt;new/8&lt;/code&gt;&lt;/a&gt; functions or using the &lt;code&gt;~N&lt;/code&gt; (see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_N/2&quot;&gt;&lt;code&gt;Kernel.sigil_N/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">NaiveDateTime構造体には、年、月、日、時、分、秒、マイクロ秒、およびカレンダーのフィールドが含まれています。新しいナイーブ日付時刻はで構築することができます&lt;a href=&quot;#new/2&quot;&gt; &lt;code&gt;new/2&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#new/8&quot;&gt; &lt;code&gt;new/8&lt;/code&gt; &lt;/a&gt;機能や使用 &lt;code&gt;~N&lt;/code&gt; （参照&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_N/2&quot;&gt; &lt;code&gt;Kernel.sigil_N/2&lt;/code&gt; の&lt;/a&gt;印章）：</target>
        </trans-unit>
        <trans-unit id="be1eb0ffc63d3de62778534778d3195fa7ba19b5" translate="yes" xml:space="preserve">
          <source>The NaiveDateTime struct contains the fields year, month, day, hour, minute, second, microsecond and calendar. New naive datetimes can be built with the &lt;a href=&quot;#new/2&quot;&gt;&lt;code&gt;new/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#new/8&quot;&gt;&lt;code&gt;new/8&lt;/code&gt;&lt;/a&gt; functions or using the &lt;code&gt;~N&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_N/2&quot;&gt;&lt;code&gt;Kernel.sigil_N/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">NaiveDateTime構造体には、年、月、日、時、分、秒、マイクロ秒、およびカレンダーのフィールドが含まれています。新しいナイーブ日付時刻はで構築することができます&lt;a href=&quot;#new/2&quot;&gt; &lt;code&gt;new/2&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#new/8&quot;&gt; &lt;code&gt;new/8&lt;/code&gt; &lt;/a&gt;機能や使用 &lt;code&gt;~N&lt;/code&gt; （参照&lt;a href=&quot;kernel#sigil_N/2&quot;&gt; &lt;code&gt;Kernel.sigil_N/2&lt;/code&gt; の&lt;/a&gt;印章）：</target>
        </trans-unit>
        <trans-unit id="68ea22c150e9e8bf3b5e486f34ccdf3da6885051" translate="yes" xml:space="preserve">
          <source>The Plug library also allows developers to define their own plugs which can be run in a web server:</source>
          <target state="translated">また、プラグライブラリは、開発者が独自のプラグを定義して、ウェブサーバで実行できるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="a12ef86cf46c7d5f545c70ee0f3e00bac2b5a15b" translate="yes" xml:space="preserve">
          <source>The Supervisor name</source>
          <target state="translated">監督者名</target>
        </trans-unit>
        <trans-unit id="ec4b01d7b2161ab93486a9f17a632dd403411fb3" translate="yes" xml:space="preserve">
          <source>The Task struct.</source>
          <target state="translated">Task構造体。</target>
        </trans-unit>
        <trans-unit id="5c4c62b39d79d7cb27a5185a0a6601bdd97a3708" translate="yes" xml:space="preserve">
          <source>The Task type.</source>
          <target state="translated">タスクの種類。</target>
        </trans-unit>
        <trans-unit id="9e011d9f109b1de717a6e789ef4d48fa0c5bf500" translate="yes" xml:space="preserve">
          <source>The Time struct contains the fields hour, minute, second and microseconds. New times can be built with the &lt;a href=&quot;#new/4&quot;&gt;&lt;code&gt;new/4&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~T&lt;/code&gt; (see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_T/2&quot;&gt;&lt;code&gt;Kernel.sigil_T/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Time構造体には、時間、分、秒、およびマイクロ秒のフィールドが含まれています。新しい時間は、&lt;a href=&quot;#new/4&quot;&gt; &lt;code&gt;new/4&lt;/code&gt; &lt;/a&gt;関数または &lt;code&gt;~T&lt;/code&gt; （&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_T/2&quot;&gt; &lt;code&gt;Kernel.sigil_T/2&lt;/code&gt; を&lt;/a&gt;参照）sigilを使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="3b4c615274399f80e52f24988cf891d5bac9928c" translate="yes" xml:space="preserve">
          <source>The Time struct contains the fields hour, minute, second and microseconds. New times can be built with the &lt;a href=&quot;#new/4&quot;&gt;&lt;code&gt;new/4&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~T&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_T/2&quot;&gt;&lt;code&gt;Kernel.sigil_T/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Time構造体には、時間、分、秒、マイクロ秒のフィールドが含まれます。新しい時間は、&lt;a href=&quot;#new/4&quot;&gt; &lt;code&gt;new/4&lt;/code&gt; &lt;/a&gt;関数を使用するか、 &lt;code&gt;~T&lt;/code&gt; （&lt;a href=&quot;kernel#sigil_T/2&quot;&gt; &lt;code&gt;Kernel.sigil_T/2&lt;/code&gt; を&lt;/a&gt;参照）sigil を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="8474ee41c99d01d2c859c45e3ba20cf759140dae" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding is self-synchronizing. This means that if malformed data (i.e., data that is not possible according to the definition of the encoding) is encountered, only one code point needs to be rejected.</source>
          <target state="translated">UTF-8 エン コ ーデ ィ ン グは自己同期です。こ れは、 不正なデー タ (すなわち、 エン コ ーデ ィ ン グの定義に従 う こ と がで き ないデー タ)に遭遇 し た場合には、 1 つの コ ー ド 点だけを拒否す る 必要があ る こ と を意味 し ます。</target>
        </trans-unit>
        <trans-unit id="af4cd337ec1852f0dfb035c5a67522bde05e43a9" translate="yes" xml:space="preserve">
          <source>The Unicode standard assigns code points to many of the characters we know. For example, the letter &lt;code&gt;a&lt;/code&gt; has code point &lt;code&gt;97&lt;/code&gt; while the letter &lt;code&gt;ł&lt;/code&gt; has code point &lt;code&gt;322&lt;/code&gt;. When writing the string &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; to disk, we need to convert this sequence of characters to bytes. If we adopted a rule that said one byte represents one code point, we wouldn&amp;rsquo;t be able to write &lt;code&gt;&quot;hełło&quot;&lt;/code&gt;, because it uses the code point &lt;code&gt;322&lt;/code&gt; for &lt;code&gt;ł&lt;/code&gt;, and one byte can only represent a number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. But of course, given you can actually read &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; on your screen, it must be represented &lt;em&gt;somehow&lt;/em&gt;. That&amp;rsquo;s where encodings come in.</source>
          <target state="translated">Unicode標準は、コードポイントを、私たちが知っている多くの文字に割り当てます。たとえば、文字 &lt;code&gt;a&lt;/code&gt; にはコードポイント &lt;code&gt;97&lt;/code&gt; があり、文字 &lt;code&gt;ł&lt;/code&gt; にはコードポイント &lt;code&gt;322&lt;/code&gt; があります。文字列 &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; をディスクに書き込むとき、この文字シーケンスをバイトに変換する必要があります。私たちは、1つのバイトが1つのコード・ポイントを表したルールを採用した場合、我々は書くことができないだろう &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; 、それはコードポイントを使用しているので、 &lt;code&gt;322&lt;/code&gt; のための &lt;code&gt;ł&lt;/code&gt; 、1バイトのみから数を表すことができます &lt;code&gt;0&lt;/code&gt; へ &lt;code&gt;255&lt;/code&gt; 。しかし、もちろん、実際に画面上で &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; を読むことができる場合、それは表されなければなりません&lt;em&gt;どういうわけか&lt;/em&gt;。それがエンコーディングの出番です。</target>
        </trans-unit>
        <trans-unit id="2f4916c41c92d9991c4b1a3b6471eb39a20e54f2" translate="yes" xml:space="preserve">
          <source>The User switch command</source>
          <target state="translated">ユーザースイッチコマンド</target>
        </trans-unit>
        <trans-unit id="1a567b978fcdc4da963f5cc140173eaaff0ae789" translate="yes" xml:space="preserve">
          <source>The above example shows the difference; the &lt;code&gt;String&lt;/code&gt; module returns Unicode codepoints, while &lt;code&gt;:binary&lt;/code&gt; deals with raw data bytes.</source>
          <target state="translated">上記の例は違いを示しています。 &lt;code&gt;String&lt;/code&gt; モジュールはしばらくの間、Unicodeのコードポイントを返し &lt;code&gt;:binary&lt;/code&gt; 生のデータバイトを扱います。</target>
        </trans-unit>
        <trans-unit id="3a294edc39ba298dd2fbf7c3e29c2a6c5831e0fe" translate="yes" xml:space="preserve">
          <source>The above is treated the same as &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; by the parser.</source>
          <target state="translated">上記は、パーサーによって &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="06bc5ff1abf3cc124d1fca8a735f66352777e819" translate="yes" xml:space="preserve">
          <source>The above will open another Graphical User Interface that provides many panes to fully understand and navigate the runtime and your project:</source>
          <target state="translated">上記は、ランタイムとプロジェクトを完全に理解し、ナビゲートするための多くのペインを提供する別のグラフィカル・ユーザー・インターフェースを開きます。</target>
        </trans-unit>
        <trans-unit id="d9d727dddfefcfe94e321842e4a52a5241d4e51c" translate="yes" xml:space="preserve">
          <source>The accepted formats are:</source>
          <target state="translated">受け入れられるフォーマットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4124955158531615905cdb11c74372fed2efecdc" translate="yes" xml:space="preserve">
          <source>The accepted options are:</source>
          <target state="translated">受け入れられた選択肢は</target>
        </trans-unit>
        <trans-unit id="7021d5fb676b9152eef63709fd1b96c4dc35ca14" translate="yes" xml:space="preserve">
          <source>The access syntax can also be used with the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#put_in/2&quot;&gt;&lt;code&gt;Kernel.put_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#update_in/2&quot;&gt;&lt;code&gt;Kernel.update_in/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_and_update_in/2&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt;&lt;/a&gt; macros to allow values to be set in nested data structures:</source>
          <target state="translated">アクセス構文は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#put_in/2&quot;&gt; &lt;code&gt;Kernel.put_in/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#update_in/2&quot;&gt; &lt;code&gt;Kernel.update_in/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_and_update_in/2&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt; &lt;/a&gt;マクロで使用して、ネストされたデータ構造に値を設定できるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="aca7adeb72bb259b777f4c2b15cd9a4f9b4ff5ce" translate="yes" xml:space="preserve">
          <source>The access syntax can also be used with the &lt;a href=&quot;kernel#put_in/2&quot;&gt;&lt;code&gt;Kernel.put_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#update_in/2&quot;&gt;&lt;code&gt;Kernel.update_in/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#get_and_update_in/2&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt;&lt;/a&gt; macros to allow values to be set in nested data structures:</source>
          <target state="translated">アクセス構文を&lt;a href=&quot;kernel#put_in/2&quot;&gt; &lt;code&gt;Kernel.put_in/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#update_in/2&quot;&gt; &lt;code&gt;Kernel.update_in/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;kernel#get_and_update_in/2&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt; &lt;/a&gt;マクロで使用して、ネストされたデータ構造に値を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="243c0eadcb33ec262a94b0246c4ece1f117a3666" translate="yes" xml:space="preserve">
          <source>The access syntax is represented as a call to &lt;a href=&quot;access#get/2&quot;&gt;&lt;code&gt;Access.get/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">アクセス構文は&lt;a href=&quot;access#get/2&quot;&gt; &lt;code&gt;Access.get/2&lt;/code&gt; の&lt;/a&gt;呼び出しとして表されます。</target>
        </trans-unit>
        <trans-unit id="3c19d0ebf16010f6efd63fa157dd829c700b0b58" translate="yes" xml:space="preserve">
          <source>The access syntax is represented as a call to &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#get/2&quot;&gt;&lt;code&gt;Access.get/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">アクセス構文は、&lt;a href=&quot;https://hexdocs.pm/elixir/Access.html#get/2&quot;&gt; &lt;code&gt;Access.get/2&lt;/code&gt; の&lt;/a&gt;呼び出しとして表されます。</target>
        </trans-unit>
        <trans-unit id="4b8d2c8f5f09f671794f31f1f907968a5ca06aff" translate="yes" xml:space="preserve">
          <source>The accumulator is only calculated when transformation starts. It also allows an after function to be given which is invoked when the stream halts or completes.</source>
          <target state="translated">アキュムレータは変換が開始されたときにのみ計算されます。また、ストリームが停止したときや完了したときに呼び出されるafter関数を与えることもできます。</target>
        </trans-unit>
        <trans-unit id="231cb19852aaf99a578b488de350325c3dbaf7df" translate="yes" xml:space="preserve">
          <source>The accumulator value for each step.</source>
          <target state="translated">各ステップのアキュムレータ値。</target>
        </trans-unit>
        <trans-unit id="e04f1a61804f76a146e2c529d3dfa319227959a4" translate="yes" xml:space="preserve">
          <source>The actual line is especially formatted in bold.</source>
          <target state="translated">実際の行は特に太字でフォーマットされています。</target>
        </trans-unit>
        <trans-unit id="3f1f1fb598d7730a9ff70812d543d26b95408bb0" translate="yes" xml:space="preserve">
          <source>The advantage of starting a process under the test supervisor is that it is guaranteed to exit before the next test starts. Therefore, you don't need to remove the process at the end of your tests via &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt;. You only need to use &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt; if you want to remove a process from the supervision tree in the middle of a test, as simply shutting down the process would cause it to be restarted according to its &lt;code&gt;:restart&lt;/code&gt; value.</source>
          <target state="translated">テストスーパーバイザでプロセスを開始する利点は、次のテストが開始する前に終了することが保証されていることです。したがって、テストの最後で&lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt;を使用してプロセスを削除する必要はありません。テストの途中で監視ツリーからプロセスを削除する場合は、&lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt;を使用するだけで済みます。単にプロセスをシャットダウンすると、そのプロセスが &lt;code&gt;:restart&lt;/code&gt; 値に従って再起動されるためです。</target>
        </trans-unit>
        <trans-unit id="f25d9730409ef1dfe6f5e984f31be4fd99cffcf1" translate="yes" xml:space="preserve">
          <source>The advantage of structs is that they validate that the given keys are part of the defined struct. The example below will fail because there is no key &lt;code&gt;:full_name&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; struct:</source>
          <target state="translated">構造体の利点は、指定されたキーが定義された構造体の一部であることを検証することです。以下の例は、 &lt;code&gt;User&lt;/code&gt; 構造体にキー &lt;code&gt;:full_name&lt;/code&gt; がないため失敗します。</target>
        </trans-unit>
        <trans-unit id="83ac1b567e220f667e9d9d2c2f19a5c7705de064" translate="yes" xml:space="preserve">
          <source>The agent name</source>
          <target state="translated">エージェント名</target>
        </trans-unit>
        <trans-unit id="850cde34796934da35ab95f25d166c013161b0f7" translate="yes" xml:space="preserve">
          <source>The agent reference</source>
          <target state="translated">エージェントリファレンス</target>
        </trans-unit>
        <trans-unit id="79d99d2d3b7f3ac280b26b43a51cc435cf66db5f" translate="yes" xml:space="preserve">
          <source>The agent state</source>
          <target state="translated">エージェントの状態</target>
        </trans-unit>
        <trans-unit id="04287ba52642f4b2e9805d3cbb6242221ac4131b" translate="yes" xml:space="preserve">
          <source>The agent's state will be added to the given list of arguments (&lt;code&gt;[%{}]&lt;/code&gt;) as the first argument.</source>
          <target state="translated">エージェントの状態は、最初の引数として指定された引数のリスト（ &lt;code&gt;[%{}]&lt;/code&gt; ）に追加されます。</target>
        </trans-unit>
        <trans-unit id="8beb83ba7f5ecd3254d30e564e0d6fb8a2d460e5" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &quot;An O(ND) Difference Algorithm and Its Variations&quot; paper by E. Myers.</source>
          <target state="translated">このアルゴリズムは、E.マイヤーズによる論文「An O(ND)Difference Algorithm and Its Variations」に概説されています。</target>
        </trans-unit>
        <trans-unit id="3e134324067f32fab468c28c29405fca71811700" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &quot;String Matching with Metric Trees Using an Approximate Distance&quot; paper by Ilaria Bartolini, Paolo Ciaccia, and Marco Patella.</source>
          <target state="translated">このアルゴリズムの概要は、Ilaria Bartolini、Paolo Ciaccia、Marco Patellaによる論文「String Matching with Metric Trees Using an Approximate Distance(近似距離を用いたメトリックツリーとの文字列マッチング)」に記載されています。</target>
        </trans-unit>
        <trans-unit id="e4b130944005218b61f70b8dda4acb83f5f8b422" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex #29, Unicode Text Segmentation&lt;/a&gt;.</source>
          <target state="translated">アルゴリズムの概要は、&lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex＃29、Unicode Text Segmentationにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f9558fd66aceb0ac12811fbd079f3478d2d6d0b6" translate="yes" xml:space="preserve">
          <source>The allowed modes:</source>
          <target state="translated">許可されたモード。</target>
        </trans-unit>
        <trans-unit id="22b1bedb9b0e24d713b2164c5c95fdaf0f81ef84" translate="yes" xml:space="preserve">
          <source>The allowed values for &lt;code&gt;flag&lt;/code&gt; are only a subset of those allowed in &lt;a href=&quot;#flag/2&quot;&gt;&lt;code&gt;flag/2&lt;/code&gt;&lt;/a&gt;, namely &lt;code&gt;:save_calls&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; に許可されている値は、&lt;a href=&quot;#flag/2&quot;&gt; &lt;code&gt;flag/2&lt;/code&gt; &lt;/a&gt;で許可されている値のサブセット、つまり &lt;code&gt;:save_calls&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="a1284e6a8b509aaab6853404ad966b4c6d0d9c11" translate="yes" xml:space="preserve">
          <source>The amount of functionality in the &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules can be daunting at first, but you will get familiar with them case by case. In particular, focus on the &lt;code&gt;Enum&lt;/code&gt; module first and only move to &lt;code&gt;Stream&lt;/code&gt; for the particular scenarios where laziness is required, to either deal with slow resources or large, possibly infinite, collections.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールと&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールの機能の量は最初は気が遠くなるかもしれませんが、ケースバイケースでそれらに慣れるでしょう。特に、最初に &lt;code&gt;Enum&lt;/code&gt; モジュールに注目し、遅延リソースが必要な特定のシナリオでのみ &lt;code&gt;Stream&lt;/code&gt; に移動して、遅いリソースまたは大きな、場合によっては無限のコレクションを処理します。</target>
        </trans-unit>
        <trans-unit id="7e8600e30f0a326a12149028f15ee8e6ad16cef8" translate="yes" xml:space="preserve">
          <source>The anonymous function receives 0 arguments, and may return any value.</source>
          <target state="translated">匿名関数は0個の引数を受け取り、任意の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="3860a6ee964a29eb95c7ca816e5e5490427978d6" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回答は、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt;から入手できる任意の &lt;code&gt;unit&lt;/code&gt; で返すことができます。</target>
        </trans-unit>
        <trans-unit id="35961a2d2bc407917b83fe316a44657eb3d70dde" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;. If the first time value is earlier than the second, a negative number is returned.</source>
          <target state="translated">回答は、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt;から入手できる任意の &lt;code&gt;unit&lt;/code&gt; で返すことができます。最初の時間の値が2番目の時間の値よりも前の場合、負の数が返されます。</target>
        </trans-unit>
        <trans-unit id="273c2352c55239386071c9f97857464d5b54d531" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">回答は、&lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt;から利用可能な任意の &lt;code&gt;unit&lt;/code&gt; で返すことができます。</target>
        </trans-unit>
        <trans-unit id="0c851ccba3a0c5e2913af28fbba1bc5059650f30" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;. If the first unit is smaller than the second, a negative number is returned.</source>
          <target state="translated">回答は、&lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt;から利用可能な任意の &lt;code&gt;unit&lt;/code&gt; で返すことができます。最初の単位が2番目の単位より小さい場合、負の数が返されます。</target>
        </trans-unit>
        <trans-unit id="11872c1546ad5d8d77e3dd6dcf24fe80bdc32569" translate="yes" xml:space="preserve">
          <source>The application callback</source>
          <target state="translated">アプリケーションのコールバック</target>
        </trans-unit>
        <trans-unit id="498cebd5386c08940274d180a46313b584299218" translate="yes" xml:space="preserve">
          <source>The application callback module</source>
          <target state="translated">アプリケーションのコールバックモジュール</target>
        </trans-unit>
        <trans-unit id="ce357182db7e39e7d54f85ac0fa8ea1bfe43cdcd" translate="yes" xml:space="preserve">
          <source>The application environment</source>
          <target state="translated">アプリケーション環境</target>
        </trans-unit>
        <trans-unit id="40917bb5c729fef80a4c140a2928d1f7a14bf4d7" translate="yes" xml:space="preserve">
          <source>The application environment can be overridden via the &lt;code&gt;-config&lt;/code&gt; option of &lt;code&gt;erl&lt;/code&gt;, as well as command-line options, as we are going to see below.</source>
          <target state="translated">アプリケーション環境は、以下で説明するように、 &lt;code&gt;erl&lt;/code&gt; の &lt;code&gt;-config&lt;/code&gt; オプションとコマンドラインオプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="37789b75dd5f623e649e47a61f598fab65dfa7b6" translate="yes" xml:space="preserve">
          <source>The application environment should be reserved only for configurations that are truly global, for example, to control your application boot process and its supervision tree.</source>
          <target state="translated">アプリケーション環境は、アプリケーションのブートプロセスやその監視ツリーを制御するなど、真にグローバルな設定のためだけに予約されるべきです。</target>
        </trans-unit>
        <trans-unit id="280a9a5faaec5ff9e8215df748115db28ebee1a0" translate="yes" xml:space="preserve">
          <source>The application is located by analyzing the spec of all loaded applications. Returns &lt;code&gt;nil&lt;/code&gt; if the module is not listed in any application spec.</source>
          <target state="translated">ロードされたすべてのアプリケーションの仕様を分析することにより、アプリケーションが特定されます。モジュールがどのアプリケーション仕様にもリストされていない場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bc8d61b7265354046282efa86c0154278c621f25" translate="yes" xml:space="preserve">
          <source>The application life cycle</source>
          <target state="translated">アプリケーションのライフサイクル</target>
        </trans-unit>
        <trans-unit id="cc4a58ee1265d5c1fe9173d32bf0ac223249dd85" translate="yes" xml:space="preserve">
          <source>The application lifecycle</source>
          <target state="translated">アプリケーションのライフサイクル</target>
        </trans-unit>
        <trans-unit id="143141b825e19c759eb1a18e855e24abed92b957" translate="yes" xml:space="preserve">
          <source>The application resource file</source>
          <target state="translated">アプリケーションリソースファイル</target>
        </trans-unit>
        <trans-unit id="e3563cd3d1dfc3ea0fa27f37030c6816eb2657f5" translate="yes" xml:space="preserve">
          <source>The application works as a distributed key-value store. We are going to organize key-value pairs into buckets and distribute those buckets across multiple nodes. We will also build a simple client that allows us to connect to any of those nodes and send requests such as:</source>
          <target state="translated">このアプリケーションは、分散型のキー値ストアとして動作します。キーと値のペアをバケットに整理し、それらのバケットを複数のノードに分散させます。また、これらのノードに接続して以下のようなリクエストを送信できるシンプルなクライアントを構築します。</target>
        </trans-unit>
        <trans-unit id="27642ed423e2fa876dc5149e7e9fb4418a0af850" translate="yes" xml:space="preserve">
          <source>The archive will be created in the current directory (which is expected to be the project root), unless an argument &lt;code&gt;-o&lt;/code&gt; is provided with the file name.</source>
          <target state="translated">引数 &lt;code&gt;-o&lt;/code&gt; がファイル名で指定されていない限り、アーカイブは現在のディレクトリ（プロジェクトルートであることが期待されます）に作成されます。</target>
        </trans-unit>
        <trans-unit id="d0f3ead845310ee387fe5a545e6953c55ffb1629" translate="yes" xml:space="preserve">
          <source>The argument can also be a compiled pattern:</source>
          <target state="translated">引数にはコンパイルされたパターンを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="591637cab81491d8824a1f871aa68b8d413473f1" translate="yes" xml:space="preserve">
          <source>The argument can be either a variable unquoted or in standard tuple form &lt;code&gt;{name, meta, context}&lt;/code&gt;.</source>
          <target state="translated">引数は、引用符で囲まれていない変数でも、標準のタプル形式 &lt;code&gt;{name, meta, context}&lt;/code&gt; でもかまいません。</target>
        </trans-unit>
        <trans-unit id="001d538e8d0cdf963d20a8cda73ecd32223786da" translate="yes" xml:space="preserve">
          <source>The arguments passed to the callbacks are related to the state optionally returned by &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, and are documented in the section about the callback module above.</source>
          <target state="translated">コールバックに渡される引数は、オプションで&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;によって返される状態に関連し、上記のコールバックモジュールに関するセクションに記載されています。</target>
        </trans-unit>
        <trans-unit id="2a881ae7cb35da41cfdaee7b5069205d1b09ab08" translate="yes" xml:space="preserve">
          <source>The atom encoder is not called for &lt;em&gt;all&lt;/em&gt; atoms that are present in the AST. It won't be invoked for the following atoms:</source>
          <target state="translated">アトムエンコーダーは、ASTに存在する&lt;em&gt;すべての&lt;/em&gt;アトムに対して呼び出されるわけではありません。次のアトムに対しては呼び出されません：</target>
        </trans-unit>
        <trans-unit id="ca8797b60e8c99dfe84eeca54f5b5a5a65568918" translate="yes" xml:space="preserve">
          <source>The attribute values will be available through &lt;code&gt;context.registered&lt;/code&gt;.</source>
          <target state="translated">属性値は、 &lt;code&gt;context.registered&lt;/code&gt; を通じて利用できます。</target>
        </trans-unit>
        <trans-unit id="f1aacd6450630dafa0ac3016ebf55acec692c62f" translate="yes" xml:space="preserve">
          <source>The attribute values will be available through &lt;code&gt;context.registered&lt;/code&gt;. Registered values are cleared after each &lt;a href=&quot;#describe/2&quot;&gt;&lt;code&gt;describe/2&lt;/code&gt;&lt;/a&gt; similar to &lt;code&gt;@describetag&lt;/code&gt;.</source>
          <target state="translated">属性値は、 &lt;code&gt;context.registered&lt;/code&gt; を通じて利用できます。登録された値は、 &lt;code&gt;@describetag&lt;/code&gt; と同様にdescribe &lt;a href=&quot;#describe/2&quot;&gt; &lt;code&gt;describe/2&lt;/code&gt; &lt;/a&gt;ごとにクリアされます。</target>
        </trans-unit>
        <trans-unit id="f388a223145d9f2cd324e6f166a8ccfc6a8b5209" translate="yes" xml:space="preserve">
          <source>The attribute values will be available through &lt;code&gt;context.registered&lt;/code&gt;. Registered values are cleared after each &lt;a href=&quot;#test/3&quot;&gt;&lt;code&gt;test/3&lt;/code&gt;&lt;/a&gt; similar to &lt;code&gt;@tag&lt;/code&gt;.</source>
          <target state="translated">属性値は、 &lt;code&gt;context.registered&lt;/code&gt; を通じて利用できます。登録された値は、 &lt;code&gt;@tag&lt;/code&gt; と同様に各&lt;a href=&quot;#test/3&quot;&gt; &lt;code&gt;test/3&lt;/code&gt; の&lt;/a&gt;後にクリアされます。</target>
        </trans-unit>
        <trans-unit id="b41ad89c98d422fd2e978f100782ecfe3f1da362" translate="yes" xml:space="preserve">
          <source>The attribute values will be available through &lt;code&gt;context.registered&lt;/code&gt;. Registered values are cleared after each &lt;a href=&quot;exunit.case#test/3&quot;&gt;&lt;code&gt;ExUnit.Case.test/3&lt;/code&gt;&lt;/a&gt; similar to &lt;code&gt;@tag&lt;/code&gt;.</source>
          <target state="translated">属性値は、 &lt;code&gt;context.registered&lt;/code&gt; を通じて利用できます。登録された値は、 &lt;code&gt;@tag&lt;/code&gt; と同様に、各&lt;a href=&quot;exunit.case#test/3&quot;&gt; &lt;code&gt;ExUnit.Case.test/3&lt;/code&gt; の&lt;/a&gt;後にクリアされます。</target>
        </trans-unit>
        <trans-unit id="8fadbc924b0cd6b0ad53d9ab7f75eafe50d08633" translate="yes" xml:space="preserve">
          <source>The available backends by default are:</source>
          <target state="translated">デフォルトで利用可能なバックエンドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6cce71e8c20ef741ad606617e045711680af943f" translate="yes" xml:space="preserve">
          <source>The available color options are:</source>
          <target state="translated">利用可能なカラーオプションは</target>
        </trans-unit>
        <trans-unit id="6310c4c55c85283101be1a934d0a00206b4f631d" translate="yes" xml:space="preserve">
          <source>The backend needs to be started and running in order to be configured at runtime.</source>
          <target state="translated">実行時に設定するためには、バックエンドを起動して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="96a787facf19135fb4b200f8b487060672819be8" translate="yes" xml:space="preserve">
          <source>The bag distance is meant to be an efficient approximation of the distance between two strings to quickly rule out strings that are largely different.</source>
          <target state="translated">バッグディスタンスは、2つの文字列間の距離を効率的に近似し、大きく異なる文字列を素早く除外することを目的としています。</target>
        </trans-unit>
        <trans-unit id="b0aa33c6e6c19292365b6836f590a40f470ae9e8" translate="yes" xml:space="preserve">
          <source>The base needs to be between &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;36&lt;/code&gt;.</source>
          <target state="translated">ベースは &lt;code&gt;2&lt;/code&gt; から &lt;code&gt;36&lt;/code&gt; の間である必要があります。</target>
        </trans-unit>
        <trans-unit id="338ca5e9a146228c6591ce27e258c309b41537d7" translate="yes" xml:space="preserve">
          <source>The basic mechanism for spawning new processes is the auto-imported &lt;code&gt;spawn/1&lt;/code&gt; function:</source>
          <target state="translated">新しいプロセスを生成するための基本的なメカニズムは、自動インポートされた &lt;code&gt;spawn/1&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="4e7559ee61af701da957bbebc32b89de3be4e12f" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#ceil/2&quot;&gt;&lt;code&gt;ceil/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">floatに対する&lt;a href=&quot;#ceil/2&quot;&gt; &lt;code&gt;ceil/2&lt;/code&gt; &lt;/a&gt;の動作は驚くべきものです。例えば：</target>
        </trans-unit>
        <trans-unit id="d56bb8e1dfaa2c0603350dcc324ff5c454da55f1" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#floor/2&quot;&gt;&lt;code&gt;floor/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">フロートに対する&lt;a href=&quot;#floor/2&quot;&gt; &lt;code&gt;floor/2&lt;/code&gt; &lt;/a&gt;の振る舞いは驚くべきことです。例えば：</target>
        </trans-unit>
        <trans-unit id="038842fad2e4b3a86e4d5b65bf16dcbffaa55807" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#round/2&quot;&gt;&lt;code&gt;round/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">floatに対する&lt;a href=&quot;#round/2&quot;&gt; &lt;code&gt;round/2&lt;/code&gt; &lt;/a&gt;の動作は驚くべきことです。例えば：</target>
        </trans-unit>
        <trans-unit id="c79b8f7e64e352a09f016328372f8c34533b468e" translate="yes" xml:space="preserve">
          <source>The behaviour of any expression in a clause is the same as outside. For example, &lt;code&gt;=&lt;/code&gt; will raise a &lt;a href=&quot;https://hexdocs.pm/elixir/MatchError.html&quot;&gt;&lt;code&gt;MatchError&lt;/code&gt;&lt;/a&gt; instead of returning the non-matched value:</source>
          <target state="translated">句内の式の動作は、外部と同じです。たとえば、 &lt;code&gt;=&lt;/code&gt; は、一致しない値を返す代わりに、&lt;a href=&quot;https://hexdocs.pm/elixir/MatchError.html&quot;&gt; &lt;code&gt;MatchError&lt;/code&gt; を発生さ&lt;/a&gt;せます。</target>
        </trans-unit>
        <trans-unit id="850b8800d7a40702a94f4c6f350b76c00c714c91" translate="yes" xml:space="preserve">
          <source>The behaviour of any expression in a clause is the same as outside. For example, &lt;code&gt;=&lt;/code&gt; will raise a &lt;a href=&quot;matcherror&quot;&gt;&lt;code&gt;MatchError&lt;/code&gt;&lt;/a&gt; instead of returning the non-matched value:</source>
          <target state="translated">節内の式の動作は、外部と同じです。たとえば、 &lt;code&gt;=&lt;/code&gt; は一致しない値を返すのではなく、&lt;a href=&quot;matcherror&quot;&gt; &lt;code&gt;MatchError&lt;/code&gt; を発生さ&lt;/a&gt;せます。</target>
        </trans-unit>
        <trans-unit id="2c2089b4c70310731d109bdd4cb28eac8386c5ba" translate="yes" xml:space="preserve">
          <source>The behaviours above are not guaranteed. We may remove or add new rules in the future. The goal of documenting them is to provide better understanding on what to expect from the formatter.</source>
          <target state="translated">上記の行動を保証するものではありません。将来的には新しいルールを削除したり追加したりするかもしれません。これらのルールを文書化する目的は、フォーマッタに何を期待するかをよりよく理解してもらうことです。</target>
        </trans-unit>
        <trans-unit id="1b5532ea236231522d81c8ef60d96c8157a31b23" translate="yes" xml:space="preserve">
          <source>The best solution is to simply use the explicit module, function, and arguments APIs when working with distributed agents.</source>
          <target state="translated">最良の解決策は、分散エージェントを扱う際に、明示的なモジュール、関数、引数APIを単純に使用することです。</target>
        </trans-unit>
        <trans-unit id="230a7e78c26b7490aaeba0ccd0ad9d4d649d4144" translate="yes" xml:space="preserve">
          <source>The best way to get started with your first project is by calling &lt;code&gt;mix new my_project&lt;/code&gt; from the command line.</source>
          <target state="translated">最初のプロジェクトを開始する最良の方法は、コマンドラインから &lt;code&gt;mix new my_project&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="d0bbf418b1f38a55ccb7dde48f0990ed9ed4760a" translate="yes" xml:space="preserve">
          <source>The binary module</source>
          <target state="translated">バイナリモジュール</target>
        </trans-unit>
        <trans-unit id="95ca58a2bc8511627f8365c4bfe2246bdcfdaed5" translate="yes" xml:space="preserve">
          <source>The binding keys are usually atoms, but they may be a tuple for variables defined in a different context.</source>
          <target state="translated">バインディングキーは通常アトムですが、異なるコンテキストで定義された変数のタプルである場合もあります。</target>
        </trans-unit>
        <trans-unit id="0b507e4caeeefa4e12188b817548237116e75e51" translate="yes" xml:space="preserve">
          <source>The booleans &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are also atoms:</source>
          <target state="translated">ブール値の &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; もアトムです。</target>
        </trans-unit>
        <trans-unit id="922dc50f7cf9b7578080aaeb54c1d2a1b40ac190" translate="yes" xml:space="preserve">
          <source>The boot script uses the RELEASE_LIB environment variable, which must be accordingly set with &lt;code&gt;--boot-var&lt;/code&gt; and point to the release lib dir.</source>
          <target state="translated">ブートスクリプトはRELEASE_LIB環境変数を使用します。これは、それに応じて &lt;code&gt;--boot-var&lt;/code&gt; で設定し、リリースライブラリディレクトリを指す必要があります。</target>
        </trans-unit>
        <trans-unit id="173c29727301f1e8ee220ab1adbc4da76be15175" translate="yes" xml:space="preserve">
          <source>The bucket supervisor</source>
          <target state="translated">バケツ監修</target>
        </trans-unit>
        <trans-unit id="28ca52bc03d0c7c44e235ef531de8f5ba2e83b87" translate="yes" xml:space="preserve">
          <source>The building block of Elixir's AST is a call, such as:</source>
          <target state="translated">ElixirのASTの構成要素は、例えばコールです。</target>
        </trans-unit>
        <trans-unit id="461328f5549d78a8b5fdedc116f07cd5036d784a" translate="yes" xml:space="preserve">
          <source>The building block of an Elixir program is a tuple with three elements. For example, the function call &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; is represented internally as:</source>
          <target state="translated">Elixirプログラムの構成要素は、3つの要素を持つタプルです。たとえば、関数呼び出し &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; は内部的に次のように表されます。</target>
        </trans-unit>
        <trans-unit id="75d9d0a9c9a355ba2103db23084500c77872bd8e" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;iodata/0&lt;/code&gt;&lt;/a&gt; type is defined in terms of &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;iolist/0&lt;/code&gt;&lt;/a&gt;. An IO list is the same as IO data but it doesn't allow for a binary at the top level (but binaries are still allowed in the list itself).</source>
          <target state="translated">組み込みの&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt; &lt;code&gt;iodata/0&lt;/code&gt; &lt;/a&gt;タイプは、iolist / 0で定義されてい&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt; &lt;code&gt;iolist/0&lt;/code&gt; &lt;/a&gt;。IOリストはIOデータと同じですが、トップレベルでのバイナリは許可されません（ただし、バイナリはリスト自体で引き続き許可されます）。</target>
        </trans-unit>
        <trans-unit id="bb521e80a89a4c39c427f904962402bd53b9f9e8" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iodata/0&lt;/code&gt;&lt;/a&gt; type is defined in terms of &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iolist/0&lt;/code&gt;&lt;/a&gt;. An IO list is the same as IO data but it doesn't allow for a binary at the top level (but binaries are still allowed in the list itself).</source>
          <target state="translated">組み込みの&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iodata/0&lt;/code&gt; &lt;/a&gt;タイプはiolist / 0で定義され&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iolist/0&lt;/code&gt; &lt;/a&gt;。IOリストはIOデータと同じですが、トップレベルのバイナリは許可されていません（ただし、リスト自体ではバイナリは許可されています）。</target>
        </trans-unit>
        <trans-unit id="fa702ce8bbd071f4798263a3cd547b0d108c54b2" translate="yes" xml:space="preserve">
          <source>The built-in Elixir String module handles binaries that are UTF-8 encoded. &lt;a href=&quot;http://erlang.org/doc/man/binary.html&quot;&gt;The binary module&lt;/a&gt; is useful when you are dealing with binary data that is not necessarily UTF-8 encoded.</source>
          <target state="translated">組み込みのElixir Stringモジュールは、UTF-8でエンコードされたバイナリを処理します。&lt;a href=&quot;http://erlang.org/doc/man/binary.html&quot;&gt;バイナリモジュール&lt;/a&gt;は、必ずしもUTF-8でエンコードされていないバイナリデータを処理する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9912c6244d1c63cb84c34b3a68b26e804aecd085" translate="yes" xml:space="preserve">
          <source>The built-in calendar does not support leap seconds.</source>
          <target state="translated">内蔵カレンダーはうるう秒をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="eac291bdda8b39cdd07415652c800893620c2cab" translate="yes" xml:space="preserve">
          <source>The calendar era.</source>
          <target state="translated">暦の時代。</target>
        </trans-unit>
        <trans-unit id="c53205e7065bb3ce87323206c4d4e303fc4d8e79" translate="yes" xml:space="preserve">
          <source>The callback is invoked after the compiler runs and it receives a tuple with current status and the list of diagnostic. It must return the updated status and diagnostics.</source>
          <target state="translated">コールバックはコンパイラの実行後に呼び出され、現在のステータスと診断結果のリストを含むタプルを受け取ります。コールバックは更新されたステータスと診断結果を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="b5d5a7fc225ff3dc99ea235a243bb670a176a9d8" translate="yes" xml:space="preserve">
          <source>The calling process is put into a waiting state where its memory allocation has been reduced as much as possible, which is useful if the process does not expect to receive any messages in the near future.</source>
          <target state="translated">呼び出したプロセスは、メモリ割り当てが可能な限り削減された待機状態に置かれますが、これは近い将来にメッセージの受信を期待していない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="2b5b064f8261c2b03a774df6e6ae6dcd0d5c8140" translate="yes" xml:space="preserve">
          <source>The canonical example for attributes is annotating that a module implements an OTP behaviour, such as &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">属性の標準的な例は、モジュールが&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;などのOTP動作を実装することを注釈しています：</target>
        </trans-unit>
        <trans-unit id="f0b8dfb4a5a810c9b8c195f76200b64770caff21" translate="yes" xml:space="preserve">
          <source>The canonical example for attributes is annotating that a module implements an OTP behaviour, such as &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">属性の標準的な例は、モジュールが&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;などのOTP動作を実装することを注釈することです。</target>
        </trans-unit>
        <trans-unit id="88868f6d5562a67e7ddaf9b29fc243c12f68bba4" translate="yes" xml:space="preserve">
          <source>The capture operator</source>
          <target state="translated">キャプチャ演算子</target>
        </trans-unit>
        <trans-unit id="1347b7b88b5541d0e12b97a6af43a979bc085407" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to capture local functions, including private ones, and imported functions by omitting the module name:</source>
          <target state="translated">キャプチャ演算子は、プライベートなものを含むローカル関数や、モジュール名を省略してインポートした関数をキャプチャすることもできます。</target>
        </trans-unit>
        <trans-unit id="75226e8489147d2da09b1c8fddde984e1d062fca" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to create anonymous functions that expect at least one argument:</source>
          <target state="translated">capture 演算子は、少なくとも 1 つの引数を期待する匿名関数を作成するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9ef5fce1b72abda5249ca40d94c6bba5adc71084" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to partially apply functions, where &lt;code&gt;&amp;amp;1&lt;/code&gt;, &lt;code&gt;&amp;amp;2&lt;/code&gt; and so on can be used as value placeholders. For example:</source>
          <target state="translated">キャプチャー演算子を使用して、関数を部分的に適用することもできます。ここで、 &lt;code&gt;&amp;amp;1&lt;/code&gt; 、 &lt;code&gt;&amp;amp;2&lt;/code&gt; などを値のプレースホルダーとして使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="ed78fb3f56be122fa668d8b4473c09f744fcc1e2" translate="yes" xml:space="preserve">
          <source>The capture operator is most commonly used to capture a function with given name and arity from a module:</source>
          <target state="translated">capture演算子は、与えられた名前とアリティを持つ関数をモジュールからキャプチャするために最も一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="daa5b67ac4266d64104c7c678fbebf39b612b043" translate="yes" xml:space="preserve">
          <source>The changes we have performed above have broken our tests because the registry requires the &lt;code&gt;:name&lt;/code&gt; option when starting up. Furthermore, some registry operations such as &lt;code&gt;lookup/2&lt;/code&gt; require the name to be given as an argument, instead of a PID, so we can do the ETS table lookup. Let&amp;rsquo;s change the setup function in &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; to fix both issues:</source>
          <target state="translated">上記で実行した変更は、レジストリが起動時に &lt;code&gt;:name&lt;/code&gt; オプションを必要とするため、テストに失敗しました。さらに、 &lt;code&gt;lookup/2&lt;/code&gt; などの一部のレジストリ操作では、PIDではなく名前を引数として指定する必要があるため、ETSテーブルの検索を実行できます。 &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; のセットアップ関数を変更して、両方の問題を修正しましょう。</target>
        </trans-unit>
        <trans-unit id="a0d4f7e1122a8b55f665626ee09ac09a98518fc5" translate="yes" xml:space="preserve">
          <source>The child specification contains 6 keys. The first two are required, and the remaining ones are optional:</source>
          <target state="translated">子仕様には6つのキーが含まれています。最初の2つは必須で、残りの2つはオプションです。</target>
        </trans-unit>
        <trans-unit id="7160687e53597f9f0ad549c50eef17c501e4af5e" translate="yes" xml:space="preserve">
          <source>The child specification describes how the supervisor starts, shuts down, and restarts child processes.</source>
          <target state="translated">子の仕様では、スーパーバイザが子プロセスを起動、シャットダウン、再起動する方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="950e3568a25b27f2811958eb0aa95e081e11f40c" translate="yes" xml:space="preserve">
          <source>The child specification is a map containing up to 6 elements. The first two keys in the following list are required, and the remaining ones are optional:</source>
          <target state="translated">子指定は、最大6つの要素を含むマップです。以下のリストの最初の2つのキーは必須で、残りのキーはオプションです。</target>
        </trans-unit>
        <trans-unit id="42da62bf1cce6040df7eca9209cf8b54396ada67" translate="yes" xml:space="preserve">
          <source>The child specification must exist and the corresponding child process must not be running.</source>
          <target state="translated">子指定が存在し、対応する子プロセスが実行されていない必要があります。</target>
        </trans-unit>
        <trans-unit id="313526f010da8f629d585c9d88474ee1e8f4898f" translate="yes" xml:space="preserve">
          <source>The children is a list of modules, two-element tuples with module and arguments or a map with the child specification. A strategy is required to be provided through the &lt;code&gt;:strategy&lt;/code&gt; option. See &quot;start_link/2, init/2, and strategies&quot; for examples and other options.</source>
          <target state="translated">子は、モジュールのリスト、モジュールと引数を持つ2要素のタプル、または子の仕様を持つマップです。 &lt;code&gt;:strategy&lt;/code&gt; オプションで戦略を提供する必要があります。例とその他のオプションについては、「start_link / 2、init / 2、および戦略」を参照してください。</target>
        </trans-unit>
        <trans-unit id="53b9ca94898155cae15db3cc7ef654f0bd4da634" translate="yes" xml:space="preserve">
          <source>The choice between &lt;code&gt;:do&lt;/code&gt; keyword and &lt;code&gt;do/end&lt;/code&gt; blocks is left to the user</source>
          <target state="translated">&lt;code&gt;:do&lt;/code&gt; キーワードと &lt;code&gt;do/end&lt;/code&gt; ブロックの選択はユーザーに任されます</target>
        </trans-unit>
        <trans-unit id="7b1b61c1ee1c04db8df86f79837449227f41eae5" translate="yes" xml:space="preserve">
          <source>The choice between parens and no parens is a matter of preference.</source>
          <target state="translated">パレンとパレンなしの選択は好みの問題です。</target>
        </trans-unit>
        <trans-unit id="a3a0a29c159eb1228d94714c1b6b06e0b32d7a74" translate="yes" xml:space="preserve">
          <source>The choice of parens and no parens also affects indentation. When a function call with parens doesn't fit on the same line, the formatter introduces a newline around parens and indents the arguments with two spaces:</source>
          <target state="translated">パレンの有無もインデントに影響します。パレンを含む関数呼び出しが同じ行に収まらない場合、フォーマッタはパレンの周りに改行を導入し、引数を2つのスペースでインデントします。</target>
        </trans-unit>
        <trans-unit id="23594e68f8f770603c0ad519dc9b20dde3e76ac3" translate="yes" xml:space="preserve">
          <source>The clause above will only be invoked if the user's age is more than or equal to 16. A more complete introduction to guards is available &lt;a href=&quot;guards&quot;&gt;in the Guards page&lt;/a&gt;.</source>
          <target state="translated">上記の節は、ユーザーの年齢が16歳以上の場合にのみ呼び出され&lt;a href=&quot;guards&quot;&gt;ます&lt;/a&gt;。ガードの詳細については、[ガード]ページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ba6a994f50b6302be9c679389659a12c3a4b68fd" translate="yes" xml:space="preserve">
          <source>The clause above will only be invoked if the user's age is more than or equal to 16. Guards also support joining multiple conditions with &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt;. The whole guard is true if all guard expressions will evaluate to &lt;code&gt;true&lt;/code&gt;. A more complete introduction to guards is available &lt;a href=&quot;patterns-and-guards&quot;&gt;in the &quot;Patterns and Guards&quot; page&lt;/a&gt;.</source>
          <target state="translated">上記の句は、ユーザーの年齢が16歳以上の場合にのみ呼び出されます。ガードは、 &lt;code&gt;and&lt;/code&gt; および &lt;code&gt;or&lt;/code&gt; を使用した複数の条件の結合もサポートしています。すべてのガード式が &lt;code&gt;true&lt;/code&gt; と評価される場合、ガード全体がtrueになります。ガードのより完全な紹介&lt;a href=&quot;patterns-and-guards&quot;&gt;は、「パターンとガード」ページにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c255b3390bdbf75961fab635ba6b005f6d757746" translate="yes" xml:space="preserve">
          <source>The client sends the given &lt;code&gt;request&lt;/code&gt; to the server and waits until a reply arrives or a timeout occurs. &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; will be called on the server to handle the request.</source>
          <target state="translated">クライアントは指定された &lt;code&gt;request&lt;/code&gt; をサーバーに送信し、応答が到着するか、タイムアウトが発生するまで待機します。&lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt;は、リクエストを処理するためにサーバーで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d9950721b47bf760ca7644941dac9e25516ba4de" translate="yes" xml:space="preserve">
          <source>The closest representable number to 0.01 is 0.0099999997</source>
          <target state="translated">0.01 に最も近い表現可能な数は 0.0099999997 です。</target>
        </trans-unit>
        <trans-unit id="94f439e6735d38fbe26e845fc67b04161ed13286" translate="yes" xml:space="preserve">
          <source>The closest representable number to 0.1 is 0.1000000014</source>
          <target state="translated">0.1に最も近い表現可能な数は、0.1000000014です。</target>
        </trans-unit>
        <trans-unit id="a2e208db8b2d737003cfa026657e7817cb56f94b" translate="yes" xml:space="preserve">
          <source>The code above has very long lines and running the formatter is not going to address this issue. In fact, the formatter may make it more obvious that you have complex expressions:</source>
          <target state="translated">上のコードは非常に長い行を持っており、フォーマッタを実行してもこの問題は解決しません。実際、フォーマッタを実行すると、複雑な式を持っていることがより明らかになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8971296bf8b5fe352cb67c40d256dea059794cfe" translate="yes" xml:space="preserve">
          <source>The code above says we are only bringing in the functions from &lt;code&gt;MyLib&lt;/code&gt; so we can invoke &lt;code&gt;some_fun(arg1, arg2)&lt;/code&gt; directly without the &lt;code&gt;MyLib.&lt;/code&gt; prefix. Even more important, &lt;code&gt;import MyLib&lt;/code&gt; says that we have an option to not &lt;code&gt;import MyLib&lt;/code&gt; at all as we can simply invoke the function as &lt;code&gt;MyLib.some_fun(arg1, arg2)&lt;/code&gt;.</source>
          <target state="translated">上記のコードでは、 &lt;code&gt;MyLib&lt;/code&gt; から関数を取り込むだけなので、 &lt;code&gt;MyLib.&lt;/code&gt; なしで &lt;code&gt;some_fun(arg1, arg2)&lt;/code&gt; 直接呼び出すことができます。接頭辞。さらに重要なのは、 &lt;code&gt;import MyLib&lt;/code&gt; 、我々がないオプションがあることを述べている &lt;code&gt;import MyLib&lt;/code&gt; すべてとして私たちすることができます単にとしての機能呼び出しで &lt;code&gt;MyLib.some_fun(arg1, arg2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09481c86dbd26d18c6fe8e729156a7702b288946" translate="yes" xml:space="preserve">
          <source>The code above will be kept with one keyword entry per line by the formatter. To avoid that, just squash everything into a single line.</source>
          <target state="translated">上記のコードは、フォーマッタによって1行に1つのキーワード入力で保持されます。これを避けるためには、すべてを一行にまとめてください。</target>
        </trans-unit>
        <trans-unit id="5a5a8b1aa48591121657910360da4599001ef7e7" translate="yes" xml:space="preserve">
          <source>The code above will fail because the &lt;code&gt;=&lt;/code&gt; operator always fails when the sides do not match and &lt;a href=&quot;#refute/2&quot;&gt;&lt;code&gt;refute/2&lt;/code&gt;&lt;/a&gt; does not change it.</source>
          <target state="translated">上記のコードは、両側が一致せず、&lt;a href=&quot;#refute/2&quot;&gt; &lt;code&gt;refute/2&lt;/code&gt; &lt;/a&gt;が変更しない場合、 &lt;code&gt;=&lt;/code&gt; 演算子は常に失敗するため、失敗します。</target>
        </trans-unit>
        <trans-unit id="d1a28899a290431210335f780f9a3a344e1bdaa4" translate="yes" xml:space="preserve">
          <source>The code above will work but issue a warning: &lt;code&gt;variable &quot;a&quot; is unused&lt;/code&gt;. The macro is overriding the original value and the original value is never used.</source>
          <target state="translated">上記のコードは機能しますが、警告を出します： &lt;code&gt;variable &quot;a&quot; is unused&lt;/code&gt; 。マクロは元の値を上書きしており、元の値が使用されることはありません。</target>
        </trans-unit>
        <trans-unit id="269d3d7086c8d03fa3a689c409e633046b40f522" translate="yes" xml:space="preserve">
          <source>The code above would have the same flaw: if we link the &lt;code&gt;serve(client)&lt;/code&gt; task to the acceptor, a crash when serving a request would bring the acceptor, and consequently all other connections, down.</source>
          <target state="translated">上記のコードにも同じ欠陥があり &lt;code&gt;serve(client)&lt;/code&gt; タスクをアクセプターにリンクすると、リクエストの処理中にクラッシュすると、アクセプターが停止し、その結果、他のすべての接続がダウンします。</target>
        </trans-unit>
        <trans-unit id="382718e17e13c129c8263cdafc53473338fb082d" translate="yes" xml:space="preserve">
          <source>The code in the loaded &lt;code&gt;.iex.exs&lt;/code&gt; file is evaluated in the shell's context. For instance, any modules that are loaded or variables that are bound in the &lt;code&gt;.iex.exs&lt;/code&gt; file will be available in the shell after it has booted.</source>
          <target state="translated">ロードされた &lt;code&gt;.iex.exs&lt;/code&gt; ファイルのコードは、シェルのコンテキストで評価されます。たとえば、ロードされたモジュールや &lt;code&gt;.iex.exs&lt;/code&gt; ファイルにバインドされた変数は、起動後にシェルで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="89723bc3e0f1ff8256d889a81362651a037ba774" translate="yes" xml:space="preserve">
          <source>The code is now more readable, as it is now clear which functions are part of your API and which ones are callback implementations. To reinforce this idea, &lt;code&gt;@impl true&lt;/code&gt; automatically marks the function as &lt;code&gt;@doc false&lt;/code&gt;, disabling documentation unless &lt;code&gt;@doc&lt;/code&gt; is explicitly set.</source>
          <target state="translated">APIの一部である関数とコールバック実装である関数が明確になったため、コードが読みやすくなりました。このアイデアを強化するために、 &lt;code&gt;@impl true&lt;/code&gt; は関数を &lt;code&gt;@doc false&lt;/code&gt; として自動的にマークし、 &lt;code&gt;@doc&lt;/code&gt; が明示的に設定されていない限り、ドキュメントを無効にします。</target>
        </trans-unit>
        <trans-unit id="27bd571c88e679120d69355a8855de7b06b30a1a" translate="yes" xml:space="preserve">
          <source>The collection types are compared using the following rules:</source>
          <target state="translated">コレクションタイプは、以下のルールを使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="8c5b2a728faaf0d704086c8a732474d34b64c7d1" translate="yes" xml:space="preserve">
          <source>The comma should be followed by a space.</source>
          <target state="translated">カンマの後にはスペースを入れてください。</target>
        </trans-unit>
        <trans-unit id="139636692335607d6eb4460b93391d027f1c3267" translate="yes" xml:space="preserve">
          <source>The command above fails because we have switched shells. Since shells are isolated from each other, you can't access the variables defined in one shell from the other one.</source>
          <target state="translated">上のコマンドは、シェルを切り替えたために失敗しました。シェルは互いに分離されているので、一方のシェルで定義されている変数に他方のシェルからアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="000af91ba82011c87383cf8f5a08713fe7fef900" translate="yes" xml:space="preserve">
          <source>The command above returns &lt;code&gt;:error&lt;/code&gt;</source>
          <target state="translated">上記のコマンドは &lt;code&gt;:error&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="93e8c4e8d6a9562251088181806121ea8983b620" translate="yes" xml:space="preserve">
          <source>The command above returns &lt;code&gt;{:ok, bucket}&lt;/code&gt;</source>
          <target state="translated">上記のコマンドは &lt;code&gt;{:ok, bucket}&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="919db13977d98a781eec05aba6aea3150c8048e9" translate="yes" xml:space="preserve">
          <source>The command above will start a new shell and connect to it. Create a new variable called &lt;code&gt;hello&lt;/code&gt; and assign some value to it:</source>
          <target state="translated">上記のコマンドは、新しいシェルを起動して接続します。 &lt;code&gt;hello&lt;/code&gt; という新しい変数を作成し、それに値を割り当てます。</target>
        </trans-unit>
        <trans-unit id="604e09637e094315eab98b85fbd210082725e389" translate="yes" xml:space="preserve">
          <source>The command name will correspond to the portion of the module name following &lt;code&gt;Mix.Tasks.&lt;/code&gt;. For example, a module name of &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Clean.html&quot;&gt;&lt;code&gt;Mix.Tasks.Deps.Clean&lt;/code&gt;&lt;/a&gt; corresponds to a task name of &lt;code&gt;deps.clean&lt;/code&gt;.</source>
          <target state="translated">コマンド名は、 &lt;code&gt;Mix.Tasks.&lt;/code&gt; 続くモジュール名の部分に対応します。。例えば、のモジュール名&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Clean.html&quot;&gt; &lt;code&gt;Mix.Tasks.Deps.Clean&lt;/code&gt; &lt;/a&gt;のタスク名に対応 &lt;code&gt;deps.clean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ecae1fb9875a4247d5f5ea9609a8cfd1c1df1d2" translate="yes" xml:space="preserve">
          <source>The community has also created its own tools, often to aid in production, other times in development:</source>
          <target state="translated">また、コミュニティは独自のツールを作成しており、多くの場合、制作を支援したり、開発を支援したりしています。</target>
        </trans-unit>
        <trans-unit id="efb56379060db8ad190cf0cb0689ca498a14c785" translate="yes" xml:space="preserve">
          <source>The comparison between elements must be done using &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素間の比較は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;を使用して行う必要があります。</target>
        </trans-unit>
        <trans-unit id="5f587be913201bd350f5a6a58f7e5d2545a34fce" translate="yes" xml:space="preserve">
          <source>The comparison between elements must be done using &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素間の比較は、&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;を使用して行う必要があります。</target>
        </trans-unit>
        <trans-unit id="86fab95de2a0427fca68934f781f6fe06670a789" translate="yes" xml:space="preserve">
          <source>The compilation can be customized by passing a &lt;code&gt;compile&lt;/code&gt; option in the dependency:</source>
          <target state="translated">依存関係で &lt;code&gt;compile&lt;/code&gt; オプションを渡すことにより、コンパイルをカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="b72ead9d1380c933dae651b694aba918748f04d3" translate="yes" xml:space="preserve">
          <source>The compilation will fail because &lt;code&gt;My.Module&lt;/code&gt; when quoted is not an atom, but a syntax tree as follows:</source>
          <target state="translated">引用されたときの &lt;code&gt;My.Module&lt;/code&gt; がアトムではなく、次の構文ツリーであるため、コンパイルは失敗します。</target>
        </trans-unit>
        <trans-unit id="cd0d32bee722121f8e488a947a395b8badae67cf" translate="yes" xml:space="preserve">
          <source>The compiled pattern is useful when the same match will be done over and over again. Note though that the compiled pattern cannot be stored in a module attribute as the pattern is generated at runtime and does not survive compile time.</source>
          <target state="translated">コンパイルされたパターンは、同じマッチが何度も何度も行われる場合に便利です。ただし、コンパイルされたパターンは実行時に生成され、コンパイル時には保存されないので、モジュール属性に保存することはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2c261a06d80c478e0111d6983a7ae911378fd70b" translate="yes" xml:space="preserve">
          <source>The compiler is telling us that invoking the &lt;code&gt;join&lt;/code&gt; function with two arguments will always choose the first definition of &lt;code&gt;join&lt;/code&gt; whereas the second one will only be invoked when three arguments are passed:</source>
          <target state="translated">コンパイラーは、2つの引数を使用して &lt;code&gt;join&lt;/code&gt; 関数を呼び出すと常に最初の &lt;code&gt;join&lt;/code&gt; 定義が選択されるのに対し、2番目の引数は3つの引数が渡された場合にのみ呼び出されると通知しています。</target>
        </trans-unit>
        <trans-unit id="4a5b9456e8b2526749824cf107036fdea5219003" translate="yes" xml:space="preserve">
          <source>The compiler translates this into multiple functions with different arities, here &lt;code&gt;MyMath.multiply_by/1&lt;/code&gt; and &lt;code&gt;MyMath.multiply_by/2&lt;/code&gt;, that represent cases when arguments for parameters with default values are passed or not passed.</source>
          <target state="translated">コンパイラーはこれを、アリティが異なる複数の関数（ここでは &lt;code&gt;MyMath.multiply_by/1&lt;/code&gt; と &lt;code&gt;MyMath.multiply_by/2&lt;/code&gt; ）に変換します。これらは、デフォルト値を持つパラメーターの引数が渡される場合と渡されない場合を表します。</target>
        </trans-unit>
        <trans-unit id="fbf77ba7c519d57f697a772e3efbb085cc5c852a" translate="yes" xml:space="preserve">
          <source>The compiler utilizes temporary modules to compile code. For example, &lt;code&gt;elixir_compiler_1&lt;/code&gt;, &lt;code&gt;elixir_compiler_2&lt;/code&gt;, and so on. In case the compiled code stores references to anonymous functions or similar, the Elixir compiler may be unable to reclaim those modules, keeping an unnecessary amount of code in memory and eventually leading to modules such as &lt;code&gt;elixir_compiler_12345&lt;/code&gt;.</source>
          <target state="translated">コンパイラは一時モジュールを利用してコードをコンパイルします。たとえば、 &lt;code&gt;elixir_compiler_1&lt;/code&gt; 、 &lt;code&gt;elixir_compiler_2&lt;/code&gt; などです。コンパイルされたコードが無名関数などへの参照を格納している場合、Elixirコンパイラはそれらのモジュールを再利用できず、不要な量のコードをメモリに保持し、最終的に &lt;code&gt;elixir_compiler_12345&lt;/code&gt; などのモジュールにつながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="25ad36289d9fc32f9ce285a83c0db949e85318f5" translate="yes" xml:space="preserve">
          <source>The compiler utilizes temporary modules to compile code. For example, &lt;code&gt;elixir_compiler_1&lt;/code&gt;, &lt;code&gt;elixir_compiler_2&lt;/code&gt;, etc. In case the compiled code stores references to anonymous functions or similar, the Elixir compiler may be unable to reclaim those modules, keeping an unnecessary amount of code in memory and eventually leading to modules such as &lt;code&gt;elixir_compiler_12345&lt;/code&gt;.</source>
          <target state="translated">コンパイラーは一時モジュールを利用してコードをコンパイルします。たとえば、 &lt;code&gt;elixir_compiler_1&lt;/code&gt; 、 &lt;code&gt;elixir_compiler_2&lt;/code&gt; など。コンパイルされたコードが匿名関数などへの参照を格納する場合、Elixirコンパイラーはそれらのモジュールを再利用できず、不要な量のコードをメモリーに保持し、最終的に &lt;code&gt;elixir_compiler_12345&lt;/code&gt; などのモジュールにつながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4e326f0b1277ff195521c682d15083f035944526" translate="yes" xml:space="preserve">
          <source>The compiler will infer this argument as &lt;code&gt;map&lt;/code&gt;. Sometimes the inference will be suboptimal, especially if the function contains multiple clauses with the argument matching on different values each time. You can specify the proper names for documentation by declaring only the function head at any moment before the implementation:</source>
          <target state="translated">コンパイラーは、この引数を &lt;code&gt;map&lt;/code&gt; として推測します。特に関数に複数の句が含まれ、引数が毎回異なる値に一致する場合は、推論が最適ではない場合があります。実装前の任意の時点で関数ヘッドのみを宣言することにより、ドキュメントの適切な名前を指定できます。</target>
        </trans-unit>
        <trans-unit id="68165d5af4e0c7518ce750565d2875d5f1b99f6f" translate="yes" xml:space="preserve">
          <source>The complexity of &lt;code&gt;a ++ b&lt;/code&gt; is proportional to &lt;code&gt;length(a)&lt;/code&gt;, so avoid repeatedly appending to lists of arbitrary length, e.g. &lt;code&gt;list ++ [element]&lt;/code&gt;. Instead, consider prepending via &lt;code&gt;[element | rest]&lt;/code&gt; and then reversing.</source>
          <target state="translated">&lt;code&gt;a ++ b&lt;/code&gt; の複雑さは &lt;code&gt;length(a)&lt;/code&gt; に比例するため、任意の長さのリストに繰り返し追加することは避けてください（例： &lt;code&gt;list ++ [element]&lt;/code&gt; 。代わりに、 &lt;code&gt;[element | rest]&lt;/code&gt; と反転します。</target>
        </trans-unit>
        <trans-unit id="51b97324d416e9860c0329e32ca5a0050e8a20b3" translate="yes" xml:space="preserve">
          <source>The complexity of &lt;code&gt;a ++ b&lt;/code&gt; is proportional to &lt;code&gt;length(a)&lt;/code&gt;, so avoid repeatedly appending to lists of arbitrary length, for example, &lt;code&gt;list ++ [element]&lt;/code&gt;. Instead, consider prepending via &lt;code&gt;[element | rest]&lt;/code&gt; and then reversing.</source>
          <target state="translated">&lt;code&gt;a ++ b&lt;/code&gt; の複雑さは &lt;code&gt;length(a)&lt;/code&gt; に比例するため、 &lt;code&gt;list ++ [element]&lt;/code&gt; など、任意の長さのリストに繰り返し追加することは避けてください。代わりに、 &lt;code&gt;[element | rest]&lt;/code&gt; そして逆転。</target>
        </trans-unit>
        <trans-unit id="ce5190846b0b9ce88bde5e1fb9838155c0302562" translate="yes" xml:space="preserve">
          <source>The complexity of &lt;code&gt;a -- b&lt;/code&gt; is proportional to &lt;code&gt;length(a) * length(b)&lt;/code&gt;, meaning that it will be very slow if both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are long lists. In such cases, consider converting each list to a &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt; and using &lt;a href=&quot;mapset#difference/2&quot;&gt;&lt;code&gt;MapSet.difference/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;a -- b&lt;/code&gt; の複雑さは &lt;code&gt;length(a) * length(b)&lt;/code&gt; に比例します。つまり、 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; の両方が長いリストである場合、非常に遅くなります。このような場合は、各リストを&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; に&lt;/a&gt;変換し、&lt;a href=&quot;mapset#difference/2&quot;&gt; &lt;code&gt;MapSet.difference/2&lt;/code&gt; &lt;/a&gt;を使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="84ce76ba55c26126100351cef4100465580a3f63" translate="yes" xml:space="preserve">
          <source>The compressed option must be combined with either read or write, but not both. Note that the file size obtained with &lt;a href=&quot;#stat/1&quot;&gt;&lt;code&gt;stat/1&lt;/code&gt;&lt;/a&gt; will most probably not match the number of bytes that can be read from a compressed file.</source>
          <target state="translated">圧縮オプションは、読み取りまたは書き込みのいずれかと組み合わせる必要がありますが、両方と組み合わせることはできません。&lt;a href=&quot;#stat/1&quot;&gt; &lt;code&gt;stat/1&lt;/code&gt; で&lt;/a&gt;取得されるファイルサイズは、圧縮ファイルから読み取ることができるバイト数と一致しない可能性が高いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="6d2bc42beb1d07a11bffabca4e75ecee65b8f3cc" translate="yes" xml:space="preserve">
          <source>The concurrency can be increased or decreased using the &lt;code&gt;:max_concurrency&lt;/code&gt; option. For example, if the tasks are IO heavy, the value can be increased:</source>
          <target state="translated">並行性は、 &lt;code&gt;:max_concurrency&lt;/code&gt; オプションを使用して増減できます。たとえば、タスクがIO負荷が高い場合、値を増やすことができます。</target>
        </trans-unit>
        <trans-unit id="2dcb06049bb00d9d82db3a23393505f88e85183b" translate="yes" xml:space="preserve">
          <source>The configurations are merged together with the values in the second one having higher preference than the first in case of conflicts. In case both values are set to keyword lists, it deep merges them.</source>
          <target state="translated">コンフリクトが発生した場合は、2 番目の値の方が 1 番目の値よりも優先度が高くなるように、構成がマージされます。両方の値がキーワードリストに設定されている場合は、それらを深くマージします。</target>
        </trans-unit>
        <trans-unit id="8bfd0598c3186c98ed3b75f81d353f661a54c9d0" translate="yes" xml:space="preserve">
          <source>The console backend allows you to customize the format of your log messages with the &lt;code&gt;:format&lt;/code&gt; option.</source>
          <target state="translated">コンソールバックエンドでは、 &lt;code&gt;:format&lt;/code&gt; オプションを使用してログメッセージの形式をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="7235027880d78a2aea2ca7dc4debaca1a57f60b0" translate="yes" xml:space="preserve">
          <source>The console backend logs messages by printing them to the console. It supports the following options:</source>
          <target state="translated">コンソールバックエンドは、メッセージをコンソールに印刷してログを記録します。以下のオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="b55d6ec1cda71844493902f9fd51af5232de80cd" translate="yes" xml:space="preserve">
          <source>The contents are compared to avoid asking the user to override if the contents did not change. Returns false if the file exists and the content is the same or the user forbade to override it. Returns true otherwise.</source>
          <target state="translated">内容が変更されていない場合にユーザーに上書きを求めることを避けるために、内容を比較します。ファイルが存在していて内容が同じである場合、あるいはユーザーが上書きを禁止している場合は false を返します。そうでない場合は true を返します。</target>
        </trans-unit>
        <trans-unit id="8de6b43b33ab75286e101ec804e217bdf4636eeb" translate="yes" xml:space="preserve">
          <source>The context is used to pass information from the callbacks to the test. In order to pass information from the test to the callback, ExUnit provides tags.</source>
          <target state="translated">コンテキストは、コールバックからテストに情報を渡すために使用します。テストの情報をコールバックに渡すために、ExUnit はタグを提供します。</target>
        </trans-unit>
        <trans-unit id="0ac124f60dd5f0bf6457e5116fc9264ff455388d" translate="yes" xml:space="preserve">
          <source>The context returned by &lt;a href=&quot;#setup_all/1&quot;&gt;&lt;code&gt;setup_all/1&lt;/code&gt;&lt;/a&gt; will be available in all subsequent &lt;code&gt;setup_all&lt;/code&gt;, &lt;code&gt;setup&lt;/code&gt;, and the &lt;code&gt;test&lt;/code&gt; itself. For instance, the &lt;code&gt;conn&lt;/code&gt; from the previous example can be accessed as:</source>
          <target state="translated">&lt;a href=&quot;#setup_all/1&quot;&gt; &lt;code&gt;setup_all/1&lt;/code&gt; &lt;/a&gt;によって返されるコンテキストは、後続のすべての &lt;code&gt;setup_all&lt;/code&gt; 、 &lt;code&gt;setup&lt;/code&gt; 、および &lt;code&gt;test&lt;/code&gt; 自体で使用できます。たとえば、前の例の &lt;code&gt;conn&lt;/code&gt; には次のようにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="df9b547258c058ce1d60f5a04eb16b39a7714b90" translate="yes" xml:space="preserve">
          <source>The continuation is the closure returned as a result when the enumeration is suspended. When invoked, it expects a new accumulator and it returns the result.</source>
          <target state="translated">継続は、列挙が中断されたときに結果として返されるクロージャです。呼び出されると、新しいアキュムレータを期待し、その結果を返します。</target>
        </trans-unit>
        <trans-unit id="95e2451a8bd06ec3ff7404ffc596006e9814e181" translate="yes" xml:space="preserve">
          <source>The correct way to write the refutation above is to use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#match?/2&quot;&gt;&lt;code&gt;Kernel.match?/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">上記の反論を記述する正しい方法は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#match?/2&quot;&gt; &lt;code&gt;Kernel.match?/2&lt;/code&gt; &lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="471e051b1dfc7605a0864374979ff909fdd918ff" translate="yes" xml:space="preserve">
          <source>The corresponding child process must not be running; use &lt;a href=&quot;#terminate_child/2&quot;&gt;&lt;code&gt;terminate_child/2&lt;/code&gt;&lt;/a&gt; to terminate it if it's running.</source>
          <target state="translated">対応する子プロセスが実行されていてはなりません。実行中の場合は、&lt;a href=&quot;#terminate_child/2&quot;&gt; &lt;code&gt;terminate_child/2&lt;/code&gt; &lt;/a&gt;を使用して終了します。</target>
        </trans-unit>
        <trans-unit id="25f2832dc850f5e3ce868623e448ed6173ae8a76" translate="yes" xml:space="preserve">
          <source>The crypto module</source>
          <target state="translated">暗号化モジュール</target>
        </trans-unit>
        <trans-unit id="6c25b4183ffb2089e8226e185f14e599e79dc998" translate="yes" xml:space="preserve">
          <source>The current environment can be accessed at any time as &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;. Inside macros, the caller environment can be accessed as &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の環境には、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;としていつでもアクセスできます。マクロ内では、呼び出し元の環境に&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9ecd090fb1dcdddfdde8d184412bdb4ef34572bf" translate="yes" xml:space="preserve">
          <source>The current environment can be accessed at any time as &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;. Inside macros, the caller environment can be accessed as &lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の環境には、&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;としていつでもアクセスできます。マクロ内では、呼び出し元の環境に&lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="f3e60a2c1efd523ca96fe66ffa2af8ecfa3ad2af" translate="yes" xml:space="preserve">
          <source>The current working directory is set for the BEAM globally. This can lead to race conditions if multiple processes are changing the current working directory concurrently. To run an external command in a given directory without changing the global current working directory, use the &lt;code&gt;:cd&lt;/code&gt; option of &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Port.html#open/2&quot;&gt;&lt;code&gt;Port.open/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の作業ディレクトリは、BEAM用にグローバルに設定されています。複数のプロセスが現在の作業ディレクトリを同時に変更している場合、これは競合状態につながる可能性があります。グローバルな現在の作業ディレクトリを変更せずに特定のディレクトリで外部コマンドを実行するには、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/elixir/Port.html#open/2&quot;&gt; &lt;code&gt;Port.open/2&lt;/code&gt; &lt;/a&gt;2の &lt;code&gt;:cd&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="11ca9436cf4382b007a36385f24017c6fe9ea438" translate="yes" xml:space="preserve">
          <source>The daemon will write all of its standard output to the &quot;tmp/log/&quot; directory in the release root. You can watch the log file by doing &lt;code&gt;tail -f tmp/log/erlang.log.1&lt;/code&gt; or similar. Once files get too large, the index suffix will be incremented. A developer can also attach to the standard input of the daemon by invoking &quot;to_erl tmp/pipe/&quot; from the release root. However, note that attaching to the system should be done with extreme care, since the usual commands for exiting an Elixir system, such as hitting Ctrl+C twice or Ctrl+\, will actually shut down the daemon. Therefore, using &lt;code&gt;bin/RELEASE_NAME remote&lt;/code&gt; should be preferred, even in daemon mode.</source>
          <target state="translated">デーモンは、すべての標準出力をリリースルートの「tmp / log /」ディレクトリに書き込みます。 &lt;code&gt;tail -f tmp/log/erlang.log.1&lt;/code&gt; などを実行すると、ログファイルを監視できます。ファイルが大きくなりすぎると、インデックスのサフィックスが増加します。開発者は、リリースルートから「to_erltmp / pipe /」を呼び出すことにより、デーモンの標準入力に接続することもできます。ただし、Ctrl + Cを2回押したりCtrl + \を押したりするなど、Elixirシステムを終了するための通常のコマンドは実際にはデーモンをシャットダウンするため、システムへの接続は細心の注意を払って行う必要があることに注意してください。したがって、デーモンモードであっても、 &lt;code&gt;bin/RELEASE_NAME remote&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d8cd8e8b468d03cac9b2aec5728511f109cbd6ae" translate="yes" xml:space="preserve">
          <source>The data structure you are implementing the protocol for must be the first argument to all functions defined in the protocol.</source>
          <target state="translated">プロトコルを実装するデータ構造は、プロトコルで定義されているすべての関数の第一引数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b2d538224a6564739f222b37335408e88b676276" translate="yes" xml:space="preserve">
          <source>The date and time fields in the struct can be accessed directly:</source>
          <target state="translated">構造体の日付と時刻のフィールドに直接アクセスできます。</target>
        </trans-unit>
        <trans-unit id="efa23e38a0ca17fbedb614ea88023f4b1e8f6b6f" translate="yes" xml:space="preserve">
          <source>The datetime can be any of the Calendar types (&lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;) or any map, as long as they contain all of the relevant fields necessary for formatting. For example, if you use &lt;code&gt;%Y&lt;/code&gt; to format the year, the datetime must have the &lt;code&gt;:year&lt;/code&gt; field. Therefore, if you pass a &lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, or a map without the &lt;code&gt;:year&lt;/code&gt; field to a format that expects &lt;code&gt;%Y&lt;/code&gt;, an error will be raised.</source>
          <target state="translated">日時は、フォーマットに必要なすべての関連フィールドが含まれている限り、任意のカレンダータイプ（&lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;）または任意のマップにすることができます。たとえば、 &lt;code&gt;%Y&lt;/code&gt; を使用して年をフォーマットする場合、日時には &lt;code&gt;:year&lt;/code&gt; フィールドが必要です。したがって、&lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;、または &lt;code&gt;:year&lt;/code&gt; フィールドのないマップを &lt;code&gt;%Y&lt;/code&gt; を期待する形式に渡すと、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="104ca7733bdc0fce19ec1a42bd6f6c3a9728b295" translate="yes" xml:space="preserve">
          <source>The days are counted as Gregorian days. The date is returned in the same calendar as it was given in.</source>
          <target state="translated">日はグレゴリオ暦の日としてカウントされます。日付は、与えられた日付と同じ暦で返されます。</target>
        </trans-unit>
        <trans-unit id="81de1658f9b930a338fa7d15b3cd46a31f6ce081" translate="yes" xml:space="preserve">
          <source>The default engine used by EEx.</source>
          <target state="translated">EExが使用するデフォルトのエンジン。</target>
        </trans-unit>
        <trans-unit id="5c2506b585933bcf9d63b9d589d2095db52d7f38" translate="yes" xml:space="preserve">
          <source>The default node is &lt;a href=&quot;#self/0&quot;&gt;&lt;code&gt;Node.self/0&lt;/code&gt;&lt;/a&gt;, the local node. If &lt;code&gt;node&lt;/code&gt; is the local node, the function also sets the cookie of all other unknown nodes to &lt;code&gt;cookie&lt;/code&gt;.</source>
          <target state="translated">デフォルトのノードは、ローカルノードである&lt;a href=&quot;#self/0&quot;&gt; &lt;code&gt;Node.self/0&lt;/code&gt; &lt;/a&gt;です。場合は &lt;code&gt;node&lt;/code&gt; ローカル・ノードで、機能は他のすべての未知のノードのクッキーを設定し &lt;code&gt;cookie&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1841b4dcd409156ad003b434d7d06485770c7448" translate="yes" xml:space="preserve">
          <source>The default node is &lt;a href=&quot;node#self/0&quot;&gt;&lt;code&gt;Node.self/0&lt;/code&gt;&lt;/a&gt;, the local node. If &lt;code&gt;node&lt;/code&gt; is the local node, the function also sets the cookie of all other unknown nodes to &lt;code&gt;cookie&lt;/code&gt;.</source>
          <target state="translated">デフォルトのノードは&lt;a href=&quot;node#self/0&quot;&gt; &lt;code&gt;Node.self/0&lt;/code&gt; &lt;/a&gt;ノードであるNode.self / 0です。場合は &lt;code&gt;node&lt;/code&gt; ローカル・ノードで、機能は他のすべての未知のノードのクッキーを設定し &lt;code&gt;cookie&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee7448078e00a12f44bc6d6a512061a6e8e76068" translate="yes" xml:space="preserve">
          <source>The default output contains data gathered from all matching functions. The first row after the header contains the sums of the partial results and the average time for all the function calls listed. The following rows contain the function call, followed by the number of times that the function was called, then by the percentage of time that the call uses, then the total time for that function in microseconds, and, finally, the average time per call in microseconds.</source>
          <target state="translated">デフォルトの出力には、すべてのマッチング関数から収集されたデータが含まれます。ヘッダの後の最初の行には、部分的な結果の合計と、リストされたすべての関数呼び出しの平均時間が含まれています。次の行には、関数呼び出し、関数が呼び出された回数、呼び出しが使用した時間の割合、その関数の合計時間(マイクロ秒単位)、最後に呼び出しごとの平均時間(マイクロ秒単位)が含まれます。</target>
        </trans-unit>
        <trans-unit id="ea39ed70f4785b6c480b790dacca9bfe36cb2b1f" translate="yes" xml:space="preserve">
          <source>The default output contains data gathered from all matching functions. The left column structures each module and its total call count trace is presented on the right. Each module has its count discriminated by function below. The &lt;code&gt;&amp;lt;--&lt;/code&gt; symbol is meant to help visualize where a new module call count begins.</source>
          <target state="translated">デフォルトの出力には、一致するすべての関数から収集されたデータが含まれます。左側の列は各モジュールを構成し、その合計コール数トレースは右側に表示されます。各モジュールの数は、以下の機能によって区別されます。 &lt;code&gt;&amp;lt;--&lt;/code&gt; シンボルは、新しいモジュールの呼び出し回数が始まるヘルプ可視化することを意味しています。</target>
        </trans-unit>
        <trans-unit id="819e6f3391fb45f7ce5241a6dd1d1431dc481702" translate="yes" xml:space="preserve">
          <source>The default output contains data gathered from all profiled processes. All times are wall clock milliseconds. The columns have the following meaning:</source>
          <target state="translated">デフォルトの出力には、すべてのプロファイル化されたプロセスから収集されたデータが含まれます。すべての時間は壁時計ミリ秒です。列には以下の意味があります。</target>
        </trans-unit>
        <trans-unit id="27a16bfaa2e09572a48e318dc8d0f73e02fd7ff6" translate="yes" xml:space="preserve">
          <source>The default value will not be passed through the update function.</source>
          <target state="translated">デフォルト値は更新関数には渡されません。</target>
        </trans-unit>
        <trans-unit id="380321e8388d234e55ec92513260d8b22df6e305" translate="yes" xml:space="preserve">
          <source>The definition above wouldn't work for this particular example, as it would attempt to start the counter with an initial value of an empty list. However, this may be a viable option in your own agents. A common approach is to use a keyword list, as that would allow setting the initial value and giving a name to the counter process, for example:</source>
          <target state="translated">上記の定義は、空のリストの初期値でカウンタを開始しようとするので、この特定の例では機能しません。しかし、これはあなたのエージェントでは実行可能なオプションかもしれません。一般的なアプローチはキーワードリストを使用することです。</target>
        </trans-unit>
        <trans-unit id="14e3a7f1b4ff430ef2347af078514bfcd6aac53f" translate="yes" xml:space="preserve">
          <source>The dependencies' versions are expected to be formatted according to Semantic Versioning and the requirements must be specified as defined in the &lt;a href=&quot;https://hexdocs.pm/elixir/Version.html&quot;&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">依存関係のバージョンは、セマンティックバージョニングに従ってフォーマットされていることが想定されており、要件は&lt;a href=&quot;https://hexdocs.pm/elixir/Version.html&quot;&gt; &lt;code&gt;Version&lt;/code&gt; &lt;/a&gt;モジュールで定義されているとおりに指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0199850bb5adebc71f4018576818506ad556f1cc" translate="yes" xml:space="preserve">
          <source>The device will be created and sent to the function given. When the function returns, the device will be closed. The final result will be a tuple with &lt;code&gt;:ok&lt;/code&gt; and the result of the function.</source>
          <target state="translated">デバイスが作成され、指定された関数に送信されます。関数が戻ると、デバイスは閉じられます。最終結果は、 &lt;code&gt;:ok&lt;/code&gt; と関数の結果を持つタプルになります。</target>
        </trans-unit>
        <trans-unit id="92c1c70614d3e16189eb567106d0cd377288e598" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; is that the latter is more strict when comparing integers and floats:</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; と &lt;code&gt;===&lt;/code&gt; の違いは、整数と浮動小数点数を比較する場合、後者がより厳密になることです。</target>
        </trans-unit>
        <trans-unit id="bce9ae6a81650ed69afbfa89ac267aa5dbf3c9da" translate="yes" xml:space="preserve">
          <source>The difference between the two approaches is that a module-based supervisor gives you more direct control over how the supervisor is initialized. Instead of calling &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;Supervisor.start_link/2&lt;/code&gt;&lt;/a&gt; with a list of children that are automatically initialized, we manually initialized the children by calling &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; inside its &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">2つのアプローチの違いは、モジュールベースのスーパーバイザーを使用すると、スーパーバイザーの初期化方法をより直接的に制御できることです。自動的に初期化される子のリストを使用して&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;Supervisor.start_link/2&lt;/code&gt; &lt;/a&gt;を呼び出す代わりに、&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバック内で&lt;a href=&quot;#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; を&lt;/a&gt;呼び出すことにより、子を手動で初期化しました。</target>
        </trans-unit>
        <trans-unit id="7b165d79002d46e097dd675e283b2c25db64a858" translate="yes" xml:space="preserve">
          <source>The difference between the two approaches is that a module-based supervisor gives you more direct control over how the supervisor is initialized. Instead of calling &lt;a href=&quot;supervisor#start_link/2&quot;&gt;&lt;code&gt;Supervisor.start_link/2&lt;/code&gt;&lt;/a&gt; with a list of children that are automatically initialized, we manually initialized the children by calling &lt;a href=&quot;supervisor#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; inside its &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">2つのアプローチの違いは、モジュールベースのスーパーバイザは、スーパーバイザの初期化方法をより直接制御できることです。自動的に初期化される子のリストを使用して&lt;a href=&quot;supervisor#start_link/2&quot;&gt; &lt;code&gt;Supervisor.start_link/2&lt;/code&gt; &lt;/a&gt;を呼び出す代わりに、&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバック内で&lt;a href=&quot;supervisor#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; を&lt;/a&gt;呼び出して、子を手動で初期化しました。</target>
        </trans-unit>
        <trans-unit id="3b5eb7b6faff508891acf9d2eb056d03565a244c" translate="yes" xml:space="preserve">
          <source>The difference is that anonymous functions require the target node to have exactly the same code version as the caller. Using module, function, and arguments is more robust because you only need to find a function with matching arity in the given module.</source>
          <target state="translated">違いは、匿名関数は、ターゲットノードが呼び出し元と全く同じコードバージョンである必要があることです。モジュール、関数、引数を使用すると、与えられたモジュール内で一致するアリティを持つ関数を見つけるだけで済むので、よりロバストです。</target>
        </trans-unit>
        <trans-unit id="42de26ff16cbc728a59ab8e0d11febc5d9712289" translate="yes" xml:space="preserve">
          <source>The difference is that the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; expects the child specification at the moment &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt; is called, and no longer on the init callback. If there are any initial arguments given on initialization, such as &lt;code&gt;[initial_arg]&lt;/code&gt;, it can be given in the &lt;code&gt;:extra_arguments&lt;/code&gt; flag on &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">違いは、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; &lt;/a&gt;が呼び出された時点で子仕様を予期し、initコールバックではないことです。 &lt;code&gt;[initial_arg]&lt;/code&gt; など、初期化時に指定された初期引数がある場合は、&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;:extra_arguments&lt;/code&gt; フラグで指定できます。</target>
        </trans-unit>
        <trans-unit id="5358501133f2ba56bf1b306cdd649fc8fee2e62a" translate="yes" xml:space="preserve">
          <source>The difference is that the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; expects the child specification at the moment &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt; is called, and no longer on the init callback. If there are any initial arguments given on initialization, such as &lt;code&gt;[initial_arg]&lt;/code&gt;, it can be given in the &lt;code&gt;:extra_arguments&lt;/code&gt; flag on &lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">違いは、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; &lt;/a&gt;が呼び出された瞬間に子の仕様を予期し、initコールバックではないことです。 &lt;code&gt;[initial_arg]&lt;/code&gt; など、初期化時に指定された初期引数がある場合は、&lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;:extra_arguments&lt;/code&gt; フラグで指定できます。</target>
        </trans-unit>
        <trans-unit id="53c4296a8b739f59bee25619f4e6585ba6646d78" translate="yes" xml:space="preserve">
          <source>The digraph module</source>
          <target state="translated">ディグラフモジュール</target>
        </trans-unit>
        <trans-unit id="d3687778e68f2e38fa3eb29706a7417475b459a2" translate="yes" xml:space="preserve">
          <source>The document starts flat (without breaks) until a group is found.</source>
          <target state="translated">文書は、グループが見つかるまでフラット(改行なし)で始まります。</target>
        </trans-unit>
        <trans-unit id="2ad969954076e16dcc1ff7f0c2aba06e5e46ee7f" translate="yes" xml:space="preserve">
          <source>The dot (&lt;code&gt;.&lt;/code&gt;) in Elixir can be used for remote calls:</source>
          <target state="translated">Elixir のドット（ &lt;code&gt;.&lt;/code&gt; ）は、リモート呼び出しに使用できます。</target>
        </trans-unit>
        <trans-unit id="555f5e20b9d1a7a0564cfc99c5aa3c497147b302" translate="yes" xml:space="preserve">
          <source>The dot may be used to invoke anonymous functions too:</source>
          <target state="translated">ドットは匿名関数の呼び出しにも使用できます。</target>
        </trans-unit>
        <trans-unit id="6bfa76913b9787750a0bfa227b60b3c7658a646a" translate="yes" xml:space="preserve">
          <source>The downside of this approach is that the doctest result is not really what users would see in the terminal.</source>
          <target state="translated">このアプローチの欠点は、doctestの結果が実際にはユーザーが端末で見るものではないということです。</target>
        </trans-unit>
        <trans-unit id="2b457ad21100bb14e953ebf6025ecbe3add69796" translate="yes" xml:space="preserve">
          <source>The elements in both the returned lists are in the same relative order as they were in the original enumerable (if such enumerable was ordered, like a list). See the examples below.</source>
          <target state="translated">返された両方のリストの要素は、元の列挙可能な要素と同じ相対順序になります(そのような列挙可能な要素がリストのように順序付けられていた場合)。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="46fd29816806a299fb407c730c9ba36ba20c158f" translate="yes" xml:space="preserve">
          <source>The encoder function is supposed to create an atom from the given string. It is required to return either &lt;code&gt;{:ok, term}&lt;/code&gt;, where term is an atom. It is possible to return something else than an atom, however, in that case the AST is no longer &quot;valid&quot; in that it cannot be used to compile or evaluate Elixir code. A use case for this is if you want to use the Elixir parser in a user-facing situation, but you don't want to exhaust the atom table.</source>
          <target state="translated">エンコーダ関数は、指定された文字列からアトムを作成することになっています。 &lt;code&gt;{:ok, term}&lt;/code&gt; いずれかを返す必要があります。ここで、termはアトムです。アトム以外のものを返すことは可能ですが、その場合、ASTはElixirコードのコンパイルまたは評価に使用できないため、「有効」ではなくなります。この使用例は、ユーザー向けの状況でElixirパーサーを使用したいが、アトムテーブルを使い果たしたくない場合です。</target>
        </trans-unit>
        <trans-unit id="865f48d17fe14cd4996952b1bd0f45d973a938ce" translate="yes" xml:space="preserve">
          <source>The encoder function is supposed to create an atom from the given string. To produce a valid AST, it is required to return &lt;code&gt;{:ok, term}&lt;/code&gt;, where &lt;code&gt;term&lt;/code&gt; is an atom. It is possible to return something other than an atom, however, in that case the AST is no longer &quot;valid&quot; in that it cannot be used to compile or evaluate Elixir code. A use case for this is if you want to use the Elixir parser in a user-facing situation, but you don't want to exhaust the atom table.</source>
          <target state="translated">エンコーダー関数は、指定された文字列からアトムを作成することになっています。有効なASTを生成するには、 &lt;code&gt;{:ok, term}&lt;/code&gt; を返す必要があります。ここで、 &lt;code&gt;term&lt;/code&gt; はアトムです。アトム以外のものを返すことは可能ですが、その場合、ASTはElixirコードのコンパイルまたは評価に使用できないという点で「有効」ではなくなります。このユースケースは、ユーザー向けの状況でElixirパーサーを使用したいが、アトムテーブルを使い果たしたくない場合です。</target>
        </trans-unit>
        <trans-unit id="7abcd054d6c0c3b0676a107d280986f037e15ba1" translate="yes" xml:space="preserve">
          <source>The encoder function will receive the atom name (as a binary) and a keyword list with the current file, line and column. It must return &lt;code&gt;{:ok, token :: term} | {:error, reason :: binary}&lt;/code&gt;.</source>
          <target state="translated">エンコーダー関数は、アトム名（バイナリーとして）および現在のファイル、行、列を含むキーワードリストを受け取ります。 &lt;code&gt;{:ok, token :: term} | {:error, reason :: binary}&lt;/code&gt; 返す必要があります| {：error、reason ::バイナリ}。</target>
        </trans-unit>
        <trans-unit id="d93739e1f908805f248fbd3ca05efb8a31a93ffb" translate="yes" xml:space="preserve">
          <source>The environment</source>
          <target state="translated">環境</target>
        </trans-unit>
        <trans-unit id="b1059c7023600cf66d37436e09b5b8c7e27f7d77" translate="yes" xml:space="preserve">
          <source>The environment applies only to the current project. As we will see in future chapters, any dependency you add to your project will by default run in the &lt;code&gt;:prod&lt;/code&gt; environment.</source>
          <target state="translated">環境は現在のプロジェクトにのみ適用されます。今後の章で見るように、プロジェクトに追加する依存関係はデフォルトで &lt;code&gt;:prod&lt;/code&gt; 環境で実行されます。</target>
        </trans-unit>
        <trans-unit id="569fc959f1dad768558df72d1e65bcb68e016b15" translate="yes" xml:space="preserve">
          <source>The environment can be changed via the command line by setting the &lt;code&gt;MIX_ENV&lt;/code&gt; environment variable, for example:</source>
          <target state="translated">環境は、 &lt;code&gt;MIX_ENV&lt;/code&gt; 環境変数を設定することにより、コマンドラインから変更できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="514025daae02cae2313ca1d48fbcc882bf070826" translate="yes" xml:space="preserve">
          <source>The environment can be read via &lt;a href=&quot;#env/0&quot;&gt;&lt;code&gt;Mix.env/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">環境は&lt;a href=&quot;#env/0&quot;&gt; &lt;code&gt;Mix.env/0&lt;/code&gt; &lt;/a&gt;を介して読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="cfd48ae86d7fb6e0cc9118fb73487346d9610f87" translate="yes" xml:space="preserve">
          <source>The environment can be read via &lt;a href=&quot;mix#env/0&quot;&gt;&lt;code&gt;Mix.env/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">環境は&lt;a href=&quot;mix#env/0&quot;&gt; &lt;code&gt;Mix.env/0&lt;/code&gt; &lt;/a&gt;経由で読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="79b786be3813b81bda2dd7613367e75b678039b6" translate="yes" xml:space="preserve">
          <source>The environment is available after loading the application, which is a process explained later:</source>
          <target state="translated">アプリケーションをロードした後に環境が利用できるようになりますが、これは後述する処理です。</target>
        </trans-unit>
        <trans-unit id="97a5f35bc8e443b15b7816310584c96da8ae8afe" translate="yes" xml:space="preserve">
          <source>The error state returned by &lt;a href=&quot;exunit.test&quot;&gt;&lt;code&gt;ExUnit.Test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exunit.testmodule&quot;&gt;&lt;code&gt;ExUnit.TestModule&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;exunit.test&quot;&gt; &lt;code&gt;ExUnit.Test&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;exunit.testmodule&quot;&gt; &lt;code&gt;ExUnit.TestModule&lt;/code&gt; &lt;/a&gt;によって返されるエラー状態</target>
        </trans-unit>
        <trans-unit id="1dd062c870a86dc73f9a75e2843a53a9fc3ffd4b" translate="yes" xml:space="preserve">
          <source>The error state returned by &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Test.html&quot;&gt;&lt;code&gt;ExUnit.Test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.TestModule.html&quot;&gt;&lt;code&gt;ExUnit.TestModule&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Test.html&quot;&gt; &lt;code&gt;ExUnit.Test&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.TestModule.html&quot;&gt; &lt;code&gt;ExUnit.TestModule&lt;/code&gt; &lt;/a&gt;によって返されるエラー状態</target>
        </trans-unit>
        <trans-unit id="67a7d2b9fd9ee22fe670aa85c88c37eecda3144b" translate="yes" xml:space="preserve">
          <source>The exact chunks that are kept are not documented and may change in future versions.</source>
          <target state="translated">保存されている正確なチャンクは文書化されておらず、将来のバージョンで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fd79581f4945ce7000f24bd77d80edb09d58223a" translate="yes" xml:space="preserve">
          <source>The example above broadcasted the message &lt;code&gt;{:broadcast, &quot;world&quot;}&lt;/code&gt; to all processes registered under the &quot;topic&quot; (or &quot;key&quot; as we called it until now) &lt;code&gt;&quot;hello&quot;&lt;/code&gt;.</source>
          <target state="translated">上記の例では、メッセージ &lt;code&gt;{:broadcast, &quot;world&quot;}&lt;/code&gt; を、「topic」（またはこれまで呼び出していた「key」）の下に登録されているすべてのプロセス &lt;code&gt;&quot;hello&quot;&lt;/code&gt; ブロードキャストしました。</target>
        </trans-unit>
        <trans-unit id="85cebbc730e74ea1586122c70e3648ace6b606a3" translate="yes" xml:space="preserve">
          <source>The example above has a pipeline of operations. We start with a range and then multiply each element in the range by 3. This first operation will now create and return a list with &lt;code&gt;100_000&lt;/code&gt; items. Then we keep all odd elements from the list, generating a new list, now with &lt;code&gt;50_000&lt;/code&gt; items, and then we sum all entries.</source>
          <target state="translated">上記の例には、オペレーションのパイプラインがあります。範囲から始めて、範囲内の各要素に3を掛けます。この最初の操作では、 &lt;code&gt;100_000&lt;/code&gt; 項目のリストを作成して返します。次に、リストからすべての奇数の要素を保持し、新しいリストを生成します。ここで、 &lt;code&gt;50_000&lt;/code&gt; のアイテムを使用し、すべてのエントリを合計します。</target>
        </trans-unit>
        <trans-unit id="d7a86a0bce3d2d4979cfe2b252cb1ba44bf3ffc0" translate="yes" xml:space="preserve">
          <source>The example above is the same as calling &lt;code&gt;List.flatten([1, [2], 3])&lt;/code&gt;.</source>
          <target state="translated">上記の例は、 &lt;code&gt;List.flatten([1, [2], 3])&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="34a98e7e58a5ad26483cead8675329ffdc04e919" translate="yes" xml:space="preserve">
          <source>The example above rescues the runtime error and returns the error itself which is then printed in the &lt;code&gt;iex&lt;/code&gt; session.</source>
          <target state="translated">上記の例では、ランタイムエラーを救い、エラー自体を返します。エラー自体は、 &lt;code&gt;iex&lt;/code&gt; セッションで出力されます。</target>
        </trans-unit>
        <trans-unit id="a1acf2309aa592e7d6d6148eb2c43c7439baf836" translate="yes" xml:space="preserve">
          <source>The example above shows the preferred strategy for customizing exception messages.</source>
          <target state="translated">上の例では、例外メッセージをカスタマイズするための好ましい戦略を示しています。</target>
        </trans-unit>
        <trans-unit id="7c4ee977260f8fcae5e39eaa8c9f47beb473c79e" translate="yes" xml:space="preserve">
          <source>The example above will define two modules: &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Foo.Bar&lt;/code&gt;. The second can be accessed as &lt;code&gt;Bar&lt;/code&gt; inside &lt;code&gt;Foo&lt;/code&gt; as long as they are in the same lexical scope. The code above is exactly the same as:</source>
          <target state="translated">上記の例では、 &lt;code&gt;Foo&lt;/code&gt; と &lt;code&gt;Foo.Bar&lt;/code&gt; の 2つのモジュールを定義します。2番目は、同じ字句スコープ内にある限り、 &lt;code&gt;Foo&lt;/code&gt; 内の &lt;code&gt;Bar&lt;/code&gt; としてアクセスできます。上記のコードは次のコードとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="8af5b80536d2c072fd5d6366536aa5700dca7b65" translate="yes" xml:space="preserve">
          <source>The example above will fetch the first 10 lines of the file you have selected. This means streams can be very useful for handling large files or even slow resources like network resources.</source>
          <target state="translated">上の例では、選択したファイルの最初の10行を取得します。つまり、ストリームは大きなファイルやネットワークリソースのような遅いリソースを扱うのに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="696bcc0172521f253466c2cb561bc8d6cc698268" translate="yes" xml:space="preserve">
          <source>The example above will only work if &lt;code&gt;x&lt;/code&gt; matches the first value in the right list. Otherwise, it will raise a &lt;a href=&quot;https://hexdocs.pm/elixir/MatchError.html&quot;&gt;&lt;code&gt;MatchError&lt;/code&gt;&lt;/a&gt; (like the &lt;code&gt;=&lt;/code&gt; operator would do).</source>
          <target state="translated">上記の例は、 &lt;code&gt;x&lt;/code&gt; が右側のリストの最初の値と一致する場合にのみ機能します。それ以外の場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/MatchError.html&quot;&gt; &lt;code&gt;MatchError&lt;/code&gt; が発生します&lt;/a&gt;（ &lt;code&gt;=&lt;/code&gt; 演算子のように）。</target>
        </trans-unit>
        <trans-unit id="b5335acb8d877ec62b7cb06ce91a567ae1709575" translate="yes" xml:space="preserve">
          <source>The example above will only work if &lt;code&gt;x&lt;/code&gt; matches the first value in the right list. Otherwise, it will raise a &lt;a href=&quot;matcherror&quot;&gt;&lt;code&gt;MatchError&lt;/code&gt;&lt;/a&gt; (like the &lt;code&gt;=&lt;/code&gt; operator would do).</source>
          <target state="translated">上記の例は、 &lt;code&gt;x&lt;/code&gt; が右側のリストの最初の値と一致する場合にのみ機能します。それ以外の場合は、&lt;a href=&quot;matcherror&quot;&gt; &lt;code&gt;MatchError&lt;/code&gt; が発生します&lt;/a&gt;（ &lt;code&gt;=&lt;/code&gt; 演算子の場合と同様）。</target>
        </trans-unit>
        <trans-unit id="6b460f75ed7a246aed0999b0840cd9a86244be18" translate="yes" xml:space="preserve">
          <source>The example above will print:</source>
          <target state="translated">上の例では印刷されます。</target>
        </trans-unit>
        <trans-unit id="fb87f61c9de07aa0c29854b1fe6c1165c0f17fed" translate="yes" xml:space="preserve">
          <source>The example above will run all tests that have the external option set to &lt;code&gt;true&lt;/code&gt;. It is also possible to include all examples that have a given tag, regardless of its value:</source>
          <target state="translated">上記の例は、外部オプションが &lt;code&gt;true&lt;/code&gt; に設定されているすべてのテストを実行します。値に関係なく、特定のタグを持つすべての例を含めることもできます。</target>
        </trans-unit>
        <trans-unit id="a35cc3928c93cd1525534e5aae37a525e3a1f63a" translate="yes" xml:space="preserve">
          <source>The example below prints the available compilers and then the list of dependencies.</source>
          <target state="translated">以下の例では、利用可能なコンパイラと依存関係のリストを表示しています。</target>
        </trans-unit>
        <trans-unit id="fd542bcb5f7a7bfb0b02572bb9041c4454ce88bf" translate="yes" xml:space="preserve">
          <source>The examples below use the &lt;code&gt;:exrop&lt;/code&gt; pseudorandom algorithm since it's the default from Erlang/OTP 20, however if you are using Erlang/OTP 22 or above then &lt;code&gt;:exsss&lt;/code&gt; is the default algorithm. If you are using &lt;code&gt;:exsplus&lt;/code&gt;, then please update, as this algorithm is deprecated since Erlang/OTP 20.</source>
          <target state="translated">以下の例では、Erlang / OTP 20のデフォルトであるため、 &lt;code&gt;:exrop&lt;/code&gt; 疑似ランダムアルゴリズムを使用していますが、Erlang / OTP 22以降を使用している場合は、 &lt;code&gt;:exsss&lt;/code&gt; がデフォルトのアルゴリズムです。 &lt;code&gt;:exsplus&lt;/code&gt; を使用している場合は、更新してください。このアルゴリズムはErlang / OTP20以降非推奨になっています。</target>
        </trans-unit>
        <trans-unit id="977b62dac31ac2298799e3e82efadb76ace792aa" translate="yes" xml:space="preserve">
          <source>The examples below will use &lt;code&gt;break!&lt;/code&gt;, assuming that you are setting a breakpoint directly from your IEx shell. But you can set up a break from anywhere by using the fully qualified name &lt;code&gt;IEx.break!&lt;/code&gt;.</source>
          <target state="translated">以下の例では、 &lt;code&gt;break!&lt;/code&gt; を使用します。、IExシェルから直接ブレークポイントを設定していると仮定します。ただし、完全修飾名 &lt;code&gt;IEx.break!&lt;/code&gt; を使用して、どこからでもブレークを設定できます。。</target>
        </trans-unit>
        <trans-unit id="598b6c321009ab41147aeda0cc432613c93bc6ff" translate="yes" xml:space="preserve">
          <source>The exception type</source>
          <target state="translated">例外の種類</target>
        </trans-unit>
        <trans-unit id="96d166dd9433a91274c33b5c64faa14557b71d73" translate="yes" xml:space="preserve">
          <source>The expected result should start at the next line after the &lt;code&gt;iex&amp;gt;&lt;/code&gt; or &lt;code&gt;...&amp;gt;&lt;/code&gt; line(s) and it is terminated either by a newline.</source>
          <target state="translated">期待される結果は、 &lt;code&gt;iex&amp;gt;&lt;/code&gt; または &lt;code&gt;...&amp;gt;&lt;/code&gt; 行の後の次の行で開始し、改行で終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef1dcbe751c0f9e41d4eb9dc12ae9aa4ff81e740" translate="yes" xml:space="preserve">
          <source>The fact this function uses Erlang's term ordering means that the comparison is structural and not semantic. For example:</source>
          <target state="translated">この関数がErlangの項順を使っているということは、比較は構造的なものであって意味的なものではないということを意味しています。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9d619b509d29dcc70d09a1c1eedfade7f7d69f11" translate="yes" xml:space="preserve">
          <source>The fact this function uses Erlang's term ordering means that the comparison is structural and not semantic. Therefore, if you want to compare structs, most structs provide a &quot;compare&quot; function, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#compare/2&quot;&gt;&lt;code&gt;Date.compare/2&lt;/code&gt;&lt;/a&gt;, which receives two structs and returns &lt;code&gt;:lt&lt;/code&gt; (less-than), &lt;code&gt;:eq&lt;/code&gt; (equal to), and &lt;code&gt;:gt&lt;/code&gt; (greater-than). If you pass a module as the sorting function, Elixir will automatically use the &lt;code&gt;compare/2&lt;/code&gt; function of said module:</source>
          <target state="translated">この関数がErlangの用語の順序付けを使用しているという事実は、比較が構造的であり、意味論的ではないことを意味します。したがって、構造体を比較する場合、ほとんどの構造体は、&lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#compare/2&quot;&gt; &lt;code&gt;Date.compare/2&lt;/code&gt; &lt;/a&gt; / 2などの「比較」関数を提供します。この関数は、2つの構造体を受け取り、 &lt;code&gt;:lt&lt;/code&gt; （より小さい）、： &lt;code&gt;:eq&lt;/code&gt; （等しい）、および &lt;code&gt;:gt&lt;/code&gt; を返します。（大なり記号）。モジュールを並べ替え関数として渡すと、Elixirはそのモジュールの &lt;code&gt;compare/2&lt;/code&gt; 関数を自動的に使用します。</target>
        </trans-unit>
        <trans-unit id="a8e9535a979f24690a83f0d69ec866c95c5b87d9" translate="yes" xml:space="preserve">
          <source>The feature is effectively deprecated by emitting warnings on usage. This is also known as hard-deprecation. In order to deprecate a feature, the proposed alternative MUST exist for AT LEAST THREE minor versions. For example, &lt;code&gt;Enum.uniq/2&lt;/code&gt; was soft-deprecated in favor of &lt;a href=&quot;enum#uniq_by/2&quot;&gt;&lt;code&gt;Enum.uniq_by/2&lt;/code&gt;&lt;/a&gt; in Elixir v1.1. This means a deprecation warning may only be emitted by Elixir v1.4 or later.</source>
          <target state="translated">この機能は、使用時に警告を発することで効果的に非推奨になりました。これはハード非推奨とも呼ばれます。機能を廃止するために、提案された代替案は少なくとも3つのマイナーバージョンに対して存在しなければなりません。たとえば、 &lt;code&gt;Enum.uniq/2&lt;/code&gt; は、Elixir v1.1 で&lt;a href=&quot;enum#uniq_by/2&quot;&gt; &lt;code&gt;Enum.uniq_by/2&lt;/code&gt; &lt;/a&gt;に代わってソフト非推奨になりました。つまり、非推奨の警告はElixir v1.4以降でのみ出力される可能性があります。</target>
        </trans-unit>
        <trans-unit id="767e9fa4f6cbd49737c9ee934e26b4707f937c6f" translate="yes" xml:space="preserve">
          <source>The feature is effectively deprecated by emitting warnings on usage. This is also known as hard-deprecation. In order to deprecate a feature, the proposed alternative MUST exist for AT LEAST THREE minor versions. For example, &lt;code&gt;Enum.uniq/2&lt;/code&gt; was soft-deprecated in favor of &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#uniq_by/2&quot;&gt;&lt;code&gt;Enum.uniq_by/2&lt;/code&gt;&lt;/a&gt; in Elixir v1.1. This means a deprecation warning may only be emitted by Elixir v1.4 or later.</source>
          <target state="translated">この機能は、使用時に警告を発することで事実上非推奨になっています。これは、ハード非推奨とも呼ばれます。機能を非推奨にするために、提案された代替案は少なくとも3つのマイナーバージョンに存在しなければなりません。例えば、 &lt;code&gt;Enum.uniq/2&lt;/code&gt; がソフト非推奨を支持した&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#uniq_by/2&quot;&gt; &lt;code&gt;Enum.uniq_by/2&lt;/code&gt; &lt;/a&gt;エリクサーのV1.1です。これは、非推奨の警告がElixirv1.4以降でのみ発行される可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="77826c76ea0072ad69d2f391c353d094902019fd" translate="yes" xml:space="preserve">
          <source>The feature is removed. This can only happen on major releases. This means deprecated features in Elixir v1.x shall only be removed by Elixir v2.x.</source>
          <target state="translated">この機能は削除されました。これはメジャーリリースでのみ発生する可能性があります。つまり、Elixir v1.xで廃止された機能は、Elixir v2.xでのみ削除されます。</target>
        </trans-unit>
        <trans-unit id="64f27bcc28943bbd06806f078df1fb5cd0c4fa41" translate="yes" xml:space="preserve">
          <source>The feature is soft-deprecated. It means both CHANGELOG and documentation must list the feature as deprecated but no warning is effectively emitted by running the code. There is no requirement to soft-deprecate a feature.</source>
          <target state="translated">この機能は soft-deprecated です。これは、CHANGELOG とドキュメントの両方でその機能を非推奨としてリストアップしなければならないことを意味しますが、コードを実行しても効果的に警告が出ないことを意味します。機能をソフトデプリカットする必要はありません。</target>
        </trans-unit>
        <trans-unit id="aaf695dceb54489cced53f84555aabadc2f0e697" translate="yes" xml:space="preserve">
          <source>The file is created if it does not exist. If it exists, the previous contents are overwritten. Returns &lt;code&gt;:ok&lt;/code&gt; if successful, or &lt;code&gt;{:error, reason}&lt;/code&gt; if an error occurs.</source>
          <target state="translated">ファイルが存在しない場合は作成されます。存在する場合は、以前の内容が上書きされます。成功した場合は &lt;code&gt;:ok&lt;/code&gt; を返し、エラーが発生した場合は &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="d594748254e0bf9d6de08774efbf46885ccdc846" translate="yes" xml:space="preserve">
          <source>The file is created if it doesn't exist. Requires datetime in UTC (as returned by &lt;code&gt;:erlang.universaltime()&lt;/code&gt;) or an integer representing the POSIX timestamp (as returned by &lt;code&gt;System.os_time(:second)&lt;/code&gt;).</source>
          <target state="translated">ファイルが存在しない場合は作成されます。UTCでの日時（ &lt;code&gt;:erlang.universaltime()&lt;/code&gt; によって返される）またはPOSIXタイムスタンプを表す整数（ &lt;code&gt;System.os_time(:second)&lt;/code&gt; によって返される）が必要です。</target>
        </trans-unit>
        <trans-unit id="16e6a8d0dd5fc8fad11975b4cd8380cee1d272d3" translate="yes" xml:space="preserve">
          <source>The file is opened, given to the function as an argument and automatically closed after the function returns, regardless if there was an error when executing the function.</source>
          <target state="translated">関数の実行時にエラーがあったかどうかに関わらず、引数として関数に与えられたファイルがオープンされ、関数が戻ってきた後に自動的にクローズされます。</target>
        </trans-unit>
        <trans-unit id="7da78c24b03af92a331655b22affad9970828441" translate="yes" xml:space="preserve">
          <source>The file will be compiled in memory and executed, printing &amp;ldquo;3&amp;rdquo; as the result. No bytecode file will be created. In the following examples, we recommend you write your code into script files and execute them as shown above.</source>
          <target state="translated">ファイルはメモリにコンパイルされて実行され、結果として「3」が出力されます。バイトコードファイルは作成されません。次の例では、コードをスクリプトファイルに書き込み、上記のように実行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="163b392b3771b3d68e4cabd76e12f649d752ed1d" translate="yes" xml:space="preserve">
          <source>The final code for the application built in this guide is in &lt;a href=&quot;https://github.com/josevalim/kv_umbrella&quot;&gt;this repository&lt;/a&gt; and can be used as a reference.</source>
          <target state="translated">このガイドで作成されたアプリケーションの最終コードは&lt;a href=&quot;https://github.com/josevalim/kv_umbrella&quot;&gt;このリポジトリに&lt;/a&gt;あり、参照として使用できます。</target>
        </trans-unit>
        <trans-unit id="849e4d016851d364ddd912997469160b512c2434" translate="yes" xml:space="preserve">
          <source>The final module name will be &lt;code&gt;MyHelpers.Module&lt;/code&gt; and not &lt;code&gt;My.Module&lt;/code&gt;. With &lt;a href=&quot;#expand/2&quot;&gt;&lt;code&gt;Macro.expand/2&lt;/code&gt;&lt;/a&gt;, such aliases are taken into consideration. Local and remote macros are also expanded. We could rewrite our macro above to use this function as:</source>
          <target state="translated">最終的なモジュール名は、 &lt;code&gt;MyHelpers.Module&lt;/code&gt; なく &lt;code&gt;My.Module&lt;/code&gt; ます。&lt;a href=&quot;#expand/2&quot;&gt; &lt;code&gt;Macro.expand/2&lt;/code&gt; &lt;/a&gt;は、そのようなエイリアスが考慮されています。ローカルマクロとリモートマクロも展開されます。上記のマクロを書き直して、この関数を次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="eeed0a9446d454784748ae3c92f5f970ae5e8749" translate="yes" xml:space="preserve">
          <source>The final module name will be &lt;code&gt;MyHelpers.Module&lt;/code&gt; and not &lt;code&gt;My.Module&lt;/code&gt;. With &lt;a href=&quot;macro#expand/2&quot;&gt;&lt;code&gt;Macro.expand/2&lt;/code&gt;&lt;/a&gt;, such aliases are taken into consideration. Local and remote macros are also expanded. We could rewrite our macro above to use this function as:</source>
          <target state="translated">最終的なモジュール名は &lt;code&gt;MyHelpers.Module&lt;/code&gt; であり、My.Moduleではありませ &lt;code&gt;My.Module&lt;/code&gt; 。&lt;a href=&quot;macro#expand/2&quot;&gt; &lt;code&gt;Macro.expand/2&lt;/code&gt; &lt;/a&gt;は、そのようなエイリアスが考慮されています。ローカルマクロとリモートマクロも拡張されています。上記のマクロを書き換えて、この関数を次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="c94b7aa6c8d6098097b882564487315e75f42062" translate="yes" xml:space="preserve">
          <source>The first argument given to &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;init/2&lt;/code&gt;&lt;/a&gt; is a list of child specifications as defined in the &quot;child_spec/1&quot; section above.</source>
          <target state="translated">&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#init/2&quot;&gt; &lt;code&gt;init/2&lt;/code&gt; に&lt;/a&gt;与えられる最初の引数は、上記の「child_spec / 1」セクションで定義された子仕様のリストです。</target>
        </trans-unit>
        <trans-unit id="13a0df9187b50523011cbb4505688a72e2b67377" translate="yes" xml:space="preserve">
          <source>The first argument is the application name. The second argument &lt;code&gt;key_or_path&lt;/code&gt; is either an atom key or a path to traverse in search of the configuration, starting with an atom key.</source>
          <target state="translated">最初の引数はアプリケーション名です。2番目の引数 &lt;code&gt;key_or_path&lt;/code&gt; は、アトムキー、またはアトムキーで始まる構成を検索するためにトラバースするパスのいずれかです。</target>
        </trans-unit>
        <trans-unit id="3bd0d4cfc55b69d9253066edc78349e5a5f0a43e" translate="yes" xml:space="preserve">
          <source>The first clause above will only match when &lt;code&gt;x&lt;/code&gt; is positive.</source>
          <target state="translated">上記の最初の句は、 &lt;code&gt;x&lt;/code&gt; が正の場合にのみ一致します。</target>
        </trans-unit>
        <trans-unit id="eb035f0f30f88032dbb2e6101c25284087903853" translate="yes" xml:space="preserve">
          <source>The first clause has a guard which says &amp;ldquo;use this definition if and only if &lt;code&gt;n&lt;/code&gt; is less than or equal to &lt;code&gt;1&lt;/code&gt;&amp;rdquo;. Since this is not the case, Elixir proceeds to the next clause&amp;rsquo;s definition.</source>
          <target state="translated">最初の節には、「 &lt;code&gt;n&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; 以下の場合にのみこの定義を使用する」というガードがあります。そうではないので、エリクサーは次の条項の定義に進みます。</target>
        </trans-unit>
        <trans-unit id="89e50c2ad64d1cb084a88caace5a204ed21c004f" translate="yes" xml:space="preserve">
          <source>The first column is the version the feature was hard deprecated. The second column shortly describes the deprecated feature and the third column explains the replacement and from which the version the replacement is available from.</source>
          <target state="translated">最初の列は、その機能が非推奨となったバージョンです。2番目の列は非推奨となった機能を簡潔に説明し、3番目の列は代替品とその代替品がどのバージョンから利用できるかを説明します。</target>
        </trans-unit>
        <trans-unit id="090b48aa7b27ba7aabd1d7a17461511059a79e62" translate="yes" xml:space="preserve">
          <source>The first element is always dropped, unless &lt;code&gt;nth&lt;/code&gt; is 0.</source>
          <target state="translated">&lt;code&gt;nth&lt;/code&gt; が0 でない限り、最初の要素は常に削除されます。</target>
        </trans-unit>
        <trans-unit id="f10968f84672fced5f1e4ec8ec8d8d3398ac17ef" translate="yes" xml:space="preserve">
          <source>The first element is always included, unless &lt;code&gt;nth&lt;/code&gt; is 0.</source>
          <target state="translated">&lt;code&gt;nth&lt;/code&gt; が0 でない限り、最初の要素は常に含まれます。</target>
        </trans-unit>
        <trans-unit id="d62944a019ad040d05e692b397bd4389633cb416" translate="yes" xml:space="preserve">
          <source>The first element is always passed to the given function, unless &lt;code&gt;nth&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nth&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; でない限り、最初の要素は常に指定された関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="6d3d07fd30dfdee5089f7add816955448e8a7e62" translate="yes" xml:space="preserve">
          <source>The first element is always passed to the given function.</source>
          <target state="translated">最初の要素は常に与えられた関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="a20362c2ee76acf3525cfe072360096fe727a0f9" translate="yes" xml:space="preserve">
          <source>The first element is an atom or another tuple in the same representation;</source>
          <target state="translated">最初の要素は、同じ表現の原子または別のタプルである。</target>
        </trans-unit>
        <trans-unit id="de5cd0ed2836b580d20a53b60b89fdbc3744b2af" translate="yes" xml:space="preserve">
          <source>The first element is the function name, the second is a keyword list containing metadata and the third is the arguments list.</source>
          <target state="translated">最初の要素は関数名、2番目はメタデータを含むキーワードリスト、3番目は引数リストです。</target>
        </trans-unit>
        <trans-unit id="8b93358d99cbfe2c9b65df07674bef6d363d42e0" translate="yes" xml:space="preserve">
          <source>The first element of the &lt;code&gt;enumerable&lt;/code&gt; is used as the initial value of the accumulator. Then the function is invoked with the next element and the accumulator. The result returned by the function is used as the accumulator for the next iteration, recursively. When the &lt;code&gt;enumerable&lt;/code&gt; is done, the last accumulator is returned.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の最初の要素は、アキュムレータの初期値として使用されます。次に、次の要素とアキュムレータを使用して関数が呼び出されます。関数によって返された結果は、次の反復のアキュムレータとして再帰的に使用されます。ときに &lt;code&gt;enumerable&lt;/code&gt; 行われ、最後のアキュムレータが返されます。</target>
        </trans-unit>
        <trans-unit id="ff5ed72f8d68d33e831fb03d181cb08f9312e39a" translate="yes" xml:space="preserve">
          <source>The first element of the tuple is always an atom or another tuple in the same representation.</source>
          <target state="translated">タプルの最初の要素は、常に原子または同じ表現の別のタプルである。</target>
        </trans-unit>
        <trans-unit id="3622c3705870af3b02b55f90fe91c49c65360502" translate="yes" xml:space="preserve">
          <source>The first element of these tuples is known as the &lt;em&gt;key&lt;/em&gt;, and it must be an atom. The second element, known as the &lt;em&gt;value&lt;/em&gt;, can be any term.</source>
          <target state="translated">これらのタプルの最初の要素は&lt;em&gt;キー&lt;/em&gt;と呼ばれ、アトムである必要があります。&lt;em&gt;値&lt;/em&gt;として知られる2番目の要素は、任意の項にすることができます。</target>
        </trans-unit>
        <trans-unit id="753965fc9c8c958c1adc18030905ea9a9fce1c71" translate="yes" xml:space="preserve">
          <source>The first function blocks the agent. The second function copies all the state to the client and then executes the operation in the client. One aspect to consider is whether the data is large enough to require processing in the server, at least initially, or small enough to be sent to the client cheaply. Another factor is whether the data needs to be processed atomically: getting the state and calling &lt;code&gt;do_something_expensive(state)&lt;/code&gt; outside of the agent means that the agent's state can be updated in the meantime. This is specially important in case of updates as computing the new state in the client rather than in the server can lead to race conditions if multiple clients are trying to update the same state to different values.</source>
          <target state="translated">最初の関数はエージェントをブロックします。 2番目の関数は、すべての状態をクライアントにコピーしてから、クライアントで操作を実行します。考慮すべき1つの側面は、データがサーバーでの処理を必要とするのに十分な大きさであるか、少なくとも最初はクライアントに安価に送信されるのに十分小さいかです。もう1つの要因は、データをアトミックに処理する必要があるかどうかです。状態を取得し、エージェントの外部で &lt;code&gt;do_something_expensive(state)&lt;/code&gt; を呼び出すと、その間にエージェントの状態を更新できます。複数のクライアントが同じ状態を異なる値に更新しようとすると、サーバーではなくクライアントで新しい状態を計算すると競合状態が発生する可能性があるため、これは更新の場合に特に重要です。</target>
        </trans-unit>
        <trans-unit id="3a8bdc0ad5ea0cf6a739758090fdb5a2d0573fc4" translate="yes" xml:space="preserve">
          <source>The first function is &lt;code&gt;start_link/1&lt;/code&gt;, which starts a new GenServer passing a list of options. &lt;code&gt;start_link/1&lt;/code&gt; calls out to &lt;code&gt;GenServer.start_link/3&lt;/code&gt;, which takes three arguments:</source>
          <target state="translated">最初の関数は &lt;code&gt;start_link/1&lt;/code&gt; で、オプションのリストを渡して新しいGenServerを起動します。 &lt;code&gt;start_link/1&lt;/code&gt; は、3つの引数を取る &lt;code&gt;GenServer.start_link/3&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6da90265feaa08cdbd5c291c792941296efaf6fb" translate="yes" xml:space="preserve">
          <source>The first is the &lt;code&gt;init/1&lt;/code&gt; callback, that receives the second argument given to &lt;code&gt;GenServer.start_link/3&lt;/code&gt; and returns &lt;code&gt;{:ok, state}&lt;/code&gt;, where state is a new map. We can already notice how the &lt;code&gt;GenServer&lt;/code&gt; API makes the client/server segregation more apparent. &lt;code&gt;start_link/3&lt;/code&gt; happens in the client, while &lt;code&gt;init/1&lt;/code&gt; is the respective callback that runs on the server.</source>
          <target state="translated">1つ目は &lt;code&gt;init/1&lt;/code&gt; コールバックで、 &lt;code&gt;GenServer.start_link/3&lt;/code&gt; に指定された2つ目の引数を受け取り、 &lt;code&gt;{:ok, state}&lt;/code&gt; を返します。ここで、stateは新しいマップです。 &lt;code&gt;GenServer&lt;/code&gt; APIがどのようにクライアント/サーバーの分離をより明確にするかについてはすでに気づいています。 &lt;code&gt;start_link/3&lt;/code&gt; はクライアントで発生し、 &lt;code&gt;init/1&lt;/code&gt; はサーバーで実行されるそれぞれのコールバックです。</target>
        </trans-unit>
        <trans-unit id="6abd6bfc1ce31ae2f7f3cf73ef51afa902c3df53" translate="yes" xml:space="preserve">
          <source>The first is to rely on the fact that doctest can compare internal structures as long as they are at the root. So one could write:</source>
          <target state="translated">第一は、doctestがルートにある限り、内部構造を比較することができるという事実に依存しています。だから1つは書くことができます。</target>
        </trans-unit>
        <trans-unit id="56525212a2d836e7b2e6c9fc3d438debd74b1ce4" translate="yes" xml:space="preserve">
          <source>The first occurrence of each element is kept.</source>
          <target state="translated">各要素の最初の出現が保持されます。</target>
        </trans-unit>
        <trans-unit id="6fdbbd4ad4f56c5f2d4b83c9b51836d3c3baff1c" translate="yes" xml:space="preserve">
          <source>The first one is related to operator precedence. For example, the following expression:</source>
          <target state="translated">最初のものは、演算子の優先順位に関係しています。例えば、次のような式です。</target>
        </trans-unit>
        <trans-unit id="eb6432ba2d593bb02b187beac0081aecf4153a10" translate="yes" xml:space="preserve">
          <source>The first one is that the code is truly evaluated and not compiled. This means that any benchmarking done in the shell is going to have skewed results. So never run any profiling nor benchmarks in the shell.</source>
          <target state="translated">第一に、コードが真に評価され、コンパイルされないということです。これは、シェルで行われるどんなベンチマークでも結果が偏ってしまうことを意味します。ですから、シェルでプロファイリングやベンチマークを実行してはいけません。</target>
        </trans-unit>
        <trans-unit id="9aa7af0b736df8170b447c11a0b1486409c8447e" translate="yes" xml:space="preserve">
          <source>The first one is with &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/0&quot;&gt;&lt;code&gt;IEx.pry/0&lt;/code&gt;&lt;/a&gt; which we can use instead of &lt;code&gt;IO.inspect binding()&lt;/code&gt;:</source>
          <target state="translated">最初のものは、 &lt;code&gt;IO.inspect binding()&lt;/code&gt; の代わりに使用できる&lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/0&quot;&gt; &lt;code&gt;IEx.pry/0&lt;/code&gt; &lt;/a&gt;を使用しています。</target>
        </trans-unit>
        <trans-unit id="cece2699937857700a6e57ae7a8e2fdab1620e09" translate="yes" xml:space="preserve">
          <source>The first part, the match pattern, must be a tuple that will match the structure of the the data stored in the registry, which is &lt;code&gt;{key, pid, value}&lt;/code&gt;. The atom &lt;code&gt;:_&lt;/code&gt; can be used to ignore a given value or tuple element, while the atom &lt;code&gt;:&quot;$1&quot;&lt;/code&gt; can be used to temporarily assign part of pattern to a variable for a subsequent comparison. This can be combined like &lt;code&gt;{:&quot;$1&quot;, :_, :_}&lt;/code&gt;.</source>
          <target state="translated">最初の部分である一致パターンは、レジストリに格納されているデータの構造と一致するタプルである必要があります。つまり、 &lt;code&gt;{key, pid, value}&lt;/code&gt; です。アトム &lt;code&gt;:_&lt;/code&gt; は、特定の値またはタプル要素を無視するために使用でき、アトム &lt;code&gt;:&quot;$1&quot;&lt;/code&gt; は、後続の比較のために、パターンの一部を変数に一時的に割り当てるために使用できます。これは &lt;code&gt;{:&quot;$1&quot;, :_, :_}&lt;/code&gt; ように組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="33bf9cc2d09af8093ef73164f4425101ddcff356" translate="yes" xml:space="preserve">
          <source>The first row (Total) is the sum of all function calls. In the last row the number of matching functions that were considered for profiling is presented.</source>
          <target state="translated">最初の行(合計)は、すべての関数呼び出しの合計です。最後の行には、プロファイリングのために考慮されたマッチング関数の数が表示されます。</target>
        </trans-unit>
        <trans-unit id="c85192b0b88529b2ffa5c7dc5ed794fb80bfa927" translate="yes" xml:space="preserve">
          <source>The first row (Total) is the sum of all functions executed in all profiled processes. For the given output, we had a total of 200279 function calls and spent about 2 seconds running the code.</source>
          <target state="translated">最初の行(合計)は、すべてのプロファイル化されたプロセスで実行されたすべての関数の合計です。与えられた出力では、合計200279回の関数呼び出しがあり、コードの実行に約2秒を費やしました。</target>
        </trans-unit>
        <trans-unit id="7cd60f6007c291382d0b163734079218de4d7d65" translate="yes" xml:space="preserve">
          <source>The first step in our implementation is to call &lt;code&gt;use Agent&lt;/code&gt;.</source>
          <target state="translated">実装の最初のステップは、 &lt;code&gt;use Agent&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="868cc4dcae35b14912938b182f9884b2f9e36c22" translate="yes" xml:space="preserve">
          <source>The first step is to tell our application definition (i.e. our &lt;code&gt;.app&lt;/code&gt; file) which module is going to implement the application callback. Let&amp;rsquo;s do so by opening &lt;code&gt;mix.exs&lt;/code&gt; and changing &lt;code&gt;def application&lt;/code&gt; to the following:</source>
          <target state="translated">最初のステップは、アプリケーションコールバックを実装するモジュールをアプリケーション定義（つまり、 &lt;code&gt;.app&lt;/code&gt; ファイル）に通知することです。これを行うには、 &lt;code&gt;mix.exs&lt;/code&gt; を開き、 &lt;code&gt;def application&lt;/code&gt; を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="b1db7f18a01e941b219c679437813ff0c63b86ff" translate="yes" xml:space="preserve">
          <source>The first step to do so is to add a &lt;code&gt;:mod&lt;/code&gt; key to the &lt;code&gt;application/0&lt;/code&gt; definition in your &lt;code&gt;mix.exs&lt;/code&gt; file. It expects a tuple, with the application callback module and start argument (commonly an empty list):</source>
          <target state="translated">そのための最初のステップは、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルの &lt;code&gt;application/0&lt;/code&gt; 定義に &lt;code&gt;:mod&lt;/code&gt; キーを追加することです。これは、アプリケーションコールバックモジュールと開始引数（通常は空のリスト）を持つタプルを想定しています。</target>
        </trans-unit>
        <trans-unit id="08b35c8002543aef4eef62b9715905dd1c3e096e" translate="yes" xml:space="preserve">
          <source>The first test invokes &lt;code&gt;Kernel.node/0&lt;/code&gt;, which returns the name of the current node, based on the bucket names &amp;ldquo;hello&amp;rdquo; and &amp;ldquo;world&amp;rdquo;. According to our routing table so far, we should get &lt;code&gt;foo@computer-name&lt;/code&gt; and &lt;code&gt;bar@computer-name&lt;/code&gt; as responses, respectively.</source>
          <target state="translated">最初のテストでは、「hello」と「world」というバケット名に基づいて、現在のノードの名前を返す &lt;code&gt;Kernel.node/0&lt;/code&gt; を呼び出します。これまでのルーティングテーブルによると、応答としてそれぞれ &lt;code&gt;foo@computer-name&lt;/code&gt; と &lt;code&gt;bar@computer-name&lt;/code&gt; を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="aac5f450f7a22287bfbd1ca580bfb413b84283d5" translate="yes" xml:space="preserve">
          <source>The first time this task is run with &lt;code&gt;--stale&lt;/code&gt;, all tests are run and a manifest is generated. On subsequent runs, a test file is marked &quot;stale&quot; if any modules it references (and any modules those modules reference, recursively) were modified since the last run with &lt;code&gt;--stale&lt;/code&gt;. A test file is also marked &quot;stale&quot; if it has been changed since the last run with &lt;code&gt;--stale&lt;/code&gt;.</source>
          <target state="translated">このタスクを &lt;code&gt;--stale&lt;/code&gt; で初めて実行すると、すべてのテストが実行され、マニフェストが生成されます。後続の実行では、テストファイルが参照するモジュール（およびそれらのモジュールが再帰的に参照するモジュール）が &lt;code&gt;--stale&lt;/code&gt; を使用した最後の実行以降に変更された場合、テストファイルは「古い」とマークされます。 &lt;code&gt;--stale&lt;/code&gt; を使用して最後に実行してからテストファイルが変更されている場合も、テストファイルは &quot;stale&quot;とマークされます。</target>
        </trans-unit>
        <trans-unit id="295fb12141f4c89eb596a5dac17f4949547acbec" translate="yes" xml:space="preserve">
          <source>The following attributes are part of typespecs and are also built-in in Elixir:</source>
          <target state="translated">以下の属性はtypespecsの一部であり、Elixirにも組み込まれています。</target>
        </trans-unit>
        <trans-unit id="7ddb17433dfdb141914290560e8f56274113cff7" translate="yes" xml:space="preserve">
          <source>The following behaviour applies if &lt;code&gt;reason&lt;/code&gt; is any term except &lt;code&gt;:normal&lt;/code&gt; or &lt;code&gt;:kill&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; が &lt;code&gt;:normal&lt;/code&gt; または &lt;code&gt;:kill&lt;/code&gt; 以外の用語である場合、次の動作が適用されます。</target>
        </trans-unit>
        <trans-unit id="7cc6a385de289ddbe867800f5a4d45eaf506d87a" translate="yes" xml:space="preserve">
          <source>The following code is clearer:</source>
          <target state="translated">以下のコードの方がわかりやすいです。</target>
        </trans-unit>
        <trans-unit id="bd520f433c3d9627651ec8f3c46e49f2f0b40321" translate="yes" xml:space="preserve">
          <source>The following commands are supported by &lt;code&gt;bin/RELEASE_NAME&lt;/code&gt;:</source>
          <target state="translated">以下のコマンドは、 &lt;code&gt;bin/RELEASE_NAME&lt;/code&gt; でサポートされています。</target>
        </trans-unit>
        <trans-unit id="ab6fa07c7c4a4b08ed5ab5840982521232d9dc60" translate="yes" xml:space="preserve">
          <source>The following configuration applies to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;'s wrapper around Erlang's logging functionalities. All the configurations below must be set before the &lt;code&gt;:logger&lt;/code&gt; application starts.</source>
          <target state="translated">次の構成は、Erlangのロギング機能に関する&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;のラッパーに適用されます。以下のすべての構成は、 &lt;code&gt;:logger&lt;/code&gt; アプリケーションを開始する前に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2b59ddac9c85343e9c0315f555148e29de15b834" translate="yes" xml:space="preserve">
          <source>The following configuration must be set via config files (such as &lt;code&gt;config/config.exs&lt;/code&gt;) before the &lt;code&gt;:logger&lt;/code&gt; application is started.</source>
          <target state="translated">&lt;code&gt;:logger&lt;/code&gt; アプリケーションを開始する前に、次の構成を構成ファイル（ &lt;code&gt;config/config.exs&lt;/code&gt; など）で設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7468ef5075d9f1bb00ad4478b84201c0051a39d2" translate="yes" xml:space="preserve">
          <source>The following configurations apply only for Erlang/OTP 20 and earlier:</source>
          <target state="translated">以下の設定は Erlang/OTP 20 以前のものにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="5bee2fb68242ae2a980fb37c51c72ff07363e60a" translate="yes" xml:space="preserve">
          <source>The following contents are expanded:</source>
          <target state="translated">以下の内容を展開しています。</target>
        </trans-unit>
        <trans-unit id="184db633c0e9a1d1d50d51efc796a68bbb36b312" translate="yes" xml:space="preserve">
          <source>The following document has 10 bytes and therefore it does not format to width 9 without breaks:</source>
          <target state="translated">以下の文書は10バイトなので、改行なしでは幅9にフォーマットされません。</target>
        </trans-unit>
        <trans-unit id="de1fd9b941b49b602c0ebc3107ff23bc87d50045" translate="yes" xml:space="preserve">
          <source>The following escape codes can be used in strings and char lists:</source>
          <target state="translated">文字列や文字列リストでは、以下のエスケープコードを使用することができます。</target>
        </trans-unit>
        <trans-unit id="7c26c5de3e4e7cd245868d8c611a09003ff421aa" translate="yes" xml:space="preserve">
          <source>The following events are possible:</source>
          <target state="translated">以下のようなイベントが考えられます。</target>
        </trans-unit>
        <trans-unit id="d46d9ba3da9322ecdf037e20b892895d0db04656" translate="yes" xml:space="preserve">
          <source>The following fields are available:</source>
          <target state="translated">以下のようなフィールドが用意されています。</target>
        </trans-unit>
        <trans-unit id="7293829d505cc3a0054aa1a59ac73bad4f509dae" translate="yes" xml:space="preserve">
          <source>The following fields are deprecated and must not be accessed or relied on:</source>
          <target state="translated">以下のフィールドは非推奨であり、アクセスしたり依存したりすることはできません。</target>
        </trans-unit>
        <trans-unit id="8e9526796f05e114fb24325e062cf85e1db31da0" translate="yes" xml:space="preserve">
          <source>The following fields are private to Elixir's macro expansion mechanism and must not be accessed directly:</source>
          <target state="translated">以下のフィールドは、Elixirのマクロ展開機構のプライベートなものであり、直接アクセスしてはいけません。</target>
        </trans-unit>
        <trans-unit id="30c2e9695ce3105ad651330d3b52e46b3a324658" translate="yes" xml:space="preserve">
          <source>The following fields are public:</source>
          <target state="translated">以下のフィールドは公開されています。</target>
        </trans-unit>
        <trans-unit id="4144d492a1a8552ba49119bd2fcd0fd26179f7b6" translate="yes" xml:space="preserve">
          <source>The following fields may be modified as long as they keep their defined types:</source>
          <target state="translated">以下のフィールドは、定義された型を保持している限り、変更することができます。</target>
        </trans-unit>
        <trans-unit id="ecaaab8e8eae9b4df4d22551bafa8feaa1ec9420" translate="yes" xml:space="preserve">
          <source>The following fields pertain to variable handling and must not be accessed or relied on. To get a list of all variables, see &lt;a href=&quot;#vars/1&quot;&gt;&lt;code&gt;vars/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次のフィールドは変数の処理に関連しているため、アクセスしたり依存したりすることはできません。すべての変数のリストを取得するには、&lt;a href=&quot;#vars/1&quot;&gt; &lt;code&gt;vars/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8fcb5815c5a0952c38de454edd61e7d1f142d6d" translate="yes" xml:space="preserve">
          <source>The following is a list of all operators that Elixir is capable of parsing, ordered from higher to lower precedence, alongside their associativity:</source>
          <target state="translated">以下は、Elixir が解析できるすべての演算子のリストです。</target>
        </trans-unit>
        <trans-unit id="9104e819567333a6da0e8ce2dab5b947458c30fd" translate="yes" xml:space="preserve">
          <source>The following is a table of all the operators that Elixir is capable of parsing, but that are not used by default:</source>
          <target state="translated">以下は、Elixirが解析できるが、デフォルトでは使用されていない演算子の一覧です。</target>
        </trans-unit>
        <trans-unit id="0ba751c3adfd8a7fc2856a1dbf3e62fbc4ec76f2" translate="yes" xml:space="preserve">
          <source>The following keys are optional:</source>
          <target state="translated">以下のキーはオプションです。</target>
        </trans-unit>
        <trans-unit id="7b884b576e7fc0feccc202abb8a4a3d2fbce2d97" translate="yes" xml:space="preserve">
          <source>The following keys are returned:</source>
          <target state="translated">以下のキーが返されます。</target>
        </trans-unit>
        <trans-unit id="bf2cdc4ebfa3f4a0590ef2625ba82e196ae8c2a8" translate="yes" xml:space="preserve">
          <source>The following literals are also supported in typespecs:</source>
          <target state="translated">以下のリテラルもtypepecsでサポートされています。</target>
        </trans-unit>
        <trans-unit id="b914b4fb7bd70067053e9e95983328f16ab1fd00" translate="yes" xml:space="preserve">
          <source>The following macros are generated:</source>
          <target state="translated">以下のマクロが生成されます。</target>
        </trans-unit>
        <trans-unit id="8b11c8558e4b5ede506774a8ccaf530f1714eee7" translate="yes" xml:space="preserve">
          <source>The following metadata keys are enabled by &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#string_to_quoted/2&quot;&gt;&lt;code&gt;Code.string_to_quoted/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次のメタデータキーは、&lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#string_to_quoted/2&quot;&gt; &lt;code&gt;Code.string_to_quoted/2&lt;/code&gt; &lt;/a&gt;によって有効になります。</target>
        </trans-unit>
        <trans-unit id="73eaa1cbb3b18d9fd1ab6f109e8770b921b255f4" translate="yes" xml:space="preserve">
          <source>The following metadata keys are private:</source>
          <target state="translated">以下のメタデータキーは非公開です。</target>
        </trans-unit>
        <trans-unit id="a19a723fcc38df91c7efce744ef29817327ec398" translate="yes" xml:space="preserve">
          <source>The following metadata keys are public:</source>
          <target state="translated">以下のメタデータキーは公開されています。</target>
        </trans-unit>
        <trans-unit id="d3a2d7253e70d0b7ab68844ea930f5d415637299" translate="yes" xml:space="preserve">
          <source>The following modules build on top of processes to provide concurrency, fault-tolerance, and more.</source>
          <target state="translated">以下のモジュールは、プロセスの上に構築され、同時実行性、フォールトトレランスなどを提供します。</target>
        </trans-unit>
        <trans-unit id="b4f887b33e0c44ae6b51e81b5ab7bc56ab3d3fc4" translate="yes" xml:space="preserve">
          <source>The following modules handle Elixir built-in data types:</source>
          <target state="translated">以下のモジュールは、Elixirの組み込みデータ型を扱います。</target>
        </trans-unit>
        <trans-unit id="16b7215fb9d992fc605683d883c23ca3932275a5" translate="yes" xml:space="preserve">
          <source>The following names are reserved and cannot be assigned to processes nor ports:</source>
          <target state="translated">以下の名前は予約されており、プロセスやポートに割り当てることはできません。</target>
        </trans-unit>
        <trans-unit id="5b3878c8ab3dccd7e89f167b65de39bd2f92844f" translate="yes" xml:space="preserve">
          <source>The following operators are used by the &lt;a href=&quot;bitwise&quot;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt; module when imported: &lt;a href=&quot;bitwise#&amp;amp;&amp;amp;&amp;amp;/2&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bitwise#%255E%255E%255E/2&quot;&gt;&lt;code&gt;^^^&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bitwise#%253C%253C%253C/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bitwise#%253E%253E%253E/2&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bitwise#%257C%257C%257C/2&quot;&gt;&lt;code&gt;|||&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bitwise#~~~/1&quot;&gt;&lt;code&gt;~~~&lt;/code&gt;&lt;/a&gt;. See the documentation for &lt;a href=&quot;bitwise&quot;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">以下の演算子はによって使用される&lt;a href=&quot;bitwise&quot;&gt; &lt;code&gt;Bitwise&lt;/code&gt; &lt;/a&gt;インポートするときモジュール：&lt;a href=&quot;bitwise#&amp;amp;&amp;amp;&amp;amp;/2&quot;&gt; &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;bitwise#%255E%255E%255E/2&quot;&gt; &lt;code&gt;^^^&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;bitwise#%253C%253C%253C/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;bitwise#%253E%253E%253E/2&quot;&gt; &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;bitwise#%257C%257C%257C/2&quot;&gt; &lt;code&gt;|||&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;bitwise#~~~/1&quot;&gt; &lt;code&gt;~~~&lt;/code&gt; &lt;/a&gt;。詳細については、&lt;a href=&quot;bitwise&quot;&gt; &lt;code&gt;Bitwise&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="178f615607801ccb48b704fc1947669dd0349eaf" translate="yes" xml:space="preserve">
          <source>The following operators are used by the &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html&quot;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt; module when imported: &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#&amp;amp;&amp;amp;&amp;amp;/2&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%5E%5E%5E/2&quot;&gt;&lt;code&gt;^^^&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%3C%3C%3C/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%3E%3E%3E/2&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%7C%7C%7C/2&quot;&gt;&lt;code&gt;|||&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#~~~/1&quot;&gt;&lt;code&gt;~~~&lt;/code&gt;&lt;/a&gt;. See the documentation for &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html&quot;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">次の演算子は、インポート時に&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html&quot;&gt; &lt;code&gt;Bitwise&lt;/code&gt; &lt;/a&gt;モジュールによって使用されます：&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#&amp;amp;&amp;amp;&amp;amp;/2&quot;&gt; &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%5E%5E%5E/2&quot;&gt; &lt;code&gt;^^^&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%3C%3C%3C/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%3E%3E%3E/2&quot;&gt; &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#%7C%7C%7C/2&quot;&gt; &lt;code&gt;|||&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html#~~~/1&quot;&gt; &lt;code&gt;~~~&lt;/code&gt; &lt;/a&gt;。詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html&quot;&gt; &lt;code&gt;Bitwise&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="77f3895c41618839ee5e26a20028be3be4ec2b1d" translate="yes" xml:space="preserve">
          <source>The following option must be specified in your &lt;code&gt;mix.exs&lt;/code&gt; under &lt;code&gt;:escript&lt;/code&gt; key:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;:escript&lt;/code&gt; &lt;code&gt;mix.exs&lt;/code&gt; キーの下のmix.exsで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf3f75fb4a0fa1361326143ff900caf814328a06" translate="yes" xml:space="preserve">
          <source>The following option must be specified in your &lt;code&gt;mix.exs&lt;/code&gt; under the &lt;code&gt;:escript&lt;/code&gt; key:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;mix.exs&lt;/code&gt; の &lt;code&gt;:escript&lt;/code&gt; escriptキーで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e4d77afab2cb5c0e79177397fed4c21c74e5e9f3" translate="yes" xml:space="preserve">
          <source>The following options are accepted:</source>
          <target state="translated">以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="translated">以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="5d2ba16817e078ffdf67dfcad431c49900869b20" translate="yes" xml:space="preserve">
          <source>The following options can be set inside your &lt;code&gt;mix.exs&lt;/code&gt; on each release definition:</source>
          <target state="translated">次のオプションは、各リリース定義の &lt;code&gt;mix.exs&lt;/code&gt; 内で設定できます。</target>
        </trans-unit>
        <trans-unit id="3e0b1eaa4142d08cf206798562baf46888ee1a50" translate="yes" xml:space="preserve">
          <source>The following options can be set inside your releases key in your &lt;code&gt;mix.exs&lt;/code&gt; to control how config providers work:</source>
          <target state="translated">以下のオプションを &lt;code&gt;mix.exs&lt;/code&gt; のリリースキー内に設定して、構成プロバイダーの動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="a63388a7d9c69cb081c0bd25c0b348227ea8b98e" translate="yes" xml:space="preserve">
          <source>The following restart values are supported in the &lt;code&gt;:restart&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;:restart&lt;/code&gt; オプションでは、次の再起動値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="e3bfac8b769dcde18c31230db7c8155e1610b73f" translate="yes" xml:space="preserve">
          <source>The following sets up a breakpoint on &lt;a href=&quot;https://hexdocs.pm/elixir/URI.html#decode_query/2&quot;&gt;&lt;code&gt;URI.decode_query/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">以下は、&lt;a href=&quot;https://hexdocs.pm/elixir/URI.html#decode_query/2&quot;&gt; &lt;code&gt;URI.decode_query/2&lt;/code&gt; に&lt;/a&gt;ブレークポイントを設定します。</target>
        </trans-unit>
        <trans-unit id="af7f88d381759e98fbd8a59a2974fdc1427bfa5a" translate="yes" xml:space="preserve">
          <source>The following shutdown values are supported in the &lt;code&gt;:shutdown&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;:shutdown&lt;/code&gt; オプションでは、次のシャットダウン値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="62c95490240e6721731c2a4166fbf474d701eaa5" translate="yes" xml:space="preserve">
          <source>The following switches take one argument:</source>
          <target state="translated">以下のスイッチは1つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="09182b59468032ac91eb3e19cfac73cd63919777" translate="yes" xml:space="preserve">
          <source>The following switches types take no arguments:</source>
          <target state="translated">以下のスイッチタイプは引数を取りません。</target>
        </trans-unit>
        <trans-unit id="656560aa5a4b69ea097162499366d646d82b57a2" translate="yes" xml:space="preserve">
          <source>The following tags are set automatically by ExUnit and are therefore reserved:</source>
          <target state="translated">以下のタグは、ExUnit が自動的に設定しているので予約されています。</target>
        </trans-unit>
        <trans-unit id="5fc9716a622a264a8eff71eefa013048286d3378" translate="yes" xml:space="preserve">
          <source>The following tags customize how tests behave:</source>
          <target state="translated">以下のタグはテストの動作をカスタマイズします。</target>
        </trans-unit>
        <trans-unit id="f3f1a1a3a62e3160fd586f6ee95d4fab3af95423" translate="yes" xml:space="preserve">
          <source>The following tasks are automatically reenabled: &lt;a href=&quot;mix.tasks.cmd&quot;&gt;&lt;code&gt;mix cmd&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mix.tasks.do&quot;&gt;&lt;code&gt;mix do&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mix.tasks.loadconfig&quot;&gt;&lt;code&gt;mix loadconfig&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mix.tasks.profile.cprof&quot;&gt;&lt;code&gt;mix profile.cprof&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mix.tasks.profile.eprof&quot;&gt;&lt;code&gt;mix profile.eprof&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mix.tasks.profile.fprof&quot;&gt;&lt;code&gt;mix profile.fprof&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mix.tasks.run&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;mix.tasks.xref&quot;&gt;&lt;code&gt;mix xref&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のタスクを自動的に再有効化されます：&lt;a href=&quot;mix.tasks.cmd&quot;&gt; &lt;code&gt;mix cmd&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;mix.tasks.do&quot;&gt; &lt;code&gt;mix do&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;mix.tasks.loadconfig&quot;&gt; &lt;code&gt;mix loadconfig&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;mix.tasks.profile.cprof&quot;&gt; &lt;code&gt;mix profile.cprof&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;mix.tasks.profile.eprof&quot;&gt; &lt;code&gt;mix profile.eprof&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;mix.tasks.profile.fprof&quot;&gt; &lt;code&gt;mix profile.fprof&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;mix.tasks.run&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;mix.tasks.xref&quot;&gt; &lt;code&gt;mix xref&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="94b02fa4807601cf95b13d7bfacf63de52daec08" translate="yes" xml:space="preserve">
          <source>The following types are also provided by Elixir as shortcuts on top of the basic and literal types described above.</source>
          <target state="translated">また、上記の基本型とリテラル型の上に、ショートカットとして以下の型がElixirによって提供されています。</target>
        </trans-unit>
        <trans-unit id="23128f3afb79fe9776e7ccf884ae9b5f280de2c5" translate="yes" xml:space="preserve">
          <source>The following values in the prompt string will be replaced appropriately:</source>
          <target state="translated">プロンプト文字列の以下の値は適切に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="55cd405f97f23c4fe92ae34e5fe7acfcdc9373f0" translate="yes" xml:space="preserve">
          <source>The following variables can be set before you invoke the release or inside &lt;code&gt;env.sh&lt;/code&gt; and &lt;code&gt;env.bat&lt;/code&gt;:</source>
          <target state="translated">次の変数は、リリースを呼び出す前、または &lt;code&gt;env.sh&lt;/code&gt; と &lt;code&gt;env.bat&lt;/code&gt; 内で設定できます。</target>
        </trans-unit>
        <trans-unit id="bd9e27e386ddec7a2956d45d1104ee9dcf8cf427" translate="yes" xml:space="preserve">
          <source>The following will answer with &lt;code&gt;&quot;Meg&quot;&lt;/code&gt; to the prompt &lt;code&gt;&quot;What's your name?&quot;&lt;/code&gt;:</source>
          <target state="translated">次のように入力すると、 &lt;code&gt;&quot;Meg&quot;&lt;/code&gt; が &lt;code&gt;&quot;What's your name?&quot;&lt;/code&gt; プロンプトに応答します。：</target>
        </trans-unit>
        <trans-unit id="d10907c83024affa6f13fdf8900f10947fef49e4" translate="yes" xml:space="preserve">
          <source>The format, metadata and colors can be configured with &lt;code&gt;:format&lt;/code&gt;, &lt;code&gt;:metadata&lt;/code&gt; and &lt;code&gt;:colors&lt;/code&gt; respectively. These three options defaults to the &lt;code&gt;:console&lt;/code&gt; backend configuration parameters.</source>
          <target state="translated">フォーマット、メタデータ、および色は、それぞれ &lt;code&gt;:format&lt;/code&gt; 、 &lt;code&gt;:metadata&lt;/code&gt; 、および &lt;code&gt;:colors&lt;/code&gt; で構成できます。これらの3つのオプションは、デフォルトで &lt;code&gt;:console&lt;/code&gt; バックエンド構成パラメーターになります。</target>
        </trans-unit>
        <trans-unit id="dc2e84198cf648d67efe0dc56f0a0d3f7a6c41f5" translate="yes" xml:space="preserve">
          <source>The formatter also extracts all trailing comments to their previous line. For example, the code below</source>
          <target state="translated">また、フォーマッタは、末尾にあるすべてのコメントを前の行に抽出します。例えば、以下のコードは</target>
        </trans-unit>
        <trans-unit id="f2dbb773aae103d1ac648bef9a245406adea93a6" translate="yes" xml:space="preserve">
          <source>The formatter also handles code comments in a way to guarantee a space is always added between the beginning of the comment (#) and the next character.</source>
          <target state="translated">また、フォーマッタはコードコメントを処理し、コメントの先頭 (#)と次の文字の間に常にスペースが追加されることを保証する方法で処理します。</target>
        </trans-unit>
        <trans-unit id="174a1bba642104242141e782016509d0a3307dd9" translate="yes" xml:space="preserve">
          <source>The formatter attempts to fit the most it can on a single line and introduces line breaks wherever possible when it cannot.</source>
          <target state="translated">フォーマッタは、1行にできる限りのフィットを試み、できない場合は可能な限り改行を導入します。</target>
        </trans-unit>
        <trans-unit id="db2d1c69ac2af0675a9fbaa3dbf3bb62be0f48e5" translate="yes" xml:space="preserve">
          <source>The formatter does not hard code names. The formatter will not behave specially because a function is named &lt;code&gt;defmodule&lt;/code&gt;, &lt;code&gt;def&lt;/code&gt;, etc. This principle mirrors Elixir's goal of being an extensible language where developers can extend the language with new constructs as if they were part of the language. When it is absolutely necessary to change behaviour based on the name, this behaviour should be configurable, such as the &lt;code&gt;:locals_without_parens&lt;/code&gt; option.</source>
          <target state="translated">フォーマッタは名前をハードコードしません。関数の名前は &lt;code&gt;defmodule&lt;/code&gt; 、 &lt;code&gt;def&lt;/code&gt; などであるため、フォーマッタは特別な動作をしません。この原則は、開発者が新しい構成要素を使って言語の一部であるかのように言語を拡張できる拡張可能な言語になるというElixirの目標を反映しています。名前に基づいて動作を変更することが絶対に必要な場合、この動作は、 &lt;code&gt;:locals_without_parens&lt;/code&gt; オプションなどのように構成可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4b2df21441dc79dd9bd7c2eac32664e6ea35e2a4" translate="yes" xml:space="preserve">
          <source>The formatter does not hard code names. The formatter will not behave specially because a function is named &lt;code&gt;defmodule&lt;/code&gt;, &lt;code&gt;def&lt;/code&gt;, or the like. This principle mirrors Elixir's goal of being an extensible language where developers can extend the language with new constructs as if they were part of the language. When it is absolutely necessary to change behaviour based on the name, this behaviour should be configurable, such as the &lt;code&gt;:locals_without_parens&lt;/code&gt; option.</source>
          <target state="translated">フォーマッターは名前をハードコードしません。関数の名前が &lt;code&gt;defmodule&lt;/code&gt; 、 &lt;code&gt;def&lt;/code&gt; などであるため、フォーマッタは特別に動作しません。この原則は、開発者が言語の一部であるかのように新しい構造で言語を拡張できる拡張可能な言語であるというElixirの目標を反映しています。名前に基づいて動作を変更することがどうしても必要な場合は、 &lt;code&gt;:locals_without_parens&lt;/code&gt; オプションなど、この動作を構成可能にする必要があります。</target>
        </trans-unit>
        <trans-unit id="03003fdc11feaf71c728ace4a4e8175ee7b4844f" translate="yes" xml:space="preserve">
          <source>The formatter receives a string representing Elixir code and returns iodata representing the formatted code according to pre-defined rules.</source>
          <target state="translated">フォーマッタは Elixir コードを表す文字列を受け取り、事前に定義されたルールに従ってフォーマットされたコードを表す iodata を返します。</target>
        </trans-unit>
        <trans-unit id="72e5baea79c2662552fd592f7668202474a199d4" translate="yes" xml:space="preserve">
          <source>The formatter respects the input format in some cases. Those are listed below:</source>
          <target state="translated">フォーマッタは、いくつかの場合には入力フォーマットを尊重します。それを以下に示します。</target>
        </trans-unit>
        <trans-unit id="73147abbfb07a1782272353b129dfe6ae2759140" translate="yes" xml:space="preserve">
          <source>The formatter was designed under three principles.</source>
          <target state="translated">フォーマッタは3つの原則に基づいて設計されました。</target>
        </trans-unit>
        <trans-unit id="d253cdad860fbe489673fba372b661892f2a2b1a" translate="yes" xml:space="preserve">
          <source>The formatter will also receive the following events but they are deprecated and should be ignored:</source>
          <target state="translated">フォーマッタは以下のイベントも受け取りますが、これらは非推奨なので無視してください。</target>
        </trans-unit>
        <trans-unit id="16faacc4637c873b1a6d5ef2df7c790ea5ae523a" translate="yes" xml:space="preserve">
          <source>The formatter will read a &lt;code&gt;.formatter.exs&lt;/code&gt; file in the current directory for formatter configuration. Evaluating this file should return a keyword list.</source>
          <target state="translated">フォーマッタは、フォーマッタ設定のために現在のディレクトリにある &lt;code&gt;.formatter.exs&lt;/code&gt; ファイルを読み取ります。このファイルを評価すると、キーワードリストが返されます。</target>
        </trans-unit>
        <trans-unit id="54861fc5081e64334a71df9d50b523e9ef441995" translate="yes" xml:space="preserve">
          <source>The formatter wraps the algebra document representing the map in &lt;a href=&quot;#next_break_fits/1&quot;&gt;&lt;code&gt;next_break_fits/1&lt;/code&gt;&lt;/a&gt; so the code is formatted as:</source>
          <target state="translated">フォーマッタは、マップを表す代数ドキュメントを&lt;a href=&quot;#next_break_fits/1&quot;&gt; &lt;code&gt;next_break_fits/1&lt;/code&gt; &lt;/a&gt;でラップするため、コードは次のようにフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="1b530c8de3f53b8e27706291f76c2c2287eac72b" translate="yes" xml:space="preserve">
          <source>The formatting syntax for strftime is a sequence of characters in the following format:</source>
          <target state="translated">strftimeの書式設定構文は、以下のような文字列です。</target>
        </trans-unit>
        <trans-unit id="95bd7646a64eb0576fcb230b316aeb1624812ca3" translate="yes" xml:space="preserve">
          <source>The foundation of Mix is a project. A project can be defined by using &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Project.html&quot;&gt;&lt;code&gt;Mix.Project&lt;/code&gt;&lt;/a&gt; in a module, usually placed in a file named &lt;code&gt;mix.exs&lt;/code&gt;:</source>
          <target state="translated">Mixの基盤はプロジェクトです。プロジェクトは、モジュールで&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Project.html&quot;&gt; &lt;code&gt;Mix.Project&lt;/code&gt; &lt;/a&gt;を使用して定義できます。通常、 &lt;code&gt;mix.exs&lt;/code&gt; という名前のファイルに配置されます。</target>
        </trans-unit>
        <trans-unit id="619bfcd8852612a615d36e293bdf93e9442a2fd9" translate="yes" xml:space="preserve">
          <source>The foundation of Mix is a project. A project can be defined by using &lt;a href=&quot;mix.project&quot;&gt;&lt;code&gt;Mix.Project&lt;/code&gt;&lt;/a&gt; in a module, usually placed in a file named &lt;code&gt;mix.exs&lt;/code&gt;:</source>
          <target state="translated">Mixの基礎はプロジェクトです。プロジェクトは、通常は &lt;code&gt;mix.exs&lt;/code&gt; という名前のファイルに配置されたモジュールで&lt;a href=&quot;mix.project&quot;&gt; &lt;code&gt;Mix.Project&lt;/code&gt; &lt;/a&gt;を使用して定義できます。</target>
        </trans-unit>
        <trans-unit id="7b28558869b4d11a344cb1f239f09303f041a1a0" translate="yes" xml:space="preserve">
          <source>The full ExUnit configuration is passed as the argument to &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:init/1&quot;&gt;&lt;code&gt;GenServer.init/1&lt;/code&gt;&lt;/a&gt; callback when the formatters are started. If you need to do runtime configuration of a formatter, you can add any configuration needed by using &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#start/1&quot;&gt;&lt;code&gt;ExUnit.start/1&lt;/code&gt;&lt;/a&gt;, and this will then be included in the options passed to the &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:init/1&quot;&gt;&lt;code&gt;GenServer.init/1&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">フォーマッターの起動時に、完全なExUnit構成が引数として&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:init/1&quot;&gt; &lt;code&gt;GenServer.init/1&lt;/code&gt; &lt;/a&gt;コールバックに渡されます。フォーマッターのランタイム構成を行う必要がある場合は、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#start/1&quot;&gt; &lt;code&gt;ExUnit.start/1&lt;/code&gt; &lt;/a&gt;を使用して必要な構成を追加できます。これは、&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html#c:init/1&quot;&gt; &lt;code&gt;GenServer.init/1&lt;/code&gt; &lt;/a&gt;コールバックに渡されるオプションに含まれます。</target>
        </trans-unit>
        <trans-unit id="27f8279b8cd5628c38c64722e539ac026a11da8b" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#put_env/3&quot;&gt;&lt;code&gt;put_env/3&lt;/code&gt;&lt;/a&gt; allows dynamic configuration of the application environment, but as a rule of thumb each application is responsible for its own environment. Please do not use the functions in this module for directly accessing or modifying the environment of other applications.</source>
          <target state="translated">関数&lt;a href=&quot;#put_env/3&quot;&gt; &lt;code&gt;put_env/3&lt;/code&gt; を&lt;/a&gt;使用すると、アプリケーション環境を動的に構成できますが、経験則として、各アプリケーションは独自の環境を担当します。他のアプリケーションの環境に直接アクセスまたは変更するために、このモジュールの関数を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="44dd7e8c0883ba7364643058445d069f16c2e43c" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#struct!/2&quot;&gt;&lt;code&gt;struct!/2&lt;/code&gt;&lt;/a&gt; emulates the compile time behaviour of structs. This means that:</source>
          <target state="translated">関数&lt;a href=&quot;#struct!/2&quot;&gt; &lt;code&gt;struct!/2&lt;/code&gt; &lt;/a&gt;は、構造体のコンパイル時の動作をエミュレートします。この意味は：</target>
        </trans-unit>
        <trans-unit id="8e0639c36ddd40dd4d3c1545de8b7ff6af66a1a8" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fun&lt;/code&gt; is sent to the &lt;code&gt;agent&lt;/code&gt; which invokes the function passing the agent state. The function must return a tuple with two elements, the first being the value to return (that is, the &quot;get&quot; value) and the second one being the new state of the agent.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; は &lt;code&gt;agent&lt;/code&gt; 送信され、エージェントの状態を渡す関数が呼び出されます。関数は2つの要素を持つタプルを返す必要があります。最初の要素は返す値（つまり、「取得」値）で、2番目の要素はエージェントの新しい状態です。</target>
        </trans-unit>
        <trans-unit id="216982854731717320607d5aa3e2c69ffa39cfa0" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fun&lt;/code&gt; is sent to the &lt;code&gt;agent&lt;/code&gt; which invokes the function passing the agent state. The result of the function invocation is returned from this function.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; は &lt;code&gt;agent&lt;/code&gt; 送信され、エージェントの状態を渡す関数が呼び出されます。関数呼び出しの結果は、この関数から返されます。</target>
        </trans-unit>
        <trans-unit id="fc7b0ec15b4d375100169c807030b178d76cb224" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fun&lt;/code&gt; is sent to the &lt;code&gt;agent&lt;/code&gt; which invokes the function passing the agent state. The return value of &lt;code&gt;fun&lt;/code&gt; becomes the new state of the agent.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; は &lt;code&gt;agent&lt;/code&gt; 送信され、エージェントの状態を渡す関数が呼び出されます。 &lt;code&gt;fun&lt;/code&gt; の戻り値は、エージェントの新しい状態になります。</target>
        </trans-unit>
        <trans-unit id="cad7f93891da662dbbaf24dfbad6e47a904e9038" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fun&lt;/code&gt; maps every element to a term which is used to determine if two elements are duplicates.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; は、2つの要素が重複しているかどうかを判断するために使用される用語にすべての要素をマップします。</target>
        </trans-unit>
        <trans-unit id="2063958f17451467d712f93ea552d845434a5f7b" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;fun&lt;/code&gt; maps every element to a term. Two elements are considered duplicates if the return value of &lt;code&gt;fun&lt;/code&gt; is equal for both of them.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; は、すべての要素を用語にマップします。 &lt;code&gt;fun&lt;/code&gt; の戻り値が両方の要素で等しい場合、2つの要素は重複と見なされます。</target>
        </trans-unit>
        <trans-unit id="786bdba792da55f0fb2aae425ae917dfa7672afd" translate="yes" xml:space="preserve">
          <source>The function must receive the exit status code as an argument.</source>
          <target state="translated">この関数は、引数として終了ステータスコードを受け取る必要があります。</target>
        </trans-unit>
        <trans-unit id="a56026b8a6cb0f0aeff01c85c9ee7342a99db076" translate="yes" xml:space="preserve">
          <source>The function must return:</source>
          <target state="translated">関数は返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="78c45238f9f6bc55b2be81844c73ef2dab477691" translate="yes" xml:space="preserve">
          <source>The function receives the arguments and passes them to &lt;code&gt;if&lt;/code&gt;. However, as we learned in the &lt;a href=&quot;quote-and-unquote&quot;&gt;previous chapter&lt;/a&gt;, the macro will receive quoted expressions, inject them into the quote, and finally return another quoted expression.</source>
          <target state="translated">関数は引数を受け取り、それらを &lt;code&gt;if&lt;/code&gt; に渡します。ただし、&lt;a href=&quot;quote-and-unquote&quot;&gt;前の章&lt;/a&gt;で学習したように、マクロは引用符付きの式を受け取り、それらを引用符に挿入して、最後に別の引用符付きの式を返します。</target>
        </trans-unit>
        <trans-unit id="970e1abe8c2a97edfeb1747215a9aaebefbaf05f" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;:ok&lt;/code&gt; in case of success. Otherwise, it returns &lt;code&gt;{:error, reason}&lt;/code&gt;.</source>
          <target state="translated">関数は成功した場合に &lt;code&gt;:ok&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;{:error, reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="42211e9c17fc840b6d18e986bbdd31d79b28999c" translate="yes" xml:space="preserve">
          <source>The function returns &lt;code&gt;{:ok, files_and_directories}&lt;/code&gt; in case of success, &lt;code&gt;files_and_directories&lt;/code&gt; lists all files and directories copied in no specific order. It returns &lt;code&gt;{:error, reason, file}&lt;/code&gt; otherwise.</source>
          <target state="translated">この関数は、成功した場合に &lt;code&gt;{:ok, files_and_directories}&lt;/code&gt; を返します &lt;code&gt;files_and_directories&lt;/code&gt; は、コピーされたすべてのファイルとディレクトリを特定の順序でリストしません。それ以外の場合は &lt;code&gt;{:error, reason, file}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b12965a38c8943a04c360761ab1a75653a316455" translate="yes" xml:space="preserve">
          <source>The function should return a non empty list where the amount of elements is equal to &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="translated">関数は、要素の量が &lt;code&gt;length&lt;/code&gt; に等しい空でないリストを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="370959ce1313e0ee1574bb7b4f639ad8e764cdd3" translate="yes" xml:space="preserve">
          <source>The function, &lt;code&gt;fun&lt;/code&gt;, receives two arguments: the first one is the element, and the second one is the accumulator. &lt;code&gt;fun&lt;/code&gt; must return a tuple with two elements in the form of &lt;code&gt;{result, accumulator}&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; は2つの引数を受け取ります。最初の引数は要素で、2番目の引数はアキュムレータです。 &lt;code&gt;fun&lt;/code&gt; は、2つの要素を持つタプルを &lt;code&gt;{result, accumulator}&lt;/code&gt; 形式で返す必要があります。</target>
        </trans-unit>
        <trans-unit id="b5956f11dd1602a7d0b839eecd3ea612fa5aace7" translate="yes" xml:space="preserve">
          <source>The functions &lt;a href=&quot;#nest/2&quot;&gt;&lt;code&gt;nest/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#space/2&quot;&gt;&lt;code&gt;space/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#line/2&quot;&gt;&lt;code&gt;line/2&lt;/code&gt;&lt;/a&gt; help you put the document together into a rigid structure. However, the document algebra gets interesting when using functions like &lt;a href=&quot;#glue/3&quot;&gt;&lt;code&gt;glue/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#group/1&quot;&gt;&lt;code&gt;group/1&lt;/code&gt;&lt;/a&gt;. A glue inserts a break between two documents. A group indicates a document that must fit the current line, otherwise breaks are rendered as new lines. Let's glue two docs together with a break, group it and then render it:</source>
          <target state="translated">関数&lt;a href=&quot;#nest/2&quot;&gt; &lt;code&gt;nest/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#space/2&quot;&gt; &lt;code&gt;space/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#line/2&quot;&gt; &lt;code&gt;line/2&lt;/code&gt; &lt;/a&gt;は、ドキュメントを固定構造にまとめるのに役立ちます。ただし、ドキュメント代数は、&lt;a href=&quot;#glue/3&quot;&gt; &lt;code&gt;glue/3&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#group/1&quot;&gt; &lt;code&gt;group/1&lt;/code&gt; &lt;/a&gt;などの関数を使用すると面白くなります。接着剤は、2つのドキュメントの間に区切りを挿入します。グループは、現在の行に収まる必要があるドキュメントを示します。それ以外の場合、改行は新しい行としてレンダリングされます。 2つのドキュメントを改行で接着し、グループ化してレンダリングします。</target>
        </trans-unit>
        <trans-unit id="c253790d407e18b7d5f0c9bb8af92800693543dd" translate="yes" xml:space="preserve">
          <source>The functions in &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; do not guarantee any property when it comes to ordering. However, since a keyword list is simply a list, all the operations defined in &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; can be applied too, especially when ordering is required.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt;の関数は、順序付けに関しては、いかなるプロパティも保証しません。ただし、キーワードリストは単なるリストであるため、特に順序付けが必要な場合は、&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; で&lt;/a&gt;定義されているすべての操作を適用できます。</target>
        </trans-unit>
        <trans-unit id="fc395b4f1565e86a3f414d5f43f358ea3ab4b968" translate="yes" xml:space="preserve">
          <source>The functions in &lt;code&gt;IO&lt;/code&gt; and &lt;code&gt;File&lt;/code&gt; also allow lists to be given as arguments. Not only that, they also allow a mixed list of lists, integers, and binaries to be given:</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; および &lt;code&gt;File&lt;/code&gt; の関数では、リストを引数として指定することもできます。それだけでなく、リスト、整数、バイナリの混合リストを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="c24702aeda4cc39358f5c9073ad6385b684128ba" translate="yes" xml:space="preserve">
          <source>The functions in the &lt;code&gt;ets&lt;/code&gt; module will modify the state of the table as a side-effect.</source>
          <target state="translated">&lt;code&gt;ets&lt;/code&gt; モジュールの関数は、副作用としてテーブルの状態を変更します。</target>
        </trans-unit>
        <trans-unit id="645c924b3f04d5643fc9c0295858b7ef02f4fe7d" translate="yes" xml:space="preserve">
          <source>The functions in the Enum module are limited to, as the name says, enumerating values in data structures. For specific operations, like inserting and updating particular elements, you may need to reach for modules specific to the data type. For example, if you want to insert an element at a given position in a list, you should use the &lt;code&gt;List.insert_at/3&lt;/code&gt; function from &lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt;the &lt;code&gt;List&lt;/code&gt; module&lt;/a&gt;, as it would make little sense to insert a value into, for example, a range.</source>
          <target state="translated">Enumモジュールの関数は、名前が示すように、データ構造の値を列挙することに限定されています。特定の要素の挿入や更新などの特定の操作では、データ型に固有のモジュールに到達する必要がある場合があります。たとえば、リスト内の特定の位置に要素を挿入する場合、値を範囲などに挿入するのはほとんど意味がないため&lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt;、&lt;/a&gt; &lt;code&gt;List&lt;/code&gt; モジュールの &lt;code&gt;List.insert_at/3&lt;/code&gt; 関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="77cce334a46132ba295a248960c6d018c960a8aa" translate="yes" xml:space="preserve">
          <source>The functions in this module act according to the Unicode Standard, version 11.0.0.</source>
          <target state="translated">このモジュールの関数は、Unicode 標準 11.0.0 に従って動作します。</target>
        </trans-unit>
        <trans-unit id="2539a9cd4324f66b525de87feede6af27bf5479d" translate="yes" xml:space="preserve">
          <source>The functions in this module act according to the Unicode Standard, version 12.1.0.</source>
          <target state="translated">このモジュールの関数は、Unicode 標準 12.1.0 に従っ て動作します。</target>
        </trans-unit>
        <trans-unit id="435e788eab1bd17ae90e69f5f7810182e093e4b6" translate="yes" xml:space="preserve">
          <source>The functions in this module are deprecated and they do not work with the module-based child specs introduced in Elixir v1.5. Please see the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; documentation instead.</source>
          <target state="translated">このモジュールの関数は非推奨であり、Elixirv1.5で導入されたモジュールベースの子仕様では機能しません。代わりに、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="173416c87fd5ec34f77cd8d34322b0332ac7cfcb" translate="yes" xml:space="preserve">
          <source>The functions in this module are deprecated and they do not work with the module-based child specs introduced in Elixir v1.5. Please see the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; documentation instead.</source>
          <target state="translated">このモジュールの関数は非推奨であり、Elixir v1.5で導入されたモジュールベースの子仕様では機能しません。代わりに、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="55c1606f7340829fac4bdeef11ed0e160ebd64a6" translate="yes" xml:space="preserve">
          <source>The functions in this module come in two flavors: named or operators. For example:</source>
          <target state="translated">このモジュールの関数には、名前付きと演算子の 2 種類があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="96e74349f320a8c58dc1c59108496ee930024bf1" translate="yes" xml:space="preserve">
          <source>The functions in this module may receive a chardata as argument (i.e. a string or a list of characters / string) and will always return a string (encoded in UTF-8).</source>
          <target state="translated">このモジュールの関数は、引数として chardata (すなわち、文字列または文字列のリスト)を受け取ることができ、常に文字列 (UTF-8 でエンコードされたもの)を返します。</target>
        </trans-unit>
        <trans-unit id="b429b5ce2f9a2392aff46c5515cf68d49d6d6adf" translate="yes" xml:space="preserve">
          <source>The functions in this module support chardata, so giving a list will treat it as a single entity:</source>
          <target state="translated">このモジュールの関数は chardata をサポートしているので、リストを与えるとそれを単一のエンティティとして扱います。</target>
        </trans-unit>
        <trans-unit id="255d1a73d20d6ce6127802c33ec8ce540df5e39c" translate="yes" xml:space="preserve">
          <source>The functions in this module that add and remove elements from tuples are rarely used in practice, as they typically imply tuples are being used as collections. To append to a tuple, it is preferable to extract the elements from the old tuple with pattern matching, and then create a new tuple:</source>
          <target state="translated">このモジュールでタプルから要素を追加したり削除したりする関数は、実際にはほとんど使われていません。タプルに追加するには、パターンマッチを使って古いタプルから要素を抽出し、新しいタプルを作成するのが望ましいです。</target>
        </trans-unit>
        <trans-unit id="33b30755a342f20f218b83071cf71f52c8757557" translate="yes" xml:space="preserve">
          <source>The functions in this module that need to find a specific key work in logarithmic time. This means that the time it takes to find keys grows as the map grows, but it's not directly proportional to the map size. In comparison to finding an element in a list, it performs better because lists have a linear time complexity. Some functions, such as &lt;a href=&quot;#keys/1&quot;&gt;&lt;code&gt;keys/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#values/1&quot;&gt;&lt;code&gt;values/1&lt;/code&gt;&lt;/a&gt;, run in linear time because they need to get to every element in the map.</source>
          <target state="translated">特定のキーを見つける必要があるこのモジュールの関数は、対数時間で機能します。つまり、マップが大きくなるにつれてキーを見つけるのにかかる時間が長くなりますが、マップのサイズに直接比例するわけではありません。リストは時間の複雑さが線形であるため、リスト内の要素を検索する場合と比較して、パフォーマンスが向上します。&lt;a href=&quot;#keys/1&quot;&gt; &lt;code&gt;keys/1&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#values/1&quot;&gt; &lt;code&gt;values/1&lt;/code&gt; &lt;/a&gt;などの一部の関数は、マップ内のすべての要素に到達する必要があるため、線形時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="74f82d17a516dfeabf8954e130f2901c86439fbe" translate="yes" xml:space="preserve">
          <source>The functions in this module work in linear time. This means that, the time it takes to perform an operation grows at the same rate as the length of the enumerable. This is expected on operations such as &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt;. After all, if we want to traverse every element on a list, the longer the list, the more elements we need to traverse, and the longer it will take.</source>
          <target state="translated">このモジュールの関数は線形時間で動作します。これは、操作の実行にかかる時間が、列挙可能な長さと同じ割合で増加することを意味します。これは、&lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; &lt;/a&gt;などの操作で予期されます。結局のところ、リスト上のすべての要素をトラバースする場合、リストが長くなるほど、トラバースする必要のある要素が多くなり、時間がかかります。</target>
        </trans-unit>
        <trans-unit id="9f0853ffd0b6dd95f29653e4a1c1ad06e52385c2" translate="yes" xml:space="preserve">
          <source>The functions in this module work in linear time. This means that, the time it takes to perform an operation grows at the same rate as the length of the enumerable. This is expected on operations such as &lt;a href=&quot;enum#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt;. After all, if we want to traverse every element on a list, the longer the list, the more elements we need to traverse, and the longer it will take.</source>
          <target state="translated">このモジュールの関数は線形時間で動作します。つまり、操作を実行するのにかかる時間は、列挙可能なオブジェクトの長さと同じ割合で増加します。これは&lt;a href=&quot;enum#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; &lt;/a&gt;などの操作で予想されます。結局、リストのすべての要素をトラバースしたい場合、リストが長くなるほど、トラバースする必要のある要素が多くなり、時間がかかります。</target>
        </trans-unit>
        <trans-unit id="3463cc17b842a1d5960bd8ec694214b314a84bdc" translate="yes" xml:space="preserve">
          <source>The functions listed under &lt;code&gt;:locals_without_parens&lt;/code&gt; in the &lt;code&gt;:export&lt;/code&gt; option of a dependency can be imported in a project by listing that dependency in the &lt;code&gt;:import_deps&lt;/code&gt; option of the formatter configuration file of the project.</source>
          <target state="translated">下にリストされている機能 &lt;code&gt;:locals_without_parens&lt;/code&gt; 中 &lt;code&gt;:export&lt;/code&gt; 依存のオプションはでその依存関係を一覧表示することにより、プロジェクトにインポートすることができ &lt;code&gt;:import_deps&lt;/code&gt; プロジェクトのフォーマッタ設定ファイルのオプション。</target>
        </trans-unit>
        <trans-unit id="2b5e518a4ce1d29fa0de0a02c9ab38609211f7bc" translate="yes" xml:space="preserve">
          <source>The functions on this module work with the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct as well as any struct that contains the same fields as the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. Such functions expect &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#t:date/0&quot;&gt;&lt;code&gt;Calendar.date/0&lt;/code&gt;&lt;/a&gt; in their typespecs (instead of &lt;a href=&quot;#t:t/0&quot;&gt;&lt;code&gt;t/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このモジュールの関数は、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;構造体だけでなく、&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;など、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;構造体と同じフィールドを含むすべての構造体で機能します。このような関数は、typespecで（&lt;a href=&quot;#t:t/0&quot;&gt; &lt;code&gt;t/0&lt;/code&gt; &lt;/a&gt;ではなく）&lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#t:date/0&quot;&gt; &lt;code&gt;Calendar.date/0&lt;/code&gt; &lt;/a&gt;/ 0を予期します。</target>
        </trans-unit>
        <trans-unit id="709dd48512a8ffdaa9639efcdf5626b90390736d" translate="yes" xml:space="preserve">
          <source>The functions on this module work with the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct as well as any struct that contains the same fields as the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. Such functions expect &lt;a href=&quot;calendar#t:date/0&quot;&gt;&lt;code&gt;Calendar.date/0&lt;/code&gt;&lt;/a&gt; in their typespecs (instead of &lt;a href=&quot;#t:t/0&quot;&gt;&lt;code&gt;t/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このモジュールの仕事上の機能&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;構造体だけでなく、同じフィールド含む任意の構造体の&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;のような構造体、&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。このような関数は、（&lt;a href=&quot;#t:t/0&quot;&gt; &lt;code&gt;t/0&lt;/code&gt; &lt;/a&gt;ではなく）typespecに&lt;a href=&quot;calendar#t:date/0&quot;&gt; &lt;code&gt;Calendar.date/0&lt;/code&gt; &lt;/a&gt;を必要とします。</target>
        </trans-unit>
        <trans-unit id="2ff0d30d9202c4c6b14208fdf831e03638322939" translate="yes" xml:space="preserve">
          <source>The functions on this module work with the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct as well as any struct that contains the same fields as the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. Such functions expect &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#t:time/0&quot;&gt;&lt;code&gt;Calendar.time/0&lt;/code&gt;&lt;/a&gt; in their typespecs (instead of &lt;a href=&quot;#t:t/0&quot;&gt;&lt;code&gt;t/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このモジュールの関数は、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;構造体だけでなく、&lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;など、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;構造体と同じフィールドを含むすべての構造体で機能します。このような関数は、typespecに（&lt;a href=&quot;#t:t/0&quot;&gt; &lt;code&gt;t/0&lt;/code&gt; &lt;/a&gt;ではなく）&lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#t:time/0&quot;&gt; &lt;code&gt;Calendar.time/0&lt;/code&gt; &lt;/a&gt;を期待します。</target>
        </trans-unit>
        <trans-unit id="dd7fe8f3288c5b63dba38948e86e695e4e2b2557" translate="yes" xml:space="preserve">
          <source>The functions on this module work with the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct as well as any struct that contains the same fields as the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. Such functions expect &lt;a href=&quot;calendar#t:time/0&quot;&gt;&lt;code&gt;Calendar.time/0&lt;/code&gt;&lt;/a&gt; in their typespecs (instead of &lt;a href=&quot;#t:t/0&quot;&gt;&lt;code&gt;t/0&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このモジュールの仕事上の関数&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;構造体だけでなく、同じフィールド含む任意の構造体の&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;のような構造体、&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;。このような関数は、（&lt;a href=&quot;#t:t/0&quot;&gt; &lt;code&gt;t/0&lt;/code&gt; &lt;/a&gt;ではなく）typespecsに&lt;a href=&quot;calendar#t:time/0&quot;&gt; &lt;code&gt;Calendar.time/0&lt;/code&gt; &lt;/a&gt;を期待します。</target>
        </trans-unit>
        <trans-unit id="003b5d0dd560d869b45725f5251941da4e2978b9" translate="yes" xml:space="preserve">
          <source>The general Elixir identifier rule is specified as:</source>
          <target state="translated">一般的なエリクサーの識別子ルールは、次のように指定されています。</target>
        </trans-unit>
        <trans-unit id="279b2d1d6d51ad298e11acb6402db1bbf4467c85" translate="yes" xml:space="preserve">
          <source>The generated files are similar to the ones we first generated for &lt;code&gt;kv&lt;/code&gt;, with a few differences. Let&amp;rsquo;s open up &lt;code&gt;mix.exs&lt;/code&gt;:</source>
          <target state="translated">生成されたファイルは、 &lt;code&gt;kv&lt;/code&gt; 用に最初に生成したファイルと似ていますが、いくつかの違いがあります。 &lt;code&gt;mix.exs&lt;/code&gt; を開いてみましょう：</target>
        </trans-unit>
        <trans-unit id="fe11b786cb48918f9b05dccc30b89f3c9d182f54" translate="yes" xml:space="preserve">
          <source>The generated macros can also be used in order to pattern match on records and to bind variables during the match:</source>
          <target state="translated">生成されたマクロは、レコードのパターンマッチや、マッチ中に変数をバインドするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="50f5c0fcf4c39bd1e0e3ce49d94a449eccf8a5ee" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;datetime_string&lt;/code&gt; must include &quot;Z&quot; or &quot;00:00&quot; offset which marks it as UTC, otherwise an error is raised.</source>
          <target state="translated">指定された &lt;code&gt;datetime_string&lt;/code&gt; には、UTCとしてマークする「Z」または「00:00」オフセットを含める必要があります。そうでない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5945d8ce9d0ed7b935712680470e46feacdd1644" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;fun&lt;/code&gt; is called for every node in the AST with two arguments: the AST of the node being printed and the string representation of that same node. The return value of this function is used as the final string representation for that AST node.</source>
          <target state="translated">指定された &lt;code&gt;fun&lt;/code&gt; は、AST内のすべてのノードに対して、2つの引数（印刷されるノードのASTとその同じノードの文字列表現）で呼び出されます。この関数の戻り値は、そのASTノードの最終的な文字列表現として使用されます。</target>
        </trans-unit>
        <trans-unit id="a83da51956cb3348840e43e856af798fc100e9ea" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;opts&lt;/code&gt; are merged into the existing configuration for the given &lt;code&gt;root_key&lt;/code&gt;. Conflicting keys are overridden by the ones specified in &lt;code&gt;opts&lt;/code&gt;. For example, the application configuration below</source>
          <target state="translated">指定された &lt;code&gt;opts&lt;/code&gt; は、指定された &lt;code&gt;root_key&lt;/code&gt; の既存の構成にマージされます。競合するキーは、 &lt;code&gt;opts&lt;/code&gt; で指定されたキーによって上書きされます。たとえば、以下のアプリケーション構成</target>
        </trans-unit>
        <trans-unit id="b05f234517d759a8cb3f7b2d59dc801482a98965" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;opts&lt;/code&gt; are merged into the existing values for &lt;code&gt;key&lt;/code&gt; in the given &lt;code&gt;root_key&lt;/code&gt;. Conflicting keys are overridden by the ones specified in &lt;code&gt;opts&lt;/code&gt;. For example, the application configuration below</source>
          <target state="translated">指定された &lt;code&gt;opts&lt;/code&gt; は、指定された &lt;code&gt;root_key&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; の既存の値にマージされます。競合するキーは、 &lt;code&gt;opts&lt;/code&gt; で指定されたキーによって上書きされます。たとえば、以下のアプリケーション構成</target>
        </trans-unit>
        <trans-unit id="02ef5a607d49adbb7866b57f819df6b77fdbb345" translate="yes" xml:space="preserve">
          <source>The given config should not:</source>
          <target state="translated">与えられた設定はそうではないはずです。</target>
        </trans-unit>
        <trans-unit id="44e635edac5e4e08e828b82a2eaab3164491a4b7" translate="yes" xml:space="preserve">
          <source>The given datetime is returned unchanged if it already has lower precision than the given precision.</source>
          <target state="translated">与えられたdatetimeが、すでに与えられた精度よりも低い精度である場合は、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="77d42dd0c470aae641d549b4c74c46ab9659c1be" translate="yes" xml:space="preserve">
          <source>The given dependencies and the projects they depend on will be unlocked and updated to the latest version according to their version requirements.</source>
          <target state="translated">与えられた依存関係とその依存関係にあるプロジェクトは、そのバージョン要件に応じてロックが解除され、最新のバージョンに更新されます。</target>
        </trans-unit>
        <trans-unit id="6d2a43a0c7f321f6321fd1b9eb5b43b059a8e70b" translate="yes" xml:space="preserve">
          <source>The given naive datetime is returned unchanged if it already has lower precision than the given precision.</source>
          <target state="translated">与えられたナイーブな日時が、すでに与えられた精度よりも低い精度である場合は、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="ee23443246e5491d80625e07cdf87fe6cfe649c9" translate="yes" xml:space="preserve">
          <source>The given options can either be a binary with the characters representing the same regex options given to the &lt;code&gt;~r&lt;/code&gt; (see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_r/2&quot;&gt;&lt;code&gt;Kernel.sigil_r/2&lt;/code&gt;&lt;/a&gt;) sigil, or a list of options, as expected by the Erlang's &lt;code&gt;:re&lt;/code&gt; module.</source>
          <target state="translated">与えられたオプションのいずれかに与えられた同じ正規表現オプションを表す文字をバイナリであることができる &lt;code&gt;~r&lt;/code&gt; （参照&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_r/2&quot;&gt; &lt;code&gt;Kernel.sigil_r/2&lt;/code&gt; &lt;/a&gt;アーラン者によって予想されるように、シギル、又はオプションのリスト） &lt;code&gt;:re&lt;/code&gt; モジュール。</target>
        </trans-unit>
        <trans-unit id="c8ff7c40025099fed2b47a6ca6bd7d1bee58abb9" translate="yes" xml:space="preserve">
          <source>The given options can either be a binary with the characters representing the same regex options given to the &lt;code&gt;~r&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_r/2&quot;&gt;&lt;code&gt;Kernel.sigil_r/2&lt;/code&gt;&lt;/a&gt;) sigil, or a list of options, as expected by the Erlang's &lt;code&gt;:re&lt;/code&gt; module.</source>
          <target state="translated">与えられたオプションのいずれかに与えられた同じ正規表現オプションを表す文字をバイナリであることができる &lt;code&gt;~r&lt;/code&gt; （参照&lt;a href=&quot;kernel#sigil_r/2&quot;&gt; &lt;code&gt;Kernel.sigil_r/2&lt;/code&gt; &lt;/a&gt;アーラン者によって予想されるように、シギル、又はオプションのリスト） &lt;code&gt;:re&lt;/code&gt; モジュール。</target>
        </trans-unit>
        <trans-unit id="a877d88a9ed060a658c7f85f772f951264b25f7d" translate="yes" xml:space="preserve">
          <source>The given string may contain a timezone offset but it is ignored.</source>
          <target state="translated">与えられた文字列にはタイムゾーンオフセットが含まれている可能性がありますが、無視されます。</target>
        </trans-unit>
        <trans-unit id="8ee391432291b1d23474c64748cd369ce3de6c17" translate="yes" xml:space="preserve">
          <source>The given time is returned unchanged if it already has lower precision than the given precision.</source>
          <target state="translated">与えられた時間は、すでに与えられた精度よりも低い精度であれば、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="595ea9127c2b29264915dada8a0a74f247f402db" translate="yes" xml:space="preserve">
          <source>The goal in this chapter is to build a module named &lt;code&gt;TestCase&lt;/code&gt; that allows us to write the following:</source>
          <target state="translated">この章の目標は、次のような記述を可能にする &lt;code&gt;TestCase&lt;/code&gt; という名前のモジュールを構築することです。</target>
        </trans-unit>
        <trans-unit id="005035c0ac9ba5b2d03b96ccf393ae5ff11ffe11" translate="yes" xml:space="preserve">
          <source>The goal of a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; is to abstract the &quot;receive&quot; loop for developers, automatically handling system messages, supporting code change, synchronous calls and more. Therefore, you should never call your own &quot;receive&quot; inside the GenServer callbacks as doing so will cause the GenServer to misbehave.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;の目標は、開発者のための「受信」ループを抽象化し、システムメッセージを自動的に処理し、コード変更、同期呼び出しなどをサポートすることです。したがって、GenServerコールバック内で独自の「受信」を呼び出さないでください。呼び出すと、GenServerが誤動作します。</target>
        </trans-unit>
        <trans-unit id="1a6d568374392c51e27178f8aac8e2da82bbf64d" translate="yes" xml:space="preserve">
          <source>The good news is that breaking an umbrella apart is quite straightforward, as you simply need to move applications outside of the umbrella project&amp;rsquo;s &lt;code&gt;apps/&lt;/code&gt; directory. In the worst case scenario, you can discard the umbrella project and all related configuration (&lt;code&gt;build_path&lt;/code&gt;, &lt;code&gt;config_path&lt;/code&gt;, &lt;code&gt;deps_path&lt;/code&gt; and &lt;code&gt;lockfile&lt;/code&gt;) and still leverage the &amp;ldquo;mono-repo&amp;rdquo; pattern by keeping all applications together in the same repository. Each application will have its own dependencies and configuration. Dependencies between those applications can still be explicitly listed by using the &lt;code&gt;:path&lt;/code&gt; option (in contrast to &lt;code&gt;:git&lt;/code&gt;).</source>
          <target state="translated">アンブレラプロジェクトの &lt;code&gt;apps/&lt;/code&gt; ディレクトリの外にアプリケーションを移動する必要があるだけなので、アンブレラを分解するのは非常に簡単です。最悪のシナリオでは、傘プロジェクトとすべての関連構成（ &lt;code&gt;build_path&lt;/code&gt; 、 &lt;code&gt;config_path&lt;/code&gt; 、 &lt;code&gt;deps_path&lt;/code&gt; 、および &lt;code&gt;lockfile&lt;/code&gt; ）を破棄し、すべてのアプリケーションを同じリポジトリにまとめることで、「mono-repo」パターンを活用できます。各アプリケーションには、独自の依存関係と構成があります。これらのアプリケーション間の依存関係は、（ &lt;code&gt;:git&lt;/code&gt; とは対照的に） &lt;code&gt;:path&lt;/code&gt; オプションを使用して明示的にリストできます。</target>
        </trans-unit>
        <trans-unit id="78ffff4bce308419c28073fad905a3416ef9e300" translate="yes" xml:space="preserve">
          <source>The good news is that developers can use third-party implementations of both Elixir backends and Erlang handlers.</source>
          <target state="translated">良いニュースは、開発者がElixirのバックエンドとErlangのハンドラーの両方のサードパーティの実装を使うことができるということです。</target>
        </trans-unit>
        <trans-unit id="18abb99c49c0cd9f625ee8db0e020cadbbd4d636" translate="yes" xml:space="preserve">
          <source>The greatest common divisor (GCD) of &lt;code&gt;integer1&lt;/code&gt; and &lt;code&gt;integer2&lt;/code&gt; is the largest positive integer that divides both &lt;code&gt;integer1&lt;/code&gt; and &lt;code&gt;integer2&lt;/code&gt; without leaving a remainder.</source>
          <target state="translated">&lt;code&gt;integer1&lt;/code&gt; と &lt;code&gt;integer2&lt;/code&gt; の最大公約数（GCD）は、integer1とinteger2の両方を &lt;code&gt;integer1&lt;/code&gt; を &lt;code&gt;integer2&lt;/code&gt; ずに除算する最大の正の整数です。</target>
        </trans-unit>
        <trans-unit id="04a15f34a10083efdd1b4c7fb23d6409a2799f7b" translate="yes" xml:space="preserve">
          <source>The group mode can also be set to &lt;code&gt;:inherit&lt;/code&gt;, which means it automatically breaks if the parent group has broken too.</source>
          <target state="translated">グループモードを &lt;code&gt;:inherit&lt;/code&gt; に設定することもできます。これは、親グループも壊れた場合に自動的に壊れることを意味します。</target>
        </trans-unit>
        <trans-unit id="a353728570ac2d4d82e8f0ff930144d1e562cb6a" translate="yes" xml:space="preserve">
          <source>The handler always executes in a different process from the one it was registered in. As a consequence, any resources managed by the calling process (ETS tables, open files, and others) won't be available by the time the handler function is invoked.</source>
          <target state="translated">ハンドラは常に登録されたプロセスとは異なるプロセスで実行されます。その結果、ハンドラ関数が呼び出されるまでに、呼び出し元のプロセスで管理されているリソース(ETSテーブル、オープンファイルなど)が利用できなくなります。</target>
        </trans-unit>
        <trans-unit id="abae706b2e9875a2d4fe24ac37232c3285b58047" translate="yes" xml:space="preserve">
          <source>The handler always executes in a different process from the one it was registered in. As a consequence, any resources managed by the calling process (ETS tables, open files, etc.) won't be available by the time the handler function is invoked.</source>
          <target state="translated">ハンドラは常に登録されたプロセスとは異なるプロセスで実行されます。結果として、ハンドラ関数が呼び出されるまでに、呼び出し元のプロセスで管理されているリソース(ETSテーブル、オープンファイルなど)が利用できなくなります。</target>
        </trans-unit>
        <trans-unit id="91dc0be92537f81da316aa8d3834b6a0c2b63c02" translate="yes" xml:space="preserve">
          <source>The head element of aliases can be any term that must expand to an atom at compilation time.</source>
          <target state="translated">エイリアスのhead要素には、コンパイル時にアトムに展開しなければならない任意の項を指定することができます。</target>
        </trans-unit>
        <trans-unit id="d895e647576b7caa588974823adee16cc261b47d" translate="yes" xml:space="preserve">
          <source>The hex representation will also help you look up information about a code point, e.g. &lt;a href=&quot;https://codepoints.net/U+0061&quot;&gt;https://codepoints.net/U+0061&lt;/a&gt; has a data sheet all about the lower case &lt;code&gt;a&lt;/code&gt;, a.k.a. code point 97.</source>
          <target state="translated">16進表現は、コードポイントに関する情報を検索するのにも役立ちます。たとえば、&lt;a href=&quot;https://codepoints.net/U+0061&quot;&gt;https&lt;/a&gt;：//codepoints.net/U+0061には、小文字の &lt;code&gt;a&lt;/code&gt; 、別名コードポイント97に関するデータシートがあります。</target>
        </trans-unit>
        <trans-unit id="b5f5e37ee6e6bb7829dd572b3c957edcc2f9784b" translate="yes" xml:space="preserve">
          <source>The implementation above is arguably not a reasonable one. For example, it makes no sense to say that the size of a &lt;code&gt;PID&lt;/code&gt; or an &lt;code&gt;Integer&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">上記の実装は間違いなく合理的なものではありません。たとえば、 &lt;code&gt;PID&lt;/code&gt; または &lt;code&gt;Integer&lt;/code&gt; のサイズが &lt;code&gt;0&lt;/code&gt; であると言っても意味がありません。</target>
        </trans-unit>
        <trans-unit id="1a82e7d1f4f1afb4f634e8bc16b67baab165570d" translate="yes" xml:space="preserve">
          <source>The implementation is based on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reservoir_sampling#Relation_to_Fisher-Yates_shuffle&quot;&gt;reservoir sampling&lt;/a&gt; algorithm. It assumes that the sample being returned can fit into memory; the input &lt;code&gt;enumerable&lt;/code&gt; doesn't have to, as it is traversed just once.</source>
          <target state="translated">実装は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Reservoir_sampling#Relation_to_Fisher-Yates_shuffle&quot;&gt;貯水池サンプリング&lt;/a&gt;アルゴリズムに基づいています。返されるサンプルはメモリに収まると想定しています。入力 &lt;code&gt;enumerable&lt;/code&gt; は1回だけトラバースされるため、入力する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8b8d2b9e0c9b1879d05717152c53da40bcc3437b" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt; is based on the Strictly Pretty paper by &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200&quot;&gt;Lindig&lt;/a&gt; which builds on top of previous pretty printing algorithms but is tailored to strict languages, such as Elixir. The core idea in the paper is the use of explicit document groups which are rendered as flat (breaks as spaces) or as break (breaks as newlines).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt;の実装は、Lindigによる Strictly Pretty紙に&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200&quot;&gt;基づいて&lt;/a&gt;います。これは、以前のきれいな印刷アルゴリズムの上に構築されていますが、Elixirなどの厳密な言語に合わせて調整されています。この論文の核となる考え方は、フラット（スペースとして改行）またはブレーク（改行として改行）としてレンダリングされる明示的なドキュメントグループの使用です。</target>
        </trans-unit>
        <trans-unit id="a573a08337f6f0cf025ec9ae17d9092603c49c35" translate="yes" xml:space="preserve">
          <source>The implementation of this callback should invoke &lt;code&gt;fun&lt;/code&gt; with the value under &lt;code&gt;key&lt;/code&gt; in the passed structure &lt;code&gt;data&lt;/code&gt;, or with &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present in it. This function must return either &lt;code&gt;{get_value, update_value}&lt;/code&gt; or &lt;code&gt;:pop&lt;/code&gt;.</source>
          <target state="translated">このコールバックの実装は、呼び出す必要が &lt;code&gt;fun&lt;/code&gt; の下での値と &lt;code&gt;key&lt;/code&gt; 渡される構造の中 &lt;code&gt;data&lt;/code&gt; 、またはで &lt;code&gt;nil&lt;/code&gt; の場合 &lt;code&gt;key&lt;/code&gt; その中に存在していません。この関数は、 &lt;code&gt;{get_value, update_value}&lt;/code&gt; または &lt;code&gt;:pop&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="791ef5c45db6655a2b8e0d52e101cc594625c78d" translate="yes" xml:space="preserve">
          <source>The initial backends are loaded via the &lt;code&gt;:backends&lt;/code&gt; configuration, which must be set before the &lt;code&gt;:logger&lt;/code&gt; application is started.</source>
          <target state="translated">最初のバックエンドは、 &lt;code&gt;:logger&lt;/code&gt; アプリケーションが開始される前に設定する必要がある &lt;code&gt;:backends&lt;/code&gt; 構成を介してロードされます。</target>
        </trans-unit>
        <trans-unit id="26abb8f8f9a767e820200e7bf8e998799e79b893" translate="yes" xml:space="preserve">
          <source>The initial backends are loaded via the &lt;code&gt;:backends&lt;/code&gt; configuration, which must be set before the &lt;code&gt;:logger&lt;/code&gt; application is started. Backends can also be added dynamically through &lt;a href=&quot;#add_backend/2&quot;&gt;&lt;code&gt;add_backend/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期バックエンドは、 &lt;code&gt;:backends&lt;/code&gt; 構成を介してロードされます。これは、 &lt;code&gt;:logger&lt;/code&gt; アプリケーションを開始する前に設定する必要があります。バックエンドは、&lt;a href=&quot;#add_backend/2&quot;&gt; &lt;code&gt;add_backend/2&lt;/code&gt; を&lt;/a&gt;介して動的に追加することもできます。</target>
        </trans-unit>
        <trans-unit id="e5d99b4bc070e331607e6d5df8659a98abe40c48" translate="yes" xml:space="preserve">
          <source>The initial value of the accumulator is &lt;code&gt;acc&lt;/code&gt;. The function is invoked for each element in the enumerable with the accumulator. The result returned by the function is used as the accumulator for the next iteration. The function returns the last accumulator.</source>
          <target state="translated">アキュムレータの初期値は &lt;code&gt;acc&lt;/code&gt; です。関数は、アキュムレータを使用して列挙可能な要素の各要素に対して呼び出されます。関数によって返された結果は、次の反復のアキュムレータとして使用されます。関数は最後のアキュムレータを返します。</target>
        </trans-unit>
        <trans-unit id="a3d8510abacaf7b1519659fdcdb00b6e366da892" translate="yes" xml:space="preserve">
          <source>The initialization arguments, in this case the atom &lt;code&gt;:ok&lt;/code&gt;</source>
          <target state="translated">初期化引数、この場合はアトム &lt;code&gt;:ok&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3041c0950b326f4d917de04b2c7baea534d3ad6" translate="yes" xml:space="preserve">
          <source>The inputs of a macro</source>
          <target state="translated">マクロの入力</target>
        </trans-unit>
        <trans-unit id="90073db7fde62d3d91fecce3e1a99c3827dbc4cc" translate="yes" xml:space="preserve">
          <source>The integer can be given in different unit according to &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt;&lt;code&gt;System.convert_time_unit/3&lt;/code&gt;&lt;/a&gt; and it will be converted to microseconds internally.</source>
          <target state="translated">整数は、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt; &lt;code&gt;System.convert_time_unit/3&lt;/code&gt; &lt;/a&gt;に従って異なる単位で指定でき、内部でマイクロ秒に変換されます。</target>
        </trans-unit>
        <trans-unit id="36e6d864c0e22df1c9a628ca13539c3c770887d4" translate="yes" xml:space="preserve">
          <source>The integer can be given in different unit according to &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt;&lt;code&gt;System.convert_time_unit/3&lt;/code&gt;&lt;/a&gt; and it will be converted to microseconds internally. Up to 253402300799 seconds is supported.</source>
          <target state="translated">整数は、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt; &lt;code&gt;System.convert_time_unit/3&lt;/code&gt; &lt;/a&gt;に従って異なる単位で指定でき、内部でマイクロ秒に変換されます。最大253402300799秒がサポートされます。</target>
        </trans-unit>
        <trans-unit id="c1ddbc45c619f8049cea4c440a4edb65fecbed96" translate="yes" xml:space="preserve">
          <source>The integer can be given in different unit according to &lt;a href=&quot;system#convert_time_unit/3&quot;&gt;&lt;code&gt;System.convert_time_unit/3&lt;/code&gt;&lt;/a&gt; and it will be converted to microseconds internally.</source>
          <target state="translated">整数は&lt;a href=&quot;system#convert_time_unit/3&quot;&gt; &lt;code&gt;System.convert_time_unit/3&lt;/code&gt; &lt;/a&gt;に従って異なる単位で指定でき、内部的にマイクロ秒に変換されます。</target>
        </trans-unit>
        <trans-unit id="c5f1e2568ac6af5c9527d828828602700a4893a4" translate="yes" xml:space="preserve">
          <source>The interesting thing about this approach is that Mix has many conveniences for working with such projects, such as the ability to compile and test all applications inside &lt;code&gt;apps&lt;/code&gt; with a single command. However, even though they are all listed together inside &lt;code&gt;apps&lt;/code&gt;, they are still decoupled from each other, so you can build, test and deploy each application in isolation if you want to.</source>
          <target state="translated">このアプローチの興味深い点は、Mixには、単一のコマンドで &lt;code&gt;apps&lt;/code&gt; 内のすべてのアプリケーションをコンパイルおよびテストする機能など、そのようなプロジェクトを操作するための多くの便利さがあることです。ただし、これらはすべて &lt;code&gt;apps&lt;/code&gt; 内にまとめてリストされていますが、相互に分離されているため、必要に応じて、各アプリケーションを個別にビルド、テスト、デプロイできます。</target>
        </trans-unit>
        <trans-unit id="ccef43e698ff7f77a039db9e5b5b3d002b852b8a" translate="yes" xml:space="preserve">
          <source>The internal date format that is used when converting between calendars.</source>
          <target state="translated">カレンダー間で変換する際に使用する内部日付フォーマット。</target>
        </trans-unit>
        <trans-unit id="5490fd4bbe326611a1d9b742e7e1f91649638437" translate="yes" xml:space="preserve">
          <source>The internal representation is opaque and cannot be converted to external term format and then back again without losing its properties (meaning it can not be sent to a process on another node and still remain a valid compiled match_spec, nor can it be stored on disk).</source>
          <target state="translated">内部表現は不透明であり、プロパティを失うことなく、外部の項形式に変換して再び戻すことはできません(別のノードのプロセスに送信しても、コンパイルされた有効なmatch_specを維持することはできませんし、ディスク上に保存することもできません)。</target>
        </trans-unit>
        <trans-unit id="6c115b27adcc796af14ec5adb8e1c50e34b4b2ef" translate="yes" xml:space="preserve">
          <source>The internal representation is opaque.</source>
          <target state="translated">内部表現は不透明です。</target>
        </trans-unit>
        <trans-unit id="7334ee5b04d77d686d637a0f70cc9375ca49af7d" translate="yes" xml:space="preserve">
          <source>The internal time format is used when converting between calendars.</source>
          <target state="translated">カレンダー間で変換する際に使用される内部時刻フォーマットです。</target>
        </trans-unit>
        <trans-unit id="1c746eb548e21139e2d2543ac649c03aeac54f5a" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;env&lt;/code&gt; of an application resource file has a list of tuples that map atoms to terms, and its contents are known as the application &lt;em&gt;environment&lt;/em&gt;. Note that this environment is unrelated to the operating system environment.</source>
          <target state="translated">アプリケーションリソースファイルの主要な &lt;code&gt;env&lt;/code&gt; には、アトムを用語にマップするタプルのリストがあり、その内容はアプリケーション&lt;em&gt;環境と&lt;/em&gt;呼ばれ&lt;em&gt;ます&lt;/em&gt;。この環境はオペレーティングシステム環境とは無関係であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3409677dd18b558166751c16ef637b64275c9b00" translate="yes" xml:space="preserve">
          <source>The key types in maps are allowed to overlap, and if they do, the leftmost key takes precedence. A map value does not belong to this type if it contains a key that is not in the allowed map keys.</source>
          <target state="translated">マップ内のキーの種類は重複してもかまいませんが、重複している場合は、左端のキーが優先されます。マップ値に、許可されているマップキー以外のキーが含まれている場合は、このタイプには属しません。</target>
        </trans-unit>
        <trans-unit id="32d41944ca5b336f1b48c86344355078fd3da940" translate="yes" xml:space="preserve">
          <source>The keyword list used with &lt;code&gt;defstruct&lt;/code&gt; defines what fields the struct will have along with their default values.</source>
          <target state="translated">&lt;code&gt;defstruct&lt;/code&gt; で使用されるキーワードリストは、構造体がどのフィールドを持つか、およびそれらのデフォルト値を定義します。</target>
        </trans-unit>
        <trans-unit id="e67b4b10fb8bead468c4a33dc123a05fee573455" translate="yes" xml:space="preserve">
          <source>The kind (&lt;code&gt;:def&lt;/code&gt; or &lt;code&gt;:defp&lt;/code&gt;) must be given, the function name, its arguments and the compilation options.</source>
          <target state="translated">種類（ &lt;code&gt;:def&lt;/code&gt; または &lt;code&gt;:defp&lt;/code&gt; ）、関数名、その引数、およびコンパイルオプションを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db3abef2e6392ab0276950699e4f4e0f758b4c0" translate="yes" xml:space="preserve">
          <source>The kind handled by formatting functions</source>
          <target state="translated">フォーマット機能で扱う種類</target>
        </trans-unit>
        <trans-unit id="35b01fa192b09fbd575c96a38ea9c12c69135b18" translate="yes" xml:space="preserve">
          <source>The last step is to change the registry to use the dynamic supervisor:</source>
          <target state="translated">最後のステップは、レジストリを変更してダイナミックスーパバイザを使用することです。</target>
        </trans-unit>
        <trans-unit id="ec09c363bc1673984c9ef7c8fd26b487f2e86ec0" translate="yes" xml:space="preserve">
          <source>The last step is to implement &lt;code&gt;KVServer.Command.run/1&lt;/code&gt;, to run the parsed commands against the &lt;code&gt;:kv&lt;/code&gt; application. Its implementation is shown below:</source>
          <target state="translated">最後のステップは、 &lt;code&gt;KVServer.Command.run/1&lt;/code&gt; を実装して、解析されたコマンドを &lt;code&gt;:kv&lt;/code&gt; アプリケーションに対して実行することです。その実装を以下に示します。</target>
        </trans-unit>
        <trans-unit id="a7d6dc59f16f27e400e615ab808e1ed8fe0b3a57" translate="yes" xml:space="preserve">
          <source>The last step is to replace all &lt;code&gt;Mix.env()&lt;/code&gt; calls by &lt;code&gt;config_env()&lt;/code&gt;.</source>
          <target state="translated">最後のステップは、すべての &lt;code&gt;Mix.env()&lt;/code&gt; 呼び出しを &lt;code&gt;config_env()&lt;/code&gt; に置き換えることです。</target>
        </trans-unit>
        <trans-unit id="1505f07b9a5dea491d06c3282407488da838a326" translate="yes" xml:space="preserve">
          <source>The last syntax convenience are &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; blocks. &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; blocks are equivalent to keywords as the last argument of a function call where the block contents are wrapped in parentheses. For example:</source>
          <target state="translated">最後の便利な構文は、 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; ブロックです。 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; ブロックは、ブロックの内容が括弧で囲まれている関数呼び出しの最後の引数としてのキーワードに相当します。例えば：</target>
        </trans-unit>
        <trans-unit id="bc0ec7829a3c5fbbae5ba7d71fb20b1484d4bd86" translate="yes" xml:space="preserve">
          <source>The left to right arrow (&lt;code&gt;-&amp;gt;&lt;/code&gt;) is represented similar to operators except that they are always part of a list, its left side represents a list of arguments and the right side is an expression.</source>
          <target state="translated">左から右への矢印（ &lt;code&gt;-&amp;gt;&lt;/code&gt; ）は、演算子のように表されます。ただし、演​​算子は常にリストの一部であり、左側は引数のリストを表し、右側は式です。</target>
        </trans-unit>
        <trans-unit id="a6289423275f2a3ff2ff61d789c2121d3f39f1f8" translate="yes" xml:space="preserve">
          <source>The left to right arrow (&lt;code&gt;-&amp;gt;&lt;/code&gt;) is used to establish a relationship between left and right, commonly referred as clauses. The left side may have zero, one, or more arguments; the right side is zero, one, or more expressions separated by new line. The &lt;code&gt;-&amp;gt;&lt;/code&gt; may appear one or more times between one of the following terminators: &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;, &lt;code&gt;fn&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; or &lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;. When &lt;code&gt;-&amp;gt;&lt;/code&gt; is used, only other clauses are allowed between those terminators. Mixing clauses and regular expressions is invalid syntax.</source>
          <target state="translated">左から右への矢印（ &lt;code&gt;-&amp;gt;&lt;/code&gt; ）は、一般的に句と呼ばれる、左と右の関係を確立するために使用されます。左側には0個、1個、またはそれ以上の引数があります。右側はゼロ、1、または改行で区切られた1つ以上の式です。 &lt;code&gt;-&amp;gt;&lt;/code&gt; 次のターミネーターの一方との間に1回以上表示されることがあります。 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; 、 &lt;code&gt;fn&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; または &lt;code&gt;(&lt;/code&gt; / &lt;code&gt;)&lt;/code&gt; 。 &lt;code&gt;-&amp;gt;&lt;/code&gt; を使用する場合、それらのターミネーターの間では他の句のみが許可されます。句と正規表現の混在は無効な構文です。</target>
        </trans-unit>
        <trans-unit id="62dfa2cc28c3ba61b288f1d13e4cdc1ed0d38af0" translate="yes" xml:space="preserve">
          <source>The left-hand side supports any expression you would use on the left-hand side of a match:</source>
          <target state="translated">左側は、マッチの左側で使うであろうあらゆる表現に対応しています。</target>
        </trans-unit>
        <trans-unit id="452a67adaa49211fbae18840ab0e8f40710191cd" translate="yes" xml:space="preserve">
          <source>The length of the match is equal to the &lt;code&gt;unit&lt;/code&gt; (a number of bits) times the &lt;code&gt;size&lt;/code&gt; (the number of repeated segments of length &lt;code&gt;unit&lt;/code&gt;).</source>
          <target state="translated">一致の長さは、 &lt;code&gt;unit&lt;/code&gt; （ビット数）に &lt;code&gt;size&lt;/code&gt; （長さ &lt;code&gt;unit&lt;/code&gt; の繰り返しセグメントの数）を掛けたものに等しくなります。</target>
        </trans-unit>
        <trans-unit id="9b58150e587a8ab776f8c034fd8c13d895af6209" translate="yes" xml:space="preserve">
          <source>The level of concurrency and the time tasks are allowed to run can be controlled via options (see the &quot;Options&quot; section below).</source>
          <target state="translated">同時実行のレベルとタスクの実行時間は、オプションで制御することができます(下記の「オプション」セクションを参照してください)。</target>
        </trans-unit>
        <trans-unit id="0f521fe02fee98ba137b8a2f629c9607b50efc70" translate="yes" xml:space="preserve">
          <source>The limit in the given &lt;code&gt;inspect_opts&lt;/code&gt; is respected and when reached this function stops processing and outputs &lt;code&gt;&quot;...&quot;&lt;/code&gt; instead.</source>
          <target state="translated">指定された &lt;code&gt;inspect_opts&lt;/code&gt; の制限が順守され、この関数に到達すると処理が停止し、代わりに &lt;code&gt;&quot;...&quot;&lt;/code&gt; 出力されます。</target>
        </trans-unit>
        <trans-unit id="c1945f9bf3a795845e8993a19f7a9dfe86f17eea" translate="yes" xml:space="preserve">
          <source>The line above makes &lt;code&gt;:kv&lt;/code&gt; available as a dependency inside &lt;code&gt;:kv_server&lt;/code&gt; and automatically starts the &lt;code&gt;:kv&lt;/code&gt; application before the server starts.</source>
          <target state="translated">上記の行は &lt;code&gt;:kv&lt;/code&gt; &lt;code&gt;:kv_server&lt;/code&gt; 内の依存関係として：kvを使用可能にし、サーバーが起動する前に &lt;code&gt;:kv&lt;/code&gt; アプリケーションを自動的に起動します。</target>
        </trans-unit>
        <trans-unit id="6f3150330fa7863de05e8e4f528741a7ca7bb476" translate="yes" xml:space="preserve">
          <source>The line where the module is defined and its file &lt;strong&gt;must&lt;/strong&gt; be passed as options.</source>
          <target state="translated">モジュールが定義されている行とそのファイルをオプションとして渡す&lt;strong&gt;必要&lt;/strong&gt;があります。</target>
        </trans-unit>
        <trans-unit id="65e5d401ccb2b8279fcac802ea4250628d92a6f3" translate="yes" xml:space="preserve">
          <source>The list of &lt;code&gt;entries&lt;/code&gt; is a non-empty list of two-element tuples where the first element is the PID and the second element is the value associated to the PID. If there are no entries for the given key, the callback is never invoked.</source>
          <target state="translated">リスト &lt;code&gt;entries&lt;/code&gt; 最初の要素はPIDであり、第二の要素はPIDに関連付けられた値である2要素タプルの非空リストです。指定されたキーのエントリがない場合、コールバックは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="d8d60e505b52f11e3ed1a46b8da9d55ffe759f2d" translate="yes" xml:space="preserve">
          <source>The list of callers of the current process can be retrieved from the Process dictionary with &lt;code&gt;Process.get(:&quot;$callers&quot;)&lt;/code&gt;. This will return either &lt;code&gt;nil&lt;/code&gt; or a list &lt;code&gt;[pid_n, ..., pid2, pid1]&lt;/code&gt; with at least one entry Where &lt;code&gt;pid_n&lt;/code&gt; is the PID that called the current process, &lt;code&gt;pid2&lt;/code&gt; called &lt;code&gt;pid_n&lt;/code&gt;, and &lt;code&gt;pid2&lt;/code&gt; was called by &lt;code&gt;pid1&lt;/code&gt;.</source>
          <target state="translated">現在のプロセスの呼び出し元のリストは、 &lt;code&gt;Process.get(:&quot;$callers&quot;)&lt;/code&gt; 使用してプロセスディクショナリから取得できます。これは、 &lt;code&gt;nil&lt;/code&gt; またはリスト &lt;code&gt;[pid_n, ..., pid2, pid1]&lt;/code&gt; 少なくとも1つのエントリを &lt;code&gt;pid_n&lt;/code&gt; ます。ここで、pid_nは現在のプロセスを呼び出したPID、 &lt;code&gt;pid2&lt;/code&gt; は &lt;code&gt;pid_n&lt;/code&gt; を呼び出し、 &lt;code&gt;pid2&lt;/code&gt; はpid1によって呼び出され &lt;code&gt;pid1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2470ea39e6ace181c558514355d2df667d90f1fa" translate="yes" xml:space="preserve">
          <source>The list of documents is folded &quot;from the right&quot;; in that, this function is similar to &lt;a href=&quot;https://hexdocs.pm/elixir/List.html#foldr/3&quot;&gt;&lt;code&gt;List.foldr/3&lt;/code&gt;&lt;/a&gt;, except that it doesn't expect an initial accumulator and uses the last element of &lt;code&gt;docs&lt;/code&gt; as the initial accumulator.</source>
          <target state="translated">ドキュメントのリストは「右から」折りたたまれています。その点で、この関数は&lt;a href=&quot;https://hexdocs.pm/elixir/List.html#foldr/3&quot;&gt; &lt;code&gt;List.foldr/3&lt;/code&gt; に&lt;/a&gt;似ていますが、初期アキュムレータを予期せず、 &lt;code&gt;docs&lt;/code&gt; の最後の要素を初期アキュムレータとして使用する点が異なります。</target>
        </trans-unit>
        <trans-unit id="6ed6bd036ce9220742f24381556f3269068288d9" translate="yes" xml:space="preserve">
          <source>The list of documents is folded &quot;from the right&quot;; in that, this function is similar to &lt;a href=&quot;list#foldr/3&quot;&gt;&lt;code&gt;List.foldr/3&lt;/code&gt;&lt;/a&gt;, except that it doesn't expect an initial accumulator and uses the last element of &lt;code&gt;docs&lt;/code&gt; as the initial accumulator.</source>
          <target state="translated">ドキュメントのリストは「右から」折りたたまれています。その点で、この関数は&lt;a href=&quot;list#foldr/3&quot;&gt; &lt;code&gt;List.foldr/3&lt;/code&gt; に&lt;/a&gt;似ていますが、初期アキュムレータを想定しておらず、 &lt;code&gt;docs&lt;/code&gt; の最後の要素を初期アキュムレータとして使用する点が異なります。</target>
        </trans-unit>
        <trans-unit id="55a959d98d885f3a529aa834328d65182098caeb" translate="yes" xml:space="preserve">
          <source>The local copy is stored in your &lt;code&gt;MIX_HOME&lt;/code&gt; (defaults to &lt;code&gt;~/.mix&lt;/code&gt;). This version of Rebar will be used as required by &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Compile.html&quot;&gt;&lt;code&gt;mix deps.compile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローカルコピーは &lt;code&gt;MIX_HOME&lt;/code&gt; に保存されます（デフォルトは &lt;code&gt;~/.mix&lt;/code&gt; ）。このバージョンの&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Compile.html&quot;&gt; &lt;code&gt;mix deps.compile&lt;/code&gt; &lt;/a&gt;必要に応じて使用されます。</target>
        </trans-unit>
        <trans-unit id="6c160860031d2eb83a58036161c7480f1f6e09fc" translate="yes" xml:space="preserve">
          <source>The lock is sent via &lt;code&gt;opts[:lock]&lt;/code&gt; but it may not always be available. In such cases, if the SCM requires a lock, it must return &lt;code&gt;:mismatch&lt;/code&gt;, otherwise simply &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">ロックは &lt;code&gt;opts[:lock]&lt;/code&gt; を介して送信されますが、常に使用できるとは限りません。このような場合、SCMがロックを必要とする場合は、 &lt;code&gt;:mismatch&lt;/code&gt; を返す必要があります。それ以外の場合は、単に &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="bae6744658312a20896e781b3c9940470c438e50" translate="yes" xml:space="preserve">
          <source>The low-level API for prying sessions and setting up breakpoints.</source>
          <target state="translated">セッションを詮索したり、ブレークポイントを設定したりするための低レベルAPIです。</target>
        </trans-unit>
        <trans-unit id="b1a2ec347d3bbd914ac71de3130a3ca5d8e9ba73" translate="yes" xml:space="preserve">
          <source>The lower case &lt;code&gt;~d&lt;/code&gt; variant does not exist as interpolation and escape characters are not useful for date sigils.</source>
          <target state="translated">小文字の &lt;code&gt;~d&lt;/code&gt; バリアントは存在しないため、補間とエスケープ文字は日付シギルには役立ちません。</target>
        </trans-unit>
        <trans-unit id="243770f815841be461d24f785d91a84dc8f25160" translate="yes" xml:space="preserve">
          <source>The lower case &lt;code&gt;~n&lt;/code&gt; variant does not exist as interpolation and escape characters are not useful for date time sigils.</source>
          <target state="translated">下部ケースは &lt;code&gt;~n&lt;/code&gt; の変異体は、補間として存在とエスケープしない文字は、日付時刻シギルのために有用ではありません。</target>
        </trans-unit>
        <trans-unit id="61c4050f1d545dfb95cf8194b35027ab14a85e08" translate="yes" xml:space="preserve">
          <source>The lower case &lt;code&gt;~t&lt;/code&gt; variant does not exist as interpolation and escape characters are not useful for time sigils.</source>
          <target state="translated">小文字の &lt;code&gt;~t&lt;/code&gt; バリアントは存在しないため、補間とエスケープ文字は時間シギルには役立ちません。</target>
        </trans-unit>
        <trans-unit id="32388371298b5aa74ba2be98958ecd5080c981d1" translate="yes" xml:space="preserve">
          <source>The lower case &lt;code&gt;~u&lt;/code&gt; variant does not exist as interpolation and escape characters are not useful for date time sigils.</source>
          <target state="translated">小文字の &lt;code&gt;~u&lt;/code&gt; バリアントは存在しないため、補間とエスケープ文字は日時シギルには役立ちません。</target>
        </trans-unit>
        <trans-unit id="94a5c210052abe863a1fe8f7104b55665bd29e19" translate="yes" xml:space="preserve">
          <source>The macro receives the representation of the code given as argument, while a function receives the result of the code given as argument. A macro must return a superset of the code representation. See &lt;a href=&quot;#t:input/0&quot;&gt;&lt;code&gt;input/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#t:output/0&quot;&gt;&lt;code&gt;output/0&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">マクロは引数として指定されたコードの表現を受け取り、関数は引数として指定されたコードの結果を受け取ります。マクロは、コード表現のスーパーセットを返す必要があります。詳細については、&lt;a href=&quot;#t:input/0&quot;&gt; &lt;code&gt;input/0&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#t:output/0&quot;&gt; &lt;code&gt;output/0&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ef1cd736ece10b4c740827fd1cda368fe6a8305" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;#debug/2&quot;&gt;&lt;code&gt;debug/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;info/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#notice/2&quot;&gt;&lt;code&gt;notice/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#warning/2&quot;&gt;&lt;code&gt;warning/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#error/2&quot;&gt;&lt;code&gt;error/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#critical/2&quot;&gt;&lt;code&gt;critical/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#alert/2&quot;&gt;&lt;code&gt;alert/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#emergency/2&quot;&gt;&lt;code&gt;emergency/2&lt;/code&gt;&lt;/a&gt; are preferred over this macro as they can automatically eliminate the call to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; altogether at compile time if desired (see the documentation for the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; module).</source>
          <target state="translated">マクロ&lt;a href=&quot;#debug/2&quot;&gt; &lt;code&gt;debug/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;info/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#notice/2&quot;&gt; &lt;code&gt;notice/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#warning/2&quot;&gt; &lt;code&gt;warning/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#error/2&quot;&gt; &lt;code&gt;error/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#critical/2&quot;&gt; &lt;code&gt;critical/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#alert/2&quot;&gt; &lt;code&gt;alert/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#emergency/2&quot;&gt; &lt;code&gt;emergency/2&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;への呼び出しを自動的に完全に排除できるため、このマクロよりも優先されます。必要に応じてコンパイル時間（&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照）。</target>
        </trans-unit>
        <trans-unit id="8467f6194459766a9d70ef8dad6012fd6200c681" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;#debug/2&quot;&gt;&lt;code&gt;debug/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#warn/2&quot;&gt;&lt;code&gt;warn/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;info/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#error/2&quot;&gt;&lt;code&gt;error/2&lt;/code&gt;&lt;/a&gt; are preferred over this macro as they can automatically eliminate the call to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; altogether at compile time if desired (see the documentation for the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; module).</source>
          <target state="translated">マクロ&lt;a href=&quot;#debug/2&quot;&gt; &lt;code&gt;debug/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#warn/2&quot;&gt; &lt;code&gt;warn/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;info/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#error/2&quot;&gt; &lt;code&gt;error/2&lt;/code&gt; &lt;/a&gt;は、必要に応じてコンパイル時に&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;への呼び出しを完全に自動的に排除できるため、このマクロよりも推奨されます（&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照）。</target>
        </trans-unit>
        <trans-unit id="824174ce5b570e4d9805c05f1124ce5c26a319b1" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;#defrecord/3&quot;&gt;&lt;code&gt;defrecord/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#defrecordp/3&quot;&gt;&lt;code&gt;defrecordp/3&lt;/code&gt;&lt;/a&gt; can be used to create records while &lt;a href=&quot;#extract/2&quot;&gt;&lt;code&gt;extract/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#extract_all/1&quot;&gt;&lt;code&gt;extract_all/1&lt;/code&gt;&lt;/a&gt; can be used to extract records from Erlang files.</source>
          <target state="translated">マクロ&lt;a href=&quot;#defrecord/3&quot;&gt; &lt;code&gt;defrecord/3&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#defrecordp/3&quot;&gt; &lt;code&gt;defrecordp/3&lt;/code&gt; &lt;/a&gt;を使用してレコードを作成でき、&lt;a href=&quot;#extract/2&quot;&gt; &lt;code&gt;extract/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#extract_all/1&quot;&gt; &lt;code&gt;extract_all/1&lt;/code&gt; &lt;/a&gt;を使用してErlangファイルからレコードを抽出できます。</target>
        </trans-unit>
        <trans-unit id="dd1487033e0043998b4a55854f41e5aff164999a" translate="yes" xml:space="preserve">
          <source>The macros in this module come in two flavors: named or operators. For example:</source>
          <target state="translated">このモジュールのマクロには、名前付きと演算子の2種類があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9f2bf18c746e61e235b955af779aaf9aaea45f54" translate="yes" xml:space="preserve">
          <source>The main entry point to compile source files.</source>
          <target state="translated">ソースファイルをコンパイルするためのメインのエントリーポイントです。</target>
        </trans-unit>
        <trans-unit id="38f9dca5177d03726cc73b1076b1d78de398e382" translate="yes" xml:space="preserve">
          <source>The main function in this module is &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt;, which parses a list of command line options and arguments into a keyword list:</source>
          <target state="translated">このモジュールの主な機能は&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; で&lt;/a&gt;、コマンドラインオプションと引数のリストをキーワードリストに解析します。</target>
        </trans-unit>
        <trans-unit id="a06fbfa6c4b60070753ff93ddfbef19aade6baec" translate="yes" xml:space="preserve">
          <source>The majority of the functions expect chardata. In case another type is given, functions will convert those types to string via the &lt;a href=&quot;https://hexdocs.pm/elixir/String.Chars.html&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol (as shown in typespecs). For more information on chardata, see the &quot;IO data&quot; section below.</source>
          <target state="translated">関数の大部分はchardataを期待しています。別の型が指定されている場合、関数は&lt;a href=&quot;https://hexdocs.pm/elixir/String.Chars.html&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルを介してそれらの型を文字列に変換します（typespecsに示されているように）。chardataの詳細については、以下の「IOデータ」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="852a05b0450dc656348efc6729f9e523cd593860" translate="yes" xml:space="preserve">
          <source>The majority of the functions expect chardata. In case another type is given, functions will convert those types to string via the &lt;a href=&quot;string.chars&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol (as shown in typespecs). For more information on chardata, see the &quot;IO data&quot; section below.</source>
          <target state="translated">関数の大部分はchardataを想定しています。別のタイプが指定された場合、関数は&lt;a href=&quot;string.chars&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルを介してそれらのタイプを文字列に変換します（typespecsに示されています）。chardataの詳細については、以下の「IOデータ」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="99c734179f1102a008e516a50860fb644aef0bb8" translate="yes" xml:space="preserve">
          <source>The majority of the functions in the &lt;code&gt;File&lt;/code&gt; module expect paths as arguments. Most commonly, those paths will be regular binaries. The &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; module provides facilities for working with such paths:</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; モジュールの関数の大部分は、引数としてパスを想定しています。最も一般的には、これらのパスは通常のバイナリになります。&lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;モジュールは、そのようなパスを操作するための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="14d50e0537a311e097eac9e5b800ff509846d646" translate="yes" xml:space="preserve">
          <source>The majority of the functions in this module do not interact with the file system, except for a few functions that require it (like &lt;a href=&quot;#wildcard/2&quot;&gt;&lt;code&gt;wildcard/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#expand/1&quot;&gt;&lt;code&gt;expand/1&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このモジュールの大部分の関数は、それを必要とするいくつかの関数（&lt;a href=&quot;#wildcard/2&quot;&gt; &lt;code&gt;wildcard/2&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#expand/1&quot;&gt; &lt;code&gt;expand/1&lt;/code&gt; など&lt;/a&gt;）を除いて、ファイルシステムと相互作用しません。</target>
        </trans-unit>
        <trans-unit id="53cb17dd3de6e34ca6338dd415345dba7ba819e3" translate="yes" xml:space="preserve">
          <source>The majority of times we spawn processes in Elixir, we spawn them as linked processes. Before we show an example with &lt;code&gt;spawn_link/1&lt;/code&gt;, let&amp;rsquo;s see what happens when a process started with &lt;code&gt;spawn/1&lt;/code&gt; fails:</source>
          <target state="translated">ほとんどの場合、Elixirでプロセスを生成しますが、リンクされたプロセスとして生成します。 &lt;code&gt;spawn_link/1&lt;/code&gt; の例を示す前に、 &lt;code&gt;spawn/1&lt;/code&gt; で開始されたプロセスが失敗したときに何が起こるかを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="dffb7c1527c61bbb5104fbd6ca60eac0e55a8d98" translate="yes" xml:space="preserve">
          <source>The map above defines a child with &lt;code&gt;:id&lt;/code&gt; of &lt;code&gt;Stack&lt;/code&gt; that is started by calling &lt;code&gt;Stack.start_link([:hello])&lt;/code&gt;.</source>
          <target state="translated">上記のマップは、 &lt;code&gt;Stack.start_link([:hello])&lt;/code&gt; を呼び出すことによって開始される &lt;code&gt;Stack&lt;/code&gt; の &lt;code&gt;:id&lt;/code&gt; を持つ子を定義します。</target>
        </trans-unit>
        <trans-unit id="10d66e531d4200425ddeb9a59e3170249b7e1aed" translate="yes" xml:space="preserve">
          <source>The map above defines a supervisor with &lt;code&gt;:id&lt;/code&gt; of &lt;code&gt;Stack&lt;/code&gt; that is started by calling &lt;code&gt;Stack.start_link([:hello])&lt;/code&gt;.</source>
          <target state="translated">上のマップは、 &lt;code&gt;Stack.start_link([:hello])&lt;/code&gt; を呼び出すことによって開始される &lt;code&gt;Stack&lt;/code&gt; の &lt;code&gt;:id&lt;/code&gt; を持つスーパーバイザーを定義しています。</target>
        </trans-unit>
        <trans-unit id="8bb3eb4a71679f85fc1f23e76313b0ee7d67d6ad" translate="yes" xml:space="preserve">
          <source>The map contains the following keys:</source>
          <target state="translated">マップには以下のキーが含まれています。</target>
        </trans-unit>
        <trans-unit id="89c1e1079a87250a9082cabf85f0e2b686337098" translate="yes" xml:space="preserve">
          <source>The map must be a function. The function receives an integer representing the code point of the character it wants to unescape. Here is the default mapping function implemented by Elixir:</source>
          <target state="translated">マップは関数でなければなりません。関数は、エスケープを解除したい文字のコードポイントを表す整数を受け取ります。ここにElixirが実装しているデフォルトのマッピング関数があります。</target>
        </trans-unit>
        <trans-unit id="23154a42b58e45ef674deb33492b4a7b042bd7a7" translate="yes" xml:space="preserve">
          <source>The mapping between code and data (the underlying AST) is what allows Elixir to implement &lt;code&gt;defmodule&lt;/code&gt;, &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, and others in Elixir itself. Elixir makes the constructs available for building the language accessible to developers who want to extend the language to new domains.</source>
          <target state="translated">コードとデータ（基になるAST）の間のマッピングは、ElixirがElixir自体に &lt;code&gt;defmodule&lt;/code&gt; 、 &lt;code&gt;def&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; などを実装できるようにするものです。Elixirは、言語を新しいドメインに拡張したい開発者がアクセスできる言語を構築するための構成を利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="a6991efb82e0a459b03a5b7c2a6877fbcec33018" translate="yes" xml:space="preserve">
          <source>The marker is what follows exactly after &lt;code&gt;&amp;lt;%&lt;/code&gt;. For example, &lt;code&gt;&amp;lt;% foo %&amp;gt;&lt;/code&gt; has an empty marker, but &lt;code&gt;&amp;lt;%= foo %&amp;gt;&lt;/code&gt; has &lt;code&gt;&quot;=&quot;&lt;/code&gt; as marker. The allowed markers so far are:</source>
          <target state="translated">マーカーは、 &lt;code&gt;&amp;lt;%&lt;/code&gt; の直後に続くものです。たとえば、 &lt;code&gt;&amp;lt;% foo %&amp;gt;&lt;/code&gt; には空のマーカーがありますが、 &lt;code&gt;&amp;lt;%= foo %&amp;gt;&lt;/code&gt; は &lt;code&gt;&quot;=&quot;&lt;/code&gt; マーカーがあります。これまでに許可されているマーカーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cbb00df7fd3fe762840c451309786ffe89ed55ff" translate="yes" xml:space="preserve">
          <source>The match operator</source>
          <target state="translated">マッチ演算子</target>
        </trans-unit>
        <trans-unit id="f8693773fd6ff53ba9de6646d15390dd067bbab4" translate="yes" xml:space="preserve">
          <source>The match operator is not only used to match against simple values, but it is also useful for destructuring more complex data types. For example, we can pattern match on tuples:</source>
          <target state="translated">match 演算子は単純な値とのマッチだけでなく、より複雑なデータ型を破壊するのにも便利です。たとえば、タプルに対してパターンマッチを行うことができます。</target>
        </trans-unit>
        <trans-unit id="a9ee80ea2fa936cf7002a1188db1c8b023133c11" translate="yes" xml:space="preserve">
          <source>The math module</source>
          <target state="translated">数学モジュール</target>
        </trans-unit>
        <trans-unit id="a810ba47e0afb01caa643d3b27868322a40ed5d7" translate="yes" xml:space="preserve">
          <source>The maximum atom size is of 255 Unicode code points.</source>
          <target state="translated">最大アトムサイズは255 Unicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="da10e2a3fe264c784b7e0fdd60cc0177cfc3d0fb" translate="yes" xml:space="preserve">
          <source>The message is formatted and displayed in the same format as used by Elixir's CLI.</source>
          <target state="translated">メッセージは、ElixirのCLIで使用されているものと同じ形式でフォーマットされて表示されます。</target>
        </trans-unit>
        <trans-unit id="ae60ef8d035658452d72bdc4024fef29dc953c1c" translate="yes" xml:space="preserve">
          <source>The message is not sent immediately. Therefore, &lt;code&gt;dest&lt;/code&gt; can receive other messages in-between even when &lt;code&gt;time&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">メッセージはすぐには送信されません。したがって、 &lt;code&gt;time&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合でも、 &lt;code&gt;dest&lt;/code&gt; はその間に他のメッセージを受信できます。</target>
        </trans-unit>
        <trans-unit id="1852e95a6b1b63c415d7d9c305bc3d2ad89962d3" translate="yes" xml:space="preserve">
          <source>The messages supported by ports and their counterpart function APIs are listed below:</source>
          <target state="translated">ports でサポートされているメッセージと、それに対応する関数 API を以下に示します。</target>
        </trans-unit>
        <trans-unit id="01f467e93a20e666a1a71239d36e1b21c0c18df1" translate="yes" xml:space="preserve">
          <source>The metadata in Elixir AST is a keyword list of values. Any key can be used and different parts of the compiler may use different keys. For example, the AST received by a macro will always include the &lt;code&gt;:line&lt;/code&gt; annotation, while the AST emitted by &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;quote/2&lt;/code&gt;&lt;/a&gt; will only have the &lt;code&gt;:line&lt;/code&gt; annotation if the &lt;code&gt;:line&lt;/code&gt; option is provided.</source>
          <target state="translated">Elixir ASTのメタデータは、値のキーワードリストです。任意のキーを使用でき、コンパイラのさまざまな部分でさまざまなキーを使用できます。たとえば、マクロによって受信されるASTには常に &lt;code&gt;:line&lt;/code&gt; アノテーションが含まれ&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt; &lt;code&gt;quote/2&lt;/code&gt; &lt;/a&gt;、quote / 2によって発行されるASTには、 &lt;code&gt;:line&lt;/code&gt; オプションが指定されている場合にのみ &lt;code&gt;:line&lt;/code&gt; アノテーションが含まれます。</target>
        </trans-unit>
        <trans-unit id="d94502ad54e0168b2a0dd7bb477e4117c14a5e51" translate="yes" xml:space="preserve">
          <source>The minimum example of a &lt;code&gt;test_helper.exs&lt;/code&gt; file would be:</source>
          <target state="translated">&lt;code&gt;test_helper.exs&lt;/code&gt; ファイルの最小の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="36e330d350d67652867a9b1fa816fde5c72c65e0" translate="yes" xml:space="preserve">
          <source>The modifiers available when creating a Regex are:</source>
          <target state="translated">Regexを作成する際に利用できる修飾子は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="554bd8892a2a2f959aaf3286fab34f7cb4eab543" translate="yes" xml:space="preserve">
          <source>The module &lt;a href=&quot;bitwise&quot;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt; also includes a handful of &lt;a href=&quot;bitwise#guards&quot;&gt;Erlang bitwise operations as guards&lt;/a&gt;.</source>
          <target state="translated">モジュール&lt;a href=&quot;bitwise&quot;&gt; &lt;code&gt;Bitwise&lt;/code&gt; &lt;/a&gt;には、&lt;a href=&quot;bitwise#guards&quot;&gt;ガードとして&lt;/a&gt;少数のErlangビット演算も含まれています。</target>
        </trans-unit>
        <trans-unit id="e6202288899e34ec4c71c794b46b5bcdf21e2a59" translate="yes" xml:space="preserve">
          <source>The module &lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html&quot;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt; also includes a handful of &lt;a href=&quot;bitwise#guards&quot;&gt;Erlang bitwise operations as guards&lt;/a&gt;.</source>
          <target state="translated">モジュール&lt;a href=&quot;https://hexdocs.pm/elixir/Bitwise.html&quot;&gt; &lt;code&gt;Bitwise&lt;/code&gt; &lt;/a&gt;には、&lt;a href=&quot;bitwise#guards&quot;&gt;ガードとして&lt;/a&gt;いくつかのErlangビット単位演算も含まれています。</target>
        </trans-unit>
        <trans-unit id="b6173752a29eeb047f2dfafc51f6c1560f53e16b" translate="yes" xml:space="preserve">
          <source>The module containing the custom sigil must be imported before the sigil syntax can be used.</source>
          <target state="translated">カスタムシグルを含むモジュールをインポートしてからシグル構文を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="11a697026fe35980b1003f6f8535e1c516332e63" translate="yes" xml:space="preserve">
          <source>The module documentation above contains documentation and examples for the supported &lt;code&gt;name&lt;/code&gt; values, summarized below:</source>
          <target state="translated">上記のモジュールのドキュメントには、サポートされている &lt;code&gt;name&lt;/code&gt; 値のドキュメントと例が含まれています。</target>
        </trans-unit>
        <trans-unit id="6052f32cd5500caeb9f54ee4b03cfe6002f80902" translate="yes" xml:space="preserve">
          <source>The module where the server callbacks are implemented, in this case &lt;code&gt;__MODULE__&lt;/code&gt; (meaning the current module)</source>
          <target state="translated">サーバーコールバックが実装されているモジュール、この場合は &lt;code&gt;__MODULE__&lt;/code&gt; （現在のモジュールを意味します）</target>
        </trans-unit>
        <trans-unit id="5d69468bc82e2cdb38bbc6e03284931c1987f717" translate="yes" xml:space="preserve">
          <source>The modules &lt;a href=&quot;http://erlang.org/doc/man/ets.html&quot;&gt;&lt;code&gt;ets&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://erlang.org/doc/man/dets.html&quot;&gt;&lt;code&gt;dets&lt;/code&gt;&lt;/a&gt; handle storage of large data structures in memory or on disk respectively.</source>
          <target state="translated">モジュール&lt;a href=&quot;http://erlang.org/doc/man/ets.html&quot;&gt; &lt;code&gt;ets&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;http://erlang.org/doc/man/dets.html&quot;&gt; &lt;code&gt;dets&lt;/code&gt; &lt;/a&gt;は、それぞれ大きなデータ構造のメモリまたはディスクへの格納を処理します。</target>
        </trans-unit>
        <trans-unit id="aad5655a8df039c1d174539db815749409e4e0c7" translate="yes" xml:space="preserve">
          <source>The modules defined in the file are not removed; calling this function only removes them from the list, allowing them to be required again.</source>
          <target state="translated">ファイルで定義されているモジュールは削除されません。この関数を呼び出すと、リストからモジュールが削除され、再び必要とされるようになります。</target>
        </trans-unit>
        <trans-unit id="ea2b347a7bc6a5535356bac28ba3f2b363ebc47b" translate="yes" xml:space="preserve">
          <source>The most common Erlang errors will be transformed into their Elixir counterpart. Those which are not will be transformed into the more generic &lt;a href=&quot;erlangerror&quot;&gt;&lt;code&gt;ErlangError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">最も一般的なErlangエラーは、対応するElixirに変換されます。ないものはより一般的な&lt;a href=&quot;erlangerror&quot;&gt; &lt;code&gt;ErlangError&lt;/code&gt; に&lt;/a&gt;変換されます：</target>
        </trans-unit>
        <trans-unit id="a0e8b772b81f68e7e9d79ec05dc5213643ac8a48" translate="yes" xml:space="preserve">
          <source>The most common Erlang errors will be transformed into their Elixir counterpart. Those which are not will be transformed into the more generic &lt;a href=&quot;https://hexdocs.pm/elixir/ErlangError.html&quot;&gt;&lt;code&gt;ErlangError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">最も一般的なErlangエラーは、対応するElixirに変換されます。そうでないものは、より一般的な&lt;a href=&quot;https://hexdocs.pm/elixir/ErlangError.html&quot;&gt; &lt;code&gt;ErlangError&lt;/code&gt; に&lt;/a&gt;変換されます：</target>
        </trans-unit>
        <trans-unit id="cdce2f67135b244ca8a17c4bfd6e3995d0cb745a" translate="yes" xml:space="preserve">
          <source>The most common sigil in Elixir is &lt;code&gt;~r&lt;/code&gt;, which is used to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_Expressions&quot;&gt;regular expressions&lt;/a&gt;:</source>
          <target state="translated">エリクシールで最も一般的な印章がある &lt;code&gt;~r&lt;/code&gt; 作成するために使用され、&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_Expressions&quot;&gt;正規表現を&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="5a6e4e1aba3cc5896f4b550cdd6a497deff0ddb9" translate="yes" xml:space="preserve">
          <source>The most common tasks are &lt;code&gt;mix deps.get&lt;/code&gt; and &lt;code&gt;mix deps.update&lt;/code&gt;. Once fetched, dependencies are automatically compiled for you. You can read more about deps by typing &lt;code&gt;mix help deps&lt;/code&gt;, and in the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.html&quot;&gt;documentation for the Mix.Tasks.Deps module&lt;/a&gt;.</source>
          <target state="translated">最も一般的なタスクがあり &lt;code&gt;mix deps.get&lt;/code&gt; と &lt;code&gt;mix deps.update&lt;/code&gt; 。フェッチされると、依存関係が自動的にコンパイルされます。depsの詳細については、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.html&quot;&gt;「&lt;/a&gt; &lt;code&gt;mix help deps&lt;/code&gt; 」と入力するか、Mix.Tasks.Depsモジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6b9cc7f30985b20ae7924700825d31d820820e24" translate="yes" xml:space="preserve">
          <source>The most common use case for heredoc sigils is when writing documentation. For example, writing escape characters in the documentation would soon become error prone because of the need to double-escape some characters:</source>
          <target state="translated">heredoc sigils の最も一般的な使用例は、ドキュメントを書くときです。例えば、ドキュメントにエスケープ文字を書くと、いくつかの文字をダブルエスケープする必要があるため、すぐにエラーになってしまいます。</target>
        </trans-unit>
        <trans-unit id="9a837abf2f926d7bd68d291aea16431f4ec63587" translate="yes" xml:space="preserve">
          <source>The most common use of &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Mix.Config&lt;/code&gt;&lt;/a&gt; is to define application configuration so that &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#get_env/3&quot;&gt;&lt;code&gt;Application.get_env/3&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; functions can be used to retrieve or further change them.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Mix.Config&lt;/code&gt; &lt;/a&gt;の最も一般的な使用法は、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#get_env/3&quot;&gt; &lt;code&gt;Application.get_env/3&lt;/code&gt; &lt;/a&gt;およびその他の&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;関数を使用してそれらを取得またはさらに変更できるように、アプリケーション構成を定義することです。</target>
        </trans-unit>
        <trans-unit id="b3b38c4c7bf2ec83c1026ecdaac1402a38fdf641" translate="yes" xml:space="preserve">
          <source>The most common way to raise an exception is via &lt;a href=&quot;#raise/2&quot;&gt;&lt;code&gt;raise/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">例外を発生させる最も一般的な方法は、&lt;a href=&quot;#raise/2&quot;&gt; &lt;code&gt;raise/2&lt;/code&gt; を使用すること&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="db6ae63cdeae86d32f305032ae11a7867f19ace7" translate="yes" xml:space="preserve">
          <source>The most commonly used keys are:</source>
          <target state="translated">最もよく使われるのはキーです。</target>
        </trans-unit>
        <trans-unit id="ec63aea88c70e103879cfde37537cf2e076faa36" translate="yes" xml:space="preserve">
          <source>The name of the generated macros will be &lt;code&gt;name&lt;/code&gt; (which has to be an atom). &lt;code&gt;tag&lt;/code&gt; is also an atom and is used as the &quot;tag&quot; for the record (i.e., the first element of the record tuple); by default (if &lt;code&gt;nil&lt;/code&gt;), it's the same as &lt;code&gt;name&lt;/code&gt;. &lt;code&gt;kv&lt;/code&gt; is a keyword list of &lt;code&gt;name: default_value&lt;/code&gt; fields for the new record.</source>
          <target state="translated">生成されるマクロの名前は &lt;code&gt;name&lt;/code&gt; （アトムである必要があります）になります。 &lt;code&gt;tag&lt;/code&gt; もアトムであり、レコードの「タグ」として使用されます（つまり、レコードタプルの最初の要素）。デフォルトでは（ &lt;code&gt;nil&lt;/code&gt; の場合）、 &lt;code&gt;name&lt;/code&gt; と同じです。 &lt;code&gt;kv&lt;/code&gt; は、 &lt;code&gt;name: default_value&lt;/code&gt; キーワードリストです。新しいレコードのdefault_valueフィールドです。</target>
        </trans-unit>
        <trans-unit id="c90ebcf1b0655ac03fd3dd0d53f96acb011b2609" translate="yes" xml:space="preserve">
          <source>The name of the service is &lt;code&gt;demo_demo&lt;/code&gt; because the name is built by concatenating the node name with the release name. Since Elixir automatically uses the same name for both, the service will be referenced as &lt;code&gt;demo_demo&lt;/code&gt;.</source>
          <target state="translated">サービスの名前は、ノード名とリリース名を連結して作成されるため、 &lt;code&gt;demo_demo&lt;/code&gt; です。Elixirは自動的に両方に同じ名前を使用するため、サービスは &lt;code&gt;demo_demo&lt;/code&gt; として参照されます。</target>
        </trans-unit>
        <trans-unit id="090750250669854ad5f2a1b18b4694400b5de691" translate="yes" xml:space="preserve">
          <source>The named sequences are represented by atoms.</source>
          <target state="translated">名前付き配列は原子で表されます。</target>
        </trans-unit>
        <trans-unit id="84dca7c82c4adab78e96e4275650ccd595bf63f7" translate="yes" xml:space="preserve">
          <source>The need for monitoring</source>
          <target state="translated">モニタリングの必要性</target>
        </trans-unit>
        <trans-unit id="11f3fb45a34842b8d6e2b1b6e9657cdd42649db8" translate="yes" xml:space="preserve">
          <source>The new child specs outlined in &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; (v1.5)</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;（v1.5）で概説されている新しい子の仕様</target>
        </trans-unit>
        <trans-unit id="5d5693a336fde96fc9f4a9263d265529c9d65820" translate="yes" xml:space="preserve">
          <source>The next two functions, &lt;code&gt;lookup/2&lt;/code&gt; and &lt;code&gt;create/2&lt;/code&gt;, are responsible for sending these requests to the server. In this case, we have used &lt;code&gt;{:lookup, name}&lt;/code&gt; and &lt;code&gt;{:create, name}&lt;/code&gt; respectively. Requests are often specified as tuples, like this, in order to provide more than one &amp;ldquo;argument&amp;rdquo; in that first argument slot. It&amp;rsquo;s common to specify the action being requested as the first element of a tuple, and arguments for that action in the remaining elements. Note that the requests must match the first argument to &lt;code&gt;handle_call/3&lt;/code&gt; or &lt;code&gt;handle_cast/2&lt;/code&gt;.</source>
          <target state="translated">次の2つの関数、 &lt;code&gt;lookup/2&lt;/code&gt; および &lt;code&gt;create/2&lt;/code&gt; は、これらのリクエストをサーバーに送信する役割を果たします。この場合、それぞれ &lt;code&gt;{:lookup, name}&lt;/code&gt; および &lt;code&gt;{:create, name}&lt;/code&gt; 使用しています。リクエストは、最初の引数スロットに複数の「引数」を提供するために、このようにタプルとして指定されることがよくあります。要求されているアクションをタプルの最初の要素として指定し、残りの要素でそのアクションの引数を指定するのが一般的です。リクエストは、最初の引数が &lt;code&gt;handle_call/3&lt;/code&gt; または &lt;code&gt;handle_cast/2&lt;/code&gt; に一致する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="987bf5fe1a29a589006df7a1c4246dedd1188aa8" translate="yes" xml:space="preserve">
          <source>The node list defaults to a list of all connected nodes.</source>
          <target state="translated">ノードリストのデフォルトは、接続されているすべてのノードのリストです。</target>
        </trans-unit>
        <trans-unit id="1e4f23ef668efde946b979656f1273bb8fc04978" translate="yes" xml:space="preserve">
          <source>The notation to represent the union of types is the pipe &lt;code&gt;|&lt;/code&gt;. For example, the typespec &lt;code&gt;type :: atom() | pid() | tuple()&lt;/code&gt; creates a type &lt;code&gt;type&lt;/code&gt; that can be either an &lt;code&gt;atom&lt;/code&gt;, a &lt;code&gt;pid&lt;/code&gt;, or a &lt;code&gt;tuple&lt;/code&gt;. This is usually called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;sum type&lt;/a&gt; in other languages</source>
          <target state="translated">型の和集合を表す表記はパイプです &lt;code&gt;|&lt;/code&gt; 。たとえば、typespec &lt;code&gt;type :: atom() | pid() | tuple()&lt;/code&gt; は、 &lt;code&gt;atom&lt;/code&gt; 、 &lt;code&gt;pid&lt;/code&gt; 、または &lt;code&gt;tuple&lt;/code&gt; のいずれかであるタイプ &lt;code&gt;type&lt;/code&gt; を作成します。これは通常、他の言語では&lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;合計型&lt;/a&gt;と呼ばれます</target>
        </trans-unit>
        <trans-unit id="3ab75e9fdd50914ae4096566ba3ee4815b968a2a" translate="yes" xml:space="preserve">
          <source>The number of arguments in each anonymous function clause needs to be the same, otherwise an error is raised.</source>
          <target state="translated">各匿名関数節の引数の数は同じである必要があり、そうでない場合はエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="58646d5d2a31b22e08348e0987be6fb1b1552f1b" translate="yes" xml:space="preserve">
          <source>The offset is capped to the length of the string. Returns a tuple with two elements.</source>
          <target state="translated">オフセットは、文字列の長さに合わせて上限が設定されます。2つの要素を持つタプルを返します。</target>
        </trans-unit>
        <trans-unit id="fc47b2c77b07a194ec3fbe01564888859692ecf9" translate="yes" xml:space="preserve">
          <source>The only difference between &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#==/2&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; is that &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; is strict when it comes to comparing integers and floats:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#==/2&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;の唯一の違いは、整数と浮動小数点数の比較に関しては&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;が厳密であるということです。</target>
        </trans-unit>
        <trans-unit id="7ac751725399e216969e58864613bb897ae9753a" translate="yes" xml:space="preserve">
          <source>The only difference between &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; is that &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt; is strict when it comes to comparing integers and floats:</source>
          <target state="translated">&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;の唯一の違いは、整数と浮動小数点数の比較に関して&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;が厳密であることです。</target>
        </trans-unit>
        <trans-unit id="42fcb26dc86b08d995f11bae71b9989f2f7b728a" translate="yes" xml:space="preserve">
          <source>The only exception to the compatibility guarantees above are experimental features, which will be explicitly marked as such, and do not provide any compatibility guarantee until they are stabilized.</source>
          <target state="translated">上記の互換性保証の唯一の例外は実験的な機能であり、そのように明示的にマークされ、安定するまでは互換性の保証を提供しません。</target>
        </trans-unit>
        <trans-unit id="7f057536218de2bcb4eee9345b4ec9df6b4b0d58" translate="yes" xml:space="preserve">
          <source>The only exception to this rule is that &lt;code&gt;:skip&lt;/code&gt; is found in the &lt;code&gt;include&lt;/code&gt; filter, &lt;code&gt;:ok&lt;/code&gt; is returned regardless of whether the test was excluded or not.</source>
          <target state="translated">このルールの唯一の例外は、 &lt;code&gt;:skip&lt;/code&gt; が &lt;code&gt;include&lt;/code&gt; フィルターで検出され、テストが除外されたかどうかに関係なく &lt;code&gt;:ok&lt;/code&gt; が返されることです。</target>
        </trans-unit>
        <trans-unit id="5b80c752c5e1cd83678df53e132bab989245bf95" translate="yes" xml:space="preserve">
          <source>The only function required to be implemented is &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt; which does the conversion.</source>
          <target state="translated">実装が必要な唯一の関数は、変換を行う&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3738a03df0b0292cd0fc541a62dccb969b8d4008" translate="yes" xml:space="preserve">
          <source>The only function required to be implemented is &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt;, which does the conversion.</source>
          <target state="translated">実装が必要な唯一の関数は、変換を行う&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="9818a90770672e6306fec6ad6c84e3f7b8114355" translate="yes" xml:space="preserve">
          <source>The only function that must be implemented is &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt; which does the conversion.</source>
          <target state="translated">実装する必要がある唯一の関数は、変換を行う&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ade81e07849e4708797e256e50ea8daa5d7c1c81" translate="yes" xml:space="preserve">
          <source>The only restrictions when creating anonymous functions is that at least one placeholder must be present, i.e. it must contain at least &lt;code&gt;&amp;amp;1&lt;/code&gt;, and that block expressions are not supported:</source>
          <target state="translated">無名関数を作成する場合の唯一の制限は、少なくとも1つのプレースホルダーが存在する必要があること、つまり少なくとも &lt;code&gt;&amp;amp;1&lt;/code&gt; が含まれている必要があること、およびブロック式がサポートされていないことです。</target>
        </trans-unit>
        <trans-unit id="5bde5d825d53af6907621f0cb4672e1213049a4a" translate="yes" xml:space="preserve">
          <source>The operation is Unicode unsafe.</source>
          <target state="translated">この操作はUnicodeでは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="820323122693cc928f8711400bb7374b1eb73417" translate="yes" xml:space="preserve">
          <source>The operation is performed on the binary floating point, without a conversion to decimal.</source>
          <target state="translated">演算は、10進数への変換を行わずに、2進数の浮動小数点に対して行われます。</target>
        </trans-unit>
        <trans-unit id="215bce352413475dfa0bf14c5c4c4836769feeb5" translate="yes" xml:space="preserve">
          <source>The operators that Elixir uses (for example, &lt;code&gt;+&lt;/code&gt;) can be defined by any module and used in place of the ones defined by Elixir, provided they're specifically not imported from &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; (which is imported everywhere by default). For example:</source>
          <target state="translated">Elixirが使用する演算子（たとえば、 &lt;code&gt;+&lt;/code&gt; ）は、任意のモジュールで定義でき、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;（デフォルトではどこにでもインポートされる）から特にインポートされていない限り、Elixirで定義された演算子の代わりに使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="54a4338b50a933ea4de60119e3d7bc1ba6605f93" translate="yes" xml:space="preserve">
          <source>The operators that Elixir uses (for example, &lt;code&gt;+&lt;/code&gt;) can be defined by any module and used in place of the ones defined by Elixir, provided they're specifically not imported from &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; (which is imported everywhere by default). For example:</source>
          <target state="translated">Elixirが使用する演算子（たとえば、 &lt;code&gt;+&lt;/code&gt; ）は、任意のモジュールで定義でき、Elixir で定義された演算子の代わりに使用できます。ただし、それらは特に&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;からインポートされない場合（デフォルトですべての場所にインポートされます）。例えば：</target>
        </trans-unit>
        <trans-unit id="d083ec82ad103a49d0f2c21f621e7d904b855c2f" translate="yes" xml:space="preserve">
          <source>The opposite of converting a string to its quoted form is &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#to_string/2&quot;&gt;&lt;code&gt;Macro.to_string/2&lt;/code&gt;&lt;/a&gt;, which converts a quoted form to a string/binary representation.</source>
          <target state="translated">文字列を引用符で囲まれた形式に変換するのとは逆に、&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html#to_string/2&quot;&gt; &lt;code&gt;Macro.to_string/2&lt;/code&gt; &lt;/a&gt;があります。これは、引用符で囲まれた形式を文字列/バイナリ表現に変換します。</target>
        </trans-unit>
        <trans-unit id="35424357ca8ff1662dd08fa3f02518cdf95e9618" translate="yes" xml:space="preserve">
          <source>The opposite of converting a string to its quoted form is &lt;a href=&quot;macro#to_string/2&quot;&gt;&lt;code&gt;Macro.to_string/2&lt;/code&gt;&lt;/a&gt;, which converts a quoted form to a string/binary representation.</source>
          <target state="translated">文字列を引用符付きの形式に変換するのとは反対に、&lt;a href=&quot;macro#to_string/2&quot;&gt; &lt;code&gt;Macro.to_string/2&lt;/code&gt; &lt;/a&gt;は、引用符付きの形式を文字列/バイナリ表現に変換します。</target>
        </trans-unit>
        <trans-unit id="648996e2b78ff86fed25658983c86c1ca75fe83d" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;--abort-if-any&lt;/code&gt; can be used for the command to fail if deprecated calls exist.</source>
          <target state="translated">オプション &lt;code&gt;--abort-if-any&lt;/code&gt; を使用すると、非推奨の呼び出しが存在する場合にコマンドが失敗します。</target>
        </trans-unit>
        <trans-unit id="719eb9d884931feb59017fec9c07b6c8395fab97" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;--abort-if-any&lt;/code&gt; can be used for the command to fail if unreachable calls exist.</source>
          <target state="translated">オプション &lt;code&gt;--abort-if-any&lt;/code&gt; を使用すると、到達できない呼び出しが存在する場合にコマンドが失敗します。</target>
        </trans-unit>
        <trans-unit id="098132f317e5ef6b4049ca986c6beb4394ebb00e" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; can be used with &lt;code&gt;@derive&lt;/code&gt; to specify which fields should and should not appear in the algebra document:</source>
          <target state="translated">オプション &lt;code&gt;:only&lt;/code&gt; と &lt;code&gt;:except&lt;/code&gt; を &lt;code&gt;@derive&lt;/code&gt; と共に使用して、代数ドキュメントに表示するフィールドと表示しないフィールドを指定できます。</target>
        </trans-unit>
        <trans-unit id="1ca038b4953a725a1168758bdb05bf6957d97558" translate="yes" xml:space="preserve">
          <source>The options above have different properties. Both &lt;code&gt;:rpc&lt;/code&gt; and using a GenServer would serialize your requests on a single server, while tasks are effectively running asynchronously on the remote node, with the only serialization point being the spawning done by the supervisor.</source>
          <target state="translated">上記のオプションには異なるプロパティがあります。 &lt;code&gt;:rpc&lt;/code&gt; とGenServerの両方を使用すると、単一のサーバーで要求がシリアル化されます。一方、タスクはリモートノードで効果的に非同期で実行され、唯一のシリアル化ポイントは、スーパーバイザによって生成されます。</target>
        </trans-unit>
        <trans-unit id="ec569bf070d46fd1797683900e4e0d1b42dd476e" translate="yes" xml:space="preserve">
          <source>The options can also be used to register a supervisor name. The supported values are described under the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">オプションを使用して、スーパーバイザー名を登録することもできます。サポートされている値は、&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;モジュールドキュメントの「名前の登録」セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="dbbff1ba0f3f44314e39e2577a433b4751e9e390" translate="yes" xml:space="preserve">
          <source>The options can also be used to register a supervisor name. The supported values are described under the &quot;Name registration&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">オプションを使用して、スーパーバイザー名を登録することもできます。サポートされている値については、&lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントの「名前の登録」セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="b29b1695f7e1a72d94e875780fae402a43a9edf2" translate="yes" xml:space="preserve">
          <source>The options given in the child specification are documented in &lt;a href=&quot;#start_link/1&quot;&gt;&lt;code&gt;start_link/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">子仕様で指定されたオプションは、&lt;a href=&quot;#start_link/1&quot;&gt; &lt;code&gt;start_link/1&lt;/code&gt; に&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="29149d2185c124051b475d7edf03c7125bd21d1c" translate="yes" xml:space="preserve">
          <source>The options not available are:</source>
          <target state="translated">利用できないオプションは</target>
        </trans-unit>
        <trans-unit id="4550dfac2891c5670508cc8032dc4a8ebcd0b681" translate="yes" xml:space="preserve">
          <source>The order they are returned is guaranteed to be sorted for proper dependency resolution. For example, if A depends on B, then B will listed before A.</source>
          <target state="translated">それらが返される順序は、適切な依存関係の解決のためにソートされることが保証されています。例えば、AがBに依存している場合、BはAの前にリストアップされます。</target>
        </trans-unit>
        <trans-unit id="df79e73939e2f96120d0bd91e6ec1e8015418fd3" translate="yes" xml:space="preserve">
          <source>The original &lt;code&gt;List&lt;/code&gt; can still be accessed within &lt;code&gt;Stats&lt;/code&gt; by the fully-qualified name &lt;code&gt;Elixir.List&lt;/code&gt;.</source>
          <target state="translated">元の &lt;code&gt;List&lt;/code&gt; は、 &lt;code&gt;Stats&lt;/code&gt; 内で完全修飾名 &lt;code&gt;Elixir.List&lt;/code&gt; を使用して引き続きアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ce9ed5ea2ea656edc685034fbbcbc4be784892bd" translate="yes" xml:space="preserve">
          <source>The output can be decorated with a label, by providing the &lt;code&gt;:label&lt;/code&gt; option to easily distinguish it from other &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;IO.inspect/2&lt;/code&gt;&lt;/a&gt; calls. The label will be printed before the inspected &lt;code&gt;item&lt;/code&gt;.</source>
          <target state="translated">出力は、他の&lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;IO.inspect/2&lt;/code&gt; &lt;/a&gt;呼び出しと簡単に区別できるように &lt;code&gt;:label&lt;/code&gt; オプションを提供することにより、ラベルで装飾できます。ラベルは検査 &lt;code&gt;item&lt;/code&gt; 前に印刷されます。</target>
        </trans-unit>
        <trans-unit id="e1668a9a07e94faf6e48dc573decf8c9122af382" translate="yes" xml:space="preserve">
          <source>The output can be decorated with a label, by providing the &lt;code&gt;:label&lt;/code&gt; option to easily distinguish it from other &lt;a href=&quot;io#inspect/2&quot;&gt;&lt;code&gt;IO.inspect/2&lt;/code&gt;&lt;/a&gt; calls. The label will be printed before the inspected &lt;code&gt;item&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:label&lt;/code&gt; オプションを提供して、他の&lt;a href=&quot;io#inspect/2&quot;&gt; &lt;code&gt;IO.inspect/2&lt;/code&gt; &lt;/a&gt;呼び出しと簡単に区別できるように、出力をラベルで装飾できます。ラベルは検査済み &lt;code&gt;item&lt;/code&gt; 前に印刷されます。</target>
        </trans-unit>
        <trans-unit id="f95d4e3d274d4d273eca22868ba00ceeec8b577f" translate="yes" xml:space="preserve">
          <source>The output of a macro</source>
          <target state="translated">マクロの出力</target>
        </trans-unit>
        <trans-unit id="a8fcd6a77b8cc147c47e87ab2b38b5ca8be3e761" translate="yes" xml:space="preserve">
          <source>The path for local archives or escripts.</source>
          <target state="translated">ローカルアーカイブまたはエスクリプトのためのパス。</target>
        </trans-unit>
        <trans-unit id="abd015aedaea96a1467039e45829bb4bd7fad58c" translate="yes" xml:space="preserve">
          <source>The path is expanded with &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; before being appended. If this path does not exist, an error is returned.</source>
          <target state="translated">パスは、追加される前に&lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; で&lt;/a&gt;展開されます。このパスが存在しない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="e20a72d38a5ba46e84750b746640ae5729db0fc4" translate="yes" xml:space="preserve">
          <source>The path is expanded with &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; before being deleted. If the path does not exist, this function returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">パスは、削除される前に&lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; で&lt;/a&gt;展開されます。パスが存在しない場合、この関数は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e11342758ba07f1f86c835e6c8736ad536d0d920" translate="yes" xml:space="preserve">
          <source>The path is expanded with &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; before being prepended. If this path does not exist, an error is returned.</source>
          <target state="translated">パスは、先頭に追加される前に&lt;a href=&quot;https://hexdocs.pm/elixir/Path.html#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; で&lt;/a&gt;展開されます。このパスが存在しない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="313b3334ac8a23ead5e2d1a7fbc216efaabeea04" translate="yes" xml:space="preserve">
          <source>The path is expanded with &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; before being appended. If this path does not exist, an error is returned.</source>
          <target state="translated">パスは、追加される前に&lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; で&lt;/a&gt;展開されます。このパスが存在しない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="6d4310f7386df1164fbd8636a1690c05bd665337" translate="yes" xml:space="preserve">
          <source>The path is expanded with &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; before being deleted. If the path does not exist, this function returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">パスは削除される前に&lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; で&lt;/a&gt;展開されます。パスが存在しない場合、この関数は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="838b6d73e0a2709d4a72a878f5b42de538ac3faf" translate="yes" xml:space="preserve">
          <source>The path is expanded with &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; before being prepended. If this path does not exist, an error is returned.</source>
          <target state="translated">パスは、先頭に追加される前に&lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; で&lt;/a&gt;展開されます。このパスが存在しない場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="e091aa0884c675c72ffb53e03abf27a7e2087b1e" translate="yes" xml:space="preserve">
          <source>The paths can be either a charlist or a string. Internally they are worked on as charlists, so passing them as lists avoid extra conversion.</source>
          <target state="translated">パスは文字列でも文字列でもどちらでも構いません。内部的には文字列として処理されるので、リストとして渡すことで余分な変換を避けることができます。</target>
        </trans-unit>
        <trans-unit id="668bfdcbbc88064352f1db03b861c85f89d02114" translate="yes" xml:space="preserve">
          <source>The pattern can be a module name, such as &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; to count all calls to that module, a call without arity, such as &lt;code&gt;String.split&lt;/code&gt;, to count all calls to that function regardless of arity, or a call with arity, such as &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#split/2&quot;&gt;&lt;code&gt;String.split/2&lt;/code&gt;&lt;/a&gt;, to count all calls to that exact module, function and arity.</source>
          <target state="translated">パターンは、そのモジュールへのすべての呼び出しをカウントする&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;などのモジュール名、arityに関係なくその関数へのすべての呼び出しをカウントする &lt;code&gt;String.split&lt;/code&gt; などのアリティなしの呼び出し、または&lt;a href=&quot;https://hexdocs.pm/elixir/String.html#split/2&quot;&gt; &lt;code&gt;String.split/2&lt;/code&gt; &lt;/a&gt;などのアリティ付きの呼び出しにすることができます。.split / 2、その正確なモジュール、関数、およびアリティへのすべての呼び出しをカウントします。</target>
        </trans-unit>
        <trans-unit id="e6382a5f5628ad82e683e23e1297c423e36e37f3" translate="yes" xml:space="preserve">
          <source>The pattern may also be a list of strings and the replacement may also be a function that receives the matched patterns:</source>
          <target state="translated">パターンは文字列のリストであってもよく、置換はマッチしたパターンを受け取る関数であってもよい。</target>
        </trans-unit>
        <trans-unit id="d3b17b28d01efecd387f4a558aef5d36e3e123e9" translate="yes" xml:space="preserve">
          <source>The pattern may also be a list of strings and the replacement may also be a function that receives the matches:</source>
          <target state="translated">パターンは文字列のリストであってもよく、置換はマッチしたものを受け取る関数であってもよい。</target>
        </trans-unit>
        <trans-unit id="5c2c0506c6452af899d4d254cc14a3c00d8d753c" translate="yes" xml:space="preserve">
          <source>The pattern of keeping multiple applications in the same repository is known as &amp;ldquo;mono-repo&amp;rdquo;. Umbrella projects maximize this pattern by providing conveniences to compile, test and run multiple applications at once.</source>
          <target state="translated">複数のアプリケーションを同じリポジトリに保持するパターンは、「モノリポジトリ」と呼ばれます。Umbrellaプロジェクトは、複数のアプリケーションを一度にコンパイル、テスト、および実行する便利さを提供することにより、このパターンを最大化します。</target>
        </trans-unit>
        <trans-unit id="b5336f2e10af99a0ddce0df1dbcc6953c1b3edca" translate="yes" xml:space="preserve">
          <source>The pin operator</source>
          <target state="translated">ピン演算子</target>
        </trans-unit>
        <trans-unit id="8a16097e3345670b784d58d96c0daf29bd6b6363" translate="yes" xml:space="preserve">
          <source>The pipe operator</source>
          <target state="translated">パイプオペレーター</target>
        </trans-unit>
        <trans-unit id="38ac69a732c3ec695582cbd0d48d9b6cb576dd15" translate="yes" xml:space="preserve">
          <source>The port can be opened through four main mechanisms.</source>
          <target state="translated">ポートは主に4つの機構で開くことができます。</target>
        </trans-unit>
        <trans-unit id="16f2f4882ba1e010d9493752e86925be5a3100f2" translate="yes" xml:space="preserve">
          <source>The power of Elixir&amp;rsquo;s extensibility comes when protocols and structs are used together.</source>
          <target state="translated">Elixirの拡張性の威力は、プロトコルと構造体が一緒に使用されるときに生まれます。</target>
        </trans-unit>
        <trans-unit id="4539c5e2ab058d8719dac59fa3bb2dc3b38cff89" translate="yes" xml:space="preserve">
          <source>The precision represents the number of digits that must be used when representing the microseconds to external format. If the precision is 0, it means microseconds must be skipped.</source>
          <target state="translated">精度は、マイクロ秒を外部フォーマットで表現する際に使用しなければならない桁数を表します。精度が0の場合、マイクロ秒をスキップしなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="7b62847898ead6d12d866064984b0e4967caa7b6" translate="yes" xml:space="preserve">
          <source>The previous implementation used pipelines which made the logic straightforward to follow. However, now that we need to handle different error codes along the way, our server logic is nested inside many &lt;code&gt;case&lt;/code&gt; calls.</source>
          <target state="translated">以前の実装ではパイプラインを使用していたため、ロジックを簡単に追跡できました。ただし、途中でさまざまなエラーコードを処理する必要があるため、サーバーロジックは多くの &lt;code&gt;case&lt;/code&gt; 呼び出し内にネストされます。</target>
        </trans-unit>
        <trans-unit id="199cc5f932aae17375561fec949a9c5a51d6d815" translate="yes" xml:space="preserve">
          <source>The problem with the code above is that, if the user supplies an invalid input, the error will be raised deep inside the library, which makes it confusing for users. Furthermore, when you don't validate the values at the boundary, the internals of your library are never quite sure which kind of values they are working with.</source>
          <target state="translated">上記のコードの問題点は、ユーザが無効な入力を提供した場合、ライブラリの奥深くでエラーが発生し、ユーザを混乱させることです。さらに、境界で値を検証しないと、ライブラリの内部ではどのような値を使っているのかがわからなくなってしまいます。</target>
        </trans-unit>
        <trans-unit id="523d730771dc4a286c57cbc053f5c708e3c1f6ea" translate="yes" xml:space="preserve">
          <source>The process is terminated, if there's one. The child specification is kept unless the child is temporary.</source>
          <target state="translated">ある場合は処理を終了します。子が一時的なものでない限り、子の指定は保持されます。</target>
        </trans-unit>
        <trans-unit id="b431d95d4131709473d087764c74e5d0bd63926d" translate="yes" xml:space="preserve">
          <source>The process of taking a list and &lt;em&gt;reducing&lt;/em&gt; it down to one value is known as a &lt;em&gt;reduce algorithm&lt;/em&gt; and is central to functional programming.</source>
          <target state="translated">リストを取得して1つの値に&lt;em&gt;減らす&lt;/em&gt;プロセスは、&lt;em&gt;reduceアルゴリズム&lt;/em&gt;と呼ばれ、関数型プログラミングの中心です。</target>
        </trans-unit>
        <trans-unit id="2fe675ae074650fc0dd2cca82261ebbd5e4a0afa" translate="yes" xml:space="preserve">
          <source>The process that sends the message does not block on &lt;code&gt;send/2&lt;/code&gt;, it puts the message in the recipient&amp;rsquo;s mailbox and continues. In particular, a process can send messages to itself.</source>
          <target state="translated">メッセージを送信するプロセスは &lt;code&gt;send/2&lt;/code&gt; でブロックせず、メッセージを受信者のメールボックスに入れて続行します。特に、プロセスはそれ自体にメッセージを送信できます。</target>
        </trans-unit>
        <trans-unit id="f279aa503c0e9c1a8851aaff4d4667435775ccbe" translate="yes" xml:space="preserve">
          <source>The project name is given in the &lt;code&gt;snake_case&lt;/code&gt; convention where all letters are lowercase and words are separate with underscores. This is the same convention used by variables, function names and atoms in Elixir. See the &lt;a href=&quot;naming-conventions&quot;&gt;Naming Conventions&lt;/a&gt; document for more information.</source>
          <target state="translated">プロジェクト名は、すべての文字が小文字で、単語がアンダースコアで区切られている &lt;code&gt;snake_case&lt;/code&gt; 規則で指定されています。これは、エリクサーの変数、関数名、アトムで使用されるのと同じ規則です。詳細については、&lt;a href=&quot;naming-conventions&quot;&gt;命名規則の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ee55aee8e2dfe77fe02c53dba2352810a3c64b0a" translate="yes" xml:space="preserve">
          <source>The protocol definition would look like this:</source>
          <target state="translated">プロトコルの定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bc915ce7d8df69961e91346b51ae1b4406aeabbb" translate="yes" xml:space="preserve">
          <source>The queue module</source>
          <target state="translated">テールモジュール</target>
        </trans-unit>
        <trans-unit id="0af8f5620b697ca5fb92373212c500e4cb31990a" translate="yes" xml:space="preserve">
          <source>The rand module</source>
          <target state="translated">ランドモジュール</target>
        </trans-unit>
        <trans-unit id="ff54517df928691d964fdb5317bf18da5a260890" translate="yes" xml:space="preserve">
          <source>The rationale behind this behaviour is to better support Erlang libraries which may return text as charlists instead of Elixir strings. In Erlang, charlists are the default way of handling strings, while in Elixir it's binaries. One example of such functions is &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#loaded_applications/0&quot;&gt;&lt;code&gt;Application.loaded_applications/0&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">この動作の背後にある理論的根拠は、Elixir文字列ではなく文字リストとしてテキストを返す可能性のあるErlangライブラリをより適切にサポートすることです。Erlangでは、charlistが文字列を処理するデフォルトの方法ですが、Elixirではバイナリです。このような関数の一例は、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#loaded_applications/0&quot;&gt; &lt;code&gt;Application.loaded_applications/0&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="231da92c7cb81a49b248aa20d7528608e5de9c35" translate="yes" xml:space="preserve">
          <source>The rationale behind this behaviour is to better support Erlang libraries which may return text as charlists instead of Elixir strings. One example of such functions is &lt;a href=&quot;application#loaded_applications/0&quot;&gt;&lt;code&gt;Application.loaded_applications/0&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">この動作の背後にある理論的根拠は、Elixir文字列ではなく文字リストとしてテキストを返す可能性があるErlangライブラリをよりよくサポートすることです。そのような関数の一例が&lt;a href=&quot;application#loaded_applications/0&quot;&gt; &lt;code&gt;Application.loaded_applications/0&lt;/code&gt; &lt;/a&gt;です：</target>
        </trans-unit>
        <trans-unit id="22c7e6cba80de4bce6770359917648b6c44cab9b" translate="yes" xml:space="preserve">
          <source>The real benefit of protocols comes when mixed with structs. For instance, Elixir ships with many data types implemented as structs, like &lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;. We can implement the &lt;code&gt;Size&lt;/code&gt; protocol for those types as well:</source>
          <target state="translated">プロトコルの本当の利点は、構造体と組み合わせると得られます。たとえば、Elixirには、&lt;a href=&quot;https://hexdocs.pm/elixir/MapSet.html&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;などの構造体として実装された多くのデータ型が付属しています。これらのタイプの &lt;code&gt;Size&lt;/code&gt; プロトコルも実装できます。</target>
        </trans-unit>
        <trans-unit id="bd093bcc0572d7db8f0249b943686c7ab44cd28f" translate="yes" xml:space="preserve">
          <source>The real benefit of protocols comes when mixed with structs. For instance, Elixir ships with many data types implemented as structs, like &lt;a href=&quot;mapset&quot;&gt;&lt;code&gt;MapSet&lt;/code&gt;&lt;/a&gt;. We can implement the &lt;code&gt;Size&lt;/code&gt; protocol for those types as well:</source>
          <target state="translated">プロトコルの本当の利点は、構造体と組み合わせると得られます。たとえば、Elixirには、&lt;a href=&quot;mapset&quot;&gt; &lt;code&gt;MapSet&lt;/code&gt; &lt;/a&gt;などの構造体として実装された多くのデータ型が付属しています。これらのタイプの &lt;code&gt;Size&lt;/code&gt; プロトコルも実装できます。</target>
        </trans-unit>
        <trans-unit id="dd7d714c1aa6b48b1d5593fcc16114d85e6a86ca" translate="yes" xml:space="preserve">
          <source>The reason behind supporting different delimiters is to provide a way to write literals without escaped delimiters. For example, a regular expression with forward slashes like &lt;code&gt;~r(^https?://)&lt;/code&gt; reads arguably better than &lt;code&gt;~r/^https?:\/\//&lt;/code&gt;. Similarly, if the regular expression has forward slashes and capturing groups (that use &lt;code&gt;()&lt;/code&gt;), you may then choose double quotes instead of parentheses.</source>
          <target state="translated">さまざまな区切り文字をサポートする理由は、エスケープされた区切り文字なしでリテラルを書く方法を提供するためです。たとえば、〜r &lt;code&gt;~r(^https?://)&lt;/code&gt; ようなスラッシュを含む正規表現は、〜r &lt;code&gt;~r/^https?:\/\//&lt;/code&gt; よりも間違いなく読みやすくなります。同様に、正規表現にスラッシュとキャプチャグループ（ &lt;code&gt;()&lt;/code&gt; を使用）がある場合は、括弧の代わりに二重引用符を選択できます。</target>
        </trans-unit>
        <trans-unit id="2ebf61cf3ca7649d4a079542dcbdefccc549e8d6" translate="yes" xml:space="preserve">
          <source>The reason those failures are happening is because, for didactic purposes, we have made two mistakes:</source>
          <target state="translated">これらの失敗が起きているのは、教訓的な目的のために、2つの失敗をしてしまったからです。</target>
        </trans-unit>
        <trans-unit id="c08560839cd14ff160f58cb4ece9a90b113b6018" translate="yes" xml:space="preserve">
          <source>The reason we can compare different data types is pragmatism. Sorting algorithms don&amp;rsquo;t need to worry about different data types in order to sort. The overall sorting order is defined below:</source>
          <target state="translated">異なるデータ型を比較できる理由は実用主義です。並べ替えアルゴリズムは、並べ替えのためにさまざまなデータ型を気にする必要はありません。全体的な並べ替え順序は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="96b6eb1d3d1c2f52c89893113a0264a48486f7f0" translate="yes" xml:space="preserve">
          <source>The reason we can compare different data types is pragmatism. Sorting algorithms don't need to worry about different data types in order to sort. For reference, the overall sorting order is defined below:</source>
          <target state="translated">異なるデータ型を比較できる理由は、プラグマティズムにあります。ソートアルゴリズムは、ソートするために異なるデータ型を気にする必要はありません。参考までに、全体的なソート順序は以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="5bf8002bbf671d6262f86dd4db1f940a5c99c6ee" translate="yes" xml:space="preserve">
          <source>The reason we don't provide hot code upgrades is because they are very complicated to perform in practice, as they require careful coding of your processes and applications as well as extensive testing. Given most teams can use other techniques that are language agnostic to upgrade their systems, such as Blue/Green deployments, Canary deployments, Rolling deployments, and others, hot upgrades are rarely a viable option. Let's understand why.</source>
          <target state="translated">ホットコードのアップグレードを提供しない理由は、プロセスやアプリケーションの慎重なコーディングや大規模なテストを必要とするため、実際に実行するには非常に複雑だからです。ほとんどのチームがシステムをアップグレードするために言語に依存しない他のテクニック、例えば、青/緑のデプロイメント、カナリアのデプロイメント、ローリングのデプロイメントなどを使用できることを考えると、ホットアップグレードが実行可能なオプションであることはほとんどありません。その理由を理解しましょう。</target>
        </trans-unit>
        <trans-unit id="9745fde52cc90f68fc3769f51bdd3839a79e7909" translate="yes" xml:space="preserve">
          <source>The reason why defining the &lt;code&gt;__using__&lt;/code&gt; macro above should be avoided is because when a developer writes:</source>
          <target state="translated">上記の &lt;code&gt;__using__&lt;/code&gt; マクロの定義を避けるべき理由は、開発者が次のように書いたときです。</target>
        </trans-unit>
        <trans-unit id="6ec6b8d401a0e57e5eec7caca955764b74ee728d" translate="yes" xml:space="preserve">
          <source>The reducer function.</source>
          <target state="translated">レデューサー機能です。</target>
        </trans-unit>
        <trans-unit id="fe9b615b4b2367b7daee50e253cbdf23dba26c40" translate="yes" xml:space="preserve">
          <source>The registry can be used for different purposes, such as name lookups (using the &lt;code&gt;:via&lt;/code&gt; option), storing properties, custom dispatching rules, or a pubsub implementation. We explore some of those use cases below.</source>
          <target state="translated">レジストリは、名前の検索（ &lt;code&gt;:via&lt;/code&gt; オプションを使用）、プロパティの保存、カスタムディスパッチルール、pubsubの実装など、さまざまな目的に使用できます。これらのユースケースのいくつかを以下で探ります。</target>
        </trans-unit>
        <trans-unit id="830561c69ec1b44d20b1476b8ca91dcfe652b847" translate="yes" xml:space="preserve">
          <source>The registry creates the bucket and updates the cache table</source>
          <target state="translated">レジストリはバケットを作成し、キャッシュテーブルを更新します。</target>
        </trans-unit>
        <trans-unit id="1e02149d4dfcef116ac8ae8bc7c958f58a3e9c0d" translate="yes" xml:space="preserve">
          <source>The registry identifier</source>
          <target state="translated">レジストリ識別子</target>
        </trans-unit>
        <trans-unit id="6c262eba9d17501af95e8d89e43d93764b4ff9c4" translate="yes" xml:space="preserve">
          <source>The registry may also be transparently partitioned, which provides more scalable behaviour for running registries on highly concurrent environments with thousands or millions of entries.</source>
          <target state="translated">レジストリは透過的にパーティショニングされている場合もあり、数千から数百万のエントリーを持つ高度に同時進行する環境でレジストリを実行する際に、よりスケーラブルな動作を提供します。</target>
        </trans-unit>
        <trans-unit id="6dcaa3fc50cf9fd5531a012d77c058d5085b7bd8" translate="yes" xml:space="preserve">
          <source>The registry needs to guarantee that it is always up to date. For example, if one of the bucket processes crashes due to a bug, the registry must notice this change and avoid serving stale entries. In Elixir, we say the registry needs to &lt;em&gt;monitor&lt;/em&gt; each bucket. Because our &lt;em&gt;registry&lt;/em&gt; needs to be able to receive and handle ad-hoc messages from the system, the &lt;code&gt;Agent&lt;/code&gt; API is not enough.</source>
          <target state="translated">レジストリは、常に最新であることを保証する必要があります。たとえば、バグが原因でバケットプロセスの1つがクラッシュした場合、レジストリはこの変更を認識し、古いエントリを提供しないようにする必要があります。Elixirでは、レジストリは各バケットを&lt;em&gt;監視する&lt;/em&gt;必要があると言います。&lt;em&gt;レジストリ&lt;/em&gt;はシステムからアドホックメッセージを受信して​​処理できる必要があるため、 &lt;code&gt;Agent&lt;/code&gt; APIだけでは不十分です。</target>
        </trans-unit>
        <trans-unit id="4a058f690e57a3aca65e5ad6c344df9d0e9611d7" translate="yes" xml:space="preserve">
          <source>The registry requires the following keys:</source>
          <target state="translated">レジストリには以下のキーが必要です。</target>
        </trans-unit>
        <trans-unit id="66187ff2a57d2c76b021b6e86b887377c3911cc5" translate="yes" xml:space="preserve">
          <source>The remaining fields are private and should not be accessed.</source>
          <target state="translated">残りのフィールドは非公開であり、アクセスしてはいけません。</target>
        </trans-unit>
        <trans-unit id="1f0abbf815761f3e816424020ca8e718d8880a26" translate="yes" xml:space="preserve">
          <source>The remaining options can be specified to further customize the escript:</source>
          <target state="translated">残りのオプションを指定して、escriptをさらにカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="7b880036afa4f762da2230a6fa814b25c0b9e585" translate="yes" xml:space="preserve">
          <source>The replacement can be either a string or a function. The string is used as a replacement for every match and it allows specific captures to be accessed via &lt;code&gt;\N&lt;/code&gt; or &lt;code&gt;\g{N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the capture. In case &lt;code&gt;\0&lt;/code&gt; is used, the whole match is inserted. Note that in regexes the backslash needs to be escaped, hence in practice you'll need to use &lt;code&gt;\\N&lt;/code&gt; and &lt;code&gt;\\g{N}&lt;/code&gt;.</source>
          <target state="translated">置換は文字列または関数のいずれかです。文字列はすべての一致の代わりとして使用され、特定のキャプチャに &lt;code&gt;\N&lt;/code&gt; または &lt;code&gt;\g{N}&lt;/code&gt; を介してアクセスできるようにします。ここで、 &lt;code&gt;N&lt;/code&gt; はキャプチャです。場合 &lt;code&gt;\0&lt;/code&gt; 全体のマッチが挿入され、使用されています。正規表現では円記号をエスケープする必要があるため、実際には &lt;code&gt;\\N&lt;/code&gt; および &lt;code&gt;\\g{N}&lt;/code&gt; を使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d12dcacc64e49f2ca797e3a42d48c6b95c4c021d" translate="yes" xml:space="preserve">
          <source>The reply sent by the task will be in the format &lt;code&gt;{ref, result}&lt;/code&gt;, where &lt;code&gt;ref&lt;/code&gt; is the monitor reference held by the task struct and &lt;code&gt;result&lt;/code&gt; is the return value of the task function.</source>
          <target state="translated">タスクによって送信される応答は、 &lt;code&gt;{ref, result}&lt;/code&gt; という形式になります。ここで、 &lt;code&gt;ref&lt;/code&gt; はタスク構造体が保持するモニター参照であり、 &lt;code&gt;result&lt;/code&gt; はタスク関数の戻り値です。</target>
        </trans-unit>
        <trans-unit id="fbae3095fe06d4c7dbe53db6c416f757e85aa9e2" translate="yes" xml:space="preserve">
          <source>The requirement operand after the &lt;code&gt;~&amp;gt;&lt;/code&gt; is allowed to omit the patch version, allowing us to express &lt;code&gt;~&amp;gt; 2.1&lt;/code&gt; or &lt;code&gt;~&amp;gt; 2.1-dev&lt;/code&gt;, something that wouldn't be allowed when using the common comparison operators.</source>
          <target state="translated">&lt;code&gt;~&amp;gt;&lt;/code&gt; 後の要件オペランドは、パッチバージョンを省略できるため、一般的な比較演算子を使用する場合は許可されない &lt;code&gt;~&amp;gt; 2.1&lt;/code&gt; または &lt;code&gt;~&amp;gt; 2.1-dev&lt;/code&gt; を表現できます。</target>
        </trans-unit>
        <trans-unit id="48c107c58db2b694200d1ee8f97e6cacd70556ad" translate="yes" xml:space="preserve">
          <source>The requirements for this guide are (see &lt;code&gt;elixir -v&lt;/code&gt;):</source>
          <target state="translated">このガイドの要件は次のとおりです（ &lt;code&gt;elixir -v&lt;/code&gt; を参照）：</target>
        </trans-unit>
        <trans-unit id="510fb68883c75cfa0f5726ad2958e2b2d1f8df13" translate="yes" xml:space="preserve">
          <source>The rest of this document will cover how child processes are specified, how they can be started and stopped, different supervision strategies and more.</source>
          <target state="translated">本書の残りの部分では、子どものプロセスがどのように指定されているか、どのように開始・停止することができるか、さまざまな監督戦略などについて説明します。</target>
        </trans-unit>
        <trans-unit id="34f71128fc5223e069e44135ef71e787278b7b2a" translate="yes" xml:space="preserve">
          <source>The result depends on the given options. In particular, if &lt;code&gt;:monitor&lt;/code&gt; is given as an option, it will return a tuple containing the PID and the monitoring reference, otherwise just the spawned process PID.</source>
          <target state="translated">結果は、指定されたオプションによって異なります。特に、 &lt;code&gt;:monitor&lt;/code&gt; がオプションとして指定されている場合、PIDと監視参照を含むタプルを返します。それ以外の場合は、生成されたプロセスPIDのみを返します。</target>
        </trans-unit>
        <trans-unit id="8c0864a3fd323ad326bf0ff0a4ae750f6f28b62b" translate="yes" xml:space="preserve">
          <source>The result is a map where each key is given by &lt;code&gt;key_fun&lt;/code&gt; and each value is a list of elements given by &lt;code&gt;value_fun&lt;/code&gt;. The order of elements within each list is preserved from the &lt;code&gt;enumerable&lt;/code&gt;. However, like all maps, the resulting map is unordered.</source>
          <target state="translated">結果は、各キーが &lt;code&gt;key_fun&lt;/code&gt; によって指定され、各値が &lt;code&gt;value_fun&lt;/code&gt; によって指定された要素のリストであるマップです。各リスト内の要素の順序は、 &lt;code&gt;enumerable&lt;/code&gt; から保持されます。ただし、すべてのマップと同様に、結果のマップは順序付けされていません。</target>
        </trans-unit>
        <trans-unit id="8c937afc93e905039ed962f46e31ce761b0b7910" translate="yes" xml:space="preserve">
          <source>The result is a tuple with the code point and the remainder of the string or &lt;code&gt;nil&lt;/code&gt; in case the string reached its end.</source>
          <target state="translated">結果は、コードポイントと文字列の残りの部分を持つタプル、または文字列が最後に達した場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b054d17c2daa0de49da800a95e641450c215bba5" translate="yes" xml:space="preserve">
          <source>The result is a tuple with the grapheme and the remainder of the string or &lt;code&gt;nil&lt;/code&gt; in case the String reached its end.</source>
          <target state="translated">結果は、書記素と残りの文字列、または文字列が最後に達した場合は &lt;code&gt;nil&lt;/code&gt; を含むタプルです。</target>
        </trans-unit>
        <trans-unit id="cf56030549a526b9bf11fca22b129025175f9e01" translate="yes" xml:space="preserve">
          <source>The result is a tuple with the next grapheme size and the remainder of the string or &lt;code&gt;nil&lt;/code&gt; in case the string reached its end.</source>
          <target state="translated">結果は、次の書記素サイズと文字列の残りの部分を持つタプル、または文字列が最後に達した場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="49e5bd89a099593fc1d84560689945a8bdf9718a" translate="yes" xml:space="preserve">
          <source>The result is a tuple with the next grapheme size in bytes and the remainder of the string or &lt;code&gt;nil&lt;/code&gt; in case the string reached its end.</source>
          <target state="translated">結果は、バイト単位の次の書記素サイズと、文字列の残りまたは文字列が最後に達した場合は &lt;code&gt;nil&lt;/code&gt; のタプルになります。</target>
        </trans-unit>
        <trans-unit id="69c824c2f4dd9e92c63e7c43b613daec936f10e9" translate="yes" xml:space="preserve">
          <source>The result is always a float. Use &lt;a href=&quot;#div/2&quot;&gt;&lt;code&gt;div/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#rem/2&quot;&gt;&lt;code&gt;rem/2&lt;/code&gt;&lt;/a&gt; if you want an integer division or the remainder.</source>
          <target state="translated">結果は常に浮動小数点です。整数除算または剰余が必要な場合は、&lt;a href=&quot;#div/2&quot;&gt; &lt;code&gt;div/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#rem/2&quot;&gt; &lt;code&gt;rem/2&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e60b28a7c2d9f237889da5d63ad55cd56db26e5f" translate="yes" xml:space="preserve">
          <source>The result is returned in the &lt;code&gt;:native&lt;/code&gt; time unit.</source>
          <target state="translated">結果は &lt;code&gt;:native&lt;/code&gt; 時間単位で返されます。</target>
        </trans-unit>
        <trans-unit id="7e378125d134cee06b90778b774e2ca53b3a689f" translate="yes" xml:space="preserve">
          <source>The result is returned in the given time unit &lt;code&gt;unit&lt;/code&gt;. The returned offset, added to an Erlang monotonic time (e.g., obtained with &lt;a href=&quot;#monotonic_time/1&quot;&gt;&lt;code&gt;monotonic_time/1&lt;/code&gt;&lt;/a&gt;), gives the Erlang system time that corresponds to that monotonic time.</source>
          <target state="translated">結果は、指定された時間単位 &lt;code&gt;unit&lt;/code&gt; で返されます。返されたオフセットは、Erlang単調時間に追加され（たとえば、&lt;a href=&quot;#monotonic_time/1&quot;&gt; &lt;code&gt;monotonic_time/1&lt;/code&gt; &lt;/a&gt;で取得されます）、その単調時間に対応するErlangシステム時間を提供します。</target>
        </trans-unit>
        <trans-unit id="bd31606d8c7fb963c24880e97f324e4acb8d8f68" translate="yes" xml:space="preserve">
          <source>The result is returned in the given time unit &lt;code&gt;unit&lt;/code&gt;. The returned offset, added to an Erlang monotonic time (for instance, one obtained with &lt;a href=&quot;#monotonic_time/1&quot;&gt;&lt;code&gt;monotonic_time/1&lt;/code&gt;&lt;/a&gt;), gives the Erlang system time that corresponds to that monotonic time.</source>
          <target state="translated">結果は、指定された時間単位 &lt;code&gt;unit&lt;/code&gt; 返されます。返されたオフセットは、Erlangの単調時間（たとえば、&lt;a href=&quot;#monotonic_time/1&quot;&gt; &lt;code&gt;monotonic_time/1&lt;/code&gt; で&lt;/a&gt;取得されたもの）に追加され、その単調時間に対応するErlangシステム時間を提供します。</target>
        </trans-unit>
        <trans-unit id="ad2bb7bf504a7a31fc692bc22a46a7f6c26558df" translate="yes" xml:space="preserve">
          <source>The result is rounded via the floor function.</source>
          <target state="translated">結果はフロア機能を介して丸められます。</target>
        </trans-unit>
        <trans-unit id="7c9d24e7e55d00cf51e7d7ac4365534956cf6af0" translate="yes" xml:space="preserve">
          <source>The result of the reduce operation.</source>
          <target state="translated">リデュース操作の結果です。</target>
        </trans-unit>
        <trans-unit id="5c33a08ba308a53a6a04ff3b3a415b2906539c81" translate="yes" xml:space="preserve">
          <source>The result of this function is used to check if two calendars rollover at the same time of day. If they do not, we can only convert datetimes and times between them. If they do, this means that we can also convert dates as well as naive datetimes between them.</source>
          <target state="translated">この関数の結果は、2つのカレンダーが同じ時間帯にロールオーバーするかどうかをチェックするために使用されます。もしそうでなければ、それらの間では日付と時刻の変換しかできません。もしそうであれば、日付と時刻を変換するだけでなく、それらの間のナイーブな日付時間も変換できることを意味します。</target>
        </trans-unit>
        <trans-unit id="deee6a8e2cf3a1dc01e05f85abd7a333a49b9743" translate="yes" xml:space="preserve">
          <source>The result returned when the argument is a list, is the list of nodes satisfying the disjunction(s) of the list elements.</source>
          <target state="translated">引数がリストの場合に返される結果は、リストの要素の論理和を満たすノードのリストです。</target>
        </trans-unit>
        <trans-unit id="de9d80b1ab304736a1d1cf097b00ab6920ddf496" translate="yes" xml:space="preserve">
          <source>The return value for &lt;code&gt;fun&lt;/code&gt; is expected to be</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; の戻り値は</target>
        </trans-unit>
        <trans-unit id="ac8a9c64fdd4a29692e13a9877d1bb2d850a96ef" translate="yes" xml:space="preserve">
          <source>The return value is considered to be found when the result is truthy (neither &lt;code&gt;nil&lt;/code&gt; nor &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">戻り値は、結果が真である（ &lt;code&gt;nil&lt;/code&gt; でも &lt;code&gt;false&lt;/code&gt; でもない）場合に見つかったと見なされます。</target>
        </trans-unit>
        <trans-unit id="c789d5090be5fd4830e5650f8cf224329bb3d092" translate="yes" xml:space="preserve">
          <source>The return value of &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; or any of the &lt;code&gt;handle_*&lt;/code&gt; callbacks may include a timeout value in milliseconds; if not, &lt;code&gt;:infinity&lt;/code&gt; is assumed. The timeout can be used to detect a lull in incoming messages.</source>
          <target state="translated">&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;または任意の &lt;code&gt;handle_*&lt;/code&gt; コールバックの戻り値には、ミリ秒単位のタイムアウト値が含まれる場合があります。そうでない場合、 &lt;code&gt;:infinity&lt;/code&gt; が想定されます。タイムアウトは、着信メッセージの停滞を検出するために使用できます。</target>
        </trans-unit>
        <trans-unit id="637f2543c6c71a469bb5665295bb80f1c21c7816" translate="yes" xml:space="preserve">
          <source>The return value of this function is always &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">この関数の戻り値は常に &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="aee9968a076604f4bf8eb65e4e57dfeed366595f" translate="yes" xml:space="preserve">
          <source>The return value of this function is the value that was previously stored under &lt;code&gt;key&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; in case no value was stored under it.</source>
          <target state="translated">この関数の戻り値は、以前に &lt;code&gt;key&lt;/code&gt; に格納されていた値、または値が格納されていない場合は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8981b39a20d60bae9e3cc6f4a790fa30d54a0258" translate="yes" xml:space="preserve">
          <source>The returned &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; will have &lt;code&gt;UTC&lt;/code&gt; timezone, if you want other timezone, please use &lt;a href=&quot;#shift_zone/3&quot;&gt;&lt;code&gt;DateTime.shift_zone/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返される&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;には &lt;code&gt;UTC&lt;/code&gt; タイムゾーンがあります。他のタイムゾーンが必要な場合は、&lt;a href=&quot;#shift_zone/3&quot;&gt; &lt;code&gt;DateTime.shift_zone/3&lt;/code&gt; &lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="30cb91bc5640b8dc4f60b9f7ca0aa50c81c4fc01" translate="yes" xml:space="preserve">
          <source>The returned datetime must be in UTC. The original &lt;code&gt;utc_offset&lt;/code&gt; it was written in must be returned in the result.</source>
          <target state="translated">返される日時はUTCである必要があります。書き込まれた元の &lt;code&gt;utc_offset&lt;/code&gt; を結果に返す必要があります。</target>
        </trans-unit>
        <trans-unit id="68256b5cc686943a73a48ce0ec84d14bdbd6db53" translate="yes" xml:space="preserve">
          <source>The returned function is typically passed as an accessor to &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_in/2&quot;&gt;&lt;code&gt;Kernel.get_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_and_update_in/3&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt;&lt;/a&gt;, and friends.</source>
          <target state="translated">返される関数は通常、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_in/2&quot;&gt; &lt;code&gt;Kernel.get_in/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_and_update_in/3&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt; &lt;/a&gt;、およびその仲間へのアクセサーとして渡されます。</target>
        </trans-unit>
        <trans-unit id="f600704ad2a1d265216e1874920599247dcd864b" translate="yes" xml:space="preserve">
          <source>The returned function is typically passed as an accessor to &lt;a href=&quot;kernel#get_in/2&quot;&gt;&lt;code&gt;Kernel.get_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#get_and_update_in/3&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt;&lt;/a&gt;, and friends.</source>
          <target state="translated">返された関数は通常、&lt;a href=&quot;kernel#get_in/2&quot;&gt; &lt;code&gt;Kernel.get_in/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#get_and_update_in/3&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt; &lt;/a&gt;などのアクセサとして渡されます。</target>
        </trans-unit>
        <trans-unit id="feb14c2276580a5fb93fd8afe56dfe5ef725b402" translate="yes" xml:space="preserve">
          <source>The returned function raises if &lt;code&gt;index&lt;/code&gt; is out of bounds.</source>
          <target state="translated">返された関数は、 &lt;code&gt;index&lt;/code&gt; が範囲外の場合に発生します。</target>
        </trans-unit>
        <trans-unit id="f18363f66f41ea776d213b7a358943fee2fbf810" translate="yes" xml:space="preserve">
          <source>The returned function receives a term and a command and injects the term into the collectable on every &lt;code&gt;{:cont, term}&lt;/code&gt; command.</source>
          <target state="translated">返された関数は、用語とコマンドを受け取り、 &lt;code&gt;{:cont, term}&lt;/code&gt; コマンドごとに収集可能な用語に用語を挿入します。</target>
        </trans-unit>
        <trans-unit id="03b6bd0a789c54c65fa616d4c3d05a787c9fac95" translate="yes" xml:space="preserve">
          <source>The returned function uses the default value if the key does not exist. This can be used to specify defaults and safely traverse missing keys:</source>
          <target state="translated">返される関数は、キーが存在しない場合はデフォルト値を使用します。これは、デフォルト値を指定したり、行方不明のキーを安全に辿ったりするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="17eadcc2531c98be75b3d36e9d02f1db40badbf9" translate="yes" xml:space="preserve">
          <source>The returned information is a two-element tuple in the shape of &lt;code&gt;{info, value}&lt;/code&gt;.</source>
          <target state="translated">返される情報は、 &lt;code&gt;{info, value}&lt;/code&gt; という形の2要素のタプルです。</target>
        </trans-unit>
        <trans-unit id="40619e10ae25c330063c65535cf867c78a0305e7" translate="yes" xml:space="preserve">
          <source>The returned keys (with the corresponding possible values) for all types of functions (local and external) are the following:</source>
          <target state="translated">すべてのタイプの関数(ローカルおよび外部)について返されるキー(対応する可能性のある値)は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8ee75b4eeb81fcc96ebfd98173bc87ddff369546" translate="yes" xml:space="preserve">
          <source>The returned path will be expanded.</source>
          <target state="translated">返されたパスが展開されます。</target>
        </trans-unit>
        <trans-unit id="4d71c99a8e09f63bf55427e1e561d5818b8e3777" translate="yes" xml:space="preserve">
          <source>The returned reference will re-occur after approximately 2^82 calls; therefore it is unique enough for practical purposes.</source>
          <target state="translated">返された参照は、約2^82回の呼び出しの後に再発生します。</target>
        </trans-unit>
        <trans-unit id="6710b3a068da95fe2b8593d7add9ec761b0835bc" translate="yes" xml:space="preserve">
          <source>The returned value is a map containing name-value pairs. Variable names and their values are strings.</source>
          <target state="translated">返される値は、名前と値のペアを含むマップです。変数名とその値は文字列です。</target>
        </trans-unit>
        <trans-unit id="b373635bb9902337ad9e10b973bd7b4caeea100c" translate="yes" xml:space="preserve">
          <source>The returned value is a tuple with the &quot;get&quot; value returned by &lt;code&gt;fun&lt;/code&gt; and a new keyword list with the updated value under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;code&gt;fun&lt;/code&gt; によって返された「get」値と、 &lt;code&gt;key&lt;/code&gt; の下に更新された値を含む新しいキーワードリストを持つタプルです。</target>
        </trans-unit>
        <trans-unit id="b42137d3006c00e4b619eab71021a2f058571bc2" translate="yes" xml:space="preserve">
          <source>The returned value is a tuple with the &quot;get&quot; value returned by &lt;code&gt;fun&lt;/code&gt; and a new map with the updated value under &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">戻り値は、 &lt;code&gt;fun&lt;/code&gt; によって返された「get」値を含むタプルと、 &lt;code&gt;key&lt;/code&gt; の下に更新された値を含む新しいマップです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
