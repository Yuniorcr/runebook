<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="mocha">
    <body>
      <group id="mocha">
        <trans-unit id="4880e5997d2e5c91707be1f2cf1644a4e0521957" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2018 JS Foundation and contributors</source>
          <target state="translated">&amp;copy;2011&amp;ndash;2018 JS Foundationおよび寄稿者</target>
        </trans-unit>
        <trans-unit id="122783dc9e66c33bcb785c93282a061438a2349f" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2020 JS Foundation and contributors</source>
          <target state="translated">&amp;copy;2011&amp;ndash;2020 JSFoundationおよび寄稿者</target>
        </trans-unit>
        <trans-unit id="81afbf5eb55827cad926027ff2d0249fc1c85ca7" translate="yes" xml:space="preserve">
          <source>&amp;hellip;or an ES module:</source>
          <target state="translated">&amp;hellip;またはESモジュール：</target>
        </trans-unit>
        <trans-unit id="606370a54f758f26eea98a82c7f0651812403a23" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Bail&amp;rdquo; is &amp;ldquo;Best Effort&amp;rdquo;</source>
          <target state="translated">「保釈」は「ベストエフォート」です</target>
        </trans-unit>
        <trans-unit id="ce4dbe4095f23d7499e2fffe1c3da9389c9b6ac9" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Force&amp;rdquo; color output to be enabled, or alternatively force it to be disabled via &lt;code&gt;--no-color&lt;/code&gt;. By default, Mocha uses the &lt;a href=&quot;https://npm.im/supports-color&quot;&gt;supports-color&lt;/a&gt; module to decide.</source>
          <target state="translated">「強制」カラー出力を有効にするか、または &lt;code&gt;--no-color&lt;/code&gt; を使用して強制的に無効にします。デフォルトでは、Mochaは&lt;a href=&quot;https://npm.im/supports-color&quot;&gt;supports-color&lt;/a&gt;モジュールを使用して決定します。</target>
        </trans-unit>
        <trans-unit id="0cf2f1a85ad7053644855b71c6a7053e215276b8" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Hanging&amp;rdquo; most often manifests itself if a server is still listening on a port, or a socket is still open, etc. It can also be something like a runaway &lt;code&gt;setInterval()&lt;/code&gt;, or even an errant &lt;code&gt;Promise&lt;/code&gt; that never fulfilled.</source>
          <target state="translated">「ハング」は、サーバーがまだポートをリッスンしている場合、またはソケットがまだ開いている場合などに発生します。これは、暴走 &lt;code&gt;setInterval()&lt;/code&gt; のようなものである場合や、決して満たされない誤った &lt;code&gt;Promise&lt;/code&gt; である場合もあります。</target>
        </trans-unit>
        <trans-unit id="29ca21d51a81c6a488a2680abedc2d67a518ac71" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Pending&amp;rdquo;&amp;ndash;as in &amp;ldquo;someone should write these test cases eventually&amp;rdquo;&amp;ndash;test-cases are simply those &lt;em&gt;without&lt;/em&gt; a callback:</source>
          <target state="translated">「保留中」-「誰かが最終的にこれらのテストケースを作成する必要がある」のように-テストケースは、単にコールバックの&lt;em&gt;ない&lt;/em&gt;ものです。</target>
        </trans-unit>
        <trans-unit id="0202d60990c27ebf05e82037b9244427eaaedc86" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Pending&amp;rdquo;&amp;ndash;as in &amp;ldquo;someone should write these test cases eventually&amp;rdquo;&amp;ndash;test-cases are those &lt;em&gt;without&lt;/em&gt; a callback:</source>
          <target state="translated">「保留中」-「誰かがこれらのテストケースを最終的に作成する必要がある」のように-テストケースは、コールバックの&lt;em&gt;ない&lt;/em&gt;ものです。</target>
        </trans-unit>
        <trans-unit id="f13bd9ae1921abad613db444c61bdd65481592f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#-watch-w&quot;&gt;Watch mode&lt;/a&gt; does not support ES Module test files</source>
          <target state="translated">&lt;a href=&quot;#-watch-w&quot;&gt;ウォッチモード&lt;/a&gt;はESモジュールテストファイルをサポートしていません</target>
        </trans-unit>
        <trans-unit id="a4af370b71015e7152af6744af68d0ea749b0b85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;Configuration file&lt;/a&gt; can only be a CommonJS file (&lt;code&gt;.mocharc.js&lt;/code&gt; or &lt;code&gt;.mocharc.cjs&lt;/code&gt;)</source>
          <target state="translated">&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;構成ファイル&lt;/a&gt;は、CommonJSファイル（ &lt;code&gt;.mocharc.js&lt;/code&gt; または &lt;code&gt;.mocharc.cjs&lt;/code&gt; ）のみにすることができます。</target>
        </trans-unit>
        <trans-unit id="2340e14a9951079e3920c1e88eebb5896a891730" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#features-2&quot;&gt;#&lt;/a&gt; Features</source>
          <target state="translated">&lt;a href=&quot;#features-2&quot;&gt;＃&lt;/a&gt;機能</target>
        </trans-unit>
        <trans-unit id="e3c822f6dc9c85db49735fe89cee755acb52b0c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#options-that-differ-slightly-from-cli-options&quot;&gt;#&lt;/a&gt; Options that differ slightly from &lt;a href=&quot;#command-line-usage&quot;&gt;cli options&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#options-that-differ-slightly-from-cli-options&quot;&gt;＃&lt;/a&gt;とは若干異なるオプション&lt;a href=&quot;#command-line-usage&quot;&gt;CLIオプション&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="a45859d40de47dc8598e28e6f8b85adcf3d68710" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#options-that-only-function-in-browser-context&quot;&gt;#&lt;/a&gt; Options that &lt;em&gt;only&lt;/em&gt; function in browser context:</source>
          <target state="translated">&lt;a href=&quot;#options-that-only-function-in-browser-context&quot;&gt;＃&lt;/a&gt;ブラウザのコンテキストで&lt;em&gt;のみ&lt;/em&gt;機能するオプション：</target>
        </trans-unit>
        <trans-unit id="89a17f200984736639a1af9170190a5500394520" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#third-party-reporters&quot;&gt;Custom reporters&lt;/a&gt; and &lt;a href=&quot;#interfaces&quot;&gt;custom interfaces&lt;/a&gt; can only be CommonJS files</source>
          <target state="translated">&lt;a href=&quot;#third-party-reporters&quot;&gt;カスタムレポーター&lt;/a&gt;と&lt;a href=&quot;#interfaces&quot;&gt;カスタムインターフェイス&lt;/a&gt;はCommonJSファイルにのみできます</target>
        </trans-unit>
        <trans-unit id="65fad3601a86cb41df85b1b37f79abad3d75e452" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#with-commonjs&quot;&gt;#&lt;/a&gt; With CommonJS</source>
          <target state="translated">&lt;a href=&quot;#with-commonjs&quot;&gt;＃&lt;/a&gt; CommonJS付き</target>
        </trans-unit>
        <trans-unit id="7acda2fd457e345e8eabfc9e04defdf555e39a2b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#with-es-modules&quot;&gt;#&lt;/a&gt; With ES Modules</source>
          <target state="translated">&lt;a href=&quot;#with-es-modules&quot;&gt;＃&lt;/a&gt; ESのモジュールと</target>
        </trans-unit>
        <trans-unit id="25ed9012bafe6e305d78705fd4bf34bc131c9626" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt;, &lt;code&gt;assert()&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;-style assertions</source>
          <target state="translated">&lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; 、 &lt;code&gt;assert()&lt;/code&gt; および &lt;code&gt;should&lt;/code&gt; スタイルのアサーション</target>
        </trans-unit>
        <trans-unit id="fdf03ac5e0ca048d37fe0ad57e1e235952595567" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; was an early notification system implementation for OS X and Windows, hence, the name of Mocha&amp;rsquo;s &lt;code&gt;--growl&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt;は、OS XおよびWindowsの早期通知システムの実装であったため、Mochaの &lt;code&gt;--growl&lt;/code&gt; オプションの名前になりました。</target>
        </trans-unit>
        <trans-unit id="5bb4230cc3fd86b530db1acfe8036464113cd96d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://unexpected.js.org&quot;&gt;unexpected&lt;/a&gt; - &amp;ldquo;the extensible BDD assertion toolkit&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;http://unexpected.js.org&quot;&gt;予期しない&lt;/a&gt; -「拡張可能なBDDアサーションツールキット」</target>
        </trans-unit>
        <trans-unit id="1564a69b76b202f4b70459e52fc79d3de8d7ccf7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;expect.js&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; style assertions</source>
          <target state="translated">&lt;a href=&quot;https://github.com/LearnBoost/expect.js&quot;&gt;expect.js&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; スタイルのアサーション</target>
        </trans-unit>
        <trans-unit id="ccf6128796caad47bf922901f1f89ce8973d11ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt; - BDD style shown throughout these docs</source>
          <target state="translated">&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js-&lt;/a&gt;これらのドキュメント全体に表示されるBDDスタイル</target>
        </trans-unit>
        <trans-unit id="f2735f46f5835a9f801e5ea1398a95235e55f2c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/visionmedia/better-assert&quot;&gt;better-assert&lt;/a&gt; - C-style self-documenting &lt;code&gt;assert()&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/visionmedia/better-assert&quot;&gt;better-assert&lt;/a&gt; -Cスタイルの自己文書化 &lt;code&gt;assert()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b71b6885763b5a41994b3d2a2cb89e5b27dcd14a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar&quot;&gt;Mocha sidebar&lt;/a&gt; is the most complete mocha extension for vs code.</source>
          <target state="translated">&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=maty.vscode-mocha-sidebar&quot;&gt;Mochaサイドバー&lt;/a&gt;はvsコードの最も完全なモカ拡張です。</target>
        </trans-unit>
        <trans-unit id="29792d04f1e54982f7dfab2e1733a9a7ce45cabb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://medium.com/@jakubsynowiec/you-should-always-quote-your-globs-in-npm-scripts-621887a2a784&quot;&gt;You should &lt;em&gt;always&lt;/em&gt; quote your globs in npm scripts&lt;/a&gt;. If you use double quotes, it&amp;rsquo;s the shell on UNIX that will expand the glob. On the other hand, if you use single quotes, the &lt;a href=&quot;https://www.npmjs.com/package/glob&quot;&gt;&lt;code&gt;node-glob&lt;/code&gt;&lt;/a&gt; module will handle its expansion.</source>
          <target state="translated">&lt;a href=&quot;https://medium.com/@jakubsynowiec/you-should-always-quote-your-globs-in-npm-scripts-621887a2a784&quot;&gt;&lt;em&gt;常に&lt;/em&gt;npmスクリプトでグロブを引用する必要&lt;em&gt;があり&lt;/em&gt;ます&lt;/a&gt;。二重引用符を使用する場合、globを展開するのはUNIXのシェルです。一方、一重引用符を使用する場合、&lt;a href=&quot;https://www.npmjs.com/package/glob&quot;&gt; &lt;code&gt;node-glob&lt;/code&gt; &lt;/a&gt;モジュールがその拡張を処理します。</target>
        </trans-unit>
        <trans-unit id="19c66e520c741fda142d2bc7a63ffe2e3756a88d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://npm.im/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; is a great alternative to the default HTML reporter.</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/mochawesome&quot;&gt;Mochawesome&lt;/a&gt;は、デフォルトのHTMLレポーターの優れた代替手段です。</target>
        </trans-unit>
        <trans-unit id="daee01848f7fea0ef3920be1c44548c1817db467" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unexpected.js.org/&quot;&gt;unexpected&lt;/a&gt; - &amp;ldquo;the extensible BDD assertion toolkit&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;https://unexpected.js.org/&quot;&gt;予期しない&lt;/a&gt;-「拡張可能なBDDアサーションツールキット」</target>
        </trans-unit>
        <trans-unit id="503fa814b546e45dd52784f0523272a9253e8f6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://wallabyjs.com/&quot;&gt;Wallaby.js&lt;/a&gt; is a continuous testing tool that enables real-time code coverage for Mocha with any assertion library in VS Code, Atom, JetBrains IDEs (IntelliJ IDEA, WebStorm, etc.), Sublime Text and Visual Studio for both browser and node.js projects.</source>
          <target state="translated">&lt;a href=&quot;https://wallabyjs.com/&quot;&gt;Wallaby.js&lt;/a&gt;は、VS Code、Atom、JetBrains IDE（IntelliJ IDEA、WebStormなど）、Sublime Text、およびブラウザーとノードの両方のVisual Studioのアサーションライブラリを使用して、Mochaのリアルタイムコードカバレッジを可能にする継続的なテストツールです。 jsプロジェクト。</target>
        </trans-unit>
        <trans-unit id="ecc2ae707af00309e345fef10f5694e798f1001a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt;, &lt;code&gt;assert()&lt;/code&gt; and &lt;code&gt;should&lt;/code&gt;-style assertions</source>
          <target state="translated">&lt;a href=&quot;https://www.chaijs.com/&quot;&gt;chai&lt;/a&gt; - &lt;code&gt;expect()&lt;/code&gt; 、 &lt;code&gt;assert()&lt;/code&gt; および &lt;code&gt;should&lt;/code&gt; スタイルのアサーション</target>
        </trans-unit>
        <trans-unit id="44372724c81d9e9e00f55a25b45700c20a62cfc6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; support for running Mocha tests is available via a 3rd party package &lt;a href=&quot;https://github.com/scottaj/mocha.el&quot;&gt;mocha.el&lt;/a&gt;. The package is available on MELPA, and can be installed via &lt;code&gt;M-x package-install mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacsが&lt;/a&gt; Mochaテストを実行するためのサポートは、サードパーティのパッケージ&lt;a href=&quot;https://github.com/scottaj/mocha.el&quot;&gt;mocha.elを&lt;/a&gt;介して利用できます。パッケージはMELPAで利用可能で、 &lt;code&gt;M-x package-install mocha&lt;/code&gt; 介してインストールできます。</target>
        </trans-unit>
        <trans-unit id="a4aaad3792c24d5288746210dca61d836f7a2b70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt; provides a &lt;a href=&quot;https://www.jetbrains.com/idea/features/nodejs.html&quot;&gt;NodeJS plugin&lt;/a&gt; for its suite of IDEs (IntelliJ IDEA, WebStorm, etc.), which contains a Mocha test runner, among other things.</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt;は、IDEのスイート（IntelliJ IDEA、WebStormなど）用の&lt;a href=&quot;https://www.jetbrains.com/idea/features/nodejs.html&quot;&gt;NodeJSプラグイン&lt;/a&gt;を提供します。これには、とりわけMochaテストランナーが含まれています。</target>
        </trans-unit>
        <trans-unit id="11291f2858e846ccb99830c798ce583b966f2c98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot;&gt;Mochawesome&lt;/a&gt; is a great alternative to the default HTML reporter.</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/mochawesome&quot;&gt;Mochawesome&lt;/a&gt;は、デフォルトのHTMLレポーターの優れた代替手段です。</target>
        </trans-unit>
        <trans-unit id="2bb68fd9008653ec12b2f1777ec12f0ff896a9c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--bail&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; imply &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--bail&lt;/code&gt; はない&lt;em&gt;ではない&lt;/em&gt;意味するものではあり &lt;code&gt;--exit&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c5713812df5d43a6deaf12c65bcdb06b48905d51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--exit&lt;/code&gt; / &lt;code&gt;--no-exit&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--exit&lt;/code&gt; / &lt;code&gt;--no-exit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c40f18d3105ea1d7318f74b2f2b4f75dfce961e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--extension&lt;/code&gt; now supports multipart extensions (e.g., &lt;code&gt;spec.js&lt;/code&gt;), leading dots (&lt;code&gt;.js&lt;/code&gt;) and combinations thereof (&lt;code&gt;.spec.js&lt;/code&gt;);</source>
          <target state="translated">&lt;code&gt;--extension&lt;/code&gt; は、マルチパート拡張機能（ &lt;code&gt;spec.js&lt;/code&gt; など）、先頭のドット（ &lt;code&gt;.js&lt;/code&gt; ）、およびそれらの組み合わせ（ &lt;code&gt;.spec.js&lt;/code&gt; ）をサポートするようになりました。</target>
        </trans-unit>
        <trans-unit id="0adcaddde9e506ef495ed1d5ec6aba94d7c8b525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--forbid-only&lt;/code&gt; causes Mocha to fail when an exclusive (&amp;ldquo;only&amp;rsquo;d&amp;rdquo;) test or suite is encountered, and it will abort further test execution.</source>
          <target state="translated">&lt;code&gt;--forbid-only&lt;/code&gt; は、排他的な（「のみ」）テストまたはスイートが検出されたときにMochaを失敗させ、それ以降のテストの実行を中止します。</target>
        </trans-unit>
        <trans-unit id="5844098540bae421d08268b26e15b8cdc24063ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--forbid-pending&lt;/code&gt; causes Mocha to fail when a skipped (&amp;ldquo;pending&amp;rdquo;) test or suite is encountered, and it will abort further test execution.</source>
          <target state="translated">&lt;code&gt;--forbid-pending&lt;/code&gt; は、スキップされた（「保留中」）テストまたはスイートが検出されたときにMochaを失敗させ、それ以上のテスト実行を中止します。</target>
        </trans-unit>
        <trans-unit id="a9522f7896d31a5b5dee3e51036d8fda057f0a72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--global&lt;/code&gt; accepts wildcards. You could do &lt;code&gt;--global '*bar'&lt;/code&gt; and it would match &lt;code&gt;foobar&lt;/code&gt;, &lt;code&gt;barbar&lt;/code&gt;, etc. You can also pass in &lt;code&gt;'*'&lt;/code&gt; to ignore all globals.</source>
          <target state="translated">&lt;code&gt;--global&lt;/code&gt; はワイルドカードを受け入れます。あなたは何ができる &lt;code&gt;--global '*bar'&lt;/code&gt; 、それが一致し &lt;code&gt;foobar&lt;/code&gt; 、 &lt;code&gt;barbar&lt;/code&gt; などを、またして渡すことができます &lt;code&gt;'*'&lt;/code&gt; すべてのグローバルを無視します。</target>
        </trans-unit>
        <trans-unit id="4c4322259ac88e430778f6e3f91f8db296ac7688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--global&lt;/code&gt; can accept a comma-delimited list; &lt;code&gt;--global app,YUI&lt;/code&gt; is equivalent to &lt;code&gt;--global app --global YUI&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--global&lt;/code&gt; はコンマ区切りのリストを受け入れることができます。 &lt;code&gt;--global app,YUI&lt;/code&gt; は &lt;code&gt;--global app --global YUI&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="1a6e8264d39bb1840f2128ea4d45205a143b523b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;afterAll&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;afterAll&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="b991af1c65d5d4905794bd1b11c692b01f3bab0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;afterEach&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;afterEach&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="ea631038b73b314bc4cae6bdd32630c2036c6c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeAll&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;beforeAll&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="7329122c07f0b666507c31d7994354465c6340e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeEach&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;beforeEach&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="56b7c5cfeaded6ce0ea7e6c4d4d438bdd19cffbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; is just an alias for &lt;code&gt;describe()&lt;/code&gt;, and behaves the same way; it just provides a way to keep tests easier to read and organized. Similarly, &lt;code&gt;specify()&lt;/code&gt; is an alias for &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; は &lt;code&gt;describe()&lt;/code&gt; の単なる別名であり、同じように動作します。テストを読みやすく整理する方法を提供するだけです。同様に、 &lt;code&gt;specify()&lt;/code&gt; は &lt;code&gt;it()&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="c34c0223c353b723a1a7780ed4175053bd1d1d43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context()&lt;/code&gt; is just an alias for &lt;code&gt;describe()&lt;/code&gt;, and behaves the same way; it provides a way to keep tests easier to read and organized. Similarly, &lt;code&gt;specify()&lt;/code&gt; is an alias for &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context()&lt;/code&gt; は &lt;code&gt;describe()&lt;/code&gt; の単なるエイリアスであり、同じように動作します。テストを読みやすく整理しやすくする方法を提供します。同様に、 &lt;code&gt;specify()&lt;/code&gt; は &lt;code&gt;it()&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="5068d189907c7d855768fab68d718a9be022de60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mocha.allowUncaught()&lt;/code&gt; : If called, uncaught errors will not be absorbed by the error handler.</source>
          <target state="translated">&lt;code&gt;mocha.allowUncaught()&lt;/code&gt; ：呼び出された場合、キャッチされなかったエラーはエラーハンドラーによって吸収されません。</target>
        </trans-unit>
        <trans-unit id="554f4cc91555480bd1860a411164a3314a936444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mocha&lt;/code&gt; property of &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; のmochaプロパティ</target>
        </trans-unit>
        <trans-unit id="bfedfd7c997cd3bf4a80b5a5f8369a1e541211bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noHighlighting&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, do not attempt to use syntax highlighting on output test code.</source>
          <target state="translated">&lt;code&gt;noHighlighting&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; に設定されている場合、出力テストコードで構文の強調表示を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="348498bdc8cc1d3584f5b20189f1d9f13eb39b23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noHighlighting&lt;/code&gt;&lt;em&gt;{boolean}&lt;/em&gt; If set to &lt;code&gt;true&lt;/code&gt;, do not attempt to use syntax highlighting on output test code.</source>
          <target state="translated">&lt;code&gt;noHighlighting&lt;/code&gt; &lt;em&gt;{boolean} &lt;/em&gt; &lt;code&gt;true&lt;/code&gt; に設定されている場合、出力テストコードで構文の強調表示を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="537eb85ba87ee8453e8fac6c97431f92a1fd4c81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; flags can be defined in Mocha&amp;rsquo;s &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; フラグは、Mochaの&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;構成で&lt;/a&gt;定義できます。</target>
        </trans-unit>
        <trans-unit id="e19de59bd8b201f4294895c5ae99b6bbbc9748b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reporter&lt;/code&gt;&lt;em&gt;{string|constructor}&lt;/em&gt; You can pass a reporter&amp;rsquo;s name or a custom reporter&amp;rsquo;s constructor. You can find &lt;strong&gt;recommended&lt;/strong&gt; reporters for the browser &lt;a href=&quot;#reporting&quot;&gt;here&lt;/a&gt;. It is possible to use &lt;a href=&quot;#reporters&quot;&gt;built-in reporters&lt;/a&gt; as well. Their employment in browsers is neither recommended nor supported, open the console to see the test results.</source>
          <target state="translated">&lt;code&gt;reporter&lt;/code&gt; &lt;em&gt;{string | constructor}&lt;/em&gt;レポーターの名前またはカスタムレポーターのコンストラクターを渡すことができます。あなたは見つけることができます&lt;strong&gt;推奨&lt;/strong&gt;ブラウザの記者を&lt;a href=&quot;#reporting&quot;&gt;ここに&lt;/a&gt;。&lt;a href=&quot;#reporters&quot;&gt;組み込みのレポーター&lt;/a&gt;を使用することもできます。ブラウザでの使用は推奨もサポートもされていません。コンソールを開いてテスト結果を確認してください。</target>
        </trans-unit>
        <trans-unit id="5f60f9dbc0556bab5e4324085ba1bdc3d293ae4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require('./setup.js')&lt;/code&gt; or &lt;code&gt;import './setup.js'&lt;/code&gt; at the top of every test file. Best avoided for those averse to boilerplate.</source>
          <target state="translated">&lt;code&gt;require('./setup.js')&lt;/code&gt; または &lt;code&gt;import './setup.js'&lt;/code&gt; './ setup.js'をすべてのテストファイルの先頭に配置します。ボイラープレートを嫌う人には避けるのが最善です。</target>
        </trans-unit>
        <trans-unit id="8d261dca137096c6c4c4fc3bb658b5c530b809ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setup.js&lt;/code&gt; will be executed &lt;em&gt;first&lt;/em&gt;, and install the two hooks shown above for every test found in &lt;code&gt;./test/**/*.spec.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setup.js&lt;/code&gt; が&lt;em&gt;最初&lt;/em&gt;に実行され、。/ test &lt;code&gt;./test/**/*.spec.js&lt;/code&gt; 。spec.jsにあるすべてのテストに対して上記の2つのフックがインストールされます。</target>
        </trans-unit>
        <trans-unit id="ef89938eac5d3663c326138e01667c4e578d2d05" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;--compilers&lt;/code&gt; was removed in v6.0.0. See &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;further explanation and workarounds&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;--compilers&lt;/code&gt; はv6.0.0で削除されました。詳細な&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;説明と回避策を&lt;/a&gt;参照してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4d643fa630ea2ea699168c28ddcd8118ea6fb5b1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BREAKING CHANGE in v6.0.0; now mutually exclusive with &lt;code&gt;--fgrep&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0での重大な変更。 &lt;code&gt;--fgrep&lt;/code&gt; と相互に排他的になりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e89c256bccc2f2652530be9ce57f0376553fc18" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BREAKING CHANGE in v6.0.0; now mutually exclusive with &lt;code&gt;--grep&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0での重大な変更。 &lt;code&gt;--grep&lt;/code&gt; と相互に排他的になりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="070ffe622f41ab089ae3337442f32618981b7ce1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;BREAKING CHANGE in v7.0.0; &lt;code&gt;--debug&lt;/code&gt; / &lt;code&gt;--debug-brk&lt;/code&gt; are removed and &lt;code&gt;debug&lt;/code&gt; is deprecated.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v7.0.0での重大な変更。 &lt;code&gt;--debug&lt;/code&gt; / &lt;code&gt;--debug-brk&lt;/code&gt; が削除され、 &lt;code&gt;debug&lt;/code&gt; は非推奨になりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0928996ca546cd8754bd4fbae4ffc7e1c53c09a7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: Don&amp;rsquo;t do nothing! A test should make an assertion or use &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;ベストプラクティス&lt;/em&gt;：何もしないでください。テストではアサーションを作成するか、 &lt;code&gt;this.skip()&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="89c3b78b1338c34c1054e3cfdcf74ed2974b90eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: To avoid confusion, do not execute further instructions in a test or hook after calling &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;ベストプラクティス&lt;/em&gt;：混乱を避けるために、 &lt;code&gt;this.skip()&lt;/code&gt; を呼び出した後、テストまたはフックでそれ以上の命令を実行しないでください。</target>
        </trans-unit>
        <trans-unit id="334b6d6a556867914bb2b447cf3f8a036662d66b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Best practice&lt;/em&gt;: Use &lt;code&gt;.skip()&lt;/code&gt; instead of commenting tests out.</source>
          <target state="translated">&lt;em&gt;ベストプラクティス&lt;/em&gt;：テストをコメントアウトする代わりに &lt;code&gt;.skip()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1e0beb3a7c4d5fb91ba1bf858f0ffd9910f4e618" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you do not need to use&lt;/em&gt; Mocha&amp;rsquo;s context, lambdas should work. Be aware that using lambdas will be more painful to refactor if the need eventually arises!</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Mochaのコンテキスト&lt;em&gt;を使用する必要がない場合は&lt;/em&gt;、ラムダが機能するはずです。最終的に必要が生じた場合、ラムダを使用するとリファクタリングがより困難になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="65eadcbf418cf5130eba58897cb4af4e5e2ea8c8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;If you do not need to use&lt;/em&gt; Mocha&amp;rsquo;s context, lambdas should work. However, the result will be more difficult to refactor if the need eventually arises.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;Mochaのコンテキスト&lt;em&gt;を使用する必要がない場合は&lt;/em&gt;、ラムダが機能するはずです。ただし、最終的に必要が生じた場合、結果をリファクタリングするのはより困難になります。</target>
        </trans-unit>
        <trans-unit id="12f5dfc9876db34646f7a5894072c2eda83baf28" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Ignoring&lt;/em&gt; global fixtures and custom reporters</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;グローバルフィクスチャとカスタムレポーターを&lt;em&gt;無視する&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcfa11ac87ca754d6b22169dad13f39d22722d84" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Immediately before&lt;/em&gt; a worker runs the first test it receives, the worker &amp;ldquo;bootstraps&amp;rdquo; itself by:</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;ワーカーが受け取った最初のテストを実行する&lt;em&gt;直前に&lt;/em&gt;、ワーカーは次の方法で自分自身を「ブートストラップ」します。</target>
        </trans-unit>
        <trans-unit id="e46df25af8b757050aa5e9886d9caf9fbd0a67ba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Move&lt;/em&gt; your root hooks into &lt;code&gt;test/hooks.js&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;ルートフックを &lt;code&gt;test/hooks.js&lt;/code&gt; に&lt;em&gt;移動し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="632537fb9ad4e98334b1de693642a46dcd7e7e36" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: Careful! &lt;code&gt;after&lt;/code&gt; becomes &lt;code&gt;afterAll&lt;/code&gt; and &lt;code&gt;before&lt;/code&gt; becomes &lt;code&gt;beforeAll&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：注意してください！ &lt;code&gt;after&lt;/code&gt; は &lt;code&gt;afterAll&lt;/code&gt; になり、 &lt;code&gt;before&lt;/code&gt; は &lt;code&gt;beforeAll&lt;/code&gt; になります。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="61d7a4ec323b815fda887832e043743a82a1a6e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE: This only applies when running in parallel mode.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：これは、並列モードで実行している場合にのみ適用されます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="223542867cf2cdefa595e6f17460de25ce9cee35" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in Node.js v12.12.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Node.jsv12.12.0の新機能&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="161adef3f67f3e357c37d96e4b69de555980f3bc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v.8.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v.8.0.0の新機能。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a94e737e1d07f1d801426e4afdec84b6bace004" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v6.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0の新機能。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e39d1fe99ff47d410a6daf0780953e79d0df0cba" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v6.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0の新機能&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="132dae01f3198cda73c50fe9216c0f82f59a129e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v7.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v7.0.0の新機能&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="336178458a82be96375ba4429011744ade12b394" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v7.1.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v7.1.0の新機能&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a55b874d97cc68f79bb187bace6a2de122772b2b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v8.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v8.0.0の新機能。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8f7d437326b3a591a72a0f4928e1cef75565d13d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;New in v8.2.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v8.2.0の新機能。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="244ae691dbc4f874d1020f9dc6060fe25ff1f77b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Authors of third-party libraries built on Mocha should read this!&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：Mocha上に構築されたサードパーティライブラリの作成者はこれを読む必要があります！&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="87993acc93c3f9ab84c7e3b8ab027e9b0bc84016" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Further examples will use ESM syntax.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：以降の例では、ESM構文を使用します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4a0edfb51f0156b9ebb2dc4a46c65c0e9b5e9717" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: All nested suites will still be executed.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：すべてのネストされたスイートは引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="292ce4771eb26d34e06a47bc58e7958dffbe558a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Code in skipped suites, that is placed outside of hooks or tests is still executed, as mocha will still invoke the suite function to build up the suite structure for visualization.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：mochaは引き続きスイート関数を呼び出して視覚化のためのスイート構造を構築するため、フックまたはテストの外側に配置されたスキップされたスイートのコードは引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="4f727f5f0c387f4d76840c0b9751e20d642d7645" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Double quotes around the glob are recommended for portability.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：可搬性のため、グロブを二重引用符で囲むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="02ad39309be3772f389ea773e9d23183fe6d1694" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: Hooks, if present, will still be executed.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;：フックが存在する場合は、引き続き実行されます。</target>
        </trans-unit>
        <trans-unit id="110e2d10c2ab554a2d2a5743c8a99ef43321577c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note&lt;/em&gt;: The &lt;code&gt;require&lt;/code&gt; interface cannot be run via the &lt;code&gt;node&lt;/code&gt; executable, and must be run via &lt;code&gt;mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;注&lt;/em&gt;： &lt;code&gt;require&lt;/code&gt; インターフェースは &lt;code&gt;node&lt;/code&gt; 実行可能ファイルを介して実行することはできず、 &lt;code&gt;mocha&lt;/code&gt; を介して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="27a683517748a0c2755328ea767522c20595a687" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Prior to&lt;/em&gt; version v4.0.0, &lt;em&gt;by default&lt;/em&gt;, Mocha would force its own process to exit once it was finished executing all tests. This behavior enables a set of potential problems; it&amp;rsquo;s indicative of tests (or fixtures, harnesses, code under test, etc.) which don&amp;rsquo;t clean up after themselves properly. Ultimately, &amp;ldquo;dirty&amp;rdquo; tests can (but not always) lead to &lt;em&gt;false positive&lt;/em&gt; or &lt;em&gt;false negative&lt;/em&gt; results.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;バージョンv4.0.0 &lt;em&gt;より前の&lt;/em&gt;&lt;em&gt;デフォルトでは&lt;/em&gt;、すべてのテストの実行が終了すると、Mochaは独自のプロセスを強制的に終了しました。この動作により、一連の潜在的な問題が発生します。正しくクリーンアップされないテスト（またはフィクスチャ、ハーネス、テスト対象のコードなど）を示しています。最終的に、「ダーティ」なテストは、&lt;em&gt;偽陽性&lt;/em&gt;または&lt;em&gt;偽陰性の&lt;/em&gt;結果につながる可能性があります（常にではありません）。</target>
        </trans-unit>
        <trans-unit id="b0e8dd2e5541c77f4f9a6ee0c801d573cee8a398" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Recommended&lt;/em&gt;: Define root hooks in a &amp;ldquo;required&amp;rdquo; file, using the new (also as of v8.0.0) &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin&lt;/a&gt; system.</source>
          <target state="translated">&lt;em&gt;推奨&lt;/em&gt;：新しい（v8.0.0以降も）&lt;a href=&quot;#root-hook-plugins&quot;&gt;ルートフックプラグイン&lt;/a&gt;システムを使用して、「必須」ファイルにルートフックを定義します。</target>
        </trans-unit>
        <trans-unit id="c0a663bfc74a0370395f882b55162094c144b77b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Removed in v8.0.0. Please use &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt; instead.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v8.0.0で削除されました。代わりに&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;構成ファイル&lt;/a&gt;を使用してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="041bd362249791314894aa1fdbc446f2715136c1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TIP: If parallel mode is defined in your config file, you can temporarily disable it on the command-line by using either the &lt;code&gt;--no-parallel&lt;/code&gt; flag or reducing the job count, e.g., &lt;code&gt;--jobs=0&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ヒント：設定ファイルで並列モードが定義されている場合は、 &lt;code&gt;--jobs=0&lt;/code&gt; &lt;code&gt;--no-parallel&lt;/code&gt; フラグを使用するか、ジョブ数を減らすことで、コマンドラインで一時的に無効にすることができます（例：-jobs = 0）。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3838cde734bb58610489e4c0400c4043a723bf06" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tip: If you need to ensure code runs once and only once in any mode, use &lt;a href=&quot;#global-fixtures&quot;&gt;global fixtures&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ヒント：コードがいずれかのモードで1回だけ実行されるようにする必要がある場合は、&lt;a href=&quot;#global-fixtures&quot;&gt;グローバルフィクスチャを&lt;/a&gt;使用してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c23d1aa75291dbdb378635dda9a3fc0002533492" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Tip: If you&amp;rsquo;re having trouble getting ES modules to work, refer to &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;the Node.js documentation&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ヒント：ESモジュールを機能させるのに問題がある場合は&lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;、Node.jsのドキュメントを&lt;/a&gt;参照してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e149bc259d8a80cb62c54ebbfdffe94125597c04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Update in v6.0.0: &lt;code&gt;--no-timeout&lt;/code&gt; is implied when invoking Mocha using inspect flags. It is equivalent to &lt;code&gt;--timeout 0&lt;/code&gt;. &lt;code&gt;--timeout 99999999&lt;/code&gt; is no longer needed.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0での更新：検査フラグを使用してMochaを呼び出す場合、-no &lt;code&gt;--no-timeout&lt;/code&gt; が暗黙指定されます。 &lt;code&gt;--timeout 0&lt;/code&gt; と同等です。 &lt;code&gt;--timeout 99999999&lt;/code&gt; は不要になりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b1c748253cdbecc40d965c206f0cf424884c0b53" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in Mocha v4.0.0&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Mocha v4.0.0で更新&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9641c5c0cb37ef46520c2368e901ecfb8fa1c4b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v4.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v4.0.0で更新されました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aeba22b9321151f87fa5e8fa6550d06a01a8624c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0. &lt;code&gt;--colors&lt;/code&gt; is now an alias for &lt;code&gt;--color&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0で更新されました。 &lt;code&gt;--colors&lt;/code&gt; は--colorのエイリアスに &lt;code&gt;--color&lt;/code&gt; 。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e5ec57807df10d1a4cd84bd4dc5ac479c4b18eb" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0. Can be specified multiple times. &lt;code&gt;--reporter-options&lt;/code&gt; is now an alias for &lt;code&gt;--reporter-option&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0で更新されました。複数回指定できます。 &lt;code&gt;--reporter-options&lt;/code&gt; は、 &lt;code&gt;--reporter-option&lt;/code&gt; エイリアスになりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d155ba263d47a9ebe65640ee824c634fda732379" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0で更新されました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e791e5fb2248541ecb30656502af9f75450ef6e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v6.0.0; the option is &lt;code&gt;--global&lt;/code&gt; and &lt;code&gt;--globals&lt;/code&gt; is now an alias.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;v6.0.0で更新。オプションは &lt;code&gt;--global&lt;/code&gt; で、 &lt;code&gt;--globals&lt;/code&gt; はエイリアスになりました。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1b7fde4220e48b64f10104bcd827b75c0b46f94f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Updated in v7.0.0:&lt;/em&gt; skipping a test within an &amp;ldquo;after all&amp;rdquo; hook is disallowed and will throw an exception. Use a return statement or other means to abort hook execution.</source>
          <target state="translated">&lt;em&gt;v7.0.0で更新：&lt;/em&gt;「結局のところ」フック内でテストをスキップすることは許可&lt;em&gt;されておらず&lt;/em&gt;、例外がスローされます。returnステートメントまたはその他の手段を使用して、フックの実行を中止します。</target>
        </trans-unit>
        <trans-unit id="d4db74b7bce1fe4e59b5a323c48d1983fec780a5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: &lt;code&gt;--file&lt;/code&gt; is incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;警告： &lt;code&gt;--file&lt;/code&gt; は&lt;a href=&quot;#parallel-tests&quot;&gt;パラレルモード&lt;/a&gt;と互換性がありません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db33707e1f78e0357859d672258eb8b1cfcc6177" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: &lt;code&gt;--sort&lt;/code&gt; is incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;警告： &lt;code&gt;--sort&lt;/code&gt; は&lt;a href=&quot;#parallel-tests&quot;&gt;並列モード&lt;/a&gt;と互換性がありません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f60594f3b995e3983ec2a82b524e924d3f350792" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: Delayed root suites are incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;警告：遅延ルートスイートは、&lt;a href=&quot;#parallel-tests&quot;&gt;並列モード&lt;/a&gt;と互換性がありません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="35fc89f2a78bd95ea48f7934332138c69947ee82" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;WARNING: Exclusive tests are incompatible with &lt;a href=&quot;#parallel-tests&quot;&gt;parallel mode&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;警告：排他的テストは&lt;a href=&quot;#parallel-tests&quot;&gt;並列モード&lt;/a&gt;と互換性がありません。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7542c68c1542b245f7a2242d4daea6e0514d3bbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;--compilers&lt;/code&gt; is deprecated as of Mocha v4.0.0. See &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;further explanation and workarounds&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;--compilers&lt;/code&gt; はMocha v4.0.0で非推奨になりました。詳細な&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/compilers-deprecation&quot;&gt;説明と回避策を&lt;/a&gt;参照してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d1acfed3d1038f6ce1e87618bd96e6bad976c1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;For more configuration examples, see the &lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/example/config&quot;&gt;&lt;code&gt;example/config&lt;/code&gt;&lt;/a&gt; directory on GitHub.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;その他の構成例については、GitHubの&lt;a href=&quot;https://github.com/mochajs/mocha/tree/master/example/config&quot;&gt; &lt;code&gt;example/config&lt;/code&gt; &lt;/a&gt;ディレクトリを参照してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c2b28476630b448d3beb4df2ecac6b7ab3b200e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON&lt;/strong&gt;: Create a &lt;code&gt;.mocharc.json&lt;/code&gt; (or &lt;code&gt;.mocharc.jsonc&lt;/code&gt;) in your project&amp;rsquo;s root directory. Comments &amp;mdash; while not valid JSON &amp;mdash; are allowed in this file, and will be ignored by Mocha.</source>
          <target state="translated">&lt;strong&gt;JSON&lt;/strong&gt;：プロジェクトのルートディレクトリに &lt;code&gt;.mocharc.json&lt;/code&gt; （または &lt;code&gt;.mocharc.jsonc&lt;/code&gt; ）を作成します。コメントは、有効なJSONではありませんが、このファイルで許可されており、Mochaでは無視されます。</target>
        </trans-unit>
        <trans-unit id="30bbcc8e6480ab29f9717f22f5490c7bbbbb9a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt;: Create a &lt;code&gt;.mocharc.js&lt;/code&gt; (or &lt;code&gt;.mocharc.cjs&lt;/code&gt; when using &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt;&lt;code&gt;&quot;type&quot;=&quot;module&quot;&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;package.json&lt;/code&gt;) in your project&amp;rsquo;s root directory, and export an object (&lt;code&gt;module.exports = {/* ... */}&lt;/code&gt;) containing your configuration.</source>
          <target state="translated">&lt;strong&gt;JavaScriptを&lt;/strong&gt;：作成 &lt;code&gt;.mocharc.js&lt;/code&gt; （または &lt;code&gt;.mocharc.cjs&lt;/code&gt; を使用するとき&lt;a href=&quot;#nodejs-native-esm-support&quot;&gt; &lt;code&gt;&quot;type&quot;=&quot;module&quot;&lt;/code&gt; &lt;/a&gt;あなたの中に &lt;code&gt;package.json&lt;/code&gt; を（）プロジェクトのルートディレクトリに、そしてオブジェクトをエクスポート &lt;code&gt;module.exports = {/* ... */}&lt;/code&gt; ）構成が含まれています。</target>
        </trans-unit>
        <trans-unit id="ee8b552bf5ae2f79e3e3ef40675d7a798575de65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Example below was written using Selenium webdriver (which &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js&quot;&gt;overwrites global Mocha hooks&lt;/a&gt; for &lt;code&gt;Promise&lt;/code&gt; chain).</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：以下の実施例（セレンwebdriverを用いて書かれた&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js&quot;&gt;グローバルモカフック上書き&lt;/a&gt;のため &lt;code&gt;Promise&lt;/code&gt; チェーン）。</target>
        </trans-unit>
        <trans-unit id="3e36990a636b4f7168d994d2b75a24da6e016203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTICE&lt;/strong&gt;: &lt;code&gt;--parallel&lt;/code&gt; has certain implications for Mocha&amp;rsquo;s behavior which you must be aware of. Read more about &lt;a href=&quot;#parallel-tests&quot;&gt;running tests in parallel&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;--parallel&lt;/code&gt; は、モカの動作に特定の影響を与えるため、&lt;strong&gt;注意&lt;/strong&gt;する必要があります。&lt;a href=&quot;#parallel-tests&quot;&gt;テストを並行し&lt;/a&gt;て実行する方法の詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="de16085c47655e171af51180d7ee56cc5015980b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The HTML reporter is not intended for use on the command-line.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;HTMLレポーターは、コマンドラインでの使用を目的としていません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4d787786cea2c89cdb8ea83b43598a1ce048bd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The above example does not work in parallel mode.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;上記の例は、並列モードでは機能しません。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="09ccb391784620c8fd0fcdfe67032a0428113d16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The easiest way to &amp;ldquo;fix&amp;rdquo; the issue is to pass &lt;code&gt;--exit&lt;/code&gt; to the Mocha process.&lt;/strong&gt; It &lt;em&gt;can&lt;/em&gt; be time-consuming to debug &amp;mdash; because it&amp;rsquo;s not always obvious where the problem is &amp;mdash; but it &lt;em&gt;is&lt;/em&gt; recommended to do so.</source>
          <target state="translated">&lt;strong&gt;問題を「修正」する最も簡単な方法は、 &lt;code&gt;--exit&lt;/code&gt; をMochaプロセスに渡すことです。&lt;/strong&gt;それは&lt;em&gt;することができ&lt;/em&gt;、デバッグに時間がかかること-それは、問題がどこにあるか必ずしも明確ではないので-それは&lt;em&gt;されて&lt;/em&gt;そうすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="892de634332bd473af3b1289e44a4321bab50f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The easiest way to &amp;ldquo;fix&amp;rdquo; the issue is to simply pass &lt;code&gt;--exit&lt;/code&gt; to the Mocha process.&lt;/strong&gt; It &lt;em&gt;can&lt;/em&gt; be time-consuming to debug&amp;ndash;because it&amp;rsquo;s not always obvious where the problem is&amp;ndash;but it &lt;em&gt;is&lt;/em&gt; recommended to do so.</source>
          <target state="translated">&lt;strong&gt;問題を「修正」する最も簡単な方法は、単に &lt;code&gt;--exit&lt;/code&gt; をMochaプロセスに渡すことです。&lt;/strong&gt;それは&lt;em&gt;することができ&lt;/em&gt;、問題がある、どこそれが必ずしも明確ではありませんので、デバッグに時間がかかり&lt;em&gt;れ&lt;/em&gt;そうすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0081b57d0f66070e1ff5b25411ae7bc7695c6209" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;YAML&lt;/strong&gt;: Create a &lt;code&gt;.mocharc.yaml&lt;/code&gt; (or &lt;code&gt;.mocharc.yml&lt;/code&gt;) in your project&amp;rsquo;s root directory.</source>
          <target state="translated">&lt;strong&gt;YAML&lt;/strong&gt;：プロジェクトのルートディレクトリに &lt;code&gt;.mocharc.yaml&lt;/code&gt; （または &lt;code&gt;.mocharc.yml&lt;/code&gt; ）を作成します。</target>
        </trans-unit>
        <trans-unit id="d274df27915f30e605b868996a96160bc57d5217" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You cannot use &lt;code&gt;--require&lt;/code&gt; to set hooks&lt;/strong&gt;. If you want to set hooks to run, e.g., before each test, use a &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;--require&lt;/code&gt; を使用してフックを設定することはできません&lt;/strong&gt;。たとえば、各テストの前に実行するフックを設定する場合は、&lt;a href=&quot;#root-hook-plugins&quot;&gt;ルートフックプラグインを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="ff01854d515caf3501a97141176d953734be59f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You cannot use &lt;code&gt;it.only&lt;/code&gt;, &lt;code&gt;describe.only&lt;/code&gt;, &lt;code&gt;this.only()&lt;/code&gt;, etc., in parallel mode.&lt;/strong&gt; This is for the same reason as the incompatible reporters noted above: in parallel mode, Mocha does not load all files and suites into memory before running tests.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;it.only&lt;/code&gt; 、 &lt;code&gt;describe.only&lt;/code&gt; 、 &lt;code&gt;this.only()&lt;/code&gt; などを並列モードで使用することはできません。&lt;/strong&gt;これは、上記の互換性のないレポーターと同じ理由です。並列モードでは、Mochaはテストを実行する前にすべてのファイルとスイートをメモリにロードしません。</target>
        </trans-unit>
        <trans-unit id="48351febaef71a333438805c1ee1bd32335e05f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package.json&lt;/strong&gt;: Create a &lt;code&gt;mocha&lt;/code&gt; property in your project&amp;rsquo;s &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;package.json&lt;/strong&gt;：プロジェクトの &lt;code&gt;package.json&lt;/code&gt; に &lt;code&gt;mocha&lt;/code&gt; プロパティを作成します。</target>
        </trans-unit>
        <trans-unit id="c9400ca26eb88619b0c81843aceb52bcfe9c044c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Root Hook Plugin&lt;/em&gt; is a JavaScript file loaded via &lt;a href=&quot;#-require-module-r-module&quot;&gt;&lt;code&gt;--require&lt;/code&gt;&lt;/a&gt; which &amp;ldquo;registers&amp;rdquo; one or more root hooks to be used across all test files.</source>
          <target state="translated">A&lt;em&gt;ルートフックプラグインは、&lt;/em&gt; JavaScriptファイルを経由してロードされている&lt;a href=&quot;#-require-module-r-module&quot;&gt; &lt;code&gt;--require&lt;/code&gt; &lt;/a&gt;すべてのテストファイルにまたがって使用すべき「レジスタ」は、一の以上のルートフックを。</target>
        </trans-unit>
        <trans-unit id="86eb6d90aa0e5a38f3596d7ee6a92c8492a2f1f6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;root hook&lt;/em&gt; is a hook in a test file which is &lt;em&gt;not defined&lt;/em&gt; within a suite. An example using the &lt;code&gt;bdd&lt;/code&gt; interface:</source>
          <target state="translated">&lt;em&gt;根フック&lt;/em&gt;されたテストファイルのフックで&lt;em&gt;定義されていない&lt;/em&gt;スイート内。 &lt;code&gt;bdd&lt;/code&gt; インターフェースを使用した例：</target>
        </trans-unit>
        <trans-unit id="98103f8bc77085f5bf66cced33f31631383927ce" translate="yes" xml:space="preserve">
          <source>A Root Hook Plugin file is a script which exports (via &lt;code&gt;module.exports&lt;/code&gt;) a &lt;code&gt;mochaHooks&lt;/code&gt; property. It is loaded via &lt;code&gt;--require &amp;lt;file&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ルートフックプラグインファイルは、 &lt;code&gt;mochaHooks&lt;/code&gt; プロパティを（ &lt;code&gt;module.exports&lt;/code&gt; を介して）エクスポートするスクリプトです。 &lt;code&gt;--require &amp;lt;file&amp;gt;&lt;/code&gt; を介してロードされます。</target>
        </trans-unit>
        <trans-unit id="a0f13d884830b5fdf5116a0ae9b36c1b10716a99" translate="yes" xml:space="preserve">
          <source>A brief outline on the order Mocha&amp;rsquo;s components are executed. Worth noting that all hooks, &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; callbacks are run in the order they are defined (i.e. found in the file).</source>
          <target state="translated">Mochaのコンポーネントが実行される注文の概要。すべてのフック、 &lt;code&gt;describe&lt;/code&gt; 、および &lt;code&gt;it&lt;/code&gt; コールバックは、定義された（つまり、ファイル内で検出された）順序で実行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f5318648871fbb71f62dbbd442692ae6fd0a4885" translate="yes" xml:space="preserve">
          <source>A hook defined at the top scope of a test file (outside of a suite) is a &lt;em&gt;root hook&lt;/em&gt;.</source>
          <target state="translated">テストファイルの最上位スコープ（スイート外）で定義されているフックは、&lt;em&gt;ルートフック&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="0dddd338ac80883aa9a63cca03ecd57465127f01" translate="yes" xml:space="preserve">
          <source>A typical setup might look something like the following, where we call &lt;code&gt;mocha.setup('bdd')&lt;/code&gt; to use the &lt;strong&gt;BDD&lt;/strong&gt; interface before loading the test scripts, running them &lt;code&gt;onload&lt;/code&gt; with &lt;code&gt;mocha.run()&lt;/code&gt;.</source>
          <target state="translated">典型的なセットアップは次のようになります。テストスクリプトを読み込む前に&lt;strong&gt;BDD&lt;/strong&gt;インターフェイスを使用するために &lt;code&gt;mocha.setup('bdd')&lt;/code&gt; を呼び出し、それらを &lt;code&gt;mocha.run()&lt;/code&gt; で &lt;code&gt;onload&lt;/code&gt; を実行します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="4b6d91aef58476d13a263b2403a28eba9b669a8e" translate="yes" xml:space="preserve">
          <source>About &lt;code&gt;node&lt;/code&gt; Flags</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; フラグについて</target>
        </trans-unit>
        <trans-unit id="390d8b7936094f003575622b17c10a13f1682936" translate="yes" xml:space="preserve">
          <source>About Babel</source>
          <target state="translated">バベルについて</target>
        </trans-unit>
        <trans-unit id="ed285ea3760d841f00fd05d996667d6c3a9f28df" translate="yes" xml:space="preserve">
          <source>About Option Types</source>
          <target state="translated">オプションの種類について</target>
        </trans-unit>
        <trans-unit id="d2ff2301917c0555affa0ef1c3423a956abc5ceb" translate="yes" xml:space="preserve">
          <source>About V8 Flags</source>
          <target state="translated">V8フラッグについて</target>
        </trans-unit>
        <trans-unit id="ce20799f82cbdcfea600bef25db5ac2131c4d651" translate="yes" xml:space="preserve">
          <source>Accepts a comma-delimited list of accepted global variable names. For example, suppose your app deliberately exposes a global named &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;YUI&lt;/code&gt;, you may want to add &lt;code&gt;--globals app,YUI&lt;/code&gt;. It also accepts wildcards. You could do &lt;code&gt;--globals '*bar'&lt;/code&gt; and it would match &lt;code&gt;foobar&lt;/code&gt;, &lt;code&gt;barbar&lt;/code&gt;, etc. You can also simply pass in &lt;code&gt;'*'&lt;/code&gt; to ignore all globals.</source>
          <target state="translated">受け入れられるグローバル変数名のコンマ区切りリストを受け入れます。たとえば、アプリケーションが意図的にグローバルな名前の公開したと &lt;code&gt;app&lt;/code&gt; や &lt;code&gt;YUI&lt;/code&gt; を、あなたが追加することも &lt;code&gt;--globals app,YUI&lt;/code&gt; 。ワイルドカードも使用できます。あなたは何ができる &lt;code&gt;--globals '*bar'&lt;/code&gt; 、それが一致し &lt;code&gt;foobar&lt;/code&gt; 、 &lt;code&gt;barbar&lt;/code&gt; あなたは、単にに渡すことができますなど、 &lt;code&gt;'*'&lt;/code&gt; すべてのグローバルを無視します。</target>
        </trans-unit>
        <trans-unit id="f6eb19d71e1ae75e095ac9db79aab38637aa620f" translate="yes" xml:space="preserve">
          <source>Add a file you want included first in a test suite. This is useful if you have some generic setup code that must be included within the test suite. The file passed is not affected by any other flags (&lt;code&gt;--recursive&lt;/code&gt; or &lt;code&gt;--sort&lt;/code&gt; have no effect). Accepts multiple &lt;code&gt;--file&lt;/code&gt; flags to include multiple files, the order in which the flags are given are the order in which the files are included in the test suite. Can also be used in &lt;code&gt;mocha.opts&lt;/code&gt;.</source>
          <target state="translated">最初にテストスイートに含めるファイルを追加します。これは、テストスイートに含める必要がある一般的なセットアップコードがある場合に便利です。渡されたファイルは他のフラグの影響を受けません（ &lt;code&gt;--recursive&lt;/code&gt; または &lt;code&gt;--sort&lt;/code&gt; は効果がありません）。複数の &lt;code&gt;--file&lt;/code&gt; フラグを受け入れて複数のファイルを含めます。フラグが指定される順序は、ファイルがテストスイートに含まれる順序です。 &lt;code&gt;mocha.opts&lt;/code&gt; でも使用できます。</target>
        </trans-unit>
        <trans-unit id="0d2f09268f0c41b32392346459a011f44d861320" translate="yes" xml:space="preserve">
          <source>Again, use &lt;code&gt;this.timeout(0)&lt;/code&gt; to disable the timeout for a hook.</source>
          <target state="translated">この場合も、 &lt;code&gt;this.timeout(0)&lt;/code&gt; を使用してフックのタイムアウトを無効にします。</target>
        </trans-unit>
        <trans-unit id="1fc110538336ab17e7e3679470c90959037d7b49" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Doc&lt;/code&gt;, &lt;code&gt;doc&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Doc&lt;/code&gt; 、 &lt;code&gt;doc&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8d0e6c97f7a4c7b94378d0eab1403b4043c7228" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Dot&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Dot&lt;/code&gt; 、 &lt;code&gt;dot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="feacf361da7ac872c852b31376b5617d385c4638" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;HTML&lt;/code&gt; 、 &lt;code&gt;html&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69f0241f7f1adbb5561d58a99334cb7ac4c5e013" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;JSON&lt;/code&gt; 、 &lt;code&gt;json&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5804a5a5d7c3e96d4fcef6ecddae1426f4834fff" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;JSONStream&lt;/code&gt;, &lt;code&gt;json-stream&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;JSONStream&lt;/code&gt; 、 &lt;code&gt;json-stream&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1f6ef32910073c4cda18431add27f2c67378c8bd" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Landing&lt;/code&gt;, &lt;code&gt;landing&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Landing&lt;/code&gt; 、 &lt;code&gt;landing&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79fd6a7b73e9478e056c332b6ed1519885a1a1e1" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;List&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16d8d672471b8d7618efb7aa6e62e6076456030d" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Markdown&lt;/code&gt;, &lt;code&gt;markdown&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Markdown&lt;/code&gt; 、 &lt;code&gt;markdown&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b6883098804170b794123bb1b760f596be6ab98c" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Min&lt;/code&gt; 、 &lt;code&gt;min&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a47d26c2c288aee58c425e6d430c7bed0a0c02d3" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Nyan&lt;/code&gt;, &lt;code&gt;nyan&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Nyan&lt;/code&gt; 、 &lt;code&gt;nyan&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c459cac28b698713a9aad39041b21260c0b8820" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Progress&lt;/code&gt;, &lt;code&gt;progress&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Progress&lt;/code&gt; 、 &lt;code&gt;progress&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7be2c48daf7419220ef4e3052e4d131665dee53f" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;Spec&lt;/code&gt;, &lt;code&gt;spec&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;Spec&lt;/code&gt; 、 &lt;code&gt;spec&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f0715556930bfe7f4612a11ac01616c25f0e966" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;TAP&lt;/code&gt;, &lt;code&gt;tap&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;TAP&lt;/code&gt; 、 &lt;code&gt;tap&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7108ab11bd6bb03a9e3cdd6e2ceb8e9483d36fe" translate="yes" xml:space="preserve">
          <source>Alias: &lt;code&gt;XUnit&lt;/code&gt;, &lt;code&gt;xunit&lt;/code&gt;</source>
          <target state="translated">エイリアス： &lt;code&gt;XUnit&lt;/code&gt; 、 &lt;code&gt;xunit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9a899749483e1ca649a0ff17ee384c65369f5a2" translate="yes" xml:space="preserve">
          <source>Aliases are valid names, e.g., &lt;code&gt;R&lt;/code&gt; instead of &lt;code&gt;reporter&lt;/code&gt;.</source>
          <target state="translated">エイリアスは有効な名前です。たとえば、 &lt;code&gt;reporter&lt;/code&gt; ではなく &lt;code&gt;R&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="289af3fcb7614daa438cf729070ffef737957648" translate="yes" xml:space="preserve">
          <source>All hooks (&lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, &lt;code&gt;afterEach()&lt;/code&gt;) may be sync or async as well, behaving much like a regular test-case. For example, you may wish to populate database with dummy content before each test:</source>
          <target state="translated">すべてのフック（ &lt;code&gt;before()&lt;/code&gt; 、 &lt;code&gt;after()&lt;/code&gt; 、 &lt;code&gt;beforeEach()&lt;/code&gt; 、 &lt;code&gt;afterEach()&lt;/code&gt; ）も同期または非同期であり、通常のテストケースのように動作します。たとえば、各テストの前に、データベースにダミーコンテンツを入力することができます。</target>
        </trans-unit>
        <trans-unit id="a0600916547646b30608339ed0566a7a7311cb26" translate="yes" xml:space="preserve">
          <source>All of the previous examples were written using the &lt;strong&gt;BDD&lt;/strong&gt; interface.</source>
          <target state="translated">これまでの例はすべて、&lt;strong&gt;BDD&lt;/strong&gt;インターフェイスを使用して記述されていました。</target>
        </trans-unit>
        <trans-unit id="8293e55bd5c2aeba3f576c3c5d6cb7b1087912a7" translate="yes" xml:space="preserve">
          <source>All of these options are mutually exclusive.</source>
          <target state="translated">これらのオプションはすべて相互に排他的なものです。</target>
        </trans-unit>
        <trans-unit id="aaf290d14e20213213056d325e890a7f0fe5f769" translate="yes" xml:space="preserve">
          <source>All test files found are put into a queue (they are &lt;em&gt;not&lt;/em&gt; loaded by the main process)</source>
          <target state="translated">All test files found are put into a queue (they are &lt;em&gt;not&lt;/em&gt; loaded by the main process)</target>
        </trans-unit>
        <trans-unit id="e224354b6333bc24445ee142d000195c4dc0a2f0" translate="yes" xml:space="preserve">
          <source>Allows use of third-party reporters. For example, &lt;a href=&quot;https://npm.im/mocha-lcov-reporter&quot;&gt;mocha-lcov-reporter&lt;/a&gt; may be used with &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; after it has been installed.</source>
          <target state="translated">Allows use of third-party reporters. For example, &lt;a href=&quot;https://npm.im/mocha-lcov-reporter&quot;&gt;mocha-lcov-reporter&lt;/a&gt; may be used with &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; after it has been installed.</target>
        </trans-unit>
        <trans-unit id="6633fa7c33d41f9538bafc31713f5cc20e7e52c5" translate="yes" xml:space="preserve">
          <source>Alternately, instead of using the &lt;code&gt;done()&lt;/code&gt; callback, you may return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt;. This is useful if the APIs you are testing return promises instead of taking callbacks:</source>
          <target state="translated">あるいは、 &lt;code&gt;done()&lt;/code&gt; コールバックを使用する代わりに、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promiseを&lt;/a&gt;返すこともできます。これは、テストしているAPIがコールバックを取る代わりにプロミスを返す場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ba0dcfb94770950968dfd69b4e2b7a1c491c8f1a" translate="yes" xml:space="preserve">
          <source>Alternatively, use the &lt;code&gt;done()&lt;/code&gt; callback directly (which will handle an error argument, if it exists):</source>
          <target state="translated">Alternatively, use the &lt;code&gt;done()&lt;/code&gt; callback directly (which will handle an error argument, if it exists):</target>
        </trans-unit>
        <trans-unit id="a78bf99b213932b89a6e501b7ebe30749a21c965" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;after all&amp;rdquo; hooks (for the &lt;em&gt;root&lt;/em&gt; suite, this only happens once; see &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;)</source>
          <target state="translated">Any &amp;ldquo;after all&amp;rdquo; hooks (for the &lt;em&gt;root&lt;/em&gt; suite, this only happens once; see &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="eed86c82ad7af53fa31b2095ee2ca48396f5a53f" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;after each&amp;rdquo; hooks</source>
          <target state="translated">Any &amp;ldquo;after each&amp;rdquo; hooks</target>
        </trans-unit>
        <trans-unit id="6725da6a83ab1a0cc58427dc253916e613237321" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;array&amp;rdquo;-type option (see &lt;code&gt;mocha --help&lt;/code&gt; for a list) can be a single string value.</source>
          <target state="translated">Any &amp;ldquo;array&amp;rdquo;-type option (see &lt;code&gt;mocha --help&lt;/code&gt; for a list) can be a single string value.</target>
        </trans-unit>
        <trans-unit id="8214660c900e006d99e3bc02af4823577871a568" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;before all&amp;rdquo; hooks (for the &lt;em&gt;root&lt;/em&gt; suite, this only happens once; see &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;)</source>
          <target state="translated">Any &amp;ldquo;before all&amp;rdquo; hooks (for the &lt;em&gt;root&lt;/em&gt; suite, this only happens once; see &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="6372cbffca45104e3ce931091ce164c9d8b7f53d" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;before each&amp;rdquo; hooks</source>
          <target state="translated">Any &amp;ldquo;before each&amp;rdquo; hooks</target>
        </trans-unit>
        <trans-unit id="ff4aa248777fd0eb4a5711d0260cbc3131e10792" translate="yes" xml:space="preserve">
          <source>Any &amp;ldquo;boolean&amp;rdquo; flag (which doesn&amp;rsquo;t require a parameter, such as &lt;code&gt;--bail&lt;/code&gt;), can be specified using a boolean value, e.g.: &lt;code&gt;&quot;bail&quot;: true&lt;/code&gt;.</source>
          <target state="translated">Any &amp;ldquo;boolean&amp;rdquo; flag (which doesn&amp;rsquo;t require a parameter, such as &lt;code&gt;--bail&lt;/code&gt; ), can be specified using a boolean value, e.g.: &lt;code&gt;&quot;bail&quot;: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03f510bb6cb4dea10971d9bb6c0260d30a7de793" translate="yes" xml:space="preserve">
          <source>Any hook can be invoked with an optional description, making it easier to pinpoint errors in your tests. If a hook is given a named function, that name will be used if no description is supplied.</source>
          <target state="translated">任意のフックはオプションの記述で呼び出すことができるので、テスト中のエラーをより簡単に特定することができます。フックに名前付きの関数が与えられている場合、説明が与えられていない場合はその名前が使われます。</target>
        </trans-unit>
        <trans-unit id="b40fac2aebc93cf70055e28fd897547a1baad77f" translate="yes" xml:space="preserve">
          <source>Are &lt;em&gt;guaranteed&lt;/em&gt; to execute &lt;em&gt;once and only once&lt;/em&gt;</source>
          <target state="translated">Are &lt;em&gt;guaranteed&lt;/em&gt; to execute &lt;em&gt;once and only once&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6f2a2e770f2867009e41335ccc97fdca8852d778" translate="yes" xml:space="preserve">
          <source>Arguments specified on command-line</source>
          <target state="translated">コマンドラインで指定された引数</target>
        </trans-unit>
        <trans-unit id="2eff12655bfd37e8aba34fc4ce9e8a7b43bbf939" translate="yes" xml:space="preserve">
          <source>Arrow Functions</source>
          <target state="translated">矢印関数</target>
        </trans-unit>
        <trans-unit id="ada51e8076486dad6b8c2ba5b748240b17f5917c" translate="yes" xml:space="preserve">
          <source>As explained &lt;a href=&quot;#global-fixtures&quot;&gt;above&lt;/a&gt;&amp;ndash;and &lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;below&lt;/a&gt;&amp;ndash;test files &lt;em&gt;do not&lt;/em&gt; have access to this context object.</source>
          <target state="translated">As explained &lt;a href=&quot;#global-fixtures&quot;&gt;above&lt;/a&gt;&amp;ndash;and &lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;below&lt;/a&gt;&amp;ndash;test files &lt;em&gt;do not&lt;/em&gt; have access to this context object.</target>
        </trans-unit>
        <trans-unit id="5590dab7ed5781aa923c09bc4d648e974db5ceae" translate="yes" xml:space="preserve">
          <source>As of v8.0.0, &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugins&lt;/a&gt; are the preferred mechanism for setting root hooks.</source>
          <target state="translated">As of v8.0.0, &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugins&lt;/a&gt; are the preferred mechanism for setting root hooks.</target>
        </trans-unit>
        <trans-unit id="a4d36874b348b8699dff85e004d671eb589f0243" translate="yes" xml:space="preserve">
          <source>As of v8.0.0, Mocha requires Node.js v10.12.0 or newer.</source>
          <target state="translated">v8.0.0.0の時点で、MochaにはNode.js v10.12.0以降が必要です。</target>
        </trans-unit>
        <trans-unit id="51457a13062e8124a56ca7ce98036b271ae4bbac" translate="yes" xml:space="preserve">
          <source>As of v8.0.0, Mocha supports &lt;code&gt;--require&lt;/code&gt; for &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt;NodeJS native ESM&lt;/a&gt;. There is no separate &lt;code&gt;--import&lt;/code&gt; flag.</source>
          <target state="translated">As of v8.0.0, Mocha supports &lt;code&gt;--require&lt;/code&gt; for &lt;a href=&quot;#nodejs-native-esm-support&quot;&gt;NodeJS native ESM&lt;/a&gt;. There is no separate &lt;code&gt;--import&lt;/code&gt; flag.</target>
        </trans-unit>
        <trans-unit id="c6d4377b954698348a8287f66cabee7d20d09375" translate="yes" xml:space="preserve">
          <source>As with other hooks, &lt;code&gt;this&lt;/code&gt; refers to to the current context object:</source>
          <target state="translated">As with other hooks, &lt;code&gt;this&lt;/code&gt; refers to to the current context object:</target>
        </trans-unit>
        <trans-unit id="d852d5aa2d2573a9cbd026c7ebaabec9dcb73d2f" translate="yes" xml:space="preserve">
          <source>Asserting the built-in or custom interface is valid</source>
          <target state="translated">ビルトインまたはカスタムインターフェースが有効であることをアサートする</target>
        </trans-unit>
        <trans-unit id="830b8d43acead3d18097f6c19c3aa10f98698789" translate="yes" xml:space="preserve">
          <source>Assertion libraries that augment built-ins or global scope (such as &lt;a href=&quot;https://npm.im/should&quot;&gt;should.js&lt;/a&gt;)</source>
          <target state="translated">Assertion libraries that augment built-ins or global scope (such as &lt;a href=&quot;https://npm.im/should&quot;&gt;should.js&lt;/a&gt;)</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="9dafd7cfbbe492b64e8825fd60794e30fb996eaa" translate="yes" xml:space="preserve">
          <source>Asynchronous Code</source>
          <target state="translated">非同期コード</target>
        </trans-unit>
        <trans-unit id="1dc7d645ff307166377bb1ae5a2ceb0ed4f4a597" translate="yes" xml:space="preserve">
          <source>Asynchronous Hooks</source>
          <target state="translated">非同期フック</target>
        </trans-unit>
        <trans-unit id="74a9fd85ec54760363c73a24c54d69d2f7764041" translate="yes" xml:space="preserve">
          <source>At first glance, &lt;em&gt;global fixtures&lt;/em&gt; seem similar to &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hooks&lt;/a&gt;. However, unlike root hooks, global fixtures:</source>
          <target state="translated">At first glance, &lt;em&gt;global fixtures&lt;/em&gt; seem similar to &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hooks&lt;/a&gt;. However, unlike root hooks, global fixtures:</target>
        </trans-unit>
        <trans-unit id="b12e6523e3bdeed15787bb7262b9739aba01792d" translate="yes" xml:space="preserve">
          <source>Available Root Hooks</source>
          <target state="translated">利用可能なルートフック</target>
        </trans-unit>
        <trans-unit id="3d687be194881c2ce3d30436ff5ffe08a53a7c04" translate="yes" xml:space="preserve">
          <source>Available root hooks and their behavior:</source>
          <target state="translated">利用可能なルートフックとその動作</target>
        </trans-unit>
        <trans-unit id="38b5d0dd2a1d99cba157a215ae014edf10488b48" translate="yes" xml:space="preserve">
          <source>BDD</source>
          <target state="translated">BDD</target>
        </trans-unit>
        <trans-unit id="93c1dca080e0df99b78d4c9a4de497925b17b740" translate="yes" xml:space="preserve">
          <source>Back in the terminal:</source>
          <target state="translated">端末に戻る。</target>
        </trans-unit>
        <trans-unit id="76932969916b9530f79f906d201312b3c98aa939" translate="yes" xml:space="preserve">
          <source>Back on the server, Mocha will attempt to load &lt;code&gt;&quot;./test/mocha.opts&quot;&lt;/code&gt; as a Run-Control file of sorts.</source>
          <target state="translated">サーバーに戻ると、Mochaは &lt;code&gt;&quot;./test/mocha.opts&quot;&lt;/code&gt; を一種のRun-Controlファイルとしてロードしようとします。</target>
        </trans-unit>
        <trans-unit id="6a9c9bab317fe02e67112c150ce937d254a60e32" translate="yes" xml:space="preserve">
          <source>Be mindful not to commit usages of &lt;code&gt;.only()&lt;/code&gt; to version control, unless you really mean it! To do so one can run mocha with the option &lt;code&gt;--forbid-only&lt;/code&gt; in the continuous integration test command (or in a git precommit hook).</source>
          <target state="translated">本当にそうでなければ、バージョン管理に &lt;code&gt;.only()&lt;/code&gt; の使用をコミットしないように注意してください！これを行うには、継続的インテグレーションテストコマンド（またはgit precommitフック）でオプション &lt;code&gt;--forbid-only&lt;/code&gt; を指定してmochaを実行します。</target>
        </trans-unit>
        <trans-unit id="6b44436a63ea4238ba705aba6634a71e9a3b6ed4" translate="yes" xml:space="preserve">
          <source>Because of this, the following options, which depend on order, &lt;em&gt;cannot be used&lt;/em&gt; in parallel mode:</source>
          <target state="translated">Because of this, the following options, which depend on order, &lt;em&gt;cannot be used&lt;/em&gt; in parallel mode:</target>
        </trans-unit>
        <trans-unit id="035742046edc6a28a1cf9823f15f50ac906b0794" translate="yes" xml:space="preserve">
          <source>Because this test &lt;em&gt;does nothing&lt;/em&gt;, it will be reported as &lt;em&gt;passing&lt;/em&gt;.</source>
          <target state="translated">このテストがあるので&lt;em&gt;何もしません&lt;/em&gt;、それは次のように報告されます&lt;em&gt;渡します&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b9a22b5b44d7a2e3bf14c0874ea69cef878081f7" translate="yes" xml:space="preserve">
          <source>Before Mocha v3.0.0, &lt;code&gt;this.skip()&lt;/code&gt; was not supported in asynchronous tests and hooks.</source>
          <target state="translated">Mocha v3.0.0より前は、 &lt;code&gt;this.skip()&lt;/code&gt; は非同期テストとフックでサポートされていませんでした。</target>
        </trans-unit>
        <trans-unit id="dd97b1d45a21d2dca8f76533e8120a4564b26f0f" translate="yes" xml:space="preserve">
          <source>Beginning-of-line comment support is available; any line &lt;em&gt;starting&lt;/em&gt; with a hash (#) symbol will be considered a comment. Blank lines may also be used. Any other line will be treated as a command-line argument (along with any associated option value) to be used as a default setting. Settings should be specified one per line.</source>
          <target state="translated">行頭コメントのサポートが利用可能です。ハッシュ（＃）記号で&lt;em&gt;始まる&lt;/em&gt;行はコメントと見なされます。空白行も使用できます。その他の行は、デフォルト設定として使用されるコマンド行引数（および関連するオプション値）として扱われます。設定は1行に1つ指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1fe5f18a82f2f33248c686dc8605a6041ecad6f9" translate="yes" xml:space="preserve">
          <source>Browser Configuration</source>
          <target state="translated">ブラウザの設定</target>
        </trans-unit>
        <trans-unit id="ead90b7272a3c77f3b48d4a67364396a14959dd6" translate="yes" xml:space="preserve">
          <source>Browser Mocha supports many, but not all &lt;a href=&quot;#command-line-usage&quot;&gt;cli options&lt;/a&gt;. To use a &lt;a href=&quot;#command-line-usage&quot;&gt;cli option&lt;/a&gt; that contains a &amp;ldquo;-&amp;rdquo;, please convert the option to camel-case, (eg. &lt;code&gt;check-leaks&lt;/code&gt; to &lt;code&gt;checkLeaks&lt;/code&gt;).</source>
          <target state="translated">Browser Mocha supports many, but not all &lt;a href=&quot;#command-line-usage&quot;&gt;cli options&lt;/a&gt;. To use a &lt;a href=&quot;#command-line-usage&quot;&gt;cli option&lt;/a&gt; that contains a &amp;ldquo;-&amp;rdquo;, please convert the option to camel-case, (eg. &lt;code&gt;check-leaks&lt;/code&gt; to &lt;code&gt;checkLeaks&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="45a9e14e76383ee36cde87a8d614fcc0078e9d29" translate="yes" xml:space="preserve">
          <source>Browser-based notifications</source>
          <target state="translated">ブラウザベースの通知</target>
        </trans-unit>
        <trans-unit id="7264b421a309869abd486d52587fd493e2717efb" translate="yes" xml:space="preserve">
          <source>Browser-specific Option(s)</source>
          <target state="translated">ブラウザ固有のオプション</target>
        </trans-unit>
        <trans-unit id="ee269b8b06248dcfd3dcba5fa33bdeb97ed38dc6" translate="yes" xml:space="preserve">
          <source>Browser-specific methods</source>
          <target state="translated">ブラウザ固有のメソッド</target>
        </trans-unit>
        <trans-unit id="4334130e97520ac7097525a48ac1e304d360c7cb" translate="yes" xml:space="preserve">
          <source>But &lt;em&gt;tests will have precedence&lt;/em&gt;:</source>
          <target state="translated">ただし、&lt;em&gt;テストが優先され&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="f78bc375258d8a66673bc276a2f8f9c1b3143b18" translate="yes" xml:space="preserve">
          <source>By adding an argument (usually named &lt;code&gt;done&lt;/code&gt;) to &lt;code&gt;it()&lt;/code&gt; to a test callback, Mocha will know that it should wait for this function to be called to complete the test. This callback accepts both an &lt;code&gt;Error&lt;/code&gt; instance (or subclass thereof) &lt;em&gt;or&lt;/em&gt; a falsy value; anything else is invalid usage and throws an error (usually causing a failed test).</source>
          <target state="translated">By adding an argument (usually named &lt;code&gt;done&lt;/code&gt; ) to &lt;code&gt;it()&lt;/code&gt; to a test callback, Mocha will know that it should wait for this function to be called to complete the test. This callback accepts both an &lt;code&gt;Error&lt;/code&gt; instance (or subclass thereof) &lt;em&gt;or&lt;/em&gt; a falsy value; anything else is invalid usage and throws an error (usually causing a failed test).</target>
        </trans-unit>
        <trans-unit id="b2f9d42231316404e2cabc285c74394be64eb9e6" translate="yes" xml:space="preserve">
          <source>By default all files in the current directory having one of the extensions provided by &lt;code&gt;--extension&lt;/code&gt; and not contained in the &lt;code&gt;node_modules&lt;/code&gt; or &lt;code&gt;.git&lt;/code&gt; folders are watched.</source>
          <target state="translated">By default all files in the current directory having one of the extensions provided by &lt;code&gt;--extension&lt;/code&gt; and not contained in the &lt;code&gt;node_modules&lt;/code&gt; or &lt;code&gt;.git&lt;/code&gt; folders are watched.</target>
        </trans-unit>
        <trans-unit id="b5e18ff5d92f817933a93f1b36abf01795769e75" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mocha&lt;/code&gt; looks for the glob &lt;code&gt;&quot;./test/*.js&quot;&lt;/code&gt;, so you may want to put your tests in &lt;code&gt;test/&lt;/code&gt; folder. If you want to include subdirectories, pass the &lt;code&gt;--recursive&lt;/code&gt; option.</source>
          <target state="translated">By default, &lt;code&gt;mocha&lt;/code&gt; looks for the glob &lt;code&gt;&quot;./test/*.js&quot;&lt;/code&gt; , so you may want to put your tests in &lt;code&gt;test/&lt;/code&gt; folder. If you want to include subdirectories, pass the &lt;code&gt;--recursive&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="84d09fc276227a99a85ff46a9de164688194ec4a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;mocha&lt;/code&gt; looks for the glob &lt;code&gt;./test/*.js&lt;/code&gt;, so you may want to put your tests in &lt;code&gt;test/&lt;/code&gt; folder. If you want to include sub directories, pass the &lt;code&gt;--recursive&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;mocha&lt;/code&gt; はglob &lt;code&gt;./test/*.js&lt;/code&gt; を検索するため、テストを &lt;code&gt;test/&lt;/code&gt; フォルダーに置くことをお勧めします。サブディレクトリを含める場合は、 &lt;code&gt;--recursive&lt;/code&gt; オプションを渡します。</target>
        </trans-unit>
        <trans-unit id="fd4b6d977eff2078de6ff99bb0e3f277dbc79941" translate="yes" xml:space="preserve">
          <source>By default, Mocha looks for a &lt;code&gt;package.json&lt;/code&gt; in the current working directory or nearest ancestor, and will use the first file found (regardless of whether it contains a &lt;code&gt;mocha&lt;/code&gt; property); to suppress &lt;code&gt;package.json&lt;/code&gt; lookup, use &lt;code&gt;--no-package&lt;/code&gt;.</source>
          <target state="translated">By default, Mocha looks for a &lt;code&gt;package.json&lt;/code&gt; in the current working directory or nearest ancestor, and will use the first file found (regardless of whether it contains a &lt;code&gt;mocha&lt;/code&gt; property); to suppress &lt;code&gt;package.json&lt;/code&gt; lookup, use &lt;code&gt;--no-package&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bfc647847a042426461dee539849f64fe5844b0b" translate="yes" xml:space="preserve">
          <source>By default, Mocha will attempt to trap uncaught exceptions thrown from running tests and report these as test failures. Use &lt;code&gt;--allow-uncaught&lt;/code&gt; to disable this behavior and allow uncaught exceptions to propagate. Will typically cause the process to crash.</source>
          <target state="translated">By default, Mocha will attempt to trap uncaught exceptions thrown from running tests and report these as test failures. Use &lt;code&gt;--allow-uncaught&lt;/code&gt; to disable this behavior and allow uncaught exceptions to propagate. Will typically cause the process to crash.</target>
        </trans-unit>
        <trans-unit id="f60a605d6f86b30d2471c7bd338c828c55acfa8d" translate="yes" xml:space="preserve">
          <source>By default, Mocha will search for a config file if &lt;code&gt;--config&lt;/code&gt; is not specified; use &lt;code&gt;--no-config&lt;/code&gt; to suppress this behavior.</source>
          <target state="translated">By default, Mocha will search for a config file if &lt;code&gt;--config&lt;/code&gt; is not specified; use &lt;code&gt;--no-config&lt;/code&gt; to suppress this behavior.</target>
        </trans-unit>
        <trans-unit id="e7ed8285b0b9d88c035334bbc7d48134b611b220" translate="yes" xml:space="preserve">
          <source>By default, it will output to the console. To write directly to a file, use &lt;code&gt;--reporter-option output=filename.xml&lt;/code&gt;.</source>
          <target state="translated">By default, it will output to the console. To write directly to a file, use &lt;code&gt;--reporter-option output=filename.xml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7927d0b938949e3c69d17add97d21ff99bf3841" translate="yes" xml:space="preserve">
          <source>By default, it will output to the console. To write directly to a file, use &lt;code&gt;--reporter-options output=filename.xml&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、コンソールに出力されます。ファイルに直接書き込むには、 &lt;code&gt;--reporter-options output=filename.xml&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9ef6b1f23a4221d1ac5dfe3a77db223917aff780" translate="yes" xml:space="preserve">
          <source>By using this option in conjunction with &lt;code&gt;--check-leaks&lt;/code&gt;, you can specify a whitelist of known global variables that you &lt;em&gt;expect&lt;/em&gt; to leak into global scope.</source>
          <target state="translated">By using this option in conjunction with &lt;code&gt;--check-leaks&lt;/code&gt; , you can specify a whitelist of known global variables that you &lt;em&gt;expect&lt;/em&gt; to leak into global scope.</target>
        </trans-unit>
        <trans-unit id="50b2705a7a7fbc592728f9775d0530826eb9332f" translate="yes" xml:space="preserve">
          <source>By using this option in conjunction with &lt;code&gt;--check-leaks&lt;/code&gt;, you can specify a whitelist of known global variables that you would expect to leak into global scope.</source>
          <target state="translated">このオプションを &lt;code&gt;--check-leaks&lt;/code&gt; と組み合わせて使用すると、グローバルスコープにリークすると予想される既知のグローバル変数のホワイトリストを指定できます。</target>
        </trans-unit>
        <trans-unit id="2d8a32b6db2f34014a9dd3ccc843aad9c56b8130" translate="yes" xml:space="preserve">
          <source>Can be specified as a comma-delimited list.</source>
          <target state="translated">カンマ区切りのリストとして指定することができます。</target>
        </trans-unit>
        <trans-unit id="81aa9ce9d1b4e822d154510e728419b5e38a400d" translate="yes" xml:space="preserve">
          <source>Can be specified multiple times.</source>
          <target state="translated">複数回指定可能。</target>
        </trans-unit>
        <trans-unit id="befe2a7713d1a8997216ede4094c7f7bb4fd69e2" translate="yes" xml:space="preserve">
          <source>Cause Mocha to only run tests having titles containing the given &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">Cause Mocha to only run tests having titles containing the given &lt;code&gt;string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1263c2b0a448d7035f5b5e6f7f82c0fae65f8875" translate="yes" xml:space="preserve">
          <source>Cause Mocha to only run tests matching the given &lt;code&gt;regexp&lt;/code&gt;, which is internally compiled to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Regexp&quot;&gt;RegExp&lt;/a&gt;.</source>
          <target state="translated">Cause Mocha to only run tests matching the given &lt;code&gt;regexp&lt;/code&gt; , which is internally compiled to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Regexp&quot;&gt;RegExp&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0d7fafa179429b6ddaeb4aaf5c5f7beb3de4378d" translate="yes" xml:space="preserve">
          <source>Causes Mocha to stop running tests after the first test failure it encounters. Corresponding &amp;ldquo;after each&amp;rdquo; and &amp;ldquo;after all&amp;rdquo; hooks are executed for potential cleanup.</source>
          <target state="translated">Causes Mocha to stop running tests after the first test failure it encounters. Corresponding &amp;ldquo;after each&amp;rdquo; and &amp;ldquo;after all&amp;rdquo; hooks are executed for potential cleanup.</target>
        </trans-unit>
        <trans-unit id="997813380983627962b50431002ad017e449b78a" translate="yes" xml:space="preserve">
          <source>Caveats About Testing in Parallel</source>
          <target state="translated">並列テストについての注意点</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="5df9bae9c75abec6d59a80bfbda9901d5365728f" translate="yes" xml:space="preserve">
          <source>CoffeeScript is no longer supported out of the box. CS and similar transpilers may be used by mapping the file extensions (for use with &lt;code&gt;--watch&lt;/code&gt;) and the module name. For example &lt;code&gt;--compilers coffee:coffee-script&lt;/code&gt; with CoffeeScript 1.6- or &lt;code&gt;--compilers coffee:coffee-script/register&lt;/code&gt; with CoffeeScript 1.7+.</source>
          <target state="translated">CoffeeScriptはそのままではサポートされなくなりました。ファイル拡張子（ &lt;code&gt;--watch&lt;/code&gt; で使用）とモジュール名をマッピングすることにより、CSおよび類似のトランスパイラーを使用できます。たとえば、 &lt;code&gt;--compilers coffee:coffee-script&lt;/code&gt; with CoffeeScript &lt;code&gt;--compilers coffee:coffee-script/register&lt;/code&gt; または--compilers coffee：coffee-script / register with CoffeeScript 1.7+。</target>
        </trans-unit>
        <trans-unit id="090ffa187f33d5f4ea1b00a057f6c8cafb5a0039" translate="yes" xml:space="preserve">
          <source>Command-Line Usage</source>
          <target state="translated">コマンドライン使用法</target>
        </trans-unit>
        <trans-unit id="a7018ee30082641edd48ac77a15754d95674f235" translate="yes" xml:space="preserve">
          <source>Compilers such as Babel via &lt;a href=&quot;https://npm.im/@babel/register&quot;&gt;@babel/register&lt;/a&gt; or TypeScript via &lt;a href=&quot;https://npm.im/ts-node&quot;&gt;ts-node&lt;/a&gt; (using &lt;code&gt;--require ts-node/register&lt;/code&gt;). See &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/babel&quot;&gt;Babel&lt;/a&gt; or &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/typescript&quot;&gt;TypeScript&lt;/a&gt; working examples.</source>
          <target state="translated">Compilers such as Babel via &lt;a href=&quot;https://npm.im/@babel/register&quot;&gt;@babel/register&lt;/a&gt; or TypeScript via &lt;a href=&quot;https://npm.im/ts-node&quot;&gt;ts-node&lt;/a&gt; (using &lt;code&gt;--require ts-node/register&lt;/code&gt; ). See &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/babel&quot;&gt;Babel&lt;/a&gt; or &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/typescript&quot;&gt;TypeScript&lt;/a&gt; working examples.</target>
        </trans-unit>
        <trans-unit id="35396ccbf60dec50c391b4b5fbcc83bfcb5ba776" translate="yes" xml:space="preserve">
          <source>Configuration Format</source>
          <target state="translated">構成形式</target>
        </trans-unit>
        <trans-unit id="89ee9f09a7bddc18678f282ac618c13f798726c1" translate="yes" xml:space="preserve">
          <source>Configuration file (&lt;code&gt;.mocharc.js&lt;/code&gt;, &lt;code&gt;.mocharc.yml&lt;/code&gt;, etc.)</source>
          <target state="translated">Configuration file ( &lt;code&gt;.mocharc.js&lt;/code&gt; , &lt;code&gt;.mocharc.yml&lt;/code&gt; , etc.)</target>
        </trans-unit>
        <trans-unit id="748ede4198981796b24313446db4f1682344736b" translate="yes" xml:space="preserve">
          <source>Configurations can inherit from other modules using the &lt;code&gt;extends&lt;/code&gt; keyword. See &lt;a href=&quot;http://yargs.js.org/docs/#api-configobject-extends-keyword&quot;&gt;here&lt;/a&gt; for more information.</source>
          <target state="translated">Configurations can inherit from other modules using the &lt;code&gt;extends&lt;/code&gt; keyword. See &lt;a href=&quot;http://yargs.js.org/docs/#api-configobject-extends-keyword&quot;&gt;here&lt;/a&gt; for more information.</target>
        </trans-unit>
        <trans-unit id="c9cd2e50e62a2a1c352c509c164bb770884c22ca" translate="yes" xml:space="preserve">
          <source>Configuring Mocha (Node.js)</source>
          <target state="translated">Mocha(Node.js)の設定</target>
        </trans-unit>
        <trans-unit id="b65463cb6a42a17de514acc4659f7fd331e0876a" translate="yes" xml:space="preserve">
          <source>Connect</source>
          <target state="translated">Connect</target>
        </trans-unit>
        <trans-unit id="66716e9eea1ed594ef32a49efc5599e83d44105f" translate="yes" xml:space="preserve">
          <source>Contrast the above test with the following code:</source>
          <target state="translated">上記のテストを以下のコードと対比してみてください。</target>
        </trans-unit>
        <trans-unit id="3c301b767710ca810852efd09eb87b6d943d2e5a" translate="yes" xml:space="preserve">
          <source>Create a new file, e.g., &lt;code&gt;test/hooks.js&lt;/code&gt;.</source>
          <target state="translated">Create a new file, e.g., &lt;code&gt;test/hooks.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2a463d1fd54eb7d11c92e0e71b86fed201fe30d" translate="yes" xml:space="preserve">
          <source>Current Limitations</source>
          <target state="translated">現在の制限</target>
        </trans-unit>
        <trans-unit id="40e42150865d8e5130d633b862be656c6ed68bf2" translate="yes" xml:space="preserve">
          <source>Custom Locations</source>
          <target state="translated">カスタムロケーション</target>
        </trans-unit>
        <trans-unit id="4205624f33e051eaeb9ed46110ce99fee8d2dd4d" translate="yes" xml:space="preserve">
          <source>Define a global variable name. For example, suppose your app deliberately exposes a global named &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;YUI&lt;/code&gt;, you may want to add &lt;code&gt;--global app --global YUI&lt;/code&gt;.</source>
          <target state="translated">Define a global variable name. For example, suppose your app deliberately exposes a global named &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;YUI&lt;/code&gt; , you may want to add &lt;code&gt;--global app --global YUI&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1643ad5c0ce39559f97029c68080a37913b37dfe" translate="yes" xml:space="preserve">
          <source>Defining a Root Hook Plugin</source>
          <target state="translated">ルートフックプラグインの定義</target>
        </trans-unit>
        <trans-unit id="e1e22a2edf0e09bfb03c176871687bac5efad07b" translate="yes" xml:space="preserve">
          <source>Delayed Root Suite</source>
          <target state="translated">ディレイドルートスイート</target>
        </trans-unit>
        <trans-unit id="4f5acd382e6a82ffed873da44bc7f3e9193e6128" translate="yes" xml:space="preserve">
          <source>Depending on the number and nature of your tests, you may find a significant performance benefit when running tests in parallel (using the &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag).</source>
          <target state="translated">Depending on the number and nature of your tests, you may find a significant performance benefit when running tests in parallel (using the &lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt; flag).</target>
        </trans-unit>
        <trans-unit id="47eb9c334c8a2e0a8a91f2e8b48e60e41e096aef" translate="yes" xml:space="preserve">
          <source>Describing Hooks</source>
          <target state="translated">フックの説明</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="6a132ddfd5d093c4c27c86e1770f1ac3e84eeffc" translate="yes" xml:space="preserve">
          <source>Desktop Notification Support</source>
          <target state="translated">デスクトップ通知のサポート</target>
        </trans-unit>
        <trans-unit id="938955c3676664abc9f3c695a2aefebcdbf1eb9d" translate="yes" xml:space="preserve">
          <source>Desktop notifications allow asynchronous communication of events without forcing you to react to a notification immediately. Their appearance and specific functionality vary across platforms. They typically disappear automatically after a short delay, but their content is often stored in some manner that allows you to access past notifications.</source>
          <target state="translated">デスクトップ通知は、通知にすぐに反応することを強制することなく、イベントの非同期通信を可能にします。通知の外観や機能はプラットフォームによって異なります。通常、通知は短い時間が経つと自動的に消えますが、その内容は過去の通知にアクセスできるように何らかの方法で保存されていることが多いです。</target>
        </trans-unit>
        <trans-unit id="1c23dd4256655591e65e1cbc41de626aaf29c582" translate="yes" xml:space="preserve">
          <source>Detects Multiple Calls to &lt;code&gt;done()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;done()&lt;/code&gt; への複数の呼び出しを検出します</target>
        </trans-unit>
        <trans-unit id="4ed7a7b52b1dde0f16ee0faa573e3bfbbef4f4db" translate="yes" xml:space="preserve">
          <source>Detects Multiple Calls to done()</source>
          <target state="translated">done()への複数回の呼び出しを検出</target>
        </trans-unit>
        <trans-unit id="f65624aa7c4a5284f37560a89a431cca52591579" translate="yes" xml:space="preserve">
          <source>Diffs</source>
          <target state="translated">Diffs</target>
        </trans-unit>
        <trans-unit id="018f842784720aaa37c65f55fdf9542a1da068a7" translate="yes" xml:space="preserve">
          <source>Disables timeouts. Equivalent to &lt;code&gt;--timeout 0&lt;/code&gt;.</source>
          <target state="translated">タイムアウトを無効にします。 &lt;code&gt;--timeout 0&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="08a05bfb51a199314ceeb5fa59eaf8086f4f6cf9" translate="yes" xml:space="preserve">
          <source>Do not share a context with tests, suites, or other hooks</source>
          <target state="translated">テストやスイート、その他のフックとコンテキストを共有しない</target>
        </trans-unit>
        <trans-unit id="cdba60a525e91017acace2575a32341fe23198be" translate="yes" xml:space="preserve">
          <source>Doc</source>
          <target state="translated">Doc</target>
        </trans-unit>
        <trans-unit id="ce834203e2d23d0819dc214a0fac8d125b2b0021" translate="yes" xml:space="preserve">
          <source>Does nothing if an assertion library supplies its own diff output.</source>
          <target state="translated">アサーション・ライブラリがそれ自身の diff 出力を提供しても何もしません。</target>
        </trans-unit>
        <trans-unit id="efceefa382caa86c634b6835d9f62d0202cc9120" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use parallel mode. Likely, you won&amp;rsquo;t be running very many exclusive tests, so you won&amp;rsquo;t see a great benefit from parallel mode anyhow.</source>
          <target state="translated">Don&amp;rsquo;t use parallel mode. Likely, you won&amp;rsquo;t be running very many exclusive tests, so you won&amp;rsquo;t see a great benefit from parallel mode anyhow.</target>
        </trans-unit>
        <trans-unit id="21c65003e5889c6eb18f808fd5fd858b05812ef2" translate="yes" xml:space="preserve">
          <source>Dot Matrix</source>
          <target state="translated">ドットマトリックス</target>
        </trans-unit>
        <trans-unit id="9e34d7d1386e4ed4fca2cc40eb823353fd0e1729" translate="yes" xml:space="preserve">
          <source>Due to the nature of the following reporters, they cannot work when running tests in parallel:</source>
          <target state="translated">以下のレポーターの性質上、テストを並行して実行すると動作しません。</target>
        </trans-unit>
        <trans-unit id="010f60616208f0911f365735f9d10694e2a3ff48" translate="yes" xml:space="preserve">
          <source>Dynamically Generating Tests</source>
          <target state="translated">動的にテストを生成する</target>
        </trans-unit>
        <trans-unit id="cdc8c17318813d9e8ada6fbcc2fbd263e15eb108" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_ARG_TYPE</source>
          <target state="translated">ERR_MOCHA_INVALID_ARG_TYPE</target>
        </trans-unit>
        <trans-unit id="5047590284ffefa1c045166fb922278d10cd8fce" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_ARG_VALUE</source>
          <target state="translated">ERR_MOCHA_INVALID_ARG_VALUE</target>
        </trans-unit>
        <trans-unit id="61143da9754e3ac648e5dc8b708e91bcdaff2d34" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_EXCEPTION</source>
          <target state="translated">ERR_MOCHA_INVALID_EXCEPTION</target>
        </trans-unit>
        <trans-unit id="c6c991ba108a254dbd1aa27a36ab6cbb19bfee62" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_INTERFACE</source>
          <target state="translated">ERR_MOCHA_INVALID_INTERFACE</target>
        </trans-unit>
        <trans-unit id="7b03197648b4f7fc0768b864d2309218c6de9e7d" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_INVALID_REPORTER</source>
          <target state="translated">ERR_MOCHA_INVALID_REPORTER</target>
        </trans-unit>
        <trans-unit id="e484e30620545866e46fba3aa405ba470f7c0258" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_NO_FILES_MATCH_PATTERN</source>
          <target state="translated">ERR_MOCHA_NO_FILES_MATCH_PATTERN</target>
        </trans-unit>
        <trans-unit id="3de94b94a9249d4733a594c657bcf39257ff1f1f" translate="yes" xml:space="preserve">
          <source>ERR_MOCHA_UNSUPPORTED</source>
          <target state="translated">ERR_MOCHA_UNSUPPORTED</target>
        </trans-unit>
        <trans-unit id="64be33f33e05315f3407e453137fd7d1b345cb6f" translate="yes" xml:space="preserve">
          <source>Each flag annotated of type &lt;code&gt;[boolean]&lt;/code&gt; in Mocha&amp;rsquo;s &lt;code&gt;--help&lt;/code&gt; output can be &lt;em&gt;negated&lt;/em&gt; by prepending &lt;code&gt;--no-&lt;/code&gt; to the flag name. For example, &lt;code&gt;--no-color&lt;/code&gt; will disable Mocha&amp;rsquo;s color output, which is enabled by default.</source>
          <target state="translated">Each flag annotated of type &lt;code&gt;[boolean]&lt;/code&gt; in Mocha&amp;rsquo;s &lt;code&gt;--help&lt;/code&gt; output can be &lt;em&gt;negated&lt;/em&gt; by prepending &lt;code&gt;--no-&lt;/code&gt; to the flag name. For example, &lt;code&gt;--no-color&lt;/code&gt; will disable Mocha&amp;rsquo;s color output, which is enabled by default.</target>
        </trans-unit>
        <trans-unit id="5e4d5b278089fd59f1c6b98f3a9ffa0ddbbeb399" translate="yes" xml:space="preserve">
          <source>Each test file will be put into a queue and executed as workers become available.</source>
          <target state="translated">各テストファイルはキューに入れられ、ワーカーが利用可能になると実行されます。</target>
        </trans-unit>
        <trans-unit id="df188f599aae58c67186d8ff806ff395566e71eb" translate="yes" xml:space="preserve">
          <source>Editor Plugins</source>
          <target state="translated">エディタプラグイン</target>
        </trans-unit>
        <trans-unit id="22526f82ceb1ba48c322732cd6b919651ab0c4d7" translate="yes" xml:space="preserve">
          <source>Either way, Mocha will abort the test run &amp;ldquo;very soon.&amp;rdquo;</source>
          <target state="translated">Either way, Mocha will abort the test run &amp;ldquo;very soon.&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="d89a5ec1140ce5dd978c2baf15972fdf48b8b61f" translate="yes" xml:space="preserve">
          <source>Emacs</source>
          <target state="translated">Emacs</target>
        </trans-unit>
        <trans-unit id="d173754679eacb331dc028175f7fff3b5acb4996" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;full&amp;rdquo; stack traces. By default, Mocha attempts to distill stack traces into less noisy (though still useful) output.</source>
          <target state="translated">Enable &amp;ldquo;full&amp;rdquo; stack traces. By default, Mocha attempts to distill stack traces into less noisy (though still useful) output.</target>
        </trans-unit>
        <trans-unit id="e0d4b692f3c19af37b6456fac4583436241b0fc9" translate="yes" xml:space="preserve">
          <source>Enable &amp;ldquo;inline&amp;rdquo; diffs, an alternative output for diffing strings.</source>
          <target state="translated">Enable &amp;ldquo;inline&amp;rdquo; diffs, an alternative output for diffing strings.</target>
        </trans-unit>
        <trans-unit id="a7e01f5a546d81f480b049cb3d99ef0e4256fc07" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (or OS-level notifications where available).</source>
          <target state="translated">Enable &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; (or OS-level notifications where available).</target>
        </trans-unit>
        <trans-unit id="f7c967df284562962e69a96abf9f5d747f7fcbcd" translate="yes" xml:space="preserve">
          <source>Enable Mocha&amp;rsquo;s desktop notifications as follows:</source>
          <target state="translated">Enable Mocha&amp;rsquo;s desktop notifications as follows:</target>
        </trans-unit>
        <trans-unit id="d506e86bc281703d603cb0cf4ac0e3c48110feca" translate="yes" xml:space="preserve">
          <source>Enable Mocha&amp;rsquo;s web notifications with a slight modification to your client-side mocha HTML. Add a call to &lt;code&gt;mocha.growl()&lt;/code&gt; prior to running your tests as shown below:</source>
          <target state="translated">Enable Mocha&amp;rsquo;s web notifications with a slight modification to your client-side mocha HTML. Add a call to &lt;code&gt;mocha.growl()&lt;/code&gt; prior to running your tests as shown below:</target>
        </trans-unit>
        <trans-unit id="359155ba6151e00af0b0c45af074098501c387a4" translate="yes" xml:space="preserve">
          <source>Enables Node.js&amp;rsquo; inspector.</source>
          <target state="translated">Enables Node.js&amp;rsquo; inspector.</target>
        </trans-unit>
        <trans-unit id="33326c8c1b47f26cc19939feab6072343a029216" translate="yes" xml:space="preserve">
          <source>Enables node&amp;rsquo;s debugger support, this executes your script(s) with &lt;code&gt;node debug &amp;lt;file ...&amp;gt;&lt;/code&gt; allowing you to step through code and break with the &lt;code&gt;debugger&lt;/code&gt; statement. Note the difference between &lt;code&gt;mocha debug&lt;/code&gt; and &lt;code&gt;mocha --debug&lt;/code&gt;: &lt;code&gt;mocha debug&lt;/code&gt; will fire up node&amp;rsquo;s built-in debug client, &lt;code&gt;mocha --debug&lt;/code&gt; will allow you to use a different interface &amp;mdash; such as the Blink Developer Tools. Implies &lt;code&gt;--no-timeouts&lt;/code&gt;.</source>
          <target state="translated">ノードのデバッガーサポートを有効にします。これにより、 &lt;code&gt;node debug &amp;lt;file ...&amp;gt;&lt;/code&gt; を使用してスクリプトが実行され、コードをステップ実行して &lt;code&gt;debugger&lt;/code&gt; ステートメントで中断できます。違いに注意してください &lt;code&gt;mocha debug&lt;/code&gt; し、 &lt;code&gt;mocha --debug&lt;/code&gt; ： &lt;code&gt;mocha debug&lt;/code&gt; 、ノードの組み込みのデバッグ・クライアントを起動します &lt;code&gt;mocha --debug&lt;/code&gt; あなたは別のインターフェースを使用することができます-などブリンク開発ツールとしての。 &lt;code&gt;--no-timeouts&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="db9c416e00d6f7a3d6c9a7065a20c33a6a160a08" translate="yes" xml:space="preserve">
          <source>Enforce a rule that tests may not be exclusive (use of e.g., &lt;code&gt;describe.only()&lt;/code&gt; or &lt;code&gt;it.only()&lt;/code&gt; is disallowed).</source>
          <target state="translated">Enforce a rule that tests may not be exclusive (use of e.g., &lt;code&gt;describe.only()&lt;/code&gt; or &lt;code&gt;it.only()&lt;/code&gt; is disallowed).</target>
        </trans-unit>
        <trans-unit id="da1a0b8d94e6a3d8a32e7f55177127431168a714" translate="yes" xml:space="preserve">
          <source>Enforce a rule that tests may not be skipped (use of e.g., &lt;code&gt;describe.skip()&lt;/code&gt;, &lt;code&gt;it.skip()&lt;/code&gt;, or &lt;code&gt;this.skip()&lt;/code&gt; anywhere is disallowed).</source>
          <target state="translated">Enforce a rule that tests may not be skipped (use of e.g., &lt;code&gt;describe.skip()&lt;/code&gt; , &lt;code&gt;it.skip()&lt;/code&gt; , or &lt;code&gt;this.skip()&lt;/code&gt; anywhere is disallowed).</target>
        </trans-unit>
        <trans-unit id="487ff3c6beccdbd1b9a2badc2074ca11dba524a2" translate="yes" xml:space="preserve">
          <source>Enforce a rule that tests must be written in &amp;ldquo;async&amp;rdquo; style, meaning each test provides a &lt;code&gt;done&lt;/code&gt; callback or returns a &lt;code&gt;Promise&lt;/code&gt;. Non-compliant tests will be marked as failures.</source>
          <target state="translated">Enforce a rule that tests must be written in &amp;ldquo;async&amp;rdquo; style, meaning each test provides a &lt;code&gt;done&lt;/code&gt; callback or returns a &lt;code&gt;Promise&lt;/code&gt; . Non-compliant tests will be marked as failures.</target>
        </trans-unit>
        <trans-unit id="50bdd1d55b6b627369c1e7e0c64ff64b4d5fee6e" translate="yes" xml:space="preserve">
          <source>Error Codes</source>
          <target state="translated">エラーコード</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c6b73f631d9ed023ec9b067a90f104d4c4a8d5e2" translate="yes" xml:space="preserve">
          <source>Exclusive Tests</source>
          <target state="translated">独占テスト</target>
        </trans-unit>
        <trans-unit id="493c3191878ca62eb9b74d05311cb96722fe11c2" translate="yes" xml:space="preserve">
          <source>Exclusive Tests are Disallowed</source>
          <target state="translated">独占試験の禁止</target>
        </trans-unit>
        <trans-unit id="7ee1f8db6ab4251f4638f9fbba832f76a0ec0db6" translate="yes" xml:space="preserve">
          <source>Executes tests on changes to JavaScript in the CWD, and once initially.</source>
          <target state="translated">CWDでJavaScriptに変更があった場合のテストを実行します。</target>
        </trans-unit>
        <trans-unit id="b3efa89156028c75207496f0962b71ff1becb67c" translate="yes" xml:space="preserve">
          <source>Explicitly &lt;em&gt;include&lt;/em&gt; a test file to be loaded before other test files. Multiple uses of &lt;code&gt;--file&lt;/code&gt; are allowed, and will be loaded in order given.</source>
          <target state="translated">Explicitly &lt;em&gt;include&lt;/em&gt; a test file to be loaded before other test files. Multiple uses of &lt;code&gt;--file&lt;/code&gt; are allowed, and will be loaded in order given.</target>
        </trans-unit>
        <trans-unit id="665d9d1ddb5e06930bbfe382e0aea2c85bd3c585" translate="yes" xml:space="preserve">
          <source>Explicitly ignore (exclude) one or more test files, directories or globs (e.g., &lt;code&gt;some/**/files*&lt;/code&gt;) that would otherwise be loaded.</source>
          <target state="translated">Explicitly ignore (exclude) one or more test files, directories or globs (e.g., &lt;code&gt;some/**/files*&lt;/code&gt; ) that would otherwise be loaded.</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="f47f5142231ee2ecc0d7b66768d1c6810b98516d" translate="yes" xml:space="preserve">
          <source>Extending Configuration</source>
          <target state="translated">拡張設定</target>
        </trans-unit>
        <trans-unit id="64d2b228c287fb3f93b50cd7f2b6450fe234a682" translate="yes" xml:space="preserve">
          <source>FAST: Tests that run within half of the &amp;ldquo;slow&amp;rdquo; threshold will show the duration in green (if at all).</source>
          <target state="translated">FAST: Tests that run within half of the &amp;ldquo;slow&amp;rdquo; threshold will show the duration in green (if at all).</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="4261dd71f77c7afac6ad8f8bb1919712116fa6c6" translate="yes" xml:space="preserve">
          <source>File Order is Non-Deterministic</source>
          <target state="translated">ファイルの順番は非決定的</target>
        </trans-unit>
        <trans-unit id="31a775918c12d68af8b1d4c015f6d689df7e3f45" translate="yes" xml:space="preserve">
          <source>Files having this extension will be considered test files. Defaults to &lt;code&gt;js&lt;/code&gt;.</source>
          <target state="translated">Files having this extension will be considered test files. Defaults to &lt;code&gt;js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b84f30dcd08b035bb09516489341fa3bba5c1acc" translate="yes" xml:space="preserve">
          <source>Files specified in this way should contain one or more suites, tests or hooks. If this is not the case, consider &lt;code&gt;--require&lt;/code&gt; instead.</source>
          <target state="translated">Files specified in this way should contain one or more suites, tests or hooks. If this is not the case, consider &lt;code&gt;--require&lt;/code&gt; instead.</target>
        </trans-unit>
        <trans-unit id="3a5b592dfe82e00748132ebe3e1dd8946d05276b" translate="yes" xml:space="preserve">
          <source>Files specified this way are not affected by &lt;code&gt;--sort&lt;/code&gt; or &lt;code&gt;--recursive&lt;/code&gt;.</source>
          <target state="translated">Files specified this way are not affected by &lt;code&gt;--sort&lt;/code&gt; or &lt;code&gt;--recursive&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc53e5427f8fcca05f74255c35fdfb25c00fdfea" translate="yes" xml:space="preserve">
          <source>Files specified using &lt;code&gt;--file&lt;/code&gt;&lt;em&gt;are not affected&lt;/em&gt; by this option.</source>
          <target state="translated">Files specified using &lt;code&gt;--file&lt;/code&gt; &lt;em&gt;are not affected&lt;/em&gt; by this option.</target>
        </trans-unit>
        <trans-unit id="b73ed650de2cd55f5c7ab1caad59cb292e999f67" translate="yes" xml:space="preserve">
          <source>Finally, use this command to bring it together: &lt;code&gt;mocha --require fixtures.mjs test.spec.mjs&lt;/code&gt;.</source>
          <target state="translated">Finally, use this command to bring it together: &lt;code&gt;mocha --require fixtures.mjs test.spec.mjs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad0d5e1985d85b7bad2e0395879718e85215a0e9" translate="yes" xml:space="preserve">
          <source>Find your root hooks (hooks defined &lt;em&gt;outside&lt;/em&gt; of a suite&amp;ndash;usually &lt;code&gt;describe()&lt;/code&gt; callback).</source>
          <target state="translated">Find your root hooks (hooks defined &lt;em&gt;outside&lt;/em&gt; of a suite&amp;ndash;usually &lt;code&gt;describe()&lt;/code&gt; callback).</target>
        </trans-unit>
        <trans-unit id="b994b543914e78f598af0ff864a18b13f27b3bad" translate="yes" xml:space="preserve">
          <source>First, use a global fixture to start and stop a test server:</source>
          <target state="translated">まず、グローバルフィクスチャを使用して、テストサーバを起動したり停止したりします。</target>
        </trans-unit>
        <trans-unit id="1623349ac7bbac083042c7d6498cce0ae75fb4a6" translate="yes" xml:space="preserve">
          <source>Flags to &lt;code&gt;node&lt;/code&gt; are &lt;em&gt;also&lt;/em&gt; supported in configuration files. Use caution, as these can vary between versions of Node.js!</source>
          <target state="translated">Flags to &lt;code&gt;node&lt;/code&gt; are &lt;em&gt;also&lt;/em&gt; supported in configuration files. Use caution, as these can vary between versions of Node.js!</target>
        </trans-unit>
        <trans-unit id="6b647b3296507edfbbf3b0500ca5fe721bf0e1aa" translate="yes" xml:space="preserve">
          <source>For each test, Mocha executes:</source>
          <target state="translated">それぞれのテストに対して、モカは実行します。</target>
        </trans-unit>
        <trans-unit id="075732fb0cbe6f1b9d0e256e1badfb2f1e6e18cc" translate="yes" xml:space="preserve">
          <source>For example, given the following file, &lt;code&gt;test/test.spec.js&lt;/code&gt;, containing root hooks:</source>
          <target state="translated">For example, given the following file, &lt;code&gt;test/test.spec.js&lt;/code&gt; , containing root hooks:</target>
        </trans-unit>
        <trans-unit id="e2b5dbde05a80900b6d36cfb626524c53a5cd0a7" translate="yes" xml:space="preserve">
          <source>For example, suppose you have the following &lt;code&gt;mocha.opts&lt;/code&gt; file:</source>
          <target state="translated">たとえば、次の &lt;code&gt;mocha.opts&lt;/code&gt; ファイルがあるとします。</target>
        </trans-unit>
        <trans-unit id="5f7c8b40764d6e6cba3037654fe88223f8cbc034" translate="yes" xml:space="preserve">
          <source>For example, suppose you have the following JavaScript:</source>
          <target state="translated">例えば、以下のようなJavaScriptがあるとします。</target>
        </trans-unit>
        <trans-unit id="da4d28e002c0b4de6834c17c77dc70bfabb04c94" translate="yes" xml:space="preserve">
          <source>For options containing a dash (&lt;code&gt;-&lt;/code&gt;), the option name can be specified using camelCase.</source>
          <target state="translated">For options containing a dash ( &lt;code&gt;-&lt;/code&gt; ), the option name can be specified using camelCase.</target>
        </trans-unit>
        <trans-unit id="189102dcf2fe654caa9650e84e64c30c0da35cae" translate="yes" xml:space="preserve">
          <source>Free-tier cloud CI services may not provide a suitable multi-core container or VM for their build agents. Regarding expected performance gains in CI: your mileage may vary. It may help to use a conditional in a &lt;code&gt;.mocharc.js&lt;/code&gt; to check for &lt;code&gt;process.env.CI&lt;/code&gt;, and adjust the job count as appropriate.</source>
          <target state="translated">Free-tier cloud CI services may not provide a suitable multi-core container or VM for their build agents. Regarding expected performance gains in CI: your mileage may vary. It may help to use a conditional in a &lt;code&gt;.mocharc.js&lt;/code&gt; to check for &lt;code&gt;process.env.CI&lt;/code&gt; , and adjust the job count as appropriate.</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">はじめに</target>
        </trans-unit>
        <trans-unit id="25f6f8824c49094eb1fdcf8139b250636d9a6086" translate="yes" xml:space="preserve">
          <source>Given Mocha&amp;rsquo;s use of &lt;code&gt;Function.prototype.call&lt;/code&gt; and function expressions to define suites and test cases, it&amp;rsquo;s straightforward to generate your tests dynamically. No special syntax is required &amp;mdash; plain ol&amp;rsquo; JavaScript can be used to achieve functionality similar to &amp;ldquo;parameterized&amp;rdquo; tests, which you may have seen in other frameworks.</source>
          <target state="translated">Mochaが &lt;code&gt;Function.prototype.call&lt;/code&gt; と関数式を使用してスイートとテストケースを定義する場合、テストを動的に生成するのは簡単です。特別な構文は必要ありません。プレーンolのJavaScriptを使用して、「パラメーター化された」テストと同様の機能を実現できます。これは、他のフレームワークで見られた可能性があります。</target>
        </trans-unit>
        <trans-unit id="4f662929cf2e619d7d39f22b008c87c102a32659" translate="yes" xml:space="preserve">
          <source>Global Fixtures</source>
          <target state="translated">世界の備品</target>
        </trans-unit>
        <trans-unit id="42ef64c6c39d4389fdcf3f2a0c305ff5337520ba" translate="yes" xml:space="preserve">
          <source>Global Setup Fixtures</source>
          <target state="translated">グローバルセットアップフィクスチャ</target>
        </trans-unit>
        <trans-unit id="8328b74b27a86d71773a0ded39579d6ec5452edd" translate="yes" xml:space="preserve">
          <source>Global Teardown Fixtures</source>
          <target state="translated">世界的なティアダウン用治具</target>
        </trans-unit>
        <trans-unit id="00cb87db597ce2cecc45cdc20ce3fcb19a93a1ba" translate="yes" xml:space="preserve">
          <source>Global fixtures are good for spinning up a server, opening a socket, or otherwise creating a resource that your tests will repeatedly access via I/O.</source>
          <target state="translated">グローバルフィクスチャは、サーバを回転させたり、ソケットを開いたり、テストがI/O経由で繰り返しアクセスするリソースを作成したりするのに適しています。</target>
        </trans-unit>
        <trans-unit id="2589b1f45c54b66754ff3a6ba0b78a1a2c58e37d" translate="yes" xml:space="preserve">
          <source>Grep</source>
          <target state="translated">Grep</target>
        </trans-unit>
        <trans-unit id="21a3c554b2b3f33d141b4b3dba634c148e87f258" translate="yes" xml:space="preserve">
          <source>HTML Reporter</source>
          <target state="translated">HTMLレポーター</target>
        </trans-unit>
        <trans-unit id="daa8f0e8f971cc59e60e23890f58665b5c5926a6" translate="yes" xml:space="preserve">
          <source>Has no effect unless used with &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Has no effect unless used with &lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6988158207ff79b81d85e2979b6674763574ceb5" translate="yes" xml:space="preserve">
          <source>Here are a couple suggested workarounds:</source>
          <target state="translated">ここでは、いくつかの回避策を提案します。</target>
        </trans-unit>
        <trans-unit id="41cf457ff96bdd94aa81825d78317aa76039d478" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a simple example which defines a root hook, written using CJS and ESM syntax.</source>
          <target state="translated">Here&amp;rsquo;s a simple example which defines a root hook, written using CJS and ESM syntax.</target>
        </trans-unit>
        <trans-unit id="7b84bacdbcc873fa7100354ef56eee9e3ca78c5f" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of executing an individual test case:</source>
          <target state="translated">個別のテストケースを実行する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="8c94fcceb2bcb3cf710ecd9ec8525cf5d93efe32" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of using global fixtures and &amp;ldquo;before all&amp;rdquo; hooks to get the job done. Note that we do not reference the &lt;code&gt;server&lt;/code&gt; object anywhere in our tests!</source>
          <target state="translated">Here&amp;rsquo;s an example of using global fixtures and &amp;ldquo;before all&amp;rdquo; hooks to get the job done. Note that we do not reference the &lt;code&gt;server&lt;/code&gt; object anywhere in our tests!</target>
        </trans-unit>
        <trans-unit id="3776d796d8bca4fedc68f40083535c666bfd83fe" translate="yes" xml:space="preserve">
          <source>Hint: Use &lt;code&gt;--jobs 0&lt;/code&gt; or &lt;code&gt;--jobs 1&lt;/code&gt; to temporarily disable &lt;code&gt;--parallel&lt;/code&gt;.</source>
          <target state="translated">Hint: Use &lt;code&gt;--jobs 0&lt;/code&gt; or &lt;code&gt;--jobs 1&lt;/code&gt; to temporarily disable &lt;code&gt;--parallel&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54601f868c7e4383dd09d71df7cfdac40c45ce96" translate="yes" xml:space="preserve">
          <source>Hook-level</source>
          <target state="translated">Hook-level</target>
        </trans-unit>
        <trans-unit id="5c7eb9c28bf847e23d9f404dedbac5f071586b71" translate="yes" xml:space="preserve">
          <source>Hook-level timeouts may also be applied:</source>
          <target state="translated">フックレベルのタイムアウトが適用されることもあります。</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="d15913a24b663c8adda36824275c06a96394c5b7" translate="yes" xml:space="preserve">
          <source>If a file loaded this way contains known Mocha-specific exports (e.g., &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;), Mocha &amp;ldquo;registers&amp;rdquo; these</source>
          <target state="translated">If a file loaded this way contains known Mocha-specific exports (e.g., &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt;), Mocha &amp;ldquo;registers&amp;rdquo; these</target>
        </trans-unit>
        <trans-unit id="6042f5ee88c44923b382954a43438ca23c3bfb9c" translate="yes" xml:space="preserve">
          <source>If known flags for the &lt;code&gt;node&lt;/code&gt; executable are found:</source>
          <target state="translated">If known flags for the &lt;code&gt;node&lt;/code&gt; executable are found:</target>
        </trans-unit>
        <trans-unit id="b1efaf45d662fc455527fab25d5d53c915b00a87" translate="yes" xml:space="preserve">
          <source>If no custom path was given, and if there are multiple configuration files in the same directory, Mocha will search for &amp;mdash; and use &amp;mdash; only one. The priority is:</source>
          <target state="translated">If no custom path was given, and if there are multiple configuration files in the same directory, Mocha will search for &amp;mdash; and use &amp;mdash; only one. The priority is:</target>
        </trans-unit>
        <trans-unit id="d8606cb18f3ff6d6662e749d7ce1b8fdb87fed2e" translate="yes" xml:space="preserve">
          <source>If not, Mocha ignores any exports of a &lt;code&gt;--require&lt;/code&gt;&amp;rsquo;d module</source>
          <target state="translated">If not, Mocha ignores any exports of a &lt;code&gt;--require&lt;/code&gt; &amp;rsquo;d module</target>
        </trans-unit>
        <trans-unit id="9ab3cec9cb28e6ef2e2944035b312aac03020da2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://nodejs.org/dist/latest-v12.x/docs/api/cli.html#cli_enable_source_maps&quot;&gt;&lt;code&gt;--enable-source-maps&lt;/code&gt;&lt;/a&gt; flag is passed to mocha, source maps will be collected and used to provide accurate stack traces for transpiled code:</source>
          <target state="translated">If the &lt;a href=&quot;https://nodejs.org/dist/latest-v12.x/docs/api/cli.html#cli_enable_source_maps&quot;&gt; &lt;code&gt;--enable-source-maps&lt;/code&gt; &lt;/a&gt; flag is passed to mocha, source maps will be collected and used to provide accurate stack traces for transpiled code:</target>
        </trans-unit>
        <trans-unit id="0d6a30fa5bdd7ea20378779ada84782fc3c8d49e" translate="yes" xml:space="preserve">
          <source>If the current suite has a child suite, repeat the steps in 10. for each child suite; each child suite &lt;em&gt;inherits&lt;/em&gt; any &amp;ldquo;before each&amp;rdquo; and &amp;ldquo;after each&amp;rdquo; hooks defined in its parent</source>
          <target state="translated">If the current suite has a child suite, repeat the steps in 10. for each child suite; each child suite &lt;em&gt;inherits&lt;/em&gt; any &amp;ldquo;before each&amp;rdquo; and &amp;ldquo;after each&amp;rdquo; hooks defined in its parent</target>
        </trans-unit>
        <trans-unit id="02f892e18f79c0ac275548e7da445a6843078694" translate="yes" xml:space="preserve">
          <source>If the path is a directory all files and subdirectories will be watched.</source>
          <target state="translated">パスがディレクトリの場合は、すべてのファイルとサブディレクトリが監視されます。</target>
        </trans-unit>
        <trans-unit id="9116db4a3104a2f8c3ab6800284e3fea668d41cc" translate="yes" xml:space="preserve">
          <source>If you find your tests don&amp;rsquo;t work properly when run with &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;, either shrug and move on, or use this handy-dandy checklist to get things working:</source>
          <target state="translated">&lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;を指定して実行したときにテストが正しく機能しない場合は、肩をすくめて先に進むか、次の便利なチェックリストを使用して機能させてください。</target>
        </trans-unit>
        <trans-unit id="5397388eb9e3beb855124dbe78ad1d0abce8503f" translate="yes" xml:space="preserve">
          <source>If you need to access an in-memory value (such as a file handle or database connection), &lt;em&gt;don&amp;rsquo;t&lt;/em&gt; use global fixtures to do this, because your tests will not have access to the value.</source>
          <target state="translated">メモリ内の値（ファイルハンドルやデータベース接続など）にアクセスする必要がある場合は、テストで値にアクセスできないため、グローバルフィクスチャを使用&lt;em&gt;しないで&lt;/em&gt;ください。</target>
        </trans-unit>
        <trans-unit id="c773ae1d7c3ea3710442f648fe7e6e4900f4a13f" translate="yes" xml:space="preserve">
          <source>If you need to perform an async operation, &lt;code&gt;mochaHooks&lt;/code&gt; can be &lt;code&gt;Promise&lt;/code&gt;-returning:</source>
          <target state="translated">非同期操作を実行する必要がある場合、 &lt;code&gt;mochaHooks&lt;/code&gt; は &lt;code&gt;Promise&lt;/code&gt; である可能性があります-戻り値：</target>
        </trans-unit>
        <trans-unit id="98e19c16786b297b22eefa7e77183940457614e1" translate="yes" xml:space="preserve">
          <source>If you need to perform asynchronous operations before any of your suites are run, you may delay the root suite. Run &lt;code&gt;mocha&lt;/code&gt; with the &lt;code&gt;--delay&lt;/code&gt; flag. This will attach a special callback function, &lt;code&gt;run()&lt;/code&gt;, to the global context:</source>
          <target state="translated">スイートを実行する前に非同期操作を実行する必要がある場合は、ルートスイートを遅延させることができます。 &lt;code&gt;--delay&lt;/code&gt; フラグを指定して &lt;code&gt;mocha&lt;/code&gt; を実行します。これにより、特別なコールバック関数 &lt;code&gt;run()&lt;/code&gt; がグローバルコンテキストにアタッチされます。</target>
        </trans-unit>
        <trans-unit id="4d7ab91094560827d40b16dbc9c3f97aac697aea" translate="yes" xml:space="preserve">
          <source>If you need to perform some logic&amp;ndash;such as choosing a root hook conditionally, based on the environment&amp;ndash;&lt;code&gt;mochaHooks&lt;/code&gt; can be a &lt;em&gt;function&lt;/em&gt; which returns the expected object.</source>
          <target state="translated">環境に基づいて条件付きでルートフックを選択するなど、何らかのロジックを実行する必要がある場合、 &lt;code&gt;mochaHooks&lt;/code&gt; は期待されるオブジェクトを返す&lt;em&gt;関数に&lt;/em&gt;することができます。</target>
        </trans-unit>
        <trans-unit id="1ca2299f38867549b92718f150742bffd5bb2338" translate="yes" xml:space="preserve">
          <source>If you need to run some code &lt;em&gt;once and only once&lt;/em&gt;, use a &lt;a href=&quot;#global-fixtures&quot;&gt;global fixture&lt;/a&gt; instead.</source>
          <target state="translated">コードを&lt;em&gt;1回だけ&lt;/em&gt;実行する必要がある場合は、代わりに&lt;a href=&quot;#global-fixtures&quot;&gt;グローバルフィクスチャを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="ced3214c512472a19816679d43a3cb0180c1f760" translate="yes" xml:space="preserve">
          <source>If you use callback-based async tests, Mocha will throw an error if &lt;code&gt;done()&lt;/code&gt; is called multiple times. This is handy for catching accidental double callbacks.</source>
          <target state="translated">コールバックベースの非同期テストを使用する場合、mochaは &lt;code&gt;done()&lt;/code&gt; が複数回呼び出されるとエラーをスローします。これは、偶発的な二重コールバックをキャッチするのに便利です。</target>
        </trans-unit>
        <trans-unit id="5265320fe146954c40d70113ddcdedab964f7bd7" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re a library maintainer, and your library uses root hooks, you can migrate by refactoring your entry point:</source>
          <target state="translated">ライブラリメンテナーであり、ライブラリがルートフックを使用している場合は、エントリポイントをリファクタリングすることで移行できます。</target>
        </trans-unit>
        <trans-unit id="e53b5d739b41e36dae9122b4b8c6364051302d79" translate="yes" xml:space="preserve">
          <source>If your ES6 modules have extension &lt;code&gt;.js&lt;/code&gt;, you can &lt;code&gt;npm install --save-dev babel-register&lt;/code&gt; and use &lt;code&gt;mocha --require babel-register&lt;/code&gt;; &lt;code&gt;--compilers&lt;/code&gt; is only necessary if you need to specify a file extension.</source>
          <target state="translated">あなたのES6モジュールを拡張している場合 &lt;code&gt;.js&lt;/code&gt; ファイルを、次のことができ &lt;code&gt;npm install --save-dev babel-register&lt;/code&gt; して使用 &lt;code&gt;mocha --require babel-register&lt;/code&gt; ; &lt;code&gt;--compilers&lt;/code&gt; は、ファイル拡張子を指定する必要がある場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="5f10ae75160b68a23b879ce505262f4e06bab893" translate="yes" xml:space="preserve">
          <source>If your JS environment supports &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt; you can also write asynchronous tests like this:</source>
          <target state="translated">JS環境が&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt;をサポートしている場合は、次のような非同期テストを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="ce3c5d471422a8ccae775d722b5e0d709d149c8f" translate="yes" xml:space="preserve">
          <source>If your JS environment supports &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / await&lt;/a&gt;, you can also write asynchronous tests like this:</source>
          <target state="translated">JS環境が&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async / awaitを&lt;/a&gt;サポートしている場合は、次のような非同期テストを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="8baf665d270ed48fc70b21faadea9c2e2d777083" translate="yes" xml:space="preserve">
          <source>Ignoring Config Files</source>
          <target state="translated">設定ファイルを無視する</target>
        </trans-unit>
        <trans-unit id="01fddd382c17e3a41dbaed1505d790d326f4eacd" translate="yes" xml:space="preserve">
          <source>Implies &lt;code&gt;--no-timeout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--no-timeout&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="592398d8754754d0900312fe6c0c6155d187f032" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;test/hooks.js&lt;/code&gt;, make your hooks a member of an exported &lt;code&gt;mochaHooks&lt;/code&gt; property.</source>
          <target state="translated">では &lt;code&gt;test/hooks.js&lt;/code&gt; 、あなたのフックエクスポートのメンバーに &lt;code&gt;mochaHooks&lt;/code&gt; のプロパティを。</target>
        </trans-unit>
        <trans-unit id="db995fde688a81ee69993ee2d9bd0bb9e04333ae" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;both&lt;/strong&gt; modes, run &lt;em&gt;after every test&lt;/em&gt;</source>
          <target state="translated">では&lt;strong&gt;、両方&lt;/strong&gt;のモード、実行する&lt;em&gt;すべてのテストの後に&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4aa29e40554c71aed428c1fff07836dfebab58d5" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;both&lt;/strong&gt; modes, run &lt;em&gt;before each test&lt;/em&gt;</source>
          <target state="translated">では&lt;strong&gt;、両方&lt;/strong&gt;のモード、実行する&lt;em&gt;各テストの前に&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ea53f9342d679452294f7b8764e8cd0a3332435" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;parallel&lt;/strong&gt; mode, run &lt;em&gt;after all tests end, for each file&lt;/em&gt;</source>
          <target state="translated">で&lt;strong&gt;パラレル&lt;/strong&gt;モードでは、実行&lt;em&gt;ファイルごとに、すべてのテストの終了後に&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="434b603f31eb91450c51fc168f4bd4f0a52a70c2" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;parallel&lt;/strong&gt; mode, run &lt;em&gt;before all tests begin, for each file&lt;/em&gt;</source>
          <target state="translated">で&lt;strong&gt;パラレル&lt;/strong&gt;モードでは、実行する&lt;em&gt;すべてのテストが始まる前に、各ファイルに対して、&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ec5baf40c04c298cb97108c03c828bb95c2f06d" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;serial&lt;/strong&gt; mode (Mocha&amp;rsquo;s default), &lt;em&gt;before all tests begin, once only&lt;/em&gt;</source>
          <target state="translated">で&lt;strong&gt;シリアル&lt;/strong&gt;モード（モカのデフォルト）、&lt;em&gt;すべてのテストは一度だけ、始める前に&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9614efcc9821cb0b57b279f39d194feb9f180d98" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;serial&lt;/strong&gt; mode, run &lt;em&gt;after all tests end, once only&lt;/em&gt;</source>
          <target state="translated">では&lt;strong&gt;シリアル&lt;/strong&gt;モードで、実行する&lt;em&gt;すべてのテストが終了した後に一度だけ、&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="67c9a62a8265332e6a725438c6dbed5631b96c93" translate="yes" xml:space="preserve">
          <source>In Mocha v3.0.0 and newer, returning a &lt;code&gt;Promise&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; calling &lt;code&gt;done()&lt;/code&gt; will result in an exception, as this is generally a mistake:</source>
          <target state="translated">Mocha v3.0.0以降では、 &lt;code&gt;Promise&lt;/code&gt; &lt;em&gt;を&lt;/em&gt;返し、 &lt;code&gt;done()&lt;/code&gt; を呼び出す&lt;em&gt;と&lt;/em&gt;例外が発生します。これは一般的には誤りであるためです。</target>
        </trans-unit>
        <trans-unit id="a82fe81019928d947305207b6fed8b078d28503c" translate="yes" xml:space="preserve">
          <source>In a browser, test files are loaded by &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags, and calling &lt;code&gt;mocha.run()&lt;/code&gt; begins at step 9 &lt;a href=&quot;#serial-mode&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">ブラウザでは、テストファイルは &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグによってロードされ、 &lt;code&gt;mocha.run()&lt;/code&gt; の呼び出しは&lt;a href=&quot;#serial-mode&quot;&gt;以下の&lt;/a&gt;手順9から始まります。</target>
        </trans-unit>
        <trans-unit id="e4957f53647ae1ea26d2f70a3e99bbe8d5ec37e7" translate="yes" xml:space="preserve">
          <source>In addition to chatting with us on &lt;a href=&quot;https://gitter.im/mochajs/mocha&quot;&gt;Gitter&lt;/a&gt;, for additional information such as using spies, mocking, and shared behaviours be sure to check out the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki&quot;&gt;Mocha Wiki&lt;/a&gt; on GitHub. For discussions join the &lt;a href=&quot;https://groups.google.com/group/mochajs&quot;&gt;Google Group&lt;/a&gt;. For a running example of Mocha, view &lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;example/tests.html&lt;/a&gt;. For the JavaScript API, view the &lt;a href=&quot;https://mochajs.org/api/&quot;&gt;API documentation&lt;/a&gt; or the &lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51&quot;&gt;source&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://gitter.im/mochajs/mocha&quot;&gt;Gitter&lt;/a&gt;でのチャットに加えて、スパイの使用、モック、共有ビヘイビアーなどの追加情報については、GitHubの&lt;a href=&quot;https://github.com/mochajs/mocha/wiki&quot;&gt;Mocha Wiki&lt;/a&gt;を確認してください。ディスカッションについては、&lt;a href=&quot;https://groups.google.com/group/mochajs&quot;&gt;Googleグループに&lt;/a&gt;参加してください。Mochaの実行例については、&lt;a href=&quot;https://mochajs.org/example/tests.html&quot;&gt;example / tests.htmlをご覧ください&lt;/a&gt;。JavaScript APIについては、&lt;a href=&quot;https://mochajs.org/api/&quot;&gt;APIドキュメント&lt;/a&gt;または&lt;a href=&quot;https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51&quot;&gt;ソースを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="113261c9144546d287266b8d4fc8f96a2dc64e5b" translate="yes" xml:space="preserve">
          <source>In order to use desktop notifications with the command-line interface (CLI), you &lt;strong&gt;must&lt;/strong&gt; first install some platform-specific prerequisite software. Instructions for doing so can be found &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Growl-Notifications&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">コマンドラインインターフェイス（CLI）で使用するデスクトップ通知するためには、あなたが&lt;strong&gt;しなければならない&lt;/strong&gt;最初のいくつかのプラットフォーム固有の前提条件のソフトウェアをインストールします。そのための手順は、&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Growl-Notifications&quot;&gt;ここにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a42ce5a3b0d434bafc81c71ae32f29a401394eb9" translate="yes" xml:space="preserve">
          <source>In parallel mode, Mocha does not guarantee the order in which test files will run, nor which worker process runs them.</source>
          <target state="translated">パラレルモードでは、Mochaはテストファイルを実行する順番や、どのワーカープロセスが実行するかを保証しません。</target>
        </trans-unit>
        <trans-unit id="ca75b29525e23bc10a3408dcdcb89b4d7499bf27" translate="yes" xml:space="preserve">
          <source>In serial mode, tests results will &amp;ldquo;stream&amp;rdquo; as they occur. In parallel mode, reporter output is &lt;em&gt;buffered&lt;/em&gt;; reporting will occur after each file is completed. In practice, the reporter output will appear in &amp;ldquo;chunks&amp;rdquo; (but will otherwise be identical). If a test file is particularly slow, there may be a significant pause while it&amp;rsquo;s running.</source>
          <target state="translated">シリアルモードでは、テスト結果は発生時に「ストリーミング」されます。並列モードでは、レポーター出力は&lt;em&gt;バッファリングされ&lt;/em&gt;ます。レポートは、各ファイルが完了した後に発生します。実際には、レポーターの出力は「チャンク」に表示されます（ただし、それ以外は同じです）。テストファイルが特に遅い場合は、実行中にかなりの一時停止が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f525656b6f1d74ec94d1d9cb9afa341a37e5e5a4" translate="yes" xml:space="preserve">
          <source>In some cases, color output will be explicitly suppressed by certain reporters outputting in a machine-readable format.</source>
          <target state="translated">場合によっては、機械読み取り可能な形式で出力する特定のレポーターによって、カラー出力が明示的に抑制されます。</target>
        </trans-unit>
        <trans-unit id="67289434324f9afc1b91df96836ee08191d5ccaa" translate="yes" xml:space="preserve">
          <source>In some cases, you may want a &lt;a href=&quot;#hooks&quot;&gt;hook&lt;/a&gt; before (or after) every test in every file. These are called &lt;em&gt;root hooks&lt;/em&gt;. Previous to v8.0.0, the way to accomplish this was to use &lt;code&gt;--file&lt;/code&gt; combined with root hooks (see &lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;example above&lt;/a&gt;). This still works in v8.0.0, but &lt;em&gt;not&lt;/em&gt; when running tests in parallel mode! For that reason, running root hooks using this method is &lt;em&gt;strongly discouraged&lt;/em&gt;, and may be deprecated in the future.</source>
          <target state="translated">場合によっては、すべてのファイルのすべてのテストの前（または後に）に&lt;a href=&quot;#hooks&quot;&gt;フック&lt;/a&gt;が必要になることがあります。これらは&lt;em&gt;ルートフック&lt;/em&gt;と呼ばれます。 v8.0.0より前は、これを実現する方法は、ルートフックと組み合わせて &lt;code&gt;--file&lt;/code&gt; を使用することでした（&lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;上記の例を参照&lt;/a&gt;）。これはv8.0.0でも機能しますが、並列モードでテストを実行している場合は機能し&lt;em&gt;ません&lt;/em&gt;。そのため、この方法を使用してルートフックを実行することは&lt;em&gt;強くお勧めしません&lt;/em&gt;。また、将来的には非推奨になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="01185b69a2c11773f1cd33b6b7ed8811ab0ff74f" translate="yes" xml:space="preserve">
          <source>In v3.0.0 or newer, a parameter passed to &lt;code&gt;this.timeout()&lt;/code&gt; greater than the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;maximum delay value&lt;/a&gt; will cause the timeout to be disabled.</source>
          <target state="translated">v3.0.0以降では、 &lt;code&gt;this.timeout()&lt;/code&gt; に渡されるパラメーターが&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;最大遅延値&lt;/a&gt;よりも大きいと、タイムアウトが無効になります。</target>
        </trans-unit>
        <trans-unit id="bb973422bf445a4c17bb24b5232338e946e632b7" translate="yes" xml:space="preserve">
          <source>In v3.0.0 or newer, a parameter passed to &lt;code&gt;this.timeout()&lt;/code&gt; greater than the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;maximum delay value&lt;/a&gt; will cause the timeout to be disabled. In v8.0.0 or newer, &lt;code&gt;this.enableTimeouts()&lt;/code&gt; has been removed. &lt;strong&gt;Warning:&lt;/strong&gt; With async tests if you disable timeouts via &lt;code&gt;this.timeout(0)&lt;/code&gt; and then do not call &lt;code&gt;done()&lt;/code&gt;, your test will exit silently.</source>
          <target state="translated">v3.0.0以降では、 &lt;code&gt;this.timeout()&lt;/code&gt; に渡されるパラメーターが&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value&quot;&gt;最大遅延値&lt;/a&gt;よりも大きいと、タイムアウトが無効になります。v8.0.0以降では、 &lt;code&gt;this.enableTimeouts()&lt;/code&gt; は削除されました。&lt;strong&gt;警告：&lt;/strong&gt;非同期テストでは、 &lt;code&gt;this.timeout(0)&lt;/code&gt; を介してタイムアウトを無効にし、 &lt;code&gt;done()&lt;/code&gt; を呼び出さない場合、テストはサイレントに終了します。</target>
        </trans-unit>
        <trans-unit id="2526253f77ad1393ef0e5ead8d9eeed17e0a233b" translate="yes" xml:space="preserve">
          <source>In your editor:</source>
          <target state="translated">あなたの編集者の中で</target>
        </trans-unit>
        <trans-unit id="cf9c82da65b44e4184e1c5823378fdf93d0e9b32" translate="yes" xml:space="preserve">
          <source>Inclusive Tests</source>
          <target state="translated">インクルーシブテスト</target>
        </trans-unit>
        <trans-unit id="fe49f05d2e68f4e9de00c0a17a8c0520bda7af2c" translate="yes" xml:space="preserve">
          <source>Install with &lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt; globally:</source>
          <target state="translated">&lt;a href=&quot;https://npmjs.org&quot;&gt;npmで&lt;/a&gt;グローバルにインストールします。</target>
        </trans-unit>
        <trans-unit id="a4c1ada91c1fd76221cdea2ddc7d9dee8322c7e0" translate="yes" xml:space="preserve">
          <source>Install with &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; globally:</source>
          <target state="translated">&lt;a href=&quot;https://npmjs.org/&quot;&gt;npmを&lt;/a&gt;グローバルにインストールします。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="3c5884bc36e186bdfb5c6da9b3416c160cb3a88f" translate="yes" xml:space="preserve">
          <source>Instant ECMAScript modules via &lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt;を介したインスタントECMAScriptモジュール</target>
        </trans-unit>
        <trans-unit id="8bb43f25f5daf5413d129ea4e321864de39cb645" translate="yes" xml:space="preserve">
          <source>Instead, use the global fixture to &lt;em&gt;start&lt;/em&gt; the database, and use &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt; or plain ol&amp;rsquo; &lt;a href=&quot;#hooks&quot;&gt;hooks&lt;/a&gt; to create a connection.</source>
          <target state="translated">代わりに、グローバルフィクスチャを使用してデータベースを&lt;em&gt;起動し&lt;/em&gt;、&lt;a href=&quot;#root-hook-plugins&quot;&gt;ルートフックプラグイン&lt;/a&gt;またはプレーンオール&lt;a href=&quot;#hooks&quot;&gt;フック&lt;/a&gt;を使用して接続を作成します。</target>
        </trans-unit>
        <trans-unit id="18153eab53fa2dde1d8f1722e14e384598c81f1a" translate="yes" xml:space="preserve">
          <source>Instruct your users to &lt;code&gt;--require &amp;lt;your-package&amp;gt;&lt;/code&gt; when running &lt;code&gt;mocha&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; を実行するときに &lt;code&gt;--require &amp;lt;your-package&amp;gt;&lt;/code&gt; ユーザーに指示します。</target>
        </trans-unit>
        <trans-unit id="b356313f979923fc829adb909098ed26a5a01aff" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Interfaces</target>
        </trans-unit>
        <trans-unit id="8721f6dcd0dde264ebd9e42e0b5068ba3b67e541" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s unlikely (but not impossible) to see a performance gain from a &lt;a href=&quot;#-jobs-count-j-count&quot;&gt;job count&lt;/a&gt;&lt;em&gt;greater than&lt;/em&gt; the number of available CPU cores. That said, &lt;em&gt;play around with the job count&lt;/em&gt;&amp;ndash;there&amp;rsquo;s no one-size-fits all, and the unique characteristics of your tests will determine the optimal number of jobs; it may even be that fewer is faster!</source>
          <target state="translated">使用可能なCPUコアの数&lt;em&gt;よりも&lt;/em&gt;多くの&lt;a href=&quot;#-jobs-count-j-count&quot;&gt;ジョブ数&lt;/a&gt;からパフォーマンスが向上することはほとんどありません（不可能ではありません）。とはいえ&lt;em&gt;、ジョブ数を&lt;/em&gt;試してみてください。万能というわけではありません。テストの固有の特性によって、最適なジョブ数が決まります。少ないほうが速いかもしれません！&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="a21d3253170de617a66bdbbbae1fd764d407b56b" translate="yes" xml:space="preserve">
          <source>JSON Stream</source>
          <target state="translated">JSONストリーム</target>
        </trans-unit>
        <trans-unit id="323c15dbe6740ee6540be2d0b506bd248ff8987b" translate="yes" xml:space="preserve">
          <source>JetBrains</source>
          <target state="translated">JetBrains</target>
        </trans-unit>
        <trans-unit id="48fa258637ea5552a14a49b941b25820f056133c" translate="yes" xml:space="preserve">
          <source>Just like a &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixture&lt;/a&gt;, a &lt;em&gt;global teardown fixture&lt;/em&gt; can be created by exporting from a &amp;ldquo;required&amp;rdquo; script (we can put both types of fixtures in a single file):</source>
          <target state="translated">同じように&lt;a href=&quot;#global-setup-fixtures&quot;&gt;グローバル設定器具&lt;/a&gt;、&lt;em&gt;グローバルティアダウン・フィクスチャは、&lt;/em&gt;「必要」スクリプトからエクスポートして作成することができます（私たちは、単一のファイルに備品の両方のタイプを置くことができます）：</target>
        </trans-unit>
        <trans-unit id="b1d5bc4319f7f8bf5b33719fb0fb6310897e8fa3" translate="yes" xml:space="preserve">
          <source>Landing Strip</source>
          <target state="translated">ランディングストリップ</target>
        </trans-unit>
        <trans-unit id="a9ce522cb0a03624969154fd5e6aceacb8a3f714" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 4.0 International License.</source>
          <target state="translated">クリエイティブ・コモンズ表示4.0国際ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="81f9391a167e38836e51f7e1986bb3e553e765ae" translate="yes" xml:space="preserve">
          <source>Likewise, subprocesses may throw uncaught exceptions. When used with &lt;code&gt;--allow-uncaught&lt;/code&gt;, Mocha will &amp;ldquo;bubble&amp;rdquo; this exception to the main process, but still must shut down its processes.</source>
          <target state="translated">同様に、サブプロセスはキャッチされない例外をスローする場合があります。 &lt;code&gt;--allow-uncaught&lt;/code&gt; と一緒に使用すると、Mochaはこの例外をメインプロセスに「バブル」しますが、それでもプロセスをシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="f6899ebf0ca0ce4a62efdba629268fd960c1e19f" translate="yes" xml:space="preserve">
          <source>Limited Reporter API for Third-Party Reporters</source>
          <target state="translated">サードパーティレポーターのための限定レポーターAPI</target>
        </trans-unit>
        <trans-unit id="a1fffaaafb7cc996685bceb829c053cc4f7de43d" translate="yes" xml:space="preserve">
          <source>List</source>
          <target state="translated">List</target>
        </trans-unit>
        <trans-unit id="e2e7cdf994b1f36e0c1ff70085b82cf490fcf620" translate="yes" xml:space="preserve">
          <source>List of paths or globs to exclude from watching. Defaults to &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;.git&lt;/code&gt;.</source>
          <target state="translated">監視から除外するパスまたはグロブのリスト。デフォルトは &lt;code&gt;node_modules&lt;/code&gt; と &lt;code&gt;.git&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8aaf196cfbb7dfe32223cb96128030e54c8ff4ec" translate="yes" xml:space="preserve">
          <source>List of paths or globs to watch when &lt;code&gt;--watch&lt;/code&gt; is set. If a file matching the given glob changes or is added or removed mocha will rerun all tests.</source>
          <target state="translated">&lt;code&gt;--watch&lt;/code&gt; が設定されているときに監視するパスまたはグロブのリスト。指定されたglobに一致するファイルが変更されたり、追加または削除されたりした場合、mochaはすべてのテストを再実行します。</target>
        </trans-unit>
        <trans-unit id="213ad534e48a66b1d96fe2770c363132e3e66f0d" translate="yes" xml:space="preserve">
          <source>Loading all &lt;code&gt;--require&lt;/code&gt;&amp;rsquo;d modules</source>
          <target state="translated">すべての &lt;code&gt;--require&lt;/code&gt; 'dモジュールをロードしています</target>
        </trans-unit>
        <trans-unit id="67148720a2f6dd571482ec7ac555f1af79ff50c2" translate="yes" xml:space="preserve">
          <source>Loads options from config files, if present</source>
          <target state="translated">設定ファイルからオプションをロードします。</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="d6972503fc6dbefead6db71035b39bbfe6a70a94" translate="yes" xml:space="preserve">
          <source>Many reporters will display test duration and flag tests that are slow (default: 75ms), as shown here with the SPEC reporter:</source>
          <target state="translated">多くのレポーターは、SPECレポーターでここに示されているように、テスト期間を表示し、遅いテストにフラグを立てます(デフォルトは75ms)。</target>
        </trans-unit>
        <trans-unit id="bfb0bedadfed8788447822b5ff9afc80a1eced19" translate="yes" xml:space="preserve">
          <source>Many reporters will display test duration, as well as flagging tests that are slow, as shown here with the &amp;ldquo;spec&amp;rdquo; reporter:</source>
          <target state="translated">以下の「spec」レポーターで示されているように、多くのレポーターは、テスト期間に加えて、遅いフラグ付きテストを表示します。</target>
        </trans-unit>
        <trans-unit id="23e67fceae0d77dd571dd25695fc0499faf1bb77" translate="yes" xml:space="preserve">
          <source>Markdown</source>
          <target state="translated">Markdown</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="25dfffe3f78bab0eaf08f3ee0b6c62bbd83f0ad3" translate="yes" xml:space="preserve">
          <source>Migrating Tests to use Root Hook Plugins</source>
          <target state="translated">ルートフックプラグインを使用するためのテストの移行</target>
        </trans-unit>
        <trans-unit id="fccc1d9fe0568e41bbd2e9d56a1b492a94042e8b" translate="yes" xml:space="preserve">
          <source>Migrating a Library to use Root Hook PLugins</source>
          <target state="translated">ルートフックPLuginsを使用するためのライブラリの移行</target>
        </trans-unit>
        <trans-unit id="7eb0cee888ab55b559592d38eec027e9118d7d35" translate="yes" xml:space="preserve">
          <source>Min</source>
          <target state="translated">Min</target>
        </trans-unit>
        <trans-unit id="814d5c9075ac58da08deb4e3d88f6089a78f380d" translate="yes" xml:space="preserve">
          <source>Mocha</source>
          <target state="translated">Mocha</target>
        </trans-unit>
        <trans-unit id="287a609f38b64c689ddaf29e9b3f917002c77bcc" translate="yes" xml:space="preserve">
          <source>Mocha &lt;em&gt;discovers&lt;/em&gt; test files; when given no files or directories, it finds files with extensions &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.mjs&lt;/code&gt; or &lt;code&gt;.cjs&lt;/code&gt; in the &lt;code&gt;test&lt;/code&gt; directory (but not its children), relative to the current working directory</source>
          <target state="translated">モカ&lt;em&gt;は&lt;/em&gt;テストファイルを&lt;em&gt;発見し&lt;/em&gt;ます。ファイルまたはディレクトリが指定されていない場合、現在の作業ディレクトリを基準にして、 &lt;code&gt;test&lt;/code&gt; ディレクトリ（その子ではない）で拡張子が &lt;code&gt;.js&lt;/code&gt; 、 &lt;code&gt;.mjs&lt;/code&gt; 、または &lt;code&gt;.cjs&lt;/code&gt; のファイルを検索します</target>
        </trans-unit>
        <trans-unit id="2fcfac04215b5cfde8e6b64f5182684c5ddff757" translate="yes" xml:space="preserve">
          <source>Mocha Sidebar (VS Code)</source>
          <target state="translated">モカサイドバー(VSコード</target>
        </trans-unit>
        <trans-unit id="5de0788e58a0f831b2cb8edaf51627958b83ac3a" translate="yes" xml:space="preserve">
          <source>Mocha allows you to define custom reporters. For more information see the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wiki&lt;/a&gt;.</source>
          <target state="translated">Mochaを使用すると、カスタムレポーターを定義できます。詳細については、&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wikiを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c79a6b78a1b13f1d9fff2ae10078198d72760ac" translate="yes" xml:space="preserve">
          <source>Mocha allows you to define custom reporters. For more information see the &lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wiki&lt;/a&gt;. An example is the &lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity reporter&lt;/a&gt;.</source>
          <target state="translated">Mochaでは、カスタムレポーターを定義できます。詳細については、&lt;a href=&quot;https://github.com/mochajs/mocha/wiki/Third-party-reporters&quot;&gt;wikiを&lt;/a&gt;参照してください。その一例が&lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCityレポーター&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="708b4dde60c446e1bdc294ce04216900a0da361b" translate="yes" xml:space="preserve">
          <source>Mocha allows you to use any assertion library you wish. In the above example, we&amp;rsquo;re using Node.js&amp;rsquo; built-in &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt; module &amp;mdash; but generally, if it throws an &lt;code&gt;Error&lt;/code&gt;, it will work! This means you can use libraries such as:</source>
          <target state="translated">Mochaを使用すると、任意のアサーションライブラリを使用できます。上記の例では、Node.jsの組み込み&lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt;モジュールを使用していますが、通常、 &lt;code&gt;Error&lt;/code&gt; スローされた場合は機能します。これは、次のようなライブラリを使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="3f59749d3a9db27b1ed50c290daac3034aeba7fb" translate="yes" xml:space="preserve">
          <source>Mocha allows you to use any assertion library you wish. In the above example, we&amp;rsquo;re using Node.js&amp;rsquo; built-in &lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;assert&lt;/a&gt; module&amp;ndash;but generally, if it throws an &lt;code&gt;Error&lt;/code&gt;, it will work! This means you can use libraries such as:</source>
          <target state="translated">Mochaでは、任意のアサーションライブラリを使用できます。上記の例では、Node.jsのビルトイン&lt;a href=&quot;https://nodejs.org/api/assert.html&quot;&gt;アサート&lt;/a&gt;モジュールを使用していますが、通常、 &lt;code&gt;Error&lt;/code&gt; スローされた場合は機能します。つまり、次のようなライブラリを使用できます。</target>
        </trans-unit>
        <trans-unit id="11f0312c6827362ac37d284985c6699eb8a33d70" translate="yes" xml:space="preserve">
          <source>Mocha creates a pool of subprocesses (&amp;ldquo;workers&amp;rdquo;)</source>
          <target state="translated">モカはサブプロセスのプールを作成します（「ワーカー」）</target>
        </trans-unit>
        <trans-unit id="e7c4e152770dd7db227ea5ce0c15dd7acf5fe835" translate="yes" xml:space="preserve">
          <source>Mocha currently requires Node.js v6.x or newer.</source>
          <target state="translated">Mochaは現在Node.js v6.x以降が必要です。</target>
        </trans-unit>
        <trans-unit id="6ed14c3f96f0224d0ebd75e97e233948c7900996" translate="yes" xml:space="preserve">
          <source>Mocha does not retry test failures by default.</source>
          <target state="translated">Mochaはデフォルトではテストの失敗を再試行しません。</target>
        </trans-unit>
        <trans-unit id="ab5befc661f26d652bd2453168561dc3fe23f80e" translate="yes" xml:space="preserve">
          <source>Mocha examples</source>
          <target state="translated">モカの例</target>
        </trans-unit>
        <trans-unit id="0772eac59cdf125df3ec7b9a51743662da41eb9d" translate="yes" xml:space="preserve">
          <source>Mocha loads modules specified by &lt;code&gt;--require&lt;/code&gt;</source>
          <target state="translated">Mochaは &lt;code&gt;--require&lt;/code&gt; で指定されたモジュールをロードします</target>
        </trans-unit>
        <trans-unit id="e4549e0da2843af2164ef0f1363635cac6c7a2b1" translate="yes" xml:space="preserve">
          <source>Mocha options can be set via &lt;code&gt;mocha.setup()&lt;/code&gt;. Examples:</source>
          <target state="translated">Mochaオプションは &lt;code&gt;mocha.setup()&lt;/code&gt; で設定できます。例：</target>
        </trans-unit>
        <trans-unit id="9297b98a984e8553b0adbe91eb57e874ac4bb809" translate="yes" xml:space="preserve">
          <source>Mocha prints a final summary/epilog, if applicable</source>
          <target state="translated">モカは最終的なサマリー/エピログを印刷します。</target>
        </trans-unit>
        <trans-unit id="bab9d6d16dc47c72160e2e30ebeed18b236c593e" translate="yes" xml:space="preserve">
          <source>Mocha processes any command-line options provided (see section on &lt;a href=&quot;#merging&quot;&gt;configuration merging&lt;/a&gt; for details)</source>
          <target state="translated">Mochaは、提供されたコマンドラインオプションを処理します（詳細については、&lt;a href=&quot;#merging&quot;&gt;構成のマージ&lt;/a&gt;に関するセクションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="c9790eb8ea7d71a62db4b3faa0acda2f1f003d89" translate="yes" xml:space="preserve">
          <source>Mocha reporters adjust to the terminal window, and always disable ANSI-escape coloring when the stdio streams are not associated with a TTY.</source>
          <target state="translated">モカのレポーターはターミナルウィンドウに適応し、stdioストリームがTTYに関連付けられていない場合は常にANSIエスケープカラーリングを無効にします。</target>
        </trans-unit>
        <trans-unit id="e176b47cfa38e973a84574f31e1d80024d351b93" translate="yes" xml:space="preserve">
          <source>Mocha runs &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixtures&lt;/a&gt;, if any</source>
          <target state="translated">Mochaは、&lt;a href=&quot;#global-setup-fixtures&quot;&gt;グローバルセットアップフィクスチャを&lt;/a&gt;実行します（存在する場合）</target>
        </trans-unit>
        <trans-unit id="b4137072306ff47d8eab010421911cf11d354569" translate="yes" xml:space="preserve">
          <source>Mocha runs &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;global teardown fixtures&lt;/a&gt;, if any</source>
          <target state="translated">モカは、もしあれば、&lt;a href=&quot;#global-teardown-fixtures&quot;&gt;グローバル分解フィクスチャを&lt;/a&gt;実行します</target>
        </trans-unit>
        <trans-unit id="d8db60c9e0cda6e115805304c42eac4e4413bf8a" translate="yes" xml:space="preserve">
          <source>Mocha runs in the browser. Every release of Mocha will have new builds of &lt;code&gt;./mocha.js&lt;/code&gt; and &lt;code&gt;./mocha.css&lt;/code&gt; for use in the browser.</source>
          <target state="translated">Mochaはブラウザーで実行されます。Mochaのすべてのリリースには、ブラウザーで使用するための &lt;code&gt;./mocha.js&lt;/code&gt; および &lt;code&gt;./mocha.css&lt;/code&gt; の新しいビルドがあります。</target>
        </trans-unit>
        <trans-unit id="7dd99024461b2b6a248306582f406ce8c6bee1ab" translate="yes" xml:space="preserve">
          <source>Mocha supports ES modules only from Node.js v12.11.0 and above. To enable this in versions smaller than 13.2.0, you need to add &lt;code&gt;--experimental-modules&lt;/code&gt; when running Mocha. From version 13.2.0 of Node.js, you can use ES modules without any flags. (Mocha &lt;em&gt;will&lt;/em&gt; load ESM even in Node v10, but this is not officially supported. Use at your own risk.)</source>
          <target state="translated">Mochaは、Node.jsv12.11.0以降のESモジュールのみをサポートします。13.2.0より前のバージョンでこれを有効にするには、Mochaの実行時に &lt;code&gt;--experimental-modules&lt;/code&gt; を追加する必要があります。Node.jsのバージョン13.2.0から、フラグなしでESモジュールを使用できます。（Mocha&lt;em&gt;は&lt;/em&gt;ノードv10でもESM&lt;em&gt;を&lt;/em&gt;ロードしますが、これは公式にはサポートされていません。自己責任で使用してください。）</target>
        </trans-unit>
        <trans-unit id="da372a80572f080564d6c93df43a58d330f38b7a" translate="yes" xml:space="preserve">
          <source>Mocha supports configuration files, typical of modern command-line tools, in several formats:</source>
          <target state="translated">Mocha は、最近のコマンドラインツールの典型的な設定ファイルをいくつかの形式でサポートしています。</target>
        </trans-unit>
        <trans-unit id="8ab8951ae8901ff2237752a7f95918ec25a7ad6f" translate="yes" xml:space="preserve">
          <source>Mocha supports the &lt;code&gt;err.expected&lt;/code&gt; and &lt;code&gt;err.actual&lt;/code&gt; properties of any thrown &lt;code&gt;AssertionError&lt;/code&gt;s from an assertion library. Mocha will attempt to display the difference between what was expected, and what the assertion actually saw. Here&amp;rsquo;s an example of a &amp;ldquo;string&amp;rdquo; diff using &lt;code&gt;--inline-diffs&lt;/code&gt;:</source>
          <target state="translated">モカはサポート &lt;code&gt;err.expected&lt;/code&gt; と &lt;code&gt;err.actual&lt;/code&gt; 任意のスローの性質 &lt;code&gt;AssertionError&lt;/code&gt; がアサーションライブラリから複数可。モカは、期待されたものとアサーションが実際に見たものとの違いを表示しようとします。 &lt;code&gt;--inline-diffs&lt;/code&gt; を使用した「文字列」diffの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="bdaf5d42996c9782025035e4e23b2ead0e71a84c" translate="yes" xml:space="preserve">
          <source>Mocha supports the &lt;code&gt;err.expected&lt;/code&gt; and &lt;code&gt;err.actual&lt;/code&gt; properties of any thrown &lt;code&gt;AssertionError&lt;/code&gt;s from an assertion library. Mocha will attempt to display the difference between what was expected, and what the assertion actually saw. Here&amp;rsquo;s an example of a &amp;ldquo;string&amp;rdquo; diff:</source>
          <target state="translated">モカはサポート &lt;code&gt;err.expected&lt;/code&gt; と &lt;code&gt;err.actual&lt;/code&gt; 任意のスローの性質 &lt;code&gt;AssertionError&lt;/code&gt; がアサーションライブラリから複数可。モカは期待されていたものと実際の主張との違いを表示しようとします。「文字列」diffの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c473b5963e755c0c6b39db8a3b9791e0404c17c4" translate="yes" xml:space="preserve">
          <source>Mocha supports writing your tests as ES modules, and not just using CommonJS. For example:</source>
          <target state="translated">Mochaは、CommonJSだけでなく、ESモジュールとしてテストを書くこともサポートしています。例えば</target>
        </trans-unit>
        <trans-unit id="3c4226a01875649b69bbca76bc2fae290f2eeac0" translate="yes" xml:space="preserve">
          <source>Mocha tests</source>
          <target state="translated">モカのテスト</target>
        </trans-unit>
        <trans-unit id="87f541d0cdbe34e52860be4c1e4b2bb2c2f52c39" translate="yes" xml:space="preserve">
          <source>Mocha validates any custom reporters or interfaces which were loaded via &lt;code&gt;--require&lt;/code&gt; or otherwise</source>
          <target state="translated">Mochaは、 &lt;code&gt;--require&lt;/code&gt; またはその他の方法でロードされたカスタムレポーターまたはインターフェイスを検証します</target>
        </trans-unit>
        <trans-unit id="93c7b4139417d867cc23bf0646d1947de4a19676" translate="yes" xml:space="preserve">
          <source>Mocha will also &lt;em&gt;merge&lt;/em&gt; any options found in &lt;code&gt;package.json&lt;/code&gt; into its run-time configuration. In case of conflict, the priority is:</source>
          <target state="translated">Mochaは、 &lt;code&gt;package.json&lt;/code&gt; で見つかったオプションも実行時構成に&lt;em&gt;マージし&lt;/em&gt;ます。競合する場合、優先順位は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0f7dfeec8c535188507dfaa3c0bba47bfed5d172" translate="yes" xml:space="preserve">
          <source>Mocha will spawn &lt;code&gt;node&lt;/code&gt; in a child process, executing itself with these flags</source>
          <target state="translated">Mochaは子プロセスで &lt;code&gt;node&lt;/code&gt; を生成し、これらのフラグを使用して自身を実行します</target>
        </trans-unit>
        <trans-unit id="986c77af424daa79d6d9089aa97d53b7cb4f282b" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s &amp;ldquo;interface&amp;rdquo; system allows developers to choose their style of DSL. Mocha has &lt;strong&gt;BDD&lt;/strong&gt;, &lt;strong&gt;TDD&lt;/strong&gt;, &lt;strong&gt;Exports&lt;/strong&gt;, &lt;strong&gt;QUnit&lt;/strong&gt; and &lt;strong&gt;Require&lt;/strong&gt;-style interfaces.</source>
          <target state="translated">Mochaの「インターフェース」システムにより、開発者はDSLのスタイルを選択できます。Mochaには&lt;strong&gt;BDD&lt;/strong&gt;、&lt;strong&gt;TDD&lt;/strong&gt;、&lt;strong&gt;Exports&lt;/strong&gt;、&lt;strong&gt;QUnit&lt;/strong&gt;と&lt;strong&gt;Require&lt;/strong&gt;スタイルのインターフェースがあります。</target>
        </trans-unit>
        <trans-unit id="49250389453f58301ad0eba3d64949d472a5723d" translate="yes" xml:space="preserve">
          <source>Mocha&amp;rsquo;s own diff output does not conform to any known standards, and is designed to be human-readable.</source>
          <target state="translated">Mocha独自のdiff出力は、既知の標準に準拠しておらず、人間が読めるように設計されています。</target>
        </trans-unit>
        <trans-unit id="bf7140895edb98336b241d1656e4a43d361390dc" translate="yes" xml:space="preserve">
          <source>Modules required in this manner are expected to do work synchronously; Mocha won&amp;rsquo;t wait for async tasks in a required module to finish.</source>
          <target state="translated">この方法で必要なモジュールは、同期して動作することが期待されます。Mochaは、必要なモジュールの非同期タスクが終了するのを待ちません。</target>
        </trans-unit>
        <trans-unit id="22ffffbccfcf501db363d7084eeed3e3deb28b71" translate="yes" xml:space="preserve">
          <source>More Information</source>
          <target state="translated">詳細情報</target>
        </trans-unit>
        <trans-unit id="44127da4eea42d02eb47f9d6ee26e3edc3b0c4ac" translate="yes" xml:space="preserve">
          <source>Multiple Root Hook Plugins</source>
          <target state="translated">複数のルートフックプラグイン</target>
        </trans-unit>
        <trans-unit id="49dd3278f3142d6bc6ed7ae12817ec4eb2bca99d" translate="yes" xml:space="preserve">
          <source>Multiple Root Hooks in a Single Plugin</source>
          <target state="translated">単一のプラグインで複数のルートフック</target>
        </trans-unit>
        <trans-unit id="967cf423ecdb1dcf4e1830a57deba26d2a5ea874" translate="yes" xml:space="preserve">
          <source>Multiple root hook plugins can be registered by using &lt;code&gt;--require&lt;/code&gt; multiple times. For example, to register the root hooks in &lt;code&gt;hooks-a.js&lt;/code&gt; and &lt;code&gt;hooks-b.js&lt;/code&gt;, use &lt;code&gt;--require hooks-a.js --require hooks-b.js&lt;/code&gt;. These will be registered (and run) &lt;em&gt;in order&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;--require&lt;/code&gt; を複数回使用すると、複数のルートフックプラグインを登録できます。たとえば、 &lt;code&gt;hooks-a.js&lt;/code&gt; と &lt;code&gt;hooks-b.js&lt;/code&gt; にルートフックを登録するには、 &lt;code&gt;--require hooks-a.js --require hooks-b.js&lt;/code&gt; ます。これらは&lt;em&gt;順番に&lt;/em&gt;登録（および実行）さ&lt;em&gt;れ&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3f68f9966dc1d68c27fc4b38b143fe810c063543" translate="yes" xml:space="preserve">
          <source>Multiple root hooks can be defined in a single plugin, for organizational purposes. For example:</source>
          <target state="translated">複数のルートフックは、組織的な目的のために、1つのプラグインで定義することができます。例えば</target>
        </trans-unit>
        <trans-unit id="6c52e7dc563fddcb0d886eb437b9615fb181fd48" translate="yes" xml:space="preserve">
          <source>Mutually exclusive with &lt;code&gt;--fgrep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--fgrep&lt;/code&gt; と相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="3ff33a1595c3ec6d3abd0b7dbca6d62427b5404f" translate="yes" xml:space="preserve">
          <source>Mutually exclusive with &lt;code&gt;--grep&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; と相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="4b36a2c132e81ee9b31db5bae72d1bd5a715cc46" translate="yes" xml:space="preserve">
          <source>NORMAL: Tests that run exceeding half of the threshold (but still within it) will show the duration in yellow.</source>
          <target state="translated">通常:しきい値の半分を超えて実行されたテスト(ただし、しきい値の範囲内で実行された場合)は、継続時間が黄色で表示されます。</target>
        </trans-unit>
        <trans-unit id="83a68b2aac803eae75c8e9ca3b857b89849d26d5" translate="yes" xml:space="preserve">
          <source>New in v8.2.0</source>
          <target state="translated">v8.2.0の新機能</target>
        </trans-unit>
        <trans-unit id="6c4b366b3f1a2c28863fafd7c16dc8cf4ac83e57" translate="yes" xml:space="preserve">
          <source>No Browser Support</source>
          <target state="translated">ブラウザのサポートはありません</target>
        </trans-unit>
        <trans-unit id="8e54a6b27986024c9809b900cff76d0322d9d1dd" translate="yes" xml:space="preserve">
          <source>Node-based notifications</source>
          <target state="translated">ノードベースの通知</target>
        </trans-unit>
        <trans-unit id="b1294abbb6777171397b209d393f6bc1f61cc3dd" translate="yes" xml:space="preserve">
          <source>Node.JS native ESM support</source>
          <target state="translated">Node.JSネイティブESMのサポート</target>
        </trans-unit>
        <trans-unit id="47aeadc2705b587ce5621779f4ae5628aab74b19" translate="yes" xml:space="preserve">
          <source>Node.JS native ESM support does not work with &lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt; module</source>
          <target state="translated">Node.JSネイティブESMサポートは&lt;a href=&quot;https://npm.im/esm&quot;&gt;esm&lt;/a&gt;モジュールでは機能しません</target>
        </trans-unit>
        <trans-unit id="2dc566b7308c0409ae1e66ce7d3a02e2c115bd3a" translate="yes" xml:space="preserve">
          <source>Node.JS native ESM support still has status: &lt;strong&gt;Stability: 1 - Experimental&lt;/strong&gt;</source>
          <target state="translated">Node.JSネイティブESMサポートにはまだステータスがあります：&lt;strong&gt;安定性：1-実験的&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f3fb53f775a3fe7181cf34a8bb3c4ff3e4e016f" translate="yes" xml:space="preserve">
          <source>Not all reporters accept options.</source>
          <target state="translated">すべての記者が選択肢を受け入れるわけではない。</target>
        </trans-unit>
        <trans-unit id="bdd399ee6d41973cc3256c843186c0ecdcad1f2a" translate="yes" xml:space="preserve">
          <source>Note: A test that executes for &lt;em&gt;half&lt;/em&gt; of the &amp;ldquo;slow&amp;rdquo; time will be highlighted &lt;em&gt;in yellow&lt;/em&gt; with the default &lt;code&gt;spec&lt;/code&gt; reporter; a test that executes for entire &amp;ldquo;slow&amp;rdquo; time will be highlighted &lt;em&gt;in red&lt;/em&gt;.</source>
          <target state="translated">注：「遅い」時間の&lt;em&gt;半分&lt;/em&gt;で実行されるテストは、デフォルトの &lt;code&gt;spec&lt;/code&gt; レポーター&lt;em&gt;で黄色&lt;/em&gt;で強調表示さ&lt;em&gt;れ&lt;/em&gt;ます。「遅い」時間全体で実行されるテストは&lt;em&gt;、赤&lt;/em&gt;で強調表示さ&lt;em&gt;れます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae74630834f71ce25232180db59d806585c0114b" translate="yes" xml:space="preserve">
          <source>Note: synchronous (blocking) tests are also bound by the timeout, but they will not complete until the code stops blocking. Infinite loops will still be infinite loops!</source>
          <target state="translated">注意:同期(ブロッキング)テストもタイムアウトに拘束されますが、コードがブロッキングを止めるまでは完了しません。無限ループは無限ループのままです!</target>
        </trans-unit>
        <trans-unit id="bb5007a647a28bc95392786dd174c3dbe43ede2a" translate="yes" xml:space="preserve">
          <source>Now, before Mocha loads and runs your tests, it will execute the above global setup fixture, starting a server for testing. This won&amp;rsquo;t shut &lt;em&gt;down&lt;/em&gt; the server when Mocha is done, however! To do that, use a &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;&lt;em&gt;global teardown fixture&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">これで、Mochaがテストをロードして実行する前に、上記のグローバルセットアップフィクスチャを実行し、テスト用のサーバーを起動します。ただし、Mochaが完了&lt;em&gt;しても&lt;/em&gt;、サーバーはシャットダウンさ&lt;em&gt;れ&lt;/em&gt;ません。これを行うには、&lt;a href=&quot;#global-teardown-fixtures&quot;&gt;&lt;em&gt;グローバルティアダウンフィクスチャを&lt;/em&gt;&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d178d5c2e5c837309098fe81d7dfb445cfcf5e3d" translate="yes" xml:space="preserve">
          <source>Nyan</source>
          <target state="translated">Nyan</target>
        </trans-unit>
        <trans-unit id="aafb1c4d33f5d9572aa52e071a71ddbdec4b3b15" translate="yes" xml:space="preserve">
          <source>Once enabled, when your root suite completes test execution, a desktop notification should appear informing you whether your tests passed or failed.</source>
          <target state="translated">有効にすると、ルートスイートがテストの実行を完了すると、デスクトップ通知が表示され、テストが合格か不合格かを知らせてくれます。</target>
        </trans-unit>
        <trans-unit id="6c9c3c2d7cdb1a5c91ca482eb4a85c1635a147a9" translate="yes" xml:space="preserve">
          <source>Only interested in the first exception? use &lt;code&gt;--bail&lt;/code&gt;!</source>
          <target state="translated">最初の例外にのみ興味がありますか？ &lt;code&gt;--bail&lt;/code&gt; を使用してください！</target>
        </trans-unit>
        <trans-unit id="3ba3541936eec20e5463500c9ca6c3e3941a12ea" translate="yes" xml:space="preserve">
          <source>Options which can safely be repeated (e.g., &lt;code&gt;--require&lt;/code&gt;) will be &lt;em&gt;concatenated&lt;/em&gt;, with higher-priorty configuration sources appearing earlier in the list. For example, a &lt;code&gt;.mocharc.json&lt;/code&gt; containing &lt;code&gt;&quot;require&quot;: &quot;bar&quot;&lt;/code&gt;, coupled with execution of &lt;code&gt;mocha --require foo&lt;/code&gt;, would cause Mocha to require &lt;code&gt;foo&lt;/code&gt;, then &lt;code&gt;bar&lt;/code&gt;, in that order.</source>
          <target state="translated">安全に繰り返すことができるオプション（たとえば、 &lt;code&gt;--require&lt;/code&gt; ）は&lt;em&gt;連結され&lt;/em&gt;、優先度の高い構成ソースがリストの前に表示されます。例えば、 &lt;code&gt;.mocharc.json&lt;/code&gt; 含むが &lt;code&gt;&quot;require&quot;: &quot;bar&quot;&lt;/code&gt; の実行と相まって、 &lt;code&gt;mocha --require foo&lt;/code&gt; 、モカが必要とさせるような &lt;code&gt;foo&lt;/code&gt; 、その後、 &lt;code&gt;bar&lt;/code&gt; の順に、。</target>
        </trans-unit>
        <trans-unit id="170cef265c96be8bcb76d1e2fa57cce18bef2e96" translate="yes" xml:space="preserve">
          <source>Or a specific test-case:</source>
          <target state="translated">あるいは特定のテストケース。</target>
        </trans-unit>
        <trans-unit id="a4d0bf96cde98e3c84a4f0d4097a998defcdb311" translate="yes" xml:space="preserve">
          <source>Otherwise, Mocha does not spawn a child process</source>
          <target state="translated">そうでなければ、モカは子プロセスを生成しません。</target>
        </trans-unit>
        <trans-unit id="e14df1a5fbbce6753795dda343cb05532b89bf2f" translate="yes" xml:space="preserve">
          <source>Parallel Mode</source>
          <target state="translated">パラレルモード</target>
        </trans-unit>
        <trans-unit id="d7d2ee35b0f27af06281eb3d2977ade0f170e622" translate="yes" xml:space="preserve">
          <source>Parallel Tests</source>
          <target state="translated">並列テスト</target>
        </trans-unit>
        <trans-unit id="f753f35db50d0728ebd2231b8150444264f25d5a" translate="yes" xml:space="preserve">
          <source>Parallel mode is only available in Node.js, for now.</source>
          <target state="translated">パラレルモードは今のところNode.jsでしか使えません。</target>
        </trans-unit>
        <trans-unit id="a2a4ff140f36ba6cea6036cce72651d01be400c3" translate="yes" xml:space="preserve">
          <source>Parallel tests should work out-of-the box for many use cases. However, you must be aware of some important implications of the behavior.</source>
          <target state="translated">並列テストは、多くのユースケースですぐに動作するはずです。しかし、この動作にはいくつかの重要な意味合いがあることを認識しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="648c367a6a72cc9ba9319737869be7ad94adca1e" translate="yes" xml:space="preserve">
          <source>Passing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (&amp;ldquo;lambdas&amp;rdquo;) to Mocha is discouraged. Lambdas lexically bind &lt;code&gt;this&lt;/code&gt; and cannot access the Mocha context. For example, the following code will fail:</source>
          <target state="translated">引き渡し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;矢印機能&lt;/a&gt;モカに（「ラムダ」）は推奨されません。ラムダは &lt;code&gt;this&lt;/code&gt; を字句的にバインドし、Mochaコンテキストにアクセスできません。たとえば、次のコードは失敗します。</target>
        </trans-unit>
        <trans-unit id="6a812a4a6cf2257fac172680e85581f081b21e40" translate="yes" xml:space="preserve">
          <source>Passing &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; (aka &amp;ldquo;lambdas&amp;rdquo;) to Mocha is discouraged. Lambdas lexically bind &lt;code&gt;this&lt;/code&gt; and cannot access the Mocha context. For example, the following code will fail:</source>
          <target state="translated">引き渡し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;矢印関数は&lt;/a&gt;（別名「ラムダ」）モカにはお勧めしません。ラムダは &lt;code&gt;this&lt;/code&gt; を字句的にバインドし、Mochaコンテキストにアクセスできません。たとえば、次のコードは失敗します。</target>
        </trans-unit>
        <trans-unit id="9451e4aac5f5c3fcea46531060b150e2b9a36c06" translate="yes" xml:space="preserve">
          <source>Pending Tests</source>
          <target state="translated">保留中のテスト</target>
        </trans-unit>
        <trans-unit id="f6f87e4ab77e9426de1be27e566eec10532e5475" translate="yes" xml:space="preserve">
          <source>Pending tests will be included in the test results, and marked as pending. A pending test is not considered a failed test.</source>
          <target state="translated">保留中の検査は検査結果に含まれ、保留と表示されます。保留中のテストは不合格とはみなされません。</target>
        </trans-unit>
        <trans-unit id="73f0d84fea438dc5c76e0254b1b8f04c3404e01d" translate="yes" xml:space="preserve">
          <source>Prepend &lt;code&gt;--v8-&lt;/code&gt; to any flag listed in the output of &lt;code&gt;node --v8-options&lt;/code&gt; (excluding &lt;code&gt;--v8-options&lt;/code&gt; itself) to use it.</source>
          <target state="translated">プリペンド &lt;code&gt;--v8-&lt;/code&gt; の出力にリストされているフラグの &lt;code&gt;node --v8-options&lt;/code&gt; （除く &lt;code&gt;--v8-options&lt;/code&gt; を使用するように自身を）。</target>
        </trans-unit>
        <trans-unit id="6037078963a82ab9952637e38bf310d2bc92819c" translate="yes" xml:space="preserve">
          <source>Previous to v3.0.0, &lt;code&gt;.only()&lt;/code&gt; used string matching to decide which tests to execute. As of v3.0.0, this is no longer the case. In v3.0.0 or newer, &lt;code&gt;.only()&lt;/code&gt; can be used multiple times to define a subset of tests to run:</source>
          <target state="translated">v3.0.0以前では、 &lt;code&gt;.only()&lt;/code&gt; は文字列マッチングを使用して、実行するテストを決定していました。v3.0.0以降、これは当てはまりません。v3.0.0以降では、 &lt;code&gt;.only()&lt;/code&gt; を複数回使用して、実行するテストのサブセットを定義できます。</target>
        </trans-unit>
        <trans-unit id="39dcce5dda129e6deb8d281b467ecb90c983fb57" translate="yes" xml:space="preserve">
          <source>Previous to v3.0.0, &lt;code&gt;.only()&lt;/code&gt; used string matching to decide which tests to execute; this is no longer the case. In v3.0.0 or newer, &lt;code&gt;.only()&lt;/code&gt; can be used multiple times to define a subset of tests to run:</source>
          <target state="translated">v3.0.0より前は、 &lt;code&gt;.only()&lt;/code&gt; は文字列照合を使用して実行するテストを決定していました。これはもはや当てはまりません。v3.0.0以降では、 &lt;code&gt;.only()&lt;/code&gt; を複数回使用して、実行するテストのサブセットを定義できます。</target>
        </trans-unit>
        <trans-unit id="8c0ad90bec3127568428d4c04d5d1ea52f6ba12f" translate="yes" xml:space="preserve">
          <source>Priorities</source>
          <target state="translated">Priorities</target>
        </trans-unit>
        <trans-unit id="1b90271d66cf2d3ac755d49a550fe5f31b9eca5f" translate="yes" xml:space="preserve">
          <source>Progress</source>
          <target state="translated">Progress</target>
        </trans-unit>
        <trans-unit id="1057d25725efa0c5e1b90beb792ae81b7b520fc4" translate="yes" xml:space="preserve">
          <source>Provide options specific to a reporter in &lt;code&gt;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; format, e.g., &lt;code&gt;--reporter tap --reporter-option tapVersion=13&lt;/code&gt;.</source>
          <target state="translated">レポーターに固有のオプションを &lt;code&gt;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; 形式で提供します（例： &lt;code&gt;--reporter tap --reporter-option tapVersion=13&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6392d1964def385ce87ea1765cc583aeecab5db6" translate="yes" xml:space="preserve">
          <source>QUnit</source>
          <target state="translated">QUnit</target>
        </trans-unit>
        <trans-unit id="6415dfe66679323c7468378d5797c9a1440e5d47" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;#inclusive-tests&quot;&gt;inclusive tests section&lt;/a&gt; for an example of conditionally marking a test as pending via &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this.skip()&lt;/code&gt; を介してテストを保留中として条件付きでマークする例については、&lt;a href=&quot;#inclusive-tests&quot;&gt;包括的テストのセクション&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="065082ec90d58ac01e4f147aae2024dbd1935ef3" translate="yes" xml:space="preserve">
          <source>Real live example code:</source>
          <target state="translated">実際のライブサンプルコード。</target>
        </trans-unit>
        <trans-unit id="d250236e6c5faf479c711fb8d886a454122d727d" translate="yes" xml:space="preserve">
          <source>Registering any root hook plugins</source>
          <target state="translated">任意のルートフックプラグインの登録</target>
        </trans-unit>
        <trans-unit id="ead6a8ca68bb946090f57e3b82b0fa2db8851658" translate="yes" xml:space="preserve">
          <source>Remember: you can define &amp;ldquo;requires&amp;rdquo; in a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="translated">注意：&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;構成ファイル&lt;/a&gt;で「requires」を定義できます。</target>
        </trans-unit>
        <trans-unit id="d9b0547bbe4d7960ad3f069506ad5e19f5d438e8" translate="yes" xml:space="preserve">
          <source>Repeat steps 1 through 6 from &lt;a href=&quot;#serial-mode&quot;&gt;Serial Mode&lt;/a&gt; above, skipping reporter validation</source>
          <target state="translated">レポーターの検証をスキップして、上記の&lt;a href=&quot;#serial-mode&quot;&gt;シリアルモード&lt;/a&gt;から手順1〜6を繰り返します</target>
        </trans-unit>
        <trans-unit id="e05267ae1ae3a5d6b6fb1fa790452bf8a8320f7b" translate="yes" xml:space="preserve">
          <source>Reporter Limitations</source>
          <target state="translated">レポーターの制限</target>
        </trans-unit>
        <trans-unit id="4a28165bd85132c82d26771bbd29abef42ef343a" translate="yes" xml:space="preserve">
          <source>Reporters</source>
          <target state="translated">Reporters</target>
        </trans-unit>
        <trans-unit id="c9e579d6d1ba09edc7af3d2bf94ca4c747181eb4" translate="yes" xml:space="preserve">
          <source>Reporting</source>
          <target state="translated">Reporting</target>
        </trans-unit>
        <trans-unit id="bff5c4dd0585a4f0e68311b683e36c85f477b138" translate="yes" xml:space="preserve">
          <source>Require</source>
          <target state="translated">Require</target>
        </trans-unit>
        <trans-unit id="87e46e5efd728f1dba64ede084b5f5e5ca260783" translate="yes" xml:space="preserve">
          <source>Require a module before loading the user interface or test files. This is useful for:</source>
          <target state="translated">ユーザーインターフェイスやテストファイルを読み込む前にモジュールを要求します。これは次のような場合に便利です。</target>
        </trans-unit>
        <trans-unit id="2784cbc347244be07f57821f9a68b75cac35261c" translate="yes" xml:space="preserve">
          <source>Requires either &lt;code&gt;--grep&lt;/code&gt; or &lt;code&gt;--fgrep&lt;/code&gt; (but not both).</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; または &lt;code&gt;--fgrep&lt;/code&gt; のいずれかが必要です（両方ではありません）。</target>
        </trans-unit>
        <trans-unit id="126887cfc9375d4bb17ab466f2e878ac14670e33" translate="yes" xml:space="preserve">
          <source>Requires extra software to be installed; see the &lt;a href=&quot;https://npm.im/growl&quot;&gt;growl module&amp;rsquo;s docs&lt;/a&gt; for more information.</source>
          <target state="translated">追加のソフトウェアをインストールする必要があります。詳細については、&lt;a href=&quot;https://npm.im/growl&quot;&gt;growlモジュールのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a24820b0e29378887da645fa4f79e8c6d5f66fd5" translate="yes" xml:space="preserve">
          <source>Rerun tests on file changes.</source>
          <target state="translated">ファイルを変更してテストを再実行します。</target>
        </trans-unit>
        <trans-unit id="bd98500ec4fd41f88c5295448e5485d12db76f89" translate="yes" xml:space="preserve">
          <source>Retries failed tests &lt;code&gt;n&lt;/code&gt; times.</source>
          <target state="translated">失敗したテストを &lt;code&gt;n&lt;/code&gt; 回再試行します。</target>
        </trans-unit>
        <trans-unit id="1d778624bd69fa07fabf3003c8ae159e173f0408" translate="yes" xml:space="preserve">
          <source>Retry Tests</source>
          <target state="translated">テストの再試行</target>
        </trans-unit>
        <trans-unit id="2f24826aefead136f2bfd6cf38c89e1ac573df7e" translate="yes" xml:space="preserve">
          <source>Root Hook Plugins</source>
          <target state="translated">ルートフックプラグイン</target>
        </trans-unit>
        <trans-unit id="cbb272024920ec3b51902a8f8db50512b3a470a1" translate="yes" xml:space="preserve">
          <source>Root Hook Plugins Can Export a Function</source>
          <target state="translated">ルートフックプラグインは関数をエクスポートすることができます</target>
        </trans-unit>
        <trans-unit id="cfe598fd52513d7d20ed6c32dc51e8304e1c287e" translate="yes" xml:space="preserve">
          <source>Root Hooks Are Not Global</source>
          <target state="translated">ルートフックはグローバルではない</target>
        </trans-unit>
        <trans-unit id="7efe385285d12d68cd51922dbce187a2074a80dd" translate="yes" xml:space="preserve">
          <source>Root hooks work with any interface, but &lt;em&gt;the property names do not change&lt;/em&gt;. In other words, if you are using the &lt;code&gt;tdd&lt;/code&gt; interface, &lt;code&gt;suiteSetup&lt;/code&gt; maps to &lt;code&gt;beforeAll&lt;/code&gt;, and &lt;code&gt;setup&lt;/code&gt; maps to &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="translated">Root hooks work with any interface, but &lt;em&gt;the property names do not change&lt;/em&gt;. In other words, if you are using the &lt;code&gt;tdd&lt;/code&gt; interface, &lt;code&gt;suiteSetup&lt;/code&gt; maps to &lt;code&gt;beforeAll&lt;/code&gt; , and &lt;code&gt;setup&lt;/code&gt; maps to &lt;code&gt;beforeEach&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25785cb889647cb80cd687be550b38d7f7bb2fa7" translate="yes" xml:space="preserve">
          <source>Root-Level Hooks</source>
          <target state="translated">ルートレベルフック</target>
        </trans-unit>
        <trans-unit id="4dc6baa8ed35e401c3c76b62f93ec1655235ebb1" translate="yes" xml:space="preserve">
          <source>Run Cycle Overview</source>
          <target state="translated">ランサイクルの概要</target>
        </trans-unit>
        <trans-unit id="96178dac694530aaf45b04c80796027d6cd794d4" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;mocha --require test/hooks.js test/test.spec.js&lt;/code&gt; will run as before (and is now ready to be used with &lt;a href=&quot;#-parallel-p&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Running &lt;code&gt;mocha --require test/hooks.js test/test.spec.js&lt;/code&gt; will run as before (and is now ready to be used with &lt;a href=&quot;#-parallel-p&quot;&gt; &lt;code&gt;--parallel&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="74dc676b7dbb52e4370ff466a15d00f6536664dd" translate="yes" xml:space="preserve">
          <source>Running Mocha in the Browser</source>
          <target state="translated">ブラウザでモカを実行する</target>
        </trans-unit>
        <trans-unit id="ea6d2060afdbe73da58690e947d0359f3ad8a922" translate="yes" xml:space="preserve">
          <source>Running tests in parallel mode will naturally use more system resources. The OS may take extra time to schedule and complete some operations, depending on system load. For this reason, the timeouts of &lt;em&gt;individual tests&lt;/em&gt; may need to be increased either &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt;globally&lt;/a&gt; or &lt;a href=&quot;#timeouts&quot;&gt;otherwise&lt;/a&gt;.</source>
          <target state="translated">Running tests in parallel mode will naturally use more system resources. The OS may take extra time to schedule and complete some operations, depending on system load. For this reason, the timeouts of &lt;em&gt;individual tests&lt;/em&gt; may need to be increased either &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt;globally&lt;/a&gt; or &lt;a href=&quot;#timeouts&quot;&gt;otherwise&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="71674a60d50c138461eacf95cfe2fab80c6d2435" translate="yes" xml:space="preserve">
          <source>Running the above test will give you the below error message:</source>
          <target state="translated">上記のテストを実行すると、以下のようなエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="0a3de173e416a5b986833c6bb304dcd4fc78a4f6" translate="yes" xml:space="preserve">
          <source>SLOW: Tests that run exceeding the threshold will show the duration in red.</source>
          <target state="translated">SLOW:しきい値を超えて実行されたテストは、継続時間が赤で表示されます。</target>
        </trans-unit>
        <trans-unit id="e4952df9fbdd89bff5001d0e49cb40065ddd5528" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;--extension&lt;/code&gt; for defining which files are considered test files.</source>
          <target state="translated">See &lt;code&gt;--extension&lt;/code&gt; for defining which files are considered test files.</target>
        </trans-unit>
        <trans-unit id="553ee09f100ae39f8a3fa8c7318da6a02b5987e5" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;Node.js guide to debugging&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/en/docs/inspector/&quot;&gt;Node.jsガイドを&lt;/a&gt;参照してデバッグする</target>
        </trans-unit>
        <trans-unit id="9d817f0f3dedececb710435e1c4e7b83803ba707" translate="yes" xml:space="preserve">
          <source>See this &lt;a href=&quot;https://gist.github.com/reggi/475793ea1846affbcfe8&quot;&gt;tutorial&lt;/a&gt; on using globs.</source>
          <target state="translated">See this &lt;a href=&quot;https://gist.github.com/reggi/475793ea1846affbcfe8&quot;&gt;tutorial&lt;/a&gt; on using globs.</target>
        </trans-unit>
        <trans-unit id="ef8d01a6ebb07998d32e338b3f855163e999fdf6" translate="yes" xml:space="preserve">
          <source>Serial Mode</source>
          <target state="translated">シリアルモード</target>
        </trans-unit>
        <trans-unit id="fb9bc0e8eb2d2a1244e30e88e2759e92b67ca429" translate="yes" xml:space="preserve">
          <source>Set up a test script in package.json:</source>
          <target state="translated">package.jsonにテストスクリプトを設定します。</target>
        </trans-unit>
        <trans-unit id="88b657e4b99750b71d07aeaba8eb52406f40546c" translate="yes" xml:space="preserve">
          <source>Some assertion libraries will supply their own diffs, in which case Mocha&amp;rsquo;s will not be used, regardless of the default value.</source>
          <target state="translated">Some assertion libraries will supply their own diffs, in which case Mocha&amp;rsquo;s will not be used, regardless of the default value.</target>
        </trans-unit>
        <trans-unit id="e3aed3813cd1d21207e380d65f283f43f45fe33e" translate="yes" xml:space="preserve">
          <source>Some shells support recursive matching by using the &lt;code&gt;**&lt;/code&gt; wildcard in a glob. Bash &amp;gt;= 4.3 supports this with the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt;&lt;code&gt;globstar&lt;/code&gt; option&lt;/a&gt; which &lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;must be enabled&lt;/a&gt; to get the same results as passing the &lt;code&gt;--recursive&lt;/code&gt; option (&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt; support this by default). With recursive matching enabled, the following is the same as passing &lt;code&gt;--recursive&lt;/code&gt;:</source>
          <target state="translated">一部のシェルは、グロブで &lt;code&gt;**&lt;/code&gt; ワイルドカードを使用して再帰的マッチングをサポートしています。バッシュと&amp;gt; = 4.3がサポートこれを&lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt; &lt;code&gt;globstar&lt;/code&gt; のオプション&lt;/a&gt;&lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;を有効にする必要があります&lt;/a&gt;渡すのと同じ結果を得るために &lt;code&gt;--recursive&lt;/code&gt; （オプションを&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt;と&lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;魚は&lt;/a&gt;、デフォルトでこれをサポート）。再帰的マッチングを有効にすると、以下は &lt;code&gt;--recursive&lt;/code&gt; を渡すことと同じです。</target>
        </trans-unit>
        <trans-unit id="68c99b625528d51dbbda97411da51053ec41ceed" translate="yes" xml:space="preserve">
          <source>Some shells support recursive matching by using the globstar (&lt;code&gt;**&lt;/code&gt;) wildcard. Bash &amp;gt;= 4.3 supports this with the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt;&lt;code&gt;globstar&lt;/code&gt; option&lt;/a&gt; which &lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;must be enabled&lt;/a&gt; to get the same results as passing the &lt;code&gt;--recursive&lt;/code&gt; option (&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt; support this by default). With recursive matching enabled, the following is the same as passing &lt;code&gt;--recursive&lt;/code&gt;:</source>
          <target state="translated">Some shells support recursive matching by using the globstar ( &lt;code&gt;**&lt;/code&gt; ) wildcard. Bash &amp;gt;= 4.3 supports this with the &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html&quot;&gt; &lt;code&gt;globstar&lt;/code&gt; option&lt;/a&gt; which &lt;a href=&quot;https://github.com/mochajs/mocha/pull/3348#issuecomment-383937247&quot;&gt;must be enabled&lt;/a&gt; to get the same results as passing the &lt;code&gt;--recursive&lt;/code&gt; option (&lt;a href=&quot;http://zsh.sourceforge.net/Doc/Release/Expansion.html#Recursive-Globbing&quot;&gt;ZSH&lt;/a&gt; and &lt;a href=&quot;https://fishshell.com/docs/current/#expand-wildcard&quot;&gt;Fish&lt;/a&gt; support this by default). With recursive matching enabled, the following is the same as passing &lt;code&gt;--recursive&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c466f5a7311f3406efc466242ea0f79ed69b3030" translate="yes" xml:space="preserve">
          <source>Some types of tests are &lt;em&gt;not&lt;/em&gt; so well-suited to run in parallel. For example, extremely timing-sensitive tests, or tests which make I/O requests to a limited pool of resources (such as opening ports, or automating browser windows, hitting a test DB, or remote server, etc.).</source>
          <target state="translated">Some types of tests are &lt;em&gt;not&lt;/em&gt; so well-suited to run in parallel. For example, extremely timing-sensitive tests, or tests which make I/O requests to a limited pool of resources (such as opening ports, or automating browser windows, hitting a test DB, or remote server, etc.).</target>
        </trans-unit>
        <trans-unit id="8b0963c0b08d73b3c27d46c59538484136612c0e" translate="yes" xml:space="preserve">
          <source>Sort test files (by absolute path) using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;Array.prototype.sort&lt;/a&gt;.</source>
          <target state="translated">Sort test files (by absolute path) using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot;&gt;Array.prototype.sort&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8d89530314527c8d7d9d9cb95ec6f5bdd921a1b9" translate="yes" xml:space="preserve">
          <source>Spec</source>
          <target state="translated">Spec</target>
        </trans-unit>
        <trans-unit id="9b415cbf3c6d6e1b1fca4881c8d72b7f491a9a75" translate="yes" xml:space="preserve">
          <source>Specifies the test case timeout, defaulting to two (2) seconds (2000 milliseconds). Tests taking longer than this amount of time will be marked as failed.</source>
          <target state="translated">テストケースのタイムアウトを指定します。デフォルトは 2 秒 (2000 ミリ秒)です。この時間より長いテストは失敗としてマークされます。</target>
        </trans-unit>
        <trans-unit id="bc3e3590e34c5723bef3b0b8f869fa10928242fe" translate="yes" xml:space="preserve">
          <source>Specifies the test-case timeout, defaulting to 2 seconds. To override you may pass the timeout in milliseconds, or a value with the &lt;code&gt;s&lt;/code&gt; suffix, ex: &lt;code&gt;--timeout 2s&lt;/code&gt; or &lt;code&gt;--timeout 2000&lt;/code&gt; would be equivalent.</source>
          <target state="translated">テストケースのタイムアウトを指定します。デフォルトは2秒です。オーバーライドするには、タイムアウトをミリ秒単位で渡すか、接尾辞が &lt;code&gt;s&lt;/code&gt; の値を渡します。例：-- timeout &lt;code&gt;--timeout 2s&lt;/code&gt; または &lt;code&gt;--timeout 2000&lt;/code&gt; は同等です。</target>
        </trans-unit>
        <trans-unit id="bbc6e6211485d0e48ad0772d10769d1dc8b7e1cb" translate="yes" xml:space="preserve">
          <source>Specify an explicit path to a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;&lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt; (ostensibly containing configuration in a &lt;code&gt;mocha&lt;/code&gt; property).</source>
          <target state="translated">Specify an explicit path to a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; file&lt;/a&gt; (ostensibly containing configuration in a &lt;code&gt;mocha&lt;/code&gt; property).</target>
        </trans-unit>
        <trans-unit id="d0b4248bfba022dec509ab1dd2b821a1c601c898" translate="yes" xml:space="preserve">
          <source>Specify an explicit path to a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="translated">Specify an explicit path to a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration file&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7f7499c19bd41d4e91b1e49668a06a3e3e456aa8" translate="yes" xml:space="preserve">
          <source>Specify the &amp;ldquo;slow&amp;rdquo; test threshold in milliseconds. Mocha uses this to highlight test cases that are taking too long. &amp;ldquo;Slow&amp;rdquo; tests are not considered failures.</source>
          <target state="translated">Specify the &amp;ldquo;slow&amp;rdquo; test threshold in milliseconds. Mocha uses this to highlight test cases that are taking too long. &amp;ldquo;Slow&amp;rdquo; tests are not considered failures.</target>
        </trans-unit>
        <trans-unit id="98a2ec177a17b29fd0e23e1b0c56a42c28684fcb" translate="yes" xml:space="preserve">
          <source>Specify the &amp;ldquo;slow&amp;rdquo; test threshold, defaulting to 75ms. Mocha uses this to highlight test-cases that are taking too long.</source>
          <target state="translated">「遅い」テストしきい値を指定します。デフォルトは75msです。Mochaはこれを使用して、時間がかかりすぎるテストケースを強調表示します。</target>
        </trans-unit>
        <trans-unit id="4bd6358a505658da055c6097ae4cf0171a7ea2f0" translate="yes" xml:space="preserve">
          <source>Specify the reporter that will be used, defaulting to &lt;code&gt;spec&lt;/code&gt;.</source>
          <target state="translated">Specify the reporter that will be used, defaulting to &lt;code&gt;spec&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f356fa8fda7ec85397cfe67654ec87707495aa4" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;--extension&lt;/code&gt; will &lt;em&gt;remove&lt;/em&gt;&lt;code&gt;.js&lt;/code&gt; as a test file extension; use &lt;code&gt;--extension js&lt;/code&gt; to re-add it. For example, to load &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; test files, you must supply &lt;code&gt;--extension mjs --extension js&lt;/code&gt;.</source>
          <target state="translated">Specifying &lt;code&gt;--extension&lt;/code&gt; will &lt;em&gt;remove&lt;/em&gt; &lt;code&gt;.js&lt;/code&gt; as a test file extension; use &lt;code&gt;--extension js&lt;/code&gt; to re-add it. For example, to load &lt;code&gt;.mjs&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; test files, you must supply &lt;code&gt;--extension mjs --extension js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ab760041938fe0f99f4aa4d5801b855de0b183d" translate="yes" xml:space="preserve">
          <source>Starting with the &amp;ldquo;root&amp;rdquo; suite, Mocha executes:</source>
          <target state="translated">Starting with the &amp;ldquo;root&amp;rdquo; suite, Mocha executes:</target>
        </trans-unit>
        <trans-unit id="6c73fccb7fe636cee1ab6961e06dbbe94714876b" translate="yes" xml:space="preserve">
          <source>Suggested workarounds:</source>
          <target state="translated">提案された回避策。</target>
        </trans-unit>
        <trans-unit id="c4ceaad1f510ef5ea705ba3585d2de1d4a13cb21" translate="yes" xml:space="preserve">
          <source>Suite-level</source>
          <target state="translated">Suite-level</target>
        </trans-unit>
        <trans-unit id="de6db89ceed0133d6ad5521c06e4b825b9904621" translate="yes" xml:space="preserve">
          <source>Suite-level timeouts may be applied to entire test &amp;ldquo;suites&amp;rdquo;, or disabled via &lt;code&gt;this.timeout(0)&lt;/code&gt;. This will be inherited by all nested suites and test-cases that do not override the value.</source>
          <target state="translated">スイートレベルのタイムアウトは、テスト「スイート」全体に適用するか、 &lt;code&gt;this.timeout(0)&lt;/code&gt; を介して無効にすることができます。これは、値を上書きしないすべてのネストされたスイートとテストケースに継承されます。</target>
        </trans-unit>
        <trans-unit id="3c2ff3b3d96a22f0b23ce441a04c0a0c2fa45884" translate="yes" xml:space="preserve">
          <source>SuperAgent</source>
          <target state="translated">SuperAgent</target>
        </trans-unit>
        <trans-unit id="3c8dc3c357e48b97bb72efa9edaf9b8260cf8b2f" translate="yes" xml:space="preserve">
          <source>Suppose, for example, you have &amp;ldquo;api&amp;rdquo; related tests, as well as &amp;ldquo;app&amp;rdquo; related tests, as shown in the following snippet; One could use &lt;code&gt;--grep api&lt;/code&gt; or &lt;code&gt;--grep app&lt;/code&gt; to run one or the other. The same goes for any other part of a suite or test-case title, &lt;code&gt;--grep users&lt;/code&gt; would be valid as well, or even &lt;code&gt;--grep GET&lt;/code&gt;.</source>
          <target state="translated">たとえば、次のスニペットに示すように、「api」関連のテストと「app」関連のテストがあるとします。 &lt;code&gt;--grep api&lt;/code&gt; または &lt;code&gt;--grep app&lt;/code&gt; を使用して、どちらか一方を実行できます。スイートまたはテストケースのタイトルの他の部分についても同様です &lt;code&gt;--grep users&lt;/code&gt; も有効です &lt;code&gt;--grep GET&lt;/code&gt; も有効です。</target>
        </trans-unit>
        <trans-unit id="db4a04db5ccf9a8f908403383aa7476a2855f541" translate="yes" xml:space="preserve">
          <source>Synchronous Code</source>
          <target state="translated">同期コード</target>
        </trans-unit>
        <trans-unit id="fb7bc71b84dc9f961e5538c6dc0bfa7d98e5f671" translate="yes" xml:space="preserve">
          <source>TAP</source>
          <target state="translated">TAP</target>
        </trans-unit>
        <trans-unit id="a296b616f4529b6139114abe32f60836e9b40b52" translate="yes" xml:space="preserve">
          <source>TDD</source>
          <target state="translated">TDD</target>
        </trans-unit>
        <trans-unit id="25a384ac7f1ccbd1ae98fd61e3d4538dda73ffd4" translate="yes" xml:space="preserve">
          <source>TL;DR: If your tests hang after an upgrade to Mocha v4.0.0 or newer, use &lt;code&gt;--exit&lt;/code&gt; for a quick (though not necessarily recommended) fix.</source>
          <target state="translated">TL;DR: If your tests hang after an upgrade to Mocha v4.0.0 or newer, use &lt;code&gt;--exit&lt;/code&gt; for a quick (though not necessarily recommended) fix.</target>
        </trans-unit>
        <trans-unit id="4e5c1cb438afe66a7a3ce7f0162632afd0f40816" translate="yes" xml:space="preserve">
          <source>Take the following example:</source>
          <target state="translated">次のような例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="588c3b1c9652c548f1c6199935b4385b4dbbb56a" translate="yes" xml:space="preserve">
          <source>Test Duration Variability</source>
          <target state="translated">試験時間のばらつき</target>
        </trans-unit>
        <trans-unit id="a409f6715749fb7791d6ffd2aab513693cb9efe3" translate="yes" xml:space="preserve">
          <source>Test Fixture Decision-Tree Wizard Thing</source>
          <target state="translated">テストフィクスチャの決定木ウィザード</target>
        </trans-unit>
        <trans-unit id="d7d96b74e9a4844754af7453ceddbe412fc31872" translate="yes" xml:space="preserve">
          <source>Test duration</source>
          <target state="translated">テスト期間</target>
        </trans-unit>
        <trans-unit id="bb44ae6194c78c2c4be82582a5c6deacef63b80a" translate="yes" xml:space="preserve">
          <source>Test files can be specified using &lt;code&gt;spec&lt;/code&gt;, e.g., &lt;code&gt;&quot;spec&quot;: &quot;test/**/*.spec.js&quot;&lt;/code&gt;.</source>
          <target state="translated">Test files can be specified using &lt;code&gt;spec&lt;/code&gt; , e.g., &lt;code&gt;&quot;spec&quot;: &quot;test/**/*.spec.js&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be87d0d93a34c7b89bdaae494c3d7e44fe3f5756" translate="yes" xml:space="preserve">
          <source>Test harnesses</source>
          <target state="translated">テストハーネス</target>
        </trans-unit>
        <trans-unit id="9992314b32825a3bd8d55164b1d035efa115fc21" translate="yes" xml:space="preserve">
          <source>Test-level</source>
          <target state="translated">Test-level</target>
        </trans-unit>
        <trans-unit id="2da7e47e548df7e7571fdfa271f2a99f9c93ed57" translate="yes" xml:space="preserve">
          <source>Test-specific timeouts may also be applied, or the use of &lt;code&gt;this.timeout(0)&lt;/code&gt; to disable timeouts all together:</source>
          <target state="translated">テスト固有のタイムアウトを適用することも、 &lt;code&gt;this.timeout(0)&lt;/code&gt; を使用してタイムアウトをすべて無効にすることもできます。</target>
        </trans-unit>
        <trans-unit id="547d8ac3e28e4f0acda600f6e096dac65de667c6" translate="yes" xml:space="preserve">
          <source>Testing Mocha</source>
          <target state="translated">モカのテスト</target>
        </trans-unit>
        <trans-unit id="bab18b9734400748db3af2cebab49889718863f6" translate="yes" xml:space="preserve">
          <source>Testing asynchronous code with Mocha could not be simpler! Simply invoke the callback when your test is complete. By adding a callback (usually named &lt;code&gt;done&lt;/code&gt;) to &lt;code&gt;it()&lt;/code&gt;, Mocha will know that it should wait for this function to be called to complete the test. This callback accepts both an &lt;code&gt;Error&lt;/code&gt; instance (or subclass thereof) &lt;em&gt;or&lt;/em&gt; a falsy value; anything else will cause a failed test.</source>
          <target state="translated">Mochaを使用して非同期コードをテストすることは、これ以上簡単にはできません。テストが完了したら、コールバックを呼び出すだけです。 &lt;code&gt;it()&lt;/code&gt; にコールバック（通常は &lt;code&gt;done&lt;/code&gt; という名前）を追加することで、Mochaはこの関数が呼び出されてテストが完了するのを待つ必要があることを認識します。このコールバックは、 &lt;code&gt;Error&lt;/code&gt; インスタンス（またはそのサブクラス）&lt;em&gt;または&lt;/em&gt;偽の値の両方を受け入れます。それ以外の場合は、テストが失敗します。</target>
        </trans-unit>
        <trans-unit id="2a8a0fd2032a59ba64906f503a8fcf520c263411" translate="yes" xml:space="preserve">
          <source>Tests can appear before, after, or interspersed with your hooks. Hooks will run in the order they are defined, as appropriate; all &lt;code&gt;before()&lt;/code&gt; hooks run (once), then any &lt;code&gt;beforeEach()&lt;/code&gt; hooks, tests, any &lt;code&gt;afterEach()&lt;/code&gt; hooks, and finally &lt;code&gt;after()&lt;/code&gt; hooks (once).</source>
          <target state="translated">テストは、フックの前、後、またはフックの間に配置できます。フックは、必要に応じて、定義された順序で実行されます。すべての &lt;code&gt;before()&lt;/code&gt; フックが実行され（1回）、その後 &lt;code&gt;beforeEach()&lt;/code&gt; フック、テスト、 &lt;code&gt;afterEach()&lt;/code&gt; フック、最後に &lt;code&gt;after()&lt;/code&gt; フック（1回）。</target>
        </trans-unit>
        <trans-unit id="4cd657386f1f10000cd8cb1e2f49d4fb89929aba" translate="yes" xml:space="preserve">
          <source>Tests may be rerun manually by typing ⓡ ⓢ ⏎ (same shortcut as &lt;code&gt;nodemon&lt;/code&gt;).</source>
          <target state="translated">Tests may be rerun manually by typing ⓡ ⓢ ⏎ (same shortcut as &lt;code&gt;nodemon&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cb66034b6a518b97ae4eb07cdc2717ab088f1068" translate="yes" xml:space="preserve">
          <source>TextMate</source>
          <target state="translated">TextMate</target>
        </trans-unit>
        <trans-unit id="2c6457fc57c8740f5cc64bb2c936f816468641c5" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;HTML&amp;rdquo; reporter is what you see when running Mocha in the browser. It looks like this:</source>
          <target state="translated">「HTML」レポーターは、ブラウザでMochaを実行しているときに表示されるものです。次のようになります。</target>
        </trans-unit>
        <trans-unit id="5333d52961e14491540412769193ff75d5df45ca" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;JSON stream&amp;rdquo; reporter outputs newline-delimited JSON &amp;ldquo;events&amp;rdquo; as they occur, beginning with a &amp;ldquo;start&amp;rdquo; event, followed by test passes or failures, and then the final &amp;ldquo;end&amp;rdquo; event.</source>
          <target state="translated">「JSONストリーム」レポーターは、発生時に改行で区切られたJSON「イベント」を出力します。「開始」イベントで始まり、その後にテストの合格または失敗、最後の「終了」イベントが続きます。</target>
        </trans-unit>
        <trans-unit id="3368e20feab3c06a96a469ab2bad643063f723e3" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;JSON&amp;rdquo; reporter outputs a single large JSON object when the tests have completed (failures or not).</source>
          <target state="translated">「JSON」レポーターは、テストが完了した（失敗したかどうかにかかわらず）単一の大きなJSONオブジェクトを出力します。</target>
        </trans-unit>
        <trans-unit id="64c8c54c7f79b833030381e6e9717c6ff5bcf9be" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;doc&amp;rdquo; reporter outputs a hierarchical HTML body representation of your tests. Wrap it with a header, footer, and some styling, then you have some fantastic documentation!</source>
          <target state="translated">「doc」レポーターは、テストの階層的なHTML本文表現を出力します。ヘッダー、フッター、およびいくつかのスタイリングでそれをラップすると、素晴らしいドキュメントができます！</target>
        </trans-unit>
        <trans-unit id="0aad810ee8f2dec17d9ab81389da6967325218e4" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;list&amp;rdquo; reporter outputs a simple specifications list as test cases pass or fail, outputting the failure details at the bottom of the output.</source>
          <target state="translated">「リスト」レポーターは、テストケースが成功または失敗したときに単純な仕様リストを出力し、出力の下部に失敗の詳細を出力します。</target>
        </trans-unit>
        <trans-unit id="4f248694160214415f2b010680f15162b41fa9ec" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;markdown&amp;rdquo; reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example here is the Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;test output&lt;/a&gt;.</source>
          <target state="translated">「マークダウン」レポーターは、テストスイートのマークダウンTOCと本文を生成します。これは、Github wikiページ内のドキュメントとして、またはGithubがレンダリングできるリポジトリー内のマークダウンファイルとしてテストを使用する場合に最適です。たとえば、ここに接続&lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;テストの出力&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="e0d1db1adc546e3453bd023c105509dc9ff10741" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;min&amp;rdquo; reporter displays the summary only, while still outputting errors on failure. This reporter works great with &lt;code&gt;--watch&lt;/code&gt; as it clears the terminal in order to keep your test summary at the top.</source>
          <target state="translated">「min」レポーターは、失敗時にエラーを出力しながら、要約のみを表示します。このレポーターは、テストの概要を上部に保つためにターミナルをクリアする &lt;code&gt;--watch&lt;/code&gt; とうまく連携します。</target>
        </trans-unit>
        <trans-unit id="661986fe32882ea8bd3d2690dacc77d81f35edc9" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;nyan&amp;rdquo; reporter is exactly what you might expect:</source>
          <target state="translated">「nyan」レポーターはまさにあなたが期待するかもしれないものです：</target>
        </trans-unit>
        <trans-unit id="39ee7d9c094fb73922b809761d1bec30a6aee208" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;progress&amp;rdquo; reporter implements a simple progress-bar:</source>
          <target state="translated">「進行状況」レポーターは、単純な進行状況バーを実装します。</target>
        </trans-unit>
        <trans-unit id="e76788e19ec6051a119328dfc976ca6938c3df03" translate="yes" xml:space="preserve">
          <source>The (default) &lt;a href=&quot;#bdd&quot;&gt;bdd interface&lt;/a&gt; loads the test files &lt;em&gt;in no particular order&lt;/em&gt;, which are given an interface-specific &lt;code&gt;global&lt;/code&gt; context (this is how, e.g., &lt;code&gt;describe()&lt;/code&gt; ends up as a global in a test file)</source>
          <target state="translated">The (default) &lt;a href=&quot;#bdd&quot;&gt;bdd interface&lt;/a&gt; loads the test files &lt;em&gt;in no particular order&lt;/em&gt;, which are given an interface-specific &lt;code&gt;global&lt;/code&gt; context (this is how, e.g., &lt;code&gt;describe()&lt;/code&gt; ends up as a global in a test file)</target>
        </trans-unit>
        <trans-unit id="be7f0cfae842826207ddea8730297b59a89f272c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/mochajs/mocha.tmbundle&quot;&gt;Mocha TextMate bundle&lt;/a&gt; includes snippets to make writing tests quicker and more enjoyable.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mochajs/mocha.tmbundle&quot;&gt;モカTextMateのバンドルは、&lt;/a&gt;筆記テストはより速く、より楽しいものにするスニペットが含まれています。</target>
        </trans-unit>
        <trans-unit id="950b4f2098ee9a6022de133bca2fd3e30ab8b4cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit&lt;/a&gt;-inspired interface matches the &amp;ldquo;flat&amp;rdquo; look of QUnit, where the test suite title is simply defined before the test-cases. Like TDD, it uses &lt;code&gt;suite()&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt;, but resembling BDD, it also contains &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://qunitjs.com&quot;&gt;QUnit&lt;/a&gt; -inspiredインタフェースは、テストスイートのタイトルは単にテストケースの前に定義されてQUnit、の「フラット」な外観にマッチします。TDDと同様に、 &lt;code&gt;suite()&lt;/code&gt; および &lt;code&gt;test()&lt;/code&gt; を使用しますが、BDDに似ており、 &lt;code&gt;before()&lt;/code&gt; 、 &lt;code&gt;after()&lt;/code&gt; 、 &lt;code&gt;beforeEach()&lt;/code&gt; 、および &lt;code&gt;afterEach()&lt;/code&gt; も含まれています。</target>
        </trans-unit>
        <trans-unit id="5e8d4bc23b3186b509e21a513747c1a51f0371b2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt;-inspired interface matches the &amp;ldquo;flat&amp;rdquo; look of QUnit, where the test suite title is defined &lt;em&gt;before&lt;/em&gt; the test-cases. Like TDD, it uses &lt;code&gt;suite()&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt;, but resembling BDD, it also contains &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">The &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt;-inspired interface matches the &amp;ldquo;flat&amp;rdquo; look of QUnit, where the test suite title is defined &lt;em&gt;before&lt;/em&gt; the test-cases. Like TDD, it uses &lt;code&gt;suite()&lt;/code&gt; and &lt;code&gt;test()&lt;/code&gt; , but resembling BDD, it also contains &lt;code&gt;before()&lt;/code&gt; , &lt;code&gt;after()&lt;/code&gt; , &lt;code&gt;beforeEach()&lt;/code&gt; , and &lt;code&gt;afterEach()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0bcbec0f5943ef167d67d70d4e9e088446901237" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--grep&lt;/code&gt; option when specified will trigger mocha to only run tests matching the given &lt;code&gt;pattern&lt;/code&gt; which is internally compiled to a &lt;code&gt;RegExp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--grep&lt;/code&gt; 指定されたオプションが与えられたマッチングのみ実行テストにモカをトリガーする &lt;code&gt;pattern&lt;/code&gt; 内部にコンパイルされた &lt;code&gt;RegExp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f5d1ce5911c30ebbdbdee19275338c5b20db5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--reporter&lt;/code&gt; option allows you to specify the reporter that will be used, defaulting to &amp;ldquo;spec&amp;rdquo;. This flag may also be used to utilize third-party reporters. For example if you &lt;code&gt;npm install mocha-lcov-reporter&lt;/code&gt; you may then do &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--reporter&lt;/code&gt; オプションは、「仕様」をデフォルト、使用されるレポーターを指定することができます。このフラグは、サードパーティのレポーターを利用するためにも使用できます。あなたはたとえば &lt;code&gt;npm install mocha-lcov-reporter&lt;/code&gt; あなたは、行うことができ &lt;code&gt;--reporter mocha-lcov-reporter&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b837e62d6ccb34aba9ee913d1bd84721c5ee4971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--require&lt;/code&gt; option is useful for libraries such as &lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt;, so you may simply &lt;code&gt;--require should&lt;/code&gt; instead of manually invoking &lt;code&gt;require('should')&lt;/code&gt; within each test file. Note that this works well for &lt;code&gt;should&lt;/code&gt; as it augments &lt;code&gt;Object.prototype&lt;/code&gt;, however if you wish to access a module&amp;rsquo;s exports you will have to require them, for example &lt;code&gt;var should = require('should')&lt;/code&gt;. Furthermore, it can be used with relative paths, e.g. &lt;code&gt;--require ./test/helper.js&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--require&lt;/code&gt; オプションは、次のようなライブラリに便利です&lt;a href=&quot;https://github.com/shouldjs/should.js&quot;&gt;should.js&lt;/a&gt;あなたは、単にかもしれので、 &lt;code&gt;--require should&lt;/code&gt; 呼び出す代わりに、手動で &lt;code&gt;require('should')&lt;/code&gt; それぞれのテストファイル内。これは &lt;code&gt;Object.prototype&lt;/code&gt; を補強するので、 &lt;code&gt;should&lt;/code&gt; でうまく機能することに注意してください。ただし、モジュールのエクスポートにアクセスする場合は、それらを要求する必要があります。たとえば、 &lt;code&gt;var should = require('should')&lt;/code&gt; ます。さらに、相対パスとともに使用できます。例 &lt;code&gt;--require ./test/helper.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c95a6e8fa7be939b839ec9ed431e8bb4e972c5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--ui&lt;/code&gt; option lets you specify the interface to use, defaulting to &amp;ldquo;bdd&amp;rdquo;.</source>
          <target state="translated">&lt;code&gt;--ui&lt;/code&gt; オプションは、「BDD」をデフォルト、使用するインターフェイスを指定できます。</target>
        </trans-unit>
        <trans-unit id="b1edc89c7fe564706a5b5d76867e92a339ecf9c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--ui&lt;/code&gt; option lets you specify the interface to use, defaulting to &lt;code&gt;bdd&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;--ui&lt;/code&gt; option lets you specify the interface to use, defaulting to &lt;code&gt;bdd&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38cc75a7c19163e1a872194323cafcf1246da6fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--watch-files&lt;/code&gt; and &lt;code&gt;--watch-ignore&lt;/code&gt; options can be used to control which files are watched for changes.</source>
          <target state="translated">The &lt;code&gt;--watch-files&lt;/code&gt; and &lt;code&gt;--watch-ignore&lt;/code&gt; options can be used to control which files are watched for changes.</target>
        </trans-unit>
        <trans-unit id="1ce777f0d03e959a20192aff992bbab8375d889c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mocha&lt;/code&gt; executable supports all applicable flags which the &lt;code&gt;node&lt;/code&gt; executable supports.</source>
          <target state="translated">The &lt;code&gt;mocha&lt;/code&gt; executable supports all applicable flags which the &lt;code&gt;node&lt;/code&gt; executable supports.</target>
        </trans-unit>
        <trans-unit id="c9edaa4bc7f927943c6a1ff634f69ebb2ef69a16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; interface allows you to require the &lt;code&gt;describe&lt;/code&gt; and friend words directly using &lt;code&gt;require&lt;/code&gt; and call them whatever you want. This interface is also useful if you want to avoid global variables in your tests.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; インターフェースはあなたが必要とすることを可能にする &lt;code&gt;describe&lt;/code&gt; を直接使用すると、友人の言葉 &lt;code&gt;require&lt;/code&gt; し、あなたが望むものは何でもそれらを呼び出します。このインターフェイスは、テストでグローバル変数を使用したくない場合にも役立ちます。</target>
        </trans-unit>
        <trans-unit id="7bf2c17fd8b3b553c9cde160ac5358d9bb3aee1c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test/&lt;/code&gt; Directory</source>
          <target state="translated">&lt;code&gt;test/&lt;/code&gt; ディレクトリ</target>
        </trans-unit>
        <trans-unit id="7c70715d9a9f5600b6ff4177f08406292ceafebe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xunit&lt;/code&gt; reporter is also available. It outputs an XUnit-compatible XML document, often applicable in CI servers.</source>
          <target state="translated">&lt;code&gt;xunit&lt;/code&gt; 記者も可能です。XUnit互換のXMLドキュメントを出力します。CIドキュメントでよく使用されます。</target>
        </trans-unit>
        <trans-unit id="795957d437f7bed7be9ed30dac8838682cafc69f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;default behavior&lt;/em&gt; in v4.0.0 (and newer) is &lt;code&gt;--no-exit&lt;/code&gt;, where previously it was &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">The &lt;em&gt;default behavior&lt;/em&gt; in v4.0.0 (and newer) is &lt;code&gt;--no-exit&lt;/code&gt; , where previously it was &lt;code&gt;--exit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b37a40988604936193e8ed0680d361779e5c577" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;default behavior&lt;/em&gt; in v4.0.0 is &lt;code&gt;--no-exit&lt;/code&gt;, where previously it was &lt;code&gt;--exit&lt;/code&gt;.</source>
          <target state="translated">v4.0.0 の&lt;em&gt;デフォルトの動作&lt;/em&gt;は &lt;code&gt;--no-exit&lt;/code&gt; で、以前は &lt;code&gt;--exit&lt;/code&gt; でした。</target>
        </trans-unit>
        <trans-unit id="c763b13298e1fb9caa00fce37d979e4c5d9f789c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;BDD&lt;/strong&gt; interface provides &lt;code&gt;describe()&lt;/code&gt;, &lt;code&gt;context()&lt;/code&gt;, &lt;code&gt;it()&lt;/code&gt;, &lt;code&gt;specify()&lt;/code&gt;, &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;BDDの&lt;/strong&gt;インタフェースが提供する &lt;code&gt;describe()&lt;/code&gt; 、 &lt;code&gt;context()&lt;/code&gt; 、 &lt;code&gt;it()&lt;/code&gt; ）（ &lt;code&gt;specify()&lt;/code&gt; 、 &lt;code&gt;before()&lt;/code&gt; 、 &lt;code&gt;after()&lt;/code&gt; 、 &lt;code&gt;beforeEach()&lt;/code&gt; 、及び &lt;code&gt;afterEach()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9598d1f67c84a73ecf1910adbcd35914585a841a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Exports&lt;/strong&gt; interface is much like Mocha&amp;rsquo;s predecessor &lt;a href=&quot;https://github.com/tj/expresso&quot;&gt;expresso&lt;/a&gt;. The keys &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;beforeEach&lt;/code&gt;, and &lt;code&gt;afterEach&lt;/code&gt; are special-cased, object values are suites, and function values are test-cases:</source>
          <target state="translated">&lt;strong&gt;輸出の&lt;/strong&gt;インターフェースは非常にモカの前身のようなものです&lt;a href=&quot;https://github.com/tj/expresso&quot;&gt;エスプレッソ&lt;/a&gt;。キー &lt;code&gt;before&lt;/code&gt; 、 &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;beforeEach&lt;/code&gt; 、および &lt;code&gt;afterEach&lt;/code&gt; は特殊ケースに入れている、オブジェクトの値はスイートであり、関数値は、テスト・ケースです。</target>
        </trans-unit>
        <trans-unit id="e699cb022e1a1575f3e999f496d5f126cbc6b954" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;TDD&lt;/strong&gt; interface provides &lt;code&gt;suite()&lt;/code&gt;, &lt;code&gt;test()&lt;/code&gt;, &lt;code&gt;suiteSetup()&lt;/code&gt;, &lt;code&gt;suiteTeardown()&lt;/code&gt;, &lt;code&gt;setup()&lt;/code&gt;, and &lt;code&gt;teardown()&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;TDDの&lt;/strong&gt;インタフェースは、提供 &lt;code&gt;suite()&lt;/code&gt; 、 &lt;code&gt;test()&lt;/code&gt; 、 &lt;code&gt;suiteSetup()&lt;/code&gt; 、 &lt;code&gt;suiteTeardown()&lt;/code&gt; 、 &lt;code&gt;setup()&lt;/code&gt; 、及び &lt;code&gt;teardown()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="830b0fc8f8afd43efd9aed077a8ca360b86e2f68" translate="yes" xml:space="preserve">
          <source>The Doc reporter outputs a hierarchical HTML body representation of your tests. Wrap it with a header, footer, and some styling, then you have some fantastic documentation!</source>
          <target state="translated">Doc レポーターは、テストの階層的な HTML ボディ表現を出力します。ヘッダー、フッター、スタイリングでラップすると、素晴らしいドキュメントができあがります!</target>
        </trans-unit>
        <trans-unit id="3f2b6c93bffa4a0044804b871f7037908517aad8" translate="yes" xml:space="preserve">
          <source>The Dot Matrix reporter is a series of characters which represent test cases. Failures highlight in red exclamation marks (&lt;code&gt;!&lt;/code&gt;), pending tests with a blue comma (&lt;code&gt;,&lt;/code&gt;), and slow tests as yellow. Good if you prefer minimal output.</source>
          <target state="translated">The Dot Matrix reporter is a series of characters which represent test cases. Failures highlight in red exclamation marks ( &lt;code&gt;!&lt;/code&gt; ), pending tests with a blue comma ( &lt;code&gt;,&lt;/code&gt; ), and slow tests as yellow. Good if you prefer minimal output.</target>
        </trans-unit>
        <trans-unit id="df769f8a33a4902e762cd3290422c98020786564" translate="yes" xml:space="preserve">
          <source>The HTML reporter is the default reporter when running Mocha in the browser. It looks like this:</source>
          <target state="translated">HTMLレポーターは、ブラウザでMochaを実行したときのデフォルトのレポーターです。それは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ef1a4e44ce0e435b5a05e2c31e12e9467abbb459" translate="yes" xml:space="preserve">
          <source>The JSON Stream reporter outputs newline-delimited JSON &amp;ldquo;events&amp;rdquo; as they occur, beginning with a &amp;ldquo;start&amp;rdquo; event, followed by test passes or failures, and then the final &amp;ldquo;end&amp;rdquo; event.</source>
          <target state="translated">The JSON Stream reporter outputs newline-delimited JSON &amp;ldquo;events&amp;rdquo; as they occur, beginning with a &amp;ldquo;start&amp;rdquo; event, followed by test passes or failures, and then the final &amp;ldquo;end&amp;rdquo; event.</target>
        </trans-unit>
        <trans-unit id="406c1fd444c21b8add378841843b14ba958c5b1d" translate="yes" xml:space="preserve">
          <source>The JSON reporter outputs a single large JSON object when the tests have completed (failures or not).</source>
          <target state="translated">JSONレポーターは、テストが完了した(失敗したかどうか)ときに、1つの大きなJSONオブジェクトを出力します。</target>
        </trans-unit>
        <trans-unit id="ad4c565465894c8ee61e971557b761d7a88df144" translate="yes" xml:space="preserve">
          <source>The Landing Strip (&lt;code&gt;landing&lt;/code&gt;) reporter is a gimmicky test reporter simulating a plane landing :) unicode ftw</source>
          <target state="translated">Landing Strip（ &lt;code&gt;landing&lt;/code&gt; ）レポーターは、飛行機の着陸をシミュレートするギミックなテストレポーターです:) unicode ftw</target>
        </trans-unit>
        <trans-unit id="d3bc12af6104616d59accd665c3d868a004e7485" translate="yes" xml:space="preserve">
          <source>The Landing Strip reporter is a gimmicky test reporter simulating a plane landing 😃 unicode ftw</source>
          <target state="translated">着陸レポーターは飛行機の着陸をシミュレートしたギミックテストレポーターです 😃 unicode ftw</target>
        </trans-unit>
        <trans-unit id="3d337d382f3f8f980ab8f4dcfd762d84338b8153" translate="yes" xml:space="preserve">
          <source>The List reporter outputs a simple specifications list as test cases pass or fail, outputting the failure details at the bottom of the output.</source>
          <target state="translated">リストレポーターは、テストケースの合否に応じて簡単な仕様リストを出力し、出力の一番下に失敗の詳細を出力します。</target>
        </trans-unit>
        <trans-unit id="98fdddcdbad7d687f3cd617d0ca5f8b5eb02f47f" translate="yes" xml:space="preserve">
          <source>The Markdown reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example, here is the Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;test output&lt;/a&gt;.</source>
          <target state="translated">The Markdown reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example, here is the Connect &lt;a href=&quot;https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md&quot;&gt;test output&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0968f17769bf8b1e7ebe17caef4153e5d65efd57" translate="yes" xml:space="preserve">
          <source>The Min reporter displays the summary only, while still outputting errors on failure. This reporter works great with &lt;code&gt;--watch&lt;/code&gt; as it clears the terminal in order to keep your test summary at the top.</source>
          <target state="translated">The Min reporter displays the summary only, while still outputting errors on failure. This reporter works great with &lt;code&gt;--watch&lt;/code&gt; as it clears the terminal in order to keep your test summary at the top.</target>
        </trans-unit>
        <trans-unit id="a5fcec24d487af057752a6be394fd2b7e9250f50" translate="yes" xml:space="preserve">
          <source>The Nyan reporter is exactly what you might expect:</source>
          <target state="translated">ニャン記者はまさにその通り。</target>
        </trans-unit>
        <trans-unit id="8cea05e18999fd159dfe4d8ec2cc100e8444f0f8" translate="yes" xml:space="preserve">
          <source>The Progress reporter implements a simple progress-bar:</source>
          <target state="translated">プログレスレポーターはシンプルなプログレスバーを実装しています。</target>
        </trans-unit>
        <trans-unit id="eba3b26cd15b029054ccfea1e07e24021de410dc" translate="yes" xml:space="preserve">
          <source>The SuperAgent request library &lt;a href=&quot;https://visionmedia.github.io/superagent/docs/test.html&quot;&gt;test documentation&lt;/a&gt; was generated with Mocha&amp;rsquo;s doc reporter using this Bash command:</source>
          <target state="translated">SuperAgentリクエストライブラリの&lt;a href=&quot;https://visionmedia.github.io/superagent/docs/test.html&quot;&gt;テストドキュメント&lt;/a&gt;は、次のBashコマンドを使用して、Mochaのドキュメントレポーターで生成されました。</target>
        </trans-unit>
        <trans-unit id="1e1aa347e3007252705de1fb497adc5b25ccab0c" translate="yes" xml:space="preserve">
          <source>The TAP reporter emits lines for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Test_Anything_Protocol&quot;&gt;Test-Anything-Protocol&lt;/a&gt; consumer.</source>
          <target state="translated">TAPレポーターは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Test_Anything_Protocol&quot;&gt;Test-Anything-Protocol&lt;/a&gt;コンシューマーに対して行を発行します。</target>
        </trans-unit>
        <trans-unit id="9ece51749c4c1325a8c11a66410fcffb4ce34ebc" translate="yes" xml:space="preserve">
          <source>The XUnit reporter is also available. It outputs an XUnit-compatible XML document, often applicable in CI servers.</source>
          <target state="translated">XUnit レポーターも利用できます。XUnit と互換性のある XML ドキュメントを出力します。</target>
        </trans-unit>
        <trans-unit id="db8032248965c09d3c38c18fd4d34750b613f87a" translate="yes" xml:space="preserve">
          <source>The above code will produce a suite with three specs:</source>
          <target state="translated">上記のコードでは、3つのスペックを持つスイートが生成されます。</target>
        </trans-unit>
        <trans-unit id="565ecc014c359d6d8748abc8825f30c68254f333" translate="yes" xml:space="preserve">
          <source>The above test will be reported as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;. It&amp;rsquo;s also important to note that calling &lt;code&gt;this.skip()&lt;/code&gt; will effectively &lt;em&gt;abort&lt;/em&gt; the test.</source>
          <target state="translated">上記のテストは&lt;a href=&quot;#pending-tests&quot;&gt;保留中&lt;/a&gt;として報告されます。 &lt;code&gt;this.skip()&lt;/code&gt; を呼び出すと、テストが効果的に&lt;em&gt;中止さ&lt;/em&gt;れることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="d2dd497c39681e399376a5d4b169a7504f7c7d8f" translate="yes" xml:space="preserve">
          <source>The above test will fail with &lt;code&gt;Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.&lt;/code&gt;. In versions older than v3.0.0, the call to &lt;code&gt;done()&lt;/code&gt; is effectively ignored.</source>
          <target state="translated">上記のテストは &lt;code&gt;Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.&lt;/code&gt; 失敗します。解決方法が指定されすぎています。コールバックを指定*または* Promiseを返します。両方ではありません。。v3.0.0より古いバージョンでは、 &lt;code&gt;done()&lt;/code&gt; の呼び出しは事実上無視されます。</target>
        </trans-unit>
        <trans-unit id="a241b6cc077b36452b7f07c4225946989798ecf5" translate="yes" xml:space="preserve">
          <source>The browser may use the &lt;code&gt;--grep&lt;/code&gt; as functionality. Append a query-string to your URL: &lt;code&gt;?grep=api&lt;/code&gt;.</source>
          <target state="translated">ブラウザは &lt;code&gt;--grep&lt;/code&gt; を機能として使用できます。クエリ文字列をURLに &lt;code&gt;?grep=api&lt;/code&gt; ます：？grep = api。</target>
        </trans-unit>
        <trans-unit id="f45d77921e402759985d1c018e180499c835b031" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;mocha --reporter doc array&lt;/code&gt; would yield:</source>
          <target state="translated">コマンド &lt;code&gt;mocha --reporter doc array&lt;/code&gt; を実行すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="dcf236dc5ecfea331b5a52438d08e63a8d9ba3a2" translate="yes" xml:space="preserve">
          <source>The default value is the &lt;em&gt;number of CPU cores&lt;/em&gt; less 1.</source>
          <target state="translated">The default value is the &lt;em&gt;number of CPU cores&lt;/em&gt; less 1.</target>
        </trans-unit>
        <trans-unit id="5f7afc116111ee3a0af1a9b5d7649a87db9b33d9" translate="yes" xml:space="preserve">
          <source>The dot matrix (or &amp;ldquo;dot&amp;rdquo;) reporter is simply a series of characters which represent test cases. Failures highlight in red exclamation marks (&lt;code&gt;!&lt;/code&gt;), pending tests with a blue comma (&lt;code&gt;,&lt;/code&gt;), and slow tests as yellow. Good if you prefer minimal output.</source>
          <target state="translated">ドットマトリックス（または「ドット」）レポーターは、テストケースを表す一連の文字です。失敗は赤い感嘆符（ &lt;code&gt;!&lt;/code&gt; ）で強調表示され、保留中のテストは青いコンマ（ &lt;code&gt;,&lt;/code&gt; ）で保留され、遅いテストは黄色で強調表示されます。出力を最小限にしたい場合に適しています。</target>
        </trans-unit>
        <trans-unit id="18c2a13535cef8cc9c7c5aa8dbed597228314d82" translate="yes" xml:space="preserve">
          <source>The exclusivity feature allows you to run &lt;em&gt;only&lt;/em&gt; the specified suite or test-case by appending &lt;code&gt;.only()&lt;/code&gt; to the function. Here&amp;rsquo;s an example of executing only a particular suite:</source>
          <target state="translated">排他機能を使用すると、関数に &lt;code&gt;.only()&lt;/code&gt; を追加することで、指定したスイートまたはテストケース&lt;em&gt;のみ&lt;/em&gt;を実行できます。次に、特定のスイートのみを実行する例を示します。</target>
        </trans-unit>
        <trans-unit id="345c002964155b4ecb8800d430c5a697a4f87083" translate="yes" xml:space="preserve">
          <source>The following editor-related packages are available:</source>
          <target state="translated">エディタ関連のパッケージは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="51d02ab791db0512c43f05aa790be912fbe7321d" translate="yes" xml:space="preserve">
          <source>The following is a mid-level outline of Mocha&amp;rsquo;s &amp;ldquo;flow of execution&amp;rdquo; when run in Node.js; the &amp;ldquo;less important&amp;rdquo; details have been omitted.</source>
          <target state="translated">The following is a mid-level outline of Mocha&amp;rsquo;s &amp;ldquo;flow of execution&amp;rdquo; when run in Node.js; the &amp;ldquo;less important&amp;rdquo; details have been omitted.</target>
        </trans-unit>
        <trans-unit id="8c066e5de249b831fcb1a137433b90c38715e5a5" translate="yes" xml:space="preserve">
          <source>The following method(s) &lt;em&gt;only&lt;/em&gt; function in a browser context:</source>
          <target state="translated">次のメソッドは、ブラウザコンテキストで&lt;em&gt;のみ&lt;/em&gt;機能します。</target>
        </trans-unit>
        <trans-unit id="447ede2a00c21abc1ae5460592695448444ebb10" translate="yes" xml:space="preserve">
          <source>The following option(s) &lt;em&gt;only&lt;/em&gt; function in a browser context:</source>
          <target state="translated">次のオプションは、ブラウザコンテキストで&lt;em&gt;のみ&lt;/em&gt;機能します。</target>
        </trans-unit>
        <trans-unit id="2b9f45fc951a3f573a3abefe11f51cb8bbe4c380" translate="yes" xml:space="preserve">
          <source>The latter example uses &lt;a href=&quot;https://www.npmjs.com/package/chai-as-promised&quot;&gt;Chai as Promised&lt;/a&gt; for fluent promise assertions.</source>
          <target state="translated">後者の例では、流暢な約束の表明が&lt;a href=&quot;https://www.npmjs.com/package/chai-as-promised&quot;&gt;約束さ&lt;/a&gt;れたChaiを使用しています。</target>
        </trans-unit>
        <trans-unit id="802ceff010c366f7513ae9f2a1750f92540980f4" translate="yes" xml:space="preserve">
          <source>The lines in this file are prepended to any actual command-line arguments. As such, actual command-line arguments will take precedence over the defaults.</source>
          <target state="translated">このファイルの行は、実際のコマンドライン引数の前に付加されています。そのため、実際のコマンドライン引数はデフォルトよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="93d468ddbf4c27568d84a852ebaf9a673f868783" translate="yes" xml:space="preserve">
          <source>The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--extension a,b&lt;/code&gt; is equivalent to &lt;code&gt;--extension a --extension b&lt;/code&gt;.</source>
          <target state="translated">The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--extension a,b&lt;/code&gt; is equivalent to &lt;code&gt;--extension a --extension b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2666cbb79f0b311917381014ebd20e3da2010543" translate="yes" xml:space="preserve">
          <source>The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--watch-files a,b&lt;/code&gt; is equivalent to &lt;code&gt;--watch-files a --watch-files b&lt;/code&gt;</source>
          <target state="translated">The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--watch-files a,b&lt;/code&gt; is equivalent to &lt;code&gt;--watch-files a --watch-files b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ddd7202cb2421332dda4657caec458f236ae3917" translate="yes" xml:space="preserve">
          <source>The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--watch-ignore a,b&lt;/code&gt; is equivalent to &lt;code&gt;--watch-ignore a --watch-ignore b&lt;/code&gt;</source>
          <target state="translated">The option can be given multiple times. The option accepts a comma-delimited list: &lt;code&gt;--watch-ignore a,b&lt;/code&gt; is equivalent to &lt;code&gt;--watch-ignore a --watch-ignore b&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6fafdc37c0c812465c5b779825d606227ed3c0b" translate="yes" xml:space="preserve">
          <source>The plugin is titled &lt;strong&gt;NodeJS&lt;/strong&gt;, and can be installed via &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Plugins&lt;/strong&gt;, assuming your license allows it.</source>
          <target state="translated">プラグインの名前は&lt;strong&gt;NodeJSで&lt;/strong&gt;、ライセンスで許可されている場合は、[ &lt;strong&gt;設定]&lt;/strong&gt; &amp;gt; [ &lt;strong&gt;プラグイン&lt;/strong&gt;&lt;strong&gt;]&lt;/strong&gt;からインストールできます。</target>
        </trans-unit>
        <trans-unit id="ff3f53522b46c827c4ab4a8231b5511e5bd9d7f6" translate="yes" xml:space="preserve">
          <source>The settings above will default the reporter to &lt;code&gt;dot&lt;/code&gt;, require the &lt;code&gt;should&lt;/code&gt; library, and use &lt;code&gt;bdd&lt;/code&gt; as the interface. With this, you may then invoke &lt;code&gt;mocha&lt;/code&gt; with additional arguments, here enabling &lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt; support, and changing the reporter to &lt;code&gt;list&lt;/code&gt;:</source>
          <target state="translated">上記の設定では、デフォルトでレポーターが &lt;code&gt;dot&lt;/code&gt; になり、 &lt;code&gt;should&lt;/code&gt; ライブラリーが必要になり、インターフェースとして &lt;code&gt;bdd&lt;/code&gt; を使用します。これにより、追加の引数で &lt;code&gt;mocha&lt;/code&gt; を呼び出すことができます。ここでは&lt;a href=&quot;http://growl.info/&quot;&gt;Growl&lt;/a&gt;サポートを有効にし、レポーターを &lt;code&gt;list&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="7c00eca11482abbfd0db893f79dde9ca4133138d" translate="yes" xml:space="preserve">
          <source>The test (and reports the result)</source>
          <target state="translated">テスト(とその結果を報告する</target>
        </trans-unit>
        <trans-unit id="74c14ebd3cffb48c3668201eb3d66bbad116c502" translate="yes" xml:space="preserve">
          <source>The test/ Directory</source>
          <target state="translated">テスト/ディレクトリ</target>
        </trans-unit>
        <trans-unit id="5d36c15876d8afca425f320cb9ac630137cba67a" translate="yes" xml:space="preserve">
          <source>The worker makes itself available to the pool; the pool gives the worker another test file to run, if any remain</source>
          <target state="translated">ワーカーはプールに自分自身を利用可能にします。プールはワーカーに別のテストファイルを実行させます。</target>
        </trans-unit>
        <trans-unit id="557e7a270f868e0998a5df1fe3ffe0c356b8f1b4" translate="yes" xml:space="preserve">
          <source>The worker repeats step 10 from &lt;a href=&quot;#serial-mode&quot;&gt;above&lt;/a&gt;, with the caveat that the worker &lt;em&gt;does not&lt;/em&gt; report test results directly; it holds them in a memory buffer</source>
          <target state="translated">The worker repeats step 10 from &lt;a href=&quot;#serial-mode&quot;&gt;above&lt;/a&gt;, with the caveat that the worker &lt;em&gt;does not&lt;/em&gt; report test results directly; it holds them in a memory buffer</target>
        </trans-unit>
        <trans-unit id="de10cff74e573ed1f9382b6e950b736132e2ac3f" translate="yes" xml:space="preserve">
          <source>The worker repeats step 8 from &lt;a href=&quot;#serial-mode&quot;&gt;above&lt;/a&gt;</source>
          <target state="translated">The worker repeats step 8 from &lt;a href=&quot;#serial-mode&quot;&gt;above&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56bc4260522d50687c27d129cd0392807c1034ea" translate="yes" xml:space="preserve">
          <source>Then run tests with:</source>
          <target state="translated">その後、テストを実行します。</target>
        </trans-unit>
        <trans-unit id="888cee595116e62dfd1a0a15d9c7587098850520" translate="yes" xml:space="preserve">
          <source>Then, connect to the server in your tests:</source>
          <target state="translated">そして、テスト中のサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="78adcdad6bf46019e7a916bfc60101e301197b36" translate="yes" xml:space="preserve">
          <source>There are three levels of test duration (depicted in the following image):</source>
          <target state="translated">試験期間には3つのレベルがあります(以下の画像のように描かれています)。</target>
        </trans-unit>
        <trans-unit id="07d70e1b6bd11b2fea0a53664b0850699a64eefd" translate="yes" xml:space="preserve">
          <source>There are two types of global fixtures: &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixtures&lt;/a&gt; and &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;global teardown fixtures&lt;/a&gt;.</source>
          <target state="translated">There are two types of global fixtures: &lt;a href=&quot;#global-setup-fixtures&quot;&gt;global setup fixtures&lt;/a&gt; and &lt;a href=&quot;#global-teardown-fixtures&quot;&gt;global teardown fixtures&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a65c25e2abfddb1ac438ae3b8cbcd78cc5ebb1fa" translate="yes" xml:space="preserve">
          <source>These flags vary depending on your version of Node.js.</source>
          <target state="translated">これらのフラグはNode.jsのバージョンによって異なります。</target>
        </trans-unit>
        <trans-unit id="226ac76d4d2337b3a2f0a70b4976629ba9f5c72e" translate="yes" xml:space="preserve">
          <source>These reporters expect Mocha to know &lt;em&gt;how many tests it plans to run&lt;/em&gt; before execution. This information is unavailable in parallel mode, as test files are loaded only when they are about to be run.</source>
          <target state="translated">These reporters expect Mocha to know &lt;em&gt;how many tests it plans to run&lt;/em&gt; before execution. This information is unavailable in parallel mode, as test files are loaded only when they are about to be run.</target>
        </trans-unit>
        <trans-unit id="69262a2b56999cfe1e9fdda96faf079263c46e51" translate="yes" xml:space="preserve">
          <source>Third-Party Reporters</source>
          <target state="translated">第三者報告者</target>
        </trans-unit>
        <trans-unit id="31f504d6d3d58578abe733a3b0c8d3b08794bae9" translate="yes" xml:space="preserve">
          <source>Third-party reporters may encounter issues when attempting to access non-existent properties within &lt;code&gt;Test&lt;/code&gt;, &lt;code&gt;Suite&lt;/code&gt;, and &lt;code&gt;Hook&lt;/code&gt; objects. If a third-party reporter does not work in parallel mode (but otherwise works in serial mode), please &lt;a href=&quot;https://github.com/mochajs/mocha/issues/new&quot;&gt;file an issue&lt;/a&gt;.</source>
          <target state="translated">Third-party reporters may encounter issues when attempting to access non-existent properties within &lt;code&gt;Test&lt;/code&gt; , &lt;code&gt;Suite&lt;/code&gt; , and &lt;code&gt;Hook&lt;/code&gt; objects. If a third-party reporter does not work in parallel mode (but otherwise works in serial mode), please &lt;a href=&quot;https://github.com/mochajs/mocha/issues/new&quot;&gt;file an issue&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7939bc5c6712cd9ba0c108140dcbed3f31c76456" translate="yes" xml:space="preserve">
          <source>This feature does re-run &lt;code&gt;beforeEach/afterEach&lt;/code&gt; hooks but not &lt;code&gt;before/after&lt;/code&gt; hooks.</source>
          <target state="translated">この機能は、再実行してい &lt;code&gt;beforeEach/afterEach&lt;/code&gt; フックではなく、 &lt;code&gt;before/after&lt;/code&gt; のフック。</target>
        </trans-unit>
        <trans-unit id="1eb6aa5c23f3116d4128611741ca3d616ee3efc1" translate="yes" xml:space="preserve">
          <source>This feature does re-run a failed test and its corresponding &lt;code&gt;beforeEach/afterEach&lt;/code&gt; hooks, but not &lt;code&gt;before/after&lt;/code&gt; hooks. &lt;code&gt;this.retries()&lt;/code&gt; has no effect on failing hooks.</source>
          <target state="translated">This feature does re-run a failed test and its corresponding &lt;code&gt;beforeEach/afterEach&lt;/code&gt; hooks, but not &lt;code&gt;before/after&lt;/code&gt; hooks. &lt;code&gt;this.retries()&lt;/code&gt; has no effect on failing hooks.</target>
        </trans-unit>
        <trans-unit id="bbbc3f90b39f6af209ced7adcc342d6b76c31701" translate="yes" xml:space="preserve">
          <source>This feature is the inverse of &lt;code&gt;.only()&lt;/code&gt;. By appending &lt;code&gt;.skip()&lt;/code&gt;, you may tell Mocha to ignore test case(s). Anything skipped will be marked as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;, and reported as such. Here&amp;rsquo;s an example of skipping an individual test:</source>
          <target state="translated">This feature is the inverse of &lt;code&gt;.only()&lt;/code&gt; . By appending &lt;code&gt;.skip()&lt;/code&gt; , you may tell Mocha to ignore test case(s). Anything skipped will be marked as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;, and reported as such. Here&amp;rsquo;s an example of skipping an individual test:</target>
        </trans-unit>
        <trans-unit id="60707f6239eafe97ee7fca274db835f26058a03c" translate="yes" xml:space="preserve">
          <source>This feature is the inverse of &lt;code&gt;.only()&lt;/code&gt;. By appending &lt;code&gt;.skip()&lt;/code&gt;, you may tell Mocha to simply ignore these suite(s) and test case(s). Anything skipped will be marked as &lt;a href=&quot;#pending-tests&quot;&gt;pending&lt;/a&gt;, and reported as such. Here&amp;rsquo;s an example of skipping an entire suite:</source>
          <target state="translated">この機能は &lt;code&gt;.only()&lt;/code&gt; の逆です。 &lt;code&gt;.skip()&lt;/code&gt; を追加することで、これらのスイートとテストケースを単に無視するようにMochaに指示できます。スキップされたものは&lt;a href=&quot;#pending-tests&quot;&gt;保留中&lt;/a&gt;としてマークされ、そのように報告されます。スイート全体をスキップする例を次に示します。</target>
        </trans-unit>
        <trans-unit id="4a2cf25857a9218f743f2bd682a7123fd5404887" translate="yes" xml:space="preserve">
          <source>This flag is helpful when debugging a suspected issue within Mocha or Node.js itself.</source>
          <target state="translated">このフラグは、Mocha や Node.js 自体の中で疑わしい問題をデバッグする際に役立ちます。</target>
        </trans-unit>
        <trans-unit id="78e4efee38382a20207ecb9cd3de46a5db29e1e7" translate="yes" xml:space="preserve">
          <source>This flag is unusual in that it &lt;strong&gt;defaults to &lt;code&gt;true&lt;/code&gt;&lt;/strong&gt;; use &lt;code&gt;--no-diff&lt;/code&gt; to suppress Mocha&amp;rsquo;s own diff output.</source>
          <target state="translated">This flag is unusual in that it &lt;strong&gt;defaults to &lt;code&gt;true&lt;/code&gt; &lt;/strong&gt;; use &lt;code&gt;--no-diff&lt;/code&gt; to suppress Mocha&amp;rsquo;s own diff output.</target>
        </trans-unit>
        <trans-unit id="e2e4e02d3ed6f9121bf9f39d945539b5cd120c01" translate="yes" xml:space="preserve">
          <source>This flag is useful when debugging particularly difficult-to-track exceptions.</source>
          <target state="translated">このフラグは、特に追跡が困難な例外をデバッグする場合に有用です。</target>
        </trans-unit>
        <trans-unit id="591f370cc64f9ec442c7993f009517182f783143" translate="yes" xml:space="preserve">
          <source>This flowchart will help you decide which of &lt;a href=&quot;#hooks&quot;&gt;hooks&lt;/a&gt;, &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt; or &lt;a href=&quot;#global-fixtures&quot;&gt;global fixtures&lt;/a&gt; you should use.</source>
          <target state="translated">This flowchart will help you decide which of &lt;a href=&quot;#hooks&quot;&gt;hooks&lt;/a&gt;, &lt;a href=&quot;#root-hook-plugins&quot;&gt;root hook plugins&lt;/a&gt; or &lt;a href=&quot;#global-fixtures&quot;&gt;global fixtures&lt;/a&gt; you should use.</target>
        </trans-unit>
        <trans-unit id="db6fb9c76f97b4dc11607aaf93d9c0861add85c8" translate="yes" xml:space="preserve">
          <source>This is the default reporter. The &amp;ldquo;spec&amp;rdquo; reporter outputs a hierarchical view nested just as the test cases are.</source>
          <target state="translated">これはデフォルトのレポーターです。「spec」レポーターは、テストケースと同様にネストされた階層ビューを出力します。</target>
        </trans-unit>
        <trans-unit id="628c96b877b8f3e4a3b8e9d0f707a2df8dc3a0bf" translate="yes" xml:space="preserve">
          <source>This is the default reporter. The Spec reporter outputs a hierarchical view nested just as the test cases are.</source>
          <target state="translated">これはデフォルトのレポーターです。Spec レポーターは、テストケースと同じようにネストされた階層ビューを出力します。</target>
        </trans-unit>
        <trans-unit id="e1359697b3bbb563a826b34ae41253525a9fd1c8" translate="yes" xml:space="preserve">
          <source>This will skip all &lt;code&gt;it&lt;/code&gt;, &lt;code&gt;beforeEach/afterEach&lt;/code&gt;, and &lt;code&gt;describe&lt;/code&gt; blocks within the suite. &lt;code&gt;before/after&lt;/code&gt; hooks are skipped unless they are defined at the same level as the hook containing &lt;code&gt;this.skip()&lt;/code&gt;.</source>
          <target state="translated">This will skip all &lt;code&gt;it&lt;/code&gt; , &lt;code&gt;beforeEach/afterEach&lt;/code&gt; , and &lt;code&gt;describe&lt;/code&gt; blocks within the suite. &lt;code&gt;before/after&lt;/code&gt; hooks are skipped unless they are defined at the same level as the hook containing &lt;code&gt;this.skip()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27a4f2c5a6aa7d957af2668e0ec53e32944aba26" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
          <target state="translated">Timeouts</target>
        </trans-unit>
        <trans-unit id="79d18461c6ac14a2122bc3476f1b9e29df62dcb9" translate="yes" xml:space="preserve">
          <source>To configure where &lt;code&gt;mocha&lt;/code&gt; looks for tests, you may pass your own glob:</source>
          <target state="translated">&lt;code&gt;mocha&lt;/code&gt; がテストを探す場所を設定するには、独自のグロブを渡すことができます：</target>
        </trans-unit>
        <trans-unit id="b31c7e011694e8a4a4c04ef1b044d4868e345b97" translate="yes" xml:space="preserve">
          <source>To create a global setup fixture, export &lt;code&gt;mochaGlobalSetup&lt;/code&gt; from a script, e.g.,:</source>
          <target state="translated">To create a global setup fixture, export &lt;code&gt;mochaGlobalSetup&lt;/code&gt; from a script, e.g.,:</target>
        </trans-unit>
        <trans-unit id="e5f6b7eb05abf8a709c13f22eb4e4bd851b1ecd0" translate="yes" xml:space="preserve">
          <source>To disable timeouts, use &lt;code&gt;--no-timeout&lt;/code&gt;.</source>
          <target state="translated">To disable timeouts, use &lt;code&gt;--no-timeout&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd712ab444f24edc121b5edc007fcba22b0d6c51" translate="yes" xml:space="preserve">
          <source>To enable this you don&amp;rsquo;t need to do anything special. Write your test file as an ES module. In Node.js this means either ending the file with a &lt;code&gt;.mjs&lt;/code&gt; extension, or, if you want to use the regular &lt;code&gt;.js&lt;/code&gt; extension, by adding &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt;. More information can be found in the &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;Node.js documentation&lt;/a&gt;.</source>
          <target state="translated">To enable this you don&amp;rsquo;t need to do anything special. Write your test file as an ES module. In Node.js this means either ending the file with a &lt;code&gt;.mjs&lt;/code&gt; extension, or, if you want to use the regular &lt;code&gt;.js&lt;/code&gt; extension, by adding &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt; . More information can be found in the &lt;a href=&quot;https://nodejs.org/api/esm.html&quot;&gt;Node.js documentation&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f42dba1c3aa3966e335877c4abaa6c8d2851edbb" translate="yes" xml:space="preserve">
          <source>To ensure your tests aren&amp;rsquo;t leaving messes around, here are some ideas to get started:</source>
          <target state="translated">テストによって混乱が生じないようにするために、開始するためのいくつかのアイデアを次に示します。</target>
        </trans-unit>
        <trans-unit id="f40e74524fe2eeca3ec4fb47cf83ceaa91a22688" translate="yes" xml:space="preserve">
          <source>To exclude all files in a directory it is preferable to use &lt;code&gt;foo/bar&lt;/code&gt; instead of &lt;code&gt;foo/bar/**/*&lt;/code&gt;. The latter will still watch the directory &lt;code&gt;foo/bar&lt;/code&gt; but will ignore all changes to the content of that directory.</source>
          <target state="translated">To exclude all files in a directory it is preferable to use &lt;code&gt;foo/bar&lt;/code&gt; instead of &lt;code&gt;foo/bar/**/*&lt;/code&gt; . The latter will still watch the directory &lt;code&gt;foo/bar&lt;/code&gt; but will ignore all changes to the content of that directory.</target>
        </trans-unit>
        <trans-unit id="4166085f88b18973c350bf4278ffeb2a4c4d9e4a" translate="yes" xml:space="preserve">
          <source>To maintain backwards compatibility, run your root hooks &lt;em&gt;if and only if&lt;/em&gt;&lt;code&gt;global.beforeEach&lt;/code&gt; (or other relevant hook) exists.</source>
          <target state="translated">To maintain backwards compatibility, run your root hooks &lt;em&gt;if and only if&lt;/em&gt; &lt;code&gt;global.beforeEach&lt;/code&gt; (or other relevant hook) exists.</target>
        </trans-unit>
        <trans-unit id="8a094ac9a15fef3b07e9d66f499b8ea5894cc8b3" translate="yes" xml:space="preserve">
          <source>To make things even easier, the &lt;code&gt;done()&lt;/code&gt; callback also accepts an &lt;code&gt;Error&lt;/code&gt; instance (i.e. &lt;code&gt;new Error()&lt;/code&gt;), so we may use this directly:</source>
          <target state="translated">さらに簡単にするために、 &lt;code&gt;done()&lt;/code&gt; コールバックは &lt;code&gt;Error&lt;/code&gt; インスタンス（つまり、 &lt;code&gt;new Error()&lt;/code&gt; ）も受け入れるため、これを直接使用できます。</target>
        </trans-unit>
        <trans-unit id="4a1f0f83779adef265f359131c735d34f2325b4c" translate="yes" xml:space="preserve">
          <source>To migrate your tests using root hooks to a root hook plugin:</source>
          <target state="translated">ルートフックを使ったテストをルートフックプラグインに移行するには</target>
        </trans-unit>
        <trans-unit id="063038b603f5a715c88594f9af467ed68f1e59a4" translate="yes" xml:space="preserve">
          <source>To override you may pass the timeout in milliseconds, or a value with the &lt;code&gt;s&lt;/code&gt; suffix, e.g., &lt;code&gt;--timeout 2s&lt;/code&gt; and &lt;code&gt;--timeout 2000&lt;/code&gt; are equivalent.</source>
          <target state="translated">To override you may pass the timeout in milliseconds, or a value with the &lt;code&gt;s&lt;/code&gt; suffix, e.g., &lt;code&gt;--timeout 2s&lt;/code&gt; and &lt;code&gt;--timeout 2000&lt;/code&gt; are equivalent.</target>
        </trans-unit>
        <trans-unit id="181147873dde77a66b9e8936a82a57a1c0d43a0b" translate="yes" xml:space="preserve">
          <source>To run Mocha&amp;rsquo;s tests, you will need GNU Make or compatible; Cygwin should work.</source>
          <target state="translated">Mochaのテストを実行するには、GNU Makeまたは互換性が必要です。Cygwinは動作するはずです。</target>
        </trans-unit>
        <trans-unit id="ff5e7f90eeb52aa92ea33aa784bfbbf4136ccea4" translate="yes" xml:space="preserve">
          <source>To skip &lt;em&gt;multiple&lt;/em&gt; tests in this manner, use &lt;code&gt;this.skip()&lt;/code&gt; in a &amp;ldquo;before all&amp;rdquo; hook:</source>
          <target state="translated">To skip &lt;em&gt;multiple&lt;/em&gt; tests in this manner, use &lt;code&gt;this.skip()&lt;/code&gt; in a &amp;ldquo;before all&amp;rdquo; hook:</target>
        </trans-unit>
        <trans-unit id="124a97823b2ea07d462afbbcf69e674aeafa0dd8" translate="yes" xml:space="preserve">
          <source>To skip &lt;em&gt;multiple&lt;/em&gt; tests in this manner, use &lt;code&gt;this.skip()&lt;/code&gt; in a &amp;ldquo;before&amp;rdquo; hook:</source>
          <target state="translated">この方法で&lt;em&gt;複数の&lt;/em&gt;テストをスキップ&lt;em&gt;するに&lt;/em&gt;は、「before」フックで &lt;code&gt;this.skip()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="968f3767ca44e5f61e465ea23fb749d9d35eb82e" translate="yes" xml:space="preserve">
          <source>To skip looking for config files, use &lt;code&gt;--no-config&lt;/code&gt;. Likewise, use &lt;code&gt;--no-package&lt;/code&gt; to stop Mocha from looking for configuration in a &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">To skip looking for config files, use &lt;code&gt;--no-config&lt;/code&gt; . Likewise, use &lt;code&gt;--no-package&lt;/code&gt; to stop Mocha from looking for configuration in a &lt;code&gt;package.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec00d22c3ec8c631b1641c9ec02e61e7e8843ff3" translate="yes" xml:space="preserve">
          <source>To specify custom report title, use &lt;code&gt;--reporter-option suiteName=&quot;Custom name&quot;&lt;/code&gt;.</source>
          <target state="translated">To specify custom report title, use &lt;code&gt;--reporter-option suiteName=&quot;Custom name&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7260172f73da876c1c01ac390ce0bacfa8301c04" translate="yes" xml:space="preserve">
          <source>To tweak what&amp;rsquo;s considered &amp;ldquo;slow&amp;rdquo;, you can use the &lt;code&gt;slow()&lt;/code&gt; method:</source>
          <target state="translated">「遅い」と見なされるものを微調整するには、 &lt;code&gt;slow()&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="4aff415f99540d0b50b0e89660fe5754193c5ce0" translate="yes" xml:space="preserve">
          <source>To use a different reporter:</source>
          <target state="translated">別の報告者を使うこと。</target>
        </trans-unit>
        <trans-unit id="5552caa1938b7670e69ca45f3bd528b8cc9891de" translate="yes" xml:space="preserve">
          <source>To use it, load this file when running Mocha via &lt;code&gt;mocha --require fixtures.cjs&lt;/code&gt; (or whatever you have named the file).</source>
          <target state="translated">To use it, load this file when running Mocha via &lt;code&gt;mocha --require fixtures.cjs&lt;/code&gt; (or whatever you have named the file).</target>
        </trans-unit>
        <trans-unit id="db46e01f0805db48b03451da376ea0e4eefa6bce" translate="yes" xml:space="preserve">
          <source>Top-level hooks, tests and suites are all made members of an &amp;ldquo;invisible&amp;rdquo; &lt;em&gt;root suite&lt;/em&gt;; there is only &lt;em&gt;one&lt;/em&gt; root suite for the entire process</source>
          <target state="translated">Top-level hooks, tests and suites are all made members of an &amp;ldquo;invisible&amp;rdquo; &lt;em&gt;root suite&lt;/em&gt;; there is only &lt;em&gt;one&lt;/em&gt; root suite for the entire process</target>
        </trans-unit>
        <trans-unit id="cf6dba0d1923d5a44b90c04697d5f1af6fbf2fd6" translate="yes" xml:space="preserve">
          <source>Troubleshooting Parallel Mode</source>
          <target state="translated">パラレルモードのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="4d67647d97898e9540d474b58f2a7cd6420e6599" translate="yes" xml:space="preserve">
          <source>Try something like &lt;a href=&quot;https://npm.im/why-is-node-running&quot;&gt;why-is-node-running&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://npm.im/why-is-node-running&quot;&gt;why-is-node-runningの&lt;/a&gt;ようなものを試してください</target>
        </trans-unit>
        <trans-unit id="3736ba582e365ededba73dae44c055b365583dc0" translate="yes" xml:space="preserve">
          <source>Try something like &lt;a href=&quot;https://npm.im/wtfnode&quot;&gt;wtfnode&lt;/a&gt;</source>
          <target state="translated">Try something like &lt;a href=&quot;https://npm.im/wtfnode&quot;&gt;wtfnode&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3e9298e857ce2fed5736a6527f73cc92083cd44f" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, &lt;em&gt;all&lt;/em&gt; boolean flags default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Unless otherwise noted, &lt;em&gt;all&lt;/em&gt; boolean flags default to &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16302731dcea624de7ac441d493693a3cd62b1ca" translate="yes" xml:space="preserve">
          <source>Updated for v9.0.0.</source>
          <target state="translated">v9.0.0に更新しました。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="777ba148d422cf0b48365288139f2a0be061a365" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#-grep-regexp-g-regexp&quot;&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://localhost:8080/#-fgrep-string-f-string&quot;&gt;&lt;code&gt;--fgrep&lt;/code&gt;&lt;/a&gt; instead; it&amp;rsquo;s not particularly efficient, but it will work.</source>
          <target state="translated">Use &lt;a href=&quot;#-grep-regexp-g-regexp&quot;&gt; &lt;code&gt;--grep&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;http://localhost:8080/#-fgrep-string-f-string&quot;&gt; &lt;code&gt;--fgrep&lt;/code&gt; &lt;/a&gt; instead; it&amp;rsquo;s not particularly efficient, but it will work.</target>
        </trans-unit>
        <trans-unit id="60ed9ffde5c3bc9c4eb8943a408076b8dfe51f28" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#exclusive-tests&quot;&gt;&lt;code&gt;.only&lt;/code&gt;&lt;/a&gt; until you find the test that causes Mocha to hang</source>
          <target state="translated">Mochaをハングさせるテストが見つかるまで&lt;a href=&quot;#exclusive-tests&quot;&gt; &lt;code&gt;.only&lt;/code&gt; を&lt;/a&gt;使用します</target>
        </trans-unit>
        <trans-unit id="db795f63f7d0809ff6f0768d8accb6e4bb7c01fe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--inspect&lt;/code&gt; / &lt;code&gt;--inspect-brk&lt;/code&gt; to launch the V8 inspector for use with Chrome Dev Tools.</source>
          <target state="translated">Use &lt;code&gt;--inspect&lt;/code&gt; / &lt;code&gt;--inspect-brk&lt;/code&gt; to launch the V8 inspector for use with Chrome Dev Tools.</target>
        </trans-unit>
        <trans-unit id="a87bcb8c66a2c96ea2584fcc3f08d2cce5bf1e4f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--jobs &amp;lt;count&amp;gt;&lt;/code&gt; to specify the &lt;em&gt;maximum&lt;/em&gt; number of processes in the worker pool.</source>
          <target state="translated">Use &lt;code&gt;--jobs &amp;lt;count&amp;gt;&lt;/code&gt; to specify the &lt;em&gt;maximum&lt;/em&gt; number of processes in the worker pool.</target>
        </trans-unit>
        <trans-unit id="df117c84bfd754a0f560844b422a5d21cf6524c8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--require test/hooks.js&lt;/code&gt; (even better: use a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;config file&lt;/a&gt; with &lt;code&gt;{&quot;require&quot;: &quot;test/hooks.js&quot;}&lt;/code&gt;) when running your tests.</source>
          <target state="translated">Use &lt;code&gt;--require test/hooks.js&lt;/code&gt; (even better: use a &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;config file&lt;/a&gt; with &lt;code&gt;{&quot;require&quot;: &quot;test/hooks.js&quot;}&lt;/code&gt; ) when running your tests.</target>
        </trans-unit>
        <trans-unit id="f8db095aa8f3ccdc616eed02e5c89f9c6a2a80ad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;inspect&lt;/code&gt; to launch Node.js&amp;rsquo; internal debugger.</source>
          <target state="translated">Use &lt;code&gt;inspect&lt;/code&gt; to launch Node.js&amp;rsquo; internal debugger.</target>
        </trans-unit>
        <trans-unit id="1d1c5d224d2ffa4b3e5c8419d49092b7724e335d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--parallel&lt;/code&gt; flag to run tests in a worker pool.</source>
          <target state="translated">Use the &lt;code&gt;--parallel&lt;/code&gt; flag to run tests in a worker pool.</target>
        </trans-unit>
        <trans-unit id="4d505f9434f52c09b27f464e641b257ea19bcd44" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;inverse&lt;/em&gt; of the match specified by &lt;code&gt;--grep&lt;/code&gt; or &lt;code&gt;fgrep&lt;/code&gt;.</source>
          <target state="translated">Use the &lt;em&gt;inverse&lt;/em&gt; of the match specified by &lt;code&gt;--grep&lt;/code&gt; or &lt;code&gt;fgrep&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec02773b86986cfdb5c4d1ecb9e0c327c5d9c709" translate="yes" xml:space="preserve">
          <source>Use the new &lt;a href=&quot;https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt;&lt;/a&gt; API (&lt;a href=&quot;https://git.io/vdlNM&quot;&gt;example&lt;/a&gt;)</source>
          <target state="translated">新しい&lt;a href=&quot;https://github.com/nodejs/node/blob/master/doc/api/async_hooks.md&quot;&gt; &lt;code&gt;async_hooks&lt;/code&gt; &lt;/a&gt; APIを使用します（&lt;a href=&quot;https://git.io/vdlNM&quot;&gt;例&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="92a267a8966c1cbb7f7dfb106c0f3b42f6087403" translate="yes" xml:space="preserve">
          <source>Use this option to have Mocha check for global variables that are leaked while running tests. Specify globals that are acceptable via the &lt;code&gt;--global&lt;/code&gt; option (for example: &lt;code&gt;--check-leaks --global jQuery --global MyLib&lt;/code&gt;).</source>
          <target state="translated">Use this option to have Mocha check for global variables that are leaked while running tests. Specify globals that are acceptable via the &lt;code&gt;--global&lt;/code&gt; option (for example: &lt;code&gt;--check-leaks --global jQuery --global MyLib&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="337aaed86842f2d6aa0bad6af3291d8271ad3377" translate="yes" xml:space="preserve">
          <source>Use this option to have Mocha check for global variables that are leaked while running tests. Specify globals that are acceptable via the &lt;code&gt;--globals&lt;/code&gt; option (for example: &lt;code&gt;--check-leaks --globals jQuery,MyLib&lt;/code&gt;).</source>
          <target state="translated">このオプションを使用して、テストの実行中にリークされるグローバル変数をMochaにチェックさせます。 &lt;code&gt;--globals&lt;/code&gt; オプションを使用して受け入れ可能なグローバルを指定します（例： &lt;code&gt;--check-leaks --globals jQuery,MyLib&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="36da87d2153b160525d8b212c442138642e0e694" translate="yes" xml:space="preserve">
          <source>Useful if you want to declare, for example, hooks to be run before every test across all other test files.</source>
          <target state="translated">例えば、他のすべてのテストファイルに渡って、すべてのテストの前に実行されるフックを宣言したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="a74e886def099965c425a1867eb2e606682adced" translate="yes" xml:space="preserve">
          <source>Useful when working with large strings.</source>
          <target state="translated">大きな弦を扱うときに便利です。</target>
        </trans-unit>
        <trans-unit id="4c5db29a674f1c53edcb3a3cdf216eb191d410b5" translate="yes" xml:space="preserve">
          <source>User (that&amp;rsquo;s you) executes &lt;code&gt;mocha&lt;/code&gt;</source>
          <target state="translated">User (that&amp;rsquo;s you) executes &lt;code&gt;mocha&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6520ff806f47de65e65ee6d0478f3e24eb1fb32b" translate="yes" xml:space="preserve">
          <source>Using async / await</source>
          <target state="translated">async/await を使用する</target>
        </trans-unit>
        <trans-unit id="ae5b40f0874dcda412106947e0068d99e71d6538" translate="yes" xml:space="preserve">
          <source>V8 flags can be defined in Mocha&amp;rsquo;s &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">V8 flags can be defined in Mocha&amp;rsquo;s &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;configuration&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3524cc2fcdcb4100bc0a15fc50b996cff06a83f0" translate="yes" xml:space="preserve">
          <source>View SuperAgent&amp;rsquo;s &lt;a href=&quot;https://github.com/visionmedia/superagent/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt; for reference.</source>
          <target state="translated">SuperAgentの&lt;a href=&quot;https://github.com/visionmedia/superagent/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="46ce53208c0b44d4824e60e18f475a3488a4cf23" translate="yes" xml:space="preserve">
          <source>Wallaby.js</source>
          <target state="translated">Wallaby.js</target>
        </trans-unit>
        <trans-unit id="208c5b855393fc6ee45c44cf3ab2085044d58ce7" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re using the &lt;code&gt;.mjs&lt;/code&gt; extension in these examples.</source>
          <target state="translated">We&amp;rsquo;re using the &lt;code&gt;.mjs&lt;/code&gt; extension in these examples.</target>
        </trans-unit>
        <trans-unit id="6617b9a153ce187d04e83c2753de551736092acd" translate="yes" xml:space="preserve">
          <source>Web notification support is being made available for current versions of modern browsers. Ensure your browser version supports both &lt;a href=&quot;https://caniuse.com/#feat=promises&quot;&gt;promises&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#feat=notifications&quot;&gt;web notifications&lt;/a&gt;. As the Notification API evolved over time, &lt;strong&gt;do not expect&lt;/strong&gt; the minimum possible browser version to necessarily work.</source>
          <target state="translated">Web notification support is being made available for current versions of modern browsers. Ensure your browser version supports both &lt;a href=&quot;https://caniuse.com/#feat=promises&quot;&gt;promises&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#feat=notifications&quot;&gt;web notifications&lt;/a&gt;. As the Notification API evolved over time, &lt;strong&gt;do not expect&lt;/strong&gt; the minimum possible browser version to necessarily work.</target>
        </trans-unit>
        <trans-unit id="007f2a3d03e97100b115da180988c4633173e84d" translate="yes" xml:space="preserve">
          <source>WebSocket.io</source>
          <target state="translated">WebSocket.io</target>
        </trans-unit>
        <trans-unit id="1a0628315b2e94ab904cb5616ff2294a7445045d" translate="yes" xml:space="preserve">
          <source>When Mocha itself throws exception, the associated &lt;code&gt;Error&lt;/code&gt; will have a &lt;code&gt;code&lt;/code&gt; property. Where applicable, consumers should check the &lt;code&gt;code&lt;/code&gt; property instead of string-matching against the &lt;code&gt;message&lt;/code&gt; property. The following table describes these error codes:</source>
          <target state="translated">When Mocha itself throws exception, the associated &lt;code&gt;Error&lt;/code&gt; will have a &lt;code&gt;code&lt;/code&gt; property. Where applicable, consumers should check the &lt;code&gt;code&lt;/code&gt; property instead of string-matching against the &lt;code&gt;message&lt;/code&gt; property. The following table describes these error codes:</target>
        </trans-unit>
        <trans-unit id="733b2ef39348df3c91b083b02ac3752785dc18f6" translate="yes" xml:space="preserve">
          <source>When Mocha runs in parallel mode, &lt;strong&gt;test files do not share the same process,&lt;/strong&gt; nor do they share the same instance of Mocha. Consequently, a hypothetical root hook defined in test file &lt;em&gt;A&lt;/em&gt;&lt;strong&gt;will not be present&lt;/strong&gt; in test file &lt;em&gt;B&lt;/em&gt;.</source>
          <target state="translated">When Mocha runs in parallel mode, &lt;strong&gt;test files do not share the same process,&lt;/strong&gt; nor do they share the same instance of Mocha. Consequently, a hypothetical root hook defined in test file &lt;em&gt;A&lt;/em&gt;&lt;strong&gt;will not be present&lt;/strong&gt; in test file &lt;em&gt;B&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="146ef27e5e8c8636cb475ce08289f63327d8c272" translate="yes" xml:space="preserve">
          <source>When Not To Use Global Fixtures</source>
          <target state="translated">グローバルフィクスチャを使用しない場合</target>
        </trans-unit>
        <trans-unit id="de10f11f6058755e0bcb59881aa96c0df52e2eb1" translate="yes" xml:space="preserve">
          <source>When To Use Global Fixtures</source>
          <target state="translated">グローバルフィクスチャの使用時期</target>
        </trans-unit>
        <trans-unit id="63c62aabdb13e3b2b161ce01ecfef17a5fd85ba3" translate="yes" xml:space="preserve">
          <source>When a test file is loaded, Mocha executes all of its suites and finds&amp;ndash;&lt;em&gt;but does not execute&lt;/em&gt;&amp;ndash;any hooks and tests therein.</source>
          <target state="translated">テストファイルがロードされると、Mochaはすべてのスイートを実行し、その中のフックとテストを検出しますが、&lt;em&gt;実行はしません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="403cb28cb0e9a6ecc7979365e4fa803f09f2b2f2" translate="yes" xml:space="preserve">
          <source>When a worker receives a test file to run, the worker creates a new Mocha instance &lt;em&gt;for the single test file&lt;/em&gt;, and:</source>
          <target state="translated">ワーカーが実行するテストファイルを受け取ると、ワーカーは&lt;em&gt;単一のテストファイル用に&lt;/em&gt;新しいMochaインスタンス&lt;em&gt;を&lt;/em&gt;作成し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="baf7c0750caea00132dceeabd1897398780cd267" translate="yes" xml:space="preserve">
          <source>When looking for test files, recurse into subdirectories.</source>
          <target state="translated">テストファイルを探すときは、サブディレクトリを探してください。</target>
        </trans-unit>
        <trans-unit id="180d2f47b23dbc479984a8224fa759e05fe31c61" translate="yes" xml:space="preserve">
          <source>When possible, show the difference between expected and actual values when an assertion failure is encountered.</source>
          <target state="translated">可能であれば、アサーションの失敗が発生した場合に、期待値と実際の値の差を示す。</target>
        </trans-unit>
        <trans-unit id="650695648cf73c3a21472400e31af12126ab21b6" translate="yes" xml:space="preserve">
          <source>When run (in the default &amp;ldquo;serial&amp;rdquo; mode) via this command:</source>
          <target state="translated">このコマンドを使用して（デフォルトの「シリアル」モードで）実行する場合：</target>
        </trans-unit>
        <trans-unit id="9e83e679040d85a449b1822c88d3ad567f5eef32" translate="yes" xml:space="preserve">
          <source>When testing synchronous code, omit the callback and Mocha will automatically continue on to the next test.</source>
          <target state="translated">同期コードをテストする場合は、コールバックを省略すると、Mocha は自動的に次のテストに進みます。</target>
        </trans-unit>
        <trans-unit id="5b14f0446d67ad48b9182e5b513b1e190bdf8342" translate="yes" xml:space="preserve">
          <source>When the worker completes the test file, buffered results are returned to the main process, which then gives them to the user-specified reporter (&lt;code&gt;spec&lt;/code&gt; by default)</source>
          <target state="translated">ワーカーがテストファイルを完了すると、バッファリングされた結果がメインプロセスに返され、メインプロセスがユーザー指定のレポーターに提供します（デフォルトでは &lt;code&gt;spec&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="35b1be9dfabfe815d96d1b2c647c1167935b0a7d" translate="yes" xml:space="preserve">
          <source>When used with &lt;code&gt;--bail&lt;/code&gt; (or &lt;code&gt;this.bail()&lt;/code&gt;) to exit after the first failure, it&amp;rsquo;s likely other tests will be running at the same time. Mocha must shut down its worker processes before exiting.</source>
          <target state="translated">&lt;code&gt;--bail&lt;/code&gt; （または &lt;code&gt;this.bail()&lt;/code&gt; ）とともに使用して最初の失敗後に終了すると、他のテストが同時に実行される可能性があります。Mochaは、終了する前にワーカープロセスをシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="9812e7de13ef00ec5ef3183896e1ac0d6bb304f2" translate="yes" xml:space="preserve">
          <source>When using module-level mocks via libs like &lt;code&gt;proxyquire&lt;/code&gt;, &lt;code&gt;rewiremock&lt;/code&gt; or &lt;code&gt;rewire&lt;/code&gt;, hold off on using ES modules for your test files</source>
          <target state="translated">以下のようなLIBS経由でモジュールレベルのモックを使用している場合 &lt;code&gt;proxyquire&lt;/code&gt; 、 &lt;code&gt;rewiremock&lt;/code&gt; または &lt;code&gt;rewire&lt;/code&gt; 、テストファイル用のESモジュールを使用して延期</target>
        </trans-unit>
        <trans-unit id="dc62639f5265fad900da247d38f006b2a4ffdf0c" translate="yes" xml:space="preserve">
          <source>With its default &amp;ldquo;BDD&amp;rdquo;-style interface, Mocha provides the hooks &lt;code&gt;before()&lt;/code&gt;, &lt;code&gt;after()&lt;/code&gt;, &lt;code&gt;beforeEach()&lt;/code&gt;, and &lt;code&gt;afterEach()&lt;/code&gt;. These should be used to set up preconditions and clean up after your tests.</source>
          <target state="translated">デフォルトの「BDD」スタイルのインターフェースを備えたMochaは、 &lt;code&gt;before()&lt;/code&gt; 、 &lt;code&gt;after()&lt;/code&gt; 、 &lt;code&gt;beforeEach()&lt;/code&gt; 、および &lt;code&gt;afterEach()&lt;/code&gt; のフックを提供します。これらは、前提条件を設定し、テスト後にクリーンアップするために使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="16496fb84961f70ecc0b32b3159803b0f68279e2" translate="yes" xml:space="preserve">
          <source>Work identically parallel mode, watch mode, and serial mode</source>
          <target state="translated">パラレルモード、ウォッチモード、シリアルモードを同じように動作させることができます。</target>
        </trans-unit>
        <trans-unit id="b0a77555be0622b8ee3dc42afae18948e8477c1b" translate="yes" xml:space="preserve">
          <source>Working with Promises</source>
          <target state="translated">約束事との連携</target>
        </trans-unit>
        <trans-unit id="886a64c45d3e00ddc7bf5f5fb27189e7a4f8985b" translate="yes" xml:space="preserve">
          <source>XUnit</source>
          <target state="translated">XUnit</target>
        </trans-unit>
        <trans-unit id="4d8818a69484756c75a0ed4e28260e21efa2ccc3" translate="yes" xml:space="preserve">
          <source>You can also put &lt;code&gt;.skip()&lt;/code&gt; on an entire suite. This is equivalent to appending &lt;code&gt;.skip()&lt;/code&gt; onto all tests in the suite. Hooks in the suite are also skipped.</source>
          <target state="translated">スイート全体に &lt;code&gt;.skip()&lt;/code&gt; を配置することもできます。これは、スイート内のすべてのテストに &lt;code&gt;.skip()&lt;/code&gt; を追加することと同じです。スイートのフックもスキップされます。</target>
        </trans-unit>
        <trans-unit id="4e19397d678bf6b1ecd2b44b2845afaa38c6ac24" translate="yes" xml:space="preserve">
          <source>You can choose to retry failed tests up to a certain number of times. This feature is designed to handle end-to-end tests (functional tests/Selenium&amp;hellip;) where resources cannot be easily mocked/stubbed. &lt;strong&gt;It&amp;rsquo;s not recommended to use this feature for unit tests&lt;/strong&gt;.</source>
          <target state="translated">失敗したテストを特定の回数まで再試行することを選択できます。この機能は、リソースを簡単にモック/スタブできないエンドツーエンドテスト（機能テスト/ Selenium&amp;hellip;）を処理するように設計されています。&lt;strong&gt;単体テストでこの機能を使用することはお勧めしません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a875eb1fb1a3a068824aa1c81301b7397d36e221" translate="yes" xml:space="preserve">
          <source>You can specify a custom &lt;code&gt;package.json&lt;/code&gt; location as well, using the &lt;code&gt;--package &amp;lt;path&amp;gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--package &amp;lt;path&amp;gt;&lt;/code&gt; オプションを使用して、カスタム &lt;code&gt;package.json&lt;/code&gt; の場所を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="a0415322eb417f82745bfaee5d6a53e02e96cbb5" translate="yes" xml:space="preserve">
          <source>You can specify a custom location for your configuration file with the &lt;code&gt;--config &amp;lt;path&amp;gt;&lt;/code&gt; option. Mocha will use the file&amp;rsquo;s extension to determine how to parse the file, and will assume JSON if unknown.</source>
          <target state="translated">&lt;code&gt;--config &amp;lt;path&amp;gt;&lt;/code&gt; オプションを使用して、構成ファイルのカスタムの場所を指定できます。Mochaはファイルの拡張子を使用してファイルの解析方法を決定し、不明な場合はJSONを想定します。</target>
        </trans-unit>
        <trans-unit id="346136f8072a2aa519654b9d90a87ce97604d348" translate="yes" xml:space="preserve">
          <source>You could be clever and try to get around this restriction by assigning something to the &lt;code&gt;global&lt;/code&gt; object, but this will &lt;em&gt;not&lt;/em&gt; work in parallel mode. It&amp;rsquo;s probably best to play by the rules!</source>
          <target state="translated">賢く、 &lt;code&gt;global&lt;/code&gt; オブジェクトに何かを割り当てることでこの制限を回避しようとすることもできますが、これは並列モードで&lt;em&gt;は&lt;/em&gt;機能し&lt;em&gt;ません&lt;/em&gt;。ルールに従ってプレイするのがおそらく最善です！</target>
        </trans-unit>
        <trans-unit id="f005210d275a1a8eb71a10ca4d3e586d175c0169" translate="yes" xml:space="preserve">
          <source>You may also choose multiple suites:</source>
          <target state="translated">また、複数のスイートルームを選択することもできます。</target>
        </trans-unit>
        <trans-unit id="eb919cbe2da233a5f01bbc2c6d1554c50ab176a9" translate="yes" xml:space="preserve">
          <source>You may also pick any file and add &amp;ldquo;root&amp;rdquo;-level hooks. For example, add &lt;code&gt;beforeEach()&lt;/code&gt; outside of all &lt;code&gt;describe()&lt;/code&gt; blocks. This will cause the callback to &lt;code&gt;beforeEach()&lt;/code&gt; to run before any test case, regardless of the file it lives in (this is because Mocha has an &lt;em&gt;implied&lt;/em&gt;&lt;code&gt;describe()&lt;/code&gt; block, called the &amp;ldquo;root suite&amp;rdquo;).</source>
          <target state="translated">また、任意のファイルを選択して、「ルート」レベルのフックを追加することもできます。たとえば、すべての &lt;code&gt;describe()&lt;/code&gt; ブロックの外に &lt;code&gt;beforeEach()&lt;/code&gt; を追加します。これにより、使用するファイルに関係なく、 &lt;code&gt;beforeEach()&lt;/code&gt; へのコールバックがテストケースの前に実行されます（これは、Mocha に「ルートスイート」と呼ばれる&lt;em&gt;暗黙の&lt;/em&gt; &lt;code&gt;describe()&lt;/code&gt; ブロックがあるためです）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53a40e9ac08f8e56ed58d18aad7e7338c0d58b43" translate="yes" xml:space="preserve">
          <source>You may also skip &lt;em&gt;at runtime&lt;/em&gt; using &lt;code&gt;this.skip()&lt;/code&gt;. If a test needs an environment or configuration which cannot be detected beforehand, a runtime skip is appropriate. For example:</source>
          <target state="translated">&lt;code&gt;this.skip()&lt;/code&gt; を使用&lt;em&gt;して実行時に&lt;/em&gt;スキップすることもでき&lt;em&gt;ます&lt;/em&gt;。テストで事前に検出できない環境または構成が必要な場合は、ランタイムスキップが適切です。例えば：</target>
        </trans-unit>
        <trans-unit id="c38e124559800bfca4dd82079acc11e108c9ea31" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll note that we used &lt;code&gt;this&lt;/code&gt; in the fixture examples. Global setup fixtures and global teardown fixtures &lt;em&gt;share a context&lt;/em&gt;, which means we can add properties to the context object (&lt;code&gt;this&lt;/code&gt;) in the setup fixture, and reference them later in the teardown fixture. This is more useful when the fixtures are in separate files, since you can just use JS&amp;rsquo; variable scoping rules instead (&lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;example below&lt;/a&gt;).</source>
          <target state="translated">フィクスチャの例で &lt;code&gt;this&lt;/code&gt; を使用したことに注意してください。グローバルセットアップフィクスチャとグローバルティアダウンフィクスチャ&lt;em&gt;はコンテキストを共有します&lt;/em&gt;。つまり、セットアップフィクスチャのコンテキストオブジェクト（ &lt;code&gt;this&lt;/code&gt; ）にプロパティを追加し、後でティアダウンフィクスチャでそれらを参照できます。これは、フィクスチャが別々のファイルにある場合に、代わりにJSの変数スコープルールを使用できるため、より便利です（&lt;a href=&quot;#when-not-to-use-global-fixtures&quot;&gt;以下の例&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3599d1fd78d22e26bf27d167405a056e7da4889f" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;test/hooks.js&lt;/code&gt; (for this example, a CJS module) should contain:</source>
          <target state="translated">あなたの &lt;code&gt;test/hooks.js&lt;/code&gt; （この例では、CJSモジュール）が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="c3eec8b03dcce9fed74c063124b0f66dfcd0b0f7" translate="yes" xml:space="preserve">
          <source>Your library should &lt;em&gt;always&lt;/em&gt; export a &lt;a href=&quot;#defining-a-root-hook-plugin&quot;&gt;&lt;code&gt;mochaHooks&lt;/code&gt; object&lt;/a&gt;.</source>
          <target state="translated">ライブラリは&lt;em&gt;常に&lt;/em&gt;&lt;a href=&quot;#defining-a-root-hook-plugin&quot;&gt; &lt;code&gt;mochaHooks&lt;/code&gt; オブジェクトを&lt;/a&gt;エクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="729991f59c94410ba3a20c10a4fd2265d0c3ec60" translate="yes" xml:space="preserve">
          <source>Your original &lt;code&gt;test/test.spec.js&lt;/code&gt; should now contain:</source>
          <target state="translated">元の &lt;code&gt;test/test.spec.js&lt;/code&gt; には次のものが含まれているはずです。</target>
        </trans-unit>
        <trans-unit id="45efa3b9e9a75f11cb8a919a504b52c36a106b90" translate="yes" xml:space="preserve">
          <source>a falsy or otherwise underspecified exception was thrown</source>
          <target state="translated">虚偽の例外が発生した</target>
        </trans-unit>
        <trans-unit id="32fab07543a277b879029abf99d6e89ba5b11c84" translate="yes" xml:space="preserve">
          <source>auto run tests on file save</source>
          <target state="translated">ファイル保存時の自動実行テスト</target>
        </trans-unit>
        <trans-unit id="f0f10b7b77b19c7640a562cf9060fead1bff0494" translate="yes" xml:space="preserve">
          <source>done()</source>
          <target state="translated">done()</target>
        </trans-unit>
        <trans-unit id="e87e846a2b2da5dfadb82e7cc09eefd99016f221" translate="yes" xml:space="preserve">
          <source>exports</source>
          <target state="translated">exports</target>
        </trans-unit>
        <trans-unit id="7ed80072bd82ef6bdecb969dcf251b2c4ca964f8" translate="yes" xml:space="preserve">
          <source>interface specified in options not found</source>
          <target state="translated">オプションで指定されたインターフェイスが見つかりません</target>
        </trans-unit>
        <trans-unit id="30470456ea8daf5c47f465c99ce01e626cd7ded4" translate="yes" xml:space="preserve">
          <source>invalid or unsupported value was passed for a given argument</source>
          <target state="translated">指定された引数に無効またはサポートされていない値が渡されました。</target>
        </trans-unit>
        <trans-unit id="a619da43c8cb95adf890b628630836654a0a3077" translate="yes" xml:space="preserve">
          <source>mocha</source>
          <target state="translated">mocha</target>
        </trans-unit>
        <trans-unit id="4bfb16b073994e714d04294f5bca1c3e894db573" translate="yes" xml:space="preserve">
          <source>mocha.opts</source>
          <target state="translated">mocha.opts</target>
        </trans-unit>
        <trans-unit id="1859cc6fb110f181dca7c365469d9905153a1bd4" translate="yes" xml:space="preserve">
          <source>mocha.setup()</source>
          <target state="translated">mocha.setup()</target>
        </trans-unit>
        <trans-unit id="cbe19f375a678776beb07f153186eb8e9713ad96" translate="yes" xml:space="preserve">
          <source>only()</source>
          <target state="translated">only()</target>
        </trans-unit>
        <trans-unit id="66afd2a4fec11527d32e28b8e991cb7947e40089" translate="yes" xml:space="preserve">
          <source>or as a development dependency for your project:</source>
          <target state="translated">またはプロジェクトの開発依存関係として。</target>
        </trans-unit>
        <trans-unit id="71e047ff3acf2d180691a9e471b50dda9cb8866f" translate="yes" xml:space="preserve">
          <source>our &lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/third-party-reporter&quot;&gt;working example&lt;/a&gt;</source>
          <target state="translated">私たちの&lt;a href=&quot;https://github.com/mochajs/mocha-examples/tree/master/packages/third-party-reporter&quot;&gt;実例&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="decd2853106876b084ec854519f53343d9081562" translate="yes" xml:space="preserve">
          <source>reporter specified in options not found</source>
          <target state="translated">オプションで指定されたレポーターが見つかりません</target>
        </trans-unit>
        <trans-unit id="32fc2503fcec0333744d29b9967dbd3a449a6f31" translate="yes" xml:space="preserve">
          <source>requested behavior, option, or parameter is unsupported</source>
          <target state="translated">要求された動作、オプション、またはパラメータがサポートされていない</target>
        </trans-unit>
        <trans-unit id="623e76c36aa2a886542011e28412cc761d7ceb01" translate="yes" xml:space="preserve">
          <source>require</source>
          <target state="translated">require</target>
        </trans-unit>
        <trans-unit id="f58113e053e9cfabd8f5da0edb51764ffe848135" translate="yes" xml:space="preserve">
          <source>run &amp;amp; debug tests for each level hierarchy from all tests to a single test (and each describe of course)</source>
          <target state="translated">すべてのテストから単一のテストまでの各レベル階層のテストを実行およびデバッグします（もちろん、それぞれを説明します）</target>
        </trans-unit>
        <trans-unit id="f746722f41c9c50b7ee5e38f892a4770f5fda172" translate="yes" xml:space="preserve">
          <source>run &amp;amp; debug tests for each level hierarchy from all tests to a single test (and each suite)</source>
          <target state="translated">すべてのテストから単一のテスト（および各スイート）までの各レベル階層のテストを実行およびデバッグします</target>
        </trans-unit>
        <trans-unit id="75a7aab533cbd0d4b0a0f60439ef76ac4367c817" translate="yes" xml:space="preserve">
          <source>see all tests in VS Code sidebar menu</source>
          <target state="translated">VSコードのサイドバーメニューですべてのテストを参照してください</target>
        </trans-unit>
        <trans-unit id="b015dd3ac23d491eb96c2099ff31b741d8ad935d" translate="yes" xml:space="preserve">
          <source>see tests results directly in the code editor</source>
          <target state="translated">コードエディタでテスト結果を直接見る</target>
        </trans-unit>
        <trans-unit id="1c32fed0b0a4ddd34877f85ef98fc80b6eef760b" translate="yes" xml:space="preserve">
          <source>skip()</source>
          <target state="translated">skip()</target>
        </trans-unit>
        <trans-unit id="55187fbc9d22bfac69ba93172a722f9efba0e3ef" translate="yes" xml:space="preserve">
          <source>specify()</source>
          <target state="translated">specify()</target>
        </trans-unit>
        <trans-unit id="89dfaa12d7e423bcf84be8320838b8e822e3099d" translate="yes" xml:space="preserve">
          <source>teardown()</source>
          <target state="translated">teardown()</target>
        </trans-unit>
        <trans-unit id="9915a10c050c610bc945aec656037e14c4e0d3cc" translate="yes" xml:space="preserve">
          <source>test file(s) could not be found</source>
          <target state="translated">テストファイルが見つかりませんでした</target>
        </trans-unit>
        <trans-unit id="1a13bd67d53c6ca5d0ba854cc1c6d8e1dc4db3cb" translate="yes" xml:space="preserve">
          <source>test()</source>
          <target state="translated">test()</target>
        </trans-unit>
        <trans-unit id="e1ad659fbf49f86677c3b50da65a95aa93720622" translate="yes" xml:space="preserve">
          <source>the &lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;TeamCity reporter&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/travisjeffery/mocha-teamcity-reporter&quot;&gt;チームシティーレポーター&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34157f09f578b485744fac8104a1888249a9097d" translate="yes" xml:space="preserve">
          <source>wrong type was passed for a given argument</source>
          <target state="translated">間違った型が引数に渡された</target>
        </trans-unit>
        <trans-unit id="020514bf2372e6bd88fe11b116f8c24a9854ca88" translate="yes" xml:space="preserve">
          <source>✅ Do any assertion, mock, or other test libraries you&amp;rsquo;re consuming use root hooks? They may need to be &lt;a href=&quot;#migrating-a-library-to-use-root-hook-plugins&quot;&gt;migrated&lt;/a&gt; for compatibility with parallel mode.</source>
          <target state="translated">✅使用しているアサーション、モック、またはその他のテストライブラリはルートフックを使用していますか？並列モードとの互換性のために、&lt;a href=&quot;#migrating-a-library-to-use-root-hook-plugins&quot;&gt;移行&lt;/a&gt;が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="74fbba382203491821bab30ed8deadfc64a46e83" translate="yes" xml:space="preserve">
          <source>✅ Double-check your &lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;config file&lt;/a&gt;; options set in config files will be merged with any command-line option.</source>
          <target state="translated">✅&lt;a href=&quot;#configuring-mocha-nodejs&quot;&gt;設定ファイルを再&lt;/a&gt;確認してください; 設定ファイルで設定されたオプションは、任意のコマンドラインオプションとマージされます。</target>
        </trans-unit>
        <trans-unit id="c84ea8dc0e3c56eb78c3e9cfd680fd99e6f9565f" translate="yes" xml:space="preserve">
          <source>✅ Ensure you are not using &lt;a href=&quot;#file-order-is-non-deterministic&quot;&gt;other unsupported flags&lt;/a&gt;.</source>
          <target state="translated">✅&lt;a href=&quot;#file-order-is-non-deterministic&quot;&gt;サポートされてい&lt;/a&gt;ない他のフラグを使用していないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="43a893c194db3f54f2a105d6327aeffc991037a4" translate="yes" xml:space="preserve">
          <source>✅ Ensure you are using a &lt;a href=&quot;#reporter-limitations&quot;&gt;supported reporter&lt;/a&gt;.</source>
          <target state="translated">✅&lt;a href=&quot;#reporter-limitations&quot;&gt;サポートされているレポーター&lt;/a&gt;を使用していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="94431487aed245b9350023fe67b0072e52c4060c" translate="yes" xml:space="preserve">
          <source>✅ Ensure your tests clean up after themselves; remove temp files, handles, sockets, etc. Don&amp;rsquo;t try to share state or resources between test files.</source>
          <target state="translated">✅テストが後でクリーンアップされることを確認します。一時ファイル、ハンドル、ソケットなどを削除します。テストファイル間で状態やリソースを共有しようとしないでください。</target>
        </trans-unit>
        <trans-unit id="d62aff2da066d312840a1febb7e9456a815c36d7" translate="yes" xml:space="preserve">
          <source>✅ Ensure your tests do not depend on being run in a specific order.</source>
          <target state="translated">✅テストが特定の順序で実行されることに依存しないことを確認します。</target>
        </trans-unit>
        <trans-unit id="7fbbfd79dc26bf865ae3f95f47335447106cf224" translate="yes" xml:space="preserve">
          <source>✅ If tests are unexpectedly timing out, you may need to increase the default test timeout (via &lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt;&lt;code&gt;--timeout&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">✅テストが予期せずタイムアウトする場合は、デフォルトのテストタイムアウトを増やす必要がある場合があります（&lt;a href=&quot;#-timeout-ms-t-ms&quot;&gt; &lt;code&gt;--timeout&lt;/code&gt; を使用&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="0443c90f9dbff788381bed8c4355225f6cfaee60" translate="yes" xml:space="preserve">
          <source>✅ Look for root hooks (they look like &lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;this&lt;/a&gt;) in your tests. Move them into a &lt;a href=&quot;#root-hook-plugins&quot;&gt;Root Hook Plugin&lt;/a&gt;.</source>
          <target state="translated">✅（彼らは次のようになり、ルートフックを探し&lt;a href=&quot;#root-hooks-are-not-global&quot;&gt;、この&lt;/a&gt;あなたのテストで）。それらを&lt;a href=&quot;#root-hook-plugins&quot;&gt;ルートフックプラグインに&lt;/a&gt;移動します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
