<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="5c0e6c3f6dc802ee854147fa74a0509740327d59" translate="yes" xml:space="preserve">
          <source>As seen in the above example, the case expression can also introduce side effects. When multiple statements are given for a branch, Nim will use the last expression as the result value, much like in an &lt;em&gt;expr&lt;/em&gt; template.</source>
          <target state="translated">上記の例に見られるように、case式は副作用を引き起こす可能性もあります。ブランチに複数のステートメントが指定されている場合、Nimは&lt;em&gt;expr&lt;/em&gt;テンプレートと同様に、最後の式を結果値として使用します。</target>
        </trans-unit>
        <trans-unit id="030f4c4c973886988229bdb74a305865a196cd5e" translate="yes" xml:space="preserve">
          <source>As seen in the above example, the case expression can also introduce side effects. When multiple statements are given for a branch, Nim will use the last expression as the result value.</source>
          <target state="translated">上記の例に見られるように、case 式は副作用を導入することもできます。分岐に対して複数のステートメントが与えられた場合、Nim は最後の式を結果の値として使用します。</target>
        </trans-unit>
        <trans-unit id="439f48dfdc54a1d1cb2592abb741204d4e9306e5" translate="yes" xml:space="preserve">
          <source>As seen in the previous example, in such instantiations, it's not necessary to supply all type parameters of the generic type, because any missing ones will be inferred to have the equivalent of the &lt;em&gt;any&lt;/em&gt; type class and thus they will match anything without discrimination.</source>
          <target state="translated">前の例に見られるように、このようなインスタンス化では、ジェネリック型のすべての型パラメーターを指定する必要はありません。欠落しているパラメーターは、&lt;em&gt;any&lt;/em&gt;型クラスと同等であると推測され、したがって、区別なくすべてと一致します。</target>
        </trans-unit>
        <trans-unit id="bd35aae394555a2919844f419b9f12c930b44947" translate="yes" xml:space="preserve">
          <source>As seen in the previous examples, you can refer to generic concepts such as &lt;code&gt;Enumerable[T]&lt;/code&gt; just by their short name. Much like the regular generic types, the concept will be automatically instantiated with the bind once auto type in the place of each missing generic param.</source>
          <target state="translated">前の例で見たように、 &lt;code&gt;Enumerable[T]&lt;/code&gt; などの一般的な概念を短い名前だけで参照できます。通常のジェネリック型と同じように、概念は、欠落している各ジェネリックパラメーターの代わりに自動型を1回バインドすると自動的にインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="b6e6a7e96d415104630cd8f0ead0c140e77a0902" translate="yes" xml:space="preserve">
          <source>As seen in the previous examples, you can refer to generic concepts such as &lt;em&gt;Enumerable[T]&lt;/em&gt; just by their short name. Much like the regular generic types, the concept will be automatically instantiated with the bind once auto type in the place of each missing generic param.</source>
          <target state="translated">前の例で見たように、&lt;em&gt;Enumerable [T]&lt;/em&gt;などの一般的な概念を短い名前で参照でき&lt;em&gt;ます&lt;/em&gt;。通常のジェネリック型と同様に、コンセプトは、不足している各ジェネリックパラメーターの代わりにbind once auto型で自動的にインスタンス化されます。</target>
        </trans-unit>
        <trans-unit id="e9c1fc890399facee98adf935d7347503148926c" translate="yes" xml:space="preserve">
          <source>As such it supports a resolution of nanoseconds internally; however the API uses microseconds for convenience.</source>
          <target state="translated">そのため、内部的にはナノ秒の分解能をサポートしていますが、APIは利便性のためにマイクロ秒を使用しています。</target>
        </trans-unit>
        <trans-unit id="35de1ff3c0f8a83088283876bb1504cfc34e2427" translate="yes" xml:space="preserve">
          <source>As such it supports a resolution of nanoseconds internally; however, the API uses microseconds for convenience.</source>
          <target state="translated">そのため、内部ではナノ秒の分解能をサポートしていますが、APIでは便宜上マイクロ秒を使用しています。</target>
        </trans-unit>
        <trans-unit id="01367ae653af83b7f5aec2955cfd950745102be9" translate="yes" xml:space="preserve">
          <source>As such, a check to see if the deque is empty is needed before any access, unless your program logic guarantees it indirectly.</source>
          <target state="translated">このように、プログラムロジックが間接的に保証しない限り、アクセスの前に deque が空であるかどうかのチェックが必要です。</target>
        </trans-unit>
        <trans-unit id="286afc9752bec98ed25f43fb3fd09c91c5151ede" translate="yes" xml:space="preserve">
          <source>As the above example shows, Nim has no need for &lt;em&gt;get-properties&lt;/em&gt;: Ordinary get-procedures that are called with the &lt;em&gt;method call syntax&lt;/em&gt; achieve the same. But setting a value is different; for this a special setter syntax is needed:</source>
          <target state="translated">上記の例が示すように、Nimは&lt;em&gt;get-propertiesを&lt;/em&gt;必要としません。&lt;em&gt;メソッド呼び出し構文で&lt;/em&gt;呼び出される通常のget-procedures でも同じことが実現し&lt;em&gt;ます&lt;/em&gt;。ただし、値の設定は異なります。これには特別なセッター構文​​が必要です：</target>
        </trans-unit>
        <trans-unit id="e739d8d09978b2dcb0c312361958c802f83a064a" translate="yes" xml:space="preserve">
          <source>As the example demonstrates, invocation of a multi-method cannot be ambiguous: Collide 2 is preferred over collide 1 because the resolution works from left to right. Thus &lt;code&gt;Unit, Thing&lt;/code&gt; is preferred over &lt;code&gt;Thing, Unit&lt;/code&gt;.</source>
          <target state="translated">例が示すように、マルチメソッドの呼び出しがあいまいになることはありません。衝突は左から右に機能するため、衝突1ではなく衝突2が推奨されます。したがって、 &lt;code&gt;Unit, Thing&lt;/code&gt; は &lt;code&gt;Thing, Unit&lt;/code&gt; よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="4eb5ab0367cdd1ab709d3f90ffd6f79cf740c8bc" translate="yes" xml:space="preserve">
          <source>As the example shows &lt;code&gt;computedGoto&lt;/code&gt; is mostly useful for interpreters. If the underlying backend (C compiler) does not support the computed goto extension the pragma is simply ignored.</source>
          <target state="translated">例が示すように、 &lt;code&gt;computedGoto&lt;/code&gt; は主にインタープリターに役立ちます。基になるバックエンド（Cコンパイラ）が計算されたgoto拡張をサポートしていない場合、プラグマは単に無視されます。</target>
        </trans-unit>
        <trans-unit id="aa6410949c68317244c63b45dcd8f86123a06792" translate="yes" xml:space="preserve">
          <source>As the example shows, passing arguments to a filter can be done just like an ordinary procedure call with named or positional arguments. The available parameters depend on the invoked filter. Before version 0.12.0 of the language &lt;code&gt;#!&lt;/code&gt; was used instead of &lt;code&gt;#?&lt;/code&gt;.</source>
          <target state="translated">例が示すように、引数をフィルターに渡すことは、名前付き引数または位置引数を使用した通常のプロシージャコールと同じように実行できます。使用可能なパラメーターは、呼び出されたフィルターによって異なります。言語のバージョン0.12.0より前 &lt;code&gt;#!&lt;/code&gt; &lt;code&gt;#?&lt;/code&gt; 代わりに使用されましたか？。</target>
        </trans-unit>
        <trans-unit id="27d5a0e7057a8c33abd1db459e64ad340a213114" translate="yes" xml:space="preserve">
          <source>As the regular expressions supported by this module are enormous, the reader is referred to &lt;a href=&quot;http://perldoc.perl.org/perlre.html&quot;&gt;http://perldoc.perl.org/perlre.html&lt;/a&gt; for the full documentation of Perl's regular expressions.</source>
          <target state="translated">このモジュールでサポートされている正規表現は膨大であるため、Perlの正規表現の完全なドキュメントについては、&lt;a href=&quot;http://perldoc.perl.org/perlre.html&quot;&gt;http：//perldoc.perl.org/perlre.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9fab19e3e695bde8d53f8e0ea730aa82f2acf596" translate="yes" xml:space="preserve">
          <source>As their name suggests, static parameters must be constant expressions:</source>
          <target state="translated">その名が示すように、静的パラメータは定数式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="868dd43083390b7b1e29d7736d8260c51c9f2330" translate="yes" xml:space="preserve">
          <source>As their name suggests, static parameters must be known at compile-time:</source>
          <target state="translated">その名が示すように、静的パラメータはコンパイル時に知る必要があります。</target>
        </trans-unit>
        <trans-unit id="62dcfc00fb0387dbffe758f0f4162e7a2adedb56" translate="yes" xml:space="preserve">
          <source>As usual &lt;code&gt;locks&lt;/code&gt; is an inferred effect and there is a subtype relation: &lt;code&gt;proc () {.locks: N.}&lt;/code&gt; is a subtype of &lt;code&gt;proc () {.locks: M.}&lt;/code&gt; iff (M &amp;lt;= N).</source>
          <target state="translated">いつものように &lt;code&gt;locks&lt;/code&gt; は推測された効果であり、サブタイプの関係があります： &lt;code&gt;proc () {.locks: N.}&lt;/code&gt; は &lt;code&gt;proc () {.locks: M.}&lt;/code&gt; サブタイプiff（M &amp;lt;= N）です。</target>
        </trans-unit>
        <trans-unit id="8a7e3825909e47cd662a1349cd9c1f9bb88f142c" translate="yes" xml:space="preserve">
          <source>Asm statement</source>
          <target state="translated">ASMステートメント</target>
        </trans-unit>
        <trans-unit id="02bb6749711a6c6662b3a9fd807816e9e50ff52d" translate="yes" xml:space="preserve">
          <source>Assembler statement</source>
          <target state="translated">アセンブラ文</target>
        </trans-unit>
        <trans-unit id="e55df441e8955746182110c3946288f381520e83" translate="yes" xml:space="preserve">
          <source>Assignment</source>
          <target state="translated">Assignment</target>
        </trans-unit>
        <trans-unit id="d726d517f001352072c6361a864be12f97f89db4" translate="yes" xml:space="preserve">
          <source>Assignment compatibility</source>
          <target state="translated">配属互換性</target>
        </trans-unit>
        <trans-unit id="d9203ef0427904fd0cb4f5281674fd37cff746c1" translate="yes" xml:space="preserve">
          <source>Assignments are not special, the left-hand-side expression is evaluated before the right-hand side:</source>
          <target state="translated">代入は特別なことではなく、左辺の式は右辺よりも先に評価されます。</target>
        </trans-unit>
        <trans-unit id="bdbc7a2ef12df17ef446e486bdf034d3c6184695" translate="yes" xml:space="preserve">
          <source>Assignments like &lt;code&gt;a = b&lt;/code&gt; &quot;connect&quot; two variables, both variables end up in the same graph &lt;code&gt;{a, b} = G(a) = G(b)&lt;/code&gt;. Unfortunately, the pattern to look for is much more complex than that and can involve multiple assignment targets and sources:</source>
          <target state="translated">&lt;code&gt;a = b&lt;/code&gt; ような割り当ては、 2つの変数を「接続」し、両方の変数は同じグラフ &lt;code&gt;{a, b} = G(a) = G(b)&lt;/code&gt; ます。残念ながら、検索するパターンはそれよりもはるかに複雑であり、複数の割り当てターゲットとソースが関係する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6857587f26a2cf347379f491f3d77b5f24e4bf76" translate="yes" xml:space="preserve">
          <source>Assignments, moves and destruction are specified in the &lt;a href=&quot;destructors&quot;&gt;destructors&lt;/a&gt; document.</source>
          <target state="translated">割り当て、移動、および破壊は、&lt;a href=&quot;destructors&quot;&gt;破壊者の&lt;/a&gt;ドキュメントで指定されています。</target>
        </trans-unit>
        <trans-unit id="1091ff5f3536a87992e1a98e7fdf3572d7d495bf" translate="yes" xml:space="preserve">
          <source>Associate application-defined &lt;code&gt;data&lt;/code&gt; with descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="translated">アプリケーション定義の &lt;code&gt;data&lt;/code&gt; を記述子 &lt;code&gt;fd&lt;/code&gt; に関連付けます。</target>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="bfb816193580fc3abfa7a6d74975fe8faf7b4602" translate="yes" xml:space="preserve">
          <source>Assumes that &lt;a href=&quot;#readHeaderRow,CsvParser&quot;&gt;readHeaderRow&lt;/a&gt; has already been called.</source>
          <target state="translated">readHeaderRowがすでに呼び出されていることを&lt;a href=&quot;#readHeaderRow,CsvParser&quot;&gt;前提とし&lt;/a&gt;ています。</target>
        </trans-unit>
        <trans-unit id="c10e87299448214997c9ba36a197edc020ad8d7c" translate="yes" xml:space="preserve">
          <source>Assumes that &lt;a href=&quot;#readHeaderRow.CsvParser&quot;&gt;readHeaderRow&lt;/a&gt; has already been called.</source>
          <target state="translated">readHeaderRow がすでに呼び出されていると&lt;a href=&quot;#readHeaderRow.CsvParser&quot;&gt;想定し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="464eb5858db553f9a4e084882b2d692e14f18a75" translate="yes" xml:space="preserve">
          <source>Async IO in Nim consists of multiple layers (from highest to lowest):</source>
          <target state="translated">Nim の Async IO は複数のレイヤー(最高から最低まで)で構成されています。</target>
        </trans-unit>
        <trans-unit id="d57562f32a2344e4a892e8ad77de461a0dddac00" translate="yes" xml:space="preserve">
          <source>Async alternative to TFTPClient.</source>
          <target state="translated">TFTPClient の非同期代替。</target>
        </trans-unit>
        <trans-unit id="61a0af2d907e2fd6001d764ad03dc8d1c0e711f3" translate="yes" xml:space="preserve">
          <source>Async await</source>
          <target state="translated">非同期待ち</target>
        </trans-unit>
        <trans-unit id="bb9065007b1394a4c890c8c730359a31cd3d4af2" translate="yes" xml:space="preserve">
          <source>Async version of &lt;code&gt;recv&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;recv&lt;/code&gt; の非同期バージョン。</target>
        </trans-unit>
        <trans-unit id="48e12dfeb54ee671e650066950d5a652045b9307" translate="yes" xml:space="preserve">
          <source>AsyncDispatch</source>
          <target state="translated">AsyncDispatch</target>
        </trans-unit>
        <trans-unit id="8b371c51c3d43e683cda1ca13b2b61e13b7f6e7b" translate="yes" xml:space="preserve">
          <source>Asynchronous IO in Nim</source>
          <target state="translated">Nimでの非同期IO</target>
        </trans-unit>
        <trans-unit id="7b9ef39877db01dd17657705a2bbb4a6bc49d720" translate="yes" xml:space="preserve">
          <source>Asynchronous procedures</source>
          <target state="translated">非同期プロシージャ</target>
        </trans-unit>
        <trans-unit id="c80b1fc2540985a4b46e1a0759e789f85aac96b9" translate="yes" xml:space="preserve">
          <source>Asynchronous procedures remove the pain of working with callbacks. They do this by allowing you to write asynchronous code the same way as you would write synchronous code.</source>
          <target state="translated">非同期プロシージャを使うと、コールバックでの作業の苦痛から解放されます。これは、同期コードを書くのと同じように非同期コードを書くことができるからです。</target>
        </trans-unit>
        <trans-unit id="b4324fe839ee2fc80392c528dbb2288500cc3cc5" translate="yes" xml:space="preserve">
          <source>Asynchronous sockets</source>
          <target state="translated">非同期ソケット</target>
        </trans-unit>
        <trans-unit id="04fc05d16ff1681dbd084361e286ad3b082b3c13" translate="yes" xml:space="preserve">
          <source>Asynchronous sockets are supported, however a better alternative is to use the &lt;a href=&quot;asyncio&quot;&gt;asyncio&lt;/a&gt; module.</source>
          <target state="translated">非同期ソケットがサポートされていますが、&lt;a href=&quot;asyncio&quot;&gt;asyncio&lt;/a&gt;モジュールを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="35633b9a1ba78252e82ee74e78a1b414efb9c39e" translate="yes" xml:space="preserve">
          <source>At least the following standard library modules are available:</source>
          <target state="translated">少なくとも以下の標準ライブラリモジュールが利用可能です。</target>
        </trans-unit>
        <trans-unit id="6c54cd214970569c34b0894bafdff80b326240d3" translate="yes" xml:space="preserve">
          <source>At runtime the dynamic library is searched for (in this order):</source>
          <target state="translated">実行時に動的ライブラリが検索されます(この順)。</target>
        </trans-unit>
        <trans-unit id="1e0afa779399055030a34271b80bf03107242a5a" translate="yes" xml:space="preserve">
          <source>At the moment idetools support is still in development so the test suite is not integrated with the main test suite and you have to run it manually. First you have to compile the tester:</source>
          <target state="translated">現時点では idetools のサポートはまだ開発中なので、テストスイートはメインのテストスイートと統合されておらず、手動で実行する必要があります。まず、テスターをコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="fc704ed532a31dc156f1bcb8e955bd79592110e2" translate="yes" xml:space="preserve">
          <source>At this time only &lt;code&gt;fastLog2&lt;/code&gt;, &lt;code&gt;firstSetBit, `countLeadingZeroBits&lt;/code&gt;, &lt;code&gt;countTrailingZeroBits&lt;/code&gt; may return undefined and/or platform dependent value if given invalid input.</source>
          <target state="translated">現時点では、無効な入力が与えられた場合 &lt;code&gt;firstSetBit, `countLeadingZeroBits&lt;/code&gt; &lt;code&gt;fastLog2&lt;/code&gt; 、firstSetBit、 `countLeadingZeroBits、 &lt;code&gt;countTrailingZeroBits&lt;/code&gt; のみが未定義またはプラットフォーム依存の値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="f92987b2f51905d6ac8ecf565a309b7358bafb43" translate="yes" xml:space="preserve">
          <source>At this time only &lt;em&gt;fastLog2&lt;/em&gt;, &lt;em&gt;firstSetBit, `countLeadingZeroBits&lt;/em&gt;, &lt;em&gt;countTrailingZeroBits&lt;/em&gt; may return undefined and/or platform dependant value if given invalid input.</source>
          <target state="translated">現時点では、無効な入力が与えられた場合&lt;em&gt;、&lt;/em&gt;&lt;em&gt;fastLog2&lt;/em&gt;、&lt;em&gt;firstSetBit、 `countLeadingZeroBits&lt;/em&gt;、&lt;em&gt;countTrailingZeroBitsのみ&lt;/em&gt;が未定義の値やプラットフォーム依存の値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="960f23b5c35d6aa6c2fa3b4e263b84d1a3fd845f" translate="yes" xml:space="preserve">
          <source>Atomic decrement of &lt;code&gt;memLoc&lt;/code&gt;. Returns the value after the operation.</source>
          <target state="translated">&lt;code&gt;memLoc&lt;/code&gt; のアトミックデクリメント。操作後の値を返します。</target>
        </trans-unit>
        <trans-unit id="ba1e7346cb7e0296ecb2813546eb0e039d6e0960" translate="yes" xml:space="preserve">
          <source>Atomic increment of &lt;code&gt;memLoc&lt;/code&gt;. Returns the value after the operation.</source>
          <target state="translated">&lt;code&gt;memLoc&lt;/code&gt; のアトミックインクリメント。操作後の値を返します。</target>
        </trans-unit>
        <trans-unit id="291084f32ca866abc3da0b99d4783417469d0bb7" translate="yes" xml:space="preserve">
          <source>AttachedOpToStr:</source>
          <target state="translated">AttachedOpToStr:</target>
        </trans-unit>
        <trans-unit id="dc088b4a46ed03929326ec3129e2350a99f0a990" translate="yes" xml:space="preserve">
          <source>Auto type</source>
          <target state="translated">オートタイプ</target>
        </trans-unit>
        <trans-unit id="9e0bd780b5a4993d6aec3f619069ec9a81419d34" translate="yes" xml:space="preserve">
          <source>Automatic dereferencing</source>
          <target state="translated">自動ディファレンス</target>
        </trans-unit>
        <trans-unit id="8da898cb62bda5d7f418cab55b2cc24cd6cf102c" translate="yes" xml:space="preserve">
          <source>Automatic dereferencing can be performed for the first argument of a routine call, but this is an experimental feature and is described &lt;a href=&quot;manual_experimental#type-bound-operations&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">自動逆参照は、ルーチン呼び出しの最初の引数に対して実行できますが、これは実験的な機能であり、&lt;a href=&quot;manual_experimental#type-bound-operations&quot;&gt;ここ&lt;/a&gt;で説明します。</target>
        </trans-unit>
        <trans-unit id="b34f3f41021aba6582ca800065938665aaa25537" translate="yes" xml:space="preserve">
          <source>Automatic dereferencing is also performed for the first argument of a routine call. But currently this feature has to be only enabled via &lt;code&gt;{.experimental: &quot;implicitDeref&quot;.}&lt;/code&gt;:</source>
          <target state="translated">自動逆参照は、ルーチン呼び出しの最初の引数に対しても実行されます。しかし、現在、この機能はのみを経由して有効にする必要があり &lt;code&gt;{.experimental: &quot;implicitDeref&quot;.}&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f7c575f4c32fe76f3847d51b65af64ecdf6ca27e" translate="yes" xml:space="preserve">
          <source>Automatic dereferencing is performed for the first argument of a routine call. This feature has to be only enabled via &lt;code&gt;{.experimental: &quot;implicitDeref&quot;.}&lt;/code&gt;:</source>
          <target state="translated">自動逆参照は、ルーチン呼び出しの最初の引数に対して実行されます。この機能は、 &lt;code&gt;{.experimental: &quot;implicitDeref&quot;.}&lt;/code&gt; 介してのみ有効にする必要があります：</target>
        </trans-unit>
        <trans-unit id="d8ff350df27dab12e84a90e8582631a3a03aa967" translate="yes" xml:space="preserve">
          <source>Automatic imports</source>
          <target state="translated">自動輸入</target>
        </trans-unit>
        <trans-unit id="a67c736139b69f8692c19b24a63527f053dd498d" translate="yes" xml:space="preserve">
          <source>Automatic reference counting also has the disadvantage that it introduces overhead when iterating over linked structures. The &lt;code&gt;.cursor&lt;/code&gt; annotation can also be used to avoid this overhead:</source>
          <target state="translated">自動参照カウントには、リンクされた構造を反復処理するときにオーバーヘッドが発生するという欠点もあります。 &lt;code&gt;.cursor&lt;/code&gt; 注釈も、このオーバーヘッドを回避するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="4f2f8a2fddb2e537990a2864cb34d8eee2d1446d" translate="yes" xml:space="preserve">
          <source>Automatic self insertions</source>
          <target state="translated">自動セルフ挿入</target>
        </trans-unit>
        <trans-unit id="d489cd84b7c72c977a3c1f79e61d852ca4f5fd46" translate="yes" xml:space="preserve">
          <source>Automatic type conversion in expressions with different kinds of floating point types is performed: See &lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;Convertible relation&lt;/a&gt; for further details. Arithmetic performed on floating point types follows the IEEE standard. Integer types are not converted to floating point types automatically and vice versa.</source>
          <target state="translated">さまざまな種類の浮動小数点型の式で自動型変換が実行されます。詳細については、&lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;変換可能な関係&lt;/a&gt;を参照してください。浮動小数点型で実行される演算は、IEEE標準に従います。整数型は自動的に浮動小数点型に変換されず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="b64d4599316074da7ef005b5cd10b87308f8b012" translate="yes" xml:space="preserve">
          <source>Automatic type conversion in expressions with different kinds of floating point types is performed: the smaller type is converted to the larger. Integer types are &lt;strong&gt;not&lt;/strong&gt; converted to floating point types automatically, nor vice versa. Use the &lt;a href=&quot;system#toInt&quot;&gt;toInt&lt;/a&gt; and &lt;a href=&quot;system#toFloat&quot;&gt;toFloat&lt;/a&gt; procs for these conversions.</source>
          <target state="translated">異なる種類の浮動小数点型の式で自動型変換が実行されます。小さい型が大きい型に変換されます。整数型は自動的に浮動小数点型に変換され&lt;strong&gt;ず&lt;/strong&gt;、その逆も行われません。これらの変換には&lt;a href=&quot;system#toInt&quot;&gt;toInt&lt;/a&gt;および&lt;a href=&quot;system#toFloat&quot;&gt;toFloat &lt;/a&gt;プロシージャを使用します。</target>
        </trans-unit>
        <trans-unit id="c40621dc72ca81ec4679a1a2886b7ce07642d169" translate="yes" xml:space="preserve">
          <source>Automatic type conversion in expressions with different kinds of floating-point types is performed: See &lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;Convertible relation&lt;/a&gt; for further details. Arithmetic performed on floating-point types follows the IEEE standard. Integer types are not converted to floating-point types automatically and vice versa.</source>
          <target state="translated">さまざまな種類の浮動小数点型を持つ式で自動型変換が実行されます。詳細については、&lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;変換可能な関係&lt;/a&gt;を参照してください。浮動小数点型で実行される算術演算は、IEEE標準に準拠しています。整数型は自動的に浮動小数点型に変換されません。その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="bc40764f7876b20ac068b0f8a1ac400c090ad482" translate="yes" xml:space="preserve">
          <source>Available filters</source>
          <target state="translated">利用可能なフィルタ</target>
        </trans-unit>
        <trans-unit id="48dc005192dc15899b10a69113ce172a5a8e8e1d" translate="yes" xml:space="preserve">
          <source>Avoiding SQL injection attacks</source>
          <target state="translated">SQLインジェクション攻撃の回避</target>
        </trans-unit>
        <trans-unit id="d70722c47d9401b1062d6f18506149cc91180a7b" translate="yes" xml:space="preserve">
          <source>Awaits any of the given &lt;code&gt;flowVars&lt;/code&gt;. Returns the index of one &lt;code&gt;flowVar&lt;/code&gt; for which a value arrived.</source>
          <target state="translated">指定された &lt;code&gt;flowVars&lt;/code&gt; いずれかを待機します。値が到着した1つの &lt;code&gt;flowVar&lt;/code&gt; のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="9c8be1bec1e6cf8a9c81470dfaba4ed24934dcaf" translate="yes" xml:space="preserve">
          <source>BACKSPACE:</source>
          <target state="translated">BACKSPACE:</target>
        </trans-unit>
        <trans-unit id="70abc14cf96eb8be79e9fd6a959869cbba7694d4" translate="yes" xml:space="preserve">
          <source>BEL:</source>
          <target state="translated">BEL:</target>
        </trans-unit>
        <trans-unit id="fb1a5f4640647983cfb53121af584bbea67c5d91" translate="yes" xml:space="preserve">
          <source>BModule:</source>
          <target state="translated">BModule:</target>
        </trans-unit>
        <trans-unit id="49e11bd56074acdd0d6e8108a218f943e547779d" translate="yes" xml:space="preserve">
          <source>BModuleList:</source>
          <target state="translated">BModuleList:</target>
        </trans-unit>
        <trans-unit id="ac722a571823523a2038440abaaa40107e4ed9ad" translate="yes" xml:space="preserve">
          <source>BProc:</source>
          <target state="translated">BProc:</target>
        </trans-unit>
        <trans-unit id="10dd2860ddc41fb0b5ee57fb7d0acd0689239255" translate="yes" xml:space="preserve">
          <source>BTree implementation with few features, but good enough for the Nim compiler's needs.</source>
          <target state="translated">BTree の実装は機能が少ないですが、Nim コンパイラのニーズには十分です。</target>
        </trans-unit>
        <trans-unit id="d003bdaae64a19fc6d547d12082ad35b3b16e0c1" translate="yes" xml:space="preserve">
          <source>BTree:</source>
          <target state="translated">BTree:</target>
        </trans-unit>
        <trans-unit id="56fb6640473cf328a2f4049e5c02474352d0c903" translate="yes" xml:space="preserve">
          <source>Back reference to the &lt;code&gt;i&lt;/code&gt;th capture. &lt;code&gt;i&lt;/code&gt; counts from 1.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 番目のキャプチャへの後方参照。 &lt;code&gt;i&lt;/code&gt; は1から数えます。</target>
        </trans-unit>
        <trans-unit id="ed59754f17e7c2d9945cda54ca5d2aa1dec958df" translate="yes" xml:space="preserve">
          <source>Back reference to the &lt;code&gt;i``th capture. ``i&lt;/code&gt; counts from 1.</source>
          <target state="translated">&lt;code&gt;i``th capture. ``i&lt;/code&gt; への後方参照。「私は1から数えます。</target>
        </trans-unit>
        <trans-unit id="c1b87da997dc3c85ddc08c2e6d0f37c746574592" translate="yes" xml:space="preserve">
          <source>Backend code calling Nim</source>
          <target state="translated">Nimを呼び出すバックエンドコード</target>
        </trans-unit>
        <trans-unit id="d2d1e1c764fd65afb7dd5b1cfc7187320a368f3d" translate="yes" xml:space="preserve">
          <source>Backend code can interface with Nim code exposed through the &lt;a href=&quot;manual#exportc-pragma&quot;&gt;exportc pragma&lt;/a&gt;. The &lt;code&gt;exportc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making Nim symbols available to the backends. By default the Nim compiler will mangle all the Nim symbols to avoid any name collision, so the most significant thing the &lt;code&gt;exportc&lt;/code&gt; pragma does is maintain the Nim symbol name, or if specified, use an alternative symbol for the backend in case the symbol rules don't match.</source>
          <target state="translated">バックエンドコードは、&lt;a href=&quot;manual#exportc-pragma&quot;&gt;exportcプラグマ&lt;/a&gt;を通じて公開されたNimコードとやり取りできます。 &lt;code&gt;exportc&lt;/code&gt; プラグマは、&lt;em&gt;一般的な&lt;/em&gt;バックエンドに利用できるニムシンボルを作る方法。デフォルトでは、NimコンパイラーはすべてのNimシンボルをマングルして名前の衝突を回避します。そのため、 &lt;code&gt;exportc&lt;/code&gt; プラグマが行う最も重要なことは、Nimシンボル名を維持するか、指定されている場合は、シンボルルールが適用される場合に備えてバックエンドに代替シンボルを使用します一致しません。</target>
        </trans-unit>
        <trans-unit id="c12e05b1c89f6fd18d4dbc9a25c83815d9bd7a87" translate="yes" xml:space="preserve">
          <source>Backend code can interface with Nim code exposed through the &lt;a href=&quot;manual#foreign-function-interface-exportc-pragma&quot;&gt;exportc pragma&lt;/a&gt;. The &lt;code&gt;exportc&lt;/code&gt; pragma is the &lt;em&gt;generic&lt;/em&gt; way of making Nim symbols available to the backends. By default, the Nim compiler will mangle all the Nim symbols to avoid any name collision, so the most significant thing the &lt;code&gt;exportc&lt;/code&gt; pragma does is maintain the Nim symbol name, or if specified, use an alternative symbol for the backend in case the symbol rules don't match.</source>
          <target state="translated">バックエンドコードは、&lt;a href=&quot;manual#foreign-function-interface-exportc-pragma&quot;&gt;exportcプラグマを&lt;/a&gt;介して公開されたNimコードとインターフェイスできます。 &lt;code&gt;exportc&lt;/code&gt; プラグマは、&lt;em&gt;一般的な&lt;/em&gt;バックエンドに利用できるニムシンボルを作る方法。デフォルトでは、Nimコンパイラは名前の衝突を回避するためにすべてのNimシンボルをマングルします。したがって、 &lt;code&gt;exportc&lt;/code&gt; プラグマが行う最も重要なことは、Nimシンボル名を維持するか、指定されている場合は、シンボルルールの場合にバックエンドに代替シンボルを使用することです。一致しません。</target>
        </trans-unit>
        <trans-unit id="4409ab544e7304fef23a5593b1e7c39ba4acd8f5" translate="yes" xml:space="preserve">
          <source>Backend issues</source>
          <target state="translated">バックエンドの問題</target>
        </trans-unit>
        <trans-unit id="b76b69c33162b1653a17f2c6f93e78edc8380818" translate="yes" xml:space="preserve">
          <source>Backend language options</source>
          <target state="translated">バックエンドの言語オプション</target>
        </trans-unit>
        <trans-unit id="b3776d63ad7b7a84bfe20d9c6d4a53a2b25d0e43" translate="yes" xml:space="preserve">
          <source>Backends</source>
          <target state="translated">Backends</target>
        </trans-unit>
        <trans-unit id="a826c283ce6a52f2d32eb19de6510cb9098ad99b" translate="yes" xml:space="preserve">
          <source>Backslash</source>
          <target state="translated">Backslash</target>
        </trans-unit>
        <trans-unit id="d761e5a62561f09ed0d44ad1cb46328e1f217a6f" translate="yes" xml:space="preserve">
          <source>Backslashes are interpreted literally, unless they immediately precede a double quotation mark.</source>
          <target state="translated">バックスラッシュは、ダブルクォーテーションマークの直前にない限り、文字通りに解釈されます。</target>
        </trans-unit>
        <trans-unit id="927ec03da92f02ddd56de8e2adaa715fed9bcf2d" translate="yes" xml:space="preserve">
          <source>Base class for floating point exceptions.</source>
          <target state="translated">浮動小数点例外のための基底クラス。</target>
        </trans-unit>
        <trans-unit id="e19c80b4617476c7d2f5c4f0dc9c67fc843f7a1e" translate="yes" xml:space="preserve">
          <source>Base effect class.</source>
          <target state="translated">ベースとなるエフェクトクラス。</target>
        </trans-unit>
        <trans-unit id="c01b2a5ff5b7f9aeb57693046b04a30f8f31374f" translate="yes" xml:space="preserve">
          <source>Base exception class.</source>
          <target state="translated">基本例外クラス。</target>
        </trans-unit>
        <trans-unit id="a7eab2acbe559b446c1a8d7cd0fa8164b769b943" translate="yes" xml:space="preserve">
          <source>Base exception object for all DOM Exceptions</source>
          <target state="translated">すべての DOM の例外のための基本例外オブジェクト</target>
        </trans-unit>
        <trans-unit id="83973edfe760182bfdbc649edc3760f5c0702635" translate="yes" xml:space="preserve">
          <source>Base filename plus anchor hyper link (eg. &lt;code&gt;algorithm.html#*,int,SortOrder&lt;/code&gt;).</source>
          <target state="translated">ベースファイル名とアンカーハイパーリンク（ &lt;code&gt;algorithm.html#*,int,SortOrder&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ff3a0b72da5e86ff4d501e782416cb07977480e0" translate="yes" xml:space="preserve">
          <source>Base name of &lt;code&gt;$app&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$app&lt;/code&gt; ベース名</target>
        </trans-unit>
        <trans-unit id="e2c84e2cb8f89f32d0380bd3ddeff0b222247407" translate="yes" xml:space="preserve">
          <source>Base64 is an encoding and decoding technique used to convert binary data to an ASCII string format. Each Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a total of 24 bits) can therefore be represented by four 6-bit Base64 digits.</source>
          <target state="translated">Base64は、バイナリデータをASCII文字列形式に変換するために使用されるエンコーディングおよびデコーディング技術です。各Base64桁は、データの正確な6ビットを表します。したがって、3つの8ビットバイト(つまり合計24ビット)は、4つの6ビットのBase64桁で表現できます。</target>
        </trans-unit>
        <trans-unit id="85fc7786b49e3cd7cea54716684f296c216fc621" translate="yes" xml:space="preserve">
          <source>Based on Python's &lt;code&gt;subprocess.list2cmdline&lt;/code&gt;. See &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;this link&lt;/a&gt; for more details.</source>
          <target state="translated">Pythonの &lt;code&gt;subprocess.list2cmdline&lt;/code&gt; に基づいています。詳細については、&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;このリンク&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="18bb69613ad5672181aef86b3bcfc02639a73650" translate="yes" xml:space="preserve">
          <source>Basic command line switches are:</source>
          <target state="translated">基本的なコマンドラインスイッチは</target>
        </trans-unit>
        <trans-unit id="40352c87ef0d68b1c5beceaf895d3dc51d866629" translate="yes" xml:space="preserve">
          <source>Basic command-line switches are:</source>
          <target state="translated">基本的なコマンドラインスイッチは</target>
        </trans-unit>
        <trans-unit id="a5669a354227631e44847f5a3bfd24a0e4fbd398" translate="yes" xml:space="preserve">
          <source>Basic math routines for Nim.</source>
          <target state="translated">Nimのための基本的な数学のルーチン。</target>
        </trans-unit>
        <trans-unit id="65e84bd37e76307cd618b3b242847f165ff6ea89" translate="yes" xml:space="preserve">
          <source>Basic math routines for Nim. This module is available for the &lt;a href=&quot;backends#the-javascript-target&quot;&gt;JavaScript target&lt;/a&gt;.</source>
          <target state="translated">Nimの基本的な数学ルーチン。このモジュールは&lt;a href=&quot;backends#the-javascript-target&quot;&gt;JavaScriptターゲットで&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="025bf07b265be458ae3c43fa75e64aedc284c9b0" translate="yes" xml:space="preserve">
          <source>Basic type definitions the module graph needs in order to support incremental compilations.</source>
          <target state="translated">インクリメンタルコンパイルをサポートするためにモジュールグラフが必要とする基本的な型定義。</target>
        </trans-unit>
        <trans-unit id="3fc431b29bb2c2516db706b2f480a558166eba6d" translate="yes" xml:space="preserve">
          <source>Basic types</source>
          <target state="translated">基本的な種類</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="8fc3f098aacbac78663d7394b49aef616d056323" translate="yes" xml:space="preserve">
          <source>Be aware that destructors are not called for objects allocated with &lt;code&gt;new&lt;/code&gt;. This may change in future versions of language, but for now the &lt;span id=&quot;finalizer_1&quot;&gt;finalizer&lt;/span&gt; parameter to &lt;code&gt;new&lt;/code&gt; has to be used.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; で割り当てられたオブジェクトに対してデストラクタが呼び出されないことに注意してください。これは言語の将来のバージョンで変更される可能性がありますが、現時点では &lt;code&gt;new&lt;/code&gt; への&lt;span id=&quot;finalizer_1&quot;&gt;ファイナライザ&lt;/span&gt;パラメータを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ba2b54b93992d14d28809a026825b4ee8eb9414" translate="yes" xml:space="preserve">
          <source>Be careful with the changed semantics though! There is a reason why the default assignment does a deep copy of sequences and strings.</source>
          <target state="translated">しかし、変更されたセマンティクスには注意してください。デフォルトの代入がシーケンスや文字列を深くコピーするのには理由があります。</target>
        </trans-unit>
        <trans-unit id="e85f9bee28cc1d1cf52353d0021ca76d6cebf3e4" translate="yes" xml:space="preserve">
          <source>Be sure your callback &lt;code&gt;cb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if you want to remove watch of &lt;code&gt;read&lt;/code&gt; notifications, and &lt;code&gt;false&lt;/code&gt;, if you want to continue receiving notifications.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 通知の監視を削除する場合は、コールバック &lt;code&gt;cb&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返し、通知の受信を継続する場合は &lt;code&gt;false&lt;/code&gt; を返すようにしてください。</target>
        </trans-unit>
        <trans-unit id="cdd2bc09353f3f6eab4a1aaaa22d1e5b8a6b20a9" translate="yes" xml:space="preserve">
          <source>Be sure your callback &lt;code&gt;cb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if you want to remove watch of &lt;code&gt;write&lt;/code&gt; notifications, and &lt;code&gt;false&lt;/code&gt;, if you want to continue receiving notifications.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 通知の監視を削除する場合は、コールバック &lt;code&gt;cb&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返し、通知の受信を継続する場合は &lt;code&gt;false&lt;/code&gt; を返すようにしてください。</target>
        </trans-unit>
        <trans-unit id="e3e15a7b46caea989a1213b44375d001f13628fc" translate="yes" xml:space="preserve">
          <source>Be sure your callback &lt;code&gt;cb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if you want to remove watch of &lt;em&gt;read&lt;/em&gt; notifications, and &lt;code&gt;false&lt;/code&gt;, if you want to continue receiving notifications.</source>
          <target state="translated">&lt;em&gt;読み取り&lt;/em&gt;通知の監視を削除する場合は、コールバック &lt;code&gt;cb&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返し、通知の受信を継続する場合は、 &lt;code&gt;false&lt;/code&gt; を返すようにしてください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8fba0a783eb77900741ec80cede356c924d6db33" translate="yes" xml:space="preserve">
          <source>Be sure your callback &lt;code&gt;cb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, if you want to remove watch of &lt;em&gt;write&lt;/em&gt; notifications, and &lt;code&gt;false&lt;/code&gt;, if you want to continue receiving notifications.</source>
          <target state="translated">&lt;em&gt;書き込み&lt;/em&gt;通知の監視を削除する場合は、コールバック &lt;code&gt;cb&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返し、通知の受信を継続する場合は、 &lt;code&gt;false&lt;/code&gt; を返すようにしてください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b2def5ce2a63b9ad86e11b4c2ae8cdf5edc0947c" translate="yes" xml:space="preserve">
          <source>Because Nim is part of a library it can't have its own c style &lt;code&gt;main()&lt;/code&gt; so you would need to define &lt;code&gt;main&lt;/code&gt; that calls &lt;code&gt;autoreleasepool&lt;/code&gt; and &lt;code&gt;UIApplicationMain&lt;/code&gt; to do it, or use a library like SDL2 or GLFM. After the iOS setup is done, it's very important to call &lt;code&gt;NimMain()&lt;/code&gt; to initialize Nim's garbage collector and to run the top-level statements of your program.</source>
          <target state="translated">Nimはライブラリの一部であるため、独自のcスタイルの &lt;code&gt;main()&lt;/code&gt; を持つことはできません。そのため、 &lt;code&gt;autoreleasepool&lt;/code&gt; と &lt;code&gt;UIApplicationMain&lt;/code&gt; を呼び出す &lt;code&gt;main&lt;/code&gt; を定義するか、SDL2やGLFMなどのライブラリを使用する必要があります。 iOSのセットアップが完了したら、 &lt;code&gt;NimMain()&lt;/code&gt; を呼び出してNimのガベージコレクターを初期化し、プログラムの最上位ステートメントを実行することが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="b3187f0a1333aaa342c3b0bc45e3c54255f8fe5a" translate="yes" xml:space="preserve">
          <source>Because Nim is part of a library it can't have its own c style &lt;code&gt;main()&lt;/code&gt; so you would need to define your own &lt;code&gt;android_main&lt;/code&gt; and init the Java environment, or use a library like SDL2 or GLFM to do it. After the Android stuff is done, it's very important to call &lt;code&gt;NimMain()&lt;/code&gt; in order to initialize Nim's garbage collector and to run the top level statements of your program.</source>
          <target state="translated">Nimはライブラリの一部であるため、独自のcスタイルの &lt;code&gt;main()&lt;/code&gt; を持つことはできません。そのため、独自の &lt;code&gt;android_main&lt;/code&gt; を定義してJava環境を初期化するか、SDL2やGLFMなどのライブラリを使用して実行する必要があります。Androidの処理が完了したら、Nimのガベージコレクターを初期化し、プログラムの最上位ステートメントを実行するために、 &lt;code&gt;NimMain()&lt;/code&gt; を呼び出すことが非常に重要です。</target>
        </trans-unit>
        <trans-unit id="a5b29491cf0e41bda59aca186aa4d23e8e683314" translate="yes" xml:space="preserve">
          <source>Because case statements are checked for exhaustiveness during semantic analysis, the value in every &lt;code&gt;of&lt;/code&gt; branch must be a constant expression. This restriction also allows the compiler to generate more performant code.</source>
          <target state="translated">セマンティック分析中にcaseステートメントの網羅性がチェックされるため、すべて &lt;code&gt;of&lt;/code&gt; ブランチの値は定数式である必要があります。この制限により、コンパイラーはよりパフォーマンスの高いコードを生成することもできます。</target>
        </trans-unit>
        <trans-unit id="ad6fb88f1f5da4c1dc39babb22ef9f534f8f245b" translate="yes" xml:space="preserve">
          <source>Because it makes no sense to do otherwise, the &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;prev&lt;/code&gt; pointers are not hidden from you and can be manipulated directly for efficiency.</source>
          <target state="translated">それ以外の方法は意味がないため、 &lt;code&gt;next&lt;/code&gt; および &lt;code&gt;prev&lt;/code&gt; ポインターは非表示にならず、効率を上げるために直接操作できます。</target>
        </trans-unit>
        <trans-unit id="54a6988e8937de78ac76a5e309de29683146ce4e" translate="yes" xml:space="preserve">
          <source>Because of full backend function call aparatus involvment, closure iterator invocation is typically higher cost than inline iterators. Adornment by a macro wrapper at the call site like this is a possibly useful reminder.</source>
          <target state="translated">バックエンドの関数コールが完全に関与しているため、クロージャイテレータの呼び出しはインラインイテレータよりも一般的にコストが高くなります。このようなマクロラッパーをコールサイトに設置することは、便利なリマインダーになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7683e637116932334b53de0830a252bd7ea3bd04" translate="yes" xml:space="preserve">
          <source>Because of the well defined order how templates and macros are expanded, strformat cannot expand template arguments:</source>
          <target state="translated">テンプレートとマクロがどのように展開されるかの順序が明確に定義されているため、strformat はテンプレートの引数を展開することができません。</target>
        </trans-unit>
        <trans-unit id="c4102f62e5cacc86882ccbd463d607ec09aa3efa" translate="yes" xml:space="preserve">
          <source>Because the backslash &lt;code&gt;\&lt;/code&gt; is a meta character both in the Nim programming language and in regular expressions, it is strongly recommended that one uses the &lt;em&gt;raw&lt;/em&gt; strings of Nim, so that backslashes are interpreted by the regular expression engine:</source>
          <target state="translated">バックスラッシュ &lt;code&gt;\&lt;/code&gt; はNimプログラミング言語と正規表現の両方でメタ文字であるため、バックスラッシュが正規表現エンジンによって解釈されるように、Nim の&lt;em&gt;生の&lt;/em&gt;文字列を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="9712a92a80197b448150bfcf6e22b8f9c9c72490" translate="yes" xml:space="preserve">
          <source>Because the literal is a raw string literal, the &lt;code&gt;\n&lt;/code&gt; is not interpreted as an escape sequence.</source>
          <target state="translated">リテラルは生の文字列リテラルであるため、 &lt;code&gt;\n&lt;/code&gt; はエスケープシーケンスとして解釈されません。</target>
        </trans-unit>
        <trans-unit id="d8fb87298b9236d186e536c812e43df39ea168a6" translate="yes" xml:space="preserve">
          <source>Because the underlying &lt;code&gt;cmp()&lt;/code&gt; is defined for tuples you can do a nested sort like in the following example:</source>
          <target state="translated">基になる &lt;code&gt;cmp()&lt;/code&gt; はタプルに対して定義されているため、次の例のようにネストされたソートを実行できます。</target>
        </trans-unit>
        <trans-unit id="bfb64249bb0e649fbfbb78cc88e026a57db749d0" translate="yes" xml:space="preserve">
          <source>Because the underlying &lt;code&gt;cmp()&lt;/code&gt; is defined for tuples you can do a nested sort.</source>
          <target state="translated">基になる &lt;code&gt;cmp()&lt;/code&gt; はタプルに対して定義されているため、ネストされたソートを実行できます。</target>
        </trans-unit>
        <trans-unit id="43fb05cafc764b08ef6490c14c113664c30e5757" translate="yes" xml:space="preserve">
          <source>Before stopping the program the &quot;exit procedures&quot; are called in the opposite order they were added with &lt;a href=&quot;exitprocs#addExitProc,proc&quot;&gt;addExitProc&lt;/a&gt;. &lt;code&gt;quit&lt;/code&gt; never returns and ignores any exception that may have been raised by the quit procedures. It does &lt;em&gt;not&lt;/em&gt; call the garbage collector to free all the memory, unless a quit procedure calls &lt;a href=&quot;#GC_fullCollect&quot;&gt;GC_fullCollect&lt;/a&gt;.</source>
          <target state="translated">プログラムを停止する前に、「exitプロシージャ」は、&lt;a href=&quot;exitprocs#addExitProc,proc&quot;&gt;addExitProcで&lt;/a&gt;追加されたのとは逆の順序で呼び出されます。 &lt;code&gt;quit&lt;/code&gt; は決して戻りませんし、quitプロシージャによって発生した可能性のある例外を無視します。終了プロシージャが&lt;a href=&quot;#GC_fullCollect&quot;&gt;GC_fullCollectを呼び出さ&lt;/a&gt;ない限り、ガベージコレクタを呼び出してすべてのメモリを解放することはありませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="d6d168f46ea8f3c36c56fc3253836f0e10427b1e" translate="yes" xml:space="preserve">
          <source>Before stopping the program the &quot;quit procedures&quot; are called in the opposite order they were added with &lt;a href=&quot;#addQuitProc&quot;&gt;addQuitProc&lt;/a&gt;. &lt;code&gt;quit&lt;/code&gt; never returns and ignores any exception that may have been raised by the quit procedures. It does &lt;em&gt;not&lt;/em&gt; call the garbage collector to free all the memory, unless a quit procedure calls &lt;a href=&quot;#GC_fullCollect&quot;&gt;GC_fullCollect&lt;/a&gt;.</source>
          <target state="translated">プログラムを停止する前に、「終了手続き」が&lt;a href=&quot;#addQuitProc&quot;&gt;addQuitProcで&lt;/a&gt;追加されたのとは逆の順序で呼び出されます。 &lt;code&gt;quit&lt;/code&gt; が戻ることはなく、quitプロシージャによって発生した可能性のある例外は無視されます。quitプロシージャが&lt;a href=&quot;#GC_fullCollect&quot;&gt;GC_fullCollectを呼び出さ&lt;/a&gt;ない限り、ガベージコレクタを呼び出してすべてのメモリを解放することはありませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="43d498bdad3123202c81edb42a89596ea2e8269d" translate="yes" xml:space="preserve">
          <source>Before the line is processed as a regular expression, some basic variables are searched for and replaced in the tests. The variables which will be replaced are:</source>
          <target state="translated">行が正規表現として処理される前に、いくつかの基本的な変数が検索され、テストで置換されます。置換される変数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b0e4a0c03109bf4544e258937ad71acfe78c0f79" translate="yes" xml:space="preserve">
          <source>Before the thread exits, you should tear down the thread's GC to prevent memory leaks by calling</source>
          <target state="translated">スレッドが終了する前に、メモリリークを防ぐために、スレッドのGCを破壊する必要があります。</target>
        </trans-unit>
        <trans-unit id="310e2e763625e5d6d59dce2240ea063af385856f" translate="yes" xml:space="preserve">
          <source>Before using this proc you need to initialise a &lt;code&gt;RstGenerator&lt;/code&gt; with &lt;code&gt;initRstGenerator&lt;/code&gt; and parse a rst file with &lt;code&gt;rstParse&lt;/code&gt; from the &lt;a href=&quot;rst&quot;&gt;packages/docutils/rst module&lt;/a&gt;. Example:</source>
          <target state="translated">この &lt;code&gt;RstGenerator&lt;/code&gt; を使用する前に、initRstGeneratorで &lt;code&gt;initRstGenerator&lt;/code&gt; を初期化し、&lt;a href=&quot;rst&quot;&gt;packages / docutils / rstモジュールの&lt;/a&gt; &lt;code&gt;rstParse&lt;/code&gt; で rstファイルを解析する必要があります。例：</target>
        </trans-unit>
        <trans-unit id="966b254aa9447e510a7ca9c23d5f788a878f610b" translate="yes" xml:space="preserve">
          <source>Begins a never ending global dispatcher poll loop.</source>
          <target state="translated">終わらないグローバル ディスパッチャ ポーリングループを開始します。</target>
        </trans-unit>
        <trans-unit id="700e73def7ceec3f6434ea58699b8763915742e0" translate="yes" xml:space="preserve">
          <source>Begins connecting &lt;code&gt;sock&lt;/code&gt; to &lt;code&gt;name&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sock&lt;/code&gt; を &lt;code&gt;name&lt;/code&gt; ： &lt;code&gt;port&lt;/code&gt; に接続し始めます。</target>
        </trans-unit>
        <trans-unit id="3b6ca901e484b0f0288a15e878ab0c9feab7a2af" translate="yes" xml:space="preserve">
          <source>Behaves similar to &lt;code&gt;sockets.readLine&lt;/code&gt;, however it handles non-blocking sockets properly. This function guarantees that &lt;code&gt;line&lt;/code&gt; is a full line, if this function can only retrieve some data; it will save this data and add it to the result when a full line is retrieved, when this happens False will be returned. True will only be returned if a full line has been retrieved or the socket has been disconnected in which case &lt;code&gt;line&lt;/code&gt; will be set to &quot;&quot;.</source>
          <target state="translated">&lt;code&gt;sockets.readLine&lt;/code&gt; と同様に動作しますが、非ブロッキングソケットを適切に処理します。この関数が一部のデータしか取得できない場合、この関数は &lt;code&gt;line&lt;/code&gt; が完全な行であることを保証します。このデータを保存し、行全体が取得されたときに結果に追加します。これが発生すると、Falseが返されます。完全な行が取得された場合、またはソケットが切断された場合にのみtrueが返され、その場合、 &lt;code&gt;line&lt;/code&gt; は &quot;&quot;に設定されます。</target>
        </trans-unit>
        <trans-unit id="c4326a5636a46dcb618755741f866f4b972d0a19" translate="yes" xml:space="preserve">
          <source>Behaves similar to &lt;code&gt;sockets.recvLine&lt;/code&gt;, however it handles non-blocking sockets properly. This function guarantees that &lt;code&gt;line&lt;/code&gt; is a full line, if this function can only retrieve some data; it will save this data and add it to the result when a full line is retrieved.</source>
          <target state="translated">&lt;code&gt;sockets.recvLine&lt;/code&gt; と同様に動作しますが、非ブロッキングソケットを適切に処理します。この関数が一部のデータしか取得できない場合、この関数は &lt;code&gt;line&lt;/code&gt; が完全な行であることを保証します。このデータを保存し、完全な行が取得されたときに結果に追加します。</target>
        </trans-unit>
        <trans-unit id="927f40673764a27aad14fdedb385b31e3b85f976" translate="yes" xml:space="preserve">
          <source>Benefits</source>
          <target state="translated">Benefits</target>
        </trans-unit>
        <trans-unit id="265943f4fdc43174a25de385d384224b6714c3a1" translate="yes" xml:space="preserve">
          <source>Better serialization/deserialization control:</source>
          <target state="translated">シリアライズ/デシリアライズ制御を改善しました。</target>
        </trans-unit>
        <trans-unit id="2f93848862aa5b35417b63e68af291d5b94657ce" translate="yes" xml:space="preserve">
          <source>Beware of nesting:</source>
          <target state="translated">巣立ちにご用心。</target>
        </trans-unit>
        <trans-unit id="79d0274d51b13cfe02935327c0fc3f6297737534" translate="yes" xml:space="preserve">
          <source>Beware: This can lead to unoptimized code and slow execution! Most problems are solve more efficient by using an iterator or conversion to a seq of Rune.</source>
          <target state="translated">注意してください。これは最適化されていないコードや遅い実行につながる可能性があります。ほとんどの問題は、イテレータやRuneのseqへの変換を使用することで、より効率的に解決できます。</target>
        </trans-unit>
        <trans-unit id="f4d696afe2b5ba12b327ae564fe7d6a1f84acff0" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;*&lt;/code&gt; operator for an integer.</source>
          <target state="translated">整数の二項 &lt;code&gt;*&lt;/code&gt; 演算子。</target>
        </trans-unit>
        <trans-unit id="c08a2fe26d27c6bfcb2415b4039cf2ed0add8372" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;*&lt;/code&gt; operator for unsigned integers.</source>
          <target state="translated">符号なし整数の二項 &lt;code&gt;*&lt;/code&gt; 演算子。</target>
        </trans-unit>
        <trans-unit id="a3ab4aea4adac0406d14184300a3a7766d03868c" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;*=&lt;/code&gt; operator for integers.</source>
          <target state="translated">二項 &lt;code&gt;*=&lt;/code&gt; 整数の演算子。</target>
        </trans-unit>
        <trans-unit id="bd499d0d3b771664d00b1e4ae04cacae7f3a4184" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;+&lt;/code&gt; operator for an integer.</source>
          <target state="translated">整数の二項 &lt;code&gt;+&lt;/code&gt; 演算子。</target>
        </trans-unit>
        <trans-unit id="48bb8159a57b96bb0c114d6aa5b12d0a7847516d" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;+&lt;/code&gt; operator for unsigned integers.</source>
          <target state="translated">符号なし整数の二項 &lt;code&gt;+&lt;/code&gt; 演算子。</target>
        </trans-unit>
        <trans-unit id="59f24985c1f2a734a7556e220f277694516b6931" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;-&lt;/code&gt; operator for an integer.</source>
          <target state="translated">二項 &lt;code&gt;-&lt;/code&gt; 整数の演算子。</target>
        </trans-unit>
        <trans-unit id="f6044721f8d0d0b53019b2a3981efa893fc34bb8" translate="yes" xml:space="preserve">
          <source>Binary &lt;code&gt;-&lt;/code&gt; operator for unsigned integers.</source>
          <target state="translated">バイナリ &lt;code&gt;-&lt;/code&gt; 符号なし整数の演算子。</target>
        </trans-unit>
        <trans-unit id="07e70f2fb17a35e7addfb3cce97a4c40deb42dbf" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;*&lt;/em&gt; operator for an integer.</source>
          <target state="translated">整数の2項&lt;em&gt;*&lt;/em&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="b4d78a434e47f392f05a75db91b17acd6fe4fa07" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;*&lt;/em&gt; operator for unsigned integers.</source>
          <target state="translated">符号なし整数の2項&lt;em&gt;*&lt;/em&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="26698f4bdcaf441cc8334749d82e3e3d352fb191" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;*=&lt;/em&gt; operator for ordinals</source>
          <target state="translated">序数のバイナリ&lt;em&gt;* =&lt;/em&gt;演算子</target>
        </trans-unit>
        <trans-unit id="330bd303262cb5101ce0efe34c05186ca99997f7" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;+&lt;/em&gt; operator for an integer.</source>
          <target state="translated">整数の2項&lt;em&gt;+&lt;/em&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="38c5372d40da823748edf7ea2383e6eece6eff5b" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;+&lt;/em&gt; operator for unsigned integers.</source>
          <target state="translated">符号なし整数の2項&lt;em&gt;+&lt;/em&gt;演算子。</target>
        </trans-unit>
        <trans-unit id="af8d9afe7721543aea25b34b98173554127fcd0b" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;-&lt;/em&gt; operator for an integer.</source>
          <target state="translated">バイナリ&lt;em&gt;-&lt;/em&gt;整数の演算子。</target>
        </trans-unit>
        <trans-unit id="8ccf951823bb2d33004b173d71cc94c3047b4785" translate="yes" xml:space="preserve">
          <source>Binary &lt;em&gt;-&lt;/em&gt; operator for unsigned integers.</source>
          <target state="translated">バイナリ&lt;em&gt;-&lt;/em&gt;符号なし整数の演算子。</target>
        </trans-unit>
        <trans-unit id="298a6d47b73600f39b508358a693e1e999d1b96b" translate="yes" xml:space="preserve">
          <source>Binary &lt;span id=&quot;slice_1&quot;&gt;slice&lt;/span&gt; operator that constructs an interval &lt;code&gt;[a, b]&lt;/code&gt;, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are inclusive.</source>
          <target state="translated">バイナリ&lt;span id=&quot;slice_1&quot;&gt;スライス&lt;/span&gt;間隔構築オペレータ &lt;code&gt;[a, b]&lt;/code&gt; 、両方と &lt;code&gt;b&lt;/code&gt; 含まれています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="560f98c3ead9f955754deb12fba064845d75b979" translate="yes" xml:space="preserve">
          <source>Binary operators whose first character is &lt;code&gt;^&lt;/code&gt; are right-associative, all other binary operators are left-associative.</source>
          <target state="translated">最初の文字が &lt;code&gt;^&lt;/code&gt; である二項演算子は右結合ですが、他のすべての二項演算子は左結合です。</target>
        </trans-unit>
        <trans-unit id="13e6dab1d5146c28e9a8f80aacb0e14a75d1d161" translate="yes" xml:space="preserve">
          <source>Binary search for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt;. Returns -1 if not found.</source>
          <target state="translated">以下のためのバイナリ検索 &lt;code&gt;key&lt;/code&gt; の中で。見つからない場合は-1を返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7c518334677846643f01c5d444a922e252954476" translate="yes" xml:space="preserve">
          <source>Binary slice that constructs an interval &lt;code&gt;[a, b]&lt;/code&gt;</source>
          <target state="translated">間隔を構成するバイナリスライス &lt;code&gt;[a, b]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="360d45a25b59088bfa51b40dd2c0ffd7a2333f6c" translate="yes" xml:space="preserve">
          <source>Binary. Outputs the number in base 2.</source>
          <target state="translated">バイナリです。ベース2の数値を出力します。</target>
        </trans-unit>
        <trans-unit id="d087993ff800b452527c7966565ad3f6a2e4d837" translate="yes" xml:space="preserve">
          <source>Bind matching to some action</source>
          <target state="translated">マッチングを何らかのアクションにバインドする</target>
        </trans-unit>
        <trans-unit id="af1a43872e0146a37b3fc6fec03f088b6f0c7d84" translate="yes" xml:space="preserve">
          <source>Bind statement</source>
          <target state="translated">バインド文</target>
        </trans-unit>
        <trans-unit id="d59366ada08751ecfdb863b4a3641304d02f31a6" translate="yes" xml:space="preserve">
          <source>BindSym</source>
          <target state="translated">BindSym</target>
        </trans-unit>
        <trans-unit id="e09df968e0a484a9efbeb94427ec16a9be185b7d" translate="yes" xml:space="preserve">
          <source>Binds &lt;code&gt;address&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt; to the socket.</source>
          <target state="translated">&lt;code&gt;address&lt;/code&gt; ： &lt;code&gt;port&lt;/code&gt; をソケットにバインドします。</target>
        </trans-unit>
        <trans-unit id="b2b740e61d0e92ce3771750fe18d701009cd48f9" translate="yes" xml:space="preserve">
          <source>Binds Unix socket to &lt;code&gt;path&lt;/code&gt;. This only works on Unix-style systems: Mac OS X, BSD and Linux</source>
          <target state="translated">Unixソケットを &lt;code&gt;path&lt;/code&gt; バインドします。これは、Unixスタイルのシステム（Mac OS X、BSD、およびLinux）でのみ機能します。</target>
        </trans-unit>
        <trans-unit id="659ea289b78cfbcca53efa111220718b2e750524" translate="yes" xml:space="preserve">
          <source>Binds Unix socket to &lt;em&gt;path&lt;/em&gt;. This only works on Unix-style systems: Mac OS X, BSD and Linux</source>
          <target state="translated">Unixソケットを&lt;em&gt;pathに&lt;/em&gt;バインドし&lt;em&gt;ます&lt;/em&gt;。これはUnixスタイルのシステムでのみ機能します：Mac OS X、BSDおよびLinux</target>
        </trans-unit>
        <trans-unit id="0763e7f1851e9b0c177725ab4c7dc682452ade82" translate="yes" xml:space="preserve">
          <source>Binds a 64bit float to the specified paramIndex.</source>
          <target state="translated">指定された paramIndex に 64bit の float をバインドします。</target>
        </trans-unit>
        <trans-unit id="cf757a19ad3f3d4509ba6ee2e4b874be835aded0" translate="yes" xml:space="preserve">
          <source>Binds a int to the specified paramIndex.</source>
          <target state="translated">指定されたparamIndexにintをバインドします。</target>
        </trans-unit>
        <trans-unit id="e625cc8fb32436122fb0068edc3dbca3cdcdbc1c" translate="yes" xml:space="preserve">
          <source>Binds a int32 to the specified paramIndex.</source>
          <target state="translated">指定されたparamIndexにint32をバインドします。</target>
        </trans-unit>
        <trans-unit id="244783089c0d8d62f1f5e280f8c8746bed09f172" translate="yes" xml:space="preserve">
          <source>Binds a int64 to the specified paramIndex.</source>
          <target state="translated">指定されたparamIndexにint64をバインドします。</target>
        </trans-unit>
        <trans-unit id="442c50132a79614a17a9bdc73bd34733ba2ec3a8" translate="yes" xml:space="preserve">
          <source>Binds a string to the specified paramIndex. if copy is true then SQLite makes its own private copy of the data immediately</source>
          <target state="translated">文字列を指定したparamIndexにバインドします。 copyがtrueの場合、SQLiteは直ちにデータのプライベートコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="0e3305dc3b1c2c52b627c1b205b11da11b85353d" translate="yes" xml:space="preserve">
          <source>Bisecting for regressions</source>
          <target state="translated">回帰のための二分法</target>
        </trans-unit>
        <trans-unit id="b045376f837c7f5b36378c8f4a5c40a869f8ef92" translate="yes" xml:space="preserve">
          <source>Bit fields</source>
          <target state="translated">ビットフィールド</target>
        </trans-unit>
        <trans-unit id="8e8aaeecce239b0f06469ead101c23881541a5d5" translate="yes" xml:space="preserve">
          <source>Bits for which fields are set</source>
          <target state="translated">フィールドが設定されているビット</target>
        </trans-unit>
        <trans-unit id="cd3e66f022e12b57b1f5fe62492942f67ba04841" translate="yes" xml:space="preserve">
          <source>Bitsize pragma</source>
          <target state="translated">ビットサイズプラグマ</target>
        </trans-unit>
        <trans-unit id="5c119412b318d42ac8f33c0d44bcfe04bf525ac2" translate="yes" xml:space="preserve">
          <source>Bitwise &lt;code&gt;and&lt;/code&gt;</source>
          <target state="translated">ビット単位 &lt;code&gt;and&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39600fac8a05616a7bc32bd60ca2b5e544ef74bc" translate="yes" xml:space="preserve">
          <source>Bitwise &lt;code&gt;not&lt;/code&gt; (complement)</source>
          <target state="translated">ビット単位で &lt;code&gt;not&lt;/code&gt; （補完）</target>
        </trans-unit>
        <trans-unit id="e61150f0cf6ce2a6c241d20c76e55c296e511f92" translate="yes" xml:space="preserve">
          <source>Bitwise &lt;code&gt;or&lt;/code&gt;</source>
          <target state="translated">ビット単位 &lt;code&gt;or&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="262bf0f9fb5c52318e5a238d3e8e31614c3a4ab6" translate="yes" xml:space="preserve">
          <source>Bitwise &lt;code&gt;xor&lt;/code&gt;</source>
          <target state="translated">ビットごとの &lt;code&gt;xor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="234ac99e0a5dfd13079331f5a645966c4b4a76a7" translate="yes" xml:space="preserve">
          <source>Blank lines are skipped.</source>
          <target state="translated">空行はスキップされます。</target>
        </trans-unit>
        <trans-unit id="40f4277d9e2e9642b7c7082b91e613d62eab845f" translate="yes" xml:space="preserve">
          <source>Block device.</source>
          <target state="translated">デバイスをブロックします。</target>
        </trans-unit>
        <trans-unit id="684096ae991ba36b90c5953d624c41ac5080dfdf" translate="yes" xml:space="preserve">
          <source>Block expression</source>
          <target state="translated">ブロック表現</target>
        </trans-unit>
        <trans-unit id="e681513340338ab189ae37b3a82732813788fc1e" translate="yes" xml:space="preserve">
          <source>Block scope</source>
          <target state="translated">ブロックスコープ</target>
        </trans-unit>
        <trans-unit id="d900d959e6c700afd03ab9e7a37649c54ebba876" translate="yes" xml:space="preserve">
          <source>Block statement</source>
          <target state="translated">ブロック文</target>
        </trans-unit>
        <trans-unit id="f5b504d04d5a39d2d24b7595634cf4c7ea12b1e0" translate="yes" xml:space="preserve">
          <source>Blocks until a connection is being made from a client. When a connection is made sets &lt;code&gt;client&lt;/code&gt; to the client socket and &lt;code&gt;address&lt;/code&gt; to the address of the connecting client. If &lt;code&gt;server&lt;/code&gt; is non-blocking then this function returns immediately, and if there are no connections queued the returned socket will be &lt;code&gt;InvalidSocket&lt;/code&gt;. This function will raise EOS if an error occurs.</source>
          <target state="translated">クライアントから接続が確立されるまでブロックします。接続がセットなされると &lt;code&gt;client&lt;/code&gt; クライアントソケットとに &lt;code&gt;address&lt;/code&gt; 接続しているクライアントのアドレスへ。場合は &lt;code&gt;server&lt;/code&gt; すぐに、この関数の戻りを非ブロックされ、接続がない場合は、返されたソケットがされるキューに入れられ &lt;code&gt;InvalidSocket&lt;/code&gt; 。エラーが発生した場合、この関数はEOSを発生させます。</target>
        </trans-unit>
        <trans-unit id="6d6f90513642da6009f2dec4733272a1e46e96f3" translate="yes" xml:space="preserve">
          <source>Blocks until a connection is being made from a client. When a connection is made sets &lt;code&gt;client&lt;/code&gt; to the client socket and &lt;code&gt;address&lt;/code&gt; to the address of the connecting client. This function will raise EOS if an error occurs.</source>
          <target state="translated">クライアントから接続が確立されるまでブロックします。接続がセットなされると &lt;code&gt;client&lt;/code&gt; クライアントソケットとに &lt;code&gt;address&lt;/code&gt; 接続しているクライアントのアドレスへ。エラーが発生した場合、この関数はEOSを発生させます。</target>
        </trans-unit>
        <trans-unit id="f12530c574f3cfa398576bfcff6b740177bf5092" translate="yes" xml:space="preserve">
          <source>Blocks until a connection is being made from a client. When a connection is made sets &lt;code&gt;client&lt;/code&gt; to the client socket and &lt;code&gt;address&lt;/code&gt; to the address of the connecting client. This function will raise OSError if an error occurs.</source>
          <target state="translated">クライアントから接続が確立されるまでブロックします。接続がセットなされると &lt;code&gt;client&lt;/code&gt; クライアントソケットとに &lt;code&gt;address&lt;/code&gt; 接続しているクライアントのアドレスへ。この関数は、エラーが発生した場合にOSErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="3d2cb0e49e8e481d85fd112c6bc966fff647d0e4" translate="yes" xml:space="preserve">
          <source>Blocks until the &lt;code&gt;fv&lt;/code&gt; is available and then passes its value to &lt;code&gt;action&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fv&lt;/code&gt; が使用可能になるまでブロックし、その値を &lt;code&gt;action&lt;/code&gt; 渡します。</target>
        </trans-unit>
        <trans-unit id="6249829140dfbfbee579813b26ebbc26ac5259f9" translate="yes" xml:space="preserve">
          <source>Blocks until the value is available and then returns this value.</source>
          <target state="translated">値が利用可能になるまでブロックし、この値を返します。</target>
        </trans-unit>
        <trans-unit id="5b0f36260d0087d8cf077f334df69bc1a29f6747" translate="yes" xml:space="preserve">
          <source>Boehm</source>
          <target state="translated">Boehm</target>
        </trans-unit>
        <trans-unit id="f1920bdf480fea1890c1c607ddd8fbd6d214637d" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;and&lt;/code&gt;</source>
          <target state="translated">ブール &lt;code&gt;and&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="72885a7405550e9130d42ec3e99774e65d3792ac" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;and&lt;/code&gt;; returns true if &lt;code&gt;x == y == true&lt;/code&gt; (if both arguments are true).</source>
          <target state="translated">ブール &lt;code&gt;and&lt;/code&gt; ; &lt;code&gt;x == y == true&lt;/code&gt; （両方の引数がtrueの場合）trueを返します。</target>
        </trans-unit>
        <trans-unit id="70bf1baa003257ad55f9ad962d42ef3e987cd33e" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;and&lt;/code&gt;; returns true iff &lt;code&gt;x == y == true&lt;/code&gt;. Evaluation is lazy: if &lt;code&gt;x&lt;/code&gt; is false, &lt;code&gt;y&lt;/code&gt; will not even be evaluated.</source>
          <target state="translated">ブール &lt;code&gt;and&lt;/code&gt; ; &lt;code&gt;x == y == true&lt;/code&gt; trueの場合にtrueを返します。評価は遅延です &lt;code&gt;x&lt;/code&gt; がfalseの場合、 &lt;code&gt;y&lt;/code&gt; も評価されません。</target>
        </trans-unit>
        <trans-unit id="bd6182164ad9b6988d504cfcb596476df33bbadc" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;exclusive or&lt;/code&gt;; returns true if &lt;code&gt;x != y&lt;/code&gt; (if either argument is true while the other is false).</source>
          <target state="translated">ブール &lt;code&gt;exclusive or&lt;/code&gt; 論理和; &lt;code&gt;x != y&lt;/code&gt; 場合はtrueを返します（一方の引数がtrueで、もう一方の引数がfalseの場合）。</target>
        </trans-unit>
        <trans-unit id="1e0faa62d8b37fae4b83d67dcc25ce1727029d54" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;not&lt;/code&gt;</source>
          <target state="translated">ブール値で &lt;code&gt;not&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ebecaba9ae87b5399a468d4c09ba36f3675aa58" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;or&lt;/code&gt;</source>
          <target state="translated">ブール値 &lt;code&gt;or&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d80c866faa984fce2db1b91522a920ab564d4ac" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;or&lt;/code&gt;; returns true if &lt;code&gt;not (not x and not y)&lt;/code&gt; (if any of the arguments is true).</source>
          <target state="translated">ブール &lt;code&gt;or&lt;/code&gt; ; そうで &lt;code&gt;not (not x and not y)&lt;/code&gt; 場合（xでもyでもない場合）（引数のいずれかがtrueの場合）trueを返します。</target>
        </trans-unit>
        <trans-unit id="8a3c45029fde7152ef764416ecfd26148ba5b9ad" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;or&lt;/code&gt;; returns true iff &lt;code&gt;not (not x and not y)&lt;/code&gt;. Evaluation is lazy: if &lt;code&gt;x&lt;/code&gt; is true, &lt;code&gt;y&lt;/code&gt; will not even be evaluated.</source>
          <target state="translated">ブール &lt;code&gt;or&lt;/code&gt; ; &lt;code&gt;not (not x and not y)&lt;/code&gt; 場合はtrueを返します。評価は遅延です &lt;code&gt;x&lt;/code&gt; がtrueの場合、 &lt;code&gt;y&lt;/code&gt; は評価されません。</target>
        </trans-unit>
        <trans-unit id="a0fb49701a6ce8d0b6b8759ef0bbf106493580b6" translate="yes" xml:space="preserve">
          <source>Boolean &lt;code&gt;xor&lt;/code&gt; (exclusive or)</source>
          <target state="translated">ブール &lt;code&gt;xor&lt;/code&gt; （排他的論理和）</target>
        </trans-unit>
        <trans-unit id="02bbffdde9a8f3f92162c50254a83eda75717823" translate="yes" xml:space="preserve">
          <source>Boolean &lt;em&gt;exclusive or&lt;/em&gt;; returns true iff &lt;code&gt;x != y&lt;/code&gt;.</source>
          <target state="translated">ブール&lt;em&gt;排他的または&lt;/em&gt; ; &lt;code&gt;x != y&lt;/code&gt; 場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="e4f6a62c295e099a6e5cc6ca486fd23a80fe9b9d" translate="yes" xml:space="preserve">
          <source>Boolean flag that indicates if the system supports nanosecond time resolution in the fields of &lt;code&gt;Stat&lt;/code&gt;. Note that the nanosecond based fields (&lt;code&gt;Stat.st_atim&lt;/code&gt;, &lt;code&gt;Stat.st_mtim&lt;/code&gt; and &lt;code&gt;Stat.st_ctim&lt;/code&gt;) can be accessed without checking this flag, because this module defines fallback procs when they are not available.</source>
          <target state="translated">システムが &lt;code&gt;Stat&lt;/code&gt; のフィールドでナノ秒の時間分解能をサポートするかどうかを示すブールフラグ。ナノ秒ベースのフィールド（ &lt;code&gt;Stat.st_atim&lt;/code&gt; 、 &lt;code&gt;Stat.st_mtim&lt;/code&gt; 、および &lt;code&gt;Stat.st_ctim&lt;/code&gt; ）には、このフラグをチェックしなくてもアクセスできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3952df69c65ce6112e163787ced226b37006623b" translate="yes" xml:space="preserve">
          <source>Boolean not; returns true if &lt;code&gt;x == false&lt;/code&gt;.</source>
          <target state="translated">ブール値ではありません。 &lt;code&gt;x == false&lt;/code&gt; 場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="20ba3c881998fa4098ce5ba4cafd77d368e565ad" translate="yes" xml:space="preserve">
          <source>Boolean not; returns true iff &lt;code&gt;x == false&lt;/code&gt;.</source>
          <target state="translated">ブールではありません。 &lt;code&gt;x == false&lt;/code&gt; 場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="cad44960020fa76bebce8ad95937acc2bd15d81f" translate="yes" xml:space="preserve">
          <source>Boolean socket options.</source>
          <target state="translated">ブール値のソケットオプション。</target>
        </trans-unit>
        <trans-unit id="49f29c844f200eead7503c6d10737135d242ba2b" translate="yes" xml:space="preserve">
          <source>Boolean type</source>
          <target state="translated">ブール型</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="0add89edb9f4ac0882e5974a2ed406404a13002f" translate="yes" xml:space="preserve">
          <source>Bootstrapping the compiler</source>
          <target state="translated">コンパイラのブートストラップ</target>
        </trans-unit>
        <trans-unit id="cce94abd249b1814e77889c4eaec84bc87efe214" translate="yes" xml:space="preserve">
          <source>Both parts have the same sign as &lt;code&gt;x&lt;/code&gt;. Analogous to the &lt;code&gt;modf&lt;/code&gt; function in C.</source>
          <target state="translated">両方の部分は &lt;code&gt;x&lt;/code&gt; と同じ符号を持っています。Cの &lt;code&gt;modf&lt;/code&gt; 関数に類似しています。</target>
        </trans-unit>
        <trans-unit id="bd4dea3d9dc65cab9bb66d4cc6a6ce01c2e41ab8" translate="yes" xml:space="preserve">
          <source>Both parts have the same sign as &lt;em&gt;x&lt;/em&gt;. Analogous to the &lt;em&gt;modf&lt;/em&gt; function in C.</source>
          <target state="translated">両方の部分に&lt;em&gt;x&lt;/em&gt;と同じ符号があります。C の&lt;em&gt;modf&lt;/em&gt;関数に似ています。</target>
        </trans-unit>
        <trans-unit id="35a56c974fb1825347f0fe1529b19d7c99f2d402" translate="yes" xml:space="preserve">
          <source>Both the multi method and the type converter problems are solved by the AST replay implementation.</source>
          <target state="translated">マルチメソッドと型変換の問題は、ASTリプレイの実装によって解決されています。</target>
        </trans-unit>
        <trans-unit id="19ab36d21e3e2bca80b33ef2b7f048e8235fb8c0" translate="yes" xml:space="preserve">
          <source>Brackets</source>
          <target state="translated">Brackets</target>
        </trans-unit>
        <trans-unit id="c53284da9f760cfe1b6f6b9f75108f3e5f34245e" translate="yes" xml:space="preserve">
          <source>Brackets are used as the array constructor.</source>
          <target state="translated">括弧は配列のコンストラクタとして使用されます。</target>
        </trans-unit>
        <trans-unit id="2f1e60578f3cd76d5527fed043c9442139cd2cd3" translate="yes" xml:space="preserve">
          <source>Break statement</source>
          <target state="translated">ブレークステートメント</target>
        </trans-unit>
        <trans-unit id="d1d87f5d380c5544ae2b99408021a09200064c57" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop may cause a driver error for subsequenct queries</source>
          <target state="translated">ループ中に fastRows()イテレータを破ると、それ以降のクエリでドライバエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="92dfea6701a2e5d171a443f8460c4a24dd0ec577" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop may cause a driver error for subsequent queries</source>
          <target state="translated">ループ中に fastRows()イテレータを壊すと、後続のクエリでドライバエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ec4a222af9465c04b4a8d052175ff58043442831" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop will cause the next database query to raise a DbError exception &lt;code&gt;unable to close due to ...&lt;/code&gt;.</source>
          <target state="translated">ループ中にfastRows（）イテレータを中断すると、次のデータベースクエリでDbError例外が発生 &lt;code&gt;unable to close due to ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c7a0ef890af1a51c57cdb3dba04d6c6a9bbd34e" translate="yes" xml:space="preserve">
          <source>Breaking the fastRows() iterator during a loop will cause the next database query to raise an [EDb] exception &lt;code&gt;Commands out of sync&lt;/code&gt;.</source>
          <target state="translated">ループ中にfastRows（）イテレータを中断すると、次のデータベースクエリで[EDb]例外 &lt;code&gt;Commands out of sync&lt;/code&gt; 非同期になります。</target>
        </trans-unit>
        <trans-unit id="88ef6d554e200c65037cdff380b915a64904dc3d" translate="yes" xml:space="preserve">
          <source>Breaks &lt;code&gt;x&lt;/code&gt; into an integer and a fractional part.</source>
          <target state="translated">休憩は、 &lt;code&gt;x&lt;/code&gt; は整数と小数部分に。</target>
        </trans-unit>
        <trans-unit id="3a9c84b3329de1f9c1a856698aa2ec5cff34e5ad" translate="yes" xml:space="preserve">
          <source>Breaks &lt;em&gt;x&lt;/em&gt; into an integral and a fractional part.</source>
          <target state="translated">ブレークは、&lt;em&gt;xは&lt;/em&gt;整数と小数部分に。</target>
        </trans-unit>
        <trans-unit id="8b6724e85f24d7713d447fc9d1ecbadafa7df149" translate="yes" xml:space="preserve">
          <source>Breaks this node into two nodes at the specified offset, keeping both in the tree as siblings.</source>
          <target state="translated">このノードを、指定されたオフセットで 2 つのノードに分割し、ツリー内の両方を兄弟として保持します。</target>
        </trans-unit>
        <trans-unit id="b1c6e301a203fc1f42bfae18ff5d110264334219" translate="yes" xml:space="preserve">
          <source>Build Nim from the released tarball at &lt;a href=&quot;https://nim-lang.org/install_unix.html&quot;&gt;https://nim-lang.org/install_unix.html&lt;/a&gt; It is different from the GitHub sources as it contains Nimble, C sources &amp;amp; other tools.</source>
          <target state="translated">&lt;a href=&quot;https://nim-lang.org/install_unix.html&quot;&gt;https://nim-lang.org/install_unix.htmlで&lt;/a&gt;リリースされたtarballからNimをビルドします。Nimble、Cソース、その他のツールが含まれているため、GitHubソースとは異なります。</target>
        </trans-unit>
        <trans-unit id="425b1ac3be0544ab3f6c956fa14370b9d4fb8322" translate="yes" xml:space="preserve">
          <source>Build and test examples:</source>
          <target state="translated">事例を構築し、テストする。</target>
        </trans-unit>
        <trans-unit id="6105db3cf340f5af675edd627cef8caebdf987ab" translate="yes" xml:space="preserve">
          <source>Build the project with the required backend (&lt;code&gt;c&lt;/code&gt;, &lt;code&gt;cpp&lt;/code&gt; or &lt;code&gt;js&lt;/code&gt;).</source>
          <target state="translated">必要なバックエンド（ &lt;code&gt;c&lt;/code&gt; 、 &lt;code&gt;cpp&lt;/code&gt; 、または &lt;code&gt;js&lt;/code&gt; ）を使用してプロジェクトをビルドします。</target>
        </trans-unit>
        <trans-unit id="6239081298122df79f8acd6439e80ca8b6b91469" translate="yes" xml:space="preserve">
          <source>Building your first macro</source>
          <target state="translated">初めてのマクロの構築</target>
        </trans-unit>
        <trans-unit id="3e8ed70f8be4621462aaa0c6515ff2813b51f5fe" translate="yes" xml:space="preserve">
          <source>Built-in 8 bit character type (unsigned).</source>
          <target state="translated">8 ビット文字型(符号なし)を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="d0e4bb2ec5a9f321360d340aa98fa8fc357a5ecd" translate="yes" xml:space="preserve">
          <source>Built-in bit sets.</source>
          <target state="translated">ビットセットを内蔵しています。</target>
        </trans-unit>
        <trans-unit id="65be2ba6ba34a613775ad1ef307c0c4f1a1ace18" translate="yes" xml:space="preserve">
          <source>Built-in boolean type.</source>
          <target state="translated">ビルトインのブーリアン型。</target>
        </trans-unit>
        <trans-unit id="4d06ed00ef17ef1e10dba77fdf26d5fb44bca6fd" translate="yes" xml:space="preserve">
          <source>Built-in cstring (&lt;em&gt;compatible string&lt;/em&gt;) type.</source>
          <target state="translated">組み込みのcstring（&lt;em&gt;互換性のある文字列&lt;/em&gt;）タイプ。</target>
        </trans-unit>
        <trans-unit id="7127044d2814529864714ad0987233a3a84e732c" translate="yes" xml:space="preserve">
          <source>Built-in generic traced pointer type.</source>
          <target state="translated">汎用トレースされたポインタ型を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="5d5295b329376e18228e714de4d8092cad23e734" translate="yes" xml:space="preserve">
          <source>Built-in generic untraced pointer type.</source>
          <target state="translated">汎用のアントレースポインタ型を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="646a6e4f96059c15c08aa818c66b65c410dfb9b2" translate="yes" xml:space="preserve">
          <source>Built-in macro for a longer expression.</source>
          <target state="translated">より長い式のための組み込みマクロ。</target>
        </trans-unit>
        <trans-unit id="4d613da9be22e4083b43024dca2bbeaca3d83302" translate="yes" xml:space="preserve">
          <source>Built-in macros</source>
          <target state="translated">内蔵マクロ</target>
        </trans-unit>
        <trans-unit id="9ec0870de57bcb7efeb33ce2aa50461e813df805" translate="yes" xml:space="preserve">
          <source>Built-in pointer type, use the &lt;code&gt;addr&lt;/code&gt; operator to get a pointer to a variable.</source>
          <target state="translated">組み込みのポインター型 &lt;code&gt;addr&lt;/code&gt; 演算子を使用して変数へのポインターを取得します。</target>
        </trans-unit>
        <trans-unit id="fa79fb89b65a5236aeedf9b1f36d6334f0c840e4" translate="yes" xml:space="preserve">
          <source>Built-in string type.</source>
          <target state="translated">文字列型を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="b5a84b589b9501cdc3df0931004c7cc42b59cde3" translate="yes" xml:space="preserve">
          <source>Builtin 'addr' operator for taking the address of a memory location. Cannot be overloaded.</source>
          <target state="translated">メモリロケーションのアドレスを取得するための組み込みの 'addr' オペレータ。オーバーロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="c463568500df5b37582c13d23e61bcb20c8accaa" translate="yes" xml:space="preserve">
          <source>Builtin 'addr' operator for taking the address of a memory location. This works even for &lt;code&gt;let&lt;/code&gt; variables or parameters for better interop with C and so it is considered even more unsafe than the ordinary &lt;code&gt;addr&lt;/code&gt;. When you use it to write a wrapper for a C library, you should always check that the original library does never write to data behind the pointer that is returned from this procedure. Cannot be overloaded.</source>
          <target state="translated">メモリ位置のアドレスを取得するための組み込みの「addr」演算子。これは、Cとの相互運用性を向上 &lt;code&gt;let&lt;/code&gt; 変数またはパラメーターでも機能するため、通常の &lt;code&gt;addr&lt;/code&gt; よりも安全ではないと見なされています。これを使用してCライブラリのラッパーを書き込む場合は、元のライブラリがこのプロシージャから返されるポインターの背後にあるデータに決して書き込みを行わないことを常に確認する必要があります。オーバーロードできません。</target>
        </trans-unit>
        <trans-unit id="02abd247a52649736e90ac14a2597768345f54d0" translate="yes" xml:space="preserve">
          <source>Builtin &lt;code&gt;addr&lt;/code&gt; operator for taking the address of a memory location. Cannot be overloaded.</source>
          <target state="translated">メモリ位置のアドレスを取得するための組み込み &lt;code&gt;addr&lt;/code&gt; 演算子。オーバーロードできません。</target>
        </trans-unit>
        <trans-unit id="c458483a53d78912c35d5582c6f726c4b66114cd" translate="yes" xml:space="preserve">
          <source>Builtin &lt;code&gt;addr&lt;/code&gt; operator for taking the address of a memory location. This works even for &lt;code&gt;let&lt;/code&gt; variables or parameters for better interop with C and so it is considered even more unsafe than the ordinary &lt;a href=&quot;#addr,T&quot;&gt;addr&lt;/a&gt;.</source>
          <target state="translated">メモリ位置のアドレスを取得するための組み込み &lt;code&gt;addr&lt;/code&gt; 演算子。これは、Cとの相互運用を改善するために、 &lt;code&gt;let&lt;/code&gt; 変数またはパラメーターに対しても機能するため、通常の&lt;a href=&quot;#addr,T&quot;&gt;addr&lt;/a&gt;よりもさらに安全でないと見なされます。</target>
        </trans-unit>
        <trans-unit id="a34810e9142b9d5a0e3c3cc7aae9f540410eb0d9" translate="yes" xml:space="preserve">
          <source>Builtin &lt;code&gt;typeof&lt;/code&gt; operation for accessing the type of an expression. Since version 0.20.0.</source>
          <target state="translated">式の型にアクセスするための組み込みの &lt;code&gt;typeof&lt;/code&gt; 操作。バージョン0.20.0以降。</target>
        </trans-unit>
        <trans-unit id="d252856e7b8f7cb24e0ef5cd62b3c907f444c920" translate="yes" xml:space="preserve">
          <source>Builtin &lt;span id=&quot;roof_1&quot;&gt;roof&lt;/span&gt; operator that can be used for convenient array access. &lt;code&gt;a[^x]&lt;/code&gt; is a shortcut for &lt;code&gt;a[a.len-x]&lt;/code&gt;.</source>
          <target state="translated">便利なアレイアクセスに使用できるビルトイン&lt;span id=&quot;roof_1&quot;&gt;ルーフ&lt;/span&gt;オペレーター。 &lt;code&gt;a[^x]&lt;/code&gt; は &lt;code&gt;a[a.len-x]&lt;/code&gt; ショートカットです。</target>
        </trans-unit>
        <trans-unit id="f8ca99ea406ea54b032b966a06afdbf917b785d6" translate="yes" xml:space="preserve">
          <source>But a &lt;code&gt;bind&lt;/code&gt; is rarely useful because symbol binding from the definition scope is the default.</source>
          <target state="translated">ただし、定義スコープからのシンボルバインディングがデフォルトであるため、 &lt;code&gt;bind&lt;/code&gt; が役立つことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="d2aaa951fc05f6eba90875db2cec5edd9af5fd50" translate="yes" xml:space="preserve">
          <source>But even if &lt;a href=&quot;#readRow,CsvParser,int&quot;&gt;readRow&lt;/a&gt; arrived at EOF then processed rows counter is incremented.</source>
          <target state="translated">ただし、&lt;a href=&quot;#readRow,CsvParser,int&quot;&gt;readRow&lt;/a&gt;がEOFに到達した場合でも、処理された行のカウンターは増分されます。</target>
        </trans-unit>
        <trans-unit id="f3a68bc3de013b49eccd2fd19fb51ef8acfea012" translate="yes" xml:space="preserve">
          <source>But it seems all this boilerplate code needs to be repeated for the &lt;code&gt;Euro&lt;/code&gt; currency. This can be solved with &lt;a href=&quot;#templates&quot;&gt;templates&lt;/a&gt;.</source>
          <target state="translated">しかし、この定型コードはすべて &lt;code&gt;Euro&lt;/code&gt; 通貨で繰り返す必要があるようです。これは&lt;a href=&quot;#templates&quot;&gt;テンプレート&lt;/a&gt;で解決できます。</target>
        </trans-unit>
        <trans-unit id="6b442f85caf3d7cde4cea2e5e9eb91a280936441" translate="yes" xml:space="preserve">
          <source>But one has to watch out because other overloads might trigger the argument's resolution:</source>
          <target state="translated">しかし、他のオーバーロードが引数の解決の引き金になるかもしれないので注意が必要です。</target>
        </trans-unit>
        <trans-unit id="2c6f1b21d849e8885f596a0b3bfb468b32f81c49" translate="yes" xml:space="preserve">
          <source>But please notice that this is not C++'s weak_ptr, it means the right field is not involved in the reference counting, it is a raw pointer without runtime checks.</source>
          <target state="translated">しかし、これはC++のweak_ptrではなく、右フィールドが参照カウントに関与していないことを意味し、実行時のチェックなしの生ポインタであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c53e0632274551f5aa1f6a36373db50475b33d38" translate="yes" xml:space="preserve">
          <source>But the global symbol can properly be captured by a &lt;code&gt;bind&lt;/code&gt; statement:</source>
          <target state="translated">ただし、グローバルシンボルは &lt;code&gt;bind&lt;/code&gt; ステートメントで適切にキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="527742dcc91f3b4388a5222a890c0118d3a5e0d7" translate="yes" xml:space="preserve">
          <source>But this rule does not apply to procedures or iterators. Here the overloading rules apply:</source>
          <target state="translated">しかし、この規則はプロシージャやイテレータには適用されません。ここでは、オーバーロードのルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="9250d320cadcddd0ef262bd8559df915bc7e0bc6" translate="yes" xml:space="preserve">
          <source>By default Nim's &lt;code&gt;dynlib&lt;/code&gt; pragma causes the compiler to generate &lt;code&gt;GetProcAddress&lt;/code&gt; (or their Unix counterparts) calls to bind to a DLL. With the &lt;code&gt;dynlibOverride&lt;/code&gt; command line switch this can be prevented and then via &lt;code&gt;--passL&lt;/code&gt; the static library can be linked against. For instance, to link statically against Lua this command might work on Linux:</source>
          <target state="translated">デフォルトでは、Nimの &lt;code&gt;dynlib&lt;/code&gt; プラグマにより、コンパイラーはDLLにバインドするための &lt;code&gt;GetProcAddress&lt;/code&gt; （またはそれらのUnix対応）呼び出しを生成します。 &lt;code&gt;dynlibOverride&lt;/code&gt; 経由でコマンドラインスイッチ、これはその後、防止することができる &lt;code&gt;--passL&lt;/code&gt; 静的ライブラリはに対してリンクすることができます。たとえば、Luaに対して静的にリンクするには、このコマンドがLinuxで機能する場合があります。</target>
        </trans-unit>
        <trans-unit id="d02d9c4acff9cf60b68f15e507f7e43cd5939742" translate="yes" xml:space="preserve">
          <source>By default a debug version is created, passing this option will force a release build, which is much faster and should be preferred unless you are debugging the compiler.</source>
          <target state="translated">デフォルトではデバッグバージョンが作成されますが、このオプションを渡すと強制的にリリースビルドが行われます。</target>
        </trans-unit>
        <trans-unit id="48b684a5792df5c5364095950ec05af76390e113" translate="yes" xml:space="preserve">
          <source>By default c2nim marks every top level identifier (proc name, variable, etc.) as exported (the export marker is &lt;code&gt;*&lt;/code&gt; in Nim). With the &lt;code&gt;#private&lt;/code&gt; directive identifiers can be marked as private so that the resulting Nim module does not export them. The &lt;code&gt;#private&lt;/code&gt; directive takes a PEG pattern:</source>
          <target state="translated">デフォルトでは、c2nimはすべての最上位の識別子（プロシージャ名、変数など）をエクスポート済みとしてマークします（エクスポートマーカーはNimでは &lt;code&gt;*&lt;/code&gt; ）。 &lt;code&gt;#private&lt;/code&gt; ディレクティブを使用すると、識別子をプライベートとしてマークして、結果のNimモジュールがそれらをエクスポートしないようにすることができます。 &lt;code&gt;#private&lt;/code&gt; のディレクティブは、PEGパターンを取ります。</target>
        </trans-unit>
        <trans-unit id="0de21675c01f240e6592367c51b6d906f03a3d78" translate="yes" xml:space="preserve">
          <source>By default the Nim compiler generates a large amount of runtime checks aiming for your debugging pleasure. With &lt;code&gt;-d:release&lt;/code&gt; these checks are &lt;a href=&quot;nimc#compiler-usage-compile-time-symbols&quot;&gt;turned off and optimizations are turned on&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、Nimコンパイラーは、デバッグの目的で大量のランタイムチェックを生成します。 &lt;code&gt;-d:release&lt;/code&gt; これらのチェックがされて&lt;a href=&quot;nimc#compiler-usage-compile-time-symbols&quot;&gt;オフにし、最適化がオンになっています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="53714c20b023fb0e9acbdf38f380565e04810da2" translate="yes" xml:space="preserve">
          <source>By default the documentation will be built in parallel using the number of available CPU cores. If any documentation build sub commands fail, they will be rerun in serial fashion so that meaninful error output can be gathered for inspection. The &lt;code&gt;--parallelBuild:n&lt;/code&gt; switch or configuration option can be used to force a specific number of parallel jobs or run everything serially from the start (&lt;code&gt;n == 1&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、使用可能なCPUコアの数を使用して、ドキュメントが並行してビルドされます。ドキュメンテーションビルドサブコマンドが失敗した場合、それらは逐次実行されるため、意味のあるエラー出力を収集して検査することができます。 &lt;code&gt;--parallelBuild:n&lt;/code&gt; スイッチまたは構成オプションが開始（から並列ジョブまたは連続ランのすべての特定の数を強制するために使用することができる &lt;code&gt;n == 1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a12f023f59a39b1f378be96457f00762035b5df" translate="yes" xml:space="preserve">
          <source>By default, c2nim translates an &lt;code&gt;#include&lt;/code&gt; that is not followed by &lt;code&gt;&amp;lt;&lt;/code&gt; (like in &lt;code&gt;#include &amp;lt;stdlib&amp;gt;&lt;/code&gt;) to a Nim &lt;code&gt;import&lt;/code&gt; statement. This directive tells c2nim to just skip any &lt;code&gt;#include&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、c2nim は、 &lt;code&gt;&amp;lt;&lt;/code&gt; が後にない &lt;code&gt;#include&lt;/code&gt; を（ &lt;code&gt;#include &amp;lt;stdlib&amp;gt;&lt;/code&gt; のように）Nim &lt;code&gt;import&lt;/code&gt; ステートメントに変換します。このディレクティブは、 &lt;code&gt;#include&lt;/code&gt; をスキップするようにc2nimに指示します。</target>
        </trans-unit>
        <trans-unit id="5fae71acbfd2891a1634971f65ec8cdeff58500b" translate="yes" xml:space="preserve">
          <source>By default, during overload resolution each named type class will bind to exactly one concrete type. We call such type classes &lt;span id=&quot;bind-once_1&quot;&gt;bind once&lt;/span&gt; types. Here is an example taken directly from the system module to illustrate this:</source>
          <target state="translated">デフォルトでは、オーバーロードの解決時に、名前付きの各型クラスは1つの具象型にバインドされます。そのような型クラスは&lt;span id=&quot;bind-once_1&quot;&gt;、一度&lt;/span&gt;型を&lt;span id=&quot;bind-once_1&quot;&gt;バインド&lt;/span&gt;と呼びます。これを説明するためにシステムモジュールから直接取得した例を次に示します。</target>
        </trans-unit>
        <trans-unit id="1bd5db0c9726c51e144188986701bb88fa502968" translate="yes" xml:space="preserve">
          <source>By default, during overload resolution, each named type class will bind to exactly one concrete type. We call such type classes &lt;span id=&quot;bind-once_1&quot;&gt;bind once&lt;/span&gt; types. Here is an example taken directly from the system module to illustrate this:</source>
          <target state="translated">デフォルトでは、オーバーロードの解決中に、名前付きの各型クラスは1つの具象型にバインドされます。このような型クラスを&lt;span id=&quot;bind-once_1&quot;&gt;バインドワンス&lt;/span&gt;型と呼びます。これを説明するために、システムモジュールから直接取得した例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c165bd9a4fd3932727fffa2e511a0f94d416cdfa" translate="yes" xml:space="preserve">
          <source>By default, log messages are written to &lt;code&gt;stdout&lt;/code&gt;. If &lt;code&gt;useStderr&lt;/code&gt; is true, they are written to &lt;code&gt;stderr&lt;/code&gt; instead.</source>
          <target state="translated">デフォルトでは、ログメッセージは &lt;code&gt;stdout&lt;/code&gt; に書き込まれます。場合 &lt;code&gt;useStderr&lt;/code&gt; が真である、彼らはして書かれている &lt;code&gt;stderr&lt;/code&gt; の代わりに。</target>
        </trans-unit>
        <trans-unit id="73cb09bc05777230e6e5fe1e7143a2c142ee2d0d" translate="yes" xml:space="preserve">
          <source>By default, the compiler will report the matching errors in concepts only when no other overload can be selected and a normal compilation error is produced. When you need to understand why the compiler is not matching a particular concept and, as a result, a wrong overload is selected, you can apply the &lt;code&gt;explain&lt;/code&gt; pragma to either the concept body or a particular call-site.</source>
          <target state="translated">デフォルトでは、他のオーバーロードを選択できず、通常のコンパイルエラーが生成された場合にのみ、コンパイラーは概念の一致エラーを報告します。コンパイラが特定の概念に一致しない理由を理解する必要があり、その結果、誤ったオーバーロードが選択された場合は、 &lt;code&gt;explain&lt;/code&gt; プラグマを概念本体または特定の呼び出しサイトのいずれかに適用できます。</target>
        </trans-unit>
        <trans-unit id="ce076fc6b60944a50c556b7cb8842a3fd618af41" translate="yes" xml:space="preserve">
          <source>By default, the documentation will be built in parallel using the number of available CPU cores. If any documentation build sub-commands fail, they will be rerun in serial fashion so that meaningful error output can be gathered for inspection. The &lt;code&gt;--parallelBuild:n&lt;/code&gt; switch or configuration option can be used to force a specific number of parallel jobs or run everything serially from the start (&lt;code&gt;n == 1&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、ドキュメントは使用可能なCPUコアの数を使用して並行して作成されます。ドキュメント作成サブコマンドが失敗した場合、それらはシリアル方式で再実行されるため、意味のあるエラー出力を収集して検査できます。 &lt;code&gt;--parallelBuild:n&lt;/code&gt; スイッチまたは構成オプションが開始（から並列ジョブまたは連続ランのすべての特定の数を強制するために使用することができる &lt;code&gt;n == 1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3bc915d56470000f0f72d622e0d86dfbdb9596d8" translate="yes" xml:space="preserve">
          <source>By default, this module use compiler intrinsics where possible to improve performance on supported compilers: &lt;code&gt;GCC&lt;/code&gt;, &lt;code&gt;LLVM_GCC&lt;/code&gt;, &lt;code&gt;CLANG&lt;/code&gt;, &lt;code&gt;VCC&lt;/code&gt;, &lt;code&gt;ICC&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、このモジュールは可能な場合はコンパイラ組み込み関数を使用して、サポートされているコンパイラ（ &lt;code&gt;GCC&lt;/code&gt; 、 &lt;code&gt;LLVM_GCC&lt;/code&gt; 、 &lt;code&gt;CLANG&lt;/code&gt; 、 &lt;code&gt;VCC&lt;/code&gt; 、 &lt;code&gt;ICC&lt;/code&gt; )のパフォーマンスを向上させます。</target>
        </trans-unit>
        <trans-unit id="5874a01a1d61f5dd8c55f8d513a2030c5f6a76f2" translate="yes" xml:space="preserve">
          <source>By default, uses the IEC/ISO standard binary prefixes, so 1024 will be formatted as 1KiB. Set prefix to &lt;code&gt;bpColloquial&lt;/code&gt; to use the colloquial names from the SI standard (e.g. k for 1000 being reused as 1024).</source>
          <target state="translated">デフォルトでは、IEC / ISO標準のバイナリプレフィックスを使用するため、1024は1KiBとしてフォーマットされます。プレフィックスを &lt;code&gt;bpColloquial&lt;/code&gt; に設定して、SI標準の口語名を使用します（たとえば、1000の場合はkを1024として再利用します）。</target>
        </trans-unit>
        <trans-unit id="80f5e65dfa0cd584e698223d82de76d94317241e" translate="yes" xml:space="preserve">
          <source>By default, uses the IEC/ISO standard binary prefixes, so 1024 will be formatted as 1KiB. Set prefix to &lt;em&gt;bpColloquial&lt;/em&gt; to use the colloquial names from the SI standard (e.g. k for 1000 being reused as 1024).</source>
          <target state="translated">デフォルトでは、IEC / ISO標準のバイナリプレフィックスを使用するため、1024は1KiBとしてフォーマットされます。プレフィックスを&lt;em&gt;bpColloquial&lt;/em&gt;に設定して、SI標準の口語名を使用します（たとえば、1000のkは1024として再利用されます）。</target>
        </trans-unit>
        <trans-unit id="539e3bc3fae1062303c42ab279a8b84e953e54e7" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;{}&lt;/code&gt; operator instead of &lt;code&gt;[]&lt;/code&gt;, it will return &lt;code&gt;nil&lt;/code&gt; when the field is not found. The &lt;code&gt;get&lt;/code&gt;-family of procedures will return a type's default value when called on &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; の代わりに &lt;code&gt;{}&lt;/code&gt; 演算子を使用すると、フィールドが見つからない場合に &lt;code&gt;nil&lt;/code&gt; が返されます。プロシージャの &lt;code&gt;get&lt;/code&gt; ファミリは、 &lt;code&gt;nil&lt;/code&gt; で呼び出されると、型のデフォルト値を返します。</target>
        </trans-unit>
        <trans-unit id="bc61bfc923f0134f76f08848fd47d85a5225ef86" translate="yes" xml:space="preserve">
          <source>Bycopy pragma</source>
          <target state="translated">バイコピープラグマ</target>
        </trans-unit>
        <trans-unit id="dc786d2e8550e65dba6f478b2c981035a039ff49" translate="yes" xml:space="preserve">
          <source>Byref pragma</source>
          <target state="translated">バイレフプラグマ</target>
        </trans-unit>
        <trans-unit id="e373e36949fb915e82bd278056c90511b6ce4a56" translate="yes" xml:space="preserve">
          <source>C implementation: &lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&lt;/a&gt;</source>
          <target state="translated">C実装：&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt;http&lt;/a&gt; : //xoroshiro.di.unimi.it/xoroshiro128plus.c</target>
        </trans-unit>
        <trans-unit id="fbf459b1966378eb6b198b4db1484574fc622a26" translate="yes" xml:space="preserve">
          <source>C invocation example</source>
          <target state="translated">C 呼び出しの例</target>
        </trans-unit>
        <trans-unit id="cef9b186930ae3fbcdf84f2ca1df6e923c10face" translate="yes" xml:space="preserve">
          <source>C to Nim source converter. Translates C header files to Nim.</source>
          <target state="translated">CからNimへのソースコンバータ。CヘッダファイルをNimに変換します。</target>
        </trans-unit>
        <trans-unit id="aa0b476ef445e23e653ff55250eadd2a609d86ee" translate="yes" xml:space="preserve">
          <source>C's &lt;code&gt;,&lt;/code&gt; operator (comma operator) is not supported.</source>
          <target state="translated">Cさん &lt;code&gt;,&lt;/code&gt; オペレータ（カンマ演算子）がサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6e567e8ea65384f4c7990dd6fd015e5dc179fcdc" translate="yes" xml:space="preserve">
          <source>C's &lt;code&gt;union&lt;/code&gt; are translated to Nim's objects and only the first field is included in the object type. This way there is a high chance that it is binary compatible to the union.</source>
          <target state="translated">Cの &lt;code&gt;union&lt;/code&gt; はNimのオブジェクトに変換され、最初のフィールドのみがオブジェクトタイプに含まれます。このようにすると、それはユニオンとバイナリ互換性がある可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="8f522347c60c0922b17da1143403e53d860a58d2" translate="yes" xml:space="preserve">
          <source>C2nim</source>
          <target state="translated">C2nim</target>
        </trans-unit>
        <trans-unit id="e30429156ee1bdfd86745856df31c480281c0a60" translate="yes" xml:space="preserve">
          <source>CA certificates will be loaded, in the following order, from:</source>
          <target state="translated">CA 証明書は、以下の順序で、から読み込まれます。</target>
        </trans-unit>
        <trans-unit id="f30d6a6fe6e12777a78cd63942d1e0466d7744a4" translate="yes" xml:space="preserve">
          <source>CANNOT BE int64 BECAUSE OF ALIGNMENT</source>
          <target state="translated">整列のため int64 にはできません。</target>
        </trans-unit>
        <trans-unit id="c5a976de7b5231fa616fbeac8a2d2805c1e84ee2" translate="yes" xml:space="preserve">
          <source>CC</source>
          <target state="translated">CC</target>
        </trans-unit>
        <trans-unit id="c7d31e510c2dd21894a67a0706ad494d4eb75c88" translate="yes" xml:space="preserve">
          <source>CC:</source>
          <target state="translated">CC:</target>
        </trans-unit>
        <trans-unit id="81c4c3f167744f414a9cd938ea6be32af232e330" translate="yes" xml:space="preserve">
          <source>CPU:</source>
          <target state="translated">CPU:</target>
        </trans-unit>
        <trans-unit id="021835eaa55239efbd1c365dd862066efe9e028c" translate="yes" xml:space="preserve">
          <source>CR:</source>
          <target state="translated">CR:</target>
        </trans-unit>
        <trans-unit id="f9fb5345c7f478c6158ec97420f8fac8b9dff741" translate="yes" xml:space="preserve">
          <source>Calculate the arc tangent of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; のアークタンジェントを計算します。</target>
        </trans-unit>
        <trans-unit id="40863f6894ffed6203064b2268d6d7d14c067386" translate="yes" xml:space="preserve">
          <source>Calculate the arc tangent of &lt;code&gt;y&lt;/code&gt; / &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; / &lt;code&gt;x&lt;/code&gt; の円弧接線を計算します。</target>
        </trans-unit>
        <trans-unit id="dfa0a6adb0d6b924e9559526a04fdb494693340f" translate="yes" xml:space="preserve">
          <source>Calculate the arc tangent of &lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt; / &lt;em&gt;xの&lt;/em&gt;逆正接を計算する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a5de1a650a2f08daab441e97db705f2a8290b44f" translate="yes" xml:space="preserve">
          <source>Calculate the arc tangent of &lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x&lt;/em&gt;. &lt;em&gt;atan2&lt;/em&gt; returns the arc tangent of &lt;em&gt;y&lt;/em&gt; / &lt;em&gt;x&lt;/em&gt;; it produces correct results even when the resulting angle is near pi/2 or -pi/2 (&lt;em&gt;x&lt;/em&gt; near 0).</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt; / &lt;em&gt;xの&lt;/em&gt;逆正接を計算します。&lt;em&gt;atan2&lt;/em&gt;は、&lt;em&gt;y&lt;/em&gt; / &lt;em&gt;xの&lt;/em&gt;逆正接を返します。結果の角度がpi / 2または-pi / 2（&lt;em&gt;xが&lt;/em&gt; 0に近い）であっても、正しい結果が生成されます。</target>
        </trans-unit>
        <trans-unit id="56ec6774caee72173cca3d600df6df4ad5cea2f4" translate="yes" xml:space="preserve">
          <source>Calculate the bit parity in integer. If number of 1-bit is odd parity is 1, otherwise 0.</source>
          <target state="translated">整数のビットパリティを計算します。1ビットが奇数の場合は1、そうでない場合は0となります。</target>
        </trans-unit>
        <trans-unit id="5200ee202ed095b105f82193002b555bbccbcc8c" translate="yes" xml:space="preserve">
          <source>Calculate the reciprocal of &lt;code&gt;x&lt;/code&gt;. (1/x)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の逆数を計算します。（1 / x）</target>
        </trans-unit>
        <trans-unit id="24670fb674da2394dd2a0f4959fd3a294516adae" translate="yes" xml:space="preserve">
          <source>Calculate the reciprocal of &lt;em&gt;x&lt;/em&gt;. (1/x)</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;の逆数を計算します。（1 / x）</target>
        </trans-unit>
        <trans-unit id="e72cf049af801ad9710e70e7843e83615163e6f2" translate="yes" xml:space="preserve">
          <source>Calculates the best rational numerator and denominator that approximates to &lt;code&gt;x&lt;/code&gt;, where the denominator is smaller than &lt;code&gt;n&lt;/code&gt; (default is the largest possible int to give maximum resolution).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; に近似する最良の有理分子と分母を計算します。ここで、分母は &lt;code&gt;n&lt;/code&gt; よりも小さくなります（デフォルトは、最大の解像度を与えるために可能な最大のintです）。</target>
        </trans-unit>
        <trans-unit id="932f4eb5f8468f8594b47ae0aae880a0c60dbe3e" translate="yes" xml:space="preserve">
          <source>Calculates the best rational numerator and denominator that approximates to &lt;em&gt;x&lt;/em&gt;, where the denominator is smaller than &lt;em&gt;n&lt;/em&gt; (default is the largest possible int to give maximum resolution).</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;に近似する最良の有理分子と分母を計算します。ここで、分母は&lt;em&gt;n&lt;/em&gt;より小さい（デフォルトは、最大の解像度を与えるために可能な最大のintです）。</target>
        </trans-unit>
        <trans-unit id="3010c6d2f4fa47d3ebb08435fd6265b2c82ae435" translate="yes" xml:space="preserve">
          <source>Calculates the next lexicographic permutation, directly modifying &lt;code&gt;x&lt;/code&gt;. The result is whether a permutation happened, otherwise we have reached the last-ordered permutation.</source>
          <target state="translated">次の辞書編集順列を計算し、 &lt;code&gt;x&lt;/code&gt; を直接変更します。結果は、順列が発生したかどうかです。それ以外の場合は、最後に並べられた順列に到達しました。</target>
        </trans-unit>
        <trans-unit id="5f976195c3fc663bad97ef801aef0e1d1cbc7bd6" translate="yes" xml:space="preserve">
          <source>Calculates the precedence of the given token.</source>
          <target state="translated">指定されたトークンの優先順位を計算します。</target>
        </trans-unit>
        <trans-unit id="926f466377c398ffb795b1c416217100d99d20d7" translate="yes" xml:space="preserve">
          <source>Calculates the previous lexicographic permutation, directly modifying &lt;code&gt;x&lt;/code&gt;. The result is whether a permutation happened, otherwise we have reached the first-ordered permutation.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を直接変更して、以前の辞書式順列を計算します。結果は、順列が発生したかどうかです。それ以外の場合は、最初の順序の順列に到達しました。</target>
        </trans-unit>
        <trans-unit id="f5b27c0795360d24a64c7b68bf2cc3b1338d3199" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;cbproc&lt;/code&gt; &quot;soon&quot;.</source>
          <target state="translated">&lt;code&gt;cbproc&lt;/code&gt; を「すぐに」呼び出します。</target>
        </trans-unit>
        <trans-unit id="84d304f2b904b35b522de55a826de5867caa6df2" translate="yes" xml:space="preserve">
          <source>Call this if a terminator character other than a new line is scanned at &lt;code&gt;pos&lt;/code&gt;; it returns the position to continue the scanning from.</source>
          <target state="translated">改行以外のターミネータ文字が &lt;code&gt;pos&lt;/code&gt; でスキャンされる場合は、これを呼び出します。スキャンを続行する位置を返します。</target>
        </trans-unit>
        <trans-unit id="6a13fc8f9f9bd7304b4aab62079c70cc7b16bcf3" translate="yes" xml:space="preserve">
          <source>Call this if you registered a callback that will be run from a thread not under your control. This has a cheap thread-local guard, so the GC for this thread will only be initialized once per thread, no matter how often it is called.</source>
          <target state="translated">制御下にないスレッドから実行されるコールバックを登録した場合に呼び出します。これは安価なスレッドローカルガードを持っているので、このスレッドのGCは何度呼び出されてもスレッドごとに1回だけ初期化されます。</target>
        </trans-unit>
        <trans-unit id="b9cb6068c9a857a423f0de54fa269f1d59df6ff4" translate="yes" xml:space="preserve">
          <source>Call this if you scanned over 'L' in the buffer; it returns the position to continue the scanning from. &lt;code&gt;pos&lt;/code&gt; must be the position of the 'L'.</source>
          <target state="translated">バッファ内の「L」をスキャンした場合は、これを呼び出します。スキャンを続行する位置を返します。 &lt;code&gt;pos&lt;/code&gt; は「L」の位置でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3ced0e76c83f56c5d573ca3272434ebf912be391" translate="yes" xml:space="preserve">
          <source>Call this if you scanned over 'L' in the buffer; it returns the the position to continue the scanning from. &lt;em&gt;pos&lt;/em&gt; must be the position of the 'L'.</source>
          <target state="translated">バッファ内の「L」をスキャンした場合は、これを呼び出します。スキャンを続行する位置を返します。&lt;em&gt;pos&lt;/em&gt;は「L」の位置でなければなりません。</target>
        </trans-unit>
        <trans-unit id="29404f8751c519a7d7a4adc2066cbb06cdb19a8c" translate="yes" xml:space="preserve">
          <source>Call this if you scanned over 'c' in the buffer; it returns the position to continue the scanning from. &lt;code&gt;pos&lt;/code&gt; must be the position of the 'c'.</source>
          <target state="translated">バッファ内の「c」をスキャンした場合は、これを呼び出します。スキャンを続行する位置を返します。 &lt;code&gt;pos&lt;/code&gt; は「c」の位置でなければなりません。</target>
        </trans-unit>
        <trans-unit id="77d5fa0614be1a0c2dc98ca10137b9644cb75099" translate="yes" xml:space="preserve">
          <source>Call this if you scanned over 'c' in the buffer; it returns the the position to continue the scanning from. &lt;em&gt;pos&lt;/em&gt; must be the position of the 'c'.</source>
          <target state="translated">バッファ内の「c」をスキャンした場合は、これを呼び出します。スキャンを続行する位置を返します。&lt;em&gt;pos&lt;/em&gt;は 'c'の位置でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f21745124763c19ea8e78a092e50de40b438ac2b" translate="yes" xml:space="preserve">
          <source>Call this to tear down the GC, previously initialized by &lt;code&gt;setupForeignThreadGc&lt;/code&gt;. If GC has not been previously initialized, or has already been torn down, the call does nothing.</source>
          <target state="translated">これを呼び出して、以前に &lt;code&gt;setupForeignThreadGc&lt;/code&gt; によって初期化されたGCを破棄します。GCが以前に初期化されていない場合、またはすでに破棄されている場合、呼び出しは何もしません。</target>
        </trans-unit>
        <trans-unit id="1ef18f3ccda6fa4b7049be2ee5f84665bbb0ce03" translate="yes" xml:space="preserve">
          <source>Call user defined proc &lt;code&gt;foo&lt;/code&gt; to &lt;strong&gt;skip&lt;/strong&gt; some optional parts in the input string. See below for more details.</source>
          <target state="translated">ユーザー定義のproc &lt;code&gt;foo&lt;/code&gt; を呼び出して、入力文字列の一部のオプション部分を&lt;strong&gt;スキップし&lt;/strong&gt;ます。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="02241663160dcc2a31527f886c0c708b65f901d7" translate="yes" xml:space="preserve">
          <source>Call with &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;()&lt;/code&gt; で呼び出す</target>
        </trans-unit>
        <trans-unit id="da6c999c007bfe15edd1f0f081d6f9072a370ddb" translate="yes" xml:space="preserve">
          <source>Call with named arguments</source>
          <target state="translated">名前付き引数での呼び出し</target>
        </trans-unit>
        <trans-unit id="4f1be644dd81e7d1af3decb76997fc722787c242" translate="yes" xml:space="preserve">
          <source>Call with raw string literal</source>
          <target state="translated">生の文字列リテラルでの呼び出し</target>
        </trans-unit>
        <trans-unit id="bfcb7c395fc4a2662bfef50abfeba239833faf54" translate="yes" xml:space="preserve">
          <source>Callable type</source>
          <target state="translated">呼び出し可能型</target>
        </trans-unit>
        <trans-unit id="d6a9bd6a90d6905593fcbe3587fd9fc40af85f67" translate="yes" xml:space="preserve">
          <source>Calling a procedure can be done in many different ways:</source>
          <target state="translated">手技の呼び出しには様々な方法があります。</target>
        </trans-unit>
        <trans-unit id="f026609c17e6af082dd6bc47161a40d8bcada7a1" translate="yes" xml:space="preserve">
          <source>Calling ordinary Nim procs inside the macro is possible:</source>
          <target state="translated">マクロ内で通常のNimプロックを呼び出すことが可能です。</target>
        </trans-unit>
        <trans-unit id="70becbd26dde0f8807c423ab913d05c5fa31c58c" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#debugRecv&quot;&gt;debugRecv&lt;/a&gt; and checks that the received data starts with &lt;code&gt;reply&lt;/code&gt;. If the received data does not start with &lt;code&gt;reply&lt;/code&gt;, then a &lt;code&gt;QUIT&lt;/code&gt; command will be sent to the SMTP server and a &lt;code&gt;ReplyError&lt;/code&gt; exception will be raised.</source>
          <target state="translated">&lt;a href=&quot;#debugRecv&quot;&gt;debugRecv&lt;/a&gt;を呼び出し、受信したデータが &lt;code&gt;reply&lt;/code&gt; 始まることを確認します。受信したデータが &lt;code&gt;reply&lt;/code&gt; で始まらない場合、 &lt;code&gt;QUIT&lt;/code&gt; コマンドがSMTPサーバーに送信され、 &lt;code&gt;ReplyError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a6642199094bd906db4fb13f403e5d9864fe5992" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;styledWrite&lt;/code&gt; and appends a newline at the end.</source>
          <target state="translated">&lt;code&gt;styledWrite&lt;/code&gt; を呼び出し、末尾に改行を追加します。</target>
        </trans-unit>
        <trans-unit id="7e723e08242f8573f5209a7864aabe4641ef9035" translate="yes" xml:space="preserve">
          <source>Calls/expressions</source>
          <target state="translated">Calls/expressions</target>
        </trans-unit>
        <trans-unit id="cfe2ed24a31b4d3b922301946dba17cf4d7769e4" translate="yes" xml:space="preserve">
          <source>Can a &lt;a href=&quot;system#countup&quot;&gt;countup&lt;/a&gt; proc be written that supports this loop? Lets try:</source>
          <target state="translated">このループをサポートする&lt;a href=&quot;system#countup&quot;&gt;カウントアッププロシージャを作成&lt;/a&gt;できますか？やってみよう：</target>
        </trans-unit>
        <trans-unit id="6ea68aca40649bec84e51100241155a05089947b" translate="yes" xml:space="preserve">
          <source>Can be used to &lt;span id=&quot;rename-files_1&quot;&gt;rename files&lt;/span&gt;.</source>
          <target state="translated">&lt;span id=&quot;rename-files_1&quot;&gt;ファイルの名前&lt;/span&gt;を&lt;span id=&quot;rename-files_1&quot;&gt;変更する&lt;/span&gt;ために使用でき&lt;span id=&quot;rename-files_1&quot;&gt;ます&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="e098a1aa7a2297f8e0687c777847e1cc1031e3a2" translate="yes" xml:space="preserve">
          <source>Can be used to convert a pointer type (&lt;code&gt;ptr&lt;/code&gt; or &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;proc&lt;/code&gt;) to an option type. It converts &lt;code&gt;nil&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ポインタ型（ &lt;code&gt;ptr&lt;/code&gt; または &lt;code&gt;ref&lt;/code&gt; または &lt;code&gt;proc&lt;/code&gt; ）をオプション型に変換するために使用できます。 &lt;code&gt;nil&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="311200cff08c958701bc83ae616b08935d475e3d" translate="yes" xml:space="preserve">
          <source>Can be used to convert a pointer type to an option type. It converts &lt;code&gt;nil&lt;/code&gt; to the none-option.</source>
          <target state="translated">ポインター型をオプション型に変換するために使用できます。 &lt;code&gt;nil&lt;/code&gt; をnoneオプションに変換します。</target>
        </trans-unit>
        <trans-unit id="0afa6c0e4e5b1ab775070e4ba72bbcca00e727f3" translate="yes" xml:space="preserve">
          <source>Can be used to determine an &lt;code&gt;on|off&lt;/code&gt; compile-time option. Example:</source>
          <target state="translated">&lt;code&gt;on|off&lt;/code&gt; コンパイル時オプションを決定するために使用できます。例：</target>
        </trans-unit>
        <trans-unit id="f962d1ab7e4766968911e349ef5e3726f27ae349" translate="yes" xml:space="preserve">
          <source>Can be used to determine an enum compile-time option. Example:</source>
          <target state="translated">enumコンパイル時のオプションを決定するために使用することができます。例。</target>
        </trans-unit>
        <trans-unit id="4b2abefce0c7034e7974208ef322652fb4420573" translate="yes" xml:space="preserve">
          <source>Can be used to retrieve the currently executing Nim compiler from a Nim or nimscript program, or the nimble binary inside a nimble program (likewise with other binaries built from compiler API).</source>
          <target state="translated">Nim または nimscript プログラムから現在実行中の Nim コンパイラ、または nimble プログラム内の nimble バイナリを取得するために使用できます (コンパイラ API からビルドされた他のバイナリも同様です)。</target>
        </trans-unit>
        <trans-unit id="7fc37e2ba83c5a802738c4f95b943a51d2c04472" translate="yes" xml:space="preserve">
          <source>CandidateError:</source>
          <target state="translated">CandidateError:</target>
        </trans-unit>
        <trans-unit id="5e2f793d66ae913f4050fcab7a7a679f6bdf4f50" translate="yes" xml:space="preserve">
          <source>CandidateErrors:</source>
          <target state="translated">CandidateErrors:</target>
        </trans-unit>
        <trans-unit id="2a0d46cf3debd852fa12d1144bab7bb595f7c783" translate="yes" xml:space="preserve">
          <source>Cannot be overloaded.</source>
          <target state="translated">過負荷にすることはできません。</target>
        </trans-unit>
        <trans-unit id="73a3789c9cc42ae286b2bc07d22e73c5d6441a2b" translate="yes" xml:space="preserve">
          <source>CannotOpenFile</source>
          <target state="translated">CannotOpenFile</target>
        </trans-unit>
        <trans-unit id="616b9a6b86b53e81909ee21ea670eb0b6c2e5543" translate="yes" xml:space="preserve">
          <source>Capture: Apply expression &lt;code&gt;E&lt;/code&gt; and store the substring that matched &lt;code&gt;E&lt;/code&gt; into a &lt;em&gt;capture&lt;/em&gt; that can be accessed after the matching process.</source>
          <target state="translated">キャプチャ：式 &lt;code&gt;E&lt;/code&gt; を適用し、 &lt;code&gt;E&lt;/code&gt; に一致した部分文字列を、一致プロセス後にアクセスできる&lt;em&gt;キャプチャに&lt;/em&gt;格納します。</target>
        </trans-unit>
        <trans-unit id="a4b36f5e09cea9865cb6993e0accb43f1789f9cd" translate="yes" xml:space="preserve">
          <source>Capture: Apply expression &lt;em&gt;E&lt;/em&gt; and store the substring that matched &lt;em&gt;E&lt;/em&gt; into a &lt;em&gt;capture&lt;/em&gt; that can be accessed after the matching process.</source>
          <target state="translated">キャプチャ：式&lt;em&gt;E&lt;/em&gt;を適用し、&lt;em&gt;E&lt;/em&gt;に一致した部分文字列を、一致プロセス後にアクセスできる&lt;em&gt;キャプチャに&lt;/em&gt;格納します。</target>
        </trans-unit>
        <trans-unit id="a72ab224961b87683db44dce743119365e31ddf6" translate="yes" xml:space="preserve">
          <source>Captured Search: Shorthand for &lt;code&gt;{(!E .)*} E&lt;/code&gt;. (Search loop for the pattern &lt;code&gt;E&lt;/code&gt;.) Everything until and exluding &lt;code&gt;E&lt;/code&gt; is captured.</source>
          <target state="translated">キャプチャされた検索： &lt;code&gt;{(!E .)*} E&lt;/code&gt; 。（パターン &lt;code&gt;E&lt;/code&gt; の検索ループ。） &lt;code&gt;E&lt;/code&gt; を除くすべてがキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="dada321496f3f4fb22895c4b7cd0802a93ca5d72" translate="yes" xml:space="preserve">
          <source>Captured Search: Shorthand for &lt;code&gt;{(!E .)*} E&lt;/code&gt;. (Search loop for the pattern &lt;em&gt;E&lt;/em&gt;.) Everything until and exluding &lt;em&gt;E&lt;/em&gt; is captured.</source>
          <target state="translated">キャプチャーされた検索： &lt;code&gt;{(!E .)*} E&lt;/code&gt; 。（パターン&lt;em&gt;Eの&lt;/em&gt;検索ループ。）&lt;em&gt;E&lt;/em&gt;までと&lt;em&gt;E&lt;/em&gt;を除外するすべてがキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="58721ba126309ca208430cd499d98df05aa97730" translate="yes" xml:space="preserve">
          <source>Card stands for the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cardinality&quot;&gt;cardinality&lt;/a&gt; of a set.</source>
          <target state="translated">カードは、セットの&lt;a href=&quot;http://en.wikipedia.org/wiki/Cardinality&quot;&gt;カーディナリティ&lt;/a&gt;を表します。</target>
        </trans-unit>
        <trans-unit id="f3a52f7d1133fe19bed724efe1bcc5b99763e6ec" translate="yes" xml:space="preserve">
          <source>Case expression</source>
          <target state="translated">ケース表現</target>
        </trans-unit>
        <trans-unit id="ca901f84d981e4405cbb31e5c66f958f39995d61" translate="yes" xml:space="preserve">
          <source>Case statement</source>
          <target state="translated">ケースステートメント</target>
        </trans-unit>
        <trans-unit id="67a5699f66f3a4d73b5d418a7b08b0c7350d984e" translate="yes" xml:space="preserve">
          <source>Case statement macros</source>
          <target state="translated">ケースステートメントマクロ</target>
        </trans-unit>
        <trans-unit id="2645fb173a7db992fd21cca88f29d18792ee8d4e" translate="yes" xml:space="preserve">
          <source>Case-Of Macro</source>
          <target state="translated">ケース・オブ・マクロ</target>
        </trans-unit>
        <trans-unit id="97ba68fc56a3efba444f7c6353ffce14d1fabcb2" translate="yes" xml:space="preserve">
          <source>Cast operator</source>
          <target state="translated">キャストオペレータ</target>
        </trans-unit>
        <trans-unit id="b0e26fedeefa96f14f3e84dc0c5ddc3c896523e2" translate="yes" xml:space="preserve">
          <source>Caution: the body of a for loop over an inline iterator is inlined into each &lt;code&gt;yield&lt;/code&gt; statement appearing in the iterator code, so ideally the code should be refactored to contain a single yield when possible to avoid code bloat.</source>
          <target state="translated">注意：インラインイテレーター上のforループの本体は、イテレーターコードに表示される各 &lt;code&gt;yield&lt;/code&gt; ステートメントにインライン化されるため、コードの膨張を避けるために、可能な場合はコードをリファクタリングして単一のyieldを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="5f275311f3a0139d91a1de5803d2f9c69ca52ce6" translate="yes" xml:space="preserve">
          <source>Cell:</source>
          <target state="translated">Cell:</target>
        </trans-unit>
        <trans-unit id="932dc9ab9b9d67f168ec0a0be95d16a665cfd83b" translate="yes" xml:space="preserve">
          <source>Certificate validation is NOT performed by default. This will change in future.</source>
          <target state="translated">証明書の検証はデフォルトでは行われません。これは将来的に変更される予定です。</target>
        </trans-unit>
        <trans-unit id="2f2137a7c19cd7f3d1fd564acc379454934d385c" translate="yes" xml:space="preserve">
          <source>Certificates can be generated using the following command:</source>
          <target state="translated">証明書は、以下のコマンドで生成することができます。</target>
        </trans-unit>
        <trans-unit id="48fcb8eea5dd8883c71c26e1f4163d2e53159fea" translate="yes" xml:space="preserve">
          <source>Cfile:</source>
          <target state="translated">Cfile:</target>
        </trans-unit>
        <trans-unit id="ca20e5c4843b245cb117a524be1685292db7409c" translate="yes" xml:space="preserve">
          <source>CfileFlag:</source>
          <target state="translated">CfileFlag:</target>
        </trans-unit>
        <trans-unit id="43fbfb93930b08fdbbc458e33d29d69acecd4c59" translate="yes" xml:space="preserve">
          <source>CfileList:</source>
          <target state="translated">CfileList:</target>
        </trans-unit>
        <trans-unit id="b883b50cc0a7ec97e8c1c6aa366453f73a26413f" translate="yes" xml:space="preserve">
          <source>Change current implementation of &lt;code&gt;callSoon&lt;/code&gt;. This is normally called when dispatcher from &lt;code&gt;asyncdispatcher&lt;/code&gt; is initialized.</source>
          <target state="translated">&lt;code&gt;callSoon&lt;/code&gt; の現在の実装を変更します。これは通常、 &lt;code&gt;asyncdispatcher&lt;/code&gt; からのディスパッチャーが初期化されるときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f5a7e15fb6b1d9ffe60a97b971875a5fd14c3986" translate="yes" xml:space="preserve">
          <source>Change the i-th element of &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deqの&lt;/em&gt; i番目の要素を&lt;em&gt;変更し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a378d275114814e060b77abd531dd213c169f954" translate="yes" xml:space="preserve">
          <source>Changes permission of &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;permissions&lt;/code&gt;.</source>
          <target state="translated">許可変更 &lt;code&gt;path&lt;/code&gt; への &lt;code&gt;permissions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="482161a66375f4b97680fe5fe6422eeb626fed75" translate="yes" xml:space="preserve">
          <source>Changes the backwards indexed i-th element.</source>
          <target state="translated">i 番目の要素の後方にあるインデックスを変更します。</target>
        </trans-unit>
        <trans-unit id="9bc9d87771e5da3b869e9e85828f5d8bc801b455" translate="yes" xml:space="preserve">
          <source>Changes the current directory on the remote FTP server to &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="translated">リモートFTPサーバー上の現在のディレクトリを &lt;code&gt;dir&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="4d372ed5b2932ebc79c520ac157f6c0e2e3d3730" translate="yes" xml:space="preserve">
          <source>Changes the current directory temporarily.</source>
          <target state="translated">カレントディレクトリを一時的に変更します。</target>
        </trans-unit>
        <trans-unit id="c055bf809996f18dce65f9e3f155faf78c41dcc7" translate="yes" xml:space="preserve">
          <source>Changes the current directory to the parent of the current directory.</source>
          <target state="translated">カレントディレクトリをカレントディレクトリの親に変更します。</target>
        </trans-unit>
        <trans-unit id="c64ff50429d3d46330a0ffe7e5b9691534e68c18" translate="yes" xml:space="preserve">
          <source>Changes the current directory.</source>
          <target state="translated">カレントディレクトリを変更します。</target>
        </trans-unit>
        <trans-unit id="e3a0d2e35ad950c53e3d4c21fe112b096de5eafd" translate="yes" xml:space="preserve">
          <source>Changes the file extension to &lt;code&gt;ext&lt;/code&gt;.</source>
          <target state="translated">ファイル拡張子を &lt;code&gt;ext&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="a9e433ae359b493762f4f0a4bb510351b98a08de" translate="yes" xml:space="preserve">
          <source>Changes the file extension to &lt;em&gt;ext&lt;/em&gt;.</source>
          <target state="translated">ファイル拡張子を&lt;em&gt;extに&lt;/em&gt;変更します。</target>
        </trans-unit>
        <trans-unit id="7b2fdbda71ced4bfcf6d551356279642f766b7f9" translate="yes" xml:space="preserve">
          <source>Changes the i-th element of &lt;code&gt;deq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;deq&lt;/code&gt; のi番目の要素を変更します。</target>
        </trans-unit>
        <trans-unit id="3ca5b74490314ec55a9cac4706975c4e89ff805e" translate="yes" xml:space="preserve">
          <source>Changing of files' permissions.</source>
          <target state="translated">ファイルのパーミッションの変更</target>
        </trans-unit>
        <trans-unit id="cf3607944314f1ceb57217122a4c3b1e5f0f57d5" translate="yes" xml:space="preserve">
          <source>Channel support for threads.</source>
          <target state="translated">スレッドのチャンネル対応。</target>
        </trans-unit>
        <trans-unit id="419e96b941fe3d26a3baefa01150ca56eff780d7" translate="yes" xml:space="preserve">
          <source>Channel support for threads. &lt;strong&gt;Note&lt;/strong&gt;: This is part of the system module. Do not import it directly. To activate thread support you need to compile with the &lt;code&gt;--threads:on&lt;/code&gt; command line switch.</source>
          <target state="translated">スレッドのチャネルサポート。&lt;strong&gt;注&lt;/strong&gt;：これはシステムモジュールの一部です。直接インポートしないでください。スレッドサポートをアクティブにするには、 &lt;code&gt;--threads:on&lt;/code&gt; コマンドラインスイッチを使用してコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="fcc1559262fd89e3d9ca11baf6850e973da87cb1" translate="yes" xml:space="preserve">
          <source>Character class: If the character ahead appears in the string &lt;code&gt;s&lt;/code&gt;, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">文字クラス：文字列 &lt;code&gt;s&lt;/code&gt; に先行する文字が含まれている場合は、それを消費して成功を示します。それ以外の場合は失敗を示します。</target>
        </trans-unit>
        <trans-unit id="0abdb5ab8a3afbc3386522492aae1bd812508530" translate="yes" xml:space="preserve">
          <source>Character class: If the character ahead appears in the string &lt;em&gt;s&lt;/em&gt;, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">文字クラス：先行する文字が文字列&lt;em&gt;sに&lt;/em&gt;出現する場合、それを消費して成功を示します。それ以外の場合は失敗を示します。</target>
        </trans-unit>
        <trans-unit id="1ce4e1be05a213a12afbc5b91825b11c73d700b6" translate="yes" xml:space="preserve">
          <source>Character device.</source>
          <target state="translated">キャラクターデバイス。</target>
        </trans-unit>
        <trans-unit id="b86bbfa9fed7ada0a389375eb5146d27ca6ab1fb" translate="yes" xml:space="preserve">
          <source>Character literals</source>
          <target state="translated">文字リテラル</target>
        </trans-unit>
        <trans-unit id="7e96bdb902b32980dacb34ac72b2007caf92e425" translate="yes" xml:space="preserve">
          <source>Character literals are enclosed in single quotes &lt;code&gt;''&lt;/code&gt; and can contain the same escape sequences as strings - with one exception: the platform dependent &lt;span id=&quot;newline_2&quot;&gt;newline&lt;/span&gt; (&lt;code&gt;\p&lt;/code&gt;) is not allowed as it may be wider than one character (often it is the pair CR/LF for example). Here are the valid &lt;span id=&quot;escape-sequences_2&quot;&gt;escape sequences&lt;/span&gt; for character literals:</source>
          <target state="translated">文字リテラルは一重引用符 &lt;code&gt;''&lt;/code&gt; で囲まれ、文字列と同じエスケープシーケンスを含めることができます。ただし、1つの例外があります。プラットフォームに依存する&lt;span id=&quot;newline_2&quot;&gt;改行&lt;/span&gt;（ &lt;code&gt;\p&lt;/code&gt; ）は、1文字よりも幅が広い可能性があるため許可されません（多くの場合、CR /のペアです）。 LFなど）。文字リテラルの有効な&lt;span id=&quot;escape-sequences_2&quot;&gt;エスケープシーケンス&lt;/span&gt;は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="21f190d94a1e9c27cae2e86e7882e04c218117d6" translate="yes" xml:space="preserve">
          <source>Character range: If the character ahead is one from the range &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;b&lt;/code&gt;, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">文字範囲：前方の文字が &lt;code&gt;a&lt;/code&gt; から &lt;code&gt;b&lt;/code&gt; の範囲の文字である場合、それを消費して成功を示します。それ以外の場合は失敗を示します。</target>
        </trans-unit>
        <trans-unit id="ed1a1da8d910c3e98f7e3471a4032afafec5eb29" translate="yes" xml:space="preserve">
          <source>Character range: If the character ahead is one from the range &lt;em&gt;a&lt;/em&gt; through &lt;em&gt;b&lt;/em&gt;, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">文字範囲：前方の文字が&lt;em&gt;a&lt;/em&gt;から&lt;em&gt;b&lt;/em&gt;の範囲の1つである場合、それを消費して成功を示します。それ以外の場合は失敗を示します。</target>
        </trans-unit>
        <trans-unit id="b6a6c483aae1575a0185147caca2a33f4a949438" translate="yes" xml:space="preserve">
          <source>Character type</source>
          <target state="translated">文字タイプ</target>
        </trans-unit>
        <trans-unit id="d50cd4e4889823f54696871b43521ee7b2cd7335" translate="yes" xml:space="preserve">
          <source>Character with decimal code &lt;em&gt;ddd&lt;/em&gt;.</source>
          <target state="translated">10進コード&lt;em&gt;dddの&lt;/em&gt;文字。</target>
        </trans-unit>
        <trans-unit id="b6f59f08fd6d58c6725e21a9ec24e068148ec586" translate="yes" xml:space="preserve">
          <source>Characters</source>
          <target state="translated">Characters</target>
        </trans-unit>
        <trans-unit id="f803c7314dfe57b6117aa574febf4be25e9f0125" translate="yes" xml:space="preserve">
          <source>Characters that may produce invalid filenames across Linux, Windows, Mac, etc. You can check if your filename contains these char and strip them for safety. Mac bans &lt;code&gt;':'&lt;/code&gt;, Linux bans &lt;code&gt;'/'&lt;/code&gt;, Windows bans all others.</source>
          <target state="translated">Linux、Windows、Macなどで無効なファイル名を生成する可能性のある文字。ファイル名にこれらの文字が含まれているかどうかを確認し、安全のために削除することができます。Macは &lt;code&gt;':'&lt;/code&gt; を禁止し、Linuxは &lt;code&gt;'/'&lt;/code&gt; を禁止し、Windowsは他のすべてを禁止します。</target>
        </trans-unit>
        <trans-unit id="bf30516c00576762fbbb621668144d424821087b" translate="yes" xml:space="preserve">
          <source>Chars can be compared with the &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; operators. The &lt;code&gt;$&lt;/code&gt; operator converts a &lt;code&gt;char&lt;/code&gt; to a &lt;code&gt;string&lt;/code&gt;. Chars cannot be mixed with integers; to get the ordinal value of a &lt;code&gt;char&lt;/code&gt; use the &lt;code&gt;ord&lt;/code&gt; proc. Converting from an integer to a &lt;code&gt;char&lt;/code&gt; is done with the &lt;code&gt;chr&lt;/code&gt; proc.</source>
          <target state="translated">文字は、 &lt;code&gt;==&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; 演算子と比較できます。 &lt;code&gt;$&lt;/code&gt; のオペレータは、変換 &lt;code&gt;char&lt;/code&gt; まで &lt;code&gt;string&lt;/code&gt; 。文字を整数と混在させることはできません。 &lt;code&gt;char&lt;/code&gt; の序数値を取得するには、 &lt;code&gt;ord&lt;/code&gt; procを使用します。整数から &lt;code&gt;char&lt;/code&gt; への変換は &lt;code&gt;chr&lt;/code&gt; procで行われます。</target>
        </trans-unit>
        <trans-unit id="68664dd02e350ea5073e0ae4aa9b4b05b3c91960" translate="yes" xml:space="preserve">
          <source>Chat server</source>
          <target state="translated">チャットサーバー</target>
        </trans-unit>
        <trans-unit id="4eb270840468401637561d9cfc51264703e454af" translate="yes" xml:space="preserve">
          <source>Check for the existence of this before accessing it as older versions of the compiler API do not declare this.</source>
          <target state="translated">古いバージョンのコンパイラAPIではこれが宣言されていないため、アクセスする前にこれが存在するかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="9a908bb66c5d77a61ece5cce7ea89b38e64a5a0c" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;a&lt;/code&gt; is a subset of &lt;code&gt;b&lt;/code&gt;</source>
          <target state="translated">かどうか確認のサブセットである &lt;code&gt;b&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd9809ab9094dde4e223d6a6055ca169fabae130" translate="yes" xml:space="preserve">
          <source>Check if &lt;code&gt;s&lt;/code&gt; matches Nim's &quot;while&quot; keyword:</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; がNimの「while」キーワードと一致するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="929ff11e672655b0a3b8087213ef8d4a743bae97" translate="yes" xml:space="preserve">
          <source>Check if &lt;em&gt;s&lt;/em&gt; matches Nim's &quot;while&quot; keyword:</source>
          <target state="translated">&lt;em&gt;sが&lt;/em&gt; Nimの「while」キーワードに一致するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="b130de36b454f82080bd8611acd64c72cc817d33" translate="yes" xml:space="preserve">
          <source>Check if a &lt;code&gt;FutureStream&lt;/code&gt; is finished. &lt;code&gt;true&lt;/code&gt; value means that no more data will be placed inside the stream &lt;em&gt;and&lt;/em&gt; that there is no data waiting to be retrieved.</source>
          <target state="translated">&lt;code&gt;FutureStream&lt;/code&gt; が終了したかどうかを確認します。 &lt;code&gt;true&lt;/code&gt; それ以上のデータストリームの内側に配置されないことを値手段&lt;em&gt;と&lt;/em&gt;、検索されるのを待っているデータがないこと。</target>
        </trans-unit>
        <trans-unit id="8cf370f6b8ec38a29e2432bba075fad77aab417e" translate="yes" xml:space="preserve">
          <source>Check if a &lt;code&gt;FutureStream&lt;/code&gt; is finished. &lt;code&gt;true&lt;/code&gt; value means that no more data will be placed inside the stream _&lt;a href=&quot;#and&quot;&gt;and&lt;/a&gt; that there is no data waiting to be retrieved.</source>
          <target state="translated">&lt;code&gt;FutureStream&lt;/code&gt; が終了したかどうかを確認します。 &lt;code&gt;true&lt;/code&gt; それ以上のデータは_ストリームの内側に配置されないことを値手段&lt;a href=&quot;#and&quot;&gt;と&lt;/a&gt;、検索されるのを待っているデータがないこと。</target>
        </trans-unit>
        <trans-unit id="3d9e5eb7b0cd88b5a5e9977ca418b8db027695ce" translate="yes" xml:space="preserve">
          <source>Check if a &lt;span id=&quot;directory_1&quot;&gt;directory&lt;/span&gt;&lt;code&gt;dir&lt;/code&gt; exists, and create it otherwise.</source>
          <target state="translated">&lt;span id=&quot;directory_1&quot;&gt;ディレクトリ&lt;/span&gt; &lt;code&gt;dir&lt;/code&gt; が存在するかどうかを確認し、存在しない場合は作成します。</target>
        </trans-unit>
        <trans-unit id="f166d2a8f7a171d1bb127378eb23732d41da0d11" translate="yes" xml:space="preserve">
          <source>Check if a &lt;span id=&quot;directory_1&quot;&gt;directory&lt;/span&gt;&lt;em&gt;dir&lt;/em&gt; exists, and create it otherwise.</source>
          <target state="translated">&lt;span id=&quot;directory_1&quot;&gt;ディレクトリ&lt;/span&gt;&lt;em&gt;dir&lt;/em&gt;が存在するかどうかを確認し、存在しない場合は作成します。</target>
        </trans-unit>
        <trans-unit id="12e7de7be753c15b75308954e0a8005245a36713" translate="yes" xml:space="preserve">
          <source>Check if an element is in the set</source>
          <target state="translated">要素がセットの中にあるかどうかをチェックする</target>
        </trans-unit>
        <trans-unit id="1e5b4d342c0c968111a01a39b99a7998dbca5c19" translate="yes" xml:space="preserve">
          <source>Check if two arguments are of the same type</source>
          <target state="translated">2つの引数が同じ型であるかどうかをチェック</target>
        </trans-unit>
        <trans-unit id="7fb032676a3385234649bdd5726d61e4846bdc2f" translate="yes" xml:space="preserve">
          <source>Check that &lt;code&gt;eqIdent(n,name)&lt;/code&gt; holds true. If this is not the case, compilation aborts with an error message. This is useful for writing macros that check the AST that is passed to them.</source>
          <target state="translated">&lt;code&gt;eqIdent(n,name)&lt;/code&gt; が真であることを確認してください。そうでない場合、コンパイルはエラーメッセージで中止されます。これは、渡されるASTをチェックするマクロを作成する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5452825957bcebad7f3ee896149f10219df54f16" translate="yes" xml:space="preserve">
          <source>Check the &lt;code&gt;Cross-compilation&lt;/code&gt; section for instructions on how to compile the program for your target.</source>
          <target state="translated">ターゲット用にプログラムをコンパイルする方法については、 &lt;code&gt;Cross-compilation&lt;/code&gt; セクションを確認してください。</target>
        </trans-unit>
        <trans-unit id="7519f302b755cf7b32339f48dd72cab14da429c7" translate="yes" xml:space="preserve">
          <source>Check the tests for more information about modules compatible with NimScript.</source>
          <target state="translated">NimScript と互換性のあるモジュールの詳細については、テストを確認してください。</target>
        </trans-unit>
        <trans-unit id="984fcebb18e75b7e703ed2015d054cab99f8aaec" translate="yes" xml:space="preserve">
          <source>Check two nodes for equality</source>
          <target state="translated">2つのノードが等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="da7416e40baa75d7c56d32d6f86dd948f4e19c78" translate="yes" xml:space="preserve">
          <source>Checking the progress of a file transfer</source>
          <target state="translated">ファイル転送の進行状況の確認</target>
        </trans-unit>
        <trans-unit id="132dba3d8ecc2f1b5ab2812aeccdc98f5e82e566" translate="yes" xml:space="preserve">
          <source>Checks &lt;code&gt;osLastError&lt;/code&gt; for a valid error. If it has been reset it uses the last error stored in the socket object.</source>
          <target state="translated">チェックし &lt;code&gt;osLastError&lt;/code&gt; 有効なエラーのために。リセットされている場合は、ソケットオブジェクトに格納されている最後のエラーが使用されます。</target>
        </trans-unit>
        <trans-unit id="0b039604cab9294df9ab5c19766290de77791c23" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;code&gt;bool&lt;/code&gt; variables.</source>
          <target state="translated">2つの &lt;code&gt;bool&lt;/code&gt; 変数が等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="e6469a5d57eca77765f65fad8bf7c84106ea3ebe" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;code&gt;char&lt;/code&gt; variables.</source>
          <target state="translated">2つの &lt;code&gt;char&lt;/code&gt; 変数が等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="2504ed61047e8ea68373a7da0378299231c92baa" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;code&gt;cstring&lt;/code&gt; variables.</source>
          <target state="translated">2つの &lt;code&gt;cstring&lt;/code&gt; 変数が等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="0accac7254191683bad815aa5d4a9f85113ad0d6" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;code&gt;string&lt;/code&gt; variables.</source>
          <target state="translated">2つの &lt;code&gt;string&lt;/code&gt; 変数が等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="cc61b0718a3e619d1bd3a5d9f1cd5caf0d888789" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;bool&lt;/em&gt; variables</source>
          <target state="translated">2つの&lt;em&gt;ブール&lt;/em&gt;変数間の等価性をチェックします</target>
        </trans-unit>
        <trans-unit id="6f860c207f2a11f0e1a3d019e6937c4ffa577ce1" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;char&lt;/em&gt; variables</source>
          <target state="translated">2つの&lt;em&gt;char&lt;/em&gt;変数間の等価性をチェックします</target>
        </trans-unit>
        <trans-unit id="fb71cf56026acbd41603489b57883dd164a92da2" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;cstring&lt;/em&gt; variables.</source>
          <target state="translated">2つの&lt;em&gt;cstring&lt;/em&gt;変数が等しいか&lt;em&gt;どうかを確認し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6693c72afaf2ac68bebd9822b5f0ce79ca5dfcae" translate="yes" xml:space="preserve">
          <source>Checks for equality between two &lt;em&gt;string&lt;/em&gt; variables</source>
          <target state="translated">2つの&lt;em&gt;文字列&lt;/em&gt;変数間の等価性をチェックします</target>
        </trans-unit>
        <trans-unit id="53ee644c5a3adb472b8f834379f124b8cfe7fc93" translate="yes" xml:space="preserve">
          <source>Checks for equality between two variables of type &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;set&lt;/code&gt; 2つの変数が等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5987179982937ecdc2f511a6d1b5e95c1f8fd6e8" translate="yes" xml:space="preserve">
          <source>Checks for equality between two variables of type &lt;em&gt;set&lt;/em&gt;</source>
          <target state="translated">タイプ&lt;em&gt;セットの&lt;/em&gt; 2つの変数間の等価性をチェックします&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc27ecea2706498aff760a04f1eaa5eba8d23be5" translate="yes" xml:space="preserve">
          <source>Checks for the existence of a configuration 'key' like 'gcc.options.always'.</source>
          <target state="translated">gcc.options.always」のような設定「キー」が存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="cc5257ac175b35e93252c91c16f63ac2e78c427f" translate="yes" xml:space="preserve">
          <source>Checks for the existence of an environment variable named &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; という名前の環境変数の存在を確認します。</target>
        </trans-unit>
        <trans-unit id="599f28bb06656196140b53753d4cf61eedde890f" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;T&lt;/code&gt; is of the same type as &lt;code&gt;S&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; が &lt;code&gt;S&lt;/code&gt; と同じタイプであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="e2000ea1fd4d09472518d92068d420f3bfdb00c0" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;key&lt;/code&gt; exists in &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; が &lt;code&gt;node&lt;/code&gt; 存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d7be68bcd012e78ff8695bf486339c449315848e" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;s&lt;/code&gt; is empty or consists entirely of whitespace characters.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が空であるか、または完全に空白文字で構成されているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="29846520482a1364541f4fc04e51b1883d794ac4" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;val&lt;/code&gt; exists in array &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">配列 &lt;code&gt;node&lt;/code&gt; &lt;code&gt;val&lt;/code&gt; が存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="231f84f9e33638fa185387f68b79ced29cedada6" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;value&lt;/code&gt; is within the range of &lt;code&gt;s&lt;/code&gt;; returns true if &lt;code&gt;value &amp;gt;= s.a and value &amp;lt;= s.b&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;s&lt;/code&gt; の範囲内にあるかどうかを確認します; &lt;code&gt;value &amp;gt;= s.a and value &amp;lt;= s.b&lt;/code&gt; 場合にtrueを返します</target>
        </trans-unit>
        <trans-unit id="5e6c4946505e65108d8f3f4972c17788a58fc32c" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;x&lt;/code&gt; has a type of &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; のタイプが &lt;code&gt;y&lt;/code&gt; かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="99503e3efa2622079cb2940b4767dc3ac6ea82f5" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;key&lt;/em&gt; exists in &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ノードに&lt;/em&gt;&lt;em&gt;キー&lt;/em&gt;が存在するかどうかを確認し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a8474632e4fae06f8ce5b7c82b1279000374e87d" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;s&lt;/em&gt; is nil or consists entirely of whitespace characters.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;がnilであるか、完全に空白文字で構成されているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="c736c01c5bfa8a1c6f5bac3b24beb2893e45e7de" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;s&lt;/em&gt; is nil or empty.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;がnilまたは空かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="59f775bd733836ecb4200f87a57e67e9cfc67799" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;val&lt;/em&gt; exists in array &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;val&lt;/em&gt;が配列&lt;em&gt;ノードに&lt;/em&gt;存在するかどうかを確認し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f46cbda82eb5e9585af47785b7a218005abe05c4" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;value&lt;/em&gt; is within the range of &lt;em&gt;s&lt;/em&gt;; returns true iff &lt;em&gt;value &amp;gt;= s.a and value &amp;lt;= s.b&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;値&lt;/em&gt;が&lt;em&gt;s&lt;/em&gt;の範囲内にあるかどうかを確認し&lt;em&gt;ます&lt;/em&gt;。真の&lt;em&gt;値&amp;gt; = saおよび値&amp;lt;= sbを&lt;/em&gt;返します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1f0ff90bf51c73226b0a0ba5e93e479486fcfc7a" translate="yes" xml:space="preserve">
          <source>Checks if &lt;em&gt;x&lt;/em&gt; has a type of &lt;em&gt;y&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;のタイプが&lt;em&gt;y&lt;/em&gt;かどうかを確認します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="daf104d7238ae02de9f7b8d4b2ef3a9d0dd7836c" translate="yes" xml:space="preserve">
          <source>Checks if T is of the same type as S</source>
          <target state="translated">T が S と同じタイプであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="518eae87904476e90eead109be125fa527018b54" translate="yes" xml:space="preserve">
          <source>Checks if a cookie of &lt;code&gt;name&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; Cookieが存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="3e2a37d26b80f14b9376ff0970807fa4ec421d07" translate="yes" xml:space="preserve">
          <source>Checks if a cookie of &lt;em&gt;name&lt;/em&gt; exists.</source>
          <target state="translated">&lt;em&gt;名前の&lt;/em&gt; cookieが存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="34bdcdb4a8c3c3c1c5eb2e653de374a299aa1818" translate="yes" xml:space="preserve">
          <source>Checks if a proc symbol is an instance of the generic proc symbol. Useful to check proc symbols against generic symbols returned by &lt;code&gt;bindSym&lt;/code&gt;.</source>
          <target state="translated">procシンボルが汎用procシンボルのインスタンスであるかどうかを確認します。 &lt;code&gt;bindSym&lt;/code&gt; によって返される汎用シンボルに対してprocシンボルをチェックするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="44e4d80ce5f7a1e55199005e073fe653afa2fabc" translate="yes" xml:space="preserve">
          <source>Checks if a string is an IP address Returns true if it is, false otherwise</source>
          <target state="translated">文字列が IP アドレスであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="d13dcef1e7a16f2a77bdd02fb1af85880a032f80" translate="yes" xml:space="preserve">
          <source>Checks if an &lt;code&gt;Option&lt;/code&gt; contains a value.</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; に値が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="8d9f017d7778e661343a02d97803fad060fcac86" translate="yes" xml:space="preserve">
          <source>Checks if an &lt;code&gt;Option&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; が空かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="e677c253293b08cc134b8c8d2a053ca14ce4db60" translate="yes" xml:space="preserve">
          <source>Checks if code point of &lt;code&gt;a&lt;/code&gt; is smaller or equal to code point of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; コードポイントがbのコードポイント以下で &lt;code&gt;a&lt;/code&gt; かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="0e6693a840bb9462b5223b8efdd8a001ead5a926" translate="yes" xml:space="preserve">
          <source>Checks if code point of &lt;code&gt;a&lt;/code&gt; is smaller than code point of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">チェックのコードポイント場合のコード・ポイントよりも小さい &lt;code&gt;b&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91fcb8e30c84d0132cb566b30317c70326d854cb" translate="yes" xml:space="preserve">
          <source>Checks if every item fulfills the predicate.</source>
          <target state="translated">すべてのアイテムが述語を満たすかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="387a7c5115f06089e88cb4b2572d5ebf79a3e6f9" translate="yes" xml:space="preserve">
          <source>Checks if more data can be read from &lt;code&gt;s&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if all data has been read.</source>
          <target state="translated">チェックし、より多くのデータから読み取ることができる場合 &lt;code&gt;s&lt;/code&gt; 。すべてのデータが読み取られた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="af2565e07778c49efe297f906f075760048c0b14" translate="yes" xml:space="preserve">
          <source>Checks if some item fulfills the predicate.</source>
          <target state="translated">あるアイテムが述語を満たすかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5cde3066d4a359aaba5748b8e79ea32fe8a87f32" translate="yes" xml:space="preserve">
          <source>Checks if the directory &lt;code&gt;dir&lt;/code&gt; exists.</source>
          <target state="translated">ディレクトリ &lt;code&gt;dir&lt;/code&gt; が存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="0747cada7c21133680e363d4d3160e3c2b0f46ed" translate="yes" xml:space="preserve">
          <source>Checks if the file exists.</source>
          <target state="translated">ファイルが存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="995b4d25edabfdac1406b0e27b5a7f7b667a30e5" translate="yes" xml:space="preserve">
          <source>Checks if two &lt;code&gt;MD5Digest&lt;/code&gt; values are identical.</source>
          <target state="translated">2つの &lt;code&gt;MD5Digest&lt;/code&gt; 値が同一であるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d5513e3158cc989c1f3665d8d6493462f5b71923" translate="yes" xml:space="preserve">
          <source>Checks if two &lt;code&gt;SecureHash&lt;/code&gt; values are identical.</source>
          <target state="translated">2つの &lt;code&gt;SecureHash&lt;/code&gt; 値が同一であるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="46ba38200081bec282aa96568e62ca96babe6c35" translate="yes" xml:space="preserve">
          <source>Checks if two runes are equal.</source>
          <target state="translated">2つのルーンが等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="8b7833a681ebfe8b66ad2351f68afb5707b38428" translate="yes" xml:space="preserve">
          <source>Checks that &lt;code&gt;n&lt;/code&gt; has a number of children in the range &lt;code&gt;min..max&lt;/code&gt;. If this is not the case, compilation aborts with an error message. This is useful for writing macros that check its number of arguments.</source>
          <target state="translated">ことをチェックし &lt;code&gt;n&lt;/code&gt; 、範囲内の子の数を持ってい &lt;code&gt;min..max&lt;/code&gt; 。そうでない場合、コンパイルはエラーメッセージで中止されます。これは、引数の数をチェックするマクロを作成する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="347c170b0bdadbd756dff662f8725a8a8b257ac1" translate="yes" xml:space="preserve">
          <source>Checks that &lt;code&gt;n&lt;/code&gt; has at least &lt;code&gt;min&lt;/code&gt; children. If this is not the case, compilation aborts with an error message. This is useful for writing macros that check its number of arguments.</source>
          <target state="translated">ことをチェックし &lt;code&gt;n&lt;/code&gt; 、少なくとも持っている &lt;code&gt;min&lt;/code&gt; 子どもたち。そうでない場合、コンパイルはエラーメッセージで中止されます。これは、引数の数をチェックするマクロを作成する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bca03c9d176f7f584329672cd91a6d82a6040232" translate="yes" xml:space="preserve">
          <source>Checks that &lt;code&gt;n&lt;/code&gt; has exactly &lt;code&gt;len&lt;/code&gt; children. If this is not the case, compilation aborts with an error message. This is useful for writing macros that check its number of arguments.</source>
          <target state="translated">小切手 &lt;code&gt;n&lt;/code&gt; は正確にしている &lt;code&gt;len&lt;/code&gt; の子供を。そうでない場合、コンパイルはエラーメッセージで中止されます。これは、引数の数をチェックするマクロを作成する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ed6b4d1d1bac96323b5acef5f04e91418f68a21e" translate="yes" xml:space="preserve">
          <source>Checks that &lt;code&gt;n&lt;/code&gt; is of kind &lt;code&gt;k&lt;/code&gt;. If this is not the case, compilation aborts with an error message. This is useful for writing macros that check the AST that is passed to them.</source>
          <target state="translated">チェック &lt;code&gt;n&lt;/code&gt; 種類のものである &lt;code&gt;k&lt;/code&gt; 。そうでない場合、コンパイルはエラーメッセージで中止されます。これは、渡されるASTをチェックするマクロを作成する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="18f529fda0c87cfa0c995c3d1484c5a8421c02f2" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;code&gt;proc&lt;/code&gt; variables refer to the same procedure.</source>
          <target state="translated">2つの &lt;code&gt;proc&lt;/code&gt; 変数が同じプロシージャを参照していることを確認します。</target>
        </trans-unit>
        <trans-unit id="0e336f104070b9775793623e928b0a0313630df3" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;code&gt;ptr&lt;/code&gt; variables refer to the same item.</source>
          <target state="translated">2つの &lt;code&gt;ptr&lt;/code&gt; 変数が同じアイテムを参照していることを確認します。</target>
        </trans-unit>
        <trans-unit id="734c0193ac566fcf4d2d7ced182951438646d9ec" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;code&gt;ref&lt;/code&gt; variables refer to the same item.</source>
          <target state="translated">2つの &lt;code&gt;ref&lt;/code&gt; 変数が同じアイテムを参照していることを確認します。</target>
        </trans-unit>
        <trans-unit id="239c89279a3bce5516e0481e4f55258a02a144dd" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;em&gt;proc&lt;/em&gt; variables refer to the same procedure</source>
          <target state="translated">2つのチェックという&lt;em&gt;のproc&lt;/em&gt;変数は、同じ手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="ca5e50261c267853c17b8d0483f9eeeb373544ad" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;em&gt;ptr&lt;/em&gt; variables refer to the same item</source>
          <target state="translated">2つの&lt;em&gt;ptr&lt;/em&gt;変数が同じ項目を参照していることを確認します</target>
        </trans-unit>
        <trans-unit id="e8feb74c6a474812ed4a3894be2a37759dfadb64" translate="yes" xml:space="preserve">
          <source>Checks that two &lt;em&gt;ref&lt;/em&gt; variables refer to the same item</source>
          <target state="translated">2つの&lt;em&gt;ref&lt;/em&gt;変数が同じ項目を参照していることを確認します</target>
        </trans-unit>
        <trans-unit id="89f8309e466f55312660877011c82ba91a54ff5b" translate="yes" xml:space="preserve">
          <source>Checks to see whether &lt;code&gt;a&lt;/code&gt; is already sorted in &lt;code&gt;order&lt;/code&gt; using &lt;code&gt;cmp&lt;/code&gt; for the comparison. Parameters identical to &lt;code&gt;sort&lt;/code&gt;. Requires O(n) time.</source>
          <target state="translated">比較に &lt;code&gt;cmp&lt;/code&gt; を使用して &lt;code&gt;a&lt;/code&gt; がすでに &lt;code&gt;order&lt;/code&gt; ソートされているかどうかを確認します。 &lt;code&gt;sort&lt;/code&gt; と同じパラメータ。O（n）時間が必要です。</target>
        </trans-unit>
        <trans-unit id="2efb60769de3f5e8c0d857e5d64a4a1d598026d9" translate="yes" xml:space="preserve">
          <source>Checks to see whether &lt;em&gt;a&lt;/em&gt; is already sorted in &lt;em&gt;order&lt;/em&gt; using &lt;em&gt;cmp&lt;/em&gt; for the comparison. Parameters identical to &lt;em&gt;sort&lt;/em&gt;</source>
          <target state="translated">比較の&lt;em&gt;ために&lt;/em&gt;&lt;em&gt;cmp&lt;/em&gt;を使用して&lt;em&gt;、a&lt;/em&gt;がすでにソートされているかどうかを確認します。&lt;em&gt;ソート&lt;/em&gt;と同一のパラメーター&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cb0fddbd515d81fc29a204bb7d47e5506b13b3dc" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;s&lt;/code&gt; is lower case.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が小文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="a95f9a2833efadf810a077d161631c3c1a37d62b" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;s&lt;/code&gt; is upper case.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が大文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="7a0582a661eff5044f3baf227071f073a106e96c" translate="yes" xml:space="preserve">
          <source>Checks whether a given &lt;code&gt;path&lt;/code&gt; is a root directory.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; がルートディレクトリであるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="e33b26c466b0674b1fd3d2d00b33fead9985e29c" translate="yes" xml:space="preserve">
          <source>Checks whether a given &lt;code&gt;path&lt;/code&gt; is absolute.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; が絶対であるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="c19cc9513c0bf1c1425112be49c299ffd561ef33" translate="yes" xml:space="preserve">
          <source>Checks whether a given &lt;em&gt;path&lt;/em&gt; is a root directory</source>
          <target state="translated">指定された&lt;em&gt;パス&lt;/em&gt;がルートディレクトリかどうかを確認し&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2b2e978aedf3c96424b9cc68407ee36744d6e1fe" translate="yes" xml:space="preserve">
          <source>Checks whether a given &lt;em&gt;path&lt;/em&gt; is absolute.</source>
          <target state="translated">指定された&lt;em&gt;パス&lt;/em&gt;が絶対&lt;em&gt;パス&lt;/em&gt;かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="8a9c94d14613d63f2e9ca19d9de8cae69f014371" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;code&gt;c&lt;/code&gt; is a lower case character.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が小文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="98ed13bbeafc5f936440cf81af343d85183c1f1a" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;code&gt;c&lt;/code&gt; is a number.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が数値かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="02c67a3b060dd347b4f2b6da130c0a97d3c9c999" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;code&gt;c&lt;/code&gt; is a whitespace character.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が空白文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="bc433780ac508a1bf186cc16b1a668b76010ab19" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;code&gt;c&lt;/code&gt; is alphanumeric.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が英数字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="a83f5201fcfeb0359b2b586cf6491a622f99a1d6" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;code&gt;c&lt;/code&gt; is an upper case character.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; が大文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="ee4c2aa7f06d4dab8347c552766eb0e82241c0bc" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is a lower case character.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;が小文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="e62669610340d11599af3c49e990b8563987c907" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is a number.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;が数値かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="dec21879462a972a9215d78983d9622f9e614ece" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is a whitespace character.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;が空白文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="66ef64629cfaff59e4dda1f006a57dd1a8b7a659" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is alphabetical.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;がアルファベットかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="8bbff5e8bf3937ea9eac7179b7b1803460bcfd4b" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is alphanumeric.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;が英数字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="783f60adb58a778d0bdcb0ed1f898546ed698d6c" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;c&lt;/em&gt; is an upper case character.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;が大文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="96e7693a15498ac9fcc81a271241dceee25a1fa0" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is a numeric value.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;が数値かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="bdff523a789009cf024b82e48a29ed38f90b665d" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is a unicode title.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;がUnicodeタイトルかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="e633a4c42c8c1c1a6b480f4086e931c947915d1a" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is alphabetical.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;がアルファベットかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="05a69f1cbe4ef4451b315649a574990d236315ae" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is alphanumeric.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;が英数字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="a4cb2611d9b736cb54c98723c01635d46689fc8b" translate="yes" xml:space="preserve">
          <source>Checks whether or not &lt;em&gt;s&lt;/em&gt; is completely whitespace.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;が完全に空白かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="3398081a8d33046458127076eeaa3cea01de3505" translate="yes" xml:space="preserve">
          <source>Checks whether or not character &lt;code&gt;c&lt;/code&gt; is alphabetical.</source>
          <target state="translated">文字 &lt;code&gt;c&lt;/code&gt; がアルファベットかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d90c4bf5c16f97818ae084103aa250b4e45ec0e6" translate="yes" xml:space="preserve">
          <source>Checks whether the environment variable named &lt;code&gt;key&lt;/code&gt; exists. Returns true if it exists, false otherwise.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; という名前の環境変数が存在するかどうかを確認します。存在する場合はtrueを返し、存在しない場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="5589a38b0e9e9fce2e0e9bb1532225529e28fbfc" translate="yes" xml:space="preserve">
          <source>Checks whether values within the &lt;em&gt;same enum&lt;/em&gt; have the same underlying value</source>
          <target state="translated">&lt;em&gt;同じenum&lt;/em&gt;内の値が同じ基本値を持つかどうかをチェックします</target>
        </trans-unit>
        <trans-unit id="73bb2891c6c9107264c1ad053bb55a4975b91a14" translate="yes" xml:space="preserve">
          <source>Checks whether values within the &lt;em&gt;same enum&lt;/em&gt; have the same underlying value.</source>
          <target state="translated">&lt;em&gt;同じ列挙&lt;/em&gt;内の値が同じ基になる値を持っているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="1e36092dbb1e6d89d89ee07c2aac2568be9cdb3d" translate="yes" xml:space="preserve">
          <source>Checks, whether &lt;code&gt;x&lt;/code&gt; has a property of name &lt;code&gt;prop&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; に &lt;code&gt;prop&lt;/code&gt; という名前のプロパティがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="60654a8d0b43196c10e1df25c6c3376b674ea1de" translate="yes" xml:space="preserve">
          <source>Checks, whether &lt;em&gt;x&lt;/em&gt; has a property of name &lt;em&gt;prop&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;が&lt;em&gt;prop&lt;/em&gt;という名前のプロパティを持っているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="53296b5cb03134dcc97c56c465f3d012111692c9" translate="yes" xml:space="preserve">
          <source>ChecksOptions:</source>
          <target state="translated">ChecksOptions:</target>
        </trans-unit>
        <trans-unit id="3f5c2a3a3d29f8f5de9b358aec633fcc7d64f311" translate="yes" xml:space="preserve">
          <source>Child:</source>
          <target state="translated">Child:</target>
        </trans-unit>
        <trans-unit id="3d9c34e04fc76c22436c832ccbafde7e95990bfd" translate="yes" xml:space="preserve">
          <source>Chrome 1</source>
          <target state="translated">クロム1</target>
        </trans-unit>
        <trans-unit id="84c901d044b4c32cac914992644c29fb879ea856" translate="yes" xml:space="preserve">
          <source>Chrome 31</source>
          <target state="translated">クロム31</target>
        </trans-unit>
        <trans-unit id="523e17b342fb309a143c35f3edad6d455f465548" translate="yes" xml:space="preserve">
          <source>Chrome 70</source>
          <target state="translated">クロム70</target>
        </trans-unit>
        <trans-unit id="3d2c4142512efc7268c591ac797444a56a7b8355" translate="yes" xml:space="preserve">
          <source>Classifies a floating point value.</source>
          <target state="translated">浮動小数点値を分類します。</target>
        </trans-unit>
        <trans-unit id="8a71440783140db7ed4f5845038e0d0ef495c4b8" translate="yes" xml:space="preserve">
          <source>Classifies a floating point value. Returns &lt;em&gt;x&lt;/em&gt;'s class as specified by &lt;em&gt;FloatClass&lt;/em&gt;.</source>
          <target state="translated">浮動小数点値を分類します。&lt;em&gt;FloatClassで&lt;/em&gt;指定された&lt;em&gt;x&lt;/em&gt;のクラスを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ed274fdd8b06fad64caa4b21f0e407abe7e5e012" translate="yes" xml:space="preserve">
          <source>Clear the supported exceptions represented by &lt;code&gt;excepts&lt;/code&gt;.</source>
          <target state="translated">で表さクリアサポート例外 &lt;code&gt;excepts&lt;/code&gt; で。</target>
        </trans-unit>
        <trans-unit id="c0676a856119b9f43d3b722b7e1f13d155840cdb" translate="yes" xml:space="preserve">
          <source>Clear the supported exceptions represented by &lt;em&gt;excepts&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;exceptsで&lt;/em&gt;表されるサポートされている例外をクリアします。</target>
        </trans-unit>
        <trans-unit id="d8273ee3227b21dcb65627678e918111f83cc697" translate="yes" xml:space="preserve">
          <source>Clears the HashSet back to an empty state, without shrinking any of the existing storage.</source>
          <target state="translated">既存のストレージを縮小することなく、ハッシュセットを空の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="bbdc3e1cf1b38d523d6171b4db601a4ff9f5cdbb" translate="yes" xml:space="preserve">
          <source>Clears the HashSet back to an empty state, without shrinking any of the existing storage. O(n) where n is the size of the hash bucket.</source>
          <target state="translated">既存のストレージを縮小することなく、ハッシュセットを空の状態に戻します。O(n)ここで n はハッシュバケットのサイズです。</target>
        </trans-unit>
        <trans-unit id="72386153769675ffb858e48cce9d539489972b32" translate="yes" xml:space="preserve">
          <source>Clears the IntSet back to an empty state.</source>
          <target state="translated">IntSet を空の状態に戻してクリアします。</target>
        </trans-unit>
        <trans-unit id="631644160476ff153524d99b8bfa2b102da47eb1" translate="yes" xml:space="preserve">
          <source>Clears the OrderedSet back to an empty state, without shrinking any of the existing storage.</source>
          <target state="translated">既存のストレージを縮小せずに、OrderedSet を空の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="500eb6a58ee99ed5a10bac0307d2399525789e8b" translate="yes" xml:space="preserve">
          <source>Clears the OrderedSet back to an empty state, without shrinking any of the existing storage. O(n) where n is the size of the hash bucket.</source>
          <target state="translated">既存のストレージを縮小することなく、OrderedSetを空の状態に戻します。O(n)ここで、nはハッシュバケットのサイズです。</target>
        </trans-unit>
        <trans-unit id="3253f000f2b69e9ea7ef993e1158952274e09f15" translate="yes" xml:space="preserve">
          <source>Clears the list of callbacks and sets the callback proc to be called when the future completes.</source>
          <target state="translated">コールバックのリストをクリアし、未来が完了したときに呼び出されるコールバック proc を設定します。</target>
        </trans-unit>
        <trans-unit id="507ebd324f496a23794692a20495953cda164297" translate="yes" xml:space="preserve">
          <source>Clients can also use Postgres keyword/value connection strings to connect.</source>
          <target state="translated">クライアントは、Postgresのキーワード/値の接続文字列を使用して接続することもできます。</target>
        </trans-unit>
        <trans-unit id="a52024f95e50e306341b7036e0000e4d0a2b7d88" translate="yes" xml:space="preserve">
          <source>Close a parser, freeing up its resources.</source>
          <target state="translated">パーサを閉じてリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="dbff98545baccf236a8587de95837e8b89436a97" translate="yes" xml:space="preserve">
          <source>Close database connection</source>
          <target state="translated">データベース接続を閉じる</target>
        </trans-unit>
        <trans-unit id="a14e7dc76f7500de57b8491e6b2aa0e01b1ec8ca" translate="yes" xml:space="preserve">
          <source>Close stream</source>
          <target state="translated">近流</target>
        </trans-unit>
        <trans-unit id="a9cbac01b8a8251fed166d82028202652414e266" translate="yes" xml:space="preserve">
          <source>Closes &lt;code&gt;sock&lt;/code&gt;. Terminates any current connections.</source>
          <target state="translated">&lt;code&gt;sock&lt;/code&gt; 閉じます。現在の接続をすべて終了します。</target>
        </trans-unit>
        <trans-unit id="7cdc0c5e02c7ea3d968de2e9db34a25df233d5a9" translate="yes" xml:space="preserve">
          <source>Closes a channel &lt;code&gt;c&lt;/code&gt; and frees its associated resources.</source>
          <target state="translated">チャネル &lt;code&gt;c&lt;/code&gt; を閉じ、関連するリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="a734b28e01c24d279132bdbcfaf68f5165797f44" translate="yes" xml:space="preserve">
          <source>Closes a socket and ensures that it is unregistered.</source>
          <target state="translated">ソケットを閉じて、そのソケットが登録されていないことを確認します。</target>
        </trans-unit>
        <trans-unit id="caf7e77bedd43df5afff7efafdc353d87046a94d" translate="yes" xml:space="preserve">
          <source>Closes a socket.</source>
          <target state="translated">ソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="1ced522c89f62b7dce08c4647da6d4cf514e789f" translate="yes" xml:space="preserve">
          <source>Closes any connections held by the HTTP client.</source>
          <target state="translated">HTTP クライアントが保持するすべての接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="6e4ad07cceacc544c46a9fcbeb6a76c8d0de27a4" translate="yes" xml:space="preserve">
          <source>Closes event &lt;code&gt;ev&lt;/code&gt;.</source>
          <target state="translated">イベント &lt;code&gt;ev&lt;/code&gt; を閉じます。</target>
        </trans-unit>
        <trans-unit id="33c90fcaa7ffb78d8a27467591953ef2c7afae9a" translate="yes" xml:space="preserve">
          <source>Closes the &lt;code&gt;AsyncScgiState&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AsyncScgiState&lt;/code&gt; を閉じます。</target>
        </trans-unit>
        <trans-unit id="42990e8d286d37551071332b9121a8612c8438d5" translate="yes" xml:space="preserve">
          <source>Closes the database connection.</source>
          <target state="translated">データベース接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="2efdb2b9a5fb0fb0dfc161aa071faade80a58272" translate="yes" xml:space="preserve">
          <source>Closes the file specified.</source>
          <target state="translated">指定したファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="c4ff63fa85db450c0b8efcf5dbcdc3cd9880b858" translate="yes" xml:space="preserve">
          <source>Closes the file.</source>
          <target state="translated">ファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="1376cc18b3609335ac07b4ae5e1f28049f5cd5cf" translate="yes" xml:space="preserve">
          <source>Closes the parser &lt;code&gt;my&lt;/code&gt; and its associated input stream.</source>
          <target state="translated">パーサー &lt;code&gt;my&lt;/code&gt; とそれに関連する入力ストリームを閉じます。</target>
        </trans-unit>
        <trans-unit id="0146ce78d015ea8e74af50fbb0752de4a6645ed2" translate="yes" xml:space="preserve">
          <source>Closes the selector.</source>
          <target state="translated">セレクターを閉じます。</target>
        </trans-unit>
        <trans-unit id="e252b2992033e8d453dcf8db318690b39e28adb6" translate="yes" xml:space="preserve">
          <source>Closes the socket</source>
          <target state="translated">ソケットを閉じる</target>
        </trans-unit>
        <trans-unit id="d088ba46947a0a90bc08a101b18b61eb57bcdcb7" translate="yes" xml:space="preserve">
          <source>Closes the socket.</source>
          <target state="translated">ソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="254cad76f8c10b7a72826e869ff83beeb258e099" translate="yes" xml:space="preserve">
          <source>Closes the stream &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">ストリームを閉じ &lt;code&gt;s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="358e9ce9eb4dde7cc51c84b2514e0d337c0d712a" translate="yes" xml:space="preserve">
          <source>Closes user-defined event &lt;code&gt;ev&lt;/code&gt;.</source>
          <target state="translated">ユーザー定義イベント &lt;code&gt;ev&lt;/code&gt; を閉じます。</target>
        </trans-unit>
        <trans-unit id="ebf94a4ecb3f76929bbdd057edf07a4d2676890b" translate="yes" xml:space="preserve">
          <source>Closure iterators and inline iterators have some restrictions:</source>
          <target state="translated">クロージャイテレータとインラインイテレータにはいくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="f60f90bfb0ba11553d29fa35745bde4ff3e460f2" translate="yes" xml:space="preserve">
          <source>Closure iterators are &lt;em&gt;resumable functions&lt;/em&gt; and so one has to provide the arguments to every call. To get around this limitation one can capture parameters of an outer factory proc:</source>
          <target state="translated">クロージャー反復子は&lt;em&gt;再開可能な関数な&lt;/em&gt;ので、すべての呼び出しに引数を提供する必要があります。この制限を回避するには、外部ファクトリープロシージャのパラメーターをキャプチャします。</target>
        </trans-unit>
        <trans-unit id="e578ab4b574d30ac423f92c9fab9fbe6d26dc03c" translate="yes" xml:space="preserve">
          <source>Closure iterators are not supported by the js backend.</source>
          <target state="translated">クロージャーイテレータは js バックエンドではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="bac6bebb0e61dc15f297ef83fbf7603d0859ce49" translate="yes" xml:space="preserve">
          <source>Closure iterators have other restrictions than inline iterators:</source>
          <target state="translated">クロージャイテレータはインラインイテレータとは別の制限があります。</target>
        </trans-unit>
        <trans-unit id="16b1546bfaf51b2730baa3cec8823ad69c6d520a" translate="yes" xml:space="preserve">
          <source>Closures</source>
          <target state="translated">Closures</target>
        </trans-unit>
        <trans-unit id="42c82eba4f5f8cca6cac781e120fde20eadc67bc" translate="yes" xml:space="preserve">
          <source>CoConsiderOwned:</source>
          <target state="translated">CoConsiderOwned:</target>
        </trans-unit>
        <trans-unit id="95a2e47432d6ad9f8327fc49685399e28860274c" translate="yes" xml:space="preserve">
          <source>CoDistinct:</source>
          <target state="translated">CoDistinct:</target>
        </trans-unit>
        <trans-unit id="52f1228fdb632f95822e4208afb603a20542d2a6" translate="yes" xml:space="preserve">
          <source>CoHashTypeInsideNode:</source>
          <target state="translated">CoHashTypeInsideNode:</target>
        </trans-unit>
        <trans-unit id="6367adb51f455a6fbd6b5ad7535b4443684c3822" translate="yes" xml:space="preserve">
          <source>CoIgnoreRange:</source>
          <target state="translated">CoIgnoreRange:</target>
        </trans-unit>
        <trans-unit id="b2bcb6bc9b776a4f7d79430ef98e00a286a081b6" translate="yes" xml:space="preserve">
          <source>CoOwnerSig:</source>
          <target state="translated">CoOwnerSig:</target>
        </trans-unit>
        <trans-unit id="ed14396d8ace039e7e752002b582616b7093903e" translate="yes" xml:space="preserve">
          <source>CoProc:</source>
          <target state="translated">CoProc:</target>
        </trans-unit>
        <trans-unit id="a1afbf2f10d7677207ce1d6383def689f0acfc63" translate="yes" xml:space="preserve">
          <source>CoType:</source>
          <target state="translated">CoType:</target>
        </trans-unit>
        <trans-unit id="a59a3e19db547beb43e74807faac277fd8e514cf" translate="yes" xml:space="preserve">
          <source>Code generation for closures</source>
          <target state="translated">クロージャのコード生成</target>
        </trans-unit>
        <trans-unit id="2f2988662bb4dae449632c59f53891896c1ffe6f" translate="yes" xml:space="preserve">
          <source>Code generation for closures is implemented by &lt;span id=&quot;lambda-lifting_1&quot;&gt;lambda lifting&lt;/span&gt;.</source>
          <target state="translated">クロージャのコード生成は、&lt;span id=&quot;lambda-lifting_1&quot;&gt;ラムダリフティング&lt;/span&gt;によって実装されます。</target>
        </trans-unit>
        <trans-unit id="da115340933af8057af8e634df00ede4fbf023ff" translate="yes" xml:space="preserve">
          <source>Code in branches must not affect semantics of the code that follows the &lt;code&gt;when nimvm&lt;/code&gt; statement. E.g. it must not define symbols that are used in the following code.</source>
          <target state="translated">ブランチ内のコードは、 &lt;code&gt;when nimvm&lt;/code&gt; ステートメントに続くコードのセマンティクスに影響を与えてはなりません。たとえば、次のコードで使用されるシンボルを定義してはなりません。</target>
        </trans-unit>
        <trans-unit id="342a22088ff07c4856bdae6049bd642267e82137" translate="yes" xml:space="preserve">
          <source>Code reordering</source>
          <target state="translated">除去コード</target>
        </trans-unit>
        <trans-unit id="6052b9228e0225025d8079d4cd9a44dffae292d0" translate="yes" xml:space="preserve">
          <source>Code to read some data from a socket may look something like this:</source>
          <target state="translated">ソケットからデータを読み込むコードは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c3e28ec05628ca798056cbfe2d6c881da021d62b" translate="yes" xml:space="preserve">
          <source>CodeBegin</source>
          <target state="translated">CodeBegin</target>
        </trans-unit>
        <trans-unit id="f8913336b5472371376c916db93144a284d40348" translate="yes" xml:space="preserve">
          <source>CodeEnd</source>
          <target state="translated">CodeEnd</target>
        </trans-unit>
        <trans-unit id="90e297f174173c518c30f1b842a7ba4b8fe59f7f" translate="yes" xml:space="preserve">
          <source>CodegenDecl pragma</source>
          <target state="translated">CodegenDeclプラグマ</target>
        </trans-unit>
        <trans-unit id="445615bdf6e1800a9d2e880eaac07cda6ad872ca" translate="yes" xml:space="preserve">
          <source>CodegenFlag.frameDeclared</source>
          <target state="translated">CodegenFlag.frameDeclared</target>
        </trans-unit>
        <trans-unit id="a657e0ad4ffbbf3395b95e0ca6aed2d5a46f31fd" translate="yes" xml:space="preserve">
          <source>CodegenFlag.includesStringh</source>
          <target state="translated">CodegenFlag.includesStringh</target>
        </trans-unit>
        <trans-unit id="8065cb0f47b5bb7d7033fb55daef02b499aef8b2" translate="yes" xml:space="preserve">
          <source>CodegenFlag.isHeaderFile</source>
          <target state="translated">CodegenFlag.isHeaderFile</target>
        </trans-unit>
        <trans-unit id="eab638f8119a5b3fb9598c3fbf5ba0a445a9e98a" translate="yes" xml:space="preserve">
          <source>CodegenFlag.objHasKidsValid</source>
          <target state="translated">CodegenFlag.objHasKidsValid</target>
        </trans-unit>
        <trans-unit id="49e756e93ab5d5ba1248f566c2a006bdf3a7eb54" translate="yes" xml:space="preserve">
          <source>CodegenFlag.preventStackTrace</source>
          <target state="translated">CodegenFlag.preventStackTrace</target>
        </trans-unit>
        <trans-unit id="e7a812ad054b1a6fa2fe944554c1dd75c983704a" translate="yes" xml:space="preserve">
          <source>CodegenFlag.usesThreadVars</source>
          <target state="translated">CodegenFlag.usesThreadVars</target>
        </trans-unit>
        <trans-unit id="a44b76a900cdb1fe36de64e8d3a30006a6a7928f" translate="yes" xml:space="preserve">
          <source>CodegenFlag:</source>
          <target state="translated">CodegenFlag:</target>
        </trans-unit>
        <trans-unit id="f13c6d40584dcb243a09754125c5488f70e52a2c" translate="yes" xml:space="preserve">
          <source>Coding Conventions</source>
          <target state="translated">コーディング規約</target>
        </trans-unit>
        <trans-unit id="130ffb676acebdd914d1ba89691ee6564f18cfff" translate="yes" xml:space="preserve">
          <source>Coding Guidelines</source>
          <target state="translated">コーディングガイドライン</target>
        </trans-unit>
        <trans-unit id="61b2c7d3d530eede50c425105c2a07ac349b139d" translate="yes" xml:space="preserve">
          <source>Coding conventions: ALL types are named the same as in the POSIX standard except that they start with 'T' or 'P' (if they are pointers) and without the '_t' suffix to be consistent with Nim conventions. If an identifier is a Nim keyword the `identifier` notation is used.</source>
          <target state="translated">コーディング規約。すべての型の名前は POSIX 標準と同じですが、(ポインタの場合は)'T' または 'P' で始まり、Nim の規約と整合性を取るために '_t' サフィックスを付けないことを除いて、すべての型は POSIX 標準と同じ名前になります。識別子が Nim キーワードの場合は `identifier` 記法が用いられます。</target>
        </trans-unit>
        <trans-unit id="fbd2acbd5740e1f0987422b6e3110ca59b8a979a" translate="yes" xml:space="preserve">
          <source>ColOffset:</source>
          <target state="translated">ColOffset:</target>
        </trans-unit>
        <trans-unit id="fc1d4a82ead79bdb0511fa32f61ccf7da13583a8" translate="yes" xml:space="preserve">
          <source>Collect the ZCT (zero count table). Unstable, experimental API for testing purposes. DO NOT USE!</source>
          <target state="translated">ZCT(ゼロカウントテーブル)を収集します。テスト目的のための不安定で実験的なAPI。使用しないでください。</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="21e28b42b63f040d868b338385a8167ba642e965" translate="yes" xml:space="preserve">
          <source>Collections and algorithms</source>
          <target state="translated">コレクションとアルゴリズム</target>
        </trans-unit>
        <trans-unit id="50faf4a1b9645cfa18e81b78bec6a225240d18b4" translate="yes" xml:space="preserve">
          <source>Collective imports from a directory</source>
          <target state="translated">ディレクトリからの一括インポート</target>
        </trans-unit>
        <trans-unit id="154f0a9ca98bc313c70b75923e7bd5fd5480e175" translate="yes" xml:space="preserve">
          <source>Column where the symbol is located in the file. Columns start to count at &lt;strong&gt;0&lt;/strong&gt;.</source>
          <target state="translated">ファイル内のシンボルが配置されている列。列のカウントは&lt;strong&gt;0&lt;/strong&gt;から始まり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4e8d5acb41ba512f20e53356846a87c441aa1b4b" translate="yes" xml:space="preserve">
          <source>Combine URIs</source>
          <target state="translated">URI の組み合わせ</target>
        </trans-unit>
        <trans-unit id="b730a233b63c2d53c4768d67fff2f5f7835afa27" translate="yes" xml:space="preserve">
          <source>Combines a base URI with a reference URI.</source>
          <target state="translated">ベースURIと参照URIを結合します。</target>
        </trans-unit>
        <trans-unit id="1ed571befc0ee7c064890552078226fe5f5464c0" translate="yes" xml:space="preserve">
          <source>Combines multiple URIs together.</source>
          <target state="translated">複数のURIを結合します。</target>
        </trans-unit>
        <trans-unit id="9121404c3361888c8d936a3c6ea87d5d1db69153" translate="yes" xml:space="preserve">
          <source>Command call</source>
          <target state="translated">コマンドコール</target>
        </trans-unit>
        <trans-unit id="e4b8ebe5450298dde411b0104391c594fc5d6a00" translate="yes" xml:space="preserve">
          <source>Command has the form 'program args' where args are the command line arguments given to program. The proc returns the error code of the shell when it has finished (zero if there is no error). The proc does not return until the process has finished.</source>
          <target state="translated">コマンドは 'program args' という形をしています。proc はシェルが終了するとシェルのエラーコードを返します (エラーがなければゼロ)。プロセスが終了するまで proc は戻りません。</target>
        </trans-unit>
        <trans-unit id="3ebaef5fa9df20d34828a55c8d915b4d58e4c565" translate="yes" xml:space="preserve">
          <source>Command has the form 'program args' where args are the command line arguments given to program. The proc returns the error code of the shell when it has finished. The proc does not return until the process has finished. To execute a program without having a shell involved, use the &lt;em&gt;execProcess&lt;/em&gt; proc of the &lt;em&gt;osproc&lt;/em&gt; module.</source>
          <target state="translated">コマンドの形式は 'program args'で、argsはプログラムに指定されたコマンドライン引数です。procは終了時にシェルのエラーコードを返します。プロセスが完了するまで、プロシージャは戻りません。シェルを使用せずにプログラムを実行するには、&lt;em&gt;osproc&lt;/em&gt;モジュールの&lt;em&gt;execProcess&lt;/em&gt; procを使用します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ea4e7b6e909cec5cea4f1f8e29c9d02f8626fd95" translate="yes" xml:space="preserve">
          <source>Command invocation syntax</source>
          <target state="translated">コマンド呼び出し構文</target>
        </trans-unit>
        <trans-unit id="1a602b900f84a5cedb11f83b2b59a0df7530ae0b" translate="yes" xml:space="preserve">
          <source>Command line parameters. It doesn't make sense to have these for a console anyways, so no big deal here.</source>
          <target state="translated">コマンドラインのパラメータです。いずれにしてもコンソール用にこれを持っていても意味がないので、ここでは大したことはありません。</target>
        </trans-unit>
        <trans-unit id="cc917b5ddc14434e4f4bd712313ab213bb59479b" translate="yes" xml:space="preserve">
          <source>Command line settings have priority over configuration file settings.</source>
          <target state="translated">コマンドラインの設定は、設定ファイルの設定よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="62a7df366238f63d85e05093589b2449db060ec3" translate="yes" xml:space="preserve">
          <source>Command line switch</source>
          <target state="translated">コマンドラインスイッチ</target>
        </trans-unit>
        <trans-unit id="774ba146a62c9c3ff46ff9cc5455b08807e03827" translate="yes" xml:space="preserve">
          <source>Command line switches</source>
          <target state="translated">コマンドラインスイッチ</target>
        </trans-unit>
        <trans-unit id="e06aecbb16c41a3cba02b57b0febd89dc5d12db0" translate="yes" xml:space="preserve">
          <source>Command-line settings have priority over configuration file settings.</source>
          <target state="translated">コマンドラインの設定は、設定ファイルの設定よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="b717bf13954a9f922bdab223e60a89dfcd5ec623" translate="yes" xml:space="preserve">
          <source>Command-line switches</source>
          <target state="translated">コマンドラインスイッチ</target>
        </trans-unit>
        <trans-unit id="e7d3c5a2a69a1e7554cc4d6cced80eec24d1af6c" translate="yes" xml:space="preserve">
          <source>Command:</source>
          <target state="translated">Command:</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="153d7a58b3a3e898fcbdd04c462af308414bd09d" translate="yes" xml:space="preserve">
          <source>Comment</source>
          <target state="translated">Comment</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="274b97749534c15eb0881156658aa6a771af205f" translate="yes" xml:space="preserve">
          <source>Comments start anywhere outside a string or character literal with the hash character &lt;code&gt;#&lt;/code&gt;. Comments consist of a concatenation of &lt;span id=&quot;comment-pieces_1&quot;&gt;comment pieces&lt;/span&gt;. A comment piece starts with &lt;code&gt;#&lt;/code&gt; and runs until the end of the line. The end of line characters belong to the piece. If the next line only consists of a comment piece with no other tokens between it and the preceding one, it does not start a new comment:</source>
          <target state="translated">コメントは、文字列または文字リテラルの外側のどこからでもハッシュ文字 &lt;code&gt;#&lt;/code&gt; で始まります。コメントは、&lt;span id=&quot;comment-pieces_1&quot;&gt;コメント部分の&lt;/span&gt;連結で構成されます。コメントピースは &lt;code&gt;#&lt;/code&gt; で始まり、行の終わりまで続きます。行末文字はピースに属します。次の行がコメント部分のみで構成されており、前のトークンとの間に他のトークンがない場合、新しいコメントは開始されません。</target>
        </trans-unit>
        <trans-unit id="c411e8b7522f5f1ab1db28f26cc28d9cfcd3b95f" translate="yes" xml:space="preserve">
          <source>Comments start anywhere outside a string or character literal with the hash character &lt;code&gt;#&lt;/code&gt;. Documentation comments start with &lt;code&gt;##&lt;/code&gt;:</source>
          <target state="translated">コメントは、文字列または文字リテラルの外側のどこからでもハッシュ文字 &lt;code&gt;#&lt;/code&gt; で始まります。ドキュメントのコメントは &lt;code&gt;##&lt;/code&gt; で始まります：</target>
        </trans-unit>
        <trans-unit id="4f1f26885ef678483f0972813d20a3f0988b06c7" translate="yes" xml:space="preserve">
          <source>Common datatypes and definitions for all &lt;code&gt;db_*.nim&lt;/code&gt; ( &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;, &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;, and &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;) modules.</source>
          <target state="translated">すべての &lt;code&gt;db_*.nim&lt;/code&gt; &lt;a href=&quot;db_mysql&quot;&gt;。nim&lt;/a&gt;（db_mysql、&lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;、および&lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;）モジュールの共通のデータ型と定義。</target>
        </trans-unit>
        <trans-unit id="f6e66dc0c61f94fda5bd1db3ebe188a07514aca5" translate="yes" xml:space="preserve">
          <source>Common usages of sets:</source>
          <target state="translated">セットの一般的な使い方。</target>
        </trans-unit>
        <trans-unit id="902810f4e60ff40db9d84f3da77588ba1b818549" translate="yes" xml:space="preserve">
          <source>Commonly used commands and switches have abbreviations, so you can also use:</source>
          <target state="translated">よく使われるコマンドやスイッチには略語があるので、それを使うこともできます。</target>
        </trans-unit>
        <trans-unit id="a5319d0d1ec0d55142df426892db8c5d05612430" translate="yes" xml:space="preserve">
          <source>Compare a pair of MemSlice for strict equality.</source>
          <target state="translated">MemSliceのペアを厳密に等しくするために比較します。</target>
        </trans-unit>
        <trans-unit id="3ca919f55f5299cc99d77e912869b201fbe88e9f" translate="yes" xml:space="preserve">
          <source>Compare proc for strings. More efficient than the generic version.</source>
          <target state="translated">文字列用の proc を比較します。一般的なバージョンよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="713c0a3395ba4071e3413c8aa68d41913525749b" translate="yes" xml:space="preserve">
          <source>Compare proc for strings. More efficient than the generic version. &lt;strong&gt;Note&lt;/strong&gt;: The precise result values depend on the used C runtime library and can differ between operating systems!</source>
          <target state="translated">文字列のプロシージャを比較します。一般的なバージョンよりも効率的です。&lt;strong&gt;注&lt;/strong&gt;：正確な結果値は、使用するCランタイムライブラリによって異なり、オペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="4287fbb666a25026068053f3f9ad12f30f6db746" translate="yes" xml:space="preserve">
          <source>Compare the string form of the status code with a HttpCode</source>
          <target state="translated">ステータス・コードの文字列形式を HttpCode と比較します。</target>
        </trans-unit>
        <trans-unit id="69bc2d6cb05278fa849c74440b354d87fa821fc7" translate="yes" xml:space="preserve">
          <source>Compare two JsObjects or JsAssocs. Be careful though, as this is comparison like in JavaScript, so if your JsObjects are in fact JavaScript Objects, and not strings or numbers, this is a &lt;em&gt;comparison of references&lt;/em&gt;.</source>
          <target state="translated">2つのJsObjectsまたはJsAssocsを比較します。ただし、これはJavaScriptのような比較であるため、JsObjectが実際にはJavaScriptオブジェクトであり、文字列や数値ではない場合、これは&lt;em&gt;参照の比較です&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ace263e4f421cf6dcb4056cab9ce47e4c97e0a57" translate="yes" xml:space="preserve">
          <source>Compare two Mongo Object IDs for equality</source>
          <target state="translated">2 つの Mongo Object ID を比較して平等性を求める</target>
        </trans-unit>
        <trans-unit id="d1661d28dc61c55d55d7275df334fc287dca2014" translate="yes" xml:space="preserve">
          <source>Compare two Nim nodes. Return true if nodes are structurally equivalent. This means two independently created nodes can be equal.</source>
          <target state="translated">2つのNimノードを比較します.ノードが構造的に等価であれば真を返します。これは、独立して作成された2つのノードが等しいことを意味します。</target>
        </trans-unit>
        <trans-unit id="b756ed11ee75b3719724aaa8f881b347765d2a4c" translate="yes" xml:space="preserve">
          <source>Compare two complex numbers &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; approximately.</source>
          <target state="translated">2つの複素数&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;yを&lt;/em&gt;おおよそ比較します。</target>
        </trans-unit>
        <trans-unit id="cda56ff99b85235122f5a9199c294005e500883f" translate="yes" xml:space="preserve">
          <source>Compare two complex numbers &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; for equality.</source>
          <target state="translated">2つの複素数&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;y&lt;/em&gt;が等しいかどうかを比較します。</target>
        </trans-unit>
        <trans-unit id="38584732bd320a1a1b3c38e9ca9b894cc10da7c4" translate="yes" xml:space="preserve">
          <source>Compares &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; ignoring case.</source>
          <target state="translated">ケースを無視して &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を比較します。</target>
        </trans-unit>
        <trans-unit id="4c3b65b823b11128f23195309bdaa1c2ef1514be" translate="yes" xml:space="preserve">
          <source>Compares the memory blocks &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. &lt;code&gt;size&lt;/code&gt; bytes will be compared.</source>
          <target state="translated">メモリブロック &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を比較します。 &lt;code&gt;size&lt;/code&gt; バイトが比較されます。</target>
        </trans-unit>
        <trans-unit id="363e8f93b8478ce56f8e97751dd31a0540861b16" translate="yes" xml:space="preserve">
          <source>Compares two IpAddresses for Equality. Returns true if the addresses are equal</source>
          <target state="translated">2つの IpAddresses を比較して均等性を確認します。アドレスが等しい場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="8a8e9003d271f4d9b109efb323b9b2449d0cc9ef" translate="yes" xml:space="preserve">
          <source>Compares two Nim identifiers.</source>
          <target state="translated">2つのNim識別子を比較します。</target>
        </trans-unit>
        <trans-unit id="4a2c34ba1cad3efa737251ee39276592be8928b7" translate="yes" xml:space="preserve">
          <source>Compares two Nim nodes' types. Return true if the types are the same, e.g. true when comparing alias with original type.</source>
          <target state="translated">2つのNimノードの型を比較します。エイリアスと元の型を比較する場合など、型が同じ場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="44fb430a1be5d0c80dae6aef5a8a383435e9a18d" translate="yes" xml:space="preserve">
          <source>Compares two Nim symbols.</source>
          <target state="translated">2つのNimシンボルを比較します。</target>
        </trans-unit>
        <trans-unit id="dfc90cbcfaae0111e022afd0892deaca0124b935" translate="yes" xml:space="preserve">
          <source>Compares two UTF-8 strings and ignores the case. Returns:</source>
          <target state="translated">2つのUTF-8文字列を比較し、大文字小文字を無視します。戻り値。</target>
        </trans-unit>
        <trans-unit id="412f5d0ec6a76816ecf0fa783684c42fcdf79009" translate="yes" xml:space="preserve">
          <source>Compares two chars and returns true if &lt;code&gt;x&lt;/code&gt; is lexicographically before &lt;code&gt;y&lt;/code&gt; (uppercase letters come before lowercase letters).</source>
          <target state="translated">2つの文字を比較し、 &lt;code&gt;x&lt;/code&gt; が辞書式順序で &lt;code&gt;y&lt;/code&gt; の前にある場合（大文字は小文字の前に来る）、trueを返します。</target>
        </trans-unit>
        <trans-unit id="aa27ad8a48a16fc9a91c7c1dd990877e1f8ef7ad" translate="yes" xml:space="preserve">
          <source>Compares two colors.</source>
          <target state="translated">2つの色を比較します。</target>
        </trans-unit>
        <trans-unit id="2e46d9407e580588d12aa06493217331087b02e2" translate="yes" xml:space="preserve">
          <source>Compares two complex numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; for equality.</source>
          <target state="translated">2つの複素数 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を比較して等しいかどうか。</target>
        </trans-unit>
        <trans-unit id="7964e96a9d4978590242bc809014c96b43dddcd4" translate="yes" xml:space="preserve">
          <source>Compares two integers for equality.</source>
          <target state="translated">2つの整数を等しくするために比較します。</target>
        </trans-unit>
        <trans-unit id="4755fdf3699ce46356b5650690f4aed883d34282" translate="yes" xml:space="preserve">
          <source>Compares two paths.</source>
          <target state="translated">2つのパスを比較します。</target>
        </trans-unit>
        <trans-unit id="4bc1b15886f0cbabc95be9b72e466b42cff2a2ff" translate="yes" xml:space="preserve">
          <source>Compares two rationals.</source>
          <target state="translated">2つの合理性を比較します。</target>
        </trans-unit>
        <trans-unit id="5297655dbf47ca03ed087a0e9f65968c39eeca7b" translate="yes" xml:space="preserve">
          <source>Compares two strings and returns true if &lt;code&gt;x&lt;/code&gt; is lexicographically before &lt;code&gt;y&lt;/code&gt; (uppercase letters come before lowercase letters).</source>
          <target state="translated">2つの文字列を比較し、 &lt;code&gt;x&lt;/code&gt; が辞書式順序で &lt;code&gt;y&lt;/code&gt; の前にある場合（大文字は小文字の前に来る）、trueを返します。</target>
        </trans-unit>
        <trans-unit id="1186fbbc3d52de56dbc9c9717535fda54143ab4e" translate="yes" xml:space="preserve">
          <source>Compares two strings in a case insensitive manner. Returns:</source>
          <target state="translated">大文字小文字を区別せずに2つの文字列を比較します。戻り値。</target>
        </trans-unit>
        <trans-unit id="a1205e65094b19ac14de1f11feba4ed9f7fbd6ca" translate="yes" xml:space="preserve">
          <source>Compares two unsigned integers for equality.</source>
          <target state="translated">2つの符号なし整数を等しく比較します。</target>
        </trans-unit>
        <trans-unit id="808665b55ba7e91152a1e1b3a1ba6da3d73c296b" translate="yes" xml:space="preserve">
          <source>Compilation cache</source>
          <target state="translated">コンパイルキャッシュ</target>
        </trans-unit>
        <trans-unit id="0932ff4b69c147e1bda9fb48fe84be75b0a10c3e" translate="yes" xml:space="preserve">
          <source>Compilation to JavaScript</source>
          <target state="translated">JavaScriptへのコンパイル</target>
        </trans-unit>
        <trans-unit id="878af28b527d45c55cf5a43057e4215a4aca3e21" translate="yes" xml:space="preserve">
          <source>Compile and link against &lt;code&gt;nimrtl.dll&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nimrtl.dll&lt;/code&gt; をコンパイルしてリンクします。</target>
        </trans-unit>
        <trans-unit id="c33145fed36fd775c7d41e28dfbc2215fbd287c5" translate="yes" xml:space="preserve">
          <source>Compile nimgrep with the command:</source>
          <target state="translated">コマンドでnimgrepをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="bf709b6eca5cee4cc4462e1ffec11a8906e37288" translate="yes" xml:space="preserve">
          <source>Compile pragma</source>
          <target state="translated">pragmaをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="7488dd43b0bed69cfe822389dad57f393c6418dc" translate="yes" xml:space="preserve">
          <source>Compile the Nim code to JavaScript with &lt;code&gt;nim js -o:calculator.js calculator.nim&lt;/code&gt; and open &lt;code&gt;host.html&lt;/code&gt; in a browser. If the browser supports javascript, you should see the value &lt;code&gt;10&lt;/code&gt; in the browser's console. Use the &lt;a href=&quot;dom&quot;&gt;dom module&lt;/a&gt; for specific DOM querying and modification procs or take a look at &lt;a href=&quot;https://github.com/pragmagic/karax&quot;&gt;karax&lt;/a&gt; for how to develop browser based applications.</source>
          <target state="translated">&lt;code&gt;nim js -o:calculator.js calculator.nim&lt;/code&gt; を使用してNimコードをJavaScriptにコンパイルし、 &lt;code&gt;host.html&lt;/code&gt; をブラウザーで開きます。ブラウザーがJavaScriptをサポートしている場合、ブラウザーのコンソールに値 &lt;code&gt;10&lt;/code&gt; が表示されます。特定のDOMクエリおよび変更&lt;a href=&quot;https://github.com/pragmagic/karax&quot;&gt;プロシージャ&lt;/a&gt;に&lt;a href=&quot;dom&quot;&gt;domモジュール&lt;/a&gt;を使用するか、またはブラウザベースのアプリケーションを開発する方法についてkaraxを参照してください。</target>
        </trans-unit>
        <trans-unit id="49762e3ac8027940c66ebf6d6045d011f07a5113" translate="yes" xml:space="preserve">
          <source>Compile the Nim code to JavaScript with &lt;code&gt;nim js -o:calculator.js calculator.nim&lt;/code&gt; and open &lt;code&gt;host.html&lt;/code&gt; in a browser. If the browser supports javascript, you should see the value &lt;code&gt;10&lt;/code&gt; in the browser's console. Use the &lt;a href=&quot;dom&quot;&gt;dom module&lt;/a&gt; for specific DOM querying and modification procs or take a look at &lt;a href=&quot;https://github.com/pragmagic/karax&quot;&gt;karax&lt;/a&gt; for how to develop browser-based applications.</source>
          <target state="translated">&lt;code&gt;nim js -o:calculator.js calculator.nim&lt;/code&gt; を使用してNimコードをJavaScriptにコンパイルし、ブラウザーで &lt;code&gt;host.html&lt;/code&gt; を開きます。ブラウザがjavascriptをサポートしている場合は、ブラウザのコンソールに値 &lt;code&gt;10&lt;/code&gt; が表示されます。特定のDOMクエリおよび変更&lt;a href=&quot;https://github.com/pragmagic/karax&quot;&gt;プロシージャ&lt;/a&gt;に&lt;a href=&quot;dom&quot;&gt;domモジュール&lt;/a&gt;を使用するか、ブラウザベースのアプリケーションを開発する方法についてkaraxを参照してください。</target>
        </trans-unit>
        <trans-unit id="85eaa712abd6399660c862038765176bc6bda1e6" translate="yes" xml:space="preserve">
          <source>Compile the Nim code to JavaScript with &lt;code&gt;nim js -o:fib.js fib.nim&lt;/code&gt; and open &lt;code&gt;mhost.html&lt;/code&gt; in a browser. If the browser supports javascript, you should see an alert box displaying the text &lt;code&gt;Fib for 9 is 34&lt;/code&gt;. As mentioned earlier, JavaScript doesn't require an initialisation call to &lt;code&gt;NimMain&lt;/code&gt; or similar function and you can call the exported Nim proc directly.</source>
          <target state="translated">JavaScriptにニムコードをコンパイルし &lt;code&gt;nim js -o:fib.js fib.nim&lt;/code&gt; とオープン &lt;code&gt;mhost.html&lt;/code&gt; ブラウザインチ ブラウザーがJavaScriptをサポートしている場合は、「 &lt;code&gt;Fib for 9 is 34&lt;/code&gt; 」というテキストを表示するアラートボックスが表示されます。前述のように、JavaScriptは &lt;code&gt;NimMain&lt;/code&gt; または同様の関数の初期化呼び出しを必要とせず、エクスポートされたNim プロシージャを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0cf02b89c73004e3c4d281ecfb740af8c353d03a" translate="yes" xml:space="preserve">
          <source>Compile the Nim code to JavaScript with &lt;code&gt;nim js -o:fib.js fib.nim&lt;/code&gt; and open &lt;code&gt;mhost.html&lt;/code&gt; in a browser. If the browser supports javascript, you should see an alert box displaying the text &lt;code&gt;Fib for 9 is 34&lt;/code&gt;. As mentioned earlier, JavaScript doesn't require an initialization call to &lt;code&gt;NimMain&lt;/code&gt; or a similar function and you can call the exported Nim proc directly.</source>
          <target state="translated">JavaScriptにニムコードをコンパイルし &lt;code&gt;nim js -o:fib.js fib.nim&lt;/code&gt; とオープン &lt;code&gt;mhost.html&lt;/code&gt; ブラウザインチ ブラウザがjavascriptをサポートしている場合は、 &lt;code&gt;Fib for 9 is 34&lt;/code&gt; というテキストを表示するアラートボックスが表示されます。前述のように、JavaScriptは &lt;code&gt;NimMain&lt;/code&gt; または同様の関数への初期化呼び出しを必要とせず、エクスポートされたNimプロシージャを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3249c107401dff650798e6147591e69a403f5d98" translate="yes" xml:space="preserve">
          <source>Compile time symbols</source>
          <target state="translated">コンパイル時間の記号</target>
        </trans-unit>
        <trans-unit id="6596981d9091711d03709b87143d43f267911a52" translate="yes" xml:space="preserve">
          <source>Compile time symbols are completely &lt;strong&gt;case insensitive&lt;/strong&gt; and underscores are ignored too. &lt;code&gt;--define:FOO&lt;/code&gt; and &lt;code&gt;--define:foo&lt;/code&gt; are identical.</source>
          <target state="translated">コンパイル時のシンボルは完全に&lt;strong&gt;大文字と小文字を区別せ&lt;/strong&gt;ず、アンダースコアも無視されます。 &lt;code&gt;--define:FOO&lt;/code&gt; と &lt;code&gt;--define:foo&lt;/code&gt; は同じです。</target>
        </trans-unit>
        <trans-unit id="5a4d15220f7a3c39d67a6c4bbb5529936f352e04" translate="yes" xml:space="preserve">
          <source>Compile-time &lt;a href=&quot;#readFile&quot;&gt;readFile&lt;/a&gt; proc for easy &lt;span id=&quot;resource_1&quot;&gt;resource&lt;/span&gt; embedding:</source>
          <target state="translated">&lt;span id=&quot;resource_1&quot;&gt;リソースの&lt;/span&gt;埋め込みを容易に&lt;span id=&quot;resource_1&quot;&gt;する&lt;/span&gt;コンパイル時の&lt;a href=&quot;#readFile&quot;&gt;readFileプロシージャ&lt;/a&gt;：&lt;span id=&quot;resource_1&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f91b63579d29779fd404a6e9b10c1fcb46227027" translate="yes" xml:space="preserve">
          <source>Compile-time &lt;a href=&quot;io#readFile,string&quot;&gt;readFile&lt;/a&gt; proc for easy &lt;span id=&quot;resource_1&quot;&gt;resource&lt;/span&gt; embedding:</source>
          <target state="translated">&lt;span id=&quot;resource_1&quot;&gt;リソース&lt;/span&gt;を簡単に埋め込むためのコンパイル時の&lt;a href=&quot;io#readFile,string&quot;&gt;readFileproc&lt;/a&gt;：&lt;span id=&quot;resource_1&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="f753e31d655bec1af3ee2c980feff89c43253d0b" translate="yes" xml:space="preserve">
          <source>Compile-time symbols</source>
          <target state="translated">コンパイル時のシンボル</target>
        </trans-unit>
        <trans-unit id="5b0f5f403195f36c3a979391f5d12022f614e468" translate="yes" xml:space="preserve">
          <source>Compile-time symbols are completely &lt;strong&gt;case insensitive&lt;/strong&gt; and underscores are ignored too. &lt;code&gt;--define:FOO&lt;/code&gt; and &lt;code&gt;--define:foo&lt;/code&gt; are identical.</source>
          <target state="translated">コンパイル時の記号では&lt;strong&gt;大文字と小文字&lt;/strong&gt;は完全に&lt;strong&gt;区別&lt;/strong&gt;されず、アンダースコアも無視されます。 &lt;code&gt;--define:FOO&lt;/code&gt; と &lt;code&gt;--define:foo&lt;/code&gt; は同じです。</target>
        </trans-unit>
        <trans-unit id="e0d3140be5457b1221b91f5ad7634eb746a173c0" translate="yes" xml:space="preserve">
          <source>Compile-time symbols starting with the &lt;code&gt;nim&lt;/code&gt; prefix are reserved for the implementation and should not be used elsewhere.</source>
          <target state="translated">&lt;code&gt;nim&lt;/code&gt; プレフィックスで始まるコンパイル時シンボルは実装用に予約されており、他の場所で使用しないでください。</target>
        </trans-unit>
        <trans-unit id="cb459a0eee04bde443938a69fc76d7db96f41c55" translate="yes" xml:space="preserve">
          <source>Compiled test files as well as &lt;code&gt;nim c -r &amp;lt;testfile.nim&amp;gt;&lt;/code&gt; exit with 0 for success (no failed tests) or 1 for failure.</source>
          <target state="translated">コンパイルされたテストファイルと &lt;code&gt;nim c -r &amp;lt;testfile.nim&amp;gt;&lt;/code&gt; 、成功した場合は0（失敗したテストなし）、失敗した場合は1で終了します。</target>
        </trans-unit>
        <trans-unit id="3093b3355195e5474b9e58889d112403d17e51f9" translate="yes" xml:space="preserve">
          <source>Compiled test files return the number of failed test as exit code, while &lt;code&gt;nim c -r &amp;lt;testfile.nim&amp;gt;&lt;/code&gt; exits with 0 or 1</source>
          <target state="translated">コンパイルされたテストファイルは失敗したテストの数を終了コードとして返しますが、 &lt;code&gt;nim c -r &amp;lt;testfile.nim&amp;gt;&lt;/code&gt; は0または1で終了します</target>
        </trans-unit>
        <trans-unit id="bbb5c798e62139162af1473600be1f2596ffad9b" translate="yes" xml:space="preserve">
          <source>Compiler Messages</source>
          <target state="translated">コンパイラメッセージ</target>
        </trans-unit>
        <trans-unit id="520d5b4d745c1a503b4c698fcaf940baef838b67" translate="yes" xml:space="preserve">
          <source>Compiler Selection</source>
          <target state="translated">コンパイラの選択</target>
        </trans-unit>
        <trans-unit id="1d3daee41eb1ab95a24f4b4808b6f46a84a1ada9" translate="yes" xml:space="preserve">
          <source>Compiler Usage</source>
          <target state="translated">コンパイラの使用法</target>
        </trans-unit>
        <trans-unit id="6e268e20d746fbfa3dab80e82d173f18b1763a04" translate="yes" xml:space="preserve">
          <source>Compiler as a service (CAAS)</source>
          <target state="translated">コンパイラ・アズ・ア・サービス (CAAS)</target>
        </trans-unit>
        <trans-unit id="3bd2372d9b1a43593fb29c3768d4082dd251bffe" translate="yes" xml:space="preserve">
          <source>Compiler user guide</source>
          <target state="translated">コンパイラユーザーガイド</target>
        </trans-unit>
        <trans-unit id="81ac7f1d4388e9b128f4215cf40efb4e745cff02" translate="yes" xml:space="preserve">
          <source>Compiles the passed string to its AST representation. Expects a single expression. Raises &lt;code&gt;ValueError&lt;/code&gt; for parsing errors.</source>
          <target state="translated">渡された文字列をAST表現にコンパイルします。単一の式が必要です。発生させます &lt;code&gt;ValueError&lt;/code&gt; エラーを解析します。</target>
        </trans-unit>
        <trans-unit id="a5085005cb5e2953acc40fa1e77b07cbbfd40dfe" translate="yes" xml:space="preserve">
          <source>Compiles the passed string to its AST representation. Expects one or more statements. Raises &lt;code&gt;ValueError&lt;/code&gt; for parsing errors.</source>
          <target state="translated">渡された文字列をAST表現にコンパイルします。1つ以上のステートメントが必要です。発生させます &lt;code&gt;ValueError&lt;/code&gt; エラーを解析します。</target>
        </trans-unit>
        <trans-unit id="58d1fb967cbe2b7acaefbe24ca8da7b2e7f5de80" translate="yes" xml:space="preserve">
          <source>CompilesId:</source>
          <target state="translated">CompilesId:</target>
        </trans-unit>
        <trans-unit id="77eb56771c18bc8b264df4346e94b7ebe6b33123" translate="yes" xml:space="preserve">
          <source>Compiling the compiler is a simple matter of running:</source>
          <target state="translated">コンパイラのコンパイルは実行するだけです。</target>
        </trans-unit>
        <trans-unit id="2f5077fe77321d47df48ccf8749520b36071aa88" translate="yes" xml:space="preserve">
          <source>Complete traversal is done in this way:</source>
          <target state="translated">完全なトラバーサルはこのようにして行われます。</target>
        </trans-unit>
        <trans-unit id="cab76b2ebd69bdf3b5b92eb52feb51cc4b402a6f" translate="yes" xml:space="preserve">
          <source>Completes &lt;code&gt;future&lt;/code&gt; with &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; &lt;code&gt;future&lt;/code&gt; を完了します。</target>
        </trans-unit>
        <trans-unit id="b727af9ba59f59ad76e825b70f43aaa3d42ea3d1" translate="yes" xml:space="preserve">
          <source>Completes &lt;code&gt;future&lt;/code&gt; with value &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;val&lt;/code&gt; で &lt;code&gt;future&lt;/code&gt; を完了します。</target>
        </trans-unit>
        <trans-unit id="40ef4eeda1b4f2a13db5aaf9f7e4bddee599955c" translate="yes" xml:space="preserve">
          <source>Completes a &lt;code&gt;FutureStream&lt;/code&gt; signalling the end of data.</source>
          <target state="translated">データの終わりを &lt;code&gt;FutureStream&lt;/code&gt; 完了します。</target>
        </trans-unit>
        <trans-unit id="0110b9cf619b8ce82b78df293b7c62f65f9eb0a4" translate="yes" xml:space="preserve">
          <source>Completes a &lt;code&gt;FutureVar&lt;/code&gt; with value &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;val&lt;/code&gt; で &lt;code&gt;FutureVar&lt;/code&gt; を完了します。</target>
        </trans-unit>
        <trans-unit id="08cb7e6f1a4681459b6dd072ffa9fc0fdcc0eb0c" translate="yes" xml:space="preserve">
          <source>Completes a &lt;code&gt;FutureVar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FutureVar&lt;/code&gt; を完了します。</target>
        </trans-unit>
        <trans-unit id="6d097314815e40ae3735bd71a1636ee42c72c8e0" translate="yes" xml:space="preserve">
          <source>Completes a void &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">空の &lt;code&gt;future&lt;/code&gt; 完成させます。</target>
        </trans-unit>
        <trans-unit id="333a1a308de6c2c35e0d5e33f72d7cfe880dee44" translate="yes" xml:space="preserve">
          <source>Completes the report and closes the underlying stream.</source>
          <target state="translated">レポートを完成させ、基礎となるストリームを閉じます。</target>
        </trans-unit>
        <trans-unit id="7e686cfe94c3be5906c62711bb9280b6cd35fad5" translate="yes" xml:space="preserve">
          <source>Complex assignments</source>
          <target state="translated">複雑な課題</target>
        </trans-unit>
        <trans-unit id="d7bd37c75fdf64a9029326b297277164a208fa03" translate="yes" xml:space="preserve">
          <source>Complex number &lt;code&gt;x&lt;/code&gt; raised to the power &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">複素数 &lt;code&gt;x&lt;/code&gt; を &lt;code&gt;y&lt;/code&gt; 乗します。</target>
        </trans-unit>
        <trans-unit id="4635c03ab74a13978060c6171d1ec3c9fcbeeb0d" translate="yes" xml:space="preserve">
          <source>Comprehension for seq/set/table collections. &lt;code&gt;init&lt;/code&gt; is the init call, and so custom collections are supported.</source>
          <target state="translated">seq / set / tableコレクションの理解。 &lt;code&gt;init&lt;/code&gt; はinit呼び出しであるため、カスタムコレクションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="d61d954a7d29ef62d0d0f483f113da14d756f75b" translate="yes" xml:space="preserve">
          <source>Compute the duration between &lt;code&gt;dt1&lt;/code&gt; and &lt;code&gt;dt2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dt1&lt;/code&gt; と &lt;code&gt;dt2&lt;/code&gt; の間の期間を計算します。</target>
        </trans-unit>
        <trans-unit id="9af3b0d9da2e0553db86df53b3bb62313863ad0f" translate="yes" xml:space="preserve">
          <source>Compute the hash for a JSON node</source>
          <target state="translated">JSONノードのハッシュを計算します。</target>
        </trans-unit>
        <trans-unit id="4ced60d2b9e85b7a9857baac040d6183d6108fbb" translate="yes" xml:space="preserve">
          <source>Compute the hash for a SEXP node</source>
          <target state="translated">SEXPノードのハッシュを計算します。</target>
        </trans-unit>
        <trans-unit id="e8fd8b569127b0237c8be52c8afca012c8a6dbcb" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;x&lt;/code&gt; to the power &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の &lt;code&gt;y&lt;/code&gt; 乗を計算します。</target>
        </trans-unit>
        <trans-unit id="af6cee62dd41244862a1beef8f748c9e0185561d" translate="yes" xml:space="preserve">
          <source>Computes &lt;code&gt;x&lt;/code&gt; to the power &lt;code&gt;y&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; must be non-negative, use &lt;a href=&quot;#pow,float,float&quot;&gt;pow&lt;/a&gt; for negative exponents.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の &lt;code&gt;y&lt;/code&gt; 乗を計算します。 &lt;code&gt;x&lt;/code&gt; は負でない必要があります。負の指数には&lt;a href=&quot;#pow,float,float&quot;&gt;pow&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="94af11070cce950ccd5ff1c392eaed4a40509f7a" translate="yes" xml:space="preserve">
          <source>Computes a new mapping for the &lt;code&gt;key&lt;/code&gt; with the specified &lt;code&gt;mapper&lt;/code&gt; procedure.</source>
          <target state="translated">指定された &lt;code&gt;mapper&lt;/code&gt; プロシージャを使用して、 &lt;code&gt;key&lt;/code&gt; 新しいマッピングを計算します。</target>
        </trans-unit>
        <trans-unit id="7ea3029d553a437cb0a873e82dbec438a6d0a05c" translate="yes" xml:space="preserve">
          <source>Computes a random &lt;code&gt;uint64&lt;/code&gt; number using the given state.</source>
          <target state="translated">指定された状態を使用してランダムな &lt;code&gt;uint64&lt;/code&gt; 番号を計算します。</target>
        </trans-unit>
        <trans-unit id="e2d0babeba892b686415bc1e0caed9ddb95cd595" translate="yes" xml:space="preserve">
          <source>Computes an MD5 value of &lt;code&gt;s&lt;/code&gt; and returns its string representation. .. note:: available at compile time</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; のMD5値を計算し、その文字列表現を返します。..注::コンパイル時に利用可能</target>
        </trans-unit>
        <trans-unit id="799c5ee3f452a72baa9a07eb2b7df09cf96da70e" translate="yes" xml:space="preserve">
          <source>Computes hash for rational &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">有理数 &lt;code&gt;x&lt;/code&gt; のハッシュを計算します</target>
        </trans-unit>
        <trans-unit id="6c04ba3c833d3f546fd08002af4268456d017142" translate="yes" xml:space="preserve">
          <source>Computes hash for rational &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">有理&lt;em&gt;xの&lt;/em&gt;ハッシュを計算します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3e691903874a2fd0a705758f296dc2e42df39d8" translate="yes" xml:space="preserve">
          <source>Computes hash values for routine (proc, method etc) signatures.</source>
          <target state="translated">ルーチン(proc、メソッドなど)の署名のハッシュ値を計算します。</target>
        </trans-unit>
        <trans-unit id="fda1ee21455ba8497cc64f571d8525bed97e330c" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Binomial_coefficient&quot;&gt;binomial coefficient&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Binomial_coefficient&quot;&gt;二項係数を&lt;/a&gt;計算します。</target>
        </trans-unit>
        <trans-unit id="484a1ebd30f743354cd4740289d87687cc5aaca8" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_function&quot;&gt;error function&lt;/a&gt; for &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_function&quot;&gt;誤差関数&lt;/a&gt;のため &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2b0d4bed33f41b9970e594e31138988ea18feef" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Error_function#Complementary_error_function&quot;&gt;complementary error function&lt;/a&gt; for &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Error_function#Complementary_error_function&quot;&gt;相補誤差関数&lt;/a&gt;のため &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9228818f0c21d4b0e137bccb0cfe4f8646f5fca" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot;&gt;factorial&lt;/a&gt; of a non-negative integer &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">非負の整数 &lt;code&gt;n&lt;/code&gt; の&lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot;&gt;階乗&lt;/a&gt;を計算します。</target>
        </trans-unit>
        <trans-unit id="e838b6f5fb37c842917d39e82b4177a665b159cd" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions&quot;&gt;hyperbolic cosine&lt;/a&gt; of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions&quot;&gt;双曲線余弦&lt;/a&gt;の &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cd90d2211b2c7cfdf11e7a7579c7ef727cd6c0a" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions&quot;&gt;hyperbolic sine&lt;/a&gt; of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions&quot;&gt;双曲線正弦&lt;/a&gt;の &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="661b99445b0ca5a5276408b1abf26e01b4e4480a" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions&quot;&gt;hyperbolic tangent&lt;/a&gt; of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Hyperbolic_function#Definitions&quot;&gt;双曲線正接&lt;/a&gt;の &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85c2cce3212d074ba3a126b64885055c7d337c2b" translate="yes" xml:space="preserve">
          <source>Computes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_logarithm&quot;&gt;natural logarithm&lt;/a&gt; of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_logarithm&quot;&gt;自然対数&lt;/a&gt;の &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96dd5a713bd6f06b60c47dfdc025a4b78f6ec776" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;MD5Digest&lt;/code&gt; value for a string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; の &lt;code&gt;MD5Digest&lt;/code&gt; 値を計算します。</target>
        </trans-unit>
        <trans-unit id="eea089d476c5edbf5bf795f6438fec9062a207e0" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise and&lt;/code&gt; of all arguments collectively.</source>
          <target state="translated">&lt;code&gt;bitwise and&lt;/code&gt; すべての引数をまとめて計算します。</target>
        </trans-unit>
        <trans-unit id="abc796ce8a5ca907d07d24cd07d6b184522ee788" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise and&lt;/code&gt; of numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の &lt;code&gt;bitwise and&lt;/code&gt; の数値を計算します。</target>
        </trans-unit>
        <trans-unit id="f52387238e2accf7f79cce171cb9e5baa30d2e7f" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise complement&lt;/code&gt; of the integer &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">整数 &lt;code&gt;x&lt;/code&gt; の &lt;code&gt;bitwise complement&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="f2ee3a4599ca69b1e947a4f560bb39056e02eb79" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise or&lt;/code&gt; of all arguments collectively.</source>
          <target state="translated">&lt;code&gt;bitwise or&lt;/code&gt; すべての引数をまとめて計算します。</target>
        </trans-unit>
        <trans-unit id="4a8c3d0b182a270f6d378943baad9506c23bcbba" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise or&lt;/code&gt; of numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bitwise or&lt;/code&gt; 数値 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="a9ebd1271b207ffa102b309fd74fed1d8c4c41b1" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise xor&lt;/code&gt; of all arguments collectively.</source>
          <target state="translated">すべての引数の &lt;code&gt;bitwise xor&lt;/code&gt; をまとめて計算します。</target>
        </trans-unit>
        <trans-unit id="9a21abbee2eb66101b46d873232cd79518e5567b" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;bitwise xor&lt;/code&gt; of numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">数値 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の &lt;code&gt;bitwise xor&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="cd61496ba57087367764abb528932797865e9549" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;shift left&lt;/code&gt; operation of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の &lt;code&gt;shift left&lt;/code&gt; 演算を計算します。</target>
        </trans-unit>
        <trans-unit id="5620a0a7f208c420fdc040a67b0ac4386c56e729" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;shift right&lt;/code&gt; operation of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, filling vacant bit positions with the sign bit.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の &lt;code&gt;shift right&lt;/code&gt; 演算を計算し、空のビット位置を符号ビットで埋めます。</target>
        </trans-unit>
        <trans-unit id="0688efacd5b26083360497f87292cd188d7f3f65" translate="yes" xml:space="preserve">
          <source>Computes the &lt;code&gt;shift right&lt;/code&gt; operation of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の &lt;code&gt;shift right&lt;/code&gt; 演算を計算します。</target>
        </trans-unit>
        <trans-unit id="486af0a9316c7fcf4fae03e5ca046868973efdf8" translate="yes" xml:space="preserve">
          <source>Computes the arc cosine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆余弦演算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c2f9ccd39cdba13c669ca2a0055b9b0a4909c0d" translate="yes" xml:space="preserve">
          <source>Computes the arc cosine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆余弦演算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="35b745aed73addc476521febec793c0bf2973bba" translate="yes" xml:space="preserve">
          <source>Computes the arc sine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆正弦計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf55e852b0dbff2433c783e81a929c4f0b4a9f33" translate="yes" xml:space="preserve">
          <source>Computes the arc sine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆正弦計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f9b6f2581b460a2839d366e515217f0a56ba1510" translate="yes" xml:space="preserve">
          <source>Computes the binary logarithm (base 2) of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">二進対数（基数2）を計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="507714367865db0ab4803b7a4b586e3ab661f4cc" translate="yes" xml:space="preserve">
          <source>Computes the binary logarithm (base 2) of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">二進対数（基数2）を計算する&lt;em&gt;X線&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="30e6de74cfb2bc09fb9067c6b8d0d8b7713db1fd" translate="yes" xml:space="preserve">
          <source>Computes the binomial coefficient</source>
          <target state="translated">二項係数を計算します.</target>
        </trans-unit>
        <trans-unit id="9e4192d8b442923fa8c8d5f73c494baf6af1074c" translate="yes" xml:space="preserve">
          <source>Computes the ceiling function (i.e., the smallest integer not less than &lt;em&gt;x&lt;/em&gt;)</source>
          <target state="translated">天井関数を計算します（つまり、&lt;em&gt;x&lt;/em&gt;以上の最小の整数）</target>
        </trans-unit>
        <trans-unit id="78df7dce33d5e2680adcb1adfb303a3aa9591638" translate="yes" xml:space="preserve">
          <source>Computes the ceiling function (i.e., the smallest integer not smaller than &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="translated">天井関数（つまり、 &lt;code&gt;x&lt;/code&gt; 以上の最小の整数）を計算します。</target>
        </trans-unit>
        <trans-unit id="167e5ee22fba33c791866a7293da0a3ba4a3511d" translate="yes" xml:space="preserve">
          <source>Computes the common logarithm (base 10) of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">常用対数（底10）を計算する &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a1a3e5645a57f45efdbc13dda288c84db32a663" translate="yes" xml:space="preserve">
          <source>Computes the common logarithm (base 10) of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">常用対数（底10）を計算する&lt;em&gt;X線&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a041187ec2924d10dd9b4569a114f14204573f44" translate="yes" xml:space="preserve">
          <source>Computes the cosecant of &lt;code&gt;x&lt;/code&gt; (1 / sin(x)).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （1 / sin（x））の余割を計算します。</target>
        </trans-unit>
        <trans-unit id="3005e72782e4350360276425a67838d35dbb58b2" translate="yes" xml:space="preserve">
          <source>Computes the cosecant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">コセカント計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9085d23d8bcbe0ce061006ac4935ccc1a98a83d4" translate="yes" xml:space="preserve">
          <source>Computes the cosine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">余弦を計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02903ae0e7537c44a816c0842613da27ba245ee8" translate="yes" xml:space="preserve">
          <source>Computes the cosine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">余弦計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b4b168ba69f6c14439eafc803dc2f9ad8996c0d2" translate="yes" xml:space="preserve">
          <source>Computes the cotangent of &lt;code&gt;x&lt;/code&gt; (1 / tan(x)).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （1 / tan（x））の余接を計算します。</target>
        </trans-unit>
        <trans-unit id="3dbae45c2e9244d49426ff36de71b26ded3fe218" translate="yes" xml:space="preserve">
          <source>Computes the cotangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">コタンジェント計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="16484938e24bec7a15477960df49cb7e1f0cb5e1" translate="yes" xml:space="preserve">
          <source>Computes the cubic root of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">立方根計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53507c10559296a6e81c410382cb6292a109df9a" translate="yes" xml:space="preserve">
          <source>Computes the cubic root of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">立方根計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="65027d320358c8301e120e8893408e68ef88ab79" translate="yes" xml:space="preserve">
          <source>Computes the duration between two points in time.</source>
          <target state="translated">時間内の2点間の持続時間を計算します。</target>
        </trans-unit>
        <trans-unit id="fb547728bbd8abaafb4e60c5dba495b415764fdd" translate="yes" xml:space="preserve">
          <source>Computes the exponential function of &lt;code&gt;x&lt;/code&gt; (e^x).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （e ^ x）の指数関数を計算します。</target>
        </trans-unit>
        <trans-unit id="ba2ad1be3e6872259a4fa759c87da79b1b565e0e" translate="yes" xml:space="preserve">
          <source>Computes the exponential function of &lt;em&gt;x&lt;/em&gt; (pow(E, x))</source>
          <target state="translated">指数関数計算&lt;em&gt;X&lt;/em&gt;（POW（E、X））を</target>
        </trans-unit>
        <trans-unit id="4a9df6b28f413c3fe5356f4e924dfa7e33b37cb5" translate="yes" xml:space="preserve">
          <source>Computes the faculty/factorial function.</source>
          <target state="translated">教員/因子関数を計算します。</target>
        </trans-unit>
        <trans-unit id="d1b0448550a62a42cdd024c40cb4850587173ca9" translate="yes" xml:space="preserve">
          <source>Computes the floor function (i.e., the largest integer not greater than &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="translated">床関数（つまり、 &lt;code&gt;x&lt;/code&gt; 以下の最大整数）を計算します。</target>
        </trans-unit>
        <trans-unit id="b130f520330c20664bde7298dd85d42b5e113b68" translate="yes" xml:space="preserve">
          <source>Computes the floor function (i.e., the largest integer not greater than &lt;em&gt;x&lt;/em&gt;)</source>
          <target state="translated">床関数を計算します（つまり、&lt;em&gt;x&lt;/em&gt;以下の最大の整数）</target>
        </trans-unit>
        <trans-unit id="f6d07b7037208a27d948a63743583f4943b2f888" translate="yes" xml:space="preserve">
          <source>Computes the greatest common (positive) divisor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, using binary GCD (aka Stein's) algorithm.</source>
          <target state="translated">バイナリGCD（別名スタイン）アルゴリズムを使用して、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最大公約数（正）を計算します。</target>
        </trans-unit>
        <trans-unit id="ede7b961e6d3ac6c5583403ffe546c8fbb2b333c" translate="yes" xml:space="preserve">
          <source>Computes the greatest common (positive) divisor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最大公約数（正）を計算します。</target>
        </trans-unit>
        <trans-unit id="bad4aab9ce9b47e0f5345f1350e73e6b829622c3" translate="yes" xml:space="preserve">
          <source>Computes the greatest common (positive) divisor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Note that for floats, the result cannot always be interpreted as &quot;greatest decimal &lt;em&gt;z&lt;/em&gt; such that &lt;code&gt;z*N == x and z*M == y&lt;/code&gt; where N and M are positive integers.&quot;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最大公約数（正数）を計算します。floatの場合、結果は常に「最大の10進数&lt;em&gt;z&lt;/em&gt;、つまり、 &lt;code&gt;z*N == x and z*M == y&lt;/code&gt; Nが正の整数であるz * N == xおよびz * M == yと解釈される」とは限りません。</target>
        </trans-unit>
        <trans-unit id="c338a76288b47826a2962fc026cb84a8010c14b6" translate="yes" xml:space="preserve">
          <source>Computes the greatest common (positive) divisor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Using binary GCD (aka Stein's) algorithm.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最大公約数（正数）を計算します。バイナリGCD（別名Stein's）アルゴリズムを使用します。</target>
        </trans-unit>
        <trans-unit id="72bfee9b0c2255e664569eef2e9b24797318ad58" translate="yes" xml:space="preserve">
          <source>Computes the greatest common (positive) divisor of the elements of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">要素の最大公約数（正）除数計算 &lt;code&gt;x&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="af485033cc3f5ff75919c5b7bcc97823f56a0911" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosecant of &lt;code&gt;x&lt;/code&gt; (1 / sinh(x)).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （1 / sinh（x））の双曲線余割を計算します。</target>
        </trans-unit>
        <trans-unit id="b91a35b0b32492541a8286fccdde382e025d4e54" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosecant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">双曲線余割計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="876a4baa4ad45e746aa3dbca4acca480383a7832" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cosine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">双曲線余弦計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db4d41b0b2972bf1999831b2a9e47bc243c702fa" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cotangent of &lt;code&gt;x&lt;/code&gt; (1 / tanh(x)).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （1 / tanh（x））の双曲線コタンジェントを計算します。</target>
        </trans-unit>
        <trans-unit id="e1867f34a7cca1f42d2b954fe4bfe9c7fd0afbc2" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic cotangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">双曲線コタンジェント演算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97b6d2b813db19f38ff950a29aeec7e0b3704465" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic secant of &lt;code&gt;x&lt;/code&gt; (1 / cosh(x)).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; （1 / cosh（x））の双曲線セカントを計算します。</target>
        </trans-unit>
        <trans-unit id="07fbe4b329fe39bcfcf082eeba32148cb0552e83" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic secant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">双曲線割線計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bca28d196ea89d1b9d2bb42ec2d85060ceb01a8b" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic sine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">双曲線正弦計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="be23d88f7012d83273037eb93a737e1d91d7ae52" translate="yes" xml:space="preserve">
          <source>Computes the hyperbolic tangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">双曲線正接演算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="17a55d9f20072c81ec7a6cff1aea561503c76cbd" translate="yes" xml:space="preserve">
          <source>Computes the hypotenuse of a right-angle triangle with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; as its base and height. Equivalent to &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を底辺と高さとして、直角三角形の斜辺を計算します。 &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="75bc6e9251cf37f46a3b21810ace6fa11472ed58" translate="yes" xml:space="preserve">
          <source>Computes the hypotenuse of a right-angle triangle with &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; as its base and height. Equivalent to &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;y&lt;/em&gt;を底辺と高さとする直角三角形の斜辺を計算します。 &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="168e68658079ca12dcd1f04876a162206a84f531" translate="yes" xml:space="preserve">
          <source>Computes the integer division for unsigned integers. This is roughly the same as &lt;code&gt;trunc(x/y)&lt;/code&gt;.</source>
          <target state="translated">符号なし整数の整数除算を計算します。これは、 &lt;code&gt;trunc(x/y)&lt;/code&gt; とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="c7be809142f2b9a2e7fb2f8054f766d693d8d2f5" translate="yes" xml:space="preserve">
          <source>Computes the integer division.</source>
          <target state="translated">整数の除算を計算します。</target>
        </trans-unit>
        <trans-unit id="adfa75cf09b22a127912ec71542af60edb675089" translate="yes" xml:space="preserve">
          <source>Computes the integer modulo operation (remainder) for unsigned integers. This is the same as &lt;code&gt;x - (x div y) * y&lt;/code&gt;.</source>
          <target state="translated">符号なし整数の整数モジュロ演算（剰余）を計算します。これは &lt;code&gt;x - (x div y) * y&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="42be25c33f32a6353d181eca6e14bc7a6e089f6e" translate="yes" xml:space="preserve">
          <source>Computes the integer modulo operation (remainder).</source>
          <target state="translated">整数のモジュロ演算(余剰)を計算します。</target>
        </trans-unit>
        <trans-unit id="040dcab7fbf9d3054c8b4565a6beb69d73c74172" translate="yes" xml:space="preserve">
          <source>Computes the inverse cosecant of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆余割計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea262da8445e7f9cb33fa3e7ef327367210f32ba" translate="yes" xml:space="preserve">
          <source>Computes the inverse cosecant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆余割計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7ba6459a4b825d5dce65699b0b89f0523bc12382" translate="yes" xml:space="preserve">
          <source>Computes the inverse cotangent of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆コタンジェント計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4bf0a1516ae5481cc52796c8506c472cfa313407" translate="yes" xml:space="preserve">
          <source>Computes the inverse cotangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆コタンジェント計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="908875fa198c7afd6ed0dc6affd8777df51b6742" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosecant of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆双曲線余割計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="50138a0fbefac768659982567821be3716d61a6a" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosecant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆双曲線余割計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="08b6f87101f2b155f8d09188e7a77ec40e6ffd71" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆双曲線余弦計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9bd639135b5af144056273ae41390723b778b650" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cosine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆双曲線余弦計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1ea8f43976792aec492780b6d549b4e8fbcce1ac" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cotangent of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆双曲線コタンジェント計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5f162a23dee6259c3039459bb14fa0d499cdd48" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic cotangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆双曲線コタンジェント演算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3ae4bfc47e82e3343da124a1d8bbe0c285ab9d0e" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic secant of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆双曲線正割計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7bab4662aee1247acb70654a6e7cec0327039a9c" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic secant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆双曲線正割計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="154cd52f6451f17fa26139bf90776665f6f7d6c8" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic sine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆双曲線正弦計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12e8b4582b0cdb788510f9b8097199f5dfc39849" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic sine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆双曲線正弦計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b09d00a9f93afe9232e07e348f3b95a8e1b1f2af" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic tangent of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆双曲線正接演算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a10c44d17cff2cd49ff4a6d7c6158dc672276f9d" translate="yes" xml:space="preserve">
          <source>Computes the inverse hyperbolic tangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆双曲線正接演算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2468c0d1d39e80354f330307ef344edf2a68b9ea" translate="yes" xml:space="preserve">
          <source>Computes the inverse secant of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">逆割線計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6078029e42d1ca15858897e83ce5ec110dbdbe35" translate="yes" xml:space="preserve">
          <source>Computes the inverse secant of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">逆割線計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcf0fe26f2cf39af52e4cbac9149522989a7ab9f" translate="yes" xml:space="preserve">
          <source>Computes the least common multiple of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; の最小公倍数を計算します。</target>
        </trans-unit>
        <trans-unit id="fc68b2ee92f9e98232194227f18b5446a0c0e5d7" translate="yes" xml:space="preserve">
          <source>Computes the least common multiple of the elements of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">要素の最小公倍数計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2f9c0cb3f880f9487d363ce5febf1ea0928eafb" translate="yes" xml:space="preserve">
          <source>Computes the logarithm &lt;code&gt;base&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;</source>
          <target state="translated">対数計算 &lt;code&gt;base&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f45e26e85df6348eff61627f3d0634207dcd0ab0" translate="yes" xml:space="preserve">
          <source>Computes the logarithm of &lt;code&gt;x&lt;/code&gt; to base &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">対数計算 &lt;code&gt;x&lt;/code&gt; ベースに &lt;code&gt;base&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22c80bbfdebc08ef33ed05ece113561968eaebee" translate="yes" xml:space="preserve">
          <source>Computes the modulo operation for float operators.</source>
          <target state="translated">float演算子のモジュロ演算を計算します。</target>
        </trans-unit>
        <trans-unit id="a64fdc894855e17b02ff70ff62aeac6ef25fb788" translate="yes" xml:space="preserve">
          <source>Computes the modulo operation for float values (the remainder of &lt;code&gt;x&lt;/code&gt; divided by &lt;code&gt;y&lt;/code&gt;).</source>
          <target state="translated">float値（ &lt;code&gt;x&lt;/code&gt; の余りをyで割った &lt;code&gt;y&lt;/code&gt; ）のモジュロ演算を計算します。</target>
        </trans-unit>
        <trans-unit id="ffa67e94d43ff96b188bdcaaf82d12d8bd455c73" translate="yes" xml:space="preserve">
          <source>Computes the natural log of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">自然対数計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d888d6e18317ad0f6cf2a3d14d70409379672937" translate="yes" xml:space="preserve">
          <source>Computes the natural log of the gamma function for &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">以下のためのガンマ関数の自然対数計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bef108c90a5965f142e1ac52503d37e238142a6c" translate="yes" xml:space="preserve">
          <source>Computes the product of the elements in &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">要素の積演算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02649b1419dc3947eaa1a1e41f9bef3fe6d7ec79" translate="yes" xml:space="preserve">
          <source>Computes the product of the elements in &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is empty, 1 is returned.</source>
          <target state="translated">要素の積演算 &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;x&lt;/code&gt; が空の場合、1が返されます。</target>
        </trans-unit>
        <trans-unit id="1214bf288d7366f0e7d0004d5fecfe778fa2a9b7" translate="yes" xml:space="preserve">
          <source>Computes the rational floor division.</source>
          <target state="translated">有理階分割を計算します。</target>
        </trans-unit>
        <trans-unit id="c9aac3aafefcc68f017ef8000633792b27059e3a" translate="yes" xml:space="preserve">
          <source>Computes the rational modulo by floor division (modulo).</source>
          <target state="translated">床割り(modulo)による有理moduloを計算します。</target>
        </trans-unit>
        <trans-unit id="f9e8c053555af0b1cb26dacb1db8b21008bd8700" translate="yes" xml:space="preserve">
          <source>Computes the rational modulo by truncated division (remainder). This is same as &lt;code&gt;x - (x div y) * y&lt;/code&gt;.</source>
          <target state="translated">切り捨て除算（剰余）によって有理モジュロを計算します。これは &lt;code&gt;x - (x div y) * y&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="76b3949e45b3e56c2a69076e28b08edd777c9794" translate="yes" xml:space="preserve">
          <source>Computes the rational truncated division.</source>
          <target state="translated">有理な切り捨て除算を計算します。</target>
        </trans-unit>
        <trans-unit id="49107112a95894e6405ad9c1663b79a79a6d0b67" translate="yes" xml:space="preserve">
          <source>Computes the remainder of &lt;em&gt;x&lt;/em&gt; divided by &lt;em&gt;y&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を&lt;em&gt;yで&lt;/em&gt;割った余りを計算します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0645ce4cb8f93582a2507fb5a440a37558077912" translate="yes" xml:space="preserve">
          <source>Computes the secant of &lt;code&gt;x&lt;/code&gt; (1 / cos(x)).</source>
          <target state="translated">割線計算 &lt;code&gt;x&lt;/code&gt; （1 / COS（X））を。</target>
        </trans-unit>
        <trans-unit id="dce606b04199cbd897cf780311535258a1144852" translate="yes" xml:space="preserve">
          <source>Computes the secant of &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">割線計算&lt;em&gt;のxを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="16a152e443486b6624922f10fc0884dc0094c44c" translate="yes" xml:space="preserve">
          <source>Computes the sine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">正弦計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e1fa53a7e42079dc09998f78a715c437efd1e1c" translate="yes" xml:space="preserve">
          <source>Computes the sine of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">正弦計算&lt;em&gt;Xを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e35234690312fa753a0ee7d1f617846b14826130" translate="yes" xml:space="preserve">
          <source>Computes the square root of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">平方根計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="daa74773ee1b0afd13d31e45f568e2573592c343" translate="yes" xml:space="preserve">
          <source>Computes the square root of &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">平方根計算&lt;em&gt;のxを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="34b7198a475ebb9e3accd5c2474e69636202d48e" translate="yes" xml:space="preserve">
          <source>Computes the sum of the elements in &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">要素の和を計算 &lt;code&gt;x&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="723659a3460f2775205661fbd8e077e76996a132" translate="yes" xml:space="preserve">
          <source>Computes the sum of the elements in &lt;em&gt;x&lt;/em&gt;. If &lt;em&gt;x&lt;/em&gt; is empty, 0 is returned.</source>
          <target state="translated">要素の和を計算&lt;em&gt;xが&lt;/em&gt;。&lt;em&gt;x&lt;/em&gt;が空の場合、0が返されます。</target>
        </trans-unit>
        <trans-unit id="7f92cf0f51da7dfa5899eb77239e14aede24315b" translate="yes" xml:space="preserve">
          <source>Computes the tangent of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">接線計算 &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86b01f7c104fbfa64a4d34cc7b872170f8d7bd63" translate="yes" xml:space="preserve">
          <source>Computes the tangent of &lt;em&gt;x&lt;/em&gt;</source>
          <target state="translated">接線計算&lt;em&gt;のxを&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e1abf9e7be1bd0255607209e12d548dcd5a56754" translate="yes" xml:space="preserve">
          <source>Computes the the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma_function&quot;&gt;gamma function&lt;/a&gt; for &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">計算&lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma_function&quot;&gt;ガンマ関数&lt;/a&gt;のため &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81b557a977749dfe5cd36a587c2c39744d8ed8de" translate="yes" xml:space="preserve">
          <source>Computes x to power raised of y.</source>
          <target state="translated">x を y の累乗で計算します。</target>
        </trans-unit>
        <trans-unit id="69e88d2dcb5a17eaa11a7799faa3e6cf10be1223" translate="yes" xml:space="preserve">
          <source>Concatenate two sequences</source>
          <target state="translated">2 つのシーケンスを連結する</target>
        </trans-unit>
        <trans-unit id="1eadf495c287360432ca1543a8177785faad4fce" translate="yes" xml:space="preserve">
          <source>Concatenate two strings</source>
          <target state="translated">2つの文字列を連結する</target>
        </trans-unit>
        <trans-unit id="4963abf7268cd07182d52764739eb65c9b448c3f" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in place.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を所定の位置に連結します。</target>
        </trans-unit>
        <trans-unit id="7c725c57c3bae36a2fbcc8832b51012f29af826c" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を &lt;code&gt;y&lt;/code&gt; と連結します。</target>
        </trans-unit>
        <trans-unit id="69168e23351fbdf792fbf11e89eb3a45cb3df0c0" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;yを&lt;/em&gt;連結します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3c617381a09076a96cf4139313c0c2b44082253" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; in place</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;y&lt;/em&gt;を所定の位置に連結します</target>
        </trans-unit>
        <trans-unit id="bb8633f5a6193e7f44c0302215205095b0f2721c" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; into a string</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;y&lt;/em&gt;を文字列に連結します</target>
        </trans-unit>
        <trans-unit id="32997746130ec704518233619bdc747ed94f3f09" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;em&gt;x&lt;/em&gt; with &lt;em&gt;y&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;と&lt;em&gt;yを&lt;/em&gt;連結します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57490e1af96ea8441649614f62e7ef1476e5794b" translate="yes" xml:space="preserve">
          <source>Concatenates all strings in &lt;em&gt;a&lt;/em&gt; separating them with &lt;em&gt;sep&lt;/em&gt;.</source>
          <target state="translated">内のすべての文字列を連結して、それらを分離する&lt;em&gt;9月&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2b41510bbf0bef415f4ed064e0a26a7fb278f3d6" translate="yes" xml:space="preserve">
          <source>Concatenates all strings in the container &lt;code&gt;a&lt;/code&gt;, separating them with &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="translated">コンテナ &lt;code&gt;a&lt;/code&gt; 内のすべての文字列を連結し、 &lt;code&gt;sep&lt;/code&gt; で区切ります。</target>
        </trans-unit>
        <trans-unit id="772f1875857d8f56cc1adf1d7f9558b275356f64" translate="yes" xml:space="preserve">
          <source>Concatenates and quotes shell arguments &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">シェル引数 &lt;code&gt;args&lt;/code&gt; を連結して引用します。</target>
        </trans-unit>
        <trans-unit id="b5736c670ec44584205028e1043d3e7354d3f193" translate="yes" xml:space="preserve">
          <source>Concatenates and quotes shell arguments &lt;em&gt;args&lt;/em&gt;</source>
          <target state="translated">シェル引数&lt;em&gt;argsを&lt;/em&gt;連結して引用します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="97660f7f82e7c2ca490b0e7a17595ad4d1b8e37f" translate="yes" xml:space="preserve">
          <source>Concatenates characters &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; into a string.</source>
          <target state="translated">文字 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を文字列に連結します。</target>
        </trans-unit>
        <trans-unit id="f4870c001851b214fd78df65a7f9a56a8c7d84fe" translate="yes" xml:space="preserve">
          <source>Concatenates strings &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を連結します。</target>
        </trans-unit>
        <trans-unit id="24de3ce1b7fcfc77ec8b592055d85477fab673e8" translate="yes" xml:space="preserve">
          <source>Concatenates the path specified to the specified URI's path.</source>
          <target state="translated">指定したURIのパスに指定したパスを連結します。</target>
        </trans-unit>
        <trans-unit id="0883f3b8970e83d93d2efdbd9c298a08b5fc4d58" translate="yes" xml:space="preserve">
          <source>Concatenates the path specified to the specified URIs path.</source>
          <target state="translated">指定されたパスを指定されたURIのパスに連結します。</target>
        </trans-unit>
        <trans-unit id="cb3b57395c3da828f56f1708fc010d408496ab32" translate="yes" xml:space="preserve">
          <source>Concatenates the query parameters to the specified URI object.</source>
          <target state="translated">クエリパラメータを指定されたURIオブジェクトに連結します。</target>
        </trans-unit>
        <trans-unit id="f4d2332c79689b22ca4e93a89a0c15ab995d9d97" translate="yes" xml:space="preserve">
          <source>Concatenates two sequences.</source>
          <target state="translated">2 つのシーケンスを連結します。</target>
        </trans-unit>
        <trans-unit id="6a80acf6035135e3322fc4365151ccd06c4456b5" translate="yes" xml:space="preserve">
          <source>Concatenates two sequences. Requires copying of the sequences.</source>
          <target state="translated">2つのシーケンスを連結します。シーケンスのコピーが必要です。</target>
        </trans-unit>
        <trans-unit id="5ce3519bb12e02fe1e27270b7b0e9d5822c98480" translate="yes" xml:space="preserve">
          <source>Concatenation operator for JavaScript strings</source>
          <target state="translated">JavaScript文字列の連結演算子</target>
        </trans-unit>
        <trans-unit id="0b907fb1d7856e45b7c447d5c3e6ba10493bcd6f" translate="yes" xml:space="preserve">
          <source>Concept derived values</source>
          <target state="translated">概念由来の値</target>
        </trans-unit>
        <trans-unit id="007618c827a49774da32acdf52c89eea51e2109d" translate="yes" xml:space="preserve">
          <source>Concept diagnostics</source>
          <target state="translated">概念診断</target>
        </trans-unit>
        <trans-unit id="19252c25a8f8353d84a6ddf07415a7678bb689f8" translate="yes" xml:space="preserve">
          <source>Concept refinement</source>
          <target state="translated">コンセプトの絞り込み</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="a6d1c38ed5d7542a3f74dd161f8ce14e29d3b36c" translate="yes" xml:space="preserve">
          <source>Concepts are written in the following form:</source>
          <target state="translated">概念は次のような形で書かれています。</target>
        </trans-unit>
        <trans-unit id="bead2e297ad337998c0913849946084ad8d27f87" translate="yes" xml:space="preserve">
          <source>Concepts, also known as &quot;user-defined type classes&quot;, are used to specify an arbitrary set of requirements that the matched type must satisfy.</source>
          <target state="translated">ユーザー定義型クラス」とも呼ばれる概念は、一致する型が満たすべき要件の任意のセットを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="19ca5bfd4010e53032fc796157670b7e2e65d5cf" translate="yes" xml:space="preserve">
          <source>Conceptually this is the AST we store for the module:</source>
          <target state="translated">概念的には、これがモジュールのためのASTです。</target>
        </trans-unit>
        <trans-unit id="9587314138e773090e39a49cb842df3ce2ad3aba" translate="yes" xml:space="preserve">
          <source>Concrete syntax:</source>
          <target state="translated">具体的な構文。</target>
        </trans-unit>
        <trans-unit id="33822858e0c9793e0f5cfb535fe1f6c002fbbcb1" translate="yes" xml:space="preserve">
          <source>ConcreteTypes:</source>
          <target state="translated">ConcreteTypes:</target>
        </trans-unit>
        <trans-unit id="c743ed8f51d9fe3230cc0a6dda2caf2c9be6a227" translate="yes" xml:space="preserve">
          <source>CondTrue</source>
          <target state="translated">CondTrue</target>
        </trans-unit>
        <trans-unit id="0a3de9ebe5a09753cf625726cbf755c5c8a8909f" translate="yes" xml:space="preserve">
          <source>Conf</source>
          <target state="translated">Conf</target>
        </trans-unit>
        <trans-unit id="25b200c7bc8586a43869623132838a97561b78d7" translate="yes" xml:space="preserve">
          <source>ConfigDeprecated</source>
          <target state="translated">ConfigDeprecated</target>
        </trans-unit>
        <trans-unit id="652adb547a9929742744dfbb6c31d7fbdc385f9e" translate="yes" xml:space="preserve">
          <source>ConfigRef:</source>
          <target state="translated">ConfigRef:</target>
        </trans-unit>
        <trans-unit id="028a9462b51d61847b954e68c534028ee8d8efb9" translate="yes" xml:space="preserve">
          <source>Configuration file example</source>
          <target state="translated">設定ファイルの例</target>
        </trans-unit>
        <trans-unit id="5e9e2d64c5e127c299b896e015cd2b7bb4f8b5d4" translate="yes" xml:space="preserve">
          <source>Configuration files</source>
          <target state="translated">設定ファイル</target>
        </trans-unit>
        <trans-unit id="56fc5441c23facb847924d3a86d77ecfc2a4547d" translate="yes" xml:space="preserve">
          <source>Configures &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; to be unbuffered.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; 、および &lt;code&gt;stderr&lt;/code&gt; をバッファリング解除するように構成します。</target>
        </trans-unit>
        <trans-unit id="c066aca97a5b1dc8e8948428318170412f9c8d81" translate="yes" xml:space="preserve">
          <source>Configures &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt; to be unbuffered.</source>
          <target state="translated">&lt;em&gt;stdin&lt;/em&gt;、&lt;em&gt;stdout&lt;/em&gt;、および&lt;em&gt;stderr&lt;/em&gt;をバッファ&lt;em&gt;リング&lt;/em&gt;しないように構成します。</target>
        </trans-unit>
        <trans-unit id="7f6da9b726d56ab5f4cb1674e7f64f2941921e74" translate="yes" xml:space="preserve">
          <source>Conjugate of complex number &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">複素数&lt;em&gt;zの&lt;/em&gt;共役。</target>
        </trans-unit>
        <trans-unit id="fb3a617c6d30ca8317f9e4edf71466f5c6c034af" translate="yes" xml:space="preserve">
          <source>Conjugates of complex number &lt;code&gt;z&lt;/code&gt;.</source>
          <target state="translated">複素数 &lt;code&gt;z&lt;/code&gt; の活用。</target>
        </trans-unit>
        <trans-unit id="74a42d68c78d59242b71eaa6dc76d7ed3361c7c8" translate="yes" xml:space="preserve">
          <source>Connect to the FTP server specified by &lt;code&gt;ftp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ftp&lt;/code&gt; で指定されたFTPサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="d0c98804e10c954cf45314cd913154bd60fee512" translate="yes" xml:space="preserve">
          <source>Connecting to a server</source>
          <target state="translated">サーバーへの接続</target>
        </trans-unit>
        <trans-unit id="5015a874a361c8ebd9a43c59c6a05bc9e9fc1692" translate="yes" xml:space="preserve">
          <source>Connecting to an FTP server</source>
          <target state="translated">FTPサーバーへの接続</target>
        </trans-unit>
        <trans-unit id="d53eb33aabd00f08db43585f95288c4641075b9c" translate="yes" xml:space="preserve">
          <source>Connection will be kept alive. Further requests on the same &lt;code&gt;client&lt;/code&gt; to the same hostname will not require a new connection to be made. The connection can be closed by using the &lt;code&gt;close&lt;/code&gt; procedure.</source>
          <target state="translated">接続は維持されます。同じ &lt;code&gt;client&lt;/code&gt; で同じホスト名を要求する場合、新しい接続を確立する必要はありません。接続は、 &lt;code&gt;close&lt;/code&gt; プロシージャを使用して閉じることができます。</target>
        </trans-unit>
        <trans-unit id="860ecaf055cc36f1f7821dc6e804fb24a575ec14" translate="yes" xml:space="preserve">
          <source>Connects &lt;code&gt;socket&lt;/code&gt; to server at &lt;code&gt;address:port&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; を &lt;code&gt;address:port&lt;/code&gt; サーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="7d0384bee4253d60a61dff7ba8bbcf1d0825d752" translate="yes" xml:space="preserve">
          <source>Connects socket to &lt;code&gt;address&lt;/code&gt;:&lt;code&gt;port&lt;/code&gt;. &lt;code&gt;Address&lt;/code&gt; can be an IP address or a host name. If &lt;code&gt;address&lt;/code&gt; is a host name, this function will try each IP of that host name. &lt;code&gt;htons&lt;/code&gt; is already performed on &lt;code&gt;port&lt;/code&gt; so you must not do it.</source>
          <target state="translated">ソケットを &lt;code&gt;address&lt;/code&gt; ： &lt;code&gt;port&lt;/code&gt; 接続します。 &lt;code&gt;Address&lt;/code&gt; は、IPアドレスまたはホスト名です。 &lt;code&gt;address&lt;/code&gt; がホスト名の場合、この関数はそのホスト名の各IPを試します。 &lt;code&gt;htons&lt;/code&gt; はすでに &lt;code&gt;port&lt;/code&gt; 実行されているため、実行しないでください。</target>
        </trans-unit>
        <trans-unit id="a2d3ca1d81992958bad8cb54cb321f11239e9beb" translate="yes" xml:space="preserve">
          <source>Connects to Unix socket on &lt;code&gt;path&lt;/code&gt;. This only works on Unix-style systems: Mac OS X, BSD and Linux</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 上のUnixソケットに接続します。これは、Unixスタイルのシステム（Mac OS X、BSD、およびLinux）でのみ機能します。</target>
        </trans-unit>
        <trans-unit id="387b916f30e0df4e1cf9521be5b0ca09775478bf" translate="yes" xml:space="preserve">
          <source>Connects to Unix socket on &lt;em&gt;path&lt;/em&gt;. This only works on Unix-style systems: Mac OS X, BSD and Linux</source>
          <target state="translated">&lt;em&gt;パス&lt;/em&gt;上のUnixソケットに接続し&lt;em&gt;ます&lt;/em&gt;。これはUnixスタイルのシステムでのみ機能します：Mac OS X、BSDおよびLinux</target>
        </trans-unit>
        <trans-unit id="7fb8b6730ca3e99b7bc9ea840e9aec1306a35af0" translate="yes" xml:space="preserve">
          <source>Connects to server as specified by &lt;code&gt;address&lt;/code&gt; on port specified by &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">portで指定された &lt;code&gt;port&lt;/code&gt; &lt;code&gt;address&lt;/code&gt; で指定されたとおりにサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="06851d79408d0a92d2e92c14c8b08927108d5fc0" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a DELETE request. This procedure uses httpClient values such as &lt;code&gt;client.maxRedirects&lt;/code&gt;.</source>
          <target state="translated">URLで指定されたホスト名に接続し、DELETE要求を実行します。このプロシージャは、 &lt;code&gt;client.maxRedirects&lt;/code&gt; などのhttpClient値を使用します。</target>
        </trans-unit>
        <trans-unit id="0b36a62f20ad8f1205cbd235f147131f385b9639" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a GET request.</source>
          <target state="translated">URLで指定したホスト名に接続し、GETリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="efc85af43453666d3337cce322ebbbadec7d0d2c" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a HEAD request.</source>
          <target state="translated">URLで指定したホスト名に接続し、HEADリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="73def9676422af85c76af8efe09e58d612afd38b" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a PATCH request. This procedure uses httpClient values such as &lt;code&gt;client.maxRedirects&lt;/code&gt;.</source>
          <target state="translated">URLで指定されたホスト名に接続し、PATCH要求を実行します。このプロシージャは、 &lt;code&gt;client.maxRedirects&lt;/code&gt; などのhttpClient値を使用します。</target>
        </trans-unit>
        <trans-unit id="ae5c28dec2176494058438db3eb2fa62edf045ef" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a POST request.</source>
          <target state="translated">URLで指定したホスト名に接続し、POSTリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="6dd4ee5347f5c7fa928d8c980511412238d20796" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a POST request. This procedure uses httpClient values such as &lt;code&gt;client.maxRedirects&lt;/code&gt;.</source>
          <target state="translated">URLで指定されたホスト名に接続し、POSTリクエストを実行します。このプロシージャは、 &lt;code&gt;client.maxRedirects&lt;/code&gt; などのhttpClient値を使用します。</target>
        </trans-unit>
        <trans-unit id="f9c1d8e42f67c1adb4a82938efbdedd032f452c9" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a PUT request. This procedure uses httpClient values such as &lt;code&gt;client.maxRedirects&lt;/code&gt;.</source>
          <target state="translated">URLで指定されたホスト名に接続し、PUTリクエストを実行します。このプロシージャは、 &lt;code&gt;client.maxRedirects&lt;/code&gt; などのhttpClient値を使用します。</target>
        </trans-unit>
        <trans-unit id="fd2a9d55e7edd660c9a497d5e739b973c1d4db8f" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a request using the custom method string specified by &lt;code&gt;httpMethod&lt;/code&gt;.</source>
          <target state="translated">URLで指定されたホスト名に接続し、 &lt;code&gt;httpMethod&lt;/code&gt; で指定されたカスタムメソッド文字列を使用してリクエストを実行します。</target>
        </trans-unit>
        <trans-unit id="be93d2099ec1307f3bb75d6b60d399cc26121000" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and performs a request using the method specified.</source>
          <target state="translated">URLで指定したホスト名に接続し、指定した方法でリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="1990521303d11cfb8c6840ae2c0a405f961e5f1d" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and returns the content of a DELETE request.</source>
          <target state="translated">URLで指定したホスト名に接続し、DELETEリクエストの内容を返します。</target>
        </trans-unit>
        <trans-unit id="2efb2393e3fcad2f38c69863e03434288d942810" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and returns the content of a GET request.</source>
          <target state="translated">URLで指定したホスト名に接続し、GETリクエストの内容を返します。</target>
        </trans-unit>
        <trans-unit id="c5d46de3e9fa155fd232c08b2c1be22cedf28bad" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and returns the content of a PATCH request.</source>
          <target state="translated">URLで指定したホスト名に接続し、PATCHリクエストの内容を返します。</target>
        </trans-unit>
        <trans-unit id="faef6a63efb28026076073dbcc4a851c96f5d65b" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL and returns the content of a POST request.</source>
          <target state="translated">URLで指定したホスト名に接続し、POSTリクエストの内容を返します。</target>
        </trans-unit>
        <trans-unit id="7028caf491f7da45d70c7ccc26e74e93b4c90296" translate="yes" xml:space="preserve">
          <source>Connects to the hostname specified by the URL andreturns the content of a PUT request.</source>
          <target state="translated">URL で指定したホスト名に接続し、PUT リクエストの内容を返します。</target>
        </trans-unit>
        <trans-unit id="bde6c6d13353142a51eaa643321e1cdea82fbe53" translate="yes" xml:space="preserve">
          <source>Connects to the specified &lt;em&gt;address&lt;/em&gt; on the specified &lt;em&gt;port&lt;/em&gt;. Returns the result of the certificate validation.</source>
          <target state="translated">指定された&lt;em&gt;ポートの&lt;/em&gt;指定された&lt;em&gt;アドレス&lt;/em&gt;に接続し&lt;em&gt;ます&lt;/em&gt;。証明書の検証結果を返します。</target>
        </trans-unit>
        <trans-unit id="1744e691b487b5b7b13ffd10d2944fda6b288e55" translate="yes" xml:space="preserve">
          <source>Consecutive directory separators are collapsed, including an initial double slash.</source>
          <target state="translated">連続したディレクトリの区切り文字は、最初のダブルスラッシュを含めて折りたたまれます。</target>
        </trans-unit>
        <trans-unit id="0e9817ec32f0986f22f75f11a52584945c89ab12" translate="yes" xml:space="preserve">
          <source>Consider stylized example of possible Object Relation Mapping (ORM) implementation:</source>
          <target state="translated">可能なオブジェクトリレーションマッピング(ORM)の実装の様式化された例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="a741330407354a56e39c3f024bc39f9eba91273d" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoConsiderOwned</source>
          <target state="translated">ConsiderFlag.CoConsiderOwned</target>
        </trans-unit>
        <trans-unit id="39e7be76b89a2e016e902f3757a9a317552e7050" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoDistinct</source>
          <target state="translated">ConsiderFlag.CoDistinct</target>
        </trans-unit>
        <trans-unit id="ec8806dd0f699f18afac96b4a0416f6b31bf69d8" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoHashTypeInsideNode</source>
          <target state="translated">ConsiderFlag.CoHashTypeInsideNode</target>
        </trans-unit>
        <trans-unit id="ed861ff0b057b88b52868f275594c362267abe7b" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoIgnoreRange</source>
          <target state="translated">ConsiderFlag.CoIgnoreRange</target>
        </trans-unit>
        <trans-unit id="c1be281ab9ca9fbfb1861b4d51b4758123c78d2b" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoOwnerSig</source>
          <target state="translated">ConsiderFlag.CoOwnerSig</target>
        </trans-unit>
        <trans-unit id="397fbc462da0e6277029e5c1c560eac815581f34" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoProc</source>
          <target state="translated">ConsiderFlag.CoProc</target>
        </trans-unit>
        <trans-unit id="203823d2bde78939051642ce36c2e42bf13d49d3" translate="yes" xml:space="preserve">
          <source>ConsiderFlag.CoType</source>
          <target state="translated">ConsiderFlag.CoType</target>
        </trans-unit>
        <trans-unit id="86e120524e55957327da45024855b13cf60a06cf" translate="yes" xml:space="preserve">
          <source>ConsiderFlag:</source>
          <target state="translated">ConsiderFlag:</target>
        </trans-unit>
        <trans-unit id="132e58797cb5b932e5b9525f5feb11d601b48475" translate="yes" xml:space="preserve">
          <source>ConsoleLogger</source>
          <target state="translated">ConsoleLogger</target>
        </trans-unit>
        <trans-unit id="b25e9811f03e4b93438d6bd4cbda02584da8908c" translate="yes" xml:space="preserve">
          <source>Const section</source>
          <target state="translated">コンスクト部</target>
        </trans-unit>
        <trans-unit id="13467765f2432f85df91526eb2851b293f5b17b7" translate="yes" xml:space="preserve">
          <source>ConstantDataTypes:</source>
          <target state="translated">ConstantDataTypes:</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="30a9c60d2cb4885d0c91cb883a4ca3394977f842" translate="yes" xml:space="preserve">
          <source>Constants and Constant Expressions</source>
          <target state="translated">定数と定数式</target>
        </trans-unit>
        <trans-unit id="845a0797c46f7f26627ffe10839f77d59e552b54" translate="yes" xml:space="preserve">
          <source>Constants are symbols which are bound to a value. The constant's value cannot change. The compiler must be able to evaluate the expression in a constant declaration at compile time:</source>
          <target state="translated">定数とは、値に束縛された記号のことです。定数の値は変更できません。コンパイラはコンパイル時に定数宣言の式を評価できる必要があります。</target>
        </trans-unit>
        <trans-unit id="fc7e0d5ea781b9c258a083b8a655e5d33254f964" translate="yes" xml:space="preserve">
          <source>Constants cannot be of type &lt;code&gt;ptr&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;, nor can they contain such a type.</source>
          <target state="translated">定数のタイプを &lt;code&gt;ptr&lt;/code&gt; 、 &lt;code&gt;ref&lt;/code&gt; 、または &lt;code&gt;var&lt;/code&gt; にすることはできません。また、定数にそのようなタイプを含めることもできません。</target>
        </trans-unit>
        <trans-unit id="9e48f5683383b08782624e785dbcbe1fc1818347" translate="yes" xml:space="preserve">
          <source>Construct JsonNode from tuples and objects.</source>
          <target state="translated">タプルやオブジェクトからJsonNodeを構築します。</target>
        </trans-unit>
        <trans-unit id="da54a7002c11cab53e8584c5a1f75e9944ef9eed" translate="yes" xml:space="preserve">
          <source>Construct a JsonNode that represents the specified enum value as a string. Creates a new &lt;code&gt;JString JsonNode&lt;/code&gt;.</source>
          <target state="translated">指定された列挙値を文字列として表すJsonNodeを構築します。新しい &lt;code&gt;JString JsonNode&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="993d1122d6585d39bb0f853956e6b9969a9867c4" translate="yes" xml:space="preserve">
          <source>Construct a new time format for parsing &amp;amp; formatting time types.</source>
          <target state="translated">時間タイプを解析およびフォーマットするための新しい時間フォーマットを作成します。</target>
        </trans-unit>
        <trans-unit id="8e3ac0f291f854a218bb7b6224446d033abdb4da" translate="yes" xml:space="preserve">
          <source>Constructing the AST directly with proc calls. This method does not support constructing rules, only simple expressions and is not as convenient. Its only advantage is that it does not pull in the whole PEG parser into your executable.</source>
          <target state="translated">procコールで直接ASTを構築します。この方法はルールの構築をサポートしていません。唯一の利点は、PEGパーサ全体を実行ファイルに引き込まないことです。</target>
        </trans-unit>
        <trans-unit id="78302751c725b4c26b8aede6760f2c2729c6bd43" translate="yes" xml:space="preserve">
          <source>Constructive mathematics is naturally typed. -- Simon Thompson</source>
          <target state="translated">構成的数学は自然に型付けされている。--サイモン・トンプソン</target>
        </trans-unit>
        <trans-unit id="4f454784bbe295c080a86588cdce55c691d5ae55" translate="yes" xml:space="preserve">
          <source>Constructor for &lt;code&gt;if&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ステートメントのコンストラクター。</target>
        </trans-unit>
        <trans-unit id="062b02bd6a0b90bb0f511b0f03cfc573a5e18204" translate="yes" xml:space="preserve">
          <source>Constructor for extended regular expressions.</source>
          <target state="translated">拡張正規表現のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="140e5ae2bcf9f25834222fd8ce1b872589964edc" translate="yes" xml:space="preserve">
          <source>Constructor macro for XML. Example usage:</source>
          <target state="translated">XML 用のコンストラクタマクロ。使用例。</target>
        </trans-unit>
        <trans-unit id="aa36f56205949f481b7537602145f7b72d37d588" translate="yes" xml:space="preserve">
          <source>Constructor of regular expressions.</source>
          <target state="translated">正規表現のコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="e2305b835fc96ea3b93fb0891e78034d708cab93" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;Any&lt;/code&gt; object from &lt;code&gt;x&lt;/code&gt;. This captures &lt;code&gt;x&lt;/code&gt;'s address, so &lt;code&gt;x&lt;/code&gt; can be modified with its &lt;code&gt;Any&lt;/code&gt; wrapper! The client needs to ensure that the wrapper &lt;strong&gt;does not&lt;/strong&gt; live longer than &lt;code&gt;x&lt;/code&gt;!</source>
          <target state="translated">構築A &lt;code&gt;Any&lt;/code&gt; からオブジェクト &lt;code&gt;x&lt;/code&gt; 。これは &lt;code&gt;x&lt;/code&gt; のアドレスをキャプチャするため、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;Any&lt;/code&gt; ラッパーで変更できます。クライアントは、ラッパー&lt;strong&gt;が&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; より長く存続&lt;strong&gt;しない&lt;/strong&gt;ことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="2d0a8447ef0eab765e9ae9523d458886bed7c60f" translate="yes" xml:space="preserve">
          <source>Constructs a color from RGB values.</source>
          <target state="translated">RGB値から色を作成します。</target>
        </trans-unit>
        <trans-unit id="42b9ee9a1b2575edcbe0c928850aa10ec986744c" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;MultipartData&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;MultipartData&lt;/code&gt; オブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="9c4c23da832bf816388baf9def9c41eec8b28590" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;TProxy&lt;/code&gt; object.</source>
          <target state="translated">新しい &lt;code&gt;TProxy&lt;/code&gt; オブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="d616fe13f70c90b16bab508d2ffa797d9c2280a3" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;and&lt;/code&gt; meta class.</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; メタクラスを構築します。</target>
        </trans-unit>
        <trans-unit id="228093259c00f9ec9ec80ba5966bd9a85f2626d8" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;not&lt;/code&gt; meta class.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; メタクラスを構築します。</target>
        </trans-unit>
        <trans-unit id="94f646fde9e748c2fcdcdd05aa39b9be942c41e2" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;or&lt;/code&gt; meta class.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; メタクラスを構築します。</target>
        </trans-unit>
        <trans-unit id="af58575746c3a32456d9c37adfb71f0c9df2779a" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;em&gt;and&lt;/em&gt; meta class</source>
          <target state="translated">&lt;em&gt;and&lt;/em&gt;メタクラスを構築します</target>
        </trans-unit>
        <trans-unit id="732af8deac3342b336d166fbfe0227ae58cbf577" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;em&gt;not&lt;/em&gt; meta class</source>
          <target state="translated">&lt;em&gt;非&lt;/em&gt;メタクラスを構築します</target>
        </trans-unit>
        <trans-unit id="9f557f4a3151c4696ede6f82dcb91dd5dc71ce04" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;em&gt;or&lt;/em&gt; meta class</source>
          <target state="translated">&lt;em&gt;または&lt;/em&gt;メタクラスを構築します</target>
        </trans-unit>
        <trans-unit id="2a9eb47aecc50481a64c09c2d97577d5a6c53c29" translate="yes" xml:space="preserve">
          <source>Constructs an identifier from the string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; から識別子を作成します。</target>
        </trans-unit>
        <trans-unit id="87ae5014545d1989ad429432fe3fd06348d10cc6" translate="yes" xml:space="preserve">
          <source>Consts</source>
          <target state="translated">Consts</target>
        </trans-unit>
        <trans-unit id="c3472991590af43f77b08e5bf493ef9df2adf3ae" translate="yes" xml:space="preserve">
          <source>Container access like &lt;code&gt;e[i]&lt;/code&gt; is a path expression.</source>
          <target state="translated">&lt;code&gt;e[i]&lt;/code&gt; ようなコンテナアクセスはパス式です。</target>
        </trans-unit>
        <trans-unit id="919c9efcece8817efa23cd6e17c12cb53852c1fb" translate="yes" xml:space="preserve">
          <source>Contains an IEEE floating point value of &lt;em&gt;Not A Number&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;Not&lt;/em&gt; ANumberのIEEE浮動小数点値が含まれています。</target>
        </trans-unit>
        <trans-unit id="675f91de4abaa0e659cc758096cc8fde4deb7fc9" translate="yes" xml:space="preserve">
          <source>Contains functionality shared between the &lt;code&gt;httpclient&lt;/code&gt; and &lt;code&gt;asynchttpserver&lt;/code&gt; modules.</source>
          <target state="translated">間で共有する機能が含まれている &lt;code&gt;httpclient&lt;/code&gt; と &lt;code&gt;asynchttpserver&lt;/code&gt; モジュールが。</target>
        </trans-unit>
        <trans-unit id="4e93b75b8202c61172b7292deeb552aba64e6d3a" translate="yes" xml:space="preserve">
          <source>Contains information associated with a file object.</source>
          <target state="translated">ファイルオブジェクトに関連付けられた情報を含みます。</target>
        </trans-unit>
        <trans-unit id="7094407e95c3536f0bc66bddb3574ec4661aa5e9" translate="yes" xml:space="preserve">
          <source>Contains the IEEE floating point value of negative infinity.</source>
          <target state="translated">負の無限大のIEEE浮動小数点値を含みます。</target>
        </trans-unit>
        <trans-unit id="b03cb8e53dc25937553153f786134eac60036278" translate="yes" xml:space="preserve">
          <source>Contains the IEEE floating point value of positive infinity.</source>
          <target state="translated">正の無限大のIEEE浮動小数点値を含みます。</target>
        </trans-unit>
        <trans-unit id="3d7c5a052a4c654935405b7c129909a0754ebdd0" translate="yes" xml:space="preserve">
          <source>Continue statement</source>
          <target state="translated">ステートメントを続ける</target>
        </trans-unit>
        <trans-unit id="84deedc54772d20d11fef050349cafac7c42ddb1" translate="yes" xml:space="preserve">
          <source>Contrary to the &lt;a href=&quot;#combine,Uri,Uri&quot;&gt;combine func&lt;/a&gt; you do not have to worry about the slashes at the beginning and end of the path and URIs path respectively.</source>
          <target state="translated">&lt;a href=&quot;#combine,Uri,Uri&quot;&gt;結合機能&lt;/a&gt;とは異なり、パスとURIパスの最初と最後のスラッシュについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="598143c2cf06ef03b671a0fdf6b2792917d41b74" translate="yes" xml:space="preserve">
          <source>Contrary to the &lt;code&gt;combine&lt;/code&gt; procedure you do not have to worry about the slashes at the beginning and end of the path and URI's path respectively.</source>
          <target state="translated">&lt;code&gt;combine&lt;/code&gt; 手順とは異なり、パスとURIのパスの最初と最後のスラッシュを気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="cf54fab626834a6b88d0646d64263ba703df0fbb" translate="yes" xml:space="preserve">
          <source>Control flow statements</source>
          <target state="translated">制御フロー文</target>
        </trans-unit>
        <trans-unit id="5354c2d75e39532abe50b6d8107e92c05eaa8c23" translate="yes" xml:space="preserve">
          <source>Control flow statements have a feature not covered yet: they open a new scope. This means that in the following example, &lt;code&gt;x&lt;/code&gt; is not accessible outside the loop:</source>
          <target state="translated">制御フローステートメントにはまだカバーされていない機能があります。それらは新しいスコープを開きます。つまり、次の例では、ループの外では &lt;code&gt;x&lt;/code&gt; にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="d7461eb7b45698bf77a1ebf01fdb87f01e8bce0c" translate="yes" xml:space="preserve">
          <source>Control flow through exception handling: Contrary to popular belief, exception handling doesn't cause many problems for this DFA representation, &lt;code&gt;raise&lt;/code&gt; is a statement that &lt;code&gt;goes to&lt;/code&gt; the outer &lt;code&gt;finally&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt; if there is one, otherwise it is the same as &lt;code&gt;return&lt;/code&gt;. Every call is treated as a call that can potentially &lt;code&gt;raise&lt;/code&gt;. However, without a surrounding &lt;code&gt;try&lt;/code&gt; we don't emit these &lt;code&gt;fork ReturnLabel&lt;/code&gt; instructions in order to speed up the dataflow analysis passes.</source>
          <target state="translated">例外処理による制御フロー：一般に信じられていることとは異なり、例外処理はこのDFA表現に多くの問題を引き起こしません &lt;code&gt;raise&lt;/code&gt; は、 &lt;code&gt;finally&lt;/code&gt; または存在する場合 &lt;code&gt;except&lt;/code&gt; て外部に &lt;code&gt;goes to&lt;/code&gt; れるステートメントです。それ以外の場合は、 &lt;code&gt;return&lt;/code&gt; と同じです。すべての呼び出しは、潜在的にできるコールとして扱われ &lt;code&gt;raise&lt;/code&gt; 。ただし、周囲の &lt;code&gt;try&lt;/code&gt; がなければ、データフロー分析パスを高速化するために、これらの &lt;code&gt;fork ReturnLabel&lt;/code&gt; 命令を発行しません。</target>
        </trans-unit>
        <trans-unit id="f7b1c95be3abf33b19342ccdaa5f81edc6d48679" translate="yes" xml:space="preserve">
          <source>Control whether a file handle can be inherited by child processes. Returns &lt;code&gt;true&lt;/code&gt; on success.</source>
          <target state="translated">ファイルハンドルを子プロセスに継承できるかどうかを制御します。成功すると &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="61a652346b34ebe8bac4295d0083e89684e1c8f3" translate="yes" xml:space="preserve">
          <source>ControlFlowGraph:</source>
          <target state="translated">ControlFlowGraph:</target>
        </trans-unit>
        <trans-unit id="fd113e3baef54ac1720f19cff64c9c9a9bc50553" translate="yes" xml:space="preserve">
          <source>Controls the behaviour of the script.</source>
          <target state="translated">スクリプトの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="17936062c7215d6eae4ebb04a6e3ca95ab879398" translate="yes" xml:space="preserve">
          <source>ConvFromXtoItselfNotNeeded</source>
          <target state="translated">ConvFromXtoItselfNotNeeded</target>
        </trans-unit>
        <trans-unit id="b0ffb806c1564fb77217e33d4acfe37c022f1860" translate="yes" xml:space="preserve">
          <source>ConvToBaseNotNeeded</source>
          <target state="translated">ConvToBaseNotNeeded</target>
        </trans-unit>
        <trans-unit id="84b6864c098f5f62361f7d7e227e6307f416af93" translate="yes" xml:space="preserve">
          <source>Convenience function for working with &lt;code&gt;startProcess&lt;/code&gt; to read data from a background process.</source>
          <target state="translated">&lt;code&gt;startProcess&lt;/code&gt; を操作してバックグラウンドプロセスからデータを読み取るための便利な機能。</target>
        </trans-unit>
        <trans-unit id="cae7444315a09523d1dc7ff23aab5fdc16f08a62" translate="yes" xml:space="preserve">
          <source>Convenience iterator for iterating over command line arguments.</source>
          <target state="translated">コマンドライン引数を反復処理するための便利なイテレータ。</target>
        </trans-unit>
        <trans-unit id="78d9498c7f3c10d52eb7e3caf4a1743ad892d056" translate="yes" xml:space="preserve">
          <source>Convenience iterator for iterating over the given &lt;a href=&quot;#OptParser&quot;&gt;OptParser&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;#OptParser&quot;&gt;OptParser&lt;/a&gt;を反復処理するための便利なイテレータ。</target>
        </trans-unit>
        <trans-unit id="a72197e213ed94287210c53f7294f31ff9834a7a" translate="yes" xml:space="preserve">
          <source>Convenience iterator for working with &lt;code&gt;startProcess&lt;/code&gt; to read data from a background process.</source>
          <target state="translated">&lt;code&gt;startProcess&lt;/code&gt; を操作してバックグラウンドプロセスからデータを読み取るための便利なイテレータ。</target>
        </trans-unit>
        <trans-unit id="5bb3049c6d3899f9d3fce51cdb7012fbe2c2eec7" translate="yes" xml:space="preserve">
          <source>Convenience proc for &lt;code&gt;base64.encode&lt;/code&gt; returns a standard Base64 Data URI (RFC-2397)</source>
          <target state="translated">&lt;code&gt;base64.encode&lt;/code&gt; のコンビニエンスプロシージャは、標準のBase64データURI（RFC-2397）を返します。</target>
        </trans-unit>
        <trans-unit id="43ffaaa893b917c162620c853617514501d2a174" translate="yes" xml:space="preserve">
          <source>Convenience proc for &lt;code&gt;renderRstToOut&lt;/code&gt; and &lt;code&gt;initRstGenerator&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;renderRstToOut&lt;/code&gt; および &lt;code&gt;initRstGenerator&lt;/code&gt; の便利なプロシージャ。</target>
        </trans-unit>
        <trans-unit id="18839f7ff9b089bb8450bd9f381df874a58d3fc5" translate="yes" xml:space="preserve">
          <source>Convenience proc which returns the command line parameters.</source>
          <target state="translated">コマンドラインパラメータを返す便利なプロックです。</target>
        </trans-unit>
        <trans-unit id="25faeec30b9e7e871df8e2b4943f4f256afa83f9" translate="yes" xml:space="preserve">
          <source>Convenience template around the &lt;code&gt;keepIf&lt;/code&gt; proc to reduce typing.</source>
          <target state="translated">入力を減らすための &lt;code&gt;keepIf&lt;/code&gt; プロシージャに関する便利なテンプレート。</target>
        </trans-unit>
        <trans-unit id="d9dfac3ba207eed8bbe4edac3196966f97c7acbb" translate="yes" xml:space="preserve">
          <source>Convenience template around the &lt;code&gt;map&lt;/code&gt; proc to reduce typing.</source>
          <target state="translated">入力を減らすための &lt;code&gt;map&lt;/code&gt; proc 周りの便利なテンプレート。</target>
        </trans-unit>
        <trans-unit id="061e3b113201cf22cd61e5dd0fbf1a0b76c6e60d" translate="yes" xml:space="preserve">
          <source>Convenience template around the &lt;code&gt;sorted&lt;/code&gt; proc to reduce typing.</source>
          <target state="translated">タイピングを減らすために &lt;code&gt;sorted&lt;/code&gt; プロシージャの周りの便利なテンプレート。</target>
        </trans-unit>
        <trans-unit id="3c7236137b33372fd4f4077bc4f2516868b7185c" translate="yes" xml:space="preserve">
          <source>Convenience template around the mutable &lt;code&gt;apply&lt;/code&gt; proc to reduce typing.</source>
          <target state="translated">変更可能な &lt;code&gt;apply&lt;/code&gt; procの周りの便利なテンプレートは、入力を減らすために使用します。</target>
        </trans-unit>
        <trans-unit id="1abe72825616ea4cb72f040c5cf3a2a94c8c804d" translate="yes" xml:space="preserve">
          <source>Convenience wrapper around &lt;code&gt;deepCopy&lt;/code&gt; overload.</source>
          <target state="translated">&lt;code&gt;deepCopy&lt;/code&gt; オーバーロードの便利なラッパー。</target>
        </trans-unit>
        <trans-unit id="b5fe60ed937e9cf18b8da54d7ef267e681ef53ce" translate="yes" xml:space="preserve">
          <source>Conventions for multi-line statements and expressions</source>
          <target state="translated">複数行の文と式の規則</target>
        </trans-unit>
        <trans-unit id="81070514fb20efd82762d697a06192f5e5f09a77" translate="yes" xml:space="preserve">
          <source>Conversion between numerical types is performed by using the type as a function:</source>
          <target state="translated">数値型間の変換は、型を関数として使用することで行います。</target>
        </trans-unit>
        <trans-unit id="95137103326cf95d4d730adb027b0fc2ce460ea2" translate="yes" xml:space="preserve">
          <source>Conversion match: &lt;code&gt;a&lt;/code&gt; is convertible to &lt;code&gt;f&lt;/code&gt;, possibly via a user defined &lt;code&gt;converter&lt;/code&gt;.</source>
          <target state="translated">変換の一致： &lt;code&gt;a&lt;/code&gt; は、おそらくユーザー定義の &lt;code&gt;converter&lt;/code&gt; 介して &lt;code&gt;f&lt;/code&gt; に変換可能です。</target>
        </trans-unit>
        <trans-unit id="e00478f9aab1d6ad70ee2cea7bc128eebc2925f0" translate="yes" xml:space="preserve">
          <source>Conversion rounds &lt;code&gt;f&lt;/code&gt; half away from 0, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero&quot;&gt;Round half away from zero&lt;/a&gt;.</source>
          <target state="translated">変換は、 &lt;code&gt;f&lt;/code&gt; を0から半分に丸め&lt;a href=&quot;https://en.wikipedia.org/wiki/Rounding#Round_half_away_from_zero&quot;&gt;ます&lt;/a&gt;。ゼロから半分に丸めるを参照してください。</target>
        </trans-unit>
        <trans-unit id="6adb95bb516f955a280943ad58446f753eb55dd1" translate="yes" xml:space="preserve">
          <source>Conversion to int64 without range check.</source>
          <target state="translated">範囲チェックなしでint64に変換します。</target>
        </trans-unit>
        <trans-unit id="699f1a5a3a6773ab7e39d98c67869a9c4fe19cb8" translate="yes" xml:space="preserve">
          <source>Conversion to uint64 without range check.</source>
          <target state="translated">範囲チェックを行わずにuint64に変換します。</target>
        </trans-unit>
        <trans-unit id="edfedd4d8d22c53dc59ad0bd047093615bb8b306" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;t&lt;/code&gt; to a Windows file time (100-nanosecond intervals since &lt;code&gt;1601-01-01T00:00:00Z&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; をWindowsファイル時間に変換します（ &lt;code&gt;1601-01-01T00:00:00Z&lt;/code&gt; 以降の100ナノ秒間隔）。</target>
        </trans-unit>
        <trans-unit id="7e1779ebc3fb6ed3b2b675004fc280428cefaea2" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;t&lt;/code&gt; to a unix timestamp (seconds since &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; をunixタイムスタンプに変換します（ &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt; からの秒数）。</target>
        </trans-unit>
        <trans-unit id="c7218b2839d6f7ab4def4031c22d01c52d54f7c4" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;t&lt;/code&gt; to a unix timestamp (seconds since &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt;). See also &lt;code&gt;toUnixFloat&lt;/code&gt; for subsecond resolution.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; をUNIXタイムスタンプに変換します（ &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt; からの秒数）。1秒未満の解像度については、 &lt;code&gt;toUnixFloat&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="2e0b4ea1ef1e20b85ac7d7f5de56ba692cfc1390" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;time&lt;/code&gt; into a &lt;code&gt;DateTime&lt;/code&gt; using &lt;code&gt;zone&lt;/code&gt; as the timezone.</source>
          <target state="translated">タイム &lt;code&gt;zone&lt;/code&gt; としてゾーンを使用して、 &lt;code&gt;time&lt;/code&gt; を &lt;code&gt;DateTime&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="5f878a4752429ea738d1292646bf8d5e38096ed2" translate="yes" xml:space="preserve">
          <source>Convert a Windows file time (100-nanosecond intervals since &lt;code&gt;1601-01-01T00:00:00Z&lt;/code&gt;) to a &lt;code&gt;Time&lt;/code&gt;.</source>
          <target state="translated">Windowsファイルの時刻（ &lt;code&gt;1601-01-01T00:00:00Z&lt;/code&gt; 以降の100ナノ秒間隔）を &lt;code&gt;Time&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="015f4435cfb9631b8f884d9dc9766f8a2d2e498f" translate="yes" xml:space="preserve">
          <source>Convert a quantity of some duration unit to another duration unit.</source>
          <target state="translated">ある継続時間単位の量を別の継続時間単位に変換する。</target>
        </trans-unit>
        <trans-unit id="54cf3d5924aa79898e93d8ddd60ff2c3fd5a5915" translate="yes" xml:space="preserve">
          <source>Convert a quantity of some duration unit to another duration unit. This proc only deals with integers, so the result might be truncated.</source>
          <target state="translated">ある継続時間単位の量を別の継続時間単位に変換します。この proc は整数のみを扱うので、結果は切り捨てられるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f2dcb1ef57b14a5d9edee18ce469cc7f66e7ac16" translate="yes" xml:space="preserve">
          <source>Convert a rational number &lt;code&gt;x&lt;/code&gt; to a float.</source>
          <target state="translated">有理数 &lt;code&gt;x&lt;/code&gt; を浮動小数点数に変換します。</target>
        </trans-unit>
        <trans-unit id="fbbe1db9bb516fd7e2a0648f5eea1c2a63da1a10" translate="yes" xml:space="preserve">
          <source>Convert a rational number &lt;code&gt;x&lt;/code&gt; to an int. Conversion rounds towards 0 if &lt;code&gt;x&lt;/code&gt; does not contain an integer value.</source>
          <target state="translated">有理数 &lt;code&gt;x&lt;/code&gt; をintに変換します。 &lt;code&gt;x&lt;/code&gt; に整数値が含まれていない場合、変換は0に丸められます。</target>
        </trans-unit>
        <trans-unit id="5f5ca34112b308b928b17703848baf0a1eea255b" translate="yes" xml:space="preserve">
          <source>Convert a rational number &lt;em&gt;x&lt;/em&gt; to a float.</source>
          <target state="translated">有理数&lt;em&gt;x&lt;/em&gt;を浮動小数点数に変換します。</target>
        </trans-unit>
        <trans-unit id="550d596743cff3cc098ebb95a88d1df4e98623e5" translate="yes" xml:space="preserve">
          <source>Convert a rational number &lt;em&gt;x&lt;/em&gt; to an int. Conversion rounds towards 0 if &lt;em&gt;x&lt;/em&gt; does not contain an integer value.</source>
          <target state="translated">有理数&lt;em&gt;x&lt;/em&gt;をintに変換します。&lt;em&gt;xに&lt;/em&gt;整数値が含まれていない場合、変換は0に丸められます。</target>
        </trans-unit>
        <trans-unit id="9af4a72ac37a88ee2780cbfc843f29eeb34e32a0" translate="yes" xml:space="preserve">
          <source>Convert a unix timestamp (seconds since &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt;) to a &lt;code&gt;Time&lt;/code&gt;.</source>
          <target state="translated">UNIXタイムスタンプ（ &lt;code&gt;1970-01-01T00:00:00Z&lt;/code&gt; からの秒数）を &lt;code&gt;Time&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="1e58610d2a9b560615ec61f120b410ae7292457c" translate="yes" xml:space="preserve">
          <source>Convert a unix timestamp in seconds to a &lt;code&gt;Time&lt;/code&gt;; same as &lt;code&gt;fromUnix&lt;/code&gt; but with subsecond resolution.</source>
          <target state="translated">UNIXタイムスタンプを秒単位で &lt;code&gt;Time&lt;/code&gt; に変換します。 &lt;code&gt;fromUnix&lt;/code&gt; と同じですが、解像度は1秒未満です。</target>
        </trans-unit>
        <trans-unit id="9eddb80707da4159c42b5e29b00ff0fb0347283b" translate="yes" xml:space="preserve">
          <source>Convert an &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;0..255&lt;/code&gt; to a character</source>
          <target state="translated">&lt;code&gt;0..255&lt;/code&gt; の範囲の &lt;code&gt;int&lt;/code&gt; を文字に変換します</target>
        </trans-unit>
        <trans-unit id="a193776bce22e9cb3961070c57312d6f38c237c8" translate="yes" xml:space="preserve">
          <source>Convert an expression to a JsonNode directly, without having to specify &lt;code&gt;%&lt;/code&gt; for every element.</source>
          <target state="translated">すべての要素に &lt;code&gt;%&lt;/code&gt; を指定しなくても、式をJsonNodeに直接変換します。</target>
        </trans-unit>
        <trans-unit id="08e95a2a4f83a1be35a630b5230f6179ce54d400" translate="yes" xml:space="preserve">
          <source>Convert an expression to a JsonNode directly, without having to specify &lt;em&gt;%&lt;/em&gt; for every element.</source>
          <target state="translated">すべての要素に&lt;em&gt;％&lt;/em&gt;を指定する必要なく、式を直接JsonNodeに変換します。</target>
        </trans-unit>
        <trans-unit id="f6725ffc3be75a1101ebf8d1858da9f2cb5f61f5" translate="yes" xml:space="preserve">
          <source>Convert an expression to a SexpNode directly, without having to specify &lt;em&gt;%&lt;/em&gt; for every element.</source>
          <target state="translated">すべての要素に&lt;em&gt;％&lt;/em&gt;を指定する必要なく、式をSexpNodeに直接変換します。</target>
        </trans-unit>
        <trans-unit id="cba149a58abb4938292e01825f1456c24041a1b4" translate="yes" xml:space="preserve">
          <source>Convert an integer into a &lt;code&gt;float&lt;/code&gt;</source>
          <target state="translated">整数を &lt;code&gt;float&lt;/code&gt; 数に変換します</target>
        </trans-unit>
        <trans-unit id="e07cb849a225d55dd51cac3a45055d308b421c89" translate="yes" xml:space="preserve">
          <source>Convert floating-point number into an &lt;code&gt;int&lt;/code&gt;</source>
          <target state="translated">浮動小数点数を &lt;code&gt;int&lt;/code&gt; に変換します</target>
        </trans-unit>
        <trans-unit id="deaadce9f5527ca719acc921a68c010c9ab04e06" translate="yes" xml:space="preserve">
          <source>Convert from degrees to radians</source>
          <target state="translated">度からラジアンへの変換</target>
        </trans-unit>
        <trans-unit id="47bce17449a7e8c155fd6c92ee7eab41efb872bb" translate="yes" xml:space="preserve">
          <source>Convert from degrees to radians.</source>
          <target state="translated">度からラジアンに変換します。</target>
        </trans-unit>
        <trans-unit id="d9f815d0223347240aa67fb63c474893cdc26cb2" translate="yes" xml:space="preserve">
          <source>Convert from radians to degrees</source>
          <target state="translated">ラジアンから度数への変換</target>
        </trans-unit>
        <trans-unit id="4a49d587043de87b9127bbfe3d62a72cd688be03" translate="yes" xml:space="preserve">
          <source>Convert from radians to degrees.</source>
          <target state="translated">ラジアンから度数に変換します。</target>
        </trans-unit>
        <trans-unit id="087644e53ad0b243e2a187d1c148b6b7c36bf553" translate="yes" xml:space="preserve">
          <source>Convert hex-encoded string to byte string, e.g.:</source>
          <target state="translated">16進数文字列をバイト文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="02028585cbfe237a1827e46ad6ac7fbcbac3e933" translate="yes" xml:space="preserve">
          <source>Convert some integer &lt;code&gt;x&lt;/code&gt; to a complex number.</source>
          <target state="translated">整数 &lt;code&gt;x&lt;/code&gt; を複素数に変換します。</target>
        </trans-unit>
        <trans-unit id="82c7b6b3cfd25d445f20781c8011c2cfae1d78d2" translate="yes" xml:space="preserve">
          <source>Convert some integer &lt;code&gt;x&lt;/code&gt; to a rational number.</source>
          <target state="translated">整数 &lt;code&gt;x&lt;/code&gt; を有理数に変換します。</target>
        </trans-unit>
        <trans-unit id="a0a37d3dc8cf5bbed8dfe9e2cfa92a773632aca2" translate="yes" xml:space="preserve">
          <source>Convert some integer &lt;em&gt;x&lt;/em&gt; to a rational number.</source>
          <target state="translated">整数&lt;em&gt;x&lt;/em&gt;を有理数に変換します。</target>
        </trans-unit>
        <trans-unit id="b7cfb60bd701f3b4895ff1d9f7762a1177f50795" translate="yes" xml:space="preserve">
          <source>Convert the AST &lt;code&gt;n&lt;/code&gt; to a human-readable lisp-like string.</source>
          <target state="translated">ASTの変換 &lt;code&gt;n&lt;/code&gt; 、人間が読めるlispのような文字列に。</target>
        </trans-unit>
        <trans-unit id="1aa34b485ad5b72db27ca18d02bb8c48f7646aeb" translate="yes" xml:space="preserve">
          <source>Convert the AST &lt;code&gt;n&lt;/code&gt; to a human-readable tree-like string.</source>
          <target state="translated">ASTの変換 &lt;code&gt;n&lt;/code&gt; は、人間が読み取り可能なツリー状の文字列に。</target>
        </trans-unit>
        <trans-unit id="0a1594f3a5b8ffaa6fa330ceaf628cb0e355d1d3" translate="yes" xml:space="preserve">
          <source>Convert the AST &lt;code&gt;n&lt;/code&gt; to the code required to generate that AST.</source>
          <target state="translated">ASTの変換 &lt;code&gt;n&lt;/code&gt; はそのASTを生成するのに必要なコードに。</target>
        </trans-unit>
        <trans-unit id="1400752ded339e0b84004cc4660bc5991da8797f" translate="yes" xml:space="preserve">
          <source>Convert the AST &lt;em&gt;n&lt;/em&gt; to a human-readable lisp-like string,</source>
          <target state="translated">AST &lt;em&gt;n&lt;/em&gt;を人間が読めるlispのような文字列に変換し、</target>
        </trans-unit>
        <trans-unit id="4c1f537e28f3fea6c32729c1411231812fbcd9f4" translate="yes" xml:space="preserve">
          <source>Convert the AST &lt;em&gt;n&lt;/em&gt; to a human-readable tree-like string.</source>
          <target state="translated">AST &lt;em&gt;n&lt;/em&gt;を人間が読めるツリーのような文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="565148a92c0fe349637395b81e6d35c72aef2a67" translate="yes" xml:space="preserve">
          <source>Convert the AST &lt;em&gt;n&lt;/em&gt; to the code required to generate that AST. So for example</source>
          <target state="translated">AST &lt;em&gt;n&lt;/em&gt;を、そのASTの生成に必要なコードに変換します。だから例えば</target>
        </trans-unit>
        <trans-unit id="dd60d8e1b3dc3e84b6ad33107ccae0f4a0a5b1ad" translate="yes" xml:space="preserve">
          <source>Convert the Windows file time timestamp &lt;code&gt;t&lt;/code&gt; to &lt;code&gt;FILETIME&lt;/code&gt;.</source>
          <target state="translated">Windowsファイルのタイムスタンプ &lt;code&gt;t&lt;/code&gt; を &lt;code&gt;FILETIME&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="fbb56951d131bc26d7abc8d889344f21051329c3" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole days.</source>
          <target state="translated">期間を全日数に変換します。</target>
        </trans-unit>
        <trans-unit id="cc4e3fb6fd98c5b4ed128e42c5ccdfa4702576b8" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole hours.</source>
          <target state="translated">持続時間を全時間数に変換します。</target>
        </trans-unit>
        <trans-unit id="7b3a5575719499b9ff2f3b585d907a1f9156ce38" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole microseconds.</source>
          <target state="translated">持続時間を全マイクロ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="297af4e0881341dd92d115add0e9ef56476c79e5" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole milliseconds.</source>
          <target state="translated">持続時間を全ミリ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="101166d6e043d71277adc607a2e2418610a4fe2c" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole minutes.</source>
          <target state="translated">持続時間を全体の分数に変換します。</target>
        </trans-unit>
        <trans-unit id="4410df30a46905cb8be591ef23db8d9e1c23608e" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole nanoseconds.</source>
          <target state="translated">持続時間を全ナノ秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="c5899137ffe487310d8d9f06113e094ee0e979df" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole seconds.</source>
          <target state="translated">持続時間を全秒数に変換します。</target>
        </trans-unit>
        <trans-unit id="c327c032c8a8b3cf6bfbde6696b5cf2042203af5" translate="yes" xml:space="preserve">
          <source>Convert the duration to the number of whole weeks.</source>
          <target state="translated">期間を全週数に変換します。</target>
        </trans-unit>
        <trans-unit id="73b1998c5784861bf8dd76cb8a296708d9bb3238" translate="yes" xml:space="preserve">
          <source>Convert various types to string</source>
          <target state="translated">様々な型を文字列に変換</target>
        </trans-unit>
        <trans-unit id="035adc3c464a0402d6eb1110d19a062484e3cd84" translate="yes" xml:space="preserve">
          <source>Converter declaration</source>
          <target state="translated">コンバータ宣言</target>
        </trans-unit>
        <trans-unit id="6a89fde6d6a92b19247264815bcda3f0b2c24bd4" translate="yes" xml:space="preserve">
          <source>Converters</source>
          <target state="translated">Converters</target>
        </trans-unit>
        <trans-unit id="aa41bdcfed5c5360fe474f3e6e3765683fa1e63a" translate="yes" xml:space="preserve">
          <source>Convertible relation</source>
          <target state="translated">転換可能な関係</target>
        </trans-unit>
        <trans-unit id="f13c6007f9a31fb218a6e9856d5bd0eabae594d1" translate="yes" xml:space="preserve">
          <source>Converts 16-bit integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation. &lt;strong&gt;Warning&lt;/strong&gt;: This template is deprecated since 0.14.0, where port numbers became unsigned integers. Please use the unsigned version of this template.</source>
          <target state="translated">16ビット整数をホストからネットワークバイトオーダーに変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは何もしません。それ以外の場合は、2バイトのスワップ操作を実行します。&lt;strong&gt;警告&lt;/strong&gt;：このテンプレートは、ポート番号が符号なし整数になった0.14.0以降廃止されました。このテンプレートの署名されていないバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="112970288de99fcc4ef0869ce910dea86e504b1c" translate="yes" xml:space="preserve">
          <source>Converts 16-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.</source>
          <target state="translated">16 ビット整数をネットワークからホストのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="ce75842f40e151559b568e6573c54eac78d72857" translate="yes" xml:space="preserve">
          <source>Converts 16-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation. &lt;strong&gt;Warning&lt;/strong&gt;: This template is deprecated since 0.14.0, where port numbers became unsigned integers. Please use the unsigned version of this template.</source>
          <target state="translated">16ビット整数をネットワークからホストのバイトオーダーに変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは何もしません。それ以外の場合は、2バイトのスワップ操作を実行します。&lt;strong&gt;警告&lt;/strong&gt;：このテンプレートは、ポート番号が符号なし整数になった0.14.0以降廃止されました。このテンプレートの署名されていないバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="3170b9f7c82d391839fc8e073cccdacf59335d62" translate="yes" xml:space="preserve">
          <source>Converts 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.</source>
          <target state="translated">16 ビットの正の整数をホストのバイト順からネットワークのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="b0a13ae85937fdadd1005cf5909ae143deb8de8a" translate="yes" xml:space="preserve">
          <source>Converts 16-bit unsigned integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.</source>
          <target state="translated">16 ビット符号なし整数をホストのバイト順からネットワークのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="ff243cc395b86a8cec44acfb9033fce9d63637ce" translate="yes" xml:space="preserve">
          <source>Converts 16-bit unsigned integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.</source>
          <target state="translated">16 ビット符号なし整数をネットワークからホストのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="f4f64c087c3e1ad11ea7a90ed48e6faf7ae5b17f" translate="yes" xml:space="preserve">
          <source>Converts 32-bit integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.</source>
          <target state="translated">32 ビット整数をホストからネットワークのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="e0ceaca88a0be29f81497e1e7b81bb7a382142b4" translate="yes" xml:space="preserve">
          <source>Converts 32-bit integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation. &lt;strong&gt;Warning&lt;/strong&gt;: This template is deprecated since 0.14.0, IPv4 addresses are now treated as unsigned integers. Please use the unsigned version of this template.</source>
          <target state="translated">32ビット整数をホストからネットワークバイトオーダーに変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは何もしません。それ以外の場合は、4バイトのスワップ操作を実行します。&lt;strong&gt;警告&lt;/strong&gt;：このテンプレートは0.14.0以降廃止され、IPv4アドレスは符号なし整数として扱われるようになりました。このテンプレートの署名されていないバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="b8afa0be74a654bec084128b6af93faeeb0933d3" translate="yes" xml:space="preserve">
          <source>Converts 32-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.</source>
          <target state="translated">32 ビット整数をネットワークからホストのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="04a2bcac233b58526f24cd9cdf297210fe25d5c3" translate="yes" xml:space="preserve">
          <source>Converts 32-bit integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation. &lt;strong&gt;Warning&lt;/strong&gt;: This template is deprecated since 0.14.0, IPv4 addresses are now treated as unsigned integers. Please use the unsigned version of this template.</source>
          <target state="translated">32ビット整数をネットワークからホストのバイトオーダーに変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは何もしません。それ以外の場合は、4バイトのスワップ操作を実行します。&lt;strong&gt;警告&lt;/strong&gt;：このテンプレートは0.14.0以降廃止され、IPv4アドレスは符号なし整数として扱われるようになりました。このテンプレートの署名されていないバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="697f3586b4c3e2ecd768e863113dc3f5e415ac83" translate="yes" xml:space="preserve">
          <source>Converts 32-bit unsigned integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.</source>
          <target state="translated">32 ビット符号なし整数をホストのバイト順からネットワークのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="4085a37c7adaa9303fbad22d9259fe86c7a53cdb" translate="yes" xml:space="preserve">
          <source>Converts 32-bit unsigned integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.</source>
          <target state="translated">32 ビット符号なし整数をネットワークからホストのバイト順に変換します。ホストのバイト順がネットワークのバイト順と同じであるマシンでは、これは実行されません。</target>
        </trans-unit>
        <trans-unit id="93c5c1e5b8852bb32c0996ea9e630d116d536372" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;IpAddress&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; to &lt;code&gt;SockAddr&lt;/code&gt; and &lt;code&gt;SockLen&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IpAddress&lt;/code&gt; と &lt;code&gt;Port&lt;/code&gt; を &lt;code&gt;SockAddr&lt;/code&gt; と &lt;code&gt;SockLen&lt;/code&gt; に変換します</target>
        </trans-unit>
        <trans-unit id="7baf3db8c468fdd3af7b3a0cb9adc94b960287db" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;SockAddr&lt;/code&gt; and &lt;code&gt;SockLen&lt;/code&gt; to &lt;code&gt;IpAddress&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt;. Raises &lt;code&gt;ObjectConversionDefect&lt;/code&gt; in case of invalid &lt;code&gt;sa&lt;/code&gt; and &lt;code&gt;sl&lt;/code&gt; arguments.</source>
          <target state="translated">&lt;code&gt;SockAddr&lt;/code&gt; と &lt;code&gt;SockLen&lt;/code&gt; を &lt;code&gt;IpAddress&lt;/code&gt; と &lt;code&gt;Port&lt;/code&gt; に変換します。発生させ &lt;code&gt;ObjectConversionDefect&lt;/code&gt; が無効の場合は &lt;code&gt;sa&lt;/code&gt; と &lt;code&gt;sl&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="a0fd062c5d223b6adbdaeec5097887d5fdf9d113" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;c&lt;/code&gt; into lower case. This works for any Unicode character. If possible, prefer &lt;code&gt;toLower&lt;/code&gt; over &lt;code&gt;toUpper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; を小文字に変換します。これは、すべてのUnicode文字で機能します。可能であれば、 &lt;code&gt;toLower&lt;/code&gt; よりもtoLowerを優先して &lt;code&gt;toUpper&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef3d31451fe642d1ab56b6f766fd545e7136439b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;c&lt;/code&gt; into lower case. This works for any rune.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; を小文字に変換します。これはどのルーンでも機能します。</target>
        </trans-unit>
        <trans-unit id="baee2b4fec316a5e504a92174f415f90f55d984b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;c&lt;/code&gt; into upper case. This works for any Unicode character. If possible, prefer &lt;code&gt;toLower&lt;/code&gt; over &lt;code&gt;toUpper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; を大文字に変換します。これは、すべてのUnicode文字で機能します。可能であれば、 &lt;code&gt;toLower&lt;/code&gt; よりもtoLowerを優先して &lt;code&gt;toUpper&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c347cbc4e7866188ce12d7cbcb61391db423e588" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;c&lt;/code&gt; into upper case. This works for any rune.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; を大文字に変換します。これはどのルーンでも機能します。</target>
        </trans-unit>
        <trans-unit id="be1e3629dab565005581db83380e6ff5ca311308" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;c&lt;/code&gt; to title case</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; をタイトルケースに変換します</target>
        </trans-unit>
        <trans-unit id="b2254c86991a16eb4fb09d3b987159ab8f203a28" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;c&lt;/code&gt; to title case.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; をタイトルケースに変換します。</target>
        </trans-unit>
        <trans-unit id="a88b1922b4df30cbb6f7fcf592db2660f356d11c" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;n&lt;/code&gt; into its string representation.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; を文字列表現に変換します。</target>
        </trans-unit>
        <trans-unit id="bb9cee3e3d9fce4b9773654debcad8627bdbde0d" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;node&lt;/code&gt; to its JSON Representation on one line.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; を1行でJSON表現に変換します。</target>
        </trans-unit>
        <trans-unit id="2e50c742f8e87085d8b7a302afa70f57cdfba370" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;node&lt;/code&gt; to its JSON Representation, without regard for human readability. Meant to improve &lt;code&gt;$&lt;/code&gt; string conversion performance.</source>
          <target state="translated">人間の可読性に関係なく、 &lt;code&gt;node&lt;/code&gt; をJSON表現に変換します。 &lt;code&gt;$&lt;/code&gt; 文字列変換のパフォーマンスを向上させることを目的としています。</target>
        </trans-unit>
        <trans-unit id="f9f13a7e87ac39d1b4ed81b966e22e2f7b15e8f4" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;path&lt;/code&gt; to a path relative to &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; を &lt;code&gt;base&lt;/code&gt; を基準にしたパスに変換します。</target>
        </trans-unit>
        <trans-unit id="7a375349d0b9cbe84bffd645876956819415e9c1" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;s&lt;/code&gt; into lower-case runes.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を小文字のルーンに変換します。</target>
        </trans-unit>
        <trans-unit id="e79044c58348c5e6dbb2ee4623f5ff47f03d0b9f" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;s&lt;/code&gt; into upper-case runes.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を大文字のルーンに変換します。</target>
        </trans-unit>
        <trans-unit id="51b55eae8497c6630a65c2039be47f547ce967a9" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;s&lt;/code&gt; to a &lt;code&gt;HtmlTag&lt;/code&gt;. If &lt;code&gt;s&lt;/code&gt; is no HTML tag, &lt;code&gt;tagUnknown&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; を &lt;code&gt;HtmlTag&lt;/code&gt; に変換します。 &lt;code&gt;s&lt;/code&gt; がHTMLタグでない場合、 &lt;code&gt;tagUnknown&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="6717c3fd04bf0fb2f3ca09443a52d8098102e0f1" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;s&lt;/code&gt; to a unicode title.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; をUnicodeタイトルに変換します。</target>
        </trans-unit>
        <trans-unit id="5856a618e156963a8d516b30f0d88a64f673b24e" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;x&lt;/code&gt; into its binary representation.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; をバイナリ表現に変換します。</target>
        </trans-unit>
        <trans-unit id="2947eef25f831d148c860184976da5b5142ae682" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;x&lt;/code&gt; into its octal representation.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を8進表現に変換します。</target>
        </trans-unit>
        <trans-unit id="4d925b537d90bf71b98299d3fa62ba34fd18245c" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;x&lt;/code&gt; to its decimal representation.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を10進表現に変換します。</target>
        </trans-unit>
        <trans-unit id="8f87c390b98fa81fb0afbe6857bccd9d23da4f8c" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;x&lt;/code&gt; to its hexadecimal representation.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を16進表現に変換します。</target>
        </trans-unit>
        <trans-unit id="b8a833e306add43435abd623a76098170081a5f6" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;{key: value}&lt;/code&gt; pairs into &lt;code&gt;XmlAttributes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{key: value}&lt;/code&gt; ペアを &lt;code&gt;XmlAttributes&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="2d3e032ae7eeaf93db44832c7880be4bc982c849" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;IpAddress&lt;/em&gt; and &lt;em&gt;Port&lt;/em&gt; to &lt;em&gt;SockAddr&lt;/em&gt; and &lt;em&gt;Socklen&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;IpAddress&lt;/em&gt;および&lt;em&gt;ポート&lt;/em&gt;を&lt;em&gt;SockAddr&lt;/em&gt;および&lt;em&gt;Socklenに&lt;/em&gt;変換し&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4970977db5e63bbeee8ad9440616e31263fb4987" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;SockAddr&lt;/em&gt; and &lt;em&gt;Socklen&lt;/em&gt; to &lt;em&gt;IpAddress&lt;/em&gt; and &lt;em&gt;Port&lt;/em&gt;. Raises &lt;em&gt;ObjectConversionError&lt;/em&gt; in case of invalid &lt;em&gt;sa&lt;/em&gt; and &lt;em&gt;sl&lt;/em&gt; arguments.</source>
          <target state="translated">&lt;em&gt;SockAddr&lt;/em&gt;および&lt;em&gt;Socklen&lt;/em&gt;を&lt;em&gt;IpAddress&lt;/em&gt;および&lt;em&gt;Portに&lt;/em&gt;変換します。発生させ&lt;em&gt;ObjectConversionErrorが&lt;/em&gt;無効の場合は&lt;em&gt;SA&lt;/em&gt;と&lt;em&gt;SL&lt;/em&gt;の引数。</target>
        </trans-unit>
        <trans-unit id="132b954edc540ee9c1993d9dc186bd73348a4f45" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;c&lt;/em&gt; into lower case.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;を小文字に変換し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3af2ee2a4ed1cc1d608d72c8c3ae4cea0695fe8c" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;c&lt;/em&gt; into upper case.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt;を大文字に変換し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="bca8141d56a4e25b8dd82d4de6ea898aa22dc018" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;node&lt;/em&gt; to its JSON Representation on one line.</source>
          <target state="translated">&lt;em&gt;ノード&lt;/em&gt;を1行でJSON表現に変換し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1d985f45cce074cc6a26e7ba7af5cd406702d977" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;node&lt;/em&gt; to its JSON Representation, without regard for human readability. Meant to improve &lt;code&gt;$&lt;/code&gt; string conversion performance.</source>
          <target state="translated">人間の可読性に関係なく、&lt;em&gt;ノード&lt;/em&gt;をJSON表現に変換し&lt;em&gt;ます&lt;/em&gt;。 &lt;code&gt;$&lt;/code&gt; 文字列変換のパフォーマンスを向上させることを意味します。</target>
        </trans-unit>
        <trans-unit id="923945d0338dd3a1a6e58bd0654ba3de80ba4bc6" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;node&lt;/em&gt; to its SEXP Representation on one line.</source>
          <target state="translated">&lt;em&gt;ノード&lt;/em&gt;を1行でSEXP表現に変換し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a792422dd2486386982477d31b67a244da8230f2" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;node&lt;/em&gt; to its Sexp Representation, with indentation and on multiple lines.</source>
          <target state="translated">&lt;em&gt;ノード&lt;/em&gt;をインデントと複数行のSexp表現に変換し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="70897bd4d5c4caeee681cc289ef5651d4f55aee0" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;s&lt;/em&gt; into lower case.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="d31d348b9930174bb237699f1a5b65399cfcb02d" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;s&lt;/em&gt; into lower-case unicode characters.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;を小文字のUnicode文字に変換します。</target>
        </trans-unit>
        <trans-unit id="7c5c9b5c90c23f06d6a46c0113bc7d33fbc5e9b7" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;s&lt;/em&gt; into upper case.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="3209fb6ea3be4a22e43b5b34ae338513cccf88b7" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;s&lt;/em&gt; into upper-case unicode characters.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;を大文字のUnicode文字に変換します。</target>
        </trans-unit>
        <trans-unit id="3b61bf3e758d2db20f90fb1782a0f4257fbd0a46" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;s&lt;/em&gt; to a &lt;code&gt;HtmlTag&lt;/code&gt;. If &lt;em&gt;s&lt;/em&gt; is no HTML tag, &lt;code&gt;tagUnknown&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;を &lt;code&gt;HtmlTag&lt;/code&gt; に変換します。&lt;em&gt;s&lt;/em&gt;がHTMLタグでない場合、 &lt;code&gt;tagUnknown&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="3e2ec3121dd6a68244ebb47e387a583cfd501bb4" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;s&lt;/em&gt; to a unicode title.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt;をUnicodeタイトルに変換します。</target>
        </trans-unit>
        <trans-unit id="e07ee6c014358eadf4dbfba4c269ef31497207c4" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;x&lt;/em&gt; into its binary representation.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;をバイナリ表現に変換します。</target>
        </trans-unit>
        <trans-unit id="ab472f8bd5ae22e48a39bbe5fb7e540462161b5b" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;x&lt;/em&gt; into its octal representation.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を8進数表現に変換します。</target>
        </trans-unit>
        <trans-unit id="ffdd068e1e5efa11728a7316dd8ef9efca871fc8" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;x&lt;/em&gt; to its decimal representation.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を10進数表現に変換します。</target>
        </trans-unit>
        <trans-unit id="1d563f3144c7da67380912ebc6bcc289364c1773" translate="yes" xml:space="preserve">
          <source>Converts &lt;em&gt;x&lt;/em&gt; to its hexadecimal representation.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を16進数表現に変換します。</target>
        </trans-unit>
        <trans-unit id="b6df4c1383801d18daeab0ad475192673d75a6b2" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;DateTime&lt;/code&gt; object to a string representation. It uses the format &lt;code&gt;yyyy-MM-dd'T'HH:mm:sszzz&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DateTime&lt;/code&gt; オブジェクトを文字列表現に変換します。 &lt;code&gt;yyyy-MM-dd'T'HH:mm:sszzz&lt;/code&gt; の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="2b84549730cb84f0578746df24968d288ae7986e" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;DateTime&lt;/code&gt; to a &lt;code&gt;Time&lt;/code&gt; representing the same point in time.</source>
          <target state="translated">&lt;code&gt;DateTime&lt;/code&gt; を同じ時点を表す &lt;code&gt;Time&lt;/code&gt; 変換します。</target>
        </trans-unit>
        <trans-unit id="2939632e43e78e77d753caa5754ade38b10cb209" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;MD5Digest&lt;/code&gt; value into its string representation.</source>
          <target state="translated">&lt;code&gt;MD5Digest&lt;/code&gt; 値をその文字列表現に変換します。</target>
        </trans-unit>
        <trans-unit id="86db6dda92699e287cb31688f0225e8242cebac9" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;SOBool&lt;/code&gt; into its Socket Option cint representation.</source>
          <target state="translated">&lt;code&gt;SOBool&lt;/code&gt; をSocket Option cint表現に変換します。</target>
        </trans-unit>
        <trans-unit id="8259a28693f4155110092ea40ad685763456ef53" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;Time&lt;/code&gt; value to a string representation. It will use the local time zone and use the format &lt;code&gt;yyyy-MM-dd'T'HH:mm:sszzz&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; 値を文字列表現に変換します。ローカルタイムゾーンを使用し、 &lt;code&gt;yyyy-MM-dd'T'HH:mm:sszzz&lt;/code&gt; の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="8a6761bac7ce43aa74fbc6e626b3085c67a629ea" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;TimeInterval&lt;/code&gt; into an array consisting of its time units, starting with nanoseconds and ending with years.</source>
          <target state="translated">&lt;code&gt;TimeInterval&lt;/code&gt; を、ナノ秒で始まり年で終わる時間単位で構成される配列に変換します。</target>
        </trans-unit>
        <trans-unit id="c51aad0a5f2f14e432cb27f22557c4def00d8189" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;cstringArray&lt;/code&gt; to a &lt;code&gt;seq[string]&lt;/code&gt;. &lt;code&gt;a&lt;/code&gt; is supposed to be of length &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cstringArray&lt;/code&gt; を &lt;code&gt;seq[string]&lt;/code&gt; 変換します。 &lt;code&gt;a&lt;/code&gt; の長さは &lt;code&gt;len&lt;/code&gt; であると想定されています。</target>
        </trans-unit>
        <trans-unit id="13aeb5370530f73314f430984d80a4bfb3b496e3" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;cstringArray&lt;/code&gt; to a &lt;code&gt;seq[string]&lt;/code&gt;. &lt;code&gt;a&lt;/code&gt; is supposed to be terminated by &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cstringArray&lt;/code&gt; を &lt;code&gt;seq[string]&lt;/code&gt; 変換します。 &lt;code&gt;a&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; で終了することになっています。</target>
        </trans-unit>
        <trans-unit id="cae1368ca9d5aab3254d562edf2c2d1277961752" translate="yes" xml:space="preserve">
          <source>Converts a &lt;em&gt;DateTime&lt;/em&gt; object to a string representation. It uses the format &lt;code&gt;yyyy-MM-dd'T'HH-mm-sszzz&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;DateTime&lt;/em&gt;オブジェクトを文字列表現に変換します。形式は &lt;code&gt;yyyy-MM-dd'T'HH-mm-sszzz&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef8ba3acf6bc618ca7755af8da66d033762e1026" translate="yes" xml:space="preserve">
          <source>Converts a &lt;em&gt;TimeInterval&lt;/em&gt; into an array consisting of its time units, starting with nanoseconds and ending with years</source>
          <target state="translated">&lt;em&gt;TimeInterval&lt;/em&gt;を、ナノ秒で始まり年で終わる時間単位で構成される配列に変換し&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="06f401aef35a49612e27d278ddca65998f8b7fd0" translate="yes" xml:space="preserve">
          <source>Converts a JsObject &lt;code&gt;x&lt;/code&gt; to type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">JSObjectを変換は &lt;code&gt;x&lt;/code&gt; は入力する &lt;code&gt;T&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="481782a78d6c6a6f5912ee18b38849de114c2541" translate="yes" xml:space="preserve">
          <source>Converts a JsObject &lt;em&gt;x&lt;/em&gt; to type &lt;em&gt;T&lt;/em&gt;.</source>
          <target state="translated">JsObject &lt;em&gt;x&lt;/em&gt;を&lt;em&gt;T&lt;/em&gt;型に変換します。</target>
        </trans-unit>
        <trans-unit id="5dc1377da45008ce6b69463d8ed7d73459677f07" translate="yes" xml:space="preserve">
          <source>Converts a Nim identifier to a string.</source>
          <target state="translated">Nimの識別子を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="77bf1f56ae2ef431e4af8d6acd798288f14b4ea2" translate="yes" xml:space="preserve">
          <source>Converts a Nim symbol to a string.</source>
          <target state="translated">Nimシンボルを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="029d72c09a90bcd7724cb048b8ac57981e038fd1" translate="yes" xml:space="preserve">
          <source>Converts a PDocument object into a string representation of it's XML</source>
          <target state="translated">PDocumentオブジェクトをXMLの文字列表現に変換します。</target>
        </trans-unit>
        <trans-unit id="b207e6466ce9409cf23b2e695cecd05a1a641f8f" translate="yes" xml:space="preserve">
          <source>Converts a Rune to a string</source>
          <target state="translated">ルーンを文字列に変換</target>
        </trans-unit>
        <trans-unit id="06687e8646c98fd466b6593adc7633e07d3802b5" translate="yes" xml:space="preserve">
          <source>Converts a Time to a TimeInterval.</source>
          <target state="translated">時刻をTimeIntervalに変換します。</target>
        </trans-unit>
        <trans-unit id="33c4af7b4093b872dfa99666650b90a1599e8951" translate="yes" xml:space="preserve">
          <source>Converts a UNIX &lt;em&gt;Time&lt;/em&gt; (&lt;code&gt;time_t&lt;/code&gt;) to a Windows file time</source>
          <target state="translated">UNIX &lt;em&gt;時間&lt;/em&gt;（ &lt;code&gt;time_t&lt;/code&gt; ）をWindowsファイル時間に変換します</target>
        </trans-unit>
        <trans-unit id="fb4253b3fec47cce9ac2ef0b00d04c0683adcde6" translate="yes" xml:space="preserve">
          <source>Converts a Windows time to a UNIX &lt;em&gt;Time&lt;/em&gt; (&lt;code&gt;time_t&lt;/code&gt;)</source>
          <target state="translated">Windows時間をUNIX &lt;em&gt;時間に&lt;/em&gt;変換します（ &lt;code&gt;time_t&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="350872a14db782f8ade20bff003b8c94bef1fb6b" translate="yes" xml:space="preserve">
          <source>Converts a broken-down time structure to calendar time representation.</source>
          <target state="translated">分解された時間構造をカレンダーの時間表現に変換します。</target>
        </trans-unit>
        <trans-unit id="e3bbf98d6403034e03a544285bf03fa7955725f0" translate="yes" xml:space="preserve">
          <source>Converts a bytes string to its hexadecimal representation.</source>
          <target state="translated">バイト文字列を16進数表現に変換します。</target>
        </trans-unit>
        <trans-unit id="44857de5d8758fd3426c08f361e5fe6f4ed0c516" translate="yes" xml:space="preserve">
          <source>Converts a character &lt;code&gt;c&lt;/code&gt; to its octal representation.</source>
          <target state="translated">文字 &lt;code&gt;c&lt;/code&gt; を8進表現に変換します。</target>
        </trans-unit>
        <trans-unit id="85026d6926a4e7a672dcc8b8d7ac51a3b00a2c0f" translate="yes" xml:space="preserve">
          <source>Converts a character &lt;em&gt;c&lt;/em&gt; to its octal representation.</source>
          <target state="translated">文字&lt;em&gt;c&lt;/em&gt;を8進数表現に変換します。</target>
        </trans-unit>
        <trans-unit id="ff20f418db9d995a1bc478043bee551469a49a9c" translate="yes" xml:space="preserve">
          <source>Converts a color into its textual representation.</source>
          <target state="translated">色をテキスト表現に変換します。</target>
        </trans-unit>
        <trans-unit id="e9408fa8c3a5a9ba3d6818c0b6c2f27e9f2690c2" translate="yes" xml:space="preserve">
          <source>Converts a duration into an array consisting of fixed time units.</source>
          <target state="translated">持続時間を固定時間単位で構成される配列に変換します。</target>
        </trans-unit>
        <trans-unit id="8109d0ec0ec971268bd4881af86d9494871caed9" translate="yes" xml:space="preserve">
          <source>Converts a float to a rope.</source>
          <target state="translated">フロートをロープに変換します。</target>
        </trans-unit>
        <trans-unit id="2158e0d0ea3aa7f508094580a16e3f0d74d97601" translate="yes" xml:space="preserve">
          <source>Converts a floating point number &lt;code&gt;f&lt;/code&gt; into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">浮動小数点数 &lt;code&gt;f&lt;/code&gt; を &lt;code&gt;int&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="2b1ef8743f0681d37b803de47aecd7cfd5f7a267" translate="yes" xml:space="preserve">
          <source>Converts a floating point value &lt;code&gt;f&lt;/code&gt; to a string using engineering notation.</source>
          <target state="translated">工学的記数法を使用して、浮動小数点値 &lt;code&gt;f&lt;/code&gt; を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="2a88c2b092728997f7cc63e3136adafe86d2284b" translate="yes" xml:space="preserve">
          <source>Converts a floating point value &lt;code&gt;f&lt;/code&gt; to a string.</source>
          <target state="translated">浮動小数点値 &lt;code&gt;f&lt;/code&gt; を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="896a32553e9a5f9757c4f2288d68cb72828738da" translate="yes" xml:space="preserve">
          <source>Converts a floating point value &lt;em&gt;f&lt;/em&gt; to a string using engineering notation.</source>
          <target state="translated">工学表記を使用して、浮動小数点値&lt;em&gt;f&lt;/em&gt;を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="fb161a2e089df85f212ce9fefaf9c1474cc935eb" translate="yes" xml:space="preserve">
          <source>Converts a floating point value &lt;em&gt;f&lt;/em&gt; to a string.</source>
          <target state="translated">浮動小数点値&lt;em&gt;f&lt;/em&gt;を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="3c6b1734909ab0d5900071a47c9777bac71743c8" translate="yes" xml:space="preserve">
          <source>Converts a rope back to a string.</source>
          <target state="translated">ロープを紐に変換します。</target>
        </trans-unit>
        <trans-unit id="e5115f681c42a2856e5beb235a2f163c3ae48ea1" translate="yes" xml:space="preserve">
          <source>Converts a rune into its UTF-8 representation</source>
          <target state="translated">ルーンをUTF-8表現に変換します。</target>
        </trans-unit>
        <trans-unit id="dee1f3d0a1b6fce166b937c9389dda1ebdc09d4a" translate="yes" xml:space="preserve">
          <source>Converts a rune into its UTF-8 representation.</source>
          <target state="translated">ルーンをUTF-8表現に変換します。</target>
        </trans-unit>
        <trans-unit id="cac73a3c487c89173ad6ca2e4fe0a15207567929" translate="yes" xml:space="preserve">
          <source>Converts a sequence of Runes to a string</source>
          <target state="translated">ルーンのシーケンスを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="8b17551ded0c113700d4f386d873f87a9c631807" translate="yes" xml:space="preserve">
          <source>Converts a sequence of Runes to a string.</source>
          <target state="translated">ルーンのシーケンスを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="94263278d7e332b09c4049ac4e39531f3b6ae594" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;hash&lt;/code&gt; to &lt;code&gt;SecureHash&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;hash&lt;/code&gt; を &lt;code&gt;SecureHash&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="2eaed093fadde134bc19fe401312d36df25f14af" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;s&lt;/code&gt; to its JSON representation with quotes.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; を引用符付きのJSON表現に変換します。</target>
        </trans-unit>
        <trans-unit id="47ba0f52e4e3bd77c088ee736c521995ecda9822" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;s&lt;/code&gt; to its JSON representation with quotes. Appends to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; を引用符付きのJSON表現に変換します。 &lt;code&gt;result&lt;/code&gt; 追加されます。</target>
        </trans-unit>
        <trans-unit id="92209ccf224b468952513173c9efa8eb9cbfc627" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;s&lt;/code&gt; to its JSON representation without quotes.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; を引用符なしのJSON表現に変換します。</target>
        </trans-unit>
        <trans-unit id="5ed8818d11f01272b52ae090eb19f6549c178b7a" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;code&gt;s&lt;/code&gt; to its JSON representation without quotes. Appends to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; を引用符なしのJSON表現に変換します。 &lt;code&gt;result&lt;/code&gt; 追加されます。</target>
        </trans-unit>
        <trans-unit id="3607b84941cf64f7a5e7eeb9a31345adf57c9dcb" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;em&gt;s&lt;/em&gt; to its JSON representation with quotes.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;を引用符付きのJSON表現に変換します。</target>
        </trans-unit>
        <trans-unit id="803d8bfb91eb518feb79e584c203b8c3e39b0c0d" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;em&gt;s&lt;/em&gt; to its JSON representation with quotes. Appends to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;を引用符付きのJSON表現に変換します。 &lt;code&gt;result&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="ae0b67d3e7042ebdf584c0562fe26565654e8496" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;em&gt;s&lt;/em&gt; to its JSON representation without quotes.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;を引用符なしのJSON表現に変換します。</target>
        </trans-unit>
        <trans-unit id="816b661910c73aef452ccae49353c83110e9b0f7" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;em&gt;s&lt;/em&gt; to its JSON representation without quotes. Appends to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;を引用符なしのJSON表現に変換します。 &lt;code&gt;result&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="a12e9384fdef1dafb9fae65265be9c74c596dbe9" translate="yes" xml:space="preserve">
          <source>Converts a string &lt;em&gt;s&lt;/em&gt; to its JSON representation.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;をJSON表現に変換します。</target>
        </trans-unit>
        <trans-unit id="980e1d8060d78e58486c9df3e550ee5f6e2a68cc" translate="yes" xml:space="preserve">
          <source>Converts a string to a rope.</source>
          <target state="translated">紐をロープに変換します。</target>
        </trans-unit>
        <trans-unit id="c429827106a747e37bec2a11c760bb8286d88760" translate="yes" xml:space="preserve">
          <source>Converts a value of any type to type JsObject</source>
          <target state="translated">任意の型の値を JsObject 型に変換します。</target>
        </trans-unit>
        <trans-unit id="f4e3067d8b47a656f48f8d82ac8876d087f88612" translate="yes" xml:space="preserve">
          <source>Converts all elements in &lt;em&gt;a&lt;/em&gt; to strings using &lt;em&gt;$&lt;/em&gt; and concatenates them with &lt;em&gt;sep&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;$&lt;/em&gt;を使用して&lt;em&gt;aの&lt;/em&gt;すべての要素を文字列に変換し&lt;em&gt;、&lt;/em&gt;それらを&lt;em&gt;sepで&lt;/em&gt;連結します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="99680272bb0ae9b9165e50fc4444b54440bc5c7a" translate="yes" xml:space="preserve">
          <source>Converts all elements in the container &lt;code&gt;a&lt;/code&gt; to strings using &lt;code&gt;$&lt;/code&gt;, and concatenates them with &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="translated">コンテナ &lt;code&gt;a&lt;/code&gt; 内のすべての要素を &lt;code&gt;$&lt;/code&gt; を使用して文字列に変換し、それらを &lt;code&gt;sep&lt;/code&gt; と連結します。</target>
        </trans-unit>
        <trans-unit id="c692477a1863cf5414094c2e5d9ae564e81d52c5" translate="yes" xml:space="preserve">
          <source>Converts an &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;0..255&lt;/code&gt; to a character.</source>
          <target state="translated">&lt;code&gt;0..255&lt;/code&gt; の範囲の &lt;code&gt;int&lt;/code&gt; を文字に変換します。</target>
        </trans-unit>
        <trans-unit id="8ec455ba743328c09b87329d96d1742813160d1e" translate="yes" xml:space="preserve">
          <source>Converts an HTML entity name like &lt;code&gt;&amp;amp;Uuml;&lt;/code&gt; or values like &lt;code&gt;&amp;amp;#220;&lt;/code&gt; or &lt;code&gt;&amp;amp;#x000DC;&lt;/code&gt; to its UTF-8 equivalent. &quot;&quot; is returned if the entity name is unknown. The HTML parser already converts entities to UTF-8.</source>
          <target state="translated">&lt;code&gt;&amp;amp;Uuml;&lt;/code&gt; のようなHTMLエンティティ名を変換します。または &lt;code&gt;&amp;amp;#220;&lt;/code&gt; のような値 または &lt;code&gt;&amp;amp;#x000DC;&lt;/code&gt; UTF-8に相当します。エンティティ名が不明な場合は &quot;&quot;が返されます。HTMLパーサーはすでにエンティティをUTF-8に変換しています。</target>
        </trans-unit>
        <trans-unit id="9cf422f15d84b0f3aca45688ec388fe854366390" translate="yes" xml:space="preserve">
          <source>Converts an HTML entity name like &lt;code&gt;&amp;amp;Uuml;&lt;/code&gt; or values like &lt;code&gt;&amp;amp;#220;&lt;/code&gt; or &lt;code&gt;&amp;amp;#x000DC;&lt;/code&gt; to its UTF-8 equivalent. Rune(0) is returned if the entity name is unknown.</source>
          <target state="translated">&lt;code&gt;&amp;amp;Uuml;&lt;/code&gt; のようなHTMLエンティティ名を変換します。または &lt;code&gt;&amp;amp;#220;&lt;/code&gt; のような値 または &lt;code&gt;&amp;amp;#x000DC;&lt;/code&gt; UTF-8に相当します。エンティティ名が不明の場合、Rune（0）が返されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
