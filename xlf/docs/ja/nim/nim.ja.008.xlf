<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="fface47b088c778a2f4e77c02bf19ee55d18a8e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;fromWinTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;fromWinTime&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="06ec99b3afe2ae2cbe0edda32125eccea758f261" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;code&gt;toWinTime&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに &lt;code&gt;toWinTime&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3a884be761dae54201f8aa530278b417918acce3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; use &lt;em&gt;hasKey&lt;/em&gt; instead.</source>
          <target state="translated">&lt;strong&gt;非推奨：&lt;/strong&gt;代わりに&lt;em&gt;hasKey&lt;/em&gt;を使用して&lt;em&gt;ください&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a22c0c29442195e4011e17d60edeee2f5d85fcea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Disclaimer&lt;/strong&gt;: This code is not well tested, may be very unsafe and prone to security vulnerabilities.</source>
          <target state="translated">&lt;strong&gt;免責事項&lt;/strong&gt;：このコードは十分にテストされていないため、非常に安全でなく、セキュリティの脆弱性が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6ffe4dc5c4fc52ea3ea1e3a20dd64567380feece" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Do not use this module for cryptographic purposes!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;このモジュールを暗号化の目的で使用しないでください！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f928ed32bee5c29af52b00bc30f99ce156242335" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Docstring&lt;/strong&gt;: always the empty string.</source>
          <target state="translated">&lt;strong&gt;Docstring&lt;/strong&gt;：常に空の文字列です。</target>
        </trans-unit>
        <trans-unit id="d4209dbb40d9185067bcb8ce189cd1c6eed7f25e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Docstring&lt;/strong&gt;: docstring if available.</source>
          <target state="translated">&lt;strong&gt;Docstring&lt;/strong&gt;：利用可能な場合はdocstring。</target>
        </trans-unit>
        <trans-unit id="c0dd9bb9e04f64f6f60578b64bf64464fec710d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Error&lt;/strong&gt; - error conditions that the application can recover from</source>
          <target state="translated">&lt;strong&gt;エラー&lt;/strong&gt;-アプリケーションが回復できるエラー状態</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1bc0a5d67820f61786ae04d054caabfe5bd3f6ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15f078e82171a8efcc97da8037079287adaefb70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fatal&lt;/strong&gt; - fatal errors that prevent the application from continuing</source>
          <target state="translated">&lt;strong&gt;致命的&lt;/strong&gt;-アプリケーションの続行を妨げる致命的なエラー</target>
        </trans-unit>
        <trans-unit id="73e5c6a20cafb8203519ae745e546e8bb3f10e1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: always the empty string.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：常に空の文字列。</target>
        </trans-unit>
        <trans-unit id="160ef9d36bed422272b88e68bd931cde20c08000" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: enum type grouping other enum fields.</source>
          <target state="translated">&lt;strong&gt;4番目の列&lt;/strong&gt;：他の列挙型フィールドをグループ化する列挙型。</target>
        </trans-unit>
        <trans-unit id="be7ebe20c5b6aef98f77a13140c9b09bb67359f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the iterator including return type.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：戻り値の型を含む反復子の署名。</target>
        </trans-unit>
        <trans-unit id="c6c20f7dbb204753d2338c8585a984c7c7fa8c25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the macro including return type.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：戻り値の型を含むマクロの署名。</target>
        </trans-unit>
        <trans-unit id="b6771fb30bab96fd8cf5d95cfd5b7411f13b3c15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the method including return type.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：戻り値の型を含むメソッドのシグネチャ。</target>
        </trans-unit>
        <trans-unit id="8779f27a30500300592c1fbc44c5a869259d7284" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the proc including return type.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：戻り値の型を含むプロシージャの署名。</target>
        </trans-unit>
        <trans-unit id="5b4c52d33a04c0f32a87d9b5783e815726a1d81e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: signature of the template including return type.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：戻り値の型を含むテンプレートの署名。</target>
        </trans-unit>
        <trans-unit id="4dfd102fd6fbe96ece65dd9c1d384e0f16912006" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the const value.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：const値のタイプ。</target>
        </trans-unit>
        <trans-unit id="63fb555122e12cadcd219b4c04854752ec0ed9fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the let variable.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：let変数のタイプ。</target>
        </trans-unit>
        <trans-unit id="20edb7c031a399a27ff6ff092cecc38f0cd151a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the parameter.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：パラメータのタイプ。</target>
        </trans-unit>
        <trans-unit id="d1c0d7dfb4af3e8e26314132e3d53473279ebfe5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the result.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：結果のタイプ。</target>
        </trans-unit>
        <trans-unit id="c558e48e401e6265a17ebeab90f8b20f1f7e1e47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type of the var.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：変数のタイプ。</target>
        </trans-unit>
        <trans-unit id="9384cc6e440487319d842110001333299d831093" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: the type.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：タイプ。</target>
        </trans-unit>
        <trans-unit id="329b7e3326c98503c949ca9d39330b0e1c6794bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fourth column&lt;/strong&gt;: type of the var.</source>
          <target state="translated">&lt;strong&gt;4列目&lt;/strong&gt;：変数のタイプ。</target>
        </trans-unit>
        <trans-unit id="978f10cfc82df92effeee967159555f49c21c819" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: GC'ed memory should be allowed in unchecked arrays and there should be an explicit annotation of how the GC is to determine the runtime size of the array.</source>
          <target state="translated">&lt;strong&gt;今後の方向性&lt;/strong&gt;：GCされたメモリは、チェックされていない配列で許可する必要があり、GCが配列のランタイムサイズを決定する方法を明示的に注釈する必要があります。</target>
        </trans-unit>
        <trans-unit id="150871409dc1ef45a59e74d4be5900fd8cf45ddc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: GC'ed memory should be allowed in unions and the GC should scan unions conservatively.</source>
          <target state="translated">&lt;strong&gt;将来の方向性&lt;/strong&gt;：共用体ではGCによるメモリを許可し、GCは保守的に共用体をスキャンする必要があります。</target>
        </trans-unit>
        <trans-unit id="5f1330a349c9dedfd2b8b17d35746d232592d00d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: The &lt;code&gt;acyclic&lt;/code&gt; pragma may become a property of a &lt;code&gt;ref&lt;/code&gt; type:</source>
          <target state="translated">&lt;strong&gt;今後の方向性&lt;/strong&gt;： &lt;code&gt;acyclic&lt;/code&gt; プラグマは、 &lt;code&gt;ref&lt;/code&gt; 型のプロパティになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9a4c8f25dfeefcc10f7c8b1211a9ccc00288df9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: Using GC'ed memory in packed pragma will result in a static error. Usage with inheritance should be defined and documented.</source>
          <target state="translated">&lt;strong&gt;今後の方向性&lt;/strong&gt;：パックされたプラグマでGCされたメモリを使用すると、静的エラーが発生します。継承を伴う使用法を定義し、文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="75d19ae59ec3e06e328ace922bad09261db8a6c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Future directions&lt;/strong&gt;: Using GC'ed memory in packed pragma will result in compile-time error. Usage with inheritance should be defined and documented.</source>
          <target state="translated">&lt;strong&gt;将来の方向性&lt;/strong&gt;：パックされたプラグマでGCされたメモリを使用すると、コンパイル時エラーが発生します。継承を伴う使用法を定義し、文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="02ec565bd2b833f4e079a16ceaa88628a37485b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint:&lt;/strong&gt; With &lt;code&gt;--hint[codeBegin]:on&lt;/code&gt; or &lt;code&gt;--verbosity:2&lt;/code&gt; (or higher) while compiling or &lt;code&gt;nim check&lt;/code&gt;, Nim lists the processed code after each filter application.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt;で &lt;code&gt;--hint[codeBegin]:on&lt;/code&gt; 又は &lt;code&gt;--verbosity:2&lt;/code&gt; （またはそれ以上）コンパイル中または &lt;code&gt;nim check&lt;/code&gt; 、ニムリスト各フィルタ適用後の処理コード。</target>
        </trans-unit>
        <trans-unit id="b59417140c3fc6f7e2c17f2c777a2f509360e62e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint:&lt;/strong&gt; With &lt;code&gt;--hint[codeBegin]:on```or ``--verbosity:2&lt;/code&gt; (or higher) Nim lists the processed code after each filter application.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt;で &lt;code&gt;--hint[codeBegin]:on```or ``--verbosity:2&lt;/code&gt; （またはそれ以上）NIMは各フィルタ適用後に処理コードを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="b2b402acffec017e9e1d08158fe3bc6834d4ccb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If duplicate keys were added, this may need to be called multiple times.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;重複するキーが追加された場合、これを複数回呼び出す必要がある場合があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5e3461ae9a0b84542c802ba567999b3faa5afdc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; The &lt;code&gt;[]&lt;/code&gt; operator will raise an exception when the specified field does not exist.</source>
          <target state="translated">&lt;strong&gt;重要：&lt;/strong&gt; &lt;code&gt;[]&lt;/code&gt; 指定したフィールドが存在しない場合、オペレータは例外が発生します。</target>
        </trans-unit>
        <trans-unit id="46a3d06a2ac66b0299dc868e1e5f195e4b08f76c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Info&lt;/strong&gt; - anything associated with normal operation and without any particular importance</source>
          <target state="translated">&lt;strong&gt;情報&lt;/strong&gt;-通常の操作に関連し、特に重要ではないもの</target>
        </trans-unit>
        <trans-unit id="00641ee780415a4fe5e346e4872088e6dc38287d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS note:&lt;/strong&gt;&lt;code&gt;buffer&lt;/code&gt; is treated as a &lt;code&gt;ptr string&lt;/code&gt; and read between &lt;code&gt;0..&amp;lt;bufLen&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;JS注：&lt;/strong&gt; &lt;code&gt;buffer&lt;/code&gt; は &lt;code&gt;ptr string&lt;/code&gt; として扱われ、 &lt;code&gt;0..&amp;lt;bufLen&lt;/code&gt; 間で読み取られます。</target>
        </trans-unit>
        <trans-unit id="0570a04d10f01c787204df1793c74a673b8d7e99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS note:&lt;/strong&gt;&lt;code&gt;buffer&lt;/code&gt; is treated as a &lt;code&gt;ptr string&lt;/code&gt; and written to between &lt;code&gt;0..&amp;lt;bufLen&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;JS注：&lt;/strong&gt; &lt;code&gt;buffer&lt;/code&gt; は &lt;code&gt;ptr string&lt;/code&gt; として扱われ、 &lt;code&gt;0..&amp;lt;bufLen&lt;/code&gt; 間に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f555042911466061dac7f6fee69c396fc92108dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Known limitations:&lt;/strong&gt; In the JavaScript target, global variables using the &lt;code&gt;codegenDecl&lt;/code&gt; pragma will be re-initialized on each reload. Please guard the initialization with a &lt;em&gt;once&lt;/em&gt; block to work-around this.</source>
          <target state="translated">&lt;strong&gt;既知の制限：&lt;/strong&gt; JavaScriptターゲットでは、 &lt;code&gt;codegenDecl&lt;/code&gt; プラグマを使用するグローバル変数は、リロードのたびに再初期化されます。これを回避するには、&lt;em&gt;once&lt;/em&gt;ブロックで初期化をガードしてください。</target>
        </trans-unit>
        <trans-unit id="5911ff88eb68bebee7d71b3a0d7b01ad6e208cea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Nim currently does not detect these!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Nimは現在これらを検出しません！</target>
        </trans-unit>
        <trans-unit id="3082097f9021d41c1a42dcf5d23ffc66ad1979a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: The behaviour might change in future versions as it is not clear what &quot;&lt;em&gt;wild&lt;/em&gt; HTML the real world uses&quot; really implies.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：「現実の世界で使用されている&lt;em&gt;ワイルド&lt;/em&gt;HTML」が実際に何を意味するのかが明確でないため、将来のバージョンで動作が変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="65dcf051b0f8d4d6b70a92dd10d98dbbb05e7cdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="140047e96ac4c58f01e73270812c9a51624feb38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; At the moment hot code reloading is supported only in JavaScript projects.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;現在、ホットコードの再読み込みはJavaScriptプロジェクトでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="16f3b81d60ef5438aad137b2307d09cc9f71b096" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Breaking the &lt;code&gt;fastRows()&lt;/code&gt; iterator during a loop will cause the next database query to raise a &lt;code&gt;DbError&lt;/code&gt; exception &lt;code&gt;unable to close due to ...&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;速報 &lt;code&gt;fastRows()&lt;/code&gt; ループの間イテレータは、次のデータベースクエリを上げることになります &lt;code&gt;DbError&lt;/code&gt; 例外 &lt;code&gt;unable to close due to ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61e6136be66e5bf74c87880dc268f56f9861dc81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Channels are designed for the &lt;code&gt;Thread&lt;/code&gt; type. They are unstable when used with &lt;code&gt;spawn&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;チャネルは &lt;code&gt;Thread&lt;/code&gt; タイプ用に設計されています。 &lt;code&gt;spawn&lt;/code&gt; と一緒に使用すると不安定になります</target>
        </trans-unit>
        <trans-unit id="0d9dcf701f94adaa5a4d2bbfbd098d67fc7ddc8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Channels cannot be passed between threads. Use globals or pass them by &lt;code&gt;ptr&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;チャネルをスレッド間で渡すことはできません。グローバルを使用するか、 &lt;code&gt;ptr&lt;/code&gt; で渡します。</target>
        </trans-unit>
        <trans-unit id="a5ae990ae2793f586640459d0853bfff28f07ff8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Comment statement will be ignored.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コメントステートメントは無視されます。</target>
        </trans-unit>
        <trans-unit id="6c08afa96cbaa181efd240626cdc35ba72be35dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Does not work for NimScript.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; NimScriptでは機能しません。</target>
        </trans-unit>
        <trans-unit id="d4b69032440a3760c06332bd2946743c6dc04769" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Each delegate has a task associated with it. This gets called after each select() call, if you set timeout to &lt;code&gt;-1&lt;/code&gt; the tasks will only be executed after one or more file descriptors becomes readable or writeable.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;各デリゲートにはタスクが関連付けられています。これは、select（）を呼び出すたびに呼び出されます。timeoutを &lt;code&gt;-1&lt;/code&gt; に設定すると、1つ以上のファイル記述子が読み取り可能または書き込み可能になった後でのみタスクが実行されます。</target>
        </trans-unit>
        <trans-unit id="7f378938581797df4e574611774903888f75a977" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For leap years, start date is assumed to be 1 AD. counts the number of leap years up to January 1st of a given year. Keep in mind that if specified year is a leap year, the leap day has not happened before January 1st of that year.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;うるう年の場合、開始日は西暦1年と見なされます。特定の年の1月1日までのうるう年の数をカウントします。指定した年がうるう年である場合、うるう日はその年の1月1日より前には発生していないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="02ebb094e834ec378d8bae7a318f260891645141" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you need a version of &lt;code&gt;exec&lt;/code&gt; that returns the exit code and text output of the command, you can use &lt;a href=&quot;system#gorgeEx,string,string,string&quot;&gt;system.gorgeEx&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コマンドの終了コードとテキスト出力を返すバージョンの &lt;code&gt;exec&lt;/code&gt; が必要な場合は、&lt;a href=&quot;system#gorgeEx,string,string,string&quot;&gt;system.gorgeEx&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="8234ec32d945f2b0f03239d1b0eaae84f70df2af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you want to provide async ability to your module please do not use the &lt;code&gt;Delegate&lt;/code&gt; object, instead use &lt;code&gt;AsyncSocket&lt;/code&gt;. It is possible that in the future this type's fields will not be exported therefore breaking your code.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;モジュールに非同期機能を提供する場合は、 &lt;code&gt;Delegate&lt;/code&gt; オブジェクトを使用せず、代わりに &lt;code&gt;AsyncSocket&lt;/code&gt; を使用してください。将来、この型のフィールドがエクスポートされなくなり、コードが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e85ae0701fc3f9c17e3733cbce315301d09131af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Import &lt;code&gt;packages/docutils/highlite&lt;/code&gt; to use this module</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このモジュールを使用するには、 &lt;code&gt;packages/docutils/highlite&lt;/code&gt; をインポートして&lt;strong&gt;ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="843c2b3ee7e629c2441a4dd24c956ffe976de720" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Import &lt;code&gt;packages/docutils/rst&lt;/code&gt; to use this module</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このモジュールを使用するには、 &lt;code&gt;packages/docutils/rst&lt;/code&gt; をインポートして&lt;strong&gt;ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e76b1b31d6a0fcc3a95e3171e746bb3a3ca3998e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Import &lt;code&gt;packages/docutils/rstast&lt;/code&gt; to use this module</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このモジュールを使用するには、 &lt;code&gt;packages/docutils/rstast&lt;/code&gt; をインポートして&lt;strong&gt;ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42ab66a9d8c71c977571af7a1c3cae030aeb63a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Import &lt;code&gt;packages/docutils/rstgen&lt;/code&gt; to use this module</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このモジュールを使用するには、 &lt;code&gt;packages/docutils/rstgen&lt;/code&gt; をインポートして&lt;strong&gt;ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2474d53657db59741f090272c72d5eb8c30f27da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Import &lt;code&gt;std/sha1&lt;/code&gt; to use this module</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このモジュールを使用するには、 &lt;code&gt;std/sha1&lt;/code&gt; をインポートして&lt;strong&gt;ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6066c5e1dbc1c07031004fde7afa16f36e8afe0b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Most modules have tasks which need to be ran regularly, this is why you should not call &lt;code&gt;poll&lt;/code&gt; with a infinite timeout, or even a very long one. In most cases the default timeout is fine.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ほとんどのモジュールには、定期的に実行する必要があるタスクがあります。これが、無限のタイムアウトまたは非常に長いタイムアウトで &lt;code&gt;poll&lt;/code&gt; を呼び出すべきではない理由です。ほとんどの場合、デフォルトのタイムアウトで十分です。</target>
        </trans-unit>
        <trans-unit id="197712af8474ad67fa3deb053cf4d10c7db7a328" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not available for JS backend.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JSバックエンドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="add59de22ea186db4c63840851e7cf0d92d2b537" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not available for JS backend. Use &lt;a href=&quot;#peekStr,Stream,int&quot;&gt;peekStr&lt;/a&gt; for now.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JSバックエンドでは使用できません。今の&lt;a href=&quot;#peekStr,Stream,int&quot;&gt;ところpeekStr&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="a295c2c96fbc8a7f45e187ef6bfaedb02e5b3937" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not available for JS backend. Use &lt;a href=&quot;#readStr,Stream,int&quot;&gt;readStr&lt;/a&gt; for now.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JSバックエンドでは使用できません。今の&lt;a href=&quot;#readStr,Stream,int&quot;&gt;ところreadStr&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="61879707f76ebc05d6254a26c8af524bb7cf85ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Not available for JS backend. Use &lt;a href=&quot;#write,Stream,string&quot;&gt;write(Stream, string)&lt;/a&gt; for now.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JSバックエンドでは使用できません。今のところ&lt;a href=&quot;#write,Stream,string&quot;&gt;write（Stream、string）&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="0f5f90a42c28a76d9ac73c0f1962a68a45b56af5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On the JS backend this currently counts UTF-16 code points instead of bytes at runtime (not at compile time). For now, if you need the byte length of the UTF-8 encoding, convert to string with &lt;code&gt;$&lt;/code&gt; first then call &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; JSバックエンドでは、これは現在、（コンパイル時ではなく）実行時にバイトではなくUTF-16コードポイントをカウントします。今のところ、UTF-8エンコーディングのバイト長が必要な場合は、最初に &lt;code&gt;$&lt;/code&gt; を使用して文字列に変換してから、 &lt;code&gt;len&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e5f3a93e6b5389328dfe4d50a2a108b926a73e41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Only error and fatal messages will cause the output buffer to be flushed immediately. Use the &lt;a href=&quot;io#flushFile,File&quot;&gt;flushFile proc&lt;/a&gt; to flush the buffer manually if needed.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;エラーメッセージと致命的なメッセージのみが、出力バッファーをすぐにフラッシュします。必要に応じて、&lt;a href=&quot;io#flushFile,File&quot;&gt;flushFile proc&lt;/a&gt;を使用して、バッファを手動でフラッシュします。</target>
        </trans-unit>
        <trans-unit id="0ed2d4766f9364afd4bd59bed6474d34be992a49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Only the &lt;code&gt;connection&lt;/code&gt; parameter is used for &lt;code&gt;sqlite&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;sqlite&lt;/code&gt; には &lt;code&gt;connection&lt;/code&gt; パラメーターのみが使用されます。</target>
        </trans-unit>
        <trans-unit id="0e05f6628a4d37e39425527e3fad105da1952478" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Starting from Nim 0.20, to use multi-methods one must explicitly pass &lt;code&gt;--multimethods:on&lt;/code&gt; when compiling.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Nim 0.20以降、マルチメソッドを使用する &lt;code&gt;--multimethods:on&lt;/code&gt; 、コンパイル時に--multimethods：onを明示的に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="4f92aa536204e6eaef641a2e69451b390e74e1bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;em&gt;project file name&lt;/em&gt; is the name of the &lt;code&gt;.nim&lt;/code&gt; file that is passed as a command line argument to the compiler.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;プロジェクトファイル名は&lt;/em&gt;の名前です &lt;code&gt;.nim&lt;/code&gt; コンパイラへのコマンドライン引数として渡されたファイル。</target>
        </trans-unit>
        <trans-unit id="bde269deb8be545b32a64412683066eff50f652a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;em&gt;project file name&lt;/em&gt; is the name of the &lt;code&gt;.nim&lt;/code&gt; file that is passed as a command-line argument to the compiler.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;プロジェクトファイル名は&lt;/em&gt;の名前です &lt;code&gt;.nim&lt;/code&gt; コンパイラへのコマンドライン引数として渡されたファイル。</target>
        </trans-unit>
        <trans-unit id="2a72b0f5ef54ecdf16cb26a40bdbef5872800692" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The API of FutureStream is still new and so has a higher likelihood of changing in the future.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; FutureStreamのAPIはまだ新しいため、将来変更される可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="fe5b130db131453d8df37e590c01fe6f08bec9e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The behaviour of this procedure changed in version 0.14.0. To get a list of usages and to restore the old behaviour of this procedure, compile with the &lt;code&gt;-d:nimJsonGet&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この手順の動作は、バージョン0.14.0で変更されました。使用法のリストを取得し、この手順の古い動作を復元するには、 &lt;code&gt;-d:nimJsonGet&lt;/code&gt; フラグを指定してコンパイルします。</target>
        </trans-unit>
        <trans-unit id="b68055c0d51d611257c884fc1743a259d12fc766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The current implementation of message passing does not work with cyclic data structures.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;メッセージパッシングの現在の実装は、循環データ構造では機能しません。</target>
        </trans-unit>
        <trans-unit id="c072da5e00ce440c3b93018b2a1ef17e9ee5503c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The current implementation of message passing does not work with cyclic data structures. &lt;strong&gt;Note:&lt;/strong&gt; Channels cannot be passed between threads. Use globals or pass them by &lt;em&gt;ptr&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;メッセージパッシングの現在の実装は、循環データ構造では機能しません。&lt;strong&gt;注：&lt;/strong&gt;チャネルをスレッド間で渡すことはできません。グローバルを使用するか、&lt;em&gt;ptrで&lt;/em&gt;渡します。</target>
        </trans-unit>
        <trans-unit id="c053963c70f97a8b2121caf302c6833bc53f2f10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The encoding cannot be changed once it's been set. According to SQLite3 documentation, any attempt to change the encoding after the database is created will be silently ignored.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;エンコードは、一度設定すると変更できません。SQLite3のドキュメントによると、データベースの作成後にエンコーディングを変更しようとすると、黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="b999dbe7ed39e219e124bd0949367e2e3d56fe13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The resulting &lt;code&gt;XmlNode&lt;/code&gt; already uses the &lt;code&gt;clientData&lt;/code&gt; field, so it cannot be used by clients of this library.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;結果の &lt;code&gt;XmlNode&lt;/code&gt; は既に &lt;code&gt;clientData&lt;/code&gt; フィールドを使用しているため、このライブラリのクライアントは使用できません。</target>
        </trans-unit>
        <trans-unit id="eb469a558a1fb80f9ffa7a37d87dd2f9adc314d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The server may return multiple lines of coded replies.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;サーバーは複数行のコード化された応答を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="0d1eacb2a91de8906a2993f50f4d1523095b2af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; There are no postfix operators in Nim. However, the &lt;code&gt;nnkPostfix&lt;/code&gt; node is used for the &lt;em&gt;asterisk export marker&lt;/em&gt;&lt;code&gt;*&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Nimには後置演算子はありません。ただし、 &lt;code&gt;nnkPostfix&lt;/code&gt; ノードは&lt;em&gt;アスタリスクエクスポートマーカーに&lt;/em&gt;使用され&lt;em&gt;ます&lt;/em&gt; &lt;code&gt;*&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2f905a6d385133393b2c96347260edc54f46375a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This does not preserve the new line characters used in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これは、 &lt;code&gt;s&lt;/code&gt; で使用される改行文字を保持しません。</target>
        </trans-unit>
        <trans-unit id="b7811fa53cf7abdc675dfee2447ec973dd431ac0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is not supported on &lt;code&gt;Windows&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数は &lt;code&gt;Windows&lt;/code&gt; ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="10e606a3da78b8e2b189b92aa03f1f5e54c1d549" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This function is supported only by BSD and MacOSX.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;この関数は、BSDおよびMacOSXでのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="cc104a0e857b282ec998816c0f3e015bee2d1e8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is an experimental feature. It can be enabled with &lt;code&gt;{.experimental: &quot;notnil&quot;}&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これは実験的な機能です。 &lt;code&gt;{.experimental: &quot;notnil&quot;}&lt;/code&gt; で有効にできます。</target>
        </trans-unit>
        <trans-unit id="a504100a18ce5297ff0a5435681c490ac8437f44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This is not very efficient.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これはあまり効率的ではありません。</target>
        </trans-unit>
        <trans-unit id="e60296ba87e29cbb2d2d722997e0bc1d53551519" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This logger is not available for the JavaScript backend.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このロガーは、JavaScriptバックエンドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="b24c06d6eed7edbd4cef00490b4db7c0ca199c4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This module currently only supports select(), this is limited by FD_SETSIZE, which is usually 1024. So you may only be able to use 1024 sockets at a time.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このモジュールは現在select（）のみをサポートしています。これはFD_SETSIZEによって制限されます。これは通常1024です。したがって、一度に使用できるソケットは1024のみです。</target>
        </trans-unit>
        <trans-unit id="be757c0b40131a488a140d8d6a5f654644bde753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This proc is not available for SSL sockets.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このプロシージャはSSLソケットでは使用できません。</target>
        </trans-unit>
        <trans-unit id="bada7c4bc2eb5a9723fa1a4e5f0977c09eb2e93e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This proc is not available for the JavaScript backend.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このプロシージャは、JavaScriptバックエンドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="72097e11d6435758e6d11a17ddc9ef4aaa3827e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This proc is not available in the JavaScript backend.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;このプロシージャは、JavaScriptバックエンドでは使用できません。</target>
        </trans-unit>
        <trans-unit id="e78137b9e08d95e0c1988f940939d1041367f9b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This uses different hashing algorithm than &lt;code&gt;hash(string)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これは、 &lt;code&gt;hash(string)&lt;/code&gt; とは異なるハッシュアルゴリズムを使用します。</target>
        </trans-unit>
        <trans-unit id="a4b46072c825ede32e475a77de0b13f39275d7ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This will allocate a new &lt;code&gt;Mimetypes&lt;/code&gt; database every time you call it, you can pass your own via the &lt;code&gt;mimeDb&lt;/code&gt; parameter to avoid this.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これにより、呼び出すたびに新しい &lt;code&gt;Mimetypes&lt;/code&gt; データベースが割り当てられます。これを回避するには、 &lt;code&gt;mimeDb&lt;/code&gt; パラメーターを介して独自のデータベースを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8996a73c32006599330b4aacfeffcd8eabd847e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Under POSIX OS's, the returned time may actually be the time at which the file's attribute's were last modified. See &lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1058&quot;&gt;here&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; POSIX OSでは、返される時刻は実際にはファイルの属性が最後に変更された時刻である場合があります。詳細は&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/1058&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="08f986989f7c1fa9c2cfa29fe4aab7353d67faf6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use it only when you are &lt;strong&gt;absolutely sure&lt;/strong&gt; the value is present (e.g. after checking &lt;a href=&quot;#isSome,Option%5BT%5D&quot;&gt;isSome&lt;/a&gt;). Generally, using &lt;a href=&quot;#get,Option%5BT%5D&quot;&gt;get proc&lt;/a&gt; is preferred.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;値が存在することが&lt;strong&gt;絶対的に確実な&lt;/strong&gt;場合にのみ使用して&lt;strong&gt;ください&lt;/strong&gt;（たとえば、&lt;a href=&quot;#isSome,Option%5BT%5D&quot;&gt;isSome&lt;/a&gt;をチェックした後）。一般に、&lt;a href=&quot;#get,Option%5BT%5D&quot;&gt;getproc&lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4326e562047392c7a998b1d78e1b1453866d2345" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You may wish to use the high-level version of this function which is defined below.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;以下で定義されているこの関数の高水準バージョンを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="a987f98d420623ba5755baff3ce3a93970a01567" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You need to run asynchronous examples in an async proc otherwise you will get an &lt;code&gt;Undeclared identifier: 'await'&lt;/code&gt; error.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;非同期プロシージャで非同期の例を実行する必要があります。そうしないと、 &lt;code&gt;Undeclared identifier: 'await'&lt;/code&gt; ていない識別子： 'await'エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="18f7852fedb7919a22f8ce639864908dfafb58b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You will need to run asynchronous examples in an async proc otherwise you will get an &lt;code&gt;Undeclared identifier: 'await'&lt;/code&gt; error.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;非同期プロシージャで非同期の例を実行する必要があります。そうしないと、 &lt;code&gt;Undeclared identifier: 'await'&lt;/code&gt; エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a7f5ae0bae2a97db2cc21e767ee5806933143eee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; to serialize &lt;code&gt;x&lt;/code&gt; to JSON use &lt;code&gt;$(%x)&lt;/code&gt; from the &lt;code&gt;json&lt;/code&gt; module.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;x&lt;/code&gt; をJSONにシリアル化するには、 &lt;code&gt;json&lt;/code&gt; モジュールの &lt;code&gt;$(%x)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bec8ba034600835b90eb455003ce0ac16f8f5171" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;getCurrentException()&lt;/code&gt; and &lt;code&gt;getCurrentExceptionMsg()&lt;/code&gt; are not available for imported exceptions from C++. One needs to use the &lt;code&gt;except ImportedException as x:&lt;/code&gt; syntax and rely on functionality of the &lt;code&gt;x&lt;/code&gt; object to get exception details.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;getCurrentException()&lt;/code&gt; および &lt;code&gt;getCurrentExceptionMsg()&lt;/code&gt; は、C ++からインポートされた例外には使用できません。 &lt;code&gt;except ImportedException as x:&lt;/code&gt; 構文として使用し、 &lt;code&gt;x&lt;/code&gt; オブジェクトの機能に依存して例外の詳細を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2cd00a05c4e51c80b150666326157914820525e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e153549d82bb0553e51565bc85af72f16648f194" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;c2nim&quot;&gt;c2nim&lt;/a&gt; can parse a large subset of C++ and knows about the &lt;code&gt;importcpp&lt;/code&gt; pragma pattern language. It is not necessary to know all the details described here.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;c2nim&quot;&gt;c2nim&lt;/a&gt;はC ++の大部分のサブセットを解析でき、 &lt;code&gt;importcpp&lt;/code&gt; プラグマパターン言語について知っています。ここで説明する詳細をすべて知っている必要はありません。</target>
        </trans-unit>
        <trans-unit id="628a6cfa36ef34d2672ec1af4c7d21e0c80f03df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst&quot;&gt;c2nim&lt;/a&gt; can parse a large subset of C++ and knows about the &lt;code&gt;importcpp&lt;/code&gt; pragma pattern language. It is not necessary to know all the details described here.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst&quot;&gt;c2nim&lt;/a&gt;はC ++の大規模なサブセットを解析でき、 &lt;code&gt;importcpp&lt;/code&gt; pragmaパターン言語について知っています。ここで説明されているすべての詳細を知る必要はありません。</target>
        </trans-unit>
        <trans-unit id="f77e21e8d0104eaa0e42efbc8c62a054445fe5af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;manual#syntax-precedence&quot;&gt;Operator precedence&lt;/a&gt; is different than in &lt;em&gt;C&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;manual#syntax-precedence&quot;&gt;演算子の優先順位&lt;/a&gt;は&lt;em&gt;C&lt;/em&gt;とは異なります。</target>
        </trans-unit>
        <trans-unit id="c35a1cbcb5dda710b9a8fceaddc79fa8711972fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;--experimental:views&lt;/code&gt; is more effective with &lt;code&gt;--experimental:strictFuncs&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;--experimental:views&lt;/code&gt; は、 &lt;code&gt;--experimental:strictFuncs&lt;/code&gt; を使用するとより効果的です。</target>
        </trans-unit>
        <trans-unit id="2058773cc31994be378f849d22fa2b6e5de64f38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;=sink&lt;/code&gt; does not need to check for self-assignments. How self-assignments are handled is explained later in this document.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;=sink&lt;/code&gt; は自己割り当てをチェックする必要はありません。自己割り当ての処理方法については、このドキュメントの後半で説明します。</target>
        </trans-unit>
        <trans-unit id="752ddb5d050c961f8013cbe90d4ad9d26a7ee13a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;client&lt;/code&gt; must be initialised (with &lt;code&gt;new&lt;/code&gt;), this function makes no effort to initialise the &lt;code&gt;client&lt;/code&gt; variable.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;client&lt;/code&gt; は（ &lt;code&gt;new&lt;/code&gt; を使用して）初期化する必要があります。この関数は &lt;code&gt;client&lt;/code&gt; 変数を初期化しようとしません。</target>
        </trans-unit>
        <trans-unit id="449eaada440261e910e8e598da9c4ed1cfb68e61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;client&lt;/code&gt; needs to be initialised.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;client&lt;/code&gt; を初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed6c907ecc726f3524b1431bfea1378d7d591f2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;data&lt;/code&gt; must be initialised.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;data&lt;/code&gt; 初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="64c21c25b25fb13a012539ce3d92a2f60ed66909" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;typeof(x)&lt;/code&gt; can for historical reasons also be written as &lt;code&gt;type(x)&lt;/code&gt; but &lt;code&gt;type(x)&lt;/code&gt; is discouraged.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;typeof(x)&lt;/code&gt; は、歴史的な理由から &lt;code&gt;type(x)&lt;/code&gt; と書くこともできますが、 &lt;code&gt;type(x)&lt;/code&gt; はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="79f23d79481e20b54cf233e31f8767bbf0d80411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;var&lt;/code&gt; parameters are never necessary for efficient parameter passing. Since non-var parameters cannot be modified the compiler is always free to pass arguments by reference if it considers it can speed up execution.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;var&lt;/code&gt; パラメータは、効率的なパラメータの受け渡しには必要ありません。var以外のパラメーターは変更できないため、コンパイラーは、実行を高速化できると考える場合、参照によって引数を常に自由に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="917b6bc95e7e2268d07e2f344f8fb05732bc1b22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A &lt;code&gt;dynlib&lt;/code&gt; import can be overridden with the &lt;code&gt;--dynlibOverride:name&lt;/code&gt; command line option. The Compiler User Guide contains further information.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;dynlib&lt;/code&gt; インポートは &lt;code&gt;--dynlibOverride:name&lt;/code&gt; コマンドラインオプションで上書きできます。コンパイラユーザーガイドには、詳細情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="aea57afb484ca3b2ae950510502c02d6d6d1b317" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: A &lt;code&gt;dynlib&lt;/code&gt; import can be overridden with the &lt;code&gt;--dynlibOverride:name&lt;/code&gt; command-line option. The Compiler User Guide contains further information.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;dynlib&lt;/code&gt; インポートは、 &lt;code&gt;--dynlibOverride:name&lt;/code&gt; コマンドラインオプションを使用してオーバーライドできます。コンパイラユーザーガイドには、詳細情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="d69e89fc6e4fabdd63d8a15033a0affd20ea60f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: According to HTTP/1.1 specification, the reason phrase is</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：HTTP / 1.1仕様によると、理由句は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a4c0c0109f9323e091c1b8f19f86e88886ea759e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: An &lt;span id=&quot;unresolved_1&quot;&gt;unresolved&lt;/span&gt; expression is an expression for which no symbol lookups and no type checking have been performed.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;span id=&quot;unresolved_1&quot;&gt;未解決の&lt;/span&gt;式とは、シンボルの検索や型のチェックが実行されていない式のことです。</target>
        </trans-unit>
        <trans-unit id="19158a8ced28ef096d6d098faea99e938f8aea45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: As a special syntactic extension if the whole PEG is only a single expression, identifiers are not interpreted as non-terminals, but are interpreted as verbatim string:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：PEG全体が1つの式のみの場合の特別な構文拡張として、識別子は非終端記号として解釈されず、逐語的文字列として解釈されます。</target>
        </trans-unit>
        <trans-unit id="a646964958fc81cca21d1deac84d2ec91d7e8349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Assignments, moves, and destruction are specified in the &lt;a href=&quot;destructors&quot;&gt;destructors&lt;/a&gt; document.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：割り当て、移動、および破棄は、&lt;a href=&quot;destructors&quot;&gt;デストラクタ&lt;/a&gt;ドキュメントで指定されています。</target>
        </trans-unit>
        <trans-unit id="394b8821bf33b16092eceec91b4261c0182b2ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Code reordering is experimental and must be enabled via the &lt;code&gt;{.experimental.}&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：コードの並べ替えは実​​験的なものであり、 &lt;code&gt;{.experimental.}&lt;/code&gt; プラグマで有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="15d3410cbe9aaa0f2ff2edaf757af2c7376b1329" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Compile time evaluation is not (yet) supported for methods.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：コンパイル時の評価は（まだ）メソッドではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="1e9fb916a488d76befb6f270dcbc01bbe526c18b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Compile-time execution is not (yet) supported for methods.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：コンパイル時の実行は、（まだ）メソッドではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="1ec4927b4c9fc829236a51cac7723591db8396a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Composition (&lt;em&gt;has-a&lt;/em&gt; relation) is often preferable to inheritance (&lt;em&gt;is-a&lt;/em&gt; relation) for simple code reuse. Since objects are value types in Nim, composition is as efficient as inheritance.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：単純なコードの再利用には&lt;em&gt;、&lt;/em&gt;構成（&lt;em&gt;has-a&lt;/em&gt;関係）が継承（&lt;em&gt;is-a&lt;/em&gt;関係）よりも望ましい場合がよくあります。オブジェクトはNimの値型であるため、合成は継承と同じくらい効率的です。</target>
        </trans-unit>
        <trans-unit id="0f588e4000ab499174937baf99ba9de907f81477" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Concepts are still in development.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：コンセプトはまだ開発中です。</target>
        </trans-unit>
        <trans-unit id="af0cb2698b6f62001c812557400b5666b24c541b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently exceptions are not propagated between &lt;code&gt;spawn&lt;/code&gt;'ed tasks!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：現在、例外は、 &lt;code&gt;spawn&lt;/code&gt; されたタスク間で伝播されません。</target>
        </trans-unit>
        <trans-unit id="d265fbeed3ef479118f8bab7a4ed8678ac73bc47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently the assignment operator &lt;code&gt;=&lt;/code&gt; for &lt;code&gt;IntSet&lt;/code&gt; performs some rather meaningless shallow copy. Since Nim currently does not allow the assignment operator to be overloaded, use &lt;a href=&quot;#assign,IntSet,IntSet&quot;&gt;assign proc&lt;/a&gt; to get a deep copy.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：現在、代入演算子は &lt;code&gt;=&lt;/code&gt; のため &lt;code&gt;IntSet&lt;/code&gt; いくつかむしろ無意味な浅いコピーを実行します。Nimは現在、代入演算子のオーバーロードを許可していないため、&lt;a href=&quot;#assign,IntSet,IntSet&quot;&gt;assignproc&lt;/a&gt;を使用してディープコピーを取得します。</target>
        </trans-unit>
        <trans-unit id="e593de705b48a873244d353e72e0630bbbf7e8ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently the compiler recognizes but ignores this pragma.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：現在、コンパイラーはこのプラグマを認識しますが無視します。</target>
        </trans-unit>
        <trans-unit id="1b2d5b76dbe4b87b85248e2c9cb6a142ec8c770f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently the creation of &lt;code&gt;nimrtl.dll&lt;/code&gt; with thread support has never been tested and is unlikely to work!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：現在、スレッドをサポートする &lt;code&gt;nimrtl.dll&lt;/code&gt; の作成はテストされておらず、機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="fb2822c93615d44b3b3cc5966ff533ff418b8724" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Destructors are still experimental and the spec might change significantly in order to incorporate an escape analysis.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：デストラクタはまだ実験段階であり、エスケープ分析を組み込むために仕様が大幅に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ee1ed6db845c184364f8097a01163d56d39e9c4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Dot operators are still experimental and so need to be enabled via &lt;code&gt;{.experimental: &quot;dotOperators&quot;.}&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：ドット演算子はまだ実験 &lt;code&gt;{.experimental: &quot;dotOperators&quot;.}&lt;/code&gt; なので、{。experimental： &quot;dotOperators&quot;。}で有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="d670368c6c2f5f22dc63498bef9e5233133587fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For Nim 1.0.x and older version, &lt;code&gt;zip&lt;/code&gt; returned a seq of named tuple with fields &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. For Nim versions 1.1.x and newer, &lt;code&gt;zip&lt;/code&gt; returns a seq of unnamed tuples.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Nim 1.0.x以前のバージョンでは、 &lt;code&gt;zip&lt;/code&gt; はフィールド &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を持つ名前付きタプルのシーケンスを返しました。Nimバージョン1.1.x以降の場合、 &lt;code&gt;zip&lt;/code&gt; は名前のないタプルのシーケンスを返します。</target>
        </trans-unit>
        <trans-unit id="76687951273781b82f6f05a64604534fc897b54a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For SSL sockets, the &lt;code&gt;handshake&lt;/code&gt; procedure must be called whenever the socket successfully connects to a server.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：SSLソケットの場合、ソケットがサーバーに正常に接続するたびに、 &lt;code&gt;handshake&lt;/code&gt; プロシージャを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="91e3db899bae0bbfb9a7d3d39b2d7c168b6e2d11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For historical reasons &lt;code&gt;stmt&lt;/code&gt; is an alias for &lt;code&gt;typed&lt;/code&gt; and &lt;code&gt;expr&lt;/code&gt; an alias for &lt;code&gt;untyped&lt;/code&gt;, but new code should use the newer, clearer names.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：歴史的な理由 &lt;code&gt;stmt&lt;/code&gt; の別名で &lt;code&gt;typed&lt;/code&gt; と &lt;code&gt;expr&lt;/code&gt; との別名 &lt;code&gt;untyped&lt;/code&gt; 、しかし、新しいコードは、より新しい、より明確な名前を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c1eaf1a79f9ecb1c0d26ea4d5f7c22f8781d75d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For historical reasons &lt;code&gt;stmt&lt;/code&gt; was an alias for &lt;code&gt;typed&lt;/code&gt; and &lt;code&gt;expr&lt;/code&gt; was an alias for &lt;code&gt;untyped&lt;/code&gt;, but they are removed.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：歴史的な理由から、 &lt;code&gt;stmt&lt;/code&gt; は &lt;code&gt;typed&lt;/code&gt; エイリアスであり、 &lt;code&gt;expr&lt;/code&gt; は &lt;code&gt;untyped&lt;/code&gt; エイリアスでしたが、削除されています。</target>
        </trans-unit>
        <trans-unit id="35fa8c02b68bd348136724f65366d5d42363838f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: For historical reasons &lt;code&gt;varargs[expr]&lt;/code&gt; is not equivalent to &lt;code&gt;varargs[untyped]&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：歴史的な理由のために &lt;code&gt;varargs[expr]&lt;/code&gt; と等価ではない &lt;code&gt;varargs[untyped]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f4acf53db39aa60c86dd41398806d083a1a38011" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Historically the operations were unchecked and the conversions were sometimes checked but starting with the revision 1.0.4 of this document and the language implementation the conversions too are now &lt;em&gt;always unchecked&lt;/em&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これまで、操作はチェックされておらず、変換もチェックされることがありましたが、このドキュメントのリビジョン1.0.4および言語の実装以降、変換も&lt;em&gt;常にチェックされなくなりました&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="cfadb62af1d09f91ea948f6071b29e23cceab2f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: In general, the &lt;em&gt;define&lt;/em&gt; switches can also be set in NimScripts using &lt;code&gt;switch&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt;, as shown in above examples. Only the &lt;code&gt;release&lt;/code&gt; define (&lt;code&gt;-d:release&lt;/code&gt;) cannot be set in NimScripts.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：一般に、&lt;em&gt;定義&lt;/em&gt;スイッチは、上記の例に示すように、 &lt;code&gt;switch&lt;/code&gt; または &lt;code&gt;--&lt;/code&gt; を使用してNimScriptで設定することもでき&lt;em&gt;ます&lt;/em&gt;。NimScriptsでは、 &lt;code&gt;release&lt;/code&gt; 定義（ &lt;code&gt;-d:release&lt;/code&gt; ）のみを設定できません。</target>
        </trans-unit>
        <trans-unit id="6a6d221cb0526b5b0ecc418d504b0327381bfb9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Instead of &lt;code&gt;unittest.nim&lt;/code&gt;, please consider to use the &lt;code&gt;testament&lt;/code&gt; tool which offers process isolation for your tests. Also &lt;code&gt;when isMainModule: doAssert conditionHere&lt;/code&gt; is usually a much simpler solution for testing purposes.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;unittest.nim&lt;/code&gt; の代わりに、テストのプロセス分離を提供する &lt;code&gt;testament&lt;/code&gt; ツールの使用を検討してください。また &lt;code&gt;when isMainModule: doAssert conditionHere&lt;/code&gt; は通常、テスト目的ではるかに単純なソリューションです。</target>
        </trans-unit>
        <trans-unit id="8e02a608054219b27095b71a1aa9165e80b92873" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Nim computes a SHA1 checksum and only recompiles the file if it has changed. One can use the &lt;code&gt;-f&lt;/code&gt; command-line option to force the recompilation of the file.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：NimはSHA1チェックサムを計算し、ファイルが変更された場合にのみファイルを再コンパイルします。 &lt;code&gt;-f&lt;/code&gt; コマンドラインオプションを使用して、ファイルの再コンパイルを強制できます。</target>
        </trans-unit>
        <trans-unit id="9cc5314fa7beb1755c498007976fd6bffd4a8741" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Nim computes a SHA1 checksum and only recompiles the file if it has changed. You can use the &lt;code&gt;-f&lt;/code&gt; command line option to force recompilation of the file.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：NimはSHA1チェックサムを計算し、ファイルが変更されている場合にのみファイルを再コンパイルします。 &lt;code&gt;-f&lt;/code&gt; コマンドラインオプションを使用すると、ファイルを強制的に再コンパイルできます。</target>
        </trans-unit>
        <trans-unit id="5388196ac73187f231ad39b82fb913ddc94a4bed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Nim currently does not detect these!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Nimは現在これらを検出しません！</target>
        </trans-unit>
        <trans-unit id="1271bb2722e7587eff37d0ec7806e796871dfb12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Openarrays can only be used for parameters.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Openarraysはパラメーターにのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="69090e5eea8eeff4b4d6ed39bda4ed8ea1e00303" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Passing variables to the &lt;code&gt;dynlib&lt;/code&gt; pragma will fail at runtime because of order of initialization problems.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：初期化の順序に問題があるため、変数を &lt;code&gt;dynlib&lt;/code&gt; プラグマに渡すと、実行時に失敗します。</target>
        </trans-unit>
        <trans-unit id="3d949419e5e8c75fc524d73127b46fd0d96b06e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Patterns like &lt;code&gt;libtcl(|8.5|8.4).so&lt;/code&gt; are only supported in constant strings, because they are precompiled.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;libtcl(|8.5|8.4).so&lt;/code&gt; ようなパターンは、プリコンパイルされているため、定数文字列でのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="5c87c54173a7af7c54802abf0f3667ebc67c0bd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Read/write tracking is not yet implemented!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：読み取り/書き込みトラッキングはまだ実装されていません。</target>
        </trans-unit>
        <trans-unit id="2f5d2ff34eda59be2af772bbe3e60f574635b531" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Starting from Nim 0.20, generic methods are deprecated.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Nim 0.20以降、ジェネリックメソッドは非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="935e75468fab30bc8f181842cd16bcdfa062c5e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;.this&lt;/code&gt; pragma is deprecated and should not be used anymore.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;.this&lt;/code&gt; プラグマは非推奨であり、今後は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="6bf5dca9c21d9d5aa4df461a3ff745da6884616f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;finalizer&lt;/code&gt; refers to the type &lt;code&gt;T&lt;/code&gt;, not to the object! This means that for each object of type &lt;code&gt;T&lt;/code&gt; the finalizer will be called!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;finalizer&lt;/code&gt; は、オブジェクトではなく、タイプ &lt;code&gt;T&lt;/code&gt; を参照します。これは、タイプ &lt;code&gt;T&lt;/code&gt; のオブジェクトごとに、ファイナライザーが呼び出されることを意味します。</target>
        </trans-unit>
        <trans-unit id="e111e86a91d15663eda5e4e58e22260484c13d8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt; operations are available at compile-time!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;to&lt;/code&gt; および &lt;code&gt;$$&lt;/code&gt; 操作はコンパイル時に使用できます。</target>
        </trans-unit>
        <trans-unit id="03d9a64e63cab477a98b846aee1c6abff8cf07a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The Nim compiler prior to version 1 was more lenient about this requirement. Use the &lt;code&gt;--useVersion:0.19&lt;/code&gt; switch for a transition period.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：バージョン1より前のNimコンパイラーは、この要件についてより寛大でした。移行期間には、 &lt;code&gt;--useVersion:0.19&lt;/code&gt; スイッチを使用します。</target>
        </trans-unit>
        <trans-unit id="032415bc42f7c2c0c686c44717cb2657050a5b9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The aliasing restrictions are currently not enforced by the implementation and need to be fleshed out further.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：エイリアシングの制限は現在、実装によって強制されておらず、さらに具体化する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f9fdb234ef8ab9ea0cd0ee243a725c77f4c3646" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The asynchronous implementation is only asynchronous for long file transfers, calls to functions which use the command socket will block.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：非同期の実装は、長いファイル転送の場合のみ非同期であり、コマンドソケットを使用する関数の呼び出しはブロックされます。</target>
        </trans-unit>
        <trans-unit id="21b5006b1c5b3e0551182aafd1ac04017eed31d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The data types declared here have &lt;em&gt;value semantics&lt;/em&gt;: This means that &lt;code&gt;=&lt;/code&gt; performs a copy of the set.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：ここで宣言されたデータ型には、&lt;em&gt;値のセマンティクス&lt;/em&gt;があり&lt;em&gt;ます&lt;/em&gt;。これは、 &lt;code&gt;=&lt;/code&gt; がセットのコピーを実行することを意味します。</target>
        </trans-unit>
        <trans-unit id="280898b023d47a8c9d92f2a9764ba5070e544d38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The example only works because the memory is initialized to zero (&lt;code&gt;alloc0&lt;/code&gt; instead of &lt;code&gt;alloc&lt;/code&gt; does this): &lt;code&gt;d.s&lt;/code&gt; is thus initialized to binary zero which the string assignment can handle. One needs to know low level details like this when mixing garbage collected data with unmanaged memory.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この例は、メモリがゼロに初期化されているためにのみ機能します（ &lt;code&gt;alloc&lt;/code&gt; ではなく &lt;code&gt;alloc0&lt;/code&gt; がこれを実行します）。したがって、 &lt;code&gt;d.s&lt;/code&gt; は、文字列割り当てで処理できるバイナリゼロに初期化されます。ガベージコレクションされたデータをアンマネージメモリと混合する場合、このような低レベルの詳細を知る必要があります。</target>
        </trans-unit>
        <trans-unit id="0029ff03975d512a536084038b6c01735900bacd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The example only works because the memory is initialized to zero (&lt;code&gt;alloc0&lt;/code&gt; instead of &lt;code&gt;alloc&lt;/code&gt; does this): &lt;code&gt;d.s&lt;/code&gt; is thus initialized to binary zero which the string assignment can handle. One needs to know low-level details like this when mixing garbage-collected data with unmanaged memory.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この例は、メモリがゼロに初期化されているためにのみ機能します（ &lt;code&gt;alloc&lt;/code&gt; ではなく &lt;code&gt;alloc0&lt;/code&gt; がこれを行います）。したがって、 &lt;code&gt;d.s&lt;/code&gt; は文字列割り当てで処理できるバイナリゼロに初期化されます。ガベージコレクションされたデータをアンマネージメモリと混合する場合は、このような低レベルの詳細を知る必要があります。</target>
        </trans-unit>
        <trans-unit id="f70c58fd6b5bff5d5008569af769d29c9fc79ae2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The experimental features of Nim are covered &lt;a href=&quot;manual_experimental&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：Nimの実験的な機能については、&lt;a href=&quot;manual_experimental&quot;&gt;ここで説明します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bc930249dbf7dab3ed38153c8153f17bf2fbf3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The precise result values depend on the used C runtime library and can differ between operating systems!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：正確な結果値は、使用するCランタイムライブラリによって異なり、オペレーティングシステムによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="47964f4e63f9364071ab4aeb6d699ff7f8c08bcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are also &lt;code&gt;--assumedef&lt;/code&gt; and &lt;code&gt;--assumendef&lt;/code&gt; command line options that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--assumedef&lt;/code&gt; および &lt;code&gt;--assumendef&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="beec5a850cfc6f7745e1b0ecb5a58d4d3717ffad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are also &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--suffix&lt;/code&gt; command line options that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--prefix&lt;/code&gt; および &lt;code&gt;--suffix&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="69ba15cf193dfbb62171a2742d239684c78daa69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are also &lt;code&gt;--stdcall&lt;/code&gt; and &lt;code&gt;--cdecl&lt;/code&gt; command line options that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--stdcall&lt;/code&gt; および &lt;code&gt;--cdecl&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="6eae5a3b83fbed6b6c57ab8bbef30bd246b16faa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are two approaches to parameter substitution support by this module.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このモジュールによるパラメーター置換サポートには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="ee188be1bbae9b44b94cfc6f97f02261fdde6c36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There are two different allowed implementation strategies:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：許可される実装戦略は2つあります。</target>
        </trans-unit>
        <trans-unit id="a5a42997a6733b871213621a8b95f824a807c7b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--dynlib&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--dynlib&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="7af996a9b1410d0551b826fcf6f31d2982be4597" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--header&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--header&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="0f6e6a5551e301a9206be409821f73e8efe724ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--skipcomments&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--skipcomments&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="24001770e3fa5f62c6de4221e4016da922b0b6b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--skipinclude&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--skipinclude&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="2a3d0067cf0a534d5914217a3b18410a03771aa4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: There is also a &lt;code&gt;--typeprefixes&lt;/code&gt; command line option that can be used for the same purpose.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：同じ目的で使用できる &lt;code&gt;--typeprefixes&lt;/code&gt; コマンドラインオプションもあります。</target>
        </trans-unit>
        <trans-unit id="e18e21cf48841adbc9777187ae8968f7fba53e98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This document is a draft! Several of Nim's features may need more precise wording. This manual is constantly evolving into a proper specification.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このドキュメントはドラフトです！Nimの機能のいくつかは、より正確な表現が必要な場合があります。このマニュアルは常に適切な仕様に進化しています。</target>
        </trans-unit>
        <trans-unit id="2aa2ab11076fb4ba0e0d90bade6f9b388734484a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This fails to count to &lt;code&gt;high(int)&lt;/code&gt; if T = int for efficiency reasons.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：効率上の理由から、T = intの場合、これは &lt;code&gt;high(int)&lt;/code&gt; にカウントされません。</target>
        </trans-unit>
        <trans-unit id="567715e1f13e193fbfbf1198cf956b11412e00c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This fails to count to &lt;code&gt;low(int)&lt;/code&gt; if T = int for efficiency reasons.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：効率上の理由から、T = intの場合、これは &lt;code&gt;low(int)&lt;/code&gt; にカウントされません。</target>
        </trans-unit>
        <trans-unit id="3533bf7103759fe5e503b595e40df4e4b28e6da3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is &lt;strong&gt;not correct&lt;/strong&gt; for producing Ansi C code!</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これは、AnsiCコードの生成に&lt;strong&gt;は正しく&lt;/strong&gt;あり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="054e7ea2fe4b0d2089c5eb61f38663920957149a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is a low-level function, you may be interested in the higher level versions of this function which are also named &lt;code&gt;recv&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これは低レベルの関数です。この関数の高レベルのバージョン（ &lt;code&gt;recv&lt;/code&gt; とも呼ばれる）に興味があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5282ba94e7660dfc3a29bcd1eed3c48d245d27d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is a low-level version of &lt;code&gt;send&lt;/code&gt;. You likely should use the version below.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これは &lt;code&gt;send&lt;/code&gt; の低レベルバージョンです。以下のバージョンを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed9daeb8e2aec5a4f06a14063ad786a38c80a1d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is dangerous to use as it encourages races. It's much better to use &lt;a href=&quot;#tryRecv,Channel%5BTMsg%5D&quot;&gt;tryRecv proc&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これはレースを促進するため、使用するのは危険です。代わりに&lt;a href=&quot;#tryRecv,Channel%5BTMsg%5D&quot;&gt;tryRecvproc&lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a3557f4c5da279c0358c73497195e9e969d921ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is part of the system module. Do not import it directly. To activate thread support compile with the &lt;code&gt;--threads:on&lt;/code&gt; command line switch.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これはシステムモジュールの一部です。直接インポートしないでください。スレッドサポートをアクティブにするには、 &lt;code&gt;--threads:on&lt;/code&gt; コマンドラインスイッチを使用してコンパイルします。</target>
        </trans-unit>
        <trans-unit id="49259d4a9dac22acd343c8e255eecad4c524a642" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This is part of the system module. Do not import it directly. To activate thread support you need to compile with the &lt;code&gt;--threads:on&lt;/code&gt; command line switch.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これはシステムモジュールの一部です。直接インポートしないでください。スレッドサポートをアクティブにするには、 &lt;code&gt;--threads:on&lt;/code&gt; コマンドラインスイッチを使用してコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="a69e35e7b9f3081695456106f46697c03ffedd82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This module is deprecated since version 0.11.3. You should use the async version of this module &lt;a href=&quot;asyncftpclient&quot;&gt;asyncftpclient&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このモジュールは、バージョン0.11.3以降非推奨です。このモジュール&lt;a href=&quot;asyncftpclient&quot;&gt;asyncftpclientの&lt;/a&gt;非同期バージョンを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d2aa27f677d4a034cdeb59f9e8f5be392614db71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This pragma should only be used by procs which consist solely of assembler statements.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このプラグマは、アセンブラーステートメントのみで構成されるプロシージャでのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="c3942176661636505e686cd1e170c9c2c66c7838" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This pragma will not exist for the LLVM backend.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このプラグマはLLVMバックエンドには存在しません。</target>
        </trans-unit>
        <trans-unit id="d247c6d12bb22bba349cec5690833cc3a153b0fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This proc is only occasionally useful, better use the &lt;a href=&quot;parseopt&quot;&gt;parseopt module&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この&lt;a href=&quot;parseopt&quot;&gt;プロシージャ&lt;/a&gt;はたまにしか役に立ちません。parseoptモジュールを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e370238e58db64e0d5e09298f252112f6df12b8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This procedure is mostly used for testing. You likely want to use &lt;code&gt;asyncnet.recvLine&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この手順は主にテストに使用されます。代わりに &lt;code&gt;asyncnet.recvLine&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="322b2c09d6ee80b4e8d9ee5e387bb8ede9f8c9b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This procedure will &lt;strong&gt;NOT&lt;/strong&gt; register &lt;code&gt;fd&lt;/code&gt; with the global async dispatcher. You need to do this manually. If you have used &lt;code&gt;newAsyncNativeSocket&lt;/code&gt; to create &lt;code&gt;fd&lt;/code&gt; then it's already registered.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：この手順では、 &lt;code&gt;fd&lt;/code&gt; をグローバル非同期ディスパッチャーに登録し&lt;strong&gt;ません&lt;/strong&gt;。これは手動で行う必要があります。 &lt;code&gt;newAsyncNativeSocket&lt;/code&gt; を使用して &lt;code&gt;fd&lt;/code&gt; を作成した場合は、すでに登録されています。</target>
        </trans-unit>
        <trans-unit id="69d44c4cf9df913ee690fbbedde86b19492609d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This results in non-deterministic behaviour and should be avoided.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これは非決定論的な動作をもたらすため、回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="518d5e4c7535845c8e9c442146b53d59a9b2f210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This section describes the current implementation. This part of the language specification will be changed. See &lt;a href=&quot;https://github.com/nim-lang/RFCs/issues/230&quot;&gt;https://github.com/nim-lang/RFCs/issues/230&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このセクションでは、現在の実装について説明します。言語仕様のこの部分は変更されます。詳細については、&lt;a href=&quot;https://github.com/nim-lang/RFCs/issues/230&quot;&gt;https：//github.com/nim-lang/RFCs/issues/230&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d932869f99df24b8242ec488c4a11db3770fcfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This will not work for the LLVM backend.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これはLLVMバックエンドでは機能しません。</target>
        </trans-unit>
        <trans-unit id="36372381e9ac840b308a26506bae63970c747486" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This will set &lt;code&gt;sock&lt;/code&gt; to be non-blocking.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これにより、 &lt;code&gt;sock&lt;/code&gt; が非ブロッキングになります。</target>
        </trans-unit>
        <trans-unit id="d2b79b4545224be391a1d3f8ef925b80e4e045ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Unless otherwise indicated, these features are not to be removed, but refined and overhauled.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：特に明記されていない限り、これらの機能は削除されませんが、改良およびオーバーホールされます。</target>
        </trans-unit>
        <trans-unit id="639f9874d8270608fdc7d69cf3882e85dfa3e245" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: When you use it to write a wrapper for a C library, you should always check that the original library does never write to data behind the pointer that is returned from this procedure.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：これを使用してCライブラリーのラッパーを作成する場合は、元のライブラリーがこのプロシージャーから返されるポインターの背後にあるデータに決して書き込まないことを常に確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8563457a94cb48f3c140f57c68dfa33fbbbe81a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: paths are not normalized to determine &lt;code&gt;isHidden&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：パスは、 &lt;code&gt;isHidden&lt;/code&gt; を決定するために正規化されていません。</target>
        </trans-unit>
        <trans-unit id="1223df2703569d7a264f78da6a04381483fe3ce4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: static[T] is still in development.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：static [T]はまだ開発中です。</target>
        </trans-unit>
        <trans-unit id="cfc7fae090374e3f5581cc6d980013b1b5608dd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: this proc does not exist while using the JS backend.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：JSバックエンドを使用している間、このプロシージャは存在しません。</target>
        </trans-unit>
        <trans-unit id="ef937726101d6bbf1ea792d981c362dd127505c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Notes:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e42fbe4240560deae4f59c3edc3b41aa2d7beba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Notes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c903f2c52589e7acc68bf776349122058e049fc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notice&lt;/strong&gt; - more important information that users should be notified about</source>
          <target state="translated">&lt;strong&gt;注意&lt;/strong&gt;-ユーザーに通知する必要があるより重要な情報</target>
        </trans-unit>
        <trans-unit id="3999835082895c400051c08efff687fac9d5116a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Performance note&lt;/strong&gt;: Nim does not produce a virtual method table, but generates dispatch trees. This avoids the expensive indirect branch for method calls and enables inlining. However, other optimizations like compile time evaluation or dead code elimination do not work with methods.</source>
          <target state="translated">&lt;strong&gt;パフォーマンスのメモ&lt;/strong&gt;：Nimは仮想メソッドテーブルを生成しませんが、ディスパッチツリーを生成します。これにより、メソッド呼び出しの負荷の高い間接分岐が回避され、インライン化が可能になります。ただし、コンパイル時の評価やデッドコードの除去などの他の最適化は、メソッドでは機能しません。</target>
        </trans-unit>
        <trans-unit id="264a251f5075a4fdc9f3139ede36b3cff78c8711" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please do not use this&lt;/strong&gt;: On Android, it currently returns &lt;code&gt;getHomeDir()&lt;/code&gt;, and on other Unix based systems it can cause security problems too. That said, you can override this implementation by adding &lt;code&gt;-d:tempDir=mytempname&lt;/code&gt; to your compiler invocation.</source>
          <target state="translated">&lt;strong&gt;これは使用しないでください&lt;/strong&gt;。Androidでは現在 &lt;code&gt;getHomeDir()&lt;/code&gt; が返され、他のUnixベースのシステムでもセキュリティの問題が発生する可能性があります。とはいえ、コンパイラの呼び出しに &lt;code&gt;-d:tempDir=mytempname&lt;/code&gt; を追加することで、この実装をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="23e826b6b4ecba08efbc3138c61cefb888e1c674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Please do not use this&lt;/strong&gt;: On Android, it currently returns &lt;code&gt;getHomeDir()&lt;/code&gt;, and on other Unix based systems it can cause security problems too. That said, you can override this implementation by adding &lt;code&gt;-d:tempDir=mytempname&lt;/code&gt; to your compiler invokation.</source>
          <target state="translated">&lt;strong&gt;これは使用しないでください&lt;/strong&gt;。Androidでは現在 &lt;code&gt;getHomeDir()&lt;/code&gt; が返され、他のUnixベースのシステムではセキュリティの問題が発生する可能性があります。つまり、コンパイラーの呼び出しに &lt;code&gt;-d:tempDir=mytempname&lt;/code&gt; を追加することで、この実装をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="270d375af3bf0ef2adcd5f8fc2f75af783697ee1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Restriction&lt;/strong&gt;: For objects their type is &lt;strong&gt;not&lt;/strong&gt; serialized. This means essentially that it does not work if the object has some other runtime type than its compiletime type.</source>
          <target state="translated">&lt;strong&gt;制約事項&lt;/strong&gt;：オブジェクトの場合、そのタイプはシリアル化され&lt;strong&gt;ません&lt;/strong&gt;。これは基本的に、オブジェクトにコンパイル時タイプ以外のランタイムタイプがある場合は機能しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="af53126db5be4c8aab90d27d5734b3708b192d3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Restriction&lt;/strong&gt;: For objects their type is &lt;strong&gt;not&lt;/strong&gt; serialized. This means essentially that it does not work if the object has some other runtime type than its compiletime type:</source>
          <target state="translated">&lt;strong&gt;制約事項&lt;/strong&gt;：オブジェクトの場合、そのタイプはシリアライズされ&lt;strong&gt;ません&lt;/strong&gt;。これは基本的に、オブジェクトがそのコンパイル時の型以外のランタイム型を持っている場合は機能しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="551e0b7660ec60a1ba024654ebf85dd6e11ea8a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;参照：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7186d0046c17a6da25a9438f95b74f4eee397d1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;も参照してください&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="1d6c6b236d8abec1257912f6c53339b4b244db44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since&lt;/strong&gt; version 1.2.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;バージョン1.2&lt;strong&gt;以降&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ca02299d53be025106a7089f4b7c5750dcd3dd98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since&lt;/strong&gt;: Version 1.2.</source>
          <target state="translated">&lt;strong&gt;以来&lt;/strong&gt;：バージョン1.2。</target>
        </trans-unit>
        <trans-unit id="92e0079e41a5b0f8de60d18697948189f4c07fdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Style note&lt;/strong&gt;: For code readability, it is the best idea to use the least powerful programming construct that still suffices. So the &quot;check list&quot; is:</source>
          <target state="translated">&lt;strong&gt;スタイルの注記&lt;/strong&gt;：コードを読みやすくするために、まだ十分ではない最も強力でないプログラミング構造を使用することをお勧めします。したがって、「チェックリスト」は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fe1515dd837d06ebdfb95963f4b433b9a9c3985a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + const name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] + const名。</target>
        </trans-unit>
        <trans-unit id="89fa1ce97e4b1a8bbc8a7bdf79f0c84b5531d6c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + enum type + enum field name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +列挙型+列挙フィールド名。</target>
        </trans-unit>
        <trans-unit id="44cc69c566e0009f6ccc0fbac4d3567a0268b727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + iterator name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +イテレーター名。</target>
        </trans-unit>
        <trans-unit id="821988216adbe7cd1954ec0da5648027ef8dc44d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + let name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +名前を許可します。</target>
        </trans-unit>
        <trans-unit id="57a25e461776b40d157a649de93257f5fe549d65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + macro name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +マクロ名。</target>
        </trans-unit>
        <trans-unit id="3166d2d68e6f9702d538e16e0e365a37f0f31329" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + method name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +メソッド名。</target>
        </trans-unit>
        <trans-unit id="061167cd91100dd105e9d11351199c7b83c16430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + name.</source>
          <target state="translated">&lt;strong&gt;3列目&lt;/strong&gt;：モジュール+ [nスコープのネスト] +名前。</target>
        </trans-unit>
        <trans-unit id="acf85825d2dfb7a2233737f8ada9679976415f1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + param name.</source>
          <target state="translated">&lt;strong&gt;3列目&lt;/strong&gt;：モジュール+ [nスコープのネスト] +パラメータ名。</target>
        </trans-unit>
        <trans-unit id="546e3a8202699c79b7b925592249d4072a1845aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + proc name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +プロシージャ名。</target>
        </trans-unit>
        <trans-unit id="e1aaee074e6af2e4ed1a60de85b378cc36322c99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + result.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +結果。</target>
        </trans-unit>
        <trans-unit id="ca9583e48baa25b1239a744bd75804685b9425dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + template name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +テンプレート名。</target>
        </trans-unit>
        <trans-unit id="e445dd6209bef0d057963888553bf05a22332bbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + type name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +タイプ名。</target>
        </trans-unit>
        <trans-unit id="0e96cb006b66e97d61d546d8e4a627270ae7af33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Third column&lt;/strong&gt;: module + [n scope nesting] + var name.</source>
          <target state="translated">&lt;strong&gt;3番目の列&lt;/strong&gt;：モジュール+ [nスコープのネスト] +変数名。</target>
        </trans-unit>
        <trans-unit id="b3006c2816bec11bab560e7a41a6685d7e93896b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This can introduce duplicate keys into the table!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これにより、重複するキーがテーブルに導入される可能性があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2af56b1d80809997309a7af75799485c7602c39f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function returns nil in case of failure.&lt;/strong&gt; To prevent unexpected behavior and ensure proper error handling, use &lt;a href=&quot;#openFileStream,string,FileMode,int&quot;&gt;openFileStream proc&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;この関数は、失敗した場合にnilを返します。&lt;/strong&gt;予期しない動作を防ぎ、適切なエラー処理を確実にするには、代わりに&lt;a href=&quot;#openFileStream,string,FileMode,int&quot;&gt;openFileStreamprocを&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="96622873fb587ed595611ae4d0e283ece6697a93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is deprecated and should not be used&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;これは非推奨であり、使用すべきではありません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="10a71a1eac5a42f1dd6af4ba8a70a197d215c43e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This is destructive! You must not modify `t` afterwards!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これは破壊的です！後で `t`を変更してはいけません！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a662d6054458a0060ff420609cf598e4d55cd58c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This proc is deprecated&lt;/strong&gt;, use this one instead:</source>
          <target state="translated">&lt;strong&gt;このプロシージャは非推奨です&lt;/strong&gt;。代わりにこれを使用してください。</target>
        </trans-unit>
        <trans-unit id="cf55f81e21c6bb396948994d75bed92009d6333c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This procedure is dangerous!&lt;/strong&gt; If one forgets to free the memory a leak occurs; if one tries to access freed memory (or just freeing it twice!) a core dump may happen or other memory may be corrupted.</source>
          <target state="translated">&lt;strong&gt;この手順は危険です！&lt;/strong&gt;メモリを解放するのを忘れると、リークが発生します。解放されたメモリにアクセスしようとすると（または2回だけ解放しようとすると）、コアダンプが発生したり、他のメモリが破損したりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="5a9df7eca11b12855add51f036ea9d3d1ea8ae1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage in JavaScript projects:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JavaScriptプロジェクトでの使用：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f768badd17da7a214c1ade1aa6c0fd2496dfda9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; If the process has not finished executing, this will forcibly terminate the process. Doing so may result in zombie processes and &lt;a href=&quot;http://stackoverflow.com/questions/27021641/how-to-fix-request-failed-on-channel-0&quot;&gt;pty leaks&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;プロセスの実行が終了していない場合、これによりプロセスが強制的に終了します。これを行うと、ゾンビプロセスと&lt;a href=&quot;http://stackoverflow.com/questions/27021641/how-to-fix-request-failed-on-channel-0&quot;&gt;ptyリーク&lt;/a&gt;が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="94d394e5f72cbfd85f56d413e8a616ed5c6c4fe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; This function uses &lt;code&gt;poEvalCommand&lt;/code&gt; by default for backwards compatibility. Make sure to pass options explicitly.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この関数は、下位互換性のためにデフォルトで &lt;code&gt;poEvalCommand&lt;/code&gt; を使用します。オプションを明示的に渡すようにしてください。</target>
        </trans-unit>
        <trans-unit id="90ebcd1c15404fdc059702927e729624fbd89690" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING:&lt;/strong&gt; This is destructive! Once sorted, you must not modify &lt;code&gt;t&lt;/code&gt; afterwards!</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;これは破壊的です！ソートしたら、後で &lt;code&gt;t&lt;/code&gt; を変更しないでください。</target>
        </trans-unit>
        <trans-unit id="214cc33166124094f55a1446237ae8c582fe5355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: Be careful when using &lt;code&gt;waitForExit&lt;/code&gt; for processes created without &lt;code&gt;poParentStreams&lt;/code&gt; because they may fill output buffers, causing deadlock.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：使用する場合は注意してください &lt;code&gt;waitForExit&lt;/code&gt; をせずに作成されたプロセスのための &lt;code&gt;poParentStreams&lt;/code&gt; デッドロックを引き起こし、彼らは出力バッファを埋める可能性があるため。</target>
        </trans-unit>
        <trans-unit id="ec82fc02e8902673947cd6ed288467c5cc50a706" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: The returned &lt;code&gt;FileHandle&lt;/code&gt; should not be closed manually as it is closed when closing the Process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：返された &lt;code&gt;FileHandle&lt;/code&gt; は、プロセス &lt;code&gt;p&lt;/code&gt; を閉じるときに閉じられるため、手動で閉じないでください。</target>
        </trans-unit>
        <trans-unit id="e6de0d179490809d7ea1f625bb02e6fd588f97e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: The returned &lt;code&gt;Stream&lt;/code&gt; should not be closed manually as it is closed when closing the Process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：返された &lt;code&gt;Stream&lt;/code&gt; は、プロセス &lt;code&gt;p&lt;/code&gt; を閉じるときに閉じられるため、手動で閉じないでください。</target>
        </trans-unit>
        <trans-unit id="e4316d6405c9f4c9d98f6e1f272b469fd25904ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;: Use it with caution. If &lt;code&gt;buf&lt;/code&gt; refers to GC'ed object, you must use GC_ref/GC_unref calls to avoid early freeing of the buffer.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：注意して使用してください。 &lt;code&gt;buf&lt;/code&gt; がGCされたオブジェクトを参照する場合、バッファの早期解放を回避するためにGC_ref / GC_unref呼び出しを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7f0c0c1f448cb428d097bb93a464a6218e766d86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warn&lt;/strong&gt; - impending problems that require some attention</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;-注意が必要な差し迫った問題</target>
        </trans-unit>
        <trans-unit id="251436bcf1a85c83d8711b39296fe259fc9d0256" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Warning:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f8f9514a22b55ff9c78136da9ef8a81f67b0108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If the process has not finished executing, this will forcibly terminate the process. Doing so may result in zombie processes and &lt;a href=&quot;http://stackoverflow.com/questions/27021641/how-to-fix-request-failed-on-channel-0&quot;&gt;pty leaks&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;プロセスの実行が終了していない場合、これはプロセスを強制終了します。これを行うと、ゾンビプロセスと&lt;a href=&quot;http://stackoverflow.com/questions/27021641/how-to-fix-request-failed-on-channel-0&quot;&gt;ptyリーク&lt;/a&gt;が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7648a978c3c5b08aa7a942fe439314fcbbd9e17c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; It's not recommended to use &lt;code&gt;between&lt;/code&gt; for &lt;code&gt;DateTime's&lt;/code&gt; in different &lt;code&gt;TimeZone's&lt;/code&gt;. &lt;code&gt;a + between(a, b) == b&lt;/code&gt; is only guaranteed when &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are in UTC.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;異なる &lt;code&gt;TimeZone's&lt;/code&gt; &lt;code&gt;DateTime's&lt;/code&gt; &lt;code&gt;between&lt;/code&gt; で使用することはお勧めしません。 &lt;code&gt;a + between(a, b) == b&lt;/code&gt; 場合にのみ保証されると &lt;code&gt;b&lt;/code&gt; が UTCです。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0a52c8fdc83d67244f36d1e45904b31b08be93b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; Since version 0.10.2 this module is deprecated. Use the &lt;a href=&quot;net&quot;&gt;net&lt;/a&gt; or the &lt;a href=&quot;nativesockets&quot;&gt;nativesockets&lt;/a&gt; module instead.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;バージョン0.10.2以降、このモジュールは非推奨になりました。代わりに、&lt;a href=&quot;net&quot;&gt;net&lt;/a&gt;または&lt;a href=&quot;nativesockets&quot;&gt;nativesockets&lt;/a&gt;モジュールを使用してください。</target>
        </trans-unit>
        <trans-unit id="9968b14e6044d19bea13d96a6048dbd5746bc726" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The &lt;code&gt;total&lt;/code&gt; reported by httpclient may be 0 in some cases.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;code&gt;total&lt;/code&gt; のHTTPClientによって報告されたが、いくつかのケースでは0かもしれません。</target>
        </trans-unit>
        <trans-unit id="24b0c00e568f6b8e8da0f3bc2db0c76c857a200b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The API of this module is unstable, and therefore is subject to change.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このモジュールのAPIは不安定であるため、変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="70b2c2817205cf64dbba280341fa333ac9b060f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The buffer &lt;code&gt;a&lt;/code&gt; must be pre-allocated. This can be done using, for example, &lt;code&gt;newString&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;バッファ &lt;code&gt;a&lt;/code&gt; は事前に割り当てる必要があります。これは、たとえば &lt;code&gt;newString&lt;/code&gt; を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="9d0af0517916216290aedd9e00253fb0aa629d1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The buffer &lt;em&gt;a&lt;/em&gt; must be pre-allocated. This can be done using, for example, &lt;code&gt;newString&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;バッファ&lt;em&gt;a&lt;/em&gt;は事前に割り当てる必要があります。これは、たとえば &lt;code&gt;newString&lt;/code&gt; を使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="0520baa64a72e7ee0281b0ddd067f506549b20a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The global list of handlers is a thread var, this means that the handlers must be re-added in each thread. &lt;strong&gt;Warning:&lt;/strong&gt; When logging on disk or console, only error and fatal messages are flushed out immediately. Use flushFile() where needed.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;ハンドラーのグローバルリストはスレッド変数です。つまり、ハンドラーは各スレッドに再度追加する必要があります。&lt;strong&gt;警告：&lt;/strong&gt;ディスクまたはコンソールにログオンすると、エラーと致命的なメッセージのみがすぐにフラッシュされます。必要に応じて、flushFile（）を使用します。</target>
        </trans-unit>
        <trans-unit id="f29b72a26be8d8706c4ec16fe1124964415b5b80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The global log filter is a thread-local variable. If logging is being performed in multiple threads, this proc should be called in each thread unless it is intended that different threads should log at different logging levels.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;グローバルログフィルターはスレッドローカル変数です。ロギングが複数のスレッドで実行されている場合、異なるスレッドが異なるロギングレベルでロギングすることを意図していない限り、このプロシージャは各スレッドで呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="d380c8f716c8c691b16583d7c78a4ee17fba7411" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The list of handlers is a thread-local variable. If the given handler will be used in multiple threads, this proc should be called in each of those threads.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;ハンドラーのリストはスレッドローカル変数です。指定されたハンドラーが複数のスレッドで使用される場合、このprocはそれらの各スレッドで呼び出される必要があります。</target>
        </trans-unit>
        <trans-unit id="1de5e055501cd9543ed70f0688cbf30ac70cdc1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This function does not yet have a buffered implementation, so when &lt;code&gt;socket&lt;/code&gt; is buffered the non-buffered implementation will be used. Therefore if &lt;code&gt;socket&lt;/code&gt; contains something in its buffer this function will make no effort to return it.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この関数にはまだバッファリングされた実装がないため、 &lt;code&gt;socket&lt;/code&gt; がバッファリングされると、バッファリングされていない実装が使用されます。したがって、 &lt;code&gt;socket&lt;/code&gt; バッファに何かが含まれている場合、この関数はそれを返そうとはしません。</target>
        </trans-unit>
        <trans-unit id="854f87e513637b6e9a5ac650c51cff41b8f768e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module is deprecated since version 0.10.2. Use the brand new &lt;a href=&quot;asyncdispatch&quot;&gt;asyncdispatch&lt;/a&gt; module together with the &lt;a href=&quot;asyncnet&quot;&gt;asyncnet&lt;/a&gt; module.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このモジュールはバージョン0.10.2以降非推奨です。ブランドの新しい使用&lt;a href=&quot;asyncdispatch&quot;&gt;asyncdispatchの&lt;/a&gt;と一緒にモジュールを&lt;a href=&quot;asyncnet&quot;&gt;asyncnetの&lt;/a&gt;モジュール。</target>
        </trans-unit>
        <trans-unit id="aa0b3c2a66d1cb7f1d4a063b94c4ce6ca1f2543b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module is deprecated since version 0.14.0.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このモジュールはバージョン0.14.0以降非推奨です。</target>
        </trans-unit>
        <trans-unit id="7eb0dfd155d4b6f3b53e214b0ecc3fdf13f08633" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module is deprecated, use the SSL procedures defined in the &lt;code&gt;net&lt;/code&gt; module instead.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このモジュールは非推奨です。代わりに &lt;code&gt;net&lt;/code&gt; モジュールで定義されたSSLプロシージャを使用してください。</target>
        </trans-unit>
        <trans-unit id="5c5666a07ce3875934c4c4fc973b2a781936f5f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This module only supports the old asynchronous interface. You may wish to use the &lt;a href=&quot;asynchttpserver&quot;&gt;asynchttpserver&lt;/a&gt; instead for web applications.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このモジュールは古い非同期インターフェースのみをサポートしています。Webアプリケーションの代わりに&lt;a href=&quot;asynchttpserver&quot;&gt;asynchttpserver&lt;/a&gt;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="5cb55c6cefeda87fc389ece105c077ef731ae16e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This procedure appears to be broken for SSL connections as of Nim v1.0.2. Consider using the other &lt;code&gt;connect&lt;/code&gt; procedure. See &lt;a href=&quot;https://github.com/nim-lang/Nim/issues/15215&quot;&gt;https://github.com/nim-lang/Nim/issues/15215&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;この手順は、Nimv1.0.2以降のSSL接続では壊れているようです。他の &lt;code&gt;connect&lt;/code&gt; 手順の使用を検討してください。詳細については、&lt;a href=&quot;https://github.com/nim-lang/Nim/issues/15215&quot;&gt;https：//github.com/nim-lang/Nim/issues/15215&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="53266ecbd11ce935a7868dc21f59beb46ccb3aaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; When using SSL with non-blocking sockets, it is best to use the acceptAddrSSL procedure as this procedure will most likely block.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;非ブロッキングソケットでSSLを使用する場合、acceptAddrSSLプロシージャを使用することをお勧めします。このプロシージャがブロックする可能性が最も高いためです。</target>
        </trans-unit>
        <trans-unit id="808a8a1028dc1fed134e205c55ec27d7dd5b23fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: &lt;code&gt;recvLine&lt;/code&gt; on unbuffered sockets assumes that the protocol uses &lt;code&gt;\r\L&lt;/code&gt; to delimit a new line.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：バッファなしソケットの &lt;code&gt;recvLine&lt;/code&gt; は、プロトコルが &lt;code&gt;\r\L&lt;/code&gt; を使用して新しい行を区切ることを前提としています。</target>
        </trans-unit>
        <trans-unit id="ac11ca7b54f8ac76331d539b39687d412032a370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: &lt;code&gt;recvLineInto&lt;/code&gt; on unbuffered sockets assumes that the protocol uses &lt;code&gt;\r\L&lt;/code&gt; to delimit a new line.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;recvLineInto&lt;/code&gt; れていないソケットのrecvLineIntoは、プロトコルが &lt;code&gt;\r\L&lt;/code&gt; を使用して新しい行を区切ることを前提としています。</target>
        </trans-unit>
        <trans-unit id="5d163b20a95cadf02bed8abe7ed680f87b2b48bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Be careful when using waitForExit for processes created without poParentStreams because they may fill output buffers, causing deadlock.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：poParentStreamsなしで作成されたプロセスにwaitForExitを使用する場合は、出力バッファがいっぱいになり、デッドロックが発生する可能性があるため、注意してください。</target>
        </trans-unit>
        <trans-unit id="0163b79bd484845ef77cdbb23264a20232b50266" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: If &lt;code&gt;state&lt;/code&gt; is set incorrectly the resulting &lt;code&gt;AsyncSocket&lt;/code&gt; object may not work properly.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;state&lt;/code&gt; が正しく設定されていない場合、結果の &lt;code&gt;AsyncSocket&lt;/code&gt; オブジェクトが正しく機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="a95d9701c19c6c0c221e25db304c7abf3d95c719" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Modifying the directory structure while the iterator is traversing may result in undefined behavior!</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：イテレータのトラバース中にディレクトリ構造を変更すると、未定義の動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6f6766ee200b64744878c681dde8b968c6f670b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Only the &lt;code&gt;SafeDisconn&lt;/code&gt; flag is currently supported.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;SafeDisconn&lt;/code&gt; フラグのみが現在サポートされています。</target>
        </trans-unit>
        <trans-unit id="5179a287236e2707d51c8ae92986184ef63e00df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Only use this if you know what you are doing.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：何をしているのかわかっている場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="054c5e069a1dfb7566a7270fedaaf23823866854" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Ordinary application code should never set this hook! You better know what you do when setting this.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：通常のアプリケーションコードでは、このフックを設定しないでください。これを設定するときは、自分が何をするかをよく知っています。</target>
        </trans-unit>
        <trans-unit id="b8ef80f1f143a1f7de2004bb4e9cee1fed78e787" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Some OS's (such as Microsoft Windows) restrict the creation of symlinks to root users (administrators).</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：一部のOS（Microsoft Windowsなど）では、シンボリックリンクの作成をrootユーザー（管理者）に制限しています。</target>
        </trans-unit>
        <trans-unit id="1f61c1a4fea430f13537ed29d0765d587962a8f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Some OS's restrict the creation of hard links to root users (administrators).</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：一部のOSでは、ハードリンクの作成をrootユーザー（管理者）に制限しています。</target>
        </trans-unit>
        <trans-unit id="f9012f1b5937f6027293c08f92583d61921af08c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;code&gt;Peek&lt;/code&gt; flag is not yet implemented.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;Peek&lt;/code&gt; フラグはまだ実装されていません。</target>
        </trans-unit>
        <trans-unit id="e86c259d83ff7290e4d751971a6fa6a8870f2e71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;code&gt;Peek&lt;/code&gt; socket flag is not supported on Windows.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;Peek&lt;/code&gt; ソケットフラグはWindowsではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b0d46006d11f4bceceb4d4e08b148768200fa533" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;code&gt;tmpl&lt;/code&gt; argument is written to by &lt;code&gt;mkstemp&lt;/code&gt; and thus can't be a string literal. If in doubt make a copy of the cstring before passing it in.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;tmpl&lt;/code&gt; 引数は &lt;code&gt;mkstemp&lt;/code&gt; によって書き込まれるため、文字列リテラルにすることはできません。疑わしい場合は、渡す前にcstringのコピーを作成してください。</target>
        </trans-unit>
        <trans-unit id="eb7cc1052b9ce8bdf39d06ce2f6b9a8915a89398" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;code&gt;tmpl&lt;/code&gt; argument is written to by &lt;code&gt;mkstemps&lt;/code&gt; and thus can't be a string literal. If in doubt make a copy of the cstring before passing it in.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;： &lt;code&gt;tmpl&lt;/code&gt; 引数は &lt;code&gt;mkstemps&lt;/code&gt; によって書き込まれるため、文字列リテラルにすることはできません。疑わしい場合は、渡す前にcstringのコピーを作成してください。</target>
        </trans-unit>
        <trans-unit id="67b4583abc34f87fcf6eff4869eef2bfd28629d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The &lt;em&gt;tmpl&lt;/em&gt; argument is written to by &lt;em&gt;mkstemp&lt;/em&gt; and thus can't be a string literal. If in doubt copy the string before passing it.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：&lt;em&gt;tmpl&lt;/em&gt;引数は&lt;em&gt;mkstemp&lt;/em&gt;によって書き込まれるため、文字列リテラルにすることはできません。疑わしい場合は、渡す前に文字列をコピーします。</target>
        </trans-unit>
        <trans-unit id="4f1192c1f109469e4dd7487e335279c8c6787f60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The behaviour of this procedure varies between Windows and POSIX systems. On Windows some OS calls can reset the error code to &lt;code&gt;0&lt;/code&gt; causing this procedure to return &lt;code&gt;0&lt;/code&gt;. It is therefore advised to call this procedure immediately after an OS call fails. On POSIX systems this is not a problem.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：この手順の動作は、WindowsシステムとPOSIXシステムで異なります。Windowsでは、一部のOS呼び出しでエラーコードが &lt;code&gt;0&lt;/code&gt; にリセットされ、このプロシージャが &lt;code&gt;0&lt;/code&gt; を返すことがあります。したがって、OSの呼び出しが失敗した直後に、このプロシージャを呼び出すことをお勧めします。POSIXシステムでは、これは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="eae8834fd1ff75f9c078051184e01727261e31cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The resulting &lt;code&gt;ptr AddrInfo&lt;/code&gt; must be freed using &lt;code&gt;freeAddrInfo&lt;/code&gt;!</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：結果の &lt;code&gt;ptr AddrInfo&lt;/code&gt; は &lt;code&gt;freeAddrInfo&lt;/code&gt; を使用して解放する必要があります！</target>
        </trans-unit>
        <trans-unit id="9e788c203930a853b492baa9fb790e0baaa6f689" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The returned &lt;em&gt;FileHandle&lt;/em&gt; should not be closed manually as it is closed when closing the Process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：返された&lt;em&gt;FileHandle&lt;/em&gt;は、Process &lt;code&gt;p&lt;/code&gt; を閉じるときに閉じられるため、手動で閉じないでください。</target>
        </trans-unit>
        <trans-unit id="35816baa23c24b5f9e80530b286a99de07763458" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: The returned &lt;em&gt;Stream&lt;/em&gt; should not be closed manually as it is closed when closing the Process &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：返された&lt;em&gt;ストリーム&lt;/em&gt;は、プロセス &lt;code&gt;p&lt;/code&gt; を閉じるときに閉じられるため、手動で閉じないでください。</target>
        </trans-unit>
        <trans-unit id="070d8f77f83eff23785cd22229e7c7593a9f015a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This assumes that lines are delimited by &lt;code&gt;\r\L&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：これは、行が &lt;code&gt;\r\L&lt;/code&gt; 区切られていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="a9df6a23fa581b51ba2e0e996ce854f48568ec52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This function may give unexpected or completely wrong results on Windows.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：この関数は、Windowsで予期しない結果または完全に誤った結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="016fcff66b49f260c1c428fc4a770e9ba587d905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This module uses &lt;code&gt;immediate&lt;/code&gt; macros which are known to cause problems. Do yourself a favor and import the module as &lt;code&gt;from htmlgen import nil&lt;/code&gt; and then fully qualify the macros.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：このモジュールは、問題を引き起こすことがわかっている &lt;code&gt;immediate&lt;/code&gt; マクロを使用します。自分で &lt;code&gt;from htmlgen import nil&lt;/code&gt; て、htmlgen import nilからモジュールをインポートして、マクロを完全に修飾します。</target>
        </trans-unit>
        <trans-unit id="13fc508dd2164cb6be6b2b2f5043fed79efd1dd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: This really transforms the 'for' and unrolls the loop. The current implementation also has a bug that affects symbol binding in the loop body.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：これは実際に「for」を変換し、ループを展開します。現在の実装には、ループ本体のシンボルバインディングに影響するバグもあります。</target>
        </trans-unit>
        <trans-unit id="06b71636d61a389fc8acb40152f2835585e38044" translate="yes" xml:space="preserve">
          <source>A &quot;move&quot; can be regarded as an optimized copy operation. If the source of the copy operation is not used afterward, the copy can be replaced by a move. This document uses the notation &lt;code&gt;lastReadOf(x)&lt;/code&gt; to describe that &lt;code&gt;x&lt;/code&gt; is not used afterwards. This property is computed by a static control flow analysis but can also be enforced by using &lt;code&gt;system.move&lt;/code&gt; explicitly.</source>
          <target state="translated">「移動」は、最適化されたコピー操作と見なすことができます。後でコピー操作のソースを使用しない場合は、コピーを移動で置き換えることができます。このドキュメントでは、 &lt;code&gt;lastReadOf(x)&lt;/code&gt; という表記を使用して、後で &lt;code&gt;x&lt;/code&gt; が使用されないことを説明しています。このプロパティは、静的制御フロー分析によって計算されますが、 &lt;code&gt;system.move&lt;/code&gt; を明示的に使用して適用することもできます。</target>
        </trans-unit>
        <trans-unit id="1ee8bac63489b4b65f1d77d36e0156115bbf2067" translate="yes" xml:space="preserve">
          <source>A &quot;word&quot; character is an underscore or any character less than 256 that is a letter or digit. The definition of letters and digits is controlled by PCRE's low-valued character tables, and may vary if locale-specific matching is taking place (see &quot;Locale support&quot; in the pcreapi page). For example, in the &quot;fr_FR&quot; (French) locale, some character codes greater than 128 are used for accented letters, and these are matched by &lt;code&gt;\w&lt;/code&gt;.</source>
          <target state="translated">「単語」文字は、アンダースコアまたは256未満の文字または数字の任意の文字です。文字と数字の定義はPCREの低値文字テーブルによって制御され、ロケール固有のマッチングが行われている場合は異なる場合があります（pcreapiページの「ロケールサポート」を参照）。たとえば、 &quot;fr_FR&quot;（フランス語）ロケールでは、128より大きい文字コードのいくつかがアクセント付き文字に使用され、これらは &lt;code&gt;\w&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="6f72d8972b6598297117d18b7db8ef83c968a530" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;$&lt;/code&gt; proc is defined for cstrings that returns a string. Thus to get a nim string from a cstring:</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; のPROCは、文字列を返すcstringsのために定義されています。したがって、cstringからnim文字列を取得するには：</target>
        </trans-unit>
        <trans-unit id="6f987a9c7bda1ba368e820346dd66c8e5c89eaa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;=destroy&lt;/code&gt; hook frees the object's associated memory and releases other associated resources. Variables are destroyed via this hook when they go out of scope or when the routine they were declared in is about to return.</source>
          <target state="translated">&lt;code&gt;=destroy&lt;/code&gt; オブジェクトの関連するメモリを解放他の関連するリソースを解放フックを。変数は、スコープ外になるか、宣言されたルーチンが返されようとしているときに、このフックを介して破棄されます。</target>
        </trans-unit>
        <trans-unit id="c295c049a3b9376266f8a5946db064e42c05591f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;=sink&lt;/code&gt; hook moves an object around, the resources are stolen from the source and passed to the destination. It is ensured that the source's destructor does not free the resources afterward by setting the object to its default value (the value the object's state started in). Setting an object &lt;code&gt;x&lt;/code&gt; back to its default value is written as &lt;code&gt;wasMoved(x)&lt;/code&gt;. When not provided the compiler is using a combination of &lt;code&gt;=destroy&lt;/code&gt; and &lt;code&gt;copyMem&lt;/code&gt; instead. This is efficient hence users rarely need to implement their own &lt;code&gt;=sink&lt;/code&gt; operator, it is enough to provide &lt;code&gt;=destroy&lt;/code&gt; and &lt;code&gt;=copy&lt;/code&gt;, compiler will take care of the rest.</source>
          <target state="translated">A &lt;code&gt;=sink&lt;/code&gt; フックの周りオブジェクトを移動し、リソースがソースから盗まれ、先に渡されます。オブジェクトをデフォルト値（オブジェクトの状態が開始された値）に設定することにより、ソースのデストラクタが後でリソースを解放しないことが保証されます。オブジェクト &lt;code&gt;x&lt;/code&gt; をデフォルト値に戻すと、 &lt;code&gt;wasMoved(x)&lt;/code&gt; と記述されます。提供されていない場合、コンパイラーは代わりに &lt;code&gt;=destroy&lt;/code&gt; と &lt;code&gt;copyMem&lt;/code&gt; の組み合わせを使用します。これは効率的であるため、ユーザーが独自の &lt;code&gt;=sink&lt;/code&gt; 演算子を実装する必要はほとんどありません。 &lt;code&gt;=destroy&lt;/code&gt; と &lt;code&gt;=copy&lt;/code&gt; を提供するだけで十分であり、残りはコンパイラが処理します。</target>
        </trans-unit>
        <trans-unit id="ade5cfc4633d231cd947fd6c046bf9c49c277b02" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a duration of time stored as seconds and nanoseconds. A &lt;code&gt;Duration&lt;/code&gt; is always fully normalized, so &lt;code&gt;initDuration(hours = 1)&lt;/code&gt; and &lt;code&gt;initDuration(minutes = 60)&lt;/code&gt; are equivalent.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; 秒とナノ秒として格納された時間の長さを表しています。 &lt;code&gt;Duration&lt;/code&gt; 常に完全に正規化されるので、 &lt;code&gt;initDuration(hours = 1)&lt;/code&gt; と &lt;code&gt;initDuration(minutes = 60)&lt;/code&gt; 等価です。</target>
        </trans-unit>
        <trans-unit id="aaba2403682a17469ecab3c6f2cc502e7be26d2b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;HttpRequestError&lt;/code&gt; will be raised if the server responds with a client error (status code 4xx) or a server error (status code 5xx).</source>
          <target state="translated">A &lt;code&gt;HttpRequestError&lt;/code&gt; クライアントエラー（ステータスコードの4xx）を使用してサーバ応答やサーバーエラー（ステータスコード5xxの）場合に発生します。</target>
        </trans-unit>
        <trans-unit id="9bb8bd75e1a9a8ff5a43663da64ab547afc1c568" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Source Code Filter (SCF)&lt;/code&gt; transforms the input character stream to an in-memory output stream before parsing. A filter can be used to provide templating systems or preprocessors.</source>
          <target state="translated">A &lt;code&gt;Source Code Filter (SCF)&lt;/code&gt; 解析する前に、メモリ内の出力ストリームに入力された文字ストリームを変換します。フィルタを使用して、テンプレートシステムまたはプリプロセッサを提供できます。</target>
        </trans-unit>
        <trans-unit id="42f2546ed8f58cd59935336003ee6db78fbf89d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeInterval&lt;/code&gt; represents an amount of time expressed in calendar units, for example &quot;1 year and 2 days&quot;. Since some units cannot be normalized (the length of a year is different for leap years for example), the &lt;code&gt;TimeInterval&lt;/code&gt; type uses separate fields for every unit. The &lt;code&gt;TimeInterval&lt;/code&gt;'s returned from this module generally don't normalize &lt;strong&gt;anything&lt;/strong&gt;, so even units that could be normalized (like seconds, milliseconds and so on) are left untouched.</source>
          <target state="translated">A &lt;code&gt;TimeInterval&lt;/code&gt; 「1年及び2日」とは、例えば、カレンダー単位で表した時間の量を表します。一部の単位は正規化できないため（たとえば、うるう年では1年の長さが異なります）、 &lt;code&gt;TimeInterval&lt;/code&gt; タイプは単位ごとに個別のフィールドを使用します。 &lt;code&gt;TimeInterval&lt;/code&gt; のは、一般的に正規化しません。このモジュールから返された&lt;strong&gt;ものを&lt;/strong&gt;そう（秒、ミリ秒などのような）標準化することができたとしてもユニットが放置されています、。</target>
        </trans-unit>
        <trans-unit id="d81d68641d8bf3ceba1aef0cf067b5ab815956a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ValueError&lt;/code&gt; exception will be raised if the value is not an integer.</source>
          <target state="translated">&lt;code&gt;ValueError&lt;/code&gt; の値が整数でない場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="ae6545e69126352cc398c36e028a5f279a82dab9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;block expression&lt;/code&gt; is almost like a block statement, but it is an expression that uses the last expression under the block as the value. It is similar to the statement list expression, but the statement list expression does not open a new block scope.</source>
          <target state="translated">&lt;code&gt;block expression&lt;/code&gt; 、ほぼブロック文のようなものですが、それは価値としてブロックの下で最後の式を使用する式です。これはステートメントリスト式に似ていますが、ステートメントリスト式は新しいブロックスコープを開きません。</target>
        </trans-unit>
        <trans-unit id="49a6495aba25fcc0345009a64738a98f0c760abf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;block&lt;/code&gt; doesn't need an name, in which case &lt;code&gt;nnkEmpty&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;block&lt;/code&gt; その場合には、名前を必要としない &lt;code&gt;nnkEmpty&lt;/code&gt; が使用されています。</target>
        </trans-unit>
        <trans-unit id="bde4d27b77941b8a2e8d7b668c0d8b482525e40c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;closure&lt;/code&gt; proc var can call ordinary procs of the default Nim calling convention. But not the other way round! A closure is implemented as a &lt;code&gt;tuple[prc, env]&lt;/code&gt;. &lt;code&gt;env&lt;/code&gt; can be nil implying a call without a closure. This means that a call through a closure generates an &lt;code&gt;if&lt;/code&gt; but the interoperability is worth the cost of the &lt;code&gt;if&lt;/code&gt;. Thunk generation would be possible too, but it's slightly more effort to implement.</source>
          <target state="translated">&lt;code&gt;closure&lt;/code&gt; のproc VARは、デフォルトの呼び出し規約ニムの通常のprocsのを呼び出すことができます。しかし、逆ではありません！クロージャーは &lt;code&gt;tuple[prc, env]&lt;/code&gt; として実装されます。 &lt;code&gt;env&lt;/code&gt; はnilにすることができ、クロージャーなしの呼び出しを意味します。つまり、クロージャーを介した呼び出しは &lt;code&gt;if&lt;/code&gt; を生成しますが、相互運用性は &lt;code&gt;if&lt;/code&gt; のコストに見合う価値があります。サンクの生成も可能ですが、実装するのは少し手間がかかります。</target>
        </trans-unit>
        <trans-unit id="46ca6bf4504c12b38f73b70158bd4cc5686ceec6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;continue&lt;/code&gt; statement leads to the immediate next iteration of the surrounding loop construct. It is only allowed within a loop. A continue statement is syntactic sugar for a nested block:</source>
          <target state="translated">Aは &lt;code&gt;continue&lt;/code&gt; 、周囲のループ構造のすぐ次の反復に文のリードを。ループ内でのみ許可されます。continueステートメントは、ネストされたブロックの構文糖衣です：</target>
        </trans-unit>
        <trans-unit id="c715fe380645376748f587a6b825be1c5374aad4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;distinct&lt;/code&gt; type is a new type derived from a &lt;span id=&quot;base-type_1&quot;&gt;base type&lt;/span&gt; that is incompatible with its base type. In particular, it is an essential property of a distinct type that it &lt;strong&gt;does not&lt;/strong&gt; imply a subtype relation between it and its base type. Explicit type conversions from a distinct type to its base type and vice versa are allowed. See also &lt;code&gt;distinctBase&lt;/code&gt; to get the reverse operation.</source>
          <target state="translated">&lt;code&gt;distinct&lt;/code&gt; タイプから派生した新しいタイプである&lt;span id=&quot;base-type_1&quot;&gt;基本型&lt;/span&gt;のベース型と互換性がありません。特に、それがその基本型との間のサブタイプ関係を意味&lt;strong&gt;しない&lt;/strong&gt;ことは、別個の型の本質的な特性です。異なる型からその基本型への、またはその逆の明示的な型変換が許可されます。逆の操作を取得するには、 &lt;code&gt;distinctBase&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="fa532fc8ce7dbe2864f24cd2a27ac73e6fc36afd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;distinct&lt;/code&gt; type is new type derived from a &lt;span id=&quot;base-type_1&quot;&gt;base type&lt;/span&gt; that is incompatible with its base type. In particular, it is an essential property of a distinct type that it &lt;strong&gt;does not&lt;/strong&gt; imply a subtype relation between it and its base type. Explicit type conversions from a distinct type to its base type and vice versa are allowed. See also &lt;code&gt;distinctBase&lt;/code&gt; to get the reverse operation.</source>
          <target state="translated">&lt;code&gt;distinct&lt;/code&gt; タイプから派生した新しいタイプである&lt;span id=&quot;base-type_1&quot;&gt;基本型&lt;/span&gt;のベース型と互換性がありません。特に、それはそれとその基本型との間のサブタイプ関係を意味&lt;strong&gt;しない&lt;/strong&gt;という、特殊型の本質的な特性です。特殊タイプからその基本タイプへの明示的なタイプ変換、およびその逆も可能です。逆の操作を取得するには、 &lt;code&gt;distinctBase&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e436402133516571641a8daf812bf61340c32403" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;flowVar&lt;/code&gt; only supports one call to &lt;code&gt;blockUntilAny&lt;/code&gt; at the same time. That means if you &lt;code&gt;blockUntilAny([a,b])&lt;/code&gt; and &lt;code&gt;blockUntilAny([b,c])&lt;/code&gt; the second call will only block until &lt;code&gt;c&lt;/code&gt;. If there is no &lt;code&gt;flowVar&lt;/code&gt; left to be able to wait on, -1 is returned.</source>
          <target state="translated">A &lt;code&gt;flowVar&lt;/code&gt; は唯一の1つの呼び出しをサポート &lt;code&gt;blockUntilAny&lt;/code&gt; を同時に。つまり、 &lt;code&gt;blockUntilAny([a,b])&lt;/code&gt; と &lt;code&gt;blockUntilAny([b,c])&lt;/code&gt; すると、2番目の呼び出しは &lt;code&gt;c&lt;/code&gt; までしかブロックされません。待機できる &lt;code&gt;flowVar&lt;/code&gt; が残っていない場合は、-1が返されます。</target>
        </trans-unit>
        <trans-unit id="fec0b8e4f99548ff52eae3d0e8ec4be16fcde6a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;let&lt;/code&gt; statement declares new local and global &lt;span id=&quot;single-assignment_1&quot;&gt;single assignment&lt;/span&gt; variables and binds a value to them. The syntax is the same as that of the &lt;code&gt;var&lt;/code&gt; statement, except that the keyword &lt;code&gt;var&lt;/code&gt; is replaced by the keyword &lt;code&gt;let&lt;/code&gt;. Let variables are not l-values and can thus not be passed to &lt;code&gt;var&lt;/code&gt; parameters nor can their address be taken. They cannot be assigned new values.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 文は、新しいローカルとグローバル宣言する&lt;span id=&quot;single-assignment_1&quot;&gt;単一代入&lt;/span&gt;変数を、それらに値をバインドします。構文は &lt;code&gt;var&lt;/code&gt; ステートメントの構文と同じですが、キーワード &lt;code&gt;var&lt;/code&gt; がキーワード &lt;code&gt;let&lt;/code&gt; に置き換えられています。変数はl値ではないため、 &lt;code&gt;var&lt;/code&gt; パラメータに渡すことも、アドレスを取得することもできません。新しい値を割り当てることはできません。</target>
        </trans-unit>
        <trans-unit id="8fe78b3a2821fa1451c04e1ee9b03eb161700c9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;raises&lt;/code&gt; list can also be attached to a proc type. This affects type compatibility:</source>
          <target state="translated">&lt;code&gt;raises&lt;/code&gt; リストは、プロシージャ・タイプに取り付けることができます。これは型の互換性に影響します：</target>
        </trans-unit>
        <trans-unit id="c8cb08453579d0f15d45b19ab781ad1eab51f587" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;varargs&lt;/code&gt; parameter is an openarray parameter that additionally allows to pass a variable number of arguments to a procedure. The compiler converts the list of arguments to an array implicitly:</source>
          <target state="translated">Aは、 &lt;code&gt;varargs&lt;/code&gt; パラメータがさらにプロシージャに可変数の引数を渡すことができることopenarrayパラメータです。コンパイラーは、引数のリストを暗黙的に配列に変換します。</target>
        </trans-unit>
        <trans-unit id="9932ed67f0c5e1f713b0339fd155b7567d8b4c9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;varargs&lt;/code&gt; parameter is like an openarray parameter. However, it is also a means to implement passing a variable number of arguments to a procedure. The compiler converts the list of arguments to an array automatically:</source>
          <target state="translated">Aは &lt;code&gt;varargs&lt;/code&gt; パラメータがopenarrayパラメータのようなものです。ただし、プロシージャに可変数の引数を渡すことを実装する手段でもあります。コンパイラーは、引数のリストを自動的に配列に変換します。</target>
        </trans-unit>
        <trans-unit id="e982b06375e4d6cb9864cbab229ee93da8102df8" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;$&lt;/em&gt; proc is defined for cstrings that returns a string. Thus to get a nim string from a cstring:</source>
          <target state="translated">&lt;em&gt;$の&lt;/em&gt; PROCは、文字列を返すcstringsのために定義されています。したがって、cstringからnim文字列を取得するには：</target>
        </trans-unit>
        <trans-unit id="4924981c6cf86467817a6848ae253feb1dd3d357" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Source Code Filter&lt;/em&gt; transforms the input character stream to an in-memory output stream before parsing. A filter can be used to provide templating systems or preprocessors.</source>
          <target state="translated">A &lt;em&gt;ソースコードフィルターは、&lt;/em&gt;解析する前に、メモリ内の出力ストリームに入力された文字ストリームを変換します。フィルターを使用して、テンプレートシステムまたはプリプロセッサを提供できます。</target>
        </trans-unit>
        <trans-unit id="ffbb84a506b05cba8d617634fff9481c23abd0eb" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutable&lt;/em&gt; view type is a type that is or contains a &lt;code&gt;var T&lt;/code&gt; type. An &lt;em&gt;immutable&lt;/em&gt; view type is a view type that is not a mutable view type.</source>
          <target state="translated">&lt;em&gt;変更可能な&lt;/em&gt;ビュータイプであるか、または含まれているタイプで &lt;code&gt;var T&lt;/code&gt; タイプを。&lt;em&gt;不変の&lt;/em&gt;ビュータイプは変更可能ビュータイプではありませんビュータイプです。</target>
        </trans-unit>
        <trans-unit id="787f1149d9267dbcf887509536779010033aad01" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;subex&lt;/em&gt; (&lt;em&gt;Substitution Expression&lt;/em&gt;) represents an advanced string substitution. In contrast to a &lt;span id=&quot;regex_1&quot;&gt;regex&lt;/span&gt; which deals with string analysis, a &lt;em&gt;subex&lt;/em&gt; deals with string synthesis.</source>
          <target state="translated">&lt;em&gt;subex&lt;/em&gt;（&lt;em&gt;置換式は&lt;/em&gt;）高度な文字列置換を表します。文字列分析を扱う&lt;span id=&quot;regex_1&quot;&gt;正規表現&lt;/span&gt;とは対照的に、&lt;em&gt;subex&lt;/em&gt;は文字列合成を扱います。</target>
        </trans-unit>
        <trans-unit id="4f993e9d9aed0b9d20403070d843afd35df22c0c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;view&lt;/em&gt; is a symbol (a let, var, const, etc.) that has a view type.</source>
          <target state="translated">&lt;em&gt;ビューは、&lt;/em&gt;ビュータイプを有するシンボル（LET、VAR、CONST、等）です。</target>
        </trans-unit>
        <trans-unit id="889eb097f34d2cb2326af79e37dd19352cd4b767" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;checked-runtime-error_1&quot;&gt;checked runtime error&lt;/span&gt; is an error that the implementation detects and reports at runtime. The method for reporting such errors is via &lt;em&gt;raising exceptions&lt;/em&gt; or &lt;em&gt;dying with a fatal error&lt;/em&gt;. However, the implementation provides a means to disable these runtime checks. See the section &lt;a href=&quot;#pragmas&quot;&gt;pragmas&lt;/a&gt; for details.</source>
          <target state="translated">Aは&lt;span id=&quot;checked-runtime-error_1&quot;&gt;、ランタイムエラーが確認され&lt;/span&gt;、実行時に実装を検出して報告するエラーです。このようなエラーを報告する方法は、&lt;em&gt;例外を発生させる&lt;/em&gt;か&lt;em&gt;、致命的なエラーで死ぬこと&lt;/em&gt;です。ただし、実装はこれらの実行時チェックを無効にする手段を提供します。詳細については、セクション&lt;a href=&quot;#pragmas&quot;&gt;プラグマ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3632d0ab374d6b5b4b41b8c40814ec08f6ffd800" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;constant-expression_1&quot;&gt;constant expression&lt;/span&gt; is an expression whose value can be computed during a semantic analysis of the code in which it appears. It is never an l-value and never has side effects. Constant expressions are not limited to the capabilities of semantic analysis, such as constant folding; they can use all Nim language features that are supported for compile-time execution. Since constant expressions can be used as an input to semantic analysis (such as for defining array bounds), this flexibility requires the compiler to interleave semantic analysis and compile-time code execution.</source>
          <target state="translated">&lt;span id=&quot;constant-expression_1&quot;&gt;定数式は、&lt;/span&gt;その値が表示されるコードの意味解析中に計算することができる表現です。これは決してl値ではなく、副作用もありません。定数式は、定数畳み込みなどのセマンティック分析の機能に限定されません。コンパイル時の実行でサポートされているすべてのNim言語機能を使用できます。定数式はセマンティック分析への入力として使用できるため（配列境界の定義など）、この柔軟性により、コンパイラーはセマンティック分析とコンパイル時のコード実行をインターリーブする必要があります。</target>
        </trans-unit>
        <trans-unit id="d97460e671a1b963a40ec5d11fe647ad12dd7e11" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;constant_1&quot;&gt;constant&lt;/span&gt; is a symbol that is bound to the value of a constant expression. Constant expressions are restricted to depend only on the following categories of values and operations, because these are either built into the language or declared and evaluated before semantic analysis of the constant expression:</source>
          <target state="translated">&lt;span id=&quot;constant_1&quot;&gt;定数は&lt;/span&gt;定数式の値にバインドされているシンボルです。定数式は、言語に組み込まれているか、定数式のセマンティック分析の前に宣言および評価されるため、次のカテゴリの値と演算のみに依存するように制限されています。</target>
        </trans-unit>
        <trans-unit id="31c99118ea561948c45f870ebd2c2cce4b7b646d" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;guard_1&quot;&gt;guard&lt;/span&gt; annotation is introduced to prevent data races.</source>
          <target state="translated">&lt;span id=&quot;guard_1&quot;&gt;ガード&lt;/span&gt;注釈は、データ競合を防ぐために導入されます。</target>
        </trans-unit>
        <trans-unit id="386e659d1429b589f185720a9d5bf0ba95205db0" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;narrowing-type-conversion_1&quot;&gt;narrowing type conversion&lt;/span&gt; converts a larger to a smaller type (for example &lt;code&gt;int32 -&amp;gt; int16&lt;/code&gt;. A &lt;span id=&quot;widening-type-conversion_1&quot;&gt;widening type conversion&lt;/span&gt; converts a smaller type to a larger type (for example &lt;code&gt;int16 -&amp;gt; int32&lt;/code&gt;). In Nim only widening type conversions are &lt;em&gt;implicit&lt;/em&gt;:</source>
          <target state="translated">&lt;span id=&quot;narrowing-type-conversion_1&quot;&gt;狭小型変換は、&lt;/span&gt;小さいタイプ（例えばに対してより大きな変換 &lt;code&gt;int32 -&amp;gt; int16&lt;/code&gt; 。A &lt;span id=&quot;widening-type-conversion_1&quot;&gt;拡大型変換は、&lt;/span&gt;例えば、より大きなタイプ（に小さなタイプに変換 &lt;code&gt;int16 -&amp;gt; int32&lt;/code&gt; 。）でニムのみ型変換を広げるである&lt;em&gt;暗黙&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3955b81b785f4e1f5618c3fd25368b3b2f30c5e6" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;panic_1&quot;&gt;panic&lt;/span&gt; is an error that the implementation detects and reports at runtime. The method for reporting such errors is via &lt;em&gt;raising exceptions&lt;/em&gt; or &lt;em&gt;dying with a fatal error&lt;/em&gt;. However, the implementation provides a means to disable these &lt;span id=&quot;runtime-checks_1&quot;&gt;runtime checks&lt;/span&gt;. See the section &lt;a href=&quot;#pragmas&quot;&gt;pragmas&lt;/a&gt; for details.</source>
          <target state="translated">&lt;span id=&quot;panic_1&quot;&gt;パニックは、&lt;/span&gt;実装が検出され、実行時にレポートするエラーです。このようなエラーを報告する方法は、&lt;em&gt;例外を発生させる&lt;/em&gt;か&lt;em&gt;、致命的なエラーで死ぬこと&lt;/em&gt;です。ただし、実装はこれらの&lt;span id=&quot;runtime-checks_1&quot;&gt;ランタイムチェック&lt;/span&gt;を無効にする手段を提供し&lt;span id=&quot;runtime-checks_1&quot;&gt;ます&lt;/span&gt;。詳細については、セクション&lt;a href=&quot;#pragmas&quot;&gt;プラグマ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="387048b351545e7cdb57e945c46d2fba04806529" translate="yes" xml:space="preserve">
          <source>A &lt;span id=&quot;static-error_1&quot;&gt;static error&lt;/span&gt; is an error that the implementation detects before program execution. Unless explicitly classified, an error is a static error.</source>
          <target state="translated">&lt;span id=&quot;static-error_1&quot;&gt;静的エラーは、&lt;/span&gt;実装は、プログラムの実行前に検出したことをエラーです。明確に分類されていない限り、エラーは静的エラーです。</target>
        </trans-unit>
        <trans-unit id="130e98a36d1ad0d5fa779c624d02b3795704ff33" translate="yes" xml:space="preserve">
          <source>A Distinct type allows for the creation of new type that &quot;does not imply a subtype relationship between it and its base type&quot;. You must &lt;strong&gt;explicitly&lt;/strong&gt; define all behaviour for the distinct type. To help with this, both the distinct type and its base type can cast from one type to the other. Examples are provided in the &lt;a href=&quot;manual#types-distinct-type&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">Distinct型は、「その型とその基本型の間のサブタイプ関係を意味しない」新しい型の作成を可能にします。特殊タイプのすべての動作を&lt;strong&gt;明示的に&lt;/strong&gt;定義する必要があります。これを支援するために、特殊タイプとその基本タイプの両方を、あるタイプから別のタイプにキャストできます。例は&lt;a href=&quot;manual#types-distinct-type&quot;&gt;マニュアルに記載&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="79b065193cd9e9953658e8235e333843b91d5cf1" translate="yes" xml:space="preserve">
          <source>A Nim &lt;code&gt;string&lt;/code&gt; is implicitly convertible to &lt;code&gt;cstring&lt;/code&gt; for convenience. If a Nim string is passed to a C-style variadic proc, it is implicitly converted to &lt;code&gt;cstring&lt;/code&gt; too:</source>
          <target state="translated">Nim &lt;code&gt;string&lt;/code&gt; は、便宜上、暗黙的に &lt;code&gt;cstring&lt;/code&gt; に変換できます。Nim文字列がCスタイルの可変長プロシージャに渡されると、それも暗黙的に &lt;code&gt;cstring&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="065a0f8b65d9d6ed85af9b0b240cf7b0af451235" translate="yes" xml:space="preserve">
          <source>A Nim &lt;span id=&quot;program_1&quot;&gt;program&lt;/span&gt; consists of one or more text &lt;span id=&quot;source-files_1&quot;&gt;source files&lt;/span&gt; containing Nim code. It is processed by a Nim &lt;span id=&quot;compiler_1&quot;&gt;compiler&lt;/span&gt; into an &lt;span id=&quot;executable_1&quot;&gt;executable&lt;/span&gt;. The nature of this executable depends on the compiler implementation; it may, for example, be a native binary or JavaScript source code.</source>
          <target state="translated">Nim&lt;span id=&quot;program_1&quot;&gt;プログラム&lt;/span&gt;は、Nimコードを含む1つ以上のテキスト&lt;span id=&quot;source-files_1&quot;&gt;ソースファイルで&lt;/span&gt;構成されます。これは、ニムのによって処理される&lt;span id=&quot;compiler_1&quot;&gt;コンパイラ&lt;/span&gt;に&lt;span id=&quot;executable_1&quot;&gt;実行可能&lt;/span&gt;。この実行可能ファイルの性質は、コンパイラの実装によって異なります。たとえば、ネイティブバイナリまたはJavaScriptソースコードの場合があります。</target>
        </trans-unit>
        <trans-unit id="69460fedc7d49aa8bfd391ea3c8be3ae26318394" translate="yes" xml:space="preserve">
          <source>A Nim procedure is asynchronous when it includes the &lt;code&gt;{.async.}&lt;/code&gt; pragma. It should always have a &lt;code&gt;Future[T]&lt;/code&gt; return type or not have a return type at all. A &lt;code&gt;Future[void]&lt;/code&gt; return type is assumed by default.</source>
          <target state="translated">&lt;code&gt;{.async.}&lt;/code&gt; プラグマが含まれている場合、Nimプロシージャは非同期です。常に &lt;code&gt;Future[T]&lt;/code&gt; 戻り型を持つか、戻り型をまったく持たない必要があります。 &lt;code&gt;Future[void]&lt;/code&gt; 戻り値の型は、デフォルトで想定されます。</target>
        </trans-unit>
        <trans-unit id="0bd52730a119bb22be3969f6811e2133725811be" translate="yes" xml:space="preserve">
          <source>A Nim program specifies a computation that acts on a memory consisting of components called &lt;span id=&quot;locations_1&quot;&gt;locations&lt;/span&gt;. A variable is basically a name for a location. Each variable and location is of a certain &lt;span id=&quot;type_1&quot;&gt;type&lt;/span&gt;. The variable's type is called &lt;span id=&quot;static-type_1&quot;&gt;static type&lt;/span&gt;, the location's type is called &lt;span id=&quot;dynamic-type_1&quot;&gt;dynamic type&lt;/span&gt;. If the static type is not the same as the dynamic type, it is a super-type or subtype of the dynamic type.</source>
          <target state="translated">Nimプログラムは、&lt;span id=&quot;locations_1&quot;&gt;ロケーション&lt;/span&gt;と呼ばれるコンポーネントで構成されるメモリに作用する計算を指定し&lt;span id=&quot;locations_1&quot;&gt;ます&lt;/span&gt;。変数は基本的に場所の名前です。各変数と場所は特定の&lt;span id=&quot;type_1&quot;&gt;タイプ&lt;/span&gt;です。変数のタイプは&lt;span id=&quot;static-type_1&quot;&gt;静的&lt;/span&gt;タイプと呼ばれ、ロケーションのタイプは&lt;span id=&quot;dynamic-type_1&quot;&gt;動的タイプ&lt;/span&gt;と呼ばれます。静的タイプが動的タイプと同じでない場合、それは動的タイプのスーパータイプまたはサブタイプです。</target>
        </trans-unit>
        <trans-unit id="4d649a9b73eb1b75df006205a78131f546ab13c9" translate="yes" xml:space="preserve">
          <source>A PEG (Parsing expression grammar) is a simple deterministic grammar, that can be directly used for parsing. The current implementation has been designed as a more powerful replacement for regular expressions. UTF-8 is supported.</source>
          <target state="translated">PEG(Parsing expression grammar)は、単純な決定論的文法であり、構文解析に直接使用することができます。現在の実装では、正規表現をより強力に置き換えるように設計されています。UTF-8に対応しています。</target>
        </trans-unit>
        <trans-unit id="8f7d9cb77b19d82ede8da7ec5e4ab6a8a699b484" translate="yes" xml:space="preserve">
          <source>A Rune may be composed with other Runes to a character on the screen. &lt;code&gt;RuneImpl&lt;/code&gt; is the underlying type used to store Runes, currently &lt;code&gt;int32&lt;/code&gt;.</source>
          <target state="translated">ルーンは、画面上のキャラクターに対して他のルーンと構成することができます。 &lt;code&gt;RuneImpl&lt;/code&gt; は、ルーンを格納するために使用される基になる型であり、現在は &lt;code&gt;int32&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="97903ec287c9679803a5cf8de4f08e59be7ecca6" translate="yes" xml:space="preserve">
          <source>A Uniform Resource Identifier (URI) provides a simple and extensible means for identifying a resource. A URI can be further classified as a locator, a name, or both. The term &amp;ldquo;Uniform Resource Locator&amp;rdquo; (URL) refers to the subset of URIs.</source>
          <target state="translated">URL（Uniform Resource Identifier）は、リソースを識別するためのシンプルで拡張可能な手段を提供します。URIは、ロケーター、名前、またはその両方としてさらに分類できます。「UniformResourceLocator」（URL）という用語は、URIのサブセットを指します。</target>
        </trans-unit>
        <trans-unit id="33b07af826ffc1642e9db6c9aa9ff6e43b9cc68a" translate="yes" xml:space="preserve">
          <source>A application-level error condition. For example, some user input generated an exception. The application will continue to run, but functionality or data was impacted, possibly visible to users.</source>
          <target state="translated">アプリケーションレベルのエラー状態。たとえば、一部のユーザー入力で例外が発生しました。アプリケーションは実行を継続しますが、機能やデータに影響があり、ユーザーに見える可能性があります。</target>
        </trans-unit>
        <trans-unit id="5d9beef18f6feec8ed926e501f6bc8ef50b29384" translate="yes" xml:space="preserve">
          <source>A application-level fatal condition. FATAL usually means that the application cannot go on and will exit (but this logging event will not do that for you).</source>
          <target state="translated">アプリケーションレベルの致命的な状態。FATAL は通常、アプリケーションが続行できずに終了することを意味します (ただし、このロギングイベントはそのようなことはしません)。</target>
        </trans-unit>
        <trans-unit id="0bc66569c7f749a991c86255655ab99ac30e86d5" translate="yes" xml:space="preserve">
          <source>A backslash followed by a letter is a built-in macro, otherwise it is used for ordinary escaping:</source>
          <target state="translated">バックスラッシュの後に文字が続くのは組み込みマクロで、それ以外は通常のエスケープに使用されます。</target>
        </trans-unit>
        <trans-unit id="519b373c181ee8d4be473dddf120c85a8c41428c" translate="yes" xml:space="preserve">
          <source>A block can be left prematurely with a &lt;code&gt;break&lt;/code&gt; statement. The break statement can leave a &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or a &lt;code&gt;block&lt;/code&gt; statement. It leaves the innermost construct, unless a label of a block is given:</source>
          <target state="translated">ブロックは、 &lt;code&gt;break&lt;/code&gt; ステートメントを使用して時期尚早に残すことができます。breakステートメントは、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、または &lt;code&gt;block&lt;/code&gt; ステートメントを残すことができます。ブロックのラベルが与えられない限り、それは最も内側の構成を残します：</target>
        </trans-unit>
        <trans-unit id="2b2a65f3fbb55054c3c60c9c8e9467f1ea4b9e04" translate="yes" xml:space="preserve">
          <source>A bool is one byte long and it is &lt;code&gt;true&lt;/code&gt; for every non-zero (&lt;code&gt;0000_0000&lt;/code&gt;) value. Raises &lt;code&gt;IOError&lt;/code&gt; if an error occurred.</source>
          <target state="translated">BOOLは1バイト長で、それが &lt;code&gt;true&lt;/code&gt; すべての非ゼロ（のため &lt;code&gt;0000_0000&lt;/code&gt; ）値。発生させ &lt;code&gt;IOError&lt;/code&gt; エラーが発生した場合。</target>
        </trans-unit>
        <trans-unit id="07808673548482e5392b9784984fdab8e702d49d" translate="yes" xml:space="preserve">
          <source>A borrow operation ends with the last usage of the view variable.</source>
          <target state="translated">借用操作は、ビュー変数の最後の使用で終了します。</target>
        </trans-unit>
        <trans-unit id="f3a07d2cefd27e89258e2ff6a670ec933e438f77" translate="yes" xml:space="preserve">
          <source>A borrow starts with one of the following:</source>
          <target state="translated">借用は以下のいずれかから始まります。</target>
        </trans-unit>
        <trans-unit id="8018e99c199800e7c1d485e8e8e1d2de44558695" translate="yes" xml:space="preserve">
          <source>A call to an asynchronous procedure usually needs &lt;code&gt;await&lt;/code&gt; to wait for the completion of the &lt;code&gt;Future&lt;/code&gt;.</source>
          <target state="translated">非同期プロシージャの呼び出しは、通常は必要 &lt;code&gt;await&lt;/code&gt; の完了を待つ &lt;code&gt;Future&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92b34eeb7a8a85759a8e5d4110adc50791d4f3f3" translate="yes" xml:space="preserve">
          <source>A cast expression &lt;code&gt;cast[T](e)&lt;/code&gt; is a path expression.</source>
          <target state="translated">キャスト式 &lt;code&gt;cast[T](e)&lt;/code&gt; はパス式です。</target>
        </trans-unit>
        <trans-unit id="5c103f838d5fa5d3771bb4e300b47d90516af782" translate="yes" xml:space="preserve">
          <source>A character is not a Unicode character but a single byte. The reason for this is efficiency: for the overwhelming majority of use-cases, the resulting programs will still handle UTF-8 properly as UTF-8 was specially designed for this. Another reason is that Nim can thus support &lt;code&gt;array[char, int]&lt;/code&gt; or &lt;code&gt;set[char]&lt;/code&gt; efficiently as many algorithms rely on this feature. The &lt;code&gt;Rune&lt;/code&gt; type is used for Unicode characters, it can represent any Unicode character. &lt;code&gt;Rune&lt;/code&gt; is declared in the &lt;a href=&quot;unicode&quot;&gt;unicode module&lt;/a&gt;.</source>
          <target state="translated">文字はUnicode文字ではなく、1バイトです。この理由は効率です。UTF-8はこのために特別に設計されているため、圧倒的多数のユースケースでは、結果のプログラムはUTF-8を適切に処理します。もう1つの理由は、多くのアルゴリズムがこの機能に依存しているため、Nimが &lt;code&gt;array[char, int]&lt;/code&gt; または &lt;code&gt;set[char]&lt;/code&gt; 効率的にサポートできることです。 &lt;code&gt;Rune&lt;/code&gt; 種類はUnicode文字のために使用されている、それは任意のUnicode文字を表すことができます。 &lt;code&gt;Rune&lt;/code&gt; は&lt;a href=&quot;unicode&quot;&gt;Unicodeモジュールで&lt;/a&gt;宣言されています。</target>
        </trans-unit>
        <trans-unit id="6bd1dcf8b598ce13fe780f11e538b4c3679116e3" translate="yes" xml:space="preserve">
          <source>A character is not an Unicode character but a single byte. The reason for this is efficiency: for the overwhelming majority of use-cases, the resulting programs will still handle UTF-8 properly as UTF-8 was specially designed for this. Another reason is that Nim can thus support &lt;code&gt;array[char, int]&lt;/code&gt; or &lt;code&gt;set[char]&lt;/code&gt; efficiently as many algorithms rely on this feature. The &lt;em&gt;Rune&lt;/em&gt; type is used for Unicode characters, it can represent any Unicode character. &lt;code&gt;Rune&lt;/code&gt; is declared in the &lt;a href=&quot;unicode&quot;&gt;unicode module&lt;/a&gt;.</source>
          <target state="translated">文字はUnicode文字ではなく、1バイトです。この理由は効率です。圧倒的多数のユースケースでは、UTF-8はこのために特別に設計されているため、結果のプログラムは引き続きUTF-8を適切に処理します。別の理由は、多くのアルゴリズムがこの機能に依存しているため、Nimが &lt;code&gt;array[char, int]&lt;/code&gt; または &lt;code&gt;set[char]&lt;/code&gt; 効率的にサポートできることです。&lt;em&gt;ルーンの&lt;/em&gt;種類はUnicode文字のために使用されている、それは任意のUnicode文字を表すことができます。 &lt;code&gt;Rune&lt;/code&gt; は&lt;a href=&quot;unicode&quot;&gt;ユニコードモジュールで&lt;/a&gt;宣言されています。</target>
        </trans-unit>
        <trans-unit id="02438431477b9f284f329a8125ca2c9ad9d3544e" translate="yes" xml:space="preserve">
          <source>A color stored as RGB, e.g. &lt;code&gt;0xff00cc&lt;/code&gt;.</source>
          <target state="translated">RGBとして保存されている色（例： &lt;code&gt;0xff00cc&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="464ccfc3644339c90fe83b96ac6cc6d2ac6904e3" translate="yes" xml:space="preserve">
          <source>A command-line switch &lt;code&gt;--FOO&lt;/code&gt; is written as &lt;code&gt;switch(&quot;FOO&quot;)&lt;/code&gt; in NimScript. Similarly, command-line &lt;code&gt;--FOO:VAL&lt;/code&gt; translates to &lt;code&gt;switch(&quot;FOO&quot;, &quot;VAL&quot;)&lt;/code&gt;.</source>
          <target state="translated">コマンドラインスイッチ &lt;code&gt;--FOO&lt;/code&gt; は、NimScript &lt;code&gt;switch(&quot;FOO&quot;)&lt;/code&gt; として記述されます。同様に、コマンドライン &lt;code&gt;--FOO:VAL&lt;/code&gt; は &lt;code&gt;switch(&quot;FOO&quot;, &quot;VAL&quot;)&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="27a21ba557cb1102184eb887daf5fb2f0ee516b2" translate="yes" xml:space="preserve">
          <source>A compile-time error will be produced if the supplied type is not generic.</source>
          <target state="translated">与えられた型がジェネリックでない場合、コンパイル時のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="9e63142b740226a78a46d8a1af8bf22743ac95c8" translate="yes" xml:space="preserve">
          <source>A config file was loaded.</source>
          <target state="translated">設定ファイルが読み込まれました。</target>
        </trans-unit>
        <trans-unit id="4e0bfb8692e714161fc85476e6dc2bea3acca4aa" translate="yes" xml:space="preserve">
          <source>A const section declares constants whose values are constant expressions:</source>
          <target state="translated">constセクションは、その値が定数式である定数を宣言します。</target>
        </trans-unit>
        <trans-unit id="61b8c94d978f3588a0582bb78409af7deb66813e" translate="yes" xml:space="preserve">
          <source>A constant array/seq/object/tuple constructor.</source>
          <target state="translated">定数配列/seq/object/tupleのコンストラクタ。</target>
        </trans-unit>
        <trans-unit id="0064db9e288278b0376c2e5e320a96dacd41e609" translate="yes" xml:space="preserve">
          <source>A constant expression can contain code blocks that may internally use all Nim features supported at compile time (as detailed in the next section below). Within such a code block, it is possible to declare variables and then later read and update them, or declare variables and pass them to procedures that modify them. However, the code in such a block must still adhere to the restrictions listed above for referencing values and operations outside the block.</source>
          <target state="translated">定数式には、コンパイル時にサポートされているすべてのNimの機能を内部的に使用するコードブロックを含めることができます(以下の次のセクションで詳しく説明します)。このようなコードブロックの中では、変数を宣言して後から読み込んで更新したり、変数を宣言してそれを修正するプロシージャに渡したりすることができます。しかし、そのようなブロック内のコードは、ブロック外の値や操作を参照する場合には、上記の制限に従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d676346fde6cb6856b2edfe8fcc862ca9818983" translate="yes" xml:space="preserve">
          <source>A contains element e</source>
          <target state="translated">Aには要素eが含まれています。</target>
        </trans-unit>
        <trans-unit id="a97fa9396c800de48716801c7cc433f027d4fd9e" translate="yes" xml:space="preserve">
          <source>A convenience proc for:</source>
          <target state="translated">のための便宜的な調達。</target>
        </trans-unit>
        <trans-unit id="be06b381f65f6401540a9a933e32c54008aff8d5" translate="yes" xml:space="preserve">
          <source>A convenience proc that runs the &lt;code&gt;command&lt;/code&gt;, and returns its &lt;code&gt;output&lt;/code&gt; and &lt;code&gt;exitCode&lt;/code&gt;. &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;workingDir&lt;/code&gt; params behave as for &lt;code&gt;startProcess&lt;/code&gt;. If &lt;code&gt;input.len &amp;gt; 0&lt;/code&gt;, it is passed as stdin.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; を実行し、その &lt;code&gt;output&lt;/code&gt; と &lt;code&gt;exitCode&lt;/code&gt; を返す便利なプロシージャ。 &lt;code&gt;env&lt;/code&gt; および &lt;code&gt;workingDir&lt;/code&gt; パラメーターは &lt;code&gt;startProcess&lt;/code&gt; と同様に動作します。 &lt;code&gt;input.len &amp;gt; 0&lt;/code&gt; 場合、stdinとして渡されます。</target>
        </trans-unit>
        <trans-unit id="cacfb1ec37d6c63df0aece0717105dfb5b1e961d" translate="yes" xml:space="preserve">
          <source>A convenience procedure that executes &lt;code&gt;command&lt;/code&gt; with &lt;code&gt;startProcess&lt;/code&gt; and returns its output as a string.</source>
          <target state="translated">&lt;code&gt;startProcess&lt;/code&gt; を使用して &lt;code&gt;command&lt;/code&gt; を実行し、その出力を文字列として返す便利なプロシージャ。</target>
        </trans-unit>
        <trans-unit id="cd669926d307684088d5ef478be7b22480b9a5f4" translate="yes" xml:space="preserve">
          <source>A convenience procedure that executes &lt;code&gt;command&lt;/code&gt; with &lt;code&gt;startProcess&lt;/code&gt; and returns its output as a string. WARNING: this function uses poEvalCommand by default for backward compatibility. Make sure to pass options explicitly.</source>
          <target state="translated">&lt;code&gt;startProcess&lt;/code&gt; で &lt;code&gt;command&lt;/code&gt; を実行し、その出力を文字列として返す便利なプロシージャ。警告：この関数は、下位互換性のためにデフォルトでpoEvalCommandを使用します。オプションを明示的に渡すようにしてください。</target>
        </trans-unit>
        <trans-unit id="d5eda57047be93a6d8ede446c939b622a61fcad5" translate="yes" xml:space="preserve">
          <source>A convention is that exceptions should be raised in &lt;em&gt;exceptional&lt;/em&gt; cases: For example, if a file cannot be opened, this should not raise an exception since this is quite common (the file may not exist).</source>
          <target state="translated">慣例では、例外は例外的に発生する必要が&lt;em&gt;あります&lt;/em&gt;。たとえば、ファイルを開くことができない場合、これは非常に一般的です（ファイルが存在しない可能性があるため）。</target>
        </trans-unit>
        <trans-unit id="9dc4e7e8a36779be1253db430e17a3ece42f97f6" translate="yes" xml:space="preserve">
          <source>A converter can also be explicitly invoked for improved readability. Note that implicit converter chaining is not supported: If there is a converter from type A to type B and from type B to type C the implicit conversion from A to C is not provided.</source>
          <target state="translated">可読性を向上させるために、コンバータを明示的に呼び出すこともできます。暗黙のコンバータチェーニングはサポートされていないことに注意してください。タイプAからタイプBへのコンバータとタイプBからタイプCへのコンバータがある場合、AからCへの暗黙の変換は提供されません。</target>
        </trans-unit>
        <trans-unit id="0fabf98da32833f2ac2d72c57027f686f2dbd28b" translate="yes" xml:space="preserve">
          <source>A converter is like an ordinary proc except that it enhances the &quot;implicitly convertible&quot; type relation (see &lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;Convertible relation&lt;/a&gt;):</source>
          <target state="translated">コンバーターは、「暗黙的に変換可能な」タイプの関係を強化することを除いて、通常のプロシージャに似ています（&lt;a href=&quot;#type-relations-convertible-relation&quot;&gt;変換可能な関係を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ff0115af818672bc6f62e11d492d4642e32f4663" translate="yes" xml:space="preserve">
          <source>A converter is similar to a proc.</source>
          <target state="translated">コンバータは、調達に似ています。</target>
        </trans-unit>
        <trans-unit id="95b68e940e0a6eefa4655d5db413050f4aee06c6" translate="yes" xml:space="preserve">
          <source>A curly expression with commas in it like &lt;code&gt;{x, argA, argB}&lt;/code&gt; could be transformed to &lt;code&gt;format(x, argA, argB, res)&lt;/code&gt; in order to support formatters that do not need to parse a custom language within a custom language but instead prefer to use Nim's existing syntax. This also helps in readability since there is only so much you can cram into single letter DSLs.</source>
          <target state="translated">&lt;code&gt;{x, argA, argB}&lt;/code&gt; ようにカンマが含まれているカーリー式は、カスタム言語内でカスタム言語を解析する必要はなく、代わりに優先するフォーマッターをサポートするために &lt;code&gt;format(x, argA, argB, res)&lt;/code&gt; に変換できます。 Nimの既存の構文を使用します。1文字のDSLに詰め込むことができるものは非常に少ないため、これは読みやすさにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="dfc4ab3114e21dfe437697844b567a3fec4ddcb5" translate="yes" xml:space="preserve">
          <source>A curly expression with commas in it like &lt;code&gt;{x, argA, argB}&lt;/code&gt; could be transformed to &lt;code&gt;formatValue(result, x, argA, argB)&lt;/code&gt; in order to support formatters that do not need to parse a custom language within a custom language but instead prefer to use Nim's existing syntax. This also helps in readability since there is only so much you can cram into single letter DSLs.</source>
          <target state="translated">&lt;code&gt;{x, argA, argB}&lt;/code&gt; ようにコンマを含む中式は、カスタム言語内でカスタム言語を解析する必要がなく、代わりに優先するフォーマッターをサポートするために &lt;code&gt;formatValue(result, x, argA, argB)&lt;/code&gt; に変換できます。 Nimの既存の構文を使用します。1文字のDSLに詰め込めるのは非常に限られているため、これは読みやすさにも役立ちます。</target>
        </trans-unit>
        <trans-unit id="e3fa03d2d9ca46b9edc2c32896fd2039415253ab" translate="yes" xml:space="preserve">
          <source>A data flow variable.</source>
          <target state="translated">データフロー変数。</target>
        </trans-unit>
        <trans-unit id="af339bf252ebc6686a22fa957452c6666fabae1d" translate="yes" xml:space="preserve">
          <source>A destructible context is currently only the following:</source>
          <target state="translated">破壊可能なコンテキストは、現在のところ以下のようなものだけです。</target>
        </trans-unit>
        <trans-unit id="a4828b4e1e76af08cdc61d3da41001844c8e7647" translate="yes" xml:space="preserve">
          <source>A destructor is attached to the type it destructs; expressions of this type can then only be used in &lt;em&gt;destructible contexts&lt;/em&gt; and as parameters:</source>
          <target state="translated">デストラクタは、それが破壊する型に接続されます。このタイプの式は、&lt;em&gt;破壊可能なコンテキスト&lt;/em&gt;およびパラメーターとしてのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="5433f8711be01e7d00dc897cddea4967983783a7" translate="yes" xml:space="preserve">
          <source>A destructor must have a single parameter with a concrete type (the name of a generic type is allowed too). The name of the destructor has to be &lt;code&gt;=destroy&lt;/code&gt;.</source>
          <target state="translated">デストラクタには、具象型の単一のパラメータが必要です（ジェネリック型の名前も使用できます）。デストラクタの名前は &lt;code&gt;=destroy&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="b51be317d37d0d9e5679921ffa2c4f39470a9227" translate="yes" xml:space="preserve">
          <source>A directory can also be a so called &quot;pseudo directory&quot;. They can be used to avoid ambiguity when there are multiple modules with the same path.</source>
          <target state="translated">ディレクトリは、いわゆる「疑似ディレクトリ」にもなります。これらは、同じパスを持つ複数のモジュールが存在する場合に、 曖昧さを避けるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ba9a4b41df6580ad5e8acb6a3c21939ab2ed47ab" translate="yes" xml:space="preserve">
          <source>A directory can also be a so-called &quot;pseudo directory&quot;. They can be used to avoid ambiguity when there are multiple modules with the same path.</source>
          <target state="translated">ディレクトリは、いわゆる「疑似ディレクトリ」になることもあります。これらは、同じパスを持つ複数のモジュールがある場合に、 曖昧さを避けるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="95e50b8a4c29848e0e58c481e1f4e2be74e28e1a" translate="yes" xml:space="preserve">
          <source>A distinct string type that is &lt;span id=&quot;tainted_1&quot;&gt;tainted&lt;/span&gt;, see &lt;a href=&quot;manual_experimental#taint-mode&quot;&gt;taint mode&lt;/a&gt; for details. It is an alias for &lt;code&gt;string&lt;/code&gt; if the taint mode is not turned on.</source>
          <target state="translated">&lt;span id=&quot;tainted_1&quot;&gt;汚染され&lt;/span&gt;ている個別の文字列タイプ。詳細については、&lt;a href=&quot;manual_experimental#taint-mode&quot;&gt;汚染モード&lt;/a&gt;を参照してください。汚染モードがオンになっていない場合は、 &lt;code&gt;string&lt;/code&gt; エイリアスです。</target>
        </trans-unit>
        <trans-unit id="2010acb176bc59e66e9596fccd16c6be234aa62b" translate="yes" xml:space="preserve">
          <source>A distinct type can be used to model different physical &lt;span id=&quot;units_1&quot;&gt;units&lt;/span&gt; with a numerical base type, for example. The following example models currencies.</source>
          <target state="translated">たとえば、特殊タイプを使用して、数値の基本タイプを持つさまざまな物理&lt;span id=&quot;units_1&quot;&gt;単位&lt;/span&gt;をモデル化できます。次の例では、通貨をモデル化しています。</target>
        </trans-unit>
        <trans-unit id="5b70baaf6a3c1cf02cffd9a4c12db14e78c7e2e0" translate="yes" xml:space="preserve">
          <source>A distinct type is an ordinal type if its base type is an ordinal type.</source>
          <target state="translated">基底型が順序型である場合、明確な型は順序型となります。</target>
        </trans-unit>
        <trans-unit id="0dcbf503ecd251b550b20573f306de222e9f6e39" translate="yes" xml:space="preserve">
          <source>A does not contain element e</source>
          <target state="translated">Aは要素eを含まない</target>
        </trans-unit>
        <trans-unit id="7339291827f4b694e439170ba77d07b22a6ba2d9" translate="yes" xml:space="preserve">
          <source>A dot following the hash &lt;code&gt;#.&lt;/code&gt; indicates that the call should use C++'s dot or arrow notation.</source>
          <target state="translated">ハッシュ &lt;code&gt;#.&lt;/code&gt; 続くドット。呼び出しでC ++のドット表記または矢印表記を使用する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="91daa2e8d1d787e2cb1cebec501d70a447fbdd47" translate="yes" xml:space="preserve">
          <source>A double quotation mark preceded by a backslash (&quot;) is interpreted as a literal double quotation mark character (&quot;).</source>
          <target state="translated">ダブルクォーテーションマークの前にバックスラッシュ(&quot;)が付いている場合は、リテラルのダブルクォーテーションマーク文字(&quot;)として解釈されます。</target>
        </trans-unit>
        <trans-unit id="5b983689cc856655c0945357d3fc5752f335fd52" translate="yes" xml:space="preserve">
          <source>A double-ended queue backed with a ringed seq buffer.</source>
          <target state="translated">リングされたseqバッファでバックアップされたダブルエンドキュー。</target>
        </trans-unit>
        <trans-unit id="37b3c8d877a1796e2ce2b752a84672e2b698b73f" translate="yes" xml:space="preserve">
          <source>A doubly linked list.</source>
          <target state="translated">二重にリンクされたリスト。</target>
        </trans-unit>
        <trans-unit id="dc610ca5779e2c4149fb2f04ff29af536258d4e9" translate="yes" xml:space="preserve">
          <source>A doubly linked ring.</source>
          <target state="translated">二重につながったリングです。</target>
        </trans-unit>
        <trans-unit id="5ca1163da7023e239f0374687ad85cf02cf7bedd" translate="yes" xml:space="preserve">
          <source>A faster approach if you don't need to run the full bootstrapping implied by &lt;code&gt;koch boot&lt;/code&gt;, is the following:</source>
          <target state="translated">&lt;code&gt;koch boot&lt;/code&gt; によって暗示される完全なブートストラップを実行する必要がない場合のより高速なアプローチは、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fec95403df4da1203b32ec4a5895c4b2f97d7469" translate="yes" xml:space="preserve">
          <source>A file stream object.</source>
          <target state="translated">ファイルストリームオブジェクト。</target>
        </trans-unit>
        <trans-unit id="01ed7c56b187204e313f1f9d97ebfebcc0fecee3" translate="yes" xml:space="preserve">
          <source>A for loop variable.</source>
          <target state="translated">forループ変数です。</target>
        </trans-unit>
        <trans-unit id="be05d01928ee989b51c293af8a8ced991ffc3f8b" translate="yes" xml:space="preserve">
          <source>A formal parameter of &lt;code&gt;p&lt;/code&gt;. Note that this does not cover parameters of inner procs.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; の仮パラメータ。これは内部プロシージャのパラメータをカバーしていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b4530327f82b08f79eb5415f2f6266f23e82dea1" translate="yes" xml:space="preserve">
          <source>A friendlier version of &lt;code&gt;initRational&lt;/code&gt;. Example usage:</source>
          <target state="translated">&lt;code&gt;initRational&lt;/code&gt; のよりフレンドリーなバージョン。使用例：</target>
        </trans-unit>
        <trans-unit id="7d654b825945bd5f2a34963e2ce499f362a2a00c" translate="yes" xml:space="preserve">
          <source>A friendlier version of &lt;em&gt;initRational&lt;/em&gt;. Example usage:</source>
          <target state="translated">&lt;em&gt;initRational&lt;/em&gt;のより親しみやすいバージョン。使用例：</target>
        </trans-unit>
        <trans-unit id="d411518da35d7d553e49043b1323d3beb87db97b" translate="yes" xml:space="preserve">
          <source>A generic hash set that remembers insertion order.</source>
          <target state="translated">挿入順を記憶した汎用ハッシュセット。</target>
        </trans-unit>
        <trans-unit id="e82bc7694d12c8d0a1eda93534f23d36363f6058" translate="yes" xml:space="preserve">
          <source>A generic hash set.</source>
          <target state="translated">一般的なハッシュセット。</target>
        </trans-unit>
        <trans-unit id="bc808d927cb66e18ab41120dbc8ca9a77184e013" translate="yes" xml:space="preserve">
          <source>A global &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">グローバル &lt;code&gt;let&lt;/code&gt; または &lt;code&gt;const&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="320cebf4d78ce3c1be14804824f001c260bf7a66" translate="yes" xml:space="preserve">
          <source>A global or thread local variable (or a location derived from such a location) can only passed to a parameter of a &lt;code&gt;.noSideEffect&lt;/code&gt; proc.</source>
          <target state="translated">グローバル変数またはスレッドローカル変数（またはそのような場所から派生した場所）は、 &lt;code&gt;.noSideEffect&lt;/code&gt; プロシージャのパラメータにのみ渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2ffca0b13c686c6b15efaaaca93d32f1c984c75c" translate="yes" xml:space="preserve">
          <source>A good start is to use the &lt;code&gt;any&lt;/code&gt; operating target together with the &lt;code&gt;malloc&lt;/code&gt; memory allocator and the &lt;code&gt;arc&lt;/code&gt; garbage collector. For example:</source>
          <target state="translated">良いスタートは、 &lt;code&gt;malloc&lt;/code&gt; メモリアロケータと &lt;code&gt;arc&lt;/code&gt; ガベージコレクタと一緒に &lt;code&gt;any&lt;/code&gt; 動作ターゲットを使用することです。例えば：</target>
        </trans-unit>
        <trans-unit id="a81ac463f2bf0a449eb382ce5892e833e89db3c5" translate="yes" xml:space="preserve">
          <source>A handle that can be used to get a row's column text on demand.</source>
          <target state="translated">行の列のテキストをオンデマンドで取得するために使用できるハンドル。</target>
        </trans-unit>
        <trans-unit id="9e98d244bf1a5c7aeeae52fd19acf41b5eb1f418" translate="yes" xml:space="preserve">
          <source>A hash &lt;code&gt;#&lt;/code&gt; symbol is replaced by the first or next argument.</source>
          <target state="translated">ハッシュ &lt;code&gt;#&lt;/code&gt; 記号は、最初または次の引数に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="9d4597dbb40515320cfb7ba4a5ab9fff9f4b8d6f" translate="yes" xml:space="preserve">
          <source>A hash value. Hash tables using these values should always have a size of a power of two and can use the &lt;code&gt;and&lt;/code&gt; operator instead of &lt;code&gt;mod&lt;/code&gt; for truncation of the hash value.</source>
          <target state="translated">ハッシュ値。これらの値を使用するハッシュテーブルは、常に2の累乗のサイズである必要があり、ハッシュ値の切り捨てに &lt;code&gt;mod&lt;/code&gt; の代わりに &lt;code&gt;and&lt;/code&gt; 演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="149c44455ceb35c4ee96ca72b2281853444910fc" translate="yes" xml:space="preserve">
          <source>A heap queue, commonly known as a priority queue.</source>
          <target state="translated">ヒープキューのことで、一般的には優先キューとして知られています。</target>
        </trans-unit>
        <trans-unit id="a53f6ddc26d79601afed6742fbd39fc945dc2d24" translate="yes" xml:space="preserve">
          <source>A helper for wrapping callback-based functions into promises and async procedures</source>
          <target state="translated">コールバックベースの関数をプロミスや非同期プロシージャにラップするヘルパー</target>
        </trans-unit>
        <trans-unit id="1cfeb2fc1a7aa8005e527ab8a5293d0f37aa50de" translate="yes" xml:space="preserve">
          <source>A higher level &lt;code&gt;ODBC&lt;/code&gt; database wrapper.</source>
          <target state="translated">高レベルの &lt;code&gt;ODBC&lt;/code&gt; データベースラッパー。</target>
        </trans-unit>
        <trans-unit id="8f2cac0c1f19b93707af84e96c8e8344199be1d8" translate="yes" xml:space="preserve">
          <source>A higher level &lt;em&gt;ODBC&lt;/em&gt; database wrapper.</source>
          <target state="translated">より高いレベルの&lt;em&gt;ODBC&lt;/em&gt;データベースラッパー。</target>
        </trans-unit>
        <trans-unit id="d7086b8bccfe459c43887557d6fccf6aaa7324be" translate="yes" xml:space="preserve">
          <source>A higher level &lt;span id=&quot;mysql_1&quot;&gt;mySQL&lt;/span&gt; database wrapper. The same interface is implemented for other databases too.</source>
          <target state="translated">より高いレベルの&lt;span id=&quot;mysql_1&quot;&gt;mySQL&lt;/span&gt;データベースラッパー。同じインターフェースが他のデータベースにも実装されています。</target>
        </trans-unit>
        <trans-unit id="7ed449265b711e313a4301b54cee15ef550acdbf" translate="yes" xml:space="preserve">
          <source>A higher level &lt;span id=&quot;postgresql_1&quot;&gt;PostgreSQL&lt;/span&gt; database wrapper. This interface is implemented for other databases also.</source>
          <target state="translated">より高いレベルの&lt;span id=&quot;postgresql_1&quot;&gt;PostgreSQL&lt;/span&gt;データベースラッパー。このインターフェースは、他のデータベースにも実装されています。</target>
        </trans-unit>
        <trans-unit id="18d9c046b2d8f8fc8c6daccb16db460900a01a66" translate="yes" xml:space="preserve">
          <source>A higher level &lt;span id=&quot;sqlite_1&quot;&gt;SQLite&lt;/span&gt; database wrapper. This interface is implemented for other databases too.</source>
          <target state="translated">より高レベルの&lt;span id=&quot;sqlite_1&quot;&gt;SQLite&lt;/span&gt;データベースラッパー。このインターフェースは他のデータベースにも実装されています。</target>
        </trans-unit>
        <trans-unit id="17cc08bc05f9e3c22bbf4a01b73d4951016af63c" translate="yes" xml:space="preserve">
          <source>A label (used in &lt;code&gt;block&lt;/code&gt; statements).</source>
          <target state="translated">ラベル（ &lt;code&gt;block&lt;/code&gt; ステートメントで使用）。</target>
        </trans-unit>
        <trans-unit id="89265eb4f02e06930cfb5c35dd5f76b04d9c0a16" translate="yes" xml:space="preserve">
          <source>A last tip when writing a macro: if you are not sure the AST you are building looks ok, you may be tempted to use the &lt;code&gt;dumpTree&lt;/code&gt; macro. But you can't use it &lt;em&gt;inside&lt;/em&gt; the macro you are writting/debugging. Instead &lt;code&gt;echo&lt;/code&gt; the string generated by &lt;a href=&quot;macros#treeRepr&quot;&gt;treeRepr&lt;/a&gt;. If at the end of the this example you add &lt;code&gt;echo treeRepr(result)&lt;/code&gt; you should get the same output as using the &lt;code&gt;dumpTree&lt;/code&gt; macro, but of course you can call that at any point of the macro where you might be having troubles.</source>
          <target state="translated">マクロを書くときの最後のヒント：構築しているASTが問題ないように見える場合、 &lt;code&gt;dumpTree&lt;/code&gt; マクロを使用したくなるかもしれません。ただし、書き込み/デバッグしているマクロ&lt;em&gt;内で&lt;/em&gt;は使用できません。代わりに、&lt;a href=&quot;macros#treeRepr&quot;&gt;treeRepr&lt;/a&gt;によって生成された文字列を &lt;code&gt;echo&lt;/code&gt; します。この例の最後に &lt;code&gt;echo treeRepr(result)&lt;/code&gt; を追加すると、 &lt;code&gt;dumpTree&lt;/code&gt; マクロを使用した場合と同じ出力が得られますが、問題が発生する可能性のあるマクロの任意の時点で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e62c0496669da44a5936805a3cdfee1fe957384a" translate="yes" xml:space="preserve">
          <source>A leaf of the AST often corresponds to a terminal symbol in the concrete syntax. Note that the default &lt;code&gt;float&lt;/code&gt; in Nim maps to &lt;code&gt;float64&lt;/code&gt; such that the default AST for a float is &lt;code&gt;nnkFloat64Lit&lt;/code&gt; as below.</source>
          <target state="translated">ASTの葉は、多くの場合、具体的な構文の終端記号に対応しています。デフォルトのことを注意 &lt;code&gt;float&lt;/code&gt; ニム中がマップ &lt;code&gt;float64&lt;/code&gt; フロートのデフォルトのASTがあるように &lt;code&gt;nnkFloat64Lit&lt;/code&gt; 以下の通り。</target>
        </trans-unit>
        <trans-unit id="ca1d57971d26f802ed23be891e23648148c8e483" translate="yes" xml:space="preserve">
          <source>A line of text may be delimited by &lt;code&gt;CR&lt;/code&gt;, &lt;code&gt;LF&lt;/code&gt; or &lt;code&gt;CRLF&lt;/code&gt;. The newline character(s) are not part of the returned string. Returns &lt;code&gt;false&lt;/code&gt; if the end of the file has been reached, &lt;code&gt;true&lt;/code&gt; otherwise. If &lt;code&gt;false&lt;/code&gt; is returned &lt;code&gt;line&lt;/code&gt; contains no new data.</source>
          <target state="translated">テキストの行は、 &lt;code&gt;CR&lt;/code&gt; 、 &lt;code&gt;LF&lt;/code&gt; 、または &lt;code&gt;CRLF&lt;/code&gt; で区切ることができます。改行文字は、返される文字列の一部ではありません。ファイルの終わりに達した場合は &lt;code&gt;false&lt;/code&gt; を返し、 &lt;code&gt;true&lt;/code&gt; ない場合はtrueを返します。 &lt;code&gt;false&lt;/code&gt; が返された場合、 &lt;code&gt;line&lt;/code&gt; には新しいデータが含まれていません。</target>
        </trans-unit>
        <trans-unit id="581948684a5ccce62ab36b49581dc62c13de2828" translate="yes" xml:space="preserve">
          <source>A line of text may be delimited by &lt;code&gt;LF&lt;/code&gt; or &lt;code&gt;CRLF&lt;/code&gt;. The newline character(s) are not part of the returned string. Returns &lt;code&gt;false&lt;/code&gt; if the end of the file has been reached, &lt;code&gt;true&lt;/code&gt; otherwise. If &lt;code&gt;false&lt;/code&gt; is returned &lt;code&gt;line&lt;/code&gt; contains no new data.</source>
          <target state="translated">テキストの行は、 &lt;code&gt;LF&lt;/code&gt; または &lt;code&gt;CRLF&lt;/code&gt; で区切ることができます。改行文字は、返される文字列の一部ではありません。ファイルの終わりに達した場合は &lt;code&gt;false&lt;/code&gt; を返し、 &lt;code&gt;true&lt;/code&gt; ない場合はtrueを返します。 &lt;code&gt;false&lt;/code&gt; が返された場合、 &lt;code&gt;line&lt;/code&gt; には新しいデータが含まれていません。</target>
        </trans-unit>
        <trans-unit id="68a5c4a0e6620a00360c556904f05a47c92cf341" translate="yes" xml:space="preserve">
          <source>A local &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; of &lt;code&gt;p&lt;/code&gt;. Note that this does not cover locals of inner procs.</source>
          <target state="translated">地元の &lt;code&gt;var&lt;/code&gt; または &lt;code&gt;let&lt;/code&gt; か &lt;code&gt;const&lt;/code&gt; の &lt;code&gt;p&lt;/code&gt; 。これは内部プロシージャのローカルをカバーしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f6c3ae6180bd4456adc133775e78037d9dbc3bb3" translate="yes" xml:space="preserve">
          <source>A local variable of a view type &lt;em&gt;borrows&lt;/em&gt; from the locations and it is statically enforced that the view does not outlive the location it was borrowed from.</source>
          <target state="translated">ビュータイプのローカル変数は場所から&lt;em&gt;借用&lt;/em&gt;し、ビューが&lt;em&gt;借用&lt;/em&gt;した場所よりも長生きしないことが静的に適用されます。</target>
        </trans-unit>
        <trans-unit id="6a4f1963c6d5c717eedc6061f40a2aad389a69ee" translate="yes" xml:space="preserve">
          <source>A local variable of a view type can borrow from a location derived from a parameter, another local variable, a global &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; symbol or a thread-local &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">ビュータイプのローカル変数は、パラメーター、別のローカル変数、グローバル &lt;code&gt;const&lt;/code&gt; または &lt;code&gt;let&lt;/code&gt; シンボル、またはスレッドローカル &lt;code&gt;var&lt;/code&gt; または &lt;code&gt;let&lt;/code&gt; から派生した場所から借用できます。</target>
        </trans-unit>
        <trans-unit id="af284b25e3830a68d5e3016b0dc1d22187bec97a" translate="yes" xml:space="preserve">
          <source>A local variable shadows another local variable of an outer scope.</source>
          <target state="translated">ローカル変数は、外部スコープの別のローカル変数の影になります。</target>
        </trans-unit>
        <trans-unit id="de6bcdccdc5c7e0b1b4816e44fb7d53da0a609cf" translate="yes" xml:space="preserve">
          <source>A location derived from &lt;code&gt;source&lt;/code&gt; is then defined as a path expression that has &lt;code&gt;source&lt;/code&gt; as the owner. A path expression &lt;code&gt;e&lt;/code&gt; is defined recursively:</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; から派生した場所は、 &lt;code&gt;source&lt;/code&gt; を所有者とするパス式として定義されます。パス式 &lt;code&gt;e&lt;/code&gt; は再帰的に定義されます。</target>
        </trans-unit>
        <trans-unit id="967771f695ceb39091660c735188c9512c3f76d5" translate="yes" xml:space="preserve">
          <source>A logger that writes log messages to a file while performing log rotation.</source>
          <target state="translated">ログローテーションを行いながら、ログメッセージをファイルに書き込むロガー。</target>
        </trans-unit>
        <trans-unit id="b1a7205870823565c52ef4c52be7d4fff3d9573c" translate="yes" xml:space="preserve">
          <source>A logger that writes log messages to a file.</source>
          <target state="translated">ログメッセージをファイルに書き込むロガー。</target>
        </trans-unit>
        <trans-unit id="9b1885737ecb72a367c6c34335e96773c3da6a62" translate="yes" xml:space="preserve">
          <source>A logger that writes log messages to the console.</source>
          <target state="translated">ログメッセージをコンソールに書き込むロガー。</target>
        </trans-unit>
        <trans-unit id="91fde29a5bcb0f41a42b7a89bca04718dd4f756c" translate="yes" xml:space="preserve">
          <source>A macro is a special function that is executed at compile time. Normally the input for a macro is an abstract syntax tree (AST) of the code that is passed to it. The macro can then do transformations on it and return the transformed AST. This can be used to add custom language features and implement &lt;span id=&quot;domainminusspecific-languages_1&quot;&gt;domain-specific languages&lt;/span&gt;.</source>
          <target state="translated">マクロは、コンパイル時に実行される特別な関数です。通常、マクロの入力は、マクロに渡されるコードの抽象構文木（AST）です。その後、マクロはその上で変換を実行し、変換されたASTを返すことができます。これを使用して、カスタム言語機能を追加し、&lt;span id=&quot;domainminusspecific-languages_1&quot;&gt;ドメイン固有言語&lt;/span&gt;を実装でき&lt;span id=&quot;domainminusspecific-languages_1&quot;&gt;ます&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="d15ac9d0ba716c535ed2ce2885c3b9d90285db47" translate="yes" xml:space="preserve">
          <source>A macro is a special function that is executed at compile-time. Normally the input for a macro is an abstract syntax tree (AST) of the code that is passed to it. The macro can then do transformations on it and return the transformed AST. The transformed AST is then passed to the compiler as if the macro invocation would have been replaced by its result in the source code. This can be used to implement &lt;span id=&quot;domain-specific-languages_1&quot;&gt;domain specific languages&lt;/span&gt;.</source>
          <target state="translated">マクロは、コンパイル時に実行される特別な関数です。通常、マクロの入力は、それに渡されるコードの抽象構文ツリー（AST）です。マクロはそれに対して変換を行い、変換されたASTを返すことができます。変換されたASTは、マクロ呼び出しがソースコードの結果で置き換えられたかのようにコンパイラに渡されます。これは、&lt;span id=&quot;domain-specific-languages_1&quot;&gt;ドメイン固有の言語&lt;/span&gt;を実装するために使用できます。</target>
        </trans-unit>
        <trans-unit id="2320939f622f35d906ef2dffec7b8d388f8158e3" translate="yes" xml:space="preserve">
          <source>A macro that needs to be called &lt;span id=&quot;match_1&quot;&gt;match&lt;/span&gt; can be used to rewrite &lt;code&gt;case&lt;/code&gt; statements in order to implement &lt;span id=&quot;pattern-matching_1&quot;&gt;pattern matching&lt;/span&gt; for certain types. The following example implements a simplistic form of pattern matching for tuples, leveraging the existing equality operator for tuples (as provided in &lt;code&gt;system.==&lt;/code&gt;):</source>
          <target state="translated">特定のタイプの&lt;span id=&quot;pattern-matching_1&quot;&gt;パターンマッチング&lt;/span&gt;を実装するために、&lt;span id=&quot;match_1&quot;&gt;match&lt;/span&gt;と呼ばれる必要があるマクロを使用して、 &lt;code&gt;case&lt;/code&gt; ステートメントを書き換えることができます。次の例では、タプルの既存の等価演算子を利用して、単純な形式のパターンマッチングのパターンマッチングを実装しています（ &lt;code&gt;system.==&lt;/code&gt; 提供されています）。&lt;span id=&quot;pattern-matching_1&quot;&gt;&lt;/span&gt;</target>
        </trans-unit>
        <trans-unit id="c4a6d2ce7ae67ff08002aecf71f9b696f9005b38" translate="yes" xml:space="preserve">
          <source>A macro that takes as its only input parameter an expression of the special type &lt;code&gt;system.ForLoopStmt&lt;/code&gt; can rewrite the entirety of a &lt;code&gt;for&lt;/code&gt; loop:</source>
          <target state="translated">唯一の入力パラメーターとして特別な型 &lt;code&gt;system.ForLoopStmt&lt;/code&gt; の式を取るマクロは、 &lt;code&gt;for&lt;/code&gt; ループ全体を書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="d8df2d80cd89e184b1f75f28697093931c58d398" translate="yes" xml:space="preserve">
          <source>A module alias can be introduced via the &lt;code&gt;as&lt;/code&gt; keyword:</source>
          <target state="translated">モジュールのエイリアスは &lt;code&gt;as&lt;/code&gt; キーワードで導入できます：</target>
        </trans-unit>
        <trans-unit id="d4afefca445f32ee9a9bac5a6c407d25bf9bc289" translate="yes" xml:space="preserve">
          <source>A module's top-level statements are executed at the start of the program. This can be used to initialize complex data structures for example.</source>
          <target state="translated">モジュールのトップレベルのステートメントは、プログラムの開始時に実行されます。これは、例えば複雑なデータ構造を初期化するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2b9f547cf5da6cf041f0968e82f074d18fced352" translate="yes" xml:space="preserve">
          <source>A more verbose format string.</source>
          <target state="translated">より冗長な書式の文字列。</target>
        </trans-unit>
        <trans-unit id="d1e4a688e683942c8ad5fb732b7301d65e5d80ef" translate="yes" xml:space="preserve">
          <source>A mutable view can borrow from a mutable location, an immutable view can borrow from both a mutable or an immutable location.</source>
          <target state="translated">変形可能なビューは変形可能な場所から借りることができ、不変なビューは変形可能な場所と不変な場所の両方から借りることができます。</target>
        </trans-unit>
        <trans-unit id="a99c0a025e79be3ef687fadc0cc6086e9682f6fb" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;main&lt;/code&gt; async procedure must be declared to allow the use of the &lt;code&gt;await&lt;/code&gt; keyword. The connection will complete asynchronously and the client will be connected after the &lt;code&gt;await ftp.connect()&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; キーワードを使用できるようにするには、新しい &lt;code&gt;main&lt;/code&gt; 非同期プロシージャを宣言する必要があります。接続は非同期で完了し、クライアントは &lt;code&gt;await ftp.connect()&lt;/code&gt; 呼び出しの待機後に接続されます。</target>
        </trans-unit>
        <trans-unit id="0e04b575e1abdecefebfd435f79a2eb878c9a4af" translate="yes" xml:space="preserve">
          <source>A new entry will be added to the index using the format &lt;code&gt;term&amp;lt;tab&amp;gt;file#id&lt;/code&gt;. The file part will come from the &lt;code&gt;htmlFile&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;term&amp;lt;tab&amp;gt;file#id&lt;/code&gt; 形式を使用して、新しいエントリがインデックスに追加されます。ファイル部分は &lt;code&gt;htmlFile&lt;/code&gt; パラメーターから取得されます。</target>
        </trans-unit>
        <trans-unit id="b4f09c089b0b64dd84f87655d31d40b67c7f610c" translate="yes" xml:space="preserve">
          <source>A new entry will be added to the index using the format &lt;code&gt;term&amp;lt;tab&amp;gt;file#id&lt;/code&gt;. The file part will come from the &lt;em&gt;htmlFile&lt;/em&gt; parameter.</source>
          <target state="translated">&lt;code&gt;term&amp;lt;tab&amp;gt;file#id&lt;/code&gt; 形式を使用して、新しいエントリがインデックスに追加されます。ファイル部分は&lt;em&gt;htmlFile&lt;/em&gt;パラメータから&lt;em&gt;取得され&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="503fc2fb8da50eec2dc57fabea1722757a7c3f4b" translate="yes" xml:space="preserve">
          <source>A node a doubly linked list consists of.</source>
          <target state="translated">二重リンクされたリストのノードは次のように構成されます。</target>
        </trans-unit>
        <trans-unit id="acf45682c2b0a00aed4a954df976fbf3f14b1755" translate="yes" xml:space="preserve">
          <source>A node a singly linked list consists of.</source>
          <target state="translated">単数リンクされたリストのノードが構成されています。</target>
        </trans-unit>
        <trans-unit id="fc67102da94ccd07b62bc7ef2e58c87c378eee76" translate="yes" xml:space="preserve">
          <source>A non-error message that may indicate a potential problem rising or impacted performance.</source>
          <target state="translated">エラー以外のメッセージで、問題が発生する可能性があるか、パフォーマンスに影響を与えている可能性があります。</target>
        </trans-unit>
        <trans-unit id="25460adb88b704ee96f5be8babcbcef40eb101b1" translate="yes" xml:space="preserve">
          <source>A parallel section can be used to execute a block in parallel.</source>
          <target state="translated">並列セクションは、ブロックを並列に実行するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="911a5ad83db128f4812253b45faa46d98027ca72" translate="yes" xml:space="preserve">
          <source>A parameter &lt;code&gt;p&lt;/code&gt; in a template is even substituted in the expression &lt;code&gt;x.p&lt;/code&gt;. Thus template arguments can be used as field names and a global symbol can be shadowed by the same argument name even when fully qualified:</source>
          <target state="translated">テンプレートのパラメーター &lt;code&gt;p&lt;/code&gt; は、式 &lt;code&gt;x.p&lt;/code&gt; でも置換されます。したがって、テンプレート引数はフィールド名として使用でき、グローバルシンボルは完全修飾されている場合でも同じ引数名でシャドウできます。</target>
        </trans-unit>
        <trans-unit id="b19cf459adbb632e3345bc4ce82a5563aa028fe2" translate="yes" xml:space="preserve">
          <source>A parameter may be declared with a default value which is used if the caller does not provide a value for the argument.</source>
          <target state="translated">呼び出し元が引数に値を与えなかった場合に使用されるデフォルト値でパラメータを宣言することができます。</target>
        </trans-unit>
        <trans-unit id="ed0815dccd26d3ba56f0da6c46ce7039b02d5cc0" translate="yes" xml:space="preserve">
          <source>A parameter of type &lt;code&gt;typedesc&lt;/code&gt; is itself usable as a type. If it is used as a type, it's the underlying type. (In other words, one level of &quot;typedesc&quot;-ness is stripped off:</source>
          <target state="translated">&lt;code&gt;typedesc&lt;/code&gt; 型のパラメータは、それ自体が型として使用できます。型として使用される場合、それは基になる型です。（言い換えると、「typedesc」の1つのレベルが取り除かれます。</target>
        </trans-unit>
        <trans-unit id="cd0e5a46bea204df5866abc8071f4ce20c751ed1" translate="yes" xml:space="preserve">
          <source>A parameter of type &lt;code&gt;untyped&lt;/code&gt; always matches any argument (as long as there is any argument passed to it).</source>
          <target state="translated">型 &lt;code&gt;untyped&lt;/code&gt; のパラメーターは、常に引数に一致します（引数が渡される限り）。</target>
        </trans-unit>
        <trans-unit id="dbc7adf040bff90855d92e494801c3ab8308d57e" translate="yes" xml:space="preserve">
          <source>A pattern expression can be bound to a pattern parameter via the &lt;code&gt;expr{param}&lt;/code&gt; notation:</source>
          <target state="translated">パターン式は &lt;code&gt;expr{param}&lt;/code&gt; 表記を介してパターンパラメータにバインドできます。</target>
        </trans-unit>
        <trans-unit id="8d9da87b86afb0dda3edfe16aedb515e092f61c8" translate="yes" xml:space="preserve">
          <source>A pattern like &lt;code&gt;v[] = value&lt;/code&gt; or &lt;code&gt;v.field = value&lt;/code&gt; marks &lt;code&gt;G(v)&lt;/code&gt; as mutated. After the second pass a set of disjoint graphs was computed.</source>
          <target state="translated">&lt;code&gt;v[] = value&lt;/code&gt; または &lt;code&gt;v.field = value&lt;/code&gt; ようなパターンは、 &lt;code&gt;G(v)&lt;/code&gt; を変異としてマークします。2回目のパスの後、互いに素なグラフのセットが計算されました。</target>
        </trans-unit>
        <trans-unit id="b7da0c1938417b6de5ea835934b0645328e2b773" translate="yes" xml:space="preserve">
          <source>A possible common use case for &lt;code&gt;rsplit&lt;/code&gt; is path manipulation, particularly on systems that don't use a common delimiter.</source>
          <target state="translated">&lt;code&gt;rsplit&lt;/code&gt; の一般的な使用例として考えられるのは、特に一般的な区切り文字を使用しないシステムでのパス操作です。</target>
        </trans-unit>
        <trans-unit id="84dbef3c0526b967ebfd2aa664f1b6a0e87d7f54" translate="yes" xml:space="preserve">
          <source>A possible common use case for &lt;em&gt;rsplit&lt;/em&gt; is path manipulation, particularly on systems that don't use a common delimiter.</source>
          <target state="translated">&lt;em&gt;rsplitの&lt;/em&gt;一般的な使用例としては、特に共通の区切り文字を使用しないシステムでのパス操作があります。</target>
        </trans-unit>
        <trans-unit id="468ffea579d79393dcb2eb8fd23d5f70574b0406" translate="yes" xml:space="preserve">
          <source>A proc can be marked with the &lt;code&gt;asmNoStackFrame&lt;/code&gt; pragma to tell the compiler it should not generate a stack frame for the proc. There are also no exit statements like &lt;code&gt;return result;&lt;/code&gt; generated and the generated C function is declared as &lt;code&gt;__declspec(naked)&lt;/code&gt; or &lt;code&gt;__attribute__((naked))&lt;/code&gt; (depending on the used C compiler).</source>
          <target state="translated">&lt;code&gt;asmNoStackFrame&lt;/code&gt; は、asmNoStackFrameプラグマでマークして、そのプロシージャのスタックフレームを生成しないようコンパイラーに指示できます。 &lt;code&gt;return result;&lt;/code&gt; ようなexitステートメントもありません。生成され、生成されたC関数は、 &lt;code&gt;__declspec(naked)&lt;/code&gt; または &lt;code&gt;__attribute__((naked))&lt;/code&gt; として宣言されます（使用するCコンパイラによって異なります）。</target>
        </trans-unit>
        <trans-unit id="552722100e5b68806260a435d2f96223b24f84ed" translate="yes" xml:space="preserve">
          <source>A proc defined as &lt;code&gt;f=&lt;/code&gt; (with the trailing &lt;code&gt;=&lt;/code&gt;) is called a &lt;span id=&quot;setter_1&quot;&gt;setter&lt;/span&gt;. A setter can be called explicitly via the common backticks notation:</source>
          <target state="translated">&lt;code&gt;f=&lt;/code&gt; （末尾に &lt;code&gt;=&lt;/code&gt; を含む）として定義されたprocは、&lt;span id=&quot;setter_1&quot;&gt;セッター&lt;/span&gt;と呼ばれます。セッターは、一般的なバッククォート表記を介して明示的に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="451fbc26f5ae1ee9316fb78b0e6ca76aa2f9e794" translate="yes" xml:space="preserve">
          <source>A proc that is executed as a new thread of execution should be marked by the &lt;code&gt;thread&lt;/code&gt; pragma for reasons of readability. The compiler checks for violations of the &lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;no heap sharing restriction&lt;/span&gt;: This restriction implies that it is invalid to construct a data structure that consists of memory allocated from different (thread local) heaps.</source>
          <target state="translated">新しい実行スレッドとして実行されるprocは、読みやすさの理由から、 &lt;code&gt;thread&lt;/code&gt; プラグマでマークする必要があります。コンパイラーは、&lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;ヒープ共有制限の&lt;/span&gt;違反をチェックし&lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;ます&lt;/span&gt;。この制限は、異なる（スレッドローカル）ヒープから割り当てられたメモリで構成されるデータ構造を構築することが無効であることを意味します。</target>
        </trans-unit>
        <trans-unit id="31ee225123a881826db3daa3362c06b25bf61005" translate="yes" xml:space="preserve">
          <source>A proc that is executed as a new thread of execution should be marked by the &lt;code&gt;thread&lt;/code&gt; pragma for reasons of readability. The compiler checks for violations of the &lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;no heap sharing restriction&lt;/span&gt;: This restriction implies that it is invalid to construct a data structure that consists of memory allocated from different (thread-local) heaps.</source>
          <target state="translated">新しい実行スレッドとして実行されるprocは、読みやすさの理由から、 &lt;code&gt;thread&lt;/code&gt; プラグマでマークする必要があります。コンパイラは、&lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;ヒープ共有なしの制限の&lt;/span&gt;違反をチェックし&lt;span id=&quot;no-heap-sharing-restriction_1&quot;&gt;ます&lt;/span&gt;。この制限は、異なる（スレッドローカル）ヒープから割り当てられたメモリで構成されるデータ構造を構築することは無効であることを意味します。</target>
        </trans-unit>
        <trans-unit id="c8f7a283eb6acfde98dfa18ad4771346a71dcb69" translate="yes" xml:space="preserve">
          <source>A proc, converter or iterator may return a &lt;code&gt;var&lt;/code&gt; type which means that the returned value is an l-value and can be modified by the caller:</source>
          <target state="translated">プロシージャ、コンバータ、またはイテレータは &lt;code&gt;var&lt;/code&gt; 型を返す場合があります。これは、戻り値がl値であり、呼び出し側が変更できることを意味します。</target>
        </trans-unit>
        <trans-unit id="367fd0ee661d0f037657253ea1206098af391bb7" translate="yes" xml:space="preserve">
          <source>A proc, converter, or iterator may return a &lt;code&gt;var&lt;/code&gt; type which means that the returned value is an l-value and can be modified by the caller:</source>
          <target state="translated">proc、converter、またはiteratorは &lt;code&gt;var&lt;/code&gt; 型を返す場合があります。これは、戻り値がl値であり、呼び出し元が変更できることを意味します。</target>
        </trans-unit>
        <trans-unit id="4ba9d6d1f4765955e60cabd2afda1cfb0cacfe70" translate="yes" xml:space="preserve">
          <source>A procedural type is a (somewhat abstract) pointer to a procedure. &lt;code&gt;nil&lt;/code&gt; is an allowed value for a variable of a procedural type. Nim uses procedural types to achieve &lt;span id=&quot;functional_1&quot;&gt;functional&lt;/span&gt; programming techniques.</source>
          <target state="translated">手続き型は、手続きへの（やや抽象的な）ポインタです。 &lt;code&gt;nil&lt;/code&gt; は、手続き型の変数に使用できる値です。Nimは手続き型を使用して&lt;span id=&quot;functional_1&quot;&gt;関数&lt;/span&gt;型プログラミング手法を実現してい&lt;span id=&quot;functional_1&quot;&gt;ます&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="dbca622df4cb9e116b8115ae0a141864eed44cd7" translate="yes" xml:space="preserve">
          <source>A procedural type is internally a pointer to a procedure. &lt;code&gt;nil&lt;/code&gt; is an allowed value for variables of a procedural type. Nim uses procedural types to achieve &lt;span id=&quot;functional_1&quot;&gt;functional&lt;/span&gt; programming techniques.</source>
          <target state="translated">手続き型は内部的には手続きへのポインタです。 &lt;code&gt;nil&lt;/code&gt; は、手続き型の変数に使用できる値です。Nimは手続き型を使用して&lt;span id=&quot;functional_1&quot;&gt;関数&lt;/span&gt;型プログラミング手法を実現してい&lt;span id=&quot;functional_1&quot;&gt;ます&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="bf770f6e5979c1f778e9340dd0cdb848252fa2f0" translate="yes" xml:space="preserve">
          <source>A procedure may call itself recursively.</source>
          <target state="translated">プロシージャは自分自身を再帰的に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="198d46da979417aa29b92d0cafdd5b26b6aa26bb" translate="yes" xml:space="preserve">
          <source>A procedure that returns a value has an implicit &lt;code&gt;result&lt;/code&gt; variable declared that represents the return value. A &lt;code&gt;return&lt;/code&gt; statement with no expression is a shorthand for &lt;code&gt;return result&lt;/code&gt;. The &lt;code&gt;result&lt;/code&gt; value is always returned automatically at the end of a procedure if there is no &lt;code&gt;return&lt;/code&gt; statement at the exit.</source>
          <target state="translated">値を返すプロシージャには、戻り値を表す暗黙の &lt;code&gt;result&lt;/code&gt; 変数が宣言されています。 &lt;code&gt;return&lt;/code&gt; 全く発現との声明はの省略形です &lt;code&gt;return result&lt;/code&gt; 。 &lt;code&gt;result&lt;/code&gt; 何が存在しない場合、値は常に手続きの最後に自動的に返される &lt;code&gt;return&lt;/code&gt; 出口で文が。</target>
        </trans-unit>
        <trans-unit id="4479e2a3631b65d0dd4c690b9db368a8f3b1652a" translate="yes" xml:space="preserve">
          <source>A project can also have a project specific configuration file named &lt;code&gt;$project.nim.cfg&lt;/code&gt; that resides in the same directory as &lt;code&gt;$project.nim&lt;/code&gt;. This file can be skipped with the &lt;code&gt;--skipProjCfg&lt;/code&gt; command line option.</source>
          <target state="translated">プロジェクトには、 &lt;code&gt;$project.nim.cfg&lt;/code&gt; と同じディレクトリにある &lt;code&gt;$project.nim&lt;/code&gt; という名前のプロジェクト固有の構成ファイルを含めることもできます。このファイルは &lt;code&gt;--skipProjCfg&lt;/code&gt; コマンドラインオプションでスキップできます。</target>
        </trans-unit>
        <trans-unit id="c839c97c3ceb25609fba06432f83144cef5a572e" translate="yes" xml:space="preserve">
          <source>A project can also have a project specific configuration file named &lt;code&gt;$project.nims&lt;/code&gt; that resides in the same directory as &lt;code&gt;$project.nim&lt;/code&gt;. This file can be skipped with the same &lt;code&gt;--skipProjCfg&lt;/code&gt; command line option.</source>
          <target state="translated">プロジェクトには、 &lt;code&gt;$project.nims&lt;/code&gt; と同じディレクトリにある &lt;code&gt;$project.nim&lt;/code&gt; という名前のプロジェクト固有の構成ファイルを含めることもできます。このファイルは、同じ &lt;code&gt;--skipProjCfg&lt;/code&gt; コマンドラインオプションでスキップできます。</target>
        </trans-unit>
        <trans-unit id="f75c52d2971823fc8165afd59430cb71ab2e4981" translate="yes" xml:space="preserve">
          <source>A project can also have a project-specific configuration file named &lt;code&gt;$project.nim.cfg&lt;/code&gt; that resides in the same directory as &lt;code&gt;$project.nim&lt;/code&gt;. This file can be skipped with the &lt;code&gt;--skipProjCfg&lt;/code&gt; command-line option.</source>
          <target state="translated">プロジェクトには、 &lt;code&gt;$project.nim.cfg&lt;/code&gt; と同じディレクトリにある &lt;code&gt;$project.nim&lt;/code&gt; という名前のプロジェクト固有の構成ファイルを含めることもできます。このファイルは、 &lt;code&gt;--skipProjCfg&lt;/code&gt; コマンドラインオプションを使用してスキップできます。</target>
        </trans-unit>
        <trans-unit id="e60afd1721ef96b7c6739e2759b02cb38c2c2d8c" translate="yes" xml:space="preserve">
          <source>A proxy can be specified as a param to any of the procedures defined in this module. To do this, use the &lt;code&gt;newProxy&lt;/code&gt; constructor. Unfortunately, only basic authentication is supported at the moment.</source>
          <target state="translated">プロキシは、このモジュールで定義されている任意のプロシージャのパラメータとして指定できます。これを行うには、 &lt;code&gt;newProxy&lt;/code&gt; コンストラクターを使用します。残念ながら、現時点では基本認証のみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="df4503ea30137e4c7e9a09a528fd25af20fa134a" translate="yes" xml:space="preserve">
          <source>A range with all bit positions for type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; のすべてのビット位置を持つ範囲</target>
        </trans-unit>
        <trans-unit id="eac1d47b4a0730fb9551845dd67bf5ea00259685" translate="yes" xml:space="preserve">
          <source>A regular expression is a pattern that is matched against a subject string from left to right. Most characters stand for themselves in a pattern, and match the corresponding characters in the subject. As a trivial example, the pattern:</source>
          <target state="translated">正規表現とは、サブジェクトの文字列に対して左から右へとマッチするパターンのことです。ほとんどの文字はパターンの中で自分自身を表し、主語の対応する文字と一致します。些細な例として、パターン。</target>
        </trans-unit>
        <trans-unit id="5df947512d73d9e3cb7375e44d4a39fd584e964d" translate="yes" xml:space="preserve">
          <source>A routine &lt;code&gt;p&lt;/code&gt; matches better than a routine &lt;code&gt;q&lt;/code&gt; if the following algorithm returns true:</source>
          <target state="translated">次のアルゴリズムがtrueを返す場合、ルーチン &lt;code&gt;p&lt;/code&gt; はルーチン &lt;code&gt;q&lt;/code&gt; よりも一致します。</target>
        </trans-unit>
        <trans-unit id="97aab15d52550bb71a657dbacc087e3c7b88fc5c" translate="yes" xml:space="preserve">
          <source>A row in a CSV file.</source>
          <target state="translated">CSVファイル内の行。</target>
        </trans-unit>
        <trans-unit id="ecbfe11a28e5b832e2b506efe04714f8406548dc" translate="yes" xml:space="preserve">
          <source>A row of a dataset. &lt;code&gt;NULL&lt;/code&gt; database values will be converted to an empty string.</source>
          <target state="translated">データセットの行。 &lt;code&gt;NULL&lt;/code&gt; データベース値は空の文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="fdff97566890f772e04c8438a24bb2cbb00af4bb" translate="yes" xml:space="preserve">
          <source>A second use of backslash provides a way of encoding non-printing characters in patterns in a visible manner. There is no restriction on the appearance of non-printing characters, apart from the binary zero that terminates a pattern, but when a pattern is being prepared by text editing, it is usually easier to use one of the following escape sequences than the binary character it represents::</source>
          <target state="translated">バックスラッシュの第二の使用は、パターン内の非印刷文字を目に見える形で符号化する方法を提供します。パターンを終了させるバイナリゼロを除けば、非印刷文字の出現に制限はありませんが、パターンがテキスト編集によって準備されているときには、それが表すバイナリ文字よりも、次のエスケープシーケンスのいずれかを使用する方が通常は簡単です。</target>
        </trans-unit>
        <trans-unit id="3eac564020abe821a021c684a0c7e182c5615b2f" translate="yes" xml:space="preserve">
          <source>A section you should use to mark &lt;span id=&quot;runnable-example_1&quot;&gt;runnable example&lt;/span&gt; code with.</source>
          <target state="translated">&lt;span id=&quot;runnable-example_1&quot;&gt;実行可能なサンプル&lt;/span&gt;コードをマークするために使用するセクション。</target>
        </trans-unit>
        <trans-unit id="d3b57f32de0396cba5ad9e9d00b3af349a475164" translate="yes" xml:space="preserve">
          <source>A sequence may be passed to a parameter that is of type &lt;em&gt;open array&lt;/em&gt;.</source>
          <target state="translated">シーケンスは、タイプが&lt;em&gt;open arrayの&lt;/em&gt;パラメーターに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="42f4d3d39137f32b8ca5b909c4ff4309a61d6eac" translate="yes" xml:space="preserve">
          <source>A sequence may be passed to an openarray parameter.</source>
          <target state="translated">シーケンスをopenarrayパラメータに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a1283ce9a305bc0127c452736c5aee8b37c6837f" translate="yes" xml:space="preserve">
          <source>A set of directories and files from the &lt;a href=&quot;ssl_certs&quot;&gt;ssl_certs&lt;/a&gt; module are scanned to locate CA certificates.</source>
          <target state="translated">&lt;a href=&quot;ssl_certs&quot;&gt;ssl_certs&lt;/a&gt;モジュールからのディレクトリとファイルのセットがスキャンされ、CA証明書が検索されます。</target>
        </trans-unit>
        <trans-unit id="c7df348109f7ffdcfedc0d707be86ae26a07b32b" translate="yes" xml:space="preserve">
          <source>A set of helpers for the POSIX module. Raw interfaces are in the other posix*.nim files.</source>
          <target state="translated">POSIXモジュール用のヘルパーのセットです。生のインターフェースは他の posix*.nim ファイルにあります。</target>
        </trans-unit>
        <trans-unit id="e9939043c42e4aaaff588930f28e3fb87a4c1d18" translate="yes" xml:space="preserve">
          <source>A set with all the possible characters.</source>
          <target state="translated">登場人物の可能性があるものを全てセットにしたもの。</target>
        </trans-unit>
        <trans-unit id="13fa5f0ea96be473acaa7e27bc838b91426d27e9" translate="yes" xml:space="preserve">
          <source>A shared GC'ed heap might be provided.</source>
          <target state="translated">共有のGC'edヒープが提供されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3cdd59cb6410981768f626d0dcabdc2c7390dce3" translate="yes" xml:space="preserve">
          <source>A shortcut for &lt;code&gt;.. ^&lt;/code&gt; to avoid the common gotcha that a space between '..' and '^' is required.</source>
          <target state="translated">'..'と '^'の間にスペースが必要であるという一般的な落とし穴を避けるための &lt;code&gt;.. ^&lt;/code&gt; のショートカット。</target>
        </trans-unit>
        <trans-unit id="eb2fa7060937552b7002d27f41621d3222ab840b" translate="yes" xml:space="preserve">
          <source>A shortcut for &lt;code&gt;a .. pred(b)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a .. pred(b)&lt;/code&gt; ショートカット。</target>
        </trans-unit>
        <trans-unit id="ec47097465bebcf2aecd8163b65ad782e31f3d56" translate="yes" xml:space="preserve">
          <source>A shortcut for &lt;code&gt;switch(astToStr(key), astToStr(val))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;switch(astToStr(key), astToStr(val))&lt;/code&gt; のショートカット。</target>
        </trans-unit>
        <trans-unit id="f58bd32b1554568ba7e0b99deb8afcbae405c442" translate="yes" xml:space="preserve">
          <source>A shortcut for &lt;code&gt;switch(astToStr(key)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;switch(astToStr(key)&lt;/code&gt; のショートカット。</target>
        </trans-unit>
        <trans-unit id="14501c8e78d3950cf5ec56e87d1f764a6e487a66" translate="yes" xml:space="preserve">
          <source>A shortcut version to assign in let blocks.</source>
          <target state="translated">letブロックで割り当てるショートカット版。</target>
        </trans-unit>
        <trans-unit id="7dd308d11ae6fe6d7f3bfcc6857d7ef9411ab7fa" translate="yes" xml:space="preserve">
          <source>A shorthand for &lt;code&gt;echo(errormsg); quit(errorcode)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;echo(errormsg); quit(errorcode)&lt;/code&gt; 省略形。quit（errorcode）。</target>
        </trans-unit>
        <trans-unit id="af38f1c5146159966de284e8a35e5d86d3ab12b9" translate="yes" xml:space="preserve">
          <source>A shorthand for:</source>
          <target state="translated">速記のことです。</target>
        </trans-unit>
        <trans-unit id="dac4b4b7dce5d63bf65005785b5b8b3dd2313f8a" translate="yes" xml:space="preserve">
          <source>A similar thing happens with C code invoking Nim code which returns a &lt;code&gt;cstring&lt;/code&gt;. Consider the following proc:</source>
          <target state="translated">&lt;code&gt;cstring&lt;/code&gt; を返すNimコードを呼び出すCコードでも同様のことが起こります。次のプロシージャを検討してください：</target>
        </trans-unit>
        <trans-unit id="c9daeb78be195c0138e8f11066e2c9965268a883" translate="yes" xml:space="preserve">
          <source>A simple XML tree generator.</source>
          <target state="translated">シンプルなXMLツリー生成器。</target>
        </trans-unit>
        <trans-unit id="a48f6996b6131883f1b9650bc68f70d8d02303fe" translate="yes" xml:space="preserve">
          <source>A simple XML tree. More efficient and simpler than the DOM.</source>
          <target state="translated">シンプルな XML ツリー。DOM よりも効率的でシンプル。</target>
        </trans-unit>
        <trans-unit id="d71dc8f8837a2ef4b3dfcb01d114a06fb9448305" translate="yes" xml:space="preserve">
          <source>A simple barrier to wait for all &lt;code&gt;spawn&lt;/code&gt;'ed tasks.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; れたすべてのタスクを待機するための単純な障壁。</target>
        </trans-unit>
        <trans-unit id="b881695a1cfe6f9170c0ac327d2994cb87b8beb2" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;&quot;*&quot;&lt;/code&gt; can be used for globbing.</source>
          <target state="translated">単一の &lt;code&gt;&quot;*&quot;&lt;/code&gt; をグロビングに使用できます。</target>
        </trans-unit>
        <trans-unit id="9113f6bde0396b300681395640f8679539962f2e" translate="yes" xml:space="preserve">
          <source>A singly linked list.</source>
          <target state="translated">シングルリンクされたリスト。</target>
        </trans-unit>
        <trans-unit id="6e84aababe949578ad498d01fd5372a6a6b7c3c7" translate="yes" xml:space="preserve">
          <source>A singly linked ring.</source>
          <target state="translated">一重に連結されたリング。</target>
        </trans-unit>
        <trans-unit id="0e14c42493cdbd0ec02152b489b1433c8bd84c95" translate="yes" xml:space="preserve">
          <source>A sink parameter &lt;em&gt;may&lt;/em&gt; be consumed once in the proc's body but doesn't have to be consumed at all. The reason for this is that signatures like &lt;code&gt;proc put(t: var Table; k: sink Key, v: sink Value)&lt;/code&gt; should be possible without any further overloads and &lt;code&gt;put&lt;/code&gt; might not take ownership of &lt;code&gt;k&lt;/code&gt; if &lt;code&gt;k&lt;/code&gt; already exists in the table. Sink parameters enable an affine type system, not a linear type system.</source>
          <target state="translated">シンクパラメータ&lt;em&gt;は&lt;/em&gt;、procの本体で一度消費される&lt;em&gt;場合&lt;/em&gt;があります&lt;em&gt;が&lt;/em&gt;、まったく消費される必要はありません。この理由は以下のように署名ということです &lt;code&gt;proc put(t: var Table; k: sink Key, v: sink Value)&lt;/code&gt; 任意の更なる過負荷とせずに可能なはず &lt;code&gt;put&lt;/code&gt; 所有ならないことがあります &lt;code&gt;k&lt;/code&gt; は場合 &lt;code&gt;k&lt;/code&gt; はすでにテーブルに存在します。シンクパラメータは、線形型システムではなく、アフィン型システムを有効にします。</target>
        </trans-unit>
        <trans-unit id="1a46cd68f2f2846ae726246b12281b2435629226" translate="yes" xml:space="preserve">
          <source>A small example:</source>
          <target state="translated">小さな例です。</target>
        </trans-unit>
        <trans-unit id="4b36d665dd33efefb1f4f6b8f221af140b9aa4bd" translate="yes" xml:space="preserve">
          <source>A special type that marks a macro as a &lt;span id=&quot;forminusloop-macro_1&quot;&gt;for-loop macro&lt;/span&gt;. See &lt;a href=&quot;manual#macros-for-loop-macro&quot;&gt;&quot;For Loop Macro&quot;&lt;/a&gt;.</source>
          <target state="translated">マクロを&lt;span id=&quot;forminusloop-macro_1&quot;&gt;forループマクロ&lt;/span&gt;としてマークする特殊なタイプ。&lt;a href=&quot;manual#macros-for-loop-macro&quot;&gt;「Forループマクロ」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="17eb06b5b98ef723497f736d4beb2106d493fd2b" translate="yes" xml:space="preserve">
          <source>A static statement/expression can be used to enforce compile time evaluation explicitly. Enforced compile time evaluation can even evaluate code that has side effects:</source>
          <target state="translated">スタティック ステートメント/式を使用して、明示的にコンパイル時評価を強制することができます。強制的なコンパイル時評価は、副作用のあるコードを評価することもできます。</target>
        </trans-unit>
        <trans-unit id="2ea07adf0c3c6173a16c7ff5ec0740d4e2076eed" translate="yes" xml:space="preserve">
          <source>A static statement/expression explicitly requires compile-time execution. Even some code that has side effects is permitted in a static block:</source>
          <target state="translated">静的なステートメント/式は、明示的にコンパイル時の実行を要求します。副作用を持つコードであっても、静的ブロック内では許可されています。</target>
        </trans-unit>
        <trans-unit id="2ba79287d30f6d88058ea5ca43075dd128b9c975" translate="yes" xml:space="preserve">
          <source>A stream that encapsulates a &lt;code&gt;File&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; をカプセル化するストリーム。</target>
        </trans-unit>
        <trans-unit id="ea0e50485f55cced7b7f2403d6ad63028a5ecfa3" translate="yes" xml:space="preserve">
          <source>A stream that encapsulates a string.</source>
          <target state="translated">文字列をカプセル化したストリーム。</target>
        </trans-unit>
        <trans-unit id="ae845c480c00f456835854fa492599a456d01a85" translate="yes" xml:space="preserve">
          <source>A strict or proper subset &lt;code&gt;s1&lt;/code&gt; has all of its elements in &lt;code&gt;s2&lt;/code&gt;, but &lt;code&gt;s2&lt;/code&gt; has more elements than &lt;code&gt;s1&lt;/code&gt;.</source>
          <target state="translated">厳密または適切なサブセット &lt;code&gt;s1&lt;/code&gt; のすべての要素は &lt;code&gt;s2&lt;/code&gt; にありますが、 &lt;code&gt;s2&lt;/code&gt; には &lt;code&gt;s1&lt;/code&gt; よりも多くの要素があります。</target>
        </trans-unit>
        <trans-unit id="c07ac55f0c8dacc1a4b7bdbadb598be3ff7f8076" translate="yes" xml:space="preserve">
          <source>A strict or proper subset &lt;code&gt;s&lt;/code&gt; has all of its members in &lt;code&gt;t&lt;/code&gt; but &lt;code&gt;t&lt;/code&gt; has more elements than &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">厳密または適切なサブセット &lt;code&gt;s&lt;/code&gt; のすべてのメンバーは &lt;code&gt;t&lt;/code&gt; にありますが、 &lt;code&gt;t&lt;/code&gt; には &lt;code&gt;s&lt;/code&gt; よりも多くの要素があります。</target>
        </trans-unit>
        <trans-unit id="199e49a636b52dd8fc54e3a6e1efcead4078f2f5" translate="yes" xml:space="preserve">
          <source>A strict or proper subset &lt;code&gt;x&lt;/code&gt; has all of its members in &lt;code&gt;y&lt;/code&gt; but &lt;code&gt;y&lt;/code&gt; has more elements than &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">厳密な又は適切なサブセット &lt;code&gt;x&lt;/code&gt; で、そのメンバーのすべてを有し &lt;code&gt;y&lt;/code&gt; が、 &lt;code&gt;y&lt;/code&gt; より多くの要素有する &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="793061e8f68073a7cc2b6e8e7cb7430e9cb435af" translate="yes" xml:space="preserve">
          <source>A strict or proper subset &lt;em&gt;s&lt;/em&gt; has all of its members in &lt;em&gt;t&lt;/em&gt; but &lt;em&gt;t&lt;/em&gt; has more elements than &lt;em&gt;s&lt;/em&gt;. Example:</source>
          <target state="translated">厳密な又は適切なサブセット&lt;em&gt;Sは&lt;/em&gt;でそのメンバーのすべてを有する&lt;em&gt;T&lt;/em&gt;が、&lt;em&gt;Tは&lt;/em&gt;より多くの要素有し&lt;em&gt;秒&lt;/em&gt;。例：</target>
        </trans-unit>
        <trans-unit id="84bd2c736b9807ca808a9e28613b62ce10e34a6b" translate="yes" xml:space="preserve">
          <source>A string stream object.</source>
          <target state="translated">文字列ストリームオブジェクト。</target>
        </trans-unit>
        <trans-unit id="692f4550479e6001b1a436a04309e4819905d924" translate="yes" xml:space="preserve">
          <source>A string surrounded by double quotation marks (&quot;string&quot;) is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.</source>
          <target state="translated">ダブルクォーテーションで囲まれた文字列(&quot;string&quot;)は、その中に含まれる空白に関係なく、一つの引数として解釈されます。引用符で囲まれた文字列は、引数に埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="70d4dbc60f1b3759a9a0ebe1370ea93bf97755e2" translate="yes" xml:space="preserve">
          <source>A string that describes the application type. Possible values: &lt;code&gt;&quot;console&quot;&lt;/code&gt;, &lt;code&gt;&quot;gui&quot;&lt;/code&gt;, &lt;code&gt;&quot;lib&quot;&lt;/code&gt;.</source>
          <target state="translated">アプリケーションタイプを説明する文字列。可能な値： &lt;code&gt;&quot;console&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;gui&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;lib&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="149db672045eac6dc65b46c1ba2493351adf8191" translate="yes" xml:space="preserve">
          <source>A string that describes the host CPU.</source>
          <target state="translated">ホストCPUを記述する文字列。</target>
        </trans-unit>
        <trans-unit id="585e2446a22a413fa5de5778d298c8f86485b6f4" translate="yes" xml:space="preserve">
          <source>A string that describes the host operating system.</source>
          <target state="translated">ホストオペレーティングシステムを記述する文字列。</target>
        </trans-unit>
        <trans-unit id="ebec3b61b900cc32aa099451f2c6e12dd07c334c" translate="yes" xml:space="preserve">
          <source>A string variable is initialized with the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">文字列変数は、空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; で初期化されます。</target>
        </trans-unit>
        <trans-unit id="c3a00e56e1710bd679d0173c57dab6fbeebbe31b" translate="yes" xml:space="preserve">
          <source>A subrange type has the same size as its base type (&lt;code&gt;int&lt;/code&gt; in the Subrange example).</source>
          <target state="translated">サブレンジタイプのサイズは、ベースタイプと同じです（サブレンジの例では &lt;code&gt;int&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7a08933979326f8850950a1173db1b99805f1785" translate="yes" xml:space="preserve">
          <source>A subrange type is a range of values from an integer or enumeration type (the base type). Example:</source>
          <target state="translated">サブレンジ型とは、整数型や列挙型(基底型)からの値の範囲のことです。例。</target>
        </trans-unit>
        <trans-unit id="5216761dae1ae277a963814830873f1da9e08d5b" translate="yes" xml:space="preserve">
          <source>A subrange type is a range of values from an ordinal or floating point type (the base type). To define a subrange type, one must specify it's limiting values: the lowest and highest value of the type:</source>
          <target state="translated">サブレンジ型は、序数型または浮動小数点型(基底型)からの値の範囲です。サブレンジ型を定義するには、その制限値である型の最低値と最高値を指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3f24fd7c42fe941770b40eb0bc219b80b82d9b14" translate="yes" xml:space="preserve">
          <source>A subrange type is a range of values from an ordinal or floating-point type (the base type). To define a subrange type, one must specify its limiting values -- the lowest and highest value of the type. For example:</source>
          <target state="translated">サブレンジ型は、序数型または浮動小数点型(基底型)からの値の範囲です。サブレンジ型を定義するには、その制限値である型の最低値と最高値を指定しなければなりません。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fa613e17f732dd0c25c531cfb02c7803d1c28c45" translate="yes" xml:space="preserve">
          <source>A subset &lt;code&gt;s1&lt;/code&gt; has all of its elements in &lt;code&gt;s2&lt;/code&gt;, and &lt;code&gt;s2&lt;/code&gt; doesn't necessarily have more elements than &lt;code&gt;s1&lt;/code&gt;. That is, &lt;code&gt;s1&lt;/code&gt; can be equal to &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="translated">サブセット &lt;code&gt;s1&lt;/code&gt; のすべての要素は &lt;code&gt;s2&lt;/code&gt; にあり、 &lt;code&gt;s2&lt;/code&gt; には必ずしも &lt;code&gt;s1&lt;/code&gt; より多くの要素があるとは限りません。つまり、 &lt;code&gt;s1&lt;/code&gt; は &lt;code&gt;s2&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="aae915dc513f286fedae6cff5178a0c89a9f424a" translate="yes" xml:space="preserve">
          <source>A subset &lt;code&gt;s&lt;/code&gt; has all of its members in &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; doesn't necessarily have more members than &lt;code&gt;s&lt;/code&gt;. That is, &lt;code&gt;s&lt;/code&gt; can be equal to &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">サブセット &lt;code&gt;s&lt;/code&gt; は &lt;code&gt;t&lt;/code&gt; にすべてのメンバーを持ち、 &lt;code&gt;t&lt;/code&gt; は必ずしも &lt;code&gt;s&lt;/code&gt; より多くのメンバーを持っているとは限りません。つまり、 &lt;code&gt;s&lt;/code&gt; は &lt;code&gt;t&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="4105f2c4e0ac639778e46c5d4f3636e4328d553a" translate="yes" xml:space="preserve">
          <source>A subset &lt;code&gt;x&lt;/code&gt; has all of its members in &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; doesn't necessarily have more members than &lt;code&gt;x&lt;/code&gt;. That is, &lt;code&gt;x&lt;/code&gt; can be equal to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">サブセット &lt;code&gt;x&lt;/code&gt; でそのメンバーのすべてを有し &lt;code&gt;y&lt;/code&gt; 及び &lt;code&gt;y&lt;/code&gt; 必ずしも以上のメンバーがありません &lt;code&gt;x&lt;/code&gt; 。つまり、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;y&lt;/code&gt; と等しくなります。</target>
        </trans-unit>
        <trans-unit id="05319ab331bb8be9fb80a1ea2da5bff936f37a01" translate="yes" xml:space="preserve">
          <source>A subset &lt;em&gt;s&lt;/em&gt; has all of its members in &lt;em&gt;t&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt; doesn't necessarily have more members than &lt;em&gt;s&lt;/em&gt;. That is, &lt;em&gt;s&lt;/em&gt; can be equal to &lt;em&gt;t&lt;/em&gt;. Example:</source>
          <target state="translated">サブセット&lt;em&gt;sの&lt;/em&gt;メンバーはすべて&lt;em&gt;tに&lt;/em&gt;あり、&lt;em&gt;tの&lt;/em&gt;メンバーが&lt;em&gt;s&lt;/em&gt;よりも多いとは限りません。つまり、&lt;em&gt;s&lt;/em&gt;は&lt;em&gt;t&lt;/em&gt;と等しくなる可能性があります。例：</target>
        </trans-unit>
        <trans-unit id="23fcaa56fd8e693a2e943e96baf6a166ee24925f" translate="yes" xml:space="preserve">
          <source>A subtle issue with procedural types is that the calling convention of the procedure influences the type compatibility: procedural types are only compatible if they have the same calling convention. As a special extension, a procedure of the calling convention &lt;code&gt;nimcall&lt;/code&gt; can be passed to a parameter that expects a proc of the calling convention &lt;code&gt;closure&lt;/code&gt;.</source>
          <target state="translated">手続き型の微妙な問題は、手続きの呼び出し規約が型の互換性に影響するということです。手続き型は、同じ呼び出し規約を持つ場合にのみ互換性があります。特別な拡張として、呼び出し規約の手順 &lt;code&gt;nimcall&lt;/code&gt; は、呼び出し規約のPROC期待するパラメータに渡すことができる &lt;code&gt;closure&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="33ba9ca12af44d34318811768b34fc09edc238c4" translate="yes" xml:space="preserve">
          <source>A subtle issue with procedural types is that the calling convention of the procedure influences the type compatibility: procedural types are only compatible if they have the same calling convention. The different calling conventions are listed in the &lt;a href=&quot;manual#types-procedural-type&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">手続き型の微妙な問題は、手続きの呼び出し規約が型の互換性に影響するということです。手続き型は、同じ呼び出し規約を持つ場合にのみ互換性があります。さまざまな呼び出し規約が&lt;a href=&quot;manual#types-procedural-type&quot;&gt;マニュアルに&lt;/a&gt;リストされています。</target>
        </trans-unit>
        <trans-unit id="b1fea738d80cf9eb7066f6737496184c2e3dc962" translate="yes" xml:space="preserve">
          <source>A successful dereferencing operation &lt;code&gt;p[]&lt;/code&gt; implies that &lt;code&gt;p&lt;/code&gt; is not nil. This can be exploited by the implementation to optimize code like:</source>
          <target state="translated">逆参照操作 &lt;code&gt;p[]&lt;/code&gt; が成功すると、 &lt;code&gt;p&lt;/code&gt; がnilではないことを意味します。これは、実装によって悪用され、次のようなコードを最適化できます。</target>
        </trans-unit>
        <trans-unit id="a98d0d55b4f56cd1973186508a85d670c67f313d" translate="yes" xml:space="preserve">
          <source>A symbol can be forced to be open by a &lt;span id=&quot;mixin_1&quot;&gt;mixin&lt;/span&gt; declaration:</source>
          <target state="translated">シンボルは、&lt;span id=&quot;mixin_1&quot;&gt;ミックスイン&lt;/span&gt;宣言によって強制的に開くことができます。</target>
        </trans-unit>
        <trans-unit id="0462b1952d8449154ce73caf7ef4db9422926829" translate="yes" xml:space="preserve">
          <source>A symbol of a module &lt;em&gt;can&lt;/em&gt; be &lt;em&gt;qualified&lt;/em&gt; with the &lt;code&gt;module.symbol&lt;/code&gt; syntax. And if a symbol is ambiguous, it &lt;em&gt;must&lt;/em&gt; be qualified. A symbol is ambiguous if it is defined in two (or more) different modules and both modules are imported by a third one:</source>
          <target state="translated">モジュールのシンボルが&lt;em&gt;できる&lt;/em&gt;ことが&lt;em&gt;認定&lt;/em&gt;して &lt;code&gt;module.symbol&lt;/code&gt; の構文。シンボルがあいまいな場合は、修飾する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。シンボルが2つ（またはそれ以上）の異なるモジュールで定義されていて、両方のモジュールが3番目のモジュールによってインポートされている場合、そのシンボルはあいまいです。</target>
        </trans-unit>
        <trans-unit id="b3a7ad38688e4496bf760973d6609aeb8d3bfad8" translate="yes" xml:space="preserve">
          <source>A symbol which is a &lt;code&gt;let&lt;/code&gt; variable.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 変数であるシンボル。</target>
        </trans-unit>
        <trans-unit id="25afae3a203b27eb5151fb8ba040656c33e3555a" translate="yes" xml:space="preserve">
          <source>A symbol which is a constant.</source>
          <target state="translated">定数である記号。</target>
        </trans-unit>
        <trans-unit id="18336a58e1597be288809ec54b26b76e902b5f18" translate="yes" xml:space="preserve">
          <source>A symbol which is a converter.</source>
          <target state="translated">変換器であるシンボル。</target>
        </trans-unit>
        <trans-unit id="34e5a133463d35676b1ce7b0d26dcb4084186353" translate="yes" xml:space="preserve">
          <source>A symbol which is a field in a tuple or an object.</source>
          <target state="translated">タプルやオブジェクトのフィールドである記号。</target>
        </trans-unit>
        <trans-unit id="dbc7ff0193694a8a6df3edaa4feafaf08a548d9c" translate="yes" xml:space="preserve">
          <source>A symbol which is a field in an enumeration.</source>
          <target state="translated">列挙の中のフィールドである記号。</target>
        </trans-unit>
        <trans-unit id="b0f4c02b65e3aca97fa198aef1b1d7f8f50540e1" translate="yes" xml:space="preserve">
          <source>A symbol which is a generic parameter.</source>
          <target state="translated">一般的なパラメータであるシンボル。</target>
        </trans-unit>
        <trans-unit id="cee1e54f067d3a3df195ebd26b86fefccf9d512a" translate="yes" xml:space="preserve">
          <source>A symbol which is a macro.</source>
          <target state="translated">マクロであるシンボル。</target>
        </trans-unit>
        <trans-unit id="8ba65c84aa50b6b4fa8d3cfd3055d6bba8e59df2" translate="yes" xml:space="preserve">
          <source>A symbol which is a method.</source>
          <target state="translated">方法である記号。</target>
        </trans-unit>
        <trans-unit id="397a59c937f508b55f4f508768e9f30b05e604a7" translate="yes" xml:space="preserve">
          <source>A symbol which is a module.</source>
          <target state="translated">モジュールであるシンボル。</target>
        </trans-unit>
        <trans-unit id="2ebe7a11b22366113570683c1b68d2ed707218ec" translate="yes" xml:space="preserve">
          <source>A symbol which is a parameter.</source>
          <target state="translated">パラメータであるシンボル。</target>
        </trans-unit>
        <trans-unit id="28496412faf0d454dab9dc1a6af576954c0a1ed5" translate="yes" xml:space="preserve">
          <source>A symbol which is a proc.</source>
          <target state="translated">調達しているシンボル。</target>
        </trans-unit>
        <trans-unit id="b83a50e7c38bef4fa30f012bba6b90bc90afc9ea" translate="yes" xml:space="preserve">
          <source>A symbol which is a template.</source>
          <target state="translated">テンプレートとなるシンボル。</target>
        </trans-unit>
        <trans-unit id="3462dea1dd2d1f68df6439bcca6ca7bca98f2daf" translate="yes" xml:space="preserve">
          <source>A symbol which is a type.</source>
          <target state="translated">型である記号。</target>
        </trans-unit>
        <trans-unit id="2a1357b126b87914b1b6f8a549043e8db1b4ede2" translate="yes" xml:space="preserve">
          <source>A symbol which is a variable.</source>
          <target state="translated">変数である記号。</target>
        </trans-unit>
        <trans-unit id="2d0634ee6e934140b8250f79b8ba8901843ddbb9" translate="yes" xml:space="preserve">
          <source>A symbol which is an iterator.</source>
          <target state="translated">イテレータであるシンボル。</target>
        </trans-unit>
        <trans-unit id="4e393c2bf071d79fe321a01e0a6eea1010d9f40a" translate="yes" xml:space="preserve">
          <source>A system call for device-specific input/output operations and other operations which cannot be expressed by regular system calls</source>
          <target state="translated">デバイス固有の入出力操作など、通常のシステムコールでは表現できない操作のためのシステムコール</target>
        </trans-unit>
        <trans-unit id="fc9ce8dd56e57484f7771a0858bc6ea64b79d22b" translate="yes" xml:space="preserve">
          <source>A table constructor is syntactic sugar for an array constructor:</source>
          <target state="translated">テーブルコンストラクタは配列コンストラクタの構文的な糖質です。</target>
        </trans-unit>
        <trans-unit id="4a7a5f8021ef6500926b1cb58e60a0f63620d3dd" translate="yes" xml:space="preserve">
          <source>A table literal can be put into a &lt;code&gt;const&lt;/code&gt; section and the compiler can easily put it into the executable's data section just like it can for arrays and the generated data section requires a minimal amount of memory.</source>
          <target state="translated">テーブルリテラルは &lt;code&gt;const&lt;/code&gt; セクションに入れることができ、コンパイラーは配列の場合と同じように実行ファイルのデータセクションに簡単に入れることができ、生成されたデータセクションは最小限のメモリを必要とします。</target>
        </trans-unit>
        <trans-unit id="cfef19ba2df017b1840fca787af14959a3b9fbf8" translate="yes" xml:space="preserve">
          <source>A tag has to be a type name. A &lt;code&gt;tags&lt;/code&gt; list - like a &lt;code&gt;raises&lt;/code&gt; list - can also be attached to a proc type. This affects type compatibility.</source>
          <target state="translated">タグはタイプ名でなければなりません。 &lt;code&gt;tags&lt;/code&gt; リストは-のような &lt;code&gt;raises&lt;/code&gt; リスト-また、プロシージャ・タイプに取り付けることができます。これは型の互換性に影響します。</target>
        </trans-unit>
        <trans-unit id="c7c12a1bbcf06851adacdd13e78109f4548a353d" translate="yes" xml:space="preserve">
          <source>A template is a &lt;span id=&quot;hygienic_1&quot;&gt;hygienic&lt;/span&gt; macro and so opens a new scope. Most symbols are bound from the definition scope of the template:</source>
          <target state="translated">テンプレートは&lt;span id=&quot;hygienic_1&quot;&gt;衛生的な&lt;/span&gt;マクロ&lt;span id=&quot;hygienic_1&quot;&gt;な&lt;/span&gt;ので、新しいスコープを開きます。ほとんどのシンボルは、テンプレートの定義スコープからバインドされています。</target>
        </trans-unit>
        <trans-unit id="3d0909aebdac7146ab483112e0cffc46ee0650d8" translate="yes" xml:space="preserve">
          <source>A template is a simple form of a macro: It is a simple substitution mechanism that operates on Nim's abstract syntax trees. It is processed in the semantic pass of the compiler.</source>
          <target state="translated">テンプレートはマクロの単純な形です。Nim の抽象構文ツリー上で動作する単純な置換機構です。コンパイラのセマンティックパスで処理されます。</target>
        </trans-unit>
        <trans-unit id="4957f2f98151d72020ad997ae5b0177dbfe8bd70" translate="yes" xml:space="preserve">
          <source>A template where every parameter is &lt;code&gt;untyped&lt;/code&gt; is called an &lt;span id=&quot;immediate_1&quot;&gt;immediate&lt;/span&gt; template. For historical reasons templates can be explicitly annotated with an &lt;code&gt;immediate&lt;/code&gt; pragma and then these templates do not take part in overloading resolution and the parameters' types are &lt;em&gt;ignored&lt;/em&gt; by the compiler. Explicit immediate templates are now deprecated.</source>
          <target state="translated">すべてのパラメーターが &lt;code&gt;untyped&lt;/code&gt; 指定されていないテンプレートは、&lt;span id=&quot;immediate_1&quot;&gt;即時&lt;/span&gt;テンプレートと呼ばれます。歴史的な理由により、テンプレートには &lt;code&gt;immediate&lt;/code&gt; プラグマで明示的に注釈を付けることができ、これらのテンプレートはオーバーロードの解決に参加せず、パラメーターの型はコンパイラーによって&lt;em&gt;無視さ&lt;/em&gt;れます。明示的な即時テンプレートは廃止されました。</target>
        </trans-unit>
        <trans-unit id="2c5c46bd6cd44a46ae88e10ca57070a21a6c5dbc" translate="yes" xml:space="preserve">
          <source>A test suite is a series of one or more related tests sharing a common fixture (&lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;teardown&lt;/code&gt;). The fixture is executed for EACH test.</source>
          <target state="translated">テストスイートは、共通のフィクスチャ（ &lt;code&gt;setup&lt;/code&gt; 、 &lt;code&gt;teardown&lt;/code&gt; ）を共有する一連の1つ以上の関連テストです。フィクスチャは、各テストに対して実行されます。</target>
        </trans-unit>
        <trans-unit id="f697950925359df8943281d389dcc452af1b91bb" translate="yes" xml:space="preserve">
          <source>A thread is destructed when the &lt;code&gt;.thread&lt;/code&gt; proc returns normally or when it raises an exception. Note that unhandled exceptions in a thread nevertheless cause the whole process to die.</source>
          <target state="translated">&lt;code&gt;.thread&lt;/code&gt; procが正常に戻るか、例外が発生すると、スレッドは破棄されます。それでも、スレッド内の未処理の例外により、プロセス全体が停止することに注意してください。</target>
        </trans-unit>
        <trans-unit id="31bf8aebbb82c9b930fd2c075ab23a6c84bd7bab" translate="yes" xml:space="preserve">
          <source>A thread proc is passed to &lt;code&gt;createThread&lt;/code&gt; or &lt;code&gt;spawn&lt;/code&gt; and invoked indirectly; so the &lt;code&gt;thread&lt;/code&gt; pragma implies &lt;code&gt;procvar&lt;/code&gt;.</source>
          <target state="translated">スレッド &lt;code&gt;createThread&lt;/code&gt; または &lt;code&gt;spawn&lt;/code&gt; に渡され、間接的に呼び出されます。したがって、 &lt;code&gt;thread&lt;/code&gt; プラグマは &lt;code&gt;procvar&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="c0f8163c51d43eedc6caebe9eaa4ac659b3f787e" translate="yes" xml:space="preserve">
          <source>A thread-local &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">スレッドローカル &lt;code&gt;var&lt;/code&gt; または &lt;code&gt;let&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41bb5d8b499e01e5a1190386e45f8f1ab3dfd432" translate="yes" xml:space="preserve">
          <source>A thunk would need to call 'returnsDefaultCC[i]' somehow and that would require an &lt;em&gt;additional&lt;/em&gt; closure generation... Ok, not really, but it requires to pass the function to call. So we'd end up with 2 indirect calls instead of one. Another much more severe problem which this solution is that it's not GC-safe to pass a proc pointer around via a generic &lt;code&gt;ref&lt;/code&gt; type.</source>
          <target state="translated">サンクは 'returnsDefaultCC [i]'を何らかの方法で呼び出す必要があり、&lt;em&gt;追加の&lt;/em&gt;クロージャー生成が必要になります... わかりましたが、実際には呼び出しに関数を渡す必要があります。したがって、1つではなく2つの間接呼び出しが発生します。このソリューションのもう1つのはるかに深刻な問題は、汎用の &lt;code&gt;ref&lt;/code&gt; 型を介してプロシージャポインターを渡すことがGCセーフではないことです。</target>
        </trans-unit>
        <trans-unit id="a3b8fb864073dd8b8ee82885b71745cbd42bd751" translate="yes" xml:space="preserve">
          <source>A timeout can be specified in milliseconds, if data is not received within the specified time a TimeoutError exception will be raised.</source>
          <target state="translated">タイムアウトはミリ秒単位で指定でき、指定した時間内にデータを受信しなかった場合は TimeoutError 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a71df16ade8aee765ef43a13e09747416cdfc482" translate="yes" xml:space="preserve">
          <source>A timeout can be specified in milliseconds, if data is not received within the specified time an ETimeout exception will be raised.</source>
          <target state="translated">タイムアウトはミリ秒単位で指定することができ、指定した時間内にデータが受信されなかった場合は ETimeout 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="43dcf2374a63395e293bd9039f8d75e19cabb5f4" translate="yes" xml:space="preserve">
          <source>A timeout may be specified in milliseconds, if enough data is not received within the time specified a TimeoutError exception will be raised.</source>
          <target state="translated">タイムアウトはミリ秒単位で指定することができ、指定した時間内に十分なデータを受信できなかった場合は TimeoutError 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="9b5284b25f36831bd8cd3b0848696b52af7ef955" translate="yes" xml:space="preserve">
          <source>A timeout may be specified in milliseconds, if enough data is not received within the time specified an ETimeout exception will be raised.</source>
          <target state="translated">タイムアウトはミリ秒単位で指定することができ、指定した時間内に十分なデータが受信されなかった場合は、ETimout例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b206d5f711dced99df1aa8e9ea0d1479edc748b9" translate="yes" xml:space="preserve">
          <source>A timeout may be specified in milliseconds, if enough data is not received within the time specified an TimeoutError exception will be raised.</source>
          <target state="translated">タイムアウトはミリ秒単位で指定することができ、指定した時間内に十分なデータを受信できなかった場合は TimeoutError 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="5a5e0bec046a288f45da3539bee961bd4b7e1bc5" translate="yes" xml:space="preserve">
          <source>A tuple type defines various named &lt;em&gt;fields&lt;/em&gt; and an &lt;em&gt;order&lt;/em&gt; of the fields. The constructor &lt;code&gt;()&lt;/code&gt; can be used to construct tuples. The order of the fields in the constructor must match the order in the tuple's definition. Different tuple-types are &lt;em&gt;equivalent&lt;/em&gt; if they specify fields of the same type and of the same name in the same order.</source>
          <target state="translated">タプル型は、さまざまな名前付き&lt;em&gt;フィールド&lt;/em&gt;と&lt;em&gt;フィールド&lt;/em&gt;の&lt;em&gt;順序&lt;/em&gt;を定義します。コンストラクター &lt;code&gt;()&lt;/code&gt; を使用してタプルを作成できます。コンストラクターのフィールドの順序は、タプルの定義の順序と一致している必要があります。異なるタプルタイプは、同じタイプで同じ名前のフィールドを同じ順序で指定&lt;em&gt;する&lt;/em&gt;場合、&lt;em&gt;同等&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="5e6444b3f99eb953e87888c66966bcbc524ea4f4" translate="yes" xml:space="preserve">
          <source>A tuple with one unnamed field can be constructed with the parentheses and a trailing comma:</source>
          <target state="translated">1つの名前のないフィールドを持つタプルは、括弧と末尾のカンマで構築することができます。</target>
        </trans-unit>
        <trans-unit id="14170c2ff1e7de54f4e2348d1e871df1403c7064" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;a&lt;/code&gt; is &lt;strong&gt;explicitly&lt;/strong&gt; convertible to type &lt;code&gt;b&lt;/code&gt; iff the following algorithm returns true:</source>
          <target state="translated">タイプ &lt;code&gt;a&lt;/code&gt; は、次のアルゴリズムがtrueを返す場合に限り、タイプ &lt;code&gt;b&lt;/code&gt; に&lt;strong&gt;明示的に&lt;/strong&gt;変換できます。</target>
        </trans-unit>
        <trans-unit id="0e266a33b4be68e2d75b658bf09d5fcd023a82b7" translate="yes" xml:space="preserve">
          <source>A type &lt;code&gt;a&lt;/code&gt; is &lt;strong&gt;implicitly&lt;/strong&gt; convertible to type &lt;code&gt;b&lt;/code&gt; iff the following algorithm returns true:</source>
          <target state="translated">タイプ &lt;code&gt;a&lt;/code&gt; は、次のアルゴリズムがtrueを返す場合、&lt;strong&gt;暗黙的&lt;/strong&gt;にタイプ &lt;code&gt;b&lt;/code&gt; に変換できます。</target>
        </trans-unit>
        <trans-unit id="7dc18dc1dcffe82a8fb4389b39ff6e417d37bfc5" translate="yes" xml:space="preserve">
          <source>A type class can be used directly as the parameter's type.</source>
          <target state="translated">型クラスは、パラメータの型として直接使用することができます。</target>
        </trans-unit>
        <trans-unit id="506a88b6ff206893ad4b7e57e9c4e7e99b518ff4" translate="yes" xml:space="preserve">
          <source>A type class is a special pseudo-type that can be used to match against types in the context of overload resolution or the &lt;code&gt;is&lt;/code&gt; operator. Nim supports the following built-in type classes:</source>
          <target state="translated">型クラスは、オーバーロード解決または &lt;code&gt;is&lt;/code&gt; 演算子のコンテキストで型と照合するために使用できる特別な疑似型です。Nimは、次の組み込み型クラスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="d889810de0813b3ec269aad080ce51f23f302bb5" translate="yes" xml:space="preserve">
          <source>A type conversion &lt;code&gt;T(e)&lt;/code&gt; is a path expression.</source>
          <target state="translated">型変換 &lt;code&gt;T(e)&lt;/code&gt; はパス式です。</target>
        </trans-unit>
        <trans-unit id="a1e248a89a87db7e3a826b410d2791efe05a16bd" translate="yes" xml:space="preserve">
          <source>A type representing a directory stream.</source>
          <target state="translated">ディレクトリストリームを表すタイプ。</target>
        </trans-unit>
        <trans-unit id="ec2661446eb8287aeb52ad012da364775c3dbaac" translate="yes" xml:space="preserve">
          <source>A type section begins with the &lt;code&gt;type&lt;/code&gt; keyword. It contains multiple type definitions. A type definition binds a type to a name. Type definitions can be recursive or even mutually recursive. Mutually recursive types are only possible within a single &lt;code&gt;type&lt;/code&gt; section. Nominal types like &lt;code&gt;objects&lt;/code&gt; or &lt;code&gt;enums&lt;/code&gt; can only be defined in a &lt;code&gt;type&lt;/code&gt; section.</source>
          <target state="translated">typeセクションは &lt;code&gt;type&lt;/code&gt; キーワードで始まります。複数の型定義が含まれています。タイプ定義は、タイプを名前にバインドします。タイプ定義は、再帰的または相互に再帰的なものにすることができます。相互再帰型は、単一の &lt;code&gt;type&lt;/code&gt; セクション内でのみ可能です。 &lt;code&gt;objects&lt;/code&gt; や &lt;code&gt;enums&lt;/code&gt; 型などの公称型は、 &lt;code&gt;type&lt;/code&gt; セクションでのみ定義できます。</target>
        </trans-unit>
        <trans-unit id="be7a9f47604f0611af9fa5403b9d09653a88c565" translate="yes" xml:space="preserve">
          <source>A type specialized version of &lt;code&gt;..&amp;lt;&lt;/code&gt; for convenience so that mixing integer types works better.</source>
          <target state="translated">整数型の混合がより適切に機能するように、便宜上 &lt;code&gt;..&amp;lt;&lt;/code&gt; の型に特化したバージョン。</target>
        </trans-unit>
        <trans-unit id="0511cf3cc72e09256f19cf736ca74f42546431bf" translate="yes" xml:space="preserve">
          <source>A type specialized version of &lt;code&gt;..&lt;/code&gt; for convenience so that mixing integer types work better.</source>
          <target state="translated">整数型の混合がより効果的になるように、 &lt;code&gt;..&lt;/code&gt; の型専用バージョン。</target>
        </trans-unit>
        <trans-unit id="9ebdff8f30923670788ff9aaae0394936cf6a032" translate="yes" xml:space="preserve">
          <source>A type specialized version of &lt;code&gt;..&lt;/code&gt; for convenience so that mixing integer types works better.</source>
          <target state="translated">整数型の混合がより適切に機能するように、便宜上 &lt;code&gt;..&lt;/code&gt; の型に特化したバージョン。</target>
        </trans-unit>
        <trans-unit id="104ce833879be4ffac814c9243c526f5122867af" translate="yes" xml:space="preserve">
          <source>A valid identifier starts with a character of the set &lt;code&gt;IdentStartChars&lt;/code&gt; and is followed by any number of characters of the set &lt;code&gt;IdentChars&lt;/code&gt;.</source>
          <target state="translated">有効な識別子は、セット &lt;code&gt;IdentStartChars&lt;/code&gt; の文字で始まり、その後にセットIdentCharsの任意の数の文字が &lt;code&gt;IdentChars&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1aca1ed394a97d0358e43ad02e64f2e9f0dad035" translate="yes" xml:space="preserve">
          <source>A valid identifier starts with a character of the set &lt;em&gt;IdentStartChars&lt;/em&gt; and is followed by any number of characters of the set &lt;em&gt;IdentChars&lt;/em&gt;.</source>
          <target state="translated">有効な識別子は、セット&lt;em&gt;IdentStartCharsの&lt;/em&gt;文字で始まり、その後にセット&lt;em&gt;IdentCharsの&lt;/em&gt;任意の数の文字が&lt;em&gt;続き&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7e7d8bd354c4774606fc14c89770f32a756c621c" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;Option[T]&lt;/code&gt; either contains a value &lt;code&gt;x&lt;/code&gt; (represented as &lt;code&gt;some(x)&lt;/code&gt;) or is empty (&lt;code&gt;none(T)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Option[T]&lt;/code&gt; 型の値には、値 &lt;code&gt;x&lt;/code&gt; （ &lt;code&gt;some(x)&lt;/code&gt; として表される）が含まれるか、空（ &lt;code&gt;none(T)&lt;/code&gt; ）になります。</target>
        </trans-unit>
        <trans-unit id="d0abd94780a5ea8e9be893452be742a7ec90a256" translate="yes" xml:space="preserve">
          <source>A value of type &lt;code&gt;Option[T]&lt;/code&gt; either contains a value &lt;em&gt;x&lt;/em&gt; (represented as &lt;code&gt;some(x)&lt;/code&gt;) or is empty (&lt;code&gt;none(T)&lt;/code&gt;).</source>
          <target state="translated">タイプ &lt;code&gt;Option[T]&lt;/code&gt; の値は、値&lt;em&gt;x&lt;/em&gt;（ &lt;code&gt;some(x)&lt;/code&gt; として表される）を含むか、空（ &lt;code&gt;none(T)&lt;/code&gt; ）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="061691c897942e6f7639e5b9fc01836fcff953a0" translate="yes" xml:space="preserve">
          <source>A variable can be marked with the &lt;code&gt;threadvar&lt;/code&gt; pragma, which makes it a &lt;span id=&quot;threadminuslocal_1&quot;&gt;thread-local&lt;/span&gt; variable; Additionally, this implies all the effects of the &lt;code&gt;global&lt;/code&gt; pragma.</source>
          <target state="translated">変数は &lt;code&gt;threadvar&lt;/code&gt; プラグマでマークできます。これにより、変数は&lt;span id=&quot;threadminuslocal_1&quot;&gt;スレッドローカル&lt;/span&gt;変数になります。さらに、これは &lt;code&gt;global&lt;/code&gt; プラグマのすべての影響を意味します。</target>
        </trans-unit>
        <trans-unit id="c765eca0341d3fd35e0459d767a19482d988b83b" translate="yes" xml:space="preserve">
          <source>A variable length integer encoding implementation inspired by SQLite.</source>
          <target state="translated">SQLite にインスパイアされた可変長整数エンコーディングの実装。</target>
        </trans-unit>
        <trans-unit id="6cf2d03ae6a2d13d0af73951ec3e536467f5ec85" translate="yes" xml:space="preserve">
          <source>A variable of a structured type can hold multiple values at the same time. Structured types can be nested to unlimited levels. Arrays, sequences, tuples, objects and sets belong to the structured types.</source>
          <target state="translated">構造化型の変数は、同時に複数の値を保持することができます。構造化型は、無制限のレベルまで入れ子にすることができます。配列、シーケンス、タプル、オブジェクト、およびセットは構造化型に属します。</target>
        </trans-unit>
        <trans-unit id="615d13569c878522ca7102777ce66d9126a9f4e3" translate="yes" xml:space="preserve">
          <source>A variable of a structured type can hold multiple values at the same time. Structured types can be nested to unlimited levels. Arrays, sequences, tuples, objects, and sets belong to the structured types.</source>
          <target state="translated">構造化型の変数は、同時に複数の値を保持することができます。構造化型は、無制限に入れ子にすることができます。配列、シーケンス、タプル、オブジェクト、およびセットは構造化型に属します。</target>
        </trans-unit>
        <trans-unit id="383eca27423209815099effeedb639e0e4c860fc" translate="yes" xml:space="preserve">
          <source>A variable of a tuple or object type is a heterogeneous storage container. A tuple or object defines various named &lt;em&gt;fields&lt;/em&gt; of a type. A tuple also defines a lexicographic &lt;em&gt;order&lt;/em&gt; of the fields. Tuples are meant to be heterogeneous storage types with few abstractions. The &lt;code&gt;()&lt;/code&gt; syntax can be used to construct tuples. The order of the fields in the constructor must match the order of the tuple's definition. Different tuple-types are &lt;em&gt;equivalent&lt;/em&gt; if they specify the same fields of the same type in the same order. The &lt;em&gt;names&lt;/em&gt; of the fields also have to be identical.</source>
          <target state="translated">タプルまたはオブジェクトタイプの変数は、異種ストレージコンテナです。タプルまたはオブジェクトは、タイプのさまざまな名前付き&lt;em&gt;フィールド&lt;/em&gt;を定義します。タプルは、フィールドの辞書式&lt;em&gt;順序&lt;/em&gt;も定義します。タプルは、抽象化がほとんどない異種ストレージタイプであることが意図されています。 &lt;code&gt;()&lt;/code&gt; 構文はタプルを構築するために使用することができます。コンストラクターのフィールドの順序は、タプルの定義の順序と一致する必要があります。同じタイプの同じフィールドを同じ順序で指定&lt;em&gt;する&lt;/em&gt;場合、異なるタプルタイプは&lt;em&gt;同等&lt;/em&gt;です。フィールドの&lt;em&gt;名前&lt;/em&gt;も同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="c3f3d14f490e58bdf5285ce0bef4d7745002ec1a" translate="yes" xml:space="preserve">
          <source>A variable of a tuple or object type is a heterogeneous storage container. A tuple or object defines various named &lt;em&gt;fields&lt;/em&gt; of a type. A tuple also defines an &lt;em&gt;order&lt;/em&gt; of the fields. Tuples are meant for heterogeneous storage types with no overhead and few abstraction possibilities. The constructor &lt;code&gt;()&lt;/code&gt; can be used to construct tuples. The order of the fields in the constructor must match the order of the tuple's definition. Different tuple-types are &lt;em&gt;equivalent&lt;/em&gt; if they specify the same fields of the same type in the same order. The &lt;em&gt;names&lt;/em&gt; of the fields also have to be identical.</source>
          <target state="translated">タプルまたはオブジェクト型の変数は、異種ストレージコンテナーです。タプルまたはオブジェクトは、タイプのさまざまな名前付き&lt;em&gt;フィールド&lt;/em&gt;を定義します。タプルはフィールドの&lt;em&gt;順序&lt;/em&gt;も定義します。タプルは、オーバーヘッドがなく、抽象化の可能性がほとんどない異種ストレージタイプ向けです。コンストラクター &lt;code&gt;()&lt;/code&gt; を使用してタプルを作成できます。コンストラクター内のフィールドの順序は、タプルの定義の順序と一致している必要があります。異なるタプルタイプは、同じタイプの同じフィールドを同じ順序で指定&lt;em&gt;する&lt;/em&gt;場合、&lt;em&gt;同等&lt;/em&gt;です。フィールドの&lt;em&gt;名前&lt;/em&gt;も同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="7bdc1f89d378b40222906883361628b1181e0aa3" translate="yes" xml:space="preserve">
          <source>A variable of an enumeration type can only be assigned one of the enumeration's specified values. These values are a set of ordered symbols. Each symbol is mapped to an integer value internally. The first symbol is represented at runtime by 0, the second by 1 and so on. For example:</source>
          <target state="translated">列挙型の変数には、列挙型の指定された値のうちの1つしか代入できません。これらの値は順序づけられたシンボルの集合です。各シンボルは内部的に整数値にマップされています。最初のシンボルは実行時に0、2番目のシンボルは1などで表されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="03eb03003aebc272b7eb136b33ffcf55da04a588" translate="yes" xml:space="preserve">
          <source>A variant of &lt;code&gt;connect&lt;/code&gt; for non-blocking sockets.</source>
          <target state="translated">非ブロッキングソケットの &lt;code&gt;connect&lt;/code&gt; のバリアント。</target>
        </trans-unit>
        <trans-unit id="b2257c4803acf9cbae2e6013d672e5f7d0b8ca99" translate="yes" xml:space="preserve">
          <source>A view &lt;code&gt;v&lt;/code&gt; can borrow from multiple different locations. However, the borrow is always the full span of &lt;code&gt;v&lt;/code&gt;'s lifetime and every location that is borrowed from is sealed during &lt;code&gt;v&lt;/code&gt;'s lifetime.</source>
          <target state="translated">ビュー &lt;code&gt;v&lt;/code&gt; は、複数の異なる場所から借用できます。ただし、借用は常に &lt;code&gt;v&lt;/code&gt; の存続期間の全期間であり、借用元のすべての場所は &lt;code&gt;v&lt;/code&gt; の存続期間中に封印されます。</target>
        </trans-unit>
        <trans-unit id="0e7b23280919cdb8b9ed6ba03f16d8dec6e0d684" translate="yes" xml:space="preserve">
          <source>A view cannot be used for a read or a write access before it was assigned to.</source>
          <target state="translated">ビューは、割り当てられる前の読み取りアクセスや書き込みアクセスには使用できません。</target>
        </trans-unit>
        <trans-unit id="7eaa38aea35d4e613cc0cdbe4d2bcd6d5ae28f65" translate="yes" xml:space="preserve">
          <source>A view type is a type that is or contains one of the following types:</source>
          <target state="translated">ビュー型とは、以下のいずれかの型を持つ、または含む型のことです。</target>
        </trans-unit>
        <trans-unit id="16154a4c78506d48d05de09fc2c147e545ffe199" translate="yes" xml:space="preserve">
          <source>A warning is a non-error message that may indicate impending problems or degraded performance.</source>
          <target state="translated">警告は、差し迫った問題やパフォーマンスの低下を示すエラーではないメッセージです。</target>
        </trans-unit>
        <trans-unit id="71ed9093f7d2c5cbb9aa8a3933ec4cb522e39e48" translate="yes" xml:space="preserve">
          <source>A while (for) statement introduces an implicit block. Identifiers are only visible within the block they have been declared. The &lt;code&gt;block&lt;/code&gt; statement can be used to open a new block explicitly:</source>
          <target state="translated">while（for）ステートメントは、暗黙のブロックを導入します。識別子は、宣言されたブロック内でのみ表示されます。 &lt;code&gt;block&lt;/code&gt; ステートメントは、明示的に新しいブロックを開くために使用することができます。</target>
        </trans-unit>
        <trans-unit id="bc56783853877b4342018f4f4752a7c166237a4d" translate="yes" xml:space="preserve">
          <source>A word boundary is a position in the subject string where the current character and the previous character do not both match &lt;code&gt;\w&lt;/code&gt; or &lt;code&gt;\W&lt;/code&gt; (i.e. one matches &lt;code&gt;\w&lt;/code&gt; and the other matches &lt;code&gt;\W&lt;/code&gt;), or the start or end of the string if the first or last character matches &lt;code&gt;\w&lt;/code&gt;, respectively.</source>
          <target state="translated">単語の境界は、現在の文字と前の文字の両方が &lt;code&gt;\w&lt;/code&gt; または &lt;code&gt;\W&lt;/code&gt; 一致しない（つまり、一方が &lt;code&gt;\w&lt;/code&gt; 一致し、もう一方が &lt;code&gt;\W&lt;/code&gt; 一致する）サブジェクト文字列内の位置です。最初または最後の文字は、それぞれ &lt;code&gt;\w&lt;/code&gt; と一致します。</target>
        </trans-unit>
        <trans-unit id="469aae2fa20a5b364724db93849620fbab87ad21" translate="yes" xml:space="preserve">
          <source>API naming design</source>
          <target state="translated">APIネーミング設計</target>
        </trans-unit>
        <trans-unit id="36215f7f26fcbc8102d12ecfe6c77120c8396238" translate="yes" xml:space="preserve">
          <source>API symbols</source>
          <target state="translated">APIシンボル</target>
        </trans-unit>
        <trans-unit id="8257a9cef2fe7db39639531c88970335f2c53c77" translate="yes" xml:space="preserve">
          <source>ARC</source>
          <target state="translated">ARC</target>
        </trans-unit>
        <trans-unit id="6e86868dfa064831def0a9a32949fcd3f02c8b05" translate="yes" xml:space="preserve">
          <source>AST based overloading</source>
          <target state="translated">ASTベースのオーバーロード</target>
        </trans-unit>
        <trans-unit id="b08670d9d509dc53f0d69a06ccafcdfc0680021a" translate="yes" xml:space="preserve">
          <source>AST:</source>
          <target state="translated">AST:</target>
        </trans-unit>
        <trans-unit id="ed89ae3b78e13637e55b85c4b03f6daaccfcbc6b" translate="yes" xml:space="preserve">
          <source>Abbreviated three-letter form of the month.</source>
          <target state="translated">月の略三字形。</target>
        </trans-unit>
        <trans-unit id="02befbd420c9754ded8c9a688a174615ddafd2a6" translate="yes" xml:space="preserve">
          <source>About this document</source>
          <target state="translated">この文書について</target>
        </trans-unit>
        <trans-unit id="82b42258d7c7bb21ed3bb91a405d2c8d359a3934" translate="yes" xml:space="preserve">
          <source>AbsoluteDir:</source>
          <target state="translated">AbsoluteDir:</target>
        </trans-unit>
        <trans-unit id="0bcb5dbfb40a4d52e65b989317809bb509a54006" translate="yes" xml:space="preserve">
          <source>AbsoluteFile:</source>
          <target state="translated">AbsoluteFile:</target>
        </trans-unit>
        <trans-unit id="d79da395b5d7a09c6439a5f2660d8c568186ab7e" translate="yes" xml:space="preserve">
          <source>Abstract</source>
          <target state="translated">Abstract</target>
        </trans-unit>
        <trans-unit id="1b33443d15e91efce2e27797d2c769792a4be765" translate="yes" xml:space="preserve">
          <source>Abstract base class for all exceptions that Nim's runtime raises but that are strictly uncatchable as they can also be mapped to a &lt;code&gt;quit&lt;/code&gt; / &lt;code&gt;trap&lt;/code&gt; / &lt;code&gt;exit&lt;/code&gt; operation.</source>
          <target state="translated">Nimのランタイムが発生させるが、 &lt;code&gt;quit&lt;/code&gt; / &lt;code&gt;trap&lt;/code&gt; / &lt;code&gt;exit&lt;/code&gt; 操作にもマップできるため、厳密にキャッチできないすべての例外の抽象基本クラス。</target>
        </trans-unit>
        <trans-unit id="07ade5cd2426cf2d96d9f115a542fdf23ea73fb2" translate="yes" xml:space="preserve">
          <source>Abstract class for all exceptions that are catchable.</source>
          <target state="translated">キャッチ可能なすべての例外のための抽象クラスです。</target>
        </trans-unit>
        <trans-unit id="3f4e6a4ec9f1c43c4563924339bce51ceb8eb0af" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;code&gt;astGenRepr&lt;/code&gt; proc. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">nimコードのブロックを受け入れ、 &lt;code&gt;astGenRepr&lt;/code&gt; プロシージャを使用して解析された抽象構文ツリーを出力します。印刷は&lt;em&gt;コンパイル時に&lt;/em&gt;行わ&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e09ba72f81ab5a839d563be4983123e765b18fc8" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;code&gt;lispRepr&lt;/code&gt; proc. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">nimコードのブロックを受け入れ、 &lt;code&gt;lispRepr&lt;/code&gt; procを使用して解析された抽象構文ツリーを出力します。印刷は&lt;em&gt;コンパイル時に&lt;/em&gt;行わ&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9d87fb77e58949f4a3af1708d01b460d4e3d3dc1" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;code&gt;treeRepr&lt;/code&gt; proc. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">nimコードのブロックを受け入れ、 &lt;code&gt;treeRepr&lt;/code&gt; procを使用して解析された抽象構文ツリーを出力します。印刷は&lt;em&gt;コンパイル時に&lt;/em&gt;行わ&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1cf35ec1eeb0cdf41c798e53ae7c4bdbcf3c6e03" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;em&gt;astGenRepr&lt;/em&gt; function. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">nimコードのブロックを受け入れ、&lt;em&gt;astGenRepr&lt;/em&gt;関数を使用して解析された抽象構文ツリーを&lt;em&gt;出力し&lt;/em&gt;ます。印刷は&lt;em&gt;コンパイル時に&lt;/em&gt;行わ&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7c6e301f36546045d51728adbff6b973b0918094" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;em&gt;lispRepr&lt;/em&gt; function. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">nimコードのブロックを受け入れ、&lt;em&gt;lispRepr&lt;/em&gt;関数を使用して解析された抽象構文ツリーを&lt;em&gt;出力し&lt;/em&gt;ます。印刷は&lt;em&gt;コンパイル時に&lt;/em&gt;行わ&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7eb919c05e9f3591e4b18f0af2d7cce492e0545f" translate="yes" xml:space="preserve">
          <source>Accepts a block of nim code and prints the parsed abstract syntax tree using the &lt;em&gt;treeRepr&lt;/em&gt; function. Printing is done &lt;em&gt;at compile time&lt;/em&gt;.</source>
          <target state="translated">nimコードのブロックを受け入れ、&lt;em&gt;treeRepr&lt;/em&gt;関数を使用して解析された抽象構文ツリーを&lt;em&gt;出力し&lt;/em&gt;ます。印刷は&lt;em&gt;コンパイル時に&lt;/em&gt;行わ&lt;em&gt;れます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ce207f0652d5a79c6fb92d9892844f64c3c7bc7f" translate="yes" xml:space="preserve">
          <source>Accepts a new client connection.</source>
          <target state="translated">新しいクライアント接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="142256b8872d5b2f49b7b35629597dff2e50c2c2" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection and the remote address of the client.</source>
          <target state="translated">新しい接続を受け入れます。その接続に対応するクライアントソケットとクライアントのリモートアドレスを含む未来を返します。</target>
        </trans-unit>
        <trans-unit id="0612c97d4b20e5af1b9ee2e86992dd16c29c8cbf" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection and the remote address of the client. The future will complete when the connection is successfully accepted.</source>
          <target state="translated">新しい接続を受け入れます。その接続に対応するクライアントソケットとクライアントのリモートアドレスを含む未来を返します。接続が正常に受け入れられた時点でフューチャーは完了します。</target>
        </trans-unit>
        <trans-unit id="de10becfb867ce7d8a57fe498147c24ce2fed31f" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection.</source>
          <target state="translated">新しい接続を受け入れます。その接続に対応するクライアントソケットを含む未来を返します。</target>
        </trans-unit>
        <trans-unit id="fd2156945d294c5977e8484e2589d72a67377e8e" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection. If &lt;code&gt;inheritable&lt;/code&gt; is false (the default), the resulting client socket will not be inheritable by child processes. The future will complete when the connection is successfully accepted.</source>
          <target state="translated">新しい接続を受け入れます。その接続に対応するクライアントソケットを含むfutureを返します。場合は &lt;code&gt;inheritable&lt;/code&gt; false（デフォルト）で、結果としてクライアントソケットは、子プロセスによって継承されません。接続が正常に受け入れられると、futureは完了します。</target>
        </trans-unit>
        <trans-unit id="bb38da96bcf63ef07293cca8f7fae610327e435b" translate="yes" xml:space="preserve">
          <source>Accepts a new connection. Returns a future containing the client socket corresponding to that connection. The future will complete when the connection is successfully accepted.</source>
          <target state="translated">新しい接続を受け入れます。その接続に対応するクライアントソケットを含む未来を返します。接続が正常に受け入れられた時点でフューチャーは完了します。</target>
        </trans-unit>
        <trans-unit id="deb7592ffcf1beaf11244155535faaf11982362b" translate="yes" xml:space="preserve">
          <source>Accepts a node of kind &lt;code&gt;nnkSym&lt;/code&gt; and returns its owner's symbol. The meaning of 'owner' depends on &lt;code&gt;sym&lt;/code&gt;'s &lt;code&gt;NimSymKind&lt;/code&gt; and declaration context. For top level declarations this is an &lt;code&gt;nskModule&lt;/code&gt; symbol, for proc local variables an &lt;code&gt;nskProc&lt;/code&gt; symbol, for enum/object fields an &lt;code&gt;nskType&lt;/code&gt; symbol, etc. For symbols without an owner, &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="translated">種類 &lt;code&gt;nnkSym&lt;/code&gt; のノードを受け入れ、その所有者のシンボルを返します。'owner'の意味は、 &lt;code&gt;sym&lt;/code&gt; の &lt;code&gt;NimSymKind&lt;/code&gt; と宣言コンテキストによって異なります。トップレベルの宣言の場合、これは &lt;code&gt;nskModule&lt;/code&gt; シンボル、procローカル変数の場合は &lt;code&gt;nskProc&lt;/code&gt; シンボル、enum / objectフィールドの場合は &lt;code&gt;nskType&lt;/code&gt; シンボルなどです。所有者のないシンボルの場合、 &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="33dc09425d5909c6371181a754cfc69bb0dffcb5" translate="yes" xml:space="preserve">
          <source>Accepts a single request. Write an explicit loop around this proc so that errors can be handled properly.</source>
          <target state="translated">単一のリクエストを受け取ります。エラーが適切に処理されるように、この proc の周りに明示的なループを記述します。</target>
        </trans-unit>
        <trans-unit id="6813381cdc37c15725205e39fd4619d20653f02f" translate="yes" xml:space="preserve">
          <source>Accepts an instantiated generic type and returns its uninstantiated form.</source>
          <target state="translated">インスタンス化された汎用型を受け取り、そのインスタンス化されていない形を返します。</target>
        </trans-unit>
        <trans-unit id="faf4ef0e56229453f96a306fcf1a0f1923d413de" translate="yes" xml:space="preserve">
          <source>Acceses a specified &lt;em&gt;entry&lt;/em&gt; from the current row.</source>
          <target state="translated">現在の行から指定した&lt;em&gt;エントリに&lt;/em&gt;アクセスします。</target>
        </trans-unit>
        <trans-unit id="1af3cc3329098e5826bfbbeb60f9d9bd983e292a" translate="yes" xml:space="preserve">
          <source>Access URI item</source>
          <target state="translated">アクセスURI項目</target>
        </trans-unit>
        <trans-unit id="f9e9dd7a48db03f7a1f9615c265496ab948af3da" translate="yes" xml:space="preserve">
          <source>Access the currently matched character</source>
          <target state="translated">現在一致している文字にアクセスする</target>
        </trans-unit>
        <trans-unit id="9e2f25bad75994a6d0402acd174ffe98487bb1e8" translate="yes" xml:space="preserve">
          <source>Access the i-th element of &lt;em&gt;deq&lt;/em&gt; and returns a mutable reference to it.</source>
          <target state="translated">&lt;em&gt;deqの&lt;/em&gt; i番目の要素にアクセスし、&lt;em&gt;それに&lt;/em&gt;可変の参照を返します。</target>
        </trans-unit>
        <trans-unit id="b235504e101d141812cbd31b5736348cbd949d54" translate="yes" xml:space="preserve">
          <source>Access the i-th element of &lt;em&gt;deq&lt;/em&gt; by order from first to last. deq[0] is the first, deq[^1] is the last.</source>
          <target state="translated">最初から最後の順序で&lt;em&gt;deqの&lt;/em&gt; i番目の要素にアクセスします。deq [0]は最初、deq [^ 1]は最後です。</target>
        </trans-unit>
        <trans-unit id="8b33d8dee700b0371d3e740bce3869834048d0ab" translate="yes" xml:space="preserve">
          <source>Accesses a specified &lt;code&gt;entry&lt;/code&gt; from the current row.</source>
          <target state="translated">現在の行から指定された &lt;code&gt;entry&lt;/code&gt; アクセスします。</target>
        </trans-unit>
        <trans-unit id="27bdd5381d9fed61828adf89a00b3a554f8c9b97" translate="yes" xml:space="preserve">
          <source>Accesses the backwards indexed i-th element.</source>
          <target state="translated">i 番目の要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="c40814a4680dc13930b702b75b874a15a540cd44" translate="yes" xml:space="preserve">
          <source>Accesses the i-th element of &lt;code&gt;deq&lt;/code&gt; and return a mutable reference to it.</source>
          <target state="translated">&lt;code&gt;deq&lt;/code&gt; のi番目の要素にアクセスし、その要素への可変参照を返します。</target>
        </trans-unit>
        <trans-unit id="4224433220776a7cd401842ee32aaee48826f9f3" translate="yes" xml:space="preserve">
          <source>Accesses the i-th element of &lt;code&gt;deq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;deq&lt;/code&gt; のi番目の要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="8383ecf2951ae26619d64ffe472323e3628beb48" translate="yes" xml:space="preserve">
          <source>Accesses the i-th element of &lt;code&gt;heap&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;heap&lt;/code&gt; i番目の要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="b9157430212e0fe0ab310f60c200c7494abe11f3" translate="yes" xml:space="preserve">
          <source>Accessor for an any &lt;code&gt;x&lt;/code&gt; that represents an array or a sequence.</source>
          <target state="translated">配列またはシーケンスを表す任意の &lt;code&gt;x&lt;/code&gt; のアクセサー。</target>
        </trans-unit>
        <trans-unit id="c47d1e40dccddf8bf9622ec7b3c9e44c4af97584" translate="yes" xml:space="preserve">
          <source>Accumulator</source>
          <target state="translated">Accumulator</target>
        </trans-unit>
        <trans-unit id="737a162e2ca0961109be76dcbc40928b7272da0a" translate="yes" xml:space="preserve">
          <source>Acquires the given lock and then executes the code.</source>
          <target state="translated">与えられたロックを取得し、コードを実行します。</target>
        </trans-unit>
        <trans-unit id="e94c5bb8f50ed78a7cd750db454d2af3ae23df56" translate="yes" xml:space="preserve">
          <source>Acquires the given lock, executes the statements in body and releases the lock after the statements finish executing.</source>
          <target state="translated">与えられたロックを取得し、ボディ内のステートメントを実行し、ステートメントの実行終了後にロックを解除します。</target>
        </trans-unit>
        <trans-unit id="1a3e3046bdb90198f8603411233d3c6451ca3f0a" translate="yes" xml:space="preserve">
          <source>Acquires the given lock.</source>
          <target state="translated">与えられたロックを取得します。</target>
        </trans-unit>
        <trans-unit id="d2f9d48fe60d96f7c86fe92fea51a30eef86ea2a" translate="yes" xml:space="preserve">
          <source>Acts in a similar fashion to the &lt;em&gt;recvLine&lt;/em&gt; in the sockets module. Returns false when no data is available to be read. &lt;em&gt;Line&lt;/em&gt; must be initialized and not nil!</source>
          <target state="translated">ソケットモジュールの&lt;em&gt;recvLine&lt;/em&gt;と同様に&lt;em&gt;機能&lt;/em&gt;します。読み取るデータがない場合はfalseを返します。&lt;em&gt;行&lt;/em&gt;は初期化する必要があり、nilではありません！</target>
        </trans-unit>
        <trans-unit id="05cb0e3d96a9a97e0426bf235a612402b2cea3d4" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;ident&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; if it is not present. This is intended for use with pragmas.</source>
          <target state="translated">存在しない場合は、 &lt;code&gt;dest&lt;/code&gt; に &lt;code&gt;ident&lt;/code&gt; を追加します。これは、プラグマでの使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="b05779dfde7404de32c688c1c9a48959dd22bdd2" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt;を&lt;em&gt;xに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="4feee750a058b68182288ba271fbda6845aca1fd" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;y&lt;/em&gt; to the complex number &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;y&lt;/em&gt;を複素数&lt;em&gt;xに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="c680f465bd9dc1e03f6e6d6ea7255c81ff7a44a5" translate="yes" xml:space="preserve">
          <source>Add a duration of time to a &lt;code&gt;Time&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; に期間を追加します。</target>
        </trans-unit>
        <trans-unit id="9fa2d1e935ee54d15d98822bf8df93e7a3580d69" translate="yes" xml:space="preserve">
          <source>Add a file to the multipart data &lt;code&gt;p&lt;/code&gt;, specifying filename, contentType and content manually.</source>
          <target state="translated">ファイル名、contentType、コンテンツを手動で指定して、マルチパートデータ &lt;code&gt;p&lt;/code&gt; にファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="0329e59f93f564c5dfc0e70569d15fb9e15a73e3" translate="yes" xml:space="preserve">
          <source>Add a file to the multipart data &lt;em&gt;p&lt;/em&gt;, specifying filename, contentType and content manually.</source>
          <target state="translated">マルチパートデータ&lt;em&gt;pに&lt;/em&gt;ファイルを追加し、ファイル名、contentType、コンテンツを手動で指定します。</target>
        </trans-unit>
        <trans-unit id="08fdfd4c11aa155b46a85fcf36cf6b5ef01faf49" translate="yes" xml:space="preserve">
          <source>Add a list of multipart entries to the multipart data &lt;code&gt;p&lt;/code&gt;. All values are added without a filename and without a content type.</source>
          <target state="translated">マルチパートエントリのリストをマルチパートデータ &lt;code&gt;p&lt;/code&gt; に追加します。すべての値は、ファイル名およびコンテンツタイプなしで追加されます。</target>
        </trans-unit>
        <trans-unit id="eec5847211247b4fd74ccdc819e2406c975b05b5" translate="yes" xml:space="preserve">
          <source>Add a list of multipart entries to the multipart data &lt;em&gt;p&lt;/em&gt;. All values are added without a filename and without a content type.</source>
          <target state="translated">マルチパートエントリのリストをマルチパートデータ&lt;em&gt;pに&lt;/em&gt;追加します。すべての値は、ファイル名とコンテンツタイプなしで追加されます。</target>
        </trans-unit>
        <trans-unit id="8716036a11430485de8c4308a7013612cbed93c8" translate="yes" xml:space="preserve">
          <source>Add a multipart entry to the multipart data &lt;code&gt;p&lt;/code&gt;. The value is added without a filename and without a content type.</source>
          <target state="translated">マルチパートデータ &lt;code&gt;p&lt;/code&gt; にマルチパートエントリを追加します。値は、ファイル名なしで、コンテンツタイプなしで追加されます。</target>
        </trans-unit>
        <trans-unit id="798a336ba2abb70a55f061577e20dced31fde63c" translate="yes" xml:space="preserve">
          <source>Add a multipart entry to the multipart data &lt;em&gt;p&lt;/em&gt;. The value is added without a filename and without a content type.</source>
          <target state="translated">マルチパートエントリをマルチパートデータ&lt;em&gt;pに&lt;/em&gt;追加します。値は、ファイル名とコンテンツタイプなしで追加されます。</target>
        </trans-unit>
        <trans-unit id="f905661c323f469aafe9d05538fcce090acb423d" translate="yes" xml:space="preserve">
          <source>Add a value to the multipart data.</source>
          <target state="translated">マルチパートデータに値を追加します。</target>
        </trans-unit>
        <trans-unit id="f04550fc57e117bf8d9e7db6f83bdeafaba0d38d" translate="yes" xml:space="preserve">
          <source>Add a value to the multipart data. Raises a &lt;em&gt;ValueError&lt;/em&gt; exception if &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;filename&lt;/em&gt; or &lt;em&gt;contentType&lt;/em&gt; contain newline characters.</source>
          <target state="translated">マルチパートデータに値を追加します。&lt;em&gt;name&lt;/em&gt;、&lt;em&gt;filename&lt;/em&gt;、&lt;em&gt;contentType&lt;/em&gt;に改行文字が含まれている場合は、&lt;em&gt;ValueError&lt;/em&gt;例外が発生します。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="772b15743a6941c602fc6966a8c9ad76de348c4b" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; to the beginning of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt;の先頭に&lt;em&gt;アイテム&lt;/em&gt;を追加し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f6d2bfa601515402b5cd9a27e6de27a42f1ae49" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; to the end of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt;の最後に&lt;em&gt;アイテム&lt;/em&gt;を追加し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4795b951a509e1ad114b904fea7f85d924a8b442" translate="yes" xml:space="preserve">
          <source>Add an item to the sequence</source>
          <target state="translated">シーケンスにアイテムを追加</target>
        </trans-unit>
        <trans-unit id="f07bbced7392ce2be35b14f1ec60bf9e70357bb9" translate="yes" xml:space="preserve">
          <source>Add character to the string</source>
          <target state="translated">文字列に文字を追加する</target>
        </trans-unit>
        <trans-unit id="804dca14340f9191ea44cbc9a5b612d3b7b60531" translate="yes" xml:space="preserve">
          <source>Add complex &lt;em&gt;x&lt;/em&gt; to float &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">複素数&lt;em&gt;x&lt;/em&gt;を浮動小数点数&lt;em&gt;yに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="91af401e69eb5db85492da365b587bfdcdd3c94f" translate="yes" xml:space="preserve">
          <source>Add files to a multipart data object. The file will be opened from your disk, read and sent with the automatically determined MIME type. Raises an &lt;em&gt;IOError&lt;/em&gt; if the file cannot be opened or reading fails. To manually specify file content, filename and MIME type, use &lt;em&gt;[]=&lt;/em&gt; instead.</source>
          <target state="translated">マルチパートデータオブジェクトにファイルを追加します。ファイルはディスクから開かれ、自動的に決定されたMIMEタイプで読み取られて送信されます。ファイルを開けない場合、または読み取りに失敗した場合は、&lt;em&gt;IOError&lt;/em&gt;が発生します。ファイルのコンテンツ、ファイル名、MIMEタイプを手動で指定するには、代わりに&lt;em&gt;[] =を&lt;/em&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="52402dfdf42abb7b53517707a59330538bafd910" translate="yes" xml:space="preserve">
          <source>Add files to a multipart data object. The files will be streamed from disk when the request is being made. When &lt;code&gt;stream&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the files are instead read into memory, but beware this is very memory ineffecient even for small files. The MIME types will automatically be determined. Raises an &lt;code&gt;IOError&lt;/code&gt; if the file cannot be opened or reading fails. To manually specify file content, filename and MIME type, use &lt;code&gt;[]=&lt;/code&gt; instead.</source>
          <target state="translated">マルチパートデータオブジェクトにファイルを追加します。リクエストが行われると、ファイルはディスクからストリーミングされます。ときに &lt;code&gt;stream&lt;/code&gt; ある &lt;code&gt;false&lt;/code&gt; 、ファイルではなくメモリに読み込まが、これは小さなファイルのための非常にメモリineffecientある用心しています。MIMEタイプは自動的に決定されます。ファイルを開くことができないか、読み取りに失敗すると、 &lt;code&gt;IOError&lt;/code&gt; が発生します。ファイルの内容、ファイル名、およびMIMEタイプを手動で指定するには、代わりに &lt;code&gt;[]=&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="406ccec3a46c7096b360cd3465737a8b535aea4c" translate="yes" xml:space="preserve">
          <source>Add float &lt;em&gt;x&lt;/em&gt; to complex &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">float &lt;em&gt;y&lt;/em&gt;をcomplex &lt;em&gt;yに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="505c6693913fe1565ef1c731c3ebc737609d4c48" translate="yes" xml:space="preserve">
          <source>Add ident to dest if it is not present. This is intended for use with pragmas.</source>
          <target state="translated">destに ident が存在しない場合に追加します。これはプラグマでの使用を想定しています。</target>
        </trans-unit>
        <trans-unit id="ed6a96e38077149fb1f9acfe217b88923300d176" translate="yes" xml:space="preserve">
          <source>Add int &lt;code&gt;x&lt;/code&gt; to rational &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">int型の追加 &lt;code&gt;x&lt;/code&gt; 合理的に &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f82f0fe426d7f18de6a09b1fee81b37ab4f8907" translate="yes" xml:space="preserve">
          <source>Add int &lt;code&gt;y&lt;/code&gt; to rational &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">int型の追加 &lt;code&gt;y&lt;/code&gt; 合理的に &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b50017805b1b6fc4f451182d9127fec897f8b761" translate="yes" xml:space="preserve">
          <source>Add int &lt;em&gt;x&lt;/em&gt; to rational &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">int &lt;em&gt;x&lt;/em&gt;を有理&lt;em&gt;yに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="9fd52413273ba8dedf3c71352a83c577246c8699" translate="yes" xml:space="preserve">
          <source>Add int &lt;em&gt;y&lt;/em&gt; to rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">int &lt;em&gt;y&lt;/em&gt;を有理&lt;em&gt;xに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="cfd9da0bd8b02d4be1a67e73526e14e1ec6c2189" translate="yes" xml:space="preserve">
          <source>Add rational &lt;code&gt;x&lt;/code&gt; to int &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">合理的な追加 &lt;code&gt;x&lt;/code&gt; intに &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c52d3037755de98e3ad893c88823ad9c9de430f5" translate="yes" xml:space="preserve">
          <source>Add rational &lt;code&gt;y&lt;/code&gt; to rational &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">有理数 &lt;code&gt;y&lt;/code&gt; を有理数 &lt;code&gt;x&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="f18a8ab635db264a0fe3a0922ec6560932edcddf" translate="yes" xml:space="preserve">
          <source>Add rational &lt;em&gt;x&lt;/em&gt; to int &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">有理&lt;em&gt;x&lt;/em&gt;をint &lt;em&gt;yに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="2aa6c134ddb31344adb0018507fd22c268b0cb12" translate="yes" xml:space="preserve">
          <source>Add rational &lt;em&gt;y&lt;/em&gt; to rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">有理&lt;em&gt;x&lt;/em&gt;に有理&lt;em&gt;y&lt;/em&gt;を追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d1747c4bec3777bff15f92b0cac11995facbb754" translate="yes" xml:space="preserve">
          <source>Add two complex numbers.</source>
          <target state="translated">複素数を2つ足します。</target>
        </trans-unit>
        <trans-unit id="10e886ac53c1940ea63eb1399092efb3e0175be5" translate="yes" xml:space="preserve">
          <source>Add two durations together.</source>
          <target state="translated">2つの持続時間を一緒に追加します。</target>
        </trans-unit>
        <trans-unit id="918bdd0b6e0ab8c7e512d1c14637656e65c676d4" translate="yes" xml:space="preserve">
          <source>Add two rational numbers.</source>
          <target state="translated">2つの有理数を足します。</target>
        </trans-unit>
        <trans-unit id="f9f4e2a4ee342e53c003797651594c460da995fd" translate="yes" xml:space="preserve">
          <source>Adding a method to a class the programmer has no control over is impossible or needs ugly workarounds.</source>
          <target state="translated">プログラマがコントロールできないクラスにメソッドを追加することは不可能であり、醜い回避策が必要です。</target>
        </trans-unit>
        <trans-unit id="2025ebd7978991464bc4c04e553287e1846aa3ca" translate="yes" xml:space="preserve">
          <source>Additional Features</source>
          <target state="translated">追加機能</target>
        </trans-unit>
        <trans-unit id="050d53ae9db89d00328e7590301c21bc8b18552a" translate="yes" xml:space="preserve">
          <source>Additional compilation switches</source>
          <target state="translated">コンパイルスイッチの追加</target>
        </trans-unit>
        <trans-unit id="40896bd1d7fb4e2d2b859f8c06ae9aa5ebd3ac5f" translate="yes" xml:space="preserve">
          <source>Additional documentation about Nim's GC and how to operate it in a</source>
          <target state="translated">NimのGCとその操作方法についての追加ドキュメント</target>
        </trans-unit>
        <trans-unit id="69fde59a7b9ef81d45e08f2d1fd9df14f9421393" translate="yes" xml:space="preserve">
          <source>Additional documentation about Nim's multi-paradigm memory management strategies</source>
          <target state="translated">Nimのマルチパラダイムメモリ管理戦略に関する追加ドキュメント</target>
        </trans-unit>
        <trans-unit id="a15fa56393dfeea6e8ddbb0e0c2a6f3cc24b93de" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="translated">その他のリソース</target>
        </trans-unit>
        <trans-unit id="fa4703ed512a421e9e9ab95be1747cd7af75bcd9" translate="yes" xml:space="preserve">
          <source>Additionally adds the enclosed text to the index as a term. Since we are interested in different instances of the same term to have different entries, a table is used to keep track of the amount of times a term has previously appeared to give a different identifier value for each.</source>
          <target state="translated">さらに、囲まれたテキストを用語としてインデックスに追加します。同じ用語の異なるインスタンスが異なるエントリを持つことに興味があるので、テーブルを使用して、用語が以前に出現した回数を追跡し、それぞれに異なる識別子の値を与えます。</target>
        </trans-unit>
        <trans-unit id="683593bbc9f4d0095e1a329b2a170a4f6b64749a" translate="yes" xml:space="preserve">
          <source>Additionally adds the encosed text to the index as a term. Since we are interested in different instances of the same term to have different entries, a table is used to keep track of the amount of times a term has previously appeared to give a different identifier value for each.</source>
          <target state="translated">さらに、エンコードされたテキストを用語としてインデックスに追加します。同じ用語の異なるインスタンスが異なるエントリを持つことに興味があるので、以前に用語が出現した回数を追跡するためにテーブルを使用して、それぞれに異なる識別子値を与えます。</target>
        </trans-unit>
        <trans-unit id="83025bdbec6a244fe913cb7d0ff67dac39e81e46" translate="yes" xml:space="preserve">
          <source>Additionally, you may pass a value along with the symbol: &lt;code&gt;-d:x=y&lt;/code&gt; which may be used in conjunction with the &lt;a href=&quot;manual#implementation-specific-pragmas-compile-time-define-pragmas&quot;&gt;compile time define pragmas&lt;/a&gt; to override symbols during build time.</source>
          <target state="translated">さらに、シンボルとともに値を渡すこともできます。 &lt;code&gt;-d:x=y&lt;/code&gt; は、&lt;a href=&quot;manual#implementation-specific-pragmas-compile-time-define-pragmas&quot;&gt;コンパイル時に定義するプラグマ&lt;/a&gt;と一緒に使用して、ビルド時にシンボルをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="dad02ecd7c3a4cabf030c764e9da2c30f5fe41ab" translate="yes" xml:space="preserve">
          <source>Additionally, you may pass a value along with the symbol: &lt;code&gt;-d:x=y&lt;/code&gt; which may be used in conjunction with the &lt;a href=&quot;manual#implementation-specific-pragmas-compileminustime-define-pragmas&quot;&gt;compile-time define pragmas&lt;/a&gt; to override symbols during build time.</source>
          <target state="translated">さらに、シンボルと一緒に値を渡すことができます： &lt;code&gt;-d:x=y&lt;/code&gt; これは、ビルド時にシンボルをオーバーライド&lt;a href=&quot;manual#implementation-specific-pragmas-compileminustime-define-pragmas&quot;&gt;するために&lt;/a&gt;、コンパイル時の定義プラグマと組み合わせて使用​​できます。</target>
        </trans-unit>
        <trans-unit id="c9cc91072a9c61406bb688685c655da8fcf1e11e" translate="yes" xml:space="preserve">
          <source>Addr operator</source>
          <target state="translated">加算演算子</target>
        </trans-unit>
        <trans-unit id="e6513e72133cdea4324350e6d4ade50552f0fa2a" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;arg&lt;/code&gt; as a &lt;code&gt;Node&lt;/code&gt; to the &lt;code&gt;NList&lt;/code&gt; If a node with the same name is already present in this map, it is replaced by the new one.</source>
          <target state="translated">&lt;code&gt;arg&lt;/code&gt; を &lt;code&gt;Node&lt;/code&gt; として &lt;code&gt;NList&lt;/code&gt; に追加します。同じ名前のノードがこのマップに既に存在する場合、新しいノードに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3ccd506aab4757f17ef51ce2016ba1b428279190" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;b&lt;/code&gt; to the rope &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">ロープ &lt;code&gt;b&lt;/code&gt; を追加 &lt;code&gt;a&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9cc159ea3eeee439600098843b572bf5bf9add55" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;child&lt;/code&gt; to a JArray node &lt;code&gt;father&lt;/code&gt;.</source>
          <target state="translated">JArrayノードの &lt;code&gt;father&lt;/code&gt; &lt;code&gt;child&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="c0973ea96bcd93e616194aea6ada7ee253f95770" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;handler&lt;/code&gt; to the list of handlers.</source>
          <target state="translated">&lt;code&gt;handler&lt;/code&gt; のリストにハンドラーを追加します。</target>
        </trans-unit>
        <trans-unit id="09af7b91c6e7df51cd37d298bdc37f650d040831" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;interval&lt;/code&gt; to &lt;code&gt;dt&lt;/code&gt;. Components from &lt;code&gt;interval&lt;/code&gt; are added in the order of their size, i.e first the &lt;code&gt;years&lt;/code&gt; component, then the &lt;code&gt;months&lt;/code&gt; component and so on. The returned &lt;code&gt;DateTime&lt;/code&gt; will have the same timezone as the input.</source>
          <target state="translated">&lt;code&gt;interval&lt;/code&gt; を &lt;code&gt;dt&lt;/code&gt; に追加します。 &lt;code&gt;interval&lt;/code&gt; コンポーネントは、サイズの順に追加されます。つまり、最初に &lt;code&gt;years&lt;/code&gt; コンポーネント、次に &lt;code&gt;months&lt;/code&gt; コンポーネントというように追加されます。返される &lt;code&gt;DateTime&lt;/code&gt; は、入力と同じタイムゾーンになります。</target>
        </trans-unit>
        <trans-unit id="ba0aaaa96c74c1cea684996ea930d05d8a0077c9" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;interval&lt;/code&gt; to &lt;code&gt;dt&lt;/code&gt;. Components from &lt;code&gt;interval&lt;/code&gt; are added in the order of their size, i.e. first the &lt;code&gt;years&lt;/code&gt; component, then the &lt;code&gt;months&lt;/code&gt; component and so on. The returned &lt;code&gt;DateTime&lt;/code&gt; will have the same timezone as the input.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; に &lt;code&gt;interval&lt;/code&gt; を追加します。 &lt;code&gt;interval&lt;/code&gt; コンポーネントは、サイズの順に追加されます。つまり、最初に &lt;code&gt;years&lt;/code&gt; コンポーネント、次に &lt;code&gt;months&lt;/code&gt; コンポーネントというように追加されます。返される &lt;code&gt;DateTime&lt;/code&gt; は、入力と同じタイムゾーンになります。</target>
        </trans-unit>
        <trans-unit id="18926f976110c5ffe1e4f4c98001f1d15ef90526" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;interval&lt;/code&gt; to &lt;code&gt;time&lt;/code&gt;. If &lt;code&gt;interval&lt;/code&gt; contains any years, months, weeks or days the operation is performed in the local timezone.</source>
          <target state="translated">追加 &lt;code&gt;interval&lt;/code&gt; する &lt;code&gt;time&lt;/code&gt; 。 &lt;code&gt;interval&lt;/code&gt; に年、月、週、または日が含まれている場合、操作はローカルタイムゾーンで実行されます。</target>
        </trans-unit>
        <trans-unit id="b3703e66f4731d1cd49994e51655ed816fcd0462" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;mimetype&lt;/code&gt; to the &lt;code&gt;mimedb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mimetype&lt;/code&gt; を &lt;code&gt;mimedb&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="68ab57cbe5dd2927ab80b8168f0ae9bf78358be1" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;mimetype&lt;/code&gt; to the &lt;code&gt;mimedb&lt;/code&gt;. &lt;code&gt;mimetype&lt;/code&gt; and &lt;code&gt;ext&lt;/code&gt; are lowercased before registering on &lt;code&gt;mimedb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mimedb&lt;/code&gt; に &lt;code&gt;mimetype&lt;/code&gt; を追加します。 &lt;code&gt;mimetype&lt;/code&gt; と &lt;code&gt;ext&lt;/code&gt; は、 &lt;code&gt;mimedb&lt;/code&gt; に登録する前に小文字になります。</target>
        </trans-unit>
        <trans-unit id="d55bd8510c4909907c3b0b1b51f22ef8bfe1dc23" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; unless &lt;code&gt;x&lt;/code&gt; is not yet initalized; in that case, &lt;code&gt;x&lt;/code&gt; becomes &lt;code&gt;y&lt;/code&gt;</source>
          <target state="translated">追加の &lt;code&gt;y&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt; がない限り &lt;code&gt;x&lt;/code&gt; まだinitalizedされていません。その場合、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;y&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="08dd7691271b1b3cf31cdaad9abf0dd1ed892c5b" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; unless &lt;code&gt;x&lt;/code&gt; is not yet initialized; in that case, &lt;code&gt;x&lt;/code&gt; becomes &lt;code&gt;@[y]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; がまだ初期化されていない限り、 &lt;code&gt;y&lt;/code&gt; を &lt;code&gt;x&lt;/code&gt; に追加します。その場合、 &lt;code&gt;x&lt;/code&gt; は &lt;code&gt;@[y]&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="627474e018ec81cf49c8143b28ab86561ce7ccef" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; に &lt;code&gt;y&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="910ee17a6a799e67a937708e73b9aedb33f3b0aa" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; it is initialized to &lt;code&gt;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; を &lt;code&gt;x&lt;/code&gt; に追加します。 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; の場合、 &lt;code&gt;&quot;&quot;&lt;/code&gt; に初期化されます</target>
        </trans-unit>
        <trans-unit id="f4d013d42946fcbe3af0f01b7362386e1eb7f928" translate="yes" xml:space="preserve">
          <source>Adds &lt;em&gt;child&lt;/em&gt; to a JArray node &lt;em&gt;father&lt;/em&gt;.</source>
          <target state="translated">追加し&lt;em&gt;た子を&lt;/em&gt; JArrayノードに&lt;em&gt;父&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="277d7264e0b31954fb3f91658c21ef53fbc9f98b" translate="yes" xml:space="preserve">
          <source>Adds &lt;em&gt;child&lt;/em&gt; to a SList node &lt;em&gt;father&lt;/em&gt;.</source>
          <target state="translated">追加し&lt;em&gt;た子を&lt;/em&gt; SLISTノードに&lt;em&gt;父&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="282a03494ac60232eca16c10011aa2a3e77244c0" translate="yes" xml:space="preserve">
          <source>Adds &lt;em&gt;interval&lt;/em&gt; to &lt;em&gt;time&lt;/em&gt;. If &lt;em&gt;interval&lt;/em&gt; contains any years, months, weeks or days the operation is performed in the local timezone.</source>
          <target state="translated">追加&lt;em&gt;の間隔を&lt;/em&gt;する&lt;em&gt;時間&lt;/em&gt;。&lt;em&gt;間隔&lt;/em&gt;に年、月、週、または日が含まれている場合、操作はローカルタイムゾーンで実行されます。</target>
        </trans-unit>
        <trans-unit id="50a3a76c2750845cf7f87e40704907335f25674d" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;term&lt;/code&gt; to the index using the specified hyperlink identifier.</source>
          <target state="translated">指定されたハイパーリンク識別子を使用して、インデックスに &lt;code&gt;term&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="168959e8e3da827112e6480f035af90769452610" translate="yes" xml:space="preserve">
          <source>Adds a &lt;em&gt;term&lt;/em&gt; to the index using the specified hyperlink identifier.</source>
          <target state="translated">指定したハイパーリンク識別子を使用して&lt;em&gt;用語&lt;/em&gt;をインデックスに追加します。</target>
        </trans-unit>
        <trans-unit id="8e1762576390fbc36fed4423af342fdafc7b01f4" translate="yes" xml:space="preserve">
          <source>Adds a char to string &lt;code&gt;s&lt;/code&gt; and applies the following escaping:</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; にcharを追加し、次のエスケープを適用します。</target>
        </trans-unit>
        <trans-unit id="46517870669c98767730789efc1c2a63afe0fd37" translate="yes" xml:space="preserve">
          <source>Adds a char to string &lt;em&gt;s&lt;/em&gt; and applies the following escaping:</source>
          <target state="translated">文字を文字列&lt;em&gt;sに&lt;/em&gt;追加し、次のエスケープを適用します。</target>
        </trans-unit>
        <trans-unit id="a165d6cb7b186d7181d788e17f736e5c34a3bc93" translate="yes" xml:space="preserve">
          <source>Adds a complex number to a real number.</source>
          <target state="translated">実数に複素数を追加します。</target>
        </trans-unit>
        <trans-unit id="827e14fb735a5d5b595e3196ad328aaf6dce5348" translate="yes" xml:space="preserve">
          <source>Adds a logger to the list of registered handlers.</source>
          <target state="translated">登録されたハンドラのリストにロガーを追加します。</target>
        </trans-unit>
        <trans-unit id="1f8aac4240d0d2f3105af4d844dbcb2abbdecf97" translate="yes" xml:space="preserve">
          <source>Adds a new attribute node, if an attribute with the localName and namespaceURI of &lt;code&gt;newAttr&lt;/code&gt; is present, it is replaced by the new one and the replaced attribute is returned, otherwise &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="translated">新しい属性ノードを追加します。localNameおよびnamespaceURIが &lt;code&gt;newAttr&lt;/code&gt; である属性が存在する場合は、新しい属性ノードに置き換えられ、置き換えられた属性が返されます。それ以外の場合は &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="49966f2ea34f557267d410935160fd5454f498db" translate="yes" xml:space="preserve">
          <source>Adds a new attribute node, if an attribute with the same &lt;em&gt;nodeName&lt;/em&gt; is present, it is replaced by the new one and the replaced attribute is returned, otherwise &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="translated">新しい属性ノードを追加します。同じ&lt;em&gt;nodeNameの&lt;/em&gt;属性が存在する場合は、新しい属性ノードに置き換えられ、置き換えられた属性が返されます。それ以外の場合は、 &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8d941c7f90a962f0302be00a817bf48658be8c09" translate="yes" xml:space="preserve">
          <source>Adds a new attribute, as specified by &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; If an attribute with that name is already present in the element, its value is changed to be that of the value parameter Raises the EInvalidCharacterErr if the specified &lt;code&gt;name&lt;/code&gt; contains illegal characters</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 指定された新しい属性を追加します。その名前の属性が要素にすでに存在する場合、その値はvalueパラメータの値に変更されます。指定された &lt;code&gt;name&lt;/code&gt; に不正な文字が含まれている場合、EInvalidCharacterErrを発生させます。</target>
        </trans-unit>
        <trans-unit id="70b9921234cbd8dc467e865419512e1db5aa80e1" translate="yes" xml:space="preserve">
          <source>Adds a new attribute, as specified by &lt;code&gt;namespaceURI&lt;/code&gt;, &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;namespaceURI&lt;/code&gt; 、 &lt;code&gt;localName&lt;/code&gt; 、および &lt;code&gt;value&lt;/code&gt; で指定された新しい属性を追加します。</target>
        </trans-unit>
        <trans-unit id="175780a3fa3d64a9dc7aa37e3d80ca0adc76b294" translate="yes" xml:space="preserve">
          <source>Adds a node using its &lt;code&gt;namespaceURI&lt;/code&gt; and &lt;code&gt;localName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;namespaceURI&lt;/code&gt; と &lt;code&gt;localName&lt;/code&gt; を使用してノードを追加します</target>
        </trans-unit>
        <trans-unit id="445dea116e47b26077f13f1c8b729d6b93e3f403" translate="yes" xml:space="preserve">
          <source>Adds a real number to a complex number.</source>
          <target state="translated">複素数に実数を追加します。</target>
        </trans-unit>
        <trans-unit id="cd52d911dfccd80297cfd1bc6c1ca03cb53214c3" translate="yes" xml:space="preserve">
          <source>Adds a rune &lt;code&gt;c&lt;/code&gt; to a string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">ルーン &lt;code&gt;c&lt;/code&gt; を文字列 &lt;code&gt;s&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="d25b62bec6486d33ddc3794772773f41d17aed10" translate="yes" xml:space="preserve">
          <source>Adds a separator to &lt;code&gt;dest&lt;/code&gt; only if its length is bigger than &lt;code&gt;startLen&lt;/code&gt;.</source>
          <target state="translated">長さが &lt;code&gt;startLen&lt;/code&gt; より大きい場合にのみ、 &lt;code&gt;dest&lt;/code&gt; にセパレーターを追加します。</target>
        </trans-unit>
        <trans-unit id="71b9366e5b895a616623ffad66668f7f54484c12" translate="yes" xml:space="preserve">
          <source>Adds a separator to &lt;em&gt;dest&lt;/em&gt; only if its length is bigger than &lt;em&gt;startLen&lt;/em&gt;.</source>
          <target state="translated">その長さが&lt;em&gt;startLen&lt;/em&gt;よりも大きい場合にのみ、&lt;em&gt;destに&lt;/em&gt;セパレータを追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9d30fd10baf4621b3f993d8f268f3318fa55aa89" translate="yes" xml:space="preserve">
          <source>Adds an &lt;code&gt;item&lt;/code&gt; to the beginning of the &lt;code&gt;deq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;deq&lt;/code&gt; の先頭に &lt;code&gt;item&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ee7abee7fa26cb127bb76dc8029b992785bf6db7" translate="yes" xml:space="preserve">
          <source>Adds an &lt;code&gt;item&lt;/code&gt; to the end of the &lt;code&gt;deq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;deq&lt;/code&gt; の最後に &lt;code&gt;item&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ee4ae4071a72fe5abb9dd7a95222ae4b3f3aedff" translate="yes" xml:space="preserve">
          <source>Adds each child of &lt;code&gt;children&lt;/code&gt; to the &lt;code&gt;father&lt;/code&gt; node. Returns the &lt;code&gt;father&lt;/code&gt; node so that calls can be nested.</source>
          <target state="translated">それぞれの子の追加 &lt;code&gt;children&lt;/code&gt; する &lt;code&gt;father&lt;/code&gt; ノード。戻り &lt;code&gt;father&lt;/code&gt; 呼び出しは入れ子にすることができるようにノード。</target>
        </trans-unit>
        <trans-unit id="719fea5dd090dc5f35241a78b628149a3f6e753c" translate="yes" xml:space="preserve">
          <source>Adds each child of &lt;em&gt;children&lt;/em&gt; to the &lt;em&gt;father&lt;/em&gt; node. Returns the &lt;em&gt;father&lt;/em&gt; node so that calls can be nested.</source>
          <target state="translated">それぞれの子の追加&lt;em&gt;の子どもを&lt;/em&gt;する&lt;em&gt;父&lt;/em&gt;ノード。戻り&lt;em&gt;父の&lt;/em&gt;呼び出しは入れ子にすることができるようにノード。</target>
        </trans-unit>
        <trans-unit id="77594e2b861c1fa8f8e68498df51e03371d37a9b" translate="yes" xml:space="preserve">
          <source>Adds pragma to routine definition</source>
          <target state="translated">ルーチン定義にpragmaを追加</target>
        </trans-unit>
        <trans-unit id="22ef025c8852052c63014722234d4f7dac516082" translate="yes" xml:space="preserve">
          <source>Adds pragma to routine definition.</source>
          <target state="translated">ルーチン定義にpragmaを追加しました。</target>
        </trans-unit>
        <trans-unit id="cc8d34a8c593fa5ef656e634dd29a0f526f1bbcb" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;child&lt;/code&gt; to the &lt;code&gt;father&lt;/code&gt; node. Returns the father node so that calls can be nested.</source>
          <target state="translated">&lt;code&gt;child&lt;/code&gt; を &lt;code&gt;father&lt;/code&gt; ノードに追加します。呼び出しをネストできるように、親ノードを返します。</target>
        </trans-unit>
        <trans-unit id="392b56977e8236b6698f4ca58ac6c2f28d25c68f" translate="yes" xml:space="preserve">
          <source>Adds the &lt;em&gt;child&lt;/em&gt; to the &lt;em&gt;father&lt;/em&gt; node. Returns the father node so that calls can be nested.</source>
          <target state="translated">追加&lt;em&gt;の子供を&lt;/em&gt;する&lt;em&gt;父&lt;/em&gt;ノード。呼び出しをネストできるように親ノードを返します。</target>
        </trans-unit>
        <trans-unit id="4be1f166b02d308f1b99389ad08b9ecee806fca1" translate="yes" xml:space="preserve">
          <source>Adds the callbacks proc to be called when the future completes.</source>
          <target state="translated">未来が完了したときに呼び出されるコールバックプロックを追加します。</target>
        </trans-unit>
        <trans-unit id="b7b6993ff7221b5e90540fdce800099548168a68" translate="yes" xml:space="preserve">
          <source>Adds the child &lt;code&gt;son&lt;/code&gt; to &lt;code&gt;father&lt;/code&gt;.</source>
          <target state="translated">子の &lt;code&gt;son&lt;/code&gt; を &lt;code&gt;father&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="dbc36a9f78ad151e4f4390f8743161fab423645f" translate="yes" xml:space="preserve">
          <source>Adds the file extension &lt;code&gt;ext&lt;/code&gt; to &lt;code&gt;filename&lt;/code&gt;, unless &lt;code&gt;filename&lt;/code&gt; already has an extension.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; すでに拡張子が付いていない限り、ファイル拡張子 &lt;code&gt;ext&lt;/code&gt; を &lt;code&gt;filename&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="087cbeb9fcc85f71b469524d8a7510230c6f6abc" translate="yes" xml:space="preserve">
          <source>Adds the file extension &lt;em&gt;ext&lt;/em&gt; to &lt;em&gt;filename&lt;/em&gt;, unless &lt;em&gt;filename&lt;/em&gt; already has an extension.</source>
          <target state="translated">ファイル拡張子追加します&lt;em&gt;EXT&lt;/em&gt;に&lt;em&gt;ファイル名を&lt;/em&gt;しない限り、&lt;em&gt;ファイル名が&lt;/em&gt;すでに拡張子を持っています。</target>
        </trans-unit>
        <trans-unit id="38e43d237023eab5acc2b848d42530e464a0a37f" translate="yes" xml:space="preserve">
          <source>Adds the node newChild to the end of the list of children of this node. If the newChild is already in the tree, it is first removed.</source>
          <target state="translated">ノード newChild をこのノードの子リストの最後に追加します。newChildがすでにツリー内にある場合は、最初に削除されます。</target>
        </trans-unit>
        <trans-unit id="2a72a2ff357c75992d2d25db54f40e31c444189e" translate="yes" xml:space="preserve">
          <source>Adds the specified value to the specified key. Appends to any existing values associated with the key.</source>
          <target state="translated">指定された値を指定されたキーに追加します。キーに関連付けられた既存の値に追加します。</target>
        </trans-unit>
        <trans-unit id="8dfc81b4ba54feaa93081bccdec5f9016c933c3e" translate="yes" xml:space="preserve">
          <source>Adds the textual representation of &lt;code&gt;n&lt;/code&gt; to string &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; のテキスト表現を文字列の &lt;code&gt;result&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="dcb76173f8b3f736f04cf7a85a76442e3061c9f2" translate="yes" xml:space="preserve">
          <source>Adds two &lt;code&gt;TimeInterval&lt;/code&gt; objects together.</source>
          <target state="translated">2つの &lt;code&gt;TimeInterval&lt;/code&gt; オブジェクトを一緒に追加します。</target>
        </trans-unit>
        <trans-unit id="f072b38e848ec11710252f90b744bfddeaabbd97" translate="yes" xml:space="preserve">
          <source>Adds two colors.</source>
          <target state="translated">2色を追加します。</target>
        </trans-unit>
        <trans-unit id="31c598fdad0049851912b65e101e0082a5d1544c" translate="yes" xml:space="preserve">
          <source>Adds two complex numbers.</source>
          <target state="translated">2つの複素数を加算します。</target>
        </trans-unit>
        <trans-unit id="0cd028f03aa8100d6b3d714eae3d5348fe823a2f" translate="yes" xml:space="preserve">
          <source>Adds/registers a quit procedure.</source>
          <target state="translated">終了手続きを追加/登録します。</target>
        </trans-unit>
        <trans-unit id="a371aa854f23fe7005ac2c85dbb7004b42d9769b" translate="yes" xml:space="preserve">
          <source>Adds/registers a quit procedure. Each call to &lt;code&gt;addExitProc&lt;/code&gt; registers another quit procedure. They are executed on a last-in, first-out basis.</source>
          <target state="translated">終了プロシージャを追加/登録します。 &lt;code&gt;addExitProc&lt;/code&gt; を呼び出すたびに、別の終了プロシージャが登録されます。これらは後入れ先出し方式で実行されます。</target>
        </trans-unit>
        <trans-unit id="5090ef07df2944062324712ca6950298e056c7f1" translate="yes" xml:space="preserve">
          <source>Adopting type for gui inspector in a game engine:</source>
          <target state="translated">ゲームエンジンのGUIインスペクタにタイプを採用しています。</target>
        </trans-unit>
        <trans-unit id="cd58779782de2792380285200da5a98425f86d02" translate="yes" xml:space="preserve">
          <source>Advanced command line switches are:</source>
          <target state="translated">高度なコマンドラインスイッチは</target>
        </trans-unit>
        <trans-unit id="b6c601805a77e86b61625eba41bd959b73c2bb59" translate="yes" xml:space="preserve">
          <source>Advanced command-line switches are:</source>
          <target state="translated">高度なコマンドラインスイッチは</target>
        </trans-unit>
        <trans-unit id="7a3a43835953e413f721f837036117df744dbd00" translate="yes" xml:space="preserve">
          <source>Advanced commands:</source>
          <target state="translated">高度なコマンド。</target>
        </trans-unit>
        <trans-unit id="21604196a5b5f020863aebeb14786b98a2ec02e1" translate="yes" xml:space="preserve">
          <source>Advanced options:</source>
          <target state="translated">高度なオプション。</target>
        </trans-unit>
        <trans-unit id="f1c748b61ceca05da788dea58f761592f09389bc" translate="yes" xml:space="preserve">
          <source>Advanced types</source>
          <target state="translated">アドバンスドタイプ</target>
        </trans-unit>
        <trans-unit id="4eaa54faaeebcdcf16ca6cecc39180523a7c29ea" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;\0&lt;/code&gt; up to two further octal digits are read. In both cases, if there are fewer than two digits, just those that are present are used. Thus the sequence &lt;code&gt;\0\x\07&lt;/code&gt; specifies two binary zeros followed by a BEL character (code value 7). Make sure you supply two digits after the initial zero if the pattern character that follows is itself an octal digit.</source>
          <target state="translated">&lt;code&gt;\0&lt;/code&gt; 後、さらに2桁までの8進数が読み取られます。どちらの場合も、2桁未満の場合は、存在する桁のみが使用されます。したがって、シーケンス &lt;code&gt;\0\x\07&lt;/code&gt; は2つの2進ゼロを指定し、その後にBEL文字（コード値7）が続きます。後続のパターン文字自体が8進数の場合は、最初のゼロの後に2桁を指定してください。</target>
        </trans-unit>
        <trans-unit id="c71390a639ed6627641b3cfd1f9a329a5cc9c625" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;\x&lt;/code&gt;, from zero to two hexadecimal digits are read (letters can be in upper or lower case). In UTF-8 mode, any number of hexadecimal digits may appear between &lt;code&gt;\x{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, but the value of the character code must be less than 2**31 (that is, the maximum hexadecimal value is 7FFFFFFF). If characters other than hexadecimal digits appear between &lt;code&gt;\x{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, or if there is no terminating &lt;code&gt;}&lt;/code&gt;, this form of escape is not recognized. Instead, the initial &lt;code&gt;\x&lt;/code&gt; will be interpreted as a basic hexadecimal escape, with no following digits, giving a character whose value is zero.</source>
          <target state="translated">&lt;code&gt;\x&lt;/code&gt; 後、0から2桁の16進数が読み取られます（文字は大文字でも小文字でもかまいません）。 UTF-8モードでは、 &lt;code&gt;\x{&lt;/code&gt; と &lt;code&gt;}&lt;/code&gt; の間に任意の数の16進数字を表示できますが、文字コードの値は2 ** 31未満でなければなりません（つまり、最大16進値は7FFFFFFFです）。 16進数以外の文字が &lt;code&gt;\x{&lt;/code&gt; と &lt;code&gt;}&lt;/code&gt; の間にある場合、または終端の &lt;code&gt;}&lt;/code&gt; がない場合、この形式のエスケープは認識されません。代わりに、最初の &lt;code&gt;\x&lt;/code&gt; は基本的な16進エスケープとして解釈され、後続の数字はなく、値がゼロの文字が与えられます。</target>
        </trans-unit>
        <trans-unit id="622cf30c89947b71767229b80f2f6c86dfa76768" translate="yes" xml:space="preserve">
          <source>After a connection is made you can use the &lt;code&gt;store&lt;/code&gt; procedure to upload a new file to the FTP server. Make sure to check you are in the correct working directory before you do so with the &lt;code&gt;pwd&lt;/code&gt; procedure, you can also instead specify an absolute path.</source>
          <target state="translated">接続が確立されたら、 &lt;code&gt;store&lt;/code&gt; プロシージャを使用して、新しいファイルをFTPサーバーにアップロードできます。 &lt;code&gt;pwd&lt;/code&gt; プロシージャを使用する前に、正しい作業ディレクトリにいることを確認してください。代わりに絶対パスを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="7520b5bf7b6ddd9d8aee836c25d8c005e080b0bf" translate="yes" xml:space="preserve">
          <source>After an initial build via &lt;code&gt;sh build_all.sh&lt;/code&gt; on posix or &lt;code&gt;build_all.bat&lt;/code&gt; on windows, you can rebuild the compiler as follows:</source>
          <target state="translated">posixの &lt;code&gt;build_all.bat&lt;/code&gt; またはWindowsの &lt;code&gt;sh build_all.sh&lt;/code&gt; を介した初期ビルドの後、次のようにコンパイラーを再ビルドできます。</target>
        </trans-unit>
        <trans-unit id="f73d43ab167cd4ac21b418e91451904852662e79" translate="yes" xml:space="preserve">
          <source>After compilation is finished you will hopefully end up with the nim compiler in the &lt;code&gt;bin&lt;/code&gt; directory. You can add Nim's &lt;code&gt;bin&lt;/code&gt; directory to your &lt;code&gt;$PATH&lt;/code&gt; or use the &lt;a href=&quot;#install-command&quot;&gt;install command&lt;/a&gt; to place it where it will be found.</source>
          <target state="translated">コンパイルが完了すると、 &lt;code&gt;bin&lt;/code&gt; ディレクトリにあるnimコンパイラが完成するはずです。Nimの &lt;code&gt;bin&lt;/code&gt; ディレクトリを &lt;code&gt;$PATH&lt;/code&gt; 追加するか、または&lt;a href=&quot;#install-command&quot;&gt;installコマンド&lt;/a&gt;を使用して、ディレクトリが見つかる場所に配置できます。</target>
        </trans-unit>
        <trans-unit id="b98934419b5d22ede24344e6f44c8aa22099b672" translate="yes" xml:space="preserve">
          <source>After compilation is finished you will hopefully end up with the nim compiler in the &lt;code&gt;bin&lt;/code&gt; directory. You can add Nim's &lt;code&gt;bin&lt;/code&gt; directory to your &lt;code&gt;$PATH&lt;/code&gt; or use the install command to place it where it will be found.</source>
          <target state="translated">コンパイルが終了すると、 &lt;code&gt;bin&lt;/code&gt; ディレクトリにnimコンパイラが作成されることを願っています。Nimの &lt;code&gt;bin&lt;/code&gt; ディレクトリを &lt;code&gt;$PATH&lt;/code&gt; 追加するか、installコマンドを使用してそれが見つかる場所に配置することができます。</target>
        </trans-unit>
        <trans-unit id="6b90d285522bd240c9268803fc6cb7830c0b81db" translate="yes" xml:space="preserve">
          <source>After doing this, use either the &lt;a href=&quot;#log.t,Level,varargs%5Bstring,%5D&quot;&gt;log template&lt;/a&gt; or one of the level-specific templates, such as the &lt;a href=&quot;#error.t,varargs%5Bstring,%5D&quot;&gt;error template&lt;/a&gt;, to log messages to all registered handlers at once.</source>
          <target state="translated">これを行った後、&lt;a href=&quot;#log.t,Level,varargs%5Bstring,%5D&quot;&gt;ログテンプレート&lt;/a&gt;または&lt;a href=&quot;#error.t,varargs%5Bstring,%5D&quot;&gt;エラーテンプレート&lt;/a&gt;などのレベル固有のテンプレートの1つを使用して、登録されているすべてのハンドラーにメッセージを一度にログに記録します。</target>
        </trans-unit>
        <trans-unit id="7e10a07a137ad912e35e4faef7ca70acb747eef5" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;from&lt;/code&gt; statement a module name follows followed by an &lt;code&gt;import&lt;/code&gt; to list the symbols one likes to use without explicit full qualification:</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; ステートメントの後にモジュール名が続き、その後に &lt;code&gt;import&lt;/code&gt; が続き、明示的な完全修飾なしで使用したいシンボルをリストします。</target>
        </trans-unit>
        <trans-unit id="cac28c3a1b2e93e9b8fde6caccc0941a6a14a30c" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;from&lt;/code&gt; statement, a module name follows followed by an &lt;code&gt;import&lt;/code&gt; to list the symbols one likes to use without explicit full qualification:</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; ステートメントの後に、モジュール名の後に &lt;code&gt;import&lt;/code&gt; を続けて、明示的な完全修飾なしで使用したいシンボルをリストします。</target>
        </trans-unit>
        <trans-unit id="4f797b80df1f8d64852f55b778851d191514b53d" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;import&lt;/code&gt; statement a list of module names can follow or a single module name followed by an &lt;code&gt;except&lt;/code&gt; list to prevent some symbols to be imported:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; ステートメントの後、一部のシンボルがインポートされないようにするために、モジュール名のリストを続けるか、単一のモジュール名の後に &lt;code&gt;except&lt;/code&gt; リストを続けることができます。</target>
        </trans-unit>
        <trans-unit id="ee8f6842719daac0ef2d06cdb2e7fa5bd3d11c84" translate="yes" xml:space="preserve">
          <source>After the execution of &lt;code&gt;handleRequest&lt;/code&gt; the client socket will be closed automatically unless it has already been closed.</source>
          <target state="translated">&lt;code&gt;handleRequest&lt;/code&gt; の実行後、クライアントソケットは、既に閉じられていない限り、自動的に閉じられます。</target>
        </trans-unit>
        <trans-unit id="cf6dcadff9cc79e46d3555b76c916fb3ed022d34" translate="yes" xml:space="preserve">
          <source>After you add &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; for your custom type everything will work. Currently however &lt;code&gt;hash&lt;/code&gt; for objects is not defined, whereas &lt;code&gt;system.==&lt;/code&gt; for objects does exist and performs a &quot;deep&quot; comparison (every field is compared) which is usually what you want. So in the following example implementing only &lt;code&gt;hash&lt;/code&gt; suffices:</source>
          <target state="translated">カスタムタイプに &lt;code&gt;hash&lt;/code&gt; と &lt;code&gt;==&lt;/code&gt; を追加すると、すべてが機能します。現在、オブジェクトの &lt;code&gt;hash&lt;/code&gt; は定義されていませんが、オブジェクトの &lt;code&gt;system.==&lt;/code&gt; は存在し、通常は必要な「深い」比較（すべてのフィールドが比較されます）を実行します。したがって、次の例では、 &lt;code&gt;hash&lt;/code&gt; だけで十分です。</target>
        </trans-unit>
        <trans-unit id="8cc281a6f4ada76b68a3f2185149f5df48ef5084" translate="yes" xml:space="preserve">
          <source>After you add &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; for your custom type everything will work. Currently, however, &lt;code&gt;hash&lt;/code&gt; for objects is not defined, whereas &lt;code&gt;system.==&lt;/code&gt; for objects does exist and performs a &quot;deep&quot; comparison (every field is compared) which is usually what you want. So in the following example implementing only &lt;code&gt;hash&lt;/code&gt; suffices:</source>
          <target state="translated">カスタムタイプに &lt;code&gt;hash&lt;/code&gt; と &lt;code&gt;==&lt;/code&gt; を追加すると、すべてが機能します。ただし、現在、オブジェクトの &lt;code&gt;hash&lt;/code&gt; は定義されていませんが、オブジェクトの &lt;code&gt;system.==&lt;/code&gt; は存在し、通常は必要な「詳細」比較（すべてのフィールドが比較されます）を実行します。したがって、次の例では、 &lt;code&gt;hash&lt;/code&gt; のみを実装するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="c3ae9a42c0ef5d71d82ed6ff94ea44fa57d69eaa" translate="yes" xml:space="preserve">
          <source>After you create a socket with the &lt;code&gt;newSocket&lt;/code&gt; procedure, you can create a TCP server by calling the &lt;code&gt;bindAddr&lt;/code&gt; and &lt;code&gt;listen&lt;/code&gt; procedures.</source>
          <target state="translated">&lt;code&gt;newSocket&lt;/code&gt; プロシージャを使用してソケットを作成した後、 &lt;code&gt;bindAddr&lt;/code&gt; および &lt;code&gt;listen&lt;/code&gt; プロシージャを呼び出してTCPサーバーを作成できます。</target>
        </trans-unit>
        <trans-unit id="19f5c4359047c1c4029762b09cefac6ce55773f8" translate="yes" xml:space="preserve">
          <source>After you create a socket with the &lt;code&gt;newSocket&lt;/code&gt; procedure, you can easily connect it to a server running at a known hostname (or IP address) and port. To do so over TCP, use the example below.</source>
          <target state="translated">&lt;code&gt;newSocket&lt;/code&gt; プロシージャを使用してソケットを作成したら、既知のホスト名（またはIPアドレス）とポートで実行されているサーバーに簡単に接続できます。TCPでこれを行うには、以下の例を使用します。</target>
        </trans-unit>
        <trans-unit id="5458c4cb0f05f3f6ed419b885d419d370bdf563e" translate="yes" xml:space="preserve">
          <source>Again, if you are wrapping a library which &lt;em&gt;mallocs&lt;/em&gt; and &lt;em&gt;frees&lt;/em&gt; data structures, you need to expose the appropriate &lt;em&gt;free&lt;/em&gt; function to Nim so you can clean it up. And of course, once cleaned you should avoid accessing it from Nim (or C for that matter). Typically C data structures have their own &lt;code&gt;malloc_structure&lt;/code&gt; and &lt;code&gt;free_structure&lt;/code&gt; specific functions, so wrapping these for the Nim side should be enough.</source>
          <target state="translated">ここでも、データ構造を&lt;em&gt;malloc&lt;/em&gt;して&lt;em&gt;解放&lt;/em&gt;するライブラリをラップする場合は、適切な&lt;em&gt;解放&lt;/em&gt;関数をNim に公開してクリーンアップできるようにする必要があります。そしてもちろん、一度クリーンアップした後は、Nim（または、C）からアクセスすることは避けてください。通常、Cデータ構造には独自の &lt;code&gt;malloc_structure&lt;/code&gt; および &lt;code&gt;free_structure&lt;/code&gt; 固有の関数があるため、これらをNim側でラップすることで十分です。</target>
        </trans-unit>
        <trans-unit id="70904e7446445a141b33be68742af96a43be4694" translate="yes" xml:space="preserve">
          <source>Again, it is important to remember that this module must &lt;strong&gt;not&lt;/strong&gt; be used for cryptographic applications.</source>
          <target state="translated">繰り返しになりますが、このモジュールを暗号化アプリケーションに使用してはなら&lt;strong&gt;ない&lt;/strong&gt;ことを覚えておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="02f02485ab679a9031f461bdbd3edab48ea42a79" translate="yes" xml:space="preserve">
          <source>Algorithm</source>
          <target state="translated">Algorithm</target>
        </trans-unit>
        <trans-unit id="67e15eb99dc0e473c962d6a494d00e048e9f6fc6" translate="yes" xml:space="preserve">
          <source>Algorithms</source>
          <target state="translated">Algorithms</target>
        </trans-unit>
        <trans-unit id="efc77c93e7dd9a47f78383fadbb6286c01811a32" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#contains,CritBitTree%5BT%5D,string&quot;&gt;contains&lt;/a&gt;.</source>
          <target state="translated">のエイリアスに&lt;a href=&quot;#contains,CritBitTree%5BT%5D,string&quot;&gt;はが含まれます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2def8d1f86d78a731890a66e16deb2b5e1ea4254" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#difference&quot;&gt;difference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#difference&quot;&gt;違いの&lt;/a&gt;エイリアス（s1、s2）。</target>
        </trans-unit>
        <trans-unit id="997fbf4291c46ae1426159d92973a99aacd62a7b" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#difference,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;difference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#difference,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;差の&lt;/a&gt;エイリアス（s1、s2）。</target>
        </trans-unit>
        <trans-unit id="fd0fe019adf9a60e369fc1066982e05411ae595c" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#difference,IntSet,IntSet&quot;&gt;difference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#difference,IntSet,IntSet&quot;&gt;差の&lt;/a&gt;エイリアス（s1、s2）。</target>
        </trans-unit>
        <trans-unit id="f4a02e1746a71e7fb0864cabf7b39376b3a63a1f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#intersection&quot;&gt;intersection(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#intersection&quot;&gt;intersection（s1、s2）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="8a0a9bed41fa9dc82d2411813ba4cd5aaf2c196c" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#intersection,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;intersection(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#intersection,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;交差の&lt;/a&gt;エイリアス（s1、s2）。</target>
        </trans-unit>
        <trans-unit id="c1cd0398b440416c926e7804be57c89537c5981d" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#intersection,IntSet,IntSet&quot;&gt;intersection(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#intersection,IntSet,IntSet&quot;&gt;交差の&lt;/a&gt;エイリアス（s1、s2）。</target>
        </trans-unit>
        <trans-unit id="16d760c200e2de1ecfe11a45e3c9ba9e00d49b55" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,HashSet%5BA%5D&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,HashSet%5BA%5D&quot;&gt;len（）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="b55ee14251fac7a554607f3d394b09fff77a9156" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,IntSet&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,IntSet&quot;&gt;len（）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="5157075fe8e50531bece1fec7fce7a27b73dc5c7" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,OrderedSet%5BA%5D&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,OrderedSet%5BA%5D&quot;&gt;len（）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="7e2391f38322eb20263936b3bfa8fc3471e6b69b" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,TOrderedSet%5BA%5D&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,TOrderedSet%5BA%5D&quot;&gt;len（）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="d86fe62b7538063ec7bfae9f6c08a83088df2cff" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#len,TSet%5BA%5D&quot;&gt;len()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#len,TSet%5BA%5D&quot;&gt;len（）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="c369c41a51b721ffa0c36f0a38f36d5f3fe90653" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#none,typedesc&quot;&gt;none(T) proc&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#none,typedesc&quot;&gt;none（T）procの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="41b739a23c6fc05ac36095d9dd959eb84d6a5a1f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#symmetricDifference&quot;&gt;symmetricDifference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#symmetricDifference&quot;&gt;symmetricDifference（s1、s2）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="0aec4506722e668f1f0e0f5f768a71ec370a8b5c" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#symmetricDifference,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;symmetricDifference(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#symmetricDifference,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;symmetricDifference（s1、s2）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="f3db9334116c6d200d159599181aa97f7e9eee70" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#union&quot;&gt;union(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#union&quot;&gt;union（s1、s2）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="d05f525a9d5842ca8247f623c979e431534b00c1" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#union,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;union(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#union,HashSet%5BA%5D,HashSet%5BA%5D&quot;&gt;union（s1、s2）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="629615d6f5a705c8f7b1097b7a9400f5bd7a5892" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#union,IntSet,IntSet&quot;&gt;union(s1, s2)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#union,IntSet,IntSet&quot;&gt;union（s1、s2）の&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="9fdf5629aa63f19dadb3054a1faf88668b0ab6e7" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;console.error()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;console.error()&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="93d508bd2bfc8a4302e90cc6be8d6bc7082ef911" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="8b5be6f17bdfd8cbcd14d0c4aa54788e9e3d34a0" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;none(T)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;none(T)&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="dc3c3212c96ed5a75a219cf8a8294e101e81f4cb" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="1e4bb070d318337002207d7bc63945ccae6f4f29" translate="yes" xml:space="preserve">
          <source>Alias for a pair of 32-bit floats.</source>
          <target state="translated">32ビットのフロートのペアのエイリアス。</target>
        </trans-unit>
        <trans-unit id="453247eb19c6fe7d3343d1380efdd939f40a7501" translate="yes" xml:space="preserve">
          <source>Alias for a pair of 64-bit floats.</source>
          <target state="translated">64 ビットのフロートのペアのエイリアス。</target>
        </trans-unit>
        <trans-unit id="0e270057d243cf6c2e5a8adbee3e84192193ba53" translate="yes" xml:space="preserve">
          <source>Alias for for &lt;a href=&quot;#countSetBits,SomeInteger&quot;&gt;countSetBits&lt;/a&gt;. (Hamming weight.)</source>
          <target state="translated">&lt;a href=&quot;#countSetBits,SomeInteger&quot;&gt;countSetBitsの&lt;/a&gt;エイリアス。（ハミング重み。）</target>
        </trans-unit>
        <trans-unit id="880b74f9b1a7d4cf4585f8c8f387bcb20192549a" translate="yes" xml:space="preserve">
          <source>Alias for for countSetBits (Hamming weight.)</source>
          <target state="translated">countSetBits(ハミングウェイト)のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0232e77b936af53c5f4048ee8a964113bbf4f364" translate="yes" xml:space="preserve">
          <source>Alias for system.`$`(t) since Nim v0.20.</source>
          <target state="translated">Nim v0.20 以降の system.`$`(t)のエイリアス。</target>
        </trans-unit>
        <trans-unit id="1f9a23ac422f0e5443e01e349d57322e73288849" translate="yes" xml:space="preserve">
          <source>Alias for the operating system specific &lt;em&gt;&quot;open&quot;&lt;/em&gt; command, &lt;code&gt;&quot;open&quot;&lt;/code&gt; on OSX, MacOS and Windows, &lt;code&gt;&quot;xdg-open&quot;&lt;/code&gt; on Linux, BSD, etc.</source>
          <target state="translated">オペレーティングシステムの特定のエイリアス&lt;em&gt;「オープン」&lt;/em&gt;コマンド、 &lt;code&gt;&quot;open&quot;&lt;/code&gt; OSX、MacOSの、およびWindows上で、 &lt;code&gt;&quot;xdg-open&quot;&lt;/code&gt; などのLinux、BSD、上</target>
        </trans-unit>
        <trans-unit id="d3c9714cd11c037506385dd8c632916016f242a7" translate="yes" xml:space="preserve">
          <source>Alias for:</source>
          <target state="translated">別名は?</target>
        </trans-unit>
        <trans-unit id="568b052b7299aeec47ddd0e00e34376220e78ab0" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,CountTable%5BA%5D,A&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,CountTable%5BA%5D,A&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="1d53854d9ed55920dfe9c1a5678e23d027f6249b" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,CountTableRef%5BA%5D,A&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,CountTableRef%5BA%5D,A&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="24e959366fea593503a150254ae712bd5a394741" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,OrderedTable%5BA,B%5D,A&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,OrderedTable%5BA,B%5D,A&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="2bd1850ce1081e214177d4dcf503b3402bc74744" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,OrderedTableRef%5BA,B%5D,A&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,OrderedTableRef%5BA,B%5D,A&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="4c1e8c7884ac872c79a473784dcb87beaaeb14a0" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,StringTableRef,string&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,StringTableRef,string&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="d7ca8c0e914d0f5f1ed59231302c5f6d54c04075" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,Table%5BA,B%5D,A&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,Table%5BA,B%5D,A&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="d0102eabf21c6e45c1d28c47e4050dd577036f88" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#hasKey,TableRef%5BA,B%5D,A&quot;&gt;hasKey proc&lt;/a&gt; for use with the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 演算子で使用する&lt;a href=&quot;#hasKey,TableRef%5BA,B%5D,A&quot;&gt;hasKeyprocの&lt;/a&gt;エイリアス。</target>
        </trans-unit>
        <trans-unit id="dff4b15fdc5cd6b2d3a14ee08df536409dc7010c" translate="yes" xml:space="preserve">
          <source>Alias to type less.</source>
          <target state="translated">タイプを少なくするためのエイリアス。</target>
        </trans-unit>
        <trans-unit id="104cb8eefb7ba374e6a7fdf3bfea02d072081428" translate="yes" xml:space="preserve">
          <source>Aliasing restrictions in parameter passing</source>
          <target state="translated">パラメータの受け渡しにおけるエイリアスの制限</target>
        </trans-unit>
        <trans-unit id="23b284ccdbe19f7425cb58124eb1637a94d50595" translate="yes" xml:space="preserve">
          <source>Align pragma</source>
          <target state="translated">プラグマを整列させる</target>
        </trans-unit>
        <trans-unit id="2feaf49576ccc73f2b86d27faa6075fa943090f4" translate="yes" xml:space="preserve">
          <source>Aligns &lt;code&gt;s&lt;/code&gt; using &lt;code&gt;fill&lt;/code&gt; char. This is only of interest if you want to write a custom &lt;code&gt;format&lt;/code&gt; proc that should support the standard format specifiers.</source>
          <target state="translated">&lt;code&gt;fill&lt;/code&gt; char を使用して &lt;code&gt;s&lt;/code&gt; を整列します。これは、標準のフォーマット指定子をサポートする必要があるカスタム &lt;code&gt;format&lt;/code&gt; プロシージャを作成する場合にのみ重要です。</target>
        </trans-unit>
        <trans-unit id="4bcede847bb2505de2a000f871a53d72f1a799bb" translate="yes" xml:space="preserve">
          <source>Aligns a string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;padding&lt;/code&gt;, so that it is of length &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;padding&lt;/code&gt; 揃えて、長さが &lt;code&gt;count&lt;/code&gt; になるようにします。</target>
        </trans-unit>
        <trans-unit id="4a373b51ddb20415acc6f2cab49e7a886d4418f7" translate="yes" xml:space="preserve">
          <source>Aligns a string &lt;em&gt;s&lt;/em&gt; with &lt;em&gt;padding&lt;/em&gt;, so that it is of length &lt;em&gt;count&lt;/em&gt;.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;を&lt;em&gt;パディングに&lt;/em&gt;揃えて、長さを&lt;em&gt;数えます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6628bfc03620870ce42f4844ffc52e6eca7e2b68" translate="yes" xml:space="preserve">
          <source>Aligns a unicode string &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;padding&lt;/code&gt;, so that it has a rune-length of &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">Unicode文字列 &lt;code&gt;s&lt;/code&gt; を &lt;code&gt;padding&lt;/code&gt; に揃えて、ルーン文字の長さが &lt;code&gt;count&lt;/code&gt; になるようにします。</target>
        </trans-unit>
        <trans-unit id="18f77fc6c5026c1d2d103f3b97daf7c1dbd054f5" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;db_*&lt;/code&gt; modules support the same form of parameter substitution. That is, using the &lt;code&gt;?&lt;/code&gt; (question mark) to signify the place where a value should be placed. For example:</source>
          <target state="translated">すべての &lt;code&gt;db_*&lt;/code&gt; モジュールは、同じ形式のパラメーター置換をサポートしています。つまり、 &lt;code&gt;?&lt;/code&gt; （疑問符）値を配置する場所を示します。例えば：</target>
        </trans-unit>
        <trans-unit id="9552063c6dac2a0b2b6f80dd47ebd5c82800945e" translate="yes" xml:space="preserve">
          <source>All Nim source files are in the UTF-8 encoding (or its ASCII subset). Other encodings are not supported. Any of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the Windows form using the ASCII sequence CR LF (return followed by linefeed), or the old Macintosh form using the ASCII CR (return) character. All of these forms can be used equally, regardless of platform.</source>
          <target state="translated">すべての Nim ソースファイルは UTF-8 エンコーディング(またはその ASCII サブセット)です。他のエンコーディングはサポートされていません。ASCII LF (linefeed)を使用する Unix 形式、ASCII シーケンス CR LF (return after linefeed)を使用する Windows 形式、ASCII CR (return after linefeed)文字を使用する古い Macintosh 形式のいずれかの標準プラットフォームの行終端シーケンスを使用することができます。これらのフォームはすべて、プラットフォームに関係なく等しく使用することができます。</target>
        </trans-unit>
        <trans-unit id="53be8359eb31c3bb37cefb8008e50675ad0c6bce" translate="yes" xml:space="preserve">
          <source>All Nim source files are in the UTF-8 encoding (or its ASCII subset). Other encodings are not supported. Any of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the Windows form using the ASCII sequence CR LF (return followed by linefeed), or the old Macintosh form using the ASCII CR (return) character. All of these forms can be used equally, regardless of the platform.</source>
          <target state="translated">すべての Nim ソースファイルは UTF-8 エンコーディング(またはその ASCII サブセット)です。他のエンコーディングはサポートされていません。ASCII LF (linefeed)を使用する Unix 形式、ASCII シーケンス CR LF (return after linefeed)を使用する Windows 形式、ASCII CR (return after linefeed)文字を使用する古い Macintosh 形式のいずれかの標準的なプラットフォームの行終端シーケンスを使用することができます。これらのフォームはすべて、プラットフォームに関係なく等しく使用することができます。</target>
        </trans-unit>
        <trans-unit id="2c0abd1c94e3986f0fc217d43c9ce2e325e352e8" translate="yes" xml:space="preserve">
          <source>All asynchronous functions returning a &lt;code&gt;Future&lt;/code&gt; will not block. They will not however return immediately. An asynchronous function will have code which will be executed before an asynchronous request is made, in most cases this code sets up the request.</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; を返すすべての非同期関数はブロックしません。ただし、すぐには戻りません。非同期関数には、非同期要求が行われる前に実行されるコードが含まれます。ほとんどの場合、このコードは要求をセットアップします。</target>
        </trans-unit>
        <trans-unit id="00b074df2678b416192356b1a38a849d3da057dd" translate="yes" xml:space="preserve">
          <source>All expressions have a type that is known during semantic analysis. Nim is statically typed. One can declare new types, which is in essence defining an identifier that can be used to denote this custom type.</source>
          <target state="translated">すべての式は、意味解析の際に知られている型を持っています。Nimは静的に型付けされています。新しい型を宣言することができますが、これは本質的には、このカスタム型を表すために使用できる識別子を定義することです。</target>
        </trans-unit>
        <trans-unit id="987c15958bc12d3f55c911e8dc5fec4777c6bc5e" translate="yes" xml:space="preserve">
          <source>All expressions have a type which is known at compile time. Nim is statically typed. One can declare new types, which is in essence defining an identifier that can be used to denote this custom type.</source>
          <target state="translated">すべての式はコンパイル時に既知の型を持っています。Nimは静的に型付けされています。新しい型を宣言することができますが、これは本質的には、このカスタム型を表すために使用できる識別子を定義することです。</target>
        </trans-unit>
        <trans-unit id="92809bea6792f7ae6e88db1176236402c1b49d41" translate="yes" xml:space="preserve">
          <source>All fields will have the same sign.</source>
          <target state="translated">すべてのフィールドには同じ符号が付きます。</target>
        </trans-unit>
        <trans-unit id="f984cab28f61b914c2bd533b03fae6756c4294ad" translate="yes" xml:space="preserve">
          <source>All identifiers of a module are valid from the point of declaration until the end of the module. Identifiers from indirectly dependent modules are &lt;em&gt;not&lt;/em&gt; available. The &lt;span id=&quot;system_1&quot;&gt;system&lt;/span&gt; module is automatically imported in every module.</source>
          <target state="translated">モジュールのすべての識別子は、宣言の時点からモジュールの終わりまで有効です。間接的に依存するモジュールの識別子&lt;em&gt;は&lt;/em&gt;使用でき&lt;em&gt;ませ&lt;/em&gt;ん。&lt;span id=&quot;system_1&quot;&gt;システム&lt;/span&gt;モジュールは、自動的にすべてのモジュールにインポートされます。</target>
        </trans-unit>
        <trans-unit id="2b758e4da2df5099c4fcdcedcd68afb1e4873ff9" translate="yes" xml:space="preserve">
          <source>All macros and templates can also be used as pragmas. They can be attached to routines (procs, iterators, etc), type names, or type expressions. The compiler will perform the following simple syntactic transformations:</source>
          <target state="translated">すべてのマクロとテンプレートは、プラグマとしても使用できます。これらは、ルーチン(proc、イテレータなど)、型名、または型式に添付することができます。コンパイラは以下の単純な構文変換を実行します。</target>
        </trans-unit>
        <trans-unit id="cded9aa9ab6801c06f94e1f6e9e5425ed01952a5" translate="yes" xml:space="preserve">
          <source>All of the available idetools commands require you to specify a query location through the &lt;code&gt;--track&lt;/code&gt; or &lt;code&gt;--trackDirty&lt;/code&gt; switches. The general idetools invocations are:</source>
          <target state="translated">使用可能なすべてのidetoolsコマンドでは、 &lt;code&gt;--track&lt;/code&gt; または &lt;code&gt;--trackDirty&lt;/code&gt; スイッチを使用してクエリの場所を指定する必要があります。一般的なidetoolsの呼び出しは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="433f618d4804b96035339cf390e19dd47ccae945" translate="yes" xml:space="preserve">
          <source>All procedures of this module use this type. Procedures don't directly use &lt;a href=&quot;#StreamObj&quot;&gt;StreamObj&lt;/a&gt;.</source>
          <target state="translated">このモジュールのすべてのプロシージャはこのタイプを使用します。プロシージャは&lt;a href=&quot;#StreamObj&quot;&gt;StreamObjを&lt;/a&gt;直接使用しません。</target>
        </trans-unit>
        <trans-unit id="96cbbecb3e99c48c7b4fe7081d99be9e034325bf" translate="yes" xml:space="preserve">
          <source>All string literals are of the type &lt;code&gt;string&lt;/code&gt;. A string in Nim is very similar to a sequence of characters. However, strings in Nim are both zero-terminated and have a length field. One can retrieve the length with the builtin &lt;code&gt;len&lt;/code&gt; procedure; the length never counts the terminating zero.</source>
          <target state="translated">すべての文字列リテラルは型である &lt;code&gt;string&lt;/code&gt; 。Nimの文字列は、文字のシーケンスに非常に似ています。ただし、Nimの文字列はどちらもゼロで終了し、長さフィールドがあります。組み込みの &lt;code&gt;len&lt;/code&gt; プロシージャで長さを取得できます。長さが終了ゼロを数えることはありません。</target>
        </trans-unit>
        <trans-unit id="c6b1a1f14d43339564b33e2a129f631ca1f3956e" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;tests/caas/*.txt&lt;/code&gt; files encode a session with the compiler:</source>
          <target state="translated">すべての &lt;code&gt;tests/caas/*.txt&lt;/code&gt; ファイルは、コンパイラとのセッションをエンコードします。</target>
        </trans-unit>
        <trans-unit id="674be9ae4a283b604e5d55618b959feb8ee26d62" translate="yes" xml:space="preserve">
          <source>All the characters that count as whitespace (space, tab, vertical tab, carriage return, new line, form feed)</source>
          <target state="translated">空白としてカウントされるすべての文字(スペース、タブ、縦タブ、キャリッジリターン、改行、フォームフィード</target>
        </trans-unit>
        <trans-unit id="d7d265f3de6bf8deede109e19dc230beea86f266" translate="yes" xml:space="preserve">
          <source>All the characters that count as whitespace.</source>
          <target state="translated">空白としてカウントされるすべての文字。</target>
        </trans-unit>
        <trans-unit id="0858ffb5249b4b454db4fc31e3311bb8f257c071" translate="yes" xml:space="preserve">
          <source>All the comparison operators can be used with enumeration types.</source>
          <target state="translated">すべての比較演算子は列挙型で使用できます。</target>
        </trans-unit>
        <trans-unit id="6c891dcf4573456ce1e2da5262b50d0a08307027" translate="yes" xml:space="preserve">
          <source>All the operations have to perform efficiently. Because a Cellset can become huge a hash table alone is not suitable for this.</source>
          <target state="translated">すべての操作を効率的に行わなければならない。セルセットは巨大化する可能性があるので、ハッシュテーブルだけでは不向きです。</target>
        </trans-unit>
        <trans-unit id="d7919c15f302a782639503db1ddcfd789a925698" translate="yes" xml:space="preserve">
          <source>All the sequences that define a single byte value or a single UTF-8 character (in UTF-8 mode) can be used both inside and outside character classes. In addition, inside a character class, the sequence &lt;code&gt;\b&lt;/code&gt; is interpreted as the backspace character (hex 08), and the sequence &lt;code&gt;\X&lt;/code&gt; is interpreted as the character &quot;X&quot;. Outside a character class, these sequences have different meanings (see below).</source>
          <target state="translated">シングルバイト値または単一のUTF-8文字（UTF-8モード）を定義するすべてのシーケンスは、文字クラスの内部と外部の両方で使用できます。さらに、文字クラス内では、シーケンス &lt;code&gt;\b&lt;/code&gt; はバックスペース文字（16進08）として解釈され、シーケンス &lt;code&gt;\X&lt;/code&gt; は文字 &quot;X&quot;として解釈されます。文字クラスの外では、これらのシーケンスには異なる意味があります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="169951f4b6d1d7f1a4b31b9a082c85cf7bcb2136" translate="yes" xml:space="preserve">
          <source>All top level constants or types appearing within the concept body are accessible through the dot operator in procs where the concept was successfully matched to a concrete type:</source>
          <target state="translated">概念本体内に現れるすべてのトップレベルの定数や型は、概念が具体的な型に正常にマッチしたプロ ジェクトでは、ドット演算子を使ってアクセスできます。</target>
        </trans-unit>
        <trans-unit id="3c975cb1e2ba6e75d38b206700dca326fdb354fc" translate="yes" xml:space="preserve">
          <source>All types for that &lt;code&gt;nil&lt;/code&gt; is a valid value can be annotated to exclude &lt;code&gt;nil&lt;/code&gt; as a valid value with the &lt;code&gt;not nil&lt;/code&gt; annotation:</source>
          <target state="translated">その &lt;code&gt;nil&lt;/code&gt; が有効な値であるすべてのタイプに注釈を付けて、 &lt;code&gt;not nil&lt;/code&gt; アノテーションで有効な値として &lt;code&gt;nil&lt;/code&gt; を除外できます。</target>
        </trans-unit>
        <trans-unit id="92ecd37f4fed9b99ae21b4e468d434ca109d4a8c" translate="yes" xml:space="preserve">
          <source>All types for which &lt;code&gt;nil&lt;/code&gt; is a valid value can be annotated with the &lt;code&gt;not nil&lt;/code&gt; annotation to exclude &lt;code&gt;nil&lt;/code&gt; as a valid value:</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; が有効な値であるすべてのタイプに、 &lt;code&gt;not nil&lt;/code&gt; アノテーションを付けて、 &lt;code&gt;nil&lt;/code&gt; を有効な値として除外することができます。</target>
        </trans-unit>
        <trans-unit id="0f502b4a3c8124f068d8f4c024865eb1ab5a1cf4" translate="yes" xml:space="preserve">
          <source>Allocates a new memory block on the shared heap with at least &lt;code&gt;T.sizeof * size&lt;/code&gt; bytes.</source>
          <target state="translated">少なくとも &lt;code&gt;T.sizeof * size&lt;/code&gt; バイトの共有ヒープに新しいメモリブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="9b20fff58bbd0e44f2a2e2e6eb582620afd21c21" translate="yes" xml:space="preserve">
          <source>Allocates a new memory block on the shared heap with at least &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">少なくとも &lt;code&gt;size&lt;/code&gt; バイトの共有ヒープに新しいメモリブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="35f5a857e75063995215816821d0f1770f35f73c" translate="yes" xml:space="preserve">
          <source>Allocates a new memory block with at least &lt;code&gt;T.sizeof * size&lt;/code&gt; bytes.</source>
          <target state="translated">少なくとも &lt;code&gt;T.sizeof * size&lt;/code&gt; バイトの新しいメモリブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="54289ede638acbe864667fd63428f7048731c3e6" translate="yes" xml:space="preserve">
          <source>Allocates a new memory block with at least &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">少なくとも &lt;code&gt;size&lt;/code&gt; バイトの新しいメモリブロックを割り当てます。</target>
        </trans-unit>
        <trans-unit id="ac79cefc92c75eb439b3995e551d8211d527174a" translate="yes" xml:space="preserve">
          <source>AllowCommonBase:</source>
          <target state="translated">AllowCommonBase:</target>
        </trans-unit>
        <trans-unit id="e1533f097a691960fb636e648fa3a6a10f49cb06" translate="yes" xml:space="preserve">
          <source>Allowed types for &lt;code&gt;T&lt;/code&gt; are integers, floats, and enums without holes.</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; に許可されるタイプは、整数、浮動小数点数、および穴のない列挙型です。</target>
        </trans-unit>
        <trans-unit id="dfa2aa3af7fa08673515debab6b959324fc3ac7e" translate="yes" xml:space="preserve">
          <source>Allows you to override the behaviour of your application when CTRL+C is pressed. Only one such hook is supported.</source>
          <target state="translated">CTRL+Cが押されたときのアプリケーションの動作を上書きすることができます。このようなフックは1つだけサポートされています。</target>
        </trans-unit>
        <trans-unit id="712e713171e76aececc409bac7c3780f3eb452be" translate="yes" xml:space="preserve">
          <source>Also known as (in other languages)</source>
          <target state="translated">別名</target>
        </trans-unit>
        <trans-unit id="ab3670407090c86340b7a0b2e617c282de436932" translate="yes" xml:space="preserve">
          <source>Also see &lt;code&gt;dumpAstGen&lt;/code&gt; and &lt;code&gt;dumpLisp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dumpAstGen&lt;/code&gt; および &lt;code&gt;dumpLisp&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="2407067910847be1a5da2135b6ce96e939f954b3" translate="yes" xml:space="preserve">
          <source>Also see &lt;code&gt;dumpAstGen&lt;/code&gt; and &lt;code&gt;dumpTree&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dumpAstGen&lt;/code&gt; および &lt;code&gt;dumpTree&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b29cad5adcb6a93f7398629c014ec484347ea3bc" translate="yes" xml:space="preserve">
          <source>Also see &lt;code&gt;dumpTree&lt;/code&gt; and &lt;code&gt;dumpLisp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dumpTree&lt;/code&gt; および &lt;code&gt;dumpLisp&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="029f6357cfa5fa54f588a79c60e26072ee6dc04a" translate="yes" xml:space="preserve">
          <source>Also, you won't find raw &lt;code&gt;\n&lt;/code&gt; characters breaking the one answer per line format. Instead you will need to parse sequences in the form &lt;code&gt;\xHH&lt;/code&gt;, where &lt;em&gt;HH&lt;/em&gt; is a hexadecimal value (e.g. newlines generate the sequence &lt;code&gt;\x0A&lt;/code&gt;).</source>
          <target state="translated">また、行形式ごとに1つの回答を壊す生の &lt;code&gt;\n&lt;/code&gt; 文字は見つかりません。代わりに、フォーム内のシーケンス解析する必要があります &lt;code&gt;\xHH&lt;/code&gt; 、&lt;em&gt;HHは&lt;/em&gt; 16進数の値である（例えば改行シーケンスを生成 &lt;code&gt;\x0A&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4521b364cb9ce19f839632eb99d99bb31f52f57b" translate="yes" xml:space="preserve">
          <source>Alternate version of the above.</source>
          <target state="translated">上記の代替版です。</target>
        </trans-unit>
        <trans-unit id="3b74e96e489cf616e54374e5e92ff3290101f441" translate="yes" xml:space="preserve">
          <source>Alternative</source>
          <target state="translated">Alternative</target>
        </trans-unit>
        <trans-unit id="d29cbcd3570c897268db2aa03ceca37c4f9af02e" translate="yes" xml:space="preserve">
          <source>Alternatively, it is possible to use &lt;code&gt;getCurrentException&lt;/code&gt; to retrieve the exception that has been raised:</source>
          <target state="translated">または、 &lt;code&gt;getCurrentException&lt;/code&gt; を使用して、発生した例外を取得することもできます。</target>
        </trans-unit>
        <trans-unit id="24a6f9561b6fb31bcce22dd9eefb7cb23c8efb12" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;distinct&lt;/code&gt; type modifier can be applied to the type class to allow each param matching the type class to bind to a different type. Such type classes are called &lt;span id=&quot;bind-many_1&quot;&gt;bind many&lt;/span&gt; types.</source>
          <target state="translated">別の方法として、 &lt;code&gt;distinct&lt;/code&gt; タイプ修飾子をタイプクラスに適用して、タイプクラスに一致する各パラメーターが異なるタイプにバインドできるようにすることもできます。このような型クラスは、&lt;span id=&quot;bind-many_1&quot;&gt;バインド多くの&lt;/span&gt;型と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="c5c9b8d75bae0a4e7883c1afe39fba029a2a402f" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;em&gt;type&lt;/em&gt; operator can be used over the proc params for similar effect when anonymous or distinct type classes are used.</source>
          <target state="translated">あるいは、匿名または個別の型クラスが使用されている場合、同様の効果を得るために、proc paramsに対して&lt;em&gt;型&lt;/em&gt;演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="5b30b701e37924ad0c27b052555995c52f8814d1" translate="yes" xml:space="preserve">
          <source>Although Nim supports a variety of code and formatting styles, it is nevertheless beneficial that certain community efforts, such as the standard library, should follow a consistent set of style guidelines when suitable. This enhancement proposal aims to list a series of guidelines that the standard library should follow.</source>
          <target state="translated">Nimは様々なコードやフォーマットのスタイルをサポートしていますが、それにもかかわらず、標準ライブラリのような特定のコミュニティの取り組みは、適切な場合には一貫したスタイルのガイドラインに従うべきです。この拡張提案は、標準ライブラリが従うべき一連のガイドラインを列挙することを目的としています。</target>
        </trans-unit>
        <trans-unit id="cd0ad178d074aad3f70271e85d87e8380aa9e712" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;times&lt;/code&gt; module supports nanosecond time resolution, the resolution used by &lt;code&gt;getTime()&lt;/code&gt; depends on the platform and backend (JS is limited to millisecond precision).</source>
          <target state="translated">が &lt;code&gt;times&lt;/code&gt; 支持体ナノ秒の時間分解能で使用解像度モジュール &lt;code&gt;getTime()&lt;/code&gt; を（JSは、ミリ秒の精度に制限されて）プラットフォームとバックエンドに依存します。</target>
        </trans-unit>
        <trans-unit id="e818f14ba9bbedb672b0a658dcc233bb37218e4d" translate="yes" xml:space="preserve">
          <source>Although the types use nanosecond time resolution, the underlying resolution used by &lt;code&gt;getTime()&lt;/code&gt; depends on the platform and backend (JS is limited to millisecond precision).</source>
          <target state="translated">タイプはナノ秒の時間解像度を使用し &lt;code&gt;getTime()&lt;/code&gt; 、getTime（）が使用する基本的な解像度はプラットフォームとバックエンドによって異なります（JSはミリ秒の精度に制限されています）。</target>
        </trans-unit>
        <trans-unit id="a1980deb423f91e0ac3552e894ae9e6ff761680b" translate="yes" xml:space="preserve">
          <source>Although this module has &lt;code&gt;seq&lt;/code&gt; in its name, it implements operations not only for &lt;span id=&quot;seq_1&quot;&gt;seq&lt;/span&gt; type, but for three built-in container types under the &lt;code&gt;openArray&lt;/code&gt; umbrella:</source>
          <target state="translated">このモジュールの名前には &lt;code&gt;seq&lt;/code&gt; が含まれていますが、&lt;span id=&quot;seq_1&quot;&gt;seq&lt;/span&gt;タイプだけでなく、 &lt;code&gt;openArray&lt;/code&gt; 傘下の3つの組み込みコンテナータイプの操作も実装しています。</target>
        </trans-unit>
        <trans-unit id="d3c0c9ff9b3e9a28a9649fc31261da1cd44edd57" translate="yes" xml:space="preserve">
          <source>Although use of whitespace for stylistic reasons other than the ones endorsed by this guide are allowed, careful thought should be put into such practices. Not all editors support automatic alignment of code sections, and re-aligning long sections of code by hand can quickly become tedious.</source>
          <target state="translated">このガイドで推奨されているもの以外の文体上の理由での空白の使用は認められていますが、そのような慣習には注意を払う必要があります。すべてのエディタがコードセクションの自動整列をサポートしているわけではありませんし、長いコードセクションを手作業で整列し直すのはすぐに面倒になります。</target>
        </trans-unit>
        <trans-unit id="91fc7a21703d6509e49f44ea9f9faec24ea18eb4" translate="yes" xml:space="preserve">
          <source>Always spawns a new task on the worker thread with &lt;code&gt;id&lt;/code&gt;, so that the &lt;code&gt;call&lt;/code&gt; is &lt;strong&gt;always&lt;/strong&gt; executed on the thread.</source>
          <target state="translated">必ずとワーカースレッドで新しいタスクスポーン &lt;code&gt;id&lt;/code&gt; そうすることを、 &lt;code&gt;call&lt;/code&gt; され&lt;strong&gt;、常に&lt;/strong&gt;スレッドで実行。</target>
        </trans-unit>
        <trans-unit id="4cb3dbed99e04b239b1de48db1267c46da599c66" translate="yes" xml:space="preserve">
          <source>Always spawns a new task, so that the &lt;code&gt;call&lt;/code&gt; is never executed on the calling thread.</source>
          <target state="translated">常に新しいタスクを生成するため、呼び出し元のスレッドで &lt;code&gt;call&lt;/code&gt; が実行されることはありません。</target>
        </trans-unit>
        <trans-unit id="614ddcbf931903423c230b8f0212d11059c5ec82" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ValueError&lt;/code&gt; exception will be thrown if no exception exists in the specified Future.</source>
          <target state="translated">アン &lt;code&gt;ValueError&lt;/code&gt; 例外が指定された未来の中に存在しない場合は、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="ef24e3c1b8f7b901d42c45e46f29ceddb0745dc1" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;export&lt;/code&gt; statement can be used for symbol forwarding so that client modules don't need to import a module's dependencies:</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; そのクライアントモジュールは、モジュールの依存関係をインポートする必要はありませんので、文は、シンボルの転送のために使用することができます。</target>
        </trans-unit>
        <trans-unit id="f25fd35f79132b361f9e115a28ec0aeef24ee99a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if expression&lt;/code&gt; is almost like an if statement, but it is an expression. This feature is similar to &lt;code&gt;ternary operators&lt;/code&gt; in other languages. Example:</source>
          <target state="translated">&lt;code&gt;if expression&lt;/code&gt; ほとんどのif文のようなものですが、それは式です。この機能は、他の言語の &lt;code&gt;ternary operators&lt;/code&gt; に似ています。例：</target>
        </trans-unit>
        <trans-unit id="73a35d34d5220f34295669a5c8b933dc1ceedeca" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;untyped&lt;/code&gt; parameter means that symbol lookups and type resolution is not performed before the expression is passed to the template. This means that for example &lt;em&gt;undeclared&lt;/em&gt; identifiers can be passed to the template:</source>
          <target state="translated">&lt;code&gt;untyped&lt;/code&gt; シンボルの検索と型解像度は式の前に行われていないパラメータ手段は、テンプレートに渡されます。つまり、たとえば、&lt;em&gt;宣言&lt;/em&gt;さ&lt;em&gt;れていない&lt;/em&gt;識別子をテンプレートに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="bae34c49da483225476ede34178ee0a4cd7dbb4e" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;if expression&lt;/em&gt; is almost like an if statement, but it is an expression. Example:</source>
          <target state="translated">&lt;em&gt;if式は、&lt;/em&gt;ほとんどのif文のようなものですが、それは式です。例：</target>
        </trans-unit>
        <trans-unit id="6913655373469dbc7b3bf423a90b3116ade5a64c" translate="yes" xml:space="preserve">
          <source>An &lt;span id=&quot;identifier_1&quot;&gt;identifier&lt;/span&gt; is a symbol declared as a name for a variable, type, procedure, etc. The region of the program over which a declaration applies is called the &lt;span id=&quot;scope_1&quot;&gt;scope&lt;/span&gt; of the declaration. Scopes can be nested. The meaning of an identifier is determined by the smallest enclosing scope in which the identifier is declared unless overloading resolution rules suggest otherwise.</source>
          <target state="translated">&lt;span id=&quot;identifier_1&quot;&gt;識別子は、&lt;/span&gt;宣言が適用される上に、プログラムの領域が呼び出された変数の名前、タイプ、手順、等のシンボル宣言された&lt;span id=&quot;scope_1&quot;&gt;スコープ&lt;/span&gt;宣言。スコープは入れ子にすることができます。識別子の意味は、オーバーロードの解決ルールで特に示唆されていない限り、識別子が宣言されている最小のスコープによって決定されます。</target>
        </trans-unit>
        <trans-unit id="061ca26b5cf33352ffc7a1f211f8bce9704c6837" translate="yes" xml:space="preserve">
          <source>An &lt;span id=&quot;unchecked-runtime-error_1&quot;&gt;unchecked runtime error&lt;/span&gt; is an error that is not guaranteed to be detected and can cause the subsequent behavior of the computation to be arbitrary. Unchecked runtime errors cannot occur if only &lt;span id=&quot;safe_1&quot;&gt;safe&lt;/span&gt; language features are used and if no runtime checks are disabled.</source>
          <target state="translated">&lt;span id=&quot;unchecked-runtime-error_1&quot;&gt;未確認のランタイムエラーが&lt;/span&gt;検出されることが保証されておらず、任意であるために、計算のその後の行動を引き起こす可能性がありますエラーです。&lt;span id=&quot;safe_1&quot;&gt;安全な&lt;/span&gt;言語機能のみが使用され、ランタイムチェックが無効になっていない場合、チェックされていないランタイムエラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="27d850be93dc755d2b65d8e923239958da9648c2" translate="yes" xml:space="preserve">
          <source>An &lt;span id=&quot;unchecked-runtime-error_1&quot;&gt;unchecked runtime error&lt;/span&gt; is an error that is not guaranteed to be detected, and can cause the subsequent behavior of the computation to be arbitrary. Unchecked runtime errors cannot occur if only &lt;span id=&quot;safe_1&quot;&gt;safe&lt;/span&gt; language features are used.</source>
          <target state="translated">&lt;span id=&quot;unchecked-runtime-error_1&quot;&gt;未確認のランタイムエラーが&lt;/span&gt;検出されることが保証されず、任意であることを計算のその後の行動を引き起こす可能性がありますエラーです。&lt;span id=&quot;safe_1&quot;&gt;安全な&lt;/span&gt;言語機能のみを使用している場合、チェックされていないランタイムエラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="d086f48ed32221353a34e9e09e19fc50d2b08517" translate="yes" xml:space="preserve">
          <source>An EOS (or ESSL if socket is an SSL socket) exception is raised if an error occurs.</source>
          <target state="translated">エラーが発生した場合、EOS(ソケットがSSLソケットの場合はESSL)例外が発生します。</target>
        </trans-unit>
        <trans-unit id="fad595a4ff6c034a05915aa77a9cf525f3217cd5" translate="yes" xml:space="preserve">
          <source>An EOS exception will be raised in the case of a socket error.</source>
          <target state="translated">ソケットエラーが発生した場合、EOS例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a41070b200aa0a43fc8f9636da9beacac7babdfd" translate="yes" xml:space="preserve">
          <source>An OS-dependent trailing slash is always present at the end of the returned string: &lt;code&gt;\&lt;/code&gt; on Windows and &lt;code&gt;/&lt;/code&gt; on all other OSs.</source>
          <target state="translated">OS依存の末尾のスラッシュが返される文字列の末尾に常に存在している： &lt;code&gt;\&lt;/code&gt; Windows上および &lt;code&gt;/&lt;/code&gt; 他のすべてのOSで。</target>
        </trans-unit>
        <trans-unit id="3690729b1f993aa06abd14818e2a3ebd8ae6f4b1" translate="yes" xml:space="preserve">
          <source>An OS-dependent trailing slash is always present at the end of the returned string; &lt;em&gt;` on Windows and `/&lt;/em&gt; on all other OSs.</source>
          <target state="translated">OSに依存する末尾のスラッシュは、返される文字列の末尾に常に存在します。&lt;em&gt;`Windowsでは` /&lt;/em&gt;、その他すべてのOSでは&lt;em&gt;`/&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="77a75598b28ac56217ca4e4f23642a8de53aad21" translate="yes" xml:space="preserve">
          <source>An OSError exception will be raised in the case of a socket error.</source>
          <target state="translated">ソケットエラーが発生した場合、OSError例外が発生します。</target>
        </trans-unit>
        <trans-unit id="fcebf55778fdd55bc0aef73bf199c5931d349101" translate="yes" xml:space="preserve">
          <source>An OpenSSL-compatible list of secure ciphers for &lt;code&gt;intermediate&lt;/code&gt; compatibility per Mozilla's recommendations.</source>
          <target state="translated">Mozillaの推奨に従って、 &lt;code&gt;intermediate&lt;/code&gt; 互換性のための安全な暗号のOpenSSL互換リスト。</target>
        </trans-unit>
        <trans-unit id="b18dbf60b64cda66a330d893f00943a347f1aec0" translate="yes" xml:space="preserve">
          <source>An OpenSSL-compatible list of secure ciphers for &lt;code&gt;modern&lt;/code&gt; compatibility per Mozilla's recommendations.</source>
          <target state="translated">Mozillaの推奨に従って、 &lt;code&gt;modern&lt;/code&gt; 互換性のための安全な暗号のOpenSSL互換リスト。</target>
        </trans-unit>
        <trans-unit id="58e9fa120e4714aa850b21cb9c6254a6941df14a" translate="yes" xml:space="preserve">
          <source>An OpenSSL-compatible list of secure ciphers for &lt;code&gt;old&lt;/code&gt; compatibility per Mozilla's recommendations.</source>
          <target state="translated">Mozillaの推奨に従って、 &lt;code&gt;old&lt;/code&gt; 互換性のための安全な暗号のOpenSSL互換リスト。</target>
        </trans-unit>
        <trans-unit id="ac3e1e808c3ac2cd8bce70c2071d873e2b0a45d7" translate="yes" xml:space="preserve">
          <source>An SQL statement that is passed from Nim to an SQL database might be modeled as a string. However, using string templates and filling in the values is vulnerable to the famous &lt;span id=&quot;sql-injection-attack_1&quot;&gt;SQL injection attack&lt;/span&gt;:</source>
          <target state="translated">NimからSQLデータベースに渡されるSQLステートメントは、文字列としてモデル化される場合があります。ただし、文字列テンプレートを使用して値を入力すると、有名な&lt;span id=&quot;sql-injection-attack_1&quot;&gt;SQLインジェクション攻撃&lt;/span&gt;に対して脆弱になり&lt;span id=&quot;sql-injection-attack_1&quot;&gt;ます&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="cb3c7dd4ccfc76b560ed8bea7cb91f6e590b5de7" translate="yes" xml:space="preserve">
          <source>An SQL statement that is passed from Nim to an SQL database might be modelled as a string. However, using string templates and filling in the values is vulnerable to the famous &lt;span id=&quot;sql-injection-attack_1&quot;&gt;SQL injection attack&lt;/span&gt;:</source>
          <target state="translated">NimからSQLデータベースに渡されるSQLステートメントは、文字列としてモデル化される場合があります。ただし、文字列テンプレートを使用して値を入力することは、有名な&lt;span id=&quot;sql-injection-attack_1&quot;&gt;SQLインジェクション攻撃&lt;/span&gt;に対して脆弱です。</target>
        </trans-unit>
        <trans-unit id="5abe3bd69e1de1da07178a2dcf83b8a0e9e325db" translate="yes" xml:space="preserve">
          <source>An XML tree consisting of XML nodes.</source>
          <target state="translated">XML ノードで構成される XML ツリー。</target>
        </trans-unit>
        <trans-unit id="cbd2fa1e084904d43296b92e52e48ff7123e1dd7" translate="yes" xml:space="preserve">
          <source>An address &lt;code&gt;addr e&lt;/code&gt;, &lt;code&gt;unsafeAddr e&lt;/code&gt; is a path expression.</source>
          <target state="translated">アドレスアドレス &lt;code&gt;addr e&lt;/code&gt; 、 &lt;code&gt;unsafeAddr e&lt;/code&gt; はパス式です。</target>
        </trans-unit>
        <trans-unit id="7795a2e689db190d98598b1e86b20a8411fd21d9" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#copyNimTree,NimNode&quot;&gt;copyNimTree&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#copyNimTree,NimNode&quot;&gt;copyNimTree&lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="ae9093985afcfa2beb7d11ea5796b36f8e9f0e1e" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#toUTF8,Rune&quot;&gt;toUTF8&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#toUTF8,Rune&quot;&gt;toUTF8&lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="d6b5b2a52bea6b4b6255ab33c977d4534669e142" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="f00085e2b37649dce2a25cb412e211917fdc7f3a" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;HSlice[T, T]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HSlice[T, T]&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0aafd9574ef1f09f128ef8bee0667f414aed2e4d" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;card(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;card(x)&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="959b4a587a6c12a87ac5b29c9adffb9fc202ff33" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;countup(a, b, 1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;countup(a, b, 1)&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="21f8477f1f960888a217819d2f42f5938ea92f4e" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;ptr float32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr float32&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="6f0d0c1d9f0d46bf4db307164d8c963a24877861" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;ptr float64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr float64&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="9f71273341163aba9e8123c101abbac1d7b95268" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;ptr int32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr int32&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="e7ce91b4a997d2fb64eebe61b0642c3424992e0b" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;ptr int64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ptr int64&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="544692451d460228f4efd605a86e7c0dab8a35ee" translate="yes" xml:space="preserve">
          <source>An alias for &lt;em&gt;countup(a, b, 1)&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;countup（a、b、1）&lt;/em&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="936583901537efa6474af706c7cbc7258cf9502a" translate="yes" xml:space="preserve">
          <source>An alias for &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;name&lt;/em&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="f0b1a1ef6cada9bfa0dc5126e5bf955852c7a8cf" translate="yes" xml:space="preserve">
          <source>An alias for a string to string mapping.</source>
          <target state="translated">文字列から文字列へのマッピングのエイリアス。</target>
        </trans-unit>
        <trans-unit id="d96ad4829046669ed22f88ed72333f46e46f422a" translate="yes" xml:space="preserve">
          <source>An alias for copyNimTree().</source>
          <target state="translated">copyNimTree()のエイリアス。</target>
        </trans-unit>
        <trans-unit id="002f21bee61c35000fab0c465633c7a8f89a5b1a" translate="yes" xml:space="preserve">
          <source>An alternative character used by the operating system to separate pathname components, or the same as &lt;a href=&quot;#DirSep&quot;&gt;DirSep&lt;/a&gt; if only one separator character exists. This is set to &lt;code&gt;'/'&lt;/code&gt; on Windows systems where &lt;a href=&quot;#DirSep&quot;&gt;DirSep&lt;/a&gt; is a backslash (&lt;code&gt;'\'&lt;/code&gt;).</source>
          <target state="translated">オペレーティングシステムがパス名コンポーネントを区切るために使用する代替文字。区切り文字が1つしかない場合は&lt;a href=&quot;#DirSep&quot;&gt;DirSep&lt;/a&gt;と同じです。これは、&lt;a href=&quot;#DirSep&quot;&gt;DirSep&lt;/a&gt;が円記号（ &lt;code&gt;'\'&lt;/code&gt; ）であるWindowsシステムでは &lt;code&gt;'/'&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="2bb4f7d6ba1dc1ca472b28bc42274504e162f7f7" translate="yes" xml:space="preserve">
          <source>An alternative character used by the operating system to separate pathname components, or the same as &lt;em&gt;DirSep&lt;/em&gt; if only one separator character exists. This is set to '/' on Windows systems where &lt;em&gt;DirSep&lt;/em&gt; is a backslash.</source>
          <target state="translated">オペレーティングシステムがパス名コンポーネントを区切るために使用する代替文字。区切り文字が1つしか存在しない場合は&lt;em&gt;DirSep&lt;/em&gt;と同じ。これは、&lt;em&gt;DirSep&lt;/em&gt;がバックスラッシュであるWindowsシステムでは「/」に設定されます。</target>
        </trans-unit>
        <trans-unit id="b10f9786df0315b28bef975ab41acecfb36800af" translate="yes" xml:space="preserve">
          <source>An apostrophe &lt;code&gt;'&lt;/code&gt; followed by an integer &lt;code&gt;i&lt;/code&gt; in the range 0..9 is replaced by the i'th parameter &lt;em&gt;type&lt;/em&gt;. The 0th position is the result type. This can be used to pass types to C++ function templates. Between the &lt;code&gt;'&lt;/code&gt; and the digit an asterisk can be used to get to the base type of the type. (So it &quot;takes away a star&quot; from the type; &lt;code&gt;T*&lt;/code&gt; becomes &lt;code&gt;T&lt;/code&gt;.) Two stars can be used to get to the element type of the element type etc.</source>
          <target state="translated">アポストロフィ &lt;code&gt;'&lt;/code&gt; の後に0..9の範囲の整数 &lt;code&gt;i&lt;/code&gt; が続く場合は、i番目のパラメーター&lt;em&gt;タイプに&lt;/em&gt;置き換えられます。 0番目の位置は結果のタイプです。これを使用して、C ++関数テンプレートに型を渡すことができます。 &lt;code&gt;'&lt;/code&gt; と数字の間には、アスタリスクを使用して型の基本型を取得できます。 （つまり、タイプから「星を取り去る」; &lt;code&gt;T*&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; になります。）2つの星を使用して、要素タイプなどの要素タイプに到達できます。</target>
        </trans-unit>
        <trans-unit id="c03a36e70e10adf9514f0958ccf602427aab976e" translate="yes" xml:space="preserve">
          <source>An apostrophe &lt;code&gt;'&lt;/code&gt; followed by an integer &lt;code&gt;i&lt;/code&gt; in the range 0..9 is replaced by the i'th parameter &lt;em&gt;type&lt;/em&gt;. The 0th position is the result type. This can be used to pass types to C++ function templates. Between the &lt;code&gt;'&lt;/code&gt; and the digit, an asterisk can be used to get to the base type of the type. (So it &quot;takes away a star&quot; from the type; &lt;code&gt;T*&lt;/code&gt; becomes &lt;code&gt;T&lt;/code&gt;.) Two stars can be used to get to the element type of the element type etc.</source>
          <target state="translated">アポストロフィ &lt;code&gt;'&lt;/code&gt; の後に0..9の範囲の整数 &lt;code&gt;i&lt;/code&gt; が続く場合は、i番目のパラメーター&lt;em&gt;型に&lt;/em&gt;置き換えられます。0番目の位置は結果タイプです。これは、C ++関数テンプレートに型を渡すために使用できます。 &lt;code&gt;'&lt;/code&gt; と数字の間で、アスタリスクを使用して、タイプの基本タイプを取得できます。（つまり、タイプから「星を奪う」 &lt;code&gt;T*&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; になります。）2つの星を使用して、要素タイプなどの要素タイプに到達できます。</target>
        </trans-unit>
        <trans-unit id="bb824cc35be0f255f85608320e99c712d9187e72" translate="yes" xml:space="preserve">
          <source>An array constructor can have explicit indexes for readability:</source>
          <target state="translated">配列のコンストラクタは、可読性のために明示的なインデックスを持つことができます。</target>
        </trans-unit>
        <trans-unit id="dcf4f417901eafdc569fc787f5454f9027073421" translate="yes" xml:space="preserve">
          <source>An array is a simple fixed length container. Each element in an array has the same type. The array's index type can be any ordinal type.</source>
          <target state="translated">配列は単純な固定長のコンテナです。配列の各要素は,同じ型を持ちます.配列のインデックス型は、任意の順序型にすることができます。</target>
        </trans-unit>
        <trans-unit id="2bb0838f1de59fe1b1009e5516379cb480056e4d" translate="yes" xml:space="preserve">
          <source>An array type can be defined using the &lt;code&gt;array[size, T]&lt;/code&gt; syntax, or using &lt;code&gt;array[lo..hi, T]&lt;/code&gt; for arrays that start at an index other than zero.</source>
          <target state="translated">配列型は、 &lt;code&gt;array[size, T]&lt;/code&gt; 構文を使用するか、ゼロ以外のインデックスで始まる配列の場合は &lt;code&gt;array[lo..hi, T]&lt;/code&gt; を使用して定義できます。</target>
        </trans-unit>
        <trans-unit id="00d1d57ff3f35fb4d74599ef1b920f45e23521b6" translate="yes" xml:space="preserve">
          <source>An asynchronous procedure is marked using the &lt;code&gt;{.async.}&lt;/code&gt; pragma. When marking a procedure with the &lt;code&gt;{.async.}&lt;/code&gt; pragma it must have a &lt;code&gt;Future[T]&lt;/code&gt; return type or no return type at all. If you do not specify a return type then &lt;code&gt;Future[void]&lt;/code&gt; is assumed.</source>
          <target state="translated">非同期プロシージャは、 &lt;code&gt;{.async.}&lt;/code&gt; プラグマを使用してマークされます。プロシージャを &lt;code&gt;{.async.}&lt;/code&gt; プラグマでマークする場合、 &lt;code&gt;Future[T]&lt;/code&gt; 戻り型が必要か、戻り型がまったくない必要があります。戻り値の型を指定しない場合、 &lt;code&gt;Future[void]&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="00cfb3b823850859ac087c9650335459fba3693e" translate="yes" xml:space="preserve">
          <source>An at symbol &lt;code&gt;@&lt;/code&gt; is replaced by the remaining arguments, separated by commas.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; 記号は、カンマで区切られた残りの引数に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="c7fb5b882232e37ef9e5f09cc9c28ae067b4a127" translate="yes" xml:space="preserve">
          <source>An efficient set of &lt;code&gt;int&lt;/code&gt; implemented as a sparse bit set.</source>
          <target state="translated">スパースビットセットとして実装された &lt;code&gt;int&lt;/code&gt; の効率的なセット。</target>
        </trans-unit>
        <trans-unit id="4b2e033ba877aaf8286b45d11a814ea58fa8eced" translate="yes" xml:space="preserve">
          <source>An efficient string substitution operator &lt;a href=&quot;#%25,string,StringTableRef,set%5BFormatFlag%5D&quot;&gt;%&lt;/a&gt; for the string table is also provided.</source>
          <target state="translated">文字列テーブルの効率的な文字列置換演算子&lt;a href=&quot;#%25,string,StringTableRef,set%5BFormatFlag%5D&quot;&gt;％&lt;/a&gt;も提供されます。</target>
        </trans-unit>
        <trans-unit id="e0a7ceb8146505e07f088182b71243011ca4cc3a" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;discard&lt;/code&gt; statement is often used as a null statement:</source>
          <target state="translated">空の &lt;code&gt;discard&lt;/code&gt; ステートメントは、nullステートメントとしてよく使用されます。</target>
        </trans-unit>
        <trans-unit id="63b984f97355b1726a5cf0fa4b3612ccc2253bdc" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;raises&lt;/code&gt; list (&lt;code&gt;raises: []&lt;/code&gt;) means that no exception may be raised:</source>
          <target state="translated">空の &lt;code&gt;raises&lt;/code&gt; リスト（ &lt;code&gt;raises: []&lt;/code&gt; ）は、例外が発生しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="3d47e32abe2e2402012d539378c2021368794e6d" translate="yes" xml:space="preserve">
          <source>An empty subscript &lt;code&gt;[]&lt;/code&gt; notation can be used to de-refer a reference, the &lt;code&gt;addr&lt;/code&gt; procedure returns the address of an item. An address is always an untraced reference. Thus the usage of &lt;code&gt;addr&lt;/code&gt; is an &lt;em&gt;unsafe&lt;/em&gt; feature.</source>
          <target state="translated">空の添え字 &lt;code&gt;[]&lt;/code&gt; 表記を使用して参照を逆参照できます &lt;code&gt;addr&lt;/code&gt; プロシージャはアイテムのアドレスを返します。アドレスは常にトレースされていない参照です。したがって、 &lt;code&gt;addr&lt;/code&gt; の使用は&lt;em&gt;安全で&lt;/em&gt;は&lt;em&gt;ない&lt;/em&gt;機能です。</target>
        </trans-unit>
        <trans-unit id="03f5c98cab13364c0bdb7873271e1f3fbcb787f2" translate="yes" xml:space="preserve">
          <source>An empty subscript &lt;code&gt;[]&lt;/code&gt; notation can be used to derefer a reference, the &lt;code&gt;addr&lt;/code&gt; procedure returns the address of an item. An address is always an untraced reference. Thus the usage of &lt;code&gt;addr&lt;/code&gt; is an &lt;em&gt;unsafe&lt;/em&gt; feature.</source>
          <target state="translated">空の添字 &lt;code&gt;[]&lt;/code&gt; 表記は参照をdereferするために使用することができ、 &lt;code&gt;addr&lt;/code&gt; 手順は、アイテムのアドレスを返します。アドレスは常にトレースされていない参照です。したがっての使い方 &lt;code&gt;addr&lt;/code&gt; がある&lt;em&gt;危険な&lt;/em&gt;機能。</target>
        </trans-unit>
        <trans-unit id="fd0163ff197f89984c82c49af75d8bfe8b3b9a66" translate="yes" xml:space="preserve">
          <source>An enum can be marked with the &lt;code&gt;pure&lt;/code&gt; pragma so that it's fields are added to a special module specific hidden scope that is only queried as the last attempt. Only non-ambiguous symbols are added to this scope. But one can always access these via type qualification written as &lt;code&gt;MyEnum.value&lt;/code&gt;:</source>
          <target state="translated">enumを &lt;code&gt;pure&lt;/code&gt; プラグマでマークして、そのフィールドが最後の試行としてのみ照会される特別なモジュール固有の非表示スコープに追加されるようにすることができます。このスコープには、あいまいでないシンボルのみが追加されます。ただし、 &lt;code&gt;MyEnum.value&lt;/code&gt; として記述された型修飾を介してこれらにいつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="eaad6be6b078620419d11201c663302e39f56608" translate="yes" xml:space="preserve">
          <source>An enum can be marked with the &lt;code&gt;pure&lt;/code&gt; pragma so that its fields are added to a special module-specific hidden scope that is only queried as the last attempt. Only non-ambiguous symbols are added to this scope. But one can always access these via type qualification written as &lt;code&gt;MyEnum.value&lt;/code&gt;:</source>
          <target state="translated">列挙型は &lt;code&gt;pure&lt;/code&gt; プラグマでマークできるため、そのフィールドは、最後の試行としてのみ照会される特別なモジュール固有の非表示スコープに追加されます。このスコープには、あいまいでないシンボルのみが追加されます。しかし、 &lt;code&gt;MyEnum.value&lt;/code&gt; として記述された型修飾を介してこれらにいつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="390d5ff2cbaae78dc0fa4290b4e9610666cc8fdf" translate="yes" xml:space="preserve">
          <source>An enum type can be marked as &lt;code&gt;pure&lt;/code&gt;. Then access of its fields always requires full qualification.</source>
          <target state="translated">列挙型は、 &lt;code&gt;pure&lt;/code&gt; としてマークできます。次に、そのフィールドへのアクセスには常に完全な修飾が必要です。</target>
        </trans-unit>
        <trans-unit id="367c78270c2f231073a0357927182872afdf0f63" translate="yes" xml:space="preserve">
          <source>An enum which hold event types</source>
          <target state="translated">イベントタイプを保持する列挙型</target>
        </trans-unit>
        <trans-unit id="4dcfd8f767ff68c968ba90d84fa6dca78b2ac575" translate="yes" xml:space="preserve">
          <source>An enumeration's symbol can be qualified to avoid ambiguities: &lt;code&gt;Direction.south&lt;/code&gt;.</source>
          <target state="translated">列挙のシンボルは、曖昧さを回避するために修飾できます： &lt;code&gt;Direction.south&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83a58494419b1a3e524ebfb95e03913553034371" translate="yes" xml:space="preserve">
          <source>An example &lt;code&gt;handleAccept&lt;/code&gt; follows:</source>
          <target state="translated">次に、 &lt;code&gt;handleAccept&lt;/code&gt; の例を示します。</target>
        </trans-unit>
        <trans-unit id="e19bbd77ddbc01db0ebc7ba2f0156d47d7b3cf8a" translate="yes" xml:space="preserve">
          <source>An example of a third party NimScript that can be used as a project-agnostic tool.</source>
          <target state="translated">プロジェクトに依存しないツールとして使えるサードパーティ製のNimScriptの例。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="e9998341fd216c991313f370f4227cc960a0fb79" translate="yes" xml:space="preserve">
          <source>An exception that is raised if a parsing error occurs.</source>
          <target state="translated">解析エラーが発生した場合に発生する例外。</target>
        </trans-unit>
        <trans-unit id="993744896fbb24a8143d61db93a5b797f2af5f88" translate="yes" xml:space="preserve">
          <source>An explicit ordered enum can have &lt;em&gt;holes&lt;/em&gt;:</source>
          <target state="translated">明示的に順序付けされた列挙型には、&lt;em&gt;穴&lt;/em&gt;がある場合があり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a5f3c80df868038bd59209ddaecef0136b0eb492" translate="yes" xml:space="preserve">
          <source>An exported helper proc that parses the &quot;standard format specifiers&quot;, as specified by the grammar:</source>
          <target state="translated">文法で指定された &quot;標準フォーマット指定子 &quot;を解析するエクスポートされたヘルパープロック。</target>
        </trans-unit>
        <trans-unit id="1740d5d24639d030a6825021bc6785735bbaf14c" translate="yes" xml:space="preserve">
          <source>An expression &lt;code&gt;b&lt;/code&gt; can be assigned to an expression &lt;code&gt;a&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an &lt;code&gt;l-value&lt;/code&gt; and &lt;code&gt;isImplicitlyConvertible(b.typ, a.typ)&lt;/code&gt; holds.</source>
          <target state="translated">式 &lt;code&gt;b&lt;/code&gt; 式に割り当てることができる &lt;code&gt;a&lt;/code&gt; ときに限りである &lt;code&gt;l-value&lt;/code&gt; と &lt;code&gt;isImplicitlyConvertible(b.typ, a.typ)&lt;/code&gt; 成り立ちます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="129cc9980afbc0b6d02dd90e59a7e2eac8eb8d2f" translate="yes" xml:space="preserve">
          <source>An expression &lt;code&gt;b&lt;/code&gt; can be assigned to an expression &lt;code&gt;a&lt;/code&gt; iff &lt;code&gt;a&lt;/code&gt; is an &lt;em&gt;l-value&lt;/em&gt; and &lt;code&gt;isImplicitlyConvertible(b.typ, a.typ)&lt;/code&gt; holds.</source>
          <target state="translated">式 &lt;code&gt;b&lt;/code&gt; は、 &lt;code&gt;a&lt;/code&gt; が&lt;em&gt;l値で&lt;/em&gt;、 &lt;code&gt;isImplicitlyConvertible(b.typ, a.typ)&lt;/code&gt; が成立 &lt;code&gt;a&lt;/code&gt; 場合に、式aに割り当てることができます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7d2a0ca1f92482471cb1498e046b1a61df5075bd" translate="yes" xml:space="preserve">
          <source>An expression like &lt;code&gt;&amp;amp;&quot;{key} is {value:arg} {{z}}&quot;&lt;/code&gt; is transformed into:</source>
          <target state="translated">&lt;code&gt;&amp;amp;&quot;{key} is {value:arg} {{z}}&quot;&lt;/code&gt; ような式は、次のように変換されます。</target>
        </trans-unit>
        <trans-unit id="76b9af7a299b61f177bed7560a19266b0bd700fc" translate="yes" xml:space="preserve">
          <source>An expression specifies a computation that produces a value or location. Expressions that produce locations are called &lt;span id=&quot;lminusvalues_1&quot;&gt;l-values&lt;/span&gt;. An l-value can denote either a location or the value the location contains, depending on the context.</source>
          <target state="translated">式は、値または場所を生成する計算を指定します。場所を生成する式は、&lt;span id=&quot;lminusvalues_1&quot;&gt;l値&lt;/span&gt;と呼ばれ&lt;span id=&quot;lminusvalues_1&quot;&gt;ます&lt;/span&gt;。l値は、コンテキストに応じて、場所またはその場所に含まれる値のいずれかを示すことができます。</target>
        </trans-unit>
        <trans-unit id="5cf1e65690ce8b0321d174674e5faf95e0f45bd9" translate="yes" xml:space="preserve">
          <source>An expression specifies a computation that produces a value or location. Expressions that produce locations are called &lt;span id=&quot;lminusvalues_1&quot;&gt;l-values&lt;/span&gt;. An l-value can denote either a location or the value the location contains, depending on the context. Expressions whose values can be determined statically are called &lt;span id=&quot;constant-expressions_1&quot;&gt;constant expressions&lt;/span&gt;; they are never l-values.</source>
          <target state="translated">式は、値または場所を生成する計算を指定します。場所を生成する式は、&lt;span id=&quot;lminusvalues_1&quot;&gt;l値&lt;/span&gt;と呼ばれ&lt;span id=&quot;lminusvalues_1&quot;&gt;ます&lt;/span&gt;。l値は、コンテキストに応じて、場所または場所に含まれる値を示します。値を静的に決定できる式は、&lt;span id=&quot;constant-expressions_1&quot;&gt;定数式&lt;/span&gt;と呼ばれます。L値になることはありません。</target>
        </trans-unit>
        <trans-unit id="1e306939f1b61ed5f05365a4a82b6e0e9f803e5d" translate="yes" xml:space="preserve">
          <source>An if expression always results in a value, so the &lt;code&gt;else&lt;/code&gt; part is required. &lt;code&gt;Elif&lt;/code&gt; parts are also allowed.</source>
          <target state="translated">if式は常に値になるため、 &lt;code&gt;else&lt;/code&gt; 部分は必須です。 &lt;code&gt;Elif&lt;/code&gt; パーツも使用できます。</target>
        </trans-unit>
        <trans-unit id="52bb3e3582fbbd15c8e7dfa59ed8c1522b97dbbb" translate="yes" xml:space="preserve">
          <source>An implementation is allowed, but not required to implement even more move optimizations (and the current implementation does not).</source>
          <target state="translated">実装は許可されていますが、さらに多くの手の最適化を実装する必要はありません(そして、現在の実装はそうではありません)。</target>
        </trans-unit>
        <trans-unit id="55f00c59e69693d5b27bf05aeea67c1b5656b713" translate="yes" xml:space="preserve">
          <source>An implementation should always use the maximum precision available to evaluate floating pointer values at compile time; this means expressions like &lt;code&gt;0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64&lt;/code&gt; are true.</source>
          <target state="translated">実装は常に、コンパイル時に浮動ポインタ値を評価するために利用可能な最大精度を使用する必要があります。これは、 &lt;code&gt;0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64&lt;/code&gt; ような式が真であることを意味します。</target>
        </trans-unit>
        <trans-unit id="d6942353b7235c1c4c99f2905af32ba03130a9b6" translate="yes" xml:space="preserve">
          <source>An implementation should always use the maximum precision available to evaluate floating pointer values during semantic analysis; this means expressions like &lt;code&gt;0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64&lt;/code&gt; that are evaluating during constant folding are true.</source>
          <target state="translated">実装では、セマンティック分析中にフローティングポインタ値を評価するために利用可能な最大精度を常に使用する必要があります。これは、定数畳み込み中に評価されている &lt;code&gt;0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64&lt;/code&gt; ような式が真であることを意味します。</target>
        </trans-unit>
        <trans-unit id="92ea9795e8ce3c7c45d40d4ccbcfe9496b8bf2f5" translate="yes" xml:space="preserve">
          <source>An input and an output parameter should not be aliased.</source>
          <target state="translated">入力パラメータと出力パラメータはエイリアスを付けてはいけません。</target>
        </trans-unit>
        <trans-unit id="17e0a9097c3ec985d934476c81741a7015f09640" translate="yes" xml:space="preserve">
          <source>An input parameter should not be aliased with a global or thread local variable updated by the called proc.</source>
          <target state="translated">入力パラメータは、呼び出された proc によって更新されるグローバル変数やスレッドローカル変数とエイリアスされるべきではありません。</target>
        </trans-unit>
        <trans-unit id="4faf8ef86d99d8f87188a85418d2cafbed7c672a" translate="yes" xml:space="preserve">
          <source>An integer with the column you are going to query. For the compiler columns start at &lt;strong&gt;0&lt;/strong&gt;.</source>
          <target state="translated">クエリする列の整数。コンパイラの場合、列は&lt;strong&gt;0&lt;/strong&gt;から始まり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7140df7bbe5e3e07dff6576529cef23b438e6cf3" translate="yes" xml:space="preserve">
          <source>An integer with the column you are going to query. For the compiler columns start at zero, so the first column will be &lt;strong&gt;0&lt;/strong&gt; and the last in an 80 column terminal will be &lt;strong&gt;79&lt;/strong&gt;.</source>
          <target state="translated">クエリする列の整数。コンパイラー列の場合、列はゼロから始まるため、最初の列は&lt;strong&gt;0に&lt;/strong&gt;なり、80列の最後の列は&lt;strong&gt;79になり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="58c18cab7c4720f0e3aa95f69ca0b844006c41f0" translate="yes" xml:space="preserve">
          <source>An integer with the line you are going to query. For the compiler lines start at &lt;strong&gt;1&lt;/strong&gt;.</source>
          <target state="translated">照会する行の整数。コンパイラの場合、行は&lt;strong&gt;1&lt;/strong&gt;から始まります。</target>
        </trans-unit>
        <trans-unit id="fd63b4dca2c3b56a63f528ea8506804126dab43c" translate="yes" xml:space="preserve">
          <source>An iterator is similar to a procedure, except that it can be called in the context of a &lt;code&gt;for&lt;/code&gt; loop. Iterators provide a way to specify the iteration over an abstract type. A key role in the execution of a &lt;code&gt;for&lt;/code&gt; loop plays the &lt;code&gt;yield&lt;/code&gt; statement in the called iterator. Whenever a &lt;code&gt;yield&lt;/code&gt; statement is reached the data is bound to the &lt;code&gt;for&lt;/code&gt; loop variables and control continues in the body of the &lt;code&gt;for&lt;/code&gt; loop. The iterator's local variables and execution state are automatically saved between calls. Example:</source>
          <target state="translated">イテレータは、 &lt;code&gt;for&lt;/code&gt; ループのコンテキストで呼び出すことができることを除いて、プロシージャに似ています。イテレータは、抽象型に対する反復を指定する方法を提供します。 &lt;code&gt;for&lt;/code&gt; ループの実行における重要な役割は、呼び出されたイテレーターで &lt;code&gt;yield&lt;/code&gt; ステートメントを果たします。たび &lt;code&gt;yield&lt;/code&gt; 文がにバインドされたデータに到達する &lt;code&gt;for&lt;/code&gt; のループ変数と制御の体内で継続 &lt;code&gt;for&lt;/code&gt; ループ。イテレータのローカル変数と実行状態は、呼び出し間で自動的に保存されます。例：</target>
        </trans-unit>
        <trans-unit id="24cf8c2497716b71cb65c781ec360d22d18214d5" translate="yes" xml:space="preserve">
          <source>An l-value matches &lt;code&gt;var T&lt;/code&gt; and &lt;code&gt;out T&lt;/code&gt; equally well, hence the following is ambiguous:</source>
          <target state="translated">L値は、一致 &lt;code&gt;var T&lt;/code&gt; と &lt;code&gt;out T&lt;/code&gt; したがって以下では曖昧であり、等しく良好。</target>
        </trans-unit>
        <trans-unit id="1f5ff3abd757e3cba00a39f18b56b5fb6446a8c0" translate="yes" xml:space="preserve">
          <source>An object type can be marked with the &lt;code&gt;pure&lt;/code&gt; pragma so that its type field which is used for runtime type identification is omitted. This used to be necessary for binary compatibility with other compiled languages.</source>
          <target state="translated">実行時の型の識別に使用される型フィールドが省略されるように、オブジェクト型を &lt;code&gt;pure&lt;/code&gt; プラグマでマークできます。これは、他のコンパイル済み言語とのバイナリ互換性のために必要でした。</target>
        </trans-unit>
        <trans-unit id="2e8278ca51d6d95aa64a5e6c057a546e2ca28c42" translate="yes" xml:space="preserve">
          <source>An object which holds descriptors to be checked for read/write status</source>
          <target state="translated">読み書き状態をチェックするディスクリプタを保持するオブジェクト</target>
        </trans-unit>
        <trans-unit id="3274465cde86ef19fbd6e85a8dde25fac63bf653" translate="yes" xml:space="preserve">
          <source>An object which holds result for descriptor</source>
          <target state="translated">ディスクリプタの結果を保持するオブジェクト</target>
        </trans-unit>
        <trans-unit id="e62ca354a533c308819dea987dbbf454b1323735" translate="yes" xml:space="preserve">
          <source>An object which holds user defined event</source>
          <target state="translated">ユーザー定義のイベントを保持するオブジェクト</target>
        </trans-unit>
        <trans-unit id="004526c446f1ac6d78516b74ee9cfa40b5941993" translate="yes" xml:space="preserve">
          <source>An optional timeout can be specified in milliseconds, if reading from the</source>
          <target state="translated">オプションのタイムアウトをミリ秒単位で指定することができます。</target>
        </trans-unit>
        <trans-unit id="aa761af15969e50c3fbec49ad3e2f8409cbdbbc6" translate="yes" xml:space="preserve">
          <source>An optional timeout can be specified in milliseconds, if skipping the bytes takes longer than specified a TimeoutError exception will be raised.</source>
          <target state="translated">オプションのタイムアウトはミリ秒単位で指定することができ、指定された時間以上にバイトをスキップした場合は TimeoutError 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="be0cf6034a987ab54cdc28a91621a1407148ad61" translate="yes" xml:space="preserve">
          <source>An optional timeout can be specified in milliseconds, if skipping the bytes takes longer than specified an ETimeout exception will be raised.</source>
          <target state="translated">オプションのタイムアウトはミリ秒単位で指定することができ、指定された時間よりも長くバイトをスキップした場合は ETimeout 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="1436ea667171f8c043927d94a1771aba02c31130" translate="yes" xml:space="preserve">
          <source>An optional type that stores its value and state separately in a boolean.</source>
          <target state="translated">値と状態を別々にブール値に格納するオプションの型。</target>
        </trans-unit>
        <trans-unit id="b067be400ecce95bf0995a66c8c39a2c3b939878" translate="yes" xml:space="preserve">
          <source>An output parameter should never be aliased with a global or thread local variable referenced by the called proc.</source>
          <target state="translated">出力パラメータは、呼び出された proc によって参照されるグローバル変数やスレッドローカル変数とエイリアスされるべきではありません。</target>
        </trans-unit>
        <trans-unit id="1492892ce7573ee3544c47d10217feac9a1ffe27" translate="yes" xml:space="preserve">
          <source>Anchor: Matches at the end of the input. No character is consumed. Same as &lt;code&gt;!.&lt;/code&gt;.</source>
          <target state="translated">アンカー：入力の最後で一致します。キャラクターは消費されません。と同じ &lt;code&gt;!.&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28501d5ba1b7346ee45610593888631bf0f75364" translate="yes" xml:space="preserve">
          <source>Anchor: Matches at the start of the input. No character is consumed.</source>
          <target state="translated">アンカー。入力開始時にマッチします。文字は消費されません。</target>
        </trans-unit>
        <trans-unit id="d5b80e8f8af7973d49e632e415ee520559b6880c" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;main&lt;/code&gt; imports &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;foo/x&lt;/code&gt; is imported. If &lt;code&gt;other&lt;/code&gt; imports &lt;code&gt;x&lt;/code&gt; then both &lt;code&gt;$lib/x.nim&lt;/code&gt; and &lt;code&gt;$lib/bar/x.nim&lt;/code&gt; match and so the compiler should reject it. Currently however this check is not implemented and instead the first matching file is used.</source>
          <target state="translated">そして、 &lt;code&gt;main&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; をインポートし、 &lt;code&gt;foo/x&lt;/code&gt; がインポートされます。場合は &lt;code&gt;other&lt;/code&gt; 輸入は &lt;code&gt;x&lt;/code&gt; は、両方の &lt;code&gt;$lib/x.nim&lt;/code&gt; および &lt;code&gt;$lib/bar/x.nim&lt;/code&gt; 試合をしてので、コンパイラはそれを拒否すべきです。現在、このチェックは実装されておらず、代わりに最初に一致したファイルが使用されます。</target>
        </trans-unit>
        <trans-unit id="6086412d7affac9b3c25d84027f831a4864be34b" translate="yes" xml:space="preserve">
          <source>And &lt;code&gt;main&lt;/code&gt; imports &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;foo/x&lt;/code&gt; is imported. If &lt;code&gt;other&lt;/code&gt; imports &lt;code&gt;x&lt;/code&gt; then both &lt;code&gt;$lib/x.nim&lt;/code&gt; and &lt;code&gt;$lib/bar/x.nim&lt;/code&gt; match but &lt;code&gt;$lib/x.nim&lt;/code&gt; is used as it is the first match.</source>
          <target state="translated">そして、 &lt;code&gt;main&lt;/code&gt; インポート &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;foo/x&lt;/code&gt; がインポートされます。場合は &lt;code&gt;other&lt;/code&gt; 輸入は、 &lt;code&gt;x&lt;/code&gt; は、両方その後、 &lt;code&gt;$lib/x.nim&lt;/code&gt; および &lt;code&gt;$lib/bar/x.nim&lt;/code&gt; 試合が、 &lt;code&gt;$lib/x.nim&lt;/code&gt; それは最初のマッチであるとして使用されています。</target>
        </trans-unit>
        <trans-unit id="242f34bf16bfc5e83d5742e55f63b87c019f679a" translate="yes" xml:space="preserve">
          <source>And copy the executable somewhere in your &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">そして、実行ファイルを &lt;code&gt;$PATH&lt;/code&gt; どこかにコピーします。</target>
        </trans-unit>
        <trans-unit id="83dda4bc1c55dc87decca365a7ad42665d8106b1" translate="yes" xml:space="preserve">
          <source>And for a debug version compatible with GDB:</source>
          <target state="translated">そして、GDBと互換性のあるデバッグ版のために。</target>
        </trans-unit>
        <trans-unit id="514cf3e6609f00e815263ec4ce18e84d001f501a" translate="yes" xml:space="preserve">
          <source>And predicate: Indicate success if expression &lt;code&gt;E&lt;/code&gt; matches the text ahead; otherwise indicate failure. Do not consume any text.</source>
          <target state="translated">そして述語：式 &lt;code&gt;E&lt;/code&gt; が前のテキストと一致する場合は成功を示します。それ以外の場合は失敗を示します。テキストを消費しないでください。</target>
        </trans-unit>
        <trans-unit id="4e8296500ed287ca2f86dd1c2fab187b68fe5d29" translate="yes" xml:space="preserve">
          <source>And predicate: Indicate success if expression &lt;em&gt;E&lt;/em&gt; matches the text ahead; otherwise indicate failure. Do not consume any text.</source>
          <target state="translated">述語：式&lt;em&gt;Eが&lt;/em&gt;前のテキストと一致する場合は成功を示します。それ以外の場合は失敗を示します。テキストを消費しないでください。</target>
        </trans-unit>
        <trans-unit id="47b8afc9ca38e34f60b039e58bc4522a4fe464da" translate="yes" xml:space="preserve">
          <source>And so is::</source>
          <target state="translated">そして、そうです:。</target>
        </trans-unit>
        <trans-unit id="dd21179e471067255e31c8a35037ea42bc51b5d1" translate="yes" xml:space="preserve">
          <source>And the following code:</source>
          <target state="translated">そして、以下のコード。</target>
        </trans-unit>
        <trans-unit id="13074a21c761f8c2e18dbd0487b69e0b1f687b80" translate="yes" xml:space="preserve">
          <source>Android 10.0</source>
          <target state="translated">アンドロイド10.0</target>
        </trans-unit>
        <trans-unit id="bced9cc08c3939a0e0d679456c7b2c96155e69fa" translate="yes" xml:space="preserve">
          <source>Android 2.3</source>
          <target state="translated">アンドロイド2.3</target>
        </trans-unit>
        <trans-unit id="8ab464014c26dbdf5f702390fa9ab23c39f0578d" translate="yes" xml:space="preserve">
          <source>Android 4.4.2</source>
          <target state="translated">Android 4.4.2</target>
        </trans-unit>
        <trans-unit id="529975d2ca1b9c8b1f9dc8715723302d776e3685" translate="yes" xml:space="preserve">
          <source>Annotating procs with raised exceptions</source>
          <target state="translated">例外が発生したprocのアノテーション</target>
        </trans-unit>
        <trans-unit id="1372df72c3414caae306a6854fbd73da2739c232" translate="yes" xml:space="preserve">
          <source>Anonymous Procs</source>
          <target state="translated">アノニマスプロス</target>
        </trans-unit>
        <trans-unit id="fc69ddcac99b9b9a8d29c74edd5dd97109c0f888" translate="yes" xml:space="preserve">
          <source>Another common example is this:</source>
          <target state="translated">もう一つの一般的な例がこれです。</target>
        </trans-unit>
        <trans-unit id="46de23dafaa5135d298c4e6932bfd58f0a55fcd3" translate="yes" xml:space="preserve">
          <source>Another way is to make Nim invoke a cross compiler toolchain:</source>
          <target state="translated">もう一つの方法は、Nimにクロスコンパイラツールチェーンを起動させることです。</target>
        </trans-unit>
        <trans-unit id="220b3fd15cb7730c1f91330b6bd071c4acf9137b" translate="yes" xml:space="preserve">
          <source>Another way to branch is provided by the case statement. A case statement is a multi-branch:</source>
          <target state="translated">分岐するもう一つの方法は case 文です。case文はマルチブランチです。</target>
        </trans-unit>
        <trans-unit id="b109a7f72d501d6581c64b2e20010ee624b143d1" translate="yes" xml:space="preserve">
          <source>Another way to do the same without &lt;code&gt;when&lt;/code&gt; is to leave the task of picking the appropriate code to a secondary proc which you overload for each field type and pass the &lt;em&gt;value&lt;/em&gt; to.</source>
          <target state="translated">もう一つの方法はない同じ行う &lt;code&gt;when&lt;/code&gt; は、各フィールドタイプのために過負荷に二procのに適切なコードを選ぶの課題を残して通過させることである&lt;em&gt;値&lt;/em&gt;にします。</target>
        </trans-unit>
        <trans-unit id="cdcc64fe4174864c656f8d5ecbd49e1c1178af4e" translate="yes" xml:space="preserve">
          <source>Another way to look at the method call syntax is that it provides the missing postfix notation.</source>
          <target state="translated">メソッドコールの構文を見るもう一つの方法は、postfix 記法を欠落させていることです。</target>
        </trans-unit>
        <trans-unit id="a741689c8b0db1dc353a46642a34688e7e01c9fe" translate="yes" xml:space="preserve">
          <source>Any Unicode character: If there is an UTF-8 character ahead, consume it and indicate success. Otherwise indicate failure.</source>
          <target state="translated">任意の Unicode 文字。先に UTF-8 文字がある場合は、それを消費して成功を示します。それ以外の場合は失敗を示す。</target>
        </trans-unit>
        <trans-unit id="5778ef8422665afffa8cd59a1ebfe6af7a70d367" translate="yes" xml:space="preserve">
          <source>Any character: If there is a character ahead, consume it and indicate success. Otherwise (that is, at the end of input) indicate failure.</source>
          <target state="translated">どんなキャラクターでも 先に文字があれば、それを消費して成功を示す。それ以外の場合(つまり、入力の最後に)は失敗を示す。</target>
        </trans-unit>
        <trans-unit id="7358bbc6ca3777f85150f64affeb40b274702a17" translate="yes" xml:space="preserve">
          <source>Any comments which are preceded by a double-hash (##), are interpreted as documentation. Comments are parsed as RST (see &lt;a href=&quot;http://docutils.sourceforge.net/docs/user/rst/quickref.html&quot;&gt;reference&lt;/a&gt;), providing Nim module authors the ability to easily generate richly formatted documentation with only their well-documented code.</source>
          <target state="translated">ダブルハッシュ（##）が前に付いているコメントはすべて、ドキュメントとして解釈されます。コメントはRSTとして解析され（&lt;a href=&quot;http://docutils.sourceforge.net/docs/user/rst/quickref.html&quot;&gt;参考文献を参照&lt;/a&gt;）、Nimモジュールの作成者は、十分に文書化されたコードのみを使用して、豊富な形式の文書を簡単に生成できます。</target>
        </trans-unit>
        <trans-unit id="7a0e7fbfcaa080ee5b3ea5abcdb110b3936f6cd0" translate="yes" xml:space="preserve">
          <source>Any mutation to an object does count as a side effect if that object is reachable via a parameter that is not declared as a &lt;code&gt;var&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; パラメータとして宣言されていないパラメータを介してそのオブジェクトに到達できる場合、オブジェクトへの変更は副作用としてカウントされます。</target>
        </trans-unit>
        <trans-unit id="9e859eb61aa46455ae8439cc09bd7c3fb497c718" translate="yes" xml:space="preserve">
          <source>Any operator can be called like an ordinary proc with the '&lt;code&gt;opr&lt;/code&gt;' notation. (Thus an operator can have more than two parameters):</source>
          <target state="translated">演算子は、通常のprocのように「 &lt;code&gt;opr&lt;/code&gt; 」表記で呼び出すことができます。（したがって、オペレーターは3つ以上のパラメーターを持つことができます）：</target>
        </trans-unit>
        <trans-unit id="91e820fd709a7f87728034af624c9132692282ae" translate="yes" xml:space="preserve">
          <source>Any operator can be called like an ordinary proc with the '&lt;em&gt;opr&lt;/em&gt;' notation. (Thus an operator can have more than two parameters):</source>
          <target state="translated">演算子は、 ' &lt;em&gt;opr&lt;/em&gt; '表記を使用して通常のプロシージャのように呼び出すことができます。（したがって、オペレーターは3つ以上のパラメーターを持つことができます）：</target>
        </trans-unit>
        <trans-unit id="28a8d44708b00ee5f8ab5f8950f4590e672372e9" translate="yes" xml:space="preserve">
          <source>Any previously stored value will be overwritten.</source>
          <target state="translated">以前に保存された値はすべて上書きされます。</target>
        </trans-unit>
        <trans-unit id="85cdc7b1f239ca6691d5ad4bd7ee32149be2368a" translate="yes" xml:space="preserve">
          <source>Any statements following the &lt;code&gt;defer&lt;/code&gt; in the current block will be considered to be in an implicit try block:</source>
          <target state="translated">現在のブロックで &lt;code&gt;defer&lt;/code&gt; 後に続くステートメントは、暗黙のtryブロックにあると見なされます。</target>
        </trans-unit>
        <trans-unit id="f6cede9c40103cfeb38206a514d0e207b6286657" translate="yes" xml:space="preserve">
          <source>Any user defined destructors</source>
          <target state="translated">ユーザー定義のデストラクタ</target>
        </trans-unit>
        <trans-unit id="e21dc240e738fabd5754c4089fede48b262d0589" translate="yes" xml:space="preserve">
          <source>AnyPath:</source>
          <target state="translated">AnyPath:</target>
        </trans-unit>
        <trans-unit id="474bae604f6e9971bd49456c68cefe4610021141" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;spawn&lt;/code&gt; and &lt;code&gt;parallel&lt;/code&gt; Nim also provides all the common low level concurrency mechanisms like locks, atomic intrinsics or condition variables.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; と &lt;code&gt;parallel&lt;/code&gt; 以外に、Nimはロック、アトミック組み込み関数、条件変数などの一般的な低レベルの同時実行メカニズムもすべて提供します。</target>
        </trans-unit>
        <trans-unit id="562f1ef0862bc54a9d91c121544eee328c801e91" translate="yes" xml:space="preserve">
          <source>Apart from a few built-in keyword operators such as &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, operators always consist of these characters: &lt;code&gt;+ - * \ / &amp;lt; &amp;gt; = @ $ ~ &amp;amp; % ! ? ^ . |&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;and&lt;/code&gt; や &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;not&lt;/code&gt; などのいくつかの組み込みキーワード演算子を除いて、演算子は常に次の文字で構成されます： &lt;code&gt;+ - * \ / &amp;lt; &amp;gt; = @ $ ~ &amp;amp; % ! ? ^ . |&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bfe80b93d1b3cc277c929cdfd0838f7556135094" translate="yes" xml:space="preserve">
          <source>Apart from built-in operations like array indexing, memory allocation, etc. the &lt;code&gt;raise&lt;/code&gt; statement is the only way to raise an exception.</source>
          <target state="translated">配列のインデックス付け、メモリ割り当てなどの組み込み操作とは別に、 &lt;code&gt;raise&lt;/code&gt; ステートメントは例外を発生させる唯一の方法です。</target>
        </trans-unit>
        <trans-unit id="7dc1626458ca624671bbd7eb79e937465433fdf8" translate="yes" xml:space="preserve">
          <source>Apart from strings you can also encode lists of integers or characters:</source>
          <target state="translated">文字列以外にも、整数や文字のリストをエンコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="aafd7f63cf0cf31a35bff642569ecbe5c87f627c" translate="yes" xml:space="preserve">
          <source>Apart from the minimal syntactic sugar the language core does not need to know about tables.</source>
          <target state="translated">最小限の構文的な糖質を除けば、言語コアはテーブルについて知る必要はありません。</target>
        </trans-unit>
        <trans-unit id="e3b1dd548816f4827df0bad613bad688c2eb8bbe" translate="yes" xml:space="preserve">
          <source>Apo:</source>
          <target state="translated">Apo:</target>
        </trans-unit>
        <trans-unit id="16fba008b8a30cf646cf2acebb7e1cdfbd153d1f" translate="yes" xml:space="preserve">
          <source>Appends (adds to the end) a node &lt;code&gt;n&lt;/code&gt; to &lt;code&gt;L&lt;/code&gt;. Efficiency: O(1).</source>
          <target state="translated">ノード &lt;code&gt;n&lt;/code&gt; を &lt;code&gt;L&lt;/code&gt; に追加（末尾に追加）します。効率：O（1）。</target>
        </trans-unit>
        <trans-unit id="e000dd9fba3be7dd379ffde7cc907cf28fd4ddd2" translate="yes" xml:space="preserve">
          <source>Appends (adds to the end) a value to &lt;code&gt;L&lt;/code&gt;. Efficiency: O(1).</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; に値を追加（末尾に追加）します。効率：O（1）。</target>
        </trans-unit>
        <trans-unit id="feb580856272ad85df8745f41fd2d502b274c0be" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;x&lt;/code&gt; to string &lt;code&gt;s&lt;/code&gt; in place, applying quoting and escaping if &lt;code&gt;x&lt;/code&gt; is a string or char.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が文字列または文字の場合は引用符とエスケープを適用して、所定の位置にある文字列 &lt;code&gt;s&lt;/code&gt; に &lt;code&gt;x&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="c406699971968f882acde68ff17c4b9e61930126" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; in place.</source>
          <target state="translated">&lt;code&gt;y&lt;/code&gt; を &lt;code&gt;x&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="86d0496a927c4a27939c0fe3200738c8416afc23" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;x&lt;/em&gt; to string &lt;em&gt;s&lt;/em&gt; in place, applying quoting and escaping if &lt;em&gt;x&lt;/em&gt; is a string or char. See &lt;a href=&quot;system#addEscapedChar&quot;&gt;addEscapedChar&lt;/a&gt; for the escaping scheme. When &lt;em&gt;x&lt;/em&gt; is a string, characters in the range &lt;code&gt;{\128..\255}&lt;/code&gt; are never escaped so that multibyte UTF-8 characters are untouched (note that this behavior is different from &lt;code&gt;addEscapedChar&lt;/code&gt;).</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を文字列&lt;em&gt;s&lt;/em&gt;に追加し、&lt;em&gt;x&lt;/em&gt;が文字列または文字の場合は引用符とエスケープを適用します。エスケープスキームについては、&lt;a href=&quot;system#addEscapedChar&quot;&gt;addEscapedChar&lt;/a&gt;を参照してください。場合&lt;em&gt;xは&lt;/em&gt;文字列であり、文字が範囲内に &lt;code&gt;{\128..\255}&lt;/code&gt; マルチバイトUTF-8文字（この動作は異なることに注意してくださいそのままであるようにエスケープされることはありません &lt;code&gt;addEscapedChar&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="646ba0c86d2da62ac809b41c7876c8d4d437f4fd" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt; in place</source>
          <target state="translated">所定の位置に&lt;em&gt;x&lt;/em&gt;に&lt;em&gt;y&lt;/em&gt;を追加します&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5a44cb6e95afb57a187dfd7f616458540348a25f" translate="yes" xml:space="preserve">
          <source>Appends element y to the end of the sequence.</source>
          <target state="translated">要素 y をシーケンスの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="621c0cff6d7cb368d8e84f223d0bb258c1851898" translate="yes" xml:space="preserve">
          <source>Appends element y to the end of the sequence. Requires copying of the sequence</source>
          <target state="translated">シーケンスの最後に要素 y を追加します。シーケンスのコピーが必要です。</target>
        </trans-unit>
        <trans-unit id="b911c2df77e9ea1d563e4a7ebb6593fb8d45a3d3" translate="yes" xml:space="preserve">
          <source>Appends in place to a string.</source>
          <target state="translated">文字列の代わりに追加します。</target>
        </trans-unit>
        <trans-unit id="4b93e2750d5e019c95354307daa55b9ae9ae1eb1" translate="yes" xml:space="preserve">
          <source>Appends url to url.</source>
          <target state="translated">urlにurlを追加します。</target>
        </trans-unit>
        <trans-unit id="41334dc65163a83119249bdd2d0725382bf90b0b" translate="yes" xml:space="preserve">
          <source>Applies &lt;code&gt;op&lt;/code&gt; to each of the &lt;strong&gt;atomic&lt;/strong&gt; literals like &lt;code&gt;3&lt;/code&gt; or &lt;code&gt;&quot;abc&quot;&lt;/code&gt; in the specified &lt;code&gt;constructor&lt;/code&gt; AST. This can be used to map every array element to some target type:</source>
          <target state="translated">指定された &lt;code&gt;constructor&lt;/code&gt; ASTの &lt;code&gt;3&lt;/code&gt; や &lt;code&gt;&quot;abc&quot;&lt;/code&gt; などの各&lt;strong&gt;アトミック&lt;/strong&gt;リテラルに &lt;code&gt;op&lt;/code&gt; を適用します。これを使用して、すべての配列要素を特定のターゲットタイプにマップできます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7427ab152044cf1b6551f68794438b07d3820483" translate="yes" xml:space="preserve">
          <source>Applies &lt;code&gt;op&lt;/code&gt; to every item in &lt;code&gt;s&lt;/code&gt; modifying it directly.</source>
          <target state="translated">適用 &lt;code&gt;op&lt;/code&gt; 内のすべての項目に &lt;code&gt;s&lt;/code&gt; の直接それを修正します。</target>
        </trans-unit>
        <trans-unit id="8b39b7cf4b0a60e8defe6d54cb8868dcdb0f1e4b" translate="yes" xml:space="preserve">
          <source>Applies &lt;em&gt;op&lt;/em&gt; to every item in &lt;em&gt;s&lt;/em&gt; modifying it directly.</source>
          <target state="translated">適用&lt;em&gt;オペアンプを&lt;/em&gt;内のすべての項目に&lt;em&gt;sの&lt;/em&gt;直接それを修正します。</target>
        </trans-unit>
        <trans-unit id="f7f98f61e331b2c9c311f3be85b2d106e23d53da" translate="yes" xml:space="preserve">
          <source>Applies a &lt;code&gt;callback&lt;/code&gt; function to the value of the &lt;code&gt;Option&lt;/code&gt; and returns an &lt;code&gt;Option&lt;/code&gt; containing the new value.</source>
          <target state="translated">適用される &lt;code&gt;callback&lt;/code&gt; の値に関数を &lt;code&gt;Option&lt;/code&gt; と返す &lt;code&gt;Option&lt;/code&gt; 新しい値を含有します。</target>
        </trans-unit>
        <trans-unit id="08e08e73f7d5cf1f2868300bfffc38afeef31e63" translate="yes" xml:space="preserve">
          <source>Applies a &lt;code&gt;callback&lt;/code&gt; function to the value of the &lt;code&gt;Option&lt;/code&gt;, if it has one.</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; の値がある場合は、その値に &lt;code&gt;callback&lt;/code&gt; 関数を適用します。</target>
        </trans-unit>
        <trans-unit id="2070a04b99b90c4dbdf3f880dc817f26a106e8a6" translate="yes" xml:space="preserve">
          <source>Applies a &lt;code&gt;callback&lt;/code&gt; to the value of the &lt;code&gt;Option&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Option&lt;/code&gt; の値に &lt;code&gt;callback&lt;/code&gt; を適用します。</target>
        </trans-unit>
        <trans-unit id="47c68a697222d8231db69fecdc76aa3f8118fca0" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option</source>
          <target state="translated">このオプションの値にコールバックを適用します。</target>
        </trans-unit>
        <trans-unit id="1f6c6510cdda5cd1b191679d2ebcc3574091831b" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option and returns an option containing the new value. If this option is None, None will be returned</source>
          <target state="translated">このオプションの値にコールバックを適用して、新しい値を含むオプションを返します。このオプションが None の場合は None が返されます。</target>
        </trans-unit>
        <trans-unit id="4405334856a221170be55f8b9f5688d6a0be9c57" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option and returns an option containing the new value. If this option is None, None will be returned. Similar to &lt;code&gt;map&lt;/code&gt;, with the difference that the callback returns an Option, not a raw value. This allows multiple procs with a signature of &lt;code&gt;A -&amp;gt; Option[B]&lt;/code&gt; (including A = B) to be chained together.</source>
          <target state="translated">このOptionの値にコールバックを適用し、新しい値を含むオプションを返します。このオプションがNoneの場合、Noneが返されます。 &lt;code&gt;map&lt;/code&gt; に似ていますが、コールバックは生の値ではなくOptionを返す点が異なります。これにより、 &lt;code&gt;A -&amp;gt; Option[B]&lt;/code&gt; （A = Bを含む）の署名を持つ複数のプロシージャを一緒にチェーンすることができます。</target>
        </trans-unit>
        <trans-unit id="465dd40623dd93f42a5f03dcd0c6972a66643b81" translate="yes" xml:space="preserve">
          <source>Applies a callback to the value in this Option. If the callback returns &lt;em&gt;true&lt;/em&gt;, the option is returned as a Some. If it returns false, it is returned as a None.</source>
          <target state="translated">このオプションの値にコールバックを適用します。コールバックが&lt;em&gt;trueを&lt;/em&gt;返す&lt;em&gt;場合&lt;/em&gt;、オプションはSomeとして返されます。falseを返す場合、Noneとして返されます。</target>
        </trans-unit>
        <trans-unit id="31b8834506fb3b7c5be5a3ce85e8e0c3db7c0b3f" translate="yes" xml:space="preserve">
          <source>Arguments are delimited by white space, which is either a space or a tab.</source>
          <target state="translated">引数は空白(スペースまたはタブ)で区切られます。</target>
        </trans-unit>
        <trans-unit id="401bb179f3db6b973c284e019e2540619d382218" translate="yes" xml:space="preserve">
          <source>Arguments that are passed to a &lt;code&gt;varargs&lt;/code&gt; parameter are wrapped in an array constructor expression. This is why &lt;code&gt;debug&lt;/code&gt; iterates over all of &lt;code&gt;n&lt;/code&gt;'s children.</source>
          <target state="translated">&lt;code&gt;varargs&lt;/code&gt; パラメーターに渡される引数は、配列コンストラクター式でラップされます。これが、 &lt;code&gt;debug&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; のすべての子を反復する理由です。</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="b52ce1191681712b4198292245b2069cf1dabb8f" translate="yes" xml:space="preserve">
          <source>Arguments: arguments are passed to the program being run (if --run option is selected)</source>
          <target state="translated">引数:引数は実行されるプログラムに渡されます (--run オプションが選択されている場合)</target>
        </trans-unit>
        <trans-unit id="97e74f9d45593e231dbfcd8bbedd9ba97fed0f07" translate="yes" xml:space="preserve">
          <source>Arguments: everything that does not start with a &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">引数： &lt;code&gt;-&lt;/code&gt; で始まらないすべて</target>
        </trans-unit>
        <trans-unit id="e1d45cd50bdc4c8b3af4b806662501ca8c8c618d" translate="yes" xml:space="preserve">
          <source>Arithmetic shift right</source>
          <target state="translated">算術シフト右</target>
        </trans-unit>
        <trans-unit id="5ee11c97923cbdc76a30506f7fe7c019daafaf0b" translate="yes" xml:space="preserve">
          <source>Arithmetic with a &lt;code&gt;Duration&lt;/code&gt; is very fast, especially when used with the &lt;code&gt;Time&lt;/code&gt; type, since it only involves basic arithmetic. Because &lt;code&gt;Duration&lt;/code&gt; is more performant and easier to understand it should generally preferred.</source>
          <target state="translated">算術 &lt;code&gt;Duration&lt;/code&gt; 一緒に使用する場合は特に、非常に高速である &lt;code&gt;Time&lt;/code&gt; 、それは基本的な算術演算を伴うため、タイプ。ので &lt;code&gt;Duration&lt;/code&gt; 理解するために、より高性能で簡単です、それが一般的に好ましいはずです。</target>
        </trans-unit>
        <trans-unit id="11cd140e4798311075ab97986a6059d3cb376d6c" translate="yes" xml:space="preserve">
          <source>Arithmetic with a &lt;code&gt;TimeInterval&lt;/code&gt; can be very slow, because it requires timezone information.</source>
          <target state="translated">&lt;code&gt;TimeInterval&lt;/code&gt; を使用した算術演算は、タイムゾーン情報を必要とするため、非常に遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="52bae2349fbad4ef35978d796cfe4b7d32461d9e" translate="yes" xml:space="preserve">
          <source>Array access operator &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">配列アクセス演算子 &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="935c34e59be520dab8667587be24775c6b59c8e5" translate="yes" xml:space="preserve">
          <source>Array and sequence types</source>
          <target state="translated">配列型とシーケンス型</target>
        </trans-unit>
        <trans-unit id="021b6564b992d622f4a204a912f2a5e5c8fe3e98" translate="yes" xml:space="preserve">
          <source>Array of strings representing each logging level.</source>
          <target state="translated">各ロギングレベルを表す文字列の配列。</target>
        </trans-unit>
        <trans-unit id="b66b4ebd826229d404911b2c9ca9b59007c74879" translate="yes" xml:space="preserve">
          <source>Array with no bounds checking</source>
          <target state="translated">境界をチェックしない配列</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="163d5347d88f0665232159d0fcd2e115c3d58bb8" translate="yes" xml:space="preserve">
          <source>Arrays are a homogeneous type, meaning that each element in the array has the same type. Arrays always have a fixed length specified as a constant expression (except for open arrays). They can be indexed by any ordinal type. A parameter &lt;code&gt;A&lt;/code&gt; may be an &lt;em&gt;open array&lt;/em&gt;, in which case it is indexed by integers from 0 to &lt;code&gt;len(A)-1&lt;/code&gt;. An array expression may be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt;. The element type of this array expression is inferred from the type of the first element. All other elements need to be implicitly convertible to this type.</source>
          <target state="translated">配列は同種の型です。つまり、配列内の各要素は同じ型です。配列には常に定数式として指定された固定長があります（開いている配列を除く）。それらは、任意の順序タイプで索引付けできます。パラメータ &lt;code&gt;A&lt;/code&gt; は&lt;em&gt;オープン配列の&lt;/em&gt;場合があり、その場合、0から &lt;code&gt;len(A)-1&lt;/code&gt; までの整数でインデックスが付けられます。配列式は、配列コンストラクター &lt;code&gt;[]&lt;/code&gt; によって作成できます。この配列式の要素タイプは、最初の要素のタイプから推測されます。他のすべての要素は、暗黙的にこのタイプに変換可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="7c78840740ada4caee391a3c7d72b96b3524a2c8" translate="yes" xml:space="preserve">
          <source>Arrays are a homogeneous type, meaning that each element in the array has the same type. Arrays always have a fixed length which is specified at compile time (except for open arrays). They can be indexed by any ordinal type. A parameter &lt;code&gt;A&lt;/code&gt; may be an &lt;em&gt;open array&lt;/em&gt;, in which case it is indexed by integers from 0 to &lt;code&gt;len(A)-1&lt;/code&gt;. An array expression may be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt;. The element type of this array expression is inferred from the type of the first element. All other elements need to be implicitly convertable to this type.</source>
          <target state="translated">配列は同種の型です。つまり、配列の各要素は同じ型です。配列は常に、コンパイル時に指定された固定長を持っています（オープン配列を除く）。それらは、任意の序数タイプで索引付けできます。パラメータ &lt;code&gt;A&lt;/code&gt; は&lt;em&gt;オープン配列の&lt;/em&gt;場合があります。その場合、0から &lt;code&gt;len(A)-1&lt;/code&gt; までの整数でインデックスが付けられます。配列式は、配列コンストラクター &lt;code&gt;[]&lt;/code&gt; によって作成できます。この配列式の要素タイプは、最初の要素のタイプから推測されます。他のすべての要素は、このタイプに暗黙的に変換可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="07316b5238311cac8e4fe1961ee02c15801cb68e" translate="yes" xml:space="preserve">
          <source>Arrays are always bounds checked (at compile-time or at runtime). These checks can be disabled via pragmas or invoking the compiler with the &lt;code&gt;--boundChecks:off&lt;/code&gt; command line switch.</source>
          <target state="translated">配列は常に境界チェックされます（コンパイル時または実行時）。これらのチェックは、プラグマまたは &lt;code&gt;--boundChecks:off&lt;/code&gt; コマンドラインスイッチを使用してコンパイラーを呼び出すことで無効にできます。</target>
        </trans-unit>
        <trans-unit id="0b249479bb7b274c06e387f76a3026cd4f886624" translate="yes" xml:space="preserve">
          <source>Arrays are always bounds checked (statically or at runtime). These checks can be disabled via pragmas or invoking the compiler with the &lt;code&gt;--boundChecks:off&lt;/code&gt; command-line switch.</source>
          <target state="translated">配列は常に境界チェックされます（静的または実行時）。これらのチェックは、プラグマを使用するか、 &lt;code&gt;--boundChecks:off&lt;/code&gt; コマンドラインスイッチを使用してコンパイラを呼び出すことで無効にできます。</target>
        </trans-unit>
        <trans-unit id="5f5ec03ff46845d078f8cf64b1238f79972295a5" translate="yes" xml:space="preserve">
          <source>Arrays are value types, like any other Nim type. The assignment operator copies the whole array contents.</source>
          <target state="translated">配列は他のNimの型と同様に値の型です。代入演算子は配列の内容全体をコピーします。</target>
        </trans-unit>
        <trans-unit id="025a9e98dcb0da2dd59c51da809f12fce4980b2a" translate="yes" xml:space="preserve">
          <source>Arrays can be constructed using &lt;code&gt;[]&lt;/code&gt;:</source>
          <target state="translated">配列は &lt;code&gt;[]&lt;/code&gt; を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="c735544485e105956e388f5a452d2502051ca6e1" translate="yes" xml:space="preserve">
          <source>Artifact being compiled.</source>
          <target state="translated">アーティファクトがコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="b17b6441237c52d21208d5d89f06d445715567fb" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;let&lt;/code&gt; statements are immutable after creation they need to define a value when they are declared. The only exception to this is if the &lt;code&gt;{.importc.}&lt;/code&gt; pragma (or any of the other &lt;code&gt;importX&lt;/code&gt; pragmas) is applied, in this case the value is expected to come from native code, typically a C/C++ &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; 文は作成後に不変である彼らは、それらが宣言されたときに値を定義する必要があります。これに対する唯一の例外は、 &lt;code&gt;{.importc.}&lt;/code&gt; プラグマ（または他の &lt;code&gt;importX&lt;/code&gt; プラグマのいずれか）が適用される場合です。この場合、値はネイティブコード（通常はC / C ++ &lt;code&gt;const&lt;/code&gt; )から取得されると予想されます。</target>
        </trans-unit>
        <trans-unit id="2681d14f693853cb31e8a490d26bf55ce9311d0e" translate="yes" xml:space="preserve">
          <source>As a regular expression &lt;code&gt;\[.*\]&lt;/code&gt; matches the longest possible text between &lt;code&gt;'['&lt;/code&gt; and &lt;code&gt;']'&lt;/code&gt;. As a PEG it never matches anything, because a PEG is deterministic: &lt;code&gt;.*&lt;/code&gt; consumes the rest of the input, so &lt;code&gt;\]&lt;/code&gt; never matches. As a PEG this needs to be written as: &lt;code&gt;\[ ( !\] . )* \]&lt;/code&gt; (or &lt;code&gt;\[ @ \]&lt;/code&gt;).</source>
          <target state="translated">正規表現として &lt;code&gt;\[.*\]&lt;/code&gt; は、 &lt;code&gt;'['&lt;/code&gt; と &lt;code&gt;']'&lt;/code&gt; の間の可能な限り長いテキストに一致します。PEGは確定的であるため、PEGとしては何にも一致しません。. &lt;code&gt;.*&lt;/code&gt; は残りの入力を消費するため、 &lt;code&gt;\]&lt;/code&gt; は一致しません。PEGとして、これは次のように記述する必要があります： &lt;code&gt;\[ ( !\] . )* \]&lt;/code&gt; （または &lt;code&gt;\[ @ \]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7df1f297110a6ac1f59d3ba4423b992aff7687da" translate="yes" xml:space="preserve">
          <source>As a result of using optimized function/intrinsics some functions can return undefined results if the input is invalid. You can use the flag &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; to force predictable behaviour for all input, causing a small performance hit.</source>
          <target state="translated">最適化された関数/組み込み関数を使用した結果、入力が無効な場合、一部の関数は未定義の結果を返す可能性があります。フラグ &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; を使用して、すべての入力に対して予測可能な動作を強制し、パフォーマンスにわずかな影響を与えることができます。</target>
        </trans-unit>
        <trans-unit id="7d98662c0a3a8c4fd899d63977fd61a1ce489676" translate="yes" xml:space="preserve">
          <source>As a result of using optimized function/intrinsics some functions can return undefined results if the input is invalid. You can use the flag &lt;em&gt;noUndefinedBitOpts&lt;/em&gt; to force predictable behaviour for all input, causing a small performance hit.</source>
          <target state="translated">最適化された関数/組み込み関数を使用した結果、一部の関数は、入力が無効な場合に未定義の結果を返す可能性があります。フラグ&lt;em&gt;noUndefinedBitOpts&lt;/em&gt;を使用して、すべての入力に対して予測可能な動作を強制し、パフォーマンスに小さな&lt;em&gt;影響&lt;/em&gt;を与えることができます。</target>
        </trans-unit>
        <trans-unit id="1664c8e0b3003ab199f6ca491156febd8a7827ee" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, indentation within expressions is allowed after operators, an open parenthesis and after commas.</source>
          <target state="translated">経験則として、式内のインデントは、演算子、開括弧、カンマの後に許可されています。</target>
        </trans-unit>
        <trans-unit id="cb2355cab9186efd1c7ad2a36b7f8184f95dac01" translate="yes" xml:space="preserve">
          <source>As a side note, if you choose to use infix operators in a prefix form, the AST behaves as a &lt;a href=&quot;#callsslashexpressions-call-with&quot;&gt;parenthetical function call&lt;/a&gt; with &lt;code&gt;nnkAccQuoted&lt;/code&gt;, as follows:</source>
          <target state="translated">サイドノートとして、あなたのように、プレフィックス形式でASTの振る舞いを中置演算子を使用することを選択した場合は&lt;a href=&quot;#callsslashexpressions-call-with&quot;&gt;括弧の関数呼び出し&lt;/a&gt;と &lt;code&gt;nnkAccQuoted&lt;/code&gt; 次のように、：</target>
        </trans-unit>
        <trans-unit id="1bbf2a9820bf41bcc3ae860ff3066a54791d55a8" translate="yes" xml:space="preserve">
          <source>As a side note, if you choose to use infix operators in a prefix form, the AST behaves as a [parenthetical function call](./macros.html#calls-expressions-call-with) with &lt;code&gt;nnkAccQuoted&lt;/code&gt;, as follows:</source>
          <target state="translated">補足として、プレフィックス形式で中置演算子を使用することを選択した場合、ASTは、次のように &lt;code&gt;nnkAccQuoted&lt;/code&gt; を使用して[括弧付き関数呼び出し]（./ macros.html＃calls-expressions-call-with）として動作します。</target>
        </trans-unit>
        <trans-unit id="15211f47465417179a8c67c3321dc2d1d401fb39" translate="yes" xml:space="preserve">
          <source>As a special more convenient notation, proc expressions involved in procedure calls can use the &lt;code&gt;do&lt;/code&gt; keyword:</source>
          <target state="translated">特別により便利な表記として、プロシージャ呼び出しに含まれるproc式は &lt;code&gt;do&lt;/code&gt; キーワードを使用できます。</target>
        </trans-unit>
        <trans-unit id="dd6443d8544f4bb56ab3cab6062600d72a758fbe" translate="yes" xml:space="preserve">
          <source>As a special rule to keep backward compatibility with older versions of the &lt;code&gt;importcpp&lt;/code&gt; pragma, if there is no special pattern character (any of &lt;code&gt;# ' @&lt;/code&gt;) at all, C++'s dot or arrow notation is assumed, so the above example can also be written as:</source>
          <target state="translated">&lt;code&gt;importcpp&lt;/code&gt; プラグマの古いバージョンとの下位互換性を維持するための特別なルールとして、特別なパターン文字（ &lt;code&gt;# ' @&lt;/code&gt; いずれか）がまったくない場合、C ++のドットまたは矢印表記が想定されるため、上記の例は次のように記述することもできます。 ：</target>
        </trans-unit>
        <trans-unit id="ce683dd181064064b72fd86d9d3e2b66acc2d7ce" translate="yes" xml:space="preserve">
          <source>As a special rule to keep backwards compatibility with older versions of the &lt;code&gt;importcpp&lt;/code&gt; pragma, if there is no special pattern character (any of &lt;code&gt;# ' @&lt;/code&gt;) at all, C++'s dot or arrow notation is assumed, so the above example can also be written as:</source>
          <target state="translated">古いバージョンの &lt;code&gt;importcpp&lt;/code&gt; プラグマとの下位互換性を維持するための特別な規則として、特別なパターン文字（ &lt;code&gt;# ' @&lt;/code&gt; いずれか）がまったくない場合、C ++のドットまたは矢印表記が想定されるため、上記の例は次のように書くこともできます。 ：</target>
        </trans-unit>
        <trans-unit id="ab91135276bb9fc3a4864b2e8e2281ee4c12f22b" translate="yes" xml:space="preserve">
          <source>As a special rule, the discriminator kind can also be bounded using a &lt;code&gt;case&lt;/code&gt; statement. If possible values of the discriminator variable in a &lt;code&gt;case&lt;/code&gt; statement branch are a subset of discriminator values for the selected object branch, the initialization is considered valid. This analysis only works for immutable discriminators of an ordinal type and disregards &lt;code&gt;elif&lt;/code&gt; branches. For discriminator values with a &lt;code&gt;range&lt;/code&gt; type, the compiler checks if the entire range of possible values for the discriminator value is valid for the chosen object branch.</source>
          <target state="translated">特別なルールとして、discriminatorの種類は &lt;code&gt;case&lt;/code&gt; ステートメントを使用して制限することもできます。 &lt;code&gt;case&lt;/code&gt; ステートメントブランチのdiscriminator変数の可能な値が、選択したオブジェクトブランチのdiscriminator値のサブセットである場合、初期化は有効であると見なされます。この分析は、通常のタイプの不変の弁別子に対してのみ機能し、 &lt;code&gt;elif&lt;/code&gt; ブランチを無視します。ディスクリミネータ値の &lt;code&gt;range&lt;/code&gt; タイプ、コンパイラチェックディスクリミネータ値の取り得る値の範囲全体が、選択されたオブジェクトブランチに対して有効である場合。</target>
        </trans-unit>
        <trans-unit id="afa79fbae0eabebb420b9fe3f09c01088cf66351" translate="yes" xml:space="preserve">
          <source>As a special rule, when the value of &lt;code&gt;decodePlus&lt;/code&gt; is true, &lt;code&gt;'+'&lt;/code&gt; characters are converted to a space.</source>
          <target state="translated">特別な規則として、 &lt;code&gt;decodePlus&lt;/code&gt; の値がtrueの場合、 &lt;code&gt;'+'&lt;/code&gt; 文字はスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="06f5de0278a73571ad2478819c0ab63c92da4626" translate="yes" xml:space="preserve">
          <source>As a special rule, when the value of &lt;code&gt;decodePlus&lt;/code&gt; is true, &lt;code&gt;+&lt;/code&gt; characters are converted to a space.</source>
          <target state="translated">特別な規則として、 &lt;code&gt;decodePlus&lt;/code&gt; の値がtrueの場合、 &lt;code&gt;+&lt;/code&gt; 文字はスペースに変換されます。</target>
        </trans-unit>
        <trans-unit id="1b120a7d9f07026a29d56a412d87eb19ed8fa37b" translate="yes" xml:space="preserve">
          <source>As a special rule, when the value of &lt;code&gt;usePlus&lt;/code&gt; is true, spaces are encoded as &lt;code&gt;'+'&lt;/code&gt; instead of &lt;code&gt;'%20'&lt;/code&gt;.</source>
          <target state="translated">特別な規則として、 &lt;code&gt;usePlus&lt;/code&gt; の値がtrueの場合、スペースは &lt;code&gt;'%20'&lt;/code&gt; ではなく &lt;code&gt;'+'&lt;/code&gt; としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="4ee4923f840cd34187586ac353af674c377642d5" translate="yes" xml:space="preserve">
          <source>As a special rule, when the value of &lt;code&gt;usePlus&lt;/code&gt; is true, spaces are encoded as &lt;code&gt;+&lt;/code&gt; instead of &lt;code&gt;%20&lt;/code&gt;.</source>
          <target state="translated">特別なルールとして、 &lt;code&gt;usePlus&lt;/code&gt; の値がtrueの場合、スペースは &lt;code&gt;%20&lt;/code&gt; ではなく &lt;code&gt;+&lt;/code&gt; としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="babff93920d51965108f37a93de33ae42b21d0fb" translate="yes" xml:space="preserve">
          <source>As a special semantic extension, an expression in an &lt;code&gt;of&lt;/code&gt; branch of a case statement may evaluate to a set or array constructor; the set or array is then expanded into a list of its elements:</source>
          <target state="translated">特別なセマンティック拡張として、caseステートメントの &lt;code&gt;of&lt;/code&gt; ブランチの式は、セットまたは配列コンストラクターとして評価されます。次に、セットまたは配列は、その要素のリストに展開されます。</target>
        </trans-unit>
        <trans-unit id="c8b38ae2d66cb902bbb85a37572813974cd63162" translate="yes" xml:space="preserve">
          <source>As a special semantic rule, &lt;code&gt;x&lt;/code&gt; may also be a type identifier (&lt;code&gt;sizeof(int)&lt;/code&gt; is valid).</source>
          <target state="translated">特別なセマンティックルールとして、 &lt;code&gt;x&lt;/code&gt; は型識別子でもあります（ &lt;code&gt;sizeof(int)&lt;/code&gt; は有効です）。</target>
        </trans-unit>
        <trans-unit id="4d5091f848f3ac37cf5086fc6521ba43800396a9" translate="yes" xml:space="preserve">
          <source>As a special semantic rule, &lt;code&gt;x&lt;/code&gt; may also be a type identifier.</source>
          <target state="translated">特別なセマンティックルールとして、 &lt;code&gt;x&lt;/code&gt; はタイプ識別子でもあります。</target>
        </trans-unit>
        <trans-unit id="d1d6a828142c8108ac0deb4cc6c8484c64faae27" translate="yes" xml:space="preserve">
          <source>As a special semantic rule, the built-in &lt;a href=&quot;system#debugEcho&quot;&gt;debugEcho&lt;/a&gt; pretends to be free of side effects, so that it can be used for debugging routines marked as &lt;code&gt;noSideEffect&lt;/code&gt;.</source>
          <target state="translated">特別なセマンティック原則として、ビルトイン&lt;a href=&quot;system#debugEcho&quot;&gt;debugEcho&lt;/a&gt;それは次のようにマークされたルーチンのデバッグのために使用することができるように、副作用の自由になりすまし &lt;code&gt;noSideEffect&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="849da20fcec3e5d33e7eb20a85880af3bc7ff686" translate="yes" xml:space="preserve">
          <source>As a special semantic rule, the built-in &lt;a href=&quot;system#debugEcho,varargs%5Btyped,%5D&quot;&gt;debugEcho&lt;/a&gt; pretends to be free of side effects, so that it can be used for debugging routines marked as &lt;code&gt;noSideEffect&lt;/code&gt;.</source>
          <target state="translated">特別なセマンティックルールとして、組み込みの&lt;a href=&quot;system#debugEcho,varargs%5Btyped,%5D&quot;&gt;debugEcho&lt;/a&gt;は副作用がないふりをするため、 &lt;code&gt;noSideEffect&lt;/code&gt; としてマークされたルーチンのデバッグに使用できます。</target>
        </trans-unit>
        <trans-unit id="71489e93932a05f2ea411285eaceb3bbe24614d1" translate="yes" xml:space="preserve">
          <source>As a syntactical extension &lt;code&gt;object&lt;/code&gt; types can be anonymous if declared in a type section via the &lt;code&gt;ref object&lt;/code&gt; or &lt;code&gt;ptr object&lt;/code&gt; notations. This feature is useful if an object should only gain reference semantics:</source>
          <target state="translated">構文拡張として、 &lt;code&gt;ref object&lt;/code&gt; または &lt;code&gt;ptr object&lt;/code&gt; 表記を介して型セクションで宣言されている場合、 &lt;code&gt;object&lt;/code&gt; 型は匿名になる可能性があります。この機能は、オブジェクトが参照セマンティクスのみを取得する必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="7859c8bf7a7bf8df21005d62f29109f1c4a9707d" translate="yes" xml:space="preserve">
          <source>As a top level statement, the experimental pragma enables a feature for the rest of the module it's enabled in. This is problematic for macro and generic instantiations that cross a module scope. Currently these usages have to be put into a &lt;code&gt;.push/pop&lt;/code&gt; environment:</source>
          <target state="translated">最上位のステートメントとして、実験的なプラグマは、それが有効にされているモジュールの残りの機能を有効にします。これは、モジュールのスコープをまたぐマクロおよび汎用のインスタンス化には問題があります。現在、これらの使用法は &lt;code&gt;.push/pop&lt;/code&gt; 環境に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8025bfa9773e094890bd5bb7bb9e170916e809b" translate="yes" xml:space="preserve">
          <source>As a top-level statement, the experimental pragma enables a feature for the rest of the module it's enabled in. This is problematic for macro and generic instantiations that cross a module scope. Currently, these usages have to be put into a &lt;code&gt;.push/pop&lt;/code&gt; environment:</source>
          <target state="translated">トップレベルのステートメントとして、実験的なプラグマは、それが有効になっているモジュールの残りの機能を有効にします。これは、モジュールのスコープを超えるマクロおよび汎用のインスタンス化では問題があります。現在、これらの使用法は &lt;code&gt;.push/pop&lt;/code&gt; 環境に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="1cc9ba3f444ef5f2a70c370287d23a7b3c9d81c8" translate="yes" xml:space="preserve">
          <source>As an example,</source>
          <target state="translated">一例として。</target>
        </trans-unit>
        <trans-unit id="7e62fd99966b92a3fd4bf5d979b50660343f0f5e" translate="yes" xml:space="preserve">
          <source>As an example, consider the amount of time between these two timestamps, both in the same timezone:</source>
          <target state="translated">例として、同じタイムゾーンにある2つのタイムスタンプの間の時間を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="fa0458d772e5450c5837302b3171366024dd5c0f" translate="yes" xml:space="preserve">
          <source>As an example, the following would not compile:</source>
          <target state="translated">例として、以下のような場合はコンパイルできません。</target>
        </trans-unit>
        <trans-unit id="0b935a3e149eeb28ead79ccda5acf74a96cba2bc" translate="yes" xml:space="preserve">
          <source>As can be manually verified, this transformation is correct for self-assignments.</source>
          <target state="translated">手動で確認できるように、この変換は自己割当で正しいです。</target>
        </trans-unit>
        <trans-unit id="4faf2cad17e66616bc46eb370913033cba7d7ffe" translate="yes" xml:space="preserve">
          <source>As can be seen from the example, C's macros with parameters are mapped to Nim's templates. This mapping is the best one can do, but it is of course not accurate: Nim's templates operate on syntax trees whereas C's macros work on the token level. c2nim cannot translate any macro that contains the &lt;code&gt;##&lt;/code&gt; token concatenation operator.</source>
          <target state="translated">例からわかるように、パラメーター付きのCのマクロはNimのテンプレートにマップされます。このマッピングは最善ですが、もちろん正確ではありません。Nimのテンプレートは構文ツリーで動作し、Cのマクロはトークンレベルで動作します。c2nimは、 &lt;code&gt;##&lt;/code&gt; トークン連結演算子を含むマクロを変換できません。</target>
        </trans-unit>
        <trans-unit id="cdca03b57c9a9c02d929b545595c9b2375041559" translate="yes" xml:space="preserve">
          <source>As can be seen from the example, an advantage to an object hierarchy is that no casting between different object types is needed. Yet, access to invalid object fields raises an exception.</source>
          <target state="translated">例からわかるように、オブジェクト階層の利点は、異なるオブジェクトタイプ間のキャストが不要であることです。しかし、無効なオブジェクトフィールドにアクセスすると例外が発生します。</target>
        </trans-unit>
        <trans-unit id="033710d5a2d1054844b9448ca63a783fde847ed0" translate="yes" xml:space="preserve">
          <source>As can be seen from the example, it is possible to both specify a field's ordinal value and its string value by using a tuple. It is also possible to only specify one of them.</source>
          <target state="translated">例を見てもわかるように、タプルを使ってフィールドの序列値と文字列値の両方を指定することができます。また、どちらか一方だけを指定することも可能です。</target>
        </trans-unit>
        <trans-unit id="f2059474be6954912aa2a1f6469b45737b7e11f5" translate="yes" xml:space="preserve">
          <source>As can be seen from the example, this solution is hardly sufficient and should eventually be replaced by a better solution.</source>
          <target state="translated">例に見られるように、この解決策ではほとんど不十分であり、最終的にはより良い解決策に置き換えるべきである。</target>
        </trans-unit>
        <trans-unit id="33db679c8421cd1a5bcfed816339b58d55a90cf0" translate="yes" xml:space="preserve">
          <source>As can be seen from the examples, strings are matched verbatim except for substrings starting with &lt;code&gt;$&lt;/code&gt;. These constructions are available:</source>
          <target state="translated">例からわかるように、文字列は &lt;code&gt;$&lt;/code&gt; で始まる部分文字列を除いて逐語的に照合されます。これらの構造は利用可能です：</target>
        </trans-unit>
        <trans-unit id="3690ed0de51a088f748c4a5d9756e00f903b6456" translate="yes" xml:space="preserve">
          <source>As can be seen in the example, base methods have to be annotated with the &lt;span id=&quot;base_1&quot;&gt;base&lt;/span&gt; pragma. The &lt;code&gt;base&lt;/code&gt; pragma also acts as a reminder for the programmer that a base method &lt;code&gt;m&lt;/code&gt; is used as the foundation to determine all the effects that a call to &lt;code&gt;m&lt;/code&gt; might cause.</source>
          <target state="translated">この例でわかるように、ベースメソッドには、&lt;span id=&quot;base_1&quot;&gt;ベース&lt;/span&gt;プラグマで注釈を付ける必要があります。また、 &lt;code&gt;base&lt;/code&gt; プラグマは、 &lt;code&gt;m&lt;/code&gt; への呼び出しが引き起こす可能性のあるすべての影響を判別するための基礎として、基本メソッド &lt;code&gt;m&lt;/code&gt; が使用されることをプログラマーに思い出させる働きをします。</target>
        </trans-unit>
        <trans-unit id="46e0fb06d3ebb9d87d99780ce68838895081e9f4" translate="yes" xml:space="preserve">
          <source>As can be seen in the example, this new variant allows for custom flags that are passed to the C compiler when the file is recompiled.</source>
          <target state="translated">例にあるように、この新しいバリアントでは、ファイルが再コンパイルされたときに C コンパイラに渡されるカスタムフラグを使用することができます。</target>
        </trans-unit>
        <trans-unit id="a5a364bd18b5eaef7b5722d6cd78c85c92bfa5dd" translate="yes" xml:space="preserve">
          <source>As can be seen in the productions, numerical constants can contain underscores for readability. Integer and floating point literals may be given in decimal (no prefix), binary (prefix &lt;code&gt;0b&lt;/code&gt;), octal (prefix &lt;code&gt;0o&lt;/code&gt;) and hexadecimal (prefix &lt;code&gt;0x&lt;/code&gt;) notation.</source>
          <target state="translated">プロダクションでわかるように、数値定数には、読みやすいようにアンダースコアを含めることができます。整数および浮動小数点リテラルは、10進数（接頭辞なし）、2進数（接頭辞 &lt;code&gt;0b&lt;/code&gt; ）、8進数（接頭辞 &lt;code&gt;0o&lt;/code&gt; ）および16進数（接頭辞 &lt;code&gt;0x&lt;/code&gt; ）表記で指定できます。</target>
        </trans-unit>
        <trans-unit id="c68ceacc6a8938d2e2de6c4f8059959bc6ce1693" translate="yes" xml:space="preserve">
          <source>As can be seen in the productions, numerical constants can contain underscores for readability. Integer and floating-point literals may be given in decimal (no prefix), binary (prefix &lt;code&gt;0b&lt;/code&gt;), octal (prefix &lt;code&gt;0o&lt;/code&gt;), and hexadecimal (prefix &lt;code&gt;0x&lt;/code&gt;) notation.</source>
          <target state="translated">プロダクションで見られるように、数値定数には読みやすさのためにアンダースコアを含めることができます。整数リテラルと浮動小数点リテラルは、10進数（プレフィックスなし）、2進数（プレフィックス &lt;code&gt;0b&lt;/code&gt; ）、8進数（プレフィックス &lt;code&gt;0o&lt;/code&gt; ）、および16進数（プレフィックス &lt;code&gt;0x&lt;/code&gt; ）の表記で指定できます。</target>
        </trans-unit>
        <trans-unit id="7dad921df2b5a3cd443f8e5461c7a9ccced2c050" translate="yes" xml:space="preserve">
          <source>As can been seen from the example, an advantage to an object hierarchy is that no casting between different object types is needed. Yet, access to invalid object fields raises an exception.</source>
          <target state="translated">例からわかるように、オブジェクト階層の利点は、異なるオブジェクトタイプ間のキャストが不要であることです。しかし、無効なオブジェクトフィールドへのアクセスは例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="86acee0719e4df42b833d89f9ce00671880b3bee" translate="yes" xml:space="preserve">
          <source>As can been seen from the example, an advantage to an object hierarchy is that no conversion between different object types is needed. Yet, access to invalid object fields raises an exception.</source>
          <target state="translated">例からわかるように、オブジェクト階層の利点は、異なるオブジェクトタイプ間の変換が必要ないことです。しかし、無効なオブジェクトフィールドへのアクセスは例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="8bd2dc16961a30c8b20a5aa5ef6562993b9d9ea9" translate="yes" xml:space="preserve">
          <source>As case statements perform compile-time exhaustiveness checks, the value in every &lt;code&gt;of&lt;/code&gt; branch must be known at compile time. This fact is also exploited to generate more performant code.</source>
          <target state="translated">caseステートメントはコンパイル時の網羅的なチェックを実行するため、すべて &lt;code&gt;of&lt;/code&gt; ブランチの値はコンパイル時に認識されている必要があります。この事実は、よりパフォーマンスの高いコードを生成するためにも利用されます。</target>
        </trans-unit>
        <trans-unit id="a3cf4fdd8a46537cb17ba2fc74bca88aa30a4384" translate="yes" xml:space="preserve">
          <source>As convention this proc will split index files into two categories: documentation and API. API indices will be all joined together into a single big sorted index, making the bulk of the final index. This is good for API documentation because many symbols are repated in different modules. On the other hand, documentation indices are essentially table of contents plus a few special markers. These documents will be rendered in a separate section which tries to maintain the order and hierarchy of the symbols in the index file.</source>
          <target state="translated">慣習として、この proc はインデックスファイルをドキュメンテーションと API の 2 つのカテゴリに分割します。APIのインデックスは、最終的なインデックスの大部分を占める大きなソートされた単一のインデックスに結合されます。多くのシンボルが異なるモジュールでリピーティングされているので、これはAPIドキュメンテーションに適しています。一方、ドキュメントのインデックスは基本的に目次といくつかの特別なマーカーを加えたものです。これらのドキュメントは、インデックスファイル内のシンボルの順序と階層を維持しようとする別のセクションでレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="c36898bdeea6eb9e3e341ac71004ffc85ade807c" translate="yes" xml:space="preserve">
          <source>As convention this proc will split index files into two categories: documentation and API. API indices will be all joined together into a single big sorted index, making the bulk of the final index. This is good for API documentation because many symbols are repeated in different modules. On the other hand, documentation indices are essentially table of contents plus a few special markers. These documents will be rendered in a separate section which tries to maintain the order and hierarchy of the symbols in the index file.</source>
          <target state="translated">慣習として、この proc はインデックスファイルをドキュメンテーションと API の 2 つのカテゴリに分割します。APIのインデックスは、最終的なインデックスの大部分を占める大きなソートされた単一のインデックスに結合されます。多くのシンボルが異なるモジュールで繰り返されるので、これはAPIドキュメンテーションに適しています。一方、ドキュメントのインデックスは基本的に目次といくつかの特別なマーカーを加えたものです。これらのドキュメントは、インデックスファイル内のシンボルの順序と階層を維持しようとする別のセクションでレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="e35fce15f7b6d0e8ddfe4a222398b9462fecc9a2" translate="yes" xml:space="preserve">
          <source>As in generics symbol binding can be influenced via &lt;code&gt;mixin&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt; statements.</source>
          <target state="translated">ジェネリックと同様に、シンボルバインディングは、 &lt;code&gt;mixin&lt;/code&gt; または &lt;code&gt;bind&lt;/code&gt; ステートメントを介して影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="0887bf802c49a565d93917f60c9350172010518c" translate="yes" xml:space="preserve">
          <source>As it can be seen, for an &lt;code&gt;of&lt;/code&gt; branch a comma separated list of values is also allowed.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;of&lt;/code&gt; ブランチでは、コンマで区切られた値のリストも許可されています。</target>
        </trans-unit>
        <trans-unit id="026e19060b7027adb0d7fdc31274d77b9a547e42" translate="yes" xml:space="preserve">
          <source>As long as a type &lt;code&gt;T&lt;/code&gt; is incomplete &lt;code&gt;sizeof(T)&lt;/code&gt; or &quot;runtime type information&quot; for &lt;code&gt;T&lt;/code&gt; is not available.</source>
          <target state="translated">限りタイプとして &lt;code&gt;T&lt;/code&gt; は不完全で &lt;code&gt;sizeof(T)&lt;/code&gt; または「ランタイムタイプ情報」 &lt;code&gt;T&lt;/code&gt; は利用できません。</target>
        </trans-unit>
        <trans-unit id="abcbb5924227bd04c281ecaaed135860652d02cc" translate="yes" xml:space="preserve">
          <source>As long as a type &lt;code&gt;T&lt;/code&gt; is incomplete, neither &lt;code&gt;sizeof(T)&lt;/code&gt; nor runtime type information for &lt;code&gt;T&lt;/code&gt; is available.</source>
          <target state="translated">限りタイプとして &lt;code&gt;T&lt;/code&gt; が不完全であり、どちら &lt;code&gt;sizeof(T)&lt;/code&gt; のためにも、実行時型情報 &lt;code&gt;T&lt;/code&gt; が利用可能です。</target>
        </trans-unit>
        <trans-unit id="2dca63b7a6f1fd2e2ca6e65f781d803b65614773" translate="yes" xml:space="preserve">
          <source>As long as you don't use the threadvar emulation Nim uses native thread variables, of which you get a fresh version whenever you create a thread. You can then attach a GC to this thread via</source>
          <target state="translated">スレッドvar エミュレーションを使用しない限り、Nim はネイティブのスレッド変数を使用します。を介して、このスレッドに GC 2011 をアタッチすることができます。</target>
        </trans-unit>
        <trans-unit id="26a74fa3cef27390dd0524bd6f48c70bfa5b9b01" translate="yes" xml:space="preserve">
          <source>As many &lt;code&gt;nnkIdent&lt;/code&gt; appear as there are pragmas between &lt;code&gt;{..}&lt;/code&gt;. Note that the declaration of new pragmas is essentially the same:</source>
          <target state="translated">&lt;code&gt;{..}&lt;/code&gt; の間のプラグマと同じ数の &lt;code&gt;nnkIdent&lt;/code&gt; が表示されます。新しいプラグマの宣言は基本的に同じであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="45b0ed81197cf305d45603349a135b9f85fd6ed7" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, the built-in &lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt; (stringify) operator turns any basic type into a string, which you can then print to the console using the &lt;code&gt;echo&lt;/code&gt; proc. However, advanced types, and your own custom types, won't work with the &lt;code&gt;$&lt;/code&gt; operator until you define it for them. Sometimes you just want to debug the current value of a complex type without having to write its &lt;code&gt;$&lt;/code&gt; operator. You can use then the &lt;a href=&quot;system#repr&quot;&gt;repr&lt;/a&gt; proc which works with any type and even complex data graphs with cycles. The following example shows that even for basic types there is a difference between the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;repr&lt;/code&gt; outputs:</source>
          <target state="translated">前に述べたように、組み込みの&lt;a href=&quot;system#%24&quot;&gt;$&lt;/a&gt;（stringify）演算子は基本的なタイプを文字列に変換し、 &lt;code&gt;echo&lt;/code&gt; proc を使用してコンソールに出力できます。ただし、高度な型と独自のカスタム型は、それらを定義するまで &lt;code&gt;$&lt;/code&gt; 演算子で機能しません。 &lt;code&gt;$&lt;/code&gt; 演算子を記述せずに、複合型の現在の値をデバッグしたい場合があります。次に、任意のタイプで動作する&lt;a href=&quot;system#repr&quot;&gt;repr&lt;/a&gt; procを使用でき、さらにサイクルを持つ複雑なデータグラフでも使用できます。次の例は、基本型でも &lt;code&gt;$&lt;/code&gt; と &lt;code&gt;repr&lt;/code&gt; の出力に違いがあることを示しています。</target>
        </trans-unit>
        <trans-unit id="8799d31c6b86134762de1ddc0bf334944aa1c4d5" translate="yes" xml:space="preserve">
          <source>As more options which do not accept values are added to your program, remember to amend &lt;code&gt;shortNoVal&lt;/code&gt; and &lt;code&gt;longNoVal&lt;/code&gt; accordingly.</source>
          <target state="translated">値を受け入れないオプションがプログラムに追加されると、 &lt;code&gt;longNoVal&lt;/code&gt; 応じて &lt;code&gt;shortNoVal&lt;/code&gt; とlongNoValを修正することを忘れないでください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
